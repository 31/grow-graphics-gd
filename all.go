//go:build !generate

// Code generated by the generate package DO NOT EDIT
package gd

import "unsafe"
import "reflect"
import "runtime/cgo"
import "runtime.link/mmm"

func (self String) CasecmpTo(to String) Int {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet[String](1, abi, to)
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.String.casecmp_to(abi.Get(0), abi.Get(1), abi.Back(), 1)
	var ret = frameGet[Int](abi)
	abi.free()
	return ret
}

func (self String) NocasecmpTo(to String) Int {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet[String](1, abi, to)
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.String.nocasecmp_to(abi.Get(0), abi.Get(1), abi.Back(), 1)
	var ret = frameGet[Int](abi)
	abi.free()
	return ret
}

func (self String) NaturalcasecmpTo(to String) Int {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet[String](1, abi, to)
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.String.naturalcasecmp_to(abi.Get(0), abi.Get(1), abi.Back(), 1)
	var ret = frameGet[Int](abi)
	abi.free()
	return ret
}

func (self String) NaturalnocasecmpTo(to String) Int {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet[String](1, abi, to)
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.String.naturalnocasecmp_to(abi.Get(0), abi.Get(1), abi.Back(), 1)
	var ret = frameGet[Int](abi)
	abi.free()
	return ret
}

func (self String) Length() Int {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.String.length(abi.Get(0), abi.Get(1), abi.Back(), 0)
	var ret = frameGet[Int](abi)
	abi.free()
	return ret
}

func (self String) Substr(ctx Context, from Int, len Int) String {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet[Int](1, abi, from)
	frameSet[Int](2, abi, len)
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.String.substr(abi.Get(0), abi.Get(1), abi.Back(), 2)
	var ret = frameGet[uintptr](abi)
	abi.free()
	return mmm.Make[API, String, uintptr](ctx, selfPtr.API, ret)
}

func (self String) GetSlice(ctx Context, delimiter String, slice Int) String {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet[String](1, abi, delimiter)
	frameSet[Int](2, abi, slice)
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.String.get_slice(abi.Get(0), abi.Get(1), abi.Back(), 2)
	var ret = frameGet[uintptr](abi)
	abi.free()
	return mmm.Make[API, String, uintptr](ctx, selfPtr.API, ret)
}

func (self String) GetSlicec(ctx Context, delimiter Int, slice Int) String {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet[Int](1, abi, delimiter)
	frameSet[Int](2, abi, slice)
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.String.get_slicec(abi.Get(0), abi.Get(1), abi.Back(), 2)
	var ret = frameGet[uintptr](abi)
	abi.free()
	return mmm.Make[API, String, uintptr](ctx, selfPtr.API, ret)
}

func (self String) GetSliceCount(delimiter String) Int {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet[String](1, abi, delimiter)
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.String.get_slice_count(abi.Get(0), abi.Get(1), abi.Back(), 1)
	var ret = frameGet[Int](abi)
	abi.free()
	return ret
}

func (self String) Find(what String, from Int) Int {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet[String](1, abi, what)
	frameSet[Int](2, abi, from)
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.String.find(abi.Get(0), abi.Get(1), abi.Back(), 2)
	var ret = frameGet[Int](abi)
	abi.free()
	return ret
}

func (self String) Count(what String, from Int, to Int) Int {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet[String](1, abi, what)
	frameSet[Int](2, abi, from)
	frameSet[Int](3, abi, to)
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.String.count(abi.Get(0), abi.Get(1), abi.Back(), 3)
	var ret = frameGet[Int](abi)
	abi.free()
	return ret
}

func (self String) Countn(what String, from Int, to Int) Int {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet[String](1, abi, what)
	frameSet[Int](2, abi, from)
	frameSet[Int](3, abi, to)
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.String.countn(abi.Get(0), abi.Get(1), abi.Back(), 3)
	var ret = frameGet[Int](abi)
	abi.free()
	return ret
}

func (self String) Findn(what String, from Int) Int {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet[String](1, abi, what)
	frameSet[Int](2, abi, from)
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.String.findn(abi.Get(0), abi.Get(1), abi.Back(), 2)
	var ret = frameGet[Int](abi)
	abi.free()
	return ret
}

func (self String) Rfind(what String, from Int) Int {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet[String](1, abi, what)
	frameSet[Int](2, abi, from)
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.String.rfind(abi.Get(0), abi.Get(1), abi.Back(), 2)
	var ret = frameGet[Int](abi)
	abi.free()
	return ret
}

func (self String) Rfindn(what String, from Int) Int {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet[String](1, abi, what)
	frameSet[Int](2, abi, from)
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.String.rfindn(abi.Get(0), abi.Get(1), abi.Back(), 2)
	var ret = frameGet[Int](abi)
	abi.free()
	return ret
}

func (self String) Match(expr String) bool {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet[String](1, abi, expr)
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.String.match(abi.Get(0), abi.Get(1), abi.Back(), 1)
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self String) Matchn(expr String) bool {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet[String](1, abi, expr)
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.String.matchn(abi.Get(0), abi.Get(1), abi.Back(), 1)
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self String) BeginsWith(text String) bool {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet[String](1, abi, text)
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.String.begins_with(abi.Get(0), abi.Get(1), abi.Back(), 1)
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self String) EndsWith(text String) bool {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet[String](1, abi, text)
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.String.ends_with(abi.Get(0), abi.Get(1), abi.Back(), 1)
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self String) IsSubsequenceOf(text String) bool {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet[String](1, abi, text)
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.String.is_subsequence_of(abi.Get(0), abi.Get(1), abi.Back(), 1)
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self String) IsSubsequenceOfn(text String) bool {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet[String](1, abi, text)
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.String.is_subsequence_ofn(abi.Get(0), abi.Get(1), abi.Back(), 1)
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self String) Bigrams(ctx Context) PackedStringArray {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.String.bigrams(abi.Get(0), abi.Get(1), abi.Back(), 0)
	var ret = frameGet[[2]uintptr](abi)
	abi.free()
	return mmm.Make[API, PackedStringArray, [2]uintptr](ctx, selfPtr.API, ret)
}

func (self String) Similarity(text String) Float {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet[String](1, abi, text)
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.String.similarity(abi.Get(0), abi.Get(1), abi.Back(), 1)
	var ret = frameGet[Float](abi)
	abi.free()
	return ret
}

func (self String) Format(ctx Context, values Variant, placeholder String) String {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet[Variant](1, abi, values)
	frameSet[String](2, abi, placeholder)
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.String.format(abi.Get(0), abi.Get(1), abi.Back(), 2)
	var ret = frameGet[uintptr](abi)
	abi.free()
	return mmm.Make[API, String, uintptr](ctx, selfPtr.API, ret)
}

func (self String) Replace(ctx Context, what String, forwhat String) String {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet[String](1, abi, what)
	frameSet[String](2, abi, forwhat)
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.String.replace(abi.Get(0), abi.Get(1), abi.Back(), 2)
	var ret = frameGet[uintptr](abi)
	abi.free()
	return mmm.Make[API, String, uintptr](ctx, selfPtr.API, ret)
}

func (self String) Replacen(ctx Context, what String, forwhat String) String {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet[String](1, abi, what)
	frameSet[String](2, abi, forwhat)
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.String.replacen(abi.Get(0), abi.Get(1), abi.Back(), 2)
	var ret = frameGet[uintptr](abi)
	abi.free()
	return mmm.Make[API, String, uintptr](ctx, selfPtr.API, ret)
}

func (self String) Repeat(ctx Context, count Int) String {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet[Int](1, abi, count)
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.String.repeat(abi.Get(0), abi.Get(1), abi.Back(), 1)
	var ret = frameGet[uintptr](abi)
	abi.free()
	return mmm.Make[API, String, uintptr](ctx, selfPtr.API, ret)
}

func (self String) Reverse(ctx Context) String {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.String.reverse(abi.Get(0), abi.Get(1), abi.Back(), 0)
	var ret = frameGet[uintptr](abi)
	abi.free()
	return mmm.Make[API, String, uintptr](ctx, selfPtr.API, ret)
}

func (self String) Insert(ctx Context, position Int, what String) String {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet[Int](1, abi, position)
	frameSet[String](2, abi, what)
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.String.insert(abi.Get(0), abi.Get(1), abi.Back(), 2)
	var ret = frameGet[uintptr](abi)
	abi.free()
	return mmm.Make[API, String, uintptr](ctx, selfPtr.API, ret)
}

func (self String) Erase(ctx Context, position Int, chars Int) String {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet[Int](1, abi, position)
	frameSet[Int](2, abi, chars)
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.String.erase(abi.Get(0), abi.Get(1), abi.Back(), 2)
	var ret = frameGet[uintptr](abi)
	abi.free()
	return mmm.Make[API, String, uintptr](ctx, selfPtr.API, ret)
}

func (self String) Capitalize(ctx Context) String {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.String.capitalize(abi.Get(0), abi.Get(1), abi.Back(), 0)
	var ret = frameGet[uintptr](abi)
	abi.free()
	return mmm.Make[API, String, uintptr](ctx, selfPtr.API, ret)
}

func (self String) ToCamelCase(ctx Context) String {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.String.to_camel_case(abi.Get(0), abi.Get(1), abi.Back(), 0)
	var ret = frameGet[uintptr](abi)
	abi.free()
	return mmm.Make[API, String, uintptr](ctx, selfPtr.API, ret)
}

func (self String) ToPascalCase(ctx Context) String {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.String.to_pascal_case(abi.Get(0), abi.Get(1), abi.Back(), 0)
	var ret = frameGet[uintptr](abi)
	abi.free()
	return mmm.Make[API, String, uintptr](ctx, selfPtr.API, ret)
}

func (self String) ToSnakeCase(ctx Context) String {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.String.to_snake_case(abi.Get(0), abi.Get(1), abi.Back(), 0)
	var ret = frameGet[uintptr](abi)
	abi.free()
	return mmm.Make[API, String, uintptr](ctx, selfPtr.API, ret)
}

func (self String) Split(ctx Context, delimiter String, allow_empty bool, maxsplit Int) PackedStringArray {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet[String](1, abi, delimiter)
	frameSet[bool](2, abi, allow_empty)
	frameSet[Int](3, abi, maxsplit)
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.String.split(abi.Get(0), abi.Get(1), abi.Back(), 3)
	var ret = frameGet[[2]uintptr](abi)
	abi.free()
	return mmm.Make[API, PackedStringArray, [2]uintptr](ctx, selfPtr.API, ret)
}

func (self String) Rsplit(ctx Context, delimiter String, allow_empty bool, maxsplit Int) PackedStringArray {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet[String](1, abi, delimiter)
	frameSet[bool](2, abi, allow_empty)
	frameSet[Int](3, abi, maxsplit)
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.String.rsplit(abi.Get(0), abi.Get(1), abi.Back(), 3)
	var ret = frameGet[[2]uintptr](abi)
	abi.free()
	return mmm.Make[API, PackedStringArray, [2]uintptr](ctx, selfPtr.API, ret)
}

func (self String) SplitFloats(ctx Context, delimiter String, allow_empty bool) PackedFloat64Array {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet[String](1, abi, delimiter)
	frameSet[bool](2, abi, allow_empty)
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.String.split_floats(abi.Get(0), abi.Get(1), abi.Back(), 2)
	var ret = frameGet[[2]uintptr](abi)
	abi.free()
	return mmm.Make[API, PackedFloat64Array, [2]uintptr](ctx, selfPtr.API, ret)
}

func (self String) Join(ctx Context, parts PackedStringArray) String {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet[PackedStringArray](1, abi, parts)
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.String.join(abi.Get(0), abi.Get(1), abi.Back(), 1)
	var ret = frameGet[uintptr](abi)
	abi.free()
	return mmm.Make[API, String, uintptr](ctx, selfPtr.API, ret)
}

func (self String) ToUpper(ctx Context) String {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.String.to_upper(abi.Get(0), abi.Get(1), abi.Back(), 0)
	var ret = frameGet[uintptr](abi)
	abi.free()
	return mmm.Make[API, String, uintptr](ctx, selfPtr.API, ret)
}

func (self String) ToLower(ctx Context) String {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.String.to_lower(abi.Get(0), abi.Get(1), abi.Back(), 0)
	var ret = frameGet[uintptr](abi)
	abi.free()
	return mmm.Make[API, String, uintptr](ctx, selfPtr.API, ret)
}

func (self String) Left(ctx Context, length Int) String {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet[Int](1, abi, length)
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.String.left(abi.Get(0), abi.Get(1), abi.Back(), 1)
	var ret = frameGet[uintptr](abi)
	abi.free()
	return mmm.Make[API, String, uintptr](ctx, selfPtr.API, ret)
}

func (self String) Right(ctx Context, length Int) String {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet[Int](1, abi, length)
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.String.right(abi.Get(0), abi.Get(1), abi.Back(), 1)
	var ret = frameGet[uintptr](abi)
	abi.free()
	return mmm.Make[API, String, uintptr](ctx, selfPtr.API, ret)
}

func (self String) StripEdges(ctx Context, left bool, right bool) String {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet[bool](1, abi, left)
	frameSet[bool](2, abi, right)
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.String.strip_edges(abi.Get(0), abi.Get(1), abi.Back(), 2)
	var ret = frameGet[uintptr](abi)
	abi.free()
	return mmm.Make[API, String, uintptr](ctx, selfPtr.API, ret)
}

func (self String) StripEscapes(ctx Context) String {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.String.strip_escapes(abi.Get(0), abi.Get(1), abi.Back(), 0)
	var ret = frameGet[uintptr](abi)
	abi.free()
	return mmm.Make[API, String, uintptr](ctx, selfPtr.API, ret)
}

func (self String) Lstrip(ctx Context, chars String) String {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet[String](1, abi, chars)
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.String.lstrip(abi.Get(0), abi.Get(1), abi.Back(), 1)
	var ret = frameGet[uintptr](abi)
	abi.free()
	return mmm.Make[API, String, uintptr](ctx, selfPtr.API, ret)
}

func (self String) Rstrip(ctx Context, chars String) String {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet[String](1, abi, chars)
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.String.rstrip(abi.Get(0), abi.Get(1), abi.Back(), 1)
	var ret = frameGet[uintptr](abi)
	abi.free()
	return mmm.Make[API, String, uintptr](ctx, selfPtr.API, ret)
}

func (self String) GetExtension(ctx Context) String {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.String.get_extension(abi.Get(0), abi.Get(1), abi.Back(), 0)
	var ret = frameGet[uintptr](abi)
	abi.free()
	return mmm.Make[API, String, uintptr](ctx, selfPtr.API, ret)
}

func (self String) GetBasename(ctx Context) String {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.String.get_basename(abi.Get(0), abi.Get(1), abi.Back(), 0)
	var ret = frameGet[uintptr](abi)
	abi.free()
	return mmm.Make[API, String, uintptr](ctx, selfPtr.API, ret)
}

func (self String) PathJoin(ctx Context, file String) String {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet[String](1, abi, file)
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.String.path_join(abi.Get(0), abi.Get(1), abi.Back(), 1)
	var ret = frameGet[uintptr](abi)
	abi.free()
	return mmm.Make[API, String, uintptr](ctx, selfPtr.API, ret)
}

func (self String) UnicodeAt(at Int) Int {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet[Int](1, abi, at)
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.String.unicode_at(abi.Get(0), abi.Get(1), abi.Back(), 1)
	var ret = frameGet[Int](abi)
	abi.free()
	return ret
}

func (self String) Indent(ctx Context, prefix String) String {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet[String](1, abi, prefix)
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.String.indent(abi.Get(0), abi.Get(1), abi.Back(), 1)
	var ret = frameGet[uintptr](abi)
	abi.free()
	return mmm.Make[API, String, uintptr](ctx, selfPtr.API, ret)
}

func (self String) Dedent(ctx Context) String {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.String.dedent(abi.Get(0), abi.Get(1), abi.Back(), 0)
	var ret = frameGet[uintptr](abi)
	abi.free()
	return mmm.Make[API, String, uintptr](ctx, selfPtr.API, ret)
}

func (self String) Hash() Int {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.String.hash(abi.Get(0), abi.Get(1), abi.Back(), 0)
	var ret = frameGet[Int](abi)
	abi.free()
	return ret
}

func (self String) Md5Text(ctx Context) String {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.String.md5_text(abi.Get(0), abi.Get(1), abi.Back(), 0)
	var ret = frameGet[uintptr](abi)
	abi.free()
	return mmm.Make[API, String, uintptr](ctx, selfPtr.API, ret)
}

func (self String) Sha1Text(ctx Context) String {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.String.sha1_text(abi.Get(0), abi.Get(1), abi.Back(), 0)
	var ret = frameGet[uintptr](abi)
	abi.free()
	return mmm.Make[API, String, uintptr](ctx, selfPtr.API, ret)
}

func (self String) Sha256Text(ctx Context) String {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.String.sha256_text(abi.Get(0), abi.Get(1), abi.Back(), 0)
	var ret = frameGet[uintptr](abi)
	abi.free()
	return mmm.Make[API, String, uintptr](ctx, selfPtr.API, ret)
}

func (self String) Md5Buffer(ctx Context) PackedByteArray {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.String.md5_buffer(abi.Get(0), abi.Get(1), abi.Back(), 0)
	var ret = frameGet[[2]uintptr](abi)
	abi.free()
	return mmm.Make[API, PackedByteArray, [2]uintptr](ctx, selfPtr.API, ret)
}

func (self String) Sha1Buffer(ctx Context) PackedByteArray {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.String.sha1_buffer(abi.Get(0), abi.Get(1), abi.Back(), 0)
	var ret = frameGet[[2]uintptr](abi)
	abi.free()
	return mmm.Make[API, PackedByteArray, [2]uintptr](ctx, selfPtr.API, ret)
}

func (self String) Sha256Buffer(ctx Context) PackedByteArray {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.String.sha256_buffer(abi.Get(0), abi.Get(1), abi.Back(), 0)
	var ret = frameGet[[2]uintptr](abi)
	abi.free()
	return mmm.Make[API, PackedByteArray, [2]uintptr](ctx, selfPtr.API, ret)
}

func (self String) IsEmpty() bool {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.String.is_empty(abi.Get(0), abi.Get(1), abi.Back(), 0)
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self String) Contains(what String) bool {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet[String](1, abi, what)
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.String.contains(abi.Get(0), abi.Get(1), abi.Back(), 1)
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self String) IsAbsolutePath() bool {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.String.is_absolute_path(abi.Get(0), abi.Get(1), abi.Back(), 0)
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self String) IsRelativePath() bool {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.String.is_relative_path(abi.Get(0), abi.Get(1), abi.Back(), 0)
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self String) SimplifyPath(ctx Context) String {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.String.simplify_path(abi.Get(0), abi.Get(1), abi.Back(), 0)
	var ret = frameGet[uintptr](abi)
	abi.free()
	return mmm.Make[API, String, uintptr](ctx, selfPtr.API, ret)
}

func (self String) GetBaseDir(ctx Context) String {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.String.get_base_dir(abi.Get(0), abi.Get(1), abi.Back(), 0)
	var ret = frameGet[uintptr](abi)
	abi.free()
	return mmm.Make[API, String, uintptr](ctx, selfPtr.API, ret)
}

func (self String) GetFile(ctx Context) String {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.String.get_file(abi.Get(0), abi.Get(1), abi.Back(), 0)
	var ret = frameGet[uintptr](abi)
	abi.free()
	return mmm.Make[API, String, uintptr](ctx, selfPtr.API, ret)
}

func (self String) XmlEscape(ctx Context, escape_quotes bool) String {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet[bool](1, abi, escape_quotes)
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.String.xml_escape(abi.Get(0), abi.Get(1), abi.Back(), 1)
	var ret = frameGet[uintptr](abi)
	abi.free()
	return mmm.Make[API, String, uintptr](ctx, selfPtr.API, ret)
}

func (self String) XmlUnescape(ctx Context) String {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.String.xml_unescape(abi.Get(0), abi.Get(1), abi.Back(), 0)
	var ret = frameGet[uintptr](abi)
	abi.free()
	return mmm.Make[API, String, uintptr](ctx, selfPtr.API, ret)
}

func (self String) UriEncode(ctx Context) String {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.String.uri_encode(abi.Get(0), abi.Get(1), abi.Back(), 0)
	var ret = frameGet[uintptr](abi)
	abi.free()
	return mmm.Make[API, String, uintptr](ctx, selfPtr.API, ret)
}

func (self String) UriDecode(ctx Context) String {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.String.uri_decode(abi.Get(0), abi.Get(1), abi.Back(), 0)
	var ret = frameGet[uintptr](abi)
	abi.free()
	return mmm.Make[API, String, uintptr](ctx, selfPtr.API, ret)
}

func (self String) CEscape(ctx Context) String {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.String.c_escape(abi.Get(0), abi.Get(1), abi.Back(), 0)
	var ret = frameGet[uintptr](abi)
	abi.free()
	return mmm.Make[API, String, uintptr](ctx, selfPtr.API, ret)
}

func (self String) CUnescape(ctx Context) String {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.String.c_unescape(abi.Get(0), abi.Get(1), abi.Back(), 0)
	var ret = frameGet[uintptr](abi)
	abi.free()
	return mmm.Make[API, String, uintptr](ctx, selfPtr.API, ret)
}

func (self String) JsonEscape(ctx Context) String {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.String.json_escape(abi.Get(0), abi.Get(1), abi.Back(), 0)
	var ret = frameGet[uintptr](abi)
	abi.free()
	return mmm.Make[API, String, uintptr](ctx, selfPtr.API, ret)
}

func (self String) ValidateNodeName(ctx Context) String {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.String.validate_node_name(abi.Get(0), abi.Get(1), abi.Back(), 0)
	var ret = frameGet[uintptr](abi)
	abi.free()
	return mmm.Make[API, String, uintptr](ctx, selfPtr.API, ret)
}

func (self String) ValidateFilename(ctx Context) String {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.String.validate_filename(abi.Get(0), abi.Get(1), abi.Back(), 0)
	var ret = frameGet[uintptr](abi)
	abi.free()
	return mmm.Make[API, String, uintptr](ctx, selfPtr.API, ret)
}

func (self String) IsValidIdentifier() bool {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.String.is_valid_identifier(abi.Get(0), abi.Get(1), abi.Back(), 0)
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self String) IsValidInt() bool {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.String.is_valid_int(abi.Get(0), abi.Get(1), abi.Back(), 0)
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self String) IsValidFloat() bool {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.String.is_valid_float(abi.Get(0), abi.Get(1), abi.Back(), 0)
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self String) IsValidHexNumber(with_prefix bool) bool {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet[bool](1, abi, with_prefix)
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.String.is_valid_hex_number(abi.Get(0), abi.Get(1), abi.Back(), 1)
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self String) IsValidHtmlColor() bool {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.String.is_valid_html_color(abi.Get(0), abi.Get(1), abi.Back(), 0)
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self String) IsValidIpAddress() bool {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.String.is_valid_ip_address(abi.Get(0), abi.Get(1), abi.Back(), 0)
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self String) IsValidFilename() bool {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.String.is_valid_filename(abi.Get(0), abi.Get(1), abi.Back(), 0)
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self String) ToInt() Int {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.String.to_int(abi.Get(0), abi.Get(1), abi.Back(), 0)
	var ret = frameGet[Int](abi)
	abi.free()
	return ret
}

func (self String) ToFloat() Float {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.String.to_float(abi.Get(0), abi.Get(1), abi.Back(), 0)
	var ret = frameGet[Float](abi)
	abi.free()
	return ret
}

func (self String) HexToInt() Int {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.String.hex_to_int(abi.Get(0), abi.Get(1), abi.Back(), 0)
	var ret = frameGet[Int](abi)
	abi.free()
	return ret
}

func (self String) BinToInt() Int {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.String.bin_to_int(abi.Get(0), abi.Get(1), abi.Back(), 0)
	var ret = frameGet[Int](abi)
	abi.free()
	return ret
}

func (self String) Lpad(ctx Context, min_length Int, character String) String {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet[Int](1, abi, min_length)
	frameSet[String](2, abi, character)
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.String.lpad(abi.Get(0), abi.Get(1), abi.Back(), 2)
	var ret = frameGet[uintptr](abi)
	abi.free()
	return mmm.Make[API, String, uintptr](ctx, selfPtr.API, ret)
}

func (self String) Rpad(ctx Context, min_length Int, character String) String {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet[Int](1, abi, min_length)
	frameSet[String](2, abi, character)
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.String.rpad(abi.Get(0), abi.Get(1), abi.Back(), 2)
	var ret = frameGet[uintptr](abi)
	abi.free()
	return mmm.Make[API, String, uintptr](ctx, selfPtr.API, ret)
}

func (self String) PadDecimals(ctx Context, digits Int) String {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet[Int](1, abi, digits)
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.String.pad_decimals(abi.Get(0), abi.Get(1), abi.Back(), 1)
	var ret = frameGet[uintptr](abi)
	abi.free()
	return mmm.Make[API, String, uintptr](ctx, selfPtr.API, ret)
}

func (self String) PadZeros(ctx Context, digits Int) String {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet[Int](1, abi, digits)
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.String.pad_zeros(abi.Get(0), abi.Get(1), abi.Back(), 1)
	var ret = frameGet[uintptr](abi)
	abi.free()
	return mmm.Make[API, String, uintptr](ctx, selfPtr.API, ret)
}

func (self String) TrimPrefix(ctx Context, prefix String) String {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet[String](1, abi, prefix)
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.String.trim_prefix(abi.Get(0), abi.Get(1), abi.Back(), 1)
	var ret = frameGet[uintptr](abi)
	abi.free()
	return mmm.Make[API, String, uintptr](ctx, selfPtr.API, ret)
}

func (self String) TrimSuffix(ctx Context, suffix String) String {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet[String](1, abi, suffix)
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.String.trim_suffix(abi.Get(0), abi.Get(1), abi.Back(), 1)
	var ret = frameGet[uintptr](abi)
	abi.free()
	return mmm.Make[API, String, uintptr](ctx, selfPtr.API, ret)
}

func (self String) ToAsciiBuffer(ctx Context) PackedByteArray {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.String.to_ascii_buffer(abi.Get(0), abi.Get(1), abi.Back(), 0)
	var ret = frameGet[[2]uintptr](abi)
	abi.free()
	return mmm.Make[API, PackedByteArray, [2]uintptr](ctx, selfPtr.API, ret)
}

func (self String) ToUtf8Buffer(ctx Context) PackedByteArray {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.String.to_utf8_buffer(abi.Get(0), abi.Get(1), abi.Back(), 0)
	var ret = frameGet[[2]uintptr](abi)
	abi.free()
	return mmm.Make[API, PackedByteArray, [2]uintptr](ctx, selfPtr.API, ret)
}

func (self String) ToUtf16Buffer(ctx Context) PackedByteArray {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.String.to_utf16_buffer(abi.Get(0), abi.Get(1), abi.Back(), 0)
	var ret = frameGet[[2]uintptr](abi)
	abi.free()
	return mmm.Make[API, PackedByteArray, [2]uintptr](ctx, selfPtr.API, ret)
}

func (self String) ToUtf32Buffer(ctx Context) PackedByteArray {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.String.to_utf32_buffer(abi.Get(0), abi.Get(1), abi.Back(), 0)
	var ret = frameGet[[2]uintptr](abi)
	abi.free()
	return mmm.Make[API, PackedByteArray, [2]uintptr](ctx, selfPtr.API, ret)
}

func (self String) HexDecode(ctx Context) PackedByteArray {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.String.hex_decode(abi.Get(0), abi.Get(1), abi.Back(), 0)
	var ret = frameGet[[2]uintptr](abi)
	abi.free()
	return mmm.Make[API, PackedByteArray, [2]uintptr](ctx, selfPtr.API, ret)
}

func (self String) ToWcharBuffer(ctx Context) PackedByteArray {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.String.to_wchar_buffer(abi.Get(0), abi.Get(1), abi.Back(), 0)
	var ret = frameGet[[2]uintptr](abi)
	abi.free()
	return mmm.Make[API, PackedByteArray, [2]uintptr](ctx, selfPtr.API, ret)
}

func (self String) NumScientific(ctx Context, number Float) String {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet[Float](1, abi, number)
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.String.num_scientific(abi.Get(0), abi.Get(1), abi.Back(), 1)
	var ret = frameGet[uintptr](abi)
	abi.free()
	return mmm.Make[API, String, uintptr](ctx, selfPtr.API, ret)
}

func (self String) Num(ctx Context, number Float, decimals Int) String {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet[Float](1, abi, number)
	frameSet[Int](2, abi, decimals)
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.String.num(abi.Get(0), abi.Get(1), abi.Back(), 2)
	var ret = frameGet[uintptr](abi)
	abi.free()
	return mmm.Make[API, String, uintptr](ctx, selfPtr.API, ret)
}

func (self String) NumInt64(ctx Context, number Int, base Int, capitalize_hex bool) String {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet[Int](1, abi, number)
	frameSet[Int](2, abi, base)
	frameSet[bool](3, abi, capitalize_hex)
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.String.num_int64(abi.Get(0), abi.Get(1), abi.Back(), 3)
	var ret = frameGet[uintptr](abi)
	abi.free()
	return mmm.Make[API, String, uintptr](ctx, selfPtr.API, ret)
}

func (self String) NumUint64(ctx Context, number Int, base Int, capitalize_hex bool) String {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet[Int](1, abi, number)
	frameSet[Int](2, abi, base)
	frameSet[bool](3, abi, capitalize_hex)
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.String.num_uint64(abi.Get(0), abi.Get(1), abi.Back(), 3)
	var ret = frameGet[uintptr](abi)
	abi.free()
	return mmm.Make[API, String, uintptr](ctx, selfPtr.API, ret)
}

func (self String) Chr(ctx Context, char Int) String {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet[Int](1, abi, char)
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.String.chr(abi.Get(0), abi.Get(1), abi.Back(), 1)
	var ret = frameGet[uintptr](abi)
	abi.free()
	return mmm.Make[API, String, uintptr](ctx, selfPtr.API, ret)
}

func (self String) HumanizeSize(ctx Context, size Int) String {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet[Int](1, abi, size)
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.String.humanize_size(abi.Get(0), abi.Get(1), abi.Back(), 1)
	var ret = frameGet[uintptr](abi)
	abi.free()
	return mmm.Make[API, String, uintptr](ctx, selfPtr.API, ret)
}

func (self StringName) CasecmpTo(to String) Int {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet[String](1, abi, to)
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.StringName.casecmp_to(abi.Get(0), abi.Get(1), abi.Back(), 1)
	var ret = frameGet[Int](abi)
	abi.free()
	return ret
}

func (self StringName) NocasecmpTo(to String) Int {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet[String](1, abi, to)
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.StringName.nocasecmp_to(abi.Get(0), abi.Get(1), abi.Back(), 1)
	var ret = frameGet[Int](abi)
	abi.free()
	return ret
}

func (self StringName) NaturalcasecmpTo(to String) Int {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet[String](1, abi, to)
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.StringName.naturalcasecmp_to(abi.Get(0), abi.Get(1), abi.Back(), 1)
	var ret = frameGet[Int](abi)
	abi.free()
	return ret
}

func (self StringName) NaturalnocasecmpTo(to String) Int {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet[String](1, abi, to)
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.StringName.naturalnocasecmp_to(abi.Get(0), abi.Get(1), abi.Back(), 1)
	var ret = frameGet[Int](abi)
	abi.free()
	return ret
}

func (self StringName) Length() Int {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.StringName.length(abi.Get(0), abi.Get(1), abi.Back(), 0)
	var ret = frameGet[Int](abi)
	abi.free()
	return ret
}

func (self StringName) Substr(ctx Context, from Int, len Int) String {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet[Int](1, abi, from)
	frameSet[Int](2, abi, len)
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.StringName.substr(abi.Get(0), abi.Get(1), abi.Back(), 2)
	var ret = frameGet[uintptr](abi)
	abi.free()
	return mmm.Make[API, String, uintptr](ctx, selfPtr.API, ret)
}

func (self StringName) GetSlice(ctx Context, delimiter String, slice Int) String {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet[String](1, abi, delimiter)
	frameSet[Int](2, abi, slice)
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.StringName.get_slice(abi.Get(0), abi.Get(1), abi.Back(), 2)
	var ret = frameGet[uintptr](abi)
	abi.free()
	return mmm.Make[API, String, uintptr](ctx, selfPtr.API, ret)
}

func (self StringName) GetSlicec(ctx Context, delimiter Int, slice Int) String {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet[Int](1, abi, delimiter)
	frameSet[Int](2, abi, slice)
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.StringName.get_slicec(abi.Get(0), abi.Get(1), abi.Back(), 2)
	var ret = frameGet[uintptr](abi)
	abi.free()
	return mmm.Make[API, String, uintptr](ctx, selfPtr.API, ret)
}

func (self StringName) GetSliceCount(delimiter String) Int {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet[String](1, abi, delimiter)
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.StringName.get_slice_count(abi.Get(0), abi.Get(1), abi.Back(), 1)
	var ret = frameGet[Int](abi)
	abi.free()
	return ret
}

func (self StringName) Find(what String, from Int) Int {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet[String](1, abi, what)
	frameSet[Int](2, abi, from)
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.StringName.find(abi.Get(0), abi.Get(1), abi.Back(), 2)
	var ret = frameGet[Int](abi)
	abi.free()
	return ret
}

func (self StringName) Count(what String, from Int, to Int) Int {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet[String](1, abi, what)
	frameSet[Int](2, abi, from)
	frameSet[Int](3, abi, to)
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.StringName.count(abi.Get(0), abi.Get(1), abi.Back(), 3)
	var ret = frameGet[Int](abi)
	abi.free()
	return ret
}

func (self StringName) Countn(what String, from Int, to Int) Int {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet[String](1, abi, what)
	frameSet[Int](2, abi, from)
	frameSet[Int](3, abi, to)
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.StringName.countn(abi.Get(0), abi.Get(1), abi.Back(), 3)
	var ret = frameGet[Int](abi)
	abi.free()
	return ret
}

func (self StringName) Findn(what String, from Int) Int {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet[String](1, abi, what)
	frameSet[Int](2, abi, from)
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.StringName.findn(abi.Get(0), abi.Get(1), abi.Back(), 2)
	var ret = frameGet[Int](abi)
	abi.free()
	return ret
}

func (self StringName) Rfind(what String, from Int) Int {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet[String](1, abi, what)
	frameSet[Int](2, abi, from)
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.StringName.rfind(abi.Get(0), abi.Get(1), abi.Back(), 2)
	var ret = frameGet[Int](abi)
	abi.free()
	return ret
}

func (self StringName) Rfindn(what String, from Int) Int {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet[String](1, abi, what)
	frameSet[Int](2, abi, from)
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.StringName.rfindn(abi.Get(0), abi.Get(1), abi.Back(), 2)
	var ret = frameGet[Int](abi)
	abi.free()
	return ret
}

func (self StringName) Match(expr String) bool {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet[String](1, abi, expr)
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.StringName.match(abi.Get(0), abi.Get(1), abi.Back(), 1)
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self StringName) Matchn(expr String) bool {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet[String](1, abi, expr)
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.StringName.matchn(abi.Get(0), abi.Get(1), abi.Back(), 1)
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self StringName) BeginsWith(text String) bool {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet[String](1, abi, text)
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.StringName.begins_with(abi.Get(0), abi.Get(1), abi.Back(), 1)
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self StringName) EndsWith(text String) bool {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet[String](1, abi, text)
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.StringName.ends_with(abi.Get(0), abi.Get(1), abi.Back(), 1)
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self StringName) IsSubsequenceOf(text String) bool {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet[String](1, abi, text)
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.StringName.is_subsequence_of(abi.Get(0), abi.Get(1), abi.Back(), 1)
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self StringName) IsSubsequenceOfn(text String) bool {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet[String](1, abi, text)
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.StringName.is_subsequence_ofn(abi.Get(0), abi.Get(1), abi.Back(), 1)
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self StringName) Bigrams(ctx Context) PackedStringArray {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.StringName.bigrams(abi.Get(0), abi.Get(1), abi.Back(), 0)
	var ret = frameGet[[2]uintptr](abi)
	abi.free()
	return mmm.Make[API, PackedStringArray, [2]uintptr](ctx, selfPtr.API, ret)
}

func (self StringName) Similarity(text String) Float {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet[String](1, abi, text)
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.StringName.similarity(abi.Get(0), abi.Get(1), abi.Back(), 1)
	var ret = frameGet[Float](abi)
	abi.free()
	return ret
}

func (self StringName) Format(ctx Context, values Variant, placeholder String) String {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet[Variant](1, abi, values)
	frameSet[String](2, abi, placeholder)
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.StringName.format(abi.Get(0), abi.Get(1), abi.Back(), 2)
	var ret = frameGet[uintptr](abi)
	abi.free()
	return mmm.Make[API, String, uintptr](ctx, selfPtr.API, ret)
}

func (self StringName) Replace(ctx Context, what String, forwhat String) String {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet[String](1, abi, what)
	frameSet[String](2, abi, forwhat)
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.StringName.replace(abi.Get(0), abi.Get(1), abi.Back(), 2)
	var ret = frameGet[uintptr](abi)
	abi.free()
	return mmm.Make[API, String, uintptr](ctx, selfPtr.API, ret)
}

func (self StringName) Replacen(ctx Context, what String, forwhat String) String {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet[String](1, abi, what)
	frameSet[String](2, abi, forwhat)
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.StringName.replacen(abi.Get(0), abi.Get(1), abi.Back(), 2)
	var ret = frameGet[uintptr](abi)
	abi.free()
	return mmm.Make[API, String, uintptr](ctx, selfPtr.API, ret)
}

func (self StringName) Repeat(ctx Context, count Int) String {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet[Int](1, abi, count)
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.StringName.repeat(abi.Get(0), abi.Get(1), abi.Back(), 1)
	var ret = frameGet[uintptr](abi)
	abi.free()
	return mmm.Make[API, String, uintptr](ctx, selfPtr.API, ret)
}

func (self StringName) Reverse(ctx Context) String {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.StringName.reverse(abi.Get(0), abi.Get(1), abi.Back(), 0)
	var ret = frameGet[uintptr](abi)
	abi.free()
	return mmm.Make[API, String, uintptr](ctx, selfPtr.API, ret)
}

func (self StringName) Insert(ctx Context, position Int, what String) String {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet[Int](1, abi, position)
	frameSet[String](2, abi, what)
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.StringName.insert(abi.Get(0), abi.Get(1), abi.Back(), 2)
	var ret = frameGet[uintptr](abi)
	abi.free()
	return mmm.Make[API, String, uintptr](ctx, selfPtr.API, ret)
}

func (self StringName) Erase(ctx Context, position Int, chars Int) String {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet[Int](1, abi, position)
	frameSet[Int](2, abi, chars)
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.StringName.erase(abi.Get(0), abi.Get(1), abi.Back(), 2)
	var ret = frameGet[uintptr](abi)
	abi.free()
	return mmm.Make[API, String, uintptr](ctx, selfPtr.API, ret)
}

func (self StringName) Capitalize(ctx Context) String {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.StringName.capitalize(abi.Get(0), abi.Get(1), abi.Back(), 0)
	var ret = frameGet[uintptr](abi)
	abi.free()
	return mmm.Make[API, String, uintptr](ctx, selfPtr.API, ret)
}

func (self StringName) ToCamelCase(ctx Context) String {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.StringName.to_camel_case(abi.Get(0), abi.Get(1), abi.Back(), 0)
	var ret = frameGet[uintptr](abi)
	abi.free()
	return mmm.Make[API, String, uintptr](ctx, selfPtr.API, ret)
}

func (self StringName) ToPascalCase(ctx Context) String {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.StringName.to_pascal_case(abi.Get(0), abi.Get(1), abi.Back(), 0)
	var ret = frameGet[uintptr](abi)
	abi.free()
	return mmm.Make[API, String, uintptr](ctx, selfPtr.API, ret)
}

func (self StringName) ToSnakeCase(ctx Context) String {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.StringName.to_snake_case(abi.Get(0), abi.Get(1), abi.Back(), 0)
	var ret = frameGet[uintptr](abi)
	abi.free()
	return mmm.Make[API, String, uintptr](ctx, selfPtr.API, ret)
}

func (self StringName) Split(ctx Context, delimiter String, allow_empty bool, maxsplit Int) PackedStringArray {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet[String](1, abi, delimiter)
	frameSet[bool](2, abi, allow_empty)
	frameSet[Int](3, abi, maxsplit)
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.StringName.split(abi.Get(0), abi.Get(1), abi.Back(), 3)
	var ret = frameGet[[2]uintptr](abi)
	abi.free()
	return mmm.Make[API, PackedStringArray, [2]uintptr](ctx, selfPtr.API, ret)
}

func (self StringName) Rsplit(ctx Context, delimiter String, allow_empty bool, maxsplit Int) PackedStringArray {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet[String](1, abi, delimiter)
	frameSet[bool](2, abi, allow_empty)
	frameSet[Int](3, abi, maxsplit)
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.StringName.rsplit(abi.Get(0), abi.Get(1), abi.Back(), 3)
	var ret = frameGet[[2]uintptr](abi)
	abi.free()
	return mmm.Make[API, PackedStringArray, [2]uintptr](ctx, selfPtr.API, ret)
}

func (self StringName) SplitFloats(ctx Context, delimiter String, allow_empty bool) PackedFloat64Array {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet[String](1, abi, delimiter)
	frameSet[bool](2, abi, allow_empty)
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.StringName.split_floats(abi.Get(0), abi.Get(1), abi.Back(), 2)
	var ret = frameGet[[2]uintptr](abi)
	abi.free()
	return mmm.Make[API, PackedFloat64Array, [2]uintptr](ctx, selfPtr.API, ret)
}

func (self StringName) Join(ctx Context, parts PackedStringArray) String {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet[PackedStringArray](1, abi, parts)
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.StringName.join(abi.Get(0), abi.Get(1), abi.Back(), 1)
	var ret = frameGet[uintptr](abi)
	abi.free()
	return mmm.Make[API, String, uintptr](ctx, selfPtr.API, ret)
}

func (self StringName) ToUpper(ctx Context) String {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.StringName.to_upper(abi.Get(0), abi.Get(1), abi.Back(), 0)
	var ret = frameGet[uintptr](abi)
	abi.free()
	return mmm.Make[API, String, uintptr](ctx, selfPtr.API, ret)
}

func (self StringName) ToLower(ctx Context) String {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.StringName.to_lower(abi.Get(0), abi.Get(1), abi.Back(), 0)
	var ret = frameGet[uintptr](abi)
	abi.free()
	return mmm.Make[API, String, uintptr](ctx, selfPtr.API, ret)
}

func (self StringName) Left(ctx Context, length Int) String {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet[Int](1, abi, length)
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.StringName.left(abi.Get(0), abi.Get(1), abi.Back(), 1)
	var ret = frameGet[uintptr](abi)
	abi.free()
	return mmm.Make[API, String, uintptr](ctx, selfPtr.API, ret)
}

func (self StringName) Right(ctx Context, length Int) String {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet[Int](1, abi, length)
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.StringName.right(abi.Get(0), abi.Get(1), abi.Back(), 1)
	var ret = frameGet[uintptr](abi)
	abi.free()
	return mmm.Make[API, String, uintptr](ctx, selfPtr.API, ret)
}

func (self StringName) StripEdges(ctx Context, left bool, right bool) String {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet[bool](1, abi, left)
	frameSet[bool](2, abi, right)
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.StringName.strip_edges(abi.Get(0), abi.Get(1), abi.Back(), 2)
	var ret = frameGet[uintptr](abi)
	abi.free()
	return mmm.Make[API, String, uintptr](ctx, selfPtr.API, ret)
}

func (self StringName) StripEscapes(ctx Context) String {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.StringName.strip_escapes(abi.Get(0), abi.Get(1), abi.Back(), 0)
	var ret = frameGet[uintptr](abi)
	abi.free()
	return mmm.Make[API, String, uintptr](ctx, selfPtr.API, ret)
}

func (self StringName) Lstrip(ctx Context, chars String) String {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet[String](1, abi, chars)
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.StringName.lstrip(abi.Get(0), abi.Get(1), abi.Back(), 1)
	var ret = frameGet[uintptr](abi)
	abi.free()
	return mmm.Make[API, String, uintptr](ctx, selfPtr.API, ret)
}

func (self StringName) Rstrip(ctx Context, chars String) String {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet[String](1, abi, chars)
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.StringName.rstrip(abi.Get(0), abi.Get(1), abi.Back(), 1)
	var ret = frameGet[uintptr](abi)
	abi.free()
	return mmm.Make[API, String, uintptr](ctx, selfPtr.API, ret)
}

func (self StringName) GetExtension(ctx Context) String {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.StringName.get_extension(abi.Get(0), abi.Get(1), abi.Back(), 0)
	var ret = frameGet[uintptr](abi)
	abi.free()
	return mmm.Make[API, String, uintptr](ctx, selfPtr.API, ret)
}

func (self StringName) GetBasename(ctx Context) String {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.StringName.get_basename(abi.Get(0), abi.Get(1), abi.Back(), 0)
	var ret = frameGet[uintptr](abi)
	abi.free()
	return mmm.Make[API, String, uintptr](ctx, selfPtr.API, ret)
}

func (self StringName) PathJoin(ctx Context, file String) String {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet[String](1, abi, file)
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.StringName.path_join(abi.Get(0), abi.Get(1), abi.Back(), 1)
	var ret = frameGet[uintptr](abi)
	abi.free()
	return mmm.Make[API, String, uintptr](ctx, selfPtr.API, ret)
}

func (self StringName) UnicodeAt(at Int) Int {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet[Int](1, abi, at)
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.StringName.unicode_at(abi.Get(0), abi.Get(1), abi.Back(), 1)
	var ret = frameGet[Int](abi)
	abi.free()
	return ret
}

func (self StringName) Indent(ctx Context, prefix String) String {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet[String](1, abi, prefix)
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.StringName.indent(abi.Get(0), abi.Get(1), abi.Back(), 1)
	var ret = frameGet[uintptr](abi)
	abi.free()
	return mmm.Make[API, String, uintptr](ctx, selfPtr.API, ret)
}

func (self StringName) Dedent(ctx Context) String {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.StringName.dedent(abi.Get(0), abi.Get(1), abi.Back(), 0)
	var ret = frameGet[uintptr](abi)
	abi.free()
	return mmm.Make[API, String, uintptr](ctx, selfPtr.API, ret)
}

func (self StringName) Md5Text(ctx Context) String {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.StringName.md5_text(abi.Get(0), abi.Get(1), abi.Back(), 0)
	var ret = frameGet[uintptr](abi)
	abi.free()
	return mmm.Make[API, String, uintptr](ctx, selfPtr.API, ret)
}

func (self StringName) Sha1Text(ctx Context) String {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.StringName.sha1_text(abi.Get(0), abi.Get(1), abi.Back(), 0)
	var ret = frameGet[uintptr](abi)
	abi.free()
	return mmm.Make[API, String, uintptr](ctx, selfPtr.API, ret)
}

func (self StringName) Sha256Text(ctx Context) String {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.StringName.sha256_text(abi.Get(0), abi.Get(1), abi.Back(), 0)
	var ret = frameGet[uintptr](abi)
	abi.free()
	return mmm.Make[API, String, uintptr](ctx, selfPtr.API, ret)
}

func (self StringName) Md5Buffer(ctx Context) PackedByteArray {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.StringName.md5_buffer(abi.Get(0), abi.Get(1), abi.Back(), 0)
	var ret = frameGet[[2]uintptr](abi)
	abi.free()
	return mmm.Make[API, PackedByteArray, [2]uintptr](ctx, selfPtr.API, ret)
}

func (self StringName) Sha1Buffer(ctx Context) PackedByteArray {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.StringName.sha1_buffer(abi.Get(0), abi.Get(1), abi.Back(), 0)
	var ret = frameGet[[2]uintptr](abi)
	abi.free()
	return mmm.Make[API, PackedByteArray, [2]uintptr](ctx, selfPtr.API, ret)
}

func (self StringName) Sha256Buffer(ctx Context) PackedByteArray {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.StringName.sha256_buffer(abi.Get(0), abi.Get(1), abi.Back(), 0)
	var ret = frameGet[[2]uintptr](abi)
	abi.free()
	return mmm.Make[API, PackedByteArray, [2]uintptr](ctx, selfPtr.API, ret)
}

func (self StringName) IsEmpty() bool {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.StringName.is_empty(abi.Get(0), abi.Get(1), abi.Back(), 0)
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self StringName) Contains(what String) bool {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet[String](1, abi, what)
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.StringName.contains(abi.Get(0), abi.Get(1), abi.Back(), 1)
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self StringName) IsAbsolutePath() bool {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.StringName.is_absolute_path(abi.Get(0), abi.Get(1), abi.Back(), 0)
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self StringName) IsRelativePath() bool {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.StringName.is_relative_path(abi.Get(0), abi.Get(1), abi.Back(), 0)
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self StringName) SimplifyPath(ctx Context) String {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.StringName.simplify_path(abi.Get(0), abi.Get(1), abi.Back(), 0)
	var ret = frameGet[uintptr](abi)
	abi.free()
	return mmm.Make[API, String, uintptr](ctx, selfPtr.API, ret)
}

func (self StringName) GetBaseDir(ctx Context) String {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.StringName.get_base_dir(abi.Get(0), abi.Get(1), abi.Back(), 0)
	var ret = frameGet[uintptr](abi)
	abi.free()
	return mmm.Make[API, String, uintptr](ctx, selfPtr.API, ret)
}

func (self StringName) GetFile(ctx Context) String {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.StringName.get_file(abi.Get(0), abi.Get(1), abi.Back(), 0)
	var ret = frameGet[uintptr](abi)
	abi.free()
	return mmm.Make[API, String, uintptr](ctx, selfPtr.API, ret)
}

func (self StringName) XmlEscape(ctx Context, escape_quotes bool) String {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet[bool](1, abi, escape_quotes)
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.StringName.xml_escape(abi.Get(0), abi.Get(1), abi.Back(), 1)
	var ret = frameGet[uintptr](abi)
	abi.free()
	return mmm.Make[API, String, uintptr](ctx, selfPtr.API, ret)
}

func (self StringName) XmlUnescape(ctx Context) String {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.StringName.xml_unescape(abi.Get(0), abi.Get(1), abi.Back(), 0)
	var ret = frameGet[uintptr](abi)
	abi.free()
	return mmm.Make[API, String, uintptr](ctx, selfPtr.API, ret)
}

func (self StringName) UriEncode(ctx Context) String {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.StringName.uri_encode(abi.Get(0), abi.Get(1), abi.Back(), 0)
	var ret = frameGet[uintptr](abi)
	abi.free()
	return mmm.Make[API, String, uintptr](ctx, selfPtr.API, ret)
}

func (self StringName) UriDecode(ctx Context) String {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.StringName.uri_decode(abi.Get(0), abi.Get(1), abi.Back(), 0)
	var ret = frameGet[uintptr](abi)
	abi.free()
	return mmm.Make[API, String, uintptr](ctx, selfPtr.API, ret)
}

func (self StringName) CEscape(ctx Context) String {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.StringName.c_escape(abi.Get(0), abi.Get(1), abi.Back(), 0)
	var ret = frameGet[uintptr](abi)
	abi.free()
	return mmm.Make[API, String, uintptr](ctx, selfPtr.API, ret)
}

func (self StringName) CUnescape(ctx Context) String {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.StringName.c_unescape(abi.Get(0), abi.Get(1), abi.Back(), 0)
	var ret = frameGet[uintptr](abi)
	abi.free()
	return mmm.Make[API, String, uintptr](ctx, selfPtr.API, ret)
}

func (self StringName) JsonEscape(ctx Context) String {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.StringName.json_escape(abi.Get(0), abi.Get(1), abi.Back(), 0)
	var ret = frameGet[uintptr](abi)
	abi.free()
	return mmm.Make[API, String, uintptr](ctx, selfPtr.API, ret)
}

func (self StringName) ValidateNodeName(ctx Context) String {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.StringName.validate_node_name(abi.Get(0), abi.Get(1), abi.Back(), 0)
	var ret = frameGet[uintptr](abi)
	abi.free()
	return mmm.Make[API, String, uintptr](ctx, selfPtr.API, ret)
}

func (self StringName) ValidateFilename(ctx Context) String {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.StringName.validate_filename(abi.Get(0), abi.Get(1), abi.Back(), 0)
	var ret = frameGet[uintptr](abi)
	abi.free()
	return mmm.Make[API, String, uintptr](ctx, selfPtr.API, ret)
}

func (self StringName) IsValidIdentifier() bool {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.StringName.is_valid_identifier(abi.Get(0), abi.Get(1), abi.Back(), 0)
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self StringName) IsValidInt() bool {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.StringName.is_valid_int(abi.Get(0), abi.Get(1), abi.Back(), 0)
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self StringName) IsValidFloat() bool {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.StringName.is_valid_float(abi.Get(0), abi.Get(1), abi.Back(), 0)
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self StringName) IsValidHexNumber(with_prefix bool) bool {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet[bool](1, abi, with_prefix)
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.StringName.is_valid_hex_number(abi.Get(0), abi.Get(1), abi.Back(), 1)
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self StringName) IsValidHtmlColor() bool {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.StringName.is_valid_html_color(abi.Get(0), abi.Get(1), abi.Back(), 0)
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self StringName) IsValidIpAddress() bool {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.StringName.is_valid_ip_address(abi.Get(0), abi.Get(1), abi.Back(), 0)
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self StringName) IsValidFilename() bool {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.StringName.is_valid_filename(abi.Get(0), abi.Get(1), abi.Back(), 0)
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self StringName) ToInt() Int {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.StringName.to_int(abi.Get(0), abi.Get(1), abi.Back(), 0)
	var ret = frameGet[Int](abi)
	abi.free()
	return ret
}

func (self StringName) ToFloat() Float {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.StringName.to_float(abi.Get(0), abi.Get(1), abi.Back(), 0)
	var ret = frameGet[Float](abi)
	abi.free()
	return ret
}

func (self StringName) HexToInt() Int {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.StringName.hex_to_int(abi.Get(0), abi.Get(1), abi.Back(), 0)
	var ret = frameGet[Int](abi)
	abi.free()
	return ret
}

func (self StringName) BinToInt() Int {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.StringName.bin_to_int(abi.Get(0), abi.Get(1), abi.Back(), 0)
	var ret = frameGet[Int](abi)
	abi.free()
	return ret
}

func (self StringName) Lpad(ctx Context, min_length Int, character String) String {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet[Int](1, abi, min_length)
	frameSet[String](2, abi, character)
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.StringName.lpad(abi.Get(0), abi.Get(1), abi.Back(), 2)
	var ret = frameGet[uintptr](abi)
	abi.free()
	return mmm.Make[API, String, uintptr](ctx, selfPtr.API, ret)
}

func (self StringName) Rpad(ctx Context, min_length Int, character String) String {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet[Int](1, abi, min_length)
	frameSet[String](2, abi, character)
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.StringName.rpad(abi.Get(0), abi.Get(1), abi.Back(), 2)
	var ret = frameGet[uintptr](abi)
	abi.free()
	return mmm.Make[API, String, uintptr](ctx, selfPtr.API, ret)
}

func (self StringName) PadDecimals(ctx Context, digits Int) String {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet[Int](1, abi, digits)
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.StringName.pad_decimals(abi.Get(0), abi.Get(1), abi.Back(), 1)
	var ret = frameGet[uintptr](abi)
	abi.free()
	return mmm.Make[API, String, uintptr](ctx, selfPtr.API, ret)
}

func (self StringName) PadZeros(ctx Context, digits Int) String {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet[Int](1, abi, digits)
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.StringName.pad_zeros(abi.Get(0), abi.Get(1), abi.Back(), 1)
	var ret = frameGet[uintptr](abi)
	abi.free()
	return mmm.Make[API, String, uintptr](ctx, selfPtr.API, ret)
}

func (self StringName) TrimPrefix(ctx Context, prefix String) String {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet[String](1, abi, prefix)
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.StringName.trim_prefix(abi.Get(0), abi.Get(1), abi.Back(), 1)
	var ret = frameGet[uintptr](abi)
	abi.free()
	return mmm.Make[API, String, uintptr](ctx, selfPtr.API, ret)
}

func (self StringName) TrimSuffix(ctx Context, suffix String) String {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet[String](1, abi, suffix)
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.StringName.trim_suffix(abi.Get(0), abi.Get(1), abi.Back(), 1)
	var ret = frameGet[uintptr](abi)
	abi.free()
	return mmm.Make[API, String, uintptr](ctx, selfPtr.API, ret)
}

func (self StringName) ToAsciiBuffer(ctx Context) PackedByteArray {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.StringName.to_ascii_buffer(abi.Get(0), abi.Get(1), abi.Back(), 0)
	var ret = frameGet[[2]uintptr](abi)
	abi.free()
	return mmm.Make[API, PackedByteArray, [2]uintptr](ctx, selfPtr.API, ret)
}

func (self StringName) ToUtf8Buffer(ctx Context) PackedByteArray {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.StringName.to_utf8_buffer(abi.Get(0), abi.Get(1), abi.Back(), 0)
	var ret = frameGet[[2]uintptr](abi)
	abi.free()
	return mmm.Make[API, PackedByteArray, [2]uintptr](ctx, selfPtr.API, ret)
}

func (self StringName) ToUtf16Buffer(ctx Context) PackedByteArray {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.StringName.to_utf16_buffer(abi.Get(0), abi.Get(1), abi.Back(), 0)
	var ret = frameGet[[2]uintptr](abi)
	abi.free()
	return mmm.Make[API, PackedByteArray, [2]uintptr](ctx, selfPtr.API, ret)
}

func (self StringName) ToUtf32Buffer(ctx Context) PackedByteArray {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.StringName.to_utf32_buffer(abi.Get(0), abi.Get(1), abi.Back(), 0)
	var ret = frameGet[[2]uintptr](abi)
	abi.free()
	return mmm.Make[API, PackedByteArray, [2]uintptr](ctx, selfPtr.API, ret)
}

func (self StringName) HexDecode(ctx Context) PackedByteArray {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.StringName.hex_decode(abi.Get(0), abi.Get(1), abi.Back(), 0)
	var ret = frameGet[[2]uintptr](abi)
	abi.free()
	return mmm.Make[API, PackedByteArray, [2]uintptr](ctx, selfPtr.API, ret)
}

func (self StringName) ToWcharBuffer(ctx Context) PackedByteArray {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.StringName.to_wchar_buffer(abi.Get(0), abi.Get(1), abi.Back(), 0)
	var ret = frameGet[[2]uintptr](abi)
	abi.free()
	return mmm.Make[API, PackedByteArray, [2]uintptr](ctx, selfPtr.API, ret)
}

func (self StringName) Hash() Int {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.StringName.hash(abi.Get(0), abi.Get(1), abi.Back(), 0)
	var ret = frameGet[Int](abi)
	abi.free()
	return ret
}

func (self NodePath) IsAbsolute() bool {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.NodePath.is_absolute(abi.Get(0), abi.Get(1), abi.Back(), 0)
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self NodePath) GetNameCount() Int {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.NodePath.get_name_count(abi.Get(0), abi.Get(1), abi.Back(), 0)
	var ret = frameGet[Int](abi)
	abi.free()
	return ret
}

func (self NodePath) GetName(ctx Context, idx Int) StringName {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet[Int](1, abi, idx)
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.NodePath.get_name(abi.Get(0), abi.Get(1), abi.Back(), 1)
	var ret = frameGet[uintptr](abi)
	abi.free()
	return mmm.Make[API, StringName, uintptr](ctx, selfPtr.API, ret)
}

func (self NodePath) GetSubnameCount() Int {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.NodePath.get_subname_count(abi.Get(0), abi.Get(1), abi.Back(), 0)
	var ret = frameGet[Int](abi)
	abi.free()
	return ret
}

func (self NodePath) Hash() Int {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.NodePath.hash(abi.Get(0), abi.Get(1), abi.Back(), 0)
	var ret = frameGet[Int](abi)
	abi.free()
	return ret
}

func (self NodePath) GetSubname(ctx Context, idx Int) StringName {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet[Int](1, abi, idx)
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.NodePath.get_subname(abi.Get(0), abi.Get(1), abi.Back(), 1)
	var ret = frameGet[uintptr](abi)
	abi.free()
	return mmm.Make[API, StringName, uintptr](ctx, selfPtr.API, ret)
}

func (self NodePath) GetConcatenatedNames(ctx Context) StringName {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.NodePath.get_concatenated_names(abi.Get(0), abi.Get(1), abi.Back(), 0)
	var ret = frameGet[uintptr](abi)
	abi.free()
	return mmm.Make[API, StringName, uintptr](ctx, selfPtr.API, ret)
}

func (self NodePath) GetConcatenatedSubnames(ctx Context) StringName {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.NodePath.get_concatenated_subnames(abi.Get(0), abi.Get(1), abi.Back(), 0)
	var ret = frameGet[uintptr](abi)
	abi.free()
	return mmm.Make[API, StringName, uintptr](ctx, selfPtr.API, ret)
}

func (self NodePath) GetAsPropertyPath(ctx Context) NodePath {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.NodePath.get_as_property_path(abi.Get(0), abi.Get(1), abi.Back(), 0)
	var ret = frameGet[uintptr](abi)
	abi.free()
	return mmm.Make[API, NodePath, uintptr](ctx, selfPtr.API, ret)
}

func (self NodePath) IsEmpty() bool {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.NodePath.is_empty(abi.Get(0), abi.Get(1), abi.Back(), 0)
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self Callable) Callv(ctx Context, arguments Array) Variant {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet[Array](1, abi, arguments)
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.Callable.callv(abi.Get(0), abi.Get(1), abi.Back(), 1)
	var ret = frameGet[[3]uintptr](abi)
	abi.free()
	return mmm.Make[API, Variant, [3]uintptr](ctx, selfPtr.API, ret)
}

func (self Callable) IsNull() bool {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.Callable.is_null(abi.Get(0), abi.Get(1), abi.Back(), 0)
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self Callable) IsCustom() bool {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.Callable.is_custom(abi.Get(0), abi.Get(1), abi.Back(), 0)
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self Callable) IsStandard() bool {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.Callable.is_standard(abi.Get(0), abi.Get(1), abi.Back(), 0)
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self Callable) IsValid() bool {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.Callable.is_valid(abi.Get(0), abi.Get(1), abi.Back(), 0)
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self Callable) GetObject() Object {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.Callable.get_object(abi.Get(0), abi.Get(1), abi.Back(), 0)
	var ret = frameGet[Object](abi)
	abi.free()
	return ret
}

func (self Callable) GetObjectId() Int {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.Callable.get_object_id(abi.Get(0), abi.Get(1), abi.Back(), 0)
	var ret = frameGet[Int](abi)
	abi.free()
	return ret
}

func (self Callable) GetMethod(ctx Context) StringName {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.Callable.get_method(abi.Get(0), abi.Get(1), abi.Back(), 0)
	var ret = frameGet[uintptr](abi)
	abi.free()
	return mmm.Make[API, StringName, uintptr](ctx, selfPtr.API, ret)
}

func (self Callable) GetBoundArgumentsCount() Int {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.Callable.get_bound_arguments_count(abi.Get(0), abi.Get(1), abi.Back(), 0)
	var ret = frameGet[Int](abi)
	abi.free()
	return ret
}

func (self Callable) GetBoundArguments(ctx Context) Array {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.Callable.get_bound_arguments(abi.Get(0), abi.Get(1), abi.Back(), 0)
	var ret = frameGet[uintptr](abi)
	abi.free()
	return mmm.Make[API, Array, uintptr](ctx, selfPtr.API, ret)
}

func (self Callable) Hash() Int {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.Callable.hash(abi.Get(0), abi.Get(1), abi.Back(), 0)
	var ret = frameGet[Int](abi)
	abi.free()
	return ret
}

func (self Callable) Bindv(ctx Context, arguments Array) Callable {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet[Array](1, abi, arguments)
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.Callable.bindv(abi.Get(0), abi.Get(1), abi.Back(), 1)
	var ret = frameGet[[2]uintptr](abi)
	abi.free()
	return mmm.Make[API, Callable, [2]uintptr](ctx, selfPtr.API, ret)
}

func (self Callable) Unbind(ctx Context, argcount Int) Callable {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet[Int](1, abi, argcount)
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.Callable.unbind(abi.Get(0), abi.Get(1), abi.Back(), 1)
	var ret = frameGet[[2]uintptr](abi)
	abi.free()
	return mmm.Make[API, Callable, [2]uintptr](ctx, selfPtr.API, ret)
}

func (self Callable) Call(ctx Context) Variant {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.Callable.call(abi.Get(0), abi.Get(1), abi.Back(), 0)
	var ret = frameGet[[3]uintptr](abi)
	abi.free()
	return mmm.Make[API, Variant, [3]uintptr](ctx, selfPtr.API, ret)
}

func (self Callable) CallDeferred() {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.Callable.call_deferred(abi.Get(0), abi.Get(1), abi.Back(), 0)
	abi.free()
}

func (self Callable) Rpc() {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.Callable.rpc(abi.Get(0), abi.Get(1), abi.Back(), 0)
	abi.free()
}

func (self Callable) RpcId(peer_id Int) {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet[Int](1, abi, peer_id)
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.Callable.rpc_id(abi.Get(0), abi.Get(1), abi.Back(), 1)
	abi.free()
}

func (self Callable) Bind(ctx Context) Callable {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.Callable.bind(abi.Get(0), abi.Get(1), abi.Back(), 0)
	var ret = frameGet[[2]uintptr](abi)
	abi.free()
	return mmm.Make[API, Callable, [2]uintptr](ctx, selfPtr.API, ret)
}

func (self Signal) IsNull() bool {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.Signal.is_null(abi.Get(0), abi.Get(1), abi.Back(), 0)
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self Signal) GetObject() Object {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.Signal.get_object(abi.Get(0), abi.Get(1), abi.Back(), 0)
	var ret = frameGet[Object](abi)
	abi.free()
	return ret
}

func (self Signal) GetObjectId() Int {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.Signal.get_object_id(abi.Get(0), abi.Get(1), abi.Back(), 0)
	var ret = frameGet[Int](abi)
	abi.free()
	return ret
}

func (self Signal) GetName(ctx Context) StringName {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.Signal.get_name(abi.Get(0), abi.Get(1), abi.Back(), 0)
	var ret = frameGet[uintptr](abi)
	abi.free()
	return mmm.Make[API, StringName, uintptr](ctx, selfPtr.API, ret)
}

func (self Signal) Connect(callable Callable, flags Int) Int {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet[Callable](1, abi, callable)
	frameSet[Int](2, abi, flags)
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.Signal.connect(abi.Get(0), abi.Get(1), abi.Back(), 2)
	var ret = frameGet[Int](abi)
	abi.free()
	return ret
}

func (self Signal) Disconnect(callable Callable) {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet[Callable](1, abi, callable)
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.Signal.disconnect(abi.Get(0), abi.Get(1), abi.Back(), 1)
	abi.free()
}

func (self Signal) IsConnected(callable Callable) bool {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet[Callable](1, abi, callable)
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.Signal.is_connected(abi.Get(0), abi.Get(1), abi.Back(), 1)
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self Signal) GetConnections(ctx Context) Array {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.Signal.get_connections(abi.Get(0), abi.Get(1), abi.Back(), 0)
	var ret = frameGet[uintptr](abi)
	abi.free()
	return mmm.Make[API, Array, uintptr](ctx, selfPtr.API, ret)
}

func (self Signal) Emit() {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.Signal.emit(abi.Get(0), abi.Get(1), abi.Back(), 0)
	abi.free()
}

func (self Dictionary) Size() Int {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.Dictionary.size(abi.Get(0), abi.Get(1), abi.Back(), 0)
	var ret = frameGet[Int](abi)
	abi.free()
	return ret
}

func (self Dictionary) IsEmpty() bool {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.Dictionary.is_empty(abi.Get(0), abi.Get(1), abi.Back(), 0)
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self Dictionary) Clear() {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.Dictionary.clear(abi.Get(0), abi.Get(1), abi.Back(), 0)
	abi.free()
}

func (self Dictionary) Merge(dictionary Dictionary, overwrite bool) {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet[Dictionary](1, abi, dictionary)
	frameSet[bool](2, abi, overwrite)
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.Dictionary.merge(abi.Get(0), abi.Get(1), abi.Back(), 2)
	abi.free()
}

func (self Dictionary) Has(key Variant) bool {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet[Variant](1, abi, key)
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.Dictionary.has(abi.Get(0), abi.Get(1), abi.Back(), 1)
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self Dictionary) HasAll(keys Array) bool {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet[Array](1, abi, keys)
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.Dictionary.has_all(abi.Get(0), abi.Get(1), abi.Back(), 1)
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self Dictionary) FindKey(ctx Context, value Variant) Variant {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet[Variant](1, abi, value)
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.Dictionary.find_key(abi.Get(0), abi.Get(1), abi.Back(), 1)
	var ret = frameGet[[3]uintptr](abi)
	abi.free()
	return mmm.Make[API, Variant, [3]uintptr](ctx, selfPtr.API, ret)
}

func (self Dictionary) Erase(key Variant) bool {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet[Variant](1, abi, key)
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.Dictionary.erase(abi.Get(0), abi.Get(1), abi.Back(), 1)
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self Dictionary) Hash() Int {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.Dictionary.hash(abi.Get(0), abi.Get(1), abi.Back(), 0)
	var ret = frameGet[Int](abi)
	abi.free()
	return ret
}

func (self Dictionary) Keys(ctx Context) Array {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.Dictionary.keys(abi.Get(0), abi.Get(1), abi.Back(), 0)
	var ret = frameGet[uintptr](abi)
	abi.free()
	return mmm.Make[API, Array, uintptr](ctx, selfPtr.API, ret)
}

func (self Dictionary) Values(ctx Context) Array {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.Dictionary.values(abi.Get(0), abi.Get(1), abi.Back(), 0)
	var ret = frameGet[uintptr](abi)
	abi.free()
	return mmm.Make[API, Array, uintptr](ctx, selfPtr.API, ret)
}

func (self Dictionary) Duplicate(ctx Context, deep bool) Dictionary {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet[bool](1, abi, deep)
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.Dictionary.duplicate(abi.Get(0), abi.Get(1), abi.Back(), 1)
	var ret = frameGet[uintptr](abi)
	abi.free()
	return mmm.Make[API, Dictionary, uintptr](ctx, selfPtr.API, ret)
}

func (self Dictionary) Get(ctx Context, key Variant, def Variant) Variant {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet[Variant](1, abi, key)
	frameSet[Variant](2, abi, def)
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.Dictionary.get(abi.Get(0), abi.Get(1), abi.Back(), 2)
	var ret = frameGet[[3]uintptr](abi)
	abi.free()
	return mmm.Make[API, Variant, [3]uintptr](ctx, selfPtr.API, ret)
}

func (self Dictionary) GetOrAdd(ctx Context, key Variant, def Variant) Variant {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet[Variant](1, abi, key)
	frameSet[Variant](2, abi, def)
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.Dictionary.get_or_add(abi.Get(0), abi.Get(1), abi.Back(), 2)
	var ret = frameGet[[3]uintptr](abi)
	abi.free()
	return mmm.Make[API, Variant, [3]uintptr](ctx, selfPtr.API, ret)
}

func (self Dictionary) MakeReadOnly() {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.Dictionary.make_read_only(abi.Get(0), abi.Get(1), abi.Back(), 0)
	abi.free()
}

func (self Dictionary) IsReadOnly() bool {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.Dictionary.is_read_only(abi.Get(0), abi.Get(1), abi.Back(), 0)
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self Array) Size() Int {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.Array.size(abi.Get(0), abi.Get(1), abi.Back(), 0)
	var ret = frameGet[Int](abi)
	abi.free()
	return ret
}

func (self Array) IsEmpty() bool {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.Array.is_empty(abi.Get(0), abi.Get(1), abi.Back(), 0)
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self Array) Clear() {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.Array.clear(abi.Get(0), abi.Get(1), abi.Back(), 0)
	abi.free()
}

func (self Array) Hash() Int {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.Array.hash(abi.Get(0), abi.Get(1), abi.Back(), 0)
	var ret = frameGet[Int](abi)
	abi.free()
	return ret
}

func (self Array) Assign(array Array) {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet[Array](1, abi, array)
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.Array.assign(abi.Get(0), abi.Get(1), abi.Back(), 1)
	abi.free()
}

func (self Array) PushBack(value Variant) {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet[Variant](1, abi, value)
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.Array.push_back(abi.Get(0), abi.Get(1), abi.Back(), 1)
	abi.free()
}

func (self Array) PushFront(value Variant) {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet[Variant](1, abi, value)
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.Array.push_front(abi.Get(0), abi.Get(1), abi.Back(), 1)
	abi.free()
}

func (self Array) Append(value Variant) {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet[Variant](1, abi, value)
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.Array.append(abi.Get(0), abi.Get(1), abi.Back(), 1)
	abi.free()
}

func (self Array) AppendArray(array Array) {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet[Array](1, abi, array)
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.Array.append_array(abi.Get(0), abi.Get(1), abi.Back(), 1)
	abi.free()
}

func (self Array) Resize(size Int) Int {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet[Int](1, abi, size)
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.Array.resize(abi.Get(0), abi.Get(1), abi.Back(), 1)
	var ret = frameGet[Int](abi)
	abi.free()
	return ret
}

func (self Array) Insert(position Int, value Variant) Int {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet[Int](1, abi, position)
	frameSet[Variant](2, abi, value)
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.Array.insert(abi.Get(0), abi.Get(1), abi.Back(), 2)
	var ret = frameGet[Int](abi)
	abi.free()
	return ret
}

func (self Array) RemoveAt(position Int) {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet[Int](1, abi, position)
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.Array.remove_at(abi.Get(0), abi.Get(1), abi.Back(), 1)
	abi.free()
}

func (self Array) Fill(value Variant) {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet[Variant](1, abi, value)
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.Array.fill(abi.Get(0), abi.Get(1), abi.Back(), 1)
	abi.free()
}

func (self Array) Erase(value Variant) {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet[Variant](1, abi, value)
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.Array.erase(abi.Get(0), abi.Get(1), abi.Back(), 1)
	abi.free()
}

func (self Array) Front(ctx Context) Variant {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.Array.front(abi.Get(0), abi.Get(1), abi.Back(), 0)
	var ret = frameGet[[3]uintptr](abi)
	abi.free()
	return mmm.Make[API, Variant, [3]uintptr](ctx, selfPtr.API, ret)
}

func (self Array) Back(ctx Context) Variant {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.Array.back(abi.Get(0), abi.Get(1), abi.Back(), 0)
	var ret = frameGet[[3]uintptr](abi)
	abi.free()
	return mmm.Make[API, Variant, [3]uintptr](ctx, selfPtr.API, ret)
}

func (self Array) PickRandom(ctx Context) Variant {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.Array.pick_random(abi.Get(0), abi.Get(1), abi.Back(), 0)
	var ret = frameGet[[3]uintptr](abi)
	abi.free()
	return mmm.Make[API, Variant, [3]uintptr](ctx, selfPtr.API, ret)
}

func (self Array) Find(what Variant, from Int) Int {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet[Variant](1, abi, what)
	frameSet[Int](2, abi, from)
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.Array.find(abi.Get(0), abi.Get(1), abi.Back(), 2)
	var ret = frameGet[Int](abi)
	abi.free()
	return ret
}

func (self Array) Rfind(what Variant, from Int) Int {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet[Variant](1, abi, what)
	frameSet[Int](2, abi, from)
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.Array.rfind(abi.Get(0), abi.Get(1), abi.Back(), 2)
	var ret = frameGet[Int](abi)
	abi.free()
	return ret
}

func (self Array) Count(value Variant) Int {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet[Variant](1, abi, value)
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.Array.count(abi.Get(0), abi.Get(1), abi.Back(), 1)
	var ret = frameGet[Int](abi)
	abi.free()
	return ret
}

func (self Array) Has(value Variant) bool {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet[Variant](1, abi, value)
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.Array.has(abi.Get(0), abi.Get(1), abi.Back(), 1)
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self Array) PopBack(ctx Context) Variant {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.Array.pop_back(abi.Get(0), abi.Get(1), abi.Back(), 0)
	var ret = frameGet[[3]uintptr](abi)
	abi.free()
	return mmm.Make[API, Variant, [3]uintptr](ctx, selfPtr.API, ret)
}

func (self Array) PopFront(ctx Context) Variant {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.Array.pop_front(abi.Get(0), abi.Get(1), abi.Back(), 0)
	var ret = frameGet[[3]uintptr](abi)
	abi.free()
	return mmm.Make[API, Variant, [3]uintptr](ctx, selfPtr.API, ret)
}

func (self Array) PopAt(ctx Context, position Int) Variant {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet[Int](1, abi, position)
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.Array.pop_at(abi.Get(0), abi.Get(1), abi.Back(), 1)
	var ret = frameGet[[3]uintptr](abi)
	abi.free()
	return mmm.Make[API, Variant, [3]uintptr](ctx, selfPtr.API, ret)
}

func (self Array) Sort() {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.Array.sort(abi.Get(0), abi.Get(1), abi.Back(), 0)
	abi.free()
}

func (self Array) SortCustom(fn Callable) {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet[Callable](1, abi, fn)
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.Array.sort_custom(abi.Get(0), abi.Get(1), abi.Back(), 1)
	abi.free()
}

func (self Array) Shuffle() {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.Array.shuffle(abi.Get(0), abi.Get(1), abi.Back(), 0)
	abi.free()
}

func (self Array) Bsearch(value Variant, before bool) Int {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet[Variant](1, abi, value)
	frameSet[bool](2, abi, before)
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.Array.bsearch(abi.Get(0), abi.Get(1), abi.Back(), 2)
	var ret = frameGet[Int](abi)
	abi.free()
	return ret
}

func (self Array) BsearchCustom(value Variant, fn Callable, before bool) Int {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet[Variant](1, abi, value)
	frameSet[Callable](2, abi, fn)
	frameSet[bool](3, abi, before)
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.Array.bsearch_custom(abi.Get(0), abi.Get(1), abi.Back(), 3)
	var ret = frameGet[Int](abi)
	abi.free()
	return ret
}

func (self Array) Reverse() {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.Array.reverse(abi.Get(0), abi.Get(1), abi.Back(), 0)
	abi.free()
}

func (self Array) Duplicate(ctx Context, deep bool) Array {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet[bool](1, abi, deep)
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.Array.duplicate(abi.Get(0), abi.Get(1), abi.Back(), 1)
	var ret = frameGet[uintptr](abi)
	abi.free()
	return mmm.Make[API, Array, uintptr](ctx, selfPtr.API, ret)
}

func (self Array) Slice(ctx Context, begin Int, end Int, step Int, deep bool) Array {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet[Int](1, abi, begin)
	frameSet[Int](2, abi, end)
	frameSet[Int](3, abi, step)
	frameSet[bool](4, abi, deep)
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.Array.slice(abi.Get(0), abi.Get(1), abi.Back(), 4)
	var ret = frameGet[uintptr](abi)
	abi.free()
	return mmm.Make[API, Array, uintptr](ctx, selfPtr.API, ret)
}

func (self Array) Filter(ctx Context, method Callable) Array {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet[Callable](1, abi, method)
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.Array.filter(abi.Get(0), abi.Get(1), abi.Back(), 1)
	var ret = frameGet[uintptr](abi)
	abi.free()
	return mmm.Make[API, Array, uintptr](ctx, selfPtr.API, ret)
}

func (self Array) Map(ctx Context, method Callable) Array {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet[Callable](1, abi, method)
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.Array.map_(abi.Get(0), abi.Get(1), abi.Back(), 1)
	var ret = frameGet[uintptr](abi)
	abi.free()
	return mmm.Make[API, Array, uintptr](ctx, selfPtr.API, ret)
}

func (self Array) Reduce(ctx Context, method Callable, accum Variant) Variant {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet[Callable](1, abi, method)
	frameSet[Variant](2, abi, accum)
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.Array.reduce(abi.Get(0), abi.Get(1), abi.Back(), 2)
	var ret = frameGet[[3]uintptr](abi)
	abi.free()
	return mmm.Make[API, Variant, [3]uintptr](ctx, selfPtr.API, ret)
}

func (self Array) Any(method Callable) bool {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet[Callable](1, abi, method)
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.Array.any(abi.Get(0), abi.Get(1), abi.Back(), 1)
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self Array) All(method Callable) bool {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet[Callable](1, abi, method)
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.Array.all(abi.Get(0), abi.Get(1), abi.Back(), 1)
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self Array) Max(ctx Context) Variant {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.Array.max(abi.Get(0), abi.Get(1), abi.Back(), 0)
	var ret = frameGet[[3]uintptr](abi)
	abi.free()
	return mmm.Make[API, Variant, [3]uintptr](ctx, selfPtr.API, ret)
}

func (self Array) Min(ctx Context) Variant {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.Array.min(abi.Get(0), abi.Get(1), abi.Back(), 0)
	var ret = frameGet[[3]uintptr](abi)
	abi.free()
	return mmm.Make[API, Variant, [3]uintptr](ctx, selfPtr.API, ret)
}

func (self Array) IsTyped() bool {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.Array.is_typed(abi.Get(0), abi.Get(1), abi.Back(), 0)
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self Array) IsSameTyped(array Array) bool {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet[Array](1, abi, array)
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.Array.is_same_typed(abi.Get(0), abi.Get(1), abi.Back(), 1)
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self Array) GetTypedBuiltin() Int {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.Array.get_typed_builtin(abi.Get(0), abi.Get(1), abi.Back(), 0)
	var ret = frameGet[Int](abi)
	abi.free()
	return ret
}

func (self Array) GetTypedClassName(ctx Context) StringName {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.Array.get_typed_class_name(abi.Get(0), abi.Get(1), abi.Back(), 0)
	var ret = frameGet[uintptr](abi)
	abi.free()
	return mmm.Make[API, StringName, uintptr](ctx, selfPtr.API, ret)
}

func (self Array) GetTypedScript(ctx Context) Variant {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.Array.get_typed_script(abi.Get(0), abi.Get(1), abi.Back(), 0)
	var ret = frameGet[[3]uintptr](abi)
	abi.free()
	return mmm.Make[API, Variant, [3]uintptr](ctx, selfPtr.API, ret)
}

func (self Array) MakeReadOnly() {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.Array.make_read_only(abi.Get(0), abi.Get(1), abi.Back(), 0)
	abi.free()
}

func (self Array) IsReadOnly() bool {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.Array.is_read_only(abi.Get(0), abi.Get(1), abi.Back(), 0)
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self PackedByteArray) Size() Int {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.PackedByteArray.size(abi.Get(0), abi.Get(1), abi.Back(), 0)
	var ret = frameGet[Int](abi)
	abi.free()
	return ret
}

func (self PackedByteArray) IsEmpty() bool {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.PackedByteArray.is_empty(abi.Get(0), abi.Get(1), abi.Back(), 0)
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self PackedByteArray) Set(index Int, value Int) {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet[Int](1, abi, index)
	frameSet[Int](2, abi, value)
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.PackedByteArray.set(abi.Get(0), abi.Get(1), abi.Back(), 2)
	abi.free()
}

func (self PackedByteArray) PushBack(value Int) bool {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet[Int](1, abi, value)
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.PackedByteArray.push_back(abi.Get(0), abi.Get(1), abi.Back(), 1)
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self PackedByteArray) Append(value Int) bool {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet[Int](1, abi, value)
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.PackedByteArray.append(abi.Get(0), abi.Get(1), abi.Back(), 1)
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self PackedByteArray) AppendArray(array PackedByteArray) {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet[PackedByteArray](1, abi, array)
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.PackedByteArray.append_array(abi.Get(0), abi.Get(1), abi.Back(), 1)
	abi.free()
}

func (self PackedByteArray) RemoveAt(index Int) {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet[Int](1, abi, index)
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.PackedByteArray.remove_at(abi.Get(0), abi.Get(1), abi.Back(), 1)
	abi.free()
}

func (self PackedByteArray) Insert(at_index Int, value Int) Int {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet[Int](1, abi, at_index)
	frameSet[Int](2, abi, value)
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.PackedByteArray.insert(abi.Get(0), abi.Get(1), abi.Back(), 2)
	var ret = frameGet[Int](abi)
	abi.free()
	return ret
}

func (self PackedByteArray) Fill(value Int) {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet[Int](1, abi, value)
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.PackedByteArray.fill(abi.Get(0), abi.Get(1), abi.Back(), 1)
	abi.free()
}

func (self PackedByteArray) Resize(new_size Int) Int {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet[Int](1, abi, new_size)
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.PackedByteArray.resize(abi.Get(0), abi.Get(1), abi.Back(), 1)
	var ret = frameGet[Int](abi)
	abi.free()
	return ret
}

func (self PackedByteArray) Clear() {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.PackedByteArray.clear(abi.Get(0), abi.Get(1), abi.Back(), 0)
	abi.free()
}

func (self PackedByteArray) Has(value Int) bool {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet[Int](1, abi, value)
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.PackedByteArray.has(abi.Get(0), abi.Get(1), abi.Back(), 1)
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self PackedByteArray) Reverse() {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.PackedByteArray.reverse(abi.Get(0), abi.Get(1), abi.Back(), 0)
	abi.free()
}

func (self PackedByteArray) Slice(ctx Context, begin Int, end Int) PackedByteArray {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet[Int](1, abi, begin)
	frameSet[Int](2, abi, end)
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.PackedByteArray.slice(abi.Get(0), abi.Get(1), abi.Back(), 2)
	var ret = frameGet[[2]uintptr](abi)
	abi.free()
	return mmm.Make[API, PackedByteArray, [2]uintptr](ctx, selfPtr.API, ret)
}

func (self PackedByteArray) Sort() {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.PackedByteArray.sort(abi.Get(0), abi.Get(1), abi.Back(), 0)
	abi.free()
}

func (self PackedByteArray) Bsearch(value Int, before bool) Int {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet[Int](1, abi, value)
	frameSet[bool](2, abi, before)
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.PackedByteArray.bsearch(abi.Get(0), abi.Get(1), abi.Back(), 2)
	var ret = frameGet[Int](abi)
	abi.free()
	return ret
}

func (self PackedByteArray) Duplicate(ctx Context) PackedByteArray {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.PackedByteArray.duplicate(abi.Get(0), abi.Get(1), abi.Back(), 0)
	var ret = frameGet[[2]uintptr](abi)
	abi.free()
	return mmm.Make[API, PackedByteArray, [2]uintptr](ctx, selfPtr.API, ret)
}

func (self PackedByteArray) Find(value Int, from Int) Int {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet[Int](1, abi, value)
	frameSet[Int](2, abi, from)
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.PackedByteArray.find(abi.Get(0), abi.Get(1), abi.Back(), 2)
	var ret = frameGet[Int](abi)
	abi.free()
	return ret
}

func (self PackedByteArray) Rfind(value Int, from Int) Int {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet[Int](1, abi, value)
	frameSet[Int](2, abi, from)
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.PackedByteArray.rfind(abi.Get(0), abi.Get(1), abi.Back(), 2)
	var ret = frameGet[Int](abi)
	abi.free()
	return ret
}

func (self PackedByteArray) Count(value Int) Int {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet[Int](1, abi, value)
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.PackedByteArray.count(abi.Get(0), abi.Get(1), abi.Back(), 1)
	var ret = frameGet[Int](abi)
	abi.free()
	return ret
}

func (self PackedByteArray) GetStringFromAscii(ctx Context) String {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.PackedByteArray.get_string_from_ascii(abi.Get(0), abi.Get(1), abi.Back(), 0)
	var ret = frameGet[uintptr](abi)
	abi.free()
	return mmm.Make[API, String, uintptr](ctx, selfPtr.API, ret)
}

func (self PackedByteArray) GetStringFromUtf8(ctx Context) String {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.PackedByteArray.get_string_from_utf8(abi.Get(0), abi.Get(1), abi.Back(), 0)
	var ret = frameGet[uintptr](abi)
	abi.free()
	return mmm.Make[API, String, uintptr](ctx, selfPtr.API, ret)
}

func (self PackedByteArray) GetStringFromUtf16(ctx Context) String {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.PackedByteArray.get_string_from_utf16(abi.Get(0), abi.Get(1), abi.Back(), 0)
	var ret = frameGet[uintptr](abi)
	abi.free()
	return mmm.Make[API, String, uintptr](ctx, selfPtr.API, ret)
}

func (self PackedByteArray) GetStringFromUtf32(ctx Context) String {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.PackedByteArray.get_string_from_utf32(abi.Get(0), abi.Get(1), abi.Back(), 0)
	var ret = frameGet[uintptr](abi)
	abi.free()
	return mmm.Make[API, String, uintptr](ctx, selfPtr.API, ret)
}

func (self PackedByteArray) GetStringFromWchar(ctx Context) String {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.PackedByteArray.get_string_from_wchar(abi.Get(0), abi.Get(1), abi.Back(), 0)
	var ret = frameGet[uintptr](abi)
	abi.free()
	return mmm.Make[API, String, uintptr](ctx, selfPtr.API, ret)
}

func (self PackedByteArray) HexEncode(ctx Context) String {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.PackedByteArray.hex_encode(abi.Get(0), abi.Get(1), abi.Back(), 0)
	var ret = frameGet[uintptr](abi)
	abi.free()
	return mmm.Make[API, String, uintptr](ctx, selfPtr.API, ret)
}

func (self PackedByteArray) Compress(ctx Context, compression_mode Int) PackedByteArray {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet[Int](1, abi, compression_mode)
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.PackedByteArray.compress(abi.Get(0), abi.Get(1), abi.Back(), 1)
	var ret = frameGet[[2]uintptr](abi)
	abi.free()
	return mmm.Make[API, PackedByteArray, [2]uintptr](ctx, selfPtr.API, ret)
}

func (self PackedByteArray) Decompress(ctx Context, buffer_size Int, compression_mode Int) PackedByteArray {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet[Int](1, abi, buffer_size)
	frameSet[Int](2, abi, compression_mode)
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.PackedByteArray.decompress(abi.Get(0), abi.Get(1), abi.Back(), 2)
	var ret = frameGet[[2]uintptr](abi)
	abi.free()
	return mmm.Make[API, PackedByteArray, [2]uintptr](ctx, selfPtr.API, ret)
}

func (self PackedByteArray) DecompressDynamic(ctx Context, max_output_size Int, compression_mode Int) PackedByteArray {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet[Int](1, abi, max_output_size)
	frameSet[Int](2, abi, compression_mode)
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.PackedByteArray.decompress_dynamic(abi.Get(0), abi.Get(1), abi.Back(), 2)
	var ret = frameGet[[2]uintptr](abi)
	abi.free()
	return mmm.Make[API, PackedByteArray, [2]uintptr](ctx, selfPtr.API, ret)
}

func (self PackedByteArray) DecodeU8(byte_offset Int) Int {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet[Int](1, abi, byte_offset)
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.PackedByteArray.decode_u8(abi.Get(0), abi.Get(1), abi.Back(), 1)
	var ret = frameGet[Int](abi)
	abi.free()
	return ret
}

func (self PackedByteArray) DecodeS8(byte_offset Int) Int {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet[Int](1, abi, byte_offset)
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.PackedByteArray.decode_s8(abi.Get(0), abi.Get(1), abi.Back(), 1)
	var ret = frameGet[Int](abi)
	abi.free()
	return ret
}

func (self PackedByteArray) DecodeU16(byte_offset Int) Int {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet[Int](1, abi, byte_offset)
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.PackedByteArray.decode_u16(abi.Get(0), abi.Get(1), abi.Back(), 1)
	var ret = frameGet[Int](abi)
	abi.free()
	return ret
}

func (self PackedByteArray) DecodeS16(byte_offset Int) Int {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet[Int](1, abi, byte_offset)
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.PackedByteArray.decode_s16(abi.Get(0), abi.Get(1), abi.Back(), 1)
	var ret = frameGet[Int](abi)
	abi.free()
	return ret
}

func (self PackedByteArray) DecodeU32(byte_offset Int) Int {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet[Int](1, abi, byte_offset)
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.PackedByteArray.decode_u32(abi.Get(0), abi.Get(1), abi.Back(), 1)
	var ret = frameGet[Int](abi)
	abi.free()
	return ret
}

func (self PackedByteArray) DecodeS32(byte_offset Int) Int {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet[Int](1, abi, byte_offset)
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.PackedByteArray.decode_s32(abi.Get(0), abi.Get(1), abi.Back(), 1)
	var ret = frameGet[Int](abi)
	abi.free()
	return ret
}

func (self PackedByteArray) DecodeU64(byte_offset Int) Int {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet[Int](1, abi, byte_offset)
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.PackedByteArray.decode_u64(abi.Get(0), abi.Get(1), abi.Back(), 1)
	var ret = frameGet[Int](abi)
	abi.free()
	return ret
}

func (self PackedByteArray) DecodeS64(byte_offset Int) Int {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet[Int](1, abi, byte_offset)
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.PackedByteArray.decode_s64(abi.Get(0), abi.Get(1), abi.Back(), 1)
	var ret = frameGet[Int](abi)
	abi.free()
	return ret
}

func (self PackedByteArray) DecodeHalf(byte_offset Int) Float {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet[Int](1, abi, byte_offset)
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.PackedByteArray.decode_half(abi.Get(0), abi.Get(1), abi.Back(), 1)
	var ret = frameGet[Float](abi)
	abi.free()
	return ret
}

func (self PackedByteArray) DecodeFloat(byte_offset Int) Float {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet[Int](1, abi, byte_offset)
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.PackedByteArray.decode_float(abi.Get(0), abi.Get(1), abi.Back(), 1)
	var ret = frameGet[Float](abi)
	abi.free()
	return ret
}

func (self PackedByteArray) DecodeDouble(byte_offset Int) Float {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet[Int](1, abi, byte_offset)
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.PackedByteArray.decode_double(abi.Get(0), abi.Get(1), abi.Back(), 1)
	var ret = frameGet[Float](abi)
	abi.free()
	return ret
}

func (self PackedByteArray) HasEncodedVar(byte_offset Int, allow_objects bool) bool {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet[Int](1, abi, byte_offset)
	frameSet[bool](2, abi, allow_objects)
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.PackedByteArray.has_encoded_var(abi.Get(0), abi.Get(1), abi.Back(), 2)
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self PackedByteArray) DecodeVar(ctx Context, byte_offset Int, allow_objects bool) Variant {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet[Int](1, abi, byte_offset)
	frameSet[bool](2, abi, allow_objects)
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.PackedByteArray.decode_var(abi.Get(0), abi.Get(1), abi.Back(), 2)
	var ret = frameGet[[3]uintptr](abi)
	abi.free()
	return mmm.Make[API, Variant, [3]uintptr](ctx, selfPtr.API, ret)
}

func (self PackedByteArray) DecodeVarSize(byte_offset Int, allow_objects bool) Int {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet[Int](1, abi, byte_offset)
	frameSet[bool](2, abi, allow_objects)
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.PackedByteArray.decode_var_size(abi.Get(0), abi.Get(1), abi.Back(), 2)
	var ret = frameGet[Int](abi)
	abi.free()
	return ret
}

func (self PackedByteArray) ToInt32Array(ctx Context) PackedInt32Array {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.PackedByteArray.to_int32_array(abi.Get(0), abi.Get(1), abi.Back(), 0)
	var ret = frameGet[[2]uintptr](abi)
	abi.free()
	return mmm.Make[API, PackedInt32Array, [2]uintptr](ctx, selfPtr.API, ret)
}

func (self PackedByteArray) ToInt64Array(ctx Context) PackedInt64Array {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.PackedByteArray.to_int64_array(abi.Get(0), abi.Get(1), abi.Back(), 0)
	var ret = frameGet[[2]uintptr](abi)
	abi.free()
	return mmm.Make[API, PackedInt64Array, [2]uintptr](ctx, selfPtr.API, ret)
}

func (self PackedByteArray) ToFloat32Array(ctx Context) PackedFloat32Array {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.PackedByteArray.to_float32_array(abi.Get(0), abi.Get(1), abi.Back(), 0)
	var ret = frameGet[[2]uintptr](abi)
	abi.free()
	return mmm.Make[API, PackedFloat32Array, [2]uintptr](ctx, selfPtr.API, ret)
}

func (self PackedByteArray) ToFloat64Array(ctx Context) PackedFloat64Array {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.PackedByteArray.to_float64_array(abi.Get(0), abi.Get(1), abi.Back(), 0)
	var ret = frameGet[[2]uintptr](abi)
	abi.free()
	return mmm.Make[API, PackedFloat64Array, [2]uintptr](ctx, selfPtr.API, ret)
}

func (self PackedByteArray) EncodeU8(byte_offset Int, value Int) {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet[Int](1, abi, byte_offset)
	frameSet[Int](2, abi, value)
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.PackedByteArray.encode_u8(abi.Get(0), abi.Get(1), abi.Back(), 2)
	abi.free()
}

func (self PackedByteArray) EncodeS8(byte_offset Int, value Int) {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet[Int](1, abi, byte_offset)
	frameSet[Int](2, abi, value)
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.PackedByteArray.encode_s8(abi.Get(0), abi.Get(1), abi.Back(), 2)
	abi.free()
}

func (self PackedByteArray) EncodeU16(byte_offset Int, value Int) {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet[Int](1, abi, byte_offset)
	frameSet[Int](2, abi, value)
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.PackedByteArray.encode_u16(abi.Get(0), abi.Get(1), abi.Back(), 2)
	abi.free()
}

func (self PackedByteArray) EncodeS16(byte_offset Int, value Int) {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet[Int](1, abi, byte_offset)
	frameSet[Int](2, abi, value)
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.PackedByteArray.encode_s16(abi.Get(0), abi.Get(1), abi.Back(), 2)
	abi.free()
}

func (self PackedByteArray) EncodeU32(byte_offset Int, value Int) {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet[Int](1, abi, byte_offset)
	frameSet[Int](2, abi, value)
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.PackedByteArray.encode_u32(abi.Get(0), abi.Get(1), abi.Back(), 2)
	abi.free()
}

func (self PackedByteArray) EncodeS32(byte_offset Int, value Int) {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet[Int](1, abi, byte_offset)
	frameSet[Int](2, abi, value)
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.PackedByteArray.encode_s32(abi.Get(0), abi.Get(1), abi.Back(), 2)
	abi.free()
}

func (self PackedByteArray) EncodeU64(byte_offset Int, value Int) {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet[Int](1, abi, byte_offset)
	frameSet[Int](2, abi, value)
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.PackedByteArray.encode_u64(abi.Get(0), abi.Get(1), abi.Back(), 2)
	abi.free()
}

func (self PackedByteArray) EncodeS64(byte_offset Int, value Int) {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet[Int](1, abi, byte_offset)
	frameSet[Int](2, abi, value)
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.PackedByteArray.encode_s64(abi.Get(0), abi.Get(1), abi.Back(), 2)
	abi.free()
}

func (self PackedByteArray) EncodeHalf(byte_offset Int, value Float) {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet[Int](1, abi, byte_offset)
	frameSet[Float](2, abi, value)
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.PackedByteArray.encode_half(abi.Get(0), abi.Get(1), abi.Back(), 2)
	abi.free()
}

func (self PackedByteArray) EncodeFloat(byte_offset Int, value Float) {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet[Int](1, abi, byte_offset)
	frameSet[Float](2, abi, value)
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.PackedByteArray.encode_float(abi.Get(0), abi.Get(1), abi.Back(), 2)
	abi.free()
}

func (self PackedByteArray) EncodeDouble(byte_offset Int, value Float) {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet[Int](1, abi, byte_offset)
	frameSet[Float](2, abi, value)
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.PackedByteArray.encode_double(abi.Get(0), abi.Get(1), abi.Back(), 2)
	abi.free()
}

func (self PackedByteArray) EncodeVar(byte_offset Int, value Variant, allow_objects bool) Int {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet[Int](1, abi, byte_offset)
	frameSet[Variant](2, abi, value)
	frameSet[bool](3, abi, allow_objects)
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.PackedByteArray.encode_var(abi.Get(0), abi.Get(1), abi.Back(), 3)
	var ret = frameGet[Int](abi)
	abi.free()
	return ret
}

func (self PackedInt32Array) Size() Int {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.PackedInt32Array.size(abi.Get(0), abi.Get(1), abi.Back(), 0)
	var ret = frameGet[Int](abi)
	abi.free()
	return ret
}

func (self PackedInt32Array) IsEmpty() bool {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.PackedInt32Array.is_empty(abi.Get(0), abi.Get(1), abi.Back(), 0)
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self PackedInt32Array) Set(index Int, value Int) {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet[Int](1, abi, index)
	frameSet[Int](2, abi, value)
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.PackedInt32Array.set(abi.Get(0), abi.Get(1), abi.Back(), 2)
	abi.free()
}

func (self PackedInt32Array) PushBack(value Int) bool {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet[Int](1, abi, value)
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.PackedInt32Array.push_back(abi.Get(0), abi.Get(1), abi.Back(), 1)
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self PackedInt32Array) Append(value Int) bool {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet[Int](1, abi, value)
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.PackedInt32Array.append(abi.Get(0), abi.Get(1), abi.Back(), 1)
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self PackedInt32Array) AppendArray(array PackedInt32Array) {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet[PackedInt32Array](1, abi, array)
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.PackedInt32Array.append_array(abi.Get(0), abi.Get(1), abi.Back(), 1)
	abi.free()
}

func (self PackedInt32Array) RemoveAt(index Int) {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet[Int](1, abi, index)
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.PackedInt32Array.remove_at(abi.Get(0), abi.Get(1), abi.Back(), 1)
	abi.free()
}

func (self PackedInt32Array) Insert(at_index Int, value Int) Int {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet[Int](1, abi, at_index)
	frameSet[Int](2, abi, value)
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.PackedInt32Array.insert(abi.Get(0), abi.Get(1), abi.Back(), 2)
	var ret = frameGet[Int](abi)
	abi.free()
	return ret
}

func (self PackedInt32Array) Fill(value Int) {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet[Int](1, abi, value)
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.PackedInt32Array.fill(abi.Get(0), abi.Get(1), abi.Back(), 1)
	abi.free()
}

func (self PackedInt32Array) Resize(new_size Int) Int {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet[Int](1, abi, new_size)
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.PackedInt32Array.resize(abi.Get(0), abi.Get(1), abi.Back(), 1)
	var ret = frameGet[Int](abi)
	abi.free()
	return ret
}

func (self PackedInt32Array) Clear() {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.PackedInt32Array.clear(abi.Get(0), abi.Get(1), abi.Back(), 0)
	abi.free()
}

func (self PackedInt32Array) Has(value Int) bool {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet[Int](1, abi, value)
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.PackedInt32Array.has(abi.Get(0), abi.Get(1), abi.Back(), 1)
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self PackedInt32Array) Reverse() {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.PackedInt32Array.reverse(abi.Get(0), abi.Get(1), abi.Back(), 0)
	abi.free()
}

func (self PackedInt32Array) Slice(ctx Context, begin Int, end Int) PackedInt32Array {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet[Int](1, abi, begin)
	frameSet[Int](2, abi, end)
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.PackedInt32Array.slice(abi.Get(0), abi.Get(1), abi.Back(), 2)
	var ret = frameGet[[2]uintptr](abi)
	abi.free()
	return mmm.Make[API, PackedInt32Array, [2]uintptr](ctx, selfPtr.API, ret)
}

func (self PackedInt32Array) ToByteArray(ctx Context) PackedByteArray {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.PackedInt32Array.to_byte_array(abi.Get(0), abi.Get(1), abi.Back(), 0)
	var ret = frameGet[[2]uintptr](abi)
	abi.free()
	return mmm.Make[API, PackedByteArray, [2]uintptr](ctx, selfPtr.API, ret)
}

func (self PackedInt32Array) Sort() {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.PackedInt32Array.sort(abi.Get(0), abi.Get(1), abi.Back(), 0)
	abi.free()
}

func (self PackedInt32Array) Bsearch(value Int, before bool) Int {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet[Int](1, abi, value)
	frameSet[bool](2, abi, before)
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.PackedInt32Array.bsearch(abi.Get(0), abi.Get(1), abi.Back(), 2)
	var ret = frameGet[Int](abi)
	abi.free()
	return ret
}

func (self PackedInt32Array) Duplicate(ctx Context) PackedInt32Array {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.PackedInt32Array.duplicate(abi.Get(0), abi.Get(1), abi.Back(), 0)
	var ret = frameGet[[2]uintptr](abi)
	abi.free()
	return mmm.Make[API, PackedInt32Array, [2]uintptr](ctx, selfPtr.API, ret)
}

func (self PackedInt32Array) Find(value Int, from Int) Int {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet[Int](1, abi, value)
	frameSet[Int](2, abi, from)
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.PackedInt32Array.find(abi.Get(0), abi.Get(1), abi.Back(), 2)
	var ret = frameGet[Int](abi)
	abi.free()
	return ret
}

func (self PackedInt32Array) Rfind(value Int, from Int) Int {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet[Int](1, abi, value)
	frameSet[Int](2, abi, from)
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.PackedInt32Array.rfind(abi.Get(0), abi.Get(1), abi.Back(), 2)
	var ret = frameGet[Int](abi)
	abi.free()
	return ret
}

func (self PackedInt32Array) Count(value Int) Int {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet[Int](1, abi, value)
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.PackedInt32Array.count(abi.Get(0), abi.Get(1), abi.Back(), 1)
	var ret = frameGet[Int](abi)
	abi.free()
	return ret
}

func (self PackedInt64Array) Size() Int {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.PackedInt64Array.size(abi.Get(0), abi.Get(1), abi.Back(), 0)
	var ret = frameGet[Int](abi)
	abi.free()
	return ret
}

func (self PackedInt64Array) IsEmpty() bool {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.PackedInt64Array.is_empty(abi.Get(0), abi.Get(1), abi.Back(), 0)
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self PackedInt64Array) Set(index Int, value Int) {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet[Int](1, abi, index)
	frameSet[Int](2, abi, value)
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.PackedInt64Array.set(abi.Get(0), abi.Get(1), abi.Back(), 2)
	abi.free()
}

func (self PackedInt64Array) PushBack(value Int) bool {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet[Int](1, abi, value)
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.PackedInt64Array.push_back(abi.Get(0), abi.Get(1), abi.Back(), 1)
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self PackedInt64Array) Append(value Int) bool {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet[Int](1, abi, value)
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.PackedInt64Array.append(abi.Get(0), abi.Get(1), abi.Back(), 1)
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self PackedInt64Array) AppendArray(array PackedInt64Array) {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet[PackedInt64Array](1, abi, array)
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.PackedInt64Array.append_array(abi.Get(0), abi.Get(1), abi.Back(), 1)
	abi.free()
}

func (self PackedInt64Array) RemoveAt(index Int) {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet[Int](1, abi, index)
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.PackedInt64Array.remove_at(abi.Get(0), abi.Get(1), abi.Back(), 1)
	abi.free()
}

func (self PackedInt64Array) Insert(at_index Int, value Int) Int {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet[Int](1, abi, at_index)
	frameSet[Int](2, abi, value)
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.PackedInt64Array.insert(abi.Get(0), abi.Get(1), abi.Back(), 2)
	var ret = frameGet[Int](abi)
	abi.free()
	return ret
}

func (self PackedInt64Array) Fill(value Int) {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet[Int](1, abi, value)
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.PackedInt64Array.fill(abi.Get(0), abi.Get(1), abi.Back(), 1)
	abi.free()
}

func (self PackedInt64Array) Resize(new_size Int) Int {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet[Int](1, abi, new_size)
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.PackedInt64Array.resize(abi.Get(0), abi.Get(1), abi.Back(), 1)
	var ret = frameGet[Int](abi)
	abi.free()
	return ret
}

func (self PackedInt64Array) Clear() {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.PackedInt64Array.clear(abi.Get(0), abi.Get(1), abi.Back(), 0)
	abi.free()
}

func (self PackedInt64Array) Has(value Int) bool {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet[Int](1, abi, value)
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.PackedInt64Array.has(abi.Get(0), abi.Get(1), abi.Back(), 1)
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self PackedInt64Array) Reverse() {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.PackedInt64Array.reverse(abi.Get(0), abi.Get(1), abi.Back(), 0)
	abi.free()
}

func (self PackedInt64Array) Slice(ctx Context, begin Int, end Int) PackedInt64Array {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet[Int](1, abi, begin)
	frameSet[Int](2, abi, end)
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.PackedInt64Array.slice(abi.Get(0), abi.Get(1), abi.Back(), 2)
	var ret = frameGet[[2]uintptr](abi)
	abi.free()
	return mmm.Make[API, PackedInt64Array, [2]uintptr](ctx, selfPtr.API, ret)
}

func (self PackedInt64Array) ToByteArray(ctx Context) PackedByteArray {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.PackedInt64Array.to_byte_array(abi.Get(0), abi.Get(1), abi.Back(), 0)
	var ret = frameGet[[2]uintptr](abi)
	abi.free()
	return mmm.Make[API, PackedByteArray, [2]uintptr](ctx, selfPtr.API, ret)
}

func (self PackedInt64Array) Sort() {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.PackedInt64Array.sort(abi.Get(0), abi.Get(1), abi.Back(), 0)
	abi.free()
}

func (self PackedInt64Array) Bsearch(value Int, before bool) Int {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet[Int](1, abi, value)
	frameSet[bool](2, abi, before)
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.PackedInt64Array.bsearch(abi.Get(0), abi.Get(1), abi.Back(), 2)
	var ret = frameGet[Int](abi)
	abi.free()
	return ret
}

func (self PackedInt64Array) Duplicate(ctx Context) PackedInt64Array {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.PackedInt64Array.duplicate(abi.Get(0), abi.Get(1), abi.Back(), 0)
	var ret = frameGet[[2]uintptr](abi)
	abi.free()
	return mmm.Make[API, PackedInt64Array, [2]uintptr](ctx, selfPtr.API, ret)
}

func (self PackedInt64Array) Find(value Int, from Int) Int {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet[Int](1, abi, value)
	frameSet[Int](2, abi, from)
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.PackedInt64Array.find(abi.Get(0), abi.Get(1), abi.Back(), 2)
	var ret = frameGet[Int](abi)
	abi.free()
	return ret
}

func (self PackedInt64Array) Rfind(value Int, from Int) Int {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet[Int](1, abi, value)
	frameSet[Int](2, abi, from)
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.PackedInt64Array.rfind(abi.Get(0), abi.Get(1), abi.Back(), 2)
	var ret = frameGet[Int](abi)
	abi.free()
	return ret
}

func (self PackedInt64Array) Count(value Int) Int {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet[Int](1, abi, value)
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.PackedInt64Array.count(abi.Get(0), abi.Get(1), abi.Back(), 1)
	var ret = frameGet[Int](abi)
	abi.free()
	return ret
}

func (self PackedFloat32Array) Size() Int {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.PackedFloat32Array.size(abi.Get(0), abi.Get(1), abi.Back(), 0)
	var ret = frameGet[Int](abi)
	abi.free()
	return ret
}

func (self PackedFloat32Array) IsEmpty() bool {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.PackedFloat32Array.is_empty(abi.Get(0), abi.Get(1), abi.Back(), 0)
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self PackedFloat32Array) Set(index Int, value Float) {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet[Int](1, abi, index)
	frameSet[Float](2, abi, value)
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.PackedFloat32Array.set(abi.Get(0), abi.Get(1), abi.Back(), 2)
	abi.free()
}

func (self PackedFloat32Array) PushBack(value Float) bool {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet[Float](1, abi, value)
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.PackedFloat32Array.push_back(abi.Get(0), abi.Get(1), abi.Back(), 1)
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self PackedFloat32Array) Append(value Float) bool {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet[Float](1, abi, value)
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.PackedFloat32Array.append(abi.Get(0), abi.Get(1), abi.Back(), 1)
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self PackedFloat32Array) AppendArray(array PackedFloat32Array) {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet[PackedFloat32Array](1, abi, array)
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.PackedFloat32Array.append_array(abi.Get(0), abi.Get(1), abi.Back(), 1)
	abi.free()
}

func (self PackedFloat32Array) RemoveAt(index Int) {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet[Int](1, abi, index)
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.PackedFloat32Array.remove_at(abi.Get(0), abi.Get(1), abi.Back(), 1)
	abi.free()
}

func (self PackedFloat32Array) Insert(at_index Int, value Float) Int {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet[Int](1, abi, at_index)
	frameSet[Float](2, abi, value)
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.PackedFloat32Array.insert(abi.Get(0), abi.Get(1), abi.Back(), 2)
	var ret = frameGet[Int](abi)
	abi.free()
	return ret
}

func (self PackedFloat32Array) Fill(value Float) {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet[Float](1, abi, value)
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.PackedFloat32Array.fill(abi.Get(0), abi.Get(1), abi.Back(), 1)
	abi.free()
}

func (self PackedFloat32Array) Resize(new_size Int) Int {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet[Int](1, abi, new_size)
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.PackedFloat32Array.resize(abi.Get(0), abi.Get(1), abi.Back(), 1)
	var ret = frameGet[Int](abi)
	abi.free()
	return ret
}

func (self PackedFloat32Array) Clear() {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.PackedFloat32Array.clear(abi.Get(0), abi.Get(1), abi.Back(), 0)
	abi.free()
}

func (self PackedFloat32Array) Has(value Float) bool {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet[Float](1, abi, value)
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.PackedFloat32Array.has(abi.Get(0), abi.Get(1), abi.Back(), 1)
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self PackedFloat32Array) Reverse() {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.PackedFloat32Array.reverse(abi.Get(0), abi.Get(1), abi.Back(), 0)
	abi.free()
}

func (self PackedFloat32Array) Slice(ctx Context, begin Int, end Int) PackedFloat32Array {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet[Int](1, abi, begin)
	frameSet[Int](2, abi, end)
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.PackedFloat32Array.slice(abi.Get(0), abi.Get(1), abi.Back(), 2)
	var ret = frameGet[[2]uintptr](abi)
	abi.free()
	return mmm.Make[API, PackedFloat32Array, [2]uintptr](ctx, selfPtr.API, ret)
}

func (self PackedFloat32Array) ToByteArray(ctx Context) PackedByteArray {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.PackedFloat32Array.to_byte_array(abi.Get(0), abi.Get(1), abi.Back(), 0)
	var ret = frameGet[[2]uintptr](abi)
	abi.free()
	return mmm.Make[API, PackedByteArray, [2]uintptr](ctx, selfPtr.API, ret)
}

func (self PackedFloat32Array) Sort() {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.PackedFloat32Array.sort(abi.Get(0), abi.Get(1), abi.Back(), 0)
	abi.free()
}

func (self PackedFloat32Array) Bsearch(value Float, before bool) Int {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet[Float](1, abi, value)
	frameSet[bool](2, abi, before)
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.PackedFloat32Array.bsearch(abi.Get(0), abi.Get(1), abi.Back(), 2)
	var ret = frameGet[Int](abi)
	abi.free()
	return ret
}

func (self PackedFloat32Array) Duplicate(ctx Context) PackedFloat32Array {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.PackedFloat32Array.duplicate(abi.Get(0), abi.Get(1), abi.Back(), 0)
	var ret = frameGet[[2]uintptr](abi)
	abi.free()
	return mmm.Make[API, PackedFloat32Array, [2]uintptr](ctx, selfPtr.API, ret)
}

func (self PackedFloat32Array) Find(value Float, from Int) Int {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet[Float](1, abi, value)
	frameSet[Int](2, abi, from)
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.PackedFloat32Array.find(abi.Get(0), abi.Get(1), abi.Back(), 2)
	var ret = frameGet[Int](abi)
	abi.free()
	return ret
}

func (self PackedFloat32Array) Rfind(value Float, from Int) Int {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet[Float](1, abi, value)
	frameSet[Int](2, abi, from)
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.PackedFloat32Array.rfind(abi.Get(0), abi.Get(1), abi.Back(), 2)
	var ret = frameGet[Int](abi)
	abi.free()
	return ret
}

func (self PackedFloat32Array) Count(value Float) Int {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet[Float](1, abi, value)
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.PackedFloat32Array.count(abi.Get(0), abi.Get(1), abi.Back(), 1)
	var ret = frameGet[Int](abi)
	abi.free()
	return ret
}

func (self PackedFloat64Array) Size() Int {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.PackedFloat64Array.size(abi.Get(0), abi.Get(1), abi.Back(), 0)
	var ret = frameGet[Int](abi)
	abi.free()
	return ret
}

func (self PackedFloat64Array) IsEmpty() bool {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.PackedFloat64Array.is_empty(abi.Get(0), abi.Get(1), abi.Back(), 0)
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self PackedFloat64Array) Set(index Int, value Float) {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet[Int](1, abi, index)
	frameSet[Float](2, abi, value)
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.PackedFloat64Array.set(abi.Get(0), abi.Get(1), abi.Back(), 2)
	abi.free()
}

func (self PackedFloat64Array) PushBack(value Float) bool {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet[Float](1, abi, value)
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.PackedFloat64Array.push_back(abi.Get(0), abi.Get(1), abi.Back(), 1)
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self PackedFloat64Array) Append(value Float) bool {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet[Float](1, abi, value)
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.PackedFloat64Array.append(abi.Get(0), abi.Get(1), abi.Back(), 1)
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self PackedFloat64Array) AppendArray(array PackedFloat64Array) {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet[PackedFloat64Array](1, abi, array)
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.PackedFloat64Array.append_array(abi.Get(0), abi.Get(1), abi.Back(), 1)
	abi.free()
}

func (self PackedFloat64Array) RemoveAt(index Int) {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet[Int](1, abi, index)
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.PackedFloat64Array.remove_at(abi.Get(0), abi.Get(1), abi.Back(), 1)
	abi.free()
}

func (self PackedFloat64Array) Insert(at_index Int, value Float) Int {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet[Int](1, abi, at_index)
	frameSet[Float](2, abi, value)
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.PackedFloat64Array.insert(abi.Get(0), abi.Get(1), abi.Back(), 2)
	var ret = frameGet[Int](abi)
	abi.free()
	return ret
}

func (self PackedFloat64Array) Fill(value Float) {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet[Float](1, abi, value)
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.PackedFloat64Array.fill(abi.Get(0), abi.Get(1), abi.Back(), 1)
	abi.free()
}

func (self PackedFloat64Array) Resize(new_size Int) Int {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet[Int](1, abi, new_size)
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.PackedFloat64Array.resize(abi.Get(0), abi.Get(1), abi.Back(), 1)
	var ret = frameGet[Int](abi)
	abi.free()
	return ret
}

func (self PackedFloat64Array) Clear() {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.PackedFloat64Array.clear(abi.Get(0), abi.Get(1), abi.Back(), 0)
	abi.free()
}

func (self PackedFloat64Array) Has(value Float) bool {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet[Float](1, abi, value)
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.PackedFloat64Array.has(abi.Get(0), abi.Get(1), abi.Back(), 1)
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self PackedFloat64Array) Reverse() {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.PackedFloat64Array.reverse(abi.Get(0), abi.Get(1), abi.Back(), 0)
	abi.free()
}

func (self PackedFloat64Array) Slice(ctx Context, begin Int, end Int) PackedFloat64Array {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet[Int](1, abi, begin)
	frameSet[Int](2, abi, end)
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.PackedFloat64Array.slice(abi.Get(0), abi.Get(1), abi.Back(), 2)
	var ret = frameGet[[2]uintptr](abi)
	abi.free()
	return mmm.Make[API, PackedFloat64Array, [2]uintptr](ctx, selfPtr.API, ret)
}

func (self PackedFloat64Array) ToByteArray(ctx Context) PackedByteArray {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.PackedFloat64Array.to_byte_array(abi.Get(0), abi.Get(1), abi.Back(), 0)
	var ret = frameGet[[2]uintptr](abi)
	abi.free()
	return mmm.Make[API, PackedByteArray, [2]uintptr](ctx, selfPtr.API, ret)
}

func (self PackedFloat64Array) Sort() {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.PackedFloat64Array.sort(abi.Get(0), abi.Get(1), abi.Back(), 0)
	abi.free()
}

func (self PackedFloat64Array) Bsearch(value Float, before bool) Int {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet[Float](1, abi, value)
	frameSet[bool](2, abi, before)
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.PackedFloat64Array.bsearch(abi.Get(0), abi.Get(1), abi.Back(), 2)
	var ret = frameGet[Int](abi)
	abi.free()
	return ret
}

func (self PackedFloat64Array) Duplicate(ctx Context) PackedFloat64Array {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.PackedFloat64Array.duplicate(abi.Get(0), abi.Get(1), abi.Back(), 0)
	var ret = frameGet[[2]uintptr](abi)
	abi.free()
	return mmm.Make[API, PackedFloat64Array, [2]uintptr](ctx, selfPtr.API, ret)
}

func (self PackedFloat64Array) Find(value Float, from Int) Int {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet[Float](1, abi, value)
	frameSet[Int](2, abi, from)
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.PackedFloat64Array.find(abi.Get(0), abi.Get(1), abi.Back(), 2)
	var ret = frameGet[Int](abi)
	abi.free()
	return ret
}

func (self PackedFloat64Array) Rfind(value Float, from Int) Int {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet[Float](1, abi, value)
	frameSet[Int](2, abi, from)
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.PackedFloat64Array.rfind(abi.Get(0), abi.Get(1), abi.Back(), 2)
	var ret = frameGet[Int](abi)
	abi.free()
	return ret
}

func (self PackedFloat64Array) Count(value Float) Int {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet[Float](1, abi, value)
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.PackedFloat64Array.count(abi.Get(0), abi.Get(1), abi.Back(), 1)
	var ret = frameGet[Int](abi)
	abi.free()
	return ret
}

func (self PackedStringArray) Size() Int {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.PackedStringArray.size(abi.Get(0), abi.Get(1), abi.Back(), 0)
	var ret = frameGet[Int](abi)
	abi.free()
	return ret
}

func (self PackedStringArray) IsEmpty() bool {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.PackedStringArray.is_empty(abi.Get(0), abi.Get(1), abi.Back(), 0)
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self PackedStringArray) Set(index Int, value String) {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet[Int](1, abi, index)
	frameSet[String](2, abi, value)
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.PackedStringArray.set(abi.Get(0), abi.Get(1), abi.Back(), 2)
	abi.free()
}

func (self PackedStringArray) PushBack(value String) bool {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet[String](1, abi, value)
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.PackedStringArray.push_back(abi.Get(0), abi.Get(1), abi.Back(), 1)
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self PackedStringArray) Append(value String) bool {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet[String](1, abi, value)
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.PackedStringArray.append(abi.Get(0), abi.Get(1), abi.Back(), 1)
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self PackedStringArray) AppendArray(array PackedStringArray) {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet[PackedStringArray](1, abi, array)
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.PackedStringArray.append_array(abi.Get(0), abi.Get(1), abi.Back(), 1)
	abi.free()
}

func (self PackedStringArray) RemoveAt(index Int) {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet[Int](1, abi, index)
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.PackedStringArray.remove_at(abi.Get(0), abi.Get(1), abi.Back(), 1)
	abi.free()
}

func (self PackedStringArray) Insert(at_index Int, value String) Int {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet[Int](1, abi, at_index)
	frameSet[String](2, abi, value)
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.PackedStringArray.insert(abi.Get(0), abi.Get(1), abi.Back(), 2)
	var ret = frameGet[Int](abi)
	abi.free()
	return ret
}

func (self PackedStringArray) Fill(value String) {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet[String](1, abi, value)
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.PackedStringArray.fill(abi.Get(0), abi.Get(1), abi.Back(), 1)
	abi.free()
}

func (self PackedStringArray) Resize(new_size Int) Int {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet[Int](1, abi, new_size)
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.PackedStringArray.resize(abi.Get(0), abi.Get(1), abi.Back(), 1)
	var ret = frameGet[Int](abi)
	abi.free()
	return ret
}

func (self PackedStringArray) Clear() {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.PackedStringArray.clear(abi.Get(0), abi.Get(1), abi.Back(), 0)
	abi.free()
}

func (self PackedStringArray) Has(value String) bool {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet[String](1, abi, value)
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.PackedStringArray.has(abi.Get(0), abi.Get(1), abi.Back(), 1)
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self PackedStringArray) Reverse() {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.PackedStringArray.reverse(abi.Get(0), abi.Get(1), abi.Back(), 0)
	abi.free()
}

func (self PackedStringArray) Slice(ctx Context, begin Int, end Int) PackedStringArray {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet[Int](1, abi, begin)
	frameSet[Int](2, abi, end)
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.PackedStringArray.slice(abi.Get(0), abi.Get(1), abi.Back(), 2)
	var ret = frameGet[[2]uintptr](abi)
	abi.free()
	return mmm.Make[API, PackedStringArray, [2]uintptr](ctx, selfPtr.API, ret)
}

func (self PackedStringArray) ToByteArray(ctx Context) PackedByteArray {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.PackedStringArray.to_byte_array(abi.Get(0), abi.Get(1), abi.Back(), 0)
	var ret = frameGet[[2]uintptr](abi)
	abi.free()
	return mmm.Make[API, PackedByteArray, [2]uintptr](ctx, selfPtr.API, ret)
}

func (self PackedStringArray) Sort() {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.PackedStringArray.sort(abi.Get(0), abi.Get(1), abi.Back(), 0)
	abi.free()
}

func (self PackedStringArray) Bsearch(value String, before bool) Int {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet[String](1, abi, value)
	frameSet[bool](2, abi, before)
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.PackedStringArray.bsearch(abi.Get(0), abi.Get(1), abi.Back(), 2)
	var ret = frameGet[Int](abi)
	abi.free()
	return ret
}

func (self PackedStringArray) Duplicate(ctx Context) PackedStringArray {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.PackedStringArray.duplicate(abi.Get(0), abi.Get(1), abi.Back(), 0)
	var ret = frameGet[[2]uintptr](abi)
	abi.free()
	return mmm.Make[API, PackedStringArray, [2]uintptr](ctx, selfPtr.API, ret)
}

func (self PackedStringArray) Find(value String, from Int) Int {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet[String](1, abi, value)
	frameSet[Int](2, abi, from)
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.PackedStringArray.find(abi.Get(0), abi.Get(1), abi.Back(), 2)
	var ret = frameGet[Int](abi)
	abi.free()
	return ret
}

func (self PackedStringArray) Rfind(value String, from Int) Int {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet[String](1, abi, value)
	frameSet[Int](2, abi, from)
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.PackedStringArray.rfind(abi.Get(0), abi.Get(1), abi.Back(), 2)
	var ret = frameGet[Int](abi)
	abi.free()
	return ret
}

func (self PackedStringArray) Count(value String) Int {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet[String](1, abi, value)
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.PackedStringArray.count(abi.Get(0), abi.Get(1), abi.Back(), 1)
	var ret = frameGet[Int](abi)
	abi.free()
	return ret
}

func (self PackedVector2Array) Size() Int {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.PackedVector2Array.size(abi.Get(0), abi.Get(1), abi.Back(), 0)
	var ret = frameGet[Int](abi)
	abi.free()
	return ret
}

func (self PackedVector2Array) IsEmpty() bool {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.PackedVector2Array.is_empty(abi.Get(0), abi.Get(1), abi.Back(), 0)
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self PackedVector2Array) Set(index Int, value Vector2) {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet[Int](1, abi, index)
	frameSet[Vector2](2, abi, value)
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.PackedVector2Array.set(abi.Get(0), abi.Get(1), abi.Back(), 2)
	abi.free()
}

func (self PackedVector2Array) PushBack(value Vector2) bool {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet[Vector2](1, abi, value)
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.PackedVector2Array.push_back(abi.Get(0), abi.Get(1), abi.Back(), 1)
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self PackedVector2Array) Append(value Vector2) bool {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet[Vector2](1, abi, value)
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.PackedVector2Array.append(abi.Get(0), abi.Get(1), abi.Back(), 1)
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self PackedVector2Array) AppendArray(array PackedVector2Array) {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet[PackedVector2Array](1, abi, array)
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.PackedVector2Array.append_array(abi.Get(0), abi.Get(1), abi.Back(), 1)
	abi.free()
}

func (self PackedVector2Array) RemoveAt(index Int) {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet[Int](1, abi, index)
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.PackedVector2Array.remove_at(abi.Get(0), abi.Get(1), abi.Back(), 1)
	abi.free()
}

func (self PackedVector2Array) Insert(at_index Int, value Vector2) Int {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet[Int](1, abi, at_index)
	frameSet[Vector2](2, abi, value)
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.PackedVector2Array.insert(abi.Get(0), abi.Get(1), abi.Back(), 2)
	var ret = frameGet[Int](abi)
	abi.free()
	return ret
}

func (self PackedVector2Array) Fill(value Vector2) {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet[Vector2](1, abi, value)
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.PackedVector2Array.fill(abi.Get(0), abi.Get(1), abi.Back(), 1)
	abi.free()
}

func (self PackedVector2Array) Resize(new_size Int) Int {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet[Int](1, abi, new_size)
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.PackedVector2Array.resize(abi.Get(0), abi.Get(1), abi.Back(), 1)
	var ret = frameGet[Int](abi)
	abi.free()
	return ret
}

func (self PackedVector2Array) Clear() {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.PackedVector2Array.clear(abi.Get(0), abi.Get(1), abi.Back(), 0)
	abi.free()
}

func (self PackedVector2Array) Has(value Vector2) bool {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet[Vector2](1, abi, value)
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.PackedVector2Array.has(abi.Get(0), abi.Get(1), abi.Back(), 1)
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self PackedVector2Array) Reverse() {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.PackedVector2Array.reverse(abi.Get(0), abi.Get(1), abi.Back(), 0)
	abi.free()
}

func (self PackedVector2Array) Slice(ctx Context, begin Int, end Int) PackedVector2Array {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet[Int](1, abi, begin)
	frameSet[Int](2, abi, end)
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.PackedVector2Array.slice(abi.Get(0), abi.Get(1), abi.Back(), 2)
	var ret = frameGet[[2]uintptr](abi)
	abi.free()
	return mmm.Make[API, PackedVector2Array, [2]uintptr](ctx, selfPtr.API, ret)
}

func (self PackedVector2Array) ToByteArray(ctx Context) PackedByteArray {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.PackedVector2Array.to_byte_array(abi.Get(0), abi.Get(1), abi.Back(), 0)
	var ret = frameGet[[2]uintptr](abi)
	abi.free()
	return mmm.Make[API, PackedByteArray, [2]uintptr](ctx, selfPtr.API, ret)
}

func (self PackedVector2Array) Sort() {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.PackedVector2Array.sort(abi.Get(0), abi.Get(1), abi.Back(), 0)
	abi.free()
}

func (self PackedVector2Array) Bsearch(value Vector2, before bool) Int {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet[Vector2](1, abi, value)
	frameSet[bool](2, abi, before)
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.PackedVector2Array.bsearch(abi.Get(0), abi.Get(1), abi.Back(), 2)
	var ret = frameGet[Int](abi)
	abi.free()
	return ret
}

func (self PackedVector2Array) Duplicate(ctx Context) PackedVector2Array {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.PackedVector2Array.duplicate(abi.Get(0), abi.Get(1), abi.Back(), 0)
	var ret = frameGet[[2]uintptr](abi)
	abi.free()
	return mmm.Make[API, PackedVector2Array, [2]uintptr](ctx, selfPtr.API, ret)
}

func (self PackedVector2Array) Find(value Vector2, from Int) Int {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet[Vector2](1, abi, value)
	frameSet[Int](2, abi, from)
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.PackedVector2Array.find(abi.Get(0), abi.Get(1), abi.Back(), 2)
	var ret = frameGet[Int](abi)
	abi.free()
	return ret
}

func (self PackedVector2Array) Rfind(value Vector2, from Int) Int {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet[Vector2](1, abi, value)
	frameSet[Int](2, abi, from)
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.PackedVector2Array.rfind(abi.Get(0), abi.Get(1), abi.Back(), 2)
	var ret = frameGet[Int](abi)
	abi.free()
	return ret
}

func (self PackedVector2Array) Count(value Vector2) Int {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet[Vector2](1, abi, value)
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.PackedVector2Array.count(abi.Get(0), abi.Get(1), abi.Back(), 1)
	var ret = frameGet[Int](abi)
	abi.free()
	return ret
}

func (self PackedVector3Array) Size() Int {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.PackedVector3Array.size(abi.Get(0), abi.Get(1), abi.Back(), 0)
	var ret = frameGet[Int](abi)
	abi.free()
	return ret
}

func (self PackedVector3Array) IsEmpty() bool {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.PackedVector3Array.is_empty(abi.Get(0), abi.Get(1), abi.Back(), 0)
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self PackedVector3Array) Set(index Int, value Vector3) {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet[Int](1, abi, index)
	frameSet[Vector3](2, abi, value)
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.PackedVector3Array.set(abi.Get(0), abi.Get(1), abi.Back(), 2)
	abi.free()
}

func (self PackedVector3Array) PushBack(value Vector3) bool {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet[Vector3](1, abi, value)
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.PackedVector3Array.push_back(abi.Get(0), abi.Get(1), abi.Back(), 1)
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self PackedVector3Array) Append(value Vector3) bool {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet[Vector3](1, abi, value)
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.PackedVector3Array.append(abi.Get(0), abi.Get(1), abi.Back(), 1)
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self PackedVector3Array) AppendArray(array PackedVector3Array) {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet[PackedVector3Array](1, abi, array)
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.PackedVector3Array.append_array(abi.Get(0), abi.Get(1), abi.Back(), 1)
	abi.free()
}

func (self PackedVector3Array) RemoveAt(index Int) {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet[Int](1, abi, index)
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.PackedVector3Array.remove_at(abi.Get(0), abi.Get(1), abi.Back(), 1)
	abi.free()
}

func (self PackedVector3Array) Insert(at_index Int, value Vector3) Int {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet[Int](1, abi, at_index)
	frameSet[Vector3](2, abi, value)
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.PackedVector3Array.insert(abi.Get(0), abi.Get(1), abi.Back(), 2)
	var ret = frameGet[Int](abi)
	abi.free()
	return ret
}

func (self PackedVector3Array) Fill(value Vector3) {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet[Vector3](1, abi, value)
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.PackedVector3Array.fill(abi.Get(0), abi.Get(1), abi.Back(), 1)
	abi.free()
}

func (self PackedVector3Array) Resize(new_size Int) Int {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet[Int](1, abi, new_size)
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.PackedVector3Array.resize(abi.Get(0), abi.Get(1), abi.Back(), 1)
	var ret = frameGet[Int](abi)
	abi.free()
	return ret
}

func (self PackedVector3Array) Clear() {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.PackedVector3Array.clear(abi.Get(0), abi.Get(1), abi.Back(), 0)
	abi.free()
}

func (self PackedVector3Array) Has(value Vector3) bool {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet[Vector3](1, abi, value)
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.PackedVector3Array.has(abi.Get(0), abi.Get(1), abi.Back(), 1)
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self PackedVector3Array) Reverse() {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.PackedVector3Array.reverse(abi.Get(0), abi.Get(1), abi.Back(), 0)
	abi.free()
}

func (self PackedVector3Array) Slice(ctx Context, begin Int, end Int) PackedVector3Array {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet[Int](1, abi, begin)
	frameSet[Int](2, abi, end)
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.PackedVector3Array.slice(abi.Get(0), abi.Get(1), abi.Back(), 2)
	var ret = frameGet[[2]uintptr](abi)
	abi.free()
	return mmm.Make[API, PackedVector3Array, [2]uintptr](ctx, selfPtr.API, ret)
}

func (self PackedVector3Array) ToByteArray(ctx Context) PackedByteArray {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.PackedVector3Array.to_byte_array(abi.Get(0), abi.Get(1), abi.Back(), 0)
	var ret = frameGet[[2]uintptr](abi)
	abi.free()
	return mmm.Make[API, PackedByteArray, [2]uintptr](ctx, selfPtr.API, ret)
}

func (self PackedVector3Array) Sort() {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.PackedVector3Array.sort(abi.Get(0), abi.Get(1), abi.Back(), 0)
	abi.free()
}

func (self PackedVector3Array) Bsearch(value Vector3, before bool) Int {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet[Vector3](1, abi, value)
	frameSet[bool](2, abi, before)
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.PackedVector3Array.bsearch(abi.Get(0), abi.Get(1), abi.Back(), 2)
	var ret = frameGet[Int](abi)
	abi.free()
	return ret
}

func (self PackedVector3Array) Duplicate(ctx Context) PackedVector3Array {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.PackedVector3Array.duplicate(abi.Get(0), abi.Get(1), abi.Back(), 0)
	var ret = frameGet[[2]uintptr](abi)
	abi.free()
	return mmm.Make[API, PackedVector3Array, [2]uintptr](ctx, selfPtr.API, ret)
}

func (self PackedVector3Array) Find(value Vector3, from Int) Int {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet[Vector3](1, abi, value)
	frameSet[Int](2, abi, from)
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.PackedVector3Array.find(abi.Get(0), abi.Get(1), abi.Back(), 2)
	var ret = frameGet[Int](abi)
	abi.free()
	return ret
}

func (self PackedVector3Array) Rfind(value Vector3, from Int) Int {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet[Vector3](1, abi, value)
	frameSet[Int](2, abi, from)
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.PackedVector3Array.rfind(abi.Get(0), abi.Get(1), abi.Back(), 2)
	var ret = frameGet[Int](abi)
	abi.free()
	return ret
}

func (self PackedVector3Array) Count(value Vector3) Int {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet[Vector3](1, abi, value)
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.PackedVector3Array.count(abi.Get(0), abi.Get(1), abi.Back(), 1)
	var ret = frameGet[Int](abi)
	abi.free()
	return ret
}

func (self PackedColorArray) Size() Int {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.PackedColorArray.size(abi.Get(0), abi.Get(1), abi.Back(), 0)
	var ret = frameGet[Int](abi)
	abi.free()
	return ret
}

func (self PackedColorArray) IsEmpty() bool {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.PackedColorArray.is_empty(abi.Get(0), abi.Get(1), abi.Back(), 0)
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self PackedColorArray) Set(index Int, value Color) {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet[Int](1, abi, index)
	frameSet[Color](2, abi, value)
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.PackedColorArray.set(abi.Get(0), abi.Get(1), abi.Back(), 2)
	abi.free()
}

func (self PackedColorArray) PushBack(value Color) bool {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet[Color](1, abi, value)
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.PackedColorArray.push_back(abi.Get(0), abi.Get(1), abi.Back(), 1)
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self PackedColorArray) Append(value Color) bool {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet[Color](1, abi, value)
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.PackedColorArray.append(abi.Get(0), abi.Get(1), abi.Back(), 1)
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self PackedColorArray) AppendArray(array PackedColorArray) {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet[PackedColorArray](1, abi, array)
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.PackedColorArray.append_array(abi.Get(0), abi.Get(1), abi.Back(), 1)
	abi.free()
}

func (self PackedColorArray) RemoveAt(index Int) {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet[Int](1, abi, index)
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.PackedColorArray.remove_at(abi.Get(0), abi.Get(1), abi.Back(), 1)
	abi.free()
}

func (self PackedColorArray) Insert(at_index Int, value Color) Int {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet[Int](1, abi, at_index)
	frameSet[Color](2, abi, value)
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.PackedColorArray.insert(abi.Get(0), abi.Get(1), abi.Back(), 2)
	var ret = frameGet[Int](abi)
	abi.free()
	return ret
}

func (self PackedColorArray) Fill(value Color) {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet[Color](1, abi, value)
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.PackedColorArray.fill(abi.Get(0), abi.Get(1), abi.Back(), 1)
	abi.free()
}

func (self PackedColorArray) Resize(new_size Int) Int {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet[Int](1, abi, new_size)
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.PackedColorArray.resize(abi.Get(0), abi.Get(1), abi.Back(), 1)
	var ret = frameGet[Int](abi)
	abi.free()
	return ret
}

func (self PackedColorArray) Clear() {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.PackedColorArray.clear(abi.Get(0), abi.Get(1), abi.Back(), 0)
	abi.free()
}

func (self PackedColorArray) Has(value Color) bool {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet[Color](1, abi, value)
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.PackedColorArray.has(abi.Get(0), abi.Get(1), abi.Back(), 1)
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self PackedColorArray) Reverse() {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.PackedColorArray.reverse(abi.Get(0), abi.Get(1), abi.Back(), 0)
	abi.free()
}

func (self PackedColorArray) Slice(ctx Context, begin Int, end Int) PackedColorArray {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet[Int](1, abi, begin)
	frameSet[Int](2, abi, end)
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.PackedColorArray.slice(abi.Get(0), abi.Get(1), abi.Back(), 2)
	var ret = frameGet[[2]uintptr](abi)
	abi.free()
	return mmm.Make[API, PackedColorArray, [2]uintptr](ctx, selfPtr.API, ret)
}

func (self PackedColorArray) ToByteArray(ctx Context) PackedByteArray {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.PackedColorArray.to_byte_array(abi.Get(0), abi.Get(1), abi.Back(), 0)
	var ret = frameGet[[2]uintptr](abi)
	abi.free()
	return mmm.Make[API, PackedByteArray, [2]uintptr](ctx, selfPtr.API, ret)
}

func (self PackedColorArray) Sort() {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.PackedColorArray.sort(abi.Get(0), abi.Get(1), abi.Back(), 0)
	abi.free()
}

func (self PackedColorArray) Bsearch(value Color, before bool) Int {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet[Color](1, abi, value)
	frameSet[bool](2, abi, before)
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.PackedColorArray.bsearch(abi.Get(0), abi.Get(1), abi.Back(), 2)
	var ret = frameGet[Int](abi)
	abi.free()
	return ret
}

func (self PackedColorArray) Duplicate(ctx Context) PackedColorArray {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.PackedColorArray.duplicate(abi.Get(0), abi.Get(1), abi.Back(), 0)
	var ret = frameGet[[2]uintptr](abi)
	abi.free()
	return mmm.Make[API, PackedColorArray, [2]uintptr](ctx, selfPtr.API, ret)
}

func (self PackedColorArray) Find(value Color, from Int) Int {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet[Color](1, abi, value)
	frameSet[Int](2, abi, from)
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.PackedColorArray.find(abi.Get(0), abi.Get(1), abi.Back(), 2)
	var ret = frameGet[Int](abi)
	abi.free()
	return ret
}

func (self PackedColorArray) Rfind(value Color, from Int) Int {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet[Color](1, abi, value)
	frameSet[Int](2, abi, from)
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.PackedColorArray.rfind(abi.Get(0), abi.Get(1), abi.Back(), 2)
	var ret = frameGet[Int](abi)
	abi.free()
	return ret
}

func (self PackedColorArray) Count(value Color) Int {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet[Color](1, abi, value)
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.PackedColorArray.count(abi.Get(0), abi.Get(1), abi.Back(), 1)
	var ret = frameGet[Int](abi)
	abi.free()
	return ret
}

type classArrayMesh struct{ Class[classArrayMesh, Mesh] }

func (self classArrayMesh) Mesh() Mesh { return *self.Super() }

func (self classArrayMesh) Resource() Resource { return *self.Super().Super() }

func (self classArrayMesh) RefCounted() RefCounted { return *self.Super().Super().Super() }

func (self classArrayMesh) Object() Object { return *self.Super().Super().Super().Super() }

func (self classArrayMesh) AddBlendShape(name StringName) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[StringName](0, abi, name)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.ArrayMesh.add_blend_shape, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classArrayMesh) GetBlendShapeCount() Int {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.ArrayMesh.get_blend_shape_count, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Int](abi)
	abi.free()
	return ret
}

func (self classArrayMesh) GetBlendShapeName(ctx Context, index Int) StringName {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Int](0, abi, index)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.ArrayMesh.get_blend_shape_name, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[uintptr](abi)
	abi.free()
	return mmm.Make[API, StringName, uintptr](ctx, selfPtr.API, ret)
}

func (self classArrayMesh) SetBlendShapeName(index Int, name StringName) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Int](0, abi, index)
	frameSet[StringName](1, abi, name)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.ArrayMesh.set_blend_shape_name, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classArrayMesh) ClearBlendShapes() {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.ArrayMesh.clear_blend_shapes, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classArrayMesh) SetBlendShapeMode(mode MeshBlendShapeMode) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[MeshBlendShapeMode](0, abi, mode)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.ArrayMesh.set_blend_shape_mode, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classArrayMesh) GetBlendShapeMode() MeshBlendShapeMode {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.ArrayMesh.get_blend_shape_mode, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[MeshBlendShapeMode](abi)
	abi.free()
	return ret
}

func (self classArrayMesh) AddSurfaceFromArrays(primitive MeshPrimitiveType, arrays Array, blend_shapes ArrayOf[Array], lods Dictionary, flags MeshArrayFormat) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[MeshPrimitiveType](0, abi, primitive)
	frameSet[Array](1, abi, arrays)
	frameSet[ArrayOf[Array]](2, abi, blend_shapes)
	frameSet[Dictionary](3, abi, lods)
	frameSet[MeshArrayFormat](4, abi, flags)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.ArrayMesh.add_surface_from_arrays, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classArrayMesh) ClearSurfaces() {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.ArrayMesh.clear_surfaces, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classArrayMesh) SurfaceUpdateVertexRegion(surf_idx Int, offset Int, data PackedByteArray) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Int](0, abi, surf_idx)
	frameSet[Int](1, abi, offset)
	frameSet[PackedByteArray](2, abi, data)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.ArrayMesh.surface_update_vertex_region, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classArrayMesh) SurfaceUpdateAttributeRegion(surf_idx Int, offset Int, data PackedByteArray) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Int](0, abi, surf_idx)
	frameSet[Int](1, abi, offset)
	frameSet[PackedByteArray](2, abi, data)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.ArrayMesh.surface_update_attribute_region, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classArrayMesh) SurfaceUpdateSkinRegion(surf_idx Int, offset Int, data PackedByteArray) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Int](0, abi, surf_idx)
	frameSet[Int](1, abi, offset)
	frameSet[PackedByteArray](2, abi, data)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.ArrayMesh.surface_update_skin_region, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classArrayMesh) SurfaceGetArrayLen(surf_idx Int) Int {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Int](0, abi, surf_idx)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.ArrayMesh.surface_get_array_len, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Int](abi)
	abi.free()
	return ret
}

func (self classArrayMesh) SurfaceGetArrayIndexLen(surf_idx Int) Int {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Int](0, abi, surf_idx)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.ArrayMesh.surface_get_array_index_len, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Int](abi)
	abi.free()
	return ret
}

func (self classArrayMesh) SurfaceGetFormat(surf_idx Int) MeshArrayFormat {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Int](0, abi, surf_idx)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.ArrayMesh.surface_get_format, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[MeshArrayFormat](abi)
	abi.free()
	return ret
}

func (self classArrayMesh) SurfaceGetPrimitiveType(surf_idx Int) MeshPrimitiveType {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Int](0, abi, surf_idx)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.ArrayMesh.surface_get_primitive_type, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[MeshPrimitiveType](abi)
	abi.free()
	return ret
}

func (self classArrayMesh) SurfaceFindByName(name String) Int {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[String](0, abi, name)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.ArrayMesh.surface_find_by_name, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Int](abi)
	abi.free()
	return ret
}

func (self classArrayMesh) SurfaceSetName(surf_idx Int, name String) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Int](0, abi, surf_idx)
	frameSet[String](1, abi, name)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.ArrayMesh.surface_set_name, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classArrayMesh) SurfaceGetName(ctx Context, surf_idx Int) String {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Int](0, abi, surf_idx)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.ArrayMesh.surface_get_name, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[uintptr](abi)
	abi.free()
	return mmm.Make[API, String, uintptr](ctx, selfPtr.API, ret)
}

func (self classArrayMesh) RegenNormalMaps() {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.ArrayMesh.regen_normal_maps, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classArrayMesh) LightmapUnwrap(transform Transform3D, texel_size Float) int64 {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Transform3D](0, abi, transform)
	frameSet[Float](1, abi, texel_size)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.ArrayMesh.lightmap_unwrap, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[int64](abi)
	abi.free()
	return ret
}

func (self classArrayMesh) SetCustomAabb(aabb AABB) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[AABB](0, abi, aabb)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.ArrayMesh.set_custom_aabb, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classArrayMesh) GetCustomAabb() AABB {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.ArrayMesh.get_custom_aabb, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[AABB](abi)
	abi.free()
	return ret
}

func (self classArrayMesh) SetShadowMesh(mesh ArrayMesh) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[ArrayMesh](0, abi, mesh)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.ArrayMesh.set_shadow_mesh, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classArrayMesh) GetShadowMesh() ArrayMesh {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.ArrayMesh.get_shadow_mesh, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[ArrayMesh](abi)
	abi.free()
	return ret
}

func (self classArrayMesh) virtual(name string) reflect.Value {
	switch name {
	default:
		return self.Super().virtual(name)
	}
}

type classCallbackTweener struct {
	Class[classCallbackTweener, Tweener]
}

func (self classCallbackTweener) Tweener() Tweener { return *self.Super() }

func (self classCallbackTweener) RefCounted() RefCounted { return *self.Super().Super() }

func (self classCallbackTweener) Object() Object { return *self.Super().Super().Super() }

func (self classCallbackTweener) SetDelay(delay Float) CallbackTweener {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Float](0, abi, delay)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.CallbackTweener.set_delay, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[CallbackTweener](abi)
	abi.free()
	return ret
}

func (self classCallbackTweener) virtual(name string) reflect.Value {
	switch name {
	default:
		return self.Super().virtual(name)
	}
}

type classCamera2D struct{ Class[classCamera2D, Node2D] }

func (self classCamera2D) Node2D() Node2D { return *self.Super() }

func (self classCamera2D) CanvasItem() CanvasItem { return *self.Super().Super() }

func (self classCamera2D) Node() Node { return *self.Super().Super().Super() }

func (self classCamera2D) Object() Object { return *self.Super().Super().Super().Super() }

func (self classCamera2D) SetOffset(offset Vector2) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Vector2](0, abi, offset)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Camera2D.set_offset, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classCamera2D) GetOffset() Vector2 {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Camera2D.get_offset, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Vector2](abi)
	abi.free()
	return ret
}

func (self classCamera2D) SetAnchorMode(anchor_mode Camera2DAnchorMode) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Camera2DAnchorMode](0, abi, anchor_mode)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Camera2D.set_anchor_mode, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classCamera2D) GetAnchorMode() Camera2DAnchorMode {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Camera2D.get_anchor_mode, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Camera2DAnchorMode](abi)
	abi.free()
	return ret
}

func (self classCamera2D) SetIgnoreRotation(ignore bool) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[bool](0, abi, ignore)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Camera2D.set_ignore_rotation, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classCamera2D) IsIgnoringRotation() bool {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Camera2D.is_ignoring_rotation, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self classCamera2D) SetProcessCallback(mode Camera2DCamera2DProcessCallback) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Camera2DCamera2DProcessCallback](0, abi, mode)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Camera2D.set_process_callback, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classCamera2D) GetProcessCallback() Camera2DCamera2DProcessCallback {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Camera2D.get_process_callback, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Camera2DCamera2DProcessCallback](abi)
	abi.free()
	return ret
}

func (self classCamera2D) SetEnabled(enabled bool) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[bool](0, abi, enabled)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Camera2D.set_enabled, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classCamera2D) IsEnabled() bool {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Camera2D.is_enabled, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self classCamera2D) MakeCurrent() {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Camera2D.make_current, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classCamera2D) IsCurrent() bool {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Camera2D.is_current, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self classCamera2D) SetLimit(margin Side, limit Int) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Side](0, abi, margin)
	frameSet[Int](1, abi, limit)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Camera2D.set_limit, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classCamera2D) GetLimit(margin Side) Int {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Side](0, abi, margin)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Camera2D.get_limit, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Int](abi)
	abi.free()
	return ret
}

func (self classCamera2D) SetLimitSmoothingEnabled(limit_smoothing_enabled bool) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[bool](0, abi, limit_smoothing_enabled)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Camera2D.set_limit_smoothing_enabled, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classCamera2D) IsLimitSmoothingEnabled() bool {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Camera2D.is_limit_smoothing_enabled, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self classCamera2D) SetDragVerticalEnabled(enabled bool) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[bool](0, abi, enabled)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Camera2D.set_drag_vertical_enabled, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classCamera2D) IsDragVerticalEnabled() bool {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Camera2D.is_drag_vertical_enabled, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self classCamera2D) SetDragHorizontalEnabled(enabled bool) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[bool](0, abi, enabled)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Camera2D.set_drag_horizontal_enabled, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classCamera2D) IsDragHorizontalEnabled() bool {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Camera2D.is_drag_horizontal_enabled, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self classCamera2D) SetDragVerticalOffset(offset Float) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Float](0, abi, offset)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Camera2D.set_drag_vertical_offset, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classCamera2D) GetDragVerticalOffset() Float {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Camera2D.get_drag_vertical_offset, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Float](abi)
	abi.free()
	return ret
}

func (self classCamera2D) SetDragHorizontalOffset(offset Float) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Float](0, abi, offset)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Camera2D.set_drag_horizontal_offset, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classCamera2D) GetDragHorizontalOffset() Float {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Camera2D.get_drag_horizontal_offset, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Float](abi)
	abi.free()
	return ret
}

func (self classCamera2D) SetDragMargin(margin Side, drag_margin Float) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Side](0, abi, margin)
	frameSet[Float](1, abi, drag_margin)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Camera2D.set_drag_margin, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classCamera2D) GetDragMargin(margin Side) Float {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Side](0, abi, margin)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Camera2D.get_drag_margin, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Float](abi)
	abi.free()
	return ret
}

func (self classCamera2D) GetTargetPosition() Vector2 {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Camera2D.get_target_position, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Vector2](abi)
	abi.free()
	return ret
}

func (self classCamera2D) GetScreenCenterPosition() Vector2 {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Camera2D.get_screen_center_position, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Vector2](abi)
	abi.free()
	return ret
}

func (self classCamera2D) SetZoom(zoom Vector2) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Vector2](0, abi, zoom)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Camera2D.set_zoom, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classCamera2D) GetZoom() Vector2 {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Camera2D.get_zoom, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Vector2](abi)
	abi.free()
	return ret
}

func (self classCamera2D) SetCustomViewport(viewport Node) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Node](0, abi, viewport)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Camera2D.set_custom_viewport, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classCamera2D) GetCustomViewport() Node {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Camera2D.get_custom_viewport, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Node](abi)
	abi.free()
	return ret
}

func (self classCamera2D) SetPositionSmoothingSpeed(position_smoothing_speed Float) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Float](0, abi, position_smoothing_speed)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Camera2D.set_position_smoothing_speed, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classCamera2D) GetPositionSmoothingSpeed() Float {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Camera2D.get_position_smoothing_speed, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Float](abi)
	abi.free()
	return ret
}

func (self classCamera2D) SetPositionSmoothingEnabled(position_smoothing_speed bool) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[bool](0, abi, position_smoothing_speed)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Camera2D.set_position_smoothing_enabled, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classCamera2D) IsPositionSmoothingEnabled() bool {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Camera2D.is_position_smoothing_enabled, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self classCamera2D) SetRotationSmoothingEnabled(enabled bool) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[bool](0, abi, enabled)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Camera2D.set_rotation_smoothing_enabled, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classCamera2D) IsRotationSmoothingEnabled() bool {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Camera2D.is_rotation_smoothing_enabled, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self classCamera2D) SetRotationSmoothingSpeed(speed Float) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Float](0, abi, speed)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Camera2D.set_rotation_smoothing_speed, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classCamera2D) GetRotationSmoothingSpeed() Float {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Camera2D.get_rotation_smoothing_speed, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Float](abi)
	abi.free()
	return ret
}

func (self classCamera2D) ForceUpdateScroll() {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Camera2D.force_update_scroll, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classCamera2D) ResetSmoothing() {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Camera2D.reset_smoothing, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classCamera2D) Align() {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Camera2D.align, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classCamera2D) SetScreenDrawingEnabled(screen_drawing_enabled bool) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[bool](0, abi, screen_drawing_enabled)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Camera2D.set_screen_drawing_enabled, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classCamera2D) IsScreenDrawingEnabled() bool {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Camera2D.is_screen_drawing_enabled, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self classCamera2D) SetLimitDrawingEnabled(limit_drawing_enabled bool) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[bool](0, abi, limit_drawing_enabled)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Camera2D.set_limit_drawing_enabled, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classCamera2D) IsLimitDrawingEnabled() bool {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Camera2D.is_limit_drawing_enabled, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self classCamera2D) SetMarginDrawingEnabled(margin_drawing_enabled bool) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[bool](0, abi, margin_drawing_enabled)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Camera2D.set_margin_drawing_enabled, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classCamera2D) IsMarginDrawingEnabled() bool {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Camera2D.is_margin_drawing_enabled, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self classCamera2D) virtual(name string) reflect.Value {
	switch name {
	default:
		return self.Super().virtual(name)
	}
}

type classCamera3D struct{ Class[classCamera3D, Node3D] }

func (self classCamera3D) Node3D() Node3D { return *self.Super() }

func (self classCamera3D) Node() Node { return *self.Super().Super() }

func (self classCamera3D) Object() Object { return *self.Super().Super().Super() }

func (self classCamera3D) ProjectRayNormal(screen_point Vector2) Vector3 {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Vector2](0, abi, screen_point)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Camera3D.project_ray_normal, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Vector3](abi)
	abi.free()
	return ret
}

func (self classCamera3D) ProjectLocalRayNormal(screen_point Vector2) Vector3 {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Vector2](0, abi, screen_point)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Camera3D.project_local_ray_normal, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Vector3](abi)
	abi.free()
	return ret
}

func (self classCamera3D) ProjectRayOrigin(screen_point Vector2) Vector3 {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Vector2](0, abi, screen_point)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Camera3D.project_ray_origin, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Vector3](abi)
	abi.free()
	return ret
}

func (self classCamera3D) UnprojectPosition(world_point Vector3) Vector2 {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Vector3](0, abi, world_point)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Camera3D.unproject_position, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Vector2](abi)
	abi.free()
	return ret
}

func (self classCamera3D) IsPositionBehind(world_point Vector3) bool {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Vector3](0, abi, world_point)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Camera3D.is_position_behind, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self classCamera3D) ProjectPosition(screen_point Vector2, z_depth Float) Vector3 {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Vector2](0, abi, screen_point)
	frameSet[Float](1, abi, z_depth)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Camera3D.project_position, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Vector3](abi)
	abi.free()
	return ret
}

func (self classCamera3D) SetPerspective(fov Float, z_near Float, z_far Float) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Float](0, abi, fov)
	frameSet[Float](1, abi, z_near)
	frameSet[Float](2, abi, z_far)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Camera3D.set_perspective, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classCamera3D) SetOrthogonal(size Float, z_near Float, z_far Float) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Float](0, abi, size)
	frameSet[Float](1, abi, z_near)
	frameSet[Float](2, abi, z_far)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Camera3D.set_orthogonal, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classCamera3D) SetFrustum(size Float, offset Vector2, z_near Float, z_far Float) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Float](0, abi, size)
	frameSet[Vector2](1, abi, offset)
	frameSet[Float](2, abi, z_near)
	frameSet[Float](3, abi, z_far)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Camera3D.set_frustum, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classCamera3D) MakeCurrent() {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Camera3D.make_current, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classCamera3D) ClearCurrent(enable_next bool) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[bool](0, abi, enable_next)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Camera3D.clear_current, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classCamera3D) SetCurrent(enabled bool) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[bool](0, abi, enabled)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Camera3D.set_current, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classCamera3D) IsCurrent() bool {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Camera3D.is_current, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self classCamera3D) GetCameraTransform() Transform3D {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Camera3D.get_camera_transform, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Transform3D](abi)
	abi.free()
	return ret
}

func (self classCamera3D) GetCameraProjection() Projection {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Camera3D.get_camera_projection, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Projection](abi)
	abi.free()
	return ret
}

func (self classCamera3D) GetFov() Float {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Camera3D.get_fov, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Float](abi)
	abi.free()
	return ret
}

func (self classCamera3D) GetFrustumOffset() Vector2 {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Camera3D.get_frustum_offset, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Vector2](abi)
	abi.free()
	return ret
}

func (self classCamera3D) GetSize() Float {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Camera3D.get_size, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Float](abi)
	abi.free()
	return ret
}

func (self classCamera3D) GetFar() Float {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Camera3D.get_far, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Float](abi)
	abi.free()
	return ret
}

func (self classCamera3D) GetNear() Float {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Camera3D.get_near, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Float](abi)
	abi.free()
	return ret
}

func (self classCamera3D) SetFov(fov Float) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Float](0, abi, fov)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Camera3D.set_fov, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classCamera3D) SetFrustumOffset(offset Vector2) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Vector2](0, abi, offset)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Camera3D.set_frustum_offset, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classCamera3D) SetSize(size Float) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Float](0, abi, size)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Camera3D.set_size, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classCamera3D) SetFar(far Float) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Float](0, abi, far)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Camera3D.set_far, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classCamera3D) SetNear(near Float) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Float](0, abi, near)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Camera3D.set_near, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classCamera3D) GetProjection() Camera3DProjectionType {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Camera3D.get_projection, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Camera3DProjectionType](abi)
	abi.free()
	return ret
}

func (self classCamera3D) SetProjection(mode Camera3DProjectionType) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Camera3DProjectionType](0, abi, mode)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Camera3D.set_projection, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classCamera3D) SetHOffset(offset Float) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Float](0, abi, offset)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Camera3D.set_h_offset, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classCamera3D) GetHOffset() Float {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Camera3D.get_h_offset, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Float](abi)
	abi.free()
	return ret
}

func (self classCamera3D) SetVOffset(offset Float) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Float](0, abi, offset)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Camera3D.set_v_offset, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classCamera3D) GetVOffset() Float {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Camera3D.get_v_offset, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Float](abi)
	abi.free()
	return ret
}

func (self classCamera3D) SetCullMask(mask Int) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Int](0, abi, mask)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Camera3D.set_cull_mask, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classCamera3D) GetCullMask() Int {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Camera3D.get_cull_mask, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Int](abi)
	abi.free()
	return ret
}

func (self classCamera3D) SetEnvironment(env Environment) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Environment](0, abi, env)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Camera3D.set_environment, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classCamera3D) GetEnvironment() Environment {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Camera3D.get_environment, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Environment](abi)
	abi.free()
	return ret
}

func (self classCamera3D) SetAttributes(env CameraAttributes) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[CameraAttributes](0, abi, env)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Camera3D.set_attributes, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classCamera3D) GetAttributes() CameraAttributes {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Camera3D.get_attributes, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[CameraAttributes](abi)
	abi.free()
	return ret
}

func (self classCamera3D) SetKeepAspectMode(mode Camera3DKeepAspect) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Camera3DKeepAspect](0, abi, mode)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Camera3D.set_keep_aspect_mode, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classCamera3D) GetKeepAspectMode() Camera3DKeepAspect {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Camera3D.get_keep_aspect_mode, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Camera3DKeepAspect](abi)
	abi.free()
	return ret
}

func (self classCamera3D) SetDopplerTracking(mode Camera3DDopplerTracking) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Camera3DDopplerTracking](0, abi, mode)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Camera3D.set_doppler_tracking, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classCamera3D) GetDopplerTracking() Camera3DDopplerTracking {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Camera3D.get_doppler_tracking, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Camera3DDopplerTracking](abi)
	abi.free()
	return ret
}

func (self classCamera3D) GetFrustum() ArrayOf[Plane] {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Camera3D.get_frustum, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[ArrayOf[Plane]](abi)
	abi.free()
	return ret
}

func (self classCamera3D) IsPositionInFrustum(world_point Vector3) bool {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Vector3](0, abi, world_point)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Camera3D.is_position_in_frustum, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self classCamera3D) GetCameraRid() RID {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Camera3D.get_camera_rid, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[RID](abi)
	abi.free()
	return ret
}

func (self classCamera3D) GetPyramidShapeRid() RID {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Camera3D.get_pyramid_shape_rid, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[RID](abi)
	abi.free()
	return ret
}

func (self classCamera3D) SetCullMaskValue(layer_number Int, value bool) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Int](0, abi, layer_number)
	frameSet[bool](1, abi, value)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Camera3D.set_cull_mask_value, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classCamera3D) GetCullMaskValue(layer_number Int) bool {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Int](0, abi, layer_number)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Camera3D.get_cull_mask_value, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self classCamera3D) virtual(name string) reflect.Value {
	switch name {
	default:
		return self.Super().virtual(name)
	}
}

type classCameraAttributes struct {
	Class[classCameraAttributes, Resource]
}

func (self classCameraAttributes) Resource() Resource { return *self.Super() }

func (self classCameraAttributes) RefCounted() RefCounted { return *self.Super().Super() }

func (self classCameraAttributes) Object() Object { return *self.Super().Super().Super() }

func (self classCameraAttributes) SetExposureMultiplier(multiplier Float) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Float](0, abi, multiplier)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.CameraAttributes.set_exposure_multiplier, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classCameraAttributes) GetExposureMultiplier() Float {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.CameraAttributes.get_exposure_multiplier, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Float](abi)
	abi.free()
	return ret
}

func (self classCameraAttributes) SetExposureSensitivity(sensitivity Float) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Float](0, abi, sensitivity)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.CameraAttributes.set_exposure_sensitivity, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classCameraAttributes) GetExposureSensitivity() Float {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.CameraAttributes.get_exposure_sensitivity, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Float](abi)
	abi.free()
	return ret
}

func (self classCameraAttributes) SetAutoExposureEnabled(enabled bool) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[bool](0, abi, enabled)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.CameraAttributes.set_auto_exposure_enabled, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classCameraAttributes) IsAutoExposureEnabled() bool {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.CameraAttributes.is_auto_exposure_enabled, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self classCameraAttributes) SetAutoExposureSpeed(exposure_speed Float) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Float](0, abi, exposure_speed)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.CameraAttributes.set_auto_exposure_speed, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classCameraAttributes) GetAutoExposureSpeed() Float {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.CameraAttributes.get_auto_exposure_speed, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Float](abi)
	abi.free()
	return ret
}

func (self classCameraAttributes) SetAutoExposureScale(exposure_grey Float) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Float](0, abi, exposure_grey)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.CameraAttributes.set_auto_exposure_scale, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classCameraAttributes) GetAutoExposureScale() Float {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.CameraAttributes.get_auto_exposure_scale, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Float](abi)
	abi.free()
	return ret
}

func (self classCameraAttributes) virtual(name string) reflect.Value {
	switch name {
	default:
		return self.Super().virtual(name)
	}
}

type classCanvasItem struct{ Class[classCanvasItem, Node] }

func (self classCanvasItem) Node() Node { return *self.Super() }

func (self classCanvasItem) Object() Object { return *self.Super().Super() }

func (classCanvasItem) _draw(impl func(ptr unsafe.Pointer, ctx Context), api *API) (cb ExtensionClassCallVirtualFunc) {
	cb.Set(func(class cgo.Handle, p_args godotArgs, p_back godotBack) {
		ctx := newContext(api)
		self := reflect.ValueOf(class.Value()).UnsafePointer()
		impl(self, ctx)
		ctx.Free()
	})
	return
}

func (self classCanvasItem) GetCanvasItem() RID {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.CanvasItem.get_canvas_item, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[RID](abi)
	abi.free()
	return ret
}

func (self classCanvasItem) SetVisible(visible bool) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[bool](0, abi, visible)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.CanvasItem.set_visible, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classCanvasItem) IsVisible() bool {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.CanvasItem.is_visible, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self classCanvasItem) IsVisibleInTree() bool {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.CanvasItem.is_visible_in_tree, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self classCanvasItem) Show() {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.CanvasItem.show, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classCanvasItem) Hide() {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.CanvasItem.hide, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classCanvasItem) QueueRedraw() {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.CanvasItem.queue_redraw, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classCanvasItem) MoveToFront() {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.CanvasItem.move_to_front, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classCanvasItem) SetAsTopLevel(enable bool) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[bool](0, abi, enable)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.CanvasItem.set_as_top_level, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classCanvasItem) IsSetAsTopLevel() bool {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.CanvasItem.is_set_as_top_level, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self classCanvasItem) SetLightMask(light_mask Int) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Int](0, abi, light_mask)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.CanvasItem.set_light_mask, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classCanvasItem) GetLightMask() Int {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.CanvasItem.get_light_mask, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Int](abi)
	abi.free()
	return ret
}

func (self classCanvasItem) SetModulate(modulate Color) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Color](0, abi, modulate)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.CanvasItem.set_modulate, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classCanvasItem) GetModulate() Color {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.CanvasItem.get_modulate, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Color](abi)
	abi.free()
	return ret
}

func (self classCanvasItem) SetSelfModulate(self_modulate Color) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Color](0, abi, self_modulate)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.CanvasItem.set_self_modulate, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classCanvasItem) GetSelfModulate() Color {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.CanvasItem.get_self_modulate, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Color](abi)
	abi.free()
	return ret
}

func (self classCanvasItem) SetZIndex(z_index Int) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Int](0, abi, z_index)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.CanvasItem.set_z_index, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classCanvasItem) GetZIndex() Int {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.CanvasItem.get_z_index, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Int](abi)
	abi.free()
	return ret
}

func (self classCanvasItem) SetZAsRelative(enable bool) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[bool](0, abi, enable)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.CanvasItem.set_z_as_relative, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classCanvasItem) IsZRelative() bool {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.CanvasItem.is_z_relative, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self classCanvasItem) SetYSortEnabled(enabled bool) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[bool](0, abi, enabled)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.CanvasItem.set_y_sort_enabled, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classCanvasItem) IsYSortEnabled() bool {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.CanvasItem.is_y_sort_enabled, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self classCanvasItem) SetDrawBehindParent(enable bool) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[bool](0, abi, enable)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.CanvasItem.set_draw_behind_parent, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classCanvasItem) IsDrawBehindParentEnabled() bool {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.CanvasItem.is_draw_behind_parent_enabled, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self classCanvasItem) DrawLine(from Vector2, to Vector2, color Color, width Float, antialiased bool) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Vector2](0, abi, from)
	frameSet[Vector2](1, abi, to)
	frameSet[Color](2, abi, color)
	frameSet[Float](3, abi, width)
	frameSet[bool](4, abi, antialiased)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.CanvasItem.draw_line, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classCanvasItem) DrawDashedLine(from Vector2, to Vector2, color Color, width Float, dash Float, aligned bool) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Vector2](0, abi, from)
	frameSet[Vector2](1, abi, to)
	frameSet[Color](2, abi, color)
	frameSet[Float](3, abi, width)
	frameSet[Float](4, abi, dash)
	frameSet[bool](5, abi, aligned)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.CanvasItem.draw_dashed_line, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classCanvasItem) DrawPolyline(points PackedVector2Array, color Color, width Float, antialiased bool) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[PackedVector2Array](0, abi, points)
	frameSet[Color](1, abi, color)
	frameSet[Float](2, abi, width)
	frameSet[bool](3, abi, antialiased)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.CanvasItem.draw_polyline, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classCanvasItem) DrawPolylineColors(points PackedVector2Array, colors PackedColorArray, width Float, antialiased bool) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[PackedVector2Array](0, abi, points)
	frameSet[PackedColorArray](1, abi, colors)
	frameSet[Float](2, abi, width)
	frameSet[bool](3, abi, antialiased)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.CanvasItem.draw_polyline_colors, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classCanvasItem) DrawArc(center Vector2, radius Float, start_angle Float, end_angle Float, point_count Int, color Color, width Float, antialiased bool) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Vector2](0, abi, center)
	frameSet[Float](1, abi, radius)
	frameSet[Float](2, abi, start_angle)
	frameSet[Float](3, abi, end_angle)
	frameSet[Int](4, abi, point_count)
	frameSet[Color](5, abi, color)
	frameSet[Float](6, abi, width)
	frameSet[bool](7, abi, antialiased)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.CanvasItem.draw_arc, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classCanvasItem) DrawMultiline(points PackedVector2Array, color Color, width Float) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[PackedVector2Array](0, abi, points)
	frameSet[Color](1, abi, color)
	frameSet[Float](2, abi, width)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.CanvasItem.draw_multiline, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classCanvasItem) DrawMultilineColors(points PackedVector2Array, colors PackedColorArray, width Float) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[PackedVector2Array](0, abi, points)
	frameSet[PackedColorArray](1, abi, colors)
	frameSet[Float](2, abi, width)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.CanvasItem.draw_multiline_colors, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classCanvasItem) DrawRect(rect Rect2, color Color, filled bool, width Float) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Rect2](0, abi, rect)
	frameSet[Color](1, abi, color)
	frameSet[bool](2, abi, filled)
	frameSet[Float](3, abi, width)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.CanvasItem.draw_rect, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classCanvasItem) DrawCircle(position Vector2, radius Float, color Color) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Vector2](0, abi, position)
	frameSet[Float](1, abi, radius)
	frameSet[Color](2, abi, color)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.CanvasItem.draw_circle, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classCanvasItem) DrawTexture(texture Texture2D, position Vector2, modulate Color) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Texture2D](0, abi, texture)
	frameSet[Vector2](1, abi, position)
	frameSet[Color](2, abi, modulate)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.CanvasItem.draw_texture, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classCanvasItem) DrawTextureRect(texture Texture2D, rect Rect2, tile bool, modulate Color, transpose bool) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Texture2D](0, abi, texture)
	frameSet[Rect2](1, abi, rect)
	frameSet[bool](2, abi, tile)
	frameSet[Color](3, abi, modulate)
	frameSet[bool](4, abi, transpose)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.CanvasItem.draw_texture_rect, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classCanvasItem) DrawTextureRectRegion(texture Texture2D, rect Rect2, src_rect Rect2, modulate Color, transpose bool, clip_uv bool) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Texture2D](0, abi, texture)
	frameSet[Rect2](1, abi, rect)
	frameSet[Rect2](2, abi, src_rect)
	frameSet[Color](3, abi, modulate)
	frameSet[bool](4, abi, transpose)
	frameSet[bool](5, abi, clip_uv)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.CanvasItem.draw_texture_rect_region, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classCanvasItem) DrawMsdfTextureRectRegion(texture Texture2D, rect Rect2, src_rect Rect2, modulate Color, outline Float, pixel_range Float, scale Float) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Texture2D](0, abi, texture)
	frameSet[Rect2](1, abi, rect)
	frameSet[Rect2](2, abi, src_rect)
	frameSet[Color](3, abi, modulate)
	frameSet[Float](4, abi, outline)
	frameSet[Float](5, abi, pixel_range)
	frameSet[Float](6, abi, scale)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.CanvasItem.draw_msdf_texture_rect_region, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classCanvasItem) DrawLcdTextureRectRegion(texture Texture2D, rect Rect2, src_rect Rect2, modulate Color) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Texture2D](0, abi, texture)
	frameSet[Rect2](1, abi, rect)
	frameSet[Rect2](2, abi, src_rect)
	frameSet[Color](3, abi, modulate)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.CanvasItem.draw_lcd_texture_rect_region, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classCanvasItem) DrawStyleBox(style_box StyleBox, rect Rect2) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[StyleBox](0, abi, style_box)
	frameSet[Rect2](1, abi, rect)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.CanvasItem.draw_style_box, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classCanvasItem) DrawPrimitive(points PackedVector2Array, colors PackedColorArray, uvs PackedVector2Array, texture Texture2D) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[PackedVector2Array](0, abi, points)
	frameSet[PackedColorArray](1, abi, colors)
	frameSet[PackedVector2Array](2, abi, uvs)
	frameSet[Texture2D](3, abi, texture)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.CanvasItem.draw_primitive, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classCanvasItem) DrawPolygon(points PackedVector2Array, colors PackedColorArray, uvs PackedVector2Array, texture Texture2D) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[PackedVector2Array](0, abi, points)
	frameSet[PackedColorArray](1, abi, colors)
	frameSet[PackedVector2Array](2, abi, uvs)
	frameSet[Texture2D](3, abi, texture)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.CanvasItem.draw_polygon, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classCanvasItem) DrawColoredPolygon(points PackedVector2Array, color Color, uvs PackedVector2Array, texture Texture2D) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[PackedVector2Array](0, abi, points)
	frameSet[Color](1, abi, color)
	frameSet[PackedVector2Array](2, abi, uvs)
	frameSet[Texture2D](3, abi, texture)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.CanvasItem.draw_colored_polygon, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classCanvasItem) DrawString(font Font, pos Vector2, text String, alignment HorizontalAlignment, width Float, font_size Int, modulate Color, justification_flags TextServerJustificationFlag, direction TextServerDirection, orientation TextServerOrientation) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Font](0, abi, font)
	frameSet[Vector2](1, abi, pos)
	frameSet[String](2, abi, text)
	frameSet[HorizontalAlignment](3, abi, alignment)
	frameSet[Float](4, abi, width)
	frameSet[Int](5, abi, font_size)
	frameSet[Color](6, abi, modulate)
	frameSet[TextServerJustificationFlag](7, abi, justification_flags)
	frameSet[TextServerDirection](8, abi, direction)
	frameSet[TextServerOrientation](9, abi, orientation)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.CanvasItem.draw_string, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classCanvasItem) DrawMultilineString(font Font, pos Vector2, text String, alignment HorizontalAlignment, width Float, font_size Int, max_lines Int, modulate Color, brk_flags TextServerLineBreakFlag, justification_flags TextServerJustificationFlag, direction TextServerDirection, orientation TextServerOrientation) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Font](0, abi, font)
	frameSet[Vector2](1, abi, pos)
	frameSet[String](2, abi, text)
	frameSet[HorizontalAlignment](3, abi, alignment)
	frameSet[Float](4, abi, width)
	frameSet[Int](5, abi, font_size)
	frameSet[Int](6, abi, max_lines)
	frameSet[Color](7, abi, modulate)
	frameSet[TextServerLineBreakFlag](8, abi, brk_flags)
	frameSet[TextServerJustificationFlag](9, abi, justification_flags)
	frameSet[TextServerDirection](10, abi, direction)
	frameSet[TextServerOrientation](11, abi, orientation)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.CanvasItem.draw_multiline_string, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classCanvasItem) DrawStringOutline(font Font, pos Vector2, text String, alignment HorizontalAlignment, width Float, font_size Int, size Int, modulate Color, justification_flags TextServerJustificationFlag, direction TextServerDirection, orientation TextServerOrientation) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Font](0, abi, font)
	frameSet[Vector2](1, abi, pos)
	frameSet[String](2, abi, text)
	frameSet[HorizontalAlignment](3, abi, alignment)
	frameSet[Float](4, abi, width)
	frameSet[Int](5, abi, font_size)
	frameSet[Int](6, abi, size)
	frameSet[Color](7, abi, modulate)
	frameSet[TextServerJustificationFlag](8, abi, justification_flags)
	frameSet[TextServerDirection](9, abi, direction)
	frameSet[TextServerOrientation](10, abi, orientation)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.CanvasItem.draw_string_outline, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classCanvasItem) DrawMultilineStringOutline(font Font, pos Vector2, text String, alignment HorizontalAlignment, width Float, font_size Int, max_lines Int, size Int, modulate Color, brk_flags TextServerLineBreakFlag, justification_flags TextServerJustificationFlag, direction TextServerDirection, orientation TextServerOrientation) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Font](0, abi, font)
	frameSet[Vector2](1, abi, pos)
	frameSet[String](2, abi, text)
	frameSet[HorizontalAlignment](3, abi, alignment)
	frameSet[Float](4, abi, width)
	frameSet[Int](5, abi, font_size)
	frameSet[Int](6, abi, max_lines)
	frameSet[Int](7, abi, size)
	frameSet[Color](8, abi, modulate)
	frameSet[TextServerLineBreakFlag](9, abi, brk_flags)
	frameSet[TextServerJustificationFlag](10, abi, justification_flags)
	frameSet[TextServerDirection](11, abi, direction)
	frameSet[TextServerOrientation](12, abi, orientation)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.CanvasItem.draw_multiline_string_outline, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classCanvasItem) DrawChar(font Font, pos Vector2, char String, font_size Int, modulate Color) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Font](0, abi, font)
	frameSet[Vector2](1, abi, pos)
	frameSet[String](2, abi, char)
	frameSet[Int](3, abi, font_size)
	frameSet[Color](4, abi, modulate)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.CanvasItem.draw_char, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classCanvasItem) DrawCharOutline(font Font, pos Vector2, char String, font_size Int, size Int, modulate Color) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Font](0, abi, font)
	frameSet[Vector2](1, abi, pos)
	frameSet[String](2, abi, char)
	frameSet[Int](3, abi, font_size)
	frameSet[Int](4, abi, size)
	frameSet[Color](5, abi, modulate)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.CanvasItem.draw_char_outline, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classCanvasItem) DrawMesh(mesh Mesh, texture Texture2D, transform Transform2D, modulate Color) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Mesh](0, abi, mesh)
	frameSet[Texture2D](1, abi, texture)
	frameSet[Transform2D](2, abi, transform)
	frameSet[Color](3, abi, modulate)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.CanvasItem.draw_mesh, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classCanvasItem) DrawMultimesh(multimesh MultiMesh, texture Texture2D) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[MultiMesh](0, abi, multimesh)
	frameSet[Texture2D](1, abi, texture)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.CanvasItem.draw_multimesh, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classCanvasItem) DrawSetTransform(position Vector2, rotation Float, scale Vector2) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Vector2](0, abi, position)
	frameSet[Float](1, abi, rotation)
	frameSet[Vector2](2, abi, scale)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.CanvasItem.draw_set_transform, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classCanvasItem) DrawSetTransformMatrix(xform Transform2D) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Transform2D](0, abi, xform)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.CanvasItem.draw_set_transform_matrix, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classCanvasItem) DrawAnimationSlice(animation_length Float, slice_begin Float, slice_end Float, offset Float) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Float](0, abi, animation_length)
	frameSet[Float](1, abi, slice_begin)
	frameSet[Float](2, abi, slice_end)
	frameSet[Float](3, abi, offset)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.CanvasItem.draw_animation_slice, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classCanvasItem) DrawEndAnimation() {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.CanvasItem.draw_end_animation, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classCanvasItem) GetTransform() Transform2D {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.CanvasItem.get_transform, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Transform2D](abi)
	abi.free()
	return ret
}

func (self classCanvasItem) GetGlobalTransform() Transform2D {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.CanvasItem.get_global_transform, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Transform2D](abi)
	abi.free()
	return ret
}

func (self classCanvasItem) GetGlobalTransformWithCanvas() Transform2D {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.CanvasItem.get_global_transform_with_canvas, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Transform2D](abi)
	abi.free()
	return ret
}

func (self classCanvasItem) GetViewportTransform() Transform2D {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.CanvasItem.get_viewport_transform, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Transform2D](abi)
	abi.free()
	return ret
}

func (self classCanvasItem) GetViewportRect() Rect2 {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.CanvasItem.get_viewport_rect, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Rect2](abi)
	abi.free()
	return ret
}

func (self classCanvasItem) GetCanvasTransform() Transform2D {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.CanvasItem.get_canvas_transform, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Transform2D](abi)
	abi.free()
	return ret
}

func (self classCanvasItem) GetScreenTransform() Transform2D {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.CanvasItem.get_screen_transform, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Transform2D](abi)
	abi.free()
	return ret
}

func (self classCanvasItem) GetLocalMousePosition() Vector2 {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.CanvasItem.get_local_mouse_position, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Vector2](abi)
	abi.free()
	return ret
}

func (self classCanvasItem) GetGlobalMousePosition() Vector2 {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.CanvasItem.get_global_mouse_position, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Vector2](abi)
	abi.free()
	return ret
}

func (self classCanvasItem) GetCanvas() RID {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.CanvasItem.get_canvas, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[RID](abi)
	abi.free()
	return ret
}

func (self classCanvasItem) GetWorld2d() World2D {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.CanvasItem.get_world_2d, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[World2D](abi)
	abi.free()
	return ret
}

func (self classCanvasItem) SetMaterial(material Material) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Material](0, abi, material)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.CanvasItem.set_material, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classCanvasItem) GetMaterial() Material {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.CanvasItem.get_material, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Material](abi)
	abi.free()
	return ret
}

func (self classCanvasItem) SetUseParentMaterial(enable bool) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[bool](0, abi, enable)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.CanvasItem.set_use_parent_material, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classCanvasItem) GetUseParentMaterial() bool {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.CanvasItem.get_use_parent_material, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self classCanvasItem) SetNotifyLocalTransform(enable bool) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[bool](0, abi, enable)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.CanvasItem.set_notify_local_transform, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classCanvasItem) IsLocalTransformNotificationEnabled() bool {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.CanvasItem.is_local_transform_notification_enabled, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self classCanvasItem) SetNotifyTransform(enable bool) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[bool](0, abi, enable)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.CanvasItem.set_notify_transform, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classCanvasItem) IsTransformNotificationEnabled() bool {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.CanvasItem.is_transform_notification_enabled, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self classCanvasItem) ForceUpdateTransform() {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.CanvasItem.force_update_transform, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classCanvasItem) MakeCanvasPositionLocal(screen_point Vector2) Vector2 {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Vector2](0, abi, screen_point)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.CanvasItem.make_canvas_position_local, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Vector2](abi)
	abi.free()
	return ret
}

func (self classCanvasItem) MakeInputLocal(event InputEvent) InputEvent {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[InputEvent](0, abi, event)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.CanvasItem.make_input_local, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[InputEvent](abi)
	abi.free()
	return ret
}

func (self classCanvasItem) SetVisibilityLayer(layer Int) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Int](0, abi, layer)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.CanvasItem.set_visibility_layer, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classCanvasItem) GetVisibilityLayer() Int {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.CanvasItem.get_visibility_layer, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Int](abi)
	abi.free()
	return ret
}

func (self classCanvasItem) SetVisibilityLayerBit(layer Int, enabled bool) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Int](0, abi, layer)
	frameSet[bool](1, abi, enabled)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.CanvasItem.set_visibility_layer_bit, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classCanvasItem) GetVisibilityLayerBit(layer Int) bool {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Int](0, abi, layer)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.CanvasItem.get_visibility_layer_bit, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self classCanvasItem) SetTextureFilter(mode CanvasItemTextureFilter) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[CanvasItemTextureFilter](0, abi, mode)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.CanvasItem.set_texture_filter, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classCanvasItem) GetTextureFilter() CanvasItemTextureFilter {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.CanvasItem.get_texture_filter, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[CanvasItemTextureFilter](abi)
	abi.free()
	return ret
}

func (self classCanvasItem) SetTextureRepeat(mode CanvasItemTextureRepeat) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[CanvasItemTextureRepeat](0, abi, mode)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.CanvasItem.set_texture_repeat, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classCanvasItem) GetTextureRepeat() CanvasItemTextureRepeat {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.CanvasItem.get_texture_repeat, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[CanvasItemTextureRepeat](abi)
	abi.free()
	return ret
}

func (self classCanvasItem) SetClipChildrenMode(mode CanvasItemClipChildrenMode) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[CanvasItemClipChildrenMode](0, abi, mode)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.CanvasItem.set_clip_children_mode, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classCanvasItem) GetClipChildrenMode() CanvasItemClipChildrenMode {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.CanvasItem.get_clip_children_mode, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[CanvasItemClipChildrenMode](abi)
	abi.free()
	return ret
}

func (self classCanvasItem) virtual(name string) reflect.Value {
	switch name {
	case "_draw":
		return reflect.ValueOf(self._draw)
	default:
		return self.Super().virtual(name)
	}
}

type classConcavePolygonShape3D struct {
	Class[classConcavePolygonShape3D, Shape3D]
}

func (self classConcavePolygonShape3D) Shape3D() Shape3D { return *self.Super() }

func (self classConcavePolygonShape3D) Resource() Resource { return *self.Super().Super() }

func (self classConcavePolygonShape3D) RefCounted() RefCounted { return *self.Super().Super().Super() }

func (self classConcavePolygonShape3D) Object() Object { return *self.Super().Super().Super().Super() }

func (self classConcavePolygonShape3D) SetFaces(faces PackedVector3Array) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[PackedVector3Array](0, abi, faces)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.ConcavePolygonShape3D.set_faces, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classConcavePolygonShape3D) GetFaces(ctx Context) PackedVector3Array {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.ConcavePolygonShape3D.get_faces, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[[2]uintptr](abi)
	abi.free()
	return mmm.Make[API, PackedVector3Array, [2]uintptr](ctx, selfPtr.API, ret)
}

func (self classConcavePolygonShape3D) SetBackfaceCollisionEnabled(enabled bool) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[bool](0, abi, enabled)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.ConcavePolygonShape3D.set_backface_collision_enabled, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classConcavePolygonShape3D) IsBackfaceCollisionEnabled() bool {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.ConcavePolygonShape3D.is_backface_collision_enabled, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self classConcavePolygonShape3D) virtual(name string) reflect.Value {
	switch name {
	default:
		return self.Super().virtual(name)
	}
}

type classControl struct {
	Class[classControl, CanvasItem]
}

func (self classControl) CanvasItem() CanvasItem { return *self.Super() }

func (self classControl) Node() Node { return *self.Super().Super() }

func (self classControl) Object() Object { return *self.Super().Super().Super() }

func (classControl) _has_point(impl func(ptr unsafe.Pointer, ctx Context, point Vector2) bool, api *API) (cb ExtensionClassCallVirtualFunc) {
	cb.Set(func(class cgo.Handle, p_args godotArgs, p_back godotBack) {
		ctx := newContext(api)
		var point = godotGet[Vector2](p_args, 0)
		self := reflect.ValueOf(class.Value()).UnsafePointer()
		ret := impl(self, ctx, point)
		ctx.Free()
		godotSet[bool](p_back, ret)
	})
	return
}

func (classControl) _structured_text_parser(impl func(ptr unsafe.Pointer, ctx Context, args Array, text String) ArrayOf[Vector3i], api *API) (cb ExtensionClassCallVirtualFunc) {
	cb.Set(func(class cgo.Handle, p_args godotArgs, p_back godotBack) {
		ctx := newContext(api)
		var args = godotGet[Array](p_args, 0)
		var text = godotGet[String](p_args, 1)
		self := reflect.ValueOf(class.Value()).UnsafePointer()
		ret := impl(self, ctx, args, text)
		ctx.Free()
		godotSet[ArrayOf[Vector3i]](p_back, ret)
	})
	return
}

func (classControl) _get_minimum_size(impl func(ptr unsafe.Pointer, ctx Context) Vector2, api *API) (cb ExtensionClassCallVirtualFunc) {
	cb.Set(func(class cgo.Handle, p_args godotArgs, p_back godotBack) {
		ctx := newContext(api)
		self := reflect.ValueOf(class.Value()).UnsafePointer()
		ret := impl(self, ctx)
		ctx.Free()
		godotSet[Vector2](p_back, ret)
	})
	return
}

func (classControl) _get_tooltip(impl func(ptr unsafe.Pointer, ctx Context, at_position Vector2) String, api *API) (cb ExtensionClassCallVirtualFunc) {
	cb.Set(func(class cgo.Handle, p_args godotArgs, p_back godotBack) {
		ctx := newContext(api)
		var at_position = godotGet[Vector2](p_args, 0)
		self := reflect.ValueOf(class.Value()).UnsafePointer()
		ret := impl(self, ctx, at_position)
		mmm.MarkFree(ret)
		ctx.Free()
		godotSet[String](p_back, ret)
	})
	return
}

func (classControl) _get_drag_data(impl func(ptr unsafe.Pointer, ctx Context, at_position Vector2) Variant, api *API) (cb ExtensionClassCallVirtualFunc) {
	cb.Set(func(class cgo.Handle, p_args godotArgs, p_back godotBack) {
		ctx := newContext(api)
		var at_position = godotGet[Vector2](p_args, 0)
		self := reflect.ValueOf(class.Value()).UnsafePointer()
		ret := impl(self, ctx, at_position)
		mmm.MarkFree(ret)
		ctx.Free()
		godotSet[Variant](p_back, ret)
	})
	return
}

func (classControl) _can_drop_data(impl func(ptr unsafe.Pointer, ctx Context, at_position Vector2, data Variant) bool, api *API) (cb ExtensionClassCallVirtualFunc) {
	cb.Set(func(class cgo.Handle, p_args godotArgs, p_back godotBack) {
		ctx := newContext(api)
		var at_position = godotGet[Vector2](p_args, 0)
		var data = godotGet[Variant](p_args, 1)
		self := reflect.ValueOf(class.Value()).UnsafePointer()
		ret := impl(self, ctx, at_position, data)
		ctx.Free()
		godotSet[bool](p_back, ret)
	})
	return
}

func (classControl) _drop_data(impl func(ptr unsafe.Pointer, ctx Context, at_position Vector2, data Variant), api *API) (cb ExtensionClassCallVirtualFunc) {
	cb.Set(func(class cgo.Handle, p_args godotArgs, p_back godotBack) {
		ctx := newContext(api)
		var at_position = godotGet[Vector2](p_args, 0)
		var data = godotGet[Variant](p_args, 1)
		self := reflect.ValueOf(class.Value()).UnsafePointer()
		impl(self, ctx, at_position, data)
		ctx.Free()
	})
	return
}

func (classControl) _make_custom_tooltip(impl func(ptr unsafe.Pointer, ctx Context, for_text String) Object, api *API) (cb ExtensionClassCallVirtualFunc) {
	cb.Set(func(class cgo.Handle, p_args godotArgs, p_back godotBack) {
		ctx := newContext(api)
		var for_text = godotGet[String](p_args, 0)
		self := reflect.ValueOf(class.Value()).UnsafePointer()
		ret := impl(self, ctx, for_text)
		ctx.Free()
		godotSet[Object](p_back, ret)
	})
	return
}

func (classControl) _gui_input(impl func(ptr unsafe.Pointer, ctx Context, event InputEvent), api *API) (cb ExtensionClassCallVirtualFunc) {
	cb.Set(func(class cgo.Handle, p_args godotArgs, p_back godotBack) {
		ctx := newContext(api)
		var event = godotGet[InputEvent](p_args, 0)
		self := reflect.ValueOf(class.Value()).UnsafePointer()
		impl(self, ctx, event)
		ctx.Free()
	})
	return
}

func (self classControl) AcceptEvent() {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Control.accept_event, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classControl) GetMinimumSize() Vector2 {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Control.get_minimum_size, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Vector2](abi)
	abi.free()
	return ret
}

func (self classControl) GetCombinedMinimumSize() Vector2 {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Control.get_combined_minimum_size, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Vector2](abi)
	abi.free()
	return ret
}

func (self classControl) SetAnchorsPreset(preset ControlLayoutPreset, keep_offsets bool) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[ControlLayoutPreset](0, abi, preset)
	frameSet[bool](1, abi, keep_offsets)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Control.set_anchors_preset, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classControl) SetOffsetsPreset(preset ControlLayoutPreset, resize_mode ControlLayoutPresetMode, margin Int) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[ControlLayoutPreset](0, abi, preset)
	frameSet[ControlLayoutPresetMode](1, abi, resize_mode)
	frameSet[Int](2, abi, margin)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Control.set_offsets_preset, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classControl) SetAnchorsAndOffsetsPreset(preset ControlLayoutPreset, resize_mode ControlLayoutPresetMode, margin Int) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[ControlLayoutPreset](0, abi, preset)
	frameSet[ControlLayoutPresetMode](1, abi, resize_mode)
	frameSet[Int](2, abi, margin)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Control.set_anchors_and_offsets_preset, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classControl) SetAnchor(side Side, anchor Float, keep_offset bool, push_opposite_anchor bool) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Side](0, abi, side)
	frameSet[Float](1, abi, anchor)
	frameSet[bool](2, abi, keep_offset)
	frameSet[bool](3, abi, push_opposite_anchor)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Control.set_anchor, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classControl) GetAnchor(side Side) Float {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Side](0, abi, side)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Control.get_anchor, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Float](abi)
	abi.free()
	return ret
}

func (self classControl) SetOffset(side Side, offset Float) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Side](0, abi, side)
	frameSet[Float](1, abi, offset)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Control.set_offset, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classControl) GetOffset(offset Side) Float {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Side](0, abi, offset)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Control.get_offset, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Float](abi)
	abi.free()
	return ret
}

func (self classControl) SetAnchorAndOffset(side Side, anchor Float, offset Float, push_opposite_anchor bool) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Side](0, abi, side)
	frameSet[Float](1, abi, anchor)
	frameSet[Float](2, abi, offset)
	frameSet[bool](3, abi, push_opposite_anchor)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Control.set_anchor_and_offset, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classControl) SetBegin(position Vector2) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Vector2](0, abi, position)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Control.set_begin, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classControl) SetEnd(position Vector2) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Vector2](0, abi, position)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Control.set_end, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classControl) SetPosition(position Vector2, keep_offsets bool) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Vector2](0, abi, position)
	frameSet[bool](1, abi, keep_offsets)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Control.set_position, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classControl) SetSize(size Vector2, keep_offsets bool) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Vector2](0, abi, size)
	frameSet[bool](1, abi, keep_offsets)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Control.set_size, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classControl) ResetSize() {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Control.reset_size, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classControl) SetCustomMinimumSize(size Vector2) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Vector2](0, abi, size)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Control.set_custom_minimum_size, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classControl) SetGlobalPosition(position Vector2, keep_offsets bool) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Vector2](0, abi, position)
	frameSet[bool](1, abi, keep_offsets)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Control.set_global_position, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classControl) SetRotation(radians Float) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Float](0, abi, radians)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Control.set_rotation, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classControl) SetRotationDegrees(degrees Float) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Float](0, abi, degrees)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Control.set_rotation_degrees, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classControl) SetScale(scale Vector2) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Vector2](0, abi, scale)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Control.set_scale, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classControl) SetPivotOffset(pivot_offset Vector2) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Vector2](0, abi, pivot_offset)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Control.set_pivot_offset, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classControl) GetBegin() Vector2 {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Control.get_begin, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Vector2](abi)
	abi.free()
	return ret
}

func (self classControl) GetEnd() Vector2 {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Control.get_end, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Vector2](abi)
	abi.free()
	return ret
}

func (self classControl) GetPosition() Vector2 {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Control.get_position, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Vector2](abi)
	abi.free()
	return ret
}

func (self classControl) GetSize() Vector2 {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Control.get_size, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Vector2](abi)
	abi.free()
	return ret
}

func (self classControl) GetRotation() Float {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Control.get_rotation, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Float](abi)
	abi.free()
	return ret
}

func (self classControl) GetRotationDegrees() Float {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Control.get_rotation_degrees, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Float](abi)
	abi.free()
	return ret
}

func (self classControl) GetScale() Vector2 {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Control.get_scale, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Vector2](abi)
	abi.free()
	return ret
}

func (self classControl) GetPivotOffset() Vector2 {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Control.get_pivot_offset, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Vector2](abi)
	abi.free()
	return ret
}

func (self classControl) GetCustomMinimumSize() Vector2 {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Control.get_custom_minimum_size, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Vector2](abi)
	abi.free()
	return ret
}

func (self classControl) GetParentAreaSize() Vector2 {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Control.get_parent_area_size, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Vector2](abi)
	abi.free()
	return ret
}

func (self classControl) GetGlobalPosition() Vector2 {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Control.get_global_position, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Vector2](abi)
	abi.free()
	return ret
}

func (self classControl) GetScreenPosition() Vector2 {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Control.get_screen_position, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Vector2](abi)
	abi.free()
	return ret
}

func (self classControl) GetRect() Rect2 {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Control.get_rect, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Rect2](abi)
	abi.free()
	return ret
}

func (self classControl) GetGlobalRect() Rect2 {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Control.get_global_rect, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Rect2](abi)
	abi.free()
	return ret
}

func (self classControl) SetFocusMode(mode ControlFocusMode) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[ControlFocusMode](0, abi, mode)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Control.set_focus_mode, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classControl) GetFocusMode() ControlFocusMode {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Control.get_focus_mode, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[ControlFocusMode](abi)
	abi.free()
	return ret
}

func (self classControl) HasFocus() bool {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Control.has_focus, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self classControl) GrabFocus() {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Control.grab_focus, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classControl) ReleaseFocus() {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Control.release_focus, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classControl) FindPrevValidFocus() Control {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Control.find_prev_valid_focus, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Control](abi)
	abi.free()
	return ret
}

func (self classControl) FindNextValidFocus() Control {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Control.find_next_valid_focus, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Control](abi)
	abi.free()
	return ret
}

func (self classControl) FindValidFocusNeighbor(side Side) Control {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Side](0, abi, side)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Control.find_valid_focus_neighbor, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Control](abi)
	abi.free()
	return ret
}

func (self classControl) SetHSizeFlags(flags ControlSizeFlags) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[ControlSizeFlags](0, abi, flags)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Control.set_h_size_flags, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classControl) GetHSizeFlags() ControlSizeFlags {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Control.get_h_size_flags, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[ControlSizeFlags](abi)
	abi.free()
	return ret
}

func (self classControl) SetStretchRatio(ratio Float) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Float](0, abi, ratio)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Control.set_stretch_ratio, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classControl) GetStretchRatio() Float {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Control.get_stretch_ratio, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Float](abi)
	abi.free()
	return ret
}

func (self classControl) SetVSizeFlags(flags ControlSizeFlags) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[ControlSizeFlags](0, abi, flags)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Control.set_v_size_flags, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classControl) GetVSizeFlags() ControlSizeFlags {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Control.get_v_size_flags, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[ControlSizeFlags](abi)
	abi.free()
	return ret
}

func (self classControl) SetTheme(theme Theme) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Theme](0, abi, theme)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Control.set_theme, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classControl) GetTheme() Theme {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Control.get_theme, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Theme](abi)
	abi.free()
	return ret
}

func (self classControl) SetThemeTypeVariation(theme_type StringName) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[StringName](0, abi, theme_type)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Control.set_theme_type_variation, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classControl) GetThemeTypeVariation(ctx Context) StringName {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Control.get_theme_type_variation, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[uintptr](abi)
	abi.free()
	return mmm.Make[API, StringName, uintptr](ctx, selfPtr.API, ret)
}

func (self classControl) BeginBulkThemeOverride() {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Control.begin_bulk_theme_override, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classControl) EndBulkThemeOverride() {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Control.end_bulk_theme_override, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classControl) AddThemeIconOverride(name StringName, texture Texture2D) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[StringName](0, abi, name)
	frameSet[Texture2D](1, abi, texture)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Control.add_theme_icon_override, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classControl) AddThemeStyleboxOverride(name StringName, stylebox StyleBox) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[StringName](0, abi, name)
	frameSet[StyleBox](1, abi, stylebox)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Control.add_theme_stylebox_override, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classControl) AddThemeFontOverride(name StringName, font Font) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[StringName](0, abi, name)
	frameSet[Font](1, abi, font)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Control.add_theme_font_override, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classControl) AddThemeFontSizeOverride(name StringName, font_size Int) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[StringName](0, abi, name)
	frameSet[Int](1, abi, font_size)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Control.add_theme_font_size_override, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classControl) AddThemeColorOverride(name StringName, color Color) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[StringName](0, abi, name)
	frameSet[Color](1, abi, color)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Control.add_theme_color_override, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classControl) AddThemeConstantOverride(name StringName, constant Int) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[StringName](0, abi, name)
	frameSet[Int](1, abi, constant)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Control.add_theme_constant_override, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classControl) RemoveThemeIconOverride(name StringName) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[StringName](0, abi, name)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Control.remove_theme_icon_override, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classControl) RemoveThemeStyleboxOverride(name StringName) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[StringName](0, abi, name)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Control.remove_theme_stylebox_override, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classControl) RemoveThemeFontOverride(name StringName) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[StringName](0, abi, name)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Control.remove_theme_font_override, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classControl) RemoveThemeFontSizeOverride(name StringName) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[StringName](0, abi, name)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Control.remove_theme_font_size_override, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classControl) RemoveThemeColorOverride(name StringName) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[StringName](0, abi, name)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Control.remove_theme_color_override, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classControl) RemoveThemeConstantOverride(name StringName) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[StringName](0, abi, name)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Control.remove_theme_constant_override, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classControl) GetThemeIcon(name StringName, theme_type StringName) Texture2D {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[StringName](0, abi, name)
	frameSet[StringName](1, abi, theme_type)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Control.get_theme_icon, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Texture2D](abi)
	abi.free()
	return ret
}

func (self classControl) GetThemeStylebox(name StringName, theme_type StringName) StyleBox {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[StringName](0, abi, name)
	frameSet[StringName](1, abi, theme_type)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Control.get_theme_stylebox, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[StyleBox](abi)
	abi.free()
	return ret
}

func (self classControl) GetThemeFont(name StringName, theme_type StringName) Font {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[StringName](0, abi, name)
	frameSet[StringName](1, abi, theme_type)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Control.get_theme_font, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Font](abi)
	abi.free()
	return ret
}

func (self classControl) GetThemeFontSize(name StringName, theme_type StringName) Int {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[StringName](0, abi, name)
	frameSet[StringName](1, abi, theme_type)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Control.get_theme_font_size, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Int](abi)
	abi.free()
	return ret
}

func (self classControl) GetThemeColor(name StringName, theme_type StringName) Color {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[StringName](0, abi, name)
	frameSet[StringName](1, abi, theme_type)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Control.get_theme_color, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Color](abi)
	abi.free()
	return ret
}

func (self classControl) GetThemeConstant(name StringName, theme_type StringName) Int {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[StringName](0, abi, name)
	frameSet[StringName](1, abi, theme_type)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Control.get_theme_constant, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Int](abi)
	abi.free()
	return ret
}

func (self classControl) HasThemeIconOverride(name StringName) bool {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[StringName](0, abi, name)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Control.has_theme_icon_override, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self classControl) HasThemeStyleboxOverride(name StringName) bool {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[StringName](0, abi, name)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Control.has_theme_stylebox_override, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self classControl) HasThemeFontOverride(name StringName) bool {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[StringName](0, abi, name)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Control.has_theme_font_override, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self classControl) HasThemeFontSizeOverride(name StringName) bool {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[StringName](0, abi, name)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Control.has_theme_font_size_override, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self classControl) HasThemeColorOverride(name StringName) bool {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[StringName](0, abi, name)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Control.has_theme_color_override, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self classControl) HasThemeConstantOverride(name StringName) bool {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[StringName](0, abi, name)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Control.has_theme_constant_override, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self classControl) HasThemeIcon(name StringName, theme_type StringName) bool {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[StringName](0, abi, name)
	frameSet[StringName](1, abi, theme_type)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Control.has_theme_icon, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self classControl) HasThemeStylebox(name StringName, theme_type StringName) bool {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[StringName](0, abi, name)
	frameSet[StringName](1, abi, theme_type)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Control.has_theme_stylebox, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self classControl) HasThemeFont(name StringName, theme_type StringName) bool {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[StringName](0, abi, name)
	frameSet[StringName](1, abi, theme_type)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Control.has_theme_font, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self classControl) HasThemeFontSize(name StringName, theme_type StringName) bool {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[StringName](0, abi, name)
	frameSet[StringName](1, abi, theme_type)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Control.has_theme_font_size, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self classControl) HasThemeColor(name StringName, theme_type StringName) bool {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[StringName](0, abi, name)
	frameSet[StringName](1, abi, theme_type)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Control.has_theme_color, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self classControl) HasThemeConstant(name StringName, theme_type StringName) bool {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[StringName](0, abi, name)
	frameSet[StringName](1, abi, theme_type)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Control.has_theme_constant, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self classControl) GetThemeDefaultBaseScale() Float {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Control.get_theme_default_base_scale, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Float](abi)
	abi.free()
	return ret
}

func (self classControl) GetThemeDefaultFont() Font {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Control.get_theme_default_font, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Font](abi)
	abi.free()
	return ret
}

func (self classControl) GetThemeDefaultFontSize() Int {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Control.get_theme_default_font_size, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Int](abi)
	abi.free()
	return ret
}

func (self classControl) GetParentControl() Control {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Control.get_parent_control, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Control](abi)
	abi.free()
	return ret
}

func (self classControl) SetHGrowDirection(direction ControlGrowDirection) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[ControlGrowDirection](0, abi, direction)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Control.set_h_grow_direction, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classControl) GetHGrowDirection() ControlGrowDirection {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Control.get_h_grow_direction, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[ControlGrowDirection](abi)
	abi.free()
	return ret
}

func (self classControl) SetVGrowDirection(direction ControlGrowDirection) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[ControlGrowDirection](0, abi, direction)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Control.set_v_grow_direction, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classControl) GetVGrowDirection() ControlGrowDirection {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Control.get_v_grow_direction, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[ControlGrowDirection](abi)
	abi.free()
	return ret
}

func (self classControl) SetTooltipText(hint String) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[String](0, abi, hint)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Control.set_tooltip_text, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classControl) GetTooltipText(ctx Context) String {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Control.get_tooltip_text, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[uintptr](abi)
	abi.free()
	return mmm.Make[API, String, uintptr](ctx, selfPtr.API, ret)
}

func (self classControl) GetTooltip(ctx Context, at_position Vector2) String {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Vector2](0, abi, at_position)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Control.get_tooltip, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[uintptr](abi)
	abi.free()
	return mmm.Make[API, String, uintptr](ctx, selfPtr.API, ret)
}

func (self classControl) SetDefaultCursorShape(shape ControlCursorShape) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[ControlCursorShape](0, abi, shape)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Control.set_default_cursor_shape, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classControl) GetDefaultCursorShape() ControlCursorShape {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Control.get_default_cursor_shape, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[ControlCursorShape](abi)
	abi.free()
	return ret
}

func (self classControl) GetCursorShape(position Vector2) ControlCursorShape {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Vector2](0, abi, position)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Control.get_cursor_shape, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[ControlCursorShape](abi)
	abi.free()
	return ret
}

func (self classControl) SetFocusNeighbor(side Side, neighbor NodePath) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Side](0, abi, side)
	frameSet[NodePath](1, abi, neighbor)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Control.set_focus_neighbor, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classControl) GetFocusNeighbor(ctx Context, side Side) NodePath {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Side](0, abi, side)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Control.get_focus_neighbor, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[uintptr](abi)
	abi.free()
	return mmm.Make[API, NodePath, uintptr](ctx, selfPtr.API, ret)
}

func (self classControl) SetFocusNext(next NodePath) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[NodePath](0, abi, next)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Control.set_focus_next, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classControl) GetFocusNext(ctx Context) NodePath {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Control.get_focus_next, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[uintptr](abi)
	abi.free()
	return mmm.Make[API, NodePath, uintptr](ctx, selfPtr.API, ret)
}

func (self classControl) SetFocusPrevious(previous NodePath) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[NodePath](0, abi, previous)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Control.set_focus_previous, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classControl) GetFocusPrevious(ctx Context) NodePath {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Control.get_focus_previous, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[uintptr](abi)
	abi.free()
	return mmm.Make[API, NodePath, uintptr](ctx, selfPtr.API, ret)
}

func (self classControl) ForceDrag(data Variant, preview Control) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Variant](0, abi, data)
	frameSet[Control](1, abi, preview)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Control.force_drag, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classControl) SetMouseFilter(filter ControlMouseFilter) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[ControlMouseFilter](0, abi, filter)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Control.set_mouse_filter, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classControl) GetMouseFilter() ControlMouseFilter {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Control.get_mouse_filter, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[ControlMouseFilter](abi)
	abi.free()
	return ret
}

func (self classControl) SetForcePassScrollEvents(force_pass_scroll_events bool) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[bool](0, abi, force_pass_scroll_events)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Control.set_force_pass_scroll_events, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classControl) IsForcePassScrollEvents() bool {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Control.is_force_pass_scroll_events, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self classControl) SetClipContents(enable bool) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[bool](0, abi, enable)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Control.set_clip_contents, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classControl) IsClippingContents() bool {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Control.is_clipping_contents, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self classControl) GrabClickFocus() {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Control.grab_click_focus, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classControl) SetDragForwarding(drag_func Callable, can_drop_func Callable, drop_func Callable) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Callable](0, abi, drag_func)
	frameSet[Callable](1, abi, can_drop_func)
	frameSet[Callable](2, abi, drop_func)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Control.set_drag_forwarding, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classControl) SetDragPreview(control Control) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Control](0, abi, control)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Control.set_drag_preview, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classControl) IsDragSuccessful() bool {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Control.is_drag_successful, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self classControl) WarpMouse(position Vector2) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Vector2](0, abi, position)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Control.warp_mouse, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classControl) SetShortcutContext(node Node) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Node](0, abi, node)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Control.set_shortcut_context, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classControl) GetShortcutContext() Node {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Control.get_shortcut_context, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Node](abi)
	abi.free()
	return ret
}

func (self classControl) UpdateMinimumSize() {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Control.update_minimum_size, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classControl) SetLayoutDirection(direction ControlLayoutDirection) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[ControlLayoutDirection](0, abi, direction)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Control.set_layout_direction, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classControl) GetLayoutDirection() ControlLayoutDirection {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Control.get_layout_direction, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[ControlLayoutDirection](abi)
	abi.free()
	return ret
}

func (self classControl) IsLayoutRtl() bool {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Control.is_layout_rtl, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self classControl) SetAutoTranslate(enable bool) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[bool](0, abi, enable)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Control.set_auto_translate, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classControl) IsAutoTranslating() bool {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Control.is_auto_translating, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self classControl) SetLocalizeNumeralSystem(enable bool) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[bool](0, abi, enable)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Control.set_localize_numeral_system, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classControl) IsLocalizingNumeralSystem() bool {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Control.is_localizing_numeral_system, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self classControl) virtual(name string) reflect.Value {
	switch name {
	case "_has_point":
		return reflect.ValueOf(self._has_point)
	case "_structured_text_parser":
		return reflect.ValueOf(self._structured_text_parser)
	case "_get_minimum_size":
		return reflect.ValueOf(self._get_minimum_size)
	case "_get_tooltip":
		return reflect.ValueOf(self._get_tooltip)
	case "_get_drag_data":
		return reflect.ValueOf(self._get_drag_data)
	case "_can_drop_data":
		return reflect.ValueOf(self._can_drop_data)
	case "_drop_data":
		return reflect.ValueOf(self._drop_data)
	case "_make_custom_tooltip":
		return reflect.ValueOf(self._make_custom_tooltip)
	case "_gui_input":
		return reflect.ValueOf(self._gui_input)
	default:
		return self.Super().virtual(name)
	}
}

type classConvexPolygonShape3D struct {
	Class[classConvexPolygonShape3D, Shape3D]
}

func (self classConvexPolygonShape3D) Shape3D() Shape3D { return *self.Super() }

func (self classConvexPolygonShape3D) Resource() Resource { return *self.Super().Super() }

func (self classConvexPolygonShape3D) RefCounted() RefCounted { return *self.Super().Super().Super() }

func (self classConvexPolygonShape3D) Object() Object { return *self.Super().Super().Super().Super() }

func (self classConvexPolygonShape3D) SetPoints(points PackedVector3Array) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[PackedVector3Array](0, abi, points)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.ConvexPolygonShape3D.set_points, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classConvexPolygonShape3D) GetPoints(ctx Context) PackedVector3Array {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.ConvexPolygonShape3D.get_points, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[[2]uintptr](abi)
	abi.free()
	return mmm.Make[API, PackedVector3Array, [2]uintptr](ctx, selfPtr.API, ret)
}

func (self classConvexPolygonShape3D) virtual(name string) reflect.Value {
	switch name {
	default:
		return self.Super().virtual(name)
	}
}

type classEngine struct{ Class[classEngine, Object] }

func (self classEngine) Object() Object { return *self.Super() }

func (self classEngine) isSingleton() {}

func (self classEngine) SetPhysicsTicksPerSecond(physics_ticks_per_second Int) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Int](0, abi, physics_ticks_per_second)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Engine.set_physics_ticks_per_second, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classEngine) GetPhysicsTicksPerSecond() Int {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Engine.get_physics_ticks_per_second, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Int](abi)
	abi.free()
	return ret
}

func (self classEngine) SetMaxPhysicsStepsPerFrame(max_physics_steps Int) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Int](0, abi, max_physics_steps)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Engine.set_max_physics_steps_per_frame, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classEngine) GetMaxPhysicsStepsPerFrame() Int {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Engine.get_max_physics_steps_per_frame, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Int](abi)
	abi.free()
	return ret
}

func (self classEngine) SetPhysicsJitterFix(physics_jitter_fix Float) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Float](0, abi, physics_jitter_fix)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Engine.set_physics_jitter_fix, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classEngine) GetPhysicsJitterFix() Float {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Engine.get_physics_jitter_fix, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Float](abi)
	abi.free()
	return ret
}

func (self classEngine) GetPhysicsInterpolationFraction() Float {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Engine.get_physics_interpolation_fraction, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Float](abi)
	abi.free()
	return ret
}

func (self classEngine) SetMaxFps(max_fps Int) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Int](0, abi, max_fps)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Engine.set_max_fps, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classEngine) GetMaxFps() Int {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Engine.get_max_fps, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Int](abi)
	abi.free()
	return ret
}

func (self classEngine) SetTimeScale(time_scale Float) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Float](0, abi, time_scale)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Engine.set_time_scale, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classEngine) GetTimeScale() Float {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Engine.get_time_scale, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Float](abi)
	abi.free()
	return ret
}

func (self classEngine) GetFramesDrawn() Int {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Engine.get_frames_drawn, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Int](abi)
	abi.free()
	return ret
}

func (self classEngine) GetFramesPerSecond() Float {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Engine.get_frames_per_second, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Float](abi)
	abi.free()
	return ret
}

func (self classEngine) GetPhysicsFrames() Int {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Engine.get_physics_frames, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Int](abi)
	abi.free()
	return ret
}

func (self classEngine) GetProcessFrames() Int {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Engine.get_process_frames, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Int](abi)
	abi.free()
	return ret
}

func (self classEngine) GetMainLoop() MainLoop {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Engine.get_main_loop, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[MainLoop](abi)
	abi.free()
	return ret
}

func (self classEngine) GetVersionInfo(ctx Context) Dictionary {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Engine.get_version_info, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[uintptr](abi)
	abi.free()
	return mmm.Make[API, Dictionary, uintptr](ctx, selfPtr.API, ret)
}

func (self classEngine) GetAuthorInfo(ctx Context) Dictionary {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Engine.get_author_info, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[uintptr](abi)
	abi.free()
	return mmm.Make[API, Dictionary, uintptr](ctx, selfPtr.API, ret)
}

func (self classEngine) GetCopyrightInfo() ArrayOf[Dictionary] {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Engine.get_copyright_info, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[ArrayOf[Dictionary]](abi)
	abi.free()
	return ret
}

func (self classEngine) GetDonorInfo(ctx Context) Dictionary {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Engine.get_donor_info, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[uintptr](abi)
	abi.free()
	return mmm.Make[API, Dictionary, uintptr](ctx, selfPtr.API, ret)
}

func (self classEngine) GetLicenseInfo(ctx Context) Dictionary {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Engine.get_license_info, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[uintptr](abi)
	abi.free()
	return mmm.Make[API, Dictionary, uintptr](ctx, selfPtr.API, ret)
}

func (self classEngine) GetLicenseText(ctx Context) String {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Engine.get_license_text, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[uintptr](abi)
	abi.free()
	return mmm.Make[API, String, uintptr](ctx, selfPtr.API, ret)
}

func (self classEngine) GetArchitectureName(ctx Context) String {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Engine.get_architecture_name, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[uintptr](abi)
	abi.free()
	return mmm.Make[API, String, uintptr](ctx, selfPtr.API, ret)
}

func (self classEngine) IsInPhysicsFrame() bool {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Engine.is_in_physics_frame, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self classEngine) HasSingleton(name StringName) bool {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[StringName](0, abi, name)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Engine.has_singleton, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self classEngine) GetSingleton(name StringName) Object {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[StringName](0, abi, name)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Engine.get_singleton, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Object](abi)
	abi.free()
	return ret
}

func (self classEngine) RegisterSingleton(name StringName, instance Object) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[StringName](0, abi, name)
	frameSet[Object](1, abi, instance)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Engine.register_singleton, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classEngine) UnregisterSingleton(name StringName) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[StringName](0, abi, name)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Engine.unregister_singleton, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classEngine) GetSingletonList(ctx Context) PackedStringArray {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Engine.get_singleton_list, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[[2]uintptr](abi)
	abi.free()
	return mmm.Make[API, PackedStringArray, [2]uintptr](ctx, selfPtr.API, ret)
}

func (self classEngine) RegisterScriptLanguage(language ScriptLanguage) int64 {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[ScriptLanguage](0, abi, language)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Engine.register_script_language, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[int64](abi)
	abi.free()
	return ret
}

func (self classEngine) UnregisterScriptLanguage(language ScriptLanguage) int64 {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[ScriptLanguage](0, abi, language)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Engine.unregister_script_language, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[int64](abi)
	abi.free()
	return ret
}

func (self classEngine) GetScriptLanguageCount() Int {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Engine.get_script_language_count, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Int](abi)
	abi.free()
	return ret
}

func (self classEngine) GetScriptLanguage(index Int) ScriptLanguage {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Int](0, abi, index)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Engine.get_script_language, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[ScriptLanguage](abi)
	abi.free()
	return ret
}

func (self classEngine) IsEditorHint() bool {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Engine.is_editor_hint, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self classEngine) GetWriteMoviePath(ctx Context) String {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Engine.get_write_movie_path, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[uintptr](abi)
	abi.free()
	return mmm.Make[API, String, uintptr](ctx, selfPtr.API, ret)
}

func (self classEngine) SetPrintErrorMessages(enabled bool) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[bool](0, abi, enabled)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Engine.set_print_error_messages, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classEngine) IsPrintingErrorMessages() bool {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Engine.is_printing_error_messages, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self classEngine) virtual(name string) reflect.Value {
	switch name {
	default:
		return self.Super().virtual(name)
	}
}

type classEnvironment struct {
	Class[classEnvironment, Resource]
}

func (self classEnvironment) Resource() Resource { return *self.Super() }

func (self classEnvironment) RefCounted() RefCounted { return *self.Super().Super() }

func (self classEnvironment) Object() Object { return *self.Super().Super().Super() }

func (self classEnvironment) SetBackground(mode EnvironmentBGMode) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[EnvironmentBGMode](0, abi, mode)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Environment.set_background, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classEnvironment) GetBackground() EnvironmentBGMode {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Environment.get_background, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[EnvironmentBGMode](abi)
	abi.free()
	return ret
}

func (self classEnvironment) SetSky(sky Sky) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Sky](0, abi, sky)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Environment.set_sky, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classEnvironment) GetSky() Sky {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Environment.get_sky, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Sky](abi)
	abi.free()
	return ret
}

func (self classEnvironment) SetSkyCustomFov(scale Float) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Float](0, abi, scale)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Environment.set_sky_custom_fov, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classEnvironment) GetSkyCustomFov() Float {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Environment.get_sky_custom_fov, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Float](abi)
	abi.free()
	return ret
}

func (self classEnvironment) SetSkyRotation(euler_radians Vector3) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Vector3](0, abi, euler_radians)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Environment.set_sky_rotation, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classEnvironment) GetSkyRotation() Vector3 {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Environment.get_sky_rotation, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Vector3](abi)
	abi.free()
	return ret
}

func (self classEnvironment) SetBgColor(color Color) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Color](0, abi, color)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Environment.set_bg_color, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classEnvironment) GetBgColor() Color {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Environment.get_bg_color, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Color](abi)
	abi.free()
	return ret
}

func (self classEnvironment) SetBgEnergyMultiplier(energy Float) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Float](0, abi, energy)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Environment.set_bg_energy_multiplier, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classEnvironment) GetBgEnergyMultiplier() Float {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Environment.get_bg_energy_multiplier, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Float](abi)
	abi.free()
	return ret
}

func (self classEnvironment) SetBgIntensity(energy Float) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Float](0, abi, energy)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Environment.set_bg_intensity, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classEnvironment) GetBgIntensity() Float {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Environment.get_bg_intensity, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Float](abi)
	abi.free()
	return ret
}

func (self classEnvironment) SetCanvasMaxLayer(layer Int) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Int](0, abi, layer)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Environment.set_canvas_max_layer, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classEnvironment) GetCanvasMaxLayer() Int {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Environment.get_canvas_max_layer, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Int](abi)
	abi.free()
	return ret
}

func (self classEnvironment) SetCameraFeedId(id Int) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Int](0, abi, id)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Environment.set_camera_feed_id, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classEnvironment) GetCameraFeedId() Int {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Environment.get_camera_feed_id, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Int](abi)
	abi.free()
	return ret
}

func (self classEnvironment) SetAmbientLightColor(color Color) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Color](0, abi, color)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Environment.set_ambient_light_color, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classEnvironment) GetAmbientLightColor() Color {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Environment.get_ambient_light_color, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Color](abi)
	abi.free()
	return ret
}

func (self classEnvironment) SetAmbientSource(source EnvironmentAmbientSource) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[EnvironmentAmbientSource](0, abi, source)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Environment.set_ambient_source, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classEnvironment) GetAmbientSource() EnvironmentAmbientSource {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Environment.get_ambient_source, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[EnvironmentAmbientSource](abi)
	abi.free()
	return ret
}

func (self classEnvironment) SetAmbientLightEnergy(energy Float) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Float](0, abi, energy)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Environment.set_ambient_light_energy, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classEnvironment) GetAmbientLightEnergy() Float {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Environment.get_ambient_light_energy, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Float](abi)
	abi.free()
	return ret
}

func (self classEnvironment) SetAmbientLightSkyContribution(ratio Float) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Float](0, abi, ratio)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Environment.set_ambient_light_sky_contribution, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classEnvironment) GetAmbientLightSkyContribution() Float {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Environment.get_ambient_light_sky_contribution, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Float](abi)
	abi.free()
	return ret
}

func (self classEnvironment) SetReflectionSource(source EnvironmentReflectionSource) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[EnvironmentReflectionSource](0, abi, source)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Environment.set_reflection_source, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classEnvironment) GetReflectionSource() EnvironmentReflectionSource {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Environment.get_reflection_source, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[EnvironmentReflectionSource](abi)
	abi.free()
	return ret
}

func (self classEnvironment) SetTonemapper(mode EnvironmentToneMapper) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[EnvironmentToneMapper](0, abi, mode)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Environment.set_tonemapper, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classEnvironment) GetTonemapper() EnvironmentToneMapper {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Environment.get_tonemapper, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[EnvironmentToneMapper](abi)
	abi.free()
	return ret
}

func (self classEnvironment) SetTonemapExposure(exposure Float) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Float](0, abi, exposure)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Environment.set_tonemap_exposure, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classEnvironment) GetTonemapExposure() Float {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Environment.get_tonemap_exposure, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Float](abi)
	abi.free()
	return ret
}

func (self classEnvironment) SetTonemapWhite(white Float) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Float](0, abi, white)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Environment.set_tonemap_white, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classEnvironment) GetTonemapWhite() Float {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Environment.get_tonemap_white, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Float](abi)
	abi.free()
	return ret
}

func (self classEnvironment) SetSsrEnabled(enabled bool) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[bool](0, abi, enabled)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Environment.set_ssr_enabled, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classEnvironment) IsSsrEnabled() bool {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Environment.is_ssr_enabled, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self classEnvironment) SetSsrMaxSteps(max_steps Int) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Int](0, abi, max_steps)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Environment.set_ssr_max_steps, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classEnvironment) GetSsrMaxSteps() Int {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Environment.get_ssr_max_steps, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Int](abi)
	abi.free()
	return ret
}

func (self classEnvironment) SetSsrFadeIn(fade_in Float) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Float](0, abi, fade_in)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Environment.set_ssr_fade_in, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classEnvironment) GetSsrFadeIn() Float {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Environment.get_ssr_fade_in, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Float](abi)
	abi.free()
	return ret
}

func (self classEnvironment) SetSsrFadeOut(fade_out Float) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Float](0, abi, fade_out)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Environment.set_ssr_fade_out, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classEnvironment) GetSsrFadeOut() Float {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Environment.get_ssr_fade_out, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Float](abi)
	abi.free()
	return ret
}

func (self classEnvironment) SetSsrDepthTolerance(depth_tolerance Float) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Float](0, abi, depth_tolerance)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Environment.set_ssr_depth_tolerance, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classEnvironment) GetSsrDepthTolerance() Float {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Environment.get_ssr_depth_tolerance, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Float](abi)
	abi.free()
	return ret
}

func (self classEnvironment) SetSsaoEnabled(enabled bool) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[bool](0, abi, enabled)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Environment.set_ssao_enabled, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classEnvironment) IsSsaoEnabled() bool {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Environment.is_ssao_enabled, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self classEnvironment) SetSsaoRadius(radius Float) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Float](0, abi, radius)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Environment.set_ssao_radius, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classEnvironment) GetSsaoRadius() Float {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Environment.get_ssao_radius, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Float](abi)
	abi.free()
	return ret
}

func (self classEnvironment) SetSsaoIntensity(intensity Float) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Float](0, abi, intensity)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Environment.set_ssao_intensity, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classEnvironment) GetSsaoIntensity() Float {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Environment.get_ssao_intensity, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Float](abi)
	abi.free()
	return ret
}

func (self classEnvironment) SetSsaoPower(power Float) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Float](0, abi, power)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Environment.set_ssao_power, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classEnvironment) GetSsaoPower() Float {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Environment.get_ssao_power, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Float](abi)
	abi.free()
	return ret
}

func (self classEnvironment) SetSsaoDetail(detail Float) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Float](0, abi, detail)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Environment.set_ssao_detail, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classEnvironment) GetSsaoDetail() Float {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Environment.get_ssao_detail, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Float](abi)
	abi.free()
	return ret
}

func (self classEnvironment) SetSsaoHorizon(horizon Float) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Float](0, abi, horizon)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Environment.set_ssao_horizon, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classEnvironment) GetSsaoHorizon() Float {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Environment.get_ssao_horizon, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Float](abi)
	abi.free()
	return ret
}

func (self classEnvironment) SetSsaoSharpness(sharpness Float) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Float](0, abi, sharpness)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Environment.set_ssao_sharpness, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classEnvironment) GetSsaoSharpness() Float {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Environment.get_ssao_sharpness, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Float](abi)
	abi.free()
	return ret
}

func (self classEnvironment) SetSsaoDirectLightAffect(amount Float) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Float](0, abi, amount)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Environment.set_ssao_direct_light_affect, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classEnvironment) GetSsaoDirectLightAffect() Float {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Environment.get_ssao_direct_light_affect, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Float](abi)
	abi.free()
	return ret
}

func (self classEnvironment) SetSsaoAoChannelAffect(amount Float) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Float](0, abi, amount)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Environment.set_ssao_ao_channel_affect, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classEnvironment) GetSsaoAoChannelAffect() Float {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Environment.get_ssao_ao_channel_affect, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Float](abi)
	abi.free()
	return ret
}

func (self classEnvironment) SetSsilEnabled(enabled bool) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[bool](0, abi, enabled)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Environment.set_ssil_enabled, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classEnvironment) IsSsilEnabled() bool {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Environment.is_ssil_enabled, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self classEnvironment) SetSsilRadius(radius Float) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Float](0, abi, radius)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Environment.set_ssil_radius, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classEnvironment) GetSsilRadius() Float {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Environment.get_ssil_radius, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Float](abi)
	abi.free()
	return ret
}

func (self classEnvironment) SetSsilIntensity(intensity Float) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Float](0, abi, intensity)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Environment.set_ssil_intensity, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classEnvironment) GetSsilIntensity() Float {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Environment.get_ssil_intensity, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Float](abi)
	abi.free()
	return ret
}

func (self classEnvironment) SetSsilSharpness(sharpness Float) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Float](0, abi, sharpness)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Environment.set_ssil_sharpness, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classEnvironment) GetSsilSharpness() Float {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Environment.get_ssil_sharpness, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Float](abi)
	abi.free()
	return ret
}

func (self classEnvironment) SetSsilNormalRejection(normal_rejection Float) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Float](0, abi, normal_rejection)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Environment.set_ssil_normal_rejection, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classEnvironment) GetSsilNormalRejection() Float {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Environment.get_ssil_normal_rejection, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Float](abi)
	abi.free()
	return ret
}

func (self classEnvironment) SetSdfgiEnabled(enabled bool) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[bool](0, abi, enabled)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Environment.set_sdfgi_enabled, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classEnvironment) IsSdfgiEnabled() bool {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Environment.is_sdfgi_enabled, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self classEnvironment) SetSdfgiCascades(amount Int) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Int](0, abi, amount)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Environment.set_sdfgi_cascades, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classEnvironment) GetSdfgiCascades() Int {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Environment.get_sdfgi_cascades, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Int](abi)
	abi.free()
	return ret
}

func (self classEnvironment) SetSdfgiMinCellSize(size Float) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Float](0, abi, size)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Environment.set_sdfgi_min_cell_size, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classEnvironment) GetSdfgiMinCellSize() Float {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Environment.get_sdfgi_min_cell_size, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Float](abi)
	abi.free()
	return ret
}

func (self classEnvironment) SetSdfgiMaxDistance(distance Float) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Float](0, abi, distance)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Environment.set_sdfgi_max_distance, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classEnvironment) GetSdfgiMaxDistance() Float {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Environment.get_sdfgi_max_distance, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Float](abi)
	abi.free()
	return ret
}

func (self classEnvironment) SetSdfgiCascade0Distance(distance Float) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Float](0, abi, distance)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Environment.set_sdfgi_cascade0_distance, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classEnvironment) GetSdfgiCascade0Distance() Float {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Environment.get_sdfgi_cascade0_distance, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Float](abi)
	abi.free()
	return ret
}

func (self classEnvironment) SetSdfgiYScale(scale EnvironmentSDFGIYScale) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[EnvironmentSDFGIYScale](0, abi, scale)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Environment.set_sdfgi_y_scale, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classEnvironment) GetSdfgiYScale() EnvironmentSDFGIYScale {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Environment.get_sdfgi_y_scale, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[EnvironmentSDFGIYScale](abi)
	abi.free()
	return ret
}

func (self classEnvironment) SetSdfgiUseOcclusion(enable bool) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[bool](0, abi, enable)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Environment.set_sdfgi_use_occlusion, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classEnvironment) IsSdfgiUsingOcclusion() bool {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Environment.is_sdfgi_using_occlusion, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self classEnvironment) SetSdfgiBounceFeedback(amount Float) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Float](0, abi, amount)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Environment.set_sdfgi_bounce_feedback, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classEnvironment) GetSdfgiBounceFeedback() Float {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Environment.get_sdfgi_bounce_feedback, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Float](abi)
	abi.free()
	return ret
}

func (self classEnvironment) SetSdfgiReadSkyLight(enable bool) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[bool](0, abi, enable)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Environment.set_sdfgi_read_sky_light, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classEnvironment) IsSdfgiReadingSkyLight() bool {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Environment.is_sdfgi_reading_sky_light, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self classEnvironment) SetSdfgiEnergy(amount Float) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Float](0, abi, amount)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Environment.set_sdfgi_energy, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classEnvironment) GetSdfgiEnergy() Float {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Environment.get_sdfgi_energy, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Float](abi)
	abi.free()
	return ret
}

func (self classEnvironment) SetSdfgiNormalBias(bias Float) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Float](0, abi, bias)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Environment.set_sdfgi_normal_bias, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classEnvironment) GetSdfgiNormalBias() Float {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Environment.get_sdfgi_normal_bias, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Float](abi)
	abi.free()
	return ret
}

func (self classEnvironment) SetSdfgiProbeBias(bias Float) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Float](0, abi, bias)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Environment.set_sdfgi_probe_bias, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classEnvironment) GetSdfgiProbeBias() Float {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Environment.get_sdfgi_probe_bias, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Float](abi)
	abi.free()
	return ret
}

func (self classEnvironment) SetGlowEnabled(enabled bool) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[bool](0, abi, enabled)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Environment.set_glow_enabled, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classEnvironment) IsGlowEnabled() bool {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Environment.is_glow_enabled, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self classEnvironment) SetGlowLevel(idx Int, intensity Float) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Int](0, abi, idx)
	frameSet[Float](1, abi, intensity)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Environment.set_glow_level, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classEnvironment) GetGlowLevel(idx Int) Float {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Int](0, abi, idx)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Environment.get_glow_level, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Float](abi)
	abi.free()
	return ret
}

func (self classEnvironment) SetGlowNormalized(normalize bool) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[bool](0, abi, normalize)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Environment.set_glow_normalized, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classEnvironment) IsGlowNormalized() bool {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Environment.is_glow_normalized, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self classEnvironment) SetGlowIntensity(intensity Float) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Float](0, abi, intensity)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Environment.set_glow_intensity, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classEnvironment) GetGlowIntensity() Float {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Environment.get_glow_intensity, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Float](abi)
	abi.free()
	return ret
}

func (self classEnvironment) SetGlowStrength(strength Float) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Float](0, abi, strength)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Environment.set_glow_strength, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classEnvironment) GetGlowStrength() Float {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Environment.get_glow_strength, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Float](abi)
	abi.free()
	return ret
}

func (self classEnvironment) SetGlowMix(mix Float) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Float](0, abi, mix)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Environment.set_glow_mix, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classEnvironment) GetGlowMix() Float {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Environment.get_glow_mix, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Float](abi)
	abi.free()
	return ret
}

func (self classEnvironment) SetGlowBloom(amount Float) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Float](0, abi, amount)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Environment.set_glow_bloom, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classEnvironment) GetGlowBloom() Float {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Environment.get_glow_bloom, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Float](abi)
	abi.free()
	return ret
}

func (self classEnvironment) SetGlowBlendMode(mode EnvironmentGlowBlendMode) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[EnvironmentGlowBlendMode](0, abi, mode)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Environment.set_glow_blend_mode, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classEnvironment) GetGlowBlendMode() EnvironmentGlowBlendMode {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Environment.get_glow_blend_mode, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[EnvironmentGlowBlendMode](abi)
	abi.free()
	return ret
}

func (self classEnvironment) SetGlowHdrBleedThreshold(threshold Float) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Float](0, abi, threshold)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Environment.set_glow_hdr_bleed_threshold, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classEnvironment) GetGlowHdrBleedThreshold() Float {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Environment.get_glow_hdr_bleed_threshold, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Float](abi)
	abi.free()
	return ret
}

func (self classEnvironment) SetGlowHdrBleedScale(scale Float) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Float](0, abi, scale)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Environment.set_glow_hdr_bleed_scale, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classEnvironment) GetGlowHdrBleedScale() Float {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Environment.get_glow_hdr_bleed_scale, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Float](abi)
	abi.free()
	return ret
}

func (self classEnvironment) SetGlowHdrLuminanceCap(amount Float) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Float](0, abi, amount)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Environment.set_glow_hdr_luminance_cap, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classEnvironment) GetGlowHdrLuminanceCap() Float {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Environment.get_glow_hdr_luminance_cap, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Float](abi)
	abi.free()
	return ret
}

func (self classEnvironment) SetGlowMapStrength(strength Float) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Float](0, abi, strength)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Environment.set_glow_map_strength, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classEnvironment) GetGlowMapStrength() Float {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Environment.get_glow_map_strength, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Float](abi)
	abi.free()
	return ret
}

func (self classEnvironment) SetGlowMap(mode Texture) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Texture](0, abi, mode)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Environment.set_glow_map, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classEnvironment) GetGlowMap() Texture {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Environment.get_glow_map, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Texture](abi)
	abi.free()
	return ret
}

func (self classEnvironment) SetFogEnabled(enabled bool) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[bool](0, abi, enabled)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Environment.set_fog_enabled, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classEnvironment) IsFogEnabled() bool {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Environment.is_fog_enabled, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self classEnvironment) SetFogLightColor(light_color Color) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Color](0, abi, light_color)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Environment.set_fog_light_color, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classEnvironment) GetFogLightColor() Color {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Environment.get_fog_light_color, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Color](abi)
	abi.free()
	return ret
}

func (self classEnvironment) SetFogLightEnergy(light_energy Float) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Float](0, abi, light_energy)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Environment.set_fog_light_energy, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classEnvironment) GetFogLightEnergy() Float {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Environment.get_fog_light_energy, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Float](abi)
	abi.free()
	return ret
}

func (self classEnvironment) SetFogSunScatter(sun_scatter Float) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Float](0, abi, sun_scatter)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Environment.set_fog_sun_scatter, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classEnvironment) GetFogSunScatter() Float {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Environment.get_fog_sun_scatter, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Float](abi)
	abi.free()
	return ret
}

func (self classEnvironment) SetFogDensity(density Float) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Float](0, abi, density)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Environment.set_fog_density, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classEnvironment) GetFogDensity() Float {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Environment.get_fog_density, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Float](abi)
	abi.free()
	return ret
}

func (self classEnvironment) SetFogHeight(height Float) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Float](0, abi, height)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Environment.set_fog_height, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classEnvironment) GetFogHeight() Float {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Environment.get_fog_height, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Float](abi)
	abi.free()
	return ret
}

func (self classEnvironment) SetFogHeightDensity(height_density Float) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Float](0, abi, height_density)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Environment.set_fog_height_density, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classEnvironment) GetFogHeightDensity() Float {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Environment.get_fog_height_density, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Float](abi)
	abi.free()
	return ret
}

func (self classEnvironment) SetFogAerialPerspective(aerial_perspective Float) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Float](0, abi, aerial_perspective)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Environment.set_fog_aerial_perspective, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classEnvironment) GetFogAerialPerspective() Float {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Environment.get_fog_aerial_perspective, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Float](abi)
	abi.free()
	return ret
}

func (self classEnvironment) SetFogSkyAffect(sky_affect Float) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Float](0, abi, sky_affect)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Environment.set_fog_sky_affect, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classEnvironment) GetFogSkyAffect() Float {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Environment.get_fog_sky_affect, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Float](abi)
	abi.free()
	return ret
}

func (self classEnvironment) SetVolumetricFogEnabled(enabled bool) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[bool](0, abi, enabled)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Environment.set_volumetric_fog_enabled, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classEnvironment) IsVolumetricFogEnabled() bool {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Environment.is_volumetric_fog_enabled, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self classEnvironment) SetVolumetricFogEmission(color Color) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Color](0, abi, color)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Environment.set_volumetric_fog_emission, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classEnvironment) GetVolumetricFogEmission() Color {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Environment.get_volumetric_fog_emission, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Color](abi)
	abi.free()
	return ret
}

func (self classEnvironment) SetVolumetricFogAlbedo(color Color) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Color](0, abi, color)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Environment.set_volumetric_fog_albedo, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classEnvironment) GetVolumetricFogAlbedo() Color {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Environment.get_volumetric_fog_albedo, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Color](abi)
	abi.free()
	return ret
}

func (self classEnvironment) SetVolumetricFogDensity(density Float) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Float](0, abi, density)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Environment.set_volumetric_fog_density, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classEnvironment) GetVolumetricFogDensity() Float {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Environment.get_volumetric_fog_density, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Float](abi)
	abi.free()
	return ret
}

func (self classEnvironment) SetVolumetricFogEmissionEnergy(begin Float) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Float](0, abi, begin)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Environment.set_volumetric_fog_emission_energy, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classEnvironment) GetVolumetricFogEmissionEnergy() Float {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Environment.get_volumetric_fog_emission_energy, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Float](abi)
	abi.free()
	return ret
}

func (self classEnvironment) SetVolumetricFogAnisotropy(anisotropy Float) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Float](0, abi, anisotropy)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Environment.set_volumetric_fog_anisotropy, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classEnvironment) GetVolumetricFogAnisotropy() Float {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Environment.get_volumetric_fog_anisotropy, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Float](abi)
	abi.free()
	return ret
}

func (self classEnvironment) SetVolumetricFogLength(length Float) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Float](0, abi, length)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Environment.set_volumetric_fog_length, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classEnvironment) GetVolumetricFogLength() Float {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Environment.get_volumetric_fog_length, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Float](abi)
	abi.free()
	return ret
}

func (self classEnvironment) SetVolumetricFogDetailSpread(detail_spread Float) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Float](0, abi, detail_spread)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Environment.set_volumetric_fog_detail_spread, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classEnvironment) GetVolumetricFogDetailSpread() Float {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Environment.get_volumetric_fog_detail_spread, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Float](abi)
	abi.free()
	return ret
}

func (self classEnvironment) SetVolumetricFogGiInject(gi_inject Float) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Float](0, abi, gi_inject)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Environment.set_volumetric_fog_gi_inject, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classEnvironment) GetVolumetricFogGiInject() Float {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Environment.get_volumetric_fog_gi_inject, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Float](abi)
	abi.free()
	return ret
}

func (self classEnvironment) SetVolumetricFogAmbientInject(enabled Float) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Float](0, abi, enabled)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Environment.set_volumetric_fog_ambient_inject, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classEnvironment) GetVolumetricFogAmbientInject() Float {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Environment.get_volumetric_fog_ambient_inject, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Float](abi)
	abi.free()
	return ret
}

func (self classEnvironment) SetVolumetricFogSkyAffect(sky_affect Float) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Float](0, abi, sky_affect)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Environment.set_volumetric_fog_sky_affect, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classEnvironment) GetVolumetricFogSkyAffect() Float {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Environment.get_volumetric_fog_sky_affect, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Float](abi)
	abi.free()
	return ret
}

func (self classEnvironment) SetVolumetricFogTemporalReprojectionEnabled(enabled bool) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[bool](0, abi, enabled)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Environment.set_volumetric_fog_temporal_reprojection_enabled, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classEnvironment) IsVolumetricFogTemporalReprojectionEnabled() bool {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Environment.is_volumetric_fog_temporal_reprojection_enabled, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self classEnvironment) SetVolumetricFogTemporalReprojectionAmount(temporal_reprojection_amount Float) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Float](0, abi, temporal_reprojection_amount)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Environment.set_volumetric_fog_temporal_reprojection_amount, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classEnvironment) GetVolumetricFogTemporalReprojectionAmount() Float {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Environment.get_volumetric_fog_temporal_reprojection_amount, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Float](abi)
	abi.free()
	return ret
}

func (self classEnvironment) SetAdjustmentEnabled(enabled bool) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[bool](0, abi, enabled)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Environment.set_adjustment_enabled, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classEnvironment) IsAdjustmentEnabled() bool {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Environment.is_adjustment_enabled, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self classEnvironment) SetAdjustmentBrightness(brightness Float) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Float](0, abi, brightness)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Environment.set_adjustment_brightness, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classEnvironment) GetAdjustmentBrightness() Float {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Environment.get_adjustment_brightness, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Float](abi)
	abi.free()
	return ret
}

func (self classEnvironment) SetAdjustmentContrast(contrast Float) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Float](0, abi, contrast)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Environment.set_adjustment_contrast, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classEnvironment) GetAdjustmentContrast() Float {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Environment.get_adjustment_contrast, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Float](abi)
	abi.free()
	return ret
}

func (self classEnvironment) SetAdjustmentSaturation(saturation Float) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Float](0, abi, saturation)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Environment.set_adjustment_saturation, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classEnvironment) GetAdjustmentSaturation() Float {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Environment.get_adjustment_saturation, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Float](abi)
	abi.free()
	return ret
}

func (self classEnvironment) SetAdjustmentColorCorrection(color_correction Texture) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Texture](0, abi, color_correction)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Environment.set_adjustment_color_correction, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classEnvironment) GetAdjustmentColorCorrection() Texture {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Environment.get_adjustment_color_correction, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Texture](abi)
	abi.free()
	return ret
}

func (self classEnvironment) virtual(name string) reflect.Value {
	switch name {
	default:
		return self.Super().virtual(name)
	}
}

type classFileAccess struct {
	Class[classFileAccess, RefCounted]
}

func (self classFileAccess) RefCounted() RefCounted { return *self.Super() }

func (self classFileAccess) Object() Object { return *self.Super().Super() }

func (self classFileAccess) Open(path String, flags FileAccessModeFlags) FileAccess {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[String](0, abi, path)
	frameSet[FileAccessModeFlags](1, abi, flags)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.FileAccess.open, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[FileAccess](abi)
	abi.free()
	return ret
}

func (self classFileAccess) OpenEncrypted(path String, mode_flags FileAccessModeFlags, key PackedByteArray) FileAccess {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[String](0, abi, path)
	frameSet[FileAccessModeFlags](1, abi, mode_flags)
	frameSet[PackedByteArray](2, abi, key)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.FileAccess.open_encrypted, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[FileAccess](abi)
	abi.free()
	return ret
}

func (self classFileAccess) OpenEncryptedWithPass(path String, mode_flags FileAccessModeFlags, pass String) FileAccess {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[String](0, abi, path)
	frameSet[FileAccessModeFlags](1, abi, mode_flags)
	frameSet[String](2, abi, pass)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.FileAccess.open_encrypted_with_pass, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[FileAccess](abi)
	abi.free()
	return ret
}

func (self classFileAccess) OpenCompressed(path String, mode_flags FileAccessModeFlags, compression_mode FileAccessCompressionMode) FileAccess {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[String](0, abi, path)
	frameSet[FileAccessModeFlags](1, abi, mode_flags)
	frameSet[FileAccessCompressionMode](2, abi, compression_mode)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.FileAccess.open_compressed, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[FileAccess](abi)
	abi.free()
	return ret
}

func (self classFileAccess) GetOpenError() int64 {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.FileAccess.get_open_error, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[int64](abi)
	abi.free()
	return ret
}

func (self classFileAccess) GetFileAsBytes(ctx Context, path String) PackedByteArray {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[String](0, abi, path)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.FileAccess.get_file_as_bytes, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[[2]uintptr](abi)
	abi.free()
	return mmm.Make[API, PackedByteArray, [2]uintptr](ctx, selfPtr.API, ret)
}

func (self classFileAccess) GetFileAsString(ctx Context, path String) String {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[String](0, abi, path)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.FileAccess.get_file_as_string, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[uintptr](abi)
	abi.free()
	return mmm.Make[API, String, uintptr](ctx, selfPtr.API, ret)
}

func (self classFileAccess) Flush() {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.FileAccess.flush, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classFileAccess) GetPath(ctx Context) String {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.FileAccess.get_path, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[uintptr](abi)
	abi.free()
	return mmm.Make[API, String, uintptr](ctx, selfPtr.API, ret)
}

func (self classFileAccess) GetPathAbsolute(ctx Context) String {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.FileAccess.get_path_absolute, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[uintptr](abi)
	abi.free()
	return mmm.Make[API, String, uintptr](ctx, selfPtr.API, ret)
}

func (self classFileAccess) IsOpen() bool {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.FileAccess.is_open, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self classFileAccess) SeekTo(position Int) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Int](0, abi, position)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.FileAccess.seek, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classFileAccess) SeekEnd(position Int) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Int](0, abi, position)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.FileAccess.seek_end, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classFileAccess) GetPosition() Int {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.FileAccess.get_position, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Int](abi)
	abi.free()
	return ret
}

func (self classFileAccess) GetLength() Int {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.FileAccess.get_length, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Int](abi)
	abi.free()
	return ret
}

func (self classFileAccess) EofReached() bool {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.FileAccess.eof_reached, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self classFileAccess) Get8() Int {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.FileAccess.get_8, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Int](abi)
	abi.free()
	return ret
}

func (self classFileAccess) Get16() Int {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.FileAccess.get_16, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Int](abi)
	abi.free()
	return ret
}

func (self classFileAccess) Get32() Int {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.FileAccess.get_32, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Int](abi)
	abi.free()
	return ret
}

func (self classFileAccess) Get64() Int {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.FileAccess.get_64, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Int](abi)
	abi.free()
	return ret
}

func (self classFileAccess) GetFloat() Float {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.FileAccess.get_float, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Float](abi)
	abi.free()
	return ret
}

func (self classFileAccess) GetDouble() Float {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.FileAccess.get_double, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Float](abi)
	abi.free()
	return ret
}

func (self classFileAccess) GetReal() Float {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.FileAccess.get_real, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Float](abi)
	abi.free()
	return ret
}

func (self classFileAccess) GetBuffer(ctx Context, length Int) PackedByteArray {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Int](0, abi, length)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.FileAccess.get_buffer, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[[2]uintptr](abi)
	abi.free()
	return mmm.Make[API, PackedByteArray, [2]uintptr](ctx, selfPtr.API, ret)
}

func (self classFileAccess) GetLine(ctx Context) String {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.FileAccess.get_line, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[uintptr](abi)
	abi.free()
	return mmm.Make[API, String, uintptr](ctx, selfPtr.API, ret)
}

func (self classFileAccess) GetCsvLine(ctx Context, delim String) PackedStringArray {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[String](0, abi, delim)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.FileAccess.get_csv_line, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[[2]uintptr](abi)
	abi.free()
	return mmm.Make[API, PackedStringArray, [2]uintptr](ctx, selfPtr.API, ret)
}

func (self classFileAccess) GetAsText(ctx Context, skip_cr bool) String {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[bool](0, abi, skip_cr)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.FileAccess.get_as_text, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[uintptr](abi)
	abi.free()
	return mmm.Make[API, String, uintptr](ctx, selfPtr.API, ret)
}

func (self classFileAccess) GetMd5(ctx Context, path String) String {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[String](0, abi, path)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.FileAccess.get_md5, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[uintptr](abi)
	abi.free()
	return mmm.Make[API, String, uintptr](ctx, selfPtr.API, ret)
}

func (self classFileAccess) GetSha256(ctx Context, path String) String {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[String](0, abi, path)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.FileAccess.get_sha256, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[uintptr](abi)
	abi.free()
	return mmm.Make[API, String, uintptr](ctx, selfPtr.API, ret)
}

func (self classFileAccess) IsBigEndian() bool {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.FileAccess.is_big_endian, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self classFileAccess) SetBigEndian(big_endian bool) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[bool](0, abi, big_endian)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.FileAccess.set_big_endian, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classFileAccess) GetError() int64 {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.FileAccess.get_error, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[int64](abi)
	abi.free()
	return ret
}

func (self classFileAccess) GetVar(ctx Context, allow_objects bool) Variant {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[bool](0, abi, allow_objects)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.FileAccess.get_var, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[[3]uintptr](abi)
	abi.free()
	return mmm.Make[API, Variant, [3]uintptr](ctx, selfPtr.API, ret)
}

func (self classFileAccess) Store8(value Int) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Int](0, abi, value)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.FileAccess.store_8, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classFileAccess) Store16(value Int) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Int](0, abi, value)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.FileAccess.store_16, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classFileAccess) Store32(value Int) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Int](0, abi, value)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.FileAccess.store_32, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classFileAccess) Store64(value Int) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Int](0, abi, value)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.FileAccess.store_64, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classFileAccess) StoreFloat(value Float) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Float](0, abi, value)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.FileAccess.store_float, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classFileAccess) StoreDouble(value Float) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Float](0, abi, value)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.FileAccess.store_double, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classFileAccess) StoreReal(value Float) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Float](0, abi, value)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.FileAccess.store_real, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classFileAccess) StoreBuffer(buffer PackedByteArray) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[PackedByteArray](0, abi, buffer)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.FileAccess.store_buffer, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classFileAccess) StoreLine(line String) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[String](0, abi, line)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.FileAccess.store_line, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classFileAccess) StoreCsvLine(values PackedStringArray, delim String) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[PackedStringArray](0, abi, values)
	frameSet[String](1, abi, delim)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.FileAccess.store_csv_line, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classFileAccess) StoreString(s String) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[String](0, abi, s)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.FileAccess.store_string, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classFileAccess) StoreVar(value Variant, full_objects bool) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Variant](0, abi, value)
	frameSet[bool](1, abi, full_objects)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.FileAccess.store_var, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classFileAccess) StorePascalString(s String) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[String](0, abi, s)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.FileAccess.store_pascal_string, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classFileAccess) GetPascalString(ctx Context) String {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.FileAccess.get_pascal_string, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[uintptr](abi)
	abi.free()
	return mmm.Make[API, String, uintptr](ctx, selfPtr.API, ret)
}

func (self classFileAccess) Close() {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.FileAccess.close, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classFileAccess) FileExists(path String) bool {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[String](0, abi, path)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.FileAccess.file_exists, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self classFileAccess) GetModifiedTime(file String) Int {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[String](0, abi, file)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.FileAccess.get_modified_time, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Int](abi)
	abi.free()
	return ret
}

func (self classFileAccess) GetUnixPermissions(file String) FileAccessUnixPermissionFlags {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[String](0, abi, file)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.FileAccess.get_unix_permissions, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[FileAccessUnixPermissionFlags](abi)
	abi.free()
	return ret
}

func (self classFileAccess) SetUnixPermissions(file String, permissions FileAccessUnixPermissionFlags) int64 {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[String](0, abi, file)
	frameSet[FileAccessUnixPermissionFlags](1, abi, permissions)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.FileAccess.set_unix_permissions, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[int64](abi)
	abi.free()
	return ret
}

func (self classFileAccess) GetHiddenAttribute(file String) bool {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[String](0, abi, file)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.FileAccess.get_hidden_attribute, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self classFileAccess) SetHiddenAttribute(file String, hidden bool) int64 {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[String](0, abi, file)
	frameSet[bool](1, abi, hidden)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.FileAccess.set_hidden_attribute, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[int64](abi)
	abi.free()
	return ret
}

func (self classFileAccess) SetReadOnlyAttribute(file String, ro bool) int64 {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[String](0, abi, file)
	frameSet[bool](1, abi, ro)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.FileAccess.set_read_only_attribute, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[int64](abi)
	abi.free()
	return ret
}

func (self classFileAccess) GetReadOnlyAttribute(file String) bool {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[String](0, abi, file)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.FileAccess.get_read_only_attribute, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self classFileAccess) virtual(name string) reflect.Value {
	switch name {
	default:
		return self.Super().virtual(name)
	}
}

type classFont struct{ Class[classFont, Resource] }

func (self classFont) Resource() Resource { return *self.Super() }

func (self classFont) RefCounted() RefCounted { return *self.Super().Super() }

func (self classFont) Object() Object { return *self.Super().Super().Super() }

func (self classFont) SetFallbacks(fallbacks ArrayOf[Font]) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[ArrayOf[Font]](0, abi, fallbacks)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Font.set_fallbacks, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classFont) GetFallbacks() ArrayOf[Font] {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Font.get_fallbacks, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[ArrayOf[Font]](abi)
	abi.free()
	return ret
}

func (self classFont) FindVariation(variation_coordinates Dictionary, face_index Int, strength Float, transform Transform2D, spacing_top Int, spacing_bottom Int, spacing_space Int, spacing_glyph Int) RID {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Dictionary](0, abi, variation_coordinates)
	frameSet[Int](1, abi, face_index)
	frameSet[Float](2, abi, strength)
	frameSet[Transform2D](3, abi, transform)
	frameSet[Int](4, abi, spacing_top)
	frameSet[Int](5, abi, spacing_bottom)
	frameSet[Int](6, abi, spacing_space)
	frameSet[Int](7, abi, spacing_glyph)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Font.find_variation, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[RID](abi)
	abi.free()
	return ret
}

func (self classFont) GetRids() ArrayOf[RID] {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Font.get_rids, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[ArrayOf[RID]](abi)
	abi.free()
	return ret
}

func (self classFont) GetHeight(font_size Int) Float {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Int](0, abi, font_size)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Font.get_height, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Float](abi)
	abi.free()
	return ret
}

func (self classFont) GetAscent(font_size Int) Float {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Int](0, abi, font_size)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Font.get_ascent, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Float](abi)
	abi.free()
	return ret
}

func (self classFont) GetDescent(font_size Int) Float {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Int](0, abi, font_size)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Font.get_descent, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Float](abi)
	abi.free()
	return ret
}

func (self classFont) GetUnderlinePosition(font_size Int) Float {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Int](0, abi, font_size)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Font.get_underline_position, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Float](abi)
	abi.free()
	return ret
}

func (self classFont) GetUnderlineThickness(font_size Int) Float {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Int](0, abi, font_size)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Font.get_underline_thickness, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Float](abi)
	abi.free()
	return ret
}

func (self classFont) GetFontName(ctx Context) String {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Font.get_font_name, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[uintptr](abi)
	abi.free()
	return mmm.Make[API, String, uintptr](ctx, selfPtr.API, ret)
}

func (self classFont) GetFontStyleName(ctx Context) String {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Font.get_font_style_name, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[uintptr](abi)
	abi.free()
	return mmm.Make[API, String, uintptr](ctx, selfPtr.API, ret)
}

func (self classFont) GetOtNameStrings(ctx Context) Dictionary {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Font.get_ot_name_strings, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[uintptr](abi)
	abi.free()
	return mmm.Make[API, Dictionary, uintptr](ctx, selfPtr.API, ret)
}

func (self classFont) GetFontStyle() TextServerFontStyle {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Font.get_font_style, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[TextServerFontStyle](abi)
	abi.free()
	return ret
}

func (self classFont) GetFontWeight() Int {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Font.get_font_weight, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Int](abi)
	abi.free()
	return ret
}

func (self classFont) GetFontStretch() Int {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Font.get_font_stretch, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Int](abi)
	abi.free()
	return ret
}

func (self classFont) GetSpacing(spacing TextServerSpacingType) Int {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[TextServerSpacingType](0, abi, spacing)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Font.get_spacing, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Int](abi)
	abi.free()
	return ret
}

func (self classFont) GetOpentypeFeatures(ctx Context) Dictionary {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Font.get_opentype_features, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[uintptr](abi)
	abi.free()
	return mmm.Make[API, Dictionary, uintptr](ctx, selfPtr.API, ret)
}

func (self classFont) SetCacheCapacity(single_line Int, multi_line Int) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Int](0, abi, single_line)
	frameSet[Int](1, abi, multi_line)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Font.set_cache_capacity, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classFont) GetStringSize(text String, alignment HorizontalAlignment, width Float, font_size Int, justification_flags TextServerJustificationFlag, direction TextServerDirection, orientation TextServerOrientation) Vector2 {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[String](0, abi, text)
	frameSet[HorizontalAlignment](1, abi, alignment)
	frameSet[Float](2, abi, width)
	frameSet[Int](3, abi, font_size)
	frameSet[TextServerJustificationFlag](4, abi, justification_flags)
	frameSet[TextServerDirection](5, abi, direction)
	frameSet[TextServerOrientation](6, abi, orientation)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Font.get_string_size, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Vector2](abi)
	abi.free()
	return ret
}

func (self classFont) GetMultilineStringSize(text String, alignment HorizontalAlignment, width Float, font_size Int, max_lines Int, brk_flags TextServerLineBreakFlag, justification_flags TextServerJustificationFlag, direction TextServerDirection, orientation TextServerOrientation) Vector2 {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[String](0, abi, text)
	frameSet[HorizontalAlignment](1, abi, alignment)
	frameSet[Float](2, abi, width)
	frameSet[Int](3, abi, font_size)
	frameSet[Int](4, abi, max_lines)
	frameSet[TextServerLineBreakFlag](5, abi, brk_flags)
	frameSet[TextServerJustificationFlag](6, abi, justification_flags)
	frameSet[TextServerDirection](7, abi, direction)
	frameSet[TextServerOrientation](8, abi, orientation)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Font.get_multiline_string_size, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Vector2](abi)
	abi.free()
	return ret
}

func (self classFont) DrawString(canvas_item RID, pos Vector2, text String, alignment HorizontalAlignment, width Float, font_size Int, modulate Color, justification_flags TextServerJustificationFlag, direction TextServerDirection, orientation TextServerOrientation) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, canvas_item)
	frameSet[Vector2](1, abi, pos)
	frameSet[String](2, abi, text)
	frameSet[HorizontalAlignment](3, abi, alignment)
	frameSet[Float](4, abi, width)
	frameSet[Int](5, abi, font_size)
	frameSet[Color](6, abi, modulate)
	frameSet[TextServerJustificationFlag](7, abi, justification_flags)
	frameSet[TextServerDirection](8, abi, direction)
	frameSet[TextServerOrientation](9, abi, orientation)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Font.draw_string, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classFont) DrawMultilineString(canvas_item RID, pos Vector2, text String, alignment HorizontalAlignment, width Float, font_size Int, max_lines Int, modulate Color, brk_flags TextServerLineBreakFlag, justification_flags TextServerJustificationFlag, direction TextServerDirection, orientation TextServerOrientation) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, canvas_item)
	frameSet[Vector2](1, abi, pos)
	frameSet[String](2, abi, text)
	frameSet[HorizontalAlignment](3, abi, alignment)
	frameSet[Float](4, abi, width)
	frameSet[Int](5, abi, font_size)
	frameSet[Int](6, abi, max_lines)
	frameSet[Color](7, abi, modulate)
	frameSet[TextServerLineBreakFlag](8, abi, brk_flags)
	frameSet[TextServerJustificationFlag](9, abi, justification_flags)
	frameSet[TextServerDirection](10, abi, direction)
	frameSet[TextServerOrientation](11, abi, orientation)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Font.draw_multiline_string, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classFont) DrawStringOutline(canvas_item RID, pos Vector2, text String, alignment HorizontalAlignment, width Float, font_size Int, size Int, modulate Color, justification_flags TextServerJustificationFlag, direction TextServerDirection, orientation TextServerOrientation) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, canvas_item)
	frameSet[Vector2](1, abi, pos)
	frameSet[String](2, abi, text)
	frameSet[HorizontalAlignment](3, abi, alignment)
	frameSet[Float](4, abi, width)
	frameSet[Int](5, abi, font_size)
	frameSet[Int](6, abi, size)
	frameSet[Color](7, abi, modulate)
	frameSet[TextServerJustificationFlag](8, abi, justification_flags)
	frameSet[TextServerDirection](9, abi, direction)
	frameSet[TextServerOrientation](10, abi, orientation)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Font.draw_string_outline, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classFont) DrawMultilineStringOutline(canvas_item RID, pos Vector2, text String, alignment HorizontalAlignment, width Float, font_size Int, max_lines Int, size Int, modulate Color, brk_flags TextServerLineBreakFlag, justification_flags TextServerJustificationFlag, direction TextServerDirection, orientation TextServerOrientation) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, canvas_item)
	frameSet[Vector2](1, abi, pos)
	frameSet[String](2, abi, text)
	frameSet[HorizontalAlignment](3, abi, alignment)
	frameSet[Float](4, abi, width)
	frameSet[Int](5, abi, font_size)
	frameSet[Int](6, abi, max_lines)
	frameSet[Int](7, abi, size)
	frameSet[Color](8, abi, modulate)
	frameSet[TextServerLineBreakFlag](9, abi, brk_flags)
	frameSet[TextServerJustificationFlag](10, abi, justification_flags)
	frameSet[TextServerDirection](11, abi, direction)
	frameSet[TextServerOrientation](12, abi, orientation)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Font.draw_multiline_string_outline, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classFont) GetCharSize(char Int, font_size Int) Vector2 {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Int](0, abi, char)
	frameSet[Int](1, abi, font_size)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Font.get_char_size, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Vector2](abi)
	abi.free()
	return ret
}

func (self classFont) DrawChar(canvas_item RID, pos Vector2, char Int, font_size Int, modulate Color) Float {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, canvas_item)
	frameSet[Vector2](1, abi, pos)
	frameSet[Int](2, abi, char)
	frameSet[Int](3, abi, font_size)
	frameSet[Color](4, abi, modulate)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Font.draw_char, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Float](abi)
	abi.free()
	return ret
}

func (self classFont) DrawCharOutline(canvas_item RID, pos Vector2, char Int, font_size Int, size Int, modulate Color) Float {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, canvas_item)
	frameSet[Vector2](1, abi, pos)
	frameSet[Int](2, abi, char)
	frameSet[Int](3, abi, font_size)
	frameSet[Int](4, abi, size)
	frameSet[Color](5, abi, modulate)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Font.draw_char_outline, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Float](abi)
	abi.free()
	return ret
}

func (self classFont) HasChar(char Int) bool {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Int](0, abi, char)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Font.has_char, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self classFont) GetSupportedChars(ctx Context) String {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Font.get_supported_chars, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[uintptr](abi)
	abi.free()
	return mmm.Make[API, String, uintptr](ctx, selfPtr.API, ret)
}

func (self classFont) IsLanguageSupported(language String) bool {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[String](0, abi, language)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Font.is_language_supported, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self classFont) IsScriptSupported(script String) bool {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[String](0, abi, script)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Font.is_script_supported, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self classFont) GetSupportedFeatureList(ctx Context) Dictionary {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Font.get_supported_feature_list, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[uintptr](abi)
	abi.free()
	return mmm.Make[API, Dictionary, uintptr](ctx, selfPtr.API, ret)
}

func (self classFont) GetSupportedVariationList(ctx Context) Dictionary {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Font.get_supported_variation_list, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[uintptr](abi)
	abi.free()
	return mmm.Make[API, Dictionary, uintptr](ctx, selfPtr.API, ret)
}

func (self classFont) GetFaceCount() Int {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Font.get_face_count, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Int](abi)
	abi.free()
	return ret
}

func (self classFont) virtual(name string) reflect.Value {
	switch name {
	default:
		return self.Super().virtual(name)
	}
}

type classGDExtension struct {
	Class[classGDExtension, Resource]
}

func (self classGDExtension) Resource() Resource { return *self.Super() }

func (self classGDExtension) RefCounted() RefCounted { return *self.Super().Super() }

func (self classGDExtension) Object() Object { return *self.Super().Super().Super() }

func (self classGDExtension) OpenLibrary(path String, entry_symbol String) int64 {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[String](0, abi, path)
	frameSet[String](1, abi, entry_symbol)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.GDExtension.open_library, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[int64](abi)
	abi.free()
	return ret
}

func (self classGDExtension) CloseLibrary() {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.GDExtension.close_library, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classGDExtension) IsLibraryOpen() bool {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.GDExtension.is_library_open, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self classGDExtension) GetMinimumLibraryInitializationLevel() ExtensionInitializationLevel {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.GDExtension.get_minimum_library_initialization_level, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[ExtensionInitializationLevel](abi)
	abi.free()
	return ret
}

func (self classGDExtension) InitializeLibrary(level ExtensionInitializationLevel) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[ExtensionInitializationLevel](0, abi, level)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.GDExtension.initialize_library, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classGDExtension) virtual(name string) reflect.Value {
	switch name {
	default:
		return self.Super().virtual(name)
	}
}

type classImage struct{ Class[classImage, Resource] }

func (self classImage) Resource() Resource { return *self.Super() }

func (self classImage) RefCounted() RefCounted { return *self.Super().Super() }

func (self classImage) Object() Object { return *self.Super().Super().Super() }

func (self classImage) GetWidth() Int {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Image.get_width, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Int](abi)
	abi.free()
	return ret
}

func (self classImage) GetHeight() Int {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Image.get_height, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Int](abi)
	abi.free()
	return ret
}

func (self classImage) GetSize() Vector2i {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Image.get_size, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Vector2i](abi)
	abi.free()
	return ret
}

func (self classImage) HasMipmaps() bool {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Image.has_mipmaps, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self classImage) GetFormat() ImageFormat {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Image.get_format, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[ImageFormat](abi)
	abi.free()
	return ret
}

func (self classImage) GetData(ctx Context) PackedByteArray {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Image.get_data, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[[2]uintptr](abi)
	abi.free()
	return mmm.Make[API, PackedByteArray, [2]uintptr](ctx, selfPtr.API, ret)
}

func (self classImage) Convert(format ImageFormat) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[ImageFormat](0, abi, format)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Image.convert, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classImage) GetMipmapCount() Int {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Image.get_mipmap_count, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Int](abi)
	abi.free()
	return ret
}

func (self classImage) GetMipmapOffset(mipmap Int) Int {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Int](0, abi, mipmap)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Image.get_mipmap_offset, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Int](abi)
	abi.free()
	return ret
}

func (self classImage) ResizeToPo2(square bool, interpolation ImageInterpolation) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[bool](0, abi, square)
	frameSet[ImageInterpolation](1, abi, interpolation)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Image.resize_to_po2, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classImage) Resize(width Int, height Int, interpolation ImageInterpolation) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Int](0, abi, width)
	frameSet[Int](1, abi, height)
	frameSet[ImageInterpolation](2, abi, interpolation)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Image.resize, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classImage) ShrinkX2() {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Image.shrink_x2, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classImage) Crop(width Int, height Int) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Int](0, abi, width)
	frameSet[Int](1, abi, height)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Image.crop, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classImage) FlipX() {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Image.flip_x, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classImage) FlipY() {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Image.flip_y, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classImage) GenerateMipmaps(renormalize bool) int64 {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[bool](0, abi, renormalize)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Image.generate_mipmaps, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[int64](abi)
	abi.free()
	return ret
}

func (self classImage) ClearMipmaps() {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Image.clear_mipmaps, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classImage) Create(width Int, height Int, use_mipmaps bool, format ImageFormat) Image {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Int](0, abi, width)
	frameSet[Int](1, abi, height)
	frameSet[bool](2, abi, use_mipmaps)
	frameSet[ImageFormat](3, abi, format)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Image.create, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Image](abi)
	abi.free()
	return ret
}

func (self classImage) CreateFromData(width Int, height Int, use_mipmaps bool, format ImageFormat, data PackedByteArray) Image {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Int](0, abi, width)
	frameSet[Int](1, abi, height)
	frameSet[bool](2, abi, use_mipmaps)
	frameSet[ImageFormat](3, abi, format)
	frameSet[PackedByteArray](4, abi, data)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Image.create_from_data, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Image](abi)
	abi.free()
	return ret
}

func (self classImage) SetData(width Int, height Int, use_mipmaps bool, format ImageFormat, data PackedByteArray) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Int](0, abi, width)
	frameSet[Int](1, abi, height)
	frameSet[bool](2, abi, use_mipmaps)
	frameSet[ImageFormat](3, abi, format)
	frameSet[PackedByteArray](4, abi, data)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Image.set_data, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classImage) IsEmpty() bool {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Image.is_empty, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self classImage) Load(path String) int64 {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[String](0, abi, path)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Image.load, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[int64](abi)
	abi.free()
	return ret
}

func (self classImage) LoadFromFile(path String) Image {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[String](0, abi, path)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Image.load_from_file, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Image](abi)
	abi.free()
	return ret
}

func (self classImage) SavePng(path String) int64 {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[String](0, abi, path)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Image.save_png, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[int64](abi)
	abi.free()
	return ret
}

func (self classImage) SavePngToBuffer(ctx Context) PackedByteArray {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Image.save_png_to_buffer, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[[2]uintptr](abi)
	abi.free()
	return mmm.Make[API, PackedByteArray, [2]uintptr](ctx, selfPtr.API, ret)
}

func (self classImage) SaveJpg(path String, quality Float) int64 {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[String](0, abi, path)
	frameSet[Float](1, abi, quality)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Image.save_jpg, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[int64](abi)
	abi.free()
	return ret
}

func (self classImage) SaveJpgToBuffer(ctx Context, quality Float) PackedByteArray {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Float](0, abi, quality)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Image.save_jpg_to_buffer, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[[2]uintptr](abi)
	abi.free()
	return mmm.Make[API, PackedByteArray, [2]uintptr](ctx, selfPtr.API, ret)
}

func (self classImage) SaveExr(path String, grayscale bool) int64 {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[String](0, abi, path)
	frameSet[bool](1, abi, grayscale)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Image.save_exr, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[int64](abi)
	abi.free()
	return ret
}

func (self classImage) SaveExrToBuffer(ctx Context, grayscale bool) PackedByteArray {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[bool](0, abi, grayscale)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Image.save_exr_to_buffer, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[[2]uintptr](abi)
	abi.free()
	return mmm.Make[API, PackedByteArray, [2]uintptr](ctx, selfPtr.API, ret)
}

func (self classImage) SaveWebp(path String, lossy bool, quality Float) int64 {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[String](0, abi, path)
	frameSet[bool](1, abi, lossy)
	frameSet[Float](2, abi, quality)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Image.save_webp, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[int64](abi)
	abi.free()
	return ret
}

func (self classImage) SaveWebpToBuffer(ctx Context, lossy bool, quality Float) PackedByteArray {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[bool](0, abi, lossy)
	frameSet[Float](1, abi, quality)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Image.save_webp_to_buffer, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[[2]uintptr](abi)
	abi.free()
	return mmm.Make[API, PackedByteArray, [2]uintptr](ctx, selfPtr.API, ret)
}

func (self classImage) DetectAlpha() ImageAlphaMode {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Image.detect_alpha, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[ImageAlphaMode](abi)
	abi.free()
	return ret
}

func (self classImage) IsInvisible() bool {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Image.is_invisible, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self classImage) DetectUsedChannels(source ImageCompressSource) ImageUsedChannels {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[ImageCompressSource](0, abi, source)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Image.detect_used_channels, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[ImageUsedChannels](abi)
	abi.free()
	return ret
}

func (self classImage) Compress(mode ImageCompressMode, source ImageCompressSource, astc_format ImageASTCFormat) int64 {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[ImageCompressMode](0, abi, mode)
	frameSet[ImageCompressSource](1, abi, source)
	frameSet[ImageASTCFormat](2, abi, astc_format)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Image.compress, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[int64](abi)
	abi.free()
	return ret
}

func (self classImage) CompressFromChannels(mode ImageCompressMode, channels ImageUsedChannels, astc_format ImageASTCFormat) int64 {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[ImageCompressMode](0, abi, mode)
	frameSet[ImageUsedChannels](1, abi, channels)
	frameSet[ImageASTCFormat](2, abi, astc_format)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Image.compress_from_channels, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[int64](abi)
	abi.free()
	return ret
}

func (self classImage) Decompress() int64 {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Image.decompress, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[int64](abi)
	abi.free()
	return ret
}

func (self classImage) IsCompressed() bool {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Image.is_compressed, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self classImage) Rotate90(direction ClockDirection) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[ClockDirection](0, abi, direction)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Image.rotate_90, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classImage) Rotate180() {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Image.rotate_180, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classImage) FixAlphaEdges() {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Image.fix_alpha_edges, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classImage) PremultiplyAlpha() {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Image.premultiply_alpha, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classImage) SrgbToLinear() {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Image.srgb_to_linear, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classImage) NormalMapToXy() {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Image.normal_map_to_xy, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classImage) RgbeToSrgb() Image {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Image.rgbe_to_srgb, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Image](abi)
	abi.free()
	return ret
}

func (self classImage) BumpMapToNormalMap(bump_scale Float) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Float](0, abi, bump_scale)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Image.bump_map_to_normal_map, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classImage) ComputeImageMetrics(ctx Context, compared_image Image, use_luma bool) Dictionary {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Image](0, abi, compared_image)
	frameSet[bool](1, abi, use_luma)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Image.compute_image_metrics, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[uintptr](abi)
	abi.free()
	return mmm.Make[API, Dictionary, uintptr](ctx, selfPtr.API, ret)
}

func (self classImage) BlitRect(src Image, src_rect Rect2i, dst Vector2i) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Image](0, abi, src)
	frameSet[Rect2i](1, abi, src_rect)
	frameSet[Vector2i](2, abi, dst)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Image.blit_rect, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classImage) BlitRectMask(src Image, mask Image, src_rect Rect2i, dst Vector2i) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Image](0, abi, src)
	frameSet[Image](1, abi, mask)
	frameSet[Rect2i](2, abi, src_rect)
	frameSet[Vector2i](3, abi, dst)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Image.blit_rect_mask, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classImage) BlendRect(src Image, src_rect Rect2i, dst Vector2i) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Image](0, abi, src)
	frameSet[Rect2i](1, abi, src_rect)
	frameSet[Vector2i](2, abi, dst)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Image.blend_rect, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classImage) BlendRectMask(src Image, mask Image, src_rect Rect2i, dst Vector2i) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Image](0, abi, src)
	frameSet[Image](1, abi, mask)
	frameSet[Rect2i](2, abi, src_rect)
	frameSet[Vector2i](3, abi, dst)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Image.blend_rect_mask, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classImage) Fill(color Color) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Color](0, abi, color)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Image.fill, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classImage) FillRect(rect Rect2i, color Color) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Rect2i](0, abi, rect)
	frameSet[Color](1, abi, color)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Image.fill_rect, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classImage) GetUsedRect() Rect2i {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Image.get_used_rect, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Rect2i](abi)
	abi.free()
	return ret
}

func (self classImage) GetRegion(region Rect2i) Image {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Rect2i](0, abi, region)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Image.get_region, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Image](abi)
	abi.free()
	return ret
}

func (self classImage) CopyFrom(src Image) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Image](0, abi, src)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Image.copy_from, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classImage) GetPixelv(point Vector2i) Color {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Vector2i](0, abi, point)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Image.get_pixelv, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Color](abi)
	abi.free()
	return ret
}

func (self classImage) GetPixel(x Int, y Int) Color {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Int](0, abi, x)
	frameSet[Int](1, abi, y)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Image.get_pixel, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Color](abi)
	abi.free()
	return ret
}

func (self classImage) SetPixelv(point Vector2i, color Color) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Vector2i](0, abi, point)
	frameSet[Color](1, abi, color)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Image.set_pixelv, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classImage) SetPixel(x Int, y Int, color Color) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Int](0, abi, x)
	frameSet[Int](1, abi, y)
	frameSet[Color](2, abi, color)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Image.set_pixel, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classImage) AdjustBcs(brightness Float, contrast Float, saturation Float) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Float](0, abi, brightness)
	frameSet[Float](1, abi, contrast)
	frameSet[Float](2, abi, saturation)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Image.adjust_bcs, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classImage) LoadPngFromBuffer(buffer PackedByteArray) int64 {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[PackedByteArray](0, abi, buffer)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Image.load_png_from_buffer, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[int64](abi)
	abi.free()
	return ret
}

func (self classImage) LoadJpgFromBuffer(buffer PackedByteArray) int64 {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[PackedByteArray](0, abi, buffer)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Image.load_jpg_from_buffer, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[int64](abi)
	abi.free()
	return ret
}

func (self classImage) LoadWebpFromBuffer(buffer PackedByteArray) int64 {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[PackedByteArray](0, abi, buffer)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Image.load_webp_from_buffer, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[int64](abi)
	abi.free()
	return ret
}

func (self classImage) LoadTgaFromBuffer(buffer PackedByteArray) int64 {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[PackedByteArray](0, abi, buffer)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Image.load_tga_from_buffer, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[int64](abi)
	abi.free()
	return ret
}

func (self classImage) LoadBmpFromBuffer(buffer PackedByteArray) int64 {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[PackedByteArray](0, abi, buffer)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Image.load_bmp_from_buffer, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[int64](abi)
	abi.free()
	return ret
}

func (self classImage) LoadKtxFromBuffer(buffer PackedByteArray) int64 {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[PackedByteArray](0, abi, buffer)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Image.load_ktx_from_buffer, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[int64](abi)
	abi.free()
	return ret
}

func (self classImage) LoadSvgFromBuffer(buffer PackedByteArray, scale Float) int64 {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[PackedByteArray](0, abi, buffer)
	frameSet[Float](1, abi, scale)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Image.load_svg_from_buffer, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[int64](abi)
	abi.free()
	return ret
}

func (self classImage) LoadSvgFromString(svg_str String, scale Float) int64 {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[String](0, abi, svg_str)
	frameSet[Float](1, abi, scale)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Image.load_svg_from_string, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[int64](abi)
	abi.free()
	return ret
}

func (self classImage) virtual(name string) reflect.Value {
	switch name {
	default:
		return self.Super().virtual(name)
	}
}

type classInputEvent struct {
	Class[classInputEvent, Resource]
}

func (self classInputEvent) Resource() Resource { return *self.Super() }

func (self classInputEvent) RefCounted() RefCounted { return *self.Super().Super() }

func (self classInputEvent) Object() Object { return *self.Super().Super().Super() }

func (self classInputEvent) SetDevice(device Int) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Int](0, abi, device)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.InputEvent.set_device, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classInputEvent) GetDevice() Int {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.InputEvent.get_device, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Int](abi)
	abi.free()
	return ret
}

func (self classInputEvent) IsAction(action StringName, exact_match bool) bool {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[StringName](0, abi, action)
	frameSet[bool](1, abi, exact_match)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.InputEvent.is_action, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self classInputEvent) IsActionPressed(action StringName, allow_echo bool, exact_match bool) bool {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[StringName](0, abi, action)
	frameSet[bool](1, abi, allow_echo)
	frameSet[bool](2, abi, exact_match)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.InputEvent.is_action_pressed, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self classInputEvent) IsActionReleased(action StringName, exact_match bool) bool {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[StringName](0, abi, action)
	frameSet[bool](1, abi, exact_match)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.InputEvent.is_action_released, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self classInputEvent) GetActionStrength(action StringName, exact_match bool) Float {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[StringName](0, abi, action)
	frameSet[bool](1, abi, exact_match)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.InputEvent.get_action_strength, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Float](abi)
	abi.free()
	return ret
}

func (self classInputEvent) IsCanceled() bool {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.InputEvent.is_canceled, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self classInputEvent) IsPressed() bool {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.InputEvent.is_pressed, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self classInputEvent) IsReleased() bool {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.InputEvent.is_released, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self classInputEvent) IsEcho() bool {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.InputEvent.is_echo, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self classInputEvent) AsText(ctx Context) String {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.InputEvent.as_text, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[uintptr](abi)
	abi.free()
	return mmm.Make[API, String, uintptr](ctx, selfPtr.API, ret)
}

func (self classInputEvent) IsMatch(event InputEvent, exact_match bool) bool {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[InputEvent](0, abi, event)
	frameSet[bool](1, abi, exact_match)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.InputEvent.is_match, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self classInputEvent) IsActionType() bool {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.InputEvent.is_action_type, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self classInputEvent) Accumulate(with_event InputEvent) bool {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[InputEvent](0, abi, with_event)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.InputEvent.accumulate, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self classInputEvent) XformedBy(xform Transform2D, local_ofs Vector2) InputEvent {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Transform2D](0, abi, xform)
	frameSet[Vector2](1, abi, local_ofs)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.InputEvent.xformed_by, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[InputEvent](abi)
	abi.free()
	return ret
}

func (self classInputEvent) virtual(name string) reflect.Value {
	switch name {
	default:
		return self.Super().virtual(name)
	}
}

type classIntervalTweener struct {
	Class[classIntervalTweener, Tweener]
}

func (self classIntervalTweener) Tweener() Tweener { return *self.Super() }

func (self classIntervalTweener) RefCounted() RefCounted { return *self.Super().Super() }

func (self classIntervalTweener) Object() Object { return *self.Super().Super().Super() }

func (self classIntervalTweener) virtual(name string) reflect.Value {
	switch name {
	default:
		return self.Super().virtual(name)
	}
}

type classMainLoop struct{ Class[classMainLoop, Object] }

func (self classMainLoop) Object() Object { return *self.Super() }

func (classMainLoop) _initialize(impl func(ptr unsafe.Pointer, ctx Context), api *API) (cb ExtensionClassCallVirtualFunc) {
	cb.Set(func(class cgo.Handle, p_args godotArgs, p_back godotBack) {
		ctx := newContext(api)
		self := reflect.ValueOf(class.Value()).UnsafePointer()
		impl(self, ctx)
		ctx.Free()
	})
	return
}

func (classMainLoop) _physics_process(impl func(ptr unsafe.Pointer, ctx Context, delta Float) bool, api *API) (cb ExtensionClassCallVirtualFunc) {
	cb.Set(func(class cgo.Handle, p_args godotArgs, p_back godotBack) {
		ctx := newContext(api)
		var delta = godotGet[Float](p_args, 0)
		self := reflect.ValueOf(class.Value()).UnsafePointer()
		ret := impl(self, ctx, delta)
		ctx.Free()
		godotSet[bool](p_back, ret)
	})
	return
}

func (classMainLoop) _process(impl func(ptr unsafe.Pointer, ctx Context, delta Float) bool, api *API) (cb ExtensionClassCallVirtualFunc) {
	cb.Set(func(class cgo.Handle, p_args godotArgs, p_back godotBack) {
		ctx := newContext(api)
		var delta = godotGet[Float](p_args, 0)
		self := reflect.ValueOf(class.Value()).UnsafePointer()
		ret := impl(self, ctx, delta)
		ctx.Free()
		godotSet[bool](p_back, ret)
	})
	return
}

func (classMainLoop) _finalize(impl func(ptr unsafe.Pointer, ctx Context), api *API) (cb ExtensionClassCallVirtualFunc) {
	cb.Set(func(class cgo.Handle, p_args godotArgs, p_back godotBack) {
		ctx := newContext(api)
		self := reflect.ValueOf(class.Value()).UnsafePointer()
		impl(self, ctx)
		ctx.Free()
	})
	return
}

func (self classMainLoop) virtual(name string) reflect.Value {
	switch name {
	case "_initialize":
		return reflect.ValueOf(self._initialize)
	case "_physics_process":
		return reflect.ValueOf(self._physics_process)
	case "_process":
		return reflect.ValueOf(self._process)
	case "_finalize":
		return reflect.ValueOf(self._finalize)
	default:
		return self.Super().virtual(name)
	}
}

type classMaterial struct{ Class[classMaterial, Resource] }

func (self classMaterial) Resource() Resource { return *self.Super() }

func (self classMaterial) RefCounted() RefCounted { return *self.Super().Super() }

func (self classMaterial) Object() Object { return *self.Super().Super().Super() }

func (classMaterial) _get_shader_rid(impl func(ptr unsafe.Pointer, ctx Context) RID, api *API) (cb ExtensionClassCallVirtualFunc) {
	cb.Set(func(class cgo.Handle, p_args godotArgs, p_back godotBack) {
		ctx := newContext(api)
		self := reflect.ValueOf(class.Value()).UnsafePointer()
		ret := impl(self, ctx)
		ctx.Free()
		godotSet[RID](p_back, ret)
	})
	return
}

func (classMaterial) _get_shader_mode(impl func(ptr unsafe.Pointer, ctx Context) ShaderMode, api *API) (cb ExtensionClassCallVirtualFunc) {
	cb.Set(func(class cgo.Handle, p_args godotArgs, p_back godotBack) {
		ctx := newContext(api)
		self := reflect.ValueOf(class.Value()).UnsafePointer()
		ret := impl(self, ctx)
		ctx.Free()
		godotSet[ShaderMode](p_back, ret)
	})
	return
}

func (classMaterial) _can_do_next_pass(impl func(ptr unsafe.Pointer, ctx Context) bool, api *API) (cb ExtensionClassCallVirtualFunc) {
	cb.Set(func(class cgo.Handle, p_args godotArgs, p_back godotBack) {
		ctx := newContext(api)
		self := reflect.ValueOf(class.Value()).UnsafePointer()
		ret := impl(self, ctx)
		ctx.Free()
		godotSet[bool](p_back, ret)
	})
	return
}

func (classMaterial) _can_use_render_priority(impl func(ptr unsafe.Pointer, ctx Context) bool, api *API) (cb ExtensionClassCallVirtualFunc) {
	cb.Set(func(class cgo.Handle, p_args godotArgs, p_back godotBack) {
		ctx := newContext(api)
		self := reflect.ValueOf(class.Value()).UnsafePointer()
		ret := impl(self, ctx)
		ctx.Free()
		godotSet[bool](p_back, ret)
	})
	return
}

func (self classMaterial) SetNextPass(next_pass Material) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Material](0, abi, next_pass)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Material.set_next_pass, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classMaterial) GetNextPass() Material {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Material.get_next_pass, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Material](abi)
	abi.free()
	return ret
}

func (self classMaterial) SetRenderPriority(priority Int) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Int](0, abi, priority)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Material.set_render_priority, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classMaterial) GetRenderPriority() Int {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Material.get_render_priority, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Int](abi)
	abi.free()
	return ret
}

func (self classMaterial) InspectNativeShaderCode() {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Material.inspect_native_shader_code, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classMaterial) CreatePlaceholder() Resource {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Material.create_placeholder, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Resource](abi)
	abi.free()
	return ret
}

func (self classMaterial) virtual(name string) reflect.Value {
	switch name {
	case "_get_shader_rid":
		return reflect.ValueOf(self._get_shader_rid)
	case "_get_shader_mode":
		return reflect.ValueOf(self._get_shader_mode)
	case "_can_do_next_pass":
		return reflect.ValueOf(self._can_do_next_pass)
	case "_can_use_render_priority":
		return reflect.ValueOf(self._can_use_render_priority)
	default:
		return self.Super().virtual(name)
	}
}

type classMesh struct{ Class[classMesh, Resource] }

func (self classMesh) Resource() Resource { return *self.Super() }

func (self classMesh) RefCounted() RefCounted { return *self.Super().Super() }

func (self classMesh) Object() Object { return *self.Super().Super().Super() }

func (classMesh) _get_surface_count(impl func(ptr unsafe.Pointer, ctx Context) Int, api *API) (cb ExtensionClassCallVirtualFunc) {
	cb.Set(func(class cgo.Handle, p_args godotArgs, p_back godotBack) {
		ctx := newContext(api)
		self := reflect.ValueOf(class.Value()).UnsafePointer()
		ret := impl(self, ctx)
		ctx.Free()
		godotSet[Int](p_back, ret)
	})
	return
}

func (classMesh) _surface_get_array_len(impl func(ptr unsafe.Pointer, ctx Context, index Int) Int, api *API) (cb ExtensionClassCallVirtualFunc) {
	cb.Set(func(class cgo.Handle, p_args godotArgs, p_back godotBack) {
		ctx := newContext(api)
		var index = godotGet[Int](p_args, 0)
		self := reflect.ValueOf(class.Value()).UnsafePointer()
		ret := impl(self, ctx, index)
		ctx.Free()
		godotSet[Int](p_back, ret)
	})
	return
}

func (classMesh) _surface_get_array_index_len(impl func(ptr unsafe.Pointer, ctx Context, index Int) Int, api *API) (cb ExtensionClassCallVirtualFunc) {
	cb.Set(func(class cgo.Handle, p_args godotArgs, p_back godotBack) {
		ctx := newContext(api)
		var index = godotGet[Int](p_args, 0)
		self := reflect.ValueOf(class.Value()).UnsafePointer()
		ret := impl(self, ctx, index)
		ctx.Free()
		godotSet[Int](p_back, ret)
	})
	return
}

func (classMesh) _surface_get_arrays(impl func(ptr unsafe.Pointer, ctx Context, index Int) Array, api *API) (cb ExtensionClassCallVirtualFunc) {
	cb.Set(func(class cgo.Handle, p_args godotArgs, p_back godotBack) {
		ctx := newContext(api)
		var index = godotGet[Int](p_args, 0)
		self := reflect.ValueOf(class.Value()).UnsafePointer()
		ret := impl(self, ctx, index)
		mmm.MarkFree(ret)
		ctx.Free()
		godotSet[Array](p_back, ret)
	})
	return
}

func (classMesh) _surface_get_blend_shape_arrays(impl func(ptr unsafe.Pointer, ctx Context, index Int) ArrayOf[Array], api *API) (cb ExtensionClassCallVirtualFunc) {
	cb.Set(func(class cgo.Handle, p_args godotArgs, p_back godotBack) {
		ctx := newContext(api)
		var index = godotGet[Int](p_args, 0)
		self := reflect.ValueOf(class.Value()).UnsafePointer()
		ret := impl(self, ctx, index)
		ctx.Free()
		godotSet[ArrayOf[Array]](p_back, ret)
	})
	return
}

func (classMesh) _surface_get_lods(impl func(ptr unsafe.Pointer, ctx Context, index Int) Dictionary, api *API) (cb ExtensionClassCallVirtualFunc) {
	cb.Set(func(class cgo.Handle, p_args godotArgs, p_back godotBack) {
		ctx := newContext(api)
		var index = godotGet[Int](p_args, 0)
		self := reflect.ValueOf(class.Value()).UnsafePointer()
		ret := impl(self, ctx, index)
		mmm.MarkFree(ret)
		ctx.Free()
		godotSet[Dictionary](p_back, ret)
	})
	return
}

func (classMesh) _surface_get_format(impl func(ptr unsafe.Pointer, ctx Context, index Int) Int, api *API) (cb ExtensionClassCallVirtualFunc) {
	cb.Set(func(class cgo.Handle, p_args godotArgs, p_back godotBack) {
		ctx := newContext(api)
		var index = godotGet[Int](p_args, 0)
		self := reflect.ValueOf(class.Value()).UnsafePointer()
		ret := impl(self, ctx, index)
		ctx.Free()
		godotSet[Int](p_back, ret)
	})
	return
}

func (classMesh) _surface_get_primitive_type(impl func(ptr unsafe.Pointer, ctx Context, index Int) Int, api *API) (cb ExtensionClassCallVirtualFunc) {
	cb.Set(func(class cgo.Handle, p_args godotArgs, p_back godotBack) {
		ctx := newContext(api)
		var index = godotGet[Int](p_args, 0)
		self := reflect.ValueOf(class.Value()).UnsafePointer()
		ret := impl(self, ctx, index)
		ctx.Free()
		godotSet[Int](p_back, ret)
	})
	return
}

func (classMesh) _surface_set_material(impl func(ptr unsafe.Pointer, ctx Context, index Int, material Material), api *API) (cb ExtensionClassCallVirtualFunc) {
	cb.Set(func(class cgo.Handle, p_args godotArgs, p_back godotBack) {
		ctx := newContext(api)
		var index = godotGet[Int](p_args, 0)
		var material = godotGet[Material](p_args, 1)
		self := reflect.ValueOf(class.Value()).UnsafePointer()
		impl(self, ctx, index, material)
		ctx.Free()
	})
	return
}

func (classMesh) _surface_get_material(impl func(ptr unsafe.Pointer, ctx Context, index Int) Material, api *API) (cb ExtensionClassCallVirtualFunc) {
	cb.Set(func(class cgo.Handle, p_args godotArgs, p_back godotBack) {
		ctx := newContext(api)
		var index = godotGet[Int](p_args, 0)
		self := reflect.ValueOf(class.Value()).UnsafePointer()
		ret := impl(self, ctx, index)
		ctx.Free()
		godotSet[Material](p_back, ret)
	})
	return
}

func (classMesh) _get_blend_shape_count(impl func(ptr unsafe.Pointer, ctx Context) Int, api *API) (cb ExtensionClassCallVirtualFunc) {
	cb.Set(func(class cgo.Handle, p_args godotArgs, p_back godotBack) {
		ctx := newContext(api)
		self := reflect.ValueOf(class.Value()).UnsafePointer()
		ret := impl(self, ctx)
		ctx.Free()
		godotSet[Int](p_back, ret)
	})
	return
}

func (classMesh) _get_blend_shape_name(impl func(ptr unsafe.Pointer, ctx Context, index Int) StringName, api *API) (cb ExtensionClassCallVirtualFunc) {
	cb.Set(func(class cgo.Handle, p_args godotArgs, p_back godotBack) {
		ctx := newContext(api)
		var index = godotGet[Int](p_args, 0)
		self := reflect.ValueOf(class.Value()).UnsafePointer()
		ret := impl(self, ctx, index)
		mmm.MarkFree(ret)
		ctx.Free()
		godotSet[StringName](p_back, ret)
	})
	return
}

func (classMesh) _set_blend_shape_name(impl func(ptr unsafe.Pointer, ctx Context, index Int, name StringName), api *API) (cb ExtensionClassCallVirtualFunc) {
	cb.Set(func(class cgo.Handle, p_args godotArgs, p_back godotBack) {
		ctx := newContext(api)
		var index = godotGet[Int](p_args, 0)
		var name = godotGet[StringName](p_args, 1)
		self := reflect.ValueOf(class.Value()).UnsafePointer()
		impl(self, ctx, index, name)
		ctx.Free()
	})
	return
}

func (classMesh) _get_aabb(impl func(ptr unsafe.Pointer, ctx Context) AABB, api *API) (cb ExtensionClassCallVirtualFunc) {
	cb.Set(func(class cgo.Handle, p_args godotArgs, p_back godotBack) {
		ctx := newContext(api)
		self := reflect.ValueOf(class.Value()).UnsafePointer()
		ret := impl(self, ctx)
		ctx.Free()
		godotSet[AABB](p_back, ret)
	})
	return
}

func (self classMesh) SetLightmapSizeHint(size Vector2i) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Vector2i](0, abi, size)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Mesh.set_lightmap_size_hint, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classMesh) GetLightmapSizeHint() Vector2i {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Mesh.get_lightmap_size_hint, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Vector2i](abi)
	abi.free()
	return ret
}

func (self classMesh) GetAabb() AABB {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Mesh.get_aabb, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[AABB](abi)
	abi.free()
	return ret
}

func (self classMesh) GetFaces(ctx Context) PackedVector3Array {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Mesh.get_faces, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[[2]uintptr](abi)
	abi.free()
	return mmm.Make[API, PackedVector3Array, [2]uintptr](ctx, selfPtr.API, ret)
}

func (self classMesh) GetSurfaceCount() Int {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Mesh.get_surface_count, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Int](abi)
	abi.free()
	return ret
}

func (self classMesh) SurfaceGetArrays(ctx Context, surf_idx Int) Array {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Int](0, abi, surf_idx)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Mesh.surface_get_arrays, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[uintptr](abi)
	abi.free()
	return mmm.Make[API, Array, uintptr](ctx, selfPtr.API, ret)
}

func (self classMesh) SurfaceGetBlendShapeArrays(surf_idx Int) ArrayOf[Array] {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Int](0, abi, surf_idx)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Mesh.surface_get_blend_shape_arrays, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[ArrayOf[Array]](abi)
	abi.free()
	return ret
}

func (self classMesh) SurfaceSetMaterial(surf_idx Int, material Material) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Int](0, abi, surf_idx)
	frameSet[Material](1, abi, material)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Mesh.surface_set_material, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classMesh) SurfaceGetMaterial(surf_idx Int) Material {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Int](0, abi, surf_idx)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Mesh.surface_get_material, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Material](abi)
	abi.free()
	return ret
}

func (self classMesh) CreatePlaceholder() Resource {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Mesh.create_placeholder, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Resource](abi)
	abi.free()
	return ret
}

func (self classMesh) CreateTrimeshShape() ConcavePolygonShape3D {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Mesh.create_trimesh_shape, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[ConcavePolygonShape3D](abi)
	abi.free()
	return ret
}

func (self classMesh) CreateConvexShape(clean bool, simplify bool) ConvexPolygonShape3D {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[bool](0, abi, clean)
	frameSet[bool](1, abi, simplify)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Mesh.create_convex_shape, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[ConvexPolygonShape3D](abi)
	abi.free()
	return ret
}

func (self classMesh) CreateOutline(margin Float) Mesh {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Float](0, abi, margin)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Mesh.create_outline, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Mesh](abi)
	abi.free()
	return ret
}

func (self classMesh) GenerateTriangleMesh() TriangleMesh {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Mesh.generate_triangle_mesh, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[TriangleMesh](abi)
	abi.free()
	return ret
}

func (self classMesh) virtual(name string) reflect.Value {
	switch name {
	case "_get_surface_count":
		return reflect.ValueOf(self._get_surface_count)
	case "_surface_get_array_len":
		return reflect.ValueOf(self._surface_get_array_len)
	case "_surface_get_array_index_len":
		return reflect.ValueOf(self._surface_get_array_index_len)
	case "_surface_get_arrays":
		return reflect.ValueOf(self._surface_get_arrays)
	case "_surface_get_blend_shape_arrays":
		return reflect.ValueOf(self._surface_get_blend_shape_arrays)
	case "_surface_get_lods":
		return reflect.ValueOf(self._surface_get_lods)
	case "_surface_get_format":
		return reflect.ValueOf(self._surface_get_format)
	case "_surface_get_primitive_type":
		return reflect.ValueOf(self._surface_get_primitive_type)
	case "_surface_set_material":
		return reflect.ValueOf(self._surface_set_material)
	case "_surface_get_material":
		return reflect.ValueOf(self._surface_get_material)
	case "_get_blend_shape_count":
		return reflect.ValueOf(self._get_blend_shape_count)
	case "_get_blend_shape_name":
		return reflect.ValueOf(self._get_blend_shape_name)
	case "_set_blend_shape_name":
		return reflect.ValueOf(self._set_blend_shape_name)
	case "_get_aabb":
		return reflect.ValueOf(self._get_aabb)
	default:
		return self.Super().virtual(name)
	}
}

type classMethodTweener struct {
	Class[classMethodTweener, Tweener]
}

func (self classMethodTweener) Tweener() Tweener { return *self.Super() }

func (self classMethodTweener) RefCounted() RefCounted { return *self.Super().Super() }

func (self classMethodTweener) Object() Object { return *self.Super().Super().Super() }

func (self classMethodTweener) SetDelay(delay Float) MethodTweener {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Float](0, abi, delay)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.MethodTweener.set_delay, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[MethodTweener](abi)
	abi.free()
	return ret
}

func (self classMethodTweener) SetTrans(trans TweenTransitionType) MethodTweener {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[TweenTransitionType](0, abi, trans)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.MethodTweener.set_trans, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[MethodTweener](abi)
	abi.free()
	return ret
}

func (self classMethodTweener) SetEase(ease TweenEaseType) MethodTweener {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[TweenEaseType](0, abi, ease)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.MethodTweener.set_ease, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[MethodTweener](abi)
	abi.free()
	return ret
}

func (self classMethodTweener) virtual(name string) reflect.Value {
	switch name {
	default:
		return self.Super().virtual(name)
	}
}

type classMultiMesh struct {
	Class[classMultiMesh, Resource]
}

func (self classMultiMesh) Resource() Resource { return *self.Super() }

func (self classMultiMesh) RefCounted() RefCounted { return *self.Super().Super() }

func (self classMultiMesh) Object() Object { return *self.Super().Super().Super() }

func (self classMultiMesh) SetMesh(mesh Mesh) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Mesh](0, abi, mesh)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.MultiMesh.set_mesh, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classMultiMesh) GetMesh() Mesh {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.MultiMesh.get_mesh, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Mesh](abi)
	abi.free()
	return ret
}

func (self classMultiMesh) SetUseColors(enable bool) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[bool](0, abi, enable)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.MultiMesh.set_use_colors, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classMultiMesh) IsUsingColors() bool {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.MultiMesh.is_using_colors, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self classMultiMesh) SetUseCustomData(enable bool) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[bool](0, abi, enable)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.MultiMesh.set_use_custom_data, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classMultiMesh) IsUsingCustomData() bool {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.MultiMesh.is_using_custom_data, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self classMultiMesh) SetTransformFormat(format MultiMeshTransformFormat) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[MultiMeshTransformFormat](0, abi, format)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.MultiMesh.set_transform_format, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classMultiMesh) GetTransformFormat() MultiMeshTransformFormat {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.MultiMesh.get_transform_format, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[MultiMeshTransformFormat](abi)
	abi.free()
	return ret
}

func (self classMultiMesh) SetInstanceCount(count Int) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Int](0, abi, count)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.MultiMesh.set_instance_count, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classMultiMesh) GetInstanceCount() Int {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.MultiMesh.get_instance_count, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Int](abi)
	abi.free()
	return ret
}

func (self classMultiMesh) SetVisibleInstanceCount(count Int) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Int](0, abi, count)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.MultiMesh.set_visible_instance_count, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classMultiMesh) GetVisibleInstanceCount() Int {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.MultiMesh.get_visible_instance_count, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Int](abi)
	abi.free()
	return ret
}

func (self classMultiMesh) SetInstanceTransform(instance Int, transform Transform3D) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Int](0, abi, instance)
	frameSet[Transform3D](1, abi, transform)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.MultiMesh.set_instance_transform, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classMultiMesh) SetInstanceTransform2d(instance Int, transform Transform2D) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Int](0, abi, instance)
	frameSet[Transform2D](1, abi, transform)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.MultiMesh.set_instance_transform_2d, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classMultiMesh) GetInstanceTransform(instance Int) Transform3D {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Int](0, abi, instance)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.MultiMesh.get_instance_transform, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Transform3D](abi)
	abi.free()
	return ret
}

func (self classMultiMesh) GetInstanceTransform2d(instance Int) Transform2D {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Int](0, abi, instance)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.MultiMesh.get_instance_transform_2d, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Transform2D](abi)
	abi.free()
	return ret
}

func (self classMultiMesh) SetInstanceColor(instance Int, color Color) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Int](0, abi, instance)
	frameSet[Color](1, abi, color)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.MultiMesh.set_instance_color, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classMultiMesh) GetInstanceColor(instance Int) Color {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Int](0, abi, instance)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.MultiMesh.get_instance_color, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Color](abi)
	abi.free()
	return ret
}

func (self classMultiMesh) SetInstanceCustomData(instance Int, custom_data Color) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Int](0, abi, instance)
	frameSet[Color](1, abi, custom_data)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.MultiMesh.set_instance_custom_data, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classMultiMesh) GetInstanceCustomData(instance Int) Color {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Int](0, abi, instance)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.MultiMesh.get_instance_custom_data, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Color](abi)
	abi.free()
	return ret
}

func (self classMultiMesh) GetAabb() AABB {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.MultiMesh.get_aabb, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[AABB](abi)
	abi.free()
	return ret
}

func (self classMultiMesh) GetBuffer(ctx Context) PackedFloat32Array {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.MultiMesh.get_buffer, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[[2]uintptr](abi)
	abi.free()
	return mmm.Make[API, PackedFloat32Array, [2]uintptr](ctx, selfPtr.API, ret)
}

func (self classMultiMesh) SetBuffer(buffer PackedFloat32Array) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[PackedFloat32Array](0, abi, buffer)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.MultiMesh.set_buffer, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classMultiMesh) virtual(name string) reflect.Value {
	switch name {
	default:
		return self.Super().virtual(name)
	}
}

type classMultiplayerAPI struct {
	Class[classMultiplayerAPI, RefCounted]
}

func (self classMultiplayerAPI) RefCounted() RefCounted { return *self.Super() }

func (self classMultiplayerAPI) Object() Object { return *self.Super().Super() }

func (self classMultiplayerAPI) HasMultiplayerPeer() bool {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.MultiplayerAPI.has_multiplayer_peer, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self classMultiplayerAPI) GetMultiplayerPeer() MultiplayerPeer {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.MultiplayerAPI.get_multiplayer_peer, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[MultiplayerPeer](abi)
	abi.free()
	return ret
}

func (self classMultiplayerAPI) SetMultiplayerPeer(peer MultiplayerPeer) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[MultiplayerPeer](0, abi, peer)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.MultiplayerAPI.set_multiplayer_peer, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classMultiplayerAPI) GetUniqueId() Int {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.MultiplayerAPI.get_unique_id, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Int](abi)
	abi.free()
	return ret
}

func (self classMultiplayerAPI) IsServer() bool {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.MultiplayerAPI.is_server, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self classMultiplayerAPI) GetRemoteSenderId() Int {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.MultiplayerAPI.get_remote_sender_id, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Int](abi)
	abi.free()
	return ret
}

func (self classMultiplayerAPI) Poll() int64 {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.MultiplayerAPI.poll, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[int64](abi)
	abi.free()
	return ret
}

func (self classMultiplayerAPI) Rpc(peer Int, object Object, method StringName, arguments Array) int64 {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Int](0, abi, peer)
	frameSet[Object](1, abi, object)
	frameSet[StringName](2, abi, method)
	frameSet[Array](3, abi, arguments)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.MultiplayerAPI.rpc, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[int64](abi)
	abi.free()
	return ret
}

func (self classMultiplayerAPI) ObjectConfigurationAdd(object Object, configuration Variant) int64 {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Object](0, abi, object)
	frameSet[Variant](1, abi, configuration)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.MultiplayerAPI.object_configuration_add, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[int64](abi)
	abi.free()
	return ret
}

func (self classMultiplayerAPI) ObjectConfigurationRemove(object Object, configuration Variant) int64 {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Object](0, abi, object)
	frameSet[Variant](1, abi, configuration)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.MultiplayerAPI.object_configuration_remove, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[int64](abi)
	abi.free()
	return ret
}

func (self classMultiplayerAPI) GetPeers(ctx Context) PackedInt32Array {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.MultiplayerAPI.get_peers, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[[2]uintptr](abi)
	abi.free()
	return mmm.Make[API, PackedInt32Array, [2]uintptr](ctx, selfPtr.API, ret)
}

func (self classMultiplayerAPI) SetDefaultInterface(interface_name StringName) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[StringName](0, abi, interface_name)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.MultiplayerAPI.set_default_interface, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classMultiplayerAPI) GetDefaultInterface(ctx Context) StringName {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.MultiplayerAPI.get_default_interface, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[uintptr](abi)
	abi.free()
	return mmm.Make[API, StringName, uintptr](ctx, selfPtr.API, ret)
}

func (self classMultiplayerAPI) CreateDefaultInterface() MultiplayerAPI {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.MultiplayerAPI.create_default_interface, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[MultiplayerAPI](abi)
	abi.free()
	return ret
}

func (self classMultiplayerAPI) virtual(name string) reflect.Value {
	switch name {
	default:
		return self.Super().virtual(name)
	}
}

type classMultiplayerPeer struct {
	Class[classMultiplayerPeer, PacketPeer]
}

func (self classMultiplayerPeer) PacketPeer() PacketPeer { return *self.Super() }

func (self classMultiplayerPeer) RefCounted() RefCounted { return *self.Super().Super() }

func (self classMultiplayerPeer) Object() Object { return *self.Super().Super().Super() }

func (self classMultiplayerPeer) SetTransferChannel(channel Int) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Int](0, abi, channel)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.MultiplayerPeer.set_transfer_channel, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classMultiplayerPeer) GetTransferChannel() Int {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.MultiplayerPeer.get_transfer_channel, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Int](abi)
	abi.free()
	return ret
}

func (self classMultiplayerPeer) SetTransferMode(mode MultiplayerPeerTransferMode) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[MultiplayerPeerTransferMode](0, abi, mode)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.MultiplayerPeer.set_transfer_mode, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classMultiplayerPeer) GetTransferMode() MultiplayerPeerTransferMode {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.MultiplayerPeer.get_transfer_mode, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[MultiplayerPeerTransferMode](abi)
	abi.free()
	return ret
}

func (self classMultiplayerPeer) SetTargetPeer(id Int) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Int](0, abi, id)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.MultiplayerPeer.set_target_peer, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classMultiplayerPeer) GetPacketPeer() Int {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.MultiplayerPeer.get_packet_peer, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Int](abi)
	abi.free()
	return ret
}

func (self classMultiplayerPeer) GetPacketChannel() Int {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.MultiplayerPeer.get_packet_channel, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Int](abi)
	abi.free()
	return ret
}

func (self classMultiplayerPeer) GetPacketMode() MultiplayerPeerTransferMode {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.MultiplayerPeer.get_packet_mode, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[MultiplayerPeerTransferMode](abi)
	abi.free()
	return ret
}

func (self classMultiplayerPeer) Poll() {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.MultiplayerPeer.poll, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classMultiplayerPeer) Close() {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.MultiplayerPeer.close, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classMultiplayerPeer) DisconnectPeer(peer Int, force bool) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Int](0, abi, peer)
	frameSet[bool](1, abi, force)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.MultiplayerPeer.disconnect_peer, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classMultiplayerPeer) GetConnectionStatus() MultiplayerPeerConnectionStatus {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.MultiplayerPeer.get_connection_status, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[MultiplayerPeerConnectionStatus](abi)
	abi.free()
	return ret
}

func (self classMultiplayerPeer) GetUniqueId() Int {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.MultiplayerPeer.get_unique_id, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Int](abi)
	abi.free()
	return ret
}

func (self classMultiplayerPeer) GenerateUniqueId() Int {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.MultiplayerPeer.generate_unique_id, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Int](abi)
	abi.free()
	return ret
}

func (self classMultiplayerPeer) SetRefuseNewConnections(enable bool) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[bool](0, abi, enable)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.MultiplayerPeer.set_refuse_new_connections, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classMultiplayerPeer) IsRefusingNewConnections() bool {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.MultiplayerPeer.is_refusing_new_connections, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self classMultiplayerPeer) IsServerRelaySupported() bool {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.MultiplayerPeer.is_server_relay_supported, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self classMultiplayerPeer) virtual(name string) reflect.Value {
	switch name {
	default:
		return self.Super().virtual(name)
	}
}

type classNode struct{ Class[classNode, Object] }

func (self classNode) Object() Object { return *self.Super() }

func (classNode) _process(impl func(ptr unsafe.Pointer, ctx Context, delta Float), api *API) (cb ExtensionClassCallVirtualFunc) {
	cb.Set(func(class cgo.Handle, p_args godotArgs, p_back godotBack) {
		ctx := newContext(api)
		var delta = godotGet[Float](p_args, 0)
		self := reflect.ValueOf(class.Value()).UnsafePointer()
		impl(self, ctx, delta)
		ctx.Free()
	})
	return
}

func (classNode) _physics_process(impl func(ptr unsafe.Pointer, ctx Context, delta Float), api *API) (cb ExtensionClassCallVirtualFunc) {
	cb.Set(func(class cgo.Handle, p_args godotArgs, p_back godotBack) {
		ctx := newContext(api)
		var delta = godotGet[Float](p_args, 0)
		self := reflect.ValueOf(class.Value()).UnsafePointer()
		impl(self, ctx, delta)
		ctx.Free()
	})
	return
}

func (classNode) _enter_tree(impl func(ptr unsafe.Pointer, ctx Context), api *API) (cb ExtensionClassCallVirtualFunc) {
	cb.Set(func(class cgo.Handle, p_args godotArgs, p_back godotBack) {
		ctx := newContext(api)
		self := reflect.ValueOf(class.Value()).UnsafePointer()
		impl(self, ctx)
		ctx.Free()
	})
	return
}

func (classNode) _exit_tree(impl func(ptr unsafe.Pointer, ctx Context), api *API) (cb ExtensionClassCallVirtualFunc) {
	cb.Set(func(class cgo.Handle, p_args godotArgs, p_back godotBack) {
		ctx := newContext(api)
		self := reflect.ValueOf(class.Value()).UnsafePointer()
		impl(self, ctx)
		ctx.Free()
	})
	return
}

func (classNode) _ready(impl func(ptr unsafe.Pointer, ctx Context), api *API) (cb ExtensionClassCallVirtualFunc) {
	cb.Set(func(class cgo.Handle, p_args godotArgs, p_back godotBack) {
		ctx := newContext(api)
		self := reflect.ValueOf(class.Value()).UnsafePointer()
		impl(self, ctx)
		ctx.Free()
	})
	return
}

func (classNode) _get_configuration_warnings(impl func(ptr unsafe.Pointer, ctx Context) PackedStringArray, api *API) (cb ExtensionClassCallVirtualFunc) {
	cb.Set(func(class cgo.Handle, p_args godotArgs, p_back godotBack) {
		ctx := newContext(api)
		self := reflect.ValueOf(class.Value()).UnsafePointer()
		ret := impl(self, ctx)
		mmm.MarkFree(ret)
		ctx.Free()
		godotSet[PackedStringArray](p_back, ret)
	})
	return
}

func (classNode) _input(impl func(ptr unsafe.Pointer, ctx Context, event InputEvent), api *API) (cb ExtensionClassCallVirtualFunc) {
	cb.Set(func(class cgo.Handle, p_args godotArgs, p_back godotBack) {
		ctx := newContext(api)
		var event = godotGet[InputEvent](p_args, 0)
		self := reflect.ValueOf(class.Value()).UnsafePointer()
		impl(self, ctx, event)
		ctx.Free()
	})
	return
}

func (classNode) _shortcut_input(impl func(ptr unsafe.Pointer, ctx Context, event InputEvent), api *API) (cb ExtensionClassCallVirtualFunc) {
	cb.Set(func(class cgo.Handle, p_args godotArgs, p_back godotBack) {
		ctx := newContext(api)
		var event = godotGet[InputEvent](p_args, 0)
		self := reflect.ValueOf(class.Value()).UnsafePointer()
		impl(self, ctx, event)
		ctx.Free()
	})
	return
}

func (classNode) _unhandled_input(impl func(ptr unsafe.Pointer, ctx Context, event InputEvent), api *API) (cb ExtensionClassCallVirtualFunc) {
	cb.Set(func(class cgo.Handle, p_args godotArgs, p_back godotBack) {
		ctx := newContext(api)
		var event = godotGet[InputEvent](p_args, 0)
		self := reflect.ValueOf(class.Value()).UnsafePointer()
		impl(self, ctx, event)
		ctx.Free()
	})
	return
}

func (classNode) _unhandled_key_input(impl func(ptr unsafe.Pointer, ctx Context, event InputEvent), api *API) (cb ExtensionClassCallVirtualFunc) {
	cb.Set(func(class cgo.Handle, p_args godotArgs, p_back godotBack) {
		ctx := newContext(api)
		var event = godotGet[InputEvent](p_args, 0)
		self := reflect.ValueOf(class.Value()).UnsafePointer()
		impl(self, ctx, event)
		ctx.Free()
	})
	return
}

func (self classNode) PrintOrphanNodes() {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Node.print_orphan_nodes, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classNode) AddSibling(sibling Node, force_readable_name bool) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Node](0, abi, sibling)
	frameSet[bool](1, abi, force_readable_name)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Node.add_sibling, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classNode) SetName(name String) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[String](0, abi, name)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Node.set_name, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classNode) GetName(ctx Context) StringName {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Node.get_name, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[uintptr](abi)
	abi.free()
	return mmm.Make[API, StringName, uintptr](ctx, selfPtr.API, ret)
}

func (self classNode) AddChild(node Node, force_readable_name bool, internal NodeInternalMode) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Node](0, abi, node)
	frameSet[bool](1, abi, force_readable_name)
	frameSet[NodeInternalMode](2, abi, internal)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Node.add_child, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classNode) RemoveChild(node Node) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Node](0, abi, node)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Node.remove_child, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classNode) Reparent(new_parent Node, keep_global_transform bool) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Node](0, abi, new_parent)
	frameSet[bool](1, abi, keep_global_transform)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Node.reparent, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classNode) GetChildCount(include_internal bool) Int {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[bool](0, abi, include_internal)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Node.get_child_count, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Int](abi)
	abi.free()
	return ret
}

func (self classNode) GetChildren(include_internal bool) ArrayOf[Node] {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[bool](0, abi, include_internal)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Node.get_children, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[ArrayOf[Node]](abi)
	abi.free()
	return ret
}

func (self classNode) GetChild(idx Int, include_internal bool) Node {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Int](0, abi, idx)
	frameSet[bool](1, abi, include_internal)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Node.get_child, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Node](abi)
	abi.free()
	return ret
}

func (self classNode) HasNode(path NodePath) bool {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[NodePath](0, abi, path)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Node.has_node, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self classNode) GetNode(path NodePath) Node {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[NodePath](0, abi, path)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Node.get_node, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Node](abi)
	abi.free()
	return ret
}

func (self classNode) GetNodeOrNull(path NodePath) Node {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[NodePath](0, abi, path)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Node.get_node_or_null, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Node](abi)
	abi.free()
	return ret
}

func (self classNode) GetParent() Node {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Node.get_parent, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Node](abi)
	abi.free()
	return ret
}

func (self classNode) FindChild(pattern String, recursive bool, owned bool) Node {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[String](0, abi, pattern)
	frameSet[bool](1, abi, recursive)
	frameSet[bool](2, abi, owned)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Node.find_child, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Node](abi)
	abi.free()
	return ret
}

func (self classNode) FindChildren(pattern String, atype String, recursive bool, owned bool) ArrayOf[Node] {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[String](0, abi, pattern)
	frameSet[String](1, abi, atype)
	frameSet[bool](2, abi, recursive)
	frameSet[bool](3, abi, owned)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Node.find_children, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[ArrayOf[Node]](abi)
	abi.free()
	return ret
}

func (self classNode) FindParent(pattern String) Node {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[String](0, abi, pattern)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Node.find_parent, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Node](abi)
	abi.free()
	return ret
}

func (self classNode) HasNodeAndResource(path NodePath) bool {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[NodePath](0, abi, path)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Node.has_node_and_resource, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self classNode) GetNodeAndResource(ctx Context, path NodePath) Array {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[NodePath](0, abi, path)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Node.get_node_and_resource, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[uintptr](abi)
	abi.free()
	return mmm.Make[API, Array, uintptr](ctx, selfPtr.API, ret)
}

func (self classNode) IsInsideTree() bool {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Node.is_inside_tree, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self classNode) IsAncestorOf(node Node) bool {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Node](0, abi, node)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Node.is_ancestor_of, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self classNode) IsGreaterThan(node Node) bool {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Node](0, abi, node)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Node.is_greater_than, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self classNode) GetPath(ctx Context) NodePath {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Node.get_path, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[uintptr](abi)
	abi.free()
	return mmm.Make[API, NodePath, uintptr](ctx, selfPtr.API, ret)
}

func (self classNode) GetPathTo(ctx Context, node Node, use_unique_path bool) NodePath {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Node](0, abi, node)
	frameSet[bool](1, abi, use_unique_path)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Node.get_path_to, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[uintptr](abi)
	abi.free()
	return mmm.Make[API, NodePath, uintptr](ctx, selfPtr.API, ret)
}

func (self classNode) AddToGroup(group StringName, persistent bool) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[StringName](0, abi, group)
	frameSet[bool](1, abi, persistent)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Node.add_to_group, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classNode) RemoveFromGroup(group StringName) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[StringName](0, abi, group)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Node.remove_from_group, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classNode) IsInGroup(group StringName) bool {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[StringName](0, abi, group)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Node.is_in_group, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self classNode) MoveChild(child_node Node, to_index Int) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Node](0, abi, child_node)
	frameSet[Int](1, abi, to_index)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Node.move_child, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classNode) GetGroups() ArrayOf[StringName] {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Node.get_groups, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[ArrayOf[StringName]](abi)
	abi.free()
	return ret
}

func (self classNode) SetOwner(owner Node) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Node](0, abi, owner)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Node.set_owner, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classNode) GetOwner() Node {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Node.get_owner, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Node](abi)
	abi.free()
	return ret
}

func (self classNode) GetIndex(include_internal bool) Int {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[bool](0, abi, include_internal)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Node.get_index, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Int](abi)
	abi.free()
	return ret
}

func (self classNode) PrintTree() {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Node.print_tree, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classNode) PrintTreePretty() {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Node.print_tree_pretty, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classNode) GetTreeString(ctx Context) String {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Node.get_tree_string, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[uintptr](abi)
	abi.free()
	return mmm.Make[API, String, uintptr](ctx, selfPtr.API, ret)
}

func (self classNode) GetTreeStringPretty(ctx Context) String {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Node.get_tree_string_pretty, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[uintptr](abi)
	abi.free()
	return mmm.Make[API, String, uintptr](ctx, selfPtr.API, ret)
}

func (self classNode) SetSceneFilePath(scene_file_path String) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[String](0, abi, scene_file_path)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Node.set_scene_file_path, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classNode) GetSceneFilePath(ctx Context) String {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Node.get_scene_file_path, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[uintptr](abi)
	abi.free()
	return mmm.Make[API, String, uintptr](ctx, selfPtr.API, ret)
}

func (self classNode) PropagateNotification(what Int) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Int](0, abi, what)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Node.propagate_notification, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classNode) PropagateCall(method StringName, args Array, parent_first bool) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[StringName](0, abi, method)
	frameSet[Array](1, abi, args)
	frameSet[bool](2, abi, parent_first)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Node.propagate_call, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classNode) SetPhysicsProcess(enable bool) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[bool](0, abi, enable)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Node.set_physics_process, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classNode) GetPhysicsProcessDeltaTime() Float {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Node.get_physics_process_delta_time, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Float](abi)
	abi.free()
	return ret
}

func (self classNode) IsPhysicsProcessing() bool {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Node.is_physics_processing, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self classNode) GetProcessDeltaTime() Float {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Node.get_process_delta_time, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Float](abi)
	abi.free()
	return ret
}

func (self classNode) SetProcess(enable bool) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[bool](0, abi, enable)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Node.set_process, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classNode) SetProcessPriority(priority Int) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Int](0, abi, priority)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Node.set_process_priority, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classNode) GetProcessPriority() Int {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Node.get_process_priority, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Int](abi)
	abi.free()
	return ret
}

func (self classNode) SetPhysicsProcessPriority(priority Int) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Int](0, abi, priority)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Node.set_physics_process_priority, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classNode) GetPhysicsProcessPriority() Int {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Node.get_physics_process_priority, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Int](abi)
	abi.free()
	return ret
}

func (self classNode) IsProcessing() bool {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Node.is_processing, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self classNode) SetProcessInput(enable bool) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[bool](0, abi, enable)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Node.set_process_input, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classNode) IsProcessingInput() bool {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Node.is_processing_input, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self classNode) SetProcessShortcutInput(enable bool) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[bool](0, abi, enable)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Node.set_process_shortcut_input, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classNode) IsProcessingShortcutInput() bool {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Node.is_processing_shortcut_input, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self classNode) SetProcessUnhandledInput(enable bool) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[bool](0, abi, enable)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Node.set_process_unhandled_input, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classNode) IsProcessingUnhandledInput() bool {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Node.is_processing_unhandled_input, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self classNode) SetProcessUnhandledKeyInput(enable bool) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[bool](0, abi, enable)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Node.set_process_unhandled_key_input, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classNode) IsProcessingUnhandledKeyInput() bool {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Node.is_processing_unhandled_key_input, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self classNode) SetProcessMode(mode NodeProcessMode) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[NodeProcessMode](0, abi, mode)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Node.set_process_mode, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classNode) GetProcessMode() NodeProcessMode {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Node.get_process_mode, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[NodeProcessMode](abi)
	abi.free()
	return ret
}

func (self classNode) CanProcess() bool {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Node.can_process, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self classNode) SetProcessThreadGroup(mode NodeProcessThreadGroup) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[NodeProcessThreadGroup](0, abi, mode)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Node.set_process_thread_group, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classNode) GetProcessThreadGroup() NodeProcessThreadGroup {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Node.get_process_thread_group, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[NodeProcessThreadGroup](abi)
	abi.free()
	return ret
}

func (self classNode) SetProcessThreadMessages(flags NodeProcessThreadMessages) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[NodeProcessThreadMessages](0, abi, flags)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Node.set_process_thread_messages, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classNode) GetProcessThreadMessages() NodeProcessThreadMessages {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Node.get_process_thread_messages, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[NodeProcessThreadMessages](abi)
	abi.free()
	return ret
}

func (self classNode) SetProcessThreadGroupOrder(order Int) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Int](0, abi, order)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Node.set_process_thread_group_order, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classNode) GetProcessThreadGroupOrder() Int {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Node.get_process_thread_group_order, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Int](abi)
	abi.free()
	return ret
}

func (self classNode) SetDisplayFolded(fold bool) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[bool](0, abi, fold)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Node.set_display_folded, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classNode) IsDisplayedFolded() bool {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Node.is_displayed_folded, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self classNode) SetProcessInternal(enable bool) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[bool](0, abi, enable)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Node.set_process_internal, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classNode) IsProcessingInternal() bool {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Node.is_processing_internal, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self classNode) SetPhysicsProcessInternal(enable bool) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[bool](0, abi, enable)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Node.set_physics_process_internal, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classNode) IsPhysicsProcessingInternal() bool {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Node.is_physics_processing_internal, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self classNode) GetWindow() Window {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Node.get_window, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Window](abi)
	abi.free()
	return ret
}

func (self classNode) GetLastExclusiveWindow() Window {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Node.get_last_exclusive_window, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Window](abi)
	abi.free()
	return ret
}

func (self classNode) GetTree() SceneTree {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Node.get_tree, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[SceneTree](abi)
	abi.free()
	return ret
}

func (self classNode) CreateTween() Tween {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Node.create_tween, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Tween](abi)
	abi.free()
	return ret
}

func (self classNode) Duplicate(flags Int) Node {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Int](0, abi, flags)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Node.duplicate, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Node](abi)
	abi.free()
	return ret
}

func (self classNode) ReplaceBy(node Node, keep_groups bool) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Node](0, abi, node)
	frameSet[bool](1, abi, keep_groups)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Node.replace_by, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classNode) SetSceneInstanceLoadPlaceholder(load_placeholder bool) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[bool](0, abi, load_placeholder)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Node.set_scene_instance_load_placeholder, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classNode) GetSceneInstanceLoadPlaceholder() bool {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Node.get_scene_instance_load_placeholder, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self classNode) SetEditableInstance(node Node, is_editable bool) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Node](0, abi, node)
	frameSet[bool](1, abi, is_editable)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Node.set_editable_instance, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classNode) IsEditableInstance(node Node) bool {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Node](0, abi, node)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Node.is_editable_instance, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self classNode) GetViewport() Viewport {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Node.get_viewport, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Viewport](abi)
	abi.free()
	return ret
}

func (self classNode) QueueFree() {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Node.queue_free, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classNode) RequestReady() {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Node.request_ready, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classNode) IsNodeReady() bool {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Node.is_node_ready, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self classNode) SetMultiplayerAuthority(id Int, recursive bool) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Int](0, abi, id)
	frameSet[bool](1, abi, recursive)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Node.set_multiplayer_authority, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classNode) GetMultiplayerAuthority() Int {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Node.get_multiplayer_authority, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Int](abi)
	abi.free()
	return ret
}

func (self classNode) IsMultiplayerAuthority() bool {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Node.is_multiplayer_authority, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self classNode) GetMultiplayer() MultiplayerAPI {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Node.get_multiplayer, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[MultiplayerAPI](abi)
	abi.free()
	return ret
}

func (self classNode) RpcConfig(method StringName, config Variant) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[StringName](0, abi, method)
	frameSet[Variant](1, abi, config)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Node.rpc_config, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classNode) SetEditorDescription(editor_description String) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[String](0, abi, editor_description)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Node.set_editor_description, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classNode) GetEditorDescription(ctx Context) String {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Node.get_editor_description, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[uintptr](abi)
	abi.free()
	return mmm.Make[API, String, uintptr](ctx, selfPtr.API, ret)
}

func (self classNode) SetUniqueNameInOwner(enable bool) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[bool](0, abi, enable)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Node.set_unique_name_in_owner, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classNode) IsUniqueNameInOwner() bool {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Node.is_unique_name_in_owner, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self classNode) Rpc(method StringName) int64 {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[StringName](0, abi, method)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Node.rpc, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[int64](abi)
	abi.free()
	return ret
}

func (self classNode) RpcId(peer_id Int, method StringName) int64 {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Int](0, abi, peer_id)
	frameSet[StringName](1, abi, method)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Node.rpc_id, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[int64](abi)
	abi.free()
	return ret
}

func (self classNode) UpdateConfigurationWarnings() {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Node.update_configuration_warnings, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classNode) CallDeferredThreadGroup(ctx Context, method StringName) Variant {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[StringName](0, abi, method)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Node.call_deferred_thread_group, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[[3]uintptr](abi)
	abi.free()
	return mmm.Make[API, Variant, [3]uintptr](ctx, selfPtr.API, ret)
}

func (self classNode) SetDeferredThreadGroup(property StringName, value Variant) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[StringName](0, abi, property)
	frameSet[Variant](1, abi, value)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Node.set_deferred_thread_group, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classNode) NotifyDeferredThreadGroup(what Int) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Int](0, abi, what)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Node.notify_deferred_thread_group, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classNode) CallThreadSafe(ctx Context, method StringName) Variant {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[StringName](0, abi, method)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Node.call_thread_safe, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[[3]uintptr](abi)
	abi.free()
	return mmm.Make[API, Variant, [3]uintptr](ctx, selfPtr.API, ret)
}

func (self classNode) SetThreadSafe(property StringName, value Variant) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[StringName](0, abi, property)
	frameSet[Variant](1, abi, value)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Node.set_thread_safe, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classNode) NotifyThreadSafe(what Int) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Int](0, abi, what)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Node.notify_thread_safe, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classNode) virtual(name string) reflect.Value {
	switch name {
	case "_process":
		return reflect.ValueOf(self._process)
	case "_physics_process":
		return reflect.ValueOf(self._physics_process)
	case "_enter_tree":
		return reflect.ValueOf(self._enter_tree)
	case "_exit_tree":
		return reflect.ValueOf(self._exit_tree)
	case "_ready":
		return reflect.ValueOf(self._ready)
	case "_get_configuration_warnings":
		return reflect.ValueOf(self._get_configuration_warnings)
	case "_input":
		return reflect.ValueOf(self._input)
	case "_shortcut_input":
		return reflect.ValueOf(self._shortcut_input)
	case "_unhandled_input":
		return reflect.ValueOf(self._unhandled_input)
	case "_unhandled_key_input":
		return reflect.ValueOf(self._unhandled_key_input)
	default:
		return self.Super().virtual(name)
	}
}

type classNode2D struct{ Class[classNode2D, CanvasItem] }

func (self classNode2D) CanvasItem() CanvasItem { return *self.Super() }

func (self classNode2D) Node() Node { return *self.Super().Super() }

func (self classNode2D) Object() Object { return *self.Super().Super().Super() }

func (self classNode2D) SetPosition(position Vector2) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Vector2](0, abi, position)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Node2D.set_position, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classNode2D) SetRotation(radians Float) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Float](0, abi, radians)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Node2D.set_rotation, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classNode2D) SetRotationDegrees(degrees Float) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Float](0, abi, degrees)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Node2D.set_rotation_degrees, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classNode2D) SetSkew(radians Float) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Float](0, abi, radians)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Node2D.set_skew, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classNode2D) SetScale(scale Vector2) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Vector2](0, abi, scale)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Node2D.set_scale, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classNode2D) GetPosition() Vector2 {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Node2D.get_position, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Vector2](abi)
	abi.free()
	return ret
}

func (self classNode2D) GetRotation() Float {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Node2D.get_rotation, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Float](abi)
	abi.free()
	return ret
}

func (self classNode2D) GetRotationDegrees() Float {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Node2D.get_rotation_degrees, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Float](abi)
	abi.free()
	return ret
}

func (self classNode2D) GetSkew() Float {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Node2D.get_skew, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Float](abi)
	abi.free()
	return ret
}

func (self classNode2D) GetScale() Vector2 {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Node2D.get_scale, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Vector2](abi)
	abi.free()
	return ret
}

func (self classNode2D) Rotate(radians Float) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Float](0, abi, radians)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Node2D.rotate, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classNode2D) MoveLocalX(delta Float, scaled bool) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Float](0, abi, delta)
	frameSet[bool](1, abi, scaled)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Node2D.move_local_x, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classNode2D) MoveLocalY(delta Float, scaled bool) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Float](0, abi, delta)
	frameSet[bool](1, abi, scaled)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Node2D.move_local_y, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classNode2D) Translate(offset Vector2) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Vector2](0, abi, offset)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Node2D.translate, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classNode2D) GlobalTranslate(offset Vector2) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Vector2](0, abi, offset)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Node2D.global_translate, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classNode2D) ApplyScale(ratio Vector2) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Vector2](0, abi, ratio)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Node2D.apply_scale, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classNode2D) SetGlobalPosition(position Vector2) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Vector2](0, abi, position)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Node2D.set_global_position, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classNode2D) GetGlobalPosition() Vector2 {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Node2D.get_global_position, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Vector2](abi)
	abi.free()
	return ret
}

func (self classNode2D) SetGlobalRotation(radians Float) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Float](0, abi, radians)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Node2D.set_global_rotation, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classNode2D) SetGlobalRotationDegrees(degrees Float) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Float](0, abi, degrees)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Node2D.set_global_rotation_degrees, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classNode2D) GetGlobalRotation() Float {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Node2D.get_global_rotation, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Float](abi)
	abi.free()
	return ret
}

func (self classNode2D) GetGlobalRotationDegrees() Float {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Node2D.get_global_rotation_degrees, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Float](abi)
	abi.free()
	return ret
}

func (self classNode2D) SetGlobalSkew(radians Float) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Float](0, abi, radians)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Node2D.set_global_skew, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classNode2D) GetGlobalSkew() Float {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Node2D.get_global_skew, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Float](abi)
	abi.free()
	return ret
}

func (self classNode2D) SetGlobalScale(scale Vector2) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Vector2](0, abi, scale)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Node2D.set_global_scale, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classNode2D) GetGlobalScale() Vector2 {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Node2D.get_global_scale, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Vector2](abi)
	abi.free()
	return ret
}

func (self classNode2D) SetTransform(xform Transform2D) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Transform2D](0, abi, xform)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Node2D.set_transform, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classNode2D) SetGlobalTransform(xform Transform2D) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Transform2D](0, abi, xform)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Node2D.set_global_transform, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classNode2D) LookAt(point Vector2) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Vector2](0, abi, point)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Node2D.look_at, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classNode2D) GetAngleTo(point Vector2) Float {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Vector2](0, abi, point)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Node2D.get_angle_to, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Float](abi)
	abi.free()
	return ret
}

func (self classNode2D) ToLocal(global_point Vector2) Vector2 {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Vector2](0, abi, global_point)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Node2D.to_local, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Vector2](abi)
	abi.free()
	return ret
}

func (self classNode2D) ToGlobal(local_point Vector2) Vector2 {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Vector2](0, abi, local_point)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Node2D.to_global, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Vector2](abi)
	abi.free()
	return ret
}

func (self classNode2D) GetRelativeTransformToParent(parent Node) Transform2D {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Node](0, abi, parent)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Node2D.get_relative_transform_to_parent, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Transform2D](abi)
	abi.free()
	return ret
}

func (self classNode2D) virtual(name string) reflect.Value {
	switch name {
	default:
		return self.Super().virtual(name)
	}
}

type classNode3D struct{ Class[classNode3D, Node] }

func (self classNode3D) Node() Node { return *self.Super() }

func (self classNode3D) Object() Object { return *self.Super().Super() }

func (self classNode3D) SetTransform(local Transform3D) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Transform3D](0, abi, local)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Node3D.set_transform, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classNode3D) GetTransform() Transform3D {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Node3D.get_transform, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Transform3D](abi)
	abi.free()
	return ret
}

func (self classNode3D) SetPosition(position Vector3) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Vector3](0, abi, position)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Node3D.set_position, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classNode3D) GetPosition() Vector3 {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Node3D.get_position, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Vector3](abi)
	abi.free()
	return ret
}

func (self classNode3D) SetRotation(euler_radians Vector3) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Vector3](0, abi, euler_radians)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Node3D.set_rotation, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classNode3D) GetRotation() Vector3 {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Node3D.get_rotation, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Vector3](abi)
	abi.free()
	return ret
}

func (self classNode3D) SetRotationDegrees(euler_degrees Vector3) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Vector3](0, abi, euler_degrees)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Node3D.set_rotation_degrees, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classNode3D) GetRotationDegrees() Vector3 {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Node3D.get_rotation_degrees, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Vector3](abi)
	abi.free()
	return ret
}

func (self classNode3D) SetRotationOrder(order EulerOrder) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[EulerOrder](0, abi, order)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Node3D.set_rotation_order, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classNode3D) GetRotationOrder() EulerOrder {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Node3D.get_rotation_order, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[EulerOrder](abi)
	abi.free()
	return ret
}

func (self classNode3D) SetRotationEditMode(edit_mode Node3DRotationEditMode) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Node3DRotationEditMode](0, abi, edit_mode)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Node3D.set_rotation_edit_mode, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classNode3D) GetRotationEditMode() Node3DRotationEditMode {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Node3D.get_rotation_edit_mode, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Node3DRotationEditMode](abi)
	abi.free()
	return ret
}

func (self classNode3D) SetScale(scale Vector3) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Vector3](0, abi, scale)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Node3D.set_scale, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classNode3D) GetScale() Vector3 {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Node3D.get_scale, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Vector3](abi)
	abi.free()
	return ret
}

func (self classNode3D) SetQuaternion(quaternion Quaternion) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Quaternion](0, abi, quaternion)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Node3D.set_quaternion, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classNode3D) GetQuaternion() Quaternion {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Node3D.get_quaternion, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Quaternion](abi)
	abi.free()
	return ret
}

func (self classNode3D) SetBasis(basis Basis) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Basis](0, abi, basis)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Node3D.set_basis, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classNode3D) GetBasis() Basis {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Node3D.get_basis, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Basis](abi)
	abi.free()
	return ret
}

func (self classNode3D) SetGlobalTransform(global Transform3D) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Transform3D](0, abi, global)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Node3D.set_global_transform, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classNode3D) GetGlobalTransform() Transform3D {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Node3D.get_global_transform, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Transform3D](abi)
	abi.free()
	return ret
}

func (self classNode3D) SetGlobalPosition(position Vector3) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Vector3](0, abi, position)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Node3D.set_global_position, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classNode3D) GetGlobalPosition() Vector3 {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Node3D.get_global_position, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Vector3](abi)
	abi.free()
	return ret
}

func (self classNode3D) SetGlobalBasis(basis Basis) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Basis](0, abi, basis)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Node3D.set_global_basis, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classNode3D) GetGlobalBasis() Basis {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Node3D.get_global_basis, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Basis](abi)
	abi.free()
	return ret
}

func (self classNode3D) SetGlobalRotation(euler_radians Vector3) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Vector3](0, abi, euler_radians)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Node3D.set_global_rotation, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classNode3D) GetGlobalRotation() Vector3 {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Node3D.get_global_rotation, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Vector3](abi)
	abi.free()
	return ret
}

func (self classNode3D) SetGlobalRotationDegrees(euler_degrees Vector3) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Vector3](0, abi, euler_degrees)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Node3D.set_global_rotation_degrees, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classNode3D) GetGlobalRotationDegrees() Vector3 {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Node3D.get_global_rotation_degrees, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Vector3](abi)
	abi.free()
	return ret
}

func (self classNode3D) GetParentNode3d() Node3D {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Node3D.get_parent_node_3d, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Node3D](abi)
	abi.free()
	return ret
}

func (self classNode3D) SetIgnoreTransformNotification(enabled bool) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[bool](0, abi, enabled)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Node3D.set_ignore_transform_notification, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classNode3D) SetAsTopLevel(enable bool) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[bool](0, abi, enable)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Node3D.set_as_top_level, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classNode3D) IsSetAsTopLevel() bool {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Node3D.is_set_as_top_level, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self classNode3D) SetDisableScale(disable bool) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[bool](0, abi, disable)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Node3D.set_disable_scale, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classNode3D) IsScaleDisabled() bool {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Node3D.is_scale_disabled, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self classNode3D) GetWorld3d() World3D {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Node3D.get_world_3d, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[World3D](abi)
	abi.free()
	return ret
}

func (self classNode3D) ForceUpdateTransform() {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Node3D.force_update_transform, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classNode3D) SetVisibilityParent(path NodePath) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[NodePath](0, abi, path)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Node3D.set_visibility_parent, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classNode3D) GetVisibilityParent(ctx Context) NodePath {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Node3D.get_visibility_parent, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[uintptr](abi)
	abi.free()
	return mmm.Make[API, NodePath, uintptr](ctx, selfPtr.API, ret)
}

func (self classNode3D) UpdateGizmos() {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Node3D.update_gizmos, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classNode3D) AddGizmo(gizmo Node3DGizmo) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Node3DGizmo](0, abi, gizmo)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Node3D.add_gizmo, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classNode3D) GetGizmos() ArrayOf[Node3DGizmo] {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Node3D.get_gizmos, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[ArrayOf[Node3DGizmo]](abi)
	abi.free()
	return ret
}

func (self classNode3D) ClearGizmos() {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Node3D.clear_gizmos, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classNode3D) SetSubgizmoSelection(gizmo Node3DGizmo, id Int, transform Transform3D) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Node3DGizmo](0, abi, gizmo)
	frameSet[Int](1, abi, id)
	frameSet[Transform3D](2, abi, transform)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Node3D.set_subgizmo_selection, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classNode3D) ClearSubgizmoSelection() {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Node3D.clear_subgizmo_selection, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classNode3D) SetVisible(visible bool) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[bool](0, abi, visible)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Node3D.set_visible, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classNode3D) IsVisible() bool {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Node3D.is_visible, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self classNode3D) IsVisibleInTree() bool {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Node3D.is_visible_in_tree, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self classNode3D) Show() {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Node3D.show, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classNode3D) Hide() {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Node3D.hide, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classNode3D) SetNotifyLocalTransform(enable bool) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[bool](0, abi, enable)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Node3D.set_notify_local_transform, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classNode3D) IsLocalTransformNotificationEnabled() bool {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Node3D.is_local_transform_notification_enabled, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self classNode3D) SetNotifyTransform(enable bool) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[bool](0, abi, enable)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Node3D.set_notify_transform, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classNode3D) IsTransformNotificationEnabled() bool {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Node3D.is_transform_notification_enabled, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self classNode3D) Rotate(axis Vector3, angle Float) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Vector3](0, abi, axis)
	frameSet[Float](1, abi, angle)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Node3D.rotate, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classNode3D) GlobalRotate(axis Vector3, angle Float) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Vector3](0, abi, axis)
	frameSet[Float](1, abi, angle)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Node3D.global_rotate, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classNode3D) GlobalScale(scale Vector3) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Vector3](0, abi, scale)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Node3D.global_scale, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classNode3D) GlobalTranslate(offset Vector3) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Vector3](0, abi, offset)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Node3D.global_translate, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classNode3D) RotateObjectLocal(axis Vector3, angle Float) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Vector3](0, abi, axis)
	frameSet[Float](1, abi, angle)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Node3D.rotate_object_local, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classNode3D) ScaleObjectLocal(scale Vector3) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Vector3](0, abi, scale)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Node3D.scale_object_local, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classNode3D) TranslateObjectLocal(offset Vector3) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Vector3](0, abi, offset)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Node3D.translate_object_local, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classNode3D) RotateX(angle Float) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Float](0, abi, angle)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Node3D.rotate_x, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classNode3D) RotateY(angle Float) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Float](0, abi, angle)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Node3D.rotate_y, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classNode3D) RotateZ(angle Float) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Float](0, abi, angle)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Node3D.rotate_z, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classNode3D) Translate(offset Vector3) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Vector3](0, abi, offset)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Node3D.translate, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classNode3D) Orthonormalize() {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Node3D.orthonormalize, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classNode3D) SetIdentity() {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Node3D.set_identity, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classNode3D) LookAt(target Vector3, up Vector3, use_model_front bool) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Vector3](0, abi, target)
	frameSet[Vector3](1, abi, up)
	frameSet[bool](2, abi, use_model_front)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Node3D.look_at, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classNode3D) LookAtFromPosition(position Vector3, target Vector3, up Vector3, use_model_front bool) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Vector3](0, abi, position)
	frameSet[Vector3](1, abi, target)
	frameSet[Vector3](2, abi, up)
	frameSet[bool](3, abi, use_model_front)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Node3D.look_at_from_position, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classNode3D) ToLocal(global_point Vector3) Vector3 {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Vector3](0, abi, global_point)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Node3D.to_local, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Vector3](abi)
	abi.free()
	return ret
}

func (self classNode3D) ToGlobal(local_point Vector3) Vector3 {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Vector3](0, abi, local_point)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Node3D.to_global, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Vector3](abi)
	abi.free()
	return ret
}

func (self classNode3D) virtual(name string) reflect.Value {
	switch name {
	default:
		return self.Super().virtual(name)
	}
}

type classNode3DGizmo struct {
	Class[classNode3DGizmo, RefCounted]
}

func (self classNode3DGizmo) RefCounted() RefCounted { return *self.Super() }

func (self classNode3DGizmo) Object() Object { return *self.Super().Super() }

func (self classNode3DGizmo) virtual(name string) reflect.Value {
	switch name {
	default:
		return self.Super().virtual(name)
	}
}

type classObject struct{ Class[classObject, Pointer] }

func (self classObject) GetClass(ctx Context) String {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Object.get_class, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[uintptr](abi)
	abi.free()
	return mmm.Make[API, String, uintptr](ctx, selfPtr.API, ret)
}

func (self classObject) IsClass(class String) bool {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[String](0, abi, class)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Object.is_class, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self classObject) Set(property StringName, value Variant) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[StringName](0, abi, property)
	frameSet[Variant](1, abi, value)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Object.set, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classObject) Get(ctx Context, property StringName) Variant {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[StringName](0, abi, property)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Object.get, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[[3]uintptr](abi)
	abi.free()
	return mmm.Make[API, Variant, [3]uintptr](ctx, selfPtr.API, ret)
}

func (self classObject) SetIndexed(property_path NodePath, value Variant) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[NodePath](0, abi, property_path)
	frameSet[Variant](1, abi, value)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Object.set_indexed, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classObject) GetIndexed(ctx Context, property_path NodePath) Variant {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[NodePath](0, abi, property_path)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Object.get_indexed, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[[3]uintptr](abi)
	abi.free()
	return mmm.Make[API, Variant, [3]uintptr](ctx, selfPtr.API, ret)
}

func (self classObject) GetPropertyList() ArrayOf[Dictionary] {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Object.get_property_list, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[ArrayOf[Dictionary]](abi)
	abi.free()
	return ret
}

func (self classObject) GetMethodList() ArrayOf[Dictionary] {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Object.get_method_list, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[ArrayOf[Dictionary]](abi)
	abi.free()
	return ret
}

func (self classObject) PropertyCanRevert(property StringName) bool {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[StringName](0, abi, property)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Object.property_can_revert, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self classObject) PropertyGetRevert(ctx Context, property StringName) Variant {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[StringName](0, abi, property)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Object.property_get_revert, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[[3]uintptr](abi)
	abi.free()
	return mmm.Make[API, Variant, [3]uintptr](ctx, selfPtr.API, ret)
}

func (self classObject) Notification(what Int, reversed bool) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Int](0, abi, what)
	frameSet[bool](1, abi, reversed)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Object.notification, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classObject) ToString(ctx Context) String {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Object.to_string, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[uintptr](abi)
	abi.free()
	return mmm.Make[API, String, uintptr](ctx, selfPtr.API, ret)
}

func (self classObject) GetInstanceId() Int {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Object.get_instance_id, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Int](abi)
	abi.free()
	return ret
}

func (self classObject) SetScript(script Variant) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Variant](0, abi, script)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Object.set_script, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classObject) GetScript(ctx Context) Variant {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Object.get_script, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[[3]uintptr](abi)
	abi.free()
	return mmm.Make[API, Variant, [3]uintptr](ctx, selfPtr.API, ret)
}

func (self classObject) SetMeta(name StringName, value Variant) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[StringName](0, abi, name)
	frameSet[Variant](1, abi, value)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Object.set_meta, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classObject) RemoveMeta(name StringName) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[StringName](0, abi, name)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Object.remove_meta, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classObject) GetMeta(ctx Context, name StringName, def Variant) Variant {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[StringName](0, abi, name)
	frameSet[Variant](1, abi, def)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Object.get_meta, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[[3]uintptr](abi)
	abi.free()
	return mmm.Make[API, Variant, [3]uintptr](ctx, selfPtr.API, ret)
}

func (self classObject) HasMeta(name StringName) bool {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[StringName](0, abi, name)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Object.has_meta, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self classObject) GetMetaList() ArrayOf[StringName] {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Object.get_meta_list, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[ArrayOf[StringName]](abi)
	abi.free()
	return ret
}

func (self classObject) AddUserSignal(signal String, arguments Array) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[String](0, abi, signal)
	frameSet[Array](1, abi, arguments)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Object.add_user_signal, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classObject) HasUserSignal(signal StringName) bool {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[StringName](0, abi, signal)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Object.has_user_signal, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self classObject) EmitSignal(signal StringName) int64 {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[StringName](0, abi, signal)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Object.emit_signal, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[int64](abi)
	abi.free()
	return ret
}

func (self classObject) Call(ctx Context, method StringName) Variant {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[StringName](0, abi, method)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Object.call, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[[3]uintptr](abi)
	abi.free()
	return mmm.Make[API, Variant, [3]uintptr](ctx, selfPtr.API, ret)
}

func (self classObject) CallDeferred(ctx Context, method StringName) Variant {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[StringName](0, abi, method)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Object.call_deferred, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[[3]uintptr](abi)
	abi.free()
	return mmm.Make[API, Variant, [3]uintptr](ctx, selfPtr.API, ret)
}

func (self classObject) SetDeferred(property StringName, value Variant) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[StringName](0, abi, property)
	frameSet[Variant](1, abi, value)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Object.set_deferred, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classObject) Callv(ctx Context, method StringName, arg_array Array) Variant {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[StringName](0, abi, method)
	frameSet[Array](1, abi, arg_array)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Object.callv, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[[3]uintptr](abi)
	abi.free()
	return mmm.Make[API, Variant, [3]uintptr](ctx, selfPtr.API, ret)
}

func (self classObject) HasMethod(method StringName) bool {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[StringName](0, abi, method)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Object.has_method, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self classObject) HasSignal(signal StringName) bool {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[StringName](0, abi, signal)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Object.has_signal, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self classObject) GetSignalList() ArrayOf[Dictionary] {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Object.get_signal_list, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[ArrayOf[Dictionary]](abi)
	abi.free()
	return ret
}

func (self classObject) GetSignalConnectionList(signal StringName) ArrayOf[Dictionary] {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[StringName](0, abi, signal)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Object.get_signal_connection_list, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[ArrayOf[Dictionary]](abi)
	abi.free()
	return ret
}

func (self classObject) GetIncomingConnections() ArrayOf[Dictionary] {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Object.get_incoming_connections, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[ArrayOf[Dictionary]](abi)
	abi.free()
	return ret
}

func (self classObject) Connect(signal StringName, callable Callable, flags Int) int64 {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[StringName](0, abi, signal)
	frameSet[Callable](1, abi, callable)
	frameSet[Int](2, abi, flags)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Object.connect, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[int64](abi)
	abi.free()
	return ret
}

func (self classObject) Disconnect(signal StringName, callable Callable) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[StringName](0, abi, signal)
	frameSet[Callable](1, abi, callable)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Object.disconnect, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classObject) IsConnected(signal StringName, callable Callable) bool {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[StringName](0, abi, signal)
	frameSet[Callable](1, abi, callable)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Object.is_connected, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self classObject) SetBlockSignals(enable bool) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[bool](0, abi, enable)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Object.set_block_signals, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classObject) IsBlockingSignals() bool {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Object.is_blocking_signals, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self classObject) NotifyPropertyListChanged() {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Object.notify_property_list_changed, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classObject) SetMessageTranslation(enable bool) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[bool](0, abi, enable)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Object.set_message_translation, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classObject) CanTranslateMessages() bool {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Object.can_translate_messages, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self classObject) Tr(ctx Context, message StringName, context StringName) String {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[StringName](0, abi, message)
	frameSet[StringName](1, abi, context)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Object.tr, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[uintptr](abi)
	abi.free()
	return mmm.Make[API, String, uintptr](ctx, selfPtr.API, ret)
}

func (self classObject) TrN(ctx Context, message StringName, plural_message StringName, n Int, context StringName) String {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[StringName](0, abi, message)
	frameSet[StringName](1, abi, plural_message)
	frameSet[Int](2, abi, n)
	frameSet[StringName](3, abi, context)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Object.tr_n, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[uintptr](abi)
	abi.free()
	return mmm.Make[API, String, uintptr](ctx, selfPtr.API, ret)
}

func (self classObject) IsQueuedForDeletion() bool {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Object.is_queued_for_deletion, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self classObject) CancelFree() {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Object.cancel_free, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classObject) virtual(name string) reflect.Value {
	switch name {
	default:
		return self.Super().virtual(name)
	}
}

type classPackedScene struct {
	Class[classPackedScene, Resource]
}

func (self classPackedScene) Resource() Resource { return *self.Super() }

func (self classPackedScene) RefCounted() RefCounted { return *self.Super().Super() }

func (self classPackedScene) Object() Object { return *self.Super().Super().Super() }

func (self classPackedScene) Pack(path Node) int64 {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Node](0, abi, path)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.PackedScene.pack, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[int64](abi)
	abi.free()
	return ret
}

func (self classPackedScene) Instantiate(edit_state PackedSceneGenEditState) Node {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[PackedSceneGenEditState](0, abi, edit_state)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.PackedScene.instantiate, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Node](abi)
	abi.free()
	return ret
}

func (self classPackedScene) CanInstantiate() bool {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.PackedScene.can_instantiate, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self classPackedScene) GetState() SceneState {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.PackedScene.get_state, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[SceneState](abi)
	abi.free()
	return ret
}

func (self classPackedScene) virtual(name string) reflect.Value {
	switch name {
	default:
		return self.Super().virtual(name)
	}
}

type classPacketPeer struct {
	Class[classPacketPeer, RefCounted]
}

func (self classPacketPeer) RefCounted() RefCounted { return *self.Super() }

func (self classPacketPeer) Object() Object { return *self.Super().Super() }

func (self classPacketPeer) GetVar(ctx Context, allow_objects bool) Variant {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[bool](0, abi, allow_objects)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.PacketPeer.get_var, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[[3]uintptr](abi)
	abi.free()
	return mmm.Make[API, Variant, [3]uintptr](ctx, selfPtr.API, ret)
}

func (self classPacketPeer) PutVar(v Variant, full_objects bool) int64 {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Variant](0, abi, v)
	frameSet[bool](1, abi, full_objects)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.PacketPeer.put_var, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[int64](abi)
	abi.free()
	return ret
}

func (self classPacketPeer) GetPacket(ctx Context) PackedByteArray {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.PacketPeer.get_packet, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[[2]uintptr](abi)
	abi.free()
	return mmm.Make[API, PackedByteArray, [2]uintptr](ctx, selfPtr.API, ret)
}

func (self classPacketPeer) PutPacket(buffer PackedByteArray) int64 {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[PackedByteArray](0, abi, buffer)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.PacketPeer.put_packet, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[int64](abi)
	abi.free()
	return ret
}

func (self classPacketPeer) GetPacketError() int64 {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.PacketPeer.get_packet_error, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[int64](abi)
	abi.free()
	return ret
}

func (self classPacketPeer) GetAvailablePacketCount() Int {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.PacketPeer.get_available_packet_count, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Int](abi)
	abi.free()
	return ret
}

func (self classPacketPeer) GetEncodeBufferMaxSize() Int {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.PacketPeer.get_encode_buffer_max_size, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Int](abi)
	abi.free()
	return ret
}

func (self classPacketPeer) SetEncodeBufferMaxSize(max_size Int) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Int](0, abi, max_size)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.PacketPeer.set_encode_buffer_max_size, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classPacketPeer) virtual(name string) reflect.Value {
	switch name {
	default:
		return self.Super().virtual(name)
	}
}

type classPhysicsDirectSpaceState2D struct {
	Class[classPhysicsDirectSpaceState2D, Object]
}

func (self classPhysicsDirectSpaceState2D) Object() Object { return *self.Super() }

func (self classPhysicsDirectSpaceState2D) IntersectPoint(parameters PhysicsPointQueryParameters2D, max_results Int) ArrayOf[Dictionary] {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[PhysicsPointQueryParameters2D](0, abi, parameters)
	frameSet[Int](1, abi, max_results)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.PhysicsDirectSpaceState2D.intersect_point, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[ArrayOf[Dictionary]](abi)
	abi.free()
	return ret
}

func (self classPhysicsDirectSpaceState2D) IntersectRay(ctx Context, parameters PhysicsRayQueryParameters2D) Dictionary {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[PhysicsRayQueryParameters2D](0, abi, parameters)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.PhysicsDirectSpaceState2D.intersect_ray, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[uintptr](abi)
	abi.free()
	return mmm.Make[API, Dictionary, uintptr](ctx, selfPtr.API, ret)
}

func (self classPhysicsDirectSpaceState2D) IntersectShape(parameters PhysicsShapeQueryParameters2D, max_results Int) ArrayOf[Dictionary] {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[PhysicsShapeQueryParameters2D](0, abi, parameters)
	frameSet[Int](1, abi, max_results)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.PhysicsDirectSpaceState2D.intersect_shape, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[ArrayOf[Dictionary]](abi)
	abi.free()
	return ret
}

func (self classPhysicsDirectSpaceState2D) CastMotion(ctx Context, parameters PhysicsShapeQueryParameters2D) PackedFloat32Array {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[PhysicsShapeQueryParameters2D](0, abi, parameters)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.PhysicsDirectSpaceState2D.cast_motion, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[[2]uintptr](abi)
	abi.free()
	return mmm.Make[API, PackedFloat32Array, [2]uintptr](ctx, selfPtr.API, ret)
}

func (self classPhysicsDirectSpaceState2D) CollideShape(parameters PhysicsShapeQueryParameters2D, max_results Int) ArrayOf[Vector2] {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[PhysicsShapeQueryParameters2D](0, abi, parameters)
	frameSet[Int](1, abi, max_results)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.PhysicsDirectSpaceState2D.collide_shape, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[ArrayOf[Vector2]](abi)
	abi.free()
	return ret
}

func (self classPhysicsDirectSpaceState2D) GetRestInfo(ctx Context, parameters PhysicsShapeQueryParameters2D) Dictionary {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[PhysicsShapeQueryParameters2D](0, abi, parameters)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.PhysicsDirectSpaceState2D.get_rest_info, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[uintptr](abi)
	abi.free()
	return mmm.Make[API, Dictionary, uintptr](ctx, selfPtr.API, ret)
}

func (self classPhysicsDirectSpaceState2D) virtual(name string) reflect.Value {
	switch name {
	default:
		return self.Super().virtual(name)
	}
}

type classPhysicsDirectSpaceState3D struct {
	Class[classPhysicsDirectSpaceState3D, Object]
}

func (self classPhysicsDirectSpaceState3D) Object() Object { return *self.Super() }

func (self classPhysicsDirectSpaceState3D) IntersectPoint(parameters PhysicsPointQueryParameters3D, max_results Int) ArrayOf[Dictionary] {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[PhysicsPointQueryParameters3D](0, abi, parameters)
	frameSet[Int](1, abi, max_results)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.PhysicsDirectSpaceState3D.intersect_point, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[ArrayOf[Dictionary]](abi)
	abi.free()
	return ret
}

func (self classPhysicsDirectSpaceState3D) IntersectRay(ctx Context, parameters PhysicsRayQueryParameters3D) Dictionary {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[PhysicsRayQueryParameters3D](0, abi, parameters)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.PhysicsDirectSpaceState3D.intersect_ray, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[uintptr](abi)
	abi.free()
	return mmm.Make[API, Dictionary, uintptr](ctx, selfPtr.API, ret)
}

func (self classPhysicsDirectSpaceState3D) IntersectShape(parameters PhysicsShapeQueryParameters3D, max_results Int) ArrayOf[Dictionary] {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[PhysicsShapeQueryParameters3D](0, abi, parameters)
	frameSet[Int](1, abi, max_results)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.PhysicsDirectSpaceState3D.intersect_shape, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[ArrayOf[Dictionary]](abi)
	abi.free()
	return ret
}

func (self classPhysicsDirectSpaceState3D) CastMotion(ctx Context, parameters PhysicsShapeQueryParameters3D) PackedFloat32Array {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[PhysicsShapeQueryParameters3D](0, abi, parameters)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.PhysicsDirectSpaceState3D.cast_motion, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[[2]uintptr](abi)
	abi.free()
	return mmm.Make[API, PackedFloat32Array, [2]uintptr](ctx, selfPtr.API, ret)
}

func (self classPhysicsDirectSpaceState3D) CollideShape(parameters PhysicsShapeQueryParameters3D, max_results Int) ArrayOf[Vector3] {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[PhysicsShapeQueryParameters3D](0, abi, parameters)
	frameSet[Int](1, abi, max_results)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.PhysicsDirectSpaceState3D.collide_shape, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[ArrayOf[Vector3]](abi)
	abi.free()
	return ret
}

func (self classPhysicsDirectSpaceState3D) GetRestInfo(ctx Context, parameters PhysicsShapeQueryParameters3D) Dictionary {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[PhysicsShapeQueryParameters3D](0, abi, parameters)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.PhysicsDirectSpaceState3D.get_rest_info, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[uintptr](abi)
	abi.free()
	return mmm.Make[API, Dictionary, uintptr](ctx, selfPtr.API, ret)
}

func (self classPhysicsDirectSpaceState3D) virtual(name string) reflect.Value {
	switch name {
	default:
		return self.Super().virtual(name)
	}
}

type classPhysicsPointQueryParameters2D struct {
	Class[classPhysicsPointQueryParameters2D, RefCounted]
}

func (self classPhysicsPointQueryParameters2D) RefCounted() RefCounted { return *self.Super() }

func (self classPhysicsPointQueryParameters2D) Object() Object { return *self.Super().Super() }

func (self classPhysicsPointQueryParameters2D) SetPosition(position Vector2) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Vector2](0, abi, position)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.PhysicsPointQueryParameters2D.set_position, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classPhysicsPointQueryParameters2D) GetPosition() Vector2 {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.PhysicsPointQueryParameters2D.get_position, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Vector2](abi)
	abi.free()
	return ret
}

func (self classPhysicsPointQueryParameters2D) SetCanvasInstanceId(canvas_instance_id Int) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Int](0, abi, canvas_instance_id)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.PhysicsPointQueryParameters2D.set_canvas_instance_id, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classPhysicsPointQueryParameters2D) GetCanvasInstanceId() Int {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.PhysicsPointQueryParameters2D.get_canvas_instance_id, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Int](abi)
	abi.free()
	return ret
}

func (self classPhysicsPointQueryParameters2D) SetCollisionMask(collision_mask Int) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Int](0, abi, collision_mask)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.PhysicsPointQueryParameters2D.set_collision_mask, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classPhysicsPointQueryParameters2D) GetCollisionMask() Int {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.PhysicsPointQueryParameters2D.get_collision_mask, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Int](abi)
	abi.free()
	return ret
}

func (self classPhysicsPointQueryParameters2D) SetExclude(exclude ArrayOf[RID]) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[ArrayOf[RID]](0, abi, exclude)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.PhysicsPointQueryParameters2D.set_exclude, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classPhysicsPointQueryParameters2D) GetExclude() ArrayOf[RID] {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.PhysicsPointQueryParameters2D.get_exclude, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[ArrayOf[RID]](abi)
	abi.free()
	return ret
}

func (self classPhysicsPointQueryParameters2D) SetCollideWithBodies(enable bool) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[bool](0, abi, enable)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.PhysicsPointQueryParameters2D.set_collide_with_bodies, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classPhysicsPointQueryParameters2D) IsCollideWithBodiesEnabled() bool {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.PhysicsPointQueryParameters2D.is_collide_with_bodies_enabled, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self classPhysicsPointQueryParameters2D) SetCollideWithAreas(enable bool) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[bool](0, abi, enable)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.PhysicsPointQueryParameters2D.set_collide_with_areas, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classPhysicsPointQueryParameters2D) IsCollideWithAreasEnabled() bool {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.PhysicsPointQueryParameters2D.is_collide_with_areas_enabled, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self classPhysicsPointQueryParameters2D) virtual(name string) reflect.Value {
	switch name {
	default:
		return self.Super().virtual(name)
	}
}

type classPhysicsPointQueryParameters3D struct {
	Class[classPhysicsPointQueryParameters3D, RefCounted]
}

func (self classPhysicsPointQueryParameters3D) RefCounted() RefCounted { return *self.Super() }

func (self classPhysicsPointQueryParameters3D) Object() Object { return *self.Super().Super() }

func (self classPhysicsPointQueryParameters3D) SetPosition(position Vector3) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Vector3](0, abi, position)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.PhysicsPointQueryParameters3D.set_position, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classPhysicsPointQueryParameters3D) GetPosition() Vector3 {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.PhysicsPointQueryParameters3D.get_position, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Vector3](abi)
	abi.free()
	return ret
}

func (self classPhysicsPointQueryParameters3D) SetCollisionMask(collision_mask Int) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Int](0, abi, collision_mask)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.PhysicsPointQueryParameters3D.set_collision_mask, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classPhysicsPointQueryParameters3D) GetCollisionMask() Int {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.PhysicsPointQueryParameters3D.get_collision_mask, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Int](abi)
	abi.free()
	return ret
}

func (self classPhysicsPointQueryParameters3D) SetExclude(exclude ArrayOf[RID]) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[ArrayOf[RID]](0, abi, exclude)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.PhysicsPointQueryParameters3D.set_exclude, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classPhysicsPointQueryParameters3D) GetExclude() ArrayOf[RID] {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.PhysicsPointQueryParameters3D.get_exclude, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[ArrayOf[RID]](abi)
	abi.free()
	return ret
}

func (self classPhysicsPointQueryParameters3D) SetCollideWithBodies(enable bool) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[bool](0, abi, enable)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.PhysicsPointQueryParameters3D.set_collide_with_bodies, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classPhysicsPointQueryParameters3D) IsCollideWithBodiesEnabled() bool {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.PhysicsPointQueryParameters3D.is_collide_with_bodies_enabled, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self classPhysicsPointQueryParameters3D) SetCollideWithAreas(enable bool) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[bool](0, abi, enable)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.PhysicsPointQueryParameters3D.set_collide_with_areas, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classPhysicsPointQueryParameters3D) IsCollideWithAreasEnabled() bool {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.PhysicsPointQueryParameters3D.is_collide_with_areas_enabled, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self classPhysicsPointQueryParameters3D) virtual(name string) reflect.Value {
	switch name {
	default:
		return self.Super().virtual(name)
	}
}

type classPhysicsRayQueryParameters2D struct {
	Class[classPhysicsRayQueryParameters2D, RefCounted]
}

func (self classPhysicsRayQueryParameters2D) RefCounted() RefCounted { return *self.Super() }

func (self classPhysicsRayQueryParameters2D) Object() Object { return *self.Super().Super() }

func (self classPhysicsRayQueryParameters2D) Create(from Vector2, to Vector2, collision_mask Int, exclude ArrayOf[RID]) PhysicsRayQueryParameters2D {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Vector2](0, abi, from)
	frameSet[Vector2](1, abi, to)
	frameSet[Int](2, abi, collision_mask)
	frameSet[ArrayOf[RID]](3, abi, exclude)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.PhysicsRayQueryParameters2D.create, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[PhysicsRayQueryParameters2D](abi)
	abi.free()
	return ret
}

func (self classPhysicsRayQueryParameters2D) SetFrom(from Vector2) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Vector2](0, abi, from)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.PhysicsRayQueryParameters2D.set_from, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classPhysicsRayQueryParameters2D) GetFrom() Vector2 {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.PhysicsRayQueryParameters2D.get_from, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Vector2](abi)
	abi.free()
	return ret
}

func (self classPhysicsRayQueryParameters2D) SetTo(to Vector2) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Vector2](0, abi, to)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.PhysicsRayQueryParameters2D.set_to, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classPhysicsRayQueryParameters2D) GetTo() Vector2 {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.PhysicsRayQueryParameters2D.get_to, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Vector2](abi)
	abi.free()
	return ret
}

func (self classPhysicsRayQueryParameters2D) SetCollisionMask(collision_mask Int) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Int](0, abi, collision_mask)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.PhysicsRayQueryParameters2D.set_collision_mask, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classPhysicsRayQueryParameters2D) GetCollisionMask() Int {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.PhysicsRayQueryParameters2D.get_collision_mask, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Int](abi)
	abi.free()
	return ret
}

func (self classPhysicsRayQueryParameters2D) SetExclude(exclude ArrayOf[RID]) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[ArrayOf[RID]](0, abi, exclude)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.PhysicsRayQueryParameters2D.set_exclude, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classPhysicsRayQueryParameters2D) GetExclude() ArrayOf[RID] {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.PhysicsRayQueryParameters2D.get_exclude, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[ArrayOf[RID]](abi)
	abi.free()
	return ret
}

func (self classPhysicsRayQueryParameters2D) SetCollideWithBodies(enable bool) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[bool](0, abi, enable)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.PhysicsRayQueryParameters2D.set_collide_with_bodies, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classPhysicsRayQueryParameters2D) IsCollideWithBodiesEnabled() bool {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.PhysicsRayQueryParameters2D.is_collide_with_bodies_enabled, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self classPhysicsRayQueryParameters2D) SetCollideWithAreas(enable bool) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[bool](0, abi, enable)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.PhysicsRayQueryParameters2D.set_collide_with_areas, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classPhysicsRayQueryParameters2D) IsCollideWithAreasEnabled() bool {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.PhysicsRayQueryParameters2D.is_collide_with_areas_enabled, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self classPhysicsRayQueryParameters2D) SetHitFromInside(enable bool) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[bool](0, abi, enable)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.PhysicsRayQueryParameters2D.set_hit_from_inside, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classPhysicsRayQueryParameters2D) IsHitFromInsideEnabled() bool {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.PhysicsRayQueryParameters2D.is_hit_from_inside_enabled, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self classPhysicsRayQueryParameters2D) virtual(name string) reflect.Value {
	switch name {
	default:
		return self.Super().virtual(name)
	}
}

type classPhysicsRayQueryParameters3D struct {
	Class[classPhysicsRayQueryParameters3D, RefCounted]
}

func (self classPhysicsRayQueryParameters3D) RefCounted() RefCounted { return *self.Super() }

func (self classPhysicsRayQueryParameters3D) Object() Object { return *self.Super().Super() }

func (self classPhysicsRayQueryParameters3D) Create(from Vector3, to Vector3, collision_mask Int, exclude ArrayOf[RID]) PhysicsRayQueryParameters3D {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Vector3](0, abi, from)
	frameSet[Vector3](1, abi, to)
	frameSet[Int](2, abi, collision_mask)
	frameSet[ArrayOf[RID]](3, abi, exclude)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.PhysicsRayQueryParameters3D.create, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[PhysicsRayQueryParameters3D](abi)
	abi.free()
	return ret
}

func (self classPhysicsRayQueryParameters3D) SetFrom(from Vector3) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Vector3](0, abi, from)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.PhysicsRayQueryParameters3D.set_from, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classPhysicsRayQueryParameters3D) GetFrom() Vector3 {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.PhysicsRayQueryParameters3D.get_from, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Vector3](abi)
	abi.free()
	return ret
}

func (self classPhysicsRayQueryParameters3D) SetTo(to Vector3) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Vector3](0, abi, to)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.PhysicsRayQueryParameters3D.set_to, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classPhysicsRayQueryParameters3D) GetTo() Vector3 {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.PhysicsRayQueryParameters3D.get_to, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Vector3](abi)
	abi.free()
	return ret
}

func (self classPhysicsRayQueryParameters3D) SetCollisionMask(collision_mask Int) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Int](0, abi, collision_mask)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.PhysicsRayQueryParameters3D.set_collision_mask, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classPhysicsRayQueryParameters3D) GetCollisionMask() Int {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.PhysicsRayQueryParameters3D.get_collision_mask, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Int](abi)
	abi.free()
	return ret
}

func (self classPhysicsRayQueryParameters3D) SetExclude(exclude ArrayOf[RID]) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[ArrayOf[RID]](0, abi, exclude)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.PhysicsRayQueryParameters3D.set_exclude, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classPhysicsRayQueryParameters3D) GetExclude() ArrayOf[RID] {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.PhysicsRayQueryParameters3D.get_exclude, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[ArrayOf[RID]](abi)
	abi.free()
	return ret
}

func (self classPhysicsRayQueryParameters3D) SetCollideWithBodies(enable bool) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[bool](0, abi, enable)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.PhysicsRayQueryParameters3D.set_collide_with_bodies, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classPhysicsRayQueryParameters3D) IsCollideWithBodiesEnabled() bool {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.PhysicsRayQueryParameters3D.is_collide_with_bodies_enabled, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self classPhysicsRayQueryParameters3D) SetCollideWithAreas(enable bool) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[bool](0, abi, enable)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.PhysicsRayQueryParameters3D.set_collide_with_areas, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classPhysicsRayQueryParameters3D) IsCollideWithAreasEnabled() bool {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.PhysicsRayQueryParameters3D.is_collide_with_areas_enabled, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self classPhysicsRayQueryParameters3D) SetHitFromInside(enable bool) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[bool](0, abi, enable)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.PhysicsRayQueryParameters3D.set_hit_from_inside, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classPhysicsRayQueryParameters3D) IsHitFromInsideEnabled() bool {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.PhysicsRayQueryParameters3D.is_hit_from_inside_enabled, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self classPhysicsRayQueryParameters3D) SetHitBackFaces(enable bool) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[bool](0, abi, enable)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.PhysicsRayQueryParameters3D.set_hit_back_faces, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classPhysicsRayQueryParameters3D) IsHitBackFacesEnabled() bool {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.PhysicsRayQueryParameters3D.is_hit_back_faces_enabled, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self classPhysicsRayQueryParameters3D) virtual(name string) reflect.Value {
	switch name {
	default:
		return self.Super().virtual(name)
	}
}

type classPhysicsShapeQueryParameters2D struct {
	Class[classPhysicsShapeQueryParameters2D, RefCounted]
}

func (self classPhysicsShapeQueryParameters2D) RefCounted() RefCounted { return *self.Super() }

func (self classPhysicsShapeQueryParameters2D) Object() Object { return *self.Super().Super() }

func (self classPhysicsShapeQueryParameters2D) SetShape(shape Resource) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Resource](0, abi, shape)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.PhysicsShapeQueryParameters2D.set_shape, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classPhysicsShapeQueryParameters2D) GetShape() Resource {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.PhysicsShapeQueryParameters2D.get_shape, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Resource](abi)
	abi.free()
	return ret
}

func (self classPhysicsShapeQueryParameters2D) SetShapeRid(shape RID) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, shape)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.PhysicsShapeQueryParameters2D.set_shape_rid, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classPhysicsShapeQueryParameters2D) GetShapeRid() RID {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.PhysicsShapeQueryParameters2D.get_shape_rid, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[RID](abi)
	abi.free()
	return ret
}

func (self classPhysicsShapeQueryParameters2D) SetTransform(transform Transform2D) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Transform2D](0, abi, transform)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.PhysicsShapeQueryParameters2D.set_transform, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classPhysicsShapeQueryParameters2D) GetTransform() Transform2D {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.PhysicsShapeQueryParameters2D.get_transform, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Transform2D](abi)
	abi.free()
	return ret
}

func (self classPhysicsShapeQueryParameters2D) SetMotion(motion Vector2) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Vector2](0, abi, motion)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.PhysicsShapeQueryParameters2D.set_motion, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classPhysicsShapeQueryParameters2D) GetMotion() Vector2 {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.PhysicsShapeQueryParameters2D.get_motion, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Vector2](abi)
	abi.free()
	return ret
}

func (self classPhysicsShapeQueryParameters2D) SetMargin(margin Float) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Float](0, abi, margin)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.PhysicsShapeQueryParameters2D.set_margin, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classPhysicsShapeQueryParameters2D) GetMargin() Float {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.PhysicsShapeQueryParameters2D.get_margin, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Float](abi)
	abi.free()
	return ret
}

func (self classPhysicsShapeQueryParameters2D) SetCollisionMask(collision_mask Int) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Int](0, abi, collision_mask)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.PhysicsShapeQueryParameters2D.set_collision_mask, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classPhysicsShapeQueryParameters2D) GetCollisionMask() Int {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.PhysicsShapeQueryParameters2D.get_collision_mask, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Int](abi)
	abi.free()
	return ret
}

func (self classPhysicsShapeQueryParameters2D) SetExclude(exclude ArrayOf[RID]) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[ArrayOf[RID]](0, abi, exclude)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.PhysicsShapeQueryParameters2D.set_exclude, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classPhysicsShapeQueryParameters2D) GetExclude() ArrayOf[RID] {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.PhysicsShapeQueryParameters2D.get_exclude, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[ArrayOf[RID]](abi)
	abi.free()
	return ret
}

func (self classPhysicsShapeQueryParameters2D) SetCollideWithBodies(enable bool) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[bool](0, abi, enable)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.PhysicsShapeQueryParameters2D.set_collide_with_bodies, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classPhysicsShapeQueryParameters2D) IsCollideWithBodiesEnabled() bool {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.PhysicsShapeQueryParameters2D.is_collide_with_bodies_enabled, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self classPhysicsShapeQueryParameters2D) SetCollideWithAreas(enable bool) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[bool](0, abi, enable)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.PhysicsShapeQueryParameters2D.set_collide_with_areas, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classPhysicsShapeQueryParameters2D) IsCollideWithAreasEnabled() bool {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.PhysicsShapeQueryParameters2D.is_collide_with_areas_enabled, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self classPhysicsShapeQueryParameters2D) virtual(name string) reflect.Value {
	switch name {
	default:
		return self.Super().virtual(name)
	}
}

type classPhysicsShapeQueryParameters3D struct {
	Class[classPhysicsShapeQueryParameters3D, RefCounted]
}

func (self classPhysicsShapeQueryParameters3D) RefCounted() RefCounted { return *self.Super() }

func (self classPhysicsShapeQueryParameters3D) Object() Object { return *self.Super().Super() }

func (self classPhysicsShapeQueryParameters3D) SetShape(shape Resource) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Resource](0, abi, shape)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.PhysicsShapeQueryParameters3D.set_shape, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classPhysicsShapeQueryParameters3D) GetShape() Resource {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.PhysicsShapeQueryParameters3D.get_shape, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Resource](abi)
	abi.free()
	return ret
}

func (self classPhysicsShapeQueryParameters3D) SetShapeRid(shape RID) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, shape)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.PhysicsShapeQueryParameters3D.set_shape_rid, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classPhysicsShapeQueryParameters3D) GetShapeRid() RID {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.PhysicsShapeQueryParameters3D.get_shape_rid, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[RID](abi)
	abi.free()
	return ret
}

func (self classPhysicsShapeQueryParameters3D) SetTransform(transform Transform3D) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Transform3D](0, abi, transform)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.PhysicsShapeQueryParameters3D.set_transform, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classPhysicsShapeQueryParameters3D) GetTransform() Transform3D {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.PhysicsShapeQueryParameters3D.get_transform, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Transform3D](abi)
	abi.free()
	return ret
}

func (self classPhysicsShapeQueryParameters3D) SetMotion(motion Vector3) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Vector3](0, abi, motion)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.PhysicsShapeQueryParameters3D.set_motion, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classPhysicsShapeQueryParameters3D) GetMotion() Vector3 {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.PhysicsShapeQueryParameters3D.get_motion, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Vector3](abi)
	abi.free()
	return ret
}

func (self classPhysicsShapeQueryParameters3D) SetMargin(margin Float) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Float](0, abi, margin)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.PhysicsShapeQueryParameters3D.set_margin, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classPhysicsShapeQueryParameters3D) GetMargin() Float {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.PhysicsShapeQueryParameters3D.get_margin, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Float](abi)
	abi.free()
	return ret
}

func (self classPhysicsShapeQueryParameters3D) SetCollisionMask(collision_mask Int) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Int](0, abi, collision_mask)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.PhysicsShapeQueryParameters3D.set_collision_mask, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classPhysicsShapeQueryParameters3D) GetCollisionMask() Int {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.PhysicsShapeQueryParameters3D.get_collision_mask, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Int](abi)
	abi.free()
	return ret
}

func (self classPhysicsShapeQueryParameters3D) SetExclude(exclude ArrayOf[RID]) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[ArrayOf[RID]](0, abi, exclude)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.PhysicsShapeQueryParameters3D.set_exclude, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classPhysicsShapeQueryParameters3D) GetExclude() ArrayOf[RID] {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.PhysicsShapeQueryParameters3D.get_exclude, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[ArrayOf[RID]](abi)
	abi.free()
	return ret
}

func (self classPhysicsShapeQueryParameters3D) SetCollideWithBodies(enable bool) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[bool](0, abi, enable)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.PhysicsShapeQueryParameters3D.set_collide_with_bodies, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classPhysicsShapeQueryParameters3D) IsCollideWithBodiesEnabled() bool {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.PhysicsShapeQueryParameters3D.is_collide_with_bodies_enabled, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self classPhysicsShapeQueryParameters3D) SetCollideWithAreas(enable bool) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[bool](0, abi, enable)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.PhysicsShapeQueryParameters3D.set_collide_with_areas, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classPhysicsShapeQueryParameters3D) IsCollideWithAreasEnabled() bool {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.PhysicsShapeQueryParameters3D.is_collide_with_areas_enabled, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self classPhysicsShapeQueryParameters3D) virtual(name string) reflect.Value {
	switch name {
	default:
		return self.Super().virtual(name)
	}
}

type classPropertyTweener struct {
	Class[classPropertyTweener, Tweener]
}

func (self classPropertyTweener) Tweener() Tweener { return *self.Super() }

func (self classPropertyTweener) RefCounted() RefCounted { return *self.Super().Super() }

func (self classPropertyTweener) Object() Object { return *self.Super().Super().Super() }

func (self classPropertyTweener) From(value Variant) PropertyTweener {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Variant](0, abi, value)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.PropertyTweener.from, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[PropertyTweener](abi)
	abi.free()
	return ret
}

func (self classPropertyTweener) FromCurrent() PropertyTweener {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.PropertyTweener.from_current, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[PropertyTweener](abi)
	abi.free()
	return ret
}

func (self classPropertyTweener) AsRelative() PropertyTweener {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.PropertyTweener.as_relative, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[PropertyTweener](abi)
	abi.free()
	return ret
}

func (self classPropertyTweener) SetTrans(trans TweenTransitionType) PropertyTweener {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[TweenTransitionType](0, abi, trans)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.PropertyTweener.set_trans, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[PropertyTweener](abi)
	abi.free()
	return ret
}

func (self classPropertyTweener) SetEase(ease TweenEaseType) PropertyTweener {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[TweenEaseType](0, abi, ease)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.PropertyTweener.set_ease, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[PropertyTweener](abi)
	abi.free()
	return ret
}

func (self classPropertyTweener) SetDelay(delay Float) PropertyTweener {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Float](0, abi, delay)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.PropertyTweener.set_delay, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[PropertyTweener](abi)
	abi.free()
	return ret
}

func (self classPropertyTweener) virtual(name string) reflect.Value {
	switch name {
	default:
		return self.Super().virtual(name)
	}
}

type classRDAttachmentFormat struct {
	Class[classRDAttachmentFormat, RefCounted]
}

func (self classRDAttachmentFormat) RefCounted() RefCounted { return *self.Super() }

func (self classRDAttachmentFormat) Object() Object { return *self.Super().Super() }

func (self classRDAttachmentFormat) SetFormat(p_member RenderingDeviceDataFormat) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RenderingDeviceDataFormat](0, abi, p_member)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RDAttachmentFormat.set_format, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classRDAttachmentFormat) GetFormat() RenderingDeviceDataFormat {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RDAttachmentFormat.get_format, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[RenderingDeviceDataFormat](abi)
	abi.free()
	return ret
}

func (self classRDAttachmentFormat) SetSamples(p_member RenderingDeviceTextureSamples) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RenderingDeviceTextureSamples](0, abi, p_member)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RDAttachmentFormat.set_samples, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classRDAttachmentFormat) GetSamples() RenderingDeviceTextureSamples {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RDAttachmentFormat.get_samples, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[RenderingDeviceTextureSamples](abi)
	abi.free()
	return ret
}

func (self classRDAttachmentFormat) SetUsageFlags(p_member Int) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Int](0, abi, p_member)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RDAttachmentFormat.set_usage_flags, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classRDAttachmentFormat) GetUsageFlags() Int {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RDAttachmentFormat.get_usage_flags, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Int](abi)
	abi.free()
	return ret
}

func (self classRDAttachmentFormat) virtual(name string) reflect.Value {
	switch name {
	default:
		return self.Super().virtual(name)
	}
}

type classRDFramebufferPass struct {
	Class[classRDFramebufferPass, RefCounted]
}

func (self classRDFramebufferPass) RefCounted() RefCounted { return *self.Super() }

func (self classRDFramebufferPass) Object() Object { return *self.Super().Super() }

func (self classRDFramebufferPass) SetColorAttachments(p_member PackedInt32Array) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[PackedInt32Array](0, abi, p_member)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RDFramebufferPass.set_color_attachments, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classRDFramebufferPass) GetColorAttachments(ctx Context) PackedInt32Array {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RDFramebufferPass.get_color_attachments, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[[2]uintptr](abi)
	abi.free()
	return mmm.Make[API, PackedInt32Array, [2]uintptr](ctx, selfPtr.API, ret)
}

func (self classRDFramebufferPass) SetInputAttachments(p_member PackedInt32Array) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[PackedInt32Array](0, abi, p_member)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RDFramebufferPass.set_input_attachments, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classRDFramebufferPass) GetInputAttachments(ctx Context) PackedInt32Array {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RDFramebufferPass.get_input_attachments, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[[2]uintptr](abi)
	abi.free()
	return mmm.Make[API, PackedInt32Array, [2]uintptr](ctx, selfPtr.API, ret)
}

func (self classRDFramebufferPass) SetResolveAttachments(p_member PackedInt32Array) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[PackedInt32Array](0, abi, p_member)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RDFramebufferPass.set_resolve_attachments, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classRDFramebufferPass) GetResolveAttachments(ctx Context) PackedInt32Array {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RDFramebufferPass.get_resolve_attachments, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[[2]uintptr](abi)
	abi.free()
	return mmm.Make[API, PackedInt32Array, [2]uintptr](ctx, selfPtr.API, ret)
}

func (self classRDFramebufferPass) SetPreserveAttachments(p_member PackedInt32Array) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[PackedInt32Array](0, abi, p_member)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RDFramebufferPass.set_preserve_attachments, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classRDFramebufferPass) GetPreserveAttachments(ctx Context) PackedInt32Array {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RDFramebufferPass.get_preserve_attachments, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[[2]uintptr](abi)
	abi.free()
	return mmm.Make[API, PackedInt32Array, [2]uintptr](ctx, selfPtr.API, ret)
}

func (self classRDFramebufferPass) SetDepthAttachment(p_member Int) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Int](0, abi, p_member)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RDFramebufferPass.set_depth_attachment, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classRDFramebufferPass) GetDepthAttachment() Int {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RDFramebufferPass.get_depth_attachment, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Int](abi)
	abi.free()
	return ret
}

func (self classRDFramebufferPass) virtual(name string) reflect.Value {
	switch name {
	default:
		return self.Super().virtual(name)
	}
}

type classRDPipelineColorBlendState struct {
	Class[classRDPipelineColorBlendState, RefCounted]
}

func (self classRDPipelineColorBlendState) RefCounted() RefCounted { return *self.Super() }

func (self classRDPipelineColorBlendState) Object() Object { return *self.Super().Super() }

func (self classRDPipelineColorBlendState) SetEnableLogicOp(p_member bool) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[bool](0, abi, p_member)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RDPipelineColorBlendState.set_enable_logic_op, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classRDPipelineColorBlendState) GetEnableLogicOp() bool {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RDPipelineColorBlendState.get_enable_logic_op, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self classRDPipelineColorBlendState) SetLogicOp(p_member RenderingDeviceLogicOperation) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RenderingDeviceLogicOperation](0, abi, p_member)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RDPipelineColorBlendState.set_logic_op, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classRDPipelineColorBlendState) GetLogicOp() RenderingDeviceLogicOperation {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RDPipelineColorBlendState.get_logic_op, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[RenderingDeviceLogicOperation](abi)
	abi.free()
	return ret
}

func (self classRDPipelineColorBlendState) SetBlendConstant(p_member Color) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Color](0, abi, p_member)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RDPipelineColorBlendState.set_blend_constant, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classRDPipelineColorBlendState) GetBlendConstant() Color {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RDPipelineColorBlendState.get_blend_constant, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Color](abi)
	abi.free()
	return ret
}

func (self classRDPipelineColorBlendState) SetAttachments(attachments ArrayOf[RDPipelineColorBlendStateAttachment]) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[ArrayOf[RDPipelineColorBlendStateAttachment]](0, abi, attachments)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RDPipelineColorBlendState.set_attachments, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classRDPipelineColorBlendState) GetAttachments() ArrayOf[RDPipelineColorBlendStateAttachment] {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RDPipelineColorBlendState.get_attachments, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[ArrayOf[RDPipelineColorBlendStateAttachment]](abi)
	abi.free()
	return ret
}

func (self classRDPipelineColorBlendState) virtual(name string) reflect.Value {
	switch name {
	default:
		return self.Super().virtual(name)
	}
}

type classRDPipelineColorBlendStateAttachment struct {
	Class[classRDPipelineColorBlendStateAttachment, RefCounted]
}

func (self classRDPipelineColorBlendStateAttachment) RefCounted() RefCounted { return *self.Super() }

func (self classRDPipelineColorBlendStateAttachment) Object() Object { return *self.Super().Super() }

func (self classRDPipelineColorBlendStateAttachment) SetAsMix() {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RDPipelineColorBlendStateAttachment.set_as_mix, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classRDPipelineColorBlendStateAttachment) SetEnableBlend(p_member bool) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[bool](0, abi, p_member)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RDPipelineColorBlendStateAttachment.set_enable_blend, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classRDPipelineColorBlendStateAttachment) GetEnableBlend() bool {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RDPipelineColorBlendStateAttachment.get_enable_blend, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self classRDPipelineColorBlendStateAttachment) SetSrcColorBlendFactor(p_member RenderingDeviceBlendFactor) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RenderingDeviceBlendFactor](0, abi, p_member)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RDPipelineColorBlendStateAttachment.set_src_color_blend_factor, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classRDPipelineColorBlendStateAttachment) GetSrcColorBlendFactor() RenderingDeviceBlendFactor {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RDPipelineColorBlendStateAttachment.get_src_color_blend_factor, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[RenderingDeviceBlendFactor](abi)
	abi.free()
	return ret
}

func (self classRDPipelineColorBlendStateAttachment) SetDstColorBlendFactor(p_member RenderingDeviceBlendFactor) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RenderingDeviceBlendFactor](0, abi, p_member)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RDPipelineColorBlendStateAttachment.set_dst_color_blend_factor, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classRDPipelineColorBlendStateAttachment) GetDstColorBlendFactor() RenderingDeviceBlendFactor {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RDPipelineColorBlendStateAttachment.get_dst_color_blend_factor, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[RenderingDeviceBlendFactor](abi)
	abi.free()
	return ret
}

func (self classRDPipelineColorBlendStateAttachment) SetColorBlendOp(p_member RenderingDeviceBlendOperation) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RenderingDeviceBlendOperation](0, abi, p_member)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RDPipelineColorBlendStateAttachment.set_color_blend_op, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classRDPipelineColorBlendStateAttachment) GetColorBlendOp() RenderingDeviceBlendOperation {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RDPipelineColorBlendStateAttachment.get_color_blend_op, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[RenderingDeviceBlendOperation](abi)
	abi.free()
	return ret
}

func (self classRDPipelineColorBlendStateAttachment) SetSrcAlphaBlendFactor(p_member RenderingDeviceBlendFactor) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RenderingDeviceBlendFactor](0, abi, p_member)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RDPipelineColorBlendStateAttachment.set_src_alpha_blend_factor, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classRDPipelineColorBlendStateAttachment) GetSrcAlphaBlendFactor() RenderingDeviceBlendFactor {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RDPipelineColorBlendStateAttachment.get_src_alpha_blend_factor, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[RenderingDeviceBlendFactor](abi)
	abi.free()
	return ret
}

func (self classRDPipelineColorBlendStateAttachment) SetDstAlphaBlendFactor(p_member RenderingDeviceBlendFactor) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RenderingDeviceBlendFactor](0, abi, p_member)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RDPipelineColorBlendStateAttachment.set_dst_alpha_blend_factor, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classRDPipelineColorBlendStateAttachment) GetDstAlphaBlendFactor() RenderingDeviceBlendFactor {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RDPipelineColorBlendStateAttachment.get_dst_alpha_blend_factor, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[RenderingDeviceBlendFactor](abi)
	abi.free()
	return ret
}

func (self classRDPipelineColorBlendStateAttachment) SetAlphaBlendOp(p_member RenderingDeviceBlendOperation) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RenderingDeviceBlendOperation](0, abi, p_member)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RDPipelineColorBlendStateAttachment.set_alpha_blend_op, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classRDPipelineColorBlendStateAttachment) GetAlphaBlendOp() RenderingDeviceBlendOperation {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RDPipelineColorBlendStateAttachment.get_alpha_blend_op, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[RenderingDeviceBlendOperation](abi)
	abi.free()
	return ret
}

func (self classRDPipelineColorBlendStateAttachment) SetWriteR(p_member bool) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[bool](0, abi, p_member)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RDPipelineColorBlendStateAttachment.set_write_r, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classRDPipelineColorBlendStateAttachment) GetWriteR() bool {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RDPipelineColorBlendStateAttachment.get_write_r, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self classRDPipelineColorBlendStateAttachment) SetWriteG(p_member bool) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[bool](0, abi, p_member)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RDPipelineColorBlendStateAttachment.set_write_g, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classRDPipelineColorBlendStateAttachment) GetWriteG() bool {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RDPipelineColorBlendStateAttachment.get_write_g, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self classRDPipelineColorBlendStateAttachment) SetWriteB(p_member bool) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[bool](0, abi, p_member)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RDPipelineColorBlendStateAttachment.set_write_b, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classRDPipelineColorBlendStateAttachment) GetWriteB() bool {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RDPipelineColorBlendStateAttachment.get_write_b, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self classRDPipelineColorBlendStateAttachment) SetWriteA(p_member bool) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[bool](0, abi, p_member)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RDPipelineColorBlendStateAttachment.set_write_a, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classRDPipelineColorBlendStateAttachment) GetWriteA() bool {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RDPipelineColorBlendStateAttachment.get_write_a, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self classRDPipelineColorBlendStateAttachment) virtual(name string) reflect.Value {
	switch name {
	default:
		return self.Super().virtual(name)
	}
}

type classRDPipelineDepthStencilState struct {
	Class[classRDPipelineDepthStencilState, RefCounted]
}

func (self classRDPipelineDepthStencilState) RefCounted() RefCounted { return *self.Super() }

func (self classRDPipelineDepthStencilState) Object() Object { return *self.Super().Super() }

func (self classRDPipelineDepthStencilState) SetEnableDepthTest(p_member bool) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[bool](0, abi, p_member)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RDPipelineDepthStencilState.set_enable_depth_test, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classRDPipelineDepthStencilState) GetEnableDepthTest() bool {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RDPipelineDepthStencilState.get_enable_depth_test, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self classRDPipelineDepthStencilState) SetEnableDepthWrite(p_member bool) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[bool](0, abi, p_member)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RDPipelineDepthStencilState.set_enable_depth_write, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classRDPipelineDepthStencilState) GetEnableDepthWrite() bool {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RDPipelineDepthStencilState.get_enable_depth_write, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self classRDPipelineDepthStencilState) SetDepthCompareOperator(p_member RenderingDeviceCompareOperator) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RenderingDeviceCompareOperator](0, abi, p_member)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RDPipelineDepthStencilState.set_depth_compare_operator, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classRDPipelineDepthStencilState) GetDepthCompareOperator() RenderingDeviceCompareOperator {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RDPipelineDepthStencilState.get_depth_compare_operator, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[RenderingDeviceCompareOperator](abi)
	abi.free()
	return ret
}

func (self classRDPipelineDepthStencilState) SetEnableDepthRange(p_member bool) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[bool](0, abi, p_member)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RDPipelineDepthStencilState.set_enable_depth_range, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classRDPipelineDepthStencilState) GetEnableDepthRange() bool {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RDPipelineDepthStencilState.get_enable_depth_range, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self classRDPipelineDepthStencilState) SetDepthRangeMin(p_member Float) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Float](0, abi, p_member)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RDPipelineDepthStencilState.set_depth_range_min, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classRDPipelineDepthStencilState) GetDepthRangeMin() Float {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RDPipelineDepthStencilState.get_depth_range_min, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Float](abi)
	abi.free()
	return ret
}

func (self classRDPipelineDepthStencilState) SetDepthRangeMax(p_member Float) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Float](0, abi, p_member)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RDPipelineDepthStencilState.set_depth_range_max, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classRDPipelineDepthStencilState) GetDepthRangeMax() Float {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RDPipelineDepthStencilState.get_depth_range_max, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Float](abi)
	abi.free()
	return ret
}

func (self classRDPipelineDepthStencilState) SetEnableStencil(p_member bool) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[bool](0, abi, p_member)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RDPipelineDepthStencilState.set_enable_stencil, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classRDPipelineDepthStencilState) GetEnableStencil() bool {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RDPipelineDepthStencilState.get_enable_stencil, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self classRDPipelineDepthStencilState) SetFrontOpFail(p_member RenderingDeviceStencilOperation) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RenderingDeviceStencilOperation](0, abi, p_member)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RDPipelineDepthStencilState.set_front_op_fail, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classRDPipelineDepthStencilState) GetFrontOpFail() RenderingDeviceStencilOperation {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RDPipelineDepthStencilState.get_front_op_fail, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[RenderingDeviceStencilOperation](abi)
	abi.free()
	return ret
}

func (self classRDPipelineDepthStencilState) SetFrontOpPass(p_member RenderingDeviceStencilOperation) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RenderingDeviceStencilOperation](0, abi, p_member)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RDPipelineDepthStencilState.set_front_op_pass, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classRDPipelineDepthStencilState) GetFrontOpPass() RenderingDeviceStencilOperation {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RDPipelineDepthStencilState.get_front_op_pass, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[RenderingDeviceStencilOperation](abi)
	abi.free()
	return ret
}

func (self classRDPipelineDepthStencilState) SetFrontOpDepthFail(p_member RenderingDeviceStencilOperation) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RenderingDeviceStencilOperation](0, abi, p_member)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RDPipelineDepthStencilState.set_front_op_depth_fail, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classRDPipelineDepthStencilState) GetFrontOpDepthFail() RenderingDeviceStencilOperation {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RDPipelineDepthStencilState.get_front_op_depth_fail, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[RenderingDeviceStencilOperation](abi)
	abi.free()
	return ret
}

func (self classRDPipelineDepthStencilState) SetFrontOpCompare(p_member RenderingDeviceCompareOperator) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RenderingDeviceCompareOperator](0, abi, p_member)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RDPipelineDepthStencilState.set_front_op_compare, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classRDPipelineDepthStencilState) GetFrontOpCompare() RenderingDeviceCompareOperator {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RDPipelineDepthStencilState.get_front_op_compare, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[RenderingDeviceCompareOperator](abi)
	abi.free()
	return ret
}

func (self classRDPipelineDepthStencilState) SetFrontOpCompareMask(p_member Int) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Int](0, abi, p_member)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RDPipelineDepthStencilState.set_front_op_compare_mask, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classRDPipelineDepthStencilState) GetFrontOpCompareMask() Int {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RDPipelineDepthStencilState.get_front_op_compare_mask, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Int](abi)
	abi.free()
	return ret
}

func (self classRDPipelineDepthStencilState) SetFrontOpWriteMask(p_member Int) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Int](0, abi, p_member)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RDPipelineDepthStencilState.set_front_op_write_mask, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classRDPipelineDepthStencilState) GetFrontOpWriteMask() Int {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RDPipelineDepthStencilState.get_front_op_write_mask, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Int](abi)
	abi.free()
	return ret
}

func (self classRDPipelineDepthStencilState) SetFrontOpReference(p_member Int) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Int](0, abi, p_member)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RDPipelineDepthStencilState.set_front_op_reference, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classRDPipelineDepthStencilState) GetFrontOpReference() Int {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RDPipelineDepthStencilState.get_front_op_reference, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Int](abi)
	abi.free()
	return ret
}

func (self classRDPipelineDepthStencilState) SetBackOpFail(p_member RenderingDeviceStencilOperation) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RenderingDeviceStencilOperation](0, abi, p_member)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RDPipelineDepthStencilState.set_back_op_fail, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classRDPipelineDepthStencilState) GetBackOpFail() RenderingDeviceStencilOperation {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RDPipelineDepthStencilState.get_back_op_fail, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[RenderingDeviceStencilOperation](abi)
	abi.free()
	return ret
}

func (self classRDPipelineDepthStencilState) SetBackOpPass(p_member RenderingDeviceStencilOperation) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RenderingDeviceStencilOperation](0, abi, p_member)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RDPipelineDepthStencilState.set_back_op_pass, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classRDPipelineDepthStencilState) GetBackOpPass() RenderingDeviceStencilOperation {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RDPipelineDepthStencilState.get_back_op_pass, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[RenderingDeviceStencilOperation](abi)
	abi.free()
	return ret
}

func (self classRDPipelineDepthStencilState) SetBackOpDepthFail(p_member RenderingDeviceStencilOperation) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RenderingDeviceStencilOperation](0, abi, p_member)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RDPipelineDepthStencilState.set_back_op_depth_fail, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classRDPipelineDepthStencilState) GetBackOpDepthFail() RenderingDeviceStencilOperation {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RDPipelineDepthStencilState.get_back_op_depth_fail, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[RenderingDeviceStencilOperation](abi)
	abi.free()
	return ret
}

func (self classRDPipelineDepthStencilState) SetBackOpCompare(p_member RenderingDeviceCompareOperator) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RenderingDeviceCompareOperator](0, abi, p_member)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RDPipelineDepthStencilState.set_back_op_compare, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classRDPipelineDepthStencilState) GetBackOpCompare() RenderingDeviceCompareOperator {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RDPipelineDepthStencilState.get_back_op_compare, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[RenderingDeviceCompareOperator](abi)
	abi.free()
	return ret
}

func (self classRDPipelineDepthStencilState) SetBackOpCompareMask(p_member Int) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Int](0, abi, p_member)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RDPipelineDepthStencilState.set_back_op_compare_mask, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classRDPipelineDepthStencilState) GetBackOpCompareMask() Int {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RDPipelineDepthStencilState.get_back_op_compare_mask, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Int](abi)
	abi.free()
	return ret
}

func (self classRDPipelineDepthStencilState) SetBackOpWriteMask(p_member Int) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Int](0, abi, p_member)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RDPipelineDepthStencilState.set_back_op_write_mask, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classRDPipelineDepthStencilState) GetBackOpWriteMask() Int {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RDPipelineDepthStencilState.get_back_op_write_mask, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Int](abi)
	abi.free()
	return ret
}

func (self classRDPipelineDepthStencilState) SetBackOpReference(p_member Int) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Int](0, abi, p_member)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RDPipelineDepthStencilState.set_back_op_reference, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classRDPipelineDepthStencilState) GetBackOpReference() Int {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RDPipelineDepthStencilState.get_back_op_reference, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Int](abi)
	abi.free()
	return ret
}

func (self classRDPipelineDepthStencilState) virtual(name string) reflect.Value {
	switch name {
	default:
		return self.Super().virtual(name)
	}
}

type classRDPipelineMultisampleState struct {
	Class[classRDPipelineMultisampleState, RefCounted]
}

func (self classRDPipelineMultisampleState) RefCounted() RefCounted { return *self.Super() }

func (self classRDPipelineMultisampleState) Object() Object { return *self.Super().Super() }

func (self classRDPipelineMultisampleState) SetSampleCount(p_member RenderingDeviceTextureSamples) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RenderingDeviceTextureSamples](0, abi, p_member)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RDPipelineMultisampleState.set_sample_count, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classRDPipelineMultisampleState) GetSampleCount() RenderingDeviceTextureSamples {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RDPipelineMultisampleState.get_sample_count, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[RenderingDeviceTextureSamples](abi)
	abi.free()
	return ret
}

func (self classRDPipelineMultisampleState) SetEnableSampleShading(p_member bool) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[bool](0, abi, p_member)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RDPipelineMultisampleState.set_enable_sample_shading, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classRDPipelineMultisampleState) GetEnableSampleShading() bool {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RDPipelineMultisampleState.get_enable_sample_shading, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self classRDPipelineMultisampleState) SetMinSampleShading(p_member Float) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Float](0, abi, p_member)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RDPipelineMultisampleState.set_min_sample_shading, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classRDPipelineMultisampleState) GetMinSampleShading() Float {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RDPipelineMultisampleState.get_min_sample_shading, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Float](abi)
	abi.free()
	return ret
}

func (self classRDPipelineMultisampleState) SetEnableAlphaToCoverage(p_member bool) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[bool](0, abi, p_member)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RDPipelineMultisampleState.set_enable_alpha_to_coverage, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classRDPipelineMultisampleState) GetEnableAlphaToCoverage() bool {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RDPipelineMultisampleState.get_enable_alpha_to_coverage, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self classRDPipelineMultisampleState) SetEnableAlphaToOne(p_member bool) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[bool](0, abi, p_member)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RDPipelineMultisampleState.set_enable_alpha_to_one, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classRDPipelineMultisampleState) GetEnableAlphaToOne() bool {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RDPipelineMultisampleState.get_enable_alpha_to_one, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self classRDPipelineMultisampleState) SetSampleMasks(masks ArrayOf[Int]) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[ArrayOf[Int]](0, abi, masks)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RDPipelineMultisampleState.set_sample_masks, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classRDPipelineMultisampleState) GetSampleMasks() ArrayOf[Int] {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RDPipelineMultisampleState.get_sample_masks, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[ArrayOf[Int]](abi)
	abi.free()
	return ret
}

func (self classRDPipelineMultisampleState) virtual(name string) reflect.Value {
	switch name {
	default:
		return self.Super().virtual(name)
	}
}

type classRDPipelineRasterizationState struct {
	Class[classRDPipelineRasterizationState, RefCounted]
}

func (self classRDPipelineRasterizationState) RefCounted() RefCounted { return *self.Super() }

func (self classRDPipelineRasterizationState) Object() Object { return *self.Super().Super() }

func (self classRDPipelineRasterizationState) SetEnableDepthClamp(p_member bool) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[bool](0, abi, p_member)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RDPipelineRasterizationState.set_enable_depth_clamp, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classRDPipelineRasterizationState) GetEnableDepthClamp() bool {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RDPipelineRasterizationState.get_enable_depth_clamp, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self classRDPipelineRasterizationState) SetDiscardPrimitives(p_member bool) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[bool](0, abi, p_member)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RDPipelineRasterizationState.set_discard_primitives, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classRDPipelineRasterizationState) GetDiscardPrimitives() bool {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RDPipelineRasterizationState.get_discard_primitives, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self classRDPipelineRasterizationState) SetWireframe(p_member bool) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[bool](0, abi, p_member)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RDPipelineRasterizationState.set_wireframe, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classRDPipelineRasterizationState) GetWireframe() bool {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RDPipelineRasterizationState.get_wireframe, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self classRDPipelineRasterizationState) SetCullMode(p_member RenderingDevicePolygonCullMode) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RenderingDevicePolygonCullMode](0, abi, p_member)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RDPipelineRasterizationState.set_cull_mode, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classRDPipelineRasterizationState) GetCullMode() RenderingDevicePolygonCullMode {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RDPipelineRasterizationState.get_cull_mode, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[RenderingDevicePolygonCullMode](abi)
	abi.free()
	return ret
}

func (self classRDPipelineRasterizationState) SetFrontFace(p_member RenderingDevicePolygonFrontFace) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RenderingDevicePolygonFrontFace](0, abi, p_member)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RDPipelineRasterizationState.set_front_face, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classRDPipelineRasterizationState) GetFrontFace() RenderingDevicePolygonFrontFace {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RDPipelineRasterizationState.get_front_face, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[RenderingDevicePolygonFrontFace](abi)
	abi.free()
	return ret
}

func (self classRDPipelineRasterizationState) SetDepthBiasEnabled(p_member bool) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[bool](0, abi, p_member)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RDPipelineRasterizationState.set_depth_bias_enabled, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classRDPipelineRasterizationState) GetDepthBiasEnabled() bool {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RDPipelineRasterizationState.get_depth_bias_enabled, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self classRDPipelineRasterizationState) SetDepthBiasConstantFactor(p_member Float) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Float](0, abi, p_member)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RDPipelineRasterizationState.set_depth_bias_constant_factor, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classRDPipelineRasterizationState) GetDepthBiasConstantFactor() Float {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RDPipelineRasterizationState.get_depth_bias_constant_factor, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Float](abi)
	abi.free()
	return ret
}

func (self classRDPipelineRasterizationState) SetDepthBiasClamp(p_member Float) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Float](0, abi, p_member)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RDPipelineRasterizationState.set_depth_bias_clamp, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classRDPipelineRasterizationState) GetDepthBiasClamp() Float {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RDPipelineRasterizationState.get_depth_bias_clamp, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Float](abi)
	abi.free()
	return ret
}

func (self classRDPipelineRasterizationState) SetDepthBiasSlopeFactor(p_member Float) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Float](0, abi, p_member)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RDPipelineRasterizationState.set_depth_bias_slope_factor, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classRDPipelineRasterizationState) GetDepthBiasSlopeFactor() Float {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RDPipelineRasterizationState.get_depth_bias_slope_factor, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Float](abi)
	abi.free()
	return ret
}

func (self classRDPipelineRasterizationState) SetLineWidth(p_member Float) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Float](0, abi, p_member)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RDPipelineRasterizationState.set_line_width, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classRDPipelineRasterizationState) GetLineWidth() Float {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RDPipelineRasterizationState.get_line_width, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Float](abi)
	abi.free()
	return ret
}

func (self classRDPipelineRasterizationState) SetPatchControlPoints(p_member Int) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Int](0, abi, p_member)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RDPipelineRasterizationState.set_patch_control_points, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classRDPipelineRasterizationState) GetPatchControlPoints() Int {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RDPipelineRasterizationState.get_patch_control_points, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Int](abi)
	abi.free()
	return ret
}

func (self classRDPipelineRasterizationState) virtual(name string) reflect.Value {
	switch name {
	default:
		return self.Super().virtual(name)
	}
}

type classRDPipelineSpecializationConstant struct {
	Class[classRDPipelineSpecializationConstant, RefCounted]
}

func (self classRDPipelineSpecializationConstant) RefCounted() RefCounted { return *self.Super() }

func (self classRDPipelineSpecializationConstant) Object() Object { return *self.Super().Super() }

func (self classRDPipelineSpecializationConstant) SetValue(value Variant) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Variant](0, abi, value)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RDPipelineSpecializationConstant.set_value, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classRDPipelineSpecializationConstant) GetValue(ctx Context) Variant {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RDPipelineSpecializationConstant.get_value, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[[3]uintptr](abi)
	abi.free()
	return mmm.Make[API, Variant, [3]uintptr](ctx, selfPtr.API, ret)
}

func (self classRDPipelineSpecializationConstant) SetConstantId(constant_id Int) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Int](0, abi, constant_id)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RDPipelineSpecializationConstant.set_constant_id, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classRDPipelineSpecializationConstant) GetConstantId() Int {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RDPipelineSpecializationConstant.get_constant_id, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Int](abi)
	abi.free()
	return ret
}

func (self classRDPipelineSpecializationConstant) virtual(name string) reflect.Value {
	switch name {
	default:
		return self.Super().virtual(name)
	}
}

type classRDSamplerState struct {
	Class[classRDSamplerState, RefCounted]
}

func (self classRDSamplerState) RefCounted() RefCounted { return *self.Super() }

func (self classRDSamplerState) Object() Object { return *self.Super().Super() }

func (self classRDSamplerState) SetMagFilter(p_member RenderingDeviceSamplerFilter) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RenderingDeviceSamplerFilter](0, abi, p_member)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RDSamplerState.set_mag_filter, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classRDSamplerState) GetMagFilter() RenderingDeviceSamplerFilter {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RDSamplerState.get_mag_filter, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[RenderingDeviceSamplerFilter](abi)
	abi.free()
	return ret
}

func (self classRDSamplerState) SetMinFilter(p_member RenderingDeviceSamplerFilter) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RenderingDeviceSamplerFilter](0, abi, p_member)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RDSamplerState.set_min_filter, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classRDSamplerState) GetMinFilter() RenderingDeviceSamplerFilter {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RDSamplerState.get_min_filter, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[RenderingDeviceSamplerFilter](abi)
	abi.free()
	return ret
}

func (self classRDSamplerState) SetMipFilter(p_member RenderingDeviceSamplerFilter) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RenderingDeviceSamplerFilter](0, abi, p_member)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RDSamplerState.set_mip_filter, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classRDSamplerState) GetMipFilter() RenderingDeviceSamplerFilter {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RDSamplerState.get_mip_filter, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[RenderingDeviceSamplerFilter](abi)
	abi.free()
	return ret
}

func (self classRDSamplerState) SetRepeatU(p_member RenderingDeviceSamplerRepeatMode) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RenderingDeviceSamplerRepeatMode](0, abi, p_member)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RDSamplerState.set_repeat_u, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classRDSamplerState) GetRepeatU() RenderingDeviceSamplerRepeatMode {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RDSamplerState.get_repeat_u, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[RenderingDeviceSamplerRepeatMode](abi)
	abi.free()
	return ret
}

func (self classRDSamplerState) SetRepeatV(p_member RenderingDeviceSamplerRepeatMode) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RenderingDeviceSamplerRepeatMode](0, abi, p_member)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RDSamplerState.set_repeat_v, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classRDSamplerState) GetRepeatV() RenderingDeviceSamplerRepeatMode {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RDSamplerState.get_repeat_v, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[RenderingDeviceSamplerRepeatMode](abi)
	abi.free()
	return ret
}

func (self classRDSamplerState) SetRepeatW(p_member RenderingDeviceSamplerRepeatMode) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RenderingDeviceSamplerRepeatMode](0, abi, p_member)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RDSamplerState.set_repeat_w, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classRDSamplerState) GetRepeatW() RenderingDeviceSamplerRepeatMode {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RDSamplerState.get_repeat_w, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[RenderingDeviceSamplerRepeatMode](abi)
	abi.free()
	return ret
}

func (self classRDSamplerState) SetLodBias(p_member Float) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Float](0, abi, p_member)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RDSamplerState.set_lod_bias, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classRDSamplerState) GetLodBias() Float {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RDSamplerState.get_lod_bias, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Float](abi)
	abi.free()
	return ret
}

func (self classRDSamplerState) SetUseAnisotropy(p_member bool) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[bool](0, abi, p_member)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RDSamplerState.set_use_anisotropy, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classRDSamplerState) GetUseAnisotropy() bool {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RDSamplerState.get_use_anisotropy, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self classRDSamplerState) SetAnisotropyMax(p_member Float) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Float](0, abi, p_member)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RDSamplerState.set_anisotropy_max, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classRDSamplerState) GetAnisotropyMax() Float {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RDSamplerState.get_anisotropy_max, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Float](abi)
	abi.free()
	return ret
}

func (self classRDSamplerState) SetEnableCompare(p_member bool) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[bool](0, abi, p_member)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RDSamplerState.set_enable_compare, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classRDSamplerState) GetEnableCompare() bool {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RDSamplerState.get_enable_compare, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self classRDSamplerState) SetCompareOp(p_member RenderingDeviceCompareOperator) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RenderingDeviceCompareOperator](0, abi, p_member)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RDSamplerState.set_compare_op, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classRDSamplerState) GetCompareOp() RenderingDeviceCompareOperator {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RDSamplerState.get_compare_op, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[RenderingDeviceCompareOperator](abi)
	abi.free()
	return ret
}

func (self classRDSamplerState) SetMinLod(p_member Float) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Float](0, abi, p_member)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RDSamplerState.set_min_lod, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classRDSamplerState) GetMinLod() Float {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RDSamplerState.get_min_lod, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Float](abi)
	abi.free()
	return ret
}

func (self classRDSamplerState) SetMaxLod(p_member Float) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Float](0, abi, p_member)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RDSamplerState.set_max_lod, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classRDSamplerState) GetMaxLod() Float {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RDSamplerState.get_max_lod, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Float](abi)
	abi.free()
	return ret
}

func (self classRDSamplerState) SetBorderColor(p_member RenderingDeviceSamplerBorderColor) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RenderingDeviceSamplerBorderColor](0, abi, p_member)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RDSamplerState.set_border_color, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classRDSamplerState) GetBorderColor() RenderingDeviceSamplerBorderColor {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RDSamplerState.get_border_color, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[RenderingDeviceSamplerBorderColor](abi)
	abi.free()
	return ret
}

func (self classRDSamplerState) SetUnnormalizedUvw(p_member bool) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[bool](0, abi, p_member)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RDSamplerState.set_unnormalized_uvw, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classRDSamplerState) GetUnnormalizedUvw() bool {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RDSamplerState.get_unnormalized_uvw, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self classRDSamplerState) virtual(name string) reflect.Value {
	switch name {
	default:
		return self.Super().virtual(name)
	}
}

type classRDShaderSPIRV struct {
	Class[classRDShaderSPIRV, Resource]
}

func (self classRDShaderSPIRV) Resource() Resource { return *self.Super() }

func (self classRDShaderSPIRV) RefCounted() RefCounted { return *self.Super().Super() }

func (self classRDShaderSPIRV) Object() Object { return *self.Super().Super().Super() }

func (self classRDShaderSPIRV) SetStageBytecode(stage RenderingDeviceShaderStage, bytecode PackedByteArray) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RenderingDeviceShaderStage](0, abi, stage)
	frameSet[PackedByteArray](1, abi, bytecode)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RDShaderSPIRV.set_stage_bytecode, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classRDShaderSPIRV) GetStageBytecode(ctx Context, stage RenderingDeviceShaderStage) PackedByteArray {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RenderingDeviceShaderStage](0, abi, stage)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RDShaderSPIRV.get_stage_bytecode, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[[2]uintptr](abi)
	abi.free()
	return mmm.Make[API, PackedByteArray, [2]uintptr](ctx, selfPtr.API, ret)
}

func (self classRDShaderSPIRV) SetStageCompileError(stage RenderingDeviceShaderStage, compile_error String) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RenderingDeviceShaderStage](0, abi, stage)
	frameSet[String](1, abi, compile_error)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RDShaderSPIRV.set_stage_compile_error, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classRDShaderSPIRV) GetStageCompileError(ctx Context, stage RenderingDeviceShaderStage) String {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RenderingDeviceShaderStage](0, abi, stage)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RDShaderSPIRV.get_stage_compile_error, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[uintptr](abi)
	abi.free()
	return mmm.Make[API, String, uintptr](ctx, selfPtr.API, ret)
}

func (self classRDShaderSPIRV) virtual(name string) reflect.Value {
	switch name {
	default:
		return self.Super().virtual(name)
	}
}

type classRDShaderSource struct {
	Class[classRDShaderSource, RefCounted]
}

func (self classRDShaderSource) RefCounted() RefCounted { return *self.Super() }

func (self classRDShaderSource) Object() Object { return *self.Super().Super() }

func (self classRDShaderSource) SetStageSource(stage RenderingDeviceShaderStage, source String) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RenderingDeviceShaderStage](0, abi, stage)
	frameSet[String](1, abi, source)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RDShaderSource.set_stage_source, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classRDShaderSource) GetStageSource(ctx Context, stage RenderingDeviceShaderStage) String {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RenderingDeviceShaderStage](0, abi, stage)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RDShaderSource.get_stage_source, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[uintptr](abi)
	abi.free()
	return mmm.Make[API, String, uintptr](ctx, selfPtr.API, ret)
}

func (self classRDShaderSource) SetLanguage(language RenderingDeviceShaderLanguage) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RenderingDeviceShaderLanguage](0, abi, language)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RDShaderSource.set_language, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classRDShaderSource) GetLanguage() RenderingDeviceShaderLanguage {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RDShaderSource.get_language, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[RenderingDeviceShaderLanguage](abi)
	abi.free()
	return ret
}

func (self classRDShaderSource) virtual(name string) reflect.Value {
	switch name {
	default:
		return self.Super().virtual(name)
	}
}

type classRDTextureFormat struct {
	Class[classRDTextureFormat, RefCounted]
}

func (self classRDTextureFormat) RefCounted() RefCounted { return *self.Super() }

func (self classRDTextureFormat) Object() Object { return *self.Super().Super() }

func (self classRDTextureFormat) SetFormat(p_member RenderingDeviceDataFormat) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RenderingDeviceDataFormat](0, abi, p_member)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RDTextureFormat.set_format, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classRDTextureFormat) GetFormat() RenderingDeviceDataFormat {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RDTextureFormat.get_format, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[RenderingDeviceDataFormat](abi)
	abi.free()
	return ret
}

func (self classRDTextureFormat) SetWidth(p_member Int) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Int](0, abi, p_member)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RDTextureFormat.set_width, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classRDTextureFormat) GetWidth() Int {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RDTextureFormat.get_width, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Int](abi)
	abi.free()
	return ret
}

func (self classRDTextureFormat) SetHeight(p_member Int) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Int](0, abi, p_member)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RDTextureFormat.set_height, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classRDTextureFormat) GetHeight() Int {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RDTextureFormat.get_height, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Int](abi)
	abi.free()
	return ret
}

func (self classRDTextureFormat) SetDepth(p_member Int) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Int](0, abi, p_member)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RDTextureFormat.set_depth, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classRDTextureFormat) GetDepth() Int {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RDTextureFormat.get_depth, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Int](abi)
	abi.free()
	return ret
}

func (self classRDTextureFormat) SetArrayLayers(p_member Int) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Int](0, abi, p_member)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RDTextureFormat.set_array_layers, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classRDTextureFormat) GetArrayLayers() Int {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RDTextureFormat.get_array_layers, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Int](abi)
	abi.free()
	return ret
}

func (self classRDTextureFormat) SetMipmaps(p_member Int) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Int](0, abi, p_member)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RDTextureFormat.set_mipmaps, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classRDTextureFormat) GetMipmaps() Int {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RDTextureFormat.get_mipmaps, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Int](abi)
	abi.free()
	return ret
}

func (self classRDTextureFormat) SetTextureType(p_member RenderingDeviceTextureType) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RenderingDeviceTextureType](0, abi, p_member)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RDTextureFormat.set_texture_type, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classRDTextureFormat) GetTextureType() RenderingDeviceTextureType {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RDTextureFormat.get_texture_type, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[RenderingDeviceTextureType](abi)
	abi.free()
	return ret
}

func (self classRDTextureFormat) SetSamples(p_member RenderingDeviceTextureSamples) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RenderingDeviceTextureSamples](0, abi, p_member)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RDTextureFormat.set_samples, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classRDTextureFormat) GetSamples() RenderingDeviceTextureSamples {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RDTextureFormat.get_samples, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[RenderingDeviceTextureSamples](abi)
	abi.free()
	return ret
}

func (self classRDTextureFormat) SetUsageBits(p_member RenderingDeviceTextureUsageBits) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RenderingDeviceTextureUsageBits](0, abi, p_member)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RDTextureFormat.set_usage_bits, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classRDTextureFormat) GetUsageBits() RenderingDeviceTextureUsageBits {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RDTextureFormat.get_usage_bits, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[RenderingDeviceTextureUsageBits](abi)
	abi.free()
	return ret
}

func (self classRDTextureFormat) AddShareableFormat(format RenderingDeviceDataFormat) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RenderingDeviceDataFormat](0, abi, format)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RDTextureFormat.add_shareable_format, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classRDTextureFormat) RemoveShareableFormat(format RenderingDeviceDataFormat) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RenderingDeviceDataFormat](0, abi, format)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RDTextureFormat.remove_shareable_format, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classRDTextureFormat) virtual(name string) reflect.Value {
	switch name {
	default:
		return self.Super().virtual(name)
	}
}

type classRDTextureView struct {
	Class[classRDTextureView, RefCounted]
}

func (self classRDTextureView) RefCounted() RefCounted { return *self.Super() }

func (self classRDTextureView) Object() Object { return *self.Super().Super() }

func (self classRDTextureView) SetFormatOverride(p_member RenderingDeviceDataFormat) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RenderingDeviceDataFormat](0, abi, p_member)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RDTextureView.set_format_override, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classRDTextureView) GetFormatOverride() RenderingDeviceDataFormat {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RDTextureView.get_format_override, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[RenderingDeviceDataFormat](abi)
	abi.free()
	return ret
}

func (self classRDTextureView) SetSwizzleR(p_member RenderingDeviceTextureSwizzle) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RenderingDeviceTextureSwizzle](0, abi, p_member)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RDTextureView.set_swizzle_r, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classRDTextureView) GetSwizzleR() RenderingDeviceTextureSwizzle {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RDTextureView.get_swizzle_r, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[RenderingDeviceTextureSwizzle](abi)
	abi.free()
	return ret
}

func (self classRDTextureView) SetSwizzleG(p_member RenderingDeviceTextureSwizzle) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RenderingDeviceTextureSwizzle](0, abi, p_member)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RDTextureView.set_swizzle_g, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classRDTextureView) GetSwizzleG() RenderingDeviceTextureSwizzle {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RDTextureView.get_swizzle_g, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[RenderingDeviceTextureSwizzle](abi)
	abi.free()
	return ret
}

func (self classRDTextureView) SetSwizzleB(p_member RenderingDeviceTextureSwizzle) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RenderingDeviceTextureSwizzle](0, abi, p_member)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RDTextureView.set_swizzle_b, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classRDTextureView) GetSwizzleB() RenderingDeviceTextureSwizzle {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RDTextureView.get_swizzle_b, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[RenderingDeviceTextureSwizzle](abi)
	abi.free()
	return ret
}

func (self classRDTextureView) SetSwizzleA(p_member RenderingDeviceTextureSwizzle) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RenderingDeviceTextureSwizzle](0, abi, p_member)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RDTextureView.set_swizzle_a, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classRDTextureView) GetSwizzleA() RenderingDeviceTextureSwizzle {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RDTextureView.get_swizzle_a, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[RenderingDeviceTextureSwizzle](abi)
	abi.free()
	return ret
}

func (self classRDTextureView) virtual(name string) reflect.Value {
	switch name {
	default:
		return self.Super().virtual(name)
	}
}

type classRDUniform struct {
	Class[classRDUniform, RefCounted]
}

func (self classRDUniform) RefCounted() RefCounted { return *self.Super() }

func (self classRDUniform) Object() Object { return *self.Super().Super() }

func (self classRDUniform) SetUniformType(p_member RenderingDeviceUniformType) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RenderingDeviceUniformType](0, abi, p_member)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RDUniform.set_uniform_type, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classRDUniform) GetUniformType() RenderingDeviceUniformType {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RDUniform.get_uniform_type, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[RenderingDeviceUniformType](abi)
	abi.free()
	return ret
}

func (self classRDUniform) SetBinding(p_member Int) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Int](0, abi, p_member)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RDUniform.set_binding, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classRDUniform) GetBinding() Int {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RDUniform.get_binding, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Int](abi)
	abi.free()
	return ret
}

func (self classRDUniform) AddId(id RID) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, id)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RDUniform.add_id, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classRDUniform) ClearIds() {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RDUniform.clear_ids, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classRDUniform) GetIds() ArrayOf[RID] {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RDUniform.get_ids, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[ArrayOf[RID]](abi)
	abi.free()
	return ret
}

func (self classRDUniform) virtual(name string) reflect.Value {
	switch name {
	default:
		return self.Super().virtual(name)
	}
}

type classRDVertexAttribute struct {
	Class[classRDVertexAttribute, RefCounted]
}

func (self classRDVertexAttribute) RefCounted() RefCounted { return *self.Super() }

func (self classRDVertexAttribute) Object() Object { return *self.Super().Super() }

func (self classRDVertexAttribute) SetLocation(p_member Int) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Int](0, abi, p_member)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RDVertexAttribute.set_location, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classRDVertexAttribute) GetLocation() Int {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RDVertexAttribute.get_location, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Int](abi)
	abi.free()
	return ret
}

func (self classRDVertexAttribute) SetOffset(p_member Int) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Int](0, abi, p_member)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RDVertexAttribute.set_offset, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classRDVertexAttribute) GetOffset() Int {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RDVertexAttribute.get_offset, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Int](abi)
	abi.free()
	return ret
}

func (self classRDVertexAttribute) SetFormat(p_member RenderingDeviceDataFormat) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RenderingDeviceDataFormat](0, abi, p_member)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RDVertexAttribute.set_format, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classRDVertexAttribute) GetFormat() RenderingDeviceDataFormat {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RDVertexAttribute.get_format, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[RenderingDeviceDataFormat](abi)
	abi.free()
	return ret
}

func (self classRDVertexAttribute) SetStride(p_member Int) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Int](0, abi, p_member)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RDVertexAttribute.set_stride, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classRDVertexAttribute) GetStride() Int {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RDVertexAttribute.get_stride, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Int](abi)
	abi.free()
	return ret
}

func (self classRDVertexAttribute) SetFrequency(p_member RenderingDeviceVertexFrequency) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RenderingDeviceVertexFrequency](0, abi, p_member)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RDVertexAttribute.set_frequency, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classRDVertexAttribute) GetFrequency() RenderingDeviceVertexFrequency {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RDVertexAttribute.get_frequency, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[RenderingDeviceVertexFrequency](abi)
	abi.free()
	return ret
}

func (self classRDVertexAttribute) virtual(name string) reflect.Value {
	switch name {
	default:
		return self.Super().virtual(name)
	}
}

type classRefCounted struct{ Class[classRefCounted, Object] }

func (self classRefCounted) Object() Object { return *self.Super() }

func (self classRefCounted) InitRef() bool {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RefCounted.init_ref, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self classRefCounted) Reference() bool {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RefCounted.reference, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self classRefCounted) Unreference() bool {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RefCounted.unreference, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self classRefCounted) GetReferenceCount() Int {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RefCounted.get_reference_count, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Int](abi)
	abi.free()
	return ret
}

func (self classRefCounted) virtual(name string) reflect.Value {
	switch name {
	default:
		return self.Super().virtual(name)
	}
}

type classRenderingDevice struct {
	Class[classRenderingDevice, Object]
}

func (self classRenderingDevice) Object() Object { return *self.Super() }

func (self classRenderingDevice) TextureCreate(format RDTextureFormat, view RDTextureView, data ArrayOf[PackedByteArray]) RID {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RDTextureFormat](0, abi, format)
	frameSet[RDTextureView](1, abi, view)
	frameSet[ArrayOf[PackedByteArray]](2, abi, data)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingDevice.texture_create, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[RID](abi)
	abi.free()
	return ret
}

func (self classRenderingDevice) TextureCreateShared(view RDTextureView, with_texture RID) RID {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RDTextureView](0, abi, view)
	frameSet[RID](1, abi, with_texture)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingDevice.texture_create_shared, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[RID](abi)
	abi.free()
	return ret
}

func (self classRenderingDevice) TextureCreateSharedFromSlice(view RDTextureView, with_texture RID, layer Int, mipmap Int, mipmaps Int, slice_type RenderingDeviceTextureSliceType) RID {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RDTextureView](0, abi, view)
	frameSet[RID](1, abi, with_texture)
	frameSet[Int](2, abi, layer)
	frameSet[Int](3, abi, mipmap)
	frameSet[Int](4, abi, mipmaps)
	frameSet[RenderingDeviceTextureSliceType](5, abi, slice_type)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingDevice.texture_create_shared_from_slice, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[RID](abi)
	abi.free()
	return ret
}

func (self classRenderingDevice) TextureCreateFromExtension(atype RenderingDeviceTextureType, format RenderingDeviceDataFormat, samples RenderingDeviceTextureSamples, usage_flags RenderingDeviceTextureUsageBits, image Int, width Int, height Int, depth Int, layers Int) RID {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RenderingDeviceTextureType](0, abi, atype)
	frameSet[RenderingDeviceDataFormat](1, abi, format)
	frameSet[RenderingDeviceTextureSamples](2, abi, samples)
	frameSet[RenderingDeviceTextureUsageBits](3, abi, usage_flags)
	frameSet[Int](4, abi, image)
	frameSet[Int](5, abi, width)
	frameSet[Int](6, abi, height)
	frameSet[Int](7, abi, depth)
	frameSet[Int](8, abi, layers)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingDevice.texture_create_from_extension, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[RID](abi)
	abi.free()
	return ret
}

func (self classRenderingDevice) TextureUpdate(texture RID, layer Int, data PackedByteArray) int64 {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, texture)
	frameSet[Int](1, abi, layer)
	frameSet[PackedByteArray](2, abi, data)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingDevice.texture_update, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[int64](abi)
	abi.free()
	return ret
}

func (self classRenderingDevice) TextureGetData(ctx Context, texture RID, layer Int) PackedByteArray {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, texture)
	frameSet[Int](1, abi, layer)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingDevice.texture_get_data, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[[2]uintptr](abi)
	abi.free()
	return mmm.Make[API, PackedByteArray, [2]uintptr](ctx, selfPtr.API, ret)
}

func (self classRenderingDevice) TextureIsFormatSupportedForUsage(format RenderingDeviceDataFormat, usage_flags RenderingDeviceTextureUsageBits) bool {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RenderingDeviceDataFormat](0, abi, format)
	frameSet[RenderingDeviceTextureUsageBits](1, abi, usage_flags)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingDevice.texture_is_format_supported_for_usage, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self classRenderingDevice) TextureIsShared(texture RID) bool {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, texture)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingDevice.texture_is_shared, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self classRenderingDevice) TextureIsValid(texture RID) bool {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, texture)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingDevice.texture_is_valid, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self classRenderingDevice) TextureCopy(from_texture RID, to_texture RID, from_pos Vector3, to_pos Vector3, size Vector3, src_mipmap Int, dst_mipmap Int, src_layer Int, dst_layer Int) int64 {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, from_texture)
	frameSet[RID](1, abi, to_texture)
	frameSet[Vector3](2, abi, from_pos)
	frameSet[Vector3](3, abi, to_pos)
	frameSet[Vector3](4, abi, size)
	frameSet[Int](5, abi, src_mipmap)
	frameSet[Int](6, abi, dst_mipmap)
	frameSet[Int](7, abi, src_layer)
	frameSet[Int](8, abi, dst_layer)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingDevice.texture_copy, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[int64](abi)
	abi.free()
	return ret
}

func (self classRenderingDevice) TextureClear(texture RID, color Color, base_mipmap Int, mipmap_count Int, base_layer Int, layer_count Int) int64 {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, texture)
	frameSet[Color](1, abi, color)
	frameSet[Int](2, abi, base_mipmap)
	frameSet[Int](3, abi, mipmap_count)
	frameSet[Int](4, abi, base_layer)
	frameSet[Int](5, abi, layer_count)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingDevice.texture_clear, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[int64](abi)
	abi.free()
	return ret
}

func (self classRenderingDevice) TextureResolveMultisample(from_texture RID, to_texture RID) int64 {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, from_texture)
	frameSet[RID](1, abi, to_texture)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingDevice.texture_resolve_multisample, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[int64](abi)
	abi.free()
	return ret
}

func (self classRenderingDevice) TextureGetFormat(texture RID) RDTextureFormat {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, texture)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingDevice.texture_get_format, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[RDTextureFormat](abi)
	abi.free()
	return ret
}

func (self classRenderingDevice) TextureGetNativeHandle(texture RID) Int {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, texture)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingDevice.texture_get_native_handle, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Int](abi)
	abi.free()
	return ret
}

func (self classRenderingDevice) FramebufferFormatCreate(attachments ArrayOf[RDAttachmentFormat], view_count Int) Int {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[ArrayOf[RDAttachmentFormat]](0, abi, attachments)
	frameSet[Int](1, abi, view_count)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingDevice.framebuffer_format_create, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Int](abi)
	abi.free()
	return ret
}

func (self classRenderingDevice) FramebufferFormatCreateMultipass(attachments ArrayOf[RDAttachmentFormat], passes ArrayOf[RDFramebufferPass], view_count Int) Int {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[ArrayOf[RDAttachmentFormat]](0, abi, attachments)
	frameSet[ArrayOf[RDFramebufferPass]](1, abi, passes)
	frameSet[Int](2, abi, view_count)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingDevice.framebuffer_format_create_multipass, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Int](abi)
	abi.free()
	return ret
}

func (self classRenderingDevice) FramebufferFormatCreateEmpty(samples RenderingDeviceTextureSamples) Int {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RenderingDeviceTextureSamples](0, abi, samples)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingDevice.framebuffer_format_create_empty, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Int](abi)
	abi.free()
	return ret
}

func (self classRenderingDevice) FramebufferFormatGetTextureSamples(format Int, render_pass Int) RenderingDeviceTextureSamples {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Int](0, abi, format)
	frameSet[Int](1, abi, render_pass)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingDevice.framebuffer_format_get_texture_samples, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[RenderingDeviceTextureSamples](abi)
	abi.free()
	return ret
}

func (self classRenderingDevice) FramebufferCreate(textures ArrayOf[RID], validate_with_format Int, view_count Int) RID {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[ArrayOf[RID]](0, abi, textures)
	frameSet[Int](1, abi, validate_with_format)
	frameSet[Int](2, abi, view_count)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingDevice.framebuffer_create, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[RID](abi)
	abi.free()
	return ret
}

func (self classRenderingDevice) FramebufferCreateMultipass(textures ArrayOf[RID], passes ArrayOf[RDFramebufferPass], validate_with_format Int, view_count Int) RID {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[ArrayOf[RID]](0, abi, textures)
	frameSet[ArrayOf[RDFramebufferPass]](1, abi, passes)
	frameSet[Int](2, abi, validate_with_format)
	frameSet[Int](3, abi, view_count)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingDevice.framebuffer_create_multipass, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[RID](abi)
	abi.free()
	return ret
}

func (self classRenderingDevice) FramebufferCreateEmpty(size Vector2i, samples RenderingDeviceTextureSamples, validate_with_format Int) RID {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Vector2i](0, abi, size)
	frameSet[RenderingDeviceTextureSamples](1, abi, samples)
	frameSet[Int](2, abi, validate_with_format)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingDevice.framebuffer_create_empty, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[RID](abi)
	abi.free()
	return ret
}

func (self classRenderingDevice) FramebufferGetFormat(framebuffer RID) Int {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, framebuffer)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingDevice.framebuffer_get_format, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Int](abi)
	abi.free()
	return ret
}

func (self classRenderingDevice) FramebufferIsValid(framebuffer RID) bool {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, framebuffer)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingDevice.framebuffer_is_valid, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self classRenderingDevice) SamplerCreate(state RDSamplerState) RID {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RDSamplerState](0, abi, state)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingDevice.sampler_create, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[RID](abi)
	abi.free()
	return ret
}

func (self classRenderingDevice) SamplerIsFormatSupportedForFilter(format RenderingDeviceDataFormat, sampler_filter RenderingDeviceSamplerFilter) bool {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RenderingDeviceDataFormat](0, abi, format)
	frameSet[RenderingDeviceSamplerFilter](1, abi, sampler_filter)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingDevice.sampler_is_format_supported_for_filter, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self classRenderingDevice) VertexBufferCreate(size_bytes Int, data PackedByteArray, use_as_storage bool) RID {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Int](0, abi, size_bytes)
	frameSet[PackedByteArray](1, abi, data)
	frameSet[bool](2, abi, use_as_storage)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingDevice.vertex_buffer_create, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[RID](abi)
	abi.free()
	return ret
}

func (self classRenderingDevice) VertexFormatCreate(vertex_descriptions ArrayOf[RDVertexAttribute]) Int {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[ArrayOf[RDVertexAttribute]](0, abi, vertex_descriptions)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingDevice.vertex_format_create, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Int](abi)
	abi.free()
	return ret
}

func (self classRenderingDevice) VertexArrayCreate(vertex_count Int, vertex_format Int, src_buffers ArrayOf[RID], offsets PackedInt64Array) RID {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Int](0, abi, vertex_count)
	frameSet[Int](1, abi, vertex_format)
	frameSet[ArrayOf[RID]](2, abi, src_buffers)
	frameSet[PackedInt64Array](3, abi, offsets)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingDevice.vertex_array_create, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[RID](abi)
	abi.free()
	return ret
}

func (self classRenderingDevice) IndexBufferCreate(size_indices Int, format RenderingDeviceIndexBufferFormat, data PackedByteArray, use_restart_indices bool) RID {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Int](0, abi, size_indices)
	frameSet[RenderingDeviceIndexBufferFormat](1, abi, format)
	frameSet[PackedByteArray](2, abi, data)
	frameSet[bool](3, abi, use_restart_indices)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingDevice.index_buffer_create, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[RID](abi)
	abi.free()
	return ret
}

func (self classRenderingDevice) IndexArrayCreate(index_buffer RID, index_offset Int, index_count Int) RID {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, index_buffer)
	frameSet[Int](1, abi, index_offset)
	frameSet[Int](2, abi, index_count)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingDevice.index_array_create, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[RID](abi)
	abi.free()
	return ret
}

func (self classRenderingDevice) ShaderCompileSpirvFromSource(shader_source RDShaderSource, allow_cache bool) RDShaderSPIRV {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RDShaderSource](0, abi, shader_source)
	frameSet[bool](1, abi, allow_cache)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingDevice.shader_compile_spirv_from_source, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[RDShaderSPIRV](abi)
	abi.free()
	return ret
}

func (self classRenderingDevice) ShaderCompileBinaryFromSpirv(ctx Context, spirv_data RDShaderSPIRV, name String) PackedByteArray {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RDShaderSPIRV](0, abi, spirv_data)
	frameSet[String](1, abi, name)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingDevice.shader_compile_binary_from_spirv, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[[2]uintptr](abi)
	abi.free()
	return mmm.Make[API, PackedByteArray, [2]uintptr](ctx, selfPtr.API, ret)
}

func (self classRenderingDevice) ShaderCreateFromSpirv(spirv_data RDShaderSPIRV, name String) RID {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RDShaderSPIRV](0, abi, spirv_data)
	frameSet[String](1, abi, name)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingDevice.shader_create_from_spirv, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[RID](abi)
	abi.free()
	return ret
}

func (self classRenderingDevice) ShaderCreateFromBytecode(binary_data PackedByteArray, placeholder_rid RID) RID {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[PackedByteArray](0, abi, binary_data)
	frameSet[RID](1, abi, placeholder_rid)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingDevice.shader_create_from_bytecode, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[RID](abi)
	abi.free()
	return ret
}

func (self classRenderingDevice) ShaderCreatePlaceholder() RID {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingDevice.shader_create_placeholder, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[RID](abi)
	abi.free()
	return ret
}

func (self classRenderingDevice) ShaderGetVertexInputAttributeMask(shader RID) Int {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, shader)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingDevice.shader_get_vertex_input_attribute_mask, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Int](abi)
	abi.free()
	return ret
}

func (self classRenderingDevice) UniformBufferCreate(size_bytes Int, data PackedByteArray) RID {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Int](0, abi, size_bytes)
	frameSet[PackedByteArray](1, abi, data)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingDevice.uniform_buffer_create, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[RID](abi)
	abi.free()
	return ret
}

func (self classRenderingDevice) StorageBufferCreate(size_bytes Int, data PackedByteArray, usage RenderingDeviceStorageBufferUsage) RID {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Int](0, abi, size_bytes)
	frameSet[PackedByteArray](1, abi, data)
	frameSet[RenderingDeviceStorageBufferUsage](2, abi, usage)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingDevice.storage_buffer_create, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[RID](abi)
	abi.free()
	return ret
}

func (self classRenderingDevice) TextureBufferCreate(size_bytes Int, format RenderingDeviceDataFormat, data PackedByteArray) RID {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Int](0, abi, size_bytes)
	frameSet[RenderingDeviceDataFormat](1, abi, format)
	frameSet[PackedByteArray](2, abi, data)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingDevice.texture_buffer_create, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[RID](abi)
	abi.free()
	return ret
}

func (self classRenderingDevice) UniformSetCreate(uniforms ArrayOf[RDUniform], shader RID, shader_set Int) RID {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[ArrayOf[RDUniform]](0, abi, uniforms)
	frameSet[RID](1, abi, shader)
	frameSet[Int](2, abi, shader_set)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingDevice.uniform_set_create, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[RID](abi)
	abi.free()
	return ret
}

func (self classRenderingDevice) UniformSetIsValid(uniform_set RID) bool {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, uniform_set)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingDevice.uniform_set_is_valid, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self classRenderingDevice) BufferCopy(src_buffer RID, dst_buffer RID, src_offset Int, dst_offset Int, size Int) int64 {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, src_buffer)
	frameSet[RID](1, abi, dst_buffer)
	frameSet[Int](2, abi, src_offset)
	frameSet[Int](3, abi, dst_offset)
	frameSet[Int](4, abi, size)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingDevice.buffer_copy, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[int64](abi)
	abi.free()
	return ret
}

func (self classRenderingDevice) BufferUpdate(buffer RID, offset Int, size_bytes Int, data PackedByteArray) int64 {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, buffer)
	frameSet[Int](1, abi, offset)
	frameSet[Int](2, abi, size_bytes)
	frameSet[PackedByteArray](3, abi, data)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingDevice.buffer_update, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[int64](abi)
	abi.free()
	return ret
}

func (self classRenderingDevice) BufferClear(buffer RID, offset Int, size_bytes Int) int64 {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, buffer)
	frameSet[Int](1, abi, offset)
	frameSet[Int](2, abi, size_bytes)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingDevice.buffer_clear, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[int64](abi)
	abi.free()
	return ret
}

func (self classRenderingDevice) BufferGetData(ctx Context, buffer RID, offset_bytes Int, size_bytes Int) PackedByteArray {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, buffer)
	frameSet[Int](1, abi, offset_bytes)
	frameSet[Int](2, abi, size_bytes)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingDevice.buffer_get_data, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[[2]uintptr](abi)
	abi.free()
	return mmm.Make[API, PackedByteArray, [2]uintptr](ctx, selfPtr.API, ret)
}

func (self classRenderingDevice) RenderPipelineCreate(shader RID, framebuffer_format Int, vertex_format Int, primitive RenderingDeviceRenderPrimitive, rasterization_state RDPipelineRasterizationState, multisample_state RDPipelineMultisampleState, stencil_state RDPipelineDepthStencilState, color_blend_state RDPipelineColorBlendState, dynamic_state_flags RenderingDevicePipelineDynamicStateFlags, for_render_pass Int, specialization_constants ArrayOf[RDPipelineSpecializationConstant]) RID {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, shader)
	frameSet[Int](1, abi, framebuffer_format)
	frameSet[Int](2, abi, vertex_format)
	frameSet[RenderingDeviceRenderPrimitive](3, abi, primitive)
	frameSet[RDPipelineRasterizationState](4, abi, rasterization_state)
	frameSet[RDPipelineMultisampleState](5, abi, multisample_state)
	frameSet[RDPipelineDepthStencilState](6, abi, stencil_state)
	frameSet[RDPipelineColorBlendState](7, abi, color_blend_state)
	frameSet[RenderingDevicePipelineDynamicStateFlags](8, abi, dynamic_state_flags)
	frameSet[Int](9, abi, for_render_pass)
	frameSet[ArrayOf[RDPipelineSpecializationConstant]](10, abi, specialization_constants)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingDevice.render_pipeline_create, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[RID](abi)
	abi.free()
	return ret
}

func (self classRenderingDevice) RenderPipelineIsValid(render_pipeline RID) bool {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, render_pipeline)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingDevice.render_pipeline_is_valid, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self classRenderingDevice) ComputePipelineCreate(shader RID, specialization_constants ArrayOf[RDPipelineSpecializationConstant]) RID {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, shader)
	frameSet[ArrayOf[RDPipelineSpecializationConstant]](1, abi, specialization_constants)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingDevice.compute_pipeline_create, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[RID](abi)
	abi.free()
	return ret
}

func (self classRenderingDevice) ComputePipelineIsValid(compute_pipeline RID) bool {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, compute_pipeline)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingDevice.compute_pipeline_is_valid, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self classRenderingDevice) ScreenGetWidth(screen Int) Int {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Int](0, abi, screen)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingDevice.screen_get_width, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Int](abi)
	abi.free()
	return ret
}

func (self classRenderingDevice) ScreenGetHeight(screen Int) Int {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Int](0, abi, screen)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingDevice.screen_get_height, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Int](abi)
	abi.free()
	return ret
}

func (self classRenderingDevice) ScreenGetFramebufferFormat() Int {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingDevice.screen_get_framebuffer_format, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Int](abi)
	abi.free()
	return ret
}

func (self classRenderingDevice) DrawListBeginForScreen(screen Int, clear_color Color) Int {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Int](0, abi, screen)
	frameSet[Color](1, abi, clear_color)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingDevice.draw_list_begin_for_screen, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Int](abi)
	abi.free()
	return ret
}

func (self classRenderingDevice) DrawListBegin(framebuffer RID, initial_color_action RenderingDeviceInitialAction, final_color_action RenderingDeviceFinalAction, initial_depth_action RenderingDeviceInitialAction, final_depth_action RenderingDeviceFinalAction, clear_color_values PackedColorArray, clear_depth Float, clear_stencil Int, region Rect2) Int {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, framebuffer)
	frameSet[RenderingDeviceInitialAction](1, abi, initial_color_action)
	frameSet[RenderingDeviceFinalAction](2, abi, final_color_action)
	frameSet[RenderingDeviceInitialAction](3, abi, initial_depth_action)
	frameSet[RenderingDeviceFinalAction](4, abi, final_depth_action)
	frameSet[PackedColorArray](5, abi, clear_color_values)
	frameSet[Float](6, abi, clear_depth)
	frameSet[Int](7, abi, clear_stencil)
	frameSet[Rect2](8, abi, region)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingDevice.draw_list_begin, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Int](abi)
	abi.free()
	return ret
}

func (self classRenderingDevice) DrawListBeginSplit(ctx Context, framebuffer RID, splits Int, initial_color_action RenderingDeviceInitialAction, final_color_action RenderingDeviceFinalAction, initial_depth_action RenderingDeviceInitialAction, final_depth_action RenderingDeviceFinalAction, clear_color_values PackedColorArray, clear_depth Float, clear_stencil Int, region Rect2, storage_textures ArrayOf[RID]) PackedInt64Array {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, framebuffer)
	frameSet[Int](1, abi, splits)
	frameSet[RenderingDeviceInitialAction](2, abi, initial_color_action)
	frameSet[RenderingDeviceFinalAction](3, abi, final_color_action)
	frameSet[RenderingDeviceInitialAction](4, abi, initial_depth_action)
	frameSet[RenderingDeviceFinalAction](5, abi, final_depth_action)
	frameSet[PackedColorArray](6, abi, clear_color_values)
	frameSet[Float](7, abi, clear_depth)
	frameSet[Int](8, abi, clear_stencil)
	frameSet[Rect2](9, abi, region)
	frameSet[ArrayOf[RID]](10, abi, storage_textures)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingDevice.draw_list_begin_split, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[[2]uintptr](abi)
	abi.free()
	return mmm.Make[API, PackedInt64Array, [2]uintptr](ctx, selfPtr.API, ret)
}

func (self classRenderingDevice) DrawListSetBlendConstants(draw_list Int, color Color) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Int](0, abi, draw_list)
	frameSet[Color](1, abi, color)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingDevice.draw_list_set_blend_constants, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classRenderingDevice) DrawListBindRenderPipeline(draw_list Int, render_pipeline RID) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Int](0, abi, draw_list)
	frameSet[RID](1, abi, render_pipeline)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingDevice.draw_list_bind_render_pipeline, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classRenderingDevice) DrawListBindUniformSet(draw_list Int, uniform_set RID, set_index Int) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Int](0, abi, draw_list)
	frameSet[RID](1, abi, uniform_set)
	frameSet[Int](2, abi, set_index)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingDevice.draw_list_bind_uniform_set, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classRenderingDevice) DrawListBindVertexArray(draw_list Int, vertex_array RID) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Int](0, abi, draw_list)
	frameSet[RID](1, abi, vertex_array)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingDevice.draw_list_bind_vertex_array, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classRenderingDevice) DrawListBindIndexArray(draw_list Int, index_array RID) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Int](0, abi, draw_list)
	frameSet[RID](1, abi, index_array)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingDevice.draw_list_bind_index_array, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classRenderingDevice) DrawListSetPushConstant(draw_list Int, buffer PackedByteArray, size_bytes Int) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Int](0, abi, draw_list)
	frameSet[PackedByteArray](1, abi, buffer)
	frameSet[Int](2, abi, size_bytes)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingDevice.draw_list_set_push_constant, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classRenderingDevice) DrawListDraw(draw_list Int, use_indices bool, instances Int, procedural_vertex_count Int) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Int](0, abi, draw_list)
	frameSet[bool](1, abi, use_indices)
	frameSet[Int](2, abi, instances)
	frameSet[Int](3, abi, procedural_vertex_count)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingDevice.draw_list_draw, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classRenderingDevice) DrawListEnableScissor(draw_list Int, rect Rect2) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Int](0, abi, draw_list)
	frameSet[Rect2](1, abi, rect)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingDevice.draw_list_enable_scissor, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classRenderingDevice) DrawListDisableScissor(draw_list Int) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Int](0, abi, draw_list)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingDevice.draw_list_disable_scissor, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classRenderingDevice) DrawListSwitchToNextPass() Int {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingDevice.draw_list_switch_to_next_pass, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Int](abi)
	abi.free()
	return ret
}

func (self classRenderingDevice) DrawListSwitchToNextPassSplit(ctx Context, splits Int) PackedInt64Array {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Int](0, abi, splits)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingDevice.draw_list_switch_to_next_pass_split, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[[2]uintptr](abi)
	abi.free()
	return mmm.Make[API, PackedInt64Array, [2]uintptr](ctx, selfPtr.API, ret)
}

func (self classRenderingDevice) DrawListEnd() {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingDevice.draw_list_end, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classRenderingDevice) ComputeListBegin() Int {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingDevice.compute_list_begin, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Int](abi)
	abi.free()
	return ret
}

func (self classRenderingDevice) ComputeListBindComputePipeline(compute_list Int, compute_pipeline RID) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Int](0, abi, compute_list)
	frameSet[RID](1, abi, compute_pipeline)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingDevice.compute_list_bind_compute_pipeline, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classRenderingDevice) ComputeListSetPushConstant(compute_list Int, buffer PackedByteArray, size_bytes Int) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Int](0, abi, compute_list)
	frameSet[PackedByteArray](1, abi, buffer)
	frameSet[Int](2, abi, size_bytes)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingDevice.compute_list_set_push_constant, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classRenderingDevice) ComputeListBindUniformSet(compute_list Int, uniform_set RID, set_index Int) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Int](0, abi, compute_list)
	frameSet[RID](1, abi, uniform_set)
	frameSet[Int](2, abi, set_index)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingDevice.compute_list_bind_uniform_set, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classRenderingDevice) ComputeListDispatch(compute_list Int, x_groups Int, y_groups Int, z_groups Int) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Int](0, abi, compute_list)
	frameSet[Int](1, abi, x_groups)
	frameSet[Int](2, abi, y_groups)
	frameSet[Int](3, abi, z_groups)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingDevice.compute_list_dispatch, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classRenderingDevice) ComputeListAddBarrier(compute_list Int) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Int](0, abi, compute_list)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingDevice.compute_list_add_barrier, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classRenderingDevice) ComputeListEnd() {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingDevice.compute_list_end, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classRenderingDevice) FreeRid(rid RID) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, rid)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingDevice.free_rid, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classRenderingDevice) CaptureTimestamp(name String) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[String](0, abi, name)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingDevice.capture_timestamp, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classRenderingDevice) GetCapturedTimestampsCount() Int {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingDevice.get_captured_timestamps_count, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Int](abi)
	abi.free()
	return ret
}

func (self classRenderingDevice) GetCapturedTimestampsFrame() Int {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingDevice.get_captured_timestamps_frame, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Int](abi)
	abi.free()
	return ret
}

func (self classRenderingDevice) GetCapturedTimestampGpuTime(index Int) Int {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Int](0, abi, index)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingDevice.get_captured_timestamp_gpu_time, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Int](abi)
	abi.free()
	return ret
}

func (self classRenderingDevice) GetCapturedTimestampCpuTime(index Int) Int {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Int](0, abi, index)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingDevice.get_captured_timestamp_cpu_time, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Int](abi)
	abi.free()
	return ret
}

func (self classRenderingDevice) GetCapturedTimestampName(ctx Context, index Int) String {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Int](0, abi, index)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingDevice.get_captured_timestamp_name, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[uintptr](abi)
	abi.free()
	return mmm.Make[API, String, uintptr](ctx, selfPtr.API, ret)
}

func (self classRenderingDevice) LimitGet(limit RenderingDeviceLimit) Int {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RenderingDeviceLimit](0, abi, limit)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingDevice.limit_get, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Int](abi)
	abi.free()
	return ret
}

func (self classRenderingDevice) GetFrameDelay() Int {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingDevice.get_frame_delay, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Int](abi)
	abi.free()
	return ret
}

func (self classRenderingDevice) Submit() {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingDevice.submit, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classRenderingDevice) Sync() {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingDevice.sync, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classRenderingDevice) Barrier(from RenderingDeviceBarrierMask, to RenderingDeviceBarrierMask) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RenderingDeviceBarrierMask](0, abi, from)
	frameSet[RenderingDeviceBarrierMask](1, abi, to)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingDevice.barrier, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classRenderingDevice) FullBarrier() {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingDevice.full_barrier, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classRenderingDevice) CreateLocalDevice() RenderingDevice {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingDevice.create_local_device, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[RenderingDevice](abi)
	abi.free()
	return ret
}

func (self classRenderingDevice) SetResourceName(id RID, name String) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, id)
	frameSet[String](1, abi, name)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingDevice.set_resource_name, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classRenderingDevice) DrawCommandBeginLabel(name String, color Color) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[String](0, abi, name)
	frameSet[Color](1, abi, color)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingDevice.draw_command_begin_label, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classRenderingDevice) DrawCommandInsertLabel(name String, color Color) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[String](0, abi, name)
	frameSet[Color](1, abi, color)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingDevice.draw_command_insert_label, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classRenderingDevice) DrawCommandEndLabel() {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingDevice.draw_command_end_label, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classRenderingDevice) GetDeviceVendorName(ctx Context) String {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingDevice.get_device_vendor_name, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[uintptr](abi)
	abi.free()
	return mmm.Make[API, String, uintptr](ctx, selfPtr.API, ret)
}

func (self classRenderingDevice) GetDeviceName(ctx Context) String {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingDevice.get_device_name, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[uintptr](abi)
	abi.free()
	return mmm.Make[API, String, uintptr](ctx, selfPtr.API, ret)
}

func (self classRenderingDevice) GetDevicePipelineCacheUuid(ctx Context) String {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingDevice.get_device_pipeline_cache_uuid, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[uintptr](abi)
	abi.free()
	return mmm.Make[API, String, uintptr](ctx, selfPtr.API, ret)
}

func (self classRenderingDevice) GetMemoryUsage(atype RenderingDeviceMemoryType) Int {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RenderingDeviceMemoryType](0, abi, atype)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingDevice.get_memory_usage, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Int](abi)
	abi.free()
	return ret
}

func (self classRenderingDevice) GetDriverResource(resource RenderingDeviceDriverResource, rid RID, index Int) Int {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RenderingDeviceDriverResource](0, abi, resource)
	frameSet[RID](1, abi, rid)
	frameSet[Int](2, abi, index)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingDevice.get_driver_resource, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Int](abi)
	abi.free()
	return ret
}

func (self classRenderingDevice) virtual(name string) reflect.Value {
	switch name {
	default:
		return self.Super().virtual(name)
	}
}

type classRenderingServer struct {
	Class[classRenderingServer, Object]
}

func (self classRenderingServer) Object() Object { return *self.Super() }

func (self classRenderingServer) isSingleton() {}

func (self classRenderingServer) Texture2dCreate(image Image) RID {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Image](0, abi, image)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.texture_2d_create, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[RID](abi)
	abi.free()
	return ret
}

func (self classRenderingServer) Texture2dLayeredCreate(layers ArrayOf[Image], layered_type RenderingServerTextureLayeredType) RID {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[ArrayOf[Image]](0, abi, layers)
	frameSet[RenderingServerTextureLayeredType](1, abi, layered_type)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.texture_2d_layered_create, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[RID](abi)
	abi.free()
	return ret
}

func (self classRenderingServer) Texture3dCreate(format ImageFormat, width Int, height Int, depth Int, mipmaps bool, data ArrayOf[Image]) RID {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[ImageFormat](0, abi, format)
	frameSet[Int](1, abi, width)
	frameSet[Int](2, abi, height)
	frameSet[Int](3, abi, depth)
	frameSet[bool](4, abi, mipmaps)
	frameSet[ArrayOf[Image]](5, abi, data)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.texture_3d_create, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[RID](abi)
	abi.free()
	return ret
}

func (self classRenderingServer) TextureProxyCreate(base RID) RID {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, base)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.texture_proxy_create, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[RID](abi)
	abi.free()
	return ret
}

func (self classRenderingServer) Texture2dUpdate(texture RID, image Image, layer Int) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, texture)
	frameSet[Image](1, abi, image)
	frameSet[Int](2, abi, layer)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.texture_2d_update, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classRenderingServer) Texture3dUpdate(texture RID, data ArrayOf[Image]) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, texture)
	frameSet[ArrayOf[Image]](1, abi, data)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.texture_3d_update, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classRenderingServer) TextureProxyUpdate(texture RID, proxy_to RID) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, texture)
	frameSet[RID](1, abi, proxy_to)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.texture_proxy_update, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classRenderingServer) Texture2dPlaceholderCreate() RID {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.texture_2d_placeholder_create, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[RID](abi)
	abi.free()
	return ret
}

func (self classRenderingServer) Texture2dLayeredPlaceholderCreate(layered_type RenderingServerTextureLayeredType) RID {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RenderingServerTextureLayeredType](0, abi, layered_type)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.texture_2d_layered_placeholder_create, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[RID](abi)
	abi.free()
	return ret
}

func (self classRenderingServer) Texture3dPlaceholderCreate() RID {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.texture_3d_placeholder_create, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[RID](abi)
	abi.free()
	return ret
}

func (self classRenderingServer) Texture2dGet(texture RID) Image {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, texture)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.texture_2d_get, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Image](abi)
	abi.free()
	return ret
}

func (self classRenderingServer) Texture2dLayerGet(texture RID, layer Int) Image {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, texture)
	frameSet[Int](1, abi, layer)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.texture_2d_layer_get, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Image](abi)
	abi.free()
	return ret
}

func (self classRenderingServer) Texture3dGet(texture RID) ArrayOf[Image] {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, texture)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.texture_3d_get, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[ArrayOf[Image]](abi)
	abi.free()
	return ret
}

func (self classRenderingServer) TextureReplace(texture RID, by_texture RID) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, texture)
	frameSet[RID](1, abi, by_texture)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.texture_replace, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classRenderingServer) TextureSetSizeOverride(texture RID, width Int, height Int) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, texture)
	frameSet[Int](1, abi, width)
	frameSet[Int](2, abi, height)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.texture_set_size_override, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classRenderingServer) TextureSetPath(texture RID, path String) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, texture)
	frameSet[String](1, abi, path)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.texture_set_path, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classRenderingServer) TextureGetPath(ctx Context, texture RID) String {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, texture)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.texture_get_path, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[uintptr](abi)
	abi.free()
	return mmm.Make[API, String, uintptr](ctx, selfPtr.API, ret)
}

func (self classRenderingServer) TextureGetFormat(texture RID) ImageFormat {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, texture)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.texture_get_format, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[ImageFormat](abi)
	abi.free()
	return ret
}

func (self classRenderingServer) TextureSetForceRedrawIfVisible(texture RID, enable bool) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, texture)
	frameSet[bool](1, abi, enable)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.texture_set_force_redraw_if_visible, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classRenderingServer) TextureRdCreate(rd_texture RID, layer_type RenderingServerTextureLayeredType) RID {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, rd_texture)
	frameSet[RenderingServerTextureLayeredType](1, abi, layer_type)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.texture_rd_create, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[RID](abi)
	abi.free()
	return ret
}

func (self classRenderingServer) TextureGetRdTexture(texture RID, srgb bool) RID {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, texture)
	frameSet[bool](1, abi, srgb)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.texture_get_rd_texture, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[RID](abi)
	abi.free()
	return ret
}

func (self classRenderingServer) TextureGetNativeHandle(texture RID, srgb bool) Int {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, texture)
	frameSet[bool](1, abi, srgb)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.texture_get_native_handle, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Int](abi)
	abi.free()
	return ret
}

func (self classRenderingServer) ShaderCreate() RID {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.shader_create, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[RID](abi)
	abi.free()
	return ret
}

func (self classRenderingServer) ShaderSetCode(shader RID, code String) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, shader)
	frameSet[String](1, abi, code)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.shader_set_code, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classRenderingServer) ShaderSetPathHint(shader RID, path String) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, shader)
	frameSet[String](1, abi, path)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.shader_set_path_hint, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classRenderingServer) ShaderGetCode(ctx Context, shader RID) String {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, shader)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.shader_get_code, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[uintptr](abi)
	abi.free()
	return mmm.Make[API, String, uintptr](ctx, selfPtr.API, ret)
}

func (self classRenderingServer) GetShaderParameterList(shader RID) ArrayOf[Dictionary] {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, shader)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.get_shader_parameter_list, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[ArrayOf[Dictionary]](abi)
	abi.free()
	return ret
}

func (self classRenderingServer) ShaderGetParameterDefault(ctx Context, shader RID, name StringName) Variant {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, shader)
	frameSet[StringName](1, abi, name)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.shader_get_parameter_default, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[[3]uintptr](abi)
	abi.free()
	return mmm.Make[API, Variant, [3]uintptr](ctx, selfPtr.API, ret)
}

func (self classRenderingServer) ShaderSetDefaultTextureParameter(shader RID, name StringName, texture RID, index Int) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, shader)
	frameSet[StringName](1, abi, name)
	frameSet[RID](2, abi, texture)
	frameSet[Int](3, abi, index)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.shader_set_default_texture_parameter, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classRenderingServer) ShaderGetDefaultTextureParameter(shader RID, name StringName, index Int) RID {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, shader)
	frameSet[StringName](1, abi, name)
	frameSet[Int](2, abi, index)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.shader_get_default_texture_parameter, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[RID](abi)
	abi.free()
	return ret
}

func (self classRenderingServer) MaterialCreate() RID {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.material_create, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[RID](abi)
	abi.free()
	return ret
}

func (self classRenderingServer) MaterialSetShader(shader_material RID, shader RID) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, shader_material)
	frameSet[RID](1, abi, shader)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.material_set_shader, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classRenderingServer) MaterialSetParam(material RID, parameter StringName, value Variant) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, material)
	frameSet[StringName](1, abi, parameter)
	frameSet[Variant](2, abi, value)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.material_set_param, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classRenderingServer) MaterialGetParam(ctx Context, material RID, parameter StringName) Variant {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, material)
	frameSet[StringName](1, abi, parameter)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.material_get_param, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[[3]uintptr](abi)
	abi.free()
	return mmm.Make[API, Variant, [3]uintptr](ctx, selfPtr.API, ret)
}

func (self classRenderingServer) MaterialSetRenderPriority(material RID, priority Int) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, material)
	frameSet[Int](1, abi, priority)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.material_set_render_priority, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classRenderingServer) MaterialSetNextPass(material RID, next_material RID) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, material)
	frameSet[RID](1, abi, next_material)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.material_set_next_pass, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classRenderingServer) MeshCreateFromSurfaces(surfaces ArrayOf[Dictionary], blend_shape_count Int) RID {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[ArrayOf[Dictionary]](0, abi, surfaces)
	frameSet[Int](1, abi, blend_shape_count)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.mesh_create_from_surfaces, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[RID](abi)
	abi.free()
	return ret
}

func (self classRenderingServer) MeshCreate() RID {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.mesh_create, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[RID](abi)
	abi.free()
	return ret
}

func (self classRenderingServer) MeshSurfaceGetFormatOffset(format RenderingServerArrayFormat, vertex_count Int, array_index Int) Int {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RenderingServerArrayFormat](0, abi, format)
	frameSet[Int](1, abi, vertex_count)
	frameSet[Int](2, abi, array_index)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.mesh_surface_get_format_offset, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Int](abi)
	abi.free()
	return ret
}

func (self classRenderingServer) MeshSurfaceGetFormatVertexStride(format RenderingServerArrayFormat, vertex_count Int) Int {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RenderingServerArrayFormat](0, abi, format)
	frameSet[Int](1, abi, vertex_count)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.mesh_surface_get_format_vertex_stride, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Int](abi)
	abi.free()
	return ret
}

func (self classRenderingServer) MeshSurfaceGetFormatNormalTangentStride(format RenderingServerArrayFormat, vertex_count Int) Int {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RenderingServerArrayFormat](0, abi, format)
	frameSet[Int](1, abi, vertex_count)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.mesh_surface_get_format_normal_tangent_stride, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Int](abi)
	abi.free()
	return ret
}

func (self classRenderingServer) MeshSurfaceGetFormatAttributeStride(format RenderingServerArrayFormat, vertex_count Int) Int {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RenderingServerArrayFormat](0, abi, format)
	frameSet[Int](1, abi, vertex_count)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.mesh_surface_get_format_attribute_stride, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Int](abi)
	abi.free()
	return ret
}

func (self classRenderingServer) MeshSurfaceGetFormatSkinStride(format RenderingServerArrayFormat, vertex_count Int) Int {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RenderingServerArrayFormat](0, abi, format)
	frameSet[Int](1, abi, vertex_count)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.mesh_surface_get_format_skin_stride, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Int](abi)
	abi.free()
	return ret
}

func (self classRenderingServer) MeshAddSurface(mesh RID, surface Dictionary) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, mesh)
	frameSet[Dictionary](1, abi, surface)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.mesh_add_surface, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classRenderingServer) MeshAddSurfaceFromArrays(mesh RID, primitive RenderingServerPrimitiveType, arrays Array, blend_shapes Array, lods Dictionary, compress_format RenderingServerArrayFormat) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, mesh)
	frameSet[RenderingServerPrimitiveType](1, abi, primitive)
	frameSet[Array](2, abi, arrays)
	frameSet[Array](3, abi, blend_shapes)
	frameSet[Dictionary](4, abi, lods)
	frameSet[RenderingServerArrayFormat](5, abi, compress_format)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.mesh_add_surface_from_arrays, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classRenderingServer) MeshGetBlendShapeCount(mesh RID) Int {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, mesh)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.mesh_get_blend_shape_count, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Int](abi)
	abi.free()
	return ret
}

func (self classRenderingServer) MeshSetBlendShapeMode(mesh RID, mode RenderingServerBlendShapeMode) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, mesh)
	frameSet[RenderingServerBlendShapeMode](1, abi, mode)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.mesh_set_blend_shape_mode, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classRenderingServer) MeshGetBlendShapeMode(mesh RID) RenderingServerBlendShapeMode {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, mesh)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.mesh_get_blend_shape_mode, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[RenderingServerBlendShapeMode](abi)
	abi.free()
	return ret
}

func (self classRenderingServer) MeshSurfaceSetMaterial(mesh RID, surface Int, material RID) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, mesh)
	frameSet[Int](1, abi, surface)
	frameSet[RID](2, abi, material)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.mesh_surface_set_material, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classRenderingServer) MeshSurfaceGetMaterial(mesh RID, surface Int) RID {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, mesh)
	frameSet[Int](1, abi, surface)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.mesh_surface_get_material, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[RID](abi)
	abi.free()
	return ret
}

func (self classRenderingServer) MeshGetSurface(ctx Context, mesh RID, surface Int) Dictionary {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, mesh)
	frameSet[Int](1, abi, surface)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.mesh_get_surface, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[uintptr](abi)
	abi.free()
	return mmm.Make[API, Dictionary, uintptr](ctx, selfPtr.API, ret)
}

func (self classRenderingServer) MeshSurfaceGetArrays(ctx Context, mesh RID, surface Int) Array {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, mesh)
	frameSet[Int](1, abi, surface)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.mesh_surface_get_arrays, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[uintptr](abi)
	abi.free()
	return mmm.Make[API, Array, uintptr](ctx, selfPtr.API, ret)
}

func (self classRenderingServer) MeshSurfaceGetBlendShapeArrays(mesh RID, surface Int) ArrayOf[Array] {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, mesh)
	frameSet[Int](1, abi, surface)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.mesh_surface_get_blend_shape_arrays, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[ArrayOf[Array]](abi)
	abi.free()
	return ret
}

func (self classRenderingServer) MeshGetSurfaceCount(mesh RID) Int {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, mesh)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.mesh_get_surface_count, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Int](abi)
	abi.free()
	return ret
}

func (self classRenderingServer) MeshSetCustomAabb(mesh RID, aabb AABB) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, mesh)
	frameSet[AABB](1, abi, aabb)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.mesh_set_custom_aabb, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classRenderingServer) MeshGetCustomAabb(mesh RID) AABB {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, mesh)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.mesh_get_custom_aabb, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[AABB](abi)
	abi.free()
	return ret
}

func (self classRenderingServer) MeshClear(mesh RID) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, mesh)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.mesh_clear, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classRenderingServer) MeshSurfaceUpdateVertexRegion(mesh RID, surface Int, offset Int, data PackedByteArray) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, mesh)
	frameSet[Int](1, abi, surface)
	frameSet[Int](2, abi, offset)
	frameSet[PackedByteArray](3, abi, data)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.mesh_surface_update_vertex_region, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classRenderingServer) MeshSurfaceUpdateAttributeRegion(mesh RID, surface Int, offset Int, data PackedByteArray) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, mesh)
	frameSet[Int](1, abi, surface)
	frameSet[Int](2, abi, offset)
	frameSet[PackedByteArray](3, abi, data)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.mesh_surface_update_attribute_region, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classRenderingServer) MeshSurfaceUpdateSkinRegion(mesh RID, surface Int, offset Int, data PackedByteArray) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, mesh)
	frameSet[Int](1, abi, surface)
	frameSet[Int](2, abi, offset)
	frameSet[PackedByteArray](3, abi, data)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.mesh_surface_update_skin_region, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classRenderingServer) MeshSetShadowMesh(mesh RID, shadow_mesh RID) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, mesh)
	frameSet[RID](1, abi, shadow_mesh)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.mesh_set_shadow_mesh, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classRenderingServer) MultimeshCreate() RID {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.multimesh_create, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[RID](abi)
	abi.free()
	return ret
}

func (self classRenderingServer) MultimeshAllocateData(multimesh RID, instances Int, transform_format RenderingServerMultimeshTransformFormat, color_format bool, custom_data_format bool) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, multimesh)
	frameSet[Int](1, abi, instances)
	frameSet[RenderingServerMultimeshTransformFormat](2, abi, transform_format)
	frameSet[bool](3, abi, color_format)
	frameSet[bool](4, abi, custom_data_format)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.multimesh_allocate_data, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classRenderingServer) MultimeshGetInstanceCount(multimesh RID) Int {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, multimesh)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.multimesh_get_instance_count, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Int](abi)
	abi.free()
	return ret
}

func (self classRenderingServer) MultimeshSetMesh(multimesh RID, mesh RID) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, multimesh)
	frameSet[RID](1, abi, mesh)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.multimesh_set_mesh, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classRenderingServer) MultimeshInstanceSetTransform(multimesh RID, index Int, transform Transform3D) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, multimesh)
	frameSet[Int](1, abi, index)
	frameSet[Transform3D](2, abi, transform)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.multimesh_instance_set_transform, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classRenderingServer) MultimeshInstanceSetTransform2d(multimesh RID, index Int, transform Transform2D) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, multimesh)
	frameSet[Int](1, abi, index)
	frameSet[Transform2D](2, abi, transform)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.multimesh_instance_set_transform_2d, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classRenderingServer) MultimeshInstanceSetColor(multimesh RID, index Int, color Color) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, multimesh)
	frameSet[Int](1, abi, index)
	frameSet[Color](2, abi, color)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.multimesh_instance_set_color, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classRenderingServer) MultimeshInstanceSetCustomData(multimesh RID, index Int, custom_data Color) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, multimesh)
	frameSet[Int](1, abi, index)
	frameSet[Color](2, abi, custom_data)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.multimesh_instance_set_custom_data, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classRenderingServer) MultimeshGetMesh(multimesh RID) RID {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, multimesh)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.multimesh_get_mesh, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[RID](abi)
	abi.free()
	return ret
}

func (self classRenderingServer) MultimeshGetAabb(multimesh RID) AABB {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, multimesh)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.multimesh_get_aabb, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[AABB](abi)
	abi.free()
	return ret
}

func (self classRenderingServer) MultimeshInstanceGetTransform(multimesh RID, index Int) Transform3D {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, multimesh)
	frameSet[Int](1, abi, index)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.multimesh_instance_get_transform, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Transform3D](abi)
	abi.free()
	return ret
}

func (self classRenderingServer) MultimeshInstanceGetTransform2d(multimesh RID, index Int) Transform2D {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, multimesh)
	frameSet[Int](1, abi, index)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.multimesh_instance_get_transform_2d, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Transform2D](abi)
	abi.free()
	return ret
}

func (self classRenderingServer) MultimeshInstanceGetColor(multimesh RID, index Int) Color {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, multimesh)
	frameSet[Int](1, abi, index)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.multimesh_instance_get_color, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Color](abi)
	abi.free()
	return ret
}

func (self classRenderingServer) MultimeshInstanceGetCustomData(multimesh RID, index Int) Color {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, multimesh)
	frameSet[Int](1, abi, index)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.multimesh_instance_get_custom_data, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Color](abi)
	abi.free()
	return ret
}

func (self classRenderingServer) MultimeshSetVisibleInstances(multimesh RID, visible Int) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, multimesh)
	frameSet[Int](1, abi, visible)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.multimesh_set_visible_instances, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classRenderingServer) MultimeshGetVisibleInstances(multimesh RID) Int {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, multimesh)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.multimesh_get_visible_instances, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Int](abi)
	abi.free()
	return ret
}

func (self classRenderingServer) MultimeshSetBuffer(multimesh RID, buffer PackedFloat32Array) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, multimesh)
	frameSet[PackedFloat32Array](1, abi, buffer)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.multimesh_set_buffer, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classRenderingServer) MultimeshGetBuffer(ctx Context, multimesh RID) PackedFloat32Array {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, multimesh)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.multimesh_get_buffer, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[[2]uintptr](abi)
	abi.free()
	return mmm.Make[API, PackedFloat32Array, [2]uintptr](ctx, selfPtr.API, ret)
}

func (self classRenderingServer) SkeletonCreate() RID {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.skeleton_create, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[RID](abi)
	abi.free()
	return ret
}

func (self classRenderingServer) SkeletonAllocateData(skeleton RID, bones Int, is_2d_skeleton bool) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, skeleton)
	frameSet[Int](1, abi, bones)
	frameSet[bool](2, abi, is_2d_skeleton)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.skeleton_allocate_data, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classRenderingServer) SkeletonGetBoneCount(skeleton RID) Int {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, skeleton)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.skeleton_get_bone_count, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Int](abi)
	abi.free()
	return ret
}

func (self classRenderingServer) SkeletonBoneSetTransform(skeleton RID, bone Int, transform Transform3D) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, skeleton)
	frameSet[Int](1, abi, bone)
	frameSet[Transform3D](2, abi, transform)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.skeleton_bone_set_transform, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classRenderingServer) SkeletonBoneGetTransform(skeleton RID, bone Int) Transform3D {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, skeleton)
	frameSet[Int](1, abi, bone)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.skeleton_bone_get_transform, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Transform3D](abi)
	abi.free()
	return ret
}

func (self classRenderingServer) SkeletonBoneSetTransform2d(skeleton RID, bone Int, transform Transform2D) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, skeleton)
	frameSet[Int](1, abi, bone)
	frameSet[Transform2D](2, abi, transform)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.skeleton_bone_set_transform_2d, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classRenderingServer) SkeletonBoneGetTransform2d(skeleton RID, bone Int) Transform2D {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, skeleton)
	frameSet[Int](1, abi, bone)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.skeleton_bone_get_transform_2d, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Transform2D](abi)
	abi.free()
	return ret
}

func (self classRenderingServer) SkeletonSetBaseTransform2d(skeleton RID, base_transform Transform2D) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, skeleton)
	frameSet[Transform2D](1, abi, base_transform)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.skeleton_set_base_transform_2d, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classRenderingServer) DirectionalLightCreate() RID {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.directional_light_create, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[RID](abi)
	abi.free()
	return ret
}

func (self classRenderingServer) OmniLightCreate() RID {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.omni_light_create, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[RID](abi)
	abi.free()
	return ret
}

func (self classRenderingServer) SpotLightCreate() RID {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.spot_light_create, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[RID](abi)
	abi.free()
	return ret
}

func (self classRenderingServer) LightSetColor(light RID, color Color) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, light)
	frameSet[Color](1, abi, color)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.light_set_color, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classRenderingServer) LightSetParam(light RID, param RenderingServerLightParam, value Float) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, light)
	frameSet[RenderingServerLightParam](1, abi, param)
	frameSet[Float](2, abi, value)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.light_set_param, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classRenderingServer) LightSetShadow(light RID, enabled bool) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, light)
	frameSet[bool](1, abi, enabled)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.light_set_shadow, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classRenderingServer) LightSetProjector(light RID, texture RID) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, light)
	frameSet[RID](1, abi, texture)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.light_set_projector, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classRenderingServer) LightSetNegative(light RID, enable bool) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, light)
	frameSet[bool](1, abi, enable)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.light_set_negative, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classRenderingServer) LightSetCullMask(light RID, mask Int) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, light)
	frameSet[Int](1, abi, mask)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.light_set_cull_mask, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classRenderingServer) LightSetDistanceFade(decal RID, enabled bool, begin Float, shadow Float, length Float) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, decal)
	frameSet[bool](1, abi, enabled)
	frameSet[Float](2, abi, begin)
	frameSet[Float](3, abi, shadow)
	frameSet[Float](4, abi, length)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.light_set_distance_fade, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classRenderingServer) LightSetReverseCullFaceMode(light RID, enabled bool) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, light)
	frameSet[bool](1, abi, enabled)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.light_set_reverse_cull_face_mode, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classRenderingServer) LightSetBakeMode(light RID, bake_mode RenderingServerLightBakeMode) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, light)
	frameSet[RenderingServerLightBakeMode](1, abi, bake_mode)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.light_set_bake_mode, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classRenderingServer) LightSetMaxSdfgiCascade(light RID, cascade Int) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, light)
	frameSet[Int](1, abi, cascade)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.light_set_max_sdfgi_cascade, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classRenderingServer) LightOmniSetShadowMode(light RID, mode RenderingServerLightOmniShadowMode) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, light)
	frameSet[RenderingServerLightOmniShadowMode](1, abi, mode)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.light_omni_set_shadow_mode, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classRenderingServer) LightDirectionalSetShadowMode(light RID, mode RenderingServerLightDirectionalShadowMode) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, light)
	frameSet[RenderingServerLightDirectionalShadowMode](1, abi, mode)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.light_directional_set_shadow_mode, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classRenderingServer) LightDirectionalSetBlendSplits(light RID, enable bool) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, light)
	frameSet[bool](1, abi, enable)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.light_directional_set_blend_splits, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classRenderingServer) LightDirectionalSetSkyMode(light RID, mode RenderingServerLightDirectionalSkyMode) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, light)
	frameSet[RenderingServerLightDirectionalSkyMode](1, abi, mode)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.light_directional_set_sky_mode, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classRenderingServer) LightProjectorsSetFilter(filter RenderingServerLightProjectorFilter) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RenderingServerLightProjectorFilter](0, abi, filter)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.light_projectors_set_filter, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classRenderingServer) PositionalSoftShadowFilterSetQuality(quality RenderingServerShadowQuality) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RenderingServerShadowQuality](0, abi, quality)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.positional_soft_shadow_filter_set_quality, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classRenderingServer) DirectionalSoftShadowFilterSetQuality(quality RenderingServerShadowQuality) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RenderingServerShadowQuality](0, abi, quality)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.directional_soft_shadow_filter_set_quality, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classRenderingServer) DirectionalShadowAtlasSetSize(size Int, is_16bits bool) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Int](0, abi, size)
	frameSet[bool](1, abi, is_16bits)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.directional_shadow_atlas_set_size, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classRenderingServer) ReflectionProbeCreate() RID {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.reflection_probe_create, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[RID](abi)
	abi.free()
	return ret
}

func (self classRenderingServer) ReflectionProbeSetUpdateMode(probe RID, mode RenderingServerReflectionProbeUpdateMode) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, probe)
	frameSet[RenderingServerReflectionProbeUpdateMode](1, abi, mode)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.reflection_probe_set_update_mode, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classRenderingServer) ReflectionProbeSetIntensity(probe RID, intensity Float) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, probe)
	frameSet[Float](1, abi, intensity)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.reflection_probe_set_intensity, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classRenderingServer) ReflectionProbeSetAmbientMode(probe RID, mode RenderingServerReflectionProbeAmbientMode) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, probe)
	frameSet[RenderingServerReflectionProbeAmbientMode](1, abi, mode)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.reflection_probe_set_ambient_mode, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classRenderingServer) ReflectionProbeSetAmbientColor(probe RID, color Color) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, probe)
	frameSet[Color](1, abi, color)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.reflection_probe_set_ambient_color, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classRenderingServer) ReflectionProbeSetAmbientEnergy(probe RID, energy Float) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, probe)
	frameSet[Float](1, abi, energy)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.reflection_probe_set_ambient_energy, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classRenderingServer) ReflectionProbeSetMaxDistance(probe RID, distance Float) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, probe)
	frameSet[Float](1, abi, distance)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.reflection_probe_set_max_distance, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classRenderingServer) ReflectionProbeSetSize(probe RID, size Vector3) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, probe)
	frameSet[Vector3](1, abi, size)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.reflection_probe_set_size, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classRenderingServer) ReflectionProbeSetOriginOffset(probe RID, offset Vector3) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, probe)
	frameSet[Vector3](1, abi, offset)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.reflection_probe_set_origin_offset, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classRenderingServer) ReflectionProbeSetAsInterior(probe RID, enable bool) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, probe)
	frameSet[bool](1, abi, enable)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.reflection_probe_set_as_interior, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classRenderingServer) ReflectionProbeSetEnableBoxProjection(probe RID, enable bool) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, probe)
	frameSet[bool](1, abi, enable)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.reflection_probe_set_enable_box_projection, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classRenderingServer) ReflectionProbeSetEnableShadows(probe RID, enable bool) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, probe)
	frameSet[bool](1, abi, enable)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.reflection_probe_set_enable_shadows, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classRenderingServer) ReflectionProbeSetCullMask(probe RID, layers Int) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, probe)
	frameSet[Int](1, abi, layers)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.reflection_probe_set_cull_mask, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classRenderingServer) ReflectionProbeSetResolution(probe RID, resolution Int) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, probe)
	frameSet[Int](1, abi, resolution)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.reflection_probe_set_resolution, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classRenderingServer) ReflectionProbeSetMeshLodThreshold(probe RID, pixels Float) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, probe)
	frameSet[Float](1, abi, pixels)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.reflection_probe_set_mesh_lod_threshold, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classRenderingServer) DecalCreate() RID {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.decal_create, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[RID](abi)
	abi.free()
	return ret
}

func (self classRenderingServer) DecalSetSize(decal RID, size Vector3) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, decal)
	frameSet[Vector3](1, abi, size)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.decal_set_size, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classRenderingServer) DecalSetTexture(decal RID, atype RenderingServerDecalTexture, texture RID) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, decal)
	frameSet[RenderingServerDecalTexture](1, abi, atype)
	frameSet[RID](2, abi, texture)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.decal_set_texture, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classRenderingServer) DecalSetEmissionEnergy(decal RID, energy Float) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, decal)
	frameSet[Float](1, abi, energy)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.decal_set_emission_energy, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classRenderingServer) DecalSetAlbedoMix(decal RID, albedo_mix Float) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, decal)
	frameSet[Float](1, abi, albedo_mix)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.decal_set_albedo_mix, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classRenderingServer) DecalSetModulate(decal RID, color Color) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, decal)
	frameSet[Color](1, abi, color)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.decal_set_modulate, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classRenderingServer) DecalSetCullMask(decal RID, mask Int) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, decal)
	frameSet[Int](1, abi, mask)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.decal_set_cull_mask, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classRenderingServer) DecalSetDistanceFade(decal RID, enabled bool, begin Float, length Float) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, decal)
	frameSet[bool](1, abi, enabled)
	frameSet[Float](2, abi, begin)
	frameSet[Float](3, abi, length)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.decal_set_distance_fade, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classRenderingServer) DecalSetFade(decal RID, above Float, below Float) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, decal)
	frameSet[Float](1, abi, above)
	frameSet[Float](2, abi, below)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.decal_set_fade, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classRenderingServer) DecalSetNormalFade(decal RID, fade Float) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, decal)
	frameSet[Float](1, abi, fade)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.decal_set_normal_fade, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classRenderingServer) DecalsSetFilter(filter RenderingServerDecalFilter) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RenderingServerDecalFilter](0, abi, filter)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.decals_set_filter, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classRenderingServer) GiSetUseHalfResolution(half_resolution bool) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[bool](0, abi, half_resolution)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.gi_set_use_half_resolution, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classRenderingServer) VoxelGiCreate() RID {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.voxel_gi_create, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[RID](abi)
	abi.free()
	return ret
}

func (self classRenderingServer) VoxelGiAllocateData(voxel_gi RID, to_cell_xform Transform3D, aabb AABB, octree_size Vector3i, octree_cells PackedByteArray, data_cells PackedByteArray, distance_field PackedByteArray, level_counts PackedInt32Array) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, voxel_gi)
	frameSet[Transform3D](1, abi, to_cell_xform)
	frameSet[AABB](2, abi, aabb)
	frameSet[Vector3i](3, abi, octree_size)
	frameSet[PackedByteArray](4, abi, octree_cells)
	frameSet[PackedByteArray](5, abi, data_cells)
	frameSet[PackedByteArray](6, abi, distance_field)
	frameSet[PackedInt32Array](7, abi, level_counts)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.voxel_gi_allocate_data, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classRenderingServer) VoxelGiGetOctreeSize(voxel_gi RID) Vector3i {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, voxel_gi)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.voxel_gi_get_octree_size, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Vector3i](abi)
	abi.free()
	return ret
}

func (self classRenderingServer) VoxelGiGetOctreeCells(ctx Context, voxel_gi RID) PackedByteArray {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, voxel_gi)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.voxel_gi_get_octree_cells, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[[2]uintptr](abi)
	abi.free()
	return mmm.Make[API, PackedByteArray, [2]uintptr](ctx, selfPtr.API, ret)
}

func (self classRenderingServer) VoxelGiGetDataCells(ctx Context, voxel_gi RID) PackedByteArray {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, voxel_gi)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.voxel_gi_get_data_cells, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[[2]uintptr](abi)
	abi.free()
	return mmm.Make[API, PackedByteArray, [2]uintptr](ctx, selfPtr.API, ret)
}

func (self classRenderingServer) VoxelGiGetDistanceField(ctx Context, voxel_gi RID) PackedByteArray {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, voxel_gi)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.voxel_gi_get_distance_field, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[[2]uintptr](abi)
	abi.free()
	return mmm.Make[API, PackedByteArray, [2]uintptr](ctx, selfPtr.API, ret)
}

func (self classRenderingServer) VoxelGiGetLevelCounts(ctx Context, voxel_gi RID) PackedInt32Array {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, voxel_gi)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.voxel_gi_get_level_counts, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[[2]uintptr](abi)
	abi.free()
	return mmm.Make[API, PackedInt32Array, [2]uintptr](ctx, selfPtr.API, ret)
}

func (self classRenderingServer) VoxelGiGetToCellXform(voxel_gi RID) Transform3D {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, voxel_gi)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.voxel_gi_get_to_cell_xform, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Transform3D](abi)
	abi.free()
	return ret
}

func (self classRenderingServer) VoxelGiSetDynamicRange(voxel_gi RID, arange Float) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, voxel_gi)
	frameSet[Float](1, abi, arange)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.voxel_gi_set_dynamic_range, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classRenderingServer) VoxelGiSetPropagation(voxel_gi RID, amount Float) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, voxel_gi)
	frameSet[Float](1, abi, amount)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.voxel_gi_set_propagation, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classRenderingServer) VoxelGiSetEnergy(voxel_gi RID, energy Float) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, voxel_gi)
	frameSet[Float](1, abi, energy)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.voxel_gi_set_energy, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classRenderingServer) VoxelGiSetBakedExposureNormalization(voxel_gi RID, baked_exposure Float) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, voxel_gi)
	frameSet[Float](1, abi, baked_exposure)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.voxel_gi_set_baked_exposure_normalization, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classRenderingServer) VoxelGiSetBias(voxel_gi RID, bias Float) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, voxel_gi)
	frameSet[Float](1, abi, bias)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.voxel_gi_set_bias, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classRenderingServer) VoxelGiSetNormalBias(voxel_gi RID, bias Float) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, voxel_gi)
	frameSet[Float](1, abi, bias)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.voxel_gi_set_normal_bias, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classRenderingServer) VoxelGiSetInterior(voxel_gi RID, enable bool) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, voxel_gi)
	frameSet[bool](1, abi, enable)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.voxel_gi_set_interior, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classRenderingServer) VoxelGiSetUseTwoBounces(voxel_gi RID, enable bool) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, voxel_gi)
	frameSet[bool](1, abi, enable)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.voxel_gi_set_use_two_bounces, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classRenderingServer) VoxelGiSetQuality(quality RenderingServerVoxelGIQuality) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RenderingServerVoxelGIQuality](0, abi, quality)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.voxel_gi_set_quality, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classRenderingServer) LightmapCreate() RID {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.lightmap_create, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[RID](abi)
	abi.free()
	return ret
}

func (self classRenderingServer) LightmapSetTextures(lightmap RID, light RID, uses_sh bool) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, lightmap)
	frameSet[RID](1, abi, light)
	frameSet[bool](2, abi, uses_sh)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.lightmap_set_textures, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classRenderingServer) LightmapSetProbeBounds(lightmap RID, bounds AABB) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, lightmap)
	frameSet[AABB](1, abi, bounds)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.lightmap_set_probe_bounds, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classRenderingServer) LightmapSetProbeInterior(lightmap RID, interior bool) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, lightmap)
	frameSet[bool](1, abi, interior)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.lightmap_set_probe_interior, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classRenderingServer) LightmapSetProbeCaptureData(lightmap RID, points PackedVector3Array, point_sh PackedColorArray, tetrahedra PackedInt32Array, bsp_tree PackedInt32Array) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, lightmap)
	frameSet[PackedVector3Array](1, abi, points)
	frameSet[PackedColorArray](2, abi, point_sh)
	frameSet[PackedInt32Array](3, abi, tetrahedra)
	frameSet[PackedInt32Array](4, abi, bsp_tree)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.lightmap_set_probe_capture_data, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classRenderingServer) LightmapGetProbeCapturePoints(ctx Context, lightmap RID) PackedVector3Array {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, lightmap)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.lightmap_get_probe_capture_points, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[[2]uintptr](abi)
	abi.free()
	return mmm.Make[API, PackedVector3Array, [2]uintptr](ctx, selfPtr.API, ret)
}

func (self classRenderingServer) LightmapGetProbeCaptureSh(ctx Context, lightmap RID) PackedColorArray {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, lightmap)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.lightmap_get_probe_capture_sh, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[[2]uintptr](abi)
	abi.free()
	return mmm.Make[API, PackedColorArray, [2]uintptr](ctx, selfPtr.API, ret)
}

func (self classRenderingServer) LightmapGetProbeCaptureTetrahedra(ctx Context, lightmap RID) PackedInt32Array {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, lightmap)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.lightmap_get_probe_capture_tetrahedra, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[[2]uintptr](abi)
	abi.free()
	return mmm.Make[API, PackedInt32Array, [2]uintptr](ctx, selfPtr.API, ret)
}

func (self classRenderingServer) LightmapGetProbeCaptureBspTree(ctx Context, lightmap RID) PackedInt32Array {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, lightmap)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.lightmap_get_probe_capture_bsp_tree, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[[2]uintptr](abi)
	abi.free()
	return mmm.Make[API, PackedInt32Array, [2]uintptr](ctx, selfPtr.API, ret)
}

func (self classRenderingServer) LightmapSetBakedExposureNormalization(lightmap RID, baked_exposure Float) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, lightmap)
	frameSet[Float](1, abi, baked_exposure)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.lightmap_set_baked_exposure_normalization, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classRenderingServer) LightmapSetProbeCaptureUpdateSpeed(speed Float) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Float](0, abi, speed)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.lightmap_set_probe_capture_update_speed, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classRenderingServer) ParticlesCreate() RID {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.particles_create, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[RID](abi)
	abi.free()
	return ret
}

func (self classRenderingServer) ParticlesSetMode(particles RID, mode RenderingServerParticlesMode) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, particles)
	frameSet[RenderingServerParticlesMode](1, abi, mode)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.particles_set_mode, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classRenderingServer) ParticlesSetEmitting(particles RID, emitting bool) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, particles)
	frameSet[bool](1, abi, emitting)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.particles_set_emitting, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classRenderingServer) ParticlesGetEmitting(particles RID) bool {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, particles)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.particles_get_emitting, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self classRenderingServer) ParticlesSetAmount(particles RID, amount Int) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, particles)
	frameSet[Int](1, abi, amount)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.particles_set_amount, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classRenderingServer) ParticlesSetAmountRatio(particles RID, ratio Float) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, particles)
	frameSet[Float](1, abi, ratio)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.particles_set_amount_ratio, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classRenderingServer) ParticlesSetLifetime(particles RID, lifetime Float) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, particles)
	frameSet[Float](1, abi, lifetime)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.particles_set_lifetime, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classRenderingServer) ParticlesSetOneShot(particles RID, one_shot bool) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, particles)
	frameSet[bool](1, abi, one_shot)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.particles_set_one_shot, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classRenderingServer) ParticlesSetPreProcessTime(particles RID, time Float) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, particles)
	frameSet[Float](1, abi, time)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.particles_set_pre_process_time, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classRenderingServer) ParticlesSetExplosivenessRatio(particles RID, ratio Float) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, particles)
	frameSet[Float](1, abi, ratio)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.particles_set_explosiveness_ratio, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classRenderingServer) ParticlesSetRandomnessRatio(particles RID, ratio Float) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, particles)
	frameSet[Float](1, abi, ratio)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.particles_set_randomness_ratio, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classRenderingServer) ParticlesSetInterpToEnd(particles RID, factor Float) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, particles)
	frameSet[Float](1, abi, factor)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.particles_set_interp_to_end, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classRenderingServer) ParticlesSetEmitterVelocity(particles RID, velocity Vector3) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, particles)
	frameSet[Vector3](1, abi, velocity)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.particles_set_emitter_velocity, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classRenderingServer) ParticlesSetCustomAabb(particles RID, aabb AABB) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, particles)
	frameSet[AABB](1, abi, aabb)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.particles_set_custom_aabb, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classRenderingServer) ParticlesSetSpeedScale(particles RID, scale Float) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, particles)
	frameSet[Float](1, abi, scale)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.particles_set_speed_scale, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classRenderingServer) ParticlesSetUseLocalCoordinates(particles RID, enable bool) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, particles)
	frameSet[bool](1, abi, enable)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.particles_set_use_local_coordinates, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classRenderingServer) ParticlesSetProcessMaterial(particles RID, material RID) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, particles)
	frameSet[RID](1, abi, material)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.particles_set_process_material, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classRenderingServer) ParticlesSetFixedFps(particles RID, fps Int) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, particles)
	frameSet[Int](1, abi, fps)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.particles_set_fixed_fps, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classRenderingServer) ParticlesSetInterpolate(particles RID, enable bool) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, particles)
	frameSet[bool](1, abi, enable)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.particles_set_interpolate, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classRenderingServer) ParticlesSetFractionalDelta(particles RID, enable bool) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, particles)
	frameSet[bool](1, abi, enable)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.particles_set_fractional_delta, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classRenderingServer) ParticlesSetCollisionBaseSize(particles RID, size Float) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, particles)
	frameSet[Float](1, abi, size)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.particles_set_collision_base_size, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classRenderingServer) ParticlesSetTransformAlign(particles RID, align RenderingServerParticlesTransformAlign) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, particles)
	frameSet[RenderingServerParticlesTransformAlign](1, abi, align)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.particles_set_transform_align, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classRenderingServer) ParticlesSetTrails(particles RID, enable bool, length_sec Float) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, particles)
	frameSet[bool](1, abi, enable)
	frameSet[Float](2, abi, length_sec)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.particles_set_trails, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classRenderingServer) ParticlesSetTrailBindPoses(particles RID, bind_poses ArrayOf[Transform3D]) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, particles)
	frameSet[ArrayOf[Transform3D]](1, abi, bind_poses)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.particles_set_trail_bind_poses, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classRenderingServer) ParticlesIsInactive(particles RID) bool {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, particles)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.particles_is_inactive, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self classRenderingServer) ParticlesRequestProcess(particles RID) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, particles)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.particles_request_process, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classRenderingServer) ParticlesRestart(particles RID) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, particles)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.particles_restart, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classRenderingServer) ParticlesSetSubemitter(particles RID, subemitter_particles RID) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, particles)
	frameSet[RID](1, abi, subemitter_particles)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.particles_set_subemitter, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classRenderingServer) ParticlesEmit(particles RID, transform Transform3D, velocity Vector3, color Color, custom Color, emit_flags Int) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, particles)
	frameSet[Transform3D](1, abi, transform)
	frameSet[Vector3](2, abi, velocity)
	frameSet[Color](3, abi, color)
	frameSet[Color](4, abi, custom)
	frameSet[Int](5, abi, emit_flags)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.particles_emit, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classRenderingServer) ParticlesSetDrawOrder(particles RID, order RenderingServerParticlesDrawOrder) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, particles)
	frameSet[RenderingServerParticlesDrawOrder](1, abi, order)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.particles_set_draw_order, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classRenderingServer) ParticlesSetDrawPasses(particles RID, count Int) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, particles)
	frameSet[Int](1, abi, count)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.particles_set_draw_passes, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classRenderingServer) ParticlesSetDrawPassMesh(particles RID, pass Int, mesh RID) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, particles)
	frameSet[Int](1, abi, pass)
	frameSet[RID](2, abi, mesh)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.particles_set_draw_pass_mesh, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classRenderingServer) ParticlesGetCurrentAabb(particles RID) AABB {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, particles)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.particles_get_current_aabb, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[AABB](abi)
	abi.free()
	return ret
}

func (self classRenderingServer) ParticlesSetEmissionTransform(particles RID, transform Transform3D) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, particles)
	frameSet[Transform3D](1, abi, transform)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.particles_set_emission_transform, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classRenderingServer) ParticlesCollisionCreate() RID {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.particles_collision_create, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[RID](abi)
	abi.free()
	return ret
}

func (self classRenderingServer) ParticlesCollisionSetCollisionType(particles_collision RID, atype RenderingServerParticlesCollisionType) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, particles_collision)
	frameSet[RenderingServerParticlesCollisionType](1, abi, atype)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.particles_collision_set_collision_type, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classRenderingServer) ParticlesCollisionSetCullMask(particles_collision RID, mask Int) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, particles_collision)
	frameSet[Int](1, abi, mask)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.particles_collision_set_cull_mask, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classRenderingServer) ParticlesCollisionSetSphereRadius(particles_collision RID, radius Float) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, particles_collision)
	frameSet[Float](1, abi, radius)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.particles_collision_set_sphere_radius, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classRenderingServer) ParticlesCollisionSetBoxExtents(particles_collision RID, extents Vector3) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, particles_collision)
	frameSet[Vector3](1, abi, extents)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.particles_collision_set_box_extents, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classRenderingServer) ParticlesCollisionSetAttractorStrength(particles_collision RID, strength Float) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, particles_collision)
	frameSet[Float](1, abi, strength)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.particles_collision_set_attractor_strength, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classRenderingServer) ParticlesCollisionSetAttractorDirectionality(particles_collision RID, amount Float) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, particles_collision)
	frameSet[Float](1, abi, amount)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.particles_collision_set_attractor_directionality, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classRenderingServer) ParticlesCollisionSetAttractorAttenuation(particles_collision RID, curve Float) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, particles_collision)
	frameSet[Float](1, abi, curve)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.particles_collision_set_attractor_attenuation, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classRenderingServer) ParticlesCollisionSetFieldTexture(particles_collision RID, texture RID) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, particles_collision)
	frameSet[RID](1, abi, texture)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.particles_collision_set_field_texture, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classRenderingServer) ParticlesCollisionHeightFieldUpdate(particles_collision RID) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, particles_collision)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.particles_collision_height_field_update, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classRenderingServer) ParticlesCollisionSetHeightFieldResolution(particles_collision RID, resolution RenderingServerParticlesCollisionHeightfieldResolution) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, particles_collision)
	frameSet[RenderingServerParticlesCollisionHeightfieldResolution](1, abi, resolution)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.particles_collision_set_height_field_resolution, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classRenderingServer) FogVolumeCreate() RID {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.fog_volume_create, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[RID](abi)
	abi.free()
	return ret
}

func (self classRenderingServer) FogVolumeSetShape(fog_volume RID, shape RenderingServerFogVolumeShape) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, fog_volume)
	frameSet[RenderingServerFogVolumeShape](1, abi, shape)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.fog_volume_set_shape, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classRenderingServer) FogVolumeSetSize(fog_volume RID, size Vector3) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, fog_volume)
	frameSet[Vector3](1, abi, size)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.fog_volume_set_size, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classRenderingServer) FogVolumeSetMaterial(fog_volume RID, material RID) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, fog_volume)
	frameSet[RID](1, abi, material)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.fog_volume_set_material, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classRenderingServer) VisibilityNotifierCreate() RID {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.visibility_notifier_create, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[RID](abi)
	abi.free()
	return ret
}

func (self classRenderingServer) VisibilityNotifierSetAabb(notifier RID, aabb AABB) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, notifier)
	frameSet[AABB](1, abi, aabb)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.visibility_notifier_set_aabb, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classRenderingServer) VisibilityNotifierSetCallbacks(notifier RID, enter_callable Callable, exit_callable Callable) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, notifier)
	frameSet[Callable](1, abi, enter_callable)
	frameSet[Callable](2, abi, exit_callable)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.visibility_notifier_set_callbacks, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classRenderingServer) OccluderCreate() RID {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.occluder_create, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[RID](abi)
	abi.free()
	return ret
}

func (self classRenderingServer) OccluderSetMesh(occluder RID, vertices PackedVector3Array, indices PackedInt32Array) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, occluder)
	frameSet[PackedVector3Array](1, abi, vertices)
	frameSet[PackedInt32Array](2, abi, indices)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.occluder_set_mesh, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classRenderingServer) CameraCreate() RID {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.camera_create, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[RID](abi)
	abi.free()
	return ret
}

func (self classRenderingServer) CameraSetPerspective(camera RID, fovy_degrees Float, z_near Float, z_far Float) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, camera)
	frameSet[Float](1, abi, fovy_degrees)
	frameSet[Float](2, abi, z_near)
	frameSet[Float](3, abi, z_far)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.camera_set_perspective, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classRenderingServer) CameraSetOrthogonal(camera RID, size Float, z_near Float, z_far Float) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, camera)
	frameSet[Float](1, abi, size)
	frameSet[Float](2, abi, z_near)
	frameSet[Float](3, abi, z_far)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.camera_set_orthogonal, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classRenderingServer) CameraSetFrustum(camera RID, size Float, offset Vector2, z_near Float, z_far Float) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, camera)
	frameSet[Float](1, abi, size)
	frameSet[Vector2](2, abi, offset)
	frameSet[Float](3, abi, z_near)
	frameSet[Float](4, abi, z_far)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.camera_set_frustum, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classRenderingServer) CameraSetTransform(camera RID, transform Transform3D) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, camera)
	frameSet[Transform3D](1, abi, transform)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.camera_set_transform, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classRenderingServer) CameraSetCullMask(camera RID, layers Int) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, camera)
	frameSet[Int](1, abi, layers)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.camera_set_cull_mask, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classRenderingServer) CameraSetEnvironment(camera RID, env RID) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, camera)
	frameSet[RID](1, abi, env)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.camera_set_environment, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classRenderingServer) CameraSetCameraAttributes(camera RID, effects RID) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, camera)
	frameSet[RID](1, abi, effects)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.camera_set_camera_attributes, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classRenderingServer) CameraSetUseVerticalAspect(camera RID, enable bool) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, camera)
	frameSet[bool](1, abi, enable)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.camera_set_use_vertical_aspect, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classRenderingServer) ViewportCreate() RID {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.viewport_create, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[RID](abi)
	abi.free()
	return ret
}

func (self classRenderingServer) ViewportSetUseXr(viewport RID, use_xr bool) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, viewport)
	frameSet[bool](1, abi, use_xr)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.viewport_set_use_xr, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classRenderingServer) ViewportSetSize(viewport RID, width Int, height Int) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, viewport)
	frameSet[Int](1, abi, width)
	frameSet[Int](2, abi, height)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.viewport_set_size, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classRenderingServer) ViewportSetActive(viewport RID, active bool) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, viewport)
	frameSet[bool](1, abi, active)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.viewport_set_active, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classRenderingServer) ViewportSetParentViewport(viewport RID, parent_viewport RID) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, viewport)
	frameSet[RID](1, abi, parent_viewport)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.viewport_set_parent_viewport, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classRenderingServer) ViewportAttachToScreen(viewport RID, rect Rect2, screen Int) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, viewport)
	frameSet[Rect2](1, abi, rect)
	frameSet[Int](2, abi, screen)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.viewport_attach_to_screen, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classRenderingServer) ViewportSetRenderDirectToScreen(viewport RID, enabled bool) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, viewport)
	frameSet[bool](1, abi, enabled)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.viewport_set_render_direct_to_screen, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classRenderingServer) ViewportSetCanvasCullMask(viewport RID, canvas_cull_mask Int) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, viewport)
	frameSet[Int](1, abi, canvas_cull_mask)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.viewport_set_canvas_cull_mask, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classRenderingServer) ViewportSetScaling3dMode(viewport RID, scaling_3d_mode RenderingServerViewportScaling3DMode) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, viewport)
	frameSet[RenderingServerViewportScaling3DMode](1, abi, scaling_3d_mode)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.viewport_set_scaling_3d_mode, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classRenderingServer) ViewportSetScaling3dScale(viewport RID, scale Float) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, viewport)
	frameSet[Float](1, abi, scale)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.viewport_set_scaling_3d_scale, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classRenderingServer) ViewportSetFsrSharpness(viewport RID, sharpness Float) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, viewport)
	frameSet[Float](1, abi, sharpness)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.viewport_set_fsr_sharpness, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classRenderingServer) ViewportSetTextureMipmapBias(viewport RID, mipmap_bias Float) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, viewport)
	frameSet[Float](1, abi, mipmap_bias)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.viewport_set_texture_mipmap_bias, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classRenderingServer) ViewportSetUpdateMode(viewport RID, update_mode RenderingServerViewportUpdateMode) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, viewport)
	frameSet[RenderingServerViewportUpdateMode](1, abi, update_mode)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.viewport_set_update_mode, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classRenderingServer) ViewportSetClearMode(viewport RID, clear_mode RenderingServerViewportClearMode) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, viewport)
	frameSet[RenderingServerViewportClearMode](1, abi, clear_mode)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.viewport_set_clear_mode, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classRenderingServer) ViewportGetRenderTarget(viewport RID) RID {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, viewport)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.viewport_get_render_target, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[RID](abi)
	abi.free()
	return ret
}

func (self classRenderingServer) ViewportGetTexture(viewport RID) RID {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, viewport)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.viewport_get_texture, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[RID](abi)
	abi.free()
	return ret
}

func (self classRenderingServer) ViewportSetDisable3d(viewport RID, disable bool) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, viewport)
	frameSet[bool](1, abi, disable)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.viewport_set_disable_3d, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classRenderingServer) ViewportSetDisable2d(viewport RID, disable bool) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, viewport)
	frameSet[bool](1, abi, disable)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.viewport_set_disable_2d, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classRenderingServer) ViewportSetEnvironmentMode(viewport RID, mode RenderingServerViewportEnvironmentMode) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, viewport)
	frameSet[RenderingServerViewportEnvironmentMode](1, abi, mode)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.viewport_set_environment_mode, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classRenderingServer) ViewportAttachCamera(viewport RID, camera RID) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, viewport)
	frameSet[RID](1, abi, camera)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.viewport_attach_camera, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classRenderingServer) ViewportSetScenario(viewport RID, scenario RID) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, viewport)
	frameSet[RID](1, abi, scenario)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.viewport_set_scenario, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classRenderingServer) ViewportAttachCanvas(viewport RID, canvas RID) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, viewport)
	frameSet[RID](1, abi, canvas)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.viewport_attach_canvas, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classRenderingServer) ViewportRemoveCanvas(viewport RID, canvas RID) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, viewport)
	frameSet[RID](1, abi, canvas)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.viewport_remove_canvas, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classRenderingServer) ViewportSetSnap2dTransformsToPixel(viewport RID, enabled bool) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, viewport)
	frameSet[bool](1, abi, enabled)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.viewport_set_snap_2d_transforms_to_pixel, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classRenderingServer) ViewportSetSnap2dVerticesToPixel(viewport RID, enabled bool) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, viewport)
	frameSet[bool](1, abi, enabled)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.viewport_set_snap_2d_vertices_to_pixel, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classRenderingServer) ViewportSetDefaultCanvasItemTextureFilter(viewport RID, filter RenderingServerCanvasItemTextureFilter) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, viewport)
	frameSet[RenderingServerCanvasItemTextureFilter](1, abi, filter)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.viewport_set_default_canvas_item_texture_filter, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classRenderingServer) ViewportSetDefaultCanvasItemTextureRepeat(viewport RID, repeat RenderingServerCanvasItemTextureRepeat) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, viewport)
	frameSet[RenderingServerCanvasItemTextureRepeat](1, abi, repeat)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.viewport_set_default_canvas_item_texture_repeat, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classRenderingServer) ViewportSetCanvasTransform(viewport RID, canvas RID, offset Transform2D) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, viewport)
	frameSet[RID](1, abi, canvas)
	frameSet[Transform2D](2, abi, offset)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.viewport_set_canvas_transform, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classRenderingServer) ViewportSetCanvasStacking(viewport RID, canvas RID, layer Int, sublayer Int) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, viewport)
	frameSet[RID](1, abi, canvas)
	frameSet[Int](2, abi, layer)
	frameSet[Int](3, abi, sublayer)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.viewport_set_canvas_stacking, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classRenderingServer) ViewportSetTransparentBackground(viewport RID, enabled bool) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, viewport)
	frameSet[bool](1, abi, enabled)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.viewport_set_transparent_background, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classRenderingServer) ViewportSetGlobalCanvasTransform(viewport RID, transform Transform2D) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, viewport)
	frameSet[Transform2D](1, abi, transform)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.viewport_set_global_canvas_transform, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classRenderingServer) ViewportSetSdfOversizeAndScale(viewport RID, oversize RenderingServerViewportSDFOversize, scale RenderingServerViewportSDFScale) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, viewport)
	frameSet[RenderingServerViewportSDFOversize](1, abi, oversize)
	frameSet[RenderingServerViewportSDFScale](2, abi, scale)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.viewport_set_sdf_oversize_and_scale, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classRenderingServer) ViewportSetPositionalShadowAtlasSize(viewport RID, size Int, use_16_bits bool) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, viewport)
	frameSet[Int](1, abi, size)
	frameSet[bool](2, abi, use_16_bits)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.viewport_set_positional_shadow_atlas_size, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classRenderingServer) ViewportSetPositionalShadowAtlasQuadrantSubdivision(viewport RID, quadrant Int, subdivision Int) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, viewport)
	frameSet[Int](1, abi, quadrant)
	frameSet[Int](2, abi, subdivision)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.viewport_set_positional_shadow_atlas_quadrant_subdivision, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classRenderingServer) ViewportSetMsaa3d(viewport RID, msaa RenderingServerViewportMSAA) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, viewport)
	frameSet[RenderingServerViewportMSAA](1, abi, msaa)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.viewport_set_msaa_3d, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classRenderingServer) ViewportSetMsaa2d(viewport RID, msaa RenderingServerViewportMSAA) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, viewport)
	frameSet[RenderingServerViewportMSAA](1, abi, msaa)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.viewport_set_msaa_2d, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classRenderingServer) ViewportSetUseHdr2d(viewport RID, enabled bool) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, viewport)
	frameSet[bool](1, abi, enabled)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.viewport_set_use_hdr_2d, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classRenderingServer) ViewportSetScreenSpaceAa(viewport RID, mode RenderingServerViewportScreenSpaceAA) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, viewport)
	frameSet[RenderingServerViewportScreenSpaceAA](1, abi, mode)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.viewport_set_screen_space_aa, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classRenderingServer) ViewportSetUseTaa(viewport RID, enable bool) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, viewport)
	frameSet[bool](1, abi, enable)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.viewport_set_use_taa, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classRenderingServer) ViewportSetUseDebanding(viewport RID, enable bool) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, viewport)
	frameSet[bool](1, abi, enable)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.viewport_set_use_debanding, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classRenderingServer) ViewportSetUseOcclusionCulling(viewport RID, enable bool) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, viewport)
	frameSet[bool](1, abi, enable)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.viewport_set_use_occlusion_culling, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classRenderingServer) ViewportSetOcclusionRaysPerThread(rays_per_thread Int) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Int](0, abi, rays_per_thread)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.viewport_set_occlusion_rays_per_thread, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classRenderingServer) ViewportSetOcclusionCullingBuildQuality(quality RenderingServerViewportOcclusionCullingBuildQuality) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RenderingServerViewportOcclusionCullingBuildQuality](0, abi, quality)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.viewport_set_occlusion_culling_build_quality, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classRenderingServer) ViewportGetRenderInfo(viewport RID, atype RenderingServerViewportRenderInfoType, info RenderingServerViewportRenderInfo) Int {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, viewport)
	frameSet[RenderingServerViewportRenderInfoType](1, abi, atype)
	frameSet[RenderingServerViewportRenderInfo](2, abi, info)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.viewport_get_render_info, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Int](abi)
	abi.free()
	return ret
}

func (self classRenderingServer) ViewportSetDebugDraw(viewport RID, draw RenderingServerViewportDebugDraw) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, viewport)
	frameSet[RenderingServerViewportDebugDraw](1, abi, draw)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.viewport_set_debug_draw, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classRenderingServer) ViewportSetMeasureRenderTime(viewport RID, enable bool) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, viewport)
	frameSet[bool](1, abi, enable)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.viewport_set_measure_render_time, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classRenderingServer) ViewportGetMeasuredRenderTimeCpu(viewport RID) Float {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, viewport)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.viewport_get_measured_render_time_cpu, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Float](abi)
	abi.free()
	return ret
}

func (self classRenderingServer) ViewportGetMeasuredRenderTimeGpu(viewport RID) Float {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, viewport)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.viewport_get_measured_render_time_gpu, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Float](abi)
	abi.free()
	return ret
}

func (self classRenderingServer) ViewportSetVrsMode(viewport RID, mode RenderingServerViewportVRSMode) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, viewport)
	frameSet[RenderingServerViewportVRSMode](1, abi, mode)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.viewport_set_vrs_mode, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classRenderingServer) ViewportSetVrsTexture(viewport RID, texture RID) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, viewport)
	frameSet[RID](1, abi, texture)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.viewport_set_vrs_texture, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classRenderingServer) SkyCreate() RID {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.sky_create, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[RID](abi)
	abi.free()
	return ret
}

func (self classRenderingServer) SkySetRadianceSize(sky RID, radiance_size Int) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, sky)
	frameSet[Int](1, abi, radiance_size)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.sky_set_radiance_size, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classRenderingServer) SkySetMode(sky RID, mode RenderingServerSkyMode) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, sky)
	frameSet[RenderingServerSkyMode](1, abi, mode)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.sky_set_mode, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classRenderingServer) SkySetMaterial(sky RID, material RID) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, sky)
	frameSet[RID](1, abi, material)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.sky_set_material, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classRenderingServer) SkyBakePanorama(sky RID, energy Float, bake_irradiance bool, size Vector2i) Image {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, sky)
	frameSet[Float](1, abi, energy)
	frameSet[bool](2, abi, bake_irradiance)
	frameSet[Vector2i](3, abi, size)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.sky_bake_panorama, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Image](abi)
	abi.free()
	return ret
}

func (self classRenderingServer) EnvironmentCreate() RID {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.environment_create, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[RID](abi)
	abi.free()
	return ret
}

func (self classRenderingServer) EnvironmentSetBackground(env RID, bg RenderingServerEnvironmentBG) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, env)
	frameSet[RenderingServerEnvironmentBG](1, abi, bg)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.environment_set_background, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classRenderingServer) EnvironmentSetSky(env RID, sky RID) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, env)
	frameSet[RID](1, abi, sky)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.environment_set_sky, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classRenderingServer) EnvironmentSetSkyCustomFov(env RID, scale Float) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, env)
	frameSet[Float](1, abi, scale)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.environment_set_sky_custom_fov, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classRenderingServer) EnvironmentSetSkyOrientation(env RID, orientation Basis) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, env)
	frameSet[Basis](1, abi, orientation)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.environment_set_sky_orientation, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classRenderingServer) EnvironmentSetBgColor(env RID, color Color) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, env)
	frameSet[Color](1, abi, color)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.environment_set_bg_color, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classRenderingServer) EnvironmentSetBgEnergy(env RID, multiplier Float, exposure_value Float) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, env)
	frameSet[Float](1, abi, multiplier)
	frameSet[Float](2, abi, exposure_value)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.environment_set_bg_energy, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classRenderingServer) EnvironmentSetCanvasMaxLayer(env RID, max_layer Int) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, env)
	frameSet[Int](1, abi, max_layer)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.environment_set_canvas_max_layer, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classRenderingServer) EnvironmentSetAmbientLight(env RID, color Color, ambient RenderingServerEnvironmentAmbientSource, energy Float, sky_contibution Float, reflection_source RenderingServerEnvironmentReflectionSource) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, env)
	frameSet[Color](1, abi, color)
	frameSet[RenderingServerEnvironmentAmbientSource](2, abi, ambient)
	frameSet[Float](3, abi, energy)
	frameSet[Float](4, abi, sky_contibution)
	frameSet[RenderingServerEnvironmentReflectionSource](5, abi, reflection_source)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.environment_set_ambient_light, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classRenderingServer) EnvironmentSetGlow(env RID, enable bool, levels PackedFloat32Array, intensity Float, strength Float, mix Float, bloom_threshold Float, blend_mode RenderingServerEnvironmentGlowBlendMode, hdr_bleed_threshold Float, hdr_bleed_scale Float, hdr_luminance_cap Float, glow_map_strength Float, glow_map RID) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, env)
	frameSet[bool](1, abi, enable)
	frameSet[PackedFloat32Array](2, abi, levels)
	frameSet[Float](3, abi, intensity)
	frameSet[Float](4, abi, strength)
	frameSet[Float](5, abi, mix)
	frameSet[Float](6, abi, bloom_threshold)
	frameSet[RenderingServerEnvironmentGlowBlendMode](7, abi, blend_mode)
	frameSet[Float](8, abi, hdr_bleed_threshold)
	frameSet[Float](9, abi, hdr_bleed_scale)
	frameSet[Float](10, abi, hdr_luminance_cap)
	frameSet[Float](11, abi, glow_map_strength)
	frameSet[RID](12, abi, glow_map)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.environment_set_glow, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classRenderingServer) EnvironmentSetTonemap(env RID, tone_mapper RenderingServerEnvironmentToneMapper, exposure Float, white Float) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, env)
	frameSet[RenderingServerEnvironmentToneMapper](1, abi, tone_mapper)
	frameSet[Float](2, abi, exposure)
	frameSet[Float](3, abi, white)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.environment_set_tonemap, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classRenderingServer) EnvironmentSetAdjustment(env RID, enable bool, brightness Float, contrast Float, saturation Float, use_1d_color_correction bool, color_correction RID) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, env)
	frameSet[bool](1, abi, enable)
	frameSet[Float](2, abi, brightness)
	frameSet[Float](3, abi, contrast)
	frameSet[Float](4, abi, saturation)
	frameSet[bool](5, abi, use_1d_color_correction)
	frameSet[RID](6, abi, color_correction)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.environment_set_adjustment, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classRenderingServer) EnvironmentSetSsr(env RID, enable bool, max_steps Int, fade_in Float, fade_out Float, depth_tolerance Float) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, env)
	frameSet[bool](1, abi, enable)
	frameSet[Int](2, abi, max_steps)
	frameSet[Float](3, abi, fade_in)
	frameSet[Float](4, abi, fade_out)
	frameSet[Float](5, abi, depth_tolerance)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.environment_set_ssr, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classRenderingServer) EnvironmentSetSsao(env RID, enable bool, radius Float, intensity Float, power Float, detail Float, horizon Float, sharpness Float, light_affect Float, ao_channel_affect Float) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, env)
	frameSet[bool](1, abi, enable)
	frameSet[Float](2, abi, radius)
	frameSet[Float](3, abi, intensity)
	frameSet[Float](4, abi, power)
	frameSet[Float](5, abi, detail)
	frameSet[Float](6, abi, horizon)
	frameSet[Float](7, abi, sharpness)
	frameSet[Float](8, abi, light_affect)
	frameSet[Float](9, abi, ao_channel_affect)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.environment_set_ssao, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classRenderingServer) EnvironmentSetFog(env RID, enable bool, light_color Color, light_energy Float, sun_scatter Float, density Float, height Float, height_density Float, aerial_perspective Float, sky_affect Float) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, env)
	frameSet[bool](1, abi, enable)
	frameSet[Color](2, abi, light_color)
	frameSet[Float](3, abi, light_energy)
	frameSet[Float](4, abi, sun_scatter)
	frameSet[Float](5, abi, density)
	frameSet[Float](6, abi, height)
	frameSet[Float](7, abi, height_density)
	frameSet[Float](8, abi, aerial_perspective)
	frameSet[Float](9, abi, sky_affect)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.environment_set_fog, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classRenderingServer) EnvironmentSetSdfgi(env RID, enable bool, cascades Int, min_cell_size Float, y_scale RenderingServerEnvironmentSDFGIYScale, use_occlusion bool, bounce_feedback Float, read_sky bool, energy Float, normal_bias Float, probe_bias Float) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, env)
	frameSet[bool](1, abi, enable)
	frameSet[Int](2, abi, cascades)
	frameSet[Float](3, abi, min_cell_size)
	frameSet[RenderingServerEnvironmentSDFGIYScale](4, abi, y_scale)
	frameSet[bool](5, abi, use_occlusion)
	frameSet[Float](6, abi, bounce_feedback)
	frameSet[bool](7, abi, read_sky)
	frameSet[Float](8, abi, energy)
	frameSet[Float](9, abi, normal_bias)
	frameSet[Float](10, abi, probe_bias)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.environment_set_sdfgi, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classRenderingServer) EnvironmentSetVolumetricFog(env RID, enable bool, density Float, albedo Color, emission Color, emission_energy Float, anisotropy Float, length Float, p_detail_spread Float, gi_inject Float, temporal_reprojection bool, temporal_reprojection_amount Float, ambient_inject Float, sky_affect Float) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, env)
	frameSet[bool](1, abi, enable)
	frameSet[Float](2, abi, density)
	frameSet[Color](3, abi, albedo)
	frameSet[Color](4, abi, emission)
	frameSet[Float](5, abi, emission_energy)
	frameSet[Float](6, abi, anisotropy)
	frameSet[Float](7, abi, length)
	frameSet[Float](8, abi, p_detail_spread)
	frameSet[Float](9, abi, gi_inject)
	frameSet[bool](10, abi, temporal_reprojection)
	frameSet[Float](11, abi, temporal_reprojection_amount)
	frameSet[Float](12, abi, ambient_inject)
	frameSet[Float](13, abi, sky_affect)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.environment_set_volumetric_fog, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classRenderingServer) EnvironmentGlowSetUseBicubicUpscale(enable bool) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[bool](0, abi, enable)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.environment_glow_set_use_bicubic_upscale, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classRenderingServer) EnvironmentSetSsrRoughnessQuality(quality RenderingServerEnvironmentSSRRoughnessQuality) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RenderingServerEnvironmentSSRRoughnessQuality](0, abi, quality)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.environment_set_ssr_roughness_quality, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classRenderingServer) EnvironmentSetSsaoQuality(quality RenderingServerEnvironmentSSAOQuality, half_size bool, adaptive_target Float, blur_passes Int, fadeout_from Float, fadeout_to Float) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RenderingServerEnvironmentSSAOQuality](0, abi, quality)
	frameSet[bool](1, abi, half_size)
	frameSet[Float](2, abi, adaptive_target)
	frameSet[Int](3, abi, blur_passes)
	frameSet[Float](4, abi, fadeout_from)
	frameSet[Float](5, abi, fadeout_to)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.environment_set_ssao_quality, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classRenderingServer) EnvironmentSetSsilQuality(quality RenderingServerEnvironmentSSILQuality, half_size bool, adaptive_target Float, blur_passes Int, fadeout_from Float, fadeout_to Float) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RenderingServerEnvironmentSSILQuality](0, abi, quality)
	frameSet[bool](1, abi, half_size)
	frameSet[Float](2, abi, adaptive_target)
	frameSet[Int](3, abi, blur_passes)
	frameSet[Float](4, abi, fadeout_from)
	frameSet[Float](5, abi, fadeout_to)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.environment_set_ssil_quality, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classRenderingServer) EnvironmentSetSdfgiRayCount(ray_count RenderingServerEnvironmentSDFGIRayCount) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RenderingServerEnvironmentSDFGIRayCount](0, abi, ray_count)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.environment_set_sdfgi_ray_count, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classRenderingServer) EnvironmentSetSdfgiFramesToConverge(frames RenderingServerEnvironmentSDFGIFramesToConverge) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RenderingServerEnvironmentSDFGIFramesToConverge](0, abi, frames)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.environment_set_sdfgi_frames_to_converge, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classRenderingServer) EnvironmentSetSdfgiFramesToUpdateLight(frames RenderingServerEnvironmentSDFGIFramesToUpdateLight) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RenderingServerEnvironmentSDFGIFramesToUpdateLight](0, abi, frames)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.environment_set_sdfgi_frames_to_update_light, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classRenderingServer) EnvironmentSetVolumetricFogVolumeSize(size Int, depth Int) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Int](0, abi, size)
	frameSet[Int](1, abi, depth)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.environment_set_volumetric_fog_volume_size, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classRenderingServer) EnvironmentSetVolumetricFogFilterActive(active bool) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[bool](0, abi, active)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.environment_set_volumetric_fog_filter_active, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classRenderingServer) EnvironmentBakePanorama(environment RID, bake_irradiance bool, size Vector2i) Image {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, environment)
	frameSet[bool](1, abi, bake_irradiance)
	frameSet[Vector2i](2, abi, size)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.environment_bake_panorama, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Image](abi)
	abi.free()
	return ret
}

func (self classRenderingServer) ScreenSpaceRoughnessLimiterSetActive(enable bool, amount Float, limit Float) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[bool](0, abi, enable)
	frameSet[Float](1, abi, amount)
	frameSet[Float](2, abi, limit)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.screen_space_roughness_limiter_set_active, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classRenderingServer) SubSurfaceScatteringSetQuality(quality RenderingServerSubSurfaceScatteringQuality) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RenderingServerSubSurfaceScatteringQuality](0, abi, quality)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.sub_surface_scattering_set_quality, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classRenderingServer) SubSurfaceScatteringSetScale(scale Float, depth_scale Float) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Float](0, abi, scale)
	frameSet[Float](1, abi, depth_scale)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.sub_surface_scattering_set_scale, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classRenderingServer) CameraAttributesCreate() RID {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.camera_attributes_create, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[RID](abi)
	abi.free()
	return ret
}

func (self classRenderingServer) CameraAttributesSetDofBlurQuality(quality RenderingServerDOFBlurQuality, use_jitter bool) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RenderingServerDOFBlurQuality](0, abi, quality)
	frameSet[bool](1, abi, use_jitter)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.camera_attributes_set_dof_blur_quality, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classRenderingServer) CameraAttributesSetDofBlurBokehShape(shape RenderingServerDOFBokehShape) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RenderingServerDOFBokehShape](0, abi, shape)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.camera_attributes_set_dof_blur_bokeh_shape, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classRenderingServer) CameraAttributesSetDofBlur(camera_attributes RID, far_enable bool, far_distance Float, far_transition Float, near_enable bool, near_distance Float, near_transition Float, amount Float) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, camera_attributes)
	frameSet[bool](1, abi, far_enable)
	frameSet[Float](2, abi, far_distance)
	frameSet[Float](3, abi, far_transition)
	frameSet[bool](4, abi, near_enable)
	frameSet[Float](5, abi, near_distance)
	frameSet[Float](6, abi, near_transition)
	frameSet[Float](7, abi, amount)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.camera_attributes_set_dof_blur, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classRenderingServer) CameraAttributesSetExposure(camera_attributes RID, multiplier Float, normalization Float) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, camera_attributes)
	frameSet[Float](1, abi, multiplier)
	frameSet[Float](2, abi, normalization)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.camera_attributes_set_exposure, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classRenderingServer) CameraAttributesSetAutoExposure(camera_attributes RID, enable bool, min_sensitivity Float, max_sensitivity Float, speed Float, scale Float) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, camera_attributes)
	frameSet[bool](1, abi, enable)
	frameSet[Float](2, abi, min_sensitivity)
	frameSet[Float](3, abi, max_sensitivity)
	frameSet[Float](4, abi, speed)
	frameSet[Float](5, abi, scale)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.camera_attributes_set_auto_exposure, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classRenderingServer) ScenarioCreate() RID {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.scenario_create, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[RID](abi)
	abi.free()
	return ret
}

func (self classRenderingServer) ScenarioSetEnvironment(scenario RID, environment RID) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, scenario)
	frameSet[RID](1, abi, environment)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.scenario_set_environment, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classRenderingServer) ScenarioSetFallbackEnvironment(scenario RID, environment RID) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, scenario)
	frameSet[RID](1, abi, environment)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.scenario_set_fallback_environment, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classRenderingServer) ScenarioSetCameraAttributes(scenario RID, effects RID) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, scenario)
	frameSet[RID](1, abi, effects)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.scenario_set_camera_attributes, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classRenderingServer) InstanceCreate2(base RID, scenario RID) RID {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, base)
	frameSet[RID](1, abi, scenario)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.instance_create2, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[RID](abi)
	abi.free()
	return ret
}

func (self classRenderingServer) InstanceCreate() RID {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.instance_create, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[RID](abi)
	abi.free()
	return ret
}

func (self classRenderingServer) InstanceSetBase(instance RID, base RID) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, instance)
	frameSet[RID](1, abi, base)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.instance_set_base, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classRenderingServer) InstanceSetScenario(instance RID, scenario RID) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, instance)
	frameSet[RID](1, abi, scenario)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.instance_set_scenario, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classRenderingServer) InstanceSetLayerMask(instance RID, mask Int) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, instance)
	frameSet[Int](1, abi, mask)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.instance_set_layer_mask, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classRenderingServer) InstanceSetPivotData(instance RID, sorting_offset Float, use_aabb_center bool) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, instance)
	frameSet[Float](1, abi, sorting_offset)
	frameSet[bool](2, abi, use_aabb_center)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.instance_set_pivot_data, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classRenderingServer) InstanceSetTransform(instance RID, transform Transform3D) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, instance)
	frameSet[Transform3D](1, abi, transform)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.instance_set_transform, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classRenderingServer) InstanceAttachObjectInstanceId(instance RID, id Int) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, instance)
	frameSet[Int](1, abi, id)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.instance_attach_object_instance_id, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classRenderingServer) InstanceSetBlendShapeWeight(instance RID, shape Int, weight Float) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, instance)
	frameSet[Int](1, abi, shape)
	frameSet[Float](2, abi, weight)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.instance_set_blend_shape_weight, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classRenderingServer) InstanceSetSurfaceOverrideMaterial(instance RID, surface Int, material RID) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, instance)
	frameSet[Int](1, abi, surface)
	frameSet[RID](2, abi, material)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.instance_set_surface_override_material, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classRenderingServer) InstanceSetVisible(instance RID, visible bool) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, instance)
	frameSet[bool](1, abi, visible)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.instance_set_visible, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classRenderingServer) InstanceGeometrySetTransparency(instance RID, transparency Float) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, instance)
	frameSet[Float](1, abi, transparency)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.instance_geometry_set_transparency, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classRenderingServer) InstanceSetCustomAabb(instance RID, aabb AABB) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, instance)
	frameSet[AABB](1, abi, aabb)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.instance_set_custom_aabb, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classRenderingServer) InstanceAttachSkeleton(instance RID, skeleton RID) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, instance)
	frameSet[RID](1, abi, skeleton)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.instance_attach_skeleton, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classRenderingServer) InstanceSetExtraVisibilityMargin(instance RID, margin Float) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, instance)
	frameSet[Float](1, abi, margin)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.instance_set_extra_visibility_margin, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classRenderingServer) InstanceSetVisibilityParent(instance RID, parent RID) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, instance)
	frameSet[RID](1, abi, parent)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.instance_set_visibility_parent, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classRenderingServer) InstanceSetIgnoreCulling(instance RID, enabled bool) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, instance)
	frameSet[bool](1, abi, enabled)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.instance_set_ignore_culling, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classRenderingServer) InstanceGeometrySetFlag(instance RID, flag RenderingServerInstanceFlags, enabled bool) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, instance)
	frameSet[RenderingServerInstanceFlags](1, abi, flag)
	frameSet[bool](2, abi, enabled)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.instance_geometry_set_flag, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classRenderingServer) InstanceGeometrySetCastShadowsSetting(instance RID, shadow_casting_setting RenderingServerShadowCastingSetting) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, instance)
	frameSet[RenderingServerShadowCastingSetting](1, abi, shadow_casting_setting)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.instance_geometry_set_cast_shadows_setting, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classRenderingServer) InstanceGeometrySetMaterialOverride(instance RID, material RID) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, instance)
	frameSet[RID](1, abi, material)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.instance_geometry_set_material_override, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classRenderingServer) InstanceGeometrySetMaterialOverlay(instance RID, material RID) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, instance)
	frameSet[RID](1, abi, material)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.instance_geometry_set_material_overlay, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classRenderingServer) InstanceGeometrySetVisibilityRange(instance RID, min Float, max Float, min_margin Float, max_margin Float, fade_mode RenderingServerVisibilityRangeFadeMode) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, instance)
	frameSet[Float](1, abi, min)
	frameSet[Float](2, abi, max)
	frameSet[Float](3, abi, min_margin)
	frameSet[Float](4, abi, max_margin)
	frameSet[RenderingServerVisibilityRangeFadeMode](5, abi, fade_mode)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.instance_geometry_set_visibility_range, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classRenderingServer) InstanceGeometrySetLightmap(instance RID, lightmap RID, lightmap_uv_scale Rect2, lightmap_slice Int) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, instance)
	frameSet[RID](1, abi, lightmap)
	frameSet[Rect2](2, abi, lightmap_uv_scale)
	frameSet[Int](3, abi, lightmap_slice)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.instance_geometry_set_lightmap, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classRenderingServer) InstanceGeometrySetLodBias(instance RID, lod_bias Float) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, instance)
	frameSet[Float](1, abi, lod_bias)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.instance_geometry_set_lod_bias, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classRenderingServer) InstanceGeometrySetShaderParameter(instance RID, parameter StringName, value Variant) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, instance)
	frameSet[StringName](1, abi, parameter)
	frameSet[Variant](2, abi, value)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.instance_geometry_set_shader_parameter, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classRenderingServer) InstanceGeometryGetShaderParameter(ctx Context, instance RID, parameter StringName) Variant {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, instance)
	frameSet[StringName](1, abi, parameter)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.instance_geometry_get_shader_parameter, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[[3]uintptr](abi)
	abi.free()
	return mmm.Make[API, Variant, [3]uintptr](ctx, selfPtr.API, ret)
}

func (self classRenderingServer) InstanceGeometryGetShaderParameterDefaultValue(ctx Context, instance RID, parameter StringName) Variant {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, instance)
	frameSet[StringName](1, abi, parameter)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.instance_geometry_get_shader_parameter_default_value, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[[3]uintptr](abi)
	abi.free()
	return mmm.Make[API, Variant, [3]uintptr](ctx, selfPtr.API, ret)
}

func (self classRenderingServer) InstanceGeometryGetShaderParameterList(instance RID) ArrayOf[Dictionary] {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, instance)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.instance_geometry_get_shader_parameter_list, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[ArrayOf[Dictionary]](abi)
	abi.free()
	return ret
}

func (self classRenderingServer) InstancesCullAabb(ctx Context, aabb AABB, scenario RID) PackedInt64Array {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[AABB](0, abi, aabb)
	frameSet[RID](1, abi, scenario)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.instances_cull_aabb, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[[2]uintptr](abi)
	abi.free()
	return mmm.Make[API, PackedInt64Array, [2]uintptr](ctx, selfPtr.API, ret)
}

func (self classRenderingServer) InstancesCullRay(ctx Context, from Vector3, to Vector3, scenario RID) PackedInt64Array {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Vector3](0, abi, from)
	frameSet[Vector3](1, abi, to)
	frameSet[RID](2, abi, scenario)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.instances_cull_ray, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[[2]uintptr](abi)
	abi.free()
	return mmm.Make[API, PackedInt64Array, [2]uintptr](ctx, selfPtr.API, ret)
}

func (self classRenderingServer) InstancesCullConvex(ctx Context, convex ArrayOf[Plane], scenario RID) PackedInt64Array {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[ArrayOf[Plane]](0, abi, convex)
	frameSet[RID](1, abi, scenario)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.instances_cull_convex, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[[2]uintptr](abi)
	abi.free()
	return mmm.Make[API, PackedInt64Array, [2]uintptr](ctx, selfPtr.API, ret)
}

func (self classRenderingServer) BakeRenderUv2(base RID, material_overrides ArrayOf[RID], image_size Vector2i) ArrayOf[Image] {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, base)
	frameSet[ArrayOf[RID]](1, abi, material_overrides)
	frameSet[Vector2i](2, abi, image_size)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.bake_render_uv2, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[ArrayOf[Image]](abi)
	abi.free()
	return ret
}

func (self classRenderingServer) CanvasCreate() RID {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.canvas_create, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[RID](abi)
	abi.free()
	return ret
}

func (self classRenderingServer) CanvasSetItemMirroring(canvas RID, item RID, mirroring Vector2) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, canvas)
	frameSet[RID](1, abi, item)
	frameSet[Vector2](2, abi, mirroring)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.canvas_set_item_mirroring, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classRenderingServer) CanvasSetModulate(canvas RID, color Color) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, canvas)
	frameSet[Color](1, abi, color)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.canvas_set_modulate, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classRenderingServer) CanvasSetDisableScale(disable bool) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[bool](0, abi, disable)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.canvas_set_disable_scale, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classRenderingServer) CanvasTextureCreate() RID {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.canvas_texture_create, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[RID](abi)
	abi.free()
	return ret
}

func (self classRenderingServer) CanvasTextureSetChannel(canvas_texture RID, channel RenderingServerCanvasTextureChannel, texture RID) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, canvas_texture)
	frameSet[RenderingServerCanvasTextureChannel](1, abi, channel)
	frameSet[RID](2, abi, texture)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.canvas_texture_set_channel, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classRenderingServer) CanvasTextureSetShadingParameters(canvas_texture RID, base_color Color, shininess Float) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, canvas_texture)
	frameSet[Color](1, abi, base_color)
	frameSet[Float](2, abi, shininess)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.canvas_texture_set_shading_parameters, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classRenderingServer) CanvasTextureSetTextureFilter(canvas_texture RID, filter RenderingServerCanvasItemTextureFilter) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, canvas_texture)
	frameSet[RenderingServerCanvasItemTextureFilter](1, abi, filter)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.canvas_texture_set_texture_filter, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classRenderingServer) CanvasTextureSetTextureRepeat(canvas_texture RID, repeat RenderingServerCanvasItemTextureRepeat) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, canvas_texture)
	frameSet[RenderingServerCanvasItemTextureRepeat](1, abi, repeat)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.canvas_texture_set_texture_repeat, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classRenderingServer) CanvasItemCreate() RID {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.canvas_item_create, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[RID](abi)
	abi.free()
	return ret
}

func (self classRenderingServer) CanvasItemSetParent(item RID, parent RID) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, item)
	frameSet[RID](1, abi, parent)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.canvas_item_set_parent, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classRenderingServer) CanvasItemSetDefaultTextureFilter(item RID, filter RenderingServerCanvasItemTextureFilter) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, item)
	frameSet[RenderingServerCanvasItemTextureFilter](1, abi, filter)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.canvas_item_set_default_texture_filter, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classRenderingServer) CanvasItemSetDefaultTextureRepeat(item RID, repeat RenderingServerCanvasItemTextureRepeat) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, item)
	frameSet[RenderingServerCanvasItemTextureRepeat](1, abi, repeat)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.canvas_item_set_default_texture_repeat, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classRenderingServer) CanvasItemSetVisible(item RID, visible bool) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, item)
	frameSet[bool](1, abi, visible)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.canvas_item_set_visible, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classRenderingServer) CanvasItemSetLightMask(item RID, mask Int) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, item)
	frameSet[Int](1, abi, mask)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.canvas_item_set_light_mask, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classRenderingServer) CanvasItemSetVisibilityLayer(item RID, visibility_layer Int) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, item)
	frameSet[Int](1, abi, visibility_layer)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.canvas_item_set_visibility_layer, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classRenderingServer) CanvasItemSetTransform(item RID, transform Transform2D) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, item)
	frameSet[Transform2D](1, abi, transform)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.canvas_item_set_transform, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classRenderingServer) CanvasItemSetClip(item RID, clip bool) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, item)
	frameSet[bool](1, abi, clip)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.canvas_item_set_clip, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classRenderingServer) CanvasItemSetDistanceFieldMode(item RID, enabled bool) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, item)
	frameSet[bool](1, abi, enabled)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.canvas_item_set_distance_field_mode, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classRenderingServer) CanvasItemSetCustomRect(item RID, use_custom_rect bool, rect Rect2) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, item)
	frameSet[bool](1, abi, use_custom_rect)
	frameSet[Rect2](2, abi, rect)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.canvas_item_set_custom_rect, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classRenderingServer) CanvasItemSetModulate(item RID, color Color) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, item)
	frameSet[Color](1, abi, color)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.canvas_item_set_modulate, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classRenderingServer) CanvasItemSetSelfModulate(item RID, color Color) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, item)
	frameSet[Color](1, abi, color)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.canvas_item_set_self_modulate, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classRenderingServer) CanvasItemSetDrawBehindParent(item RID, enabled bool) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, item)
	frameSet[bool](1, abi, enabled)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.canvas_item_set_draw_behind_parent, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classRenderingServer) CanvasItemAddLine(item RID, from Vector2, to Vector2, color Color, width Float, antialiased bool) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, item)
	frameSet[Vector2](1, abi, from)
	frameSet[Vector2](2, abi, to)
	frameSet[Color](3, abi, color)
	frameSet[Float](4, abi, width)
	frameSet[bool](5, abi, antialiased)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.canvas_item_add_line, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classRenderingServer) CanvasItemAddPolyline(item RID, points PackedVector2Array, colors PackedColorArray, width Float, antialiased bool) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, item)
	frameSet[PackedVector2Array](1, abi, points)
	frameSet[PackedColorArray](2, abi, colors)
	frameSet[Float](3, abi, width)
	frameSet[bool](4, abi, antialiased)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.canvas_item_add_polyline, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classRenderingServer) CanvasItemAddMultiline(item RID, points PackedVector2Array, colors PackedColorArray, width Float) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, item)
	frameSet[PackedVector2Array](1, abi, points)
	frameSet[PackedColorArray](2, abi, colors)
	frameSet[Float](3, abi, width)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.canvas_item_add_multiline, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classRenderingServer) CanvasItemAddRect(item RID, rect Rect2, color Color) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, item)
	frameSet[Rect2](1, abi, rect)
	frameSet[Color](2, abi, color)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.canvas_item_add_rect, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classRenderingServer) CanvasItemAddCircle(item RID, pos Vector2, radius Float, color Color) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, item)
	frameSet[Vector2](1, abi, pos)
	frameSet[Float](2, abi, radius)
	frameSet[Color](3, abi, color)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.canvas_item_add_circle, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classRenderingServer) CanvasItemAddTextureRect(item RID, rect Rect2, texture RID, tile bool, modulate Color, transpose bool) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, item)
	frameSet[Rect2](1, abi, rect)
	frameSet[RID](2, abi, texture)
	frameSet[bool](3, abi, tile)
	frameSet[Color](4, abi, modulate)
	frameSet[bool](5, abi, transpose)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.canvas_item_add_texture_rect, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classRenderingServer) CanvasItemAddMsdfTextureRectRegion(item RID, rect Rect2, texture RID, src_rect Rect2, modulate Color, outline_size Int, px_range Float, scale Float) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, item)
	frameSet[Rect2](1, abi, rect)
	frameSet[RID](2, abi, texture)
	frameSet[Rect2](3, abi, src_rect)
	frameSet[Color](4, abi, modulate)
	frameSet[Int](5, abi, outline_size)
	frameSet[Float](6, abi, px_range)
	frameSet[Float](7, abi, scale)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.canvas_item_add_msdf_texture_rect_region, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classRenderingServer) CanvasItemAddLcdTextureRectRegion(item RID, rect Rect2, texture RID, src_rect Rect2, modulate Color) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, item)
	frameSet[Rect2](1, abi, rect)
	frameSet[RID](2, abi, texture)
	frameSet[Rect2](3, abi, src_rect)
	frameSet[Color](4, abi, modulate)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.canvas_item_add_lcd_texture_rect_region, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classRenderingServer) CanvasItemAddTextureRectRegion(item RID, rect Rect2, texture RID, src_rect Rect2, modulate Color, transpose bool, clip_uv bool) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, item)
	frameSet[Rect2](1, abi, rect)
	frameSet[RID](2, abi, texture)
	frameSet[Rect2](3, abi, src_rect)
	frameSet[Color](4, abi, modulate)
	frameSet[bool](5, abi, transpose)
	frameSet[bool](6, abi, clip_uv)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.canvas_item_add_texture_rect_region, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classRenderingServer) CanvasItemAddNinePatch(item RID, rect Rect2, source Rect2, texture RID, topleft Vector2, bottomright Vector2, x_axis_mode RenderingServerNinePatchAxisMode, y_axis_mode RenderingServerNinePatchAxisMode, draw_center bool, modulate Color) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, item)
	frameSet[Rect2](1, abi, rect)
	frameSet[Rect2](2, abi, source)
	frameSet[RID](3, abi, texture)
	frameSet[Vector2](4, abi, topleft)
	frameSet[Vector2](5, abi, bottomright)
	frameSet[RenderingServerNinePatchAxisMode](6, abi, x_axis_mode)
	frameSet[RenderingServerNinePatchAxisMode](7, abi, y_axis_mode)
	frameSet[bool](8, abi, draw_center)
	frameSet[Color](9, abi, modulate)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.canvas_item_add_nine_patch, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classRenderingServer) CanvasItemAddPrimitive(item RID, points PackedVector2Array, colors PackedColorArray, uvs PackedVector2Array, texture RID) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, item)
	frameSet[PackedVector2Array](1, abi, points)
	frameSet[PackedColorArray](2, abi, colors)
	frameSet[PackedVector2Array](3, abi, uvs)
	frameSet[RID](4, abi, texture)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.canvas_item_add_primitive, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classRenderingServer) CanvasItemAddPolygon(item RID, points PackedVector2Array, colors PackedColorArray, uvs PackedVector2Array, texture RID) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, item)
	frameSet[PackedVector2Array](1, abi, points)
	frameSet[PackedColorArray](2, abi, colors)
	frameSet[PackedVector2Array](3, abi, uvs)
	frameSet[RID](4, abi, texture)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.canvas_item_add_polygon, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classRenderingServer) CanvasItemAddTriangleArray(item RID, indices PackedInt32Array, points PackedVector2Array, colors PackedColorArray, uvs PackedVector2Array, bones PackedInt32Array, weights PackedFloat32Array, texture RID, count Int) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, item)
	frameSet[PackedInt32Array](1, abi, indices)
	frameSet[PackedVector2Array](2, abi, points)
	frameSet[PackedColorArray](3, abi, colors)
	frameSet[PackedVector2Array](4, abi, uvs)
	frameSet[PackedInt32Array](5, abi, bones)
	frameSet[PackedFloat32Array](6, abi, weights)
	frameSet[RID](7, abi, texture)
	frameSet[Int](8, abi, count)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.canvas_item_add_triangle_array, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classRenderingServer) CanvasItemAddMesh(item RID, mesh RID, transform Transform2D, modulate Color, texture RID) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, item)
	frameSet[RID](1, abi, mesh)
	frameSet[Transform2D](2, abi, transform)
	frameSet[Color](3, abi, modulate)
	frameSet[RID](4, abi, texture)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.canvas_item_add_mesh, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classRenderingServer) CanvasItemAddMultimesh(item RID, mesh RID, texture RID) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, item)
	frameSet[RID](1, abi, mesh)
	frameSet[RID](2, abi, texture)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.canvas_item_add_multimesh, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classRenderingServer) CanvasItemAddParticles(item RID, particles RID, texture RID) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, item)
	frameSet[RID](1, abi, particles)
	frameSet[RID](2, abi, texture)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.canvas_item_add_particles, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classRenderingServer) CanvasItemAddSetTransform(item RID, transform Transform2D) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, item)
	frameSet[Transform2D](1, abi, transform)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.canvas_item_add_set_transform, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classRenderingServer) CanvasItemAddClipIgnore(item RID, ignore bool) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, item)
	frameSet[bool](1, abi, ignore)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.canvas_item_add_clip_ignore, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classRenderingServer) CanvasItemAddAnimationSlice(item RID, animation_length Float, slice_begin Float, slice_end Float, offset Float) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, item)
	frameSet[Float](1, abi, animation_length)
	frameSet[Float](2, abi, slice_begin)
	frameSet[Float](3, abi, slice_end)
	frameSet[Float](4, abi, offset)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.canvas_item_add_animation_slice, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classRenderingServer) CanvasItemSetSortChildrenByY(item RID, enabled bool) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, item)
	frameSet[bool](1, abi, enabled)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.canvas_item_set_sort_children_by_y, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classRenderingServer) CanvasItemSetZIndex(item RID, z_index Int) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, item)
	frameSet[Int](1, abi, z_index)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.canvas_item_set_z_index, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classRenderingServer) CanvasItemSetZAsRelativeToParent(item RID, enabled bool) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, item)
	frameSet[bool](1, abi, enabled)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.canvas_item_set_z_as_relative_to_parent, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classRenderingServer) CanvasItemSetCopyToBackbuffer(item RID, enabled bool, rect Rect2) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, item)
	frameSet[bool](1, abi, enabled)
	frameSet[Rect2](2, abi, rect)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.canvas_item_set_copy_to_backbuffer, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classRenderingServer) CanvasItemClear(item RID) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, item)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.canvas_item_clear, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classRenderingServer) CanvasItemSetDrawIndex(item RID, index Int) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, item)
	frameSet[Int](1, abi, index)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.canvas_item_set_draw_index, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classRenderingServer) CanvasItemSetMaterial(item RID, material RID) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, item)
	frameSet[RID](1, abi, material)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.canvas_item_set_material, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classRenderingServer) CanvasItemSetUseParentMaterial(item RID, enabled bool) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, item)
	frameSet[bool](1, abi, enabled)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.canvas_item_set_use_parent_material, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classRenderingServer) CanvasItemSetVisibilityNotifier(item RID, enable bool, area Rect2, enter_callable Callable, exit_callable Callable) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, item)
	frameSet[bool](1, abi, enable)
	frameSet[Rect2](2, abi, area)
	frameSet[Callable](3, abi, enter_callable)
	frameSet[Callable](4, abi, exit_callable)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.canvas_item_set_visibility_notifier, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classRenderingServer) CanvasItemSetCanvasGroupMode(item RID, mode RenderingServerCanvasGroupMode, clear_margin Float, fit_empty bool, fit_margin Float, blur_mipmaps bool) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, item)
	frameSet[RenderingServerCanvasGroupMode](1, abi, mode)
	frameSet[Float](2, abi, clear_margin)
	frameSet[bool](3, abi, fit_empty)
	frameSet[Float](4, abi, fit_margin)
	frameSet[bool](5, abi, blur_mipmaps)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.canvas_item_set_canvas_group_mode, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classRenderingServer) DebugCanvasItemGetRect(item RID) Rect2 {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, item)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.debug_canvas_item_get_rect, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Rect2](abi)
	abi.free()
	return ret
}

func (self classRenderingServer) CanvasLightCreate() RID {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.canvas_light_create, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[RID](abi)
	abi.free()
	return ret
}

func (self classRenderingServer) CanvasLightAttachToCanvas(light RID, canvas RID) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, light)
	frameSet[RID](1, abi, canvas)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.canvas_light_attach_to_canvas, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classRenderingServer) CanvasLightSetEnabled(light RID, enabled bool) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, light)
	frameSet[bool](1, abi, enabled)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.canvas_light_set_enabled, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classRenderingServer) CanvasLightSetTextureScale(light RID, scale Float) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, light)
	frameSet[Float](1, abi, scale)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.canvas_light_set_texture_scale, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classRenderingServer) CanvasLightSetTransform(light RID, transform Transform2D) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, light)
	frameSet[Transform2D](1, abi, transform)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.canvas_light_set_transform, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classRenderingServer) CanvasLightSetTexture(light RID, texture RID) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, light)
	frameSet[RID](1, abi, texture)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.canvas_light_set_texture, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classRenderingServer) CanvasLightSetTextureOffset(light RID, offset Vector2) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, light)
	frameSet[Vector2](1, abi, offset)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.canvas_light_set_texture_offset, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classRenderingServer) CanvasLightSetColor(light RID, color Color) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, light)
	frameSet[Color](1, abi, color)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.canvas_light_set_color, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classRenderingServer) CanvasLightSetHeight(light RID, height Float) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, light)
	frameSet[Float](1, abi, height)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.canvas_light_set_height, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classRenderingServer) CanvasLightSetEnergy(light RID, energy Float) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, light)
	frameSet[Float](1, abi, energy)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.canvas_light_set_energy, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classRenderingServer) CanvasLightSetZRange(light RID, min_z Int, max_z Int) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, light)
	frameSet[Int](1, abi, min_z)
	frameSet[Int](2, abi, max_z)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.canvas_light_set_z_range, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classRenderingServer) CanvasLightSetLayerRange(light RID, min_layer Int, max_layer Int) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, light)
	frameSet[Int](1, abi, min_layer)
	frameSet[Int](2, abi, max_layer)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.canvas_light_set_layer_range, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classRenderingServer) CanvasLightSetItemCullMask(light RID, mask Int) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, light)
	frameSet[Int](1, abi, mask)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.canvas_light_set_item_cull_mask, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classRenderingServer) CanvasLightSetItemShadowCullMask(light RID, mask Int) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, light)
	frameSet[Int](1, abi, mask)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.canvas_light_set_item_shadow_cull_mask, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classRenderingServer) CanvasLightSetMode(light RID, mode RenderingServerCanvasLightMode) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, light)
	frameSet[RenderingServerCanvasLightMode](1, abi, mode)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.canvas_light_set_mode, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classRenderingServer) CanvasLightSetShadowEnabled(light RID, enabled bool) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, light)
	frameSet[bool](1, abi, enabled)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.canvas_light_set_shadow_enabled, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classRenderingServer) CanvasLightSetShadowFilter(light RID, filter RenderingServerCanvasLightShadowFilter) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, light)
	frameSet[RenderingServerCanvasLightShadowFilter](1, abi, filter)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.canvas_light_set_shadow_filter, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classRenderingServer) CanvasLightSetShadowColor(light RID, color Color) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, light)
	frameSet[Color](1, abi, color)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.canvas_light_set_shadow_color, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classRenderingServer) CanvasLightSetShadowSmooth(light RID, smooth Float) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, light)
	frameSet[Float](1, abi, smooth)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.canvas_light_set_shadow_smooth, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classRenderingServer) CanvasLightSetBlendMode(light RID, mode RenderingServerCanvasLightBlendMode) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, light)
	frameSet[RenderingServerCanvasLightBlendMode](1, abi, mode)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.canvas_light_set_blend_mode, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classRenderingServer) CanvasLightOccluderCreate() RID {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.canvas_light_occluder_create, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[RID](abi)
	abi.free()
	return ret
}

func (self classRenderingServer) CanvasLightOccluderAttachToCanvas(occluder RID, canvas RID) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, occluder)
	frameSet[RID](1, abi, canvas)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.canvas_light_occluder_attach_to_canvas, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classRenderingServer) CanvasLightOccluderSetEnabled(occluder RID, enabled bool) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, occluder)
	frameSet[bool](1, abi, enabled)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.canvas_light_occluder_set_enabled, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classRenderingServer) CanvasLightOccluderSetPolygon(occluder RID, polygon RID) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, occluder)
	frameSet[RID](1, abi, polygon)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.canvas_light_occluder_set_polygon, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classRenderingServer) CanvasLightOccluderSetAsSdfCollision(occluder RID, enable bool) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, occluder)
	frameSet[bool](1, abi, enable)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.canvas_light_occluder_set_as_sdf_collision, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classRenderingServer) CanvasLightOccluderSetTransform(occluder RID, transform Transform2D) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, occluder)
	frameSet[Transform2D](1, abi, transform)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.canvas_light_occluder_set_transform, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classRenderingServer) CanvasLightOccluderSetLightMask(occluder RID, mask Int) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, occluder)
	frameSet[Int](1, abi, mask)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.canvas_light_occluder_set_light_mask, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classRenderingServer) CanvasOccluderPolygonCreate() RID {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.canvas_occluder_polygon_create, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[RID](abi)
	abi.free()
	return ret
}

func (self classRenderingServer) CanvasOccluderPolygonSetShape(occluder_polygon RID, shape PackedVector2Array, closed bool) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, occluder_polygon)
	frameSet[PackedVector2Array](1, abi, shape)
	frameSet[bool](2, abi, closed)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.canvas_occluder_polygon_set_shape, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classRenderingServer) CanvasOccluderPolygonSetCullMode(occluder_polygon RID, mode RenderingServerCanvasOccluderPolygonCullMode) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, occluder_polygon)
	frameSet[RenderingServerCanvasOccluderPolygonCullMode](1, abi, mode)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.canvas_occluder_polygon_set_cull_mode, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classRenderingServer) CanvasSetShadowTextureSize(size Int) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Int](0, abi, size)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.canvas_set_shadow_texture_size, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classRenderingServer) GlobalShaderParameterAdd(name StringName, atype RenderingServerGlobalShaderParameterType, default_value Variant) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[StringName](0, abi, name)
	frameSet[RenderingServerGlobalShaderParameterType](1, abi, atype)
	frameSet[Variant](2, abi, default_value)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.global_shader_parameter_add, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classRenderingServer) GlobalShaderParameterRemove(name StringName) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[StringName](0, abi, name)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.global_shader_parameter_remove, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classRenderingServer) GlobalShaderParameterGetList() ArrayOf[StringName] {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.global_shader_parameter_get_list, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[ArrayOf[StringName]](abi)
	abi.free()
	return ret
}

func (self classRenderingServer) GlobalShaderParameterSet(name StringName, value Variant) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[StringName](0, abi, name)
	frameSet[Variant](1, abi, value)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.global_shader_parameter_set, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classRenderingServer) GlobalShaderParameterSetOverride(name StringName, value Variant) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[StringName](0, abi, name)
	frameSet[Variant](1, abi, value)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.global_shader_parameter_set_override, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classRenderingServer) GlobalShaderParameterGet(ctx Context, name StringName) Variant {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[StringName](0, abi, name)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.global_shader_parameter_get, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[[3]uintptr](abi)
	abi.free()
	return mmm.Make[API, Variant, [3]uintptr](ctx, selfPtr.API, ret)
}

func (self classRenderingServer) GlobalShaderParameterGetType(name StringName) RenderingServerGlobalShaderParameterType {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[StringName](0, abi, name)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.global_shader_parameter_get_type, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[RenderingServerGlobalShaderParameterType](abi)
	abi.free()
	return ret
}

func (self classRenderingServer) FreeRid(rid RID) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, rid)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.free_rid, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classRenderingServer) RequestFrameDrawnCallback(callable Callable) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Callable](0, abi, callable)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.request_frame_drawn_callback, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classRenderingServer) HasChanged() bool {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.has_changed, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self classRenderingServer) GetRenderingInfo(info RenderingServerRenderingInfo) Int {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RenderingServerRenderingInfo](0, abi, info)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.get_rendering_info, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Int](abi)
	abi.free()
	return ret
}

func (self classRenderingServer) GetVideoAdapterName(ctx Context) String {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.get_video_adapter_name, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[uintptr](abi)
	abi.free()
	return mmm.Make[API, String, uintptr](ctx, selfPtr.API, ret)
}

func (self classRenderingServer) GetVideoAdapterVendor(ctx Context) String {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.get_video_adapter_vendor, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[uintptr](abi)
	abi.free()
	return mmm.Make[API, String, uintptr](ctx, selfPtr.API, ret)
}

func (self classRenderingServer) GetVideoAdapterType() RenderingDeviceDeviceType {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.get_video_adapter_type, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[RenderingDeviceDeviceType](abi)
	abi.free()
	return ret
}

func (self classRenderingServer) GetVideoAdapterApiVersion(ctx Context) String {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.get_video_adapter_api_version, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[uintptr](abi)
	abi.free()
	return mmm.Make[API, String, uintptr](ctx, selfPtr.API, ret)
}

func (self classRenderingServer) MakeSphereMesh(latitudes Int, longitudes Int, radius Float) RID {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Int](0, abi, latitudes)
	frameSet[Int](1, abi, longitudes)
	frameSet[Float](2, abi, radius)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.make_sphere_mesh, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[RID](abi)
	abi.free()
	return ret
}

func (self classRenderingServer) GetTestCube() RID {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.get_test_cube, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[RID](abi)
	abi.free()
	return ret
}

func (self classRenderingServer) GetTestTexture() RID {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.get_test_texture, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[RID](abi)
	abi.free()
	return ret
}

func (self classRenderingServer) GetWhiteTexture() RID {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.get_white_texture, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[RID](abi)
	abi.free()
	return ret
}

func (self classRenderingServer) SetBootImage(image Image, color Color, scale bool, use_filter bool) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Image](0, abi, image)
	frameSet[Color](1, abi, color)
	frameSet[bool](2, abi, scale)
	frameSet[bool](3, abi, use_filter)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.set_boot_image, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classRenderingServer) GetDefaultClearColor() Color {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.get_default_clear_color, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Color](abi)
	abi.free()
	return ret
}

func (self classRenderingServer) SetDefaultClearColor(color Color) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Color](0, abi, color)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.set_default_clear_color, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classRenderingServer) HasFeature(feature RenderingServerFeatures) bool {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RenderingServerFeatures](0, abi, feature)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.has_feature, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self classRenderingServer) HasOsFeature(feature String) bool {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[String](0, abi, feature)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.has_os_feature, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self classRenderingServer) SetDebugGenerateWireframes(generate bool) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[bool](0, abi, generate)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.set_debug_generate_wireframes, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classRenderingServer) IsRenderLoopEnabled() bool {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.is_render_loop_enabled, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self classRenderingServer) SetRenderLoopEnabled(enabled bool) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[bool](0, abi, enabled)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.set_render_loop_enabled, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classRenderingServer) GetFrameSetupTimeCpu() Float {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.get_frame_setup_time_cpu, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Float](abi)
	abi.free()
	return ret
}

func (self classRenderingServer) ForceSync() {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.force_sync, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classRenderingServer) ForceDraw(swap_buffers bool, frame_step Float) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[bool](0, abi, swap_buffers)
	frameSet[Float](1, abi, frame_step)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.force_draw, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classRenderingServer) GetRenderingDevice() RenderingDevice {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.get_rendering_device, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[RenderingDevice](abi)
	abi.free()
	return ret
}

func (self classRenderingServer) CreateLocalRenderingDevice() RenderingDevice {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.create_local_rendering_device, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[RenderingDevice](abi)
	abi.free()
	return ret
}

func (self classRenderingServer) CallOnRenderThread(callable Callable) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Callable](0, abi, callable)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.call_on_render_thread, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classRenderingServer) virtual(name string) reflect.Value {
	switch name {
	default:
		return self.Super().virtual(name)
	}
}

type classResource struct {
	Class[classResource, RefCounted]
}

func (self classResource) RefCounted() RefCounted { return *self.Super() }

func (self classResource) Object() Object { return *self.Super().Super() }

func (classResource) _setup_local_to_scene(impl func(ptr unsafe.Pointer, ctx Context), api *API) (cb ExtensionClassCallVirtualFunc) {
	cb.Set(func(class cgo.Handle, p_args godotArgs, p_back godotBack) {
		ctx := newContext(api)
		self := reflect.ValueOf(class.Value()).UnsafePointer()
		impl(self, ctx)
		ctx.Free()
	})
	return
}

func (self classResource) SetPath(path String) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[String](0, abi, path)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Resource.set_path, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classResource) TakeOverPath(path String) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[String](0, abi, path)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Resource.take_over_path, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classResource) GetPath(ctx Context) String {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Resource.get_path, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[uintptr](abi)
	abi.free()
	return mmm.Make[API, String, uintptr](ctx, selfPtr.API, ret)
}

func (self classResource) SetName(name String) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[String](0, abi, name)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Resource.set_name, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classResource) GetName(ctx Context) String {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Resource.get_name, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[uintptr](abi)
	abi.free()
	return mmm.Make[API, String, uintptr](ctx, selfPtr.API, ret)
}

func (self classResource) GetRid() RID {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Resource.get_rid, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[RID](abi)
	abi.free()
	return ret
}

func (self classResource) SetLocalToScene(enable bool) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[bool](0, abi, enable)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Resource.set_local_to_scene, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classResource) IsLocalToScene() bool {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Resource.is_local_to_scene, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self classResource) GetLocalScene() Node {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Resource.get_local_scene, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Node](abi)
	abi.free()
	return ret
}

func (self classResource) SetupLocalToScene() {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Resource.setup_local_to_scene, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classResource) EmitChanged() {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Resource.emit_changed, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classResource) Duplicate(subresources bool) Resource {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[bool](0, abi, subresources)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Resource.duplicate, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Resource](abi)
	abi.free()
	return ret
}

func (self classResource) virtual(name string) reflect.Value {
	switch name {
	case "_setup_local_to_scene":
		return reflect.ValueOf(self._setup_local_to_scene)
	default:
		return self.Super().virtual(name)
	}
}

type classSceneState struct {
	Class[classSceneState, RefCounted]
}

func (self classSceneState) RefCounted() RefCounted { return *self.Super() }

func (self classSceneState) Object() Object { return *self.Super().Super() }

func (self classSceneState) GetNodeCount() Int {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.SceneState.get_node_count, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Int](abi)
	abi.free()
	return ret
}

func (self classSceneState) GetNodeType(ctx Context, idx Int) StringName {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Int](0, abi, idx)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.SceneState.get_node_type, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[uintptr](abi)
	abi.free()
	return mmm.Make[API, StringName, uintptr](ctx, selfPtr.API, ret)
}

func (self classSceneState) GetNodeName(ctx Context, idx Int) StringName {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Int](0, abi, idx)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.SceneState.get_node_name, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[uintptr](abi)
	abi.free()
	return mmm.Make[API, StringName, uintptr](ctx, selfPtr.API, ret)
}

func (self classSceneState) GetNodePath(ctx Context, idx Int, for_parent bool) NodePath {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Int](0, abi, idx)
	frameSet[bool](1, abi, for_parent)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.SceneState.get_node_path, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[uintptr](abi)
	abi.free()
	return mmm.Make[API, NodePath, uintptr](ctx, selfPtr.API, ret)
}

func (self classSceneState) GetNodeOwnerPath(ctx Context, idx Int) NodePath {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Int](0, abi, idx)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.SceneState.get_node_owner_path, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[uintptr](abi)
	abi.free()
	return mmm.Make[API, NodePath, uintptr](ctx, selfPtr.API, ret)
}

func (self classSceneState) IsNodeInstancePlaceholder(idx Int) bool {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Int](0, abi, idx)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.SceneState.is_node_instance_placeholder, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self classSceneState) GetNodeInstancePlaceholder(ctx Context, idx Int) String {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Int](0, abi, idx)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.SceneState.get_node_instance_placeholder, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[uintptr](abi)
	abi.free()
	return mmm.Make[API, String, uintptr](ctx, selfPtr.API, ret)
}

func (self classSceneState) GetNodeInstance(idx Int) PackedScene {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Int](0, abi, idx)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.SceneState.get_node_instance, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[PackedScene](abi)
	abi.free()
	return ret
}

func (self classSceneState) GetNodeGroups(ctx Context, idx Int) PackedStringArray {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Int](0, abi, idx)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.SceneState.get_node_groups, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[[2]uintptr](abi)
	abi.free()
	return mmm.Make[API, PackedStringArray, [2]uintptr](ctx, selfPtr.API, ret)
}

func (self classSceneState) GetNodeIndex(idx Int) Int {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Int](0, abi, idx)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.SceneState.get_node_index, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Int](abi)
	abi.free()
	return ret
}

func (self classSceneState) GetNodePropertyCount(idx Int) Int {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Int](0, abi, idx)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.SceneState.get_node_property_count, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Int](abi)
	abi.free()
	return ret
}

func (self classSceneState) GetNodePropertyName(ctx Context, idx Int, prop_idx Int) StringName {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Int](0, abi, idx)
	frameSet[Int](1, abi, prop_idx)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.SceneState.get_node_property_name, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[uintptr](abi)
	abi.free()
	return mmm.Make[API, StringName, uintptr](ctx, selfPtr.API, ret)
}

func (self classSceneState) GetNodePropertyValue(ctx Context, idx Int, prop_idx Int) Variant {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Int](0, abi, idx)
	frameSet[Int](1, abi, prop_idx)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.SceneState.get_node_property_value, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[[3]uintptr](abi)
	abi.free()
	return mmm.Make[API, Variant, [3]uintptr](ctx, selfPtr.API, ret)
}

func (self classSceneState) GetConnectionCount() Int {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.SceneState.get_connection_count, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Int](abi)
	abi.free()
	return ret
}

func (self classSceneState) GetConnectionSource(ctx Context, idx Int) NodePath {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Int](0, abi, idx)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.SceneState.get_connection_source, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[uintptr](abi)
	abi.free()
	return mmm.Make[API, NodePath, uintptr](ctx, selfPtr.API, ret)
}

func (self classSceneState) GetConnectionSignal(ctx Context, idx Int) StringName {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Int](0, abi, idx)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.SceneState.get_connection_signal, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[uintptr](abi)
	abi.free()
	return mmm.Make[API, StringName, uintptr](ctx, selfPtr.API, ret)
}

func (self classSceneState) GetConnectionTarget(ctx Context, idx Int) NodePath {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Int](0, abi, idx)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.SceneState.get_connection_target, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[uintptr](abi)
	abi.free()
	return mmm.Make[API, NodePath, uintptr](ctx, selfPtr.API, ret)
}

func (self classSceneState) GetConnectionMethod(ctx Context, idx Int) StringName {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Int](0, abi, idx)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.SceneState.get_connection_method, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[uintptr](abi)
	abi.free()
	return mmm.Make[API, StringName, uintptr](ctx, selfPtr.API, ret)
}

func (self classSceneState) GetConnectionFlags(idx Int) Int {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Int](0, abi, idx)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.SceneState.get_connection_flags, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Int](abi)
	abi.free()
	return ret
}

func (self classSceneState) GetConnectionBinds(ctx Context, idx Int) Array {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Int](0, abi, idx)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.SceneState.get_connection_binds, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[uintptr](abi)
	abi.free()
	return mmm.Make[API, Array, uintptr](ctx, selfPtr.API, ret)
}

func (self classSceneState) GetConnectionUnbinds(idx Int) Int {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Int](0, abi, idx)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.SceneState.get_connection_unbinds, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Int](abi)
	abi.free()
	return ret
}

func (self classSceneState) virtual(name string) reflect.Value {
	switch name {
	default:
		return self.Super().virtual(name)
	}
}

type classSceneTree struct {
	Class[classSceneTree, MainLoop]
}

func (self classSceneTree) MainLoop() MainLoop { return *self.Super() }

func (self classSceneTree) Object() Object { return *self.Super().Super() }

func (self classSceneTree) GetRoot() Window {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.SceneTree.get_root, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Window](abi)
	abi.free()
	return ret
}

func (self classSceneTree) HasGroup(name StringName) bool {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[StringName](0, abi, name)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.SceneTree.has_group, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self classSceneTree) IsAutoAcceptQuit() bool {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.SceneTree.is_auto_accept_quit, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self classSceneTree) SetAutoAcceptQuit(enabled bool) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[bool](0, abi, enabled)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.SceneTree.set_auto_accept_quit, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classSceneTree) IsQuitOnGoBack() bool {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.SceneTree.is_quit_on_go_back, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self classSceneTree) SetQuitOnGoBack(enabled bool) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[bool](0, abi, enabled)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.SceneTree.set_quit_on_go_back, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classSceneTree) SetDebugCollisionsHint(enable bool) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[bool](0, abi, enable)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.SceneTree.set_debug_collisions_hint, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classSceneTree) IsDebuggingCollisionsHint() bool {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.SceneTree.is_debugging_collisions_hint, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self classSceneTree) SetDebugPathsHint(enable bool) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[bool](0, abi, enable)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.SceneTree.set_debug_paths_hint, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classSceneTree) IsDebuggingPathsHint() bool {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.SceneTree.is_debugging_paths_hint, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self classSceneTree) SetDebugNavigationHint(enable bool) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[bool](0, abi, enable)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.SceneTree.set_debug_navigation_hint, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classSceneTree) IsDebuggingNavigationHint() bool {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.SceneTree.is_debugging_navigation_hint, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self classSceneTree) SetEditedSceneRoot(scene Node) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Node](0, abi, scene)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.SceneTree.set_edited_scene_root, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classSceneTree) GetEditedSceneRoot() Node {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.SceneTree.get_edited_scene_root, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Node](abi)
	abi.free()
	return ret
}

func (self classSceneTree) SetPause(enable bool) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[bool](0, abi, enable)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.SceneTree.set_pause, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classSceneTree) IsPaused() bool {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.SceneTree.is_paused, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self classSceneTree) CreateTimer(time_sec Float, process_always bool, process_in_physics bool, ignore_time_scale bool) SceneTreeTimer {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Float](0, abi, time_sec)
	frameSet[bool](1, abi, process_always)
	frameSet[bool](2, abi, process_in_physics)
	frameSet[bool](3, abi, ignore_time_scale)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.SceneTree.create_timer, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[SceneTreeTimer](abi)
	abi.free()
	return ret
}

func (self classSceneTree) CreateTween() Tween {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.SceneTree.create_tween, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Tween](abi)
	abi.free()
	return ret
}

func (self classSceneTree) GetProcessedTweens() ArrayOf[Tween] {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.SceneTree.get_processed_tweens, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[ArrayOf[Tween]](abi)
	abi.free()
	return ret
}

func (self classSceneTree) GetNodeCount() Int {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.SceneTree.get_node_count, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Int](abi)
	abi.free()
	return ret
}

func (self classSceneTree) GetFrame() Int {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.SceneTree.get_frame, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Int](abi)
	abi.free()
	return ret
}

func (self classSceneTree) Quit(exit_code Int) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Int](0, abi, exit_code)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.SceneTree.quit, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classSceneTree) QueueDelete(obj Object) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Object](0, abi, obj)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.SceneTree.queue_delete, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classSceneTree) CallGroupFlags(flags Int, group StringName, method StringName) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Int](0, abi, flags)
	frameSet[StringName](1, abi, group)
	frameSet[StringName](2, abi, method)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.SceneTree.call_group_flags, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classSceneTree) NotifyGroupFlags(call_flags Int, group StringName, notification Int) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Int](0, abi, call_flags)
	frameSet[StringName](1, abi, group)
	frameSet[Int](2, abi, notification)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.SceneTree.notify_group_flags, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classSceneTree) SetGroupFlags(call_flags Int, group StringName, property String, value Variant) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Int](0, abi, call_flags)
	frameSet[StringName](1, abi, group)
	frameSet[String](2, abi, property)
	frameSet[Variant](3, abi, value)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.SceneTree.set_group_flags, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classSceneTree) CallGroup(group StringName, method StringName) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[StringName](0, abi, group)
	frameSet[StringName](1, abi, method)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.SceneTree.call_group, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classSceneTree) NotifyGroup(group StringName, notification Int) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[StringName](0, abi, group)
	frameSet[Int](1, abi, notification)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.SceneTree.notify_group, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classSceneTree) SetGroup(group StringName, property String, value Variant) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[StringName](0, abi, group)
	frameSet[String](1, abi, property)
	frameSet[Variant](2, abi, value)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.SceneTree.set_group, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classSceneTree) GetNodesInGroup(group StringName) ArrayOf[Node] {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[StringName](0, abi, group)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.SceneTree.get_nodes_in_group, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[ArrayOf[Node]](abi)
	abi.free()
	return ret
}

func (self classSceneTree) GetFirstNodeInGroup(group StringName) Node {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[StringName](0, abi, group)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.SceneTree.get_first_node_in_group, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Node](abi)
	abi.free()
	return ret
}

func (self classSceneTree) GetNodeCountInGroup(group StringName) Int {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[StringName](0, abi, group)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.SceneTree.get_node_count_in_group, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Int](abi)
	abi.free()
	return ret
}

func (self classSceneTree) SetCurrentScene(child_node Node) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Node](0, abi, child_node)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.SceneTree.set_current_scene, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classSceneTree) GetCurrentScene() Node {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.SceneTree.get_current_scene, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Node](abi)
	abi.free()
	return ret
}

func (self classSceneTree) ChangeSceneToFile(path String) int64 {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[String](0, abi, path)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.SceneTree.change_scene_to_file, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[int64](abi)
	abi.free()
	return ret
}

func (self classSceneTree) ChangeSceneToPacked(packed_scene PackedScene) int64 {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[PackedScene](0, abi, packed_scene)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.SceneTree.change_scene_to_packed, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[int64](abi)
	abi.free()
	return ret
}

func (self classSceneTree) ReloadCurrentScene() int64 {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.SceneTree.reload_current_scene, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[int64](abi)
	abi.free()
	return ret
}

func (self classSceneTree) UnloadCurrentScene() {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.SceneTree.unload_current_scene, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classSceneTree) SetMultiplayer(multiplayer MultiplayerAPI, root_path NodePath) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[MultiplayerAPI](0, abi, multiplayer)
	frameSet[NodePath](1, abi, root_path)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.SceneTree.set_multiplayer, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classSceneTree) GetMultiplayer(for_path NodePath) MultiplayerAPI {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[NodePath](0, abi, for_path)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.SceneTree.get_multiplayer, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[MultiplayerAPI](abi)
	abi.free()
	return ret
}

func (self classSceneTree) SetMultiplayerPollEnabled(enabled bool) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[bool](0, abi, enabled)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.SceneTree.set_multiplayer_poll_enabled, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classSceneTree) IsMultiplayerPollEnabled() bool {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.SceneTree.is_multiplayer_poll_enabled, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self classSceneTree) virtual(name string) reflect.Value {
	switch name {
	default:
		return self.Super().virtual(name)
	}
}

type classSceneTreeTimer struct {
	Class[classSceneTreeTimer, RefCounted]
}

func (self classSceneTreeTimer) RefCounted() RefCounted { return *self.Super() }

func (self classSceneTreeTimer) Object() Object { return *self.Super().Super() }

func (self classSceneTreeTimer) SetTimeLeft(time Float) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Float](0, abi, time)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.SceneTreeTimer.set_time_left, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classSceneTreeTimer) GetTimeLeft() Float {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.SceneTreeTimer.get_time_left, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Float](abi)
	abi.free()
	return ret
}

func (self classSceneTreeTimer) virtual(name string) reflect.Value {
	switch name {
	default:
		return self.Super().virtual(name)
	}
}

type classScript struct{ Class[classScript, Resource] }

func (self classScript) Resource() Resource { return *self.Super() }

func (self classScript) RefCounted() RefCounted { return *self.Super().Super() }

func (self classScript) Object() Object { return *self.Super().Super().Super() }

func (self classScript) CanInstantiate() bool {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Script.can_instantiate, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self classScript) InstanceHas(base_object Object) bool {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Object](0, abi, base_object)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Script.instance_has, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self classScript) HasSourceCode() bool {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Script.has_source_code, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self classScript) GetSourceCode(ctx Context) String {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Script.get_source_code, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[uintptr](abi)
	abi.free()
	return mmm.Make[API, String, uintptr](ctx, selfPtr.API, ret)
}

func (self classScript) SetSourceCode(source String) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[String](0, abi, source)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Script.set_source_code, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classScript) Reload(keep_state bool) int64 {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[bool](0, abi, keep_state)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Script.reload, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[int64](abi)
	abi.free()
	return ret
}

func (self classScript) GetBaseScript() Script {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Script.get_base_script, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Script](abi)
	abi.free()
	return ret
}

func (self classScript) GetInstanceBaseType(ctx Context) StringName {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Script.get_instance_base_type, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[uintptr](abi)
	abi.free()
	return mmm.Make[API, StringName, uintptr](ctx, selfPtr.API, ret)
}

func (self classScript) GetGlobalName(ctx Context) StringName {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Script.get_global_name, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[uintptr](abi)
	abi.free()
	return mmm.Make[API, StringName, uintptr](ctx, selfPtr.API, ret)
}

func (self classScript) HasScriptSignal(signal_name StringName) bool {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[StringName](0, abi, signal_name)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Script.has_script_signal, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self classScript) GetScriptPropertyList() ArrayOf[Dictionary] {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Script.get_script_property_list, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[ArrayOf[Dictionary]](abi)
	abi.free()
	return ret
}

func (self classScript) GetScriptMethodList() ArrayOf[Dictionary] {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Script.get_script_method_list, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[ArrayOf[Dictionary]](abi)
	abi.free()
	return ret
}

func (self classScript) GetScriptSignalList() ArrayOf[Dictionary] {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Script.get_script_signal_list, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[ArrayOf[Dictionary]](abi)
	abi.free()
	return ret
}

func (self classScript) GetScriptConstantMap(ctx Context) Dictionary {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Script.get_script_constant_map, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[uintptr](abi)
	abi.free()
	return mmm.Make[API, Dictionary, uintptr](ctx, selfPtr.API, ret)
}

func (self classScript) GetPropertyDefaultValue(ctx Context, property StringName) Variant {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[StringName](0, abi, property)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Script.get_property_default_value, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[[3]uintptr](abi)
	abi.free()
	return mmm.Make[API, Variant, [3]uintptr](ctx, selfPtr.API, ret)
}

func (self classScript) IsTool() bool {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Script.is_tool, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self classScript) IsAbstract() bool {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Script.is_abstract, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self classScript) virtual(name string) reflect.Value {
	switch name {
	default:
		return self.Super().virtual(name)
	}
}

type classScriptLanguage struct {
	Class[classScriptLanguage, Object]
}

func (self classScriptLanguage) Object() Object { return *self.Super() }

func (self classScriptLanguage) virtual(name string) reflect.Value {
	switch name {
	default:
		return self.Super().virtual(name)
	}
}

type classShader struct{ Class[classShader, Resource] }

func (self classShader) Resource() Resource { return *self.Super() }

func (self classShader) RefCounted() RefCounted { return *self.Super().Super() }

func (self classShader) Object() Object { return *self.Super().Super().Super() }

func (self classShader) GetMode() ShaderMode {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Shader.get_mode, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[ShaderMode](abi)
	abi.free()
	return ret
}

func (self classShader) SetCode(code String) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[String](0, abi, code)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Shader.set_code, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classShader) GetCode(ctx Context) String {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Shader.get_code, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[uintptr](abi)
	abi.free()
	return mmm.Make[API, String, uintptr](ctx, selfPtr.API, ret)
}

func (self classShader) SetDefaultTextureParameter(name StringName, texture Texture2D, index Int) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[StringName](0, abi, name)
	frameSet[Texture2D](1, abi, texture)
	frameSet[Int](2, abi, index)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Shader.set_default_texture_parameter, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classShader) GetDefaultTextureParameter(name StringName, index Int) Texture2D {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[StringName](0, abi, name)
	frameSet[Int](1, abi, index)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Shader.get_default_texture_parameter, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Texture2D](abi)
	abi.free()
	return ret
}

func (self classShader) GetShaderUniformList(ctx Context, get_groups bool) Array {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[bool](0, abi, get_groups)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Shader.get_shader_uniform_list, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[uintptr](abi)
	abi.free()
	return mmm.Make[API, Array, uintptr](ctx, selfPtr.API, ret)
}

func (self classShader) virtual(name string) reflect.Value {
	switch name {
	default:
		return self.Super().virtual(name)
	}
}

type classShape3D struct{ Class[classShape3D, Resource] }

func (self classShape3D) Resource() Resource { return *self.Super() }

func (self classShape3D) RefCounted() RefCounted { return *self.Super().Super() }

func (self classShape3D) Object() Object { return *self.Super().Super().Super() }

func (self classShape3D) SetCustomSolverBias(bias Float) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Float](0, abi, bias)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Shape3D.set_custom_solver_bias, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classShape3D) GetCustomSolverBias() Float {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Shape3D.get_custom_solver_bias, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Float](abi)
	abi.free()
	return ret
}

func (self classShape3D) SetMargin(margin Float) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Float](0, abi, margin)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Shape3D.set_margin, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classShape3D) GetMargin() Float {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Shape3D.get_margin, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Float](abi)
	abi.free()
	return ret
}

func (self classShape3D) GetDebugMesh() ArrayMesh {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Shape3D.get_debug_mesh, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[ArrayMesh](abi)
	abi.free()
	return ret
}

func (self classShape3D) virtual(name string) reflect.Value {
	switch name {
	default:
		return self.Super().virtual(name)
	}
}

type classSky struct{ Class[classSky, Resource] }

func (self classSky) Resource() Resource { return *self.Super() }

func (self classSky) RefCounted() RefCounted { return *self.Super().Super() }

func (self classSky) Object() Object { return *self.Super().Super().Super() }

func (self classSky) SetRadianceSize(size SkyRadianceSize) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[SkyRadianceSize](0, abi, size)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Sky.set_radiance_size, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classSky) GetRadianceSize() SkyRadianceSize {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Sky.get_radiance_size, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[SkyRadianceSize](abi)
	abi.free()
	return ret
}

func (self classSky) SetProcessMode(mode SkyProcessMode) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[SkyProcessMode](0, abi, mode)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Sky.set_process_mode, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classSky) GetProcessMode() SkyProcessMode {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Sky.get_process_mode, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[SkyProcessMode](abi)
	abi.free()
	return ret
}

func (self classSky) SetMaterial(material Material) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Material](0, abi, material)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Sky.set_material, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classSky) GetMaterial() Material {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Sky.get_material, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Material](abi)
	abi.free()
	return ret
}

func (self classSky) virtual(name string) reflect.Value {
	switch name {
	default:
		return self.Super().virtual(name)
	}
}

type classStyleBox struct{ Class[classStyleBox, Resource] }

func (self classStyleBox) Resource() Resource { return *self.Super() }

func (self classStyleBox) RefCounted() RefCounted { return *self.Super().Super() }

func (self classStyleBox) Object() Object { return *self.Super().Super().Super() }

func (classStyleBox) _draw(impl func(ptr unsafe.Pointer, ctx Context, to_canvas_item RID, rect Rect2), api *API) (cb ExtensionClassCallVirtualFunc) {
	cb.Set(func(class cgo.Handle, p_args godotArgs, p_back godotBack) {
		ctx := newContext(api)
		var to_canvas_item = godotGet[RID](p_args, 0)
		var rect = godotGet[Rect2](p_args, 1)
		self := reflect.ValueOf(class.Value()).UnsafePointer()
		impl(self, ctx, to_canvas_item, rect)
		ctx.Free()
	})
	return
}

func (classStyleBox) _get_draw_rect(impl func(ptr unsafe.Pointer, ctx Context, rect Rect2) Rect2, api *API) (cb ExtensionClassCallVirtualFunc) {
	cb.Set(func(class cgo.Handle, p_args godotArgs, p_back godotBack) {
		ctx := newContext(api)
		var rect = godotGet[Rect2](p_args, 0)
		self := reflect.ValueOf(class.Value()).UnsafePointer()
		ret := impl(self, ctx, rect)
		ctx.Free()
		godotSet[Rect2](p_back, ret)
	})
	return
}

func (classStyleBox) _get_minimum_size(impl func(ptr unsafe.Pointer, ctx Context) Vector2, api *API) (cb ExtensionClassCallVirtualFunc) {
	cb.Set(func(class cgo.Handle, p_args godotArgs, p_back godotBack) {
		ctx := newContext(api)
		self := reflect.ValueOf(class.Value()).UnsafePointer()
		ret := impl(self, ctx)
		ctx.Free()
		godotSet[Vector2](p_back, ret)
	})
	return
}

func (classStyleBox) _test_mask(impl func(ptr unsafe.Pointer, ctx Context, point Vector2, rect Rect2) bool, api *API) (cb ExtensionClassCallVirtualFunc) {
	cb.Set(func(class cgo.Handle, p_args godotArgs, p_back godotBack) {
		ctx := newContext(api)
		var point = godotGet[Vector2](p_args, 0)
		var rect = godotGet[Rect2](p_args, 1)
		self := reflect.ValueOf(class.Value()).UnsafePointer()
		ret := impl(self, ctx, point, rect)
		ctx.Free()
		godotSet[bool](p_back, ret)
	})
	return
}

func (self classStyleBox) GetMinimumSize() Vector2 {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.StyleBox.get_minimum_size, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Vector2](abi)
	abi.free()
	return ret
}

func (self classStyleBox) SetContentMargin(margin Side, offset Float) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Side](0, abi, margin)
	frameSet[Float](1, abi, offset)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.StyleBox.set_content_margin, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classStyleBox) SetContentMarginAll(offset Float) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Float](0, abi, offset)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.StyleBox.set_content_margin_all, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classStyleBox) GetContentMargin(margin Side) Float {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Side](0, abi, margin)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.StyleBox.get_content_margin, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Float](abi)
	abi.free()
	return ret
}

func (self classStyleBox) GetMargin(margin Side) Float {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Side](0, abi, margin)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.StyleBox.get_margin, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Float](abi)
	abi.free()
	return ret
}

func (self classStyleBox) GetOffset() Vector2 {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.StyleBox.get_offset, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Vector2](abi)
	abi.free()
	return ret
}

func (self classStyleBox) Draw(canvas_item RID, rect Rect2) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, canvas_item)
	frameSet[Rect2](1, abi, rect)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.StyleBox.draw, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classStyleBox) GetCurrentItemDrawn() CanvasItem {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.StyleBox.get_current_item_drawn, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[CanvasItem](abi)
	abi.free()
	return ret
}

func (self classStyleBox) TestMask(point Vector2, rect Rect2) bool {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Vector2](0, abi, point)
	frameSet[Rect2](1, abi, rect)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.StyleBox.test_mask, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self classStyleBox) virtual(name string) reflect.Value {
	switch name {
	case "_draw":
		return reflect.ValueOf(self._draw)
	case "_get_draw_rect":
		return reflect.ValueOf(self._get_draw_rect)
	case "_get_minimum_size":
		return reflect.ValueOf(self._get_minimum_size)
	case "_test_mask":
		return reflect.ValueOf(self._test_mask)
	default:
		return self.Super().virtual(name)
	}
}

type classTextServer struct {
	Class[classTextServer, RefCounted]
}

func (self classTextServer) RefCounted() RefCounted { return *self.Super() }

func (self classTextServer) Object() Object { return *self.Super().Super() }

func (self classTextServer) HasFeature(feature TextServerFeature) bool {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[TextServerFeature](0, abi, feature)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.TextServer.has_feature, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self classTextServer) GetName(ctx Context) String {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.TextServer.get_name, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[uintptr](abi)
	abi.free()
	return mmm.Make[API, String, uintptr](ctx, selfPtr.API, ret)
}

func (self classTextServer) GetFeatures() Int {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.TextServer.get_features, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Int](abi)
	abi.free()
	return ret
}

func (self classTextServer) LoadSupportData(filename String) bool {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[String](0, abi, filename)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.TextServer.load_support_data, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self classTextServer) GetSupportDataFilename(ctx Context) String {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.TextServer.get_support_data_filename, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[uintptr](abi)
	abi.free()
	return mmm.Make[API, String, uintptr](ctx, selfPtr.API, ret)
}

func (self classTextServer) GetSupportDataInfo(ctx Context) String {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.TextServer.get_support_data_info, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[uintptr](abi)
	abi.free()
	return mmm.Make[API, String, uintptr](ctx, selfPtr.API, ret)
}

func (self classTextServer) SaveSupportData(filename String) bool {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[String](0, abi, filename)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.TextServer.save_support_data, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self classTextServer) IsLocaleRightToLeft(locale String) bool {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[String](0, abi, locale)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.TextServer.is_locale_right_to_left, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self classTextServer) NameToTag(name String) Int {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[String](0, abi, name)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.TextServer.name_to_tag, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Int](abi)
	abi.free()
	return ret
}

func (self classTextServer) TagToName(ctx Context, tag Int) String {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Int](0, abi, tag)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.TextServer.tag_to_name, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[uintptr](abi)
	abi.free()
	return mmm.Make[API, String, uintptr](ctx, selfPtr.API, ret)
}

func (self classTextServer) Has(rid RID) bool {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, rid)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.TextServer.has, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self classTextServer) FreeRid(rid RID) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, rid)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.TextServer.free_rid, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classTextServer) CreateFont() RID {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.TextServer.create_font, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[RID](abi)
	abi.free()
	return ret
}

func (self classTextServer) CreateFontLinkedVariation(font_rid RID) RID {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, font_rid)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.TextServer.create_font_linked_variation, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[RID](abi)
	abi.free()
	return ret
}

func (self classTextServer) FontSetData(font_rid RID, data PackedByteArray) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, font_rid)
	frameSet[PackedByteArray](1, abi, data)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.TextServer.font_set_data, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classTextServer) FontSetFaceIndex(font_rid RID, face_index Int) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, font_rid)
	frameSet[Int](1, abi, face_index)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.TextServer.font_set_face_index, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classTextServer) FontGetFaceIndex(font_rid RID) Int {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, font_rid)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.TextServer.font_get_face_index, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Int](abi)
	abi.free()
	return ret
}

func (self classTextServer) FontGetFaceCount(font_rid RID) Int {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, font_rid)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.TextServer.font_get_face_count, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Int](abi)
	abi.free()
	return ret
}

func (self classTextServer) FontSetStyle(font_rid RID, style TextServerFontStyle) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, font_rid)
	frameSet[TextServerFontStyle](1, abi, style)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.TextServer.font_set_style, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classTextServer) FontGetStyle(font_rid RID) TextServerFontStyle {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, font_rid)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.TextServer.font_get_style, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[TextServerFontStyle](abi)
	abi.free()
	return ret
}

func (self classTextServer) FontSetName(font_rid RID, name String) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, font_rid)
	frameSet[String](1, abi, name)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.TextServer.font_set_name, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classTextServer) FontGetName(ctx Context, font_rid RID) String {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, font_rid)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.TextServer.font_get_name, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[uintptr](abi)
	abi.free()
	return mmm.Make[API, String, uintptr](ctx, selfPtr.API, ret)
}

func (self classTextServer) FontGetOtNameStrings(ctx Context, font_rid RID) Dictionary {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, font_rid)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.TextServer.font_get_ot_name_strings, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[uintptr](abi)
	abi.free()
	return mmm.Make[API, Dictionary, uintptr](ctx, selfPtr.API, ret)
}

func (self classTextServer) FontSetStyleName(font_rid RID, name String) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, font_rid)
	frameSet[String](1, abi, name)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.TextServer.font_set_style_name, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classTextServer) FontGetStyleName(ctx Context, font_rid RID) String {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, font_rid)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.TextServer.font_get_style_name, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[uintptr](abi)
	abi.free()
	return mmm.Make[API, String, uintptr](ctx, selfPtr.API, ret)
}

func (self classTextServer) FontSetWeight(font_rid RID, weight Int) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, font_rid)
	frameSet[Int](1, abi, weight)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.TextServer.font_set_weight, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classTextServer) FontGetWeight(font_rid RID) Int {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, font_rid)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.TextServer.font_get_weight, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Int](abi)
	abi.free()
	return ret
}

func (self classTextServer) FontSetStretch(font_rid RID, weight Int) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, font_rid)
	frameSet[Int](1, abi, weight)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.TextServer.font_set_stretch, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classTextServer) FontGetStretch(font_rid RID) Int {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, font_rid)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.TextServer.font_get_stretch, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Int](abi)
	abi.free()
	return ret
}

func (self classTextServer) FontSetAntialiasing(font_rid RID, antialiasing TextServerFontAntialiasing) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, font_rid)
	frameSet[TextServerFontAntialiasing](1, abi, antialiasing)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.TextServer.font_set_antialiasing, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classTextServer) FontGetAntialiasing(font_rid RID) TextServerFontAntialiasing {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, font_rid)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.TextServer.font_get_antialiasing, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[TextServerFontAntialiasing](abi)
	abi.free()
	return ret
}

func (self classTextServer) FontSetGenerateMipmaps(font_rid RID, generate_mipmaps bool) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, font_rid)
	frameSet[bool](1, abi, generate_mipmaps)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.TextServer.font_set_generate_mipmaps, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classTextServer) FontGetGenerateMipmaps(font_rid RID) bool {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, font_rid)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.TextServer.font_get_generate_mipmaps, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self classTextServer) FontSetMultichannelSignedDistanceField(font_rid RID, msdf bool) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, font_rid)
	frameSet[bool](1, abi, msdf)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.TextServer.font_set_multichannel_signed_distance_field, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classTextServer) FontIsMultichannelSignedDistanceField(font_rid RID) bool {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, font_rid)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.TextServer.font_is_multichannel_signed_distance_field, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self classTextServer) FontSetMsdfPixelRange(font_rid RID, msdf_pixel_range Int) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, font_rid)
	frameSet[Int](1, abi, msdf_pixel_range)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.TextServer.font_set_msdf_pixel_range, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classTextServer) FontGetMsdfPixelRange(font_rid RID) Int {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, font_rid)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.TextServer.font_get_msdf_pixel_range, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Int](abi)
	abi.free()
	return ret
}

func (self classTextServer) FontSetMsdfSize(font_rid RID, msdf_size Int) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, font_rid)
	frameSet[Int](1, abi, msdf_size)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.TextServer.font_set_msdf_size, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classTextServer) FontGetMsdfSize(font_rid RID) Int {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, font_rid)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.TextServer.font_get_msdf_size, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Int](abi)
	abi.free()
	return ret
}

func (self classTextServer) FontSetFixedSize(font_rid RID, fixed_size Int) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, font_rid)
	frameSet[Int](1, abi, fixed_size)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.TextServer.font_set_fixed_size, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classTextServer) FontGetFixedSize(font_rid RID) Int {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, font_rid)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.TextServer.font_get_fixed_size, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Int](abi)
	abi.free()
	return ret
}

func (self classTextServer) FontSetFixedSizeScaleMode(font_rid RID, fixed_size_scale_mode TextServerFixedSizeScaleMode) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, font_rid)
	frameSet[TextServerFixedSizeScaleMode](1, abi, fixed_size_scale_mode)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.TextServer.font_set_fixed_size_scale_mode, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classTextServer) FontGetFixedSizeScaleMode(font_rid RID) TextServerFixedSizeScaleMode {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, font_rid)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.TextServer.font_get_fixed_size_scale_mode, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[TextServerFixedSizeScaleMode](abi)
	abi.free()
	return ret
}

func (self classTextServer) FontSetAllowSystemFallback(font_rid RID, allow_system_fallback bool) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, font_rid)
	frameSet[bool](1, abi, allow_system_fallback)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.TextServer.font_set_allow_system_fallback, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classTextServer) FontIsAllowSystemFallback(font_rid RID) bool {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, font_rid)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.TextServer.font_is_allow_system_fallback, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self classTextServer) FontSetForceAutohinter(font_rid RID, force_autohinter bool) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, font_rid)
	frameSet[bool](1, abi, force_autohinter)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.TextServer.font_set_force_autohinter, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classTextServer) FontIsForceAutohinter(font_rid RID) bool {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, font_rid)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.TextServer.font_is_force_autohinter, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self classTextServer) FontSetHinting(font_rid RID, hinting TextServerHinting) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, font_rid)
	frameSet[TextServerHinting](1, abi, hinting)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.TextServer.font_set_hinting, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classTextServer) FontGetHinting(font_rid RID) TextServerHinting {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, font_rid)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.TextServer.font_get_hinting, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[TextServerHinting](abi)
	abi.free()
	return ret
}

func (self classTextServer) FontSetSubpixelPositioning(font_rid RID, subpixel_positioning TextServerSubpixelPositioning) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, font_rid)
	frameSet[TextServerSubpixelPositioning](1, abi, subpixel_positioning)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.TextServer.font_set_subpixel_positioning, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classTextServer) FontGetSubpixelPositioning(font_rid RID) TextServerSubpixelPositioning {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, font_rid)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.TextServer.font_get_subpixel_positioning, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[TextServerSubpixelPositioning](abi)
	abi.free()
	return ret
}

func (self classTextServer) FontSetEmbolden(font_rid RID, strength Float) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, font_rid)
	frameSet[Float](1, abi, strength)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.TextServer.font_set_embolden, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classTextServer) FontGetEmbolden(font_rid RID) Float {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, font_rid)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.TextServer.font_get_embolden, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Float](abi)
	abi.free()
	return ret
}

func (self classTextServer) FontSetSpacing(font_rid RID, spacing TextServerSpacingType, value Int) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, font_rid)
	frameSet[TextServerSpacingType](1, abi, spacing)
	frameSet[Int](2, abi, value)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.TextServer.font_set_spacing, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classTextServer) FontGetSpacing(font_rid RID, spacing TextServerSpacingType) Int {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, font_rid)
	frameSet[TextServerSpacingType](1, abi, spacing)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.TextServer.font_get_spacing, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Int](abi)
	abi.free()
	return ret
}

func (self classTextServer) FontSetTransform(font_rid RID, transform Transform2D) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, font_rid)
	frameSet[Transform2D](1, abi, transform)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.TextServer.font_set_transform, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classTextServer) FontGetTransform(font_rid RID) Transform2D {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, font_rid)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.TextServer.font_get_transform, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Transform2D](abi)
	abi.free()
	return ret
}

func (self classTextServer) FontSetVariationCoordinates(font_rid RID, variation_coordinates Dictionary) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, font_rid)
	frameSet[Dictionary](1, abi, variation_coordinates)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.TextServer.font_set_variation_coordinates, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classTextServer) FontGetVariationCoordinates(ctx Context, font_rid RID) Dictionary {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, font_rid)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.TextServer.font_get_variation_coordinates, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[uintptr](abi)
	abi.free()
	return mmm.Make[API, Dictionary, uintptr](ctx, selfPtr.API, ret)
}

func (self classTextServer) FontSetOversampling(font_rid RID, oversampling Float) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, font_rid)
	frameSet[Float](1, abi, oversampling)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.TextServer.font_set_oversampling, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classTextServer) FontGetOversampling(font_rid RID) Float {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, font_rid)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.TextServer.font_get_oversampling, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Float](abi)
	abi.free()
	return ret
}

func (self classTextServer) FontGetSizeCacheList(font_rid RID) ArrayOf[Vector2i] {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, font_rid)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.TextServer.font_get_size_cache_list, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[ArrayOf[Vector2i]](abi)
	abi.free()
	return ret
}

func (self classTextServer) FontClearSizeCache(font_rid RID) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, font_rid)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.TextServer.font_clear_size_cache, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classTextServer) FontRemoveSizeCache(font_rid RID, size Vector2i) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, font_rid)
	frameSet[Vector2i](1, abi, size)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.TextServer.font_remove_size_cache, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classTextServer) FontSetAscent(font_rid RID, size Int, ascent Float) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, font_rid)
	frameSet[Int](1, abi, size)
	frameSet[Float](2, abi, ascent)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.TextServer.font_set_ascent, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classTextServer) FontGetAscent(font_rid RID, size Int) Float {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, font_rid)
	frameSet[Int](1, abi, size)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.TextServer.font_get_ascent, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Float](abi)
	abi.free()
	return ret
}

func (self classTextServer) FontSetDescent(font_rid RID, size Int, descent Float) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, font_rid)
	frameSet[Int](1, abi, size)
	frameSet[Float](2, abi, descent)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.TextServer.font_set_descent, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classTextServer) FontGetDescent(font_rid RID, size Int) Float {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, font_rid)
	frameSet[Int](1, abi, size)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.TextServer.font_get_descent, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Float](abi)
	abi.free()
	return ret
}

func (self classTextServer) FontSetUnderlinePosition(font_rid RID, size Int, underline_position Float) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, font_rid)
	frameSet[Int](1, abi, size)
	frameSet[Float](2, abi, underline_position)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.TextServer.font_set_underline_position, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classTextServer) FontGetUnderlinePosition(font_rid RID, size Int) Float {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, font_rid)
	frameSet[Int](1, abi, size)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.TextServer.font_get_underline_position, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Float](abi)
	abi.free()
	return ret
}

func (self classTextServer) FontSetUnderlineThickness(font_rid RID, size Int, underline_thickness Float) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, font_rid)
	frameSet[Int](1, abi, size)
	frameSet[Float](2, abi, underline_thickness)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.TextServer.font_set_underline_thickness, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classTextServer) FontGetUnderlineThickness(font_rid RID, size Int) Float {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, font_rid)
	frameSet[Int](1, abi, size)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.TextServer.font_get_underline_thickness, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Float](abi)
	abi.free()
	return ret
}

func (self classTextServer) FontSetScale(font_rid RID, size Int, scale Float) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, font_rid)
	frameSet[Int](1, abi, size)
	frameSet[Float](2, abi, scale)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.TextServer.font_set_scale, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classTextServer) FontGetScale(font_rid RID, size Int) Float {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, font_rid)
	frameSet[Int](1, abi, size)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.TextServer.font_get_scale, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Float](abi)
	abi.free()
	return ret
}

func (self classTextServer) FontGetTextureCount(font_rid RID, size Vector2i) Int {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, font_rid)
	frameSet[Vector2i](1, abi, size)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.TextServer.font_get_texture_count, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Int](abi)
	abi.free()
	return ret
}

func (self classTextServer) FontClearTextures(font_rid RID, size Vector2i) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, font_rid)
	frameSet[Vector2i](1, abi, size)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.TextServer.font_clear_textures, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classTextServer) FontRemoveTexture(font_rid RID, size Vector2i, texture_index Int) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, font_rid)
	frameSet[Vector2i](1, abi, size)
	frameSet[Int](2, abi, texture_index)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.TextServer.font_remove_texture, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classTextServer) FontSetTextureImage(font_rid RID, size Vector2i, texture_index Int, image Image) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, font_rid)
	frameSet[Vector2i](1, abi, size)
	frameSet[Int](2, abi, texture_index)
	frameSet[Image](3, abi, image)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.TextServer.font_set_texture_image, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classTextServer) FontGetTextureImage(font_rid RID, size Vector2i, texture_index Int) Image {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, font_rid)
	frameSet[Vector2i](1, abi, size)
	frameSet[Int](2, abi, texture_index)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.TextServer.font_get_texture_image, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Image](abi)
	abi.free()
	return ret
}

func (self classTextServer) FontSetTextureOffsets(font_rid RID, size Vector2i, texture_index Int, offset PackedInt32Array) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, font_rid)
	frameSet[Vector2i](1, abi, size)
	frameSet[Int](2, abi, texture_index)
	frameSet[PackedInt32Array](3, abi, offset)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.TextServer.font_set_texture_offsets, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classTextServer) FontGetTextureOffsets(ctx Context, font_rid RID, size Vector2i, texture_index Int) PackedInt32Array {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, font_rid)
	frameSet[Vector2i](1, abi, size)
	frameSet[Int](2, abi, texture_index)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.TextServer.font_get_texture_offsets, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[[2]uintptr](abi)
	abi.free()
	return mmm.Make[API, PackedInt32Array, [2]uintptr](ctx, selfPtr.API, ret)
}

func (self classTextServer) FontGetGlyphList(ctx Context, font_rid RID, size Vector2i) PackedInt32Array {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, font_rid)
	frameSet[Vector2i](1, abi, size)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.TextServer.font_get_glyph_list, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[[2]uintptr](abi)
	abi.free()
	return mmm.Make[API, PackedInt32Array, [2]uintptr](ctx, selfPtr.API, ret)
}

func (self classTextServer) FontClearGlyphs(font_rid RID, size Vector2i) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, font_rid)
	frameSet[Vector2i](1, abi, size)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.TextServer.font_clear_glyphs, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classTextServer) FontRemoveGlyph(font_rid RID, size Vector2i, glyph Int) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, font_rid)
	frameSet[Vector2i](1, abi, size)
	frameSet[Int](2, abi, glyph)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.TextServer.font_remove_glyph, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classTextServer) FontGetGlyphAdvance(font_rid RID, size Int, glyph Int) Vector2 {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, font_rid)
	frameSet[Int](1, abi, size)
	frameSet[Int](2, abi, glyph)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.TextServer.font_get_glyph_advance, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Vector2](abi)
	abi.free()
	return ret
}

func (self classTextServer) FontSetGlyphAdvance(font_rid RID, size Int, glyph Int, advance Vector2) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, font_rid)
	frameSet[Int](1, abi, size)
	frameSet[Int](2, abi, glyph)
	frameSet[Vector2](3, abi, advance)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.TextServer.font_set_glyph_advance, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classTextServer) FontGetGlyphOffset(font_rid RID, size Vector2i, glyph Int) Vector2 {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, font_rid)
	frameSet[Vector2i](1, abi, size)
	frameSet[Int](2, abi, glyph)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.TextServer.font_get_glyph_offset, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Vector2](abi)
	abi.free()
	return ret
}

func (self classTextServer) FontSetGlyphOffset(font_rid RID, size Vector2i, glyph Int, offset Vector2) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, font_rid)
	frameSet[Vector2i](1, abi, size)
	frameSet[Int](2, abi, glyph)
	frameSet[Vector2](3, abi, offset)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.TextServer.font_set_glyph_offset, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classTextServer) FontGetGlyphSize(font_rid RID, size Vector2i, glyph Int) Vector2 {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, font_rid)
	frameSet[Vector2i](1, abi, size)
	frameSet[Int](2, abi, glyph)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.TextServer.font_get_glyph_size, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Vector2](abi)
	abi.free()
	return ret
}

func (self classTextServer) FontSetGlyphSize(font_rid RID, size Vector2i, glyph Int, gl_size Vector2) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, font_rid)
	frameSet[Vector2i](1, abi, size)
	frameSet[Int](2, abi, glyph)
	frameSet[Vector2](3, abi, gl_size)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.TextServer.font_set_glyph_size, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classTextServer) FontGetGlyphUvRect(font_rid RID, size Vector2i, glyph Int) Rect2 {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, font_rid)
	frameSet[Vector2i](1, abi, size)
	frameSet[Int](2, abi, glyph)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.TextServer.font_get_glyph_uv_rect, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Rect2](abi)
	abi.free()
	return ret
}

func (self classTextServer) FontSetGlyphUvRect(font_rid RID, size Vector2i, glyph Int, uv_rect Rect2) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, font_rid)
	frameSet[Vector2i](1, abi, size)
	frameSet[Int](2, abi, glyph)
	frameSet[Rect2](3, abi, uv_rect)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.TextServer.font_set_glyph_uv_rect, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classTextServer) FontGetGlyphTextureIdx(font_rid RID, size Vector2i, glyph Int) Int {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, font_rid)
	frameSet[Vector2i](1, abi, size)
	frameSet[Int](2, abi, glyph)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.TextServer.font_get_glyph_texture_idx, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Int](abi)
	abi.free()
	return ret
}

func (self classTextServer) FontSetGlyphTextureIdx(font_rid RID, size Vector2i, glyph Int, texture_idx Int) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, font_rid)
	frameSet[Vector2i](1, abi, size)
	frameSet[Int](2, abi, glyph)
	frameSet[Int](3, abi, texture_idx)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.TextServer.font_set_glyph_texture_idx, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classTextServer) FontGetGlyphTextureRid(font_rid RID, size Vector2i, glyph Int) RID {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, font_rid)
	frameSet[Vector2i](1, abi, size)
	frameSet[Int](2, abi, glyph)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.TextServer.font_get_glyph_texture_rid, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[RID](abi)
	abi.free()
	return ret
}

func (self classTextServer) FontGetGlyphTextureSize(font_rid RID, size Vector2i, glyph Int) Vector2 {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, font_rid)
	frameSet[Vector2i](1, abi, size)
	frameSet[Int](2, abi, glyph)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.TextServer.font_get_glyph_texture_size, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Vector2](abi)
	abi.free()
	return ret
}

func (self classTextServer) FontGetGlyphContours(ctx Context, font RID, size Int, index Int) Dictionary {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, font)
	frameSet[Int](1, abi, size)
	frameSet[Int](2, abi, index)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.TextServer.font_get_glyph_contours, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[uintptr](abi)
	abi.free()
	return mmm.Make[API, Dictionary, uintptr](ctx, selfPtr.API, ret)
}

func (self classTextServer) FontGetKerningList(font_rid RID, size Int) ArrayOf[Vector2i] {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, font_rid)
	frameSet[Int](1, abi, size)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.TextServer.font_get_kerning_list, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[ArrayOf[Vector2i]](abi)
	abi.free()
	return ret
}

func (self classTextServer) FontClearKerningMap(font_rid RID, size Int) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, font_rid)
	frameSet[Int](1, abi, size)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.TextServer.font_clear_kerning_map, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classTextServer) FontRemoveKerning(font_rid RID, size Int, glyph_pair Vector2i) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, font_rid)
	frameSet[Int](1, abi, size)
	frameSet[Vector2i](2, abi, glyph_pair)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.TextServer.font_remove_kerning, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classTextServer) FontSetKerning(font_rid RID, size Int, glyph_pair Vector2i, kerning Vector2) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, font_rid)
	frameSet[Int](1, abi, size)
	frameSet[Vector2i](2, abi, glyph_pair)
	frameSet[Vector2](3, abi, kerning)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.TextServer.font_set_kerning, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classTextServer) FontGetKerning(font_rid RID, size Int, glyph_pair Vector2i) Vector2 {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, font_rid)
	frameSet[Int](1, abi, size)
	frameSet[Vector2i](2, abi, glyph_pair)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.TextServer.font_get_kerning, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Vector2](abi)
	abi.free()
	return ret
}

func (self classTextServer) FontGetGlyphIndex(font_rid RID, size Int, char Int, variation_selector Int) Int {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, font_rid)
	frameSet[Int](1, abi, size)
	frameSet[Int](2, abi, char)
	frameSet[Int](3, abi, variation_selector)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.TextServer.font_get_glyph_index, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Int](abi)
	abi.free()
	return ret
}

func (self classTextServer) FontGetCharFromGlyphIndex(font_rid RID, size Int, glyph_index Int) Int {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, font_rid)
	frameSet[Int](1, abi, size)
	frameSet[Int](2, abi, glyph_index)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.TextServer.font_get_char_from_glyph_index, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Int](abi)
	abi.free()
	return ret
}

func (self classTextServer) FontHasChar(font_rid RID, char Int) bool {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, font_rid)
	frameSet[Int](1, abi, char)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.TextServer.font_has_char, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self classTextServer) FontGetSupportedChars(ctx Context, font_rid RID) String {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, font_rid)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.TextServer.font_get_supported_chars, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[uintptr](abi)
	abi.free()
	return mmm.Make[API, String, uintptr](ctx, selfPtr.API, ret)
}

func (self classTextServer) FontRenderRange(font_rid RID, size Vector2i, start Int, end Int) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, font_rid)
	frameSet[Vector2i](1, abi, size)
	frameSet[Int](2, abi, start)
	frameSet[Int](3, abi, end)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.TextServer.font_render_range, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classTextServer) FontRenderGlyph(font_rid RID, size Vector2i, index Int) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, font_rid)
	frameSet[Vector2i](1, abi, size)
	frameSet[Int](2, abi, index)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.TextServer.font_render_glyph, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classTextServer) FontDrawGlyph(font_rid RID, canvas RID, size Int, pos Vector2, index Int, color Color) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, font_rid)
	frameSet[RID](1, abi, canvas)
	frameSet[Int](2, abi, size)
	frameSet[Vector2](3, abi, pos)
	frameSet[Int](4, abi, index)
	frameSet[Color](5, abi, color)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.TextServer.font_draw_glyph, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classTextServer) FontDrawGlyphOutline(font_rid RID, canvas RID, size Int, outline_size Int, pos Vector2, index Int, color Color) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, font_rid)
	frameSet[RID](1, abi, canvas)
	frameSet[Int](2, abi, size)
	frameSet[Int](3, abi, outline_size)
	frameSet[Vector2](4, abi, pos)
	frameSet[Int](5, abi, index)
	frameSet[Color](6, abi, color)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.TextServer.font_draw_glyph_outline, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classTextServer) FontIsLanguageSupported(font_rid RID, language String) bool {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, font_rid)
	frameSet[String](1, abi, language)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.TextServer.font_is_language_supported, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self classTextServer) FontSetLanguageSupportOverride(font_rid RID, language String, supported bool) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, font_rid)
	frameSet[String](1, abi, language)
	frameSet[bool](2, abi, supported)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.TextServer.font_set_language_support_override, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classTextServer) FontGetLanguageSupportOverride(font_rid RID, language String) bool {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, font_rid)
	frameSet[String](1, abi, language)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.TextServer.font_get_language_support_override, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self classTextServer) FontRemoveLanguageSupportOverride(font_rid RID, language String) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, font_rid)
	frameSet[String](1, abi, language)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.TextServer.font_remove_language_support_override, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classTextServer) FontGetLanguageSupportOverrides(ctx Context, font_rid RID) PackedStringArray {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, font_rid)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.TextServer.font_get_language_support_overrides, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[[2]uintptr](abi)
	abi.free()
	return mmm.Make[API, PackedStringArray, [2]uintptr](ctx, selfPtr.API, ret)
}

func (self classTextServer) FontIsScriptSupported(font_rid RID, script String) bool {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, font_rid)
	frameSet[String](1, abi, script)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.TextServer.font_is_script_supported, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self classTextServer) FontSetScriptSupportOverride(font_rid RID, script String, supported bool) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, font_rid)
	frameSet[String](1, abi, script)
	frameSet[bool](2, abi, supported)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.TextServer.font_set_script_support_override, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classTextServer) FontGetScriptSupportOverride(font_rid RID, script String) bool {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, font_rid)
	frameSet[String](1, abi, script)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.TextServer.font_get_script_support_override, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self classTextServer) FontRemoveScriptSupportOverride(font_rid RID, script String) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, font_rid)
	frameSet[String](1, abi, script)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.TextServer.font_remove_script_support_override, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classTextServer) FontGetScriptSupportOverrides(ctx Context, font_rid RID) PackedStringArray {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, font_rid)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.TextServer.font_get_script_support_overrides, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[[2]uintptr](abi)
	abi.free()
	return mmm.Make[API, PackedStringArray, [2]uintptr](ctx, selfPtr.API, ret)
}

func (self classTextServer) FontSetOpentypeFeatureOverrides(font_rid RID, overrides Dictionary) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, font_rid)
	frameSet[Dictionary](1, abi, overrides)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.TextServer.font_set_opentype_feature_overrides, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classTextServer) FontGetOpentypeFeatureOverrides(ctx Context, font_rid RID) Dictionary {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, font_rid)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.TextServer.font_get_opentype_feature_overrides, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[uintptr](abi)
	abi.free()
	return mmm.Make[API, Dictionary, uintptr](ctx, selfPtr.API, ret)
}

func (self classTextServer) FontSupportedFeatureList(ctx Context, font_rid RID) Dictionary {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, font_rid)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.TextServer.font_supported_feature_list, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[uintptr](abi)
	abi.free()
	return mmm.Make[API, Dictionary, uintptr](ctx, selfPtr.API, ret)
}

func (self classTextServer) FontSupportedVariationList(ctx Context, font_rid RID) Dictionary {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, font_rid)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.TextServer.font_supported_variation_list, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[uintptr](abi)
	abi.free()
	return mmm.Make[API, Dictionary, uintptr](ctx, selfPtr.API, ret)
}

func (self classTextServer) FontGetGlobalOversampling() Float {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.TextServer.font_get_global_oversampling, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Float](abi)
	abi.free()
	return ret
}

func (self classTextServer) FontSetGlobalOversampling(oversampling Float) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Float](0, abi, oversampling)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.TextServer.font_set_global_oversampling, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classTextServer) GetHexCodeBoxSize(size Int, index Int) Vector2 {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Int](0, abi, size)
	frameSet[Int](1, abi, index)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.TextServer.get_hex_code_box_size, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Vector2](abi)
	abi.free()
	return ret
}

func (self classTextServer) DrawHexCodeBox(canvas RID, size Int, pos Vector2, index Int, color Color) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, canvas)
	frameSet[Int](1, abi, size)
	frameSet[Vector2](2, abi, pos)
	frameSet[Int](3, abi, index)
	frameSet[Color](4, abi, color)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.TextServer.draw_hex_code_box, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classTextServer) CreateShapedText(direction TextServerDirection, orientation TextServerOrientation) RID {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[TextServerDirection](0, abi, direction)
	frameSet[TextServerOrientation](1, abi, orientation)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.TextServer.create_shaped_text, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[RID](abi)
	abi.free()
	return ret
}

func (self classTextServer) ShapedTextClear(rid RID) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, rid)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.TextServer.shaped_text_clear, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classTextServer) ShapedTextSetDirection(shaped RID, direction TextServerDirection) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, shaped)
	frameSet[TextServerDirection](1, abi, direction)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.TextServer.shaped_text_set_direction, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classTextServer) ShapedTextGetDirection(shaped RID) TextServerDirection {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, shaped)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.TextServer.shaped_text_get_direction, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[TextServerDirection](abi)
	abi.free()
	return ret
}

func (self classTextServer) ShapedTextGetInferredDirection(shaped RID) TextServerDirection {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, shaped)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.TextServer.shaped_text_get_inferred_direction, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[TextServerDirection](abi)
	abi.free()
	return ret
}

func (self classTextServer) ShapedTextSetBidiOverride(shaped RID, override Array) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, shaped)
	frameSet[Array](1, abi, override)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.TextServer.shaped_text_set_bidi_override, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classTextServer) ShapedTextSetCustomPunctuation(shaped RID, punct String) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, shaped)
	frameSet[String](1, abi, punct)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.TextServer.shaped_text_set_custom_punctuation, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classTextServer) ShapedTextGetCustomPunctuation(ctx Context, shaped RID) String {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, shaped)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.TextServer.shaped_text_get_custom_punctuation, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[uintptr](abi)
	abi.free()
	return mmm.Make[API, String, uintptr](ctx, selfPtr.API, ret)
}

func (self classTextServer) ShapedTextSetCustomEllipsis(shaped RID, char Int) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, shaped)
	frameSet[Int](1, abi, char)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.TextServer.shaped_text_set_custom_ellipsis, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classTextServer) ShapedTextGetCustomEllipsis(shaped RID) Int {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, shaped)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.TextServer.shaped_text_get_custom_ellipsis, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Int](abi)
	abi.free()
	return ret
}

func (self classTextServer) ShapedTextSetOrientation(shaped RID, orientation TextServerOrientation) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, shaped)
	frameSet[TextServerOrientation](1, abi, orientation)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.TextServer.shaped_text_set_orientation, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classTextServer) ShapedTextGetOrientation(shaped RID) TextServerOrientation {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, shaped)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.TextServer.shaped_text_get_orientation, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[TextServerOrientation](abi)
	abi.free()
	return ret
}

func (self classTextServer) ShapedTextSetPreserveInvalid(shaped RID, enabled bool) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, shaped)
	frameSet[bool](1, abi, enabled)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.TextServer.shaped_text_set_preserve_invalid, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classTextServer) ShapedTextGetPreserveInvalid(shaped RID) bool {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, shaped)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.TextServer.shaped_text_get_preserve_invalid, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self classTextServer) ShapedTextSetPreserveControl(shaped RID, enabled bool) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, shaped)
	frameSet[bool](1, abi, enabled)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.TextServer.shaped_text_set_preserve_control, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classTextServer) ShapedTextGetPreserveControl(shaped RID) bool {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, shaped)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.TextServer.shaped_text_get_preserve_control, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self classTextServer) ShapedTextSetSpacing(shaped RID, spacing TextServerSpacingType, value Int) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, shaped)
	frameSet[TextServerSpacingType](1, abi, spacing)
	frameSet[Int](2, abi, value)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.TextServer.shaped_text_set_spacing, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classTextServer) ShapedTextGetSpacing(shaped RID, spacing TextServerSpacingType) Int {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, shaped)
	frameSet[TextServerSpacingType](1, abi, spacing)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.TextServer.shaped_text_get_spacing, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Int](abi)
	abi.free()
	return ret
}

func (self classTextServer) ShapedTextAddString(shaped RID, text String, fonts ArrayOf[RID], size Int, opentype_features Dictionary, language String, meta Variant) bool {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, shaped)
	frameSet[String](1, abi, text)
	frameSet[ArrayOf[RID]](2, abi, fonts)
	frameSet[Int](3, abi, size)
	frameSet[Dictionary](4, abi, opentype_features)
	frameSet[String](5, abi, language)
	frameSet[Variant](6, abi, meta)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.TextServer.shaped_text_add_string, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self classTextServer) ShapedTextAddObject(shaped RID, key Variant, size Vector2, inline_align InlineAlignment, length Int, baseline Float) bool {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, shaped)
	frameSet[Variant](1, abi, key)
	frameSet[Vector2](2, abi, size)
	frameSet[InlineAlignment](3, abi, inline_align)
	frameSet[Int](4, abi, length)
	frameSet[Float](5, abi, baseline)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.TextServer.shaped_text_add_object, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self classTextServer) ShapedTextResizeObject(shaped RID, key Variant, size Vector2, inline_align InlineAlignment, baseline Float) bool {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, shaped)
	frameSet[Variant](1, abi, key)
	frameSet[Vector2](2, abi, size)
	frameSet[InlineAlignment](3, abi, inline_align)
	frameSet[Float](4, abi, baseline)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.TextServer.shaped_text_resize_object, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self classTextServer) ShapedGetSpanCount(shaped RID) Int {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, shaped)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.TextServer.shaped_get_span_count, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Int](abi)
	abi.free()
	return ret
}

func (self classTextServer) ShapedGetSpanMeta(ctx Context, shaped RID, index Int) Variant {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, shaped)
	frameSet[Int](1, abi, index)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.TextServer.shaped_get_span_meta, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[[3]uintptr](abi)
	abi.free()
	return mmm.Make[API, Variant, [3]uintptr](ctx, selfPtr.API, ret)
}

func (self classTextServer) ShapedSetSpanUpdateFont(shaped RID, index Int, fonts ArrayOf[RID], size Int, opentype_features Dictionary) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, shaped)
	frameSet[Int](1, abi, index)
	frameSet[ArrayOf[RID]](2, abi, fonts)
	frameSet[Int](3, abi, size)
	frameSet[Dictionary](4, abi, opentype_features)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.TextServer.shaped_set_span_update_font, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classTextServer) ShapedTextSubstr(shaped RID, start Int, length Int) RID {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, shaped)
	frameSet[Int](1, abi, start)
	frameSet[Int](2, abi, length)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.TextServer.shaped_text_substr, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[RID](abi)
	abi.free()
	return ret
}

func (self classTextServer) ShapedTextGetParent(shaped RID) RID {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, shaped)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.TextServer.shaped_text_get_parent, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[RID](abi)
	abi.free()
	return ret
}

func (self classTextServer) ShapedTextFitToWidth(shaped RID, width Float, justification_flags TextServerJustificationFlag) Float {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, shaped)
	frameSet[Float](1, abi, width)
	frameSet[TextServerJustificationFlag](2, abi, justification_flags)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.TextServer.shaped_text_fit_to_width, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Float](abi)
	abi.free()
	return ret
}

func (self classTextServer) ShapedTextTabAlign(shaped RID, tab_stops PackedFloat32Array) Float {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, shaped)
	frameSet[PackedFloat32Array](1, abi, tab_stops)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.TextServer.shaped_text_tab_align, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Float](abi)
	abi.free()
	return ret
}

func (self classTextServer) ShapedTextShape(shaped RID) bool {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, shaped)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.TextServer.shaped_text_shape, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self classTextServer) ShapedTextIsReady(shaped RID) bool {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, shaped)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.TextServer.shaped_text_is_ready, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self classTextServer) ShapedTextHasVisibleChars(shaped RID) bool {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, shaped)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.TextServer.shaped_text_has_visible_chars, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self classTextServer) ShapedTextGetGlyphs(shaped RID) ArrayOf[Dictionary] {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, shaped)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.TextServer.shaped_text_get_glyphs, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[ArrayOf[Dictionary]](abi)
	abi.free()
	return ret
}

func (self classTextServer) ShapedTextSortLogical(shaped RID) ArrayOf[Dictionary] {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, shaped)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.TextServer.shaped_text_sort_logical, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[ArrayOf[Dictionary]](abi)
	abi.free()
	return ret
}

func (self classTextServer) ShapedTextGetGlyphCount(shaped RID) Int {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, shaped)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.TextServer.shaped_text_get_glyph_count, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Int](abi)
	abi.free()
	return ret
}

func (self classTextServer) ShapedTextGetRange(shaped RID) Vector2i {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, shaped)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.TextServer.shaped_text_get_range, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Vector2i](abi)
	abi.free()
	return ret
}

func (self classTextServer) ShapedTextGetLineBreaksAdv(ctx Context, shaped RID, width PackedFloat32Array, start Int, once bool, break_flags TextServerLineBreakFlag) PackedInt32Array {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, shaped)
	frameSet[PackedFloat32Array](1, abi, width)
	frameSet[Int](2, abi, start)
	frameSet[bool](3, abi, once)
	frameSet[TextServerLineBreakFlag](4, abi, break_flags)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.TextServer.shaped_text_get_line_breaks_adv, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[[2]uintptr](abi)
	abi.free()
	return mmm.Make[API, PackedInt32Array, [2]uintptr](ctx, selfPtr.API, ret)
}

func (self classTextServer) ShapedTextGetLineBreaks(ctx Context, shaped RID, width Float, start Int, break_flags TextServerLineBreakFlag) PackedInt32Array {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, shaped)
	frameSet[Float](1, abi, width)
	frameSet[Int](2, abi, start)
	frameSet[TextServerLineBreakFlag](3, abi, break_flags)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.TextServer.shaped_text_get_line_breaks, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[[2]uintptr](abi)
	abi.free()
	return mmm.Make[API, PackedInt32Array, [2]uintptr](ctx, selfPtr.API, ret)
}

func (self classTextServer) ShapedTextGetWordBreaks(ctx Context, shaped RID, grapheme_flags TextServerGraphemeFlag) PackedInt32Array {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, shaped)
	frameSet[TextServerGraphemeFlag](1, abi, grapheme_flags)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.TextServer.shaped_text_get_word_breaks, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[[2]uintptr](abi)
	abi.free()
	return mmm.Make[API, PackedInt32Array, [2]uintptr](ctx, selfPtr.API, ret)
}

func (self classTextServer) ShapedTextGetTrimPos(shaped RID) Int {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, shaped)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.TextServer.shaped_text_get_trim_pos, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Int](abi)
	abi.free()
	return ret
}

func (self classTextServer) ShapedTextGetEllipsisPos(shaped RID) Int {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, shaped)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.TextServer.shaped_text_get_ellipsis_pos, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Int](abi)
	abi.free()
	return ret
}

func (self classTextServer) ShapedTextGetEllipsisGlyphs(shaped RID) ArrayOf[Dictionary] {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, shaped)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.TextServer.shaped_text_get_ellipsis_glyphs, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[ArrayOf[Dictionary]](abi)
	abi.free()
	return ret
}

func (self classTextServer) ShapedTextGetEllipsisGlyphCount(shaped RID) Int {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, shaped)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.TextServer.shaped_text_get_ellipsis_glyph_count, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Int](abi)
	abi.free()
	return ret
}

func (self classTextServer) ShapedTextOverrunTrimToWidth(shaped RID, width Float, overrun_trim_flags TextServerTextOverrunFlag) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, shaped)
	frameSet[Float](1, abi, width)
	frameSet[TextServerTextOverrunFlag](2, abi, overrun_trim_flags)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.TextServer.shaped_text_overrun_trim_to_width, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classTextServer) ShapedTextGetObjects(ctx Context, shaped RID) Array {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, shaped)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.TextServer.shaped_text_get_objects, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[uintptr](abi)
	abi.free()
	return mmm.Make[API, Array, uintptr](ctx, selfPtr.API, ret)
}

func (self classTextServer) ShapedTextGetObjectRect(shaped RID, key Variant) Rect2 {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, shaped)
	frameSet[Variant](1, abi, key)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.TextServer.shaped_text_get_object_rect, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Rect2](abi)
	abi.free()
	return ret
}

func (self classTextServer) ShapedTextGetSize(shaped RID) Vector2 {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, shaped)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.TextServer.shaped_text_get_size, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Vector2](abi)
	abi.free()
	return ret
}

func (self classTextServer) ShapedTextGetAscent(shaped RID) Float {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, shaped)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.TextServer.shaped_text_get_ascent, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Float](abi)
	abi.free()
	return ret
}

func (self classTextServer) ShapedTextGetDescent(shaped RID) Float {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, shaped)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.TextServer.shaped_text_get_descent, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Float](abi)
	abi.free()
	return ret
}

func (self classTextServer) ShapedTextGetWidth(shaped RID) Float {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, shaped)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.TextServer.shaped_text_get_width, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Float](abi)
	abi.free()
	return ret
}

func (self classTextServer) ShapedTextGetUnderlinePosition(shaped RID) Float {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, shaped)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.TextServer.shaped_text_get_underline_position, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Float](abi)
	abi.free()
	return ret
}

func (self classTextServer) ShapedTextGetUnderlineThickness(shaped RID) Float {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, shaped)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.TextServer.shaped_text_get_underline_thickness, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Float](abi)
	abi.free()
	return ret
}

func (self classTextServer) ShapedTextGetCarets(ctx Context, shaped RID, position Int) Dictionary {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, shaped)
	frameSet[Int](1, abi, position)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.TextServer.shaped_text_get_carets, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[uintptr](abi)
	abi.free()
	return mmm.Make[API, Dictionary, uintptr](ctx, selfPtr.API, ret)
}

func (self classTextServer) ShapedTextGetSelection(ctx Context, shaped RID, start Int, end Int) PackedVector2Array {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, shaped)
	frameSet[Int](1, abi, start)
	frameSet[Int](2, abi, end)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.TextServer.shaped_text_get_selection, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[[2]uintptr](abi)
	abi.free()
	return mmm.Make[API, PackedVector2Array, [2]uintptr](ctx, selfPtr.API, ret)
}

func (self classTextServer) ShapedTextHitTestGrapheme(shaped RID, coords Float) Int {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, shaped)
	frameSet[Float](1, abi, coords)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.TextServer.shaped_text_hit_test_grapheme, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Int](abi)
	abi.free()
	return ret
}

func (self classTextServer) ShapedTextHitTestPosition(shaped RID, coords Float) Int {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, shaped)
	frameSet[Float](1, abi, coords)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.TextServer.shaped_text_hit_test_position, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Int](abi)
	abi.free()
	return ret
}

func (self classTextServer) ShapedTextGetGraphemeBounds(shaped RID, pos Int) Vector2 {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, shaped)
	frameSet[Int](1, abi, pos)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.TextServer.shaped_text_get_grapheme_bounds, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Vector2](abi)
	abi.free()
	return ret
}

func (self classTextServer) ShapedTextNextGraphemePos(shaped RID, pos Int) Int {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, shaped)
	frameSet[Int](1, abi, pos)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.TextServer.shaped_text_next_grapheme_pos, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Int](abi)
	abi.free()
	return ret
}

func (self classTextServer) ShapedTextPrevGraphemePos(shaped RID, pos Int) Int {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, shaped)
	frameSet[Int](1, abi, pos)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.TextServer.shaped_text_prev_grapheme_pos, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Int](abi)
	abi.free()
	return ret
}

func (self classTextServer) ShapedTextGetCharacterBreaks(ctx Context, shaped RID) PackedInt32Array {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, shaped)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.TextServer.shaped_text_get_character_breaks, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[[2]uintptr](abi)
	abi.free()
	return mmm.Make[API, PackedInt32Array, [2]uintptr](ctx, selfPtr.API, ret)
}

func (self classTextServer) ShapedTextNextCharacterPos(shaped RID, pos Int) Int {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, shaped)
	frameSet[Int](1, abi, pos)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.TextServer.shaped_text_next_character_pos, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Int](abi)
	abi.free()
	return ret
}

func (self classTextServer) ShapedTextPrevCharacterPos(shaped RID, pos Int) Int {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, shaped)
	frameSet[Int](1, abi, pos)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.TextServer.shaped_text_prev_character_pos, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Int](abi)
	abi.free()
	return ret
}

func (self classTextServer) ShapedTextClosestCharacterPos(shaped RID, pos Int) Int {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, shaped)
	frameSet[Int](1, abi, pos)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.TextServer.shaped_text_closest_character_pos, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Int](abi)
	abi.free()
	return ret
}

func (self classTextServer) ShapedTextDraw(shaped RID, canvas RID, pos Vector2, clip_l Float, clip_r Float, color Color) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, shaped)
	frameSet[RID](1, abi, canvas)
	frameSet[Vector2](2, abi, pos)
	frameSet[Float](3, abi, clip_l)
	frameSet[Float](4, abi, clip_r)
	frameSet[Color](5, abi, color)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.TextServer.shaped_text_draw, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classTextServer) ShapedTextDrawOutline(shaped RID, canvas RID, pos Vector2, clip_l Float, clip_r Float, outline_size Int, color Color) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, shaped)
	frameSet[RID](1, abi, canvas)
	frameSet[Vector2](2, abi, pos)
	frameSet[Float](3, abi, clip_l)
	frameSet[Float](4, abi, clip_r)
	frameSet[Int](5, abi, outline_size)
	frameSet[Color](6, abi, color)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.TextServer.shaped_text_draw_outline, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classTextServer) ShapedTextGetDominantDirectionInRange(shaped RID, start Int, end Int) TextServerDirection {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, shaped)
	frameSet[Int](1, abi, start)
	frameSet[Int](2, abi, end)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.TextServer.shaped_text_get_dominant_direction_in_range, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[TextServerDirection](abi)
	abi.free()
	return ret
}

func (self classTextServer) FormatNumber(ctx Context, number String, language String) String {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[String](0, abi, number)
	frameSet[String](1, abi, language)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.TextServer.format_number, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[uintptr](abi)
	abi.free()
	return mmm.Make[API, String, uintptr](ctx, selfPtr.API, ret)
}

func (self classTextServer) ParseNumber(ctx Context, number String, language String) String {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[String](0, abi, number)
	frameSet[String](1, abi, language)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.TextServer.parse_number, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[uintptr](abi)
	abi.free()
	return mmm.Make[API, String, uintptr](ctx, selfPtr.API, ret)
}

func (self classTextServer) PercentSign(ctx Context, language String) String {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[String](0, abi, language)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.TextServer.percent_sign, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[uintptr](abi)
	abi.free()
	return mmm.Make[API, String, uintptr](ctx, selfPtr.API, ret)
}

func (self classTextServer) StringGetWordBreaks(ctx Context, s String, language String, chars_per_line Int) PackedInt32Array {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[String](0, abi, s)
	frameSet[String](1, abi, language)
	frameSet[Int](2, abi, chars_per_line)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.TextServer.string_get_word_breaks, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[[2]uintptr](abi)
	abi.free()
	return mmm.Make[API, PackedInt32Array, [2]uintptr](ctx, selfPtr.API, ret)
}

func (self classTextServer) StringGetCharacterBreaks(ctx Context, s String, language String) PackedInt32Array {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[String](0, abi, s)
	frameSet[String](1, abi, language)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.TextServer.string_get_character_breaks, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[[2]uintptr](abi)
	abi.free()
	return mmm.Make[API, PackedInt32Array, [2]uintptr](ctx, selfPtr.API, ret)
}

func (self classTextServer) IsConfusable(s String, dict PackedStringArray) Int {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[String](0, abi, s)
	frameSet[PackedStringArray](1, abi, dict)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.TextServer.is_confusable, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Int](abi)
	abi.free()
	return ret
}

func (self classTextServer) SpoofCheck(s String) bool {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[String](0, abi, s)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.TextServer.spoof_check, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self classTextServer) StripDiacritics(ctx Context, s String) String {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[String](0, abi, s)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.TextServer.strip_diacritics, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[uintptr](abi)
	abi.free()
	return mmm.Make[API, String, uintptr](ctx, selfPtr.API, ret)
}

func (self classTextServer) IsValidIdentifier(s String) bool {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[String](0, abi, s)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.TextServer.is_valid_identifier, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self classTextServer) StringToUpper(ctx Context, s String, language String) String {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[String](0, abi, s)
	frameSet[String](1, abi, language)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.TextServer.string_to_upper, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[uintptr](abi)
	abi.free()
	return mmm.Make[API, String, uintptr](ctx, selfPtr.API, ret)
}

func (self classTextServer) StringToLower(ctx Context, s String, language String) String {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[String](0, abi, s)
	frameSet[String](1, abi, language)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.TextServer.string_to_lower, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[uintptr](abi)
	abi.free()
	return mmm.Make[API, String, uintptr](ctx, selfPtr.API, ret)
}

func (self classTextServer) ParseStructuredText(parser_type TextServerStructuredTextParser, args Array, text String) ArrayOf[Vector3i] {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[TextServerStructuredTextParser](0, abi, parser_type)
	frameSet[Array](1, abi, args)
	frameSet[String](2, abi, text)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.TextServer.parse_structured_text, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[ArrayOf[Vector3i]](abi)
	abi.free()
	return ret
}

func (self classTextServer) virtual(name string) reflect.Value {
	switch name {
	default:
		return self.Super().virtual(name)
	}
}

type classTexture struct{ Class[classTexture, Resource] }

func (self classTexture) Resource() Resource { return *self.Super() }

func (self classTexture) RefCounted() RefCounted { return *self.Super().Super() }

func (self classTexture) Object() Object { return *self.Super().Super().Super() }

func (self classTexture) virtual(name string) reflect.Value {
	switch name {
	default:
		return self.Super().virtual(name)
	}
}

type classTexture2D struct{ Class[classTexture2D, Texture] }

func (self classTexture2D) Texture() Texture { return *self.Super() }

func (self classTexture2D) Resource() Resource { return *self.Super().Super() }

func (self classTexture2D) RefCounted() RefCounted { return *self.Super().Super().Super() }

func (self classTexture2D) Object() Object { return *self.Super().Super().Super().Super() }

func (classTexture2D) _get_width(impl func(ptr unsafe.Pointer, ctx Context) Int, api *API) (cb ExtensionClassCallVirtualFunc) {
	cb.Set(func(class cgo.Handle, p_args godotArgs, p_back godotBack) {
		ctx := newContext(api)
		self := reflect.ValueOf(class.Value()).UnsafePointer()
		ret := impl(self, ctx)
		ctx.Free()
		godotSet[Int](p_back, ret)
	})
	return
}

func (classTexture2D) _get_height(impl func(ptr unsafe.Pointer, ctx Context) Int, api *API) (cb ExtensionClassCallVirtualFunc) {
	cb.Set(func(class cgo.Handle, p_args godotArgs, p_back godotBack) {
		ctx := newContext(api)
		self := reflect.ValueOf(class.Value()).UnsafePointer()
		ret := impl(self, ctx)
		ctx.Free()
		godotSet[Int](p_back, ret)
	})
	return
}

func (classTexture2D) _is_pixel_opaque(impl func(ptr unsafe.Pointer, ctx Context, x Int, y Int) bool, api *API) (cb ExtensionClassCallVirtualFunc) {
	cb.Set(func(class cgo.Handle, p_args godotArgs, p_back godotBack) {
		ctx := newContext(api)
		var x = godotGet[Int](p_args, 0)
		var y = godotGet[Int](p_args, 1)
		self := reflect.ValueOf(class.Value()).UnsafePointer()
		ret := impl(self, ctx, x, y)
		ctx.Free()
		godotSet[bool](p_back, ret)
	})
	return
}

func (classTexture2D) _has_alpha(impl func(ptr unsafe.Pointer, ctx Context) bool, api *API) (cb ExtensionClassCallVirtualFunc) {
	cb.Set(func(class cgo.Handle, p_args godotArgs, p_back godotBack) {
		ctx := newContext(api)
		self := reflect.ValueOf(class.Value()).UnsafePointer()
		ret := impl(self, ctx)
		ctx.Free()
		godotSet[bool](p_back, ret)
	})
	return
}

func (classTexture2D) _draw(impl func(ptr unsafe.Pointer, ctx Context, to_canvas_item RID, pos Vector2, modulate Color, transpose bool), api *API) (cb ExtensionClassCallVirtualFunc) {
	cb.Set(func(class cgo.Handle, p_args godotArgs, p_back godotBack) {
		ctx := newContext(api)
		var to_canvas_item = godotGet[RID](p_args, 0)
		var pos = godotGet[Vector2](p_args, 1)
		var modulate = godotGet[Color](p_args, 2)
		var transpose = godotGet[bool](p_args, 3)
		self := reflect.ValueOf(class.Value()).UnsafePointer()
		impl(self, ctx, to_canvas_item, pos, modulate, transpose)
		ctx.Free()
	})
	return
}

func (classTexture2D) _draw_rect(impl func(ptr unsafe.Pointer, ctx Context, to_canvas_item RID, rect Rect2, tile bool, modulate Color, transpose bool), api *API) (cb ExtensionClassCallVirtualFunc) {
	cb.Set(func(class cgo.Handle, p_args godotArgs, p_back godotBack) {
		ctx := newContext(api)
		var to_canvas_item = godotGet[RID](p_args, 0)
		var rect = godotGet[Rect2](p_args, 1)
		var tile = godotGet[bool](p_args, 2)
		var modulate = godotGet[Color](p_args, 3)
		var transpose = godotGet[bool](p_args, 4)
		self := reflect.ValueOf(class.Value()).UnsafePointer()
		impl(self, ctx, to_canvas_item, rect, tile, modulate, transpose)
		ctx.Free()
	})
	return
}

func (classTexture2D) _draw_rect_region(impl func(ptr unsafe.Pointer, ctx Context, to_canvas_item RID, rect Rect2, src_rect Rect2, modulate Color, transpose bool, clip_uv bool), api *API) (cb ExtensionClassCallVirtualFunc) {
	cb.Set(func(class cgo.Handle, p_args godotArgs, p_back godotBack) {
		ctx := newContext(api)
		var to_canvas_item = godotGet[RID](p_args, 0)
		var rect = godotGet[Rect2](p_args, 1)
		var src_rect = godotGet[Rect2](p_args, 2)
		var modulate = godotGet[Color](p_args, 3)
		var transpose = godotGet[bool](p_args, 4)
		var clip_uv = godotGet[bool](p_args, 5)
		self := reflect.ValueOf(class.Value()).UnsafePointer()
		impl(self, ctx, to_canvas_item, rect, src_rect, modulate, transpose, clip_uv)
		ctx.Free()
	})
	return
}

func (self classTexture2D) GetWidth() Int {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Texture2D.get_width, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Int](abi)
	abi.free()
	return ret
}

func (self classTexture2D) GetHeight() Int {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Texture2D.get_height, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Int](abi)
	abi.free()
	return ret
}

func (self classTexture2D) GetSize() Vector2 {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Texture2D.get_size, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Vector2](abi)
	abi.free()
	return ret
}

func (self classTexture2D) HasAlpha() bool {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Texture2D.has_alpha, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self classTexture2D) Draw(canvas_item RID, position Vector2, modulate Color, transpose bool) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, canvas_item)
	frameSet[Vector2](1, abi, position)
	frameSet[Color](2, abi, modulate)
	frameSet[bool](3, abi, transpose)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Texture2D.draw, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classTexture2D) DrawRect(canvas_item RID, rect Rect2, tile bool, modulate Color, transpose bool) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, canvas_item)
	frameSet[Rect2](1, abi, rect)
	frameSet[bool](2, abi, tile)
	frameSet[Color](3, abi, modulate)
	frameSet[bool](4, abi, transpose)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Texture2D.draw_rect, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classTexture2D) DrawRectRegion(canvas_item RID, rect Rect2, src_rect Rect2, modulate Color, transpose bool, clip_uv bool) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, canvas_item)
	frameSet[Rect2](1, abi, rect)
	frameSet[Rect2](2, abi, src_rect)
	frameSet[Color](3, abi, modulate)
	frameSet[bool](4, abi, transpose)
	frameSet[bool](5, abi, clip_uv)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Texture2D.draw_rect_region, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classTexture2D) GetImage() Image {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Texture2D.get_image, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Image](abi)
	abi.free()
	return ret
}

func (self classTexture2D) CreatePlaceholder() Resource {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Texture2D.create_placeholder, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Resource](abi)
	abi.free()
	return ret
}

func (self classTexture2D) virtual(name string) reflect.Value {
	switch name {
	case "_get_width":
		return reflect.ValueOf(self._get_width)
	case "_get_height":
		return reflect.ValueOf(self._get_height)
	case "_is_pixel_opaque":
		return reflect.ValueOf(self._is_pixel_opaque)
	case "_has_alpha":
		return reflect.ValueOf(self._has_alpha)
	case "_draw":
		return reflect.ValueOf(self._draw)
	case "_draw_rect":
		return reflect.ValueOf(self._draw_rect)
	case "_draw_rect_region":
		return reflect.ValueOf(self._draw_rect_region)
	default:
		return self.Super().virtual(name)
	}
}

type classTheme struct{ Class[classTheme, Resource] }

func (self classTheme) Resource() Resource { return *self.Super() }

func (self classTheme) RefCounted() RefCounted { return *self.Super().Super() }

func (self classTheme) Object() Object { return *self.Super().Super().Super() }

func (self classTheme) SetIcon(name StringName, theme_type StringName, texture Texture2D) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[StringName](0, abi, name)
	frameSet[StringName](1, abi, theme_type)
	frameSet[Texture2D](2, abi, texture)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Theme.set_icon, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classTheme) GetIcon(name StringName, theme_type StringName) Texture2D {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[StringName](0, abi, name)
	frameSet[StringName](1, abi, theme_type)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Theme.get_icon, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Texture2D](abi)
	abi.free()
	return ret
}

func (self classTheme) HasIcon(name StringName, theme_type StringName) bool {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[StringName](0, abi, name)
	frameSet[StringName](1, abi, theme_type)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Theme.has_icon, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self classTheme) RenameIcon(old_name StringName, name StringName, theme_type StringName) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[StringName](0, abi, old_name)
	frameSet[StringName](1, abi, name)
	frameSet[StringName](2, abi, theme_type)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Theme.rename_icon, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classTheme) ClearIcon(name StringName, theme_type StringName) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[StringName](0, abi, name)
	frameSet[StringName](1, abi, theme_type)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Theme.clear_icon, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classTheme) GetIconList(ctx Context, theme_type String) PackedStringArray {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[String](0, abi, theme_type)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Theme.get_icon_list, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[[2]uintptr](abi)
	abi.free()
	return mmm.Make[API, PackedStringArray, [2]uintptr](ctx, selfPtr.API, ret)
}

func (self classTheme) GetIconTypeList(ctx Context) PackedStringArray {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Theme.get_icon_type_list, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[[2]uintptr](abi)
	abi.free()
	return mmm.Make[API, PackedStringArray, [2]uintptr](ctx, selfPtr.API, ret)
}

func (self classTheme) SetStylebox(name StringName, theme_type StringName, texture StyleBox) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[StringName](0, abi, name)
	frameSet[StringName](1, abi, theme_type)
	frameSet[StyleBox](2, abi, texture)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Theme.set_stylebox, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classTheme) GetStylebox(name StringName, theme_type StringName) StyleBox {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[StringName](0, abi, name)
	frameSet[StringName](1, abi, theme_type)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Theme.get_stylebox, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[StyleBox](abi)
	abi.free()
	return ret
}

func (self classTheme) HasStylebox(name StringName, theme_type StringName) bool {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[StringName](0, abi, name)
	frameSet[StringName](1, abi, theme_type)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Theme.has_stylebox, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self classTheme) RenameStylebox(old_name StringName, name StringName, theme_type StringName) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[StringName](0, abi, old_name)
	frameSet[StringName](1, abi, name)
	frameSet[StringName](2, abi, theme_type)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Theme.rename_stylebox, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classTheme) ClearStylebox(name StringName, theme_type StringName) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[StringName](0, abi, name)
	frameSet[StringName](1, abi, theme_type)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Theme.clear_stylebox, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classTheme) GetStyleboxList(ctx Context, theme_type String) PackedStringArray {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[String](0, abi, theme_type)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Theme.get_stylebox_list, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[[2]uintptr](abi)
	abi.free()
	return mmm.Make[API, PackedStringArray, [2]uintptr](ctx, selfPtr.API, ret)
}

func (self classTheme) GetStyleboxTypeList(ctx Context) PackedStringArray {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Theme.get_stylebox_type_list, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[[2]uintptr](abi)
	abi.free()
	return mmm.Make[API, PackedStringArray, [2]uintptr](ctx, selfPtr.API, ret)
}

func (self classTheme) SetFont(name StringName, theme_type StringName, font Font) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[StringName](0, abi, name)
	frameSet[StringName](1, abi, theme_type)
	frameSet[Font](2, abi, font)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Theme.set_font, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classTheme) GetFont(name StringName, theme_type StringName) Font {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[StringName](0, abi, name)
	frameSet[StringName](1, abi, theme_type)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Theme.get_font, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Font](abi)
	abi.free()
	return ret
}

func (self classTheme) HasFont(name StringName, theme_type StringName) bool {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[StringName](0, abi, name)
	frameSet[StringName](1, abi, theme_type)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Theme.has_font, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self classTheme) RenameFont(old_name StringName, name StringName, theme_type StringName) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[StringName](0, abi, old_name)
	frameSet[StringName](1, abi, name)
	frameSet[StringName](2, abi, theme_type)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Theme.rename_font, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classTheme) ClearFont(name StringName, theme_type StringName) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[StringName](0, abi, name)
	frameSet[StringName](1, abi, theme_type)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Theme.clear_font, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classTheme) GetFontList(ctx Context, theme_type String) PackedStringArray {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[String](0, abi, theme_type)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Theme.get_font_list, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[[2]uintptr](abi)
	abi.free()
	return mmm.Make[API, PackedStringArray, [2]uintptr](ctx, selfPtr.API, ret)
}

func (self classTheme) GetFontTypeList(ctx Context) PackedStringArray {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Theme.get_font_type_list, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[[2]uintptr](abi)
	abi.free()
	return mmm.Make[API, PackedStringArray, [2]uintptr](ctx, selfPtr.API, ret)
}

func (self classTheme) SetFontSize(name StringName, theme_type StringName, font_size Int) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[StringName](0, abi, name)
	frameSet[StringName](1, abi, theme_type)
	frameSet[Int](2, abi, font_size)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Theme.set_font_size, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classTheme) GetFontSize(name StringName, theme_type StringName) Int {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[StringName](0, abi, name)
	frameSet[StringName](1, abi, theme_type)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Theme.get_font_size, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Int](abi)
	abi.free()
	return ret
}

func (self classTheme) HasFontSize(name StringName, theme_type StringName) bool {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[StringName](0, abi, name)
	frameSet[StringName](1, abi, theme_type)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Theme.has_font_size, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self classTheme) RenameFontSize(old_name StringName, name StringName, theme_type StringName) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[StringName](0, abi, old_name)
	frameSet[StringName](1, abi, name)
	frameSet[StringName](2, abi, theme_type)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Theme.rename_font_size, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classTheme) ClearFontSize(name StringName, theme_type StringName) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[StringName](0, abi, name)
	frameSet[StringName](1, abi, theme_type)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Theme.clear_font_size, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classTheme) GetFontSizeList(ctx Context, theme_type String) PackedStringArray {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[String](0, abi, theme_type)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Theme.get_font_size_list, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[[2]uintptr](abi)
	abi.free()
	return mmm.Make[API, PackedStringArray, [2]uintptr](ctx, selfPtr.API, ret)
}

func (self classTheme) GetFontSizeTypeList(ctx Context) PackedStringArray {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Theme.get_font_size_type_list, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[[2]uintptr](abi)
	abi.free()
	return mmm.Make[API, PackedStringArray, [2]uintptr](ctx, selfPtr.API, ret)
}

func (self classTheme) SetColor(name StringName, theme_type StringName, color Color) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[StringName](0, abi, name)
	frameSet[StringName](1, abi, theme_type)
	frameSet[Color](2, abi, color)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Theme.set_color, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classTheme) GetColor(name StringName, theme_type StringName) Color {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[StringName](0, abi, name)
	frameSet[StringName](1, abi, theme_type)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Theme.get_color, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Color](abi)
	abi.free()
	return ret
}

func (self classTheme) HasColor(name StringName, theme_type StringName) bool {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[StringName](0, abi, name)
	frameSet[StringName](1, abi, theme_type)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Theme.has_color, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self classTheme) RenameColor(old_name StringName, name StringName, theme_type StringName) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[StringName](0, abi, old_name)
	frameSet[StringName](1, abi, name)
	frameSet[StringName](2, abi, theme_type)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Theme.rename_color, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classTheme) ClearColor(name StringName, theme_type StringName) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[StringName](0, abi, name)
	frameSet[StringName](1, abi, theme_type)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Theme.clear_color, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classTheme) GetColorList(ctx Context, theme_type String) PackedStringArray {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[String](0, abi, theme_type)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Theme.get_color_list, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[[2]uintptr](abi)
	abi.free()
	return mmm.Make[API, PackedStringArray, [2]uintptr](ctx, selfPtr.API, ret)
}

func (self classTheme) GetColorTypeList(ctx Context) PackedStringArray {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Theme.get_color_type_list, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[[2]uintptr](abi)
	abi.free()
	return mmm.Make[API, PackedStringArray, [2]uintptr](ctx, selfPtr.API, ret)
}

func (self classTheme) SetConstant(name StringName, theme_type StringName, constant Int) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[StringName](0, abi, name)
	frameSet[StringName](1, abi, theme_type)
	frameSet[Int](2, abi, constant)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Theme.set_constant, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classTheme) GetConstant(name StringName, theme_type StringName) Int {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[StringName](0, abi, name)
	frameSet[StringName](1, abi, theme_type)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Theme.get_constant, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Int](abi)
	abi.free()
	return ret
}

func (self classTheme) HasConstant(name StringName, theme_type StringName) bool {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[StringName](0, abi, name)
	frameSet[StringName](1, abi, theme_type)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Theme.has_constant, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self classTheme) RenameConstant(old_name StringName, name StringName, theme_type StringName) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[StringName](0, abi, old_name)
	frameSet[StringName](1, abi, name)
	frameSet[StringName](2, abi, theme_type)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Theme.rename_constant, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classTheme) ClearConstant(name StringName, theme_type StringName) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[StringName](0, abi, name)
	frameSet[StringName](1, abi, theme_type)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Theme.clear_constant, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classTheme) GetConstantList(ctx Context, theme_type String) PackedStringArray {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[String](0, abi, theme_type)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Theme.get_constant_list, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[[2]uintptr](abi)
	abi.free()
	return mmm.Make[API, PackedStringArray, [2]uintptr](ctx, selfPtr.API, ret)
}

func (self classTheme) GetConstantTypeList(ctx Context) PackedStringArray {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Theme.get_constant_type_list, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[[2]uintptr](abi)
	abi.free()
	return mmm.Make[API, PackedStringArray, [2]uintptr](ctx, selfPtr.API, ret)
}

func (self classTheme) SetDefaultBaseScale(base_scale Float) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Float](0, abi, base_scale)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Theme.set_default_base_scale, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classTheme) GetDefaultBaseScale() Float {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Theme.get_default_base_scale, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Float](abi)
	abi.free()
	return ret
}

func (self classTheme) HasDefaultBaseScale() bool {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Theme.has_default_base_scale, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self classTheme) SetDefaultFont(font Font) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Font](0, abi, font)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Theme.set_default_font, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classTheme) GetDefaultFont() Font {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Theme.get_default_font, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Font](abi)
	abi.free()
	return ret
}

func (self classTheme) HasDefaultFont() bool {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Theme.has_default_font, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self classTheme) SetDefaultFontSize(font_size Int) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Int](0, abi, font_size)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Theme.set_default_font_size, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classTheme) GetDefaultFontSize() Int {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Theme.get_default_font_size, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Int](abi)
	abi.free()
	return ret
}

func (self classTheme) HasDefaultFontSize() bool {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Theme.has_default_font_size, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self classTheme) SetThemeItem(data_type ThemeDataType, name StringName, theme_type StringName, value Variant) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[ThemeDataType](0, abi, data_type)
	frameSet[StringName](1, abi, name)
	frameSet[StringName](2, abi, theme_type)
	frameSet[Variant](3, abi, value)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Theme.set_theme_item, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classTheme) GetThemeItem(ctx Context, data_type ThemeDataType, name StringName, theme_type StringName) Variant {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[ThemeDataType](0, abi, data_type)
	frameSet[StringName](1, abi, name)
	frameSet[StringName](2, abi, theme_type)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Theme.get_theme_item, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[[3]uintptr](abi)
	abi.free()
	return mmm.Make[API, Variant, [3]uintptr](ctx, selfPtr.API, ret)
}

func (self classTheme) HasThemeItem(data_type ThemeDataType, name StringName, theme_type StringName) bool {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[ThemeDataType](0, abi, data_type)
	frameSet[StringName](1, abi, name)
	frameSet[StringName](2, abi, theme_type)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Theme.has_theme_item, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self classTheme) RenameThemeItem(data_type ThemeDataType, old_name StringName, name StringName, theme_type StringName) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[ThemeDataType](0, abi, data_type)
	frameSet[StringName](1, abi, old_name)
	frameSet[StringName](2, abi, name)
	frameSet[StringName](3, abi, theme_type)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Theme.rename_theme_item, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classTheme) ClearThemeItem(data_type ThemeDataType, name StringName, theme_type StringName) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[ThemeDataType](0, abi, data_type)
	frameSet[StringName](1, abi, name)
	frameSet[StringName](2, abi, theme_type)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Theme.clear_theme_item, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classTheme) GetThemeItemList(ctx Context, data_type ThemeDataType, theme_type String) PackedStringArray {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[ThemeDataType](0, abi, data_type)
	frameSet[String](1, abi, theme_type)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Theme.get_theme_item_list, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[[2]uintptr](abi)
	abi.free()
	return mmm.Make[API, PackedStringArray, [2]uintptr](ctx, selfPtr.API, ret)
}

func (self classTheme) GetThemeItemTypeList(ctx Context, data_type ThemeDataType) PackedStringArray {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[ThemeDataType](0, abi, data_type)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Theme.get_theme_item_type_list, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[[2]uintptr](abi)
	abi.free()
	return mmm.Make[API, PackedStringArray, [2]uintptr](ctx, selfPtr.API, ret)
}

func (self classTheme) SetTypeVariation(theme_type StringName, base_type StringName) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[StringName](0, abi, theme_type)
	frameSet[StringName](1, abi, base_type)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Theme.set_type_variation, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classTheme) IsTypeVariation(theme_type StringName, base_type StringName) bool {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[StringName](0, abi, theme_type)
	frameSet[StringName](1, abi, base_type)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Theme.is_type_variation, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self classTheme) ClearTypeVariation(theme_type StringName) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[StringName](0, abi, theme_type)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Theme.clear_type_variation, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classTheme) GetTypeVariationBase(ctx Context, theme_type StringName) StringName {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[StringName](0, abi, theme_type)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Theme.get_type_variation_base, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[uintptr](abi)
	abi.free()
	return mmm.Make[API, StringName, uintptr](ctx, selfPtr.API, ret)
}

func (self classTheme) GetTypeVariationList(ctx Context, base_type StringName) PackedStringArray {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[StringName](0, abi, base_type)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Theme.get_type_variation_list, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[[2]uintptr](abi)
	abi.free()
	return mmm.Make[API, PackedStringArray, [2]uintptr](ctx, selfPtr.API, ret)
}

func (self classTheme) AddType(theme_type StringName) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[StringName](0, abi, theme_type)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Theme.add_type, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classTheme) RemoveType(theme_type StringName) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[StringName](0, abi, theme_type)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Theme.remove_type, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classTheme) GetTypeList(ctx Context) PackedStringArray {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Theme.get_type_list, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[[2]uintptr](abi)
	abi.free()
	return mmm.Make[API, PackedStringArray, [2]uintptr](ctx, selfPtr.API, ret)
}

func (self classTheme) MergeWith(other Theme) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Theme](0, abi, other)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Theme.merge_with, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classTheme) Clear() {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Theme.clear, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classTheme) virtual(name string) reflect.Value {
	switch name {
	default:
		return self.Super().virtual(name)
	}
}

type classTriangleMesh struct {
	Class[classTriangleMesh, RefCounted]
}

func (self classTriangleMesh) RefCounted() RefCounted { return *self.Super() }

func (self classTriangleMesh) Object() Object { return *self.Super().Super() }

func (self classTriangleMesh) virtual(name string) reflect.Value {
	switch name {
	default:
		return self.Super().virtual(name)
	}
}

type classTween struct{ Class[classTween, RefCounted] }

func (self classTween) RefCounted() RefCounted { return *self.Super() }

func (self classTween) Object() Object { return *self.Super().Super() }

func (self classTween) TweenProperty(object Object, property NodePath, final_val Variant, duration Float) PropertyTweener {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Object](0, abi, object)
	frameSet[NodePath](1, abi, property)
	frameSet[Variant](2, abi, final_val)
	frameSet[Float](3, abi, duration)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Tween.tween_property, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[PropertyTweener](abi)
	abi.free()
	return ret
}

func (self classTween) TweenInterval(time Float) IntervalTweener {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Float](0, abi, time)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Tween.tween_interval, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[IntervalTweener](abi)
	abi.free()
	return ret
}

func (self classTween) TweenCallback(callback Callable) CallbackTweener {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Callable](0, abi, callback)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Tween.tween_callback, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[CallbackTweener](abi)
	abi.free()
	return ret
}

func (self classTween) TweenMethod(method Callable, from Variant, to Variant, duration Float) MethodTweener {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Callable](0, abi, method)
	frameSet[Variant](1, abi, from)
	frameSet[Variant](2, abi, to)
	frameSet[Float](3, abi, duration)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Tween.tween_method, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[MethodTweener](abi)
	abi.free()
	return ret
}

func (self classTween) CustomStep(delta Float) bool {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Float](0, abi, delta)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Tween.custom_step, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self classTween) Stop() {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Tween.stop, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classTween) Pause() {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Tween.pause, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classTween) Play() {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Tween.play, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classTween) Kill() {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Tween.kill, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classTween) GetTotalElapsedTime() Float {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Tween.get_total_elapsed_time, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Float](abi)
	abi.free()
	return ret
}

func (self classTween) IsRunning() bool {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Tween.is_running, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self classTween) IsValid() bool {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Tween.is_valid, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self classTween) BindNode(node Node) Tween {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Node](0, abi, node)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Tween.bind_node, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Tween](abi)
	abi.free()
	return ret
}

func (self classTween) SetProcessMode(mode TweenTweenProcessMode) Tween {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[TweenTweenProcessMode](0, abi, mode)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Tween.set_process_mode, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Tween](abi)
	abi.free()
	return ret
}

func (self classTween) SetPauseMode(mode TweenTweenPauseMode) Tween {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[TweenTweenPauseMode](0, abi, mode)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Tween.set_pause_mode, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Tween](abi)
	abi.free()
	return ret
}

func (self classTween) SetParallel(parallel bool) Tween {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[bool](0, abi, parallel)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Tween.set_parallel, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Tween](abi)
	abi.free()
	return ret
}

func (self classTween) SetLoops(loops Int) Tween {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Int](0, abi, loops)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Tween.set_loops, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Tween](abi)
	abi.free()
	return ret
}

func (self classTween) GetLoopsLeft() Int {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Tween.get_loops_left, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Int](abi)
	abi.free()
	return ret
}

func (self classTween) SetSpeedScale(speed Float) Tween {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Float](0, abi, speed)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Tween.set_speed_scale, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Tween](abi)
	abi.free()
	return ret
}

func (self classTween) SetTrans(trans TweenTransitionType) Tween {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[TweenTransitionType](0, abi, trans)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Tween.set_trans, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Tween](abi)
	abi.free()
	return ret
}

func (self classTween) SetEase(ease TweenEaseType) Tween {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[TweenEaseType](0, abi, ease)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Tween.set_ease, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Tween](abi)
	abi.free()
	return ret
}

func (self classTween) Parallel() Tween {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Tween.parallel, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Tween](abi)
	abi.free()
	return ret
}

func (self classTween) Chain() Tween {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Tween.chain, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Tween](abi)
	abi.free()
	return ret
}

func (self classTween) InterpolateValue(ctx Context, initial_value Variant, delta_value Variant, elapsed_time Float, duration Float, trans_type TweenTransitionType, ease_type TweenEaseType) Variant {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Variant](0, abi, initial_value)
	frameSet[Variant](1, abi, delta_value)
	frameSet[Float](2, abi, elapsed_time)
	frameSet[Float](3, abi, duration)
	frameSet[TweenTransitionType](4, abi, trans_type)
	frameSet[TweenEaseType](5, abi, ease_type)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Tween.interpolate_value, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[[3]uintptr](abi)
	abi.free()
	return mmm.Make[API, Variant, [3]uintptr](ctx, selfPtr.API, ret)
}

func (self classTween) virtual(name string) reflect.Value {
	switch name {
	default:
		return self.Super().virtual(name)
	}
}

type classTweener struct {
	Class[classTweener, RefCounted]
}

func (self classTweener) RefCounted() RefCounted { return *self.Super() }

func (self classTweener) Object() Object { return *self.Super().Super() }

func (self classTweener) virtual(name string) reflect.Value {
	switch name {
	default:
		return self.Super().virtual(name)
	}
}

type classViewport struct{ Class[classViewport, Node] }

func (self classViewport) Node() Node { return *self.Super() }

func (self classViewport) Object() Object { return *self.Super().Super() }

func (self classViewport) SetWorld2d(world_2d World2D) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[World2D](0, abi, world_2d)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Viewport.set_world_2d, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classViewport) GetWorld2d() World2D {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Viewport.get_world_2d, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[World2D](abi)
	abi.free()
	return ret
}

func (self classViewport) FindWorld2d() World2D {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Viewport.find_world_2d, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[World2D](abi)
	abi.free()
	return ret
}

func (self classViewport) SetCanvasTransform(xform Transform2D) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Transform2D](0, abi, xform)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Viewport.set_canvas_transform, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classViewport) GetCanvasTransform() Transform2D {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Viewport.get_canvas_transform, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Transform2D](abi)
	abi.free()
	return ret
}

func (self classViewport) SetGlobalCanvasTransform(xform Transform2D) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Transform2D](0, abi, xform)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Viewport.set_global_canvas_transform, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classViewport) GetGlobalCanvasTransform() Transform2D {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Viewport.get_global_canvas_transform, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Transform2D](abi)
	abi.free()
	return ret
}

func (self classViewport) GetFinalTransform() Transform2D {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Viewport.get_final_transform, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Transform2D](abi)
	abi.free()
	return ret
}

func (self classViewport) GetScreenTransform() Transform2D {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Viewport.get_screen_transform, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Transform2D](abi)
	abi.free()
	return ret
}

func (self classViewport) GetVisibleRect() Rect2 {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Viewport.get_visible_rect, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Rect2](abi)
	abi.free()
	return ret
}

func (self classViewport) SetTransparentBackground(enable bool) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[bool](0, abi, enable)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Viewport.set_transparent_background, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classViewport) HasTransparentBackground() bool {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Viewport.has_transparent_background, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self classViewport) SetUseHdr2d(enable bool) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[bool](0, abi, enable)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Viewport.set_use_hdr_2d, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classViewport) IsUsingHdr2d() bool {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Viewport.is_using_hdr_2d, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self classViewport) SetMsaa2d(msaa ViewportMSAA) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[ViewportMSAA](0, abi, msaa)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Viewport.set_msaa_2d, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classViewport) GetMsaa2d() ViewportMSAA {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Viewport.get_msaa_2d, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[ViewportMSAA](abi)
	abi.free()
	return ret
}

func (self classViewport) SetMsaa3d(msaa ViewportMSAA) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[ViewportMSAA](0, abi, msaa)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Viewport.set_msaa_3d, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classViewport) GetMsaa3d() ViewportMSAA {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Viewport.get_msaa_3d, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[ViewportMSAA](abi)
	abi.free()
	return ret
}

func (self classViewport) SetScreenSpaceAa(screen_space_aa ViewportScreenSpaceAA) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[ViewportScreenSpaceAA](0, abi, screen_space_aa)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Viewport.set_screen_space_aa, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classViewport) GetScreenSpaceAa() ViewportScreenSpaceAA {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Viewport.get_screen_space_aa, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[ViewportScreenSpaceAA](abi)
	abi.free()
	return ret
}

func (self classViewport) SetUseTaa(enable bool) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[bool](0, abi, enable)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Viewport.set_use_taa, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classViewport) IsUsingTaa() bool {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Viewport.is_using_taa, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self classViewport) SetUseDebanding(enable bool) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[bool](0, abi, enable)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Viewport.set_use_debanding, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classViewport) IsUsingDebanding() bool {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Viewport.is_using_debanding, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self classViewport) SetUseOcclusionCulling(enable bool) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[bool](0, abi, enable)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Viewport.set_use_occlusion_culling, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classViewport) IsUsingOcclusionCulling() bool {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Viewport.is_using_occlusion_culling, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self classViewport) SetDebugDraw(debug_draw ViewportDebugDraw) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[ViewportDebugDraw](0, abi, debug_draw)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Viewport.set_debug_draw, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classViewport) GetDebugDraw() ViewportDebugDraw {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Viewport.get_debug_draw, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[ViewportDebugDraw](abi)
	abi.free()
	return ret
}

func (self classViewport) GetRenderInfo(atype ViewportRenderInfoType, info ViewportRenderInfo) Int {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[ViewportRenderInfoType](0, abi, atype)
	frameSet[ViewportRenderInfo](1, abi, info)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Viewport.get_render_info, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Int](abi)
	abi.free()
	return ret
}

func (self classViewport) GetTexture() ViewportTexture {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Viewport.get_texture, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[ViewportTexture](abi)
	abi.free()
	return ret
}

func (self classViewport) SetPhysicsObjectPicking(enable bool) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[bool](0, abi, enable)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Viewport.set_physics_object_picking, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classViewport) GetPhysicsObjectPicking() bool {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Viewport.get_physics_object_picking, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self classViewport) SetPhysicsObjectPickingSort(enable bool) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[bool](0, abi, enable)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Viewport.set_physics_object_picking_sort, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classViewport) GetPhysicsObjectPickingSort() bool {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Viewport.get_physics_object_picking_sort, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self classViewport) GetViewportRid() RID {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Viewport.get_viewport_rid, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[RID](abi)
	abi.free()
	return ret
}

func (self classViewport) PushTextInput(text String) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[String](0, abi, text)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Viewport.push_text_input, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classViewport) PushInput(event InputEvent, in_local_coords bool) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[InputEvent](0, abi, event)
	frameSet[bool](1, abi, in_local_coords)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Viewport.push_input, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classViewport) PushUnhandledInput(event InputEvent, in_local_coords bool) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[InputEvent](0, abi, event)
	frameSet[bool](1, abi, in_local_coords)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Viewport.push_unhandled_input, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classViewport) GetCamera2d() Camera2D {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Viewport.get_camera_2d, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Camera2D](abi)
	abi.free()
	return ret
}

func (self classViewport) SetAsAudioListener2d(enable bool) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[bool](0, abi, enable)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Viewport.set_as_audio_listener_2d, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classViewport) IsAudioListener2d() bool {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Viewport.is_audio_listener_2d, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self classViewport) GetMousePosition() Vector2 {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Viewport.get_mouse_position, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Vector2](abi)
	abi.free()
	return ret
}

func (self classViewport) WarpMouse(position Vector2) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Vector2](0, abi, position)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Viewport.warp_mouse, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classViewport) UpdateMouseCursorState() {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Viewport.update_mouse_cursor_state, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classViewport) GuiGetDragData(ctx Context) Variant {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Viewport.gui_get_drag_data, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[[3]uintptr](abi)
	abi.free()
	return mmm.Make[API, Variant, [3]uintptr](ctx, selfPtr.API, ret)
}

func (self classViewport) GuiIsDragging() bool {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Viewport.gui_is_dragging, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self classViewport) GuiIsDragSuccessful() bool {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Viewport.gui_is_drag_successful, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self classViewport) GuiReleaseFocus() {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Viewport.gui_release_focus, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classViewport) GuiGetFocusOwner() Control {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Viewport.gui_get_focus_owner, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Control](abi)
	abi.free()
	return ret
}

func (self classViewport) GuiGetHoveredControl() Control {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Viewport.gui_get_hovered_control, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Control](abi)
	abi.free()
	return ret
}

func (self classViewport) SetDisableInput(disable bool) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[bool](0, abi, disable)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Viewport.set_disable_input, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classViewport) IsInputDisabled() bool {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Viewport.is_input_disabled, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self classViewport) SetPositionalShadowAtlasSize(size Int) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Int](0, abi, size)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Viewport.set_positional_shadow_atlas_size, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classViewport) GetPositionalShadowAtlasSize() Int {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Viewport.get_positional_shadow_atlas_size, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Int](abi)
	abi.free()
	return ret
}

func (self classViewport) SetPositionalShadowAtlas16Bits(enable bool) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[bool](0, abi, enable)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Viewport.set_positional_shadow_atlas_16_bits, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classViewport) GetPositionalShadowAtlas16Bits() bool {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Viewport.get_positional_shadow_atlas_16_bits, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self classViewport) SetSnapControlsToPixels(enabled bool) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[bool](0, abi, enabled)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Viewport.set_snap_controls_to_pixels, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classViewport) IsSnapControlsToPixelsEnabled() bool {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Viewport.is_snap_controls_to_pixels_enabled, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self classViewport) SetSnap2dTransformsToPixel(enabled bool) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[bool](0, abi, enabled)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Viewport.set_snap_2d_transforms_to_pixel, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classViewport) IsSnap2dTransformsToPixelEnabled() bool {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Viewport.is_snap_2d_transforms_to_pixel_enabled, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self classViewport) SetSnap2dVerticesToPixel(enabled bool) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[bool](0, abi, enabled)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Viewport.set_snap_2d_vertices_to_pixel, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classViewport) IsSnap2dVerticesToPixelEnabled() bool {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Viewport.is_snap_2d_vertices_to_pixel_enabled, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self classViewport) SetPositionalShadowAtlasQuadrantSubdiv(quadrant Int, subdiv ViewportPositionalShadowAtlasQuadrantSubdiv) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Int](0, abi, quadrant)
	frameSet[ViewportPositionalShadowAtlasQuadrantSubdiv](1, abi, subdiv)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Viewport.set_positional_shadow_atlas_quadrant_subdiv, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classViewport) GetPositionalShadowAtlasQuadrantSubdiv(quadrant Int) ViewportPositionalShadowAtlasQuadrantSubdiv {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Int](0, abi, quadrant)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Viewport.get_positional_shadow_atlas_quadrant_subdiv, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[ViewportPositionalShadowAtlasQuadrantSubdiv](abi)
	abi.free()
	return ret
}

func (self classViewport) SetInputAsHandled() {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Viewport.set_input_as_handled, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classViewport) IsInputHandled() bool {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Viewport.is_input_handled, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self classViewport) SetHandleInputLocally(enable bool) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[bool](0, abi, enable)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Viewport.set_handle_input_locally, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classViewport) IsHandlingInputLocally() bool {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Viewport.is_handling_input_locally, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self classViewport) SetDefaultCanvasItemTextureFilter(mode ViewportDefaultCanvasItemTextureFilter) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[ViewportDefaultCanvasItemTextureFilter](0, abi, mode)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Viewport.set_default_canvas_item_texture_filter, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classViewport) GetDefaultCanvasItemTextureFilter() ViewportDefaultCanvasItemTextureFilter {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Viewport.get_default_canvas_item_texture_filter, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[ViewportDefaultCanvasItemTextureFilter](abi)
	abi.free()
	return ret
}

func (self classViewport) SetEmbeddingSubwindows(enable bool) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[bool](0, abi, enable)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Viewport.set_embedding_subwindows, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classViewport) IsEmbeddingSubwindows() bool {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Viewport.is_embedding_subwindows, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self classViewport) GetEmbeddedSubwindows() ArrayOf[Window] {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Viewport.get_embedded_subwindows, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[ArrayOf[Window]](abi)
	abi.free()
	return ret
}

func (self classViewport) SetCanvasCullMask(mask Int) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Int](0, abi, mask)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Viewport.set_canvas_cull_mask, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classViewport) GetCanvasCullMask() Int {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Viewport.get_canvas_cull_mask, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Int](abi)
	abi.free()
	return ret
}

func (self classViewport) SetCanvasCullMaskBit(layer Int, enable bool) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Int](0, abi, layer)
	frameSet[bool](1, abi, enable)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Viewport.set_canvas_cull_mask_bit, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classViewport) GetCanvasCullMaskBit(layer Int) bool {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Int](0, abi, layer)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Viewport.get_canvas_cull_mask_bit, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self classViewport) SetDefaultCanvasItemTextureRepeat(mode ViewportDefaultCanvasItemTextureRepeat) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[ViewportDefaultCanvasItemTextureRepeat](0, abi, mode)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Viewport.set_default_canvas_item_texture_repeat, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classViewport) GetDefaultCanvasItemTextureRepeat() ViewportDefaultCanvasItemTextureRepeat {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Viewport.get_default_canvas_item_texture_repeat, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[ViewportDefaultCanvasItemTextureRepeat](abi)
	abi.free()
	return ret
}

func (self classViewport) SetSdfOversize(oversize ViewportSDFOversize) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[ViewportSDFOversize](0, abi, oversize)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Viewport.set_sdf_oversize, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classViewport) GetSdfOversize() ViewportSDFOversize {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Viewport.get_sdf_oversize, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[ViewportSDFOversize](abi)
	abi.free()
	return ret
}

func (self classViewport) SetSdfScale(scale ViewportSDFScale) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[ViewportSDFScale](0, abi, scale)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Viewport.set_sdf_scale, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classViewport) GetSdfScale() ViewportSDFScale {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Viewport.get_sdf_scale, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[ViewportSDFScale](abi)
	abi.free()
	return ret
}

func (self classViewport) SetMeshLodThreshold(pixels Float) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Float](0, abi, pixels)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Viewport.set_mesh_lod_threshold, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classViewport) GetMeshLodThreshold() Float {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Viewport.get_mesh_lod_threshold, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Float](abi)
	abi.free()
	return ret
}

func (self classViewport) SetWorld3d(world_3d World3D) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[World3D](0, abi, world_3d)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Viewport.set_world_3d, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classViewport) GetWorld3d() World3D {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Viewport.get_world_3d, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[World3D](abi)
	abi.free()
	return ret
}

func (self classViewport) FindWorld3d() World3D {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Viewport.find_world_3d, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[World3D](abi)
	abi.free()
	return ret
}

func (self classViewport) SetUseOwnWorld3d(enable bool) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[bool](0, abi, enable)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Viewport.set_use_own_world_3d, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classViewport) IsUsingOwnWorld3d() bool {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Viewport.is_using_own_world_3d, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self classViewport) GetCamera3d() Camera3D {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Viewport.get_camera_3d, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Camera3D](abi)
	abi.free()
	return ret
}

func (self classViewport) SetAsAudioListener3d(enable bool) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[bool](0, abi, enable)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Viewport.set_as_audio_listener_3d, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classViewport) IsAudioListener3d() bool {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Viewport.is_audio_listener_3d, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self classViewport) SetDisable3d(disable bool) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[bool](0, abi, disable)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Viewport.set_disable_3d, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classViewport) Is3dDisabled() bool {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Viewport.is_3d_disabled, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self classViewport) SetUseXr(use bool) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[bool](0, abi, use)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Viewport.set_use_xr, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classViewport) IsUsingXr() bool {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Viewport.is_using_xr, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self classViewport) SetScaling3dMode(scaling_3d_mode ViewportScaling3DMode) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[ViewportScaling3DMode](0, abi, scaling_3d_mode)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Viewport.set_scaling_3d_mode, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classViewport) GetScaling3dMode() ViewportScaling3DMode {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Viewport.get_scaling_3d_mode, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[ViewportScaling3DMode](abi)
	abi.free()
	return ret
}

func (self classViewport) SetScaling3dScale(scale Float) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Float](0, abi, scale)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Viewport.set_scaling_3d_scale, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classViewport) GetScaling3dScale() Float {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Viewport.get_scaling_3d_scale, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Float](abi)
	abi.free()
	return ret
}

func (self classViewport) SetFsrSharpness(fsr_sharpness Float) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Float](0, abi, fsr_sharpness)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Viewport.set_fsr_sharpness, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classViewport) GetFsrSharpness() Float {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Viewport.get_fsr_sharpness, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Float](abi)
	abi.free()
	return ret
}

func (self classViewport) SetTextureMipmapBias(texture_mipmap_bias Float) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Float](0, abi, texture_mipmap_bias)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Viewport.set_texture_mipmap_bias, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classViewport) GetTextureMipmapBias() Float {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Viewport.get_texture_mipmap_bias, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Float](abi)
	abi.free()
	return ret
}

func (self classViewport) SetVrsMode(mode ViewportVRSMode) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[ViewportVRSMode](0, abi, mode)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Viewport.set_vrs_mode, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classViewport) GetVrsMode() ViewportVRSMode {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Viewport.get_vrs_mode, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[ViewportVRSMode](abi)
	abi.free()
	return ret
}

func (self classViewport) SetVrsTexture(texture Texture2D) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Texture2D](0, abi, texture)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Viewport.set_vrs_texture, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classViewport) GetVrsTexture() Texture2D {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Viewport.get_vrs_texture, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Texture2D](abi)
	abi.free()
	return ret
}

func (self classViewport) virtual(name string) reflect.Value {
	switch name {
	default:
		return self.Super().virtual(name)
	}
}

type classViewportTexture struct {
	Class[classViewportTexture, Texture2D]
}

func (self classViewportTexture) Texture2D() Texture2D { return *self.Super() }

func (self classViewportTexture) Texture() Texture { return *self.Super().Super() }

func (self classViewportTexture) Resource() Resource { return *self.Super().Super().Super() }

func (self classViewportTexture) RefCounted() RefCounted {
	return *self.Super().Super().Super().Super()
}

func (self classViewportTexture) Object() Object {
	return *self.Super().Super().Super().Super().Super()
}

func (self classViewportTexture) SetViewportPathInScene(path NodePath) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[NodePath](0, abi, path)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.ViewportTexture.set_viewport_path_in_scene, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classViewportTexture) GetViewportPathInScene(ctx Context) NodePath {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.ViewportTexture.get_viewport_path_in_scene, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[uintptr](abi)
	abi.free()
	return mmm.Make[API, NodePath, uintptr](ctx, selfPtr.API, ret)
}

func (self classViewportTexture) virtual(name string) reflect.Value {
	switch name {
	default:
		return self.Super().virtual(name)
	}
}

type classWindow struct{ Class[classWindow, Viewport] }

func (self classWindow) Viewport() Viewport { return *self.Super() }

func (self classWindow) Node() Node { return *self.Super().Super() }

func (self classWindow) Object() Object { return *self.Super().Super().Super() }

func (classWindow) _get_contents_minimum_size(impl func(ptr unsafe.Pointer, ctx Context) Vector2, api *API) (cb ExtensionClassCallVirtualFunc) {
	cb.Set(func(class cgo.Handle, p_args godotArgs, p_back godotBack) {
		ctx := newContext(api)
		self := reflect.ValueOf(class.Value()).UnsafePointer()
		ret := impl(self, ctx)
		ctx.Free()
		godotSet[Vector2](p_back, ret)
	})
	return
}

func (self classWindow) SetTitle(title String) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[String](0, abi, title)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Window.set_title, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classWindow) GetTitle(ctx Context) String {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Window.get_title, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[uintptr](abi)
	abi.free()
	return mmm.Make[API, String, uintptr](ctx, selfPtr.API, ret)
}

func (self classWindow) GetWindowId() Int {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Window.get_window_id, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Int](abi)
	abi.free()
	return ret
}

func (self classWindow) SetInitialPosition(initial_position WindowWindowInitialPosition) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[WindowWindowInitialPosition](0, abi, initial_position)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Window.set_initial_position, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classWindow) GetInitialPosition() WindowWindowInitialPosition {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Window.get_initial_position, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[WindowWindowInitialPosition](abi)
	abi.free()
	return ret
}

func (self classWindow) SetCurrentScreen(index Int) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Int](0, abi, index)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Window.set_current_screen, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classWindow) GetCurrentScreen() Int {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Window.get_current_screen, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Int](abi)
	abi.free()
	return ret
}

func (self classWindow) SetPosition(position Vector2i) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Vector2i](0, abi, position)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Window.set_position, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classWindow) GetPosition() Vector2i {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Window.get_position, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Vector2i](abi)
	abi.free()
	return ret
}

func (self classWindow) MoveToCenter() {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Window.move_to_center, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classWindow) SetSize(size Vector2i) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Vector2i](0, abi, size)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Window.set_size, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classWindow) GetSize() Vector2i {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Window.get_size, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Vector2i](abi)
	abi.free()
	return ret
}

func (self classWindow) ResetSize() {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Window.reset_size, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classWindow) GetPositionWithDecorations() Vector2i {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Window.get_position_with_decorations, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Vector2i](abi)
	abi.free()
	return ret
}

func (self classWindow) GetSizeWithDecorations() Vector2i {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Window.get_size_with_decorations, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Vector2i](abi)
	abi.free()
	return ret
}

func (self classWindow) SetMaxSize(max_size Vector2i) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Vector2i](0, abi, max_size)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Window.set_max_size, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classWindow) GetMaxSize() Vector2i {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Window.get_max_size, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Vector2i](abi)
	abi.free()
	return ret
}

func (self classWindow) SetMinSize(min_size Vector2i) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Vector2i](0, abi, min_size)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Window.set_min_size, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classWindow) GetMinSize() Vector2i {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Window.get_min_size, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Vector2i](abi)
	abi.free()
	return ret
}

func (self classWindow) SetMode(mode WindowMode) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[WindowMode](0, abi, mode)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Window.set_mode, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classWindow) GetMode() WindowMode {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Window.get_mode, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[WindowMode](abi)
	abi.free()
	return ret
}

func (self classWindow) SetFlag(flag WindowFlags, enabled bool) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[WindowFlags](0, abi, flag)
	frameSet[bool](1, abi, enabled)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Window.set_flag, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classWindow) GetFlag(flag WindowFlags) bool {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[WindowFlags](0, abi, flag)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Window.get_flag, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self classWindow) IsMaximizeAllowed() bool {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Window.is_maximize_allowed, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self classWindow) RequestAttention() {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Window.request_attention, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classWindow) MoveToForeground() {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Window.move_to_foreground, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classWindow) SetVisible(visible bool) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[bool](0, abi, visible)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Window.set_visible, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classWindow) IsVisible() bool {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Window.is_visible, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self classWindow) Hide() {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Window.hide, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classWindow) Show() {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Window.show, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classWindow) SetTransient(transient bool) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[bool](0, abi, transient)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Window.set_transient, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classWindow) IsTransient() bool {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Window.is_transient, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self classWindow) SetExclusive(exclusive bool) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[bool](0, abi, exclusive)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Window.set_exclusive, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classWindow) IsExclusive() bool {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Window.is_exclusive, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self classWindow) SetUnparentWhenInvisible(unparent bool) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[bool](0, abi, unparent)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Window.set_unparent_when_invisible, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classWindow) CanDraw() bool {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Window.can_draw, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self classWindow) HasFocus() bool {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Window.has_focus, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self classWindow) GrabFocus() {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Window.grab_focus, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classWindow) SetImeActive(active bool) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[bool](0, abi, active)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Window.set_ime_active, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classWindow) SetImePosition(position Vector2i) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Vector2i](0, abi, position)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Window.set_ime_position, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classWindow) IsEmbedded() bool {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Window.is_embedded, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self classWindow) GetContentsMinimumSize() Vector2 {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Window.get_contents_minimum_size, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Vector2](abi)
	abi.free()
	return ret
}

func (self classWindow) SetContentScaleSize(size Vector2i) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Vector2i](0, abi, size)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Window.set_content_scale_size, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classWindow) GetContentScaleSize() Vector2i {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Window.get_content_scale_size, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Vector2i](abi)
	abi.free()
	return ret
}

func (self classWindow) SetContentScaleMode(mode WindowContentScaleMode) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[WindowContentScaleMode](0, abi, mode)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Window.set_content_scale_mode, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classWindow) GetContentScaleMode() WindowContentScaleMode {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Window.get_content_scale_mode, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[WindowContentScaleMode](abi)
	abi.free()
	return ret
}

func (self classWindow) SetContentScaleAspect(aspect WindowContentScaleAspect) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[WindowContentScaleAspect](0, abi, aspect)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Window.set_content_scale_aspect, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classWindow) GetContentScaleAspect() WindowContentScaleAspect {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Window.get_content_scale_aspect, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[WindowContentScaleAspect](abi)
	abi.free()
	return ret
}

func (self classWindow) SetContentScaleStretch(stretch WindowContentScaleStretch) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[WindowContentScaleStretch](0, abi, stretch)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Window.set_content_scale_stretch, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classWindow) GetContentScaleStretch() WindowContentScaleStretch {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Window.get_content_scale_stretch, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[WindowContentScaleStretch](abi)
	abi.free()
	return ret
}

func (self classWindow) SetKeepTitleVisible(title_visible bool) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[bool](0, abi, title_visible)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Window.set_keep_title_visible, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classWindow) GetKeepTitleVisible() bool {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Window.get_keep_title_visible, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self classWindow) SetContentScaleFactor(factor Float) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Float](0, abi, factor)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Window.set_content_scale_factor, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classWindow) GetContentScaleFactor() Float {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Window.get_content_scale_factor, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Float](abi)
	abi.free()
	return ret
}

func (self classWindow) SetUseFontOversampling(enable bool) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[bool](0, abi, enable)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Window.set_use_font_oversampling, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classWindow) IsUsingFontOversampling() bool {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Window.is_using_font_oversampling, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self classWindow) SetMousePassthroughPolygon(polygon PackedVector2Array) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[PackedVector2Array](0, abi, polygon)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Window.set_mouse_passthrough_polygon, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classWindow) GetMousePassthroughPolygon(ctx Context) PackedVector2Array {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Window.get_mouse_passthrough_polygon, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[[2]uintptr](abi)
	abi.free()
	return mmm.Make[API, PackedVector2Array, [2]uintptr](ctx, selfPtr.API, ret)
}

func (self classWindow) SetWrapControls(enable bool) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[bool](0, abi, enable)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Window.set_wrap_controls, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classWindow) IsWrappingControls() bool {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Window.is_wrapping_controls, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self classWindow) ChildControlsChanged() {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Window.child_controls_changed, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classWindow) SetTheme(theme Theme) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Theme](0, abi, theme)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Window.set_theme, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classWindow) GetTheme() Theme {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Window.get_theme, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Theme](abi)
	abi.free()
	return ret
}

func (self classWindow) SetThemeTypeVariation(theme_type StringName) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[StringName](0, abi, theme_type)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Window.set_theme_type_variation, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classWindow) GetThemeTypeVariation(ctx Context) StringName {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Window.get_theme_type_variation, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[uintptr](abi)
	abi.free()
	return mmm.Make[API, StringName, uintptr](ctx, selfPtr.API, ret)
}

func (self classWindow) BeginBulkThemeOverride() {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Window.begin_bulk_theme_override, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classWindow) EndBulkThemeOverride() {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Window.end_bulk_theme_override, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classWindow) AddThemeIconOverride(name StringName, texture Texture2D) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[StringName](0, abi, name)
	frameSet[Texture2D](1, abi, texture)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Window.add_theme_icon_override, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classWindow) AddThemeStyleboxOverride(name StringName, stylebox StyleBox) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[StringName](0, abi, name)
	frameSet[StyleBox](1, abi, stylebox)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Window.add_theme_stylebox_override, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classWindow) AddThemeFontOverride(name StringName, font Font) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[StringName](0, abi, name)
	frameSet[Font](1, abi, font)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Window.add_theme_font_override, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classWindow) AddThemeFontSizeOverride(name StringName, font_size Int) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[StringName](0, abi, name)
	frameSet[Int](1, abi, font_size)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Window.add_theme_font_size_override, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classWindow) AddThemeColorOverride(name StringName, color Color) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[StringName](0, abi, name)
	frameSet[Color](1, abi, color)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Window.add_theme_color_override, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classWindow) AddThemeConstantOverride(name StringName, constant Int) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[StringName](0, abi, name)
	frameSet[Int](1, abi, constant)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Window.add_theme_constant_override, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classWindow) RemoveThemeIconOverride(name StringName) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[StringName](0, abi, name)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Window.remove_theme_icon_override, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classWindow) RemoveThemeStyleboxOverride(name StringName) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[StringName](0, abi, name)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Window.remove_theme_stylebox_override, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classWindow) RemoveThemeFontOverride(name StringName) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[StringName](0, abi, name)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Window.remove_theme_font_override, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classWindow) RemoveThemeFontSizeOverride(name StringName) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[StringName](0, abi, name)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Window.remove_theme_font_size_override, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classWindow) RemoveThemeColorOverride(name StringName) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[StringName](0, abi, name)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Window.remove_theme_color_override, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classWindow) RemoveThemeConstantOverride(name StringName) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[StringName](0, abi, name)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Window.remove_theme_constant_override, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classWindow) GetThemeIcon(name StringName, theme_type StringName) Texture2D {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[StringName](0, abi, name)
	frameSet[StringName](1, abi, theme_type)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Window.get_theme_icon, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Texture2D](abi)
	abi.free()
	return ret
}

func (self classWindow) GetThemeStylebox(name StringName, theme_type StringName) StyleBox {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[StringName](0, abi, name)
	frameSet[StringName](1, abi, theme_type)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Window.get_theme_stylebox, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[StyleBox](abi)
	abi.free()
	return ret
}

func (self classWindow) GetThemeFont(name StringName, theme_type StringName) Font {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[StringName](0, abi, name)
	frameSet[StringName](1, abi, theme_type)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Window.get_theme_font, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Font](abi)
	abi.free()
	return ret
}

func (self classWindow) GetThemeFontSize(name StringName, theme_type StringName) Int {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[StringName](0, abi, name)
	frameSet[StringName](1, abi, theme_type)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Window.get_theme_font_size, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Int](abi)
	abi.free()
	return ret
}

func (self classWindow) GetThemeColor(name StringName, theme_type StringName) Color {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[StringName](0, abi, name)
	frameSet[StringName](1, abi, theme_type)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Window.get_theme_color, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Color](abi)
	abi.free()
	return ret
}

func (self classWindow) GetThemeConstant(name StringName, theme_type StringName) Int {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[StringName](0, abi, name)
	frameSet[StringName](1, abi, theme_type)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Window.get_theme_constant, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Int](abi)
	abi.free()
	return ret
}

func (self classWindow) HasThemeIconOverride(name StringName) bool {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[StringName](0, abi, name)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Window.has_theme_icon_override, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self classWindow) HasThemeStyleboxOverride(name StringName) bool {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[StringName](0, abi, name)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Window.has_theme_stylebox_override, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self classWindow) HasThemeFontOverride(name StringName) bool {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[StringName](0, abi, name)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Window.has_theme_font_override, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self classWindow) HasThemeFontSizeOverride(name StringName) bool {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[StringName](0, abi, name)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Window.has_theme_font_size_override, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self classWindow) HasThemeColorOverride(name StringName) bool {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[StringName](0, abi, name)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Window.has_theme_color_override, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self classWindow) HasThemeConstantOverride(name StringName) bool {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[StringName](0, abi, name)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Window.has_theme_constant_override, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self classWindow) HasThemeIcon(name StringName, theme_type StringName) bool {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[StringName](0, abi, name)
	frameSet[StringName](1, abi, theme_type)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Window.has_theme_icon, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self classWindow) HasThemeStylebox(name StringName, theme_type StringName) bool {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[StringName](0, abi, name)
	frameSet[StringName](1, abi, theme_type)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Window.has_theme_stylebox, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self classWindow) HasThemeFont(name StringName, theme_type StringName) bool {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[StringName](0, abi, name)
	frameSet[StringName](1, abi, theme_type)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Window.has_theme_font, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self classWindow) HasThemeFontSize(name StringName, theme_type StringName) bool {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[StringName](0, abi, name)
	frameSet[StringName](1, abi, theme_type)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Window.has_theme_font_size, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self classWindow) HasThemeColor(name StringName, theme_type StringName) bool {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[StringName](0, abi, name)
	frameSet[StringName](1, abi, theme_type)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Window.has_theme_color, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self classWindow) HasThemeConstant(name StringName, theme_type StringName) bool {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[StringName](0, abi, name)
	frameSet[StringName](1, abi, theme_type)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Window.has_theme_constant, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self classWindow) GetThemeDefaultBaseScale() Float {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Window.get_theme_default_base_scale, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Float](abi)
	abi.free()
	return ret
}

func (self classWindow) GetThemeDefaultFont() Font {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Window.get_theme_default_font, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Font](abi)
	abi.free()
	return ret
}

func (self classWindow) GetThemeDefaultFontSize() Int {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Window.get_theme_default_font_size, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Int](abi)
	abi.free()
	return ret
}

func (self classWindow) SetLayoutDirection(direction WindowLayoutDirection) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[WindowLayoutDirection](0, abi, direction)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Window.set_layout_direction, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classWindow) GetLayoutDirection() WindowLayoutDirection {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Window.get_layout_direction, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[WindowLayoutDirection](abi)
	abi.free()
	return ret
}

func (self classWindow) IsLayoutRtl() bool {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Window.is_layout_rtl, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self classWindow) SetAutoTranslate(enable bool) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[bool](0, abi, enable)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Window.set_auto_translate, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classWindow) IsAutoTranslating() bool {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Window.is_auto_translating, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self classWindow) Popup(rect Rect2i) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Rect2i](0, abi, rect)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Window.popup, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classWindow) PopupOnParent(parent_rect Rect2i) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Rect2i](0, abi, parent_rect)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Window.popup_on_parent, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classWindow) PopupCentered(minsize Vector2i) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Vector2i](0, abi, minsize)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Window.popup_centered, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classWindow) PopupCenteredRatio(ratio Float) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Float](0, abi, ratio)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Window.popup_centered_ratio, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classWindow) PopupCenteredClamped(minsize Vector2i, fallback_ratio Float) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Vector2i](0, abi, minsize)
	frameSet[Float](1, abi, fallback_ratio)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Window.popup_centered_clamped, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classWindow) PopupExclusive(from_node Node, rect Rect2i) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Node](0, abi, from_node)
	frameSet[Rect2i](1, abi, rect)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Window.popup_exclusive, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classWindow) PopupExclusiveOnParent(from_node Node, parent_rect Rect2i) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Node](0, abi, from_node)
	frameSet[Rect2i](1, abi, parent_rect)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Window.popup_exclusive_on_parent, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classWindow) PopupExclusiveCentered(from_node Node, minsize Vector2i) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Node](0, abi, from_node)
	frameSet[Vector2i](1, abi, minsize)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Window.popup_exclusive_centered, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classWindow) PopupExclusiveCenteredRatio(from_node Node, ratio Float) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Node](0, abi, from_node)
	frameSet[Float](1, abi, ratio)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Window.popup_exclusive_centered_ratio, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classWindow) PopupExclusiveCenteredClamped(from_node Node, minsize Vector2i, fallback_ratio Float) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Node](0, abi, from_node)
	frameSet[Vector2i](1, abi, minsize)
	frameSet[Float](2, abi, fallback_ratio)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Window.popup_exclusive_centered_clamped, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classWindow) virtual(name string) reflect.Value {
	switch name {
	case "_get_contents_minimum_size":
		return reflect.ValueOf(self._get_contents_minimum_size)
	default:
		return self.Super().virtual(name)
	}
}

type classWorld2D struct{ Class[classWorld2D, Resource] }

func (self classWorld2D) Resource() Resource { return *self.Super() }

func (self classWorld2D) RefCounted() RefCounted { return *self.Super().Super() }

func (self classWorld2D) Object() Object { return *self.Super().Super().Super() }

func (self classWorld2D) GetCanvas() RID {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.World2D.get_canvas, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[RID](abi)
	abi.free()
	return ret
}

func (self classWorld2D) GetSpace() RID {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.World2D.get_space, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[RID](abi)
	abi.free()
	return ret
}

func (self classWorld2D) GetNavigationMap() RID {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.World2D.get_navigation_map, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[RID](abi)
	abi.free()
	return ret
}

func (self classWorld2D) GetDirectSpaceState() PhysicsDirectSpaceState2D {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.World2D.get_direct_space_state, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[PhysicsDirectSpaceState2D](abi)
	abi.free()
	return ret
}

func (self classWorld2D) virtual(name string) reflect.Value {
	switch name {
	default:
		return self.Super().virtual(name)
	}
}

type classWorld3D struct{ Class[classWorld3D, Resource] }

func (self classWorld3D) Resource() Resource { return *self.Super() }

func (self classWorld3D) RefCounted() RefCounted { return *self.Super().Super() }

func (self classWorld3D) Object() Object { return *self.Super().Super().Super() }

func (self classWorld3D) GetSpace() RID {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.World3D.get_space, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[RID](abi)
	abi.free()
	return ret
}

func (self classWorld3D) GetNavigationMap() RID {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.World3D.get_navigation_map, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[RID](abi)
	abi.free()
	return ret
}

func (self classWorld3D) GetScenario() RID {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.World3D.get_scenario, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[RID](abi)
	abi.free()
	return ret
}

func (self classWorld3D) SetEnvironment(env Environment) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Environment](0, abi, env)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.World3D.set_environment, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classWorld3D) GetEnvironment() Environment {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.World3D.get_environment, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Environment](abi)
	abi.free()
	return ret
}

func (self classWorld3D) SetFallbackEnvironment(env Environment) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Environment](0, abi, env)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.World3D.set_fallback_environment, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classWorld3D) GetFallbackEnvironment() Environment {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.World3D.get_fallback_environment, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Environment](abi)
	abi.free()
	return ret
}

func (self classWorld3D) SetCameraAttributes(attributes CameraAttributes) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[CameraAttributes](0, abi, attributes)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.World3D.set_camera_attributes, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classWorld3D) GetCameraAttributes() CameraAttributes {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.World3D.get_camera_attributes, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[CameraAttributes](abi)
	abi.free()
	return ret
}

func (self classWorld3D) GetDirectSpaceState() PhysicsDirectSpaceState3D {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.World3D.get_direct_space_state, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[PhysicsDirectSpaceState3D](abi)
	abi.free()
	return ret
}

func (self classWorld3D) virtual(name string) reflect.Value {
	switch name {
	default:
		return self.Super().virtual(name)
	}
}

type classXMLParser struct {
	Class[classXMLParser, RefCounted]
}

func (self classXMLParser) RefCounted() RefCounted { return *self.Super() }

func (self classXMLParser) Object() Object { return *self.Super().Super() }

func (self classXMLParser) Read() int64 {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.XMLParser.read, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[int64](abi)
	abi.free()
	return ret
}

func (self classXMLParser) GetNodeType() XMLParserNodeType {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.XMLParser.get_node_type, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[XMLParserNodeType](abi)
	abi.free()
	return ret
}

func (self classXMLParser) GetNodeName(ctx Context) String {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.XMLParser.get_node_name, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[uintptr](abi)
	abi.free()
	return mmm.Make[API, String, uintptr](ctx, selfPtr.API, ret)
}

func (self classXMLParser) GetNodeData(ctx Context) String {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.XMLParser.get_node_data, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[uintptr](abi)
	abi.free()
	return mmm.Make[API, String, uintptr](ctx, selfPtr.API, ret)
}

func (self classXMLParser) GetNodeOffset() Int {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.XMLParser.get_node_offset, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Int](abi)
	abi.free()
	return ret
}

func (self classXMLParser) GetAttributeCount() Int {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.XMLParser.get_attribute_count, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Int](abi)
	abi.free()
	return ret
}

func (self classXMLParser) GetAttributeName(ctx Context, idx Int) String {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Int](0, abi, idx)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.XMLParser.get_attribute_name, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[uintptr](abi)
	abi.free()
	return mmm.Make[API, String, uintptr](ctx, selfPtr.API, ret)
}

func (self classXMLParser) GetAttributeValue(ctx Context, idx Int) String {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Int](0, abi, idx)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.XMLParser.get_attribute_value, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[uintptr](abi)
	abi.free()
	return mmm.Make[API, String, uintptr](ctx, selfPtr.API, ret)
}

func (self classXMLParser) HasAttribute(name String) bool {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[String](0, abi, name)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.XMLParser.has_attribute, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self classXMLParser) GetNamedAttributeValue(ctx Context, name String) String {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[String](0, abi, name)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.XMLParser.get_named_attribute_value, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[uintptr](abi)
	abi.free()
	return mmm.Make[API, String, uintptr](ctx, selfPtr.API, ret)
}

func (self classXMLParser) GetNamedAttributeValueSafe(ctx Context, name String) String {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[String](0, abi, name)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.XMLParser.get_named_attribute_value_safe, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[uintptr](abi)
	abi.free()
	return mmm.Make[API, String, uintptr](ctx, selfPtr.API, ret)
}

func (self classXMLParser) IsEmpty() bool {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.XMLParser.is_empty, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self classXMLParser) GetCurrentLine() Int {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.XMLParser.get_current_line, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Int](abi)
	abi.free()
	return ret
}

func (self classXMLParser) SkipSection() {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.XMLParser.skip_section, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self classXMLParser) SeekTo(position Int) int64 {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Int](0, abi, position)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.XMLParser.seek, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[int64](abi)
	abi.free()
	return ret
}

func (self classXMLParser) Open(file String) int64 {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[String](0, abi, file)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.XMLParser.open, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[int64](abi)
	abi.free()
	return ret
}

func (self classXMLParser) OpenBuffer(buffer PackedByteArray) int64 {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[PackedByteArray](0, abi, buffer)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.XMLParser.open_buffer, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[int64](abi)
	abi.free()
	return ret
}

func (self classXMLParser) virtual(name string) reflect.Value {
	switch name {
	default:
		return self.Super().virtual(name)
	}
}
