//go:build !generate

// Code generated by the generate package DO NOT EDIT
package gd

type classAESContext struct{ Class[classAESContext] }

func (self classAESContext) Super() RefCounted {
	var super RefCounted
	super.ptr = self.ptr
	return super
}

func (self classAESContext) RefCounted() RefCounted { return self.Super() }
func (self classAESContext) Start(mode AESContextMode, key PackedByteArray, iv PackedByteArray) int64 {
	return self.ptr.API.AESContext_start(self, mode, key, iv)
}
func (self classAESContext) Update(src PackedByteArray) PackedByteArray {
	return self.ptr.API.AESContext_update(self, src)
}
func (self classAESContext) GetIvState() PackedByteArray {
	return self.ptr.API.AESContext_get_iv_state(self)
}
func (self classAESContext) Finish() {
	self.ptr.API.AESContext_finish(self)
}

type classAStar2D struct{ Class[classAStar2D] }

func (self classAStar2D) Super() RefCounted { var super RefCounted; super.ptr = self.ptr; return super }

func (self classAStar2D) RefCounted() RefCounted { return self.Super() }
func (self classAStar2D) GetAvailablePointId() Int {
	return self.ptr.API.AStar2D_get_available_point_id(self)
}
func (self classAStar2D) AddPoint(id Int, position Vector2, weight_scale Float) {
	self.ptr.API.AStar2D_add_point(self, id, position, weight_scale)
}
func (self classAStar2D) GetPointPosition(id Int) Vector2 {
	return self.ptr.API.AStar2D_get_point_position(self, id)
}
func (self classAStar2D) SetPointPosition(id Int, position Vector2) {
	self.ptr.API.AStar2D_set_point_position(self, id, position)
}
func (self classAStar2D) GetPointWeightScale(id Int) Float {
	return self.ptr.API.AStar2D_get_point_weight_scale(self, id)
}
func (self classAStar2D) SetPointWeightScale(id Int, weight_scale Float) {
	self.ptr.API.AStar2D_set_point_weight_scale(self, id, weight_scale)
}
func (self classAStar2D) RemovePoint(id Int) {
	self.ptr.API.AStar2D_remove_point(self, id)
}
func (self classAStar2D) HasPoint(id Int) bool {
	return self.ptr.API.AStar2D_has_point(self, id)
}
func (self classAStar2D) GetPointConnections(id Int) PackedInt64Array {
	return self.ptr.API.AStar2D_get_point_connections(self, id)
}
func (self classAStar2D) GetPointIds() PackedInt64Array {
	return self.ptr.API.AStar2D_get_point_ids(self)
}
func (self classAStar2D) SetPointDisabled(id Int, disabled bool) {
	self.ptr.API.AStar2D_set_point_disabled(self, id, disabled)
}
func (self classAStar2D) IsPointDisabled(id Int) bool {
	return self.ptr.API.AStar2D_is_point_disabled(self, id)
}
func (self classAStar2D) ConnectPoints(id Int, to_id Int, bidirectional bool) {
	self.ptr.API.AStar2D_connect_points(self, id, to_id, bidirectional)
}
func (self classAStar2D) DisconnectPoints(id Int, to_id Int, bidirectional bool) {
	self.ptr.API.AStar2D_disconnect_points(self, id, to_id, bidirectional)
}
func (self classAStar2D) ArePointsConnected(id Int, to_id Int, bidirectional bool) bool {
	return self.ptr.API.AStar2D_are_points_connected(self, id, to_id, bidirectional)
}
func (self classAStar2D) GetPointCount() Int {
	return self.ptr.API.AStar2D_get_point_count(self)
}
func (self classAStar2D) GetPointCapacity() Int {
	return self.ptr.API.AStar2D_get_point_capacity(self)
}
func (self classAStar2D) ReserveSpace(num_nodes Int) {
	self.ptr.API.AStar2D_reserve_space(self, num_nodes)
}
func (self classAStar2D) Clear() {
	self.ptr.API.AStar2D_clear(self)
}
func (self classAStar2D) GetClosestPoint(to_position Vector2, include_disabled bool) Int {
	return self.ptr.API.AStar2D_get_closest_point(self, to_position, include_disabled)
}
func (self classAStar2D) GetClosestPositionInSegment(to_position Vector2) Vector2 {
	return self.ptr.API.AStar2D_get_closest_position_in_segment(self, to_position)
}
func (self classAStar2D) GetPointPath(from_id Int, to_id Int) PackedVector2Array {
	return self.ptr.API.AStar2D_get_point_path(self, from_id, to_id)
}
func (self classAStar2D) GetIdPath(from_id Int, to_id Int) PackedInt64Array {
	return self.ptr.API.AStar2D_get_id_path(self, from_id, to_id)
}

type classAStar3D struct{ Class[classAStar3D] }

func (self classAStar3D) Super() RefCounted { var super RefCounted; super.ptr = self.ptr; return super }

func (self classAStar3D) RefCounted() RefCounted { return self.Super() }
func (self classAStar3D) GetAvailablePointId() Int {
	return self.ptr.API.AStar3D_get_available_point_id(self)
}
func (self classAStar3D) AddPoint(id Int, position Vector3, weight_scale Float) {
	self.ptr.API.AStar3D_add_point(self, id, position, weight_scale)
}
func (self classAStar3D) GetPointPosition(id Int) Vector3 {
	return self.ptr.API.AStar3D_get_point_position(self, id)
}
func (self classAStar3D) SetPointPosition(id Int, position Vector3) {
	self.ptr.API.AStar3D_set_point_position(self, id, position)
}
func (self classAStar3D) GetPointWeightScale(id Int) Float {
	return self.ptr.API.AStar3D_get_point_weight_scale(self, id)
}
func (self classAStar3D) SetPointWeightScale(id Int, weight_scale Float) {
	self.ptr.API.AStar3D_set_point_weight_scale(self, id, weight_scale)
}
func (self classAStar3D) RemovePoint(id Int) {
	self.ptr.API.AStar3D_remove_point(self, id)
}
func (self classAStar3D) HasPoint(id Int) bool {
	return self.ptr.API.AStar3D_has_point(self, id)
}
func (self classAStar3D) GetPointConnections(id Int) PackedInt64Array {
	return self.ptr.API.AStar3D_get_point_connections(self, id)
}
func (self classAStar3D) GetPointIds() PackedInt64Array {
	return self.ptr.API.AStar3D_get_point_ids(self)
}
func (self classAStar3D) SetPointDisabled(id Int, disabled bool) {
	self.ptr.API.AStar3D_set_point_disabled(self, id, disabled)
}
func (self classAStar3D) IsPointDisabled(id Int) bool {
	return self.ptr.API.AStar3D_is_point_disabled(self, id)
}
func (self classAStar3D) ConnectPoints(id Int, to_id Int, bidirectional bool) {
	self.ptr.API.AStar3D_connect_points(self, id, to_id, bidirectional)
}
func (self classAStar3D) DisconnectPoints(id Int, to_id Int, bidirectional bool) {
	self.ptr.API.AStar3D_disconnect_points(self, id, to_id, bidirectional)
}
func (self classAStar3D) ArePointsConnected(id Int, to_id Int, bidirectional bool) bool {
	return self.ptr.API.AStar3D_are_points_connected(self, id, to_id, bidirectional)
}
func (self classAStar3D) GetPointCount() Int {
	return self.ptr.API.AStar3D_get_point_count(self)
}
func (self classAStar3D) GetPointCapacity() Int {
	return self.ptr.API.AStar3D_get_point_capacity(self)
}
func (self classAStar3D) ReserveSpace(num_nodes Int) {
	self.ptr.API.AStar3D_reserve_space(self, num_nodes)
}
func (self classAStar3D) Clear() {
	self.ptr.API.AStar3D_clear(self)
}
func (self classAStar3D) GetClosestPoint(to_position Vector3, include_disabled bool) Int {
	return self.ptr.API.AStar3D_get_closest_point(self, to_position, include_disabled)
}
func (self classAStar3D) GetClosestPositionInSegment(to_position Vector3) Vector3 {
	return self.ptr.API.AStar3D_get_closest_position_in_segment(self, to_position)
}
func (self classAStar3D) GetPointPath(from_id Int, to_id Int) PackedVector3Array {
	return self.ptr.API.AStar3D_get_point_path(self, from_id, to_id)
}
func (self classAStar3D) GetIdPath(from_id Int, to_id Int) PackedInt64Array {
	return self.ptr.API.AStar3D_get_id_path(self, from_id, to_id)
}

type classAStarGrid2D struct{ Class[classAStarGrid2D] }

func (self classAStarGrid2D) Super() RefCounted {
	var super RefCounted
	super.ptr = self.ptr
	return super
}

func (self classAStarGrid2D) RefCounted() RefCounted { return self.Super() }
func (self classAStarGrid2D) SetRegion(region Rect2i) {
	self.ptr.API.AStarGrid2D_set_region(self, region)
}
func (self classAStarGrid2D) GetRegion() Rect2i {
	return self.ptr.API.AStarGrid2D_get_region(self)
}
func (self classAStarGrid2D) SetSize(size Vector2i) {
	self.ptr.API.AStarGrid2D_set_size(self, size)
}
func (self classAStarGrid2D) GetSize() Vector2i {
	return self.ptr.API.AStarGrid2D_get_size(self)
}
func (self classAStarGrid2D) SetOffset(offset Vector2) {
	self.ptr.API.AStarGrid2D_set_offset(self, offset)
}
func (self classAStarGrid2D) GetOffset() Vector2 {
	return self.ptr.API.AStarGrid2D_get_offset(self)
}
func (self classAStarGrid2D) SetCellSize(cell_size Vector2) {
	self.ptr.API.AStarGrid2D_set_cell_size(self, cell_size)
}
func (self classAStarGrid2D) GetCellSize() Vector2 {
	return self.ptr.API.AStarGrid2D_get_cell_size(self)
}
func (self classAStarGrid2D) SetCellShape(cell_shape AStarGrid2DCellShape) {
	self.ptr.API.AStarGrid2D_set_cell_shape(self, cell_shape)
}
func (self classAStarGrid2D) GetCellShape() AStarGrid2DCellShape {
	return self.ptr.API.AStarGrid2D_get_cell_shape(self)
}
func (self classAStarGrid2D) IsInBounds(x Int, y Int) bool {
	return self.ptr.API.AStarGrid2D_is_in_bounds(self, x, y)
}
func (self classAStarGrid2D) IsInBoundsv(id Vector2i) bool {
	return self.ptr.API.AStarGrid2D_is_in_boundsv(self, id)
}
func (self classAStarGrid2D) IsDirty() bool {
	return self.ptr.API.AStarGrid2D_is_dirty(self)
}
func (self classAStarGrid2D) Update() {
	self.ptr.API.AStarGrid2D_update(self)
}
func (self classAStarGrid2D) SetJumpingEnabled(enabled bool) {
	self.ptr.API.AStarGrid2D_set_jumping_enabled(self, enabled)
}
func (self classAStarGrid2D) IsJumpingEnabled() bool {
	return self.ptr.API.AStarGrid2D_is_jumping_enabled(self)
}
func (self classAStarGrid2D) SetDiagonalMode(mode AStarGrid2DDiagonalMode) {
	self.ptr.API.AStarGrid2D_set_diagonal_mode(self, mode)
}
func (self classAStarGrid2D) GetDiagonalMode() AStarGrid2DDiagonalMode {
	return self.ptr.API.AStarGrid2D_get_diagonal_mode(self)
}
func (self classAStarGrid2D) SetDefaultComputeHeuristic(heuristic AStarGrid2DHeuristic) {
	self.ptr.API.AStarGrid2D_set_default_compute_heuristic(self, heuristic)
}
func (self classAStarGrid2D) GetDefaultComputeHeuristic() AStarGrid2DHeuristic {
	return self.ptr.API.AStarGrid2D_get_default_compute_heuristic(self)
}
func (self classAStarGrid2D) SetDefaultEstimateHeuristic(heuristic AStarGrid2DHeuristic) {
	self.ptr.API.AStarGrid2D_set_default_estimate_heuristic(self, heuristic)
}
func (self classAStarGrid2D) GetDefaultEstimateHeuristic() AStarGrid2DHeuristic {
	return self.ptr.API.AStarGrid2D_get_default_estimate_heuristic(self)
}
func (self classAStarGrid2D) SetPointSolid(id Vector2i, solid bool) {
	self.ptr.API.AStarGrid2D_set_point_solid(self, id, solid)
}
func (self classAStarGrid2D) IsPointSolid(id Vector2i) bool {
	return self.ptr.API.AStarGrid2D_is_point_solid(self, id)
}
func (self classAStarGrid2D) SetPointWeightScale(id Vector2i, weight_scale Float) {
	self.ptr.API.AStarGrid2D_set_point_weight_scale(self, id, weight_scale)
}
func (self classAStarGrid2D) GetPointWeightScale(id Vector2i) Float {
	return self.ptr.API.AStarGrid2D_get_point_weight_scale(self, id)
}
func (self classAStarGrid2D) FillSolidRegion(region Rect2i, solid bool) {
	self.ptr.API.AStarGrid2D_fill_solid_region(self, region, solid)
}
func (self classAStarGrid2D) FillWeightScaleRegion(region Rect2i, weight_scale Float) {
	self.ptr.API.AStarGrid2D_fill_weight_scale_region(self, region, weight_scale)
}
func (self classAStarGrid2D) Clear() {
	self.ptr.API.AStarGrid2D_clear(self)
}
func (self classAStarGrid2D) GetPointPosition(id Vector2i) Vector2 {
	return self.ptr.API.AStarGrid2D_get_point_position(self, id)
}
func (self classAStarGrid2D) GetPointPath(from_id Vector2i, to_id Vector2i) PackedVector2Array {
	return self.ptr.API.AStarGrid2D_get_point_path(self, from_id, to_id)
}
func (self classAStarGrid2D) GetIdPath(from_id Vector2i, to_id Vector2i) ArrayOf[Vector2i] {
	return self.ptr.API.AStarGrid2D_get_id_path(self, from_id, to_id)
}

type classAcceptDialog struct{ Class[classAcceptDialog] }

func (self classAcceptDialog) Super() Window { var super Window; super.ptr = self.ptr; return super }

func (self classAcceptDialog) Window() Window { return self.Super() }
func (self classAcceptDialog) GetOkButton() Button {
	return self.ptr.API.AcceptDialog_get_ok_button(self)
}
func (self classAcceptDialog) GetLabel() Label {
	return self.ptr.API.AcceptDialog_get_label(self)
}
func (self classAcceptDialog) SetHideOnOk(enabled bool) {
	self.ptr.API.AcceptDialog_set_hide_on_ok(self, enabled)
}
func (self classAcceptDialog) GetHideOnOk() bool {
	return self.ptr.API.AcceptDialog_get_hide_on_ok(self)
}
func (self classAcceptDialog) SetCloseOnEscape(enabled bool) {
	self.ptr.API.AcceptDialog_set_close_on_escape(self, enabled)
}
func (self classAcceptDialog) GetCloseOnEscape() bool {
	return self.ptr.API.AcceptDialog_get_close_on_escape(self)
}
func (self classAcceptDialog) AddButton(text String, right bool, action String) Button {
	return self.ptr.API.AcceptDialog_add_button(self, text, right, action)
}
func (self classAcceptDialog) AddCancelButton(name String) Button {
	return self.ptr.API.AcceptDialog_add_cancel_button(self, name)
}
func (self classAcceptDialog) RemoveButton(button Control) {
	self.ptr.API.AcceptDialog_remove_button(self, button)
}
func (self classAcceptDialog) RegisterTextEnter(line_edit Control) {
	self.ptr.API.AcceptDialog_register_text_enter(self, line_edit)
}
func (self classAcceptDialog) SetText(text String) {
	self.ptr.API.AcceptDialog_set_text(self, text)
}
func (self classAcceptDialog) GetText() String {
	return self.ptr.API.AcceptDialog_get_text(self)
}
func (self classAcceptDialog) SetAutowrap(autowrap bool) {
	self.ptr.API.AcceptDialog_set_autowrap(self, autowrap)
}
func (self classAcceptDialog) HasAutowrap() bool {
	return self.ptr.API.AcceptDialog_has_autowrap(self)
}
func (self classAcceptDialog) SetOkButtonText(text String) {
	self.ptr.API.AcceptDialog_set_ok_button_text(self, text)
}
func (self classAcceptDialog) GetOkButtonText() String {
	return self.ptr.API.AcceptDialog_get_ok_button_text(self)
}

type classAnimatableBody2D struct{ Class[classAnimatableBody2D] }

func (self classAnimatableBody2D) Super() StaticBody2D {
	var super StaticBody2D
	super.ptr = self.ptr
	return super
}

func (self classAnimatableBody2D) StaticBody2D() StaticBody2D { return self.Super() }
func (self classAnimatableBody2D) SetSyncToPhysics(enable bool) {
	self.ptr.API.AnimatableBody2D_set_sync_to_physics(self, enable)
}
func (self classAnimatableBody2D) IsSyncToPhysicsEnabled() bool {
	return self.ptr.API.AnimatableBody2D_is_sync_to_physics_enabled(self)
}

type classAnimatableBody3D struct{ Class[classAnimatableBody3D] }

func (self classAnimatableBody3D) Super() StaticBody3D {
	var super StaticBody3D
	super.ptr = self.ptr
	return super
}

func (self classAnimatableBody3D) StaticBody3D() StaticBody3D { return self.Super() }
func (self classAnimatableBody3D) SetSyncToPhysics(enable bool) {
	self.ptr.API.AnimatableBody3D_set_sync_to_physics(self, enable)
}
func (self classAnimatableBody3D) IsSyncToPhysicsEnabled() bool {
	return self.ptr.API.AnimatableBody3D_is_sync_to_physics_enabled(self)
}

type classAnimatedSprite2D struct{ Class[classAnimatedSprite2D] }

func (self classAnimatedSprite2D) Super() Node2D {
	var super Node2D
	super.ptr = self.ptr
	return super
}

func (self classAnimatedSprite2D) Node2D() Node2D { return self.Super() }
func (self classAnimatedSprite2D) SetSpriteFrames(sprite_frames SpriteFrames) {
	self.ptr.API.AnimatedSprite2D_set_sprite_frames(self, sprite_frames)
}
func (self classAnimatedSprite2D) GetSpriteFrames() SpriteFrames {
	return self.ptr.API.AnimatedSprite2D_get_sprite_frames(self)
}
func (self classAnimatedSprite2D) SetAnimation(name StringName) {
	self.ptr.API.AnimatedSprite2D_set_animation(self, name)
}
func (self classAnimatedSprite2D) GetAnimation() StringName {
	return self.ptr.API.AnimatedSprite2D_get_animation(self)
}
func (self classAnimatedSprite2D) SetAutoplay(name String) {
	self.ptr.API.AnimatedSprite2D_set_autoplay(self, name)
}
func (self classAnimatedSprite2D) GetAutoplay() String {
	return self.ptr.API.AnimatedSprite2D_get_autoplay(self)
}
func (self classAnimatedSprite2D) IsPlaying() bool {
	return self.ptr.API.AnimatedSprite2D_is_playing(self)
}
func (self classAnimatedSprite2D) Play(name StringName, custom_speed Float, from_end bool) {
	self.ptr.API.AnimatedSprite2D_play(self, name, custom_speed, from_end)
}
func (self classAnimatedSprite2D) PlayBackwards(name StringName) {
	self.ptr.API.AnimatedSprite2D_play_backwards(self, name)
}
func (self classAnimatedSprite2D) Pause() {
	self.ptr.API.AnimatedSprite2D_pause(self)
}
func (self classAnimatedSprite2D) Stop() {
	self.ptr.API.AnimatedSprite2D_stop(self)
}
func (self classAnimatedSprite2D) SetCentered(centered bool) {
	self.ptr.API.AnimatedSprite2D_set_centered(self, centered)
}
func (self classAnimatedSprite2D) IsCentered() bool {
	return self.ptr.API.AnimatedSprite2D_is_centered(self)
}
func (self classAnimatedSprite2D) SetOffset(offset Vector2) {
	self.ptr.API.AnimatedSprite2D_set_offset(self, offset)
}
func (self classAnimatedSprite2D) GetOffset() Vector2 {
	return self.ptr.API.AnimatedSprite2D_get_offset(self)
}
func (self classAnimatedSprite2D) SetFlipH(flip_h bool) {
	self.ptr.API.AnimatedSprite2D_set_flip_h(self, flip_h)
}
func (self classAnimatedSprite2D) IsFlippedH() bool {
	return self.ptr.API.AnimatedSprite2D_is_flipped_h(self)
}
func (self classAnimatedSprite2D) SetFlipV(flip_v bool) {
	self.ptr.API.AnimatedSprite2D_set_flip_v(self, flip_v)
}
func (self classAnimatedSprite2D) IsFlippedV() bool {
	return self.ptr.API.AnimatedSprite2D_is_flipped_v(self)
}
func (self classAnimatedSprite2D) SetFrame(frame Int) {
	self.ptr.API.AnimatedSprite2D_set_frame(self, frame)
}
func (self classAnimatedSprite2D) GetFrame() Int {
	return self.ptr.API.AnimatedSprite2D_get_frame(self)
}
func (self classAnimatedSprite2D) SetFrameProgress(progress Float) {
	self.ptr.API.AnimatedSprite2D_set_frame_progress(self, progress)
}
func (self classAnimatedSprite2D) GetFrameProgress() Float {
	return self.ptr.API.AnimatedSprite2D_get_frame_progress(self)
}
func (self classAnimatedSprite2D) SetFrameAndProgress(frame Int, progress Float) {
	self.ptr.API.AnimatedSprite2D_set_frame_and_progress(self, frame, progress)
}
func (self classAnimatedSprite2D) SetSpeedScale(speed_scale Float) {
	self.ptr.API.AnimatedSprite2D_set_speed_scale(self, speed_scale)
}
func (self classAnimatedSprite2D) GetSpeedScale() Float {
	return self.ptr.API.AnimatedSprite2D_get_speed_scale(self)
}
func (self classAnimatedSprite2D) GetPlayingSpeed() Float {
	return self.ptr.API.AnimatedSprite2D_get_playing_speed(self)
}

type classAnimatedSprite3D struct{ Class[classAnimatedSprite3D] }

func (self classAnimatedSprite3D) Super() SpriteBase3D {
	var super SpriteBase3D
	super.ptr = self.ptr
	return super
}

func (self classAnimatedSprite3D) SpriteBase3D() SpriteBase3D { return self.Super() }
func (self classAnimatedSprite3D) SetSpriteFrames(sprite_frames SpriteFrames) {
	self.ptr.API.AnimatedSprite3D_set_sprite_frames(self, sprite_frames)
}
func (self classAnimatedSprite3D) GetSpriteFrames() SpriteFrames {
	return self.ptr.API.AnimatedSprite3D_get_sprite_frames(self)
}
func (self classAnimatedSprite3D) SetAnimation(name StringName) {
	self.ptr.API.AnimatedSprite3D_set_animation(self, name)
}
func (self classAnimatedSprite3D) GetAnimation() StringName {
	return self.ptr.API.AnimatedSprite3D_get_animation(self)
}
func (self classAnimatedSprite3D) SetAutoplay(name String) {
	self.ptr.API.AnimatedSprite3D_set_autoplay(self, name)
}
func (self classAnimatedSprite3D) GetAutoplay() String {
	return self.ptr.API.AnimatedSprite3D_get_autoplay(self)
}
func (self classAnimatedSprite3D) IsPlaying() bool {
	return self.ptr.API.AnimatedSprite3D_is_playing(self)
}
func (self classAnimatedSprite3D) Play(name StringName, custom_speed Float, from_end bool) {
	self.ptr.API.AnimatedSprite3D_play(self, name, custom_speed, from_end)
}
func (self classAnimatedSprite3D) PlayBackwards(name StringName) {
	self.ptr.API.AnimatedSprite3D_play_backwards(self, name)
}
func (self classAnimatedSprite3D) Pause() {
	self.ptr.API.AnimatedSprite3D_pause(self)
}
func (self classAnimatedSprite3D) Stop() {
	self.ptr.API.AnimatedSprite3D_stop(self)
}
func (self classAnimatedSprite3D) SetFrame(frame Int) {
	self.ptr.API.AnimatedSprite3D_set_frame(self, frame)
}
func (self classAnimatedSprite3D) GetFrame() Int {
	return self.ptr.API.AnimatedSprite3D_get_frame(self)
}
func (self classAnimatedSprite3D) SetFrameProgress(progress Float) {
	self.ptr.API.AnimatedSprite3D_set_frame_progress(self, progress)
}
func (self classAnimatedSprite3D) GetFrameProgress() Float {
	return self.ptr.API.AnimatedSprite3D_get_frame_progress(self)
}
func (self classAnimatedSprite3D) SetFrameAndProgress(frame Int, progress Float) {
	self.ptr.API.AnimatedSprite3D_set_frame_and_progress(self, frame, progress)
}
func (self classAnimatedSprite3D) SetSpeedScale(speed_scale Float) {
	self.ptr.API.AnimatedSprite3D_set_speed_scale(self, speed_scale)
}
func (self classAnimatedSprite3D) GetSpeedScale() Float {
	return self.ptr.API.AnimatedSprite3D_get_speed_scale(self)
}
func (self classAnimatedSprite3D) GetPlayingSpeed() Float {
	return self.ptr.API.AnimatedSprite3D_get_playing_speed(self)
}

type classAnimatedTexture struct{ Class[classAnimatedTexture] }

func (self classAnimatedTexture) Super() Texture2D {
	var super Texture2D
	super.ptr = self.ptr
	return super
}

func (self classAnimatedTexture) Texture2D() Texture2D { return self.Super() }
func (self classAnimatedTexture) SetFrames(frames Int) {
	self.ptr.API.AnimatedTexture_set_frames(self, frames)
}
func (self classAnimatedTexture) GetFrames() Int {
	return self.ptr.API.AnimatedTexture_get_frames(self)
}
func (self classAnimatedTexture) SetCurrentFrame(frame Int) {
	self.ptr.API.AnimatedTexture_set_current_frame(self, frame)
}
func (self classAnimatedTexture) GetCurrentFrame() Int {
	return self.ptr.API.AnimatedTexture_get_current_frame(self)
}
func (self classAnimatedTexture) SetPause(pause bool) {
	self.ptr.API.AnimatedTexture_set_pause(self, pause)
}
func (self classAnimatedTexture) GetPause() bool {
	return self.ptr.API.AnimatedTexture_get_pause(self)
}
func (self classAnimatedTexture) SetOneShot(one_shot bool) {
	self.ptr.API.AnimatedTexture_set_one_shot(self, one_shot)
}
func (self classAnimatedTexture) GetOneShot() bool {
	return self.ptr.API.AnimatedTexture_get_one_shot(self)
}
func (self classAnimatedTexture) SetSpeedScale(scale Float) {
	self.ptr.API.AnimatedTexture_set_speed_scale(self, scale)
}
func (self classAnimatedTexture) GetSpeedScale() Float {
	return self.ptr.API.AnimatedTexture_get_speed_scale(self)
}
func (self classAnimatedTexture) SetFrameTexture(frame Int, texture Texture2D) {
	self.ptr.API.AnimatedTexture_set_frame_texture(self, frame, texture)
}
func (self classAnimatedTexture) GetFrameTexture(frame Int) Texture2D {
	return self.ptr.API.AnimatedTexture_get_frame_texture(self, frame)
}
func (self classAnimatedTexture) SetFrameDuration(frame Int, duration Float) {
	self.ptr.API.AnimatedTexture_set_frame_duration(self, frame, duration)
}
func (self classAnimatedTexture) GetFrameDuration(frame Int) Float {
	return self.ptr.API.AnimatedTexture_get_frame_duration(self, frame)
}

type classAnimation struct{ Class[classAnimation] }

func (self classAnimation) Super() Resource { var super Resource; super.ptr = self.ptr; return super }

func (self classAnimation) Resource() Resource { return self.Super() }
func (self classAnimation) AddTrack(atype AnimationTrackType, at_position Int) Int {
	return self.ptr.API.Animation_add_track(self, atype, at_position)
}
func (self classAnimation) RemoveTrack(track_idx Int) {
	self.ptr.API.Animation_remove_track(self, track_idx)
}
func (self classAnimation) GetTrackCount() Int {
	return self.ptr.API.Animation_get_track_count(self)
}
func (self classAnimation) TrackGetType(track_idx Int) AnimationTrackType {
	return self.ptr.API.Animation_track_get_type(self, track_idx)
}
func (self classAnimation) TrackGetPath(track_idx Int) NodePath {
	return self.ptr.API.Animation_track_get_path(self, track_idx)
}
func (self classAnimation) TrackSetPath(track_idx Int, path NodePath) {
	self.ptr.API.Animation_track_set_path(self, track_idx, path)
}
func (self classAnimation) FindTrack(path NodePath, atype AnimationTrackType) Int {
	return self.ptr.API.Animation_find_track(self, path, atype)
}
func (self classAnimation) TrackMoveUp(track_idx Int) {
	self.ptr.API.Animation_track_move_up(self, track_idx)
}
func (self classAnimation) TrackMoveDown(track_idx Int) {
	self.ptr.API.Animation_track_move_down(self, track_idx)
}
func (self classAnimation) TrackMoveTo(track_idx Int, to_idx Int) {
	self.ptr.API.Animation_track_move_to(self, track_idx, to_idx)
}
func (self classAnimation) TrackSwap(track_idx Int, with_idx Int) {
	self.ptr.API.Animation_track_swap(self, track_idx, with_idx)
}
func (self classAnimation) TrackSetImported(track_idx Int, imported bool) {
	self.ptr.API.Animation_track_set_imported(self, track_idx, imported)
}
func (self classAnimation) TrackIsImported(track_idx Int) bool {
	return self.ptr.API.Animation_track_is_imported(self, track_idx)
}
func (self classAnimation) TrackSetEnabled(track_idx Int, enabled bool) {
	self.ptr.API.Animation_track_set_enabled(self, track_idx, enabled)
}
func (self classAnimation) TrackIsEnabled(track_idx Int) bool {
	return self.ptr.API.Animation_track_is_enabled(self, track_idx)
}
func (self classAnimation) PositionTrackInsertKey(track_idx Int, time Float, position Vector3) Int {
	return self.ptr.API.Animation_position_track_insert_key(self, track_idx, time, position)
}
func (self classAnimation) RotationTrackInsertKey(track_idx Int, time Float, rotation Quaternion) Int {
	return self.ptr.API.Animation_rotation_track_insert_key(self, track_idx, time, rotation)
}
func (self classAnimation) ScaleTrackInsertKey(track_idx Int, time Float, scale Vector3) Int {
	return self.ptr.API.Animation_scale_track_insert_key(self, track_idx, time, scale)
}
func (self classAnimation) BlendShapeTrackInsertKey(track_idx Int, time Float, amount Float) Int {
	return self.ptr.API.Animation_blend_shape_track_insert_key(self, track_idx, time, amount)
}
func (self classAnimation) PositionTrackInterpolate(track_idx Int, time_sec Float) Vector3 {
	return self.ptr.API.Animation_position_track_interpolate(self, track_idx, time_sec)
}
func (self classAnimation) RotationTrackInterpolate(track_idx Int, time_sec Float) Quaternion {
	return self.ptr.API.Animation_rotation_track_interpolate(self, track_idx, time_sec)
}
func (self classAnimation) ScaleTrackInterpolate(track_idx Int, time_sec Float) Vector3 {
	return self.ptr.API.Animation_scale_track_interpolate(self, track_idx, time_sec)
}
func (self classAnimation) BlendShapeTrackInterpolate(track_idx Int, time_sec Float) Float {
	return self.ptr.API.Animation_blend_shape_track_interpolate(self, track_idx, time_sec)
}
func (self classAnimation) TrackInsertKey(track_idx Int, time Float, key Variant, transition Float) Int {
	return self.ptr.API.Animation_track_insert_key(self, track_idx, time, key, transition)
}
func (self classAnimation) TrackRemoveKey(track_idx Int, key_idx Int) {
	self.ptr.API.Animation_track_remove_key(self, track_idx, key_idx)
}
func (self classAnimation) TrackRemoveKeyAtTime(track_idx Int, time Float) {
	self.ptr.API.Animation_track_remove_key_at_time(self, track_idx, time)
}
func (self classAnimation) TrackSetKeyValue(track_idx Int, key Int, value Variant) {
	self.ptr.API.Animation_track_set_key_value(self, track_idx, key, value)
}
func (self classAnimation) TrackSetKeyTransition(track_idx Int, key_idx Int, transition Float) {
	self.ptr.API.Animation_track_set_key_transition(self, track_idx, key_idx, transition)
}
func (self classAnimation) TrackSetKeyTime(track_idx Int, key_idx Int, time Float) {
	self.ptr.API.Animation_track_set_key_time(self, track_idx, key_idx, time)
}
func (self classAnimation) TrackGetKeyTransition(track_idx Int, key_idx Int) Float {
	return self.ptr.API.Animation_track_get_key_transition(self, track_idx, key_idx)
}
func (self classAnimation) TrackGetKeyCount(track_idx Int) Int {
	return self.ptr.API.Animation_track_get_key_count(self, track_idx)
}
func (self classAnimation) TrackGetKeyValue(track_idx Int, key_idx Int) Variant {
	return self.ptr.API.Animation_track_get_key_value(self, track_idx, key_idx)
}
func (self classAnimation) TrackGetKeyTime(track_idx Int, key_idx Int) Float {
	return self.ptr.API.Animation_track_get_key_time(self, track_idx, key_idx)
}
func (self classAnimation) TrackFindKey(track_idx Int, time Float, find_mode AnimationFindMode) Int {
	return self.ptr.API.Animation_track_find_key(self, track_idx, time, find_mode)
}
func (self classAnimation) TrackSetInterpolationType(track_idx Int, interpolation AnimationInterpolationType) {
	self.ptr.API.Animation_track_set_interpolation_type(self, track_idx, interpolation)
}
func (self classAnimation) TrackGetInterpolationType(track_idx Int) AnimationInterpolationType {
	return self.ptr.API.Animation_track_get_interpolation_type(self, track_idx)
}
func (self classAnimation) TrackSetInterpolationLoopWrap(track_idx Int, interpolation bool) {
	self.ptr.API.Animation_track_set_interpolation_loop_wrap(self, track_idx, interpolation)
}
func (self classAnimation) TrackGetInterpolationLoopWrap(track_idx Int) bool {
	return self.ptr.API.Animation_track_get_interpolation_loop_wrap(self, track_idx)
}
func (self classAnimation) TrackIsCompressed(track_idx Int) bool {
	return self.ptr.API.Animation_track_is_compressed(self, track_idx)
}
func (self classAnimation) ValueTrackSetUpdateMode(track_idx Int, mode AnimationUpdateMode) {
	self.ptr.API.Animation_value_track_set_update_mode(self, track_idx, mode)
}
func (self classAnimation) ValueTrackGetUpdateMode(track_idx Int) AnimationUpdateMode {
	return self.ptr.API.Animation_value_track_get_update_mode(self, track_idx)
}
func (self classAnimation) ValueTrackInterpolate(track_idx Int, time_sec Float) Variant {
	return self.ptr.API.Animation_value_track_interpolate(self, track_idx, time_sec)
}
func (self classAnimation) MethodTrackGetName(track_idx Int, key_idx Int) StringName {
	return self.ptr.API.Animation_method_track_get_name(self, track_idx, key_idx)
}
func (self classAnimation) MethodTrackGetParams(track_idx Int, key_idx Int) Array {
	return self.ptr.API.Animation_method_track_get_params(self, track_idx, key_idx)
}
func (self classAnimation) BezierTrackInsertKey(track_idx Int, time Float, value Float, in_handle Vector2, out_handle Vector2) Int {
	return self.ptr.API.Animation_bezier_track_insert_key(self, track_idx, time, value, in_handle, out_handle)
}
func (self classAnimation) BezierTrackSetKeyValue(track_idx Int, key_idx Int, value Float) {
	self.ptr.API.Animation_bezier_track_set_key_value(self, track_idx, key_idx, value)
}
func (self classAnimation) BezierTrackSetKeyInHandle(track_idx Int, key_idx Int, in_handle Vector2, balanced_value_time_ratio Float) {
	self.ptr.API.Animation_bezier_track_set_key_in_handle(self, track_idx, key_idx, in_handle, balanced_value_time_ratio)
}
func (self classAnimation) BezierTrackSetKeyOutHandle(track_idx Int, key_idx Int, out_handle Vector2, balanced_value_time_ratio Float) {
	self.ptr.API.Animation_bezier_track_set_key_out_handle(self, track_idx, key_idx, out_handle, balanced_value_time_ratio)
}
func (self classAnimation) BezierTrackGetKeyValue(track_idx Int, key_idx Int) Float {
	return self.ptr.API.Animation_bezier_track_get_key_value(self, track_idx, key_idx)
}
func (self classAnimation) BezierTrackGetKeyInHandle(track_idx Int, key_idx Int) Vector2 {
	return self.ptr.API.Animation_bezier_track_get_key_in_handle(self, track_idx, key_idx)
}
func (self classAnimation) BezierTrackGetKeyOutHandle(track_idx Int, key_idx Int) Vector2 {
	return self.ptr.API.Animation_bezier_track_get_key_out_handle(self, track_idx, key_idx)
}
func (self classAnimation) BezierTrackInterpolate(track_idx Int, time Float) Float {
	return self.ptr.API.Animation_bezier_track_interpolate(self, track_idx, time)
}
func (self classAnimation) AudioTrackInsertKey(track_idx Int, time Float, stream Resource, start_offset Float, end_offset Float) Int {
	return self.ptr.API.Animation_audio_track_insert_key(self, track_idx, time, stream, start_offset, end_offset)
}
func (self classAnimation) AudioTrackSetKeyStream(track_idx Int, key_idx Int, stream Resource) {
	self.ptr.API.Animation_audio_track_set_key_stream(self, track_idx, key_idx, stream)
}
func (self classAnimation) AudioTrackSetKeyStartOffset(track_idx Int, key_idx Int, offset Float) {
	self.ptr.API.Animation_audio_track_set_key_start_offset(self, track_idx, key_idx, offset)
}
func (self classAnimation) AudioTrackSetKeyEndOffset(track_idx Int, key_idx Int, offset Float) {
	self.ptr.API.Animation_audio_track_set_key_end_offset(self, track_idx, key_idx, offset)
}
func (self classAnimation) AudioTrackGetKeyStream(track_idx Int, key_idx Int) Resource {
	return self.ptr.API.Animation_audio_track_get_key_stream(self, track_idx, key_idx)
}
func (self classAnimation) AudioTrackGetKeyStartOffset(track_idx Int, key_idx Int) Float {
	return self.ptr.API.Animation_audio_track_get_key_start_offset(self, track_idx, key_idx)
}
func (self classAnimation) AudioTrackGetKeyEndOffset(track_idx Int, key_idx Int) Float {
	return self.ptr.API.Animation_audio_track_get_key_end_offset(self, track_idx, key_idx)
}
func (self classAnimation) AudioTrackSetUseBlend(track_idx Int, enable bool) {
	self.ptr.API.Animation_audio_track_set_use_blend(self, track_idx, enable)
}
func (self classAnimation) AudioTrackIsUseBlend(track_idx Int) bool {
	return self.ptr.API.Animation_audio_track_is_use_blend(self, track_idx)
}
func (self classAnimation) AnimationTrackInsertKey(track_idx Int, time Float, animation StringName) Int {
	return self.ptr.API.Animation_animation_track_insert_key(self, track_idx, time, animation)
}
func (self classAnimation) AnimationTrackSetKeyAnimation(track_idx Int, key_idx Int, animation StringName) {
	self.ptr.API.Animation_animation_track_set_key_animation(self, track_idx, key_idx, animation)
}
func (self classAnimation) AnimationTrackGetKeyAnimation(track_idx Int, key_idx Int) StringName {
	return self.ptr.API.Animation_animation_track_get_key_animation(self, track_idx, key_idx)
}
func (self classAnimation) SetLength(time_sec Float) {
	self.ptr.API.Animation_set_length(self, time_sec)
}
func (self classAnimation) GetLength() Float {
	return self.ptr.API.Animation_get_length(self)
}
func (self classAnimation) SetLoopMode(loop_mode AnimationLoopMode) {
	self.ptr.API.Animation_set_loop_mode(self, loop_mode)
}
func (self classAnimation) GetLoopMode() AnimationLoopMode {
	return self.ptr.API.Animation_get_loop_mode(self)
}
func (self classAnimation) SetStep(size_sec Float) {
	self.ptr.API.Animation_set_step(self, size_sec)
}
func (self classAnimation) GetStep() Float {
	return self.ptr.API.Animation_get_step(self)
}
func (self classAnimation) Clear() {
	self.ptr.API.Animation_clear(self)
}
func (self classAnimation) CopyTrack(track_idx Int, to_animation Animation) {
	self.ptr.API.Animation_copy_track(self, track_idx, to_animation)
}
func (self classAnimation) Compress(page_size Int, fps Int, split_tolerance Float) {
	self.ptr.API.Animation_compress(self, page_size, fps, split_tolerance)
}

type classAnimationLibrary struct{ Class[classAnimationLibrary] }

func (self classAnimationLibrary) Super() Resource {
	var super Resource
	super.ptr = self.ptr
	return super
}

func (self classAnimationLibrary) Resource() Resource { return self.Super() }
func (self classAnimationLibrary) AddAnimation(name StringName, animation Animation) int64 {
	return self.ptr.API.AnimationLibrary_add_animation(self, name, animation)
}
func (self classAnimationLibrary) RemoveAnimation(name StringName) {
	self.ptr.API.AnimationLibrary_remove_animation(self, name)
}
func (self classAnimationLibrary) RenameAnimation(name StringName, newname StringName) {
	self.ptr.API.AnimationLibrary_rename_animation(self, name, newname)
}
func (self classAnimationLibrary) HasAnimation(name StringName) bool {
	return self.ptr.API.AnimationLibrary_has_animation(self, name)
}
func (self classAnimationLibrary) GetAnimation(name StringName) Animation {
	return self.ptr.API.AnimationLibrary_get_animation(self, name)
}
func (self classAnimationLibrary) GetAnimationList() ArrayOf[StringName] {
	return self.ptr.API.AnimationLibrary_get_animation_list(self)
}

type classAnimationMixer struct{ Class[classAnimationMixer] }

func (self classAnimationMixer) Super() Node { var super Node; super.ptr = self.ptr; return super }

func (self classAnimationMixer) Node() Node { return self.Super() }
func (self classAnimationMixer) AddAnimationLibrary(name StringName, library AnimationLibrary) int64 {
	return self.ptr.API.AnimationMixer_add_animation_library(self, name, library)
}
func (self classAnimationMixer) RemoveAnimationLibrary(name StringName) {
	self.ptr.API.AnimationMixer_remove_animation_library(self, name)
}
func (self classAnimationMixer) RenameAnimationLibrary(name StringName, newname StringName) {
	self.ptr.API.AnimationMixer_rename_animation_library(self, name, newname)
}
func (self classAnimationMixer) HasAnimationLibrary(name StringName) bool {
	return self.ptr.API.AnimationMixer_has_animation_library(self, name)
}
func (self classAnimationMixer) GetAnimationLibrary(name StringName) AnimationLibrary {
	return self.ptr.API.AnimationMixer_get_animation_library(self, name)
}
func (self classAnimationMixer) GetAnimationLibraryList() ArrayOf[StringName] {
	return self.ptr.API.AnimationMixer_get_animation_library_list(self)
}
func (self classAnimationMixer) HasAnimation(name StringName) bool {
	return self.ptr.API.AnimationMixer_has_animation(self, name)
}
func (self classAnimationMixer) GetAnimation(name StringName) Animation {
	return self.ptr.API.AnimationMixer_get_animation(self, name)
}
func (self classAnimationMixer) GetAnimationList() PackedStringArray {
	return self.ptr.API.AnimationMixer_get_animation_list(self)
}
func (self classAnimationMixer) SetActive(active bool) {
	self.ptr.API.AnimationMixer_set_active(self, active)
}
func (self classAnimationMixer) IsActive() bool {
	return self.ptr.API.AnimationMixer_is_active(self)
}
func (self classAnimationMixer) SetDeterministic(deterministic bool) {
	self.ptr.API.AnimationMixer_set_deterministic(self, deterministic)
}
func (self classAnimationMixer) IsDeterministic() bool {
	return self.ptr.API.AnimationMixer_is_deterministic(self)
}
func (self classAnimationMixer) SetRootNode(path NodePath) {
	self.ptr.API.AnimationMixer_set_root_node(self, path)
}
func (self classAnimationMixer) GetRootNode() NodePath {
	return self.ptr.API.AnimationMixer_get_root_node(self)
}
func (self classAnimationMixer) SetCallbackModeProcess(mode AnimationMixerAnimationCallbackModeProcess) {
	self.ptr.API.AnimationMixer_set_callback_mode_process(self, mode)
}
func (self classAnimationMixer) GetCallbackModeProcess() AnimationMixerAnimationCallbackModeProcess {
	return self.ptr.API.AnimationMixer_get_callback_mode_process(self)
}
func (self classAnimationMixer) SetCallbackModeMethod(mode AnimationMixerAnimationCallbackModeMethod) {
	self.ptr.API.AnimationMixer_set_callback_mode_method(self, mode)
}
func (self classAnimationMixer) GetCallbackModeMethod() AnimationMixerAnimationCallbackModeMethod {
	return self.ptr.API.AnimationMixer_get_callback_mode_method(self)
}
func (self classAnimationMixer) SetAudioMaxPolyphony(max_polyphony Int) {
	self.ptr.API.AnimationMixer_set_audio_max_polyphony(self, max_polyphony)
}
func (self classAnimationMixer) GetAudioMaxPolyphony() Int {
	return self.ptr.API.AnimationMixer_get_audio_max_polyphony(self)
}
func (self classAnimationMixer) SetRootMotionTrack(path NodePath) {
	self.ptr.API.AnimationMixer_set_root_motion_track(self, path)
}
func (self classAnimationMixer) GetRootMotionTrack() NodePath {
	return self.ptr.API.AnimationMixer_get_root_motion_track(self)
}
func (self classAnimationMixer) GetRootMotionPosition() Vector3 {
	return self.ptr.API.AnimationMixer_get_root_motion_position(self)
}
func (self classAnimationMixer) GetRootMotionRotation() Quaternion {
	return self.ptr.API.AnimationMixer_get_root_motion_rotation(self)
}
func (self classAnimationMixer) GetRootMotionScale() Vector3 {
	return self.ptr.API.AnimationMixer_get_root_motion_scale(self)
}
func (self classAnimationMixer) GetRootMotionPositionAccumulator() Vector3 {
	return self.ptr.API.AnimationMixer_get_root_motion_position_accumulator(self)
}
func (self classAnimationMixer) GetRootMotionRotationAccumulator() Quaternion {
	return self.ptr.API.AnimationMixer_get_root_motion_rotation_accumulator(self)
}
func (self classAnimationMixer) GetRootMotionScaleAccumulator() Vector3 {
	return self.ptr.API.AnimationMixer_get_root_motion_scale_accumulator(self)
}
func (self classAnimationMixer) ClearCaches() {
	self.ptr.API.AnimationMixer_clear_caches(self)
}
func (self classAnimationMixer) Advance(delta Float) {
	self.ptr.API.AnimationMixer_advance(self, delta)
}
func (self classAnimationMixer) SetResetOnSaveEnabled(enabled bool) {
	self.ptr.API.AnimationMixer_set_reset_on_save_enabled(self, enabled)
}
func (self classAnimationMixer) IsResetOnSaveEnabled() bool {
	return self.ptr.API.AnimationMixer_is_reset_on_save_enabled(self)
}
func (self classAnimationMixer) FindAnimation(animation Animation) StringName {
	return self.ptr.API.AnimationMixer_find_animation(self, animation)
}
func (self classAnimationMixer) FindAnimationLibrary(animation Animation) StringName {
	return self.ptr.API.AnimationMixer_find_animation_library(self, animation)
}

type classAnimationNode struct{ Class[classAnimationNode] }

func (self classAnimationNode) Super() Resource {
	var super Resource
	super.ptr = self.ptr
	return super
}

func (self classAnimationNode) Resource() Resource { return self.Super() }
func (self classAnimationNode) AddInput(name String) bool {
	return self.ptr.API.AnimationNode_add_input(self, name)
}
func (self classAnimationNode) RemoveInput(index Int) {
	self.ptr.API.AnimationNode_remove_input(self, index)
}
func (self classAnimationNode) SetInputName(input Int, name String) bool {
	return self.ptr.API.AnimationNode_set_input_name(self, input, name)
}
func (self classAnimationNode) GetInputName(input Int) String {
	return self.ptr.API.AnimationNode_get_input_name(self, input)
}
func (self classAnimationNode) GetInputCount() Int {
	return self.ptr.API.AnimationNode_get_input_count(self)
}
func (self classAnimationNode) FindInput(name String) Int {
	return self.ptr.API.AnimationNode_find_input(self, name)
}
func (self classAnimationNode) SetFilterPath(path NodePath, enable bool) {
	self.ptr.API.AnimationNode_set_filter_path(self, path, enable)
}
func (self classAnimationNode) IsPathFiltered(path NodePath) bool {
	return self.ptr.API.AnimationNode_is_path_filtered(self, path)
}
func (self classAnimationNode) SetFilterEnabled(enable bool) {
	self.ptr.API.AnimationNode_set_filter_enabled(self, enable)
}
func (self classAnimationNode) IsFilterEnabled() bool {
	return self.ptr.API.AnimationNode_is_filter_enabled(self)
}
func (self classAnimationNode) BlendAnimation(animation StringName, time Float, delta Float, seeked bool, is_external_seeking bool, blend Float, looped_flag AnimationLoopedFlag) {
	self.ptr.API.AnimationNode_blend_animation(self, animation, time, delta, seeked, is_external_seeking, blend, looped_flag)
}
func (self classAnimationNode) BlendNode(name StringName, node AnimationNode, time Float, seek bool, is_external_seeking bool, blend Float, filter AnimationNodeFilterAction, sync bool, test_only bool) Float {
	return self.ptr.API.AnimationNode_blend_node(self, name, node, time, seek, is_external_seeking, blend, filter, sync, test_only)
}
func (self classAnimationNode) BlendInput(input_index Int, time Float, seek bool, is_external_seeking bool, blend Float, filter AnimationNodeFilterAction, sync bool, test_only bool) Float {
	return self.ptr.API.AnimationNode_blend_input(self, input_index, time, seek, is_external_seeking, blend, filter, sync, test_only)
}
func (self classAnimationNode) SetParameter(name StringName, value Variant) {
	self.ptr.API.AnimationNode_set_parameter(self, name, value)
}
func (self classAnimationNode) GetParameter(name StringName) Variant {
	return self.ptr.API.AnimationNode_get_parameter(self, name)
}

type classAnimationNodeAdd2 struct{ Class[classAnimationNodeAdd2] }

func (self classAnimationNodeAdd2) Super() AnimationNodeSync {
	var super AnimationNodeSync
	super.ptr = self.ptr
	return super
}

func (self classAnimationNodeAdd2) AnimationNodeSync() AnimationNodeSync { return self.Super() }

type classAnimationNodeAdd3 struct{ Class[classAnimationNodeAdd3] }

func (self classAnimationNodeAdd3) Super() AnimationNodeSync {
	var super AnimationNodeSync
	super.ptr = self.ptr
	return super
}

func (self classAnimationNodeAdd3) AnimationNodeSync() AnimationNodeSync { return self.Super() }

type classAnimationNodeAnimation struct {
	Class[classAnimationNodeAnimation]
}

func (self classAnimationNodeAnimation) Super() AnimationRootNode {
	var super AnimationRootNode
	super.ptr = self.ptr
	return super
}

func (self classAnimationNodeAnimation) AnimationRootNode() AnimationRootNode { return self.Super() }
func (self classAnimationNodeAnimation) SetAnimation(name StringName) {
	self.ptr.API.AnimationNodeAnimation_set_animation(self, name)
}
func (self classAnimationNodeAnimation) GetAnimation() StringName {
	return self.ptr.API.AnimationNodeAnimation_get_animation(self)
}
func (self classAnimationNodeAnimation) SetPlayMode(mode AnimationNodeAnimationPlayMode) {
	self.ptr.API.AnimationNodeAnimation_set_play_mode(self, mode)
}
func (self classAnimationNodeAnimation) GetPlayMode() AnimationNodeAnimationPlayMode {
	return self.ptr.API.AnimationNodeAnimation_get_play_mode(self)
}

type classAnimationNodeBlend2 struct {
	Class[classAnimationNodeBlend2]
}

func (self classAnimationNodeBlend2) Super() AnimationNodeSync {
	var super AnimationNodeSync
	super.ptr = self.ptr
	return super
}

func (self classAnimationNodeBlend2) AnimationNodeSync() AnimationNodeSync { return self.Super() }

type classAnimationNodeBlend3 struct {
	Class[classAnimationNodeBlend3]
}

func (self classAnimationNodeBlend3) Super() AnimationNodeSync {
	var super AnimationNodeSync
	super.ptr = self.ptr
	return super
}

func (self classAnimationNodeBlend3) AnimationNodeSync() AnimationNodeSync { return self.Super() }

type classAnimationNodeBlendSpace1D struct {
	Class[classAnimationNodeBlendSpace1D]
}

func (self classAnimationNodeBlendSpace1D) Super() AnimationRootNode {
	var super AnimationRootNode
	super.ptr = self.ptr
	return super
}

func (self classAnimationNodeBlendSpace1D) AnimationRootNode() AnimationRootNode { return self.Super() }
func (self classAnimationNodeBlendSpace1D) AddBlendPoint(node AnimationRootNode, pos Float, at_index Int) {
	self.ptr.API.AnimationNodeBlendSpace1D_add_blend_point(self, node, pos, at_index)
}
func (self classAnimationNodeBlendSpace1D) SetBlendPointPosition(point Int, pos Float) {
	self.ptr.API.AnimationNodeBlendSpace1D_set_blend_point_position(self, point, pos)
}
func (self classAnimationNodeBlendSpace1D) GetBlendPointPosition(point Int) Float {
	return self.ptr.API.AnimationNodeBlendSpace1D_get_blend_point_position(self, point)
}
func (self classAnimationNodeBlendSpace1D) SetBlendPointNode(point Int, node AnimationRootNode) {
	self.ptr.API.AnimationNodeBlendSpace1D_set_blend_point_node(self, point, node)
}
func (self classAnimationNodeBlendSpace1D) GetBlendPointNode(point Int) AnimationRootNode {
	return self.ptr.API.AnimationNodeBlendSpace1D_get_blend_point_node(self, point)
}
func (self classAnimationNodeBlendSpace1D) RemoveBlendPoint(point Int) {
	self.ptr.API.AnimationNodeBlendSpace1D_remove_blend_point(self, point)
}
func (self classAnimationNodeBlendSpace1D) GetBlendPointCount() Int {
	return self.ptr.API.AnimationNodeBlendSpace1D_get_blend_point_count(self)
}
func (self classAnimationNodeBlendSpace1D) SetMinSpace(min_space Float) {
	self.ptr.API.AnimationNodeBlendSpace1D_set_min_space(self, min_space)
}
func (self classAnimationNodeBlendSpace1D) GetMinSpace() Float {
	return self.ptr.API.AnimationNodeBlendSpace1D_get_min_space(self)
}
func (self classAnimationNodeBlendSpace1D) SetMaxSpace(max_space Float) {
	self.ptr.API.AnimationNodeBlendSpace1D_set_max_space(self, max_space)
}
func (self classAnimationNodeBlendSpace1D) GetMaxSpace() Float {
	return self.ptr.API.AnimationNodeBlendSpace1D_get_max_space(self)
}
func (self classAnimationNodeBlendSpace1D) SetSnap(snap Float) {
	self.ptr.API.AnimationNodeBlendSpace1D_set_snap(self, snap)
}
func (self classAnimationNodeBlendSpace1D) GetSnap() Float {
	return self.ptr.API.AnimationNodeBlendSpace1D_get_snap(self)
}
func (self classAnimationNodeBlendSpace1D) SetValueLabel(text String) {
	self.ptr.API.AnimationNodeBlendSpace1D_set_value_label(self, text)
}
func (self classAnimationNodeBlendSpace1D) GetValueLabel() String {
	return self.ptr.API.AnimationNodeBlendSpace1D_get_value_label(self)
}
func (self classAnimationNodeBlendSpace1D) SetBlendMode(mode AnimationNodeBlendSpace1DBlendMode) {
	self.ptr.API.AnimationNodeBlendSpace1D_set_blend_mode(self, mode)
}
func (self classAnimationNodeBlendSpace1D) GetBlendMode() AnimationNodeBlendSpace1DBlendMode {
	return self.ptr.API.AnimationNodeBlendSpace1D_get_blend_mode(self)
}
func (self classAnimationNodeBlendSpace1D) SetUseSync(enable bool) {
	self.ptr.API.AnimationNodeBlendSpace1D_set_use_sync(self, enable)
}
func (self classAnimationNodeBlendSpace1D) IsUsingSync() bool {
	return self.ptr.API.AnimationNodeBlendSpace1D_is_using_sync(self)
}

type classAnimationNodeBlendSpace2D struct {
	Class[classAnimationNodeBlendSpace2D]
}

func (self classAnimationNodeBlendSpace2D) Super() AnimationRootNode {
	var super AnimationRootNode
	super.ptr = self.ptr
	return super
}

func (self classAnimationNodeBlendSpace2D) AnimationRootNode() AnimationRootNode { return self.Super() }
func (self classAnimationNodeBlendSpace2D) AddBlendPoint(node AnimationRootNode, pos Vector2, at_index Int) {
	self.ptr.API.AnimationNodeBlendSpace2D_add_blend_point(self, node, pos, at_index)
}
func (self classAnimationNodeBlendSpace2D) SetBlendPointPosition(point Int, pos Vector2) {
	self.ptr.API.AnimationNodeBlendSpace2D_set_blend_point_position(self, point, pos)
}
func (self classAnimationNodeBlendSpace2D) GetBlendPointPosition(point Int) Vector2 {
	return self.ptr.API.AnimationNodeBlendSpace2D_get_blend_point_position(self, point)
}
func (self classAnimationNodeBlendSpace2D) SetBlendPointNode(point Int, node AnimationRootNode) {
	self.ptr.API.AnimationNodeBlendSpace2D_set_blend_point_node(self, point, node)
}
func (self classAnimationNodeBlendSpace2D) GetBlendPointNode(point Int) AnimationRootNode {
	return self.ptr.API.AnimationNodeBlendSpace2D_get_blend_point_node(self, point)
}
func (self classAnimationNodeBlendSpace2D) RemoveBlendPoint(point Int) {
	self.ptr.API.AnimationNodeBlendSpace2D_remove_blend_point(self, point)
}
func (self classAnimationNodeBlendSpace2D) GetBlendPointCount() Int {
	return self.ptr.API.AnimationNodeBlendSpace2D_get_blend_point_count(self)
}
func (self classAnimationNodeBlendSpace2D) AddTriangle(x Int, y Int, z Int, at_index Int) {
	self.ptr.API.AnimationNodeBlendSpace2D_add_triangle(self, x, y, z, at_index)
}
func (self classAnimationNodeBlendSpace2D) GetTrianglePoint(triangle Int, point Int) Int {
	return self.ptr.API.AnimationNodeBlendSpace2D_get_triangle_point(self, triangle, point)
}
func (self classAnimationNodeBlendSpace2D) RemoveTriangle(triangle Int) {
	self.ptr.API.AnimationNodeBlendSpace2D_remove_triangle(self, triangle)
}
func (self classAnimationNodeBlendSpace2D) GetTriangleCount() Int {
	return self.ptr.API.AnimationNodeBlendSpace2D_get_triangle_count(self)
}
func (self classAnimationNodeBlendSpace2D) SetMinSpace(min_space Vector2) {
	self.ptr.API.AnimationNodeBlendSpace2D_set_min_space(self, min_space)
}
func (self classAnimationNodeBlendSpace2D) GetMinSpace() Vector2 {
	return self.ptr.API.AnimationNodeBlendSpace2D_get_min_space(self)
}
func (self classAnimationNodeBlendSpace2D) SetMaxSpace(max_space Vector2) {
	self.ptr.API.AnimationNodeBlendSpace2D_set_max_space(self, max_space)
}
func (self classAnimationNodeBlendSpace2D) GetMaxSpace() Vector2 {
	return self.ptr.API.AnimationNodeBlendSpace2D_get_max_space(self)
}
func (self classAnimationNodeBlendSpace2D) SetSnap(snap Vector2) {
	self.ptr.API.AnimationNodeBlendSpace2D_set_snap(self, snap)
}
func (self classAnimationNodeBlendSpace2D) GetSnap() Vector2 {
	return self.ptr.API.AnimationNodeBlendSpace2D_get_snap(self)
}
func (self classAnimationNodeBlendSpace2D) SetXLabel(text String) {
	self.ptr.API.AnimationNodeBlendSpace2D_set_x_label(self, text)
}
func (self classAnimationNodeBlendSpace2D) GetXLabel() String {
	return self.ptr.API.AnimationNodeBlendSpace2D_get_x_label(self)
}
func (self classAnimationNodeBlendSpace2D) SetYLabel(text String) {
	self.ptr.API.AnimationNodeBlendSpace2D_set_y_label(self, text)
}
func (self classAnimationNodeBlendSpace2D) GetYLabel() String {
	return self.ptr.API.AnimationNodeBlendSpace2D_get_y_label(self)
}
func (self classAnimationNodeBlendSpace2D) SetAutoTriangles(enable bool) {
	self.ptr.API.AnimationNodeBlendSpace2D_set_auto_triangles(self, enable)
}
func (self classAnimationNodeBlendSpace2D) GetAutoTriangles() bool {
	return self.ptr.API.AnimationNodeBlendSpace2D_get_auto_triangles(self)
}
func (self classAnimationNodeBlendSpace2D) SetBlendMode(mode AnimationNodeBlendSpace2DBlendMode) {
	self.ptr.API.AnimationNodeBlendSpace2D_set_blend_mode(self, mode)
}
func (self classAnimationNodeBlendSpace2D) GetBlendMode() AnimationNodeBlendSpace2DBlendMode {
	return self.ptr.API.AnimationNodeBlendSpace2D_get_blend_mode(self)
}
func (self classAnimationNodeBlendSpace2D) SetUseSync(enable bool) {
	self.ptr.API.AnimationNodeBlendSpace2D_set_use_sync(self, enable)
}
func (self classAnimationNodeBlendSpace2D) IsUsingSync() bool {
	return self.ptr.API.AnimationNodeBlendSpace2D_is_using_sync(self)
}

type classAnimationNodeBlendTree struct {
	Class[classAnimationNodeBlendTree]
}

func (self classAnimationNodeBlendTree) Super() AnimationRootNode {
	var super AnimationRootNode
	super.ptr = self.ptr
	return super
}

func (self classAnimationNodeBlendTree) AnimationRootNode() AnimationRootNode { return self.Super() }
func (self classAnimationNodeBlendTree) AddNode(name StringName, node AnimationNode, position Vector2) {
	self.ptr.API.AnimationNodeBlendTree_add_node(self, name, node, position)
}
func (self classAnimationNodeBlendTree) GetNode(name StringName) AnimationNode {
	return self.ptr.API.AnimationNodeBlendTree_get_node(self, name)
}
func (self classAnimationNodeBlendTree) RemoveNode(name StringName) {
	self.ptr.API.AnimationNodeBlendTree_remove_node(self, name)
}
func (self classAnimationNodeBlendTree) RenameNode(name StringName, new_name StringName) {
	self.ptr.API.AnimationNodeBlendTree_rename_node(self, name, new_name)
}
func (self classAnimationNodeBlendTree) HasNode(name StringName) bool {
	return self.ptr.API.AnimationNodeBlendTree_has_node(self, name)
}
func (self classAnimationNodeBlendTree) ConnectNode(input_node StringName, input_index Int, output_node StringName) {
	self.ptr.API.AnimationNodeBlendTree_connect_node(self, input_node, input_index, output_node)
}
func (self classAnimationNodeBlendTree) DisconnectNode(input_node StringName, input_index Int) {
	self.ptr.API.AnimationNodeBlendTree_disconnect_node(self, input_node, input_index)
}
func (self classAnimationNodeBlendTree) SetNodePosition(name StringName, position Vector2) {
	self.ptr.API.AnimationNodeBlendTree_set_node_position(self, name, position)
}
func (self classAnimationNodeBlendTree) GetNodePosition(name StringName) Vector2 {
	return self.ptr.API.AnimationNodeBlendTree_get_node_position(self, name)
}
func (self classAnimationNodeBlendTree) SetGraphOffset(offset Vector2) {
	self.ptr.API.AnimationNodeBlendTree_set_graph_offset(self, offset)
}
func (self classAnimationNodeBlendTree) GetGraphOffset() Vector2 {
	return self.ptr.API.AnimationNodeBlendTree_get_graph_offset(self)
}

type classAnimationNodeOneShot struct {
	Class[classAnimationNodeOneShot]
}

func (self classAnimationNodeOneShot) Super() AnimationNodeSync {
	var super AnimationNodeSync
	super.ptr = self.ptr
	return super
}

func (self classAnimationNodeOneShot) AnimationNodeSync() AnimationNodeSync { return self.Super() }
func (self classAnimationNodeOneShot) SetFadeinTime(time Float) {
	self.ptr.API.AnimationNodeOneShot_set_fadein_time(self, time)
}
func (self classAnimationNodeOneShot) GetFadeinTime() Float {
	return self.ptr.API.AnimationNodeOneShot_get_fadein_time(self)
}
func (self classAnimationNodeOneShot) SetFadeinCurve(curve Curve) {
	self.ptr.API.AnimationNodeOneShot_set_fadein_curve(self, curve)
}
func (self classAnimationNodeOneShot) GetFadeinCurve() Curve {
	return self.ptr.API.AnimationNodeOneShot_get_fadein_curve(self)
}
func (self classAnimationNodeOneShot) SetFadeoutTime(time Float) {
	self.ptr.API.AnimationNodeOneShot_set_fadeout_time(self, time)
}
func (self classAnimationNodeOneShot) GetFadeoutTime() Float {
	return self.ptr.API.AnimationNodeOneShot_get_fadeout_time(self)
}
func (self classAnimationNodeOneShot) SetFadeoutCurve(curve Curve) {
	self.ptr.API.AnimationNodeOneShot_set_fadeout_curve(self, curve)
}
func (self classAnimationNodeOneShot) GetFadeoutCurve() Curve {
	return self.ptr.API.AnimationNodeOneShot_get_fadeout_curve(self)
}
func (self classAnimationNodeOneShot) SetAutorestart(active bool) {
	self.ptr.API.AnimationNodeOneShot_set_autorestart(self, active)
}
func (self classAnimationNodeOneShot) HasAutorestart() bool {
	return self.ptr.API.AnimationNodeOneShot_has_autorestart(self)
}
func (self classAnimationNodeOneShot) SetAutorestartDelay(time Float) {
	self.ptr.API.AnimationNodeOneShot_set_autorestart_delay(self, time)
}
func (self classAnimationNodeOneShot) GetAutorestartDelay() Float {
	return self.ptr.API.AnimationNodeOneShot_get_autorestart_delay(self)
}
func (self classAnimationNodeOneShot) SetAutorestartRandomDelay(time Float) {
	self.ptr.API.AnimationNodeOneShot_set_autorestart_random_delay(self, time)
}
func (self classAnimationNodeOneShot) GetAutorestartRandomDelay() Float {
	return self.ptr.API.AnimationNodeOneShot_get_autorestart_random_delay(self)
}
func (self classAnimationNodeOneShot) SetMixMode(mode AnimationNodeOneShotMixMode) {
	self.ptr.API.AnimationNodeOneShot_set_mix_mode(self, mode)
}
func (self classAnimationNodeOneShot) GetMixMode() AnimationNodeOneShotMixMode {
	return self.ptr.API.AnimationNodeOneShot_get_mix_mode(self)
}

type classAnimationNodeOutput struct {
	Class[classAnimationNodeOutput]
}

func (self classAnimationNodeOutput) Super() AnimationNode {
	var super AnimationNode
	super.ptr = self.ptr
	return super
}

func (self classAnimationNodeOutput) AnimationNode() AnimationNode { return self.Super() }

type classAnimationNodeStateMachine struct {
	Class[classAnimationNodeStateMachine]
}

func (self classAnimationNodeStateMachine) Super() AnimationRootNode {
	var super AnimationRootNode
	super.ptr = self.ptr
	return super
}

func (self classAnimationNodeStateMachine) AnimationRootNode() AnimationRootNode { return self.Super() }
func (self classAnimationNodeStateMachine) AddNode(name StringName, node AnimationNode, position Vector2) {
	self.ptr.API.AnimationNodeStateMachine_add_node(self, name, node, position)
}
func (self classAnimationNodeStateMachine) ReplaceNode(name StringName, node AnimationNode) {
	self.ptr.API.AnimationNodeStateMachine_replace_node(self, name, node)
}
func (self classAnimationNodeStateMachine) GetNode(name StringName) AnimationNode {
	return self.ptr.API.AnimationNodeStateMachine_get_node(self, name)
}
func (self classAnimationNodeStateMachine) RemoveNode(name StringName) {
	self.ptr.API.AnimationNodeStateMachine_remove_node(self, name)
}
func (self classAnimationNodeStateMachine) RenameNode(name StringName, new_name StringName) {
	self.ptr.API.AnimationNodeStateMachine_rename_node(self, name, new_name)
}
func (self classAnimationNodeStateMachine) HasNode(name StringName) bool {
	return self.ptr.API.AnimationNodeStateMachine_has_node(self, name)
}
func (self classAnimationNodeStateMachine) GetNodeName(node AnimationNode) StringName {
	return self.ptr.API.AnimationNodeStateMachine_get_node_name(self, node)
}
func (self classAnimationNodeStateMachine) SetNodePosition(name StringName, position Vector2) {
	self.ptr.API.AnimationNodeStateMachine_set_node_position(self, name, position)
}
func (self classAnimationNodeStateMachine) GetNodePosition(name StringName) Vector2 {
	return self.ptr.API.AnimationNodeStateMachine_get_node_position(self, name)
}
func (self classAnimationNodeStateMachine) HasTransition(from StringName, to StringName) bool {
	return self.ptr.API.AnimationNodeStateMachine_has_transition(self, from, to)
}
func (self classAnimationNodeStateMachine) AddTransition(from StringName, to StringName, transition AnimationNodeStateMachineTransition) {
	self.ptr.API.AnimationNodeStateMachine_add_transition(self, from, to, transition)
}
func (self classAnimationNodeStateMachine) GetTransition(idx Int) AnimationNodeStateMachineTransition {
	return self.ptr.API.AnimationNodeStateMachine_get_transition(self, idx)
}
func (self classAnimationNodeStateMachine) GetTransitionFrom(idx Int) StringName {
	return self.ptr.API.AnimationNodeStateMachine_get_transition_from(self, idx)
}
func (self classAnimationNodeStateMachine) GetTransitionTo(idx Int) StringName {
	return self.ptr.API.AnimationNodeStateMachine_get_transition_to(self, idx)
}
func (self classAnimationNodeStateMachine) GetTransitionCount() Int {
	return self.ptr.API.AnimationNodeStateMachine_get_transition_count(self)
}
func (self classAnimationNodeStateMachine) RemoveTransitionByIndex(idx Int) {
	self.ptr.API.AnimationNodeStateMachine_remove_transition_by_index(self, idx)
}
func (self classAnimationNodeStateMachine) RemoveTransition(from StringName, to StringName) {
	self.ptr.API.AnimationNodeStateMachine_remove_transition(self, from, to)
}
func (self classAnimationNodeStateMachine) SetGraphOffset(offset Vector2) {
	self.ptr.API.AnimationNodeStateMachine_set_graph_offset(self, offset)
}
func (self classAnimationNodeStateMachine) GetGraphOffset() Vector2 {
	return self.ptr.API.AnimationNodeStateMachine_get_graph_offset(self)
}
func (self classAnimationNodeStateMachine) SetStateMachineType(state_machine_type AnimationNodeStateMachineStateMachineType) {
	self.ptr.API.AnimationNodeStateMachine_set_state_machine_type(self, state_machine_type)
}
func (self classAnimationNodeStateMachine) GetStateMachineType() AnimationNodeStateMachineStateMachineType {
	return self.ptr.API.AnimationNodeStateMachine_get_state_machine_type(self)
}
func (self classAnimationNodeStateMachine) SetAllowTransitionToSelf(enable bool) {
	self.ptr.API.AnimationNodeStateMachine_set_allow_transition_to_self(self, enable)
}
func (self classAnimationNodeStateMachine) IsAllowTransitionToSelf() bool {
	return self.ptr.API.AnimationNodeStateMachine_is_allow_transition_to_self(self)
}
func (self classAnimationNodeStateMachine) SetResetEnds(enable bool) {
	self.ptr.API.AnimationNodeStateMachine_set_reset_ends(self, enable)
}
func (self classAnimationNodeStateMachine) AreEndsReset() bool {
	return self.ptr.API.AnimationNodeStateMachine_are_ends_reset(self)
}

type classAnimationNodeStateMachinePlayback struct {
	Class[classAnimationNodeStateMachinePlayback]
}

func (self classAnimationNodeStateMachinePlayback) Super() Resource {
	var super Resource
	super.ptr = self.ptr
	return super
}

func (self classAnimationNodeStateMachinePlayback) Resource() Resource { return self.Super() }
func (self classAnimationNodeStateMachinePlayback) Travel(to_node StringName, reset_on_teleport bool) {
	self.ptr.API.AnimationNodeStateMachinePlayback_travel(self, to_node, reset_on_teleport)
}
func (self classAnimationNodeStateMachinePlayback) Start(node StringName, reset bool) {
	self.ptr.API.AnimationNodeStateMachinePlayback_start(self, node, reset)
}
func (self classAnimationNodeStateMachinePlayback) Next() {
	self.ptr.API.AnimationNodeStateMachinePlayback_next(self)
}
func (self classAnimationNodeStateMachinePlayback) Stop() {
	self.ptr.API.AnimationNodeStateMachinePlayback_stop(self)
}
func (self classAnimationNodeStateMachinePlayback) IsPlaying() bool {
	return self.ptr.API.AnimationNodeStateMachinePlayback_is_playing(self)
}
func (self classAnimationNodeStateMachinePlayback) GetCurrentNode() StringName {
	return self.ptr.API.AnimationNodeStateMachinePlayback_get_current_node(self)
}
func (self classAnimationNodeStateMachinePlayback) GetCurrentPlayPosition() Float {
	return self.ptr.API.AnimationNodeStateMachinePlayback_get_current_play_position(self)
}
func (self classAnimationNodeStateMachinePlayback) GetCurrentLength() Float {
	return self.ptr.API.AnimationNodeStateMachinePlayback_get_current_length(self)
}
func (self classAnimationNodeStateMachinePlayback) GetFadingFromNode() StringName {
	return self.ptr.API.AnimationNodeStateMachinePlayback_get_fading_from_node(self)
}
func (self classAnimationNodeStateMachinePlayback) GetTravelPath() ArrayOf[StringName] {
	return self.ptr.API.AnimationNodeStateMachinePlayback_get_travel_path(self)
}

type classAnimationNodeStateMachineTransition struct {
	Class[classAnimationNodeStateMachineTransition]
}

func (self classAnimationNodeStateMachineTransition) Super() Resource {
	var super Resource
	super.ptr = self.ptr
	return super
}

func (self classAnimationNodeStateMachineTransition) Resource() Resource { return self.Super() }
func (self classAnimationNodeStateMachineTransition) SetSwitchMode(mode AnimationNodeStateMachineTransitionSwitchMode) {
	self.ptr.API.AnimationNodeStateMachineTransition_set_switch_mode(self, mode)
}
func (self classAnimationNodeStateMachineTransition) GetSwitchMode() AnimationNodeStateMachineTransitionSwitchMode {
	return self.ptr.API.AnimationNodeStateMachineTransition_get_switch_mode(self)
}
func (self classAnimationNodeStateMachineTransition) SetAdvanceMode(mode AnimationNodeStateMachineTransitionAdvanceMode) {
	self.ptr.API.AnimationNodeStateMachineTransition_set_advance_mode(self, mode)
}
func (self classAnimationNodeStateMachineTransition) GetAdvanceMode() AnimationNodeStateMachineTransitionAdvanceMode {
	return self.ptr.API.AnimationNodeStateMachineTransition_get_advance_mode(self)
}
func (self classAnimationNodeStateMachineTransition) SetAdvanceCondition(name StringName) {
	self.ptr.API.AnimationNodeStateMachineTransition_set_advance_condition(self, name)
}
func (self classAnimationNodeStateMachineTransition) GetAdvanceCondition() StringName {
	return self.ptr.API.AnimationNodeStateMachineTransition_get_advance_condition(self)
}
func (self classAnimationNodeStateMachineTransition) SetXfadeTime(secs Float) {
	self.ptr.API.AnimationNodeStateMachineTransition_set_xfade_time(self, secs)
}
func (self classAnimationNodeStateMachineTransition) GetXfadeTime() Float {
	return self.ptr.API.AnimationNodeStateMachineTransition_get_xfade_time(self)
}
func (self classAnimationNodeStateMachineTransition) SetXfadeCurve(curve Curve) {
	self.ptr.API.AnimationNodeStateMachineTransition_set_xfade_curve(self, curve)
}
func (self classAnimationNodeStateMachineTransition) GetXfadeCurve() Curve {
	return self.ptr.API.AnimationNodeStateMachineTransition_get_xfade_curve(self)
}
func (self classAnimationNodeStateMachineTransition) SetReset(reset bool) {
	self.ptr.API.AnimationNodeStateMachineTransition_set_reset(self, reset)
}
func (self classAnimationNodeStateMachineTransition) IsReset() bool {
	return self.ptr.API.AnimationNodeStateMachineTransition_is_reset(self)
}
func (self classAnimationNodeStateMachineTransition) SetPriority(priority Int) {
	self.ptr.API.AnimationNodeStateMachineTransition_set_priority(self, priority)
}
func (self classAnimationNodeStateMachineTransition) GetPriority() Int {
	return self.ptr.API.AnimationNodeStateMachineTransition_get_priority(self)
}
func (self classAnimationNodeStateMachineTransition) SetAdvanceExpression(text String) {
	self.ptr.API.AnimationNodeStateMachineTransition_set_advance_expression(self, text)
}
func (self classAnimationNodeStateMachineTransition) GetAdvanceExpression() String {
	return self.ptr.API.AnimationNodeStateMachineTransition_get_advance_expression(self)
}

type classAnimationNodeSub2 struct{ Class[classAnimationNodeSub2] }

func (self classAnimationNodeSub2) Super() AnimationNodeSync {
	var super AnimationNodeSync
	super.ptr = self.ptr
	return super
}

func (self classAnimationNodeSub2) AnimationNodeSync() AnimationNodeSync { return self.Super() }

type classAnimationNodeSync struct{ Class[classAnimationNodeSync] }

func (self classAnimationNodeSync) Super() AnimationNode {
	var super AnimationNode
	super.ptr = self.ptr
	return super
}

func (self classAnimationNodeSync) AnimationNode() AnimationNode { return self.Super() }
func (self classAnimationNodeSync) SetUseSync(enable bool) {
	self.ptr.API.AnimationNodeSync_set_use_sync(self, enable)
}
func (self classAnimationNodeSync) IsUsingSync() bool {
	return self.ptr.API.AnimationNodeSync_is_using_sync(self)
}

type classAnimationNodeTimeScale struct {
	Class[classAnimationNodeTimeScale]
}

func (self classAnimationNodeTimeScale) Super() AnimationNode {
	var super AnimationNode
	super.ptr = self.ptr
	return super
}

func (self classAnimationNodeTimeScale) AnimationNode() AnimationNode { return self.Super() }

type classAnimationNodeTimeSeek struct {
	Class[classAnimationNodeTimeSeek]
}

func (self classAnimationNodeTimeSeek) Super() AnimationNode {
	var super AnimationNode
	super.ptr = self.ptr
	return super
}

func (self classAnimationNodeTimeSeek) AnimationNode() AnimationNode { return self.Super() }

type classAnimationNodeTransition struct {
	Class[classAnimationNodeTransition]
}

func (self classAnimationNodeTransition) Super() AnimationNodeSync {
	var super AnimationNodeSync
	super.ptr = self.ptr
	return super
}

func (self classAnimationNodeTransition) AnimationNodeSync() AnimationNodeSync { return self.Super() }
func (self classAnimationNodeTransition) SetInputCount(input_count Int) {
	self.ptr.API.AnimationNodeTransition_set_input_count(self, input_count)
}
func (self classAnimationNodeTransition) SetInputAsAutoAdvance(input Int, enable bool) {
	self.ptr.API.AnimationNodeTransition_set_input_as_auto_advance(self, input, enable)
}
func (self classAnimationNodeTransition) IsInputSetAsAutoAdvance(input Int) bool {
	return self.ptr.API.AnimationNodeTransition_is_input_set_as_auto_advance(self, input)
}
func (self classAnimationNodeTransition) SetInputReset(input Int, enable bool) {
	self.ptr.API.AnimationNodeTransition_set_input_reset(self, input, enable)
}
func (self classAnimationNodeTransition) IsInputReset(input Int) bool {
	return self.ptr.API.AnimationNodeTransition_is_input_reset(self, input)
}
func (self classAnimationNodeTransition) SetXfadeTime(time Float) {
	self.ptr.API.AnimationNodeTransition_set_xfade_time(self, time)
}
func (self classAnimationNodeTransition) GetXfadeTime() Float {
	return self.ptr.API.AnimationNodeTransition_get_xfade_time(self)
}
func (self classAnimationNodeTransition) SetXfadeCurve(curve Curve) {
	self.ptr.API.AnimationNodeTransition_set_xfade_curve(self, curve)
}
func (self classAnimationNodeTransition) GetXfadeCurve() Curve {
	return self.ptr.API.AnimationNodeTransition_get_xfade_curve(self)
}
func (self classAnimationNodeTransition) SetAllowTransitionToSelf(enable bool) {
	self.ptr.API.AnimationNodeTransition_set_allow_transition_to_self(self, enable)
}
func (self classAnimationNodeTransition) IsAllowTransitionToSelf() bool {
	return self.ptr.API.AnimationNodeTransition_is_allow_transition_to_self(self)
}

type classAnimationPlayer struct{ Class[classAnimationPlayer] }

func (self classAnimationPlayer) Super() AnimationMixer {
	var super AnimationMixer
	super.ptr = self.ptr
	return super
}

func (self classAnimationPlayer) AnimationMixer() AnimationMixer { return self.Super() }
func (self classAnimationPlayer) AnimationSetNext(animation_from StringName, animation_to StringName) {
	self.ptr.API.AnimationPlayer_animation_set_next(self, animation_from, animation_to)
}
func (self classAnimationPlayer) AnimationGetNext(animation_from StringName) StringName {
	return self.ptr.API.AnimationPlayer_animation_get_next(self, animation_from)
}
func (self classAnimationPlayer) SetBlendTime(animation_from StringName, animation_to StringName, sec Float) {
	self.ptr.API.AnimationPlayer_set_blend_time(self, animation_from, animation_to, sec)
}
func (self classAnimationPlayer) GetBlendTime(animation_from StringName, animation_to StringName) Float {
	return self.ptr.API.AnimationPlayer_get_blend_time(self, animation_from, animation_to)
}
func (self classAnimationPlayer) SetDefaultBlendTime(sec Float) {
	self.ptr.API.AnimationPlayer_set_default_blend_time(self, sec)
}
func (self classAnimationPlayer) GetDefaultBlendTime() Float {
	return self.ptr.API.AnimationPlayer_get_default_blend_time(self)
}
func (self classAnimationPlayer) Play(name StringName, custom_blend Float, custom_speed Float, from_end bool) {
	self.ptr.API.AnimationPlayer_play(self, name, custom_blend, custom_speed, from_end)
}
func (self classAnimationPlayer) PlayBackwards(name StringName, custom_blend Float) {
	self.ptr.API.AnimationPlayer_play_backwards(self, name, custom_blend)
}
func (self classAnimationPlayer) Pause() {
	self.ptr.API.AnimationPlayer_pause(self)
}
func (self classAnimationPlayer) Stop(keep_state bool) {
	self.ptr.API.AnimationPlayer_stop(self, keep_state)
}
func (self classAnimationPlayer) IsPlaying() bool {
	return self.ptr.API.AnimationPlayer_is_playing(self)
}
func (self classAnimationPlayer) SetCurrentAnimation(animation String) {
	self.ptr.API.AnimationPlayer_set_current_animation(self, animation)
}
func (self classAnimationPlayer) GetCurrentAnimation() String {
	return self.ptr.API.AnimationPlayer_get_current_animation(self)
}
func (self classAnimationPlayer) SetAssignedAnimation(animation String) {
	self.ptr.API.AnimationPlayer_set_assigned_animation(self, animation)
}
func (self classAnimationPlayer) GetAssignedAnimation() String {
	return self.ptr.API.AnimationPlayer_get_assigned_animation(self)
}
func (self classAnimationPlayer) Queue(name StringName) {
	self.ptr.API.AnimationPlayer_queue(self, name)
}
func (self classAnimationPlayer) GetQueue() PackedStringArray {
	return self.ptr.API.AnimationPlayer_get_queue(self)
}
func (self classAnimationPlayer) ClearQueue() {
	self.ptr.API.AnimationPlayer_clear_queue(self)
}
func (self classAnimationPlayer) SetSpeedScale(speed Float) {
	self.ptr.API.AnimationPlayer_set_speed_scale(self, speed)
}
func (self classAnimationPlayer) GetSpeedScale() Float {
	return self.ptr.API.AnimationPlayer_get_speed_scale(self)
}
func (self classAnimationPlayer) GetPlayingSpeed() Float {
	return self.ptr.API.AnimationPlayer_get_playing_speed(self)
}
func (self classAnimationPlayer) SetAutoplay(name String) {
	self.ptr.API.AnimationPlayer_set_autoplay(self, name)
}
func (self classAnimationPlayer) GetAutoplay() String {
	return self.ptr.API.AnimationPlayer_get_autoplay(self)
}
func (self classAnimationPlayer) SetMovieQuitOnFinishEnabled(enabled bool) {
	self.ptr.API.AnimationPlayer_set_movie_quit_on_finish_enabled(self, enabled)
}
func (self classAnimationPlayer) IsMovieQuitOnFinishEnabled() bool {
	return self.ptr.API.AnimationPlayer_is_movie_quit_on_finish_enabled(self)
}
func (self classAnimationPlayer) GetCurrentAnimationPosition() Float {
	return self.ptr.API.AnimationPlayer_get_current_animation_position(self)
}
func (self classAnimationPlayer) GetCurrentAnimationLength() Float {
	return self.ptr.API.AnimationPlayer_get_current_animation_length(self)
}
func (self classAnimationPlayer) SeekTo(seconds Float, update bool, update_only bool) {
	self.ptr.API.AnimationPlayer_seek(self, seconds, update, update_only)
}
func (self classAnimationPlayer) SetProcessCallback(mode AnimationPlayerAnimationProcessCallback) {
	self.ptr.API.AnimationPlayer_set_process_callback(self, mode)
}
func (self classAnimationPlayer) GetProcessCallback() AnimationPlayerAnimationProcessCallback {
	return self.ptr.API.AnimationPlayer_get_process_callback(self)
}
func (self classAnimationPlayer) SetMethodCallMode(mode AnimationPlayerAnimationMethodCallMode) {
	self.ptr.API.AnimationPlayer_set_method_call_mode(self, mode)
}
func (self classAnimationPlayer) GetMethodCallMode() AnimationPlayerAnimationMethodCallMode {
	return self.ptr.API.AnimationPlayer_get_method_call_mode(self)
}
func (self classAnimationPlayer) SetRoot(path NodePath) {
	self.ptr.API.AnimationPlayer_set_root(self, path)
}
func (self classAnimationPlayer) GetRoot() NodePath {
	return self.ptr.API.AnimationPlayer_get_root(self)
}

type classAnimationRootNode struct{ Class[classAnimationRootNode] }

func (self classAnimationRootNode) Super() AnimationNode {
	var super AnimationNode
	super.ptr = self.ptr
	return super
}

func (self classAnimationRootNode) AnimationNode() AnimationNode { return self.Super() }

type classAnimationTree struct{ Class[classAnimationTree] }

func (self classAnimationTree) Super() AnimationMixer {
	var super AnimationMixer
	super.ptr = self.ptr
	return super
}

func (self classAnimationTree) AnimationMixer() AnimationMixer { return self.Super() }
func (self classAnimationTree) SetTreeRoot(animation_node AnimationRootNode) {
	self.ptr.API.AnimationTree_set_tree_root(self, animation_node)
}
func (self classAnimationTree) GetTreeRoot() AnimationRootNode {
	return self.ptr.API.AnimationTree_get_tree_root(self)
}
func (self classAnimationTree) SetAdvanceExpressionBaseNode(path NodePath) {
	self.ptr.API.AnimationTree_set_advance_expression_base_node(self, path)
}
func (self classAnimationTree) GetAdvanceExpressionBaseNode() NodePath {
	return self.ptr.API.AnimationTree_get_advance_expression_base_node(self)
}
func (self classAnimationTree) SetAnimationPlayer(path NodePath) {
	self.ptr.API.AnimationTree_set_animation_player(self, path)
}
func (self classAnimationTree) GetAnimationPlayer() NodePath {
	return self.ptr.API.AnimationTree_get_animation_player(self)
}
func (self classAnimationTree) SetProcessCallback(mode AnimationTreeAnimationProcessCallback) {
	self.ptr.API.AnimationTree_set_process_callback(self, mode)
}
func (self classAnimationTree) GetProcessCallback() AnimationTreeAnimationProcessCallback {
	return self.ptr.API.AnimationTree_get_process_callback(self)
}

type classArea2D struct{ Class[classArea2D] }

func (self classArea2D) Super() CollisionObject2D {
	var super CollisionObject2D
	super.ptr = self.ptr
	return super
}

func (self classArea2D) CollisionObject2D() CollisionObject2D { return self.Super() }
func (self classArea2D) SetGravitySpaceOverrideMode(space_override_mode Area2DSpaceOverride) {
	self.ptr.API.Area2D_set_gravity_space_override_mode(self, space_override_mode)
}
func (self classArea2D) GetGravitySpaceOverrideMode() Area2DSpaceOverride {
	return self.ptr.API.Area2D_get_gravity_space_override_mode(self)
}
func (self classArea2D) SetGravityIsPoint(enable bool) {
	self.ptr.API.Area2D_set_gravity_is_point(self, enable)
}
func (self classArea2D) IsGravityAPoint() bool {
	return self.ptr.API.Area2D_is_gravity_a_point(self)
}
func (self classArea2D) SetGravityPointUnitDistance(distance_scale Float) {
	self.ptr.API.Area2D_set_gravity_point_unit_distance(self, distance_scale)
}
func (self classArea2D) GetGravityPointUnitDistance() Float {
	return self.ptr.API.Area2D_get_gravity_point_unit_distance(self)
}
func (self classArea2D) SetGravityPointCenter(center Vector2) {
	self.ptr.API.Area2D_set_gravity_point_center(self, center)
}
func (self classArea2D) GetGravityPointCenter() Vector2 {
	return self.ptr.API.Area2D_get_gravity_point_center(self)
}
func (self classArea2D) SetGravityDirection(direction Vector2) {
	self.ptr.API.Area2D_set_gravity_direction(self, direction)
}
func (self classArea2D) GetGravityDirection() Vector2 {
	return self.ptr.API.Area2D_get_gravity_direction(self)
}
func (self classArea2D) SetGravity(gravity Float) {
	self.ptr.API.Area2D_set_gravity(self, gravity)
}
func (self classArea2D) GetGravity() Float {
	return self.ptr.API.Area2D_get_gravity(self)
}
func (self classArea2D) SetLinearDampSpaceOverrideMode(space_override_mode Area2DSpaceOverride) {
	self.ptr.API.Area2D_set_linear_damp_space_override_mode(self, space_override_mode)
}
func (self classArea2D) GetLinearDampSpaceOverrideMode() Area2DSpaceOverride {
	return self.ptr.API.Area2D_get_linear_damp_space_override_mode(self)
}
func (self classArea2D) SetAngularDampSpaceOverrideMode(space_override_mode Area2DSpaceOverride) {
	self.ptr.API.Area2D_set_angular_damp_space_override_mode(self, space_override_mode)
}
func (self classArea2D) GetAngularDampSpaceOverrideMode() Area2DSpaceOverride {
	return self.ptr.API.Area2D_get_angular_damp_space_override_mode(self)
}
func (self classArea2D) SetLinearDamp(linear_damp Float) {
	self.ptr.API.Area2D_set_linear_damp(self, linear_damp)
}
func (self classArea2D) GetLinearDamp() Float {
	return self.ptr.API.Area2D_get_linear_damp(self)
}
func (self classArea2D) SetAngularDamp(angular_damp Float) {
	self.ptr.API.Area2D_set_angular_damp(self, angular_damp)
}
func (self classArea2D) GetAngularDamp() Float {
	return self.ptr.API.Area2D_get_angular_damp(self)
}
func (self classArea2D) SetPriority(priority Int) {
	self.ptr.API.Area2D_set_priority(self, priority)
}
func (self classArea2D) GetPriority() Int {
	return self.ptr.API.Area2D_get_priority(self)
}
func (self classArea2D) SetMonitoring(enable bool) {
	self.ptr.API.Area2D_set_monitoring(self, enable)
}
func (self classArea2D) IsMonitoring() bool {
	return self.ptr.API.Area2D_is_monitoring(self)
}
func (self classArea2D) SetMonitorable(enable bool) {
	self.ptr.API.Area2D_set_monitorable(self, enable)
}
func (self classArea2D) IsMonitorable() bool {
	return self.ptr.API.Area2D_is_monitorable(self)
}
func (self classArea2D) GetOverlappingBodies() ArrayOf[Node2D] {
	return self.ptr.API.Area2D_get_overlapping_bodies(self)
}
func (self classArea2D) GetOverlappingAreas() ArrayOf[Area2D] {
	return self.ptr.API.Area2D_get_overlapping_areas(self)
}
func (self classArea2D) HasOverlappingBodies() bool {
	return self.ptr.API.Area2D_has_overlapping_bodies(self)
}
func (self classArea2D) HasOverlappingAreas() bool {
	return self.ptr.API.Area2D_has_overlapping_areas(self)
}
func (self classArea2D) OverlapsBody(body Node) bool {
	return self.ptr.API.Area2D_overlaps_body(self, body)
}
func (self classArea2D) OverlapsArea(area Node) bool {
	return self.ptr.API.Area2D_overlaps_area(self, area)
}
func (self classArea2D) SetAudioBusName(name StringName) {
	self.ptr.API.Area2D_set_audio_bus_name(self, name)
}
func (self classArea2D) GetAudioBusName() StringName {
	return self.ptr.API.Area2D_get_audio_bus_name(self)
}
func (self classArea2D) SetAudioBusOverride(enable bool) {
	self.ptr.API.Area2D_set_audio_bus_override(self, enable)
}
func (self classArea2D) IsOverridingAudioBus() bool {
	return self.ptr.API.Area2D_is_overriding_audio_bus(self)
}

type classArea3D struct{ Class[classArea3D] }

func (self classArea3D) Super() CollisionObject3D {
	var super CollisionObject3D
	super.ptr = self.ptr
	return super
}

func (self classArea3D) CollisionObject3D() CollisionObject3D { return self.Super() }
func (self classArea3D) SetGravitySpaceOverrideMode(space_override_mode Area3DSpaceOverride) {
	self.ptr.API.Area3D_set_gravity_space_override_mode(self, space_override_mode)
}
func (self classArea3D) GetGravitySpaceOverrideMode() Area3DSpaceOverride {
	return self.ptr.API.Area3D_get_gravity_space_override_mode(self)
}
func (self classArea3D) SetGravityIsPoint(enable bool) {
	self.ptr.API.Area3D_set_gravity_is_point(self, enable)
}
func (self classArea3D) IsGravityAPoint() bool {
	return self.ptr.API.Area3D_is_gravity_a_point(self)
}
func (self classArea3D) SetGravityPointUnitDistance(distance_scale Float) {
	self.ptr.API.Area3D_set_gravity_point_unit_distance(self, distance_scale)
}
func (self classArea3D) GetGravityPointUnitDistance() Float {
	return self.ptr.API.Area3D_get_gravity_point_unit_distance(self)
}
func (self classArea3D) SetGravityPointCenter(center Vector3) {
	self.ptr.API.Area3D_set_gravity_point_center(self, center)
}
func (self classArea3D) GetGravityPointCenter() Vector3 {
	return self.ptr.API.Area3D_get_gravity_point_center(self)
}
func (self classArea3D) SetGravityDirection(direction Vector3) {
	self.ptr.API.Area3D_set_gravity_direction(self, direction)
}
func (self classArea3D) GetGravityDirection() Vector3 {
	return self.ptr.API.Area3D_get_gravity_direction(self)
}
func (self classArea3D) SetGravity(gravity Float) {
	self.ptr.API.Area3D_set_gravity(self, gravity)
}
func (self classArea3D) GetGravity() Float {
	return self.ptr.API.Area3D_get_gravity(self)
}
func (self classArea3D) SetLinearDampSpaceOverrideMode(space_override_mode Area3DSpaceOverride) {
	self.ptr.API.Area3D_set_linear_damp_space_override_mode(self, space_override_mode)
}
func (self classArea3D) GetLinearDampSpaceOverrideMode() Area3DSpaceOverride {
	return self.ptr.API.Area3D_get_linear_damp_space_override_mode(self)
}
func (self classArea3D) SetAngularDampSpaceOverrideMode(space_override_mode Area3DSpaceOverride) {
	self.ptr.API.Area3D_set_angular_damp_space_override_mode(self, space_override_mode)
}
func (self classArea3D) GetAngularDampSpaceOverrideMode() Area3DSpaceOverride {
	return self.ptr.API.Area3D_get_angular_damp_space_override_mode(self)
}
func (self classArea3D) SetAngularDamp(angular_damp Float) {
	self.ptr.API.Area3D_set_angular_damp(self, angular_damp)
}
func (self classArea3D) GetAngularDamp() Float {
	return self.ptr.API.Area3D_get_angular_damp(self)
}
func (self classArea3D) SetLinearDamp(linear_damp Float) {
	self.ptr.API.Area3D_set_linear_damp(self, linear_damp)
}
func (self classArea3D) GetLinearDamp() Float {
	return self.ptr.API.Area3D_get_linear_damp(self)
}
func (self classArea3D) SetPriority(priority Int) {
	self.ptr.API.Area3D_set_priority(self, priority)
}
func (self classArea3D) GetPriority() Int {
	return self.ptr.API.Area3D_get_priority(self)
}
func (self classArea3D) SetWindForceMagnitude(wind_force_magnitude Float) {
	self.ptr.API.Area3D_set_wind_force_magnitude(self, wind_force_magnitude)
}
func (self classArea3D) GetWindForceMagnitude() Float {
	return self.ptr.API.Area3D_get_wind_force_magnitude(self)
}
func (self classArea3D) SetWindAttenuationFactor(wind_attenuation_factor Float) {
	self.ptr.API.Area3D_set_wind_attenuation_factor(self, wind_attenuation_factor)
}
func (self classArea3D) GetWindAttenuationFactor() Float {
	return self.ptr.API.Area3D_get_wind_attenuation_factor(self)
}
func (self classArea3D) SetWindSourcePath(wind_source_path NodePath) {
	self.ptr.API.Area3D_set_wind_source_path(self, wind_source_path)
}
func (self classArea3D) GetWindSourcePath() NodePath {
	return self.ptr.API.Area3D_get_wind_source_path(self)
}
func (self classArea3D) SetMonitorable(enable bool) {
	self.ptr.API.Area3D_set_monitorable(self, enable)
}
func (self classArea3D) IsMonitorable() bool {
	return self.ptr.API.Area3D_is_monitorable(self)
}
func (self classArea3D) SetMonitoring(enable bool) {
	self.ptr.API.Area3D_set_monitoring(self, enable)
}
func (self classArea3D) IsMonitoring() bool {
	return self.ptr.API.Area3D_is_monitoring(self)
}
func (self classArea3D) GetOverlappingBodies() ArrayOf[Node3D] {
	return self.ptr.API.Area3D_get_overlapping_bodies(self)
}
func (self classArea3D) GetOverlappingAreas() ArrayOf[Area3D] {
	return self.ptr.API.Area3D_get_overlapping_areas(self)
}
func (self classArea3D) HasOverlappingBodies() bool {
	return self.ptr.API.Area3D_has_overlapping_bodies(self)
}
func (self classArea3D) HasOverlappingAreas() bool {
	return self.ptr.API.Area3D_has_overlapping_areas(self)
}
func (self classArea3D) OverlapsBody(body Node) bool {
	return self.ptr.API.Area3D_overlaps_body(self, body)
}
func (self classArea3D) OverlapsArea(area Node) bool {
	return self.ptr.API.Area3D_overlaps_area(self, area)
}
func (self classArea3D) SetAudioBusOverride(enable bool) {
	self.ptr.API.Area3D_set_audio_bus_override(self, enable)
}
func (self classArea3D) IsOverridingAudioBus() bool {
	return self.ptr.API.Area3D_is_overriding_audio_bus(self)
}
func (self classArea3D) SetAudioBusName(name StringName) {
	self.ptr.API.Area3D_set_audio_bus_name(self, name)
}
func (self classArea3D) GetAudioBusName() StringName {
	return self.ptr.API.Area3D_get_audio_bus_name(self)
}
func (self classArea3D) SetUseReverbBus(enable bool) {
	self.ptr.API.Area3D_set_use_reverb_bus(self, enable)
}
func (self classArea3D) IsUsingReverbBus() bool {
	return self.ptr.API.Area3D_is_using_reverb_bus(self)
}
func (self classArea3D) SetReverbBusName(name StringName) {
	self.ptr.API.Area3D_set_reverb_bus_name(self, name)
}
func (self classArea3D) GetReverbBusName() StringName {
	return self.ptr.API.Area3D_get_reverb_bus_name(self)
}
func (self classArea3D) SetReverbAmount(amount Float) {
	self.ptr.API.Area3D_set_reverb_amount(self, amount)
}
func (self classArea3D) GetReverbAmount() Float {
	return self.ptr.API.Area3D_get_reverb_amount(self)
}
func (self classArea3D) SetReverbUniformity(amount Float) {
	self.ptr.API.Area3D_set_reverb_uniformity(self, amount)
}
func (self classArea3D) GetReverbUniformity() Float {
	return self.ptr.API.Area3D_get_reverb_uniformity(self)
}

type classArrayMesh struct{ Class[classArrayMesh] }

func (self classArrayMesh) Super() Mesh { var super Mesh; super.ptr = self.ptr; return super }

func (self classArrayMesh) Mesh() Mesh { return self.Super() }
func (self classArrayMesh) AddBlendShape(name StringName) {
	self.ptr.API.ArrayMesh_add_blend_shape(self, name)
}
func (self classArrayMesh) GetBlendShapeCount() Int {
	return self.ptr.API.ArrayMesh_get_blend_shape_count(self)
}
func (self classArrayMesh) GetBlendShapeName(index Int) StringName {
	return self.ptr.API.ArrayMesh_get_blend_shape_name(self, index)
}
func (self classArrayMesh) SetBlendShapeName(index Int, name StringName) {
	self.ptr.API.ArrayMesh_set_blend_shape_name(self, index, name)
}
func (self classArrayMesh) ClearBlendShapes() {
	self.ptr.API.ArrayMesh_clear_blend_shapes(self)
}
func (self classArrayMesh) SetBlendShapeMode(mode MeshBlendShapeMode) {
	self.ptr.API.ArrayMesh_set_blend_shape_mode(self, mode)
}
func (self classArrayMesh) GetBlendShapeMode() MeshBlendShapeMode {
	return self.ptr.API.ArrayMesh_get_blend_shape_mode(self)
}
func (self classArrayMesh) AddSurfaceFromArrays(primitive MeshPrimitiveType, arrays Array, blend_shapes ArrayOf[Array], lods Dictionary, flags MeshArrayFormat) {
	self.ptr.API.ArrayMesh_add_surface_from_arrays(self, primitive, arrays, blend_shapes, lods, flags)
}
func (self classArrayMesh) ClearSurfaces() {
	self.ptr.API.ArrayMesh_clear_surfaces(self)
}
func (self classArrayMesh) SurfaceUpdateVertexRegion(surf_idx Int, offset Int, data PackedByteArray) {
	self.ptr.API.ArrayMesh_surface_update_vertex_region(self, surf_idx, offset, data)
}
func (self classArrayMesh) SurfaceUpdateAttributeRegion(surf_idx Int, offset Int, data PackedByteArray) {
	self.ptr.API.ArrayMesh_surface_update_attribute_region(self, surf_idx, offset, data)
}
func (self classArrayMesh) SurfaceUpdateSkinRegion(surf_idx Int, offset Int, data PackedByteArray) {
	self.ptr.API.ArrayMesh_surface_update_skin_region(self, surf_idx, offset, data)
}
func (self classArrayMesh) SurfaceGetArrayLen(surf_idx Int) Int {
	return self.ptr.API.ArrayMesh_surface_get_array_len(self, surf_idx)
}
func (self classArrayMesh) SurfaceGetArrayIndexLen(surf_idx Int) Int {
	return self.ptr.API.ArrayMesh_surface_get_array_index_len(self, surf_idx)
}
func (self classArrayMesh) SurfaceGetFormat(surf_idx Int) MeshArrayFormat {
	return self.ptr.API.ArrayMesh_surface_get_format(self, surf_idx)
}
func (self classArrayMesh) SurfaceGetPrimitiveType(surf_idx Int) MeshPrimitiveType {
	return self.ptr.API.ArrayMesh_surface_get_primitive_type(self, surf_idx)
}
func (self classArrayMesh) SurfaceFindByName(name String) Int {
	return self.ptr.API.ArrayMesh_surface_find_by_name(self, name)
}
func (self classArrayMesh) SurfaceSetName(surf_idx Int, name String) {
	self.ptr.API.ArrayMesh_surface_set_name(self, surf_idx, name)
}
func (self classArrayMesh) SurfaceGetName(surf_idx Int) String {
	return self.ptr.API.ArrayMesh_surface_get_name(self, surf_idx)
}
func (self classArrayMesh) RegenNormalMaps() {
	self.ptr.API.ArrayMesh_regen_normal_maps(self)
}
func (self classArrayMesh) LightmapUnwrap(transform Transform3D, texel_size Float) int64 {
	return self.ptr.API.ArrayMesh_lightmap_unwrap(self, transform, texel_size)
}
func (self classArrayMesh) SetCustomAabb(aabb AABB) {
	self.ptr.API.ArrayMesh_set_custom_aabb(self, aabb)
}
func (self classArrayMesh) GetCustomAabb() AABB {
	return self.ptr.API.ArrayMesh_get_custom_aabb(self)
}
func (self classArrayMesh) SetShadowMesh(mesh ArrayMesh) {
	self.ptr.API.ArrayMesh_set_shadow_mesh(self, mesh)
}
func (self classArrayMesh) GetShadowMesh() ArrayMesh {
	return self.ptr.API.ArrayMesh_get_shadow_mesh(self)
}

type classArrayOccluder3D struct{ Class[classArrayOccluder3D] }

func (self classArrayOccluder3D) Super() Occluder3D {
	var super Occluder3D
	super.ptr = self.ptr
	return super
}

func (self classArrayOccluder3D) Occluder3D() Occluder3D { return self.Super() }
func (self classArrayOccluder3D) SetArrays(vertices PackedVector3Array, indices PackedInt32Array) {
	self.ptr.API.ArrayOccluder3D_set_arrays(self, vertices, indices)
}
func (self classArrayOccluder3D) SetVertices(vertices PackedVector3Array) {
	self.ptr.API.ArrayOccluder3D_set_vertices(self, vertices)
}
func (self classArrayOccluder3D) SetIndices(indices PackedInt32Array) {
	self.ptr.API.ArrayOccluder3D_set_indices(self, indices)
}

type classAspectRatioContainer struct {
	Class[classAspectRatioContainer]
}

func (self classAspectRatioContainer) Super() Container {
	var super Container
	super.ptr = self.ptr
	return super
}

func (self classAspectRatioContainer) Container() Container { return self.Super() }
func (self classAspectRatioContainer) SetRatio(ratio Float) {
	self.ptr.API.AspectRatioContainer_set_ratio(self, ratio)
}
func (self classAspectRatioContainer) GetRatio() Float {
	return self.ptr.API.AspectRatioContainer_get_ratio(self)
}
func (self classAspectRatioContainer) SetStretchMode(stretch_mode AspectRatioContainerStretchMode) {
	self.ptr.API.AspectRatioContainer_set_stretch_mode(self, stretch_mode)
}
func (self classAspectRatioContainer) GetStretchMode() AspectRatioContainerStretchMode {
	return self.ptr.API.AspectRatioContainer_get_stretch_mode(self)
}
func (self classAspectRatioContainer) SetAlignmentHorizontal(alignment_horizontal AspectRatioContainerAlignmentMode) {
	self.ptr.API.AspectRatioContainer_set_alignment_horizontal(self, alignment_horizontal)
}
func (self classAspectRatioContainer) GetAlignmentHorizontal() AspectRatioContainerAlignmentMode {
	return self.ptr.API.AspectRatioContainer_get_alignment_horizontal(self)
}
func (self classAspectRatioContainer) SetAlignmentVertical(alignment_vertical AspectRatioContainerAlignmentMode) {
	self.ptr.API.AspectRatioContainer_set_alignment_vertical(self, alignment_vertical)
}
func (self classAspectRatioContainer) GetAlignmentVertical() AspectRatioContainerAlignmentMode {
	return self.ptr.API.AspectRatioContainer_get_alignment_vertical(self)
}

type classAtlasTexture struct{ Class[classAtlasTexture] }

func (self classAtlasTexture) Super() Texture2D {
	var super Texture2D
	super.ptr = self.ptr
	return super
}

func (self classAtlasTexture) Texture2D() Texture2D { return self.Super() }
func (self classAtlasTexture) SetAtlas(atlas Texture2D) {
	self.ptr.API.AtlasTexture_set_atlas(self, atlas)
}
func (self classAtlasTexture) GetAtlas() Texture2D {
	return self.ptr.API.AtlasTexture_get_atlas(self)
}
func (self classAtlasTexture) SetRegion(region Rect2) {
	self.ptr.API.AtlasTexture_set_region(self, region)
}
func (self classAtlasTexture) GetRegion() Rect2 {
	return self.ptr.API.AtlasTexture_get_region(self)
}
func (self classAtlasTexture) SetMargin(margin Rect2) {
	self.ptr.API.AtlasTexture_set_margin(self, margin)
}
func (self classAtlasTexture) GetMargin() Rect2 {
	return self.ptr.API.AtlasTexture_get_margin(self)
}
func (self classAtlasTexture) SetFilterClip(enable bool) {
	self.ptr.API.AtlasTexture_set_filter_clip(self, enable)
}
func (self classAtlasTexture) HasFilterClip() bool {
	return self.ptr.API.AtlasTexture_has_filter_clip(self)
}

type classAudioBusLayout struct{ Class[classAudioBusLayout] }

func (self classAudioBusLayout) Super() Resource {
	var super Resource
	super.ptr = self.ptr
	return super
}

func (self classAudioBusLayout) Resource() Resource { return self.Super() }

type classAudioEffect struct{ Class[classAudioEffect] }

func (self classAudioEffect) Super() Resource { var super Resource; super.ptr = self.ptr; return super }

func (self classAudioEffect) Resource() Resource { return self.Super() }

type classAudioEffectAmplify struct{ Class[classAudioEffectAmplify] }

func (self classAudioEffectAmplify) Super() AudioEffect {
	var super AudioEffect
	super.ptr = self.ptr
	return super
}

func (self classAudioEffectAmplify) AudioEffect() AudioEffect { return self.Super() }
func (self classAudioEffectAmplify) SetVolumeDb(volume Float) {
	self.ptr.API.AudioEffectAmplify_set_volume_db(self, volume)
}
func (self classAudioEffectAmplify) GetVolumeDb() Float {
	return self.ptr.API.AudioEffectAmplify_get_volume_db(self)
}

type classAudioEffectBandLimitFilter struct {
	Class[classAudioEffectBandLimitFilter]
}

func (self classAudioEffectBandLimitFilter) Super() AudioEffectFilter {
	var super AudioEffectFilter
	super.ptr = self.ptr
	return super
}

func (self classAudioEffectBandLimitFilter) AudioEffectFilter() AudioEffectFilter {
	return self.Super()
}

type classAudioEffectBandPassFilter struct {
	Class[classAudioEffectBandPassFilter]
}

func (self classAudioEffectBandPassFilter) Super() AudioEffectFilter {
	var super AudioEffectFilter
	super.ptr = self.ptr
	return super
}

func (self classAudioEffectBandPassFilter) AudioEffectFilter() AudioEffectFilter { return self.Super() }

type classAudioEffectCapture struct{ Class[classAudioEffectCapture] }

func (self classAudioEffectCapture) Super() AudioEffect {
	var super AudioEffect
	super.ptr = self.ptr
	return super
}

func (self classAudioEffectCapture) AudioEffect() AudioEffect { return self.Super() }
func (self classAudioEffectCapture) CanGetBuffer(frames Int) bool {
	return self.ptr.API.AudioEffectCapture_can_get_buffer(self, frames)
}
func (self classAudioEffectCapture) GetBuffer(frames Int) PackedVector2Array {
	return self.ptr.API.AudioEffectCapture_get_buffer(self, frames)
}
func (self classAudioEffectCapture) ClearBuffer() {
	self.ptr.API.AudioEffectCapture_clear_buffer(self)
}
func (self classAudioEffectCapture) SetBufferLength(buffer_length_seconds Float) {
	self.ptr.API.AudioEffectCapture_set_buffer_length(self, buffer_length_seconds)
}
func (self classAudioEffectCapture) GetBufferLength() Float {
	return self.ptr.API.AudioEffectCapture_get_buffer_length(self)
}
func (self classAudioEffectCapture) GetFramesAvailable() Int {
	return self.ptr.API.AudioEffectCapture_get_frames_available(self)
}
func (self classAudioEffectCapture) GetDiscardedFrames() Int {
	return self.ptr.API.AudioEffectCapture_get_discarded_frames(self)
}
func (self classAudioEffectCapture) GetBufferLengthFrames() Int {
	return self.ptr.API.AudioEffectCapture_get_buffer_length_frames(self)
}
func (self classAudioEffectCapture) GetPushedFrames() Int {
	return self.ptr.API.AudioEffectCapture_get_pushed_frames(self)
}

type classAudioEffectChorus struct{ Class[classAudioEffectChorus] }

func (self classAudioEffectChorus) Super() AudioEffect {
	var super AudioEffect
	super.ptr = self.ptr
	return super
}

func (self classAudioEffectChorus) AudioEffect() AudioEffect { return self.Super() }
func (self classAudioEffectChorus) SetVoiceCount(voices Int) {
	self.ptr.API.AudioEffectChorus_set_voice_count(self, voices)
}
func (self classAudioEffectChorus) GetVoiceCount() Int {
	return self.ptr.API.AudioEffectChorus_get_voice_count(self)
}
func (self classAudioEffectChorus) SetVoiceDelayMs(voice_idx Int, delay_ms Float) {
	self.ptr.API.AudioEffectChorus_set_voice_delay_ms(self, voice_idx, delay_ms)
}
func (self classAudioEffectChorus) GetVoiceDelayMs(voice_idx Int) Float {
	return self.ptr.API.AudioEffectChorus_get_voice_delay_ms(self, voice_idx)
}
func (self classAudioEffectChorus) SetVoiceRateHz(voice_idx Int, rate_hz Float) {
	self.ptr.API.AudioEffectChorus_set_voice_rate_hz(self, voice_idx, rate_hz)
}
func (self classAudioEffectChorus) GetVoiceRateHz(voice_idx Int) Float {
	return self.ptr.API.AudioEffectChorus_get_voice_rate_hz(self, voice_idx)
}
func (self classAudioEffectChorus) SetVoiceDepthMs(voice_idx Int, depth_ms Float) {
	self.ptr.API.AudioEffectChorus_set_voice_depth_ms(self, voice_idx, depth_ms)
}
func (self classAudioEffectChorus) GetVoiceDepthMs(voice_idx Int) Float {
	return self.ptr.API.AudioEffectChorus_get_voice_depth_ms(self, voice_idx)
}
func (self classAudioEffectChorus) SetVoiceLevelDb(voice_idx Int, level_db Float) {
	self.ptr.API.AudioEffectChorus_set_voice_level_db(self, voice_idx, level_db)
}
func (self classAudioEffectChorus) GetVoiceLevelDb(voice_idx Int) Float {
	return self.ptr.API.AudioEffectChorus_get_voice_level_db(self, voice_idx)
}
func (self classAudioEffectChorus) SetVoiceCutoffHz(voice_idx Int, cutoff_hz Float) {
	self.ptr.API.AudioEffectChorus_set_voice_cutoff_hz(self, voice_idx, cutoff_hz)
}
func (self classAudioEffectChorus) GetVoiceCutoffHz(voice_idx Int) Float {
	return self.ptr.API.AudioEffectChorus_get_voice_cutoff_hz(self, voice_idx)
}
func (self classAudioEffectChorus) SetVoicePan(voice_idx Int, pan Float) {
	self.ptr.API.AudioEffectChorus_set_voice_pan(self, voice_idx, pan)
}
func (self classAudioEffectChorus) GetVoicePan(voice_idx Int) Float {
	return self.ptr.API.AudioEffectChorus_get_voice_pan(self, voice_idx)
}
func (self classAudioEffectChorus) SetWet(amount Float) {
	self.ptr.API.AudioEffectChorus_set_wet(self, amount)
}
func (self classAudioEffectChorus) GetWet() Float {
	return self.ptr.API.AudioEffectChorus_get_wet(self)
}
func (self classAudioEffectChorus) SetDry(amount Float) {
	self.ptr.API.AudioEffectChorus_set_dry(self, amount)
}
func (self classAudioEffectChorus) GetDry() Float {
	return self.ptr.API.AudioEffectChorus_get_dry(self)
}

type classAudioEffectCompressor struct {
	Class[classAudioEffectCompressor]
}

func (self classAudioEffectCompressor) Super() AudioEffect {
	var super AudioEffect
	super.ptr = self.ptr
	return super
}

func (self classAudioEffectCompressor) AudioEffect() AudioEffect { return self.Super() }
func (self classAudioEffectCompressor) SetThreshold(threshold Float) {
	self.ptr.API.AudioEffectCompressor_set_threshold(self, threshold)
}
func (self classAudioEffectCompressor) GetThreshold() Float {
	return self.ptr.API.AudioEffectCompressor_get_threshold(self)
}
func (self classAudioEffectCompressor) SetRatio(ratio Float) {
	self.ptr.API.AudioEffectCompressor_set_ratio(self, ratio)
}
func (self classAudioEffectCompressor) GetRatio() Float {
	return self.ptr.API.AudioEffectCompressor_get_ratio(self)
}
func (self classAudioEffectCompressor) SetGain(gain Float) {
	self.ptr.API.AudioEffectCompressor_set_gain(self, gain)
}
func (self classAudioEffectCompressor) GetGain() Float {
	return self.ptr.API.AudioEffectCompressor_get_gain(self)
}
func (self classAudioEffectCompressor) SetAttackUs(attack_us Float) {
	self.ptr.API.AudioEffectCompressor_set_attack_us(self, attack_us)
}
func (self classAudioEffectCompressor) GetAttackUs() Float {
	return self.ptr.API.AudioEffectCompressor_get_attack_us(self)
}
func (self classAudioEffectCompressor) SetReleaseMs(release_ms Float) {
	self.ptr.API.AudioEffectCompressor_set_release_ms(self, release_ms)
}
func (self classAudioEffectCompressor) GetReleaseMs() Float {
	return self.ptr.API.AudioEffectCompressor_get_release_ms(self)
}
func (self classAudioEffectCompressor) SetMix(mix Float) {
	self.ptr.API.AudioEffectCompressor_set_mix(self, mix)
}
func (self classAudioEffectCompressor) GetMix() Float {
	return self.ptr.API.AudioEffectCompressor_get_mix(self)
}
func (self classAudioEffectCompressor) SetSidechain(sidechain StringName) {
	self.ptr.API.AudioEffectCompressor_set_sidechain(self, sidechain)
}
func (self classAudioEffectCompressor) GetSidechain() StringName {
	return self.ptr.API.AudioEffectCompressor_get_sidechain(self)
}

type classAudioEffectDelay struct{ Class[classAudioEffectDelay] }

func (self classAudioEffectDelay) Super() AudioEffect {
	var super AudioEffect
	super.ptr = self.ptr
	return super
}

func (self classAudioEffectDelay) AudioEffect() AudioEffect { return self.Super() }
func (self classAudioEffectDelay) SetDry(amount Float) {
	self.ptr.API.AudioEffectDelay_set_dry(self, amount)
}
func (self classAudioEffectDelay) GetDry() Float {
	return self.ptr.API.AudioEffectDelay_get_dry(self)
}
func (self classAudioEffectDelay) SetTap1Active(amount bool) {
	self.ptr.API.AudioEffectDelay_set_tap1_active(self, amount)
}
func (self classAudioEffectDelay) IsTap1Active() bool {
	return self.ptr.API.AudioEffectDelay_is_tap1_active(self)
}
func (self classAudioEffectDelay) SetTap1DelayMs(amount Float) {
	self.ptr.API.AudioEffectDelay_set_tap1_delay_ms(self, amount)
}
func (self classAudioEffectDelay) GetTap1DelayMs() Float {
	return self.ptr.API.AudioEffectDelay_get_tap1_delay_ms(self)
}
func (self classAudioEffectDelay) SetTap1LevelDb(amount Float) {
	self.ptr.API.AudioEffectDelay_set_tap1_level_db(self, amount)
}
func (self classAudioEffectDelay) GetTap1LevelDb() Float {
	return self.ptr.API.AudioEffectDelay_get_tap1_level_db(self)
}
func (self classAudioEffectDelay) SetTap1Pan(amount Float) {
	self.ptr.API.AudioEffectDelay_set_tap1_pan(self, amount)
}
func (self classAudioEffectDelay) GetTap1Pan() Float {
	return self.ptr.API.AudioEffectDelay_get_tap1_pan(self)
}
func (self classAudioEffectDelay) SetTap2Active(amount bool) {
	self.ptr.API.AudioEffectDelay_set_tap2_active(self, amount)
}
func (self classAudioEffectDelay) IsTap2Active() bool {
	return self.ptr.API.AudioEffectDelay_is_tap2_active(self)
}
func (self classAudioEffectDelay) SetTap2DelayMs(amount Float) {
	self.ptr.API.AudioEffectDelay_set_tap2_delay_ms(self, amount)
}
func (self classAudioEffectDelay) GetTap2DelayMs() Float {
	return self.ptr.API.AudioEffectDelay_get_tap2_delay_ms(self)
}
func (self classAudioEffectDelay) SetTap2LevelDb(amount Float) {
	self.ptr.API.AudioEffectDelay_set_tap2_level_db(self, amount)
}
func (self classAudioEffectDelay) GetTap2LevelDb() Float {
	return self.ptr.API.AudioEffectDelay_get_tap2_level_db(self)
}
func (self classAudioEffectDelay) SetTap2Pan(amount Float) {
	self.ptr.API.AudioEffectDelay_set_tap2_pan(self, amount)
}
func (self classAudioEffectDelay) GetTap2Pan() Float {
	return self.ptr.API.AudioEffectDelay_get_tap2_pan(self)
}
func (self classAudioEffectDelay) SetFeedbackActive(amount bool) {
	self.ptr.API.AudioEffectDelay_set_feedback_active(self, amount)
}
func (self classAudioEffectDelay) IsFeedbackActive() bool {
	return self.ptr.API.AudioEffectDelay_is_feedback_active(self)
}
func (self classAudioEffectDelay) SetFeedbackDelayMs(amount Float) {
	self.ptr.API.AudioEffectDelay_set_feedback_delay_ms(self, amount)
}
func (self classAudioEffectDelay) GetFeedbackDelayMs() Float {
	return self.ptr.API.AudioEffectDelay_get_feedback_delay_ms(self)
}
func (self classAudioEffectDelay) SetFeedbackLevelDb(amount Float) {
	self.ptr.API.AudioEffectDelay_set_feedback_level_db(self, amount)
}
func (self classAudioEffectDelay) GetFeedbackLevelDb() Float {
	return self.ptr.API.AudioEffectDelay_get_feedback_level_db(self)
}
func (self classAudioEffectDelay) SetFeedbackLowpass(amount Float) {
	self.ptr.API.AudioEffectDelay_set_feedback_lowpass(self, amount)
}
func (self classAudioEffectDelay) GetFeedbackLowpass() Float {
	return self.ptr.API.AudioEffectDelay_get_feedback_lowpass(self)
}

type classAudioEffectDistortion struct {
	Class[classAudioEffectDistortion]
}

func (self classAudioEffectDistortion) Super() AudioEffect {
	var super AudioEffect
	super.ptr = self.ptr
	return super
}

func (self classAudioEffectDistortion) AudioEffect() AudioEffect { return self.Super() }
func (self classAudioEffectDistortion) SetMode(mode AudioEffectDistortionMode) {
	self.ptr.API.AudioEffectDistortion_set_mode(self, mode)
}
func (self classAudioEffectDistortion) GetMode() AudioEffectDistortionMode {
	return self.ptr.API.AudioEffectDistortion_get_mode(self)
}
func (self classAudioEffectDistortion) SetPreGain(pre_gain Float) {
	self.ptr.API.AudioEffectDistortion_set_pre_gain(self, pre_gain)
}
func (self classAudioEffectDistortion) GetPreGain() Float {
	return self.ptr.API.AudioEffectDistortion_get_pre_gain(self)
}
func (self classAudioEffectDistortion) SetKeepHfHz(keep_hf_hz Float) {
	self.ptr.API.AudioEffectDistortion_set_keep_hf_hz(self, keep_hf_hz)
}
func (self classAudioEffectDistortion) GetKeepHfHz() Float {
	return self.ptr.API.AudioEffectDistortion_get_keep_hf_hz(self)
}
func (self classAudioEffectDistortion) SetDrive(drive Float) {
	self.ptr.API.AudioEffectDistortion_set_drive(self, drive)
}
func (self classAudioEffectDistortion) GetDrive() Float {
	return self.ptr.API.AudioEffectDistortion_get_drive(self)
}
func (self classAudioEffectDistortion) SetPostGain(post_gain Float) {
	self.ptr.API.AudioEffectDistortion_set_post_gain(self, post_gain)
}
func (self classAudioEffectDistortion) GetPostGain() Float {
	return self.ptr.API.AudioEffectDistortion_get_post_gain(self)
}

type classAudioEffectEQ struct{ Class[classAudioEffectEQ] }

func (self classAudioEffectEQ) Super() AudioEffect {
	var super AudioEffect
	super.ptr = self.ptr
	return super
}

func (self classAudioEffectEQ) AudioEffect() AudioEffect { return self.Super() }
func (self classAudioEffectEQ) SetBandGainDb(band_idx Int, volume_db Float) {
	self.ptr.API.AudioEffectEQ_set_band_gain_db(self, band_idx, volume_db)
}
func (self classAudioEffectEQ) GetBandGainDb(band_idx Int) Float {
	return self.ptr.API.AudioEffectEQ_get_band_gain_db(self, band_idx)
}
func (self classAudioEffectEQ) GetBandCount() Int {
	return self.ptr.API.AudioEffectEQ_get_band_count(self)
}

type classAudioEffectEQ10 struct{ Class[classAudioEffectEQ10] }

func (self classAudioEffectEQ10) Super() AudioEffectEQ {
	var super AudioEffectEQ
	super.ptr = self.ptr
	return super
}

func (self classAudioEffectEQ10) AudioEffectEQ() AudioEffectEQ { return self.Super() }

type classAudioEffectEQ21 struct{ Class[classAudioEffectEQ21] }

func (self classAudioEffectEQ21) Super() AudioEffectEQ {
	var super AudioEffectEQ
	super.ptr = self.ptr
	return super
}

func (self classAudioEffectEQ21) AudioEffectEQ() AudioEffectEQ { return self.Super() }

type classAudioEffectEQ6 struct{ Class[classAudioEffectEQ6] }

func (self classAudioEffectEQ6) Super() AudioEffectEQ {
	var super AudioEffectEQ
	super.ptr = self.ptr
	return super
}

func (self classAudioEffectEQ6) AudioEffectEQ() AudioEffectEQ { return self.Super() }

type classAudioEffectFilter struct{ Class[classAudioEffectFilter] }

func (self classAudioEffectFilter) Super() AudioEffect {
	var super AudioEffect
	super.ptr = self.ptr
	return super
}

func (self classAudioEffectFilter) AudioEffect() AudioEffect { return self.Super() }
func (self classAudioEffectFilter) SetCutoff(freq Float) {
	self.ptr.API.AudioEffectFilter_set_cutoff(self, freq)
}
func (self classAudioEffectFilter) GetCutoff() Float {
	return self.ptr.API.AudioEffectFilter_get_cutoff(self)
}
func (self classAudioEffectFilter) SetResonance(amount Float) {
	self.ptr.API.AudioEffectFilter_set_resonance(self, amount)
}
func (self classAudioEffectFilter) GetResonance() Float {
	return self.ptr.API.AudioEffectFilter_get_resonance(self)
}
func (self classAudioEffectFilter) SetGain(amount Float) {
	self.ptr.API.AudioEffectFilter_set_gain(self, amount)
}
func (self classAudioEffectFilter) GetGain() Float {
	return self.ptr.API.AudioEffectFilter_get_gain(self)
}
func (self classAudioEffectFilter) SetDb(amount AudioEffectFilterFilterDB) {
	self.ptr.API.AudioEffectFilter_set_db(self, amount)
}
func (self classAudioEffectFilter) GetDb() AudioEffectFilterFilterDB {
	return self.ptr.API.AudioEffectFilter_get_db(self)
}

type classAudioEffectHighPassFilter struct {
	Class[classAudioEffectHighPassFilter]
}

func (self classAudioEffectHighPassFilter) Super() AudioEffectFilter {
	var super AudioEffectFilter
	super.ptr = self.ptr
	return super
}

func (self classAudioEffectHighPassFilter) AudioEffectFilter() AudioEffectFilter { return self.Super() }

type classAudioEffectHighShelfFilter struct {
	Class[classAudioEffectHighShelfFilter]
}

func (self classAudioEffectHighShelfFilter) Super() AudioEffectFilter {
	var super AudioEffectFilter
	super.ptr = self.ptr
	return super
}

func (self classAudioEffectHighShelfFilter) AudioEffectFilter() AudioEffectFilter {
	return self.Super()
}

type classAudioEffectInstance struct {
	Class[classAudioEffectInstance]
}

func (self classAudioEffectInstance) Super() RefCounted {
	var super RefCounted
	super.ptr = self.ptr
	return super
}

func (self classAudioEffectInstance) RefCounted() RefCounted { return self.Super() }

type classAudioEffectLimiter struct{ Class[classAudioEffectLimiter] }

func (self classAudioEffectLimiter) Super() AudioEffect {
	var super AudioEffect
	super.ptr = self.ptr
	return super
}

func (self classAudioEffectLimiter) AudioEffect() AudioEffect { return self.Super() }
func (self classAudioEffectLimiter) SetCeilingDb(ceiling Float) {
	self.ptr.API.AudioEffectLimiter_set_ceiling_db(self, ceiling)
}
func (self classAudioEffectLimiter) GetCeilingDb() Float {
	return self.ptr.API.AudioEffectLimiter_get_ceiling_db(self)
}
func (self classAudioEffectLimiter) SetThresholdDb(threshold Float) {
	self.ptr.API.AudioEffectLimiter_set_threshold_db(self, threshold)
}
func (self classAudioEffectLimiter) GetThresholdDb() Float {
	return self.ptr.API.AudioEffectLimiter_get_threshold_db(self)
}
func (self classAudioEffectLimiter) SetSoftClipDb(soft_clip Float) {
	self.ptr.API.AudioEffectLimiter_set_soft_clip_db(self, soft_clip)
}
func (self classAudioEffectLimiter) GetSoftClipDb() Float {
	return self.ptr.API.AudioEffectLimiter_get_soft_clip_db(self)
}
func (self classAudioEffectLimiter) SetSoftClipRatio(soft_clip Float) {
	self.ptr.API.AudioEffectLimiter_set_soft_clip_ratio(self, soft_clip)
}
func (self classAudioEffectLimiter) GetSoftClipRatio() Float {
	return self.ptr.API.AudioEffectLimiter_get_soft_clip_ratio(self)
}

type classAudioEffectLowPassFilter struct {
	Class[classAudioEffectLowPassFilter]
}

func (self classAudioEffectLowPassFilter) Super() AudioEffectFilter {
	var super AudioEffectFilter
	super.ptr = self.ptr
	return super
}

func (self classAudioEffectLowPassFilter) AudioEffectFilter() AudioEffectFilter { return self.Super() }

type classAudioEffectLowShelfFilter struct {
	Class[classAudioEffectLowShelfFilter]
}

func (self classAudioEffectLowShelfFilter) Super() AudioEffectFilter {
	var super AudioEffectFilter
	super.ptr = self.ptr
	return super
}

func (self classAudioEffectLowShelfFilter) AudioEffectFilter() AudioEffectFilter { return self.Super() }

type classAudioEffectNotchFilter struct {
	Class[classAudioEffectNotchFilter]
}

func (self classAudioEffectNotchFilter) Super() AudioEffectFilter {
	var super AudioEffectFilter
	super.ptr = self.ptr
	return super
}

func (self classAudioEffectNotchFilter) AudioEffectFilter() AudioEffectFilter { return self.Super() }

type classAudioEffectPanner struct{ Class[classAudioEffectPanner] }

func (self classAudioEffectPanner) Super() AudioEffect {
	var super AudioEffect
	super.ptr = self.ptr
	return super
}

func (self classAudioEffectPanner) AudioEffect() AudioEffect { return self.Super() }
func (self classAudioEffectPanner) SetPan(cpanume Float) {
	self.ptr.API.AudioEffectPanner_set_pan(self, cpanume)
}
func (self classAudioEffectPanner) GetPan() Float {
	return self.ptr.API.AudioEffectPanner_get_pan(self)
}

type classAudioEffectPhaser struct{ Class[classAudioEffectPhaser] }

func (self classAudioEffectPhaser) Super() AudioEffect {
	var super AudioEffect
	super.ptr = self.ptr
	return super
}

func (self classAudioEffectPhaser) AudioEffect() AudioEffect { return self.Super() }
func (self classAudioEffectPhaser) SetRangeMinHz(hz Float) {
	self.ptr.API.AudioEffectPhaser_set_range_min_hz(self, hz)
}
func (self classAudioEffectPhaser) GetRangeMinHz() Float {
	return self.ptr.API.AudioEffectPhaser_get_range_min_hz(self)
}
func (self classAudioEffectPhaser) SetRangeMaxHz(hz Float) {
	self.ptr.API.AudioEffectPhaser_set_range_max_hz(self, hz)
}
func (self classAudioEffectPhaser) GetRangeMaxHz() Float {
	return self.ptr.API.AudioEffectPhaser_get_range_max_hz(self)
}
func (self classAudioEffectPhaser) SetRateHz(hz Float) {
	self.ptr.API.AudioEffectPhaser_set_rate_hz(self, hz)
}
func (self classAudioEffectPhaser) GetRateHz() Float {
	return self.ptr.API.AudioEffectPhaser_get_rate_hz(self)
}
func (self classAudioEffectPhaser) SetFeedback(fbk Float) {
	self.ptr.API.AudioEffectPhaser_set_feedback(self, fbk)
}
func (self classAudioEffectPhaser) GetFeedback() Float {
	return self.ptr.API.AudioEffectPhaser_get_feedback(self)
}
func (self classAudioEffectPhaser) SetDepth(depth Float) {
	self.ptr.API.AudioEffectPhaser_set_depth(self, depth)
}
func (self classAudioEffectPhaser) GetDepth() Float {
	return self.ptr.API.AudioEffectPhaser_get_depth(self)
}

type classAudioEffectPitchShift struct {
	Class[classAudioEffectPitchShift]
}

func (self classAudioEffectPitchShift) Super() AudioEffect {
	var super AudioEffect
	super.ptr = self.ptr
	return super
}

func (self classAudioEffectPitchShift) AudioEffect() AudioEffect { return self.Super() }
func (self classAudioEffectPitchShift) SetPitchScale(rate Float) {
	self.ptr.API.AudioEffectPitchShift_set_pitch_scale(self, rate)
}
func (self classAudioEffectPitchShift) GetPitchScale() Float {
	return self.ptr.API.AudioEffectPitchShift_get_pitch_scale(self)
}
func (self classAudioEffectPitchShift) SetOversampling(amount Int) {
	self.ptr.API.AudioEffectPitchShift_set_oversampling(self, amount)
}
func (self classAudioEffectPitchShift) GetOversampling() Int {
	return self.ptr.API.AudioEffectPitchShift_get_oversampling(self)
}
func (self classAudioEffectPitchShift) SetFftSize(size AudioEffectPitchShiftFFTSize) {
	self.ptr.API.AudioEffectPitchShift_set_fft_size(self, size)
}
func (self classAudioEffectPitchShift) GetFftSize() AudioEffectPitchShiftFFTSize {
	return self.ptr.API.AudioEffectPitchShift_get_fft_size(self)
}

type classAudioEffectRecord struct{ Class[classAudioEffectRecord] }

func (self classAudioEffectRecord) Super() AudioEffect {
	var super AudioEffect
	super.ptr = self.ptr
	return super
}

func (self classAudioEffectRecord) AudioEffect() AudioEffect { return self.Super() }
func (self classAudioEffectRecord) SetRecordingActive(record bool) {
	self.ptr.API.AudioEffectRecord_set_recording_active(self, record)
}
func (self classAudioEffectRecord) IsRecordingActive() bool {
	return self.ptr.API.AudioEffectRecord_is_recording_active(self)
}
func (self classAudioEffectRecord) SetFormat(format AudioStreamWAVFormat) {
	self.ptr.API.AudioEffectRecord_set_format(self, format)
}
func (self classAudioEffectRecord) GetFormat() AudioStreamWAVFormat {
	return self.ptr.API.AudioEffectRecord_get_format(self)
}
func (self classAudioEffectRecord) GetRecording() AudioStreamWAV {
	return self.ptr.API.AudioEffectRecord_get_recording(self)
}

type classAudioEffectReverb struct{ Class[classAudioEffectReverb] }

func (self classAudioEffectReverb) Super() AudioEffect {
	var super AudioEffect
	super.ptr = self.ptr
	return super
}

func (self classAudioEffectReverb) AudioEffect() AudioEffect { return self.Super() }
func (self classAudioEffectReverb) SetPredelayMsec(msec Float) {
	self.ptr.API.AudioEffectReverb_set_predelay_msec(self, msec)
}
func (self classAudioEffectReverb) GetPredelayMsec() Float {
	return self.ptr.API.AudioEffectReverb_get_predelay_msec(self)
}
func (self classAudioEffectReverb) SetPredelayFeedback(feedback Float) {
	self.ptr.API.AudioEffectReverb_set_predelay_feedback(self, feedback)
}
func (self classAudioEffectReverb) GetPredelayFeedback() Float {
	return self.ptr.API.AudioEffectReverb_get_predelay_feedback(self)
}
func (self classAudioEffectReverb) SetRoomSize(size Float) {
	self.ptr.API.AudioEffectReverb_set_room_size(self, size)
}
func (self classAudioEffectReverb) GetRoomSize() Float {
	return self.ptr.API.AudioEffectReverb_get_room_size(self)
}
func (self classAudioEffectReverb) SetDamping(amount Float) {
	self.ptr.API.AudioEffectReverb_set_damping(self, amount)
}
func (self classAudioEffectReverb) GetDamping() Float {
	return self.ptr.API.AudioEffectReverb_get_damping(self)
}
func (self classAudioEffectReverb) SetSpread(amount Float) {
	self.ptr.API.AudioEffectReverb_set_spread(self, amount)
}
func (self classAudioEffectReverb) GetSpread() Float {
	return self.ptr.API.AudioEffectReverb_get_spread(self)
}
func (self classAudioEffectReverb) SetDry(amount Float) {
	self.ptr.API.AudioEffectReverb_set_dry(self, amount)
}
func (self classAudioEffectReverb) GetDry() Float {
	return self.ptr.API.AudioEffectReverb_get_dry(self)
}
func (self classAudioEffectReverb) SetWet(amount Float) {
	self.ptr.API.AudioEffectReverb_set_wet(self, amount)
}
func (self classAudioEffectReverb) GetWet() Float {
	return self.ptr.API.AudioEffectReverb_get_wet(self)
}
func (self classAudioEffectReverb) SetHpf(amount Float) {
	self.ptr.API.AudioEffectReverb_set_hpf(self, amount)
}
func (self classAudioEffectReverb) GetHpf() Float {
	return self.ptr.API.AudioEffectReverb_get_hpf(self)
}

type classAudioEffectSpectrumAnalyzer struct {
	Class[classAudioEffectSpectrumAnalyzer]
}

func (self classAudioEffectSpectrumAnalyzer) Super() AudioEffect {
	var super AudioEffect
	super.ptr = self.ptr
	return super
}

func (self classAudioEffectSpectrumAnalyzer) AudioEffect() AudioEffect { return self.Super() }
func (self classAudioEffectSpectrumAnalyzer) SetBufferLength(seconds Float) {
	self.ptr.API.AudioEffectSpectrumAnalyzer_set_buffer_length(self, seconds)
}
func (self classAudioEffectSpectrumAnalyzer) GetBufferLength() Float {
	return self.ptr.API.AudioEffectSpectrumAnalyzer_get_buffer_length(self)
}
func (self classAudioEffectSpectrumAnalyzer) SetTapBackPos(seconds Float) {
	self.ptr.API.AudioEffectSpectrumAnalyzer_set_tap_back_pos(self, seconds)
}
func (self classAudioEffectSpectrumAnalyzer) GetTapBackPos() Float {
	return self.ptr.API.AudioEffectSpectrumAnalyzer_get_tap_back_pos(self)
}
func (self classAudioEffectSpectrumAnalyzer) SetFftSize(size AudioEffectSpectrumAnalyzerFFTSize) {
	self.ptr.API.AudioEffectSpectrumAnalyzer_set_fft_size(self, size)
}
func (self classAudioEffectSpectrumAnalyzer) GetFftSize() AudioEffectSpectrumAnalyzerFFTSize {
	return self.ptr.API.AudioEffectSpectrumAnalyzer_get_fft_size(self)
}

type classAudioEffectSpectrumAnalyzerInstance struct {
	Class[classAudioEffectSpectrumAnalyzerInstance]
}

func (self classAudioEffectSpectrumAnalyzerInstance) Super() AudioEffectInstance {
	var super AudioEffectInstance
	super.ptr = self.ptr
	return super
}

func (self classAudioEffectSpectrumAnalyzerInstance) AudioEffectInstance() AudioEffectInstance {
	return self.Super()
}
func (self classAudioEffectSpectrumAnalyzerInstance) GetMagnitudeForFrequencyRange(from_hz Float, to_hz Float, mode AudioEffectSpectrumAnalyzerInstanceMagnitudeMode) Vector2 {
	return self.ptr.API.AudioEffectSpectrumAnalyzerInstance_get_magnitude_for_frequency_range(self, from_hz, to_hz, mode)
}

type classAudioEffectStereoEnhance struct {
	Class[classAudioEffectStereoEnhance]
}

func (self classAudioEffectStereoEnhance) Super() AudioEffect {
	var super AudioEffect
	super.ptr = self.ptr
	return super
}

func (self classAudioEffectStereoEnhance) AudioEffect() AudioEffect { return self.Super() }
func (self classAudioEffectStereoEnhance) SetPanPullout(amount Float) {
	self.ptr.API.AudioEffectStereoEnhance_set_pan_pullout(self, amount)
}
func (self classAudioEffectStereoEnhance) GetPanPullout() Float {
	return self.ptr.API.AudioEffectStereoEnhance_get_pan_pullout(self)
}
func (self classAudioEffectStereoEnhance) SetTimePullout(amount Float) {
	self.ptr.API.AudioEffectStereoEnhance_set_time_pullout(self, amount)
}
func (self classAudioEffectStereoEnhance) GetTimePullout() Float {
	return self.ptr.API.AudioEffectStereoEnhance_get_time_pullout(self)
}
func (self classAudioEffectStereoEnhance) SetSurround(amount Float) {
	self.ptr.API.AudioEffectStereoEnhance_set_surround(self, amount)
}
func (self classAudioEffectStereoEnhance) GetSurround() Float {
	return self.ptr.API.AudioEffectStereoEnhance_get_surround(self)
}

type classAudioListener2D struct{ Class[classAudioListener2D] }

func (self classAudioListener2D) Super() Node2D { var super Node2D; super.ptr = self.ptr; return super }

func (self classAudioListener2D) Node2D() Node2D { return self.Super() }
func (self classAudioListener2D) MakeCurrent() {
	self.ptr.API.AudioListener2D_make_current(self)
}
func (self classAudioListener2D) ClearCurrent() {
	self.ptr.API.AudioListener2D_clear_current(self)
}
func (self classAudioListener2D) IsCurrent() bool {
	return self.ptr.API.AudioListener2D_is_current(self)
}

type classAudioListener3D struct{ Class[classAudioListener3D] }

func (self classAudioListener3D) Super() Node3D { var super Node3D; super.ptr = self.ptr; return super }

func (self classAudioListener3D) Node3D() Node3D { return self.Super() }
func (self classAudioListener3D) MakeCurrent() {
	self.ptr.API.AudioListener3D_make_current(self)
}
func (self classAudioListener3D) ClearCurrent() {
	self.ptr.API.AudioListener3D_clear_current(self)
}
func (self classAudioListener3D) IsCurrent() bool {
	return self.ptr.API.AudioListener3D_is_current(self)
}
func (self classAudioListener3D) GetListenerTransform() Transform3D {
	return self.ptr.API.AudioListener3D_get_listener_transform(self)
}

type classAudioServer struct{ Class[classAudioServer] }

func (self classAudioServer) Super() Object { var super Object; super.ptr = self.ptr; return super }

func (self classAudioServer) Object() Object { return self.Super() }

func (self classAudioServer) isSingleton() {}
func (self classAudioServer) SetBusCount(amount Int) {
	self.ptr.API.AudioServer_set_bus_count(self, amount)
}
func (self classAudioServer) GetBusCount() Int {
	return self.ptr.API.AudioServer_get_bus_count(self)
}
func (self classAudioServer) RemoveBus(index Int) {
	self.ptr.API.AudioServer_remove_bus(self, index)
}
func (self classAudioServer) AddBus(at_position Int) {
	self.ptr.API.AudioServer_add_bus(self, at_position)
}
func (self classAudioServer) MoveBus(index Int, to_index Int) {
	self.ptr.API.AudioServer_move_bus(self, index, to_index)
}
func (self classAudioServer) SetBusName(bus_idx Int, name String) {
	self.ptr.API.AudioServer_set_bus_name(self, bus_idx, name)
}
func (self classAudioServer) GetBusName(bus_idx Int) String {
	return self.ptr.API.AudioServer_get_bus_name(self, bus_idx)
}
func (self classAudioServer) GetBusIndex(bus_name StringName) Int {
	return self.ptr.API.AudioServer_get_bus_index(self, bus_name)
}
func (self classAudioServer) GetBusChannels(bus_idx Int) Int {
	return self.ptr.API.AudioServer_get_bus_channels(self, bus_idx)
}
func (self classAudioServer) SetBusVolumeDb(bus_idx Int, volume_db Float) {
	self.ptr.API.AudioServer_set_bus_volume_db(self, bus_idx, volume_db)
}
func (self classAudioServer) GetBusVolumeDb(bus_idx Int) Float {
	return self.ptr.API.AudioServer_get_bus_volume_db(self, bus_idx)
}
func (self classAudioServer) SetBusSend(bus_idx Int, send StringName) {
	self.ptr.API.AudioServer_set_bus_send(self, bus_idx, send)
}
func (self classAudioServer) GetBusSend(bus_idx Int) StringName {
	return self.ptr.API.AudioServer_get_bus_send(self, bus_idx)
}
func (self classAudioServer) SetBusSolo(bus_idx Int, enable bool) {
	self.ptr.API.AudioServer_set_bus_solo(self, bus_idx, enable)
}
func (self classAudioServer) IsBusSolo(bus_idx Int) bool {
	return self.ptr.API.AudioServer_is_bus_solo(self, bus_idx)
}
func (self classAudioServer) SetBusMute(bus_idx Int, enable bool) {
	self.ptr.API.AudioServer_set_bus_mute(self, bus_idx, enable)
}
func (self classAudioServer) IsBusMute(bus_idx Int) bool {
	return self.ptr.API.AudioServer_is_bus_mute(self, bus_idx)
}
func (self classAudioServer) SetBusBypassEffects(bus_idx Int, enable bool) {
	self.ptr.API.AudioServer_set_bus_bypass_effects(self, bus_idx, enable)
}
func (self classAudioServer) IsBusBypassingEffects(bus_idx Int) bool {
	return self.ptr.API.AudioServer_is_bus_bypassing_effects(self, bus_idx)
}
func (self classAudioServer) AddBusEffect(bus_idx Int, effect AudioEffect, at_position Int) {
	self.ptr.API.AudioServer_add_bus_effect(self, bus_idx, effect, at_position)
}
func (self classAudioServer) RemoveBusEffect(bus_idx Int, effect_idx Int) {
	self.ptr.API.AudioServer_remove_bus_effect(self, bus_idx, effect_idx)
}
func (self classAudioServer) GetBusEffectCount(bus_idx Int) Int {
	return self.ptr.API.AudioServer_get_bus_effect_count(self, bus_idx)
}
func (self classAudioServer) GetBusEffect(bus_idx Int, effect_idx Int) AudioEffect {
	return self.ptr.API.AudioServer_get_bus_effect(self, bus_idx, effect_idx)
}
func (self classAudioServer) GetBusEffectInstance(bus_idx Int, effect_idx Int, channel Int) AudioEffectInstance {
	return self.ptr.API.AudioServer_get_bus_effect_instance(self, bus_idx, effect_idx, channel)
}
func (self classAudioServer) SwapBusEffects(bus_idx Int, effect_idx Int, by_effect_idx Int) {
	self.ptr.API.AudioServer_swap_bus_effects(self, bus_idx, effect_idx, by_effect_idx)
}
func (self classAudioServer) SetBusEffectEnabled(bus_idx Int, effect_idx Int, enabled bool) {
	self.ptr.API.AudioServer_set_bus_effect_enabled(self, bus_idx, effect_idx, enabled)
}
func (self classAudioServer) IsBusEffectEnabled(bus_idx Int, effect_idx Int) bool {
	return self.ptr.API.AudioServer_is_bus_effect_enabled(self, bus_idx, effect_idx)
}
func (self classAudioServer) GetBusPeakVolumeLeftDb(bus_idx Int, channel Int) Float {
	return self.ptr.API.AudioServer_get_bus_peak_volume_left_db(self, bus_idx, channel)
}
func (self classAudioServer) GetBusPeakVolumeRightDb(bus_idx Int, channel Int) Float {
	return self.ptr.API.AudioServer_get_bus_peak_volume_right_db(self, bus_idx, channel)
}
func (self classAudioServer) SetPlaybackSpeedScale(scale Float) {
	self.ptr.API.AudioServer_set_playback_speed_scale(self, scale)
}
func (self classAudioServer) GetPlaybackSpeedScale() Float {
	return self.ptr.API.AudioServer_get_playback_speed_scale(self)
}
func (self classAudioServer) Lock() {
	self.ptr.API.AudioServer_lock(self)
}
func (self classAudioServer) Unlock() {
	self.ptr.API.AudioServer_unlock(self)
}
func (self classAudioServer) GetSpeakerMode() AudioServerSpeakerMode {
	return self.ptr.API.AudioServer_get_speaker_mode(self)
}
func (self classAudioServer) GetMixRate() Float {
	return self.ptr.API.AudioServer_get_mix_rate(self)
}
func (self classAudioServer) GetOutputDeviceList() PackedStringArray {
	return self.ptr.API.AudioServer_get_output_device_list(self)
}
func (self classAudioServer) GetOutputDevice() String {
	return self.ptr.API.AudioServer_get_output_device(self)
}
func (self classAudioServer) SetOutputDevice(name String) {
	self.ptr.API.AudioServer_set_output_device(self, name)
}
func (self classAudioServer) GetTimeToNextMix() Float {
	return self.ptr.API.AudioServer_get_time_to_next_mix(self)
}
func (self classAudioServer) GetTimeSinceLastMix() Float {
	return self.ptr.API.AudioServer_get_time_since_last_mix(self)
}
func (self classAudioServer) GetOutputLatency() Float {
	return self.ptr.API.AudioServer_get_output_latency(self)
}
func (self classAudioServer) GetInputDeviceList() PackedStringArray {
	return self.ptr.API.AudioServer_get_input_device_list(self)
}
func (self classAudioServer) GetInputDevice() String {
	return self.ptr.API.AudioServer_get_input_device(self)
}
func (self classAudioServer) SetInputDevice(name String) {
	self.ptr.API.AudioServer_set_input_device(self, name)
}
func (self classAudioServer) SetBusLayout(bus_layout AudioBusLayout) {
	self.ptr.API.AudioServer_set_bus_layout(self, bus_layout)
}
func (self classAudioServer) GenerateBusLayout() AudioBusLayout {
	return self.ptr.API.AudioServer_generate_bus_layout(self)
}
func (self classAudioServer) SetEnableTaggingUsedAudioStreams(enable bool) {
	self.ptr.API.AudioServer_set_enable_tagging_used_audio_streams(self, enable)
}

type classAudioStream struct{ Class[classAudioStream] }

func (self classAudioStream) Super() Resource { var super Resource; super.ptr = self.ptr; return super }

func (self classAudioStream) Resource() Resource { return self.Super() }
func (self classAudioStream) GetLength() Float {
	return self.ptr.API.AudioStream_get_length(self)
}
func (self classAudioStream) IsMonophonic() bool {
	return self.ptr.API.AudioStream_is_monophonic(self)
}
func (self classAudioStream) InstantiatePlayback() AudioStreamPlayback {
	return self.ptr.API.AudioStream_instantiate_playback(self)
}

type classAudioStreamGenerator struct {
	Class[classAudioStreamGenerator]
}

func (self classAudioStreamGenerator) Super() AudioStream {
	var super AudioStream
	super.ptr = self.ptr
	return super
}

func (self classAudioStreamGenerator) AudioStream() AudioStream { return self.Super() }
func (self classAudioStreamGenerator) SetMixRate(hz Float) {
	self.ptr.API.AudioStreamGenerator_set_mix_rate(self, hz)
}
func (self classAudioStreamGenerator) GetMixRate() Float {
	return self.ptr.API.AudioStreamGenerator_get_mix_rate(self)
}
func (self classAudioStreamGenerator) SetBufferLength(seconds Float) {
	self.ptr.API.AudioStreamGenerator_set_buffer_length(self, seconds)
}
func (self classAudioStreamGenerator) GetBufferLength() Float {
	return self.ptr.API.AudioStreamGenerator_get_buffer_length(self)
}

type classAudioStreamGeneratorPlayback struct {
	Class[classAudioStreamGeneratorPlayback]
}

func (self classAudioStreamGeneratorPlayback) Super() AudioStreamPlaybackResampled {
	var super AudioStreamPlaybackResampled
	super.ptr = self.ptr
	return super
}

func (self classAudioStreamGeneratorPlayback) AudioStreamPlaybackResampled() AudioStreamPlaybackResampled {
	return self.Super()
}
func (self classAudioStreamGeneratorPlayback) PushFrame(frame Vector2) bool {
	return self.ptr.API.AudioStreamGeneratorPlayback_push_frame(self, frame)
}
func (self classAudioStreamGeneratorPlayback) CanPushBuffer(amount Int) bool {
	return self.ptr.API.AudioStreamGeneratorPlayback_can_push_buffer(self, amount)
}
func (self classAudioStreamGeneratorPlayback) PushBuffer(frames PackedVector2Array) bool {
	return self.ptr.API.AudioStreamGeneratorPlayback_push_buffer(self, frames)
}
func (self classAudioStreamGeneratorPlayback) GetFramesAvailable() Int {
	return self.ptr.API.AudioStreamGeneratorPlayback_get_frames_available(self)
}
func (self classAudioStreamGeneratorPlayback) GetSkips() Int {
	return self.ptr.API.AudioStreamGeneratorPlayback_get_skips(self)
}
func (self classAudioStreamGeneratorPlayback) ClearBuffer() {
	self.ptr.API.AudioStreamGeneratorPlayback_clear_buffer(self)
}

type classAudioStreamMP3 struct{ Class[classAudioStreamMP3] }

func (self classAudioStreamMP3) Super() AudioStream {
	var super AudioStream
	super.ptr = self.ptr
	return super
}

func (self classAudioStreamMP3) AudioStream() AudioStream { return self.Super() }
func (self classAudioStreamMP3) SetData(data PackedByteArray) {
	self.ptr.API.AudioStreamMP3_set_data(self, data)
}
func (self classAudioStreamMP3) GetData() PackedByteArray {
	return self.ptr.API.AudioStreamMP3_get_data(self)
}
func (self classAudioStreamMP3) SetLoop(enable bool) {
	self.ptr.API.AudioStreamMP3_set_loop(self, enable)
}
func (self classAudioStreamMP3) HasLoop() bool {
	return self.ptr.API.AudioStreamMP3_has_loop(self)
}
func (self classAudioStreamMP3) SetLoopOffset(seconds Float) {
	self.ptr.API.AudioStreamMP3_set_loop_offset(self, seconds)
}
func (self classAudioStreamMP3) GetLoopOffset() Float {
	return self.ptr.API.AudioStreamMP3_get_loop_offset(self)
}
func (self classAudioStreamMP3) SetBpm(bpm Float) {
	self.ptr.API.AudioStreamMP3_set_bpm(self, bpm)
}
func (self classAudioStreamMP3) GetBpm() Float {
	return self.ptr.API.AudioStreamMP3_get_bpm(self)
}
func (self classAudioStreamMP3) SetBeatCount(count Int) {
	self.ptr.API.AudioStreamMP3_set_beat_count(self, count)
}
func (self classAudioStreamMP3) GetBeatCount() Int {
	return self.ptr.API.AudioStreamMP3_get_beat_count(self)
}
func (self classAudioStreamMP3) SetBarBeats(count Int) {
	self.ptr.API.AudioStreamMP3_set_bar_beats(self, count)
}
func (self classAudioStreamMP3) GetBarBeats() Int {
	return self.ptr.API.AudioStreamMP3_get_bar_beats(self)
}

type classAudioStreamMicrophone struct {
	Class[classAudioStreamMicrophone]
}

func (self classAudioStreamMicrophone) Super() AudioStream {
	var super AudioStream
	super.ptr = self.ptr
	return super
}

func (self classAudioStreamMicrophone) AudioStream() AudioStream { return self.Super() }

type classAudioStreamOggVorbis struct {
	Class[classAudioStreamOggVorbis]
}

func (self classAudioStreamOggVorbis) Super() AudioStream {
	var super AudioStream
	super.ptr = self.ptr
	return super
}

func (self classAudioStreamOggVorbis) AudioStream() AudioStream { return self.Super() }
func (self classAudioStreamOggVorbis) LoadFromBuffer(buffer PackedByteArray) AudioStreamOggVorbis {
	return self.ptr.API.AudioStreamOggVorbis_load_from_buffer(self, buffer)
}
func (self classAudioStreamOggVorbis) LoadFromFile(path String) AudioStreamOggVorbis {
	return self.ptr.API.AudioStreamOggVorbis_load_from_file(self, path)
}
func (self classAudioStreamOggVorbis) SetPacketSequence(packet_sequence OggPacketSequence) {
	self.ptr.API.AudioStreamOggVorbis_set_packet_sequence(self, packet_sequence)
}
func (self classAudioStreamOggVorbis) GetPacketSequence() OggPacketSequence {
	return self.ptr.API.AudioStreamOggVorbis_get_packet_sequence(self)
}
func (self classAudioStreamOggVorbis) SetLoop(enable bool) {
	self.ptr.API.AudioStreamOggVorbis_set_loop(self, enable)
}
func (self classAudioStreamOggVorbis) HasLoop() bool {
	return self.ptr.API.AudioStreamOggVorbis_has_loop(self)
}
func (self classAudioStreamOggVorbis) SetLoopOffset(seconds Float) {
	self.ptr.API.AudioStreamOggVorbis_set_loop_offset(self, seconds)
}
func (self classAudioStreamOggVorbis) GetLoopOffset() Float {
	return self.ptr.API.AudioStreamOggVorbis_get_loop_offset(self)
}
func (self classAudioStreamOggVorbis) SetBpm(bpm Float) {
	self.ptr.API.AudioStreamOggVorbis_set_bpm(self, bpm)
}
func (self classAudioStreamOggVorbis) GetBpm() Float {
	return self.ptr.API.AudioStreamOggVorbis_get_bpm(self)
}
func (self classAudioStreamOggVorbis) SetBeatCount(count Int) {
	self.ptr.API.AudioStreamOggVorbis_set_beat_count(self, count)
}
func (self classAudioStreamOggVorbis) GetBeatCount() Int {
	return self.ptr.API.AudioStreamOggVorbis_get_beat_count(self)
}
func (self classAudioStreamOggVorbis) SetBarBeats(count Int) {
	self.ptr.API.AudioStreamOggVorbis_set_bar_beats(self, count)
}
func (self classAudioStreamOggVorbis) GetBarBeats() Int {
	return self.ptr.API.AudioStreamOggVorbis_get_bar_beats(self)
}

type classAudioStreamPlayback struct {
	Class[classAudioStreamPlayback]
}

func (self classAudioStreamPlayback) Super() RefCounted {
	var super RefCounted
	super.ptr = self.ptr
	return super
}

func (self classAudioStreamPlayback) RefCounted() RefCounted { return self.Super() }

type classAudioStreamPlaybackOggVorbis struct {
	Class[classAudioStreamPlaybackOggVorbis]
}

func (self classAudioStreamPlaybackOggVorbis) Super() AudioStreamPlaybackResampled {
	var super AudioStreamPlaybackResampled
	super.ptr = self.ptr
	return super
}

func (self classAudioStreamPlaybackOggVorbis) AudioStreamPlaybackResampled() AudioStreamPlaybackResampled {
	return self.Super()
}

type classAudioStreamPlaybackPolyphonic struct {
	Class[classAudioStreamPlaybackPolyphonic]
}

func (self classAudioStreamPlaybackPolyphonic) Super() AudioStreamPlayback {
	var super AudioStreamPlayback
	super.ptr = self.ptr
	return super
}

func (self classAudioStreamPlaybackPolyphonic) AudioStreamPlayback() AudioStreamPlayback {
	return self.Super()
}
func (self classAudioStreamPlaybackPolyphonic) PlayStream(stream AudioStream, from_offset Float, volume_db Float, pitch_scale Float) Int {
	return self.ptr.API.AudioStreamPlaybackPolyphonic_play_stream(self, stream, from_offset, volume_db, pitch_scale)
}
func (self classAudioStreamPlaybackPolyphonic) SetStreamVolume(stream Int, volume_db Float) {
	self.ptr.API.AudioStreamPlaybackPolyphonic_set_stream_volume(self, stream, volume_db)
}
func (self classAudioStreamPlaybackPolyphonic) SetStreamPitchScale(stream Int, pitch_scale Float) {
	self.ptr.API.AudioStreamPlaybackPolyphonic_set_stream_pitch_scale(self, stream, pitch_scale)
}
func (self classAudioStreamPlaybackPolyphonic) IsStreamPlaying(stream Int) bool {
	return self.ptr.API.AudioStreamPlaybackPolyphonic_is_stream_playing(self, stream)
}
func (self classAudioStreamPlaybackPolyphonic) StopStream(stream Int) {
	self.ptr.API.AudioStreamPlaybackPolyphonic_stop_stream(self, stream)
}

type classAudioStreamPlaybackResampled struct {
	Class[classAudioStreamPlaybackResampled]
}

func (self classAudioStreamPlaybackResampled) Super() AudioStreamPlayback {
	var super AudioStreamPlayback
	super.ptr = self.ptr
	return super
}

func (self classAudioStreamPlaybackResampled) AudioStreamPlayback() AudioStreamPlayback {
	return self.Super()
}
func (self classAudioStreamPlaybackResampled) BeginResample() {
	self.ptr.API.AudioStreamPlaybackResampled_begin_resample(self)
}

type classAudioStreamPlayer struct{ Class[classAudioStreamPlayer] }

func (self classAudioStreamPlayer) Super() Node { var super Node; super.ptr = self.ptr; return super }

func (self classAudioStreamPlayer) Node() Node { return self.Super() }
func (self classAudioStreamPlayer) SetStream(stream AudioStream) {
	self.ptr.API.AudioStreamPlayer_set_stream(self, stream)
}
func (self classAudioStreamPlayer) GetStream() AudioStream {
	return self.ptr.API.AudioStreamPlayer_get_stream(self)
}
func (self classAudioStreamPlayer) SetVolumeDb(volume_db Float) {
	self.ptr.API.AudioStreamPlayer_set_volume_db(self, volume_db)
}
func (self classAudioStreamPlayer) GetVolumeDb() Float {
	return self.ptr.API.AudioStreamPlayer_get_volume_db(self)
}
func (self classAudioStreamPlayer) SetPitchScale(pitch_scale Float) {
	self.ptr.API.AudioStreamPlayer_set_pitch_scale(self, pitch_scale)
}
func (self classAudioStreamPlayer) GetPitchScale() Float {
	return self.ptr.API.AudioStreamPlayer_get_pitch_scale(self)
}
func (self classAudioStreamPlayer) Play(from_position Float) {
	self.ptr.API.AudioStreamPlayer_play(self, from_position)
}
func (self classAudioStreamPlayer) SeekTo(to_position Float) {
	self.ptr.API.AudioStreamPlayer_seek(self, to_position)
}
func (self classAudioStreamPlayer) Stop() {
	self.ptr.API.AudioStreamPlayer_stop(self)
}
func (self classAudioStreamPlayer) IsPlaying() bool {
	return self.ptr.API.AudioStreamPlayer_is_playing(self)
}
func (self classAudioStreamPlayer) GetPlaybackPosition() Float {
	return self.ptr.API.AudioStreamPlayer_get_playback_position(self)
}
func (self classAudioStreamPlayer) SetBus(bus StringName) {
	self.ptr.API.AudioStreamPlayer_set_bus(self, bus)
}
func (self classAudioStreamPlayer) GetBus() StringName {
	return self.ptr.API.AudioStreamPlayer_get_bus(self)
}
func (self classAudioStreamPlayer) SetAutoplay(enable bool) {
	self.ptr.API.AudioStreamPlayer_set_autoplay(self, enable)
}
func (self classAudioStreamPlayer) IsAutoplayEnabled() bool {
	return self.ptr.API.AudioStreamPlayer_is_autoplay_enabled(self)
}
func (self classAudioStreamPlayer) SetMixTarget(mix_target AudioStreamPlayerMixTarget) {
	self.ptr.API.AudioStreamPlayer_set_mix_target(self, mix_target)
}
func (self classAudioStreamPlayer) GetMixTarget() AudioStreamPlayerMixTarget {
	return self.ptr.API.AudioStreamPlayer_get_mix_target(self)
}
func (self classAudioStreamPlayer) SetStreamPaused(pause bool) {
	self.ptr.API.AudioStreamPlayer_set_stream_paused(self, pause)
}
func (self classAudioStreamPlayer) GetStreamPaused() bool {
	return self.ptr.API.AudioStreamPlayer_get_stream_paused(self)
}
func (self classAudioStreamPlayer) SetMaxPolyphony(max_polyphony Int) {
	self.ptr.API.AudioStreamPlayer_set_max_polyphony(self, max_polyphony)
}
func (self classAudioStreamPlayer) GetMaxPolyphony() Int {
	return self.ptr.API.AudioStreamPlayer_get_max_polyphony(self)
}
func (self classAudioStreamPlayer) HasStreamPlayback() bool {
	return self.ptr.API.AudioStreamPlayer_has_stream_playback(self)
}
func (self classAudioStreamPlayer) GetStreamPlayback() AudioStreamPlayback {
	return self.ptr.API.AudioStreamPlayer_get_stream_playback(self)
}

type classAudioStreamPlayer2D struct {
	Class[classAudioStreamPlayer2D]
}

func (self classAudioStreamPlayer2D) Super() Node2D {
	var super Node2D
	super.ptr = self.ptr
	return super
}

func (self classAudioStreamPlayer2D) Node2D() Node2D { return self.Super() }
func (self classAudioStreamPlayer2D) SetStream(stream AudioStream) {
	self.ptr.API.AudioStreamPlayer2D_set_stream(self, stream)
}
func (self classAudioStreamPlayer2D) GetStream() AudioStream {
	return self.ptr.API.AudioStreamPlayer2D_get_stream(self)
}
func (self classAudioStreamPlayer2D) SetVolumeDb(volume_db Float) {
	self.ptr.API.AudioStreamPlayer2D_set_volume_db(self, volume_db)
}
func (self classAudioStreamPlayer2D) GetVolumeDb() Float {
	return self.ptr.API.AudioStreamPlayer2D_get_volume_db(self)
}
func (self classAudioStreamPlayer2D) SetPitchScale(pitch_scale Float) {
	self.ptr.API.AudioStreamPlayer2D_set_pitch_scale(self, pitch_scale)
}
func (self classAudioStreamPlayer2D) GetPitchScale() Float {
	return self.ptr.API.AudioStreamPlayer2D_get_pitch_scale(self)
}
func (self classAudioStreamPlayer2D) Play(from_position Float) {
	self.ptr.API.AudioStreamPlayer2D_play(self, from_position)
}
func (self classAudioStreamPlayer2D) SeekTo(to_position Float) {
	self.ptr.API.AudioStreamPlayer2D_seek(self, to_position)
}
func (self classAudioStreamPlayer2D) Stop() {
	self.ptr.API.AudioStreamPlayer2D_stop(self)
}
func (self classAudioStreamPlayer2D) IsPlaying() bool {
	return self.ptr.API.AudioStreamPlayer2D_is_playing(self)
}
func (self classAudioStreamPlayer2D) GetPlaybackPosition() Float {
	return self.ptr.API.AudioStreamPlayer2D_get_playback_position(self)
}
func (self classAudioStreamPlayer2D) SetBus(bus StringName) {
	self.ptr.API.AudioStreamPlayer2D_set_bus(self, bus)
}
func (self classAudioStreamPlayer2D) GetBus() StringName {
	return self.ptr.API.AudioStreamPlayer2D_get_bus(self)
}
func (self classAudioStreamPlayer2D) SetAutoplay(enable bool) {
	self.ptr.API.AudioStreamPlayer2D_set_autoplay(self, enable)
}
func (self classAudioStreamPlayer2D) IsAutoplayEnabled() bool {
	return self.ptr.API.AudioStreamPlayer2D_is_autoplay_enabled(self)
}
func (self classAudioStreamPlayer2D) SetMaxDistance(pixels Float) {
	self.ptr.API.AudioStreamPlayer2D_set_max_distance(self, pixels)
}
func (self classAudioStreamPlayer2D) GetMaxDistance() Float {
	return self.ptr.API.AudioStreamPlayer2D_get_max_distance(self)
}
func (self classAudioStreamPlayer2D) SetAttenuation(curve Float) {
	self.ptr.API.AudioStreamPlayer2D_set_attenuation(self, curve)
}
func (self classAudioStreamPlayer2D) GetAttenuation() Float {
	return self.ptr.API.AudioStreamPlayer2D_get_attenuation(self)
}
func (self classAudioStreamPlayer2D) SetAreaMask(mask Int) {
	self.ptr.API.AudioStreamPlayer2D_set_area_mask(self, mask)
}
func (self classAudioStreamPlayer2D) GetAreaMask() Int {
	return self.ptr.API.AudioStreamPlayer2D_get_area_mask(self)
}
func (self classAudioStreamPlayer2D) SetStreamPaused(pause bool) {
	self.ptr.API.AudioStreamPlayer2D_set_stream_paused(self, pause)
}
func (self classAudioStreamPlayer2D) GetStreamPaused() bool {
	return self.ptr.API.AudioStreamPlayer2D_get_stream_paused(self)
}
func (self classAudioStreamPlayer2D) SetMaxPolyphony(max_polyphony Int) {
	self.ptr.API.AudioStreamPlayer2D_set_max_polyphony(self, max_polyphony)
}
func (self classAudioStreamPlayer2D) GetMaxPolyphony() Int {
	return self.ptr.API.AudioStreamPlayer2D_get_max_polyphony(self)
}
func (self classAudioStreamPlayer2D) SetPanningStrength(panning_strength Float) {
	self.ptr.API.AudioStreamPlayer2D_set_panning_strength(self, panning_strength)
}
func (self classAudioStreamPlayer2D) GetPanningStrength() Float {
	return self.ptr.API.AudioStreamPlayer2D_get_panning_strength(self)
}
func (self classAudioStreamPlayer2D) HasStreamPlayback() bool {
	return self.ptr.API.AudioStreamPlayer2D_has_stream_playback(self)
}
func (self classAudioStreamPlayer2D) GetStreamPlayback() AudioStreamPlayback {
	return self.ptr.API.AudioStreamPlayer2D_get_stream_playback(self)
}

type classAudioStreamPlayer3D struct {
	Class[classAudioStreamPlayer3D]
}

func (self classAudioStreamPlayer3D) Super() Node3D {
	var super Node3D
	super.ptr = self.ptr
	return super
}

func (self classAudioStreamPlayer3D) Node3D() Node3D { return self.Super() }
func (self classAudioStreamPlayer3D) SetStream(stream AudioStream) {
	self.ptr.API.AudioStreamPlayer3D_set_stream(self, stream)
}
func (self classAudioStreamPlayer3D) GetStream() AudioStream {
	return self.ptr.API.AudioStreamPlayer3D_get_stream(self)
}
func (self classAudioStreamPlayer3D) SetVolumeDb(volume_db Float) {
	self.ptr.API.AudioStreamPlayer3D_set_volume_db(self, volume_db)
}
func (self classAudioStreamPlayer3D) GetVolumeDb() Float {
	return self.ptr.API.AudioStreamPlayer3D_get_volume_db(self)
}
func (self classAudioStreamPlayer3D) SetUnitSize(unit_size Float) {
	self.ptr.API.AudioStreamPlayer3D_set_unit_size(self, unit_size)
}
func (self classAudioStreamPlayer3D) GetUnitSize() Float {
	return self.ptr.API.AudioStreamPlayer3D_get_unit_size(self)
}
func (self classAudioStreamPlayer3D) SetMaxDb(max_db Float) {
	self.ptr.API.AudioStreamPlayer3D_set_max_db(self, max_db)
}
func (self classAudioStreamPlayer3D) GetMaxDb() Float {
	return self.ptr.API.AudioStreamPlayer3D_get_max_db(self)
}
func (self classAudioStreamPlayer3D) SetPitchScale(pitch_scale Float) {
	self.ptr.API.AudioStreamPlayer3D_set_pitch_scale(self, pitch_scale)
}
func (self classAudioStreamPlayer3D) GetPitchScale() Float {
	return self.ptr.API.AudioStreamPlayer3D_get_pitch_scale(self)
}
func (self classAudioStreamPlayer3D) Play(from_position Float) {
	self.ptr.API.AudioStreamPlayer3D_play(self, from_position)
}
func (self classAudioStreamPlayer3D) SeekTo(to_position Float) {
	self.ptr.API.AudioStreamPlayer3D_seek(self, to_position)
}
func (self classAudioStreamPlayer3D) Stop() {
	self.ptr.API.AudioStreamPlayer3D_stop(self)
}
func (self classAudioStreamPlayer3D) IsPlaying() bool {
	return self.ptr.API.AudioStreamPlayer3D_is_playing(self)
}
func (self classAudioStreamPlayer3D) GetPlaybackPosition() Float {
	return self.ptr.API.AudioStreamPlayer3D_get_playback_position(self)
}
func (self classAudioStreamPlayer3D) SetBus(bus StringName) {
	self.ptr.API.AudioStreamPlayer3D_set_bus(self, bus)
}
func (self classAudioStreamPlayer3D) GetBus() StringName {
	return self.ptr.API.AudioStreamPlayer3D_get_bus(self)
}
func (self classAudioStreamPlayer3D) SetAutoplay(enable bool) {
	self.ptr.API.AudioStreamPlayer3D_set_autoplay(self, enable)
}
func (self classAudioStreamPlayer3D) IsAutoplayEnabled() bool {
	return self.ptr.API.AudioStreamPlayer3D_is_autoplay_enabled(self)
}
func (self classAudioStreamPlayer3D) SetMaxDistance(meters Float) {
	self.ptr.API.AudioStreamPlayer3D_set_max_distance(self, meters)
}
func (self classAudioStreamPlayer3D) GetMaxDistance() Float {
	return self.ptr.API.AudioStreamPlayer3D_get_max_distance(self)
}
func (self classAudioStreamPlayer3D) SetAreaMask(mask Int) {
	self.ptr.API.AudioStreamPlayer3D_set_area_mask(self, mask)
}
func (self classAudioStreamPlayer3D) GetAreaMask() Int {
	return self.ptr.API.AudioStreamPlayer3D_get_area_mask(self)
}
func (self classAudioStreamPlayer3D) SetEmissionAngle(degrees Float) {
	self.ptr.API.AudioStreamPlayer3D_set_emission_angle(self, degrees)
}
func (self classAudioStreamPlayer3D) GetEmissionAngle() Float {
	return self.ptr.API.AudioStreamPlayer3D_get_emission_angle(self)
}
func (self classAudioStreamPlayer3D) SetEmissionAngleEnabled(enabled bool) {
	self.ptr.API.AudioStreamPlayer3D_set_emission_angle_enabled(self, enabled)
}
func (self classAudioStreamPlayer3D) IsEmissionAngleEnabled() bool {
	return self.ptr.API.AudioStreamPlayer3D_is_emission_angle_enabled(self)
}
func (self classAudioStreamPlayer3D) SetEmissionAngleFilterAttenuationDb(db Float) {
	self.ptr.API.AudioStreamPlayer3D_set_emission_angle_filter_attenuation_db(self, db)
}
func (self classAudioStreamPlayer3D) GetEmissionAngleFilterAttenuationDb() Float {
	return self.ptr.API.AudioStreamPlayer3D_get_emission_angle_filter_attenuation_db(self)
}
func (self classAudioStreamPlayer3D) SetAttenuationFilterCutoffHz(degrees Float) {
	self.ptr.API.AudioStreamPlayer3D_set_attenuation_filter_cutoff_hz(self, degrees)
}
func (self classAudioStreamPlayer3D) GetAttenuationFilterCutoffHz() Float {
	return self.ptr.API.AudioStreamPlayer3D_get_attenuation_filter_cutoff_hz(self)
}
func (self classAudioStreamPlayer3D) SetAttenuationFilterDb(db Float) {
	self.ptr.API.AudioStreamPlayer3D_set_attenuation_filter_db(self, db)
}
func (self classAudioStreamPlayer3D) GetAttenuationFilterDb() Float {
	return self.ptr.API.AudioStreamPlayer3D_get_attenuation_filter_db(self)
}
func (self classAudioStreamPlayer3D) SetAttenuationModel(model AudioStreamPlayer3DAttenuationModel) {
	self.ptr.API.AudioStreamPlayer3D_set_attenuation_model(self, model)
}
func (self classAudioStreamPlayer3D) GetAttenuationModel() AudioStreamPlayer3DAttenuationModel {
	return self.ptr.API.AudioStreamPlayer3D_get_attenuation_model(self)
}
func (self classAudioStreamPlayer3D) SetDopplerTracking(mode AudioStreamPlayer3DDopplerTracking) {
	self.ptr.API.AudioStreamPlayer3D_set_doppler_tracking(self, mode)
}
func (self classAudioStreamPlayer3D) GetDopplerTracking() AudioStreamPlayer3DDopplerTracking {
	return self.ptr.API.AudioStreamPlayer3D_get_doppler_tracking(self)
}
func (self classAudioStreamPlayer3D) SetStreamPaused(pause bool) {
	self.ptr.API.AudioStreamPlayer3D_set_stream_paused(self, pause)
}
func (self classAudioStreamPlayer3D) GetStreamPaused() bool {
	return self.ptr.API.AudioStreamPlayer3D_get_stream_paused(self)
}
func (self classAudioStreamPlayer3D) SetMaxPolyphony(max_polyphony Int) {
	self.ptr.API.AudioStreamPlayer3D_set_max_polyphony(self, max_polyphony)
}
func (self classAudioStreamPlayer3D) GetMaxPolyphony() Int {
	return self.ptr.API.AudioStreamPlayer3D_get_max_polyphony(self)
}
func (self classAudioStreamPlayer3D) SetPanningStrength(panning_strength Float) {
	self.ptr.API.AudioStreamPlayer3D_set_panning_strength(self, panning_strength)
}
func (self classAudioStreamPlayer3D) GetPanningStrength() Float {
	return self.ptr.API.AudioStreamPlayer3D_get_panning_strength(self)
}
func (self classAudioStreamPlayer3D) HasStreamPlayback() bool {
	return self.ptr.API.AudioStreamPlayer3D_has_stream_playback(self)
}
func (self classAudioStreamPlayer3D) GetStreamPlayback() AudioStreamPlayback {
	return self.ptr.API.AudioStreamPlayer3D_get_stream_playback(self)
}

type classAudioStreamPolyphonic struct {
	Class[classAudioStreamPolyphonic]
}

func (self classAudioStreamPolyphonic) Super() AudioStream {
	var super AudioStream
	super.ptr = self.ptr
	return super
}

func (self classAudioStreamPolyphonic) AudioStream() AudioStream { return self.Super() }
func (self classAudioStreamPolyphonic) SetPolyphony(voices Int) {
	self.ptr.API.AudioStreamPolyphonic_set_polyphony(self, voices)
}
func (self classAudioStreamPolyphonic) GetPolyphony() Int {
	return self.ptr.API.AudioStreamPolyphonic_get_polyphony(self)
}

type classAudioStreamRandomizer struct {
	Class[classAudioStreamRandomizer]
}

func (self classAudioStreamRandomizer) Super() AudioStream {
	var super AudioStream
	super.ptr = self.ptr
	return super
}

func (self classAudioStreamRandomizer) AudioStream() AudioStream { return self.Super() }
func (self classAudioStreamRandomizer) AddStream(index Int, stream AudioStream, weight Float) {
	self.ptr.API.AudioStreamRandomizer_add_stream(self, index, stream, weight)
}
func (self classAudioStreamRandomizer) MoveStream(index_from Int, index_to Int) {
	self.ptr.API.AudioStreamRandomizer_move_stream(self, index_from, index_to)
}
func (self classAudioStreamRandomizer) RemoveStream(index Int) {
	self.ptr.API.AudioStreamRandomizer_remove_stream(self, index)
}
func (self classAudioStreamRandomizer) SetStream(index Int, stream AudioStream) {
	self.ptr.API.AudioStreamRandomizer_set_stream(self, index, stream)
}
func (self classAudioStreamRandomizer) GetStream(index Int) AudioStream {
	return self.ptr.API.AudioStreamRandomizer_get_stream(self, index)
}
func (self classAudioStreamRandomizer) SetStreamProbabilityWeight(index Int, weight Float) {
	self.ptr.API.AudioStreamRandomizer_set_stream_probability_weight(self, index, weight)
}
func (self classAudioStreamRandomizer) GetStreamProbabilityWeight(index Int) Float {
	return self.ptr.API.AudioStreamRandomizer_get_stream_probability_weight(self, index)
}
func (self classAudioStreamRandomizer) SetStreamsCount(count Int) {
	self.ptr.API.AudioStreamRandomizer_set_streams_count(self, count)
}
func (self classAudioStreamRandomizer) GetStreamsCount() Int {
	return self.ptr.API.AudioStreamRandomizer_get_streams_count(self)
}
func (self classAudioStreamRandomizer) SetRandomPitch(scale Float) {
	self.ptr.API.AudioStreamRandomizer_set_random_pitch(self, scale)
}
func (self classAudioStreamRandomizer) GetRandomPitch() Float {
	return self.ptr.API.AudioStreamRandomizer_get_random_pitch(self)
}
func (self classAudioStreamRandomizer) SetRandomVolumeOffsetDb(db_offset Float) {
	self.ptr.API.AudioStreamRandomizer_set_random_volume_offset_db(self, db_offset)
}
func (self classAudioStreamRandomizer) GetRandomVolumeOffsetDb() Float {
	return self.ptr.API.AudioStreamRandomizer_get_random_volume_offset_db(self)
}
func (self classAudioStreamRandomizer) SetPlaybackMode(mode AudioStreamRandomizerPlaybackMode) {
	self.ptr.API.AudioStreamRandomizer_set_playback_mode(self, mode)
}
func (self classAudioStreamRandomizer) GetPlaybackMode() AudioStreamRandomizerPlaybackMode {
	return self.ptr.API.AudioStreamRandomizer_get_playback_mode(self)
}

type classAudioStreamWAV struct{ Class[classAudioStreamWAV] }

func (self classAudioStreamWAV) Super() AudioStream {
	var super AudioStream
	super.ptr = self.ptr
	return super
}

func (self classAudioStreamWAV) AudioStream() AudioStream { return self.Super() }
func (self classAudioStreamWAV) SetData(data PackedByteArray) {
	self.ptr.API.AudioStreamWAV_set_data(self, data)
}
func (self classAudioStreamWAV) GetData() PackedByteArray {
	return self.ptr.API.AudioStreamWAV_get_data(self)
}
func (self classAudioStreamWAV) SetFormat(format AudioStreamWAVFormat) {
	self.ptr.API.AudioStreamWAV_set_format(self, format)
}
func (self classAudioStreamWAV) GetFormat() AudioStreamWAVFormat {
	return self.ptr.API.AudioStreamWAV_get_format(self)
}
func (self classAudioStreamWAV) SetLoopMode(loop_mode AudioStreamWAVLoopMode) {
	self.ptr.API.AudioStreamWAV_set_loop_mode(self, loop_mode)
}
func (self classAudioStreamWAV) GetLoopMode() AudioStreamWAVLoopMode {
	return self.ptr.API.AudioStreamWAV_get_loop_mode(self)
}
func (self classAudioStreamWAV) SetLoopBegin(loop_begin Int) {
	self.ptr.API.AudioStreamWAV_set_loop_begin(self, loop_begin)
}
func (self classAudioStreamWAV) GetLoopBegin() Int {
	return self.ptr.API.AudioStreamWAV_get_loop_begin(self)
}
func (self classAudioStreamWAV) SetLoopEnd(loop_end Int) {
	self.ptr.API.AudioStreamWAV_set_loop_end(self, loop_end)
}
func (self classAudioStreamWAV) GetLoopEnd() Int {
	return self.ptr.API.AudioStreamWAV_get_loop_end(self)
}
func (self classAudioStreamWAV) SetMixRate(mix_rate Int) {
	self.ptr.API.AudioStreamWAV_set_mix_rate(self, mix_rate)
}
func (self classAudioStreamWAV) GetMixRate() Int {
	return self.ptr.API.AudioStreamWAV_get_mix_rate(self)
}
func (self classAudioStreamWAV) SetStereo(stereo bool) {
	self.ptr.API.AudioStreamWAV_set_stereo(self, stereo)
}
func (self classAudioStreamWAV) IsStereo() bool {
	return self.ptr.API.AudioStreamWAV_is_stereo(self)
}
func (self classAudioStreamWAV) SaveToWav(path String) int64 {
	return self.ptr.API.AudioStreamWAV_save_to_wav(self, path)
}

type classBackBufferCopy struct{ Class[classBackBufferCopy] }

func (self classBackBufferCopy) Super() Node2D { var super Node2D; super.ptr = self.ptr; return super }

func (self classBackBufferCopy) Node2D() Node2D { return self.Super() }
func (self classBackBufferCopy) SetRect(rect Rect2) {
	self.ptr.API.BackBufferCopy_set_rect(self, rect)
}
func (self classBackBufferCopy) GetRect() Rect2 {
	return self.ptr.API.BackBufferCopy_get_rect(self)
}
func (self classBackBufferCopy) SetCopyMode(copy_mode BackBufferCopyCopyMode) {
	self.ptr.API.BackBufferCopy_set_copy_mode(self, copy_mode)
}
func (self classBackBufferCopy) GetCopyMode() BackBufferCopyCopyMode {
	return self.ptr.API.BackBufferCopy_get_copy_mode(self)
}

type classBaseButton struct{ Class[classBaseButton] }

func (self classBaseButton) Super() Control { var super Control; super.ptr = self.ptr; return super }

func (self classBaseButton) Control() Control { return self.Super() }
func (self classBaseButton) SetPressed(pressed bool) {
	self.ptr.API.BaseButton_set_pressed(self, pressed)
}
func (self classBaseButton) IsPressed() bool {
	return self.ptr.API.BaseButton_is_pressed(self)
}
func (self classBaseButton) SetPressedNoSignal(pressed bool) {
	self.ptr.API.BaseButton_set_pressed_no_signal(self, pressed)
}
func (self classBaseButton) IsHovered() bool {
	return self.ptr.API.BaseButton_is_hovered(self)
}
func (self classBaseButton) SetToggleMode(enabled bool) {
	self.ptr.API.BaseButton_set_toggle_mode(self, enabled)
}
func (self classBaseButton) IsToggleMode() bool {
	return self.ptr.API.BaseButton_is_toggle_mode(self)
}
func (self classBaseButton) SetShortcutInTooltip(enabled bool) {
	self.ptr.API.BaseButton_set_shortcut_in_tooltip(self, enabled)
}
func (self classBaseButton) IsShortcutInTooltipEnabled() bool {
	return self.ptr.API.BaseButton_is_shortcut_in_tooltip_enabled(self)
}
func (self classBaseButton) SetDisabled(disabled bool) {
	self.ptr.API.BaseButton_set_disabled(self, disabled)
}
func (self classBaseButton) IsDisabled() bool {
	return self.ptr.API.BaseButton_is_disabled(self)
}
func (self classBaseButton) SetActionMode(mode BaseButtonActionMode) {
	self.ptr.API.BaseButton_set_action_mode(self, mode)
}
func (self classBaseButton) GetActionMode() BaseButtonActionMode {
	return self.ptr.API.BaseButton_get_action_mode(self)
}
func (self classBaseButton) SetButtonMask(mask MouseButtonMask) {
	self.ptr.API.BaseButton_set_button_mask(self, mask)
}
func (self classBaseButton) GetButtonMask() MouseButtonMask {
	return self.ptr.API.BaseButton_get_button_mask(self)
}
func (self classBaseButton) GetDrawMode() BaseButtonDrawMode {
	return self.ptr.API.BaseButton_get_draw_mode(self)
}
func (self classBaseButton) SetKeepPressedOutside(enabled bool) {
	self.ptr.API.BaseButton_set_keep_pressed_outside(self, enabled)
}
func (self classBaseButton) IsKeepPressedOutside() bool {
	return self.ptr.API.BaseButton_is_keep_pressed_outside(self)
}
func (self classBaseButton) SetShortcutFeedback(enabled bool) {
	self.ptr.API.BaseButton_set_shortcut_feedback(self, enabled)
}
func (self classBaseButton) IsShortcutFeedback() bool {
	return self.ptr.API.BaseButton_is_shortcut_feedback(self)
}
func (self classBaseButton) SetShortcut(shortcut Shortcut) {
	self.ptr.API.BaseButton_set_shortcut(self, shortcut)
}
func (self classBaseButton) GetShortcut() Shortcut {
	return self.ptr.API.BaseButton_get_shortcut(self)
}
func (self classBaseButton) SetButtonGroup(button_group ButtonGroup) {
	self.ptr.API.BaseButton_set_button_group(self, button_group)
}
func (self classBaseButton) GetButtonGroup() ButtonGroup {
	return self.ptr.API.BaseButton_get_button_group(self)
}

type classBaseMaterial3D struct{ Class[classBaseMaterial3D] }

func (self classBaseMaterial3D) Super() Material {
	var super Material
	super.ptr = self.ptr
	return super
}

func (self classBaseMaterial3D) Material() Material { return self.Super() }
func (self classBaseMaterial3D) SetAlbedo(albedo Color) {
	self.ptr.API.BaseMaterial3D_set_albedo(self, albedo)
}
func (self classBaseMaterial3D) GetAlbedo() Color {
	return self.ptr.API.BaseMaterial3D_get_albedo(self)
}
func (self classBaseMaterial3D) SetTransparency(transparency BaseMaterial3DTransparency) {
	self.ptr.API.BaseMaterial3D_set_transparency(self, transparency)
}
func (self classBaseMaterial3D) GetTransparency() BaseMaterial3DTransparency {
	return self.ptr.API.BaseMaterial3D_get_transparency(self)
}
func (self classBaseMaterial3D) SetAlphaAntialiasing(alpha_aa BaseMaterial3DAlphaAntiAliasing) {
	self.ptr.API.BaseMaterial3D_set_alpha_antialiasing(self, alpha_aa)
}
func (self classBaseMaterial3D) GetAlphaAntialiasing() BaseMaterial3DAlphaAntiAliasing {
	return self.ptr.API.BaseMaterial3D_get_alpha_antialiasing(self)
}
func (self classBaseMaterial3D) SetAlphaAntialiasingEdge(edge Float) {
	self.ptr.API.BaseMaterial3D_set_alpha_antialiasing_edge(self, edge)
}
func (self classBaseMaterial3D) GetAlphaAntialiasingEdge() Float {
	return self.ptr.API.BaseMaterial3D_get_alpha_antialiasing_edge(self)
}
func (self classBaseMaterial3D) SetShadingMode(shading_mode BaseMaterial3DShadingMode) {
	self.ptr.API.BaseMaterial3D_set_shading_mode(self, shading_mode)
}
func (self classBaseMaterial3D) GetShadingMode() BaseMaterial3DShadingMode {
	return self.ptr.API.BaseMaterial3D_get_shading_mode(self)
}
func (self classBaseMaterial3D) SetSpecular(specular Float) {
	self.ptr.API.BaseMaterial3D_set_specular(self, specular)
}
func (self classBaseMaterial3D) GetSpecular() Float {
	return self.ptr.API.BaseMaterial3D_get_specular(self)
}
func (self classBaseMaterial3D) SetMetallic(metallic Float) {
	self.ptr.API.BaseMaterial3D_set_metallic(self, metallic)
}
func (self classBaseMaterial3D) GetMetallic() Float {
	return self.ptr.API.BaseMaterial3D_get_metallic(self)
}
func (self classBaseMaterial3D) SetRoughness(roughness Float) {
	self.ptr.API.BaseMaterial3D_set_roughness(self, roughness)
}
func (self classBaseMaterial3D) GetRoughness() Float {
	return self.ptr.API.BaseMaterial3D_get_roughness(self)
}
func (self classBaseMaterial3D) SetEmission(emission Color) {
	self.ptr.API.BaseMaterial3D_set_emission(self, emission)
}
func (self classBaseMaterial3D) GetEmission() Color {
	return self.ptr.API.BaseMaterial3D_get_emission(self)
}
func (self classBaseMaterial3D) SetEmissionEnergyMultiplier(emission_energy_multiplier Float) {
	self.ptr.API.BaseMaterial3D_set_emission_energy_multiplier(self, emission_energy_multiplier)
}
func (self classBaseMaterial3D) GetEmissionEnergyMultiplier() Float {
	return self.ptr.API.BaseMaterial3D_get_emission_energy_multiplier(self)
}
func (self classBaseMaterial3D) SetEmissionIntensity(emission_energy_multiplier Float) {
	self.ptr.API.BaseMaterial3D_set_emission_intensity(self, emission_energy_multiplier)
}
func (self classBaseMaterial3D) GetEmissionIntensity() Float {
	return self.ptr.API.BaseMaterial3D_get_emission_intensity(self)
}
func (self classBaseMaterial3D) SetNormalScale(normal_scale Float) {
	self.ptr.API.BaseMaterial3D_set_normal_scale(self, normal_scale)
}
func (self classBaseMaterial3D) GetNormalScale() Float {
	return self.ptr.API.BaseMaterial3D_get_normal_scale(self)
}
func (self classBaseMaterial3D) SetRim(rim Float) {
	self.ptr.API.BaseMaterial3D_set_rim(self, rim)
}
func (self classBaseMaterial3D) GetRim() Float {
	return self.ptr.API.BaseMaterial3D_get_rim(self)
}
func (self classBaseMaterial3D) SetRimTint(rim_tint Float) {
	self.ptr.API.BaseMaterial3D_set_rim_tint(self, rim_tint)
}
func (self classBaseMaterial3D) GetRimTint() Float {
	return self.ptr.API.BaseMaterial3D_get_rim_tint(self)
}
func (self classBaseMaterial3D) SetClearcoat(clearcoat Float) {
	self.ptr.API.BaseMaterial3D_set_clearcoat(self, clearcoat)
}
func (self classBaseMaterial3D) GetClearcoat() Float {
	return self.ptr.API.BaseMaterial3D_get_clearcoat(self)
}
func (self classBaseMaterial3D) SetClearcoatRoughness(clearcoat_roughness Float) {
	self.ptr.API.BaseMaterial3D_set_clearcoat_roughness(self, clearcoat_roughness)
}
func (self classBaseMaterial3D) GetClearcoatRoughness() Float {
	return self.ptr.API.BaseMaterial3D_get_clearcoat_roughness(self)
}
func (self classBaseMaterial3D) SetAnisotropy(anisotropy Float) {
	self.ptr.API.BaseMaterial3D_set_anisotropy(self, anisotropy)
}
func (self classBaseMaterial3D) GetAnisotropy() Float {
	return self.ptr.API.BaseMaterial3D_get_anisotropy(self)
}
func (self classBaseMaterial3D) SetHeightmapScale(heightmap_scale Float) {
	self.ptr.API.BaseMaterial3D_set_heightmap_scale(self, heightmap_scale)
}
func (self classBaseMaterial3D) GetHeightmapScale() Float {
	return self.ptr.API.BaseMaterial3D_get_heightmap_scale(self)
}
func (self classBaseMaterial3D) SetSubsurfaceScatteringStrength(strength Float) {
	self.ptr.API.BaseMaterial3D_set_subsurface_scattering_strength(self, strength)
}
func (self classBaseMaterial3D) GetSubsurfaceScatteringStrength() Float {
	return self.ptr.API.BaseMaterial3D_get_subsurface_scattering_strength(self)
}
func (self classBaseMaterial3D) SetTransmittanceColor(color Color) {
	self.ptr.API.BaseMaterial3D_set_transmittance_color(self, color)
}
func (self classBaseMaterial3D) GetTransmittanceColor() Color {
	return self.ptr.API.BaseMaterial3D_get_transmittance_color(self)
}
func (self classBaseMaterial3D) SetTransmittanceDepth(depth Float) {
	self.ptr.API.BaseMaterial3D_set_transmittance_depth(self, depth)
}
func (self classBaseMaterial3D) GetTransmittanceDepth() Float {
	return self.ptr.API.BaseMaterial3D_get_transmittance_depth(self)
}
func (self classBaseMaterial3D) SetTransmittanceBoost(boost Float) {
	self.ptr.API.BaseMaterial3D_set_transmittance_boost(self, boost)
}
func (self classBaseMaterial3D) GetTransmittanceBoost() Float {
	return self.ptr.API.BaseMaterial3D_get_transmittance_boost(self)
}
func (self classBaseMaterial3D) SetBacklight(backlight Color) {
	self.ptr.API.BaseMaterial3D_set_backlight(self, backlight)
}
func (self classBaseMaterial3D) GetBacklight() Color {
	return self.ptr.API.BaseMaterial3D_get_backlight(self)
}
func (self classBaseMaterial3D) SetRefraction(refraction Float) {
	self.ptr.API.BaseMaterial3D_set_refraction(self, refraction)
}
func (self classBaseMaterial3D) GetRefraction() Float {
	return self.ptr.API.BaseMaterial3D_get_refraction(self)
}
func (self classBaseMaterial3D) SetPointSize(point_size Float) {
	self.ptr.API.BaseMaterial3D_set_point_size(self, point_size)
}
func (self classBaseMaterial3D) GetPointSize() Float {
	return self.ptr.API.BaseMaterial3D_get_point_size(self)
}
func (self classBaseMaterial3D) SetDetailUv(detail_uv BaseMaterial3DDetailUV) {
	self.ptr.API.BaseMaterial3D_set_detail_uv(self, detail_uv)
}
func (self classBaseMaterial3D) GetDetailUv() BaseMaterial3DDetailUV {
	return self.ptr.API.BaseMaterial3D_get_detail_uv(self)
}
func (self classBaseMaterial3D) SetBlendMode(blend_mode BaseMaterial3DBlendMode) {
	self.ptr.API.BaseMaterial3D_set_blend_mode(self, blend_mode)
}
func (self classBaseMaterial3D) GetBlendMode() BaseMaterial3DBlendMode {
	return self.ptr.API.BaseMaterial3D_get_blend_mode(self)
}
func (self classBaseMaterial3D) SetDepthDrawMode(depth_draw_mode BaseMaterial3DDepthDrawMode) {
	self.ptr.API.BaseMaterial3D_set_depth_draw_mode(self, depth_draw_mode)
}
func (self classBaseMaterial3D) GetDepthDrawMode() BaseMaterial3DDepthDrawMode {
	return self.ptr.API.BaseMaterial3D_get_depth_draw_mode(self)
}
func (self classBaseMaterial3D) SetCullMode(cull_mode BaseMaterial3DCullMode) {
	self.ptr.API.BaseMaterial3D_set_cull_mode(self, cull_mode)
}
func (self classBaseMaterial3D) GetCullMode() BaseMaterial3DCullMode {
	return self.ptr.API.BaseMaterial3D_get_cull_mode(self)
}
func (self classBaseMaterial3D) SetDiffuseMode(diffuse_mode BaseMaterial3DDiffuseMode) {
	self.ptr.API.BaseMaterial3D_set_diffuse_mode(self, diffuse_mode)
}
func (self classBaseMaterial3D) GetDiffuseMode() BaseMaterial3DDiffuseMode {
	return self.ptr.API.BaseMaterial3D_get_diffuse_mode(self)
}
func (self classBaseMaterial3D) SetSpecularMode(specular_mode BaseMaterial3DSpecularMode) {
	self.ptr.API.BaseMaterial3D_set_specular_mode(self, specular_mode)
}
func (self classBaseMaterial3D) GetSpecularMode() BaseMaterial3DSpecularMode {
	return self.ptr.API.BaseMaterial3D_get_specular_mode(self)
}
func (self classBaseMaterial3D) SetFlag(flag BaseMaterial3DFlags, enable bool) {
	self.ptr.API.BaseMaterial3D_set_flag(self, flag, enable)
}
func (self classBaseMaterial3D) GetFlag(flag BaseMaterial3DFlags) bool {
	return self.ptr.API.BaseMaterial3D_get_flag(self, flag)
}
func (self classBaseMaterial3D) SetTextureFilter(mode BaseMaterial3DTextureFilter) {
	self.ptr.API.BaseMaterial3D_set_texture_filter(self, mode)
}
func (self classBaseMaterial3D) GetTextureFilter() BaseMaterial3DTextureFilter {
	return self.ptr.API.BaseMaterial3D_get_texture_filter(self)
}
func (self classBaseMaterial3D) SetFeature(feature BaseMaterial3DFeature, enable bool) {
	self.ptr.API.BaseMaterial3D_set_feature(self, feature, enable)
}
func (self classBaseMaterial3D) GetFeature(feature BaseMaterial3DFeature) bool {
	return self.ptr.API.BaseMaterial3D_get_feature(self, feature)
}
func (self classBaseMaterial3D) SetTexture(param BaseMaterial3DTextureParam, texture Texture2D) {
	self.ptr.API.BaseMaterial3D_set_texture(self, param, texture)
}
func (self classBaseMaterial3D) GetTexture(param BaseMaterial3DTextureParam) Texture2D {
	return self.ptr.API.BaseMaterial3D_get_texture(self, param)
}
func (self classBaseMaterial3D) SetDetailBlendMode(detail_blend_mode BaseMaterial3DBlendMode) {
	self.ptr.API.BaseMaterial3D_set_detail_blend_mode(self, detail_blend_mode)
}
func (self classBaseMaterial3D) GetDetailBlendMode() BaseMaterial3DBlendMode {
	return self.ptr.API.BaseMaterial3D_get_detail_blend_mode(self)
}
func (self classBaseMaterial3D) SetUv1Scale(scale Vector3) {
	self.ptr.API.BaseMaterial3D_set_uv1_scale(self, scale)
}
func (self classBaseMaterial3D) GetUv1Scale() Vector3 {
	return self.ptr.API.BaseMaterial3D_get_uv1_scale(self)
}
func (self classBaseMaterial3D) SetUv1Offset(offset Vector3) {
	self.ptr.API.BaseMaterial3D_set_uv1_offset(self, offset)
}
func (self classBaseMaterial3D) GetUv1Offset() Vector3 {
	return self.ptr.API.BaseMaterial3D_get_uv1_offset(self)
}
func (self classBaseMaterial3D) SetUv1TriplanarBlendSharpness(sharpness Float) {
	self.ptr.API.BaseMaterial3D_set_uv1_triplanar_blend_sharpness(self, sharpness)
}
func (self classBaseMaterial3D) GetUv1TriplanarBlendSharpness() Float {
	return self.ptr.API.BaseMaterial3D_get_uv1_triplanar_blend_sharpness(self)
}
func (self classBaseMaterial3D) SetUv2Scale(scale Vector3) {
	self.ptr.API.BaseMaterial3D_set_uv2_scale(self, scale)
}
func (self classBaseMaterial3D) GetUv2Scale() Vector3 {
	return self.ptr.API.BaseMaterial3D_get_uv2_scale(self)
}
func (self classBaseMaterial3D) SetUv2Offset(offset Vector3) {
	self.ptr.API.BaseMaterial3D_set_uv2_offset(self, offset)
}
func (self classBaseMaterial3D) GetUv2Offset() Vector3 {
	return self.ptr.API.BaseMaterial3D_get_uv2_offset(self)
}
func (self classBaseMaterial3D) SetUv2TriplanarBlendSharpness(sharpness Float) {
	self.ptr.API.BaseMaterial3D_set_uv2_triplanar_blend_sharpness(self, sharpness)
}
func (self classBaseMaterial3D) GetUv2TriplanarBlendSharpness() Float {
	return self.ptr.API.BaseMaterial3D_get_uv2_triplanar_blend_sharpness(self)
}
func (self classBaseMaterial3D) SetBillboardMode(mode BaseMaterial3DBillboardMode) {
	self.ptr.API.BaseMaterial3D_set_billboard_mode(self, mode)
}
func (self classBaseMaterial3D) GetBillboardMode() BaseMaterial3DBillboardMode {
	return self.ptr.API.BaseMaterial3D_get_billboard_mode(self)
}
func (self classBaseMaterial3D) SetParticlesAnimHFrames(frames Int) {
	self.ptr.API.BaseMaterial3D_set_particles_anim_h_frames(self, frames)
}
func (self classBaseMaterial3D) GetParticlesAnimHFrames() Int {
	return self.ptr.API.BaseMaterial3D_get_particles_anim_h_frames(self)
}
func (self classBaseMaterial3D) SetParticlesAnimVFrames(frames Int) {
	self.ptr.API.BaseMaterial3D_set_particles_anim_v_frames(self, frames)
}
func (self classBaseMaterial3D) GetParticlesAnimVFrames() Int {
	return self.ptr.API.BaseMaterial3D_get_particles_anim_v_frames(self)
}
func (self classBaseMaterial3D) SetParticlesAnimLoop(loop bool) {
	self.ptr.API.BaseMaterial3D_set_particles_anim_loop(self, loop)
}
func (self classBaseMaterial3D) GetParticlesAnimLoop() bool {
	return self.ptr.API.BaseMaterial3D_get_particles_anim_loop(self)
}
func (self classBaseMaterial3D) SetHeightmapDeepParallax(enable bool) {
	self.ptr.API.BaseMaterial3D_set_heightmap_deep_parallax(self, enable)
}
func (self classBaseMaterial3D) IsHeightmapDeepParallaxEnabled() bool {
	return self.ptr.API.BaseMaterial3D_is_heightmap_deep_parallax_enabled(self)
}
func (self classBaseMaterial3D) SetHeightmapDeepParallaxMinLayers(layer Int) {
	self.ptr.API.BaseMaterial3D_set_heightmap_deep_parallax_min_layers(self, layer)
}
func (self classBaseMaterial3D) GetHeightmapDeepParallaxMinLayers() Int {
	return self.ptr.API.BaseMaterial3D_get_heightmap_deep_parallax_min_layers(self)
}
func (self classBaseMaterial3D) SetHeightmapDeepParallaxMaxLayers(layer Int) {
	self.ptr.API.BaseMaterial3D_set_heightmap_deep_parallax_max_layers(self, layer)
}
func (self classBaseMaterial3D) GetHeightmapDeepParallaxMaxLayers() Int {
	return self.ptr.API.BaseMaterial3D_get_heightmap_deep_parallax_max_layers(self)
}
func (self classBaseMaterial3D) SetHeightmapDeepParallaxFlipTangent(flip bool) {
	self.ptr.API.BaseMaterial3D_set_heightmap_deep_parallax_flip_tangent(self, flip)
}
func (self classBaseMaterial3D) GetHeightmapDeepParallaxFlipTangent() bool {
	return self.ptr.API.BaseMaterial3D_get_heightmap_deep_parallax_flip_tangent(self)
}
func (self classBaseMaterial3D) SetHeightmapDeepParallaxFlipBinormal(flip bool) {
	self.ptr.API.BaseMaterial3D_set_heightmap_deep_parallax_flip_binormal(self, flip)
}
func (self classBaseMaterial3D) GetHeightmapDeepParallaxFlipBinormal() bool {
	return self.ptr.API.BaseMaterial3D_get_heightmap_deep_parallax_flip_binormal(self)
}
func (self classBaseMaterial3D) SetGrow(amount Float) {
	self.ptr.API.BaseMaterial3D_set_grow(self, amount)
}
func (self classBaseMaterial3D) GetGrow() Float {
	return self.ptr.API.BaseMaterial3D_get_grow(self)
}
func (self classBaseMaterial3D) SetEmissionOperator(operator BaseMaterial3DEmissionOperator) {
	self.ptr.API.BaseMaterial3D_set_emission_operator(self, operator)
}
func (self classBaseMaterial3D) GetEmissionOperator() BaseMaterial3DEmissionOperator {
	return self.ptr.API.BaseMaterial3D_get_emission_operator(self)
}
func (self classBaseMaterial3D) SetAoLightAffect(amount Float) {
	self.ptr.API.BaseMaterial3D_set_ao_light_affect(self, amount)
}
func (self classBaseMaterial3D) GetAoLightAffect() Float {
	return self.ptr.API.BaseMaterial3D_get_ao_light_affect(self)
}
func (self classBaseMaterial3D) SetAlphaScissorThreshold(threshold Float) {
	self.ptr.API.BaseMaterial3D_set_alpha_scissor_threshold(self, threshold)
}
func (self classBaseMaterial3D) GetAlphaScissorThreshold() Float {
	return self.ptr.API.BaseMaterial3D_get_alpha_scissor_threshold(self)
}
func (self classBaseMaterial3D) SetAlphaHashScale(threshold Float) {
	self.ptr.API.BaseMaterial3D_set_alpha_hash_scale(self, threshold)
}
func (self classBaseMaterial3D) GetAlphaHashScale() Float {
	return self.ptr.API.BaseMaterial3D_get_alpha_hash_scale(self)
}
func (self classBaseMaterial3D) SetGrowEnabled(enable bool) {
	self.ptr.API.BaseMaterial3D_set_grow_enabled(self, enable)
}
func (self classBaseMaterial3D) IsGrowEnabled() bool {
	return self.ptr.API.BaseMaterial3D_is_grow_enabled(self)
}
func (self classBaseMaterial3D) SetMetallicTextureChannel(channel BaseMaterial3DTextureChannel) {
	self.ptr.API.BaseMaterial3D_set_metallic_texture_channel(self, channel)
}
func (self classBaseMaterial3D) GetMetallicTextureChannel() BaseMaterial3DTextureChannel {
	return self.ptr.API.BaseMaterial3D_get_metallic_texture_channel(self)
}
func (self classBaseMaterial3D) SetRoughnessTextureChannel(channel BaseMaterial3DTextureChannel) {
	self.ptr.API.BaseMaterial3D_set_roughness_texture_channel(self, channel)
}
func (self classBaseMaterial3D) GetRoughnessTextureChannel() BaseMaterial3DTextureChannel {
	return self.ptr.API.BaseMaterial3D_get_roughness_texture_channel(self)
}
func (self classBaseMaterial3D) SetAoTextureChannel(channel BaseMaterial3DTextureChannel) {
	self.ptr.API.BaseMaterial3D_set_ao_texture_channel(self, channel)
}
func (self classBaseMaterial3D) GetAoTextureChannel() BaseMaterial3DTextureChannel {
	return self.ptr.API.BaseMaterial3D_get_ao_texture_channel(self)
}
func (self classBaseMaterial3D) SetRefractionTextureChannel(channel BaseMaterial3DTextureChannel) {
	self.ptr.API.BaseMaterial3D_set_refraction_texture_channel(self, channel)
}
func (self classBaseMaterial3D) GetRefractionTextureChannel() BaseMaterial3DTextureChannel {
	return self.ptr.API.BaseMaterial3D_get_refraction_texture_channel(self)
}
func (self classBaseMaterial3D) SetProximityFadeEnabled(enabled bool) {
	self.ptr.API.BaseMaterial3D_set_proximity_fade_enabled(self, enabled)
}
func (self classBaseMaterial3D) IsProximityFadeEnabled() bool {
	return self.ptr.API.BaseMaterial3D_is_proximity_fade_enabled(self)
}
func (self classBaseMaterial3D) SetProximityFadeDistance(distance Float) {
	self.ptr.API.BaseMaterial3D_set_proximity_fade_distance(self, distance)
}
func (self classBaseMaterial3D) GetProximityFadeDistance() Float {
	return self.ptr.API.BaseMaterial3D_get_proximity_fade_distance(self)
}
func (self classBaseMaterial3D) SetMsdfPixelRange(arange Float) {
	self.ptr.API.BaseMaterial3D_set_msdf_pixel_range(self, arange)
}
func (self classBaseMaterial3D) GetMsdfPixelRange() Float {
	return self.ptr.API.BaseMaterial3D_get_msdf_pixel_range(self)
}
func (self classBaseMaterial3D) SetMsdfOutlineSize(size Float) {
	self.ptr.API.BaseMaterial3D_set_msdf_outline_size(self, size)
}
func (self classBaseMaterial3D) GetMsdfOutlineSize() Float {
	return self.ptr.API.BaseMaterial3D_get_msdf_outline_size(self)
}
func (self classBaseMaterial3D) SetDistanceFade(mode BaseMaterial3DDistanceFadeMode) {
	self.ptr.API.BaseMaterial3D_set_distance_fade(self, mode)
}
func (self classBaseMaterial3D) GetDistanceFade() BaseMaterial3DDistanceFadeMode {
	return self.ptr.API.BaseMaterial3D_get_distance_fade(self)
}
func (self classBaseMaterial3D) SetDistanceFadeMaxDistance(distance Float) {
	self.ptr.API.BaseMaterial3D_set_distance_fade_max_distance(self, distance)
}
func (self classBaseMaterial3D) GetDistanceFadeMaxDistance() Float {
	return self.ptr.API.BaseMaterial3D_get_distance_fade_max_distance(self)
}
func (self classBaseMaterial3D) SetDistanceFadeMinDistance(distance Float) {
	self.ptr.API.BaseMaterial3D_set_distance_fade_min_distance(self, distance)
}
func (self classBaseMaterial3D) GetDistanceFadeMinDistance() Float {
	return self.ptr.API.BaseMaterial3D_get_distance_fade_min_distance(self)
}

type classBitMap struct{ Class[classBitMap] }

func (self classBitMap) Super() Resource { var super Resource; super.ptr = self.ptr; return super }

func (self classBitMap) Resource() Resource { return self.Super() }
func (self classBitMap) Create(size Vector2i) {
	self.ptr.API.BitMap_create(self, size)
}
func (self classBitMap) CreateFromImageAlpha(image Image, threshold Float) {
	self.ptr.API.BitMap_create_from_image_alpha(self, image, threshold)
}
func (self classBitMap) SetBitv(position Vector2i, bit bool) {
	self.ptr.API.BitMap_set_bitv(self, position, bit)
}
func (self classBitMap) SetBit(x Int, y Int, bit bool) {
	self.ptr.API.BitMap_set_bit(self, x, y, bit)
}
func (self classBitMap) GetBitv(position Vector2i) bool {
	return self.ptr.API.BitMap_get_bitv(self, position)
}
func (self classBitMap) GetBit(x Int, y Int) bool {
	return self.ptr.API.BitMap_get_bit(self, x, y)
}
func (self classBitMap) SetBitRect(rect Rect2i, bit bool) {
	self.ptr.API.BitMap_set_bit_rect(self, rect, bit)
}
func (self classBitMap) GetTrueBitCount() Int {
	return self.ptr.API.BitMap_get_true_bit_count(self)
}
func (self classBitMap) GetSize() Vector2i {
	return self.ptr.API.BitMap_get_size(self)
}
func (self classBitMap) Resize(new_size Vector2i) {
	self.ptr.API.BitMap_resize(self, new_size)
}
func (self classBitMap) GrowMask(pixels Int, rect Rect2i) {
	self.ptr.API.BitMap_grow_mask(self, pixels, rect)
}
func (self classBitMap) ConvertToImage() Image {
	return self.ptr.API.BitMap_convert_to_image(self)
}
func (self classBitMap) OpaqueToPolygons(rect Rect2i, epsilon Float) ArrayOf[PackedVector2Array] {
	return self.ptr.API.BitMap_opaque_to_polygons(self, rect, epsilon)
}

type classBone2D struct{ Class[classBone2D] }

func (self classBone2D) Super() Node2D { var super Node2D; super.ptr = self.ptr; return super }

func (self classBone2D) Node2D() Node2D { return self.Super() }
func (self classBone2D) SetRest(rest Transform2D) {
	self.ptr.API.Bone2D_set_rest(self, rest)
}
func (self classBone2D) GetRest() Transform2D {
	return self.ptr.API.Bone2D_get_rest(self)
}
func (self classBone2D) ApplyRest() {
	self.ptr.API.Bone2D_apply_rest(self)
}
func (self classBone2D) GetSkeletonRest() Transform2D {
	return self.ptr.API.Bone2D_get_skeleton_rest(self)
}
func (self classBone2D) GetIndexInSkeleton() Int {
	return self.ptr.API.Bone2D_get_index_in_skeleton(self)
}
func (self classBone2D) SetAutocalculateLengthAndAngle(auto_calculate bool) {
	self.ptr.API.Bone2D_set_autocalculate_length_and_angle(self, auto_calculate)
}
func (self classBone2D) GetAutocalculateLengthAndAngle() bool {
	return self.ptr.API.Bone2D_get_autocalculate_length_and_angle(self)
}
func (self classBone2D) SetLength(length Float) {
	self.ptr.API.Bone2D_set_length(self, length)
}
func (self classBone2D) GetLength() Float {
	return self.ptr.API.Bone2D_get_length(self)
}
func (self classBone2D) SetBoneAngle(angle Float) {
	self.ptr.API.Bone2D_set_bone_angle(self, angle)
}
func (self classBone2D) GetBoneAngle() Float {
	return self.ptr.API.Bone2D_get_bone_angle(self)
}

type classBoneAttachment3D struct{ Class[classBoneAttachment3D] }

func (self classBoneAttachment3D) Super() Node3D {
	var super Node3D
	super.ptr = self.ptr
	return super
}

func (self classBoneAttachment3D) Node3D() Node3D { return self.Super() }
func (self classBoneAttachment3D) SetBoneName(bone_name String) {
	self.ptr.API.BoneAttachment3D_set_bone_name(self, bone_name)
}
func (self classBoneAttachment3D) GetBoneName() String {
	return self.ptr.API.BoneAttachment3D_get_bone_name(self)
}
func (self classBoneAttachment3D) SetBoneIdx(bone_idx Int) {
	self.ptr.API.BoneAttachment3D_set_bone_idx(self, bone_idx)
}
func (self classBoneAttachment3D) GetBoneIdx() Int {
	return self.ptr.API.BoneAttachment3D_get_bone_idx(self)
}
func (self classBoneAttachment3D) OnBonePoseUpdate(bone_index Int) {
	self.ptr.API.BoneAttachment3D_on_bone_pose_update(self, bone_index)
}
func (self classBoneAttachment3D) SetOverridePose(override_pose bool) {
	self.ptr.API.BoneAttachment3D_set_override_pose(self, override_pose)
}
func (self classBoneAttachment3D) GetOverridePose() bool {
	return self.ptr.API.BoneAttachment3D_get_override_pose(self)
}
func (self classBoneAttachment3D) SetUseExternalSkeleton(use_external_skeleton bool) {
	self.ptr.API.BoneAttachment3D_set_use_external_skeleton(self, use_external_skeleton)
}
func (self classBoneAttachment3D) GetUseExternalSkeleton() bool {
	return self.ptr.API.BoneAttachment3D_get_use_external_skeleton(self)
}
func (self classBoneAttachment3D) SetExternalSkeleton(external_skeleton NodePath) {
	self.ptr.API.BoneAttachment3D_set_external_skeleton(self, external_skeleton)
}
func (self classBoneAttachment3D) GetExternalSkeleton() NodePath {
	return self.ptr.API.BoneAttachment3D_get_external_skeleton(self)
}

type classBoneMap struct{ Class[classBoneMap] }

func (self classBoneMap) Super() Resource { var super Resource; super.ptr = self.ptr; return super }

func (self classBoneMap) Resource() Resource { return self.Super() }
func (self classBoneMap) GetProfile() SkeletonProfile {
	return self.ptr.API.BoneMap_get_profile(self)
}
func (self classBoneMap) SetProfile(profile SkeletonProfile) {
	self.ptr.API.BoneMap_set_profile(self, profile)
}
func (self classBoneMap) GetSkeletonBoneName(profile_bone_name StringName) StringName {
	return self.ptr.API.BoneMap_get_skeleton_bone_name(self, profile_bone_name)
}
func (self classBoneMap) SetSkeletonBoneName(profile_bone_name StringName, skeleton_bone_name StringName) {
	self.ptr.API.BoneMap_set_skeleton_bone_name(self, profile_bone_name, skeleton_bone_name)
}
func (self classBoneMap) FindProfileBoneName(skeleton_bone_name StringName) StringName {
	return self.ptr.API.BoneMap_find_profile_bone_name(self, skeleton_bone_name)
}

type classBoxContainer struct{ Class[classBoxContainer] }

func (self classBoxContainer) Super() Container {
	var super Container
	super.ptr = self.ptr
	return super
}

func (self classBoxContainer) Container() Container { return self.Super() }
func (self classBoxContainer) AddSpacer(begin bool) Control {
	return self.ptr.API.BoxContainer_add_spacer(self, begin)
}
func (self classBoxContainer) SetAlignment(alignment BoxContainerAlignmentMode) {
	self.ptr.API.BoxContainer_set_alignment(self, alignment)
}
func (self classBoxContainer) GetAlignment() BoxContainerAlignmentMode {
	return self.ptr.API.BoxContainer_get_alignment(self)
}
func (self classBoxContainer) SetVertical(vertical bool) {
	self.ptr.API.BoxContainer_set_vertical(self, vertical)
}
func (self classBoxContainer) IsVertical() bool {
	return self.ptr.API.BoxContainer_is_vertical(self)
}

type classBoxMesh struct{ Class[classBoxMesh] }

func (self classBoxMesh) Super() PrimitiveMesh {
	var super PrimitiveMesh
	super.ptr = self.ptr
	return super
}

func (self classBoxMesh) PrimitiveMesh() PrimitiveMesh { return self.Super() }
func (self classBoxMesh) SetSize(size Vector3) {
	self.ptr.API.BoxMesh_set_size(self, size)
}
func (self classBoxMesh) GetSize() Vector3 {
	return self.ptr.API.BoxMesh_get_size(self)
}
func (self classBoxMesh) SetSubdivideWidth(subdivide Int) {
	self.ptr.API.BoxMesh_set_subdivide_width(self, subdivide)
}
func (self classBoxMesh) GetSubdivideWidth() Int {
	return self.ptr.API.BoxMesh_get_subdivide_width(self)
}
func (self classBoxMesh) SetSubdivideHeight(divisions Int) {
	self.ptr.API.BoxMesh_set_subdivide_height(self, divisions)
}
func (self classBoxMesh) GetSubdivideHeight() Int {
	return self.ptr.API.BoxMesh_get_subdivide_height(self)
}
func (self classBoxMesh) SetSubdivideDepth(divisions Int) {
	self.ptr.API.BoxMesh_set_subdivide_depth(self, divisions)
}
func (self classBoxMesh) GetSubdivideDepth() Int {
	return self.ptr.API.BoxMesh_get_subdivide_depth(self)
}

type classBoxOccluder3D struct{ Class[classBoxOccluder3D] }

func (self classBoxOccluder3D) Super() Occluder3D {
	var super Occluder3D
	super.ptr = self.ptr
	return super
}

func (self classBoxOccluder3D) Occluder3D() Occluder3D { return self.Super() }
func (self classBoxOccluder3D) SetSize(size Vector3) {
	self.ptr.API.BoxOccluder3D_set_size(self, size)
}
func (self classBoxOccluder3D) GetSize() Vector3 {
	return self.ptr.API.BoxOccluder3D_get_size(self)
}

type classBoxShape3D struct{ Class[classBoxShape3D] }

func (self classBoxShape3D) Super() Shape3D { var super Shape3D; super.ptr = self.ptr; return super }

func (self classBoxShape3D) Shape3D() Shape3D { return self.Super() }
func (self classBoxShape3D) SetSize(size Vector3) {
	self.ptr.API.BoxShape3D_set_size(self, size)
}
func (self classBoxShape3D) GetSize() Vector3 {
	return self.ptr.API.BoxShape3D_get_size(self)
}

type classButton struct{ Class[classButton] }

func (self classButton) Super() BaseButton { var super BaseButton; super.ptr = self.ptr; return super }

func (self classButton) BaseButton() BaseButton { return self.Super() }
func (self classButton) SetText(text String) {
	self.ptr.API.Button_set_text(self, text)
}
func (self classButton) GetText() String {
	return self.ptr.API.Button_get_text(self)
}
func (self classButton) SetTextOverrunBehavior(overrun_behavior TextServerOverrunBehavior) {
	self.ptr.API.Button_set_text_overrun_behavior(self, overrun_behavior)
}
func (self classButton) GetTextOverrunBehavior() TextServerOverrunBehavior {
	return self.ptr.API.Button_get_text_overrun_behavior(self)
}
func (self classButton) SetTextDirection(direction ControlTextDirection) {
	self.ptr.API.Button_set_text_direction(self, direction)
}
func (self classButton) GetTextDirection() ControlTextDirection {
	return self.ptr.API.Button_get_text_direction(self)
}
func (self classButton) SetLanguage(language String) {
	self.ptr.API.Button_set_language(self, language)
}
func (self classButton) GetLanguage() String {
	return self.ptr.API.Button_get_language(self)
}
func (self classButton) SetButtonIcon(texture Texture2D) {
	self.ptr.API.Button_set_button_icon(self, texture)
}
func (self classButton) GetButtonIcon() Texture2D {
	return self.ptr.API.Button_get_button_icon(self)
}
func (self classButton) SetFlat(enabled bool) {
	self.ptr.API.Button_set_flat(self, enabled)
}
func (self classButton) IsFlat() bool {
	return self.ptr.API.Button_is_flat(self)
}
func (self classButton) SetClipText(enabled bool) {
	self.ptr.API.Button_set_clip_text(self, enabled)
}
func (self classButton) GetClipText() bool {
	return self.ptr.API.Button_get_clip_text(self)
}
func (self classButton) SetTextAlignment(alignment HorizontalAlignment) {
	self.ptr.API.Button_set_text_alignment(self, alignment)
}
func (self classButton) GetTextAlignment() HorizontalAlignment {
	return self.ptr.API.Button_get_text_alignment(self)
}
func (self classButton) SetIconAlignment(icon_alignment HorizontalAlignment) {
	self.ptr.API.Button_set_icon_alignment(self, icon_alignment)
}
func (self classButton) GetIconAlignment() HorizontalAlignment {
	return self.ptr.API.Button_get_icon_alignment(self)
}
func (self classButton) SetVerticalIconAlignment(vertical_icon_alignment VerticalAlignment) {
	self.ptr.API.Button_set_vertical_icon_alignment(self, vertical_icon_alignment)
}
func (self classButton) GetVerticalIconAlignment() VerticalAlignment {
	return self.ptr.API.Button_get_vertical_icon_alignment(self)
}
func (self classButton) SetExpandIcon(enabled bool) {
	self.ptr.API.Button_set_expand_icon(self, enabled)
}
func (self classButton) IsExpandIcon() bool {
	return self.ptr.API.Button_is_expand_icon(self)
}

type classButtonGroup struct{ Class[classButtonGroup] }

func (self classButtonGroup) Super() Resource { var super Resource; super.ptr = self.ptr; return super }

func (self classButtonGroup) Resource() Resource { return self.Super() }
func (self classButtonGroup) GetPressedButton() BaseButton {
	return self.ptr.API.ButtonGroup_get_pressed_button(self)
}
func (self classButtonGroup) GetButtons() ArrayOf[BaseButton] {
	return self.ptr.API.ButtonGroup_get_buttons(self)
}
func (self classButtonGroup) SetAllowUnpress(enabled bool) {
	self.ptr.API.ButtonGroup_set_allow_unpress(self, enabled)
}
func (self classButtonGroup) IsAllowUnpress() bool {
	return self.ptr.API.ButtonGroup_is_allow_unpress(self)
}

type classCPUParticles2D struct{ Class[classCPUParticles2D] }

func (self classCPUParticles2D) Super() Node2D { var super Node2D; super.ptr = self.ptr; return super }

func (self classCPUParticles2D) Node2D() Node2D { return self.Super() }
func (self classCPUParticles2D) SetEmitting(emitting bool) {
	self.ptr.API.CPUParticles2D_set_emitting(self, emitting)
}
func (self classCPUParticles2D) SetAmount(amount Int) {
	self.ptr.API.CPUParticles2D_set_amount(self, amount)
}
func (self classCPUParticles2D) SetLifetime(secs Float) {
	self.ptr.API.CPUParticles2D_set_lifetime(self, secs)
}
func (self classCPUParticles2D) SetOneShot(enable bool) {
	self.ptr.API.CPUParticles2D_set_one_shot(self, enable)
}
func (self classCPUParticles2D) SetPreProcessTime(secs Float) {
	self.ptr.API.CPUParticles2D_set_pre_process_time(self, secs)
}
func (self classCPUParticles2D) SetExplosivenessRatio(ratio Float) {
	self.ptr.API.CPUParticles2D_set_explosiveness_ratio(self, ratio)
}
func (self classCPUParticles2D) SetRandomnessRatio(ratio Float) {
	self.ptr.API.CPUParticles2D_set_randomness_ratio(self, ratio)
}
func (self classCPUParticles2D) SetLifetimeRandomness(random Float) {
	self.ptr.API.CPUParticles2D_set_lifetime_randomness(self, random)
}
func (self classCPUParticles2D) SetUseLocalCoordinates(enable bool) {
	self.ptr.API.CPUParticles2D_set_use_local_coordinates(self, enable)
}
func (self classCPUParticles2D) SetFixedFps(fps Int) {
	self.ptr.API.CPUParticles2D_set_fixed_fps(self, fps)
}
func (self classCPUParticles2D) SetFractionalDelta(enable bool) {
	self.ptr.API.CPUParticles2D_set_fractional_delta(self, enable)
}
func (self classCPUParticles2D) SetSpeedScale(scale Float) {
	self.ptr.API.CPUParticles2D_set_speed_scale(self, scale)
}
func (self classCPUParticles2D) IsEmitting() bool {
	return self.ptr.API.CPUParticles2D_is_emitting(self)
}
func (self classCPUParticles2D) GetAmount() Int {
	return self.ptr.API.CPUParticles2D_get_amount(self)
}
func (self classCPUParticles2D) GetLifetime() Float {
	return self.ptr.API.CPUParticles2D_get_lifetime(self)
}
func (self classCPUParticles2D) GetOneShot() bool {
	return self.ptr.API.CPUParticles2D_get_one_shot(self)
}
func (self classCPUParticles2D) GetPreProcessTime() Float {
	return self.ptr.API.CPUParticles2D_get_pre_process_time(self)
}
func (self classCPUParticles2D) GetExplosivenessRatio() Float {
	return self.ptr.API.CPUParticles2D_get_explosiveness_ratio(self)
}
func (self classCPUParticles2D) GetRandomnessRatio() Float {
	return self.ptr.API.CPUParticles2D_get_randomness_ratio(self)
}
func (self classCPUParticles2D) GetLifetimeRandomness() Float {
	return self.ptr.API.CPUParticles2D_get_lifetime_randomness(self)
}
func (self classCPUParticles2D) GetUseLocalCoordinates() bool {
	return self.ptr.API.CPUParticles2D_get_use_local_coordinates(self)
}
func (self classCPUParticles2D) GetFixedFps() Int {
	return self.ptr.API.CPUParticles2D_get_fixed_fps(self)
}
func (self classCPUParticles2D) GetFractionalDelta() bool {
	return self.ptr.API.CPUParticles2D_get_fractional_delta(self)
}
func (self classCPUParticles2D) GetSpeedScale() Float {
	return self.ptr.API.CPUParticles2D_get_speed_scale(self)
}
func (self classCPUParticles2D) SetDrawOrder(order CPUParticles2DDrawOrder) {
	self.ptr.API.CPUParticles2D_set_draw_order(self, order)
}
func (self classCPUParticles2D) GetDrawOrder() CPUParticles2DDrawOrder {
	return self.ptr.API.CPUParticles2D_get_draw_order(self)
}
func (self classCPUParticles2D) SetTexture(texture Texture2D) {
	self.ptr.API.CPUParticles2D_set_texture(self, texture)
}
func (self classCPUParticles2D) GetTexture() Texture2D {
	return self.ptr.API.CPUParticles2D_get_texture(self)
}
func (self classCPUParticles2D) Restart() {
	self.ptr.API.CPUParticles2D_restart(self)
}
func (self classCPUParticles2D) SetDirection(direction Vector2) {
	self.ptr.API.CPUParticles2D_set_direction(self, direction)
}
func (self classCPUParticles2D) GetDirection() Vector2 {
	return self.ptr.API.CPUParticles2D_get_direction(self)
}
func (self classCPUParticles2D) SetSpread(spread Float) {
	self.ptr.API.CPUParticles2D_set_spread(self, spread)
}
func (self classCPUParticles2D) GetSpread() Float {
	return self.ptr.API.CPUParticles2D_get_spread(self)
}
func (self classCPUParticles2D) SetParamMin(param CPUParticles2DParameter, value Float) {
	self.ptr.API.CPUParticles2D_set_param_min(self, param, value)
}
func (self classCPUParticles2D) GetParamMin(param CPUParticles2DParameter) Float {
	return self.ptr.API.CPUParticles2D_get_param_min(self, param)
}
func (self classCPUParticles2D) SetParamMax(param CPUParticles2DParameter, value Float) {
	self.ptr.API.CPUParticles2D_set_param_max(self, param, value)
}
func (self classCPUParticles2D) GetParamMax(param CPUParticles2DParameter) Float {
	return self.ptr.API.CPUParticles2D_get_param_max(self, param)
}
func (self classCPUParticles2D) SetParamCurve(param CPUParticles2DParameter, curve Curve) {
	self.ptr.API.CPUParticles2D_set_param_curve(self, param, curve)
}
func (self classCPUParticles2D) GetParamCurve(param CPUParticles2DParameter) Curve {
	return self.ptr.API.CPUParticles2D_get_param_curve(self, param)
}
func (self classCPUParticles2D) SetColor(color Color) {
	self.ptr.API.CPUParticles2D_set_color(self, color)
}
func (self classCPUParticles2D) GetColor() Color {
	return self.ptr.API.CPUParticles2D_get_color(self)
}
func (self classCPUParticles2D) SetColorRamp(ramp Gradient) {
	self.ptr.API.CPUParticles2D_set_color_ramp(self, ramp)
}
func (self classCPUParticles2D) GetColorRamp() Gradient {
	return self.ptr.API.CPUParticles2D_get_color_ramp(self)
}
func (self classCPUParticles2D) SetColorInitialRamp(ramp Gradient) {
	self.ptr.API.CPUParticles2D_set_color_initial_ramp(self, ramp)
}
func (self classCPUParticles2D) GetColorInitialRamp() Gradient {
	return self.ptr.API.CPUParticles2D_get_color_initial_ramp(self)
}
func (self classCPUParticles2D) SetParticleFlag(particle_flag CPUParticles2DParticleFlags, enable bool) {
	self.ptr.API.CPUParticles2D_set_particle_flag(self, particle_flag, enable)
}
func (self classCPUParticles2D) GetParticleFlag(particle_flag CPUParticles2DParticleFlags) bool {
	return self.ptr.API.CPUParticles2D_get_particle_flag(self, particle_flag)
}
func (self classCPUParticles2D) SetEmissionShape(shape CPUParticles2DEmissionShape) {
	self.ptr.API.CPUParticles2D_set_emission_shape(self, shape)
}
func (self classCPUParticles2D) GetEmissionShape() CPUParticles2DEmissionShape {
	return self.ptr.API.CPUParticles2D_get_emission_shape(self)
}
func (self classCPUParticles2D) SetEmissionSphereRadius(radius Float) {
	self.ptr.API.CPUParticles2D_set_emission_sphere_radius(self, radius)
}
func (self classCPUParticles2D) GetEmissionSphereRadius() Float {
	return self.ptr.API.CPUParticles2D_get_emission_sphere_radius(self)
}
func (self classCPUParticles2D) SetEmissionRectExtents(extents Vector2) {
	self.ptr.API.CPUParticles2D_set_emission_rect_extents(self, extents)
}
func (self classCPUParticles2D) GetEmissionRectExtents() Vector2 {
	return self.ptr.API.CPUParticles2D_get_emission_rect_extents(self)
}
func (self classCPUParticles2D) SetEmissionPoints(array PackedVector2Array) {
	self.ptr.API.CPUParticles2D_set_emission_points(self, array)
}
func (self classCPUParticles2D) GetEmissionPoints() PackedVector2Array {
	return self.ptr.API.CPUParticles2D_get_emission_points(self)
}
func (self classCPUParticles2D) SetEmissionNormals(array PackedVector2Array) {
	self.ptr.API.CPUParticles2D_set_emission_normals(self, array)
}
func (self classCPUParticles2D) GetEmissionNormals() PackedVector2Array {
	return self.ptr.API.CPUParticles2D_get_emission_normals(self)
}
func (self classCPUParticles2D) SetEmissionColors(array PackedColorArray) {
	self.ptr.API.CPUParticles2D_set_emission_colors(self, array)
}
func (self classCPUParticles2D) GetEmissionColors() PackedColorArray {
	return self.ptr.API.CPUParticles2D_get_emission_colors(self)
}
func (self classCPUParticles2D) GetGravity() Vector2 {
	return self.ptr.API.CPUParticles2D_get_gravity(self)
}
func (self classCPUParticles2D) SetGravity(accel_vec Vector2) {
	self.ptr.API.CPUParticles2D_set_gravity(self, accel_vec)
}
func (self classCPUParticles2D) GetSplitScale() bool {
	return self.ptr.API.CPUParticles2D_get_split_scale(self)
}
func (self classCPUParticles2D) SetSplitScale(split_scale bool) {
	self.ptr.API.CPUParticles2D_set_split_scale(self, split_scale)
}
func (self classCPUParticles2D) GetScaleCurveX() Curve {
	return self.ptr.API.CPUParticles2D_get_scale_curve_x(self)
}
func (self classCPUParticles2D) SetScaleCurveX(scale_curve Curve) {
	self.ptr.API.CPUParticles2D_set_scale_curve_x(self, scale_curve)
}
func (self classCPUParticles2D) GetScaleCurveY() Curve {
	return self.ptr.API.CPUParticles2D_get_scale_curve_y(self)
}
func (self classCPUParticles2D) SetScaleCurveY(scale_curve Curve) {
	self.ptr.API.CPUParticles2D_set_scale_curve_y(self, scale_curve)
}
func (self classCPUParticles2D) ConvertFromParticles(particles Node) {
	self.ptr.API.CPUParticles2D_convert_from_particles(self, particles)
}

type classCPUParticles3D struct{ Class[classCPUParticles3D] }

func (self classCPUParticles3D) Super() GeometryInstance3D {
	var super GeometryInstance3D
	super.ptr = self.ptr
	return super
}

func (self classCPUParticles3D) GeometryInstance3D() GeometryInstance3D { return self.Super() }
func (self classCPUParticles3D) SetEmitting(emitting bool) {
	self.ptr.API.CPUParticles3D_set_emitting(self, emitting)
}
func (self classCPUParticles3D) SetAmount(amount Int) {
	self.ptr.API.CPUParticles3D_set_amount(self, amount)
}
func (self classCPUParticles3D) SetLifetime(secs Float) {
	self.ptr.API.CPUParticles3D_set_lifetime(self, secs)
}
func (self classCPUParticles3D) SetOneShot(enable bool) {
	self.ptr.API.CPUParticles3D_set_one_shot(self, enable)
}
func (self classCPUParticles3D) SetPreProcessTime(secs Float) {
	self.ptr.API.CPUParticles3D_set_pre_process_time(self, secs)
}
func (self classCPUParticles3D) SetExplosivenessRatio(ratio Float) {
	self.ptr.API.CPUParticles3D_set_explosiveness_ratio(self, ratio)
}
func (self classCPUParticles3D) SetRandomnessRatio(ratio Float) {
	self.ptr.API.CPUParticles3D_set_randomness_ratio(self, ratio)
}
func (self classCPUParticles3D) SetLifetimeRandomness(random Float) {
	self.ptr.API.CPUParticles3D_set_lifetime_randomness(self, random)
}
func (self classCPUParticles3D) SetUseLocalCoordinates(enable bool) {
	self.ptr.API.CPUParticles3D_set_use_local_coordinates(self, enable)
}
func (self classCPUParticles3D) SetFixedFps(fps Int) {
	self.ptr.API.CPUParticles3D_set_fixed_fps(self, fps)
}
func (self classCPUParticles3D) SetFractionalDelta(enable bool) {
	self.ptr.API.CPUParticles3D_set_fractional_delta(self, enable)
}
func (self classCPUParticles3D) SetSpeedScale(scale Float) {
	self.ptr.API.CPUParticles3D_set_speed_scale(self, scale)
}
func (self classCPUParticles3D) IsEmitting() bool {
	return self.ptr.API.CPUParticles3D_is_emitting(self)
}
func (self classCPUParticles3D) GetAmount() Int {
	return self.ptr.API.CPUParticles3D_get_amount(self)
}
func (self classCPUParticles3D) GetLifetime() Float {
	return self.ptr.API.CPUParticles3D_get_lifetime(self)
}
func (self classCPUParticles3D) GetOneShot() bool {
	return self.ptr.API.CPUParticles3D_get_one_shot(self)
}
func (self classCPUParticles3D) GetPreProcessTime() Float {
	return self.ptr.API.CPUParticles3D_get_pre_process_time(self)
}
func (self classCPUParticles3D) GetExplosivenessRatio() Float {
	return self.ptr.API.CPUParticles3D_get_explosiveness_ratio(self)
}
func (self classCPUParticles3D) GetRandomnessRatio() Float {
	return self.ptr.API.CPUParticles3D_get_randomness_ratio(self)
}
func (self classCPUParticles3D) GetLifetimeRandomness() Float {
	return self.ptr.API.CPUParticles3D_get_lifetime_randomness(self)
}
func (self classCPUParticles3D) GetUseLocalCoordinates() bool {
	return self.ptr.API.CPUParticles3D_get_use_local_coordinates(self)
}
func (self classCPUParticles3D) GetFixedFps() Int {
	return self.ptr.API.CPUParticles3D_get_fixed_fps(self)
}
func (self classCPUParticles3D) GetFractionalDelta() bool {
	return self.ptr.API.CPUParticles3D_get_fractional_delta(self)
}
func (self classCPUParticles3D) GetSpeedScale() Float {
	return self.ptr.API.CPUParticles3D_get_speed_scale(self)
}
func (self classCPUParticles3D) SetDrawOrder(order CPUParticles3DDrawOrder) {
	self.ptr.API.CPUParticles3D_set_draw_order(self, order)
}
func (self classCPUParticles3D) GetDrawOrder() CPUParticles3DDrawOrder {
	return self.ptr.API.CPUParticles3D_get_draw_order(self)
}
func (self classCPUParticles3D) SetMesh(mesh Mesh) {
	self.ptr.API.CPUParticles3D_set_mesh(self, mesh)
}
func (self classCPUParticles3D) GetMesh() Mesh {
	return self.ptr.API.CPUParticles3D_get_mesh(self)
}
func (self classCPUParticles3D) Restart() {
	self.ptr.API.CPUParticles3D_restart(self)
}
func (self classCPUParticles3D) SetDirection(direction Vector3) {
	self.ptr.API.CPUParticles3D_set_direction(self, direction)
}
func (self classCPUParticles3D) GetDirection() Vector3 {
	return self.ptr.API.CPUParticles3D_get_direction(self)
}
func (self classCPUParticles3D) SetSpread(degrees Float) {
	self.ptr.API.CPUParticles3D_set_spread(self, degrees)
}
func (self classCPUParticles3D) GetSpread() Float {
	return self.ptr.API.CPUParticles3D_get_spread(self)
}
func (self classCPUParticles3D) SetFlatness(amount Float) {
	self.ptr.API.CPUParticles3D_set_flatness(self, amount)
}
func (self classCPUParticles3D) GetFlatness() Float {
	return self.ptr.API.CPUParticles3D_get_flatness(self)
}
func (self classCPUParticles3D) SetParamMin(param CPUParticles3DParameter, value Float) {
	self.ptr.API.CPUParticles3D_set_param_min(self, param, value)
}
func (self classCPUParticles3D) GetParamMin(param CPUParticles3DParameter) Float {
	return self.ptr.API.CPUParticles3D_get_param_min(self, param)
}
func (self classCPUParticles3D) SetParamMax(param CPUParticles3DParameter, value Float) {
	self.ptr.API.CPUParticles3D_set_param_max(self, param, value)
}
func (self classCPUParticles3D) GetParamMax(param CPUParticles3DParameter) Float {
	return self.ptr.API.CPUParticles3D_get_param_max(self, param)
}
func (self classCPUParticles3D) SetParamCurve(param CPUParticles3DParameter, curve Curve) {
	self.ptr.API.CPUParticles3D_set_param_curve(self, param, curve)
}
func (self classCPUParticles3D) GetParamCurve(param CPUParticles3DParameter) Curve {
	return self.ptr.API.CPUParticles3D_get_param_curve(self, param)
}
func (self classCPUParticles3D) SetColor(color Color) {
	self.ptr.API.CPUParticles3D_set_color(self, color)
}
func (self classCPUParticles3D) GetColor() Color {
	return self.ptr.API.CPUParticles3D_get_color(self)
}
func (self classCPUParticles3D) SetColorRamp(ramp Gradient) {
	self.ptr.API.CPUParticles3D_set_color_ramp(self, ramp)
}
func (self classCPUParticles3D) GetColorRamp() Gradient {
	return self.ptr.API.CPUParticles3D_get_color_ramp(self)
}
func (self classCPUParticles3D) SetColorInitialRamp(ramp Gradient) {
	self.ptr.API.CPUParticles3D_set_color_initial_ramp(self, ramp)
}
func (self classCPUParticles3D) GetColorInitialRamp() Gradient {
	return self.ptr.API.CPUParticles3D_get_color_initial_ramp(self)
}
func (self classCPUParticles3D) SetParticleFlag(particle_flag CPUParticles3DParticleFlags, enable bool) {
	self.ptr.API.CPUParticles3D_set_particle_flag(self, particle_flag, enable)
}
func (self classCPUParticles3D) GetParticleFlag(particle_flag CPUParticles3DParticleFlags) bool {
	return self.ptr.API.CPUParticles3D_get_particle_flag(self, particle_flag)
}
func (self classCPUParticles3D) SetEmissionShape(shape CPUParticles3DEmissionShape) {
	self.ptr.API.CPUParticles3D_set_emission_shape(self, shape)
}
func (self classCPUParticles3D) GetEmissionShape() CPUParticles3DEmissionShape {
	return self.ptr.API.CPUParticles3D_get_emission_shape(self)
}
func (self classCPUParticles3D) SetEmissionSphereRadius(radius Float) {
	self.ptr.API.CPUParticles3D_set_emission_sphere_radius(self, radius)
}
func (self classCPUParticles3D) GetEmissionSphereRadius() Float {
	return self.ptr.API.CPUParticles3D_get_emission_sphere_radius(self)
}
func (self classCPUParticles3D) SetEmissionBoxExtents(extents Vector3) {
	self.ptr.API.CPUParticles3D_set_emission_box_extents(self, extents)
}
func (self classCPUParticles3D) GetEmissionBoxExtents() Vector3 {
	return self.ptr.API.CPUParticles3D_get_emission_box_extents(self)
}
func (self classCPUParticles3D) SetEmissionPoints(array PackedVector3Array) {
	self.ptr.API.CPUParticles3D_set_emission_points(self, array)
}
func (self classCPUParticles3D) GetEmissionPoints() PackedVector3Array {
	return self.ptr.API.CPUParticles3D_get_emission_points(self)
}
func (self classCPUParticles3D) SetEmissionNormals(array PackedVector3Array) {
	self.ptr.API.CPUParticles3D_set_emission_normals(self, array)
}
func (self classCPUParticles3D) GetEmissionNormals() PackedVector3Array {
	return self.ptr.API.CPUParticles3D_get_emission_normals(self)
}
func (self classCPUParticles3D) SetEmissionColors(array PackedColorArray) {
	self.ptr.API.CPUParticles3D_set_emission_colors(self, array)
}
func (self classCPUParticles3D) GetEmissionColors() PackedColorArray {
	return self.ptr.API.CPUParticles3D_get_emission_colors(self)
}
func (self classCPUParticles3D) SetEmissionRingAxis(axis Vector3) {
	self.ptr.API.CPUParticles3D_set_emission_ring_axis(self, axis)
}
func (self classCPUParticles3D) GetEmissionRingAxis() Vector3 {
	return self.ptr.API.CPUParticles3D_get_emission_ring_axis(self)
}
func (self classCPUParticles3D) SetEmissionRingHeight(height Float) {
	self.ptr.API.CPUParticles3D_set_emission_ring_height(self, height)
}
func (self classCPUParticles3D) GetEmissionRingHeight() Float {
	return self.ptr.API.CPUParticles3D_get_emission_ring_height(self)
}
func (self classCPUParticles3D) SetEmissionRingRadius(radius Float) {
	self.ptr.API.CPUParticles3D_set_emission_ring_radius(self, radius)
}
func (self classCPUParticles3D) GetEmissionRingRadius() Float {
	return self.ptr.API.CPUParticles3D_get_emission_ring_radius(self)
}
func (self classCPUParticles3D) SetEmissionRingInnerRadius(inner_radius Float) {
	self.ptr.API.CPUParticles3D_set_emission_ring_inner_radius(self, inner_radius)
}
func (self classCPUParticles3D) GetEmissionRingInnerRadius() Float {
	return self.ptr.API.CPUParticles3D_get_emission_ring_inner_radius(self)
}
func (self classCPUParticles3D) GetGravity() Vector3 {
	return self.ptr.API.CPUParticles3D_get_gravity(self)
}
func (self classCPUParticles3D) SetGravity(accel_vec Vector3) {
	self.ptr.API.CPUParticles3D_set_gravity(self, accel_vec)
}
func (self classCPUParticles3D) GetSplitScale() bool {
	return self.ptr.API.CPUParticles3D_get_split_scale(self)
}
func (self classCPUParticles3D) SetSplitScale(split_scale bool) {
	self.ptr.API.CPUParticles3D_set_split_scale(self, split_scale)
}
func (self classCPUParticles3D) GetScaleCurveX() Curve {
	return self.ptr.API.CPUParticles3D_get_scale_curve_x(self)
}
func (self classCPUParticles3D) SetScaleCurveX(scale_curve Curve) {
	self.ptr.API.CPUParticles3D_set_scale_curve_x(self, scale_curve)
}
func (self classCPUParticles3D) GetScaleCurveY() Curve {
	return self.ptr.API.CPUParticles3D_get_scale_curve_y(self)
}
func (self classCPUParticles3D) SetScaleCurveY(scale_curve Curve) {
	self.ptr.API.CPUParticles3D_set_scale_curve_y(self, scale_curve)
}
func (self classCPUParticles3D) GetScaleCurveZ() Curve {
	return self.ptr.API.CPUParticles3D_get_scale_curve_z(self)
}
func (self classCPUParticles3D) SetScaleCurveZ(scale_curve Curve) {
	self.ptr.API.CPUParticles3D_set_scale_curve_z(self, scale_curve)
}
func (self classCPUParticles3D) ConvertFromParticles(particles Node) {
	self.ptr.API.CPUParticles3D_convert_from_particles(self, particles)
}

type classCSGBox3D struct{ Class[classCSGBox3D] }

func (self classCSGBox3D) Super() CSGPrimitive3D {
	var super CSGPrimitive3D
	super.ptr = self.ptr
	return super
}

func (self classCSGBox3D) CSGPrimitive3D() CSGPrimitive3D { return self.Super() }
func (self classCSGBox3D) SetSize(size Vector3) {
	self.ptr.API.CSGBox3D_set_size(self, size)
}
func (self classCSGBox3D) GetSize() Vector3 {
	return self.ptr.API.CSGBox3D_get_size(self)
}
func (self classCSGBox3D) SetMaterial(material Material) {
	self.ptr.API.CSGBox3D_set_material(self, material)
}
func (self classCSGBox3D) GetMaterial() Material {
	return self.ptr.API.CSGBox3D_get_material(self)
}

type classCSGCombiner3D struct{ Class[classCSGCombiner3D] }

func (self classCSGCombiner3D) Super() CSGShape3D {
	var super CSGShape3D
	super.ptr = self.ptr
	return super
}

func (self classCSGCombiner3D) CSGShape3D() CSGShape3D { return self.Super() }

type classCSGCylinder3D struct{ Class[classCSGCylinder3D] }

func (self classCSGCylinder3D) Super() CSGPrimitive3D {
	var super CSGPrimitive3D
	super.ptr = self.ptr
	return super
}

func (self classCSGCylinder3D) CSGPrimitive3D() CSGPrimitive3D { return self.Super() }
func (self classCSGCylinder3D) SetRadius(radius Float) {
	self.ptr.API.CSGCylinder3D_set_radius(self, radius)
}
func (self classCSGCylinder3D) GetRadius() Float {
	return self.ptr.API.CSGCylinder3D_get_radius(self)
}
func (self classCSGCylinder3D) SetHeight(height Float) {
	self.ptr.API.CSGCylinder3D_set_height(self, height)
}
func (self classCSGCylinder3D) GetHeight() Float {
	return self.ptr.API.CSGCylinder3D_get_height(self)
}
func (self classCSGCylinder3D) SetSides(sides Int) {
	self.ptr.API.CSGCylinder3D_set_sides(self, sides)
}
func (self classCSGCylinder3D) GetSides() Int {
	return self.ptr.API.CSGCylinder3D_get_sides(self)
}
func (self classCSGCylinder3D) SetCone(cone bool) {
	self.ptr.API.CSGCylinder3D_set_cone(self, cone)
}
func (self classCSGCylinder3D) IsCone() bool {
	return self.ptr.API.CSGCylinder3D_is_cone(self)
}
func (self classCSGCylinder3D) SetMaterial(material Material) {
	self.ptr.API.CSGCylinder3D_set_material(self, material)
}
func (self classCSGCylinder3D) GetMaterial() Material {
	return self.ptr.API.CSGCylinder3D_get_material(self)
}
func (self classCSGCylinder3D) SetSmoothFaces(smooth_faces bool) {
	self.ptr.API.CSGCylinder3D_set_smooth_faces(self, smooth_faces)
}
func (self classCSGCylinder3D) GetSmoothFaces() bool {
	return self.ptr.API.CSGCylinder3D_get_smooth_faces(self)
}

type classCSGMesh3D struct{ Class[classCSGMesh3D] }

func (self classCSGMesh3D) Super() CSGPrimitive3D {
	var super CSGPrimitive3D
	super.ptr = self.ptr
	return super
}

func (self classCSGMesh3D) CSGPrimitive3D() CSGPrimitive3D { return self.Super() }
func (self classCSGMesh3D) SetMesh(mesh Mesh) {
	self.ptr.API.CSGMesh3D_set_mesh(self, mesh)
}
func (self classCSGMesh3D) GetMesh() Mesh {
	return self.ptr.API.CSGMesh3D_get_mesh(self)
}
func (self classCSGMesh3D) SetMaterial(material Material) {
	self.ptr.API.CSGMesh3D_set_material(self, material)
}
func (self classCSGMesh3D) GetMaterial() Material {
	return self.ptr.API.CSGMesh3D_get_material(self)
}

type classCSGPolygon3D struct{ Class[classCSGPolygon3D] }

func (self classCSGPolygon3D) Super() CSGPrimitive3D {
	var super CSGPrimitive3D
	super.ptr = self.ptr
	return super
}

func (self classCSGPolygon3D) CSGPrimitive3D() CSGPrimitive3D { return self.Super() }
func (self classCSGPolygon3D) SetPolygon(polygon PackedVector2Array) {
	self.ptr.API.CSGPolygon3D_set_polygon(self, polygon)
}
func (self classCSGPolygon3D) GetPolygon() PackedVector2Array {
	return self.ptr.API.CSGPolygon3D_get_polygon(self)
}
func (self classCSGPolygon3D) SetMode(mode CSGPolygon3DMode) {
	self.ptr.API.CSGPolygon3D_set_mode(self, mode)
}
func (self classCSGPolygon3D) GetMode() CSGPolygon3DMode {
	return self.ptr.API.CSGPolygon3D_get_mode(self)
}
func (self classCSGPolygon3D) SetDepth(depth Float) {
	self.ptr.API.CSGPolygon3D_set_depth(self, depth)
}
func (self classCSGPolygon3D) GetDepth() Float {
	return self.ptr.API.CSGPolygon3D_get_depth(self)
}
func (self classCSGPolygon3D) SetSpinDegrees(degrees Float) {
	self.ptr.API.CSGPolygon3D_set_spin_degrees(self, degrees)
}
func (self classCSGPolygon3D) GetSpinDegrees() Float {
	return self.ptr.API.CSGPolygon3D_get_spin_degrees(self)
}
func (self classCSGPolygon3D) SetSpinSides(spin_sides Int) {
	self.ptr.API.CSGPolygon3D_set_spin_sides(self, spin_sides)
}
func (self classCSGPolygon3D) GetSpinSides() Int {
	return self.ptr.API.CSGPolygon3D_get_spin_sides(self)
}
func (self classCSGPolygon3D) SetPathNode(path NodePath) {
	self.ptr.API.CSGPolygon3D_set_path_node(self, path)
}
func (self classCSGPolygon3D) GetPathNode() NodePath {
	return self.ptr.API.CSGPolygon3D_get_path_node(self)
}
func (self classCSGPolygon3D) SetPathIntervalType(interval_type CSGPolygon3DPathIntervalType) {
	self.ptr.API.CSGPolygon3D_set_path_interval_type(self, interval_type)
}
func (self classCSGPolygon3D) GetPathIntervalType() CSGPolygon3DPathIntervalType {
	return self.ptr.API.CSGPolygon3D_get_path_interval_type(self)
}
func (self classCSGPolygon3D) SetPathInterval(interval Float) {
	self.ptr.API.CSGPolygon3D_set_path_interval(self, interval)
}
func (self classCSGPolygon3D) GetPathInterval() Float {
	return self.ptr.API.CSGPolygon3D_get_path_interval(self)
}
func (self classCSGPolygon3D) SetPathSimplifyAngle(degrees Float) {
	self.ptr.API.CSGPolygon3D_set_path_simplify_angle(self, degrees)
}
func (self classCSGPolygon3D) GetPathSimplifyAngle() Float {
	return self.ptr.API.CSGPolygon3D_get_path_simplify_angle(self)
}
func (self classCSGPolygon3D) SetPathRotation(path_rotation CSGPolygon3DPathRotation) {
	self.ptr.API.CSGPolygon3D_set_path_rotation(self, path_rotation)
}
func (self classCSGPolygon3D) GetPathRotation() CSGPolygon3DPathRotation {
	return self.ptr.API.CSGPolygon3D_get_path_rotation(self)
}
func (self classCSGPolygon3D) SetPathLocal(enable bool) {
	self.ptr.API.CSGPolygon3D_set_path_local(self, enable)
}
func (self classCSGPolygon3D) IsPathLocal() bool {
	return self.ptr.API.CSGPolygon3D_is_path_local(self)
}
func (self classCSGPolygon3D) SetPathContinuousU(enable bool) {
	self.ptr.API.CSGPolygon3D_set_path_continuous_u(self, enable)
}
func (self classCSGPolygon3D) IsPathContinuousU() bool {
	return self.ptr.API.CSGPolygon3D_is_path_continuous_u(self)
}
func (self classCSGPolygon3D) SetPathUDistance(distance Float) {
	self.ptr.API.CSGPolygon3D_set_path_u_distance(self, distance)
}
func (self classCSGPolygon3D) GetPathUDistance() Float {
	return self.ptr.API.CSGPolygon3D_get_path_u_distance(self)
}
func (self classCSGPolygon3D) SetPathJoined(enable bool) {
	self.ptr.API.CSGPolygon3D_set_path_joined(self, enable)
}
func (self classCSGPolygon3D) IsPathJoined() bool {
	return self.ptr.API.CSGPolygon3D_is_path_joined(self)
}
func (self classCSGPolygon3D) SetMaterial(material Material) {
	self.ptr.API.CSGPolygon3D_set_material(self, material)
}
func (self classCSGPolygon3D) GetMaterial() Material {
	return self.ptr.API.CSGPolygon3D_get_material(self)
}
func (self classCSGPolygon3D) SetSmoothFaces(smooth_faces bool) {
	self.ptr.API.CSGPolygon3D_set_smooth_faces(self, smooth_faces)
}
func (self classCSGPolygon3D) GetSmoothFaces() bool {
	return self.ptr.API.CSGPolygon3D_get_smooth_faces(self)
}

type classCSGPrimitive3D struct{ Class[classCSGPrimitive3D] }

func (self classCSGPrimitive3D) Super() CSGShape3D {
	var super CSGShape3D
	super.ptr = self.ptr
	return super
}

func (self classCSGPrimitive3D) CSGShape3D() CSGShape3D { return self.Super() }
func (self classCSGPrimitive3D) SetFlipFaces(flip_faces bool) {
	self.ptr.API.CSGPrimitive3D_set_flip_faces(self, flip_faces)
}
func (self classCSGPrimitive3D) GetFlipFaces() bool {
	return self.ptr.API.CSGPrimitive3D_get_flip_faces(self)
}

type classCSGShape3D struct{ Class[classCSGShape3D] }

func (self classCSGShape3D) Super() GeometryInstance3D {
	var super GeometryInstance3D
	super.ptr = self.ptr
	return super
}

func (self classCSGShape3D) GeometryInstance3D() GeometryInstance3D { return self.Super() }
func (self classCSGShape3D) IsRootShape() bool {
	return self.ptr.API.CSGShape3D_is_root_shape(self)
}
func (self classCSGShape3D) SetOperation(operation CSGShape3DOperation) {
	self.ptr.API.CSGShape3D_set_operation(self, operation)
}
func (self classCSGShape3D) GetOperation() CSGShape3DOperation {
	return self.ptr.API.CSGShape3D_get_operation(self)
}
func (self classCSGShape3D) SetSnap(snap Float) {
	self.ptr.API.CSGShape3D_set_snap(self, snap)
}
func (self classCSGShape3D) GetSnap() Float {
	return self.ptr.API.CSGShape3D_get_snap(self)
}
func (self classCSGShape3D) SetUseCollision(operation bool) {
	self.ptr.API.CSGShape3D_set_use_collision(self, operation)
}
func (self classCSGShape3D) IsUsingCollision() bool {
	return self.ptr.API.CSGShape3D_is_using_collision(self)
}
func (self classCSGShape3D) SetCollisionLayer(layer Int) {
	self.ptr.API.CSGShape3D_set_collision_layer(self, layer)
}
func (self classCSGShape3D) GetCollisionLayer() Int {
	return self.ptr.API.CSGShape3D_get_collision_layer(self)
}
func (self classCSGShape3D) SetCollisionMask(mask Int) {
	self.ptr.API.CSGShape3D_set_collision_mask(self, mask)
}
func (self classCSGShape3D) GetCollisionMask() Int {
	return self.ptr.API.CSGShape3D_get_collision_mask(self)
}
func (self classCSGShape3D) SetCollisionMaskValue(layer_number Int, value bool) {
	self.ptr.API.CSGShape3D_set_collision_mask_value(self, layer_number, value)
}
func (self classCSGShape3D) GetCollisionMaskValue(layer_number Int) bool {
	return self.ptr.API.CSGShape3D_get_collision_mask_value(self, layer_number)
}
func (self classCSGShape3D) SetCollisionLayerValue(layer_number Int, value bool) {
	self.ptr.API.CSGShape3D_set_collision_layer_value(self, layer_number, value)
}
func (self classCSGShape3D) GetCollisionLayerValue(layer_number Int) bool {
	return self.ptr.API.CSGShape3D_get_collision_layer_value(self, layer_number)
}
func (self classCSGShape3D) SetCollisionPriority(priority Float) {
	self.ptr.API.CSGShape3D_set_collision_priority(self, priority)
}
func (self classCSGShape3D) GetCollisionPriority() Float {
	return self.ptr.API.CSGShape3D_get_collision_priority(self)
}
func (self classCSGShape3D) SetCalculateTangents(enabled bool) {
	self.ptr.API.CSGShape3D_set_calculate_tangents(self, enabled)
}
func (self classCSGShape3D) IsCalculatingTangents() bool {
	return self.ptr.API.CSGShape3D_is_calculating_tangents(self)
}
func (self classCSGShape3D) GetMeshes() Array {
	return self.ptr.API.CSGShape3D_get_meshes(self)
}

type classCSGSphere3D struct{ Class[classCSGSphere3D] }

func (self classCSGSphere3D) Super() CSGPrimitive3D {
	var super CSGPrimitive3D
	super.ptr = self.ptr
	return super
}

func (self classCSGSphere3D) CSGPrimitive3D() CSGPrimitive3D { return self.Super() }
func (self classCSGSphere3D) SetRadius(radius Float) {
	self.ptr.API.CSGSphere3D_set_radius(self, radius)
}
func (self classCSGSphere3D) GetRadius() Float {
	return self.ptr.API.CSGSphere3D_get_radius(self)
}
func (self classCSGSphere3D) SetRadialSegments(radial_segments Int) {
	self.ptr.API.CSGSphere3D_set_radial_segments(self, radial_segments)
}
func (self classCSGSphere3D) GetRadialSegments() Int {
	return self.ptr.API.CSGSphere3D_get_radial_segments(self)
}
func (self classCSGSphere3D) SetRings(rings Int) {
	self.ptr.API.CSGSphere3D_set_rings(self, rings)
}
func (self classCSGSphere3D) GetRings() Int {
	return self.ptr.API.CSGSphere3D_get_rings(self)
}
func (self classCSGSphere3D) SetSmoothFaces(smooth_faces bool) {
	self.ptr.API.CSGSphere3D_set_smooth_faces(self, smooth_faces)
}
func (self classCSGSphere3D) GetSmoothFaces() bool {
	return self.ptr.API.CSGSphere3D_get_smooth_faces(self)
}
func (self classCSGSphere3D) SetMaterial(material Material) {
	self.ptr.API.CSGSphere3D_set_material(self, material)
}
func (self classCSGSphere3D) GetMaterial() Material {
	return self.ptr.API.CSGSphere3D_get_material(self)
}

type classCSGTorus3D struct{ Class[classCSGTorus3D] }

func (self classCSGTorus3D) Super() CSGPrimitive3D {
	var super CSGPrimitive3D
	super.ptr = self.ptr
	return super
}

func (self classCSGTorus3D) CSGPrimitive3D() CSGPrimitive3D { return self.Super() }
func (self classCSGTorus3D) SetInnerRadius(radius Float) {
	self.ptr.API.CSGTorus3D_set_inner_radius(self, radius)
}
func (self classCSGTorus3D) GetInnerRadius() Float {
	return self.ptr.API.CSGTorus3D_get_inner_radius(self)
}
func (self classCSGTorus3D) SetOuterRadius(radius Float) {
	self.ptr.API.CSGTorus3D_set_outer_radius(self, radius)
}
func (self classCSGTorus3D) GetOuterRadius() Float {
	return self.ptr.API.CSGTorus3D_get_outer_radius(self)
}
func (self classCSGTorus3D) SetSides(sides Int) {
	self.ptr.API.CSGTorus3D_set_sides(self, sides)
}
func (self classCSGTorus3D) GetSides() Int {
	return self.ptr.API.CSGTorus3D_get_sides(self)
}
func (self classCSGTorus3D) SetRingSides(sides Int) {
	self.ptr.API.CSGTorus3D_set_ring_sides(self, sides)
}
func (self classCSGTorus3D) GetRingSides() Int {
	return self.ptr.API.CSGTorus3D_get_ring_sides(self)
}
func (self classCSGTorus3D) SetMaterial(material Material) {
	self.ptr.API.CSGTorus3D_set_material(self, material)
}
func (self classCSGTorus3D) GetMaterial() Material {
	return self.ptr.API.CSGTorus3D_get_material(self)
}
func (self classCSGTorus3D) SetSmoothFaces(smooth_faces bool) {
	self.ptr.API.CSGTorus3D_set_smooth_faces(self, smooth_faces)
}
func (self classCSGTorus3D) GetSmoothFaces() bool {
	return self.ptr.API.CSGTorus3D_get_smooth_faces(self)
}

type classCallbackTweener struct{ Class[classCallbackTweener] }

func (self classCallbackTweener) Super() Tweener {
	var super Tweener
	super.ptr = self.ptr
	return super
}

func (self classCallbackTweener) Tweener() Tweener { return self.Super() }
func (self classCallbackTweener) SetDelay(delay Float) CallbackTweener {
	return self.ptr.API.CallbackTweener_set_delay(self, delay)
}

type classCamera2D struct{ Class[classCamera2D] }

func (self classCamera2D) Super() Node2D { var super Node2D; super.ptr = self.ptr; return super }

func (self classCamera2D) Node2D() Node2D { return self.Super() }
func (self classCamera2D) SetOffset(offset Vector2) {
	self.ptr.API.Camera2D_set_offset(self, offset)
}
func (self classCamera2D) GetOffset() Vector2 {
	return self.ptr.API.Camera2D_get_offset(self)
}
func (self classCamera2D) SetAnchorMode(anchor_mode Camera2DAnchorMode) {
	self.ptr.API.Camera2D_set_anchor_mode(self, anchor_mode)
}
func (self classCamera2D) GetAnchorMode() Camera2DAnchorMode {
	return self.ptr.API.Camera2D_get_anchor_mode(self)
}
func (self classCamera2D) SetIgnoreRotation(ignore bool) {
	self.ptr.API.Camera2D_set_ignore_rotation(self, ignore)
}
func (self classCamera2D) IsIgnoringRotation() bool {
	return self.ptr.API.Camera2D_is_ignoring_rotation(self)
}
func (self classCamera2D) SetProcessCallback(mode Camera2DCamera2DProcessCallback) {
	self.ptr.API.Camera2D_set_process_callback(self, mode)
}
func (self classCamera2D) GetProcessCallback() Camera2DCamera2DProcessCallback {
	return self.ptr.API.Camera2D_get_process_callback(self)
}
func (self classCamera2D) SetEnabled(enabled bool) {
	self.ptr.API.Camera2D_set_enabled(self, enabled)
}
func (self classCamera2D) IsEnabled() bool {
	return self.ptr.API.Camera2D_is_enabled(self)
}
func (self classCamera2D) MakeCurrent() {
	self.ptr.API.Camera2D_make_current(self)
}
func (self classCamera2D) IsCurrent() bool {
	return self.ptr.API.Camera2D_is_current(self)
}
func (self classCamera2D) SetLimit(margin Side, limit Int) {
	self.ptr.API.Camera2D_set_limit(self, margin, limit)
}
func (self classCamera2D) GetLimit(margin Side) Int {
	return self.ptr.API.Camera2D_get_limit(self, margin)
}
func (self classCamera2D) SetLimitSmoothingEnabled(limit_smoothing_enabled bool) {
	self.ptr.API.Camera2D_set_limit_smoothing_enabled(self, limit_smoothing_enabled)
}
func (self classCamera2D) IsLimitSmoothingEnabled() bool {
	return self.ptr.API.Camera2D_is_limit_smoothing_enabled(self)
}
func (self classCamera2D) SetDragVerticalEnabled(enabled bool) {
	self.ptr.API.Camera2D_set_drag_vertical_enabled(self, enabled)
}
func (self classCamera2D) IsDragVerticalEnabled() bool {
	return self.ptr.API.Camera2D_is_drag_vertical_enabled(self)
}
func (self classCamera2D) SetDragHorizontalEnabled(enabled bool) {
	self.ptr.API.Camera2D_set_drag_horizontal_enabled(self, enabled)
}
func (self classCamera2D) IsDragHorizontalEnabled() bool {
	return self.ptr.API.Camera2D_is_drag_horizontal_enabled(self)
}
func (self classCamera2D) SetDragVerticalOffset(offset Float) {
	self.ptr.API.Camera2D_set_drag_vertical_offset(self, offset)
}
func (self classCamera2D) GetDragVerticalOffset() Float {
	return self.ptr.API.Camera2D_get_drag_vertical_offset(self)
}
func (self classCamera2D) SetDragHorizontalOffset(offset Float) {
	self.ptr.API.Camera2D_set_drag_horizontal_offset(self, offset)
}
func (self classCamera2D) GetDragHorizontalOffset() Float {
	return self.ptr.API.Camera2D_get_drag_horizontal_offset(self)
}
func (self classCamera2D) SetDragMargin(margin Side, drag_margin Float) {
	self.ptr.API.Camera2D_set_drag_margin(self, margin, drag_margin)
}
func (self classCamera2D) GetDragMargin(margin Side) Float {
	return self.ptr.API.Camera2D_get_drag_margin(self, margin)
}
func (self classCamera2D) GetTargetPosition() Vector2 {
	return self.ptr.API.Camera2D_get_target_position(self)
}
func (self classCamera2D) GetScreenCenterPosition() Vector2 {
	return self.ptr.API.Camera2D_get_screen_center_position(self)
}
func (self classCamera2D) SetZoom(zoom Vector2) {
	self.ptr.API.Camera2D_set_zoom(self, zoom)
}
func (self classCamera2D) GetZoom() Vector2 {
	return self.ptr.API.Camera2D_get_zoom(self)
}
func (self classCamera2D) SetCustomViewport(viewport Node) {
	self.ptr.API.Camera2D_set_custom_viewport(self, viewport)
}
func (self classCamera2D) GetCustomViewport() Node {
	return self.ptr.API.Camera2D_get_custom_viewport(self)
}
func (self classCamera2D) SetPositionSmoothingSpeed(position_smoothing_speed Float) {
	self.ptr.API.Camera2D_set_position_smoothing_speed(self, position_smoothing_speed)
}
func (self classCamera2D) GetPositionSmoothingSpeed() Float {
	return self.ptr.API.Camera2D_get_position_smoothing_speed(self)
}
func (self classCamera2D) SetPositionSmoothingEnabled(position_smoothing_speed bool) {
	self.ptr.API.Camera2D_set_position_smoothing_enabled(self, position_smoothing_speed)
}
func (self classCamera2D) IsPositionSmoothingEnabled() bool {
	return self.ptr.API.Camera2D_is_position_smoothing_enabled(self)
}
func (self classCamera2D) SetRotationSmoothingEnabled(enabled bool) {
	self.ptr.API.Camera2D_set_rotation_smoothing_enabled(self, enabled)
}
func (self classCamera2D) IsRotationSmoothingEnabled() bool {
	return self.ptr.API.Camera2D_is_rotation_smoothing_enabled(self)
}
func (self classCamera2D) SetRotationSmoothingSpeed(speed Float) {
	self.ptr.API.Camera2D_set_rotation_smoothing_speed(self, speed)
}
func (self classCamera2D) GetRotationSmoothingSpeed() Float {
	return self.ptr.API.Camera2D_get_rotation_smoothing_speed(self)
}
func (self classCamera2D) ForceUpdateScroll() {
	self.ptr.API.Camera2D_force_update_scroll(self)
}
func (self classCamera2D) ResetSmoothing() {
	self.ptr.API.Camera2D_reset_smoothing(self)
}
func (self classCamera2D) Align() {
	self.ptr.API.Camera2D_align(self)
}
func (self classCamera2D) SetScreenDrawingEnabled(screen_drawing_enabled bool) {
	self.ptr.API.Camera2D_set_screen_drawing_enabled(self, screen_drawing_enabled)
}
func (self classCamera2D) IsScreenDrawingEnabled() bool {
	return self.ptr.API.Camera2D_is_screen_drawing_enabled(self)
}
func (self classCamera2D) SetLimitDrawingEnabled(limit_drawing_enabled bool) {
	self.ptr.API.Camera2D_set_limit_drawing_enabled(self, limit_drawing_enabled)
}
func (self classCamera2D) IsLimitDrawingEnabled() bool {
	return self.ptr.API.Camera2D_is_limit_drawing_enabled(self)
}
func (self classCamera2D) SetMarginDrawingEnabled(margin_drawing_enabled bool) {
	self.ptr.API.Camera2D_set_margin_drawing_enabled(self, margin_drawing_enabled)
}
func (self classCamera2D) IsMarginDrawingEnabled() bool {
	return self.ptr.API.Camera2D_is_margin_drawing_enabled(self)
}

type classCamera3D struct{ Class[classCamera3D] }

func (self classCamera3D) Super() Node3D { var super Node3D; super.ptr = self.ptr; return super }

func (self classCamera3D) Node3D() Node3D { return self.Super() }
func (self classCamera3D) ProjectRayNormal(screen_point Vector2) Vector3 {
	return self.ptr.API.Camera3D_project_ray_normal(self, screen_point)
}
func (self classCamera3D) ProjectLocalRayNormal(screen_point Vector2) Vector3 {
	return self.ptr.API.Camera3D_project_local_ray_normal(self, screen_point)
}
func (self classCamera3D) ProjectRayOrigin(screen_point Vector2) Vector3 {
	return self.ptr.API.Camera3D_project_ray_origin(self, screen_point)
}
func (self classCamera3D) UnprojectPosition(world_point Vector3) Vector2 {
	return self.ptr.API.Camera3D_unproject_position(self, world_point)
}
func (self classCamera3D) IsPositionBehind(world_point Vector3) bool {
	return self.ptr.API.Camera3D_is_position_behind(self, world_point)
}
func (self classCamera3D) ProjectPosition(screen_point Vector2, z_depth Float) Vector3 {
	return self.ptr.API.Camera3D_project_position(self, screen_point, z_depth)
}
func (self classCamera3D) SetPerspective(fov Float, z_near Float, z_far Float) {
	self.ptr.API.Camera3D_set_perspective(self, fov, z_near, z_far)
}
func (self classCamera3D) SetOrthogonal(size Float, z_near Float, z_far Float) {
	self.ptr.API.Camera3D_set_orthogonal(self, size, z_near, z_far)
}
func (self classCamera3D) SetFrustum(size Float, offset Vector2, z_near Float, z_far Float) {
	self.ptr.API.Camera3D_set_frustum(self, size, offset, z_near, z_far)
}
func (self classCamera3D) MakeCurrent() {
	self.ptr.API.Camera3D_make_current(self)
}
func (self classCamera3D) ClearCurrent(enable_next bool) {
	self.ptr.API.Camera3D_clear_current(self, enable_next)
}
func (self classCamera3D) SetCurrent(enabled bool) {
	self.ptr.API.Camera3D_set_current(self, enabled)
}
func (self classCamera3D) IsCurrent() bool {
	return self.ptr.API.Camera3D_is_current(self)
}
func (self classCamera3D) GetCameraTransform() Transform3D {
	return self.ptr.API.Camera3D_get_camera_transform(self)
}
func (self classCamera3D) GetCameraProjection() Projection {
	return self.ptr.API.Camera3D_get_camera_projection(self)
}
func (self classCamera3D) GetFov() Float {
	return self.ptr.API.Camera3D_get_fov(self)
}
func (self classCamera3D) GetFrustumOffset() Vector2 {
	return self.ptr.API.Camera3D_get_frustum_offset(self)
}
func (self classCamera3D) GetSize() Float {
	return self.ptr.API.Camera3D_get_size(self)
}
func (self classCamera3D) GetFar() Float {
	return self.ptr.API.Camera3D_get_far(self)
}
func (self classCamera3D) GetNear() Float {
	return self.ptr.API.Camera3D_get_near(self)
}
func (self classCamera3D) SetFov(fov Float) {
	self.ptr.API.Camera3D_set_fov(self, fov)
}
func (self classCamera3D) SetFrustumOffset(offset Vector2) {
	self.ptr.API.Camera3D_set_frustum_offset(self, offset)
}
func (self classCamera3D) SetSize(size Float) {
	self.ptr.API.Camera3D_set_size(self, size)
}
func (self classCamera3D) SetFar(far Float) {
	self.ptr.API.Camera3D_set_far(self, far)
}
func (self classCamera3D) SetNear(near Float) {
	self.ptr.API.Camera3D_set_near(self, near)
}
func (self classCamera3D) GetProjection() Camera3DProjectionType {
	return self.ptr.API.Camera3D_get_projection(self)
}
func (self classCamera3D) SetProjection(mode Camera3DProjectionType) {
	self.ptr.API.Camera3D_set_projection(self, mode)
}
func (self classCamera3D) SetHOffset(offset Float) {
	self.ptr.API.Camera3D_set_h_offset(self, offset)
}
func (self classCamera3D) GetHOffset() Float {
	return self.ptr.API.Camera3D_get_h_offset(self)
}
func (self classCamera3D) SetVOffset(offset Float) {
	self.ptr.API.Camera3D_set_v_offset(self, offset)
}
func (self classCamera3D) GetVOffset() Float {
	return self.ptr.API.Camera3D_get_v_offset(self)
}
func (self classCamera3D) SetCullMask(mask Int) {
	self.ptr.API.Camera3D_set_cull_mask(self, mask)
}
func (self classCamera3D) GetCullMask() Int {
	return self.ptr.API.Camera3D_get_cull_mask(self)
}
func (self classCamera3D) SetEnvironment(env Environment) {
	self.ptr.API.Camera3D_set_environment(self, env)
}
func (self classCamera3D) GetEnvironment() Environment {
	return self.ptr.API.Camera3D_get_environment(self)
}
func (self classCamera3D) SetAttributes(env CameraAttributes) {
	self.ptr.API.Camera3D_set_attributes(self, env)
}
func (self classCamera3D) GetAttributes() CameraAttributes {
	return self.ptr.API.Camera3D_get_attributes(self)
}
func (self classCamera3D) SetKeepAspectMode(mode Camera3DKeepAspect) {
	self.ptr.API.Camera3D_set_keep_aspect_mode(self, mode)
}
func (self classCamera3D) GetKeepAspectMode() Camera3DKeepAspect {
	return self.ptr.API.Camera3D_get_keep_aspect_mode(self)
}
func (self classCamera3D) SetDopplerTracking(mode Camera3DDopplerTracking) {
	self.ptr.API.Camera3D_set_doppler_tracking(self, mode)
}
func (self classCamera3D) GetDopplerTracking() Camera3DDopplerTracking {
	return self.ptr.API.Camera3D_get_doppler_tracking(self)
}
func (self classCamera3D) GetFrustum() ArrayOf[Plane] {
	return self.ptr.API.Camera3D_get_frustum(self)
}
func (self classCamera3D) IsPositionInFrustum(world_point Vector3) bool {
	return self.ptr.API.Camera3D_is_position_in_frustum(self, world_point)
}
func (self classCamera3D) GetCameraRid() RID {
	return self.ptr.API.Camera3D_get_camera_rid(self)
}
func (self classCamera3D) GetPyramidShapeRid() RID {
	return self.ptr.API.Camera3D_get_pyramid_shape_rid(self)
}
func (self classCamera3D) SetCullMaskValue(layer_number Int, value bool) {
	self.ptr.API.Camera3D_set_cull_mask_value(self, layer_number, value)
}
func (self classCamera3D) GetCullMaskValue(layer_number Int) bool {
	return self.ptr.API.Camera3D_get_cull_mask_value(self, layer_number)
}

type classCameraAttributes struct{ Class[classCameraAttributes] }

func (self classCameraAttributes) Super() Resource {
	var super Resource
	super.ptr = self.ptr
	return super
}

func (self classCameraAttributes) Resource() Resource { return self.Super() }
func (self classCameraAttributes) SetExposureMultiplier(multiplier Float) {
	self.ptr.API.CameraAttributes_set_exposure_multiplier(self, multiplier)
}
func (self classCameraAttributes) GetExposureMultiplier() Float {
	return self.ptr.API.CameraAttributes_get_exposure_multiplier(self)
}
func (self classCameraAttributes) SetExposureSensitivity(sensitivity Float) {
	self.ptr.API.CameraAttributes_set_exposure_sensitivity(self, sensitivity)
}
func (self classCameraAttributes) GetExposureSensitivity() Float {
	return self.ptr.API.CameraAttributes_get_exposure_sensitivity(self)
}
func (self classCameraAttributes) SetAutoExposureEnabled(enabled bool) {
	self.ptr.API.CameraAttributes_set_auto_exposure_enabled(self, enabled)
}
func (self classCameraAttributes) IsAutoExposureEnabled() bool {
	return self.ptr.API.CameraAttributes_is_auto_exposure_enabled(self)
}
func (self classCameraAttributes) SetAutoExposureSpeed(exposure_speed Float) {
	self.ptr.API.CameraAttributes_set_auto_exposure_speed(self, exposure_speed)
}
func (self classCameraAttributes) GetAutoExposureSpeed() Float {
	return self.ptr.API.CameraAttributes_get_auto_exposure_speed(self)
}
func (self classCameraAttributes) SetAutoExposureScale(exposure_grey Float) {
	self.ptr.API.CameraAttributes_set_auto_exposure_scale(self, exposure_grey)
}
func (self classCameraAttributes) GetAutoExposureScale() Float {
	return self.ptr.API.CameraAttributes_get_auto_exposure_scale(self)
}

type classCameraAttributesPhysical struct {
	Class[classCameraAttributesPhysical]
}

func (self classCameraAttributesPhysical) Super() CameraAttributes {
	var super CameraAttributes
	super.ptr = self.ptr
	return super
}

func (self classCameraAttributesPhysical) CameraAttributes() CameraAttributes { return self.Super() }
func (self classCameraAttributesPhysical) SetAperture(aperture Float) {
	self.ptr.API.CameraAttributesPhysical_set_aperture(self, aperture)
}
func (self classCameraAttributesPhysical) GetAperture() Float {
	return self.ptr.API.CameraAttributesPhysical_get_aperture(self)
}
func (self classCameraAttributesPhysical) SetShutterSpeed(shutter_speed Float) {
	self.ptr.API.CameraAttributesPhysical_set_shutter_speed(self, shutter_speed)
}
func (self classCameraAttributesPhysical) GetShutterSpeed() Float {
	return self.ptr.API.CameraAttributesPhysical_get_shutter_speed(self)
}
func (self classCameraAttributesPhysical) SetFocalLength(focal_length Float) {
	self.ptr.API.CameraAttributesPhysical_set_focal_length(self, focal_length)
}
func (self classCameraAttributesPhysical) GetFocalLength() Float {
	return self.ptr.API.CameraAttributesPhysical_get_focal_length(self)
}
func (self classCameraAttributesPhysical) SetFocusDistance(focus_distance Float) {
	self.ptr.API.CameraAttributesPhysical_set_focus_distance(self, focus_distance)
}
func (self classCameraAttributesPhysical) GetFocusDistance() Float {
	return self.ptr.API.CameraAttributesPhysical_get_focus_distance(self)
}
func (self classCameraAttributesPhysical) SetNear(near Float) {
	self.ptr.API.CameraAttributesPhysical_set_near(self, near)
}
func (self classCameraAttributesPhysical) GetNear() Float {
	return self.ptr.API.CameraAttributesPhysical_get_near(self)
}
func (self classCameraAttributesPhysical) SetFar(far Float) {
	self.ptr.API.CameraAttributesPhysical_set_far(self, far)
}
func (self classCameraAttributesPhysical) GetFar() Float {
	return self.ptr.API.CameraAttributesPhysical_get_far(self)
}
func (self classCameraAttributesPhysical) GetFov() Float {
	return self.ptr.API.CameraAttributesPhysical_get_fov(self)
}
func (self classCameraAttributesPhysical) SetAutoExposureMaxExposureValue(exposure_value_max Float) {
	self.ptr.API.CameraAttributesPhysical_set_auto_exposure_max_exposure_value(self, exposure_value_max)
}
func (self classCameraAttributesPhysical) GetAutoExposureMaxExposureValue() Float {
	return self.ptr.API.CameraAttributesPhysical_get_auto_exposure_max_exposure_value(self)
}
func (self classCameraAttributesPhysical) SetAutoExposureMinExposureValue(exposure_value_min Float) {
	self.ptr.API.CameraAttributesPhysical_set_auto_exposure_min_exposure_value(self, exposure_value_min)
}
func (self classCameraAttributesPhysical) GetAutoExposureMinExposureValue() Float {
	return self.ptr.API.CameraAttributesPhysical_get_auto_exposure_min_exposure_value(self)
}

type classCameraAttributesPractical struct {
	Class[classCameraAttributesPractical]
}

func (self classCameraAttributesPractical) Super() CameraAttributes {
	var super CameraAttributes
	super.ptr = self.ptr
	return super
}

func (self classCameraAttributesPractical) CameraAttributes() CameraAttributes { return self.Super() }
func (self classCameraAttributesPractical) SetDofBlurFarEnabled(enabled bool) {
	self.ptr.API.CameraAttributesPractical_set_dof_blur_far_enabled(self, enabled)
}
func (self classCameraAttributesPractical) IsDofBlurFarEnabled() bool {
	return self.ptr.API.CameraAttributesPractical_is_dof_blur_far_enabled(self)
}
func (self classCameraAttributesPractical) SetDofBlurFarDistance(distance Float) {
	self.ptr.API.CameraAttributesPractical_set_dof_blur_far_distance(self, distance)
}
func (self classCameraAttributesPractical) GetDofBlurFarDistance() Float {
	return self.ptr.API.CameraAttributesPractical_get_dof_blur_far_distance(self)
}
func (self classCameraAttributesPractical) SetDofBlurFarTransition(distance Float) {
	self.ptr.API.CameraAttributesPractical_set_dof_blur_far_transition(self, distance)
}
func (self classCameraAttributesPractical) GetDofBlurFarTransition() Float {
	return self.ptr.API.CameraAttributesPractical_get_dof_blur_far_transition(self)
}
func (self classCameraAttributesPractical) SetDofBlurNearEnabled(enabled bool) {
	self.ptr.API.CameraAttributesPractical_set_dof_blur_near_enabled(self, enabled)
}
func (self classCameraAttributesPractical) IsDofBlurNearEnabled() bool {
	return self.ptr.API.CameraAttributesPractical_is_dof_blur_near_enabled(self)
}
func (self classCameraAttributesPractical) SetDofBlurNearDistance(distance Float) {
	self.ptr.API.CameraAttributesPractical_set_dof_blur_near_distance(self, distance)
}
func (self classCameraAttributesPractical) GetDofBlurNearDistance() Float {
	return self.ptr.API.CameraAttributesPractical_get_dof_blur_near_distance(self)
}
func (self classCameraAttributesPractical) SetDofBlurNearTransition(distance Float) {
	self.ptr.API.CameraAttributesPractical_set_dof_blur_near_transition(self, distance)
}
func (self classCameraAttributesPractical) GetDofBlurNearTransition() Float {
	return self.ptr.API.CameraAttributesPractical_get_dof_blur_near_transition(self)
}
func (self classCameraAttributesPractical) SetDofBlurAmount(amount Float) {
	self.ptr.API.CameraAttributesPractical_set_dof_blur_amount(self, amount)
}
func (self classCameraAttributesPractical) GetDofBlurAmount() Float {
	return self.ptr.API.CameraAttributesPractical_get_dof_blur_amount(self)
}
func (self classCameraAttributesPractical) SetAutoExposureMaxSensitivity(max_sensitivity Float) {
	self.ptr.API.CameraAttributesPractical_set_auto_exposure_max_sensitivity(self, max_sensitivity)
}
func (self classCameraAttributesPractical) GetAutoExposureMaxSensitivity() Float {
	return self.ptr.API.CameraAttributesPractical_get_auto_exposure_max_sensitivity(self)
}
func (self classCameraAttributesPractical) SetAutoExposureMinSensitivity(min_sensitivity Float) {
	self.ptr.API.CameraAttributesPractical_set_auto_exposure_min_sensitivity(self, min_sensitivity)
}
func (self classCameraAttributesPractical) GetAutoExposureMinSensitivity() Float {
	return self.ptr.API.CameraAttributesPractical_get_auto_exposure_min_sensitivity(self)
}

type classCameraFeed struct{ Class[classCameraFeed] }

func (self classCameraFeed) Super() RefCounted {
	var super RefCounted
	super.ptr = self.ptr
	return super
}

func (self classCameraFeed) RefCounted() RefCounted { return self.Super() }
func (self classCameraFeed) GetId() Int {
	return self.ptr.API.CameraFeed_get_id(self)
}
func (self classCameraFeed) IsActive() bool {
	return self.ptr.API.CameraFeed_is_active(self)
}
func (self classCameraFeed) SetActive(active bool) {
	self.ptr.API.CameraFeed_set_active(self, active)
}
func (self classCameraFeed) GetName() String {
	return self.ptr.API.CameraFeed_get_name(self)
}
func (self classCameraFeed) GetPosition() CameraFeedFeedPosition {
	return self.ptr.API.CameraFeed_get_position(self)
}
func (self classCameraFeed) GetTransform() Transform2D {
	return self.ptr.API.CameraFeed_get_transform(self)
}
func (self classCameraFeed) SetTransform(transform Transform2D) {
	self.ptr.API.CameraFeed_set_transform(self, transform)
}
func (self classCameraFeed) GetDatatype() CameraFeedFeedDataType {
	return self.ptr.API.CameraFeed_get_datatype(self)
}

type classCameraServer struct{ Class[classCameraServer] }

func (self classCameraServer) Super() Object { var super Object; super.ptr = self.ptr; return super }

func (self classCameraServer) Object() Object { return self.Super() }

func (self classCameraServer) isSingleton() {}
func (self classCameraServer) GetFeed(index Int) CameraFeed {
	return self.ptr.API.CameraServer_get_feed(self, index)
}
func (self classCameraServer) GetFeedCount() Int {
	return self.ptr.API.CameraServer_get_feed_count(self)
}
func (self classCameraServer) Feeds() ArrayOf[CameraFeed] {
	return self.ptr.API.CameraServer_feeds(self)
}
func (self classCameraServer) AddFeed(feed CameraFeed) {
	self.ptr.API.CameraServer_add_feed(self, feed)
}
func (self classCameraServer) RemoveFeed(feed CameraFeed) {
	self.ptr.API.CameraServer_remove_feed(self, feed)
}

type classCameraTexture struct{ Class[classCameraTexture] }

func (self classCameraTexture) Super() Texture2D {
	var super Texture2D
	super.ptr = self.ptr
	return super
}

func (self classCameraTexture) Texture2D() Texture2D { return self.Super() }
func (self classCameraTexture) SetCameraFeedId(feed_id Int) {
	self.ptr.API.CameraTexture_set_camera_feed_id(self, feed_id)
}
func (self classCameraTexture) GetCameraFeedId() Int {
	return self.ptr.API.CameraTexture_get_camera_feed_id(self)
}
func (self classCameraTexture) SetWhichFeed(which_feed CameraServerFeedImage) {
	self.ptr.API.CameraTexture_set_which_feed(self, which_feed)
}
func (self classCameraTexture) GetWhichFeed() CameraServerFeedImage {
	return self.ptr.API.CameraTexture_get_which_feed(self)
}
func (self classCameraTexture) SetCameraActive(active bool) {
	self.ptr.API.CameraTexture_set_camera_active(self, active)
}
func (self classCameraTexture) GetCameraActive() bool {
	return self.ptr.API.CameraTexture_get_camera_active(self)
}

type classCanvasGroup struct{ Class[classCanvasGroup] }

func (self classCanvasGroup) Super() Node2D { var super Node2D; super.ptr = self.ptr; return super }

func (self classCanvasGroup) Node2D() Node2D { return self.Super() }
func (self classCanvasGroup) SetFitMargin(fit_margin Float) {
	self.ptr.API.CanvasGroup_set_fit_margin(self, fit_margin)
}
func (self classCanvasGroup) GetFitMargin() Float {
	return self.ptr.API.CanvasGroup_get_fit_margin(self)
}
func (self classCanvasGroup) SetClearMargin(clear_margin Float) {
	self.ptr.API.CanvasGroup_set_clear_margin(self, clear_margin)
}
func (self classCanvasGroup) GetClearMargin() Float {
	return self.ptr.API.CanvasGroup_get_clear_margin(self)
}
func (self classCanvasGroup) SetUseMipmaps(use_mipmaps bool) {
	self.ptr.API.CanvasGroup_set_use_mipmaps(self, use_mipmaps)
}
func (self classCanvasGroup) IsUsingMipmaps() bool {
	return self.ptr.API.CanvasGroup_is_using_mipmaps(self)
}

type classCanvasItem struct{ Class[classCanvasItem] }

func (self classCanvasItem) Super() Node { var super Node; super.ptr = self.ptr; return super }

func (self classCanvasItem) Node() Node { return self.Super() }
func (self classCanvasItem) GetCanvasItem() RID {
	return self.ptr.API.CanvasItem_get_canvas_item(self)
}
func (self classCanvasItem) SetVisible(visible bool) {
	self.ptr.API.CanvasItem_set_visible(self, visible)
}
func (self classCanvasItem) IsVisible() bool {
	return self.ptr.API.CanvasItem_is_visible(self)
}
func (self classCanvasItem) IsVisibleInTree() bool {
	return self.ptr.API.CanvasItem_is_visible_in_tree(self)
}
func (self classCanvasItem) Show() {
	self.ptr.API.CanvasItem_show(self)
}
func (self classCanvasItem) Hide() {
	self.ptr.API.CanvasItem_hide(self)
}
func (self classCanvasItem) QueueRedraw() {
	self.ptr.API.CanvasItem_queue_redraw(self)
}
func (self classCanvasItem) MoveToFront() {
	self.ptr.API.CanvasItem_move_to_front(self)
}
func (self classCanvasItem) SetAsTopLevel(enable bool) {
	self.ptr.API.CanvasItem_set_as_top_level(self, enable)
}
func (self classCanvasItem) IsSetAsTopLevel() bool {
	return self.ptr.API.CanvasItem_is_set_as_top_level(self)
}
func (self classCanvasItem) SetLightMask(light_mask Int) {
	self.ptr.API.CanvasItem_set_light_mask(self, light_mask)
}
func (self classCanvasItem) GetLightMask() Int {
	return self.ptr.API.CanvasItem_get_light_mask(self)
}
func (self classCanvasItem) SetModulate(modulate Color) {
	self.ptr.API.CanvasItem_set_modulate(self, modulate)
}
func (self classCanvasItem) GetModulate() Color {
	return self.ptr.API.CanvasItem_get_modulate(self)
}
func (self classCanvasItem) SetSelfModulate(self_modulate Color) {
	self.ptr.API.CanvasItem_set_self_modulate(self, self_modulate)
}
func (self classCanvasItem) GetSelfModulate() Color {
	return self.ptr.API.CanvasItem_get_self_modulate(self)
}
func (self classCanvasItem) SetZIndex(z_index Int) {
	self.ptr.API.CanvasItem_set_z_index(self, z_index)
}
func (self classCanvasItem) GetZIndex() Int {
	return self.ptr.API.CanvasItem_get_z_index(self)
}
func (self classCanvasItem) SetZAsRelative(enable bool) {
	self.ptr.API.CanvasItem_set_z_as_relative(self, enable)
}
func (self classCanvasItem) IsZRelative() bool {
	return self.ptr.API.CanvasItem_is_z_relative(self)
}
func (self classCanvasItem) SetYSortEnabled(enabled bool) {
	self.ptr.API.CanvasItem_set_y_sort_enabled(self, enabled)
}
func (self classCanvasItem) IsYSortEnabled() bool {
	return self.ptr.API.CanvasItem_is_y_sort_enabled(self)
}
func (self classCanvasItem) SetDrawBehindParent(enable bool) {
	self.ptr.API.CanvasItem_set_draw_behind_parent(self, enable)
}
func (self classCanvasItem) IsDrawBehindParentEnabled() bool {
	return self.ptr.API.CanvasItem_is_draw_behind_parent_enabled(self)
}
func (self classCanvasItem) DrawLine(from Vector2, to Vector2, color Color, width Float, antialiased bool) {
	self.ptr.API.CanvasItem_draw_line(self, from, to, color, width, antialiased)
}
func (self classCanvasItem) DrawDashedLine(from Vector2, to Vector2, color Color, width Float, dash Float, aligned bool) {
	self.ptr.API.CanvasItem_draw_dashed_line(self, from, to, color, width, dash, aligned)
}
func (self classCanvasItem) DrawPolyline(points PackedVector2Array, color Color, width Float, antialiased bool) {
	self.ptr.API.CanvasItem_draw_polyline(self, points, color, width, antialiased)
}
func (self classCanvasItem) DrawPolylineColors(points PackedVector2Array, colors PackedColorArray, width Float, antialiased bool) {
	self.ptr.API.CanvasItem_draw_polyline_colors(self, points, colors, width, antialiased)
}
func (self classCanvasItem) DrawArc(center Vector2, radius Float, start_angle Float, end_angle Float, point_count Int, color Color, width Float, antialiased bool) {
	self.ptr.API.CanvasItem_draw_arc(self, center, radius, start_angle, end_angle, point_count, color, width, antialiased)
}
func (self classCanvasItem) DrawMultiline(points PackedVector2Array, color Color, width Float) {
	self.ptr.API.CanvasItem_draw_multiline(self, points, color, width)
}
func (self classCanvasItem) DrawMultilineColors(points PackedVector2Array, colors PackedColorArray, width Float) {
	self.ptr.API.CanvasItem_draw_multiline_colors(self, points, colors, width)
}
func (self classCanvasItem) DrawRect(rect Rect2, color Color, filled bool, width Float) {
	self.ptr.API.CanvasItem_draw_rect(self, rect, color, filled, width)
}
func (self classCanvasItem) DrawCircle(position Vector2, radius Float, color Color) {
	self.ptr.API.CanvasItem_draw_circle(self, position, radius, color)
}
func (self classCanvasItem) DrawTexture(texture Texture2D, position Vector2, modulate Color) {
	self.ptr.API.CanvasItem_draw_texture(self, texture, position, modulate)
}
func (self classCanvasItem) DrawTextureRect(texture Texture2D, rect Rect2, tile bool, modulate Color, transpose bool) {
	self.ptr.API.CanvasItem_draw_texture_rect(self, texture, rect, tile, modulate, transpose)
}
func (self classCanvasItem) DrawTextureRectRegion(texture Texture2D, rect Rect2, src_rect Rect2, modulate Color, transpose bool, clip_uv bool) {
	self.ptr.API.CanvasItem_draw_texture_rect_region(self, texture, rect, src_rect, modulate, transpose, clip_uv)
}
func (self classCanvasItem) DrawMsdfTextureRectRegion(texture Texture2D, rect Rect2, src_rect Rect2, modulate Color, outline Float, pixel_range Float, scale Float) {
	self.ptr.API.CanvasItem_draw_msdf_texture_rect_region(self, texture, rect, src_rect, modulate, outline, pixel_range, scale)
}
func (self classCanvasItem) DrawLcdTextureRectRegion(texture Texture2D, rect Rect2, src_rect Rect2, modulate Color) {
	self.ptr.API.CanvasItem_draw_lcd_texture_rect_region(self, texture, rect, src_rect, modulate)
}
func (self classCanvasItem) DrawStyleBox(style_box StyleBox, rect Rect2) {
	self.ptr.API.CanvasItem_draw_style_box(self, style_box, rect)
}
func (self classCanvasItem) DrawPrimitive(points PackedVector2Array, colors PackedColorArray, uvs PackedVector2Array, texture Texture2D) {
	self.ptr.API.CanvasItem_draw_primitive(self, points, colors, uvs, texture)
}
func (self classCanvasItem) DrawPolygon(points PackedVector2Array, colors PackedColorArray, uvs PackedVector2Array, texture Texture2D) {
	self.ptr.API.CanvasItem_draw_polygon(self, points, colors, uvs, texture)
}
func (self classCanvasItem) DrawColoredPolygon(points PackedVector2Array, color Color, uvs PackedVector2Array, texture Texture2D) {
	self.ptr.API.CanvasItem_draw_colored_polygon(self, points, color, uvs, texture)
}
func (self classCanvasItem) DrawString(font Font, pos Vector2, text String, alignment HorizontalAlignment, width Float, font_size Int, modulate Color, justification_flags TextServerJustificationFlag, direction TextServerDirection, orientation TextServerOrientation) {
	self.ptr.API.CanvasItem_draw_string(self, font, pos, text, alignment, width, font_size, modulate, justification_flags, direction, orientation)
}
func (self classCanvasItem) DrawMultilineString(font Font, pos Vector2, text String, alignment HorizontalAlignment, width Float, font_size Int, max_lines Int, modulate Color, brk_flags TextServerLineBreakFlag, justification_flags TextServerJustificationFlag, direction TextServerDirection, orientation TextServerOrientation) {
	self.ptr.API.CanvasItem_draw_multiline_string(self, font, pos, text, alignment, width, font_size, max_lines, modulate, brk_flags, justification_flags, direction, orientation)
}
func (self classCanvasItem) DrawStringOutline(font Font, pos Vector2, text String, alignment HorizontalAlignment, width Float, font_size Int, size Int, modulate Color, justification_flags TextServerJustificationFlag, direction TextServerDirection, orientation TextServerOrientation) {
	self.ptr.API.CanvasItem_draw_string_outline(self, font, pos, text, alignment, width, font_size, size, modulate, justification_flags, direction, orientation)
}
func (self classCanvasItem) DrawMultilineStringOutline(font Font, pos Vector2, text String, alignment HorizontalAlignment, width Float, font_size Int, max_lines Int, size Int, modulate Color, brk_flags TextServerLineBreakFlag, justification_flags TextServerJustificationFlag, direction TextServerDirection, orientation TextServerOrientation) {
	self.ptr.API.CanvasItem_draw_multiline_string_outline(self, font, pos, text, alignment, width, font_size, max_lines, size, modulate, brk_flags, justification_flags, direction, orientation)
}
func (self classCanvasItem) DrawChar(font Font, pos Vector2, char String, font_size Int, modulate Color) {
	self.ptr.API.CanvasItem_draw_char(self, font, pos, char, font_size, modulate)
}
func (self classCanvasItem) DrawCharOutline(font Font, pos Vector2, char String, font_size Int, size Int, modulate Color) {
	self.ptr.API.CanvasItem_draw_char_outline(self, font, pos, char, font_size, size, modulate)
}
func (self classCanvasItem) DrawMesh(mesh Mesh, texture Texture2D, transform Transform2D, modulate Color) {
	self.ptr.API.CanvasItem_draw_mesh(self, mesh, texture, transform, modulate)
}
func (self classCanvasItem) DrawMultimesh(multimesh MultiMesh, texture Texture2D) {
	self.ptr.API.CanvasItem_draw_multimesh(self, multimesh, texture)
}
func (self classCanvasItem) DrawSetTransform(position Vector2, rotation Float, scale Vector2) {
	self.ptr.API.CanvasItem_draw_set_transform(self, position, rotation, scale)
}
func (self classCanvasItem) DrawSetTransformMatrix(xform Transform2D) {
	self.ptr.API.CanvasItem_draw_set_transform_matrix(self, xform)
}
func (self classCanvasItem) DrawAnimationSlice(animation_length Float, slice_begin Float, slice_end Float, offset Float) {
	self.ptr.API.CanvasItem_draw_animation_slice(self, animation_length, slice_begin, slice_end, offset)
}
func (self classCanvasItem) DrawEndAnimation() {
	self.ptr.API.CanvasItem_draw_end_animation(self)
}
func (self classCanvasItem) GetTransform() Transform2D {
	return self.ptr.API.CanvasItem_get_transform(self)
}
func (self classCanvasItem) GetGlobalTransform() Transform2D {
	return self.ptr.API.CanvasItem_get_global_transform(self)
}
func (self classCanvasItem) GetGlobalTransformWithCanvas() Transform2D {
	return self.ptr.API.CanvasItem_get_global_transform_with_canvas(self)
}
func (self classCanvasItem) GetViewportTransform() Transform2D {
	return self.ptr.API.CanvasItem_get_viewport_transform(self)
}
func (self classCanvasItem) GetViewportRect() Rect2 {
	return self.ptr.API.CanvasItem_get_viewport_rect(self)
}
func (self classCanvasItem) GetCanvasTransform() Transform2D {
	return self.ptr.API.CanvasItem_get_canvas_transform(self)
}
func (self classCanvasItem) GetScreenTransform() Transform2D {
	return self.ptr.API.CanvasItem_get_screen_transform(self)
}
func (self classCanvasItem) GetLocalMousePosition() Vector2 {
	return self.ptr.API.CanvasItem_get_local_mouse_position(self)
}
func (self classCanvasItem) GetGlobalMousePosition() Vector2 {
	return self.ptr.API.CanvasItem_get_global_mouse_position(self)
}
func (self classCanvasItem) GetCanvas() RID {
	return self.ptr.API.CanvasItem_get_canvas(self)
}
func (self classCanvasItem) GetWorld2d() World2D {
	return self.ptr.API.CanvasItem_get_world_2d(self)
}
func (self classCanvasItem) SetMaterial(material Material) {
	self.ptr.API.CanvasItem_set_material(self, material)
}
func (self classCanvasItem) GetMaterial() Material {
	return self.ptr.API.CanvasItem_get_material(self)
}
func (self classCanvasItem) SetUseParentMaterial(enable bool) {
	self.ptr.API.CanvasItem_set_use_parent_material(self, enable)
}
func (self classCanvasItem) GetUseParentMaterial() bool {
	return self.ptr.API.CanvasItem_get_use_parent_material(self)
}
func (self classCanvasItem) SetNotifyLocalTransform(enable bool) {
	self.ptr.API.CanvasItem_set_notify_local_transform(self, enable)
}
func (self classCanvasItem) IsLocalTransformNotificationEnabled() bool {
	return self.ptr.API.CanvasItem_is_local_transform_notification_enabled(self)
}
func (self classCanvasItem) SetNotifyTransform(enable bool) {
	self.ptr.API.CanvasItem_set_notify_transform(self, enable)
}
func (self classCanvasItem) IsTransformNotificationEnabled() bool {
	return self.ptr.API.CanvasItem_is_transform_notification_enabled(self)
}
func (self classCanvasItem) ForceUpdateTransform() {
	self.ptr.API.CanvasItem_force_update_transform(self)
}
func (self classCanvasItem) MakeCanvasPositionLocal(screen_point Vector2) Vector2 {
	return self.ptr.API.CanvasItem_make_canvas_position_local(self, screen_point)
}
func (self classCanvasItem) MakeInputLocal(event InputEvent) InputEvent {
	return self.ptr.API.CanvasItem_make_input_local(self, event)
}
func (self classCanvasItem) SetVisibilityLayer(layer Int) {
	self.ptr.API.CanvasItem_set_visibility_layer(self, layer)
}
func (self classCanvasItem) GetVisibilityLayer() Int {
	return self.ptr.API.CanvasItem_get_visibility_layer(self)
}
func (self classCanvasItem) SetVisibilityLayerBit(layer Int, enabled bool) {
	self.ptr.API.CanvasItem_set_visibility_layer_bit(self, layer, enabled)
}
func (self classCanvasItem) GetVisibilityLayerBit(layer Int) bool {
	return self.ptr.API.CanvasItem_get_visibility_layer_bit(self, layer)
}
func (self classCanvasItem) SetTextureFilter(mode CanvasItemTextureFilter) {
	self.ptr.API.CanvasItem_set_texture_filter(self, mode)
}
func (self classCanvasItem) GetTextureFilter() CanvasItemTextureFilter {
	return self.ptr.API.CanvasItem_get_texture_filter(self)
}
func (self classCanvasItem) SetTextureRepeat(mode CanvasItemTextureRepeat) {
	self.ptr.API.CanvasItem_set_texture_repeat(self, mode)
}
func (self classCanvasItem) GetTextureRepeat() CanvasItemTextureRepeat {
	return self.ptr.API.CanvasItem_get_texture_repeat(self)
}
func (self classCanvasItem) SetClipChildrenMode(mode CanvasItemClipChildrenMode) {
	self.ptr.API.CanvasItem_set_clip_children_mode(self, mode)
}
func (self classCanvasItem) GetClipChildrenMode() CanvasItemClipChildrenMode {
	return self.ptr.API.CanvasItem_get_clip_children_mode(self)
}

type classCanvasItemMaterial struct{ Class[classCanvasItemMaterial] }

func (self classCanvasItemMaterial) Super() Material {
	var super Material
	super.ptr = self.ptr
	return super
}

func (self classCanvasItemMaterial) Material() Material { return self.Super() }
func (self classCanvasItemMaterial) SetBlendMode(blend_mode CanvasItemMaterialBlendMode) {
	self.ptr.API.CanvasItemMaterial_set_blend_mode(self, blend_mode)
}
func (self classCanvasItemMaterial) GetBlendMode() CanvasItemMaterialBlendMode {
	return self.ptr.API.CanvasItemMaterial_get_blend_mode(self)
}
func (self classCanvasItemMaterial) SetLightMode(light_mode CanvasItemMaterialLightMode) {
	self.ptr.API.CanvasItemMaterial_set_light_mode(self, light_mode)
}
func (self classCanvasItemMaterial) GetLightMode() CanvasItemMaterialLightMode {
	return self.ptr.API.CanvasItemMaterial_get_light_mode(self)
}
func (self classCanvasItemMaterial) SetParticlesAnimation(particles_anim bool) {
	self.ptr.API.CanvasItemMaterial_set_particles_animation(self, particles_anim)
}
func (self classCanvasItemMaterial) GetParticlesAnimation() bool {
	return self.ptr.API.CanvasItemMaterial_get_particles_animation(self)
}
func (self classCanvasItemMaterial) SetParticlesAnimHFrames(frames Int) {
	self.ptr.API.CanvasItemMaterial_set_particles_anim_h_frames(self, frames)
}
func (self classCanvasItemMaterial) GetParticlesAnimHFrames() Int {
	return self.ptr.API.CanvasItemMaterial_get_particles_anim_h_frames(self)
}
func (self classCanvasItemMaterial) SetParticlesAnimVFrames(frames Int) {
	self.ptr.API.CanvasItemMaterial_set_particles_anim_v_frames(self, frames)
}
func (self classCanvasItemMaterial) GetParticlesAnimVFrames() Int {
	return self.ptr.API.CanvasItemMaterial_get_particles_anim_v_frames(self)
}
func (self classCanvasItemMaterial) SetParticlesAnimLoop(loop bool) {
	self.ptr.API.CanvasItemMaterial_set_particles_anim_loop(self, loop)
}
func (self classCanvasItemMaterial) GetParticlesAnimLoop() bool {
	return self.ptr.API.CanvasItemMaterial_get_particles_anim_loop(self)
}

type classCanvasLayer struct{ Class[classCanvasLayer] }

func (self classCanvasLayer) Super() Node { var super Node; super.ptr = self.ptr; return super }

func (self classCanvasLayer) Node() Node { return self.Super() }
func (self classCanvasLayer) SetLayer(layer Int) {
	self.ptr.API.CanvasLayer_set_layer(self, layer)
}
func (self classCanvasLayer) GetLayer() Int {
	return self.ptr.API.CanvasLayer_get_layer(self)
}
func (self classCanvasLayer) SetVisible(visible bool) {
	self.ptr.API.CanvasLayer_set_visible(self, visible)
}
func (self classCanvasLayer) IsVisible() bool {
	return self.ptr.API.CanvasLayer_is_visible(self)
}
func (self classCanvasLayer) Show() {
	self.ptr.API.CanvasLayer_show(self)
}
func (self classCanvasLayer) Hide() {
	self.ptr.API.CanvasLayer_hide(self)
}
func (self classCanvasLayer) SetTransform(transform Transform2D) {
	self.ptr.API.CanvasLayer_set_transform(self, transform)
}
func (self classCanvasLayer) GetTransform() Transform2D {
	return self.ptr.API.CanvasLayer_get_transform(self)
}
func (self classCanvasLayer) GetFinalTransform() Transform2D {
	return self.ptr.API.CanvasLayer_get_final_transform(self)
}
func (self classCanvasLayer) SetOffset(offset Vector2) {
	self.ptr.API.CanvasLayer_set_offset(self, offset)
}
func (self classCanvasLayer) GetOffset() Vector2 {
	return self.ptr.API.CanvasLayer_get_offset(self)
}
func (self classCanvasLayer) SetRotation(radians Float) {
	self.ptr.API.CanvasLayer_set_rotation(self, radians)
}
func (self classCanvasLayer) GetRotation() Float {
	return self.ptr.API.CanvasLayer_get_rotation(self)
}
func (self classCanvasLayer) SetScale(scale Vector2) {
	self.ptr.API.CanvasLayer_set_scale(self, scale)
}
func (self classCanvasLayer) GetScale() Vector2 {
	return self.ptr.API.CanvasLayer_get_scale(self)
}
func (self classCanvasLayer) SetFollowViewport(enable bool) {
	self.ptr.API.CanvasLayer_set_follow_viewport(self, enable)
}
func (self classCanvasLayer) IsFollowingViewport() bool {
	return self.ptr.API.CanvasLayer_is_following_viewport(self)
}
func (self classCanvasLayer) SetFollowViewportScale(scale Float) {
	self.ptr.API.CanvasLayer_set_follow_viewport_scale(self, scale)
}
func (self classCanvasLayer) GetFollowViewportScale() Float {
	return self.ptr.API.CanvasLayer_get_follow_viewport_scale(self)
}
func (self classCanvasLayer) SetCustomViewport(viewport Node) {
	self.ptr.API.CanvasLayer_set_custom_viewport(self, viewport)
}
func (self classCanvasLayer) GetCustomViewport() Node {
	return self.ptr.API.CanvasLayer_get_custom_viewport(self)
}
func (self classCanvasLayer) GetCanvas() RID {
	return self.ptr.API.CanvasLayer_get_canvas(self)
}

type classCanvasModulate struct{ Class[classCanvasModulate] }

func (self classCanvasModulate) Super() Node2D { var super Node2D; super.ptr = self.ptr; return super }

func (self classCanvasModulate) Node2D() Node2D { return self.Super() }
func (self classCanvasModulate) SetColor(color Color) {
	self.ptr.API.CanvasModulate_set_color(self, color)
}
func (self classCanvasModulate) GetColor() Color {
	return self.ptr.API.CanvasModulate_get_color(self)
}

type classCanvasTexture struct{ Class[classCanvasTexture] }

func (self classCanvasTexture) Super() Texture2D {
	var super Texture2D
	super.ptr = self.ptr
	return super
}

func (self classCanvasTexture) Texture2D() Texture2D { return self.Super() }
func (self classCanvasTexture) SetDiffuseTexture(texture Texture2D) {
	self.ptr.API.CanvasTexture_set_diffuse_texture(self, texture)
}
func (self classCanvasTexture) GetDiffuseTexture() Texture2D {
	return self.ptr.API.CanvasTexture_get_diffuse_texture(self)
}
func (self classCanvasTexture) SetNormalTexture(texture Texture2D) {
	self.ptr.API.CanvasTexture_set_normal_texture(self, texture)
}
func (self classCanvasTexture) GetNormalTexture() Texture2D {
	return self.ptr.API.CanvasTexture_get_normal_texture(self)
}
func (self classCanvasTexture) SetSpecularTexture(texture Texture2D) {
	self.ptr.API.CanvasTexture_set_specular_texture(self, texture)
}
func (self classCanvasTexture) GetSpecularTexture() Texture2D {
	return self.ptr.API.CanvasTexture_get_specular_texture(self)
}
func (self classCanvasTexture) SetSpecularColor(color Color) {
	self.ptr.API.CanvasTexture_set_specular_color(self, color)
}
func (self classCanvasTexture) GetSpecularColor() Color {
	return self.ptr.API.CanvasTexture_get_specular_color(self)
}
func (self classCanvasTexture) SetSpecularShininess(shininess Float) {
	self.ptr.API.CanvasTexture_set_specular_shininess(self, shininess)
}
func (self classCanvasTexture) GetSpecularShininess() Float {
	return self.ptr.API.CanvasTexture_get_specular_shininess(self)
}
func (self classCanvasTexture) SetTextureFilter(filter CanvasItemTextureFilter) {
	self.ptr.API.CanvasTexture_set_texture_filter(self, filter)
}
func (self classCanvasTexture) GetTextureFilter() CanvasItemTextureFilter {
	return self.ptr.API.CanvasTexture_get_texture_filter(self)
}
func (self classCanvasTexture) SetTextureRepeat(repeat CanvasItemTextureRepeat) {
	self.ptr.API.CanvasTexture_set_texture_repeat(self, repeat)
}
func (self classCanvasTexture) GetTextureRepeat() CanvasItemTextureRepeat {
	return self.ptr.API.CanvasTexture_get_texture_repeat(self)
}

type classCapsuleMesh struct{ Class[classCapsuleMesh] }

func (self classCapsuleMesh) Super() PrimitiveMesh {
	var super PrimitiveMesh
	super.ptr = self.ptr
	return super
}

func (self classCapsuleMesh) PrimitiveMesh() PrimitiveMesh { return self.Super() }
func (self classCapsuleMesh) SetRadius(radius Float) {
	self.ptr.API.CapsuleMesh_set_radius(self, radius)
}
func (self classCapsuleMesh) GetRadius() Float {
	return self.ptr.API.CapsuleMesh_get_radius(self)
}
func (self classCapsuleMesh) SetHeight(height Float) {
	self.ptr.API.CapsuleMesh_set_height(self, height)
}
func (self classCapsuleMesh) GetHeight() Float {
	return self.ptr.API.CapsuleMesh_get_height(self)
}
func (self classCapsuleMesh) SetRadialSegments(segments Int) {
	self.ptr.API.CapsuleMesh_set_radial_segments(self, segments)
}
func (self classCapsuleMesh) GetRadialSegments() Int {
	return self.ptr.API.CapsuleMesh_get_radial_segments(self)
}
func (self classCapsuleMesh) SetRings(rings Int) {
	self.ptr.API.CapsuleMesh_set_rings(self, rings)
}
func (self classCapsuleMesh) GetRings() Int {
	return self.ptr.API.CapsuleMesh_get_rings(self)
}

type classCapsuleShape2D struct{ Class[classCapsuleShape2D] }

func (self classCapsuleShape2D) Super() Shape2D {
	var super Shape2D
	super.ptr = self.ptr
	return super
}

func (self classCapsuleShape2D) Shape2D() Shape2D { return self.Super() }
func (self classCapsuleShape2D) SetRadius(radius Float) {
	self.ptr.API.CapsuleShape2D_set_radius(self, radius)
}
func (self classCapsuleShape2D) GetRadius() Float {
	return self.ptr.API.CapsuleShape2D_get_radius(self)
}
func (self classCapsuleShape2D) SetHeight(height Float) {
	self.ptr.API.CapsuleShape2D_set_height(self, height)
}
func (self classCapsuleShape2D) GetHeight() Float {
	return self.ptr.API.CapsuleShape2D_get_height(self)
}

type classCapsuleShape3D struct{ Class[classCapsuleShape3D] }

func (self classCapsuleShape3D) Super() Shape3D {
	var super Shape3D
	super.ptr = self.ptr
	return super
}

func (self classCapsuleShape3D) Shape3D() Shape3D { return self.Super() }
func (self classCapsuleShape3D) SetRadius(radius Float) {
	self.ptr.API.CapsuleShape3D_set_radius(self, radius)
}
func (self classCapsuleShape3D) GetRadius() Float {
	return self.ptr.API.CapsuleShape3D_get_radius(self)
}
func (self classCapsuleShape3D) SetHeight(height Float) {
	self.ptr.API.CapsuleShape3D_set_height(self, height)
}
func (self classCapsuleShape3D) GetHeight() Float {
	return self.ptr.API.CapsuleShape3D_get_height(self)
}

type classCenterContainer struct{ Class[classCenterContainer] }

func (self classCenterContainer) Super() Container {
	var super Container
	super.ptr = self.ptr
	return super
}

func (self classCenterContainer) Container() Container { return self.Super() }
func (self classCenterContainer) SetUseTopLeft(enable bool) {
	self.ptr.API.CenterContainer_set_use_top_left(self, enable)
}
func (self classCenterContainer) IsUsingTopLeft() bool {
	return self.ptr.API.CenterContainer_is_using_top_left(self)
}

type classCharFXTransform struct{ Class[classCharFXTransform] }

func (self classCharFXTransform) Super() RefCounted {
	var super RefCounted
	super.ptr = self.ptr
	return super
}

func (self classCharFXTransform) RefCounted() RefCounted { return self.Super() }
func (self classCharFXTransform) GetTransform() Transform2D {
	return self.ptr.API.CharFXTransform_get_transform(self)
}
func (self classCharFXTransform) SetTransform(transform Transform2D) {
	self.ptr.API.CharFXTransform_set_transform(self, transform)
}
func (self classCharFXTransform) GetRange() Vector2i {
	return self.ptr.API.CharFXTransform_get_range(self)
}
func (self classCharFXTransform) SetRange(arange Vector2i) {
	self.ptr.API.CharFXTransform_set_range(self, arange)
}
func (self classCharFXTransform) GetElapsedTime() Float {
	return self.ptr.API.CharFXTransform_get_elapsed_time(self)
}
func (self classCharFXTransform) SetElapsedTime(time Float) {
	self.ptr.API.CharFXTransform_set_elapsed_time(self, time)
}
func (self classCharFXTransform) IsVisible() bool {
	return self.ptr.API.CharFXTransform_is_visible(self)
}
func (self classCharFXTransform) SetVisibility(visibility bool) {
	self.ptr.API.CharFXTransform_set_visibility(self, visibility)
}
func (self classCharFXTransform) IsOutline() bool {
	return self.ptr.API.CharFXTransform_is_outline(self)
}
func (self classCharFXTransform) SetOutline(outline bool) {
	self.ptr.API.CharFXTransform_set_outline(self, outline)
}
func (self classCharFXTransform) GetOffset() Vector2 {
	return self.ptr.API.CharFXTransform_get_offset(self)
}
func (self classCharFXTransform) SetOffset(offset Vector2) {
	self.ptr.API.CharFXTransform_set_offset(self, offset)
}
func (self classCharFXTransform) GetColor() Color {
	return self.ptr.API.CharFXTransform_get_color(self)
}
func (self classCharFXTransform) SetColor(color Color) {
	self.ptr.API.CharFXTransform_set_color(self, color)
}
func (self classCharFXTransform) GetEnvironment() Dictionary {
	return self.ptr.API.CharFXTransform_get_environment(self)
}
func (self classCharFXTransform) SetEnvironment(environment Dictionary) {
	self.ptr.API.CharFXTransform_set_environment(self, environment)
}
func (self classCharFXTransform) GetGlyphIndex() Int {
	return self.ptr.API.CharFXTransform_get_glyph_index(self)
}
func (self classCharFXTransform) SetGlyphIndex(glyph_index Int) {
	self.ptr.API.CharFXTransform_set_glyph_index(self, glyph_index)
}
func (self classCharFXTransform) GetRelativeIndex() Int {
	return self.ptr.API.CharFXTransform_get_relative_index(self)
}
func (self classCharFXTransform) SetRelativeIndex(relative_index Int) {
	self.ptr.API.CharFXTransform_set_relative_index(self, relative_index)
}
func (self classCharFXTransform) GetGlyphCount() Int {
	return self.ptr.API.CharFXTransform_get_glyph_count(self)
}
func (self classCharFXTransform) SetGlyphCount(glyph_count Int) {
	self.ptr.API.CharFXTransform_set_glyph_count(self, glyph_count)
}
func (self classCharFXTransform) GetGlyphFlags() Int {
	return self.ptr.API.CharFXTransform_get_glyph_flags(self)
}
func (self classCharFXTransform) SetGlyphFlags(glyph_flags Int) {
	self.ptr.API.CharFXTransform_set_glyph_flags(self, glyph_flags)
}
func (self classCharFXTransform) GetFont() RID {
	return self.ptr.API.CharFXTransform_get_font(self)
}
func (self classCharFXTransform) SetFont(font RID) {
	self.ptr.API.CharFXTransform_set_font(self, font)
}

type classCharacterBody2D struct{ Class[classCharacterBody2D] }

func (self classCharacterBody2D) Super() PhysicsBody2D {
	var super PhysicsBody2D
	super.ptr = self.ptr
	return super
}

func (self classCharacterBody2D) PhysicsBody2D() PhysicsBody2D { return self.Super() }
func (self classCharacterBody2D) MoveAndSlide() bool {
	return self.ptr.API.CharacterBody2D_move_and_slide(self)
}
func (self classCharacterBody2D) ApplyFloorSnap() {
	self.ptr.API.CharacterBody2D_apply_floor_snap(self)
}
func (self classCharacterBody2D) SetVelocity(velocity Vector2) {
	self.ptr.API.CharacterBody2D_set_velocity(self, velocity)
}
func (self classCharacterBody2D) GetVelocity() Vector2 {
	return self.ptr.API.CharacterBody2D_get_velocity(self)
}
func (self classCharacterBody2D) SetSafeMargin(margin Float) {
	self.ptr.API.CharacterBody2D_set_safe_margin(self, margin)
}
func (self classCharacterBody2D) GetSafeMargin() Float {
	return self.ptr.API.CharacterBody2D_get_safe_margin(self)
}
func (self classCharacterBody2D) IsFloorStopOnSlopeEnabled() bool {
	return self.ptr.API.CharacterBody2D_is_floor_stop_on_slope_enabled(self)
}
func (self classCharacterBody2D) SetFloorStopOnSlopeEnabled(enabled bool) {
	self.ptr.API.CharacterBody2D_set_floor_stop_on_slope_enabled(self, enabled)
}
func (self classCharacterBody2D) SetFloorConstantSpeedEnabled(enabled bool) {
	self.ptr.API.CharacterBody2D_set_floor_constant_speed_enabled(self, enabled)
}
func (self classCharacterBody2D) IsFloorConstantSpeedEnabled() bool {
	return self.ptr.API.CharacterBody2D_is_floor_constant_speed_enabled(self)
}
func (self classCharacterBody2D) SetFloorBlockOnWallEnabled(enabled bool) {
	self.ptr.API.CharacterBody2D_set_floor_block_on_wall_enabled(self, enabled)
}
func (self classCharacterBody2D) IsFloorBlockOnWallEnabled() bool {
	return self.ptr.API.CharacterBody2D_is_floor_block_on_wall_enabled(self)
}
func (self classCharacterBody2D) SetSlideOnCeilingEnabled(enabled bool) {
	self.ptr.API.CharacterBody2D_set_slide_on_ceiling_enabled(self, enabled)
}
func (self classCharacterBody2D) IsSlideOnCeilingEnabled() bool {
	return self.ptr.API.CharacterBody2D_is_slide_on_ceiling_enabled(self)
}
func (self classCharacterBody2D) SetPlatformFloorLayers(exclude_layer Int) {
	self.ptr.API.CharacterBody2D_set_platform_floor_layers(self, exclude_layer)
}
func (self classCharacterBody2D) GetPlatformFloorLayers() Int {
	return self.ptr.API.CharacterBody2D_get_platform_floor_layers(self)
}
func (self classCharacterBody2D) SetPlatformWallLayers(exclude_layer Int) {
	self.ptr.API.CharacterBody2D_set_platform_wall_layers(self, exclude_layer)
}
func (self classCharacterBody2D) GetPlatformWallLayers() Int {
	return self.ptr.API.CharacterBody2D_get_platform_wall_layers(self)
}
func (self classCharacterBody2D) GetMaxSlides() Int {
	return self.ptr.API.CharacterBody2D_get_max_slides(self)
}
func (self classCharacterBody2D) SetMaxSlides(max_slides Int) {
	self.ptr.API.CharacterBody2D_set_max_slides(self, max_slides)
}
func (self classCharacterBody2D) GetFloorMaxAngle() Float {
	return self.ptr.API.CharacterBody2D_get_floor_max_angle(self)
}
func (self classCharacterBody2D) SetFloorMaxAngle(radians Float) {
	self.ptr.API.CharacterBody2D_set_floor_max_angle(self, radians)
}
func (self classCharacterBody2D) GetFloorSnapLength() Float {
	return self.ptr.API.CharacterBody2D_get_floor_snap_length(self)
}
func (self classCharacterBody2D) SetFloorSnapLength(floor_snap_length Float) {
	self.ptr.API.CharacterBody2D_set_floor_snap_length(self, floor_snap_length)
}
func (self classCharacterBody2D) GetWallMinSlideAngle() Float {
	return self.ptr.API.CharacterBody2D_get_wall_min_slide_angle(self)
}
func (self classCharacterBody2D) SetWallMinSlideAngle(radians Float) {
	self.ptr.API.CharacterBody2D_set_wall_min_slide_angle(self, radians)
}
func (self classCharacterBody2D) GetUpDirection() Vector2 {
	return self.ptr.API.CharacterBody2D_get_up_direction(self)
}
func (self classCharacterBody2D) SetUpDirection(up_direction Vector2) {
	self.ptr.API.CharacterBody2D_set_up_direction(self, up_direction)
}
func (self classCharacterBody2D) SetMotionMode(mode CharacterBody2DMotionMode) {
	self.ptr.API.CharacterBody2D_set_motion_mode(self, mode)
}
func (self classCharacterBody2D) GetMotionMode() CharacterBody2DMotionMode {
	return self.ptr.API.CharacterBody2D_get_motion_mode(self)
}
func (self classCharacterBody2D) SetPlatformOnLeave(on_leave_apply_velocity CharacterBody2DPlatformOnLeave) {
	self.ptr.API.CharacterBody2D_set_platform_on_leave(self, on_leave_apply_velocity)
}
func (self classCharacterBody2D) GetPlatformOnLeave() CharacterBody2DPlatformOnLeave {
	return self.ptr.API.CharacterBody2D_get_platform_on_leave(self)
}
func (self classCharacterBody2D) IsOnFloor() bool {
	return self.ptr.API.CharacterBody2D_is_on_floor(self)
}
func (self classCharacterBody2D) IsOnFloorOnly() bool {
	return self.ptr.API.CharacterBody2D_is_on_floor_only(self)
}
func (self classCharacterBody2D) IsOnCeiling() bool {
	return self.ptr.API.CharacterBody2D_is_on_ceiling(self)
}
func (self classCharacterBody2D) IsOnCeilingOnly() bool {
	return self.ptr.API.CharacterBody2D_is_on_ceiling_only(self)
}
func (self classCharacterBody2D) IsOnWall() bool {
	return self.ptr.API.CharacterBody2D_is_on_wall(self)
}
func (self classCharacterBody2D) IsOnWallOnly() bool {
	return self.ptr.API.CharacterBody2D_is_on_wall_only(self)
}
func (self classCharacterBody2D) GetFloorNormal() Vector2 {
	return self.ptr.API.CharacterBody2D_get_floor_normal(self)
}
func (self classCharacterBody2D) GetWallNormal() Vector2 {
	return self.ptr.API.CharacterBody2D_get_wall_normal(self)
}
func (self classCharacterBody2D) GetLastMotion() Vector2 {
	return self.ptr.API.CharacterBody2D_get_last_motion(self)
}
func (self classCharacterBody2D) GetPositionDelta() Vector2 {
	return self.ptr.API.CharacterBody2D_get_position_delta(self)
}
func (self classCharacterBody2D) GetRealVelocity() Vector2 {
	return self.ptr.API.CharacterBody2D_get_real_velocity(self)
}
func (self classCharacterBody2D) GetFloorAngle(up_direction Vector2) Float {
	return self.ptr.API.CharacterBody2D_get_floor_angle(self, up_direction)
}
func (self classCharacterBody2D) GetPlatformVelocity() Vector2 {
	return self.ptr.API.CharacterBody2D_get_platform_velocity(self)
}
func (self classCharacterBody2D) GetSlideCollisionCount() Int {
	return self.ptr.API.CharacterBody2D_get_slide_collision_count(self)
}
func (self classCharacterBody2D) GetSlideCollision(slide_idx Int) KinematicCollision2D {
	return self.ptr.API.CharacterBody2D_get_slide_collision(self, slide_idx)
}
func (self classCharacterBody2D) GetLastSlideCollision() KinematicCollision2D {
	return self.ptr.API.CharacterBody2D_get_last_slide_collision(self)
}

type classCharacterBody3D struct{ Class[classCharacterBody3D] }

func (self classCharacterBody3D) Super() PhysicsBody3D {
	var super PhysicsBody3D
	super.ptr = self.ptr
	return super
}

func (self classCharacterBody3D) PhysicsBody3D() PhysicsBody3D { return self.Super() }
func (self classCharacterBody3D) MoveAndSlide() bool {
	return self.ptr.API.CharacterBody3D_move_and_slide(self)
}
func (self classCharacterBody3D) ApplyFloorSnap() {
	self.ptr.API.CharacterBody3D_apply_floor_snap(self)
}
func (self classCharacterBody3D) SetVelocity(velocity Vector3) {
	self.ptr.API.CharacterBody3D_set_velocity(self, velocity)
}
func (self classCharacterBody3D) GetVelocity() Vector3 {
	return self.ptr.API.CharacterBody3D_get_velocity(self)
}
func (self classCharacterBody3D) SetSafeMargin(margin Float) {
	self.ptr.API.CharacterBody3D_set_safe_margin(self, margin)
}
func (self classCharacterBody3D) GetSafeMargin() Float {
	return self.ptr.API.CharacterBody3D_get_safe_margin(self)
}
func (self classCharacterBody3D) IsFloorStopOnSlopeEnabled() bool {
	return self.ptr.API.CharacterBody3D_is_floor_stop_on_slope_enabled(self)
}
func (self classCharacterBody3D) SetFloorStopOnSlopeEnabled(enabled bool) {
	self.ptr.API.CharacterBody3D_set_floor_stop_on_slope_enabled(self, enabled)
}
func (self classCharacterBody3D) SetFloorConstantSpeedEnabled(enabled bool) {
	self.ptr.API.CharacterBody3D_set_floor_constant_speed_enabled(self, enabled)
}
func (self classCharacterBody3D) IsFloorConstantSpeedEnabled() bool {
	return self.ptr.API.CharacterBody3D_is_floor_constant_speed_enabled(self)
}
func (self classCharacterBody3D) SetFloorBlockOnWallEnabled(enabled bool) {
	self.ptr.API.CharacterBody3D_set_floor_block_on_wall_enabled(self, enabled)
}
func (self classCharacterBody3D) IsFloorBlockOnWallEnabled() bool {
	return self.ptr.API.CharacterBody3D_is_floor_block_on_wall_enabled(self)
}
func (self classCharacterBody3D) SetSlideOnCeilingEnabled(enabled bool) {
	self.ptr.API.CharacterBody3D_set_slide_on_ceiling_enabled(self, enabled)
}
func (self classCharacterBody3D) IsSlideOnCeilingEnabled() bool {
	return self.ptr.API.CharacterBody3D_is_slide_on_ceiling_enabled(self)
}
func (self classCharacterBody3D) SetPlatformFloorLayers(exclude_layer Int) {
	self.ptr.API.CharacterBody3D_set_platform_floor_layers(self, exclude_layer)
}
func (self classCharacterBody3D) GetPlatformFloorLayers() Int {
	return self.ptr.API.CharacterBody3D_get_platform_floor_layers(self)
}
func (self classCharacterBody3D) SetPlatformWallLayers(exclude_layer Int) {
	self.ptr.API.CharacterBody3D_set_platform_wall_layers(self, exclude_layer)
}
func (self classCharacterBody3D) GetPlatformWallLayers() Int {
	return self.ptr.API.CharacterBody3D_get_platform_wall_layers(self)
}
func (self classCharacterBody3D) GetMaxSlides() Int {
	return self.ptr.API.CharacterBody3D_get_max_slides(self)
}
func (self classCharacterBody3D) SetMaxSlides(max_slides Int) {
	self.ptr.API.CharacterBody3D_set_max_slides(self, max_slides)
}
func (self classCharacterBody3D) GetFloorMaxAngle() Float {
	return self.ptr.API.CharacterBody3D_get_floor_max_angle(self)
}
func (self classCharacterBody3D) SetFloorMaxAngle(radians Float) {
	self.ptr.API.CharacterBody3D_set_floor_max_angle(self, radians)
}
func (self classCharacterBody3D) GetFloorSnapLength() Float {
	return self.ptr.API.CharacterBody3D_get_floor_snap_length(self)
}
func (self classCharacterBody3D) SetFloorSnapLength(floor_snap_length Float) {
	self.ptr.API.CharacterBody3D_set_floor_snap_length(self, floor_snap_length)
}
func (self classCharacterBody3D) GetWallMinSlideAngle() Float {
	return self.ptr.API.CharacterBody3D_get_wall_min_slide_angle(self)
}
func (self classCharacterBody3D) SetWallMinSlideAngle(radians Float) {
	self.ptr.API.CharacterBody3D_set_wall_min_slide_angle(self, radians)
}
func (self classCharacterBody3D) GetUpDirection() Vector3 {
	return self.ptr.API.CharacterBody3D_get_up_direction(self)
}
func (self classCharacterBody3D) SetUpDirection(up_direction Vector3) {
	self.ptr.API.CharacterBody3D_set_up_direction(self, up_direction)
}
func (self classCharacterBody3D) SetMotionMode(mode CharacterBody3DMotionMode) {
	self.ptr.API.CharacterBody3D_set_motion_mode(self, mode)
}
func (self classCharacterBody3D) GetMotionMode() CharacterBody3DMotionMode {
	return self.ptr.API.CharacterBody3D_get_motion_mode(self)
}
func (self classCharacterBody3D) SetPlatformOnLeave(on_leave_apply_velocity CharacterBody3DPlatformOnLeave) {
	self.ptr.API.CharacterBody3D_set_platform_on_leave(self, on_leave_apply_velocity)
}
func (self classCharacterBody3D) GetPlatformOnLeave() CharacterBody3DPlatformOnLeave {
	return self.ptr.API.CharacterBody3D_get_platform_on_leave(self)
}
func (self classCharacterBody3D) IsOnFloor() bool {
	return self.ptr.API.CharacterBody3D_is_on_floor(self)
}
func (self classCharacterBody3D) IsOnFloorOnly() bool {
	return self.ptr.API.CharacterBody3D_is_on_floor_only(self)
}
func (self classCharacterBody3D) IsOnCeiling() bool {
	return self.ptr.API.CharacterBody3D_is_on_ceiling(self)
}
func (self classCharacterBody3D) IsOnCeilingOnly() bool {
	return self.ptr.API.CharacterBody3D_is_on_ceiling_only(self)
}
func (self classCharacterBody3D) IsOnWall() bool {
	return self.ptr.API.CharacterBody3D_is_on_wall(self)
}
func (self classCharacterBody3D) IsOnWallOnly() bool {
	return self.ptr.API.CharacterBody3D_is_on_wall_only(self)
}
func (self classCharacterBody3D) GetFloorNormal() Vector3 {
	return self.ptr.API.CharacterBody3D_get_floor_normal(self)
}
func (self classCharacterBody3D) GetWallNormal() Vector3 {
	return self.ptr.API.CharacterBody3D_get_wall_normal(self)
}
func (self classCharacterBody3D) GetLastMotion() Vector3 {
	return self.ptr.API.CharacterBody3D_get_last_motion(self)
}
func (self classCharacterBody3D) GetPositionDelta() Vector3 {
	return self.ptr.API.CharacterBody3D_get_position_delta(self)
}
func (self classCharacterBody3D) GetRealVelocity() Vector3 {
	return self.ptr.API.CharacterBody3D_get_real_velocity(self)
}
func (self classCharacterBody3D) GetFloorAngle(up_direction Vector3) Float {
	return self.ptr.API.CharacterBody3D_get_floor_angle(self, up_direction)
}
func (self classCharacterBody3D) GetPlatformVelocity() Vector3 {
	return self.ptr.API.CharacterBody3D_get_platform_velocity(self)
}
func (self classCharacterBody3D) GetPlatformAngularVelocity() Vector3 {
	return self.ptr.API.CharacterBody3D_get_platform_angular_velocity(self)
}
func (self classCharacterBody3D) GetSlideCollisionCount() Int {
	return self.ptr.API.CharacterBody3D_get_slide_collision_count(self)
}
func (self classCharacterBody3D) GetSlideCollision(slide_idx Int) KinematicCollision3D {
	return self.ptr.API.CharacterBody3D_get_slide_collision(self, slide_idx)
}
func (self classCharacterBody3D) GetLastSlideCollision() KinematicCollision3D {
	return self.ptr.API.CharacterBody3D_get_last_slide_collision(self)
}

type classCheckBox struct{ Class[classCheckBox] }

func (self classCheckBox) Super() Button { var super Button; super.ptr = self.ptr; return super }

func (self classCheckBox) Button() Button { return self.Super() }

type classCheckButton struct{ Class[classCheckButton] }

func (self classCheckButton) Super() Button { var super Button; super.ptr = self.ptr; return super }

func (self classCheckButton) Button() Button { return self.Super() }

type classCircleShape2D struct{ Class[classCircleShape2D] }

func (self classCircleShape2D) Super() Shape2D { var super Shape2D; super.ptr = self.ptr; return super }

func (self classCircleShape2D) Shape2D() Shape2D { return self.Super() }
func (self classCircleShape2D) SetRadius(radius Float) {
	self.ptr.API.CircleShape2D_set_radius(self, radius)
}
func (self classCircleShape2D) GetRadius() Float {
	return self.ptr.API.CircleShape2D_get_radius(self)
}

type classClassDB struct{ Class[classClassDB] }

func (self classClassDB) Super() Object { var super Object; super.ptr = self.ptr; return super }

func (self classClassDB) Object() Object { return self.Super() }

func (self classClassDB) isSingleton() {}
func (self classClassDB) GetClassList() PackedStringArray {
	return self.ptr.API.ClassDB_get_class_list(self)
}
func (self classClassDB) GetInheritersFromClass(class StringName) PackedStringArray {
	return self.ptr.API.ClassDB_get_inheriters_from_class(self, class)
}
func (self classClassDB) GetParentClass(class StringName) StringName {
	return self.ptr.API.ClassDB_get_parent_class(self, class)
}
func (self classClassDB) ClassExists(class StringName) bool {
	return self.ptr.API.ClassDB_class_exists(self, class)
}
func (self classClassDB) IsParentClass(class StringName, inherits StringName) bool {
	return self.ptr.API.ClassDB_is_parent_class(self, class, inherits)
}
func (self classClassDB) CanInstantiate(class StringName) bool {
	return self.ptr.API.ClassDB_can_instantiate(self, class)
}
func (self classClassDB) Instantiate(class StringName) Variant {
	return self.ptr.API.ClassDB_instantiate(self, class)
}
func (self classClassDB) ClassHasSignal(class StringName, signal StringName) bool {
	return self.ptr.API.ClassDB_class_has_signal(self, class, signal)
}
func (self classClassDB) ClassGetSignal(class StringName, signal StringName) Dictionary {
	return self.ptr.API.ClassDB_class_get_signal(self, class, signal)
}
func (self classClassDB) ClassGetSignalList(class StringName, no_inheritance bool) ArrayOf[Dictionary] {
	return self.ptr.API.ClassDB_class_get_signal_list(self, class, no_inheritance)
}
func (self classClassDB) ClassGetPropertyList(class StringName, no_inheritance bool) ArrayOf[Dictionary] {
	return self.ptr.API.ClassDB_class_get_property_list(self, class, no_inheritance)
}
func (self classClassDB) ClassGetProperty(object Object, property StringName) Variant {
	return self.ptr.API.ClassDB_class_get_property(self, object, property)
}
func (self classClassDB) ClassSetProperty(object Object, property StringName, value Variant) int64 {
	return self.ptr.API.ClassDB_class_set_property(self, object, property, value)
}
func (self classClassDB) ClassHasMethod(class StringName, method StringName, no_inheritance bool) bool {
	return self.ptr.API.ClassDB_class_has_method(self, class, method, no_inheritance)
}
func (self classClassDB) ClassGetMethodList(class StringName, no_inheritance bool) ArrayOf[Dictionary] {
	return self.ptr.API.ClassDB_class_get_method_list(self, class, no_inheritance)
}
func (self classClassDB) ClassGetIntegerConstantList(class StringName, no_inheritance bool) PackedStringArray {
	return self.ptr.API.ClassDB_class_get_integer_constant_list(self, class, no_inheritance)
}
func (self classClassDB) ClassHasIntegerConstant(class StringName, name StringName) bool {
	return self.ptr.API.ClassDB_class_has_integer_constant(self, class, name)
}
func (self classClassDB) ClassGetIntegerConstant(class StringName, name StringName) Int {
	return self.ptr.API.ClassDB_class_get_integer_constant(self, class, name)
}
func (self classClassDB) ClassHasEnum(class StringName, name StringName, no_inheritance bool) bool {
	return self.ptr.API.ClassDB_class_has_enum(self, class, name, no_inheritance)
}
func (self classClassDB) ClassGetEnumList(class StringName, no_inheritance bool) PackedStringArray {
	return self.ptr.API.ClassDB_class_get_enum_list(self, class, no_inheritance)
}
func (self classClassDB) ClassGetEnumConstants(class StringName, enum StringName, no_inheritance bool) PackedStringArray {
	return self.ptr.API.ClassDB_class_get_enum_constants(self, class, enum, no_inheritance)
}
func (self classClassDB) ClassGetIntegerConstantEnum(class StringName, name StringName, no_inheritance bool) StringName {
	return self.ptr.API.ClassDB_class_get_integer_constant_enum(self, class, name, no_inheritance)
}
func (self classClassDB) IsClassEnabled(class StringName) bool {
	return self.ptr.API.ClassDB_is_class_enabled(self, class)
}

type classCodeEdit struct{ Class[classCodeEdit] }

func (self classCodeEdit) Super() TextEdit { var super TextEdit; super.ptr = self.ptr; return super }

func (self classCodeEdit) TextEdit() TextEdit { return self.Super() }
func (self classCodeEdit) SetIndentSize(size Int) {
	self.ptr.API.CodeEdit_set_indent_size(self, size)
}
func (self classCodeEdit) GetIndentSize() Int {
	return self.ptr.API.CodeEdit_get_indent_size(self)
}
func (self classCodeEdit) SetIndentUsingSpaces(use_spaces bool) {
	self.ptr.API.CodeEdit_set_indent_using_spaces(self, use_spaces)
}
func (self classCodeEdit) IsIndentUsingSpaces() bool {
	return self.ptr.API.CodeEdit_is_indent_using_spaces(self)
}
func (self classCodeEdit) SetAutoIndentEnabled(enable bool) {
	self.ptr.API.CodeEdit_set_auto_indent_enabled(self, enable)
}
func (self classCodeEdit) IsAutoIndentEnabled() bool {
	return self.ptr.API.CodeEdit_is_auto_indent_enabled(self)
}
func (self classCodeEdit) SetAutoIndentPrefixes(prefixes ArrayOf[String]) {
	self.ptr.API.CodeEdit_set_auto_indent_prefixes(self, prefixes)
}
func (self classCodeEdit) GetAutoIndentPrefixes() ArrayOf[String] {
	return self.ptr.API.CodeEdit_get_auto_indent_prefixes(self)
}
func (self classCodeEdit) DoIndent() {
	self.ptr.API.CodeEdit_do_indent(self)
}
func (self classCodeEdit) IndentLines() {
	self.ptr.API.CodeEdit_indent_lines(self)
}
func (self classCodeEdit) UnindentLines() {
	self.ptr.API.CodeEdit_unindent_lines(self)
}
func (self classCodeEdit) ConvertIndent(from_line Int, to_line Int) {
	self.ptr.API.CodeEdit_convert_indent(self, from_line, to_line)
}
func (self classCodeEdit) SetAutoBraceCompletionEnabled(enable bool) {
	self.ptr.API.CodeEdit_set_auto_brace_completion_enabled(self, enable)
}
func (self classCodeEdit) IsAutoBraceCompletionEnabled() bool {
	return self.ptr.API.CodeEdit_is_auto_brace_completion_enabled(self)
}
func (self classCodeEdit) SetHighlightMatchingBracesEnabled(enable bool) {
	self.ptr.API.CodeEdit_set_highlight_matching_braces_enabled(self, enable)
}
func (self classCodeEdit) IsHighlightMatchingBracesEnabled() bool {
	return self.ptr.API.CodeEdit_is_highlight_matching_braces_enabled(self)
}
func (self classCodeEdit) AddAutoBraceCompletionPair(start_key String, end_key String) {
	self.ptr.API.CodeEdit_add_auto_brace_completion_pair(self, start_key, end_key)
}
func (self classCodeEdit) SetAutoBraceCompletionPairs(pairs Dictionary) {
	self.ptr.API.CodeEdit_set_auto_brace_completion_pairs(self, pairs)
}
func (self classCodeEdit) GetAutoBraceCompletionPairs() Dictionary {
	return self.ptr.API.CodeEdit_get_auto_brace_completion_pairs(self)
}
func (self classCodeEdit) HasAutoBraceCompletionOpenKey(open_key String) bool {
	return self.ptr.API.CodeEdit_has_auto_brace_completion_open_key(self, open_key)
}
func (self classCodeEdit) HasAutoBraceCompletionCloseKey(close_key String) bool {
	return self.ptr.API.CodeEdit_has_auto_brace_completion_close_key(self, close_key)
}
func (self classCodeEdit) GetAutoBraceCompletionCloseKey(open_key String) String {
	return self.ptr.API.CodeEdit_get_auto_brace_completion_close_key(self, open_key)
}
func (self classCodeEdit) SetDrawBreakpointsGutter(enable bool) {
	self.ptr.API.CodeEdit_set_draw_breakpoints_gutter(self, enable)
}
func (self classCodeEdit) IsDrawingBreakpointsGutter() bool {
	return self.ptr.API.CodeEdit_is_drawing_breakpoints_gutter(self)
}
func (self classCodeEdit) SetDrawBookmarksGutter(enable bool) {
	self.ptr.API.CodeEdit_set_draw_bookmarks_gutter(self, enable)
}
func (self classCodeEdit) IsDrawingBookmarksGutter() bool {
	return self.ptr.API.CodeEdit_is_drawing_bookmarks_gutter(self)
}
func (self classCodeEdit) SetDrawExecutingLinesGutter(enable bool) {
	self.ptr.API.CodeEdit_set_draw_executing_lines_gutter(self, enable)
}
func (self classCodeEdit) IsDrawingExecutingLinesGutter() bool {
	return self.ptr.API.CodeEdit_is_drawing_executing_lines_gutter(self)
}
func (self classCodeEdit) SetLineAsBreakpoint(line Int, breakpointed bool) {
	self.ptr.API.CodeEdit_set_line_as_breakpoint(self, line, breakpointed)
}
func (self classCodeEdit) IsLineBreakpointed(line Int) bool {
	return self.ptr.API.CodeEdit_is_line_breakpointed(self, line)
}
func (self classCodeEdit) ClearBreakpointedLines() {
	self.ptr.API.CodeEdit_clear_breakpointed_lines(self)
}
func (self classCodeEdit) GetBreakpointedLines() PackedInt32Array {
	return self.ptr.API.CodeEdit_get_breakpointed_lines(self)
}
func (self classCodeEdit) SetLineAsBookmarked(line Int, bookmarked bool) {
	self.ptr.API.CodeEdit_set_line_as_bookmarked(self, line, bookmarked)
}
func (self classCodeEdit) IsLineBookmarked(line Int) bool {
	return self.ptr.API.CodeEdit_is_line_bookmarked(self, line)
}
func (self classCodeEdit) ClearBookmarkedLines() {
	self.ptr.API.CodeEdit_clear_bookmarked_lines(self)
}
func (self classCodeEdit) GetBookmarkedLines() PackedInt32Array {
	return self.ptr.API.CodeEdit_get_bookmarked_lines(self)
}
func (self classCodeEdit) SetLineAsExecuting(line Int, executing bool) {
	self.ptr.API.CodeEdit_set_line_as_executing(self, line, executing)
}
func (self classCodeEdit) IsLineExecuting(line Int) bool {
	return self.ptr.API.CodeEdit_is_line_executing(self, line)
}
func (self classCodeEdit) ClearExecutingLines() {
	self.ptr.API.CodeEdit_clear_executing_lines(self)
}
func (self classCodeEdit) GetExecutingLines() PackedInt32Array {
	return self.ptr.API.CodeEdit_get_executing_lines(self)
}
func (self classCodeEdit) SetDrawLineNumbers(enable bool) {
	self.ptr.API.CodeEdit_set_draw_line_numbers(self, enable)
}
func (self classCodeEdit) IsDrawLineNumbersEnabled() bool {
	return self.ptr.API.CodeEdit_is_draw_line_numbers_enabled(self)
}
func (self classCodeEdit) SetLineNumbersZeroPadded(enable bool) {
	self.ptr.API.CodeEdit_set_line_numbers_zero_padded(self, enable)
}
func (self classCodeEdit) IsLineNumbersZeroPadded() bool {
	return self.ptr.API.CodeEdit_is_line_numbers_zero_padded(self)
}
func (self classCodeEdit) SetDrawFoldGutter(enable bool) {
	self.ptr.API.CodeEdit_set_draw_fold_gutter(self, enable)
}
func (self classCodeEdit) IsDrawingFoldGutter() bool {
	return self.ptr.API.CodeEdit_is_drawing_fold_gutter(self)
}
func (self classCodeEdit) SetLineFoldingEnabled(enabled bool) {
	self.ptr.API.CodeEdit_set_line_folding_enabled(self, enabled)
}
func (self classCodeEdit) IsLineFoldingEnabled() bool {
	return self.ptr.API.CodeEdit_is_line_folding_enabled(self)
}
func (self classCodeEdit) CanFoldLine(line Int) bool {
	return self.ptr.API.CodeEdit_can_fold_line(self, line)
}
func (self classCodeEdit) FoldLine(line Int) {
	self.ptr.API.CodeEdit_fold_line(self, line)
}
func (self classCodeEdit) UnfoldLine(line Int) {
	self.ptr.API.CodeEdit_unfold_line(self, line)
}
func (self classCodeEdit) FoldAllLines() {
	self.ptr.API.CodeEdit_fold_all_lines(self)
}
func (self classCodeEdit) UnfoldAllLines() {
	self.ptr.API.CodeEdit_unfold_all_lines(self)
}
func (self classCodeEdit) ToggleFoldableLine(line Int) {
	self.ptr.API.CodeEdit_toggle_foldable_line(self, line)
}
func (self classCodeEdit) IsLineFolded(line Int) bool {
	return self.ptr.API.CodeEdit_is_line_folded(self, line)
}
func (self classCodeEdit) GetFoldedLines() ArrayOf[Int] {
	return self.ptr.API.CodeEdit_get_folded_lines(self)
}
func (self classCodeEdit) CreateCodeRegion() {
	self.ptr.API.CodeEdit_create_code_region(self)
}
func (self classCodeEdit) GetCodeRegionStartTag() String {
	return self.ptr.API.CodeEdit_get_code_region_start_tag(self)
}
func (self classCodeEdit) GetCodeRegionEndTag() String {
	return self.ptr.API.CodeEdit_get_code_region_end_tag(self)
}
func (self classCodeEdit) SetCodeRegionTags(start String, end String) {
	self.ptr.API.CodeEdit_set_code_region_tags(self, start, end)
}
func (self classCodeEdit) IsLineCodeRegionStart(line Int) bool {
	return self.ptr.API.CodeEdit_is_line_code_region_start(self, line)
}
func (self classCodeEdit) IsLineCodeRegionEnd(line Int) bool {
	return self.ptr.API.CodeEdit_is_line_code_region_end(self, line)
}
func (self classCodeEdit) AddStringDelimiter(start_key String, end_key String, line_only bool) {
	self.ptr.API.CodeEdit_add_string_delimiter(self, start_key, end_key, line_only)
}
func (self classCodeEdit) RemoveStringDelimiter(start_key String) {
	self.ptr.API.CodeEdit_remove_string_delimiter(self, start_key)
}
func (self classCodeEdit) HasStringDelimiter(start_key String) bool {
	return self.ptr.API.CodeEdit_has_string_delimiter(self, start_key)
}
func (self classCodeEdit) SetStringDelimiters(string_delimiters ArrayOf[String]) {
	self.ptr.API.CodeEdit_set_string_delimiters(self, string_delimiters)
}
func (self classCodeEdit) ClearStringDelimiters() {
	self.ptr.API.CodeEdit_clear_string_delimiters(self)
}
func (self classCodeEdit) GetStringDelimiters() ArrayOf[String] {
	return self.ptr.API.CodeEdit_get_string_delimiters(self)
}
func (self classCodeEdit) IsInString(line Int, column Int) Int {
	return self.ptr.API.CodeEdit_is_in_string(self, line, column)
}
func (self classCodeEdit) AddCommentDelimiter(start_key String, end_key String, line_only bool) {
	self.ptr.API.CodeEdit_add_comment_delimiter(self, start_key, end_key, line_only)
}
func (self classCodeEdit) RemoveCommentDelimiter(start_key String) {
	self.ptr.API.CodeEdit_remove_comment_delimiter(self, start_key)
}
func (self classCodeEdit) HasCommentDelimiter(start_key String) bool {
	return self.ptr.API.CodeEdit_has_comment_delimiter(self, start_key)
}
func (self classCodeEdit) SetCommentDelimiters(comment_delimiters ArrayOf[String]) {
	self.ptr.API.CodeEdit_set_comment_delimiters(self, comment_delimiters)
}
func (self classCodeEdit) ClearCommentDelimiters() {
	self.ptr.API.CodeEdit_clear_comment_delimiters(self)
}
func (self classCodeEdit) GetCommentDelimiters() ArrayOf[String] {
	return self.ptr.API.CodeEdit_get_comment_delimiters(self)
}
func (self classCodeEdit) IsInComment(line Int, column Int) Int {
	return self.ptr.API.CodeEdit_is_in_comment(self, line, column)
}
func (self classCodeEdit) GetDelimiterStartKey(delimiter_index Int) String {
	return self.ptr.API.CodeEdit_get_delimiter_start_key(self, delimiter_index)
}
func (self classCodeEdit) GetDelimiterEndKey(delimiter_index Int) String {
	return self.ptr.API.CodeEdit_get_delimiter_end_key(self, delimiter_index)
}
func (self classCodeEdit) GetDelimiterStartPosition(line Int, column Int) Vector2 {
	return self.ptr.API.CodeEdit_get_delimiter_start_position(self, line, column)
}
func (self classCodeEdit) GetDelimiterEndPosition(line Int, column Int) Vector2 {
	return self.ptr.API.CodeEdit_get_delimiter_end_position(self, line, column)
}
func (self classCodeEdit) SetCodeHint(code_hint String) {
	self.ptr.API.CodeEdit_set_code_hint(self, code_hint)
}
func (self classCodeEdit) SetCodeHintDrawBelow(draw_below bool) {
	self.ptr.API.CodeEdit_set_code_hint_draw_below(self, draw_below)
}
func (self classCodeEdit) GetTextForCodeCompletion() String {
	return self.ptr.API.CodeEdit_get_text_for_code_completion(self)
}
func (self classCodeEdit) RequestCodeCompletion(force bool) {
	self.ptr.API.CodeEdit_request_code_completion(self, force)
}
func (self classCodeEdit) AddCodeCompletionOption(atype CodeEditCodeCompletionKind, display_text String, insert_text String, text_color Color, icon Resource, value Variant, location Int) {
	self.ptr.API.CodeEdit_add_code_completion_option(self, atype, display_text, insert_text, text_color, icon, value, location)
}
func (self classCodeEdit) UpdateCodeCompletionOptions(force bool) {
	self.ptr.API.CodeEdit_update_code_completion_options(self, force)
}
func (self classCodeEdit) GetCodeCompletionOptions() ArrayOf[Dictionary] {
	return self.ptr.API.CodeEdit_get_code_completion_options(self)
}
func (self classCodeEdit) GetCodeCompletionOption(index Int) Dictionary {
	return self.ptr.API.CodeEdit_get_code_completion_option(self, index)
}
func (self classCodeEdit) GetCodeCompletionSelectedIndex() Int {
	return self.ptr.API.CodeEdit_get_code_completion_selected_index(self)
}
func (self classCodeEdit) SetCodeCompletionSelectedIndex(index Int) {
	self.ptr.API.CodeEdit_set_code_completion_selected_index(self, index)
}
func (self classCodeEdit) ConfirmCodeCompletion(replace bool) {
	self.ptr.API.CodeEdit_confirm_code_completion(self, replace)
}
func (self classCodeEdit) CancelCodeCompletion() {
	self.ptr.API.CodeEdit_cancel_code_completion(self)
}
func (self classCodeEdit) SetCodeCompletionEnabled(enable bool) {
	self.ptr.API.CodeEdit_set_code_completion_enabled(self, enable)
}
func (self classCodeEdit) IsCodeCompletionEnabled() bool {
	return self.ptr.API.CodeEdit_is_code_completion_enabled(self)
}
func (self classCodeEdit) SetCodeCompletionPrefixes(prefixes ArrayOf[String]) {
	self.ptr.API.CodeEdit_set_code_completion_prefixes(self, prefixes)
}
func (self classCodeEdit) GetCodeCompletionPrefixes() ArrayOf[String] {
	return self.ptr.API.CodeEdit_get_code_completion_prefixes(self)
}
func (self classCodeEdit) SetLineLengthGuidelines(guideline_columns ArrayOf[Int]) {
	self.ptr.API.CodeEdit_set_line_length_guidelines(self, guideline_columns)
}
func (self classCodeEdit) GetLineLengthGuidelines() ArrayOf[Int] {
	return self.ptr.API.CodeEdit_get_line_length_guidelines(self)
}
func (self classCodeEdit) SetSymbolLookupOnClickEnabled(enable bool) {
	self.ptr.API.CodeEdit_set_symbol_lookup_on_click_enabled(self, enable)
}
func (self classCodeEdit) IsSymbolLookupOnClickEnabled() bool {
	return self.ptr.API.CodeEdit_is_symbol_lookup_on_click_enabled(self)
}
func (self classCodeEdit) GetTextForSymbolLookup() String {
	return self.ptr.API.CodeEdit_get_text_for_symbol_lookup(self)
}
func (self classCodeEdit) GetTextWithCursorChar(line Int, column Int) String {
	return self.ptr.API.CodeEdit_get_text_with_cursor_char(self, line, column)
}
func (self classCodeEdit) SetSymbolLookupWordAsValid(valid bool) {
	self.ptr.API.CodeEdit_set_symbol_lookup_word_as_valid(self, valid)
}
func (self classCodeEdit) DuplicateLines() {
	self.ptr.API.CodeEdit_duplicate_lines(self)
}

type classCodeHighlighter struct{ Class[classCodeHighlighter] }

func (self classCodeHighlighter) Super() SyntaxHighlighter {
	var super SyntaxHighlighter
	super.ptr = self.ptr
	return super
}

func (self classCodeHighlighter) SyntaxHighlighter() SyntaxHighlighter { return self.Super() }
func (self classCodeHighlighter) AddKeywordColor(keyword String, color Color) {
	self.ptr.API.CodeHighlighter_add_keyword_color(self, keyword, color)
}
func (self classCodeHighlighter) RemoveKeywordColor(keyword String) {
	self.ptr.API.CodeHighlighter_remove_keyword_color(self, keyword)
}
func (self classCodeHighlighter) HasKeywordColor(keyword String) bool {
	return self.ptr.API.CodeHighlighter_has_keyword_color(self, keyword)
}
func (self classCodeHighlighter) GetKeywordColor(keyword String) Color {
	return self.ptr.API.CodeHighlighter_get_keyword_color(self, keyword)
}
func (self classCodeHighlighter) SetKeywordColors(keywords Dictionary) {
	self.ptr.API.CodeHighlighter_set_keyword_colors(self, keywords)
}
func (self classCodeHighlighter) ClearKeywordColors() {
	self.ptr.API.CodeHighlighter_clear_keyword_colors(self)
}
func (self classCodeHighlighter) GetKeywordColors() Dictionary {
	return self.ptr.API.CodeHighlighter_get_keyword_colors(self)
}
func (self classCodeHighlighter) AddMemberKeywordColor(member_keyword String, color Color) {
	self.ptr.API.CodeHighlighter_add_member_keyword_color(self, member_keyword, color)
}
func (self classCodeHighlighter) RemoveMemberKeywordColor(member_keyword String) {
	self.ptr.API.CodeHighlighter_remove_member_keyword_color(self, member_keyword)
}
func (self classCodeHighlighter) HasMemberKeywordColor(member_keyword String) bool {
	return self.ptr.API.CodeHighlighter_has_member_keyword_color(self, member_keyword)
}
func (self classCodeHighlighter) GetMemberKeywordColor(member_keyword String) Color {
	return self.ptr.API.CodeHighlighter_get_member_keyword_color(self, member_keyword)
}
func (self classCodeHighlighter) SetMemberKeywordColors(member_keyword Dictionary) {
	self.ptr.API.CodeHighlighter_set_member_keyword_colors(self, member_keyword)
}
func (self classCodeHighlighter) ClearMemberKeywordColors() {
	self.ptr.API.CodeHighlighter_clear_member_keyword_colors(self)
}
func (self classCodeHighlighter) GetMemberKeywordColors() Dictionary {
	return self.ptr.API.CodeHighlighter_get_member_keyword_colors(self)
}
func (self classCodeHighlighter) AddColorRegion(start_key String, end_key String, color Color, line_only bool) {
	self.ptr.API.CodeHighlighter_add_color_region(self, start_key, end_key, color, line_only)
}
func (self classCodeHighlighter) RemoveColorRegion(start_key String) {
	self.ptr.API.CodeHighlighter_remove_color_region(self, start_key)
}
func (self classCodeHighlighter) HasColorRegion(start_key String) bool {
	return self.ptr.API.CodeHighlighter_has_color_region(self, start_key)
}
func (self classCodeHighlighter) SetColorRegions(color_regions Dictionary) {
	self.ptr.API.CodeHighlighter_set_color_regions(self, color_regions)
}
func (self classCodeHighlighter) ClearColorRegions() {
	self.ptr.API.CodeHighlighter_clear_color_regions(self)
}
func (self classCodeHighlighter) GetColorRegions() Dictionary {
	return self.ptr.API.CodeHighlighter_get_color_regions(self)
}
func (self classCodeHighlighter) SetFunctionColor(color Color) {
	self.ptr.API.CodeHighlighter_set_function_color(self, color)
}
func (self classCodeHighlighter) GetFunctionColor() Color {
	return self.ptr.API.CodeHighlighter_get_function_color(self)
}
func (self classCodeHighlighter) SetNumberColor(color Color) {
	self.ptr.API.CodeHighlighter_set_number_color(self, color)
}
func (self classCodeHighlighter) GetNumberColor() Color {
	return self.ptr.API.CodeHighlighter_get_number_color(self)
}
func (self classCodeHighlighter) SetSymbolColor(color Color) {
	self.ptr.API.CodeHighlighter_set_symbol_color(self, color)
}
func (self classCodeHighlighter) GetSymbolColor() Color {
	return self.ptr.API.CodeHighlighter_get_symbol_color(self)
}
func (self classCodeHighlighter) SetMemberVariableColor(color Color) {
	self.ptr.API.CodeHighlighter_set_member_variable_color(self, color)
}
func (self classCodeHighlighter) GetMemberVariableColor() Color {
	return self.ptr.API.CodeHighlighter_get_member_variable_color(self)
}

type classCollisionObject2D struct{ Class[classCollisionObject2D] }

func (self classCollisionObject2D) Super() Node2D {
	var super Node2D
	super.ptr = self.ptr
	return super
}

func (self classCollisionObject2D) Node2D() Node2D { return self.Super() }
func (self classCollisionObject2D) GetRid() RID {
	return self.ptr.API.CollisionObject2D_get_rid(self)
}
func (self classCollisionObject2D) SetCollisionLayer(layer Int) {
	self.ptr.API.CollisionObject2D_set_collision_layer(self, layer)
}
func (self classCollisionObject2D) GetCollisionLayer() Int {
	return self.ptr.API.CollisionObject2D_get_collision_layer(self)
}
func (self classCollisionObject2D) SetCollisionMask(mask Int) {
	self.ptr.API.CollisionObject2D_set_collision_mask(self, mask)
}
func (self classCollisionObject2D) GetCollisionMask() Int {
	return self.ptr.API.CollisionObject2D_get_collision_mask(self)
}
func (self classCollisionObject2D) SetCollisionLayerValue(layer_number Int, value bool) {
	self.ptr.API.CollisionObject2D_set_collision_layer_value(self, layer_number, value)
}
func (self classCollisionObject2D) GetCollisionLayerValue(layer_number Int) bool {
	return self.ptr.API.CollisionObject2D_get_collision_layer_value(self, layer_number)
}
func (self classCollisionObject2D) SetCollisionMaskValue(layer_number Int, value bool) {
	self.ptr.API.CollisionObject2D_set_collision_mask_value(self, layer_number, value)
}
func (self classCollisionObject2D) GetCollisionMaskValue(layer_number Int) bool {
	return self.ptr.API.CollisionObject2D_get_collision_mask_value(self, layer_number)
}
func (self classCollisionObject2D) SetCollisionPriority(priority Float) {
	self.ptr.API.CollisionObject2D_set_collision_priority(self, priority)
}
func (self classCollisionObject2D) GetCollisionPriority() Float {
	return self.ptr.API.CollisionObject2D_get_collision_priority(self)
}
func (self classCollisionObject2D) SetDisableMode(mode CollisionObject2DDisableMode) {
	self.ptr.API.CollisionObject2D_set_disable_mode(self, mode)
}
func (self classCollisionObject2D) GetDisableMode() CollisionObject2DDisableMode {
	return self.ptr.API.CollisionObject2D_get_disable_mode(self)
}
func (self classCollisionObject2D) SetPickable(enabled bool) {
	self.ptr.API.CollisionObject2D_set_pickable(self, enabled)
}
func (self classCollisionObject2D) IsPickable() bool {
	return self.ptr.API.CollisionObject2D_is_pickable(self)
}
func (self classCollisionObject2D) CreateShapeOwner(owner Object) Int {
	return self.ptr.API.CollisionObject2D_create_shape_owner(self, owner)
}
func (self classCollisionObject2D) RemoveShapeOwner(owner_id Int) {
	self.ptr.API.CollisionObject2D_remove_shape_owner(self, owner_id)
}
func (self classCollisionObject2D) GetShapeOwners() PackedInt32Array {
	return self.ptr.API.CollisionObject2D_get_shape_owners(self)
}
func (self classCollisionObject2D) ShapeOwnerSetTransform(owner_id Int, transform Transform2D) {
	self.ptr.API.CollisionObject2D_shape_owner_set_transform(self, owner_id, transform)
}
func (self classCollisionObject2D) ShapeOwnerGetTransform(owner_id Int) Transform2D {
	return self.ptr.API.CollisionObject2D_shape_owner_get_transform(self, owner_id)
}
func (self classCollisionObject2D) ShapeOwnerGetOwner(owner_id Int) Object {
	return self.ptr.API.CollisionObject2D_shape_owner_get_owner(self, owner_id)
}
func (self classCollisionObject2D) ShapeOwnerSetDisabled(owner_id Int, disabled bool) {
	self.ptr.API.CollisionObject2D_shape_owner_set_disabled(self, owner_id, disabled)
}
func (self classCollisionObject2D) IsShapeOwnerDisabled(owner_id Int) bool {
	return self.ptr.API.CollisionObject2D_is_shape_owner_disabled(self, owner_id)
}
func (self classCollisionObject2D) ShapeOwnerSetOneWayCollision(owner_id Int, enable bool) {
	self.ptr.API.CollisionObject2D_shape_owner_set_one_way_collision(self, owner_id, enable)
}
func (self classCollisionObject2D) IsShapeOwnerOneWayCollisionEnabled(owner_id Int) bool {
	return self.ptr.API.CollisionObject2D_is_shape_owner_one_way_collision_enabled(self, owner_id)
}
func (self classCollisionObject2D) ShapeOwnerSetOneWayCollisionMargin(owner_id Int, margin Float) {
	self.ptr.API.CollisionObject2D_shape_owner_set_one_way_collision_margin(self, owner_id, margin)
}
func (self classCollisionObject2D) GetShapeOwnerOneWayCollisionMargin(owner_id Int) Float {
	return self.ptr.API.CollisionObject2D_get_shape_owner_one_way_collision_margin(self, owner_id)
}
func (self classCollisionObject2D) ShapeOwnerAddShape(owner_id Int, shape Shape2D) {
	self.ptr.API.CollisionObject2D_shape_owner_add_shape(self, owner_id, shape)
}
func (self classCollisionObject2D) ShapeOwnerGetShapeCount(owner_id Int) Int {
	return self.ptr.API.CollisionObject2D_shape_owner_get_shape_count(self, owner_id)
}
func (self classCollisionObject2D) ShapeOwnerGetShape(owner_id Int, shape_id Int) Shape2D {
	return self.ptr.API.CollisionObject2D_shape_owner_get_shape(self, owner_id, shape_id)
}
func (self classCollisionObject2D) ShapeOwnerGetShapeIndex(owner_id Int, shape_id Int) Int {
	return self.ptr.API.CollisionObject2D_shape_owner_get_shape_index(self, owner_id, shape_id)
}
func (self classCollisionObject2D) ShapeOwnerRemoveShape(owner_id Int, shape_id Int) {
	self.ptr.API.CollisionObject2D_shape_owner_remove_shape(self, owner_id, shape_id)
}
func (self classCollisionObject2D) ShapeOwnerClearShapes(owner_id Int) {
	self.ptr.API.CollisionObject2D_shape_owner_clear_shapes(self, owner_id)
}
func (self classCollisionObject2D) ShapeFindOwner(shape_index Int) Int {
	return self.ptr.API.CollisionObject2D_shape_find_owner(self, shape_index)
}

type classCollisionObject3D struct{ Class[classCollisionObject3D] }

func (self classCollisionObject3D) Super() Node3D {
	var super Node3D
	super.ptr = self.ptr
	return super
}

func (self classCollisionObject3D) Node3D() Node3D { return self.Super() }
func (self classCollisionObject3D) SetCollisionLayer(layer Int) {
	self.ptr.API.CollisionObject3D_set_collision_layer(self, layer)
}
func (self classCollisionObject3D) GetCollisionLayer() Int {
	return self.ptr.API.CollisionObject3D_get_collision_layer(self)
}
func (self classCollisionObject3D) SetCollisionMask(mask Int) {
	self.ptr.API.CollisionObject3D_set_collision_mask(self, mask)
}
func (self classCollisionObject3D) GetCollisionMask() Int {
	return self.ptr.API.CollisionObject3D_get_collision_mask(self)
}
func (self classCollisionObject3D) SetCollisionLayerValue(layer_number Int, value bool) {
	self.ptr.API.CollisionObject3D_set_collision_layer_value(self, layer_number, value)
}
func (self classCollisionObject3D) GetCollisionLayerValue(layer_number Int) bool {
	return self.ptr.API.CollisionObject3D_get_collision_layer_value(self, layer_number)
}
func (self classCollisionObject3D) SetCollisionMaskValue(layer_number Int, value bool) {
	self.ptr.API.CollisionObject3D_set_collision_mask_value(self, layer_number, value)
}
func (self classCollisionObject3D) GetCollisionMaskValue(layer_number Int) bool {
	return self.ptr.API.CollisionObject3D_get_collision_mask_value(self, layer_number)
}
func (self classCollisionObject3D) SetCollisionPriority(priority Float) {
	self.ptr.API.CollisionObject3D_set_collision_priority(self, priority)
}
func (self classCollisionObject3D) GetCollisionPriority() Float {
	return self.ptr.API.CollisionObject3D_get_collision_priority(self)
}
func (self classCollisionObject3D) SetDisableMode(mode CollisionObject3DDisableMode) {
	self.ptr.API.CollisionObject3D_set_disable_mode(self, mode)
}
func (self classCollisionObject3D) GetDisableMode() CollisionObject3DDisableMode {
	return self.ptr.API.CollisionObject3D_get_disable_mode(self)
}
func (self classCollisionObject3D) SetRayPickable(ray_pickable bool) {
	self.ptr.API.CollisionObject3D_set_ray_pickable(self, ray_pickable)
}
func (self classCollisionObject3D) IsRayPickable() bool {
	return self.ptr.API.CollisionObject3D_is_ray_pickable(self)
}
func (self classCollisionObject3D) SetCaptureInputOnDrag(enable bool) {
	self.ptr.API.CollisionObject3D_set_capture_input_on_drag(self, enable)
}
func (self classCollisionObject3D) GetCaptureInputOnDrag() bool {
	return self.ptr.API.CollisionObject3D_get_capture_input_on_drag(self)
}
func (self classCollisionObject3D) GetRid() RID {
	return self.ptr.API.CollisionObject3D_get_rid(self)
}
func (self classCollisionObject3D) CreateShapeOwner(owner Object) Int {
	return self.ptr.API.CollisionObject3D_create_shape_owner(self, owner)
}
func (self classCollisionObject3D) RemoveShapeOwner(owner_id Int) {
	self.ptr.API.CollisionObject3D_remove_shape_owner(self, owner_id)
}
func (self classCollisionObject3D) GetShapeOwners() PackedInt32Array {
	return self.ptr.API.CollisionObject3D_get_shape_owners(self)
}
func (self classCollisionObject3D) ShapeOwnerSetTransform(owner_id Int, transform Transform3D) {
	self.ptr.API.CollisionObject3D_shape_owner_set_transform(self, owner_id, transform)
}
func (self classCollisionObject3D) ShapeOwnerGetTransform(owner_id Int) Transform3D {
	return self.ptr.API.CollisionObject3D_shape_owner_get_transform(self, owner_id)
}
func (self classCollisionObject3D) ShapeOwnerGetOwner(owner_id Int) Object {
	return self.ptr.API.CollisionObject3D_shape_owner_get_owner(self, owner_id)
}
func (self classCollisionObject3D) ShapeOwnerSetDisabled(owner_id Int, disabled bool) {
	self.ptr.API.CollisionObject3D_shape_owner_set_disabled(self, owner_id, disabled)
}
func (self classCollisionObject3D) IsShapeOwnerDisabled(owner_id Int) bool {
	return self.ptr.API.CollisionObject3D_is_shape_owner_disabled(self, owner_id)
}
func (self classCollisionObject3D) ShapeOwnerAddShape(owner_id Int, shape Shape3D) {
	self.ptr.API.CollisionObject3D_shape_owner_add_shape(self, owner_id, shape)
}
func (self classCollisionObject3D) ShapeOwnerGetShapeCount(owner_id Int) Int {
	return self.ptr.API.CollisionObject3D_shape_owner_get_shape_count(self, owner_id)
}
func (self classCollisionObject3D) ShapeOwnerGetShape(owner_id Int, shape_id Int) Shape3D {
	return self.ptr.API.CollisionObject3D_shape_owner_get_shape(self, owner_id, shape_id)
}
func (self classCollisionObject3D) ShapeOwnerGetShapeIndex(owner_id Int, shape_id Int) Int {
	return self.ptr.API.CollisionObject3D_shape_owner_get_shape_index(self, owner_id, shape_id)
}
func (self classCollisionObject3D) ShapeOwnerRemoveShape(owner_id Int, shape_id Int) {
	self.ptr.API.CollisionObject3D_shape_owner_remove_shape(self, owner_id, shape_id)
}
func (self classCollisionObject3D) ShapeOwnerClearShapes(owner_id Int) {
	self.ptr.API.CollisionObject3D_shape_owner_clear_shapes(self, owner_id)
}
func (self classCollisionObject3D) ShapeFindOwner(shape_index Int) Int {
	return self.ptr.API.CollisionObject3D_shape_find_owner(self, shape_index)
}

type classCollisionPolygon2D struct{ Class[classCollisionPolygon2D] }

func (self classCollisionPolygon2D) Super() Node2D {
	var super Node2D
	super.ptr = self.ptr
	return super
}

func (self classCollisionPolygon2D) Node2D() Node2D { return self.Super() }
func (self classCollisionPolygon2D) SetPolygon(polygon PackedVector2Array) {
	self.ptr.API.CollisionPolygon2D_set_polygon(self, polygon)
}
func (self classCollisionPolygon2D) GetPolygon() PackedVector2Array {
	return self.ptr.API.CollisionPolygon2D_get_polygon(self)
}
func (self classCollisionPolygon2D) SetBuildMode(build_mode CollisionPolygon2DBuildMode) {
	self.ptr.API.CollisionPolygon2D_set_build_mode(self, build_mode)
}
func (self classCollisionPolygon2D) GetBuildMode() CollisionPolygon2DBuildMode {
	return self.ptr.API.CollisionPolygon2D_get_build_mode(self)
}
func (self classCollisionPolygon2D) SetDisabled(disabled bool) {
	self.ptr.API.CollisionPolygon2D_set_disabled(self, disabled)
}
func (self classCollisionPolygon2D) IsDisabled() bool {
	return self.ptr.API.CollisionPolygon2D_is_disabled(self)
}
func (self classCollisionPolygon2D) SetOneWayCollision(enabled bool) {
	self.ptr.API.CollisionPolygon2D_set_one_way_collision(self, enabled)
}
func (self classCollisionPolygon2D) IsOneWayCollisionEnabled() bool {
	return self.ptr.API.CollisionPolygon2D_is_one_way_collision_enabled(self)
}
func (self classCollisionPolygon2D) SetOneWayCollisionMargin(margin Float) {
	self.ptr.API.CollisionPolygon2D_set_one_way_collision_margin(self, margin)
}
func (self classCollisionPolygon2D) GetOneWayCollisionMargin() Float {
	return self.ptr.API.CollisionPolygon2D_get_one_way_collision_margin(self)
}

type classCollisionPolygon3D struct{ Class[classCollisionPolygon3D] }

func (self classCollisionPolygon3D) Super() Node3D {
	var super Node3D
	super.ptr = self.ptr
	return super
}

func (self classCollisionPolygon3D) Node3D() Node3D { return self.Super() }
func (self classCollisionPolygon3D) SetDepth(depth Float) {
	self.ptr.API.CollisionPolygon3D_set_depth(self, depth)
}
func (self classCollisionPolygon3D) GetDepth() Float {
	return self.ptr.API.CollisionPolygon3D_get_depth(self)
}
func (self classCollisionPolygon3D) SetPolygon(polygon PackedVector2Array) {
	self.ptr.API.CollisionPolygon3D_set_polygon(self, polygon)
}
func (self classCollisionPolygon3D) GetPolygon() PackedVector2Array {
	return self.ptr.API.CollisionPolygon3D_get_polygon(self)
}
func (self classCollisionPolygon3D) SetDisabled(disabled bool) {
	self.ptr.API.CollisionPolygon3D_set_disabled(self, disabled)
}
func (self classCollisionPolygon3D) IsDisabled() bool {
	return self.ptr.API.CollisionPolygon3D_is_disabled(self)
}
func (self classCollisionPolygon3D) SetMargin(margin Float) {
	self.ptr.API.CollisionPolygon3D_set_margin(self, margin)
}
func (self classCollisionPolygon3D) GetMargin() Float {
	return self.ptr.API.CollisionPolygon3D_get_margin(self)
}

type classCollisionShape2D struct{ Class[classCollisionShape2D] }

func (self classCollisionShape2D) Super() Node2D {
	var super Node2D
	super.ptr = self.ptr
	return super
}

func (self classCollisionShape2D) Node2D() Node2D { return self.Super() }
func (self classCollisionShape2D) SetShape(shape Shape2D) {
	self.ptr.API.CollisionShape2D_set_shape(self, shape)
}
func (self classCollisionShape2D) GetShape() Shape2D {
	return self.ptr.API.CollisionShape2D_get_shape(self)
}
func (self classCollisionShape2D) SetDisabled(disabled bool) {
	self.ptr.API.CollisionShape2D_set_disabled(self, disabled)
}
func (self classCollisionShape2D) IsDisabled() bool {
	return self.ptr.API.CollisionShape2D_is_disabled(self)
}
func (self classCollisionShape2D) SetOneWayCollision(enabled bool) {
	self.ptr.API.CollisionShape2D_set_one_way_collision(self, enabled)
}
func (self classCollisionShape2D) IsOneWayCollisionEnabled() bool {
	return self.ptr.API.CollisionShape2D_is_one_way_collision_enabled(self)
}
func (self classCollisionShape2D) SetOneWayCollisionMargin(margin Float) {
	self.ptr.API.CollisionShape2D_set_one_way_collision_margin(self, margin)
}
func (self classCollisionShape2D) GetOneWayCollisionMargin() Float {
	return self.ptr.API.CollisionShape2D_get_one_way_collision_margin(self)
}
func (self classCollisionShape2D) SetDebugColor(color Color) {
	self.ptr.API.CollisionShape2D_set_debug_color(self, color)
}
func (self classCollisionShape2D) GetDebugColor() Color {
	return self.ptr.API.CollisionShape2D_get_debug_color(self)
}

type classCollisionShape3D struct{ Class[classCollisionShape3D] }

func (self classCollisionShape3D) Super() Node3D {
	var super Node3D
	super.ptr = self.ptr
	return super
}

func (self classCollisionShape3D) Node3D() Node3D { return self.Super() }
func (self classCollisionShape3D) ResourceChanged(resource Resource) {
	self.ptr.API.CollisionShape3D_resource_changed(self, resource)
}
func (self classCollisionShape3D) SetShape(shape Shape3D) {
	self.ptr.API.CollisionShape3D_set_shape(self, shape)
}
func (self classCollisionShape3D) GetShape() Shape3D {
	return self.ptr.API.CollisionShape3D_get_shape(self)
}
func (self classCollisionShape3D) SetDisabled(enable bool) {
	self.ptr.API.CollisionShape3D_set_disabled(self, enable)
}
func (self classCollisionShape3D) IsDisabled() bool {
	return self.ptr.API.CollisionShape3D_is_disabled(self)
}
func (self classCollisionShape3D) MakeConvexFromSiblings() {
	self.ptr.API.CollisionShape3D_make_convex_from_siblings(self)
}

type classColorPicker struct{ Class[classColorPicker] }

func (self classColorPicker) Super() VBoxContainer {
	var super VBoxContainer
	super.ptr = self.ptr
	return super
}

func (self classColorPicker) VBoxContainer() VBoxContainer { return self.Super() }
func (self classColorPicker) SetPickColor(color Color) {
	self.ptr.API.ColorPicker_set_pick_color(self, color)
}
func (self classColorPicker) GetPickColor() Color {
	return self.ptr.API.ColorPicker_get_pick_color(self)
}
func (self classColorPicker) SetDeferredMode(mode bool) {
	self.ptr.API.ColorPicker_set_deferred_mode(self, mode)
}
func (self classColorPicker) IsDeferredMode() bool {
	return self.ptr.API.ColorPicker_is_deferred_mode(self)
}
func (self classColorPicker) SetColorMode(color_mode ColorPickerColorModeType) {
	self.ptr.API.ColorPicker_set_color_mode(self, color_mode)
}
func (self classColorPicker) GetColorMode() ColorPickerColorModeType {
	return self.ptr.API.ColorPicker_get_color_mode(self)
}
func (self classColorPicker) SetEditAlpha(show bool) {
	self.ptr.API.ColorPicker_set_edit_alpha(self, show)
}
func (self classColorPicker) IsEditingAlpha() bool {
	return self.ptr.API.ColorPicker_is_editing_alpha(self)
}
func (self classColorPicker) SetCanAddSwatches(enabled bool) {
	self.ptr.API.ColorPicker_set_can_add_swatches(self, enabled)
}
func (self classColorPicker) AreSwatchesEnabled() bool {
	return self.ptr.API.ColorPicker_are_swatches_enabled(self)
}
func (self classColorPicker) SetPresetsVisible(visible bool) {
	self.ptr.API.ColorPicker_set_presets_visible(self, visible)
}
func (self classColorPicker) ArePresetsVisible() bool {
	return self.ptr.API.ColorPicker_are_presets_visible(self)
}
func (self classColorPicker) SetModesVisible(visible bool) {
	self.ptr.API.ColorPicker_set_modes_visible(self, visible)
}
func (self classColorPicker) AreModesVisible() bool {
	return self.ptr.API.ColorPicker_are_modes_visible(self)
}
func (self classColorPicker) SetSamplerVisible(visible bool) {
	self.ptr.API.ColorPicker_set_sampler_visible(self, visible)
}
func (self classColorPicker) IsSamplerVisible() bool {
	return self.ptr.API.ColorPicker_is_sampler_visible(self)
}
func (self classColorPicker) SetSlidersVisible(visible bool) {
	self.ptr.API.ColorPicker_set_sliders_visible(self, visible)
}
func (self classColorPicker) AreSlidersVisible() bool {
	return self.ptr.API.ColorPicker_are_sliders_visible(self)
}
func (self classColorPicker) SetHexVisible(visible bool) {
	self.ptr.API.ColorPicker_set_hex_visible(self, visible)
}
func (self classColorPicker) IsHexVisible() bool {
	return self.ptr.API.ColorPicker_is_hex_visible(self)
}
func (self classColorPicker) AddPreset(color Color) {
	self.ptr.API.ColorPicker_add_preset(self, color)
}
func (self classColorPicker) ErasePreset(color Color) {
	self.ptr.API.ColorPicker_erase_preset(self, color)
}
func (self classColorPicker) GetPresets() PackedColorArray {
	return self.ptr.API.ColorPicker_get_presets(self)
}
func (self classColorPicker) AddRecentPreset(color Color) {
	self.ptr.API.ColorPicker_add_recent_preset(self, color)
}
func (self classColorPicker) EraseRecentPreset(color Color) {
	self.ptr.API.ColorPicker_erase_recent_preset(self, color)
}
func (self classColorPicker) GetRecentPresets() PackedColorArray {
	return self.ptr.API.ColorPicker_get_recent_presets(self)
}
func (self classColorPicker) SetPickerShape(shape ColorPickerPickerShapeType) {
	self.ptr.API.ColorPicker_set_picker_shape(self, shape)
}
func (self classColorPicker) GetPickerShape() ColorPickerPickerShapeType {
	return self.ptr.API.ColorPicker_get_picker_shape(self)
}

type classColorPickerButton struct{ Class[classColorPickerButton] }

func (self classColorPickerButton) Super() Button {
	var super Button
	super.ptr = self.ptr
	return super
}

func (self classColorPickerButton) Button() Button { return self.Super() }
func (self classColorPickerButton) SetPickColor(color Color) {
	self.ptr.API.ColorPickerButton_set_pick_color(self, color)
}
func (self classColorPickerButton) GetPickColor() Color {
	return self.ptr.API.ColorPickerButton_get_pick_color(self)
}
func (self classColorPickerButton) GetPicker() ColorPicker {
	return self.ptr.API.ColorPickerButton_get_picker(self)
}
func (self classColorPickerButton) GetPopup() PopupPanel {
	return self.ptr.API.ColorPickerButton_get_popup(self)
}
func (self classColorPickerButton) SetEditAlpha(show bool) {
	self.ptr.API.ColorPickerButton_set_edit_alpha(self, show)
}
func (self classColorPickerButton) IsEditingAlpha() bool {
	return self.ptr.API.ColorPickerButton_is_editing_alpha(self)
}

type classColorRect struct{ Class[classColorRect] }

func (self classColorRect) Super() Control { var super Control; super.ptr = self.ptr; return super }

func (self classColorRect) Control() Control { return self.Super() }
func (self classColorRect) SetColor(color Color) {
	self.ptr.API.ColorRect_set_color(self, color)
}
func (self classColorRect) GetColor() Color {
	return self.ptr.API.ColorRect_get_color(self)
}

type classCompressedCubemap struct{ Class[classCompressedCubemap] }

func (self classCompressedCubemap) Super() CompressedTextureLayered {
	var super CompressedTextureLayered
	super.ptr = self.ptr
	return super
}

func (self classCompressedCubemap) CompressedTextureLayered() CompressedTextureLayered {
	return self.Super()
}

type classCompressedCubemapArray struct {
	Class[classCompressedCubemapArray]
}

func (self classCompressedCubemapArray) Super() CompressedTextureLayered {
	var super CompressedTextureLayered
	super.ptr = self.ptr
	return super
}

func (self classCompressedCubemapArray) CompressedTextureLayered() CompressedTextureLayered {
	return self.Super()
}

type classCompressedTexture2D struct {
	Class[classCompressedTexture2D]
}

func (self classCompressedTexture2D) Super() Texture2D {
	var super Texture2D
	super.ptr = self.ptr
	return super
}

func (self classCompressedTexture2D) Texture2D() Texture2D { return self.Super() }
func (self classCompressedTexture2D) Load(path String) int64 {
	return self.ptr.API.CompressedTexture2D_load(self, path)
}
func (self classCompressedTexture2D) GetLoadPath() String {
	return self.ptr.API.CompressedTexture2D_get_load_path(self)
}

type classCompressedTexture2DArray struct {
	Class[classCompressedTexture2DArray]
}

func (self classCompressedTexture2DArray) Super() CompressedTextureLayered {
	var super CompressedTextureLayered
	super.ptr = self.ptr
	return super
}

func (self classCompressedTexture2DArray) CompressedTextureLayered() CompressedTextureLayered {
	return self.Super()
}

type classCompressedTexture3D struct {
	Class[classCompressedTexture3D]
}

func (self classCompressedTexture3D) Super() Texture3D {
	var super Texture3D
	super.ptr = self.ptr
	return super
}

func (self classCompressedTexture3D) Texture3D() Texture3D { return self.Super() }
func (self classCompressedTexture3D) Load(path String) int64 {
	return self.ptr.API.CompressedTexture3D_load(self, path)
}
func (self classCompressedTexture3D) GetLoadPath() String {
	return self.ptr.API.CompressedTexture3D_get_load_path(self)
}

type classCompressedTextureLayered struct {
	Class[classCompressedTextureLayered]
}

func (self classCompressedTextureLayered) Super() TextureLayered {
	var super TextureLayered
	super.ptr = self.ptr
	return super
}

func (self classCompressedTextureLayered) TextureLayered() TextureLayered { return self.Super() }
func (self classCompressedTextureLayered) Load(path String) int64 {
	return self.ptr.API.CompressedTextureLayered_load(self, path)
}
func (self classCompressedTextureLayered) GetLoadPath() String {
	return self.ptr.API.CompressedTextureLayered_get_load_path(self)
}

type classConcavePolygonShape2D struct {
	Class[classConcavePolygonShape2D]
}

func (self classConcavePolygonShape2D) Super() Shape2D {
	var super Shape2D
	super.ptr = self.ptr
	return super
}

func (self classConcavePolygonShape2D) Shape2D() Shape2D { return self.Super() }
func (self classConcavePolygonShape2D) SetSegments(segments PackedVector2Array) {
	self.ptr.API.ConcavePolygonShape2D_set_segments(self, segments)
}
func (self classConcavePolygonShape2D) GetSegments() PackedVector2Array {
	return self.ptr.API.ConcavePolygonShape2D_get_segments(self)
}

type classConcavePolygonShape3D struct {
	Class[classConcavePolygonShape3D]
}

func (self classConcavePolygonShape3D) Super() Shape3D {
	var super Shape3D
	super.ptr = self.ptr
	return super
}

func (self classConcavePolygonShape3D) Shape3D() Shape3D { return self.Super() }
func (self classConcavePolygonShape3D) SetFaces(faces PackedVector3Array) {
	self.ptr.API.ConcavePolygonShape3D_set_faces(self, faces)
}
func (self classConcavePolygonShape3D) GetFaces() PackedVector3Array {
	return self.ptr.API.ConcavePolygonShape3D_get_faces(self)
}
func (self classConcavePolygonShape3D) SetBackfaceCollisionEnabled(enabled bool) {
	self.ptr.API.ConcavePolygonShape3D_set_backface_collision_enabled(self, enabled)
}
func (self classConcavePolygonShape3D) IsBackfaceCollisionEnabled() bool {
	return self.ptr.API.ConcavePolygonShape3D_is_backface_collision_enabled(self)
}

type classConeTwistJoint3D struct{ Class[classConeTwistJoint3D] }

func (self classConeTwistJoint3D) Super() Joint3D {
	var super Joint3D
	super.ptr = self.ptr
	return super
}

func (self classConeTwistJoint3D) Joint3D() Joint3D { return self.Super() }
func (self classConeTwistJoint3D) SetParam(param ConeTwistJoint3DParam, value Float) {
	self.ptr.API.ConeTwistJoint3D_set_param(self, param, value)
}
func (self classConeTwistJoint3D) GetParam(param ConeTwistJoint3DParam) Float {
	return self.ptr.API.ConeTwistJoint3D_get_param(self, param)
}

type classConfigFile struct{ Class[classConfigFile] }

func (self classConfigFile) Super() RefCounted {
	var super RefCounted
	super.ptr = self.ptr
	return super
}

func (self classConfigFile) RefCounted() RefCounted { return self.Super() }
func (self classConfigFile) SetValue(section String, key String, value Variant) {
	self.ptr.API.ConfigFile_set_value(self, section, key, value)
}
func (self classConfigFile) GetValue(section String, key String, def Variant) Variant {
	return self.ptr.API.ConfigFile_get_value(self, section, key, def)
}
func (self classConfigFile) HasSection(section String) bool {
	return self.ptr.API.ConfigFile_has_section(self, section)
}
func (self classConfigFile) HasSectionKey(section String, key String) bool {
	return self.ptr.API.ConfigFile_has_section_key(self, section, key)
}
func (self classConfigFile) GetSections() PackedStringArray {
	return self.ptr.API.ConfigFile_get_sections(self)
}
func (self classConfigFile) GetSectionKeys(section String) PackedStringArray {
	return self.ptr.API.ConfigFile_get_section_keys(self, section)
}
func (self classConfigFile) EraseSection(section String) {
	self.ptr.API.ConfigFile_erase_section(self, section)
}
func (self classConfigFile) EraseSectionKey(section String, key String) {
	self.ptr.API.ConfigFile_erase_section_key(self, section, key)
}
func (self classConfigFile) Load(path String) int64 {
	return self.ptr.API.ConfigFile_load(self, path)
}
func (self classConfigFile) Parse(data String) int64 {
	return self.ptr.API.ConfigFile_parse(self, data)
}
func (self classConfigFile) Save(path String) int64 {
	return self.ptr.API.ConfigFile_save(self, path)
}
func (self classConfigFile) EncodeToText() String {
	return self.ptr.API.ConfigFile_encode_to_text(self)
}
func (self classConfigFile) LoadEncrypted(path String, key PackedByteArray) int64 {
	return self.ptr.API.ConfigFile_load_encrypted(self, path, key)
}
func (self classConfigFile) LoadEncryptedPass(path String, password String) int64 {
	return self.ptr.API.ConfigFile_load_encrypted_pass(self, path, password)
}
func (self classConfigFile) SaveEncrypted(path String, key PackedByteArray) int64 {
	return self.ptr.API.ConfigFile_save_encrypted(self, path, key)
}
func (self classConfigFile) SaveEncryptedPass(path String, password String) int64 {
	return self.ptr.API.ConfigFile_save_encrypted_pass(self, path, password)
}
func (self classConfigFile) Clear() {
	self.ptr.API.ConfigFile_clear(self)
}

type classConfirmationDialog struct{ Class[classConfirmationDialog] }

func (self classConfirmationDialog) Super() AcceptDialog {
	var super AcceptDialog
	super.ptr = self.ptr
	return super
}

func (self classConfirmationDialog) AcceptDialog() AcceptDialog { return self.Super() }
func (self classConfirmationDialog) GetCancelButton() Button {
	return self.ptr.API.ConfirmationDialog_get_cancel_button(self)
}
func (self classConfirmationDialog) SetCancelButtonText(text String) {
	self.ptr.API.ConfirmationDialog_set_cancel_button_text(self, text)
}
func (self classConfirmationDialog) GetCancelButtonText() String {
	return self.ptr.API.ConfirmationDialog_get_cancel_button_text(self)
}

type classContainer struct{ Class[classContainer] }

func (self classContainer) Super() Control { var super Control; super.ptr = self.ptr; return super }

func (self classContainer) Control() Control { return self.Super() }
func (self classContainer) QueueSort() {
	self.ptr.API.Container_queue_sort(self)
}
func (self classContainer) FitChildInRect(child Control, rect Rect2) {
	self.ptr.API.Container_fit_child_in_rect(self, child, rect)
}

type classControl struct{ Class[classControl] }

func (self classControl) Super() CanvasItem { var super CanvasItem; super.ptr = self.ptr; return super }

func (self classControl) CanvasItem() CanvasItem { return self.Super() }
func (self classControl) AcceptEvent() {
	self.ptr.API.Control_accept_event(self)
}
func (self classControl) GetMinimumSize() Vector2 {
	return self.ptr.API.Control_get_minimum_size(self)
}
func (self classControl) GetCombinedMinimumSize() Vector2 {
	return self.ptr.API.Control_get_combined_minimum_size(self)
}
func (self classControl) SetAnchorsPreset(preset ControlLayoutPreset, keep_offsets bool) {
	self.ptr.API.Control_set_anchors_preset(self, preset, keep_offsets)
}
func (self classControl) SetOffsetsPreset(preset ControlLayoutPreset, resize_mode ControlLayoutPresetMode, margin Int) {
	self.ptr.API.Control_set_offsets_preset(self, preset, resize_mode, margin)
}
func (self classControl) SetAnchorsAndOffsetsPreset(preset ControlLayoutPreset, resize_mode ControlLayoutPresetMode, margin Int) {
	self.ptr.API.Control_set_anchors_and_offsets_preset(self, preset, resize_mode, margin)
}
func (self classControl) SetAnchor(side Side, anchor Float, keep_offset bool, push_opposite_anchor bool) {
	self.ptr.API.Control_set_anchor(self, side, anchor, keep_offset, push_opposite_anchor)
}
func (self classControl) GetAnchor(side Side) Float {
	return self.ptr.API.Control_get_anchor(self, side)
}
func (self classControl) SetOffset(side Side, offset Float) {
	self.ptr.API.Control_set_offset(self, side, offset)
}
func (self classControl) GetOffset(offset Side) Float {
	return self.ptr.API.Control_get_offset(self, offset)
}
func (self classControl) SetAnchorAndOffset(side Side, anchor Float, offset Float, push_opposite_anchor bool) {
	self.ptr.API.Control_set_anchor_and_offset(self, side, anchor, offset, push_opposite_anchor)
}
func (self classControl) SetBegin(position Vector2) {
	self.ptr.API.Control_set_begin(self, position)
}
func (self classControl) SetEnd(position Vector2) {
	self.ptr.API.Control_set_end(self, position)
}
func (self classControl) SetPosition(position Vector2, keep_offsets bool) {
	self.ptr.API.Control_set_position(self, position, keep_offsets)
}
func (self classControl) SetSize(size Vector2, keep_offsets bool) {
	self.ptr.API.Control_set_size(self, size, keep_offsets)
}
func (self classControl) ResetSize() {
	self.ptr.API.Control_reset_size(self)
}
func (self classControl) SetCustomMinimumSize(size Vector2) {
	self.ptr.API.Control_set_custom_minimum_size(self, size)
}
func (self classControl) SetGlobalPosition(position Vector2, keep_offsets bool) {
	self.ptr.API.Control_set_global_position(self, position, keep_offsets)
}
func (self classControl) SetRotation(radians Float) {
	self.ptr.API.Control_set_rotation(self, radians)
}
func (self classControl) SetRotationDegrees(degrees Float) {
	self.ptr.API.Control_set_rotation_degrees(self, degrees)
}
func (self classControl) SetScale(scale Vector2) {
	self.ptr.API.Control_set_scale(self, scale)
}
func (self classControl) SetPivotOffset(pivot_offset Vector2) {
	self.ptr.API.Control_set_pivot_offset(self, pivot_offset)
}
func (self classControl) GetBegin() Vector2 {
	return self.ptr.API.Control_get_begin(self)
}
func (self classControl) GetEnd() Vector2 {
	return self.ptr.API.Control_get_end(self)
}
func (self classControl) GetPosition() Vector2 {
	return self.ptr.API.Control_get_position(self)
}
func (self classControl) GetSize() Vector2 {
	return self.ptr.API.Control_get_size(self)
}
func (self classControl) GetRotation() Float {
	return self.ptr.API.Control_get_rotation(self)
}
func (self classControl) GetRotationDegrees() Float {
	return self.ptr.API.Control_get_rotation_degrees(self)
}
func (self classControl) GetScale() Vector2 {
	return self.ptr.API.Control_get_scale(self)
}
func (self classControl) GetPivotOffset() Vector2 {
	return self.ptr.API.Control_get_pivot_offset(self)
}
func (self classControl) GetCustomMinimumSize() Vector2 {
	return self.ptr.API.Control_get_custom_minimum_size(self)
}
func (self classControl) GetParentAreaSize() Vector2 {
	return self.ptr.API.Control_get_parent_area_size(self)
}
func (self classControl) GetGlobalPosition() Vector2 {
	return self.ptr.API.Control_get_global_position(self)
}
func (self classControl) GetScreenPosition() Vector2 {
	return self.ptr.API.Control_get_screen_position(self)
}
func (self classControl) GetRect() Rect2 {
	return self.ptr.API.Control_get_rect(self)
}
func (self classControl) GetGlobalRect() Rect2 {
	return self.ptr.API.Control_get_global_rect(self)
}
func (self classControl) SetFocusMode(mode ControlFocusMode) {
	self.ptr.API.Control_set_focus_mode(self, mode)
}
func (self classControl) GetFocusMode() ControlFocusMode {
	return self.ptr.API.Control_get_focus_mode(self)
}
func (self classControl) HasFocus() bool {
	return self.ptr.API.Control_has_focus(self)
}
func (self classControl) GrabFocus() {
	self.ptr.API.Control_grab_focus(self)
}
func (self classControl) ReleaseFocus() {
	self.ptr.API.Control_release_focus(self)
}
func (self classControl) FindPrevValidFocus() Control {
	return self.ptr.API.Control_find_prev_valid_focus(self)
}
func (self classControl) FindNextValidFocus() Control {
	return self.ptr.API.Control_find_next_valid_focus(self)
}
func (self classControl) FindValidFocusNeighbor(side Side) Control {
	return self.ptr.API.Control_find_valid_focus_neighbor(self, side)
}
func (self classControl) SetHSizeFlags(flags ControlSizeFlags) {
	self.ptr.API.Control_set_h_size_flags(self, flags)
}
func (self classControl) GetHSizeFlags() ControlSizeFlags {
	return self.ptr.API.Control_get_h_size_flags(self)
}
func (self classControl) SetStretchRatio(ratio Float) {
	self.ptr.API.Control_set_stretch_ratio(self, ratio)
}
func (self classControl) GetStretchRatio() Float {
	return self.ptr.API.Control_get_stretch_ratio(self)
}
func (self classControl) SetVSizeFlags(flags ControlSizeFlags) {
	self.ptr.API.Control_set_v_size_flags(self, flags)
}
func (self classControl) GetVSizeFlags() ControlSizeFlags {
	return self.ptr.API.Control_get_v_size_flags(self)
}
func (self classControl) SetTheme(theme Theme) {
	self.ptr.API.Control_set_theme(self, theme)
}
func (self classControl) GetTheme() Theme {
	return self.ptr.API.Control_get_theme(self)
}
func (self classControl) SetThemeTypeVariation(theme_type StringName) {
	self.ptr.API.Control_set_theme_type_variation(self, theme_type)
}
func (self classControl) GetThemeTypeVariation() StringName {
	return self.ptr.API.Control_get_theme_type_variation(self)
}
func (self classControl) BeginBulkThemeOverride() {
	self.ptr.API.Control_begin_bulk_theme_override(self)
}
func (self classControl) EndBulkThemeOverride() {
	self.ptr.API.Control_end_bulk_theme_override(self)
}
func (self classControl) AddThemeIconOverride(name StringName, texture Texture2D) {
	self.ptr.API.Control_add_theme_icon_override(self, name, texture)
}
func (self classControl) AddThemeStyleboxOverride(name StringName, stylebox StyleBox) {
	self.ptr.API.Control_add_theme_stylebox_override(self, name, stylebox)
}
func (self classControl) AddThemeFontOverride(name StringName, font Font) {
	self.ptr.API.Control_add_theme_font_override(self, name, font)
}
func (self classControl) AddThemeFontSizeOverride(name StringName, font_size Int) {
	self.ptr.API.Control_add_theme_font_size_override(self, name, font_size)
}
func (self classControl) AddThemeColorOverride(name StringName, color Color) {
	self.ptr.API.Control_add_theme_color_override(self, name, color)
}
func (self classControl) AddThemeConstantOverride(name StringName, constant Int) {
	self.ptr.API.Control_add_theme_constant_override(self, name, constant)
}
func (self classControl) RemoveThemeIconOverride(name StringName) {
	self.ptr.API.Control_remove_theme_icon_override(self, name)
}
func (self classControl) RemoveThemeStyleboxOverride(name StringName) {
	self.ptr.API.Control_remove_theme_stylebox_override(self, name)
}
func (self classControl) RemoveThemeFontOverride(name StringName) {
	self.ptr.API.Control_remove_theme_font_override(self, name)
}
func (self classControl) RemoveThemeFontSizeOverride(name StringName) {
	self.ptr.API.Control_remove_theme_font_size_override(self, name)
}
func (self classControl) RemoveThemeColorOverride(name StringName) {
	self.ptr.API.Control_remove_theme_color_override(self, name)
}
func (self classControl) RemoveThemeConstantOverride(name StringName) {
	self.ptr.API.Control_remove_theme_constant_override(self, name)
}
func (self classControl) GetThemeIcon(name StringName, theme_type StringName) Texture2D {
	return self.ptr.API.Control_get_theme_icon(self, name, theme_type)
}
func (self classControl) GetThemeStylebox(name StringName, theme_type StringName) StyleBox {
	return self.ptr.API.Control_get_theme_stylebox(self, name, theme_type)
}
func (self classControl) GetThemeFont(name StringName, theme_type StringName) Font {
	return self.ptr.API.Control_get_theme_font(self, name, theme_type)
}
func (self classControl) GetThemeFontSize(name StringName, theme_type StringName) Int {
	return self.ptr.API.Control_get_theme_font_size(self, name, theme_type)
}
func (self classControl) GetThemeColor(name StringName, theme_type StringName) Color {
	return self.ptr.API.Control_get_theme_color(self, name, theme_type)
}
func (self classControl) GetThemeConstant(name StringName, theme_type StringName) Int {
	return self.ptr.API.Control_get_theme_constant(self, name, theme_type)
}
func (self classControl) HasThemeIconOverride(name StringName) bool {
	return self.ptr.API.Control_has_theme_icon_override(self, name)
}
func (self classControl) HasThemeStyleboxOverride(name StringName) bool {
	return self.ptr.API.Control_has_theme_stylebox_override(self, name)
}
func (self classControl) HasThemeFontOverride(name StringName) bool {
	return self.ptr.API.Control_has_theme_font_override(self, name)
}
func (self classControl) HasThemeFontSizeOverride(name StringName) bool {
	return self.ptr.API.Control_has_theme_font_size_override(self, name)
}
func (self classControl) HasThemeColorOverride(name StringName) bool {
	return self.ptr.API.Control_has_theme_color_override(self, name)
}
func (self classControl) HasThemeConstantOverride(name StringName) bool {
	return self.ptr.API.Control_has_theme_constant_override(self, name)
}
func (self classControl) HasThemeIcon(name StringName, theme_type StringName) bool {
	return self.ptr.API.Control_has_theme_icon(self, name, theme_type)
}
func (self classControl) HasThemeStylebox(name StringName, theme_type StringName) bool {
	return self.ptr.API.Control_has_theme_stylebox(self, name, theme_type)
}
func (self classControl) HasThemeFont(name StringName, theme_type StringName) bool {
	return self.ptr.API.Control_has_theme_font(self, name, theme_type)
}
func (self classControl) HasThemeFontSize(name StringName, theme_type StringName) bool {
	return self.ptr.API.Control_has_theme_font_size(self, name, theme_type)
}
func (self classControl) HasThemeColor(name StringName, theme_type StringName) bool {
	return self.ptr.API.Control_has_theme_color(self, name, theme_type)
}
func (self classControl) HasThemeConstant(name StringName, theme_type StringName) bool {
	return self.ptr.API.Control_has_theme_constant(self, name, theme_type)
}
func (self classControl) GetThemeDefaultBaseScale() Float {
	return self.ptr.API.Control_get_theme_default_base_scale(self)
}
func (self classControl) GetThemeDefaultFont() Font {
	return self.ptr.API.Control_get_theme_default_font(self)
}
func (self classControl) GetThemeDefaultFontSize() Int {
	return self.ptr.API.Control_get_theme_default_font_size(self)
}
func (self classControl) GetParentControl() Control {
	return self.ptr.API.Control_get_parent_control(self)
}
func (self classControl) SetHGrowDirection(direction ControlGrowDirection) {
	self.ptr.API.Control_set_h_grow_direction(self, direction)
}
func (self classControl) GetHGrowDirection() ControlGrowDirection {
	return self.ptr.API.Control_get_h_grow_direction(self)
}
func (self classControl) SetVGrowDirection(direction ControlGrowDirection) {
	self.ptr.API.Control_set_v_grow_direction(self, direction)
}
func (self classControl) GetVGrowDirection() ControlGrowDirection {
	return self.ptr.API.Control_get_v_grow_direction(self)
}
func (self classControl) SetTooltipText(hint String) {
	self.ptr.API.Control_set_tooltip_text(self, hint)
}
func (self classControl) GetTooltipText() String {
	return self.ptr.API.Control_get_tooltip_text(self)
}
func (self classControl) GetTooltip(at_position Vector2) String {
	return self.ptr.API.Control_get_tooltip(self, at_position)
}
func (self classControl) SetDefaultCursorShape(shape ControlCursorShape) {
	self.ptr.API.Control_set_default_cursor_shape(self, shape)
}
func (self classControl) GetDefaultCursorShape() ControlCursorShape {
	return self.ptr.API.Control_get_default_cursor_shape(self)
}
func (self classControl) GetCursorShape(position Vector2) ControlCursorShape {
	return self.ptr.API.Control_get_cursor_shape(self, position)
}
func (self classControl) SetFocusNeighbor(side Side, neighbor NodePath) {
	self.ptr.API.Control_set_focus_neighbor(self, side, neighbor)
}
func (self classControl) GetFocusNeighbor(side Side) NodePath {
	return self.ptr.API.Control_get_focus_neighbor(self, side)
}
func (self classControl) SetFocusNext(next NodePath) {
	self.ptr.API.Control_set_focus_next(self, next)
}
func (self classControl) GetFocusNext() NodePath {
	return self.ptr.API.Control_get_focus_next(self)
}
func (self classControl) SetFocusPrevious(previous NodePath) {
	self.ptr.API.Control_set_focus_previous(self, previous)
}
func (self classControl) GetFocusPrevious() NodePath {
	return self.ptr.API.Control_get_focus_previous(self)
}
func (self classControl) ForceDrag(data Variant, preview Control) {
	self.ptr.API.Control_force_drag(self, data, preview)
}
func (self classControl) SetMouseFilter(filter ControlMouseFilter) {
	self.ptr.API.Control_set_mouse_filter(self, filter)
}
func (self classControl) GetMouseFilter() ControlMouseFilter {
	return self.ptr.API.Control_get_mouse_filter(self)
}
func (self classControl) SetForcePassScrollEvents(force_pass_scroll_events bool) {
	self.ptr.API.Control_set_force_pass_scroll_events(self, force_pass_scroll_events)
}
func (self classControl) IsForcePassScrollEvents() bool {
	return self.ptr.API.Control_is_force_pass_scroll_events(self)
}
func (self classControl) SetClipContents(enable bool) {
	self.ptr.API.Control_set_clip_contents(self, enable)
}
func (self classControl) IsClippingContents() bool {
	return self.ptr.API.Control_is_clipping_contents(self)
}
func (self classControl) GrabClickFocus() {
	self.ptr.API.Control_grab_click_focus(self)
}
func (self classControl) SetDragForwarding(drag_func Callable, can_drop_func Callable, drop_func Callable) {
	self.ptr.API.Control_set_drag_forwarding(self, drag_func, can_drop_func, drop_func)
}
func (self classControl) SetDragPreview(control Control) {
	self.ptr.API.Control_set_drag_preview(self, control)
}
func (self classControl) IsDragSuccessful() bool {
	return self.ptr.API.Control_is_drag_successful(self)
}
func (self classControl) WarpMouse(position Vector2) {
	self.ptr.API.Control_warp_mouse(self, position)
}
func (self classControl) SetShortcutContext(node Node) {
	self.ptr.API.Control_set_shortcut_context(self, node)
}
func (self classControl) GetShortcutContext() Node {
	return self.ptr.API.Control_get_shortcut_context(self)
}
func (self classControl) UpdateMinimumSize() {
	self.ptr.API.Control_update_minimum_size(self)
}
func (self classControl) SetLayoutDirection(direction ControlLayoutDirection) {
	self.ptr.API.Control_set_layout_direction(self, direction)
}
func (self classControl) GetLayoutDirection() ControlLayoutDirection {
	return self.ptr.API.Control_get_layout_direction(self)
}
func (self classControl) IsLayoutRtl() bool {
	return self.ptr.API.Control_is_layout_rtl(self)
}
func (self classControl) SetAutoTranslate(enable bool) {
	self.ptr.API.Control_set_auto_translate(self, enable)
}
func (self classControl) IsAutoTranslating() bool {
	return self.ptr.API.Control_is_auto_translating(self)
}
func (self classControl) SetLocalizeNumeralSystem(enable bool) {
	self.ptr.API.Control_set_localize_numeral_system(self, enable)
}
func (self classControl) IsLocalizingNumeralSystem() bool {
	return self.ptr.API.Control_is_localizing_numeral_system(self)
}

type classConvexPolygonShape2D struct {
	Class[classConvexPolygonShape2D]
}

func (self classConvexPolygonShape2D) Super() Shape2D {
	var super Shape2D
	super.ptr = self.ptr
	return super
}

func (self classConvexPolygonShape2D) Shape2D() Shape2D { return self.Super() }
func (self classConvexPolygonShape2D) SetPointCloud(point_cloud PackedVector2Array) {
	self.ptr.API.ConvexPolygonShape2D_set_point_cloud(self, point_cloud)
}
func (self classConvexPolygonShape2D) SetPoints(points PackedVector2Array) {
	self.ptr.API.ConvexPolygonShape2D_set_points(self, points)
}
func (self classConvexPolygonShape2D) GetPoints() PackedVector2Array {
	return self.ptr.API.ConvexPolygonShape2D_get_points(self)
}

type classConvexPolygonShape3D struct {
	Class[classConvexPolygonShape3D]
}

func (self classConvexPolygonShape3D) Super() Shape3D {
	var super Shape3D
	super.ptr = self.ptr
	return super
}

func (self classConvexPolygonShape3D) Shape3D() Shape3D { return self.Super() }
func (self classConvexPolygonShape3D) SetPoints(points PackedVector3Array) {
	self.ptr.API.ConvexPolygonShape3D_set_points(self, points)
}
func (self classConvexPolygonShape3D) GetPoints() PackedVector3Array {
	return self.ptr.API.ConvexPolygonShape3D_get_points(self)
}

type classCrypto struct{ Class[classCrypto] }

func (self classCrypto) Super() RefCounted { var super RefCounted; super.ptr = self.ptr; return super }

func (self classCrypto) RefCounted() RefCounted { return self.Super() }
func (self classCrypto) GenerateRandomBytes(size Int) PackedByteArray {
	return self.ptr.API.Crypto_generate_random_bytes(self, size)
}
func (self classCrypto) GenerateRsa(size Int) CryptoKey {
	return self.ptr.API.Crypto_generate_rsa(self, size)
}
func (self classCrypto) GenerateSelfSignedCertificate(key CryptoKey, issuer_name String, not_before String, not_after String) X509Certificate {
	return self.ptr.API.Crypto_generate_self_signed_certificate(self, key, issuer_name, not_before, not_after)
}
func (self classCrypto) Sign(hash_type HashingContextHashType, hash PackedByteArray, key CryptoKey) PackedByteArray {
	return self.ptr.API.Crypto_sign(self, hash_type, hash, key)
}
func (self classCrypto) Verify(hash_type HashingContextHashType, hash PackedByteArray, signature PackedByteArray, key CryptoKey) bool {
	return self.ptr.API.Crypto_verify(self, hash_type, hash, signature, key)
}
func (self classCrypto) Encrypt(key CryptoKey, plaintext PackedByteArray) PackedByteArray {
	return self.ptr.API.Crypto_encrypt(self, key, plaintext)
}
func (self classCrypto) Decrypt(key CryptoKey, ciphertext PackedByteArray) PackedByteArray {
	return self.ptr.API.Crypto_decrypt(self, key, ciphertext)
}
func (self classCrypto) HmacDigest(hash_type HashingContextHashType, key PackedByteArray, msg PackedByteArray) PackedByteArray {
	return self.ptr.API.Crypto_hmac_digest(self, hash_type, key, msg)
}
func (self classCrypto) ConstantTimeCompare(trusted PackedByteArray, received PackedByteArray) bool {
	return self.ptr.API.Crypto_constant_time_compare(self, trusted, received)
}

type classCryptoKey struct{ Class[classCryptoKey] }

func (self classCryptoKey) Super() Resource { var super Resource; super.ptr = self.ptr; return super }

func (self classCryptoKey) Resource() Resource { return self.Super() }
func (self classCryptoKey) Save(path String, public_only bool) int64 {
	return self.ptr.API.CryptoKey_save(self, path, public_only)
}
func (self classCryptoKey) Load(path String, public_only bool) int64 {
	return self.ptr.API.CryptoKey_load(self, path, public_only)
}
func (self classCryptoKey) IsPublicOnly() bool {
	return self.ptr.API.CryptoKey_is_public_only(self)
}
func (self classCryptoKey) SaveToString(public_only bool) String {
	return self.ptr.API.CryptoKey_save_to_string(self, public_only)
}
func (self classCryptoKey) LoadFromString(string_key String, public_only bool) int64 {
	return self.ptr.API.CryptoKey_load_from_string(self, string_key, public_only)
}

type classCubemap struct{ Class[classCubemap] }

func (self classCubemap) Super() ImageTextureLayered {
	var super ImageTextureLayered
	super.ptr = self.ptr
	return super
}

func (self classCubemap) ImageTextureLayered() ImageTextureLayered { return self.Super() }
func (self classCubemap) CreatePlaceholder() Resource {
	return self.ptr.API.Cubemap_create_placeholder(self)
}

type classCubemapArray struct{ Class[classCubemapArray] }

func (self classCubemapArray) Super() ImageTextureLayered {
	var super ImageTextureLayered
	super.ptr = self.ptr
	return super
}

func (self classCubemapArray) ImageTextureLayered() ImageTextureLayered { return self.Super() }
func (self classCubemapArray) CreatePlaceholder() Resource {
	return self.ptr.API.CubemapArray_create_placeholder(self)
}

type classCurve struct{ Class[classCurve] }

func (self classCurve) Super() Resource { var super Resource; super.ptr = self.ptr; return super }

func (self classCurve) Resource() Resource { return self.Super() }
func (self classCurve) GetPointCount() Int {
	return self.ptr.API.Curve_get_point_count(self)
}
func (self classCurve) SetPointCount(count Int) {
	self.ptr.API.Curve_set_point_count(self, count)
}
func (self classCurve) AddPoint(position Vector2, left_tangent Float, right_tangent Float, left_mode CurveTangentMode, right_mode CurveTangentMode) Int {
	return self.ptr.API.Curve_add_point(self, position, left_tangent, right_tangent, left_mode, right_mode)
}
func (self classCurve) RemovePoint(index Int) {
	self.ptr.API.Curve_remove_point(self, index)
}
func (self classCurve) ClearPoints() {
	self.ptr.API.Curve_clear_points(self)
}
func (self classCurve) GetPointPosition(index Int) Vector2 {
	return self.ptr.API.Curve_get_point_position(self, index)
}
func (self classCurve) SetPointValue(index Int, y Float) {
	self.ptr.API.Curve_set_point_value(self, index, y)
}
func (self classCurve) SetPointOffset(index Int, offset Float) Int {
	return self.ptr.API.Curve_set_point_offset(self, index, offset)
}
func (self classCurve) Sample(offset Float) Float {
	return self.ptr.API.Curve_sample(self, offset)
}
func (self classCurve) SampleBaked(offset Float) Float {
	return self.ptr.API.Curve_sample_baked(self, offset)
}
func (self classCurve) GetPointLeftTangent(index Int) Float {
	return self.ptr.API.Curve_get_point_left_tangent(self, index)
}
func (self classCurve) GetPointRightTangent(index Int) Float {
	return self.ptr.API.Curve_get_point_right_tangent(self, index)
}
func (self classCurve) GetPointLeftMode(index Int) CurveTangentMode {
	return self.ptr.API.Curve_get_point_left_mode(self, index)
}
func (self classCurve) GetPointRightMode(index Int) CurveTangentMode {
	return self.ptr.API.Curve_get_point_right_mode(self, index)
}
func (self classCurve) SetPointLeftTangent(index Int, tangent Float) {
	self.ptr.API.Curve_set_point_left_tangent(self, index, tangent)
}
func (self classCurve) SetPointRightTangent(index Int, tangent Float) {
	self.ptr.API.Curve_set_point_right_tangent(self, index, tangent)
}
func (self classCurve) SetPointLeftMode(index Int, mode CurveTangentMode) {
	self.ptr.API.Curve_set_point_left_mode(self, index, mode)
}
func (self classCurve) SetPointRightMode(index Int, mode CurveTangentMode) {
	self.ptr.API.Curve_set_point_right_mode(self, index, mode)
}
func (self classCurve) GetMinValue() Float {
	return self.ptr.API.Curve_get_min_value(self)
}
func (self classCurve) SetMinValue(min Float) {
	self.ptr.API.Curve_set_min_value(self, min)
}
func (self classCurve) GetMaxValue() Float {
	return self.ptr.API.Curve_get_max_value(self)
}
func (self classCurve) SetMaxValue(max Float) {
	self.ptr.API.Curve_set_max_value(self, max)
}
func (self classCurve) CleanDupes() {
	self.ptr.API.Curve_clean_dupes(self)
}
func (self classCurve) Bake() {
	self.ptr.API.Curve_bake(self)
}
func (self classCurve) GetBakeResolution() Int {
	return self.ptr.API.Curve_get_bake_resolution(self)
}
func (self classCurve) SetBakeResolution(resolution Int) {
	self.ptr.API.Curve_set_bake_resolution(self, resolution)
}

type classCurve2D struct{ Class[classCurve2D] }

func (self classCurve2D) Super() Resource { var super Resource; super.ptr = self.ptr; return super }

func (self classCurve2D) Resource() Resource { return self.Super() }
func (self classCurve2D) GetPointCount() Int {
	return self.ptr.API.Curve2D_get_point_count(self)
}
func (self classCurve2D) SetPointCount(count Int) {
	self.ptr.API.Curve2D_set_point_count(self, count)
}
func (self classCurve2D) AddPoint(position Vector2, in Vector2, out Vector2, index Int) {
	self.ptr.API.Curve2D_add_point(self, position, in, out, index)
}
func (self classCurve2D) SetPointPosition(idx Int, position Vector2) {
	self.ptr.API.Curve2D_set_point_position(self, idx, position)
}
func (self classCurve2D) GetPointPosition(idx Int) Vector2 {
	return self.ptr.API.Curve2D_get_point_position(self, idx)
}
func (self classCurve2D) SetPointIn(idx Int, position Vector2) {
	self.ptr.API.Curve2D_set_point_in(self, idx, position)
}
func (self classCurve2D) GetPointIn(idx Int) Vector2 {
	return self.ptr.API.Curve2D_get_point_in(self, idx)
}
func (self classCurve2D) SetPointOut(idx Int, position Vector2) {
	self.ptr.API.Curve2D_set_point_out(self, idx, position)
}
func (self classCurve2D) GetPointOut(idx Int) Vector2 {
	return self.ptr.API.Curve2D_get_point_out(self, idx)
}
func (self classCurve2D) RemovePoint(idx Int) {
	self.ptr.API.Curve2D_remove_point(self, idx)
}
func (self classCurve2D) ClearPoints() {
	self.ptr.API.Curve2D_clear_points(self)
}
func (self classCurve2D) Sample(idx Int, t Float) Vector2 {
	return self.ptr.API.Curve2D_sample(self, idx, t)
}
func (self classCurve2D) Samplef(fofs Float) Vector2 {
	return self.ptr.API.Curve2D_samplef(self, fofs)
}
func (self classCurve2D) SetBakeInterval(distance Float) {
	self.ptr.API.Curve2D_set_bake_interval(self, distance)
}
func (self classCurve2D) GetBakeInterval() Float {
	return self.ptr.API.Curve2D_get_bake_interval(self)
}
func (self classCurve2D) GetBakedLength() Float {
	return self.ptr.API.Curve2D_get_baked_length(self)
}
func (self classCurve2D) SampleBaked(offset Float, cubic bool) Vector2 {
	return self.ptr.API.Curve2D_sample_baked(self, offset, cubic)
}
func (self classCurve2D) SampleBakedWithRotation(offset Float, cubic bool) Transform2D {
	return self.ptr.API.Curve2D_sample_baked_with_rotation(self, offset, cubic)
}
func (self classCurve2D) GetBakedPoints() PackedVector2Array {
	return self.ptr.API.Curve2D_get_baked_points(self)
}
func (self classCurve2D) GetClosestPoint(to_point Vector2) Vector2 {
	return self.ptr.API.Curve2D_get_closest_point(self, to_point)
}
func (self classCurve2D) GetClosestOffset(to_point Vector2) Float {
	return self.ptr.API.Curve2D_get_closest_offset(self, to_point)
}
func (self classCurve2D) Tessellate(max_stages Int, tolerance_degrees Float) PackedVector2Array {
	return self.ptr.API.Curve2D_tessellate(self, max_stages, tolerance_degrees)
}
func (self classCurve2D) TessellateEvenLength(max_stages Int, tolerance_length Float) PackedVector2Array {
	return self.ptr.API.Curve2D_tessellate_even_length(self, max_stages, tolerance_length)
}

type classCurve3D struct{ Class[classCurve3D] }

func (self classCurve3D) Super() Resource { var super Resource; super.ptr = self.ptr; return super }

func (self classCurve3D) Resource() Resource { return self.Super() }
func (self classCurve3D) GetPointCount() Int {
	return self.ptr.API.Curve3D_get_point_count(self)
}
func (self classCurve3D) SetPointCount(count Int) {
	self.ptr.API.Curve3D_set_point_count(self, count)
}
func (self classCurve3D) AddPoint(position Vector3, in Vector3, out Vector3, index Int) {
	self.ptr.API.Curve3D_add_point(self, position, in, out, index)
}
func (self classCurve3D) SetPointPosition(idx Int, position Vector3) {
	self.ptr.API.Curve3D_set_point_position(self, idx, position)
}
func (self classCurve3D) GetPointPosition(idx Int) Vector3 {
	return self.ptr.API.Curve3D_get_point_position(self, idx)
}
func (self classCurve3D) SetPointTilt(idx Int, tilt Float) {
	self.ptr.API.Curve3D_set_point_tilt(self, idx, tilt)
}
func (self classCurve3D) GetPointTilt(idx Int) Float {
	return self.ptr.API.Curve3D_get_point_tilt(self, idx)
}
func (self classCurve3D) SetPointIn(idx Int, position Vector3) {
	self.ptr.API.Curve3D_set_point_in(self, idx, position)
}
func (self classCurve3D) GetPointIn(idx Int) Vector3 {
	return self.ptr.API.Curve3D_get_point_in(self, idx)
}
func (self classCurve3D) SetPointOut(idx Int, position Vector3) {
	self.ptr.API.Curve3D_set_point_out(self, idx, position)
}
func (self classCurve3D) GetPointOut(idx Int) Vector3 {
	return self.ptr.API.Curve3D_get_point_out(self, idx)
}
func (self classCurve3D) RemovePoint(idx Int) {
	self.ptr.API.Curve3D_remove_point(self, idx)
}
func (self classCurve3D) ClearPoints() {
	self.ptr.API.Curve3D_clear_points(self)
}
func (self classCurve3D) Sample(idx Int, t Float) Vector3 {
	return self.ptr.API.Curve3D_sample(self, idx, t)
}
func (self classCurve3D) Samplef(fofs Float) Vector3 {
	return self.ptr.API.Curve3D_samplef(self, fofs)
}
func (self classCurve3D) SetBakeInterval(distance Float) {
	self.ptr.API.Curve3D_set_bake_interval(self, distance)
}
func (self classCurve3D) GetBakeInterval() Float {
	return self.ptr.API.Curve3D_get_bake_interval(self)
}
func (self classCurve3D) SetUpVectorEnabled(enable bool) {
	self.ptr.API.Curve3D_set_up_vector_enabled(self, enable)
}
func (self classCurve3D) IsUpVectorEnabled() bool {
	return self.ptr.API.Curve3D_is_up_vector_enabled(self)
}
func (self classCurve3D) GetBakedLength() Float {
	return self.ptr.API.Curve3D_get_baked_length(self)
}
func (self classCurve3D) SampleBaked(offset Float, cubic bool) Vector3 {
	return self.ptr.API.Curve3D_sample_baked(self, offset, cubic)
}
func (self classCurve3D) SampleBakedWithRotation(offset Float, cubic bool, apply_tilt bool) Transform3D {
	return self.ptr.API.Curve3D_sample_baked_with_rotation(self, offset, cubic, apply_tilt)
}
func (self classCurve3D) SampleBakedUpVector(offset Float, apply_tilt bool) Vector3 {
	return self.ptr.API.Curve3D_sample_baked_up_vector(self, offset, apply_tilt)
}
func (self classCurve3D) GetBakedPoints() PackedVector3Array {
	return self.ptr.API.Curve3D_get_baked_points(self)
}
func (self classCurve3D) GetBakedTilts() PackedFloat32Array {
	return self.ptr.API.Curve3D_get_baked_tilts(self)
}
func (self classCurve3D) GetBakedUpVectors() PackedVector3Array {
	return self.ptr.API.Curve3D_get_baked_up_vectors(self)
}
func (self classCurve3D) GetClosestPoint(to_point Vector3) Vector3 {
	return self.ptr.API.Curve3D_get_closest_point(self, to_point)
}
func (self classCurve3D) GetClosestOffset(to_point Vector3) Float {
	return self.ptr.API.Curve3D_get_closest_offset(self, to_point)
}
func (self classCurve3D) Tessellate(max_stages Int, tolerance_degrees Float) PackedVector3Array {
	return self.ptr.API.Curve3D_tessellate(self, max_stages, tolerance_degrees)
}
func (self classCurve3D) TessellateEvenLength(max_stages Int, tolerance_length Float) PackedVector3Array {
	return self.ptr.API.Curve3D_tessellate_even_length(self, max_stages, tolerance_length)
}

type classCurveTexture struct{ Class[classCurveTexture] }

func (self classCurveTexture) Super() Texture2D {
	var super Texture2D
	super.ptr = self.ptr
	return super
}

func (self classCurveTexture) Texture2D() Texture2D { return self.Super() }
func (self classCurveTexture) SetWidth(width Int) {
	self.ptr.API.CurveTexture_set_width(self, width)
}
func (self classCurveTexture) SetCurve(curve Curve) {
	self.ptr.API.CurveTexture_set_curve(self, curve)
}
func (self classCurveTexture) GetCurve() Curve {
	return self.ptr.API.CurveTexture_get_curve(self)
}
func (self classCurveTexture) SetTextureMode(texture_mode CurveTextureTextureMode) {
	self.ptr.API.CurveTexture_set_texture_mode(self, texture_mode)
}
func (self classCurveTexture) GetTextureMode() CurveTextureTextureMode {
	return self.ptr.API.CurveTexture_get_texture_mode(self)
}

type classCurveXYZTexture struct{ Class[classCurveXYZTexture] }

func (self classCurveXYZTexture) Super() Texture2D {
	var super Texture2D
	super.ptr = self.ptr
	return super
}

func (self classCurveXYZTexture) Texture2D() Texture2D { return self.Super() }
func (self classCurveXYZTexture) SetWidth(width Int) {
	self.ptr.API.CurveXYZTexture_set_width(self, width)
}
func (self classCurveXYZTexture) SetCurveX(curve Curve) {
	self.ptr.API.CurveXYZTexture_set_curve_x(self, curve)
}
func (self classCurveXYZTexture) GetCurveX() Curve {
	return self.ptr.API.CurveXYZTexture_get_curve_x(self)
}
func (self classCurveXYZTexture) SetCurveY(curve Curve) {
	self.ptr.API.CurveXYZTexture_set_curve_y(self, curve)
}
func (self classCurveXYZTexture) GetCurveY() Curve {
	return self.ptr.API.CurveXYZTexture_get_curve_y(self)
}
func (self classCurveXYZTexture) SetCurveZ(curve Curve) {
	self.ptr.API.CurveXYZTexture_set_curve_z(self, curve)
}
func (self classCurveXYZTexture) GetCurveZ() Curve {
	return self.ptr.API.CurveXYZTexture_get_curve_z(self)
}

type classCylinderMesh struct{ Class[classCylinderMesh] }

func (self classCylinderMesh) Super() PrimitiveMesh {
	var super PrimitiveMesh
	super.ptr = self.ptr
	return super
}

func (self classCylinderMesh) PrimitiveMesh() PrimitiveMesh { return self.Super() }
func (self classCylinderMesh) SetTopRadius(radius Float) {
	self.ptr.API.CylinderMesh_set_top_radius(self, radius)
}
func (self classCylinderMesh) GetTopRadius() Float {
	return self.ptr.API.CylinderMesh_get_top_radius(self)
}
func (self classCylinderMesh) SetBottomRadius(radius Float) {
	self.ptr.API.CylinderMesh_set_bottom_radius(self, radius)
}
func (self classCylinderMesh) GetBottomRadius() Float {
	return self.ptr.API.CylinderMesh_get_bottom_radius(self)
}
func (self classCylinderMesh) SetHeight(height Float) {
	self.ptr.API.CylinderMesh_set_height(self, height)
}
func (self classCylinderMesh) GetHeight() Float {
	return self.ptr.API.CylinderMesh_get_height(self)
}
func (self classCylinderMesh) SetRadialSegments(segments Int) {
	self.ptr.API.CylinderMesh_set_radial_segments(self, segments)
}
func (self classCylinderMesh) GetRadialSegments() Int {
	return self.ptr.API.CylinderMesh_get_radial_segments(self)
}
func (self classCylinderMesh) SetRings(rings Int) {
	self.ptr.API.CylinderMesh_set_rings(self, rings)
}
func (self classCylinderMesh) GetRings() Int {
	return self.ptr.API.CylinderMesh_get_rings(self)
}
func (self classCylinderMesh) SetCapTop(cap_top bool) {
	self.ptr.API.CylinderMesh_set_cap_top(self, cap_top)
}
func (self classCylinderMesh) IsCapTop() bool {
	return self.ptr.API.CylinderMesh_is_cap_top(self)
}
func (self classCylinderMesh) SetCapBottom(cap_bottom bool) {
	self.ptr.API.CylinderMesh_set_cap_bottom(self, cap_bottom)
}
func (self classCylinderMesh) IsCapBottom() bool {
	return self.ptr.API.CylinderMesh_is_cap_bottom(self)
}

type classCylinderShape3D struct{ Class[classCylinderShape3D] }

func (self classCylinderShape3D) Super() Shape3D {
	var super Shape3D
	super.ptr = self.ptr
	return super
}

func (self classCylinderShape3D) Shape3D() Shape3D { return self.Super() }
func (self classCylinderShape3D) SetRadius(radius Float) {
	self.ptr.API.CylinderShape3D_set_radius(self, radius)
}
func (self classCylinderShape3D) GetRadius() Float {
	return self.ptr.API.CylinderShape3D_get_radius(self)
}
func (self classCylinderShape3D) SetHeight(height Float) {
	self.ptr.API.CylinderShape3D_set_height(self, height)
}
func (self classCylinderShape3D) GetHeight() Float {
	return self.ptr.API.CylinderShape3D_get_height(self)
}

type classDTLSServer struct{ Class[classDTLSServer] }

func (self classDTLSServer) Super() RefCounted {
	var super RefCounted
	super.ptr = self.ptr
	return super
}

func (self classDTLSServer) RefCounted() RefCounted { return self.Super() }
func (self classDTLSServer) Setup(server_options TLSOptions) int64 {
	return self.ptr.API.DTLSServer_setup(self, server_options)
}
func (self classDTLSServer) TakeConnection(udp_peer PacketPeerUDP) PacketPeerDTLS {
	return self.ptr.API.DTLSServer_take_connection(self, udp_peer)
}

type classDampedSpringJoint2D struct {
	Class[classDampedSpringJoint2D]
}

func (self classDampedSpringJoint2D) Super() Joint2D {
	var super Joint2D
	super.ptr = self.ptr
	return super
}

func (self classDampedSpringJoint2D) Joint2D() Joint2D { return self.Super() }
func (self classDampedSpringJoint2D) SetLength(length Float) {
	self.ptr.API.DampedSpringJoint2D_set_length(self, length)
}
func (self classDampedSpringJoint2D) GetLength() Float {
	return self.ptr.API.DampedSpringJoint2D_get_length(self)
}
func (self classDampedSpringJoint2D) SetRestLength(rest_length Float) {
	self.ptr.API.DampedSpringJoint2D_set_rest_length(self, rest_length)
}
func (self classDampedSpringJoint2D) GetRestLength() Float {
	return self.ptr.API.DampedSpringJoint2D_get_rest_length(self)
}
func (self classDampedSpringJoint2D) SetStiffness(stiffness Float) {
	self.ptr.API.DampedSpringJoint2D_set_stiffness(self, stiffness)
}
func (self classDampedSpringJoint2D) GetStiffness() Float {
	return self.ptr.API.DampedSpringJoint2D_get_stiffness(self)
}
func (self classDampedSpringJoint2D) SetDamping(damping Float) {
	self.ptr.API.DampedSpringJoint2D_set_damping(self, damping)
}
func (self classDampedSpringJoint2D) GetDamping() Float {
	return self.ptr.API.DampedSpringJoint2D_get_damping(self)
}

type classDecal struct{ Class[classDecal] }

func (self classDecal) Super() VisualInstance3D {
	var super VisualInstance3D
	super.ptr = self.ptr
	return super
}

func (self classDecal) VisualInstance3D() VisualInstance3D { return self.Super() }
func (self classDecal) SetSize(size Vector3) {
	self.ptr.API.Decal_set_size(self, size)
}
func (self classDecal) GetSize() Vector3 {
	return self.ptr.API.Decal_get_size(self)
}
func (self classDecal) SetTexture(atype DecalDecalTexture, texture Texture2D) {
	self.ptr.API.Decal_set_texture(self, atype, texture)
}
func (self classDecal) GetTexture(atype DecalDecalTexture) Texture2D {
	return self.ptr.API.Decal_get_texture(self, atype)
}
func (self classDecal) SetEmissionEnergy(energy Float) {
	self.ptr.API.Decal_set_emission_energy(self, energy)
}
func (self classDecal) GetEmissionEnergy() Float {
	return self.ptr.API.Decal_get_emission_energy(self)
}
func (self classDecal) SetAlbedoMix(energy Float) {
	self.ptr.API.Decal_set_albedo_mix(self, energy)
}
func (self classDecal) GetAlbedoMix() Float {
	return self.ptr.API.Decal_get_albedo_mix(self)
}
func (self classDecal) SetModulate(color Color) {
	self.ptr.API.Decal_set_modulate(self, color)
}
func (self classDecal) GetModulate() Color {
	return self.ptr.API.Decal_get_modulate(self)
}
func (self classDecal) SetUpperFade(fade Float) {
	self.ptr.API.Decal_set_upper_fade(self, fade)
}
func (self classDecal) GetUpperFade() Float {
	return self.ptr.API.Decal_get_upper_fade(self)
}
func (self classDecal) SetLowerFade(fade Float) {
	self.ptr.API.Decal_set_lower_fade(self, fade)
}
func (self classDecal) GetLowerFade() Float {
	return self.ptr.API.Decal_get_lower_fade(self)
}
func (self classDecal) SetNormalFade(fade Float) {
	self.ptr.API.Decal_set_normal_fade(self, fade)
}
func (self classDecal) GetNormalFade() Float {
	return self.ptr.API.Decal_get_normal_fade(self)
}
func (self classDecal) SetEnableDistanceFade(enable bool) {
	self.ptr.API.Decal_set_enable_distance_fade(self, enable)
}
func (self classDecal) IsDistanceFadeEnabled() bool {
	return self.ptr.API.Decal_is_distance_fade_enabled(self)
}
func (self classDecal) SetDistanceFadeBegin(distance Float) {
	self.ptr.API.Decal_set_distance_fade_begin(self, distance)
}
func (self classDecal) GetDistanceFadeBegin() Float {
	return self.ptr.API.Decal_get_distance_fade_begin(self)
}
func (self classDecal) SetDistanceFadeLength(distance Float) {
	self.ptr.API.Decal_set_distance_fade_length(self, distance)
}
func (self classDecal) GetDistanceFadeLength() Float {
	return self.ptr.API.Decal_get_distance_fade_length(self)
}
func (self classDecal) SetCullMask(mask Int) {
	self.ptr.API.Decal_set_cull_mask(self, mask)
}
func (self classDecal) GetCullMask() Int {
	return self.ptr.API.Decal_get_cull_mask(self)
}

type classDirAccess struct{ Class[classDirAccess] }

func (self classDirAccess) Super() RefCounted {
	var super RefCounted
	super.ptr = self.ptr
	return super
}

func (self classDirAccess) RefCounted() RefCounted { return self.Super() }
func (self classDirAccess) Open(path String) DirAccess {
	return self.ptr.API.DirAccess_open(self, path)
}
func (self classDirAccess) GetOpenError() int64 {
	return self.ptr.API.DirAccess_get_open_error(self)
}
func (self classDirAccess) ListDirBegin() int64 {
	return self.ptr.API.DirAccess_list_dir_begin(self)
}
func (self classDirAccess) GetNext() String {
	return self.ptr.API.DirAccess_get_next(self)
}
func (self classDirAccess) CurrentIsDir() bool {
	return self.ptr.API.DirAccess_current_is_dir(self)
}
func (self classDirAccess) ListDirEnd() {
	self.ptr.API.DirAccess_list_dir_end(self)
}
func (self classDirAccess) GetFiles() PackedStringArray {
	return self.ptr.API.DirAccess_get_files(self)
}
func (self classDirAccess) GetFilesAt(path String) PackedStringArray {
	return self.ptr.API.DirAccess_get_files_at(self, path)
}
func (self classDirAccess) GetDirectories() PackedStringArray {
	return self.ptr.API.DirAccess_get_directories(self)
}
func (self classDirAccess) GetDirectoriesAt(path String) PackedStringArray {
	return self.ptr.API.DirAccess_get_directories_at(self, path)
}
func (self classDirAccess) GetDriveCount() Int {
	return self.ptr.API.DirAccess_get_drive_count(self)
}
func (self classDirAccess) GetDriveName(idx Int) String {
	return self.ptr.API.DirAccess_get_drive_name(self, idx)
}
func (self classDirAccess) GetCurrentDrive() Int {
	return self.ptr.API.DirAccess_get_current_drive(self)
}
func (self classDirAccess) ChangeDir(to_dir String) int64 {
	return self.ptr.API.DirAccess_change_dir(self, to_dir)
}
func (self classDirAccess) GetCurrentDir(include_drive bool) String {
	return self.ptr.API.DirAccess_get_current_dir(self, include_drive)
}
func (self classDirAccess) MakeDir(path String) int64 {
	return self.ptr.API.DirAccess_make_dir(self, path)
}
func (self classDirAccess) MakeDirAbsolute(path String) int64 {
	return self.ptr.API.DirAccess_make_dir_absolute(self, path)
}
func (self classDirAccess) MakeDirRecursive(path String) int64 {
	return self.ptr.API.DirAccess_make_dir_recursive(self, path)
}
func (self classDirAccess) MakeDirRecursiveAbsolute(path String) int64 {
	return self.ptr.API.DirAccess_make_dir_recursive_absolute(self, path)
}
func (self classDirAccess) FileExists(path String) bool {
	return self.ptr.API.DirAccess_file_exists(self, path)
}
func (self classDirAccess) DirExists(path String) bool {
	return self.ptr.API.DirAccess_dir_exists(self, path)
}
func (self classDirAccess) DirExistsAbsolute(path String) bool {
	return self.ptr.API.DirAccess_dir_exists_absolute(self, path)
}
func (self classDirAccess) GetSpaceLeft() Int {
	return self.ptr.API.DirAccess_get_space_left(self)
}
func (self classDirAccess) Copy(from String, to String, chmod_flags Int) int64 {
	return self.ptr.API.DirAccess_copy(self, from, to, chmod_flags)
}
func (self classDirAccess) CopyAbsolute(from String, to String, chmod_flags Int) int64 {
	return self.ptr.API.DirAccess_copy_absolute(self, from, to, chmod_flags)
}
func (self classDirAccess) Rename(from String, to String) int64 {
	return self.ptr.API.DirAccess_rename(self, from, to)
}
func (self classDirAccess) RenameAbsolute(from String, to String) int64 {
	return self.ptr.API.DirAccess_rename_absolute(self, from, to)
}
func (self classDirAccess) Remove(path String) int64 {
	return self.ptr.API.DirAccess_remove(self, path)
}
func (self classDirAccess) RemoveAbsolute(path String) int64 {
	return self.ptr.API.DirAccess_remove_absolute(self, path)
}
func (self classDirAccess) SetIncludeNavigational(enable bool) {
	self.ptr.API.DirAccess_set_include_navigational(self, enable)
}
func (self classDirAccess) GetIncludeNavigational() bool {
	return self.ptr.API.DirAccess_get_include_navigational(self)
}
func (self classDirAccess) SetIncludeHidden(enable bool) {
	self.ptr.API.DirAccess_set_include_hidden(self, enable)
}
func (self classDirAccess) GetIncludeHidden() bool {
	return self.ptr.API.DirAccess_get_include_hidden(self)
}
func (self classDirAccess) IsCaseSensitive(path String) bool {
	return self.ptr.API.DirAccess_is_case_sensitive(self, path)
}

type classDirectionalLight2D struct{ Class[classDirectionalLight2D] }

func (self classDirectionalLight2D) Super() Light2D {
	var super Light2D
	super.ptr = self.ptr
	return super
}

func (self classDirectionalLight2D) Light2D() Light2D { return self.Super() }
func (self classDirectionalLight2D) SetMaxDistance(pixels Float) {
	self.ptr.API.DirectionalLight2D_set_max_distance(self, pixels)
}
func (self classDirectionalLight2D) GetMaxDistance() Float {
	return self.ptr.API.DirectionalLight2D_get_max_distance(self)
}

type classDirectionalLight3D struct{ Class[classDirectionalLight3D] }

func (self classDirectionalLight3D) Super() Light3D {
	var super Light3D
	super.ptr = self.ptr
	return super
}

func (self classDirectionalLight3D) Light3D() Light3D { return self.Super() }
func (self classDirectionalLight3D) SetShadowMode(mode DirectionalLight3DShadowMode) {
	self.ptr.API.DirectionalLight3D_set_shadow_mode(self, mode)
}
func (self classDirectionalLight3D) GetShadowMode() DirectionalLight3DShadowMode {
	return self.ptr.API.DirectionalLight3D_get_shadow_mode(self)
}
func (self classDirectionalLight3D) SetBlendSplits(enabled bool) {
	self.ptr.API.DirectionalLight3D_set_blend_splits(self, enabled)
}
func (self classDirectionalLight3D) IsBlendSplitsEnabled() bool {
	return self.ptr.API.DirectionalLight3D_is_blend_splits_enabled(self)
}
func (self classDirectionalLight3D) SetSkyMode(mode DirectionalLight3DSkyMode) {
	self.ptr.API.DirectionalLight3D_set_sky_mode(self, mode)
}
func (self classDirectionalLight3D) GetSkyMode() DirectionalLight3DSkyMode {
	return self.ptr.API.DirectionalLight3D_get_sky_mode(self)
}

type classDisplayServer struct{ Class[classDisplayServer] }

func (self classDisplayServer) Super() Object { var super Object; super.ptr = self.ptr; return super }

func (self classDisplayServer) Object() Object { return self.Super() }

func (self classDisplayServer) isSingleton() {}
func (self classDisplayServer) HasFeature(feature DisplayServerFeature) bool {
	return self.ptr.API.DisplayServer_has_feature(self, feature)
}
func (self classDisplayServer) GetName() String {
	return self.ptr.API.DisplayServer_get_name(self)
}
func (self classDisplayServer) GlobalMenuSetPopupCallbacks(menu_root String, open_callback Callable, close_callback Callable) {
	self.ptr.API.DisplayServer_global_menu_set_popup_callbacks(self, menu_root, open_callback, close_callback)
}
func (self classDisplayServer) GlobalMenuAddSubmenuItem(menu_root String, label String, submenu String, index Int) Int {
	return self.ptr.API.DisplayServer_global_menu_add_submenu_item(self, menu_root, label, submenu, index)
}
func (self classDisplayServer) GlobalMenuAddItem(menu_root String, label String, callback Callable, key_callback Callable, tag Variant, accelerator Key, index Int) Int {
	return self.ptr.API.DisplayServer_global_menu_add_item(self, menu_root, label, callback, key_callback, tag, accelerator, index)
}
func (self classDisplayServer) GlobalMenuAddCheckItem(menu_root String, label String, callback Callable, key_callback Callable, tag Variant, accelerator Key, index Int) Int {
	return self.ptr.API.DisplayServer_global_menu_add_check_item(self, menu_root, label, callback, key_callback, tag, accelerator, index)
}
func (self classDisplayServer) GlobalMenuAddIconItem(menu_root String, icon Texture2D, label String, callback Callable, key_callback Callable, tag Variant, accelerator Key, index Int) Int {
	return self.ptr.API.DisplayServer_global_menu_add_icon_item(self, menu_root, icon, label, callback, key_callback, tag, accelerator, index)
}
func (self classDisplayServer) GlobalMenuAddIconCheckItem(menu_root String, icon Texture2D, label String, callback Callable, key_callback Callable, tag Variant, accelerator Key, index Int) Int {
	return self.ptr.API.DisplayServer_global_menu_add_icon_check_item(self, menu_root, icon, label, callback, key_callback, tag, accelerator, index)
}
func (self classDisplayServer) GlobalMenuAddRadioCheckItem(menu_root String, label String, callback Callable, key_callback Callable, tag Variant, accelerator Key, index Int) Int {
	return self.ptr.API.DisplayServer_global_menu_add_radio_check_item(self, menu_root, label, callback, key_callback, tag, accelerator, index)
}
func (self classDisplayServer) GlobalMenuAddIconRadioCheckItem(menu_root String, icon Texture2D, label String, callback Callable, key_callback Callable, tag Variant, accelerator Key, index Int) Int {
	return self.ptr.API.DisplayServer_global_menu_add_icon_radio_check_item(self, menu_root, icon, label, callback, key_callback, tag, accelerator, index)
}
func (self classDisplayServer) GlobalMenuAddMultistateItem(menu_root String, label String, max_states Int, default_state Int, callback Callable, key_callback Callable, tag Variant, accelerator Key, index Int) Int {
	return self.ptr.API.DisplayServer_global_menu_add_multistate_item(self, menu_root, label, max_states, default_state, callback, key_callback, tag, accelerator, index)
}
func (self classDisplayServer) GlobalMenuAddSeparator(menu_root String, index Int) Int {
	return self.ptr.API.DisplayServer_global_menu_add_separator(self, menu_root, index)
}
func (self classDisplayServer) GlobalMenuGetItemIndexFromText(menu_root String, text String) Int {
	return self.ptr.API.DisplayServer_global_menu_get_item_index_from_text(self, menu_root, text)
}
func (self classDisplayServer) GlobalMenuGetItemIndexFromTag(menu_root String, tag Variant) Int {
	return self.ptr.API.DisplayServer_global_menu_get_item_index_from_tag(self, menu_root, tag)
}
func (self classDisplayServer) GlobalMenuIsItemChecked(menu_root String, idx Int) bool {
	return self.ptr.API.DisplayServer_global_menu_is_item_checked(self, menu_root, idx)
}
func (self classDisplayServer) GlobalMenuIsItemCheckable(menu_root String, idx Int) bool {
	return self.ptr.API.DisplayServer_global_menu_is_item_checkable(self, menu_root, idx)
}
func (self classDisplayServer) GlobalMenuIsItemRadioCheckable(menu_root String, idx Int) bool {
	return self.ptr.API.DisplayServer_global_menu_is_item_radio_checkable(self, menu_root, idx)
}
func (self classDisplayServer) GlobalMenuGetItemCallback(menu_root String, idx Int) Callable {
	return self.ptr.API.DisplayServer_global_menu_get_item_callback(self, menu_root, idx)
}
func (self classDisplayServer) GlobalMenuGetItemKeyCallback(menu_root String, idx Int) Callable {
	return self.ptr.API.DisplayServer_global_menu_get_item_key_callback(self, menu_root, idx)
}
func (self classDisplayServer) GlobalMenuGetItemTag(menu_root String, idx Int) Variant {
	return self.ptr.API.DisplayServer_global_menu_get_item_tag(self, menu_root, idx)
}
func (self classDisplayServer) GlobalMenuGetItemText(menu_root String, idx Int) String {
	return self.ptr.API.DisplayServer_global_menu_get_item_text(self, menu_root, idx)
}
func (self classDisplayServer) GlobalMenuGetItemSubmenu(menu_root String, idx Int) String {
	return self.ptr.API.DisplayServer_global_menu_get_item_submenu(self, menu_root, idx)
}
func (self classDisplayServer) GlobalMenuGetItemAccelerator(menu_root String, idx Int) Key {
	return self.ptr.API.DisplayServer_global_menu_get_item_accelerator(self, menu_root, idx)
}
func (self classDisplayServer) GlobalMenuIsItemDisabled(menu_root String, idx Int) bool {
	return self.ptr.API.DisplayServer_global_menu_is_item_disabled(self, menu_root, idx)
}
func (self classDisplayServer) GlobalMenuIsItemHidden(menu_root String, idx Int) bool {
	return self.ptr.API.DisplayServer_global_menu_is_item_hidden(self, menu_root, idx)
}
func (self classDisplayServer) GlobalMenuGetItemTooltip(menu_root String, idx Int) String {
	return self.ptr.API.DisplayServer_global_menu_get_item_tooltip(self, menu_root, idx)
}
func (self classDisplayServer) GlobalMenuGetItemState(menu_root String, idx Int) Int {
	return self.ptr.API.DisplayServer_global_menu_get_item_state(self, menu_root, idx)
}
func (self classDisplayServer) GlobalMenuGetItemMaxStates(menu_root String, idx Int) Int {
	return self.ptr.API.DisplayServer_global_menu_get_item_max_states(self, menu_root, idx)
}
func (self classDisplayServer) GlobalMenuGetItemIcon(menu_root String, idx Int) Texture2D {
	return self.ptr.API.DisplayServer_global_menu_get_item_icon(self, menu_root, idx)
}
func (self classDisplayServer) GlobalMenuGetItemIndentationLevel(menu_root String, idx Int) Int {
	return self.ptr.API.DisplayServer_global_menu_get_item_indentation_level(self, menu_root, idx)
}
func (self classDisplayServer) GlobalMenuSetItemChecked(menu_root String, idx Int, checked bool) {
	self.ptr.API.DisplayServer_global_menu_set_item_checked(self, menu_root, idx, checked)
}
func (self classDisplayServer) GlobalMenuSetItemCheckable(menu_root String, idx Int, checkable bool) {
	self.ptr.API.DisplayServer_global_menu_set_item_checkable(self, menu_root, idx, checkable)
}
func (self classDisplayServer) GlobalMenuSetItemRadioCheckable(menu_root String, idx Int, checkable bool) {
	self.ptr.API.DisplayServer_global_menu_set_item_radio_checkable(self, menu_root, idx, checkable)
}
func (self classDisplayServer) GlobalMenuSetItemCallback(menu_root String, idx Int, callback Callable) {
	self.ptr.API.DisplayServer_global_menu_set_item_callback(self, menu_root, idx, callback)
}
func (self classDisplayServer) GlobalMenuSetItemHoverCallbacks(menu_root String, idx Int, callback Callable) {
	self.ptr.API.DisplayServer_global_menu_set_item_hover_callbacks(self, menu_root, idx, callback)
}
func (self classDisplayServer) GlobalMenuSetItemKeyCallback(menu_root String, idx Int, key_callback Callable) {
	self.ptr.API.DisplayServer_global_menu_set_item_key_callback(self, menu_root, idx, key_callback)
}
func (self classDisplayServer) GlobalMenuSetItemTag(menu_root String, idx Int, tag Variant) {
	self.ptr.API.DisplayServer_global_menu_set_item_tag(self, menu_root, idx, tag)
}
func (self classDisplayServer) GlobalMenuSetItemText(menu_root String, idx Int, text String) {
	self.ptr.API.DisplayServer_global_menu_set_item_text(self, menu_root, idx, text)
}
func (self classDisplayServer) GlobalMenuSetItemSubmenu(menu_root String, idx Int, submenu String) {
	self.ptr.API.DisplayServer_global_menu_set_item_submenu(self, menu_root, idx, submenu)
}
func (self classDisplayServer) GlobalMenuSetItemAccelerator(menu_root String, idx Int, keycode Key) {
	self.ptr.API.DisplayServer_global_menu_set_item_accelerator(self, menu_root, idx, keycode)
}
func (self classDisplayServer) GlobalMenuSetItemDisabled(menu_root String, idx Int, disabled bool) {
	self.ptr.API.DisplayServer_global_menu_set_item_disabled(self, menu_root, idx, disabled)
}
func (self classDisplayServer) GlobalMenuSetItemHidden(menu_root String, idx Int, hidden bool) {
	self.ptr.API.DisplayServer_global_menu_set_item_hidden(self, menu_root, idx, hidden)
}
func (self classDisplayServer) GlobalMenuSetItemTooltip(menu_root String, idx Int, tooltip String) {
	self.ptr.API.DisplayServer_global_menu_set_item_tooltip(self, menu_root, idx, tooltip)
}
func (self classDisplayServer) GlobalMenuSetItemState(menu_root String, idx Int, state Int) {
	self.ptr.API.DisplayServer_global_menu_set_item_state(self, menu_root, idx, state)
}
func (self classDisplayServer) GlobalMenuSetItemMaxStates(menu_root String, idx Int, max_states Int) {
	self.ptr.API.DisplayServer_global_menu_set_item_max_states(self, menu_root, idx, max_states)
}
func (self classDisplayServer) GlobalMenuSetItemIcon(menu_root String, idx Int, icon Texture2D) {
	self.ptr.API.DisplayServer_global_menu_set_item_icon(self, menu_root, idx, icon)
}
func (self classDisplayServer) GlobalMenuSetItemIndentationLevel(menu_root String, idx Int, level Int) {
	self.ptr.API.DisplayServer_global_menu_set_item_indentation_level(self, menu_root, idx, level)
}
func (self classDisplayServer) GlobalMenuGetItemCount(menu_root String) Int {
	return self.ptr.API.DisplayServer_global_menu_get_item_count(self, menu_root)
}
func (self classDisplayServer) GlobalMenuRemoveItem(menu_root String, idx Int) {
	self.ptr.API.DisplayServer_global_menu_remove_item(self, menu_root, idx)
}
func (self classDisplayServer) GlobalMenuClear(menu_root String) {
	self.ptr.API.DisplayServer_global_menu_clear(self, menu_root)
}
func (self classDisplayServer) GlobalMenuGetSystemMenuRoots() Dictionary {
	return self.ptr.API.DisplayServer_global_menu_get_system_menu_roots(self)
}
func (self classDisplayServer) TtsIsSpeaking() bool {
	return self.ptr.API.DisplayServer_tts_is_speaking(self)
}
func (self classDisplayServer) TtsIsPaused() bool {
	return self.ptr.API.DisplayServer_tts_is_paused(self)
}
func (self classDisplayServer) TtsGetVoices() ArrayOf[Dictionary] {
	return self.ptr.API.DisplayServer_tts_get_voices(self)
}
func (self classDisplayServer) TtsGetVoicesForLanguage(language String) PackedStringArray {
	return self.ptr.API.DisplayServer_tts_get_voices_for_language(self, language)
}
func (self classDisplayServer) TtsSpeak(text String, voice String, volume Int, pitch Float, rate Float, utterance_id Int, interrupt bool) {
	self.ptr.API.DisplayServer_tts_speak(self, text, voice, volume, pitch, rate, utterance_id, interrupt)
}
func (self classDisplayServer) TtsPause() {
	self.ptr.API.DisplayServer_tts_pause(self)
}
func (self classDisplayServer) TtsResume() {
	self.ptr.API.DisplayServer_tts_resume(self)
}
func (self classDisplayServer) TtsStop() {
	self.ptr.API.DisplayServer_tts_stop(self)
}
func (self classDisplayServer) TtsSetUtteranceCallback(event DisplayServerTTSUtteranceEvent, callable Callable) {
	self.ptr.API.DisplayServer_tts_set_utterance_callback(self, event, callable)
}
func (self classDisplayServer) IsDarkModeSupported() bool {
	return self.ptr.API.DisplayServer_is_dark_mode_supported(self)
}
func (self classDisplayServer) IsDarkMode() bool {
	return self.ptr.API.DisplayServer_is_dark_mode(self)
}
func (self classDisplayServer) GetAccentColor() Color {
	return self.ptr.API.DisplayServer_get_accent_color(self)
}
func (self classDisplayServer) MouseSetMode(mouse_mode DisplayServerMouseMode) {
	self.ptr.API.DisplayServer_mouse_set_mode(self, mouse_mode)
}
func (self classDisplayServer) MouseGetMode() DisplayServerMouseMode {
	return self.ptr.API.DisplayServer_mouse_get_mode(self)
}
func (self classDisplayServer) WarpMouse(position Vector2i) {
	self.ptr.API.DisplayServer_warp_mouse(self, position)
}
func (self classDisplayServer) MouseGetPosition() Vector2i {
	return self.ptr.API.DisplayServer_mouse_get_position(self)
}
func (self classDisplayServer) MouseGetButtonState() MouseButtonMask {
	return self.ptr.API.DisplayServer_mouse_get_button_state(self)
}
func (self classDisplayServer) ClipboardSet(clipboard String) {
	self.ptr.API.DisplayServer_clipboard_set(self, clipboard)
}
func (self classDisplayServer) ClipboardGet() String {
	return self.ptr.API.DisplayServer_clipboard_get(self)
}
func (self classDisplayServer) ClipboardGetImage() Image {
	return self.ptr.API.DisplayServer_clipboard_get_image(self)
}
func (self classDisplayServer) ClipboardHas() bool {
	return self.ptr.API.DisplayServer_clipboard_has(self)
}
func (self classDisplayServer) ClipboardHasImage() bool {
	return self.ptr.API.DisplayServer_clipboard_has_image(self)
}
func (self classDisplayServer) ClipboardSetPrimary(clipboard_primary String) {
	self.ptr.API.DisplayServer_clipboard_set_primary(self, clipboard_primary)
}
func (self classDisplayServer) ClipboardGetPrimary() String {
	return self.ptr.API.DisplayServer_clipboard_get_primary(self)
}
func (self classDisplayServer) GetDisplayCutouts() ArrayOf[Rect2] {
	return self.ptr.API.DisplayServer_get_display_cutouts(self)
}
func (self classDisplayServer) GetDisplaySafeArea() Rect2i {
	return self.ptr.API.DisplayServer_get_display_safe_area(self)
}
func (self classDisplayServer) GetScreenCount() Int {
	return self.ptr.API.DisplayServer_get_screen_count(self)
}
func (self classDisplayServer) GetPrimaryScreen() Int {
	return self.ptr.API.DisplayServer_get_primary_screen(self)
}
func (self classDisplayServer) GetKeyboardFocusScreen() Int {
	return self.ptr.API.DisplayServer_get_keyboard_focus_screen(self)
}
func (self classDisplayServer) GetScreenFromRect(rect Rect2) Int {
	return self.ptr.API.DisplayServer_get_screen_from_rect(self, rect)
}
func (self classDisplayServer) ScreenGetPosition(screen Int) Vector2i {
	return self.ptr.API.DisplayServer_screen_get_position(self, screen)
}
func (self classDisplayServer) ScreenGetSize(screen Int) Vector2i {
	return self.ptr.API.DisplayServer_screen_get_size(self, screen)
}
func (self classDisplayServer) ScreenGetUsableRect(screen Int) Rect2i {
	return self.ptr.API.DisplayServer_screen_get_usable_rect(self, screen)
}
func (self classDisplayServer) ScreenGetDpi(screen Int) Int {
	return self.ptr.API.DisplayServer_screen_get_dpi(self, screen)
}
func (self classDisplayServer) ScreenGetScale(screen Int) Float {
	return self.ptr.API.DisplayServer_screen_get_scale(self, screen)
}
func (self classDisplayServer) IsTouchscreenAvailable() bool {
	return self.ptr.API.DisplayServer_is_touchscreen_available(self)
}
func (self classDisplayServer) ScreenGetMaxScale() Float {
	return self.ptr.API.DisplayServer_screen_get_max_scale(self)
}
func (self classDisplayServer) ScreenGetRefreshRate(screen Int) Float {
	return self.ptr.API.DisplayServer_screen_get_refresh_rate(self, screen)
}
func (self classDisplayServer) ScreenGetPixel(position Vector2i) Color {
	return self.ptr.API.DisplayServer_screen_get_pixel(self, position)
}
func (self classDisplayServer) ScreenGetImage(screen Int) Image {
	return self.ptr.API.DisplayServer_screen_get_image(self, screen)
}
func (self classDisplayServer) ScreenSetOrientation(orientation DisplayServerScreenOrientation, screen Int) {
	self.ptr.API.DisplayServer_screen_set_orientation(self, orientation, screen)
}
func (self classDisplayServer) ScreenGetOrientation(screen Int) DisplayServerScreenOrientation {
	return self.ptr.API.DisplayServer_screen_get_orientation(self, screen)
}
func (self classDisplayServer) ScreenSetKeepOn(enable bool) {
	self.ptr.API.DisplayServer_screen_set_keep_on(self, enable)
}
func (self classDisplayServer) ScreenIsKeptOn() bool {
	return self.ptr.API.DisplayServer_screen_is_kept_on(self)
}
func (self classDisplayServer) GetWindowList() PackedInt32Array {
	return self.ptr.API.DisplayServer_get_window_list(self)
}
func (self classDisplayServer) GetWindowAtScreenPosition(position Vector2i) Int {
	return self.ptr.API.DisplayServer_get_window_at_screen_position(self, position)
}
func (self classDisplayServer) WindowGetNativeHandle(handle_type DisplayServerHandleType, window_id Int) Int {
	return self.ptr.API.DisplayServer_window_get_native_handle(self, handle_type, window_id)
}
func (self classDisplayServer) WindowGetActivePopup() Int {
	return self.ptr.API.DisplayServer_window_get_active_popup(self)
}
func (self classDisplayServer) WindowSetPopupSafeRect(window Int, rect Rect2i) {
	self.ptr.API.DisplayServer_window_set_popup_safe_rect(self, window, rect)
}
func (self classDisplayServer) WindowGetPopupSafeRect(window Int) Rect2i {
	return self.ptr.API.DisplayServer_window_get_popup_safe_rect(self, window)
}
func (self classDisplayServer) WindowSetTitle(title String, window_id Int) {
	self.ptr.API.DisplayServer_window_set_title(self, title, window_id)
}
func (self classDisplayServer) WindowGetTitleSize(title String, window_id Int) Vector2i {
	return self.ptr.API.DisplayServer_window_get_title_size(self, title, window_id)
}
func (self classDisplayServer) WindowSetMousePassthrough(region PackedVector2Array, window_id Int) {
	self.ptr.API.DisplayServer_window_set_mouse_passthrough(self, region, window_id)
}
func (self classDisplayServer) WindowGetCurrentScreen(window_id Int) Int {
	return self.ptr.API.DisplayServer_window_get_current_screen(self, window_id)
}
func (self classDisplayServer) WindowSetCurrentScreen(screen Int, window_id Int) {
	self.ptr.API.DisplayServer_window_set_current_screen(self, screen, window_id)
}
func (self classDisplayServer) WindowGetPosition(window_id Int) Vector2i {
	return self.ptr.API.DisplayServer_window_get_position(self, window_id)
}
func (self classDisplayServer) WindowGetPositionWithDecorations(window_id Int) Vector2i {
	return self.ptr.API.DisplayServer_window_get_position_with_decorations(self, window_id)
}
func (self classDisplayServer) WindowSetPosition(position Vector2i, window_id Int) {
	self.ptr.API.DisplayServer_window_set_position(self, position, window_id)
}
func (self classDisplayServer) WindowGetSize(window_id Int) Vector2i {
	return self.ptr.API.DisplayServer_window_get_size(self, window_id)
}
func (self classDisplayServer) WindowSetSize(size Vector2i, window_id Int) {
	self.ptr.API.DisplayServer_window_set_size(self, size, window_id)
}
func (self classDisplayServer) WindowSetRectChangedCallback(callback Callable, window_id Int) {
	self.ptr.API.DisplayServer_window_set_rect_changed_callback(self, callback, window_id)
}
func (self classDisplayServer) WindowSetWindowEventCallback(callback Callable, window_id Int) {
	self.ptr.API.DisplayServer_window_set_window_event_callback(self, callback, window_id)
}
func (self classDisplayServer) WindowSetInputEventCallback(callback Callable, window_id Int) {
	self.ptr.API.DisplayServer_window_set_input_event_callback(self, callback, window_id)
}
func (self classDisplayServer) WindowSetInputTextCallback(callback Callable, window_id Int) {
	self.ptr.API.DisplayServer_window_set_input_text_callback(self, callback, window_id)
}
func (self classDisplayServer) WindowSetDropFilesCallback(callback Callable, window_id Int) {
	self.ptr.API.DisplayServer_window_set_drop_files_callback(self, callback, window_id)
}
func (self classDisplayServer) WindowGetAttachedInstanceId(window_id Int) Int {
	return self.ptr.API.DisplayServer_window_get_attached_instance_id(self, window_id)
}
func (self classDisplayServer) WindowGetMaxSize(window_id Int) Vector2i {
	return self.ptr.API.DisplayServer_window_get_max_size(self, window_id)
}
func (self classDisplayServer) WindowSetMaxSize(max_size Vector2i, window_id Int) {
	self.ptr.API.DisplayServer_window_set_max_size(self, max_size, window_id)
}
func (self classDisplayServer) WindowGetMinSize(window_id Int) Vector2i {
	return self.ptr.API.DisplayServer_window_get_min_size(self, window_id)
}
func (self classDisplayServer) WindowSetMinSize(min_size Vector2i, window_id Int) {
	self.ptr.API.DisplayServer_window_set_min_size(self, min_size, window_id)
}
func (self classDisplayServer) WindowGetSizeWithDecorations(window_id Int) Vector2i {
	return self.ptr.API.DisplayServer_window_get_size_with_decorations(self, window_id)
}
func (self classDisplayServer) WindowGetMode(window_id Int) DisplayServerWindowMode {
	return self.ptr.API.DisplayServer_window_get_mode(self, window_id)
}
func (self classDisplayServer) WindowSetMode(mode DisplayServerWindowMode, window_id Int) {
	self.ptr.API.DisplayServer_window_set_mode(self, mode, window_id)
}
func (self classDisplayServer) WindowSetFlag(flag DisplayServerWindowFlags, enabled bool, window_id Int) {
	self.ptr.API.DisplayServer_window_set_flag(self, flag, enabled, window_id)
}
func (self classDisplayServer) WindowGetFlag(flag DisplayServerWindowFlags, window_id Int) bool {
	return self.ptr.API.DisplayServer_window_get_flag(self, flag, window_id)
}
func (self classDisplayServer) WindowSetWindowButtonsOffset(offset Vector2i, window_id Int) {
	self.ptr.API.DisplayServer_window_set_window_buttons_offset(self, offset, window_id)
}
func (self classDisplayServer) WindowGetSafeTitleMargins(window_id Int) Vector3i {
	return self.ptr.API.DisplayServer_window_get_safe_title_margins(self, window_id)
}
func (self classDisplayServer) WindowRequestAttention(window_id Int) {
	self.ptr.API.DisplayServer_window_request_attention(self, window_id)
}
func (self classDisplayServer) WindowMoveToForeground(window_id Int) {
	self.ptr.API.DisplayServer_window_move_to_foreground(self, window_id)
}
func (self classDisplayServer) WindowIsFocused(window_id Int) bool {
	return self.ptr.API.DisplayServer_window_is_focused(self, window_id)
}
func (self classDisplayServer) WindowCanDraw(window_id Int) bool {
	return self.ptr.API.DisplayServer_window_can_draw(self, window_id)
}
func (self classDisplayServer) WindowSetTransient(window_id Int, parent_window_id Int) {
	self.ptr.API.DisplayServer_window_set_transient(self, window_id, parent_window_id)
}
func (self classDisplayServer) WindowSetExclusive(window_id Int, exclusive bool) {
	self.ptr.API.DisplayServer_window_set_exclusive(self, window_id, exclusive)
}
func (self classDisplayServer) WindowSetImeActive(active bool, window_id Int) {
	self.ptr.API.DisplayServer_window_set_ime_active(self, active, window_id)
}
func (self classDisplayServer) WindowSetImePosition(position Vector2i, window_id Int) {
	self.ptr.API.DisplayServer_window_set_ime_position(self, position, window_id)
}
func (self classDisplayServer) WindowSetVsyncMode(vsync_mode DisplayServerVSyncMode, window_id Int) {
	self.ptr.API.DisplayServer_window_set_vsync_mode(self, vsync_mode, window_id)
}
func (self classDisplayServer) WindowGetVsyncMode(window_id Int) DisplayServerVSyncMode {
	return self.ptr.API.DisplayServer_window_get_vsync_mode(self, window_id)
}
func (self classDisplayServer) WindowIsMaximizeAllowed(window_id Int) bool {
	return self.ptr.API.DisplayServer_window_is_maximize_allowed(self, window_id)
}
func (self classDisplayServer) WindowMaximizeOnTitleDblClick() bool {
	return self.ptr.API.DisplayServer_window_maximize_on_title_dbl_click(self)
}
func (self classDisplayServer) WindowMinimizeOnTitleDblClick() bool {
	return self.ptr.API.DisplayServer_window_minimize_on_title_dbl_click(self)
}
func (self classDisplayServer) ImeGetSelection() Vector2i {
	return self.ptr.API.DisplayServer_ime_get_selection(self)
}
func (self classDisplayServer) ImeGetText() String {
	return self.ptr.API.DisplayServer_ime_get_text(self)
}
func (self classDisplayServer) VirtualKeyboardShow(existing_text String, position Rect2, atype DisplayServerVirtualKeyboardType, max_length Int, cursor_start Int, cursor_end Int) {
	self.ptr.API.DisplayServer_virtual_keyboard_show(self, existing_text, position, atype, max_length, cursor_start, cursor_end)
}
func (self classDisplayServer) VirtualKeyboardHide() {
	self.ptr.API.DisplayServer_virtual_keyboard_hide(self)
}
func (self classDisplayServer) VirtualKeyboardGetHeight() Int {
	return self.ptr.API.DisplayServer_virtual_keyboard_get_height(self)
}
func (self classDisplayServer) CursorSetShape(shape DisplayServerCursorShape) {
	self.ptr.API.DisplayServer_cursor_set_shape(self, shape)
}
func (self classDisplayServer) CursorGetShape() DisplayServerCursorShape {
	return self.ptr.API.DisplayServer_cursor_get_shape(self)
}
func (self classDisplayServer) CursorSetCustomImage(cursor Resource, shape DisplayServerCursorShape, hotspot Vector2) {
	self.ptr.API.DisplayServer_cursor_set_custom_image(self, cursor, shape, hotspot)
}
func (self classDisplayServer) GetSwapCancelOk() bool {
	return self.ptr.API.DisplayServer_get_swap_cancel_ok(self)
}
func (self classDisplayServer) EnableForStealingFocus(process_id Int) {
	self.ptr.API.DisplayServer_enable_for_stealing_focus(self, process_id)
}
func (self classDisplayServer) DialogShow(title String, description String, buttons PackedStringArray, callback Callable) int64 {
	return self.ptr.API.DisplayServer_dialog_show(self, title, description, buttons, callback)
}
func (self classDisplayServer) DialogInputText(title String, description String, existing_text String, callback Callable) int64 {
	return self.ptr.API.DisplayServer_dialog_input_text(self, title, description, existing_text, callback)
}
func (self classDisplayServer) FileDialogShow(title String, current_directory String, filename String, show_hidden bool, mode DisplayServerFileDialogMode, filters PackedStringArray, callback Callable) int64 {
	return self.ptr.API.DisplayServer_file_dialog_show(self, title, current_directory, filename, show_hidden, mode, filters, callback)
}
func (self classDisplayServer) KeyboardGetLayoutCount() Int {
	return self.ptr.API.DisplayServer_keyboard_get_layout_count(self)
}
func (self classDisplayServer) KeyboardGetCurrentLayout() Int {
	return self.ptr.API.DisplayServer_keyboard_get_current_layout(self)
}
func (self classDisplayServer) KeyboardSetCurrentLayout(index Int) {
	self.ptr.API.DisplayServer_keyboard_set_current_layout(self, index)
}
func (self classDisplayServer) KeyboardGetLayoutLanguage(index Int) String {
	return self.ptr.API.DisplayServer_keyboard_get_layout_language(self, index)
}
func (self classDisplayServer) KeyboardGetLayoutName(index Int) String {
	return self.ptr.API.DisplayServer_keyboard_get_layout_name(self, index)
}
func (self classDisplayServer) KeyboardGetKeycodeFromPhysical(keycode Key) Key {
	return self.ptr.API.DisplayServer_keyboard_get_keycode_from_physical(self, keycode)
}
func (self classDisplayServer) KeyboardGetLabelFromPhysical(keycode Key) Key {
	return self.ptr.API.DisplayServer_keyboard_get_label_from_physical(self, keycode)
}
func (self classDisplayServer) ProcessEvents() {
	self.ptr.API.DisplayServer_process_events(self)
}
func (self classDisplayServer) ForceProcessAndDropEvents() {
	self.ptr.API.DisplayServer_force_process_and_drop_events(self)
}
func (self classDisplayServer) SetNativeIcon(filename String) {
	self.ptr.API.DisplayServer_set_native_icon(self, filename)
}
func (self classDisplayServer) SetIcon(image Image) {
	self.ptr.API.DisplayServer_set_icon(self, image)
}
func (self classDisplayServer) TabletGetDriverCount() Int {
	return self.ptr.API.DisplayServer_tablet_get_driver_count(self)
}
func (self classDisplayServer) TabletGetDriverName(idx Int) String {
	return self.ptr.API.DisplayServer_tablet_get_driver_name(self, idx)
}
func (self classDisplayServer) TabletGetCurrentDriver() String {
	return self.ptr.API.DisplayServer_tablet_get_current_driver(self)
}
func (self classDisplayServer) TabletSetCurrentDriver(name String) {
	self.ptr.API.DisplayServer_tablet_set_current_driver(self, name)
}

type classENetConnection struct{ Class[classENetConnection] }

func (self classENetConnection) Super() RefCounted {
	var super RefCounted
	super.ptr = self.ptr
	return super
}

func (self classENetConnection) RefCounted() RefCounted { return self.Super() }
func (self classENetConnection) CreateHostBound(bind_address String, bind_port Int, max_peers Int, max_channels Int, in_bandwidth Int, out_bandwidth Int) int64 {
	return self.ptr.API.ENetConnection_create_host_bound(self, bind_address, bind_port, max_peers, max_channels, in_bandwidth, out_bandwidth)
}
func (self classENetConnection) CreateHost(max_peers Int, max_channels Int, in_bandwidth Int, out_bandwidth Int) int64 {
	return self.ptr.API.ENetConnection_create_host(self, max_peers, max_channels, in_bandwidth, out_bandwidth)
}
func (self classENetConnection) Destroy() {
	self.ptr.API.ENetConnection_destroy(self)
}
func (self classENetConnection) ConnectToHost(address String, port Int, channels Int, data Int) ENetPacketPeer {
	return self.ptr.API.ENetConnection_connect_to_host(self, address, port, channels, data)
}
func (self classENetConnection) Service(timeout Int) Array {
	return self.ptr.API.ENetConnection_service(self, timeout)
}
func (self classENetConnection) Flush() {
	self.ptr.API.ENetConnection_flush(self)
}
func (self classENetConnection) BandwidthLimit(in_bandwidth Int, out_bandwidth Int) {
	self.ptr.API.ENetConnection_bandwidth_limit(self, in_bandwidth, out_bandwidth)
}
func (self classENetConnection) ChannelLimit(limit Int) {
	self.ptr.API.ENetConnection_channel_limit(self, limit)
}
func (self classENetConnection) Broadcast(channel Int, packet PackedByteArray, flags Int) {
	self.ptr.API.ENetConnection_broadcast(self, channel, packet, flags)
}
func (self classENetConnection) Compress(mode ENetConnectionCompressionMode) {
	self.ptr.API.ENetConnection_compress(self, mode)
}
func (self classENetConnection) DtlsServerSetup(server_options TLSOptions) int64 {
	return self.ptr.API.ENetConnection_dtls_server_setup(self, server_options)
}
func (self classENetConnection) DtlsClientSetup(hostname String, client_options TLSOptions) int64 {
	return self.ptr.API.ENetConnection_dtls_client_setup(self, hostname, client_options)
}
func (self classENetConnection) RefuseNewConnections(refuse bool) {
	self.ptr.API.ENetConnection_refuse_new_connections(self, refuse)
}
func (self classENetConnection) PopStatistic(statistic ENetConnectionHostStatistic) Float {
	return self.ptr.API.ENetConnection_pop_statistic(self, statistic)
}
func (self classENetConnection) GetMaxChannels() Int {
	return self.ptr.API.ENetConnection_get_max_channels(self)
}
func (self classENetConnection) GetLocalPort() Int {
	return self.ptr.API.ENetConnection_get_local_port(self)
}
func (self classENetConnection) GetPeers() ArrayOf[ENetPacketPeer] {
	return self.ptr.API.ENetConnection_get_peers(self)
}
func (self classENetConnection) SocketSend(destination_address String, destination_port Int, packet PackedByteArray) {
	self.ptr.API.ENetConnection_socket_send(self, destination_address, destination_port, packet)
}

type classENetMultiplayerPeer struct {
	Class[classENetMultiplayerPeer]
}

func (self classENetMultiplayerPeer) Super() MultiplayerPeer {
	var super MultiplayerPeer
	super.ptr = self.ptr
	return super
}

func (self classENetMultiplayerPeer) MultiplayerPeer() MultiplayerPeer { return self.Super() }
func (self classENetMultiplayerPeer) CreateServer(port Int, max_clients Int, max_channels Int, in_bandwidth Int, out_bandwidth Int) int64 {
	return self.ptr.API.ENetMultiplayerPeer_create_server(self, port, max_clients, max_channels, in_bandwidth, out_bandwidth)
}
func (self classENetMultiplayerPeer) CreateClient(address String, port Int, channel_count Int, in_bandwidth Int, out_bandwidth Int, local_port Int) int64 {
	return self.ptr.API.ENetMultiplayerPeer_create_client(self, address, port, channel_count, in_bandwidth, out_bandwidth, local_port)
}
func (self classENetMultiplayerPeer) CreateMesh(unique_id Int) int64 {
	return self.ptr.API.ENetMultiplayerPeer_create_mesh(self, unique_id)
}
func (self classENetMultiplayerPeer) AddMeshPeer(peer_id Int, host ENetConnection) int64 {
	return self.ptr.API.ENetMultiplayerPeer_add_mesh_peer(self, peer_id, host)
}
func (self classENetMultiplayerPeer) SetBindIp(ip String) {
	self.ptr.API.ENetMultiplayerPeer_set_bind_ip(self, ip)
}
func (self classENetMultiplayerPeer) GetHost() ENetConnection {
	return self.ptr.API.ENetMultiplayerPeer_get_host(self)
}
func (self classENetMultiplayerPeer) GetPeer(id Int) ENetPacketPeer {
	return self.ptr.API.ENetMultiplayerPeer_get_peer(self, id)
}

type classENetPacketPeer struct{ Class[classENetPacketPeer] }

func (self classENetPacketPeer) Super() PacketPeer {
	var super PacketPeer
	super.ptr = self.ptr
	return super
}

func (self classENetPacketPeer) PacketPeer() PacketPeer { return self.Super() }
func (self classENetPacketPeer) PeerDisconnect(data Int) {
	self.ptr.API.ENetPacketPeer_peer_disconnect(self, data)
}
func (self classENetPacketPeer) PeerDisconnectLater(data Int) {
	self.ptr.API.ENetPacketPeer_peer_disconnect_later(self, data)
}
func (self classENetPacketPeer) PeerDisconnectNow(data Int) {
	self.ptr.API.ENetPacketPeer_peer_disconnect_now(self, data)
}
func (self classENetPacketPeer) Ping() {
	self.ptr.API.ENetPacketPeer_ping(self)
}
func (self classENetPacketPeer) PingInterval(ping_interval Int) {
	self.ptr.API.ENetPacketPeer_ping_interval(self, ping_interval)
}
func (self classENetPacketPeer) Reset() {
	self.ptr.API.ENetPacketPeer_reset(self)
}
func (self classENetPacketPeer) Send(channel Int, packet PackedByteArray, flags Int) int64 {
	return self.ptr.API.ENetPacketPeer_send(self, channel, packet, flags)
}
func (self classENetPacketPeer) ThrottleConfigure(interval Int, acceleration Int, deceleration Int) {
	self.ptr.API.ENetPacketPeer_throttle_configure(self, interval, acceleration, deceleration)
}
func (self classENetPacketPeer) SetTimeout(timeout Int, timeout_min Int, timeout_max Int) {
	self.ptr.API.ENetPacketPeer_set_timeout(self, timeout, timeout_min, timeout_max)
}
func (self classENetPacketPeer) GetRemoteAddress() String {
	return self.ptr.API.ENetPacketPeer_get_remote_address(self)
}
func (self classENetPacketPeer) GetRemotePort() Int {
	return self.ptr.API.ENetPacketPeer_get_remote_port(self)
}
func (self classENetPacketPeer) GetStatistic(statistic ENetPacketPeerPeerStatistic) Float {
	return self.ptr.API.ENetPacketPeer_get_statistic(self, statistic)
}
func (self classENetPacketPeer) GetState() ENetPacketPeerPeerState {
	return self.ptr.API.ENetPacketPeer_get_state(self)
}
func (self classENetPacketPeer) GetChannels() Int {
	return self.ptr.API.ENetPacketPeer_get_channels(self)
}
func (self classENetPacketPeer) IsActive() bool {
	return self.ptr.API.ENetPacketPeer_is_active(self)
}

type classEditorCommandPalette struct {
	Class[classEditorCommandPalette]
}

func (self classEditorCommandPalette) Super() ConfirmationDialog {
	var super ConfirmationDialog
	super.ptr = self.ptr
	return super
}

func (self classEditorCommandPalette) ConfirmationDialog() ConfirmationDialog { return self.Super() }
func (self classEditorCommandPalette) AddCommand(command_name String, key_name String, binded_callable Callable, shortcut_text String) {
	self.ptr.API.EditorCommandPalette_add_command(self, command_name, key_name, binded_callable, shortcut_text)
}
func (self classEditorCommandPalette) RemoveCommand(key_name String) {
	self.ptr.API.EditorCommandPalette_remove_command(self, key_name)
}

type classEditorDebuggerPlugin struct {
	Class[classEditorDebuggerPlugin]
}

func (self classEditorDebuggerPlugin) Super() RefCounted {
	var super RefCounted
	super.ptr = self.ptr
	return super
}

func (self classEditorDebuggerPlugin) RefCounted() RefCounted { return self.Super() }
func (self classEditorDebuggerPlugin) GetSession(id Int) EditorDebuggerSession {
	return self.ptr.API.EditorDebuggerPlugin_get_session(self, id)
}
func (self classEditorDebuggerPlugin) GetSessions() Array {
	return self.ptr.API.EditorDebuggerPlugin_get_sessions(self)
}

type classEditorDebuggerSession struct {
	Class[classEditorDebuggerSession]
}

func (self classEditorDebuggerSession) Super() RefCounted {
	var super RefCounted
	super.ptr = self.ptr
	return super
}

func (self classEditorDebuggerSession) RefCounted() RefCounted { return self.Super() }
func (self classEditorDebuggerSession) SendMessage(message String, data Array) {
	self.ptr.API.EditorDebuggerSession_send_message(self, message, data)
}
func (self classEditorDebuggerSession) ToggleProfiler(profiler String, enable bool, data Array) {
	self.ptr.API.EditorDebuggerSession_toggle_profiler(self, profiler, enable, data)
}
func (self classEditorDebuggerSession) IsBreaked() bool {
	return self.ptr.API.EditorDebuggerSession_is_breaked(self)
}
func (self classEditorDebuggerSession) IsDebuggable() bool {
	return self.ptr.API.EditorDebuggerSession_is_debuggable(self)
}
func (self classEditorDebuggerSession) IsActive() bool {
	return self.ptr.API.EditorDebuggerSession_is_active(self)
}
func (self classEditorDebuggerSession) AddSessionTab(control Control) {
	self.ptr.API.EditorDebuggerSession_add_session_tab(self, control)
}
func (self classEditorDebuggerSession) RemoveSessionTab(control Control) {
	self.ptr.API.EditorDebuggerSession_remove_session_tab(self, control)
}

type classEditorExportPlatform struct {
	Class[classEditorExportPlatform]
}

func (self classEditorExportPlatform) Super() RefCounted {
	var super RefCounted
	super.ptr = self.ptr
	return super
}

func (self classEditorExportPlatform) RefCounted() RefCounted { return self.Super() }
func (self classEditorExportPlatform) GetOsName() String {
	return self.ptr.API.EditorExportPlatform_get_os_name(self)
}

type classEditorExportPlatformAndroid struct {
	Class[classEditorExportPlatformAndroid]
}

func (self classEditorExportPlatformAndroid) Super() EditorExportPlatform {
	var super EditorExportPlatform
	super.ptr = self.ptr
	return super
}

func (self classEditorExportPlatformAndroid) EditorExportPlatform() EditorExportPlatform {
	return self.Super()
}

type classEditorExportPlatformIOS struct {
	Class[classEditorExportPlatformIOS]
}

func (self classEditorExportPlatformIOS) Super() EditorExportPlatform {
	var super EditorExportPlatform
	super.ptr = self.ptr
	return super
}

func (self classEditorExportPlatformIOS) EditorExportPlatform() EditorExportPlatform {
	return self.Super()
}

type classEditorExportPlatformLinuxBSD struct {
	Class[classEditorExportPlatformLinuxBSD]
}

func (self classEditorExportPlatformLinuxBSD) Super() EditorExportPlatformPC {
	var super EditorExportPlatformPC
	super.ptr = self.ptr
	return super
}

func (self classEditorExportPlatformLinuxBSD) EditorExportPlatformPC() EditorExportPlatformPC {
	return self.Super()
}

type classEditorExportPlatformMacOS struct {
	Class[classEditorExportPlatformMacOS]
}

func (self classEditorExportPlatformMacOS) Super() EditorExportPlatform {
	var super EditorExportPlatform
	super.ptr = self.ptr
	return super
}

func (self classEditorExportPlatformMacOS) EditorExportPlatform() EditorExportPlatform {
	return self.Super()
}

type classEditorExportPlatformPC struct {
	Class[classEditorExportPlatformPC]
}

func (self classEditorExportPlatformPC) Super() EditorExportPlatform {
	var super EditorExportPlatform
	super.ptr = self.ptr
	return super
}

func (self classEditorExportPlatformPC) EditorExportPlatform() EditorExportPlatform {
	return self.Super()
}

type classEditorExportPlatformWeb struct {
	Class[classEditorExportPlatformWeb]
}

func (self classEditorExportPlatformWeb) Super() EditorExportPlatform {
	var super EditorExportPlatform
	super.ptr = self.ptr
	return super
}

func (self classEditorExportPlatformWeb) EditorExportPlatform() EditorExportPlatform {
	return self.Super()
}

type classEditorExportPlatformWindows struct {
	Class[classEditorExportPlatformWindows]
}

func (self classEditorExportPlatformWindows) Super() EditorExportPlatformPC {
	var super EditorExportPlatformPC
	super.ptr = self.ptr
	return super
}

func (self classEditorExportPlatformWindows) EditorExportPlatformPC() EditorExportPlatformPC {
	return self.Super()
}

type classEditorExportPlugin struct{ Class[classEditorExportPlugin] }

func (self classEditorExportPlugin) Super() RefCounted {
	var super RefCounted
	super.ptr = self.ptr
	return super
}

func (self classEditorExportPlugin) RefCounted() RefCounted { return self.Super() }
func (self classEditorExportPlugin) AddSharedObject(path String, tags PackedStringArray, target String) {
	self.ptr.API.EditorExportPlugin_add_shared_object(self, path, tags, target)
}
func (self classEditorExportPlugin) AddIosProjectStaticLib(path String) {
	self.ptr.API.EditorExportPlugin_add_ios_project_static_lib(self, path)
}
func (self classEditorExportPlugin) AddFile(path String, file PackedByteArray, remap bool) {
	self.ptr.API.EditorExportPlugin_add_file(self, path, file, remap)
}
func (self classEditorExportPlugin) AddIosFramework(path String) {
	self.ptr.API.EditorExportPlugin_add_ios_framework(self, path)
}
func (self classEditorExportPlugin) AddIosEmbeddedFramework(path String) {
	self.ptr.API.EditorExportPlugin_add_ios_embedded_framework(self, path)
}
func (self classEditorExportPlugin) AddIosPlistContent(plist_content String) {
	self.ptr.API.EditorExportPlugin_add_ios_plist_content(self, plist_content)
}
func (self classEditorExportPlugin) AddIosLinkerFlags(flags String) {
	self.ptr.API.EditorExportPlugin_add_ios_linker_flags(self, flags)
}
func (self classEditorExportPlugin) AddIosBundleFile(path String) {
	self.ptr.API.EditorExportPlugin_add_ios_bundle_file(self, path)
}
func (self classEditorExportPlugin) AddIosCppCode(code String) {
	self.ptr.API.EditorExportPlugin_add_ios_cpp_code(self, code)
}
func (self classEditorExportPlugin) AddMacosPluginFile(path String) {
	self.ptr.API.EditorExportPlugin_add_macos_plugin_file(self, path)
}
func (self classEditorExportPlugin) Skip() {
	self.ptr.API.EditorExportPlugin_skip(self)
}
func (self classEditorExportPlugin) GetOption(name StringName) Variant {
	return self.ptr.API.EditorExportPlugin_get_option(self, name)
}

type classEditorFeatureProfile struct {
	Class[classEditorFeatureProfile]
}

func (self classEditorFeatureProfile) Super() RefCounted {
	var super RefCounted
	super.ptr = self.ptr
	return super
}

func (self classEditorFeatureProfile) RefCounted() RefCounted { return self.Super() }
func (self classEditorFeatureProfile) SetDisableClass(class_name StringName, disable bool) {
	self.ptr.API.EditorFeatureProfile_set_disable_class(self, class_name, disable)
}
func (self classEditorFeatureProfile) IsClassDisabled(class_name StringName) bool {
	return self.ptr.API.EditorFeatureProfile_is_class_disabled(self, class_name)
}
func (self classEditorFeatureProfile) SetDisableClassEditor(class_name StringName, disable bool) {
	self.ptr.API.EditorFeatureProfile_set_disable_class_editor(self, class_name, disable)
}
func (self classEditorFeatureProfile) IsClassEditorDisabled(class_name StringName) bool {
	return self.ptr.API.EditorFeatureProfile_is_class_editor_disabled(self, class_name)
}
func (self classEditorFeatureProfile) SetDisableClassProperty(class_name StringName, property StringName, disable bool) {
	self.ptr.API.EditorFeatureProfile_set_disable_class_property(self, class_name, property, disable)
}
func (self classEditorFeatureProfile) IsClassPropertyDisabled(class_name StringName, property StringName) bool {
	return self.ptr.API.EditorFeatureProfile_is_class_property_disabled(self, class_name, property)
}
func (self classEditorFeatureProfile) SetDisableFeature(feature EditorFeatureProfileFeature, disable bool) {
	self.ptr.API.EditorFeatureProfile_set_disable_feature(self, feature, disable)
}
func (self classEditorFeatureProfile) IsFeatureDisabled(feature EditorFeatureProfileFeature) bool {
	return self.ptr.API.EditorFeatureProfile_is_feature_disabled(self, feature)
}
func (self classEditorFeatureProfile) GetFeatureName(feature EditorFeatureProfileFeature) String {
	return self.ptr.API.EditorFeatureProfile_get_feature_name(self, feature)
}
func (self classEditorFeatureProfile) SaveToFile(path String) int64 {
	return self.ptr.API.EditorFeatureProfile_save_to_file(self, path)
}
func (self classEditorFeatureProfile) LoadFromFile(path String) int64 {
	return self.ptr.API.EditorFeatureProfile_load_from_file(self, path)
}

type classEditorFileDialog struct{ Class[classEditorFileDialog] }

func (self classEditorFileDialog) Super() ConfirmationDialog {
	var super ConfirmationDialog
	super.ptr = self.ptr
	return super
}

func (self classEditorFileDialog) ConfirmationDialog() ConfirmationDialog { return self.Super() }
func (self classEditorFileDialog) ClearFilters() {
	self.ptr.API.EditorFileDialog_clear_filters(self)
}
func (self classEditorFileDialog) AddFilter(filter String, description String) {
	self.ptr.API.EditorFileDialog_add_filter(self, filter, description)
}
func (self classEditorFileDialog) SetFilters(filters PackedStringArray) {
	self.ptr.API.EditorFileDialog_set_filters(self, filters)
}
func (self classEditorFileDialog) GetFilters() PackedStringArray {
	return self.ptr.API.EditorFileDialog_get_filters(self)
}
func (self classEditorFileDialog) GetCurrentDir() String {
	return self.ptr.API.EditorFileDialog_get_current_dir(self)
}
func (self classEditorFileDialog) GetCurrentFile() String {
	return self.ptr.API.EditorFileDialog_get_current_file(self)
}
func (self classEditorFileDialog) GetCurrentPath() String {
	return self.ptr.API.EditorFileDialog_get_current_path(self)
}
func (self classEditorFileDialog) SetCurrentDir(dir String) {
	self.ptr.API.EditorFileDialog_set_current_dir(self, dir)
}
func (self classEditorFileDialog) SetCurrentFile(file String) {
	self.ptr.API.EditorFileDialog_set_current_file(self, file)
}
func (self classEditorFileDialog) SetCurrentPath(path String) {
	self.ptr.API.EditorFileDialog_set_current_path(self, path)
}
func (self classEditorFileDialog) SetFileMode(mode EditorFileDialogFileMode) {
	self.ptr.API.EditorFileDialog_set_file_mode(self, mode)
}
func (self classEditorFileDialog) GetFileMode() EditorFileDialogFileMode {
	return self.ptr.API.EditorFileDialog_get_file_mode(self)
}
func (self classEditorFileDialog) GetVbox() VBoxContainer {
	return self.ptr.API.EditorFileDialog_get_vbox(self)
}
func (self classEditorFileDialog) GetLineEdit() LineEdit {
	return self.ptr.API.EditorFileDialog_get_line_edit(self)
}
func (self classEditorFileDialog) SetAccess(access EditorFileDialogAccess) {
	self.ptr.API.EditorFileDialog_set_access(self, access)
}
func (self classEditorFileDialog) GetAccess() EditorFileDialogAccess {
	return self.ptr.API.EditorFileDialog_get_access(self)
}
func (self classEditorFileDialog) SetShowHiddenFiles(show bool) {
	self.ptr.API.EditorFileDialog_set_show_hidden_files(self, show)
}
func (self classEditorFileDialog) IsShowingHiddenFiles() bool {
	return self.ptr.API.EditorFileDialog_is_showing_hidden_files(self)
}
func (self classEditorFileDialog) SetDisplayMode(mode EditorFileDialogDisplayMode) {
	self.ptr.API.EditorFileDialog_set_display_mode(self, mode)
}
func (self classEditorFileDialog) GetDisplayMode() EditorFileDialogDisplayMode {
	return self.ptr.API.EditorFileDialog_get_display_mode(self)
}
func (self classEditorFileDialog) SetDisableOverwriteWarning(disable bool) {
	self.ptr.API.EditorFileDialog_set_disable_overwrite_warning(self, disable)
}
func (self classEditorFileDialog) IsOverwriteWarningDisabled() bool {
	return self.ptr.API.EditorFileDialog_is_overwrite_warning_disabled(self)
}
func (self classEditorFileDialog) AddSideMenu(menu Control, title String) {
	self.ptr.API.EditorFileDialog_add_side_menu(self, menu, title)
}
func (self classEditorFileDialog) Invalidate() {
	self.ptr.API.EditorFileDialog_invalidate(self)
}

type classEditorFileSystem struct{ Class[classEditorFileSystem] }

func (self classEditorFileSystem) Super() Node { var super Node; super.ptr = self.ptr; return super }

func (self classEditorFileSystem) Node() Node { return self.Super() }
func (self classEditorFileSystem) GetFilesystem() EditorFileSystemDirectory {
	return self.ptr.API.EditorFileSystem_get_filesystem(self)
}
func (self classEditorFileSystem) IsScanning() bool {
	return self.ptr.API.EditorFileSystem_is_scanning(self)
}
func (self classEditorFileSystem) GetScanningProgress() Float {
	return self.ptr.API.EditorFileSystem_get_scanning_progress(self)
}
func (self classEditorFileSystem) Scan() {
	self.ptr.API.EditorFileSystem_scan(self)
}
func (self classEditorFileSystem) ScanSources() {
	self.ptr.API.EditorFileSystem_scan_sources(self)
}
func (self classEditorFileSystem) UpdateFile(path String) {
	self.ptr.API.EditorFileSystem_update_file(self, path)
}
func (self classEditorFileSystem) GetFilesystemPath(path String) EditorFileSystemDirectory {
	return self.ptr.API.EditorFileSystem_get_filesystem_path(self, path)
}
func (self classEditorFileSystem) GetFileType(path String) String {
	return self.ptr.API.EditorFileSystem_get_file_type(self, path)
}
func (self classEditorFileSystem) ReimportFiles(files PackedStringArray) {
	self.ptr.API.EditorFileSystem_reimport_files(self, files)
}

type classEditorFileSystemDirectory struct {
	Class[classEditorFileSystemDirectory]
}

func (self classEditorFileSystemDirectory) Super() Object {
	var super Object
	super.ptr = self.ptr
	return super
}

func (self classEditorFileSystemDirectory) Object() Object { return self.Super() }
func (self classEditorFileSystemDirectory) GetSubdirCount() Int {
	return self.ptr.API.EditorFileSystemDirectory_get_subdir_count(self)
}
func (self classEditorFileSystemDirectory) GetSubdir(idx Int) EditorFileSystemDirectory {
	return self.ptr.API.EditorFileSystemDirectory_get_subdir(self, idx)
}
func (self classEditorFileSystemDirectory) GetFileCount() Int {
	return self.ptr.API.EditorFileSystemDirectory_get_file_count(self)
}
func (self classEditorFileSystemDirectory) GetFile(idx Int) String {
	return self.ptr.API.EditorFileSystemDirectory_get_file(self, idx)
}
func (self classEditorFileSystemDirectory) GetFilePath(idx Int) String {
	return self.ptr.API.EditorFileSystemDirectory_get_file_path(self, idx)
}
func (self classEditorFileSystemDirectory) GetFileType(idx Int) StringName {
	return self.ptr.API.EditorFileSystemDirectory_get_file_type(self, idx)
}
func (self classEditorFileSystemDirectory) GetFileScriptClassName(idx Int) String {
	return self.ptr.API.EditorFileSystemDirectory_get_file_script_class_name(self, idx)
}
func (self classEditorFileSystemDirectory) GetFileScriptClassExtends(idx Int) String {
	return self.ptr.API.EditorFileSystemDirectory_get_file_script_class_extends(self, idx)
}
func (self classEditorFileSystemDirectory) GetFileImportIsValid(idx Int) bool {
	return self.ptr.API.EditorFileSystemDirectory_get_file_import_is_valid(self, idx)
}
func (self classEditorFileSystemDirectory) GetName() String {
	return self.ptr.API.EditorFileSystemDirectory_get_name(self)
}
func (self classEditorFileSystemDirectory) GetPath() String {
	return self.ptr.API.EditorFileSystemDirectory_get_path(self)
}
func (self classEditorFileSystemDirectory) GetParent() EditorFileSystemDirectory {
	return self.ptr.API.EditorFileSystemDirectory_get_parent(self)
}
func (self classEditorFileSystemDirectory) FindFileIndex(name String) Int {
	return self.ptr.API.EditorFileSystemDirectory_find_file_index(self, name)
}
func (self classEditorFileSystemDirectory) FindDirIndex(name String) Int {
	return self.ptr.API.EditorFileSystemDirectory_find_dir_index(self, name)
}

type classEditorFileSystemImportFormatSupportQuery struct {
	Class[classEditorFileSystemImportFormatSupportQuery]
}

func (self classEditorFileSystemImportFormatSupportQuery) Super() RefCounted {
	var super RefCounted
	super.ptr = self.ptr
	return super
}

func (self classEditorFileSystemImportFormatSupportQuery) RefCounted() RefCounted {
	return self.Super()
}

type classEditorImportPlugin struct{ Class[classEditorImportPlugin] }

func (self classEditorImportPlugin) Super() ResourceImporter {
	var super ResourceImporter
	super.ptr = self.ptr
	return super
}

func (self classEditorImportPlugin) ResourceImporter() ResourceImporter { return self.Super() }
func (self classEditorImportPlugin) AppendImportExternalResource(path String, custom_options Dictionary, custom_importer String, generator_parameters Variant) int64 {
	return self.ptr.API.EditorImportPlugin_append_import_external_resource(self, path, custom_options, custom_importer, generator_parameters)
}

type classEditorInspector struct{ Class[classEditorInspector] }

func (self classEditorInspector) Super() ScrollContainer {
	var super ScrollContainer
	super.ptr = self.ptr
	return super
}

func (self classEditorInspector) ScrollContainer() ScrollContainer { return self.Super() }
func (self classEditorInspector) GetSelectedPath() String {
	return self.ptr.API.EditorInspector_get_selected_path(self)
}
func (self classEditorInspector) GetEditedObject() Object {
	return self.ptr.API.EditorInspector_get_edited_object(self)
}

type classEditorInspectorPlugin struct {
	Class[classEditorInspectorPlugin]
}

func (self classEditorInspectorPlugin) Super() RefCounted {
	var super RefCounted
	super.ptr = self.ptr
	return super
}

func (self classEditorInspectorPlugin) RefCounted() RefCounted { return self.Super() }
func (self classEditorInspectorPlugin) AddCustomControl(control Control) {
	self.ptr.API.EditorInspectorPlugin_add_custom_control(self, control)
}
func (self classEditorInspectorPlugin) AddPropertyEditor(property String, editor Control, add_to_end bool) {
	self.ptr.API.EditorInspectorPlugin_add_property_editor(self, property, editor, add_to_end)
}
func (self classEditorInspectorPlugin) AddPropertyEditorForMultipleProperties(label String, properties PackedStringArray, editor Control) {
	self.ptr.API.EditorInspectorPlugin_add_property_editor_for_multiple_properties(self, label, properties, editor)
}

type classEditorInterface struct{ Class[classEditorInterface] }

func (self classEditorInterface) Super() Object { var super Object; super.ptr = self.ptr; return super }

func (self classEditorInterface) Object() Object { return self.Super() }

func (self classEditorInterface) isSingleton() {}
func (self classEditorInterface) RestartEditor(save bool) {
	self.ptr.API.EditorInterface_restart_editor(self, save)
}
func (self classEditorInterface) GetCommandPalette() EditorCommandPalette {
	return self.ptr.API.EditorInterface_get_command_palette(self)
}
func (self classEditorInterface) GetResourceFilesystem() EditorFileSystem {
	return self.ptr.API.EditorInterface_get_resource_filesystem(self)
}
func (self classEditorInterface) GetEditorPaths() EditorPaths {
	return self.ptr.API.EditorInterface_get_editor_paths(self)
}
func (self classEditorInterface) GetResourcePreviewer() EditorResourcePreview {
	return self.ptr.API.EditorInterface_get_resource_previewer(self)
}
func (self classEditorInterface) GetSelection() EditorSelection {
	return self.ptr.API.EditorInterface_get_selection(self)
}
func (self classEditorInterface) GetEditorSettings() EditorSettings {
	return self.ptr.API.EditorInterface_get_editor_settings(self)
}
func (self classEditorInterface) MakeMeshPreviews(meshes ArrayOf[Mesh], preview_size Int) ArrayOf[Texture2D] {
	return self.ptr.API.EditorInterface_make_mesh_previews(self, meshes, preview_size)
}
func (self classEditorInterface) SetPluginEnabled(plugin String, enabled bool) {
	self.ptr.API.EditorInterface_set_plugin_enabled(self, plugin, enabled)
}
func (self classEditorInterface) IsPluginEnabled(plugin String) bool {
	return self.ptr.API.EditorInterface_is_plugin_enabled(self, plugin)
}
func (self classEditorInterface) GetEditorTheme() Theme {
	return self.ptr.API.EditorInterface_get_editor_theme(self)
}
func (self classEditorInterface) GetBaseControl() Control {
	return self.ptr.API.EditorInterface_get_base_control(self)
}
func (self classEditorInterface) GetEditorMainScreen() VBoxContainer {
	return self.ptr.API.EditorInterface_get_editor_main_screen(self)
}
func (self classEditorInterface) GetScriptEditor() ScriptEditor {
	return self.ptr.API.EditorInterface_get_script_editor(self)
}
func (self classEditorInterface) GetEditorViewport2d() SubViewport {
	return self.ptr.API.EditorInterface_get_editor_viewport_2d(self)
}
func (self classEditorInterface) GetEditorViewport3d(idx Int) SubViewport {
	return self.ptr.API.EditorInterface_get_editor_viewport_3d(self, idx)
}
func (self classEditorInterface) SetMainScreenEditor(name String) {
	self.ptr.API.EditorInterface_set_main_screen_editor(self, name)
}
func (self classEditorInterface) SetDistractionFreeMode(enter bool) {
	self.ptr.API.EditorInterface_set_distraction_free_mode(self, enter)
}
func (self classEditorInterface) IsDistractionFreeModeEnabled() bool {
	return self.ptr.API.EditorInterface_is_distraction_free_mode_enabled(self)
}
func (self classEditorInterface) GetEditorScale() Float {
	return self.ptr.API.EditorInterface_get_editor_scale(self)
}
func (self classEditorInterface) PopupDialog(dialog Window, rect Rect2i) {
	self.ptr.API.EditorInterface_popup_dialog(self, dialog, rect)
}
func (self classEditorInterface) PopupDialogCentered(dialog Window, minsize Vector2i) {
	self.ptr.API.EditorInterface_popup_dialog_centered(self, dialog, minsize)
}
func (self classEditorInterface) PopupDialogCenteredRatio(dialog Window, ratio Float) {
	self.ptr.API.EditorInterface_popup_dialog_centered_ratio(self, dialog, ratio)
}
func (self classEditorInterface) PopupDialogCenteredClamped(dialog Window, minsize Vector2i, fallback_ratio Float) {
	self.ptr.API.EditorInterface_popup_dialog_centered_clamped(self, dialog, minsize, fallback_ratio)
}
func (self classEditorInterface) GetCurrentFeatureProfile() String {
	return self.ptr.API.EditorInterface_get_current_feature_profile(self)
}
func (self classEditorInterface) SetCurrentFeatureProfile(profile_name String) {
	self.ptr.API.EditorInterface_set_current_feature_profile(self, profile_name)
}
func (self classEditorInterface) GetFileSystemDock() FileSystemDock {
	return self.ptr.API.EditorInterface_get_file_system_dock(self)
}
func (self classEditorInterface) SelectFile(file String) {
	self.ptr.API.EditorInterface_select_file(self, file)
}
func (self classEditorInterface) GetSelectedPaths() PackedStringArray {
	return self.ptr.API.EditorInterface_get_selected_paths(self)
}
func (self classEditorInterface) GetCurrentPath() String {
	return self.ptr.API.EditorInterface_get_current_path(self)
}
func (self classEditorInterface) GetCurrentDirectory() String {
	return self.ptr.API.EditorInterface_get_current_directory(self)
}
func (self classEditorInterface) GetInspector() EditorInspector {
	return self.ptr.API.EditorInterface_get_inspector(self)
}
func (self classEditorInterface) InspectObject(object Object, for_property String, inspector_only bool) {
	self.ptr.API.EditorInterface_inspect_object(self, object, for_property, inspector_only)
}
func (self classEditorInterface) EditResource(resource Resource) {
	self.ptr.API.EditorInterface_edit_resource(self, resource)
}
func (self classEditorInterface) EditNode(node Node) {
	self.ptr.API.EditorInterface_edit_node(self, node)
}
func (self classEditorInterface) EditScript(script Script, line Int, column Int, grab_focus bool) {
	self.ptr.API.EditorInterface_edit_script(self, script, line, column, grab_focus)
}
func (self classEditorInterface) OpenSceneFromPath(scene_filepath String) {
	self.ptr.API.EditorInterface_open_scene_from_path(self, scene_filepath)
}
func (self classEditorInterface) ReloadSceneFromPath(scene_filepath String) {
	self.ptr.API.EditorInterface_reload_scene_from_path(self, scene_filepath)
}
func (self classEditorInterface) GetOpenScenes() PackedStringArray {
	return self.ptr.API.EditorInterface_get_open_scenes(self)
}
func (self classEditorInterface) GetEditedSceneRoot() Node {
	return self.ptr.API.EditorInterface_get_edited_scene_root(self)
}
func (self classEditorInterface) SaveScene() int64 {
	return self.ptr.API.EditorInterface_save_scene(self)
}
func (self classEditorInterface) SaveSceneAs(path String, with_preview bool) {
	self.ptr.API.EditorInterface_save_scene_as(self, path, with_preview)
}
func (self classEditorInterface) SaveAllScenes() {
	self.ptr.API.EditorInterface_save_all_scenes(self)
}
func (self classEditorInterface) MarkSceneAsUnsaved() {
	self.ptr.API.EditorInterface_mark_scene_as_unsaved(self)
}
func (self classEditorInterface) PlayMainScene() {
	self.ptr.API.EditorInterface_play_main_scene(self)
}
func (self classEditorInterface) PlayCurrentScene() {
	self.ptr.API.EditorInterface_play_current_scene(self)
}
func (self classEditorInterface) PlayCustomScene(scene_filepath String) {
	self.ptr.API.EditorInterface_play_custom_scene(self, scene_filepath)
}
func (self classEditorInterface) StopPlayingScene() {
	self.ptr.API.EditorInterface_stop_playing_scene(self)
}
func (self classEditorInterface) IsPlayingScene() bool {
	return self.ptr.API.EditorInterface_is_playing_scene(self)
}
func (self classEditorInterface) GetPlayingScene() String {
	return self.ptr.API.EditorInterface_get_playing_scene(self)
}
func (self classEditorInterface) SetMovieMakerEnabled(enabled bool) {
	self.ptr.API.EditorInterface_set_movie_maker_enabled(self, enabled)
}
func (self classEditorInterface) IsMovieMakerEnabled() bool {
	return self.ptr.API.EditorInterface_is_movie_maker_enabled(self)
}

type classEditorNode3DGizmo struct{ Class[classEditorNode3DGizmo] }

func (self classEditorNode3DGizmo) Super() Node3DGizmo {
	var super Node3DGizmo
	super.ptr = self.ptr
	return super
}

func (self classEditorNode3DGizmo) Node3DGizmo() Node3DGizmo { return self.Super() }
func (self classEditorNode3DGizmo) AddLines(lines PackedVector3Array, material Material, billboard bool, modulate Color) {
	self.ptr.API.EditorNode3DGizmo_add_lines(self, lines, material, billboard, modulate)
}
func (self classEditorNode3DGizmo) AddMesh(mesh Mesh, material Material, transform Transform3D, skeleton SkinReference) {
	self.ptr.API.EditorNode3DGizmo_add_mesh(self, mesh, material, transform, skeleton)
}
func (self classEditorNode3DGizmo) AddCollisionSegments(segments PackedVector3Array) {
	self.ptr.API.EditorNode3DGizmo_add_collision_segments(self, segments)
}
func (self classEditorNode3DGizmo) AddCollisionTriangles(triangles TriangleMesh) {
	self.ptr.API.EditorNode3DGizmo_add_collision_triangles(self, triangles)
}
func (self classEditorNode3DGizmo) AddUnscaledBillboard(material Material, default_scale Float, modulate Color) {
	self.ptr.API.EditorNode3DGizmo_add_unscaled_billboard(self, material, default_scale, modulate)
}
func (self classEditorNode3DGizmo) AddHandles(handles PackedVector3Array, material Material, ids PackedInt32Array, billboard bool, secondary bool) {
	self.ptr.API.EditorNode3DGizmo_add_handles(self, handles, material, ids, billboard, secondary)
}
func (self classEditorNode3DGizmo) SetNode3d(node Node) {
	self.ptr.API.EditorNode3DGizmo_set_node_3d(self, node)
}
func (self classEditorNode3DGizmo) GetNode3d() Node3D {
	return self.ptr.API.EditorNode3DGizmo_get_node_3d(self)
}
func (self classEditorNode3DGizmo) GetPlugin() EditorNode3DGizmoPlugin {
	return self.ptr.API.EditorNode3DGizmo_get_plugin(self)
}
func (self classEditorNode3DGizmo) Clear() {
	self.ptr.API.EditorNode3DGizmo_clear(self)
}
func (self classEditorNode3DGizmo) SetHidden(hidden bool) {
	self.ptr.API.EditorNode3DGizmo_set_hidden(self, hidden)
}
func (self classEditorNode3DGizmo) IsSubgizmoSelected(id Int) bool {
	return self.ptr.API.EditorNode3DGizmo_is_subgizmo_selected(self, id)
}
func (self classEditorNode3DGizmo) GetSubgizmoSelection() PackedInt32Array {
	return self.ptr.API.EditorNode3DGizmo_get_subgizmo_selection(self)
}

type classEditorNode3DGizmoPlugin struct {
	Class[classEditorNode3DGizmoPlugin]
}

func (self classEditorNode3DGizmoPlugin) Super() Resource {
	var super Resource
	super.ptr = self.ptr
	return super
}

func (self classEditorNode3DGizmoPlugin) Resource() Resource { return self.Super() }
func (self classEditorNode3DGizmoPlugin) CreateMaterial(name String, color Color, billboard bool, on_top bool, use_vertex_color bool) {
	self.ptr.API.EditorNode3DGizmoPlugin_create_material(self, name, color, billboard, on_top, use_vertex_color)
}
func (self classEditorNode3DGizmoPlugin) CreateIconMaterial(name String, texture Texture2D, on_top bool, color Color) {
	self.ptr.API.EditorNode3DGizmoPlugin_create_icon_material(self, name, texture, on_top, color)
}
func (self classEditorNode3DGizmoPlugin) CreateHandleMaterial(name String, billboard bool, texture Texture2D) {
	self.ptr.API.EditorNode3DGizmoPlugin_create_handle_material(self, name, billboard, texture)
}
func (self classEditorNode3DGizmoPlugin) AddMaterial(name String, material StandardMaterial3D) {
	self.ptr.API.EditorNode3DGizmoPlugin_add_material(self, name, material)
}
func (self classEditorNode3DGizmoPlugin) GetMaterial(name String, gizmo EditorNode3DGizmo) StandardMaterial3D {
	return self.ptr.API.EditorNode3DGizmoPlugin_get_material(self, name, gizmo)
}

type classEditorPaths struct{ Class[classEditorPaths] }

func (self classEditorPaths) Super() Object { var super Object; super.ptr = self.ptr; return super }

func (self classEditorPaths) Object() Object { return self.Super() }
func (self classEditorPaths) GetDataDir() String {
	return self.ptr.API.EditorPaths_get_data_dir(self)
}
func (self classEditorPaths) GetConfigDir() String {
	return self.ptr.API.EditorPaths_get_config_dir(self)
}
func (self classEditorPaths) GetCacheDir() String {
	return self.ptr.API.EditorPaths_get_cache_dir(self)
}
func (self classEditorPaths) IsSelfContained() bool {
	return self.ptr.API.EditorPaths_is_self_contained(self)
}
func (self classEditorPaths) GetSelfContainedFile() String {
	return self.ptr.API.EditorPaths_get_self_contained_file(self)
}
func (self classEditorPaths) GetProjectSettingsDir() String {
	return self.ptr.API.EditorPaths_get_project_settings_dir(self)
}

type classEditorPlugin struct{ Class[classEditorPlugin] }

func (self classEditorPlugin) Super() Node { var super Node; super.ptr = self.ptr; return super }

func (self classEditorPlugin) Node() Node { return self.Super() }
func (self classEditorPlugin) AddControlToContainer(container EditorPluginCustomControlContainer, control Control) {
	self.ptr.API.EditorPlugin_add_control_to_container(self, container, control)
}
func (self classEditorPlugin) AddControlToBottomPanel(control Control, title String) Button {
	return self.ptr.API.EditorPlugin_add_control_to_bottom_panel(self, control, title)
}
func (self classEditorPlugin) AddControlToDock(slot EditorPluginDockSlot, control Control) {
	self.ptr.API.EditorPlugin_add_control_to_dock(self, slot, control)
}
func (self classEditorPlugin) RemoveControlFromDocks(control Control) {
	self.ptr.API.EditorPlugin_remove_control_from_docks(self, control)
}
func (self classEditorPlugin) RemoveControlFromBottomPanel(control Control) {
	self.ptr.API.EditorPlugin_remove_control_from_bottom_panel(self, control)
}
func (self classEditorPlugin) RemoveControlFromContainer(container EditorPluginCustomControlContainer, control Control) {
	self.ptr.API.EditorPlugin_remove_control_from_container(self, container, control)
}
func (self classEditorPlugin) AddToolMenuItem(name String, callable Callable) {
	self.ptr.API.EditorPlugin_add_tool_menu_item(self, name, callable)
}
func (self classEditorPlugin) AddToolSubmenuItem(name String, submenu PopupMenu) {
	self.ptr.API.EditorPlugin_add_tool_submenu_item(self, name, submenu)
}
func (self classEditorPlugin) RemoveToolMenuItem(name String) {
	self.ptr.API.EditorPlugin_remove_tool_menu_item(self, name)
}
func (self classEditorPlugin) GetExportAsMenu() PopupMenu {
	return self.ptr.API.EditorPlugin_get_export_as_menu(self)
}
func (self classEditorPlugin) AddCustomType(atype String, base String, script Script, icon Texture2D) {
	self.ptr.API.EditorPlugin_add_custom_type(self, atype, base, script, icon)
}
func (self classEditorPlugin) RemoveCustomType(atype String) {
	self.ptr.API.EditorPlugin_remove_custom_type(self, atype)
}
func (self classEditorPlugin) AddAutoloadSingleton(name String, path String) {
	self.ptr.API.EditorPlugin_add_autoload_singleton(self, name, path)
}
func (self classEditorPlugin) RemoveAutoloadSingleton(name String) {
	self.ptr.API.EditorPlugin_remove_autoload_singleton(self, name)
}
func (self classEditorPlugin) UpdateOverlays() Int {
	return self.ptr.API.EditorPlugin_update_overlays(self)
}
func (self classEditorPlugin) MakeBottomPanelItemVisible(item Control) {
	self.ptr.API.EditorPlugin_make_bottom_panel_item_visible(self, item)
}
func (self classEditorPlugin) HideBottomPanel() {
	self.ptr.API.EditorPlugin_hide_bottom_panel(self)
}
func (self classEditorPlugin) GetUndoRedo() EditorUndoRedoManager {
	return self.ptr.API.EditorPlugin_get_undo_redo(self)
}
func (self classEditorPlugin) AddUndoRedoInspectorHookCallback(callable Callable) {
	self.ptr.API.EditorPlugin_add_undo_redo_inspector_hook_callback(self, callable)
}
func (self classEditorPlugin) RemoveUndoRedoInspectorHookCallback(callable Callable) {
	self.ptr.API.EditorPlugin_remove_undo_redo_inspector_hook_callback(self, callable)
}
func (self classEditorPlugin) QueueSaveLayout() {
	self.ptr.API.EditorPlugin_queue_save_layout(self)
}
func (self classEditorPlugin) AddTranslationParserPlugin(parser EditorTranslationParserPlugin) {
	self.ptr.API.EditorPlugin_add_translation_parser_plugin(self, parser)
}
func (self classEditorPlugin) RemoveTranslationParserPlugin(parser EditorTranslationParserPlugin) {
	self.ptr.API.EditorPlugin_remove_translation_parser_plugin(self, parser)
}
func (self classEditorPlugin) AddImportPlugin(importer EditorImportPlugin, first_priority bool) {
	self.ptr.API.EditorPlugin_add_import_plugin(self, importer, first_priority)
}
func (self classEditorPlugin) RemoveImportPlugin(importer EditorImportPlugin) {
	self.ptr.API.EditorPlugin_remove_import_plugin(self, importer)
}
func (self classEditorPlugin) AddSceneFormatImporterPlugin(scene_format_importer EditorSceneFormatImporter, first_priority bool) {
	self.ptr.API.EditorPlugin_add_scene_format_importer_plugin(self, scene_format_importer, first_priority)
}
func (self classEditorPlugin) RemoveSceneFormatImporterPlugin(scene_format_importer EditorSceneFormatImporter) {
	self.ptr.API.EditorPlugin_remove_scene_format_importer_plugin(self, scene_format_importer)
}
func (self classEditorPlugin) AddScenePostImportPlugin(scene_import_plugin EditorScenePostImportPlugin, first_priority bool) {
	self.ptr.API.EditorPlugin_add_scene_post_import_plugin(self, scene_import_plugin, first_priority)
}
func (self classEditorPlugin) RemoveScenePostImportPlugin(scene_import_plugin EditorScenePostImportPlugin) {
	self.ptr.API.EditorPlugin_remove_scene_post_import_plugin(self, scene_import_plugin)
}
func (self classEditorPlugin) AddExportPlugin(plugin EditorExportPlugin) {
	self.ptr.API.EditorPlugin_add_export_plugin(self, plugin)
}
func (self classEditorPlugin) RemoveExportPlugin(plugin EditorExportPlugin) {
	self.ptr.API.EditorPlugin_remove_export_plugin(self, plugin)
}
func (self classEditorPlugin) AddNode3dGizmoPlugin(plugin EditorNode3DGizmoPlugin) {
	self.ptr.API.EditorPlugin_add_node_3d_gizmo_plugin(self, plugin)
}
func (self classEditorPlugin) RemoveNode3dGizmoPlugin(plugin EditorNode3DGizmoPlugin) {
	self.ptr.API.EditorPlugin_remove_node_3d_gizmo_plugin(self, plugin)
}
func (self classEditorPlugin) AddInspectorPlugin(plugin EditorInspectorPlugin) {
	self.ptr.API.EditorPlugin_add_inspector_plugin(self, plugin)
}
func (self classEditorPlugin) RemoveInspectorPlugin(plugin EditorInspectorPlugin) {
	self.ptr.API.EditorPlugin_remove_inspector_plugin(self, plugin)
}
func (self classEditorPlugin) AddResourceConversionPlugin(plugin EditorResourceConversionPlugin) {
	self.ptr.API.EditorPlugin_add_resource_conversion_plugin(self, plugin)
}
func (self classEditorPlugin) RemoveResourceConversionPlugin(plugin EditorResourceConversionPlugin) {
	self.ptr.API.EditorPlugin_remove_resource_conversion_plugin(self, plugin)
}
func (self classEditorPlugin) SetInputEventForwardingAlwaysEnabled() {
	self.ptr.API.EditorPlugin_set_input_event_forwarding_always_enabled(self)
}
func (self classEditorPlugin) SetForceDrawOverForwardingEnabled() {
	self.ptr.API.EditorPlugin_set_force_draw_over_forwarding_enabled(self)
}
func (self classEditorPlugin) GetEditorInterface() EditorInterface {
	return self.ptr.API.EditorPlugin_get_editor_interface(self)
}
func (self classEditorPlugin) GetScriptCreateDialog() ScriptCreateDialog {
	return self.ptr.API.EditorPlugin_get_script_create_dialog(self)
}
func (self classEditorPlugin) AddDebuggerPlugin(script EditorDebuggerPlugin) {
	self.ptr.API.EditorPlugin_add_debugger_plugin(self, script)
}
func (self classEditorPlugin) RemoveDebuggerPlugin(script EditorDebuggerPlugin) {
	self.ptr.API.EditorPlugin_remove_debugger_plugin(self, script)
}
func (self classEditorPlugin) GetPluginVersion() String {
	return self.ptr.API.EditorPlugin_get_plugin_version(self)
}

type classEditorProperty struct{ Class[classEditorProperty] }

func (self classEditorProperty) Super() Container {
	var super Container
	super.ptr = self.ptr
	return super
}

func (self classEditorProperty) Container() Container { return self.Super() }
func (self classEditorProperty) SetLabel(text String) {
	self.ptr.API.EditorProperty_set_label(self, text)
}
func (self classEditorProperty) GetLabel() String {
	return self.ptr.API.EditorProperty_get_label(self)
}
func (self classEditorProperty) SetReadOnly(read_only bool) {
	self.ptr.API.EditorProperty_set_read_only(self, read_only)
}
func (self classEditorProperty) IsReadOnly() bool {
	return self.ptr.API.EditorProperty_is_read_only(self)
}
func (self classEditorProperty) SetCheckable(checkable bool) {
	self.ptr.API.EditorProperty_set_checkable(self, checkable)
}
func (self classEditorProperty) IsCheckable() bool {
	return self.ptr.API.EditorProperty_is_checkable(self)
}
func (self classEditorProperty) SetChecked(checked bool) {
	self.ptr.API.EditorProperty_set_checked(self, checked)
}
func (self classEditorProperty) IsChecked() bool {
	return self.ptr.API.EditorProperty_is_checked(self)
}
func (self classEditorProperty) SetDrawWarning(draw_warning bool) {
	self.ptr.API.EditorProperty_set_draw_warning(self, draw_warning)
}
func (self classEditorProperty) IsDrawWarning() bool {
	return self.ptr.API.EditorProperty_is_draw_warning(self)
}
func (self classEditorProperty) SetKeying(keying bool) {
	self.ptr.API.EditorProperty_set_keying(self, keying)
}
func (self classEditorProperty) IsKeying() bool {
	return self.ptr.API.EditorProperty_is_keying(self)
}
func (self classEditorProperty) SetDeletable(deletable bool) {
	self.ptr.API.EditorProperty_set_deletable(self, deletable)
}
func (self classEditorProperty) IsDeletable() bool {
	return self.ptr.API.EditorProperty_is_deletable(self)
}
func (self classEditorProperty) GetEditedProperty() StringName {
	return self.ptr.API.EditorProperty_get_edited_property(self)
}
func (self classEditorProperty) GetEditedObject() Object {
	return self.ptr.API.EditorProperty_get_edited_object(self)
}
func (self classEditorProperty) UpdateProperty() {
	self.ptr.API.EditorProperty_update_property(self)
}
func (self classEditorProperty) AddFocusable(control Control) {
	self.ptr.API.EditorProperty_add_focusable(self, control)
}
func (self classEditorProperty) SetBottomEditor(editor Control) {
	self.ptr.API.EditorProperty_set_bottom_editor(self, editor)
}
func (self classEditorProperty) EmitChanged(property StringName, value Variant, field StringName, changing bool) {
	self.ptr.API.EditorProperty_emit_changed(self, property, value, field, changing)
}

type classEditorResourceConversionPlugin struct {
	Class[classEditorResourceConversionPlugin]
}

func (self classEditorResourceConversionPlugin) Super() RefCounted {
	var super RefCounted
	super.ptr = self.ptr
	return super
}

func (self classEditorResourceConversionPlugin) RefCounted() RefCounted { return self.Super() }

type classEditorResourcePicker struct {
	Class[classEditorResourcePicker]
}

func (self classEditorResourcePicker) Super() HBoxContainer {
	var super HBoxContainer
	super.ptr = self.ptr
	return super
}

func (self classEditorResourcePicker) HBoxContainer() HBoxContainer { return self.Super() }
func (self classEditorResourcePicker) SetBaseType(base_type String) {
	self.ptr.API.EditorResourcePicker_set_base_type(self, base_type)
}
func (self classEditorResourcePicker) GetBaseType() String {
	return self.ptr.API.EditorResourcePicker_get_base_type(self)
}
func (self classEditorResourcePicker) GetAllowedTypes() PackedStringArray {
	return self.ptr.API.EditorResourcePicker_get_allowed_types(self)
}
func (self classEditorResourcePicker) SetEditedResource(resource Resource) {
	self.ptr.API.EditorResourcePicker_set_edited_resource(self, resource)
}
func (self classEditorResourcePicker) GetEditedResource() Resource {
	return self.ptr.API.EditorResourcePicker_get_edited_resource(self)
}
func (self classEditorResourcePicker) SetToggleMode(enable bool) {
	self.ptr.API.EditorResourcePicker_set_toggle_mode(self, enable)
}
func (self classEditorResourcePicker) IsToggleMode() bool {
	return self.ptr.API.EditorResourcePicker_is_toggle_mode(self)
}
func (self classEditorResourcePicker) SetTogglePressed(pressed bool) {
	self.ptr.API.EditorResourcePicker_set_toggle_pressed(self, pressed)
}
func (self classEditorResourcePicker) SetEditable(enable bool) {
	self.ptr.API.EditorResourcePicker_set_editable(self, enable)
}
func (self classEditorResourcePicker) IsEditable() bool {
	return self.ptr.API.EditorResourcePicker_is_editable(self)
}

type classEditorResourcePreview struct {
	Class[classEditorResourcePreview]
}

func (self classEditorResourcePreview) Super() Node {
	var super Node
	super.ptr = self.ptr
	return super
}

func (self classEditorResourcePreview) Node() Node { return self.Super() }
func (self classEditorResourcePreview) QueueResourcePreview(path String, receiver Object, receiver_func StringName, userdata Variant) {
	self.ptr.API.EditorResourcePreview_queue_resource_preview(self, path, receiver, receiver_func, userdata)
}
func (self classEditorResourcePreview) QueueEditedResourcePreview(resource Resource, receiver Object, receiver_func StringName, userdata Variant) {
	self.ptr.API.EditorResourcePreview_queue_edited_resource_preview(self, resource, receiver, receiver_func, userdata)
}
func (self classEditorResourcePreview) AddPreviewGenerator(generator EditorResourcePreviewGenerator) {
	self.ptr.API.EditorResourcePreview_add_preview_generator(self, generator)
}
func (self classEditorResourcePreview) RemovePreviewGenerator(generator EditorResourcePreviewGenerator) {
	self.ptr.API.EditorResourcePreview_remove_preview_generator(self, generator)
}
func (self classEditorResourcePreview) CheckForInvalidation(path String) {
	self.ptr.API.EditorResourcePreview_check_for_invalidation(self, path)
}

type classEditorResourcePreviewGenerator struct {
	Class[classEditorResourcePreviewGenerator]
}

func (self classEditorResourcePreviewGenerator) Super() RefCounted {
	var super RefCounted
	super.ptr = self.ptr
	return super
}

func (self classEditorResourcePreviewGenerator) RefCounted() RefCounted { return self.Super() }

type classEditorResourceTooltipPlugin struct {
	Class[classEditorResourceTooltipPlugin]
}

func (self classEditorResourceTooltipPlugin) Super() RefCounted {
	var super RefCounted
	super.ptr = self.ptr
	return super
}

func (self classEditorResourceTooltipPlugin) RefCounted() RefCounted { return self.Super() }
func (self classEditorResourceTooltipPlugin) RequestThumbnail(path String, control TextureRect) {
	self.ptr.API.EditorResourceTooltipPlugin_request_thumbnail(self, path, control)
}

type classEditorSceneFormatImporter struct {
	Class[classEditorSceneFormatImporter]
}

func (self classEditorSceneFormatImporter) Super() RefCounted {
	var super RefCounted
	super.ptr = self.ptr
	return super
}

func (self classEditorSceneFormatImporter) RefCounted() RefCounted { return self.Super() }

type classEditorSceneFormatImporterBlend struct {
	Class[classEditorSceneFormatImporterBlend]
}

func (self classEditorSceneFormatImporterBlend) Super() EditorSceneFormatImporter {
	var super EditorSceneFormatImporter
	super.ptr = self.ptr
	return super
}

func (self classEditorSceneFormatImporterBlend) EditorSceneFormatImporter() EditorSceneFormatImporter {
	return self.Super()
}

type classEditorSceneFormatImporterFBX struct {
	Class[classEditorSceneFormatImporterFBX]
}

func (self classEditorSceneFormatImporterFBX) Super() EditorSceneFormatImporter {
	var super EditorSceneFormatImporter
	super.ptr = self.ptr
	return super
}

func (self classEditorSceneFormatImporterFBX) EditorSceneFormatImporter() EditorSceneFormatImporter {
	return self.Super()
}

type classEditorSceneFormatImporterGLTF struct {
	Class[classEditorSceneFormatImporterGLTF]
}

func (self classEditorSceneFormatImporterGLTF) Super() EditorSceneFormatImporter {
	var super EditorSceneFormatImporter
	super.ptr = self.ptr
	return super
}

func (self classEditorSceneFormatImporterGLTF) EditorSceneFormatImporter() EditorSceneFormatImporter {
	return self.Super()
}

type classEditorScenePostImport struct {
	Class[classEditorScenePostImport]
}

func (self classEditorScenePostImport) Super() RefCounted {
	var super RefCounted
	super.ptr = self.ptr
	return super
}

func (self classEditorScenePostImport) RefCounted() RefCounted { return self.Super() }
func (self classEditorScenePostImport) GetSourceFile() String {
	return self.ptr.API.EditorScenePostImport_get_source_file(self)
}

type classEditorScenePostImportPlugin struct {
	Class[classEditorScenePostImportPlugin]
}

func (self classEditorScenePostImportPlugin) Super() RefCounted {
	var super RefCounted
	super.ptr = self.ptr
	return super
}

func (self classEditorScenePostImportPlugin) RefCounted() RefCounted { return self.Super() }
func (self classEditorScenePostImportPlugin) GetOptionValue(name StringName) Variant {
	return self.ptr.API.EditorScenePostImportPlugin_get_option_value(self, name)
}
func (self classEditorScenePostImportPlugin) AddImportOption(name String, value Variant) {
	self.ptr.API.EditorScenePostImportPlugin_add_import_option(self, name, value)
}
func (self classEditorScenePostImportPlugin) AddImportOptionAdvanced(atype VariantType, name String, default_value Variant, hint PropertyHint, hint_string String, usage_flags Int) {
	self.ptr.API.EditorScenePostImportPlugin_add_import_option_advanced(self, atype, name, default_value, hint, hint_string, usage_flags)
}

type classEditorScript struct{ Class[classEditorScript] }

func (self classEditorScript) Super() RefCounted {
	var super RefCounted
	super.ptr = self.ptr
	return super
}

func (self classEditorScript) RefCounted() RefCounted { return self.Super() }
func (self classEditorScript) AddRootNode(node Node) {
	self.ptr.API.EditorScript_add_root_node(self, node)
}
func (self classEditorScript) GetScene() Node {
	return self.ptr.API.EditorScript_get_scene(self)
}
func (self classEditorScript) GetEditorInterface() EditorInterface {
	return self.ptr.API.EditorScript_get_editor_interface(self)
}

type classEditorScriptPicker struct{ Class[classEditorScriptPicker] }

func (self classEditorScriptPicker) Super() EditorResourcePicker {
	var super EditorResourcePicker
	super.ptr = self.ptr
	return super
}

func (self classEditorScriptPicker) EditorResourcePicker() EditorResourcePicker { return self.Super() }
func (self classEditorScriptPicker) SetScriptOwner(owner_node Node) {
	self.ptr.API.EditorScriptPicker_set_script_owner(self, owner_node)
}
func (self classEditorScriptPicker) GetScriptOwner() Node {
	return self.ptr.API.EditorScriptPicker_get_script_owner(self)
}

type classEditorSelection struct{ Class[classEditorSelection] }

func (self classEditorSelection) Super() Object { var super Object; super.ptr = self.ptr; return super }

func (self classEditorSelection) Object() Object { return self.Super() }
func (self classEditorSelection) Clear() {
	self.ptr.API.EditorSelection_clear(self)
}
func (self classEditorSelection) AddNode(node Node) {
	self.ptr.API.EditorSelection_add_node(self, node)
}
func (self classEditorSelection) RemoveNode(node Node) {
	self.ptr.API.EditorSelection_remove_node(self, node)
}
func (self classEditorSelection) GetSelectedNodes() ArrayOf[Node] {
	return self.ptr.API.EditorSelection_get_selected_nodes(self)
}
func (self classEditorSelection) GetTransformableSelectedNodes() ArrayOf[Node] {
	return self.ptr.API.EditorSelection_get_transformable_selected_nodes(self)
}

type classEditorSettings struct{ Class[classEditorSettings] }

func (self classEditorSettings) Super() Resource {
	var super Resource
	super.ptr = self.ptr
	return super
}

func (self classEditorSettings) Resource() Resource { return self.Super() }
func (self classEditorSettings) HasSetting(name String) bool {
	return self.ptr.API.EditorSettings_has_setting(self, name)
}
func (self classEditorSettings) SetSetting(name String, value Variant) {
	self.ptr.API.EditorSettings_set_setting(self, name, value)
}
func (self classEditorSettings) GetSetting(name String) Variant {
	return self.ptr.API.EditorSettings_get_setting(self, name)
}
func (self classEditorSettings) Erase(property String) {
	self.ptr.API.EditorSettings_erase(self, property)
}
func (self classEditorSettings) SetInitialValue(name StringName, value Variant, update_current bool) {
	self.ptr.API.EditorSettings_set_initial_value(self, name, value, update_current)
}
func (self classEditorSettings) AddPropertyInfo(info Dictionary) {
	self.ptr.API.EditorSettings_add_property_info(self, info)
}
func (self classEditorSettings) SetProjectMetadata(section String, key String, data Variant) {
	self.ptr.API.EditorSettings_set_project_metadata(self, section, key, data)
}
func (self classEditorSettings) GetProjectMetadata(section String, key String, def Variant) Variant {
	return self.ptr.API.EditorSettings_get_project_metadata(self, section, key, def)
}
func (self classEditorSettings) SetFavorites(dirs PackedStringArray) {
	self.ptr.API.EditorSettings_set_favorites(self, dirs)
}
func (self classEditorSettings) GetFavorites() PackedStringArray {
	return self.ptr.API.EditorSettings_get_favorites(self)
}
func (self classEditorSettings) SetRecentDirs(dirs PackedStringArray) {
	self.ptr.API.EditorSettings_set_recent_dirs(self, dirs)
}
func (self classEditorSettings) GetRecentDirs() PackedStringArray {
	return self.ptr.API.EditorSettings_get_recent_dirs(self)
}
func (self classEditorSettings) SetBuiltinActionOverride(name String, actions_list ArrayOf[InputEvent]) {
	self.ptr.API.EditorSettings_set_builtin_action_override(self, name, actions_list)
}
func (self classEditorSettings) CheckChangedSettingsInGroup(setting_prefix String) bool {
	return self.ptr.API.EditorSettings_check_changed_settings_in_group(self, setting_prefix)
}
func (self classEditorSettings) GetChangedSettings() PackedStringArray {
	return self.ptr.API.EditorSettings_get_changed_settings(self)
}
func (self classEditorSettings) MarkSettingChanged(setting String) {
	self.ptr.API.EditorSettings_mark_setting_changed(self, setting)
}

type classEditorSpinSlider struct{ Class[classEditorSpinSlider] }

func (self classEditorSpinSlider) Super() Range { var super Range; super.ptr = self.ptr; return super }

func (self classEditorSpinSlider) Range() Range { return self.Super() }
func (self classEditorSpinSlider) SetLabel(label String) {
	self.ptr.API.EditorSpinSlider_set_label(self, label)
}
func (self classEditorSpinSlider) GetLabel() String {
	return self.ptr.API.EditorSpinSlider_get_label(self)
}
func (self classEditorSpinSlider) SetSuffix(suffix String) {
	self.ptr.API.EditorSpinSlider_set_suffix(self, suffix)
}
func (self classEditorSpinSlider) GetSuffix() String {
	return self.ptr.API.EditorSpinSlider_get_suffix(self)
}
func (self classEditorSpinSlider) SetReadOnly(read_only bool) {
	self.ptr.API.EditorSpinSlider_set_read_only(self, read_only)
}
func (self classEditorSpinSlider) IsReadOnly() bool {
	return self.ptr.API.EditorSpinSlider_is_read_only(self)
}
func (self classEditorSpinSlider) SetFlat(flat bool) {
	self.ptr.API.EditorSpinSlider_set_flat(self, flat)
}
func (self classEditorSpinSlider) IsFlat() bool {
	return self.ptr.API.EditorSpinSlider_is_flat(self)
}
func (self classEditorSpinSlider) SetHideSlider(hide_slider bool) {
	self.ptr.API.EditorSpinSlider_set_hide_slider(self, hide_slider)
}
func (self classEditorSpinSlider) IsHidingSlider() bool {
	return self.ptr.API.EditorSpinSlider_is_hiding_slider(self)
}

type classEditorSyntaxHighlighter struct {
	Class[classEditorSyntaxHighlighter]
}

func (self classEditorSyntaxHighlighter) Super() SyntaxHighlighter {
	var super SyntaxHighlighter
	super.ptr = self.ptr
	return super
}

func (self classEditorSyntaxHighlighter) SyntaxHighlighter() SyntaxHighlighter { return self.Super() }

type classEditorTranslationParserPlugin struct {
	Class[classEditorTranslationParserPlugin]
}

func (self classEditorTranslationParserPlugin) Super() RefCounted {
	var super RefCounted
	super.ptr = self.ptr
	return super
}

func (self classEditorTranslationParserPlugin) RefCounted() RefCounted { return self.Super() }

type classEditorUndoRedoManager struct {
	Class[classEditorUndoRedoManager]
}

func (self classEditorUndoRedoManager) Super() Object {
	var super Object
	super.ptr = self.ptr
	return super
}

func (self classEditorUndoRedoManager) Object() Object { return self.Super() }
func (self classEditorUndoRedoManager) CreateAction(name String, merge_mode UndoRedoMergeMode, custom_context Object, backward_undo_ops bool) {
	self.ptr.API.EditorUndoRedoManager_create_action(self, name, merge_mode, custom_context, backward_undo_ops)
}
func (self classEditorUndoRedoManager) CommitAction(execute bool) {
	self.ptr.API.EditorUndoRedoManager_commit_action(self, execute)
}
func (self classEditorUndoRedoManager) IsCommittingAction() bool {
	return self.ptr.API.EditorUndoRedoManager_is_committing_action(self)
}
func (self classEditorUndoRedoManager) AddDoMethod(object Object, method StringName) {
	self.ptr.API.EditorUndoRedoManager_add_do_method(self, object, method)
}
func (self classEditorUndoRedoManager) AddUndoMethod(object Object, method StringName) {
	self.ptr.API.EditorUndoRedoManager_add_undo_method(self, object, method)
}
func (self classEditorUndoRedoManager) AddDoProperty(object Object, property StringName, value Variant) {
	self.ptr.API.EditorUndoRedoManager_add_do_property(self, object, property, value)
}
func (self classEditorUndoRedoManager) AddUndoProperty(object Object, property StringName, value Variant) {
	self.ptr.API.EditorUndoRedoManager_add_undo_property(self, object, property, value)
}
func (self classEditorUndoRedoManager) AddDoReference(object Object) {
	self.ptr.API.EditorUndoRedoManager_add_do_reference(self, object)
}
func (self classEditorUndoRedoManager) AddUndoReference(object Object) {
	self.ptr.API.EditorUndoRedoManager_add_undo_reference(self, object)
}
func (self classEditorUndoRedoManager) GetObjectHistoryId(object Object) Int {
	return self.ptr.API.EditorUndoRedoManager_get_object_history_id(self, object)
}
func (self classEditorUndoRedoManager) GetHistoryUndoRedo(id Int) UndoRedo {
	return self.ptr.API.EditorUndoRedoManager_get_history_undo_redo(self, id)
}

type classEditorVCSInterface struct{ Class[classEditorVCSInterface] }

func (self classEditorVCSInterface) Super() Object {
	var super Object
	super.ptr = self.ptr
	return super
}

func (self classEditorVCSInterface) Object() Object { return self.Super() }
func (self classEditorVCSInterface) CreateDiffLine(new_line_no Int, old_line_no Int, content String, status String) Dictionary {
	return self.ptr.API.EditorVCSInterface_create_diff_line(self, new_line_no, old_line_no, content, status)
}
func (self classEditorVCSInterface) CreateDiffHunk(old_start Int, new_start Int, old_lines Int, new_lines Int) Dictionary {
	return self.ptr.API.EditorVCSInterface_create_diff_hunk(self, old_start, new_start, old_lines, new_lines)
}
func (self classEditorVCSInterface) CreateDiffFile(new_file String, old_file String) Dictionary {
	return self.ptr.API.EditorVCSInterface_create_diff_file(self, new_file, old_file)
}
func (self classEditorVCSInterface) CreateCommit(msg String, author String, id String, unix_timestamp Int, offset_minutes Int) Dictionary {
	return self.ptr.API.EditorVCSInterface_create_commit(self, msg, author, id, unix_timestamp, offset_minutes)
}
func (self classEditorVCSInterface) CreateStatusFile(file_path String, change_type EditorVCSInterfaceChangeType, area EditorVCSInterfaceTreeArea) Dictionary {
	return self.ptr.API.EditorVCSInterface_create_status_file(self, file_path, change_type, area)
}
func (self classEditorVCSInterface) AddDiffHunksIntoDiffFile(diff_file Dictionary, diff_hunks ArrayOf[Dictionary]) Dictionary {
	return self.ptr.API.EditorVCSInterface_add_diff_hunks_into_diff_file(self, diff_file, diff_hunks)
}
func (self classEditorVCSInterface) AddLineDiffsIntoDiffHunk(diff_hunk Dictionary, line_diffs ArrayOf[Dictionary]) Dictionary {
	return self.ptr.API.EditorVCSInterface_add_line_diffs_into_diff_hunk(self, diff_hunk, line_diffs)
}
func (self classEditorVCSInterface) PopupError(msg String) {
	self.ptr.API.EditorVCSInterface_popup_error(self, msg)
}

type classEncodedObjectAsID struct{ Class[classEncodedObjectAsID] }

func (self classEncodedObjectAsID) Super() RefCounted {
	var super RefCounted
	super.ptr = self.ptr
	return super
}

func (self classEncodedObjectAsID) RefCounted() RefCounted { return self.Super() }
func (self classEncodedObjectAsID) SetObjectId(id Int) {
	self.ptr.API.EncodedObjectAsID_set_object_id(self, id)
}
func (self classEncodedObjectAsID) GetObjectId() Int {
	return self.ptr.API.EncodedObjectAsID_get_object_id(self)
}

type classEngine struct{ Class[classEngine] }

func (self classEngine) Super() Object { var super Object; super.ptr = self.ptr; return super }

func (self classEngine) Object() Object { return self.Super() }

func (self classEngine) isSingleton() {}
func (self classEngine) SetPhysicsTicksPerSecond(physics_ticks_per_second Int) {
	self.ptr.API.Engine_set_physics_ticks_per_second(self, physics_ticks_per_second)
}
func (self classEngine) GetPhysicsTicksPerSecond() Int {
	return self.ptr.API.Engine_get_physics_ticks_per_second(self)
}
func (self classEngine) SetMaxPhysicsStepsPerFrame(max_physics_steps Int) {
	self.ptr.API.Engine_set_max_physics_steps_per_frame(self, max_physics_steps)
}
func (self classEngine) GetMaxPhysicsStepsPerFrame() Int {
	return self.ptr.API.Engine_get_max_physics_steps_per_frame(self)
}
func (self classEngine) SetPhysicsJitterFix(physics_jitter_fix Float) {
	self.ptr.API.Engine_set_physics_jitter_fix(self, physics_jitter_fix)
}
func (self classEngine) GetPhysicsJitterFix() Float {
	return self.ptr.API.Engine_get_physics_jitter_fix(self)
}
func (self classEngine) GetPhysicsInterpolationFraction() Float {
	return self.ptr.API.Engine_get_physics_interpolation_fraction(self)
}
func (self classEngine) SetMaxFps(max_fps Int) {
	self.ptr.API.Engine_set_max_fps(self, max_fps)
}
func (self classEngine) GetMaxFps() Int {
	return self.ptr.API.Engine_get_max_fps(self)
}
func (self classEngine) SetTimeScale(time_scale Float) {
	self.ptr.API.Engine_set_time_scale(self, time_scale)
}
func (self classEngine) GetTimeScale() Float {
	return self.ptr.API.Engine_get_time_scale(self)
}
func (self classEngine) GetFramesDrawn() Int {
	return self.ptr.API.Engine_get_frames_drawn(self)
}
func (self classEngine) GetFramesPerSecond() Float {
	return self.ptr.API.Engine_get_frames_per_second(self)
}
func (self classEngine) GetPhysicsFrames() Int {
	return self.ptr.API.Engine_get_physics_frames(self)
}
func (self classEngine) GetProcessFrames() Int {
	return self.ptr.API.Engine_get_process_frames(self)
}
func (self classEngine) GetMainLoop() MainLoop {
	return self.ptr.API.Engine_get_main_loop(self)
}
func (self classEngine) GetVersionInfo() Dictionary {
	return self.ptr.API.Engine_get_version_info(self)
}
func (self classEngine) GetAuthorInfo() Dictionary {
	return self.ptr.API.Engine_get_author_info(self)
}
func (self classEngine) GetCopyrightInfo() ArrayOf[Dictionary] {
	return self.ptr.API.Engine_get_copyright_info(self)
}
func (self classEngine) GetDonorInfo() Dictionary {
	return self.ptr.API.Engine_get_donor_info(self)
}
func (self classEngine) GetLicenseInfo() Dictionary {
	return self.ptr.API.Engine_get_license_info(self)
}
func (self classEngine) GetLicenseText() String {
	return self.ptr.API.Engine_get_license_text(self)
}
func (self classEngine) GetArchitectureName() String {
	return self.ptr.API.Engine_get_architecture_name(self)
}
func (self classEngine) IsInPhysicsFrame() bool {
	return self.ptr.API.Engine_is_in_physics_frame(self)
}
func (self classEngine) HasSingleton(name StringName) bool {
	return self.ptr.API.Engine_has_singleton(self, name)
}
func (self classEngine) GetSingleton(name StringName) Object {
	return self.ptr.API.Engine_get_singleton(self, name)
}
func (self classEngine) RegisterSingleton(name StringName, instance Object) {
	self.ptr.API.Engine_register_singleton(self, name, instance)
}
func (self classEngine) UnregisterSingleton(name StringName) {
	self.ptr.API.Engine_unregister_singleton(self, name)
}
func (self classEngine) GetSingletonList() PackedStringArray {
	return self.ptr.API.Engine_get_singleton_list(self)
}
func (self classEngine) RegisterScriptLanguage(language ScriptLanguage) int64 {
	return self.ptr.API.Engine_register_script_language(self, language)
}
func (self classEngine) UnregisterScriptLanguage(language ScriptLanguage) int64 {
	return self.ptr.API.Engine_unregister_script_language(self, language)
}
func (self classEngine) GetScriptLanguageCount() Int {
	return self.ptr.API.Engine_get_script_language_count(self)
}
func (self classEngine) GetScriptLanguage(index Int) ScriptLanguage {
	return self.ptr.API.Engine_get_script_language(self, index)
}
func (self classEngine) IsEditorHint() bool {
	return self.ptr.API.Engine_is_editor_hint(self)
}
func (self classEngine) GetWriteMoviePath() String {
	return self.ptr.API.Engine_get_write_movie_path(self)
}
func (self classEngine) SetPrintErrorMessages(enabled bool) {
	self.ptr.API.Engine_set_print_error_messages(self, enabled)
}
func (self classEngine) IsPrintingErrorMessages() bool {
	return self.ptr.API.Engine_is_printing_error_messages(self)
}

type classEngineDebugger struct{ Class[classEngineDebugger] }

func (self classEngineDebugger) Super() Object { var super Object; super.ptr = self.ptr; return super }

func (self classEngineDebugger) Object() Object { return self.Super() }

func (self classEngineDebugger) isSingleton() {}
func (self classEngineDebugger) IsActive() bool {
	return self.ptr.API.EngineDebugger_is_active(self)
}
func (self classEngineDebugger) RegisterProfiler(name StringName, profiler EngineProfiler) {
	self.ptr.API.EngineDebugger_register_profiler(self, name, profiler)
}
func (self classEngineDebugger) UnregisterProfiler(name StringName) {
	self.ptr.API.EngineDebugger_unregister_profiler(self, name)
}
func (self classEngineDebugger) IsProfiling(name StringName) bool {
	return self.ptr.API.EngineDebugger_is_profiling(self, name)
}
func (self classEngineDebugger) HasProfiler(name StringName) bool {
	return self.ptr.API.EngineDebugger_has_profiler(self, name)
}
func (self classEngineDebugger) ProfilerAddFrameData(name StringName, data Array) {
	self.ptr.API.EngineDebugger_profiler_add_frame_data(self, name, data)
}
func (self classEngineDebugger) ProfilerEnable(name StringName, enable bool, arguments Array) {
	self.ptr.API.EngineDebugger_profiler_enable(self, name, enable, arguments)
}
func (self classEngineDebugger) RegisterMessageCapture(name StringName, callable Callable) {
	self.ptr.API.EngineDebugger_register_message_capture(self, name, callable)
}
func (self classEngineDebugger) UnregisterMessageCapture(name StringName) {
	self.ptr.API.EngineDebugger_unregister_message_capture(self, name)
}
func (self classEngineDebugger) HasCapture(name StringName) bool {
	return self.ptr.API.EngineDebugger_has_capture(self, name)
}
func (self classEngineDebugger) SendMessage(message String, data Array) {
	self.ptr.API.EngineDebugger_send_message(self, message, data)
}

type classEngineProfiler struct{ Class[classEngineProfiler] }

func (self classEngineProfiler) Super() RefCounted {
	var super RefCounted
	super.ptr = self.ptr
	return super
}

func (self classEngineProfiler) RefCounted() RefCounted { return self.Super() }

type classEnvironment struct{ Class[classEnvironment] }

func (self classEnvironment) Super() Resource { var super Resource; super.ptr = self.ptr; return super }

func (self classEnvironment) Resource() Resource { return self.Super() }
func (self classEnvironment) SetBackground(mode EnvironmentBGMode) {
	self.ptr.API.Environment_set_background(self, mode)
}
func (self classEnvironment) GetBackground() EnvironmentBGMode {
	return self.ptr.API.Environment_get_background(self)
}
func (self classEnvironment) SetSky(sky Sky) {
	self.ptr.API.Environment_set_sky(self, sky)
}
func (self classEnvironment) GetSky() Sky {
	return self.ptr.API.Environment_get_sky(self)
}
func (self classEnvironment) SetSkyCustomFov(scale Float) {
	self.ptr.API.Environment_set_sky_custom_fov(self, scale)
}
func (self classEnvironment) GetSkyCustomFov() Float {
	return self.ptr.API.Environment_get_sky_custom_fov(self)
}
func (self classEnvironment) SetSkyRotation(euler_radians Vector3) {
	self.ptr.API.Environment_set_sky_rotation(self, euler_radians)
}
func (self classEnvironment) GetSkyRotation() Vector3 {
	return self.ptr.API.Environment_get_sky_rotation(self)
}
func (self classEnvironment) SetBgColor(color Color) {
	self.ptr.API.Environment_set_bg_color(self, color)
}
func (self classEnvironment) GetBgColor() Color {
	return self.ptr.API.Environment_get_bg_color(self)
}
func (self classEnvironment) SetBgEnergyMultiplier(energy Float) {
	self.ptr.API.Environment_set_bg_energy_multiplier(self, energy)
}
func (self classEnvironment) GetBgEnergyMultiplier() Float {
	return self.ptr.API.Environment_get_bg_energy_multiplier(self)
}
func (self classEnvironment) SetBgIntensity(energy Float) {
	self.ptr.API.Environment_set_bg_intensity(self, energy)
}
func (self classEnvironment) GetBgIntensity() Float {
	return self.ptr.API.Environment_get_bg_intensity(self)
}
func (self classEnvironment) SetCanvasMaxLayer(layer Int) {
	self.ptr.API.Environment_set_canvas_max_layer(self, layer)
}
func (self classEnvironment) GetCanvasMaxLayer() Int {
	return self.ptr.API.Environment_get_canvas_max_layer(self)
}
func (self classEnvironment) SetCameraFeedId(id Int) {
	self.ptr.API.Environment_set_camera_feed_id(self, id)
}
func (self classEnvironment) GetCameraFeedId() Int {
	return self.ptr.API.Environment_get_camera_feed_id(self)
}
func (self classEnvironment) SetAmbientLightColor(color Color) {
	self.ptr.API.Environment_set_ambient_light_color(self, color)
}
func (self classEnvironment) GetAmbientLightColor() Color {
	return self.ptr.API.Environment_get_ambient_light_color(self)
}
func (self classEnvironment) SetAmbientSource(source EnvironmentAmbientSource) {
	self.ptr.API.Environment_set_ambient_source(self, source)
}
func (self classEnvironment) GetAmbientSource() EnvironmentAmbientSource {
	return self.ptr.API.Environment_get_ambient_source(self)
}
func (self classEnvironment) SetAmbientLightEnergy(energy Float) {
	self.ptr.API.Environment_set_ambient_light_energy(self, energy)
}
func (self classEnvironment) GetAmbientLightEnergy() Float {
	return self.ptr.API.Environment_get_ambient_light_energy(self)
}
func (self classEnvironment) SetAmbientLightSkyContribution(ratio Float) {
	self.ptr.API.Environment_set_ambient_light_sky_contribution(self, ratio)
}
func (self classEnvironment) GetAmbientLightSkyContribution() Float {
	return self.ptr.API.Environment_get_ambient_light_sky_contribution(self)
}
func (self classEnvironment) SetReflectionSource(source EnvironmentReflectionSource) {
	self.ptr.API.Environment_set_reflection_source(self, source)
}
func (self classEnvironment) GetReflectionSource() EnvironmentReflectionSource {
	return self.ptr.API.Environment_get_reflection_source(self)
}
func (self classEnvironment) SetTonemapper(mode EnvironmentToneMapper) {
	self.ptr.API.Environment_set_tonemapper(self, mode)
}
func (self classEnvironment) GetTonemapper() EnvironmentToneMapper {
	return self.ptr.API.Environment_get_tonemapper(self)
}
func (self classEnvironment) SetTonemapExposure(exposure Float) {
	self.ptr.API.Environment_set_tonemap_exposure(self, exposure)
}
func (self classEnvironment) GetTonemapExposure() Float {
	return self.ptr.API.Environment_get_tonemap_exposure(self)
}
func (self classEnvironment) SetTonemapWhite(white Float) {
	self.ptr.API.Environment_set_tonemap_white(self, white)
}
func (self classEnvironment) GetTonemapWhite() Float {
	return self.ptr.API.Environment_get_tonemap_white(self)
}
func (self classEnvironment) SetSsrEnabled(enabled bool) {
	self.ptr.API.Environment_set_ssr_enabled(self, enabled)
}
func (self classEnvironment) IsSsrEnabled() bool {
	return self.ptr.API.Environment_is_ssr_enabled(self)
}
func (self classEnvironment) SetSsrMaxSteps(max_steps Int) {
	self.ptr.API.Environment_set_ssr_max_steps(self, max_steps)
}
func (self classEnvironment) GetSsrMaxSteps() Int {
	return self.ptr.API.Environment_get_ssr_max_steps(self)
}
func (self classEnvironment) SetSsrFadeIn(fade_in Float) {
	self.ptr.API.Environment_set_ssr_fade_in(self, fade_in)
}
func (self classEnvironment) GetSsrFadeIn() Float {
	return self.ptr.API.Environment_get_ssr_fade_in(self)
}
func (self classEnvironment) SetSsrFadeOut(fade_out Float) {
	self.ptr.API.Environment_set_ssr_fade_out(self, fade_out)
}
func (self classEnvironment) GetSsrFadeOut() Float {
	return self.ptr.API.Environment_get_ssr_fade_out(self)
}
func (self classEnvironment) SetSsrDepthTolerance(depth_tolerance Float) {
	self.ptr.API.Environment_set_ssr_depth_tolerance(self, depth_tolerance)
}
func (self classEnvironment) GetSsrDepthTolerance() Float {
	return self.ptr.API.Environment_get_ssr_depth_tolerance(self)
}
func (self classEnvironment) SetSsaoEnabled(enabled bool) {
	self.ptr.API.Environment_set_ssao_enabled(self, enabled)
}
func (self classEnvironment) IsSsaoEnabled() bool {
	return self.ptr.API.Environment_is_ssao_enabled(self)
}
func (self classEnvironment) SetSsaoRadius(radius Float) {
	self.ptr.API.Environment_set_ssao_radius(self, radius)
}
func (self classEnvironment) GetSsaoRadius() Float {
	return self.ptr.API.Environment_get_ssao_radius(self)
}
func (self classEnvironment) SetSsaoIntensity(intensity Float) {
	self.ptr.API.Environment_set_ssao_intensity(self, intensity)
}
func (self classEnvironment) GetSsaoIntensity() Float {
	return self.ptr.API.Environment_get_ssao_intensity(self)
}
func (self classEnvironment) SetSsaoPower(power Float) {
	self.ptr.API.Environment_set_ssao_power(self, power)
}
func (self classEnvironment) GetSsaoPower() Float {
	return self.ptr.API.Environment_get_ssao_power(self)
}
func (self classEnvironment) SetSsaoDetail(detail Float) {
	self.ptr.API.Environment_set_ssao_detail(self, detail)
}
func (self classEnvironment) GetSsaoDetail() Float {
	return self.ptr.API.Environment_get_ssao_detail(self)
}
func (self classEnvironment) SetSsaoHorizon(horizon Float) {
	self.ptr.API.Environment_set_ssao_horizon(self, horizon)
}
func (self classEnvironment) GetSsaoHorizon() Float {
	return self.ptr.API.Environment_get_ssao_horizon(self)
}
func (self classEnvironment) SetSsaoSharpness(sharpness Float) {
	self.ptr.API.Environment_set_ssao_sharpness(self, sharpness)
}
func (self classEnvironment) GetSsaoSharpness() Float {
	return self.ptr.API.Environment_get_ssao_sharpness(self)
}
func (self classEnvironment) SetSsaoDirectLightAffect(amount Float) {
	self.ptr.API.Environment_set_ssao_direct_light_affect(self, amount)
}
func (self classEnvironment) GetSsaoDirectLightAffect() Float {
	return self.ptr.API.Environment_get_ssao_direct_light_affect(self)
}
func (self classEnvironment) SetSsaoAoChannelAffect(amount Float) {
	self.ptr.API.Environment_set_ssao_ao_channel_affect(self, amount)
}
func (self classEnvironment) GetSsaoAoChannelAffect() Float {
	return self.ptr.API.Environment_get_ssao_ao_channel_affect(self)
}
func (self classEnvironment) SetSsilEnabled(enabled bool) {
	self.ptr.API.Environment_set_ssil_enabled(self, enabled)
}
func (self classEnvironment) IsSsilEnabled() bool {
	return self.ptr.API.Environment_is_ssil_enabled(self)
}
func (self classEnvironment) SetSsilRadius(radius Float) {
	self.ptr.API.Environment_set_ssil_radius(self, radius)
}
func (self classEnvironment) GetSsilRadius() Float {
	return self.ptr.API.Environment_get_ssil_radius(self)
}
func (self classEnvironment) SetSsilIntensity(intensity Float) {
	self.ptr.API.Environment_set_ssil_intensity(self, intensity)
}
func (self classEnvironment) GetSsilIntensity() Float {
	return self.ptr.API.Environment_get_ssil_intensity(self)
}
func (self classEnvironment) SetSsilSharpness(sharpness Float) {
	self.ptr.API.Environment_set_ssil_sharpness(self, sharpness)
}
func (self classEnvironment) GetSsilSharpness() Float {
	return self.ptr.API.Environment_get_ssil_sharpness(self)
}
func (self classEnvironment) SetSsilNormalRejection(normal_rejection Float) {
	self.ptr.API.Environment_set_ssil_normal_rejection(self, normal_rejection)
}
func (self classEnvironment) GetSsilNormalRejection() Float {
	return self.ptr.API.Environment_get_ssil_normal_rejection(self)
}
func (self classEnvironment) SetSdfgiEnabled(enabled bool) {
	self.ptr.API.Environment_set_sdfgi_enabled(self, enabled)
}
func (self classEnvironment) IsSdfgiEnabled() bool {
	return self.ptr.API.Environment_is_sdfgi_enabled(self)
}
func (self classEnvironment) SetSdfgiCascades(amount Int) {
	self.ptr.API.Environment_set_sdfgi_cascades(self, amount)
}
func (self classEnvironment) GetSdfgiCascades() Int {
	return self.ptr.API.Environment_get_sdfgi_cascades(self)
}
func (self classEnvironment) SetSdfgiMinCellSize(size Float) {
	self.ptr.API.Environment_set_sdfgi_min_cell_size(self, size)
}
func (self classEnvironment) GetSdfgiMinCellSize() Float {
	return self.ptr.API.Environment_get_sdfgi_min_cell_size(self)
}
func (self classEnvironment) SetSdfgiMaxDistance(distance Float) {
	self.ptr.API.Environment_set_sdfgi_max_distance(self, distance)
}
func (self classEnvironment) GetSdfgiMaxDistance() Float {
	return self.ptr.API.Environment_get_sdfgi_max_distance(self)
}
func (self classEnvironment) SetSdfgiCascade0Distance(distance Float) {
	self.ptr.API.Environment_set_sdfgi_cascade0_distance(self, distance)
}
func (self classEnvironment) GetSdfgiCascade0Distance() Float {
	return self.ptr.API.Environment_get_sdfgi_cascade0_distance(self)
}
func (self classEnvironment) SetSdfgiYScale(scale EnvironmentSDFGIYScale) {
	self.ptr.API.Environment_set_sdfgi_y_scale(self, scale)
}
func (self classEnvironment) GetSdfgiYScale() EnvironmentSDFGIYScale {
	return self.ptr.API.Environment_get_sdfgi_y_scale(self)
}
func (self classEnvironment) SetSdfgiUseOcclusion(enable bool) {
	self.ptr.API.Environment_set_sdfgi_use_occlusion(self, enable)
}
func (self classEnvironment) IsSdfgiUsingOcclusion() bool {
	return self.ptr.API.Environment_is_sdfgi_using_occlusion(self)
}
func (self classEnvironment) SetSdfgiBounceFeedback(amount Float) {
	self.ptr.API.Environment_set_sdfgi_bounce_feedback(self, amount)
}
func (self classEnvironment) GetSdfgiBounceFeedback() Float {
	return self.ptr.API.Environment_get_sdfgi_bounce_feedback(self)
}
func (self classEnvironment) SetSdfgiReadSkyLight(enable bool) {
	self.ptr.API.Environment_set_sdfgi_read_sky_light(self, enable)
}
func (self classEnvironment) IsSdfgiReadingSkyLight() bool {
	return self.ptr.API.Environment_is_sdfgi_reading_sky_light(self)
}
func (self classEnvironment) SetSdfgiEnergy(amount Float) {
	self.ptr.API.Environment_set_sdfgi_energy(self, amount)
}
func (self classEnvironment) GetSdfgiEnergy() Float {
	return self.ptr.API.Environment_get_sdfgi_energy(self)
}
func (self classEnvironment) SetSdfgiNormalBias(bias Float) {
	self.ptr.API.Environment_set_sdfgi_normal_bias(self, bias)
}
func (self classEnvironment) GetSdfgiNormalBias() Float {
	return self.ptr.API.Environment_get_sdfgi_normal_bias(self)
}
func (self classEnvironment) SetSdfgiProbeBias(bias Float) {
	self.ptr.API.Environment_set_sdfgi_probe_bias(self, bias)
}
func (self classEnvironment) GetSdfgiProbeBias() Float {
	return self.ptr.API.Environment_get_sdfgi_probe_bias(self)
}
func (self classEnvironment) SetGlowEnabled(enabled bool) {
	self.ptr.API.Environment_set_glow_enabled(self, enabled)
}
func (self classEnvironment) IsGlowEnabled() bool {
	return self.ptr.API.Environment_is_glow_enabled(self)
}
func (self classEnvironment) SetGlowLevel(idx Int, intensity Float) {
	self.ptr.API.Environment_set_glow_level(self, idx, intensity)
}
func (self classEnvironment) GetGlowLevel(idx Int) Float {
	return self.ptr.API.Environment_get_glow_level(self, idx)
}
func (self classEnvironment) SetGlowNormalized(normalize bool) {
	self.ptr.API.Environment_set_glow_normalized(self, normalize)
}
func (self classEnvironment) IsGlowNormalized() bool {
	return self.ptr.API.Environment_is_glow_normalized(self)
}
func (self classEnvironment) SetGlowIntensity(intensity Float) {
	self.ptr.API.Environment_set_glow_intensity(self, intensity)
}
func (self classEnvironment) GetGlowIntensity() Float {
	return self.ptr.API.Environment_get_glow_intensity(self)
}
func (self classEnvironment) SetGlowStrength(strength Float) {
	self.ptr.API.Environment_set_glow_strength(self, strength)
}
func (self classEnvironment) GetGlowStrength() Float {
	return self.ptr.API.Environment_get_glow_strength(self)
}
func (self classEnvironment) SetGlowMix(mix Float) {
	self.ptr.API.Environment_set_glow_mix(self, mix)
}
func (self classEnvironment) GetGlowMix() Float {
	return self.ptr.API.Environment_get_glow_mix(self)
}
func (self classEnvironment) SetGlowBloom(amount Float) {
	self.ptr.API.Environment_set_glow_bloom(self, amount)
}
func (self classEnvironment) GetGlowBloom() Float {
	return self.ptr.API.Environment_get_glow_bloom(self)
}
func (self classEnvironment) SetGlowBlendMode(mode EnvironmentGlowBlendMode) {
	self.ptr.API.Environment_set_glow_blend_mode(self, mode)
}
func (self classEnvironment) GetGlowBlendMode() EnvironmentGlowBlendMode {
	return self.ptr.API.Environment_get_glow_blend_mode(self)
}
func (self classEnvironment) SetGlowHdrBleedThreshold(threshold Float) {
	self.ptr.API.Environment_set_glow_hdr_bleed_threshold(self, threshold)
}
func (self classEnvironment) GetGlowHdrBleedThreshold() Float {
	return self.ptr.API.Environment_get_glow_hdr_bleed_threshold(self)
}
func (self classEnvironment) SetGlowHdrBleedScale(scale Float) {
	self.ptr.API.Environment_set_glow_hdr_bleed_scale(self, scale)
}
func (self classEnvironment) GetGlowHdrBleedScale() Float {
	return self.ptr.API.Environment_get_glow_hdr_bleed_scale(self)
}
func (self classEnvironment) SetGlowHdrLuminanceCap(amount Float) {
	self.ptr.API.Environment_set_glow_hdr_luminance_cap(self, amount)
}
func (self classEnvironment) GetGlowHdrLuminanceCap() Float {
	return self.ptr.API.Environment_get_glow_hdr_luminance_cap(self)
}
func (self classEnvironment) SetGlowMapStrength(strength Float) {
	self.ptr.API.Environment_set_glow_map_strength(self, strength)
}
func (self classEnvironment) GetGlowMapStrength() Float {
	return self.ptr.API.Environment_get_glow_map_strength(self)
}
func (self classEnvironment) SetGlowMap(mode Texture) {
	self.ptr.API.Environment_set_glow_map(self, mode)
}
func (self classEnvironment) GetGlowMap() Texture {
	return self.ptr.API.Environment_get_glow_map(self)
}
func (self classEnvironment) SetFogEnabled(enabled bool) {
	self.ptr.API.Environment_set_fog_enabled(self, enabled)
}
func (self classEnvironment) IsFogEnabled() bool {
	return self.ptr.API.Environment_is_fog_enabled(self)
}
func (self classEnvironment) SetFogLightColor(light_color Color) {
	self.ptr.API.Environment_set_fog_light_color(self, light_color)
}
func (self classEnvironment) GetFogLightColor() Color {
	return self.ptr.API.Environment_get_fog_light_color(self)
}
func (self classEnvironment) SetFogLightEnergy(light_energy Float) {
	self.ptr.API.Environment_set_fog_light_energy(self, light_energy)
}
func (self classEnvironment) GetFogLightEnergy() Float {
	return self.ptr.API.Environment_get_fog_light_energy(self)
}
func (self classEnvironment) SetFogSunScatter(sun_scatter Float) {
	self.ptr.API.Environment_set_fog_sun_scatter(self, sun_scatter)
}
func (self classEnvironment) GetFogSunScatter() Float {
	return self.ptr.API.Environment_get_fog_sun_scatter(self)
}
func (self classEnvironment) SetFogDensity(density Float) {
	self.ptr.API.Environment_set_fog_density(self, density)
}
func (self classEnvironment) GetFogDensity() Float {
	return self.ptr.API.Environment_get_fog_density(self)
}
func (self classEnvironment) SetFogHeight(height Float) {
	self.ptr.API.Environment_set_fog_height(self, height)
}
func (self classEnvironment) GetFogHeight() Float {
	return self.ptr.API.Environment_get_fog_height(self)
}
func (self classEnvironment) SetFogHeightDensity(height_density Float) {
	self.ptr.API.Environment_set_fog_height_density(self, height_density)
}
func (self classEnvironment) GetFogHeightDensity() Float {
	return self.ptr.API.Environment_get_fog_height_density(self)
}
func (self classEnvironment) SetFogAerialPerspective(aerial_perspective Float) {
	self.ptr.API.Environment_set_fog_aerial_perspective(self, aerial_perspective)
}
func (self classEnvironment) GetFogAerialPerspective() Float {
	return self.ptr.API.Environment_get_fog_aerial_perspective(self)
}
func (self classEnvironment) SetFogSkyAffect(sky_affect Float) {
	self.ptr.API.Environment_set_fog_sky_affect(self, sky_affect)
}
func (self classEnvironment) GetFogSkyAffect() Float {
	return self.ptr.API.Environment_get_fog_sky_affect(self)
}
func (self classEnvironment) SetVolumetricFogEnabled(enabled bool) {
	self.ptr.API.Environment_set_volumetric_fog_enabled(self, enabled)
}
func (self classEnvironment) IsVolumetricFogEnabled() bool {
	return self.ptr.API.Environment_is_volumetric_fog_enabled(self)
}
func (self classEnvironment) SetVolumetricFogEmission(color Color) {
	self.ptr.API.Environment_set_volumetric_fog_emission(self, color)
}
func (self classEnvironment) GetVolumetricFogEmission() Color {
	return self.ptr.API.Environment_get_volumetric_fog_emission(self)
}
func (self classEnvironment) SetVolumetricFogAlbedo(color Color) {
	self.ptr.API.Environment_set_volumetric_fog_albedo(self, color)
}
func (self classEnvironment) GetVolumetricFogAlbedo() Color {
	return self.ptr.API.Environment_get_volumetric_fog_albedo(self)
}
func (self classEnvironment) SetVolumetricFogDensity(density Float) {
	self.ptr.API.Environment_set_volumetric_fog_density(self, density)
}
func (self classEnvironment) GetVolumetricFogDensity() Float {
	return self.ptr.API.Environment_get_volumetric_fog_density(self)
}
func (self classEnvironment) SetVolumetricFogEmissionEnergy(begin Float) {
	self.ptr.API.Environment_set_volumetric_fog_emission_energy(self, begin)
}
func (self classEnvironment) GetVolumetricFogEmissionEnergy() Float {
	return self.ptr.API.Environment_get_volumetric_fog_emission_energy(self)
}
func (self classEnvironment) SetVolumetricFogAnisotropy(anisotropy Float) {
	self.ptr.API.Environment_set_volumetric_fog_anisotropy(self, anisotropy)
}
func (self classEnvironment) GetVolumetricFogAnisotropy() Float {
	return self.ptr.API.Environment_get_volumetric_fog_anisotropy(self)
}
func (self classEnvironment) SetVolumetricFogLength(length Float) {
	self.ptr.API.Environment_set_volumetric_fog_length(self, length)
}
func (self classEnvironment) GetVolumetricFogLength() Float {
	return self.ptr.API.Environment_get_volumetric_fog_length(self)
}
func (self classEnvironment) SetVolumetricFogDetailSpread(detail_spread Float) {
	self.ptr.API.Environment_set_volumetric_fog_detail_spread(self, detail_spread)
}
func (self classEnvironment) GetVolumetricFogDetailSpread() Float {
	return self.ptr.API.Environment_get_volumetric_fog_detail_spread(self)
}
func (self classEnvironment) SetVolumetricFogGiInject(gi_inject Float) {
	self.ptr.API.Environment_set_volumetric_fog_gi_inject(self, gi_inject)
}
func (self classEnvironment) GetVolumetricFogGiInject() Float {
	return self.ptr.API.Environment_get_volumetric_fog_gi_inject(self)
}
func (self classEnvironment) SetVolumetricFogAmbientInject(enabled Float) {
	self.ptr.API.Environment_set_volumetric_fog_ambient_inject(self, enabled)
}
func (self classEnvironment) GetVolumetricFogAmbientInject() Float {
	return self.ptr.API.Environment_get_volumetric_fog_ambient_inject(self)
}
func (self classEnvironment) SetVolumetricFogSkyAffect(sky_affect Float) {
	self.ptr.API.Environment_set_volumetric_fog_sky_affect(self, sky_affect)
}
func (self classEnvironment) GetVolumetricFogSkyAffect() Float {
	return self.ptr.API.Environment_get_volumetric_fog_sky_affect(self)
}
func (self classEnvironment) SetVolumetricFogTemporalReprojectionEnabled(enabled bool) {
	self.ptr.API.Environment_set_volumetric_fog_temporal_reprojection_enabled(self, enabled)
}
func (self classEnvironment) IsVolumetricFogTemporalReprojectionEnabled() bool {
	return self.ptr.API.Environment_is_volumetric_fog_temporal_reprojection_enabled(self)
}
func (self classEnvironment) SetVolumetricFogTemporalReprojectionAmount(temporal_reprojection_amount Float) {
	self.ptr.API.Environment_set_volumetric_fog_temporal_reprojection_amount(self, temporal_reprojection_amount)
}
func (self classEnvironment) GetVolumetricFogTemporalReprojectionAmount() Float {
	return self.ptr.API.Environment_get_volumetric_fog_temporal_reprojection_amount(self)
}
func (self classEnvironment) SetAdjustmentEnabled(enabled bool) {
	self.ptr.API.Environment_set_adjustment_enabled(self, enabled)
}
func (self classEnvironment) IsAdjustmentEnabled() bool {
	return self.ptr.API.Environment_is_adjustment_enabled(self)
}
func (self classEnvironment) SetAdjustmentBrightness(brightness Float) {
	self.ptr.API.Environment_set_adjustment_brightness(self, brightness)
}
func (self classEnvironment) GetAdjustmentBrightness() Float {
	return self.ptr.API.Environment_get_adjustment_brightness(self)
}
func (self classEnvironment) SetAdjustmentContrast(contrast Float) {
	self.ptr.API.Environment_set_adjustment_contrast(self, contrast)
}
func (self classEnvironment) GetAdjustmentContrast() Float {
	return self.ptr.API.Environment_get_adjustment_contrast(self)
}
func (self classEnvironment) SetAdjustmentSaturation(saturation Float) {
	self.ptr.API.Environment_set_adjustment_saturation(self, saturation)
}
func (self classEnvironment) GetAdjustmentSaturation() Float {
	return self.ptr.API.Environment_get_adjustment_saturation(self)
}
func (self classEnvironment) SetAdjustmentColorCorrection(color_correction Texture) {
	self.ptr.API.Environment_set_adjustment_color_correction(self, color_correction)
}
func (self classEnvironment) GetAdjustmentColorCorrection() Texture {
	return self.ptr.API.Environment_get_adjustment_color_correction(self)
}

type classExpression struct{ Class[classExpression] }

func (self classExpression) Super() RefCounted {
	var super RefCounted
	super.ptr = self.ptr
	return super
}

func (self classExpression) RefCounted() RefCounted { return self.Super() }
func (self classExpression) Parse(expression String, input_names PackedStringArray) int64 {
	return self.ptr.API.Expression_parse(self, expression, input_names)
}
func (self classExpression) Execute(inputs Array, base_instance Object, show_error bool, const_calls_only bool) Variant {
	return self.ptr.API.Expression_execute(self, inputs, base_instance, show_error, const_calls_only)
}
func (self classExpression) HasExecuteFailed() bool {
	return self.ptr.API.Expression_has_execute_failed(self)
}
func (self classExpression) GetErrorText() String {
	return self.ptr.API.Expression_get_error_text(self)
}

type classExtendedNode struct{ Class[classExtendedNode] }

func (self classExtendedNode) Super() Node2D { var super Node2D; super.ptr = self.ptr; return super }

func (self classExtendedNode) Node2D() Node2D { return self.Super() }

type classFastNoiseLite struct{ Class[classFastNoiseLite] }

func (self classFastNoiseLite) Super() Noise { var super Noise; super.ptr = self.ptr; return super }

func (self classFastNoiseLite) Noise() Noise { return self.Super() }
func (self classFastNoiseLite) SetNoiseType(atype FastNoiseLiteNoiseType) {
	self.ptr.API.FastNoiseLite_set_noise_type(self, atype)
}
func (self classFastNoiseLite) GetNoiseType() FastNoiseLiteNoiseType {
	return self.ptr.API.FastNoiseLite_get_noise_type(self)
}
func (self classFastNoiseLite) SetSeed(seed Int) {
	self.ptr.API.FastNoiseLite_set_seed(self, seed)
}
func (self classFastNoiseLite) GetSeed() Int {
	return self.ptr.API.FastNoiseLite_get_seed(self)
}
func (self classFastNoiseLite) SetFrequency(freq Float) {
	self.ptr.API.FastNoiseLite_set_frequency(self, freq)
}
func (self classFastNoiseLite) GetFrequency() Float {
	return self.ptr.API.FastNoiseLite_get_frequency(self)
}
func (self classFastNoiseLite) SetOffset(offset Vector3) {
	self.ptr.API.FastNoiseLite_set_offset(self, offset)
}
func (self classFastNoiseLite) GetOffset() Vector3 {
	return self.ptr.API.FastNoiseLite_get_offset(self)
}
func (self classFastNoiseLite) SetFractalType(atype FastNoiseLiteFractalType) {
	self.ptr.API.FastNoiseLite_set_fractal_type(self, atype)
}
func (self classFastNoiseLite) GetFractalType() FastNoiseLiteFractalType {
	return self.ptr.API.FastNoiseLite_get_fractal_type(self)
}
func (self classFastNoiseLite) SetFractalOctaves(octave_count Int) {
	self.ptr.API.FastNoiseLite_set_fractal_octaves(self, octave_count)
}
func (self classFastNoiseLite) GetFractalOctaves() Int {
	return self.ptr.API.FastNoiseLite_get_fractal_octaves(self)
}
func (self classFastNoiseLite) SetFractalLacunarity(lacunarity Float) {
	self.ptr.API.FastNoiseLite_set_fractal_lacunarity(self, lacunarity)
}
func (self classFastNoiseLite) GetFractalLacunarity() Float {
	return self.ptr.API.FastNoiseLite_get_fractal_lacunarity(self)
}
func (self classFastNoiseLite) SetFractalGain(gain Float) {
	self.ptr.API.FastNoiseLite_set_fractal_gain(self, gain)
}
func (self classFastNoiseLite) GetFractalGain() Float {
	return self.ptr.API.FastNoiseLite_get_fractal_gain(self)
}
func (self classFastNoiseLite) SetFractalWeightedStrength(weighted_strength Float) {
	self.ptr.API.FastNoiseLite_set_fractal_weighted_strength(self, weighted_strength)
}
func (self classFastNoiseLite) GetFractalWeightedStrength() Float {
	return self.ptr.API.FastNoiseLite_get_fractal_weighted_strength(self)
}
func (self classFastNoiseLite) SetFractalPingPongStrength(ping_pong_strength Float) {
	self.ptr.API.FastNoiseLite_set_fractal_ping_pong_strength(self, ping_pong_strength)
}
func (self classFastNoiseLite) GetFractalPingPongStrength() Float {
	return self.ptr.API.FastNoiseLite_get_fractal_ping_pong_strength(self)
}
func (self classFastNoiseLite) SetCellularDistanceFunction(fn FastNoiseLiteCellularDistanceFunction) {
	self.ptr.API.FastNoiseLite_set_cellular_distance_function(self, fn)
}
func (self classFastNoiseLite) GetCellularDistanceFunction() FastNoiseLiteCellularDistanceFunction {
	return self.ptr.API.FastNoiseLite_get_cellular_distance_function(self)
}
func (self classFastNoiseLite) SetCellularJitter(jitter Float) {
	self.ptr.API.FastNoiseLite_set_cellular_jitter(self, jitter)
}
func (self classFastNoiseLite) GetCellularJitter() Float {
	return self.ptr.API.FastNoiseLite_get_cellular_jitter(self)
}
func (self classFastNoiseLite) SetCellularReturnType(ret FastNoiseLiteCellularReturnType) {
	self.ptr.API.FastNoiseLite_set_cellular_return_type(self, ret)
}
func (self classFastNoiseLite) GetCellularReturnType() FastNoiseLiteCellularReturnType {
	return self.ptr.API.FastNoiseLite_get_cellular_return_type(self)
}
func (self classFastNoiseLite) SetDomainWarpEnabled(domain_warp_enabled bool) {
	self.ptr.API.FastNoiseLite_set_domain_warp_enabled(self, domain_warp_enabled)
}
func (self classFastNoiseLite) IsDomainWarpEnabled() bool {
	return self.ptr.API.FastNoiseLite_is_domain_warp_enabled(self)
}
func (self classFastNoiseLite) SetDomainWarpType(domain_warp_type FastNoiseLiteDomainWarpType) {
	self.ptr.API.FastNoiseLite_set_domain_warp_type(self, domain_warp_type)
}
func (self classFastNoiseLite) GetDomainWarpType() FastNoiseLiteDomainWarpType {
	return self.ptr.API.FastNoiseLite_get_domain_warp_type(self)
}
func (self classFastNoiseLite) SetDomainWarpAmplitude(domain_warp_amplitude Float) {
	self.ptr.API.FastNoiseLite_set_domain_warp_amplitude(self, domain_warp_amplitude)
}
func (self classFastNoiseLite) GetDomainWarpAmplitude() Float {
	return self.ptr.API.FastNoiseLite_get_domain_warp_amplitude(self)
}
func (self classFastNoiseLite) SetDomainWarpFrequency(domain_warp_frequency Float) {
	self.ptr.API.FastNoiseLite_set_domain_warp_frequency(self, domain_warp_frequency)
}
func (self classFastNoiseLite) GetDomainWarpFrequency() Float {
	return self.ptr.API.FastNoiseLite_get_domain_warp_frequency(self)
}
func (self classFastNoiseLite) SetDomainWarpFractalType(domain_warp_fractal_type FastNoiseLiteDomainWarpFractalType) {
	self.ptr.API.FastNoiseLite_set_domain_warp_fractal_type(self, domain_warp_fractal_type)
}
func (self classFastNoiseLite) GetDomainWarpFractalType() FastNoiseLiteDomainWarpFractalType {
	return self.ptr.API.FastNoiseLite_get_domain_warp_fractal_type(self)
}
func (self classFastNoiseLite) SetDomainWarpFractalOctaves(domain_warp_octave_count Int) {
	self.ptr.API.FastNoiseLite_set_domain_warp_fractal_octaves(self, domain_warp_octave_count)
}
func (self classFastNoiseLite) GetDomainWarpFractalOctaves() Int {
	return self.ptr.API.FastNoiseLite_get_domain_warp_fractal_octaves(self)
}
func (self classFastNoiseLite) SetDomainWarpFractalLacunarity(domain_warp_lacunarity Float) {
	self.ptr.API.FastNoiseLite_set_domain_warp_fractal_lacunarity(self, domain_warp_lacunarity)
}
func (self classFastNoiseLite) GetDomainWarpFractalLacunarity() Float {
	return self.ptr.API.FastNoiseLite_get_domain_warp_fractal_lacunarity(self)
}
func (self classFastNoiseLite) SetDomainWarpFractalGain(domain_warp_gain Float) {
	self.ptr.API.FastNoiseLite_set_domain_warp_fractal_gain(self, domain_warp_gain)
}
func (self classFastNoiseLite) GetDomainWarpFractalGain() Float {
	return self.ptr.API.FastNoiseLite_get_domain_warp_fractal_gain(self)
}

type classFileAccess struct{ Class[classFileAccess] }

func (self classFileAccess) Super() RefCounted {
	var super RefCounted
	super.ptr = self.ptr
	return super
}

func (self classFileAccess) RefCounted() RefCounted { return self.Super() }
func (self classFileAccess) Open(path String, flags FileAccessModeFlags) FileAccess {
	return self.ptr.API.FileAccess_open(self, path, flags)
}
func (self classFileAccess) OpenEncrypted(path String, mode_flags FileAccessModeFlags, key PackedByteArray) FileAccess {
	return self.ptr.API.FileAccess_open_encrypted(self, path, mode_flags, key)
}
func (self classFileAccess) OpenEncryptedWithPass(path String, mode_flags FileAccessModeFlags, pass String) FileAccess {
	return self.ptr.API.FileAccess_open_encrypted_with_pass(self, path, mode_flags, pass)
}
func (self classFileAccess) OpenCompressed(path String, mode_flags FileAccessModeFlags, compression_mode FileAccessCompressionMode) FileAccess {
	return self.ptr.API.FileAccess_open_compressed(self, path, mode_flags, compression_mode)
}
func (self classFileAccess) GetOpenError() int64 {
	return self.ptr.API.FileAccess_get_open_error(self)
}
func (self classFileAccess) GetFileAsBytes(path String) PackedByteArray {
	return self.ptr.API.FileAccess_get_file_as_bytes(self, path)
}
func (self classFileAccess) GetFileAsString(path String) String {
	return self.ptr.API.FileAccess_get_file_as_string(self, path)
}
func (self classFileAccess) Flush() {
	self.ptr.API.FileAccess_flush(self)
}
func (self classFileAccess) GetPath() String {
	return self.ptr.API.FileAccess_get_path(self)
}
func (self classFileAccess) GetPathAbsolute() String {
	return self.ptr.API.FileAccess_get_path_absolute(self)
}
func (self classFileAccess) IsOpen() bool {
	return self.ptr.API.FileAccess_is_open(self)
}
func (self classFileAccess) SeekTo(position Int) {
	self.ptr.API.FileAccess_seek(self, position)
}
func (self classFileAccess) SeekEnd(position Int) {
	self.ptr.API.FileAccess_seek_end(self, position)
}
func (self classFileAccess) GetPosition() Int {
	return self.ptr.API.FileAccess_get_position(self)
}
func (self classFileAccess) GetLength() Int {
	return self.ptr.API.FileAccess_get_length(self)
}
func (self classFileAccess) EofReached() bool {
	return self.ptr.API.FileAccess_eof_reached(self)
}
func (self classFileAccess) Get8() Int {
	return self.ptr.API.FileAccess_get_8(self)
}
func (self classFileAccess) Get16() Int {
	return self.ptr.API.FileAccess_get_16(self)
}
func (self classFileAccess) Get32() Int {
	return self.ptr.API.FileAccess_get_32(self)
}
func (self classFileAccess) Get64() Int {
	return self.ptr.API.FileAccess_get_64(self)
}
func (self classFileAccess) GetFloat() Float {
	return self.ptr.API.FileAccess_get_float(self)
}
func (self classFileAccess) GetDouble() Float {
	return self.ptr.API.FileAccess_get_double(self)
}
func (self classFileAccess) GetReal() Float {
	return self.ptr.API.FileAccess_get_real(self)
}
func (self classFileAccess) GetBuffer(length Int) PackedByteArray {
	return self.ptr.API.FileAccess_get_buffer(self, length)
}
func (self classFileAccess) GetLine() String {
	return self.ptr.API.FileAccess_get_line(self)
}
func (self classFileAccess) GetCsvLine(delim String) PackedStringArray {
	return self.ptr.API.FileAccess_get_csv_line(self, delim)
}
func (self classFileAccess) GetAsText(skip_cr bool) String {
	return self.ptr.API.FileAccess_get_as_text(self, skip_cr)
}
func (self classFileAccess) GetMd5(path String) String {
	return self.ptr.API.FileAccess_get_md5(self, path)
}
func (self classFileAccess) GetSha256(path String) String {
	return self.ptr.API.FileAccess_get_sha256(self, path)
}
func (self classFileAccess) IsBigEndian() bool {
	return self.ptr.API.FileAccess_is_big_endian(self)
}
func (self classFileAccess) SetBigEndian(big_endian bool) {
	self.ptr.API.FileAccess_set_big_endian(self, big_endian)
}
func (self classFileAccess) GetError() int64 {
	return self.ptr.API.FileAccess_get_error(self)
}
func (self classFileAccess) GetVar(allow_objects bool) Variant {
	return self.ptr.API.FileAccess_get_var(self, allow_objects)
}
func (self classFileAccess) Store8(value Int) {
	self.ptr.API.FileAccess_store_8(self, value)
}
func (self classFileAccess) Store16(value Int) {
	self.ptr.API.FileAccess_store_16(self, value)
}
func (self classFileAccess) Store32(value Int) {
	self.ptr.API.FileAccess_store_32(self, value)
}
func (self classFileAccess) Store64(value Int) {
	self.ptr.API.FileAccess_store_64(self, value)
}
func (self classFileAccess) StoreFloat(value Float) {
	self.ptr.API.FileAccess_store_float(self, value)
}
func (self classFileAccess) StoreDouble(value Float) {
	self.ptr.API.FileAccess_store_double(self, value)
}
func (self classFileAccess) StoreReal(value Float) {
	self.ptr.API.FileAccess_store_real(self, value)
}
func (self classFileAccess) StoreBuffer(buffer PackedByteArray) {
	self.ptr.API.FileAccess_store_buffer(self, buffer)
}
func (self classFileAccess) StoreLine(line String) {
	self.ptr.API.FileAccess_store_line(self, line)
}
func (self classFileAccess) StoreCsvLine(values PackedStringArray, delim String) {
	self.ptr.API.FileAccess_store_csv_line(self, values, delim)
}
func (self classFileAccess) StoreString(s String) {
	self.ptr.API.FileAccess_store_string(self, s)
}
func (self classFileAccess) StoreVar(value Variant, full_objects bool) {
	self.ptr.API.FileAccess_store_var(self, value, full_objects)
}
func (self classFileAccess) StorePascalString(s String) {
	self.ptr.API.FileAccess_store_pascal_string(self, s)
}
func (self classFileAccess) GetPascalString() String {
	return self.ptr.API.FileAccess_get_pascal_string(self)
}
func (self classFileAccess) Close() {
	self.ptr.API.FileAccess_close(self)
}
func (self classFileAccess) FileExists(path String) bool {
	return self.ptr.API.FileAccess_file_exists(self, path)
}
func (self classFileAccess) GetModifiedTime(file String) Int {
	return self.ptr.API.FileAccess_get_modified_time(self, file)
}
func (self classFileAccess) GetUnixPermissions(file String) FileAccessUnixPermissionFlags {
	return self.ptr.API.FileAccess_get_unix_permissions(self, file)
}
func (self classFileAccess) SetUnixPermissions(file String, permissions FileAccessUnixPermissionFlags) int64 {
	return self.ptr.API.FileAccess_set_unix_permissions(self, file, permissions)
}
func (self classFileAccess) GetHiddenAttribute(file String) bool {
	return self.ptr.API.FileAccess_get_hidden_attribute(self, file)
}
func (self classFileAccess) SetHiddenAttribute(file String, hidden bool) int64 {
	return self.ptr.API.FileAccess_set_hidden_attribute(self, file, hidden)
}
func (self classFileAccess) SetReadOnlyAttribute(file String, ro bool) int64 {
	return self.ptr.API.FileAccess_set_read_only_attribute(self, file, ro)
}
func (self classFileAccess) GetReadOnlyAttribute(file String) bool {
	return self.ptr.API.FileAccess_get_read_only_attribute(self, file)
}

type classFileDialog struct{ Class[classFileDialog] }

func (self classFileDialog) Super() ConfirmationDialog {
	var super ConfirmationDialog
	super.ptr = self.ptr
	return super
}

func (self classFileDialog) ConfirmationDialog() ConfirmationDialog { return self.Super() }
func (self classFileDialog) ClearFilters() {
	self.ptr.API.FileDialog_clear_filters(self)
}
func (self classFileDialog) AddFilter(filter String, description String) {
	self.ptr.API.FileDialog_add_filter(self, filter, description)
}
func (self classFileDialog) SetFilters(filters PackedStringArray) {
	self.ptr.API.FileDialog_set_filters(self, filters)
}
func (self classFileDialog) GetFilters() PackedStringArray {
	return self.ptr.API.FileDialog_get_filters(self)
}
func (self classFileDialog) GetCurrentDir() String {
	return self.ptr.API.FileDialog_get_current_dir(self)
}
func (self classFileDialog) GetCurrentFile() String {
	return self.ptr.API.FileDialog_get_current_file(self)
}
func (self classFileDialog) GetCurrentPath() String {
	return self.ptr.API.FileDialog_get_current_path(self)
}
func (self classFileDialog) SetCurrentDir(dir String) {
	self.ptr.API.FileDialog_set_current_dir(self, dir)
}
func (self classFileDialog) SetCurrentFile(file String) {
	self.ptr.API.FileDialog_set_current_file(self, file)
}
func (self classFileDialog) SetCurrentPath(path String) {
	self.ptr.API.FileDialog_set_current_path(self, path)
}
func (self classFileDialog) SetModeOverridesTitle(override bool) {
	self.ptr.API.FileDialog_set_mode_overrides_title(self, override)
}
func (self classFileDialog) IsModeOverridingTitle() bool {
	return self.ptr.API.FileDialog_is_mode_overriding_title(self)
}
func (self classFileDialog) SetFileMode(mode FileDialogFileMode) {
	self.ptr.API.FileDialog_set_file_mode(self, mode)
}
func (self classFileDialog) GetFileMode() FileDialogFileMode {
	return self.ptr.API.FileDialog_get_file_mode(self)
}
func (self classFileDialog) GetVbox() VBoxContainer {
	return self.ptr.API.FileDialog_get_vbox(self)
}
func (self classFileDialog) GetLineEdit() LineEdit {
	return self.ptr.API.FileDialog_get_line_edit(self)
}
func (self classFileDialog) SetAccess(access FileDialogAccess) {
	self.ptr.API.FileDialog_set_access(self, access)
}
func (self classFileDialog) GetAccess() FileDialogAccess {
	return self.ptr.API.FileDialog_get_access(self)
}
func (self classFileDialog) SetRootSubfolder(dir String) {
	self.ptr.API.FileDialog_set_root_subfolder(self, dir)
}
func (self classFileDialog) GetRootSubfolder() String {
	return self.ptr.API.FileDialog_get_root_subfolder(self)
}
func (self classFileDialog) SetShowHiddenFiles(show bool) {
	self.ptr.API.FileDialog_set_show_hidden_files(self, show)
}
func (self classFileDialog) IsShowingHiddenFiles() bool {
	return self.ptr.API.FileDialog_is_showing_hidden_files(self)
}
func (self classFileDialog) SetUseNativeDialog(native bool) {
	self.ptr.API.FileDialog_set_use_native_dialog(self, native)
}
func (self classFileDialog) GetUseNativeDialog() bool {
	return self.ptr.API.FileDialog_get_use_native_dialog(self)
}
func (self classFileDialog) DeselectAll() {
	self.ptr.API.FileDialog_deselect_all(self)
}
func (self classFileDialog) Invalidate() {
	self.ptr.API.FileDialog_invalidate(self)
}

type classFileSystemDock struct{ Class[classFileSystemDock] }

func (self classFileSystemDock) Super() VBoxContainer {
	var super VBoxContainer
	super.ptr = self.ptr
	return super
}

func (self classFileSystemDock) VBoxContainer() VBoxContainer { return self.Super() }
func (self classFileSystemDock) NavigateToPath(path String) {
	self.ptr.API.FileSystemDock_navigate_to_path(self, path)
}
func (self classFileSystemDock) AddResourceTooltipPlugin(plugin EditorResourceTooltipPlugin) {
	self.ptr.API.FileSystemDock_add_resource_tooltip_plugin(self, plugin)
}
func (self classFileSystemDock) RemoveResourceTooltipPlugin(plugin EditorResourceTooltipPlugin) {
	self.ptr.API.FileSystemDock_remove_resource_tooltip_plugin(self, plugin)
}

type classFlowContainer struct{ Class[classFlowContainer] }

func (self classFlowContainer) Super() Container {
	var super Container
	super.ptr = self.ptr
	return super
}

func (self classFlowContainer) Container() Container { return self.Super() }
func (self classFlowContainer) GetLineCount() Int {
	return self.ptr.API.FlowContainer_get_line_count(self)
}
func (self classFlowContainer) SetAlignment(alignment FlowContainerAlignmentMode) {
	self.ptr.API.FlowContainer_set_alignment(self, alignment)
}
func (self classFlowContainer) GetAlignment() FlowContainerAlignmentMode {
	return self.ptr.API.FlowContainer_get_alignment(self)
}
func (self classFlowContainer) SetVertical(vertical bool) {
	self.ptr.API.FlowContainer_set_vertical(self, vertical)
}
func (self classFlowContainer) IsVertical() bool {
	return self.ptr.API.FlowContainer_is_vertical(self)
}

type classFogMaterial struct{ Class[classFogMaterial] }

func (self classFogMaterial) Super() Material { var super Material; super.ptr = self.ptr; return super }

func (self classFogMaterial) Material() Material { return self.Super() }
func (self classFogMaterial) SetDensity(density Float) {
	self.ptr.API.FogMaterial_set_density(self, density)
}
func (self classFogMaterial) GetDensity() Float {
	return self.ptr.API.FogMaterial_get_density(self)
}
func (self classFogMaterial) SetAlbedo(albedo Color) {
	self.ptr.API.FogMaterial_set_albedo(self, albedo)
}
func (self classFogMaterial) GetAlbedo() Color {
	return self.ptr.API.FogMaterial_get_albedo(self)
}
func (self classFogMaterial) SetEmission(emission Color) {
	self.ptr.API.FogMaterial_set_emission(self, emission)
}
func (self classFogMaterial) GetEmission() Color {
	return self.ptr.API.FogMaterial_get_emission(self)
}
func (self classFogMaterial) SetHeightFalloff(height_falloff Float) {
	self.ptr.API.FogMaterial_set_height_falloff(self, height_falloff)
}
func (self classFogMaterial) GetHeightFalloff() Float {
	return self.ptr.API.FogMaterial_get_height_falloff(self)
}
func (self classFogMaterial) SetEdgeFade(edge_fade Float) {
	self.ptr.API.FogMaterial_set_edge_fade(self, edge_fade)
}
func (self classFogMaterial) GetEdgeFade() Float {
	return self.ptr.API.FogMaterial_get_edge_fade(self)
}
func (self classFogMaterial) SetDensityTexture(density_texture Texture3D) {
	self.ptr.API.FogMaterial_set_density_texture(self, density_texture)
}
func (self classFogMaterial) GetDensityTexture() Texture3D {
	return self.ptr.API.FogMaterial_get_density_texture(self)
}

type classFogVolume struct{ Class[classFogVolume] }

func (self classFogVolume) Super() VisualInstance3D {
	var super VisualInstance3D
	super.ptr = self.ptr
	return super
}

func (self classFogVolume) VisualInstance3D() VisualInstance3D { return self.Super() }
func (self classFogVolume) SetSize(size Vector3) {
	self.ptr.API.FogVolume_set_size(self, size)
}
func (self classFogVolume) GetSize() Vector3 {
	return self.ptr.API.FogVolume_get_size(self)
}
func (self classFogVolume) SetShape(shape RenderingServerFogVolumeShape) {
	self.ptr.API.FogVolume_set_shape(self, shape)
}
func (self classFogVolume) GetShape() RenderingServerFogVolumeShape {
	return self.ptr.API.FogVolume_get_shape(self)
}
func (self classFogVolume) SetMaterial(material Material) {
	self.ptr.API.FogVolume_set_material(self, material)
}
func (self classFogVolume) GetMaterial() Material {
	return self.ptr.API.FogVolume_get_material(self)
}

type classFont struct{ Class[classFont] }

func (self classFont) Super() Resource { var super Resource; super.ptr = self.ptr; return super }

func (self classFont) Resource() Resource { return self.Super() }
func (self classFont) SetFallbacks(fallbacks ArrayOf[Font]) {
	self.ptr.API.Font_set_fallbacks(self, fallbacks)
}
func (self classFont) GetFallbacks() ArrayOf[Font] {
	return self.ptr.API.Font_get_fallbacks(self)
}
func (self classFont) FindVariation(variation_coordinates Dictionary, face_index Int, strength Float, transform Transform2D, spacing_top Int, spacing_bottom Int, spacing_space Int, spacing_glyph Int) RID {
	return self.ptr.API.Font_find_variation(self, variation_coordinates, face_index, strength, transform, spacing_top, spacing_bottom, spacing_space, spacing_glyph)
}
func (self classFont) GetRids() ArrayOf[RID] {
	return self.ptr.API.Font_get_rids(self)
}
func (self classFont) GetHeight(font_size Int) Float {
	return self.ptr.API.Font_get_height(self, font_size)
}
func (self classFont) GetAscent(font_size Int) Float {
	return self.ptr.API.Font_get_ascent(self, font_size)
}
func (self classFont) GetDescent(font_size Int) Float {
	return self.ptr.API.Font_get_descent(self, font_size)
}
func (self classFont) GetUnderlinePosition(font_size Int) Float {
	return self.ptr.API.Font_get_underline_position(self, font_size)
}
func (self classFont) GetUnderlineThickness(font_size Int) Float {
	return self.ptr.API.Font_get_underline_thickness(self, font_size)
}
func (self classFont) GetFontName() String {
	return self.ptr.API.Font_get_font_name(self)
}
func (self classFont) GetFontStyleName() String {
	return self.ptr.API.Font_get_font_style_name(self)
}
func (self classFont) GetOtNameStrings() Dictionary {
	return self.ptr.API.Font_get_ot_name_strings(self)
}
func (self classFont) GetFontStyle() TextServerFontStyle {
	return self.ptr.API.Font_get_font_style(self)
}
func (self classFont) GetFontWeight() Int {
	return self.ptr.API.Font_get_font_weight(self)
}
func (self classFont) GetFontStretch() Int {
	return self.ptr.API.Font_get_font_stretch(self)
}
func (self classFont) GetSpacing(spacing TextServerSpacingType) Int {
	return self.ptr.API.Font_get_spacing(self, spacing)
}
func (self classFont) GetOpentypeFeatures() Dictionary {
	return self.ptr.API.Font_get_opentype_features(self)
}
func (self classFont) SetCacheCapacity(single_line Int, multi_line Int) {
	self.ptr.API.Font_set_cache_capacity(self, single_line, multi_line)
}
func (self classFont) GetStringSize(text String, alignment HorizontalAlignment, width Float, font_size Int, justification_flags TextServerJustificationFlag, direction TextServerDirection, orientation TextServerOrientation) Vector2 {
	return self.ptr.API.Font_get_string_size(self, text, alignment, width, font_size, justification_flags, direction, orientation)
}
func (self classFont) GetMultilineStringSize(text String, alignment HorizontalAlignment, width Float, font_size Int, max_lines Int, brk_flags TextServerLineBreakFlag, justification_flags TextServerJustificationFlag, direction TextServerDirection, orientation TextServerOrientation) Vector2 {
	return self.ptr.API.Font_get_multiline_string_size(self, text, alignment, width, font_size, max_lines, brk_flags, justification_flags, direction, orientation)
}
func (self classFont) DrawString(canvas_item RID, pos Vector2, text String, alignment HorizontalAlignment, width Float, font_size Int, modulate Color, justification_flags TextServerJustificationFlag, direction TextServerDirection, orientation TextServerOrientation) {
	self.ptr.API.Font_draw_string(self, canvas_item, pos, text, alignment, width, font_size, modulate, justification_flags, direction, orientation)
}
func (self classFont) DrawMultilineString(canvas_item RID, pos Vector2, text String, alignment HorizontalAlignment, width Float, font_size Int, max_lines Int, modulate Color, brk_flags TextServerLineBreakFlag, justification_flags TextServerJustificationFlag, direction TextServerDirection, orientation TextServerOrientation) {
	self.ptr.API.Font_draw_multiline_string(self, canvas_item, pos, text, alignment, width, font_size, max_lines, modulate, brk_flags, justification_flags, direction, orientation)
}
func (self classFont) DrawStringOutline(canvas_item RID, pos Vector2, text String, alignment HorizontalAlignment, width Float, font_size Int, size Int, modulate Color, justification_flags TextServerJustificationFlag, direction TextServerDirection, orientation TextServerOrientation) {
	self.ptr.API.Font_draw_string_outline(self, canvas_item, pos, text, alignment, width, font_size, size, modulate, justification_flags, direction, orientation)
}
func (self classFont) DrawMultilineStringOutline(canvas_item RID, pos Vector2, text String, alignment HorizontalAlignment, width Float, font_size Int, max_lines Int, size Int, modulate Color, brk_flags TextServerLineBreakFlag, justification_flags TextServerJustificationFlag, direction TextServerDirection, orientation TextServerOrientation) {
	self.ptr.API.Font_draw_multiline_string_outline(self, canvas_item, pos, text, alignment, width, font_size, max_lines, size, modulate, brk_flags, justification_flags, direction, orientation)
}
func (self classFont) GetCharSize(char Int, font_size Int) Vector2 {
	return self.ptr.API.Font_get_char_size(self, char, font_size)
}
func (self classFont) DrawChar(canvas_item RID, pos Vector2, char Int, font_size Int, modulate Color) Float {
	return self.ptr.API.Font_draw_char(self, canvas_item, pos, char, font_size, modulate)
}
func (self classFont) DrawCharOutline(canvas_item RID, pos Vector2, char Int, font_size Int, size Int, modulate Color) Float {
	return self.ptr.API.Font_draw_char_outline(self, canvas_item, pos, char, font_size, size, modulate)
}
func (self classFont) HasChar(char Int) bool {
	return self.ptr.API.Font_has_char(self, char)
}
func (self classFont) GetSupportedChars() String {
	return self.ptr.API.Font_get_supported_chars(self)
}
func (self classFont) IsLanguageSupported(language String) bool {
	return self.ptr.API.Font_is_language_supported(self, language)
}
func (self classFont) IsScriptSupported(script String) bool {
	return self.ptr.API.Font_is_script_supported(self, script)
}
func (self classFont) GetSupportedFeatureList() Dictionary {
	return self.ptr.API.Font_get_supported_feature_list(self)
}
func (self classFont) GetSupportedVariationList() Dictionary {
	return self.ptr.API.Font_get_supported_variation_list(self)
}
func (self classFont) GetFaceCount() Int {
	return self.ptr.API.Font_get_face_count(self)
}

type classFontFile struct{ Class[classFontFile] }

func (self classFontFile) Super() Font { var super Font; super.ptr = self.ptr; return super }

func (self classFontFile) Font() Font { return self.Super() }
func (self classFontFile) LoadBitmapFont(path String) int64 {
	return self.ptr.API.FontFile_load_bitmap_font(self, path)
}
func (self classFontFile) LoadDynamicFont(path String) int64 {
	return self.ptr.API.FontFile_load_dynamic_font(self, path)
}
func (self classFontFile) SetData(data PackedByteArray) {
	self.ptr.API.FontFile_set_data(self, data)
}
func (self classFontFile) GetData() PackedByteArray {
	return self.ptr.API.FontFile_get_data(self)
}
func (self classFontFile) SetFontName(name String) {
	self.ptr.API.FontFile_set_font_name(self, name)
}
func (self classFontFile) SetFontStyleName(name String) {
	self.ptr.API.FontFile_set_font_style_name(self, name)
}
func (self classFontFile) SetFontStyle(style TextServerFontStyle) {
	self.ptr.API.FontFile_set_font_style(self, style)
}
func (self classFontFile) SetFontWeight(weight Int) {
	self.ptr.API.FontFile_set_font_weight(self, weight)
}
func (self classFontFile) SetFontStretch(stretch Int) {
	self.ptr.API.FontFile_set_font_stretch(self, stretch)
}
func (self classFontFile) SetAntialiasing(antialiasing TextServerFontAntialiasing) {
	self.ptr.API.FontFile_set_antialiasing(self, antialiasing)
}
func (self classFontFile) GetAntialiasing() TextServerFontAntialiasing {
	return self.ptr.API.FontFile_get_antialiasing(self)
}
func (self classFontFile) SetGenerateMipmaps(generate_mipmaps bool) {
	self.ptr.API.FontFile_set_generate_mipmaps(self, generate_mipmaps)
}
func (self classFontFile) GetGenerateMipmaps() bool {
	return self.ptr.API.FontFile_get_generate_mipmaps(self)
}
func (self classFontFile) SetMultichannelSignedDistanceField(msdf bool) {
	self.ptr.API.FontFile_set_multichannel_signed_distance_field(self, msdf)
}
func (self classFontFile) IsMultichannelSignedDistanceField() bool {
	return self.ptr.API.FontFile_is_multichannel_signed_distance_field(self)
}
func (self classFontFile) SetMsdfPixelRange(msdf_pixel_range Int) {
	self.ptr.API.FontFile_set_msdf_pixel_range(self, msdf_pixel_range)
}
func (self classFontFile) GetMsdfPixelRange() Int {
	return self.ptr.API.FontFile_get_msdf_pixel_range(self)
}
func (self classFontFile) SetMsdfSize(msdf_size Int) {
	self.ptr.API.FontFile_set_msdf_size(self, msdf_size)
}
func (self classFontFile) GetMsdfSize() Int {
	return self.ptr.API.FontFile_get_msdf_size(self)
}
func (self classFontFile) SetFixedSize(fixed_size Int) {
	self.ptr.API.FontFile_set_fixed_size(self, fixed_size)
}
func (self classFontFile) GetFixedSize() Int {
	return self.ptr.API.FontFile_get_fixed_size(self)
}
func (self classFontFile) SetFixedSizeScaleMode(fixed_size_scale_mode TextServerFixedSizeScaleMode) {
	self.ptr.API.FontFile_set_fixed_size_scale_mode(self, fixed_size_scale_mode)
}
func (self classFontFile) GetFixedSizeScaleMode() TextServerFixedSizeScaleMode {
	return self.ptr.API.FontFile_get_fixed_size_scale_mode(self)
}
func (self classFontFile) SetAllowSystemFallback(allow_system_fallback bool) {
	self.ptr.API.FontFile_set_allow_system_fallback(self, allow_system_fallback)
}
func (self classFontFile) IsAllowSystemFallback() bool {
	return self.ptr.API.FontFile_is_allow_system_fallback(self)
}
func (self classFontFile) SetForceAutohinter(force_autohinter bool) {
	self.ptr.API.FontFile_set_force_autohinter(self, force_autohinter)
}
func (self classFontFile) IsForceAutohinter() bool {
	return self.ptr.API.FontFile_is_force_autohinter(self)
}
func (self classFontFile) SetHinting(hinting TextServerHinting) {
	self.ptr.API.FontFile_set_hinting(self, hinting)
}
func (self classFontFile) GetHinting() TextServerHinting {
	return self.ptr.API.FontFile_get_hinting(self)
}
func (self classFontFile) SetSubpixelPositioning(subpixel_positioning TextServerSubpixelPositioning) {
	self.ptr.API.FontFile_set_subpixel_positioning(self, subpixel_positioning)
}
func (self classFontFile) GetSubpixelPositioning() TextServerSubpixelPositioning {
	return self.ptr.API.FontFile_get_subpixel_positioning(self)
}
func (self classFontFile) SetOversampling(oversampling Float) {
	self.ptr.API.FontFile_set_oversampling(self, oversampling)
}
func (self classFontFile) GetOversampling() Float {
	return self.ptr.API.FontFile_get_oversampling(self)
}
func (self classFontFile) GetCacheCount() Int {
	return self.ptr.API.FontFile_get_cache_count(self)
}
func (self classFontFile) ClearCache() {
	self.ptr.API.FontFile_clear_cache(self)
}
func (self classFontFile) RemoveCache(cache_index Int) {
	self.ptr.API.FontFile_remove_cache(self, cache_index)
}
func (self classFontFile) GetSizeCacheList(cache_index Int) ArrayOf[Vector2i] {
	return self.ptr.API.FontFile_get_size_cache_list(self, cache_index)
}
func (self classFontFile) ClearSizeCache(cache_index Int) {
	self.ptr.API.FontFile_clear_size_cache(self, cache_index)
}
func (self classFontFile) RemoveSizeCache(cache_index Int, size Vector2i) {
	self.ptr.API.FontFile_remove_size_cache(self, cache_index, size)
}
func (self classFontFile) SetVariationCoordinates(cache_index Int, variation_coordinates Dictionary) {
	self.ptr.API.FontFile_set_variation_coordinates(self, cache_index, variation_coordinates)
}
func (self classFontFile) GetVariationCoordinates(cache_index Int) Dictionary {
	return self.ptr.API.FontFile_get_variation_coordinates(self, cache_index)
}
func (self classFontFile) SetEmbolden(cache_index Int, strength Float) {
	self.ptr.API.FontFile_set_embolden(self, cache_index, strength)
}
func (self classFontFile) GetEmbolden(cache_index Int) Float {
	return self.ptr.API.FontFile_get_embolden(self, cache_index)
}
func (self classFontFile) SetTransform(cache_index Int, transform Transform2D) {
	self.ptr.API.FontFile_set_transform(self, cache_index, transform)
}
func (self classFontFile) GetTransform(cache_index Int) Transform2D {
	return self.ptr.API.FontFile_get_transform(self, cache_index)
}
func (self classFontFile) SetExtraSpacing(cache_index Int, spacing TextServerSpacingType, value Int) {
	self.ptr.API.FontFile_set_extra_spacing(self, cache_index, spacing, value)
}
func (self classFontFile) GetExtraSpacing(cache_index Int, spacing TextServerSpacingType) Int {
	return self.ptr.API.FontFile_get_extra_spacing(self, cache_index, spacing)
}
func (self classFontFile) SetFaceIndex(cache_index Int, face_index Int) {
	self.ptr.API.FontFile_set_face_index(self, cache_index, face_index)
}
func (self classFontFile) GetFaceIndex(cache_index Int) Int {
	return self.ptr.API.FontFile_get_face_index(self, cache_index)
}
func (self classFontFile) SetCacheAscent(cache_index Int, size Int, ascent Float) {
	self.ptr.API.FontFile_set_cache_ascent(self, cache_index, size, ascent)
}
func (self classFontFile) GetCacheAscent(cache_index Int, size Int) Float {
	return self.ptr.API.FontFile_get_cache_ascent(self, cache_index, size)
}
func (self classFontFile) SetCacheDescent(cache_index Int, size Int, descent Float) {
	self.ptr.API.FontFile_set_cache_descent(self, cache_index, size, descent)
}
func (self classFontFile) GetCacheDescent(cache_index Int, size Int) Float {
	return self.ptr.API.FontFile_get_cache_descent(self, cache_index, size)
}
func (self classFontFile) SetCacheUnderlinePosition(cache_index Int, size Int, underline_position Float) {
	self.ptr.API.FontFile_set_cache_underline_position(self, cache_index, size, underline_position)
}
func (self classFontFile) GetCacheUnderlinePosition(cache_index Int, size Int) Float {
	return self.ptr.API.FontFile_get_cache_underline_position(self, cache_index, size)
}
func (self classFontFile) SetCacheUnderlineThickness(cache_index Int, size Int, underline_thickness Float) {
	self.ptr.API.FontFile_set_cache_underline_thickness(self, cache_index, size, underline_thickness)
}
func (self classFontFile) GetCacheUnderlineThickness(cache_index Int, size Int) Float {
	return self.ptr.API.FontFile_get_cache_underline_thickness(self, cache_index, size)
}
func (self classFontFile) SetCacheScale(cache_index Int, size Int, scale Float) {
	self.ptr.API.FontFile_set_cache_scale(self, cache_index, size, scale)
}
func (self classFontFile) GetCacheScale(cache_index Int, size Int) Float {
	return self.ptr.API.FontFile_get_cache_scale(self, cache_index, size)
}
func (self classFontFile) GetTextureCount(cache_index Int, size Vector2i) Int {
	return self.ptr.API.FontFile_get_texture_count(self, cache_index, size)
}
func (self classFontFile) ClearTextures(cache_index Int, size Vector2i) {
	self.ptr.API.FontFile_clear_textures(self, cache_index, size)
}
func (self classFontFile) RemoveTexture(cache_index Int, size Vector2i, texture_index Int) {
	self.ptr.API.FontFile_remove_texture(self, cache_index, size, texture_index)
}
func (self classFontFile) SetTextureImage(cache_index Int, size Vector2i, texture_index Int, image Image) {
	self.ptr.API.FontFile_set_texture_image(self, cache_index, size, texture_index, image)
}
func (self classFontFile) GetTextureImage(cache_index Int, size Vector2i, texture_index Int) Image {
	return self.ptr.API.FontFile_get_texture_image(self, cache_index, size, texture_index)
}
func (self classFontFile) SetTextureOffsets(cache_index Int, size Vector2i, texture_index Int, offset PackedInt32Array) {
	self.ptr.API.FontFile_set_texture_offsets(self, cache_index, size, texture_index, offset)
}
func (self classFontFile) GetTextureOffsets(cache_index Int, size Vector2i, texture_index Int) PackedInt32Array {
	return self.ptr.API.FontFile_get_texture_offsets(self, cache_index, size, texture_index)
}
func (self classFontFile) GetGlyphList(cache_index Int, size Vector2i) PackedInt32Array {
	return self.ptr.API.FontFile_get_glyph_list(self, cache_index, size)
}
func (self classFontFile) ClearGlyphs(cache_index Int, size Vector2i) {
	self.ptr.API.FontFile_clear_glyphs(self, cache_index, size)
}
func (self classFontFile) RemoveGlyph(cache_index Int, size Vector2i, glyph Int) {
	self.ptr.API.FontFile_remove_glyph(self, cache_index, size, glyph)
}
func (self classFontFile) SetGlyphAdvance(cache_index Int, size Int, glyph Int, advance Vector2) {
	self.ptr.API.FontFile_set_glyph_advance(self, cache_index, size, glyph, advance)
}
func (self classFontFile) GetGlyphAdvance(cache_index Int, size Int, glyph Int) Vector2 {
	return self.ptr.API.FontFile_get_glyph_advance(self, cache_index, size, glyph)
}
func (self classFontFile) SetGlyphOffset(cache_index Int, size Vector2i, glyph Int, offset Vector2) {
	self.ptr.API.FontFile_set_glyph_offset(self, cache_index, size, glyph, offset)
}
func (self classFontFile) GetGlyphOffset(cache_index Int, size Vector2i, glyph Int) Vector2 {
	return self.ptr.API.FontFile_get_glyph_offset(self, cache_index, size, glyph)
}
func (self classFontFile) SetGlyphSize(cache_index Int, size Vector2i, glyph Int, gl_size Vector2) {
	self.ptr.API.FontFile_set_glyph_size(self, cache_index, size, glyph, gl_size)
}
func (self classFontFile) GetGlyphSize(cache_index Int, size Vector2i, glyph Int) Vector2 {
	return self.ptr.API.FontFile_get_glyph_size(self, cache_index, size, glyph)
}
func (self classFontFile) SetGlyphUvRect(cache_index Int, size Vector2i, glyph Int, uv_rect Rect2) {
	self.ptr.API.FontFile_set_glyph_uv_rect(self, cache_index, size, glyph, uv_rect)
}
func (self classFontFile) GetGlyphUvRect(cache_index Int, size Vector2i, glyph Int) Rect2 {
	return self.ptr.API.FontFile_get_glyph_uv_rect(self, cache_index, size, glyph)
}
func (self classFontFile) SetGlyphTextureIdx(cache_index Int, size Vector2i, glyph Int, texture_idx Int) {
	self.ptr.API.FontFile_set_glyph_texture_idx(self, cache_index, size, glyph, texture_idx)
}
func (self classFontFile) GetGlyphTextureIdx(cache_index Int, size Vector2i, glyph Int) Int {
	return self.ptr.API.FontFile_get_glyph_texture_idx(self, cache_index, size, glyph)
}
func (self classFontFile) GetKerningList(cache_index Int, size Int) ArrayOf[Vector2i] {
	return self.ptr.API.FontFile_get_kerning_list(self, cache_index, size)
}
func (self classFontFile) ClearKerningMap(cache_index Int, size Int) {
	self.ptr.API.FontFile_clear_kerning_map(self, cache_index, size)
}
func (self classFontFile) RemoveKerning(cache_index Int, size Int, glyph_pair Vector2i) {
	self.ptr.API.FontFile_remove_kerning(self, cache_index, size, glyph_pair)
}
func (self classFontFile) SetKerning(cache_index Int, size Int, glyph_pair Vector2i, kerning Vector2) {
	self.ptr.API.FontFile_set_kerning(self, cache_index, size, glyph_pair, kerning)
}
func (self classFontFile) GetKerning(cache_index Int, size Int, glyph_pair Vector2i) Vector2 {
	return self.ptr.API.FontFile_get_kerning(self, cache_index, size, glyph_pair)
}
func (self classFontFile) RenderRange(cache_index Int, size Vector2i, start Int, end Int) {
	self.ptr.API.FontFile_render_range(self, cache_index, size, start, end)
}
func (self classFontFile) RenderGlyph(cache_index Int, size Vector2i, index Int) {
	self.ptr.API.FontFile_render_glyph(self, cache_index, size, index)
}
func (self classFontFile) SetLanguageSupportOverride(language String, supported bool) {
	self.ptr.API.FontFile_set_language_support_override(self, language, supported)
}
func (self classFontFile) GetLanguageSupportOverride(language String) bool {
	return self.ptr.API.FontFile_get_language_support_override(self, language)
}
func (self classFontFile) RemoveLanguageSupportOverride(language String) {
	self.ptr.API.FontFile_remove_language_support_override(self, language)
}
func (self classFontFile) GetLanguageSupportOverrides() PackedStringArray {
	return self.ptr.API.FontFile_get_language_support_overrides(self)
}
func (self classFontFile) SetScriptSupportOverride(script String, supported bool) {
	self.ptr.API.FontFile_set_script_support_override(self, script, supported)
}
func (self classFontFile) GetScriptSupportOverride(script String) bool {
	return self.ptr.API.FontFile_get_script_support_override(self, script)
}
func (self classFontFile) RemoveScriptSupportOverride(script String) {
	self.ptr.API.FontFile_remove_script_support_override(self, script)
}
func (self classFontFile) GetScriptSupportOverrides() PackedStringArray {
	return self.ptr.API.FontFile_get_script_support_overrides(self)
}
func (self classFontFile) SetOpentypeFeatureOverrides(overrides Dictionary) {
	self.ptr.API.FontFile_set_opentype_feature_overrides(self, overrides)
}
func (self classFontFile) GetOpentypeFeatureOverrides() Dictionary {
	return self.ptr.API.FontFile_get_opentype_feature_overrides(self)
}
func (self classFontFile) GetGlyphIndex(size Int, char Int, variation_selector Int) Int {
	return self.ptr.API.FontFile_get_glyph_index(self, size, char, variation_selector)
}
func (self classFontFile) GetCharFromGlyphIndex(size Int, glyph_index Int) Int {
	return self.ptr.API.FontFile_get_char_from_glyph_index(self, size, glyph_index)
}

type classFontVariation struct{ Class[classFontVariation] }

func (self classFontVariation) Super() Font { var super Font; super.ptr = self.ptr; return super }

func (self classFontVariation) Font() Font { return self.Super() }
func (self classFontVariation) SetBaseFont(font Font) {
	self.ptr.API.FontVariation_set_base_font(self, font)
}
func (self classFontVariation) GetBaseFont() Font {
	return self.ptr.API.FontVariation_get_base_font(self)
}
func (self classFontVariation) SetVariationOpentype(coords Dictionary) {
	self.ptr.API.FontVariation_set_variation_opentype(self, coords)
}
func (self classFontVariation) GetVariationOpentype() Dictionary {
	return self.ptr.API.FontVariation_get_variation_opentype(self)
}
func (self classFontVariation) SetVariationEmbolden(strength Float) {
	self.ptr.API.FontVariation_set_variation_embolden(self, strength)
}
func (self classFontVariation) GetVariationEmbolden() Float {
	return self.ptr.API.FontVariation_get_variation_embolden(self)
}
func (self classFontVariation) SetVariationFaceIndex(face_index Int) {
	self.ptr.API.FontVariation_set_variation_face_index(self, face_index)
}
func (self classFontVariation) GetVariationFaceIndex() Int {
	return self.ptr.API.FontVariation_get_variation_face_index(self)
}
func (self classFontVariation) SetVariationTransform(transform Transform2D) {
	self.ptr.API.FontVariation_set_variation_transform(self, transform)
}
func (self classFontVariation) GetVariationTransform() Transform2D {
	return self.ptr.API.FontVariation_get_variation_transform(self)
}
func (self classFontVariation) SetOpentypeFeatures(features Dictionary) {
	self.ptr.API.FontVariation_set_opentype_features(self, features)
}
func (self classFontVariation) SetSpacing(spacing TextServerSpacingType, value Int) {
	self.ptr.API.FontVariation_set_spacing(self, spacing, value)
}

type classGDExtension struct{ Class[classGDExtension] }

func (self classGDExtension) Super() Resource { var super Resource; super.ptr = self.ptr; return super }

func (self classGDExtension) Resource() Resource { return self.Super() }
func (self classGDExtension) OpenLibrary(path String, entry_symbol String) int64 {
	return self.ptr.API.GDExtension_open_library(self, path, entry_symbol)
}
func (self classGDExtension) CloseLibrary() {
	self.ptr.API.GDExtension_close_library(self)
}
func (self classGDExtension) IsLibraryOpen() bool {
	return self.ptr.API.GDExtension_is_library_open(self)
}
func (self classGDExtension) GetMinimumLibraryInitializationLevel() ExtensionInitializationLevel {
	return self.ptr.API.GDExtension_get_minimum_library_initialization_level(self)
}
func (self classGDExtension) InitializeLibrary(level ExtensionInitializationLevel) {
	self.ptr.API.GDExtension_initialize_library(self, level)
}

type classGDExtensionManager struct{ Class[classGDExtensionManager] }

func (self classGDExtensionManager) Super() Object {
	var super Object
	super.ptr = self.ptr
	return super
}

func (self classGDExtensionManager) Object() Object { return self.Super() }

func (self classGDExtensionManager) isSingleton() {}
func (self classGDExtensionManager) LoadExtension(path String) ExtensionManagerLoadStatus {
	return self.ptr.API.GDExtensionManager_load_extension(self, path)
}
func (self classGDExtensionManager) ReloadExtension(path String) ExtensionManagerLoadStatus {
	return self.ptr.API.GDExtensionManager_reload_extension(self, path)
}
func (self classGDExtensionManager) UnloadExtension(path String) ExtensionManagerLoadStatus {
	return self.ptr.API.GDExtensionManager_unload_extension(self, path)
}
func (self classGDExtensionManager) IsExtensionLoaded(path String) bool {
	return self.ptr.API.GDExtensionManager_is_extension_loaded(self, path)
}
func (self classGDExtensionManager) GetLoadedExtensions() PackedStringArray {
	return self.ptr.API.GDExtensionManager_get_loaded_extensions(self)
}
func (self classGDExtensionManager) GetExtension(path String) GDExtension {
	return self.ptr.API.GDExtensionManager_get_extension(self, path)
}

type classGDScript struct{ Class[classGDScript] }

func (self classGDScript) Super() Script { var super Script; super.ptr = self.ptr; return super }

func (self classGDScript) Script() Script { return self.Super() }
func (self classGDScript) New() Variant {
	return self.ptr.API.GDScript_new(self)
}

type classGLTFAccessor struct{ Class[classGLTFAccessor] }

func (self classGLTFAccessor) Super() Resource {
	var super Resource
	super.ptr = self.ptr
	return super
}

func (self classGLTFAccessor) Resource() Resource { return self.Super() }
func (self classGLTFAccessor) GetBufferView() Int {
	return self.ptr.API.GLTFAccessor_get_buffer_view(self)
}
func (self classGLTFAccessor) SetBufferView(buffer_view Int) {
	self.ptr.API.GLTFAccessor_set_buffer_view(self, buffer_view)
}
func (self classGLTFAccessor) GetByteOffset() Int {
	return self.ptr.API.GLTFAccessor_get_byte_offset(self)
}
func (self classGLTFAccessor) SetByteOffset(byte_offset Int) {
	self.ptr.API.GLTFAccessor_set_byte_offset(self, byte_offset)
}
func (self classGLTFAccessor) GetComponentType() Int {
	return self.ptr.API.GLTFAccessor_get_component_type(self)
}
func (self classGLTFAccessor) SetComponentType(component_type Int) {
	self.ptr.API.GLTFAccessor_set_component_type(self, component_type)
}
func (self classGLTFAccessor) GetNormalized() bool {
	return self.ptr.API.GLTFAccessor_get_normalized(self)
}
func (self classGLTFAccessor) SetNormalized(normalized bool) {
	self.ptr.API.GLTFAccessor_set_normalized(self, normalized)
}
func (self classGLTFAccessor) GetCount() Int {
	return self.ptr.API.GLTFAccessor_get_count(self)
}
func (self classGLTFAccessor) SetCount(count Int) {
	self.ptr.API.GLTFAccessor_set_count(self, count)
}
func (self classGLTFAccessor) GetType() Int {
	return self.ptr.API.GLTFAccessor_get_type(self)
}
func (self classGLTFAccessor) SetType(atype Int) {
	self.ptr.API.GLTFAccessor_set_type(self, atype)
}
func (self classGLTFAccessor) GetMin() PackedFloat64Array {
	return self.ptr.API.GLTFAccessor_get_min(self)
}
func (self classGLTFAccessor) SetMin(min PackedFloat64Array) {
	self.ptr.API.GLTFAccessor_set_min(self, min)
}
func (self classGLTFAccessor) GetMax() PackedFloat64Array {
	return self.ptr.API.GLTFAccessor_get_max(self)
}
func (self classGLTFAccessor) SetMax(max PackedFloat64Array) {
	self.ptr.API.GLTFAccessor_set_max(self, max)
}
func (self classGLTFAccessor) GetSparseCount() Int {
	return self.ptr.API.GLTFAccessor_get_sparse_count(self)
}
func (self classGLTFAccessor) SetSparseCount(sparse_count Int) {
	self.ptr.API.GLTFAccessor_set_sparse_count(self, sparse_count)
}
func (self classGLTFAccessor) GetSparseIndicesBufferView() Int {
	return self.ptr.API.GLTFAccessor_get_sparse_indices_buffer_view(self)
}
func (self classGLTFAccessor) SetSparseIndicesBufferView(sparse_indices_buffer_view Int) {
	self.ptr.API.GLTFAccessor_set_sparse_indices_buffer_view(self, sparse_indices_buffer_view)
}
func (self classGLTFAccessor) GetSparseIndicesByteOffset() Int {
	return self.ptr.API.GLTFAccessor_get_sparse_indices_byte_offset(self)
}
func (self classGLTFAccessor) SetSparseIndicesByteOffset(sparse_indices_byte_offset Int) {
	self.ptr.API.GLTFAccessor_set_sparse_indices_byte_offset(self, sparse_indices_byte_offset)
}
func (self classGLTFAccessor) GetSparseIndicesComponentType() Int {
	return self.ptr.API.GLTFAccessor_get_sparse_indices_component_type(self)
}
func (self classGLTFAccessor) SetSparseIndicesComponentType(sparse_indices_component_type Int) {
	self.ptr.API.GLTFAccessor_set_sparse_indices_component_type(self, sparse_indices_component_type)
}
func (self classGLTFAccessor) GetSparseValuesBufferView() Int {
	return self.ptr.API.GLTFAccessor_get_sparse_values_buffer_view(self)
}
func (self classGLTFAccessor) SetSparseValuesBufferView(sparse_values_buffer_view Int) {
	self.ptr.API.GLTFAccessor_set_sparse_values_buffer_view(self, sparse_values_buffer_view)
}
func (self classGLTFAccessor) GetSparseValuesByteOffset() Int {
	return self.ptr.API.GLTFAccessor_get_sparse_values_byte_offset(self)
}
func (self classGLTFAccessor) SetSparseValuesByteOffset(sparse_values_byte_offset Int) {
	self.ptr.API.GLTFAccessor_set_sparse_values_byte_offset(self, sparse_values_byte_offset)
}

type classGLTFAnimation struct{ Class[classGLTFAnimation] }

func (self classGLTFAnimation) Super() Resource {
	var super Resource
	super.ptr = self.ptr
	return super
}

func (self classGLTFAnimation) Resource() Resource { return self.Super() }
func (self classGLTFAnimation) GetLoop() bool {
	return self.ptr.API.GLTFAnimation_get_loop(self)
}
func (self classGLTFAnimation) SetLoop(loop bool) {
	self.ptr.API.GLTFAnimation_set_loop(self, loop)
}

type classGLTFBufferView struct{ Class[classGLTFBufferView] }

func (self classGLTFBufferView) Super() Resource {
	var super Resource
	super.ptr = self.ptr
	return super
}

func (self classGLTFBufferView) Resource() Resource { return self.Super() }
func (self classGLTFBufferView) GetBuffer() Int {
	return self.ptr.API.GLTFBufferView_get_buffer(self)
}
func (self classGLTFBufferView) SetBuffer(buffer Int) {
	self.ptr.API.GLTFBufferView_set_buffer(self, buffer)
}
func (self classGLTFBufferView) GetByteOffset() Int {
	return self.ptr.API.GLTFBufferView_get_byte_offset(self)
}
func (self classGLTFBufferView) SetByteOffset(byte_offset Int) {
	self.ptr.API.GLTFBufferView_set_byte_offset(self, byte_offset)
}
func (self classGLTFBufferView) GetByteLength() Int {
	return self.ptr.API.GLTFBufferView_get_byte_length(self)
}
func (self classGLTFBufferView) SetByteLength(byte_length Int) {
	self.ptr.API.GLTFBufferView_set_byte_length(self, byte_length)
}
func (self classGLTFBufferView) GetByteStride() Int {
	return self.ptr.API.GLTFBufferView_get_byte_stride(self)
}
func (self classGLTFBufferView) SetByteStride(byte_stride Int) {
	self.ptr.API.GLTFBufferView_set_byte_stride(self, byte_stride)
}
func (self classGLTFBufferView) GetIndices() bool {
	return self.ptr.API.GLTFBufferView_get_indices(self)
}
func (self classGLTFBufferView) SetIndices(indices bool) {
	self.ptr.API.GLTFBufferView_set_indices(self, indices)
}

type classGLTFCamera struct{ Class[classGLTFCamera] }

func (self classGLTFCamera) Super() Resource { var super Resource; super.ptr = self.ptr; return super }

func (self classGLTFCamera) Resource() Resource { return self.Super() }
func (self classGLTFCamera) FromNode(camera_node Camera3D) GLTFCamera {
	return self.ptr.API.GLTFCamera_from_node(self, camera_node)
}
func (self classGLTFCamera) ToNode() Camera3D {
	return self.ptr.API.GLTFCamera_to_node(self)
}
func (self classGLTFCamera) FromDictionary(dictionary Dictionary) GLTFCamera {
	return self.ptr.API.GLTFCamera_from_dictionary(self, dictionary)
}
func (self classGLTFCamera) ToDictionary() Dictionary {
	return self.ptr.API.GLTFCamera_to_dictionary(self)
}
func (self classGLTFCamera) GetPerspective() bool {
	return self.ptr.API.GLTFCamera_get_perspective(self)
}
func (self classGLTFCamera) SetPerspective(perspective bool) {
	self.ptr.API.GLTFCamera_set_perspective(self, perspective)
}
func (self classGLTFCamera) GetFov() Float {
	return self.ptr.API.GLTFCamera_get_fov(self)
}
func (self classGLTFCamera) SetFov(fov Float) {
	self.ptr.API.GLTFCamera_set_fov(self, fov)
}
func (self classGLTFCamera) GetSizeMag() Float {
	return self.ptr.API.GLTFCamera_get_size_mag(self)
}
func (self classGLTFCamera) SetSizeMag(size_mag Float) {
	self.ptr.API.GLTFCamera_set_size_mag(self, size_mag)
}
func (self classGLTFCamera) GetDepthFar() Float {
	return self.ptr.API.GLTFCamera_get_depth_far(self)
}
func (self classGLTFCamera) SetDepthFar(zdepth_far Float) {
	self.ptr.API.GLTFCamera_set_depth_far(self, zdepth_far)
}
func (self classGLTFCamera) GetDepthNear() Float {
	return self.ptr.API.GLTFCamera_get_depth_near(self)
}
func (self classGLTFCamera) SetDepthNear(zdepth_near Float) {
	self.ptr.API.GLTFCamera_set_depth_near(self, zdepth_near)
}

type classGLTFDocument struct{ Class[classGLTFDocument] }

func (self classGLTFDocument) Super() Resource {
	var super Resource
	super.ptr = self.ptr
	return super
}

func (self classGLTFDocument) Resource() Resource { return self.Super() }
func (self classGLTFDocument) AppendFromFile(path String, state GLTFState, flags Int, base_path String) int64 {
	return self.ptr.API.GLTFDocument_append_from_file(self, path, state, flags, base_path)
}
func (self classGLTFDocument) AppendFromBuffer(bytes PackedByteArray, base_path String, state GLTFState, flags Int) int64 {
	return self.ptr.API.GLTFDocument_append_from_buffer(self, bytes, base_path, state, flags)
}
func (self classGLTFDocument) AppendFromScene(node Node, state GLTFState, flags Int) int64 {
	return self.ptr.API.GLTFDocument_append_from_scene(self, node, state, flags)
}
func (self classGLTFDocument) GenerateScene(state GLTFState, bake_fps Float, trimming bool, remove_immutable_tracks bool) Node {
	return self.ptr.API.GLTFDocument_generate_scene(self, state, bake_fps, trimming, remove_immutable_tracks)
}
func (self classGLTFDocument) GenerateBuffer(state GLTFState) PackedByteArray {
	return self.ptr.API.GLTFDocument_generate_buffer(self, state)
}
func (self classGLTFDocument) WriteToFilesystem(state GLTFState, path String) int64 {
	return self.ptr.API.GLTFDocument_write_to_filesystem(self, state, path)
}
func (self classGLTFDocument) SetImageFormat(image_format String) {
	self.ptr.API.GLTFDocument_set_image_format(self, image_format)
}
func (self classGLTFDocument) GetImageFormat() String {
	return self.ptr.API.GLTFDocument_get_image_format(self)
}
func (self classGLTFDocument) SetLossyQuality(lossy_quality Float) {
	self.ptr.API.GLTFDocument_set_lossy_quality(self, lossy_quality)
}
func (self classGLTFDocument) GetLossyQuality() Float {
	return self.ptr.API.GLTFDocument_get_lossy_quality(self)
}
func (self classGLTFDocument) SetRootNodeMode(root_node_mode GLTFDocumentRootNodeMode) {
	self.ptr.API.GLTFDocument_set_root_node_mode(self, root_node_mode)
}
func (self classGLTFDocument) GetRootNodeMode() GLTFDocumentRootNodeMode {
	return self.ptr.API.GLTFDocument_get_root_node_mode(self)
}
func (self classGLTFDocument) RegisterGltfDocumentExtension(extension GLTFDocumentExtension, first_priority bool) {
	self.ptr.API.GLTFDocument_register_gltf_document_extension(self, extension, first_priority)
}
func (self classGLTFDocument) UnregisterGltfDocumentExtension(extension GLTFDocumentExtension) {
	self.ptr.API.GLTFDocument_unregister_gltf_document_extension(self, extension)
}

type classGLTFDocumentExtension struct {
	Class[classGLTFDocumentExtension]
}

func (self classGLTFDocumentExtension) Super() Resource {
	var super Resource
	super.ptr = self.ptr
	return super
}

func (self classGLTFDocumentExtension) Resource() Resource { return self.Super() }

type classGLTFDocumentExtensionConvertImporterMesh struct {
	Class[classGLTFDocumentExtensionConvertImporterMesh]
}

func (self classGLTFDocumentExtensionConvertImporterMesh) Super() GLTFDocumentExtension {
	var super GLTFDocumentExtension
	super.ptr = self.ptr
	return super
}

func (self classGLTFDocumentExtensionConvertImporterMesh) GLTFDocumentExtension() GLTFDocumentExtension {
	return self.Super()
}

type classGLTFLight struct{ Class[classGLTFLight] }

func (self classGLTFLight) Super() Resource { var super Resource; super.ptr = self.ptr; return super }

func (self classGLTFLight) Resource() Resource { return self.Super() }
func (self classGLTFLight) FromNode(light_node Light3D) GLTFLight {
	return self.ptr.API.GLTFLight_from_node(self, light_node)
}
func (self classGLTFLight) ToNode() Light3D {
	return self.ptr.API.GLTFLight_to_node(self)
}
func (self classGLTFLight) FromDictionary(dictionary Dictionary) GLTFLight {
	return self.ptr.API.GLTFLight_from_dictionary(self, dictionary)
}
func (self classGLTFLight) ToDictionary() Dictionary {
	return self.ptr.API.GLTFLight_to_dictionary(self)
}
func (self classGLTFLight) GetColor() Color {
	return self.ptr.API.GLTFLight_get_color(self)
}
func (self classGLTFLight) SetColor(color Color) {
	self.ptr.API.GLTFLight_set_color(self, color)
}
func (self classGLTFLight) GetIntensity() Float {
	return self.ptr.API.GLTFLight_get_intensity(self)
}
func (self classGLTFLight) SetIntensity(intensity Float) {
	self.ptr.API.GLTFLight_set_intensity(self, intensity)
}
func (self classGLTFLight) GetLightType() String {
	return self.ptr.API.GLTFLight_get_light_type(self)
}
func (self classGLTFLight) SetLightType(light_type String) {
	self.ptr.API.GLTFLight_set_light_type(self, light_type)
}
func (self classGLTFLight) GetRange() Float {
	return self.ptr.API.GLTFLight_get_range(self)
}
func (self classGLTFLight) SetRange(arange Float) {
	self.ptr.API.GLTFLight_set_range(self, arange)
}
func (self classGLTFLight) GetInnerConeAngle() Float {
	return self.ptr.API.GLTFLight_get_inner_cone_angle(self)
}
func (self classGLTFLight) SetInnerConeAngle(inner_cone_angle Float) {
	self.ptr.API.GLTFLight_set_inner_cone_angle(self, inner_cone_angle)
}
func (self classGLTFLight) GetOuterConeAngle() Float {
	return self.ptr.API.GLTFLight_get_outer_cone_angle(self)
}
func (self classGLTFLight) SetOuterConeAngle(outer_cone_angle Float) {
	self.ptr.API.GLTFLight_set_outer_cone_angle(self, outer_cone_angle)
}

type classGLTFMesh struct{ Class[classGLTFMesh] }

func (self classGLTFMesh) Super() Resource { var super Resource; super.ptr = self.ptr; return super }

func (self classGLTFMesh) Resource() Resource { return self.Super() }
func (self classGLTFMesh) GetMesh() ImporterMesh {
	return self.ptr.API.GLTFMesh_get_mesh(self)
}
func (self classGLTFMesh) SetMesh(mesh ImporterMesh) {
	self.ptr.API.GLTFMesh_set_mesh(self, mesh)
}
func (self classGLTFMesh) GetBlendWeights() PackedFloat32Array {
	return self.ptr.API.GLTFMesh_get_blend_weights(self)
}
func (self classGLTFMesh) SetBlendWeights(blend_weights PackedFloat32Array) {
	self.ptr.API.GLTFMesh_set_blend_weights(self, blend_weights)
}
func (self classGLTFMesh) GetInstanceMaterials() ArrayOf[Material] {
	return self.ptr.API.GLTFMesh_get_instance_materials(self)
}
func (self classGLTFMesh) SetInstanceMaterials(instance_materials ArrayOf[Material]) {
	self.ptr.API.GLTFMesh_set_instance_materials(self, instance_materials)
}

type classGLTFNode struct{ Class[classGLTFNode] }

func (self classGLTFNode) Super() Resource { var super Resource; super.ptr = self.ptr; return super }

func (self classGLTFNode) Resource() Resource { return self.Super() }
func (self classGLTFNode) GetParent() Int {
	return self.ptr.API.GLTFNode_get_parent(self)
}
func (self classGLTFNode) SetParent(parent Int) {
	self.ptr.API.GLTFNode_set_parent(self, parent)
}
func (self classGLTFNode) GetHeight() Int {
	return self.ptr.API.GLTFNode_get_height(self)
}
func (self classGLTFNode) SetHeight(height Int) {
	self.ptr.API.GLTFNode_set_height(self, height)
}
func (self classGLTFNode) GetXform() Transform3D {
	return self.ptr.API.GLTFNode_get_xform(self)
}
func (self classGLTFNode) SetXform(xform Transform3D) {
	self.ptr.API.GLTFNode_set_xform(self, xform)
}
func (self classGLTFNode) GetMesh() Int {
	return self.ptr.API.GLTFNode_get_mesh(self)
}
func (self classGLTFNode) SetMesh(mesh Int) {
	self.ptr.API.GLTFNode_set_mesh(self, mesh)
}
func (self classGLTFNode) GetCamera() Int {
	return self.ptr.API.GLTFNode_get_camera(self)
}
func (self classGLTFNode) SetCamera(camera Int) {
	self.ptr.API.GLTFNode_set_camera(self, camera)
}
func (self classGLTFNode) GetSkin() Int {
	return self.ptr.API.GLTFNode_get_skin(self)
}
func (self classGLTFNode) SetSkin(skin Int) {
	self.ptr.API.GLTFNode_set_skin(self, skin)
}
func (self classGLTFNode) GetSkeleton() Int {
	return self.ptr.API.GLTFNode_get_skeleton(self)
}
func (self classGLTFNode) SetSkeleton(skeleton Int) {
	self.ptr.API.GLTFNode_set_skeleton(self, skeleton)
}
func (self classGLTFNode) GetPosition() Vector3 {
	return self.ptr.API.GLTFNode_get_position(self)
}
func (self classGLTFNode) SetPosition(position Vector3) {
	self.ptr.API.GLTFNode_set_position(self, position)
}
func (self classGLTFNode) GetRotation() Quaternion {
	return self.ptr.API.GLTFNode_get_rotation(self)
}
func (self classGLTFNode) SetRotation(rotation Quaternion) {
	self.ptr.API.GLTFNode_set_rotation(self, rotation)
}
func (self classGLTFNode) GetScale() Vector3 {
	return self.ptr.API.GLTFNode_get_scale(self)
}
func (self classGLTFNode) SetScale(scale Vector3) {
	self.ptr.API.GLTFNode_set_scale(self, scale)
}
func (self classGLTFNode) GetChildren() PackedInt32Array {
	return self.ptr.API.GLTFNode_get_children(self)
}
func (self classGLTFNode) SetChildren(children PackedInt32Array) {
	self.ptr.API.GLTFNode_set_children(self, children)
}
func (self classGLTFNode) GetLight() Int {
	return self.ptr.API.GLTFNode_get_light(self)
}
func (self classGLTFNode) SetLight(light Int) {
	self.ptr.API.GLTFNode_set_light(self, light)
}
func (self classGLTFNode) GetAdditionalData(extension_name StringName) Variant {
	return self.ptr.API.GLTFNode_get_additional_data(self, extension_name)
}
func (self classGLTFNode) SetAdditionalData(extension_name StringName, additional_data Variant) {
	self.ptr.API.GLTFNode_set_additional_data(self, extension_name, additional_data)
}

type classGLTFPhysicsBody struct{ Class[classGLTFPhysicsBody] }

func (self classGLTFPhysicsBody) Super() Resource {
	var super Resource
	super.ptr = self.ptr
	return super
}

func (self classGLTFPhysicsBody) Resource() Resource { return self.Super() }
func (self classGLTFPhysicsBody) FromNode(body_node CollisionObject3D) GLTFPhysicsBody {
	return self.ptr.API.GLTFPhysicsBody_from_node(self, body_node)
}
func (self classGLTFPhysicsBody) ToNode() CollisionObject3D {
	return self.ptr.API.GLTFPhysicsBody_to_node(self)
}
func (self classGLTFPhysicsBody) FromDictionary(dictionary Dictionary) GLTFPhysicsBody {
	return self.ptr.API.GLTFPhysicsBody_from_dictionary(self, dictionary)
}
func (self classGLTFPhysicsBody) ToDictionary() Dictionary {
	return self.ptr.API.GLTFPhysicsBody_to_dictionary(self)
}
func (self classGLTFPhysicsBody) GetBodyType() String {
	return self.ptr.API.GLTFPhysicsBody_get_body_type(self)
}
func (self classGLTFPhysicsBody) SetBodyType(body_type String) {
	self.ptr.API.GLTFPhysicsBody_set_body_type(self, body_type)
}
func (self classGLTFPhysicsBody) GetMass() Float {
	return self.ptr.API.GLTFPhysicsBody_get_mass(self)
}
func (self classGLTFPhysicsBody) SetMass(mass Float) {
	self.ptr.API.GLTFPhysicsBody_set_mass(self, mass)
}
func (self classGLTFPhysicsBody) GetLinearVelocity() Vector3 {
	return self.ptr.API.GLTFPhysicsBody_get_linear_velocity(self)
}
func (self classGLTFPhysicsBody) SetLinearVelocity(linear_velocity Vector3) {
	self.ptr.API.GLTFPhysicsBody_set_linear_velocity(self, linear_velocity)
}
func (self classGLTFPhysicsBody) GetAngularVelocity() Vector3 {
	return self.ptr.API.GLTFPhysicsBody_get_angular_velocity(self)
}
func (self classGLTFPhysicsBody) SetAngularVelocity(angular_velocity Vector3) {
	self.ptr.API.GLTFPhysicsBody_set_angular_velocity(self, angular_velocity)
}
func (self classGLTFPhysicsBody) GetCenterOfMass() Vector3 {
	return self.ptr.API.GLTFPhysicsBody_get_center_of_mass(self)
}
func (self classGLTFPhysicsBody) SetCenterOfMass(center_of_mass Vector3) {
	self.ptr.API.GLTFPhysicsBody_set_center_of_mass(self, center_of_mass)
}
func (self classGLTFPhysicsBody) GetInertiaTensor() Basis {
	return self.ptr.API.GLTFPhysicsBody_get_inertia_tensor(self)
}
func (self classGLTFPhysicsBody) SetInertiaTensor(inertia_tensor Basis) {
	self.ptr.API.GLTFPhysicsBody_set_inertia_tensor(self, inertia_tensor)
}

type classGLTFPhysicsShape struct{ Class[classGLTFPhysicsShape] }

func (self classGLTFPhysicsShape) Super() Resource {
	var super Resource
	super.ptr = self.ptr
	return super
}

func (self classGLTFPhysicsShape) Resource() Resource { return self.Super() }
func (self classGLTFPhysicsShape) FromNode(shape_node CollisionShape3D) GLTFPhysicsShape {
	return self.ptr.API.GLTFPhysicsShape_from_node(self, shape_node)
}
func (self classGLTFPhysicsShape) ToNode(cache_shapes bool) CollisionShape3D {
	return self.ptr.API.GLTFPhysicsShape_to_node(self, cache_shapes)
}
func (self classGLTFPhysicsShape) FromDictionary(dictionary Dictionary) GLTFPhysicsShape {
	return self.ptr.API.GLTFPhysicsShape_from_dictionary(self, dictionary)
}
func (self classGLTFPhysicsShape) ToDictionary() Dictionary {
	return self.ptr.API.GLTFPhysicsShape_to_dictionary(self)
}
func (self classGLTFPhysicsShape) GetShapeType() String {
	return self.ptr.API.GLTFPhysicsShape_get_shape_type(self)
}
func (self classGLTFPhysicsShape) SetShapeType(shape_type String) {
	self.ptr.API.GLTFPhysicsShape_set_shape_type(self, shape_type)
}
func (self classGLTFPhysicsShape) GetSize() Vector3 {
	return self.ptr.API.GLTFPhysicsShape_get_size(self)
}
func (self classGLTFPhysicsShape) SetSize(size Vector3) {
	self.ptr.API.GLTFPhysicsShape_set_size(self, size)
}
func (self classGLTFPhysicsShape) GetRadius() Float {
	return self.ptr.API.GLTFPhysicsShape_get_radius(self)
}
func (self classGLTFPhysicsShape) SetRadius(radius Float) {
	self.ptr.API.GLTFPhysicsShape_set_radius(self, radius)
}
func (self classGLTFPhysicsShape) GetHeight() Float {
	return self.ptr.API.GLTFPhysicsShape_get_height(self)
}
func (self classGLTFPhysicsShape) SetHeight(height Float) {
	self.ptr.API.GLTFPhysicsShape_set_height(self, height)
}
func (self classGLTFPhysicsShape) GetIsTrigger() bool {
	return self.ptr.API.GLTFPhysicsShape_get_is_trigger(self)
}
func (self classGLTFPhysicsShape) SetIsTrigger(is_trigger bool) {
	self.ptr.API.GLTFPhysicsShape_set_is_trigger(self, is_trigger)
}
func (self classGLTFPhysicsShape) GetMeshIndex() Int {
	return self.ptr.API.GLTFPhysicsShape_get_mesh_index(self)
}
func (self classGLTFPhysicsShape) SetMeshIndex(mesh_index Int) {
	self.ptr.API.GLTFPhysicsShape_set_mesh_index(self, mesh_index)
}
func (self classGLTFPhysicsShape) GetImporterMesh() ImporterMesh {
	return self.ptr.API.GLTFPhysicsShape_get_importer_mesh(self)
}
func (self classGLTFPhysicsShape) SetImporterMesh(importer_mesh ImporterMesh) {
	self.ptr.API.GLTFPhysicsShape_set_importer_mesh(self, importer_mesh)
}

type classGLTFSkeleton struct{ Class[classGLTFSkeleton] }

func (self classGLTFSkeleton) Super() Resource {
	var super Resource
	super.ptr = self.ptr
	return super
}

func (self classGLTFSkeleton) Resource() Resource { return self.Super() }
func (self classGLTFSkeleton) GetJoints() PackedInt32Array {
	return self.ptr.API.GLTFSkeleton_get_joints(self)
}
func (self classGLTFSkeleton) SetJoints(joints PackedInt32Array) {
	self.ptr.API.GLTFSkeleton_set_joints(self, joints)
}
func (self classGLTFSkeleton) GetRoots() PackedInt32Array {
	return self.ptr.API.GLTFSkeleton_get_roots(self)
}
func (self classGLTFSkeleton) SetRoots(roots PackedInt32Array) {
	self.ptr.API.GLTFSkeleton_set_roots(self, roots)
}
func (self classGLTFSkeleton) GetGodotSkeleton() Skeleton3D {
	return self.ptr.API.GLTFSkeleton_get_godot_skeleton(self)
}
func (self classGLTFSkeleton) GetUniqueNames() ArrayOf[String] {
	return self.ptr.API.GLTFSkeleton_get_unique_names(self)
}
func (self classGLTFSkeleton) SetUniqueNames(unique_names ArrayOf[String]) {
	self.ptr.API.GLTFSkeleton_set_unique_names(self, unique_names)
}
func (self classGLTFSkeleton) GetGodotBoneNode() Dictionary {
	return self.ptr.API.GLTFSkeleton_get_godot_bone_node(self)
}
func (self classGLTFSkeleton) SetGodotBoneNode(godot_bone_node Dictionary) {
	self.ptr.API.GLTFSkeleton_set_godot_bone_node(self, godot_bone_node)
}
func (self classGLTFSkeleton) GetBoneAttachmentCount() Int {
	return self.ptr.API.GLTFSkeleton_get_bone_attachment_count(self)
}
func (self classGLTFSkeleton) GetBoneAttachment(idx Int) BoneAttachment3D {
	return self.ptr.API.GLTFSkeleton_get_bone_attachment(self, idx)
}

type classGLTFSkin struct{ Class[classGLTFSkin] }

func (self classGLTFSkin) Super() Resource { var super Resource; super.ptr = self.ptr; return super }

func (self classGLTFSkin) Resource() Resource { return self.Super() }
func (self classGLTFSkin) GetSkinRoot() Int {
	return self.ptr.API.GLTFSkin_get_skin_root(self)
}
func (self classGLTFSkin) SetSkinRoot(skin_root Int) {
	self.ptr.API.GLTFSkin_set_skin_root(self, skin_root)
}
func (self classGLTFSkin) GetJointsOriginal() PackedInt32Array {
	return self.ptr.API.GLTFSkin_get_joints_original(self)
}
func (self classGLTFSkin) SetJointsOriginal(joints_original PackedInt32Array) {
	self.ptr.API.GLTFSkin_set_joints_original(self, joints_original)
}
func (self classGLTFSkin) GetInverseBinds() ArrayOf[Transform3D] {
	return self.ptr.API.GLTFSkin_get_inverse_binds(self)
}
func (self classGLTFSkin) SetInverseBinds(inverse_binds ArrayOf[Transform3D]) {
	self.ptr.API.GLTFSkin_set_inverse_binds(self, inverse_binds)
}
func (self classGLTFSkin) GetJoints() PackedInt32Array {
	return self.ptr.API.GLTFSkin_get_joints(self)
}
func (self classGLTFSkin) SetJoints(joints PackedInt32Array) {
	self.ptr.API.GLTFSkin_set_joints(self, joints)
}
func (self classGLTFSkin) GetNonJoints() PackedInt32Array {
	return self.ptr.API.GLTFSkin_get_non_joints(self)
}
func (self classGLTFSkin) SetNonJoints(non_joints PackedInt32Array) {
	self.ptr.API.GLTFSkin_set_non_joints(self, non_joints)
}
func (self classGLTFSkin) GetRoots() PackedInt32Array {
	return self.ptr.API.GLTFSkin_get_roots(self)
}
func (self classGLTFSkin) SetRoots(roots PackedInt32Array) {
	self.ptr.API.GLTFSkin_set_roots(self, roots)
}
func (self classGLTFSkin) GetSkeleton() Int {
	return self.ptr.API.GLTFSkin_get_skeleton(self)
}
func (self classGLTFSkin) SetSkeleton(skeleton Int) {
	self.ptr.API.GLTFSkin_set_skeleton(self, skeleton)
}
func (self classGLTFSkin) GetJointIToBoneI() Dictionary {
	return self.ptr.API.GLTFSkin_get_joint_i_to_bone_i(self)
}
func (self classGLTFSkin) SetJointIToBoneI(joint_i_to_bone_i Dictionary) {
	self.ptr.API.GLTFSkin_set_joint_i_to_bone_i(self, joint_i_to_bone_i)
}
func (self classGLTFSkin) GetJointIToName() Dictionary {
	return self.ptr.API.GLTFSkin_get_joint_i_to_name(self)
}
func (self classGLTFSkin) SetJointIToName(joint_i_to_name Dictionary) {
	self.ptr.API.GLTFSkin_set_joint_i_to_name(self, joint_i_to_name)
}
func (self classGLTFSkin) GetGodotSkin() Skin {
	return self.ptr.API.GLTFSkin_get_godot_skin(self)
}
func (self classGLTFSkin) SetGodotSkin(godot_skin Skin) {
	self.ptr.API.GLTFSkin_set_godot_skin(self, godot_skin)
}

type classGLTFSpecGloss struct{ Class[classGLTFSpecGloss] }

func (self classGLTFSpecGloss) Super() Resource {
	var super Resource
	super.ptr = self.ptr
	return super
}

func (self classGLTFSpecGloss) Resource() Resource { return self.Super() }
func (self classGLTFSpecGloss) GetDiffuseImg() Image {
	return self.ptr.API.GLTFSpecGloss_get_diffuse_img(self)
}
func (self classGLTFSpecGloss) SetDiffuseImg(diffuse_img Image) {
	self.ptr.API.GLTFSpecGloss_set_diffuse_img(self, diffuse_img)
}
func (self classGLTFSpecGloss) GetDiffuseFactor() Color {
	return self.ptr.API.GLTFSpecGloss_get_diffuse_factor(self)
}
func (self classGLTFSpecGloss) SetDiffuseFactor(diffuse_factor Color) {
	self.ptr.API.GLTFSpecGloss_set_diffuse_factor(self, diffuse_factor)
}
func (self classGLTFSpecGloss) GetGlossFactor() Float {
	return self.ptr.API.GLTFSpecGloss_get_gloss_factor(self)
}
func (self classGLTFSpecGloss) SetGlossFactor(gloss_factor Float) {
	self.ptr.API.GLTFSpecGloss_set_gloss_factor(self, gloss_factor)
}
func (self classGLTFSpecGloss) GetSpecularFactor() Color {
	return self.ptr.API.GLTFSpecGloss_get_specular_factor(self)
}
func (self classGLTFSpecGloss) SetSpecularFactor(specular_factor Color) {
	self.ptr.API.GLTFSpecGloss_set_specular_factor(self, specular_factor)
}
func (self classGLTFSpecGloss) GetSpecGlossImg() Image {
	return self.ptr.API.GLTFSpecGloss_get_spec_gloss_img(self)
}
func (self classGLTFSpecGloss) SetSpecGlossImg(spec_gloss_img Image) {
	self.ptr.API.GLTFSpecGloss_set_spec_gloss_img(self, spec_gloss_img)
}

type classGLTFState struct{ Class[classGLTFState] }

func (self classGLTFState) Super() Resource { var super Resource; super.ptr = self.ptr; return super }

func (self classGLTFState) Resource() Resource { return self.Super() }
func (self classGLTFState) AddUsedExtension(extension_name String, required bool) {
	self.ptr.API.GLTFState_add_used_extension(self, extension_name, required)
}
func (self classGLTFState) GetJson() Dictionary {
	return self.ptr.API.GLTFState_get_json(self)
}
func (self classGLTFState) SetJson(json Dictionary) {
	self.ptr.API.GLTFState_set_json(self, json)
}
func (self classGLTFState) GetMajorVersion() Int {
	return self.ptr.API.GLTFState_get_major_version(self)
}
func (self classGLTFState) SetMajorVersion(major_version Int) {
	self.ptr.API.GLTFState_set_major_version(self, major_version)
}
func (self classGLTFState) GetMinorVersion() Int {
	return self.ptr.API.GLTFState_get_minor_version(self)
}
func (self classGLTFState) SetMinorVersion(minor_version Int) {
	self.ptr.API.GLTFState_set_minor_version(self, minor_version)
}
func (self classGLTFState) GetCopyright() String {
	return self.ptr.API.GLTFState_get_copyright(self)
}
func (self classGLTFState) SetCopyright(copyright String) {
	self.ptr.API.GLTFState_set_copyright(self, copyright)
}
func (self classGLTFState) GetGlbData() PackedByteArray {
	return self.ptr.API.GLTFState_get_glb_data(self)
}
func (self classGLTFState) SetGlbData(glb_data PackedByteArray) {
	self.ptr.API.GLTFState_set_glb_data(self, glb_data)
}
func (self classGLTFState) GetUseNamedSkinBinds() bool {
	return self.ptr.API.GLTFState_get_use_named_skin_binds(self)
}
func (self classGLTFState) SetUseNamedSkinBinds(use_named_skin_binds bool) {
	self.ptr.API.GLTFState_set_use_named_skin_binds(self, use_named_skin_binds)
}
func (self classGLTFState) GetNodes() ArrayOf[GLTFNode] {
	return self.ptr.API.GLTFState_get_nodes(self)
}
func (self classGLTFState) SetNodes(nodes ArrayOf[GLTFNode]) {
	self.ptr.API.GLTFState_set_nodes(self, nodes)
}
func (self classGLTFState) GetBuffers() ArrayOf[PackedByteArray] {
	return self.ptr.API.GLTFState_get_buffers(self)
}
func (self classGLTFState) SetBuffers(buffers ArrayOf[PackedByteArray]) {
	self.ptr.API.GLTFState_set_buffers(self, buffers)
}
func (self classGLTFState) GetBufferViews() ArrayOf[GLTFBufferView] {
	return self.ptr.API.GLTFState_get_buffer_views(self)
}
func (self classGLTFState) SetBufferViews(buffer_views ArrayOf[GLTFBufferView]) {
	self.ptr.API.GLTFState_set_buffer_views(self, buffer_views)
}
func (self classGLTFState) GetAccessors() ArrayOf[GLTFAccessor] {
	return self.ptr.API.GLTFState_get_accessors(self)
}
func (self classGLTFState) SetAccessors(accessors ArrayOf[GLTFAccessor]) {
	self.ptr.API.GLTFState_set_accessors(self, accessors)
}
func (self classGLTFState) GetMeshes() ArrayOf[GLTFMesh] {
	return self.ptr.API.GLTFState_get_meshes(self)
}
func (self classGLTFState) SetMeshes(meshes ArrayOf[GLTFMesh]) {
	self.ptr.API.GLTFState_set_meshes(self, meshes)
}
func (self classGLTFState) GetAnimationPlayersCount(idx Int) Int {
	return self.ptr.API.GLTFState_get_animation_players_count(self, idx)
}
func (self classGLTFState) GetAnimationPlayer(idx Int) AnimationPlayer {
	return self.ptr.API.GLTFState_get_animation_player(self, idx)
}
func (self classGLTFState) GetMaterials() ArrayOf[Material] {
	return self.ptr.API.GLTFState_get_materials(self)
}
func (self classGLTFState) SetMaterials(materials ArrayOf[Material]) {
	self.ptr.API.GLTFState_set_materials(self, materials)
}
func (self classGLTFState) GetSceneName() String {
	return self.ptr.API.GLTFState_get_scene_name(self)
}
func (self classGLTFState) SetSceneName(scene_name String) {
	self.ptr.API.GLTFState_set_scene_name(self, scene_name)
}
func (self classGLTFState) GetBasePath() String {
	return self.ptr.API.GLTFState_get_base_path(self)
}
func (self classGLTFState) SetBasePath(base_path String) {
	self.ptr.API.GLTFState_set_base_path(self, base_path)
}
func (self classGLTFState) GetFilename() String {
	return self.ptr.API.GLTFState_get_filename(self)
}
func (self classGLTFState) SetFilename(filename String) {
	self.ptr.API.GLTFState_set_filename(self, filename)
}
func (self classGLTFState) GetRootNodes() PackedInt32Array {
	return self.ptr.API.GLTFState_get_root_nodes(self)
}
func (self classGLTFState) SetRootNodes(root_nodes PackedInt32Array) {
	self.ptr.API.GLTFState_set_root_nodes(self, root_nodes)
}
func (self classGLTFState) GetTextures() ArrayOf[GLTFTexture] {
	return self.ptr.API.GLTFState_get_textures(self)
}
func (self classGLTFState) SetTextures(textures ArrayOf[GLTFTexture]) {
	self.ptr.API.GLTFState_set_textures(self, textures)
}
func (self classGLTFState) GetTextureSamplers() ArrayOf[GLTFTextureSampler] {
	return self.ptr.API.GLTFState_get_texture_samplers(self)
}
func (self classGLTFState) SetTextureSamplers(texture_samplers ArrayOf[GLTFTextureSampler]) {
	self.ptr.API.GLTFState_set_texture_samplers(self, texture_samplers)
}
func (self classGLTFState) GetImages() ArrayOf[Texture2D] {
	return self.ptr.API.GLTFState_get_images(self)
}
func (self classGLTFState) SetImages(images ArrayOf[Texture2D]) {
	self.ptr.API.GLTFState_set_images(self, images)
}
func (self classGLTFState) GetSkins() ArrayOf[GLTFSkin] {
	return self.ptr.API.GLTFState_get_skins(self)
}
func (self classGLTFState) SetSkins(skins ArrayOf[GLTFSkin]) {
	self.ptr.API.GLTFState_set_skins(self, skins)
}
func (self classGLTFState) GetCameras() ArrayOf[GLTFCamera] {
	return self.ptr.API.GLTFState_get_cameras(self)
}
func (self classGLTFState) SetCameras(cameras ArrayOf[GLTFCamera]) {
	self.ptr.API.GLTFState_set_cameras(self, cameras)
}
func (self classGLTFState) GetLights() ArrayOf[GLTFLight] {
	return self.ptr.API.GLTFState_get_lights(self)
}
func (self classGLTFState) SetLights(lights ArrayOf[GLTFLight]) {
	self.ptr.API.GLTFState_set_lights(self, lights)
}
func (self classGLTFState) GetUniqueNames() ArrayOf[String] {
	return self.ptr.API.GLTFState_get_unique_names(self)
}
func (self classGLTFState) SetUniqueNames(unique_names ArrayOf[String]) {
	self.ptr.API.GLTFState_set_unique_names(self, unique_names)
}
func (self classGLTFState) GetUniqueAnimationNames() ArrayOf[String] {
	return self.ptr.API.GLTFState_get_unique_animation_names(self)
}
func (self classGLTFState) SetUniqueAnimationNames(unique_animation_names ArrayOf[String]) {
	self.ptr.API.GLTFState_set_unique_animation_names(self, unique_animation_names)
}
func (self classGLTFState) GetSkeletons() ArrayOf[GLTFSkeleton] {
	return self.ptr.API.GLTFState_get_skeletons(self)
}
func (self classGLTFState) SetSkeletons(skeletons ArrayOf[GLTFSkeleton]) {
	self.ptr.API.GLTFState_set_skeletons(self, skeletons)
}
func (self classGLTFState) GetCreateAnimations() bool {
	return self.ptr.API.GLTFState_get_create_animations(self)
}
func (self classGLTFState) SetCreateAnimations(create_animations bool) {
	self.ptr.API.GLTFState_set_create_animations(self, create_animations)
}
func (self classGLTFState) GetAnimations() ArrayOf[GLTFAnimation] {
	return self.ptr.API.GLTFState_get_animations(self)
}
func (self classGLTFState) SetAnimations(animations ArrayOf[GLTFAnimation]) {
	self.ptr.API.GLTFState_set_animations(self, animations)
}
func (self classGLTFState) GetSceneNode(idx Int) Node {
	return self.ptr.API.GLTFState_get_scene_node(self, idx)
}
func (self classGLTFState) GetNodeIndex(scene_node Node) Int {
	return self.ptr.API.GLTFState_get_node_index(self, scene_node)
}
func (self classGLTFState) GetAdditionalData(extension_name StringName) Variant {
	return self.ptr.API.GLTFState_get_additional_data(self, extension_name)
}
func (self classGLTFState) SetAdditionalData(extension_name StringName, additional_data Variant) {
	self.ptr.API.GLTFState_set_additional_data(self, extension_name, additional_data)
}
func (self classGLTFState) GetHandleBinaryImage() Int {
	return self.ptr.API.GLTFState_get_handle_binary_image(self)
}
func (self classGLTFState) SetHandleBinaryImage(method Int) {
	self.ptr.API.GLTFState_set_handle_binary_image(self, method)
}

type classGLTFTexture struct{ Class[classGLTFTexture] }

func (self classGLTFTexture) Super() Resource { var super Resource; super.ptr = self.ptr; return super }

func (self classGLTFTexture) Resource() Resource { return self.Super() }
func (self classGLTFTexture) GetSrcImage() Int {
	return self.ptr.API.GLTFTexture_get_src_image(self)
}
func (self classGLTFTexture) SetSrcImage(src_image Int) {
	self.ptr.API.GLTFTexture_set_src_image(self, src_image)
}
func (self classGLTFTexture) GetSampler() Int {
	return self.ptr.API.GLTFTexture_get_sampler(self)
}
func (self classGLTFTexture) SetSampler(sampler Int) {
	self.ptr.API.GLTFTexture_set_sampler(self, sampler)
}

type classGLTFTextureSampler struct{ Class[classGLTFTextureSampler] }

func (self classGLTFTextureSampler) Super() Resource {
	var super Resource
	super.ptr = self.ptr
	return super
}

func (self classGLTFTextureSampler) Resource() Resource { return self.Super() }
func (self classGLTFTextureSampler) GetMagFilter() Int {
	return self.ptr.API.GLTFTextureSampler_get_mag_filter(self)
}
func (self classGLTFTextureSampler) SetMagFilter(filter_mode Int) {
	self.ptr.API.GLTFTextureSampler_set_mag_filter(self, filter_mode)
}
func (self classGLTFTextureSampler) GetMinFilter() Int {
	return self.ptr.API.GLTFTextureSampler_get_min_filter(self)
}
func (self classGLTFTextureSampler) SetMinFilter(filter_mode Int) {
	self.ptr.API.GLTFTextureSampler_set_min_filter(self, filter_mode)
}
func (self classGLTFTextureSampler) GetWrapS() Int {
	return self.ptr.API.GLTFTextureSampler_get_wrap_s(self)
}
func (self classGLTFTextureSampler) SetWrapS(wrap_mode Int) {
	self.ptr.API.GLTFTextureSampler_set_wrap_s(self, wrap_mode)
}
func (self classGLTFTextureSampler) GetWrapT() Int {
	return self.ptr.API.GLTFTextureSampler_get_wrap_t(self)
}
func (self classGLTFTextureSampler) SetWrapT(wrap_mode Int) {
	self.ptr.API.GLTFTextureSampler_set_wrap_t(self, wrap_mode)
}

type classGPUParticles2D struct{ Class[classGPUParticles2D] }

func (self classGPUParticles2D) Super() Node2D { var super Node2D; super.ptr = self.ptr; return super }

func (self classGPUParticles2D) Node2D() Node2D { return self.Super() }
func (self classGPUParticles2D) SetEmitting(emitting bool) {
	self.ptr.API.GPUParticles2D_set_emitting(self, emitting)
}
func (self classGPUParticles2D) SetAmount(amount Int) {
	self.ptr.API.GPUParticles2D_set_amount(self, amount)
}
func (self classGPUParticles2D) SetLifetime(secs Float) {
	self.ptr.API.GPUParticles2D_set_lifetime(self, secs)
}
func (self classGPUParticles2D) SetOneShot(secs bool) {
	self.ptr.API.GPUParticles2D_set_one_shot(self, secs)
}
func (self classGPUParticles2D) SetPreProcessTime(secs Float) {
	self.ptr.API.GPUParticles2D_set_pre_process_time(self, secs)
}
func (self classGPUParticles2D) SetExplosivenessRatio(ratio Float) {
	self.ptr.API.GPUParticles2D_set_explosiveness_ratio(self, ratio)
}
func (self classGPUParticles2D) SetRandomnessRatio(ratio Float) {
	self.ptr.API.GPUParticles2D_set_randomness_ratio(self, ratio)
}
func (self classGPUParticles2D) SetVisibilityRect(visibility_rect Rect2) {
	self.ptr.API.GPUParticles2D_set_visibility_rect(self, visibility_rect)
}
func (self classGPUParticles2D) SetUseLocalCoordinates(enable bool) {
	self.ptr.API.GPUParticles2D_set_use_local_coordinates(self, enable)
}
func (self classGPUParticles2D) SetFixedFps(fps Int) {
	self.ptr.API.GPUParticles2D_set_fixed_fps(self, fps)
}
func (self classGPUParticles2D) SetFractionalDelta(enable bool) {
	self.ptr.API.GPUParticles2D_set_fractional_delta(self, enable)
}
func (self classGPUParticles2D) SetInterpolate(enable bool) {
	self.ptr.API.GPUParticles2D_set_interpolate(self, enable)
}
func (self classGPUParticles2D) SetProcessMaterial(material Material) {
	self.ptr.API.GPUParticles2D_set_process_material(self, material)
}
func (self classGPUParticles2D) SetSpeedScale(scale Float) {
	self.ptr.API.GPUParticles2D_set_speed_scale(self, scale)
}
func (self classGPUParticles2D) SetCollisionBaseSize(size Float) {
	self.ptr.API.GPUParticles2D_set_collision_base_size(self, size)
}
func (self classGPUParticles2D) SetInterpToEnd(interp Float) {
	self.ptr.API.GPUParticles2D_set_interp_to_end(self, interp)
}
func (self classGPUParticles2D) IsEmitting() bool {
	return self.ptr.API.GPUParticles2D_is_emitting(self)
}
func (self classGPUParticles2D) GetAmount() Int {
	return self.ptr.API.GPUParticles2D_get_amount(self)
}
func (self classGPUParticles2D) GetLifetime() Float {
	return self.ptr.API.GPUParticles2D_get_lifetime(self)
}
func (self classGPUParticles2D) GetOneShot() bool {
	return self.ptr.API.GPUParticles2D_get_one_shot(self)
}
func (self classGPUParticles2D) GetPreProcessTime() Float {
	return self.ptr.API.GPUParticles2D_get_pre_process_time(self)
}
func (self classGPUParticles2D) GetExplosivenessRatio() Float {
	return self.ptr.API.GPUParticles2D_get_explosiveness_ratio(self)
}
func (self classGPUParticles2D) GetRandomnessRatio() Float {
	return self.ptr.API.GPUParticles2D_get_randomness_ratio(self)
}
func (self classGPUParticles2D) GetVisibilityRect() Rect2 {
	return self.ptr.API.GPUParticles2D_get_visibility_rect(self)
}
func (self classGPUParticles2D) GetUseLocalCoordinates() bool {
	return self.ptr.API.GPUParticles2D_get_use_local_coordinates(self)
}
func (self classGPUParticles2D) GetFixedFps() Int {
	return self.ptr.API.GPUParticles2D_get_fixed_fps(self)
}
func (self classGPUParticles2D) GetFractionalDelta() bool {
	return self.ptr.API.GPUParticles2D_get_fractional_delta(self)
}
func (self classGPUParticles2D) GetInterpolate() bool {
	return self.ptr.API.GPUParticles2D_get_interpolate(self)
}
func (self classGPUParticles2D) GetProcessMaterial() Material {
	return self.ptr.API.GPUParticles2D_get_process_material(self)
}
func (self classGPUParticles2D) GetSpeedScale() Float {
	return self.ptr.API.GPUParticles2D_get_speed_scale(self)
}
func (self classGPUParticles2D) GetCollisionBaseSize() Float {
	return self.ptr.API.GPUParticles2D_get_collision_base_size(self)
}
func (self classGPUParticles2D) GetInterpToEnd() Float {
	return self.ptr.API.GPUParticles2D_get_interp_to_end(self)
}
func (self classGPUParticles2D) SetDrawOrder(order GPUParticles2DDrawOrder) {
	self.ptr.API.GPUParticles2D_set_draw_order(self, order)
}
func (self classGPUParticles2D) GetDrawOrder() GPUParticles2DDrawOrder {
	return self.ptr.API.GPUParticles2D_get_draw_order(self)
}
func (self classGPUParticles2D) SetTexture(texture Texture2D) {
	self.ptr.API.GPUParticles2D_set_texture(self, texture)
}
func (self classGPUParticles2D) GetTexture() Texture2D {
	return self.ptr.API.GPUParticles2D_get_texture(self)
}
func (self classGPUParticles2D) CaptureRect() Rect2 {
	return self.ptr.API.GPUParticles2D_capture_rect(self)
}
func (self classGPUParticles2D) Restart() {
	self.ptr.API.GPUParticles2D_restart(self)
}
func (self classGPUParticles2D) SetSubEmitter(path NodePath) {
	self.ptr.API.GPUParticles2D_set_sub_emitter(self, path)
}
func (self classGPUParticles2D) GetSubEmitter() NodePath {
	return self.ptr.API.GPUParticles2D_get_sub_emitter(self)
}
func (self classGPUParticles2D) EmitParticle(xform Transform2D, velocity Vector2, color Color, custom Color, flags Int) {
	self.ptr.API.GPUParticles2D_emit_particle(self, xform, velocity, color, custom, flags)
}
func (self classGPUParticles2D) SetTrailEnabled(enabled bool) {
	self.ptr.API.GPUParticles2D_set_trail_enabled(self, enabled)
}
func (self classGPUParticles2D) SetTrailLifetime(secs Float) {
	self.ptr.API.GPUParticles2D_set_trail_lifetime(self, secs)
}
func (self classGPUParticles2D) IsTrailEnabled() bool {
	return self.ptr.API.GPUParticles2D_is_trail_enabled(self)
}
func (self classGPUParticles2D) GetTrailLifetime() Float {
	return self.ptr.API.GPUParticles2D_get_trail_lifetime(self)
}
func (self classGPUParticles2D) SetTrailSections(sections Int) {
	self.ptr.API.GPUParticles2D_set_trail_sections(self, sections)
}
func (self classGPUParticles2D) GetTrailSections() Int {
	return self.ptr.API.GPUParticles2D_get_trail_sections(self)
}
func (self classGPUParticles2D) SetTrailSectionSubdivisions(subdivisions Int) {
	self.ptr.API.GPUParticles2D_set_trail_section_subdivisions(self, subdivisions)
}
func (self classGPUParticles2D) GetTrailSectionSubdivisions() Int {
	return self.ptr.API.GPUParticles2D_get_trail_section_subdivisions(self)
}
func (self classGPUParticles2D) ConvertFromParticles(particles Node) {
	self.ptr.API.GPUParticles2D_convert_from_particles(self, particles)
}
func (self classGPUParticles2D) SetAmountRatio(ratio Float) {
	self.ptr.API.GPUParticles2D_set_amount_ratio(self, ratio)
}
func (self classGPUParticles2D) GetAmountRatio() Float {
	return self.ptr.API.GPUParticles2D_get_amount_ratio(self)
}

type classGPUParticles3D struct{ Class[classGPUParticles3D] }

func (self classGPUParticles3D) Super() GeometryInstance3D {
	var super GeometryInstance3D
	super.ptr = self.ptr
	return super
}

func (self classGPUParticles3D) GeometryInstance3D() GeometryInstance3D { return self.Super() }
func (self classGPUParticles3D) SetEmitting(emitting bool) {
	self.ptr.API.GPUParticles3D_set_emitting(self, emitting)
}
func (self classGPUParticles3D) SetAmount(amount Int) {
	self.ptr.API.GPUParticles3D_set_amount(self, amount)
}
func (self classGPUParticles3D) SetLifetime(secs Float) {
	self.ptr.API.GPUParticles3D_set_lifetime(self, secs)
}
func (self classGPUParticles3D) SetOneShot(enable bool) {
	self.ptr.API.GPUParticles3D_set_one_shot(self, enable)
}
func (self classGPUParticles3D) SetPreProcessTime(secs Float) {
	self.ptr.API.GPUParticles3D_set_pre_process_time(self, secs)
}
func (self classGPUParticles3D) SetExplosivenessRatio(ratio Float) {
	self.ptr.API.GPUParticles3D_set_explosiveness_ratio(self, ratio)
}
func (self classGPUParticles3D) SetRandomnessRatio(ratio Float) {
	self.ptr.API.GPUParticles3D_set_randomness_ratio(self, ratio)
}
func (self classGPUParticles3D) SetVisibilityAabb(aabb AABB) {
	self.ptr.API.GPUParticles3D_set_visibility_aabb(self, aabb)
}
func (self classGPUParticles3D) SetUseLocalCoordinates(enable bool) {
	self.ptr.API.GPUParticles3D_set_use_local_coordinates(self, enable)
}
func (self classGPUParticles3D) SetFixedFps(fps Int) {
	self.ptr.API.GPUParticles3D_set_fixed_fps(self, fps)
}
func (self classGPUParticles3D) SetFractionalDelta(enable bool) {
	self.ptr.API.GPUParticles3D_set_fractional_delta(self, enable)
}
func (self classGPUParticles3D) SetInterpolate(enable bool) {
	self.ptr.API.GPUParticles3D_set_interpolate(self, enable)
}
func (self classGPUParticles3D) SetProcessMaterial(material Material) {
	self.ptr.API.GPUParticles3D_set_process_material(self, material)
}
func (self classGPUParticles3D) SetSpeedScale(scale Float) {
	self.ptr.API.GPUParticles3D_set_speed_scale(self, scale)
}
func (self classGPUParticles3D) SetCollisionBaseSize(size Float) {
	self.ptr.API.GPUParticles3D_set_collision_base_size(self, size)
}
func (self classGPUParticles3D) SetInterpToEnd(interp Float) {
	self.ptr.API.GPUParticles3D_set_interp_to_end(self, interp)
}
func (self classGPUParticles3D) IsEmitting() bool {
	return self.ptr.API.GPUParticles3D_is_emitting(self)
}
func (self classGPUParticles3D) GetAmount() Int {
	return self.ptr.API.GPUParticles3D_get_amount(self)
}
func (self classGPUParticles3D) GetLifetime() Float {
	return self.ptr.API.GPUParticles3D_get_lifetime(self)
}
func (self classGPUParticles3D) GetOneShot() bool {
	return self.ptr.API.GPUParticles3D_get_one_shot(self)
}
func (self classGPUParticles3D) GetPreProcessTime() Float {
	return self.ptr.API.GPUParticles3D_get_pre_process_time(self)
}
func (self classGPUParticles3D) GetExplosivenessRatio() Float {
	return self.ptr.API.GPUParticles3D_get_explosiveness_ratio(self)
}
func (self classGPUParticles3D) GetRandomnessRatio() Float {
	return self.ptr.API.GPUParticles3D_get_randomness_ratio(self)
}
func (self classGPUParticles3D) GetVisibilityAabb() AABB {
	return self.ptr.API.GPUParticles3D_get_visibility_aabb(self)
}
func (self classGPUParticles3D) GetUseLocalCoordinates() bool {
	return self.ptr.API.GPUParticles3D_get_use_local_coordinates(self)
}
func (self classGPUParticles3D) GetFixedFps() Int {
	return self.ptr.API.GPUParticles3D_get_fixed_fps(self)
}
func (self classGPUParticles3D) GetFractionalDelta() bool {
	return self.ptr.API.GPUParticles3D_get_fractional_delta(self)
}
func (self classGPUParticles3D) GetInterpolate() bool {
	return self.ptr.API.GPUParticles3D_get_interpolate(self)
}
func (self classGPUParticles3D) GetProcessMaterial() Material {
	return self.ptr.API.GPUParticles3D_get_process_material(self)
}
func (self classGPUParticles3D) GetSpeedScale() Float {
	return self.ptr.API.GPUParticles3D_get_speed_scale(self)
}
func (self classGPUParticles3D) GetCollisionBaseSize() Float {
	return self.ptr.API.GPUParticles3D_get_collision_base_size(self)
}
func (self classGPUParticles3D) GetInterpToEnd() Float {
	return self.ptr.API.GPUParticles3D_get_interp_to_end(self)
}
func (self classGPUParticles3D) SetDrawOrder(order GPUParticles3DDrawOrder) {
	self.ptr.API.GPUParticles3D_set_draw_order(self, order)
}
func (self classGPUParticles3D) GetDrawOrder() GPUParticles3DDrawOrder {
	return self.ptr.API.GPUParticles3D_get_draw_order(self)
}
func (self classGPUParticles3D) SetDrawPasses(passes Int) {
	self.ptr.API.GPUParticles3D_set_draw_passes(self, passes)
}
func (self classGPUParticles3D) SetDrawPassMesh(pass Int, mesh Mesh) {
	self.ptr.API.GPUParticles3D_set_draw_pass_mesh(self, pass, mesh)
}
func (self classGPUParticles3D) GetDrawPasses() Int {
	return self.ptr.API.GPUParticles3D_get_draw_passes(self)
}
func (self classGPUParticles3D) GetDrawPassMesh(pass Int) Mesh {
	return self.ptr.API.GPUParticles3D_get_draw_pass_mesh(self, pass)
}
func (self classGPUParticles3D) SetSkin(skin Skin) {
	self.ptr.API.GPUParticles3D_set_skin(self, skin)
}
func (self classGPUParticles3D) GetSkin() Skin {
	return self.ptr.API.GPUParticles3D_get_skin(self)
}
func (self classGPUParticles3D) Restart() {
	self.ptr.API.GPUParticles3D_restart(self)
}
func (self classGPUParticles3D) CaptureAabb() AABB {
	return self.ptr.API.GPUParticles3D_capture_aabb(self)
}
func (self classGPUParticles3D) SetSubEmitter(path NodePath) {
	self.ptr.API.GPUParticles3D_set_sub_emitter(self, path)
}
func (self classGPUParticles3D) GetSubEmitter() NodePath {
	return self.ptr.API.GPUParticles3D_get_sub_emitter(self)
}
func (self classGPUParticles3D) EmitParticle(xform Transform3D, velocity Vector3, color Color, custom Color, flags Int) {
	self.ptr.API.GPUParticles3D_emit_particle(self, xform, velocity, color, custom, flags)
}
func (self classGPUParticles3D) SetTrailEnabled(enabled bool) {
	self.ptr.API.GPUParticles3D_set_trail_enabled(self, enabled)
}
func (self classGPUParticles3D) SetTrailLifetime(secs Float) {
	self.ptr.API.GPUParticles3D_set_trail_lifetime(self, secs)
}
func (self classGPUParticles3D) IsTrailEnabled() bool {
	return self.ptr.API.GPUParticles3D_is_trail_enabled(self)
}
func (self classGPUParticles3D) GetTrailLifetime() Float {
	return self.ptr.API.GPUParticles3D_get_trail_lifetime(self)
}
func (self classGPUParticles3D) SetTransformAlign(align GPUParticles3DTransformAlign) {
	self.ptr.API.GPUParticles3D_set_transform_align(self, align)
}
func (self classGPUParticles3D) GetTransformAlign() GPUParticles3DTransformAlign {
	return self.ptr.API.GPUParticles3D_get_transform_align(self)
}
func (self classGPUParticles3D) ConvertFromParticles(particles Node) {
	self.ptr.API.GPUParticles3D_convert_from_particles(self, particles)
}
func (self classGPUParticles3D) SetAmountRatio(ratio Float) {
	self.ptr.API.GPUParticles3D_set_amount_ratio(self, ratio)
}
func (self classGPUParticles3D) GetAmountRatio() Float {
	return self.ptr.API.GPUParticles3D_get_amount_ratio(self)
}

type classGPUParticlesAttractor3D struct {
	Class[classGPUParticlesAttractor3D]
}

func (self classGPUParticlesAttractor3D) Super() VisualInstance3D {
	var super VisualInstance3D
	super.ptr = self.ptr
	return super
}

func (self classGPUParticlesAttractor3D) VisualInstance3D() VisualInstance3D { return self.Super() }
func (self classGPUParticlesAttractor3D) SetCullMask(mask Int) {
	self.ptr.API.GPUParticlesAttractor3D_set_cull_mask(self, mask)
}
func (self classGPUParticlesAttractor3D) GetCullMask() Int {
	return self.ptr.API.GPUParticlesAttractor3D_get_cull_mask(self)
}
func (self classGPUParticlesAttractor3D) SetStrength(strength Float) {
	self.ptr.API.GPUParticlesAttractor3D_set_strength(self, strength)
}
func (self classGPUParticlesAttractor3D) GetStrength() Float {
	return self.ptr.API.GPUParticlesAttractor3D_get_strength(self)
}
func (self classGPUParticlesAttractor3D) SetAttenuation(attenuation Float) {
	self.ptr.API.GPUParticlesAttractor3D_set_attenuation(self, attenuation)
}
func (self classGPUParticlesAttractor3D) GetAttenuation() Float {
	return self.ptr.API.GPUParticlesAttractor3D_get_attenuation(self)
}
func (self classGPUParticlesAttractor3D) SetDirectionality(amount Float) {
	self.ptr.API.GPUParticlesAttractor3D_set_directionality(self, amount)
}
func (self classGPUParticlesAttractor3D) GetDirectionality() Float {
	return self.ptr.API.GPUParticlesAttractor3D_get_directionality(self)
}

type classGPUParticlesAttractorBox3D struct {
	Class[classGPUParticlesAttractorBox3D]
}

func (self classGPUParticlesAttractorBox3D) Super() GPUParticlesAttractor3D {
	var super GPUParticlesAttractor3D
	super.ptr = self.ptr
	return super
}

func (self classGPUParticlesAttractorBox3D) GPUParticlesAttractor3D() GPUParticlesAttractor3D {
	return self.Super()
}
func (self classGPUParticlesAttractorBox3D) SetSize(size Vector3) {
	self.ptr.API.GPUParticlesAttractorBox3D_set_size(self, size)
}
func (self classGPUParticlesAttractorBox3D) GetSize() Vector3 {
	return self.ptr.API.GPUParticlesAttractorBox3D_get_size(self)
}

type classGPUParticlesAttractorSphere3D struct {
	Class[classGPUParticlesAttractorSphere3D]
}

func (self classGPUParticlesAttractorSphere3D) Super() GPUParticlesAttractor3D {
	var super GPUParticlesAttractor3D
	super.ptr = self.ptr
	return super
}

func (self classGPUParticlesAttractorSphere3D) GPUParticlesAttractor3D() GPUParticlesAttractor3D {
	return self.Super()
}
func (self classGPUParticlesAttractorSphere3D) SetRadius(radius Float) {
	self.ptr.API.GPUParticlesAttractorSphere3D_set_radius(self, radius)
}
func (self classGPUParticlesAttractorSphere3D) GetRadius() Float {
	return self.ptr.API.GPUParticlesAttractorSphere3D_get_radius(self)
}

type classGPUParticlesAttractorVectorField3D struct {
	Class[classGPUParticlesAttractorVectorField3D]
}

func (self classGPUParticlesAttractorVectorField3D) Super() GPUParticlesAttractor3D {
	var super GPUParticlesAttractor3D
	super.ptr = self.ptr
	return super
}

func (self classGPUParticlesAttractorVectorField3D) GPUParticlesAttractor3D() GPUParticlesAttractor3D {
	return self.Super()
}
func (self classGPUParticlesAttractorVectorField3D) SetSize(size Vector3) {
	self.ptr.API.GPUParticlesAttractorVectorField3D_set_size(self, size)
}
func (self classGPUParticlesAttractorVectorField3D) GetSize() Vector3 {
	return self.ptr.API.GPUParticlesAttractorVectorField3D_get_size(self)
}
func (self classGPUParticlesAttractorVectorField3D) SetTexture(texture Texture3D) {
	self.ptr.API.GPUParticlesAttractorVectorField3D_set_texture(self, texture)
}
func (self classGPUParticlesAttractorVectorField3D) GetTexture() Texture3D {
	return self.ptr.API.GPUParticlesAttractorVectorField3D_get_texture(self)
}

type classGPUParticlesCollision3D struct {
	Class[classGPUParticlesCollision3D]
}

func (self classGPUParticlesCollision3D) Super() VisualInstance3D {
	var super VisualInstance3D
	super.ptr = self.ptr
	return super
}

func (self classGPUParticlesCollision3D) VisualInstance3D() VisualInstance3D { return self.Super() }
func (self classGPUParticlesCollision3D) SetCullMask(mask Int) {
	self.ptr.API.GPUParticlesCollision3D_set_cull_mask(self, mask)
}
func (self classGPUParticlesCollision3D) GetCullMask() Int {
	return self.ptr.API.GPUParticlesCollision3D_get_cull_mask(self)
}

type classGPUParticlesCollisionBox3D struct {
	Class[classGPUParticlesCollisionBox3D]
}

func (self classGPUParticlesCollisionBox3D) Super() GPUParticlesCollision3D {
	var super GPUParticlesCollision3D
	super.ptr = self.ptr
	return super
}

func (self classGPUParticlesCollisionBox3D) GPUParticlesCollision3D() GPUParticlesCollision3D {
	return self.Super()
}
func (self classGPUParticlesCollisionBox3D) SetSize(size Vector3) {
	self.ptr.API.GPUParticlesCollisionBox3D_set_size(self, size)
}
func (self classGPUParticlesCollisionBox3D) GetSize() Vector3 {
	return self.ptr.API.GPUParticlesCollisionBox3D_get_size(self)
}

type classGPUParticlesCollisionHeightField3D struct {
	Class[classGPUParticlesCollisionHeightField3D]
}

func (self classGPUParticlesCollisionHeightField3D) Super() GPUParticlesCollision3D {
	var super GPUParticlesCollision3D
	super.ptr = self.ptr
	return super
}

func (self classGPUParticlesCollisionHeightField3D) GPUParticlesCollision3D() GPUParticlesCollision3D {
	return self.Super()
}
func (self classGPUParticlesCollisionHeightField3D) SetSize(size Vector3) {
	self.ptr.API.GPUParticlesCollisionHeightField3D_set_size(self, size)
}
func (self classGPUParticlesCollisionHeightField3D) GetSize() Vector3 {
	return self.ptr.API.GPUParticlesCollisionHeightField3D_get_size(self)
}
func (self classGPUParticlesCollisionHeightField3D) SetResolution(resolution GPUParticlesCollisionHeightField3DResolution) {
	self.ptr.API.GPUParticlesCollisionHeightField3D_set_resolution(self, resolution)
}
func (self classGPUParticlesCollisionHeightField3D) GetResolution() GPUParticlesCollisionHeightField3DResolution {
	return self.ptr.API.GPUParticlesCollisionHeightField3D_get_resolution(self)
}
func (self classGPUParticlesCollisionHeightField3D) SetUpdateMode(update_mode GPUParticlesCollisionHeightField3DUpdateMode) {
	self.ptr.API.GPUParticlesCollisionHeightField3D_set_update_mode(self, update_mode)
}
func (self classGPUParticlesCollisionHeightField3D) GetUpdateMode() GPUParticlesCollisionHeightField3DUpdateMode {
	return self.ptr.API.GPUParticlesCollisionHeightField3D_get_update_mode(self)
}
func (self classGPUParticlesCollisionHeightField3D) SetFollowCameraEnabled(enabled bool) {
	self.ptr.API.GPUParticlesCollisionHeightField3D_set_follow_camera_enabled(self, enabled)
}
func (self classGPUParticlesCollisionHeightField3D) IsFollowCameraEnabled() bool {
	return self.ptr.API.GPUParticlesCollisionHeightField3D_is_follow_camera_enabled(self)
}

type classGPUParticlesCollisionSDF3D struct {
	Class[classGPUParticlesCollisionSDF3D]
}

func (self classGPUParticlesCollisionSDF3D) Super() GPUParticlesCollision3D {
	var super GPUParticlesCollision3D
	super.ptr = self.ptr
	return super
}

func (self classGPUParticlesCollisionSDF3D) GPUParticlesCollision3D() GPUParticlesCollision3D {
	return self.Super()
}
func (self classGPUParticlesCollisionSDF3D) SetSize(size Vector3) {
	self.ptr.API.GPUParticlesCollisionSDF3D_set_size(self, size)
}
func (self classGPUParticlesCollisionSDF3D) GetSize() Vector3 {
	return self.ptr.API.GPUParticlesCollisionSDF3D_get_size(self)
}
func (self classGPUParticlesCollisionSDF3D) SetResolution(resolution GPUParticlesCollisionSDF3DResolution) {
	self.ptr.API.GPUParticlesCollisionSDF3D_set_resolution(self, resolution)
}
func (self classGPUParticlesCollisionSDF3D) GetResolution() GPUParticlesCollisionSDF3DResolution {
	return self.ptr.API.GPUParticlesCollisionSDF3D_get_resolution(self)
}
func (self classGPUParticlesCollisionSDF3D) SetTexture(texture Texture3D) {
	self.ptr.API.GPUParticlesCollisionSDF3D_set_texture(self, texture)
}
func (self classGPUParticlesCollisionSDF3D) GetTexture() Texture3D {
	return self.ptr.API.GPUParticlesCollisionSDF3D_get_texture(self)
}
func (self classGPUParticlesCollisionSDF3D) SetThickness(thickness Float) {
	self.ptr.API.GPUParticlesCollisionSDF3D_set_thickness(self, thickness)
}
func (self classGPUParticlesCollisionSDF3D) GetThickness() Float {
	return self.ptr.API.GPUParticlesCollisionSDF3D_get_thickness(self)
}
func (self classGPUParticlesCollisionSDF3D) SetBakeMask(mask Int) {
	self.ptr.API.GPUParticlesCollisionSDF3D_set_bake_mask(self, mask)
}
func (self classGPUParticlesCollisionSDF3D) GetBakeMask() Int {
	return self.ptr.API.GPUParticlesCollisionSDF3D_get_bake_mask(self)
}
func (self classGPUParticlesCollisionSDF3D) SetBakeMaskValue(layer_number Int, value bool) {
	self.ptr.API.GPUParticlesCollisionSDF3D_set_bake_mask_value(self, layer_number, value)
}
func (self classGPUParticlesCollisionSDF3D) GetBakeMaskValue(layer_number Int) bool {
	return self.ptr.API.GPUParticlesCollisionSDF3D_get_bake_mask_value(self, layer_number)
}

type classGPUParticlesCollisionSphere3D struct {
	Class[classGPUParticlesCollisionSphere3D]
}

func (self classGPUParticlesCollisionSphere3D) Super() GPUParticlesCollision3D {
	var super GPUParticlesCollision3D
	super.ptr = self.ptr
	return super
}

func (self classGPUParticlesCollisionSphere3D) GPUParticlesCollision3D() GPUParticlesCollision3D {
	return self.Super()
}
func (self classGPUParticlesCollisionSphere3D) SetRadius(radius Float) {
	self.ptr.API.GPUParticlesCollisionSphere3D_set_radius(self, radius)
}
func (self classGPUParticlesCollisionSphere3D) GetRadius() Float {
	return self.ptr.API.GPUParticlesCollisionSphere3D_get_radius(self)
}

type classGeneric6DOFJoint3D struct{ Class[classGeneric6DOFJoint3D] }

func (self classGeneric6DOFJoint3D) Super() Joint3D {
	var super Joint3D
	super.ptr = self.ptr
	return super
}

func (self classGeneric6DOFJoint3D) Joint3D() Joint3D { return self.Super() }
func (self classGeneric6DOFJoint3D) SetParamX(param Generic6DOFJoint3DParam, value Float) {
	self.ptr.API.Generic6DOFJoint3D_set_param_x(self, param, value)
}
func (self classGeneric6DOFJoint3D) GetParamX(param Generic6DOFJoint3DParam) Float {
	return self.ptr.API.Generic6DOFJoint3D_get_param_x(self, param)
}
func (self classGeneric6DOFJoint3D) SetParamY(param Generic6DOFJoint3DParam, value Float) {
	self.ptr.API.Generic6DOFJoint3D_set_param_y(self, param, value)
}
func (self classGeneric6DOFJoint3D) GetParamY(param Generic6DOFJoint3DParam) Float {
	return self.ptr.API.Generic6DOFJoint3D_get_param_y(self, param)
}
func (self classGeneric6DOFJoint3D) SetParamZ(param Generic6DOFJoint3DParam, value Float) {
	self.ptr.API.Generic6DOFJoint3D_set_param_z(self, param, value)
}
func (self classGeneric6DOFJoint3D) GetParamZ(param Generic6DOFJoint3DParam) Float {
	return self.ptr.API.Generic6DOFJoint3D_get_param_z(self, param)
}
func (self classGeneric6DOFJoint3D) SetFlagX(flag Generic6DOFJoint3DFlag, value bool) {
	self.ptr.API.Generic6DOFJoint3D_set_flag_x(self, flag, value)
}
func (self classGeneric6DOFJoint3D) GetFlagX(flag Generic6DOFJoint3DFlag) bool {
	return self.ptr.API.Generic6DOFJoint3D_get_flag_x(self, flag)
}
func (self classGeneric6DOFJoint3D) SetFlagY(flag Generic6DOFJoint3DFlag, value bool) {
	self.ptr.API.Generic6DOFJoint3D_set_flag_y(self, flag, value)
}
func (self classGeneric6DOFJoint3D) GetFlagY(flag Generic6DOFJoint3DFlag) bool {
	return self.ptr.API.Generic6DOFJoint3D_get_flag_y(self, flag)
}
func (self classGeneric6DOFJoint3D) SetFlagZ(flag Generic6DOFJoint3DFlag, value bool) {
	self.ptr.API.Generic6DOFJoint3D_set_flag_z(self, flag, value)
}
func (self classGeneric6DOFJoint3D) GetFlagZ(flag Generic6DOFJoint3DFlag) bool {
	return self.ptr.API.Generic6DOFJoint3D_get_flag_z(self, flag)
}

type classGeometry2D struct{ Class[classGeometry2D] }

func (self classGeometry2D) Super() Object { var super Object; super.ptr = self.ptr; return super }

func (self classGeometry2D) Object() Object { return self.Super() }

func (self classGeometry2D) isSingleton() {}
func (self classGeometry2D) IsPointInCircle(point Vector2, circle_position Vector2, circle_radius Float) bool {
	return self.ptr.API.Geometry2D_is_point_in_circle(self, point, circle_position, circle_radius)
}
func (self classGeometry2D) SegmentIntersectsCircle(segment_from Vector2, segment_to Vector2, circle_position Vector2, circle_radius Float) Float {
	return self.ptr.API.Geometry2D_segment_intersects_circle(self, segment_from, segment_to, circle_position, circle_radius)
}
func (self classGeometry2D) SegmentIntersectsSegment(from_a Vector2, to_a Vector2, from_b Vector2, to_b Vector2) Variant {
	return self.ptr.API.Geometry2D_segment_intersects_segment(self, from_a, to_a, from_b, to_b)
}
func (self classGeometry2D) LineIntersectsLine(from_a Vector2, dir_a Vector2, from_b Vector2, dir_b Vector2) Variant {
	return self.ptr.API.Geometry2D_line_intersects_line(self, from_a, dir_a, from_b, dir_b)
}
func (self classGeometry2D) GetClosestPointsBetweenSegments(p1 Vector2, q1 Vector2, p2 Vector2, q2 Vector2) PackedVector2Array {
	return self.ptr.API.Geometry2D_get_closest_points_between_segments(self, p1, q1, p2, q2)
}
func (self classGeometry2D) GetClosestPointToSegment(point Vector2, s1 Vector2, s2 Vector2) Vector2 {
	return self.ptr.API.Geometry2D_get_closest_point_to_segment(self, point, s1, s2)
}
func (self classGeometry2D) GetClosestPointToSegmentUncapped(point Vector2, s1 Vector2, s2 Vector2) Vector2 {
	return self.ptr.API.Geometry2D_get_closest_point_to_segment_uncapped(self, point, s1, s2)
}
func (self classGeometry2D) PointIsInsideTriangle(point Vector2, a Vector2, b Vector2, c Vector2) bool {
	return self.ptr.API.Geometry2D_point_is_inside_triangle(self, point, a, b, c)
}
func (self classGeometry2D) IsPolygonClockwise(polygon PackedVector2Array) bool {
	return self.ptr.API.Geometry2D_is_polygon_clockwise(self, polygon)
}
func (self classGeometry2D) IsPointInPolygon(point Vector2, polygon PackedVector2Array) bool {
	return self.ptr.API.Geometry2D_is_point_in_polygon(self, point, polygon)
}
func (self classGeometry2D) TriangulatePolygon(polygon PackedVector2Array) PackedInt32Array {
	return self.ptr.API.Geometry2D_triangulate_polygon(self, polygon)
}
func (self classGeometry2D) TriangulateDelaunay(points PackedVector2Array) PackedInt32Array {
	return self.ptr.API.Geometry2D_triangulate_delaunay(self, points)
}
func (self classGeometry2D) ConvexHull(points PackedVector2Array) PackedVector2Array {
	return self.ptr.API.Geometry2D_convex_hull(self, points)
}
func (self classGeometry2D) DecomposePolygonInConvex(polygon PackedVector2Array) ArrayOf[PackedVector2Array] {
	return self.ptr.API.Geometry2D_decompose_polygon_in_convex(self, polygon)
}
func (self classGeometry2D) MergePolygons(polygon_a PackedVector2Array, polygon_b PackedVector2Array) ArrayOf[PackedVector2Array] {
	return self.ptr.API.Geometry2D_merge_polygons(self, polygon_a, polygon_b)
}
func (self classGeometry2D) ClipPolygons(polygon_a PackedVector2Array, polygon_b PackedVector2Array) ArrayOf[PackedVector2Array] {
	return self.ptr.API.Geometry2D_clip_polygons(self, polygon_a, polygon_b)
}
func (self classGeometry2D) IntersectPolygons(polygon_a PackedVector2Array, polygon_b PackedVector2Array) ArrayOf[PackedVector2Array] {
	return self.ptr.API.Geometry2D_intersect_polygons(self, polygon_a, polygon_b)
}
func (self classGeometry2D) ExcludePolygons(polygon_a PackedVector2Array, polygon_b PackedVector2Array) ArrayOf[PackedVector2Array] {
	return self.ptr.API.Geometry2D_exclude_polygons(self, polygon_a, polygon_b)
}
func (self classGeometry2D) ClipPolylineWithPolygon(polyline PackedVector2Array, polygon PackedVector2Array) ArrayOf[PackedVector2Array] {
	return self.ptr.API.Geometry2D_clip_polyline_with_polygon(self, polyline, polygon)
}
func (self classGeometry2D) IntersectPolylineWithPolygon(polyline PackedVector2Array, polygon PackedVector2Array) ArrayOf[PackedVector2Array] {
	return self.ptr.API.Geometry2D_intersect_polyline_with_polygon(self, polyline, polygon)
}
func (self classGeometry2D) OffsetPolygon(polygon PackedVector2Array, delta Float, join_type Geometry2DPolyJoinType) ArrayOf[PackedVector2Array] {
	return self.ptr.API.Geometry2D_offset_polygon(self, polygon, delta, join_type)
}
func (self classGeometry2D) OffsetPolyline(polyline PackedVector2Array, delta Float, join_type Geometry2DPolyJoinType, end_type Geometry2DPolyEndType) ArrayOf[PackedVector2Array] {
	return self.ptr.API.Geometry2D_offset_polyline(self, polyline, delta, join_type, end_type)
}
func (self classGeometry2D) MakeAtlas(sizes PackedVector2Array) Dictionary {
	return self.ptr.API.Geometry2D_make_atlas(self, sizes)
}

type classGeometry3D struct{ Class[classGeometry3D] }

func (self classGeometry3D) Super() Object { var super Object; super.ptr = self.ptr; return super }

func (self classGeometry3D) Object() Object { return self.Super() }

func (self classGeometry3D) isSingleton() {}
func (self classGeometry3D) ComputeConvexMeshPoints(planes ArrayOf[Plane]) PackedVector3Array {
	return self.ptr.API.Geometry3D_compute_convex_mesh_points(self, planes)
}
func (self classGeometry3D) BuildBoxPlanes(extents Vector3) ArrayOf[Plane] {
	return self.ptr.API.Geometry3D_build_box_planes(self, extents)
}
func (self classGeometry3D) BuildCylinderPlanes(radius Float, height Float, sides Int, axis Vector3Axis) ArrayOf[Plane] {
	return self.ptr.API.Geometry3D_build_cylinder_planes(self, radius, height, sides, axis)
}
func (self classGeometry3D) BuildCapsulePlanes(radius Float, height Float, sides Int, lats Int, axis Vector3Axis) ArrayOf[Plane] {
	return self.ptr.API.Geometry3D_build_capsule_planes(self, radius, height, sides, lats, axis)
}
func (self classGeometry3D) GetClosestPointsBetweenSegments(p1 Vector3, p2 Vector3, q1 Vector3, q2 Vector3) PackedVector3Array {
	return self.ptr.API.Geometry3D_get_closest_points_between_segments(self, p1, p2, q1, q2)
}
func (self classGeometry3D) GetClosestPointToSegment(point Vector3, s1 Vector3, s2 Vector3) Vector3 {
	return self.ptr.API.Geometry3D_get_closest_point_to_segment(self, point, s1, s2)
}
func (self classGeometry3D) GetClosestPointToSegmentUncapped(point Vector3, s1 Vector3, s2 Vector3) Vector3 {
	return self.ptr.API.Geometry3D_get_closest_point_to_segment_uncapped(self, point, s1, s2)
}
func (self classGeometry3D) GetTriangleBarycentricCoords(point Vector3, a Vector3, b Vector3, c Vector3) Vector3 {
	return self.ptr.API.Geometry3D_get_triangle_barycentric_coords(self, point, a, b, c)
}
func (self classGeometry3D) RayIntersectsTriangle(from Vector3, dir Vector3, a Vector3, b Vector3, c Vector3) Variant {
	return self.ptr.API.Geometry3D_ray_intersects_triangle(self, from, dir, a, b, c)
}
func (self classGeometry3D) SegmentIntersectsTriangle(from Vector3, to Vector3, a Vector3, b Vector3, c Vector3) Variant {
	return self.ptr.API.Geometry3D_segment_intersects_triangle(self, from, to, a, b, c)
}
func (self classGeometry3D) SegmentIntersectsSphere(from Vector3, to Vector3, sphere_position Vector3, sphere_radius Float) PackedVector3Array {
	return self.ptr.API.Geometry3D_segment_intersects_sphere(self, from, to, sphere_position, sphere_radius)
}
func (self classGeometry3D) SegmentIntersectsCylinder(from Vector3, to Vector3, height Float, radius Float) PackedVector3Array {
	return self.ptr.API.Geometry3D_segment_intersects_cylinder(self, from, to, height, radius)
}
func (self classGeometry3D) SegmentIntersectsConvex(from Vector3, to Vector3, planes ArrayOf[Plane]) PackedVector3Array {
	return self.ptr.API.Geometry3D_segment_intersects_convex(self, from, to, planes)
}
func (self classGeometry3D) ClipPolygon(points PackedVector3Array, plane Plane) PackedVector3Array {
	return self.ptr.API.Geometry3D_clip_polygon(self, points, plane)
}
func (self classGeometry3D) TetrahedralizeDelaunay(points PackedVector3Array) PackedInt32Array {
	return self.ptr.API.Geometry3D_tetrahedralize_delaunay(self, points)
}

type classGeometryInstance3D struct{ Class[classGeometryInstance3D] }

func (self classGeometryInstance3D) Super() VisualInstance3D {
	var super VisualInstance3D
	super.ptr = self.ptr
	return super
}

func (self classGeometryInstance3D) VisualInstance3D() VisualInstance3D { return self.Super() }
func (self classGeometryInstance3D) SetMaterialOverride(material Material) {
	self.ptr.API.GeometryInstance3D_set_material_override(self, material)
}
func (self classGeometryInstance3D) GetMaterialOverride() Material {
	return self.ptr.API.GeometryInstance3D_get_material_override(self)
}
func (self classGeometryInstance3D) SetMaterialOverlay(material Material) {
	self.ptr.API.GeometryInstance3D_set_material_overlay(self, material)
}
func (self classGeometryInstance3D) GetMaterialOverlay() Material {
	return self.ptr.API.GeometryInstance3D_get_material_overlay(self)
}
func (self classGeometryInstance3D) SetCastShadowsSetting(shadow_casting_setting GeometryInstance3DShadowCastingSetting) {
	self.ptr.API.GeometryInstance3D_set_cast_shadows_setting(self, shadow_casting_setting)
}
func (self classGeometryInstance3D) GetCastShadowsSetting() GeometryInstance3DShadowCastingSetting {
	return self.ptr.API.GeometryInstance3D_get_cast_shadows_setting(self)
}
func (self classGeometryInstance3D) SetLodBias(bias Float) {
	self.ptr.API.GeometryInstance3D_set_lod_bias(self, bias)
}
func (self classGeometryInstance3D) GetLodBias() Float {
	return self.ptr.API.GeometryInstance3D_get_lod_bias(self)
}
func (self classGeometryInstance3D) SetTransparency(transparency Float) {
	self.ptr.API.GeometryInstance3D_set_transparency(self, transparency)
}
func (self classGeometryInstance3D) GetTransparency() Float {
	return self.ptr.API.GeometryInstance3D_get_transparency(self)
}
func (self classGeometryInstance3D) SetVisibilityRangeEndMargin(distance Float) {
	self.ptr.API.GeometryInstance3D_set_visibility_range_end_margin(self, distance)
}
func (self classGeometryInstance3D) GetVisibilityRangeEndMargin() Float {
	return self.ptr.API.GeometryInstance3D_get_visibility_range_end_margin(self)
}
func (self classGeometryInstance3D) SetVisibilityRangeEnd(distance Float) {
	self.ptr.API.GeometryInstance3D_set_visibility_range_end(self, distance)
}
func (self classGeometryInstance3D) GetVisibilityRangeEnd() Float {
	return self.ptr.API.GeometryInstance3D_get_visibility_range_end(self)
}
func (self classGeometryInstance3D) SetVisibilityRangeBeginMargin(distance Float) {
	self.ptr.API.GeometryInstance3D_set_visibility_range_begin_margin(self, distance)
}
func (self classGeometryInstance3D) GetVisibilityRangeBeginMargin() Float {
	return self.ptr.API.GeometryInstance3D_get_visibility_range_begin_margin(self)
}
func (self classGeometryInstance3D) SetVisibilityRangeBegin(distance Float) {
	self.ptr.API.GeometryInstance3D_set_visibility_range_begin(self, distance)
}
func (self classGeometryInstance3D) GetVisibilityRangeBegin() Float {
	return self.ptr.API.GeometryInstance3D_get_visibility_range_begin(self)
}
func (self classGeometryInstance3D) SetVisibilityRangeFadeMode(mode GeometryInstance3DVisibilityRangeFadeMode) {
	self.ptr.API.GeometryInstance3D_set_visibility_range_fade_mode(self, mode)
}
func (self classGeometryInstance3D) GetVisibilityRangeFadeMode() GeometryInstance3DVisibilityRangeFadeMode {
	return self.ptr.API.GeometryInstance3D_get_visibility_range_fade_mode(self)
}
func (self classGeometryInstance3D) SetInstanceShaderParameter(name StringName, value Variant) {
	self.ptr.API.GeometryInstance3D_set_instance_shader_parameter(self, name, value)
}
func (self classGeometryInstance3D) GetInstanceShaderParameter(name StringName) Variant {
	return self.ptr.API.GeometryInstance3D_get_instance_shader_parameter(self, name)
}
func (self classGeometryInstance3D) SetExtraCullMargin(margin Float) {
	self.ptr.API.GeometryInstance3D_set_extra_cull_margin(self, margin)
}
func (self classGeometryInstance3D) GetExtraCullMargin() Float {
	return self.ptr.API.GeometryInstance3D_get_extra_cull_margin(self)
}
func (self classGeometryInstance3D) SetLightmapScale(scale GeometryInstance3DLightmapScale) {
	self.ptr.API.GeometryInstance3D_set_lightmap_scale(self, scale)
}
func (self classGeometryInstance3D) GetLightmapScale() GeometryInstance3DLightmapScale {
	return self.ptr.API.GeometryInstance3D_get_lightmap_scale(self)
}
func (self classGeometryInstance3D) SetGiMode(mode GeometryInstance3DGIMode) {
	self.ptr.API.GeometryInstance3D_set_gi_mode(self, mode)
}
func (self classGeometryInstance3D) GetGiMode() GeometryInstance3DGIMode {
	return self.ptr.API.GeometryInstance3D_get_gi_mode(self)
}
func (self classGeometryInstance3D) SetIgnoreOcclusionCulling(ignore_culling bool) {
	self.ptr.API.GeometryInstance3D_set_ignore_occlusion_culling(self, ignore_culling)
}
func (self classGeometryInstance3D) IsIgnoringOcclusionCulling() bool {
	return self.ptr.API.GeometryInstance3D_is_ignoring_occlusion_culling(self)
}
func (self classGeometryInstance3D) SetCustomAabb(aabb AABB) {
	self.ptr.API.GeometryInstance3D_set_custom_aabb(self, aabb)
}
func (self classGeometryInstance3D) GetCustomAabb() AABB {
	return self.ptr.API.GeometryInstance3D_get_custom_aabb(self)
}

type classGradient struct{ Class[classGradient] }

func (self classGradient) Super() Resource { var super Resource; super.ptr = self.ptr; return super }

func (self classGradient) Resource() Resource { return self.Super() }
func (self classGradient) AddPoint(offset Float, color Color) {
	self.ptr.API.Gradient_add_point(self, offset, color)
}
func (self classGradient) RemovePoint(point Int) {
	self.ptr.API.Gradient_remove_point(self, point)
}
func (self classGradient) SetOffset(point Int, offset Float) {
	self.ptr.API.Gradient_set_offset(self, point, offset)
}
func (self classGradient) GetOffset(point Int) Float {
	return self.ptr.API.Gradient_get_offset(self, point)
}
func (self classGradient) Reverse() {
	self.ptr.API.Gradient_reverse(self)
}
func (self classGradient) SetColor(point Int, color Color) {
	self.ptr.API.Gradient_set_color(self, point, color)
}
func (self classGradient) GetColor(point Int) Color {
	return self.ptr.API.Gradient_get_color(self, point)
}
func (self classGradient) Sample(offset Float) Color {
	return self.ptr.API.Gradient_sample(self, offset)
}
func (self classGradient) GetPointCount() Int {
	return self.ptr.API.Gradient_get_point_count(self)
}
func (self classGradient) SetOffsets(offsets PackedFloat32Array) {
	self.ptr.API.Gradient_set_offsets(self, offsets)
}
func (self classGradient) GetOffsets() PackedFloat32Array {
	return self.ptr.API.Gradient_get_offsets(self)
}
func (self classGradient) SetColors(colors PackedColorArray) {
	self.ptr.API.Gradient_set_colors(self, colors)
}
func (self classGradient) GetColors() PackedColorArray {
	return self.ptr.API.Gradient_get_colors(self)
}
func (self classGradient) SetInterpolationMode(interpolation_mode GradientInterpolationMode) {
	self.ptr.API.Gradient_set_interpolation_mode(self, interpolation_mode)
}
func (self classGradient) GetInterpolationMode() GradientInterpolationMode {
	return self.ptr.API.Gradient_get_interpolation_mode(self)
}
func (self classGradient) SetInterpolationColorSpace(interpolation_color_space GradientColorSpace) {
	self.ptr.API.Gradient_set_interpolation_color_space(self, interpolation_color_space)
}
func (self classGradient) GetInterpolationColorSpace() GradientColorSpace {
	return self.ptr.API.Gradient_get_interpolation_color_space(self)
}

type classGradientTexture1D struct{ Class[classGradientTexture1D] }

func (self classGradientTexture1D) Super() Texture2D {
	var super Texture2D
	super.ptr = self.ptr
	return super
}

func (self classGradientTexture1D) Texture2D() Texture2D { return self.Super() }
func (self classGradientTexture1D) SetGradient(gradient Gradient) {
	self.ptr.API.GradientTexture1D_set_gradient(self, gradient)
}
func (self classGradientTexture1D) GetGradient() Gradient {
	return self.ptr.API.GradientTexture1D_get_gradient(self)
}
func (self classGradientTexture1D) SetWidth(width Int) {
	self.ptr.API.GradientTexture1D_set_width(self, width)
}
func (self classGradientTexture1D) SetUseHdr(enabled bool) {
	self.ptr.API.GradientTexture1D_set_use_hdr(self, enabled)
}
func (self classGradientTexture1D) IsUsingHdr() bool {
	return self.ptr.API.GradientTexture1D_is_using_hdr(self)
}

type classGradientTexture2D struct{ Class[classGradientTexture2D] }

func (self classGradientTexture2D) Super() Texture2D {
	var super Texture2D
	super.ptr = self.ptr
	return super
}

func (self classGradientTexture2D) Texture2D() Texture2D { return self.Super() }
func (self classGradientTexture2D) SetGradient(gradient Gradient) {
	self.ptr.API.GradientTexture2D_set_gradient(self, gradient)
}
func (self classGradientTexture2D) GetGradient() Gradient {
	return self.ptr.API.GradientTexture2D_get_gradient(self)
}
func (self classGradientTexture2D) SetWidth(width Int) {
	self.ptr.API.GradientTexture2D_set_width(self, width)
}
func (self classGradientTexture2D) SetHeight(height Int) {
	self.ptr.API.GradientTexture2D_set_height(self, height)
}
func (self classGradientTexture2D) SetUseHdr(enabled bool) {
	self.ptr.API.GradientTexture2D_set_use_hdr(self, enabled)
}
func (self classGradientTexture2D) IsUsingHdr() bool {
	return self.ptr.API.GradientTexture2D_is_using_hdr(self)
}
func (self classGradientTexture2D) SetFill(fill GradientTexture2DFill) {
	self.ptr.API.GradientTexture2D_set_fill(self, fill)
}
func (self classGradientTexture2D) GetFill() GradientTexture2DFill {
	return self.ptr.API.GradientTexture2D_get_fill(self)
}
func (self classGradientTexture2D) SetFillFrom(fill_from Vector2) {
	self.ptr.API.GradientTexture2D_set_fill_from(self, fill_from)
}
func (self classGradientTexture2D) GetFillFrom() Vector2 {
	return self.ptr.API.GradientTexture2D_get_fill_from(self)
}
func (self classGradientTexture2D) SetFillTo(fill_to Vector2) {
	self.ptr.API.GradientTexture2D_set_fill_to(self, fill_to)
}
func (self classGradientTexture2D) GetFillTo() Vector2 {
	return self.ptr.API.GradientTexture2D_get_fill_to(self)
}
func (self classGradientTexture2D) SetRepeat(repeat GradientTexture2DRepeat) {
	self.ptr.API.GradientTexture2D_set_repeat(self, repeat)
}
func (self classGradientTexture2D) GetRepeat() GradientTexture2DRepeat {
	return self.ptr.API.GradientTexture2D_get_repeat(self)
}

type classGraphEdit struct{ Class[classGraphEdit] }

func (self classGraphEdit) Super() Control { var super Control; super.ptr = self.ptr; return super }

func (self classGraphEdit) Control() Control { return self.Super() }
func (self classGraphEdit) ConnectNode(from_node StringName, from_port Int, to_node StringName, to_port Int) int64 {
	return self.ptr.API.GraphEdit_connect_node(self, from_node, from_port, to_node, to_port)
}
func (self classGraphEdit) IsNodeConnected(from_node StringName, from_port Int, to_node StringName, to_port Int) bool {
	return self.ptr.API.GraphEdit_is_node_connected(self, from_node, from_port, to_node, to_port)
}
func (self classGraphEdit) DisconnectNode(from_node StringName, from_port Int, to_node StringName, to_port Int) {
	self.ptr.API.GraphEdit_disconnect_node(self, from_node, from_port, to_node, to_port)
}
func (self classGraphEdit) SetConnectionActivity(from_node StringName, from_port Int, to_node StringName, to_port Int, amount Float) {
	self.ptr.API.GraphEdit_set_connection_activity(self, from_node, from_port, to_node, to_port, amount)
}
func (self classGraphEdit) GetConnectionList() ArrayOf[Dictionary] {
	return self.ptr.API.GraphEdit_get_connection_list(self)
}
func (self classGraphEdit) ClearConnections() {
	self.ptr.API.GraphEdit_clear_connections(self)
}
func (self classGraphEdit) ForceConnectionDragEnd() {
	self.ptr.API.GraphEdit_force_connection_drag_end(self)
}
func (self classGraphEdit) GetScrollOffset() Vector2 {
	return self.ptr.API.GraphEdit_get_scroll_offset(self)
}
func (self classGraphEdit) SetScrollOffset(offset Vector2) {
	self.ptr.API.GraphEdit_set_scroll_offset(self, offset)
}
func (self classGraphEdit) AddValidRightDisconnectType(atype Int) {
	self.ptr.API.GraphEdit_add_valid_right_disconnect_type(self, atype)
}
func (self classGraphEdit) RemoveValidRightDisconnectType(atype Int) {
	self.ptr.API.GraphEdit_remove_valid_right_disconnect_type(self, atype)
}
func (self classGraphEdit) AddValidLeftDisconnectType(atype Int) {
	self.ptr.API.GraphEdit_add_valid_left_disconnect_type(self, atype)
}
func (self classGraphEdit) RemoveValidLeftDisconnectType(atype Int) {
	self.ptr.API.GraphEdit_remove_valid_left_disconnect_type(self, atype)
}
func (self classGraphEdit) AddValidConnectionType(from_type Int, to_type Int) {
	self.ptr.API.GraphEdit_add_valid_connection_type(self, from_type, to_type)
}
func (self classGraphEdit) RemoveValidConnectionType(from_type Int, to_type Int) {
	self.ptr.API.GraphEdit_remove_valid_connection_type(self, from_type, to_type)
}
func (self classGraphEdit) IsValidConnectionType(from_type Int, to_type Int) bool {
	return self.ptr.API.GraphEdit_is_valid_connection_type(self, from_type, to_type)
}
func (self classGraphEdit) GetConnectionLine(from_node Vector2, to_node Vector2) PackedVector2Array {
	return self.ptr.API.GraphEdit_get_connection_line(self, from_node, to_node)
}
func (self classGraphEdit) SetPanningScheme(scheme GraphEditPanningScheme) {
	self.ptr.API.GraphEdit_set_panning_scheme(self, scheme)
}
func (self classGraphEdit) GetPanningScheme() GraphEditPanningScheme {
	return self.ptr.API.GraphEdit_get_panning_scheme(self)
}
func (self classGraphEdit) SetZoom(zoom Float) {
	self.ptr.API.GraphEdit_set_zoom(self, zoom)
}
func (self classGraphEdit) GetZoom() Float {
	return self.ptr.API.GraphEdit_get_zoom(self)
}
func (self classGraphEdit) SetZoomMin(zoom_min Float) {
	self.ptr.API.GraphEdit_set_zoom_min(self, zoom_min)
}
func (self classGraphEdit) GetZoomMin() Float {
	return self.ptr.API.GraphEdit_get_zoom_min(self)
}
func (self classGraphEdit) SetZoomMax(zoom_max Float) {
	self.ptr.API.GraphEdit_set_zoom_max(self, zoom_max)
}
func (self classGraphEdit) GetZoomMax() Float {
	return self.ptr.API.GraphEdit_get_zoom_max(self)
}
func (self classGraphEdit) SetZoomStep(zoom_step Float) {
	self.ptr.API.GraphEdit_set_zoom_step(self, zoom_step)
}
func (self classGraphEdit) GetZoomStep() Float {
	return self.ptr.API.GraphEdit_get_zoom_step(self)
}
func (self classGraphEdit) SetShowGrid(enable bool) {
	self.ptr.API.GraphEdit_set_show_grid(self, enable)
}
func (self classGraphEdit) IsShowingGrid() bool {
	return self.ptr.API.GraphEdit_is_showing_grid(self)
}
func (self classGraphEdit) SetGridPattern(pattern GraphEditGridPattern) {
	self.ptr.API.GraphEdit_set_grid_pattern(self, pattern)
}
func (self classGraphEdit) GetGridPattern() GraphEditGridPattern {
	return self.ptr.API.GraphEdit_get_grid_pattern(self)
}
func (self classGraphEdit) SetSnappingEnabled(enable bool) {
	self.ptr.API.GraphEdit_set_snapping_enabled(self, enable)
}
func (self classGraphEdit) IsSnappingEnabled() bool {
	return self.ptr.API.GraphEdit_is_snapping_enabled(self)
}
func (self classGraphEdit) SetSnappingDistance(pixels Int) {
	self.ptr.API.GraphEdit_set_snapping_distance(self, pixels)
}
func (self classGraphEdit) GetSnappingDistance() Int {
	return self.ptr.API.GraphEdit_get_snapping_distance(self)
}
func (self classGraphEdit) SetConnectionLinesCurvature(curvature Float) {
	self.ptr.API.GraphEdit_set_connection_lines_curvature(self, curvature)
}
func (self classGraphEdit) GetConnectionLinesCurvature() Float {
	return self.ptr.API.GraphEdit_get_connection_lines_curvature(self)
}
func (self classGraphEdit) SetConnectionLinesThickness(pixels Float) {
	self.ptr.API.GraphEdit_set_connection_lines_thickness(self, pixels)
}
func (self classGraphEdit) GetConnectionLinesThickness() Float {
	return self.ptr.API.GraphEdit_get_connection_lines_thickness(self)
}
func (self classGraphEdit) SetConnectionLinesAntialiased(pixels bool) {
	self.ptr.API.GraphEdit_set_connection_lines_antialiased(self, pixels)
}
func (self classGraphEdit) IsConnectionLinesAntialiased() bool {
	return self.ptr.API.GraphEdit_is_connection_lines_antialiased(self)
}
func (self classGraphEdit) SetMinimapSize(size Vector2) {
	self.ptr.API.GraphEdit_set_minimap_size(self, size)
}
func (self classGraphEdit) GetMinimapSize() Vector2 {
	return self.ptr.API.GraphEdit_get_minimap_size(self)
}
func (self classGraphEdit) SetMinimapOpacity(opacity Float) {
	self.ptr.API.GraphEdit_set_minimap_opacity(self, opacity)
}
func (self classGraphEdit) GetMinimapOpacity() Float {
	return self.ptr.API.GraphEdit_get_minimap_opacity(self)
}
func (self classGraphEdit) SetMinimapEnabled(enable bool) {
	self.ptr.API.GraphEdit_set_minimap_enabled(self, enable)
}
func (self classGraphEdit) IsMinimapEnabled() bool {
	return self.ptr.API.GraphEdit_is_minimap_enabled(self)
}
func (self classGraphEdit) SetShowMenu(hidden bool) {
	self.ptr.API.GraphEdit_set_show_menu(self, hidden)
}
func (self classGraphEdit) IsShowingMenu() bool {
	return self.ptr.API.GraphEdit_is_showing_menu(self)
}
func (self classGraphEdit) SetShowZoomLabel(enable bool) {
	self.ptr.API.GraphEdit_set_show_zoom_label(self, enable)
}
func (self classGraphEdit) IsShowingZoomLabel() bool {
	return self.ptr.API.GraphEdit_is_showing_zoom_label(self)
}
func (self classGraphEdit) SetShowGridButtons(hidden bool) {
	self.ptr.API.GraphEdit_set_show_grid_buttons(self, hidden)
}
func (self classGraphEdit) IsShowingGridButtons() bool {
	return self.ptr.API.GraphEdit_is_showing_grid_buttons(self)
}
func (self classGraphEdit) SetShowZoomButtons(hidden bool) {
	self.ptr.API.GraphEdit_set_show_zoom_buttons(self, hidden)
}
func (self classGraphEdit) IsShowingZoomButtons() bool {
	return self.ptr.API.GraphEdit_is_showing_zoom_buttons(self)
}
func (self classGraphEdit) SetShowMinimapButton(hidden bool) {
	self.ptr.API.GraphEdit_set_show_minimap_button(self, hidden)
}
func (self classGraphEdit) IsShowingMinimapButton() bool {
	return self.ptr.API.GraphEdit_is_showing_minimap_button(self)
}
func (self classGraphEdit) SetShowArrangeButton(hidden bool) {
	self.ptr.API.GraphEdit_set_show_arrange_button(self, hidden)
}
func (self classGraphEdit) IsShowingArrangeButton() bool {
	return self.ptr.API.GraphEdit_is_showing_arrange_button(self)
}
func (self classGraphEdit) SetRightDisconnects(enable bool) {
	self.ptr.API.GraphEdit_set_right_disconnects(self, enable)
}
func (self classGraphEdit) IsRightDisconnectsEnabled() bool {
	return self.ptr.API.GraphEdit_is_right_disconnects_enabled(self)
}
func (self classGraphEdit) GetMenuHbox() HBoxContainer {
	return self.ptr.API.GraphEdit_get_menu_hbox(self)
}
func (self classGraphEdit) ArrangeNodes() {
	self.ptr.API.GraphEdit_arrange_nodes(self)
}
func (self classGraphEdit) SetSelected(node Node) {
	self.ptr.API.GraphEdit_set_selected(self, node)
}

type classGraphElement struct{ Class[classGraphElement] }

func (self classGraphElement) Super() Container {
	var super Container
	super.ptr = self.ptr
	return super
}

func (self classGraphElement) Container() Container { return self.Super() }
func (self classGraphElement) SetResizable(resizable bool) {
	self.ptr.API.GraphElement_set_resizable(self, resizable)
}
func (self classGraphElement) IsResizable() bool {
	return self.ptr.API.GraphElement_is_resizable(self)
}
func (self classGraphElement) SetDraggable(draggable bool) {
	self.ptr.API.GraphElement_set_draggable(self, draggable)
}
func (self classGraphElement) IsDraggable() bool {
	return self.ptr.API.GraphElement_is_draggable(self)
}
func (self classGraphElement) SetSelectable(selectable bool) {
	self.ptr.API.GraphElement_set_selectable(self, selectable)
}
func (self classGraphElement) IsSelectable() bool {
	return self.ptr.API.GraphElement_is_selectable(self)
}
func (self classGraphElement) SetSelected(selected bool) {
	self.ptr.API.GraphElement_set_selected(self, selected)
}
func (self classGraphElement) IsSelected() bool {
	return self.ptr.API.GraphElement_is_selected(self)
}
func (self classGraphElement) SetPositionOffset(offset Vector2) {
	self.ptr.API.GraphElement_set_position_offset(self, offset)
}
func (self classGraphElement) GetPositionOffset() Vector2 {
	return self.ptr.API.GraphElement_get_position_offset(self)
}

type classGraphNode struct{ Class[classGraphNode] }

func (self classGraphNode) Super() GraphElement {
	var super GraphElement
	super.ptr = self.ptr
	return super
}

func (self classGraphNode) GraphElement() GraphElement { return self.Super() }
func (self classGraphNode) SetTitle(title String) {
	self.ptr.API.GraphNode_set_title(self, title)
}
func (self classGraphNode) GetTitle() String {
	return self.ptr.API.GraphNode_get_title(self)
}
func (self classGraphNode) GetTitlebarHbox() HBoxContainer {
	return self.ptr.API.GraphNode_get_titlebar_hbox(self)
}
func (self classGraphNode) SetSlot(slot_index Int, enable_left_port bool, type_left Int, color_left Color, enable_right_port bool, type_right Int, color_right Color, custom_icon_left Texture2D, custom_icon_right Texture2D, draw_stylebox bool) {
	self.ptr.API.GraphNode_set_slot(self, slot_index, enable_left_port, type_left, color_left, enable_right_port, type_right, color_right, custom_icon_left, custom_icon_right, draw_stylebox)
}
func (self classGraphNode) ClearSlot(slot_index Int) {
	self.ptr.API.GraphNode_clear_slot(self, slot_index)
}
func (self classGraphNode) ClearAllSlots() {
	self.ptr.API.GraphNode_clear_all_slots(self)
}
func (self classGraphNode) IsSlotEnabledLeft(slot_index Int) bool {
	return self.ptr.API.GraphNode_is_slot_enabled_left(self, slot_index)
}
func (self classGraphNode) SetSlotEnabledLeft(slot_index Int, enable bool) {
	self.ptr.API.GraphNode_set_slot_enabled_left(self, slot_index, enable)
}
func (self classGraphNode) SetSlotTypeLeft(slot_index Int, atype Int) {
	self.ptr.API.GraphNode_set_slot_type_left(self, slot_index, atype)
}
func (self classGraphNode) GetSlotTypeLeft(slot_index Int) Int {
	return self.ptr.API.GraphNode_get_slot_type_left(self, slot_index)
}
func (self classGraphNode) SetSlotColorLeft(slot_index Int, color Color) {
	self.ptr.API.GraphNode_set_slot_color_left(self, slot_index, color)
}
func (self classGraphNode) GetSlotColorLeft(slot_index Int) Color {
	return self.ptr.API.GraphNode_get_slot_color_left(self, slot_index)
}
func (self classGraphNode) SetSlotCustomIconLeft(slot_index Int, custom_icon Texture2D) {
	self.ptr.API.GraphNode_set_slot_custom_icon_left(self, slot_index, custom_icon)
}
func (self classGraphNode) GetSlotCustomIconLeft(slot_index Int) Texture2D {
	return self.ptr.API.GraphNode_get_slot_custom_icon_left(self, slot_index)
}
func (self classGraphNode) IsSlotEnabledRight(slot_index Int) bool {
	return self.ptr.API.GraphNode_is_slot_enabled_right(self, slot_index)
}
func (self classGraphNode) SetSlotEnabledRight(slot_index Int, enable bool) {
	self.ptr.API.GraphNode_set_slot_enabled_right(self, slot_index, enable)
}
func (self classGraphNode) SetSlotTypeRight(slot_index Int, atype Int) {
	self.ptr.API.GraphNode_set_slot_type_right(self, slot_index, atype)
}
func (self classGraphNode) GetSlotTypeRight(slot_index Int) Int {
	return self.ptr.API.GraphNode_get_slot_type_right(self, slot_index)
}
func (self classGraphNode) SetSlotColorRight(slot_index Int, color Color) {
	self.ptr.API.GraphNode_set_slot_color_right(self, slot_index, color)
}
func (self classGraphNode) GetSlotColorRight(slot_index Int) Color {
	return self.ptr.API.GraphNode_get_slot_color_right(self, slot_index)
}
func (self classGraphNode) SetSlotCustomIconRight(slot_index Int, custom_icon Texture2D) {
	self.ptr.API.GraphNode_set_slot_custom_icon_right(self, slot_index, custom_icon)
}
func (self classGraphNode) GetSlotCustomIconRight(slot_index Int) Texture2D {
	return self.ptr.API.GraphNode_get_slot_custom_icon_right(self, slot_index)
}
func (self classGraphNode) IsSlotDrawStylebox(slot_index Int) bool {
	return self.ptr.API.GraphNode_is_slot_draw_stylebox(self, slot_index)
}
func (self classGraphNode) SetSlotDrawStylebox(slot_index Int, enable bool) {
	self.ptr.API.GraphNode_set_slot_draw_stylebox(self, slot_index, enable)
}
func (self classGraphNode) GetInputPortCount() Int {
	return self.ptr.API.GraphNode_get_input_port_count(self)
}
func (self classGraphNode) GetInputPortPosition(port_idx Int) Vector2 {
	return self.ptr.API.GraphNode_get_input_port_position(self, port_idx)
}
func (self classGraphNode) GetInputPortType(port_idx Int) Int {
	return self.ptr.API.GraphNode_get_input_port_type(self, port_idx)
}
func (self classGraphNode) GetInputPortColor(port_idx Int) Color {
	return self.ptr.API.GraphNode_get_input_port_color(self, port_idx)
}
func (self classGraphNode) GetInputPortSlot(port_idx Int) Int {
	return self.ptr.API.GraphNode_get_input_port_slot(self, port_idx)
}
func (self classGraphNode) GetOutputPortCount() Int {
	return self.ptr.API.GraphNode_get_output_port_count(self)
}
func (self classGraphNode) GetOutputPortPosition(port_idx Int) Vector2 {
	return self.ptr.API.GraphNode_get_output_port_position(self, port_idx)
}
func (self classGraphNode) GetOutputPortType(port_idx Int) Int {
	return self.ptr.API.GraphNode_get_output_port_type(self, port_idx)
}
func (self classGraphNode) GetOutputPortColor(port_idx Int) Color {
	return self.ptr.API.GraphNode_get_output_port_color(self, port_idx)
}
func (self classGraphNode) GetOutputPortSlot(port_idx Int) Int {
	return self.ptr.API.GraphNode_get_output_port_slot(self, port_idx)
}

type classGridContainer struct{ Class[classGridContainer] }

func (self classGridContainer) Super() Container {
	var super Container
	super.ptr = self.ptr
	return super
}

func (self classGridContainer) Container() Container { return self.Super() }
func (self classGridContainer) SetColumns(columns Int) {
	self.ptr.API.GridContainer_set_columns(self, columns)
}
func (self classGridContainer) GetColumns() Int {
	return self.ptr.API.GridContainer_get_columns(self)
}

type classGridMap struct{ Class[classGridMap] }

func (self classGridMap) Super() Node3D { var super Node3D; super.ptr = self.ptr; return super }

func (self classGridMap) Node3D() Node3D { return self.Super() }
func (self classGridMap) SetCollisionLayer(layer Int) {
	self.ptr.API.GridMap_set_collision_layer(self, layer)
}
func (self classGridMap) GetCollisionLayer() Int {
	return self.ptr.API.GridMap_get_collision_layer(self)
}
func (self classGridMap) SetCollisionMask(mask Int) {
	self.ptr.API.GridMap_set_collision_mask(self, mask)
}
func (self classGridMap) GetCollisionMask() Int {
	return self.ptr.API.GridMap_get_collision_mask(self)
}
func (self classGridMap) SetCollisionMaskValue(layer_number Int, value bool) {
	self.ptr.API.GridMap_set_collision_mask_value(self, layer_number, value)
}
func (self classGridMap) GetCollisionMaskValue(layer_number Int) bool {
	return self.ptr.API.GridMap_get_collision_mask_value(self, layer_number)
}
func (self classGridMap) SetCollisionLayerValue(layer_number Int, value bool) {
	self.ptr.API.GridMap_set_collision_layer_value(self, layer_number, value)
}
func (self classGridMap) GetCollisionLayerValue(layer_number Int) bool {
	return self.ptr.API.GridMap_get_collision_layer_value(self, layer_number)
}
func (self classGridMap) SetCollisionPriority(priority Float) {
	self.ptr.API.GridMap_set_collision_priority(self, priority)
}
func (self classGridMap) GetCollisionPriority() Float {
	return self.ptr.API.GridMap_get_collision_priority(self)
}
func (self classGridMap) SetPhysicsMaterial(material PhysicsMaterial) {
	self.ptr.API.GridMap_set_physics_material(self, material)
}
func (self classGridMap) GetPhysicsMaterial() PhysicsMaterial {
	return self.ptr.API.GridMap_get_physics_material(self)
}
func (self classGridMap) SetBakeNavigation(bake_navigation bool) {
	self.ptr.API.GridMap_set_bake_navigation(self, bake_navigation)
}
func (self classGridMap) IsBakingNavigation() bool {
	return self.ptr.API.GridMap_is_baking_navigation(self)
}
func (self classGridMap) SetNavigationMap(navigation_map RID) {
	self.ptr.API.GridMap_set_navigation_map(self, navigation_map)
}
func (self classGridMap) GetNavigationMap() RID {
	return self.ptr.API.GridMap_get_navigation_map(self)
}
func (self classGridMap) SetMeshLibrary(mesh_library MeshLibrary) {
	self.ptr.API.GridMap_set_mesh_library(self, mesh_library)
}
func (self classGridMap) GetMeshLibrary() MeshLibrary {
	return self.ptr.API.GridMap_get_mesh_library(self)
}
func (self classGridMap) SetCellSize(size Vector3) {
	self.ptr.API.GridMap_set_cell_size(self, size)
}
func (self classGridMap) GetCellSize() Vector3 {
	return self.ptr.API.GridMap_get_cell_size(self)
}
func (self classGridMap) SetCellScale(scale Float) {
	self.ptr.API.GridMap_set_cell_scale(self, scale)
}
func (self classGridMap) GetCellScale() Float {
	return self.ptr.API.GridMap_get_cell_scale(self)
}
func (self classGridMap) SetOctantSize(size Int) {
	self.ptr.API.GridMap_set_octant_size(self, size)
}
func (self classGridMap) GetOctantSize() Int {
	return self.ptr.API.GridMap_get_octant_size(self)
}
func (self classGridMap) SetCellItem(position Vector3i, item Int, orientation Int) {
	self.ptr.API.GridMap_set_cell_item(self, position, item, orientation)
}
func (self classGridMap) GetCellItem(position Vector3i) Int {
	return self.ptr.API.GridMap_get_cell_item(self, position)
}
func (self classGridMap) GetCellItemOrientation(position Vector3i) Int {
	return self.ptr.API.GridMap_get_cell_item_orientation(self, position)
}
func (self classGridMap) GetCellItemBasis(position Vector3i) Basis {
	return self.ptr.API.GridMap_get_cell_item_basis(self, position)
}
func (self classGridMap) GetBasisWithOrthogonalIndex(index Int) Basis {
	return self.ptr.API.GridMap_get_basis_with_orthogonal_index(self, index)
}
func (self classGridMap) GetOrthogonalIndexFromBasis(basis Basis) Int {
	return self.ptr.API.GridMap_get_orthogonal_index_from_basis(self, basis)
}
func (self classGridMap) LocalToMap(local_position Vector3) Vector3i {
	return self.ptr.API.GridMap_local_to_map(self, local_position)
}
func (self classGridMap) MapToLocal(map_position Vector3i) Vector3 {
	return self.ptr.API.GridMap_map_to_local(self, map_position)
}
func (self classGridMap) ResourceChanged(resource Resource) {
	self.ptr.API.GridMap_resource_changed(self, resource)
}
func (self classGridMap) SetCenterX(enable bool) {
	self.ptr.API.GridMap_set_center_x(self, enable)
}
func (self classGridMap) GetCenterX() bool {
	return self.ptr.API.GridMap_get_center_x(self)
}
func (self classGridMap) SetCenterY(enable bool) {
	self.ptr.API.GridMap_set_center_y(self, enable)
}
func (self classGridMap) GetCenterY() bool {
	return self.ptr.API.GridMap_get_center_y(self)
}
func (self classGridMap) SetCenterZ(enable bool) {
	self.ptr.API.GridMap_set_center_z(self, enable)
}
func (self classGridMap) GetCenterZ() bool {
	return self.ptr.API.GridMap_get_center_z(self)
}
func (self classGridMap) Clear() {
	self.ptr.API.GridMap_clear(self)
}
func (self classGridMap) GetUsedCells() ArrayOf[Vector3i] {
	return self.ptr.API.GridMap_get_used_cells(self)
}
func (self classGridMap) GetUsedCellsByItem(item Int) ArrayOf[Vector3i] {
	return self.ptr.API.GridMap_get_used_cells_by_item(self, item)
}
func (self classGridMap) GetMeshes() Array {
	return self.ptr.API.GridMap_get_meshes(self)
}
func (self classGridMap) GetBakeMeshes() Array {
	return self.ptr.API.GridMap_get_bake_meshes(self)
}
func (self classGridMap) GetBakeMeshInstance(idx Int) RID {
	return self.ptr.API.GridMap_get_bake_mesh_instance(self, idx)
}
func (self classGridMap) ClearBakedMeshes() {
	self.ptr.API.GridMap_clear_baked_meshes(self)
}
func (self classGridMap) MakeBakedMeshes(gen_lightmap_uv bool, lightmap_uv_texel_size Float) {
	self.ptr.API.GridMap_make_baked_meshes(self, gen_lightmap_uv, lightmap_uv_texel_size)
}

type classGrooveJoint2D struct{ Class[classGrooveJoint2D] }

func (self classGrooveJoint2D) Super() Joint2D { var super Joint2D; super.ptr = self.ptr; return super }

func (self classGrooveJoint2D) Joint2D() Joint2D { return self.Super() }
func (self classGrooveJoint2D) SetLength(length Float) {
	self.ptr.API.GrooveJoint2D_set_length(self, length)
}
func (self classGrooveJoint2D) GetLength() Float {
	return self.ptr.API.GrooveJoint2D_get_length(self)
}
func (self classGrooveJoint2D) SetInitialOffset(offset Float) {
	self.ptr.API.GrooveJoint2D_set_initial_offset(self, offset)
}
func (self classGrooveJoint2D) GetInitialOffset() Float {
	return self.ptr.API.GrooveJoint2D_get_initial_offset(self)
}

type classHBoxContainer struct{ Class[classHBoxContainer] }

func (self classHBoxContainer) Super() BoxContainer {
	var super BoxContainer
	super.ptr = self.ptr
	return super
}

func (self classHBoxContainer) BoxContainer() BoxContainer { return self.Super() }

type classHFlowContainer struct{ Class[classHFlowContainer] }

func (self classHFlowContainer) Super() FlowContainer {
	var super FlowContainer
	super.ptr = self.ptr
	return super
}

func (self classHFlowContainer) FlowContainer() FlowContainer { return self.Super() }

type classHMACContext struct{ Class[classHMACContext] }

func (self classHMACContext) Super() RefCounted {
	var super RefCounted
	super.ptr = self.ptr
	return super
}

func (self classHMACContext) RefCounted() RefCounted { return self.Super() }
func (self classHMACContext) Start(hash_type HashingContextHashType, key PackedByteArray) int64 {
	return self.ptr.API.HMACContext_start(self, hash_type, key)
}
func (self classHMACContext) Update(data PackedByteArray) int64 {
	return self.ptr.API.HMACContext_update(self, data)
}
func (self classHMACContext) Finish() PackedByteArray {
	return self.ptr.API.HMACContext_finish(self)
}

type classHScrollBar struct{ Class[classHScrollBar] }

func (self classHScrollBar) Super() ScrollBar {
	var super ScrollBar
	super.ptr = self.ptr
	return super
}

func (self classHScrollBar) ScrollBar() ScrollBar { return self.Super() }

type classHSeparator struct{ Class[classHSeparator] }

func (self classHSeparator) Super() Separator {
	var super Separator
	super.ptr = self.ptr
	return super
}

func (self classHSeparator) Separator() Separator { return self.Super() }

type classHSlider struct{ Class[classHSlider] }

func (self classHSlider) Super() Slider { var super Slider; super.ptr = self.ptr; return super }

func (self classHSlider) Slider() Slider { return self.Super() }

type classHSplitContainer struct{ Class[classHSplitContainer] }

func (self classHSplitContainer) Super() SplitContainer {
	var super SplitContainer
	super.ptr = self.ptr
	return super
}

func (self classHSplitContainer) SplitContainer() SplitContainer { return self.Super() }

type classHTTPClient struct{ Class[classHTTPClient] }

func (self classHTTPClient) Super() RefCounted {
	var super RefCounted
	super.ptr = self.ptr
	return super
}

func (self classHTTPClient) RefCounted() RefCounted { return self.Super() }
func (self classHTTPClient) ConnectToHost(host String, port Int, tls_options TLSOptions) int64 {
	return self.ptr.API.HTTPClient_connect_to_host(self, host, port, tls_options)
}
func (self classHTTPClient) SetConnection(connection StreamPeer) {
	self.ptr.API.HTTPClient_set_connection(self, connection)
}
func (self classHTTPClient) GetConnection() StreamPeer {
	return self.ptr.API.HTTPClient_get_connection(self)
}
func (self classHTTPClient) RequestRaw(method HTTPClientMethod, url String, headers PackedStringArray, body PackedByteArray) int64 {
	return self.ptr.API.HTTPClient_request_raw(self, method, url, headers, body)
}
func (self classHTTPClient) Request(method HTTPClientMethod, url String, headers PackedStringArray, body String) int64 {
	return self.ptr.API.HTTPClient_request(self, method, url, headers, body)
}
func (self classHTTPClient) Close() {
	self.ptr.API.HTTPClient_close(self)
}
func (self classHTTPClient) HasResponse() bool {
	return self.ptr.API.HTTPClient_has_response(self)
}
func (self classHTTPClient) IsResponseChunked() bool {
	return self.ptr.API.HTTPClient_is_response_chunked(self)
}
func (self classHTTPClient) GetResponseCode() Int {
	return self.ptr.API.HTTPClient_get_response_code(self)
}
func (self classHTTPClient) GetResponseHeaders() PackedStringArray {
	return self.ptr.API.HTTPClient_get_response_headers(self)
}
func (self classHTTPClient) GetResponseHeadersAsDictionary() Dictionary {
	return self.ptr.API.HTTPClient_get_response_headers_as_dictionary(self)
}
func (self classHTTPClient) GetResponseBodyLength() Int {
	return self.ptr.API.HTTPClient_get_response_body_length(self)
}
func (self classHTTPClient) ReadResponseBodyChunk() PackedByteArray {
	return self.ptr.API.HTTPClient_read_response_body_chunk(self)
}
func (self classHTTPClient) SetReadChunkSize(bytes Int) {
	self.ptr.API.HTTPClient_set_read_chunk_size(self, bytes)
}
func (self classHTTPClient) GetReadChunkSize() Int {
	return self.ptr.API.HTTPClient_get_read_chunk_size(self)
}
func (self classHTTPClient) SetBlockingMode(enabled bool) {
	self.ptr.API.HTTPClient_set_blocking_mode(self, enabled)
}
func (self classHTTPClient) IsBlockingModeEnabled() bool {
	return self.ptr.API.HTTPClient_is_blocking_mode_enabled(self)
}
func (self classHTTPClient) GetStatus() HTTPClientStatus {
	return self.ptr.API.HTTPClient_get_status(self)
}
func (self classHTTPClient) Poll() int64 {
	return self.ptr.API.HTTPClient_poll(self)
}
func (self classHTTPClient) SetHttpProxy(host String, port Int) {
	self.ptr.API.HTTPClient_set_http_proxy(self, host, port)
}
func (self classHTTPClient) SetHttpsProxy(host String, port Int) {
	self.ptr.API.HTTPClient_set_https_proxy(self, host, port)
}
func (self classHTTPClient) QueryStringFromDict(fields Dictionary) String {
	return self.ptr.API.HTTPClient_query_string_from_dict(self, fields)
}

type classHTTPRequest struct{ Class[classHTTPRequest] }

func (self classHTTPRequest) Super() Node { var super Node; super.ptr = self.ptr; return super }

func (self classHTTPRequest) Node() Node { return self.Super() }
func (self classHTTPRequest) Request(url String, custom_headers PackedStringArray, method HTTPClientMethod, request_data String) int64 {
	return self.ptr.API.HTTPRequest_request(self, url, custom_headers, method, request_data)
}
func (self classHTTPRequest) RequestRaw(url String, custom_headers PackedStringArray, method HTTPClientMethod, request_data_raw PackedByteArray) int64 {
	return self.ptr.API.HTTPRequest_request_raw(self, url, custom_headers, method, request_data_raw)
}
func (self classHTTPRequest) CancelRequest() {
	self.ptr.API.HTTPRequest_cancel_request(self)
}
func (self classHTTPRequest) SetTlsOptions(client_options TLSOptions) {
	self.ptr.API.HTTPRequest_set_tls_options(self, client_options)
}
func (self classHTTPRequest) GetHttpClientStatus() HTTPClientStatus {
	return self.ptr.API.HTTPRequest_get_http_client_status(self)
}
func (self classHTTPRequest) SetUseThreads(enable bool) {
	self.ptr.API.HTTPRequest_set_use_threads(self, enable)
}
func (self classHTTPRequest) IsUsingThreads() bool {
	return self.ptr.API.HTTPRequest_is_using_threads(self)
}
func (self classHTTPRequest) SetAcceptGzip(enable bool) {
	self.ptr.API.HTTPRequest_set_accept_gzip(self, enable)
}
func (self classHTTPRequest) IsAcceptingGzip() bool {
	return self.ptr.API.HTTPRequest_is_accepting_gzip(self)
}
func (self classHTTPRequest) SetBodySizeLimit(bytes Int) {
	self.ptr.API.HTTPRequest_set_body_size_limit(self, bytes)
}
func (self classHTTPRequest) GetBodySizeLimit() Int {
	return self.ptr.API.HTTPRequest_get_body_size_limit(self)
}
func (self classHTTPRequest) SetMaxRedirects(amount Int) {
	self.ptr.API.HTTPRequest_set_max_redirects(self, amount)
}
func (self classHTTPRequest) GetMaxRedirects() Int {
	return self.ptr.API.HTTPRequest_get_max_redirects(self)
}
func (self classHTTPRequest) SetDownloadFile(path String) {
	self.ptr.API.HTTPRequest_set_download_file(self, path)
}
func (self classHTTPRequest) GetDownloadFile() String {
	return self.ptr.API.HTTPRequest_get_download_file(self)
}
func (self classHTTPRequest) GetDownloadedBytes() Int {
	return self.ptr.API.HTTPRequest_get_downloaded_bytes(self)
}
func (self classHTTPRequest) GetBodySize() Int {
	return self.ptr.API.HTTPRequest_get_body_size(self)
}
func (self classHTTPRequest) SetTimeout(timeout Float) {
	self.ptr.API.HTTPRequest_set_timeout(self, timeout)
}
func (self classHTTPRequest) GetTimeout() Float {
	return self.ptr.API.HTTPRequest_get_timeout(self)
}
func (self classHTTPRequest) SetDownloadChunkSize(chunk_size Int) {
	self.ptr.API.HTTPRequest_set_download_chunk_size(self, chunk_size)
}
func (self classHTTPRequest) GetDownloadChunkSize() Int {
	return self.ptr.API.HTTPRequest_get_download_chunk_size(self)
}
func (self classHTTPRequest) SetHttpProxy(host String, port Int) {
	self.ptr.API.HTTPRequest_set_http_proxy(self, host, port)
}
func (self classHTTPRequest) SetHttpsProxy(host String, port Int) {
	self.ptr.API.HTTPRequest_set_https_proxy(self, host, port)
}

type classHashingContext struct{ Class[classHashingContext] }

func (self classHashingContext) Super() RefCounted {
	var super RefCounted
	super.ptr = self.ptr
	return super
}

func (self classHashingContext) RefCounted() RefCounted { return self.Super() }
func (self classHashingContext) Start(atype HashingContextHashType) int64 {
	return self.ptr.API.HashingContext_start(self, atype)
}
func (self classHashingContext) Update(chunk PackedByteArray) int64 {
	return self.ptr.API.HashingContext_update(self, chunk)
}
func (self classHashingContext) Finish() PackedByteArray {
	return self.ptr.API.HashingContext_finish(self)
}

type classHeightMapShape3D struct{ Class[classHeightMapShape3D] }

func (self classHeightMapShape3D) Super() Shape3D {
	var super Shape3D
	super.ptr = self.ptr
	return super
}

func (self classHeightMapShape3D) Shape3D() Shape3D { return self.Super() }
func (self classHeightMapShape3D) SetMapWidth(width Int) {
	self.ptr.API.HeightMapShape3D_set_map_width(self, width)
}
func (self classHeightMapShape3D) GetMapWidth() Int {
	return self.ptr.API.HeightMapShape3D_get_map_width(self)
}
func (self classHeightMapShape3D) SetMapDepth(height Int) {
	self.ptr.API.HeightMapShape3D_set_map_depth(self, height)
}
func (self classHeightMapShape3D) GetMapDepth() Int {
	return self.ptr.API.HeightMapShape3D_get_map_depth(self)
}
func (self classHeightMapShape3D) SetMapData(data PackedFloat32Array) {
	self.ptr.API.HeightMapShape3D_set_map_data(self, data)
}
func (self classHeightMapShape3D) GetMapData() PackedFloat32Array {
	return self.ptr.API.HeightMapShape3D_get_map_data(self)
}

type classHelloWorld struct{ Class[classHelloWorld] }

func (self classHelloWorld) Super() Object { var super Object; super.ptr = self.ptr; return super }

func (self classHelloWorld) Object() Object { return self.Super() }

type classHingeJoint3D struct{ Class[classHingeJoint3D] }

func (self classHingeJoint3D) Super() Joint3D { var super Joint3D; super.ptr = self.ptr; return super }

func (self classHingeJoint3D) Joint3D() Joint3D { return self.Super() }
func (self classHingeJoint3D) SetParam(param HingeJoint3DParam, value Float) {
	self.ptr.API.HingeJoint3D_set_param(self, param, value)
}
func (self classHingeJoint3D) GetParam(param HingeJoint3DParam) Float {
	return self.ptr.API.HingeJoint3D_get_param(self, param)
}
func (self classHingeJoint3D) SetFlag(flag HingeJoint3DFlag, enabled bool) {
	self.ptr.API.HingeJoint3D_set_flag(self, flag, enabled)
}
func (self classHingeJoint3D) GetFlag(flag HingeJoint3DFlag) bool {
	return self.ptr.API.HingeJoint3D_get_flag(self, flag)
}

type classIP struct{ Class[classIP] }

func (self classIP) Super() Object { var super Object; super.ptr = self.ptr; return super }

func (self classIP) Object() Object { return self.Super() }

func (self classIP) isSingleton() {}
func (self classIP) ResolveHostname(host String, ip_type IPType) String {
	return self.ptr.API.IP_resolve_hostname(self, host, ip_type)
}
func (self classIP) ResolveHostnameAddresses(host String, ip_type IPType) PackedStringArray {
	return self.ptr.API.IP_resolve_hostname_addresses(self, host, ip_type)
}
func (self classIP) ResolveHostnameQueueItem(host String, ip_type IPType) Int {
	return self.ptr.API.IP_resolve_hostname_queue_item(self, host, ip_type)
}
func (self classIP) GetResolveItemStatus(id Int) IPResolverStatus {
	return self.ptr.API.IP_get_resolve_item_status(self, id)
}
func (self classIP) GetResolveItemAddress(id Int) String {
	return self.ptr.API.IP_get_resolve_item_address(self, id)
}
func (self classIP) GetResolveItemAddresses(id Int) Array {
	return self.ptr.API.IP_get_resolve_item_addresses(self, id)
}
func (self classIP) EraseResolveItem(id Int) {
	self.ptr.API.IP_erase_resolve_item(self, id)
}
func (self classIP) GetLocalAddresses() PackedStringArray {
	return self.ptr.API.IP_get_local_addresses(self)
}
func (self classIP) GetLocalInterfaces() ArrayOf[Dictionary] {
	return self.ptr.API.IP_get_local_interfaces(self)
}
func (self classIP) ClearCache(hostname String) {
	self.ptr.API.IP_clear_cache(self, hostname)
}

type classImage struct{ Class[classImage] }

func (self classImage) Super() Resource { var super Resource; super.ptr = self.ptr; return super }

func (self classImage) Resource() Resource { return self.Super() }
func (self classImage) GetWidth() Int {
	return self.ptr.API.Image_get_width(self)
}
func (self classImage) GetHeight() Int {
	return self.ptr.API.Image_get_height(self)
}
func (self classImage) GetSize() Vector2i {
	return self.ptr.API.Image_get_size(self)
}
func (self classImage) HasMipmaps() bool {
	return self.ptr.API.Image_has_mipmaps(self)
}
func (self classImage) GetFormat() ImageFormat {
	return self.ptr.API.Image_get_format(self)
}
func (self classImage) GetData() PackedByteArray {
	return self.ptr.API.Image_get_data(self)
}
func (self classImage) Convert(format ImageFormat) {
	self.ptr.API.Image_convert(self, format)
}
func (self classImage) GetMipmapCount() Int {
	return self.ptr.API.Image_get_mipmap_count(self)
}
func (self classImage) GetMipmapOffset(mipmap Int) Int {
	return self.ptr.API.Image_get_mipmap_offset(self, mipmap)
}
func (self classImage) ResizeToPo2(square bool, interpolation ImageInterpolation) {
	self.ptr.API.Image_resize_to_po2(self, square, interpolation)
}
func (self classImage) Resize(width Int, height Int, interpolation ImageInterpolation) {
	self.ptr.API.Image_resize(self, width, height, interpolation)
}
func (self classImage) ShrinkX2() {
	self.ptr.API.Image_shrink_x2(self)
}
func (self classImage) Crop(width Int, height Int) {
	self.ptr.API.Image_crop(self, width, height)
}
func (self classImage) FlipX() {
	self.ptr.API.Image_flip_x(self)
}
func (self classImage) FlipY() {
	self.ptr.API.Image_flip_y(self)
}
func (self classImage) GenerateMipmaps(renormalize bool) int64 {
	return self.ptr.API.Image_generate_mipmaps(self, renormalize)
}
func (self classImage) ClearMipmaps() {
	self.ptr.API.Image_clear_mipmaps(self)
}
func (self classImage) Create(width Int, height Int, use_mipmaps bool, format ImageFormat) Image {
	return self.ptr.API.Image_create(self, width, height, use_mipmaps, format)
}
func (self classImage) CreateFromData(width Int, height Int, use_mipmaps bool, format ImageFormat, data PackedByteArray) Image {
	return self.ptr.API.Image_create_from_data(self, width, height, use_mipmaps, format, data)
}
func (self classImage) SetData(width Int, height Int, use_mipmaps bool, format ImageFormat, data PackedByteArray) {
	self.ptr.API.Image_set_data(self, width, height, use_mipmaps, format, data)
}
func (self classImage) IsEmpty() bool {
	return self.ptr.API.Image_is_empty(self)
}
func (self classImage) Load(path String) int64 {
	return self.ptr.API.Image_load(self, path)
}
func (self classImage) LoadFromFile(path String) Image {
	return self.ptr.API.Image_load_from_file(self, path)
}
func (self classImage) SavePng(path String) int64 {
	return self.ptr.API.Image_save_png(self, path)
}
func (self classImage) SavePngToBuffer() PackedByteArray {
	return self.ptr.API.Image_save_png_to_buffer(self)
}
func (self classImage) SaveJpg(path String, quality Float) int64 {
	return self.ptr.API.Image_save_jpg(self, path, quality)
}
func (self classImage) SaveJpgToBuffer(quality Float) PackedByteArray {
	return self.ptr.API.Image_save_jpg_to_buffer(self, quality)
}
func (self classImage) SaveExr(path String, grayscale bool) int64 {
	return self.ptr.API.Image_save_exr(self, path, grayscale)
}
func (self classImage) SaveExrToBuffer(grayscale bool) PackedByteArray {
	return self.ptr.API.Image_save_exr_to_buffer(self, grayscale)
}
func (self classImage) SaveWebp(path String, lossy bool, quality Float) int64 {
	return self.ptr.API.Image_save_webp(self, path, lossy, quality)
}
func (self classImage) SaveWebpToBuffer(lossy bool, quality Float) PackedByteArray {
	return self.ptr.API.Image_save_webp_to_buffer(self, lossy, quality)
}
func (self classImage) DetectAlpha() ImageAlphaMode {
	return self.ptr.API.Image_detect_alpha(self)
}
func (self classImage) IsInvisible() bool {
	return self.ptr.API.Image_is_invisible(self)
}
func (self classImage) DetectUsedChannels(source ImageCompressSource) ImageUsedChannels {
	return self.ptr.API.Image_detect_used_channels(self, source)
}
func (self classImage) Compress(mode ImageCompressMode, source ImageCompressSource, astc_format ImageASTCFormat) int64 {
	return self.ptr.API.Image_compress(self, mode, source, astc_format)
}
func (self classImage) CompressFromChannels(mode ImageCompressMode, channels ImageUsedChannels, astc_format ImageASTCFormat) int64 {
	return self.ptr.API.Image_compress_from_channels(self, mode, channels, astc_format)
}
func (self classImage) Decompress() int64 {
	return self.ptr.API.Image_decompress(self)
}
func (self classImage) IsCompressed() bool {
	return self.ptr.API.Image_is_compressed(self)
}
func (self classImage) Rotate90(direction ClockDirection) {
	self.ptr.API.Image_rotate_90(self, direction)
}
func (self classImage) Rotate180() {
	self.ptr.API.Image_rotate_180(self)
}
func (self classImage) FixAlphaEdges() {
	self.ptr.API.Image_fix_alpha_edges(self)
}
func (self classImage) PremultiplyAlpha() {
	self.ptr.API.Image_premultiply_alpha(self)
}
func (self classImage) SrgbToLinear() {
	self.ptr.API.Image_srgb_to_linear(self)
}
func (self classImage) NormalMapToXy() {
	self.ptr.API.Image_normal_map_to_xy(self)
}
func (self classImage) RgbeToSrgb() Image {
	return self.ptr.API.Image_rgbe_to_srgb(self)
}
func (self classImage) BumpMapToNormalMap(bump_scale Float) {
	self.ptr.API.Image_bump_map_to_normal_map(self, bump_scale)
}
func (self classImage) ComputeImageMetrics(compared_image Image, use_luma bool) Dictionary {
	return self.ptr.API.Image_compute_image_metrics(self, compared_image, use_luma)
}
func (self classImage) BlitRect(src Image, src_rect Rect2i, dst Vector2i) {
	self.ptr.API.Image_blit_rect(self, src, src_rect, dst)
}
func (self classImage) BlitRectMask(src Image, mask Image, src_rect Rect2i, dst Vector2i) {
	self.ptr.API.Image_blit_rect_mask(self, src, mask, src_rect, dst)
}
func (self classImage) BlendRect(src Image, src_rect Rect2i, dst Vector2i) {
	self.ptr.API.Image_blend_rect(self, src, src_rect, dst)
}
func (self classImage) BlendRectMask(src Image, mask Image, src_rect Rect2i, dst Vector2i) {
	self.ptr.API.Image_blend_rect_mask(self, src, mask, src_rect, dst)
}
func (self classImage) Fill(color Color) {
	self.ptr.API.Image_fill(self, color)
}
func (self classImage) FillRect(rect Rect2i, color Color) {
	self.ptr.API.Image_fill_rect(self, rect, color)
}
func (self classImage) GetUsedRect() Rect2i {
	return self.ptr.API.Image_get_used_rect(self)
}
func (self classImage) GetRegion(region Rect2i) Image {
	return self.ptr.API.Image_get_region(self, region)
}
func (self classImage) CopyFrom(src Image) {
	self.ptr.API.Image_copy_from(self, src)
}
func (self classImage) GetPixelv(point Vector2i) Color {
	return self.ptr.API.Image_get_pixelv(self, point)
}
func (self classImage) GetPixel(x Int, y Int) Color {
	return self.ptr.API.Image_get_pixel(self, x, y)
}
func (self classImage) SetPixelv(point Vector2i, color Color) {
	self.ptr.API.Image_set_pixelv(self, point, color)
}
func (self classImage) SetPixel(x Int, y Int, color Color) {
	self.ptr.API.Image_set_pixel(self, x, y, color)
}
func (self classImage) AdjustBcs(brightness Float, contrast Float, saturation Float) {
	self.ptr.API.Image_adjust_bcs(self, brightness, contrast, saturation)
}
func (self classImage) LoadPngFromBuffer(buffer PackedByteArray) int64 {
	return self.ptr.API.Image_load_png_from_buffer(self, buffer)
}
func (self classImage) LoadJpgFromBuffer(buffer PackedByteArray) int64 {
	return self.ptr.API.Image_load_jpg_from_buffer(self, buffer)
}
func (self classImage) LoadWebpFromBuffer(buffer PackedByteArray) int64 {
	return self.ptr.API.Image_load_webp_from_buffer(self, buffer)
}
func (self classImage) LoadTgaFromBuffer(buffer PackedByteArray) int64 {
	return self.ptr.API.Image_load_tga_from_buffer(self, buffer)
}
func (self classImage) LoadBmpFromBuffer(buffer PackedByteArray) int64 {
	return self.ptr.API.Image_load_bmp_from_buffer(self, buffer)
}
func (self classImage) LoadKtxFromBuffer(buffer PackedByteArray) int64 {
	return self.ptr.API.Image_load_ktx_from_buffer(self, buffer)
}
func (self classImage) LoadSvgFromBuffer(buffer PackedByteArray, scale Float) int64 {
	return self.ptr.API.Image_load_svg_from_buffer(self, buffer, scale)
}
func (self classImage) LoadSvgFromString(svg_str String, scale Float) int64 {
	return self.ptr.API.Image_load_svg_from_string(self, svg_str, scale)
}

type classImageFormatLoader struct{ Class[classImageFormatLoader] }

func (self classImageFormatLoader) Super() RefCounted {
	var super RefCounted
	super.ptr = self.ptr
	return super
}

func (self classImageFormatLoader) RefCounted() RefCounted { return self.Super() }

type classImageFormatLoaderExtension struct {
	Class[classImageFormatLoaderExtension]
}

func (self classImageFormatLoaderExtension) Super() ImageFormatLoader {
	var super ImageFormatLoader
	super.ptr = self.ptr
	return super
}

func (self classImageFormatLoaderExtension) ImageFormatLoader() ImageFormatLoader {
	return self.Super()
}
func (self classImageFormatLoaderExtension) AddFormatLoader() {
	self.ptr.API.ImageFormatLoaderExtension_add_format_loader(self)
}
func (self classImageFormatLoaderExtension) RemoveFormatLoader() {
	self.ptr.API.ImageFormatLoaderExtension_remove_format_loader(self)
}

type classImageTexture struct{ Class[classImageTexture] }

func (self classImageTexture) Super() Texture2D {
	var super Texture2D
	super.ptr = self.ptr
	return super
}

func (self classImageTexture) Texture2D() Texture2D { return self.Super() }
func (self classImageTexture) CreateFromImage(image Image) ImageTexture {
	return self.ptr.API.ImageTexture_create_from_image(self, image)
}
func (self classImageTexture) GetFormat() ImageFormat {
	return self.ptr.API.ImageTexture_get_format(self)
}
func (self classImageTexture) SetImage(image Image) {
	self.ptr.API.ImageTexture_set_image(self, image)
}
func (self classImageTexture) Update(image Image) {
	self.ptr.API.ImageTexture_update(self, image)
}
func (self classImageTexture) SetSizeOverride(size Vector2i) {
	self.ptr.API.ImageTexture_set_size_override(self, size)
}

type classImageTexture3D struct{ Class[classImageTexture3D] }

func (self classImageTexture3D) Super() Texture3D {
	var super Texture3D
	super.ptr = self.ptr
	return super
}

func (self classImageTexture3D) Texture3D() Texture3D { return self.Super() }
func (self classImageTexture3D) Create(format ImageFormat, width Int, height Int, depth Int, use_mipmaps bool, data ArrayOf[Image]) int64 {
	return self.ptr.API.ImageTexture3D_create(self, format, width, height, depth, use_mipmaps, data)
}
func (self classImageTexture3D) Update(data ArrayOf[Image]) {
	self.ptr.API.ImageTexture3D_update(self, data)
}

type classImageTextureLayered struct {
	Class[classImageTextureLayered]
}

func (self classImageTextureLayered) Super() TextureLayered {
	var super TextureLayered
	super.ptr = self.ptr
	return super
}

func (self classImageTextureLayered) TextureLayered() TextureLayered { return self.Super() }
func (self classImageTextureLayered) CreateFromImages(images ArrayOf[Image]) int64 {
	return self.ptr.API.ImageTextureLayered_create_from_images(self, images)
}
func (self classImageTextureLayered) UpdateLayer(image Image, layer Int) {
	self.ptr.API.ImageTextureLayered_update_layer(self, image, layer)
}

type classImmediateMesh struct{ Class[classImmediateMesh] }

func (self classImmediateMesh) Super() Mesh { var super Mesh; super.ptr = self.ptr; return super }

func (self classImmediateMesh) Mesh() Mesh { return self.Super() }
func (self classImmediateMesh) SurfaceBegin(primitive MeshPrimitiveType, material Material) {
	self.ptr.API.ImmediateMesh_surface_begin(self, primitive, material)
}
func (self classImmediateMesh) SurfaceSetColor(color Color) {
	self.ptr.API.ImmediateMesh_surface_set_color(self, color)
}
func (self classImmediateMesh) SurfaceSetNormal(normal Vector3) {
	self.ptr.API.ImmediateMesh_surface_set_normal(self, normal)
}
func (self classImmediateMesh) SurfaceSetTangent(tangent Plane) {
	self.ptr.API.ImmediateMesh_surface_set_tangent(self, tangent)
}
func (self classImmediateMesh) SurfaceSetUv(uv Vector2) {
	self.ptr.API.ImmediateMesh_surface_set_uv(self, uv)
}
func (self classImmediateMesh) SurfaceSetUv2(uv2 Vector2) {
	self.ptr.API.ImmediateMesh_surface_set_uv2(self, uv2)
}
func (self classImmediateMesh) SurfaceAddVertex(vertex Vector3) {
	self.ptr.API.ImmediateMesh_surface_add_vertex(self, vertex)
}
func (self classImmediateMesh) SurfaceAddVertex2d(vertex Vector2) {
	self.ptr.API.ImmediateMesh_surface_add_vertex_2d(self, vertex)
}
func (self classImmediateMesh) SurfaceEnd() {
	self.ptr.API.ImmediateMesh_surface_end(self)
}
func (self classImmediateMesh) ClearSurfaces() {
	self.ptr.API.ImmediateMesh_clear_surfaces(self)
}

type classImporterMesh struct{ Class[classImporterMesh] }

func (self classImporterMesh) Super() Resource {
	var super Resource
	super.ptr = self.ptr
	return super
}

func (self classImporterMesh) Resource() Resource { return self.Super() }
func (self classImporterMesh) AddBlendShape(name String) {
	self.ptr.API.ImporterMesh_add_blend_shape(self, name)
}
func (self classImporterMesh) GetBlendShapeCount() Int {
	return self.ptr.API.ImporterMesh_get_blend_shape_count(self)
}
func (self classImporterMesh) GetBlendShapeName(blend_shape_idx Int) String {
	return self.ptr.API.ImporterMesh_get_blend_shape_name(self, blend_shape_idx)
}
func (self classImporterMesh) SetBlendShapeMode(mode MeshBlendShapeMode) {
	self.ptr.API.ImporterMesh_set_blend_shape_mode(self, mode)
}
func (self classImporterMesh) GetBlendShapeMode() MeshBlendShapeMode {
	return self.ptr.API.ImporterMesh_get_blend_shape_mode(self)
}
func (self classImporterMesh) AddSurface(primitive MeshPrimitiveType, arrays Array, blend_shapes ArrayOf[Array], lods Dictionary, material Material, name String, flags Int) {
	self.ptr.API.ImporterMesh_add_surface(self, primitive, arrays, blend_shapes, lods, material, name, flags)
}
func (self classImporterMesh) GetSurfaceCount() Int {
	return self.ptr.API.ImporterMesh_get_surface_count(self)
}
func (self classImporterMesh) GetSurfacePrimitiveType(surface_idx Int) MeshPrimitiveType {
	return self.ptr.API.ImporterMesh_get_surface_primitive_type(self, surface_idx)
}
func (self classImporterMesh) GetSurfaceName(surface_idx Int) String {
	return self.ptr.API.ImporterMesh_get_surface_name(self, surface_idx)
}
func (self classImporterMesh) GetSurfaceArrays(surface_idx Int) Array {
	return self.ptr.API.ImporterMesh_get_surface_arrays(self, surface_idx)
}
func (self classImporterMesh) GetSurfaceBlendShapeArrays(surface_idx Int, blend_shape_idx Int) Array {
	return self.ptr.API.ImporterMesh_get_surface_blend_shape_arrays(self, surface_idx, blend_shape_idx)
}
func (self classImporterMesh) GetSurfaceLodCount(surface_idx Int) Int {
	return self.ptr.API.ImporterMesh_get_surface_lod_count(self, surface_idx)
}
func (self classImporterMesh) GetSurfaceLodSize(surface_idx Int, lod_idx Int) Float {
	return self.ptr.API.ImporterMesh_get_surface_lod_size(self, surface_idx, lod_idx)
}
func (self classImporterMesh) GetSurfaceLodIndices(surface_idx Int, lod_idx Int) PackedInt32Array {
	return self.ptr.API.ImporterMesh_get_surface_lod_indices(self, surface_idx, lod_idx)
}
func (self classImporterMesh) GetSurfaceMaterial(surface_idx Int) Material {
	return self.ptr.API.ImporterMesh_get_surface_material(self, surface_idx)
}
func (self classImporterMesh) GetSurfaceFormat(surface_idx Int) Int {
	return self.ptr.API.ImporterMesh_get_surface_format(self, surface_idx)
}
func (self classImporterMesh) SetSurfaceName(surface_idx Int, name String) {
	self.ptr.API.ImporterMesh_set_surface_name(self, surface_idx, name)
}
func (self classImporterMesh) SetSurfaceMaterial(surface_idx Int, material Material) {
	self.ptr.API.ImporterMesh_set_surface_material(self, surface_idx, material)
}
func (self classImporterMesh) GenerateLods(normal_merge_angle Float, normal_split_angle Float, bone_transform_array Array) {
	self.ptr.API.ImporterMesh_generate_lods(self, normal_merge_angle, normal_split_angle, bone_transform_array)
}
func (self classImporterMesh) GetMesh(base_mesh ArrayMesh) ArrayMesh {
	return self.ptr.API.ImporterMesh_get_mesh(self, base_mesh)
}
func (self classImporterMesh) Clear() {
	self.ptr.API.ImporterMesh_clear(self)
}
func (self classImporterMesh) SetLightmapSizeHint(size Vector2i) {
	self.ptr.API.ImporterMesh_set_lightmap_size_hint(self, size)
}
func (self classImporterMesh) GetLightmapSizeHint() Vector2i {
	return self.ptr.API.ImporterMesh_get_lightmap_size_hint(self)
}

type classImporterMeshInstance3D struct {
	Class[classImporterMeshInstance3D]
}

func (self classImporterMeshInstance3D) Super() Node3D {
	var super Node3D
	super.ptr = self.ptr
	return super
}

func (self classImporterMeshInstance3D) Node3D() Node3D { return self.Super() }
func (self classImporterMeshInstance3D) SetMesh(mesh ImporterMesh) {
	self.ptr.API.ImporterMeshInstance3D_set_mesh(self, mesh)
}
func (self classImporterMeshInstance3D) GetMesh() ImporterMesh {
	return self.ptr.API.ImporterMeshInstance3D_get_mesh(self)
}
func (self classImporterMeshInstance3D) SetSkin(skin Skin) {
	self.ptr.API.ImporterMeshInstance3D_set_skin(self, skin)
}
func (self classImporterMeshInstance3D) GetSkin() Skin {
	return self.ptr.API.ImporterMeshInstance3D_get_skin(self)
}
func (self classImporterMeshInstance3D) SetSkeletonPath(skeleton_path NodePath) {
	self.ptr.API.ImporterMeshInstance3D_set_skeleton_path(self, skeleton_path)
}
func (self classImporterMeshInstance3D) GetSkeletonPath() NodePath {
	return self.ptr.API.ImporterMeshInstance3D_get_skeleton_path(self)
}
func (self classImporterMeshInstance3D) SetLayerMask(layer_mask Int) {
	self.ptr.API.ImporterMeshInstance3D_set_layer_mask(self, layer_mask)
}
func (self classImporterMeshInstance3D) GetLayerMask() Int {
	return self.ptr.API.ImporterMeshInstance3D_get_layer_mask(self)
}
func (self classImporterMeshInstance3D) SetCastShadowsSetting(shadow_casting_setting GeometryInstance3DShadowCastingSetting) {
	self.ptr.API.ImporterMeshInstance3D_set_cast_shadows_setting(self, shadow_casting_setting)
}
func (self classImporterMeshInstance3D) GetCastShadowsSetting() GeometryInstance3DShadowCastingSetting {
	return self.ptr.API.ImporterMeshInstance3D_get_cast_shadows_setting(self)
}
func (self classImporterMeshInstance3D) SetVisibilityRangeEndMargin(distance Float) {
	self.ptr.API.ImporterMeshInstance3D_set_visibility_range_end_margin(self, distance)
}
func (self classImporterMeshInstance3D) GetVisibilityRangeEndMargin() Float {
	return self.ptr.API.ImporterMeshInstance3D_get_visibility_range_end_margin(self)
}
func (self classImporterMeshInstance3D) SetVisibilityRangeEnd(distance Float) {
	self.ptr.API.ImporterMeshInstance3D_set_visibility_range_end(self, distance)
}
func (self classImporterMeshInstance3D) GetVisibilityRangeEnd() Float {
	return self.ptr.API.ImporterMeshInstance3D_get_visibility_range_end(self)
}
func (self classImporterMeshInstance3D) SetVisibilityRangeBeginMargin(distance Float) {
	self.ptr.API.ImporterMeshInstance3D_set_visibility_range_begin_margin(self, distance)
}
func (self classImporterMeshInstance3D) GetVisibilityRangeBeginMargin() Float {
	return self.ptr.API.ImporterMeshInstance3D_get_visibility_range_begin_margin(self)
}
func (self classImporterMeshInstance3D) SetVisibilityRangeBegin(distance Float) {
	self.ptr.API.ImporterMeshInstance3D_set_visibility_range_begin(self, distance)
}
func (self classImporterMeshInstance3D) GetVisibilityRangeBegin() Float {
	return self.ptr.API.ImporterMeshInstance3D_get_visibility_range_begin(self)
}
func (self classImporterMeshInstance3D) SetVisibilityRangeFadeMode(mode GeometryInstance3DVisibilityRangeFadeMode) {
	self.ptr.API.ImporterMeshInstance3D_set_visibility_range_fade_mode(self, mode)
}
func (self classImporterMeshInstance3D) GetVisibilityRangeFadeMode() GeometryInstance3DVisibilityRangeFadeMode {
	return self.ptr.API.ImporterMeshInstance3D_get_visibility_range_fade_mode(self)
}

type classInput struct{ Class[classInput] }

func (self classInput) Super() Object { var super Object; super.ptr = self.ptr; return super }

func (self classInput) Object() Object { return self.Super() }

func (self classInput) isSingleton() {}
func (self classInput) IsAnythingPressed() bool {
	return self.ptr.API.Input_is_anything_pressed(self)
}
func (self classInput) IsKeyPressed(keycode Key) bool {
	return self.ptr.API.Input_is_key_pressed(self, keycode)
}
func (self classInput) IsPhysicalKeyPressed(keycode Key) bool {
	return self.ptr.API.Input_is_physical_key_pressed(self, keycode)
}
func (self classInput) IsKeyLabelPressed(keycode Key) bool {
	return self.ptr.API.Input_is_key_label_pressed(self, keycode)
}
func (self classInput) IsMouseButtonPressed(button MouseButton) bool {
	return self.ptr.API.Input_is_mouse_button_pressed(self, button)
}
func (self classInput) IsJoyButtonPressed(device Int, button JoyButton) bool {
	return self.ptr.API.Input_is_joy_button_pressed(self, device, button)
}
func (self classInput) IsActionPressed(action StringName, exact_match bool) bool {
	return self.ptr.API.Input_is_action_pressed(self, action, exact_match)
}
func (self classInput) IsActionJustPressed(action StringName, exact_match bool) bool {
	return self.ptr.API.Input_is_action_just_pressed(self, action, exact_match)
}
func (self classInput) IsActionJustReleased(action StringName, exact_match bool) bool {
	return self.ptr.API.Input_is_action_just_released(self, action, exact_match)
}
func (self classInput) GetActionStrength(action StringName, exact_match bool) Float {
	return self.ptr.API.Input_get_action_strength(self, action, exact_match)
}
func (self classInput) GetActionRawStrength(action StringName, exact_match bool) Float {
	return self.ptr.API.Input_get_action_raw_strength(self, action, exact_match)
}
func (self classInput) GetAxis(negative_action StringName, positive_action StringName) Float {
	return self.ptr.API.Input_get_axis(self, negative_action, positive_action)
}
func (self classInput) GetVector(negative_x StringName, positive_x StringName, negative_y StringName, positive_y StringName, deadzone Float) Vector2 {
	return self.ptr.API.Input_get_vector(self, negative_x, positive_x, negative_y, positive_y, deadzone)
}
func (self classInput) AddJoyMapping(mapping String, update_existing bool) {
	self.ptr.API.Input_add_joy_mapping(self, mapping, update_existing)
}
func (self classInput) RemoveJoyMapping(guid String) {
	self.ptr.API.Input_remove_joy_mapping(self, guid)
}
func (self classInput) IsJoyKnown(device Int) bool {
	return self.ptr.API.Input_is_joy_known(self, device)
}
func (self classInput) GetJoyAxis(device Int, axis JoyAxis) Float {
	return self.ptr.API.Input_get_joy_axis(self, device, axis)
}
func (self classInput) GetJoyName(device Int) String {
	return self.ptr.API.Input_get_joy_name(self, device)
}
func (self classInput) GetJoyGuid(device Int) String {
	return self.ptr.API.Input_get_joy_guid(self, device)
}
func (self classInput) GetJoyInfo(device Int) Dictionary {
	return self.ptr.API.Input_get_joy_info(self, device)
}
func (self classInput) ShouldIgnoreDevice(vendor_id Int, product_id Int) bool {
	return self.ptr.API.Input_should_ignore_device(self, vendor_id, product_id)
}
func (self classInput) GetConnectedJoypads() ArrayOf[Int] {
	return self.ptr.API.Input_get_connected_joypads(self)
}
func (self classInput) GetJoyVibrationStrength(device Int) Vector2 {
	return self.ptr.API.Input_get_joy_vibration_strength(self, device)
}
func (self classInput) GetJoyVibrationDuration(device Int) Float {
	return self.ptr.API.Input_get_joy_vibration_duration(self, device)
}
func (self classInput) StartJoyVibration(device Int, weak_magnitude Float, strong_magnitude Float, duration Float) {
	self.ptr.API.Input_start_joy_vibration(self, device, weak_magnitude, strong_magnitude, duration)
}
func (self classInput) StopJoyVibration(device Int) {
	self.ptr.API.Input_stop_joy_vibration(self, device)
}
func (self classInput) VibrateHandheld(duration_ms Int) {
	self.ptr.API.Input_vibrate_handheld(self, duration_ms)
}
func (self classInput) GetGravity() Vector3 {
	return self.ptr.API.Input_get_gravity(self)
}
func (self classInput) GetAccelerometer() Vector3 {
	return self.ptr.API.Input_get_accelerometer(self)
}
func (self classInput) GetMagnetometer() Vector3 {
	return self.ptr.API.Input_get_magnetometer(self)
}
func (self classInput) GetGyroscope() Vector3 {
	return self.ptr.API.Input_get_gyroscope(self)
}
func (self classInput) SetGravity(value Vector3) {
	self.ptr.API.Input_set_gravity(self, value)
}
func (self classInput) SetAccelerometer(value Vector3) {
	self.ptr.API.Input_set_accelerometer(self, value)
}
func (self classInput) SetMagnetometer(value Vector3) {
	self.ptr.API.Input_set_magnetometer(self, value)
}
func (self classInput) SetGyroscope(value Vector3) {
	self.ptr.API.Input_set_gyroscope(self, value)
}
func (self classInput) GetLastMouseVelocity() Vector2 {
	return self.ptr.API.Input_get_last_mouse_velocity(self)
}
func (self classInput) GetMouseButtonMask() MouseButtonMask {
	return self.ptr.API.Input_get_mouse_button_mask(self)
}
func (self classInput) SetMouseMode(mode InputMouseMode) {
	self.ptr.API.Input_set_mouse_mode(self, mode)
}
func (self classInput) GetMouseMode() InputMouseMode {
	return self.ptr.API.Input_get_mouse_mode(self)
}
func (self classInput) WarpMouse(position Vector2) {
	self.ptr.API.Input_warp_mouse(self, position)
}
func (self classInput) ActionPress(action StringName, strength Float) {
	self.ptr.API.Input_action_press(self, action, strength)
}
func (self classInput) ActionRelease(action StringName) {
	self.ptr.API.Input_action_release(self, action)
}
func (self classInput) SetDefaultCursorShape(shape InputCursorShape) {
	self.ptr.API.Input_set_default_cursor_shape(self, shape)
}
func (self classInput) GetCurrentCursorShape() InputCursorShape {
	return self.ptr.API.Input_get_current_cursor_shape(self)
}
func (self classInput) SetCustomMouseCursor(image Resource, shape InputCursorShape, hotspot Vector2) {
	self.ptr.API.Input_set_custom_mouse_cursor(self, image, shape, hotspot)
}
func (self classInput) ParseInputEvent(event InputEvent) {
	self.ptr.API.Input_parse_input_event(self, event)
}
func (self classInput) SetUseAccumulatedInput(enable bool) {
	self.ptr.API.Input_set_use_accumulated_input(self, enable)
}
func (self classInput) IsUsingAccumulatedInput() bool {
	return self.ptr.API.Input_is_using_accumulated_input(self)
}
func (self classInput) FlushBufferedEvents() {
	self.ptr.API.Input_flush_buffered_events(self)
}
func (self classInput) SetEmulateMouseFromTouch(enable bool) {
	self.ptr.API.Input_set_emulate_mouse_from_touch(self, enable)
}
func (self classInput) IsEmulatingMouseFromTouch() bool {
	return self.ptr.API.Input_is_emulating_mouse_from_touch(self)
}
func (self classInput) SetEmulateTouchFromMouse(enable bool) {
	self.ptr.API.Input_set_emulate_touch_from_mouse(self, enable)
}
func (self classInput) IsEmulatingTouchFromMouse() bool {
	return self.ptr.API.Input_is_emulating_touch_from_mouse(self)
}

type classInputEvent struct{ Class[classInputEvent] }

func (self classInputEvent) Super() Resource { var super Resource; super.ptr = self.ptr; return super }

func (self classInputEvent) Resource() Resource { return self.Super() }
func (self classInputEvent) SetDevice(device Int) {
	self.ptr.API.InputEvent_set_device(self, device)
}
func (self classInputEvent) GetDevice() Int {
	return self.ptr.API.InputEvent_get_device(self)
}
func (self classInputEvent) IsAction(action StringName, exact_match bool) bool {
	return self.ptr.API.InputEvent_is_action(self, action, exact_match)
}
func (self classInputEvent) IsActionPressed(action StringName, allow_echo bool, exact_match bool) bool {
	return self.ptr.API.InputEvent_is_action_pressed(self, action, allow_echo, exact_match)
}
func (self classInputEvent) IsActionReleased(action StringName, exact_match bool) bool {
	return self.ptr.API.InputEvent_is_action_released(self, action, exact_match)
}
func (self classInputEvent) GetActionStrength(action StringName, exact_match bool) Float {
	return self.ptr.API.InputEvent_get_action_strength(self, action, exact_match)
}
func (self classInputEvent) IsCanceled() bool {
	return self.ptr.API.InputEvent_is_canceled(self)
}
func (self classInputEvent) IsPressed() bool {
	return self.ptr.API.InputEvent_is_pressed(self)
}
func (self classInputEvent) IsReleased() bool {
	return self.ptr.API.InputEvent_is_released(self)
}
func (self classInputEvent) IsEcho() bool {
	return self.ptr.API.InputEvent_is_echo(self)
}
func (self classInputEvent) AsText() String {
	return self.ptr.API.InputEvent_as_text(self)
}
func (self classInputEvent) IsMatch(event InputEvent, exact_match bool) bool {
	return self.ptr.API.InputEvent_is_match(self, event, exact_match)
}
func (self classInputEvent) IsActionType() bool {
	return self.ptr.API.InputEvent_is_action_type(self)
}
func (self classInputEvent) Accumulate(with_event InputEvent) bool {
	return self.ptr.API.InputEvent_accumulate(self, with_event)
}
func (self classInputEvent) XformedBy(xform Transform2D, local_ofs Vector2) InputEvent {
	return self.ptr.API.InputEvent_xformed_by(self, xform, local_ofs)
}

type classInputEventAction struct{ Class[classInputEventAction] }

func (self classInputEventAction) Super() InputEvent {
	var super InputEvent
	super.ptr = self.ptr
	return super
}

func (self classInputEventAction) InputEvent() InputEvent { return self.Super() }
func (self classInputEventAction) SetAction(action StringName) {
	self.ptr.API.InputEventAction_set_action(self, action)
}
func (self classInputEventAction) GetAction() StringName {
	return self.ptr.API.InputEventAction_get_action(self)
}
func (self classInputEventAction) SetPressed(pressed bool) {
	self.ptr.API.InputEventAction_set_pressed(self, pressed)
}
func (self classInputEventAction) SetStrength(strength Float) {
	self.ptr.API.InputEventAction_set_strength(self, strength)
}
func (self classInputEventAction) GetStrength() Float {
	return self.ptr.API.InputEventAction_get_strength(self)
}

type classInputEventFromWindow struct {
	Class[classInputEventFromWindow]
}

func (self classInputEventFromWindow) Super() InputEvent {
	var super InputEvent
	super.ptr = self.ptr
	return super
}

func (self classInputEventFromWindow) InputEvent() InputEvent { return self.Super() }
func (self classInputEventFromWindow) SetWindowId(id Int) {
	self.ptr.API.InputEventFromWindow_set_window_id(self, id)
}
func (self classInputEventFromWindow) GetWindowId() Int {
	return self.ptr.API.InputEventFromWindow_get_window_id(self)
}

type classInputEventGesture struct{ Class[classInputEventGesture] }

func (self classInputEventGesture) Super() InputEventWithModifiers {
	var super InputEventWithModifiers
	super.ptr = self.ptr
	return super
}

func (self classInputEventGesture) InputEventWithModifiers() InputEventWithModifiers {
	return self.Super()
}
func (self classInputEventGesture) SetPosition(position Vector2) {
	self.ptr.API.InputEventGesture_set_position(self, position)
}
func (self classInputEventGesture) GetPosition() Vector2 {
	return self.ptr.API.InputEventGesture_get_position(self)
}

type classInputEventJoypadButton struct {
	Class[classInputEventJoypadButton]
}

func (self classInputEventJoypadButton) Super() InputEvent {
	var super InputEvent
	super.ptr = self.ptr
	return super
}

func (self classInputEventJoypadButton) InputEvent() InputEvent { return self.Super() }
func (self classInputEventJoypadButton) SetButtonIndex(button_index JoyButton) {
	self.ptr.API.InputEventJoypadButton_set_button_index(self, button_index)
}
func (self classInputEventJoypadButton) GetButtonIndex() JoyButton {
	return self.ptr.API.InputEventJoypadButton_get_button_index(self)
}
func (self classInputEventJoypadButton) SetPressure(pressure Float) {
	self.ptr.API.InputEventJoypadButton_set_pressure(self, pressure)
}
func (self classInputEventJoypadButton) GetPressure() Float {
	return self.ptr.API.InputEventJoypadButton_get_pressure(self)
}
func (self classInputEventJoypadButton) SetPressed(pressed bool) {
	self.ptr.API.InputEventJoypadButton_set_pressed(self, pressed)
}

type classInputEventJoypadMotion struct {
	Class[classInputEventJoypadMotion]
}

func (self classInputEventJoypadMotion) Super() InputEvent {
	var super InputEvent
	super.ptr = self.ptr
	return super
}

func (self classInputEventJoypadMotion) InputEvent() InputEvent { return self.Super() }
func (self classInputEventJoypadMotion) SetAxis(axis JoyAxis) {
	self.ptr.API.InputEventJoypadMotion_set_axis(self, axis)
}
func (self classInputEventJoypadMotion) GetAxis() JoyAxis {
	return self.ptr.API.InputEventJoypadMotion_get_axis(self)
}
func (self classInputEventJoypadMotion) SetAxisValue(axis_value Float) {
	self.ptr.API.InputEventJoypadMotion_set_axis_value(self, axis_value)
}
func (self classInputEventJoypadMotion) GetAxisValue() Float {
	return self.ptr.API.InputEventJoypadMotion_get_axis_value(self)
}

type classInputEventKey struct{ Class[classInputEventKey] }

func (self classInputEventKey) Super() InputEventWithModifiers {
	var super InputEventWithModifiers
	super.ptr = self.ptr
	return super
}

func (self classInputEventKey) InputEventWithModifiers() InputEventWithModifiers { return self.Super() }
func (self classInputEventKey) SetPressed(pressed bool) {
	self.ptr.API.InputEventKey_set_pressed(self, pressed)
}
func (self classInputEventKey) SetKeycode(keycode Key) {
	self.ptr.API.InputEventKey_set_keycode(self, keycode)
}
func (self classInputEventKey) GetKeycode() Key {
	return self.ptr.API.InputEventKey_get_keycode(self)
}
func (self classInputEventKey) SetPhysicalKeycode(physical_keycode Key) {
	self.ptr.API.InputEventKey_set_physical_keycode(self, physical_keycode)
}
func (self classInputEventKey) GetPhysicalKeycode() Key {
	return self.ptr.API.InputEventKey_get_physical_keycode(self)
}
func (self classInputEventKey) SetKeyLabel(key_label Key) {
	self.ptr.API.InputEventKey_set_key_label(self, key_label)
}
func (self classInputEventKey) GetKeyLabel() Key {
	return self.ptr.API.InputEventKey_get_key_label(self)
}
func (self classInputEventKey) SetUnicode(unicode Int) {
	self.ptr.API.InputEventKey_set_unicode(self, unicode)
}
func (self classInputEventKey) GetUnicode() Int {
	return self.ptr.API.InputEventKey_get_unicode(self)
}
func (self classInputEventKey) SetEcho(echo bool) {
	self.ptr.API.InputEventKey_set_echo(self, echo)
}
func (self classInputEventKey) GetKeycodeWithModifiers() Key {
	return self.ptr.API.InputEventKey_get_keycode_with_modifiers(self)
}
func (self classInputEventKey) GetPhysicalKeycodeWithModifiers() Key {
	return self.ptr.API.InputEventKey_get_physical_keycode_with_modifiers(self)
}
func (self classInputEventKey) GetKeyLabelWithModifiers() Key {
	return self.ptr.API.InputEventKey_get_key_label_with_modifiers(self)
}
func (self classInputEventKey) AsTextKeycode() String {
	return self.ptr.API.InputEventKey_as_text_keycode(self)
}
func (self classInputEventKey) AsTextPhysicalKeycode() String {
	return self.ptr.API.InputEventKey_as_text_physical_keycode(self)
}
func (self classInputEventKey) AsTextKeyLabel() String {
	return self.ptr.API.InputEventKey_as_text_key_label(self)
}

type classInputEventMIDI struct{ Class[classInputEventMIDI] }

func (self classInputEventMIDI) Super() InputEvent {
	var super InputEvent
	super.ptr = self.ptr
	return super
}

func (self classInputEventMIDI) InputEvent() InputEvent { return self.Super() }
func (self classInputEventMIDI) SetChannel(channel Int) {
	self.ptr.API.InputEventMIDI_set_channel(self, channel)
}
func (self classInputEventMIDI) GetChannel() Int {
	return self.ptr.API.InputEventMIDI_get_channel(self)
}
func (self classInputEventMIDI) SetMessage(message MIDIMessage) {
	self.ptr.API.InputEventMIDI_set_message(self, message)
}
func (self classInputEventMIDI) GetMessage() MIDIMessage {
	return self.ptr.API.InputEventMIDI_get_message(self)
}
func (self classInputEventMIDI) SetPitch(pitch Int) {
	self.ptr.API.InputEventMIDI_set_pitch(self, pitch)
}
func (self classInputEventMIDI) GetPitch() Int {
	return self.ptr.API.InputEventMIDI_get_pitch(self)
}
func (self classInputEventMIDI) SetVelocity(velocity Int) {
	self.ptr.API.InputEventMIDI_set_velocity(self, velocity)
}
func (self classInputEventMIDI) GetVelocity() Int {
	return self.ptr.API.InputEventMIDI_get_velocity(self)
}
func (self classInputEventMIDI) SetInstrument(instrument Int) {
	self.ptr.API.InputEventMIDI_set_instrument(self, instrument)
}
func (self classInputEventMIDI) GetInstrument() Int {
	return self.ptr.API.InputEventMIDI_get_instrument(self)
}
func (self classInputEventMIDI) SetPressure(pressure Int) {
	self.ptr.API.InputEventMIDI_set_pressure(self, pressure)
}
func (self classInputEventMIDI) GetPressure() Int {
	return self.ptr.API.InputEventMIDI_get_pressure(self)
}
func (self classInputEventMIDI) SetControllerNumber(controller_number Int) {
	self.ptr.API.InputEventMIDI_set_controller_number(self, controller_number)
}
func (self classInputEventMIDI) GetControllerNumber() Int {
	return self.ptr.API.InputEventMIDI_get_controller_number(self)
}
func (self classInputEventMIDI) SetControllerValue(controller_value Int) {
	self.ptr.API.InputEventMIDI_set_controller_value(self, controller_value)
}
func (self classInputEventMIDI) GetControllerValue() Int {
	return self.ptr.API.InputEventMIDI_get_controller_value(self)
}

type classInputEventMagnifyGesture struct {
	Class[classInputEventMagnifyGesture]
}

func (self classInputEventMagnifyGesture) Super() InputEventGesture {
	var super InputEventGesture
	super.ptr = self.ptr
	return super
}

func (self classInputEventMagnifyGesture) InputEventGesture() InputEventGesture { return self.Super() }
func (self classInputEventMagnifyGesture) SetFactor(factor Float) {
	self.ptr.API.InputEventMagnifyGesture_set_factor(self, factor)
}
func (self classInputEventMagnifyGesture) GetFactor() Float {
	return self.ptr.API.InputEventMagnifyGesture_get_factor(self)
}

type classInputEventMouse struct{ Class[classInputEventMouse] }

func (self classInputEventMouse) Super() InputEventWithModifiers {
	var super InputEventWithModifiers
	super.ptr = self.ptr
	return super
}

func (self classInputEventMouse) InputEventWithModifiers() InputEventWithModifiers {
	return self.Super()
}
func (self classInputEventMouse) SetButtonMask(button_mask MouseButtonMask) {
	self.ptr.API.InputEventMouse_set_button_mask(self, button_mask)
}
func (self classInputEventMouse) GetButtonMask() MouseButtonMask {
	return self.ptr.API.InputEventMouse_get_button_mask(self)
}
func (self classInputEventMouse) SetPosition(position Vector2) {
	self.ptr.API.InputEventMouse_set_position(self, position)
}
func (self classInputEventMouse) GetPosition() Vector2 {
	return self.ptr.API.InputEventMouse_get_position(self)
}
func (self classInputEventMouse) SetGlobalPosition(global_position Vector2) {
	self.ptr.API.InputEventMouse_set_global_position(self, global_position)
}
func (self classInputEventMouse) GetGlobalPosition() Vector2 {
	return self.ptr.API.InputEventMouse_get_global_position(self)
}

type classInputEventMouseButton struct {
	Class[classInputEventMouseButton]
}

func (self classInputEventMouseButton) Super() InputEventMouse {
	var super InputEventMouse
	super.ptr = self.ptr
	return super
}

func (self classInputEventMouseButton) InputEventMouse() InputEventMouse { return self.Super() }
func (self classInputEventMouseButton) SetFactor(factor Float) {
	self.ptr.API.InputEventMouseButton_set_factor(self, factor)
}
func (self classInputEventMouseButton) GetFactor() Float {
	return self.ptr.API.InputEventMouseButton_get_factor(self)
}
func (self classInputEventMouseButton) SetButtonIndex(button_index MouseButton) {
	self.ptr.API.InputEventMouseButton_set_button_index(self, button_index)
}
func (self classInputEventMouseButton) GetButtonIndex() MouseButton {
	return self.ptr.API.InputEventMouseButton_get_button_index(self)
}
func (self classInputEventMouseButton) SetPressed(pressed bool) {
	self.ptr.API.InputEventMouseButton_set_pressed(self, pressed)
}
func (self classInputEventMouseButton) SetCanceled(canceled bool) {
	self.ptr.API.InputEventMouseButton_set_canceled(self, canceled)
}
func (self classInputEventMouseButton) SetDoubleClick(double_click bool) {
	self.ptr.API.InputEventMouseButton_set_double_click(self, double_click)
}
func (self classInputEventMouseButton) IsDoubleClick() bool {
	return self.ptr.API.InputEventMouseButton_is_double_click(self)
}

type classInputEventMouseMotion struct {
	Class[classInputEventMouseMotion]
}

func (self classInputEventMouseMotion) Super() InputEventMouse {
	var super InputEventMouse
	super.ptr = self.ptr
	return super
}

func (self classInputEventMouseMotion) InputEventMouse() InputEventMouse { return self.Super() }
func (self classInputEventMouseMotion) SetTilt(tilt Vector2) {
	self.ptr.API.InputEventMouseMotion_set_tilt(self, tilt)
}
func (self classInputEventMouseMotion) GetTilt() Vector2 {
	return self.ptr.API.InputEventMouseMotion_get_tilt(self)
}
func (self classInputEventMouseMotion) SetPressure(pressure Float) {
	self.ptr.API.InputEventMouseMotion_set_pressure(self, pressure)
}
func (self classInputEventMouseMotion) GetPressure() Float {
	return self.ptr.API.InputEventMouseMotion_get_pressure(self)
}
func (self classInputEventMouseMotion) SetPenInverted(pen_inverted bool) {
	self.ptr.API.InputEventMouseMotion_set_pen_inverted(self, pen_inverted)
}
func (self classInputEventMouseMotion) GetPenInverted() bool {
	return self.ptr.API.InputEventMouseMotion_get_pen_inverted(self)
}
func (self classInputEventMouseMotion) SetRelative(relative Vector2) {
	self.ptr.API.InputEventMouseMotion_set_relative(self, relative)
}
func (self classInputEventMouseMotion) GetRelative() Vector2 {
	return self.ptr.API.InputEventMouseMotion_get_relative(self)
}
func (self classInputEventMouseMotion) SetVelocity(velocity Vector2) {
	self.ptr.API.InputEventMouseMotion_set_velocity(self, velocity)
}
func (self classInputEventMouseMotion) GetVelocity() Vector2 {
	return self.ptr.API.InputEventMouseMotion_get_velocity(self)
}

type classInputEventPanGesture struct {
	Class[classInputEventPanGesture]
}

func (self classInputEventPanGesture) Super() InputEventGesture {
	var super InputEventGesture
	super.ptr = self.ptr
	return super
}

func (self classInputEventPanGesture) InputEventGesture() InputEventGesture { return self.Super() }
func (self classInputEventPanGesture) SetDelta(delta Vector2) {
	self.ptr.API.InputEventPanGesture_set_delta(self, delta)
}
func (self classInputEventPanGesture) GetDelta() Vector2 {
	return self.ptr.API.InputEventPanGesture_get_delta(self)
}

type classInputEventScreenDrag struct {
	Class[classInputEventScreenDrag]
}

func (self classInputEventScreenDrag) Super() InputEventFromWindow {
	var super InputEventFromWindow
	super.ptr = self.ptr
	return super
}

func (self classInputEventScreenDrag) InputEventFromWindow() InputEventFromWindow {
	return self.Super()
}
func (self classInputEventScreenDrag) SetIndex(index Int) {
	self.ptr.API.InputEventScreenDrag_set_index(self, index)
}
func (self classInputEventScreenDrag) GetIndex() Int {
	return self.ptr.API.InputEventScreenDrag_get_index(self)
}
func (self classInputEventScreenDrag) SetTilt(tilt Vector2) {
	self.ptr.API.InputEventScreenDrag_set_tilt(self, tilt)
}
func (self classInputEventScreenDrag) GetTilt() Vector2 {
	return self.ptr.API.InputEventScreenDrag_get_tilt(self)
}
func (self classInputEventScreenDrag) SetPressure(pressure Float) {
	self.ptr.API.InputEventScreenDrag_set_pressure(self, pressure)
}
func (self classInputEventScreenDrag) GetPressure() Float {
	return self.ptr.API.InputEventScreenDrag_get_pressure(self)
}
func (self classInputEventScreenDrag) SetPenInverted(pen_inverted bool) {
	self.ptr.API.InputEventScreenDrag_set_pen_inverted(self, pen_inverted)
}
func (self classInputEventScreenDrag) GetPenInverted() bool {
	return self.ptr.API.InputEventScreenDrag_get_pen_inverted(self)
}
func (self classInputEventScreenDrag) SetPosition(position Vector2) {
	self.ptr.API.InputEventScreenDrag_set_position(self, position)
}
func (self classInputEventScreenDrag) GetPosition() Vector2 {
	return self.ptr.API.InputEventScreenDrag_get_position(self)
}
func (self classInputEventScreenDrag) SetRelative(relative Vector2) {
	self.ptr.API.InputEventScreenDrag_set_relative(self, relative)
}
func (self classInputEventScreenDrag) GetRelative() Vector2 {
	return self.ptr.API.InputEventScreenDrag_get_relative(self)
}
func (self classInputEventScreenDrag) SetVelocity(velocity Vector2) {
	self.ptr.API.InputEventScreenDrag_set_velocity(self, velocity)
}
func (self classInputEventScreenDrag) GetVelocity() Vector2 {
	return self.ptr.API.InputEventScreenDrag_get_velocity(self)
}

type classInputEventScreenTouch struct {
	Class[classInputEventScreenTouch]
}

func (self classInputEventScreenTouch) Super() InputEventFromWindow {
	var super InputEventFromWindow
	super.ptr = self.ptr
	return super
}

func (self classInputEventScreenTouch) InputEventFromWindow() InputEventFromWindow {
	return self.Super()
}
func (self classInputEventScreenTouch) SetIndex(index Int) {
	self.ptr.API.InputEventScreenTouch_set_index(self, index)
}
func (self classInputEventScreenTouch) GetIndex() Int {
	return self.ptr.API.InputEventScreenTouch_get_index(self)
}
func (self classInputEventScreenTouch) SetPosition(position Vector2) {
	self.ptr.API.InputEventScreenTouch_set_position(self, position)
}
func (self classInputEventScreenTouch) GetPosition() Vector2 {
	return self.ptr.API.InputEventScreenTouch_get_position(self)
}
func (self classInputEventScreenTouch) SetPressed(pressed bool) {
	self.ptr.API.InputEventScreenTouch_set_pressed(self, pressed)
}
func (self classInputEventScreenTouch) SetCanceled(canceled bool) {
	self.ptr.API.InputEventScreenTouch_set_canceled(self, canceled)
}
func (self classInputEventScreenTouch) SetDoubleTap(double_tap bool) {
	self.ptr.API.InputEventScreenTouch_set_double_tap(self, double_tap)
}
func (self classInputEventScreenTouch) IsDoubleTap() bool {
	return self.ptr.API.InputEventScreenTouch_is_double_tap(self)
}

type classInputEventShortcut struct{ Class[classInputEventShortcut] }

func (self classInputEventShortcut) Super() InputEvent {
	var super InputEvent
	super.ptr = self.ptr
	return super
}

func (self classInputEventShortcut) InputEvent() InputEvent { return self.Super() }
func (self classInputEventShortcut) SetShortcut(shortcut Shortcut) {
	self.ptr.API.InputEventShortcut_set_shortcut(self, shortcut)
}
func (self classInputEventShortcut) GetShortcut() Shortcut {
	return self.ptr.API.InputEventShortcut_get_shortcut(self)
}

type classInputEventWithModifiers struct {
	Class[classInputEventWithModifiers]
}

func (self classInputEventWithModifiers) Super() InputEventFromWindow {
	var super InputEventFromWindow
	super.ptr = self.ptr
	return super
}

func (self classInputEventWithModifiers) InputEventFromWindow() InputEventFromWindow {
	return self.Super()
}
func (self classInputEventWithModifiers) SetCommandOrControlAutoremap(enable bool) {
	self.ptr.API.InputEventWithModifiers_set_command_or_control_autoremap(self, enable)
}
func (self classInputEventWithModifiers) IsCommandOrControlAutoremap() bool {
	return self.ptr.API.InputEventWithModifiers_is_command_or_control_autoremap(self)
}
func (self classInputEventWithModifiers) IsCommandOrControlPressed() bool {
	return self.ptr.API.InputEventWithModifiers_is_command_or_control_pressed(self)
}
func (self classInputEventWithModifiers) SetAltPressed(pressed bool) {
	self.ptr.API.InputEventWithModifiers_set_alt_pressed(self, pressed)
}
func (self classInputEventWithModifiers) IsAltPressed() bool {
	return self.ptr.API.InputEventWithModifiers_is_alt_pressed(self)
}
func (self classInputEventWithModifiers) SetShiftPressed(pressed bool) {
	self.ptr.API.InputEventWithModifiers_set_shift_pressed(self, pressed)
}
func (self classInputEventWithModifiers) IsShiftPressed() bool {
	return self.ptr.API.InputEventWithModifiers_is_shift_pressed(self)
}
func (self classInputEventWithModifiers) SetCtrlPressed(pressed bool) {
	self.ptr.API.InputEventWithModifiers_set_ctrl_pressed(self, pressed)
}
func (self classInputEventWithModifiers) IsCtrlPressed() bool {
	return self.ptr.API.InputEventWithModifiers_is_ctrl_pressed(self)
}
func (self classInputEventWithModifiers) SetMetaPressed(pressed bool) {
	self.ptr.API.InputEventWithModifiers_set_meta_pressed(self, pressed)
}
func (self classInputEventWithModifiers) IsMetaPressed() bool {
	return self.ptr.API.InputEventWithModifiers_is_meta_pressed(self)
}
func (self classInputEventWithModifiers) GetModifiersMask() KeyModifierMask {
	return self.ptr.API.InputEventWithModifiers_get_modifiers_mask(self)
}

type classInputMap struct{ Class[classInputMap] }

func (self classInputMap) Super() Object { var super Object; super.ptr = self.ptr; return super }

func (self classInputMap) Object() Object { return self.Super() }

func (self classInputMap) isSingleton() {}
func (self classInputMap) HasAction(action StringName) bool {
	return self.ptr.API.InputMap_has_action(self, action)
}
func (self classInputMap) GetActions() ArrayOf[StringName] {
	return self.ptr.API.InputMap_get_actions(self)
}
func (self classInputMap) AddAction(action StringName, deadzone Float) {
	self.ptr.API.InputMap_add_action(self, action, deadzone)
}
func (self classInputMap) EraseAction(action StringName) {
	self.ptr.API.InputMap_erase_action(self, action)
}
func (self classInputMap) ActionSetDeadzone(action StringName, deadzone Float) {
	self.ptr.API.InputMap_action_set_deadzone(self, action, deadzone)
}
func (self classInputMap) ActionGetDeadzone(action StringName) Float {
	return self.ptr.API.InputMap_action_get_deadzone(self, action)
}
func (self classInputMap) ActionAddEvent(action StringName, event InputEvent) {
	self.ptr.API.InputMap_action_add_event(self, action, event)
}
func (self classInputMap) ActionHasEvent(action StringName, event InputEvent) bool {
	return self.ptr.API.InputMap_action_has_event(self, action, event)
}
func (self classInputMap) ActionEraseEvent(action StringName, event InputEvent) {
	self.ptr.API.InputMap_action_erase_event(self, action, event)
}
func (self classInputMap) ActionEraseEvents(action StringName) {
	self.ptr.API.InputMap_action_erase_events(self, action)
}
func (self classInputMap) ActionGetEvents(action StringName) ArrayOf[InputEvent] {
	return self.ptr.API.InputMap_action_get_events(self, action)
}
func (self classInputMap) EventIsAction(event InputEvent, action StringName, exact_match bool) bool {
	return self.ptr.API.InputMap_event_is_action(self, event, action, exact_match)
}
func (self classInputMap) LoadFromProjectSettings() {
	self.ptr.API.InputMap_load_from_project_settings(self)
}

type classInstancePlaceholder struct {
	Class[classInstancePlaceholder]
}

func (self classInstancePlaceholder) Super() Node { var super Node; super.ptr = self.ptr; return super }

func (self classInstancePlaceholder) Node() Node { return self.Super() }
func (self classInstancePlaceholder) GetStoredValues(with_order bool) Dictionary {
	return self.ptr.API.InstancePlaceholder_get_stored_values(self, with_order)
}
func (self classInstancePlaceholder) CreateInstance(replace bool, custom_scene PackedScene) Node {
	return self.ptr.API.InstancePlaceholder_create_instance(self, replace, custom_scene)
}
func (self classInstancePlaceholder) GetInstancePath() String {
	return self.ptr.API.InstancePlaceholder_get_instance_path(self)
}

type classIntervalTweener struct{ Class[classIntervalTweener] }

func (self classIntervalTweener) Super() Tweener {
	var super Tweener
	super.ptr = self.ptr
	return super
}

func (self classIntervalTweener) Tweener() Tweener { return self.Super() }

type classItemList struct{ Class[classItemList] }

func (self classItemList) Super() Control { var super Control; super.ptr = self.ptr; return super }

func (self classItemList) Control() Control { return self.Super() }
func (self classItemList) AddItem(text String, icon Texture2D, selectable bool) Int {
	return self.ptr.API.ItemList_add_item(self, text, icon, selectable)
}
func (self classItemList) AddIconItem(icon Texture2D, selectable bool) Int {
	return self.ptr.API.ItemList_add_icon_item(self, icon, selectable)
}
func (self classItemList) SetItemText(idx Int, text String) {
	self.ptr.API.ItemList_set_item_text(self, idx, text)
}
func (self classItemList) GetItemText(idx Int) String {
	return self.ptr.API.ItemList_get_item_text(self, idx)
}
func (self classItemList) SetItemIcon(idx Int, icon Texture2D) {
	self.ptr.API.ItemList_set_item_icon(self, idx, icon)
}
func (self classItemList) GetItemIcon(idx Int) Texture2D {
	return self.ptr.API.ItemList_get_item_icon(self, idx)
}
func (self classItemList) SetItemTextDirection(idx Int, direction ControlTextDirection) {
	self.ptr.API.ItemList_set_item_text_direction(self, idx, direction)
}
func (self classItemList) GetItemTextDirection(idx Int) ControlTextDirection {
	return self.ptr.API.ItemList_get_item_text_direction(self, idx)
}
func (self classItemList) SetItemLanguage(idx Int, language String) {
	self.ptr.API.ItemList_set_item_language(self, idx, language)
}
func (self classItemList) GetItemLanguage(idx Int) String {
	return self.ptr.API.ItemList_get_item_language(self, idx)
}
func (self classItemList) SetItemIconTransposed(idx Int, transposed bool) {
	self.ptr.API.ItemList_set_item_icon_transposed(self, idx, transposed)
}
func (self classItemList) IsItemIconTransposed(idx Int) bool {
	return self.ptr.API.ItemList_is_item_icon_transposed(self, idx)
}
func (self classItemList) SetItemIconRegion(idx Int, rect Rect2) {
	self.ptr.API.ItemList_set_item_icon_region(self, idx, rect)
}
func (self classItemList) GetItemIconRegion(idx Int) Rect2 {
	return self.ptr.API.ItemList_get_item_icon_region(self, idx)
}
func (self classItemList) SetItemIconModulate(idx Int, modulate Color) {
	self.ptr.API.ItemList_set_item_icon_modulate(self, idx, modulate)
}
func (self classItemList) GetItemIconModulate(idx Int) Color {
	return self.ptr.API.ItemList_get_item_icon_modulate(self, idx)
}
func (self classItemList) SetItemSelectable(idx Int, selectable bool) {
	self.ptr.API.ItemList_set_item_selectable(self, idx, selectable)
}
func (self classItemList) IsItemSelectable(idx Int) bool {
	return self.ptr.API.ItemList_is_item_selectable(self, idx)
}
func (self classItemList) SetItemDisabled(idx Int, disabled bool) {
	self.ptr.API.ItemList_set_item_disabled(self, idx, disabled)
}
func (self classItemList) IsItemDisabled(idx Int) bool {
	return self.ptr.API.ItemList_is_item_disabled(self, idx)
}
func (self classItemList) SetItemMetadata(idx Int, metadata Variant) {
	self.ptr.API.ItemList_set_item_metadata(self, idx, metadata)
}
func (self classItemList) GetItemMetadata(idx Int) Variant {
	return self.ptr.API.ItemList_get_item_metadata(self, idx)
}
func (self classItemList) SetItemCustomBgColor(idx Int, custom_bg_color Color) {
	self.ptr.API.ItemList_set_item_custom_bg_color(self, idx, custom_bg_color)
}
func (self classItemList) GetItemCustomBgColor(idx Int) Color {
	return self.ptr.API.ItemList_get_item_custom_bg_color(self, idx)
}
func (self classItemList) SetItemCustomFgColor(idx Int, custom_fg_color Color) {
	self.ptr.API.ItemList_set_item_custom_fg_color(self, idx, custom_fg_color)
}
func (self classItemList) GetItemCustomFgColor(idx Int) Color {
	return self.ptr.API.ItemList_get_item_custom_fg_color(self, idx)
}
func (self classItemList) GetItemRect(idx Int, expand bool) Rect2 {
	return self.ptr.API.ItemList_get_item_rect(self, idx, expand)
}
func (self classItemList) SetItemTooltipEnabled(idx Int, enable bool) {
	self.ptr.API.ItemList_set_item_tooltip_enabled(self, idx, enable)
}
func (self classItemList) IsItemTooltipEnabled(idx Int) bool {
	return self.ptr.API.ItemList_is_item_tooltip_enabled(self, idx)
}
func (self classItemList) SetItemTooltip(idx Int, tooltip String) {
	self.ptr.API.ItemList_set_item_tooltip(self, idx, tooltip)
}
func (self classItemList) GetItemTooltip(idx Int) String {
	return self.ptr.API.ItemList_get_item_tooltip(self, idx)
}
func (self classItemList) Select(idx Int, single bool) {
	self.ptr.API.ItemList_select(self, idx, single)
}
func (self classItemList) Deselect(idx Int) {
	self.ptr.API.ItemList_deselect(self, idx)
}
func (self classItemList) DeselectAll() {
	self.ptr.API.ItemList_deselect_all(self)
}
func (self classItemList) IsSelected(idx Int) bool {
	return self.ptr.API.ItemList_is_selected(self, idx)
}
func (self classItemList) GetSelectedItems() PackedInt32Array {
	return self.ptr.API.ItemList_get_selected_items(self)
}
func (self classItemList) MoveItem(from_idx Int, to_idx Int) {
	self.ptr.API.ItemList_move_item(self, from_idx, to_idx)
}
func (self classItemList) SetItemCount(count Int) {
	self.ptr.API.ItemList_set_item_count(self, count)
}
func (self classItemList) GetItemCount() Int {
	return self.ptr.API.ItemList_get_item_count(self)
}
func (self classItemList) RemoveItem(idx Int) {
	self.ptr.API.ItemList_remove_item(self, idx)
}
func (self classItemList) Clear() {
	self.ptr.API.ItemList_clear(self)
}
func (self classItemList) SortItemsByText() {
	self.ptr.API.ItemList_sort_items_by_text(self)
}
func (self classItemList) SetFixedColumnWidth(width Int) {
	self.ptr.API.ItemList_set_fixed_column_width(self, width)
}
func (self classItemList) GetFixedColumnWidth() Int {
	return self.ptr.API.ItemList_get_fixed_column_width(self)
}
func (self classItemList) SetSameColumnWidth(enable bool) {
	self.ptr.API.ItemList_set_same_column_width(self, enable)
}
func (self classItemList) IsSameColumnWidth() bool {
	return self.ptr.API.ItemList_is_same_column_width(self)
}
func (self classItemList) SetMaxTextLines(lines Int) {
	self.ptr.API.ItemList_set_max_text_lines(self, lines)
}
func (self classItemList) GetMaxTextLines() Int {
	return self.ptr.API.ItemList_get_max_text_lines(self)
}
func (self classItemList) SetMaxColumns(amount Int) {
	self.ptr.API.ItemList_set_max_columns(self, amount)
}
func (self classItemList) GetMaxColumns() Int {
	return self.ptr.API.ItemList_get_max_columns(self)
}
func (self classItemList) SetSelectMode(mode ItemListSelectMode) {
	self.ptr.API.ItemList_set_select_mode(self, mode)
}
func (self classItemList) GetSelectMode() ItemListSelectMode {
	return self.ptr.API.ItemList_get_select_mode(self)
}
func (self classItemList) SetIconMode(mode ItemListIconMode) {
	self.ptr.API.ItemList_set_icon_mode(self, mode)
}
func (self classItemList) GetIconMode() ItemListIconMode {
	return self.ptr.API.ItemList_get_icon_mode(self)
}
func (self classItemList) SetFixedIconSize(size Vector2i) {
	self.ptr.API.ItemList_set_fixed_icon_size(self, size)
}
func (self classItemList) GetFixedIconSize() Vector2i {
	return self.ptr.API.ItemList_get_fixed_icon_size(self)
}
func (self classItemList) SetIconScale(scale Float) {
	self.ptr.API.ItemList_set_icon_scale(self, scale)
}
func (self classItemList) GetIconScale() Float {
	return self.ptr.API.ItemList_get_icon_scale(self)
}
func (self classItemList) SetAllowRmbSelect(allow bool) {
	self.ptr.API.ItemList_set_allow_rmb_select(self, allow)
}
func (self classItemList) GetAllowRmbSelect() bool {
	return self.ptr.API.ItemList_get_allow_rmb_select(self)
}
func (self classItemList) SetAllowReselect(allow bool) {
	self.ptr.API.ItemList_set_allow_reselect(self, allow)
}
func (self classItemList) GetAllowReselect() bool {
	return self.ptr.API.ItemList_get_allow_reselect(self)
}
func (self classItemList) SetAllowSearch(allow bool) {
	self.ptr.API.ItemList_set_allow_search(self, allow)
}
func (self classItemList) GetAllowSearch() bool {
	return self.ptr.API.ItemList_get_allow_search(self)
}
func (self classItemList) SetAutoHeight(enable bool) {
	self.ptr.API.ItemList_set_auto_height(self, enable)
}
func (self classItemList) HasAutoHeight() bool {
	return self.ptr.API.ItemList_has_auto_height(self)
}
func (self classItemList) IsAnythingSelected() bool {
	return self.ptr.API.ItemList_is_anything_selected(self)
}
func (self classItemList) GetItemAtPosition(position Vector2, exact bool) Int {
	return self.ptr.API.ItemList_get_item_at_position(self, position, exact)
}
func (self classItemList) EnsureCurrentIsVisible() {
	self.ptr.API.ItemList_ensure_current_is_visible(self)
}
func (self classItemList) GetVScrollBar() VScrollBar {
	return self.ptr.API.ItemList_get_v_scroll_bar(self)
}
func (self classItemList) SetTextOverrunBehavior(overrun_behavior TextServerOverrunBehavior) {
	self.ptr.API.ItemList_set_text_overrun_behavior(self, overrun_behavior)
}
func (self classItemList) GetTextOverrunBehavior() TextServerOverrunBehavior {
	return self.ptr.API.ItemList_get_text_overrun_behavior(self)
}
func (self classItemList) ForceUpdateListSize() {
	self.ptr.API.ItemList_force_update_list_size(self)
}

type classJNISingleton struct{ Class[classJNISingleton] }

func (self classJNISingleton) Super() Object { var super Object; super.ptr = self.ptr; return super }

func (self classJNISingleton) Object() Object { return self.Super() }

type classJSON struct{ Class[classJSON] }

func (self classJSON) Super() Resource { var super Resource; super.ptr = self.ptr; return super }

func (self classJSON) Resource() Resource { return self.Super() }
func (self classJSON) Stringify(data Variant, indent String, sort_keys bool, full_precision bool) String {
	return self.ptr.API.JSON_stringify(self, data, indent, sort_keys, full_precision)
}
func (self classJSON) ParseString(json_string String) Variant {
	return self.ptr.API.JSON_parse_string(self, json_string)
}
func (self classJSON) Parse(json_text String, keep_text bool) int64 {
	return self.ptr.API.JSON_parse(self, json_text, keep_text)
}
func (self classJSON) GetData() Variant {
	return self.ptr.API.JSON_get_data(self)
}
func (self classJSON) SetData(data Variant) {
	self.ptr.API.JSON_set_data(self, data)
}
func (self classJSON) GetParsedText() String {
	return self.ptr.API.JSON_get_parsed_text(self)
}
func (self classJSON) GetErrorLine() Int {
	return self.ptr.API.JSON_get_error_line(self)
}
func (self classJSON) GetErrorMessage() String {
	return self.ptr.API.JSON_get_error_message(self)
}

type classJSONRPC struct{ Class[classJSONRPC] }

func (self classJSONRPC) Super() Object { var super Object; super.ptr = self.ptr; return super }

func (self classJSONRPC) Object() Object { return self.Super() }
func (self classJSONRPC) SetScope(scope String, target Object) {
	self.ptr.API.JSONRPC_set_scope(self, scope, target)
}
func (self classJSONRPC) ProcessAction(action Variant, recurse bool) Variant {
	return self.ptr.API.JSONRPC_process_action(self, action, recurse)
}
func (self classJSONRPC) ProcessString(action String) String {
	return self.ptr.API.JSONRPC_process_string(self, action)
}
func (self classJSONRPC) MakeRequest(method String, params Variant, id Variant) Dictionary {
	return self.ptr.API.JSONRPC_make_request(self, method, params, id)
}
func (self classJSONRPC) MakeResponse(result Variant, id Variant) Dictionary {
	return self.ptr.API.JSONRPC_make_response(self, result, id)
}
func (self classJSONRPC) MakeNotification(method String, params Variant) Dictionary {
	return self.ptr.API.JSONRPC_make_notification(self, method, params)
}
func (self classJSONRPC) MakeResponseError(code Int, message String, id Variant) Dictionary {
	return self.ptr.API.JSONRPC_make_response_error(self, code, message, id)
}

type classJavaClass struct{ Class[classJavaClass] }

func (self classJavaClass) Super() RefCounted {
	var super RefCounted
	super.ptr = self.ptr
	return super
}

func (self classJavaClass) RefCounted() RefCounted { return self.Super() }

type classJavaClassWrapper struct{ Class[classJavaClassWrapper] }

func (self classJavaClassWrapper) Super() Object {
	var super Object
	super.ptr = self.ptr
	return super
}

func (self classJavaClassWrapper) Object() Object { return self.Super() }

func (self classJavaClassWrapper) isSingleton() {}
func (self classJavaClassWrapper) Wrap(name String) JavaClass {
	return self.ptr.API.JavaClassWrapper_wrap(self, name)
}

type classJavaScriptBridge struct{ Class[classJavaScriptBridge] }

func (self classJavaScriptBridge) Super() Object {
	var super Object
	super.ptr = self.ptr
	return super
}

func (self classJavaScriptBridge) Object() Object { return self.Super() }

func (self classJavaScriptBridge) isSingleton() {}
func (self classJavaScriptBridge) Eval(code String, use_global_execution_context bool) Variant {
	return self.ptr.API.JavaScriptBridge_eval(self, code, use_global_execution_context)
}
func (self classJavaScriptBridge) GetInterface(intf String) JavaScriptObject {
	return self.ptr.API.JavaScriptBridge_get_interface(self, intf)
}
func (self classJavaScriptBridge) CreateCallback(callable Callable) JavaScriptObject {
	return self.ptr.API.JavaScriptBridge_create_callback(self, callable)
}
func (self classJavaScriptBridge) CreateObject(object String) Variant {
	return self.ptr.API.JavaScriptBridge_create_object(self, object)
}
func (self classJavaScriptBridge) DownloadBuffer(buffer PackedByteArray, name String, mime String) {
	self.ptr.API.JavaScriptBridge_download_buffer(self, buffer, name, mime)
}
func (self classJavaScriptBridge) PwaNeedsUpdate() bool {
	return self.ptr.API.JavaScriptBridge_pwa_needs_update(self)
}
func (self classJavaScriptBridge) PwaUpdate() int64 {
	return self.ptr.API.JavaScriptBridge_pwa_update(self)
}
func (self classJavaScriptBridge) ForceFsSync() {
	self.ptr.API.JavaScriptBridge_force_fs_sync(self)
}

type classJavaScriptObject struct{ Class[classJavaScriptObject] }

func (self classJavaScriptObject) Super() RefCounted {
	var super RefCounted
	super.ptr = self.ptr
	return super
}

func (self classJavaScriptObject) RefCounted() RefCounted { return self.Super() }

type classJoint2D struct{ Class[classJoint2D] }

func (self classJoint2D) Super() Node2D { var super Node2D; super.ptr = self.ptr; return super }

func (self classJoint2D) Node2D() Node2D { return self.Super() }
func (self classJoint2D) SetNodeA(node NodePath) {
	self.ptr.API.Joint2D_set_node_a(self, node)
}
func (self classJoint2D) GetNodeA() NodePath {
	return self.ptr.API.Joint2D_get_node_a(self)
}
func (self classJoint2D) SetNodeB(node NodePath) {
	self.ptr.API.Joint2D_set_node_b(self, node)
}
func (self classJoint2D) GetNodeB() NodePath {
	return self.ptr.API.Joint2D_get_node_b(self)
}
func (self classJoint2D) SetBias(bias Float) {
	self.ptr.API.Joint2D_set_bias(self, bias)
}
func (self classJoint2D) GetBias() Float {
	return self.ptr.API.Joint2D_get_bias(self)
}
func (self classJoint2D) SetExcludeNodesFromCollision(enable bool) {
	self.ptr.API.Joint2D_set_exclude_nodes_from_collision(self, enable)
}
func (self classJoint2D) GetExcludeNodesFromCollision() bool {
	return self.ptr.API.Joint2D_get_exclude_nodes_from_collision(self)
}
func (self classJoint2D) GetRid() RID {
	return self.ptr.API.Joint2D_get_rid(self)
}

type classJoint3D struct{ Class[classJoint3D] }

func (self classJoint3D) Super() Node3D { var super Node3D; super.ptr = self.ptr; return super }

func (self classJoint3D) Node3D() Node3D { return self.Super() }
func (self classJoint3D) SetNodeA(node NodePath) {
	self.ptr.API.Joint3D_set_node_a(self, node)
}
func (self classJoint3D) GetNodeA() NodePath {
	return self.ptr.API.Joint3D_get_node_a(self)
}
func (self classJoint3D) SetNodeB(node NodePath) {
	self.ptr.API.Joint3D_set_node_b(self, node)
}
func (self classJoint3D) GetNodeB() NodePath {
	return self.ptr.API.Joint3D_get_node_b(self)
}
func (self classJoint3D) SetSolverPriority(priority Int) {
	self.ptr.API.Joint3D_set_solver_priority(self, priority)
}
func (self classJoint3D) GetSolverPriority() Int {
	return self.ptr.API.Joint3D_get_solver_priority(self)
}
func (self classJoint3D) SetExcludeNodesFromCollision(enable bool) {
	self.ptr.API.Joint3D_set_exclude_nodes_from_collision(self, enable)
}
func (self classJoint3D) GetExcludeNodesFromCollision() bool {
	return self.ptr.API.Joint3D_get_exclude_nodes_from_collision(self)
}
func (self classJoint3D) GetRid() RID {
	return self.ptr.API.Joint3D_get_rid(self)
}

type classKinematicCollision2D struct {
	Class[classKinematicCollision2D]
}

func (self classKinematicCollision2D) Super() RefCounted {
	var super RefCounted
	super.ptr = self.ptr
	return super
}

func (self classKinematicCollision2D) RefCounted() RefCounted { return self.Super() }
func (self classKinematicCollision2D) GetPosition() Vector2 {
	return self.ptr.API.KinematicCollision2D_get_position(self)
}
func (self classKinematicCollision2D) GetNormal() Vector2 {
	return self.ptr.API.KinematicCollision2D_get_normal(self)
}
func (self classKinematicCollision2D) GetTravel() Vector2 {
	return self.ptr.API.KinematicCollision2D_get_travel(self)
}
func (self classKinematicCollision2D) GetRemainder() Vector2 {
	return self.ptr.API.KinematicCollision2D_get_remainder(self)
}
func (self classKinematicCollision2D) GetAngle(up_direction Vector2) Float {
	return self.ptr.API.KinematicCollision2D_get_angle(self, up_direction)
}
func (self classKinematicCollision2D) GetDepth() Float {
	return self.ptr.API.KinematicCollision2D_get_depth(self)
}
func (self classKinematicCollision2D) GetLocalShape() Object {
	return self.ptr.API.KinematicCollision2D_get_local_shape(self)
}
func (self classKinematicCollision2D) GetCollider() Object {
	return self.ptr.API.KinematicCollision2D_get_collider(self)
}
func (self classKinematicCollision2D) GetColliderId() Int {
	return self.ptr.API.KinematicCollision2D_get_collider_id(self)
}
func (self classKinematicCollision2D) GetColliderRid() RID {
	return self.ptr.API.KinematicCollision2D_get_collider_rid(self)
}
func (self classKinematicCollision2D) GetColliderShape() Object {
	return self.ptr.API.KinematicCollision2D_get_collider_shape(self)
}
func (self classKinematicCollision2D) GetColliderShapeIndex() Int {
	return self.ptr.API.KinematicCollision2D_get_collider_shape_index(self)
}
func (self classKinematicCollision2D) GetColliderVelocity() Vector2 {
	return self.ptr.API.KinematicCollision2D_get_collider_velocity(self)
}

type classKinematicCollision3D struct {
	Class[classKinematicCollision3D]
}

func (self classKinematicCollision3D) Super() RefCounted {
	var super RefCounted
	super.ptr = self.ptr
	return super
}

func (self classKinematicCollision3D) RefCounted() RefCounted { return self.Super() }
func (self classKinematicCollision3D) GetTravel() Vector3 {
	return self.ptr.API.KinematicCollision3D_get_travel(self)
}
func (self classKinematicCollision3D) GetRemainder() Vector3 {
	return self.ptr.API.KinematicCollision3D_get_remainder(self)
}
func (self classKinematicCollision3D) GetDepth() Float {
	return self.ptr.API.KinematicCollision3D_get_depth(self)
}
func (self classKinematicCollision3D) GetCollisionCount() Int {
	return self.ptr.API.KinematicCollision3D_get_collision_count(self)
}
func (self classKinematicCollision3D) GetPosition(collision_index Int) Vector3 {
	return self.ptr.API.KinematicCollision3D_get_position(self, collision_index)
}
func (self classKinematicCollision3D) GetNormal(collision_index Int) Vector3 {
	return self.ptr.API.KinematicCollision3D_get_normal(self, collision_index)
}
func (self classKinematicCollision3D) GetAngle(collision_index Int, up_direction Vector3) Float {
	return self.ptr.API.KinematicCollision3D_get_angle(self, collision_index, up_direction)
}
func (self classKinematicCollision3D) GetLocalShape(collision_index Int) Object {
	return self.ptr.API.KinematicCollision3D_get_local_shape(self, collision_index)
}
func (self classKinematicCollision3D) GetCollider(collision_index Int) Object {
	return self.ptr.API.KinematicCollision3D_get_collider(self, collision_index)
}
func (self classKinematicCollision3D) GetColliderId(collision_index Int) Int {
	return self.ptr.API.KinematicCollision3D_get_collider_id(self, collision_index)
}
func (self classKinematicCollision3D) GetColliderRid(collision_index Int) RID {
	return self.ptr.API.KinematicCollision3D_get_collider_rid(self, collision_index)
}
func (self classKinematicCollision3D) GetColliderShape(collision_index Int) Object {
	return self.ptr.API.KinematicCollision3D_get_collider_shape(self, collision_index)
}
func (self classKinematicCollision3D) GetColliderShapeIndex(collision_index Int) Int {
	return self.ptr.API.KinematicCollision3D_get_collider_shape_index(self, collision_index)
}
func (self classKinematicCollision3D) GetColliderVelocity(collision_index Int) Vector3 {
	return self.ptr.API.KinematicCollision3D_get_collider_velocity(self, collision_index)
}

type classLabel struct{ Class[classLabel] }

func (self classLabel) Super() Control { var super Control; super.ptr = self.ptr; return super }

func (self classLabel) Control() Control { return self.Super() }
func (self classLabel) SetHorizontalAlignment(alignment HorizontalAlignment) {
	self.ptr.API.Label_set_horizontal_alignment(self, alignment)
}
func (self classLabel) GetHorizontalAlignment() HorizontalAlignment {
	return self.ptr.API.Label_get_horizontal_alignment(self)
}
func (self classLabel) SetVerticalAlignment(alignment VerticalAlignment) {
	self.ptr.API.Label_set_vertical_alignment(self, alignment)
}
func (self classLabel) GetVerticalAlignment() VerticalAlignment {
	return self.ptr.API.Label_get_vertical_alignment(self)
}
func (self classLabel) SetText(text String) {
	self.ptr.API.Label_set_text(self, text)
}
func (self classLabel) GetText() String {
	return self.ptr.API.Label_get_text(self)
}
func (self classLabel) SetLabelSettings(settings LabelSettings) {
	self.ptr.API.Label_set_label_settings(self, settings)
}
func (self classLabel) GetLabelSettings() LabelSettings {
	return self.ptr.API.Label_get_label_settings(self)
}
func (self classLabel) SetTextDirection(direction ControlTextDirection) {
	self.ptr.API.Label_set_text_direction(self, direction)
}
func (self classLabel) GetTextDirection() ControlTextDirection {
	return self.ptr.API.Label_get_text_direction(self)
}
func (self classLabel) SetLanguage(language String) {
	self.ptr.API.Label_set_language(self, language)
}
func (self classLabel) GetLanguage() String {
	return self.ptr.API.Label_get_language(self)
}
func (self classLabel) SetAutowrapMode(autowrap_mode TextServerAutowrapMode) {
	self.ptr.API.Label_set_autowrap_mode(self, autowrap_mode)
}
func (self classLabel) GetAutowrapMode() TextServerAutowrapMode {
	return self.ptr.API.Label_get_autowrap_mode(self)
}
func (self classLabel) SetJustificationFlags(justification_flags TextServerJustificationFlag) {
	self.ptr.API.Label_set_justification_flags(self, justification_flags)
}
func (self classLabel) GetJustificationFlags() TextServerJustificationFlag {
	return self.ptr.API.Label_get_justification_flags(self)
}
func (self classLabel) SetClipText(enable bool) {
	self.ptr.API.Label_set_clip_text(self, enable)
}
func (self classLabel) IsClippingText() bool {
	return self.ptr.API.Label_is_clipping_text(self)
}
func (self classLabel) SetTabStops(tab_stops PackedFloat32Array) {
	self.ptr.API.Label_set_tab_stops(self, tab_stops)
}
func (self classLabel) GetTabStops() PackedFloat32Array {
	return self.ptr.API.Label_get_tab_stops(self)
}
func (self classLabel) SetTextOverrunBehavior(overrun_behavior TextServerOverrunBehavior) {
	self.ptr.API.Label_set_text_overrun_behavior(self, overrun_behavior)
}
func (self classLabel) GetTextOverrunBehavior() TextServerOverrunBehavior {
	return self.ptr.API.Label_get_text_overrun_behavior(self)
}
func (self classLabel) SetEllipsisChar(char String) {
	self.ptr.API.Label_set_ellipsis_char(self, char)
}
func (self classLabel) GetEllipsisChar() String {
	return self.ptr.API.Label_get_ellipsis_char(self)
}
func (self classLabel) SetUppercase(enable bool) {
	self.ptr.API.Label_set_uppercase(self, enable)
}
func (self classLabel) IsUppercase() bool {
	return self.ptr.API.Label_is_uppercase(self)
}
func (self classLabel) GetLineHeight(line Int) Int {
	return self.ptr.API.Label_get_line_height(self, line)
}
func (self classLabel) GetLineCount() Int {
	return self.ptr.API.Label_get_line_count(self)
}
func (self classLabel) GetVisibleLineCount() Int {
	return self.ptr.API.Label_get_visible_line_count(self)
}
func (self classLabel) GetTotalCharacterCount() Int {
	return self.ptr.API.Label_get_total_character_count(self)
}
func (self classLabel) SetVisibleCharacters(amount Int) {
	self.ptr.API.Label_set_visible_characters(self, amount)
}
func (self classLabel) GetVisibleCharacters() Int {
	return self.ptr.API.Label_get_visible_characters(self)
}
func (self classLabel) GetVisibleCharactersBehavior() TextServerVisibleCharactersBehavior {
	return self.ptr.API.Label_get_visible_characters_behavior(self)
}
func (self classLabel) SetVisibleCharactersBehavior(behavior TextServerVisibleCharactersBehavior) {
	self.ptr.API.Label_set_visible_characters_behavior(self, behavior)
}
func (self classLabel) SetVisibleRatio(ratio Float) {
	self.ptr.API.Label_set_visible_ratio(self, ratio)
}
func (self classLabel) GetVisibleRatio() Float {
	return self.ptr.API.Label_get_visible_ratio(self)
}
func (self classLabel) SetLinesSkipped(lines_skipped Int) {
	self.ptr.API.Label_set_lines_skipped(self, lines_skipped)
}
func (self classLabel) GetLinesSkipped() Int {
	return self.ptr.API.Label_get_lines_skipped(self)
}
func (self classLabel) SetMaxLinesVisible(lines_visible Int) {
	self.ptr.API.Label_set_max_lines_visible(self, lines_visible)
}
func (self classLabel) GetMaxLinesVisible() Int {
	return self.ptr.API.Label_get_max_lines_visible(self)
}
func (self classLabel) SetStructuredTextBidiOverride(parser TextServerStructuredTextParser) {
	self.ptr.API.Label_set_structured_text_bidi_override(self, parser)
}
func (self classLabel) GetStructuredTextBidiOverride() TextServerStructuredTextParser {
	return self.ptr.API.Label_get_structured_text_bidi_override(self)
}
func (self classLabel) SetStructuredTextBidiOverrideOptions(args Array) {
	self.ptr.API.Label_set_structured_text_bidi_override_options(self, args)
}
func (self classLabel) GetStructuredTextBidiOverrideOptions() Array {
	return self.ptr.API.Label_get_structured_text_bidi_override_options(self)
}
func (self classLabel) GetCharacterBounds(pos Int) Rect2 {
	return self.ptr.API.Label_get_character_bounds(self, pos)
}

type classLabel3D struct{ Class[classLabel3D] }

func (self classLabel3D) Super() GeometryInstance3D {
	var super GeometryInstance3D
	super.ptr = self.ptr
	return super
}

func (self classLabel3D) GeometryInstance3D() GeometryInstance3D { return self.Super() }
func (self classLabel3D) SetHorizontalAlignment(alignment HorizontalAlignment) {
	self.ptr.API.Label3D_set_horizontal_alignment(self, alignment)
}
func (self classLabel3D) GetHorizontalAlignment() HorizontalAlignment {
	return self.ptr.API.Label3D_get_horizontal_alignment(self)
}
func (self classLabel3D) SetVerticalAlignment(alignment VerticalAlignment) {
	self.ptr.API.Label3D_set_vertical_alignment(self, alignment)
}
func (self classLabel3D) GetVerticalAlignment() VerticalAlignment {
	return self.ptr.API.Label3D_get_vertical_alignment(self)
}
func (self classLabel3D) SetModulate(modulate Color) {
	self.ptr.API.Label3D_set_modulate(self, modulate)
}
func (self classLabel3D) GetModulate() Color {
	return self.ptr.API.Label3D_get_modulate(self)
}
func (self classLabel3D) SetOutlineModulate(modulate Color) {
	self.ptr.API.Label3D_set_outline_modulate(self, modulate)
}
func (self classLabel3D) GetOutlineModulate() Color {
	return self.ptr.API.Label3D_get_outline_modulate(self)
}
func (self classLabel3D) SetText(text String) {
	self.ptr.API.Label3D_set_text(self, text)
}
func (self classLabel3D) GetText() String {
	return self.ptr.API.Label3D_get_text(self)
}
func (self classLabel3D) SetTextDirection(direction TextServerDirection) {
	self.ptr.API.Label3D_set_text_direction(self, direction)
}
func (self classLabel3D) GetTextDirection() TextServerDirection {
	return self.ptr.API.Label3D_get_text_direction(self)
}
func (self classLabel3D) SetLanguage(language String) {
	self.ptr.API.Label3D_set_language(self, language)
}
func (self classLabel3D) GetLanguage() String {
	return self.ptr.API.Label3D_get_language(self)
}
func (self classLabel3D) SetStructuredTextBidiOverride(parser TextServerStructuredTextParser) {
	self.ptr.API.Label3D_set_structured_text_bidi_override(self, parser)
}
func (self classLabel3D) GetStructuredTextBidiOverride() TextServerStructuredTextParser {
	return self.ptr.API.Label3D_get_structured_text_bidi_override(self)
}
func (self classLabel3D) SetStructuredTextBidiOverrideOptions(args Array) {
	self.ptr.API.Label3D_set_structured_text_bidi_override_options(self, args)
}
func (self classLabel3D) GetStructuredTextBidiOverrideOptions() Array {
	return self.ptr.API.Label3D_get_structured_text_bidi_override_options(self)
}
func (self classLabel3D) SetUppercase(enable bool) {
	self.ptr.API.Label3D_set_uppercase(self, enable)
}
func (self classLabel3D) IsUppercase() bool {
	return self.ptr.API.Label3D_is_uppercase(self)
}
func (self classLabel3D) SetRenderPriority(priority Int) {
	self.ptr.API.Label3D_set_render_priority(self, priority)
}
func (self classLabel3D) GetRenderPriority() Int {
	return self.ptr.API.Label3D_get_render_priority(self)
}
func (self classLabel3D) SetOutlineRenderPriority(priority Int) {
	self.ptr.API.Label3D_set_outline_render_priority(self, priority)
}
func (self classLabel3D) GetOutlineRenderPriority() Int {
	return self.ptr.API.Label3D_get_outline_render_priority(self)
}
func (self classLabel3D) SetFont(font Font) {
	self.ptr.API.Label3D_set_font(self, font)
}
func (self classLabel3D) GetFont() Font {
	return self.ptr.API.Label3D_get_font(self)
}
func (self classLabel3D) SetFontSize(size Int) {
	self.ptr.API.Label3D_set_font_size(self, size)
}
func (self classLabel3D) GetFontSize() Int {
	return self.ptr.API.Label3D_get_font_size(self)
}
func (self classLabel3D) SetOutlineSize(outline_size Int) {
	self.ptr.API.Label3D_set_outline_size(self, outline_size)
}
func (self classLabel3D) GetOutlineSize() Int {
	return self.ptr.API.Label3D_get_outline_size(self)
}
func (self classLabel3D) SetLineSpacing(line_spacing Float) {
	self.ptr.API.Label3D_set_line_spacing(self, line_spacing)
}
func (self classLabel3D) GetLineSpacing() Float {
	return self.ptr.API.Label3D_get_line_spacing(self)
}
func (self classLabel3D) SetAutowrapMode(autowrap_mode TextServerAutowrapMode) {
	self.ptr.API.Label3D_set_autowrap_mode(self, autowrap_mode)
}
func (self classLabel3D) GetAutowrapMode() TextServerAutowrapMode {
	return self.ptr.API.Label3D_get_autowrap_mode(self)
}
func (self classLabel3D) SetJustificationFlags(justification_flags TextServerJustificationFlag) {
	self.ptr.API.Label3D_set_justification_flags(self, justification_flags)
}
func (self classLabel3D) GetJustificationFlags() TextServerJustificationFlag {
	return self.ptr.API.Label3D_get_justification_flags(self)
}
func (self classLabel3D) SetWidth(width Float) {
	self.ptr.API.Label3D_set_width(self, width)
}
func (self classLabel3D) GetWidth() Float {
	return self.ptr.API.Label3D_get_width(self)
}
func (self classLabel3D) SetPixelSize(pixel_size Float) {
	self.ptr.API.Label3D_set_pixel_size(self, pixel_size)
}
func (self classLabel3D) GetPixelSize() Float {
	return self.ptr.API.Label3D_get_pixel_size(self)
}
func (self classLabel3D) SetOffset(offset Vector2) {
	self.ptr.API.Label3D_set_offset(self, offset)
}
func (self classLabel3D) GetOffset() Vector2 {
	return self.ptr.API.Label3D_get_offset(self)
}
func (self classLabel3D) SetDrawFlag(flag Label3DDrawFlags, enabled bool) {
	self.ptr.API.Label3D_set_draw_flag(self, flag, enabled)
}
func (self classLabel3D) GetDrawFlag(flag Label3DDrawFlags) bool {
	return self.ptr.API.Label3D_get_draw_flag(self, flag)
}
func (self classLabel3D) SetBillboardMode(mode BaseMaterial3DBillboardMode) {
	self.ptr.API.Label3D_set_billboard_mode(self, mode)
}
func (self classLabel3D) GetBillboardMode() BaseMaterial3DBillboardMode {
	return self.ptr.API.Label3D_get_billboard_mode(self)
}
func (self classLabel3D) SetAlphaCutMode(mode Label3DAlphaCutMode) {
	self.ptr.API.Label3D_set_alpha_cut_mode(self, mode)
}
func (self classLabel3D) GetAlphaCutMode() Label3DAlphaCutMode {
	return self.ptr.API.Label3D_get_alpha_cut_mode(self)
}
func (self classLabel3D) SetAlphaScissorThreshold(threshold Float) {
	self.ptr.API.Label3D_set_alpha_scissor_threshold(self, threshold)
}
func (self classLabel3D) GetAlphaScissorThreshold() Float {
	return self.ptr.API.Label3D_get_alpha_scissor_threshold(self)
}
func (self classLabel3D) SetAlphaHashScale(threshold Float) {
	self.ptr.API.Label3D_set_alpha_hash_scale(self, threshold)
}
func (self classLabel3D) GetAlphaHashScale() Float {
	return self.ptr.API.Label3D_get_alpha_hash_scale(self)
}
func (self classLabel3D) SetAlphaAntialiasing(alpha_aa BaseMaterial3DAlphaAntiAliasing) {
	self.ptr.API.Label3D_set_alpha_antialiasing(self, alpha_aa)
}
func (self classLabel3D) GetAlphaAntialiasing() BaseMaterial3DAlphaAntiAliasing {
	return self.ptr.API.Label3D_get_alpha_antialiasing(self)
}
func (self classLabel3D) SetAlphaAntialiasingEdge(edge Float) {
	self.ptr.API.Label3D_set_alpha_antialiasing_edge(self, edge)
}
func (self classLabel3D) GetAlphaAntialiasingEdge() Float {
	return self.ptr.API.Label3D_get_alpha_antialiasing_edge(self)
}
func (self classLabel3D) SetTextureFilter(mode BaseMaterial3DTextureFilter) {
	self.ptr.API.Label3D_set_texture_filter(self, mode)
}
func (self classLabel3D) GetTextureFilter() BaseMaterial3DTextureFilter {
	return self.ptr.API.Label3D_get_texture_filter(self)
}
func (self classLabel3D) GenerateTriangleMesh() TriangleMesh {
	return self.ptr.API.Label3D_generate_triangle_mesh(self)
}

type classLabelSettings struct{ Class[classLabelSettings] }

func (self classLabelSettings) Super() Resource {
	var super Resource
	super.ptr = self.ptr
	return super
}

func (self classLabelSettings) Resource() Resource { return self.Super() }
func (self classLabelSettings) SetLineSpacing(spacing Float) {
	self.ptr.API.LabelSettings_set_line_spacing(self, spacing)
}
func (self classLabelSettings) GetLineSpacing() Float {
	return self.ptr.API.LabelSettings_get_line_spacing(self)
}
func (self classLabelSettings) SetFont(font Font) {
	self.ptr.API.LabelSettings_set_font(self, font)
}
func (self classLabelSettings) GetFont() Font {
	return self.ptr.API.LabelSettings_get_font(self)
}
func (self classLabelSettings) SetFontSize(size Int) {
	self.ptr.API.LabelSettings_set_font_size(self, size)
}
func (self classLabelSettings) GetFontSize() Int {
	return self.ptr.API.LabelSettings_get_font_size(self)
}
func (self classLabelSettings) SetFontColor(color Color) {
	self.ptr.API.LabelSettings_set_font_color(self, color)
}
func (self classLabelSettings) GetFontColor() Color {
	return self.ptr.API.LabelSettings_get_font_color(self)
}
func (self classLabelSettings) SetOutlineSize(size Int) {
	self.ptr.API.LabelSettings_set_outline_size(self, size)
}
func (self classLabelSettings) GetOutlineSize() Int {
	return self.ptr.API.LabelSettings_get_outline_size(self)
}
func (self classLabelSettings) SetOutlineColor(color Color) {
	self.ptr.API.LabelSettings_set_outline_color(self, color)
}
func (self classLabelSettings) GetOutlineColor() Color {
	return self.ptr.API.LabelSettings_get_outline_color(self)
}
func (self classLabelSettings) SetShadowSize(size Int) {
	self.ptr.API.LabelSettings_set_shadow_size(self, size)
}
func (self classLabelSettings) GetShadowSize() Int {
	return self.ptr.API.LabelSettings_get_shadow_size(self)
}
func (self classLabelSettings) SetShadowColor(color Color) {
	self.ptr.API.LabelSettings_set_shadow_color(self, color)
}
func (self classLabelSettings) GetShadowColor() Color {
	return self.ptr.API.LabelSettings_get_shadow_color(self)
}
func (self classLabelSettings) SetShadowOffset(offset Vector2) {
	self.ptr.API.LabelSettings_set_shadow_offset(self, offset)
}
func (self classLabelSettings) GetShadowOffset() Vector2 {
	return self.ptr.API.LabelSettings_get_shadow_offset(self)
}

type classLight2D struct{ Class[classLight2D] }

func (self classLight2D) Super() Node2D { var super Node2D; super.ptr = self.ptr; return super }

func (self classLight2D) Node2D() Node2D { return self.Super() }
func (self classLight2D) SetEnabled(enabled bool) {
	self.ptr.API.Light2D_set_enabled(self, enabled)
}
func (self classLight2D) IsEnabled() bool {
	return self.ptr.API.Light2D_is_enabled(self)
}
func (self classLight2D) SetEditorOnly(editor_only bool) {
	self.ptr.API.Light2D_set_editor_only(self, editor_only)
}
func (self classLight2D) IsEditorOnly() bool {
	return self.ptr.API.Light2D_is_editor_only(self)
}
func (self classLight2D) SetColor(color Color) {
	self.ptr.API.Light2D_set_color(self, color)
}
func (self classLight2D) GetColor() Color {
	return self.ptr.API.Light2D_get_color(self)
}
func (self classLight2D) SetEnergy(energy Float) {
	self.ptr.API.Light2D_set_energy(self, energy)
}
func (self classLight2D) GetEnergy() Float {
	return self.ptr.API.Light2D_get_energy(self)
}
func (self classLight2D) SetZRangeMin(z Int) {
	self.ptr.API.Light2D_set_z_range_min(self, z)
}
func (self classLight2D) GetZRangeMin() Int {
	return self.ptr.API.Light2D_get_z_range_min(self)
}
func (self classLight2D) SetZRangeMax(z Int) {
	self.ptr.API.Light2D_set_z_range_max(self, z)
}
func (self classLight2D) GetZRangeMax() Int {
	return self.ptr.API.Light2D_get_z_range_max(self)
}
func (self classLight2D) SetLayerRangeMin(layer Int) {
	self.ptr.API.Light2D_set_layer_range_min(self, layer)
}
func (self classLight2D) GetLayerRangeMin() Int {
	return self.ptr.API.Light2D_get_layer_range_min(self)
}
func (self classLight2D) SetLayerRangeMax(layer Int) {
	self.ptr.API.Light2D_set_layer_range_max(self, layer)
}
func (self classLight2D) GetLayerRangeMax() Int {
	return self.ptr.API.Light2D_get_layer_range_max(self)
}
func (self classLight2D) SetItemCullMask(item_cull_mask Int) {
	self.ptr.API.Light2D_set_item_cull_mask(self, item_cull_mask)
}
func (self classLight2D) GetItemCullMask() Int {
	return self.ptr.API.Light2D_get_item_cull_mask(self)
}
func (self classLight2D) SetItemShadowCullMask(item_shadow_cull_mask Int) {
	self.ptr.API.Light2D_set_item_shadow_cull_mask(self, item_shadow_cull_mask)
}
func (self classLight2D) GetItemShadowCullMask() Int {
	return self.ptr.API.Light2D_get_item_shadow_cull_mask(self)
}
func (self classLight2D) SetShadowEnabled(enabled bool) {
	self.ptr.API.Light2D_set_shadow_enabled(self, enabled)
}
func (self classLight2D) IsShadowEnabled() bool {
	return self.ptr.API.Light2D_is_shadow_enabled(self)
}
func (self classLight2D) SetShadowSmooth(smooth Float) {
	self.ptr.API.Light2D_set_shadow_smooth(self, smooth)
}
func (self classLight2D) GetShadowSmooth() Float {
	return self.ptr.API.Light2D_get_shadow_smooth(self)
}
func (self classLight2D) SetShadowFilter(filter Light2DShadowFilter) {
	self.ptr.API.Light2D_set_shadow_filter(self, filter)
}
func (self classLight2D) GetShadowFilter() Light2DShadowFilter {
	return self.ptr.API.Light2D_get_shadow_filter(self)
}
func (self classLight2D) SetShadowColor(shadow_color Color) {
	self.ptr.API.Light2D_set_shadow_color(self, shadow_color)
}
func (self classLight2D) GetShadowColor() Color {
	return self.ptr.API.Light2D_get_shadow_color(self)
}
func (self classLight2D) SetBlendMode(mode Light2DBlendMode) {
	self.ptr.API.Light2D_set_blend_mode(self, mode)
}
func (self classLight2D) GetBlendMode() Light2DBlendMode {
	return self.ptr.API.Light2D_get_blend_mode(self)
}
func (self classLight2D) SetHeight(height Float) {
	self.ptr.API.Light2D_set_height(self, height)
}
func (self classLight2D) GetHeight() Float {
	return self.ptr.API.Light2D_get_height(self)
}

type classLight3D struct{ Class[classLight3D] }

func (self classLight3D) Super() VisualInstance3D {
	var super VisualInstance3D
	super.ptr = self.ptr
	return super
}

func (self classLight3D) VisualInstance3D() VisualInstance3D { return self.Super() }
func (self classLight3D) SetEditorOnly(editor_only bool) {
	self.ptr.API.Light3D_set_editor_only(self, editor_only)
}
func (self classLight3D) IsEditorOnly() bool {
	return self.ptr.API.Light3D_is_editor_only(self)
}
func (self classLight3D) SetParam(param Light3DParam, value Float) {
	self.ptr.API.Light3D_set_param(self, param, value)
}
func (self classLight3D) GetParam(param Light3DParam) Float {
	return self.ptr.API.Light3D_get_param(self, param)
}
func (self classLight3D) SetShadow(enabled bool) {
	self.ptr.API.Light3D_set_shadow(self, enabled)
}
func (self classLight3D) HasShadow() bool {
	return self.ptr.API.Light3D_has_shadow(self)
}
func (self classLight3D) SetNegative(enabled bool) {
	self.ptr.API.Light3D_set_negative(self, enabled)
}
func (self classLight3D) IsNegative() bool {
	return self.ptr.API.Light3D_is_negative(self)
}
func (self classLight3D) SetCullMask(cull_mask Int) {
	self.ptr.API.Light3D_set_cull_mask(self, cull_mask)
}
func (self classLight3D) GetCullMask() Int {
	return self.ptr.API.Light3D_get_cull_mask(self)
}
func (self classLight3D) SetEnableDistanceFade(enable bool) {
	self.ptr.API.Light3D_set_enable_distance_fade(self, enable)
}
func (self classLight3D) IsDistanceFadeEnabled() bool {
	return self.ptr.API.Light3D_is_distance_fade_enabled(self)
}
func (self classLight3D) SetDistanceFadeBegin(distance Float) {
	self.ptr.API.Light3D_set_distance_fade_begin(self, distance)
}
func (self classLight3D) GetDistanceFadeBegin() Float {
	return self.ptr.API.Light3D_get_distance_fade_begin(self)
}
func (self classLight3D) SetDistanceFadeShadow(distance Float) {
	self.ptr.API.Light3D_set_distance_fade_shadow(self, distance)
}
func (self classLight3D) GetDistanceFadeShadow() Float {
	return self.ptr.API.Light3D_get_distance_fade_shadow(self)
}
func (self classLight3D) SetDistanceFadeLength(distance Float) {
	self.ptr.API.Light3D_set_distance_fade_length(self, distance)
}
func (self classLight3D) GetDistanceFadeLength() Float {
	return self.ptr.API.Light3D_get_distance_fade_length(self)
}
func (self classLight3D) SetColor(color Color) {
	self.ptr.API.Light3D_set_color(self, color)
}
func (self classLight3D) GetColor() Color {
	return self.ptr.API.Light3D_get_color(self)
}
func (self classLight3D) SetShadowReverseCullFace(enable bool) {
	self.ptr.API.Light3D_set_shadow_reverse_cull_face(self, enable)
}
func (self classLight3D) GetShadowReverseCullFace() bool {
	return self.ptr.API.Light3D_get_shadow_reverse_cull_face(self)
}
func (self classLight3D) SetBakeMode(bake_mode Light3DBakeMode) {
	self.ptr.API.Light3D_set_bake_mode(self, bake_mode)
}
func (self classLight3D) GetBakeMode() Light3DBakeMode {
	return self.ptr.API.Light3D_get_bake_mode(self)
}
func (self classLight3D) SetProjector(projector Texture2D) {
	self.ptr.API.Light3D_set_projector(self, projector)
}
func (self classLight3D) GetProjector() Texture2D {
	return self.ptr.API.Light3D_get_projector(self)
}
func (self classLight3D) SetTemperature(temperature Float) {
	self.ptr.API.Light3D_set_temperature(self, temperature)
}
func (self classLight3D) GetTemperature() Float {
	return self.ptr.API.Light3D_get_temperature(self)
}
func (self classLight3D) GetCorrelatedColor() Color {
	return self.ptr.API.Light3D_get_correlated_color(self)
}

type classLightOccluder2D struct{ Class[classLightOccluder2D] }

func (self classLightOccluder2D) Super() Node2D { var super Node2D; super.ptr = self.ptr; return super }

func (self classLightOccluder2D) Node2D() Node2D { return self.Super() }
func (self classLightOccluder2D) SetOccluderPolygon(polygon OccluderPolygon2D) {
	self.ptr.API.LightOccluder2D_set_occluder_polygon(self, polygon)
}
func (self classLightOccluder2D) GetOccluderPolygon() OccluderPolygon2D {
	return self.ptr.API.LightOccluder2D_get_occluder_polygon(self)
}
func (self classLightOccluder2D) SetOccluderLightMask(mask Int) {
	self.ptr.API.LightOccluder2D_set_occluder_light_mask(self, mask)
}
func (self classLightOccluder2D) GetOccluderLightMask() Int {
	return self.ptr.API.LightOccluder2D_get_occluder_light_mask(self)
}
func (self classLightOccluder2D) SetAsSdfCollision(enable bool) {
	self.ptr.API.LightOccluder2D_set_as_sdf_collision(self, enable)
}
func (self classLightOccluder2D) IsSetAsSdfCollision() bool {
	return self.ptr.API.LightOccluder2D_is_set_as_sdf_collision(self)
}

type classLightmapGI struct{ Class[classLightmapGI] }

func (self classLightmapGI) Super() VisualInstance3D {
	var super VisualInstance3D
	super.ptr = self.ptr
	return super
}

func (self classLightmapGI) VisualInstance3D() VisualInstance3D { return self.Super() }
func (self classLightmapGI) SetLightData(data LightmapGIData) {
	self.ptr.API.LightmapGI_set_light_data(self, data)
}
func (self classLightmapGI) GetLightData() LightmapGIData {
	return self.ptr.API.LightmapGI_get_light_data(self)
}
func (self classLightmapGI) SetBakeQuality(bake_quality LightmapGIBakeQuality) {
	self.ptr.API.LightmapGI_set_bake_quality(self, bake_quality)
}
func (self classLightmapGI) GetBakeQuality() LightmapGIBakeQuality {
	return self.ptr.API.LightmapGI_get_bake_quality(self)
}
func (self classLightmapGI) SetBounces(bounces Int) {
	self.ptr.API.LightmapGI_set_bounces(self, bounces)
}
func (self classLightmapGI) GetBounces() Int {
	return self.ptr.API.LightmapGI_get_bounces(self)
}
func (self classLightmapGI) SetBounceIndirectEnergy(bounce_indirect_energy Float) {
	self.ptr.API.LightmapGI_set_bounce_indirect_energy(self, bounce_indirect_energy)
}
func (self classLightmapGI) GetBounceIndirectEnergy() Float {
	return self.ptr.API.LightmapGI_get_bounce_indirect_energy(self)
}
func (self classLightmapGI) SetGenerateProbes(subdivision LightmapGIGenerateProbes) {
	self.ptr.API.LightmapGI_set_generate_probes(self, subdivision)
}
func (self classLightmapGI) GetGenerateProbes() LightmapGIGenerateProbes {
	return self.ptr.API.LightmapGI_get_generate_probes(self)
}
func (self classLightmapGI) SetBias(bias Float) {
	self.ptr.API.LightmapGI_set_bias(self, bias)
}
func (self classLightmapGI) GetBias() Float {
	return self.ptr.API.LightmapGI_get_bias(self)
}
func (self classLightmapGI) SetEnvironmentMode(mode LightmapGIEnvironmentMode) {
	self.ptr.API.LightmapGI_set_environment_mode(self, mode)
}
func (self classLightmapGI) GetEnvironmentMode() LightmapGIEnvironmentMode {
	return self.ptr.API.LightmapGI_get_environment_mode(self)
}
func (self classLightmapGI) SetEnvironmentCustomSky(sky Sky) {
	self.ptr.API.LightmapGI_set_environment_custom_sky(self, sky)
}
func (self classLightmapGI) GetEnvironmentCustomSky() Sky {
	return self.ptr.API.LightmapGI_get_environment_custom_sky(self)
}
func (self classLightmapGI) SetEnvironmentCustomColor(color Color) {
	self.ptr.API.LightmapGI_set_environment_custom_color(self, color)
}
func (self classLightmapGI) GetEnvironmentCustomColor() Color {
	return self.ptr.API.LightmapGI_get_environment_custom_color(self)
}
func (self classLightmapGI) SetEnvironmentCustomEnergy(energy Float) {
	self.ptr.API.LightmapGI_set_environment_custom_energy(self, energy)
}
func (self classLightmapGI) GetEnvironmentCustomEnergy() Float {
	return self.ptr.API.LightmapGI_get_environment_custom_energy(self)
}
func (self classLightmapGI) SetTexelScale(texel_scale Float) {
	self.ptr.API.LightmapGI_set_texel_scale(self, texel_scale)
}
func (self classLightmapGI) GetTexelScale() Float {
	return self.ptr.API.LightmapGI_get_texel_scale(self)
}
func (self classLightmapGI) SetMaxTextureSize(max_texture_size Int) {
	self.ptr.API.LightmapGI_set_max_texture_size(self, max_texture_size)
}
func (self classLightmapGI) GetMaxTextureSize() Int {
	return self.ptr.API.LightmapGI_get_max_texture_size(self)
}
func (self classLightmapGI) SetUseDenoiser(use_denoiser bool) {
	self.ptr.API.LightmapGI_set_use_denoiser(self, use_denoiser)
}
func (self classLightmapGI) IsUsingDenoiser() bool {
	return self.ptr.API.LightmapGI_is_using_denoiser(self)
}
func (self classLightmapGI) SetDenoiserStrength(denoiser_strength Float) {
	self.ptr.API.LightmapGI_set_denoiser_strength(self, denoiser_strength)
}
func (self classLightmapGI) GetDenoiserStrength() Float {
	return self.ptr.API.LightmapGI_get_denoiser_strength(self)
}
func (self classLightmapGI) SetInterior(enable bool) {
	self.ptr.API.LightmapGI_set_interior(self, enable)
}
func (self classLightmapGI) IsInterior() bool {
	return self.ptr.API.LightmapGI_is_interior(self)
}
func (self classLightmapGI) SetDirectional(directional bool) {
	self.ptr.API.LightmapGI_set_directional(self, directional)
}
func (self classLightmapGI) IsDirectional() bool {
	return self.ptr.API.LightmapGI_is_directional(self)
}
func (self classLightmapGI) SetUseTextureForBounces(use_texture_for_bounces bool) {
	self.ptr.API.LightmapGI_set_use_texture_for_bounces(self, use_texture_for_bounces)
}
func (self classLightmapGI) IsUsingTextureForBounces() bool {
	return self.ptr.API.LightmapGI_is_using_texture_for_bounces(self)
}
func (self classLightmapGI) SetCameraAttributes(camera_attributes CameraAttributes) {
	self.ptr.API.LightmapGI_set_camera_attributes(self, camera_attributes)
}
func (self classLightmapGI) GetCameraAttributes() CameraAttributes {
	return self.ptr.API.LightmapGI_get_camera_attributes(self)
}

type classLightmapGIData struct{ Class[classLightmapGIData] }

func (self classLightmapGIData) Super() Resource {
	var super Resource
	super.ptr = self.ptr
	return super
}

func (self classLightmapGIData) Resource() Resource { return self.Super() }
func (self classLightmapGIData) SetLightmapTextures(light_textures ArrayOf[TextureLayered]) {
	self.ptr.API.LightmapGIData_set_lightmap_textures(self, light_textures)
}
func (self classLightmapGIData) GetLightmapTextures() ArrayOf[TextureLayered] {
	return self.ptr.API.LightmapGIData_get_lightmap_textures(self)
}
func (self classLightmapGIData) SetUsesSphericalHarmonics(uses_spherical_harmonics bool) {
	self.ptr.API.LightmapGIData_set_uses_spherical_harmonics(self, uses_spherical_harmonics)
}
func (self classLightmapGIData) IsUsingSphericalHarmonics() bool {
	return self.ptr.API.LightmapGIData_is_using_spherical_harmonics(self)
}
func (self classLightmapGIData) AddUser(path NodePath, uv_scale Rect2, slice_index Int, sub_instance Int) {
	self.ptr.API.LightmapGIData_add_user(self, path, uv_scale, slice_index, sub_instance)
}
func (self classLightmapGIData) GetUserCount() Int {
	return self.ptr.API.LightmapGIData_get_user_count(self)
}
func (self classLightmapGIData) GetUserPath(user_idx Int) NodePath {
	return self.ptr.API.LightmapGIData_get_user_path(self, user_idx)
}
func (self classLightmapGIData) ClearUsers() {
	self.ptr.API.LightmapGIData_clear_users(self)
}
func (self classLightmapGIData) SetLightTexture(light_texture TextureLayered) {
	self.ptr.API.LightmapGIData_set_light_texture(self, light_texture)
}
func (self classLightmapGIData) GetLightTexture() TextureLayered {
	return self.ptr.API.LightmapGIData_get_light_texture(self)
}

type classLightmapProbe struct{ Class[classLightmapProbe] }

func (self classLightmapProbe) Super() Node3D { var super Node3D; super.ptr = self.ptr; return super }

func (self classLightmapProbe) Node3D() Node3D { return self.Super() }

type classLightmapper struct{ Class[classLightmapper] }

func (self classLightmapper) Super() RefCounted {
	var super RefCounted
	super.ptr = self.ptr
	return super
}

func (self classLightmapper) RefCounted() RefCounted { return self.Super() }

type classLightmapperRD struct{ Class[classLightmapperRD] }

func (self classLightmapperRD) Super() Lightmapper {
	var super Lightmapper
	super.ptr = self.ptr
	return super
}

func (self classLightmapperRD) Lightmapper() Lightmapper { return self.Super() }

type classLine2D struct{ Class[classLine2D] }

func (self classLine2D) Super() Node2D { var super Node2D; super.ptr = self.ptr; return super }

func (self classLine2D) Node2D() Node2D { return self.Super() }
func (self classLine2D) SetPoints(points PackedVector2Array) {
	self.ptr.API.Line2D_set_points(self, points)
}
func (self classLine2D) GetPoints() PackedVector2Array {
	return self.ptr.API.Line2D_get_points(self)
}
func (self classLine2D) SetPointPosition(index Int, position Vector2) {
	self.ptr.API.Line2D_set_point_position(self, index, position)
}
func (self classLine2D) GetPointPosition(index Int) Vector2 {
	return self.ptr.API.Line2D_get_point_position(self, index)
}
func (self classLine2D) GetPointCount() Int {
	return self.ptr.API.Line2D_get_point_count(self)
}
func (self classLine2D) AddPoint(position Vector2, index Int) {
	self.ptr.API.Line2D_add_point(self, position, index)
}
func (self classLine2D) RemovePoint(index Int) {
	self.ptr.API.Line2D_remove_point(self, index)
}
func (self classLine2D) ClearPoints() {
	self.ptr.API.Line2D_clear_points(self)
}
func (self classLine2D) SetClosed(closed bool) {
	self.ptr.API.Line2D_set_closed(self, closed)
}
func (self classLine2D) IsClosed() bool {
	return self.ptr.API.Line2D_is_closed(self)
}
func (self classLine2D) SetWidth(width Float) {
	self.ptr.API.Line2D_set_width(self, width)
}
func (self classLine2D) GetWidth() Float {
	return self.ptr.API.Line2D_get_width(self)
}
func (self classLine2D) SetCurve(curve Curve) {
	self.ptr.API.Line2D_set_curve(self, curve)
}
func (self classLine2D) GetCurve() Curve {
	return self.ptr.API.Line2D_get_curve(self)
}
func (self classLine2D) SetDefaultColor(color Color) {
	self.ptr.API.Line2D_set_default_color(self, color)
}
func (self classLine2D) GetDefaultColor() Color {
	return self.ptr.API.Line2D_get_default_color(self)
}
func (self classLine2D) SetGradient(color Gradient) {
	self.ptr.API.Line2D_set_gradient(self, color)
}
func (self classLine2D) GetGradient() Gradient {
	return self.ptr.API.Line2D_get_gradient(self)
}
func (self classLine2D) SetTexture(texture Texture2D) {
	self.ptr.API.Line2D_set_texture(self, texture)
}
func (self classLine2D) GetTexture() Texture2D {
	return self.ptr.API.Line2D_get_texture(self)
}
func (self classLine2D) SetTextureMode(mode Line2DLineTextureMode) {
	self.ptr.API.Line2D_set_texture_mode(self, mode)
}
func (self classLine2D) GetTextureMode() Line2DLineTextureMode {
	return self.ptr.API.Line2D_get_texture_mode(self)
}
func (self classLine2D) SetJointMode(mode Line2DLineJointMode) {
	self.ptr.API.Line2D_set_joint_mode(self, mode)
}
func (self classLine2D) GetJointMode() Line2DLineJointMode {
	return self.ptr.API.Line2D_get_joint_mode(self)
}
func (self classLine2D) SetBeginCapMode(mode Line2DLineCapMode) {
	self.ptr.API.Line2D_set_begin_cap_mode(self, mode)
}
func (self classLine2D) GetBeginCapMode() Line2DLineCapMode {
	return self.ptr.API.Line2D_get_begin_cap_mode(self)
}
func (self classLine2D) SetEndCapMode(mode Line2DLineCapMode) {
	self.ptr.API.Line2D_set_end_cap_mode(self, mode)
}
func (self classLine2D) GetEndCapMode() Line2DLineCapMode {
	return self.ptr.API.Line2D_get_end_cap_mode(self)
}
func (self classLine2D) SetSharpLimit(limit Float) {
	self.ptr.API.Line2D_set_sharp_limit(self, limit)
}
func (self classLine2D) GetSharpLimit() Float {
	return self.ptr.API.Line2D_get_sharp_limit(self)
}
func (self classLine2D) SetRoundPrecision(precision Int) {
	self.ptr.API.Line2D_set_round_precision(self, precision)
}
func (self classLine2D) GetRoundPrecision() Int {
	return self.ptr.API.Line2D_get_round_precision(self)
}
func (self classLine2D) SetAntialiased(antialiased bool) {
	self.ptr.API.Line2D_set_antialiased(self, antialiased)
}
func (self classLine2D) GetAntialiased() bool {
	return self.ptr.API.Line2D_get_antialiased(self)
}

type classLineEdit struct{ Class[classLineEdit] }

func (self classLineEdit) Super() Control { var super Control; super.ptr = self.ptr; return super }

func (self classLineEdit) Control() Control { return self.Super() }
func (self classLineEdit) SetHorizontalAlignment(alignment HorizontalAlignment) {
	self.ptr.API.LineEdit_set_horizontal_alignment(self, alignment)
}
func (self classLineEdit) GetHorizontalAlignment() HorizontalAlignment {
	return self.ptr.API.LineEdit_get_horizontal_alignment(self)
}
func (self classLineEdit) Clear() {
	self.ptr.API.LineEdit_clear(self)
}
func (self classLineEdit) Select(from Int, to Int) {
	self.ptr.API.LineEdit_select(self, from, to)
}
func (self classLineEdit) SelectAll() {
	self.ptr.API.LineEdit_select_all(self)
}
func (self classLineEdit) Deselect() {
	self.ptr.API.LineEdit_deselect(self)
}
func (self classLineEdit) HasSelection() bool {
	return self.ptr.API.LineEdit_has_selection(self)
}
func (self classLineEdit) GetSelectedText() String {
	return self.ptr.API.LineEdit_get_selected_text(self)
}
func (self classLineEdit) GetSelectionFromColumn() Int {
	return self.ptr.API.LineEdit_get_selection_from_column(self)
}
func (self classLineEdit) GetSelectionToColumn() Int {
	return self.ptr.API.LineEdit_get_selection_to_column(self)
}
func (self classLineEdit) SetText(text String) {
	self.ptr.API.LineEdit_set_text(self, text)
}
func (self classLineEdit) GetText() String {
	return self.ptr.API.LineEdit_get_text(self)
}
func (self classLineEdit) GetDrawControlChars() bool {
	return self.ptr.API.LineEdit_get_draw_control_chars(self)
}
func (self classLineEdit) SetDrawControlChars(enable bool) {
	self.ptr.API.LineEdit_set_draw_control_chars(self, enable)
}
func (self classLineEdit) SetTextDirection(direction ControlTextDirection) {
	self.ptr.API.LineEdit_set_text_direction(self, direction)
}
func (self classLineEdit) GetTextDirection() ControlTextDirection {
	return self.ptr.API.LineEdit_get_text_direction(self)
}
func (self classLineEdit) SetLanguage(language String) {
	self.ptr.API.LineEdit_set_language(self, language)
}
func (self classLineEdit) GetLanguage() String {
	return self.ptr.API.LineEdit_get_language(self)
}
func (self classLineEdit) SetStructuredTextBidiOverride(parser TextServerStructuredTextParser) {
	self.ptr.API.LineEdit_set_structured_text_bidi_override(self, parser)
}
func (self classLineEdit) GetStructuredTextBidiOverride() TextServerStructuredTextParser {
	return self.ptr.API.LineEdit_get_structured_text_bidi_override(self)
}
func (self classLineEdit) SetStructuredTextBidiOverrideOptions(args Array) {
	self.ptr.API.LineEdit_set_structured_text_bidi_override_options(self, args)
}
func (self classLineEdit) GetStructuredTextBidiOverrideOptions() Array {
	return self.ptr.API.LineEdit_get_structured_text_bidi_override_options(self)
}
func (self classLineEdit) SetPlaceholder(text String) {
	self.ptr.API.LineEdit_set_placeholder(self, text)
}
func (self classLineEdit) GetPlaceholder() String {
	return self.ptr.API.LineEdit_get_placeholder(self)
}
func (self classLineEdit) SetCaretColumn(position Int) {
	self.ptr.API.LineEdit_set_caret_column(self, position)
}
func (self classLineEdit) GetCaretColumn() Int {
	return self.ptr.API.LineEdit_get_caret_column(self)
}
func (self classLineEdit) GetScrollOffset() Float {
	return self.ptr.API.LineEdit_get_scroll_offset(self)
}
func (self classLineEdit) SetExpandToTextLengthEnabled(enabled bool) {
	self.ptr.API.LineEdit_set_expand_to_text_length_enabled(self, enabled)
}
func (self classLineEdit) IsExpandToTextLengthEnabled() bool {
	return self.ptr.API.LineEdit_is_expand_to_text_length_enabled(self)
}
func (self classLineEdit) SetCaretBlinkEnabled(enabled bool) {
	self.ptr.API.LineEdit_set_caret_blink_enabled(self, enabled)
}
func (self classLineEdit) IsCaretBlinkEnabled() bool {
	return self.ptr.API.LineEdit_is_caret_blink_enabled(self)
}
func (self classLineEdit) SetCaretMidGraphemeEnabled(enabled bool) {
	self.ptr.API.LineEdit_set_caret_mid_grapheme_enabled(self, enabled)
}
func (self classLineEdit) IsCaretMidGraphemeEnabled() bool {
	return self.ptr.API.LineEdit_is_caret_mid_grapheme_enabled(self)
}
func (self classLineEdit) SetCaretForceDisplayed(enabled bool) {
	self.ptr.API.LineEdit_set_caret_force_displayed(self, enabled)
}
func (self classLineEdit) IsCaretForceDisplayed() bool {
	return self.ptr.API.LineEdit_is_caret_force_displayed(self)
}
func (self classLineEdit) SetCaretBlinkInterval(interval Float) {
	self.ptr.API.LineEdit_set_caret_blink_interval(self, interval)
}
func (self classLineEdit) GetCaretBlinkInterval() Float {
	return self.ptr.API.LineEdit_get_caret_blink_interval(self)
}
func (self classLineEdit) SetMaxLength(chars Int) {
	self.ptr.API.LineEdit_set_max_length(self, chars)
}
func (self classLineEdit) GetMaxLength() Int {
	return self.ptr.API.LineEdit_get_max_length(self)
}
func (self classLineEdit) InsertTextAtCaret(text String) {
	self.ptr.API.LineEdit_insert_text_at_caret(self, text)
}
func (self classLineEdit) DeleteCharAtCaret() {
	self.ptr.API.LineEdit_delete_char_at_caret(self)
}
func (self classLineEdit) DeleteText(from_column Int, to_column Int) {
	self.ptr.API.LineEdit_delete_text(self, from_column, to_column)
}
func (self classLineEdit) SetEditable(enabled bool) {
	self.ptr.API.LineEdit_set_editable(self, enabled)
}
func (self classLineEdit) IsEditable() bool {
	return self.ptr.API.LineEdit_is_editable(self)
}
func (self classLineEdit) SetSecret(enabled bool) {
	self.ptr.API.LineEdit_set_secret(self, enabled)
}
func (self classLineEdit) IsSecret() bool {
	return self.ptr.API.LineEdit_is_secret(self)
}
func (self classLineEdit) SetSecretCharacter(character String) {
	self.ptr.API.LineEdit_set_secret_character(self, character)
}
func (self classLineEdit) GetSecretCharacter() String {
	return self.ptr.API.LineEdit_get_secret_character(self)
}
func (self classLineEdit) MenuOption(option Int) {
	self.ptr.API.LineEdit_menu_option(self, option)
}
func (self classLineEdit) GetMenu() PopupMenu {
	return self.ptr.API.LineEdit_get_menu(self)
}
func (self classLineEdit) IsMenuVisible() bool {
	return self.ptr.API.LineEdit_is_menu_visible(self)
}
func (self classLineEdit) SetContextMenuEnabled(enable bool) {
	self.ptr.API.LineEdit_set_context_menu_enabled(self, enable)
}
func (self classLineEdit) IsContextMenuEnabled() bool {
	return self.ptr.API.LineEdit_is_context_menu_enabled(self)
}
func (self classLineEdit) SetVirtualKeyboardEnabled(enable bool) {
	self.ptr.API.LineEdit_set_virtual_keyboard_enabled(self, enable)
}
func (self classLineEdit) IsVirtualKeyboardEnabled() bool {
	return self.ptr.API.LineEdit_is_virtual_keyboard_enabled(self)
}
func (self classLineEdit) SetVirtualKeyboardType(atype LineEditVirtualKeyboardType) {
	self.ptr.API.LineEdit_set_virtual_keyboard_type(self, atype)
}
func (self classLineEdit) GetVirtualKeyboardType() LineEditVirtualKeyboardType {
	return self.ptr.API.LineEdit_get_virtual_keyboard_type(self)
}
func (self classLineEdit) SetClearButtonEnabled(enable bool) {
	self.ptr.API.LineEdit_set_clear_button_enabled(self, enable)
}
func (self classLineEdit) IsClearButtonEnabled() bool {
	return self.ptr.API.LineEdit_is_clear_button_enabled(self)
}
func (self classLineEdit) SetShortcutKeysEnabled(enable bool) {
	self.ptr.API.LineEdit_set_shortcut_keys_enabled(self, enable)
}
func (self classLineEdit) IsShortcutKeysEnabled() bool {
	return self.ptr.API.LineEdit_is_shortcut_keys_enabled(self)
}
func (self classLineEdit) SetMiddleMousePasteEnabled(enable bool) {
	self.ptr.API.LineEdit_set_middle_mouse_paste_enabled(self, enable)
}
func (self classLineEdit) IsMiddleMousePasteEnabled() bool {
	return self.ptr.API.LineEdit_is_middle_mouse_paste_enabled(self)
}
func (self classLineEdit) SetSelectingEnabled(enable bool) {
	self.ptr.API.LineEdit_set_selecting_enabled(self, enable)
}
func (self classLineEdit) IsSelectingEnabled() bool {
	return self.ptr.API.LineEdit_is_selecting_enabled(self)
}
func (self classLineEdit) SetDeselectOnFocusLossEnabled(enable bool) {
	self.ptr.API.LineEdit_set_deselect_on_focus_loss_enabled(self, enable)
}
func (self classLineEdit) IsDeselectOnFocusLossEnabled() bool {
	return self.ptr.API.LineEdit_is_deselect_on_focus_loss_enabled(self)
}
func (self classLineEdit) SetDragAndDropSelectionEnabled(enable bool) {
	self.ptr.API.LineEdit_set_drag_and_drop_selection_enabled(self, enable)
}
func (self classLineEdit) IsDragAndDropSelectionEnabled() bool {
	return self.ptr.API.LineEdit_is_drag_and_drop_selection_enabled(self)
}
func (self classLineEdit) SetRightIcon(icon Texture2D) {
	self.ptr.API.LineEdit_set_right_icon(self, icon)
}
func (self classLineEdit) GetRightIcon() Texture2D {
	return self.ptr.API.LineEdit_get_right_icon(self)
}
func (self classLineEdit) SetFlat(enabled bool) {
	self.ptr.API.LineEdit_set_flat(self, enabled)
}
func (self classLineEdit) IsFlat() bool {
	return self.ptr.API.LineEdit_is_flat(self)
}
func (self classLineEdit) SetSelectAllOnFocus(enabled bool) {
	self.ptr.API.LineEdit_set_select_all_on_focus(self, enabled)
}
func (self classLineEdit) IsSelectAllOnFocus() bool {
	return self.ptr.API.LineEdit_is_select_all_on_focus(self)
}

type classLinkButton struct{ Class[classLinkButton] }

func (self classLinkButton) Super() BaseButton {
	var super BaseButton
	super.ptr = self.ptr
	return super
}

func (self classLinkButton) BaseButton() BaseButton { return self.Super() }
func (self classLinkButton) SetText(text String) {
	self.ptr.API.LinkButton_set_text(self, text)
}
func (self classLinkButton) GetText() String {
	return self.ptr.API.LinkButton_get_text(self)
}
func (self classLinkButton) SetTextDirection(direction ControlTextDirection) {
	self.ptr.API.LinkButton_set_text_direction(self, direction)
}
func (self classLinkButton) GetTextDirection() ControlTextDirection {
	return self.ptr.API.LinkButton_get_text_direction(self)
}
func (self classLinkButton) SetLanguage(language String) {
	self.ptr.API.LinkButton_set_language(self, language)
}
func (self classLinkButton) GetLanguage() String {
	return self.ptr.API.LinkButton_get_language(self)
}
func (self classLinkButton) SetUri(uri String) {
	self.ptr.API.LinkButton_set_uri(self, uri)
}
func (self classLinkButton) GetUri() String {
	return self.ptr.API.LinkButton_get_uri(self)
}
func (self classLinkButton) SetUnderlineMode(underline_mode LinkButtonUnderlineMode) {
	self.ptr.API.LinkButton_set_underline_mode(self, underline_mode)
}
func (self classLinkButton) GetUnderlineMode() LinkButtonUnderlineMode {
	return self.ptr.API.LinkButton_get_underline_mode(self)
}
func (self classLinkButton) SetStructuredTextBidiOverride(parser TextServerStructuredTextParser) {
	self.ptr.API.LinkButton_set_structured_text_bidi_override(self, parser)
}
func (self classLinkButton) GetStructuredTextBidiOverride() TextServerStructuredTextParser {
	return self.ptr.API.LinkButton_get_structured_text_bidi_override(self)
}
func (self classLinkButton) SetStructuredTextBidiOverrideOptions(args Array) {
	self.ptr.API.LinkButton_set_structured_text_bidi_override_options(self, args)
}
func (self classLinkButton) GetStructuredTextBidiOverrideOptions() Array {
	return self.ptr.API.LinkButton_get_structured_text_bidi_override_options(self)
}

type classMainLoop struct{ Class[classMainLoop] }

func (self classMainLoop) Super() Object { var super Object; super.ptr = self.ptr; return super }

func (self classMainLoop) Object() Object { return self.Super() }

type classMarginContainer struct{ Class[classMarginContainer] }

func (self classMarginContainer) Super() Container {
	var super Container
	super.ptr = self.ptr
	return super
}

func (self classMarginContainer) Container() Container { return self.Super() }

type classMarker2D struct{ Class[classMarker2D] }

func (self classMarker2D) Super() Node2D { var super Node2D; super.ptr = self.ptr; return super }

func (self classMarker2D) Node2D() Node2D { return self.Super() }
func (self classMarker2D) SetGizmoExtents(extents Float) {
	self.ptr.API.Marker2D_set_gizmo_extents(self, extents)
}
func (self classMarker2D) GetGizmoExtents() Float {
	return self.ptr.API.Marker2D_get_gizmo_extents(self)
}

type classMarker3D struct{ Class[classMarker3D] }

func (self classMarker3D) Super() Node3D { var super Node3D; super.ptr = self.ptr; return super }

func (self classMarker3D) Node3D() Node3D { return self.Super() }
func (self classMarker3D) SetGizmoExtents(extents Float) {
	self.ptr.API.Marker3D_set_gizmo_extents(self, extents)
}
func (self classMarker3D) GetGizmoExtents() Float {
	return self.ptr.API.Marker3D_get_gizmo_extents(self)
}

type classMarshalls struct{ Class[classMarshalls] }

func (self classMarshalls) Super() Object { var super Object; super.ptr = self.ptr; return super }

func (self classMarshalls) Object() Object { return self.Super() }

func (self classMarshalls) isSingleton() {}
func (self classMarshalls) VariantToBase64(variant Variant, full_objects bool) String {
	return self.ptr.API.Marshalls_variant_to_base64(self, variant, full_objects)
}
func (self classMarshalls) Base64ToVariant(base64_str String, allow_objects bool) Variant {
	return self.ptr.API.Marshalls_base64_to_variant(self, base64_str, allow_objects)
}
func (self classMarshalls) RawToBase64(array PackedByteArray) String {
	return self.ptr.API.Marshalls_raw_to_base64(self, array)
}
func (self classMarshalls) Base64ToRaw(base64_str String) PackedByteArray {
	return self.ptr.API.Marshalls_base64_to_raw(self, base64_str)
}
func (self classMarshalls) Utf8ToBase64(utf8_str String) String {
	return self.ptr.API.Marshalls_utf8_to_base64(self, utf8_str)
}
func (self classMarshalls) Base64ToUtf8(base64_str String) String {
	return self.ptr.API.Marshalls_base64_to_utf8(self, base64_str)
}

type classMaterial struct{ Class[classMaterial] }

func (self classMaterial) Super() Resource { var super Resource; super.ptr = self.ptr; return super }

func (self classMaterial) Resource() Resource { return self.Super() }
func (self classMaterial) SetNextPass(next_pass Material) {
	self.ptr.API.Material_set_next_pass(self, next_pass)
}
func (self classMaterial) GetNextPass() Material {
	return self.ptr.API.Material_get_next_pass(self)
}
func (self classMaterial) SetRenderPriority(priority Int) {
	self.ptr.API.Material_set_render_priority(self, priority)
}
func (self classMaterial) GetRenderPriority() Int {
	return self.ptr.API.Material_get_render_priority(self)
}
func (self classMaterial) InspectNativeShaderCode() {
	self.ptr.API.Material_inspect_native_shader_code(self)
}
func (self classMaterial) CreatePlaceholder() Resource {
	return self.ptr.API.Material_create_placeholder(self)
}

type classMenuBar struct{ Class[classMenuBar] }

func (self classMenuBar) Super() Control { var super Control; super.ptr = self.ptr; return super }

func (self classMenuBar) Control() Control { return self.Super() }
func (self classMenuBar) SetSwitchOnHover(enable bool) {
	self.ptr.API.MenuBar_set_switch_on_hover(self, enable)
}
func (self classMenuBar) IsSwitchOnHover() bool {
	return self.ptr.API.MenuBar_is_switch_on_hover(self)
}
func (self classMenuBar) SetDisableShortcuts(disabled bool) {
	self.ptr.API.MenuBar_set_disable_shortcuts(self, disabled)
}
func (self classMenuBar) SetPreferGlobalMenu(enabled bool) {
	self.ptr.API.MenuBar_set_prefer_global_menu(self, enabled)
}
func (self classMenuBar) IsPreferGlobalMenu() bool {
	return self.ptr.API.MenuBar_is_prefer_global_menu(self)
}
func (self classMenuBar) IsNativeMenu() bool {
	return self.ptr.API.MenuBar_is_native_menu(self)
}
func (self classMenuBar) GetMenuCount() Int {
	return self.ptr.API.MenuBar_get_menu_count(self)
}
func (self classMenuBar) SetTextDirection(direction ControlTextDirection) {
	self.ptr.API.MenuBar_set_text_direction(self, direction)
}
func (self classMenuBar) GetTextDirection() ControlTextDirection {
	return self.ptr.API.MenuBar_get_text_direction(self)
}
func (self classMenuBar) SetLanguage(language String) {
	self.ptr.API.MenuBar_set_language(self, language)
}
func (self classMenuBar) GetLanguage() String {
	return self.ptr.API.MenuBar_get_language(self)
}
func (self classMenuBar) SetFlat(enabled bool) {
	self.ptr.API.MenuBar_set_flat(self, enabled)
}
func (self classMenuBar) IsFlat() bool {
	return self.ptr.API.MenuBar_is_flat(self)
}
func (self classMenuBar) SetStartIndex(enabled Int) {
	self.ptr.API.MenuBar_set_start_index(self, enabled)
}
func (self classMenuBar) GetStartIndex() Int {
	return self.ptr.API.MenuBar_get_start_index(self)
}
func (self classMenuBar) SetMenuTitle(menu Int, title String) {
	self.ptr.API.MenuBar_set_menu_title(self, menu, title)
}
func (self classMenuBar) GetMenuTitle(menu Int) String {
	return self.ptr.API.MenuBar_get_menu_title(self, menu)
}
func (self classMenuBar) SetMenuTooltip(menu Int, tooltip String) {
	self.ptr.API.MenuBar_set_menu_tooltip(self, menu, tooltip)
}
func (self classMenuBar) GetMenuTooltip(menu Int) String {
	return self.ptr.API.MenuBar_get_menu_tooltip(self, menu)
}
func (self classMenuBar) SetMenuDisabled(menu Int, disabled bool) {
	self.ptr.API.MenuBar_set_menu_disabled(self, menu, disabled)
}
func (self classMenuBar) IsMenuDisabled(menu Int) bool {
	return self.ptr.API.MenuBar_is_menu_disabled(self, menu)
}
func (self classMenuBar) SetMenuHidden(menu Int, hidden bool) {
	self.ptr.API.MenuBar_set_menu_hidden(self, menu, hidden)
}
func (self classMenuBar) IsMenuHidden(menu Int) bool {
	return self.ptr.API.MenuBar_is_menu_hidden(self, menu)
}
func (self classMenuBar) GetMenuPopup(menu Int) PopupMenu {
	return self.ptr.API.MenuBar_get_menu_popup(self, menu)
}

type classMenuButton struct{ Class[classMenuButton] }

func (self classMenuButton) Super() Button { var super Button; super.ptr = self.ptr; return super }

func (self classMenuButton) Button() Button { return self.Super() }
func (self classMenuButton) GetPopup() PopupMenu {
	return self.ptr.API.MenuButton_get_popup(self)
}
func (self classMenuButton) ShowPopup() {
	self.ptr.API.MenuButton_show_popup(self)
}
func (self classMenuButton) SetSwitchOnHover(enable bool) {
	self.ptr.API.MenuButton_set_switch_on_hover(self, enable)
}
func (self classMenuButton) IsSwitchOnHover() bool {
	return self.ptr.API.MenuButton_is_switch_on_hover(self)
}
func (self classMenuButton) SetDisableShortcuts(disabled bool) {
	self.ptr.API.MenuButton_set_disable_shortcuts(self, disabled)
}
func (self classMenuButton) SetItemCount(count Int) {
	self.ptr.API.MenuButton_set_item_count(self, count)
}
func (self classMenuButton) GetItemCount() Int {
	return self.ptr.API.MenuButton_get_item_count(self)
}

type classMesh struct{ Class[classMesh] }

func (self classMesh) Super() Resource { var super Resource; super.ptr = self.ptr; return super }

func (self classMesh) Resource() Resource { return self.Super() }
func (self classMesh) SetLightmapSizeHint(size Vector2i) {
	self.ptr.API.Mesh_set_lightmap_size_hint(self, size)
}
func (self classMesh) GetLightmapSizeHint() Vector2i {
	return self.ptr.API.Mesh_get_lightmap_size_hint(self)
}
func (self classMesh) GetAabb() AABB {
	return self.ptr.API.Mesh_get_aabb(self)
}
func (self classMesh) GetFaces() PackedVector3Array {
	return self.ptr.API.Mesh_get_faces(self)
}
func (self classMesh) GetSurfaceCount() Int {
	return self.ptr.API.Mesh_get_surface_count(self)
}
func (self classMesh) SurfaceGetArrays(surf_idx Int) Array {
	return self.ptr.API.Mesh_surface_get_arrays(self, surf_idx)
}
func (self classMesh) SurfaceGetBlendShapeArrays(surf_idx Int) ArrayOf[Array] {
	return self.ptr.API.Mesh_surface_get_blend_shape_arrays(self, surf_idx)
}
func (self classMesh) SurfaceSetMaterial(surf_idx Int, material Material) {
	self.ptr.API.Mesh_surface_set_material(self, surf_idx, material)
}
func (self classMesh) SurfaceGetMaterial(surf_idx Int) Material {
	return self.ptr.API.Mesh_surface_get_material(self, surf_idx)
}
func (self classMesh) CreatePlaceholder() Resource {
	return self.ptr.API.Mesh_create_placeholder(self)
}
func (self classMesh) CreateTrimeshShape() ConcavePolygonShape3D {
	return self.ptr.API.Mesh_create_trimesh_shape(self)
}
func (self classMesh) CreateConvexShape(clean bool, simplify bool) ConvexPolygonShape3D {
	return self.ptr.API.Mesh_create_convex_shape(self, clean, simplify)
}
func (self classMesh) CreateOutline(margin Float) Mesh {
	return self.ptr.API.Mesh_create_outline(self, margin)
}
func (self classMesh) GenerateTriangleMesh() TriangleMesh {
	return self.ptr.API.Mesh_generate_triangle_mesh(self)
}

type classMeshConvexDecompositionSettings struct {
	Class[classMeshConvexDecompositionSettings]
}

func (self classMeshConvexDecompositionSettings) Super() RefCounted {
	var super RefCounted
	super.ptr = self.ptr
	return super
}

func (self classMeshConvexDecompositionSettings) RefCounted() RefCounted { return self.Super() }
func (self classMeshConvexDecompositionSettings) SetMaxConcavity(max_concavity Float) {
	self.ptr.API.MeshConvexDecompositionSettings_set_max_concavity(self, max_concavity)
}
func (self classMeshConvexDecompositionSettings) GetMaxConcavity() Float {
	return self.ptr.API.MeshConvexDecompositionSettings_get_max_concavity(self)
}
func (self classMeshConvexDecompositionSettings) SetSymmetryPlanesClippingBias(symmetry_planes_clipping_bias Float) {
	self.ptr.API.MeshConvexDecompositionSettings_set_symmetry_planes_clipping_bias(self, symmetry_planes_clipping_bias)
}
func (self classMeshConvexDecompositionSettings) GetSymmetryPlanesClippingBias() Float {
	return self.ptr.API.MeshConvexDecompositionSettings_get_symmetry_planes_clipping_bias(self)
}
func (self classMeshConvexDecompositionSettings) SetRevolutionAxesClippingBias(revolution_axes_clipping_bias Float) {
	self.ptr.API.MeshConvexDecompositionSettings_set_revolution_axes_clipping_bias(self, revolution_axes_clipping_bias)
}
func (self classMeshConvexDecompositionSettings) GetRevolutionAxesClippingBias() Float {
	return self.ptr.API.MeshConvexDecompositionSettings_get_revolution_axes_clipping_bias(self)
}
func (self classMeshConvexDecompositionSettings) SetMinVolumePerConvexHull(min_volume_per_convex_hull Float) {
	self.ptr.API.MeshConvexDecompositionSettings_set_min_volume_per_convex_hull(self, min_volume_per_convex_hull)
}
func (self classMeshConvexDecompositionSettings) GetMinVolumePerConvexHull() Float {
	return self.ptr.API.MeshConvexDecompositionSettings_get_min_volume_per_convex_hull(self)
}
func (self classMeshConvexDecompositionSettings) SetResolution(min_volume_per_convex_hull Int) {
	self.ptr.API.MeshConvexDecompositionSettings_set_resolution(self, min_volume_per_convex_hull)
}
func (self classMeshConvexDecompositionSettings) GetResolution() Int {
	return self.ptr.API.MeshConvexDecompositionSettings_get_resolution(self)
}
func (self classMeshConvexDecompositionSettings) SetMaxNumVerticesPerConvexHull(max_num_vertices_per_convex_hull Int) {
	self.ptr.API.MeshConvexDecompositionSettings_set_max_num_vertices_per_convex_hull(self, max_num_vertices_per_convex_hull)
}
func (self classMeshConvexDecompositionSettings) GetMaxNumVerticesPerConvexHull() Int {
	return self.ptr.API.MeshConvexDecompositionSettings_get_max_num_vertices_per_convex_hull(self)
}
func (self classMeshConvexDecompositionSettings) SetPlaneDownsampling(plane_downsampling Int) {
	self.ptr.API.MeshConvexDecompositionSettings_set_plane_downsampling(self, plane_downsampling)
}
func (self classMeshConvexDecompositionSettings) GetPlaneDownsampling() Int {
	return self.ptr.API.MeshConvexDecompositionSettings_get_plane_downsampling(self)
}
func (self classMeshConvexDecompositionSettings) SetConvexHullDownsampling(convex_hull_downsampling Int) {
	self.ptr.API.MeshConvexDecompositionSettings_set_convex_hull_downsampling(self, convex_hull_downsampling)
}
func (self classMeshConvexDecompositionSettings) GetConvexHullDownsampling() Int {
	return self.ptr.API.MeshConvexDecompositionSettings_get_convex_hull_downsampling(self)
}
func (self classMeshConvexDecompositionSettings) SetNormalizeMesh(normalize_mesh bool) {
	self.ptr.API.MeshConvexDecompositionSettings_set_normalize_mesh(self, normalize_mesh)
}
func (self classMeshConvexDecompositionSettings) GetNormalizeMesh() bool {
	return self.ptr.API.MeshConvexDecompositionSettings_get_normalize_mesh(self)
}
func (self classMeshConvexDecompositionSettings) SetMode(mode MeshConvexDecompositionSettingsMode) {
	self.ptr.API.MeshConvexDecompositionSettings_set_mode(self, mode)
}
func (self classMeshConvexDecompositionSettings) GetMode() MeshConvexDecompositionSettingsMode {
	return self.ptr.API.MeshConvexDecompositionSettings_get_mode(self)
}
func (self classMeshConvexDecompositionSettings) SetConvexHullApproximation(convex_hull_approximation bool) {
	self.ptr.API.MeshConvexDecompositionSettings_set_convex_hull_approximation(self, convex_hull_approximation)
}
func (self classMeshConvexDecompositionSettings) GetConvexHullApproximation() bool {
	return self.ptr.API.MeshConvexDecompositionSettings_get_convex_hull_approximation(self)
}
func (self classMeshConvexDecompositionSettings) SetMaxConvexHulls(max_convex_hulls Int) {
	self.ptr.API.MeshConvexDecompositionSettings_set_max_convex_hulls(self, max_convex_hulls)
}
func (self classMeshConvexDecompositionSettings) GetMaxConvexHulls() Int {
	return self.ptr.API.MeshConvexDecompositionSettings_get_max_convex_hulls(self)
}
func (self classMeshConvexDecompositionSettings) SetProjectHullVertices(project_hull_vertices bool) {
	self.ptr.API.MeshConvexDecompositionSettings_set_project_hull_vertices(self, project_hull_vertices)
}
func (self classMeshConvexDecompositionSettings) GetProjectHullVertices() bool {
	return self.ptr.API.MeshConvexDecompositionSettings_get_project_hull_vertices(self)
}

type classMeshDataTool struct{ Class[classMeshDataTool] }

func (self classMeshDataTool) Super() RefCounted {
	var super RefCounted
	super.ptr = self.ptr
	return super
}

func (self classMeshDataTool) RefCounted() RefCounted { return self.Super() }
func (self classMeshDataTool) Clear() {
	self.ptr.API.MeshDataTool_clear(self)
}
func (self classMeshDataTool) CreateFromSurface(mesh ArrayMesh, surface Int) int64 {
	return self.ptr.API.MeshDataTool_create_from_surface(self, mesh, surface)
}
func (self classMeshDataTool) CommitToSurface(mesh ArrayMesh, compression_flags Int) int64 {
	return self.ptr.API.MeshDataTool_commit_to_surface(self, mesh, compression_flags)
}
func (self classMeshDataTool) GetFormat() Int {
	return self.ptr.API.MeshDataTool_get_format(self)
}
func (self classMeshDataTool) GetVertexCount() Int {
	return self.ptr.API.MeshDataTool_get_vertex_count(self)
}
func (self classMeshDataTool) GetEdgeCount() Int {
	return self.ptr.API.MeshDataTool_get_edge_count(self)
}
func (self classMeshDataTool) GetFaceCount() Int {
	return self.ptr.API.MeshDataTool_get_face_count(self)
}
func (self classMeshDataTool) SetVertex(idx Int, vertex Vector3) {
	self.ptr.API.MeshDataTool_set_vertex(self, idx, vertex)
}
func (self classMeshDataTool) GetVertex(idx Int) Vector3 {
	return self.ptr.API.MeshDataTool_get_vertex(self, idx)
}
func (self classMeshDataTool) SetVertexNormal(idx Int, normal Vector3) {
	self.ptr.API.MeshDataTool_set_vertex_normal(self, idx, normal)
}
func (self classMeshDataTool) GetVertexNormal(idx Int) Vector3 {
	return self.ptr.API.MeshDataTool_get_vertex_normal(self, idx)
}
func (self classMeshDataTool) SetVertexTangent(idx Int, tangent Plane) {
	self.ptr.API.MeshDataTool_set_vertex_tangent(self, idx, tangent)
}
func (self classMeshDataTool) GetVertexTangent(idx Int) Plane {
	return self.ptr.API.MeshDataTool_get_vertex_tangent(self, idx)
}
func (self classMeshDataTool) SetVertexUv(idx Int, uv Vector2) {
	self.ptr.API.MeshDataTool_set_vertex_uv(self, idx, uv)
}
func (self classMeshDataTool) GetVertexUv(idx Int) Vector2 {
	return self.ptr.API.MeshDataTool_get_vertex_uv(self, idx)
}
func (self classMeshDataTool) SetVertexUv2(idx Int, uv2 Vector2) {
	self.ptr.API.MeshDataTool_set_vertex_uv2(self, idx, uv2)
}
func (self classMeshDataTool) GetVertexUv2(idx Int) Vector2 {
	return self.ptr.API.MeshDataTool_get_vertex_uv2(self, idx)
}
func (self classMeshDataTool) SetVertexColor(idx Int, color Color) {
	self.ptr.API.MeshDataTool_set_vertex_color(self, idx, color)
}
func (self classMeshDataTool) GetVertexColor(idx Int) Color {
	return self.ptr.API.MeshDataTool_get_vertex_color(self, idx)
}
func (self classMeshDataTool) SetVertexBones(idx Int, bones PackedInt32Array) {
	self.ptr.API.MeshDataTool_set_vertex_bones(self, idx, bones)
}
func (self classMeshDataTool) GetVertexBones(idx Int) PackedInt32Array {
	return self.ptr.API.MeshDataTool_get_vertex_bones(self, idx)
}
func (self classMeshDataTool) SetVertexWeights(idx Int, weights PackedFloat32Array) {
	self.ptr.API.MeshDataTool_set_vertex_weights(self, idx, weights)
}
func (self classMeshDataTool) GetVertexWeights(idx Int) PackedFloat32Array {
	return self.ptr.API.MeshDataTool_get_vertex_weights(self, idx)
}
func (self classMeshDataTool) SetVertexMeta(idx Int, meta Variant) {
	self.ptr.API.MeshDataTool_set_vertex_meta(self, idx, meta)
}
func (self classMeshDataTool) GetVertexMeta(idx Int) Variant {
	return self.ptr.API.MeshDataTool_get_vertex_meta(self, idx)
}
func (self classMeshDataTool) GetVertexEdges(idx Int) PackedInt32Array {
	return self.ptr.API.MeshDataTool_get_vertex_edges(self, idx)
}
func (self classMeshDataTool) GetVertexFaces(idx Int) PackedInt32Array {
	return self.ptr.API.MeshDataTool_get_vertex_faces(self, idx)
}
func (self classMeshDataTool) GetEdgeVertex(idx Int, vertex Int) Int {
	return self.ptr.API.MeshDataTool_get_edge_vertex(self, idx, vertex)
}
func (self classMeshDataTool) GetEdgeFaces(idx Int) PackedInt32Array {
	return self.ptr.API.MeshDataTool_get_edge_faces(self, idx)
}
func (self classMeshDataTool) SetEdgeMeta(idx Int, meta Variant) {
	self.ptr.API.MeshDataTool_set_edge_meta(self, idx, meta)
}
func (self classMeshDataTool) GetEdgeMeta(idx Int) Variant {
	return self.ptr.API.MeshDataTool_get_edge_meta(self, idx)
}
func (self classMeshDataTool) GetFaceVertex(idx Int, vertex Int) Int {
	return self.ptr.API.MeshDataTool_get_face_vertex(self, idx, vertex)
}
func (self classMeshDataTool) GetFaceEdge(idx Int, edge Int) Int {
	return self.ptr.API.MeshDataTool_get_face_edge(self, idx, edge)
}
func (self classMeshDataTool) SetFaceMeta(idx Int, meta Variant) {
	self.ptr.API.MeshDataTool_set_face_meta(self, idx, meta)
}
func (self classMeshDataTool) GetFaceMeta(idx Int) Variant {
	return self.ptr.API.MeshDataTool_get_face_meta(self, idx)
}
func (self classMeshDataTool) GetFaceNormal(idx Int) Vector3 {
	return self.ptr.API.MeshDataTool_get_face_normal(self, idx)
}
func (self classMeshDataTool) SetMaterial(material Material) {
	self.ptr.API.MeshDataTool_set_material(self, material)
}
func (self classMeshDataTool) GetMaterial() Material {
	return self.ptr.API.MeshDataTool_get_material(self)
}

type classMeshInstance2D struct{ Class[classMeshInstance2D] }

func (self classMeshInstance2D) Super() Node2D { var super Node2D; super.ptr = self.ptr; return super }

func (self classMeshInstance2D) Node2D() Node2D { return self.Super() }
func (self classMeshInstance2D) SetMesh(mesh Mesh) {
	self.ptr.API.MeshInstance2D_set_mesh(self, mesh)
}
func (self classMeshInstance2D) GetMesh() Mesh {
	return self.ptr.API.MeshInstance2D_get_mesh(self)
}
func (self classMeshInstance2D) SetTexture(texture Texture2D) {
	self.ptr.API.MeshInstance2D_set_texture(self, texture)
}
func (self classMeshInstance2D) GetTexture() Texture2D {
	return self.ptr.API.MeshInstance2D_get_texture(self)
}

type classMeshInstance3D struct{ Class[classMeshInstance3D] }

func (self classMeshInstance3D) Super() GeometryInstance3D {
	var super GeometryInstance3D
	super.ptr = self.ptr
	return super
}

func (self classMeshInstance3D) GeometryInstance3D() GeometryInstance3D { return self.Super() }
func (self classMeshInstance3D) SetMesh(mesh Mesh) {
	self.ptr.API.MeshInstance3D_set_mesh(self, mesh)
}
func (self classMeshInstance3D) GetMesh() Mesh {
	return self.ptr.API.MeshInstance3D_get_mesh(self)
}
func (self classMeshInstance3D) SetSkeletonPath(skeleton_path NodePath) {
	self.ptr.API.MeshInstance3D_set_skeleton_path(self, skeleton_path)
}
func (self classMeshInstance3D) GetSkeletonPath() NodePath {
	return self.ptr.API.MeshInstance3D_get_skeleton_path(self)
}
func (self classMeshInstance3D) SetSkin(skin Skin) {
	self.ptr.API.MeshInstance3D_set_skin(self, skin)
}
func (self classMeshInstance3D) GetSkin() Skin {
	return self.ptr.API.MeshInstance3D_get_skin(self)
}
func (self classMeshInstance3D) GetSurfaceOverrideMaterialCount() Int {
	return self.ptr.API.MeshInstance3D_get_surface_override_material_count(self)
}
func (self classMeshInstance3D) SetSurfaceOverrideMaterial(surface Int, material Material) {
	self.ptr.API.MeshInstance3D_set_surface_override_material(self, surface, material)
}
func (self classMeshInstance3D) GetSurfaceOverrideMaterial(surface Int) Material {
	return self.ptr.API.MeshInstance3D_get_surface_override_material(self, surface)
}
func (self classMeshInstance3D) GetActiveMaterial(surface Int) Material {
	return self.ptr.API.MeshInstance3D_get_active_material(self, surface)
}
func (self classMeshInstance3D) CreateTrimeshCollision() {
	self.ptr.API.MeshInstance3D_create_trimesh_collision(self)
}
func (self classMeshInstance3D) CreateConvexCollision(clean bool, simplify bool) {
	self.ptr.API.MeshInstance3D_create_convex_collision(self, clean, simplify)
}
func (self classMeshInstance3D) CreateMultipleConvexCollisions(settings MeshConvexDecompositionSettings) {
	self.ptr.API.MeshInstance3D_create_multiple_convex_collisions(self, settings)
}
func (self classMeshInstance3D) GetBlendShapeCount() Int {
	return self.ptr.API.MeshInstance3D_get_blend_shape_count(self)
}
func (self classMeshInstance3D) FindBlendShapeByName(name StringName) Int {
	return self.ptr.API.MeshInstance3D_find_blend_shape_by_name(self, name)
}
func (self classMeshInstance3D) GetBlendShapeValue(blend_shape_idx Int) Float {
	return self.ptr.API.MeshInstance3D_get_blend_shape_value(self, blend_shape_idx)
}
func (self classMeshInstance3D) SetBlendShapeValue(blend_shape_idx Int, value Float) {
	self.ptr.API.MeshInstance3D_set_blend_shape_value(self, blend_shape_idx, value)
}
func (self classMeshInstance3D) CreateDebugTangents() {
	self.ptr.API.MeshInstance3D_create_debug_tangents(self)
}

type classMeshLibrary struct{ Class[classMeshLibrary] }

func (self classMeshLibrary) Super() Resource { var super Resource; super.ptr = self.ptr; return super }

func (self classMeshLibrary) Resource() Resource { return self.Super() }
func (self classMeshLibrary) CreateItem(id Int) {
	self.ptr.API.MeshLibrary_create_item(self, id)
}
func (self classMeshLibrary) SetItemName(id Int, name String) {
	self.ptr.API.MeshLibrary_set_item_name(self, id, name)
}
func (self classMeshLibrary) SetItemMesh(id Int, mesh Mesh) {
	self.ptr.API.MeshLibrary_set_item_mesh(self, id, mesh)
}
func (self classMeshLibrary) SetItemMeshTransform(id Int, mesh_transform Transform3D) {
	self.ptr.API.MeshLibrary_set_item_mesh_transform(self, id, mesh_transform)
}
func (self classMeshLibrary) SetItemNavigationMesh(id Int, navigation_mesh NavigationMesh) {
	self.ptr.API.MeshLibrary_set_item_navigation_mesh(self, id, navigation_mesh)
}
func (self classMeshLibrary) SetItemNavigationMeshTransform(id Int, navigation_mesh Transform3D) {
	self.ptr.API.MeshLibrary_set_item_navigation_mesh_transform(self, id, navigation_mesh)
}
func (self classMeshLibrary) SetItemNavigationLayers(id Int, navigation_layers Int) {
	self.ptr.API.MeshLibrary_set_item_navigation_layers(self, id, navigation_layers)
}
func (self classMeshLibrary) SetItemShapes(id Int, shapes Array) {
	self.ptr.API.MeshLibrary_set_item_shapes(self, id, shapes)
}
func (self classMeshLibrary) SetItemPreview(id Int, texture Texture2D) {
	self.ptr.API.MeshLibrary_set_item_preview(self, id, texture)
}
func (self classMeshLibrary) GetItemName(id Int) String {
	return self.ptr.API.MeshLibrary_get_item_name(self, id)
}
func (self classMeshLibrary) GetItemMesh(id Int) Mesh {
	return self.ptr.API.MeshLibrary_get_item_mesh(self, id)
}
func (self classMeshLibrary) GetItemMeshTransform(id Int) Transform3D {
	return self.ptr.API.MeshLibrary_get_item_mesh_transform(self, id)
}
func (self classMeshLibrary) GetItemNavigationMesh(id Int) NavigationMesh {
	return self.ptr.API.MeshLibrary_get_item_navigation_mesh(self, id)
}
func (self classMeshLibrary) GetItemNavigationMeshTransform(id Int) Transform3D {
	return self.ptr.API.MeshLibrary_get_item_navigation_mesh_transform(self, id)
}
func (self classMeshLibrary) GetItemNavigationLayers(id Int) Int {
	return self.ptr.API.MeshLibrary_get_item_navigation_layers(self, id)
}
func (self classMeshLibrary) GetItemShapes(id Int) Array {
	return self.ptr.API.MeshLibrary_get_item_shapes(self, id)
}
func (self classMeshLibrary) GetItemPreview(id Int) Texture2D {
	return self.ptr.API.MeshLibrary_get_item_preview(self, id)
}
func (self classMeshLibrary) RemoveItem(id Int) {
	self.ptr.API.MeshLibrary_remove_item(self, id)
}
func (self classMeshLibrary) FindItemByName(name String) Int {
	return self.ptr.API.MeshLibrary_find_item_by_name(self, name)
}
func (self classMeshLibrary) Clear() {
	self.ptr.API.MeshLibrary_clear(self)
}
func (self classMeshLibrary) GetItemList() PackedInt32Array {
	return self.ptr.API.MeshLibrary_get_item_list(self)
}
func (self classMeshLibrary) GetLastUnusedItemId() Int {
	return self.ptr.API.MeshLibrary_get_last_unused_item_id(self)
}

type classMeshTexture struct{ Class[classMeshTexture] }

func (self classMeshTexture) Super() Texture2D {
	var super Texture2D
	super.ptr = self.ptr
	return super
}

func (self classMeshTexture) Texture2D() Texture2D { return self.Super() }
func (self classMeshTexture) SetMesh(mesh Mesh) {
	self.ptr.API.MeshTexture_set_mesh(self, mesh)
}
func (self classMeshTexture) GetMesh() Mesh {
	return self.ptr.API.MeshTexture_get_mesh(self)
}
func (self classMeshTexture) SetImageSize(size Vector2) {
	self.ptr.API.MeshTexture_set_image_size(self, size)
}
func (self classMeshTexture) GetImageSize() Vector2 {
	return self.ptr.API.MeshTexture_get_image_size(self)
}
func (self classMeshTexture) SetBaseTexture(texture Texture2D) {
	self.ptr.API.MeshTexture_set_base_texture(self, texture)
}
func (self classMeshTexture) GetBaseTexture() Texture2D {
	return self.ptr.API.MeshTexture_get_base_texture(self)
}

type classMethodTweener struct{ Class[classMethodTweener] }

func (self classMethodTweener) Super() Tweener { var super Tweener; super.ptr = self.ptr; return super }

func (self classMethodTweener) Tweener() Tweener { return self.Super() }
func (self classMethodTweener) SetDelay(delay Float) MethodTweener {
	return self.ptr.API.MethodTweener_set_delay(self, delay)
}
func (self classMethodTweener) SetTrans(trans TweenTransitionType) MethodTweener {
	return self.ptr.API.MethodTweener_set_trans(self, trans)
}
func (self classMethodTweener) SetEase(ease TweenEaseType) MethodTweener {
	return self.ptr.API.MethodTweener_set_ease(self, ease)
}

type classMissingNode struct{ Class[classMissingNode] }

func (self classMissingNode) Super() Node { var super Node; super.ptr = self.ptr; return super }

func (self classMissingNode) Node() Node { return self.Super() }
func (self classMissingNode) SetOriginalClass(name String) {
	self.ptr.API.MissingNode_set_original_class(self, name)
}
func (self classMissingNode) GetOriginalClass() String {
	return self.ptr.API.MissingNode_get_original_class(self)
}
func (self classMissingNode) SetRecordingProperties(enable bool) {
	self.ptr.API.MissingNode_set_recording_properties(self, enable)
}
func (self classMissingNode) IsRecordingProperties() bool {
	return self.ptr.API.MissingNode_is_recording_properties(self)
}

type classMissingResource struct{ Class[classMissingResource] }

func (self classMissingResource) Super() Resource {
	var super Resource
	super.ptr = self.ptr
	return super
}

func (self classMissingResource) Resource() Resource { return self.Super() }
func (self classMissingResource) SetOriginalClass(name String) {
	self.ptr.API.MissingResource_set_original_class(self, name)
}
func (self classMissingResource) GetOriginalClass() String {
	return self.ptr.API.MissingResource_get_original_class(self)
}
func (self classMissingResource) SetRecordingProperties(enable bool) {
	self.ptr.API.MissingResource_set_recording_properties(self, enable)
}
func (self classMissingResource) IsRecordingProperties() bool {
	return self.ptr.API.MissingResource_is_recording_properties(self)
}

type classMobileVRInterface struct{ Class[classMobileVRInterface] }

func (self classMobileVRInterface) Super() XRInterface {
	var super XRInterface
	super.ptr = self.ptr
	return super
}

func (self classMobileVRInterface) XRInterface() XRInterface { return self.Super() }
func (self classMobileVRInterface) SetEyeHeight(eye_height Float) {
	self.ptr.API.MobileVRInterface_set_eye_height(self, eye_height)
}
func (self classMobileVRInterface) GetEyeHeight() Float {
	return self.ptr.API.MobileVRInterface_get_eye_height(self)
}
func (self classMobileVRInterface) SetIod(iod Float) {
	self.ptr.API.MobileVRInterface_set_iod(self, iod)
}
func (self classMobileVRInterface) GetIod() Float {
	return self.ptr.API.MobileVRInterface_get_iod(self)
}
func (self classMobileVRInterface) SetDisplayWidth(display_width Float) {
	self.ptr.API.MobileVRInterface_set_display_width(self, display_width)
}
func (self classMobileVRInterface) GetDisplayWidth() Float {
	return self.ptr.API.MobileVRInterface_get_display_width(self)
}
func (self classMobileVRInterface) SetDisplayToLens(display_to_lens Float) {
	self.ptr.API.MobileVRInterface_set_display_to_lens(self, display_to_lens)
}
func (self classMobileVRInterface) GetDisplayToLens() Float {
	return self.ptr.API.MobileVRInterface_get_display_to_lens(self)
}
func (self classMobileVRInterface) SetOversample(oversample Float) {
	self.ptr.API.MobileVRInterface_set_oversample(self, oversample)
}
func (self classMobileVRInterface) GetOversample() Float {
	return self.ptr.API.MobileVRInterface_get_oversample(self)
}
func (self classMobileVRInterface) SetK1(k Float) {
	self.ptr.API.MobileVRInterface_set_k1(self, k)
}
func (self classMobileVRInterface) GetK1() Float {
	return self.ptr.API.MobileVRInterface_get_k1(self)
}
func (self classMobileVRInterface) SetK2(k Float) {
	self.ptr.API.MobileVRInterface_set_k2(self, k)
}
func (self classMobileVRInterface) GetK2() Float {
	return self.ptr.API.MobileVRInterface_get_k2(self)
}

type classMovieWriter struct{ Class[classMovieWriter] }

func (self classMovieWriter) Super() Object { var super Object; super.ptr = self.ptr; return super }

func (self classMovieWriter) Object() Object { return self.Super() }
func (self classMovieWriter) AddWriter(writer MovieWriter) {
	self.ptr.API.MovieWriter_add_writer(self, writer)
}

type classMultiMesh struct{ Class[classMultiMesh] }

func (self classMultiMesh) Super() Resource { var super Resource; super.ptr = self.ptr; return super }

func (self classMultiMesh) Resource() Resource { return self.Super() }
func (self classMultiMesh) SetMesh(mesh Mesh) {
	self.ptr.API.MultiMesh_set_mesh(self, mesh)
}
func (self classMultiMesh) GetMesh() Mesh {
	return self.ptr.API.MultiMesh_get_mesh(self)
}
func (self classMultiMesh) SetUseColors(enable bool) {
	self.ptr.API.MultiMesh_set_use_colors(self, enable)
}
func (self classMultiMesh) IsUsingColors() bool {
	return self.ptr.API.MultiMesh_is_using_colors(self)
}
func (self classMultiMesh) SetUseCustomData(enable bool) {
	self.ptr.API.MultiMesh_set_use_custom_data(self, enable)
}
func (self classMultiMesh) IsUsingCustomData() bool {
	return self.ptr.API.MultiMesh_is_using_custom_data(self)
}
func (self classMultiMesh) SetTransformFormat(format MultiMeshTransformFormat) {
	self.ptr.API.MultiMesh_set_transform_format(self, format)
}
func (self classMultiMesh) GetTransformFormat() MultiMeshTransformFormat {
	return self.ptr.API.MultiMesh_get_transform_format(self)
}
func (self classMultiMesh) SetInstanceCount(count Int) {
	self.ptr.API.MultiMesh_set_instance_count(self, count)
}
func (self classMultiMesh) GetInstanceCount() Int {
	return self.ptr.API.MultiMesh_get_instance_count(self)
}
func (self classMultiMesh) SetVisibleInstanceCount(count Int) {
	self.ptr.API.MultiMesh_set_visible_instance_count(self, count)
}
func (self classMultiMesh) GetVisibleInstanceCount() Int {
	return self.ptr.API.MultiMesh_get_visible_instance_count(self)
}
func (self classMultiMesh) SetInstanceTransform(instance Int, transform Transform3D) {
	self.ptr.API.MultiMesh_set_instance_transform(self, instance, transform)
}
func (self classMultiMesh) SetInstanceTransform2d(instance Int, transform Transform2D) {
	self.ptr.API.MultiMesh_set_instance_transform_2d(self, instance, transform)
}
func (self classMultiMesh) GetInstanceTransform(instance Int) Transform3D {
	return self.ptr.API.MultiMesh_get_instance_transform(self, instance)
}
func (self classMultiMesh) GetInstanceTransform2d(instance Int) Transform2D {
	return self.ptr.API.MultiMesh_get_instance_transform_2d(self, instance)
}
func (self classMultiMesh) SetInstanceColor(instance Int, color Color) {
	self.ptr.API.MultiMesh_set_instance_color(self, instance, color)
}
func (self classMultiMesh) GetInstanceColor(instance Int) Color {
	return self.ptr.API.MultiMesh_get_instance_color(self, instance)
}
func (self classMultiMesh) SetInstanceCustomData(instance Int, custom_data Color) {
	self.ptr.API.MultiMesh_set_instance_custom_data(self, instance, custom_data)
}
func (self classMultiMesh) GetInstanceCustomData(instance Int) Color {
	return self.ptr.API.MultiMesh_get_instance_custom_data(self, instance)
}
func (self classMultiMesh) GetAabb() AABB {
	return self.ptr.API.MultiMesh_get_aabb(self)
}
func (self classMultiMesh) GetBuffer() PackedFloat32Array {
	return self.ptr.API.MultiMesh_get_buffer(self)
}
func (self classMultiMesh) SetBuffer(buffer PackedFloat32Array) {
	self.ptr.API.MultiMesh_set_buffer(self, buffer)
}

type classMultiMeshInstance2D struct {
	Class[classMultiMeshInstance2D]
}

func (self classMultiMeshInstance2D) Super() Node2D {
	var super Node2D
	super.ptr = self.ptr
	return super
}

func (self classMultiMeshInstance2D) Node2D() Node2D { return self.Super() }
func (self classMultiMeshInstance2D) SetMultimesh(multimesh MultiMesh) {
	self.ptr.API.MultiMeshInstance2D_set_multimesh(self, multimesh)
}
func (self classMultiMeshInstance2D) GetMultimesh() MultiMesh {
	return self.ptr.API.MultiMeshInstance2D_get_multimesh(self)
}
func (self classMultiMeshInstance2D) SetTexture(texture Texture2D) {
	self.ptr.API.MultiMeshInstance2D_set_texture(self, texture)
}
func (self classMultiMeshInstance2D) GetTexture() Texture2D {
	return self.ptr.API.MultiMeshInstance2D_get_texture(self)
}

type classMultiMeshInstance3D struct {
	Class[classMultiMeshInstance3D]
}

func (self classMultiMeshInstance3D) Super() GeometryInstance3D {
	var super GeometryInstance3D
	super.ptr = self.ptr
	return super
}

func (self classMultiMeshInstance3D) GeometryInstance3D() GeometryInstance3D { return self.Super() }
func (self classMultiMeshInstance3D) SetMultimesh(multimesh MultiMesh) {
	self.ptr.API.MultiMeshInstance3D_set_multimesh(self, multimesh)
}
func (self classMultiMeshInstance3D) GetMultimesh() MultiMesh {
	return self.ptr.API.MultiMeshInstance3D_get_multimesh(self)
}

type classMultiplayerAPI struct{ Class[classMultiplayerAPI] }

func (self classMultiplayerAPI) Super() RefCounted {
	var super RefCounted
	super.ptr = self.ptr
	return super
}

func (self classMultiplayerAPI) RefCounted() RefCounted { return self.Super() }
func (self classMultiplayerAPI) HasMultiplayerPeer() bool {
	return self.ptr.API.MultiplayerAPI_has_multiplayer_peer(self)
}
func (self classMultiplayerAPI) GetMultiplayerPeer() MultiplayerPeer {
	return self.ptr.API.MultiplayerAPI_get_multiplayer_peer(self)
}
func (self classMultiplayerAPI) SetMultiplayerPeer(peer MultiplayerPeer) {
	self.ptr.API.MultiplayerAPI_set_multiplayer_peer(self, peer)
}
func (self classMultiplayerAPI) GetUniqueId() Int {
	return self.ptr.API.MultiplayerAPI_get_unique_id(self)
}
func (self classMultiplayerAPI) IsServer() bool {
	return self.ptr.API.MultiplayerAPI_is_server(self)
}
func (self classMultiplayerAPI) GetRemoteSenderId() Int {
	return self.ptr.API.MultiplayerAPI_get_remote_sender_id(self)
}
func (self classMultiplayerAPI) Poll() int64 {
	return self.ptr.API.MultiplayerAPI_poll(self)
}
func (self classMultiplayerAPI) Rpc(peer Int, object Object, method StringName, arguments Array) int64 {
	return self.ptr.API.MultiplayerAPI_rpc(self, peer, object, method, arguments)
}
func (self classMultiplayerAPI) ObjectConfigurationAdd(object Object, configuration Variant) int64 {
	return self.ptr.API.MultiplayerAPI_object_configuration_add(self, object, configuration)
}
func (self classMultiplayerAPI) ObjectConfigurationRemove(object Object, configuration Variant) int64 {
	return self.ptr.API.MultiplayerAPI_object_configuration_remove(self, object, configuration)
}
func (self classMultiplayerAPI) GetPeers() PackedInt32Array {
	return self.ptr.API.MultiplayerAPI_get_peers(self)
}
func (self classMultiplayerAPI) SetDefaultInterface(interface_name StringName) {
	self.ptr.API.MultiplayerAPI_set_default_interface(self, interface_name)
}
func (self classMultiplayerAPI) GetDefaultInterface() StringName {
	return self.ptr.API.MultiplayerAPI_get_default_interface(self)
}
func (self classMultiplayerAPI) CreateDefaultInterface() MultiplayerAPI {
	return self.ptr.API.MultiplayerAPI_create_default_interface(self)
}

type classMultiplayerAPIExtension struct {
	Class[classMultiplayerAPIExtension]
}

func (self classMultiplayerAPIExtension) Super() MultiplayerAPI {
	var super MultiplayerAPI
	super.ptr = self.ptr
	return super
}

func (self classMultiplayerAPIExtension) MultiplayerAPI() MultiplayerAPI { return self.Super() }

type classMultiplayerPeer struct{ Class[classMultiplayerPeer] }

func (self classMultiplayerPeer) Super() PacketPeer {
	var super PacketPeer
	super.ptr = self.ptr
	return super
}

func (self classMultiplayerPeer) PacketPeer() PacketPeer { return self.Super() }
func (self classMultiplayerPeer) SetTransferChannel(channel Int) {
	self.ptr.API.MultiplayerPeer_set_transfer_channel(self, channel)
}
func (self classMultiplayerPeer) GetTransferChannel() Int {
	return self.ptr.API.MultiplayerPeer_get_transfer_channel(self)
}
func (self classMultiplayerPeer) SetTransferMode(mode MultiplayerPeerTransferMode) {
	self.ptr.API.MultiplayerPeer_set_transfer_mode(self, mode)
}
func (self classMultiplayerPeer) GetTransferMode() MultiplayerPeerTransferMode {
	return self.ptr.API.MultiplayerPeer_get_transfer_mode(self)
}
func (self classMultiplayerPeer) SetTargetPeer(id Int) {
	self.ptr.API.MultiplayerPeer_set_target_peer(self, id)
}
func (self classMultiplayerPeer) GetPacketPeer() Int {
	return self.ptr.API.MultiplayerPeer_get_packet_peer(self)
}
func (self classMultiplayerPeer) GetPacketChannel() Int {
	return self.ptr.API.MultiplayerPeer_get_packet_channel(self)
}
func (self classMultiplayerPeer) GetPacketMode() MultiplayerPeerTransferMode {
	return self.ptr.API.MultiplayerPeer_get_packet_mode(self)
}
func (self classMultiplayerPeer) Poll() {
	self.ptr.API.MultiplayerPeer_poll(self)
}
func (self classMultiplayerPeer) Close() {
	self.ptr.API.MultiplayerPeer_close(self)
}
func (self classMultiplayerPeer) DisconnectPeer(peer Int, force bool) {
	self.ptr.API.MultiplayerPeer_disconnect_peer(self, peer, force)
}
func (self classMultiplayerPeer) GetConnectionStatus() MultiplayerPeerConnectionStatus {
	return self.ptr.API.MultiplayerPeer_get_connection_status(self)
}
func (self classMultiplayerPeer) GetUniqueId() Int {
	return self.ptr.API.MultiplayerPeer_get_unique_id(self)
}
func (self classMultiplayerPeer) GenerateUniqueId() Int {
	return self.ptr.API.MultiplayerPeer_generate_unique_id(self)
}
func (self classMultiplayerPeer) SetRefuseNewConnections(enable bool) {
	self.ptr.API.MultiplayerPeer_set_refuse_new_connections(self, enable)
}
func (self classMultiplayerPeer) IsRefusingNewConnections() bool {
	return self.ptr.API.MultiplayerPeer_is_refusing_new_connections(self)
}
func (self classMultiplayerPeer) IsServerRelaySupported() bool {
	return self.ptr.API.MultiplayerPeer_is_server_relay_supported(self)
}

type classMultiplayerPeerExtension struct {
	Class[classMultiplayerPeerExtension]
}

func (self classMultiplayerPeerExtension) Super() MultiplayerPeer {
	var super MultiplayerPeer
	super.ptr = self.ptr
	return super
}

func (self classMultiplayerPeerExtension) MultiplayerPeer() MultiplayerPeer { return self.Super() }

type classMultiplayerSpawner struct{ Class[classMultiplayerSpawner] }

func (self classMultiplayerSpawner) Super() Node { var super Node; super.ptr = self.ptr; return super }

func (self classMultiplayerSpawner) Node() Node { return self.Super() }
func (self classMultiplayerSpawner) AddSpawnableScene(path String) {
	self.ptr.API.MultiplayerSpawner_add_spawnable_scene(self, path)
}
func (self classMultiplayerSpawner) GetSpawnableSceneCount() Int {
	return self.ptr.API.MultiplayerSpawner_get_spawnable_scene_count(self)
}
func (self classMultiplayerSpawner) GetSpawnableScene(index Int) String {
	return self.ptr.API.MultiplayerSpawner_get_spawnable_scene(self, index)
}
func (self classMultiplayerSpawner) ClearSpawnableScenes() {
	self.ptr.API.MultiplayerSpawner_clear_spawnable_scenes(self)
}
func (self classMultiplayerSpawner) Spawn(data Variant) Node {
	return self.ptr.API.MultiplayerSpawner_spawn(self, data)
}
func (self classMultiplayerSpawner) GetSpawnPath() NodePath {
	return self.ptr.API.MultiplayerSpawner_get_spawn_path(self)
}
func (self classMultiplayerSpawner) SetSpawnPath(path NodePath) {
	self.ptr.API.MultiplayerSpawner_set_spawn_path(self, path)
}
func (self classMultiplayerSpawner) GetSpawnLimit() Int {
	return self.ptr.API.MultiplayerSpawner_get_spawn_limit(self)
}
func (self classMultiplayerSpawner) SetSpawnLimit(limit Int) {
	self.ptr.API.MultiplayerSpawner_set_spawn_limit(self, limit)
}
func (self classMultiplayerSpawner) GetSpawnFunction() Callable {
	return self.ptr.API.MultiplayerSpawner_get_spawn_function(self)
}
func (self classMultiplayerSpawner) SetSpawnFunction(spawn_function Callable) {
	self.ptr.API.MultiplayerSpawner_set_spawn_function(self, spawn_function)
}

type classMultiplayerSynchronizer struct {
	Class[classMultiplayerSynchronizer]
}

func (self classMultiplayerSynchronizer) Super() Node {
	var super Node
	super.ptr = self.ptr
	return super
}

func (self classMultiplayerSynchronizer) Node() Node { return self.Super() }
func (self classMultiplayerSynchronizer) SetRootPath(path NodePath) {
	self.ptr.API.MultiplayerSynchronizer_set_root_path(self, path)
}
func (self classMultiplayerSynchronizer) GetRootPath() NodePath {
	return self.ptr.API.MultiplayerSynchronizer_get_root_path(self)
}
func (self classMultiplayerSynchronizer) SetReplicationInterval(milliseconds Float) {
	self.ptr.API.MultiplayerSynchronizer_set_replication_interval(self, milliseconds)
}
func (self classMultiplayerSynchronizer) GetReplicationInterval() Float {
	return self.ptr.API.MultiplayerSynchronizer_get_replication_interval(self)
}
func (self classMultiplayerSynchronizer) SetDeltaInterval(milliseconds Float) {
	self.ptr.API.MultiplayerSynchronizer_set_delta_interval(self, milliseconds)
}
func (self classMultiplayerSynchronizer) GetDeltaInterval() Float {
	return self.ptr.API.MultiplayerSynchronizer_get_delta_interval(self)
}
func (self classMultiplayerSynchronizer) SetReplicationConfig(config SceneReplicationConfig) {
	self.ptr.API.MultiplayerSynchronizer_set_replication_config(self, config)
}
func (self classMultiplayerSynchronizer) GetReplicationConfig() SceneReplicationConfig {
	return self.ptr.API.MultiplayerSynchronizer_get_replication_config(self)
}
func (self classMultiplayerSynchronizer) SetVisibilityUpdateMode(mode MultiplayerSynchronizerVisibilityUpdateMode) {
	self.ptr.API.MultiplayerSynchronizer_set_visibility_update_mode(self, mode)
}
func (self classMultiplayerSynchronizer) GetVisibilityUpdateMode() MultiplayerSynchronizerVisibilityUpdateMode {
	return self.ptr.API.MultiplayerSynchronizer_get_visibility_update_mode(self)
}
func (self classMultiplayerSynchronizer) UpdateVisibility(for_peer Int) {
	self.ptr.API.MultiplayerSynchronizer_update_visibility(self, for_peer)
}
func (self classMultiplayerSynchronizer) SetVisibilityPublic(visible bool) {
	self.ptr.API.MultiplayerSynchronizer_set_visibility_public(self, visible)
}
func (self classMultiplayerSynchronizer) IsVisibilityPublic() bool {
	return self.ptr.API.MultiplayerSynchronizer_is_visibility_public(self)
}
func (self classMultiplayerSynchronizer) AddVisibilityFilter(filter Callable) {
	self.ptr.API.MultiplayerSynchronizer_add_visibility_filter(self, filter)
}
func (self classMultiplayerSynchronizer) RemoveVisibilityFilter(filter Callable) {
	self.ptr.API.MultiplayerSynchronizer_remove_visibility_filter(self, filter)
}
func (self classMultiplayerSynchronizer) SetVisibilityFor(peer Int, visible bool) {
	self.ptr.API.MultiplayerSynchronizer_set_visibility_for(self, peer, visible)
}
func (self classMultiplayerSynchronizer) GetVisibilityFor(peer Int) bool {
	return self.ptr.API.MultiplayerSynchronizer_get_visibility_for(self, peer)
}

type classMutex struct{ Class[classMutex] }

func (self classMutex) Super() RefCounted { var super RefCounted; super.ptr = self.ptr; return super }

func (self classMutex) RefCounted() RefCounted { return self.Super() }
func (self classMutex) Lock() {
	self.ptr.API.Mutex_lock(self)
}
func (self classMutex) TryLock() bool {
	return self.ptr.API.Mutex_try_lock(self)
}
func (self classMutex) Unlock() {
	self.ptr.API.Mutex_unlock(self)
}

type classNavigationAgent2D struct{ Class[classNavigationAgent2D] }

func (self classNavigationAgent2D) Super() Node { var super Node; super.ptr = self.ptr; return super }

func (self classNavigationAgent2D) Node() Node { return self.Super() }
func (self classNavigationAgent2D) GetRid() RID {
	return self.ptr.API.NavigationAgent2D_get_rid(self)
}
func (self classNavigationAgent2D) SetAvoidanceEnabled(enabled bool) {
	self.ptr.API.NavigationAgent2D_set_avoidance_enabled(self, enabled)
}
func (self classNavigationAgent2D) GetAvoidanceEnabled() bool {
	return self.ptr.API.NavigationAgent2D_get_avoidance_enabled(self)
}
func (self classNavigationAgent2D) SetPathDesiredDistance(desired_distance Float) {
	self.ptr.API.NavigationAgent2D_set_path_desired_distance(self, desired_distance)
}
func (self classNavigationAgent2D) GetPathDesiredDistance() Float {
	return self.ptr.API.NavigationAgent2D_get_path_desired_distance(self)
}
func (self classNavigationAgent2D) SetTargetDesiredDistance(desired_distance Float) {
	self.ptr.API.NavigationAgent2D_set_target_desired_distance(self, desired_distance)
}
func (self classNavigationAgent2D) GetTargetDesiredDistance() Float {
	return self.ptr.API.NavigationAgent2D_get_target_desired_distance(self)
}
func (self classNavigationAgent2D) SetRadius(radius Float) {
	self.ptr.API.NavigationAgent2D_set_radius(self, radius)
}
func (self classNavigationAgent2D) GetRadius() Float {
	return self.ptr.API.NavigationAgent2D_get_radius(self)
}
func (self classNavigationAgent2D) SetNeighborDistance(neighbor_distance Float) {
	self.ptr.API.NavigationAgent2D_set_neighbor_distance(self, neighbor_distance)
}
func (self classNavigationAgent2D) GetNeighborDistance() Float {
	return self.ptr.API.NavigationAgent2D_get_neighbor_distance(self)
}
func (self classNavigationAgent2D) SetMaxNeighbors(max_neighbors Int) {
	self.ptr.API.NavigationAgent2D_set_max_neighbors(self, max_neighbors)
}
func (self classNavigationAgent2D) GetMaxNeighbors() Int {
	return self.ptr.API.NavigationAgent2D_get_max_neighbors(self)
}
func (self classNavigationAgent2D) SetTimeHorizonAgents(time_horizon Float) {
	self.ptr.API.NavigationAgent2D_set_time_horizon_agents(self, time_horizon)
}
func (self classNavigationAgent2D) GetTimeHorizonAgents() Float {
	return self.ptr.API.NavigationAgent2D_get_time_horizon_agents(self)
}
func (self classNavigationAgent2D) SetTimeHorizonObstacles(time_horizon Float) {
	self.ptr.API.NavigationAgent2D_set_time_horizon_obstacles(self, time_horizon)
}
func (self classNavigationAgent2D) GetTimeHorizonObstacles() Float {
	return self.ptr.API.NavigationAgent2D_get_time_horizon_obstacles(self)
}
func (self classNavigationAgent2D) SetMaxSpeed(max_speed Float) {
	self.ptr.API.NavigationAgent2D_set_max_speed(self, max_speed)
}
func (self classNavigationAgent2D) GetMaxSpeed() Float {
	return self.ptr.API.NavigationAgent2D_get_max_speed(self)
}
func (self classNavigationAgent2D) SetPathMaxDistance(max_speed Float) {
	self.ptr.API.NavigationAgent2D_set_path_max_distance(self, max_speed)
}
func (self classNavigationAgent2D) GetPathMaxDistance() Float {
	return self.ptr.API.NavigationAgent2D_get_path_max_distance(self)
}
func (self classNavigationAgent2D) SetNavigationLayers(navigation_layers Int) {
	self.ptr.API.NavigationAgent2D_set_navigation_layers(self, navigation_layers)
}
func (self classNavigationAgent2D) GetNavigationLayers() Int {
	return self.ptr.API.NavigationAgent2D_get_navigation_layers(self)
}
func (self classNavigationAgent2D) SetNavigationLayerValue(layer_number Int, value bool) {
	self.ptr.API.NavigationAgent2D_set_navigation_layer_value(self, layer_number, value)
}
func (self classNavigationAgent2D) GetNavigationLayerValue(layer_number Int) bool {
	return self.ptr.API.NavigationAgent2D_get_navigation_layer_value(self, layer_number)
}
func (self classNavigationAgent2D) SetPathfindingAlgorithm(pathfinding_algorithm NavigationPathQueryParameters2DPathfindingAlgorithm) {
	self.ptr.API.NavigationAgent2D_set_pathfinding_algorithm(self, pathfinding_algorithm)
}
func (self classNavigationAgent2D) GetPathfindingAlgorithm() NavigationPathQueryParameters2DPathfindingAlgorithm {
	return self.ptr.API.NavigationAgent2D_get_pathfinding_algorithm(self)
}
func (self classNavigationAgent2D) SetPathPostprocessing(path_postprocessing NavigationPathQueryParameters2DPathPostProcessing) {
	self.ptr.API.NavigationAgent2D_set_path_postprocessing(self, path_postprocessing)
}
func (self classNavigationAgent2D) GetPathPostprocessing() NavigationPathQueryParameters2DPathPostProcessing {
	return self.ptr.API.NavigationAgent2D_get_path_postprocessing(self)
}
func (self classNavigationAgent2D) SetPathMetadataFlags(flags NavigationPathQueryParameters2DPathMetadataFlags) {
	self.ptr.API.NavigationAgent2D_set_path_metadata_flags(self, flags)
}
func (self classNavigationAgent2D) GetPathMetadataFlags() NavigationPathQueryParameters2DPathMetadataFlags {
	return self.ptr.API.NavigationAgent2D_get_path_metadata_flags(self)
}
func (self classNavigationAgent2D) SetNavigationMap(navigation_map RID) {
	self.ptr.API.NavigationAgent2D_set_navigation_map(self, navigation_map)
}
func (self classNavigationAgent2D) GetNavigationMap() RID {
	return self.ptr.API.NavigationAgent2D_get_navigation_map(self)
}
func (self classNavigationAgent2D) SetTargetPosition(position Vector2) {
	self.ptr.API.NavigationAgent2D_set_target_position(self, position)
}
func (self classNavigationAgent2D) GetTargetPosition() Vector2 {
	return self.ptr.API.NavigationAgent2D_get_target_position(self)
}
func (self classNavigationAgent2D) GetNextPathPosition() Vector2 {
	return self.ptr.API.NavigationAgent2D_get_next_path_position(self)
}
func (self classNavigationAgent2D) SetVelocityForced(velocity Vector2) {
	self.ptr.API.NavigationAgent2D_set_velocity_forced(self, velocity)
}
func (self classNavigationAgent2D) SetVelocity(velocity Vector2) {
	self.ptr.API.NavigationAgent2D_set_velocity(self, velocity)
}
func (self classNavigationAgent2D) GetVelocity() Vector2 {
	return self.ptr.API.NavigationAgent2D_get_velocity(self)
}
func (self classNavigationAgent2D) DistanceToTarget() Float {
	return self.ptr.API.NavigationAgent2D_distance_to_target(self)
}
func (self classNavigationAgent2D) GetCurrentNavigationResult() NavigationPathQueryResult2D {
	return self.ptr.API.NavigationAgent2D_get_current_navigation_result(self)
}
func (self classNavigationAgent2D) GetCurrentNavigationPath() PackedVector2Array {
	return self.ptr.API.NavigationAgent2D_get_current_navigation_path(self)
}
func (self classNavigationAgent2D) GetCurrentNavigationPathIndex() Int {
	return self.ptr.API.NavigationAgent2D_get_current_navigation_path_index(self)
}
func (self classNavigationAgent2D) IsTargetReached() bool {
	return self.ptr.API.NavigationAgent2D_is_target_reached(self)
}
func (self classNavigationAgent2D) IsTargetReachable() bool {
	return self.ptr.API.NavigationAgent2D_is_target_reachable(self)
}
func (self classNavigationAgent2D) IsNavigationFinished() bool {
	return self.ptr.API.NavigationAgent2D_is_navigation_finished(self)
}
func (self classNavigationAgent2D) GetFinalPosition() Vector2 {
	return self.ptr.API.NavigationAgent2D_get_final_position(self)
}
func (self classNavigationAgent2D) SetAvoidanceLayers(layers Int) {
	self.ptr.API.NavigationAgent2D_set_avoidance_layers(self, layers)
}
func (self classNavigationAgent2D) GetAvoidanceLayers() Int {
	return self.ptr.API.NavigationAgent2D_get_avoidance_layers(self)
}
func (self classNavigationAgent2D) SetAvoidanceMask(mask Int) {
	self.ptr.API.NavigationAgent2D_set_avoidance_mask(self, mask)
}
func (self classNavigationAgent2D) GetAvoidanceMask() Int {
	return self.ptr.API.NavigationAgent2D_get_avoidance_mask(self)
}
func (self classNavigationAgent2D) SetAvoidanceLayerValue(layer_number Int, value bool) {
	self.ptr.API.NavigationAgent2D_set_avoidance_layer_value(self, layer_number, value)
}
func (self classNavigationAgent2D) GetAvoidanceLayerValue(layer_number Int) bool {
	return self.ptr.API.NavigationAgent2D_get_avoidance_layer_value(self, layer_number)
}
func (self classNavigationAgent2D) SetAvoidanceMaskValue(mask_number Int, value bool) {
	self.ptr.API.NavigationAgent2D_set_avoidance_mask_value(self, mask_number, value)
}
func (self classNavigationAgent2D) GetAvoidanceMaskValue(mask_number Int) bool {
	return self.ptr.API.NavigationAgent2D_get_avoidance_mask_value(self, mask_number)
}
func (self classNavigationAgent2D) SetAvoidancePriority(priority Float) {
	self.ptr.API.NavigationAgent2D_set_avoidance_priority(self, priority)
}
func (self classNavigationAgent2D) GetAvoidancePriority() Float {
	return self.ptr.API.NavigationAgent2D_get_avoidance_priority(self)
}
func (self classNavigationAgent2D) SetDebugEnabled(enabled bool) {
	self.ptr.API.NavigationAgent2D_set_debug_enabled(self, enabled)
}
func (self classNavigationAgent2D) GetDebugEnabled() bool {
	return self.ptr.API.NavigationAgent2D_get_debug_enabled(self)
}
func (self classNavigationAgent2D) SetDebugUseCustom(enabled bool) {
	self.ptr.API.NavigationAgent2D_set_debug_use_custom(self, enabled)
}
func (self classNavigationAgent2D) GetDebugUseCustom() bool {
	return self.ptr.API.NavigationAgent2D_get_debug_use_custom(self)
}
func (self classNavigationAgent2D) SetDebugPathCustomColor(color Color) {
	self.ptr.API.NavigationAgent2D_set_debug_path_custom_color(self, color)
}
func (self classNavigationAgent2D) GetDebugPathCustomColor() Color {
	return self.ptr.API.NavigationAgent2D_get_debug_path_custom_color(self)
}
func (self classNavigationAgent2D) SetDebugPathCustomPointSize(point_size Float) {
	self.ptr.API.NavigationAgent2D_set_debug_path_custom_point_size(self, point_size)
}
func (self classNavigationAgent2D) GetDebugPathCustomPointSize() Float {
	return self.ptr.API.NavigationAgent2D_get_debug_path_custom_point_size(self)
}
func (self classNavigationAgent2D) SetDebugPathCustomLineWidth(line_width Float) {
	self.ptr.API.NavigationAgent2D_set_debug_path_custom_line_width(self, line_width)
}
func (self classNavigationAgent2D) GetDebugPathCustomLineWidth() Float {
	return self.ptr.API.NavigationAgent2D_get_debug_path_custom_line_width(self)
}

type classNavigationAgent3D struct{ Class[classNavigationAgent3D] }

func (self classNavigationAgent3D) Super() Node { var super Node; super.ptr = self.ptr; return super }

func (self classNavigationAgent3D) Node() Node { return self.Super() }
func (self classNavigationAgent3D) GetRid() RID {
	return self.ptr.API.NavigationAgent3D_get_rid(self)
}
func (self classNavigationAgent3D) SetAvoidanceEnabled(enabled bool) {
	self.ptr.API.NavigationAgent3D_set_avoidance_enabled(self, enabled)
}
func (self classNavigationAgent3D) GetAvoidanceEnabled() bool {
	return self.ptr.API.NavigationAgent3D_get_avoidance_enabled(self)
}
func (self classNavigationAgent3D) SetPathDesiredDistance(desired_distance Float) {
	self.ptr.API.NavigationAgent3D_set_path_desired_distance(self, desired_distance)
}
func (self classNavigationAgent3D) GetPathDesiredDistance() Float {
	return self.ptr.API.NavigationAgent3D_get_path_desired_distance(self)
}
func (self classNavigationAgent3D) SetTargetDesiredDistance(desired_distance Float) {
	self.ptr.API.NavigationAgent3D_set_target_desired_distance(self, desired_distance)
}
func (self classNavigationAgent3D) GetTargetDesiredDistance() Float {
	return self.ptr.API.NavigationAgent3D_get_target_desired_distance(self)
}
func (self classNavigationAgent3D) SetRadius(radius Float) {
	self.ptr.API.NavigationAgent3D_set_radius(self, radius)
}
func (self classNavigationAgent3D) GetRadius() Float {
	return self.ptr.API.NavigationAgent3D_get_radius(self)
}
func (self classNavigationAgent3D) SetHeight(height Float) {
	self.ptr.API.NavigationAgent3D_set_height(self, height)
}
func (self classNavigationAgent3D) GetHeight() Float {
	return self.ptr.API.NavigationAgent3D_get_height(self)
}
func (self classNavigationAgent3D) SetPathHeightOffset(path_height_offset Float) {
	self.ptr.API.NavigationAgent3D_set_path_height_offset(self, path_height_offset)
}
func (self classNavigationAgent3D) GetPathHeightOffset() Float {
	return self.ptr.API.NavigationAgent3D_get_path_height_offset(self)
}
func (self classNavigationAgent3D) SetUse3dAvoidance(enabled bool) {
	self.ptr.API.NavigationAgent3D_set_use_3d_avoidance(self, enabled)
}
func (self classNavigationAgent3D) GetUse3dAvoidance() bool {
	return self.ptr.API.NavigationAgent3D_get_use_3d_avoidance(self)
}
func (self classNavigationAgent3D) SetKeepYVelocity(enabled bool) {
	self.ptr.API.NavigationAgent3D_set_keep_y_velocity(self, enabled)
}
func (self classNavigationAgent3D) GetKeepYVelocity() bool {
	return self.ptr.API.NavigationAgent3D_get_keep_y_velocity(self)
}
func (self classNavigationAgent3D) SetNeighborDistance(neighbor_distance Float) {
	self.ptr.API.NavigationAgent3D_set_neighbor_distance(self, neighbor_distance)
}
func (self classNavigationAgent3D) GetNeighborDistance() Float {
	return self.ptr.API.NavigationAgent3D_get_neighbor_distance(self)
}
func (self classNavigationAgent3D) SetMaxNeighbors(max_neighbors Int) {
	self.ptr.API.NavigationAgent3D_set_max_neighbors(self, max_neighbors)
}
func (self classNavigationAgent3D) GetMaxNeighbors() Int {
	return self.ptr.API.NavigationAgent3D_get_max_neighbors(self)
}
func (self classNavigationAgent3D) SetTimeHorizonAgents(time_horizon Float) {
	self.ptr.API.NavigationAgent3D_set_time_horizon_agents(self, time_horizon)
}
func (self classNavigationAgent3D) GetTimeHorizonAgents() Float {
	return self.ptr.API.NavigationAgent3D_get_time_horizon_agents(self)
}
func (self classNavigationAgent3D) SetTimeHorizonObstacles(time_horizon Float) {
	self.ptr.API.NavigationAgent3D_set_time_horizon_obstacles(self, time_horizon)
}
func (self classNavigationAgent3D) GetTimeHorizonObstacles() Float {
	return self.ptr.API.NavigationAgent3D_get_time_horizon_obstacles(self)
}
func (self classNavigationAgent3D) SetMaxSpeed(max_speed Float) {
	self.ptr.API.NavigationAgent3D_set_max_speed(self, max_speed)
}
func (self classNavigationAgent3D) GetMaxSpeed() Float {
	return self.ptr.API.NavigationAgent3D_get_max_speed(self)
}
func (self classNavigationAgent3D) SetPathMaxDistance(max_speed Float) {
	self.ptr.API.NavigationAgent3D_set_path_max_distance(self, max_speed)
}
func (self classNavigationAgent3D) GetPathMaxDistance() Float {
	return self.ptr.API.NavigationAgent3D_get_path_max_distance(self)
}
func (self classNavigationAgent3D) SetNavigationLayers(navigation_layers Int) {
	self.ptr.API.NavigationAgent3D_set_navigation_layers(self, navigation_layers)
}
func (self classNavigationAgent3D) GetNavigationLayers() Int {
	return self.ptr.API.NavigationAgent3D_get_navigation_layers(self)
}
func (self classNavigationAgent3D) SetNavigationLayerValue(layer_number Int, value bool) {
	self.ptr.API.NavigationAgent3D_set_navigation_layer_value(self, layer_number, value)
}
func (self classNavigationAgent3D) GetNavigationLayerValue(layer_number Int) bool {
	return self.ptr.API.NavigationAgent3D_get_navigation_layer_value(self, layer_number)
}
func (self classNavigationAgent3D) SetPathfindingAlgorithm(pathfinding_algorithm NavigationPathQueryParameters3DPathfindingAlgorithm) {
	self.ptr.API.NavigationAgent3D_set_pathfinding_algorithm(self, pathfinding_algorithm)
}
func (self classNavigationAgent3D) GetPathfindingAlgorithm() NavigationPathQueryParameters3DPathfindingAlgorithm {
	return self.ptr.API.NavigationAgent3D_get_pathfinding_algorithm(self)
}
func (self classNavigationAgent3D) SetPathPostprocessing(path_postprocessing NavigationPathQueryParameters3DPathPostProcessing) {
	self.ptr.API.NavigationAgent3D_set_path_postprocessing(self, path_postprocessing)
}
func (self classNavigationAgent3D) GetPathPostprocessing() NavigationPathQueryParameters3DPathPostProcessing {
	return self.ptr.API.NavigationAgent3D_get_path_postprocessing(self)
}
func (self classNavigationAgent3D) SetPathMetadataFlags(flags NavigationPathQueryParameters3DPathMetadataFlags) {
	self.ptr.API.NavigationAgent3D_set_path_metadata_flags(self, flags)
}
func (self classNavigationAgent3D) GetPathMetadataFlags() NavigationPathQueryParameters3DPathMetadataFlags {
	return self.ptr.API.NavigationAgent3D_get_path_metadata_flags(self)
}
func (self classNavigationAgent3D) SetNavigationMap(navigation_map RID) {
	self.ptr.API.NavigationAgent3D_set_navigation_map(self, navigation_map)
}
func (self classNavigationAgent3D) GetNavigationMap() RID {
	return self.ptr.API.NavigationAgent3D_get_navigation_map(self)
}
func (self classNavigationAgent3D) SetTargetPosition(position Vector3) {
	self.ptr.API.NavigationAgent3D_set_target_position(self, position)
}
func (self classNavigationAgent3D) GetTargetPosition() Vector3 {
	return self.ptr.API.NavigationAgent3D_get_target_position(self)
}
func (self classNavigationAgent3D) GetNextPathPosition() Vector3 {
	return self.ptr.API.NavigationAgent3D_get_next_path_position(self)
}
func (self classNavigationAgent3D) SetVelocityForced(velocity Vector3) {
	self.ptr.API.NavigationAgent3D_set_velocity_forced(self, velocity)
}
func (self classNavigationAgent3D) SetVelocity(velocity Vector3) {
	self.ptr.API.NavigationAgent3D_set_velocity(self, velocity)
}
func (self classNavigationAgent3D) GetVelocity() Vector3 {
	return self.ptr.API.NavigationAgent3D_get_velocity(self)
}
func (self classNavigationAgent3D) DistanceToTarget() Float {
	return self.ptr.API.NavigationAgent3D_distance_to_target(self)
}
func (self classNavigationAgent3D) GetCurrentNavigationResult() NavigationPathQueryResult3D {
	return self.ptr.API.NavigationAgent3D_get_current_navigation_result(self)
}
func (self classNavigationAgent3D) GetCurrentNavigationPath() PackedVector3Array {
	return self.ptr.API.NavigationAgent3D_get_current_navigation_path(self)
}
func (self classNavigationAgent3D) GetCurrentNavigationPathIndex() Int {
	return self.ptr.API.NavigationAgent3D_get_current_navigation_path_index(self)
}
func (self classNavigationAgent3D) IsTargetReached() bool {
	return self.ptr.API.NavigationAgent3D_is_target_reached(self)
}
func (self classNavigationAgent3D) IsTargetReachable() bool {
	return self.ptr.API.NavigationAgent3D_is_target_reachable(self)
}
func (self classNavigationAgent3D) IsNavigationFinished() bool {
	return self.ptr.API.NavigationAgent3D_is_navigation_finished(self)
}
func (self classNavigationAgent3D) GetFinalPosition() Vector3 {
	return self.ptr.API.NavigationAgent3D_get_final_position(self)
}
func (self classNavigationAgent3D) SetAvoidanceLayers(layers Int) {
	self.ptr.API.NavigationAgent3D_set_avoidance_layers(self, layers)
}
func (self classNavigationAgent3D) GetAvoidanceLayers() Int {
	return self.ptr.API.NavigationAgent3D_get_avoidance_layers(self)
}
func (self classNavigationAgent3D) SetAvoidanceMask(mask Int) {
	self.ptr.API.NavigationAgent3D_set_avoidance_mask(self, mask)
}
func (self classNavigationAgent3D) GetAvoidanceMask() Int {
	return self.ptr.API.NavigationAgent3D_get_avoidance_mask(self)
}
func (self classNavigationAgent3D) SetAvoidanceLayerValue(layer_number Int, value bool) {
	self.ptr.API.NavigationAgent3D_set_avoidance_layer_value(self, layer_number, value)
}
func (self classNavigationAgent3D) GetAvoidanceLayerValue(layer_number Int) bool {
	return self.ptr.API.NavigationAgent3D_get_avoidance_layer_value(self, layer_number)
}
func (self classNavigationAgent3D) SetAvoidanceMaskValue(mask_number Int, value bool) {
	self.ptr.API.NavigationAgent3D_set_avoidance_mask_value(self, mask_number, value)
}
func (self classNavigationAgent3D) GetAvoidanceMaskValue(mask_number Int) bool {
	return self.ptr.API.NavigationAgent3D_get_avoidance_mask_value(self, mask_number)
}
func (self classNavigationAgent3D) SetAvoidancePriority(priority Float) {
	self.ptr.API.NavigationAgent3D_set_avoidance_priority(self, priority)
}
func (self classNavigationAgent3D) GetAvoidancePriority() Float {
	return self.ptr.API.NavigationAgent3D_get_avoidance_priority(self)
}
func (self classNavigationAgent3D) SetDebugEnabled(enabled bool) {
	self.ptr.API.NavigationAgent3D_set_debug_enabled(self, enabled)
}
func (self classNavigationAgent3D) GetDebugEnabled() bool {
	return self.ptr.API.NavigationAgent3D_get_debug_enabled(self)
}
func (self classNavigationAgent3D) SetDebugUseCustom(enabled bool) {
	self.ptr.API.NavigationAgent3D_set_debug_use_custom(self, enabled)
}
func (self classNavigationAgent3D) GetDebugUseCustom() bool {
	return self.ptr.API.NavigationAgent3D_get_debug_use_custom(self)
}
func (self classNavigationAgent3D) SetDebugPathCustomColor(color Color) {
	self.ptr.API.NavigationAgent3D_set_debug_path_custom_color(self, color)
}
func (self classNavigationAgent3D) GetDebugPathCustomColor() Color {
	return self.ptr.API.NavigationAgent3D_get_debug_path_custom_color(self)
}
func (self classNavigationAgent3D) SetDebugPathCustomPointSize(point_size Float) {
	self.ptr.API.NavigationAgent3D_set_debug_path_custom_point_size(self, point_size)
}
func (self classNavigationAgent3D) GetDebugPathCustomPointSize() Float {
	return self.ptr.API.NavigationAgent3D_get_debug_path_custom_point_size(self)
}

type classNavigationLink2D struct{ Class[classNavigationLink2D] }

func (self classNavigationLink2D) Super() Node2D {
	var super Node2D
	super.ptr = self.ptr
	return super
}

func (self classNavigationLink2D) Node2D() Node2D { return self.Super() }
func (self classNavigationLink2D) GetRid() RID {
	return self.ptr.API.NavigationLink2D_get_rid(self)
}
func (self classNavigationLink2D) SetEnabled(enabled bool) {
	self.ptr.API.NavigationLink2D_set_enabled(self, enabled)
}
func (self classNavigationLink2D) IsEnabled() bool {
	return self.ptr.API.NavigationLink2D_is_enabled(self)
}
func (self classNavigationLink2D) SetBidirectional(bidirectional bool) {
	self.ptr.API.NavigationLink2D_set_bidirectional(self, bidirectional)
}
func (self classNavigationLink2D) IsBidirectional() bool {
	return self.ptr.API.NavigationLink2D_is_bidirectional(self)
}
func (self classNavigationLink2D) SetNavigationLayers(navigation_layers Int) {
	self.ptr.API.NavigationLink2D_set_navigation_layers(self, navigation_layers)
}
func (self classNavigationLink2D) GetNavigationLayers() Int {
	return self.ptr.API.NavigationLink2D_get_navigation_layers(self)
}
func (self classNavigationLink2D) SetNavigationLayerValue(layer_number Int, value bool) {
	self.ptr.API.NavigationLink2D_set_navigation_layer_value(self, layer_number, value)
}
func (self classNavigationLink2D) GetNavigationLayerValue(layer_number Int) bool {
	return self.ptr.API.NavigationLink2D_get_navigation_layer_value(self, layer_number)
}
func (self classNavigationLink2D) SetStartPosition(position Vector2) {
	self.ptr.API.NavigationLink2D_set_start_position(self, position)
}
func (self classNavigationLink2D) GetStartPosition() Vector2 {
	return self.ptr.API.NavigationLink2D_get_start_position(self)
}
func (self classNavigationLink2D) SetEndPosition(position Vector2) {
	self.ptr.API.NavigationLink2D_set_end_position(self, position)
}
func (self classNavigationLink2D) GetEndPosition() Vector2 {
	return self.ptr.API.NavigationLink2D_get_end_position(self)
}
func (self classNavigationLink2D) SetGlobalStartPosition(position Vector2) {
	self.ptr.API.NavigationLink2D_set_global_start_position(self, position)
}
func (self classNavigationLink2D) GetGlobalStartPosition() Vector2 {
	return self.ptr.API.NavigationLink2D_get_global_start_position(self)
}
func (self classNavigationLink2D) SetGlobalEndPosition(position Vector2) {
	self.ptr.API.NavigationLink2D_set_global_end_position(self, position)
}
func (self classNavigationLink2D) GetGlobalEndPosition() Vector2 {
	return self.ptr.API.NavigationLink2D_get_global_end_position(self)
}
func (self classNavigationLink2D) SetEnterCost(enter_cost Float) {
	self.ptr.API.NavigationLink2D_set_enter_cost(self, enter_cost)
}
func (self classNavigationLink2D) GetEnterCost() Float {
	return self.ptr.API.NavigationLink2D_get_enter_cost(self)
}
func (self classNavigationLink2D) SetTravelCost(travel_cost Float) {
	self.ptr.API.NavigationLink2D_set_travel_cost(self, travel_cost)
}
func (self classNavigationLink2D) GetTravelCost() Float {
	return self.ptr.API.NavigationLink2D_get_travel_cost(self)
}

type classNavigationLink3D struct{ Class[classNavigationLink3D] }

func (self classNavigationLink3D) Super() Node3D {
	var super Node3D
	super.ptr = self.ptr
	return super
}

func (self classNavigationLink3D) Node3D() Node3D { return self.Super() }
func (self classNavigationLink3D) GetRid() RID {
	return self.ptr.API.NavigationLink3D_get_rid(self)
}
func (self classNavigationLink3D) SetEnabled(enabled bool) {
	self.ptr.API.NavigationLink3D_set_enabled(self, enabled)
}
func (self classNavigationLink3D) IsEnabled() bool {
	return self.ptr.API.NavigationLink3D_is_enabled(self)
}
func (self classNavigationLink3D) SetBidirectional(bidirectional bool) {
	self.ptr.API.NavigationLink3D_set_bidirectional(self, bidirectional)
}
func (self classNavigationLink3D) IsBidirectional() bool {
	return self.ptr.API.NavigationLink3D_is_bidirectional(self)
}
func (self classNavigationLink3D) SetNavigationLayers(navigation_layers Int) {
	self.ptr.API.NavigationLink3D_set_navigation_layers(self, navigation_layers)
}
func (self classNavigationLink3D) GetNavigationLayers() Int {
	return self.ptr.API.NavigationLink3D_get_navigation_layers(self)
}
func (self classNavigationLink3D) SetNavigationLayerValue(layer_number Int, value bool) {
	self.ptr.API.NavigationLink3D_set_navigation_layer_value(self, layer_number, value)
}
func (self classNavigationLink3D) GetNavigationLayerValue(layer_number Int) bool {
	return self.ptr.API.NavigationLink3D_get_navigation_layer_value(self, layer_number)
}
func (self classNavigationLink3D) SetStartPosition(position Vector3) {
	self.ptr.API.NavigationLink3D_set_start_position(self, position)
}
func (self classNavigationLink3D) GetStartPosition() Vector3 {
	return self.ptr.API.NavigationLink3D_get_start_position(self)
}
func (self classNavigationLink3D) SetEndPosition(position Vector3) {
	self.ptr.API.NavigationLink3D_set_end_position(self, position)
}
func (self classNavigationLink3D) GetEndPosition() Vector3 {
	return self.ptr.API.NavigationLink3D_get_end_position(self)
}
func (self classNavigationLink3D) SetGlobalStartPosition(position Vector3) {
	self.ptr.API.NavigationLink3D_set_global_start_position(self, position)
}
func (self classNavigationLink3D) GetGlobalStartPosition() Vector3 {
	return self.ptr.API.NavigationLink3D_get_global_start_position(self)
}
func (self classNavigationLink3D) SetGlobalEndPosition(position Vector3) {
	self.ptr.API.NavigationLink3D_set_global_end_position(self, position)
}
func (self classNavigationLink3D) GetGlobalEndPosition() Vector3 {
	return self.ptr.API.NavigationLink3D_get_global_end_position(self)
}
func (self classNavigationLink3D) SetEnterCost(enter_cost Float) {
	self.ptr.API.NavigationLink3D_set_enter_cost(self, enter_cost)
}
func (self classNavigationLink3D) GetEnterCost() Float {
	return self.ptr.API.NavigationLink3D_get_enter_cost(self)
}
func (self classNavigationLink3D) SetTravelCost(travel_cost Float) {
	self.ptr.API.NavigationLink3D_set_travel_cost(self, travel_cost)
}
func (self classNavigationLink3D) GetTravelCost() Float {
	return self.ptr.API.NavigationLink3D_get_travel_cost(self)
}

type classNavigationMesh struct{ Class[classNavigationMesh] }

func (self classNavigationMesh) Super() Resource {
	var super Resource
	super.ptr = self.ptr
	return super
}

func (self classNavigationMesh) Resource() Resource { return self.Super() }
func (self classNavigationMesh) SetSamplePartitionType(sample_partition_type NavigationMeshSamplePartitionType) {
	self.ptr.API.NavigationMesh_set_sample_partition_type(self, sample_partition_type)
}
func (self classNavigationMesh) GetSamplePartitionType() NavigationMeshSamplePartitionType {
	return self.ptr.API.NavigationMesh_get_sample_partition_type(self)
}
func (self classNavigationMesh) SetParsedGeometryType(geometry_type NavigationMeshParsedGeometryType) {
	self.ptr.API.NavigationMesh_set_parsed_geometry_type(self, geometry_type)
}
func (self classNavigationMesh) GetParsedGeometryType() NavigationMeshParsedGeometryType {
	return self.ptr.API.NavigationMesh_get_parsed_geometry_type(self)
}
func (self classNavigationMesh) SetCollisionMask(mask Int) {
	self.ptr.API.NavigationMesh_set_collision_mask(self, mask)
}
func (self classNavigationMesh) GetCollisionMask() Int {
	return self.ptr.API.NavigationMesh_get_collision_mask(self)
}
func (self classNavigationMesh) SetCollisionMaskValue(layer_number Int, value bool) {
	self.ptr.API.NavigationMesh_set_collision_mask_value(self, layer_number, value)
}
func (self classNavigationMesh) GetCollisionMaskValue(layer_number Int) bool {
	return self.ptr.API.NavigationMesh_get_collision_mask_value(self, layer_number)
}
func (self classNavigationMesh) SetSourceGeometryMode(mask NavigationMeshSourceGeometryMode) {
	self.ptr.API.NavigationMesh_set_source_geometry_mode(self, mask)
}
func (self classNavigationMesh) GetSourceGeometryMode() NavigationMeshSourceGeometryMode {
	return self.ptr.API.NavigationMesh_get_source_geometry_mode(self)
}
func (self classNavigationMesh) SetSourceGroupName(mask StringName) {
	self.ptr.API.NavigationMesh_set_source_group_name(self, mask)
}
func (self classNavigationMesh) GetSourceGroupName() StringName {
	return self.ptr.API.NavigationMesh_get_source_group_name(self)
}
func (self classNavigationMesh) SetCellSize(cell_size Float) {
	self.ptr.API.NavigationMesh_set_cell_size(self, cell_size)
}
func (self classNavigationMesh) GetCellSize() Float {
	return self.ptr.API.NavigationMesh_get_cell_size(self)
}
func (self classNavigationMesh) SetCellHeight(cell_height Float) {
	self.ptr.API.NavigationMesh_set_cell_height(self, cell_height)
}
func (self classNavigationMesh) GetCellHeight() Float {
	return self.ptr.API.NavigationMesh_get_cell_height(self)
}
func (self classNavigationMesh) SetAgentHeight(agent_height Float) {
	self.ptr.API.NavigationMesh_set_agent_height(self, agent_height)
}
func (self classNavigationMesh) GetAgentHeight() Float {
	return self.ptr.API.NavigationMesh_get_agent_height(self)
}
func (self classNavigationMesh) SetAgentRadius(agent_radius Float) {
	self.ptr.API.NavigationMesh_set_agent_radius(self, agent_radius)
}
func (self classNavigationMesh) GetAgentRadius() Float {
	return self.ptr.API.NavigationMesh_get_agent_radius(self)
}
func (self classNavigationMesh) SetAgentMaxClimb(agent_max_climb Float) {
	self.ptr.API.NavigationMesh_set_agent_max_climb(self, agent_max_climb)
}
func (self classNavigationMesh) GetAgentMaxClimb() Float {
	return self.ptr.API.NavigationMesh_get_agent_max_climb(self)
}
func (self classNavigationMesh) SetAgentMaxSlope(agent_max_slope Float) {
	self.ptr.API.NavigationMesh_set_agent_max_slope(self, agent_max_slope)
}
func (self classNavigationMesh) GetAgentMaxSlope() Float {
	return self.ptr.API.NavigationMesh_get_agent_max_slope(self)
}
func (self classNavigationMesh) SetRegionMinSize(region_min_size Float) {
	self.ptr.API.NavigationMesh_set_region_min_size(self, region_min_size)
}
func (self classNavigationMesh) GetRegionMinSize() Float {
	return self.ptr.API.NavigationMesh_get_region_min_size(self)
}
func (self classNavigationMesh) SetRegionMergeSize(region_merge_size Float) {
	self.ptr.API.NavigationMesh_set_region_merge_size(self, region_merge_size)
}
func (self classNavigationMesh) GetRegionMergeSize() Float {
	return self.ptr.API.NavigationMesh_get_region_merge_size(self)
}
func (self classNavigationMesh) SetEdgeMaxLength(edge_max_length Float) {
	self.ptr.API.NavigationMesh_set_edge_max_length(self, edge_max_length)
}
func (self classNavigationMesh) GetEdgeMaxLength() Float {
	return self.ptr.API.NavigationMesh_get_edge_max_length(self)
}
func (self classNavigationMesh) SetEdgeMaxError(edge_max_error Float) {
	self.ptr.API.NavigationMesh_set_edge_max_error(self, edge_max_error)
}
func (self classNavigationMesh) GetEdgeMaxError() Float {
	return self.ptr.API.NavigationMesh_get_edge_max_error(self)
}
func (self classNavigationMesh) SetVerticesPerPolygon(vertices_per_polygon Float) {
	self.ptr.API.NavigationMesh_set_vertices_per_polygon(self, vertices_per_polygon)
}
func (self classNavigationMesh) GetVerticesPerPolygon() Float {
	return self.ptr.API.NavigationMesh_get_vertices_per_polygon(self)
}
func (self classNavigationMesh) SetDetailSampleDistance(detail_sample_dist Float) {
	self.ptr.API.NavigationMesh_set_detail_sample_distance(self, detail_sample_dist)
}
func (self classNavigationMesh) GetDetailSampleDistance() Float {
	return self.ptr.API.NavigationMesh_get_detail_sample_distance(self)
}
func (self classNavigationMesh) SetDetailSampleMaxError(detail_sample_max_error Float) {
	self.ptr.API.NavigationMesh_set_detail_sample_max_error(self, detail_sample_max_error)
}
func (self classNavigationMesh) GetDetailSampleMaxError() Float {
	return self.ptr.API.NavigationMesh_get_detail_sample_max_error(self)
}
func (self classNavigationMesh) SetFilterLowHangingObstacles(filter_low_hanging_obstacles bool) {
	self.ptr.API.NavigationMesh_set_filter_low_hanging_obstacles(self, filter_low_hanging_obstacles)
}
func (self classNavigationMesh) GetFilterLowHangingObstacles() bool {
	return self.ptr.API.NavigationMesh_get_filter_low_hanging_obstacles(self)
}
func (self classNavigationMesh) SetFilterLedgeSpans(filter_ledge_spans bool) {
	self.ptr.API.NavigationMesh_set_filter_ledge_spans(self, filter_ledge_spans)
}
func (self classNavigationMesh) GetFilterLedgeSpans() bool {
	return self.ptr.API.NavigationMesh_get_filter_ledge_spans(self)
}
func (self classNavigationMesh) SetFilterWalkableLowHeightSpans(filter_walkable_low_height_spans bool) {
	self.ptr.API.NavigationMesh_set_filter_walkable_low_height_spans(self, filter_walkable_low_height_spans)
}
func (self classNavigationMesh) GetFilterWalkableLowHeightSpans() bool {
	return self.ptr.API.NavigationMesh_get_filter_walkable_low_height_spans(self)
}
func (self classNavigationMesh) SetFilterBakingAabb(baking_aabb AABB) {
	self.ptr.API.NavigationMesh_set_filter_baking_aabb(self, baking_aabb)
}
func (self classNavigationMesh) GetFilterBakingAabb() AABB {
	return self.ptr.API.NavigationMesh_get_filter_baking_aabb(self)
}
func (self classNavigationMesh) SetFilterBakingAabbOffset(baking_aabb_offset Vector3) {
	self.ptr.API.NavigationMesh_set_filter_baking_aabb_offset(self, baking_aabb_offset)
}
func (self classNavigationMesh) GetFilterBakingAabbOffset() Vector3 {
	return self.ptr.API.NavigationMesh_get_filter_baking_aabb_offset(self)
}
func (self classNavigationMesh) SetVertices(vertices PackedVector3Array) {
	self.ptr.API.NavigationMesh_set_vertices(self, vertices)
}
func (self classNavigationMesh) GetVertices() PackedVector3Array {
	return self.ptr.API.NavigationMesh_get_vertices(self)
}
func (self classNavigationMesh) AddPolygon(polygon PackedInt32Array) {
	self.ptr.API.NavigationMesh_add_polygon(self, polygon)
}
func (self classNavigationMesh) GetPolygonCount() Int {
	return self.ptr.API.NavigationMesh_get_polygon_count(self)
}
func (self classNavigationMesh) GetPolygon(idx Int) PackedInt32Array {
	return self.ptr.API.NavigationMesh_get_polygon(self, idx)
}
func (self classNavigationMesh) ClearPolygons() {
	self.ptr.API.NavigationMesh_clear_polygons(self)
}
func (self classNavigationMesh) CreateFromMesh(mesh Mesh) {
	self.ptr.API.NavigationMesh_create_from_mesh(self, mesh)
}
func (self classNavigationMesh) Clear() {
	self.ptr.API.NavigationMesh_clear(self)
}

type classNavigationMeshGenerator struct {
	Class[classNavigationMeshGenerator]
}

func (self classNavigationMeshGenerator) Super() Object {
	var super Object
	super.ptr = self.ptr
	return super
}

func (self classNavigationMeshGenerator) Object() Object { return self.Super() }

func (self classNavigationMeshGenerator) isSingleton() {}
func (self classNavigationMeshGenerator) Bake(navigation_mesh NavigationMesh, root_node Node) {
	self.ptr.API.NavigationMeshGenerator_bake(self, navigation_mesh, root_node)
}
func (self classNavigationMeshGenerator) Clear(navigation_mesh NavigationMesh) {
	self.ptr.API.NavigationMeshGenerator_clear(self, navigation_mesh)
}
func (self classNavigationMeshGenerator) ParseSourceGeometryData(navigation_mesh NavigationMesh, source_geometry_data NavigationMeshSourceGeometryData3D, root_node Node, callback Callable) {
	self.ptr.API.NavigationMeshGenerator_parse_source_geometry_data(self, navigation_mesh, source_geometry_data, root_node, callback)
}
func (self classNavigationMeshGenerator) BakeFromSourceGeometryData(navigation_mesh NavigationMesh, source_geometry_data NavigationMeshSourceGeometryData3D, callback Callable) {
	self.ptr.API.NavigationMeshGenerator_bake_from_source_geometry_data(self, navigation_mesh, source_geometry_data, callback)
}

type classNavigationMeshSourceGeometryData2D struct {
	Class[classNavigationMeshSourceGeometryData2D]
}

func (self classNavigationMeshSourceGeometryData2D) Super() Resource {
	var super Resource
	super.ptr = self.ptr
	return super
}

func (self classNavigationMeshSourceGeometryData2D) Resource() Resource { return self.Super() }
func (self classNavigationMeshSourceGeometryData2D) Clear() {
	self.ptr.API.NavigationMeshSourceGeometryData2D_clear(self)
}
func (self classNavigationMeshSourceGeometryData2D) HasData() bool {
	return self.ptr.API.NavigationMeshSourceGeometryData2D_has_data(self)
}
func (self classNavigationMeshSourceGeometryData2D) SetTraversableOutlines(traversable_outlines ArrayOf[PackedVector2Array]) {
	self.ptr.API.NavigationMeshSourceGeometryData2D_set_traversable_outlines(self, traversable_outlines)
}
func (self classNavigationMeshSourceGeometryData2D) GetTraversableOutlines() ArrayOf[PackedVector2Array] {
	return self.ptr.API.NavigationMeshSourceGeometryData2D_get_traversable_outlines(self)
}
func (self classNavigationMeshSourceGeometryData2D) SetObstructionOutlines(obstruction_outlines ArrayOf[PackedVector2Array]) {
	self.ptr.API.NavigationMeshSourceGeometryData2D_set_obstruction_outlines(self, obstruction_outlines)
}
func (self classNavigationMeshSourceGeometryData2D) GetObstructionOutlines() ArrayOf[PackedVector2Array] {
	return self.ptr.API.NavigationMeshSourceGeometryData2D_get_obstruction_outlines(self)
}
func (self classNavigationMeshSourceGeometryData2D) AddTraversableOutline(shape_outline PackedVector2Array) {
	self.ptr.API.NavigationMeshSourceGeometryData2D_add_traversable_outline(self, shape_outline)
}
func (self classNavigationMeshSourceGeometryData2D) AddObstructionOutline(shape_outline PackedVector2Array) {
	self.ptr.API.NavigationMeshSourceGeometryData2D_add_obstruction_outline(self, shape_outline)
}

type classNavigationMeshSourceGeometryData3D struct {
	Class[classNavigationMeshSourceGeometryData3D]
}

func (self classNavigationMeshSourceGeometryData3D) Super() Resource {
	var super Resource
	super.ptr = self.ptr
	return super
}

func (self classNavigationMeshSourceGeometryData3D) Resource() Resource { return self.Super() }
func (self classNavigationMeshSourceGeometryData3D) SetVertices(vertices PackedFloat32Array) {
	self.ptr.API.NavigationMeshSourceGeometryData3D_set_vertices(self, vertices)
}
func (self classNavigationMeshSourceGeometryData3D) GetVertices() PackedFloat32Array {
	return self.ptr.API.NavigationMeshSourceGeometryData3D_get_vertices(self)
}
func (self classNavigationMeshSourceGeometryData3D) SetIndices(indices PackedInt32Array) {
	self.ptr.API.NavigationMeshSourceGeometryData3D_set_indices(self, indices)
}
func (self classNavigationMeshSourceGeometryData3D) GetIndices() PackedInt32Array {
	return self.ptr.API.NavigationMeshSourceGeometryData3D_get_indices(self)
}
func (self classNavigationMeshSourceGeometryData3D) Clear() {
	self.ptr.API.NavigationMeshSourceGeometryData3D_clear(self)
}
func (self classNavigationMeshSourceGeometryData3D) HasData() bool {
	return self.ptr.API.NavigationMeshSourceGeometryData3D_has_data(self)
}
func (self classNavigationMeshSourceGeometryData3D) AddMesh(mesh Mesh, xform Transform3D) {
	self.ptr.API.NavigationMeshSourceGeometryData3D_add_mesh(self, mesh, xform)
}
func (self classNavigationMeshSourceGeometryData3D) AddMeshArray(mesh_array Array, xform Transform3D) {
	self.ptr.API.NavigationMeshSourceGeometryData3D_add_mesh_array(self, mesh_array, xform)
}
func (self classNavigationMeshSourceGeometryData3D) AddFaces(faces PackedVector3Array, xform Transform3D) {
	self.ptr.API.NavigationMeshSourceGeometryData3D_add_faces(self, faces, xform)
}

type classNavigationObstacle2D struct {
	Class[classNavigationObstacle2D]
}

func (self classNavigationObstacle2D) Super() Node2D {
	var super Node2D
	super.ptr = self.ptr
	return super
}

func (self classNavigationObstacle2D) Node2D() Node2D { return self.Super() }
func (self classNavigationObstacle2D) GetRid() RID {
	return self.ptr.API.NavigationObstacle2D_get_rid(self)
}
func (self classNavigationObstacle2D) SetAvoidanceEnabled(enabled bool) {
	self.ptr.API.NavigationObstacle2D_set_avoidance_enabled(self, enabled)
}
func (self classNavigationObstacle2D) GetAvoidanceEnabled() bool {
	return self.ptr.API.NavigationObstacle2D_get_avoidance_enabled(self)
}
func (self classNavigationObstacle2D) SetNavigationMap(navigation_map RID) {
	self.ptr.API.NavigationObstacle2D_set_navigation_map(self, navigation_map)
}
func (self classNavigationObstacle2D) GetNavigationMap() RID {
	return self.ptr.API.NavigationObstacle2D_get_navigation_map(self)
}
func (self classNavigationObstacle2D) SetRadius(radius Float) {
	self.ptr.API.NavigationObstacle2D_set_radius(self, radius)
}
func (self classNavigationObstacle2D) GetRadius() Float {
	return self.ptr.API.NavigationObstacle2D_get_radius(self)
}
func (self classNavigationObstacle2D) SetVelocity(velocity Vector2) {
	self.ptr.API.NavigationObstacle2D_set_velocity(self, velocity)
}
func (self classNavigationObstacle2D) GetVelocity() Vector2 {
	return self.ptr.API.NavigationObstacle2D_get_velocity(self)
}
func (self classNavigationObstacle2D) SetVertices(vertices PackedVector2Array) {
	self.ptr.API.NavigationObstacle2D_set_vertices(self, vertices)
}
func (self classNavigationObstacle2D) GetVertices() PackedVector2Array {
	return self.ptr.API.NavigationObstacle2D_get_vertices(self)
}
func (self classNavigationObstacle2D) SetAvoidanceLayers(layers Int) {
	self.ptr.API.NavigationObstacle2D_set_avoidance_layers(self, layers)
}
func (self classNavigationObstacle2D) GetAvoidanceLayers() Int {
	return self.ptr.API.NavigationObstacle2D_get_avoidance_layers(self)
}
func (self classNavigationObstacle2D) SetAvoidanceLayerValue(layer_number Int, value bool) {
	self.ptr.API.NavigationObstacle2D_set_avoidance_layer_value(self, layer_number, value)
}
func (self classNavigationObstacle2D) GetAvoidanceLayerValue(layer_number Int) bool {
	return self.ptr.API.NavigationObstacle2D_get_avoidance_layer_value(self, layer_number)
}

type classNavigationObstacle3D struct {
	Class[classNavigationObstacle3D]
}

func (self classNavigationObstacle3D) Super() Node3D {
	var super Node3D
	super.ptr = self.ptr
	return super
}

func (self classNavigationObstacle3D) Node3D() Node3D { return self.Super() }
func (self classNavigationObstacle3D) GetRid() RID {
	return self.ptr.API.NavigationObstacle3D_get_rid(self)
}
func (self classNavigationObstacle3D) SetAvoidanceEnabled(enabled bool) {
	self.ptr.API.NavigationObstacle3D_set_avoidance_enabled(self, enabled)
}
func (self classNavigationObstacle3D) GetAvoidanceEnabled() bool {
	return self.ptr.API.NavigationObstacle3D_get_avoidance_enabled(self)
}
func (self classNavigationObstacle3D) SetNavigationMap(navigation_map RID) {
	self.ptr.API.NavigationObstacle3D_set_navigation_map(self, navigation_map)
}
func (self classNavigationObstacle3D) GetNavigationMap() RID {
	return self.ptr.API.NavigationObstacle3D_get_navigation_map(self)
}
func (self classNavigationObstacle3D) SetRadius(radius Float) {
	self.ptr.API.NavigationObstacle3D_set_radius(self, radius)
}
func (self classNavigationObstacle3D) GetRadius() Float {
	return self.ptr.API.NavigationObstacle3D_get_radius(self)
}
func (self classNavigationObstacle3D) SetHeight(height Float) {
	self.ptr.API.NavigationObstacle3D_set_height(self, height)
}
func (self classNavigationObstacle3D) GetHeight() Float {
	return self.ptr.API.NavigationObstacle3D_get_height(self)
}
func (self classNavigationObstacle3D) SetVelocity(velocity Vector3) {
	self.ptr.API.NavigationObstacle3D_set_velocity(self, velocity)
}
func (self classNavigationObstacle3D) GetVelocity() Vector3 {
	return self.ptr.API.NavigationObstacle3D_get_velocity(self)
}
func (self classNavigationObstacle3D) SetVertices(vertices PackedVector3Array) {
	self.ptr.API.NavigationObstacle3D_set_vertices(self, vertices)
}
func (self classNavigationObstacle3D) GetVertices() PackedVector3Array {
	return self.ptr.API.NavigationObstacle3D_get_vertices(self)
}
func (self classNavigationObstacle3D) SetAvoidanceLayers(layers Int) {
	self.ptr.API.NavigationObstacle3D_set_avoidance_layers(self, layers)
}
func (self classNavigationObstacle3D) GetAvoidanceLayers() Int {
	return self.ptr.API.NavigationObstacle3D_get_avoidance_layers(self)
}
func (self classNavigationObstacle3D) SetAvoidanceLayerValue(layer_number Int, value bool) {
	self.ptr.API.NavigationObstacle3D_set_avoidance_layer_value(self, layer_number, value)
}
func (self classNavigationObstacle3D) GetAvoidanceLayerValue(layer_number Int) bool {
	return self.ptr.API.NavigationObstacle3D_get_avoidance_layer_value(self, layer_number)
}
func (self classNavigationObstacle3D) SetUse3dAvoidance(enabled bool) {
	self.ptr.API.NavigationObstacle3D_set_use_3d_avoidance(self, enabled)
}
func (self classNavigationObstacle3D) GetUse3dAvoidance() bool {
	return self.ptr.API.NavigationObstacle3D_get_use_3d_avoidance(self)
}

type classNavigationPathQueryParameters2D struct {
	Class[classNavigationPathQueryParameters2D]
}

func (self classNavigationPathQueryParameters2D) Super() RefCounted {
	var super RefCounted
	super.ptr = self.ptr
	return super
}

func (self classNavigationPathQueryParameters2D) RefCounted() RefCounted { return self.Super() }
func (self classNavigationPathQueryParameters2D) SetPathfindingAlgorithm(pathfinding_algorithm NavigationPathQueryParameters2DPathfindingAlgorithm) {
	self.ptr.API.NavigationPathQueryParameters2D_set_pathfinding_algorithm(self, pathfinding_algorithm)
}
func (self classNavigationPathQueryParameters2D) GetPathfindingAlgorithm() NavigationPathQueryParameters2DPathfindingAlgorithm {
	return self.ptr.API.NavigationPathQueryParameters2D_get_pathfinding_algorithm(self)
}
func (self classNavigationPathQueryParameters2D) SetPathPostprocessing(path_postprocessing NavigationPathQueryParameters2DPathPostProcessing) {
	self.ptr.API.NavigationPathQueryParameters2D_set_path_postprocessing(self, path_postprocessing)
}
func (self classNavigationPathQueryParameters2D) GetPathPostprocessing() NavigationPathQueryParameters2DPathPostProcessing {
	return self.ptr.API.NavigationPathQueryParameters2D_get_path_postprocessing(self)
}
func (self classNavigationPathQueryParameters2D) SetMap(mapping RID) {
	self.ptr.API.NavigationPathQueryParameters2D_set_map(self, mapping)
}
func (self classNavigationPathQueryParameters2D) GetMap() RID {
	return self.ptr.API.NavigationPathQueryParameters2D_get_map(self)
}
func (self classNavigationPathQueryParameters2D) SetStartPosition(start_position Vector2) {
	self.ptr.API.NavigationPathQueryParameters2D_set_start_position(self, start_position)
}
func (self classNavigationPathQueryParameters2D) GetStartPosition() Vector2 {
	return self.ptr.API.NavigationPathQueryParameters2D_get_start_position(self)
}
func (self classNavigationPathQueryParameters2D) SetTargetPosition(target_position Vector2) {
	self.ptr.API.NavigationPathQueryParameters2D_set_target_position(self, target_position)
}
func (self classNavigationPathQueryParameters2D) GetTargetPosition() Vector2 {
	return self.ptr.API.NavigationPathQueryParameters2D_get_target_position(self)
}
func (self classNavigationPathQueryParameters2D) SetNavigationLayers(navigation_layers Int) {
	self.ptr.API.NavigationPathQueryParameters2D_set_navigation_layers(self, navigation_layers)
}
func (self classNavigationPathQueryParameters2D) GetNavigationLayers() Int {
	return self.ptr.API.NavigationPathQueryParameters2D_get_navigation_layers(self)
}
func (self classNavigationPathQueryParameters2D) SetMetadataFlags(flags NavigationPathQueryParameters2DPathMetadataFlags) {
	self.ptr.API.NavigationPathQueryParameters2D_set_metadata_flags(self, flags)
}
func (self classNavigationPathQueryParameters2D) GetMetadataFlags() NavigationPathQueryParameters2DPathMetadataFlags {
	return self.ptr.API.NavigationPathQueryParameters2D_get_metadata_flags(self)
}

type classNavigationPathQueryParameters3D struct {
	Class[classNavigationPathQueryParameters3D]
}

func (self classNavigationPathQueryParameters3D) Super() RefCounted {
	var super RefCounted
	super.ptr = self.ptr
	return super
}

func (self classNavigationPathQueryParameters3D) RefCounted() RefCounted { return self.Super() }
func (self classNavigationPathQueryParameters3D) SetPathfindingAlgorithm(pathfinding_algorithm NavigationPathQueryParameters3DPathfindingAlgorithm) {
	self.ptr.API.NavigationPathQueryParameters3D_set_pathfinding_algorithm(self, pathfinding_algorithm)
}
func (self classNavigationPathQueryParameters3D) GetPathfindingAlgorithm() NavigationPathQueryParameters3DPathfindingAlgorithm {
	return self.ptr.API.NavigationPathQueryParameters3D_get_pathfinding_algorithm(self)
}
func (self classNavigationPathQueryParameters3D) SetPathPostprocessing(path_postprocessing NavigationPathQueryParameters3DPathPostProcessing) {
	self.ptr.API.NavigationPathQueryParameters3D_set_path_postprocessing(self, path_postprocessing)
}
func (self classNavigationPathQueryParameters3D) GetPathPostprocessing() NavigationPathQueryParameters3DPathPostProcessing {
	return self.ptr.API.NavigationPathQueryParameters3D_get_path_postprocessing(self)
}
func (self classNavigationPathQueryParameters3D) SetMap(mapping RID) {
	self.ptr.API.NavigationPathQueryParameters3D_set_map(self, mapping)
}
func (self classNavigationPathQueryParameters3D) GetMap() RID {
	return self.ptr.API.NavigationPathQueryParameters3D_get_map(self)
}
func (self classNavigationPathQueryParameters3D) SetStartPosition(start_position Vector3) {
	self.ptr.API.NavigationPathQueryParameters3D_set_start_position(self, start_position)
}
func (self classNavigationPathQueryParameters3D) GetStartPosition() Vector3 {
	return self.ptr.API.NavigationPathQueryParameters3D_get_start_position(self)
}
func (self classNavigationPathQueryParameters3D) SetTargetPosition(target_position Vector3) {
	self.ptr.API.NavigationPathQueryParameters3D_set_target_position(self, target_position)
}
func (self classNavigationPathQueryParameters3D) GetTargetPosition() Vector3 {
	return self.ptr.API.NavigationPathQueryParameters3D_get_target_position(self)
}
func (self classNavigationPathQueryParameters3D) SetNavigationLayers(navigation_layers Int) {
	self.ptr.API.NavigationPathQueryParameters3D_set_navigation_layers(self, navigation_layers)
}
func (self classNavigationPathQueryParameters3D) GetNavigationLayers() Int {
	return self.ptr.API.NavigationPathQueryParameters3D_get_navigation_layers(self)
}
func (self classNavigationPathQueryParameters3D) SetMetadataFlags(flags NavigationPathQueryParameters3DPathMetadataFlags) {
	self.ptr.API.NavigationPathQueryParameters3D_set_metadata_flags(self, flags)
}
func (self classNavigationPathQueryParameters3D) GetMetadataFlags() NavigationPathQueryParameters3DPathMetadataFlags {
	return self.ptr.API.NavigationPathQueryParameters3D_get_metadata_flags(self)
}

type classNavigationPathQueryResult2D struct {
	Class[classNavigationPathQueryResult2D]
}

func (self classNavigationPathQueryResult2D) Super() RefCounted {
	var super RefCounted
	super.ptr = self.ptr
	return super
}

func (self classNavigationPathQueryResult2D) RefCounted() RefCounted { return self.Super() }
func (self classNavigationPathQueryResult2D) SetPath(path PackedVector2Array) {
	self.ptr.API.NavigationPathQueryResult2D_set_path(self, path)
}
func (self classNavigationPathQueryResult2D) GetPath() PackedVector2Array {
	return self.ptr.API.NavigationPathQueryResult2D_get_path(self)
}
func (self classNavigationPathQueryResult2D) SetPathTypes(path_types PackedInt32Array) {
	self.ptr.API.NavigationPathQueryResult2D_set_path_types(self, path_types)
}
func (self classNavigationPathQueryResult2D) GetPathTypes() PackedInt32Array {
	return self.ptr.API.NavigationPathQueryResult2D_get_path_types(self)
}
func (self classNavigationPathQueryResult2D) SetPathRids(path_rids ArrayOf[RID]) {
	self.ptr.API.NavigationPathQueryResult2D_set_path_rids(self, path_rids)
}
func (self classNavigationPathQueryResult2D) GetPathRids() ArrayOf[RID] {
	return self.ptr.API.NavigationPathQueryResult2D_get_path_rids(self)
}
func (self classNavigationPathQueryResult2D) SetPathOwnerIds(path_owner_ids PackedInt64Array) {
	self.ptr.API.NavigationPathQueryResult2D_set_path_owner_ids(self, path_owner_ids)
}
func (self classNavigationPathQueryResult2D) GetPathOwnerIds() PackedInt64Array {
	return self.ptr.API.NavigationPathQueryResult2D_get_path_owner_ids(self)
}
func (self classNavigationPathQueryResult2D) Reset() {
	self.ptr.API.NavigationPathQueryResult2D_reset(self)
}

type classNavigationPathQueryResult3D struct {
	Class[classNavigationPathQueryResult3D]
}

func (self classNavigationPathQueryResult3D) Super() RefCounted {
	var super RefCounted
	super.ptr = self.ptr
	return super
}

func (self classNavigationPathQueryResult3D) RefCounted() RefCounted { return self.Super() }
func (self classNavigationPathQueryResult3D) SetPath(path PackedVector3Array) {
	self.ptr.API.NavigationPathQueryResult3D_set_path(self, path)
}
func (self classNavigationPathQueryResult3D) GetPath() PackedVector3Array {
	return self.ptr.API.NavigationPathQueryResult3D_get_path(self)
}
func (self classNavigationPathQueryResult3D) SetPathTypes(path_types PackedInt32Array) {
	self.ptr.API.NavigationPathQueryResult3D_set_path_types(self, path_types)
}
func (self classNavigationPathQueryResult3D) GetPathTypes() PackedInt32Array {
	return self.ptr.API.NavigationPathQueryResult3D_get_path_types(self)
}
func (self classNavigationPathQueryResult3D) SetPathRids(path_rids ArrayOf[RID]) {
	self.ptr.API.NavigationPathQueryResult3D_set_path_rids(self, path_rids)
}
func (self classNavigationPathQueryResult3D) GetPathRids() ArrayOf[RID] {
	return self.ptr.API.NavigationPathQueryResult3D_get_path_rids(self)
}
func (self classNavigationPathQueryResult3D) SetPathOwnerIds(path_owner_ids PackedInt64Array) {
	self.ptr.API.NavigationPathQueryResult3D_set_path_owner_ids(self, path_owner_ids)
}
func (self classNavigationPathQueryResult3D) GetPathOwnerIds() PackedInt64Array {
	return self.ptr.API.NavigationPathQueryResult3D_get_path_owner_ids(self)
}
func (self classNavigationPathQueryResult3D) Reset() {
	self.ptr.API.NavigationPathQueryResult3D_reset(self)
}

type classNavigationPolygon struct{ Class[classNavigationPolygon] }

func (self classNavigationPolygon) Super() Resource {
	var super Resource
	super.ptr = self.ptr
	return super
}

func (self classNavigationPolygon) Resource() Resource { return self.Super() }
func (self classNavigationPolygon) SetVertices(vertices PackedVector2Array) {
	self.ptr.API.NavigationPolygon_set_vertices(self, vertices)
}
func (self classNavigationPolygon) GetVertices() PackedVector2Array {
	return self.ptr.API.NavigationPolygon_get_vertices(self)
}
func (self classNavigationPolygon) AddPolygon(polygon PackedInt32Array) {
	self.ptr.API.NavigationPolygon_add_polygon(self, polygon)
}
func (self classNavigationPolygon) GetPolygonCount() Int {
	return self.ptr.API.NavigationPolygon_get_polygon_count(self)
}
func (self classNavigationPolygon) GetPolygon(idx Int) PackedInt32Array {
	return self.ptr.API.NavigationPolygon_get_polygon(self, idx)
}
func (self classNavigationPolygon) ClearPolygons() {
	self.ptr.API.NavigationPolygon_clear_polygons(self)
}
func (self classNavigationPolygon) GetNavigationMesh() NavigationMesh {
	return self.ptr.API.NavigationPolygon_get_navigation_mesh(self)
}
func (self classNavigationPolygon) AddOutline(outline PackedVector2Array) {
	self.ptr.API.NavigationPolygon_add_outline(self, outline)
}
func (self classNavigationPolygon) AddOutlineAtIndex(outline PackedVector2Array, index Int) {
	self.ptr.API.NavigationPolygon_add_outline_at_index(self, outline, index)
}
func (self classNavigationPolygon) GetOutlineCount() Int {
	return self.ptr.API.NavigationPolygon_get_outline_count(self)
}
func (self classNavigationPolygon) SetOutline(idx Int, outline PackedVector2Array) {
	self.ptr.API.NavigationPolygon_set_outline(self, idx, outline)
}
func (self classNavigationPolygon) GetOutline(idx Int) PackedVector2Array {
	return self.ptr.API.NavigationPolygon_get_outline(self, idx)
}
func (self classNavigationPolygon) RemoveOutline(idx Int) {
	self.ptr.API.NavigationPolygon_remove_outline(self, idx)
}
func (self classNavigationPolygon) ClearOutlines() {
	self.ptr.API.NavigationPolygon_clear_outlines(self)
}
func (self classNavigationPolygon) MakePolygonsFromOutlines() {
	self.ptr.API.NavigationPolygon_make_polygons_from_outlines(self)
}
func (self classNavigationPolygon) SetCellSize(cell_size Float) {
	self.ptr.API.NavigationPolygon_set_cell_size(self, cell_size)
}
func (self classNavigationPolygon) GetCellSize() Float {
	return self.ptr.API.NavigationPolygon_get_cell_size(self)
}
func (self classNavigationPolygon) SetParsedGeometryType(geometry_type NavigationPolygonParsedGeometryType) {
	self.ptr.API.NavigationPolygon_set_parsed_geometry_type(self, geometry_type)
}
func (self classNavigationPolygon) GetParsedGeometryType() NavigationPolygonParsedGeometryType {
	return self.ptr.API.NavigationPolygon_get_parsed_geometry_type(self)
}
func (self classNavigationPolygon) SetParsedCollisionMask(mask Int) {
	self.ptr.API.NavigationPolygon_set_parsed_collision_mask(self, mask)
}
func (self classNavigationPolygon) GetParsedCollisionMask() Int {
	return self.ptr.API.NavigationPolygon_get_parsed_collision_mask(self)
}
func (self classNavigationPolygon) SetParsedCollisionMaskValue(layer_number Int, value bool) {
	self.ptr.API.NavigationPolygon_set_parsed_collision_mask_value(self, layer_number, value)
}
func (self classNavigationPolygon) GetParsedCollisionMaskValue(layer_number Int) bool {
	return self.ptr.API.NavigationPolygon_get_parsed_collision_mask_value(self, layer_number)
}
func (self classNavigationPolygon) SetSourceGeometryMode(geometry_mode NavigationPolygonSourceGeometryMode) {
	self.ptr.API.NavigationPolygon_set_source_geometry_mode(self, geometry_mode)
}
func (self classNavigationPolygon) GetSourceGeometryMode() NavigationPolygonSourceGeometryMode {
	return self.ptr.API.NavigationPolygon_get_source_geometry_mode(self)
}
func (self classNavigationPolygon) SetSourceGeometryGroupName(group_name StringName) {
	self.ptr.API.NavigationPolygon_set_source_geometry_group_name(self, group_name)
}
func (self classNavigationPolygon) GetSourceGeometryGroupName() StringName {
	return self.ptr.API.NavigationPolygon_get_source_geometry_group_name(self)
}
func (self classNavigationPolygon) SetAgentRadius(agent_radius Float) {
	self.ptr.API.NavigationPolygon_set_agent_radius(self, agent_radius)
}
func (self classNavigationPolygon) GetAgentRadius() Float {
	return self.ptr.API.NavigationPolygon_get_agent_radius(self)
}
func (self classNavigationPolygon) Clear() {
	self.ptr.API.NavigationPolygon_clear(self)
}

type classNavigationRegion2D struct{ Class[classNavigationRegion2D] }

func (self classNavigationRegion2D) Super() Node2D {
	var super Node2D
	super.ptr = self.ptr
	return super
}

func (self classNavigationRegion2D) Node2D() Node2D { return self.Super() }
func (self classNavigationRegion2D) GetRid() RID {
	return self.ptr.API.NavigationRegion2D_get_rid(self)
}
func (self classNavigationRegion2D) SetNavigationPolygon(navigation_polygon NavigationPolygon) {
	self.ptr.API.NavigationRegion2D_set_navigation_polygon(self, navigation_polygon)
}
func (self classNavigationRegion2D) GetNavigationPolygon() NavigationPolygon {
	return self.ptr.API.NavigationRegion2D_get_navigation_polygon(self)
}
func (self classNavigationRegion2D) SetEnabled(enabled bool) {
	self.ptr.API.NavigationRegion2D_set_enabled(self, enabled)
}
func (self classNavigationRegion2D) IsEnabled() bool {
	return self.ptr.API.NavigationRegion2D_is_enabled(self)
}
func (self classNavigationRegion2D) SetNavigationMap(navigation_map RID) {
	self.ptr.API.NavigationRegion2D_set_navigation_map(self, navigation_map)
}
func (self classNavigationRegion2D) GetNavigationMap() RID {
	return self.ptr.API.NavigationRegion2D_get_navigation_map(self)
}
func (self classNavigationRegion2D) SetUseEdgeConnections(enabled bool) {
	self.ptr.API.NavigationRegion2D_set_use_edge_connections(self, enabled)
}
func (self classNavigationRegion2D) GetUseEdgeConnections() bool {
	return self.ptr.API.NavigationRegion2D_get_use_edge_connections(self)
}
func (self classNavigationRegion2D) SetNavigationLayers(navigation_layers Int) {
	self.ptr.API.NavigationRegion2D_set_navigation_layers(self, navigation_layers)
}
func (self classNavigationRegion2D) GetNavigationLayers() Int {
	return self.ptr.API.NavigationRegion2D_get_navigation_layers(self)
}
func (self classNavigationRegion2D) SetNavigationLayerValue(layer_number Int, value bool) {
	self.ptr.API.NavigationRegion2D_set_navigation_layer_value(self, layer_number, value)
}
func (self classNavigationRegion2D) GetNavigationLayerValue(layer_number Int) bool {
	return self.ptr.API.NavigationRegion2D_get_navigation_layer_value(self, layer_number)
}
func (self classNavigationRegion2D) SetConstrainAvoidance(enabled bool) {
	self.ptr.API.NavigationRegion2D_set_constrain_avoidance(self, enabled)
}
func (self classNavigationRegion2D) GetConstrainAvoidance() bool {
	return self.ptr.API.NavigationRegion2D_get_constrain_avoidance(self)
}
func (self classNavigationRegion2D) SetAvoidanceLayers(layers Int) {
	self.ptr.API.NavigationRegion2D_set_avoidance_layers(self, layers)
}
func (self classNavigationRegion2D) GetAvoidanceLayers() Int {
	return self.ptr.API.NavigationRegion2D_get_avoidance_layers(self)
}
func (self classNavigationRegion2D) SetAvoidanceLayerValue(layer_number Int, value bool) {
	self.ptr.API.NavigationRegion2D_set_avoidance_layer_value(self, layer_number, value)
}
func (self classNavigationRegion2D) GetAvoidanceLayerValue(layer_number Int) bool {
	return self.ptr.API.NavigationRegion2D_get_avoidance_layer_value(self, layer_number)
}
func (self classNavigationRegion2D) GetRegionRid() RID {
	return self.ptr.API.NavigationRegion2D_get_region_rid(self)
}
func (self classNavigationRegion2D) SetEnterCost(enter_cost Float) {
	self.ptr.API.NavigationRegion2D_set_enter_cost(self, enter_cost)
}
func (self classNavigationRegion2D) GetEnterCost() Float {
	return self.ptr.API.NavigationRegion2D_get_enter_cost(self)
}
func (self classNavigationRegion2D) SetTravelCost(travel_cost Float) {
	self.ptr.API.NavigationRegion2D_set_travel_cost(self, travel_cost)
}
func (self classNavigationRegion2D) GetTravelCost() Float {
	return self.ptr.API.NavigationRegion2D_get_travel_cost(self)
}
func (self classNavigationRegion2D) BakeNavigationPolygon(on_thread bool) {
	self.ptr.API.NavigationRegion2D_bake_navigation_polygon(self, on_thread)
}

type classNavigationRegion3D struct{ Class[classNavigationRegion3D] }

func (self classNavigationRegion3D) Super() Node3D {
	var super Node3D
	super.ptr = self.ptr
	return super
}

func (self classNavigationRegion3D) Node3D() Node3D { return self.Super() }
func (self classNavigationRegion3D) GetRid() RID {
	return self.ptr.API.NavigationRegion3D_get_rid(self)
}
func (self classNavigationRegion3D) SetNavigationMesh(navigation_mesh NavigationMesh) {
	self.ptr.API.NavigationRegion3D_set_navigation_mesh(self, navigation_mesh)
}
func (self classNavigationRegion3D) GetNavigationMesh() NavigationMesh {
	return self.ptr.API.NavigationRegion3D_get_navigation_mesh(self)
}
func (self classNavigationRegion3D) SetEnabled(enabled bool) {
	self.ptr.API.NavigationRegion3D_set_enabled(self, enabled)
}
func (self classNavigationRegion3D) IsEnabled() bool {
	return self.ptr.API.NavigationRegion3D_is_enabled(self)
}
func (self classNavigationRegion3D) SetNavigationMap(navigation_map RID) {
	self.ptr.API.NavigationRegion3D_set_navigation_map(self, navigation_map)
}
func (self classNavigationRegion3D) GetNavigationMap() RID {
	return self.ptr.API.NavigationRegion3D_get_navigation_map(self)
}
func (self classNavigationRegion3D) SetUseEdgeConnections(enabled bool) {
	self.ptr.API.NavigationRegion3D_set_use_edge_connections(self, enabled)
}
func (self classNavigationRegion3D) GetUseEdgeConnections() bool {
	return self.ptr.API.NavigationRegion3D_get_use_edge_connections(self)
}
func (self classNavigationRegion3D) SetNavigationLayers(navigation_layers Int) {
	self.ptr.API.NavigationRegion3D_set_navigation_layers(self, navigation_layers)
}
func (self classNavigationRegion3D) GetNavigationLayers() Int {
	return self.ptr.API.NavigationRegion3D_get_navigation_layers(self)
}
func (self classNavigationRegion3D) SetNavigationLayerValue(layer_number Int, value bool) {
	self.ptr.API.NavigationRegion3D_set_navigation_layer_value(self, layer_number, value)
}
func (self classNavigationRegion3D) GetNavigationLayerValue(layer_number Int) bool {
	return self.ptr.API.NavigationRegion3D_get_navigation_layer_value(self, layer_number)
}
func (self classNavigationRegion3D) GetRegionRid() RID {
	return self.ptr.API.NavigationRegion3D_get_region_rid(self)
}
func (self classNavigationRegion3D) SetEnterCost(enter_cost Float) {
	self.ptr.API.NavigationRegion3D_set_enter_cost(self, enter_cost)
}
func (self classNavigationRegion3D) GetEnterCost() Float {
	return self.ptr.API.NavigationRegion3D_get_enter_cost(self)
}
func (self classNavigationRegion3D) SetTravelCost(travel_cost Float) {
	self.ptr.API.NavigationRegion3D_set_travel_cost(self, travel_cost)
}
func (self classNavigationRegion3D) GetTravelCost() Float {
	return self.ptr.API.NavigationRegion3D_get_travel_cost(self)
}
func (self classNavigationRegion3D) BakeNavigationMesh(on_thread bool) {
	self.ptr.API.NavigationRegion3D_bake_navigation_mesh(self, on_thread)
}

type classNavigationServer2D struct{ Class[classNavigationServer2D] }

func (self classNavigationServer2D) Super() Object {
	var super Object
	super.ptr = self.ptr
	return super
}

func (self classNavigationServer2D) Object() Object { return self.Super() }

func (self classNavigationServer2D) isSingleton() {}
func (self classNavigationServer2D) GetMaps() ArrayOf[RID] {
	return self.ptr.API.NavigationServer2D_get_maps(self)
}
func (self classNavigationServer2D) MapCreate() RID {
	return self.ptr.API.NavigationServer2D_map_create(self)
}
func (self classNavigationServer2D) MapSetActive(mapping RID, active bool) {
	self.ptr.API.NavigationServer2D_map_set_active(self, mapping, active)
}
func (self classNavigationServer2D) MapIsActive(mapping RID) bool {
	return self.ptr.API.NavigationServer2D_map_is_active(self, mapping)
}
func (self classNavigationServer2D) MapSetCellSize(mapping RID, cell_size Float) {
	self.ptr.API.NavigationServer2D_map_set_cell_size(self, mapping, cell_size)
}
func (self classNavigationServer2D) MapGetCellSize(mapping RID) Float {
	return self.ptr.API.NavigationServer2D_map_get_cell_size(self, mapping)
}
func (self classNavigationServer2D) MapSetUseEdgeConnections(mapping RID, enabled bool) {
	self.ptr.API.NavigationServer2D_map_set_use_edge_connections(self, mapping, enabled)
}
func (self classNavigationServer2D) MapGetUseEdgeConnections(mapping RID) bool {
	return self.ptr.API.NavigationServer2D_map_get_use_edge_connections(self, mapping)
}
func (self classNavigationServer2D) MapSetEdgeConnectionMargin(mapping RID, margin Float) {
	self.ptr.API.NavigationServer2D_map_set_edge_connection_margin(self, mapping, margin)
}
func (self classNavigationServer2D) MapGetEdgeConnectionMargin(mapping RID) Float {
	return self.ptr.API.NavigationServer2D_map_get_edge_connection_margin(self, mapping)
}
func (self classNavigationServer2D) MapSetLinkConnectionRadius(mapping RID, radius Float) {
	self.ptr.API.NavigationServer2D_map_set_link_connection_radius(self, mapping, radius)
}
func (self classNavigationServer2D) MapGetLinkConnectionRadius(mapping RID) Float {
	return self.ptr.API.NavigationServer2D_map_get_link_connection_radius(self, mapping)
}
func (self classNavigationServer2D) MapGetPath(mapping RID, origin Vector2, destination Vector2, optimize bool, navigation_layers Int) PackedVector2Array {
	return self.ptr.API.NavigationServer2D_map_get_path(self, mapping, origin, destination, optimize, navigation_layers)
}
func (self classNavigationServer2D) MapGetClosestPoint(mapping RID, to_point Vector2) Vector2 {
	return self.ptr.API.NavigationServer2D_map_get_closest_point(self, mapping, to_point)
}
func (self classNavigationServer2D) MapGetClosestPointOwner(mapping RID, to_point Vector2) RID {
	return self.ptr.API.NavigationServer2D_map_get_closest_point_owner(self, mapping, to_point)
}
func (self classNavigationServer2D) MapGetLinks(mapping RID) ArrayOf[RID] {
	return self.ptr.API.NavigationServer2D_map_get_links(self, mapping)
}
func (self classNavigationServer2D) MapGetRegions(mapping RID) ArrayOf[RID] {
	return self.ptr.API.NavigationServer2D_map_get_regions(self, mapping)
}
func (self classNavigationServer2D) MapGetAgents(mapping RID) ArrayOf[RID] {
	return self.ptr.API.NavigationServer2D_map_get_agents(self, mapping)
}
func (self classNavigationServer2D) MapGetObstacles(mapping RID) ArrayOf[RID] {
	return self.ptr.API.NavigationServer2D_map_get_obstacles(self, mapping)
}
func (self classNavigationServer2D) MapForceUpdate(mapping RID) {
	self.ptr.API.NavigationServer2D_map_force_update(self, mapping)
}
func (self classNavigationServer2D) MapGetRandomPoint(mapping RID, navigation_layers Int, uniformly bool) Vector2 {
	return self.ptr.API.NavigationServer2D_map_get_random_point(self, mapping, navigation_layers, uniformly)
}
func (self classNavigationServer2D) QueryPath(parameters NavigationPathQueryParameters2D, result NavigationPathQueryResult2D) {
	self.ptr.API.NavigationServer2D_query_path(self, parameters, result)
}
func (self classNavigationServer2D) RegionCreate() RID {
	return self.ptr.API.NavigationServer2D_region_create(self)
}
func (self classNavigationServer2D) RegionSetEnabled(region RID, enabled bool) {
	self.ptr.API.NavigationServer2D_region_set_enabled(self, region, enabled)
}
func (self classNavigationServer2D) RegionGetEnabled(region RID) bool {
	return self.ptr.API.NavigationServer2D_region_get_enabled(self, region)
}
func (self classNavigationServer2D) RegionSetUseEdgeConnections(region RID, enabled bool) {
	self.ptr.API.NavigationServer2D_region_set_use_edge_connections(self, region, enabled)
}
func (self classNavigationServer2D) RegionGetUseEdgeConnections(region RID) bool {
	return self.ptr.API.NavigationServer2D_region_get_use_edge_connections(self, region)
}
func (self classNavigationServer2D) RegionSetEnterCost(region RID, enter_cost Float) {
	self.ptr.API.NavigationServer2D_region_set_enter_cost(self, region, enter_cost)
}
func (self classNavigationServer2D) RegionGetEnterCost(region RID) Float {
	return self.ptr.API.NavigationServer2D_region_get_enter_cost(self, region)
}
func (self classNavigationServer2D) RegionSetTravelCost(region RID, travel_cost Float) {
	self.ptr.API.NavigationServer2D_region_set_travel_cost(self, region, travel_cost)
}
func (self classNavigationServer2D) RegionGetTravelCost(region RID) Float {
	return self.ptr.API.NavigationServer2D_region_get_travel_cost(self, region)
}
func (self classNavigationServer2D) RegionSetOwnerId(region RID, owner_id Int) {
	self.ptr.API.NavigationServer2D_region_set_owner_id(self, region, owner_id)
}
func (self classNavigationServer2D) RegionGetOwnerId(region RID) Int {
	return self.ptr.API.NavigationServer2D_region_get_owner_id(self, region)
}
func (self classNavigationServer2D) RegionOwnsPoint(region RID, point Vector2) bool {
	return self.ptr.API.NavigationServer2D_region_owns_point(self, region, point)
}
func (self classNavigationServer2D) RegionSetMap(region RID, mapping RID) {
	self.ptr.API.NavigationServer2D_region_set_map(self, region, mapping)
}
func (self classNavigationServer2D) RegionGetMap(region RID) RID {
	return self.ptr.API.NavigationServer2D_region_get_map(self, region)
}
func (self classNavigationServer2D) RegionSetNavigationLayers(region RID, navigation_layers Int) {
	self.ptr.API.NavigationServer2D_region_set_navigation_layers(self, region, navigation_layers)
}
func (self classNavigationServer2D) RegionGetNavigationLayers(region RID) Int {
	return self.ptr.API.NavigationServer2D_region_get_navigation_layers(self, region)
}
func (self classNavigationServer2D) RegionSetTransform(region RID, transform Transform2D) {
	self.ptr.API.NavigationServer2D_region_set_transform(self, region, transform)
}
func (self classNavigationServer2D) RegionGetTransform(region RID) Transform2D {
	return self.ptr.API.NavigationServer2D_region_get_transform(self, region)
}
func (self classNavigationServer2D) RegionSetNavigationPolygon(region RID, navigation_polygon NavigationPolygon) {
	self.ptr.API.NavigationServer2D_region_set_navigation_polygon(self, region, navigation_polygon)
}
func (self classNavigationServer2D) RegionGetConnectionsCount(region RID) Int {
	return self.ptr.API.NavigationServer2D_region_get_connections_count(self, region)
}
func (self classNavigationServer2D) RegionGetConnectionPathwayStart(region RID, connection Int) Vector2 {
	return self.ptr.API.NavigationServer2D_region_get_connection_pathway_start(self, region, connection)
}
func (self classNavigationServer2D) RegionGetConnectionPathwayEnd(region RID, connection Int) Vector2 {
	return self.ptr.API.NavigationServer2D_region_get_connection_pathway_end(self, region, connection)
}
func (self classNavigationServer2D) RegionGetRandomPoint(region RID, navigation_layers Int, uniformly bool) Vector2 {
	return self.ptr.API.NavigationServer2D_region_get_random_point(self, region, navigation_layers, uniformly)
}
func (self classNavigationServer2D) LinkCreate() RID {
	return self.ptr.API.NavigationServer2D_link_create(self)
}
func (self classNavigationServer2D) LinkSetMap(link RID, mapping RID) {
	self.ptr.API.NavigationServer2D_link_set_map(self, link, mapping)
}
func (self classNavigationServer2D) LinkGetMap(link RID) RID {
	return self.ptr.API.NavigationServer2D_link_get_map(self, link)
}
func (self classNavigationServer2D) LinkSetEnabled(link RID, enabled bool) {
	self.ptr.API.NavigationServer2D_link_set_enabled(self, link, enabled)
}
func (self classNavigationServer2D) LinkGetEnabled(link RID) bool {
	return self.ptr.API.NavigationServer2D_link_get_enabled(self, link)
}
func (self classNavigationServer2D) LinkSetBidirectional(link RID, bidirectional bool) {
	self.ptr.API.NavigationServer2D_link_set_bidirectional(self, link, bidirectional)
}
func (self classNavigationServer2D) LinkIsBidirectional(link RID) bool {
	return self.ptr.API.NavigationServer2D_link_is_bidirectional(self, link)
}
func (self classNavigationServer2D) LinkSetNavigationLayers(link RID, navigation_layers Int) {
	self.ptr.API.NavigationServer2D_link_set_navigation_layers(self, link, navigation_layers)
}
func (self classNavigationServer2D) LinkGetNavigationLayers(link RID) Int {
	return self.ptr.API.NavigationServer2D_link_get_navigation_layers(self, link)
}
func (self classNavigationServer2D) LinkSetStartPosition(link RID, position Vector2) {
	self.ptr.API.NavigationServer2D_link_set_start_position(self, link, position)
}
func (self classNavigationServer2D) LinkGetStartPosition(link RID) Vector2 {
	return self.ptr.API.NavigationServer2D_link_get_start_position(self, link)
}
func (self classNavigationServer2D) LinkSetEndPosition(link RID, position Vector2) {
	self.ptr.API.NavigationServer2D_link_set_end_position(self, link, position)
}
func (self classNavigationServer2D) LinkGetEndPosition(link RID) Vector2 {
	return self.ptr.API.NavigationServer2D_link_get_end_position(self, link)
}
func (self classNavigationServer2D) LinkSetEnterCost(link RID, enter_cost Float) {
	self.ptr.API.NavigationServer2D_link_set_enter_cost(self, link, enter_cost)
}
func (self classNavigationServer2D) LinkGetEnterCost(link RID) Float {
	return self.ptr.API.NavigationServer2D_link_get_enter_cost(self, link)
}
func (self classNavigationServer2D) LinkSetTravelCost(link RID, travel_cost Float) {
	self.ptr.API.NavigationServer2D_link_set_travel_cost(self, link, travel_cost)
}
func (self classNavigationServer2D) LinkGetTravelCost(link RID) Float {
	return self.ptr.API.NavigationServer2D_link_get_travel_cost(self, link)
}
func (self classNavigationServer2D) LinkSetOwnerId(link RID, owner_id Int) {
	self.ptr.API.NavigationServer2D_link_set_owner_id(self, link, owner_id)
}
func (self classNavigationServer2D) LinkGetOwnerId(link RID) Int {
	return self.ptr.API.NavigationServer2D_link_get_owner_id(self, link)
}
func (self classNavigationServer2D) AgentCreate() RID {
	return self.ptr.API.NavigationServer2D_agent_create(self)
}
func (self classNavigationServer2D) AgentSetAvoidanceEnabled(agent RID, enabled bool) {
	self.ptr.API.NavigationServer2D_agent_set_avoidance_enabled(self, agent, enabled)
}
func (self classNavigationServer2D) AgentGetAvoidanceEnabled(agent RID) bool {
	return self.ptr.API.NavigationServer2D_agent_get_avoidance_enabled(self, agent)
}
func (self classNavigationServer2D) AgentSetMap(agent RID, mapping RID) {
	self.ptr.API.NavigationServer2D_agent_set_map(self, agent, mapping)
}
func (self classNavigationServer2D) AgentGetMap(agent RID) RID {
	return self.ptr.API.NavigationServer2D_agent_get_map(self, agent)
}
func (self classNavigationServer2D) AgentSetPaused(agent RID, paused bool) {
	self.ptr.API.NavigationServer2D_agent_set_paused(self, agent, paused)
}
func (self classNavigationServer2D) AgentGetPaused(agent RID) bool {
	return self.ptr.API.NavigationServer2D_agent_get_paused(self, agent)
}
func (self classNavigationServer2D) AgentSetNeighborDistance(agent RID, distance Float) {
	self.ptr.API.NavigationServer2D_agent_set_neighbor_distance(self, agent, distance)
}
func (self classNavigationServer2D) AgentGetNeighborDistance(agent RID) Float {
	return self.ptr.API.NavigationServer2D_agent_get_neighbor_distance(self, agent)
}
func (self classNavigationServer2D) AgentSetMaxNeighbors(agent RID, count Int) {
	self.ptr.API.NavigationServer2D_agent_set_max_neighbors(self, agent, count)
}
func (self classNavigationServer2D) AgentGetMaxNeighbors(agent RID) Int {
	return self.ptr.API.NavigationServer2D_agent_get_max_neighbors(self, agent)
}
func (self classNavigationServer2D) AgentSetTimeHorizonAgents(agent RID, time_horizon Float) {
	self.ptr.API.NavigationServer2D_agent_set_time_horizon_agents(self, agent, time_horizon)
}
func (self classNavigationServer2D) AgentGetTimeHorizonAgents(agent RID) Float {
	return self.ptr.API.NavigationServer2D_agent_get_time_horizon_agents(self, agent)
}
func (self classNavigationServer2D) AgentSetTimeHorizonObstacles(agent RID, time_horizon Float) {
	self.ptr.API.NavigationServer2D_agent_set_time_horizon_obstacles(self, agent, time_horizon)
}
func (self classNavigationServer2D) AgentGetTimeHorizonObstacles(agent RID) Float {
	return self.ptr.API.NavigationServer2D_agent_get_time_horizon_obstacles(self, agent)
}
func (self classNavigationServer2D) AgentSetRadius(agent RID, radius Float) {
	self.ptr.API.NavigationServer2D_agent_set_radius(self, agent, radius)
}
func (self classNavigationServer2D) AgentGetRadius(agent RID) Float {
	return self.ptr.API.NavigationServer2D_agent_get_radius(self, agent)
}
func (self classNavigationServer2D) AgentSetMaxSpeed(agent RID, max_speed Float) {
	self.ptr.API.NavigationServer2D_agent_set_max_speed(self, agent, max_speed)
}
func (self classNavigationServer2D) AgentGetMaxSpeed(agent RID) Float {
	return self.ptr.API.NavigationServer2D_agent_get_max_speed(self, agent)
}
func (self classNavigationServer2D) AgentSetVelocityForced(agent RID, velocity Vector2) {
	self.ptr.API.NavigationServer2D_agent_set_velocity_forced(self, agent, velocity)
}
func (self classNavigationServer2D) AgentSetVelocity(agent RID, velocity Vector2) {
	self.ptr.API.NavigationServer2D_agent_set_velocity(self, agent, velocity)
}
func (self classNavigationServer2D) AgentGetVelocity(agent RID) Vector2 {
	return self.ptr.API.NavigationServer2D_agent_get_velocity(self, agent)
}
func (self classNavigationServer2D) AgentSetPosition(agent RID, position Vector2) {
	self.ptr.API.NavigationServer2D_agent_set_position(self, agent, position)
}
func (self classNavigationServer2D) AgentGetPosition(agent RID) Vector2 {
	return self.ptr.API.NavigationServer2D_agent_get_position(self, agent)
}
func (self classNavigationServer2D) AgentIsMapChanged(agent RID) bool {
	return self.ptr.API.NavigationServer2D_agent_is_map_changed(self, agent)
}
func (self classNavigationServer2D) AgentSetAvoidanceCallback(agent RID, callback Callable) {
	self.ptr.API.NavigationServer2D_agent_set_avoidance_callback(self, agent, callback)
}
func (self classNavigationServer2D) AgentHasAvoidanceCallback(agent RID) bool {
	return self.ptr.API.NavigationServer2D_agent_has_avoidance_callback(self, agent)
}
func (self classNavigationServer2D) AgentSetAvoidanceLayers(agent RID, layers Int) {
	self.ptr.API.NavigationServer2D_agent_set_avoidance_layers(self, agent, layers)
}
func (self classNavigationServer2D) AgentGetAvoidanceLayers(agent RID) Int {
	return self.ptr.API.NavigationServer2D_agent_get_avoidance_layers(self, agent)
}
func (self classNavigationServer2D) AgentSetAvoidanceMask(agent RID, mask Int) {
	self.ptr.API.NavigationServer2D_agent_set_avoidance_mask(self, agent, mask)
}
func (self classNavigationServer2D) AgentGetAvoidanceMask(agent RID) Int {
	return self.ptr.API.NavigationServer2D_agent_get_avoidance_mask(self, agent)
}
func (self classNavigationServer2D) AgentSetAvoidancePriority(agent RID, priority Float) {
	self.ptr.API.NavigationServer2D_agent_set_avoidance_priority(self, agent, priority)
}
func (self classNavigationServer2D) AgentGetAvoidancePriority(agent RID) Float {
	return self.ptr.API.NavigationServer2D_agent_get_avoidance_priority(self, agent)
}
func (self classNavigationServer2D) ObstacleCreate() RID {
	return self.ptr.API.NavigationServer2D_obstacle_create(self)
}
func (self classNavigationServer2D) ObstacleSetAvoidanceEnabled(obstacle RID, enabled bool) {
	self.ptr.API.NavigationServer2D_obstacle_set_avoidance_enabled(self, obstacle, enabled)
}
func (self classNavigationServer2D) ObstacleGetAvoidanceEnabled(obstacle RID) bool {
	return self.ptr.API.NavigationServer2D_obstacle_get_avoidance_enabled(self, obstacle)
}
func (self classNavigationServer2D) ObstacleSetMap(obstacle RID, mapping RID) {
	self.ptr.API.NavigationServer2D_obstacle_set_map(self, obstacle, mapping)
}
func (self classNavigationServer2D) ObstacleGetMap(obstacle RID) RID {
	return self.ptr.API.NavigationServer2D_obstacle_get_map(self, obstacle)
}
func (self classNavigationServer2D) ObstacleSetPaused(obstacle RID, paused bool) {
	self.ptr.API.NavigationServer2D_obstacle_set_paused(self, obstacle, paused)
}
func (self classNavigationServer2D) ObstacleGetPaused(obstacle RID) bool {
	return self.ptr.API.NavigationServer2D_obstacle_get_paused(self, obstacle)
}
func (self classNavigationServer2D) ObstacleSetRadius(obstacle RID, radius Float) {
	self.ptr.API.NavigationServer2D_obstacle_set_radius(self, obstacle, radius)
}
func (self classNavigationServer2D) ObstacleGetRadius(obstacle RID) Float {
	return self.ptr.API.NavigationServer2D_obstacle_get_radius(self, obstacle)
}
func (self classNavigationServer2D) ObstacleSetVelocity(obstacle RID, velocity Vector2) {
	self.ptr.API.NavigationServer2D_obstacle_set_velocity(self, obstacle, velocity)
}
func (self classNavigationServer2D) ObstacleGetVelocity(obstacle RID) Vector2 {
	return self.ptr.API.NavigationServer2D_obstacle_get_velocity(self, obstacle)
}
func (self classNavigationServer2D) ObstacleSetPosition(obstacle RID, position Vector2) {
	self.ptr.API.NavigationServer2D_obstacle_set_position(self, obstacle, position)
}
func (self classNavigationServer2D) ObstacleGetPosition(obstacle RID) Vector2 {
	return self.ptr.API.NavigationServer2D_obstacle_get_position(self, obstacle)
}
func (self classNavigationServer2D) ObstacleSetVertices(obstacle RID, vertices PackedVector2Array) {
	self.ptr.API.NavigationServer2D_obstacle_set_vertices(self, obstacle, vertices)
}
func (self classNavigationServer2D) ObstacleGetVertices(obstacle RID) PackedVector2Array {
	return self.ptr.API.NavigationServer2D_obstacle_get_vertices(self, obstacle)
}
func (self classNavigationServer2D) ObstacleSetAvoidanceLayers(obstacle RID, layers Int) {
	self.ptr.API.NavigationServer2D_obstacle_set_avoidance_layers(self, obstacle, layers)
}
func (self classNavigationServer2D) ObstacleGetAvoidanceLayers(obstacle RID) Int {
	return self.ptr.API.NavigationServer2D_obstacle_get_avoidance_layers(self, obstacle)
}
func (self classNavigationServer2D) ParseSourceGeometryData(navigation_polygon NavigationPolygon, source_geometry_data NavigationMeshSourceGeometryData2D, root_node Node, callback Callable) {
	self.ptr.API.NavigationServer2D_parse_source_geometry_data(self, navigation_polygon, source_geometry_data, root_node, callback)
}
func (self classNavigationServer2D) BakeFromSourceGeometryData(navigation_polygon NavigationPolygon, source_geometry_data NavigationMeshSourceGeometryData2D, callback Callable) {
	self.ptr.API.NavigationServer2D_bake_from_source_geometry_data(self, navigation_polygon, source_geometry_data, callback)
}
func (self classNavigationServer2D) BakeFromSourceGeometryDataAsync(navigation_polygon NavigationPolygon, source_geometry_data NavigationMeshSourceGeometryData2D, callback Callable) {
	self.ptr.API.NavigationServer2D_bake_from_source_geometry_data_async(self, navigation_polygon, source_geometry_data, callback)
}
func (self classNavigationServer2D) FreeRid(rid RID) {
	self.ptr.API.NavigationServer2D_free_rid(self, rid)
}
func (self classNavigationServer2D) SetDebugEnabled(enabled bool) {
	self.ptr.API.NavigationServer2D_set_debug_enabled(self, enabled)
}
func (self classNavigationServer2D) GetDebugEnabled() bool {
	return self.ptr.API.NavigationServer2D_get_debug_enabled(self)
}

type classNavigationServer3D struct{ Class[classNavigationServer3D] }

func (self classNavigationServer3D) Super() Object {
	var super Object
	super.ptr = self.ptr
	return super
}

func (self classNavigationServer3D) Object() Object { return self.Super() }

func (self classNavigationServer3D) isSingleton() {}
func (self classNavigationServer3D) GetMaps() ArrayOf[RID] {
	return self.ptr.API.NavigationServer3D_get_maps(self)
}
func (self classNavigationServer3D) MapCreate() RID {
	return self.ptr.API.NavigationServer3D_map_create(self)
}
func (self classNavigationServer3D) MapSetActive(mapping RID, active bool) {
	self.ptr.API.NavigationServer3D_map_set_active(self, mapping, active)
}
func (self classNavigationServer3D) MapIsActive(mapping RID) bool {
	return self.ptr.API.NavigationServer3D_map_is_active(self, mapping)
}
func (self classNavigationServer3D) MapSetUp(mapping RID, up Vector3) {
	self.ptr.API.NavigationServer3D_map_set_up(self, mapping, up)
}
func (self classNavigationServer3D) MapGetUp(mapping RID) Vector3 {
	return self.ptr.API.NavigationServer3D_map_get_up(self, mapping)
}
func (self classNavigationServer3D) MapSetCellSize(mapping RID, cell_size Float) {
	self.ptr.API.NavigationServer3D_map_set_cell_size(self, mapping, cell_size)
}
func (self classNavigationServer3D) MapGetCellSize(mapping RID) Float {
	return self.ptr.API.NavigationServer3D_map_get_cell_size(self, mapping)
}
func (self classNavigationServer3D) MapSetCellHeight(mapping RID, cell_height Float) {
	self.ptr.API.NavigationServer3D_map_set_cell_height(self, mapping, cell_height)
}
func (self classNavigationServer3D) MapGetCellHeight(mapping RID) Float {
	return self.ptr.API.NavigationServer3D_map_get_cell_height(self, mapping)
}
func (self classNavigationServer3D) MapSetUseEdgeConnections(mapping RID, enabled bool) {
	self.ptr.API.NavigationServer3D_map_set_use_edge_connections(self, mapping, enabled)
}
func (self classNavigationServer3D) MapGetUseEdgeConnections(mapping RID) bool {
	return self.ptr.API.NavigationServer3D_map_get_use_edge_connections(self, mapping)
}
func (self classNavigationServer3D) MapSetEdgeConnectionMargin(mapping RID, margin Float) {
	self.ptr.API.NavigationServer3D_map_set_edge_connection_margin(self, mapping, margin)
}
func (self classNavigationServer3D) MapGetEdgeConnectionMargin(mapping RID) Float {
	return self.ptr.API.NavigationServer3D_map_get_edge_connection_margin(self, mapping)
}
func (self classNavigationServer3D) MapSetLinkConnectionRadius(mapping RID, radius Float) {
	self.ptr.API.NavigationServer3D_map_set_link_connection_radius(self, mapping, radius)
}
func (self classNavigationServer3D) MapGetLinkConnectionRadius(mapping RID) Float {
	return self.ptr.API.NavigationServer3D_map_get_link_connection_radius(self, mapping)
}
func (self classNavigationServer3D) MapGetPath(mapping RID, origin Vector3, destination Vector3, optimize bool, navigation_layers Int) PackedVector3Array {
	return self.ptr.API.NavigationServer3D_map_get_path(self, mapping, origin, destination, optimize, navigation_layers)
}
func (self classNavigationServer3D) MapGetClosestPointToSegment(mapping RID, start Vector3, end Vector3, use_collision bool) Vector3 {
	return self.ptr.API.NavigationServer3D_map_get_closest_point_to_segment(self, mapping, start, end, use_collision)
}
func (self classNavigationServer3D) MapGetClosestPoint(mapping RID, to_point Vector3) Vector3 {
	return self.ptr.API.NavigationServer3D_map_get_closest_point(self, mapping, to_point)
}
func (self classNavigationServer3D) MapGetClosestPointNormal(mapping RID, to_point Vector3) Vector3 {
	return self.ptr.API.NavigationServer3D_map_get_closest_point_normal(self, mapping, to_point)
}
func (self classNavigationServer3D) MapGetClosestPointOwner(mapping RID, to_point Vector3) RID {
	return self.ptr.API.NavigationServer3D_map_get_closest_point_owner(self, mapping, to_point)
}
func (self classNavigationServer3D) MapGetLinks(mapping RID) ArrayOf[RID] {
	return self.ptr.API.NavigationServer3D_map_get_links(self, mapping)
}
func (self classNavigationServer3D) MapGetRegions(mapping RID) ArrayOf[RID] {
	return self.ptr.API.NavigationServer3D_map_get_regions(self, mapping)
}
func (self classNavigationServer3D) MapGetAgents(mapping RID) ArrayOf[RID] {
	return self.ptr.API.NavigationServer3D_map_get_agents(self, mapping)
}
func (self classNavigationServer3D) MapGetObstacles(mapping RID) ArrayOf[RID] {
	return self.ptr.API.NavigationServer3D_map_get_obstacles(self, mapping)
}
func (self classNavigationServer3D) MapForceUpdate(mapping RID) {
	self.ptr.API.NavigationServer3D_map_force_update(self, mapping)
}
func (self classNavigationServer3D) MapGetRandomPoint(mapping RID, navigation_layers Int, uniformly bool) Vector3 {
	return self.ptr.API.NavigationServer3D_map_get_random_point(self, mapping, navigation_layers, uniformly)
}
func (self classNavigationServer3D) QueryPath(parameters NavigationPathQueryParameters3D, result NavigationPathQueryResult3D) {
	self.ptr.API.NavigationServer3D_query_path(self, parameters, result)
}
func (self classNavigationServer3D) RegionCreate() RID {
	return self.ptr.API.NavigationServer3D_region_create(self)
}
func (self classNavigationServer3D) RegionSetEnabled(region RID, enabled bool) {
	self.ptr.API.NavigationServer3D_region_set_enabled(self, region, enabled)
}
func (self classNavigationServer3D) RegionGetEnabled(region RID) bool {
	return self.ptr.API.NavigationServer3D_region_get_enabled(self, region)
}
func (self classNavigationServer3D) RegionSetUseEdgeConnections(region RID, enabled bool) {
	self.ptr.API.NavigationServer3D_region_set_use_edge_connections(self, region, enabled)
}
func (self classNavigationServer3D) RegionGetUseEdgeConnections(region RID) bool {
	return self.ptr.API.NavigationServer3D_region_get_use_edge_connections(self, region)
}
func (self classNavigationServer3D) RegionSetEnterCost(region RID, enter_cost Float) {
	self.ptr.API.NavigationServer3D_region_set_enter_cost(self, region, enter_cost)
}
func (self classNavigationServer3D) RegionGetEnterCost(region RID) Float {
	return self.ptr.API.NavigationServer3D_region_get_enter_cost(self, region)
}
func (self classNavigationServer3D) RegionSetTravelCost(region RID, travel_cost Float) {
	self.ptr.API.NavigationServer3D_region_set_travel_cost(self, region, travel_cost)
}
func (self classNavigationServer3D) RegionGetTravelCost(region RID) Float {
	return self.ptr.API.NavigationServer3D_region_get_travel_cost(self, region)
}
func (self classNavigationServer3D) RegionSetOwnerId(region RID, owner_id Int) {
	self.ptr.API.NavigationServer3D_region_set_owner_id(self, region, owner_id)
}
func (self classNavigationServer3D) RegionGetOwnerId(region RID) Int {
	return self.ptr.API.NavigationServer3D_region_get_owner_id(self, region)
}
func (self classNavigationServer3D) RegionOwnsPoint(region RID, point Vector3) bool {
	return self.ptr.API.NavigationServer3D_region_owns_point(self, region, point)
}
func (self classNavigationServer3D) RegionSetMap(region RID, mapping RID) {
	self.ptr.API.NavigationServer3D_region_set_map(self, region, mapping)
}
func (self classNavigationServer3D) RegionGetMap(region RID) RID {
	return self.ptr.API.NavigationServer3D_region_get_map(self, region)
}
func (self classNavigationServer3D) RegionSetNavigationLayers(region RID, navigation_layers Int) {
	self.ptr.API.NavigationServer3D_region_set_navigation_layers(self, region, navigation_layers)
}
func (self classNavigationServer3D) RegionGetNavigationLayers(region RID) Int {
	return self.ptr.API.NavigationServer3D_region_get_navigation_layers(self, region)
}
func (self classNavigationServer3D) RegionSetTransform(region RID, transform Transform3D) {
	self.ptr.API.NavigationServer3D_region_set_transform(self, region, transform)
}
func (self classNavigationServer3D) RegionGetTransform(region RID) Transform3D {
	return self.ptr.API.NavigationServer3D_region_get_transform(self, region)
}
func (self classNavigationServer3D) RegionSetNavigationMesh(region RID, navigation_mesh NavigationMesh) {
	self.ptr.API.NavigationServer3D_region_set_navigation_mesh(self, region, navigation_mesh)
}
func (self classNavigationServer3D) RegionBakeNavigationMesh(navigation_mesh NavigationMesh, root_node Node) {
	self.ptr.API.NavigationServer3D_region_bake_navigation_mesh(self, navigation_mesh, root_node)
}
func (self classNavigationServer3D) RegionGetConnectionsCount(region RID) Int {
	return self.ptr.API.NavigationServer3D_region_get_connections_count(self, region)
}
func (self classNavigationServer3D) RegionGetConnectionPathwayStart(region RID, connection Int) Vector3 {
	return self.ptr.API.NavigationServer3D_region_get_connection_pathway_start(self, region, connection)
}
func (self classNavigationServer3D) RegionGetConnectionPathwayEnd(region RID, connection Int) Vector3 {
	return self.ptr.API.NavigationServer3D_region_get_connection_pathway_end(self, region, connection)
}
func (self classNavigationServer3D) RegionGetRandomPoint(region RID, navigation_layers Int, uniformly bool) Vector3 {
	return self.ptr.API.NavigationServer3D_region_get_random_point(self, region, navigation_layers, uniformly)
}
func (self classNavigationServer3D) LinkCreate() RID {
	return self.ptr.API.NavigationServer3D_link_create(self)
}
func (self classNavigationServer3D) LinkSetMap(link RID, mapping RID) {
	self.ptr.API.NavigationServer3D_link_set_map(self, link, mapping)
}
func (self classNavigationServer3D) LinkGetMap(link RID) RID {
	return self.ptr.API.NavigationServer3D_link_get_map(self, link)
}
func (self classNavigationServer3D) LinkSetEnabled(link RID, enabled bool) {
	self.ptr.API.NavigationServer3D_link_set_enabled(self, link, enabled)
}
func (self classNavigationServer3D) LinkGetEnabled(link RID) bool {
	return self.ptr.API.NavigationServer3D_link_get_enabled(self, link)
}
func (self classNavigationServer3D) LinkSetBidirectional(link RID, bidirectional bool) {
	self.ptr.API.NavigationServer3D_link_set_bidirectional(self, link, bidirectional)
}
func (self classNavigationServer3D) LinkIsBidirectional(link RID) bool {
	return self.ptr.API.NavigationServer3D_link_is_bidirectional(self, link)
}
func (self classNavigationServer3D) LinkSetNavigationLayers(link RID, navigation_layers Int) {
	self.ptr.API.NavigationServer3D_link_set_navigation_layers(self, link, navigation_layers)
}
func (self classNavigationServer3D) LinkGetNavigationLayers(link RID) Int {
	return self.ptr.API.NavigationServer3D_link_get_navigation_layers(self, link)
}
func (self classNavigationServer3D) LinkSetStartPosition(link RID, position Vector3) {
	self.ptr.API.NavigationServer3D_link_set_start_position(self, link, position)
}
func (self classNavigationServer3D) LinkGetStartPosition(link RID) Vector3 {
	return self.ptr.API.NavigationServer3D_link_get_start_position(self, link)
}
func (self classNavigationServer3D) LinkSetEndPosition(link RID, position Vector3) {
	self.ptr.API.NavigationServer3D_link_set_end_position(self, link, position)
}
func (self classNavigationServer3D) LinkGetEndPosition(link RID) Vector3 {
	return self.ptr.API.NavigationServer3D_link_get_end_position(self, link)
}
func (self classNavigationServer3D) LinkSetEnterCost(link RID, enter_cost Float) {
	self.ptr.API.NavigationServer3D_link_set_enter_cost(self, link, enter_cost)
}
func (self classNavigationServer3D) LinkGetEnterCost(link RID) Float {
	return self.ptr.API.NavigationServer3D_link_get_enter_cost(self, link)
}
func (self classNavigationServer3D) LinkSetTravelCost(link RID, travel_cost Float) {
	self.ptr.API.NavigationServer3D_link_set_travel_cost(self, link, travel_cost)
}
func (self classNavigationServer3D) LinkGetTravelCost(link RID) Float {
	return self.ptr.API.NavigationServer3D_link_get_travel_cost(self, link)
}
func (self classNavigationServer3D) LinkSetOwnerId(link RID, owner_id Int) {
	self.ptr.API.NavigationServer3D_link_set_owner_id(self, link, owner_id)
}
func (self classNavigationServer3D) LinkGetOwnerId(link RID) Int {
	return self.ptr.API.NavigationServer3D_link_get_owner_id(self, link)
}
func (self classNavigationServer3D) AgentCreate() RID {
	return self.ptr.API.NavigationServer3D_agent_create(self)
}
func (self classNavigationServer3D) AgentSetAvoidanceEnabled(agent RID, enabled bool) {
	self.ptr.API.NavigationServer3D_agent_set_avoidance_enabled(self, agent, enabled)
}
func (self classNavigationServer3D) AgentGetAvoidanceEnabled(agent RID) bool {
	return self.ptr.API.NavigationServer3D_agent_get_avoidance_enabled(self, agent)
}
func (self classNavigationServer3D) AgentSetUse3dAvoidance(agent RID, enabled bool) {
	self.ptr.API.NavigationServer3D_agent_set_use_3d_avoidance(self, agent, enabled)
}
func (self classNavigationServer3D) AgentGetUse3dAvoidance(agent RID) bool {
	return self.ptr.API.NavigationServer3D_agent_get_use_3d_avoidance(self, agent)
}
func (self classNavigationServer3D) AgentSetMap(agent RID, mapping RID) {
	self.ptr.API.NavigationServer3D_agent_set_map(self, agent, mapping)
}
func (self classNavigationServer3D) AgentGetMap(agent RID) RID {
	return self.ptr.API.NavigationServer3D_agent_get_map(self, agent)
}
func (self classNavigationServer3D) AgentSetPaused(agent RID, paused bool) {
	self.ptr.API.NavigationServer3D_agent_set_paused(self, agent, paused)
}
func (self classNavigationServer3D) AgentGetPaused(agent RID) bool {
	return self.ptr.API.NavigationServer3D_agent_get_paused(self, agent)
}
func (self classNavigationServer3D) AgentSetNeighborDistance(agent RID, distance Float) {
	self.ptr.API.NavigationServer3D_agent_set_neighbor_distance(self, agent, distance)
}
func (self classNavigationServer3D) AgentGetNeighborDistance(agent RID) Float {
	return self.ptr.API.NavigationServer3D_agent_get_neighbor_distance(self, agent)
}
func (self classNavigationServer3D) AgentSetMaxNeighbors(agent RID, count Int) {
	self.ptr.API.NavigationServer3D_agent_set_max_neighbors(self, agent, count)
}
func (self classNavigationServer3D) AgentGetMaxNeighbors(agent RID) Int {
	return self.ptr.API.NavigationServer3D_agent_get_max_neighbors(self, agent)
}
func (self classNavigationServer3D) AgentSetTimeHorizonAgents(agent RID, time_horizon Float) {
	self.ptr.API.NavigationServer3D_agent_set_time_horizon_agents(self, agent, time_horizon)
}
func (self classNavigationServer3D) AgentGetTimeHorizonAgents(agent RID) Float {
	return self.ptr.API.NavigationServer3D_agent_get_time_horizon_agents(self, agent)
}
func (self classNavigationServer3D) AgentSetTimeHorizonObstacles(agent RID, time_horizon Float) {
	self.ptr.API.NavigationServer3D_agent_set_time_horizon_obstacles(self, agent, time_horizon)
}
func (self classNavigationServer3D) AgentGetTimeHorizonObstacles(agent RID) Float {
	return self.ptr.API.NavigationServer3D_agent_get_time_horizon_obstacles(self, agent)
}
func (self classNavigationServer3D) AgentSetRadius(agent RID, radius Float) {
	self.ptr.API.NavigationServer3D_agent_set_radius(self, agent, radius)
}
func (self classNavigationServer3D) AgentGetRadius(agent RID) Float {
	return self.ptr.API.NavigationServer3D_agent_get_radius(self, agent)
}
func (self classNavigationServer3D) AgentSetHeight(agent RID, height Float) {
	self.ptr.API.NavigationServer3D_agent_set_height(self, agent, height)
}
func (self classNavigationServer3D) AgentGetHeight(agent RID) Float {
	return self.ptr.API.NavigationServer3D_agent_get_height(self, agent)
}
func (self classNavigationServer3D) AgentSetMaxSpeed(agent RID, max_speed Float) {
	self.ptr.API.NavigationServer3D_agent_set_max_speed(self, agent, max_speed)
}
func (self classNavigationServer3D) AgentGetMaxSpeed(agent RID) Float {
	return self.ptr.API.NavigationServer3D_agent_get_max_speed(self, agent)
}
func (self classNavigationServer3D) AgentSetVelocityForced(agent RID, velocity Vector3) {
	self.ptr.API.NavigationServer3D_agent_set_velocity_forced(self, agent, velocity)
}
func (self classNavigationServer3D) AgentSetVelocity(agent RID, velocity Vector3) {
	self.ptr.API.NavigationServer3D_agent_set_velocity(self, agent, velocity)
}
func (self classNavigationServer3D) AgentGetVelocity(agent RID) Vector3 {
	return self.ptr.API.NavigationServer3D_agent_get_velocity(self, agent)
}
func (self classNavigationServer3D) AgentSetPosition(agent RID, position Vector3) {
	self.ptr.API.NavigationServer3D_agent_set_position(self, agent, position)
}
func (self classNavigationServer3D) AgentGetPosition(agent RID) Vector3 {
	return self.ptr.API.NavigationServer3D_agent_get_position(self, agent)
}
func (self classNavigationServer3D) AgentIsMapChanged(agent RID) bool {
	return self.ptr.API.NavigationServer3D_agent_is_map_changed(self, agent)
}
func (self classNavigationServer3D) AgentSetAvoidanceCallback(agent RID, callback Callable) {
	self.ptr.API.NavigationServer3D_agent_set_avoidance_callback(self, agent, callback)
}
func (self classNavigationServer3D) AgentHasAvoidanceCallback(agent RID) bool {
	return self.ptr.API.NavigationServer3D_agent_has_avoidance_callback(self, agent)
}
func (self classNavigationServer3D) AgentSetAvoidanceLayers(agent RID, layers Int) {
	self.ptr.API.NavigationServer3D_agent_set_avoidance_layers(self, agent, layers)
}
func (self classNavigationServer3D) AgentGetAvoidanceLayers(agent RID) Int {
	return self.ptr.API.NavigationServer3D_agent_get_avoidance_layers(self, agent)
}
func (self classNavigationServer3D) AgentSetAvoidanceMask(agent RID, mask Int) {
	self.ptr.API.NavigationServer3D_agent_set_avoidance_mask(self, agent, mask)
}
func (self classNavigationServer3D) AgentGetAvoidanceMask(agent RID) Int {
	return self.ptr.API.NavigationServer3D_agent_get_avoidance_mask(self, agent)
}
func (self classNavigationServer3D) AgentSetAvoidancePriority(agent RID, priority Float) {
	self.ptr.API.NavigationServer3D_agent_set_avoidance_priority(self, agent, priority)
}
func (self classNavigationServer3D) AgentGetAvoidancePriority(agent RID) Float {
	return self.ptr.API.NavigationServer3D_agent_get_avoidance_priority(self, agent)
}
func (self classNavigationServer3D) ObstacleCreate() RID {
	return self.ptr.API.NavigationServer3D_obstacle_create(self)
}
func (self classNavigationServer3D) ObstacleSetAvoidanceEnabled(obstacle RID, enabled bool) {
	self.ptr.API.NavigationServer3D_obstacle_set_avoidance_enabled(self, obstacle, enabled)
}
func (self classNavigationServer3D) ObstacleGetAvoidanceEnabled(obstacle RID) bool {
	return self.ptr.API.NavigationServer3D_obstacle_get_avoidance_enabled(self, obstacle)
}
func (self classNavigationServer3D) ObstacleSetUse3dAvoidance(obstacle RID, enabled bool) {
	self.ptr.API.NavigationServer3D_obstacle_set_use_3d_avoidance(self, obstacle, enabled)
}
func (self classNavigationServer3D) ObstacleGetUse3dAvoidance(obstacle RID) bool {
	return self.ptr.API.NavigationServer3D_obstacle_get_use_3d_avoidance(self, obstacle)
}
func (self classNavigationServer3D) ObstacleSetMap(obstacle RID, mapping RID) {
	self.ptr.API.NavigationServer3D_obstacle_set_map(self, obstacle, mapping)
}
func (self classNavigationServer3D) ObstacleGetMap(obstacle RID) RID {
	return self.ptr.API.NavigationServer3D_obstacle_get_map(self, obstacle)
}
func (self classNavigationServer3D) ObstacleSetPaused(obstacle RID, paused bool) {
	self.ptr.API.NavigationServer3D_obstacle_set_paused(self, obstacle, paused)
}
func (self classNavigationServer3D) ObstacleGetPaused(obstacle RID) bool {
	return self.ptr.API.NavigationServer3D_obstacle_get_paused(self, obstacle)
}
func (self classNavigationServer3D) ObstacleSetRadius(obstacle RID, radius Float) {
	self.ptr.API.NavigationServer3D_obstacle_set_radius(self, obstacle, radius)
}
func (self classNavigationServer3D) ObstacleGetRadius(obstacle RID) Float {
	return self.ptr.API.NavigationServer3D_obstacle_get_radius(self, obstacle)
}
func (self classNavigationServer3D) ObstacleSetHeight(obstacle RID, height Float) {
	self.ptr.API.NavigationServer3D_obstacle_set_height(self, obstacle, height)
}
func (self classNavigationServer3D) ObstacleGetHeight(obstacle RID) Float {
	return self.ptr.API.NavigationServer3D_obstacle_get_height(self, obstacle)
}
func (self classNavigationServer3D) ObstacleSetVelocity(obstacle RID, velocity Vector3) {
	self.ptr.API.NavigationServer3D_obstacle_set_velocity(self, obstacle, velocity)
}
func (self classNavigationServer3D) ObstacleGetVelocity(obstacle RID) Vector3 {
	return self.ptr.API.NavigationServer3D_obstacle_get_velocity(self, obstacle)
}
func (self classNavigationServer3D) ObstacleSetPosition(obstacle RID, position Vector3) {
	self.ptr.API.NavigationServer3D_obstacle_set_position(self, obstacle, position)
}
func (self classNavigationServer3D) ObstacleGetPosition(obstacle RID) Vector3 {
	return self.ptr.API.NavigationServer3D_obstacle_get_position(self, obstacle)
}
func (self classNavigationServer3D) ObstacleSetVertices(obstacle RID, vertices PackedVector3Array) {
	self.ptr.API.NavigationServer3D_obstacle_set_vertices(self, obstacle, vertices)
}
func (self classNavigationServer3D) ObstacleGetVertices(obstacle RID) PackedVector3Array {
	return self.ptr.API.NavigationServer3D_obstacle_get_vertices(self, obstacle)
}
func (self classNavigationServer3D) ObstacleSetAvoidanceLayers(obstacle RID, layers Int) {
	self.ptr.API.NavigationServer3D_obstacle_set_avoidance_layers(self, obstacle, layers)
}
func (self classNavigationServer3D) ObstacleGetAvoidanceLayers(obstacle RID) Int {
	return self.ptr.API.NavigationServer3D_obstacle_get_avoidance_layers(self, obstacle)
}
func (self classNavigationServer3D) ParseSourceGeometryData(navigation_mesh NavigationMesh, source_geometry_data NavigationMeshSourceGeometryData3D, root_node Node, callback Callable) {
	self.ptr.API.NavigationServer3D_parse_source_geometry_data(self, navigation_mesh, source_geometry_data, root_node, callback)
}
func (self classNavigationServer3D) BakeFromSourceGeometryData(navigation_mesh NavigationMesh, source_geometry_data NavigationMeshSourceGeometryData3D, callback Callable) {
	self.ptr.API.NavigationServer3D_bake_from_source_geometry_data(self, navigation_mesh, source_geometry_data, callback)
}
func (self classNavigationServer3D) BakeFromSourceGeometryDataAsync(navigation_mesh NavigationMesh, source_geometry_data NavigationMeshSourceGeometryData3D, callback Callable) {
	self.ptr.API.NavigationServer3D_bake_from_source_geometry_data_async(self, navigation_mesh, source_geometry_data, callback)
}
func (self classNavigationServer3D) FreeRid(rid RID) {
	self.ptr.API.NavigationServer3D_free_rid(self, rid)
}
func (self classNavigationServer3D) SetActive(active bool) {
	self.ptr.API.NavigationServer3D_set_active(self, active)
}
func (self classNavigationServer3D) SetDebugEnabled(enabled bool) {
	self.ptr.API.NavigationServer3D_set_debug_enabled(self, enabled)
}
func (self classNavigationServer3D) GetDebugEnabled() bool {
	return self.ptr.API.NavigationServer3D_get_debug_enabled(self)
}
func (self classNavigationServer3D) GetProcessInfo(process_info NavigationServer3DProcessInfo) Int {
	return self.ptr.API.NavigationServer3D_get_process_info(self, process_info)
}

type classNinePatchRect struct{ Class[classNinePatchRect] }

func (self classNinePatchRect) Super() Control { var super Control; super.ptr = self.ptr; return super }

func (self classNinePatchRect) Control() Control { return self.Super() }
func (self classNinePatchRect) SetTexture(texture Texture2D) {
	self.ptr.API.NinePatchRect_set_texture(self, texture)
}
func (self classNinePatchRect) GetTexture() Texture2D {
	return self.ptr.API.NinePatchRect_get_texture(self)
}
func (self classNinePatchRect) SetPatchMargin(margin Side, value Int) {
	self.ptr.API.NinePatchRect_set_patch_margin(self, margin, value)
}
func (self classNinePatchRect) GetPatchMargin(margin Side) Int {
	return self.ptr.API.NinePatchRect_get_patch_margin(self, margin)
}
func (self classNinePatchRect) SetRegionRect(rect Rect2) {
	self.ptr.API.NinePatchRect_set_region_rect(self, rect)
}
func (self classNinePatchRect) GetRegionRect() Rect2 {
	return self.ptr.API.NinePatchRect_get_region_rect(self)
}
func (self classNinePatchRect) SetDrawCenter(draw_center bool) {
	self.ptr.API.NinePatchRect_set_draw_center(self, draw_center)
}
func (self classNinePatchRect) IsDrawCenterEnabled() bool {
	return self.ptr.API.NinePatchRect_is_draw_center_enabled(self)
}
func (self classNinePatchRect) SetHAxisStretchMode(mode NinePatchRectAxisStretchMode) {
	self.ptr.API.NinePatchRect_set_h_axis_stretch_mode(self, mode)
}
func (self classNinePatchRect) GetHAxisStretchMode() NinePatchRectAxisStretchMode {
	return self.ptr.API.NinePatchRect_get_h_axis_stretch_mode(self)
}
func (self classNinePatchRect) SetVAxisStretchMode(mode NinePatchRectAxisStretchMode) {
	self.ptr.API.NinePatchRect_set_v_axis_stretch_mode(self, mode)
}
func (self classNinePatchRect) GetVAxisStretchMode() NinePatchRectAxisStretchMode {
	return self.ptr.API.NinePatchRect_get_v_axis_stretch_mode(self)
}

type classNode struct{ Class[classNode] }

func (self classNode) Super() Object { var super Object; super.ptr = self.ptr; return super }

func (self classNode) Object() Object { return self.Super() }
func (self classNode) PrintOrphanNodes() {
	self.ptr.API.Node_print_orphan_nodes(self)
}
func (self classNode) AddSibling(sibling Node, force_readable_name bool) {
	self.ptr.API.Node_add_sibling(self, sibling, force_readable_name)
}
func (self classNode) SetName(name String) {
	self.ptr.API.Node_set_name(self, name)
}
func (self classNode) GetName() StringName {
	return self.ptr.API.Node_get_name(self)
}
func (self classNode) AddChild(node Node, force_readable_name bool, internal NodeInternalMode) {
	self.ptr.API.Node_add_child(self, node, force_readable_name, internal)
}
func (self classNode) RemoveChild(node Node) {
	self.ptr.API.Node_remove_child(self, node)
}
func (self classNode) Reparent(new_parent Node, keep_global_transform bool) {
	self.ptr.API.Node_reparent(self, new_parent, keep_global_transform)
}
func (self classNode) GetChildCount(include_internal bool) Int {
	return self.ptr.API.Node_get_child_count(self, include_internal)
}
func (self classNode) GetChildren(include_internal bool) ArrayOf[Node] {
	return self.ptr.API.Node_get_children(self, include_internal)
}
func (self classNode) GetChild(idx Int, include_internal bool) Node {
	return self.ptr.API.Node_get_child(self, idx, include_internal)
}
func (self classNode) HasNode(path NodePath) bool {
	return self.ptr.API.Node_has_node(self, path)
}
func (self classNode) GetNode(path NodePath) Node {
	return self.ptr.API.Node_get_node(self, path)
}
func (self classNode) GetNodeOrNull(path NodePath) Node {
	return self.ptr.API.Node_get_node_or_null(self, path)
}
func (self classNode) GetParent() Node {
	return self.ptr.API.Node_get_parent(self)
}
func (self classNode) FindChild(pattern String, recursive bool, owned bool) Node {
	return self.ptr.API.Node_find_child(self, pattern, recursive, owned)
}
func (self classNode) FindChildren(pattern String, atype String, recursive bool, owned bool) ArrayOf[Node] {
	return self.ptr.API.Node_find_children(self, pattern, atype, recursive, owned)
}
func (self classNode) FindParent(pattern String) Node {
	return self.ptr.API.Node_find_parent(self, pattern)
}
func (self classNode) HasNodeAndResource(path NodePath) bool {
	return self.ptr.API.Node_has_node_and_resource(self, path)
}
func (self classNode) GetNodeAndResource(path NodePath) Array {
	return self.ptr.API.Node_get_node_and_resource(self, path)
}
func (self classNode) IsInsideTree() bool {
	return self.ptr.API.Node_is_inside_tree(self)
}
func (self classNode) IsAncestorOf(node Node) bool {
	return self.ptr.API.Node_is_ancestor_of(self, node)
}
func (self classNode) IsGreaterThan(node Node) bool {
	return self.ptr.API.Node_is_greater_than(self, node)
}
func (self classNode) GetPath() NodePath {
	return self.ptr.API.Node_get_path(self)
}
func (self classNode) GetPathTo(node Node, use_unique_path bool) NodePath {
	return self.ptr.API.Node_get_path_to(self, node, use_unique_path)
}
func (self classNode) AddToGroup(group StringName, persistent bool) {
	self.ptr.API.Node_add_to_group(self, group, persistent)
}
func (self classNode) RemoveFromGroup(group StringName) {
	self.ptr.API.Node_remove_from_group(self, group)
}
func (self classNode) IsInGroup(group StringName) bool {
	return self.ptr.API.Node_is_in_group(self, group)
}
func (self classNode) MoveChild(child_node Node, to_index Int) {
	self.ptr.API.Node_move_child(self, child_node, to_index)
}
func (self classNode) GetGroups() ArrayOf[StringName] {
	return self.ptr.API.Node_get_groups(self)
}
func (self classNode) SetOwner(owner Node) {
	self.ptr.API.Node_set_owner(self, owner)
}
func (self classNode) GetOwner() Node {
	return self.ptr.API.Node_get_owner(self)
}
func (self classNode) GetIndex(include_internal bool) Int {
	return self.ptr.API.Node_get_index(self, include_internal)
}
func (self classNode) PrintTree() {
	self.ptr.API.Node_print_tree(self)
}
func (self classNode) PrintTreePretty() {
	self.ptr.API.Node_print_tree_pretty(self)
}
func (self classNode) GetTreeString() String {
	return self.ptr.API.Node_get_tree_string(self)
}
func (self classNode) GetTreeStringPretty() String {
	return self.ptr.API.Node_get_tree_string_pretty(self)
}
func (self classNode) SetSceneFilePath(scene_file_path String) {
	self.ptr.API.Node_set_scene_file_path(self, scene_file_path)
}
func (self classNode) GetSceneFilePath() String {
	return self.ptr.API.Node_get_scene_file_path(self)
}
func (self classNode) PropagateNotification(what Int) {
	self.ptr.API.Node_propagate_notification(self, what)
}
func (self classNode) PropagateCall(method StringName, args Array, parent_first bool) {
	self.ptr.API.Node_propagate_call(self, method, args, parent_first)
}
func (self classNode) SetPhysicsProcess(enable bool) {
	self.ptr.API.Node_set_physics_process(self, enable)
}
func (self classNode) GetPhysicsProcessDeltaTime() Float {
	return self.ptr.API.Node_get_physics_process_delta_time(self)
}
func (self classNode) IsPhysicsProcessing() bool {
	return self.ptr.API.Node_is_physics_processing(self)
}
func (self classNode) GetProcessDeltaTime() Float {
	return self.ptr.API.Node_get_process_delta_time(self)
}
func (self classNode) SetProcess(enable bool) {
	self.ptr.API.Node_set_process(self, enable)
}
func (self classNode) SetProcessPriority(priority Int) {
	self.ptr.API.Node_set_process_priority(self, priority)
}
func (self classNode) GetProcessPriority() Int {
	return self.ptr.API.Node_get_process_priority(self)
}
func (self classNode) SetPhysicsProcessPriority(priority Int) {
	self.ptr.API.Node_set_physics_process_priority(self, priority)
}
func (self classNode) GetPhysicsProcessPriority() Int {
	return self.ptr.API.Node_get_physics_process_priority(self)
}
func (self classNode) IsProcessing() bool {
	return self.ptr.API.Node_is_processing(self)
}
func (self classNode) SetProcessInput(enable bool) {
	self.ptr.API.Node_set_process_input(self, enable)
}
func (self classNode) IsProcessingInput() bool {
	return self.ptr.API.Node_is_processing_input(self)
}
func (self classNode) SetProcessShortcutInput(enable bool) {
	self.ptr.API.Node_set_process_shortcut_input(self, enable)
}
func (self classNode) IsProcessingShortcutInput() bool {
	return self.ptr.API.Node_is_processing_shortcut_input(self)
}
func (self classNode) SetProcessUnhandledInput(enable bool) {
	self.ptr.API.Node_set_process_unhandled_input(self, enable)
}
func (self classNode) IsProcessingUnhandledInput() bool {
	return self.ptr.API.Node_is_processing_unhandled_input(self)
}
func (self classNode) SetProcessUnhandledKeyInput(enable bool) {
	self.ptr.API.Node_set_process_unhandled_key_input(self, enable)
}
func (self classNode) IsProcessingUnhandledKeyInput() bool {
	return self.ptr.API.Node_is_processing_unhandled_key_input(self)
}
func (self classNode) SetProcessMode(mode NodeProcessMode) {
	self.ptr.API.Node_set_process_mode(self, mode)
}
func (self classNode) GetProcessMode() NodeProcessMode {
	return self.ptr.API.Node_get_process_mode(self)
}
func (self classNode) CanProcess() bool {
	return self.ptr.API.Node_can_process(self)
}
func (self classNode) SetProcessThreadGroup(mode NodeProcessThreadGroup) {
	self.ptr.API.Node_set_process_thread_group(self, mode)
}
func (self classNode) GetProcessThreadGroup() NodeProcessThreadGroup {
	return self.ptr.API.Node_get_process_thread_group(self)
}
func (self classNode) SetProcessThreadMessages(flags NodeProcessThreadMessages) {
	self.ptr.API.Node_set_process_thread_messages(self, flags)
}
func (self classNode) GetProcessThreadMessages() NodeProcessThreadMessages {
	return self.ptr.API.Node_get_process_thread_messages(self)
}
func (self classNode) SetProcessThreadGroupOrder(order Int) {
	self.ptr.API.Node_set_process_thread_group_order(self, order)
}
func (self classNode) GetProcessThreadGroupOrder() Int {
	return self.ptr.API.Node_get_process_thread_group_order(self)
}
func (self classNode) SetDisplayFolded(fold bool) {
	self.ptr.API.Node_set_display_folded(self, fold)
}
func (self classNode) IsDisplayedFolded() bool {
	return self.ptr.API.Node_is_displayed_folded(self)
}
func (self classNode) SetProcessInternal(enable bool) {
	self.ptr.API.Node_set_process_internal(self, enable)
}
func (self classNode) IsProcessingInternal() bool {
	return self.ptr.API.Node_is_processing_internal(self)
}
func (self classNode) SetPhysicsProcessInternal(enable bool) {
	self.ptr.API.Node_set_physics_process_internal(self, enable)
}
func (self classNode) IsPhysicsProcessingInternal() bool {
	return self.ptr.API.Node_is_physics_processing_internal(self)
}
func (self classNode) GetWindow() Window {
	return self.ptr.API.Node_get_window(self)
}
func (self classNode) GetLastExclusiveWindow() Window {
	return self.ptr.API.Node_get_last_exclusive_window(self)
}
func (self classNode) GetTree() SceneTree {
	return self.ptr.API.Node_get_tree(self)
}
func (self classNode) CreateTween() Tween {
	return self.ptr.API.Node_create_tween(self)
}
func (self classNode) Duplicate(flags Int) Node {
	return self.ptr.API.Node_duplicate(self, flags)
}
func (self classNode) ReplaceBy(node Node, keep_groups bool) {
	self.ptr.API.Node_replace_by(self, node, keep_groups)
}
func (self classNode) SetSceneInstanceLoadPlaceholder(load_placeholder bool) {
	self.ptr.API.Node_set_scene_instance_load_placeholder(self, load_placeholder)
}
func (self classNode) GetSceneInstanceLoadPlaceholder() bool {
	return self.ptr.API.Node_get_scene_instance_load_placeholder(self)
}
func (self classNode) SetEditableInstance(node Node, is_editable bool) {
	self.ptr.API.Node_set_editable_instance(self, node, is_editable)
}
func (self classNode) IsEditableInstance(node Node) bool {
	return self.ptr.API.Node_is_editable_instance(self, node)
}
func (self classNode) GetViewport() Viewport {
	return self.ptr.API.Node_get_viewport(self)
}
func (self classNode) QueueFree() {
	self.ptr.API.Node_queue_free(self)
}
func (self classNode) RequestReady() {
	self.ptr.API.Node_request_ready(self)
}
func (self classNode) IsNodeReady() bool {
	return self.ptr.API.Node_is_node_ready(self)
}
func (self classNode) SetMultiplayerAuthority(id Int, recursive bool) {
	self.ptr.API.Node_set_multiplayer_authority(self, id, recursive)
}
func (self classNode) GetMultiplayerAuthority() Int {
	return self.ptr.API.Node_get_multiplayer_authority(self)
}
func (self classNode) IsMultiplayerAuthority() bool {
	return self.ptr.API.Node_is_multiplayer_authority(self)
}
func (self classNode) GetMultiplayer() MultiplayerAPI {
	return self.ptr.API.Node_get_multiplayer(self)
}
func (self classNode) RpcConfig(method StringName, config Variant) {
	self.ptr.API.Node_rpc_config(self, method, config)
}
func (self classNode) SetEditorDescription(editor_description String) {
	self.ptr.API.Node_set_editor_description(self, editor_description)
}
func (self classNode) GetEditorDescription() String {
	return self.ptr.API.Node_get_editor_description(self)
}
func (self classNode) SetUniqueNameInOwner(enable bool) {
	self.ptr.API.Node_set_unique_name_in_owner(self, enable)
}
func (self classNode) IsUniqueNameInOwner() bool {
	return self.ptr.API.Node_is_unique_name_in_owner(self)
}
func (self classNode) Rpc(method StringName) int64 {
	return self.ptr.API.Node_rpc(self, method)
}
func (self classNode) RpcId(peer_id Int, method StringName) int64 {
	return self.ptr.API.Node_rpc_id(self, peer_id, method)
}
func (self classNode) UpdateConfigurationWarnings() {
	self.ptr.API.Node_update_configuration_warnings(self)
}
func (self classNode) CallDeferredThreadGroup(method StringName) Variant {
	return self.ptr.API.Node_call_deferred_thread_group(self, method)
}
func (self classNode) SetDeferredThreadGroup(property StringName, value Variant) {
	self.ptr.API.Node_set_deferred_thread_group(self, property, value)
}
func (self classNode) NotifyDeferredThreadGroup(what Int) {
	self.ptr.API.Node_notify_deferred_thread_group(self, what)
}
func (self classNode) CallThreadSafe(method StringName) Variant {
	return self.ptr.API.Node_call_thread_safe(self, method)
}
func (self classNode) SetThreadSafe(property StringName, value Variant) {
	self.ptr.API.Node_set_thread_safe(self, property, value)
}
func (self classNode) NotifyThreadSafe(what Int) {
	self.ptr.API.Node_notify_thread_safe(self, what)
}

type classNode2D struct{ Class[classNode2D] }

func (self classNode2D) Super() CanvasItem { var super CanvasItem; super.ptr = self.ptr; return super }

func (self classNode2D) CanvasItem() CanvasItem { return self.Super() }
func (self classNode2D) SetPosition(position Vector2) {
	self.ptr.API.Node2D_set_position(self, position)
}
func (self classNode2D) SetRotation(radians Float) {
	self.ptr.API.Node2D_set_rotation(self, radians)
}
func (self classNode2D) SetRotationDegrees(degrees Float) {
	self.ptr.API.Node2D_set_rotation_degrees(self, degrees)
}
func (self classNode2D) SetSkew(radians Float) {
	self.ptr.API.Node2D_set_skew(self, radians)
}
func (self classNode2D) SetScale(scale Vector2) {
	self.ptr.API.Node2D_set_scale(self, scale)
}
func (self classNode2D) GetPosition() Vector2 {
	return self.ptr.API.Node2D_get_position(self)
}
func (self classNode2D) GetRotation() Float {
	return self.ptr.API.Node2D_get_rotation(self)
}
func (self classNode2D) GetRotationDegrees() Float {
	return self.ptr.API.Node2D_get_rotation_degrees(self)
}
func (self classNode2D) GetSkew() Float {
	return self.ptr.API.Node2D_get_skew(self)
}
func (self classNode2D) GetScale() Vector2 {
	return self.ptr.API.Node2D_get_scale(self)
}
func (self classNode2D) Rotate(radians Float) {
	self.ptr.API.Node2D_rotate(self, radians)
}
func (self classNode2D) MoveLocalX(delta Float, scaled bool) {
	self.ptr.API.Node2D_move_local_x(self, delta, scaled)
}
func (self classNode2D) MoveLocalY(delta Float, scaled bool) {
	self.ptr.API.Node2D_move_local_y(self, delta, scaled)
}
func (self classNode2D) Translate(offset Vector2) {
	self.ptr.API.Node2D_translate(self, offset)
}
func (self classNode2D) GlobalTranslate(offset Vector2) {
	self.ptr.API.Node2D_global_translate(self, offset)
}
func (self classNode2D) ApplyScale(ratio Vector2) {
	self.ptr.API.Node2D_apply_scale(self, ratio)
}
func (self classNode2D) SetGlobalPosition(position Vector2) {
	self.ptr.API.Node2D_set_global_position(self, position)
}
func (self classNode2D) GetGlobalPosition() Vector2 {
	return self.ptr.API.Node2D_get_global_position(self)
}
func (self classNode2D) SetGlobalRotation(radians Float) {
	self.ptr.API.Node2D_set_global_rotation(self, radians)
}
func (self classNode2D) SetGlobalRotationDegrees(degrees Float) {
	self.ptr.API.Node2D_set_global_rotation_degrees(self, degrees)
}
func (self classNode2D) GetGlobalRotation() Float {
	return self.ptr.API.Node2D_get_global_rotation(self)
}
func (self classNode2D) GetGlobalRotationDegrees() Float {
	return self.ptr.API.Node2D_get_global_rotation_degrees(self)
}
func (self classNode2D) SetGlobalSkew(radians Float) {
	self.ptr.API.Node2D_set_global_skew(self, radians)
}
func (self classNode2D) GetGlobalSkew() Float {
	return self.ptr.API.Node2D_get_global_skew(self)
}
func (self classNode2D) SetGlobalScale(scale Vector2) {
	self.ptr.API.Node2D_set_global_scale(self, scale)
}
func (self classNode2D) GetGlobalScale() Vector2 {
	return self.ptr.API.Node2D_get_global_scale(self)
}
func (self classNode2D) SetTransform(xform Transform2D) {
	self.ptr.API.Node2D_set_transform(self, xform)
}
func (self classNode2D) SetGlobalTransform(xform Transform2D) {
	self.ptr.API.Node2D_set_global_transform(self, xform)
}
func (self classNode2D) LookAt(point Vector2) {
	self.ptr.API.Node2D_look_at(self, point)
}
func (self classNode2D) GetAngleTo(point Vector2) Float {
	return self.ptr.API.Node2D_get_angle_to(self, point)
}
func (self classNode2D) ToLocal(global_point Vector2) Vector2 {
	return self.ptr.API.Node2D_to_local(self, global_point)
}
func (self classNode2D) ToGlobal(local_point Vector2) Vector2 {
	return self.ptr.API.Node2D_to_global(self, local_point)
}
func (self classNode2D) GetRelativeTransformToParent(parent Node) Transform2D {
	return self.ptr.API.Node2D_get_relative_transform_to_parent(self, parent)
}

type classNode3D struct{ Class[classNode3D] }

func (self classNode3D) Super() Node { var super Node; super.ptr = self.ptr; return super }

func (self classNode3D) Node() Node { return self.Super() }
func (self classNode3D) SetTransform(local Transform3D) {
	self.ptr.API.Node3D_set_transform(self, local)
}
func (self classNode3D) GetTransform() Transform3D {
	return self.ptr.API.Node3D_get_transform(self)
}
func (self classNode3D) SetPosition(position Vector3) {
	self.ptr.API.Node3D_set_position(self, position)
}
func (self classNode3D) GetPosition() Vector3 {
	return self.ptr.API.Node3D_get_position(self)
}
func (self classNode3D) SetRotation(euler_radians Vector3) {
	self.ptr.API.Node3D_set_rotation(self, euler_radians)
}
func (self classNode3D) GetRotation() Vector3 {
	return self.ptr.API.Node3D_get_rotation(self)
}
func (self classNode3D) SetRotationDegrees(euler_degrees Vector3) {
	self.ptr.API.Node3D_set_rotation_degrees(self, euler_degrees)
}
func (self classNode3D) GetRotationDegrees() Vector3 {
	return self.ptr.API.Node3D_get_rotation_degrees(self)
}
func (self classNode3D) SetRotationOrder(order EulerOrder) {
	self.ptr.API.Node3D_set_rotation_order(self, order)
}
func (self classNode3D) GetRotationOrder() EulerOrder {
	return self.ptr.API.Node3D_get_rotation_order(self)
}
func (self classNode3D) SetRotationEditMode(edit_mode Node3DRotationEditMode) {
	self.ptr.API.Node3D_set_rotation_edit_mode(self, edit_mode)
}
func (self classNode3D) GetRotationEditMode() Node3DRotationEditMode {
	return self.ptr.API.Node3D_get_rotation_edit_mode(self)
}
func (self classNode3D) SetScale(scale Vector3) {
	self.ptr.API.Node3D_set_scale(self, scale)
}
func (self classNode3D) GetScale() Vector3 {
	return self.ptr.API.Node3D_get_scale(self)
}
func (self classNode3D) SetQuaternion(quaternion Quaternion) {
	self.ptr.API.Node3D_set_quaternion(self, quaternion)
}
func (self classNode3D) GetQuaternion() Quaternion {
	return self.ptr.API.Node3D_get_quaternion(self)
}
func (self classNode3D) SetBasis(basis Basis) {
	self.ptr.API.Node3D_set_basis(self, basis)
}
func (self classNode3D) GetBasis() Basis {
	return self.ptr.API.Node3D_get_basis(self)
}
func (self classNode3D) SetGlobalTransform(global Transform3D) {
	self.ptr.API.Node3D_set_global_transform(self, global)
}
func (self classNode3D) GetGlobalTransform() Transform3D {
	return self.ptr.API.Node3D_get_global_transform(self)
}
func (self classNode3D) SetGlobalPosition(position Vector3) {
	self.ptr.API.Node3D_set_global_position(self, position)
}
func (self classNode3D) GetGlobalPosition() Vector3 {
	return self.ptr.API.Node3D_get_global_position(self)
}
func (self classNode3D) SetGlobalBasis(basis Basis) {
	self.ptr.API.Node3D_set_global_basis(self, basis)
}
func (self classNode3D) GetGlobalBasis() Basis {
	return self.ptr.API.Node3D_get_global_basis(self)
}
func (self classNode3D) SetGlobalRotation(euler_radians Vector3) {
	self.ptr.API.Node3D_set_global_rotation(self, euler_radians)
}
func (self classNode3D) GetGlobalRotation() Vector3 {
	return self.ptr.API.Node3D_get_global_rotation(self)
}
func (self classNode3D) SetGlobalRotationDegrees(euler_degrees Vector3) {
	self.ptr.API.Node3D_set_global_rotation_degrees(self, euler_degrees)
}
func (self classNode3D) GetGlobalRotationDegrees() Vector3 {
	return self.ptr.API.Node3D_get_global_rotation_degrees(self)
}
func (self classNode3D) GetParentNode3d() Node3D {
	return self.ptr.API.Node3D_get_parent_node_3d(self)
}
func (self classNode3D) SetIgnoreTransformNotification(enabled bool) {
	self.ptr.API.Node3D_set_ignore_transform_notification(self, enabled)
}
func (self classNode3D) SetAsTopLevel(enable bool) {
	self.ptr.API.Node3D_set_as_top_level(self, enable)
}
func (self classNode3D) IsSetAsTopLevel() bool {
	return self.ptr.API.Node3D_is_set_as_top_level(self)
}
func (self classNode3D) SetDisableScale(disable bool) {
	self.ptr.API.Node3D_set_disable_scale(self, disable)
}
func (self classNode3D) IsScaleDisabled() bool {
	return self.ptr.API.Node3D_is_scale_disabled(self)
}
func (self classNode3D) GetWorld3d() World3D {
	return self.ptr.API.Node3D_get_world_3d(self)
}
func (self classNode3D) ForceUpdateTransform() {
	self.ptr.API.Node3D_force_update_transform(self)
}
func (self classNode3D) SetVisibilityParent(path NodePath) {
	self.ptr.API.Node3D_set_visibility_parent(self, path)
}
func (self classNode3D) GetVisibilityParent() NodePath {
	return self.ptr.API.Node3D_get_visibility_parent(self)
}
func (self classNode3D) UpdateGizmos() {
	self.ptr.API.Node3D_update_gizmos(self)
}
func (self classNode3D) AddGizmo(gizmo Node3DGizmo) {
	self.ptr.API.Node3D_add_gizmo(self, gizmo)
}
func (self classNode3D) GetGizmos() ArrayOf[Node3DGizmo] {
	return self.ptr.API.Node3D_get_gizmos(self)
}
func (self classNode3D) ClearGizmos() {
	self.ptr.API.Node3D_clear_gizmos(self)
}
func (self classNode3D) SetSubgizmoSelection(gizmo Node3DGizmo, id Int, transform Transform3D) {
	self.ptr.API.Node3D_set_subgizmo_selection(self, gizmo, id, transform)
}
func (self classNode3D) ClearSubgizmoSelection() {
	self.ptr.API.Node3D_clear_subgizmo_selection(self)
}
func (self classNode3D) SetVisible(visible bool) {
	self.ptr.API.Node3D_set_visible(self, visible)
}
func (self classNode3D) IsVisible() bool {
	return self.ptr.API.Node3D_is_visible(self)
}
func (self classNode3D) IsVisibleInTree() bool {
	return self.ptr.API.Node3D_is_visible_in_tree(self)
}
func (self classNode3D) Show() {
	self.ptr.API.Node3D_show(self)
}
func (self classNode3D) Hide() {
	self.ptr.API.Node3D_hide(self)
}
func (self classNode3D) SetNotifyLocalTransform(enable bool) {
	self.ptr.API.Node3D_set_notify_local_transform(self, enable)
}
func (self classNode3D) IsLocalTransformNotificationEnabled() bool {
	return self.ptr.API.Node3D_is_local_transform_notification_enabled(self)
}
func (self classNode3D) SetNotifyTransform(enable bool) {
	self.ptr.API.Node3D_set_notify_transform(self, enable)
}
func (self classNode3D) IsTransformNotificationEnabled() bool {
	return self.ptr.API.Node3D_is_transform_notification_enabled(self)
}
func (self classNode3D) Rotate(axis Vector3, angle Float) {
	self.ptr.API.Node3D_rotate(self, axis, angle)
}
func (self classNode3D) GlobalRotate(axis Vector3, angle Float) {
	self.ptr.API.Node3D_global_rotate(self, axis, angle)
}
func (self classNode3D) GlobalScale(scale Vector3) {
	self.ptr.API.Node3D_global_scale(self, scale)
}
func (self classNode3D) GlobalTranslate(offset Vector3) {
	self.ptr.API.Node3D_global_translate(self, offset)
}
func (self classNode3D) RotateObjectLocal(axis Vector3, angle Float) {
	self.ptr.API.Node3D_rotate_object_local(self, axis, angle)
}
func (self classNode3D) ScaleObjectLocal(scale Vector3) {
	self.ptr.API.Node3D_scale_object_local(self, scale)
}
func (self classNode3D) TranslateObjectLocal(offset Vector3) {
	self.ptr.API.Node3D_translate_object_local(self, offset)
}
func (self classNode3D) RotateX(angle Float) {
	self.ptr.API.Node3D_rotate_x(self, angle)
}
func (self classNode3D) RotateY(angle Float) {
	self.ptr.API.Node3D_rotate_y(self, angle)
}
func (self classNode3D) RotateZ(angle Float) {
	self.ptr.API.Node3D_rotate_z(self, angle)
}
func (self classNode3D) Translate(offset Vector3) {
	self.ptr.API.Node3D_translate(self, offset)
}
func (self classNode3D) Orthonormalize() {
	self.ptr.API.Node3D_orthonormalize(self)
}
func (self classNode3D) SetIdentity() {
	self.ptr.API.Node3D_set_identity(self)
}
func (self classNode3D) LookAt(target Vector3, up Vector3, use_model_front bool) {
	self.ptr.API.Node3D_look_at(self, target, up, use_model_front)
}
func (self classNode3D) LookAtFromPosition(position Vector3, target Vector3, up Vector3, use_model_front bool) {
	self.ptr.API.Node3D_look_at_from_position(self, position, target, up, use_model_front)
}
func (self classNode3D) ToLocal(global_point Vector3) Vector3 {
	return self.ptr.API.Node3D_to_local(self, global_point)
}
func (self classNode3D) ToGlobal(local_point Vector3) Vector3 {
	return self.ptr.API.Node3D_to_global(self, local_point)
}

type classNode3DGizmo struct{ Class[classNode3DGizmo] }

func (self classNode3DGizmo) Super() RefCounted {
	var super RefCounted
	super.ptr = self.ptr
	return super
}

func (self classNode3DGizmo) RefCounted() RefCounted { return self.Super() }

type classNoise struct{ Class[classNoise] }

func (self classNoise) Super() Resource { var super Resource; super.ptr = self.ptr; return super }

func (self classNoise) Resource() Resource { return self.Super() }
func (self classNoise) GetNoise1d(x Float) Float {
	return self.ptr.API.Noise_get_noise_1d(self, x)
}
func (self classNoise) GetNoise2d(x Float, y Float) Float {
	return self.ptr.API.Noise_get_noise_2d(self, x, y)
}
func (self classNoise) GetNoise2dv(v Vector2) Float {
	return self.ptr.API.Noise_get_noise_2dv(self, v)
}
func (self classNoise) GetNoise3d(x Float, y Float, z Float) Float {
	return self.ptr.API.Noise_get_noise_3d(self, x, y, z)
}
func (self classNoise) GetNoise3dv(v Vector3) Float {
	return self.ptr.API.Noise_get_noise_3dv(self, v)
}
func (self classNoise) GetImage(width Int, height Int, invert bool, in_3d_space bool, normalize bool) Image {
	return self.ptr.API.Noise_get_image(self, width, height, invert, in_3d_space, normalize)
}
func (self classNoise) GetSeamlessImage(width Int, height Int, invert bool, in_3d_space bool, skirt Float, normalize bool) Image {
	return self.ptr.API.Noise_get_seamless_image(self, width, height, invert, in_3d_space, skirt, normalize)
}
func (self classNoise) GetImage3d(width Int, height Int, depth Int, invert bool, normalize bool) ArrayOf[Image] {
	return self.ptr.API.Noise_get_image_3d(self, width, height, depth, invert, normalize)
}
func (self classNoise) GetSeamlessImage3d(width Int, height Int, depth Int, invert bool, skirt Float, normalize bool) ArrayOf[Image] {
	return self.ptr.API.Noise_get_seamless_image_3d(self, width, height, depth, invert, skirt, normalize)
}

type classNoiseTexture2D struct{ Class[classNoiseTexture2D] }

func (self classNoiseTexture2D) Super() Texture2D {
	var super Texture2D
	super.ptr = self.ptr
	return super
}

func (self classNoiseTexture2D) Texture2D() Texture2D { return self.Super() }
func (self classNoiseTexture2D) SetWidth(width Int) {
	self.ptr.API.NoiseTexture2D_set_width(self, width)
}
func (self classNoiseTexture2D) SetHeight(height Int) {
	self.ptr.API.NoiseTexture2D_set_height(self, height)
}
func (self classNoiseTexture2D) SetInvert(invert bool) {
	self.ptr.API.NoiseTexture2D_set_invert(self, invert)
}
func (self classNoiseTexture2D) GetInvert() bool {
	return self.ptr.API.NoiseTexture2D_get_invert(self)
}
func (self classNoiseTexture2D) SetIn3dSpace(enable bool) {
	self.ptr.API.NoiseTexture2D_set_in_3d_space(self, enable)
}
func (self classNoiseTexture2D) IsIn3dSpace() bool {
	return self.ptr.API.NoiseTexture2D_is_in_3d_space(self)
}
func (self classNoiseTexture2D) SetGenerateMipmaps(invert bool) {
	self.ptr.API.NoiseTexture2D_set_generate_mipmaps(self, invert)
}
func (self classNoiseTexture2D) IsGeneratingMipmaps() bool {
	return self.ptr.API.NoiseTexture2D_is_generating_mipmaps(self)
}
func (self classNoiseTexture2D) SetSeamless(seamless bool) {
	self.ptr.API.NoiseTexture2D_set_seamless(self, seamless)
}
func (self classNoiseTexture2D) GetSeamless() bool {
	return self.ptr.API.NoiseTexture2D_get_seamless(self)
}
func (self classNoiseTexture2D) SetSeamlessBlendSkirt(seamless_blend_skirt Float) {
	self.ptr.API.NoiseTexture2D_set_seamless_blend_skirt(self, seamless_blend_skirt)
}
func (self classNoiseTexture2D) GetSeamlessBlendSkirt() Float {
	return self.ptr.API.NoiseTexture2D_get_seamless_blend_skirt(self)
}
func (self classNoiseTexture2D) SetAsNormalMap(as_normal_map bool) {
	self.ptr.API.NoiseTexture2D_set_as_normal_map(self, as_normal_map)
}
func (self classNoiseTexture2D) IsNormalMap() bool {
	return self.ptr.API.NoiseTexture2D_is_normal_map(self)
}
func (self classNoiseTexture2D) SetBumpStrength(bump_strength Float) {
	self.ptr.API.NoiseTexture2D_set_bump_strength(self, bump_strength)
}
func (self classNoiseTexture2D) GetBumpStrength() Float {
	return self.ptr.API.NoiseTexture2D_get_bump_strength(self)
}
func (self classNoiseTexture2D) SetNormalize(normalize bool) {
	self.ptr.API.NoiseTexture2D_set_normalize(self, normalize)
}
func (self classNoiseTexture2D) IsNormalized() bool {
	return self.ptr.API.NoiseTexture2D_is_normalized(self)
}
func (self classNoiseTexture2D) SetColorRamp(gradient Gradient) {
	self.ptr.API.NoiseTexture2D_set_color_ramp(self, gradient)
}
func (self classNoiseTexture2D) GetColorRamp() Gradient {
	return self.ptr.API.NoiseTexture2D_get_color_ramp(self)
}
func (self classNoiseTexture2D) SetNoise(noise Noise) {
	self.ptr.API.NoiseTexture2D_set_noise(self, noise)
}
func (self classNoiseTexture2D) GetNoise() Noise {
	return self.ptr.API.NoiseTexture2D_get_noise(self)
}

type classNoiseTexture3D struct{ Class[classNoiseTexture3D] }

func (self classNoiseTexture3D) Super() Texture3D {
	var super Texture3D
	super.ptr = self.ptr
	return super
}

func (self classNoiseTexture3D) Texture3D() Texture3D { return self.Super() }
func (self classNoiseTexture3D) SetWidth(width Int) {
	self.ptr.API.NoiseTexture3D_set_width(self, width)
}
func (self classNoiseTexture3D) SetHeight(height Int) {
	self.ptr.API.NoiseTexture3D_set_height(self, height)
}
func (self classNoiseTexture3D) SetDepth(depth Int) {
	self.ptr.API.NoiseTexture3D_set_depth(self, depth)
}
func (self classNoiseTexture3D) SetInvert(invert bool) {
	self.ptr.API.NoiseTexture3D_set_invert(self, invert)
}
func (self classNoiseTexture3D) GetInvert() bool {
	return self.ptr.API.NoiseTexture3D_get_invert(self)
}
func (self classNoiseTexture3D) SetSeamless(seamless bool) {
	self.ptr.API.NoiseTexture3D_set_seamless(self, seamless)
}
func (self classNoiseTexture3D) GetSeamless() bool {
	return self.ptr.API.NoiseTexture3D_get_seamless(self)
}
func (self classNoiseTexture3D) SetSeamlessBlendSkirt(seamless_blend_skirt Float) {
	self.ptr.API.NoiseTexture3D_set_seamless_blend_skirt(self, seamless_blend_skirt)
}
func (self classNoiseTexture3D) GetSeamlessBlendSkirt() Float {
	return self.ptr.API.NoiseTexture3D_get_seamless_blend_skirt(self)
}
func (self classNoiseTexture3D) SetNormalize(normalize bool) {
	self.ptr.API.NoiseTexture3D_set_normalize(self, normalize)
}
func (self classNoiseTexture3D) IsNormalized() bool {
	return self.ptr.API.NoiseTexture3D_is_normalized(self)
}
func (self classNoiseTexture3D) SetColorRamp(gradient Gradient) {
	self.ptr.API.NoiseTexture3D_set_color_ramp(self, gradient)
}
func (self classNoiseTexture3D) GetColorRamp() Gradient {
	return self.ptr.API.NoiseTexture3D_get_color_ramp(self)
}
func (self classNoiseTexture3D) SetNoise(noise Noise) {
	self.ptr.API.NoiseTexture3D_set_noise(self, noise)
}
func (self classNoiseTexture3D) GetNoise() Noise {
	return self.ptr.API.NoiseTexture3D_get_noise(self)
}

type classORMMaterial3D struct{ Class[classORMMaterial3D] }

func (self classORMMaterial3D) Super() BaseMaterial3D {
	var super BaseMaterial3D
	super.ptr = self.ptr
	return super
}

func (self classORMMaterial3D) BaseMaterial3D() BaseMaterial3D { return self.Super() }

type classOS struct{ Class[classOS] }

func (self classOS) Super() Object { var super Object; super.ptr = self.ptr; return super }

func (self classOS) Object() Object { return self.Super() }

func (self classOS) isSingleton() {}
func (self classOS) GetConnectedMidiInputs() PackedStringArray {
	return self.ptr.API.OS_get_connected_midi_inputs(self)
}
func (self classOS) OpenMidiInputs() {
	self.ptr.API.OS_open_midi_inputs(self)
}
func (self classOS) CloseMidiInputs() {
	self.ptr.API.OS_close_midi_inputs(self)
}
func (self classOS) Alert(text String, title String) {
	self.ptr.API.OS_alert(self, text, title)
}
func (self classOS) Crash(message String) {
	self.ptr.API.OS_crash(self, message)
}
func (self classOS) SetLowProcessorUsageMode(enable bool) {
	self.ptr.API.OS_set_low_processor_usage_mode(self, enable)
}
func (self classOS) IsInLowProcessorUsageMode() bool {
	return self.ptr.API.OS_is_in_low_processor_usage_mode(self)
}
func (self classOS) SetLowProcessorUsageModeSleepUsec(usec Int) {
	self.ptr.API.OS_set_low_processor_usage_mode_sleep_usec(self, usec)
}
func (self classOS) GetLowProcessorUsageModeSleepUsec() Int {
	return self.ptr.API.OS_get_low_processor_usage_mode_sleep_usec(self)
}
func (self classOS) SetDeltaSmoothing(delta_smoothing_enabled bool) {
	self.ptr.API.OS_set_delta_smoothing(self, delta_smoothing_enabled)
}
func (self classOS) IsDeltaSmoothingEnabled() bool {
	return self.ptr.API.OS_is_delta_smoothing_enabled(self)
}
func (self classOS) GetProcessorCount() Int {
	return self.ptr.API.OS_get_processor_count(self)
}
func (self classOS) GetProcessorName() String {
	return self.ptr.API.OS_get_processor_name(self)
}
func (self classOS) GetSystemFonts() PackedStringArray {
	return self.ptr.API.OS_get_system_fonts(self)
}
func (self classOS) GetSystemFontPath(font_name String, weight Int, stretch Int, italic bool) String {
	return self.ptr.API.OS_get_system_font_path(self, font_name, weight, stretch, italic)
}
func (self classOS) GetSystemFontPathForText(font_name String, text String, locale String, script String, weight Int, stretch Int, italic bool) PackedStringArray {
	return self.ptr.API.OS_get_system_font_path_for_text(self, font_name, text, locale, script, weight, stretch, italic)
}
func (self classOS) GetExecutablePath() String {
	return self.ptr.API.OS_get_executable_path(self)
}
func (self classOS) ReadStringFromStdin() String {
	return self.ptr.API.OS_read_string_from_stdin(self)
}
func (self classOS) Execute(path String, arguments PackedStringArray, output Array, read_stderr bool, open_console bool) Int {
	return self.ptr.API.OS_execute(self, path, arguments, output, read_stderr, open_console)
}
func (self classOS) CreateProcess(path String, arguments PackedStringArray, open_console bool) Int {
	return self.ptr.API.OS_create_process(self, path, arguments, open_console)
}
func (self classOS) CreateInstance(arguments PackedStringArray) Int {
	return self.ptr.API.OS_create_instance(self, arguments)
}
func (self classOS) Kill(pid Int) int64 {
	return self.ptr.API.OS_kill(self, pid)
}
func (self classOS) ShellOpen(uri String) int64 {
	return self.ptr.API.OS_shell_open(self, uri)
}
func (self classOS) ShellShowInFileManager(file_or_dir_path String, open_folder bool) int64 {
	return self.ptr.API.OS_shell_show_in_file_manager(self, file_or_dir_path, open_folder)
}
func (self classOS) IsProcessRunning(pid Int) bool {
	return self.ptr.API.OS_is_process_running(self, pid)
}
func (self classOS) GetProcessId() Int {
	return self.ptr.API.OS_get_process_id(self)
}
func (self classOS) HasEnvironment(variable String) bool {
	return self.ptr.API.OS_has_environment(self, variable)
}
func (self classOS) GetEnvironment(variable String) String {
	return self.ptr.API.OS_get_environment(self, variable)
}
func (self classOS) SetEnvironment(variable String, value String) {
	self.ptr.API.OS_set_environment(self, variable, value)
}
func (self classOS) UnsetEnvironment(variable String) {
	self.ptr.API.OS_unset_environment(self, variable)
}
func (self classOS) GetName() String {
	return self.ptr.API.OS_get_name(self)
}
func (self classOS) GetDistributionName() String {
	return self.ptr.API.OS_get_distribution_name(self)
}
func (self classOS) GetVersion() String {
	return self.ptr.API.OS_get_version(self)
}
func (self classOS) GetCmdlineArgs() PackedStringArray {
	return self.ptr.API.OS_get_cmdline_args(self)
}
func (self classOS) GetCmdlineUserArgs() PackedStringArray {
	return self.ptr.API.OS_get_cmdline_user_args(self)
}
func (self classOS) GetVideoAdapterDriverInfo() PackedStringArray {
	return self.ptr.API.OS_get_video_adapter_driver_info(self)
}
func (self classOS) SetRestartOnExit(restart bool, arguments PackedStringArray) {
	self.ptr.API.OS_set_restart_on_exit(self, restart, arguments)
}
func (self classOS) IsRestartOnExitSet() bool {
	return self.ptr.API.OS_is_restart_on_exit_set(self)
}
func (self classOS) GetRestartOnExitArguments() PackedStringArray {
	return self.ptr.API.OS_get_restart_on_exit_arguments(self)
}
func (self classOS) DelayUsec(usec Int) {
	self.ptr.API.OS_delay_usec(self, usec)
}
func (self classOS) DelayMsec(msec Int) {
	self.ptr.API.OS_delay_msec(self, msec)
}
func (self classOS) GetLocale() String {
	return self.ptr.API.OS_get_locale(self)
}
func (self classOS) GetLocaleLanguage() String {
	return self.ptr.API.OS_get_locale_language(self)
}
func (self classOS) GetModelName() String {
	return self.ptr.API.OS_get_model_name(self)
}
func (self classOS) IsUserfsPersistent() bool {
	return self.ptr.API.OS_is_userfs_persistent(self)
}
func (self classOS) IsStdoutVerbose() bool {
	return self.ptr.API.OS_is_stdout_verbose(self)
}
func (self classOS) IsDebugBuild() bool {
	return self.ptr.API.OS_is_debug_build(self)
}
func (self classOS) GetStaticMemoryUsage() Int {
	return self.ptr.API.OS_get_static_memory_usage(self)
}
func (self classOS) GetStaticMemoryPeakUsage() Int {
	return self.ptr.API.OS_get_static_memory_peak_usage(self)
}
func (self classOS) GetMemoryInfo() Dictionary {
	return self.ptr.API.OS_get_memory_info(self)
}
func (self classOS) MoveToTrash(path String) int64 {
	return self.ptr.API.OS_move_to_trash(self, path)
}
func (self classOS) GetUserDataDir() String {
	return self.ptr.API.OS_get_user_data_dir(self)
}
func (self classOS) GetSystemDir(dir OSSystemDir, shared_storage bool) String {
	return self.ptr.API.OS_get_system_dir(self, dir, shared_storage)
}
func (self classOS) GetConfigDir() String {
	return self.ptr.API.OS_get_config_dir(self)
}
func (self classOS) GetDataDir() String {
	return self.ptr.API.OS_get_data_dir(self)
}
func (self classOS) GetCacheDir() String {
	return self.ptr.API.OS_get_cache_dir(self)
}
func (self classOS) GetUniqueId() String {
	return self.ptr.API.OS_get_unique_id(self)
}
func (self classOS) GetKeycodeString(code Key) String {
	return self.ptr.API.OS_get_keycode_string(self, code)
}
func (self classOS) IsKeycodeUnicode(code Int) bool {
	return self.ptr.API.OS_is_keycode_unicode(self, code)
}
func (self classOS) FindKeycodeFromString(s String) Key {
	return self.ptr.API.OS_find_keycode_from_string(self, s)
}
func (self classOS) SetUseFileAccessSaveAndSwap(enabled bool) {
	self.ptr.API.OS_set_use_file_access_save_and_swap(self, enabled)
}
func (self classOS) SetThreadName(name String) int64 {
	return self.ptr.API.OS_set_thread_name(self, name)
}
func (self classOS) GetThreadCallerId() Int {
	return self.ptr.API.OS_get_thread_caller_id(self)
}
func (self classOS) GetMainThreadId() Int {
	return self.ptr.API.OS_get_main_thread_id(self)
}
func (self classOS) HasFeature(tag_name String) bool {
	return self.ptr.API.OS_has_feature(self, tag_name)
}
func (self classOS) IsSandboxed() bool {
	return self.ptr.API.OS_is_sandboxed(self)
}
func (self classOS) RequestPermission(name String) bool {
	return self.ptr.API.OS_request_permission(self, name)
}
func (self classOS) RequestPermissions() bool {
	return self.ptr.API.OS_request_permissions(self)
}
func (self classOS) GetGrantedPermissions() PackedStringArray {
	return self.ptr.API.OS_get_granted_permissions(self)
}
func (self classOS) RevokeGrantedPermissions() {
	self.ptr.API.OS_revoke_granted_permissions(self)
}

type classObject struct{ Class[classObject] }

func (self classObject) GetClass() String {
	return self.ptr.API.Object_get_class(self)
}
func (self classObject) IsClass(class String) bool {
	return self.ptr.API.Object_is_class(self, class)
}
func (self classObject) Set(property StringName, value Variant) {
	self.ptr.API.Object_set(self, property, value)
}
func (self classObject) Get(property StringName) Variant {
	return self.ptr.API.Object_get(self, property)
}
func (self classObject) SetIndexed(property_path NodePath, value Variant) {
	self.ptr.API.Object_set_indexed(self, property_path, value)
}
func (self classObject) GetIndexed(property_path NodePath) Variant {
	return self.ptr.API.Object_get_indexed(self, property_path)
}
func (self classObject) GetPropertyList() ArrayOf[Dictionary] {
	return self.ptr.API.Object_get_property_list(self)
}
func (self classObject) GetMethodList() ArrayOf[Dictionary] {
	return self.ptr.API.Object_get_method_list(self)
}
func (self classObject) PropertyCanRevert(property StringName) bool {
	return self.ptr.API.Object_property_can_revert(self, property)
}
func (self classObject) PropertyGetRevert(property StringName) Variant {
	return self.ptr.API.Object_property_get_revert(self, property)
}
func (self classObject) Notification(what Int, reversed bool) {
	self.ptr.API.Object_notification(self, what, reversed)
}
func (self classObject) ToString() String {
	return self.ptr.API.Object_to_string(self)
}
func (self classObject) GetInstanceId() Int {
	return self.ptr.API.Object_get_instance_id(self)
}
func (self classObject) SetScript(script Variant) {
	self.ptr.API.Object_set_script(self, script)
}
func (self classObject) GetScript() Variant {
	return self.ptr.API.Object_get_script(self)
}
func (self classObject) SetMeta(name StringName, value Variant) {
	self.ptr.API.Object_set_meta(self, name, value)
}
func (self classObject) RemoveMeta(name StringName) {
	self.ptr.API.Object_remove_meta(self, name)
}
func (self classObject) GetMeta(name StringName, def Variant) Variant {
	return self.ptr.API.Object_get_meta(self, name, def)
}
func (self classObject) HasMeta(name StringName) bool {
	return self.ptr.API.Object_has_meta(self, name)
}
func (self classObject) GetMetaList() ArrayOf[StringName] {
	return self.ptr.API.Object_get_meta_list(self)
}
func (self classObject) AddUserSignal(signal String, arguments Array) {
	self.ptr.API.Object_add_user_signal(self, signal, arguments)
}
func (self classObject) HasUserSignal(signal StringName) bool {
	return self.ptr.API.Object_has_user_signal(self, signal)
}
func (self classObject) EmitSignal(signal StringName) int64 {
	return self.ptr.API.Object_emit_signal(self, signal)
}
func (self classObject) Call(method StringName) Variant {
	return self.ptr.API.Object_call(self, method)
}
func (self classObject) CallDeferred(method StringName) Variant {
	return self.ptr.API.Object_call_deferred(self, method)
}
func (self classObject) SetDeferred(property StringName, value Variant) {
	self.ptr.API.Object_set_deferred(self, property, value)
}
func (self classObject) Callv(method StringName, arg_array Array) Variant {
	return self.ptr.API.Object_callv(self, method, arg_array)
}
func (self classObject) HasMethod(method StringName) bool {
	return self.ptr.API.Object_has_method(self, method)
}
func (self classObject) HasSignal(signal StringName) bool {
	return self.ptr.API.Object_has_signal(self, signal)
}
func (self classObject) GetSignalList() ArrayOf[Dictionary] {
	return self.ptr.API.Object_get_signal_list(self)
}
func (self classObject) GetSignalConnectionList(signal StringName) ArrayOf[Dictionary] {
	return self.ptr.API.Object_get_signal_connection_list(self, signal)
}
func (self classObject) GetIncomingConnections() ArrayOf[Dictionary] {
	return self.ptr.API.Object_get_incoming_connections(self)
}
func (self classObject) Connect(signal StringName, callable Callable, flags Int) int64 {
	return self.ptr.API.Object_connect(self, signal, callable, flags)
}
func (self classObject) Disconnect(signal StringName, callable Callable) {
	self.ptr.API.Object_disconnect(self, signal, callable)
}
func (self classObject) IsConnected(signal StringName, callable Callable) bool {
	return self.ptr.API.Object_is_connected(self, signal, callable)
}
func (self classObject) SetBlockSignals(enable bool) {
	self.ptr.API.Object_set_block_signals(self, enable)
}
func (self classObject) IsBlockingSignals() bool {
	return self.ptr.API.Object_is_blocking_signals(self)
}
func (self classObject) NotifyPropertyListChanged() {
	self.ptr.API.Object_notify_property_list_changed(self)
}
func (self classObject) SetMessageTranslation(enable bool) {
	self.ptr.API.Object_set_message_translation(self, enable)
}
func (self classObject) CanTranslateMessages() bool {
	return self.ptr.API.Object_can_translate_messages(self)
}
func (self classObject) Tr(message StringName, context StringName) String {
	return self.ptr.API.Object_tr(self, message, context)
}
func (self classObject) TrN(message StringName, plural_message StringName, n Int, context StringName) String {
	return self.ptr.API.Object_tr_n(self, message, plural_message, n, context)
}
func (self classObject) IsQueuedForDeletion() bool {
	return self.ptr.API.Object_is_queued_for_deletion(self)
}
func (self classObject) CancelFree() {
	self.ptr.API.Object_cancel_free(self)
}

type classOccluder3D struct{ Class[classOccluder3D] }

func (self classOccluder3D) Super() Resource { var super Resource; super.ptr = self.ptr; return super }

func (self classOccluder3D) Resource() Resource { return self.Super() }
func (self classOccluder3D) GetVertices() PackedVector3Array {
	return self.ptr.API.Occluder3D_get_vertices(self)
}
func (self classOccluder3D) GetIndices() PackedInt32Array {
	return self.ptr.API.Occluder3D_get_indices(self)
}

type classOccluderInstance3D struct{ Class[classOccluderInstance3D] }

func (self classOccluderInstance3D) Super() Node3D {
	var super Node3D
	super.ptr = self.ptr
	return super
}

func (self classOccluderInstance3D) Node3D() Node3D { return self.Super() }
func (self classOccluderInstance3D) SetBakeMask(mask Int) {
	self.ptr.API.OccluderInstance3D_set_bake_mask(self, mask)
}
func (self classOccluderInstance3D) GetBakeMask() Int {
	return self.ptr.API.OccluderInstance3D_get_bake_mask(self)
}
func (self classOccluderInstance3D) SetBakeMaskValue(layer_number Int, value bool) {
	self.ptr.API.OccluderInstance3D_set_bake_mask_value(self, layer_number, value)
}
func (self classOccluderInstance3D) GetBakeMaskValue(layer_number Int) bool {
	return self.ptr.API.OccluderInstance3D_get_bake_mask_value(self, layer_number)
}
func (self classOccluderInstance3D) SetBakeSimplificationDistance(simplification_distance Float) {
	self.ptr.API.OccluderInstance3D_set_bake_simplification_distance(self, simplification_distance)
}
func (self classOccluderInstance3D) GetBakeSimplificationDistance() Float {
	return self.ptr.API.OccluderInstance3D_get_bake_simplification_distance(self)
}
func (self classOccluderInstance3D) SetOccluder(occluder Occluder3D) {
	self.ptr.API.OccluderInstance3D_set_occluder(self, occluder)
}
func (self classOccluderInstance3D) GetOccluder() Occluder3D {
	return self.ptr.API.OccluderInstance3D_get_occluder(self)
}

type classOccluderPolygon2D struct{ Class[classOccluderPolygon2D] }

func (self classOccluderPolygon2D) Super() Resource {
	var super Resource
	super.ptr = self.ptr
	return super
}

func (self classOccluderPolygon2D) Resource() Resource { return self.Super() }
func (self classOccluderPolygon2D) SetClosed(closed bool) {
	self.ptr.API.OccluderPolygon2D_set_closed(self, closed)
}
func (self classOccluderPolygon2D) IsClosed() bool {
	return self.ptr.API.OccluderPolygon2D_is_closed(self)
}
func (self classOccluderPolygon2D) SetCullMode(cull_mode OccluderPolygon2DCullMode) {
	self.ptr.API.OccluderPolygon2D_set_cull_mode(self, cull_mode)
}
func (self classOccluderPolygon2D) GetCullMode() OccluderPolygon2DCullMode {
	return self.ptr.API.OccluderPolygon2D_get_cull_mode(self)
}
func (self classOccluderPolygon2D) SetPolygon(polygon PackedVector2Array) {
	self.ptr.API.OccluderPolygon2D_set_polygon(self, polygon)
}
func (self classOccluderPolygon2D) GetPolygon() PackedVector2Array {
	return self.ptr.API.OccluderPolygon2D_get_polygon(self)
}

type classOfflineMultiplayerPeer struct {
	Class[classOfflineMultiplayerPeer]
}

func (self classOfflineMultiplayerPeer) Super() MultiplayerPeer {
	var super MultiplayerPeer
	super.ptr = self.ptr
	return super
}

func (self classOfflineMultiplayerPeer) MultiplayerPeer() MultiplayerPeer { return self.Super() }

type classOggPacketSequence struct{ Class[classOggPacketSequence] }

func (self classOggPacketSequence) Super() Resource {
	var super Resource
	super.ptr = self.ptr
	return super
}

func (self classOggPacketSequence) Resource() Resource { return self.Super() }
func (self classOggPacketSequence) SetPacketData(packet_data ArrayOf[Array]) {
	self.ptr.API.OggPacketSequence_set_packet_data(self, packet_data)
}
func (self classOggPacketSequence) GetPacketData() ArrayOf[Array] {
	return self.ptr.API.OggPacketSequence_get_packet_data(self)
}
func (self classOggPacketSequence) SetPacketGranulePositions(granule_positions PackedInt64Array) {
	self.ptr.API.OggPacketSequence_set_packet_granule_positions(self, granule_positions)
}
func (self classOggPacketSequence) GetPacketGranulePositions() PackedInt64Array {
	return self.ptr.API.OggPacketSequence_get_packet_granule_positions(self)
}
func (self classOggPacketSequence) SetSamplingRate(sampling_rate Float) {
	self.ptr.API.OggPacketSequence_set_sampling_rate(self, sampling_rate)
}
func (self classOggPacketSequence) GetSamplingRate() Float {
	return self.ptr.API.OggPacketSequence_get_sampling_rate(self)
}
func (self classOggPacketSequence) GetLength() Float {
	return self.ptr.API.OggPacketSequence_get_length(self)
}

type classOggPacketSequencePlayback struct {
	Class[classOggPacketSequencePlayback]
}

func (self classOggPacketSequencePlayback) Super() RefCounted {
	var super RefCounted
	super.ptr = self.ptr
	return super
}

func (self classOggPacketSequencePlayback) RefCounted() RefCounted { return self.Super() }

type classOmniLight3D struct{ Class[classOmniLight3D] }

func (self classOmniLight3D) Super() Light3D { var super Light3D; super.ptr = self.ptr; return super }

func (self classOmniLight3D) Light3D() Light3D { return self.Super() }
func (self classOmniLight3D) SetShadowMode(mode OmniLight3DShadowMode) {
	self.ptr.API.OmniLight3D_set_shadow_mode(self, mode)
}
func (self classOmniLight3D) GetShadowMode() OmniLight3DShadowMode {
	return self.ptr.API.OmniLight3D_get_shadow_mode(self)
}

type classOpenXRAPIExtension struct{ Class[classOpenXRAPIExtension] }

func (self classOpenXRAPIExtension) Super() RefCounted {
	var super RefCounted
	super.ptr = self.ptr
	return super
}

func (self classOpenXRAPIExtension) RefCounted() RefCounted { return self.Super() }
func (self classOpenXRAPIExtension) GetInstance() Int {
	return self.ptr.API.OpenXRAPIExtension_get_instance(self)
}
func (self classOpenXRAPIExtension) GetSystemId() Int {
	return self.ptr.API.OpenXRAPIExtension_get_system_id(self)
}
func (self classOpenXRAPIExtension) GetSession() Int {
	return self.ptr.API.OpenXRAPIExtension_get_session(self)
}
func (self classOpenXRAPIExtension) TransformFromPose(pose []byte) Transform3D {
	return self.ptr.API.OpenXRAPIExtension_transform_from_pose(self, pose)
}
func (self classOpenXRAPIExtension) XrResult(result Int, format String, args Array) bool {
	return self.ptr.API.OpenXRAPIExtension_xr_result(self, result, format, args)
}
func (self classOpenXRAPIExtension) OpenxrIsEnabled(check_run_in_editor bool) bool {
	return self.ptr.API.OpenXRAPIExtension_openxr_is_enabled(self, check_run_in_editor)
}
func (self classOpenXRAPIExtension) GetInstanceProcAddr(name String) Int {
	return self.ptr.API.OpenXRAPIExtension_get_instance_proc_addr(self, name)
}
func (self classOpenXRAPIExtension) GetErrorString(result Int) String {
	return self.ptr.API.OpenXRAPIExtension_get_error_string(self, result)
}
func (self classOpenXRAPIExtension) GetSwapchainFormatName(swapchain_format Int) String {
	return self.ptr.API.OpenXRAPIExtension_get_swapchain_format_name(self, swapchain_format)
}
func (self classOpenXRAPIExtension) IsInitialized() bool {
	return self.ptr.API.OpenXRAPIExtension_is_initialized(self)
}
func (self classOpenXRAPIExtension) IsRunning() bool {
	return self.ptr.API.OpenXRAPIExtension_is_running(self)
}
func (self classOpenXRAPIExtension) GetPlaySpace() Int {
	return self.ptr.API.OpenXRAPIExtension_get_play_space(self)
}
func (self classOpenXRAPIExtension) GetNextFrameTime() Int {
	return self.ptr.API.OpenXRAPIExtension_get_next_frame_time(self)
}
func (self classOpenXRAPIExtension) CanRender() bool {
	return self.ptr.API.OpenXRAPIExtension_can_render(self)
}

type classOpenXRAction struct{ Class[classOpenXRAction] }

func (self classOpenXRAction) Super() Resource {
	var super Resource
	super.ptr = self.ptr
	return super
}

func (self classOpenXRAction) Resource() Resource { return self.Super() }
func (self classOpenXRAction) SetLocalizedName(localized_name String) {
	self.ptr.API.OpenXRAction_set_localized_name(self, localized_name)
}
func (self classOpenXRAction) GetLocalizedName() String {
	return self.ptr.API.OpenXRAction_get_localized_name(self)
}
func (self classOpenXRAction) SetActionType(action_type OpenXRActionActionType) {
	self.ptr.API.OpenXRAction_set_action_type(self, action_type)
}
func (self classOpenXRAction) GetActionType() OpenXRActionActionType {
	return self.ptr.API.OpenXRAction_get_action_type(self)
}
func (self classOpenXRAction) SetToplevelPaths(toplevel_paths PackedStringArray) {
	self.ptr.API.OpenXRAction_set_toplevel_paths(self, toplevel_paths)
}
func (self classOpenXRAction) GetToplevelPaths() PackedStringArray {
	return self.ptr.API.OpenXRAction_get_toplevel_paths(self)
}

type classOpenXRActionMap struct{ Class[classOpenXRActionMap] }

func (self classOpenXRActionMap) Super() Resource {
	var super Resource
	super.ptr = self.ptr
	return super
}

func (self classOpenXRActionMap) Resource() Resource { return self.Super() }
func (self classOpenXRActionMap) SetActionSets(action_sets Array) {
	self.ptr.API.OpenXRActionMap_set_action_sets(self, action_sets)
}
func (self classOpenXRActionMap) GetActionSets() Array {
	return self.ptr.API.OpenXRActionMap_get_action_sets(self)
}
func (self classOpenXRActionMap) GetActionSetCount() Int {
	return self.ptr.API.OpenXRActionMap_get_action_set_count(self)
}
func (self classOpenXRActionMap) FindActionSet(name String) OpenXRActionSet {
	return self.ptr.API.OpenXRActionMap_find_action_set(self, name)
}
func (self classOpenXRActionMap) GetActionSet(idx Int) OpenXRActionSet {
	return self.ptr.API.OpenXRActionMap_get_action_set(self, idx)
}
func (self classOpenXRActionMap) AddActionSet(action_set OpenXRActionSet) {
	self.ptr.API.OpenXRActionMap_add_action_set(self, action_set)
}
func (self classOpenXRActionMap) RemoveActionSet(action_set OpenXRActionSet) {
	self.ptr.API.OpenXRActionMap_remove_action_set(self, action_set)
}
func (self classOpenXRActionMap) SetInteractionProfiles(interaction_profiles Array) {
	self.ptr.API.OpenXRActionMap_set_interaction_profiles(self, interaction_profiles)
}
func (self classOpenXRActionMap) GetInteractionProfiles() Array {
	return self.ptr.API.OpenXRActionMap_get_interaction_profiles(self)
}
func (self classOpenXRActionMap) GetInteractionProfileCount() Int {
	return self.ptr.API.OpenXRActionMap_get_interaction_profile_count(self)
}
func (self classOpenXRActionMap) FindInteractionProfile(name String) OpenXRInteractionProfile {
	return self.ptr.API.OpenXRActionMap_find_interaction_profile(self, name)
}
func (self classOpenXRActionMap) GetInteractionProfile(idx Int) OpenXRInteractionProfile {
	return self.ptr.API.OpenXRActionMap_get_interaction_profile(self, idx)
}
func (self classOpenXRActionMap) AddInteractionProfile(interaction_profile OpenXRInteractionProfile) {
	self.ptr.API.OpenXRActionMap_add_interaction_profile(self, interaction_profile)
}
func (self classOpenXRActionMap) RemoveInteractionProfile(interaction_profile OpenXRInteractionProfile) {
	self.ptr.API.OpenXRActionMap_remove_interaction_profile(self, interaction_profile)
}
func (self classOpenXRActionMap) CreateDefaultActionSets() {
	self.ptr.API.OpenXRActionMap_create_default_action_sets(self)
}

type classOpenXRActionSet struct{ Class[classOpenXRActionSet] }

func (self classOpenXRActionSet) Super() Resource {
	var super Resource
	super.ptr = self.ptr
	return super
}

func (self classOpenXRActionSet) Resource() Resource { return self.Super() }
func (self classOpenXRActionSet) SetLocalizedName(localized_name String) {
	self.ptr.API.OpenXRActionSet_set_localized_name(self, localized_name)
}
func (self classOpenXRActionSet) GetLocalizedName() String {
	return self.ptr.API.OpenXRActionSet_get_localized_name(self)
}
func (self classOpenXRActionSet) SetPriority(priority Int) {
	self.ptr.API.OpenXRActionSet_set_priority(self, priority)
}
func (self classOpenXRActionSet) GetPriority() Int {
	return self.ptr.API.OpenXRActionSet_get_priority(self)
}
func (self classOpenXRActionSet) GetActionCount() Int {
	return self.ptr.API.OpenXRActionSet_get_action_count(self)
}
func (self classOpenXRActionSet) SetActions(actions Array) {
	self.ptr.API.OpenXRActionSet_set_actions(self, actions)
}
func (self classOpenXRActionSet) GetActions() Array {
	return self.ptr.API.OpenXRActionSet_get_actions(self)
}
func (self classOpenXRActionSet) AddAction(action OpenXRAction) {
	self.ptr.API.OpenXRActionSet_add_action(self, action)
}
func (self classOpenXRActionSet) RemoveAction(action OpenXRAction) {
	self.ptr.API.OpenXRActionSet_remove_action(self, action)
}

type classOpenXRExtensionWrapperExtension struct {
	Class[classOpenXRExtensionWrapperExtension]
}

func (self classOpenXRExtensionWrapperExtension) Super() Object {
	var super Object
	super.ptr = self.ptr
	return super
}

func (self classOpenXRExtensionWrapperExtension) Object() Object { return self.Super() }
func (self classOpenXRExtensionWrapperExtension) GetOpenxrApi() OpenXRAPIExtension {
	return self.ptr.API.OpenXRExtensionWrapperExtension_get_openxr_api(self)
}
func (self classOpenXRExtensionWrapperExtension) RegisterExtensionWrapper() {
	self.ptr.API.OpenXRExtensionWrapperExtension_register_extension_wrapper(self)
}

type classOpenXRHand struct{ Class[classOpenXRHand] }

func (self classOpenXRHand) Super() Node3D { var super Node3D; super.ptr = self.ptr; return super }

func (self classOpenXRHand) Node3D() Node3D { return self.Super() }
func (self classOpenXRHand) SetHand(hand OpenXRHandHands) {
	self.ptr.API.OpenXRHand_set_hand(self, hand)
}
func (self classOpenXRHand) GetHand() OpenXRHandHands {
	return self.ptr.API.OpenXRHand_get_hand(self)
}
func (self classOpenXRHand) SetHandSkeleton(hand_skeleton NodePath) {
	self.ptr.API.OpenXRHand_set_hand_skeleton(self, hand_skeleton)
}
func (self classOpenXRHand) GetHandSkeleton() NodePath {
	return self.ptr.API.OpenXRHand_get_hand_skeleton(self)
}
func (self classOpenXRHand) SetMotionRange(motion_range OpenXRHandMotionRange) {
	self.ptr.API.OpenXRHand_set_motion_range(self, motion_range)
}
func (self classOpenXRHand) GetMotionRange() OpenXRHandMotionRange {
	return self.ptr.API.OpenXRHand_get_motion_range(self)
}
func (self classOpenXRHand) SetSkeletonRig(skeleton_rig OpenXRHandSkeletonRig) {
	self.ptr.API.OpenXRHand_set_skeleton_rig(self, skeleton_rig)
}
func (self classOpenXRHand) GetSkeletonRig() OpenXRHandSkeletonRig {
	return self.ptr.API.OpenXRHand_get_skeleton_rig(self)
}

type classOpenXRIPBinding struct{ Class[classOpenXRIPBinding] }

func (self classOpenXRIPBinding) Super() Resource {
	var super Resource
	super.ptr = self.ptr
	return super
}

func (self classOpenXRIPBinding) Resource() Resource { return self.Super() }
func (self classOpenXRIPBinding) SetAction(action OpenXRAction) {
	self.ptr.API.OpenXRIPBinding_set_action(self, action)
}
func (self classOpenXRIPBinding) GetAction() OpenXRAction {
	return self.ptr.API.OpenXRIPBinding_get_action(self)
}
func (self classOpenXRIPBinding) GetPathCount() Int {
	return self.ptr.API.OpenXRIPBinding_get_path_count(self)
}
func (self classOpenXRIPBinding) SetPaths(paths PackedStringArray) {
	self.ptr.API.OpenXRIPBinding_set_paths(self, paths)
}
func (self classOpenXRIPBinding) GetPaths() PackedStringArray {
	return self.ptr.API.OpenXRIPBinding_get_paths(self)
}
func (self classOpenXRIPBinding) HasPath(path String) bool {
	return self.ptr.API.OpenXRIPBinding_has_path(self, path)
}
func (self classOpenXRIPBinding) AddPath(path String) {
	self.ptr.API.OpenXRIPBinding_add_path(self, path)
}
func (self classOpenXRIPBinding) RemovePath(path String) {
	self.ptr.API.OpenXRIPBinding_remove_path(self, path)
}

type classOpenXRInteractionProfile struct {
	Class[classOpenXRInteractionProfile]
}

func (self classOpenXRInteractionProfile) Super() Resource {
	var super Resource
	super.ptr = self.ptr
	return super
}

func (self classOpenXRInteractionProfile) Resource() Resource { return self.Super() }
func (self classOpenXRInteractionProfile) SetInteractionProfilePath(interaction_profile_path String) {
	self.ptr.API.OpenXRInteractionProfile_set_interaction_profile_path(self, interaction_profile_path)
}
func (self classOpenXRInteractionProfile) GetInteractionProfilePath() String {
	return self.ptr.API.OpenXRInteractionProfile_get_interaction_profile_path(self)
}
func (self classOpenXRInteractionProfile) GetBindingCount() Int {
	return self.ptr.API.OpenXRInteractionProfile_get_binding_count(self)
}
func (self classOpenXRInteractionProfile) GetBinding(index Int) OpenXRIPBinding {
	return self.ptr.API.OpenXRInteractionProfile_get_binding(self, index)
}
func (self classOpenXRInteractionProfile) SetBindings(bindings Array) {
	self.ptr.API.OpenXRInteractionProfile_set_bindings(self, bindings)
}
func (self classOpenXRInteractionProfile) GetBindings() Array {
	return self.ptr.API.OpenXRInteractionProfile_get_bindings(self)
}

type classOpenXRInteractionProfileMetadata struct {
	Class[classOpenXRInteractionProfileMetadata]
}

func (self classOpenXRInteractionProfileMetadata) Super() Object {
	var super Object
	super.ptr = self.ptr
	return super
}

func (self classOpenXRInteractionProfileMetadata) Object() Object { return self.Super() }
func (self classOpenXRInteractionProfileMetadata) RegisterProfileRename(old_name String, new_name String) {
	self.ptr.API.OpenXRInteractionProfileMetadata_register_profile_rename(self, old_name, new_name)
}
func (self classOpenXRInteractionProfileMetadata) RegisterTopLevelPath(display_name String, openxr_path String, openxr_extension_name String) {
	self.ptr.API.OpenXRInteractionProfileMetadata_register_top_level_path(self, display_name, openxr_path, openxr_extension_name)
}
func (self classOpenXRInteractionProfileMetadata) RegisterInteractionProfile(display_name String, openxr_path String, openxr_extension_name String) {
	self.ptr.API.OpenXRInteractionProfileMetadata_register_interaction_profile(self, display_name, openxr_path, openxr_extension_name)
}
func (self classOpenXRInteractionProfileMetadata) RegisterIoPath(interaction_profile String, display_name String, toplevel_path String, openxr_path String, openxr_extension_name String, action_type OpenXRActionActionType) {
	self.ptr.API.OpenXRInteractionProfileMetadata_register_io_path(self, interaction_profile, display_name, toplevel_path, openxr_path, openxr_extension_name, action_type)
}

type classOpenXRInterface struct{ Class[classOpenXRInterface] }

func (self classOpenXRInterface) Super() XRInterface {
	var super XRInterface
	super.ptr = self.ptr
	return super
}

func (self classOpenXRInterface) XRInterface() XRInterface { return self.Super() }
func (self classOpenXRInterface) GetDisplayRefreshRate() Float {
	return self.ptr.API.OpenXRInterface_get_display_refresh_rate(self)
}
func (self classOpenXRInterface) SetDisplayRefreshRate(refresh_rate Float) {
	self.ptr.API.OpenXRInterface_set_display_refresh_rate(self, refresh_rate)
}
func (self classOpenXRInterface) GetRenderTargetSizeMultiplier() Float {
	return self.ptr.API.OpenXRInterface_get_render_target_size_multiplier(self)
}
func (self classOpenXRInterface) SetRenderTargetSizeMultiplier(multiplier Float) {
	self.ptr.API.OpenXRInterface_set_render_target_size_multiplier(self, multiplier)
}
func (self classOpenXRInterface) IsFoveationSupported() bool {
	return self.ptr.API.OpenXRInterface_is_foveation_supported(self)
}
func (self classOpenXRInterface) GetFoveationLevel() Int {
	return self.ptr.API.OpenXRInterface_get_foveation_level(self)
}
func (self classOpenXRInterface) SetFoveationLevel(foveation_level Int) {
	self.ptr.API.OpenXRInterface_set_foveation_level(self, foveation_level)
}
func (self classOpenXRInterface) GetFoveationDynamic() bool {
	return self.ptr.API.OpenXRInterface_get_foveation_dynamic(self)
}
func (self classOpenXRInterface) SetFoveationDynamic(foveation_dynamic bool) {
	self.ptr.API.OpenXRInterface_set_foveation_dynamic(self, foveation_dynamic)
}
func (self classOpenXRInterface) IsActionSetActive(name String) bool {
	return self.ptr.API.OpenXRInterface_is_action_set_active(self, name)
}
func (self classOpenXRInterface) SetActionSetActive(name String, active bool) {
	self.ptr.API.OpenXRInterface_set_action_set_active(self, name, active)
}
func (self classOpenXRInterface) GetActionSets() Array {
	return self.ptr.API.OpenXRInterface_get_action_sets(self)
}
func (self classOpenXRInterface) GetAvailableDisplayRefreshRates() Array {
	return self.ptr.API.OpenXRInterface_get_available_display_refresh_rates(self)
}
func (self classOpenXRInterface) SetMotionRange(hand OpenXRInterfaceHand, motion_range OpenXRInterfaceHandMotionRange) {
	self.ptr.API.OpenXRInterface_set_motion_range(self, hand, motion_range)
}
func (self classOpenXRInterface) GetMotionRange(hand OpenXRInterfaceHand) OpenXRInterfaceHandMotionRange {
	return self.ptr.API.OpenXRInterface_get_motion_range(self, hand)
}
func (self classOpenXRInterface) GetHandJointFlags(hand OpenXRInterfaceHand, joint OpenXRInterfaceHandJoints) OpenXRInterfaceHandJointFlags {
	return self.ptr.API.OpenXRInterface_get_hand_joint_flags(self, hand, joint)
}
func (self classOpenXRInterface) GetHandJointRotation(hand OpenXRInterfaceHand, joint OpenXRInterfaceHandJoints) Quaternion {
	return self.ptr.API.OpenXRInterface_get_hand_joint_rotation(self, hand, joint)
}
func (self classOpenXRInterface) GetHandJointPosition(hand OpenXRInterfaceHand, joint OpenXRInterfaceHandJoints) Vector3 {
	return self.ptr.API.OpenXRInterface_get_hand_joint_position(self, hand, joint)
}
func (self classOpenXRInterface) GetHandJointRadius(hand OpenXRInterfaceHand, joint OpenXRInterfaceHandJoints) Float {
	return self.ptr.API.OpenXRInterface_get_hand_joint_radius(self, hand, joint)
}
func (self classOpenXRInterface) GetHandJointLinearVelocity(hand OpenXRInterfaceHand, joint OpenXRInterfaceHandJoints) Vector3 {
	return self.ptr.API.OpenXRInterface_get_hand_joint_linear_velocity(self, hand, joint)
}
func (self classOpenXRInterface) GetHandJointAngularVelocity(hand OpenXRInterfaceHand, joint OpenXRInterfaceHandJoints) Vector3 {
	return self.ptr.API.OpenXRInterface_get_hand_joint_angular_velocity(self, hand, joint)
}
func (self classOpenXRInterface) IsHandTrackingSupported() bool {
	return self.ptr.API.OpenXRInterface_is_hand_tracking_supported(self)
}
func (self classOpenXRInterface) IsEyeGazeInteractionSupported() bool {
	return self.ptr.API.OpenXRInterface_is_eye_gaze_interaction_supported(self)
}

type classOptimizedTranslation struct {
	Class[classOptimizedTranslation]
}

func (self classOptimizedTranslation) Super() Translation {
	var super Translation
	super.ptr = self.ptr
	return super
}

func (self classOptimizedTranslation) Translation() Translation { return self.Super() }
func (self classOptimizedTranslation) Generate(from Translation) {
	self.ptr.API.OptimizedTranslation_generate(self, from)
}

type classOptionButton struct{ Class[classOptionButton] }

func (self classOptionButton) Super() Button { var super Button; super.ptr = self.ptr; return super }

func (self classOptionButton) Button() Button { return self.Super() }
func (self classOptionButton) AddItem(label String, id Int) {
	self.ptr.API.OptionButton_add_item(self, label, id)
}
func (self classOptionButton) AddIconItem(texture Texture2D, label String, id Int) {
	self.ptr.API.OptionButton_add_icon_item(self, texture, label, id)
}
func (self classOptionButton) SetItemText(idx Int, text String) {
	self.ptr.API.OptionButton_set_item_text(self, idx, text)
}
func (self classOptionButton) SetItemIcon(idx Int, texture Texture2D) {
	self.ptr.API.OptionButton_set_item_icon(self, idx, texture)
}
func (self classOptionButton) SetItemDisabled(idx Int, disabled bool) {
	self.ptr.API.OptionButton_set_item_disabled(self, idx, disabled)
}
func (self classOptionButton) SetItemId(idx Int, id Int) {
	self.ptr.API.OptionButton_set_item_id(self, idx, id)
}
func (self classOptionButton) SetItemMetadata(idx Int, metadata Variant) {
	self.ptr.API.OptionButton_set_item_metadata(self, idx, metadata)
}
func (self classOptionButton) SetItemTooltip(idx Int, tooltip String) {
	self.ptr.API.OptionButton_set_item_tooltip(self, idx, tooltip)
}
func (self classOptionButton) GetItemText(idx Int) String {
	return self.ptr.API.OptionButton_get_item_text(self, idx)
}
func (self classOptionButton) GetItemIcon(idx Int) Texture2D {
	return self.ptr.API.OptionButton_get_item_icon(self, idx)
}
func (self classOptionButton) GetItemId(idx Int) Int {
	return self.ptr.API.OptionButton_get_item_id(self, idx)
}
func (self classOptionButton) GetItemIndex(id Int) Int {
	return self.ptr.API.OptionButton_get_item_index(self, id)
}
func (self classOptionButton) GetItemMetadata(idx Int) Variant {
	return self.ptr.API.OptionButton_get_item_metadata(self, idx)
}
func (self classOptionButton) GetItemTooltip(idx Int) String {
	return self.ptr.API.OptionButton_get_item_tooltip(self, idx)
}
func (self classOptionButton) IsItemDisabled(idx Int) bool {
	return self.ptr.API.OptionButton_is_item_disabled(self, idx)
}
func (self classOptionButton) IsItemSeparator(idx Int) bool {
	return self.ptr.API.OptionButton_is_item_separator(self, idx)
}
func (self classOptionButton) AddSeparator(text String) {
	self.ptr.API.OptionButton_add_separator(self, text)
}
func (self classOptionButton) Clear() {
	self.ptr.API.OptionButton_clear(self)
}
func (self classOptionButton) Select(idx Int) {
	self.ptr.API.OptionButton_select(self, idx)
}
func (self classOptionButton) GetSelected() Int {
	return self.ptr.API.OptionButton_get_selected(self)
}
func (self classOptionButton) GetSelectedId() Int {
	return self.ptr.API.OptionButton_get_selected_id(self)
}
func (self classOptionButton) GetSelectedMetadata() Variant {
	return self.ptr.API.OptionButton_get_selected_metadata(self)
}
func (self classOptionButton) RemoveItem(idx Int) {
	self.ptr.API.OptionButton_remove_item(self, idx)
}
func (self classOptionButton) GetPopup() PopupMenu {
	return self.ptr.API.OptionButton_get_popup(self)
}
func (self classOptionButton) ShowPopup() {
	self.ptr.API.OptionButton_show_popup(self)
}
func (self classOptionButton) SetItemCount(count Int) {
	self.ptr.API.OptionButton_set_item_count(self, count)
}
func (self classOptionButton) GetItemCount() Int {
	return self.ptr.API.OptionButton_get_item_count(self)
}
func (self classOptionButton) HasSelectableItems() bool {
	return self.ptr.API.OptionButton_has_selectable_items(self)
}
func (self classOptionButton) GetSelectableItem(from_last bool) Int {
	return self.ptr.API.OptionButton_get_selectable_item(self, from_last)
}
func (self classOptionButton) SetFitToLongestItem(fit bool) {
	self.ptr.API.OptionButton_set_fit_to_longest_item(self, fit)
}
func (self classOptionButton) IsFitToLongestItem() bool {
	return self.ptr.API.OptionButton_is_fit_to_longest_item(self)
}
func (self classOptionButton) SetAllowReselect(allow bool) {
	self.ptr.API.OptionButton_set_allow_reselect(self, allow)
}
func (self classOptionButton) GetAllowReselect() bool {
	return self.ptr.API.OptionButton_get_allow_reselect(self)
}
func (self classOptionButton) SetDisableShortcuts(disabled bool) {
	self.ptr.API.OptionButton_set_disable_shortcuts(self, disabled)
}

type classPCKPacker struct{ Class[classPCKPacker] }

func (self classPCKPacker) Super() RefCounted {
	var super RefCounted
	super.ptr = self.ptr
	return super
}

func (self classPCKPacker) RefCounted() RefCounted { return self.Super() }
func (self classPCKPacker) PckStart(pck_name String, alignment Int, key String, encrypt_directory bool) int64 {
	return self.ptr.API.PCKPacker_pck_start(self, pck_name, alignment, key, encrypt_directory)
}
func (self classPCKPacker) AddFile(pck_path String, source_path String, encrypt bool) int64 {
	return self.ptr.API.PCKPacker_add_file(self, pck_path, source_path, encrypt)
}
func (self classPCKPacker) Flush(verbose bool) int64 {
	return self.ptr.API.PCKPacker_flush(self, verbose)
}

type classPackedDataContainer struct {
	Class[classPackedDataContainer]
}

func (self classPackedDataContainer) Super() Resource {
	var super Resource
	super.ptr = self.ptr
	return super
}

func (self classPackedDataContainer) Resource() Resource { return self.Super() }
func (self classPackedDataContainer) Pack(value Variant) int64 {
	return self.ptr.API.PackedDataContainer_pack(self, value)
}
func (self classPackedDataContainer) Size() Int {
	return self.ptr.API.PackedDataContainer_size(self)
}

type classPackedDataContainerRef struct {
	Class[classPackedDataContainerRef]
}

func (self classPackedDataContainerRef) Super() RefCounted {
	var super RefCounted
	super.ptr = self.ptr
	return super
}

func (self classPackedDataContainerRef) RefCounted() RefCounted { return self.Super() }
func (self classPackedDataContainerRef) Size() Int {
	return self.ptr.API.PackedDataContainerRef_size(self)
}

type classPackedScene struct{ Class[classPackedScene] }

func (self classPackedScene) Super() Resource { var super Resource; super.ptr = self.ptr; return super }

func (self classPackedScene) Resource() Resource { return self.Super() }
func (self classPackedScene) Pack(path Node) int64 {
	return self.ptr.API.PackedScene_pack(self, path)
}
func (self classPackedScene) Instantiate(edit_state PackedSceneGenEditState) Node {
	return self.ptr.API.PackedScene_instantiate(self, edit_state)
}
func (self classPackedScene) CanInstantiate() bool {
	return self.ptr.API.PackedScene_can_instantiate(self)
}
func (self classPackedScene) GetState() SceneState {
	return self.ptr.API.PackedScene_get_state(self)
}

type classPacketPeer struct{ Class[classPacketPeer] }

func (self classPacketPeer) Super() RefCounted {
	var super RefCounted
	super.ptr = self.ptr
	return super
}

func (self classPacketPeer) RefCounted() RefCounted { return self.Super() }
func (self classPacketPeer) GetVar(allow_objects bool) Variant {
	return self.ptr.API.PacketPeer_get_var(self, allow_objects)
}
func (self classPacketPeer) PutVar(v Variant, full_objects bool) int64 {
	return self.ptr.API.PacketPeer_put_var(self, v, full_objects)
}
func (self classPacketPeer) GetPacket() PackedByteArray {
	return self.ptr.API.PacketPeer_get_packet(self)
}
func (self classPacketPeer) PutPacket(buffer PackedByteArray) int64 {
	return self.ptr.API.PacketPeer_put_packet(self, buffer)
}
func (self classPacketPeer) GetPacketError() int64 {
	return self.ptr.API.PacketPeer_get_packet_error(self)
}
func (self classPacketPeer) GetAvailablePacketCount() Int {
	return self.ptr.API.PacketPeer_get_available_packet_count(self)
}
func (self classPacketPeer) GetEncodeBufferMaxSize() Int {
	return self.ptr.API.PacketPeer_get_encode_buffer_max_size(self)
}
func (self classPacketPeer) SetEncodeBufferMaxSize(max_size Int) {
	self.ptr.API.PacketPeer_set_encode_buffer_max_size(self, max_size)
}

type classPacketPeerDTLS struct{ Class[classPacketPeerDTLS] }

func (self classPacketPeerDTLS) Super() PacketPeer {
	var super PacketPeer
	super.ptr = self.ptr
	return super
}

func (self classPacketPeerDTLS) PacketPeer() PacketPeer { return self.Super() }
func (self classPacketPeerDTLS) Poll() {
	self.ptr.API.PacketPeerDTLS_poll(self)
}
func (self classPacketPeerDTLS) ConnectToPeer(packet_peer PacketPeerUDP, hostname String, client_options TLSOptions) int64 {
	return self.ptr.API.PacketPeerDTLS_connect_to_peer(self, packet_peer, hostname, client_options)
}
func (self classPacketPeerDTLS) GetStatus() PacketPeerDTLSStatus {
	return self.ptr.API.PacketPeerDTLS_get_status(self)
}
func (self classPacketPeerDTLS) DisconnectFromPeer() {
	self.ptr.API.PacketPeerDTLS_disconnect_from_peer(self)
}

type classPacketPeerExtension struct {
	Class[classPacketPeerExtension]
}

func (self classPacketPeerExtension) Super() PacketPeer {
	var super PacketPeer
	super.ptr = self.ptr
	return super
}

func (self classPacketPeerExtension) PacketPeer() PacketPeer { return self.Super() }

type classPacketPeerStream struct{ Class[classPacketPeerStream] }

func (self classPacketPeerStream) Super() PacketPeer {
	var super PacketPeer
	super.ptr = self.ptr
	return super
}

func (self classPacketPeerStream) PacketPeer() PacketPeer { return self.Super() }
func (self classPacketPeerStream) SetStreamPeer(peer StreamPeer) {
	self.ptr.API.PacketPeerStream_set_stream_peer(self, peer)
}
func (self classPacketPeerStream) GetStreamPeer() StreamPeer {
	return self.ptr.API.PacketPeerStream_get_stream_peer(self)
}
func (self classPacketPeerStream) SetInputBufferMaxSize(max_size_bytes Int) {
	self.ptr.API.PacketPeerStream_set_input_buffer_max_size(self, max_size_bytes)
}
func (self classPacketPeerStream) SetOutputBufferMaxSize(max_size_bytes Int) {
	self.ptr.API.PacketPeerStream_set_output_buffer_max_size(self, max_size_bytes)
}
func (self classPacketPeerStream) GetInputBufferMaxSize() Int {
	return self.ptr.API.PacketPeerStream_get_input_buffer_max_size(self)
}
func (self classPacketPeerStream) GetOutputBufferMaxSize() Int {
	return self.ptr.API.PacketPeerStream_get_output_buffer_max_size(self)
}

type classPacketPeerUDP struct{ Class[classPacketPeerUDP] }

func (self classPacketPeerUDP) Super() PacketPeer {
	var super PacketPeer
	super.ptr = self.ptr
	return super
}

func (self classPacketPeerUDP) PacketPeer() PacketPeer { return self.Super() }
func (self classPacketPeerUDP) Bind(port Int, bind_address String, recv_buf_size Int) int64 {
	return self.ptr.API.PacketPeerUDP_bind(self, port, bind_address, recv_buf_size)
}
func (self classPacketPeerUDP) Close() {
	self.ptr.API.PacketPeerUDP_close(self)
}
func (self classPacketPeerUDP) Wait() int64 {
	return self.ptr.API.PacketPeerUDP_wait(self)
}
func (self classPacketPeerUDP) IsBound() bool {
	return self.ptr.API.PacketPeerUDP_is_bound(self)
}
func (self classPacketPeerUDP) ConnectToHost(host String, port Int) int64 {
	return self.ptr.API.PacketPeerUDP_connect_to_host(self, host, port)
}
func (self classPacketPeerUDP) IsSocketConnected() bool {
	return self.ptr.API.PacketPeerUDP_is_socket_connected(self)
}
func (self classPacketPeerUDP) GetPacketIp() String {
	return self.ptr.API.PacketPeerUDP_get_packet_ip(self)
}
func (self classPacketPeerUDP) GetPacketPort() Int {
	return self.ptr.API.PacketPeerUDP_get_packet_port(self)
}
func (self classPacketPeerUDP) GetLocalPort() Int {
	return self.ptr.API.PacketPeerUDP_get_local_port(self)
}
func (self classPacketPeerUDP) SetDestAddress(host String, port Int) int64 {
	return self.ptr.API.PacketPeerUDP_set_dest_address(self, host, port)
}
func (self classPacketPeerUDP) SetBroadcastEnabled(enabled bool) {
	self.ptr.API.PacketPeerUDP_set_broadcast_enabled(self, enabled)
}
func (self classPacketPeerUDP) JoinMulticastGroup(multicast_address String, interface_name String) int64 {
	return self.ptr.API.PacketPeerUDP_join_multicast_group(self, multicast_address, interface_name)
}
func (self classPacketPeerUDP) LeaveMulticastGroup(multicast_address String, interface_name String) int64 {
	return self.ptr.API.PacketPeerUDP_leave_multicast_group(self, multicast_address, interface_name)
}

type classPanel struct{ Class[classPanel] }

func (self classPanel) Super() Control { var super Control; super.ptr = self.ptr; return super }

func (self classPanel) Control() Control { return self.Super() }

type classPanelContainer struct{ Class[classPanelContainer] }

func (self classPanelContainer) Super() Container {
	var super Container
	super.ptr = self.ptr
	return super
}

func (self classPanelContainer) Container() Container { return self.Super() }

type classPanoramaSkyMaterial struct {
	Class[classPanoramaSkyMaterial]
}

func (self classPanoramaSkyMaterial) Super() Material {
	var super Material
	super.ptr = self.ptr
	return super
}

func (self classPanoramaSkyMaterial) Material() Material { return self.Super() }
func (self classPanoramaSkyMaterial) SetPanorama(texture Texture2D) {
	self.ptr.API.PanoramaSkyMaterial_set_panorama(self, texture)
}
func (self classPanoramaSkyMaterial) GetPanorama() Texture2D {
	return self.ptr.API.PanoramaSkyMaterial_get_panorama(self)
}
func (self classPanoramaSkyMaterial) SetFilteringEnabled(enabled bool) {
	self.ptr.API.PanoramaSkyMaterial_set_filtering_enabled(self, enabled)
}
func (self classPanoramaSkyMaterial) IsFilteringEnabled() bool {
	return self.ptr.API.PanoramaSkyMaterial_is_filtering_enabled(self)
}
func (self classPanoramaSkyMaterial) SetEnergyMultiplier(multiplier Float) {
	self.ptr.API.PanoramaSkyMaterial_set_energy_multiplier(self, multiplier)
}
func (self classPanoramaSkyMaterial) GetEnergyMultiplier() Float {
	return self.ptr.API.PanoramaSkyMaterial_get_energy_multiplier(self)
}

type classParallaxBackground struct{ Class[classParallaxBackground] }

func (self classParallaxBackground) Super() CanvasLayer {
	var super CanvasLayer
	super.ptr = self.ptr
	return super
}

func (self classParallaxBackground) CanvasLayer() CanvasLayer { return self.Super() }
func (self classParallaxBackground) SetScrollOffset(offset Vector2) {
	self.ptr.API.ParallaxBackground_set_scroll_offset(self, offset)
}
func (self classParallaxBackground) GetScrollOffset() Vector2 {
	return self.ptr.API.ParallaxBackground_get_scroll_offset(self)
}
func (self classParallaxBackground) SetScrollBaseOffset(offset Vector2) {
	self.ptr.API.ParallaxBackground_set_scroll_base_offset(self, offset)
}
func (self classParallaxBackground) GetScrollBaseOffset() Vector2 {
	return self.ptr.API.ParallaxBackground_get_scroll_base_offset(self)
}
func (self classParallaxBackground) SetScrollBaseScale(scale Vector2) {
	self.ptr.API.ParallaxBackground_set_scroll_base_scale(self, scale)
}
func (self classParallaxBackground) GetScrollBaseScale() Vector2 {
	return self.ptr.API.ParallaxBackground_get_scroll_base_scale(self)
}
func (self classParallaxBackground) SetLimitBegin(offset Vector2) {
	self.ptr.API.ParallaxBackground_set_limit_begin(self, offset)
}
func (self classParallaxBackground) GetLimitBegin() Vector2 {
	return self.ptr.API.ParallaxBackground_get_limit_begin(self)
}
func (self classParallaxBackground) SetLimitEnd(offset Vector2) {
	self.ptr.API.ParallaxBackground_set_limit_end(self, offset)
}
func (self classParallaxBackground) GetLimitEnd() Vector2 {
	return self.ptr.API.ParallaxBackground_get_limit_end(self)
}
func (self classParallaxBackground) SetIgnoreCameraZoom(ignore bool) {
	self.ptr.API.ParallaxBackground_set_ignore_camera_zoom(self, ignore)
}
func (self classParallaxBackground) IsIgnoreCameraZoom() bool {
	return self.ptr.API.ParallaxBackground_is_ignore_camera_zoom(self)
}

type classParallaxLayer struct{ Class[classParallaxLayer] }

func (self classParallaxLayer) Super() Node2D { var super Node2D; super.ptr = self.ptr; return super }

func (self classParallaxLayer) Node2D() Node2D { return self.Super() }
func (self classParallaxLayer) SetMotionScale(scale Vector2) {
	self.ptr.API.ParallaxLayer_set_motion_scale(self, scale)
}
func (self classParallaxLayer) GetMotionScale() Vector2 {
	return self.ptr.API.ParallaxLayer_get_motion_scale(self)
}
func (self classParallaxLayer) SetMotionOffset(offset Vector2) {
	self.ptr.API.ParallaxLayer_set_motion_offset(self, offset)
}
func (self classParallaxLayer) GetMotionOffset() Vector2 {
	return self.ptr.API.ParallaxLayer_get_motion_offset(self)
}
func (self classParallaxLayer) SetMirroring(mirror Vector2) {
	self.ptr.API.ParallaxLayer_set_mirroring(self, mirror)
}
func (self classParallaxLayer) GetMirroring() Vector2 {
	return self.ptr.API.ParallaxLayer_get_mirroring(self)
}

type classParticleProcessMaterial struct {
	Class[classParticleProcessMaterial]
}

func (self classParticleProcessMaterial) Super() Material {
	var super Material
	super.ptr = self.ptr
	return super
}

func (self classParticleProcessMaterial) Material() Material { return self.Super() }
func (self classParticleProcessMaterial) SetDirection(degrees Vector3) {
	self.ptr.API.ParticleProcessMaterial_set_direction(self, degrees)
}
func (self classParticleProcessMaterial) GetDirection() Vector3 {
	return self.ptr.API.ParticleProcessMaterial_get_direction(self)
}
func (self classParticleProcessMaterial) SetInheritVelocityRatio(ratio Float) {
	self.ptr.API.ParticleProcessMaterial_set_inherit_velocity_ratio(self, ratio)
}
func (self classParticleProcessMaterial) GetInheritVelocityRatio() Float {
	return self.ptr.API.ParticleProcessMaterial_get_inherit_velocity_ratio(self)
}
func (self classParticleProcessMaterial) SetSpread(degrees Float) {
	self.ptr.API.ParticleProcessMaterial_set_spread(self, degrees)
}
func (self classParticleProcessMaterial) GetSpread() Float {
	return self.ptr.API.ParticleProcessMaterial_get_spread(self)
}
func (self classParticleProcessMaterial) SetFlatness(amount Float) {
	self.ptr.API.ParticleProcessMaterial_set_flatness(self, amount)
}
func (self classParticleProcessMaterial) GetFlatness() Float {
	return self.ptr.API.ParticleProcessMaterial_get_flatness(self)
}
func (self classParticleProcessMaterial) SetParam(param ParticleProcessMaterialParameter, value Vector2) {
	self.ptr.API.ParticleProcessMaterial_set_param(self, param, value)
}
func (self classParticleProcessMaterial) GetParam(param ParticleProcessMaterialParameter) Vector2 {
	return self.ptr.API.ParticleProcessMaterial_get_param(self, param)
}
func (self classParticleProcessMaterial) SetParamMin(param ParticleProcessMaterialParameter, value Float) {
	self.ptr.API.ParticleProcessMaterial_set_param_min(self, param, value)
}
func (self classParticleProcessMaterial) GetParamMin(param ParticleProcessMaterialParameter) Float {
	return self.ptr.API.ParticleProcessMaterial_get_param_min(self, param)
}
func (self classParticleProcessMaterial) SetParamMax(param ParticleProcessMaterialParameter, value Float) {
	self.ptr.API.ParticleProcessMaterial_set_param_max(self, param, value)
}
func (self classParticleProcessMaterial) GetParamMax(param ParticleProcessMaterialParameter) Float {
	return self.ptr.API.ParticleProcessMaterial_get_param_max(self, param)
}
func (self classParticleProcessMaterial) SetParamTexture(param ParticleProcessMaterialParameter, texture Texture2D) {
	self.ptr.API.ParticleProcessMaterial_set_param_texture(self, param, texture)
}
func (self classParticleProcessMaterial) GetParamTexture(param ParticleProcessMaterialParameter) Texture2D {
	return self.ptr.API.ParticleProcessMaterial_get_param_texture(self, param)
}
func (self classParticleProcessMaterial) SetColor(color Color) {
	self.ptr.API.ParticleProcessMaterial_set_color(self, color)
}
func (self classParticleProcessMaterial) GetColor() Color {
	return self.ptr.API.ParticleProcessMaterial_get_color(self)
}
func (self classParticleProcessMaterial) SetColorRamp(ramp Texture2D) {
	self.ptr.API.ParticleProcessMaterial_set_color_ramp(self, ramp)
}
func (self classParticleProcessMaterial) GetColorRamp() Texture2D {
	return self.ptr.API.ParticleProcessMaterial_get_color_ramp(self)
}
func (self classParticleProcessMaterial) SetAlphaCurve(curve Texture2D) {
	self.ptr.API.ParticleProcessMaterial_set_alpha_curve(self, curve)
}
func (self classParticleProcessMaterial) GetAlphaCurve() Texture2D {
	return self.ptr.API.ParticleProcessMaterial_get_alpha_curve(self)
}
func (self classParticleProcessMaterial) SetEmissionCurve(curve Texture2D) {
	self.ptr.API.ParticleProcessMaterial_set_emission_curve(self, curve)
}
func (self classParticleProcessMaterial) GetEmissionCurve() Texture2D {
	return self.ptr.API.ParticleProcessMaterial_get_emission_curve(self)
}
func (self classParticleProcessMaterial) SetColorInitialRamp(ramp Texture2D) {
	self.ptr.API.ParticleProcessMaterial_set_color_initial_ramp(self, ramp)
}
func (self classParticleProcessMaterial) GetColorInitialRamp() Texture2D {
	return self.ptr.API.ParticleProcessMaterial_get_color_initial_ramp(self)
}
func (self classParticleProcessMaterial) SetVelocityLimitCurve(curve Texture2D) {
	self.ptr.API.ParticleProcessMaterial_set_velocity_limit_curve(self, curve)
}
func (self classParticleProcessMaterial) GetVelocityLimitCurve() Texture2D {
	return self.ptr.API.ParticleProcessMaterial_get_velocity_limit_curve(self)
}
func (self classParticleProcessMaterial) SetParticleFlag(particle_flag ParticleProcessMaterialParticleFlags, enable bool) {
	self.ptr.API.ParticleProcessMaterial_set_particle_flag(self, particle_flag, enable)
}
func (self classParticleProcessMaterial) GetParticleFlag(particle_flag ParticleProcessMaterialParticleFlags) bool {
	return self.ptr.API.ParticleProcessMaterial_get_particle_flag(self, particle_flag)
}
func (self classParticleProcessMaterial) SetVelocityPivot(pivot Vector3) {
	self.ptr.API.ParticleProcessMaterial_set_velocity_pivot(self, pivot)
}
func (self classParticleProcessMaterial) GetVelocityPivot() Vector3 {
	return self.ptr.API.ParticleProcessMaterial_get_velocity_pivot(self)
}
func (self classParticleProcessMaterial) SetEmissionShape(shape ParticleProcessMaterialEmissionShape) {
	self.ptr.API.ParticleProcessMaterial_set_emission_shape(self, shape)
}
func (self classParticleProcessMaterial) GetEmissionShape() ParticleProcessMaterialEmissionShape {
	return self.ptr.API.ParticleProcessMaterial_get_emission_shape(self)
}
func (self classParticleProcessMaterial) SetEmissionSphereRadius(radius Float) {
	self.ptr.API.ParticleProcessMaterial_set_emission_sphere_radius(self, radius)
}
func (self classParticleProcessMaterial) GetEmissionSphereRadius() Float {
	return self.ptr.API.ParticleProcessMaterial_get_emission_sphere_radius(self)
}
func (self classParticleProcessMaterial) SetEmissionBoxExtents(extents Vector3) {
	self.ptr.API.ParticleProcessMaterial_set_emission_box_extents(self, extents)
}
func (self classParticleProcessMaterial) GetEmissionBoxExtents() Vector3 {
	return self.ptr.API.ParticleProcessMaterial_get_emission_box_extents(self)
}
func (self classParticleProcessMaterial) SetEmissionPointTexture(texture Texture2D) {
	self.ptr.API.ParticleProcessMaterial_set_emission_point_texture(self, texture)
}
func (self classParticleProcessMaterial) GetEmissionPointTexture() Texture2D {
	return self.ptr.API.ParticleProcessMaterial_get_emission_point_texture(self)
}
func (self classParticleProcessMaterial) SetEmissionNormalTexture(texture Texture2D) {
	self.ptr.API.ParticleProcessMaterial_set_emission_normal_texture(self, texture)
}
func (self classParticleProcessMaterial) GetEmissionNormalTexture() Texture2D {
	return self.ptr.API.ParticleProcessMaterial_get_emission_normal_texture(self)
}
func (self classParticleProcessMaterial) SetEmissionColorTexture(texture Texture2D) {
	self.ptr.API.ParticleProcessMaterial_set_emission_color_texture(self, texture)
}
func (self classParticleProcessMaterial) GetEmissionColorTexture() Texture2D {
	return self.ptr.API.ParticleProcessMaterial_get_emission_color_texture(self)
}
func (self classParticleProcessMaterial) SetEmissionPointCount(point_count Int) {
	self.ptr.API.ParticleProcessMaterial_set_emission_point_count(self, point_count)
}
func (self classParticleProcessMaterial) GetEmissionPointCount() Int {
	return self.ptr.API.ParticleProcessMaterial_get_emission_point_count(self)
}
func (self classParticleProcessMaterial) SetEmissionRingAxis(axis Vector3) {
	self.ptr.API.ParticleProcessMaterial_set_emission_ring_axis(self, axis)
}
func (self classParticleProcessMaterial) GetEmissionRingAxis() Vector3 {
	return self.ptr.API.ParticleProcessMaterial_get_emission_ring_axis(self)
}
func (self classParticleProcessMaterial) SetEmissionRingHeight(height Float) {
	self.ptr.API.ParticleProcessMaterial_set_emission_ring_height(self, height)
}
func (self classParticleProcessMaterial) GetEmissionRingHeight() Float {
	return self.ptr.API.ParticleProcessMaterial_get_emission_ring_height(self)
}
func (self classParticleProcessMaterial) SetEmissionRingRadius(radius Float) {
	self.ptr.API.ParticleProcessMaterial_set_emission_ring_radius(self, radius)
}
func (self classParticleProcessMaterial) GetEmissionRingRadius() Float {
	return self.ptr.API.ParticleProcessMaterial_get_emission_ring_radius(self)
}
func (self classParticleProcessMaterial) SetEmissionRingInnerRadius(inner_radius Float) {
	self.ptr.API.ParticleProcessMaterial_set_emission_ring_inner_radius(self, inner_radius)
}
func (self classParticleProcessMaterial) GetEmissionRingInnerRadius() Float {
	return self.ptr.API.ParticleProcessMaterial_get_emission_ring_inner_radius(self)
}
func (self classParticleProcessMaterial) SetEmissionShapeOffset(emission_shape_offset Vector3) {
	self.ptr.API.ParticleProcessMaterial_set_emission_shape_offset(self, emission_shape_offset)
}
func (self classParticleProcessMaterial) GetEmissionShapeOffset() Vector3 {
	return self.ptr.API.ParticleProcessMaterial_get_emission_shape_offset(self)
}
func (self classParticleProcessMaterial) SetEmissionShapeScale(emission_shape_scale Vector3) {
	self.ptr.API.ParticleProcessMaterial_set_emission_shape_scale(self, emission_shape_scale)
}
func (self classParticleProcessMaterial) GetEmissionShapeScale() Vector3 {
	return self.ptr.API.ParticleProcessMaterial_get_emission_shape_scale(self)
}
func (self classParticleProcessMaterial) GetTurbulenceEnabled() bool {
	return self.ptr.API.ParticleProcessMaterial_get_turbulence_enabled(self)
}
func (self classParticleProcessMaterial) SetTurbulenceEnabled(turbulence_enabled bool) {
	self.ptr.API.ParticleProcessMaterial_set_turbulence_enabled(self, turbulence_enabled)
}
func (self classParticleProcessMaterial) GetTurbulenceNoiseStrength() Float {
	return self.ptr.API.ParticleProcessMaterial_get_turbulence_noise_strength(self)
}
func (self classParticleProcessMaterial) SetTurbulenceNoiseStrength(turbulence_noise_strength Float) {
	self.ptr.API.ParticleProcessMaterial_set_turbulence_noise_strength(self, turbulence_noise_strength)
}
func (self classParticleProcessMaterial) GetTurbulenceNoiseScale() Float {
	return self.ptr.API.ParticleProcessMaterial_get_turbulence_noise_scale(self)
}
func (self classParticleProcessMaterial) SetTurbulenceNoiseScale(turbulence_noise_scale Float) {
	self.ptr.API.ParticleProcessMaterial_set_turbulence_noise_scale(self, turbulence_noise_scale)
}
func (self classParticleProcessMaterial) GetTurbulenceNoiseSpeedRandom() Float {
	return self.ptr.API.ParticleProcessMaterial_get_turbulence_noise_speed_random(self)
}
func (self classParticleProcessMaterial) SetTurbulenceNoiseSpeedRandom(turbulence_noise_speed_random Float) {
	self.ptr.API.ParticleProcessMaterial_set_turbulence_noise_speed_random(self, turbulence_noise_speed_random)
}
func (self classParticleProcessMaterial) GetTurbulenceNoiseSpeed() Vector3 {
	return self.ptr.API.ParticleProcessMaterial_get_turbulence_noise_speed(self)
}
func (self classParticleProcessMaterial) SetTurbulenceNoiseSpeed(turbulence_noise_speed Vector3) {
	self.ptr.API.ParticleProcessMaterial_set_turbulence_noise_speed(self, turbulence_noise_speed)
}
func (self classParticleProcessMaterial) GetGravity() Vector3 {
	return self.ptr.API.ParticleProcessMaterial_get_gravity(self)
}
func (self classParticleProcessMaterial) SetGravity(accel_vec Vector3) {
	self.ptr.API.ParticleProcessMaterial_set_gravity(self, accel_vec)
}
func (self classParticleProcessMaterial) SetLifetimeRandomness(randomness Float) {
	self.ptr.API.ParticleProcessMaterial_set_lifetime_randomness(self, randomness)
}
func (self classParticleProcessMaterial) GetLifetimeRandomness() Float {
	return self.ptr.API.ParticleProcessMaterial_get_lifetime_randomness(self)
}
func (self classParticleProcessMaterial) GetSubEmitterMode() ParticleProcessMaterialSubEmitterMode {
	return self.ptr.API.ParticleProcessMaterial_get_sub_emitter_mode(self)
}
func (self classParticleProcessMaterial) SetSubEmitterMode(mode ParticleProcessMaterialSubEmitterMode) {
	self.ptr.API.ParticleProcessMaterial_set_sub_emitter_mode(self, mode)
}
func (self classParticleProcessMaterial) GetSubEmitterFrequency() Float {
	return self.ptr.API.ParticleProcessMaterial_get_sub_emitter_frequency(self)
}
func (self classParticleProcessMaterial) SetSubEmitterFrequency(hz Float) {
	self.ptr.API.ParticleProcessMaterial_set_sub_emitter_frequency(self, hz)
}
func (self classParticleProcessMaterial) GetSubEmitterAmountAtEnd() Int {
	return self.ptr.API.ParticleProcessMaterial_get_sub_emitter_amount_at_end(self)
}
func (self classParticleProcessMaterial) SetSubEmitterAmountAtEnd(amount Int) {
	self.ptr.API.ParticleProcessMaterial_set_sub_emitter_amount_at_end(self, amount)
}
func (self classParticleProcessMaterial) GetSubEmitterAmountAtCollision() Int {
	return self.ptr.API.ParticleProcessMaterial_get_sub_emitter_amount_at_collision(self)
}
func (self classParticleProcessMaterial) SetSubEmitterAmountAtCollision(amount Int) {
	self.ptr.API.ParticleProcessMaterial_set_sub_emitter_amount_at_collision(self, amount)
}
func (self classParticleProcessMaterial) GetSubEmitterKeepVelocity() bool {
	return self.ptr.API.ParticleProcessMaterial_get_sub_emitter_keep_velocity(self)
}
func (self classParticleProcessMaterial) SetSubEmitterKeepVelocity(enable bool) {
	self.ptr.API.ParticleProcessMaterial_set_sub_emitter_keep_velocity(self, enable)
}
func (self classParticleProcessMaterial) SetAttractorInteractionEnabled(enabled bool) {
	self.ptr.API.ParticleProcessMaterial_set_attractor_interaction_enabled(self, enabled)
}
func (self classParticleProcessMaterial) IsAttractorInteractionEnabled() bool {
	return self.ptr.API.ParticleProcessMaterial_is_attractor_interaction_enabled(self)
}
func (self classParticleProcessMaterial) SetCollisionMode(mode ParticleProcessMaterialCollisionMode) {
	self.ptr.API.ParticleProcessMaterial_set_collision_mode(self, mode)
}
func (self classParticleProcessMaterial) GetCollisionMode() ParticleProcessMaterialCollisionMode {
	return self.ptr.API.ParticleProcessMaterial_get_collision_mode(self)
}
func (self classParticleProcessMaterial) SetCollisionUseScale(radius bool) {
	self.ptr.API.ParticleProcessMaterial_set_collision_use_scale(self, radius)
}
func (self classParticleProcessMaterial) IsCollisionUsingScale() bool {
	return self.ptr.API.ParticleProcessMaterial_is_collision_using_scale(self)
}
func (self classParticleProcessMaterial) SetCollisionFriction(friction Float) {
	self.ptr.API.ParticleProcessMaterial_set_collision_friction(self, friction)
}
func (self classParticleProcessMaterial) GetCollisionFriction() Float {
	return self.ptr.API.ParticleProcessMaterial_get_collision_friction(self)
}
func (self classParticleProcessMaterial) SetCollisionBounce(bounce Float) {
	self.ptr.API.ParticleProcessMaterial_set_collision_bounce(self, bounce)
}
func (self classParticleProcessMaterial) GetCollisionBounce() Float {
	return self.ptr.API.ParticleProcessMaterial_get_collision_bounce(self)
}

type classPath2D struct{ Class[classPath2D] }

func (self classPath2D) Super() Node2D { var super Node2D; super.ptr = self.ptr; return super }

func (self classPath2D) Node2D() Node2D { return self.Super() }
func (self classPath2D) SetCurve(curve Curve2D) {
	self.ptr.API.Path2D_set_curve(self, curve)
}
func (self classPath2D) GetCurve() Curve2D {
	return self.ptr.API.Path2D_get_curve(self)
}

type classPath3D struct{ Class[classPath3D] }

func (self classPath3D) Super() Node3D { var super Node3D; super.ptr = self.ptr; return super }

func (self classPath3D) Node3D() Node3D { return self.Super() }
func (self classPath3D) SetCurve(curve Curve3D) {
	self.ptr.API.Path3D_set_curve(self, curve)
}
func (self classPath3D) GetCurve() Curve3D {
	return self.ptr.API.Path3D_get_curve(self)
}

type classPathFollow2D struct{ Class[classPathFollow2D] }

func (self classPathFollow2D) Super() Node2D { var super Node2D; super.ptr = self.ptr; return super }

func (self classPathFollow2D) Node2D() Node2D { return self.Super() }
func (self classPathFollow2D) SetProgress(progress Float) {
	self.ptr.API.PathFollow2D_set_progress(self, progress)
}
func (self classPathFollow2D) GetProgress() Float {
	return self.ptr.API.PathFollow2D_get_progress(self)
}
func (self classPathFollow2D) SetHOffset(h_offset Float) {
	self.ptr.API.PathFollow2D_set_h_offset(self, h_offset)
}
func (self classPathFollow2D) GetHOffset() Float {
	return self.ptr.API.PathFollow2D_get_h_offset(self)
}
func (self classPathFollow2D) SetVOffset(v_offset Float) {
	self.ptr.API.PathFollow2D_set_v_offset(self, v_offset)
}
func (self classPathFollow2D) GetVOffset() Float {
	return self.ptr.API.PathFollow2D_get_v_offset(self)
}
func (self classPathFollow2D) SetProgressRatio(ratio Float) {
	self.ptr.API.PathFollow2D_set_progress_ratio(self, ratio)
}
func (self classPathFollow2D) GetProgressRatio() Float {
	return self.ptr.API.PathFollow2D_get_progress_ratio(self)
}
func (self classPathFollow2D) SetRotates(enabled bool) {
	self.ptr.API.PathFollow2D_set_rotates(self, enabled)
}
func (self classPathFollow2D) IsRotating() bool {
	return self.ptr.API.PathFollow2D_is_rotating(self)
}
func (self classPathFollow2D) SetCubicInterpolation(enabled bool) {
	self.ptr.API.PathFollow2D_set_cubic_interpolation(self, enabled)
}
func (self classPathFollow2D) GetCubicInterpolation() bool {
	return self.ptr.API.PathFollow2D_get_cubic_interpolation(self)
}
func (self classPathFollow2D) SetLoop(loop bool) {
	self.ptr.API.PathFollow2D_set_loop(self, loop)
}
func (self classPathFollow2D) HasLoop() bool {
	return self.ptr.API.PathFollow2D_has_loop(self)
}

type classPathFollow3D struct{ Class[classPathFollow3D] }

func (self classPathFollow3D) Super() Node3D { var super Node3D; super.ptr = self.ptr; return super }

func (self classPathFollow3D) Node3D() Node3D { return self.Super() }
func (self classPathFollow3D) SetProgress(progress Float) {
	self.ptr.API.PathFollow3D_set_progress(self, progress)
}
func (self classPathFollow3D) GetProgress() Float {
	return self.ptr.API.PathFollow3D_get_progress(self)
}
func (self classPathFollow3D) SetHOffset(h_offset Float) {
	self.ptr.API.PathFollow3D_set_h_offset(self, h_offset)
}
func (self classPathFollow3D) GetHOffset() Float {
	return self.ptr.API.PathFollow3D_get_h_offset(self)
}
func (self classPathFollow3D) SetVOffset(v_offset Float) {
	self.ptr.API.PathFollow3D_set_v_offset(self, v_offset)
}
func (self classPathFollow3D) GetVOffset() Float {
	return self.ptr.API.PathFollow3D_get_v_offset(self)
}
func (self classPathFollow3D) SetProgressRatio(ratio Float) {
	self.ptr.API.PathFollow3D_set_progress_ratio(self, ratio)
}
func (self classPathFollow3D) GetProgressRatio() Float {
	return self.ptr.API.PathFollow3D_get_progress_ratio(self)
}
func (self classPathFollow3D) SetRotationMode(rotation_mode PathFollow3DRotationMode) {
	self.ptr.API.PathFollow3D_set_rotation_mode(self, rotation_mode)
}
func (self classPathFollow3D) GetRotationMode() PathFollow3DRotationMode {
	return self.ptr.API.PathFollow3D_get_rotation_mode(self)
}
func (self classPathFollow3D) SetCubicInterpolation(enabled bool) {
	self.ptr.API.PathFollow3D_set_cubic_interpolation(self, enabled)
}
func (self classPathFollow3D) GetCubicInterpolation() bool {
	return self.ptr.API.PathFollow3D_get_cubic_interpolation(self)
}
func (self classPathFollow3D) SetUseModelFront(enabled bool) {
	self.ptr.API.PathFollow3D_set_use_model_front(self, enabled)
}
func (self classPathFollow3D) IsUsingModelFront() bool {
	return self.ptr.API.PathFollow3D_is_using_model_front(self)
}
func (self classPathFollow3D) SetLoop(loop bool) {
	self.ptr.API.PathFollow3D_set_loop(self, loop)
}
func (self classPathFollow3D) HasLoop() bool {
	return self.ptr.API.PathFollow3D_has_loop(self)
}
func (self classPathFollow3D) SetTiltEnabled(enabled bool) {
	self.ptr.API.PathFollow3D_set_tilt_enabled(self, enabled)
}
func (self classPathFollow3D) IsTiltEnabled() bool {
	return self.ptr.API.PathFollow3D_is_tilt_enabled(self)
}
func (self classPathFollow3D) CorrectPosture(transform Transform3D, rotation_mode PathFollow3DRotationMode) Transform3D {
	return self.ptr.API.PathFollow3D_correct_posture(self, transform, rotation_mode)
}

type classPerformance struct{ Class[classPerformance] }

func (self classPerformance) Super() Object { var super Object; super.ptr = self.ptr; return super }

func (self classPerformance) Object() Object { return self.Super() }

func (self classPerformance) isSingleton() {}
func (self classPerformance) GetMonitor(monitor PerformanceMonitor) Float {
	return self.ptr.API.Performance_get_monitor(self, monitor)
}
func (self classPerformance) AddCustomMonitor(id StringName, callable Callable, arguments Array) {
	self.ptr.API.Performance_add_custom_monitor(self, id, callable, arguments)
}
func (self classPerformance) RemoveCustomMonitor(id StringName) {
	self.ptr.API.Performance_remove_custom_monitor(self, id)
}
func (self classPerformance) HasCustomMonitor(id StringName) bool {
	return self.ptr.API.Performance_has_custom_monitor(self, id)
}
func (self classPerformance) GetCustomMonitor(id StringName) Variant {
	return self.ptr.API.Performance_get_custom_monitor(self, id)
}
func (self classPerformance) GetMonitorModificationTime() Int {
	return self.ptr.API.Performance_get_monitor_modification_time(self)
}
func (self classPerformance) GetCustomMonitorNames() ArrayOf[StringName] {
	return self.ptr.API.Performance_get_custom_monitor_names(self)
}

type classPhysicalBone2D struct{ Class[classPhysicalBone2D] }

func (self classPhysicalBone2D) Super() RigidBody2D {
	var super RigidBody2D
	super.ptr = self.ptr
	return super
}

func (self classPhysicalBone2D) RigidBody2D() RigidBody2D { return self.Super() }
func (self classPhysicalBone2D) GetJoint() Joint2D {
	return self.ptr.API.PhysicalBone2D_get_joint(self)
}
func (self classPhysicalBone2D) GetAutoConfigureJoint() bool {
	return self.ptr.API.PhysicalBone2D_get_auto_configure_joint(self)
}
func (self classPhysicalBone2D) SetAutoConfigureJoint(auto_configure_joint bool) {
	self.ptr.API.PhysicalBone2D_set_auto_configure_joint(self, auto_configure_joint)
}
func (self classPhysicalBone2D) SetSimulatePhysics(simulate_physics bool) {
	self.ptr.API.PhysicalBone2D_set_simulate_physics(self, simulate_physics)
}
func (self classPhysicalBone2D) GetSimulatePhysics() bool {
	return self.ptr.API.PhysicalBone2D_get_simulate_physics(self)
}
func (self classPhysicalBone2D) IsSimulatingPhysics() bool {
	return self.ptr.API.PhysicalBone2D_is_simulating_physics(self)
}
func (self classPhysicalBone2D) SetBone2dNodepath(nodepath NodePath) {
	self.ptr.API.PhysicalBone2D_set_bone2d_nodepath(self, nodepath)
}
func (self classPhysicalBone2D) GetBone2dNodepath() NodePath {
	return self.ptr.API.PhysicalBone2D_get_bone2d_nodepath(self)
}
func (self classPhysicalBone2D) SetBone2dIndex(bone_index Int) {
	self.ptr.API.PhysicalBone2D_set_bone2d_index(self, bone_index)
}
func (self classPhysicalBone2D) GetBone2dIndex() Int {
	return self.ptr.API.PhysicalBone2D_get_bone2d_index(self)
}
func (self classPhysicalBone2D) SetFollowBoneWhenSimulating(follow_bone bool) {
	self.ptr.API.PhysicalBone2D_set_follow_bone_when_simulating(self, follow_bone)
}
func (self classPhysicalBone2D) GetFollowBoneWhenSimulating() bool {
	return self.ptr.API.PhysicalBone2D_get_follow_bone_when_simulating(self)
}

type classPhysicalBone3D struct{ Class[classPhysicalBone3D] }

func (self classPhysicalBone3D) Super() PhysicsBody3D {
	var super PhysicsBody3D
	super.ptr = self.ptr
	return super
}

func (self classPhysicalBone3D) PhysicsBody3D() PhysicsBody3D { return self.Super() }
func (self classPhysicalBone3D) ApplyCentralImpulse(impulse Vector3) {
	self.ptr.API.PhysicalBone3D_apply_central_impulse(self, impulse)
}
func (self classPhysicalBone3D) ApplyImpulse(impulse Vector3, position Vector3) {
	self.ptr.API.PhysicalBone3D_apply_impulse(self, impulse, position)
}
func (self classPhysicalBone3D) SetJointType(joint_type PhysicalBone3DJointType) {
	self.ptr.API.PhysicalBone3D_set_joint_type(self, joint_type)
}
func (self classPhysicalBone3D) GetJointType() PhysicalBone3DJointType {
	return self.ptr.API.PhysicalBone3D_get_joint_type(self)
}
func (self classPhysicalBone3D) SetJointOffset(offset Transform3D) {
	self.ptr.API.PhysicalBone3D_set_joint_offset(self, offset)
}
func (self classPhysicalBone3D) GetJointOffset() Transform3D {
	return self.ptr.API.PhysicalBone3D_get_joint_offset(self)
}
func (self classPhysicalBone3D) SetJointRotation(euler Vector3) {
	self.ptr.API.PhysicalBone3D_set_joint_rotation(self, euler)
}
func (self classPhysicalBone3D) GetJointRotation() Vector3 {
	return self.ptr.API.PhysicalBone3D_get_joint_rotation(self)
}
func (self classPhysicalBone3D) SetBodyOffset(offset Transform3D) {
	self.ptr.API.PhysicalBone3D_set_body_offset(self, offset)
}
func (self classPhysicalBone3D) GetBodyOffset() Transform3D {
	return self.ptr.API.PhysicalBone3D_get_body_offset(self)
}
func (self classPhysicalBone3D) GetSimulatePhysics() bool {
	return self.ptr.API.PhysicalBone3D_get_simulate_physics(self)
}
func (self classPhysicalBone3D) IsSimulatingPhysics() bool {
	return self.ptr.API.PhysicalBone3D_is_simulating_physics(self)
}
func (self classPhysicalBone3D) GetBoneId() Int {
	return self.ptr.API.PhysicalBone3D_get_bone_id(self)
}
func (self classPhysicalBone3D) SetMass(mass Float) {
	self.ptr.API.PhysicalBone3D_set_mass(self, mass)
}
func (self classPhysicalBone3D) GetMass() Float {
	return self.ptr.API.PhysicalBone3D_get_mass(self)
}
func (self classPhysicalBone3D) SetFriction(friction Float) {
	self.ptr.API.PhysicalBone3D_set_friction(self, friction)
}
func (self classPhysicalBone3D) GetFriction() Float {
	return self.ptr.API.PhysicalBone3D_get_friction(self)
}
func (self classPhysicalBone3D) SetBounce(bounce Float) {
	self.ptr.API.PhysicalBone3D_set_bounce(self, bounce)
}
func (self classPhysicalBone3D) GetBounce() Float {
	return self.ptr.API.PhysicalBone3D_get_bounce(self)
}
func (self classPhysicalBone3D) SetGravityScale(gravity_scale Float) {
	self.ptr.API.PhysicalBone3D_set_gravity_scale(self, gravity_scale)
}
func (self classPhysicalBone3D) GetGravityScale() Float {
	return self.ptr.API.PhysicalBone3D_get_gravity_scale(self)
}
func (self classPhysicalBone3D) SetLinearDampMode(linear_damp_mode PhysicalBone3DDampMode) {
	self.ptr.API.PhysicalBone3D_set_linear_damp_mode(self, linear_damp_mode)
}
func (self classPhysicalBone3D) GetLinearDampMode() PhysicalBone3DDampMode {
	return self.ptr.API.PhysicalBone3D_get_linear_damp_mode(self)
}
func (self classPhysicalBone3D) SetAngularDampMode(angular_damp_mode PhysicalBone3DDampMode) {
	self.ptr.API.PhysicalBone3D_set_angular_damp_mode(self, angular_damp_mode)
}
func (self classPhysicalBone3D) GetAngularDampMode() PhysicalBone3DDampMode {
	return self.ptr.API.PhysicalBone3D_get_angular_damp_mode(self)
}
func (self classPhysicalBone3D) SetLinearDamp(linear_damp Float) {
	self.ptr.API.PhysicalBone3D_set_linear_damp(self, linear_damp)
}
func (self classPhysicalBone3D) GetLinearDamp() Float {
	return self.ptr.API.PhysicalBone3D_get_linear_damp(self)
}
func (self classPhysicalBone3D) SetAngularDamp(angular_damp Float) {
	self.ptr.API.PhysicalBone3D_set_angular_damp(self, angular_damp)
}
func (self classPhysicalBone3D) GetAngularDamp() Float {
	return self.ptr.API.PhysicalBone3D_get_angular_damp(self)
}
func (self classPhysicalBone3D) SetLinearVelocity(linear_velocity Vector3) {
	self.ptr.API.PhysicalBone3D_set_linear_velocity(self, linear_velocity)
}
func (self classPhysicalBone3D) GetLinearVelocity() Vector3 {
	return self.ptr.API.PhysicalBone3D_get_linear_velocity(self)
}
func (self classPhysicalBone3D) SetAngularVelocity(angular_velocity Vector3) {
	self.ptr.API.PhysicalBone3D_set_angular_velocity(self, angular_velocity)
}
func (self classPhysicalBone3D) GetAngularVelocity() Vector3 {
	return self.ptr.API.PhysicalBone3D_get_angular_velocity(self)
}
func (self classPhysicalBone3D) SetUseCustomIntegrator(enable bool) {
	self.ptr.API.PhysicalBone3D_set_use_custom_integrator(self, enable)
}
func (self classPhysicalBone3D) IsUsingCustomIntegrator() bool {
	return self.ptr.API.PhysicalBone3D_is_using_custom_integrator(self)
}
func (self classPhysicalBone3D) SetCanSleep(able_to_sleep bool) {
	self.ptr.API.PhysicalBone3D_set_can_sleep(self, able_to_sleep)
}
func (self classPhysicalBone3D) IsAbleToSleep() bool {
	return self.ptr.API.PhysicalBone3D_is_able_to_sleep(self)
}

type classPhysicalSkyMaterial struct {
	Class[classPhysicalSkyMaterial]
}

func (self classPhysicalSkyMaterial) Super() Material {
	var super Material
	super.ptr = self.ptr
	return super
}

func (self classPhysicalSkyMaterial) Material() Material { return self.Super() }
func (self classPhysicalSkyMaterial) SetRayleighCoefficient(rayleigh Float) {
	self.ptr.API.PhysicalSkyMaterial_set_rayleigh_coefficient(self, rayleigh)
}
func (self classPhysicalSkyMaterial) GetRayleighCoefficient() Float {
	return self.ptr.API.PhysicalSkyMaterial_get_rayleigh_coefficient(self)
}
func (self classPhysicalSkyMaterial) SetRayleighColor(color Color) {
	self.ptr.API.PhysicalSkyMaterial_set_rayleigh_color(self, color)
}
func (self classPhysicalSkyMaterial) GetRayleighColor() Color {
	return self.ptr.API.PhysicalSkyMaterial_get_rayleigh_color(self)
}
func (self classPhysicalSkyMaterial) SetMieCoefficient(mie Float) {
	self.ptr.API.PhysicalSkyMaterial_set_mie_coefficient(self, mie)
}
func (self classPhysicalSkyMaterial) GetMieCoefficient() Float {
	return self.ptr.API.PhysicalSkyMaterial_get_mie_coefficient(self)
}
func (self classPhysicalSkyMaterial) SetMieEccentricity(eccentricity Float) {
	self.ptr.API.PhysicalSkyMaterial_set_mie_eccentricity(self, eccentricity)
}
func (self classPhysicalSkyMaterial) GetMieEccentricity() Float {
	return self.ptr.API.PhysicalSkyMaterial_get_mie_eccentricity(self)
}
func (self classPhysicalSkyMaterial) SetMieColor(color Color) {
	self.ptr.API.PhysicalSkyMaterial_set_mie_color(self, color)
}
func (self classPhysicalSkyMaterial) GetMieColor() Color {
	return self.ptr.API.PhysicalSkyMaterial_get_mie_color(self)
}
func (self classPhysicalSkyMaterial) SetTurbidity(turbidity Float) {
	self.ptr.API.PhysicalSkyMaterial_set_turbidity(self, turbidity)
}
func (self classPhysicalSkyMaterial) GetTurbidity() Float {
	return self.ptr.API.PhysicalSkyMaterial_get_turbidity(self)
}
func (self classPhysicalSkyMaterial) SetSunDiskScale(scale Float) {
	self.ptr.API.PhysicalSkyMaterial_set_sun_disk_scale(self, scale)
}
func (self classPhysicalSkyMaterial) GetSunDiskScale() Float {
	return self.ptr.API.PhysicalSkyMaterial_get_sun_disk_scale(self)
}
func (self classPhysicalSkyMaterial) SetGroundColor(color Color) {
	self.ptr.API.PhysicalSkyMaterial_set_ground_color(self, color)
}
func (self classPhysicalSkyMaterial) GetGroundColor() Color {
	return self.ptr.API.PhysicalSkyMaterial_get_ground_color(self)
}
func (self classPhysicalSkyMaterial) SetEnergyMultiplier(multiplier Float) {
	self.ptr.API.PhysicalSkyMaterial_set_energy_multiplier(self, multiplier)
}
func (self classPhysicalSkyMaterial) GetEnergyMultiplier() Float {
	return self.ptr.API.PhysicalSkyMaterial_get_energy_multiplier(self)
}
func (self classPhysicalSkyMaterial) SetUseDebanding(use_debanding bool) {
	self.ptr.API.PhysicalSkyMaterial_set_use_debanding(self, use_debanding)
}
func (self classPhysicalSkyMaterial) GetUseDebanding() bool {
	return self.ptr.API.PhysicalSkyMaterial_get_use_debanding(self)
}
func (self classPhysicalSkyMaterial) SetNightSky(night_sky Texture2D) {
	self.ptr.API.PhysicalSkyMaterial_set_night_sky(self, night_sky)
}
func (self classPhysicalSkyMaterial) GetNightSky() Texture2D {
	return self.ptr.API.PhysicalSkyMaterial_get_night_sky(self)
}

type classPhysicsBody2D struct{ Class[classPhysicsBody2D] }

func (self classPhysicsBody2D) Super() CollisionObject2D {
	var super CollisionObject2D
	super.ptr = self.ptr
	return super
}

func (self classPhysicsBody2D) CollisionObject2D() CollisionObject2D { return self.Super() }
func (self classPhysicsBody2D) MoveAndCollide(motion Vector2, test_only bool, safe_margin Float, recovery_as_collision bool) KinematicCollision2D {
	return self.ptr.API.PhysicsBody2D_move_and_collide(self, motion, test_only, safe_margin, recovery_as_collision)
}
func (self classPhysicsBody2D) TestMove(from Transform2D, motion Vector2, collision KinematicCollision2D, safe_margin Float, recovery_as_collision bool) bool {
	return self.ptr.API.PhysicsBody2D_test_move(self, from, motion, collision, safe_margin, recovery_as_collision)
}
func (self classPhysicsBody2D) GetCollisionExceptions() ArrayOf[PhysicsBody2D] {
	return self.ptr.API.PhysicsBody2D_get_collision_exceptions(self)
}
func (self classPhysicsBody2D) AddCollisionExceptionWith(body Node) {
	self.ptr.API.PhysicsBody2D_add_collision_exception_with(self, body)
}
func (self classPhysicsBody2D) RemoveCollisionExceptionWith(body Node) {
	self.ptr.API.PhysicsBody2D_remove_collision_exception_with(self, body)
}

type classPhysicsBody3D struct{ Class[classPhysicsBody3D] }

func (self classPhysicsBody3D) Super() CollisionObject3D {
	var super CollisionObject3D
	super.ptr = self.ptr
	return super
}

func (self classPhysicsBody3D) CollisionObject3D() CollisionObject3D { return self.Super() }
func (self classPhysicsBody3D) MoveAndCollide(motion Vector3, test_only bool, safe_margin Float, recovery_as_collision bool, max_collisions Int) KinematicCollision3D {
	return self.ptr.API.PhysicsBody3D_move_and_collide(self, motion, test_only, safe_margin, recovery_as_collision, max_collisions)
}
func (self classPhysicsBody3D) TestMove(from Transform3D, motion Vector3, collision KinematicCollision3D, safe_margin Float, recovery_as_collision bool, max_collisions Int) bool {
	return self.ptr.API.PhysicsBody3D_test_move(self, from, motion, collision, safe_margin, recovery_as_collision, max_collisions)
}
func (self classPhysicsBody3D) SetAxisLock(axis PhysicsServer3DBodyAxis, lock bool) {
	self.ptr.API.PhysicsBody3D_set_axis_lock(self, axis, lock)
}
func (self classPhysicsBody3D) GetAxisLock(axis PhysicsServer3DBodyAxis) bool {
	return self.ptr.API.PhysicsBody3D_get_axis_lock(self, axis)
}
func (self classPhysicsBody3D) GetCollisionExceptions() ArrayOf[PhysicsBody3D] {
	return self.ptr.API.PhysicsBody3D_get_collision_exceptions(self)
}
func (self classPhysicsBody3D) AddCollisionExceptionWith(body Node) {
	self.ptr.API.PhysicsBody3D_add_collision_exception_with(self, body)
}
func (self classPhysicsBody3D) RemoveCollisionExceptionWith(body Node) {
	self.ptr.API.PhysicsBody3D_remove_collision_exception_with(self, body)
}

type classPhysicsDirectBodyState2D struct {
	Class[classPhysicsDirectBodyState2D]
}

func (self classPhysicsDirectBodyState2D) Super() Object {
	var super Object
	super.ptr = self.ptr
	return super
}

func (self classPhysicsDirectBodyState2D) Object() Object { return self.Super() }
func (self classPhysicsDirectBodyState2D) GetTotalGravity() Vector2 {
	return self.ptr.API.PhysicsDirectBodyState2D_get_total_gravity(self)
}
func (self classPhysicsDirectBodyState2D) GetTotalLinearDamp() Float {
	return self.ptr.API.PhysicsDirectBodyState2D_get_total_linear_damp(self)
}
func (self classPhysicsDirectBodyState2D) GetTotalAngularDamp() Float {
	return self.ptr.API.PhysicsDirectBodyState2D_get_total_angular_damp(self)
}
func (self classPhysicsDirectBodyState2D) GetCenterOfMass() Vector2 {
	return self.ptr.API.PhysicsDirectBodyState2D_get_center_of_mass(self)
}
func (self classPhysicsDirectBodyState2D) GetCenterOfMassLocal() Vector2 {
	return self.ptr.API.PhysicsDirectBodyState2D_get_center_of_mass_local(self)
}
func (self classPhysicsDirectBodyState2D) GetInverseMass() Float {
	return self.ptr.API.PhysicsDirectBodyState2D_get_inverse_mass(self)
}
func (self classPhysicsDirectBodyState2D) GetInverseInertia() Float {
	return self.ptr.API.PhysicsDirectBodyState2D_get_inverse_inertia(self)
}
func (self classPhysicsDirectBodyState2D) SetLinearVelocity(velocity Vector2) {
	self.ptr.API.PhysicsDirectBodyState2D_set_linear_velocity(self, velocity)
}
func (self classPhysicsDirectBodyState2D) GetLinearVelocity() Vector2 {
	return self.ptr.API.PhysicsDirectBodyState2D_get_linear_velocity(self)
}
func (self classPhysicsDirectBodyState2D) SetAngularVelocity(velocity Float) {
	self.ptr.API.PhysicsDirectBodyState2D_set_angular_velocity(self, velocity)
}
func (self classPhysicsDirectBodyState2D) GetAngularVelocity() Float {
	return self.ptr.API.PhysicsDirectBodyState2D_get_angular_velocity(self)
}
func (self classPhysicsDirectBodyState2D) SetTransform(transform Transform2D) {
	self.ptr.API.PhysicsDirectBodyState2D_set_transform(self, transform)
}
func (self classPhysicsDirectBodyState2D) GetTransform() Transform2D {
	return self.ptr.API.PhysicsDirectBodyState2D_get_transform(self)
}
func (self classPhysicsDirectBodyState2D) GetVelocityAtLocalPosition(local_position Vector2) Vector2 {
	return self.ptr.API.PhysicsDirectBodyState2D_get_velocity_at_local_position(self, local_position)
}
func (self classPhysicsDirectBodyState2D) ApplyCentralImpulse(impulse Vector2) {
	self.ptr.API.PhysicsDirectBodyState2D_apply_central_impulse(self, impulse)
}
func (self classPhysicsDirectBodyState2D) ApplyTorqueImpulse(impulse Float) {
	self.ptr.API.PhysicsDirectBodyState2D_apply_torque_impulse(self, impulse)
}
func (self classPhysicsDirectBodyState2D) ApplyImpulse(impulse Vector2, position Vector2) {
	self.ptr.API.PhysicsDirectBodyState2D_apply_impulse(self, impulse, position)
}
func (self classPhysicsDirectBodyState2D) ApplyCentralForce(force Vector2) {
	self.ptr.API.PhysicsDirectBodyState2D_apply_central_force(self, force)
}
func (self classPhysicsDirectBodyState2D) ApplyForce(force Vector2, position Vector2) {
	self.ptr.API.PhysicsDirectBodyState2D_apply_force(self, force, position)
}
func (self classPhysicsDirectBodyState2D) ApplyTorque(torque Float) {
	self.ptr.API.PhysicsDirectBodyState2D_apply_torque(self, torque)
}
func (self classPhysicsDirectBodyState2D) AddConstantCentralForce(force Vector2) {
	self.ptr.API.PhysicsDirectBodyState2D_add_constant_central_force(self, force)
}
func (self classPhysicsDirectBodyState2D) AddConstantForce(force Vector2, position Vector2) {
	self.ptr.API.PhysicsDirectBodyState2D_add_constant_force(self, force, position)
}
func (self classPhysicsDirectBodyState2D) AddConstantTorque(torque Float) {
	self.ptr.API.PhysicsDirectBodyState2D_add_constant_torque(self, torque)
}
func (self classPhysicsDirectBodyState2D) SetConstantForce(force Vector2) {
	self.ptr.API.PhysicsDirectBodyState2D_set_constant_force(self, force)
}
func (self classPhysicsDirectBodyState2D) GetConstantForce() Vector2 {
	return self.ptr.API.PhysicsDirectBodyState2D_get_constant_force(self)
}
func (self classPhysicsDirectBodyState2D) SetConstantTorque(torque Float) {
	self.ptr.API.PhysicsDirectBodyState2D_set_constant_torque(self, torque)
}
func (self classPhysicsDirectBodyState2D) GetConstantTorque() Float {
	return self.ptr.API.PhysicsDirectBodyState2D_get_constant_torque(self)
}
func (self classPhysicsDirectBodyState2D) SetSleepState(enabled bool) {
	self.ptr.API.PhysicsDirectBodyState2D_set_sleep_state(self, enabled)
}
func (self classPhysicsDirectBodyState2D) IsSleeping() bool {
	return self.ptr.API.PhysicsDirectBodyState2D_is_sleeping(self)
}
func (self classPhysicsDirectBodyState2D) GetContactCount() Int {
	return self.ptr.API.PhysicsDirectBodyState2D_get_contact_count(self)
}
func (self classPhysicsDirectBodyState2D) GetContactLocalPosition(contact_idx Int) Vector2 {
	return self.ptr.API.PhysicsDirectBodyState2D_get_contact_local_position(self, contact_idx)
}
func (self classPhysicsDirectBodyState2D) GetContactLocalNormal(contact_idx Int) Vector2 {
	return self.ptr.API.PhysicsDirectBodyState2D_get_contact_local_normal(self, contact_idx)
}
func (self classPhysicsDirectBodyState2D) GetContactLocalShape(contact_idx Int) Int {
	return self.ptr.API.PhysicsDirectBodyState2D_get_contact_local_shape(self, contact_idx)
}
func (self classPhysicsDirectBodyState2D) GetContactLocalVelocityAtPosition(contact_idx Int) Vector2 {
	return self.ptr.API.PhysicsDirectBodyState2D_get_contact_local_velocity_at_position(self, contact_idx)
}
func (self classPhysicsDirectBodyState2D) GetContactCollider(contact_idx Int) RID {
	return self.ptr.API.PhysicsDirectBodyState2D_get_contact_collider(self, contact_idx)
}
func (self classPhysicsDirectBodyState2D) GetContactColliderPosition(contact_idx Int) Vector2 {
	return self.ptr.API.PhysicsDirectBodyState2D_get_contact_collider_position(self, contact_idx)
}
func (self classPhysicsDirectBodyState2D) GetContactColliderId(contact_idx Int) Int {
	return self.ptr.API.PhysicsDirectBodyState2D_get_contact_collider_id(self, contact_idx)
}
func (self classPhysicsDirectBodyState2D) GetContactColliderObject(contact_idx Int) Object {
	return self.ptr.API.PhysicsDirectBodyState2D_get_contact_collider_object(self, contact_idx)
}
func (self classPhysicsDirectBodyState2D) GetContactColliderShape(contact_idx Int) Int {
	return self.ptr.API.PhysicsDirectBodyState2D_get_contact_collider_shape(self, contact_idx)
}
func (self classPhysicsDirectBodyState2D) GetContactColliderVelocityAtPosition(contact_idx Int) Vector2 {
	return self.ptr.API.PhysicsDirectBodyState2D_get_contact_collider_velocity_at_position(self, contact_idx)
}
func (self classPhysicsDirectBodyState2D) GetContactImpulse(contact_idx Int) Vector2 {
	return self.ptr.API.PhysicsDirectBodyState2D_get_contact_impulse(self, contact_idx)
}
func (self classPhysicsDirectBodyState2D) GetStep() Float {
	return self.ptr.API.PhysicsDirectBodyState2D_get_step(self)
}
func (self classPhysicsDirectBodyState2D) IntegrateForces() {
	self.ptr.API.PhysicsDirectBodyState2D_integrate_forces(self)
}
func (self classPhysicsDirectBodyState2D) GetSpaceState() PhysicsDirectSpaceState2D {
	return self.ptr.API.PhysicsDirectBodyState2D_get_space_state(self)
}

type classPhysicsDirectBodyState2DExtension struct {
	Class[classPhysicsDirectBodyState2DExtension]
}

func (self classPhysicsDirectBodyState2DExtension) Super() PhysicsDirectBodyState2D {
	var super PhysicsDirectBodyState2D
	super.ptr = self.ptr
	return super
}

func (self classPhysicsDirectBodyState2DExtension) PhysicsDirectBodyState2D() PhysicsDirectBodyState2D {
	return self.Super()
}

type classPhysicsDirectBodyState3D struct {
	Class[classPhysicsDirectBodyState3D]
}

func (self classPhysicsDirectBodyState3D) Super() Object {
	var super Object
	super.ptr = self.ptr
	return super
}

func (self classPhysicsDirectBodyState3D) Object() Object { return self.Super() }
func (self classPhysicsDirectBodyState3D) GetTotalGravity() Vector3 {
	return self.ptr.API.PhysicsDirectBodyState3D_get_total_gravity(self)
}
func (self classPhysicsDirectBodyState3D) GetTotalLinearDamp() Float {
	return self.ptr.API.PhysicsDirectBodyState3D_get_total_linear_damp(self)
}
func (self classPhysicsDirectBodyState3D) GetTotalAngularDamp() Float {
	return self.ptr.API.PhysicsDirectBodyState3D_get_total_angular_damp(self)
}
func (self classPhysicsDirectBodyState3D) GetCenterOfMass() Vector3 {
	return self.ptr.API.PhysicsDirectBodyState3D_get_center_of_mass(self)
}
func (self classPhysicsDirectBodyState3D) GetCenterOfMassLocal() Vector3 {
	return self.ptr.API.PhysicsDirectBodyState3D_get_center_of_mass_local(self)
}
func (self classPhysicsDirectBodyState3D) GetPrincipalInertiaAxes() Basis {
	return self.ptr.API.PhysicsDirectBodyState3D_get_principal_inertia_axes(self)
}
func (self classPhysicsDirectBodyState3D) GetInverseMass() Float {
	return self.ptr.API.PhysicsDirectBodyState3D_get_inverse_mass(self)
}
func (self classPhysicsDirectBodyState3D) GetInverseInertia() Vector3 {
	return self.ptr.API.PhysicsDirectBodyState3D_get_inverse_inertia(self)
}
func (self classPhysicsDirectBodyState3D) GetInverseInertiaTensor() Basis {
	return self.ptr.API.PhysicsDirectBodyState3D_get_inverse_inertia_tensor(self)
}
func (self classPhysicsDirectBodyState3D) SetLinearVelocity(velocity Vector3) {
	self.ptr.API.PhysicsDirectBodyState3D_set_linear_velocity(self, velocity)
}
func (self classPhysicsDirectBodyState3D) GetLinearVelocity() Vector3 {
	return self.ptr.API.PhysicsDirectBodyState3D_get_linear_velocity(self)
}
func (self classPhysicsDirectBodyState3D) SetAngularVelocity(velocity Vector3) {
	self.ptr.API.PhysicsDirectBodyState3D_set_angular_velocity(self, velocity)
}
func (self classPhysicsDirectBodyState3D) GetAngularVelocity() Vector3 {
	return self.ptr.API.PhysicsDirectBodyState3D_get_angular_velocity(self)
}
func (self classPhysicsDirectBodyState3D) SetTransform(transform Transform3D) {
	self.ptr.API.PhysicsDirectBodyState3D_set_transform(self, transform)
}
func (self classPhysicsDirectBodyState3D) GetTransform() Transform3D {
	return self.ptr.API.PhysicsDirectBodyState3D_get_transform(self)
}
func (self classPhysicsDirectBodyState3D) GetVelocityAtLocalPosition(local_position Vector3) Vector3 {
	return self.ptr.API.PhysicsDirectBodyState3D_get_velocity_at_local_position(self, local_position)
}
func (self classPhysicsDirectBodyState3D) ApplyCentralImpulse(impulse Vector3) {
	self.ptr.API.PhysicsDirectBodyState3D_apply_central_impulse(self, impulse)
}
func (self classPhysicsDirectBodyState3D) ApplyImpulse(impulse Vector3, position Vector3) {
	self.ptr.API.PhysicsDirectBodyState3D_apply_impulse(self, impulse, position)
}
func (self classPhysicsDirectBodyState3D) ApplyTorqueImpulse(impulse Vector3) {
	self.ptr.API.PhysicsDirectBodyState3D_apply_torque_impulse(self, impulse)
}
func (self classPhysicsDirectBodyState3D) ApplyCentralForce(force Vector3) {
	self.ptr.API.PhysicsDirectBodyState3D_apply_central_force(self, force)
}
func (self classPhysicsDirectBodyState3D) ApplyForce(force Vector3, position Vector3) {
	self.ptr.API.PhysicsDirectBodyState3D_apply_force(self, force, position)
}
func (self classPhysicsDirectBodyState3D) ApplyTorque(torque Vector3) {
	self.ptr.API.PhysicsDirectBodyState3D_apply_torque(self, torque)
}
func (self classPhysicsDirectBodyState3D) AddConstantCentralForce(force Vector3) {
	self.ptr.API.PhysicsDirectBodyState3D_add_constant_central_force(self, force)
}
func (self classPhysicsDirectBodyState3D) AddConstantForce(force Vector3, position Vector3) {
	self.ptr.API.PhysicsDirectBodyState3D_add_constant_force(self, force, position)
}
func (self classPhysicsDirectBodyState3D) AddConstantTorque(torque Vector3) {
	self.ptr.API.PhysicsDirectBodyState3D_add_constant_torque(self, torque)
}
func (self classPhysicsDirectBodyState3D) SetConstantForce(force Vector3) {
	self.ptr.API.PhysicsDirectBodyState3D_set_constant_force(self, force)
}
func (self classPhysicsDirectBodyState3D) GetConstantForce() Vector3 {
	return self.ptr.API.PhysicsDirectBodyState3D_get_constant_force(self)
}
func (self classPhysicsDirectBodyState3D) SetConstantTorque(torque Vector3) {
	self.ptr.API.PhysicsDirectBodyState3D_set_constant_torque(self, torque)
}
func (self classPhysicsDirectBodyState3D) GetConstantTorque() Vector3 {
	return self.ptr.API.PhysicsDirectBodyState3D_get_constant_torque(self)
}
func (self classPhysicsDirectBodyState3D) SetSleepState(enabled bool) {
	self.ptr.API.PhysicsDirectBodyState3D_set_sleep_state(self, enabled)
}
func (self classPhysicsDirectBodyState3D) IsSleeping() bool {
	return self.ptr.API.PhysicsDirectBodyState3D_is_sleeping(self)
}
func (self classPhysicsDirectBodyState3D) GetContactCount() Int {
	return self.ptr.API.PhysicsDirectBodyState3D_get_contact_count(self)
}
func (self classPhysicsDirectBodyState3D) GetContactLocalPosition(contact_idx Int) Vector3 {
	return self.ptr.API.PhysicsDirectBodyState3D_get_contact_local_position(self, contact_idx)
}
func (self classPhysicsDirectBodyState3D) GetContactLocalNormal(contact_idx Int) Vector3 {
	return self.ptr.API.PhysicsDirectBodyState3D_get_contact_local_normal(self, contact_idx)
}
func (self classPhysicsDirectBodyState3D) GetContactImpulse(contact_idx Int) Vector3 {
	return self.ptr.API.PhysicsDirectBodyState3D_get_contact_impulse(self, contact_idx)
}
func (self classPhysicsDirectBodyState3D) GetContactLocalShape(contact_idx Int) Int {
	return self.ptr.API.PhysicsDirectBodyState3D_get_contact_local_shape(self, contact_idx)
}
func (self classPhysicsDirectBodyState3D) GetContactLocalVelocityAtPosition(contact_idx Int) Vector3 {
	return self.ptr.API.PhysicsDirectBodyState3D_get_contact_local_velocity_at_position(self, contact_idx)
}
func (self classPhysicsDirectBodyState3D) GetContactCollider(contact_idx Int) RID {
	return self.ptr.API.PhysicsDirectBodyState3D_get_contact_collider(self, contact_idx)
}
func (self classPhysicsDirectBodyState3D) GetContactColliderPosition(contact_idx Int) Vector3 {
	return self.ptr.API.PhysicsDirectBodyState3D_get_contact_collider_position(self, contact_idx)
}
func (self classPhysicsDirectBodyState3D) GetContactColliderId(contact_idx Int) Int {
	return self.ptr.API.PhysicsDirectBodyState3D_get_contact_collider_id(self, contact_idx)
}
func (self classPhysicsDirectBodyState3D) GetContactColliderObject(contact_idx Int) Object {
	return self.ptr.API.PhysicsDirectBodyState3D_get_contact_collider_object(self, contact_idx)
}
func (self classPhysicsDirectBodyState3D) GetContactColliderShape(contact_idx Int) Int {
	return self.ptr.API.PhysicsDirectBodyState3D_get_contact_collider_shape(self, contact_idx)
}
func (self classPhysicsDirectBodyState3D) GetContactColliderVelocityAtPosition(contact_idx Int) Vector3 {
	return self.ptr.API.PhysicsDirectBodyState3D_get_contact_collider_velocity_at_position(self, contact_idx)
}
func (self classPhysicsDirectBodyState3D) GetStep() Float {
	return self.ptr.API.PhysicsDirectBodyState3D_get_step(self)
}
func (self classPhysicsDirectBodyState3D) IntegrateForces() {
	self.ptr.API.PhysicsDirectBodyState3D_integrate_forces(self)
}
func (self classPhysicsDirectBodyState3D) GetSpaceState() PhysicsDirectSpaceState3D {
	return self.ptr.API.PhysicsDirectBodyState3D_get_space_state(self)
}

type classPhysicsDirectBodyState3DExtension struct {
	Class[classPhysicsDirectBodyState3DExtension]
}

func (self classPhysicsDirectBodyState3DExtension) Super() PhysicsDirectBodyState3D {
	var super PhysicsDirectBodyState3D
	super.ptr = self.ptr
	return super
}

func (self classPhysicsDirectBodyState3DExtension) PhysicsDirectBodyState3D() PhysicsDirectBodyState3D {
	return self.Super()
}

type classPhysicsDirectSpaceState2D struct {
	Class[classPhysicsDirectSpaceState2D]
}

func (self classPhysicsDirectSpaceState2D) Super() Object {
	var super Object
	super.ptr = self.ptr
	return super
}

func (self classPhysicsDirectSpaceState2D) Object() Object { return self.Super() }
func (self classPhysicsDirectSpaceState2D) IntersectPoint(parameters PhysicsPointQueryParameters2D, max_results Int) ArrayOf[Dictionary] {
	return self.ptr.API.PhysicsDirectSpaceState2D_intersect_point(self, parameters, max_results)
}
func (self classPhysicsDirectSpaceState2D) IntersectRay(parameters PhysicsRayQueryParameters2D) Dictionary {
	return self.ptr.API.PhysicsDirectSpaceState2D_intersect_ray(self, parameters)
}
func (self classPhysicsDirectSpaceState2D) IntersectShape(parameters PhysicsShapeQueryParameters2D, max_results Int) ArrayOf[Dictionary] {
	return self.ptr.API.PhysicsDirectSpaceState2D_intersect_shape(self, parameters, max_results)
}
func (self classPhysicsDirectSpaceState2D) CastMotion(parameters PhysicsShapeQueryParameters2D) PackedFloat32Array {
	return self.ptr.API.PhysicsDirectSpaceState2D_cast_motion(self, parameters)
}
func (self classPhysicsDirectSpaceState2D) CollideShape(parameters PhysicsShapeQueryParameters2D, max_results Int) ArrayOf[Vector2] {
	return self.ptr.API.PhysicsDirectSpaceState2D_collide_shape(self, parameters, max_results)
}
func (self classPhysicsDirectSpaceState2D) GetRestInfo(parameters PhysicsShapeQueryParameters2D) Dictionary {
	return self.ptr.API.PhysicsDirectSpaceState2D_get_rest_info(self, parameters)
}

type classPhysicsDirectSpaceState2DExtension struct {
	Class[classPhysicsDirectSpaceState2DExtension]
}

func (self classPhysicsDirectSpaceState2DExtension) Super() PhysicsDirectSpaceState2D {
	var super PhysicsDirectSpaceState2D
	super.ptr = self.ptr
	return super
}

func (self classPhysicsDirectSpaceState2DExtension) PhysicsDirectSpaceState2D() PhysicsDirectSpaceState2D {
	return self.Super()
}
func (self classPhysicsDirectSpaceState2DExtension) IsBodyExcludedFromQuery(body RID) bool {
	return self.ptr.API.PhysicsDirectSpaceState2DExtension_is_body_excluded_from_query(self, body)
}

type classPhysicsDirectSpaceState3D struct {
	Class[classPhysicsDirectSpaceState3D]
}

func (self classPhysicsDirectSpaceState3D) Super() Object {
	var super Object
	super.ptr = self.ptr
	return super
}

func (self classPhysicsDirectSpaceState3D) Object() Object { return self.Super() }
func (self classPhysicsDirectSpaceState3D) IntersectPoint(parameters PhysicsPointQueryParameters3D, max_results Int) ArrayOf[Dictionary] {
	return self.ptr.API.PhysicsDirectSpaceState3D_intersect_point(self, parameters, max_results)
}
func (self classPhysicsDirectSpaceState3D) IntersectRay(parameters PhysicsRayQueryParameters3D) Dictionary {
	return self.ptr.API.PhysicsDirectSpaceState3D_intersect_ray(self, parameters)
}
func (self classPhysicsDirectSpaceState3D) IntersectShape(parameters PhysicsShapeQueryParameters3D, max_results Int) ArrayOf[Dictionary] {
	return self.ptr.API.PhysicsDirectSpaceState3D_intersect_shape(self, parameters, max_results)
}
func (self classPhysicsDirectSpaceState3D) CastMotion(parameters PhysicsShapeQueryParameters3D) PackedFloat32Array {
	return self.ptr.API.PhysicsDirectSpaceState3D_cast_motion(self, parameters)
}
func (self classPhysicsDirectSpaceState3D) CollideShape(parameters PhysicsShapeQueryParameters3D, max_results Int) ArrayOf[Vector3] {
	return self.ptr.API.PhysicsDirectSpaceState3D_collide_shape(self, parameters, max_results)
}
func (self classPhysicsDirectSpaceState3D) GetRestInfo(parameters PhysicsShapeQueryParameters3D) Dictionary {
	return self.ptr.API.PhysicsDirectSpaceState3D_get_rest_info(self, parameters)
}

type classPhysicsDirectSpaceState3DExtension struct {
	Class[classPhysicsDirectSpaceState3DExtension]
}

func (self classPhysicsDirectSpaceState3DExtension) Super() PhysicsDirectSpaceState3D {
	var super PhysicsDirectSpaceState3D
	super.ptr = self.ptr
	return super
}

func (self classPhysicsDirectSpaceState3DExtension) PhysicsDirectSpaceState3D() PhysicsDirectSpaceState3D {
	return self.Super()
}
func (self classPhysicsDirectSpaceState3DExtension) IsBodyExcludedFromQuery(body RID) bool {
	return self.ptr.API.PhysicsDirectSpaceState3DExtension_is_body_excluded_from_query(self, body)
}

type classPhysicsMaterial struct{ Class[classPhysicsMaterial] }

func (self classPhysicsMaterial) Super() Resource {
	var super Resource
	super.ptr = self.ptr
	return super
}

func (self classPhysicsMaterial) Resource() Resource { return self.Super() }
func (self classPhysicsMaterial) SetFriction(friction Float) {
	self.ptr.API.PhysicsMaterial_set_friction(self, friction)
}
func (self classPhysicsMaterial) GetFriction() Float {
	return self.ptr.API.PhysicsMaterial_get_friction(self)
}
func (self classPhysicsMaterial) SetRough(rough bool) {
	self.ptr.API.PhysicsMaterial_set_rough(self, rough)
}
func (self classPhysicsMaterial) IsRough() bool {
	return self.ptr.API.PhysicsMaterial_is_rough(self)
}
func (self classPhysicsMaterial) SetBounce(bounce Float) {
	self.ptr.API.PhysicsMaterial_set_bounce(self, bounce)
}
func (self classPhysicsMaterial) GetBounce() Float {
	return self.ptr.API.PhysicsMaterial_get_bounce(self)
}
func (self classPhysicsMaterial) SetAbsorbent(absorbent bool) {
	self.ptr.API.PhysicsMaterial_set_absorbent(self, absorbent)
}
func (self classPhysicsMaterial) IsAbsorbent() bool {
	return self.ptr.API.PhysicsMaterial_is_absorbent(self)
}

type classPhysicsPointQueryParameters2D struct {
	Class[classPhysicsPointQueryParameters2D]
}

func (self classPhysicsPointQueryParameters2D) Super() RefCounted {
	var super RefCounted
	super.ptr = self.ptr
	return super
}

func (self classPhysicsPointQueryParameters2D) RefCounted() RefCounted { return self.Super() }
func (self classPhysicsPointQueryParameters2D) SetPosition(position Vector2) {
	self.ptr.API.PhysicsPointQueryParameters2D_set_position(self, position)
}
func (self classPhysicsPointQueryParameters2D) GetPosition() Vector2 {
	return self.ptr.API.PhysicsPointQueryParameters2D_get_position(self)
}
func (self classPhysicsPointQueryParameters2D) SetCanvasInstanceId(canvas_instance_id Int) {
	self.ptr.API.PhysicsPointQueryParameters2D_set_canvas_instance_id(self, canvas_instance_id)
}
func (self classPhysicsPointQueryParameters2D) GetCanvasInstanceId() Int {
	return self.ptr.API.PhysicsPointQueryParameters2D_get_canvas_instance_id(self)
}
func (self classPhysicsPointQueryParameters2D) SetCollisionMask(collision_mask Int) {
	self.ptr.API.PhysicsPointQueryParameters2D_set_collision_mask(self, collision_mask)
}
func (self classPhysicsPointQueryParameters2D) GetCollisionMask() Int {
	return self.ptr.API.PhysicsPointQueryParameters2D_get_collision_mask(self)
}
func (self classPhysicsPointQueryParameters2D) SetExclude(exclude ArrayOf[RID]) {
	self.ptr.API.PhysicsPointQueryParameters2D_set_exclude(self, exclude)
}
func (self classPhysicsPointQueryParameters2D) GetExclude() ArrayOf[RID] {
	return self.ptr.API.PhysicsPointQueryParameters2D_get_exclude(self)
}
func (self classPhysicsPointQueryParameters2D) SetCollideWithBodies(enable bool) {
	self.ptr.API.PhysicsPointQueryParameters2D_set_collide_with_bodies(self, enable)
}
func (self classPhysicsPointQueryParameters2D) IsCollideWithBodiesEnabled() bool {
	return self.ptr.API.PhysicsPointQueryParameters2D_is_collide_with_bodies_enabled(self)
}
func (self classPhysicsPointQueryParameters2D) SetCollideWithAreas(enable bool) {
	self.ptr.API.PhysicsPointQueryParameters2D_set_collide_with_areas(self, enable)
}
func (self classPhysicsPointQueryParameters2D) IsCollideWithAreasEnabled() bool {
	return self.ptr.API.PhysicsPointQueryParameters2D_is_collide_with_areas_enabled(self)
}

type classPhysicsPointQueryParameters3D struct {
	Class[classPhysicsPointQueryParameters3D]
}

func (self classPhysicsPointQueryParameters3D) Super() RefCounted {
	var super RefCounted
	super.ptr = self.ptr
	return super
}

func (self classPhysicsPointQueryParameters3D) RefCounted() RefCounted { return self.Super() }
func (self classPhysicsPointQueryParameters3D) SetPosition(position Vector3) {
	self.ptr.API.PhysicsPointQueryParameters3D_set_position(self, position)
}
func (self classPhysicsPointQueryParameters3D) GetPosition() Vector3 {
	return self.ptr.API.PhysicsPointQueryParameters3D_get_position(self)
}
func (self classPhysicsPointQueryParameters3D) SetCollisionMask(collision_mask Int) {
	self.ptr.API.PhysicsPointQueryParameters3D_set_collision_mask(self, collision_mask)
}
func (self classPhysicsPointQueryParameters3D) GetCollisionMask() Int {
	return self.ptr.API.PhysicsPointQueryParameters3D_get_collision_mask(self)
}
func (self classPhysicsPointQueryParameters3D) SetExclude(exclude ArrayOf[RID]) {
	self.ptr.API.PhysicsPointQueryParameters3D_set_exclude(self, exclude)
}
func (self classPhysicsPointQueryParameters3D) GetExclude() ArrayOf[RID] {
	return self.ptr.API.PhysicsPointQueryParameters3D_get_exclude(self)
}
func (self classPhysicsPointQueryParameters3D) SetCollideWithBodies(enable bool) {
	self.ptr.API.PhysicsPointQueryParameters3D_set_collide_with_bodies(self, enable)
}
func (self classPhysicsPointQueryParameters3D) IsCollideWithBodiesEnabled() bool {
	return self.ptr.API.PhysicsPointQueryParameters3D_is_collide_with_bodies_enabled(self)
}
func (self classPhysicsPointQueryParameters3D) SetCollideWithAreas(enable bool) {
	self.ptr.API.PhysicsPointQueryParameters3D_set_collide_with_areas(self, enable)
}
func (self classPhysicsPointQueryParameters3D) IsCollideWithAreasEnabled() bool {
	return self.ptr.API.PhysicsPointQueryParameters3D_is_collide_with_areas_enabled(self)
}

type classPhysicsRayQueryParameters2D struct {
	Class[classPhysicsRayQueryParameters2D]
}

func (self classPhysicsRayQueryParameters2D) Super() RefCounted {
	var super RefCounted
	super.ptr = self.ptr
	return super
}

func (self classPhysicsRayQueryParameters2D) RefCounted() RefCounted { return self.Super() }
func (self classPhysicsRayQueryParameters2D) Create(from Vector2, to Vector2, collision_mask Int, exclude ArrayOf[RID]) PhysicsRayQueryParameters2D {
	return self.ptr.API.PhysicsRayQueryParameters2D_create(self, from, to, collision_mask, exclude)
}
func (self classPhysicsRayQueryParameters2D) SetFrom(from Vector2) {
	self.ptr.API.PhysicsRayQueryParameters2D_set_from(self, from)
}
func (self classPhysicsRayQueryParameters2D) GetFrom() Vector2 {
	return self.ptr.API.PhysicsRayQueryParameters2D_get_from(self)
}
func (self classPhysicsRayQueryParameters2D) SetTo(to Vector2) {
	self.ptr.API.PhysicsRayQueryParameters2D_set_to(self, to)
}
func (self classPhysicsRayQueryParameters2D) GetTo() Vector2 {
	return self.ptr.API.PhysicsRayQueryParameters2D_get_to(self)
}
func (self classPhysicsRayQueryParameters2D) SetCollisionMask(collision_mask Int) {
	self.ptr.API.PhysicsRayQueryParameters2D_set_collision_mask(self, collision_mask)
}
func (self classPhysicsRayQueryParameters2D) GetCollisionMask() Int {
	return self.ptr.API.PhysicsRayQueryParameters2D_get_collision_mask(self)
}
func (self classPhysicsRayQueryParameters2D) SetExclude(exclude ArrayOf[RID]) {
	self.ptr.API.PhysicsRayQueryParameters2D_set_exclude(self, exclude)
}
func (self classPhysicsRayQueryParameters2D) GetExclude() ArrayOf[RID] {
	return self.ptr.API.PhysicsRayQueryParameters2D_get_exclude(self)
}
func (self classPhysicsRayQueryParameters2D) SetCollideWithBodies(enable bool) {
	self.ptr.API.PhysicsRayQueryParameters2D_set_collide_with_bodies(self, enable)
}
func (self classPhysicsRayQueryParameters2D) IsCollideWithBodiesEnabled() bool {
	return self.ptr.API.PhysicsRayQueryParameters2D_is_collide_with_bodies_enabled(self)
}
func (self classPhysicsRayQueryParameters2D) SetCollideWithAreas(enable bool) {
	self.ptr.API.PhysicsRayQueryParameters2D_set_collide_with_areas(self, enable)
}
func (self classPhysicsRayQueryParameters2D) IsCollideWithAreasEnabled() bool {
	return self.ptr.API.PhysicsRayQueryParameters2D_is_collide_with_areas_enabled(self)
}
func (self classPhysicsRayQueryParameters2D) SetHitFromInside(enable bool) {
	self.ptr.API.PhysicsRayQueryParameters2D_set_hit_from_inside(self, enable)
}
func (self classPhysicsRayQueryParameters2D) IsHitFromInsideEnabled() bool {
	return self.ptr.API.PhysicsRayQueryParameters2D_is_hit_from_inside_enabled(self)
}

type classPhysicsRayQueryParameters3D struct {
	Class[classPhysicsRayQueryParameters3D]
}

func (self classPhysicsRayQueryParameters3D) Super() RefCounted {
	var super RefCounted
	super.ptr = self.ptr
	return super
}

func (self classPhysicsRayQueryParameters3D) RefCounted() RefCounted { return self.Super() }
func (self classPhysicsRayQueryParameters3D) Create(from Vector3, to Vector3, collision_mask Int, exclude ArrayOf[RID]) PhysicsRayQueryParameters3D {
	return self.ptr.API.PhysicsRayQueryParameters3D_create(self, from, to, collision_mask, exclude)
}
func (self classPhysicsRayQueryParameters3D) SetFrom(from Vector3) {
	self.ptr.API.PhysicsRayQueryParameters3D_set_from(self, from)
}
func (self classPhysicsRayQueryParameters3D) GetFrom() Vector3 {
	return self.ptr.API.PhysicsRayQueryParameters3D_get_from(self)
}
func (self classPhysicsRayQueryParameters3D) SetTo(to Vector3) {
	self.ptr.API.PhysicsRayQueryParameters3D_set_to(self, to)
}
func (self classPhysicsRayQueryParameters3D) GetTo() Vector3 {
	return self.ptr.API.PhysicsRayQueryParameters3D_get_to(self)
}
func (self classPhysicsRayQueryParameters3D) SetCollisionMask(collision_mask Int) {
	self.ptr.API.PhysicsRayQueryParameters3D_set_collision_mask(self, collision_mask)
}
func (self classPhysicsRayQueryParameters3D) GetCollisionMask() Int {
	return self.ptr.API.PhysicsRayQueryParameters3D_get_collision_mask(self)
}
func (self classPhysicsRayQueryParameters3D) SetExclude(exclude ArrayOf[RID]) {
	self.ptr.API.PhysicsRayQueryParameters3D_set_exclude(self, exclude)
}
func (self classPhysicsRayQueryParameters3D) GetExclude() ArrayOf[RID] {
	return self.ptr.API.PhysicsRayQueryParameters3D_get_exclude(self)
}
func (self classPhysicsRayQueryParameters3D) SetCollideWithBodies(enable bool) {
	self.ptr.API.PhysicsRayQueryParameters3D_set_collide_with_bodies(self, enable)
}
func (self classPhysicsRayQueryParameters3D) IsCollideWithBodiesEnabled() bool {
	return self.ptr.API.PhysicsRayQueryParameters3D_is_collide_with_bodies_enabled(self)
}
func (self classPhysicsRayQueryParameters3D) SetCollideWithAreas(enable bool) {
	self.ptr.API.PhysicsRayQueryParameters3D_set_collide_with_areas(self, enable)
}
func (self classPhysicsRayQueryParameters3D) IsCollideWithAreasEnabled() bool {
	return self.ptr.API.PhysicsRayQueryParameters3D_is_collide_with_areas_enabled(self)
}
func (self classPhysicsRayQueryParameters3D) SetHitFromInside(enable bool) {
	self.ptr.API.PhysicsRayQueryParameters3D_set_hit_from_inside(self, enable)
}
func (self classPhysicsRayQueryParameters3D) IsHitFromInsideEnabled() bool {
	return self.ptr.API.PhysicsRayQueryParameters3D_is_hit_from_inside_enabled(self)
}
func (self classPhysicsRayQueryParameters3D) SetHitBackFaces(enable bool) {
	self.ptr.API.PhysicsRayQueryParameters3D_set_hit_back_faces(self, enable)
}
func (self classPhysicsRayQueryParameters3D) IsHitBackFacesEnabled() bool {
	return self.ptr.API.PhysicsRayQueryParameters3D_is_hit_back_faces_enabled(self)
}

type classPhysicsServer2D struct{ Class[classPhysicsServer2D] }

func (self classPhysicsServer2D) Super() Object { var super Object; super.ptr = self.ptr; return super }

func (self classPhysicsServer2D) Object() Object { return self.Super() }

func (self classPhysicsServer2D) isSingleton() {}
func (self classPhysicsServer2D) WorldBoundaryShapeCreate() RID {
	return self.ptr.API.PhysicsServer2D_world_boundary_shape_create(self)
}
func (self classPhysicsServer2D) SeparationRayShapeCreate() RID {
	return self.ptr.API.PhysicsServer2D_separation_ray_shape_create(self)
}
func (self classPhysicsServer2D) SegmentShapeCreate() RID {
	return self.ptr.API.PhysicsServer2D_segment_shape_create(self)
}
func (self classPhysicsServer2D) CircleShapeCreate() RID {
	return self.ptr.API.PhysicsServer2D_circle_shape_create(self)
}
func (self classPhysicsServer2D) RectangleShapeCreate() RID {
	return self.ptr.API.PhysicsServer2D_rectangle_shape_create(self)
}
func (self classPhysicsServer2D) CapsuleShapeCreate() RID {
	return self.ptr.API.PhysicsServer2D_capsule_shape_create(self)
}
func (self classPhysicsServer2D) ConvexPolygonShapeCreate() RID {
	return self.ptr.API.PhysicsServer2D_convex_polygon_shape_create(self)
}
func (self classPhysicsServer2D) ConcavePolygonShapeCreate() RID {
	return self.ptr.API.PhysicsServer2D_concave_polygon_shape_create(self)
}
func (self classPhysicsServer2D) ShapeSetData(shape RID, data Variant) {
	self.ptr.API.PhysicsServer2D_shape_set_data(self, shape, data)
}
func (self classPhysicsServer2D) ShapeGetType(shape RID) PhysicsServer2DShapeType {
	return self.ptr.API.PhysicsServer2D_shape_get_type(self, shape)
}
func (self classPhysicsServer2D) ShapeGetData(shape RID) Variant {
	return self.ptr.API.PhysicsServer2D_shape_get_data(self, shape)
}
func (self classPhysicsServer2D) SpaceCreate() RID {
	return self.ptr.API.PhysicsServer2D_space_create(self)
}
func (self classPhysicsServer2D) SpaceSetActive(space RID, active bool) {
	self.ptr.API.PhysicsServer2D_space_set_active(self, space, active)
}
func (self classPhysicsServer2D) SpaceIsActive(space RID) bool {
	return self.ptr.API.PhysicsServer2D_space_is_active(self, space)
}
func (self classPhysicsServer2D) SpaceSetParam(space RID, param PhysicsServer2DSpaceParameter, value Float) {
	self.ptr.API.PhysicsServer2D_space_set_param(self, space, param, value)
}
func (self classPhysicsServer2D) SpaceGetParam(space RID, param PhysicsServer2DSpaceParameter) Float {
	return self.ptr.API.PhysicsServer2D_space_get_param(self, space, param)
}
func (self classPhysicsServer2D) SpaceGetDirectState(space RID) PhysicsDirectSpaceState2D {
	return self.ptr.API.PhysicsServer2D_space_get_direct_state(self, space)
}
func (self classPhysicsServer2D) AreaCreate() RID {
	return self.ptr.API.PhysicsServer2D_area_create(self)
}
func (self classPhysicsServer2D) AreaSetSpace(area RID, space RID) {
	self.ptr.API.PhysicsServer2D_area_set_space(self, area, space)
}
func (self classPhysicsServer2D) AreaGetSpace(area RID) RID {
	return self.ptr.API.PhysicsServer2D_area_get_space(self, area)
}
func (self classPhysicsServer2D) AreaAddShape(area RID, shape RID, transform Transform2D, disabled bool) {
	self.ptr.API.PhysicsServer2D_area_add_shape(self, area, shape, transform, disabled)
}
func (self classPhysicsServer2D) AreaSetShape(area RID, shape_idx Int, shape RID) {
	self.ptr.API.PhysicsServer2D_area_set_shape(self, area, shape_idx, shape)
}
func (self classPhysicsServer2D) AreaSetShapeTransform(area RID, shape_idx Int, transform Transform2D) {
	self.ptr.API.PhysicsServer2D_area_set_shape_transform(self, area, shape_idx, transform)
}
func (self classPhysicsServer2D) AreaSetShapeDisabled(area RID, shape_idx Int, disabled bool) {
	self.ptr.API.PhysicsServer2D_area_set_shape_disabled(self, area, shape_idx, disabled)
}
func (self classPhysicsServer2D) AreaGetShapeCount(area RID) Int {
	return self.ptr.API.PhysicsServer2D_area_get_shape_count(self, area)
}
func (self classPhysicsServer2D) AreaGetShape(area RID, shape_idx Int) RID {
	return self.ptr.API.PhysicsServer2D_area_get_shape(self, area, shape_idx)
}
func (self classPhysicsServer2D) AreaGetShapeTransform(area RID, shape_idx Int) Transform2D {
	return self.ptr.API.PhysicsServer2D_area_get_shape_transform(self, area, shape_idx)
}
func (self classPhysicsServer2D) AreaRemoveShape(area RID, shape_idx Int) {
	self.ptr.API.PhysicsServer2D_area_remove_shape(self, area, shape_idx)
}
func (self classPhysicsServer2D) AreaClearShapes(area RID) {
	self.ptr.API.PhysicsServer2D_area_clear_shapes(self, area)
}
func (self classPhysicsServer2D) AreaSetCollisionLayer(area RID, layer Int) {
	self.ptr.API.PhysicsServer2D_area_set_collision_layer(self, area, layer)
}
func (self classPhysicsServer2D) AreaGetCollisionLayer(area RID) Int {
	return self.ptr.API.PhysicsServer2D_area_get_collision_layer(self, area)
}
func (self classPhysicsServer2D) AreaSetCollisionMask(area RID, mask Int) {
	self.ptr.API.PhysicsServer2D_area_set_collision_mask(self, area, mask)
}
func (self classPhysicsServer2D) AreaGetCollisionMask(area RID) Int {
	return self.ptr.API.PhysicsServer2D_area_get_collision_mask(self, area)
}
func (self classPhysicsServer2D) AreaSetParam(area RID, param PhysicsServer2DAreaParameter, value Variant) {
	self.ptr.API.PhysicsServer2D_area_set_param(self, area, param, value)
}
func (self classPhysicsServer2D) AreaSetTransform(area RID, transform Transform2D) {
	self.ptr.API.PhysicsServer2D_area_set_transform(self, area, transform)
}
func (self classPhysicsServer2D) AreaGetParam(area RID, param PhysicsServer2DAreaParameter) Variant {
	return self.ptr.API.PhysicsServer2D_area_get_param(self, area, param)
}
func (self classPhysicsServer2D) AreaGetTransform(area RID) Transform2D {
	return self.ptr.API.PhysicsServer2D_area_get_transform(self, area)
}
func (self classPhysicsServer2D) AreaAttachObjectInstanceId(area RID, id Int) {
	self.ptr.API.PhysicsServer2D_area_attach_object_instance_id(self, area, id)
}
func (self classPhysicsServer2D) AreaGetObjectInstanceId(area RID) Int {
	return self.ptr.API.PhysicsServer2D_area_get_object_instance_id(self, area)
}
func (self classPhysicsServer2D) AreaAttachCanvasInstanceId(area RID, id Int) {
	self.ptr.API.PhysicsServer2D_area_attach_canvas_instance_id(self, area, id)
}
func (self classPhysicsServer2D) AreaGetCanvasInstanceId(area RID) Int {
	return self.ptr.API.PhysicsServer2D_area_get_canvas_instance_id(self, area)
}
func (self classPhysicsServer2D) AreaSetMonitorCallback(area RID, callback Callable) {
	self.ptr.API.PhysicsServer2D_area_set_monitor_callback(self, area, callback)
}
func (self classPhysicsServer2D) AreaSetAreaMonitorCallback(area RID, callback Callable) {
	self.ptr.API.PhysicsServer2D_area_set_area_monitor_callback(self, area, callback)
}
func (self classPhysicsServer2D) AreaSetMonitorable(area RID, monitorable bool) {
	self.ptr.API.PhysicsServer2D_area_set_monitorable(self, area, monitorable)
}
func (self classPhysicsServer2D) BodyCreate() RID {
	return self.ptr.API.PhysicsServer2D_body_create(self)
}
func (self classPhysicsServer2D) BodySetSpace(body RID, space RID) {
	self.ptr.API.PhysicsServer2D_body_set_space(self, body, space)
}
func (self classPhysicsServer2D) BodyGetSpace(body RID) RID {
	return self.ptr.API.PhysicsServer2D_body_get_space(self, body)
}
func (self classPhysicsServer2D) BodySetMode(body RID, mode PhysicsServer2DBodyMode) {
	self.ptr.API.PhysicsServer2D_body_set_mode(self, body, mode)
}
func (self classPhysicsServer2D) BodyGetMode(body RID) PhysicsServer2DBodyMode {
	return self.ptr.API.PhysicsServer2D_body_get_mode(self, body)
}
func (self classPhysicsServer2D) BodyAddShape(body RID, shape RID, transform Transform2D, disabled bool) {
	self.ptr.API.PhysicsServer2D_body_add_shape(self, body, shape, transform, disabled)
}
func (self classPhysicsServer2D) BodySetShape(body RID, shape_idx Int, shape RID) {
	self.ptr.API.PhysicsServer2D_body_set_shape(self, body, shape_idx, shape)
}
func (self classPhysicsServer2D) BodySetShapeTransform(body RID, shape_idx Int, transform Transform2D) {
	self.ptr.API.PhysicsServer2D_body_set_shape_transform(self, body, shape_idx, transform)
}
func (self classPhysicsServer2D) BodyGetShapeCount(body RID) Int {
	return self.ptr.API.PhysicsServer2D_body_get_shape_count(self, body)
}
func (self classPhysicsServer2D) BodyGetShape(body RID, shape_idx Int) RID {
	return self.ptr.API.PhysicsServer2D_body_get_shape(self, body, shape_idx)
}
func (self classPhysicsServer2D) BodyGetShapeTransform(body RID, shape_idx Int) Transform2D {
	return self.ptr.API.PhysicsServer2D_body_get_shape_transform(self, body, shape_idx)
}
func (self classPhysicsServer2D) BodyRemoveShape(body RID, shape_idx Int) {
	self.ptr.API.PhysicsServer2D_body_remove_shape(self, body, shape_idx)
}
func (self classPhysicsServer2D) BodyClearShapes(body RID) {
	self.ptr.API.PhysicsServer2D_body_clear_shapes(self, body)
}
func (self classPhysicsServer2D) BodySetShapeDisabled(body RID, shape_idx Int, disabled bool) {
	self.ptr.API.PhysicsServer2D_body_set_shape_disabled(self, body, shape_idx, disabled)
}
func (self classPhysicsServer2D) BodySetShapeAsOneWayCollision(body RID, shape_idx Int, enable bool, margin Float) {
	self.ptr.API.PhysicsServer2D_body_set_shape_as_one_way_collision(self, body, shape_idx, enable, margin)
}
func (self classPhysicsServer2D) BodyAttachObjectInstanceId(body RID, id Int) {
	self.ptr.API.PhysicsServer2D_body_attach_object_instance_id(self, body, id)
}
func (self classPhysicsServer2D) BodyGetObjectInstanceId(body RID) Int {
	return self.ptr.API.PhysicsServer2D_body_get_object_instance_id(self, body)
}
func (self classPhysicsServer2D) BodyAttachCanvasInstanceId(body RID, id Int) {
	self.ptr.API.PhysicsServer2D_body_attach_canvas_instance_id(self, body, id)
}
func (self classPhysicsServer2D) BodyGetCanvasInstanceId(body RID) Int {
	return self.ptr.API.PhysicsServer2D_body_get_canvas_instance_id(self, body)
}
func (self classPhysicsServer2D) BodySetContinuousCollisionDetectionMode(body RID, mode PhysicsServer2DCCDMode) {
	self.ptr.API.PhysicsServer2D_body_set_continuous_collision_detection_mode(self, body, mode)
}
func (self classPhysicsServer2D) BodyGetContinuousCollisionDetectionMode(body RID) PhysicsServer2DCCDMode {
	return self.ptr.API.PhysicsServer2D_body_get_continuous_collision_detection_mode(self, body)
}
func (self classPhysicsServer2D) BodySetCollisionLayer(body RID, layer Int) {
	self.ptr.API.PhysicsServer2D_body_set_collision_layer(self, body, layer)
}
func (self classPhysicsServer2D) BodyGetCollisionLayer(body RID) Int {
	return self.ptr.API.PhysicsServer2D_body_get_collision_layer(self, body)
}
func (self classPhysicsServer2D) BodySetCollisionMask(body RID, mask Int) {
	self.ptr.API.PhysicsServer2D_body_set_collision_mask(self, body, mask)
}
func (self classPhysicsServer2D) BodyGetCollisionMask(body RID) Int {
	return self.ptr.API.PhysicsServer2D_body_get_collision_mask(self, body)
}
func (self classPhysicsServer2D) BodySetCollisionPriority(body RID, priority Float) {
	self.ptr.API.PhysicsServer2D_body_set_collision_priority(self, body, priority)
}
func (self classPhysicsServer2D) BodyGetCollisionPriority(body RID) Float {
	return self.ptr.API.PhysicsServer2D_body_get_collision_priority(self, body)
}
func (self classPhysicsServer2D) BodySetParam(body RID, param PhysicsServer2DBodyParameter, value Variant) {
	self.ptr.API.PhysicsServer2D_body_set_param(self, body, param, value)
}
func (self classPhysicsServer2D) BodyGetParam(body RID, param PhysicsServer2DBodyParameter) Variant {
	return self.ptr.API.PhysicsServer2D_body_get_param(self, body, param)
}
func (self classPhysicsServer2D) BodyResetMassProperties(body RID) {
	self.ptr.API.PhysicsServer2D_body_reset_mass_properties(self, body)
}
func (self classPhysicsServer2D) BodySetState(body RID, state PhysicsServer2DBodyState, value Variant) {
	self.ptr.API.PhysicsServer2D_body_set_state(self, body, state, value)
}
func (self classPhysicsServer2D) BodyGetState(body RID, state PhysicsServer2DBodyState) Variant {
	return self.ptr.API.PhysicsServer2D_body_get_state(self, body, state)
}
func (self classPhysicsServer2D) BodyApplyCentralImpulse(body RID, impulse Vector2) {
	self.ptr.API.PhysicsServer2D_body_apply_central_impulse(self, body, impulse)
}
func (self classPhysicsServer2D) BodyApplyTorqueImpulse(body RID, impulse Float) {
	self.ptr.API.PhysicsServer2D_body_apply_torque_impulse(self, body, impulse)
}
func (self classPhysicsServer2D) BodyApplyImpulse(body RID, impulse Vector2, position Vector2) {
	self.ptr.API.PhysicsServer2D_body_apply_impulse(self, body, impulse, position)
}
func (self classPhysicsServer2D) BodyApplyCentralForce(body RID, force Vector2) {
	self.ptr.API.PhysicsServer2D_body_apply_central_force(self, body, force)
}
func (self classPhysicsServer2D) BodyApplyForce(body RID, force Vector2, position Vector2) {
	self.ptr.API.PhysicsServer2D_body_apply_force(self, body, force, position)
}
func (self classPhysicsServer2D) BodyApplyTorque(body RID, torque Float) {
	self.ptr.API.PhysicsServer2D_body_apply_torque(self, body, torque)
}
func (self classPhysicsServer2D) BodyAddConstantCentralForce(body RID, force Vector2) {
	self.ptr.API.PhysicsServer2D_body_add_constant_central_force(self, body, force)
}
func (self classPhysicsServer2D) BodyAddConstantForce(body RID, force Vector2, position Vector2) {
	self.ptr.API.PhysicsServer2D_body_add_constant_force(self, body, force, position)
}
func (self classPhysicsServer2D) BodyAddConstantTorque(body RID, torque Float) {
	self.ptr.API.PhysicsServer2D_body_add_constant_torque(self, body, torque)
}
func (self classPhysicsServer2D) BodySetConstantForce(body RID, force Vector2) {
	self.ptr.API.PhysicsServer2D_body_set_constant_force(self, body, force)
}
func (self classPhysicsServer2D) BodyGetConstantForce(body RID) Vector2 {
	return self.ptr.API.PhysicsServer2D_body_get_constant_force(self, body)
}
func (self classPhysicsServer2D) BodySetConstantTorque(body RID, torque Float) {
	self.ptr.API.PhysicsServer2D_body_set_constant_torque(self, body, torque)
}
func (self classPhysicsServer2D) BodyGetConstantTorque(body RID) Float {
	return self.ptr.API.PhysicsServer2D_body_get_constant_torque(self, body)
}
func (self classPhysicsServer2D) BodySetAxisVelocity(body RID, axis_velocity Vector2) {
	self.ptr.API.PhysicsServer2D_body_set_axis_velocity(self, body, axis_velocity)
}
func (self classPhysicsServer2D) BodyAddCollisionException(body RID, excepted_body RID) {
	self.ptr.API.PhysicsServer2D_body_add_collision_exception(self, body, excepted_body)
}
func (self classPhysicsServer2D) BodyRemoveCollisionException(body RID, excepted_body RID) {
	self.ptr.API.PhysicsServer2D_body_remove_collision_exception(self, body, excepted_body)
}
func (self classPhysicsServer2D) BodySetMaxContactsReported(body RID, amount Int) {
	self.ptr.API.PhysicsServer2D_body_set_max_contacts_reported(self, body, amount)
}
func (self classPhysicsServer2D) BodyGetMaxContactsReported(body RID) Int {
	return self.ptr.API.PhysicsServer2D_body_get_max_contacts_reported(self, body)
}
func (self classPhysicsServer2D) BodySetOmitForceIntegration(body RID, enable bool) {
	self.ptr.API.PhysicsServer2D_body_set_omit_force_integration(self, body, enable)
}
func (self classPhysicsServer2D) BodyIsOmittingForceIntegration(body RID) bool {
	return self.ptr.API.PhysicsServer2D_body_is_omitting_force_integration(self, body)
}
func (self classPhysicsServer2D) BodySetForceIntegrationCallback(body RID, callable Callable, userdata Variant) {
	self.ptr.API.PhysicsServer2D_body_set_force_integration_callback(self, body, callable, userdata)
}
func (self classPhysicsServer2D) BodyTestMotion(body RID, parameters PhysicsTestMotionParameters2D, result PhysicsTestMotionResult2D) bool {
	return self.ptr.API.PhysicsServer2D_body_test_motion(self, body, parameters, result)
}
func (self classPhysicsServer2D) BodyGetDirectState(body RID) PhysicsDirectBodyState2D {
	return self.ptr.API.PhysicsServer2D_body_get_direct_state(self, body)
}
func (self classPhysicsServer2D) JointCreate() RID {
	return self.ptr.API.PhysicsServer2D_joint_create(self)
}
func (self classPhysicsServer2D) JointClear(joint RID) {
	self.ptr.API.PhysicsServer2D_joint_clear(self, joint)
}
func (self classPhysicsServer2D) JointSetParam(joint RID, param PhysicsServer2DJointParam, value Float) {
	self.ptr.API.PhysicsServer2D_joint_set_param(self, joint, param, value)
}
func (self classPhysicsServer2D) JointGetParam(joint RID, param PhysicsServer2DJointParam) Float {
	return self.ptr.API.PhysicsServer2D_joint_get_param(self, joint, param)
}
func (self classPhysicsServer2D) JointDisableCollisionsBetweenBodies(joint RID, disable bool) {
	self.ptr.API.PhysicsServer2D_joint_disable_collisions_between_bodies(self, joint, disable)
}
func (self classPhysicsServer2D) JointIsDisabledCollisionsBetweenBodies(joint RID) bool {
	return self.ptr.API.PhysicsServer2D_joint_is_disabled_collisions_between_bodies(self, joint)
}
func (self classPhysicsServer2D) JointMakePin(joint RID, anchor Vector2, body_a RID, body_b RID) {
	self.ptr.API.PhysicsServer2D_joint_make_pin(self, joint, anchor, body_a, body_b)
}
func (self classPhysicsServer2D) JointMakeGroove(joint RID, groove1_a Vector2, groove2_a Vector2, anchor_b Vector2, body_a RID, body_b RID) {
	self.ptr.API.PhysicsServer2D_joint_make_groove(self, joint, groove1_a, groove2_a, anchor_b, body_a, body_b)
}
func (self classPhysicsServer2D) JointMakeDampedSpring(joint RID, anchor_a Vector2, anchor_b Vector2, body_a RID, body_b RID) {
	self.ptr.API.PhysicsServer2D_joint_make_damped_spring(self, joint, anchor_a, anchor_b, body_a, body_b)
}
func (self classPhysicsServer2D) PinJointSetFlag(joint RID, flag PhysicsServer2DPinJointFlag, enabled bool) {
	self.ptr.API.PhysicsServer2D_pin_joint_set_flag(self, joint, flag, enabled)
}
func (self classPhysicsServer2D) PinJointGetFlag(joint RID, flag PhysicsServer2DPinJointFlag) bool {
	return self.ptr.API.PhysicsServer2D_pin_joint_get_flag(self, joint, flag)
}
func (self classPhysicsServer2D) PinJointSetParam(joint RID, param PhysicsServer2DPinJointParam, value Float) {
	self.ptr.API.PhysicsServer2D_pin_joint_set_param(self, joint, param, value)
}
func (self classPhysicsServer2D) PinJointGetParam(joint RID, param PhysicsServer2DPinJointParam) Float {
	return self.ptr.API.PhysicsServer2D_pin_joint_get_param(self, joint, param)
}
func (self classPhysicsServer2D) DampedSpringJointSetParam(joint RID, param PhysicsServer2DDampedSpringParam, value Float) {
	self.ptr.API.PhysicsServer2D_damped_spring_joint_set_param(self, joint, param, value)
}
func (self classPhysicsServer2D) DampedSpringJointGetParam(joint RID, param PhysicsServer2DDampedSpringParam) Float {
	return self.ptr.API.PhysicsServer2D_damped_spring_joint_get_param(self, joint, param)
}
func (self classPhysicsServer2D) JointGetType(joint RID) PhysicsServer2DJointType {
	return self.ptr.API.PhysicsServer2D_joint_get_type(self, joint)
}
func (self classPhysicsServer2D) FreeRid(rid RID) {
	self.ptr.API.PhysicsServer2D_free_rid(self, rid)
}
func (self classPhysicsServer2D) SetActive(active bool) {
	self.ptr.API.PhysicsServer2D_set_active(self, active)
}
func (self classPhysicsServer2D) GetProcessInfo(process_info PhysicsServer2DProcessInfo) Int {
	return self.ptr.API.PhysicsServer2D_get_process_info(self, process_info)
}

type classPhysicsServer2DExtension struct {
	Class[classPhysicsServer2DExtension]
}

func (self classPhysicsServer2DExtension) Super() PhysicsServer2D {
	var super PhysicsServer2D
	super.ptr = self.ptr
	return super
}

func (self classPhysicsServer2DExtension) PhysicsServer2D() PhysicsServer2D { return self.Super() }
func (self classPhysicsServer2DExtension) BodyTestMotionIsExcludingBody(body RID) bool {
	return self.ptr.API.PhysicsServer2DExtension_body_test_motion_is_excluding_body(self, body)
}
func (self classPhysicsServer2DExtension) BodyTestMotionIsExcludingObject(object Int) bool {
	return self.ptr.API.PhysicsServer2DExtension_body_test_motion_is_excluding_object(self, object)
}

type classPhysicsServer2DManager struct {
	Class[classPhysicsServer2DManager]
}

func (self classPhysicsServer2DManager) Super() Object {
	var super Object
	super.ptr = self.ptr
	return super
}

func (self classPhysicsServer2DManager) Object() Object { return self.Super() }

func (self classPhysicsServer2DManager) isSingleton() {}
func (self classPhysicsServer2DManager) RegisterServer(name String, create_callback Callable) {
	self.ptr.API.PhysicsServer2DManager_register_server(self, name, create_callback)
}
func (self classPhysicsServer2DManager) SetDefaultServer(name String, priority Int) {
	self.ptr.API.PhysicsServer2DManager_set_default_server(self, name, priority)
}

type classPhysicsServer3D struct{ Class[classPhysicsServer3D] }

func (self classPhysicsServer3D) Super() Object { var super Object; super.ptr = self.ptr; return super }

func (self classPhysicsServer3D) Object() Object { return self.Super() }

func (self classPhysicsServer3D) isSingleton() {}
func (self classPhysicsServer3D) WorldBoundaryShapeCreate() RID {
	return self.ptr.API.PhysicsServer3D_world_boundary_shape_create(self)
}
func (self classPhysicsServer3D) SeparationRayShapeCreate() RID {
	return self.ptr.API.PhysicsServer3D_separation_ray_shape_create(self)
}
func (self classPhysicsServer3D) SphereShapeCreate() RID {
	return self.ptr.API.PhysicsServer3D_sphere_shape_create(self)
}
func (self classPhysicsServer3D) BoxShapeCreate() RID {
	return self.ptr.API.PhysicsServer3D_box_shape_create(self)
}
func (self classPhysicsServer3D) CapsuleShapeCreate() RID {
	return self.ptr.API.PhysicsServer3D_capsule_shape_create(self)
}
func (self classPhysicsServer3D) CylinderShapeCreate() RID {
	return self.ptr.API.PhysicsServer3D_cylinder_shape_create(self)
}
func (self classPhysicsServer3D) ConvexPolygonShapeCreate() RID {
	return self.ptr.API.PhysicsServer3D_convex_polygon_shape_create(self)
}
func (self classPhysicsServer3D) ConcavePolygonShapeCreate() RID {
	return self.ptr.API.PhysicsServer3D_concave_polygon_shape_create(self)
}
func (self classPhysicsServer3D) HeightmapShapeCreate() RID {
	return self.ptr.API.PhysicsServer3D_heightmap_shape_create(self)
}
func (self classPhysicsServer3D) CustomShapeCreate() RID {
	return self.ptr.API.PhysicsServer3D_custom_shape_create(self)
}
func (self classPhysicsServer3D) ShapeSetData(shape RID, data Variant) {
	self.ptr.API.PhysicsServer3D_shape_set_data(self, shape, data)
}
func (self classPhysicsServer3D) ShapeGetType(shape RID) PhysicsServer3DShapeType {
	return self.ptr.API.PhysicsServer3D_shape_get_type(self, shape)
}
func (self classPhysicsServer3D) ShapeGetData(shape RID) Variant {
	return self.ptr.API.PhysicsServer3D_shape_get_data(self, shape)
}
func (self classPhysicsServer3D) SpaceCreate() RID {
	return self.ptr.API.PhysicsServer3D_space_create(self)
}
func (self classPhysicsServer3D) SpaceSetActive(space RID, active bool) {
	self.ptr.API.PhysicsServer3D_space_set_active(self, space, active)
}
func (self classPhysicsServer3D) SpaceIsActive(space RID) bool {
	return self.ptr.API.PhysicsServer3D_space_is_active(self, space)
}
func (self classPhysicsServer3D) SpaceSetParam(space RID, param PhysicsServer3DSpaceParameter, value Float) {
	self.ptr.API.PhysicsServer3D_space_set_param(self, space, param, value)
}
func (self classPhysicsServer3D) SpaceGetParam(space RID, param PhysicsServer3DSpaceParameter) Float {
	return self.ptr.API.PhysicsServer3D_space_get_param(self, space, param)
}
func (self classPhysicsServer3D) SpaceGetDirectState(space RID) PhysicsDirectSpaceState3D {
	return self.ptr.API.PhysicsServer3D_space_get_direct_state(self, space)
}
func (self classPhysicsServer3D) AreaCreate() RID {
	return self.ptr.API.PhysicsServer3D_area_create(self)
}
func (self classPhysicsServer3D) AreaSetSpace(area RID, space RID) {
	self.ptr.API.PhysicsServer3D_area_set_space(self, area, space)
}
func (self classPhysicsServer3D) AreaGetSpace(area RID) RID {
	return self.ptr.API.PhysicsServer3D_area_get_space(self, area)
}
func (self classPhysicsServer3D) AreaAddShape(area RID, shape RID, transform Transform3D, disabled bool) {
	self.ptr.API.PhysicsServer3D_area_add_shape(self, area, shape, transform, disabled)
}
func (self classPhysicsServer3D) AreaSetShape(area RID, shape_idx Int, shape RID) {
	self.ptr.API.PhysicsServer3D_area_set_shape(self, area, shape_idx, shape)
}
func (self classPhysicsServer3D) AreaSetShapeTransform(area RID, shape_idx Int, transform Transform3D) {
	self.ptr.API.PhysicsServer3D_area_set_shape_transform(self, area, shape_idx, transform)
}
func (self classPhysicsServer3D) AreaSetShapeDisabled(area RID, shape_idx Int, disabled bool) {
	self.ptr.API.PhysicsServer3D_area_set_shape_disabled(self, area, shape_idx, disabled)
}
func (self classPhysicsServer3D) AreaGetShapeCount(area RID) Int {
	return self.ptr.API.PhysicsServer3D_area_get_shape_count(self, area)
}
func (self classPhysicsServer3D) AreaGetShape(area RID, shape_idx Int) RID {
	return self.ptr.API.PhysicsServer3D_area_get_shape(self, area, shape_idx)
}
func (self classPhysicsServer3D) AreaGetShapeTransform(area RID, shape_idx Int) Transform3D {
	return self.ptr.API.PhysicsServer3D_area_get_shape_transform(self, area, shape_idx)
}
func (self classPhysicsServer3D) AreaRemoveShape(area RID, shape_idx Int) {
	self.ptr.API.PhysicsServer3D_area_remove_shape(self, area, shape_idx)
}
func (self classPhysicsServer3D) AreaClearShapes(area RID) {
	self.ptr.API.PhysicsServer3D_area_clear_shapes(self, area)
}
func (self classPhysicsServer3D) AreaSetCollisionLayer(area RID, layer Int) {
	self.ptr.API.PhysicsServer3D_area_set_collision_layer(self, area, layer)
}
func (self classPhysicsServer3D) AreaGetCollisionLayer(area RID) Int {
	return self.ptr.API.PhysicsServer3D_area_get_collision_layer(self, area)
}
func (self classPhysicsServer3D) AreaSetCollisionMask(area RID, mask Int) {
	self.ptr.API.PhysicsServer3D_area_set_collision_mask(self, area, mask)
}
func (self classPhysicsServer3D) AreaGetCollisionMask(area RID) Int {
	return self.ptr.API.PhysicsServer3D_area_get_collision_mask(self, area)
}
func (self classPhysicsServer3D) AreaSetParam(area RID, param PhysicsServer3DAreaParameter, value Variant) {
	self.ptr.API.PhysicsServer3D_area_set_param(self, area, param, value)
}
func (self classPhysicsServer3D) AreaSetTransform(area RID, transform Transform3D) {
	self.ptr.API.PhysicsServer3D_area_set_transform(self, area, transform)
}
func (self classPhysicsServer3D) AreaGetParam(area RID, param PhysicsServer3DAreaParameter) Variant {
	return self.ptr.API.PhysicsServer3D_area_get_param(self, area, param)
}
func (self classPhysicsServer3D) AreaGetTransform(area RID) Transform3D {
	return self.ptr.API.PhysicsServer3D_area_get_transform(self, area)
}
func (self classPhysicsServer3D) AreaAttachObjectInstanceId(area RID, id Int) {
	self.ptr.API.PhysicsServer3D_area_attach_object_instance_id(self, area, id)
}
func (self classPhysicsServer3D) AreaGetObjectInstanceId(area RID) Int {
	return self.ptr.API.PhysicsServer3D_area_get_object_instance_id(self, area)
}
func (self classPhysicsServer3D) AreaSetMonitorCallback(area RID, callback Callable) {
	self.ptr.API.PhysicsServer3D_area_set_monitor_callback(self, area, callback)
}
func (self classPhysicsServer3D) AreaSetAreaMonitorCallback(area RID, callback Callable) {
	self.ptr.API.PhysicsServer3D_area_set_area_monitor_callback(self, area, callback)
}
func (self classPhysicsServer3D) AreaSetMonitorable(area RID, monitorable bool) {
	self.ptr.API.PhysicsServer3D_area_set_monitorable(self, area, monitorable)
}
func (self classPhysicsServer3D) AreaSetRayPickable(area RID, enable bool) {
	self.ptr.API.PhysicsServer3D_area_set_ray_pickable(self, area, enable)
}
func (self classPhysicsServer3D) BodyCreate() RID {
	return self.ptr.API.PhysicsServer3D_body_create(self)
}
func (self classPhysicsServer3D) BodySetSpace(body RID, space RID) {
	self.ptr.API.PhysicsServer3D_body_set_space(self, body, space)
}
func (self classPhysicsServer3D) BodyGetSpace(body RID) RID {
	return self.ptr.API.PhysicsServer3D_body_get_space(self, body)
}
func (self classPhysicsServer3D) BodySetMode(body RID, mode PhysicsServer3DBodyMode) {
	self.ptr.API.PhysicsServer3D_body_set_mode(self, body, mode)
}
func (self classPhysicsServer3D) BodyGetMode(body RID) PhysicsServer3DBodyMode {
	return self.ptr.API.PhysicsServer3D_body_get_mode(self, body)
}
func (self classPhysicsServer3D) BodySetCollisionLayer(body RID, layer Int) {
	self.ptr.API.PhysicsServer3D_body_set_collision_layer(self, body, layer)
}
func (self classPhysicsServer3D) BodyGetCollisionLayer(body RID) Int {
	return self.ptr.API.PhysicsServer3D_body_get_collision_layer(self, body)
}
func (self classPhysicsServer3D) BodySetCollisionMask(body RID, mask Int) {
	self.ptr.API.PhysicsServer3D_body_set_collision_mask(self, body, mask)
}
func (self classPhysicsServer3D) BodyGetCollisionMask(body RID) Int {
	return self.ptr.API.PhysicsServer3D_body_get_collision_mask(self, body)
}
func (self classPhysicsServer3D) BodySetCollisionPriority(body RID, priority Float) {
	self.ptr.API.PhysicsServer3D_body_set_collision_priority(self, body, priority)
}
func (self classPhysicsServer3D) BodyGetCollisionPriority(body RID) Float {
	return self.ptr.API.PhysicsServer3D_body_get_collision_priority(self, body)
}
func (self classPhysicsServer3D) BodyAddShape(body RID, shape RID, transform Transform3D, disabled bool) {
	self.ptr.API.PhysicsServer3D_body_add_shape(self, body, shape, transform, disabled)
}
func (self classPhysicsServer3D) BodySetShape(body RID, shape_idx Int, shape RID) {
	self.ptr.API.PhysicsServer3D_body_set_shape(self, body, shape_idx, shape)
}
func (self classPhysicsServer3D) BodySetShapeTransform(body RID, shape_idx Int, transform Transform3D) {
	self.ptr.API.PhysicsServer3D_body_set_shape_transform(self, body, shape_idx, transform)
}
func (self classPhysicsServer3D) BodySetShapeDisabled(body RID, shape_idx Int, disabled bool) {
	self.ptr.API.PhysicsServer3D_body_set_shape_disabled(self, body, shape_idx, disabled)
}
func (self classPhysicsServer3D) BodyGetShapeCount(body RID) Int {
	return self.ptr.API.PhysicsServer3D_body_get_shape_count(self, body)
}
func (self classPhysicsServer3D) BodyGetShape(body RID, shape_idx Int) RID {
	return self.ptr.API.PhysicsServer3D_body_get_shape(self, body, shape_idx)
}
func (self classPhysicsServer3D) BodyGetShapeTransform(body RID, shape_idx Int) Transform3D {
	return self.ptr.API.PhysicsServer3D_body_get_shape_transform(self, body, shape_idx)
}
func (self classPhysicsServer3D) BodyRemoveShape(body RID, shape_idx Int) {
	self.ptr.API.PhysicsServer3D_body_remove_shape(self, body, shape_idx)
}
func (self classPhysicsServer3D) BodyClearShapes(body RID) {
	self.ptr.API.PhysicsServer3D_body_clear_shapes(self, body)
}
func (self classPhysicsServer3D) BodyAttachObjectInstanceId(body RID, id Int) {
	self.ptr.API.PhysicsServer3D_body_attach_object_instance_id(self, body, id)
}
func (self classPhysicsServer3D) BodyGetObjectInstanceId(body RID) Int {
	return self.ptr.API.PhysicsServer3D_body_get_object_instance_id(self, body)
}
func (self classPhysicsServer3D) BodySetEnableContinuousCollisionDetection(body RID, enable bool) {
	self.ptr.API.PhysicsServer3D_body_set_enable_continuous_collision_detection(self, body, enable)
}
func (self classPhysicsServer3D) BodyIsContinuousCollisionDetectionEnabled(body RID) bool {
	return self.ptr.API.PhysicsServer3D_body_is_continuous_collision_detection_enabled(self, body)
}
func (self classPhysicsServer3D) BodySetParam(body RID, param PhysicsServer3DBodyParameter, value Variant) {
	self.ptr.API.PhysicsServer3D_body_set_param(self, body, param, value)
}
func (self classPhysicsServer3D) BodyGetParam(body RID, param PhysicsServer3DBodyParameter) Variant {
	return self.ptr.API.PhysicsServer3D_body_get_param(self, body, param)
}
func (self classPhysicsServer3D) BodyResetMassProperties(body RID) {
	self.ptr.API.PhysicsServer3D_body_reset_mass_properties(self, body)
}
func (self classPhysicsServer3D) BodySetState(body RID, state PhysicsServer3DBodyState, value Variant) {
	self.ptr.API.PhysicsServer3D_body_set_state(self, body, state, value)
}
func (self classPhysicsServer3D) BodyGetState(body RID, state PhysicsServer3DBodyState) Variant {
	return self.ptr.API.PhysicsServer3D_body_get_state(self, body, state)
}
func (self classPhysicsServer3D) BodyApplyCentralImpulse(body RID, impulse Vector3) {
	self.ptr.API.PhysicsServer3D_body_apply_central_impulse(self, body, impulse)
}
func (self classPhysicsServer3D) BodyApplyImpulse(body RID, impulse Vector3, position Vector3) {
	self.ptr.API.PhysicsServer3D_body_apply_impulse(self, body, impulse, position)
}
func (self classPhysicsServer3D) BodyApplyTorqueImpulse(body RID, impulse Vector3) {
	self.ptr.API.PhysicsServer3D_body_apply_torque_impulse(self, body, impulse)
}
func (self classPhysicsServer3D) BodyApplyCentralForce(body RID, force Vector3) {
	self.ptr.API.PhysicsServer3D_body_apply_central_force(self, body, force)
}
func (self classPhysicsServer3D) BodyApplyForce(body RID, force Vector3, position Vector3) {
	self.ptr.API.PhysicsServer3D_body_apply_force(self, body, force, position)
}
func (self classPhysicsServer3D) BodyApplyTorque(body RID, torque Vector3) {
	self.ptr.API.PhysicsServer3D_body_apply_torque(self, body, torque)
}
func (self classPhysicsServer3D) BodyAddConstantCentralForce(body RID, force Vector3) {
	self.ptr.API.PhysicsServer3D_body_add_constant_central_force(self, body, force)
}
func (self classPhysicsServer3D) BodyAddConstantForce(body RID, force Vector3, position Vector3) {
	self.ptr.API.PhysicsServer3D_body_add_constant_force(self, body, force, position)
}
func (self classPhysicsServer3D) BodyAddConstantTorque(body RID, torque Vector3) {
	self.ptr.API.PhysicsServer3D_body_add_constant_torque(self, body, torque)
}
func (self classPhysicsServer3D) BodySetConstantForce(body RID, force Vector3) {
	self.ptr.API.PhysicsServer3D_body_set_constant_force(self, body, force)
}
func (self classPhysicsServer3D) BodyGetConstantForce(body RID) Vector3 {
	return self.ptr.API.PhysicsServer3D_body_get_constant_force(self, body)
}
func (self classPhysicsServer3D) BodySetConstantTorque(body RID, torque Vector3) {
	self.ptr.API.PhysicsServer3D_body_set_constant_torque(self, body, torque)
}
func (self classPhysicsServer3D) BodyGetConstantTorque(body RID) Vector3 {
	return self.ptr.API.PhysicsServer3D_body_get_constant_torque(self, body)
}
func (self classPhysicsServer3D) BodySetAxisVelocity(body RID, axis_velocity Vector3) {
	self.ptr.API.PhysicsServer3D_body_set_axis_velocity(self, body, axis_velocity)
}
func (self classPhysicsServer3D) BodySetAxisLock(body RID, axis PhysicsServer3DBodyAxis, lock bool) {
	self.ptr.API.PhysicsServer3D_body_set_axis_lock(self, body, axis, lock)
}
func (self classPhysicsServer3D) BodyIsAxisLocked(body RID, axis PhysicsServer3DBodyAxis) bool {
	return self.ptr.API.PhysicsServer3D_body_is_axis_locked(self, body, axis)
}
func (self classPhysicsServer3D) BodyAddCollisionException(body RID, excepted_body RID) {
	self.ptr.API.PhysicsServer3D_body_add_collision_exception(self, body, excepted_body)
}
func (self classPhysicsServer3D) BodyRemoveCollisionException(body RID, excepted_body RID) {
	self.ptr.API.PhysicsServer3D_body_remove_collision_exception(self, body, excepted_body)
}
func (self classPhysicsServer3D) BodySetMaxContactsReported(body RID, amount Int) {
	self.ptr.API.PhysicsServer3D_body_set_max_contacts_reported(self, body, amount)
}
func (self classPhysicsServer3D) BodyGetMaxContactsReported(body RID) Int {
	return self.ptr.API.PhysicsServer3D_body_get_max_contacts_reported(self, body)
}
func (self classPhysicsServer3D) BodySetOmitForceIntegration(body RID, enable bool) {
	self.ptr.API.PhysicsServer3D_body_set_omit_force_integration(self, body, enable)
}
func (self classPhysicsServer3D) BodyIsOmittingForceIntegration(body RID) bool {
	return self.ptr.API.PhysicsServer3D_body_is_omitting_force_integration(self, body)
}
func (self classPhysicsServer3D) BodySetForceIntegrationCallback(body RID, callable Callable, userdata Variant) {
	self.ptr.API.PhysicsServer3D_body_set_force_integration_callback(self, body, callable, userdata)
}
func (self classPhysicsServer3D) BodySetRayPickable(body RID, enable bool) {
	self.ptr.API.PhysicsServer3D_body_set_ray_pickable(self, body, enable)
}
func (self classPhysicsServer3D) BodyTestMotion(body RID, parameters PhysicsTestMotionParameters3D, result PhysicsTestMotionResult3D) bool {
	return self.ptr.API.PhysicsServer3D_body_test_motion(self, body, parameters, result)
}
func (self classPhysicsServer3D) BodyGetDirectState(body RID) PhysicsDirectBodyState3D {
	return self.ptr.API.PhysicsServer3D_body_get_direct_state(self, body)
}
func (self classPhysicsServer3D) SoftBodyGetBounds(body RID) AABB {
	return self.ptr.API.PhysicsServer3D_soft_body_get_bounds(self, body)
}
func (self classPhysicsServer3D) JointCreate() RID {
	return self.ptr.API.PhysicsServer3D_joint_create(self)
}
func (self classPhysicsServer3D) JointClear(joint RID) {
	self.ptr.API.PhysicsServer3D_joint_clear(self, joint)
}
func (self classPhysicsServer3D) JointMakePin(joint RID, body_A RID, local_A Vector3, body_B RID, local_B Vector3) {
	self.ptr.API.PhysicsServer3D_joint_make_pin(self, joint, body_A, local_A, body_B, local_B)
}
func (self classPhysicsServer3D) PinJointSetParam(joint RID, param PhysicsServer3DPinJointParam, value Float) {
	self.ptr.API.PhysicsServer3D_pin_joint_set_param(self, joint, param, value)
}
func (self classPhysicsServer3D) PinJointGetParam(joint RID, param PhysicsServer3DPinJointParam) Float {
	return self.ptr.API.PhysicsServer3D_pin_joint_get_param(self, joint, param)
}
func (self classPhysicsServer3D) PinJointSetLocalA(joint RID, local_A Vector3) {
	self.ptr.API.PhysicsServer3D_pin_joint_set_local_a(self, joint, local_A)
}
func (self classPhysicsServer3D) PinJointGetLocalA(joint RID) Vector3 {
	return self.ptr.API.PhysicsServer3D_pin_joint_get_local_a(self, joint)
}
func (self classPhysicsServer3D) PinJointSetLocalB(joint RID, local_B Vector3) {
	self.ptr.API.PhysicsServer3D_pin_joint_set_local_b(self, joint, local_B)
}
func (self classPhysicsServer3D) PinJointGetLocalB(joint RID) Vector3 {
	return self.ptr.API.PhysicsServer3D_pin_joint_get_local_b(self, joint)
}
func (self classPhysicsServer3D) JointMakeHinge(joint RID, body_A RID, hinge_A Transform3D, body_B RID, hinge_B Transform3D) {
	self.ptr.API.PhysicsServer3D_joint_make_hinge(self, joint, body_A, hinge_A, body_B, hinge_B)
}
func (self classPhysicsServer3D) HingeJointSetParam(joint RID, param PhysicsServer3DHingeJointParam, value Float) {
	self.ptr.API.PhysicsServer3D_hinge_joint_set_param(self, joint, param, value)
}
func (self classPhysicsServer3D) HingeJointGetParam(joint RID, param PhysicsServer3DHingeJointParam) Float {
	return self.ptr.API.PhysicsServer3D_hinge_joint_get_param(self, joint, param)
}
func (self classPhysicsServer3D) HingeJointSetFlag(joint RID, flag PhysicsServer3DHingeJointFlag, enabled bool) {
	self.ptr.API.PhysicsServer3D_hinge_joint_set_flag(self, joint, flag, enabled)
}
func (self classPhysicsServer3D) HingeJointGetFlag(joint RID, flag PhysicsServer3DHingeJointFlag) bool {
	return self.ptr.API.PhysicsServer3D_hinge_joint_get_flag(self, joint, flag)
}
func (self classPhysicsServer3D) JointMakeSlider(joint RID, body_A RID, local_ref_A Transform3D, body_B RID, local_ref_B Transform3D) {
	self.ptr.API.PhysicsServer3D_joint_make_slider(self, joint, body_A, local_ref_A, body_B, local_ref_B)
}
func (self classPhysicsServer3D) SliderJointSetParam(joint RID, param PhysicsServer3DSliderJointParam, value Float) {
	self.ptr.API.PhysicsServer3D_slider_joint_set_param(self, joint, param, value)
}
func (self classPhysicsServer3D) SliderJointGetParam(joint RID, param PhysicsServer3DSliderJointParam) Float {
	return self.ptr.API.PhysicsServer3D_slider_joint_get_param(self, joint, param)
}
func (self classPhysicsServer3D) JointMakeConeTwist(joint RID, body_A RID, local_ref_A Transform3D, body_B RID, local_ref_B Transform3D) {
	self.ptr.API.PhysicsServer3D_joint_make_cone_twist(self, joint, body_A, local_ref_A, body_B, local_ref_B)
}
func (self classPhysicsServer3D) ConeTwistJointSetParam(joint RID, param PhysicsServer3DConeTwistJointParam, value Float) {
	self.ptr.API.PhysicsServer3D_cone_twist_joint_set_param(self, joint, param, value)
}
func (self classPhysicsServer3D) ConeTwistJointGetParam(joint RID, param PhysicsServer3DConeTwistJointParam) Float {
	return self.ptr.API.PhysicsServer3D_cone_twist_joint_get_param(self, joint, param)
}
func (self classPhysicsServer3D) JointGetType(joint RID) PhysicsServer3DJointType {
	return self.ptr.API.PhysicsServer3D_joint_get_type(self, joint)
}
func (self classPhysicsServer3D) JointSetSolverPriority(joint RID, priority Int) {
	self.ptr.API.PhysicsServer3D_joint_set_solver_priority(self, joint, priority)
}
func (self classPhysicsServer3D) JointGetSolverPriority(joint RID) Int {
	return self.ptr.API.PhysicsServer3D_joint_get_solver_priority(self, joint)
}
func (self classPhysicsServer3D) JointDisableCollisionsBetweenBodies(joint RID, disable bool) {
	self.ptr.API.PhysicsServer3D_joint_disable_collisions_between_bodies(self, joint, disable)
}
func (self classPhysicsServer3D) JointIsDisabledCollisionsBetweenBodies(joint RID) bool {
	return self.ptr.API.PhysicsServer3D_joint_is_disabled_collisions_between_bodies(self, joint)
}
func (self classPhysicsServer3D) JointMakeGeneric6dof(joint RID, body_A RID, local_ref_A Transform3D, body_B RID, local_ref_B Transform3D) {
	self.ptr.API.PhysicsServer3D_joint_make_generic_6dof(self, joint, body_A, local_ref_A, body_B, local_ref_B)
}
func (self classPhysicsServer3D) Generic6dofJointSetParam(joint RID, axis Vector3Axis, param PhysicsServer3DG6DOFJointAxisParam, value Float) {
	self.ptr.API.PhysicsServer3D_generic_6dof_joint_set_param(self, joint, axis, param, value)
}
func (self classPhysicsServer3D) Generic6dofJointGetParam(joint RID, axis Vector3Axis, param PhysicsServer3DG6DOFJointAxisParam) Float {
	return self.ptr.API.PhysicsServer3D_generic_6dof_joint_get_param(self, joint, axis, param)
}
func (self classPhysicsServer3D) Generic6dofJointSetFlag(joint RID, axis Vector3Axis, flag PhysicsServer3DG6DOFJointAxisFlag, enable bool) {
	self.ptr.API.PhysicsServer3D_generic_6dof_joint_set_flag(self, joint, axis, flag, enable)
}
func (self classPhysicsServer3D) Generic6dofJointGetFlag(joint RID, axis Vector3Axis, flag PhysicsServer3DG6DOFJointAxisFlag) bool {
	return self.ptr.API.PhysicsServer3D_generic_6dof_joint_get_flag(self, joint, axis, flag)
}
func (self classPhysicsServer3D) FreeRid(rid RID) {
	self.ptr.API.PhysicsServer3D_free_rid(self, rid)
}
func (self classPhysicsServer3D) SetActive(active bool) {
	self.ptr.API.PhysicsServer3D_set_active(self, active)
}
func (self classPhysicsServer3D) GetProcessInfo(process_info PhysicsServer3DProcessInfo) Int {
	return self.ptr.API.PhysicsServer3D_get_process_info(self, process_info)
}

type classPhysicsServer3DExtension struct {
	Class[classPhysicsServer3DExtension]
}

func (self classPhysicsServer3DExtension) Super() PhysicsServer3D {
	var super PhysicsServer3D
	super.ptr = self.ptr
	return super
}

func (self classPhysicsServer3DExtension) PhysicsServer3D() PhysicsServer3D { return self.Super() }
func (self classPhysicsServer3DExtension) BodyTestMotionIsExcludingBody(body RID) bool {
	return self.ptr.API.PhysicsServer3DExtension_body_test_motion_is_excluding_body(self, body)
}
func (self classPhysicsServer3DExtension) BodyTestMotionIsExcludingObject(object Int) bool {
	return self.ptr.API.PhysicsServer3DExtension_body_test_motion_is_excluding_object(self, object)
}

type classPhysicsServer3DManager struct {
	Class[classPhysicsServer3DManager]
}

func (self classPhysicsServer3DManager) Super() Object {
	var super Object
	super.ptr = self.ptr
	return super
}

func (self classPhysicsServer3DManager) Object() Object { return self.Super() }

func (self classPhysicsServer3DManager) isSingleton() {}
func (self classPhysicsServer3DManager) RegisterServer(name String, create_callback Callable) {
	self.ptr.API.PhysicsServer3DManager_register_server(self, name, create_callback)
}
func (self classPhysicsServer3DManager) SetDefaultServer(name String, priority Int) {
	self.ptr.API.PhysicsServer3DManager_set_default_server(self, name, priority)
}

type classPhysicsServer3DRenderingServerHandler struct {
	Class[classPhysicsServer3DRenderingServerHandler]
}

func (self classPhysicsServer3DRenderingServerHandler) Super() Object {
	var super Object
	super.ptr = self.ptr
	return super
}

func (self classPhysicsServer3DRenderingServerHandler) Object() Object { return self.Super() }
func (self classPhysicsServer3DRenderingServerHandler) SetVertex(vertex_id Int, vertex Vector3) {
	self.ptr.API.PhysicsServer3DRenderingServerHandler_set_vertex(self, vertex_id, vertex)
}
func (self classPhysicsServer3DRenderingServerHandler) SetNormal(vertex_id Int, normal Vector3) {
	self.ptr.API.PhysicsServer3DRenderingServerHandler_set_normal(self, vertex_id, normal)
}
func (self classPhysicsServer3DRenderingServerHandler) SetAabb(aabb AABB) {
	self.ptr.API.PhysicsServer3DRenderingServerHandler_set_aabb(self, aabb)
}

type classPhysicsShapeQueryParameters2D struct {
	Class[classPhysicsShapeQueryParameters2D]
}

func (self classPhysicsShapeQueryParameters2D) Super() RefCounted {
	var super RefCounted
	super.ptr = self.ptr
	return super
}

func (self classPhysicsShapeQueryParameters2D) RefCounted() RefCounted { return self.Super() }
func (self classPhysicsShapeQueryParameters2D) SetShape(shape Resource) {
	self.ptr.API.PhysicsShapeQueryParameters2D_set_shape(self, shape)
}
func (self classPhysicsShapeQueryParameters2D) GetShape() Resource {
	return self.ptr.API.PhysicsShapeQueryParameters2D_get_shape(self)
}
func (self classPhysicsShapeQueryParameters2D) SetShapeRid(shape RID) {
	self.ptr.API.PhysicsShapeQueryParameters2D_set_shape_rid(self, shape)
}
func (self classPhysicsShapeQueryParameters2D) GetShapeRid() RID {
	return self.ptr.API.PhysicsShapeQueryParameters2D_get_shape_rid(self)
}
func (self classPhysicsShapeQueryParameters2D) SetTransform(transform Transform2D) {
	self.ptr.API.PhysicsShapeQueryParameters2D_set_transform(self, transform)
}
func (self classPhysicsShapeQueryParameters2D) GetTransform() Transform2D {
	return self.ptr.API.PhysicsShapeQueryParameters2D_get_transform(self)
}
func (self classPhysicsShapeQueryParameters2D) SetMotion(motion Vector2) {
	self.ptr.API.PhysicsShapeQueryParameters2D_set_motion(self, motion)
}
func (self classPhysicsShapeQueryParameters2D) GetMotion() Vector2 {
	return self.ptr.API.PhysicsShapeQueryParameters2D_get_motion(self)
}
func (self classPhysicsShapeQueryParameters2D) SetMargin(margin Float) {
	self.ptr.API.PhysicsShapeQueryParameters2D_set_margin(self, margin)
}
func (self classPhysicsShapeQueryParameters2D) GetMargin() Float {
	return self.ptr.API.PhysicsShapeQueryParameters2D_get_margin(self)
}
func (self classPhysicsShapeQueryParameters2D) SetCollisionMask(collision_mask Int) {
	self.ptr.API.PhysicsShapeQueryParameters2D_set_collision_mask(self, collision_mask)
}
func (self classPhysicsShapeQueryParameters2D) GetCollisionMask() Int {
	return self.ptr.API.PhysicsShapeQueryParameters2D_get_collision_mask(self)
}
func (self classPhysicsShapeQueryParameters2D) SetExclude(exclude ArrayOf[RID]) {
	self.ptr.API.PhysicsShapeQueryParameters2D_set_exclude(self, exclude)
}
func (self classPhysicsShapeQueryParameters2D) GetExclude() ArrayOf[RID] {
	return self.ptr.API.PhysicsShapeQueryParameters2D_get_exclude(self)
}
func (self classPhysicsShapeQueryParameters2D) SetCollideWithBodies(enable bool) {
	self.ptr.API.PhysicsShapeQueryParameters2D_set_collide_with_bodies(self, enable)
}
func (self classPhysicsShapeQueryParameters2D) IsCollideWithBodiesEnabled() bool {
	return self.ptr.API.PhysicsShapeQueryParameters2D_is_collide_with_bodies_enabled(self)
}
func (self classPhysicsShapeQueryParameters2D) SetCollideWithAreas(enable bool) {
	self.ptr.API.PhysicsShapeQueryParameters2D_set_collide_with_areas(self, enable)
}
func (self classPhysicsShapeQueryParameters2D) IsCollideWithAreasEnabled() bool {
	return self.ptr.API.PhysicsShapeQueryParameters2D_is_collide_with_areas_enabled(self)
}

type classPhysicsShapeQueryParameters3D struct {
	Class[classPhysicsShapeQueryParameters3D]
}

func (self classPhysicsShapeQueryParameters3D) Super() RefCounted {
	var super RefCounted
	super.ptr = self.ptr
	return super
}

func (self classPhysicsShapeQueryParameters3D) RefCounted() RefCounted { return self.Super() }
func (self classPhysicsShapeQueryParameters3D) SetShape(shape Resource) {
	self.ptr.API.PhysicsShapeQueryParameters3D_set_shape(self, shape)
}
func (self classPhysicsShapeQueryParameters3D) GetShape() Resource {
	return self.ptr.API.PhysicsShapeQueryParameters3D_get_shape(self)
}
func (self classPhysicsShapeQueryParameters3D) SetShapeRid(shape RID) {
	self.ptr.API.PhysicsShapeQueryParameters3D_set_shape_rid(self, shape)
}
func (self classPhysicsShapeQueryParameters3D) GetShapeRid() RID {
	return self.ptr.API.PhysicsShapeQueryParameters3D_get_shape_rid(self)
}
func (self classPhysicsShapeQueryParameters3D) SetTransform(transform Transform3D) {
	self.ptr.API.PhysicsShapeQueryParameters3D_set_transform(self, transform)
}
func (self classPhysicsShapeQueryParameters3D) GetTransform() Transform3D {
	return self.ptr.API.PhysicsShapeQueryParameters3D_get_transform(self)
}
func (self classPhysicsShapeQueryParameters3D) SetMotion(motion Vector3) {
	self.ptr.API.PhysicsShapeQueryParameters3D_set_motion(self, motion)
}
func (self classPhysicsShapeQueryParameters3D) GetMotion() Vector3 {
	return self.ptr.API.PhysicsShapeQueryParameters3D_get_motion(self)
}
func (self classPhysicsShapeQueryParameters3D) SetMargin(margin Float) {
	self.ptr.API.PhysicsShapeQueryParameters3D_set_margin(self, margin)
}
func (self classPhysicsShapeQueryParameters3D) GetMargin() Float {
	return self.ptr.API.PhysicsShapeQueryParameters3D_get_margin(self)
}
func (self classPhysicsShapeQueryParameters3D) SetCollisionMask(collision_mask Int) {
	self.ptr.API.PhysicsShapeQueryParameters3D_set_collision_mask(self, collision_mask)
}
func (self classPhysicsShapeQueryParameters3D) GetCollisionMask() Int {
	return self.ptr.API.PhysicsShapeQueryParameters3D_get_collision_mask(self)
}
func (self classPhysicsShapeQueryParameters3D) SetExclude(exclude ArrayOf[RID]) {
	self.ptr.API.PhysicsShapeQueryParameters3D_set_exclude(self, exclude)
}
func (self classPhysicsShapeQueryParameters3D) GetExclude() ArrayOf[RID] {
	return self.ptr.API.PhysicsShapeQueryParameters3D_get_exclude(self)
}
func (self classPhysicsShapeQueryParameters3D) SetCollideWithBodies(enable bool) {
	self.ptr.API.PhysicsShapeQueryParameters3D_set_collide_with_bodies(self, enable)
}
func (self classPhysicsShapeQueryParameters3D) IsCollideWithBodiesEnabled() bool {
	return self.ptr.API.PhysicsShapeQueryParameters3D_is_collide_with_bodies_enabled(self)
}
func (self classPhysicsShapeQueryParameters3D) SetCollideWithAreas(enable bool) {
	self.ptr.API.PhysicsShapeQueryParameters3D_set_collide_with_areas(self, enable)
}
func (self classPhysicsShapeQueryParameters3D) IsCollideWithAreasEnabled() bool {
	return self.ptr.API.PhysicsShapeQueryParameters3D_is_collide_with_areas_enabled(self)
}

type classPhysicsTestMotionParameters2D struct {
	Class[classPhysicsTestMotionParameters2D]
}

func (self classPhysicsTestMotionParameters2D) Super() RefCounted {
	var super RefCounted
	super.ptr = self.ptr
	return super
}

func (self classPhysicsTestMotionParameters2D) RefCounted() RefCounted { return self.Super() }
func (self classPhysicsTestMotionParameters2D) GetFrom() Transform2D {
	return self.ptr.API.PhysicsTestMotionParameters2D_get_from(self)
}
func (self classPhysicsTestMotionParameters2D) SetFrom(from Transform2D) {
	self.ptr.API.PhysicsTestMotionParameters2D_set_from(self, from)
}
func (self classPhysicsTestMotionParameters2D) GetMotion() Vector2 {
	return self.ptr.API.PhysicsTestMotionParameters2D_get_motion(self)
}
func (self classPhysicsTestMotionParameters2D) SetMotion(motion Vector2) {
	self.ptr.API.PhysicsTestMotionParameters2D_set_motion(self, motion)
}
func (self classPhysicsTestMotionParameters2D) GetMargin() Float {
	return self.ptr.API.PhysicsTestMotionParameters2D_get_margin(self)
}
func (self classPhysicsTestMotionParameters2D) SetMargin(margin Float) {
	self.ptr.API.PhysicsTestMotionParameters2D_set_margin(self, margin)
}
func (self classPhysicsTestMotionParameters2D) IsCollideSeparationRayEnabled() bool {
	return self.ptr.API.PhysicsTestMotionParameters2D_is_collide_separation_ray_enabled(self)
}
func (self classPhysicsTestMotionParameters2D) SetCollideSeparationRayEnabled(enabled bool) {
	self.ptr.API.PhysicsTestMotionParameters2D_set_collide_separation_ray_enabled(self, enabled)
}
func (self classPhysicsTestMotionParameters2D) GetExcludeBodies() ArrayOf[RID] {
	return self.ptr.API.PhysicsTestMotionParameters2D_get_exclude_bodies(self)
}
func (self classPhysicsTestMotionParameters2D) SetExcludeBodies(exclude_list ArrayOf[RID]) {
	self.ptr.API.PhysicsTestMotionParameters2D_set_exclude_bodies(self, exclude_list)
}
func (self classPhysicsTestMotionParameters2D) GetExcludeObjects() ArrayOf[Int] {
	return self.ptr.API.PhysicsTestMotionParameters2D_get_exclude_objects(self)
}
func (self classPhysicsTestMotionParameters2D) SetExcludeObjects(exclude_list ArrayOf[Int]) {
	self.ptr.API.PhysicsTestMotionParameters2D_set_exclude_objects(self, exclude_list)
}
func (self classPhysicsTestMotionParameters2D) IsRecoveryAsCollisionEnabled() bool {
	return self.ptr.API.PhysicsTestMotionParameters2D_is_recovery_as_collision_enabled(self)
}
func (self classPhysicsTestMotionParameters2D) SetRecoveryAsCollisionEnabled(enabled bool) {
	self.ptr.API.PhysicsTestMotionParameters2D_set_recovery_as_collision_enabled(self, enabled)
}

type classPhysicsTestMotionParameters3D struct {
	Class[classPhysicsTestMotionParameters3D]
}

func (self classPhysicsTestMotionParameters3D) Super() RefCounted {
	var super RefCounted
	super.ptr = self.ptr
	return super
}

func (self classPhysicsTestMotionParameters3D) RefCounted() RefCounted { return self.Super() }
func (self classPhysicsTestMotionParameters3D) GetFrom() Transform3D {
	return self.ptr.API.PhysicsTestMotionParameters3D_get_from(self)
}
func (self classPhysicsTestMotionParameters3D) SetFrom(from Transform3D) {
	self.ptr.API.PhysicsTestMotionParameters3D_set_from(self, from)
}
func (self classPhysicsTestMotionParameters3D) GetMotion() Vector3 {
	return self.ptr.API.PhysicsTestMotionParameters3D_get_motion(self)
}
func (self classPhysicsTestMotionParameters3D) SetMotion(motion Vector3) {
	self.ptr.API.PhysicsTestMotionParameters3D_set_motion(self, motion)
}
func (self classPhysicsTestMotionParameters3D) GetMargin() Float {
	return self.ptr.API.PhysicsTestMotionParameters3D_get_margin(self)
}
func (self classPhysicsTestMotionParameters3D) SetMargin(margin Float) {
	self.ptr.API.PhysicsTestMotionParameters3D_set_margin(self, margin)
}
func (self classPhysicsTestMotionParameters3D) GetMaxCollisions() Int {
	return self.ptr.API.PhysicsTestMotionParameters3D_get_max_collisions(self)
}
func (self classPhysicsTestMotionParameters3D) SetMaxCollisions(max_collisions Int) {
	self.ptr.API.PhysicsTestMotionParameters3D_set_max_collisions(self, max_collisions)
}
func (self classPhysicsTestMotionParameters3D) IsCollideSeparationRayEnabled() bool {
	return self.ptr.API.PhysicsTestMotionParameters3D_is_collide_separation_ray_enabled(self)
}
func (self classPhysicsTestMotionParameters3D) SetCollideSeparationRayEnabled(enabled bool) {
	self.ptr.API.PhysicsTestMotionParameters3D_set_collide_separation_ray_enabled(self, enabled)
}
func (self classPhysicsTestMotionParameters3D) GetExcludeBodies() ArrayOf[RID] {
	return self.ptr.API.PhysicsTestMotionParameters3D_get_exclude_bodies(self)
}
func (self classPhysicsTestMotionParameters3D) SetExcludeBodies(exclude_list ArrayOf[RID]) {
	self.ptr.API.PhysicsTestMotionParameters3D_set_exclude_bodies(self, exclude_list)
}
func (self classPhysicsTestMotionParameters3D) GetExcludeObjects() ArrayOf[Int] {
	return self.ptr.API.PhysicsTestMotionParameters3D_get_exclude_objects(self)
}
func (self classPhysicsTestMotionParameters3D) SetExcludeObjects(exclude_list ArrayOf[Int]) {
	self.ptr.API.PhysicsTestMotionParameters3D_set_exclude_objects(self, exclude_list)
}
func (self classPhysicsTestMotionParameters3D) IsRecoveryAsCollisionEnabled() bool {
	return self.ptr.API.PhysicsTestMotionParameters3D_is_recovery_as_collision_enabled(self)
}
func (self classPhysicsTestMotionParameters3D) SetRecoveryAsCollisionEnabled(enabled bool) {
	self.ptr.API.PhysicsTestMotionParameters3D_set_recovery_as_collision_enabled(self, enabled)
}

type classPhysicsTestMotionResult2D struct {
	Class[classPhysicsTestMotionResult2D]
}

func (self classPhysicsTestMotionResult2D) Super() RefCounted {
	var super RefCounted
	super.ptr = self.ptr
	return super
}

func (self classPhysicsTestMotionResult2D) RefCounted() RefCounted { return self.Super() }
func (self classPhysicsTestMotionResult2D) GetTravel() Vector2 {
	return self.ptr.API.PhysicsTestMotionResult2D_get_travel(self)
}
func (self classPhysicsTestMotionResult2D) GetRemainder() Vector2 {
	return self.ptr.API.PhysicsTestMotionResult2D_get_remainder(self)
}
func (self classPhysicsTestMotionResult2D) GetCollisionPoint() Vector2 {
	return self.ptr.API.PhysicsTestMotionResult2D_get_collision_point(self)
}
func (self classPhysicsTestMotionResult2D) GetCollisionNormal() Vector2 {
	return self.ptr.API.PhysicsTestMotionResult2D_get_collision_normal(self)
}
func (self classPhysicsTestMotionResult2D) GetColliderVelocity() Vector2 {
	return self.ptr.API.PhysicsTestMotionResult2D_get_collider_velocity(self)
}
func (self classPhysicsTestMotionResult2D) GetColliderId() Int {
	return self.ptr.API.PhysicsTestMotionResult2D_get_collider_id(self)
}
func (self classPhysicsTestMotionResult2D) GetColliderRid() RID {
	return self.ptr.API.PhysicsTestMotionResult2D_get_collider_rid(self)
}
func (self classPhysicsTestMotionResult2D) GetCollider() Object {
	return self.ptr.API.PhysicsTestMotionResult2D_get_collider(self)
}
func (self classPhysicsTestMotionResult2D) GetColliderShape() Int {
	return self.ptr.API.PhysicsTestMotionResult2D_get_collider_shape(self)
}
func (self classPhysicsTestMotionResult2D) GetCollisionLocalShape() Int {
	return self.ptr.API.PhysicsTestMotionResult2D_get_collision_local_shape(self)
}
func (self classPhysicsTestMotionResult2D) GetCollisionDepth() Float {
	return self.ptr.API.PhysicsTestMotionResult2D_get_collision_depth(self)
}
func (self classPhysicsTestMotionResult2D) GetCollisionSafeFraction() Float {
	return self.ptr.API.PhysicsTestMotionResult2D_get_collision_safe_fraction(self)
}
func (self classPhysicsTestMotionResult2D) GetCollisionUnsafeFraction() Float {
	return self.ptr.API.PhysicsTestMotionResult2D_get_collision_unsafe_fraction(self)
}

type classPhysicsTestMotionResult3D struct {
	Class[classPhysicsTestMotionResult3D]
}

func (self classPhysicsTestMotionResult3D) Super() RefCounted {
	var super RefCounted
	super.ptr = self.ptr
	return super
}

func (self classPhysicsTestMotionResult3D) RefCounted() RefCounted { return self.Super() }
func (self classPhysicsTestMotionResult3D) GetTravel() Vector3 {
	return self.ptr.API.PhysicsTestMotionResult3D_get_travel(self)
}
func (self classPhysicsTestMotionResult3D) GetRemainder() Vector3 {
	return self.ptr.API.PhysicsTestMotionResult3D_get_remainder(self)
}
func (self classPhysicsTestMotionResult3D) GetCollisionSafeFraction() Float {
	return self.ptr.API.PhysicsTestMotionResult3D_get_collision_safe_fraction(self)
}
func (self classPhysicsTestMotionResult3D) GetCollisionUnsafeFraction() Float {
	return self.ptr.API.PhysicsTestMotionResult3D_get_collision_unsafe_fraction(self)
}
func (self classPhysicsTestMotionResult3D) GetCollisionCount() Int {
	return self.ptr.API.PhysicsTestMotionResult3D_get_collision_count(self)
}
func (self classPhysicsTestMotionResult3D) GetCollisionPoint(collision_index Int) Vector3 {
	return self.ptr.API.PhysicsTestMotionResult3D_get_collision_point(self, collision_index)
}
func (self classPhysicsTestMotionResult3D) GetCollisionNormal(collision_index Int) Vector3 {
	return self.ptr.API.PhysicsTestMotionResult3D_get_collision_normal(self, collision_index)
}
func (self classPhysicsTestMotionResult3D) GetColliderVelocity(collision_index Int) Vector3 {
	return self.ptr.API.PhysicsTestMotionResult3D_get_collider_velocity(self, collision_index)
}
func (self classPhysicsTestMotionResult3D) GetColliderId(collision_index Int) Int {
	return self.ptr.API.PhysicsTestMotionResult3D_get_collider_id(self, collision_index)
}
func (self classPhysicsTestMotionResult3D) GetColliderRid(collision_index Int) RID {
	return self.ptr.API.PhysicsTestMotionResult3D_get_collider_rid(self, collision_index)
}
func (self classPhysicsTestMotionResult3D) GetCollider(collision_index Int) Object {
	return self.ptr.API.PhysicsTestMotionResult3D_get_collider(self, collision_index)
}
func (self classPhysicsTestMotionResult3D) GetColliderShape(collision_index Int) Int {
	return self.ptr.API.PhysicsTestMotionResult3D_get_collider_shape(self, collision_index)
}
func (self classPhysicsTestMotionResult3D) GetCollisionLocalShape(collision_index Int) Int {
	return self.ptr.API.PhysicsTestMotionResult3D_get_collision_local_shape(self, collision_index)
}
func (self classPhysicsTestMotionResult3D) GetCollisionDepth(collision_index Int) Float {
	return self.ptr.API.PhysicsTestMotionResult3D_get_collision_depth(self, collision_index)
}

type classPinJoint2D struct{ Class[classPinJoint2D] }

func (self classPinJoint2D) Super() Joint2D { var super Joint2D; super.ptr = self.ptr; return super }

func (self classPinJoint2D) Joint2D() Joint2D { return self.Super() }
func (self classPinJoint2D) SetSoftness(softness Float) {
	self.ptr.API.PinJoint2D_set_softness(self, softness)
}
func (self classPinJoint2D) GetSoftness() Float {
	return self.ptr.API.PinJoint2D_get_softness(self)
}
func (self classPinJoint2D) SetAngularLimitLower(angular_limit_lower Float) {
	self.ptr.API.PinJoint2D_set_angular_limit_lower(self, angular_limit_lower)
}
func (self classPinJoint2D) GetAngularLimitLower() Float {
	return self.ptr.API.PinJoint2D_get_angular_limit_lower(self)
}
func (self classPinJoint2D) SetAngularLimitUpper(angular_limit_upper Float) {
	self.ptr.API.PinJoint2D_set_angular_limit_upper(self, angular_limit_upper)
}
func (self classPinJoint2D) GetAngularLimitUpper() Float {
	return self.ptr.API.PinJoint2D_get_angular_limit_upper(self)
}
func (self classPinJoint2D) SetMotorTargetVelocity(motor_target_velocity Float) {
	self.ptr.API.PinJoint2D_set_motor_target_velocity(self, motor_target_velocity)
}
func (self classPinJoint2D) GetMotorTargetVelocity() Float {
	return self.ptr.API.PinJoint2D_get_motor_target_velocity(self)
}
func (self classPinJoint2D) SetMotorEnabled(enabled bool) {
	self.ptr.API.PinJoint2D_set_motor_enabled(self, enabled)
}
func (self classPinJoint2D) IsMotorEnabled() bool {
	return self.ptr.API.PinJoint2D_is_motor_enabled(self)
}
func (self classPinJoint2D) SetAngularLimitEnabled(enabled bool) {
	self.ptr.API.PinJoint2D_set_angular_limit_enabled(self, enabled)
}
func (self classPinJoint2D) IsAngularLimitEnabled() bool {
	return self.ptr.API.PinJoint2D_is_angular_limit_enabled(self)
}

type classPinJoint3D struct{ Class[classPinJoint3D] }

func (self classPinJoint3D) Super() Joint3D { var super Joint3D; super.ptr = self.ptr; return super }

func (self classPinJoint3D) Joint3D() Joint3D { return self.Super() }
func (self classPinJoint3D) SetParam(param PinJoint3DParam, value Float) {
	self.ptr.API.PinJoint3D_set_param(self, param, value)
}
func (self classPinJoint3D) GetParam(param PinJoint3DParam) Float {
	return self.ptr.API.PinJoint3D_get_param(self, param)
}

type classPlaceholderCubemap struct{ Class[classPlaceholderCubemap] }

func (self classPlaceholderCubemap) Super() PlaceholderTextureLayered {
	var super PlaceholderTextureLayered
	super.ptr = self.ptr
	return super
}

func (self classPlaceholderCubemap) PlaceholderTextureLayered() PlaceholderTextureLayered {
	return self.Super()
}

type classPlaceholderCubemapArray struct {
	Class[classPlaceholderCubemapArray]
}

func (self classPlaceholderCubemapArray) Super() PlaceholderTextureLayered {
	var super PlaceholderTextureLayered
	super.ptr = self.ptr
	return super
}

func (self classPlaceholderCubemapArray) PlaceholderTextureLayered() PlaceholderTextureLayered {
	return self.Super()
}

type classPlaceholderMaterial struct {
	Class[classPlaceholderMaterial]
}

func (self classPlaceholderMaterial) Super() Material {
	var super Material
	super.ptr = self.ptr
	return super
}

func (self classPlaceholderMaterial) Material() Material { return self.Super() }

type classPlaceholderMesh struct{ Class[classPlaceholderMesh] }

func (self classPlaceholderMesh) Super() Mesh { var super Mesh; super.ptr = self.ptr; return super }

func (self classPlaceholderMesh) Mesh() Mesh { return self.Super() }
func (self classPlaceholderMesh) SetAabb(aabb AABB) {
	self.ptr.API.PlaceholderMesh_set_aabb(self, aabb)
}

type classPlaceholderTexture2D struct {
	Class[classPlaceholderTexture2D]
}

func (self classPlaceholderTexture2D) Super() Texture2D {
	var super Texture2D
	super.ptr = self.ptr
	return super
}

func (self classPlaceholderTexture2D) Texture2D() Texture2D { return self.Super() }
func (self classPlaceholderTexture2D) SetSize(size Vector2) {
	self.ptr.API.PlaceholderTexture2D_set_size(self, size)
}

type classPlaceholderTexture2DArray struct {
	Class[classPlaceholderTexture2DArray]
}

func (self classPlaceholderTexture2DArray) Super() PlaceholderTextureLayered {
	var super PlaceholderTextureLayered
	super.ptr = self.ptr
	return super
}

func (self classPlaceholderTexture2DArray) PlaceholderTextureLayered() PlaceholderTextureLayered {
	return self.Super()
}

type classPlaceholderTexture3D struct {
	Class[classPlaceholderTexture3D]
}

func (self classPlaceholderTexture3D) Super() Texture3D {
	var super Texture3D
	super.ptr = self.ptr
	return super
}

func (self classPlaceholderTexture3D) Texture3D() Texture3D { return self.Super() }
func (self classPlaceholderTexture3D) SetSize(size Vector3i) {
	self.ptr.API.PlaceholderTexture3D_set_size(self, size)
}
func (self classPlaceholderTexture3D) GetSize() Vector3i {
	return self.ptr.API.PlaceholderTexture3D_get_size(self)
}

type classPlaceholderTextureLayered struct {
	Class[classPlaceholderTextureLayered]
}

func (self classPlaceholderTextureLayered) Super() TextureLayered {
	var super TextureLayered
	super.ptr = self.ptr
	return super
}

func (self classPlaceholderTextureLayered) TextureLayered() TextureLayered { return self.Super() }
func (self classPlaceholderTextureLayered) SetSize(size Vector2i) {
	self.ptr.API.PlaceholderTextureLayered_set_size(self, size)
}
func (self classPlaceholderTextureLayered) GetSize() Vector2i {
	return self.ptr.API.PlaceholderTextureLayered_get_size(self)
}
func (self classPlaceholderTextureLayered) SetLayers(layers Int) {
	self.ptr.API.PlaceholderTextureLayered_set_layers(self, layers)
}

type classPlaneMesh struct{ Class[classPlaneMesh] }

func (self classPlaneMesh) Super() PrimitiveMesh {
	var super PrimitiveMesh
	super.ptr = self.ptr
	return super
}

func (self classPlaneMesh) PrimitiveMesh() PrimitiveMesh { return self.Super() }
func (self classPlaneMesh) SetSize(size Vector2) {
	self.ptr.API.PlaneMesh_set_size(self, size)
}
func (self classPlaneMesh) GetSize() Vector2 {
	return self.ptr.API.PlaneMesh_get_size(self)
}
func (self classPlaneMesh) SetSubdivideWidth(subdivide Int) {
	self.ptr.API.PlaneMesh_set_subdivide_width(self, subdivide)
}
func (self classPlaneMesh) GetSubdivideWidth() Int {
	return self.ptr.API.PlaneMesh_get_subdivide_width(self)
}
func (self classPlaneMesh) SetSubdivideDepth(subdivide Int) {
	self.ptr.API.PlaneMesh_set_subdivide_depth(self, subdivide)
}
func (self classPlaneMesh) GetSubdivideDepth() Int {
	return self.ptr.API.PlaneMesh_get_subdivide_depth(self)
}
func (self classPlaneMesh) SetCenterOffset(offset Vector3) {
	self.ptr.API.PlaneMesh_set_center_offset(self, offset)
}
func (self classPlaneMesh) GetCenterOffset() Vector3 {
	return self.ptr.API.PlaneMesh_get_center_offset(self)
}
func (self classPlaneMesh) SetOrientation(orientation PlaneMeshOrientation) {
	self.ptr.API.PlaneMesh_set_orientation(self, orientation)
}
func (self classPlaneMesh) GetOrientation() PlaneMeshOrientation {
	return self.ptr.API.PlaneMesh_get_orientation(self)
}

type classPointLight2D struct{ Class[classPointLight2D] }

func (self classPointLight2D) Super() Light2D { var super Light2D; super.ptr = self.ptr; return super }

func (self classPointLight2D) Light2D() Light2D { return self.Super() }
func (self classPointLight2D) SetTexture(texture Texture2D) {
	self.ptr.API.PointLight2D_set_texture(self, texture)
}
func (self classPointLight2D) GetTexture() Texture2D {
	return self.ptr.API.PointLight2D_get_texture(self)
}
func (self classPointLight2D) SetTextureOffset(texture_offset Vector2) {
	self.ptr.API.PointLight2D_set_texture_offset(self, texture_offset)
}
func (self classPointLight2D) GetTextureOffset() Vector2 {
	return self.ptr.API.PointLight2D_get_texture_offset(self)
}
func (self classPointLight2D) SetTextureScale(texture_scale Float) {
	self.ptr.API.PointLight2D_set_texture_scale(self, texture_scale)
}
func (self classPointLight2D) GetTextureScale() Float {
	return self.ptr.API.PointLight2D_get_texture_scale(self)
}

type classPointMesh struct{ Class[classPointMesh] }

func (self classPointMesh) Super() PrimitiveMesh {
	var super PrimitiveMesh
	super.ptr = self.ptr
	return super
}

func (self classPointMesh) PrimitiveMesh() PrimitiveMesh { return self.Super() }

type classPolygon2D struct{ Class[classPolygon2D] }

func (self classPolygon2D) Super() Node2D { var super Node2D; super.ptr = self.ptr; return super }

func (self classPolygon2D) Node2D() Node2D { return self.Super() }
func (self classPolygon2D) SetPolygon(polygon PackedVector2Array) {
	self.ptr.API.Polygon2D_set_polygon(self, polygon)
}
func (self classPolygon2D) GetPolygon() PackedVector2Array {
	return self.ptr.API.Polygon2D_get_polygon(self)
}
func (self classPolygon2D) SetUv(uv PackedVector2Array) {
	self.ptr.API.Polygon2D_set_uv(self, uv)
}
func (self classPolygon2D) GetUv() PackedVector2Array {
	return self.ptr.API.Polygon2D_get_uv(self)
}
func (self classPolygon2D) SetColor(color Color) {
	self.ptr.API.Polygon2D_set_color(self, color)
}
func (self classPolygon2D) GetColor() Color {
	return self.ptr.API.Polygon2D_get_color(self)
}
func (self classPolygon2D) SetPolygons(polygons Array) {
	self.ptr.API.Polygon2D_set_polygons(self, polygons)
}
func (self classPolygon2D) GetPolygons() Array {
	return self.ptr.API.Polygon2D_get_polygons(self)
}
func (self classPolygon2D) SetVertexColors(vertex_colors PackedColorArray) {
	self.ptr.API.Polygon2D_set_vertex_colors(self, vertex_colors)
}
func (self classPolygon2D) GetVertexColors() PackedColorArray {
	return self.ptr.API.Polygon2D_get_vertex_colors(self)
}
func (self classPolygon2D) SetTexture(texture Texture2D) {
	self.ptr.API.Polygon2D_set_texture(self, texture)
}
func (self classPolygon2D) GetTexture() Texture2D {
	return self.ptr.API.Polygon2D_get_texture(self)
}
func (self classPolygon2D) SetTextureOffset(texture_offset Vector2) {
	self.ptr.API.Polygon2D_set_texture_offset(self, texture_offset)
}
func (self classPolygon2D) GetTextureOffset() Vector2 {
	return self.ptr.API.Polygon2D_get_texture_offset(self)
}
func (self classPolygon2D) SetTextureRotation(texture_rotation Float) {
	self.ptr.API.Polygon2D_set_texture_rotation(self, texture_rotation)
}
func (self classPolygon2D) GetTextureRotation() Float {
	return self.ptr.API.Polygon2D_get_texture_rotation(self)
}
func (self classPolygon2D) SetTextureScale(texture_scale Vector2) {
	self.ptr.API.Polygon2D_set_texture_scale(self, texture_scale)
}
func (self classPolygon2D) GetTextureScale() Vector2 {
	return self.ptr.API.Polygon2D_get_texture_scale(self)
}
func (self classPolygon2D) SetInvertEnabled(invert bool) {
	self.ptr.API.Polygon2D_set_invert_enabled(self, invert)
}
func (self classPolygon2D) GetInvertEnabled() bool {
	return self.ptr.API.Polygon2D_get_invert_enabled(self)
}
func (self classPolygon2D) SetAntialiased(antialiased bool) {
	self.ptr.API.Polygon2D_set_antialiased(self, antialiased)
}
func (self classPolygon2D) GetAntialiased() bool {
	return self.ptr.API.Polygon2D_get_antialiased(self)
}
func (self classPolygon2D) SetInvertBorder(invert_border Float) {
	self.ptr.API.Polygon2D_set_invert_border(self, invert_border)
}
func (self classPolygon2D) GetInvertBorder() Float {
	return self.ptr.API.Polygon2D_get_invert_border(self)
}
func (self classPolygon2D) SetOffset(offset Vector2) {
	self.ptr.API.Polygon2D_set_offset(self, offset)
}
func (self classPolygon2D) GetOffset() Vector2 {
	return self.ptr.API.Polygon2D_get_offset(self)
}
func (self classPolygon2D) AddBone(path NodePath, weights PackedFloat32Array) {
	self.ptr.API.Polygon2D_add_bone(self, path, weights)
}
func (self classPolygon2D) GetBoneCount() Int {
	return self.ptr.API.Polygon2D_get_bone_count(self)
}
func (self classPolygon2D) GetBonePath(index Int) NodePath {
	return self.ptr.API.Polygon2D_get_bone_path(self, index)
}
func (self classPolygon2D) GetBoneWeights(index Int) PackedFloat32Array {
	return self.ptr.API.Polygon2D_get_bone_weights(self, index)
}
func (self classPolygon2D) EraseBone(index Int) {
	self.ptr.API.Polygon2D_erase_bone(self, index)
}
func (self classPolygon2D) ClearBones() {
	self.ptr.API.Polygon2D_clear_bones(self)
}
func (self classPolygon2D) SetBonePath(index Int, path NodePath) {
	self.ptr.API.Polygon2D_set_bone_path(self, index, path)
}
func (self classPolygon2D) SetBoneWeights(index Int, weights PackedFloat32Array) {
	self.ptr.API.Polygon2D_set_bone_weights(self, index, weights)
}
func (self classPolygon2D) SetSkeleton(skeleton NodePath) {
	self.ptr.API.Polygon2D_set_skeleton(self, skeleton)
}
func (self classPolygon2D) GetSkeleton() NodePath {
	return self.ptr.API.Polygon2D_get_skeleton(self)
}
func (self classPolygon2D) SetInternalVertexCount(internal_vertex_count Int) {
	self.ptr.API.Polygon2D_set_internal_vertex_count(self, internal_vertex_count)
}
func (self classPolygon2D) GetInternalVertexCount() Int {
	return self.ptr.API.Polygon2D_get_internal_vertex_count(self)
}

type classPolygonOccluder3D struct{ Class[classPolygonOccluder3D] }

func (self classPolygonOccluder3D) Super() Occluder3D {
	var super Occluder3D
	super.ptr = self.ptr
	return super
}

func (self classPolygonOccluder3D) Occluder3D() Occluder3D { return self.Super() }
func (self classPolygonOccluder3D) SetPolygon(polygon PackedVector2Array) {
	self.ptr.API.PolygonOccluder3D_set_polygon(self, polygon)
}
func (self classPolygonOccluder3D) GetPolygon() PackedVector2Array {
	return self.ptr.API.PolygonOccluder3D_get_polygon(self)
}

type classPolygonPathFinder struct{ Class[classPolygonPathFinder] }

func (self classPolygonPathFinder) Super() Resource {
	var super Resource
	super.ptr = self.ptr
	return super
}

func (self classPolygonPathFinder) Resource() Resource { return self.Super() }
func (self classPolygonPathFinder) Setup(points PackedVector2Array, connections PackedInt32Array) {
	self.ptr.API.PolygonPathFinder_setup(self, points, connections)
}
func (self classPolygonPathFinder) FindPath(from Vector2, to Vector2) PackedVector2Array {
	return self.ptr.API.PolygonPathFinder_find_path(self, from, to)
}
func (self classPolygonPathFinder) GetIntersections(from Vector2, to Vector2) PackedVector2Array {
	return self.ptr.API.PolygonPathFinder_get_intersections(self, from, to)
}
func (self classPolygonPathFinder) GetClosestPoint(point Vector2) Vector2 {
	return self.ptr.API.PolygonPathFinder_get_closest_point(self, point)
}
func (self classPolygonPathFinder) IsPointInside(point Vector2) bool {
	return self.ptr.API.PolygonPathFinder_is_point_inside(self, point)
}
func (self classPolygonPathFinder) SetPointPenalty(idx Int, penalty Float) {
	self.ptr.API.PolygonPathFinder_set_point_penalty(self, idx, penalty)
}
func (self classPolygonPathFinder) GetPointPenalty(idx Int) Float {
	return self.ptr.API.PolygonPathFinder_get_point_penalty(self, idx)
}
func (self classPolygonPathFinder) GetBounds() Rect2 {
	return self.ptr.API.PolygonPathFinder_get_bounds(self)
}

type classPopup struct{ Class[classPopup] }

func (self classPopup) Super() Window { var super Window; super.ptr = self.ptr; return super }

func (self classPopup) Window() Window { return self.Super() }

type classPopupMenu struct{ Class[classPopupMenu] }

func (self classPopupMenu) Super() Popup { var super Popup; super.ptr = self.ptr; return super }

func (self classPopupMenu) Popup() Popup { return self.Super() }
func (self classPopupMenu) ActivateItemByEvent(event InputEvent, for_global_only bool) bool {
	return self.ptr.API.PopupMenu_activate_item_by_event(self, event, for_global_only)
}
func (self classPopupMenu) AddItem(label String, id Int, accel Key) {
	self.ptr.API.PopupMenu_add_item(self, label, id, accel)
}
func (self classPopupMenu) AddIconItem(texture Texture2D, label String, id Int, accel Key) {
	self.ptr.API.PopupMenu_add_icon_item(self, texture, label, id, accel)
}
func (self classPopupMenu) AddCheckItem(label String, id Int, accel Key) {
	self.ptr.API.PopupMenu_add_check_item(self, label, id, accel)
}
func (self classPopupMenu) AddIconCheckItem(texture Texture2D, label String, id Int, accel Key) {
	self.ptr.API.PopupMenu_add_icon_check_item(self, texture, label, id, accel)
}
func (self classPopupMenu) AddRadioCheckItem(label String, id Int, accel Key) {
	self.ptr.API.PopupMenu_add_radio_check_item(self, label, id, accel)
}
func (self classPopupMenu) AddIconRadioCheckItem(texture Texture2D, label String, id Int, accel Key) {
	self.ptr.API.PopupMenu_add_icon_radio_check_item(self, texture, label, id, accel)
}
func (self classPopupMenu) AddMultistateItem(label String, max_states Int, default_state Int, id Int, accel Key) {
	self.ptr.API.PopupMenu_add_multistate_item(self, label, max_states, default_state, id, accel)
}
func (self classPopupMenu) AddShortcut(shortcut Shortcut, id Int, global bool, allow_echo bool) {
	self.ptr.API.PopupMenu_add_shortcut(self, shortcut, id, global, allow_echo)
}
func (self classPopupMenu) AddIconShortcut(texture Texture2D, shortcut Shortcut, id Int, global bool, allow_echo bool) {
	self.ptr.API.PopupMenu_add_icon_shortcut(self, texture, shortcut, id, global, allow_echo)
}
func (self classPopupMenu) AddCheckShortcut(shortcut Shortcut, id Int, global bool) {
	self.ptr.API.PopupMenu_add_check_shortcut(self, shortcut, id, global)
}
func (self classPopupMenu) AddIconCheckShortcut(texture Texture2D, shortcut Shortcut, id Int, global bool) {
	self.ptr.API.PopupMenu_add_icon_check_shortcut(self, texture, shortcut, id, global)
}
func (self classPopupMenu) AddRadioCheckShortcut(shortcut Shortcut, id Int, global bool) {
	self.ptr.API.PopupMenu_add_radio_check_shortcut(self, shortcut, id, global)
}
func (self classPopupMenu) AddIconRadioCheckShortcut(texture Texture2D, shortcut Shortcut, id Int, global bool) {
	self.ptr.API.PopupMenu_add_icon_radio_check_shortcut(self, texture, shortcut, id, global)
}
func (self classPopupMenu) AddSubmenuItem(label String, submenu String, id Int) {
	self.ptr.API.PopupMenu_add_submenu_item(self, label, submenu, id)
}
func (self classPopupMenu) SetItemText(index Int, text String) {
	self.ptr.API.PopupMenu_set_item_text(self, index, text)
}
func (self classPopupMenu) SetItemTextDirection(index Int, direction ControlTextDirection) {
	self.ptr.API.PopupMenu_set_item_text_direction(self, index, direction)
}
func (self classPopupMenu) SetItemLanguage(index Int, language String) {
	self.ptr.API.PopupMenu_set_item_language(self, index, language)
}
func (self classPopupMenu) SetItemIcon(index Int, icon Texture2D) {
	self.ptr.API.PopupMenu_set_item_icon(self, index, icon)
}
func (self classPopupMenu) SetItemIconMaxWidth(index Int, width Int) {
	self.ptr.API.PopupMenu_set_item_icon_max_width(self, index, width)
}
func (self classPopupMenu) SetItemIconModulate(index Int, modulate Color) {
	self.ptr.API.PopupMenu_set_item_icon_modulate(self, index, modulate)
}
func (self classPopupMenu) SetItemChecked(index Int, checked bool) {
	self.ptr.API.PopupMenu_set_item_checked(self, index, checked)
}
func (self classPopupMenu) SetItemId(index Int, id Int) {
	self.ptr.API.PopupMenu_set_item_id(self, index, id)
}
func (self classPopupMenu) SetItemAccelerator(index Int, accel Key) {
	self.ptr.API.PopupMenu_set_item_accelerator(self, index, accel)
}
func (self classPopupMenu) SetItemMetadata(index Int, metadata Variant) {
	self.ptr.API.PopupMenu_set_item_metadata(self, index, metadata)
}
func (self classPopupMenu) SetItemDisabled(index Int, disabled bool) {
	self.ptr.API.PopupMenu_set_item_disabled(self, index, disabled)
}
func (self classPopupMenu) SetItemSubmenu(index Int, submenu String) {
	self.ptr.API.PopupMenu_set_item_submenu(self, index, submenu)
}
func (self classPopupMenu) SetItemAsSeparator(index Int, enable bool) {
	self.ptr.API.PopupMenu_set_item_as_separator(self, index, enable)
}
func (self classPopupMenu) SetItemAsCheckable(index Int, enable bool) {
	self.ptr.API.PopupMenu_set_item_as_checkable(self, index, enable)
}
func (self classPopupMenu) SetItemAsRadioCheckable(index Int, enable bool) {
	self.ptr.API.PopupMenu_set_item_as_radio_checkable(self, index, enable)
}
func (self classPopupMenu) SetItemTooltip(index Int, tooltip String) {
	self.ptr.API.PopupMenu_set_item_tooltip(self, index, tooltip)
}
func (self classPopupMenu) SetItemShortcut(index Int, shortcut Shortcut, global bool) {
	self.ptr.API.PopupMenu_set_item_shortcut(self, index, shortcut, global)
}
func (self classPopupMenu) SetItemIndent(index Int, indent Int) {
	self.ptr.API.PopupMenu_set_item_indent(self, index, indent)
}
func (self classPopupMenu) SetItemMultistate(index Int, state Int) {
	self.ptr.API.PopupMenu_set_item_multistate(self, index, state)
}
func (self classPopupMenu) SetItemShortcutDisabled(index Int, disabled bool) {
	self.ptr.API.PopupMenu_set_item_shortcut_disabled(self, index, disabled)
}
func (self classPopupMenu) ToggleItemChecked(index Int) {
	self.ptr.API.PopupMenu_toggle_item_checked(self, index)
}
func (self classPopupMenu) ToggleItemMultistate(index Int) {
	self.ptr.API.PopupMenu_toggle_item_multistate(self, index)
}
func (self classPopupMenu) GetItemText(index Int) String {
	return self.ptr.API.PopupMenu_get_item_text(self, index)
}
func (self classPopupMenu) GetItemTextDirection(index Int) ControlTextDirection {
	return self.ptr.API.PopupMenu_get_item_text_direction(self, index)
}
func (self classPopupMenu) GetItemLanguage(index Int) String {
	return self.ptr.API.PopupMenu_get_item_language(self, index)
}
func (self classPopupMenu) GetItemIcon(index Int) Texture2D {
	return self.ptr.API.PopupMenu_get_item_icon(self, index)
}
func (self classPopupMenu) GetItemIconMaxWidth(index Int) Int {
	return self.ptr.API.PopupMenu_get_item_icon_max_width(self, index)
}
func (self classPopupMenu) GetItemIconModulate(index Int) Color {
	return self.ptr.API.PopupMenu_get_item_icon_modulate(self, index)
}
func (self classPopupMenu) IsItemChecked(index Int) bool {
	return self.ptr.API.PopupMenu_is_item_checked(self, index)
}
func (self classPopupMenu) GetItemId(index Int) Int {
	return self.ptr.API.PopupMenu_get_item_id(self, index)
}
func (self classPopupMenu) GetItemIndex(id Int) Int {
	return self.ptr.API.PopupMenu_get_item_index(self, id)
}
func (self classPopupMenu) GetItemAccelerator(index Int) Key {
	return self.ptr.API.PopupMenu_get_item_accelerator(self, index)
}
func (self classPopupMenu) GetItemMetadata(index Int) Variant {
	return self.ptr.API.PopupMenu_get_item_metadata(self, index)
}
func (self classPopupMenu) IsItemDisabled(index Int) bool {
	return self.ptr.API.PopupMenu_is_item_disabled(self, index)
}
func (self classPopupMenu) GetItemSubmenu(index Int) String {
	return self.ptr.API.PopupMenu_get_item_submenu(self, index)
}
func (self classPopupMenu) IsItemSeparator(index Int) bool {
	return self.ptr.API.PopupMenu_is_item_separator(self, index)
}
func (self classPopupMenu) IsItemCheckable(index Int) bool {
	return self.ptr.API.PopupMenu_is_item_checkable(self, index)
}
func (self classPopupMenu) IsItemRadioCheckable(index Int) bool {
	return self.ptr.API.PopupMenu_is_item_radio_checkable(self, index)
}
func (self classPopupMenu) IsItemShortcutDisabled(index Int) bool {
	return self.ptr.API.PopupMenu_is_item_shortcut_disabled(self, index)
}
func (self classPopupMenu) GetItemTooltip(index Int) String {
	return self.ptr.API.PopupMenu_get_item_tooltip(self, index)
}
func (self classPopupMenu) GetItemShortcut(index Int) Shortcut {
	return self.ptr.API.PopupMenu_get_item_shortcut(self, index)
}
func (self classPopupMenu) GetItemIndent(index Int) Int {
	return self.ptr.API.PopupMenu_get_item_indent(self, index)
}
func (self classPopupMenu) SetFocusedItem(index Int) {
	self.ptr.API.PopupMenu_set_focused_item(self, index)
}
func (self classPopupMenu) GetFocusedItem() Int {
	return self.ptr.API.PopupMenu_get_focused_item(self)
}
func (self classPopupMenu) SetItemCount(count Int) {
	self.ptr.API.PopupMenu_set_item_count(self, count)
}
func (self classPopupMenu) GetItemCount() Int {
	return self.ptr.API.PopupMenu_get_item_count(self)
}
func (self classPopupMenu) ScrollToItem(index Int) {
	self.ptr.API.PopupMenu_scroll_to_item(self, index)
}
func (self classPopupMenu) RemoveItem(index Int) {
	self.ptr.API.PopupMenu_remove_item(self, index)
}
func (self classPopupMenu) AddSeparator(label String, id Int) {
	self.ptr.API.PopupMenu_add_separator(self, label, id)
}
func (self classPopupMenu) Clear(free_submenus bool) {
	self.ptr.API.PopupMenu_clear(self, free_submenus)
}
func (self classPopupMenu) SetHideOnItemSelection(enable bool) {
	self.ptr.API.PopupMenu_set_hide_on_item_selection(self, enable)
}
func (self classPopupMenu) IsHideOnItemSelection() bool {
	return self.ptr.API.PopupMenu_is_hide_on_item_selection(self)
}
func (self classPopupMenu) SetHideOnCheckableItemSelection(enable bool) {
	self.ptr.API.PopupMenu_set_hide_on_checkable_item_selection(self, enable)
}
func (self classPopupMenu) IsHideOnCheckableItemSelection() bool {
	return self.ptr.API.PopupMenu_is_hide_on_checkable_item_selection(self)
}
func (self classPopupMenu) SetHideOnStateItemSelection(enable bool) {
	self.ptr.API.PopupMenu_set_hide_on_state_item_selection(self, enable)
}
func (self classPopupMenu) IsHideOnStateItemSelection() bool {
	return self.ptr.API.PopupMenu_is_hide_on_state_item_selection(self)
}
func (self classPopupMenu) SetSubmenuPopupDelay(seconds Float) {
	self.ptr.API.PopupMenu_set_submenu_popup_delay(self, seconds)
}
func (self classPopupMenu) GetSubmenuPopupDelay() Float {
	return self.ptr.API.PopupMenu_get_submenu_popup_delay(self)
}
func (self classPopupMenu) SetAllowSearch(allow bool) {
	self.ptr.API.PopupMenu_set_allow_search(self, allow)
}
func (self classPopupMenu) GetAllowSearch() bool {
	return self.ptr.API.PopupMenu_get_allow_search(self)
}
func (self classPopupMenu) IsSystemMenu() bool {
	return self.ptr.API.PopupMenu_is_system_menu(self)
}
func (self classPopupMenu) SetSystemMenuRoot(special String) {
	self.ptr.API.PopupMenu_set_system_menu_root(self, special)
}
func (self classPopupMenu) GetSystemMenuRoot() String {
	return self.ptr.API.PopupMenu_get_system_menu_root(self)
}

type classPopupPanel struct{ Class[classPopupPanel] }

func (self classPopupPanel) Super() Popup { var super Popup; super.ptr = self.ptr; return super }

func (self classPopupPanel) Popup() Popup { return self.Super() }

type classPortableCompressedTexture2D struct {
	Class[classPortableCompressedTexture2D]
}

func (self classPortableCompressedTexture2D) Super() Texture2D {
	var super Texture2D
	super.ptr = self.ptr
	return super
}

func (self classPortableCompressedTexture2D) Texture2D() Texture2D { return self.Super() }
func (self classPortableCompressedTexture2D) CreateFromImage(image Image, compression_mode PortableCompressedTexture2DCompressionMode, normal_map bool, lossy_quality Float) {
	self.ptr.API.PortableCompressedTexture2D_create_from_image(self, image, compression_mode, normal_map, lossy_quality)
}
func (self classPortableCompressedTexture2D) GetFormat() ImageFormat {
	return self.ptr.API.PortableCompressedTexture2D_get_format(self)
}
func (self classPortableCompressedTexture2D) GetCompressionMode() PortableCompressedTexture2DCompressionMode {
	return self.ptr.API.PortableCompressedTexture2D_get_compression_mode(self)
}
func (self classPortableCompressedTexture2D) SetSizeOverride(size Vector2) {
	self.ptr.API.PortableCompressedTexture2D_set_size_override(self, size)
}
func (self classPortableCompressedTexture2D) GetSizeOverride() Vector2 {
	return self.ptr.API.PortableCompressedTexture2D_get_size_override(self)
}
func (self classPortableCompressedTexture2D) SetKeepCompressedBuffer(keep bool) {
	self.ptr.API.PortableCompressedTexture2D_set_keep_compressed_buffer(self, keep)
}
func (self classPortableCompressedTexture2D) IsKeepingCompressedBuffer() bool {
	return self.ptr.API.PortableCompressedTexture2D_is_keeping_compressed_buffer(self)
}
func (self classPortableCompressedTexture2D) SetKeepAllCompressedBuffers(keep bool) {
	self.ptr.API.PortableCompressedTexture2D_set_keep_all_compressed_buffers(self, keep)
}
func (self classPortableCompressedTexture2D) IsKeepingAllCompressedBuffers() bool {
	return self.ptr.API.PortableCompressedTexture2D_is_keeping_all_compressed_buffers(self)
}

type classPrimitiveMesh struct{ Class[classPrimitiveMesh] }

func (self classPrimitiveMesh) Super() Mesh { var super Mesh; super.ptr = self.ptr; return super }

func (self classPrimitiveMesh) Mesh() Mesh { return self.Super() }
func (self classPrimitiveMesh) SetMaterial(material Material) {
	self.ptr.API.PrimitiveMesh_set_material(self, material)
}
func (self classPrimitiveMesh) GetMaterial() Material {
	return self.ptr.API.PrimitiveMesh_get_material(self)
}
func (self classPrimitiveMesh) GetMeshArrays() Array {
	return self.ptr.API.PrimitiveMesh_get_mesh_arrays(self)
}
func (self classPrimitiveMesh) SetCustomAabb(aabb AABB) {
	self.ptr.API.PrimitiveMesh_set_custom_aabb(self, aabb)
}
func (self classPrimitiveMesh) GetCustomAabb() AABB {
	return self.ptr.API.PrimitiveMesh_get_custom_aabb(self)
}
func (self classPrimitiveMesh) SetFlipFaces(flip_faces bool) {
	self.ptr.API.PrimitiveMesh_set_flip_faces(self, flip_faces)
}
func (self classPrimitiveMesh) GetFlipFaces() bool {
	return self.ptr.API.PrimitiveMesh_get_flip_faces(self)
}
func (self classPrimitiveMesh) SetAddUv2(add_uv2 bool) {
	self.ptr.API.PrimitiveMesh_set_add_uv2(self, add_uv2)
}
func (self classPrimitiveMesh) GetAddUv2() bool {
	return self.ptr.API.PrimitiveMesh_get_add_uv2(self)
}
func (self classPrimitiveMesh) SetUv2Padding(uv2_padding Float) {
	self.ptr.API.PrimitiveMesh_set_uv2_padding(self, uv2_padding)
}
func (self classPrimitiveMesh) GetUv2Padding() Float {
	return self.ptr.API.PrimitiveMesh_get_uv2_padding(self)
}

type classPrismMesh struct{ Class[classPrismMesh] }

func (self classPrismMesh) Super() PrimitiveMesh {
	var super PrimitiveMesh
	super.ptr = self.ptr
	return super
}

func (self classPrismMesh) PrimitiveMesh() PrimitiveMesh { return self.Super() }
func (self classPrismMesh) SetLeftToRight(left_to_right Float) {
	self.ptr.API.PrismMesh_set_left_to_right(self, left_to_right)
}
func (self classPrismMesh) GetLeftToRight() Float {
	return self.ptr.API.PrismMesh_get_left_to_right(self)
}
func (self classPrismMesh) SetSize(size Vector3) {
	self.ptr.API.PrismMesh_set_size(self, size)
}
func (self classPrismMesh) GetSize() Vector3 {
	return self.ptr.API.PrismMesh_get_size(self)
}
func (self classPrismMesh) SetSubdivideWidth(segments Int) {
	self.ptr.API.PrismMesh_set_subdivide_width(self, segments)
}
func (self classPrismMesh) GetSubdivideWidth() Int {
	return self.ptr.API.PrismMesh_get_subdivide_width(self)
}
func (self classPrismMesh) SetSubdivideHeight(segments Int) {
	self.ptr.API.PrismMesh_set_subdivide_height(self, segments)
}
func (self classPrismMesh) GetSubdivideHeight() Int {
	return self.ptr.API.PrismMesh_get_subdivide_height(self)
}
func (self classPrismMesh) SetSubdivideDepth(segments Int) {
	self.ptr.API.PrismMesh_set_subdivide_depth(self, segments)
}
func (self classPrismMesh) GetSubdivideDepth() Int {
	return self.ptr.API.PrismMesh_get_subdivide_depth(self)
}

type classProceduralSkyMaterial struct {
	Class[classProceduralSkyMaterial]
}

func (self classProceduralSkyMaterial) Super() Material {
	var super Material
	super.ptr = self.ptr
	return super
}

func (self classProceduralSkyMaterial) Material() Material { return self.Super() }
func (self classProceduralSkyMaterial) SetSkyTopColor(color Color) {
	self.ptr.API.ProceduralSkyMaterial_set_sky_top_color(self, color)
}
func (self classProceduralSkyMaterial) GetSkyTopColor() Color {
	return self.ptr.API.ProceduralSkyMaterial_get_sky_top_color(self)
}
func (self classProceduralSkyMaterial) SetSkyHorizonColor(color Color) {
	self.ptr.API.ProceduralSkyMaterial_set_sky_horizon_color(self, color)
}
func (self classProceduralSkyMaterial) GetSkyHorizonColor() Color {
	return self.ptr.API.ProceduralSkyMaterial_get_sky_horizon_color(self)
}
func (self classProceduralSkyMaterial) SetSkyCurve(curve Float) {
	self.ptr.API.ProceduralSkyMaterial_set_sky_curve(self, curve)
}
func (self classProceduralSkyMaterial) GetSkyCurve() Float {
	return self.ptr.API.ProceduralSkyMaterial_get_sky_curve(self)
}
func (self classProceduralSkyMaterial) SetSkyEnergyMultiplier(multiplier Float) {
	self.ptr.API.ProceduralSkyMaterial_set_sky_energy_multiplier(self, multiplier)
}
func (self classProceduralSkyMaterial) GetSkyEnergyMultiplier() Float {
	return self.ptr.API.ProceduralSkyMaterial_get_sky_energy_multiplier(self)
}
func (self classProceduralSkyMaterial) SetSkyCover(sky_cover Texture2D) {
	self.ptr.API.ProceduralSkyMaterial_set_sky_cover(self, sky_cover)
}
func (self classProceduralSkyMaterial) GetSkyCover() Texture2D {
	return self.ptr.API.ProceduralSkyMaterial_get_sky_cover(self)
}
func (self classProceduralSkyMaterial) SetSkyCoverModulate(color Color) {
	self.ptr.API.ProceduralSkyMaterial_set_sky_cover_modulate(self, color)
}
func (self classProceduralSkyMaterial) GetSkyCoverModulate() Color {
	return self.ptr.API.ProceduralSkyMaterial_get_sky_cover_modulate(self)
}
func (self classProceduralSkyMaterial) SetGroundBottomColor(color Color) {
	self.ptr.API.ProceduralSkyMaterial_set_ground_bottom_color(self, color)
}
func (self classProceduralSkyMaterial) GetGroundBottomColor() Color {
	return self.ptr.API.ProceduralSkyMaterial_get_ground_bottom_color(self)
}
func (self classProceduralSkyMaterial) SetGroundHorizonColor(color Color) {
	self.ptr.API.ProceduralSkyMaterial_set_ground_horizon_color(self, color)
}
func (self classProceduralSkyMaterial) GetGroundHorizonColor() Color {
	return self.ptr.API.ProceduralSkyMaterial_get_ground_horizon_color(self)
}
func (self classProceduralSkyMaterial) SetGroundCurve(curve Float) {
	self.ptr.API.ProceduralSkyMaterial_set_ground_curve(self, curve)
}
func (self classProceduralSkyMaterial) GetGroundCurve() Float {
	return self.ptr.API.ProceduralSkyMaterial_get_ground_curve(self)
}
func (self classProceduralSkyMaterial) SetGroundEnergyMultiplier(energy Float) {
	self.ptr.API.ProceduralSkyMaterial_set_ground_energy_multiplier(self, energy)
}
func (self classProceduralSkyMaterial) GetGroundEnergyMultiplier() Float {
	return self.ptr.API.ProceduralSkyMaterial_get_ground_energy_multiplier(self)
}
func (self classProceduralSkyMaterial) SetSunAngleMax(degrees Float) {
	self.ptr.API.ProceduralSkyMaterial_set_sun_angle_max(self, degrees)
}
func (self classProceduralSkyMaterial) GetSunAngleMax() Float {
	return self.ptr.API.ProceduralSkyMaterial_get_sun_angle_max(self)
}
func (self classProceduralSkyMaterial) SetSunCurve(curve Float) {
	self.ptr.API.ProceduralSkyMaterial_set_sun_curve(self, curve)
}
func (self classProceduralSkyMaterial) GetSunCurve() Float {
	return self.ptr.API.ProceduralSkyMaterial_get_sun_curve(self)
}
func (self classProceduralSkyMaterial) SetUseDebanding(use_debanding bool) {
	self.ptr.API.ProceduralSkyMaterial_set_use_debanding(self, use_debanding)
}
func (self classProceduralSkyMaterial) GetUseDebanding() bool {
	return self.ptr.API.ProceduralSkyMaterial_get_use_debanding(self)
}
func (self classProceduralSkyMaterial) SetEnergyMultiplier(multiplier Float) {
	self.ptr.API.ProceduralSkyMaterial_set_energy_multiplier(self, multiplier)
}
func (self classProceduralSkyMaterial) GetEnergyMultiplier() Float {
	return self.ptr.API.ProceduralSkyMaterial_get_energy_multiplier(self)
}

type classProgressBar struct{ Class[classProgressBar] }

func (self classProgressBar) Super() Range { var super Range; super.ptr = self.ptr; return super }

func (self classProgressBar) Range() Range { return self.Super() }
func (self classProgressBar) SetFillMode(mode Int) {
	self.ptr.API.ProgressBar_set_fill_mode(self, mode)
}
func (self classProgressBar) GetFillMode() Int {
	return self.ptr.API.ProgressBar_get_fill_mode(self)
}
func (self classProgressBar) SetShowPercentage(visible bool) {
	self.ptr.API.ProgressBar_set_show_percentage(self, visible)
}
func (self classProgressBar) IsPercentageShown() bool {
	return self.ptr.API.ProgressBar_is_percentage_shown(self)
}

type classProjectSettings struct{ Class[classProjectSettings] }

func (self classProjectSettings) Super() Object { var super Object; super.ptr = self.ptr; return super }

func (self classProjectSettings) Object() Object { return self.Super() }

func (self classProjectSettings) isSingleton() {}
func (self classProjectSettings) HasSetting(name String) bool {
	return self.ptr.API.ProjectSettings_has_setting(self, name)
}
func (self classProjectSettings) SetSetting(name String, value Variant) {
	self.ptr.API.ProjectSettings_set_setting(self, name, value)
}
func (self classProjectSettings) GetSetting(name String, default_value Variant) Variant {
	return self.ptr.API.ProjectSettings_get_setting(self, name, default_value)
}
func (self classProjectSettings) GetSettingWithOverride(name StringName) Variant {
	return self.ptr.API.ProjectSettings_get_setting_with_override(self, name)
}
func (self classProjectSettings) GetGlobalClassList() ArrayOf[Dictionary] {
	return self.ptr.API.ProjectSettings_get_global_class_list(self)
}
func (self classProjectSettings) SetOrder(name String, position Int) {
	self.ptr.API.ProjectSettings_set_order(self, name, position)
}
func (self classProjectSettings) GetOrder(name String) Int {
	return self.ptr.API.ProjectSettings_get_order(self, name)
}
func (self classProjectSettings) SetInitialValue(name String, value Variant) {
	self.ptr.API.ProjectSettings_set_initial_value(self, name, value)
}
func (self classProjectSettings) SetAsBasic(name String, basic bool) {
	self.ptr.API.ProjectSettings_set_as_basic(self, name, basic)
}
func (self classProjectSettings) SetAsInternal(name String, internal bool) {
	self.ptr.API.ProjectSettings_set_as_internal(self, name, internal)
}
func (self classProjectSettings) AddPropertyInfo(hint Dictionary) {
	self.ptr.API.ProjectSettings_add_property_info(self, hint)
}
func (self classProjectSettings) SetRestartIfChanged(name String, restart bool) {
	self.ptr.API.ProjectSettings_set_restart_if_changed(self, name, restart)
}
func (self classProjectSettings) Clear(name String) {
	self.ptr.API.ProjectSettings_clear(self, name)
}
func (self classProjectSettings) LocalizePath(path String) String {
	return self.ptr.API.ProjectSettings_localize_path(self, path)
}
func (self classProjectSettings) GlobalizePath(path String) String {
	return self.ptr.API.ProjectSettings_globalize_path(self, path)
}
func (self classProjectSettings) Save() int64 {
	return self.ptr.API.ProjectSettings_save(self)
}
func (self classProjectSettings) LoadResourcePack(pack String, replace_files bool, offset Int) bool {
	return self.ptr.API.ProjectSettings_load_resource_pack(self, pack, replace_files, offset)
}
func (self classProjectSettings) SaveCustom(file String) int64 {
	return self.ptr.API.ProjectSettings_save_custom(self, file)
}

type classPropertyTweener struct{ Class[classPropertyTweener] }

func (self classPropertyTweener) Super() Tweener {
	var super Tweener
	super.ptr = self.ptr
	return super
}

func (self classPropertyTweener) Tweener() Tweener { return self.Super() }
func (self classPropertyTweener) From(value Variant) PropertyTweener {
	return self.ptr.API.PropertyTweener_from(self, value)
}
func (self classPropertyTweener) FromCurrent() PropertyTweener {
	return self.ptr.API.PropertyTweener_from_current(self)
}
func (self classPropertyTweener) AsRelative() PropertyTweener {
	return self.ptr.API.PropertyTweener_as_relative(self)
}
func (self classPropertyTweener) SetTrans(trans TweenTransitionType) PropertyTweener {
	return self.ptr.API.PropertyTweener_set_trans(self, trans)
}
func (self classPropertyTweener) SetEase(ease TweenEaseType) PropertyTweener {
	return self.ptr.API.PropertyTweener_set_ease(self, ease)
}
func (self classPropertyTweener) SetDelay(delay Float) PropertyTweener {
	return self.ptr.API.PropertyTweener_set_delay(self, delay)
}

type classQuadMesh struct{ Class[classQuadMesh] }

func (self classQuadMesh) Super() PlaneMesh { var super PlaneMesh; super.ptr = self.ptr; return super }

func (self classQuadMesh) PlaneMesh() PlaneMesh { return self.Super() }

type classQuadOccluder3D struct{ Class[classQuadOccluder3D] }

func (self classQuadOccluder3D) Super() Occluder3D {
	var super Occluder3D
	super.ptr = self.ptr
	return super
}

func (self classQuadOccluder3D) Occluder3D() Occluder3D { return self.Super() }
func (self classQuadOccluder3D) SetSize(size Vector2) {
	self.ptr.API.QuadOccluder3D_set_size(self, size)
}
func (self classQuadOccluder3D) GetSize() Vector2 {
	return self.ptr.API.QuadOccluder3D_get_size(self)
}

type classRDAttachmentFormat struct{ Class[classRDAttachmentFormat] }

func (self classRDAttachmentFormat) Super() RefCounted {
	var super RefCounted
	super.ptr = self.ptr
	return super
}

func (self classRDAttachmentFormat) RefCounted() RefCounted { return self.Super() }
func (self classRDAttachmentFormat) SetFormat(p_member RenderingDeviceDataFormat) {
	self.ptr.API.RDAttachmentFormat_set_format(self, p_member)
}
func (self classRDAttachmentFormat) GetFormat() RenderingDeviceDataFormat {
	return self.ptr.API.RDAttachmentFormat_get_format(self)
}
func (self classRDAttachmentFormat) SetSamples(p_member RenderingDeviceTextureSamples) {
	self.ptr.API.RDAttachmentFormat_set_samples(self, p_member)
}
func (self classRDAttachmentFormat) GetSamples() RenderingDeviceTextureSamples {
	return self.ptr.API.RDAttachmentFormat_get_samples(self)
}
func (self classRDAttachmentFormat) SetUsageFlags(p_member Int) {
	self.ptr.API.RDAttachmentFormat_set_usage_flags(self, p_member)
}
func (self classRDAttachmentFormat) GetUsageFlags() Int {
	return self.ptr.API.RDAttachmentFormat_get_usage_flags(self)
}

type classRDFramebufferPass struct{ Class[classRDFramebufferPass] }

func (self classRDFramebufferPass) Super() RefCounted {
	var super RefCounted
	super.ptr = self.ptr
	return super
}

func (self classRDFramebufferPass) RefCounted() RefCounted { return self.Super() }
func (self classRDFramebufferPass) SetColorAttachments(p_member PackedInt32Array) {
	self.ptr.API.RDFramebufferPass_set_color_attachments(self, p_member)
}
func (self classRDFramebufferPass) GetColorAttachments() PackedInt32Array {
	return self.ptr.API.RDFramebufferPass_get_color_attachments(self)
}
func (self classRDFramebufferPass) SetInputAttachments(p_member PackedInt32Array) {
	self.ptr.API.RDFramebufferPass_set_input_attachments(self, p_member)
}
func (self classRDFramebufferPass) GetInputAttachments() PackedInt32Array {
	return self.ptr.API.RDFramebufferPass_get_input_attachments(self)
}
func (self classRDFramebufferPass) SetResolveAttachments(p_member PackedInt32Array) {
	self.ptr.API.RDFramebufferPass_set_resolve_attachments(self, p_member)
}
func (self classRDFramebufferPass) GetResolveAttachments() PackedInt32Array {
	return self.ptr.API.RDFramebufferPass_get_resolve_attachments(self)
}
func (self classRDFramebufferPass) SetPreserveAttachments(p_member PackedInt32Array) {
	self.ptr.API.RDFramebufferPass_set_preserve_attachments(self, p_member)
}
func (self classRDFramebufferPass) GetPreserveAttachments() PackedInt32Array {
	return self.ptr.API.RDFramebufferPass_get_preserve_attachments(self)
}
func (self classRDFramebufferPass) SetDepthAttachment(p_member Int) {
	self.ptr.API.RDFramebufferPass_set_depth_attachment(self, p_member)
}
func (self classRDFramebufferPass) GetDepthAttachment() Int {
	return self.ptr.API.RDFramebufferPass_get_depth_attachment(self)
}

type classRDPipelineColorBlendState struct {
	Class[classRDPipelineColorBlendState]
}

func (self classRDPipelineColorBlendState) Super() RefCounted {
	var super RefCounted
	super.ptr = self.ptr
	return super
}

func (self classRDPipelineColorBlendState) RefCounted() RefCounted { return self.Super() }
func (self classRDPipelineColorBlendState) SetEnableLogicOp(p_member bool) {
	self.ptr.API.RDPipelineColorBlendState_set_enable_logic_op(self, p_member)
}
func (self classRDPipelineColorBlendState) GetEnableLogicOp() bool {
	return self.ptr.API.RDPipelineColorBlendState_get_enable_logic_op(self)
}
func (self classRDPipelineColorBlendState) SetLogicOp(p_member RenderingDeviceLogicOperation) {
	self.ptr.API.RDPipelineColorBlendState_set_logic_op(self, p_member)
}
func (self classRDPipelineColorBlendState) GetLogicOp() RenderingDeviceLogicOperation {
	return self.ptr.API.RDPipelineColorBlendState_get_logic_op(self)
}
func (self classRDPipelineColorBlendState) SetBlendConstant(p_member Color) {
	self.ptr.API.RDPipelineColorBlendState_set_blend_constant(self, p_member)
}
func (self classRDPipelineColorBlendState) GetBlendConstant() Color {
	return self.ptr.API.RDPipelineColorBlendState_get_blend_constant(self)
}
func (self classRDPipelineColorBlendState) SetAttachments(attachments ArrayOf[RDPipelineColorBlendStateAttachment]) {
	self.ptr.API.RDPipelineColorBlendState_set_attachments(self, attachments)
}
func (self classRDPipelineColorBlendState) GetAttachments() ArrayOf[RDPipelineColorBlendStateAttachment] {
	return self.ptr.API.RDPipelineColorBlendState_get_attachments(self)
}

type classRDPipelineColorBlendStateAttachment struct {
	Class[classRDPipelineColorBlendStateAttachment]
}

func (self classRDPipelineColorBlendStateAttachment) Super() RefCounted {
	var super RefCounted
	super.ptr = self.ptr
	return super
}

func (self classRDPipelineColorBlendStateAttachment) RefCounted() RefCounted { return self.Super() }
func (self classRDPipelineColorBlendStateAttachment) SetAsMix() {
	self.ptr.API.RDPipelineColorBlendStateAttachment_set_as_mix(self)
}
func (self classRDPipelineColorBlendStateAttachment) SetEnableBlend(p_member bool) {
	self.ptr.API.RDPipelineColorBlendStateAttachment_set_enable_blend(self, p_member)
}
func (self classRDPipelineColorBlendStateAttachment) GetEnableBlend() bool {
	return self.ptr.API.RDPipelineColorBlendStateAttachment_get_enable_blend(self)
}
func (self classRDPipelineColorBlendStateAttachment) SetSrcColorBlendFactor(p_member RenderingDeviceBlendFactor) {
	self.ptr.API.RDPipelineColorBlendStateAttachment_set_src_color_blend_factor(self, p_member)
}
func (self classRDPipelineColorBlendStateAttachment) GetSrcColorBlendFactor() RenderingDeviceBlendFactor {
	return self.ptr.API.RDPipelineColorBlendStateAttachment_get_src_color_blend_factor(self)
}
func (self classRDPipelineColorBlendStateAttachment) SetDstColorBlendFactor(p_member RenderingDeviceBlendFactor) {
	self.ptr.API.RDPipelineColorBlendStateAttachment_set_dst_color_blend_factor(self, p_member)
}
func (self classRDPipelineColorBlendStateAttachment) GetDstColorBlendFactor() RenderingDeviceBlendFactor {
	return self.ptr.API.RDPipelineColorBlendStateAttachment_get_dst_color_blend_factor(self)
}
func (self classRDPipelineColorBlendStateAttachment) SetColorBlendOp(p_member RenderingDeviceBlendOperation) {
	self.ptr.API.RDPipelineColorBlendStateAttachment_set_color_blend_op(self, p_member)
}
func (self classRDPipelineColorBlendStateAttachment) GetColorBlendOp() RenderingDeviceBlendOperation {
	return self.ptr.API.RDPipelineColorBlendStateAttachment_get_color_blend_op(self)
}
func (self classRDPipelineColorBlendStateAttachment) SetSrcAlphaBlendFactor(p_member RenderingDeviceBlendFactor) {
	self.ptr.API.RDPipelineColorBlendStateAttachment_set_src_alpha_blend_factor(self, p_member)
}
func (self classRDPipelineColorBlendStateAttachment) GetSrcAlphaBlendFactor() RenderingDeviceBlendFactor {
	return self.ptr.API.RDPipelineColorBlendStateAttachment_get_src_alpha_blend_factor(self)
}
func (self classRDPipelineColorBlendStateAttachment) SetDstAlphaBlendFactor(p_member RenderingDeviceBlendFactor) {
	self.ptr.API.RDPipelineColorBlendStateAttachment_set_dst_alpha_blend_factor(self, p_member)
}
func (self classRDPipelineColorBlendStateAttachment) GetDstAlphaBlendFactor() RenderingDeviceBlendFactor {
	return self.ptr.API.RDPipelineColorBlendStateAttachment_get_dst_alpha_blend_factor(self)
}
func (self classRDPipelineColorBlendStateAttachment) SetAlphaBlendOp(p_member RenderingDeviceBlendOperation) {
	self.ptr.API.RDPipelineColorBlendStateAttachment_set_alpha_blend_op(self, p_member)
}
func (self classRDPipelineColorBlendStateAttachment) GetAlphaBlendOp() RenderingDeviceBlendOperation {
	return self.ptr.API.RDPipelineColorBlendStateAttachment_get_alpha_blend_op(self)
}
func (self classRDPipelineColorBlendStateAttachment) SetWriteR(p_member bool) {
	self.ptr.API.RDPipelineColorBlendStateAttachment_set_write_r(self, p_member)
}
func (self classRDPipelineColorBlendStateAttachment) GetWriteR() bool {
	return self.ptr.API.RDPipelineColorBlendStateAttachment_get_write_r(self)
}
func (self classRDPipelineColorBlendStateAttachment) SetWriteG(p_member bool) {
	self.ptr.API.RDPipelineColorBlendStateAttachment_set_write_g(self, p_member)
}
func (self classRDPipelineColorBlendStateAttachment) GetWriteG() bool {
	return self.ptr.API.RDPipelineColorBlendStateAttachment_get_write_g(self)
}
func (self classRDPipelineColorBlendStateAttachment) SetWriteB(p_member bool) {
	self.ptr.API.RDPipelineColorBlendStateAttachment_set_write_b(self, p_member)
}
func (self classRDPipelineColorBlendStateAttachment) GetWriteB() bool {
	return self.ptr.API.RDPipelineColorBlendStateAttachment_get_write_b(self)
}
func (self classRDPipelineColorBlendStateAttachment) SetWriteA(p_member bool) {
	self.ptr.API.RDPipelineColorBlendStateAttachment_set_write_a(self, p_member)
}
func (self classRDPipelineColorBlendStateAttachment) GetWriteA() bool {
	return self.ptr.API.RDPipelineColorBlendStateAttachment_get_write_a(self)
}

type classRDPipelineDepthStencilState struct {
	Class[classRDPipelineDepthStencilState]
}

func (self classRDPipelineDepthStencilState) Super() RefCounted {
	var super RefCounted
	super.ptr = self.ptr
	return super
}

func (self classRDPipelineDepthStencilState) RefCounted() RefCounted { return self.Super() }
func (self classRDPipelineDepthStencilState) SetEnableDepthTest(p_member bool) {
	self.ptr.API.RDPipelineDepthStencilState_set_enable_depth_test(self, p_member)
}
func (self classRDPipelineDepthStencilState) GetEnableDepthTest() bool {
	return self.ptr.API.RDPipelineDepthStencilState_get_enable_depth_test(self)
}
func (self classRDPipelineDepthStencilState) SetEnableDepthWrite(p_member bool) {
	self.ptr.API.RDPipelineDepthStencilState_set_enable_depth_write(self, p_member)
}
func (self classRDPipelineDepthStencilState) GetEnableDepthWrite() bool {
	return self.ptr.API.RDPipelineDepthStencilState_get_enable_depth_write(self)
}
func (self classRDPipelineDepthStencilState) SetDepthCompareOperator(p_member RenderingDeviceCompareOperator) {
	self.ptr.API.RDPipelineDepthStencilState_set_depth_compare_operator(self, p_member)
}
func (self classRDPipelineDepthStencilState) GetDepthCompareOperator() RenderingDeviceCompareOperator {
	return self.ptr.API.RDPipelineDepthStencilState_get_depth_compare_operator(self)
}
func (self classRDPipelineDepthStencilState) SetEnableDepthRange(p_member bool) {
	self.ptr.API.RDPipelineDepthStencilState_set_enable_depth_range(self, p_member)
}
func (self classRDPipelineDepthStencilState) GetEnableDepthRange() bool {
	return self.ptr.API.RDPipelineDepthStencilState_get_enable_depth_range(self)
}
func (self classRDPipelineDepthStencilState) SetDepthRangeMin(p_member Float) {
	self.ptr.API.RDPipelineDepthStencilState_set_depth_range_min(self, p_member)
}
func (self classRDPipelineDepthStencilState) GetDepthRangeMin() Float {
	return self.ptr.API.RDPipelineDepthStencilState_get_depth_range_min(self)
}
func (self classRDPipelineDepthStencilState) SetDepthRangeMax(p_member Float) {
	self.ptr.API.RDPipelineDepthStencilState_set_depth_range_max(self, p_member)
}
func (self classRDPipelineDepthStencilState) GetDepthRangeMax() Float {
	return self.ptr.API.RDPipelineDepthStencilState_get_depth_range_max(self)
}
func (self classRDPipelineDepthStencilState) SetEnableStencil(p_member bool) {
	self.ptr.API.RDPipelineDepthStencilState_set_enable_stencil(self, p_member)
}
func (self classRDPipelineDepthStencilState) GetEnableStencil() bool {
	return self.ptr.API.RDPipelineDepthStencilState_get_enable_stencil(self)
}
func (self classRDPipelineDepthStencilState) SetFrontOpFail(p_member RenderingDeviceStencilOperation) {
	self.ptr.API.RDPipelineDepthStencilState_set_front_op_fail(self, p_member)
}
func (self classRDPipelineDepthStencilState) GetFrontOpFail() RenderingDeviceStencilOperation {
	return self.ptr.API.RDPipelineDepthStencilState_get_front_op_fail(self)
}
func (self classRDPipelineDepthStencilState) SetFrontOpPass(p_member RenderingDeviceStencilOperation) {
	self.ptr.API.RDPipelineDepthStencilState_set_front_op_pass(self, p_member)
}
func (self classRDPipelineDepthStencilState) GetFrontOpPass() RenderingDeviceStencilOperation {
	return self.ptr.API.RDPipelineDepthStencilState_get_front_op_pass(self)
}
func (self classRDPipelineDepthStencilState) SetFrontOpDepthFail(p_member RenderingDeviceStencilOperation) {
	self.ptr.API.RDPipelineDepthStencilState_set_front_op_depth_fail(self, p_member)
}
func (self classRDPipelineDepthStencilState) GetFrontOpDepthFail() RenderingDeviceStencilOperation {
	return self.ptr.API.RDPipelineDepthStencilState_get_front_op_depth_fail(self)
}
func (self classRDPipelineDepthStencilState) SetFrontOpCompare(p_member RenderingDeviceCompareOperator) {
	self.ptr.API.RDPipelineDepthStencilState_set_front_op_compare(self, p_member)
}
func (self classRDPipelineDepthStencilState) GetFrontOpCompare() RenderingDeviceCompareOperator {
	return self.ptr.API.RDPipelineDepthStencilState_get_front_op_compare(self)
}
func (self classRDPipelineDepthStencilState) SetFrontOpCompareMask(p_member Int) {
	self.ptr.API.RDPipelineDepthStencilState_set_front_op_compare_mask(self, p_member)
}
func (self classRDPipelineDepthStencilState) GetFrontOpCompareMask() Int {
	return self.ptr.API.RDPipelineDepthStencilState_get_front_op_compare_mask(self)
}
func (self classRDPipelineDepthStencilState) SetFrontOpWriteMask(p_member Int) {
	self.ptr.API.RDPipelineDepthStencilState_set_front_op_write_mask(self, p_member)
}
func (self classRDPipelineDepthStencilState) GetFrontOpWriteMask() Int {
	return self.ptr.API.RDPipelineDepthStencilState_get_front_op_write_mask(self)
}
func (self classRDPipelineDepthStencilState) SetFrontOpReference(p_member Int) {
	self.ptr.API.RDPipelineDepthStencilState_set_front_op_reference(self, p_member)
}
func (self classRDPipelineDepthStencilState) GetFrontOpReference() Int {
	return self.ptr.API.RDPipelineDepthStencilState_get_front_op_reference(self)
}
func (self classRDPipelineDepthStencilState) SetBackOpFail(p_member RenderingDeviceStencilOperation) {
	self.ptr.API.RDPipelineDepthStencilState_set_back_op_fail(self, p_member)
}
func (self classRDPipelineDepthStencilState) GetBackOpFail() RenderingDeviceStencilOperation {
	return self.ptr.API.RDPipelineDepthStencilState_get_back_op_fail(self)
}
func (self classRDPipelineDepthStencilState) SetBackOpPass(p_member RenderingDeviceStencilOperation) {
	self.ptr.API.RDPipelineDepthStencilState_set_back_op_pass(self, p_member)
}
func (self classRDPipelineDepthStencilState) GetBackOpPass() RenderingDeviceStencilOperation {
	return self.ptr.API.RDPipelineDepthStencilState_get_back_op_pass(self)
}
func (self classRDPipelineDepthStencilState) SetBackOpDepthFail(p_member RenderingDeviceStencilOperation) {
	self.ptr.API.RDPipelineDepthStencilState_set_back_op_depth_fail(self, p_member)
}
func (self classRDPipelineDepthStencilState) GetBackOpDepthFail() RenderingDeviceStencilOperation {
	return self.ptr.API.RDPipelineDepthStencilState_get_back_op_depth_fail(self)
}
func (self classRDPipelineDepthStencilState) SetBackOpCompare(p_member RenderingDeviceCompareOperator) {
	self.ptr.API.RDPipelineDepthStencilState_set_back_op_compare(self, p_member)
}
func (self classRDPipelineDepthStencilState) GetBackOpCompare() RenderingDeviceCompareOperator {
	return self.ptr.API.RDPipelineDepthStencilState_get_back_op_compare(self)
}
func (self classRDPipelineDepthStencilState) SetBackOpCompareMask(p_member Int) {
	self.ptr.API.RDPipelineDepthStencilState_set_back_op_compare_mask(self, p_member)
}
func (self classRDPipelineDepthStencilState) GetBackOpCompareMask() Int {
	return self.ptr.API.RDPipelineDepthStencilState_get_back_op_compare_mask(self)
}
func (self classRDPipelineDepthStencilState) SetBackOpWriteMask(p_member Int) {
	self.ptr.API.RDPipelineDepthStencilState_set_back_op_write_mask(self, p_member)
}
func (self classRDPipelineDepthStencilState) GetBackOpWriteMask() Int {
	return self.ptr.API.RDPipelineDepthStencilState_get_back_op_write_mask(self)
}
func (self classRDPipelineDepthStencilState) SetBackOpReference(p_member Int) {
	self.ptr.API.RDPipelineDepthStencilState_set_back_op_reference(self, p_member)
}
func (self classRDPipelineDepthStencilState) GetBackOpReference() Int {
	return self.ptr.API.RDPipelineDepthStencilState_get_back_op_reference(self)
}

type classRDPipelineMultisampleState struct {
	Class[classRDPipelineMultisampleState]
}

func (self classRDPipelineMultisampleState) Super() RefCounted {
	var super RefCounted
	super.ptr = self.ptr
	return super
}

func (self classRDPipelineMultisampleState) RefCounted() RefCounted { return self.Super() }
func (self classRDPipelineMultisampleState) SetSampleCount(p_member RenderingDeviceTextureSamples) {
	self.ptr.API.RDPipelineMultisampleState_set_sample_count(self, p_member)
}
func (self classRDPipelineMultisampleState) GetSampleCount() RenderingDeviceTextureSamples {
	return self.ptr.API.RDPipelineMultisampleState_get_sample_count(self)
}
func (self classRDPipelineMultisampleState) SetEnableSampleShading(p_member bool) {
	self.ptr.API.RDPipelineMultisampleState_set_enable_sample_shading(self, p_member)
}
func (self classRDPipelineMultisampleState) GetEnableSampleShading() bool {
	return self.ptr.API.RDPipelineMultisampleState_get_enable_sample_shading(self)
}
func (self classRDPipelineMultisampleState) SetMinSampleShading(p_member Float) {
	self.ptr.API.RDPipelineMultisampleState_set_min_sample_shading(self, p_member)
}
func (self classRDPipelineMultisampleState) GetMinSampleShading() Float {
	return self.ptr.API.RDPipelineMultisampleState_get_min_sample_shading(self)
}
func (self classRDPipelineMultisampleState) SetEnableAlphaToCoverage(p_member bool) {
	self.ptr.API.RDPipelineMultisampleState_set_enable_alpha_to_coverage(self, p_member)
}
func (self classRDPipelineMultisampleState) GetEnableAlphaToCoverage() bool {
	return self.ptr.API.RDPipelineMultisampleState_get_enable_alpha_to_coverage(self)
}
func (self classRDPipelineMultisampleState) SetEnableAlphaToOne(p_member bool) {
	self.ptr.API.RDPipelineMultisampleState_set_enable_alpha_to_one(self, p_member)
}
func (self classRDPipelineMultisampleState) GetEnableAlphaToOne() bool {
	return self.ptr.API.RDPipelineMultisampleState_get_enable_alpha_to_one(self)
}
func (self classRDPipelineMultisampleState) SetSampleMasks(masks ArrayOf[Int]) {
	self.ptr.API.RDPipelineMultisampleState_set_sample_masks(self, masks)
}
func (self classRDPipelineMultisampleState) GetSampleMasks() ArrayOf[Int] {
	return self.ptr.API.RDPipelineMultisampleState_get_sample_masks(self)
}

type classRDPipelineRasterizationState struct {
	Class[classRDPipelineRasterizationState]
}

func (self classRDPipelineRasterizationState) Super() RefCounted {
	var super RefCounted
	super.ptr = self.ptr
	return super
}

func (self classRDPipelineRasterizationState) RefCounted() RefCounted { return self.Super() }
func (self classRDPipelineRasterizationState) SetEnableDepthClamp(p_member bool) {
	self.ptr.API.RDPipelineRasterizationState_set_enable_depth_clamp(self, p_member)
}
func (self classRDPipelineRasterizationState) GetEnableDepthClamp() bool {
	return self.ptr.API.RDPipelineRasterizationState_get_enable_depth_clamp(self)
}
func (self classRDPipelineRasterizationState) SetDiscardPrimitives(p_member bool) {
	self.ptr.API.RDPipelineRasterizationState_set_discard_primitives(self, p_member)
}
func (self classRDPipelineRasterizationState) GetDiscardPrimitives() bool {
	return self.ptr.API.RDPipelineRasterizationState_get_discard_primitives(self)
}
func (self classRDPipelineRasterizationState) SetWireframe(p_member bool) {
	self.ptr.API.RDPipelineRasterizationState_set_wireframe(self, p_member)
}
func (self classRDPipelineRasterizationState) GetWireframe() bool {
	return self.ptr.API.RDPipelineRasterizationState_get_wireframe(self)
}
func (self classRDPipelineRasterizationState) SetCullMode(p_member RenderingDevicePolygonCullMode) {
	self.ptr.API.RDPipelineRasterizationState_set_cull_mode(self, p_member)
}
func (self classRDPipelineRasterizationState) GetCullMode() RenderingDevicePolygonCullMode {
	return self.ptr.API.RDPipelineRasterizationState_get_cull_mode(self)
}
func (self classRDPipelineRasterizationState) SetFrontFace(p_member RenderingDevicePolygonFrontFace) {
	self.ptr.API.RDPipelineRasterizationState_set_front_face(self, p_member)
}
func (self classRDPipelineRasterizationState) GetFrontFace() RenderingDevicePolygonFrontFace {
	return self.ptr.API.RDPipelineRasterizationState_get_front_face(self)
}
func (self classRDPipelineRasterizationState) SetDepthBiasEnabled(p_member bool) {
	self.ptr.API.RDPipelineRasterizationState_set_depth_bias_enabled(self, p_member)
}
func (self classRDPipelineRasterizationState) GetDepthBiasEnabled() bool {
	return self.ptr.API.RDPipelineRasterizationState_get_depth_bias_enabled(self)
}
func (self classRDPipelineRasterizationState) SetDepthBiasConstantFactor(p_member Float) {
	self.ptr.API.RDPipelineRasterizationState_set_depth_bias_constant_factor(self, p_member)
}
func (self classRDPipelineRasterizationState) GetDepthBiasConstantFactor() Float {
	return self.ptr.API.RDPipelineRasterizationState_get_depth_bias_constant_factor(self)
}
func (self classRDPipelineRasterizationState) SetDepthBiasClamp(p_member Float) {
	self.ptr.API.RDPipelineRasterizationState_set_depth_bias_clamp(self, p_member)
}
func (self classRDPipelineRasterizationState) GetDepthBiasClamp() Float {
	return self.ptr.API.RDPipelineRasterizationState_get_depth_bias_clamp(self)
}
func (self classRDPipelineRasterizationState) SetDepthBiasSlopeFactor(p_member Float) {
	self.ptr.API.RDPipelineRasterizationState_set_depth_bias_slope_factor(self, p_member)
}
func (self classRDPipelineRasterizationState) GetDepthBiasSlopeFactor() Float {
	return self.ptr.API.RDPipelineRasterizationState_get_depth_bias_slope_factor(self)
}
func (self classRDPipelineRasterizationState) SetLineWidth(p_member Float) {
	self.ptr.API.RDPipelineRasterizationState_set_line_width(self, p_member)
}
func (self classRDPipelineRasterizationState) GetLineWidth() Float {
	return self.ptr.API.RDPipelineRasterizationState_get_line_width(self)
}
func (self classRDPipelineRasterizationState) SetPatchControlPoints(p_member Int) {
	self.ptr.API.RDPipelineRasterizationState_set_patch_control_points(self, p_member)
}
func (self classRDPipelineRasterizationState) GetPatchControlPoints() Int {
	return self.ptr.API.RDPipelineRasterizationState_get_patch_control_points(self)
}

type classRDPipelineSpecializationConstant struct {
	Class[classRDPipelineSpecializationConstant]
}

func (self classRDPipelineSpecializationConstant) Super() RefCounted {
	var super RefCounted
	super.ptr = self.ptr
	return super
}

func (self classRDPipelineSpecializationConstant) RefCounted() RefCounted { return self.Super() }
func (self classRDPipelineSpecializationConstant) SetValue(value Variant) {
	self.ptr.API.RDPipelineSpecializationConstant_set_value(self, value)
}
func (self classRDPipelineSpecializationConstant) GetValue() Variant {
	return self.ptr.API.RDPipelineSpecializationConstant_get_value(self)
}
func (self classRDPipelineSpecializationConstant) SetConstantId(constant_id Int) {
	self.ptr.API.RDPipelineSpecializationConstant_set_constant_id(self, constant_id)
}
func (self classRDPipelineSpecializationConstant) GetConstantId() Int {
	return self.ptr.API.RDPipelineSpecializationConstant_get_constant_id(self)
}

type classRDSamplerState struct{ Class[classRDSamplerState] }

func (self classRDSamplerState) Super() RefCounted {
	var super RefCounted
	super.ptr = self.ptr
	return super
}

func (self classRDSamplerState) RefCounted() RefCounted { return self.Super() }
func (self classRDSamplerState) SetMagFilter(p_member RenderingDeviceSamplerFilter) {
	self.ptr.API.RDSamplerState_set_mag_filter(self, p_member)
}
func (self classRDSamplerState) GetMagFilter() RenderingDeviceSamplerFilter {
	return self.ptr.API.RDSamplerState_get_mag_filter(self)
}
func (self classRDSamplerState) SetMinFilter(p_member RenderingDeviceSamplerFilter) {
	self.ptr.API.RDSamplerState_set_min_filter(self, p_member)
}
func (self classRDSamplerState) GetMinFilter() RenderingDeviceSamplerFilter {
	return self.ptr.API.RDSamplerState_get_min_filter(self)
}
func (self classRDSamplerState) SetMipFilter(p_member RenderingDeviceSamplerFilter) {
	self.ptr.API.RDSamplerState_set_mip_filter(self, p_member)
}
func (self classRDSamplerState) GetMipFilter() RenderingDeviceSamplerFilter {
	return self.ptr.API.RDSamplerState_get_mip_filter(self)
}
func (self classRDSamplerState) SetRepeatU(p_member RenderingDeviceSamplerRepeatMode) {
	self.ptr.API.RDSamplerState_set_repeat_u(self, p_member)
}
func (self classRDSamplerState) GetRepeatU() RenderingDeviceSamplerRepeatMode {
	return self.ptr.API.RDSamplerState_get_repeat_u(self)
}
func (self classRDSamplerState) SetRepeatV(p_member RenderingDeviceSamplerRepeatMode) {
	self.ptr.API.RDSamplerState_set_repeat_v(self, p_member)
}
func (self classRDSamplerState) GetRepeatV() RenderingDeviceSamplerRepeatMode {
	return self.ptr.API.RDSamplerState_get_repeat_v(self)
}
func (self classRDSamplerState) SetRepeatW(p_member RenderingDeviceSamplerRepeatMode) {
	self.ptr.API.RDSamplerState_set_repeat_w(self, p_member)
}
func (self classRDSamplerState) GetRepeatW() RenderingDeviceSamplerRepeatMode {
	return self.ptr.API.RDSamplerState_get_repeat_w(self)
}
func (self classRDSamplerState) SetLodBias(p_member Float) {
	self.ptr.API.RDSamplerState_set_lod_bias(self, p_member)
}
func (self classRDSamplerState) GetLodBias() Float {
	return self.ptr.API.RDSamplerState_get_lod_bias(self)
}
func (self classRDSamplerState) SetUseAnisotropy(p_member bool) {
	self.ptr.API.RDSamplerState_set_use_anisotropy(self, p_member)
}
func (self classRDSamplerState) GetUseAnisotropy() bool {
	return self.ptr.API.RDSamplerState_get_use_anisotropy(self)
}
func (self classRDSamplerState) SetAnisotropyMax(p_member Float) {
	self.ptr.API.RDSamplerState_set_anisotropy_max(self, p_member)
}
func (self classRDSamplerState) GetAnisotropyMax() Float {
	return self.ptr.API.RDSamplerState_get_anisotropy_max(self)
}
func (self classRDSamplerState) SetEnableCompare(p_member bool) {
	self.ptr.API.RDSamplerState_set_enable_compare(self, p_member)
}
func (self classRDSamplerState) GetEnableCompare() bool {
	return self.ptr.API.RDSamplerState_get_enable_compare(self)
}
func (self classRDSamplerState) SetCompareOp(p_member RenderingDeviceCompareOperator) {
	self.ptr.API.RDSamplerState_set_compare_op(self, p_member)
}
func (self classRDSamplerState) GetCompareOp() RenderingDeviceCompareOperator {
	return self.ptr.API.RDSamplerState_get_compare_op(self)
}
func (self classRDSamplerState) SetMinLod(p_member Float) {
	self.ptr.API.RDSamplerState_set_min_lod(self, p_member)
}
func (self classRDSamplerState) GetMinLod() Float {
	return self.ptr.API.RDSamplerState_get_min_lod(self)
}
func (self classRDSamplerState) SetMaxLod(p_member Float) {
	self.ptr.API.RDSamplerState_set_max_lod(self, p_member)
}
func (self classRDSamplerState) GetMaxLod() Float {
	return self.ptr.API.RDSamplerState_get_max_lod(self)
}
func (self classRDSamplerState) SetBorderColor(p_member RenderingDeviceSamplerBorderColor) {
	self.ptr.API.RDSamplerState_set_border_color(self, p_member)
}
func (self classRDSamplerState) GetBorderColor() RenderingDeviceSamplerBorderColor {
	return self.ptr.API.RDSamplerState_get_border_color(self)
}
func (self classRDSamplerState) SetUnnormalizedUvw(p_member bool) {
	self.ptr.API.RDSamplerState_set_unnormalized_uvw(self, p_member)
}
func (self classRDSamplerState) GetUnnormalizedUvw() bool {
	return self.ptr.API.RDSamplerState_get_unnormalized_uvw(self)
}

type classRDShaderFile struct{ Class[classRDShaderFile] }

func (self classRDShaderFile) Super() Resource {
	var super Resource
	super.ptr = self.ptr
	return super
}

func (self classRDShaderFile) Resource() Resource { return self.Super() }
func (self classRDShaderFile) SetBytecode(bytecode RDShaderSPIRV, version StringName) {
	self.ptr.API.RDShaderFile_set_bytecode(self, bytecode, version)
}
func (self classRDShaderFile) GetSpirv(version StringName) RDShaderSPIRV {
	return self.ptr.API.RDShaderFile_get_spirv(self, version)
}
func (self classRDShaderFile) GetVersionList() ArrayOf[StringName] {
	return self.ptr.API.RDShaderFile_get_version_list(self)
}
func (self classRDShaderFile) SetBaseError(error String) {
	self.ptr.API.RDShaderFile_set_base_error(self, error)
}
func (self classRDShaderFile) GetBaseError() String {
	return self.ptr.API.RDShaderFile_get_base_error(self)
}

type classRDShaderSPIRV struct{ Class[classRDShaderSPIRV] }

func (self classRDShaderSPIRV) Super() Resource {
	var super Resource
	super.ptr = self.ptr
	return super
}

func (self classRDShaderSPIRV) Resource() Resource { return self.Super() }
func (self classRDShaderSPIRV) SetStageBytecode(stage RenderingDeviceShaderStage, bytecode PackedByteArray) {
	self.ptr.API.RDShaderSPIRV_set_stage_bytecode(self, stage, bytecode)
}
func (self classRDShaderSPIRV) GetStageBytecode(stage RenderingDeviceShaderStage) PackedByteArray {
	return self.ptr.API.RDShaderSPIRV_get_stage_bytecode(self, stage)
}
func (self classRDShaderSPIRV) SetStageCompileError(stage RenderingDeviceShaderStage, compile_error String) {
	self.ptr.API.RDShaderSPIRV_set_stage_compile_error(self, stage, compile_error)
}
func (self classRDShaderSPIRV) GetStageCompileError(stage RenderingDeviceShaderStage) String {
	return self.ptr.API.RDShaderSPIRV_get_stage_compile_error(self, stage)
}

type classRDShaderSource struct{ Class[classRDShaderSource] }

func (self classRDShaderSource) Super() RefCounted {
	var super RefCounted
	super.ptr = self.ptr
	return super
}

func (self classRDShaderSource) RefCounted() RefCounted { return self.Super() }
func (self classRDShaderSource) SetStageSource(stage RenderingDeviceShaderStage, source String) {
	self.ptr.API.RDShaderSource_set_stage_source(self, stage, source)
}
func (self classRDShaderSource) GetStageSource(stage RenderingDeviceShaderStage) String {
	return self.ptr.API.RDShaderSource_get_stage_source(self, stage)
}
func (self classRDShaderSource) SetLanguage(language RenderingDeviceShaderLanguage) {
	self.ptr.API.RDShaderSource_set_language(self, language)
}
func (self classRDShaderSource) GetLanguage() RenderingDeviceShaderLanguage {
	return self.ptr.API.RDShaderSource_get_language(self)
}

type classRDTextureFormat struct{ Class[classRDTextureFormat] }

func (self classRDTextureFormat) Super() RefCounted {
	var super RefCounted
	super.ptr = self.ptr
	return super
}

func (self classRDTextureFormat) RefCounted() RefCounted { return self.Super() }
func (self classRDTextureFormat) SetFormat(p_member RenderingDeviceDataFormat) {
	self.ptr.API.RDTextureFormat_set_format(self, p_member)
}
func (self classRDTextureFormat) GetFormat() RenderingDeviceDataFormat {
	return self.ptr.API.RDTextureFormat_get_format(self)
}
func (self classRDTextureFormat) SetWidth(p_member Int) {
	self.ptr.API.RDTextureFormat_set_width(self, p_member)
}
func (self classRDTextureFormat) GetWidth() Int {
	return self.ptr.API.RDTextureFormat_get_width(self)
}
func (self classRDTextureFormat) SetHeight(p_member Int) {
	self.ptr.API.RDTextureFormat_set_height(self, p_member)
}
func (self classRDTextureFormat) GetHeight() Int {
	return self.ptr.API.RDTextureFormat_get_height(self)
}
func (self classRDTextureFormat) SetDepth(p_member Int) {
	self.ptr.API.RDTextureFormat_set_depth(self, p_member)
}
func (self classRDTextureFormat) GetDepth() Int {
	return self.ptr.API.RDTextureFormat_get_depth(self)
}
func (self classRDTextureFormat) SetArrayLayers(p_member Int) {
	self.ptr.API.RDTextureFormat_set_array_layers(self, p_member)
}
func (self classRDTextureFormat) GetArrayLayers() Int {
	return self.ptr.API.RDTextureFormat_get_array_layers(self)
}
func (self classRDTextureFormat) SetMipmaps(p_member Int) {
	self.ptr.API.RDTextureFormat_set_mipmaps(self, p_member)
}
func (self classRDTextureFormat) GetMipmaps() Int {
	return self.ptr.API.RDTextureFormat_get_mipmaps(self)
}
func (self classRDTextureFormat) SetTextureType(p_member RenderingDeviceTextureType) {
	self.ptr.API.RDTextureFormat_set_texture_type(self, p_member)
}
func (self classRDTextureFormat) GetTextureType() RenderingDeviceTextureType {
	return self.ptr.API.RDTextureFormat_get_texture_type(self)
}
func (self classRDTextureFormat) SetSamples(p_member RenderingDeviceTextureSamples) {
	self.ptr.API.RDTextureFormat_set_samples(self, p_member)
}
func (self classRDTextureFormat) GetSamples() RenderingDeviceTextureSamples {
	return self.ptr.API.RDTextureFormat_get_samples(self)
}
func (self classRDTextureFormat) SetUsageBits(p_member RenderingDeviceTextureUsageBits) {
	self.ptr.API.RDTextureFormat_set_usage_bits(self, p_member)
}
func (self classRDTextureFormat) GetUsageBits() RenderingDeviceTextureUsageBits {
	return self.ptr.API.RDTextureFormat_get_usage_bits(self)
}
func (self classRDTextureFormat) AddShareableFormat(format RenderingDeviceDataFormat) {
	self.ptr.API.RDTextureFormat_add_shareable_format(self, format)
}
func (self classRDTextureFormat) RemoveShareableFormat(format RenderingDeviceDataFormat) {
	self.ptr.API.RDTextureFormat_remove_shareable_format(self, format)
}

type classRDTextureView struct{ Class[classRDTextureView] }

func (self classRDTextureView) Super() RefCounted {
	var super RefCounted
	super.ptr = self.ptr
	return super
}

func (self classRDTextureView) RefCounted() RefCounted { return self.Super() }
func (self classRDTextureView) SetFormatOverride(p_member RenderingDeviceDataFormat) {
	self.ptr.API.RDTextureView_set_format_override(self, p_member)
}
func (self classRDTextureView) GetFormatOverride() RenderingDeviceDataFormat {
	return self.ptr.API.RDTextureView_get_format_override(self)
}
func (self classRDTextureView) SetSwizzleR(p_member RenderingDeviceTextureSwizzle) {
	self.ptr.API.RDTextureView_set_swizzle_r(self, p_member)
}
func (self classRDTextureView) GetSwizzleR() RenderingDeviceTextureSwizzle {
	return self.ptr.API.RDTextureView_get_swizzle_r(self)
}
func (self classRDTextureView) SetSwizzleG(p_member RenderingDeviceTextureSwizzle) {
	self.ptr.API.RDTextureView_set_swizzle_g(self, p_member)
}
func (self classRDTextureView) GetSwizzleG() RenderingDeviceTextureSwizzle {
	return self.ptr.API.RDTextureView_get_swizzle_g(self)
}
func (self classRDTextureView) SetSwizzleB(p_member RenderingDeviceTextureSwizzle) {
	self.ptr.API.RDTextureView_set_swizzle_b(self, p_member)
}
func (self classRDTextureView) GetSwizzleB() RenderingDeviceTextureSwizzle {
	return self.ptr.API.RDTextureView_get_swizzle_b(self)
}
func (self classRDTextureView) SetSwizzleA(p_member RenderingDeviceTextureSwizzle) {
	self.ptr.API.RDTextureView_set_swizzle_a(self, p_member)
}
func (self classRDTextureView) GetSwizzleA() RenderingDeviceTextureSwizzle {
	return self.ptr.API.RDTextureView_get_swizzle_a(self)
}

type classRDUniform struct{ Class[classRDUniform] }

func (self classRDUniform) Super() RefCounted {
	var super RefCounted
	super.ptr = self.ptr
	return super
}

func (self classRDUniform) RefCounted() RefCounted { return self.Super() }
func (self classRDUniform) SetUniformType(p_member RenderingDeviceUniformType) {
	self.ptr.API.RDUniform_set_uniform_type(self, p_member)
}
func (self classRDUniform) GetUniformType() RenderingDeviceUniformType {
	return self.ptr.API.RDUniform_get_uniform_type(self)
}
func (self classRDUniform) SetBinding(p_member Int) {
	self.ptr.API.RDUniform_set_binding(self, p_member)
}
func (self classRDUniform) GetBinding() Int {
	return self.ptr.API.RDUniform_get_binding(self)
}
func (self classRDUniform) AddId(id RID) {
	self.ptr.API.RDUniform_add_id(self, id)
}
func (self classRDUniform) ClearIds() {
	self.ptr.API.RDUniform_clear_ids(self)
}
func (self classRDUniform) GetIds() ArrayOf[RID] {
	return self.ptr.API.RDUniform_get_ids(self)
}

type classRDVertexAttribute struct{ Class[classRDVertexAttribute] }

func (self classRDVertexAttribute) Super() RefCounted {
	var super RefCounted
	super.ptr = self.ptr
	return super
}

func (self classRDVertexAttribute) RefCounted() RefCounted { return self.Super() }
func (self classRDVertexAttribute) SetLocation(p_member Int) {
	self.ptr.API.RDVertexAttribute_set_location(self, p_member)
}
func (self classRDVertexAttribute) GetLocation() Int {
	return self.ptr.API.RDVertexAttribute_get_location(self)
}
func (self classRDVertexAttribute) SetOffset(p_member Int) {
	self.ptr.API.RDVertexAttribute_set_offset(self, p_member)
}
func (self classRDVertexAttribute) GetOffset() Int {
	return self.ptr.API.RDVertexAttribute_get_offset(self)
}
func (self classRDVertexAttribute) SetFormat(p_member RenderingDeviceDataFormat) {
	self.ptr.API.RDVertexAttribute_set_format(self, p_member)
}
func (self classRDVertexAttribute) GetFormat() RenderingDeviceDataFormat {
	return self.ptr.API.RDVertexAttribute_get_format(self)
}
func (self classRDVertexAttribute) SetStride(p_member Int) {
	self.ptr.API.RDVertexAttribute_set_stride(self, p_member)
}
func (self classRDVertexAttribute) GetStride() Int {
	return self.ptr.API.RDVertexAttribute_get_stride(self)
}
func (self classRDVertexAttribute) SetFrequency(p_member RenderingDeviceVertexFrequency) {
	self.ptr.API.RDVertexAttribute_set_frequency(self, p_member)
}
func (self classRDVertexAttribute) GetFrequency() RenderingDeviceVertexFrequency {
	return self.ptr.API.RDVertexAttribute_get_frequency(self)
}

type classRandomNumberGenerator struct {
	Class[classRandomNumberGenerator]
}

func (self classRandomNumberGenerator) Super() RefCounted {
	var super RefCounted
	super.ptr = self.ptr
	return super
}

func (self classRandomNumberGenerator) RefCounted() RefCounted { return self.Super() }
func (self classRandomNumberGenerator) SetSeed(seed Int) {
	self.ptr.API.RandomNumberGenerator_set_seed(self, seed)
}
func (self classRandomNumberGenerator) GetSeed() Int {
	return self.ptr.API.RandomNumberGenerator_get_seed(self)
}
func (self classRandomNumberGenerator) SetState(state Int) {
	self.ptr.API.RandomNumberGenerator_set_state(self, state)
}
func (self classRandomNumberGenerator) GetState() Int {
	return self.ptr.API.RandomNumberGenerator_get_state(self)
}
func (self classRandomNumberGenerator) Randi() Int {
	return self.ptr.API.RandomNumberGenerator_randi(self)
}
func (self classRandomNumberGenerator) Randf() Float {
	return self.ptr.API.RandomNumberGenerator_randf(self)
}
func (self classRandomNumberGenerator) Randfn(mean Float, deviation Float) Float {
	return self.ptr.API.RandomNumberGenerator_randfn(self, mean, deviation)
}
func (self classRandomNumberGenerator) RandfRange(from Float, to Float) Float {
	return self.ptr.API.RandomNumberGenerator_randf_range(self, from, to)
}
func (self classRandomNumberGenerator) RandiRange(from Int, to Int) Int {
	return self.ptr.API.RandomNumberGenerator_randi_range(self, from, to)
}
func (self classRandomNumberGenerator) Randomize() {
	self.ptr.API.RandomNumberGenerator_randomize(self)
}

type classRange struct{ Class[classRange] }

func (self classRange) Super() Control { var super Control; super.ptr = self.ptr; return super }

func (self classRange) Control() Control { return self.Super() }
func (self classRange) GetValue() Float {
	return self.ptr.API.Range_get_value(self)
}
func (self classRange) GetMin() Float {
	return self.ptr.API.Range_get_min(self)
}
func (self classRange) GetMax() Float {
	return self.ptr.API.Range_get_max(self)
}
func (self classRange) GetStep() Float {
	return self.ptr.API.Range_get_step(self)
}
func (self classRange) GetPage() Float {
	return self.ptr.API.Range_get_page(self)
}
func (self classRange) GetAsRatio() Float {
	return self.ptr.API.Range_get_as_ratio(self)
}
func (self classRange) SetValue(value Float) {
	self.ptr.API.Range_set_value(self, value)
}
func (self classRange) SetValueNoSignal(value Float) {
	self.ptr.API.Range_set_value_no_signal(self, value)
}
func (self classRange) SetMin(minimum Float) {
	self.ptr.API.Range_set_min(self, minimum)
}
func (self classRange) SetMax(maximum Float) {
	self.ptr.API.Range_set_max(self, maximum)
}
func (self classRange) SetStep(step Float) {
	self.ptr.API.Range_set_step(self, step)
}
func (self classRange) SetPage(pagesize Float) {
	self.ptr.API.Range_set_page(self, pagesize)
}
func (self classRange) SetAsRatio(value Float) {
	self.ptr.API.Range_set_as_ratio(self, value)
}
func (self classRange) SetUseRoundedValues(enabled bool) {
	self.ptr.API.Range_set_use_rounded_values(self, enabled)
}
func (self classRange) IsUsingRoundedValues() bool {
	return self.ptr.API.Range_is_using_rounded_values(self)
}
func (self classRange) SetExpRatio(enabled bool) {
	self.ptr.API.Range_set_exp_ratio(self, enabled)
}
func (self classRange) IsRatioExp() bool {
	return self.ptr.API.Range_is_ratio_exp(self)
}
func (self classRange) SetAllowGreater(allow bool) {
	self.ptr.API.Range_set_allow_greater(self, allow)
}
func (self classRange) IsGreaterAllowed() bool {
	return self.ptr.API.Range_is_greater_allowed(self)
}
func (self classRange) SetAllowLesser(allow bool) {
	self.ptr.API.Range_set_allow_lesser(self, allow)
}
func (self classRange) IsLesserAllowed() bool {
	return self.ptr.API.Range_is_lesser_allowed(self)
}
func (self classRange) Share(with Node) {
	self.ptr.API.Range_share(self, with)
}
func (self classRange) Unshare() {
	self.ptr.API.Range_unshare(self)
}

type classRayCast2D struct{ Class[classRayCast2D] }

func (self classRayCast2D) Super() Node2D { var super Node2D; super.ptr = self.ptr; return super }

func (self classRayCast2D) Node2D() Node2D { return self.Super() }
func (self classRayCast2D) SetEnabled(enabled bool) {
	self.ptr.API.RayCast2D_set_enabled(self, enabled)
}
func (self classRayCast2D) IsEnabled() bool {
	return self.ptr.API.RayCast2D_is_enabled(self)
}
func (self classRayCast2D) SetTargetPosition(local_point Vector2) {
	self.ptr.API.RayCast2D_set_target_position(self, local_point)
}
func (self classRayCast2D) GetTargetPosition() Vector2 {
	return self.ptr.API.RayCast2D_get_target_position(self)
}
func (self classRayCast2D) IsColliding() bool {
	return self.ptr.API.RayCast2D_is_colliding(self)
}
func (self classRayCast2D) ForceRaycastUpdate() {
	self.ptr.API.RayCast2D_force_raycast_update(self)
}
func (self classRayCast2D) GetCollider() Object {
	return self.ptr.API.RayCast2D_get_collider(self)
}
func (self classRayCast2D) GetColliderRid() RID {
	return self.ptr.API.RayCast2D_get_collider_rid(self)
}
func (self classRayCast2D) GetColliderShape() Int {
	return self.ptr.API.RayCast2D_get_collider_shape(self)
}
func (self classRayCast2D) GetCollisionPoint() Vector2 {
	return self.ptr.API.RayCast2D_get_collision_point(self)
}
func (self classRayCast2D) GetCollisionNormal() Vector2 {
	return self.ptr.API.RayCast2D_get_collision_normal(self)
}
func (self classRayCast2D) AddExceptionRid(rid RID) {
	self.ptr.API.RayCast2D_add_exception_rid(self, rid)
}
func (self classRayCast2D) AddException(node CollisionObject2D) {
	self.ptr.API.RayCast2D_add_exception(self, node)
}
func (self classRayCast2D) RemoveExceptionRid(rid RID) {
	self.ptr.API.RayCast2D_remove_exception_rid(self, rid)
}
func (self classRayCast2D) RemoveException(node CollisionObject2D) {
	self.ptr.API.RayCast2D_remove_exception(self, node)
}
func (self classRayCast2D) ClearExceptions() {
	self.ptr.API.RayCast2D_clear_exceptions(self)
}
func (self classRayCast2D) SetCollisionMask(mask Int) {
	self.ptr.API.RayCast2D_set_collision_mask(self, mask)
}
func (self classRayCast2D) GetCollisionMask() Int {
	return self.ptr.API.RayCast2D_get_collision_mask(self)
}
func (self classRayCast2D) SetCollisionMaskValue(layer_number Int, value bool) {
	self.ptr.API.RayCast2D_set_collision_mask_value(self, layer_number, value)
}
func (self classRayCast2D) GetCollisionMaskValue(layer_number Int) bool {
	return self.ptr.API.RayCast2D_get_collision_mask_value(self, layer_number)
}
func (self classRayCast2D) SetExcludeParentBody(mask bool) {
	self.ptr.API.RayCast2D_set_exclude_parent_body(self, mask)
}
func (self classRayCast2D) GetExcludeParentBody() bool {
	return self.ptr.API.RayCast2D_get_exclude_parent_body(self)
}
func (self classRayCast2D) SetCollideWithAreas(enable bool) {
	self.ptr.API.RayCast2D_set_collide_with_areas(self, enable)
}
func (self classRayCast2D) IsCollideWithAreasEnabled() bool {
	return self.ptr.API.RayCast2D_is_collide_with_areas_enabled(self)
}
func (self classRayCast2D) SetCollideWithBodies(enable bool) {
	self.ptr.API.RayCast2D_set_collide_with_bodies(self, enable)
}
func (self classRayCast2D) IsCollideWithBodiesEnabled() bool {
	return self.ptr.API.RayCast2D_is_collide_with_bodies_enabled(self)
}
func (self classRayCast2D) SetHitFromInside(enable bool) {
	self.ptr.API.RayCast2D_set_hit_from_inside(self, enable)
}
func (self classRayCast2D) IsHitFromInsideEnabled() bool {
	return self.ptr.API.RayCast2D_is_hit_from_inside_enabled(self)
}

type classRayCast3D struct{ Class[classRayCast3D] }

func (self classRayCast3D) Super() Node3D { var super Node3D; super.ptr = self.ptr; return super }

func (self classRayCast3D) Node3D() Node3D { return self.Super() }
func (self classRayCast3D) SetEnabled(enabled bool) {
	self.ptr.API.RayCast3D_set_enabled(self, enabled)
}
func (self classRayCast3D) IsEnabled() bool {
	return self.ptr.API.RayCast3D_is_enabled(self)
}
func (self classRayCast3D) SetTargetPosition(local_point Vector3) {
	self.ptr.API.RayCast3D_set_target_position(self, local_point)
}
func (self classRayCast3D) GetTargetPosition() Vector3 {
	return self.ptr.API.RayCast3D_get_target_position(self)
}
func (self classRayCast3D) IsColliding() bool {
	return self.ptr.API.RayCast3D_is_colliding(self)
}
func (self classRayCast3D) ForceRaycastUpdate() {
	self.ptr.API.RayCast3D_force_raycast_update(self)
}
func (self classRayCast3D) GetCollider() Object {
	return self.ptr.API.RayCast3D_get_collider(self)
}
func (self classRayCast3D) GetColliderRid() RID {
	return self.ptr.API.RayCast3D_get_collider_rid(self)
}
func (self classRayCast3D) GetColliderShape() Int {
	return self.ptr.API.RayCast3D_get_collider_shape(self)
}
func (self classRayCast3D) GetCollisionPoint() Vector3 {
	return self.ptr.API.RayCast3D_get_collision_point(self)
}
func (self classRayCast3D) GetCollisionNormal() Vector3 {
	return self.ptr.API.RayCast3D_get_collision_normal(self)
}
func (self classRayCast3D) GetCollisionFaceIndex() Int {
	return self.ptr.API.RayCast3D_get_collision_face_index(self)
}
func (self classRayCast3D) AddExceptionRid(rid RID) {
	self.ptr.API.RayCast3D_add_exception_rid(self, rid)
}
func (self classRayCast3D) AddException(node CollisionObject3D) {
	self.ptr.API.RayCast3D_add_exception(self, node)
}
func (self classRayCast3D) RemoveExceptionRid(rid RID) {
	self.ptr.API.RayCast3D_remove_exception_rid(self, rid)
}
func (self classRayCast3D) RemoveException(node CollisionObject3D) {
	self.ptr.API.RayCast3D_remove_exception(self, node)
}
func (self classRayCast3D) ClearExceptions() {
	self.ptr.API.RayCast3D_clear_exceptions(self)
}
func (self classRayCast3D) SetCollisionMask(mask Int) {
	self.ptr.API.RayCast3D_set_collision_mask(self, mask)
}
func (self classRayCast3D) GetCollisionMask() Int {
	return self.ptr.API.RayCast3D_get_collision_mask(self)
}
func (self classRayCast3D) SetCollisionMaskValue(layer_number Int, value bool) {
	self.ptr.API.RayCast3D_set_collision_mask_value(self, layer_number, value)
}
func (self classRayCast3D) GetCollisionMaskValue(layer_number Int) bool {
	return self.ptr.API.RayCast3D_get_collision_mask_value(self, layer_number)
}
func (self classRayCast3D) SetExcludeParentBody(mask bool) {
	self.ptr.API.RayCast3D_set_exclude_parent_body(self, mask)
}
func (self classRayCast3D) GetExcludeParentBody() bool {
	return self.ptr.API.RayCast3D_get_exclude_parent_body(self)
}
func (self classRayCast3D) SetCollideWithAreas(enable bool) {
	self.ptr.API.RayCast3D_set_collide_with_areas(self, enable)
}
func (self classRayCast3D) IsCollideWithAreasEnabled() bool {
	return self.ptr.API.RayCast3D_is_collide_with_areas_enabled(self)
}
func (self classRayCast3D) SetCollideWithBodies(enable bool) {
	self.ptr.API.RayCast3D_set_collide_with_bodies(self, enable)
}
func (self classRayCast3D) IsCollideWithBodiesEnabled() bool {
	return self.ptr.API.RayCast3D_is_collide_with_bodies_enabled(self)
}
func (self classRayCast3D) SetHitFromInside(enable bool) {
	self.ptr.API.RayCast3D_set_hit_from_inside(self, enable)
}
func (self classRayCast3D) IsHitFromInsideEnabled() bool {
	return self.ptr.API.RayCast3D_is_hit_from_inside_enabled(self)
}
func (self classRayCast3D) SetHitBackFaces(enable bool) {
	self.ptr.API.RayCast3D_set_hit_back_faces(self, enable)
}
func (self classRayCast3D) IsHitBackFacesEnabled() bool {
	return self.ptr.API.RayCast3D_is_hit_back_faces_enabled(self)
}
func (self classRayCast3D) SetDebugShapeCustomColor(debug_shape_custom_color Color) {
	self.ptr.API.RayCast3D_set_debug_shape_custom_color(self, debug_shape_custom_color)
}
func (self classRayCast3D) GetDebugShapeCustomColor() Color {
	return self.ptr.API.RayCast3D_get_debug_shape_custom_color(self)
}
func (self classRayCast3D) SetDebugShapeThickness(debug_shape_thickness Int) {
	self.ptr.API.RayCast3D_set_debug_shape_thickness(self, debug_shape_thickness)
}
func (self classRayCast3D) GetDebugShapeThickness() Int {
	return self.ptr.API.RayCast3D_get_debug_shape_thickness(self)
}

type classRectangleShape2D struct{ Class[classRectangleShape2D] }

func (self classRectangleShape2D) Super() Shape2D {
	var super Shape2D
	super.ptr = self.ptr
	return super
}

func (self classRectangleShape2D) Shape2D() Shape2D { return self.Super() }
func (self classRectangleShape2D) SetSize(size Vector2) {
	self.ptr.API.RectangleShape2D_set_size(self, size)
}
func (self classRectangleShape2D) GetSize() Vector2 {
	return self.ptr.API.RectangleShape2D_get_size(self)
}

type classRefCounted struct{ Class[classRefCounted] }

func (self classRefCounted) Super() Object { var super Object; super.ptr = self.ptr; return super }

func (self classRefCounted) Object() Object { return self.Super() }
func (self classRefCounted) InitRef() bool {
	return self.ptr.API.RefCounted_init_ref(self)
}
func (self classRefCounted) Reference() bool {
	return self.ptr.API.RefCounted_reference(self)
}
func (self classRefCounted) Unreference() bool {
	return self.ptr.API.RefCounted_unreference(self)
}
func (self classRefCounted) GetReferenceCount() Int {
	return self.ptr.API.RefCounted_get_reference_count(self)
}

type classReferenceRect struct{ Class[classReferenceRect] }

func (self classReferenceRect) Super() Control { var super Control; super.ptr = self.ptr; return super }

func (self classReferenceRect) Control() Control { return self.Super() }
func (self classReferenceRect) GetBorderColor() Color {
	return self.ptr.API.ReferenceRect_get_border_color(self)
}
func (self classReferenceRect) SetBorderColor(color Color) {
	self.ptr.API.ReferenceRect_set_border_color(self, color)
}
func (self classReferenceRect) GetBorderWidth() Float {
	return self.ptr.API.ReferenceRect_get_border_width(self)
}
func (self classReferenceRect) SetBorderWidth(width Float) {
	self.ptr.API.ReferenceRect_set_border_width(self, width)
}
func (self classReferenceRect) GetEditorOnly() bool {
	return self.ptr.API.ReferenceRect_get_editor_only(self)
}
func (self classReferenceRect) SetEditorOnly(enabled bool) {
	self.ptr.API.ReferenceRect_set_editor_only(self, enabled)
}

type classReflectionProbe struct{ Class[classReflectionProbe] }

func (self classReflectionProbe) Super() VisualInstance3D {
	var super VisualInstance3D
	super.ptr = self.ptr
	return super
}

func (self classReflectionProbe) VisualInstance3D() VisualInstance3D { return self.Super() }
func (self classReflectionProbe) SetIntensity(intensity Float) {
	self.ptr.API.ReflectionProbe_set_intensity(self, intensity)
}
func (self classReflectionProbe) GetIntensity() Float {
	return self.ptr.API.ReflectionProbe_get_intensity(self)
}
func (self classReflectionProbe) SetAmbientMode(ambient ReflectionProbeAmbientMode) {
	self.ptr.API.ReflectionProbe_set_ambient_mode(self, ambient)
}
func (self classReflectionProbe) GetAmbientMode() ReflectionProbeAmbientMode {
	return self.ptr.API.ReflectionProbe_get_ambient_mode(self)
}
func (self classReflectionProbe) SetAmbientColor(ambient Color) {
	self.ptr.API.ReflectionProbe_set_ambient_color(self, ambient)
}
func (self classReflectionProbe) GetAmbientColor() Color {
	return self.ptr.API.ReflectionProbe_get_ambient_color(self)
}
func (self classReflectionProbe) SetAmbientColorEnergy(ambient_energy Float) {
	self.ptr.API.ReflectionProbe_set_ambient_color_energy(self, ambient_energy)
}
func (self classReflectionProbe) GetAmbientColorEnergy() Float {
	return self.ptr.API.ReflectionProbe_get_ambient_color_energy(self)
}
func (self classReflectionProbe) SetMaxDistance(max_distance Float) {
	self.ptr.API.ReflectionProbe_set_max_distance(self, max_distance)
}
func (self classReflectionProbe) GetMaxDistance() Float {
	return self.ptr.API.ReflectionProbe_get_max_distance(self)
}
func (self classReflectionProbe) SetMeshLodThreshold(ratio Float) {
	self.ptr.API.ReflectionProbe_set_mesh_lod_threshold(self, ratio)
}
func (self classReflectionProbe) GetMeshLodThreshold() Float {
	return self.ptr.API.ReflectionProbe_get_mesh_lod_threshold(self)
}
func (self classReflectionProbe) SetSize(size Vector3) {
	self.ptr.API.ReflectionProbe_set_size(self, size)
}
func (self classReflectionProbe) GetSize() Vector3 {
	return self.ptr.API.ReflectionProbe_get_size(self)
}
func (self classReflectionProbe) SetOriginOffset(origin_offset Vector3) {
	self.ptr.API.ReflectionProbe_set_origin_offset(self, origin_offset)
}
func (self classReflectionProbe) GetOriginOffset() Vector3 {
	return self.ptr.API.ReflectionProbe_get_origin_offset(self)
}
func (self classReflectionProbe) SetAsInterior(enable bool) {
	self.ptr.API.ReflectionProbe_set_as_interior(self, enable)
}
func (self classReflectionProbe) IsSetAsInterior() bool {
	return self.ptr.API.ReflectionProbe_is_set_as_interior(self)
}
func (self classReflectionProbe) SetEnableBoxProjection(enable bool) {
	self.ptr.API.ReflectionProbe_set_enable_box_projection(self, enable)
}
func (self classReflectionProbe) IsBoxProjectionEnabled() bool {
	return self.ptr.API.ReflectionProbe_is_box_projection_enabled(self)
}
func (self classReflectionProbe) SetEnableShadows(enable bool) {
	self.ptr.API.ReflectionProbe_set_enable_shadows(self, enable)
}
func (self classReflectionProbe) AreShadowsEnabled() bool {
	return self.ptr.API.ReflectionProbe_are_shadows_enabled(self)
}
func (self classReflectionProbe) SetCullMask(layers Int) {
	self.ptr.API.ReflectionProbe_set_cull_mask(self, layers)
}
func (self classReflectionProbe) GetCullMask() Int {
	return self.ptr.API.ReflectionProbe_get_cull_mask(self)
}
func (self classReflectionProbe) SetUpdateMode(mode ReflectionProbeUpdateMode) {
	self.ptr.API.ReflectionProbe_set_update_mode(self, mode)
}
func (self classReflectionProbe) GetUpdateMode() ReflectionProbeUpdateMode {
	return self.ptr.API.ReflectionProbe_get_update_mode(self)
}

type classRegEx struct{ Class[classRegEx] }

func (self classRegEx) Super() RefCounted { var super RefCounted; super.ptr = self.ptr; return super }

func (self classRegEx) RefCounted() RefCounted { return self.Super() }
func (self classRegEx) CreateFromString(pattern String) RegEx {
	return self.ptr.API.RegEx_create_from_string(self, pattern)
}
func (self classRegEx) Clear() {
	self.ptr.API.RegEx_clear(self)
}
func (self classRegEx) Compile(pattern String) int64 {
	return self.ptr.API.RegEx_compile(self, pattern)
}
func (self classRegEx) Search(subject String, offset Int, end Int) RegExMatch {
	return self.ptr.API.RegEx_search(self, subject, offset, end)
}
func (self classRegEx) SearchAll(subject String, offset Int, end Int) ArrayOf[RegExMatch] {
	return self.ptr.API.RegEx_search_all(self, subject, offset, end)
}
func (self classRegEx) Sub(subject String, replacement String, all bool, offset Int, end Int) String {
	return self.ptr.API.RegEx_sub(self, subject, replacement, all, offset, end)
}
func (self classRegEx) IsValid() bool {
	return self.ptr.API.RegEx_is_valid(self)
}
func (self classRegEx) GetPattern() String {
	return self.ptr.API.RegEx_get_pattern(self)
}
func (self classRegEx) GetGroupCount() Int {
	return self.ptr.API.RegEx_get_group_count(self)
}
func (self classRegEx) GetNames() PackedStringArray {
	return self.ptr.API.RegEx_get_names(self)
}

type classRegExMatch struct{ Class[classRegExMatch] }

func (self classRegExMatch) Super() RefCounted {
	var super RefCounted
	super.ptr = self.ptr
	return super
}

func (self classRegExMatch) RefCounted() RefCounted { return self.Super() }
func (self classRegExMatch) GetSubject() String {
	return self.ptr.API.RegExMatch_get_subject(self)
}
func (self classRegExMatch) GetGroupCount() Int {
	return self.ptr.API.RegExMatch_get_group_count(self)
}
func (self classRegExMatch) GetNames() Dictionary {
	return self.ptr.API.RegExMatch_get_names(self)
}
func (self classRegExMatch) GetStrings() PackedStringArray {
	return self.ptr.API.RegExMatch_get_strings(self)
}
func (self classRegExMatch) GetString(name Variant) String {
	return self.ptr.API.RegExMatch_get_string(self, name)
}
func (self classRegExMatch) GetStart(name Variant) Int {
	return self.ptr.API.RegExMatch_get_start(self, name)
}
func (self classRegExMatch) GetEnd(name Variant) Int {
	return self.ptr.API.RegExMatch_get_end(self, name)
}

type classRemoteTransform2D struct{ Class[classRemoteTransform2D] }

func (self classRemoteTransform2D) Super() Node2D {
	var super Node2D
	super.ptr = self.ptr
	return super
}

func (self classRemoteTransform2D) Node2D() Node2D { return self.Super() }
func (self classRemoteTransform2D) SetRemoteNode(path NodePath) {
	self.ptr.API.RemoteTransform2D_set_remote_node(self, path)
}
func (self classRemoteTransform2D) GetRemoteNode() NodePath {
	return self.ptr.API.RemoteTransform2D_get_remote_node(self)
}
func (self classRemoteTransform2D) ForceUpdateCache() {
	self.ptr.API.RemoteTransform2D_force_update_cache(self)
}
func (self classRemoteTransform2D) SetUseGlobalCoordinates(use_global_coordinates bool) {
	self.ptr.API.RemoteTransform2D_set_use_global_coordinates(self, use_global_coordinates)
}
func (self classRemoteTransform2D) GetUseGlobalCoordinates() bool {
	return self.ptr.API.RemoteTransform2D_get_use_global_coordinates(self)
}
func (self classRemoteTransform2D) SetUpdatePosition(update_remote_position bool) {
	self.ptr.API.RemoteTransform2D_set_update_position(self, update_remote_position)
}
func (self classRemoteTransform2D) GetUpdatePosition() bool {
	return self.ptr.API.RemoteTransform2D_get_update_position(self)
}
func (self classRemoteTransform2D) SetUpdateRotation(update_remote_rotation bool) {
	self.ptr.API.RemoteTransform2D_set_update_rotation(self, update_remote_rotation)
}
func (self classRemoteTransform2D) GetUpdateRotation() bool {
	return self.ptr.API.RemoteTransform2D_get_update_rotation(self)
}
func (self classRemoteTransform2D) SetUpdateScale(update_remote_scale bool) {
	self.ptr.API.RemoteTransform2D_set_update_scale(self, update_remote_scale)
}
func (self classRemoteTransform2D) GetUpdateScale() bool {
	return self.ptr.API.RemoteTransform2D_get_update_scale(self)
}

type classRemoteTransform3D struct{ Class[classRemoteTransform3D] }

func (self classRemoteTransform3D) Super() Node3D {
	var super Node3D
	super.ptr = self.ptr
	return super
}

func (self classRemoteTransform3D) Node3D() Node3D { return self.Super() }
func (self classRemoteTransform3D) SetRemoteNode(path NodePath) {
	self.ptr.API.RemoteTransform3D_set_remote_node(self, path)
}
func (self classRemoteTransform3D) GetRemoteNode() NodePath {
	return self.ptr.API.RemoteTransform3D_get_remote_node(self)
}
func (self classRemoteTransform3D) ForceUpdateCache() {
	self.ptr.API.RemoteTransform3D_force_update_cache(self)
}
func (self classRemoteTransform3D) SetUseGlobalCoordinates(use_global_coordinates bool) {
	self.ptr.API.RemoteTransform3D_set_use_global_coordinates(self, use_global_coordinates)
}
func (self classRemoteTransform3D) GetUseGlobalCoordinates() bool {
	return self.ptr.API.RemoteTransform3D_get_use_global_coordinates(self)
}
func (self classRemoteTransform3D) SetUpdatePosition(update_remote_position bool) {
	self.ptr.API.RemoteTransform3D_set_update_position(self, update_remote_position)
}
func (self classRemoteTransform3D) GetUpdatePosition() bool {
	return self.ptr.API.RemoteTransform3D_get_update_position(self)
}
func (self classRemoteTransform3D) SetUpdateRotation(update_remote_rotation bool) {
	self.ptr.API.RemoteTransform3D_set_update_rotation(self, update_remote_rotation)
}
func (self classRemoteTransform3D) GetUpdateRotation() bool {
	return self.ptr.API.RemoteTransform3D_get_update_rotation(self)
}
func (self classRemoteTransform3D) SetUpdateScale(update_remote_scale bool) {
	self.ptr.API.RemoteTransform3D_set_update_scale(self, update_remote_scale)
}
func (self classRemoteTransform3D) GetUpdateScale() bool {
	return self.ptr.API.RemoteTransform3D_get_update_scale(self)
}

type classRenderSceneBuffers struct{ Class[classRenderSceneBuffers] }

func (self classRenderSceneBuffers) Super() RefCounted {
	var super RefCounted
	super.ptr = self.ptr
	return super
}

func (self classRenderSceneBuffers) RefCounted() RefCounted { return self.Super() }
func (self classRenderSceneBuffers) Configure(config RenderSceneBuffersConfiguration) {
	self.ptr.API.RenderSceneBuffers_configure(self, config)
}

type classRenderSceneBuffersConfiguration struct {
	Class[classRenderSceneBuffersConfiguration]
}

func (self classRenderSceneBuffersConfiguration) Super() RefCounted {
	var super RefCounted
	super.ptr = self.ptr
	return super
}

func (self classRenderSceneBuffersConfiguration) RefCounted() RefCounted { return self.Super() }
func (self classRenderSceneBuffersConfiguration) GetRenderTarget() RID {
	return self.ptr.API.RenderSceneBuffersConfiguration_get_render_target(self)
}
func (self classRenderSceneBuffersConfiguration) SetRenderTarget(render_target RID) {
	self.ptr.API.RenderSceneBuffersConfiguration_set_render_target(self, render_target)
}
func (self classRenderSceneBuffersConfiguration) GetInternalSize() Vector2i {
	return self.ptr.API.RenderSceneBuffersConfiguration_get_internal_size(self)
}
func (self classRenderSceneBuffersConfiguration) SetInternalSize(internal_size Vector2i) {
	self.ptr.API.RenderSceneBuffersConfiguration_set_internal_size(self, internal_size)
}
func (self classRenderSceneBuffersConfiguration) GetTargetSize() Vector2i {
	return self.ptr.API.RenderSceneBuffersConfiguration_get_target_size(self)
}
func (self classRenderSceneBuffersConfiguration) SetTargetSize(target_size Vector2i) {
	self.ptr.API.RenderSceneBuffersConfiguration_set_target_size(self, target_size)
}
func (self classRenderSceneBuffersConfiguration) GetViewCount() Int {
	return self.ptr.API.RenderSceneBuffersConfiguration_get_view_count(self)
}
func (self classRenderSceneBuffersConfiguration) SetViewCount(view_count Int) {
	self.ptr.API.RenderSceneBuffersConfiguration_set_view_count(self, view_count)
}
func (self classRenderSceneBuffersConfiguration) GetScaling3dMode() RenderingServerViewportScaling3DMode {
	return self.ptr.API.RenderSceneBuffersConfiguration_get_scaling_3d_mode(self)
}
func (self classRenderSceneBuffersConfiguration) SetScaling3dMode(scaling_3d_mode RenderingServerViewportScaling3DMode) {
	self.ptr.API.RenderSceneBuffersConfiguration_set_scaling_3d_mode(self, scaling_3d_mode)
}
func (self classRenderSceneBuffersConfiguration) GetMsaa3d() RenderingServerViewportMSAA {
	return self.ptr.API.RenderSceneBuffersConfiguration_get_msaa_3d(self)
}
func (self classRenderSceneBuffersConfiguration) SetMsaa3d(msaa_3d RenderingServerViewportMSAA) {
	self.ptr.API.RenderSceneBuffersConfiguration_set_msaa_3d(self, msaa_3d)
}
func (self classRenderSceneBuffersConfiguration) GetScreenSpaceAa() RenderingServerViewportScreenSpaceAA {
	return self.ptr.API.RenderSceneBuffersConfiguration_get_screen_space_aa(self)
}
func (self classRenderSceneBuffersConfiguration) SetScreenSpaceAa(screen_space_aa RenderingServerViewportScreenSpaceAA) {
	self.ptr.API.RenderSceneBuffersConfiguration_set_screen_space_aa(self, screen_space_aa)
}
func (self classRenderSceneBuffersConfiguration) GetFsrSharpness() Float {
	return self.ptr.API.RenderSceneBuffersConfiguration_get_fsr_sharpness(self)
}
func (self classRenderSceneBuffersConfiguration) SetFsrSharpness(fsr_sharpness Float) {
	self.ptr.API.RenderSceneBuffersConfiguration_set_fsr_sharpness(self, fsr_sharpness)
}
func (self classRenderSceneBuffersConfiguration) GetTextureMipmapBias() Float {
	return self.ptr.API.RenderSceneBuffersConfiguration_get_texture_mipmap_bias(self)
}
func (self classRenderSceneBuffersConfiguration) SetTextureMipmapBias(texture_mipmap_bias Float) {
	self.ptr.API.RenderSceneBuffersConfiguration_set_texture_mipmap_bias(self, texture_mipmap_bias)
}

type classRenderSceneBuffersExtension struct {
	Class[classRenderSceneBuffersExtension]
}

func (self classRenderSceneBuffersExtension) Super() RenderSceneBuffers {
	var super RenderSceneBuffers
	super.ptr = self.ptr
	return super
}

func (self classRenderSceneBuffersExtension) RenderSceneBuffers() RenderSceneBuffers {
	return self.Super()
}

type classRenderSceneBuffersRD struct {
	Class[classRenderSceneBuffersRD]
}

func (self classRenderSceneBuffersRD) Super() RenderSceneBuffers {
	var super RenderSceneBuffers
	super.ptr = self.ptr
	return super
}

func (self classRenderSceneBuffersRD) RenderSceneBuffers() RenderSceneBuffers { return self.Super() }
func (self classRenderSceneBuffersRD) HasTexture(context StringName, name StringName) bool {
	return self.ptr.API.RenderSceneBuffersRD_has_texture(self, context, name)
}
func (self classRenderSceneBuffersRD) CreateTexture(context StringName, name StringName, data_format RenderingDeviceDataFormat, usage_bits Int, texture_samples RenderingDeviceTextureSamples, size Vector2i, layers Int, mipmaps Int, unique bool) RID {
	return self.ptr.API.RenderSceneBuffersRD_create_texture(self, context, name, data_format, usage_bits, texture_samples, size, layers, mipmaps, unique)
}
func (self classRenderSceneBuffersRD) CreateTextureFromFormat(context StringName, name StringName, format RDTextureFormat, view RDTextureView, unique bool) RID {
	return self.ptr.API.RenderSceneBuffersRD_create_texture_from_format(self, context, name, format, view, unique)
}
func (self classRenderSceneBuffersRD) CreateTextureView(context StringName, name StringName, view_name StringName, view RDTextureView) RID {
	return self.ptr.API.RenderSceneBuffersRD_create_texture_view(self, context, name, view_name, view)
}
func (self classRenderSceneBuffersRD) GetTexture(context StringName, name StringName) RID {
	return self.ptr.API.RenderSceneBuffersRD_get_texture(self, context, name)
}
func (self classRenderSceneBuffersRD) GetTextureFormat(context StringName, name StringName) RDTextureFormat {
	return self.ptr.API.RenderSceneBuffersRD_get_texture_format(self, context, name)
}
func (self classRenderSceneBuffersRD) GetTextureSlice(context StringName, name StringName, layer Int, mipmap Int, layers Int, mipmaps Int) RID {
	return self.ptr.API.RenderSceneBuffersRD_get_texture_slice(self, context, name, layer, mipmap, layers, mipmaps)
}
func (self classRenderSceneBuffersRD) GetTextureSliceView(context StringName, name StringName, layer Int, mipmap Int, layers Int, mipmaps Int, view RDTextureView) RID {
	return self.ptr.API.RenderSceneBuffersRD_get_texture_slice_view(self, context, name, layer, mipmap, layers, mipmaps, view)
}
func (self classRenderSceneBuffersRD) GetTextureSliceSize(context StringName, name StringName, mipmap Int) Vector2i {
	return self.ptr.API.RenderSceneBuffersRD_get_texture_slice_size(self, context, name, mipmap)
}
func (self classRenderSceneBuffersRD) ClearContext(context StringName) {
	self.ptr.API.RenderSceneBuffersRD_clear_context(self, context)
}
func (self classRenderSceneBuffersRD) GetColorTexture() RID {
	return self.ptr.API.RenderSceneBuffersRD_get_color_texture(self)
}
func (self classRenderSceneBuffersRD) GetColorLayer(layer Int) RID {
	return self.ptr.API.RenderSceneBuffersRD_get_color_layer(self, layer)
}
func (self classRenderSceneBuffersRD) GetDepthTexture() RID {
	return self.ptr.API.RenderSceneBuffersRD_get_depth_texture(self)
}
func (self classRenderSceneBuffersRD) GetDepthLayer(layer Int) RID {
	return self.ptr.API.RenderSceneBuffersRD_get_depth_layer(self, layer)
}
func (self classRenderSceneBuffersRD) GetVelocityTexture() RID {
	return self.ptr.API.RenderSceneBuffersRD_get_velocity_texture(self)
}
func (self classRenderSceneBuffersRD) GetVelocityLayer(layer Int) RID {
	return self.ptr.API.RenderSceneBuffersRD_get_velocity_layer(self, layer)
}
func (self classRenderSceneBuffersRD) GetRenderTarget() RID {
	return self.ptr.API.RenderSceneBuffersRD_get_render_target(self)
}
func (self classRenderSceneBuffersRD) GetViewCount() Int {
	return self.ptr.API.RenderSceneBuffersRD_get_view_count(self)
}
func (self classRenderSceneBuffersRD) GetInternalSize() Vector2i {
	return self.ptr.API.RenderSceneBuffersRD_get_internal_size(self)
}
func (self classRenderSceneBuffersRD) GetUseTaa() bool {
	return self.ptr.API.RenderSceneBuffersRD_get_use_taa(self)
}

type classRenderingDevice struct{ Class[classRenderingDevice] }

func (self classRenderingDevice) Super() Object { var super Object; super.ptr = self.ptr; return super }

func (self classRenderingDevice) Object() Object { return self.Super() }
func (self classRenderingDevice) TextureCreate(format RDTextureFormat, view RDTextureView, data ArrayOf[PackedByteArray]) RID {
	return self.ptr.API.RenderingDevice_texture_create(self, format, view, data)
}
func (self classRenderingDevice) TextureCreateShared(view RDTextureView, with_texture RID) RID {
	return self.ptr.API.RenderingDevice_texture_create_shared(self, view, with_texture)
}
func (self classRenderingDevice) TextureCreateSharedFromSlice(view RDTextureView, with_texture RID, layer Int, mipmap Int, mipmaps Int, slice_type RenderingDeviceTextureSliceType) RID {
	return self.ptr.API.RenderingDevice_texture_create_shared_from_slice(self, view, with_texture, layer, mipmap, mipmaps, slice_type)
}
func (self classRenderingDevice) TextureCreateFromExtension(atype RenderingDeviceTextureType, format RenderingDeviceDataFormat, samples RenderingDeviceTextureSamples, usage_flags RenderingDeviceTextureUsageBits, image Int, width Int, height Int, depth Int, layers Int) RID {
	return self.ptr.API.RenderingDevice_texture_create_from_extension(self, atype, format, samples, usage_flags, image, width, height, depth, layers)
}
func (self classRenderingDevice) TextureUpdate(texture RID, layer Int, data PackedByteArray) int64 {
	return self.ptr.API.RenderingDevice_texture_update(self, texture, layer, data)
}
func (self classRenderingDevice) TextureGetData(texture RID, layer Int) PackedByteArray {
	return self.ptr.API.RenderingDevice_texture_get_data(self, texture, layer)
}
func (self classRenderingDevice) TextureIsFormatSupportedForUsage(format RenderingDeviceDataFormat, usage_flags RenderingDeviceTextureUsageBits) bool {
	return self.ptr.API.RenderingDevice_texture_is_format_supported_for_usage(self, format, usage_flags)
}
func (self classRenderingDevice) TextureIsShared(texture RID) bool {
	return self.ptr.API.RenderingDevice_texture_is_shared(self, texture)
}
func (self classRenderingDevice) TextureIsValid(texture RID) bool {
	return self.ptr.API.RenderingDevice_texture_is_valid(self, texture)
}
func (self classRenderingDevice) TextureCopy(from_texture RID, to_texture RID, from_pos Vector3, to_pos Vector3, size Vector3, src_mipmap Int, dst_mipmap Int, src_layer Int, dst_layer Int) int64 {
	return self.ptr.API.RenderingDevice_texture_copy(self, from_texture, to_texture, from_pos, to_pos, size, src_mipmap, dst_mipmap, src_layer, dst_layer)
}
func (self classRenderingDevice) TextureClear(texture RID, color Color, base_mipmap Int, mipmap_count Int, base_layer Int, layer_count Int) int64 {
	return self.ptr.API.RenderingDevice_texture_clear(self, texture, color, base_mipmap, mipmap_count, base_layer, layer_count)
}
func (self classRenderingDevice) TextureResolveMultisample(from_texture RID, to_texture RID) int64 {
	return self.ptr.API.RenderingDevice_texture_resolve_multisample(self, from_texture, to_texture)
}
func (self classRenderingDevice) TextureGetFormat(texture RID) RDTextureFormat {
	return self.ptr.API.RenderingDevice_texture_get_format(self, texture)
}
func (self classRenderingDevice) TextureGetNativeHandle(texture RID) Int {
	return self.ptr.API.RenderingDevice_texture_get_native_handle(self, texture)
}
func (self classRenderingDevice) FramebufferFormatCreate(attachments ArrayOf[RDAttachmentFormat], view_count Int) Int {
	return self.ptr.API.RenderingDevice_framebuffer_format_create(self, attachments, view_count)
}
func (self classRenderingDevice) FramebufferFormatCreateMultipass(attachments ArrayOf[RDAttachmentFormat], passes ArrayOf[RDFramebufferPass], view_count Int) Int {
	return self.ptr.API.RenderingDevice_framebuffer_format_create_multipass(self, attachments, passes, view_count)
}
func (self classRenderingDevice) FramebufferFormatCreateEmpty(samples RenderingDeviceTextureSamples) Int {
	return self.ptr.API.RenderingDevice_framebuffer_format_create_empty(self, samples)
}
func (self classRenderingDevice) FramebufferFormatGetTextureSamples(format Int, render_pass Int) RenderingDeviceTextureSamples {
	return self.ptr.API.RenderingDevice_framebuffer_format_get_texture_samples(self, format, render_pass)
}
func (self classRenderingDevice) FramebufferCreate(textures ArrayOf[RID], validate_with_format Int, view_count Int) RID {
	return self.ptr.API.RenderingDevice_framebuffer_create(self, textures, validate_with_format, view_count)
}
func (self classRenderingDevice) FramebufferCreateMultipass(textures ArrayOf[RID], passes ArrayOf[RDFramebufferPass], validate_with_format Int, view_count Int) RID {
	return self.ptr.API.RenderingDevice_framebuffer_create_multipass(self, textures, passes, validate_with_format, view_count)
}
func (self classRenderingDevice) FramebufferCreateEmpty(size Vector2i, samples RenderingDeviceTextureSamples, validate_with_format Int) RID {
	return self.ptr.API.RenderingDevice_framebuffer_create_empty(self, size, samples, validate_with_format)
}
func (self classRenderingDevice) FramebufferGetFormat(framebuffer RID) Int {
	return self.ptr.API.RenderingDevice_framebuffer_get_format(self, framebuffer)
}
func (self classRenderingDevice) FramebufferIsValid(framebuffer RID) bool {
	return self.ptr.API.RenderingDevice_framebuffer_is_valid(self, framebuffer)
}
func (self classRenderingDevice) SamplerCreate(state RDSamplerState) RID {
	return self.ptr.API.RenderingDevice_sampler_create(self, state)
}
func (self classRenderingDevice) SamplerIsFormatSupportedForFilter(format RenderingDeviceDataFormat, sampler_filter RenderingDeviceSamplerFilter) bool {
	return self.ptr.API.RenderingDevice_sampler_is_format_supported_for_filter(self, format, sampler_filter)
}
func (self classRenderingDevice) VertexBufferCreate(size_bytes Int, data PackedByteArray, use_as_storage bool) RID {
	return self.ptr.API.RenderingDevice_vertex_buffer_create(self, size_bytes, data, use_as_storage)
}
func (self classRenderingDevice) VertexFormatCreate(vertex_descriptions ArrayOf[RDVertexAttribute]) Int {
	return self.ptr.API.RenderingDevice_vertex_format_create(self, vertex_descriptions)
}
func (self classRenderingDevice) VertexArrayCreate(vertex_count Int, vertex_format Int, src_buffers ArrayOf[RID], offsets PackedInt64Array) RID {
	return self.ptr.API.RenderingDevice_vertex_array_create(self, vertex_count, vertex_format, src_buffers, offsets)
}
func (self classRenderingDevice) IndexBufferCreate(size_indices Int, format RenderingDeviceIndexBufferFormat, data PackedByteArray, use_restart_indices bool) RID {
	return self.ptr.API.RenderingDevice_index_buffer_create(self, size_indices, format, data, use_restart_indices)
}
func (self classRenderingDevice) IndexArrayCreate(index_buffer RID, index_offset Int, index_count Int) RID {
	return self.ptr.API.RenderingDevice_index_array_create(self, index_buffer, index_offset, index_count)
}
func (self classRenderingDevice) ShaderCompileSpirvFromSource(shader_source RDShaderSource, allow_cache bool) RDShaderSPIRV {
	return self.ptr.API.RenderingDevice_shader_compile_spirv_from_source(self, shader_source, allow_cache)
}
func (self classRenderingDevice) ShaderCompileBinaryFromSpirv(spirv_data RDShaderSPIRV, name String) PackedByteArray {
	return self.ptr.API.RenderingDevice_shader_compile_binary_from_spirv(self, spirv_data, name)
}
func (self classRenderingDevice) ShaderCreateFromSpirv(spirv_data RDShaderSPIRV, name String) RID {
	return self.ptr.API.RenderingDevice_shader_create_from_spirv(self, spirv_data, name)
}
func (self classRenderingDevice) ShaderCreateFromBytecode(binary_data PackedByteArray, placeholder_rid RID) RID {
	return self.ptr.API.RenderingDevice_shader_create_from_bytecode(self, binary_data, placeholder_rid)
}
func (self classRenderingDevice) ShaderCreatePlaceholder() RID {
	return self.ptr.API.RenderingDevice_shader_create_placeholder(self)
}
func (self classRenderingDevice) ShaderGetVertexInputAttributeMask(shader RID) Int {
	return self.ptr.API.RenderingDevice_shader_get_vertex_input_attribute_mask(self, shader)
}
func (self classRenderingDevice) UniformBufferCreate(size_bytes Int, data PackedByteArray) RID {
	return self.ptr.API.RenderingDevice_uniform_buffer_create(self, size_bytes, data)
}
func (self classRenderingDevice) StorageBufferCreate(size_bytes Int, data PackedByteArray, usage RenderingDeviceStorageBufferUsage) RID {
	return self.ptr.API.RenderingDevice_storage_buffer_create(self, size_bytes, data, usage)
}
func (self classRenderingDevice) TextureBufferCreate(size_bytes Int, format RenderingDeviceDataFormat, data PackedByteArray) RID {
	return self.ptr.API.RenderingDevice_texture_buffer_create(self, size_bytes, format, data)
}
func (self classRenderingDevice) UniformSetCreate(uniforms ArrayOf[RDUniform], shader RID, shader_set Int) RID {
	return self.ptr.API.RenderingDevice_uniform_set_create(self, uniforms, shader, shader_set)
}
func (self classRenderingDevice) UniformSetIsValid(uniform_set RID) bool {
	return self.ptr.API.RenderingDevice_uniform_set_is_valid(self, uniform_set)
}
func (self classRenderingDevice) BufferCopy(src_buffer RID, dst_buffer RID, src_offset Int, dst_offset Int, size Int) int64 {
	return self.ptr.API.RenderingDevice_buffer_copy(self, src_buffer, dst_buffer, src_offset, dst_offset, size)
}
func (self classRenderingDevice) BufferUpdate(buffer RID, offset Int, size_bytes Int, data PackedByteArray) int64 {
	return self.ptr.API.RenderingDevice_buffer_update(self, buffer, offset, size_bytes, data)
}
func (self classRenderingDevice) BufferClear(buffer RID, offset Int, size_bytes Int) int64 {
	return self.ptr.API.RenderingDevice_buffer_clear(self, buffer, offset, size_bytes)
}
func (self classRenderingDevice) BufferGetData(buffer RID, offset_bytes Int, size_bytes Int) PackedByteArray {
	return self.ptr.API.RenderingDevice_buffer_get_data(self, buffer, offset_bytes, size_bytes)
}
func (self classRenderingDevice) RenderPipelineCreate(shader RID, framebuffer_format Int, vertex_format Int, primitive RenderingDeviceRenderPrimitive, rasterization_state RDPipelineRasterizationState, multisample_state RDPipelineMultisampleState, stencil_state RDPipelineDepthStencilState, color_blend_state RDPipelineColorBlendState, dynamic_state_flags RenderingDevicePipelineDynamicStateFlags, for_render_pass Int, specialization_constants ArrayOf[RDPipelineSpecializationConstant]) RID {
	return self.ptr.API.RenderingDevice_render_pipeline_create(self, shader, framebuffer_format, vertex_format, primitive, rasterization_state, multisample_state, stencil_state, color_blend_state, dynamic_state_flags, for_render_pass, specialization_constants)
}
func (self classRenderingDevice) RenderPipelineIsValid(render_pipeline RID) bool {
	return self.ptr.API.RenderingDevice_render_pipeline_is_valid(self, render_pipeline)
}
func (self classRenderingDevice) ComputePipelineCreate(shader RID, specialization_constants ArrayOf[RDPipelineSpecializationConstant]) RID {
	return self.ptr.API.RenderingDevice_compute_pipeline_create(self, shader, specialization_constants)
}
func (self classRenderingDevice) ComputePipelineIsValid(compute_pipeline RID) bool {
	return self.ptr.API.RenderingDevice_compute_pipeline_is_valid(self, compute_pipeline)
}
func (self classRenderingDevice) ScreenGetWidth(screen Int) Int {
	return self.ptr.API.RenderingDevice_screen_get_width(self, screen)
}
func (self classRenderingDevice) ScreenGetHeight(screen Int) Int {
	return self.ptr.API.RenderingDevice_screen_get_height(self, screen)
}
func (self classRenderingDevice) ScreenGetFramebufferFormat() Int {
	return self.ptr.API.RenderingDevice_screen_get_framebuffer_format(self)
}
func (self classRenderingDevice) DrawListBeginForScreen(screen Int, clear_color Color) Int {
	return self.ptr.API.RenderingDevice_draw_list_begin_for_screen(self, screen, clear_color)
}
func (self classRenderingDevice) DrawListBegin(framebuffer RID, initial_color_action RenderingDeviceInitialAction, final_color_action RenderingDeviceFinalAction, initial_depth_action RenderingDeviceInitialAction, final_depth_action RenderingDeviceFinalAction, clear_color_values PackedColorArray, clear_depth Float, clear_stencil Int, region Rect2) Int {
	return self.ptr.API.RenderingDevice_draw_list_begin(self, framebuffer, initial_color_action, final_color_action, initial_depth_action, final_depth_action, clear_color_values, clear_depth, clear_stencil, region)
}
func (self classRenderingDevice) DrawListBeginSplit(framebuffer RID, splits Int, initial_color_action RenderingDeviceInitialAction, final_color_action RenderingDeviceFinalAction, initial_depth_action RenderingDeviceInitialAction, final_depth_action RenderingDeviceFinalAction, clear_color_values PackedColorArray, clear_depth Float, clear_stencil Int, region Rect2, storage_textures ArrayOf[RID]) PackedInt64Array {
	return self.ptr.API.RenderingDevice_draw_list_begin_split(self, framebuffer, splits, initial_color_action, final_color_action, initial_depth_action, final_depth_action, clear_color_values, clear_depth, clear_stencil, region, storage_textures)
}
func (self classRenderingDevice) DrawListSetBlendConstants(draw_list Int, color Color) {
	self.ptr.API.RenderingDevice_draw_list_set_blend_constants(self, draw_list, color)
}
func (self classRenderingDevice) DrawListBindRenderPipeline(draw_list Int, render_pipeline RID) {
	self.ptr.API.RenderingDevice_draw_list_bind_render_pipeline(self, draw_list, render_pipeline)
}
func (self classRenderingDevice) DrawListBindUniformSet(draw_list Int, uniform_set RID, set_index Int) {
	self.ptr.API.RenderingDevice_draw_list_bind_uniform_set(self, draw_list, uniform_set, set_index)
}
func (self classRenderingDevice) DrawListBindVertexArray(draw_list Int, vertex_array RID) {
	self.ptr.API.RenderingDevice_draw_list_bind_vertex_array(self, draw_list, vertex_array)
}
func (self classRenderingDevice) DrawListBindIndexArray(draw_list Int, index_array RID) {
	self.ptr.API.RenderingDevice_draw_list_bind_index_array(self, draw_list, index_array)
}
func (self classRenderingDevice) DrawListSetPushConstant(draw_list Int, buffer PackedByteArray, size_bytes Int) {
	self.ptr.API.RenderingDevice_draw_list_set_push_constant(self, draw_list, buffer, size_bytes)
}
func (self classRenderingDevice) DrawListDraw(draw_list Int, use_indices bool, instances Int, procedural_vertex_count Int) {
	self.ptr.API.RenderingDevice_draw_list_draw(self, draw_list, use_indices, instances, procedural_vertex_count)
}
func (self classRenderingDevice) DrawListEnableScissor(draw_list Int, rect Rect2) {
	self.ptr.API.RenderingDevice_draw_list_enable_scissor(self, draw_list, rect)
}
func (self classRenderingDevice) DrawListDisableScissor(draw_list Int) {
	self.ptr.API.RenderingDevice_draw_list_disable_scissor(self, draw_list)
}
func (self classRenderingDevice) DrawListSwitchToNextPass() Int {
	return self.ptr.API.RenderingDevice_draw_list_switch_to_next_pass(self)
}
func (self classRenderingDevice) DrawListSwitchToNextPassSplit(splits Int) PackedInt64Array {
	return self.ptr.API.RenderingDevice_draw_list_switch_to_next_pass_split(self, splits)
}
func (self classRenderingDevice) DrawListEnd() {
	self.ptr.API.RenderingDevice_draw_list_end(self)
}
func (self classRenderingDevice) ComputeListBegin() Int {
	return self.ptr.API.RenderingDevice_compute_list_begin(self)
}
func (self classRenderingDevice) ComputeListBindComputePipeline(compute_list Int, compute_pipeline RID) {
	self.ptr.API.RenderingDevice_compute_list_bind_compute_pipeline(self, compute_list, compute_pipeline)
}
func (self classRenderingDevice) ComputeListSetPushConstant(compute_list Int, buffer PackedByteArray, size_bytes Int) {
	self.ptr.API.RenderingDevice_compute_list_set_push_constant(self, compute_list, buffer, size_bytes)
}
func (self classRenderingDevice) ComputeListBindUniformSet(compute_list Int, uniform_set RID, set_index Int) {
	self.ptr.API.RenderingDevice_compute_list_bind_uniform_set(self, compute_list, uniform_set, set_index)
}
func (self classRenderingDevice) ComputeListDispatch(compute_list Int, x_groups Int, y_groups Int, z_groups Int) {
	self.ptr.API.RenderingDevice_compute_list_dispatch(self, compute_list, x_groups, y_groups, z_groups)
}
func (self classRenderingDevice) ComputeListAddBarrier(compute_list Int) {
	self.ptr.API.RenderingDevice_compute_list_add_barrier(self, compute_list)
}
func (self classRenderingDevice) ComputeListEnd() {
	self.ptr.API.RenderingDevice_compute_list_end(self)
}
func (self classRenderingDevice) FreeRid(rid RID) {
	self.ptr.API.RenderingDevice_free_rid(self, rid)
}
func (self classRenderingDevice) CaptureTimestamp(name String) {
	self.ptr.API.RenderingDevice_capture_timestamp(self, name)
}
func (self classRenderingDevice) GetCapturedTimestampsCount() Int {
	return self.ptr.API.RenderingDevice_get_captured_timestamps_count(self)
}
func (self classRenderingDevice) GetCapturedTimestampsFrame() Int {
	return self.ptr.API.RenderingDevice_get_captured_timestamps_frame(self)
}
func (self classRenderingDevice) GetCapturedTimestampGpuTime(index Int) Int {
	return self.ptr.API.RenderingDevice_get_captured_timestamp_gpu_time(self, index)
}
func (self classRenderingDevice) GetCapturedTimestampCpuTime(index Int) Int {
	return self.ptr.API.RenderingDevice_get_captured_timestamp_cpu_time(self, index)
}
func (self classRenderingDevice) GetCapturedTimestampName(index Int) String {
	return self.ptr.API.RenderingDevice_get_captured_timestamp_name(self, index)
}
func (self classRenderingDevice) LimitGet(limit RenderingDeviceLimit) Int {
	return self.ptr.API.RenderingDevice_limit_get(self, limit)
}
func (self classRenderingDevice) GetFrameDelay() Int {
	return self.ptr.API.RenderingDevice_get_frame_delay(self)
}
func (self classRenderingDevice) Submit() {
	self.ptr.API.RenderingDevice_submit(self)
}
func (self classRenderingDevice) Sync() {
	self.ptr.API.RenderingDevice_sync(self)
}
func (self classRenderingDevice) Barrier(from RenderingDeviceBarrierMask, to RenderingDeviceBarrierMask) {
	self.ptr.API.RenderingDevice_barrier(self, from, to)
}
func (self classRenderingDevice) FullBarrier() {
	self.ptr.API.RenderingDevice_full_barrier(self)
}
func (self classRenderingDevice) CreateLocalDevice() RenderingDevice {
	return self.ptr.API.RenderingDevice_create_local_device(self)
}
func (self classRenderingDevice) SetResourceName(id RID, name String) {
	self.ptr.API.RenderingDevice_set_resource_name(self, id, name)
}
func (self classRenderingDevice) DrawCommandBeginLabel(name String, color Color) {
	self.ptr.API.RenderingDevice_draw_command_begin_label(self, name, color)
}
func (self classRenderingDevice) DrawCommandInsertLabel(name String, color Color) {
	self.ptr.API.RenderingDevice_draw_command_insert_label(self, name, color)
}
func (self classRenderingDevice) DrawCommandEndLabel() {
	self.ptr.API.RenderingDevice_draw_command_end_label(self)
}
func (self classRenderingDevice) GetDeviceVendorName() String {
	return self.ptr.API.RenderingDevice_get_device_vendor_name(self)
}
func (self classRenderingDevice) GetDeviceName() String {
	return self.ptr.API.RenderingDevice_get_device_name(self)
}
func (self classRenderingDevice) GetDevicePipelineCacheUuid() String {
	return self.ptr.API.RenderingDevice_get_device_pipeline_cache_uuid(self)
}
func (self classRenderingDevice) GetMemoryUsage(atype RenderingDeviceMemoryType) Int {
	return self.ptr.API.RenderingDevice_get_memory_usage(self, atype)
}
func (self classRenderingDevice) GetDriverResource(resource RenderingDeviceDriverResource, rid RID, index Int) Int {
	return self.ptr.API.RenderingDevice_get_driver_resource(self, resource, rid, index)
}

type classRenderingServer struct{ Class[classRenderingServer] }

func (self classRenderingServer) Super() Object { var super Object; super.ptr = self.ptr; return super }

func (self classRenderingServer) Object() Object { return self.Super() }

func (self classRenderingServer) isSingleton() {}
func (self classRenderingServer) Texture2dCreate(image Image) RID {
	return self.ptr.API.RenderingServer_texture_2d_create(self, image)
}
func (self classRenderingServer) Texture2dLayeredCreate(layers ArrayOf[Image], layered_type RenderingServerTextureLayeredType) RID {
	return self.ptr.API.RenderingServer_texture_2d_layered_create(self, layers, layered_type)
}
func (self classRenderingServer) Texture3dCreate(format ImageFormat, width Int, height Int, depth Int, mipmaps bool, data ArrayOf[Image]) RID {
	return self.ptr.API.RenderingServer_texture_3d_create(self, format, width, height, depth, mipmaps, data)
}
func (self classRenderingServer) TextureProxyCreate(base RID) RID {
	return self.ptr.API.RenderingServer_texture_proxy_create(self, base)
}
func (self classRenderingServer) Texture2dUpdate(texture RID, image Image, layer Int) {
	self.ptr.API.RenderingServer_texture_2d_update(self, texture, image, layer)
}
func (self classRenderingServer) Texture3dUpdate(texture RID, data ArrayOf[Image]) {
	self.ptr.API.RenderingServer_texture_3d_update(self, texture, data)
}
func (self classRenderingServer) TextureProxyUpdate(texture RID, proxy_to RID) {
	self.ptr.API.RenderingServer_texture_proxy_update(self, texture, proxy_to)
}
func (self classRenderingServer) Texture2dPlaceholderCreate() RID {
	return self.ptr.API.RenderingServer_texture_2d_placeholder_create(self)
}
func (self classRenderingServer) Texture2dLayeredPlaceholderCreate(layered_type RenderingServerTextureLayeredType) RID {
	return self.ptr.API.RenderingServer_texture_2d_layered_placeholder_create(self, layered_type)
}
func (self classRenderingServer) Texture3dPlaceholderCreate() RID {
	return self.ptr.API.RenderingServer_texture_3d_placeholder_create(self)
}
func (self classRenderingServer) Texture2dGet(texture RID) Image {
	return self.ptr.API.RenderingServer_texture_2d_get(self, texture)
}
func (self classRenderingServer) Texture2dLayerGet(texture RID, layer Int) Image {
	return self.ptr.API.RenderingServer_texture_2d_layer_get(self, texture, layer)
}
func (self classRenderingServer) Texture3dGet(texture RID) ArrayOf[Image] {
	return self.ptr.API.RenderingServer_texture_3d_get(self, texture)
}
func (self classRenderingServer) TextureReplace(texture RID, by_texture RID) {
	self.ptr.API.RenderingServer_texture_replace(self, texture, by_texture)
}
func (self classRenderingServer) TextureSetSizeOverride(texture RID, width Int, height Int) {
	self.ptr.API.RenderingServer_texture_set_size_override(self, texture, width, height)
}
func (self classRenderingServer) TextureSetPath(texture RID, path String) {
	self.ptr.API.RenderingServer_texture_set_path(self, texture, path)
}
func (self classRenderingServer) TextureGetPath(texture RID) String {
	return self.ptr.API.RenderingServer_texture_get_path(self, texture)
}
func (self classRenderingServer) TextureGetFormat(texture RID) ImageFormat {
	return self.ptr.API.RenderingServer_texture_get_format(self, texture)
}
func (self classRenderingServer) TextureSetForceRedrawIfVisible(texture RID, enable bool) {
	self.ptr.API.RenderingServer_texture_set_force_redraw_if_visible(self, texture, enable)
}
func (self classRenderingServer) TextureRdCreate(rd_texture RID, layer_type RenderingServerTextureLayeredType) RID {
	return self.ptr.API.RenderingServer_texture_rd_create(self, rd_texture, layer_type)
}
func (self classRenderingServer) TextureGetRdTexture(texture RID, srgb bool) RID {
	return self.ptr.API.RenderingServer_texture_get_rd_texture(self, texture, srgb)
}
func (self classRenderingServer) TextureGetNativeHandle(texture RID, srgb bool) Int {
	return self.ptr.API.RenderingServer_texture_get_native_handle(self, texture, srgb)
}
func (self classRenderingServer) ShaderCreate() RID {
	return self.ptr.API.RenderingServer_shader_create(self)
}
func (self classRenderingServer) ShaderSetCode(shader RID, code String) {
	self.ptr.API.RenderingServer_shader_set_code(self, shader, code)
}
func (self classRenderingServer) ShaderSetPathHint(shader RID, path String) {
	self.ptr.API.RenderingServer_shader_set_path_hint(self, shader, path)
}
func (self classRenderingServer) ShaderGetCode(shader RID) String {
	return self.ptr.API.RenderingServer_shader_get_code(self, shader)
}
func (self classRenderingServer) GetShaderParameterList(shader RID) ArrayOf[Dictionary] {
	return self.ptr.API.RenderingServer_get_shader_parameter_list(self, shader)
}
func (self classRenderingServer) ShaderGetParameterDefault(shader RID, name StringName) Variant {
	return self.ptr.API.RenderingServer_shader_get_parameter_default(self, shader, name)
}
func (self classRenderingServer) ShaderSetDefaultTextureParameter(shader RID, name StringName, texture RID, index Int) {
	self.ptr.API.RenderingServer_shader_set_default_texture_parameter(self, shader, name, texture, index)
}
func (self classRenderingServer) ShaderGetDefaultTextureParameter(shader RID, name StringName, index Int) RID {
	return self.ptr.API.RenderingServer_shader_get_default_texture_parameter(self, shader, name, index)
}
func (self classRenderingServer) MaterialCreate() RID {
	return self.ptr.API.RenderingServer_material_create(self)
}
func (self classRenderingServer) MaterialSetShader(shader_material RID, shader RID) {
	self.ptr.API.RenderingServer_material_set_shader(self, shader_material, shader)
}
func (self classRenderingServer) MaterialSetParam(material RID, parameter StringName, value Variant) {
	self.ptr.API.RenderingServer_material_set_param(self, material, parameter, value)
}
func (self classRenderingServer) MaterialGetParam(material RID, parameter StringName) Variant {
	return self.ptr.API.RenderingServer_material_get_param(self, material, parameter)
}
func (self classRenderingServer) MaterialSetRenderPriority(material RID, priority Int) {
	self.ptr.API.RenderingServer_material_set_render_priority(self, material, priority)
}
func (self classRenderingServer) MaterialSetNextPass(material RID, next_material RID) {
	self.ptr.API.RenderingServer_material_set_next_pass(self, material, next_material)
}
func (self classRenderingServer) MeshCreateFromSurfaces(surfaces ArrayOf[Dictionary], blend_shape_count Int) RID {
	return self.ptr.API.RenderingServer_mesh_create_from_surfaces(self, surfaces, blend_shape_count)
}
func (self classRenderingServer) MeshCreate() RID {
	return self.ptr.API.RenderingServer_mesh_create(self)
}
func (self classRenderingServer) MeshSurfaceGetFormatOffset(format RenderingServerArrayFormat, vertex_count Int, array_index Int) Int {
	return self.ptr.API.RenderingServer_mesh_surface_get_format_offset(self, format, vertex_count, array_index)
}
func (self classRenderingServer) MeshSurfaceGetFormatVertexStride(format RenderingServerArrayFormat, vertex_count Int) Int {
	return self.ptr.API.RenderingServer_mesh_surface_get_format_vertex_stride(self, format, vertex_count)
}
func (self classRenderingServer) MeshSurfaceGetFormatNormalTangentStride(format RenderingServerArrayFormat, vertex_count Int) Int {
	return self.ptr.API.RenderingServer_mesh_surface_get_format_normal_tangent_stride(self, format, vertex_count)
}
func (self classRenderingServer) MeshSurfaceGetFormatAttributeStride(format RenderingServerArrayFormat, vertex_count Int) Int {
	return self.ptr.API.RenderingServer_mesh_surface_get_format_attribute_stride(self, format, vertex_count)
}
func (self classRenderingServer) MeshSurfaceGetFormatSkinStride(format RenderingServerArrayFormat, vertex_count Int) Int {
	return self.ptr.API.RenderingServer_mesh_surface_get_format_skin_stride(self, format, vertex_count)
}
func (self classRenderingServer) MeshAddSurface(mesh RID, surface Dictionary) {
	self.ptr.API.RenderingServer_mesh_add_surface(self, mesh, surface)
}
func (self classRenderingServer) MeshAddSurfaceFromArrays(mesh RID, primitive RenderingServerPrimitiveType, arrays Array, blend_shapes Array, lods Dictionary, compress_format RenderingServerArrayFormat) {
	self.ptr.API.RenderingServer_mesh_add_surface_from_arrays(self, mesh, primitive, arrays, blend_shapes, lods, compress_format)
}
func (self classRenderingServer) MeshGetBlendShapeCount(mesh RID) Int {
	return self.ptr.API.RenderingServer_mesh_get_blend_shape_count(self, mesh)
}
func (self classRenderingServer) MeshSetBlendShapeMode(mesh RID, mode RenderingServerBlendShapeMode) {
	self.ptr.API.RenderingServer_mesh_set_blend_shape_mode(self, mesh, mode)
}
func (self classRenderingServer) MeshGetBlendShapeMode(mesh RID) RenderingServerBlendShapeMode {
	return self.ptr.API.RenderingServer_mesh_get_blend_shape_mode(self, mesh)
}
func (self classRenderingServer) MeshSurfaceSetMaterial(mesh RID, surface Int, material RID) {
	self.ptr.API.RenderingServer_mesh_surface_set_material(self, mesh, surface, material)
}
func (self classRenderingServer) MeshSurfaceGetMaterial(mesh RID, surface Int) RID {
	return self.ptr.API.RenderingServer_mesh_surface_get_material(self, mesh, surface)
}
func (self classRenderingServer) MeshGetSurface(mesh RID, surface Int) Dictionary {
	return self.ptr.API.RenderingServer_mesh_get_surface(self, mesh, surface)
}
func (self classRenderingServer) MeshSurfaceGetArrays(mesh RID, surface Int) Array {
	return self.ptr.API.RenderingServer_mesh_surface_get_arrays(self, mesh, surface)
}
func (self classRenderingServer) MeshSurfaceGetBlendShapeArrays(mesh RID, surface Int) ArrayOf[Array] {
	return self.ptr.API.RenderingServer_mesh_surface_get_blend_shape_arrays(self, mesh, surface)
}
func (self classRenderingServer) MeshGetSurfaceCount(mesh RID) Int {
	return self.ptr.API.RenderingServer_mesh_get_surface_count(self, mesh)
}
func (self classRenderingServer) MeshSetCustomAabb(mesh RID, aabb AABB) {
	self.ptr.API.RenderingServer_mesh_set_custom_aabb(self, mesh, aabb)
}
func (self classRenderingServer) MeshGetCustomAabb(mesh RID) AABB {
	return self.ptr.API.RenderingServer_mesh_get_custom_aabb(self, mesh)
}
func (self classRenderingServer) MeshClear(mesh RID) {
	self.ptr.API.RenderingServer_mesh_clear(self, mesh)
}
func (self classRenderingServer) MeshSurfaceUpdateVertexRegion(mesh RID, surface Int, offset Int, data PackedByteArray) {
	self.ptr.API.RenderingServer_mesh_surface_update_vertex_region(self, mesh, surface, offset, data)
}
func (self classRenderingServer) MeshSurfaceUpdateAttributeRegion(mesh RID, surface Int, offset Int, data PackedByteArray) {
	self.ptr.API.RenderingServer_mesh_surface_update_attribute_region(self, mesh, surface, offset, data)
}
func (self classRenderingServer) MeshSurfaceUpdateSkinRegion(mesh RID, surface Int, offset Int, data PackedByteArray) {
	self.ptr.API.RenderingServer_mesh_surface_update_skin_region(self, mesh, surface, offset, data)
}
func (self classRenderingServer) MeshSetShadowMesh(mesh RID, shadow_mesh RID) {
	self.ptr.API.RenderingServer_mesh_set_shadow_mesh(self, mesh, shadow_mesh)
}
func (self classRenderingServer) MultimeshCreate() RID {
	return self.ptr.API.RenderingServer_multimesh_create(self)
}
func (self classRenderingServer) MultimeshAllocateData(multimesh RID, instances Int, transform_format RenderingServerMultimeshTransformFormat, color_format bool, custom_data_format bool) {
	self.ptr.API.RenderingServer_multimesh_allocate_data(self, multimesh, instances, transform_format, color_format, custom_data_format)
}
func (self classRenderingServer) MultimeshGetInstanceCount(multimesh RID) Int {
	return self.ptr.API.RenderingServer_multimesh_get_instance_count(self, multimesh)
}
func (self classRenderingServer) MultimeshSetMesh(multimesh RID, mesh RID) {
	self.ptr.API.RenderingServer_multimesh_set_mesh(self, multimesh, mesh)
}
func (self classRenderingServer) MultimeshInstanceSetTransform(multimesh RID, index Int, transform Transform3D) {
	self.ptr.API.RenderingServer_multimesh_instance_set_transform(self, multimesh, index, transform)
}
func (self classRenderingServer) MultimeshInstanceSetTransform2d(multimesh RID, index Int, transform Transform2D) {
	self.ptr.API.RenderingServer_multimesh_instance_set_transform_2d(self, multimesh, index, transform)
}
func (self classRenderingServer) MultimeshInstanceSetColor(multimesh RID, index Int, color Color) {
	self.ptr.API.RenderingServer_multimesh_instance_set_color(self, multimesh, index, color)
}
func (self classRenderingServer) MultimeshInstanceSetCustomData(multimesh RID, index Int, custom_data Color) {
	self.ptr.API.RenderingServer_multimesh_instance_set_custom_data(self, multimesh, index, custom_data)
}
func (self classRenderingServer) MultimeshGetMesh(multimesh RID) RID {
	return self.ptr.API.RenderingServer_multimesh_get_mesh(self, multimesh)
}
func (self classRenderingServer) MultimeshGetAabb(multimesh RID) AABB {
	return self.ptr.API.RenderingServer_multimesh_get_aabb(self, multimesh)
}
func (self classRenderingServer) MultimeshInstanceGetTransform(multimesh RID, index Int) Transform3D {
	return self.ptr.API.RenderingServer_multimesh_instance_get_transform(self, multimesh, index)
}
func (self classRenderingServer) MultimeshInstanceGetTransform2d(multimesh RID, index Int) Transform2D {
	return self.ptr.API.RenderingServer_multimesh_instance_get_transform_2d(self, multimesh, index)
}
func (self classRenderingServer) MultimeshInstanceGetColor(multimesh RID, index Int) Color {
	return self.ptr.API.RenderingServer_multimesh_instance_get_color(self, multimesh, index)
}
func (self classRenderingServer) MultimeshInstanceGetCustomData(multimesh RID, index Int) Color {
	return self.ptr.API.RenderingServer_multimesh_instance_get_custom_data(self, multimesh, index)
}
func (self classRenderingServer) MultimeshSetVisibleInstances(multimesh RID, visible Int) {
	self.ptr.API.RenderingServer_multimesh_set_visible_instances(self, multimesh, visible)
}
func (self classRenderingServer) MultimeshGetVisibleInstances(multimesh RID) Int {
	return self.ptr.API.RenderingServer_multimesh_get_visible_instances(self, multimesh)
}
func (self classRenderingServer) MultimeshSetBuffer(multimesh RID, buffer PackedFloat32Array) {
	self.ptr.API.RenderingServer_multimesh_set_buffer(self, multimesh, buffer)
}
func (self classRenderingServer) MultimeshGetBuffer(multimesh RID) PackedFloat32Array {
	return self.ptr.API.RenderingServer_multimesh_get_buffer(self, multimesh)
}
func (self classRenderingServer) SkeletonCreate() RID {
	return self.ptr.API.RenderingServer_skeleton_create(self)
}
func (self classRenderingServer) SkeletonAllocateData(skeleton RID, bones Int, is_2d_skeleton bool) {
	self.ptr.API.RenderingServer_skeleton_allocate_data(self, skeleton, bones, is_2d_skeleton)
}
func (self classRenderingServer) SkeletonGetBoneCount(skeleton RID) Int {
	return self.ptr.API.RenderingServer_skeleton_get_bone_count(self, skeleton)
}
func (self classRenderingServer) SkeletonBoneSetTransform(skeleton RID, bone Int, transform Transform3D) {
	self.ptr.API.RenderingServer_skeleton_bone_set_transform(self, skeleton, bone, transform)
}
func (self classRenderingServer) SkeletonBoneGetTransform(skeleton RID, bone Int) Transform3D {
	return self.ptr.API.RenderingServer_skeleton_bone_get_transform(self, skeleton, bone)
}
func (self classRenderingServer) SkeletonBoneSetTransform2d(skeleton RID, bone Int, transform Transform2D) {
	self.ptr.API.RenderingServer_skeleton_bone_set_transform_2d(self, skeleton, bone, transform)
}
func (self classRenderingServer) SkeletonBoneGetTransform2d(skeleton RID, bone Int) Transform2D {
	return self.ptr.API.RenderingServer_skeleton_bone_get_transform_2d(self, skeleton, bone)
}
func (self classRenderingServer) SkeletonSetBaseTransform2d(skeleton RID, base_transform Transform2D) {
	self.ptr.API.RenderingServer_skeleton_set_base_transform_2d(self, skeleton, base_transform)
}
func (self classRenderingServer) DirectionalLightCreate() RID {
	return self.ptr.API.RenderingServer_directional_light_create(self)
}
func (self classRenderingServer) OmniLightCreate() RID {
	return self.ptr.API.RenderingServer_omni_light_create(self)
}
func (self classRenderingServer) SpotLightCreate() RID {
	return self.ptr.API.RenderingServer_spot_light_create(self)
}
func (self classRenderingServer) LightSetColor(light RID, color Color) {
	self.ptr.API.RenderingServer_light_set_color(self, light, color)
}
func (self classRenderingServer) LightSetParam(light RID, param RenderingServerLightParam, value Float) {
	self.ptr.API.RenderingServer_light_set_param(self, light, param, value)
}
func (self classRenderingServer) LightSetShadow(light RID, enabled bool) {
	self.ptr.API.RenderingServer_light_set_shadow(self, light, enabled)
}
func (self classRenderingServer) LightSetProjector(light RID, texture RID) {
	self.ptr.API.RenderingServer_light_set_projector(self, light, texture)
}
func (self classRenderingServer) LightSetNegative(light RID, enable bool) {
	self.ptr.API.RenderingServer_light_set_negative(self, light, enable)
}
func (self classRenderingServer) LightSetCullMask(light RID, mask Int) {
	self.ptr.API.RenderingServer_light_set_cull_mask(self, light, mask)
}
func (self classRenderingServer) LightSetDistanceFade(decal RID, enabled bool, begin Float, shadow Float, length Float) {
	self.ptr.API.RenderingServer_light_set_distance_fade(self, decal, enabled, begin, shadow, length)
}
func (self classRenderingServer) LightSetReverseCullFaceMode(light RID, enabled bool) {
	self.ptr.API.RenderingServer_light_set_reverse_cull_face_mode(self, light, enabled)
}
func (self classRenderingServer) LightSetBakeMode(light RID, bake_mode RenderingServerLightBakeMode) {
	self.ptr.API.RenderingServer_light_set_bake_mode(self, light, bake_mode)
}
func (self classRenderingServer) LightSetMaxSdfgiCascade(light RID, cascade Int) {
	self.ptr.API.RenderingServer_light_set_max_sdfgi_cascade(self, light, cascade)
}
func (self classRenderingServer) LightOmniSetShadowMode(light RID, mode RenderingServerLightOmniShadowMode) {
	self.ptr.API.RenderingServer_light_omni_set_shadow_mode(self, light, mode)
}
func (self classRenderingServer) LightDirectionalSetShadowMode(light RID, mode RenderingServerLightDirectionalShadowMode) {
	self.ptr.API.RenderingServer_light_directional_set_shadow_mode(self, light, mode)
}
func (self classRenderingServer) LightDirectionalSetBlendSplits(light RID, enable bool) {
	self.ptr.API.RenderingServer_light_directional_set_blend_splits(self, light, enable)
}
func (self classRenderingServer) LightDirectionalSetSkyMode(light RID, mode RenderingServerLightDirectionalSkyMode) {
	self.ptr.API.RenderingServer_light_directional_set_sky_mode(self, light, mode)
}
func (self classRenderingServer) LightProjectorsSetFilter(filter RenderingServerLightProjectorFilter) {
	self.ptr.API.RenderingServer_light_projectors_set_filter(self, filter)
}
func (self classRenderingServer) PositionalSoftShadowFilterSetQuality(quality RenderingServerShadowQuality) {
	self.ptr.API.RenderingServer_positional_soft_shadow_filter_set_quality(self, quality)
}
func (self classRenderingServer) DirectionalSoftShadowFilterSetQuality(quality RenderingServerShadowQuality) {
	self.ptr.API.RenderingServer_directional_soft_shadow_filter_set_quality(self, quality)
}
func (self classRenderingServer) DirectionalShadowAtlasSetSize(size Int, is_16bits bool) {
	self.ptr.API.RenderingServer_directional_shadow_atlas_set_size(self, size, is_16bits)
}
func (self classRenderingServer) ReflectionProbeCreate() RID {
	return self.ptr.API.RenderingServer_reflection_probe_create(self)
}
func (self classRenderingServer) ReflectionProbeSetUpdateMode(probe RID, mode RenderingServerReflectionProbeUpdateMode) {
	self.ptr.API.RenderingServer_reflection_probe_set_update_mode(self, probe, mode)
}
func (self classRenderingServer) ReflectionProbeSetIntensity(probe RID, intensity Float) {
	self.ptr.API.RenderingServer_reflection_probe_set_intensity(self, probe, intensity)
}
func (self classRenderingServer) ReflectionProbeSetAmbientMode(probe RID, mode RenderingServerReflectionProbeAmbientMode) {
	self.ptr.API.RenderingServer_reflection_probe_set_ambient_mode(self, probe, mode)
}
func (self classRenderingServer) ReflectionProbeSetAmbientColor(probe RID, color Color) {
	self.ptr.API.RenderingServer_reflection_probe_set_ambient_color(self, probe, color)
}
func (self classRenderingServer) ReflectionProbeSetAmbientEnergy(probe RID, energy Float) {
	self.ptr.API.RenderingServer_reflection_probe_set_ambient_energy(self, probe, energy)
}
func (self classRenderingServer) ReflectionProbeSetMaxDistance(probe RID, distance Float) {
	self.ptr.API.RenderingServer_reflection_probe_set_max_distance(self, probe, distance)
}
func (self classRenderingServer) ReflectionProbeSetSize(probe RID, size Vector3) {
	self.ptr.API.RenderingServer_reflection_probe_set_size(self, probe, size)
}
func (self classRenderingServer) ReflectionProbeSetOriginOffset(probe RID, offset Vector3) {
	self.ptr.API.RenderingServer_reflection_probe_set_origin_offset(self, probe, offset)
}
func (self classRenderingServer) ReflectionProbeSetAsInterior(probe RID, enable bool) {
	self.ptr.API.RenderingServer_reflection_probe_set_as_interior(self, probe, enable)
}
func (self classRenderingServer) ReflectionProbeSetEnableBoxProjection(probe RID, enable bool) {
	self.ptr.API.RenderingServer_reflection_probe_set_enable_box_projection(self, probe, enable)
}
func (self classRenderingServer) ReflectionProbeSetEnableShadows(probe RID, enable bool) {
	self.ptr.API.RenderingServer_reflection_probe_set_enable_shadows(self, probe, enable)
}
func (self classRenderingServer) ReflectionProbeSetCullMask(probe RID, layers Int) {
	self.ptr.API.RenderingServer_reflection_probe_set_cull_mask(self, probe, layers)
}
func (self classRenderingServer) ReflectionProbeSetResolution(probe RID, resolution Int) {
	self.ptr.API.RenderingServer_reflection_probe_set_resolution(self, probe, resolution)
}
func (self classRenderingServer) ReflectionProbeSetMeshLodThreshold(probe RID, pixels Float) {
	self.ptr.API.RenderingServer_reflection_probe_set_mesh_lod_threshold(self, probe, pixels)
}
func (self classRenderingServer) DecalCreate() RID {
	return self.ptr.API.RenderingServer_decal_create(self)
}
func (self classRenderingServer) DecalSetSize(decal RID, size Vector3) {
	self.ptr.API.RenderingServer_decal_set_size(self, decal, size)
}
func (self classRenderingServer) DecalSetTexture(decal RID, atype RenderingServerDecalTexture, texture RID) {
	self.ptr.API.RenderingServer_decal_set_texture(self, decal, atype, texture)
}
func (self classRenderingServer) DecalSetEmissionEnergy(decal RID, energy Float) {
	self.ptr.API.RenderingServer_decal_set_emission_energy(self, decal, energy)
}
func (self classRenderingServer) DecalSetAlbedoMix(decal RID, albedo_mix Float) {
	self.ptr.API.RenderingServer_decal_set_albedo_mix(self, decal, albedo_mix)
}
func (self classRenderingServer) DecalSetModulate(decal RID, color Color) {
	self.ptr.API.RenderingServer_decal_set_modulate(self, decal, color)
}
func (self classRenderingServer) DecalSetCullMask(decal RID, mask Int) {
	self.ptr.API.RenderingServer_decal_set_cull_mask(self, decal, mask)
}
func (self classRenderingServer) DecalSetDistanceFade(decal RID, enabled bool, begin Float, length Float) {
	self.ptr.API.RenderingServer_decal_set_distance_fade(self, decal, enabled, begin, length)
}
func (self classRenderingServer) DecalSetFade(decal RID, above Float, below Float) {
	self.ptr.API.RenderingServer_decal_set_fade(self, decal, above, below)
}
func (self classRenderingServer) DecalSetNormalFade(decal RID, fade Float) {
	self.ptr.API.RenderingServer_decal_set_normal_fade(self, decal, fade)
}
func (self classRenderingServer) DecalsSetFilter(filter RenderingServerDecalFilter) {
	self.ptr.API.RenderingServer_decals_set_filter(self, filter)
}
func (self classRenderingServer) GiSetUseHalfResolution(half_resolution bool) {
	self.ptr.API.RenderingServer_gi_set_use_half_resolution(self, half_resolution)
}
func (self classRenderingServer) VoxelGiCreate() RID {
	return self.ptr.API.RenderingServer_voxel_gi_create(self)
}
func (self classRenderingServer) VoxelGiAllocateData(voxel_gi RID, to_cell_xform Transform3D, aabb AABB, octree_size Vector3i, octree_cells PackedByteArray, data_cells PackedByteArray, distance_field PackedByteArray, level_counts PackedInt32Array) {
	self.ptr.API.RenderingServer_voxel_gi_allocate_data(self, voxel_gi, to_cell_xform, aabb, octree_size, octree_cells, data_cells, distance_field, level_counts)
}
func (self classRenderingServer) VoxelGiGetOctreeSize(voxel_gi RID) Vector3i {
	return self.ptr.API.RenderingServer_voxel_gi_get_octree_size(self, voxel_gi)
}
func (self classRenderingServer) VoxelGiGetOctreeCells(voxel_gi RID) PackedByteArray {
	return self.ptr.API.RenderingServer_voxel_gi_get_octree_cells(self, voxel_gi)
}
func (self classRenderingServer) VoxelGiGetDataCells(voxel_gi RID) PackedByteArray {
	return self.ptr.API.RenderingServer_voxel_gi_get_data_cells(self, voxel_gi)
}
func (self classRenderingServer) VoxelGiGetDistanceField(voxel_gi RID) PackedByteArray {
	return self.ptr.API.RenderingServer_voxel_gi_get_distance_field(self, voxel_gi)
}
func (self classRenderingServer) VoxelGiGetLevelCounts(voxel_gi RID) PackedInt32Array {
	return self.ptr.API.RenderingServer_voxel_gi_get_level_counts(self, voxel_gi)
}
func (self classRenderingServer) VoxelGiGetToCellXform(voxel_gi RID) Transform3D {
	return self.ptr.API.RenderingServer_voxel_gi_get_to_cell_xform(self, voxel_gi)
}
func (self classRenderingServer) VoxelGiSetDynamicRange(voxel_gi RID, arange Float) {
	self.ptr.API.RenderingServer_voxel_gi_set_dynamic_range(self, voxel_gi, arange)
}
func (self classRenderingServer) VoxelGiSetPropagation(voxel_gi RID, amount Float) {
	self.ptr.API.RenderingServer_voxel_gi_set_propagation(self, voxel_gi, amount)
}
func (self classRenderingServer) VoxelGiSetEnergy(voxel_gi RID, energy Float) {
	self.ptr.API.RenderingServer_voxel_gi_set_energy(self, voxel_gi, energy)
}
func (self classRenderingServer) VoxelGiSetBakedExposureNormalization(voxel_gi RID, baked_exposure Float) {
	self.ptr.API.RenderingServer_voxel_gi_set_baked_exposure_normalization(self, voxel_gi, baked_exposure)
}
func (self classRenderingServer) VoxelGiSetBias(voxel_gi RID, bias Float) {
	self.ptr.API.RenderingServer_voxel_gi_set_bias(self, voxel_gi, bias)
}
func (self classRenderingServer) VoxelGiSetNormalBias(voxel_gi RID, bias Float) {
	self.ptr.API.RenderingServer_voxel_gi_set_normal_bias(self, voxel_gi, bias)
}
func (self classRenderingServer) VoxelGiSetInterior(voxel_gi RID, enable bool) {
	self.ptr.API.RenderingServer_voxel_gi_set_interior(self, voxel_gi, enable)
}
func (self classRenderingServer) VoxelGiSetUseTwoBounces(voxel_gi RID, enable bool) {
	self.ptr.API.RenderingServer_voxel_gi_set_use_two_bounces(self, voxel_gi, enable)
}
func (self classRenderingServer) VoxelGiSetQuality(quality RenderingServerVoxelGIQuality) {
	self.ptr.API.RenderingServer_voxel_gi_set_quality(self, quality)
}
func (self classRenderingServer) LightmapCreate() RID {
	return self.ptr.API.RenderingServer_lightmap_create(self)
}
func (self classRenderingServer) LightmapSetTextures(lightmap RID, light RID, uses_sh bool) {
	self.ptr.API.RenderingServer_lightmap_set_textures(self, lightmap, light, uses_sh)
}
func (self classRenderingServer) LightmapSetProbeBounds(lightmap RID, bounds AABB) {
	self.ptr.API.RenderingServer_lightmap_set_probe_bounds(self, lightmap, bounds)
}
func (self classRenderingServer) LightmapSetProbeInterior(lightmap RID, interior bool) {
	self.ptr.API.RenderingServer_lightmap_set_probe_interior(self, lightmap, interior)
}
func (self classRenderingServer) LightmapSetProbeCaptureData(lightmap RID, points PackedVector3Array, point_sh PackedColorArray, tetrahedra PackedInt32Array, bsp_tree PackedInt32Array) {
	self.ptr.API.RenderingServer_lightmap_set_probe_capture_data(self, lightmap, points, point_sh, tetrahedra, bsp_tree)
}
func (self classRenderingServer) LightmapGetProbeCapturePoints(lightmap RID) PackedVector3Array {
	return self.ptr.API.RenderingServer_lightmap_get_probe_capture_points(self, lightmap)
}
func (self classRenderingServer) LightmapGetProbeCaptureSh(lightmap RID) PackedColorArray {
	return self.ptr.API.RenderingServer_lightmap_get_probe_capture_sh(self, lightmap)
}
func (self classRenderingServer) LightmapGetProbeCaptureTetrahedra(lightmap RID) PackedInt32Array {
	return self.ptr.API.RenderingServer_lightmap_get_probe_capture_tetrahedra(self, lightmap)
}
func (self classRenderingServer) LightmapGetProbeCaptureBspTree(lightmap RID) PackedInt32Array {
	return self.ptr.API.RenderingServer_lightmap_get_probe_capture_bsp_tree(self, lightmap)
}
func (self classRenderingServer) LightmapSetBakedExposureNormalization(lightmap RID, baked_exposure Float) {
	self.ptr.API.RenderingServer_lightmap_set_baked_exposure_normalization(self, lightmap, baked_exposure)
}
func (self classRenderingServer) LightmapSetProbeCaptureUpdateSpeed(speed Float) {
	self.ptr.API.RenderingServer_lightmap_set_probe_capture_update_speed(self, speed)
}
func (self classRenderingServer) ParticlesCreate() RID {
	return self.ptr.API.RenderingServer_particles_create(self)
}
func (self classRenderingServer) ParticlesSetMode(particles RID, mode RenderingServerParticlesMode) {
	self.ptr.API.RenderingServer_particles_set_mode(self, particles, mode)
}
func (self classRenderingServer) ParticlesSetEmitting(particles RID, emitting bool) {
	self.ptr.API.RenderingServer_particles_set_emitting(self, particles, emitting)
}
func (self classRenderingServer) ParticlesGetEmitting(particles RID) bool {
	return self.ptr.API.RenderingServer_particles_get_emitting(self, particles)
}
func (self classRenderingServer) ParticlesSetAmount(particles RID, amount Int) {
	self.ptr.API.RenderingServer_particles_set_amount(self, particles, amount)
}
func (self classRenderingServer) ParticlesSetAmountRatio(particles RID, ratio Float) {
	self.ptr.API.RenderingServer_particles_set_amount_ratio(self, particles, ratio)
}
func (self classRenderingServer) ParticlesSetLifetime(particles RID, lifetime Float) {
	self.ptr.API.RenderingServer_particles_set_lifetime(self, particles, lifetime)
}
func (self classRenderingServer) ParticlesSetOneShot(particles RID, one_shot bool) {
	self.ptr.API.RenderingServer_particles_set_one_shot(self, particles, one_shot)
}
func (self classRenderingServer) ParticlesSetPreProcessTime(particles RID, time Float) {
	self.ptr.API.RenderingServer_particles_set_pre_process_time(self, particles, time)
}
func (self classRenderingServer) ParticlesSetExplosivenessRatio(particles RID, ratio Float) {
	self.ptr.API.RenderingServer_particles_set_explosiveness_ratio(self, particles, ratio)
}
func (self classRenderingServer) ParticlesSetRandomnessRatio(particles RID, ratio Float) {
	self.ptr.API.RenderingServer_particles_set_randomness_ratio(self, particles, ratio)
}
func (self classRenderingServer) ParticlesSetInterpToEnd(particles RID, factor Float) {
	self.ptr.API.RenderingServer_particles_set_interp_to_end(self, particles, factor)
}
func (self classRenderingServer) ParticlesSetEmitterVelocity(particles RID, velocity Vector3) {
	self.ptr.API.RenderingServer_particles_set_emitter_velocity(self, particles, velocity)
}
func (self classRenderingServer) ParticlesSetCustomAabb(particles RID, aabb AABB) {
	self.ptr.API.RenderingServer_particles_set_custom_aabb(self, particles, aabb)
}
func (self classRenderingServer) ParticlesSetSpeedScale(particles RID, scale Float) {
	self.ptr.API.RenderingServer_particles_set_speed_scale(self, particles, scale)
}
func (self classRenderingServer) ParticlesSetUseLocalCoordinates(particles RID, enable bool) {
	self.ptr.API.RenderingServer_particles_set_use_local_coordinates(self, particles, enable)
}
func (self classRenderingServer) ParticlesSetProcessMaterial(particles RID, material RID) {
	self.ptr.API.RenderingServer_particles_set_process_material(self, particles, material)
}
func (self classRenderingServer) ParticlesSetFixedFps(particles RID, fps Int) {
	self.ptr.API.RenderingServer_particles_set_fixed_fps(self, particles, fps)
}
func (self classRenderingServer) ParticlesSetInterpolate(particles RID, enable bool) {
	self.ptr.API.RenderingServer_particles_set_interpolate(self, particles, enable)
}
func (self classRenderingServer) ParticlesSetFractionalDelta(particles RID, enable bool) {
	self.ptr.API.RenderingServer_particles_set_fractional_delta(self, particles, enable)
}
func (self classRenderingServer) ParticlesSetCollisionBaseSize(particles RID, size Float) {
	self.ptr.API.RenderingServer_particles_set_collision_base_size(self, particles, size)
}
func (self classRenderingServer) ParticlesSetTransformAlign(particles RID, align RenderingServerParticlesTransformAlign) {
	self.ptr.API.RenderingServer_particles_set_transform_align(self, particles, align)
}
func (self classRenderingServer) ParticlesSetTrails(particles RID, enable bool, length_sec Float) {
	self.ptr.API.RenderingServer_particles_set_trails(self, particles, enable, length_sec)
}
func (self classRenderingServer) ParticlesSetTrailBindPoses(particles RID, bind_poses ArrayOf[Transform3D]) {
	self.ptr.API.RenderingServer_particles_set_trail_bind_poses(self, particles, bind_poses)
}
func (self classRenderingServer) ParticlesIsInactive(particles RID) bool {
	return self.ptr.API.RenderingServer_particles_is_inactive(self, particles)
}
func (self classRenderingServer) ParticlesRequestProcess(particles RID) {
	self.ptr.API.RenderingServer_particles_request_process(self, particles)
}
func (self classRenderingServer) ParticlesRestart(particles RID) {
	self.ptr.API.RenderingServer_particles_restart(self, particles)
}
func (self classRenderingServer) ParticlesSetSubemitter(particles RID, subemitter_particles RID) {
	self.ptr.API.RenderingServer_particles_set_subemitter(self, particles, subemitter_particles)
}
func (self classRenderingServer) ParticlesEmit(particles RID, transform Transform3D, velocity Vector3, color Color, custom Color, emit_flags Int) {
	self.ptr.API.RenderingServer_particles_emit(self, particles, transform, velocity, color, custom, emit_flags)
}
func (self classRenderingServer) ParticlesSetDrawOrder(particles RID, order RenderingServerParticlesDrawOrder) {
	self.ptr.API.RenderingServer_particles_set_draw_order(self, particles, order)
}
func (self classRenderingServer) ParticlesSetDrawPasses(particles RID, count Int) {
	self.ptr.API.RenderingServer_particles_set_draw_passes(self, particles, count)
}
func (self classRenderingServer) ParticlesSetDrawPassMesh(particles RID, pass Int, mesh RID) {
	self.ptr.API.RenderingServer_particles_set_draw_pass_mesh(self, particles, pass, mesh)
}
func (self classRenderingServer) ParticlesGetCurrentAabb(particles RID) AABB {
	return self.ptr.API.RenderingServer_particles_get_current_aabb(self, particles)
}
func (self classRenderingServer) ParticlesSetEmissionTransform(particles RID, transform Transform3D) {
	self.ptr.API.RenderingServer_particles_set_emission_transform(self, particles, transform)
}
func (self classRenderingServer) ParticlesCollisionCreate() RID {
	return self.ptr.API.RenderingServer_particles_collision_create(self)
}
func (self classRenderingServer) ParticlesCollisionSetCollisionType(particles_collision RID, atype RenderingServerParticlesCollisionType) {
	self.ptr.API.RenderingServer_particles_collision_set_collision_type(self, particles_collision, atype)
}
func (self classRenderingServer) ParticlesCollisionSetCullMask(particles_collision RID, mask Int) {
	self.ptr.API.RenderingServer_particles_collision_set_cull_mask(self, particles_collision, mask)
}
func (self classRenderingServer) ParticlesCollisionSetSphereRadius(particles_collision RID, radius Float) {
	self.ptr.API.RenderingServer_particles_collision_set_sphere_radius(self, particles_collision, radius)
}
func (self classRenderingServer) ParticlesCollisionSetBoxExtents(particles_collision RID, extents Vector3) {
	self.ptr.API.RenderingServer_particles_collision_set_box_extents(self, particles_collision, extents)
}
func (self classRenderingServer) ParticlesCollisionSetAttractorStrength(particles_collision RID, strength Float) {
	self.ptr.API.RenderingServer_particles_collision_set_attractor_strength(self, particles_collision, strength)
}
func (self classRenderingServer) ParticlesCollisionSetAttractorDirectionality(particles_collision RID, amount Float) {
	self.ptr.API.RenderingServer_particles_collision_set_attractor_directionality(self, particles_collision, amount)
}
func (self classRenderingServer) ParticlesCollisionSetAttractorAttenuation(particles_collision RID, curve Float) {
	self.ptr.API.RenderingServer_particles_collision_set_attractor_attenuation(self, particles_collision, curve)
}
func (self classRenderingServer) ParticlesCollisionSetFieldTexture(particles_collision RID, texture RID) {
	self.ptr.API.RenderingServer_particles_collision_set_field_texture(self, particles_collision, texture)
}
func (self classRenderingServer) ParticlesCollisionHeightFieldUpdate(particles_collision RID) {
	self.ptr.API.RenderingServer_particles_collision_height_field_update(self, particles_collision)
}
func (self classRenderingServer) ParticlesCollisionSetHeightFieldResolution(particles_collision RID, resolution RenderingServerParticlesCollisionHeightfieldResolution) {
	self.ptr.API.RenderingServer_particles_collision_set_height_field_resolution(self, particles_collision, resolution)
}
func (self classRenderingServer) FogVolumeCreate() RID {
	return self.ptr.API.RenderingServer_fog_volume_create(self)
}
func (self classRenderingServer) FogVolumeSetShape(fog_volume RID, shape RenderingServerFogVolumeShape) {
	self.ptr.API.RenderingServer_fog_volume_set_shape(self, fog_volume, shape)
}
func (self classRenderingServer) FogVolumeSetSize(fog_volume RID, size Vector3) {
	self.ptr.API.RenderingServer_fog_volume_set_size(self, fog_volume, size)
}
func (self classRenderingServer) FogVolumeSetMaterial(fog_volume RID, material RID) {
	self.ptr.API.RenderingServer_fog_volume_set_material(self, fog_volume, material)
}
func (self classRenderingServer) VisibilityNotifierCreate() RID {
	return self.ptr.API.RenderingServer_visibility_notifier_create(self)
}
func (self classRenderingServer) VisibilityNotifierSetAabb(notifier RID, aabb AABB) {
	self.ptr.API.RenderingServer_visibility_notifier_set_aabb(self, notifier, aabb)
}
func (self classRenderingServer) VisibilityNotifierSetCallbacks(notifier RID, enter_callable Callable, exit_callable Callable) {
	self.ptr.API.RenderingServer_visibility_notifier_set_callbacks(self, notifier, enter_callable, exit_callable)
}
func (self classRenderingServer) OccluderCreate() RID {
	return self.ptr.API.RenderingServer_occluder_create(self)
}
func (self classRenderingServer) OccluderSetMesh(occluder RID, vertices PackedVector3Array, indices PackedInt32Array) {
	self.ptr.API.RenderingServer_occluder_set_mesh(self, occluder, vertices, indices)
}
func (self classRenderingServer) CameraCreate() RID {
	return self.ptr.API.RenderingServer_camera_create(self)
}
func (self classRenderingServer) CameraSetPerspective(camera RID, fovy_degrees Float, z_near Float, z_far Float) {
	self.ptr.API.RenderingServer_camera_set_perspective(self, camera, fovy_degrees, z_near, z_far)
}
func (self classRenderingServer) CameraSetOrthogonal(camera RID, size Float, z_near Float, z_far Float) {
	self.ptr.API.RenderingServer_camera_set_orthogonal(self, camera, size, z_near, z_far)
}
func (self classRenderingServer) CameraSetFrustum(camera RID, size Float, offset Vector2, z_near Float, z_far Float) {
	self.ptr.API.RenderingServer_camera_set_frustum(self, camera, size, offset, z_near, z_far)
}
func (self classRenderingServer) CameraSetTransform(camera RID, transform Transform3D) {
	self.ptr.API.RenderingServer_camera_set_transform(self, camera, transform)
}
func (self classRenderingServer) CameraSetCullMask(camera RID, layers Int) {
	self.ptr.API.RenderingServer_camera_set_cull_mask(self, camera, layers)
}
func (self classRenderingServer) CameraSetEnvironment(camera RID, env RID) {
	self.ptr.API.RenderingServer_camera_set_environment(self, camera, env)
}
func (self classRenderingServer) CameraSetCameraAttributes(camera RID, effects RID) {
	self.ptr.API.RenderingServer_camera_set_camera_attributes(self, camera, effects)
}
func (self classRenderingServer) CameraSetUseVerticalAspect(camera RID, enable bool) {
	self.ptr.API.RenderingServer_camera_set_use_vertical_aspect(self, camera, enable)
}
func (self classRenderingServer) ViewportCreate() RID {
	return self.ptr.API.RenderingServer_viewport_create(self)
}
func (self classRenderingServer) ViewportSetUseXr(viewport RID, use_xr bool) {
	self.ptr.API.RenderingServer_viewport_set_use_xr(self, viewport, use_xr)
}
func (self classRenderingServer) ViewportSetSize(viewport RID, width Int, height Int) {
	self.ptr.API.RenderingServer_viewport_set_size(self, viewport, width, height)
}
func (self classRenderingServer) ViewportSetActive(viewport RID, active bool) {
	self.ptr.API.RenderingServer_viewport_set_active(self, viewport, active)
}
func (self classRenderingServer) ViewportSetParentViewport(viewport RID, parent_viewport RID) {
	self.ptr.API.RenderingServer_viewport_set_parent_viewport(self, viewport, parent_viewport)
}
func (self classRenderingServer) ViewportAttachToScreen(viewport RID, rect Rect2, screen Int) {
	self.ptr.API.RenderingServer_viewport_attach_to_screen(self, viewport, rect, screen)
}
func (self classRenderingServer) ViewportSetRenderDirectToScreen(viewport RID, enabled bool) {
	self.ptr.API.RenderingServer_viewport_set_render_direct_to_screen(self, viewport, enabled)
}
func (self classRenderingServer) ViewportSetCanvasCullMask(viewport RID, canvas_cull_mask Int) {
	self.ptr.API.RenderingServer_viewport_set_canvas_cull_mask(self, viewport, canvas_cull_mask)
}
func (self classRenderingServer) ViewportSetScaling3dMode(viewport RID, scaling_3d_mode RenderingServerViewportScaling3DMode) {
	self.ptr.API.RenderingServer_viewport_set_scaling_3d_mode(self, viewport, scaling_3d_mode)
}
func (self classRenderingServer) ViewportSetScaling3dScale(viewport RID, scale Float) {
	self.ptr.API.RenderingServer_viewport_set_scaling_3d_scale(self, viewport, scale)
}
func (self classRenderingServer) ViewportSetFsrSharpness(viewport RID, sharpness Float) {
	self.ptr.API.RenderingServer_viewport_set_fsr_sharpness(self, viewport, sharpness)
}
func (self classRenderingServer) ViewportSetTextureMipmapBias(viewport RID, mipmap_bias Float) {
	self.ptr.API.RenderingServer_viewport_set_texture_mipmap_bias(self, viewport, mipmap_bias)
}
func (self classRenderingServer) ViewportSetUpdateMode(viewport RID, update_mode RenderingServerViewportUpdateMode) {
	self.ptr.API.RenderingServer_viewport_set_update_mode(self, viewport, update_mode)
}
func (self classRenderingServer) ViewportSetClearMode(viewport RID, clear_mode RenderingServerViewportClearMode) {
	self.ptr.API.RenderingServer_viewport_set_clear_mode(self, viewport, clear_mode)
}
func (self classRenderingServer) ViewportGetRenderTarget(viewport RID) RID {
	return self.ptr.API.RenderingServer_viewport_get_render_target(self, viewport)
}
func (self classRenderingServer) ViewportGetTexture(viewport RID) RID {
	return self.ptr.API.RenderingServer_viewport_get_texture(self, viewport)
}
func (self classRenderingServer) ViewportSetDisable3d(viewport RID, disable bool) {
	self.ptr.API.RenderingServer_viewport_set_disable_3d(self, viewport, disable)
}
func (self classRenderingServer) ViewportSetDisable2d(viewport RID, disable bool) {
	self.ptr.API.RenderingServer_viewport_set_disable_2d(self, viewport, disable)
}
func (self classRenderingServer) ViewportSetEnvironmentMode(viewport RID, mode RenderingServerViewportEnvironmentMode) {
	self.ptr.API.RenderingServer_viewport_set_environment_mode(self, viewport, mode)
}
func (self classRenderingServer) ViewportAttachCamera(viewport RID, camera RID) {
	self.ptr.API.RenderingServer_viewport_attach_camera(self, viewport, camera)
}
func (self classRenderingServer) ViewportSetScenario(viewport RID, scenario RID) {
	self.ptr.API.RenderingServer_viewport_set_scenario(self, viewport, scenario)
}
func (self classRenderingServer) ViewportAttachCanvas(viewport RID, canvas RID) {
	self.ptr.API.RenderingServer_viewport_attach_canvas(self, viewport, canvas)
}
func (self classRenderingServer) ViewportRemoveCanvas(viewport RID, canvas RID) {
	self.ptr.API.RenderingServer_viewport_remove_canvas(self, viewport, canvas)
}
func (self classRenderingServer) ViewportSetSnap2dTransformsToPixel(viewport RID, enabled bool) {
	self.ptr.API.RenderingServer_viewport_set_snap_2d_transforms_to_pixel(self, viewport, enabled)
}
func (self classRenderingServer) ViewportSetSnap2dVerticesToPixel(viewport RID, enabled bool) {
	self.ptr.API.RenderingServer_viewport_set_snap_2d_vertices_to_pixel(self, viewport, enabled)
}
func (self classRenderingServer) ViewportSetDefaultCanvasItemTextureFilter(viewport RID, filter RenderingServerCanvasItemTextureFilter) {
	self.ptr.API.RenderingServer_viewport_set_default_canvas_item_texture_filter(self, viewport, filter)
}
func (self classRenderingServer) ViewportSetDefaultCanvasItemTextureRepeat(viewport RID, repeat RenderingServerCanvasItemTextureRepeat) {
	self.ptr.API.RenderingServer_viewport_set_default_canvas_item_texture_repeat(self, viewport, repeat)
}
func (self classRenderingServer) ViewportSetCanvasTransform(viewport RID, canvas RID, offset Transform2D) {
	self.ptr.API.RenderingServer_viewport_set_canvas_transform(self, viewport, canvas, offset)
}
func (self classRenderingServer) ViewportSetCanvasStacking(viewport RID, canvas RID, layer Int, sublayer Int) {
	self.ptr.API.RenderingServer_viewport_set_canvas_stacking(self, viewport, canvas, layer, sublayer)
}
func (self classRenderingServer) ViewportSetTransparentBackground(viewport RID, enabled bool) {
	self.ptr.API.RenderingServer_viewport_set_transparent_background(self, viewport, enabled)
}
func (self classRenderingServer) ViewportSetGlobalCanvasTransform(viewport RID, transform Transform2D) {
	self.ptr.API.RenderingServer_viewport_set_global_canvas_transform(self, viewport, transform)
}
func (self classRenderingServer) ViewportSetSdfOversizeAndScale(viewport RID, oversize RenderingServerViewportSDFOversize, scale RenderingServerViewportSDFScale) {
	self.ptr.API.RenderingServer_viewport_set_sdf_oversize_and_scale(self, viewport, oversize, scale)
}
func (self classRenderingServer) ViewportSetPositionalShadowAtlasSize(viewport RID, size Int, use_16_bits bool) {
	self.ptr.API.RenderingServer_viewport_set_positional_shadow_atlas_size(self, viewport, size, use_16_bits)
}
func (self classRenderingServer) ViewportSetPositionalShadowAtlasQuadrantSubdivision(viewport RID, quadrant Int, subdivision Int) {
	self.ptr.API.RenderingServer_viewport_set_positional_shadow_atlas_quadrant_subdivision(self, viewport, quadrant, subdivision)
}
func (self classRenderingServer) ViewportSetMsaa3d(viewport RID, msaa RenderingServerViewportMSAA) {
	self.ptr.API.RenderingServer_viewport_set_msaa_3d(self, viewport, msaa)
}
func (self classRenderingServer) ViewportSetMsaa2d(viewport RID, msaa RenderingServerViewportMSAA) {
	self.ptr.API.RenderingServer_viewport_set_msaa_2d(self, viewport, msaa)
}
func (self classRenderingServer) ViewportSetUseHdr2d(viewport RID, enabled bool) {
	self.ptr.API.RenderingServer_viewport_set_use_hdr_2d(self, viewport, enabled)
}
func (self classRenderingServer) ViewportSetScreenSpaceAa(viewport RID, mode RenderingServerViewportScreenSpaceAA) {
	self.ptr.API.RenderingServer_viewport_set_screen_space_aa(self, viewport, mode)
}
func (self classRenderingServer) ViewportSetUseTaa(viewport RID, enable bool) {
	self.ptr.API.RenderingServer_viewport_set_use_taa(self, viewport, enable)
}
func (self classRenderingServer) ViewportSetUseDebanding(viewport RID, enable bool) {
	self.ptr.API.RenderingServer_viewport_set_use_debanding(self, viewport, enable)
}
func (self classRenderingServer) ViewportSetUseOcclusionCulling(viewport RID, enable bool) {
	self.ptr.API.RenderingServer_viewport_set_use_occlusion_culling(self, viewport, enable)
}
func (self classRenderingServer) ViewportSetOcclusionRaysPerThread(rays_per_thread Int) {
	self.ptr.API.RenderingServer_viewport_set_occlusion_rays_per_thread(self, rays_per_thread)
}
func (self classRenderingServer) ViewportSetOcclusionCullingBuildQuality(quality RenderingServerViewportOcclusionCullingBuildQuality) {
	self.ptr.API.RenderingServer_viewport_set_occlusion_culling_build_quality(self, quality)
}
func (self classRenderingServer) ViewportGetRenderInfo(viewport RID, atype RenderingServerViewportRenderInfoType, info RenderingServerViewportRenderInfo) Int {
	return self.ptr.API.RenderingServer_viewport_get_render_info(self, viewport, atype, info)
}
func (self classRenderingServer) ViewportSetDebugDraw(viewport RID, draw RenderingServerViewportDebugDraw) {
	self.ptr.API.RenderingServer_viewport_set_debug_draw(self, viewport, draw)
}
func (self classRenderingServer) ViewportSetMeasureRenderTime(viewport RID, enable bool) {
	self.ptr.API.RenderingServer_viewport_set_measure_render_time(self, viewport, enable)
}
func (self classRenderingServer) ViewportGetMeasuredRenderTimeCpu(viewport RID) Float {
	return self.ptr.API.RenderingServer_viewport_get_measured_render_time_cpu(self, viewport)
}
func (self classRenderingServer) ViewportGetMeasuredRenderTimeGpu(viewport RID) Float {
	return self.ptr.API.RenderingServer_viewport_get_measured_render_time_gpu(self, viewport)
}
func (self classRenderingServer) ViewportSetVrsMode(viewport RID, mode RenderingServerViewportVRSMode) {
	self.ptr.API.RenderingServer_viewport_set_vrs_mode(self, viewport, mode)
}
func (self classRenderingServer) ViewportSetVrsTexture(viewport RID, texture RID) {
	self.ptr.API.RenderingServer_viewport_set_vrs_texture(self, viewport, texture)
}
func (self classRenderingServer) SkyCreate() RID {
	return self.ptr.API.RenderingServer_sky_create(self)
}
func (self classRenderingServer) SkySetRadianceSize(sky RID, radiance_size Int) {
	self.ptr.API.RenderingServer_sky_set_radiance_size(self, sky, radiance_size)
}
func (self classRenderingServer) SkySetMode(sky RID, mode RenderingServerSkyMode) {
	self.ptr.API.RenderingServer_sky_set_mode(self, sky, mode)
}
func (self classRenderingServer) SkySetMaterial(sky RID, material RID) {
	self.ptr.API.RenderingServer_sky_set_material(self, sky, material)
}
func (self classRenderingServer) SkyBakePanorama(sky RID, energy Float, bake_irradiance bool, size Vector2i) Image {
	return self.ptr.API.RenderingServer_sky_bake_panorama(self, sky, energy, bake_irradiance, size)
}
func (self classRenderingServer) EnvironmentCreate() RID {
	return self.ptr.API.RenderingServer_environment_create(self)
}
func (self classRenderingServer) EnvironmentSetBackground(env RID, bg RenderingServerEnvironmentBG) {
	self.ptr.API.RenderingServer_environment_set_background(self, env, bg)
}
func (self classRenderingServer) EnvironmentSetSky(env RID, sky RID) {
	self.ptr.API.RenderingServer_environment_set_sky(self, env, sky)
}
func (self classRenderingServer) EnvironmentSetSkyCustomFov(env RID, scale Float) {
	self.ptr.API.RenderingServer_environment_set_sky_custom_fov(self, env, scale)
}
func (self classRenderingServer) EnvironmentSetSkyOrientation(env RID, orientation Basis) {
	self.ptr.API.RenderingServer_environment_set_sky_orientation(self, env, orientation)
}
func (self classRenderingServer) EnvironmentSetBgColor(env RID, color Color) {
	self.ptr.API.RenderingServer_environment_set_bg_color(self, env, color)
}
func (self classRenderingServer) EnvironmentSetBgEnergy(env RID, multiplier Float, exposure_value Float) {
	self.ptr.API.RenderingServer_environment_set_bg_energy(self, env, multiplier, exposure_value)
}
func (self classRenderingServer) EnvironmentSetCanvasMaxLayer(env RID, max_layer Int) {
	self.ptr.API.RenderingServer_environment_set_canvas_max_layer(self, env, max_layer)
}
func (self classRenderingServer) EnvironmentSetAmbientLight(env RID, color Color, ambient RenderingServerEnvironmentAmbientSource, energy Float, sky_contibution Float, reflection_source RenderingServerEnvironmentReflectionSource) {
	self.ptr.API.RenderingServer_environment_set_ambient_light(self, env, color, ambient, energy, sky_contibution, reflection_source)
}
func (self classRenderingServer) EnvironmentSetGlow(env RID, enable bool, levels PackedFloat32Array, intensity Float, strength Float, mix Float, bloom_threshold Float, blend_mode RenderingServerEnvironmentGlowBlendMode, hdr_bleed_threshold Float, hdr_bleed_scale Float, hdr_luminance_cap Float, glow_map_strength Float, glow_map RID) {
	self.ptr.API.RenderingServer_environment_set_glow(self, env, enable, levels, intensity, strength, mix, bloom_threshold, blend_mode, hdr_bleed_threshold, hdr_bleed_scale, hdr_luminance_cap, glow_map_strength, glow_map)
}
func (self classRenderingServer) EnvironmentSetTonemap(env RID, tone_mapper RenderingServerEnvironmentToneMapper, exposure Float, white Float) {
	self.ptr.API.RenderingServer_environment_set_tonemap(self, env, tone_mapper, exposure, white)
}
func (self classRenderingServer) EnvironmentSetAdjustment(env RID, enable bool, brightness Float, contrast Float, saturation Float, use_1d_color_correction bool, color_correction RID) {
	self.ptr.API.RenderingServer_environment_set_adjustment(self, env, enable, brightness, contrast, saturation, use_1d_color_correction, color_correction)
}
func (self classRenderingServer) EnvironmentSetSsr(env RID, enable bool, max_steps Int, fade_in Float, fade_out Float, depth_tolerance Float) {
	self.ptr.API.RenderingServer_environment_set_ssr(self, env, enable, max_steps, fade_in, fade_out, depth_tolerance)
}
func (self classRenderingServer) EnvironmentSetSsao(env RID, enable bool, radius Float, intensity Float, power Float, detail Float, horizon Float, sharpness Float, light_affect Float, ao_channel_affect Float) {
	self.ptr.API.RenderingServer_environment_set_ssao(self, env, enable, radius, intensity, power, detail, horizon, sharpness, light_affect, ao_channel_affect)
}
func (self classRenderingServer) EnvironmentSetFog(env RID, enable bool, light_color Color, light_energy Float, sun_scatter Float, density Float, height Float, height_density Float, aerial_perspective Float, sky_affect Float) {
	self.ptr.API.RenderingServer_environment_set_fog(self, env, enable, light_color, light_energy, sun_scatter, density, height, height_density, aerial_perspective, sky_affect)
}
func (self classRenderingServer) EnvironmentSetSdfgi(env RID, enable bool, cascades Int, min_cell_size Float, y_scale RenderingServerEnvironmentSDFGIYScale, use_occlusion bool, bounce_feedback Float, read_sky bool, energy Float, normal_bias Float, probe_bias Float) {
	self.ptr.API.RenderingServer_environment_set_sdfgi(self, env, enable, cascades, min_cell_size, y_scale, use_occlusion, bounce_feedback, read_sky, energy, normal_bias, probe_bias)
}
func (self classRenderingServer) EnvironmentSetVolumetricFog(env RID, enable bool, density Float, albedo Color, emission Color, emission_energy Float, anisotropy Float, length Float, p_detail_spread Float, gi_inject Float, temporal_reprojection bool, temporal_reprojection_amount Float, ambient_inject Float, sky_affect Float) {
	self.ptr.API.RenderingServer_environment_set_volumetric_fog(self, env, enable, density, albedo, emission, emission_energy, anisotropy, length, p_detail_spread, gi_inject, temporal_reprojection, temporal_reprojection_amount, ambient_inject, sky_affect)
}
func (self classRenderingServer) EnvironmentGlowSetUseBicubicUpscale(enable bool) {
	self.ptr.API.RenderingServer_environment_glow_set_use_bicubic_upscale(self, enable)
}
func (self classRenderingServer) EnvironmentSetSsrRoughnessQuality(quality RenderingServerEnvironmentSSRRoughnessQuality) {
	self.ptr.API.RenderingServer_environment_set_ssr_roughness_quality(self, quality)
}
func (self classRenderingServer) EnvironmentSetSsaoQuality(quality RenderingServerEnvironmentSSAOQuality, half_size bool, adaptive_target Float, blur_passes Int, fadeout_from Float, fadeout_to Float) {
	self.ptr.API.RenderingServer_environment_set_ssao_quality(self, quality, half_size, adaptive_target, blur_passes, fadeout_from, fadeout_to)
}
func (self classRenderingServer) EnvironmentSetSsilQuality(quality RenderingServerEnvironmentSSILQuality, half_size bool, adaptive_target Float, blur_passes Int, fadeout_from Float, fadeout_to Float) {
	self.ptr.API.RenderingServer_environment_set_ssil_quality(self, quality, half_size, adaptive_target, blur_passes, fadeout_from, fadeout_to)
}
func (self classRenderingServer) EnvironmentSetSdfgiRayCount(ray_count RenderingServerEnvironmentSDFGIRayCount) {
	self.ptr.API.RenderingServer_environment_set_sdfgi_ray_count(self, ray_count)
}
func (self classRenderingServer) EnvironmentSetSdfgiFramesToConverge(frames RenderingServerEnvironmentSDFGIFramesToConverge) {
	self.ptr.API.RenderingServer_environment_set_sdfgi_frames_to_converge(self, frames)
}
func (self classRenderingServer) EnvironmentSetSdfgiFramesToUpdateLight(frames RenderingServerEnvironmentSDFGIFramesToUpdateLight) {
	self.ptr.API.RenderingServer_environment_set_sdfgi_frames_to_update_light(self, frames)
}
func (self classRenderingServer) EnvironmentSetVolumetricFogVolumeSize(size Int, depth Int) {
	self.ptr.API.RenderingServer_environment_set_volumetric_fog_volume_size(self, size, depth)
}
func (self classRenderingServer) EnvironmentSetVolumetricFogFilterActive(active bool) {
	self.ptr.API.RenderingServer_environment_set_volumetric_fog_filter_active(self, active)
}
func (self classRenderingServer) EnvironmentBakePanorama(environment RID, bake_irradiance bool, size Vector2i) Image {
	return self.ptr.API.RenderingServer_environment_bake_panorama(self, environment, bake_irradiance, size)
}
func (self classRenderingServer) ScreenSpaceRoughnessLimiterSetActive(enable bool, amount Float, limit Float) {
	self.ptr.API.RenderingServer_screen_space_roughness_limiter_set_active(self, enable, amount, limit)
}
func (self classRenderingServer) SubSurfaceScatteringSetQuality(quality RenderingServerSubSurfaceScatteringQuality) {
	self.ptr.API.RenderingServer_sub_surface_scattering_set_quality(self, quality)
}
func (self classRenderingServer) SubSurfaceScatteringSetScale(scale Float, depth_scale Float) {
	self.ptr.API.RenderingServer_sub_surface_scattering_set_scale(self, scale, depth_scale)
}
func (self classRenderingServer) CameraAttributesCreate() RID {
	return self.ptr.API.RenderingServer_camera_attributes_create(self)
}
func (self classRenderingServer) CameraAttributesSetDofBlurQuality(quality RenderingServerDOFBlurQuality, use_jitter bool) {
	self.ptr.API.RenderingServer_camera_attributes_set_dof_blur_quality(self, quality, use_jitter)
}
func (self classRenderingServer) CameraAttributesSetDofBlurBokehShape(shape RenderingServerDOFBokehShape) {
	self.ptr.API.RenderingServer_camera_attributes_set_dof_blur_bokeh_shape(self, shape)
}
func (self classRenderingServer) CameraAttributesSetDofBlur(camera_attributes RID, far_enable bool, far_distance Float, far_transition Float, near_enable bool, near_distance Float, near_transition Float, amount Float) {
	self.ptr.API.RenderingServer_camera_attributes_set_dof_blur(self, camera_attributes, far_enable, far_distance, far_transition, near_enable, near_distance, near_transition, amount)
}
func (self classRenderingServer) CameraAttributesSetExposure(camera_attributes RID, multiplier Float, normalization Float) {
	self.ptr.API.RenderingServer_camera_attributes_set_exposure(self, camera_attributes, multiplier, normalization)
}
func (self classRenderingServer) CameraAttributesSetAutoExposure(camera_attributes RID, enable bool, min_sensitivity Float, max_sensitivity Float, speed Float, scale Float) {
	self.ptr.API.RenderingServer_camera_attributes_set_auto_exposure(self, camera_attributes, enable, min_sensitivity, max_sensitivity, speed, scale)
}
func (self classRenderingServer) ScenarioCreate() RID {
	return self.ptr.API.RenderingServer_scenario_create(self)
}
func (self classRenderingServer) ScenarioSetEnvironment(scenario RID, environment RID) {
	self.ptr.API.RenderingServer_scenario_set_environment(self, scenario, environment)
}
func (self classRenderingServer) ScenarioSetFallbackEnvironment(scenario RID, environment RID) {
	self.ptr.API.RenderingServer_scenario_set_fallback_environment(self, scenario, environment)
}
func (self classRenderingServer) ScenarioSetCameraAttributes(scenario RID, effects RID) {
	self.ptr.API.RenderingServer_scenario_set_camera_attributes(self, scenario, effects)
}
func (self classRenderingServer) InstanceCreate2(base RID, scenario RID) RID {
	return self.ptr.API.RenderingServer_instance_create2(self, base, scenario)
}
func (self classRenderingServer) InstanceCreate() RID {
	return self.ptr.API.RenderingServer_instance_create(self)
}
func (self classRenderingServer) InstanceSetBase(instance RID, base RID) {
	self.ptr.API.RenderingServer_instance_set_base(self, instance, base)
}
func (self classRenderingServer) InstanceSetScenario(instance RID, scenario RID) {
	self.ptr.API.RenderingServer_instance_set_scenario(self, instance, scenario)
}
func (self classRenderingServer) InstanceSetLayerMask(instance RID, mask Int) {
	self.ptr.API.RenderingServer_instance_set_layer_mask(self, instance, mask)
}
func (self classRenderingServer) InstanceSetPivotData(instance RID, sorting_offset Float, use_aabb_center bool) {
	self.ptr.API.RenderingServer_instance_set_pivot_data(self, instance, sorting_offset, use_aabb_center)
}
func (self classRenderingServer) InstanceSetTransform(instance RID, transform Transform3D) {
	self.ptr.API.RenderingServer_instance_set_transform(self, instance, transform)
}
func (self classRenderingServer) InstanceAttachObjectInstanceId(instance RID, id Int) {
	self.ptr.API.RenderingServer_instance_attach_object_instance_id(self, instance, id)
}
func (self classRenderingServer) InstanceSetBlendShapeWeight(instance RID, shape Int, weight Float) {
	self.ptr.API.RenderingServer_instance_set_blend_shape_weight(self, instance, shape, weight)
}
func (self classRenderingServer) InstanceSetSurfaceOverrideMaterial(instance RID, surface Int, material RID) {
	self.ptr.API.RenderingServer_instance_set_surface_override_material(self, instance, surface, material)
}
func (self classRenderingServer) InstanceSetVisible(instance RID, visible bool) {
	self.ptr.API.RenderingServer_instance_set_visible(self, instance, visible)
}
func (self classRenderingServer) InstanceGeometrySetTransparency(instance RID, transparency Float) {
	self.ptr.API.RenderingServer_instance_geometry_set_transparency(self, instance, transparency)
}
func (self classRenderingServer) InstanceSetCustomAabb(instance RID, aabb AABB) {
	self.ptr.API.RenderingServer_instance_set_custom_aabb(self, instance, aabb)
}
func (self classRenderingServer) InstanceAttachSkeleton(instance RID, skeleton RID) {
	self.ptr.API.RenderingServer_instance_attach_skeleton(self, instance, skeleton)
}
func (self classRenderingServer) InstanceSetExtraVisibilityMargin(instance RID, margin Float) {
	self.ptr.API.RenderingServer_instance_set_extra_visibility_margin(self, instance, margin)
}
func (self classRenderingServer) InstanceSetVisibilityParent(instance RID, parent RID) {
	self.ptr.API.RenderingServer_instance_set_visibility_parent(self, instance, parent)
}
func (self classRenderingServer) InstanceSetIgnoreCulling(instance RID, enabled bool) {
	self.ptr.API.RenderingServer_instance_set_ignore_culling(self, instance, enabled)
}
func (self classRenderingServer) InstanceGeometrySetFlag(instance RID, flag RenderingServerInstanceFlags, enabled bool) {
	self.ptr.API.RenderingServer_instance_geometry_set_flag(self, instance, flag, enabled)
}
func (self classRenderingServer) InstanceGeometrySetCastShadowsSetting(instance RID, shadow_casting_setting RenderingServerShadowCastingSetting) {
	self.ptr.API.RenderingServer_instance_geometry_set_cast_shadows_setting(self, instance, shadow_casting_setting)
}
func (self classRenderingServer) InstanceGeometrySetMaterialOverride(instance RID, material RID) {
	self.ptr.API.RenderingServer_instance_geometry_set_material_override(self, instance, material)
}
func (self classRenderingServer) InstanceGeometrySetMaterialOverlay(instance RID, material RID) {
	self.ptr.API.RenderingServer_instance_geometry_set_material_overlay(self, instance, material)
}
func (self classRenderingServer) InstanceGeometrySetVisibilityRange(instance RID, min Float, max Float, min_margin Float, max_margin Float, fade_mode RenderingServerVisibilityRangeFadeMode) {
	self.ptr.API.RenderingServer_instance_geometry_set_visibility_range(self, instance, min, max, min_margin, max_margin, fade_mode)
}
func (self classRenderingServer) InstanceGeometrySetLightmap(instance RID, lightmap RID, lightmap_uv_scale Rect2, lightmap_slice Int) {
	self.ptr.API.RenderingServer_instance_geometry_set_lightmap(self, instance, lightmap, lightmap_uv_scale, lightmap_slice)
}
func (self classRenderingServer) InstanceGeometrySetLodBias(instance RID, lod_bias Float) {
	self.ptr.API.RenderingServer_instance_geometry_set_lod_bias(self, instance, lod_bias)
}
func (self classRenderingServer) InstanceGeometrySetShaderParameter(instance RID, parameter StringName, value Variant) {
	self.ptr.API.RenderingServer_instance_geometry_set_shader_parameter(self, instance, parameter, value)
}
func (self classRenderingServer) InstanceGeometryGetShaderParameter(instance RID, parameter StringName) Variant {
	return self.ptr.API.RenderingServer_instance_geometry_get_shader_parameter(self, instance, parameter)
}
func (self classRenderingServer) InstanceGeometryGetShaderParameterDefaultValue(instance RID, parameter StringName) Variant {
	return self.ptr.API.RenderingServer_instance_geometry_get_shader_parameter_default_value(self, instance, parameter)
}
func (self classRenderingServer) InstanceGeometryGetShaderParameterList(instance RID) ArrayOf[Dictionary] {
	return self.ptr.API.RenderingServer_instance_geometry_get_shader_parameter_list(self, instance)
}
func (self classRenderingServer) InstancesCullAabb(aabb AABB, scenario RID) PackedInt64Array {
	return self.ptr.API.RenderingServer_instances_cull_aabb(self, aabb, scenario)
}
func (self classRenderingServer) InstancesCullRay(from Vector3, to Vector3, scenario RID) PackedInt64Array {
	return self.ptr.API.RenderingServer_instances_cull_ray(self, from, to, scenario)
}
func (self classRenderingServer) InstancesCullConvex(convex ArrayOf[Plane], scenario RID) PackedInt64Array {
	return self.ptr.API.RenderingServer_instances_cull_convex(self, convex, scenario)
}
func (self classRenderingServer) BakeRenderUv2(base RID, material_overrides ArrayOf[RID], image_size Vector2i) ArrayOf[Image] {
	return self.ptr.API.RenderingServer_bake_render_uv2(self, base, material_overrides, image_size)
}
func (self classRenderingServer) CanvasCreate() RID {
	return self.ptr.API.RenderingServer_canvas_create(self)
}
func (self classRenderingServer) CanvasSetItemMirroring(canvas RID, item RID, mirroring Vector2) {
	self.ptr.API.RenderingServer_canvas_set_item_mirroring(self, canvas, item, mirroring)
}
func (self classRenderingServer) CanvasSetModulate(canvas RID, color Color) {
	self.ptr.API.RenderingServer_canvas_set_modulate(self, canvas, color)
}
func (self classRenderingServer) CanvasSetDisableScale(disable bool) {
	self.ptr.API.RenderingServer_canvas_set_disable_scale(self, disable)
}
func (self classRenderingServer) CanvasTextureCreate() RID {
	return self.ptr.API.RenderingServer_canvas_texture_create(self)
}
func (self classRenderingServer) CanvasTextureSetChannel(canvas_texture RID, channel RenderingServerCanvasTextureChannel, texture RID) {
	self.ptr.API.RenderingServer_canvas_texture_set_channel(self, canvas_texture, channel, texture)
}
func (self classRenderingServer) CanvasTextureSetShadingParameters(canvas_texture RID, base_color Color, shininess Float) {
	self.ptr.API.RenderingServer_canvas_texture_set_shading_parameters(self, canvas_texture, base_color, shininess)
}
func (self classRenderingServer) CanvasTextureSetTextureFilter(canvas_texture RID, filter RenderingServerCanvasItemTextureFilter) {
	self.ptr.API.RenderingServer_canvas_texture_set_texture_filter(self, canvas_texture, filter)
}
func (self classRenderingServer) CanvasTextureSetTextureRepeat(canvas_texture RID, repeat RenderingServerCanvasItemTextureRepeat) {
	self.ptr.API.RenderingServer_canvas_texture_set_texture_repeat(self, canvas_texture, repeat)
}
func (self classRenderingServer) CanvasItemCreate() RID {
	return self.ptr.API.RenderingServer_canvas_item_create(self)
}
func (self classRenderingServer) CanvasItemSetParent(item RID, parent RID) {
	self.ptr.API.RenderingServer_canvas_item_set_parent(self, item, parent)
}
func (self classRenderingServer) CanvasItemSetDefaultTextureFilter(item RID, filter RenderingServerCanvasItemTextureFilter) {
	self.ptr.API.RenderingServer_canvas_item_set_default_texture_filter(self, item, filter)
}
func (self classRenderingServer) CanvasItemSetDefaultTextureRepeat(item RID, repeat RenderingServerCanvasItemTextureRepeat) {
	self.ptr.API.RenderingServer_canvas_item_set_default_texture_repeat(self, item, repeat)
}
func (self classRenderingServer) CanvasItemSetVisible(item RID, visible bool) {
	self.ptr.API.RenderingServer_canvas_item_set_visible(self, item, visible)
}
func (self classRenderingServer) CanvasItemSetLightMask(item RID, mask Int) {
	self.ptr.API.RenderingServer_canvas_item_set_light_mask(self, item, mask)
}
func (self classRenderingServer) CanvasItemSetVisibilityLayer(item RID, visibility_layer Int) {
	self.ptr.API.RenderingServer_canvas_item_set_visibility_layer(self, item, visibility_layer)
}
func (self classRenderingServer) CanvasItemSetTransform(item RID, transform Transform2D) {
	self.ptr.API.RenderingServer_canvas_item_set_transform(self, item, transform)
}
func (self classRenderingServer) CanvasItemSetClip(item RID, clip bool) {
	self.ptr.API.RenderingServer_canvas_item_set_clip(self, item, clip)
}
func (self classRenderingServer) CanvasItemSetDistanceFieldMode(item RID, enabled bool) {
	self.ptr.API.RenderingServer_canvas_item_set_distance_field_mode(self, item, enabled)
}
func (self classRenderingServer) CanvasItemSetCustomRect(item RID, use_custom_rect bool, rect Rect2) {
	self.ptr.API.RenderingServer_canvas_item_set_custom_rect(self, item, use_custom_rect, rect)
}
func (self classRenderingServer) CanvasItemSetModulate(item RID, color Color) {
	self.ptr.API.RenderingServer_canvas_item_set_modulate(self, item, color)
}
func (self classRenderingServer) CanvasItemSetSelfModulate(item RID, color Color) {
	self.ptr.API.RenderingServer_canvas_item_set_self_modulate(self, item, color)
}
func (self classRenderingServer) CanvasItemSetDrawBehindParent(item RID, enabled bool) {
	self.ptr.API.RenderingServer_canvas_item_set_draw_behind_parent(self, item, enabled)
}
func (self classRenderingServer) CanvasItemAddLine(item RID, from Vector2, to Vector2, color Color, width Float, antialiased bool) {
	self.ptr.API.RenderingServer_canvas_item_add_line(self, item, from, to, color, width, antialiased)
}
func (self classRenderingServer) CanvasItemAddPolyline(item RID, points PackedVector2Array, colors PackedColorArray, width Float, antialiased bool) {
	self.ptr.API.RenderingServer_canvas_item_add_polyline(self, item, points, colors, width, antialiased)
}
func (self classRenderingServer) CanvasItemAddMultiline(item RID, points PackedVector2Array, colors PackedColorArray, width Float) {
	self.ptr.API.RenderingServer_canvas_item_add_multiline(self, item, points, colors, width)
}
func (self classRenderingServer) CanvasItemAddRect(item RID, rect Rect2, color Color) {
	self.ptr.API.RenderingServer_canvas_item_add_rect(self, item, rect, color)
}
func (self classRenderingServer) CanvasItemAddCircle(item RID, pos Vector2, radius Float, color Color) {
	self.ptr.API.RenderingServer_canvas_item_add_circle(self, item, pos, radius, color)
}
func (self classRenderingServer) CanvasItemAddTextureRect(item RID, rect Rect2, texture RID, tile bool, modulate Color, transpose bool) {
	self.ptr.API.RenderingServer_canvas_item_add_texture_rect(self, item, rect, texture, tile, modulate, transpose)
}
func (self classRenderingServer) CanvasItemAddMsdfTextureRectRegion(item RID, rect Rect2, texture RID, src_rect Rect2, modulate Color, outline_size Int, px_range Float, scale Float) {
	self.ptr.API.RenderingServer_canvas_item_add_msdf_texture_rect_region(self, item, rect, texture, src_rect, modulate, outline_size, px_range, scale)
}
func (self classRenderingServer) CanvasItemAddLcdTextureRectRegion(item RID, rect Rect2, texture RID, src_rect Rect2, modulate Color) {
	self.ptr.API.RenderingServer_canvas_item_add_lcd_texture_rect_region(self, item, rect, texture, src_rect, modulate)
}
func (self classRenderingServer) CanvasItemAddTextureRectRegion(item RID, rect Rect2, texture RID, src_rect Rect2, modulate Color, transpose bool, clip_uv bool) {
	self.ptr.API.RenderingServer_canvas_item_add_texture_rect_region(self, item, rect, texture, src_rect, modulate, transpose, clip_uv)
}
func (self classRenderingServer) CanvasItemAddNinePatch(item RID, rect Rect2, source Rect2, texture RID, topleft Vector2, bottomright Vector2, x_axis_mode RenderingServerNinePatchAxisMode, y_axis_mode RenderingServerNinePatchAxisMode, draw_center bool, modulate Color) {
	self.ptr.API.RenderingServer_canvas_item_add_nine_patch(self, item, rect, source, texture, topleft, bottomright, x_axis_mode, y_axis_mode, draw_center, modulate)
}
func (self classRenderingServer) CanvasItemAddPrimitive(item RID, points PackedVector2Array, colors PackedColorArray, uvs PackedVector2Array, texture RID) {
	self.ptr.API.RenderingServer_canvas_item_add_primitive(self, item, points, colors, uvs, texture)
}
func (self classRenderingServer) CanvasItemAddPolygon(item RID, points PackedVector2Array, colors PackedColorArray, uvs PackedVector2Array, texture RID) {
	self.ptr.API.RenderingServer_canvas_item_add_polygon(self, item, points, colors, uvs, texture)
}
func (self classRenderingServer) CanvasItemAddTriangleArray(item RID, indices PackedInt32Array, points PackedVector2Array, colors PackedColorArray, uvs PackedVector2Array, bones PackedInt32Array, weights PackedFloat32Array, texture RID, count Int) {
	self.ptr.API.RenderingServer_canvas_item_add_triangle_array(self, item, indices, points, colors, uvs, bones, weights, texture, count)
}
func (self classRenderingServer) CanvasItemAddMesh(item RID, mesh RID, transform Transform2D, modulate Color, texture RID) {
	self.ptr.API.RenderingServer_canvas_item_add_mesh(self, item, mesh, transform, modulate, texture)
}
func (self classRenderingServer) CanvasItemAddMultimesh(item RID, mesh RID, texture RID) {
	self.ptr.API.RenderingServer_canvas_item_add_multimesh(self, item, mesh, texture)
}
func (self classRenderingServer) CanvasItemAddParticles(item RID, particles RID, texture RID) {
	self.ptr.API.RenderingServer_canvas_item_add_particles(self, item, particles, texture)
}
func (self classRenderingServer) CanvasItemAddSetTransform(item RID, transform Transform2D) {
	self.ptr.API.RenderingServer_canvas_item_add_set_transform(self, item, transform)
}
func (self classRenderingServer) CanvasItemAddClipIgnore(item RID, ignore bool) {
	self.ptr.API.RenderingServer_canvas_item_add_clip_ignore(self, item, ignore)
}
func (self classRenderingServer) CanvasItemAddAnimationSlice(item RID, animation_length Float, slice_begin Float, slice_end Float, offset Float) {
	self.ptr.API.RenderingServer_canvas_item_add_animation_slice(self, item, animation_length, slice_begin, slice_end, offset)
}
func (self classRenderingServer) CanvasItemSetSortChildrenByY(item RID, enabled bool) {
	self.ptr.API.RenderingServer_canvas_item_set_sort_children_by_y(self, item, enabled)
}
func (self classRenderingServer) CanvasItemSetZIndex(item RID, z_index Int) {
	self.ptr.API.RenderingServer_canvas_item_set_z_index(self, item, z_index)
}
func (self classRenderingServer) CanvasItemSetZAsRelativeToParent(item RID, enabled bool) {
	self.ptr.API.RenderingServer_canvas_item_set_z_as_relative_to_parent(self, item, enabled)
}
func (self classRenderingServer) CanvasItemSetCopyToBackbuffer(item RID, enabled bool, rect Rect2) {
	self.ptr.API.RenderingServer_canvas_item_set_copy_to_backbuffer(self, item, enabled, rect)
}
func (self classRenderingServer) CanvasItemClear(item RID) {
	self.ptr.API.RenderingServer_canvas_item_clear(self, item)
}
func (self classRenderingServer) CanvasItemSetDrawIndex(item RID, index Int) {
	self.ptr.API.RenderingServer_canvas_item_set_draw_index(self, item, index)
}
func (self classRenderingServer) CanvasItemSetMaterial(item RID, material RID) {
	self.ptr.API.RenderingServer_canvas_item_set_material(self, item, material)
}
func (self classRenderingServer) CanvasItemSetUseParentMaterial(item RID, enabled bool) {
	self.ptr.API.RenderingServer_canvas_item_set_use_parent_material(self, item, enabled)
}
func (self classRenderingServer) CanvasItemSetVisibilityNotifier(item RID, enable bool, area Rect2, enter_callable Callable, exit_callable Callable) {
	self.ptr.API.RenderingServer_canvas_item_set_visibility_notifier(self, item, enable, area, enter_callable, exit_callable)
}
func (self classRenderingServer) CanvasItemSetCanvasGroupMode(item RID, mode RenderingServerCanvasGroupMode, clear_margin Float, fit_empty bool, fit_margin Float, blur_mipmaps bool) {
	self.ptr.API.RenderingServer_canvas_item_set_canvas_group_mode(self, item, mode, clear_margin, fit_empty, fit_margin, blur_mipmaps)
}
func (self classRenderingServer) DebugCanvasItemGetRect(item RID) Rect2 {
	return self.ptr.API.RenderingServer_debug_canvas_item_get_rect(self, item)
}
func (self classRenderingServer) CanvasLightCreate() RID {
	return self.ptr.API.RenderingServer_canvas_light_create(self)
}
func (self classRenderingServer) CanvasLightAttachToCanvas(light RID, canvas RID) {
	self.ptr.API.RenderingServer_canvas_light_attach_to_canvas(self, light, canvas)
}
func (self classRenderingServer) CanvasLightSetEnabled(light RID, enabled bool) {
	self.ptr.API.RenderingServer_canvas_light_set_enabled(self, light, enabled)
}
func (self classRenderingServer) CanvasLightSetTextureScale(light RID, scale Float) {
	self.ptr.API.RenderingServer_canvas_light_set_texture_scale(self, light, scale)
}
func (self classRenderingServer) CanvasLightSetTransform(light RID, transform Transform2D) {
	self.ptr.API.RenderingServer_canvas_light_set_transform(self, light, transform)
}
func (self classRenderingServer) CanvasLightSetTexture(light RID, texture RID) {
	self.ptr.API.RenderingServer_canvas_light_set_texture(self, light, texture)
}
func (self classRenderingServer) CanvasLightSetTextureOffset(light RID, offset Vector2) {
	self.ptr.API.RenderingServer_canvas_light_set_texture_offset(self, light, offset)
}
func (self classRenderingServer) CanvasLightSetColor(light RID, color Color) {
	self.ptr.API.RenderingServer_canvas_light_set_color(self, light, color)
}
func (self classRenderingServer) CanvasLightSetHeight(light RID, height Float) {
	self.ptr.API.RenderingServer_canvas_light_set_height(self, light, height)
}
func (self classRenderingServer) CanvasLightSetEnergy(light RID, energy Float) {
	self.ptr.API.RenderingServer_canvas_light_set_energy(self, light, energy)
}
func (self classRenderingServer) CanvasLightSetZRange(light RID, min_z Int, max_z Int) {
	self.ptr.API.RenderingServer_canvas_light_set_z_range(self, light, min_z, max_z)
}
func (self classRenderingServer) CanvasLightSetLayerRange(light RID, min_layer Int, max_layer Int) {
	self.ptr.API.RenderingServer_canvas_light_set_layer_range(self, light, min_layer, max_layer)
}
func (self classRenderingServer) CanvasLightSetItemCullMask(light RID, mask Int) {
	self.ptr.API.RenderingServer_canvas_light_set_item_cull_mask(self, light, mask)
}
func (self classRenderingServer) CanvasLightSetItemShadowCullMask(light RID, mask Int) {
	self.ptr.API.RenderingServer_canvas_light_set_item_shadow_cull_mask(self, light, mask)
}
func (self classRenderingServer) CanvasLightSetMode(light RID, mode RenderingServerCanvasLightMode) {
	self.ptr.API.RenderingServer_canvas_light_set_mode(self, light, mode)
}
func (self classRenderingServer) CanvasLightSetShadowEnabled(light RID, enabled bool) {
	self.ptr.API.RenderingServer_canvas_light_set_shadow_enabled(self, light, enabled)
}
func (self classRenderingServer) CanvasLightSetShadowFilter(light RID, filter RenderingServerCanvasLightShadowFilter) {
	self.ptr.API.RenderingServer_canvas_light_set_shadow_filter(self, light, filter)
}
func (self classRenderingServer) CanvasLightSetShadowColor(light RID, color Color) {
	self.ptr.API.RenderingServer_canvas_light_set_shadow_color(self, light, color)
}
func (self classRenderingServer) CanvasLightSetShadowSmooth(light RID, smooth Float) {
	self.ptr.API.RenderingServer_canvas_light_set_shadow_smooth(self, light, smooth)
}
func (self classRenderingServer) CanvasLightSetBlendMode(light RID, mode RenderingServerCanvasLightBlendMode) {
	self.ptr.API.RenderingServer_canvas_light_set_blend_mode(self, light, mode)
}
func (self classRenderingServer) CanvasLightOccluderCreate() RID {
	return self.ptr.API.RenderingServer_canvas_light_occluder_create(self)
}
func (self classRenderingServer) CanvasLightOccluderAttachToCanvas(occluder RID, canvas RID) {
	self.ptr.API.RenderingServer_canvas_light_occluder_attach_to_canvas(self, occluder, canvas)
}
func (self classRenderingServer) CanvasLightOccluderSetEnabled(occluder RID, enabled bool) {
	self.ptr.API.RenderingServer_canvas_light_occluder_set_enabled(self, occluder, enabled)
}
func (self classRenderingServer) CanvasLightOccluderSetPolygon(occluder RID, polygon RID) {
	self.ptr.API.RenderingServer_canvas_light_occluder_set_polygon(self, occluder, polygon)
}
func (self classRenderingServer) CanvasLightOccluderSetAsSdfCollision(occluder RID, enable bool) {
	self.ptr.API.RenderingServer_canvas_light_occluder_set_as_sdf_collision(self, occluder, enable)
}
func (self classRenderingServer) CanvasLightOccluderSetTransform(occluder RID, transform Transform2D) {
	self.ptr.API.RenderingServer_canvas_light_occluder_set_transform(self, occluder, transform)
}
func (self classRenderingServer) CanvasLightOccluderSetLightMask(occluder RID, mask Int) {
	self.ptr.API.RenderingServer_canvas_light_occluder_set_light_mask(self, occluder, mask)
}
func (self classRenderingServer) CanvasOccluderPolygonCreate() RID {
	return self.ptr.API.RenderingServer_canvas_occluder_polygon_create(self)
}
func (self classRenderingServer) CanvasOccluderPolygonSetShape(occluder_polygon RID, shape PackedVector2Array, closed bool) {
	self.ptr.API.RenderingServer_canvas_occluder_polygon_set_shape(self, occluder_polygon, shape, closed)
}
func (self classRenderingServer) CanvasOccluderPolygonSetCullMode(occluder_polygon RID, mode RenderingServerCanvasOccluderPolygonCullMode) {
	self.ptr.API.RenderingServer_canvas_occluder_polygon_set_cull_mode(self, occluder_polygon, mode)
}
func (self classRenderingServer) CanvasSetShadowTextureSize(size Int) {
	self.ptr.API.RenderingServer_canvas_set_shadow_texture_size(self, size)
}
func (self classRenderingServer) GlobalShaderParameterAdd(name StringName, atype RenderingServerGlobalShaderParameterType, default_value Variant) {
	self.ptr.API.RenderingServer_global_shader_parameter_add(self, name, atype, default_value)
}
func (self classRenderingServer) GlobalShaderParameterRemove(name StringName) {
	self.ptr.API.RenderingServer_global_shader_parameter_remove(self, name)
}
func (self classRenderingServer) GlobalShaderParameterGetList() ArrayOf[StringName] {
	return self.ptr.API.RenderingServer_global_shader_parameter_get_list(self)
}
func (self classRenderingServer) GlobalShaderParameterSet(name StringName, value Variant) {
	self.ptr.API.RenderingServer_global_shader_parameter_set(self, name, value)
}
func (self classRenderingServer) GlobalShaderParameterSetOverride(name StringName, value Variant) {
	self.ptr.API.RenderingServer_global_shader_parameter_set_override(self, name, value)
}
func (self classRenderingServer) GlobalShaderParameterGet(name StringName) Variant {
	return self.ptr.API.RenderingServer_global_shader_parameter_get(self, name)
}
func (self classRenderingServer) GlobalShaderParameterGetType(name StringName) RenderingServerGlobalShaderParameterType {
	return self.ptr.API.RenderingServer_global_shader_parameter_get_type(self, name)
}
func (self classRenderingServer) FreeRid(rid RID) {
	self.ptr.API.RenderingServer_free_rid(self, rid)
}
func (self classRenderingServer) RequestFrameDrawnCallback(callable Callable) {
	self.ptr.API.RenderingServer_request_frame_drawn_callback(self, callable)
}
func (self classRenderingServer) HasChanged() bool {
	return self.ptr.API.RenderingServer_has_changed(self)
}
func (self classRenderingServer) GetRenderingInfo(info RenderingServerRenderingInfo) Int {
	return self.ptr.API.RenderingServer_get_rendering_info(self, info)
}
func (self classRenderingServer) GetVideoAdapterName() String {
	return self.ptr.API.RenderingServer_get_video_adapter_name(self)
}
func (self classRenderingServer) GetVideoAdapterVendor() String {
	return self.ptr.API.RenderingServer_get_video_adapter_vendor(self)
}
func (self classRenderingServer) GetVideoAdapterType() RenderingDeviceDeviceType {
	return self.ptr.API.RenderingServer_get_video_adapter_type(self)
}
func (self classRenderingServer) GetVideoAdapterApiVersion() String {
	return self.ptr.API.RenderingServer_get_video_adapter_api_version(self)
}
func (self classRenderingServer) MakeSphereMesh(latitudes Int, longitudes Int, radius Float) RID {
	return self.ptr.API.RenderingServer_make_sphere_mesh(self, latitudes, longitudes, radius)
}
func (self classRenderingServer) GetTestCube() RID {
	return self.ptr.API.RenderingServer_get_test_cube(self)
}
func (self classRenderingServer) GetTestTexture() RID {
	return self.ptr.API.RenderingServer_get_test_texture(self)
}
func (self classRenderingServer) GetWhiteTexture() RID {
	return self.ptr.API.RenderingServer_get_white_texture(self)
}
func (self classRenderingServer) SetBootImage(image Image, color Color, scale bool, use_filter bool) {
	self.ptr.API.RenderingServer_set_boot_image(self, image, color, scale, use_filter)
}
func (self classRenderingServer) GetDefaultClearColor() Color {
	return self.ptr.API.RenderingServer_get_default_clear_color(self)
}
func (self classRenderingServer) SetDefaultClearColor(color Color) {
	self.ptr.API.RenderingServer_set_default_clear_color(self, color)
}
func (self classRenderingServer) HasFeature(feature RenderingServerFeatures) bool {
	return self.ptr.API.RenderingServer_has_feature(self, feature)
}
func (self classRenderingServer) HasOsFeature(feature String) bool {
	return self.ptr.API.RenderingServer_has_os_feature(self, feature)
}
func (self classRenderingServer) SetDebugGenerateWireframes(generate bool) {
	self.ptr.API.RenderingServer_set_debug_generate_wireframes(self, generate)
}
func (self classRenderingServer) IsRenderLoopEnabled() bool {
	return self.ptr.API.RenderingServer_is_render_loop_enabled(self)
}
func (self classRenderingServer) SetRenderLoopEnabled(enabled bool) {
	self.ptr.API.RenderingServer_set_render_loop_enabled(self, enabled)
}
func (self classRenderingServer) GetFrameSetupTimeCpu() Float {
	return self.ptr.API.RenderingServer_get_frame_setup_time_cpu(self)
}
func (self classRenderingServer) ForceSync() {
	self.ptr.API.RenderingServer_force_sync(self)
}
func (self classRenderingServer) ForceDraw(swap_buffers bool, frame_step Float) {
	self.ptr.API.RenderingServer_force_draw(self, swap_buffers, frame_step)
}
func (self classRenderingServer) GetRenderingDevice() RenderingDevice {
	return self.ptr.API.RenderingServer_get_rendering_device(self)
}
func (self classRenderingServer) CreateLocalRenderingDevice() RenderingDevice {
	return self.ptr.API.RenderingServer_create_local_rendering_device(self)
}
func (self classRenderingServer) CallOnRenderThread(callable Callable) {
	self.ptr.API.RenderingServer_call_on_render_thread(self, callable)
}

type classResource struct{ Class[classResource] }

func (self classResource) Super() RefCounted {
	var super RefCounted
	super.ptr = self.ptr
	return super
}

func (self classResource) RefCounted() RefCounted { return self.Super() }
func (self classResource) SetPath(path String) {
	self.ptr.API.Resource_set_path(self, path)
}
func (self classResource) TakeOverPath(path String) {
	self.ptr.API.Resource_take_over_path(self, path)
}
func (self classResource) GetPath() String {
	return self.ptr.API.Resource_get_path(self)
}
func (self classResource) SetName(name String) {
	self.ptr.API.Resource_set_name(self, name)
}
func (self classResource) GetName() String {
	return self.ptr.API.Resource_get_name(self)
}
func (self classResource) GetRid() RID {
	return self.ptr.API.Resource_get_rid(self)
}
func (self classResource) SetLocalToScene(enable bool) {
	self.ptr.API.Resource_set_local_to_scene(self, enable)
}
func (self classResource) IsLocalToScene() bool {
	return self.ptr.API.Resource_is_local_to_scene(self)
}
func (self classResource) GetLocalScene() Node {
	return self.ptr.API.Resource_get_local_scene(self)
}
func (self classResource) SetupLocalToScene() {
	self.ptr.API.Resource_setup_local_to_scene(self)
}
func (self classResource) EmitChanged() {
	self.ptr.API.Resource_emit_changed(self)
}
func (self classResource) Duplicate(subresources bool) Resource {
	return self.ptr.API.Resource_duplicate(self, subresources)
}

type classResourceFormatLoader struct {
	Class[classResourceFormatLoader]
}

func (self classResourceFormatLoader) Super() RefCounted {
	var super RefCounted
	super.ptr = self.ptr
	return super
}

func (self classResourceFormatLoader) RefCounted() RefCounted { return self.Super() }

type classResourceFormatSaver struct {
	Class[classResourceFormatSaver]
}

func (self classResourceFormatSaver) Super() RefCounted {
	var super RefCounted
	super.ptr = self.ptr
	return super
}

func (self classResourceFormatSaver) RefCounted() RefCounted { return self.Super() }

type classResourceImporter struct{ Class[classResourceImporter] }

func (self classResourceImporter) Super() RefCounted {
	var super RefCounted
	super.ptr = self.ptr
	return super
}

func (self classResourceImporter) RefCounted() RefCounted { return self.Super() }

type classResourceImporterBMFont struct {
	Class[classResourceImporterBMFont]
}

func (self classResourceImporterBMFont) Super() ResourceImporter {
	var super ResourceImporter
	super.ptr = self.ptr
	return super
}

func (self classResourceImporterBMFont) ResourceImporter() ResourceImporter { return self.Super() }

type classResourceImporterBitMap struct {
	Class[classResourceImporterBitMap]
}

func (self classResourceImporterBitMap) Super() ResourceImporter {
	var super ResourceImporter
	super.ptr = self.ptr
	return super
}

func (self classResourceImporterBitMap) ResourceImporter() ResourceImporter { return self.Super() }

type classResourceImporterCSVTranslation struct {
	Class[classResourceImporterCSVTranslation]
}

func (self classResourceImporterCSVTranslation) Super() ResourceImporter {
	var super ResourceImporter
	super.ptr = self.ptr
	return super
}

func (self classResourceImporterCSVTranslation) ResourceImporter() ResourceImporter {
	return self.Super()
}

type classResourceImporterDynamicFont struct {
	Class[classResourceImporterDynamicFont]
}

func (self classResourceImporterDynamicFont) Super() ResourceImporter {
	var super ResourceImporter
	super.ptr = self.ptr
	return super
}

func (self classResourceImporterDynamicFont) ResourceImporter() ResourceImporter { return self.Super() }

type classResourceImporterImage struct {
	Class[classResourceImporterImage]
}

func (self classResourceImporterImage) Super() ResourceImporter {
	var super ResourceImporter
	super.ptr = self.ptr
	return super
}

func (self classResourceImporterImage) ResourceImporter() ResourceImporter { return self.Super() }

type classResourceImporterImageFont struct {
	Class[classResourceImporterImageFont]
}

func (self classResourceImporterImageFont) Super() ResourceImporter {
	var super ResourceImporter
	super.ptr = self.ptr
	return super
}

func (self classResourceImporterImageFont) ResourceImporter() ResourceImporter { return self.Super() }

type classResourceImporterLayeredTexture struct {
	Class[classResourceImporterLayeredTexture]
}

func (self classResourceImporterLayeredTexture) Super() ResourceImporter {
	var super ResourceImporter
	super.ptr = self.ptr
	return super
}

func (self classResourceImporterLayeredTexture) ResourceImporter() ResourceImporter {
	return self.Super()
}

type classResourceImporterMP3 struct {
	Class[classResourceImporterMP3]
}

func (self classResourceImporterMP3) Super() ResourceImporter {
	var super ResourceImporter
	super.ptr = self.ptr
	return super
}

func (self classResourceImporterMP3) ResourceImporter() ResourceImporter { return self.Super() }

type classResourceImporterOBJ struct {
	Class[classResourceImporterOBJ]
}

func (self classResourceImporterOBJ) Super() ResourceImporter {
	var super ResourceImporter
	super.ptr = self.ptr
	return super
}

func (self classResourceImporterOBJ) ResourceImporter() ResourceImporter { return self.Super() }

type classResourceImporterOggVorbis struct {
	Class[classResourceImporterOggVorbis]
}

func (self classResourceImporterOggVorbis) Super() ResourceImporter {
	var super ResourceImporter
	super.ptr = self.ptr
	return super
}

func (self classResourceImporterOggVorbis) ResourceImporter() ResourceImporter { return self.Super() }
func (self classResourceImporterOggVorbis) LoadFromBuffer(buffer PackedByteArray) AudioStreamOggVorbis {
	return self.ptr.API.ResourceImporterOggVorbis_load_from_buffer(self, buffer)
}
func (self classResourceImporterOggVorbis) LoadFromFile(path String) AudioStreamOggVorbis {
	return self.ptr.API.ResourceImporterOggVorbis_load_from_file(self, path)
}

type classResourceImporterScene struct {
	Class[classResourceImporterScene]
}

func (self classResourceImporterScene) Super() ResourceImporter {
	var super ResourceImporter
	super.ptr = self.ptr
	return super
}

func (self classResourceImporterScene) ResourceImporter() ResourceImporter { return self.Super() }

type classResourceImporterShaderFile struct {
	Class[classResourceImporterShaderFile]
}

func (self classResourceImporterShaderFile) Super() ResourceImporter {
	var super ResourceImporter
	super.ptr = self.ptr
	return super
}

func (self classResourceImporterShaderFile) ResourceImporter() ResourceImporter { return self.Super() }

type classResourceImporterTexture struct {
	Class[classResourceImporterTexture]
}

func (self classResourceImporterTexture) Super() ResourceImporter {
	var super ResourceImporter
	super.ptr = self.ptr
	return super
}

func (self classResourceImporterTexture) ResourceImporter() ResourceImporter { return self.Super() }

type classResourceImporterTextureAtlas struct {
	Class[classResourceImporterTextureAtlas]
}

func (self classResourceImporterTextureAtlas) Super() ResourceImporter {
	var super ResourceImporter
	super.ptr = self.ptr
	return super
}

func (self classResourceImporterTextureAtlas) ResourceImporter() ResourceImporter {
	return self.Super()
}

type classResourceImporterWAV struct {
	Class[classResourceImporterWAV]
}

func (self classResourceImporterWAV) Super() ResourceImporter {
	var super ResourceImporter
	super.ptr = self.ptr
	return super
}

func (self classResourceImporterWAV) ResourceImporter() ResourceImporter { return self.Super() }

type classResourceLoader struct{ Class[classResourceLoader] }

func (self classResourceLoader) Super() Object { var super Object; super.ptr = self.ptr; return super }

func (self classResourceLoader) Object() Object { return self.Super() }

func (self classResourceLoader) isSingleton() {}
func (self classResourceLoader) LoadThreadedRequest(path String, type_hint String, use_sub_threads bool, cache_mode ResourceLoaderCacheMode) int64 {
	return self.ptr.API.ResourceLoader_load_threaded_request(self, path, type_hint, use_sub_threads, cache_mode)
}
func (self classResourceLoader) LoadThreadedGetStatus(path String, progress Array) ResourceLoaderThreadLoadStatus {
	return self.ptr.API.ResourceLoader_load_threaded_get_status(self, path, progress)
}
func (self classResourceLoader) LoadThreadedGet(path String) Resource {
	return self.ptr.API.ResourceLoader_load_threaded_get(self, path)
}
func (self classResourceLoader) Load(path String, type_hint String, cache_mode ResourceLoaderCacheMode) Resource {
	return self.ptr.API.ResourceLoader_load(self, path, type_hint, cache_mode)
}
func (self classResourceLoader) GetRecognizedExtensionsForType(atype String) PackedStringArray {
	return self.ptr.API.ResourceLoader_get_recognized_extensions_for_type(self, atype)
}
func (self classResourceLoader) AddResourceFormatLoader(format_loader ResourceFormatLoader, at_front bool) {
	self.ptr.API.ResourceLoader_add_resource_format_loader(self, format_loader, at_front)
}
func (self classResourceLoader) RemoveResourceFormatLoader(format_loader ResourceFormatLoader) {
	self.ptr.API.ResourceLoader_remove_resource_format_loader(self, format_loader)
}
func (self classResourceLoader) SetAbortOnMissingResources(abort bool) {
	self.ptr.API.ResourceLoader_set_abort_on_missing_resources(self, abort)
}
func (self classResourceLoader) GetDependencies(path String) PackedStringArray {
	return self.ptr.API.ResourceLoader_get_dependencies(self, path)
}
func (self classResourceLoader) HasCached(path String) bool {
	return self.ptr.API.ResourceLoader_has_cached(self, path)
}
func (self classResourceLoader) Exists(path String, type_hint String) bool {
	return self.ptr.API.ResourceLoader_exists(self, path, type_hint)
}
func (self classResourceLoader) GetResourceUid(path String) Int {
	return self.ptr.API.ResourceLoader_get_resource_uid(self, path)
}

type classResourcePreloader struct{ Class[classResourcePreloader] }

func (self classResourcePreloader) Super() Node { var super Node; super.ptr = self.ptr; return super }

func (self classResourcePreloader) Node() Node { return self.Super() }
func (self classResourcePreloader) AddResource(name StringName, resource Resource) {
	self.ptr.API.ResourcePreloader_add_resource(self, name, resource)
}
func (self classResourcePreloader) RemoveResource(name StringName) {
	self.ptr.API.ResourcePreloader_remove_resource(self, name)
}
func (self classResourcePreloader) RenameResource(name StringName, newname StringName) {
	self.ptr.API.ResourcePreloader_rename_resource(self, name, newname)
}
func (self classResourcePreloader) HasResource(name StringName) bool {
	return self.ptr.API.ResourcePreloader_has_resource(self, name)
}
func (self classResourcePreloader) GetResource(name StringName) Resource {
	return self.ptr.API.ResourcePreloader_get_resource(self, name)
}
func (self classResourcePreloader) GetResourceList() PackedStringArray {
	return self.ptr.API.ResourcePreloader_get_resource_list(self)
}

type classResourceSaver struct{ Class[classResourceSaver] }

func (self classResourceSaver) Super() Object { var super Object; super.ptr = self.ptr; return super }

func (self classResourceSaver) Object() Object { return self.Super() }

func (self classResourceSaver) isSingleton() {}
func (self classResourceSaver) Save(resource Resource, path String, flags ResourceSaverSaverFlags) int64 {
	return self.ptr.API.ResourceSaver_save(self, resource, path, flags)
}
func (self classResourceSaver) GetRecognizedExtensions(atype Resource) PackedStringArray {
	return self.ptr.API.ResourceSaver_get_recognized_extensions(self, atype)
}
func (self classResourceSaver) AddResourceFormatSaver(format_saver ResourceFormatSaver, at_front bool) {
	self.ptr.API.ResourceSaver_add_resource_format_saver(self, format_saver, at_front)
}
func (self classResourceSaver) RemoveResourceFormatSaver(format_saver ResourceFormatSaver) {
	self.ptr.API.ResourceSaver_remove_resource_format_saver(self, format_saver)
}

type classResourceUID struct{ Class[classResourceUID] }

func (self classResourceUID) Super() Object { var super Object; super.ptr = self.ptr; return super }

func (self classResourceUID) Object() Object { return self.Super() }

func (self classResourceUID) isSingleton() {}
func (self classResourceUID) IdToText(id Int) String {
	return self.ptr.API.ResourceUID_id_to_text(self, id)
}
func (self classResourceUID) TextToId(text_id String) Int {
	return self.ptr.API.ResourceUID_text_to_id(self, text_id)
}
func (self classResourceUID) CreateId() Int {
	return self.ptr.API.ResourceUID_create_id(self)
}
func (self classResourceUID) HasId(id Int) bool {
	return self.ptr.API.ResourceUID_has_id(self, id)
}
func (self classResourceUID) AddId(id Int, path String) {
	self.ptr.API.ResourceUID_add_id(self, id, path)
}
func (self classResourceUID) SetId(id Int, path String) {
	self.ptr.API.ResourceUID_set_id(self, id, path)
}
func (self classResourceUID) GetIdPath(id Int) String {
	return self.ptr.API.ResourceUID_get_id_path(self, id)
}
func (self classResourceUID) RemoveId(id Int) {
	self.ptr.API.ResourceUID_remove_id(self, id)
}

type classRibbonTrailMesh struct{ Class[classRibbonTrailMesh] }

func (self classRibbonTrailMesh) Super() PrimitiveMesh {
	var super PrimitiveMesh
	super.ptr = self.ptr
	return super
}

func (self classRibbonTrailMesh) PrimitiveMesh() PrimitiveMesh { return self.Super() }
func (self classRibbonTrailMesh) SetSize(size Float) {
	self.ptr.API.RibbonTrailMesh_set_size(self, size)
}
func (self classRibbonTrailMesh) GetSize() Float {
	return self.ptr.API.RibbonTrailMesh_get_size(self)
}
func (self classRibbonTrailMesh) SetSections(sections Int) {
	self.ptr.API.RibbonTrailMesh_set_sections(self, sections)
}
func (self classRibbonTrailMesh) GetSections() Int {
	return self.ptr.API.RibbonTrailMesh_get_sections(self)
}
func (self classRibbonTrailMesh) SetSectionLength(section_length Float) {
	self.ptr.API.RibbonTrailMesh_set_section_length(self, section_length)
}
func (self classRibbonTrailMesh) GetSectionLength() Float {
	return self.ptr.API.RibbonTrailMesh_get_section_length(self)
}
func (self classRibbonTrailMesh) SetSectionSegments(section_segments Int) {
	self.ptr.API.RibbonTrailMesh_set_section_segments(self, section_segments)
}
func (self classRibbonTrailMesh) GetSectionSegments() Int {
	return self.ptr.API.RibbonTrailMesh_get_section_segments(self)
}
func (self classRibbonTrailMesh) SetCurve(curve Curve) {
	self.ptr.API.RibbonTrailMesh_set_curve(self, curve)
}
func (self classRibbonTrailMesh) GetCurve() Curve {
	return self.ptr.API.RibbonTrailMesh_get_curve(self)
}
func (self classRibbonTrailMesh) SetShape(shape RibbonTrailMeshShape) {
	self.ptr.API.RibbonTrailMesh_set_shape(self, shape)
}
func (self classRibbonTrailMesh) GetShape() RibbonTrailMeshShape {
	return self.ptr.API.RibbonTrailMesh_get_shape(self)
}

type classRichTextEffect struct{ Class[classRichTextEffect] }

func (self classRichTextEffect) Super() Resource {
	var super Resource
	super.ptr = self.ptr
	return super
}

func (self classRichTextEffect) Resource() Resource { return self.Super() }

type classRichTextLabel struct{ Class[classRichTextLabel] }

func (self classRichTextLabel) Super() Control { var super Control; super.ptr = self.ptr; return super }

func (self classRichTextLabel) Control() Control { return self.Super() }
func (self classRichTextLabel) GetParsedText() String {
	return self.ptr.API.RichTextLabel_get_parsed_text(self)
}
func (self classRichTextLabel) AddText(text String) {
	self.ptr.API.RichTextLabel_add_text(self, text)
}
func (self classRichTextLabel) SetText(text String) {
	self.ptr.API.RichTextLabel_set_text(self, text)
}
func (self classRichTextLabel) AddImage(image Texture2D, width Int, height Int, color Color, inline_align InlineAlignment, region Rect2, key Variant, pad bool, tooltip String, size_in_percent bool) {
	self.ptr.API.RichTextLabel_add_image(self, image, width, height, color, inline_align, region, key, pad, tooltip, size_in_percent)
}
func (self classRichTextLabel) UpdateImage(key Variant, mask RichTextLabelImageUpdateMask, image Texture2D, width Int, height Int, color Color, inline_align InlineAlignment, region Rect2, pad bool, tooltip String, size_in_percent bool) {
	self.ptr.API.RichTextLabel_update_image(self, key, mask, image, width, height, color, inline_align, region, pad, tooltip, size_in_percent)
}
func (self classRichTextLabel) Newline() {
	self.ptr.API.RichTextLabel_newline(self)
}
func (self classRichTextLabel) RemoveParagraph(paragraph Int) bool {
	return self.ptr.API.RichTextLabel_remove_paragraph(self, paragraph)
}
func (self classRichTextLabel) PushFont(font Font, font_size Int) {
	self.ptr.API.RichTextLabel_push_font(self, font, font_size)
}
func (self classRichTextLabel) PushFontSize(font_size Int) {
	self.ptr.API.RichTextLabel_push_font_size(self, font_size)
}
func (self classRichTextLabel) PushNormal() {
	self.ptr.API.RichTextLabel_push_normal(self)
}
func (self classRichTextLabel) PushBold() {
	self.ptr.API.RichTextLabel_push_bold(self)
}
func (self classRichTextLabel) PushBoldItalics() {
	self.ptr.API.RichTextLabel_push_bold_italics(self)
}
func (self classRichTextLabel) PushItalics() {
	self.ptr.API.RichTextLabel_push_italics(self)
}
func (self classRichTextLabel) PushMono() {
	self.ptr.API.RichTextLabel_push_mono(self)
}
func (self classRichTextLabel) PushColor(color Color) {
	self.ptr.API.RichTextLabel_push_color(self, color)
}
func (self classRichTextLabel) PushOutlineSize(outline_size Int) {
	self.ptr.API.RichTextLabel_push_outline_size(self, outline_size)
}
func (self classRichTextLabel) PushOutlineColor(color Color) {
	self.ptr.API.RichTextLabel_push_outline_color(self, color)
}
func (self classRichTextLabel) PushParagraph(alignment HorizontalAlignment, base_direction ControlTextDirection, language String, st_parser TextServerStructuredTextParser, justification_flags TextServerJustificationFlag, tab_stops PackedFloat32Array) {
	self.ptr.API.RichTextLabel_push_paragraph(self, alignment, base_direction, language, st_parser, justification_flags, tab_stops)
}
func (self classRichTextLabel) PushIndent(level Int) {
	self.ptr.API.RichTextLabel_push_indent(self, level)
}
func (self classRichTextLabel) PushList(level Int, atype RichTextLabelListType, capitalize bool, bullet String) {
	self.ptr.API.RichTextLabel_push_list(self, level, atype, capitalize, bullet)
}
func (self classRichTextLabel) PushMeta(data Variant) {
	self.ptr.API.RichTextLabel_push_meta(self, data)
}
func (self classRichTextLabel) PushHint(description String) {
	self.ptr.API.RichTextLabel_push_hint(self, description)
}
func (self classRichTextLabel) PushLanguage(language String) {
	self.ptr.API.RichTextLabel_push_language(self, language)
}
func (self classRichTextLabel) PushUnderline() {
	self.ptr.API.RichTextLabel_push_underline(self)
}
func (self classRichTextLabel) PushStrikethrough() {
	self.ptr.API.RichTextLabel_push_strikethrough(self)
}
func (self classRichTextLabel) PushTable(columns Int, inline_align InlineAlignment, align_to_row Int) {
	self.ptr.API.RichTextLabel_push_table(self, columns, inline_align, align_to_row)
}
func (self classRichTextLabel) PushDropcap(s String, font Font, size Int, dropcap_margins Rect2, color Color, outline_size Int, outline_color Color) {
	self.ptr.API.RichTextLabel_push_dropcap(self, s, font, size, dropcap_margins, color, outline_size, outline_color)
}
func (self classRichTextLabel) SetTableColumnExpand(column Int, expand bool, ratio Int) {
	self.ptr.API.RichTextLabel_set_table_column_expand(self, column, expand, ratio)
}
func (self classRichTextLabel) SetCellRowBackgroundColor(odd_row_bg Color, even_row_bg Color) {
	self.ptr.API.RichTextLabel_set_cell_row_background_color(self, odd_row_bg, even_row_bg)
}
func (self classRichTextLabel) SetCellBorderColor(color Color) {
	self.ptr.API.RichTextLabel_set_cell_border_color(self, color)
}
func (self classRichTextLabel) SetCellSizeOverride(min_size Vector2, max_size Vector2) {
	self.ptr.API.RichTextLabel_set_cell_size_override(self, min_size, max_size)
}
func (self classRichTextLabel) SetCellPadding(padding Rect2) {
	self.ptr.API.RichTextLabel_set_cell_padding(self, padding)
}
func (self classRichTextLabel) PushCell() {
	self.ptr.API.RichTextLabel_push_cell(self)
}
func (self classRichTextLabel) PushFgcolor(fgcolor Color) {
	self.ptr.API.RichTextLabel_push_fgcolor(self, fgcolor)
}
func (self classRichTextLabel) PushBgcolor(bgcolor Color) {
	self.ptr.API.RichTextLabel_push_bgcolor(self, bgcolor)
}
func (self classRichTextLabel) PushCustomfx(effect RichTextEffect, env Dictionary) {
	self.ptr.API.RichTextLabel_push_customfx(self, effect, env)
}
func (self classRichTextLabel) PushContext() {
	self.ptr.API.RichTextLabel_push_context(self)
}
func (self classRichTextLabel) PopContext() {
	self.ptr.API.RichTextLabel_pop_context(self)
}
func (self classRichTextLabel) Pop() {
	self.ptr.API.RichTextLabel_pop(self)
}
func (self classRichTextLabel) PopAll() {
	self.ptr.API.RichTextLabel_pop_all(self)
}
func (self classRichTextLabel) Clear() {
	self.ptr.API.RichTextLabel_clear(self)
}
func (self classRichTextLabel) SetStructuredTextBidiOverride(parser TextServerStructuredTextParser) {
	self.ptr.API.RichTextLabel_set_structured_text_bidi_override(self, parser)
}
func (self classRichTextLabel) GetStructuredTextBidiOverride() TextServerStructuredTextParser {
	return self.ptr.API.RichTextLabel_get_structured_text_bidi_override(self)
}
func (self classRichTextLabel) SetStructuredTextBidiOverrideOptions(args Array) {
	self.ptr.API.RichTextLabel_set_structured_text_bidi_override_options(self, args)
}
func (self classRichTextLabel) GetStructuredTextBidiOverrideOptions() Array {
	return self.ptr.API.RichTextLabel_get_structured_text_bidi_override_options(self)
}
func (self classRichTextLabel) SetTextDirection(direction ControlTextDirection) {
	self.ptr.API.RichTextLabel_set_text_direction(self, direction)
}
func (self classRichTextLabel) GetTextDirection() ControlTextDirection {
	return self.ptr.API.RichTextLabel_get_text_direction(self)
}
func (self classRichTextLabel) SetLanguage(language String) {
	self.ptr.API.RichTextLabel_set_language(self, language)
}
func (self classRichTextLabel) GetLanguage() String {
	return self.ptr.API.RichTextLabel_get_language(self)
}
func (self classRichTextLabel) SetAutowrapMode(autowrap_mode TextServerAutowrapMode) {
	self.ptr.API.RichTextLabel_set_autowrap_mode(self, autowrap_mode)
}
func (self classRichTextLabel) GetAutowrapMode() TextServerAutowrapMode {
	return self.ptr.API.RichTextLabel_get_autowrap_mode(self)
}
func (self classRichTextLabel) SetMetaUnderline(enable bool) {
	self.ptr.API.RichTextLabel_set_meta_underline(self, enable)
}
func (self classRichTextLabel) IsMetaUnderlined() bool {
	return self.ptr.API.RichTextLabel_is_meta_underlined(self)
}
func (self classRichTextLabel) SetHintUnderline(enable bool) {
	self.ptr.API.RichTextLabel_set_hint_underline(self, enable)
}
func (self classRichTextLabel) IsHintUnderlined() bool {
	return self.ptr.API.RichTextLabel_is_hint_underlined(self)
}
func (self classRichTextLabel) SetScrollActive(active bool) {
	self.ptr.API.RichTextLabel_set_scroll_active(self, active)
}
func (self classRichTextLabel) IsScrollActive() bool {
	return self.ptr.API.RichTextLabel_is_scroll_active(self)
}
func (self classRichTextLabel) SetScrollFollow(follow bool) {
	self.ptr.API.RichTextLabel_set_scroll_follow(self, follow)
}
func (self classRichTextLabel) IsScrollFollowing() bool {
	return self.ptr.API.RichTextLabel_is_scroll_following(self)
}
func (self classRichTextLabel) GetVScrollBar() VScrollBar {
	return self.ptr.API.RichTextLabel_get_v_scroll_bar(self)
}
func (self classRichTextLabel) ScrollToLine(line Int) {
	self.ptr.API.RichTextLabel_scroll_to_line(self, line)
}
func (self classRichTextLabel) ScrollToParagraph(paragraph Int) {
	self.ptr.API.RichTextLabel_scroll_to_paragraph(self, paragraph)
}
func (self classRichTextLabel) ScrollToSelection() {
	self.ptr.API.RichTextLabel_scroll_to_selection(self)
}
func (self classRichTextLabel) SetTabSize(spaces Int) {
	self.ptr.API.RichTextLabel_set_tab_size(self, spaces)
}
func (self classRichTextLabel) GetTabSize() Int {
	return self.ptr.API.RichTextLabel_get_tab_size(self)
}
func (self classRichTextLabel) SetFitContent(enabled bool) {
	self.ptr.API.RichTextLabel_set_fit_content(self, enabled)
}
func (self classRichTextLabel) IsFitContentEnabled() bool {
	return self.ptr.API.RichTextLabel_is_fit_content_enabled(self)
}
func (self classRichTextLabel) SetSelectionEnabled(enabled bool) {
	self.ptr.API.RichTextLabel_set_selection_enabled(self, enabled)
}
func (self classRichTextLabel) IsSelectionEnabled() bool {
	return self.ptr.API.RichTextLabel_is_selection_enabled(self)
}
func (self classRichTextLabel) SetContextMenuEnabled(enabled bool) {
	self.ptr.API.RichTextLabel_set_context_menu_enabled(self, enabled)
}
func (self classRichTextLabel) IsContextMenuEnabled() bool {
	return self.ptr.API.RichTextLabel_is_context_menu_enabled(self)
}
func (self classRichTextLabel) SetShortcutKeysEnabled(enabled bool) {
	self.ptr.API.RichTextLabel_set_shortcut_keys_enabled(self, enabled)
}
func (self classRichTextLabel) IsShortcutKeysEnabled() bool {
	return self.ptr.API.RichTextLabel_is_shortcut_keys_enabled(self)
}
func (self classRichTextLabel) SetDeselectOnFocusLossEnabled(enable bool) {
	self.ptr.API.RichTextLabel_set_deselect_on_focus_loss_enabled(self, enable)
}
func (self classRichTextLabel) IsDeselectOnFocusLossEnabled() bool {
	return self.ptr.API.RichTextLabel_is_deselect_on_focus_loss_enabled(self)
}
func (self classRichTextLabel) SetDragAndDropSelectionEnabled(enable bool) {
	self.ptr.API.RichTextLabel_set_drag_and_drop_selection_enabled(self, enable)
}
func (self classRichTextLabel) IsDragAndDropSelectionEnabled() bool {
	return self.ptr.API.RichTextLabel_is_drag_and_drop_selection_enabled(self)
}
func (self classRichTextLabel) GetSelectionFrom() Int {
	return self.ptr.API.RichTextLabel_get_selection_from(self)
}
func (self classRichTextLabel) GetSelectionTo() Int {
	return self.ptr.API.RichTextLabel_get_selection_to(self)
}
func (self classRichTextLabel) SelectAll() {
	self.ptr.API.RichTextLabel_select_all(self)
}
func (self classRichTextLabel) GetSelectedText() String {
	return self.ptr.API.RichTextLabel_get_selected_text(self)
}
func (self classRichTextLabel) Deselect() {
	self.ptr.API.RichTextLabel_deselect(self)
}
func (self classRichTextLabel) ParseBbcode(bbcode String) {
	self.ptr.API.RichTextLabel_parse_bbcode(self, bbcode)
}
func (self classRichTextLabel) AppendText(bbcode String) {
	self.ptr.API.RichTextLabel_append_text(self, bbcode)
}
func (self classRichTextLabel) GetText() String {
	return self.ptr.API.RichTextLabel_get_text(self)
}
func (self classRichTextLabel) IsReady() bool {
	return self.ptr.API.RichTextLabel_is_ready(self)
}
func (self classRichTextLabel) SetThreaded(threaded bool) {
	self.ptr.API.RichTextLabel_set_threaded(self, threaded)
}
func (self classRichTextLabel) IsThreaded() bool {
	return self.ptr.API.RichTextLabel_is_threaded(self)
}
func (self classRichTextLabel) SetProgressBarDelay(delay_ms Int) {
	self.ptr.API.RichTextLabel_set_progress_bar_delay(self, delay_ms)
}
func (self classRichTextLabel) GetProgressBarDelay() Int {
	return self.ptr.API.RichTextLabel_get_progress_bar_delay(self)
}
func (self classRichTextLabel) SetVisibleCharacters(amount Int) {
	self.ptr.API.RichTextLabel_set_visible_characters(self, amount)
}
func (self classRichTextLabel) GetVisibleCharacters() Int {
	return self.ptr.API.RichTextLabel_get_visible_characters(self)
}
func (self classRichTextLabel) GetVisibleCharactersBehavior() TextServerVisibleCharactersBehavior {
	return self.ptr.API.RichTextLabel_get_visible_characters_behavior(self)
}
func (self classRichTextLabel) SetVisibleCharactersBehavior(behavior TextServerVisibleCharactersBehavior) {
	self.ptr.API.RichTextLabel_set_visible_characters_behavior(self, behavior)
}
func (self classRichTextLabel) SetVisibleRatio(ratio Float) {
	self.ptr.API.RichTextLabel_set_visible_ratio(self, ratio)
}
func (self classRichTextLabel) GetVisibleRatio() Float {
	return self.ptr.API.RichTextLabel_get_visible_ratio(self)
}
func (self classRichTextLabel) GetCharacterLine(character Int) Int {
	return self.ptr.API.RichTextLabel_get_character_line(self, character)
}
func (self classRichTextLabel) GetCharacterParagraph(character Int) Int {
	return self.ptr.API.RichTextLabel_get_character_paragraph(self, character)
}
func (self classRichTextLabel) GetTotalCharacterCount() Int {
	return self.ptr.API.RichTextLabel_get_total_character_count(self)
}
func (self classRichTextLabel) SetUseBbcode(enable bool) {
	self.ptr.API.RichTextLabel_set_use_bbcode(self, enable)
}
func (self classRichTextLabel) IsUsingBbcode() bool {
	return self.ptr.API.RichTextLabel_is_using_bbcode(self)
}
func (self classRichTextLabel) GetLineCount() Int {
	return self.ptr.API.RichTextLabel_get_line_count(self)
}
func (self classRichTextLabel) GetVisibleLineCount() Int {
	return self.ptr.API.RichTextLabel_get_visible_line_count(self)
}
func (self classRichTextLabel) GetParagraphCount() Int {
	return self.ptr.API.RichTextLabel_get_paragraph_count(self)
}
func (self classRichTextLabel) GetVisibleParagraphCount() Int {
	return self.ptr.API.RichTextLabel_get_visible_paragraph_count(self)
}
func (self classRichTextLabel) GetContentHeight() Int {
	return self.ptr.API.RichTextLabel_get_content_height(self)
}
func (self classRichTextLabel) GetContentWidth() Int {
	return self.ptr.API.RichTextLabel_get_content_width(self)
}
func (self classRichTextLabel) GetLineOffset(line Int) Float {
	return self.ptr.API.RichTextLabel_get_line_offset(self, line)
}
func (self classRichTextLabel) GetParagraphOffset(paragraph Int) Float {
	return self.ptr.API.RichTextLabel_get_paragraph_offset(self, paragraph)
}
func (self classRichTextLabel) ParseExpressionsForValues(expressions PackedStringArray) Dictionary {
	return self.ptr.API.RichTextLabel_parse_expressions_for_values(self, expressions)
}
func (self classRichTextLabel) SetEffects(effects Array) {
	self.ptr.API.RichTextLabel_set_effects(self, effects)
}
func (self classRichTextLabel) GetEffects() Array {
	return self.ptr.API.RichTextLabel_get_effects(self)
}
func (self classRichTextLabel) InstallEffect(effect Variant) {
	self.ptr.API.RichTextLabel_install_effect(self, effect)
}
func (self classRichTextLabel) GetMenu() PopupMenu {
	return self.ptr.API.RichTextLabel_get_menu(self)
}
func (self classRichTextLabel) IsMenuVisible() bool {
	return self.ptr.API.RichTextLabel_is_menu_visible(self)
}
func (self classRichTextLabel) MenuOption(option Int) {
	self.ptr.API.RichTextLabel_menu_option(self, option)
}

type classRigidBody2D struct{ Class[classRigidBody2D] }

func (self classRigidBody2D) Super() PhysicsBody2D {
	var super PhysicsBody2D
	super.ptr = self.ptr
	return super
}

func (self classRigidBody2D) PhysicsBody2D() PhysicsBody2D { return self.Super() }
func (self classRigidBody2D) SetMass(mass Float) {
	self.ptr.API.RigidBody2D_set_mass(self, mass)
}
func (self classRigidBody2D) GetMass() Float {
	return self.ptr.API.RigidBody2D_get_mass(self)
}
func (self classRigidBody2D) GetInertia() Float {
	return self.ptr.API.RigidBody2D_get_inertia(self)
}
func (self classRigidBody2D) SetInertia(inertia Float) {
	self.ptr.API.RigidBody2D_set_inertia(self, inertia)
}
func (self classRigidBody2D) SetCenterOfMassMode(mode RigidBody2DCenterOfMassMode) {
	self.ptr.API.RigidBody2D_set_center_of_mass_mode(self, mode)
}
func (self classRigidBody2D) GetCenterOfMassMode() RigidBody2DCenterOfMassMode {
	return self.ptr.API.RigidBody2D_get_center_of_mass_mode(self)
}
func (self classRigidBody2D) SetCenterOfMass(center_of_mass Vector2) {
	self.ptr.API.RigidBody2D_set_center_of_mass(self, center_of_mass)
}
func (self classRigidBody2D) GetCenterOfMass() Vector2 {
	return self.ptr.API.RigidBody2D_get_center_of_mass(self)
}
func (self classRigidBody2D) SetPhysicsMaterialOverride(physics_material_override PhysicsMaterial) {
	self.ptr.API.RigidBody2D_set_physics_material_override(self, physics_material_override)
}
func (self classRigidBody2D) GetPhysicsMaterialOverride() PhysicsMaterial {
	return self.ptr.API.RigidBody2D_get_physics_material_override(self)
}
func (self classRigidBody2D) SetGravityScale(gravity_scale Float) {
	self.ptr.API.RigidBody2D_set_gravity_scale(self, gravity_scale)
}
func (self classRigidBody2D) GetGravityScale() Float {
	return self.ptr.API.RigidBody2D_get_gravity_scale(self)
}
func (self classRigidBody2D) SetLinearDampMode(linear_damp_mode RigidBody2DDampMode) {
	self.ptr.API.RigidBody2D_set_linear_damp_mode(self, linear_damp_mode)
}
func (self classRigidBody2D) GetLinearDampMode() RigidBody2DDampMode {
	return self.ptr.API.RigidBody2D_get_linear_damp_mode(self)
}
func (self classRigidBody2D) SetAngularDampMode(angular_damp_mode RigidBody2DDampMode) {
	self.ptr.API.RigidBody2D_set_angular_damp_mode(self, angular_damp_mode)
}
func (self classRigidBody2D) GetAngularDampMode() RigidBody2DDampMode {
	return self.ptr.API.RigidBody2D_get_angular_damp_mode(self)
}
func (self classRigidBody2D) SetLinearDamp(linear_damp Float) {
	self.ptr.API.RigidBody2D_set_linear_damp(self, linear_damp)
}
func (self classRigidBody2D) GetLinearDamp() Float {
	return self.ptr.API.RigidBody2D_get_linear_damp(self)
}
func (self classRigidBody2D) SetAngularDamp(angular_damp Float) {
	self.ptr.API.RigidBody2D_set_angular_damp(self, angular_damp)
}
func (self classRigidBody2D) GetAngularDamp() Float {
	return self.ptr.API.RigidBody2D_get_angular_damp(self)
}
func (self classRigidBody2D) SetLinearVelocity(linear_velocity Vector2) {
	self.ptr.API.RigidBody2D_set_linear_velocity(self, linear_velocity)
}
func (self classRigidBody2D) GetLinearVelocity() Vector2 {
	return self.ptr.API.RigidBody2D_get_linear_velocity(self)
}
func (self classRigidBody2D) SetAngularVelocity(angular_velocity Float) {
	self.ptr.API.RigidBody2D_set_angular_velocity(self, angular_velocity)
}
func (self classRigidBody2D) GetAngularVelocity() Float {
	return self.ptr.API.RigidBody2D_get_angular_velocity(self)
}
func (self classRigidBody2D) SetMaxContactsReported(amount Int) {
	self.ptr.API.RigidBody2D_set_max_contacts_reported(self, amount)
}
func (self classRigidBody2D) GetMaxContactsReported() Int {
	return self.ptr.API.RigidBody2D_get_max_contacts_reported(self)
}
func (self classRigidBody2D) GetContactCount() Int {
	return self.ptr.API.RigidBody2D_get_contact_count(self)
}
func (self classRigidBody2D) SetUseCustomIntegrator(enable bool) {
	self.ptr.API.RigidBody2D_set_use_custom_integrator(self, enable)
}
func (self classRigidBody2D) IsUsingCustomIntegrator() bool {
	return self.ptr.API.RigidBody2D_is_using_custom_integrator(self)
}
func (self classRigidBody2D) SetContactMonitor(enabled bool) {
	self.ptr.API.RigidBody2D_set_contact_monitor(self, enabled)
}
func (self classRigidBody2D) IsContactMonitorEnabled() bool {
	return self.ptr.API.RigidBody2D_is_contact_monitor_enabled(self)
}
func (self classRigidBody2D) SetContinuousCollisionDetectionMode(mode RigidBody2DCCDMode) {
	self.ptr.API.RigidBody2D_set_continuous_collision_detection_mode(self, mode)
}
func (self classRigidBody2D) GetContinuousCollisionDetectionMode() RigidBody2DCCDMode {
	return self.ptr.API.RigidBody2D_get_continuous_collision_detection_mode(self)
}
func (self classRigidBody2D) SetAxisVelocity(axis_velocity Vector2) {
	self.ptr.API.RigidBody2D_set_axis_velocity(self, axis_velocity)
}
func (self classRigidBody2D) ApplyCentralImpulse(impulse Vector2) {
	self.ptr.API.RigidBody2D_apply_central_impulse(self, impulse)
}
func (self classRigidBody2D) ApplyImpulse(impulse Vector2, position Vector2) {
	self.ptr.API.RigidBody2D_apply_impulse(self, impulse, position)
}
func (self classRigidBody2D) ApplyTorqueImpulse(torque Float) {
	self.ptr.API.RigidBody2D_apply_torque_impulse(self, torque)
}
func (self classRigidBody2D) ApplyCentralForce(force Vector2) {
	self.ptr.API.RigidBody2D_apply_central_force(self, force)
}
func (self classRigidBody2D) ApplyForce(force Vector2, position Vector2) {
	self.ptr.API.RigidBody2D_apply_force(self, force, position)
}
func (self classRigidBody2D) ApplyTorque(torque Float) {
	self.ptr.API.RigidBody2D_apply_torque(self, torque)
}
func (self classRigidBody2D) AddConstantCentralForce(force Vector2) {
	self.ptr.API.RigidBody2D_add_constant_central_force(self, force)
}
func (self classRigidBody2D) AddConstantForce(force Vector2, position Vector2) {
	self.ptr.API.RigidBody2D_add_constant_force(self, force, position)
}
func (self classRigidBody2D) AddConstantTorque(torque Float) {
	self.ptr.API.RigidBody2D_add_constant_torque(self, torque)
}
func (self classRigidBody2D) SetConstantForce(force Vector2) {
	self.ptr.API.RigidBody2D_set_constant_force(self, force)
}
func (self classRigidBody2D) GetConstantForce() Vector2 {
	return self.ptr.API.RigidBody2D_get_constant_force(self)
}
func (self classRigidBody2D) SetConstantTorque(torque Float) {
	self.ptr.API.RigidBody2D_set_constant_torque(self, torque)
}
func (self classRigidBody2D) GetConstantTorque() Float {
	return self.ptr.API.RigidBody2D_get_constant_torque(self)
}
func (self classRigidBody2D) SetSleeping(sleeping bool) {
	self.ptr.API.RigidBody2D_set_sleeping(self, sleeping)
}
func (self classRigidBody2D) IsSleeping() bool {
	return self.ptr.API.RigidBody2D_is_sleeping(self)
}
func (self classRigidBody2D) SetCanSleep(able_to_sleep bool) {
	self.ptr.API.RigidBody2D_set_can_sleep(self, able_to_sleep)
}
func (self classRigidBody2D) IsAbleToSleep() bool {
	return self.ptr.API.RigidBody2D_is_able_to_sleep(self)
}
func (self classRigidBody2D) SetLockRotationEnabled(lock_rotation bool) {
	self.ptr.API.RigidBody2D_set_lock_rotation_enabled(self, lock_rotation)
}
func (self classRigidBody2D) IsLockRotationEnabled() bool {
	return self.ptr.API.RigidBody2D_is_lock_rotation_enabled(self)
}
func (self classRigidBody2D) SetFreezeEnabled(freeze_mode bool) {
	self.ptr.API.RigidBody2D_set_freeze_enabled(self, freeze_mode)
}
func (self classRigidBody2D) IsFreezeEnabled() bool {
	return self.ptr.API.RigidBody2D_is_freeze_enabled(self)
}
func (self classRigidBody2D) SetFreezeMode(freeze_mode RigidBody2DFreezeMode) {
	self.ptr.API.RigidBody2D_set_freeze_mode(self, freeze_mode)
}
func (self classRigidBody2D) GetFreezeMode() RigidBody2DFreezeMode {
	return self.ptr.API.RigidBody2D_get_freeze_mode(self)
}
func (self classRigidBody2D) GetCollidingBodies() ArrayOf[Node2D] {
	return self.ptr.API.RigidBody2D_get_colliding_bodies(self)
}

type classRigidBody3D struct{ Class[classRigidBody3D] }

func (self classRigidBody3D) Super() PhysicsBody3D {
	var super PhysicsBody3D
	super.ptr = self.ptr
	return super
}

func (self classRigidBody3D) PhysicsBody3D() PhysicsBody3D { return self.Super() }
func (self classRigidBody3D) SetMass(mass Float) {
	self.ptr.API.RigidBody3D_set_mass(self, mass)
}
func (self classRigidBody3D) GetMass() Float {
	return self.ptr.API.RigidBody3D_get_mass(self)
}
func (self classRigidBody3D) SetInertia(inertia Vector3) {
	self.ptr.API.RigidBody3D_set_inertia(self, inertia)
}
func (self classRigidBody3D) GetInertia() Vector3 {
	return self.ptr.API.RigidBody3D_get_inertia(self)
}
func (self classRigidBody3D) SetCenterOfMassMode(mode RigidBody3DCenterOfMassMode) {
	self.ptr.API.RigidBody3D_set_center_of_mass_mode(self, mode)
}
func (self classRigidBody3D) GetCenterOfMassMode() RigidBody3DCenterOfMassMode {
	return self.ptr.API.RigidBody3D_get_center_of_mass_mode(self)
}
func (self classRigidBody3D) SetCenterOfMass(center_of_mass Vector3) {
	self.ptr.API.RigidBody3D_set_center_of_mass(self, center_of_mass)
}
func (self classRigidBody3D) GetCenterOfMass() Vector3 {
	return self.ptr.API.RigidBody3D_get_center_of_mass(self)
}
func (self classRigidBody3D) SetPhysicsMaterialOverride(physics_material_override PhysicsMaterial) {
	self.ptr.API.RigidBody3D_set_physics_material_override(self, physics_material_override)
}
func (self classRigidBody3D) GetPhysicsMaterialOverride() PhysicsMaterial {
	return self.ptr.API.RigidBody3D_get_physics_material_override(self)
}
func (self classRigidBody3D) SetLinearVelocity(linear_velocity Vector3) {
	self.ptr.API.RigidBody3D_set_linear_velocity(self, linear_velocity)
}
func (self classRigidBody3D) GetLinearVelocity() Vector3 {
	return self.ptr.API.RigidBody3D_get_linear_velocity(self)
}
func (self classRigidBody3D) SetAngularVelocity(angular_velocity Vector3) {
	self.ptr.API.RigidBody3D_set_angular_velocity(self, angular_velocity)
}
func (self classRigidBody3D) GetAngularVelocity() Vector3 {
	return self.ptr.API.RigidBody3D_get_angular_velocity(self)
}
func (self classRigidBody3D) GetInverseInertiaTensor() Basis {
	return self.ptr.API.RigidBody3D_get_inverse_inertia_tensor(self)
}
func (self classRigidBody3D) SetGravityScale(gravity_scale Float) {
	self.ptr.API.RigidBody3D_set_gravity_scale(self, gravity_scale)
}
func (self classRigidBody3D) GetGravityScale() Float {
	return self.ptr.API.RigidBody3D_get_gravity_scale(self)
}
func (self classRigidBody3D) SetLinearDampMode(linear_damp_mode RigidBody3DDampMode) {
	self.ptr.API.RigidBody3D_set_linear_damp_mode(self, linear_damp_mode)
}
func (self classRigidBody3D) GetLinearDampMode() RigidBody3DDampMode {
	return self.ptr.API.RigidBody3D_get_linear_damp_mode(self)
}
func (self classRigidBody3D) SetAngularDampMode(angular_damp_mode RigidBody3DDampMode) {
	self.ptr.API.RigidBody3D_set_angular_damp_mode(self, angular_damp_mode)
}
func (self classRigidBody3D) GetAngularDampMode() RigidBody3DDampMode {
	return self.ptr.API.RigidBody3D_get_angular_damp_mode(self)
}
func (self classRigidBody3D) SetLinearDamp(linear_damp Float) {
	self.ptr.API.RigidBody3D_set_linear_damp(self, linear_damp)
}
func (self classRigidBody3D) GetLinearDamp() Float {
	return self.ptr.API.RigidBody3D_get_linear_damp(self)
}
func (self classRigidBody3D) SetAngularDamp(angular_damp Float) {
	self.ptr.API.RigidBody3D_set_angular_damp(self, angular_damp)
}
func (self classRigidBody3D) GetAngularDamp() Float {
	return self.ptr.API.RigidBody3D_get_angular_damp(self)
}
func (self classRigidBody3D) SetMaxContactsReported(amount Int) {
	self.ptr.API.RigidBody3D_set_max_contacts_reported(self, amount)
}
func (self classRigidBody3D) GetMaxContactsReported() Int {
	return self.ptr.API.RigidBody3D_get_max_contacts_reported(self)
}
func (self classRigidBody3D) GetContactCount() Int {
	return self.ptr.API.RigidBody3D_get_contact_count(self)
}
func (self classRigidBody3D) SetUseCustomIntegrator(enable bool) {
	self.ptr.API.RigidBody3D_set_use_custom_integrator(self, enable)
}
func (self classRigidBody3D) IsUsingCustomIntegrator() bool {
	return self.ptr.API.RigidBody3D_is_using_custom_integrator(self)
}
func (self classRigidBody3D) SetContactMonitor(enabled bool) {
	self.ptr.API.RigidBody3D_set_contact_monitor(self, enabled)
}
func (self classRigidBody3D) IsContactMonitorEnabled() bool {
	return self.ptr.API.RigidBody3D_is_contact_monitor_enabled(self)
}
func (self classRigidBody3D) SetUseContinuousCollisionDetection(enable bool) {
	self.ptr.API.RigidBody3D_set_use_continuous_collision_detection(self, enable)
}
func (self classRigidBody3D) IsUsingContinuousCollisionDetection() bool {
	return self.ptr.API.RigidBody3D_is_using_continuous_collision_detection(self)
}
func (self classRigidBody3D) SetAxisVelocity(axis_velocity Vector3) {
	self.ptr.API.RigidBody3D_set_axis_velocity(self, axis_velocity)
}
func (self classRigidBody3D) ApplyCentralImpulse(impulse Vector3) {
	self.ptr.API.RigidBody3D_apply_central_impulse(self, impulse)
}
func (self classRigidBody3D) ApplyImpulse(impulse Vector3, position Vector3) {
	self.ptr.API.RigidBody3D_apply_impulse(self, impulse, position)
}
func (self classRigidBody3D) ApplyTorqueImpulse(impulse Vector3) {
	self.ptr.API.RigidBody3D_apply_torque_impulse(self, impulse)
}
func (self classRigidBody3D) ApplyCentralForce(force Vector3) {
	self.ptr.API.RigidBody3D_apply_central_force(self, force)
}
func (self classRigidBody3D) ApplyForce(force Vector3, position Vector3) {
	self.ptr.API.RigidBody3D_apply_force(self, force, position)
}
func (self classRigidBody3D) ApplyTorque(torque Vector3) {
	self.ptr.API.RigidBody3D_apply_torque(self, torque)
}
func (self classRigidBody3D) AddConstantCentralForce(force Vector3) {
	self.ptr.API.RigidBody3D_add_constant_central_force(self, force)
}
func (self classRigidBody3D) AddConstantForce(force Vector3, position Vector3) {
	self.ptr.API.RigidBody3D_add_constant_force(self, force, position)
}
func (self classRigidBody3D) AddConstantTorque(torque Vector3) {
	self.ptr.API.RigidBody3D_add_constant_torque(self, torque)
}
func (self classRigidBody3D) SetConstantForce(force Vector3) {
	self.ptr.API.RigidBody3D_set_constant_force(self, force)
}
func (self classRigidBody3D) GetConstantForce() Vector3 {
	return self.ptr.API.RigidBody3D_get_constant_force(self)
}
func (self classRigidBody3D) SetConstantTorque(torque Vector3) {
	self.ptr.API.RigidBody3D_set_constant_torque(self, torque)
}
func (self classRigidBody3D) GetConstantTorque() Vector3 {
	return self.ptr.API.RigidBody3D_get_constant_torque(self)
}
func (self classRigidBody3D) SetSleeping(sleeping bool) {
	self.ptr.API.RigidBody3D_set_sleeping(self, sleeping)
}
func (self classRigidBody3D) IsSleeping() bool {
	return self.ptr.API.RigidBody3D_is_sleeping(self)
}
func (self classRigidBody3D) SetCanSleep(able_to_sleep bool) {
	self.ptr.API.RigidBody3D_set_can_sleep(self, able_to_sleep)
}
func (self classRigidBody3D) IsAbleToSleep() bool {
	return self.ptr.API.RigidBody3D_is_able_to_sleep(self)
}
func (self classRigidBody3D) SetLockRotationEnabled(lock_rotation bool) {
	self.ptr.API.RigidBody3D_set_lock_rotation_enabled(self, lock_rotation)
}
func (self classRigidBody3D) IsLockRotationEnabled() bool {
	return self.ptr.API.RigidBody3D_is_lock_rotation_enabled(self)
}
func (self classRigidBody3D) SetFreezeEnabled(freeze_mode bool) {
	self.ptr.API.RigidBody3D_set_freeze_enabled(self, freeze_mode)
}
func (self classRigidBody3D) IsFreezeEnabled() bool {
	return self.ptr.API.RigidBody3D_is_freeze_enabled(self)
}
func (self classRigidBody3D) SetFreezeMode(freeze_mode RigidBody3DFreezeMode) {
	self.ptr.API.RigidBody3D_set_freeze_mode(self, freeze_mode)
}
func (self classRigidBody3D) GetFreezeMode() RigidBody3DFreezeMode {
	return self.ptr.API.RigidBody3D_get_freeze_mode(self)
}
func (self classRigidBody3D) GetCollidingBodies() ArrayOf[Node3D] {
	return self.ptr.API.RigidBody3D_get_colliding_bodies(self)
}

type classRootMotionView struct{ Class[classRootMotionView] }

func (self classRootMotionView) Super() VisualInstance3D {
	var super VisualInstance3D
	super.ptr = self.ptr
	return super
}

func (self classRootMotionView) VisualInstance3D() VisualInstance3D { return self.Super() }
func (self classRootMotionView) SetAnimationPath(path NodePath) {
	self.ptr.API.RootMotionView_set_animation_path(self, path)
}
func (self classRootMotionView) GetAnimationPath() NodePath {
	return self.ptr.API.RootMotionView_get_animation_path(self)
}
func (self classRootMotionView) SetColor(color Color) {
	self.ptr.API.RootMotionView_set_color(self, color)
}
func (self classRootMotionView) GetColor() Color {
	return self.ptr.API.RootMotionView_get_color(self)
}
func (self classRootMotionView) SetCellSize(size Float) {
	self.ptr.API.RootMotionView_set_cell_size(self, size)
}
func (self classRootMotionView) GetCellSize() Float {
	return self.ptr.API.RootMotionView_get_cell_size(self)
}
func (self classRootMotionView) SetRadius(size Float) {
	self.ptr.API.RootMotionView_set_radius(self, size)
}
func (self classRootMotionView) GetRadius() Float {
	return self.ptr.API.RootMotionView_get_radius(self)
}
func (self classRootMotionView) SetZeroY(enable bool) {
	self.ptr.API.RootMotionView_set_zero_y(self, enable)
}
func (self classRootMotionView) GetZeroY() bool {
	return self.ptr.API.RootMotionView_get_zero_y(self)
}

type classSceneMultiplayer struct{ Class[classSceneMultiplayer] }

func (self classSceneMultiplayer) Super() MultiplayerAPI {
	var super MultiplayerAPI
	super.ptr = self.ptr
	return super
}

func (self classSceneMultiplayer) MultiplayerAPI() MultiplayerAPI { return self.Super() }
func (self classSceneMultiplayer) SetRootPath(path NodePath) {
	self.ptr.API.SceneMultiplayer_set_root_path(self, path)
}
func (self classSceneMultiplayer) GetRootPath() NodePath {
	return self.ptr.API.SceneMultiplayer_get_root_path(self)
}
func (self classSceneMultiplayer) Clear() {
	self.ptr.API.SceneMultiplayer_clear(self)
}
func (self classSceneMultiplayer) DisconnectPeer(id Int) {
	self.ptr.API.SceneMultiplayer_disconnect_peer(self, id)
}
func (self classSceneMultiplayer) GetAuthenticatingPeers() PackedInt32Array {
	return self.ptr.API.SceneMultiplayer_get_authenticating_peers(self)
}
func (self classSceneMultiplayer) SendAuth(id Int, data PackedByteArray) int64 {
	return self.ptr.API.SceneMultiplayer_send_auth(self, id, data)
}
func (self classSceneMultiplayer) CompleteAuth(id Int) int64 {
	return self.ptr.API.SceneMultiplayer_complete_auth(self, id)
}
func (self classSceneMultiplayer) SetAuthCallback(callback Callable) {
	self.ptr.API.SceneMultiplayer_set_auth_callback(self, callback)
}
func (self classSceneMultiplayer) GetAuthCallback() Callable {
	return self.ptr.API.SceneMultiplayer_get_auth_callback(self)
}
func (self classSceneMultiplayer) SetAuthTimeout(timeout Float) {
	self.ptr.API.SceneMultiplayer_set_auth_timeout(self, timeout)
}
func (self classSceneMultiplayer) GetAuthTimeout() Float {
	return self.ptr.API.SceneMultiplayer_get_auth_timeout(self)
}
func (self classSceneMultiplayer) SetRefuseNewConnections(refuse bool) {
	self.ptr.API.SceneMultiplayer_set_refuse_new_connections(self, refuse)
}
func (self classSceneMultiplayer) IsRefusingNewConnections() bool {
	return self.ptr.API.SceneMultiplayer_is_refusing_new_connections(self)
}
func (self classSceneMultiplayer) SetAllowObjectDecoding(enable bool) {
	self.ptr.API.SceneMultiplayer_set_allow_object_decoding(self, enable)
}
func (self classSceneMultiplayer) IsObjectDecodingAllowed() bool {
	return self.ptr.API.SceneMultiplayer_is_object_decoding_allowed(self)
}
func (self classSceneMultiplayer) SetServerRelayEnabled(enabled bool) {
	self.ptr.API.SceneMultiplayer_set_server_relay_enabled(self, enabled)
}
func (self classSceneMultiplayer) IsServerRelayEnabled() bool {
	return self.ptr.API.SceneMultiplayer_is_server_relay_enabled(self)
}
func (self classSceneMultiplayer) SendBytes(bytes PackedByteArray, id Int, mode MultiplayerPeerTransferMode, channel Int) int64 {
	return self.ptr.API.SceneMultiplayer_send_bytes(self, bytes, id, mode, channel)
}
func (self classSceneMultiplayer) GetMaxSyncPacketSize() Int {
	return self.ptr.API.SceneMultiplayer_get_max_sync_packet_size(self)
}
func (self classSceneMultiplayer) SetMaxSyncPacketSize(size Int) {
	self.ptr.API.SceneMultiplayer_set_max_sync_packet_size(self, size)
}
func (self classSceneMultiplayer) GetMaxDeltaPacketSize() Int {
	return self.ptr.API.SceneMultiplayer_get_max_delta_packet_size(self)
}
func (self classSceneMultiplayer) SetMaxDeltaPacketSize(size Int) {
	self.ptr.API.SceneMultiplayer_set_max_delta_packet_size(self, size)
}

type classSceneReplicationConfig struct {
	Class[classSceneReplicationConfig]
}

func (self classSceneReplicationConfig) Super() Resource {
	var super Resource
	super.ptr = self.ptr
	return super
}

func (self classSceneReplicationConfig) Resource() Resource { return self.Super() }
func (self classSceneReplicationConfig) GetProperties() ArrayOf[NodePath] {
	return self.ptr.API.SceneReplicationConfig_get_properties(self)
}
func (self classSceneReplicationConfig) AddProperty(path NodePath, index Int) {
	self.ptr.API.SceneReplicationConfig_add_property(self, path, index)
}
func (self classSceneReplicationConfig) HasProperty(path NodePath) bool {
	return self.ptr.API.SceneReplicationConfig_has_property(self, path)
}
func (self classSceneReplicationConfig) RemoveProperty(path NodePath) {
	self.ptr.API.SceneReplicationConfig_remove_property(self, path)
}
func (self classSceneReplicationConfig) PropertyGetIndex(path NodePath) Int {
	return self.ptr.API.SceneReplicationConfig_property_get_index(self, path)
}
func (self classSceneReplicationConfig) PropertyGetSpawn(path NodePath) bool {
	return self.ptr.API.SceneReplicationConfig_property_get_spawn(self, path)
}
func (self classSceneReplicationConfig) PropertySetSpawn(path NodePath, enabled bool) {
	self.ptr.API.SceneReplicationConfig_property_set_spawn(self, path, enabled)
}
func (self classSceneReplicationConfig) PropertyGetReplicationMode(path NodePath) SceneReplicationConfigReplicationMode {
	return self.ptr.API.SceneReplicationConfig_property_get_replication_mode(self, path)
}
func (self classSceneReplicationConfig) PropertySetReplicationMode(path NodePath, mode SceneReplicationConfigReplicationMode) {
	self.ptr.API.SceneReplicationConfig_property_set_replication_mode(self, path, mode)
}
func (self classSceneReplicationConfig) PropertyGetSync(path NodePath) bool {
	return self.ptr.API.SceneReplicationConfig_property_get_sync(self, path)
}
func (self classSceneReplicationConfig) PropertySetSync(path NodePath, enabled bool) {
	self.ptr.API.SceneReplicationConfig_property_set_sync(self, path, enabled)
}
func (self classSceneReplicationConfig) PropertyGetWatch(path NodePath) bool {
	return self.ptr.API.SceneReplicationConfig_property_get_watch(self, path)
}
func (self classSceneReplicationConfig) PropertySetWatch(path NodePath, enabled bool) {
	self.ptr.API.SceneReplicationConfig_property_set_watch(self, path, enabled)
}

type classSceneState struct{ Class[classSceneState] }

func (self classSceneState) Super() RefCounted {
	var super RefCounted
	super.ptr = self.ptr
	return super
}

func (self classSceneState) RefCounted() RefCounted { return self.Super() }
func (self classSceneState) GetNodeCount() Int {
	return self.ptr.API.SceneState_get_node_count(self)
}
func (self classSceneState) GetNodeType(idx Int) StringName {
	return self.ptr.API.SceneState_get_node_type(self, idx)
}
func (self classSceneState) GetNodeName(idx Int) StringName {
	return self.ptr.API.SceneState_get_node_name(self, idx)
}
func (self classSceneState) GetNodePath(idx Int, for_parent bool) NodePath {
	return self.ptr.API.SceneState_get_node_path(self, idx, for_parent)
}
func (self classSceneState) GetNodeOwnerPath(idx Int) NodePath {
	return self.ptr.API.SceneState_get_node_owner_path(self, idx)
}
func (self classSceneState) IsNodeInstancePlaceholder(idx Int) bool {
	return self.ptr.API.SceneState_is_node_instance_placeholder(self, idx)
}
func (self classSceneState) GetNodeInstancePlaceholder(idx Int) String {
	return self.ptr.API.SceneState_get_node_instance_placeholder(self, idx)
}
func (self classSceneState) GetNodeInstance(idx Int) PackedScene {
	return self.ptr.API.SceneState_get_node_instance(self, idx)
}
func (self classSceneState) GetNodeGroups(idx Int) PackedStringArray {
	return self.ptr.API.SceneState_get_node_groups(self, idx)
}
func (self classSceneState) GetNodeIndex(idx Int) Int {
	return self.ptr.API.SceneState_get_node_index(self, idx)
}
func (self classSceneState) GetNodePropertyCount(idx Int) Int {
	return self.ptr.API.SceneState_get_node_property_count(self, idx)
}
func (self classSceneState) GetNodePropertyName(idx Int, prop_idx Int) StringName {
	return self.ptr.API.SceneState_get_node_property_name(self, idx, prop_idx)
}
func (self classSceneState) GetNodePropertyValue(idx Int, prop_idx Int) Variant {
	return self.ptr.API.SceneState_get_node_property_value(self, idx, prop_idx)
}
func (self classSceneState) GetConnectionCount() Int {
	return self.ptr.API.SceneState_get_connection_count(self)
}
func (self classSceneState) GetConnectionSource(idx Int) NodePath {
	return self.ptr.API.SceneState_get_connection_source(self, idx)
}
func (self classSceneState) GetConnectionSignal(idx Int) StringName {
	return self.ptr.API.SceneState_get_connection_signal(self, idx)
}
func (self classSceneState) GetConnectionTarget(idx Int) NodePath {
	return self.ptr.API.SceneState_get_connection_target(self, idx)
}
func (self classSceneState) GetConnectionMethod(idx Int) StringName {
	return self.ptr.API.SceneState_get_connection_method(self, idx)
}
func (self classSceneState) GetConnectionFlags(idx Int) Int {
	return self.ptr.API.SceneState_get_connection_flags(self, idx)
}
func (self classSceneState) GetConnectionBinds(idx Int) Array {
	return self.ptr.API.SceneState_get_connection_binds(self, idx)
}
func (self classSceneState) GetConnectionUnbinds(idx Int) Int {
	return self.ptr.API.SceneState_get_connection_unbinds(self, idx)
}

type classSceneTree struct{ Class[classSceneTree] }

func (self classSceneTree) Super() MainLoop { var super MainLoop; super.ptr = self.ptr; return super }

func (self classSceneTree) MainLoop() MainLoop { return self.Super() }
func (self classSceneTree) GetRoot() Window {
	return self.ptr.API.SceneTree_get_root(self)
}
func (self classSceneTree) HasGroup(name StringName) bool {
	return self.ptr.API.SceneTree_has_group(self, name)
}
func (self classSceneTree) IsAutoAcceptQuit() bool {
	return self.ptr.API.SceneTree_is_auto_accept_quit(self)
}
func (self classSceneTree) SetAutoAcceptQuit(enabled bool) {
	self.ptr.API.SceneTree_set_auto_accept_quit(self, enabled)
}
func (self classSceneTree) IsQuitOnGoBack() bool {
	return self.ptr.API.SceneTree_is_quit_on_go_back(self)
}
func (self classSceneTree) SetQuitOnGoBack(enabled bool) {
	self.ptr.API.SceneTree_set_quit_on_go_back(self, enabled)
}
func (self classSceneTree) SetDebugCollisionsHint(enable bool) {
	self.ptr.API.SceneTree_set_debug_collisions_hint(self, enable)
}
func (self classSceneTree) IsDebuggingCollisionsHint() bool {
	return self.ptr.API.SceneTree_is_debugging_collisions_hint(self)
}
func (self classSceneTree) SetDebugPathsHint(enable bool) {
	self.ptr.API.SceneTree_set_debug_paths_hint(self, enable)
}
func (self classSceneTree) IsDebuggingPathsHint() bool {
	return self.ptr.API.SceneTree_is_debugging_paths_hint(self)
}
func (self classSceneTree) SetDebugNavigationHint(enable bool) {
	self.ptr.API.SceneTree_set_debug_navigation_hint(self, enable)
}
func (self classSceneTree) IsDebuggingNavigationHint() bool {
	return self.ptr.API.SceneTree_is_debugging_navigation_hint(self)
}
func (self classSceneTree) SetEditedSceneRoot(scene Node) {
	self.ptr.API.SceneTree_set_edited_scene_root(self, scene)
}
func (self classSceneTree) GetEditedSceneRoot() Node {
	return self.ptr.API.SceneTree_get_edited_scene_root(self)
}
func (self classSceneTree) SetPause(enable bool) {
	self.ptr.API.SceneTree_set_pause(self, enable)
}
func (self classSceneTree) IsPaused() bool {
	return self.ptr.API.SceneTree_is_paused(self)
}
func (self classSceneTree) CreateTimer(time_sec Float, process_always bool, process_in_physics bool, ignore_time_scale bool) SceneTreeTimer {
	return self.ptr.API.SceneTree_create_timer(self, time_sec, process_always, process_in_physics, ignore_time_scale)
}
func (self classSceneTree) CreateTween() Tween {
	return self.ptr.API.SceneTree_create_tween(self)
}
func (self classSceneTree) GetProcessedTweens() ArrayOf[Tween] {
	return self.ptr.API.SceneTree_get_processed_tweens(self)
}
func (self classSceneTree) GetNodeCount() Int {
	return self.ptr.API.SceneTree_get_node_count(self)
}
func (self classSceneTree) GetFrame() Int {
	return self.ptr.API.SceneTree_get_frame(self)
}
func (self classSceneTree) Quit(exit_code Int) {
	self.ptr.API.SceneTree_quit(self, exit_code)
}
func (self classSceneTree) QueueDelete(obj Object) {
	self.ptr.API.SceneTree_queue_delete(self, obj)
}
func (self classSceneTree) CallGroupFlags(flags Int, group StringName, method StringName) {
	self.ptr.API.SceneTree_call_group_flags(self, flags, group, method)
}
func (self classSceneTree) NotifyGroupFlags(call_flags Int, group StringName, notification Int) {
	self.ptr.API.SceneTree_notify_group_flags(self, call_flags, group, notification)
}
func (self classSceneTree) SetGroupFlags(call_flags Int, group StringName, property String, value Variant) {
	self.ptr.API.SceneTree_set_group_flags(self, call_flags, group, property, value)
}
func (self classSceneTree) CallGroup(group StringName, method StringName) {
	self.ptr.API.SceneTree_call_group(self, group, method)
}
func (self classSceneTree) NotifyGroup(group StringName, notification Int) {
	self.ptr.API.SceneTree_notify_group(self, group, notification)
}
func (self classSceneTree) SetGroup(group StringName, property String, value Variant) {
	self.ptr.API.SceneTree_set_group(self, group, property, value)
}
func (self classSceneTree) GetNodesInGroup(group StringName) ArrayOf[Node] {
	return self.ptr.API.SceneTree_get_nodes_in_group(self, group)
}
func (self classSceneTree) GetFirstNodeInGroup(group StringName) Node {
	return self.ptr.API.SceneTree_get_first_node_in_group(self, group)
}
func (self classSceneTree) GetNodeCountInGroup(group StringName) Int {
	return self.ptr.API.SceneTree_get_node_count_in_group(self, group)
}
func (self classSceneTree) SetCurrentScene(child_node Node) {
	self.ptr.API.SceneTree_set_current_scene(self, child_node)
}
func (self classSceneTree) GetCurrentScene() Node {
	return self.ptr.API.SceneTree_get_current_scene(self)
}
func (self classSceneTree) ChangeSceneToFile(path String) int64 {
	return self.ptr.API.SceneTree_change_scene_to_file(self, path)
}
func (self classSceneTree) ChangeSceneToPacked(packed_scene PackedScene) int64 {
	return self.ptr.API.SceneTree_change_scene_to_packed(self, packed_scene)
}
func (self classSceneTree) ReloadCurrentScene() int64 {
	return self.ptr.API.SceneTree_reload_current_scene(self)
}
func (self classSceneTree) UnloadCurrentScene() {
	self.ptr.API.SceneTree_unload_current_scene(self)
}
func (self classSceneTree) SetMultiplayer(multiplayer MultiplayerAPI, root_path NodePath) {
	self.ptr.API.SceneTree_set_multiplayer(self, multiplayer, root_path)
}
func (self classSceneTree) GetMultiplayer(for_path NodePath) MultiplayerAPI {
	return self.ptr.API.SceneTree_get_multiplayer(self, for_path)
}
func (self classSceneTree) SetMultiplayerPollEnabled(enabled bool) {
	self.ptr.API.SceneTree_set_multiplayer_poll_enabled(self, enabled)
}
func (self classSceneTree) IsMultiplayerPollEnabled() bool {
	return self.ptr.API.SceneTree_is_multiplayer_poll_enabled(self)
}

type classSceneTreeTimer struct{ Class[classSceneTreeTimer] }

func (self classSceneTreeTimer) Super() RefCounted {
	var super RefCounted
	super.ptr = self.ptr
	return super
}

func (self classSceneTreeTimer) RefCounted() RefCounted { return self.Super() }
func (self classSceneTreeTimer) SetTimeLeft(time Float) {
	self.ptr.API.SceneTreeTimer_set_time_left(self, time)
}
func (self classSceneTreeTimer) GetTimeLeft() Float {
	return self.ptr.API.SceneTreeTimer_get_time_left(self)
}

type classScript struct{ Class[classScript] }

func (self classScript) Super() Resource { var super Resource; super.ptr = self.ptr; return super }

func (self classScript) Resource() Resource { return self.Super() }
func (self classScript) CanInstantiate() bool {
	return self.ptr.API.Script_can_instantiate(self)
}
func (self classScript) InstanceHas(base_object Object) bool {
	return self.ptr.API.Script_instance_has(self, base_object)
}
func (self classScript) HasSourceCode() bool {
	return self.ptr.API.Script_has_source_code(self)
}
func (self classScript) GetSourceCode() String {
	return self.ptr.API.Script_get_source_code(self)
}
func (self classScript) SetSourceCode(source String) {
	self.ptr.API.Script_set_source_code(self, source)
}
func (self classScript) Reload(keep_state bool) int64 {
	return self.ptr.API.Script_reload(self, keep_state)
}
func (self classScript) GetBaseScript() Script {
	return self.ptr.API.Script_get_base_script(self)
}
func (self classScript) GetInstanceBaseType() StringName {
	return self.ptr.API.Script_get_instance_base_type(self)
}
func (self classScript) GetGlobalName() StringName {
	return self.ptr.API.Script_get_global_name(self)
}
func (self classScript) HasScriptSignal(signal_name StringName) bool {
	return self.ptr.API.Script_has_script_signal(self, signal_name)
}
func (self classScript) GetScriptPropertyList() ArrayOf[Dictionary] {
	return self.ptr.API.Script_get_script_property_list(self)
}
func (self classScript) GetScriptMethodList() ArrayOf[Dictionary] {
	return self.ptr.API.Script_get_script_method_list(self)
}
func (self classScript) GetScriptSignalList() ArrayOf[Dictionary] {
	return self.ptr.API.Script_get_script_signal_list(self)
}
func (self classScript) GetScriptConstantMap() Dictionary {
	return self.ptr.API.Script_get_script_constant_map(self)
}
func (self classScript) GetPropertyDefaultValue(property StringName) Variant {
	return self.ptr.API.Script_get_property_default_value(self, property)
}
func (self classScript) IsTool() bool {
	return self.ptr.API.Script_is_tool(self)
}
func (self classScript) IsAbstract() bool {
	return self.ptr.API.Script_is_abstract(self)
}

type classScriptCreateDialog struct{ Class[classScriptCreateDialog] }

func (self classScriptCreateDialog) Super() ConfirmationDialog {
	var super ConfirmationDialog
	super.ptr = self.ptr
	return super
}

func (self classScriptCreateDialog) ConfirmationDialog() ConfirmationDialog { return self.Super() }
func (self classScriptCreateDialog) Config(inherits String, path String, built_in_enabled bool, load_enabled bool) {
	self.ptr.API.ScriptCreateDialog_config(self, inherits, path, built_in_enabled, load_enabled)
}

type classScriptEditor struct{ Class[classScriptEditor] }

func (self classScriptEditor) Super() PanelContainer {
	var super PanelContainer
	super.ptr = self.ptr
	return super
}

func (self classScriptEditor) PanelContainer() PanelContainer { return self.Super() }
func (self classScriptEditor) GetCurrentEditor() ScriptEditorBase {
	return self.ptr.API.ScriptEditor_get_current_editor(self)
}
func (self classScriptEditor) GetOpenScriptEditors() ArrayOf[ScriptEditorBase] {
	return self.ptr.API.ScriptEditor_get_open_script_editors(self)
}
func (self classScriptEditor) RegisterSyntaxHighlighter(syntax_highlighter EditorSyntaxHighlighter) {
	self.ptr.API.ScriptEditor_register_syntax_highlighter(self, syntax_highlighter)
}
func (self classScriptEditor) UnregisterSyntaxHighlighter(syntax_highlighter EditorSyntaxHighlighter) {
	self.ptr.API.ScriptEditor_unregister_syntax_highlighter(self, syntax_highlighter)
}
func (self classScriptEditor) GotoLine(line_number Int) {
	self.ptr.API.ScriptEditor_goto_line(self, line_number)
}
func (self classScriptEditor) GetCurrentScript() Script {
	return self.ptr.API.ScriptEditor_get_current_script(self)
}
func (self classScriptEditor) GetOpenScripts() ArrayOf[Script] {
	return self.ptr.API.ScriptEditor_get_open_scripts(self)
}
func (self classScriptEditor) OpenScriptCreateDialog(base_name String, base_path String) {
	self.ptr.API.ScriptEditor_open_script_create_dialog(self, base_name, base_path)
}

type classScriptEditorBase struct{ Class[classScriptEditorBase] }

func (self classScriptEditorBase) Super() VBoxContainer {
	var super VBoxContainer
	super.ptr = self.ptr
	return super
}

func (self classScriptEditorBase) VBoxContainer() VBoxContainer { return self.Super() }
func (self classScriptEditorBase) GetBaseEditor() Control {
	return self.ptr.API.ScriptEditorBase_get_base_editor(self)
}
func (self classScriptEditorBase) AddSyntaxHighlighter(highlighter EditorSyntaxHighlighter) {
	self.ptr.API.ScriptEditorBase_add_syntax_highlighter(self, highlighter)
}

type classScriptExtension struct{ Class[classScriptExtension] }

func (self classScriptExtension) Super() Script { var super Script; super.ptr = self.ptr; return super }

func (self classScriptExtension) Script() Script { return self.Super() }

type classScriptLanguage struct{ Class[classScriptLanguage] }

func (self classScriptLanguage) Super() Object { var super Object; super.ptr = self.ptr; return super }

func (self classScriptLanguage) Object() Object { return self.Super() }

type classScriptLanguageExtension struct {
	Class[classScriptLanguageExtension]
}

func (self classScriptLanguageExtension) Super() ScriptLanguage {
	var super ScriptLanguage
	super.ptr = self.ptr
	return super
}

func (self classScriptLanguageExtension) ScriptLanguage() ScriptLanguage { return self.Super() }

type classScrollBar struct{ Class[classScrollBar] }

func (self classScrollBar) Super() Range { var super Range; super.ptr = self.ptr; return super }

func (self classScrollBar) Range() Range { return self.Super() }
func (self classScrollBar) SetCustomStep(step Float) {
	self.ptr.API.ScrollBar_set_custom_step(self, step)
}
func (self classScrollBar) GetCustomStep() Float {
	return self.ptr.API.ScrollBar_get_custom_step(self)
}

type classScrollContainer struct{ Class[classScrollContainer] }

func (self classScrollContainer) Super() Container {
	var super Container
	super.ptr = self.ptr
	return super
}

func (self classScrollContainer) Container() Container { return self.Super() }
func (self classScrollContainer) SetHScroll(value Int) {
	self.ptr.API.ScrollContainer_set_h_scroll(self, value)
}
func (self classScrollContainer) GetHScroll() Int {
	return self.ptr.API.ScrollContainer_get_h_scroll(self)
}
func (self classScrollContainer) SetVScroll(value Int) {
	self.ptr.API.ScrollContainer_set_v_scroll(self, value)
}
func (self classScrollContainer) GetVScroll() Int {
	return self.ptr.API.ScrollContainer_get_v_scroll(self)
}
func (self classScrollContainer) SetHorizontalCustomStep(value Float) {
	self.ptr.API.ScrollContainer_set_horizontal_custom_step(self, value)
}
func (self classScrollContainer) GetHorizontalCustomStep() Float {
	return self.ptr.API.ScrollContainer_get_horizontal_custom_step(self)
}
func (self classScrollContainer) SetVerticalCustomStep(value Float) {
	self.ptr.API.ScrollContainer_set_vertical_custom_step(self, value)
}
func (self classScrollContainer) GetVerticalCustomStep() Float {
	return self.ptr.API.ScrollContainer_get_vertical_custom_step(self)
}
func (self classScrollContainer) SetHorizontalScrollMode(enable ScrollContainerScrollMode) {
	self.ptr.API.ScrollContainer_set_horizontal_scroll_mode(self, enable)
}
func (self classScrollContainer) GetHorizontalScrollMode() ScrollContainerScrollMode {
	return self.ptr.API.ScrollContainer_get_horizontal_scroll_mode(self)
}
func (self classScrollContainer) SetVerticalScrollMode(enable ScrollContainerScrollMode) {
	self.ptr.API.ScrollContainer_set_vertical_scroll_mode(self, enable)
}
func (self classScrollContainer) GetVerticalScrollMode() ScrollContainerScrollMode {
	return self.ptr.API.ScrollContainer_get_vertical_scroll_mode(self)
}
func (self classScrollContainer) SetDeadzone(deadzone Int) {
	self.ptr.API.ScrollContainer_set_deadzone(self, deadzone)
}
func (self classScrollContainer) GetDeadzone() Int {
	return self.ptr.API.ScrollContainer_get_deadzone(self)
}
func (self classScrollContainer) SetFollowFocus(enabled bool) {
	self.ptr.API.ScrollContainer_set_follow_focus(self, enabled)
}
func (self classScrollContainer) IsFollowingFocus() bool {
	return self.ptr.API.ScrollContainer_is_following_focus(self)
}
func (self classScrollContainer) GetHScrollBar() HScrollBar {
	return self.ptr.API.ScrollContainer_get_h_scroll_bar(self)
}
func (self classScrollContainer) GetVScrollBar() VScrollBar {
	return self.ptr.API.ScrollContainer_get_v_scroll_bar(self)
}
func (self classScrollContainer) EnsureControlVisible(control Control) {
	self.ptr.API.ScrollContainer_ensure_control_visible(self, control)
}

type classSegmentShape2D struct{ Class[classSegmentShape2D] }

func (self classSegmentShape2D) Super() Shape2D {
	var super Shape2D
	super.ptr = self.ptr
	return super
}

func (self classSegmentShape2D) Shape2D() Shape2D { return self.Super() }
func (self classSegmentShape2D) SetA(a Vector2) {
	self.ptr.API.SegmentShape2D_set_a(self, a)
}
func (self classSegmentShape2D) GetA() Vector2 {
	return self.ptr.API.SegmentShape2D_get_a(self)
}
func (self classSegmentShape2D) SetB(b Vector2) {
	self.ptr.API.SegmentShape2D_set_b(self, b)
}
func (self classSegmentShape2D) GetB() Vector2 {
	return self.ptr.API.SegmentShape2D_get_b(self)
}

type classSemaphore struct{ Class[classSemaphore] }

func (self classSemaphore) Super() RefCounted {
	var super RefCounted
	super.ptr = self.ptr
	return super
}

func (self classSemaphore) RefCounted() RefCounted { return self.Super() }
func (self classSemaphore) Wait() {
	self.ptr.API.Semaphore_wait(self)
}
func (self classSemaphore) TryWait() bool {
	return self.ptr.API.Semaphore_try_wait(self)
}
func (self classSemaphore) Post() {
	self.ptr.API.Semaphore_post(self)
}

type classSeparationRayShape2D struct {
	Class[classSeparationRayShape2D]
}

func (self classSeparationRayShape2D) Super() Shape2D {
	var super Shape2D
	super.ptr = self.ptr
	return super
}

func (self classSeparationRayShape2D) Shape2D() Shape2D { return self.Super() }
func (self classSeparationRayShape2D) SetLength(length Float) {
	self.ptr.API.SeparationRayShape2D_set_length(self, length)
}
func (self classSeparationRayShape2D) GetLength() Float {
	return self.ptr.API.SeparationRayShape2D_get_length(self)
}
func (self classSeparationRayShape2D) SetSlideOnSlope(active bool) {
	self.ptr.API.SeparationRayShape2D_set_slide_on_slope(self, active)
}
func (self classSeparationRayShape2D) GetSlideOnSlope() bool {
	return self.ptr.API.SeparationRayShape2D_get_slide_on_slope(self)
}

type classSeparationRayShape3D struct {
	Class[classSeparationRayShape3D]
}

func (self classSeparationRayShape3D) Super() Shape3D {
	var super Shape3D
	super.ptr = self.ptr
	return super
}

func (self classSeparationRayShape3D) Shape3D() Shape3D { return self.Super() }
func (self classSeparationRayShape3D) SetLength(length Float) {
	self.ptr.API.SeparationRayShape3D_set_length(self, length)
}
func (self classSeparationRayShape3D) GetLength() Float {
	return self.ptr.API.SeparationRayShape3D_get_length(self)
}
func (self classSeparationRayShape3D) SetSlideOnSlope(active bool) {
	self.ptr.API.SeparationRayShape3D_set_slide_on_slope(self, active)
}
func (self classSeparationRayShape3D) GetSlideOnSlope() bool {
	return self.ptr.API.SeparationRayShape3D_get_slide_on_slope(self)
}

type classSeparator struct{ Class[classSeparator] }

func (self classSeparator) Super() Control { var super Control; super.ptr = self.ptr; return super }

func (self classSeparator) Control() Control { return self.Super() }

type classShader struct{ Class[classShader] }

func (self classShader) Super() Resource { var super Resource; super.ptr = self.ptr; return super }

func (self classShader) Resource() Resource { return self.Super() }
func (self classShader) GetMode() ShaderMode {
	return self.ptr.API.Shader_get_mode(self)
}
func (self classShader) SetCode(code String) {
	self.ptr.API.Shader_set_code(self, code)
}
func (self classShader) GetCode() String {
	return self.ptr.API.Shader_get_code(self)
}
func (self classShader) SetDefaultTextureParameter(name StringName, texture Texture2D, index Int) {
	self.ptr.API.Shader_set_default_texture_parameter(self, name, texture, index)
}
func (self classShader) GetDefaultTextureParameter(name StringName, index Int) Texture2D {
	return self.ptr.API.Shader_get_default_texture_parameter(self, name, index)
}
func (self classShader) GetShaderUniformList(get_groups bool) Array {
	return self.ptr.API.Shader_get_shader_uniform_list(self, get_groups)
}

type classShaderGlobalsOverride struct {
	Class[classShaderGlobalsOverride]
}

func (self classShaderGlobalsOverride) Super() Node {
	var super Node
	super.ptr = self.ptr
	return super
}

func (self classShaderGlobalsOverride) Node() Node { return self.Super() }

type classShaderInclude struct{ Class[classShaderInclude] }

func (self classShaderInclude) Super() Resource {
	var super Resource
	super.ptr = self.ptr
	return super
}

func (self classShaderInclude) Resource() Resource { return self.Super() }
func (self classShaderInclude) SetCode(code String) {
	self.ptr.API.ShaderInclude_set_code(self, code)
}
func (self classShaderInclude) GetCode() String {
	return self.ptr.API.ShaderInclude_get_code(self)
}

type classShaderMaterial struct{ Class[classShaderMaterial] }

func (self classShaderMaterial) Super() Material {
	var super Material
	super.ptr = self.ptr
	return super
}

func (self classShaderMaterial) Material() Material { return self.Super() }
func (self classShaderMaterial) SetShader(shader Shader) {
	self.ptr.API.ShaderMaterial_set_shader(self, shader)
}
func (self classShaderMaterial) GetShader() Shader {
	return self.ptr.API.ShaderMaterial_get_shader(self)
}
func (self classShaderMaterial) SetShaderParameter(param StringName, value Variant) {
	self.ptr.API.ShaderMaterial_set_shader_parameter(self, param, value)
}
func (self classShaderMaterial) GetShaderParameter(param StringName) Variant {
	return self.ptr.API.ShaderMaterial_get_shader_parameter(self, param)
}

type classShape2D struct{ Class[classShape2D] }

func (self classShape2D) Super() Resource { var super Resource; super.ptr = self.ptr; return super }

func (self classShape2D) Resource() Resource { return self.Super() }
func (self classShape2D) SetCustomSolverBias(bias Float) {
	self.ptr.API.Shape2D_set_custom_solver_bias(self, bias)
}
func (self classShape2D) GetCustomSolverBias() Float {
	return self.ptr.API.Shape2D_get_custom_solver_bias(self)
}
func (self classShape2D) Collide(local_xform Transform2D, with_shape Shape2D, shape_xform Transform2D) bool {
	return self.ptr.API.Shape2D_collide(self, local_xform, with_shape, shape_xform)
}
func (self classShape2D) CollideWithMotion(local_xform Transform2D, local_motion Vector2, with_shape Shape2D, shape_xform Transform2D, shape_motion Vector2) bool {
	return self.ptr.API.Shape2D_collide_with_motion(self, local_xform, local_motion, with_shape, shape_xform, shape_motion)
}
func (self classShape2D) CollideAndGetContacts(local_xform Transform2D, with_shape Shape2D, shape_xform Transform2D) PackedVector2Array {
	return self.ptr.API.Shape2D_collide_and_get_contacts(self, local_xform, with_shape, shape_xform)
}
func (self classShape2D) CollideWithMotionAndGetContacts(local_xform Transform2D, local_motion Vector2, with_shape Shape2D, shape_xform Transform2D, shape_motion Vector2) PackedVector2Array {
	return self.ptr.API.Shape2D_collide_with_motion_and_get_contacts(self, local_xform, local_motion, with_shape, shape_xform, shape_motion)
}
func (self classShape2D) Draw(canvas_item RID, color Color) {
	self.ptr.API.Shape2D_draw(self, canvas_item, color)
}
func (self classShape2D) GetRect() Rect2 {
	return self.ptr.API.Shape2D_get_rect(self)
}

type classShape3D struct{ Class[classShape3D] }

func (self classShape3D) Super() Resource { var super Resource; super.ptr = self.ptr; return super }

func (self classShape3D) Resource() Resource { return self.Super() }
func (self classShape3D) SetCustomSolverBias(bias Float) {
	self.ptr.API.Shape3D_set_custom_solver_bias(self, bias)
}
func (self classShape3D) GetCustomSolverBias() Float {
	return self.ptr.API.Shape3D_get_custom_solver_bias(self)
}
func (self classShape3D) SetMargin(margin Float) {
	self.ptr.API.Shape3D_set_margin(self, margin)
}
func (self classShape3D) GetMargin() Float {
	return self.ptr.API.Shape3D_get_margin(self)
}
func (self classShape3D) GetDebugMesh() ArrayMesh {
	return self.ptr.API.Shape3D_get_debug_mesh(self)
}

type classShapeCast2D struct{ Class[classShapeCast2D] }

func (self classShapeCast2D) Super() Node2D { var super Node2D; super.ptr = self.ptr; return super }

func (self classShapeCast2D) Node2D() Node2D { return self.Super() }
func (self classShapeCast2D) SetEnabled(enabled bool) {
	self.ptr.API.ShapeCast2D_set_enabled(self, enabled)
}
func (self classShapeCast2D) IsEnabled() bool {
	return self.ptr.API.ShapeCast2D_is_enabled(self)
}
func (self classShapeCast2D) SetShape(shape Shape2D) {
	self.ptr.API.ShapeCast2D_set_shape(self, shape)
}
func (self classShapeCast2D) GetShape() Shape2D {
	return self.ptr.API.ShapeCast2D_get_shape(self)
}
func (self classShapeCast2D) SetTargetPosition(local_point Vector2) {
	self.ptr.API.ShapeCast2D_set_target_position(self, local_point)
}
func (self classShapeCast2D) GetTargetPosition() Vector2 {
	return self.ptr.API.ShapeCast2D_get_target_position(self)
}
func (self classShapeCast2D) SetMargin(margin Float) {
	self.ptr.API.ShapeCast2D_set_margin(self, margin)
}
func (self classShapeCast2D) GetMargin() Float {
	return self.ptr.API.ShapeCast2D_get_margin(self)
}
func (self classShapeCast2D) SetMaxResults(max_results Int) {
	self.ptr.API.ShapeCast2D_set_max_results(self, max_results)
}
func (self classShapeCast2D) GetMaxResults() Int {
	return self.ptr.API.ShapeCast2D_get_max_results(self)
}
func (self classShapeCast2D) IsColliding() bool {
	return self.ptr.API.ShapeCast2D_is_colliding(self)
}
func (self classShapeCast2D) GetCollisionCount() Int {
	return self.ptr.API.ShapeCast2D_get_collision_count(self)
}
func (self classShapeCast2D) ForceShapecastUpdate() {
	self.ptr.API.ShapeCast2D_force_shapecast_update(self)
}
func (self classShapeCast2D) GetCollider(index Int) Object {
	return self.ptr.API.ShapeCast2D_get_collider(self, index)
}
func (self classShapeCast2D) GetColliderRid(index Int) RID {
	return self.ptr.API.ShapeCast2D_get_collider_rid(self, index)
}
func (self classShapeCast2D) GetColliderShape(index Int) Int {
	return self.ptr.API.ShapeCast2D_get_collider_shape(self, index)
}
func (self classShapeCast2D) GetCollisionPoint(index Int) Vector2 {
	return self.ptr.API.ShapeCast2D_get_collision_point(self, index)
}
func (self classShapeCast2D) GetCollisionNormal(index Int) Vector2 {
	return self.ptr.API.ShapeCast2D_get_collision_normal(self, index)
}
func (self classShapeCast2D) GetClosestCollisionSafeFraction() Float {
	return self.ptr.API.ShapeCast2D_get_closest_collision_safe_fraction(self)
}
func (self classShapeCast2D) GetClosestCollisionUnsafeFraction() Float {
	return self.ptr.API.ShapeCast2D_get_closest_collision_unsafe_fraction(self)
}
func (self classShapeCast2D) AddExceptionRid(rid RID) {
	self.ptr.API.ShapeCast2D_add_exception_rid(self, rid)
}
func (self classShapeCast2D) AddException(node CollisionObject2D) {
	self.ptr.API.ShapeCast2D_add_exception(self, node)
}
func (self classShapeCast2D) RemoveExceptionRid(rid RID) {
	self.ptr.API.ShapeCast2D_remove_exception_rid(self, rid)
}
func (self classShapeCast2D) RemoveException(node CollisionObject2D) {
	self.ptr.API.ShapeCast2D_remove_exception(self, node)
}
func (self classShapeCast2D) ClearExceptions() {
	self.ptr.API.ShapeCast2D_clear_exceptions(self)
}
func (self classShapeCast2D) SetCollisionMask(mask Int) {
	self.ptr.API.ShapeCast2D_set_collision_mask(self, mask)
}
func (self classShapeCast2D) GetCollisionMask() Int {
	return self.ptr.API.ShapeCast2D_get_collision_mask(self)
}
func (self classShapeCast2D) SetCollisionMaskValue(layer_number Int, value bool) {
	self.ptr.API.ShapeCast2D_set_collision_mask_value(self, layer_number, value)
}
func (self classShapeCast2D) GetCollisionMaskValue(layer_number Int) bool {
	return self.ptr.API.ShapeCast2D_get_collision_mask_value(self, layer_number)
}
func (self classShapeCast2D) SetExcludeParentBody(mask bool) {
	self.ptr.API.ShapeCast2D_set_exclude_parent_body(self, mask)
}
func (self classShapeCast2D) GetExcludeParentBody() bool {
	return self.ptr.API.ShapeCast2D_get_exclude_parent_body(self)
}
func (self classShapeCast2D) SetCollideWithAreas(enable bool) {
	self.ptr.API.ShapeCast2D_set_collide_with_areas(self, enable)
}
func (self classShapeCast2D) IsCollideWithAreasEnabled() bool {
	return self.ptr.API.ShapeCast2D_is_collide_with_areas_enabled(self)
}
func (self classShapeCast2D) SetCollideWithBodies(enable bool) {
	self.ptr.API.ShapeCast2D_set_collide_with_bodies(self, enable)
}
func (self classShapeCast2D) IsCollideWithBodiesEnabled() bool {
	return self.ptr.API.ShapeCast2D_is_collide_with_bodies_enabled(self)
}

type classShapeCast3D struct{ Class[classShapeCast3D] }

func (self classShapeCast3D) Super() Node3D { var super Node3D; super.ptr = self.ptr; return super }

func (self classShapeCast3D) Node3D() Node3D { return self.Super() }
func (self classShapeCast3D) ResourceChanged(resource Resource) {
	self.ptr.API.ShapeCast3D_resource_changed(self, resource)
}
func (self classShapeCast3D) SetEnabled(enabled bool) {
	self.ptr.API.ShapeCast3D_set_enabled(self, enabled)
}
func (self classShapeCast3D) IsEnabled() bool {
	return self.ptr.API.ShapeCast3D_is_enabled(self)
}
func (self classShapeCast3D) SetShape(shape Shape3D) {
	self.ptr.API.ShapeCast3D_set_shape(self, shape)
}
func (self classShapeCast3D) GetShape() Shape3D {
	return self.ptr.API.ShapeCast3D_get_shape(self)
}
func (self classShapeCast3D) SetTargetPosition(local_point Vector3) {
	self.ptr.API.ShapeCast3D_set_target_position(self, local_point)
}
func (self classShapeCast3D) GetTargetPosition() Vector3 {
	return self.ptr.API.ShapeCast3D_get_target_position(self)
}
func (self classShapeCast3D) SetMargin(margin Float) {
	self.ptr.API.ShapeCast3D_set_margin(self, margin)
}
func (self classShapeCast3D) GetMargin() Float {
	return self.ptr.API.ShapeCast3D_get_margin(self)
}
func (self classShapeCast3D) SetMaxResults(max_results Int) {
	self.ptr.API.ShapeCast3D_set_max_results(self, max_results)
}
func (self classShapeCast3D) GetMaxResults() Int {
	return self.ptr.API.ShapeCast3D_get_max_results(self)
}
func (self classShapeCast3D) IsColliding() bool {
	return self.ptr.API.ShapeCast3D_is_colliding(self)
}
func (self classShapeCast3D) GetCollisionCount() Int {
	return self.ptr.API.ShapeCast3D_get_collision_count(self)
}
func (self classShapeCast3D) ForceShapecastUpdate() {
	self.ptr.API.ShapeCast3D_force_shapecast_update(self)
}
func (self classShapeCast3D) GetCollider(index Int) Object {
	return self.ptr.API.ShapeCast3D_get_collider(self, index)
}
func (self classShapeCast3D) GetColliderRid(index Int) RID {
	return self.ptr.API.ShapeCast3D_get_collider_rid(self, index)
}
func (self classShapeCast3D) GetColliderShape(index Int) Int {
	return self.ptr.API.ShapeCast3D_get_collider_shape(self, index)
}
func (self classShapeCast3D) GetCollisionPoint(index Int) Vector3 {
	return self.ptr.API.ShapeCast3D_get_collision_point(self, index)
}
func (self classShapeCast3D) GetCollisionNormal(index Int) Vector3 {
	return self.ptr.API.ShapeCast3D_get_collision_normal(self, index)
}
func (self classShapeCast3D) GetClosestCollisionSafeFraction() Float {
	return self.ptr.API.ShapeCast3D_get_closest_collision_safe_fraction(self)
}
func (self classShapeCast3D) GetClosestCollisionUnsafeFraction() Float {
	return self.ptr.API.ShapeCast3D_get_closest_collision_unsafe_fraction(self)
}
func (self classShapeCast3D) AddExceptionRid(rid RID) {
	self.ptr.API.ShapeCast3D_add_exception_rid(self, rid)
}
func (self classShapeCast3D) AddException(node CollisionObject3D) {
	self.ptr.API.ShapeCast3D_add_exception(self, node)
}
func (self classShapeCast3D) RemoveExceptionRid(rid RID) {
	self.ptr.API.ShapeCast3D_remove_exception_rid(self, rid)
}
func (self classShapeCast3D) RemoveException(node CollisionObject3D) {
	self.ptr.API.ShapeCast3D_remove_exception(self, node)
}
func (self classShapeCast3D) ClearExceptions() {
	self.ptr.API.ShapeCast3D_clear_exceptions(self)
}
func (self classShapeCast3D) SetCollisionMask(mask Int) {
	self.ptr.API.ShapeCast3D_set_collision_mask(self, mask)
}
func (self classShapeCast3D) GetCollisionMask() Int {
	return self.ptr.API.ShapeCast3D_get_collision_mask(self)
}
func (self classShapeCast3D) SetCollisionMaskValue(layer_number Int, value bool) {
	self.ptr.API.ShapeCast3D_set_collision_mask_value(self, layer_number, value)
}
func (self classShapeCast3D) GetCollisionMaskValue(layer_number Int) bool {
	return self.ptr.API.ShapeCast3D_get_collision_mask_value(self, layer_number)
}
func (self classShapeCast3D) SetExcludeParentBody(mask bool) {
	self.ptr.API.ShapeCast3D_set_exclude_parent_body(self, mask)
}
func (self classShapeCast3D) GetExcludeParentBody() bool {
	return self.ptr.API.ShapeCast3D_get_exclude_parent_body(self)
}
func (self classShapeCast3D) SetCollideWithAreas(enable bool) {
	self.ptr.API.ShapeCast3D_set_collide_with_areas(self, enable)
}
func (self classShapeCast3D) IsCollideWithAreasEnabled() bool {
	return self.ptr.API.ShapeCast3D_is_collide_with_areas_enabled(self)
}
func (self classShapeCast3D) SetCollideWithBodies(enable bool) {
	self.ptr.API.ShapeCast3D_set_collide_with_bodies(self, enable)
}
func (self classShapeCast3D) IsCollideWithBodiesEnabled() bool {
	return self.ptr.API.ShapeCast3D_is_collide_with_bodies_enabled(self)
}
func (self classShapeCast3D) SetDebugShapeCustomColor(debug_shape_custom_color Color) {
	self.ptr.API.ShapeCast3D_set_debug_shape_custom_color(self, debug_shape_custom_color)
}
func (self classShapeCast3D) GetDebugShapeCustomColor() Color {
	return self.ptr.API.ShapeCast3D_get_debug_shape_custom_color(self)
}

type classShortcut struct{ Class[classShortcut] }

func (self classShortcut) Super() Resource { var super Resource; super.ptr = self.ptr; return super }

func (self classShortcut) Resource() Resource { return self.Super() }
func (self classShortcut) SetEvents(events Array) {
	self.ptr.API.Shortcut_set_events(self, events)
}
func (self classShortcut) GetEvents() Array {
	return self.ptr.API.Shortcut_get_events(self)
}
func (self classShortcut) HasValidEvent() bool {
	return self.ptr.API.Shortcut_has_valid_event(self)
}
func (self classShortcut) MatchesEvent(event InputEvent) bool {
	return self.ptr.API.Shortcut_matches_event(self, event)
}
func (self classShortcut) GetAsText() String {
	return self.ptr.API.Shortcut_get_as_text(self)
}

type classSkeleton2D struct{ Class[classSkeleton2D] }

func (self classSkeleton2D) Super() Node2D { var super Node2D; super.ptr = self.ptr; return super }

func (self classSkeleton2D) Node2D() Node2D { return self.Super() }
func (self classSkeleton2D) GetBoneCount() Int {
	return self.ptr.API.Skeleton2D_get_bone_count(self)
}
func (self classSkeleton2D) GetBone(idx Int) Bone2D {
	return self.ptr.API.Skeleton2D_get_bone(self, idx)
}
func (self classSkeleton2D) GetSkeleton() RID {
	return self.ptr.API.Skeleton2D_get_skeleton(self)
}
func (self classSkeleton2D) SetModificationStack(modification_stack SkeletonModificationStack2D) {
	self.ptr.API.Skeleton2D_set_modification_stack(self, modification_stack)
}
func (self classSkeleton2D) GetModificationStack() SkeletonModificationStack2D {
	return self.ptr.API.Skeleton2D_get_modification_stack(self)
}
func (self classSkeleton2D) ExecuteModifications(delta Float, execution_mode Int) {
	self.ptr.API.Skeleton2D_execute_modifications(self, delta, execution_mode)
}
func (self classSkeleton2D) SetBoneLocalPoseOverride(bone_idx Int, override_pose Transform2D, strength Float, persistent bool) {
	self.ptr.API.Skeleton2D_set_bone_local_pose_override(self, bone_idx, override_pose, strength, persistent)
}
func (self classSkeleton2D) GetBoneLocalPoseOverride(bone_idx Int) Transform2D {
	return self.ptr.API.Skeleton2D_get_bone_local_pose_override(self, bone_idx)
}

type classSkeleton3D struct{ Class[classSkeleton3D] }

func (self classSkeleton3D) Super() Node3D { var super Node3D; super.ptr = self.ptr; return super }

func (self classSkeleton3D) Node3D() Node3D { return self.Super() }
func (self classSkeleton3D) AddBone(name String) {
	self.ptr.API.Skeleton3D_add_bone(self, name)
}
func (self classSkeleton3D) FindBone(name String) Int {
	return self.ptr.API.Skeleton3D_find_bone(self, name)
}
func (self classSkeleton3D) GetBoneName(bone_idx Int) String {
	return self.ptr.API.Skeleton3D_get_bone_name(self, bone_idx)
}
func (self classSkeleton3D) SetBoneName(bone_idx Int, name String) {
	self.ptr.API.Skeleton3D_set_bone_name(self, bone_idx, name)
}
func (self classSkeleton3D) GetBoneParent(bone_idx Int) Int {
	return self.ptr.API.Skeleton3D_get_bone_parent(self, bone_idx)
}
func (self classSkeleton3D) SetBoneParent(bone_idx Int, parent_idx Int) {
	self.ptr.API.Skeleton3D_set_bone_parent(self, bone_idx, parent_idx)
}
func (self classSkeleton3D) GetBoneCount() Int {
	return self.ptr.API.Skeleton3D_get_bone_count(self)
}
func (self classSkeleton3D) GetVersion() Int {
	return self.ptr.API.Skeleton3D_get_version(self)
}
func (self classSkeleton3D) UnparentBoneAndRest(bone_idx Int) {
	self.ptr.API.Skeleton3D_unparent_bone_and_rest(self, bone_idx)
}
func (self classSkeleton3D) GetBoneChildren(bone_idx Int) PackedInt32Array {
	return self.ptr.API.Skeleton3D_get_bone_children(self, bone_idx)
}
func (self classSkeleton3D) GetParentlessBones() PackedInt32Array {
	return self.ptr.API.Skeleton3D_get_parentless_bones(self)
}
func (self classSkeleton3D) GetBoneRest(bone_idx Int) Transform3D {
	return self.ptr.API.Skeleton3D_get_bone_rest(self, bone_idx)
}
func (self classSkeleton3D) SetBoneRest(bone_idx Int, rest Transform3D) {
	self.ptr.API.Skeleton3D_set_bone_rest(self, bone_idx, rest)
}
func (self classSkeleton3D) GetBoneGlobalRest(bone_idx Int) Transform3D {
	return self.ptr.API.Skeleton3D_get_bone_global_rest(self, bone_idx)
}
func (self classSkeleton3D) CreateSkinFromRestTransforms() Skin {
	return self.ptr.API.Skeleton3D_create_skin_from_rest_transforms(self)
}
func (self classSkeleton3D) RegisterSkin(skin Skin) SkinReference {
	return self.ptr.API.Skeleton3D_register_skin(self, skin)
}
func (self classSkeleton3D) LocalizeRests() {
	self.ptr.API.Skeleton3D_localize_rests(self)
}
func (self classSkeleton3D) ClearBones() {
	self.ptr.API.Skeleton3D_clear_bones(self)
}
func (self classSkeleton3D) GetBonePose(bone_idx Int) Transform3D {
	return self.ptr.API.Skeleton3D_get_bone_pose(self, bone_idx)
}
func (self classSkeleton3D) SetBonePosePosition(bone_idx Int, position Vector3) {
	self.ptr.API.Skeleton3D_set_bone_pose_position(self, bone_idx, position)
}
func (self classSkeleton3D) SetBonePoseRotation(bone_idx Int, rotation Quaternion) {
	self.ptr.API.Skeleton3D_set_bone_pose_rotation(self, bone_idx, rotation)
}
func (self classSkeleton3D) SetBonePoseScale(bone_idx Int, scale Vector3) {
	self.ptr.API.Skeleton3D_set_bone_pose_scale(self, bone_idx, scale)
}
func (self classSkeleton3D) GetBonePosePosition(bone_idx Int) Vector3 {
	return self.ptr.API.Skeleton3D_get_bone_pose_position(self, bone_idx)
}
func (self classSkeleton3D) GetBonePoseRotation(bone_idx Int) Quaternion {
	return self.ptr.API.Skeleton3D_get_bone_pose_rotation(self, bone_idx)
}
func (self classSkeleton3D) GetBonePoseScale(bone_idx Int) Vector3 {
	return self.ptr.API.Skeleton3D_get_bone_pose_scale(self, bone_idx)
}
func (self classSkeleton3D) ResetBonePose(bone_idx Int) {
	self.ptr.API.Skeleton3D_reset_bone_pose(self, bone_idx)
}
func (self classSkeleton3D) ResetBonePoses() {
	self.ptr.API.Skeleton3D_reset_bone_poses(self)
}
func (self classSkeleton3D) IsBoneEnabled(bone_idx Int) bool {
	return self.ptr.API.Skeleton3D_is_bone_enabled(self, bone_idx)
}
func (self classSkeleton3D) SetBoneEnabled(bone_idx Int, enabled bool) {
	self.ptr.API.Skeleton3D_set_bone_enabled(self, bone_idx, enabled)
}
func (self classSkeleton3D) ClearBonesGlobalPoseOverride() {
	self.ptr.API.Skeleton3D_clear_bones_global_pose_override(self)
}
func (self classSkeleton3D) SetBoneGlobalPoseOverride(bone_idx Int, pose Transform3D, amount Float, persistent bool) {
	self.ptr.API.Skeleton3D_set_bone_global_pose_override(self, bone_idx, pose, amount, persistent)
}
func (self classSkeleton3D) GetBoneGlobalPoseOverride(bone_idx Int) Transform3D {
	return self.ptr.API.Skeleton3D_get_bone_global_pose_override(self, bone_idx)
}
func (self classSkeleton3D) GetBoneGlobalPose(bone_idx Int) Transform3D {
	return self.ptr.API.Skeleton3D_get_bone_global_pose(self, bone_idx)
}
func (self classSkeleton3D) GetBoneGlobalPoseNoOverride(bone_idx Int) Transform3D {
	return self.ptr.API.Skeleton3D_get_bone_global_pose_no_override(self, bone_idx)
}
func (self classSkeleton3D) ForceUpdateAllBoneTransforms() {
	self.ptr.API.Skeleton3D_force_update_all_bone_transforms(self)
}
func (self classSkeleton3D) ForceUpdateBoneChildTransform(bone_idx Int) {
	self.ptr.API.Skeleton3D_force_update_bone_child_transform(self, bone_idx)
}
func (self classSkeleton3D) SetMotionScale(motion_scale Float) {
	self.ptr.API.Skeleton3D_set_motion_scale(self, motion_scale)
}
func (self classSkeleton3D) GetMotionScale() Float {
	return self.ptr.API.Skeleton3D_get_motion_scale(self)
}
func (self classSkeleton3D) SetShowRestOnly(enabled bool) {
	self.ptr.API.Skeleton3D_set_show_rest_only(self, enabled)
}
func (self classSkeleton3D) IsShowRestOnly() bool {
	return self.ptr.API.Skeleton3D_is_show_rest_only(self)
}
func (self classSkeleton3D) SetAnimatePhysicalBones(enabled bool) {
	self.ptr.API.Skeleton3D_set_animate_physical_bones(self, enabled)
}
func (self classSkeleton3D) GetAnimatePhysicalBones() bool {
	return self.ptr.API.Skeleton3D_get_animate_physical_bones(self)
}
func (self classSkeleton3D) PhysicalBonesStopSimulation() {
	self.ptr.API.Skeleton3D_physical_bones_stop_simulation(self)
}
func (self classSkeleton3D) PhysicalBonesStartSimulation(bones ArrayOf[StringName]) {
	self.ptr.API.Skeleton3D_physical_bones_start_simulation(self, bones)
}
func (self classSkeleton3D) PhysicalBonesAddCollisionException(exception RID) {
	self.ptr.API.Skeleton3D_physical_bones_add_collision_exception(self, exception)
}
func (self classSkeleton3D) PhysicalBonesRemoveCollisionException(exception RID) {
	self.ptr.API.Skeleton3D_physical_bones_remove_collision_exception(self, exception)
}

type classSkeletonIK3D struct{ Class[classSkeletonIK3D] }

func (self classSkeletonIK3D) Super() Node { var super Node; super.ptr = self.ptr; return super }

func (self classSkeletonIK3D) Node() Node { return self.Super() }
func (self classSkeletonIK3D) SetRootBone(root_bone StringName) {
	self.ptr.API.SkeletonIK3D_set_root_bone(self, root_bone)
}
func (self classSkeletonIK3D) GetRootBone() StringName {
	return self.ptr.API.SkeletonIK3D_get_root_bone(self)
}
func (self classSkeletonIK3D) SetTipBone(tip_bone StringName) {
	self.ptr.API.SkeletonIK3D_set_tip_bone(self, tip_bone)
}
func (self classSkeletonIK3D) GetTipBone() StringName {
	return self.ptr.API.SkeletonIK3D_get_tip_bone(self)
}
func (self classSkeletonIK3D) SetInterpolation(interpolation Float) {
	self.ptr.API.SkeletonIK3D_set_interpolation(self, interpolation)
}
func (self classSkeletonIK3D) GetInterpolation() Float {
	return self.ptr.API.SkeletonIK3D_get_interpolation(self)
}
func (self classSkeletonIK3D) SetTargetTransform(target Transform3D) {
	self.ptr.API.SkeletonIK3D_set_target_transform(self, target)
}
func (self classSkeletonIK3D) GetTargetTransform() Transform3D {
	return self.ptr.API.SkeletonIK3D_get_target_transform(self)
}
func (self classSkeletonIK3D) SetTargetNode(node NodePath) {
	self.ptr.API.SkeletonIK3D_set_target_node(self, node)
}
func (self classSkeletonIK3D) GetTargetNode() NodePath {
	return self.ptr.API.SkeletonIK3D_get_target_node(self)
}
func (self classSkeletonIK3D) SetOverrideTipBasis(override bool) {
	self.ptr.API.SkeletonIK3D_set_override_tip_basis(self, override)
}
func (self classSkeletonIK3D) IsOverrideTipBasis() bool {
	return self.ptr.API.SkeletonIK3D_is_override_tip_basis(self)
}
func (self classSkeletonIK3D) SetUseMagnet(use bool) {
	self.ptr.API.SkeletonIK3D_set_use_magnet(self, use)
}
func (self classSkeletonIK3D) IsUsingMagnet() bool {
	return self.ptr.API.SkeletonIK3D_is_using_magnet(self)
}
func (self classSkeletonIK3D) SetMagnetPosition(local_position Vector3) {
	self.ptr.API.SkeletonIK3D_set_magnet_position(self, local_position)
}
func (self classSkeletonIK3D) GetMagnetPosition() Vector3 {
	return self.ptr.API.SkeletonIK3D_get_magnet_position(self)
}
func (self classSkeletonIK3D) GetParentSkeleton() Skeleton3D {
	return self.ptr.API.SkeletonIK3D_get_parent_skeleton(self)
}
func (self classSkeletonIK3D) IsRunning() bool {
	return self.ptr.API.SkeletonIK3D_is_running(self)
}
func (self classSkeletonIK3D) SetMinDistance(min_distance Float) {
	self.ptr.API.SkeletonIK3D_set_min_distance(self, min_distance)
}
func (self classSkeletonIK3D) GetMinDistance() Float {
	return self.ptr.API.SkeletonIK3D_get_min_distance(self)
}
func (self classSkeletonIK3D) SetMaxIterations(iterations Int) {
	self.ptr.API.SkeletonIK3D_set_max_iterations(self, iterations)
}
func (self classSkeletonIK3D) GetMaxIterations() Int {
	return self.ptr.API.SkeletonIK3D_get_max_iterations(self)
}
func (self classSkeletonIK3D) Start(one_time bool) {
	self.ptr.API.SkeletonIK3D_start(self, one_time)
}
func (self classSkeletonIK3D) Stop() {
	self.ptr.API.SkeletonIK3D_stop(self)
}

type classSkeletonModification2D struct {
	Class[classSkeletonModification2D]
}

func (self classSkeletonModification2D) Super() Resource {
	var super Resource
	super.ptr = self.ptr
	return super
}

func (self classSkeletonModification2D) Resource() Resource { return self.Super() }
func (self classSkeletonModification2D) SetEnabled(enabled bool) {
	self.ptr.API.SkeletonModification2D_set_enabled(self, enabled)
}
func (self classSkeletonModification2D) GetEnabled() bool {
	return self.ptr.API.SkeletonModification2D_get_enabled(self)
}
func (self classSkeletonModification2D) GetModificationStack() SkeletonModificationStack2D {
	return self.ptr.API.SkeletonModification2D_get_modification_stack(self)
}
func (self classSkeletonModification2D) SetIsSetup(is_setup bool) {
	self.ptr.API.SkeletonModification2D_set_is_setup(self, is_setup)
}
func (self classSkeletonModification2D) GetIsSetup() bool {
	return self.ptr.API.SkeletonModification2D_get_is_setup(self)
}
func (self classSkeletonModification2D) SetExecutionMode(execution_mode Int) {
	self.ptr.API.SkeletonModification2D_set_execution_mode(self, execution_mode)
}
func (self classSkeletonModification2D) GetExecutionMode() Int {
	return self.ptr.API.SkeletonModification2D_get_execution_mode(self)
}
func (self classSkeletonModification2D) ClampAngle(angle Float, min Float, max Float, invert bool) Float {
	return self.ptr.API.SkeletonModification2D_clamp_angle(self, angle, min, max, invert)
}
func (self classSkeletonModification2D) SetEditorDrawGizmo(draw_gizmo bool) {
	self.ptr.API.SkeletonModification2D_set_editor_draw_gizmo(self, draw_gizmo)
}
func (self classSkeletonModification2D) GetEditorDrawGizmo() bool {
	return self.ptr.API.SkeletonModification2D_get_editor_draw_gizmo(self)
}

type classSkeletonModification2DCCDIK struct {
	Class[classSkeletonModification2DCCDIK]
}

func (self classSkeletonModification2DCCDIK) Super() SkeletonModification2D {
	var super SkeletonModification2D
	super.ptr = self.ptr
	return super
}

func (self classSkeletonModification2DCCDIK) SkeletonModification2D() SkeletonModification2D {
	return self.Super()
}
func (self classSkeletonModification2DCCDIK) SetTargetNode(target_nodepath NodePath) {
	self.ptr.API.SkeletonModification2DCCDIK_set_target_node(self, target_nodepath)
}
func (self classSkeletonModification2DCCDIK) GetTargetNode() NodePath {
	return self.ptr.API.SkeletonModification2DCCDIK_get_target_node(self)
}
func (self classSkeletonModification2DCCDIK) SetTipNode(tip_nodepath NodePath) {
	self.ptr.API.SkeletonModification2DCCDIK_set_tip_node(self, tip_nodepath)
}
func (self classSkeletonModification2DCCDIK) GetTipNode() NodePath {
	return self.ptr.API.SkeletonModification2DCCDIK_get_tip_node(self)
}
func (self classSkeletonModification2DCCDIK) SetCcdikDataChainLength(length Int) {
	self.ptr.API.SkeletonModification2DCCDIK_set_ccdik_data_chain_length(self, length)
}
func (self classSkeletonModification2DCCDIK) GetCcdikDataChainLength() Int {
	return self.ptr.API.SkeletonModification2DCCDIK_get_ccdik_data_chain_length(self)
}
func (self classSkeletonModification2DCCDIK) SetCcdikJointBone2dNode(joint_idx Int, bone2d_nodepath NodePath) {
	self.ptr.API.SkeletonModification2DCCDIK_set_ccdik_joint_bone2d_node(self, joint_idx, bone2d_nodepath)
}
func (self classSkeletonModification2DCCDIK) GetCcdikJointBone2dNode(joint_idx Int) NodePath {
	return self.ptr.API.SkeletonModification2DCCDIK_get_ccdik_joint_bone2d_node(self, joint_idx)
}
func (self classSkeletonModification2DCCDIK) SetCcdikJointBoneIndex(joint_idx Int, bone_idx Int) {
	self.ptr.API.SkeletonModification2DCCDIK_set_ccdik_joint_bone_index(self, joint_idx, bone_idx)
}
func (self classSkeletonModification2DCCDIK) GetCcdikJointBoneIndex(joint_idx Int) Int {
	return self.ptr.API.SkeletonModification2DCCDIK_get_ccdik_joint_bone_index(self, joint_idx)
}
func (self classSkeletonModification2DCCDIK) SetCcdikJointRotateFromJoint(joint_idx Int, rotate_from_joint bool) {
	self.ptr.API.SkeletonModification2DCCDIK_set_ccdik_joint_rotate_from_joint(self, joint_idx, rotate_from_joint)
}
func (self classSkeletonModification2DCCDIK) GetCcdikJointRotateFromJoint(joint_idx Int) bool {
	return self.ptr.API.SkeletonModification2DCCDIK_get_ccdik_joint_rotate_from_joint(self, joint_idx)
}
func (self classSkeletonModification2DCCDIK) SetCcdikJointEnableConstraint(joint_idx Int, enable_constraint bool) {
	self.ptr.API.SkeletonModification2DCCDIK_set_ccdik_joint_enable_constraint(self, joint_idx, enable_constraint)
}
func (self classSkeletonModification2DCCDIK) GetCcdikJointEnableConstraint(joint_idx Int) bool {
	return self.ptr.API.SkeletonModification2DCCDIK_get_ccdik_joint_enable_constraint(self, joint_idx)
}
func (self classSkeletonModification2DCCDIK) SetCcdikJointConstraintAngleMin(joint_idx Int, angle_min Float) {
	self.ptr.API.SkeletonModification2DCCDIK_set_ccdik_joint_constraint_angle_min(self, joint_idx, angle_min)
}
func (self classSkeletonModification2DCCDIK) GetCcdikJointConstraintAngleMin(joint_idx Int) Float {
	return self.ptr.API.SkeletonModification2DCCDIK_get_ccdik_joint_constraint_angle_min(self, joint_idx)
}
func (self classSkeletonModification2DCCDIK) SetCcdikJointConstraintAngleMax(joint_idx Int, angle_max Float) {
	self.ptr.API.SkeletonModification2DCCDIK_set_ccdik_joint_constraint_angle_max(self, joint_idx, angle_max)
}
func (self classSkeletonModification2DCCDIK) GetCcdikJointConstraintAngleMax(joint_idx Int) Float {
	return self.ptr.API.SkeletonModification2DCCDIK_get_ccdik_joint_constraint_angle_max(self, joint_idx)
}
func (self classSkeletonModification2DCCDIK) SetCcdikJointConstraintAngleInvert(joint_idx Int, invert bool) {
	self.ptr.API.SkeletonModification2DCCDIK_set_ccdik_joint_constraint_angle_invert(self, joint_idx, invert)
}
func (self classSkeletonModification2DCCDIK) GetCcdikJointConstraintAngleInvert(joint_idx Int) bool {
	return self.ptr.API.SkeletonModification2DCCDIK_get_ccdik_joint_constraint_angle_invert(self, joint_idx)
}

type classSkeletonModification2DFABRIK struct {
	Class[classSkeletonModification2DFABRIK]
}

func (self classSkeletonModification2DFABRIK) Super() SkeletonModification2D {
	var super SkeletonModification2D
	super.ptr = self.ptr
	return super
}

func (self classSkeletonModification2DFABRIK) SkeletonModification2D() SkeletonModification2D {
	return self.Super()
}
func (self classSkeletonModification2DFABRIK) SetTargetNode(target_nodepath NodePath) {
	self.ptr.API.SkeletonModification2DFABRIK_set_target_node(self, target_nodepath)
}
func (self classSkeletonModification2DFABRIK) GetTargetNode() NodePath {
	return self.ptr.API.SkeletonModification2DFABRIK_get_target_node(self)
}
func (self classSkeletonModification2DFABRIK) SetFabrikDataChainLength(length Int) {
	self.ptr.API.SkeletonModification2DFABRIK_set_fabrik_data_chain_length(self, length)
}
func (self classSkeletonModification2DFABRIK) GetFabrikDataChainLength() Int {
	return self.ptr.API.SkeletonModification2DFABRIK_get_fabrik_data_chain_length(self)
}
func (self classSkeletonModification2DFABRIK) SetFabrikJointBone2dNode(joint_idx Int, bone2d_nodepath NodePath) {
	self.ptr.API.SkeletonModification2DFABRIK_set_fabrik_joint_bone2d_node(self, joint_idx, bone2d_nodepath)
}
func (self classSkeletonModification2DFABRIK) GetFabrikJointBone2dNode(joint_idx Int) NodePath {
	return self.ptr.API.SkeletonModification2DFABRIK_get_fabrik_joint_bone2d_node(self, joint_idx)
}
func (self classSkeletonModification2DFABRIK) SetFabrikJointBoneIndex(joint_idx Int, bone_idx Int) {
	self.ptr.API.SkeletonModification2DFABRIK_set_fabrik_joint_bone_index(self, joint_idx, bone_idx)
}
func (self classSkeletonModification2DFABRIK) GetFabrikJointBoneIndex(joint_idx Int) Int {
	return self.ptr.API.SkeletonModification2DFABRIK_get_fabrik_joint_bone_index(self, joint_idx)
}
func (self classSkeletonModification2DFABRIK) SetFabrikJointMagnetPosition(joint_idx Int, magnet_position Vector2) {
	self.ptr.API.SkeletonModification2DFABRIK_set_fabrik_joint_magnet_position(self, joint_idx, magnet_position)
}
func (self classSkeletonModification2DFABRIK) GetFabrikJointMagnetPosition(joint_idx Int) Vector2 {
	return self.ptr.API.SkeletonModification2DFABRIK_get_fabrik_joint_magnet_position(self, joint_idx)
}
func (self classSkeletonModification2DFABRIK) SetFabrikJointUseTargetRotation(joint_idx Int, use_target_rotation bool) {
	self.ptr.API.SkeletonModification2DFABRIK_set_fabrik_joint_use_target_rotation(self, joint_idx, use_target_rotation)
}
func (self classSkeletonModification2DFABRIK) GetFabrikJointUseTargetRotation(joint_idx Int) bool {
	return self.ptr.API.SkeletonModification2DFABRIK_get_fabrik_joint_use_target_rotation(self, joint_idx)
}

type classSkeletonModification2DJiggle struct {
	Class[classSkeletonModification2DJiggle]
}

func (self classSkeletonModification2DJiggle) Super() SkeletonModification2D {
	var super SkeletonModification2D
	super.ptr = self.ptr
	return super
}

func (self classSkeletonModification2DJiggle) SkeletonModification2D() SkeletonModification2D {
	return self.Super()
}
func (self classSkeletonModification2DJiggle) SetTargetNode(target_nodepath NodePath) {
	self.ptr.API.SkeletonModification2DJiggle_set_target_node(self, target_nodepath)
}
func (self classSkeletonModification2DJiggle) GetTargetNode() NodePath {
	return self.ptr.API.SkeletonModification2DJiggle_get_target_node(self)
}
func (self classSkeletonModification2DJiggle) SetJiggleDataChainLength(length Int) {
	self.ptr.API.SkeletonModification2DJiggle_set_jiggle_data_chain_length(self, length)
}
func (self classSkeletonModification2DJiggle) GetJiggleDataChainLength() Int {
	return self.ptr.API.SkeletonModification2DJiggle_get_jiggle_data_chain_length(self)
}
func (self classSkeletonModification2DJiggle) SetStiffness(stiffness Float) {
	self.ptr.API.SkeletonModification2DJiggle_set_stiffness(self, stiffness)
}
func (self classSkeletonModification2DJiggle) GetStiffness() Float {
	return self.ptr.API.SkeletonModification2DJiggle_get_stiffness(self)
}
func (self classSkeletonModification2DJiggle) SetMass(mass Float) {
	self.ptr.API.SkeletonModification2DJiggle_set_mass(self, mass)
}
func (self classSkeletonModification2DJiggle) GetMass() Float {
	return self.ptr.API.SkeletonModification2DJiggle_get_mass(self)
}
func (self classSkeletonModification2DJiggle) SetDamping(damping Float) {
	self.ptr.API.SkeletonModification2DJiggle_set_damping(self, damping)
}
func (self classSkeletonModification2DJiggle) GetDamping() Float {
	return self.ptr.API.SkeletonModification2DJiggle_get_damping(self)
}
func (self classSkeletonModification2DJiggle) SetUseGravity(use_gravity bool) {
	self.ptr.API.SkeletonModification2DJiggle_set_use_gravity(self, use_gravity)
}
func (self classSkeletonModification2DJiggle) GetUseGravity() bool {
	return self.ptr.API.SkeletonModification2DJiggle_get_use_gravity(self)
}
func (self classSkeletonModification2DJiggle) SetGravity(gravity Vector2) {
	self.ptr.API.SkeletonModification2DJiggle_set_gravity(self, gravity)
}
func (self classSkeletonModification2DJiggle) GetGravity() Vector2 {
	return self.ptr.API.SkeletonModification2DJiggle_get_gravity(self)
}
func (self classSkeletonModification2DJiggle) SetUseColliders(use_colliders bool) {
	self.ptr.API.SkeletonModification2DJiggle_set_use_colliders(self, use_colliders)
}
func (self classSkeletonModification2DJiggle) GetUseColliders() bool {
	return self.ptr.API.SkeletonModification2DJiggle_get_use_colliders(self)
}
func (self classSkeletonModification2DJiggle) SetCollisionMask(collision_mask Int) {
	self.ptr.API.SkeletonModification2DJiggle_set_collision_mask(self, collision_mask)
}
func (self classSkeletonModification2DJiggle) GetCollisionMask() Int {
	return self.ptr.API.SkeletonModification2DJiggle_get_collision_mask(self)
}
func (self classSkeletonModification2DJiggle) SetJiggleJointBone2dNode(joint_idx Int, bone2d_node NodePath) {
	self.ptr.API.SkeletonModification2DJiggle_set_jiggle_joint_bone2d_node(self, joint_idx, bone2d_node)
}
func (self classSkeletonModification2DJiggle) GetJiggleJointBone2dNode(joint_idx Int) NodePath {
	return self.ptr.API.SkeletonModification2DJiggle_get_jiggle_joint_bone2d_node(self, joint_idx)
}
func (self classSkeletonModification2DJiggle) SetJiggleJointBoneIndex(joint_idx Int, bone_idx Int) {
	self.ptr.API.SkeletonModification2DJiggle_set_jiggle_joint_bone_index(self, joint_idx, bone_idx)
}
func (self classSkeletonModification2DJiggle) GetJiggleJointBoneIndex(joint_idx Int) Int {
	return self.ptr.API.SkeletonModification2DJiggle_get_jiggle_joint_bone_index(self, joint_idx)
}
func (self classSkeletonModification2DJiggle) SetJiggleJointOverride(joint_idx Int, override bool) {
	self.ptr.API.SkeletonModification2DJiggle_set_jiggle_joint_override(self, joint_idx, override)
}
func (self classSkeletonModification2DJiggle) GetJiggleJointOverride(joint_idx Int) bool {
	return self.ptr.API.SkeletonModification2DJiggle_get_jiggle_joint_override(self, joint_idx)
}
func (self classSkeletonModification2DJiggle) SetJiggleJointStiffness(joint_idx Int, stiffness Float) {
	self.ptr.API.SkeletonModification2DJiggle_set_jiggle_joint_stiffness(self, joint_idx, stiffness)
}
func (self classSkeletonModification2DJiggle) GetJiggleJointStiffness(joint_idx Int) Float {
	return self.ptr.API.SkeletonModification2DJiggle_get_jiggle_joint_stiffness(self, joint_idx)
}
func (self classSkeletonModification2DJiggle) SetJiggleJointMass(joint_idx Int, mass Float) {
	self.ptr.API.SkeletonModification2DJiggle_set_jiggle_joint_mass(self, joint_idx, mass)
}
func (self classSkeletonModification2DJiggle) GetJiggleJointMass(joint_idx Int) Float {
	return self.ptr.API.SkeletonModification2DJiggle_get_jiggle_joint_mass(self, joint_idx)
}
func (self classSkeletonModification2DJiggle) SetJiggleJointDamping(joint_idx Int, damping Float) {
	self.ptr.API.SkeletonModification2DJiggle_set_jiggle_joint_damping(self, joint_idx, damping)
}
func (self classSkeletonModification2DJiggle) GetJiggleJointDamping(joint_idx Int) Float {
	return self.ptr.API.SkeletonModification2DJiggle_get_jiggle_joint_damping(self, joint_idx)
}
func (self classSkeletonModification2DJiggle) SetJiggleJointUseGravity(joint_idx Int, use_gravity bool) {
	self.ptr.API.SkeletonModification2DJiggle_set_jiggle_joint_use_gravity(self, joint_idx, use_gravity)
}
func (self classSkeletonModification2DJiggle) GetJiggleJointUseGravity(joint_idx Int) bool {
	return self.ptr.API.SkeletonModification2DJiggle_get_jiggle_joint_use_gravity(self, joint_idx)
}
func (self classSkeletonModification2DJiggle) SetJiggleJointGravity(joint_idx Int, gravity Vector2) {
	self.ptr.API.SkeletonModification2DJiggle_set_jiggle_joint_gravity(self, joint_idx, gravity)
}
func (self classSkeletonModification2DJiggle) GetJiggleJointGravity(joint_idx Int) Vector2 {
	return self.ptr.API.SkeletonModification2DJiggle_get_jiggle_joint_gravity(self, joint_idx)
}

type classSkeletonModification2DLookAt struct {
	Class[classSkeletonModification2DLookAt]
}

func (self classSkeletonModification2DLookAt) Super() SkeletonModification2D {
	var super SkeletonModification2D
	super.ptr = self.ptr
	return super
}

func (self classSkeletonModification2DLookAt) SkeletonModification2D() SkeletonModification2D {
	return self.Super()
}
func (self classSkeletonModification2DLookAt) SetBone2dNode(bone2d_nodepath NodePath) {
	self.ptr.API.SkeletonModification2DLookAt_set_bone2d_node(self, bone2d_nodepath)
}
func (self classSkeletonModification2DLookAt) GetBone2dNode() NodePath {
	return self.ptr.API.SkeletonModification2DLookAt_get_bone2d_node(self)
}
func (self classSkeletonModification2DLookAt) SetBoneIndex(bone_idx Int) {
	self.ptr.API.SkeletonModification2DLookAt_set_bone_index(self, bone_idx)
}
func (self classSkeletonModification2DLookAt) GetBoneIndex() Int {
	return self.ptr.API.SkeletonModification2DLookAt_get_bone_index(self)
}
func (self classSkeletonModification2DLookAt) SetTargetNode(target_nodepath NodePath) {
	self.ptr.API.SkeletonModification2DLookAt_set_target_node(self, target_nodepath)
}
func (self classSkeletonModification2DLookAt) GetTargetNode() NodePath {
	return self.ptr.API.SkeletonModification2DLookAt_get_target_node(self)
}
func (self classSkeletonModification2DLookAt) SetAdditionalRotation(rotation Float) {
	self.ptr.API.SkeletonModification2DLookAt_set_additional_rotation(self, rotation)
}
func (self classSkeletonModification2DLookAt) GetAdditionalRotation() Float {
	return self.ptr.API.SkeletonModification2DLookAt_get_additional_rotation(self)
}
func (self classSkeletonModification2DLookAt) SetEnableConstraint(enable_constraint bool) {
	self.ptr.API.SkeletonModification2DLookAt_set_enable_constraint(self, enable_constraint)
}
func (self classSkeletonModification2DLookAt) GetEnableConstraint() bool {
	return self.ptr.API.SkeletonModification2DLookAt_get_enable_constraint(self)
}
func (self classSkeletonModification2DLookAt) SetConstraintAngleMin(angle_min Float) {
	self.ptr.API.SkeletonModification2DLookAt_set_constraint_angle_min(self, angle_min)
}
func (self classSkeletonModification2DLookAt) GetConstraintAngleMin() Float {
	return self.ptr.API.SkeletonModification2DLookAt_get_constraint_angle_min(self)
}
func (self classSkeletonModification2DLookAt) SetConstraintAngleMax(angle_max Float) {
	self.ptr.API.SkeletonModification2DLookAt_set_constraint_angle_max(self, angle_max)
}
func (self classSkeletonModification2DLookAt) GetConstraintAngleMax() Float {
	return self.ptr.API.SkeletonModification2DLookAt_get_constraint_angle_max(self)
}
func (self classSkeletonModification2DLookAt) SetConstraintAngleInvert(invert bool) {
	self.ptr.API.SkeletonModification2DLookAt_set_constraint_angle_invert(self, invert)
}
func (self classSkeletonModification2DLookAt) GetConstraintAngleInvert() bool {
	return self.ptr.API.SkeletonModification2DLookAt_get_constraint_angle_invert(self)
}

type classSkeletonModification2DPhysicalBones struct {
	Class[classSkeletonModification2DPhysicalBones]
}

func (self classSkeletonModification2DPhysicalBones) Super() SkeletonModification2D {
	var super SkeletonModification2D
	super.ptr = self.ptr
	return super
}

func (self classSkeletonModification2DPhysicalBones) SkeletonModification2D() SkeletonModification2D {
	return self.Super()
}
func (self classSkeletonModification2DPhysicalBones) SetPhysicalBoneChainLength(length Int) {
	self.ptr.API.SkeletonModification2DPhysicalBones_set_physical_bone_chain_length(self, length)
}
func (self classSkeletonModification2DPhysicalBones) GetPhysicalBoneChainLength() Int {
	return self.ptr.API.SkeletonModification2DPhysicalBones_get_physical_bone_chain_length(self)
}
func (self classSkeletonModification2DPhysicalBones) SetPhysicalBoneNode(joint_idx Int, physicalbone2d_node NodePath) {
	self.ptr.API.SkeletonModification2DPhysicalBones_set_physical_bone_node(self, joint_idx, physicalbone2d_node)
}
func (self classSkeletonModification2DPhysicalBones) GetPhysicalBoneNode(joint_idx Int) NodePath {
	return self.ptr.API.SkeletonModification2DPhysicalBones_get_physical_bone_node(self, joint_idx)
}
func (self classSkeletonModification2DPhysicalBones) FetchPhysicalBones() {
	self.ptr.API.SkeletonModification2DPhysicalBones_fetch_physical_bones(self)
}
func (self classSkeletonModification2DPhysicalBones) StartSimulation(bones ArrayOf[StringName]) {
	self.ptr.API.SkeletonModification2DPhysicalBones_start_simulation(self, bones)
}
func (self classSkeletonModification2DPhysicalBones) StopSimulation(bones ArrayOf[StringName]) {
	self.ptr.API.SkeletonModification2DPhysicalBones_stop_simulation(self, bones)
}

type classSkeletonModification2DStackHolder struct {
	Class[classSkeletonModification2DStackHolder]
}

func (self classSkeletonModification2DStackHolder) Super() SkeletonModification2D {
	var super SkeletonModification2D
	super.ptr = self.ptr
	return super
}

func (self classSkeletonModification2DStackHolder) SkeletonModification2D() SkeletonModification2D {
	return self.Super()
}
func (self classSkeletonModification2DStackHolder) SetHeldModificationStack(held_modification_stack SkeletonModificationStack2D) {
	self.ptr.API.SkeletonModification2DStackHolder_set_held_modification_stack(self, held_modification_stack)
}
func (self classSkeletonModification2DStackHolder) GetHeldModificationStack() SkeletonModificationStack2D {
	return self.ptr.API.SkeletonModification2DStackHolder_get_held_modification_stack(self)
}

type classSkeletonModification2DTwoBoneIK struct {
	Class[classSkeletonModification2DTwoBoneIK]
}

func (self classSkeletonModification2DTwoBoneIK) Super() SkeletonModification2D {
	var super SkeletonModification2D
	super.ptr = self.ptr
	return super
}

func (self classSkeletonModification2DTwoBoneIK) SkeletonModification2D() SkeletonModification2D {
	return self.Super()
}
func (self classSkeletonModification2DTwoBoneIK) SetTargetNode(target_nodepath NodePath) {
	self.ptr.API.SkeletonModification2DTwoBoneIK_set_target_node(self, target_nodepath)
}
func (self classSkeletonModification2DTwoBoneIK) GetTargetNode() NodePath {
	return self.ptr.API.SkeletonModification2DTwoBoneIK_get_target_node(self)
}
func (self classSkeletonModification2DTwoBoneIK) SetTargetMinimumDistance(minimum_distance Float) {
	self.ptr.API.SkeletonModification2DTwoBoneIK_set_target_minimum_distance(self, minimum_distance)
}
func (self classSkeletonModification2DTwoBoneIK) GetTargetMinimumDistance() Float {
	return self.ptr.API.SkeletonModification2DTwoBoneIK_get_target_minimum_distance(self)
}
func (self classSkeletonModification2DTwoBoneIK) SetTargetMaximumDistance(maximum_distance Float) {
	self.ptr.API.SkeletonModification2DTwoBoneIK_set_target_maximum_distance(self, maximum_distance)
}
func (self classSkeletonModification2DTwoBoneIK) GetTargetMaximumDistance() Float {
	return self.ptr.API.SkeletonModification2DTwoBoneIK_get_target_maximum_distance(self)
}
func (self classSkeletonModification2DTwoBoneIK) SetFlipBendDirection(flip_direction bool) {
	self.ptr.API.SkeletonModification2DTwoBoneIK_set_flip_bend_direction(self, flip_direction)
}
func (self classSkeletonModification2DTwoBoneIK) GetFlipBendDirection() bool {
	return self.ptr.API.SkeletonModification2DTwoBoneIK_get_flip_bend_direction(self)
}
func (self classSkeletonModification2DTwoBoneIK) SetJointOneBone2dNode(bone2d_node NodePath) {
	self.ptr.API.SkeletonModification2DTwoBoneIK_set_joint_one_bone2d_node(self, bone2d_node)
}
func (self classSkeletonModification2DTwoBoneIK) GetJointOneBone2dNode() NodePath {
	return self.ptr.API.SkeletonModification2DTwoBoneIK_get_joint_one_bone2d_node(self)
}
func (self classSkeletonModification2DTwoBoneIK) SetJointOneBoneIdx(bone_idx Int) {
	self.ptr.API.SkeletonModification2DTwoBoneIK_set_joint_one_bone_idx(self, bone_idx)
}
func (self classSkeletonModification2DTwoBoneIK) GetJointOneBoneIdx() Int {
	return self.ptr.API.SkeletonModification2DTwoBoneIK_get_joint_one_bone_idx(self)
}
func (self classSkeletonModification2DTwoBoneIK) SetJointTwoBone2dNode(bone2d_node NodePath) {
	self.ptr.API.SkeletonModification2DTwoBoneIK_set_joint_two_bone2d_node(self, bone2d_node)
}
func (self classSkeletonModification2DTwoBoneIK) GetJointTwoBone2dNode() NodePath {
	return self.ptr.API.SkeletonModification2DTwoBoneIK_get_joint_two_bone2d_node(self)
}
func (self classSkeletonModification2DTwoBoneIK) SetJointTwoBoneIdx(bone_idx Int) {
	self.ptr.API.SkeletonModification2DTwoBoneIK_set_joint_two_bone_idx(self, bone_idx)
}
func (self classSkeletonModification2DTwoBoneIK) GetJointTwoBoneIdx() Int {
	return self.ptr.API.SkeletonModification2DTwoBoneIK_get_joint_two_bone_idx(self)
}

type classSkeletonModificationStack2D struct {
	Class[classSkeletonModificationStack2D]
}

func (self classSkeletonModificationStack2D) Super() Resource {
	var super Resource
	super.ptr = self.ptr
	return super
}

func (self classSkeletonModificationStack2D) Resource() Resource { return self.Super() }
func (self classSkeletonModificationStack2D) Setup() {
	self.ptr.API.SkeletonModificationStack2D_setup(self)
}
func (self classSkeletonModificationStack2D) Execute(delta Float, execution_mode Int) {
	self.ptr.API.SkeletonModificationStack2D_execute(self, delta, execution_mode)
}
func (self classSkeletonModificationStack2D) EnableAllModifications(enabled bool) {
	self.ptr.API.SkeletonModificationStack2D_enable_all_modifications(self, enabled)
}
func (self classSkeletonModificationStack2D) GetModification(mod_idx Int) SkeletonModification2D {
	return self.ptr.API.SkeletonModificationStack2D_get_modification(self, mod_idx)
}
func (self classSkeletonModificationStack2D) AddModification(modification SkeletonModification2D) {
	self.ptr.API.SkeletonModificationStack2D_add_modification(self, modification)
}
func (self classSkeletonModificationStack2D) DeleteModification(mod_idx Int) {
	self.ptr.API.SkeletonModificationStack2D_delete_modification(self, mod_idx)
}
func (self classSkeletonModificationStack2D) SetModification(mod_idx Int, modification SkeletonModification2D) {
	self.ptr.API.SkeletonModificationStack2D_set_modification(self, mod_idx, modification)
}
func (self classSkeletonModificationStack2D) SetModificationCount(count Int) {
	self.ptr.API.SkeletonModificationStack2D_set_modification_count(self, count)
}
func (self classSkeletonModificationStack2D) GetModificationCount() Int {
	return self.ptr.API.SkeletonModificationStack2D_get_modification_count(self)
}
func (self classSkeletonModificationStack2D) GetIsSetup() bool {
	return self.ptr.API.SkeletonModificationStack2D_get_is_setup(self)
}
func (self classSkeletonModificationStack2D) SetEnabled(enabled bool) {
	self.ptr.API.SkeletonModificationStack2D_set_enabled(self, enabled)
}
func (self classSkeletonModificationStack2D) GetEnabled() bool {
	return self.ptr.API.SkeletonModificationStack2D_get_enabled(self)
}
func (self classSkeletonModificationStack2D) SetStrength(strength Float) {
	self.ptr.API.SkeletonModificationStack2D_set_strength(self, strength)
}
func (self classSkeletonModificationStack2D) GetStrength() Float {
	return self.ptr.API.SkeletonModificationStack2D_get_strength(self)
}
func (self classSkeletonModificationStack2D) GetSkeleton() Skeleton2D {
	return self.ptr.API.SkeletonModificationStack2D_get_skeleton(self)
}

type classSkeletonProfile struct{ Class[classSkeletonProfile] }

func (self classSkeletonProfile) Super() Resource {
	var super Resource
	super.ptr = self.ptr
	return super
}

func (self classSkeletonProfile) Resource() Resource { return self.Super() }
func (self classSkeletonProfile) SetRootBone(bone_name StringName) {
	self.ptr.API.SkeletonProfile_set_root_bone(self, bone_name)
}
func (self classSkeletonProfile) GetRootBone() StringName {
	return self.ptr.API.SkeletonProfile_get_root_bone(self)
}
func (self classSkeletonProfile) SetScaleBaseBone(bone_name StringName) {
	self.ptr.API.SkeletonProfile_set_scale_base_bone(self, bone_name)
}
func (self classSkeletonProfile) GetScaleBaseBone() StringName {
	return self.ptr.API.SkeletonProfile_get_scale_base_bone(self)
}
func (self classSkeletonProfile) SetGroupSize(size Int) {
	self.ptr.API.SkeletonProfile_set_group_size(self, size)
}
func (self classSkeletonProfile) GetGroupSize() Int {
	return self.ptr.API.SkeletonProfile_get_group_size(self)
}
func (self classSkeletonProfile) GetGroupName(group_idx Int) StringName {
	return self.ptr.API.SkeletonProfile_get_group_name(self, group_idx)
}
func (self classSkeletonProfile) SetGroupName(group_idx Int, group_name StringName) {
	self.ptr.API.SkeletonProfile_set_group_name(self, group_idx, group_name)
}
func (self classSkeletonProfile) GetTexture(group_idx Int) Texture2D {
	return self.ptr.API.SkeletonProfile_get_texture(self, group_idx)
}
func (self classSkeletonProfile) SetTexture(group_idx Int, texture Texture2D) {
	self.ptr.API.SkeletonProfile_set_texture(self, group_idx, texture)
}
func (self classSkeletonProfile) SetBoneSize(size Int) {
	self.ptr.API.SkeletonProfile_set_bone_size(self, size)
}
func (self classSkeletonProfile) GetBoneSize() Int {
	return self.ptr.API.SkeletonProfile_get_bone_size(self)
}
func (self classSkeletonProfile) FindBone(bone_name StringName) Int {
	return self.ptr.API.SkeletonProfile_find_bone(self, bone_name)
}
func (self classSkeletonProfile) GetBoneName(bone_idx Int) StringName {
	return self.ptr.API.SkeletonProfile_get_bone_name(self, bone_idx)
}
func (self classSkeletonProfile) SetBoneName(bone_idx Int, bone_name StringName) {
	self.ptr.API.SkeletonProfile_set_bone_name(self, bone_idx, bone_name)
}
func (self classSkeletonProfile) GetBoneParent(bone_idx Int) StringName {
	return self.ptr.API.SkeletonProfile_get_bone_parent(self, bone_idx)
}
func (self classSkeletonProfile) SetBoneParent(bone_idx Int, bone_parent StringName) {
	self.ptr.API.SkeletonProfile_set_bone_parent(self, bone_idx, bone_parent)
}
func (self classSkeletonProfile) GetTailDirection(bone_idx Int) SkeletonProfileTailDirection {
	return self.ptr.API.SkeletonProfile_get_tail_direction(self, bone_idx)
}
func (self classSkeletonProfile) SetTailDirection(bone_idx Int, tail_direction SkeletonProfileTailDirection) {
	self.ptr.API.SkeletonProfile_set_tail_direction(self, bone_idx, tail_direction)
}
func (self classSkeletonProfile) GetBoneTail(bone_idx Int) StringName {
	return self.ptr.API.SkeletonProfile_get_bone_tail(self, bone_idx)
}
func (self classSkeletonProfile) SetBoneTail(bone_idx Int, bone_tail StringName) {
	self.ptr.API.SkeletonProfile_set_bone_tail(self, bone_idx, bone_tail)
}
func (self classSkeletonProfile) GetReferencePose(bone_idx Int) Transform3D {
	return self.ptr.API.SkeletonProfile_get_reference_pose(self, bone_idx)
}
func (self classSkeletonProfile) SetReferencePose(bone_idx Int, bone_name Transform3D) {
	self.ptr.API.SkeletonProfile_set_reference_pose(self, bone_idx, bone_name)
}
func (self classSkeletonProfile) GetHandleOffset(bone_idx Int) Vector2 {
	return self.ptr.API.SkeletonProfile_get_handle_offset(self, bone_idx)
}
func (self classSkeletonProfile) SetHandleOffset(bone_idx Int, handle_offset Vector2) {
	self.ptr.API.SkeletonProfile_set_handle_offset(self, bone_idx, handle_offset)
}
func (self classSkeletonProfile) GetGroup(bone_idx Int) StringName {
	return self.ptr.API.SkeletonProfile_get_group(self, bone_idx)
}
func (self classSkeletonProfile) SetGroup(bone_idx Int, group StringName) {
	self.ptr.API.SkeletonProfile_set_group(self, bone_idx, group)
}

type classSkeletonProfileHumanoid struct {
	Class[classSkeletonProfileHumanoid]
}

func (self classSkeletonProfileHumanoid) Super() SkeletonProfile {
	var super SkeletonProfile
	super.ptr = self.ptr
	return super
}

func (self classSkeletonProfileHumanoid) SkeletonProfile() SkeletonProfile { return self.Super() }

type classSkin struct{ Class[classSkin] }

func (self classSkin) Super() Resource { var super Resource; super.ptr = self.ptr; return super }

func (self classSkin) Resource() Resource { return self.Super() }
func (self classSkin) SetBindCount(bind_count Int) {
	self.ptr.API.Skin_set_bind_count(self, bind_count)
}
func (self classSkin) GetBindCount() Int {
	return self.ptr.API.Skin_get_bind_count(self)
}
func (self classSkin) AddBind(bone Int, pose Transform3D) {
	self.ptr.API.Skin_add_bind(self, bone, pose)
}
func (self classSkin) AddNamedBind(name String, pose Transform3D) {
	self.ptr.API.Skin_add_named_bind(self, name, pose)
}
func (self classSkin) SetBindPose(bind_index Int, pose Transform3D) {
	self.ptr.API.Skin_set_bind_pose(self, bind_index, pose)
}
func (self classSkin) GetBindPose(bind_index Int) Transform3D {
	return self.ptr.API.Skin_get_bind_pose(self, bind_index)
}
func (self classSkin) SetBindName(bind_index Int, name StringName) {
	self.ptr.API.Skin_set_bind_name(self, bind_index, name)
}
func (self classSkin) GetBindName(bind_index Int) StringName {
	return self.ptr.API.Skin_get_bind_name(self, bind_index)
}
func (self classSkin) SetBindBone(bind_index Int, bone Int) {
	self.ptr.API.Skin_set_bind_bone(self, bind_index, bone)
}
func (self classSkin) GetBindBone(bind_index Int) Int {
	return self.ptr.API.Skin_get_bind_bone(self, bind_index)
}
func (self classSkin) ClearBinds() {
	self.ptr.API.Skin_clear_binds(self)
}

type classSkinReference struct{ Class[classSkinReference] }

func (self classSkinReference) Super() RefCounted {
	var super RefCounted
	super.ptr = self.ptr
	return super
}

func (self classSkinReference) RefCounted() RefCounted { return self.Super() }
func (self classSkinReference) GetSkeleton() RID {
	return self.ptr.API.SkinReference_get_skeleton(self)
}
func (self classSkinReference) GetSkin() Skin {
	return self.ptr.API.SkinReference_get_skin(self)
}

type classSky struct{ Class[classSky] }

func (self classSky) Super() Resource { var super Resource; super.ptr = self.ptr; return super }

func (self classSky) Resource() Resource { return self.Super() }
func (self classSky) SetRadianceSize(size SkyRadianceSize) {
	self.ptr.API.Sky_set_radiance_size(self, size)
}
func (self classSky) GetRadianceSize() SkyRadianceSize {
	return self.ptr.API.Sky_get_radiance_size(self)
}
func (self classSky) SetProcessMode(mode SkyProcessMode) {
	self.ptr.API.Sky_set_process_mode(self, mode)
}
func (self classSky) GetProcessMode() SkyProcessMode {
	return self.ptr.API.Sky_get_process_mode(self)
}
func (self classSky) SetMaterial(material Material) {
	self.ptr.API.Sky_set_material(self, material)
}
func (self classSky) GetMaterial() Material {
	return self.ptr.API.Sky_get_material(self)
}

type classSlider struct{ Class[classSlider] }

func (self classSlider) Super() Range { var super Range; super.ptr = self.ptr; return super }

func (self classSlider) Range() Range { return self.Super() }
func (self classSlider) SetTicks(count Int) {
	self.ptr.API.Slider_set_ticks(self, count)
}
func (self classSlider) GetTicks() Int {
	return self.ptr.API.Slider_get_ticks(self)
}
func (self classSlider) GetTicksOnBorders() bool {
	return self.ptr.API.Slider_get_ticks_on_borders(self)
}
func (self classSlider) SetTicksOnBorders(ticks_on_border bool) {
	self.ptr.API.Slider_set_ticks_on_borders(self, ticks_on_border)
}
func (self classSlider) SetEditable(editable bool) {
	self.ptr.API.Slider_set_editable(self, editable)
}
func (self classSlider) IsEditable() bool {
	return self.ptr.API.Slider_is_editable(self)
}
func (self classSlider) SetScrollable(scrollable bool) {
	self.ptr.API.Slider_set_scrollable(self, scrollable)
}
func (self classSlider) IsScrollable() bool {
	return self.ptr.API.Slider_is_scrollable(self)
}

type classSliderJoint3D struct{ Class[classSliderJoint3D] }

func (self classSliderJoint3D) Super() Joint3D { var super Joint3D; super.ptr = self.ptr; return super }

func (self classSliderJoint3D) Joint3D() Joint3D { return self.Super() }
func (self classSliderJoint3D) SetParam(param SliderJoint3DParam, value Float) {
	self.ptr.API.SliderJoint3D_set_param(self, param, value)
}
func (self classSliderJoint3D) GetParam(param SliderJoint3DParam) Float {
	return self.ptr.API.SliderJoint3D_get_param(self, param)
}

type classSoftBody3D struct{ Class[classSoftBody3D] }

func (self classSoftBody3D) Super() MeshInstance3D {
	var super MeshInstance3D
	super.ptr = self.ptr
	return super
}

func (self classSoftBody3D) MeshInstance3D() MeshInstance3D { return self.Super() }
func (self classSoftBody3D) GetPhysicsRid() RID {
	return self.ptr.API.SoftBody3D_get_physics_rid(self)
}
func (self classSoftBody3D) SetCollisionMask(collision_mask Int) {
	self.ptr.API.SoftBody3D_set_collision_mask(self, collision_mask)
}
func (self classSoftBody3D) GetCollisionMask() Int {
	return self.ptr.API.SoftBody3D_get_collision_mask(self)
}
func (self classSoftBody3D) SetCollisionLayer(collision_layer Int) {
	self.ptr.API.SoftBody3D_set_collision_layer(self, collision_layer)
}
func (self classSoftBody3D) GetCollisionLayer() Int {
	return self.ptr.API.SoftBody3D_get_collision_layer(self)
}
func (self classSoftBody3D) SetCollisionMaskValue(layer_number Int, value bool) {
	self.ptr.API.SoftBody3D_set_collision_mask_value(self, layer_number, value)
}
func (self classSoftBody3D) GetCollisionMaskValue(layer_number Int) bool {
	return self.ptr.API.SoftBody3D_get_collision_mask_value(self, layer_number)
}
func (self classSoftBody3D) SetCollisionLayerValue(layer_number Int, value bool) {
	self.ptr.API.SoftBody3D_set_collision_layer_value(self, layer_number, value)
}
func (self classSoftBody3D) GetCollisionLayerValue(layer_number Int) bool {
	return self.ptr.API.SoftBody3D_get_collision_layer_value(self, layer_number)
}
func (self classSoftBody3D) SetParentCollisionIgnore(parent_collision_ignore NodePath) {
	self.ptr.API.SoftBody3D_set_parent_collision_ignore(self, parent_collision_ignore)
}
func (self classSoftBody3D) GetParentCollisionIgnore() NodePath {
	return self.ptr.API.SoftBody3D_get_parent_collision_ignore(self)
}
func (self classSoftBody3D) SetDisableMode(mode SoftBody3DDisableMode) {
	self.ptr.API.SoftBody3D_set_disable_mode(self, mode)
}
func (self classSoftBody3D) GetDisableMode() SoftBody3DDisableMode {
	return self.ptr.API.SoftBody3D_get_disable_mode(self)
}
func (self classSoftBody3D) GetCollisionExceptions() ArrayOf[PhysicsBody3D] {
	return self.ptr.API.SoftBody3D_get_collision_exceptions(self)
}
func (self classSoftBody3D) AddCollisionExceptionWith(body Node) {
	self.ptr.API.SoftBody3D_add_collision_exception_with(self, body)
}
func (self classSoftBody3D) RemoveCollisionExceptionWith(body Node) {
	self.ptr.API.SoftBody3D_remove_collision_exception_with(self, body)
}
func (self classSoftBody3D) SetSimulationPrecision(simulation_precision Int) {
	self.ptr.API.SoftBody3D_set_simulation_precision(self, simulation_precision)
}
func (self classSoftBody3D) GetSimulationPrecision() Int {
	return self.ptr.API.SoftBody3D_get_simulation_precision(self)
}
func (self classSoftBody3D) SetTotalMass(mass Float) {
	self.ptr.API.SoftBody3D_set_total_mass(self, mass)
}
func (self classSoftBody3D) GetTotalMass() Float {
	return self.ptr.API.SoftBody3D_get_total_mass(self)
}
func (self classSoftBody3D) SetLinearStiffness(linear_stiffness Float) {
	self.ptr.API.SoftBody3D_set_linear_stiffness(self, linear_stiffness)
}
func (self classSoftBody3D) GetLinearStiffness() Float {
	return self.ptr.API.SoftBody3D_get_linear_stiffness(self)
}
func (self classSoftBody3D) SetPressureCoefficient(pressure_coefficient Float) {
	self.ptr.API.SoftBody3D_set_pressure_coefficient(self, pressure_coefficient)
}
func (self classSoftBody3D) GetPressureCoefficient() Float {
	return self.ptr.API.SoftBody3D_get_pressure_coefficient(self)
}
func (self classSoftBody3D) SetDampingCoefficient(damping_coefficient Float) {
	self.ptr.API.SoftBody3D_set_damping_coefficient(self, damping_coefficient)
}
func (self classSoftBody3D) GetDampingCoefficient() Float {
	return self.ptr.API.SoftBody3D_get_damping_coefficient(self)
}
func (self classSoftBody3D) SetDragCoefficient(drag_coefficient Float) {
	self.ptr.API.SoftBody3D_set_drag_coefficient(self, drag_coefficient)
}
func (self classSoftBody3D) GetDragCoefficient() Float {
	return self.ptr.API.SoftBody3D_get_drag_coefficient(self)
}
func (self classSoftBody3D) GetPointTransform(point_index Int) Vector3 {
	return self.ptr.API.SoftBody3D_get_point_transform(self, point_index)
}
func (self classSoftBody3D) SetPointPinned(point_index Int, pinned bool, attachment_path NodePath) {
	self.ptr.API.SoftBody3D_set_point_pinned(self, point_index, pinned, attachment_path)
}
func (self classSoftBody3D) IsPointPinned(point_index Int) bool {
	return self.ptr.API.SoftBody3D_is_point_pinned(self, point_index)
}
func (self classSoftBody3D) SetRayPickable(ray_pickable bool) {
	self.ptr.API.SoftBody3D_set_ray_pickable(self, ray_pickable)
}
func (self classSoftBody3D) IsRayPickable() bool {
	return self.ptr.API.SoftBody3D_is_ray_pickable(self)
}

type classSphereMesh struct{ Class[classSphereMesh] }

func (self classSphereMesh) Super() PrimitiveMesh {
	var super PrimitiveMesh
	super.ptr = self.ptr
	return super
}

func (self classSphereMesh) PrimitiveMesh() PrimitiveMesh { return self.Super() }
func (self classSphereMesh) SetRadius(radius Float) {
	self.ptr.API.SphereMesh_set_radius(self, radius)
}
func (self classSphereMesh) GetRadius() Float {
	return self.ptr.API.SphereMesh_get_radius(self)
}
func (self classSphereMesh) SetHeight(height Float) {
	self.ptr.API.SphereMesh_set_height(self, height)
}
func (self classSphereMesh) GetHeight() Float {
	return self.ptr.API.SphereMesh_get_height(self)
}
func (self classSphereMesh) SetRadialSegments(radial_segments Int) {
	self.ptr.API.SphereMesh_set_radial_segments(self, radial_segments)
}
func (self classSphereMesh) GetRadialSegments() Int {
	return self.ptr.API.SphereMesh_get_radial_segments(self)
}
func (self classSphereMesh) SetRings(rings Int) {
	self.ptr.API.SphereMesh_set_rings(self, rings)
}
func (self classSphereMesh) GetRings() Int {
	return self.ptr.API.SphereMesh_get_rings(self)
}
func (self classSphereMesh) SetIsHemisphere(is_hemisphere bool) {
	self.ptr.API.SphereMesh_set_is_hemisphere(self, is_hemisphere)
}
func (self classSphereMesh) GetIsHemisphere() bool {
	return self.ptr.API.SphereMesh_get_is_hemisphere(self)
}

type classSphereOccluder3D struct{ Class[classSphereOccluder3D] }

func (self classSphereOccluder3D) Super() Occluder3D {
	var super Occluder3D
	super.ptr = self.ptr
	return super
}

func (self classSphereOccluder3D) Occluder3D() Occluder3D { return self.Super() }
func (self classSphereOccluder3D) SetRadius(radius Float) {
	self.ptr.API.SphereOccluder3D_set_radius(self, radius)
}
func (self classSphereOccluder3D) GetRadius() Float {
	return self.ptr.API.SphereOccluder3D_get_radius(self)
}

type classSphereShape3D struct{ Class[classSphereShape3D] }

func (self classSphereShape3D) Super() Shape3D { var super Shape3D; super.ptr = self.ptr; return super }

func (self classSphereShape3D) Shape3D() Shape3D { return self.Super() }
func (self classSphereShape3D) SetRadius(radius Float) {
	self.ptr.API.SphereShape3D_set_radius(self, radius)
}
func (self classSphereShape3D) GetRadius() Float {
	return self.ptr.API.SphereShape3D_get_radius(self)
}

type classSpinBox struct{ Class[classSpinBox] }

func (self classSpinBox) Super() Range { var super Range; super.ptr = self.ptr; return super }

func (self classSpinBox) Range() Range { return self.Super() }
func (self classSpinBox) SetHorizontalAlignment(alignment HorizontalAlignment) {
	self.ptr.API.SpinBox_set_horizontal_alignment(self, alignment)
}
func (self classSpinBox) GetHorizontalAlignment() HorizontalAlignment {
	return self.ptr.API.SpinBox_get_horizontal_alignment(self)
}
func (self classSpinBox) SetSuffix(suffix String) {
	self.ptr.API.SpinBox_set_suffix(self, suffix)
}
func (self classSpinBox) GetSuffix() String {
	return self.ptr.API.SpinBox_get_suffix(self)
}
func (self classSpinBox) SetPrefix(prefix String) {
	self.ptr.API.SpinBox_set_prefix(self, prefix)
}
func (self classSpinBox) GetPrefix() String {
	return self.ptr.API.SpinBox_get_prefix(self)
}
func (self classSpinBox) SetEditable(enabled bool) {
	self.ptr.API.SpinBox_set_editable(self, enabled)
}
func (self classSpinBox) SetCustomArrowStep(arrow_step Float) {
	self.ptr.API.SpinBox_set_custom_arrow_step(self, arrow_step)
}
func (self classSpinBox) GetCustomArrowStep() Float {
	return self.ptr.API.SpinBox_get_custom_arrow_step(self)
}
func (self classSpinBox) IsEditable() bool {
	return self.ptr.API.SpinBox_is_editable(self)
}
func (self classSpinBox) SetUpdateOnTextChanged(enabled bool) {
	self.ptr.API.SpinBox_set_update_on_text_changed(self, enabled)
}
func (self classSpinBox) GetUpdateOnTextChanged() bool {
	return self.ptr.API.SpinBox_get_update_on_text_changed(self)
}
func (self classSpinBox) SetSelectAllOnFocus(enabled bool) {
	self.ptr.API.SpinBox_set_select_all_on_focus(self, enabled)
}
func (self classSpinBox) IsSelectAllOnFocus() bool {
	return self.ptr.API.SpinBox_is_select_all_on_focus(self)
}
func (self classSpinBox) Apply() {
	self.ptr.API.SpinBox_apply(self)
}
func (self classSpinBox) GetLineEdit() LineEdit {
	return self.ptr.API.SpinBox_get_line_edit(self)
}

type classSplitContainer struct{ Class[classSplitContainer] }

func (self classSplitContainer) Super() Container {
	var super Container
	super.ptr = self.ptr
	return super
}

func (self classSplitContainer) Container() Container { return self.Super() }
func (self classSplitContainer) SetSplitOffset(offset Int) {
	self.ptr.API.SplitContainer_set_split_offset(self, offset)
}
func (self classSplitContainer) GetSplitOffset() Int {
	return self.ptr.API.SplitContainer_get_split_offset(self)
}
func (self classSplitContainer) ClampSplitOffset() {
	self.ptr.API.SplitContainer_clamp_split_offset(self)
}
func (self classSplitContainer) SetCollapsed(collapsed bool) {
	self.ptr.API.SplitContainer_set_collapsed(self, collapsed)
}
func (self classSplitContainer) IsCollapsed() bool {
	return self.ptr.API.SplitContainer_is_collapsed(self)
}
func (self classSplitContainer) SetDraggerVisibility(mode SplitContainerDraggerVisibility) {
	self.ptr.API.SplitContainer_set_dragger_visibility(self, mode)
}
func (self classSplitContainer) GetDraggerVisibility() SplitContainerDraggerVisibility {
	return self.ptr.API.SplitContainer_get_dragger_visibility(self)
}
func (self classSplitContainer) SetVertical(vertical bool) {
	self.ptr.API.SplitContainer_set_vertical(self, vertical)
}
func (self classSplitContainer) IsVertical() bool {
	return self.ptr.API.SplitContainer_is_vertical(self)
}

type classSpotLight3D struct{ Class[classSpotLight3D] }

func (self classSpotLight3D) Super() Light3D { var super Light3D; super.ptr = self.ptr; return super }

func (self classSpotLight3D) Light3D() Light3D { return self.Super() }

type classSpringArm3D struct{ Class[classSpringArm3D] }

func (self classSpringArm3D) Super() Node3D { var super Node3D; super.ptr = self.ptr; return super }

func (self classSpringArm3D) Node3D() Node3D { return self.Super() }
func (self classSpringArm3D) GetHitLength() Float {
	return self.ptr.API.SpringArm3D_get_hit_length(self)
}
func (self classSpringArm3D) SetLength(length Float) {
	self.ptr.API.SpringArm3D_set_length(self, length)
}
func (self classSpringArm3D) GetLength() Float {
	return self.ptr.API.SpringArm3D_get_length(self)
}
func (self classSpringArm3D) SetShape(shape Shape3D) {
	self.ptr.API.SpringArm3D_set_shape(self, shape)
}
func (self classSpringArm3D) GetShape() Shape3D {
	return self.ptr.API.SpringArm3D_get_shape(self)
}
func (self classSpringArm3D) AddExcludedObject(RID RID) {
	self.ptr.API.SpringArm3D_add_excluded_object(self, RID)
}
func (self classSpringArm3D) RemoveExcludedObject(RID RID) bool {
	return self.ptr.API.SpringArm3D_remove_excluded_object(self, RID)
}
func (self classSpringArm3D) ClearExcludedObjects() {
	self.ptr.API.SpringArm3D_clear_excluded_objects(self)
}
func (self classSpringArm3D) SetCollisionMask(mask Int) {
	self.ptr.API.SpringArm3D_set_collision_mask(self, mask)
}
func (self classSpringArm3D) GetCollisionMask() Int {
	return self.ptr.API.SpringArm3D_get_collision_mask(self)
}
func (self classSpringArm3D) SetMargin(margin Float) {
	self.ptr.API.SpringArm3D_set_margin(self, margin)
}
func (self classSpringArm3D) GetMargin() Float {
	return self.ptr.API.SpringArm3D_get_margin(self)
}

type classSprite2D struct{ Class[classSprite2D] }

func (self classSprite2D) Super() Node2D { var super Node2D; super.ptr = self.ptr; return super }

func (self classSprite2D) Node2D() Node2D { return self.Super() }
func (self classSprite2D) SetTexture(texture Texture2D) {
	self.ptr.API.Sprite2D_set_texture(self, texture)
}
func (self classSprite2D) GetTexture() Texture2D {
	return self.ptr.API.Sprite2D_get_texture(self)
}
func (self classSprite2D) SetCentered(centered bool) {
	self.ptr.API.Sprite2D_set_centered(self, centered)
}
func (self classSprite2D) IsCentered() bool {
	return self.ptr.API.Sprite2D_is_centered(self)
}
func (self classSprite2D) SetOffset(offset Vector2) {
	self.ptr.API.Sprite2D_set_offset(self, offset)
}
func (self classSprite2D) GetOffset() Vector2 {
	return self.ptr.API.Sprite2D_get_offset(self)
}
func (self classSprite2D) SetFlipH(flip_h bool) {
	self.ptr.API.Sprite2D_set_flip_h(self, flip_h)
}
func (self classSprite2D) IsFlippedH() bool {
	return self.ptr.API.Sprite2D_is_flipped_h(self)
}
func (self classSprite2D) SetFlipV(flip_v bool) {
	self.ptr.API.Sprite2D_set_flip_v(self, flip_v)
}
func (self classSprite2D) IsFlippedV() bool {
	return self.ptr.API.Sprite2D_is_flipped_v(self)
}
func (self classSprite2D) SetRegionEnabled(enabled bool) {
	self.ptr.API.Sprite2D_set_region_enabled(self, enabled)
}
func (self classSprite2D) IsRegionEnabled() bool {
	return self.ptr.API.Sprite2D_is_region_enabled(self)
}
func (self classSprite2D) IsPixelOpaque(pos Vector2) bool {
	return self.ptr.API.Sprite2D_is_pixel_opaque(self, pos)
}
func (self classSprite2D) SetRegionRect(rect Rect2) {
	self.ptr.API.Sprite2D_set_region_rect(self, rect)
}
func (self classSprite2D) GetRegionRect() Rect2 {
	return self.ptr.API.Sprite2D_get_region_rect(self)
}
func (self classSprite2D) SetRegionFilterClipEnabled(enabled bool) {
	self.ptr.API.Sprite2D_set_region_filter_clip_enabled(self, enabled)
}
func (self classSprite2D) IsRegionFilterClipEnabled() bool {
	return self.ptr.API.Sprite2D_is_region_filter_clip_enabled(self)
}
func (self classSprite2D) SetFrame(frame Int) {
	self.ptr.API.Sprite2D_set_frame(self, frame)
}
func (self classSprite2D) GetFrame() Int {
	return self.ptr.API.Sprite2D_get_frame(self)
}
func (self classSprite2D) SetFrameCoords(coords Vector2i) {
	self.ptr.API.Sprite2D_set_frame_coords(self, coords)
}
func (self classSprite2D) GetFrameCoords() Vector2i {
	return self.ptr.API.Sprite2D_get_frame_coords(self)
}
func (self classSprite2D) SetVframes(vframes Int) {
	self.ptr.API.Sprite2D_set_vframes(self, vframes)
}
func (self classSprite2D) GetVframes() Int {
	return self.ptr.API.Sprite2D_get_vframes(self)
}
func (self classSprite2D) SetHframes(hframes Int) {
	self.ptr.API.Sprite2D_set_hframes(self, hframes)
}
func (self classSprite2D) GetHframes() Int {
	return self.ptr.API.Sprite2D_get_hframes(self)
}
func (self classSprite2D) GetRect() Rect2 {
	return self.ptr.API.Sprite2D_get_rect(self)
}

type classSprite3D struct{ Class[classSprite3D] }

func (self classSprite3D) Super() SpriteBase3D {
	var super SpriteBase3D
	super.ptr = self.ptr
	return super
}

func (self classSprite3D) SpriteBase3D() SpriteBase3D { return self.Super() }
func (self classSprite3D) SetTexture(texture Texture2D) {
	self.ptr.API.Sprite3D_set_texture(self, texture)
}
func (self classSprite3D) GetTexture() Texture2D {
	return self.ptr.API.Sprite3D_get_texture(self)
}
func (self classSprite3D) SetRegionEnabled(enabled bool) {
	self.ptr.API.Sprite3D_set_region_enabled(self, enabled)
}
func (self classSprite3D) IsRegionEnabled() bool {
	return self.ptr.API.Sprite3D_is_region_enabled(self)
}
func (self classSprite3D) SetRegionRect(rect Rect2) {
	self.ptr.API.Sprite3D_set_region_rect(self, rect)
}
func (self classSprite3D) GetRegionRect() Rect2 {
	return self.ptr.API.Sprite3D_get_region_rect(self)
}
func (self classSprite3D) SetFrame(frame Int) {
	self.ptr.API.Sprite3D_set_frame(self, frame)
}
func (self classSprite3D) GetFrame() Int {
	return self.ptr.API.Sprite3D_get_frame(self)
}
func (self classSprite3D) SetFrameCoords(coords Vector2i) {
	self.ptr.API.Sprite3D_set_frame_coords(self, coords)
}
func (self classSprite3D) GetFrameCoords() Vector2i {
	return self.ptr.API.Sprite3D_get_frame_coords(self)
}
func (self classSprite3D) SetVframes(vframes Int) {
	self.ptr.API.Sprite3D_set_vframes(self, vframes)
}
func (self classSprite3D) GetVframes() Int {
	return self.ptr.API.Sprite3D_get_vframes(self)
}
func (self classSprite3D) SetHframes(hframes Int) {
	self.ptr.API.Sprite3D_set_hframes(self, hframes)
}
func (self classSprite3D) GetHframes() Int {
	return self.ptr.API.Sprite3D_get_hframes(self)
}

type classSpriteBase3D struct{ Class[classSpriteBase3D] }

func (self classSpriteBase3D) Super() GeometryInstance3D {
	var super GeometryInstance3D
	super.ptr = self.ptr
	return super
}

func (self classSpriteBase3D) GeometryInstance3D() GeometryInstance3D { return self.Super() }
func (self classSpriteBase3D) SetCentered(centered bool) {
	self.ptr.API.SpriteBase3D_set_centered(self, centered)
}
func (self classSpriteBase3D) IsCentered() bool {
	return self.ptr.API.SpriteBase3D_is_centered(self)
}
func (self classSpriteBase3D) SetOffset(offset Vector2) {
	self.ptr.API.SpriteBase3D_set_offset(self, offset)
}
func (self classSpriteBase3D) GetOffset() Vector2 {
	return self.ptr.API.SpriteBase3D_get_offset(self)
}
func (self classSpriteBase3D) SetFlipH(flip_h bool) {
	self.ptr.API.SpriteBase3D_set_flip_h(self, flip_h)
}
func (self classSpriteBase3D) IsFlippedH() bool {
	return self.ptr.API.SpriteBase3D_is_flipped_h(self)
}
func (self classSpriteBase3D) SetFlipV(flip_v bool) {
	self.ptr.API.SpriteBase3D_set_flip_v(self, flip_v)
}
func (self classSpriteBase3D) IsFlippedV() bool {
	return self.ptr.API.SpriteBase3D_is_flipped_v(self)
}
func (self classSpriteBase3D) SetModulate(modulate Color) {
	self.ptr.API.SpriteBase3D_set_modulate(self, modulate)
}
func (self classSpriteBase3D) GetModulate() Color {
	return self.ptr.API.SpriteBase3D_get_modulate(self)
}
func (self classSpriteBase3D) SetRenderPriority(priority Int) {
	self.ptr.API.SpriteBase3D_set_render_priority(self, priority)
}
func (self classSpriteBase3D) GetRenderPriority() Int {
	return self.ptr.API.SpriteBase3D_get_render_priority(self)
}
func (self classSpriteBase3D) SetPixelSize(pixel_size Float) {
	self.ptr.API.SpriteBase3D_set_pixel_size(self, pixel_size)
}
func (self classSpriteBase3D) GetPixelSize() Float {
	return self.ptr.API.SpriteBase3D_get_pixel_size(self)
}
func (self classSpriteBase3D) SetAxis(axis Vector3Axis) {
	self.ptr.API.SpriteBase3D_set_axis(self, axis)
}
func (self classSpriteBase3D) GetAxis() Vector3Axis {
	return self.ptr.API.SpriteBase3D_get_axis(self)
}
func (self classSpriteBase3D) SetDrawFlag(flag SpriteBase3DDrawFlags, enabled bool) {
	self.ptr.API.SpriteBase3D_set_draw_flag(self, flag, enabled)
}
func (self classSpriteBase3D) GetDrawFlag(flag SpriteBase3DDrawFlags) bool {
	return self.ptr.API.SpriteBase3D_get_draw_flag(self, flag)
}
func (self classSpriteBase3D) SetAlphaCutMode(mode SpriteBase3DAlphaCutMode) {
	self.ptr.API.SpriteBase3D_set_alpha_cut_mode(self, mode)
}
func (self classSpriteBase3D) GetAlphaCutMode() SpriteBase3DAlphaCutMode {
	return self.ptr.API.SpriteBase3D_get_alpha_cut_mode(self)
}
func (self classSpriteBase3D) SetAlphaScissorThreshold(threshold Float) {
	self.ptr.API.SpriteBase3D_set_alpha_scissor_threshold(self, threshold)
}
func (self classSpriteBase3D) GetAlphaScissorThreshold() Float {
	return self.ptr.API.SpriteBase3D_get_alpha_scissor_threshold(self)
}
func (self classSpriteBase3D) SetAlphaHashScale(threshold Float) {
	self.ptr.API.SpriteBase3D_set_alpha_hash_scale(self, threshold)
}
func (self classSpriteBase3D) GetAlphaHashScale() Float {
	return self.ptr.API.SpriteBase3D_get_alpha_hash_scale(self)
}
func (self classSpriteBase3D) SetAlphaAntialiasing(alpha_aa BaseMaterial3DAlphaAntiAliasing) {
	self.ptr.API.SpriteBase3D_set_alpha_antialiasing(self, alpha_aa)
}
func (self classSpriteBase3D) GetAlphaAntialiasing() BaseMaterial3DAlphaAntiAliasing {
	return self.ptr.API.SpriteBase3D_get_alpha_antialiasing(self)
}
func (self classSpriteBase3D) SetAlphaAntialiasingEdge(edge Float) {
	self.ptr.API.SpriteBase3D_set_alpha_antialiasing_edge(self, edge)
}
func (self classSpriteBase3D) GetAlphaAntialiasingEdge() Float {
	return self.ptr.API.SpriteBase3D_get_alpha_antialiasing_edge(self)
}
func (self classSpriteBase3D) SetBillboardMode(mode BaseMaterial3DBillboardMode) {
	self.ptr.API.SpriteBase3D_set_billboard_mode(self, mode)
}
func (self classSpriteBase3D) GetBillboardMode() BaseMaterial3DBillboardMode {
	return self.ptr.API.SpriteBase3D_get_billboard_mode(self)
}
func (self classSpriteBase3D) SetTextureFilter(mode BaseMaterial3DTextureFilter) {
	self.ptr.API.SpriteBase3D_set_texture_filter(self, mode)
}
func (self classSpriteBase3D) GetTextureFilter() BaseMaterial3DTextureFilter {
	return self.ptr.API.SpriteBase3D_get_texture_filter(self)
}
func (self classSpriteBase3D) GetItemRect() Rect2 {
	return self.ptr.API.SpriteBase3D_get_item_rect(self)
}
func (self classSpriteBase3D) GenerateTriangleMesh() TriangleMesh {
	return self.ptr.API.SpriteBase3D_generate_triangle_mesh(self)
}

type classSpriteFrames struct{ Class[classSpriteFrames] }

func (self classSpriteFrames) Super() Resource {
	var super Resource
	super.ptr = self.ptr
	return super
}

func (self classSpriteFrames) Resource() Resource { return self.Super() }
func (self classSpriteFrames) AddAnimation(anim StringName) {
	self.ptr.API.SpriteFrames_add_animation(self, anim)
}
func (self classSpriteFrames) HasAnimation(anim StringName) bool {
	return self.ptr.API.SpriteFrames_has_animation(self, anim)
}
func (self classSpriteFrames) RemoveAnimation(anim StringName) {
	self.ptr.API.SpriteFrames_remove_animation(self, anim)
}
func (self classSpriteFrames) RenameAnimation(anim StringName, newname StringName) {
	self.ptr.API.SpriteFrames_rename_animation(self, anim, newname)
}
func (self classSpriteFrames) GetAnimationNames() PackedStringArray {
	return self.ptr.API.SpriteFrames_get_animation_names(self)
}
func (self classSpriteFrames) SetAnimationSpeed(anim StringName, fps Float) {
	self.ptr.API.SpriteFrames_set_animation_speed(self, anim, fps)
}
func (self classSpriteFrames) GetAnimationSpeed(anim StringName) Float {
	return self.ptr.API.SpriteFrames_get_animation_speed(self, anim)
}
func (self classSpriteFrames) SetAnimationLoop(anim StringName, loop bool) {
	self.ptr.API.SpriteFrames_set_animation_loop(self, anim, loop)
}
func (self classSpriteFrames) GetAnimationLoop(anim StringName) bool {
	return self.ptr.API.SpriteFrames_get_animation_loop(self, anim)
}
func (self classSpriteFrames) AddFrame(anim StringName, texture Texture2D, duration Float, at_position Int) {
	self.ptr.API.SpriteFrames_add_frame(self, anim, texture, duration, at_position)
}
func (self classSpriteFrames) SetFrame(anim StringName, idx Int, texture Texture2D, duration Float) {
	self.ptr.API.SpriteFrames_set_frame(self, anim, idx, texture, duration)
}
func (self classSpriteFrames) RemoveFrame(anim StringName, idx Int) {
	self.ptr.API.SpriteFrames_remove_frame(self, anim, idx)
}
func (self classSpriteFrames) GetFrameCount(anim StringName) Int {
	return self.ptr.API.SpriteFrames_get_frame_count(self, anim)
}
func (self classSpriteFrames) GetFrameTexture(anim StringName, idx Int) Texture2D {
	return self.ptr.API.SpriteFrames_get_frame_texture(self, anim, idx)
}
func (self classSpriteFrames) GetFrameDuration(anim StringName, idx Int) Float {
	return self.ptr.API.SpriteFrames_get_frame_duration(self, anim, idx)
}
func (self classSpriteFrames) Clear(anim StringName) {
	self.ptr.API.SpriteFrames_clear(self, anim)
}
func (self classSpriteFrames) ClearAll() {
	self.ptr.API.SpriteFrames_clear_all(self)
}

type classStandardMaterial3D struct{ Class[classStandardMaterial3D] }

func (self classStandardMaterial3D) Super() BaseMaterial3D {
	var super BaseMaterial3D
	super.ptr = self.ptr
	return super
}

func (self classStandardMaterial3D) BaseMaterial3D() BaseMaterial3D { return self.Super() }

type classStaticBody2D struct{ Class[classStaticBody2D] }

func (self classStaticBody2D) Super() PhysicsBody2D {
	var super PhysicsBody2D
	super.ptr = self.ptr
	return super
}

func (self classStaticBody2D) PhysicsBody2D() PhysicsBody2D { return self.Super() }
func (self classStaticBody2D) SetConstantLinearVelocity(vel Vector2) {
	self.ptr.API.StaticBody2D_set_constant_linear_velocity(self, vel)
}
func (self classStaticBody2D) SetConstantAngularVelocity(vel Float) {
	self.ptr.API.StaticBody2D_set_constant_angular_velocity(self, vel)
}
func (self classStaticBody2D) GetConstantLinearVelocity() Vector2 {
	return self.ptr.API.StaticBody2D_get_constant_linear_velocity(self)
}
func (self classStaticBody2D) GetConstantAngularVelocity() Float {
	return self.ptr.API.StaticBody2D_get_constant_angular_velocity(self)
}
func (self classStaticBody2D) SetPhysicsMaterialOverride(physics_material_override PhysicsMaterial) {
	self.ptr.API.StaticBody2D_set_physics_material_override(self, physics_material_override)
}
func (self classStaticBody2D) GetPhysicsMaterialOverride() PhysicsMaterial {
	return self.ptr.API.StaticBody2D_get_physics_material_override(self)
}

type classStaticBody3D struct{ Class[classStaticBody3D] }

func (self classStaticBody3D) Super() PhysicsBody3D {
	var super PhysicsBody3D
	super.ptr = self.ptr
	return super
}

func (self classStaticBody3D) PhysicsBody3D() PhysicsBody3D { return self.Super() }
func (self classStaticBody3D) SetConstantLinearVelocity(vel Vector3) {
	self.ptr.API.StaticBody3D_set_constant_linear_velocity(self, vel)
}
func (self classStaticBody3D) SetConstantAngularVelocity(vel Vector3) {
	self.ptr.API.StaticBody3D_set_constant_angular_velocity(self, vel)
}
func (self classStaticBody3D) GetConstantLinearVelocity() Vector3 {
	return self.ptr.API.StaticBody3D_get_constant_linear_velocity(self)
}
func (self classStaticBody3D) GetConstantAngularVelocity() Vector3 {
	return self.ptr.API.StaticBody3D_get_constant_angular_velocity(self)
}
func (self classStaticBody3D) SetPhysicsMaterialOverride(physics_material_override PhysicsMaterial) {
	self.ptr.API.StaticBody3D_set_physics_material_override(self, physics_material_override)
}
func (self classStaticBody3D) GetPhysicsMaterialOverride() PhysicsMaterial {
	return self.ptr.API.StaticBody3D_get_physics_material_override(self)
}

type classStreamPeer struct{ Class[classStreamPeer] }

func (self classStreamPeer) Super() RefCounted {
	var super RefCounted
	super.ptr = self.ptr
	return super
}

func (self classStreamPeer) RefCounted() RefCounted { return self.Super() }
func (self classStreamPeer) PutData(data PackedByteArray) int64 {
	return self.ptr.API.StreamPeer_put_data(self, data)
}
func (self classStreamPeer) PutPartialData(data PackedByteArray) Array {
	return self.ptr.API.StreamPeer_put_partial_data(self, data)
}
func (self classStreamPeer) GetData(bytes Int) Array {
	return self.ptr.API.StreamPeer_get_data(self, bytes)
}
func (self classStreamPeer) GetPartialData(bytes Int) Array {
	return self.ptr.API.StreamPeer_get_partial_data(self, bytes)
}
func (self classStreamPeer) GetAvailableBytes() Int {
	return self.ptr.API.StreamPeer_get_available_bytes(self)
}
func (self classStreamPeer) SetBigEndian(enable bool) {
	self.ptr.API.StreamPeer_set_big_endian(self, enable)
}
func (self classStreamPeer) IsBigEndianEnabled() bool {
	return self.ptr.API.StreamPeer_is_big_endian_enabled(self)
}
func (self classStreamPeer) Put8(value Int) {
	self.ptr.API.StreamPeer_put_8(self, value)
}
func (self classStreamPeer) PutU8(value Int) {
	self.ptr.API.StreamPeer_put_u8(self, value)
}
func (self classStreamPeer) Put16(value Int) {
	self.ptr.API.StreamPeer_put_16(self, value)
}
func (self classStreamPeer) PutU16(value Int) {
	self.ptr.API.StreamPeer_put_u16(self, value)
}
func (self classStreamPeer) Put32(value Int) {
	self.ptr.API.StreamPeer_put_32(self, value)
}
func (self classStreamPeer) PutU32(value Int) {
	self.ptr.API.StreamPeer_put_u32(self, value)
}
func (self classStreamPeer) Put64(value Int) {
	self.ptr.API.StreamPeer_put_64(self, value)
}
func (self classStreamPeer) PutU64(value Int) {
	self.ptr.API.StreamPeer_put_u64(self, value)
}
func (self classStreamPeer) PutFloat(value Float) {
	self.ptr.API.StreamPeer_put_float(self, value)
}
func (self classStreamPeer) PutDouble(value Float) {
	self.ptr.API.StreamPeer_put_double(self, value)
}
func (self classStreamPeer) PutString(value String) {
	self.ptr.API.StreamPeer_put_string(self, value)
}
func (self classStreamPeer) PutUtf8String(value String) {
	self.ptr.API.StreamPeer_put_utf8_string(self, value)
}
func (self classStreamPeer) PutVar(value Variant, full_objects bool) {
	self.ptr.API.StreamPeer_put_var(self, value, full_objects)
}
func (self classStreamPeer) Get8() Int {
	return self.ptr.API.StreamPeer_get_8(self)
}
func (self classStreamPeer) GetU8() Int {
	return self.ptr.API.StreamPeer_get_u8(self)
}
func (self classStreamPeer) Get16() Int {
	return self.ptr.API.StreamPeer_get_16(self)
}
func (self classStreamPeer) GetU16() Int {
	return self.ptr.API.StreamPeer_get_u16(self)
}
func (self classStreamPeer) Get32() Int {
	return self.ptr.API.StreamPeer_get_32(self)
}
func (self classStreamPeer) GetU32() Int {
	return self.ptr.API.StreamPeer_get_u32(self)
}
func (self classStreamPeer) Get64() Int {
	return self.ptr.API.StreamPeer_get_64(self)
}
func (self classStreamPeer) GetU64() Int {
	return self.ptr.API.StreamPeer_get_u64(self)
}
func (self classStreamPeer) GetFloat() Float {
	return self.ptr.API.StreamPeer_get_float(self)
}
func (self classStreamPeer) GetDouble() Float {
	return self.ptr.API.StreamPeer_get_double(self)
}
func (self classStreamPeer) GetString(bytes Int) String {
	return self.ptr.API.StreamPeer_get_string(self, bytes)
}
func (self classStreamPeer) GetUtf8String(bytes Int) String {
	return self.ptr.API.StreamPeer_get_utf8_string(self, bytes)
}
func (self classStreamPeer) GetVar(allow_objects bool) Variant {
	return self.ptr.API.StreamPeer_get_var(self, allow_objects)
}

type classStreamPeerBuffer struct{ Class[classStreamPeerBuffer] }

func (self classStreamPeerBuffer) Super() StreamPeer {
	var super StreamPeer
	super.ptr = self.ptr
	return super
}

func (self classStreamPeerBuffer) StreamPeer() StreamPeer { return self.Super() }
func (self classStreamPeerBuffer) SeekTo(position Int) {
	self.ptr.API.StreamPeerBuffer_seek(self, position)
}
func (self classStreamPeerBuffer) GetSize() Int {
	return self.ptr.API.StreamPeerBuffer_get_size(self)
}
func (self classStreamPeerBuffer) GetPosition() Int {
	return self.ptr.API.StreamPeerBuffer_get_position(self)
}
func (self classStreamPeerBuffer) Resize(size Int) {
	self.ptr.API.StreamPeerBuffer_resize(self, size)
}
func (self classStreamPeerBuffer) SetDataArray(data PackedByteArray) {
	self.ptr.API.StreamPeerBuffer_set_data_array(self, data)
}
func (self classStreamPeerBuffer) GetDataArray() PackedByteArray {
	return self.ptr.API.StreamPeerBuffer_get_data_array(self)
}
func (self classStreamPeerBuffer) Clear() {
	self.ptr.API.StreamPeerBuffer_clear(self)
}
func (self classStreamPeerBuffer) Duplicate() StreamPeerBuffer {
	return self.ptr.API.StreamPeerBuffer_duplicate(self)
}

type classStreamPeerExtension struct {
	Class[classStreamPeerExtension]
}

func (self classStreamPeerExtension) Super() StreamPeer {
	var super StreamPeer
	super.ptr = self.ptr
	return super
}

func (self classStreamPeerExtension) StreamPeer() StreamPeer { return self.Super() }

type classStreamPeerGZIP struct{ Class[classStreamPeerGZIP] }

func (self classStreamPeerGZIP) Super() StreamPeer {
	var super StreamPeer
	super.ptr = self.ptr
	return super
}

func (self classStreamPeerGZIP) StreamPeer() StreamPeer { return self.Super() }
func (self classStreamPeerGZIP) StartCompression(use_deflate bool, buffer_size Int) int64 {
	return self.ptr.API.StreamPeerGZIP_start_compression(self, use_deflate, buffer_size)
}
func (self classStreamPeerGZIP) StartDecompression(use_deflate bool, buffer_size Int) int64 {
	return self.ptr.API.StreamPeerGZIP_start_decompression(self, use_deflate, buffer_size)
}
func (self classStreamPeerGZIP) Finish() int64 {
	return self.ptr.API.StreamPeerGZIP_finish(self)
}
func (self classStreamPeerGZIP) Clear() {
	self.ptr.API.StreamPeerGZIP_clear(self)
}

type classStreamPeerTCP struct{ Class[classStreamPeerTCP] }

func (self classStreamPeerTCP) Super() StreamPeer {
	var super StreamPeer
	super.ptr = self.ptr
	return super
}

func (self classStreamPeerTCP) StreamPeer() StreamPeer { return self.Super() }
func (self classStreamPeerTCP) Bind(port Int, host String) int64 {
	return self.ptr.API.StreamPeerTCP_bind(self, port, host)
}
func (self classStreamPeerTCP) ConnectToHost(host String, port Int) int64 {
	return self.ptr.API.StreamPeerTCP_connect_to_host(self, host, port)
}
func (self classStreamPeerTCP) Poll() int64 {
	return self.ptr.API.StreamPeerTCP_poll(self)
}
func (self classStreamPeerTCP) GetStatus() StreamPeerTCPStatus {
	return self.ptr.API.StreamPeerTCP_get_status(self)
}
func (self classStreamPeerTCP) GetConnectedHost() String {
	return self.ptr.API.StreamPeerTCP_get_connected_host(self)
}
func (self classStreamPeerTCP) GetConnectedPort() Int {
	return self.ptr.API.StreamPeerTCP_get_connected_port(self)
}
func (self classStreamPeerTCP) GetLocalPort() Int {
	return self.ptr.API.StreamPeerTCP_get_local_port(self)
}
func (self classStreamPeerTCP) DisconnectFromHost() {
	self.ptr.API.StreamPeerTCP_disconnect_from_host(self)
}
func (self classStreamPeerTCP) SetNoDelay(enabled bool) {
	self.ptr.API.StreamPeerTCP_set_no_delay(self, enabled)
}

type classStreamPeerTLS struct{ Class[classStreamPeerTLS] }

func (self classStreamPeerTLS) Super() StreamPeer {
	var super StreamPeer
	super.ptr = self.ptr
	return super
}

func (self classStreamPeerTLS) StreamPeer() StreamPeer { return self.Super() }
func (self classStreamPeerTLS) Poll() {
	self.ptr.API.StreamPeerTLS_poll(self)
}
func (self classStreamPeerTLS) AcceptStream(stream StreamPeer, server_options TLSOptions) int64 {
	return self.ptr.API.StreamPeerTLS_accept_stream(self, stream, server_options)
}
func (self classStreamPeerTLS) ConnectToStream(stream StreamPeer, common_name String, client_options TLSOptions) int64 {
	return self.ptr.API.StreamPeerTLS_connect_to_stream(self, stream, common_name, client_options)
}
func (self classStreamPeerTLS) GetStatus() StreamPeerTLSStatus {
	return self.ptr.API.StreamPeerTLS_get_status(self)
}
func (self classStreamPeerTLS) GetStream() StreamPeer {
	return self.ptr.API.StreamPeerTLS_get_stream(self)
}
func (self classStreamPeerTLS) DisconnectFromStream() {
	self.ptr.API.StreamPeerTLS_disconnect_from_stream(self)
}

type classStyleBox struct{ Class[classStyleBox] }

func (self classStyleBox) Super() Resource { var super Resource; super.ptr = self.ptr; return super }

func (self classStyleBox) Resource() Resource { return self.Super() }
func (self classStyleBox) GetMinimumSize() Vector2 {
	return self.ptr.API.StyleBox_get_minimum_size(self)
}
func (self classStyleBox) SetContentMargin(margin Side, offset Float) {
	self.ptr.API.StyleBox_set_content_margin(self, margin, offset)
}
func (self classStyleBox) SetContentMarginAll(offset Float) {
	self.ptr.API.StyleBox_set_content_margin_all(self, offset)
}
func (self classStyleBox) GetContentMargin(margin Side) Float {
	return self.ptr.API.StyleBox_get_content_margin(self, margin)
}
func (self classStyleBox) GetMargin(margin Side) Float {
	return self.ptr.API.StyleBox_get_margin(self, margin)
}
func (self classStyleBox) GetOffset() Vector2 {
	return self.ptr.API.StyleBox_get_offset(self)
}
func (self classStyleBox) Draw(canvas_item RID, rect Rect2) {
	self.ptr.API.StyleBox_draw(self, canvas_item, rect)
}
func (self classStyleBox) GetCurrentItemDrawn() CanvasItem {
	return self.ptr.API.StyleBox_get_current_item_drawn(self)
}
func (self classStyleBox) TestMask(point Vector2, rect Rect2) bool {
	return self.ptr.API.StyleBox_test_mask(self, point, rect)
}

type classStyleBoxEmpty struct{ Class[classStyleBoxEmpty] }

func (self classStyleBoxEmpty) Super() StyleBox {
	var super StyleBox
	super.ptr = self.ptr
	return super
}

func (self classStyleBoxEmpty) StyleBox() StyleBox { return self.Super() }

type classStyleBoxFlat struct{ Class[classStyleBoxFlat] }

func (self classStyleBoxFlat) Super() StyleBox {
	var super StyleBox
	super.ptr = self.ptr
	return super
}

func (self classStyleBoxFlat) StyleBox() StyleBox { return self.Super() }
func (self classStyleBoxFlat) SetBgColor(color Color) {
	self.ptr.API.StyleBoxFlat_set_bg_color(self, color)
}
func (self classStyleBoxFlat) GetBgColor() Color {
	return self.ptr.API.StyleBoxFlat_get_bg_color(self)
}
func (self classStyleBoxFlat) SetBorderColor(color Color) {
	self.ptr.API.StyleBoxFlat_set_border_color(self, color)
}
func (self classStyleBoxFlat) GetBorderColor() Color {
	return self.ptr.API.StyleBoxFlat_get_border_color(self)
}
func (self classStyleBoxFlat) SetBorderWidthAll(width Int) {
	self.ptr.API.StyleBoxFlat_set_border_width_all(self, width)
}
func (self classStyleBoxFlat) GetBorderWidthMin() Int {
	return self.ptr.API.StyleBoxFlat_get_border_width_min(self)
}
func (self classStyleBoxFlat) SetBorderWidth(margin Side, width Int) {
	self.ptr.API.StyleBoxFlat_set_border_width(self, margin, width)
}
func (self classStyleBoxFlat) GetBorderWidth(margin Side) Int {
	return self.ptr.API.StyleBoxFlat_get_border_width(self, margin)
}
func (self classStyleBoxFlat) SetBorderBlend(blend bool) {
	self.ptr.API.StyleBoxFlat_set_border_blend(self, blend)
}
func (self classStyleBoxFlat) GetBorderBlend() bool {
	return self.ptr.API.StyleBoxFlat_get_border_blend(self)
}
func (self classStyleBoxFlat) SetCornerRadiusAll(radius Int) {
	self.ptr.API.StyleBoxFlat_set_corner_radius_all(self, radius)
}
func (self classStyleBoxFlat) SetCornerRadius(corner Corner, radius Int) {
	self.ptr.API.StyleBoxFlat_set_corner_radius(self, corner, radius)
}
func (self classStyleBoxFlat) GetCornerRadius(corner Corner) Int {
	return self.ptr.API.StyleBoxFlat_get_corner_radius(self, corner)
}
func (self classStyleBoxFlat) SetExpandMargin(margin Side, size Float) {
	self.ptr.API.StyleBoxFlat_set_expand_margin(self, margin, size)
}
func (self classStyleBoxFlat) SetExpandMarginAll(size Float) {
	self.ptr.API.StyleBoxFlat_set_expand_margin_all(self, size)
}
func (self classStyleBoxFlat) GetExpandMargin(margin Side) Float {
	return self.ptr.API.StyleBoxFlat_get_expand_margin(self, margin)
}
func (self classStyleBoxFlat) SetDrawCenter(draw_center bool) {
	self.ptr.API.StyleBoxFlat_set_draw_center(self, draw_center)
}
func (self classStyleBoxFlat) IsDrawCenterEnabled() bool {
	return self.ptr.API.StyleBoxFlat_is_draw_center_enabled(self)
}
func (self classStyleBoxFlat) SetSkew(skew Vector2) {
	self.ptr.API.StyleBoxFlat_set_skew(self, skew)
}
func (self classStyleBoxFlat) GetSkew() Vector2 {
	return self.ptr.API.StyleBoxFlat_get_skew(self)
}
func (self classStyleBoxFlat) SetShadowColor(color Color) {
	self.ptr.API.StyleBoxFlat_set_shadow_color(self, color)
}
func (self classStyleBoxFlat) GetShadowColor() Color {
	return self.ptr.API.StyleBoxFlat_get_shadow_color(self)
}
func (self classStyleBoxFlat) SetShadowSize(size Int) {
	self.ptr.API.StyleBoxFlat_set_shadow_size(self, size)
}
func (self classStyleBoxFlat) GetShadowSize() Int {
	return self.ptr.API.StyleBoxFlat_get_shadow_size(self)
}
func (self classStyleBoxFlat) SetShadowOffset(offset Vector2) {
	self.ptr.API.StyleBoxFlat_set_shadow_offset(self, offset)
}
func (self classStyleBoxFlat) GetShadowOffset() Vector2 {
	return self.ptr.API.StyleBoxFlat_get_shadow_offset(self)
}
func (self classStyleBoxFlat) SetAntiAliased(anti_aliased bool) {
	self.ptr.API.StyleBoxFlat_set_anti_aliased(self, anti_aliased)
}
func (self classStyleBoxFlat) IsAntiAliased() bool {
	return self.ptr.API.StyleBoxFlat_is_anti_aliased(self)
}
func (self classStyleBoxFlat) SetAaSize(size Float) {
	self.ptr.API.StyleBoxFlat_set_aa_size(self, size)
}
func (self classStyleBoxFlat) GetAaSize() Float {
	return self.ptr.API.StyleBoxFlat_get_aa_size(self)
}
func (self classStyleBoxFlat) SetCornerDetail(detail Int) {
	self.ptr.API.StyleBoxFlat_set_corner_detail(self, detail)
}
func (self classStyleBoxFlat) GetCornerDetail() Int {
	return self.ptr.API.StyleBoxFlat_get_corner_detail(self)
}

type classStyleBoxLine struct{ Class[classStyleBoxLine] }

func (self classStyleBoxLine) Super() StyleBox {
	var super StyleBox
	super.ptr = self.ptr
	return super
}

func (self classStyleBoxLine) StyleBox() StyleBox { return self.Super() }
func (self classStyleBoxLine) SetColor(color Color) {
	self.ptr.API.StyleBoxLine_set_color(self, color)
}
func (self classStyleBoxLine) GetColor() Color {
	return self.ptr.API.StyleBoxLine_get_color(self)
}
func (self classStyleBoxLine) SetThickness(thickness Int) {
	self.ptr.API.StyleBoxLine_set_thickness(self, thickness)
}
func (self classStyleBoxLine) GetThickness() Int {
	return self.ptr.API.StyleBoxLine_get_thickness(self)
}
func (self classStyleBoxLine) SetGrowBegin(offset Float) {
	self.ptr.API.StyleBoxLine_set_grow_begin(self, offset)
}
func (self classStyleBoxLine) GetGrowBegin() Float {
	return self.ptr.API.StyleBoxLine_get_grow_begin(self)
}
func (self classStyleBoxLine) SetGrowEnd(offset Float) {
	self.ptr.API.StyleBoxLine_set_grow_end(self, offset)
}
func (self classStyleBoxLine) GetGrowEnd() Float {
	return self.ptr.API.StyleBoxLine_get_grow_end(self)
}
func (self classStyleBoxLine) SetVertical(vertical bool) {
	self.ptr.API.StyleBoxLine_set_vertical(self, vertical)
}
func (self classStyleBoxLine) IsVertical() bool {
	return self.ptr.API.StyleBoxLine_is_vertical(self)
}

type classStyleBoxTexture struct{ Class[classStyleBoxTexture] }

func (self classStyleBoxTexture) Super() StyleBox {
	var super StyleBox
	super.ptr = self.ptr
	return super
}

func (self classStyleBoxTexture) StyleBox() StyleBox { return self.Super() }
func (self classStyleBoxTexture) SetTexture(texture Texture2D) {
	self.ptr.API.StyleBoxTexture_set_texture(self, texture)
}
func (self classStyleBoxTexture) GetTexture() Texture2D {
	return self.ptr.API.StyleBoxTexture_get_texture(self)
}
func (self classStyleBoxTexture) SetTextureMargin(margin Side, size Float) {
	self.ptr.API.StyleBoxTexture_set_texture_margin(self, margin, size)
}
func (self classStyleBoxTexture) SetTextureMarginAll(size Float) {
	self.ptr.API.StyleBoxTexture_set_texture_margin_all(self, size)
}
func (self classStyleBoxTexture) GetTextureMargin(margin Side) Float {
	return self.ptr.API.StyleBoxTexture_get_texture_margin(self, margin)
}
func (self classStyleBoxTexture) SetExpandMargin(margin Side, size Float) {
	self.ptr.API.StyleBoxTexture_set_expand_margin(self, margin, size)
}
func (self classStyleBoxTexture) SetExpandMarginAll(size Float) {
	self.ptr.API.StyleBoxTexture_set_expand_margin_all(self, size)
}
func (self classStyleBoxTexture) GetExpandMargin(margin Side) Float {
	return self.ptr.API.StyleBoxTexture_get_expand_margin(self, margin)
}
func (self classStyleBoxTexture) SetRegionRect(region Rect2) {
	self.ptr.API.StyleBoxTexture_set_region_rect(self, region)
}
func (self classStyleBoxTexture) GetRegionRect() Rect2 {
	return self.ptr.API.StyleBoxTexture_get_region_rect(self)
}
func (self classStyleBoxTexture) SetDrawCenter(enable bool) {
	self.ptr.API.StyleBoxTexture_set_draw_center(self, enable)
}
func (self classStyleBoxTexture) IsDrawCenterEnabled() bool {
	return self.ptr.API.StyleBoxTexture_is_draw_center_enabled(self)
}
func (self classStyleBoxTexture) SetModulate(color Color) {
	self.ptr.API.StyleBoxTexture_set_modulate(self, color)
}
func (self classStyleBoxTexture) GetModulate() Color {
	return self.ptr.API.StyleBoxTexture_get_modulate(self)
}
func (self classStyleBoxTexture) SetHAxisStretchMode(mode StyleBoxTextureAxisStretchMode) {
	self.ptr.API.StyleBoxTexture_set_h_axis_stretch_mode(self, mode)
}
func (self classStyleBoxTexture) GetHAxisStretchMode() StyleBoxTextureAxisStretchMode {
	return self.ptr.API.StyleBoxTexture_get_h_axis_stretch_mode(self)
}
func (self classStyleBoxTexture) SetVAxisStretchMode(mode StyleBoxTextureAxisStretchMode) {
	self.ptr.API.StyleBoxTexture_set_v_axis_stretch_mode(self, mode)
}
func (self classStyleBoxTexture) GetVAxisStretchMode() StyleBoxTextureAxisStretchMode {
	return self.ptr.API.StyleBoxTexture_get_v_axis_stretch_mode(self)
}

type classSubViewport struct{ Class[classSubViewport] }

func (self classSubViewport) Super() Viewport { var super Viewport; super.ptr = self.ptr; return super }

func (self classSubViewport) Viewport() Viewport { return self.Super() }
func (self classSubViewport) SetSize(size Vector2i) {
	self.ptr.API.SubViewport_set_size(self, size)
}
func (self classSubViewport) GetSize() Vector2i {
	return self.ptr.API.SubViewport_get_size(self)
}
func (self classSubViewport) SetSize2dOverride(size Vector2i) {
	self.ptr.API.SubViewport_set_size_2d_override(self, size)
}
func (self classSubViewport) GetSize2dOverride() Vector2i {
	return self.ptr.API.SubViewport_get_size_2d_override(self)
}
func (self classSubViewport) SetSize2dOverrideStretch(enable bool) {
	self.ptr.API.SubViewport_set_size_2d_override_stretch(self, enable)
}
func (self classSubViewport) IsSize2dOverrideStretchEnabled() bool {
	return self.ptr.API.SubViewport_is_size_2d_override_stretch_enabled(self)
}
func (self classSubViewport) SetUpdateMode(mode SubViewportUpdateMode) {
	self.ptr.API.SubViewport_set_update_mode(self, mode)
}
func (self classSubViewport) GetUpdateMode() SubViewportUpdateMode {
	return self.ptr.API.SubViewport_get_update_mode(self)
}
func (self classSubViewport) SetClearMode(mode SubViewportClearMode) {
	self.ptr.API.SubViewport_set_clear_mode(self, mode)
}
func (self classSubViewport) GetClearMode() SubViewportClearMode {
	return self.ptr.API.SubViewport_get_clear_mode(self)
}

type classSubViewportContainer struct {
	Class[classSubViewportContainer]
}

func (self classSubViewportContainer) Super() Container {
	var super Container
	super.ptr = self.ptr
	return super
}

func (self classSubViewportContainer) Container() Container { return self.Super() }
func (self classSubViewportContainer) SetStretch(enable bool) {
	self.ptr.API.SubViewportContainer_set_stretch(self, enable)
}
func (self classSubViewportContainer) IsStretchEnabled() bool {
	return self.ptr.API.SubViewportContainer_is_stretch_enabled(self)
}
func (self classSubViewportContainer) SetStretchShrink(amount Int) {
	self.ptr.API.SubViewportContainer_set_stretch_shrink(self, amount)
}
func (self classSubViewportContainer) GetStretchShrink() Int {
	return self.ptr.API.SubViewportContainer_get_stretch_shrink(self)
}

type classSurfaceTool struct{ Class[classSurfaceTool] }

func (self classSurfaceTool) Super() RefCounted {
	var super RefCounted
	super.ptr = self.ptr
	return super
}

func (self classSurfaceTool) RefCounted() RefCounted { return self.Super() }
func (self classSurfaceTool) SetSkinWeightCount(count SurfaceToolSkinWeightCount) {
	self.ptr.API.SurfaceTool_set_skin_weight_count(self, count)
}
func (self classSurfaceTool) GetSkinWeightCount() SurfaceToolSkinWeightCount {
	return self.ptr.API.SurfaceTool_get_skin_weight_count(self)
}
func (self classSurfaceTool) SetCustomFormat(channel_index Int, format SurfaceToolCustomFormat) {
	self.ptr.API.SurfaceTool_set_custom_format(self, channel_index, format)
}
func (self classSurfaceTool) GetCustomFormat(channel_index Int) SurfaceToolCustomFormat {
	return self.ptr.API.SurfaceTool_get_custom_format(self, channel_index)
}
func (self classSurfaceTool) Begin(primitive MeshPrimitiveType) {
	self.ptr.API.SurfaceTool_begin(self, primitive)
}
func (self classSurfaceTool) AddVertex(vertex Vector3) {
	self.ptr.API.SurfaceTool_add_vertex(self, vertex)
}
func (self classSurfaceTool) SetColor(color Color) {
	self.ptr.API.SurfaceTool_set_color(self, color)
}
func (self classSurfaceTool) SetNormal(normal Vector3) {
	self.ptr.API.SurfaceTool_set_normal(self, normal)
}
func (self classSurfaceTool) SetTangent(tangent Plane) {
	self.ptr.API.SurfaceTool_set_tangent(self, tangent)
}
func (self classSurfaceTool) SetUv(uv Vector2) {
	self.ptr.API.SurfaceTool_set_uv(self, uv)
}
func (self classSurfaceTool) SetUv2(uv2 Vector2) {
	self.ptr.API.SurfaceTool_set_uv2(self, uv2)
}
func (self classSurfaceTool) SetBones(bones PackedInt32Array) {
	self.ptr.API.SurfaceTool_set_bones(self, bones)
}
func (self classSurfaceTool) SetWeights(weights PackedFloat32Array) {
	self.ptr.API.SurfaceTool_set_weights(self, weights)
}
func (self classSurfaceTool) SetCustom(channel_index Int, custom_color Color) {
	self.ptr.API.SurfaceTool_set_custom(self, channel_index, custom_color)
}
func (self classSurfaceTool) SetSmoothGroup(index Int) {
	self.ptr.API.SurfaceTool_set_smooth_group(self, index)
}
func (self classSurfaceTool) AddTriangleFan(vertices PackedVector3Array, uvs PackedVector2Array, colors PackedColorArray, uv2s PackedVector2Array, normals PackedVector3Array, tangents ArrayOf[Plane]) {
	self.ptr.API.SurfaceTool_add_triangle_fan(self, vertices, uvs, colors, uv2s, normals, tangents)
}
func (self classSurfaceTool) AddIndex(index Int) {
	self.ptr.API.SurfaceTool_add_index(self, index)
}
func (self classSurfaceTool) Index() {
	self.ptr.API.SurfaceTool_index(self)
}
func (self classSurfaceTool) Deindex() {
	self.ptr.API.SurfaceTool_deindex(self)
}
func (self classSurfaceTool) GenerateNormals(flip bool) {
	self.ptr.API.SurfaceTool_generate_normals(self, flip)
}
func (self classSurfaceTool) GenerateTangents() {
	self.ptr.API.SurfaceTool_generate_tangents(self)
}
func (self classSurfaceTool) OptimizeIndicesForCache() {
	self.ptr.API.SurfaceTool_optimize_indices_for_cache(self)
}
func (self classSurfaceTool) GetAabb() AABB {
	return self.ptr.API.SurfaceTool_get_aabb(self)
}
func (self classSurfaceTool) GenerateLod(nd_threshold Float, target_index_count Int) PackedInt32Array {
	return self.ptr.API.SurfaceTool_generate_lod(self, nd_threshold, target_index_count)
}
func (self classSurfaceTool) SetMaterial(material Material) {
	self.ptr.API.SurfaceTool_set_material(self, material)
}
func (self classSurfaceTool) GetPrimitiveType() MeshPrimitiveType {
	return self.ptr.API.SurfaceTool_get_primitive_type(self)
}
func (self classSurfaceTool) Clear() {
	self.ptr.API.SurfaceTool_clear(self)
}
func (self classSurfaceTool) CreateFrom(existing Mesh, surface Int) {
	self.ptr.API.SurfaceTool_create_from(self, existing, surface)
}
func (self classSurfaceTool) CreateFromBlendShape(existing Mesh, surface Int, blend_shape String) {
	self.ptr.API.SurfaceTool_create_from_blend_shape(self, existing, surface, blend_shape)
}
func (self classSurfaceTool) AppendFrom(existing Mesh, surface Int, transform Transform3D) {
	self.ptr.API.SurfaceTool_append_from(self, existing, surface, transform)
}
func (self classSurfaceTool) Commit(existing ArrayMesh, flags Int) ArrayMesh {
	return self.ptr.API.SurfaceTool_commit(self, existing, flags)
}
func (self classSurfaceTool) CommitToArrays() Array {
	return self.ptr.API.SurfaceTool_commit_to_arrays(self)
}

type classSyntaxHighlighter struct{ Class[classSyntaxHighlighter] }

func (self classSyntaxHighlighter) Super() Resource {
	var super Resource
	super.ptr = self.ptr
	return super
}

func (self classSyntaxHighlighter) Resource() Resource { return self.Super() }
func (self classSyntaxHighlighter) GetLineSyntaxHighlighting(line Int) Dictionary {
	return self.ptr.API.SyntaxHighlighter_get_line_syntax_highlighting(self, line)
}
func (self classSyntaxHighlighter) UpdateCache() {
	self.ptr.API.SyntaxHighlighter_update_cache(self)
}
func (self classSyntaxHighlighter) ClearHighlightingCache() {
	self.ptr.API.SyntaxHighlighter_clear_highlighting_cache(self)
}
func (self classSyntaxHighlighter) GetTextEdit() TextEdit {
	return self.ptr.API.SyntaxHighlighter_get_text_edit(self)
}

type classSystemFont struct{ Class[classSystemFont] }

func (self classSystemFont) Super() Font { var super Font; super.ptr = self.ptr; return super }

func (self classSystemFont) Font() Font { return self.Super() }
func (self classSystemFont) SetAntialiasing(antialiasing TextServerFontAntialiasing) {
	self.ptr.API.SystemFont_set_antialiasing(self, antialiasing)
}
func (self classSystemFont) GetAntialiasing() TextServerFontAntialiasing {
	return self.ptr.API.SystemFont_get_antialiasing(self)
}
func (self classSystemFont) SetGenerateMipmaps(generate_mipmaps bool) {
	self.ptr.API.SystemFont_set_generate_mipmaps(self, generate_mipmaps)
}
func (self classSystemFont) GetGenerateMipmaps() bool {
	return self.ptr.API.SystemFont_get_generate_mipmaps(self)
}
func (self classSystemFont) SetAllowSystemFallback(allow_system_fallback bool) {
	self.ptr.API.SystemFont_set_allow_system_fallback(self, allow_system_fallback)
}
func (self classSystemFont) IsAllowSystemFallback() bool {
	return self.ptr.API.SystemFont_is_allow_system_fallback(self)
}
func (self classSystemFont) SetForceAutohinter(force_autohinter bool) {
	self.ptr.API.SystemFont_set_force_autohinter(self, force_autohinter)
}
func (self classSystemFont) IsForceAutohinter() bool {
	return self.ptr.API.SystemFont_is_force_autohinter(self)
}
func (self classSystemFont) SetHinting(hinting TextServerHinting) {
	self.ptr.API.SystemFont_set_hinting(self, hinting)
}
func (self classSystemFont) GetHinting() TextServerHinting {
	return self.ptr.API.SystemFont_get_hinting(self)
}
func (self classSystemFont) SetSubpixelPositioning(subpixel_positioning TextServerSubpixelPositioning) {
	self.ptr.API.SystemFont_set_subpixel_positioning(self, subpixel_positioning)
}
func (self classSystemFont) GetSubpixelPositioning() TextServerSubpixelPositioning {
	return self.ptr.API.SystemFont_get_subpixel_positioning(self)
}
func (self classSystemFont) SetMultichannelSignedDistanceField(msdf bool) {
	self.ptr.API.SystemFont_set_multichannel_signed_distance_field(self, msdf)
}
func (self classSystemFont) IsMultichannelSignedDistanceField() bool {
	return self.ptr.API.SystemFont_is_multichannel_signed_distance_field(self)
}
func (self classSystemFont) SetMsdfPixelRange(msdf_pixel_range Int) {
	self.ptr.API.SystemFont_set_msdf_pixel_range(self, msdf_pixel_range)
}
func (self classSystemFont) GetMsdfPixelRange() Int {
	return self.ptr.API.SystemFont_get_msdf_pixel_range(self)
}
func (self classSystemFont) SetMsdfSize(msdf_size Int) {
	self.ptr.API.SystemFont_set_msdf_size(self, msdf_size)
}
func (self classSystemFont) GetMsdfSize() Int {
	return self.ptr.API.SystemFont_get_msdf_size(self)
}
func (self classSystemFont) SetOversampling(oversampling Float) {
	self.ptr.API.SystemFont_set_oversampling(self, oversampling)
}
func (self classSystemFont) GetOversampling() Float {
	return self.ptr.API.SystemFont_get_oversampling(self)
}
func (self classSystemFont) GetFontNames() PackedStringArray {
	return self.ptr.API.SystemFont_get_font_names(self)
}
func (self classSystemFont) SetFontNames(names PackedStringArray) {
	self.ptr.API.SystemFont_set_font_names(self, names)
}
func (self classSystemFont) GetFontItalic() bool {
	return self.ptr.API.SystemFont_get_font_italic(self)
}
func (self classSystemFont) SetFontItalic(italic bool) {
	self.ptr.API.SystemFont_set_font_italic(self, italic)
}
func (self classSystemFont) SetFontWeight(weight Int) {
	self.ptr.API.SystemFont_set_font_weight(self, weight)
}
func (self classSystemFont) SetFontStretch(stretch Int) {
	self.ptr.API.SystemFont_set_font_stretch(self, stretch)
}

type classTCPServer struct{ Class[classTCPServer] }

func (self classTCPServer) Super() RefCounted {
	var super RefCounted
	super.ptr = self.ptr
	return super
}

func (self classTCPServer) RefCounted() RefCounted { return self.Super() }
func (self classTCPServer) Listen(port Int, bind_address String) int64 {
	return self.ptr.API.TCPServer_listen(self, port, bind_address)
}
func (self classTCPServer) IsConnectionAvailable() bool {
	return self.ptr.API.TCPServer_is_connection_available(self)
}
func (self classTCPServer) IsListening() bool {
	return self.ptr.API.TCPServer_is_listening(self)
}
func (self classTCPServer) GetLocalPort() Int {
	return self.ptr.API.TCPServer_get_local_port(self)
}
func (self classTCPServer) TakeConnection() StreamPeerTCP {
	return self.ptr.API.TCPServer_take_connection(self)
}
func (self classTCPServer) Stop() {
	self.ptr.API.TCPServer_stop(self)
}

type classTLSOptions struct{ Class[classTLSOptions] }

func (self classTLSOptions) Super() RefCounted {
	var super RefCounted
	super.ptr = self.ptr
	return super
}

func (self classTLSOptions) RefCounted() RefCounted { return self.Super() }
func (self classTLSOptions) Client(trusted_chain X509Certificate, common_name_override String) TLSOptions {
	return self.ptr.API.TLSOptions_client(self, trusted_chain, common_name_override)
}
func (self classTLSOptions) ClientUnsafe(trusted_chain X509Certificate) TLSOptions {
	return self.ptr.API.TLSOptions_client_unsafe(self, trusted_chain)
}
func (self classTLSOptions) Server(key CryptoKey, certificate X509Certificate) TLSOptions {
	return self.ptr.API.TLSOptions_server(self, key, certificate)
}

type classTabBar struct{ Class[classTabBar] }

func (self classTabBar) Super() Control { var super Control; super.ptr = self.ptr; return super }

func (self classTabBar) Control() Control { return self.Super() }
func (self classTabBar) SetTabCount(count Int) {
	self.ptr.API.TabBar_set_tab_count(self, count)
}
func (self classTabBar) GetTabCount() Int {
	return self.ptr.API.TabBar_get_tab_count(self)
}
func (self classTabBar) SetCurrentTab(tab_idx Int) {
	self.ptr.API.TabBar_set_current_tab(self, tab_idx)
}
func (self classTabBar) GetCurrentTab() Int {
	return self.ptr.API.TabBar_get_current_tab(self)
}
func (self classTabBar) GetPreviousTab() Int {
	return self.ptr.API.TabBar_get_previous_tab(self)
}
func (self classTabBar) SelectPreviousAvailable() bool {
	return self.ptr.API.TabBar_select_previous_available(self)
}
func (self classTabBar) SelectNextAvailable() bool {
	return self.ptr.API.TabBar_select_next_available(self)
}
func (self classTabBar) SetTabTitle(tab_idx Int, title String) {
	self.ptr.API.TabBar_set_tab_title(self, tab_idx, title)
}
func (self classTabBar) GetTabTitle(tab_idx Int) String {
	return self.ptr.API.TabBar_get_tab_title(self, tab_idx)
}
func (self classTabBar) SetTabTextDirection(tab_idx Int, direction ControlTextDirection) {
	self.ptr.API.TabBar_set_tab_text_direction(self, tab_idx, direction)
}
func (self classTabBar) GetTabTextDirection(tab_idx Int) ControlTextDirection {
	return self.ptr.API.TabBar_get_tab_text_direction(self, tab_idx)
}
func (self classTabBar) SetTabLanguage(tab_idx Int, language String) {
	self.ptr.API.TabBar_set_tab_language(self, tab_idx, language)
}
func (self classTabBar) GetTabLanguage(tab_idx Int) String {
	return self.ptr.API.TabBar_get_tab_language(self, tab_idx)
}
func (self classTabBar) SetTabIcon(tab_idx Int, icon Texture2D) {
	self.ptr.API.TabBar_set_tab_icon(self, tab_idx, icon)
}
func (self classTabBar) GetTabIcon(tab_idx Int) Texture2D {
	return self.ptr.API.TabBar_get_tab_icon(self, tab_idx)
}
func (self classTabBar) SetTabIconMaxWidth(tab_idx Int, width Int) {
	self.ptr.API.TabBar_set_tab_icon_max_width(self, tab_idx, width)
}
func (self classTabBar) GetTabIconMaxWidth(tab_idx Int) Int {
	return self.ptr.API.TabBar_get_tab_icon_max_width(self, tab_idx)
}
func (self classTabBar) SetTabButtonIcon(tab_idx Int, icon Texture2D) {
	self.ptr.API.TabBar_set_tab_button_icon(self, tab_idx, icon)
}
func (self classTabBar) GetTabButtonIcon(tab_idx Int) Texture2D {
	return self.ptr.API.TabBar_get_tab_button_icon(self, tab_idx)
}
func (self classTabBar) SetTabDisabled(tab_idx Int, disabled bool) {
	self.ptr.API.TabBar_set_tab_disabled(self, tab_idx, disabled)
}
func (self classTabBar) IsTabDisabled(tab_idx Int) bool {
	return self.ptr.API.TabBar_is_tab_disabled(self, tab_idx)
}
func (self classTabBar) SetTabHidden(tab_idx Int, hidden bool) {
	self.ptr.API.TabBar_set_tab_hidden(self, tab_idx, hidden)
}
func (self classTabBar) IsTabHidden(tab_idx Int) bool {
	return self.ptr.API.TabBar_is_tab_hidden(self, tab_idx)
}
func (self classTabBar) SetTabMetadata(tab_idx Int, metadata Variant) {
	self.ptr.API.TabBar_set_tab_metadata(self, tab_idx, metadata)
}
func (self classTabBar) GetTabMetadata(tab_idx Int) Variant {
	return self.ptr.API.TabBar_get_tab_metadata(self, tab_idx)
}
func (self classTabBar) RemoveTab(tab_idx Int) {
	self.ptr.API.TabBar_remove_tab(self, tab_idx)
}
func (self classTabBar) AddTab(title String, icon Texture2D) {
	self.ptr.API.TabBar_add_tab(self, title, icon)
}
func (self classTabBar) GetTabIdxAtPoint(point Vector2) Int {
	return self.ptr.API.TabBar_get_tab_idx_at_point(self, point)
}
func (self classTabBar) SetTabAlignment(alignment TabBarAlignmentMode) {
	self.ptr.API.TabBar_set_tab_alignment(self, alignment)
}
func (self classTabBar) GetTabAlignment() TabBarAlignmentMode {
	return self.ptr.API.TabBar_get_tab_alignment(self)
}
func (self classTabBar) SetClipTabs(clip_tabs bool) {
	self.ptr.API.TabBar_set_clip_tabs(self, clip_tabs)
}
func (self classTabBar) GetClipTabs() bool {
	return self.ptr.API.TabBar_get_clip_tabs(self)
}
func (self classTabBar) GetTabOffset() Int {
	return self.ptr.API.TabBar_get_tab_offset(self)
}
func (self classTabBar) GetOffsetButtonsVisible() bool {
	return self.ptr.API.TabBar_get_offset_buttons_visible(self)
}
func (self classTabBar) EnsureTabVisible(idx Int) {
	self.ptr.API.TabBar_ensure_tab_visible(self, idx)
}
func (self classTabBar) GetTabRect(tab_idx Int) Rect2 {
	return self.ptr.API.TabBar_get_tab_rect(self, tab_idx)
}
func (self classTabBar) MoveTab(from Int, to Int) {
	self.ptr.API.TabBar_move_tab(self, from, to)
}
func (self classTabBar) SetTabCloseDisplayPolicy(policy TabBarCloseButtonDisplayPolicy) {
	self.ptr.API.TabBar_set_tab_close_display_policy(self, policy)
}
func (self classTabBar) GetTabCloseDisplayPolicy() TabBarCloseButtonDisplayPolicy {
	return self.ptr.API.TabBar_get_tab_close_display_policy(self)
}
func (self classTabBar) SetMaxTabWidth(width Int) {
	self.ptr.API.TabBar_set_max_tab_width(self, width)
}
func (self classTabBar) GetMaxTabWidth() Int {
	return self.ptr.API.TabBar_get_max_tab_width(self)
}
func (self classTabBar) SetScrollingEnabled(enabled bool) {
	self.ptr.API.TabBar_set_scrolling_enabled(self, enabled)
}
func (self classTabBar) GetScrollingEnabled() bool {
	return self.ptr.API.TabBar_get_scrolling_enabled(self)
}
func (self classTabBar) SetDragToRearrangeEnabled(enabled bool) {
	self.ptr.API.TabBar_set_drag_to_rearrange_enabled(self, enabled)
}
func (self classTabBar) GetDragToRearrangeEnabled() bool {
	return self.ptr.API.TabBar_get_drag_to_rearrange_enabled(self)
}
func (self classTabBar) SetTabsRearrangeGroup(group_id Int) {
	self.ptr.API.TabBar_set_tabs_rearrange_group(self, group_id)
}
func (self classTabBar) GetTabsRearrangeGroup() Int {
	return self.ptr.API.TabBar_get_tabs_rearrange_group(self)
}
func (self classTabBar) SetScrollToSelected(enabled bool) {
	self.ptr.API.TabBar_set_scroll_to_selected(self, enabled)
}
func (self classTabBar) GetScrollToSelected() bool {
	return self.ptr.API.TabBar_get_scroll_to_selected(self)
}
func (self classTabBar) SetSelectWithRmb(enabled bool) {
	self.ptr.API.TabBar_set_select_with_rmb(self, enabled)
}
func (self classTabBar) GetSelectWithRmb() bool {
	return self.ptr.API.TabBar_get_select_with_rmb(self)
}
func (self classTabBar) ClearTabs() {
	self.ptr.API.TabBar_clear_tabs(self)
}

type classTabContainer struct{ Class[classTabContainer] }

func (self classTabContainer) Super() Container {
	var super Container
	super.ptr = self.ptr
	return super
}

func (self classTabContainer) Container() Container { return self.Super() }
func (self classTabContainer) GetTabCount() Int {
	return self.ptr.API.TabContainer_get_tab_count(self)
}
func (self classTabContainer) SetCurrentTab(tab_idx Int) {
	self.ptr.API.TabContainer_set_current_tab(self, tab_idx)
}
func (self classTabContainer) GetCurrentTab() Int {
	return self.ptr.API.TabContainer_get_current_tab(self)
}
func (self classTabContainer) GetPreviousTab() Int {
	return self.ptr.API.TabContainer_get_previous_tab(self)
}
func (self classTabContainer) SelectPreviousAvailable() bool {
	return self.ptr.API.TabContainer_select_previous_available(self)
}
func (self classTabContainer) SelectNextAvailable() bool {
	return self.ptr.API.TabContainer_select_next_available(self)
}
func (self classTabContainer) GetCurrentTabControl() Control {
	return self.ptr.API.TabContainer_get_current_tab_control(self)
}
func (self classTabContainer) GetTabBar() TabBar {
	return self.ptr.API.TabContainer_get_tab_bar(self)
}
func (self classTabContainer) GetTabControl(tab_idx Int) Control {
	return self.ptr.API.TabContainer_get_tab_control(self, tab_idx)
}
func (self classTabContainer) SetTabAlignment(alignment TabBarAlignmentMode) {
	self.ptr.API.TabContainer_set_tab_alignment(self, alignment)
}
func (self classTabContainer) GetTabAlignment() TabBarAlignmentMode {
	return self.ptr.API.TabContainer_get_tab_alignment(self)
}
func (self classTabContainer) SetTabsPosition(tabs_position TabContainerTabPosition) {
	self.ptr.API.TabContainer_set_tabs_position(self, tabs_position)
}
func (self classTabContainer) GetTabsPosition() TabContainerTabPosition {
	return self.ptr.API.TabContainer_get_tabs_position(self)
}
func (self classTabContainer) SetClipTabs(clip_tabs bool) {
	self.ptr.API.TabContainer_set_clip_tabs(self, clip_tabs)
}
func (self classTabContainer) GetClipTabs() bool {
	return self.ptr.API.TabContainer_get_clip_tabs(self)
}
func (self classTabContainer) SetTabsVisible(visible bool) {
	self.ptr.API.TabContainer_set_tabs_visible(self, visible)
}
func (self classTabContainer) AreTabsVisible() bool {
	return self.ptr.API.TabContainer_are_tabs_visible(self)
}
func (self classTabContainer) SetAllTabsInFront(is_front bool) {
	self.ptr.API.TabContainer_set_all_tabs_in_front(self, is_front)
}
func (self classTabContainer) IsAllTabsInFront() bool {
	return self.ptr.API.TabContainer_is_all_tabs_in_front(self)
}
func (self classTabContainer) SetTabTitle(tab_idx Int, title String) {
	self.ptr.API.TabContainer_set_tab_title(self, tab_idx, title)
}
func (self classTabContainer) GetTabTitle(tab_idx Int) String {
	return self.ptr.API.TabContainer_get_tab_title(self, tab_idx)
}
func (self classTabContainer) SetTabIcon(tab_idx Int, icon Texture2D) {
	self.ptr.API.TabContainer_set_tab_icon(self, tab_idx, icon)
}
func (self classTabContainer) GetTabIcon(tab_idx Int) Texture2D {
	return self.ptr.API.TabContainer_get_tab_icon(self, tab_idx)
}
func (self classTabContainer) SetTabDisabled(tab_idx Int, disabled bool) {
	self.ptr.API.TabContainer_set_tab_disabled(self, tab_idx, disabled)
}
func (self classTabContainer) IsTabDisabled(tab_idx Int) bool {
	return self.ptr.API.TabContainer_is_tab_disabled(self, tab_idx)
}
func (self classTabContainer) SetTabHidden(tab_idx Int, hidden bool) {
	self.ptr.API.TabContainer_set_tab_hidden(self, tab_idx, hidden)
}
func (self classTabContainer) IsTabHidden(tab_idx Int) bool {
	return self.ptr.API.TabContainer_is_tab_hidden(self, tab_idx)
}
func (self classTabContainer) SetTabMetadata(tab_idx Int, metadata Variant) {
	self.ptr.API.TabContainer_set_tab_metadata(self, tab_idx, metadata)
}
func (self classTabContainer) GetTabMetadata(tab_idx Int) Variant {
	return self.ptr.API.TabContainer_get_tab_metadata(self, tab_idx)
}
func (self classTabContainer) SetTabButtonIcon(tab_idx Int, icon Texture2D) {
	self.ptr.API.TabContainer_set_tab_button_icon(self, tab_idx, icon)
}
func (self classTabContainer) GetTabButtonIcon(tab_idx Int) Texture2D {
	return self.ptr.API.TabContainer_get_tab_button_icon(self, tab_idx)
}
func (self classTabContainer) GetTabIdxAtPoint(point Vector2) Int {
	return self.ptr.API.TabContainer_get_tab_idx_at_point(self, point)
}
func (self classTabContainer) GetTabIdxFromControl(control Control) Int {
	return self.ptr.API.TabContainer_get_tab_idx_from_control(self, control)
}
func (self classTabContainer) SetPopup(popup Node) {
	self.ptr.API.TabContainer_set_popup(self, popup)
}
func (self classTabContainer) GetPopup() Popup {
	return self.ptr.API.TabContainer_get_popup(self)
}
func (self classTabContainer) SetDragToRearrangeEnabled(enabled bool) {
	self.ptr.API.TabContainer_set_drag_to_rearrange_enabled(self, enabled)
}
func (self classTabContainer) GetDragToRearrangeEnabled() bool {
	return self.ptr.API.TabContainer_get_drag_to_rearrange_enabled(self)
}
func (self classTabContainer) SetTabsRearrangeGroup(group_id Int) {
	self.ptr.API.TabContainer_set_tabs_rearrange_group(self, group_id)
}
func (self classTabContainer) GetTabsRearrangeGroup() Int {
	return self.ptr.API.TabContainer_get_tabs_rearrange_group(self)
}
func (self classTabContainer) SetUseHiddenTabsForMinSize(enabled bool) {
	self.ptr.API.TabContainer_set_use_hidden_tabs_for_min_size(self, enabled)
}
func (self classTabContainer) GetUseHiddenTabsForMinSize() bool {
	return self.ptr.API.TabContainer_get_use_hidden_tabs_for_min_size(self)
}
func (self classTabContainer) SetTabFocusMode(focus_mode ControlFocusMode) {
	self.ptr.API.TabContainer_set_tab_focus_mode(self, focus_mode)
}
func (self classTabContainer) GetTabFocusMode() ControlFocusMode {
	return self.ptr.API.TabContainer_get_tab_focus_mode(self)
}

type classTextEdit struct{ Class[classTextEdit] }

func (self classTextEdit) Super() Control { var super Control; super.ptr = self.ptr; return super }

func (self classTextEdit) Control() Control { return self.Super() }
func (self classTextEdit) HasImeText() bool {
	return self.ptr.API.TextEdit_has_ime_text(self)
}
func (self classTextEdit) SetEditable(enabled bool) {
	self.ptr.API.TextEdit_set_editable(self, enabled)
}
func (self classTextEdit) IsEditable() bool {
	return self.ptr.API.TextEdit_is_editable(self)
}
func (self classTextEdit) SetTextDirection(direction ControlTextDirection) {
	self.ptr.API.TextEdit_set_text_direction(self, direction)
}
func (self classTextEdit) GetTextDirection() ControlTextDirection {
	return self.ptr.API.TextEdit_get_text_direction(self)
}
func (self classTextEdit) SetLanguage(language String) {
	self.ptr.API.TextEdit_set_language(self, language)
}
func (self classTextEdit) GetLanguage() String {
	return self.ptr.API.TextEdit_get_language(self)
}
func (self classTextEdit) SetStructuredTextBidiOverride(parser TextServerStructuredTextParser) {
	self.ptr.API.TextEdit_set_structured_text_bidi_override(self, parser)
}
func (self classTextEdit) GetStructuredTextBidiOverride() TextServerStructuredTextParser {
	return self.ptr.API.TextEdit_get_structured_text_bidi_override(self)
}
func (self classTextEdit) SetStructuredTextBidiOverrideOptions(args Array) {
	self.ptr.API.TextEdit_set_structured_text_bidi_override_options(self, args)
}
func (self classTextEdit) GetStructuredTextBidiOverrideOptions() Array {
	return self.ptr.API.TextEdit_get_structured_text_bidi_override_options(self)
}
func (self classTextEdit) SetTabSize(size Int) {
	self.ptr.API.TextEdit_set_tab_size(self, size)
}
func (self classTextEdit) GetTabSize() Int {
	return self.ptr.API.TextEdit_get_tab_size(self)
}
func (self classTextEdit) SetOvertypeModeEnabled(enabled bool) {
	self.ptr.API.TextEdit_set_overtype_mode_enabled(self, enabled)
}
func (self classTextEdit) IsOvertypeModeEnabled() bool {
	return self.ptr.API.TextEdit_is_overtype_mode_enabled(self)
}
func (self classTextEdit) SetContextMenuEnabled(enabled bool) {
	self.ptr.API.TextEdit_set_context_menu_enabled(self, enabled)
}
func (self classTextEdit) IsContextMenuEnabled() bool {
	return self.ptr.API.TextEdit_is_context_menu_enabled(self)
}
func (self classTextEdit) SetShortcutKeysEnabled(enabled bool) {
	self.ptr.API.TextEdit_set_shortcut_keys_enabled(self, enabled)
}
func (self classTextEdit) IsShortcutKeysEnabled() bool {
	return self.ptr.API.TextEdit_is_shortcut_keys_enabled(self)
}
func (self classTextEdit) SetVirtualKeyboardEnabled(enabled bool) {
	self.ptr.API.TextEdit_set_virtual_keyboard_enabled(self, enabled)
}
func (self classTextEdit) IsVirtualKeyboardEnabled() bool {
	return self.ptr.API.TextEdit_is_virtual_keyboard_enabled(self)
}
func (self classTextEdit) SetMiddleMousePasteEnabled(enabled bool) {
	self.ptr.API.TextEdit_set_middle_mouse_paste_enabled(self, enabled)
}
func (self classTextEdit) IsMiddleMousePasteEnabled() bool {
	return self.ptr.API.TextEdit_is_middle_mouse_paste_enabled(self)
}
func (self classTextEdit) Clear() {
	self.ptr.API.TextEdit_clear(self)
}
func (self classTextEdit) SetText(text String) {
	self.ptr.API.TextEdit_set_text(self, text)
}
func (self classTextEdit) GetText() String {
	return self.ptr.API.TextEdit_get_text(self)
}
func (self classTextEdit) GetLineCount() Int {
	return self.ptr.API.TextEdit_get_line_count(self)
}
func (self classTextEdit) SetPlaceholder(text String) {
	self.ptr.API.TextEdit_set_placeholder(self, text)
}
func (self classTextEdit) GetPlaceholder() String {
	return self.ptr.API.TextEdit_get_placeholder(self)
}
func (self classTextEdit) SetLine(line Int, new_text String) {
	self.ptr.API.TextEdit_set_line(self, line, new_text)
}
func (self classTextEdit) GetLine(line Int) String {
	return self.ptr.API.TextEdit_get_line(self, line)
}
func (self classTextEdit) GetLineWidth(line Int, wrap_index Int) Int {
	return self.ptr.API.TextEdit_get_line_width(self, line, wrap_index)
}
func (self classTextEdit) GetLineHeight() Int {
	return self.ptr.API.TextEdit_get_line_height(self)
}
func (self classTextEdit) GetIndentLevel(line Int) Int {
	return self.ptr.API.TextEdit_get_indent_level(self, line)
}
func (self classTextEdit) GetFirstNonWhitespaceColumn(line Int) Int {
	return self.ptr.API.TextEdit_get_first_non_whitespace_column(self, line)
}
func (self classTextEdit) SwapLines(from_line Int, to_line Int) {
	self.ptr.API.TextEdit_swap_lines(self, from_line, to_line)
}
func (self classTextEdit) InsertLineAt(line Int, text String) {
	self.ptr.API.TextEdit_insert_line_at(self, line, text)
}
func (self classTextEdit) InsertTextAtCaret(text String, caret_index Int) {
	self.ptr.API.TextEdit_insert_text_at_caret(self, text, caret_index)
}
func (self classTextEdit) RemoveText(from_line Int, from_column Int, to_line Int, to_column Int) {
	self.ptr.API.TextEdit_remove_text(self, from_line, from_column, to_line, to_column)
}
func (self classTextEdit) GetLastUnhiddenLine() Int {
	return self.ptr.API.TextEdit_get_last_unhidden_line(self)
}
func (self classTextEdit) GetNextVisibleLineOffsetFrom(line Int, visible_amount Int) Int {
	return self.ptr.API.TextEdit_get_next_visible_line_offset_from(self, line, visible_amount)
}
func (self classTextEdit) GetNextVisibleLineIndexOffsetFrom(line Int, wrap_index Int, visible_amount Int) Vector2i {
	return self.ptr.API.TextEdit_get_next_visible_line_index_offset_from(self, line, wrap_index, visible_amount)
}
func (self classTextEdit) Backspace(caret_index Int) {
	self.ptr.API.TextEdit_backspace(self, caret_index)
}
func (self classTextEdit) Cut(caret_index Int) {
	self.ptr.API.TextEdit_cut(self, caret_index)
}
func (self classTextEdit) Copy(caret_index Int) {
	self.ptr.API.TextEdit_copy(self, caret_index)
}
func (self classTextEdit) Paste(caret_index Int) {
	self.ptr.API.TextEdit_paste(self, caret_index)
}
func (self classTextEdit) PastePrimaryClipboard(caret_index Int) {
	self.ptr.API.TextEdit_paste_primary_clipboard(self, caret_index)
}
func (self classTextEdit) StartAction(action TextEditEditAction) {
	self.ptr.API.TextEdit_start_action(self, action)
}
func (self classTextEdit) EndAction() {
	self.ptr.API.TextEdit_end_action(self)
}
func (self classTextEdit) BeginComplexOperation() {
	self.ptr.API.TextEdit_begin_complex_operation(self)
}
func (self classTextEdit) EndComplexOperation() {
	self.ptr.API.TextEdit_end_complex_operation(self)
}
func (self classTextEdit) HasUndo() bool {
	return self.ptr.API.TextEdit_has_undo(self)
}
func (self classTextEdit) HasRedo() bool {
	return self.ptr.API.TextEdit_has_redo(self)
}
func (self classTextEdit) Undo() {
	self.ptr.API.TextEdit_undo(self)
}
func (self classTextEdit) Redo() {
	self.ptr.API.TextEdit_redo(self)
}
func (self classTextEdit) ClearUndoHistory() {
	self.ptr.API.TextEdit_clear_undo_history(self)
}
func (self classTextEdit) TagSavedVersion() {
	self.ptr.API.TextEdit_tag_saved_version(self)
}
func (self classTextEdit) GetVersion() Int {
	return self.ptr.API.TextEdit_get_version(self)
}
func (self classTextEdit) GetSavedVersion() Int {
	return self.ptr.API.TextEdit_get_saved_version(self)
}
func (self classTextEdit) SetSearchText(search_text String) {
	self.ptr.API.TextEdit_set_search_text(self, search_text)
}
func (self classTextEdit) SetSearchFlags(flags Int) {
	self.ptr.API.TextEdit_set_search_flags(self, flags)
}
func (self classTextEdit) Search(text String, flags Int, from_line Int, from_colum Int) Vector2i {
	return self.ptr.API.TextEdit_search(self, text, flags, from_line, from_colum)
}
func (self classTextEdit) SetTooltipRequestFunc(callback Callable) {
	self.ptr.API.TextEdit_set_tooltip_request_func(self, callback)
}
func (self classTextEdit) GetLocalMousePos() Vector2 {
	return self.ptr.API.TextEdit_get_local_mouse_pos(self)
}
func (self classTextEdit) GetWordAtPos(position Vector2) String {
	return self.ptr.API.TextEdit_get_word_at_pos(self, position)
}
func (self classTextEdit) GetLineColumnAtPos(position Vector2i, allow_out_of_bounds bool) Vector2i {
	return self.ptr.API.TextEdit_get_line_column_at_pos(self, position, allow_out_of_bounds)
}
func (self classTextEdit) GetPosAtLineColumn(line Int, column Int) Vector2i {
	return self.ptr.API.TextEdit_get_pos_at_line_column(self, line, column)
}
func (self classTextEdit) GetRectAtLineColumn(line Int, column Int) Rect2i {
	return self.ptr.API.TextEdit_get_rect_at_line_column(self, line, column)
}
func (self classTextEdit) GetMinimapLineAtPos(position Vector2i) Int {
	return self.ptr.API.TextEdit_get_minimap_line_at_pos(self, position)
}
func (self classTextEdit) IsDraggingCursor() bool {
	return self.ptr.API.TextEdit_is_dragging_cursor(self)
}
func (self classTextEdit) IsMouseOverSelection(edges bool, caret_index Int) bool {
	return self.ptr.API.TextEdit_is_mouse_over_selection(self, edges, caret_index)
}
func (self classTextEdit) SetCaretType(atype TextEditCaretType) {
	self.ptr.API.TextEdit_set_caret_type(self, atype)
}
func (self classTextEdit) GetCaretType() TextEditCaretType {
	return self.ptr.API.TextEdit_get_caret_type(self)
}
func (self classTextEdit) SetCaretBlinkEnabled(enable bool) {
	self.ptr.API.TextEdit_set_caret_blink_enabled(self, enable)
}
func (self classTextEdit) IsCaretBlinkEnabled() bool {
	return self.ptr.API.TextEdit_is_caret_blink_enabled(self)
}
func (self classTextEdit) SetCaretBlinkInterval(interval Float) {
	self.ptr.API.TextEdit_set_caret_blink_interval(self, interval)
}
func (self classTextEdit) GetCaretBlinkInterval() Float {
	return self.ptr.API.TextEdit_get_caret_blink_interval(self)
}
func (self classTextEdit) SetDrawCaretWhenEditableDisabled(enable bool) {
	self.ptr.API.TextEdit_set_draw_caret_when_editable_disabled(self, enable)
}
func (self classTextEdit) IsDrawingCaretWhenEditableDisabled() bool {
	return self.ptr.API.TextEdit_is_drawing_caret_when_editable_disabled(self)
}
func (self classTextEdit) SetMoveCaretOnRightClickEnabled(enable bool) {
	self.ptr.API.TextEdit_set_move_caret_on_right_click_enabled(self, enable)
}
func (self classTextEdit) IsMoveCaretOnRightClickEnabled() bool {
	return self.ptr.API.TextEdit_is_move_caret_on_right_click_enabled(self)
}
func (self classTextEdit) SetCaretMidGraphemeEnabled(enabled bool) {
	self.ptr.API.TextEdit_set_caret_mid_grapheme_enabled(self, enabled)
}
func (self classTextEdit) IsCaretMidGraphemeEnabled() bool {
	return self.ptr.API.TextEdit_is_caret_mid_grapheme_enabled(self)
}
func (self classTextEdit) SetMultipleCaretsEnabled(enabled bool) {
	self.ptr.API.TextEdit_set_multiple_carets_enabled(self, enabled)
}
func (self classTextEdit) IsMultipleCaretsEnabled() bool {
	return self.ptr.API.TextEdit_is_multiple_carets_enabled(self)
}
func (self classTextEdit) AddCaret(line Int, col Int) Int {
	return self.ptr.API.TextEdit_add_caret(self, line, col)
}
func (self classTextEdit) RemoveCaret(caret Int) {
	self.ptr.API.TextEdit_remove_caret(self, caret)
}
func (self classTextEdit) RemoveSecondaryCarets() {
	self.ptr.API.TextEdit_remove_secondary_carets(self)
}
func (self classTextEdit) MergeOverlappingCarets() {
	self.ptr.API.TextEdit_merge_overlapping_carets(self)
}
func (self classTextEdit) GetCaretCount() Int {
	return self.ptr.API.TextEdit_get_caret_count(self)
}
func (self classTextEdit) AddCaretAtCarets(below bool) {
	self.ptr.API.TextEdit_add_caret_at_carets(self, below)
}
func (self classTextEdit) GetCaretIndexEditOrder() PackedInt32Array {
	return self.ptr.API.TextEdit_get_caret_index_edit_order(self)
}
func (self classTextEdit) AdjustCaretsAfterEdit(caret Int, from_line Int, from_col Int, to_line Int, to_col Int) {
	self.ptr.API.TextEdit_adjust_carets_after_edit(self, caret, from_line, from_col, to_line, to_col)
}
func (self classTextEdit) IsCaretVisible(caret_index Int) bool {
	return self.ptr.API.TextEdit_is_caret_visible(self, caret_index)
}
func (self classTextEdit) GetCaretDrawPos(caret_index Int) Vector2 {
	return self.ptr.API.TextEdit_get_caret_draw_pos(self, caret_index)
}
func (self classTextEdit) SetCaretLine(line Int, adjust_viewport bool, can_be_hidden bool, wrap_index Int, caret_index Int) {
	self.ptr.API.TextEdit_set_caret_line(self, line, adjust_viewport, can_be_hidden, wrap_index, caret_index)
}
func (self classTextEdit) GetCaretLine(caret_index Int) Int {
	return self.ptr.API.TextEdit_get_caret_line(self, caret_index)
}
func (self classTextEdit) SetCaretColumn(column Int, adjust_viewport bool, caret_index Int) {
	self.ptr.API.TextEdit_set_caret_column(self, column, adjust_viewport, caret_index)
}
func (self classTextEdit) GetCaretColumn(caret_index Int) Int {
	return self.ptr.API.TextEdit_get_caret_column(self, caret_index)
}
func (self classTextEdit) GetCaretWrapIndex(caret_index Int) Int {
	return self.ptr.API.TextEdit_get_caret_wrap_index(self, caret_index)
}
func (self classTextEdit) GetWordUnderCaret(caret_index Int) String {
	return self.ptr.API.TextEdit_get_word_under_caret(self, caret_index)
}
func (self classTextEdit) SetSelectingEnabled(enable bool) {
	self.ptr.API.TextEdit_set_selecting_enabled(self, enable)
}
func (self classTextEdit) IsSelectingEnabled() bool {
	return self.ptr.API.TextEdit_is_selecting_enabled(self)
}
func (self classTextEdit) SetDeselectOnFocusLossEnabled(enable bool) {
	self.ptr.API.TextEdit_set_deselect_on_focus_loss_enabled(self, enable)
}
func (self classTextEdit) IsDeselectOnFocusLossEnabled() bool {
	return self.ptr.API.TextEdit_is_deselect_on_focus_loss_enabled(self)
}
func (self classTextEdit) SetDragAndDropSelectionEnabled(enable bool) {
	self.ptr.API.TextEdit_set_drag_and_drop_selection_enabled(self, enable)
}
func (self classTextEdit) IsDragAndDropSelectionEnabled() bool {
	return self.ptr.API.TextEdit_is_drag_and_drop_selection_enabled(self)
}
func (self classTextEdit) SetSelectionMode(mode TextEditSelectionMode, line Int, column Int, caret_index Int) {
	self.ptr.API.TextEdit_set_selection_mode(self, mode, line, column, caret_index)
}
func (self classTextEdit) GetSelectionMode() TextEditSelectionMode {
	return self.ptr.API.TextEdit_get_selection_mode(self)
}
func (self classTextEdit) SelectAll() {
	self.ptr.API.TextEdit_select_all(self)
}
func (self classTextEdit) SelectWordUnderCaret(caret_index Int) {
	self.ptr.API.TextEdit_select_word_under_caret(self, caret_index)
}
func (self classTextEdit) AddSelectionForNextOccurrence() {
	self.ptr.API.TextEdit_add_selection_for_next_occurrence(self)
}
func (self classTextEdit) Select(from_line Int, from_column Int, to_line Int, to_column Int, caret_index Int) {
	self.ptr.API.TextEdit_select(self, from_line, from_column, to_line, to_column, caret_index)
}
func (self classTextEdit) HasSelection(caret_index Int) bool {
	return self.ptr.API.TextEdit_has_selection(self, caret_index)
}
func (self classTextEdit) GetSelectedText(caret_index Int) String {
	return self.ptr.API.TextEdit_get_selected_text(self, caret_index)
}
func (self classTextEdit) GetSelectionLine(caret_index Int) Int {
	return self.ptr.API.TextEdit_get_selection_line(self, caret_index)
}
func (self classTextEdit) GetSelectionColumn(caret_index Int) Int {
	return self.ptr.API.TextEdit_get_selection_column(self, caret_index)
}
func (self classTextEdit) GetSelectionFromLine(caret_index Int) Int {
	return self.ptr.API.TextEdit_get_selection_from_line(self, caret_index)
}
func (self classTextEdit) GetSelectionFromColumn(caret_index Int) Int {
	return self.ptr.API.TextEdit_get_selection_from_column(self, caret_index)
}
func (self classTextEdit) GetSelectionToLine(caret_index Int) Int {
	return self.ptr.API.TextEdit_get_selection_to_line(self, caret_index)
}
func (self classTextEdit) GetSelectionToColumn(caret_index Int) Int {
	return self.ptr.API.TextEdit_get_selection_to_column(self, caret_index)
}
func (self classTextEdit) Deselect(caret_index Int) {
	self.ptr.API.TextEdit_deselect(self, caret_index)
}
func (self classTextEdit) DeleteSelection(caret_index Int) {
	self.ptr.API.TextEdit_delete_selection(self, caret_index)
}
func (self classTextEdit) SetLineWrappingMode(mode TextEditLineWrappingMode) {
	self.ptr.API.TextEdit_set_line_wrapping_mode(self, mode)
}
func (self classTextEdit) GetLineWrappingMode() TextEditLineWrappingMode {
	return self.ptr.API.TextEdit_get_line_wrapping_mode(self)
}
func (self classTextEdit) SetAutowrapMode(autowrap_mode TextServerAutowrapMode) {
	self.ptr.API.TextEdit_set_autowrap_mode(self, autowrap_mode)
}
func (self classTextEdit) GetAutowrapMode() TextServerAutowrapMode {
	return self.ptr.API.TextEdit_get_autowrap_mode(self)
}
func (self classTextEdit) IsLineWrapped(line Int) bool {
	return self.ptr.API.TextEdit_is_line_wrapped(self, line)
}
func (self classTextEdit) GetLineWrapCount(line Int) Int {
	return self.ptr.API.TextEdit_get_line_wrap_count(self, line)
}
func (self classTextEdit) GetLineWrapIndexAtColumn(line Int, column Int) Int {
	return self.ptr.API.TextEdit_get_line_wrap_index_at_column(self, line, column)
}
func (self classTextEdit) GetLineWrappedText(line Int) PackedStringArray {
	return self.ptr.API.TextEdit_get_line_wrapped_text(self, line)
}
func (self classTextEdit) SetSmoothScrollEnabled(enable bool) {
	self.ptr.API.TextEdit_set_smooth_scroll_enabled(self, enable)
}
func (self classTextEdit) IsSmoothScrollEnabled() bool {
	return self.ptr.API.TextEdit_is_smooth_scroll_enabled(self)
}
func (self classTextEdit) GetVScrollBar() VScrollBar {
	return self.ptr.API.TextEdit_get_v_scroll_bar(self)
}
func (self classTextEdit) GetHScrollBar() HScrollBar {
	return self.ptr.API.TextEdit_get_h_scroll_bar(self)
}
func (self classTextEdit) SetVScroll(value Float) {
	self.ptr.API.TextEdit_set_v_scroll(self, value)
}
func (self classTextEdit) GetVScroll() Float {
	return self.ptr.API.TextEdit_get_v_scroll(self)
}
func (self classTextEdit) SetHScroll(value Int) {
	self.ptr.API.TextEdit_set_h_scroll(self, value)
}
func (self classTextEdit) GetHScroll() Int {
	return self.ptr.API.TextEdit_get_h_scroll(self)
}
func (self classTextEdit) SetScrollPastEndOfFileEnabled(enable bool) {
	self.ptr.API.TextEdit_set_scroll_past_end_of_file_enabled(self, enable)
}
func (self classTextEdit) IsScrollPastEndOfFileEnabled() bool {
	return self.ptr.API.TextEdit_is_scroll_past_end_of_file_enabled(self)
}
func (self classTextEdit) SetVScrollSpeed(speed Float) {
	self.ptr.API.TextEdit_set_v_scroll_speed(self, speed)
}
func (self classTextEdit) GetVScrollSpeed() Float {
	return self.ptr.API.TextEdit_get_v_scroll_speed(self)
}
func (self classTextEdit) SetFitContentHeightEnabled(enabled bool) {
	self.ptr.API.TextEdit_set_fit_content_height_enabled(self, enabled)
}
func (self classTextEdit) IsFitContentHeightEnabled() bool {
	return self.ptr.API.TextEdit_is_fit_content_height_enabled(self)
}
func (self classTextEdit) GetScrollPosForLine(line Int, wrap_index Int) Float {
	return self.ptr.API.TextEdit_get_scroll_pos_for_line(self, line, wrap_index)
}
func (self classTextEdit) SetLineAsFirstVisible(line Int, wrap_index Int) {
	self.ptr.API.TextEdit_set_line_as_first_visible(self, line, wrap_index)
}
func (self classTextEdit) GetFirstVisibleLine() Int {
	return self.ptr.API.TextEdit_get_first_visible_line(self)
}
func (self classTextEdit) SetLineAsCenterVisible(line Int, wrap_index Int) {
	self.ptr.API.TextEdit_set_line_as_center_visible(self, line, wrap_index)
}
func (self classTextEdit) SetLineAsLastVisible(line Int, wrap_index Int) {
	self.ptr.API.TextEdit_set_line_as_last_visible(self, line, wrap_index)
}
func (self classTextEdit) GetLastFullVisibleLine() Int {
	return self.ptr.API.TextEdit_get_last_full_visible_line(self)
}
func (self classTextEdit) GetLastFullVisibleLineWrapIndex() Int {
	return self.ptr.API.TextEdit_get_last_full_visible_line_wrap_index(self)
}
func (self classTextEdit) GetVisibleLineCount() Int {
	return self.ptr.API.TextEdit_get_visible_line_count(self)
}
func (self classTextEdit) GetVisibleLineCountInRange(from_line Int, to_line Int) Int {
	return self.ptr.API.TextEdit_get_visible_line_count_in_range(self, from_line, to_line)
}
func (self classTextEdit) GetTotalVisibleLineCount() Int {
	return self.ptr.API.TextEdit_get_total_visible_line_count(self)
}
func (self classTextEdit) AdjustViewportToCaret(caret_index Int) {
	self.ptr.API.TextEdit_adjust_viewport_to_caret(self, caret_index)
}
func (self classTextEdit) CenterViewportToCaret(caret_index Int) {
	self.ptr.API.TextEdit_center_viewport_to_caret(self, caret_index)
}
func (self classTextEdit) SetDrawMinimap(enabled bool) {
	self.ptr.API.TextEdit_set_draw_minimap(self, enabled)
}
func (self classTextEdit) IsDrawingMinimap() bool {
	return self.ptr.API.TextEdit_is_drawing_minimap(self)
}
func (self classTextEdit) SetMinimapWidth(width Int) {
	self.ptr.API.TextEdit_set_minimap_width(self, width)
}
func (self classTextEdit) GetMinimapWidth() Int {
	return self.ptr.API.TextEdit_get_minimap_width(self)
}
func (self classTextEdit) GetMinimapVisibleLines() Int {
	return self.ptr.API.TextEdit_get_minimap_visible_lines(self)
}
func (self classTextEdit) AddGutter(at Int) {
	self.ptr.API.TextEdit_add_gutter(self, at)
}
func (self classTextEdit) RemoveGutter(gutter Int) {
	self.ptr.API.TextEdit_remove_gutter(self, gutter)
}
func (self classTextEdit) GetGutterCount() Int {
	return self.ptr.API.TextEdit_get_gutter_count(self)
}
func (self classTextEdit) SetGutterName(gutter Int, name String) {
	self.ptr.API.TextEdit_set_gutter_name(self, gutter, name)
}
func (self classTextEdit) GetGutterName(gutter Int) String {
	return self.ptr.API.TextEdit_get_gutter_name(self, gutter)
}
func (self classTextEdit) SetGutterType(gutter Int, atype TextEditGutterType) {
	self.ptr.API.TextEdit_set_gutter_type(self, gutter, atype)
}
func (self classTextEdit) GetGutterType(gutter Int) TextEditGutterType {
	return self.ptr.API.TextEdit_get_gutter_type(self, gutter)
}
func (self classTextEdit) SetGutterWidth(gutter Int, width Int) {
	self.ptr.API.TextEdit_set_gutter_width(self, gutter, width)
}
func (self classTextEdit) GetGutterWidth(gutter Int) Int {
	return self.ptr.API.TextEdit_get_gutter_width(self, gutter)
}
func (self classTextEdit) SetGutterDraw(gutter Int, draw bool) {
	self.ptr.API.TextEdit_set_gutter_draw(self, gutter, draw)
}
func (self classTextEdit) IsGutterDrawn(gutter Int) bool {
	return self.ptr.API.TextEdit_is_gutter_drawn(self, gutter)
}
func (self classTextEdit) SetGutterClickable(gutter Int, clickable bool) {
	self.ptr.API.TextEdit_set_gutter_clickable(self, gutter, clickable)
}
func (self classTextEdit) IsGutterClickable(gutter Int) bool {
	return self.ptr.API.TextEdit_is_gutter_clickable(self, gutter)
}
func (self classTextEdit) SetGutterOverwritable(gutter Int, overwritable bool) {
	self.ptr.API.TextEdit_set_gutter_overwritable(self, gutter, overwritable)
}
func (self classTextEdit) IsGutterOverwritable(gutter Int) bool {
	return self.ptr.API.TextEdit_is_gutter_overwritable(self, gutter)
}
func (self classTextEdit) MergeGutters(from_line Int, to_line Int) {
	self.ptr.API.TextEdit_merge_gutters(self, from_line, to_line)
}
func (self classTextEdit) SetGutterCustomDraw(column Int, draw_callback Callable) {
	self.ptr.API.TextEdit_set_gutter_custom_draw(self, column, draw_callback)
}
func (self classTextEdit) GetTotalGutterWidth() Int {
	return self.ptr.API.TextEdit_get_total_gutter_width(self)
}
func (self classTextEdit) SetLineGutterMetadata(line Int, gutter Int, metadata Variant) {
	self.ptr.API.TextEdit_set_line_gutter_metadata(self, line, gutter, metadata)
}
func (self classTextEdit) GetLineGutterMetadata(line Int, gutter Int) Variant {
	return self.ptr.API.TextEdit_get_line_gutter_metadata(self, line, gutter)
}
func (self classTextEdit) SetLineGutterText(line Int, gutter Int, text String) {
	self.ptr.API.TextEdit_set_line_gutter_text(self, line, gutter, text)
}
func (self classTextEdit) GetLineGutterText(line Int, gutter Int) String {
	return self.ptr.API.TextEdit_get_line_gutter_text(self, line, gutter)
}
func (self classTextEdit) SetLineGutterIcon(line Int, gutter Int, icon Texture2D) {
	self.ptr.API.TextEdit_set_line_gutter_icon(self, line, gutter, icon)
}
func (self classTextEdit) GetLineGutterIcon(line Int, gutter Int) Texture2D {
	return self.ptr.API.TextEdit_get_line_gutter_icon(self, line, gutter)
}
func (self classTextEdit) SetLineGutterItemColor(line Int, gutter Int, color Color) {
	self.ptr.API.TextEdit_set_line_gutter_item_color(self, line, gutter, color)
}
func (self classTextEdit) GetLineGutterItemColor(line Int, gutter Int) Color {
	return self.ptr.API.TextEdit_get_line_gutter_item_color(self, line, gutter)
}
func (self classTextEdit) SetLineGutterClickable(line Int, gutter Int, clickable bool) {
	self.ptr.API.TextEdit_set_line_gutter_clickable(self, line, gutter, clickable)
}
func (self classTextEdit) IsLineGutterClickable(line Int, gutter Int) bool {
	return self.ptr.API.TextEdit_is_line_gutter_clickable(self, line, gutter)
}
func (self classTextEdit) SetLineBackgroundColor(line Int, color Color) {
	self.ptr.API.TextEdit_set_line_background_color(self, line, color)
}
func (self classTextEdit) GetLineBackgroundColor(line Int) Color {
	return self.ptr.API.TextEdit_get_line_background_color(self, line)
}
func (self classTextEdit) SetSyntaxHighlighter(syntax_highlighter SyntaxHighlighter) {
	self.ptr.API.TextEdit_set_syntax_highlighter(self, syntax_highlighter)
}
func (self classTextEdit) GetSyntaxHighlighter() SyntaxHighlighter {
	return self.ptr.API.TextEdit_get_syntax_highlighter(self)
}
func (self classTextEdit) SetHighlightCurrentLine(enabled bool) {
	self.ptr.API.TextEdit_set_highlight_current_line(self, enabled)
}
func (self classTextEdit) IsHighlightCurrentLineEnabled() bool {
	return self.ptr.API.TextEdit_is_highlight_current_line_enabled(self)
}
func (self classTextEdit) SetHighlightAllOccurrences(enabled bool) {
	self.ptr.API.TextEdit_set_highlight_all_occurrences(self, enabled)
}
func (self classTextEdit) IsHighlightAllOccurrencesEnabled() bool {
	return self.ptr.API.TextEdit_is_highlight_all_occurrences_enabled(self)
}
func (self classTextEdit) GetDrawControlChars() bool {
	return self.ptr.API.TextEdit_get_draw_control_chars(self)
}
func (self classTextEdit) SetDrawControlChars(enabled bool) {
	self.ptr.API.TextEdit_set_draw_control_chars(self, enabled)
}
func (self classTextEdit) SetDrawTabs(enabled bool) {
	self.ptr.API.TextEdit_set_draw_tabs(self, enabled)
}
func (self classTextEdit) IsDrawingTabs() bool {
	return self.ptr.API.TextEdit_is_drawing_tabs(self)
}
func (self classTextEdit) SetDrawSpaces(enabled bool) {
	self.ptr.API.TextEdit_set_draw_spaces(self, enabled)
}
func (self classTextEdit) IsDrawingSpaces() bool {
	return self.ptr.API.TextEdit_is_drawing_spaces(self)
}
func (self classTextEdit) GetMenu() PopupMenu {
	return self.ptr.API.TextEdit_get_menu(self)
}
func (self classTextEdit) IsMenuVisible() bool {
	return self.ptr.API.TextEdit_is_menu_visible(self)
}
func (self classTextEdit) MenuOption(option Int) {
	self.ptr.API.TextEdit_menu_option(self, option)
}

type classTextLine struct{ Class[classTextLine] }

func (self classTextLine) Super() RefCounted {
	var super RefCounted
	super.ptr = self.ptr
	return super
}

func (self classTextLine) RefCounted() RefCounted { return self.Super() }
func (self classTextLine) Clear() {
	self.ptr.API.TextLine_clear(self)
}
func (self classTextLine) SetDirection(direction TextServerDirection) {
	self.ptr.API.TextLine_set_direction(self, direction)
}
func (self classTextLine) GetDirection() TextServerDirection {
	return self.ptr.API.TextLine_get_direction(self)
}
func (self classTextLine) SetOrientation(orientation TextServerOrientation) {
	self.ptr.API.TextLine_set_orientation(self, orientation)
}
func (self classTextLine) GetOrientation() TextServerOrientation {
	return self.ptr.API.TextLine_get_orientation(self)
}
func (self classTextLine) SetPreserveInvalid(enabled bool) {
	self.ptr.API.TextLine_set_preserve_invalid(self, enabled)
}
func (self classTextLine) GetPreserveInvalid() bool {
	return self.ptr.API.TextLine_get_preserve_invalid(self)
}
func (self classTextLine) SetPreserveControl(enabled bool) {
	self.ptr.API.TextLine_set_preserve_control(self, enabled)
}
func (self classTextLine) GetPreserveControl() bool {
	return self.ptr.API.TextLine_get_preserve_control(self)
}
func (self classTextLine) SetBidiOverride(override Array) {
	self.ptr.API.TextLine_set_bidi_override(self, override)
}
func (self classTextLine) AddString(text String, font Font, font_size Int, language String, meta Variant) bool {
	return self.ptr.API.TextLine_add_string(self, text, font, font_size, language, meta)
}
func (self classTextLine) AddObject(key Variant, size Vector2, inline_align InlineAlignment, length Int, baseline Float) bool {
	return self.ptr.API.TextLine_add_object(self, key, size, inline_align, length, baseline)
}
func (self classTextLine) ResizeObject(key Variant, size Vector2, inline_align InlineAlignment, baseline Float) bool {
	return self.ptr.API.TextLine_resize_object(self, key, size, inline_align, baseline)
}
func (self classTextLine) SetWidth(width Float) {
	self.ptr.API.TextLine_set_width(self, width)
}
func (self classTextLine) GetWidth() Float {
	return self.ptr.API.TextLine_get_width(self)
}
func (self classTextLine) SetHorizontalAlignment(alignment HorizontalAlignment) {
	self.ptr.API.TextLine_set_horizontal_alignment(self, alignment)
}
func (self classTextLine) GetHorizontalAlignment() HorizontalAlignment {
	return self.ptr.API.TextLine_get_horizontal_alignment(self)
}
func (self classTextLine) TabAlign(tab_stops PackedFloat32Array) {
	self.ptr.API.TextLine_tab_align(self, tab_stops)
}
func (self classTextLine) SetFlags(flags TextServerJustificationFlag) {
	self.ptr.API.TextLine_set_flags(self, flags)
}
func (self classTextLine) GetFlags() TextServerJustificationFlag {
	return self.ptr.API.TextLine_get_flags(self)
}
func (self classTextLine) SetTextOverrunBehavior(overrun_behavior TextServerOverrunBehavior) {
	self.ptr.API.TextLine_set_text_overrun_behavior(self, overrun_behavior)
}
func (self classTextLine) GetTextOverrunBehavior() TextServerOverrunBehavior {
	return self.ptr.API.TextLine_get_text_overrun_behavior(self)
}
func (self classTextLine) SetEllipsisChar(char String) {
	self.ptr.API.TextLine_set_ellipsis_char(self, char)
}
func (self classTextLine) GetEllipsisChar() String {
	return self.ptr.API.TextLine_get_ellipsis_char(self)
}
func (self classTextLine) GetObjects() Array {
	return self.ptr.API.TextLine_get_objects(self)
}
func (self classTextLine) GetObjectRect(key Variant) Rect2 {
	return self.ptr.API.TextLine_get_object_rect(self, key)
}
func (self classTextLine) GetSize() Vector2 {
	return self.ptr.API.TextLine_get_size(self)
}
func (self classTextLine) GetRid() RID {
	return self.ptr.API.TextLine_get_rid(self)
}
func (self classTextLine) GetLineAscent() Float {
	return self.ptr.API.TextLine_get_line_ascent(self)
}
func (self classTextLine) GetLineDescent() Float {
	return self.ptr.API.TextLine_get_line_descent(self)
}
func (self classTextLine) GetLineWidth() Float {
	return self.ptr.API.TextLine_get_line_width(self)
}
func (self classTextLine) GetLineUnderlinePosition() Float {
	return self.ptr.API.TextLine_get_line_underline_position(self)
}
func (self classTextLine) GetLineUnderlineThickness() Float {
	return self.ptr.API.TextLine_get_line_underline_thickness(self)
}
func (self classTextLine) Draw(canvas RID, pos Vector2, color Color) {
	self.ptr.API.TextLine_draw(self, canvas, pos, color)
}
func (self classTextLine) DrawOutline(canvas RID, pos Vector2, outline_size Int, color Color) {
	self.ptr.API.TextLine_draw_outline(self, canvas, pos, outline_size, color)
}
func (self classTextLine) HitTest(coords Float) Int {
	return self.ptr.API.TextLine_hit_test(self, coords)
}

type classTextMesh struct{ Class[classTextMesh] }

func (self classTextMesh) Super() PrimitiveMesh {
	var super PrimitiveMesh
	super.ptr = self.ptr
	return super
}

func (self classTextMesh) PrimitiveMesh() PrimitiveMesh { return self.Super() }
func (self classTextMesh) SetHorizontalAlignment(alignment HorizontalAlignment) {
	self.ptr.API.TextMesh_set_horizontal_alignment(self, alignment)
}
func (self classTextMesh) GetHorizontalAlignment() HorizontalAlignment {
	return self.ptr.API.TextMesh_get_horizontal_alignment(self)
}
func (self classTextMesh) SetVerticalAlignment(alignment VerticalAlignment) {
	self.ptr.API.TextMesh_set_vertical_alignment(self, alignment)
}
func (self classTextMesh) GetVerticalAlignment() VerticalAlignment {
	return self.ptr.API.TextMesh_get_vertical_alignment(self)
}
func (self classTextMesh) SetText(text String) {
	self.ptr.API.TextMesh_set_text(self, text)
}
func (self classTextMesh) GetText() String {
	return self.ptr.API.TextMesh_get_text(self)
}
func (self classTextMesh) SetFont(font Font) {
	self.ptr.API.TextMesh_set_font(self, font)
}
func (self classTextMesh) GetFont() Font {
	return self.ptr.API.TextMesh_get_font(self)
}
func (self classTextMesh) SetFontSize(font_size Int) {
	self.ptr.API.TextMesh_set_font_size(self, font_size)
}
func (self classTextMesh) GetFontSize() Int {
	return self.ptr.API.TextMesh_get_font_size(self)
}
func (self classTextMesh) SetLineSpacing(line_spacing Float) {
	self.ptr.API.TextMesh_set_line_spacing(self, line_spacing)
}
func (self classTextMesh) GetLineSpacing() Float {
	return self.ptr.API.TextMesh_get_line_spacing(self)
}
func (self classTextMesh) SetAutowrapMode(autowrap_mode TextServerAutowrapMode) {
	self.ptr.API.TextMesh_set_autowrap_mode(self, autowrap_mode)
}
func (self classTextMesh) GetAutowrapMode() TextServerAutowrapMode {
	return self.ptr.API.TextMesh_get_autowrap_mode(self)
}
func (self classTextMesh) SetJustificationFlags(justification_flags TextServerJustificationFlag) {
	self.ptr.API.TextMesh_set_justification_flags(self, justification_flags)
}
func (self classTextMesh) GetJustificationFlags() TextServerJustificationFlag {
	return self.ptr.API.TextMesh_get_justification_flags(self)
}
func (self classTextMesh) SetDepth(depth Float) {
	self.ptr.API.TextMesh_set_depth(self, depth)
}
func (self classTextMesh) GetDepth() Float {
	return self.ptr.API.TextMesh_get_depth(self)
}
func (self classTextMesh) SetWidth(width Float) {
	self.ptr.API.TextMesh_set_width(self, width)
}
func (self classTextMesh) GetWidth() Float {
	return self.ptr.API.TextMesh_get_width(self)
}
func (self classTextMesh) SetPixelSize(pixel_size Float) {
	self.ptr.API.TextMesh_set_pixel_size(self, pixel_size)
}
func (self classTextMesh) GetPixelSize() Float {
	return self.ptr.API.TextMesh_get_pixel_size(self)
}
func (self classTextMesh) SetOffset(offset Vector2) {
	self.ptr.API.TextMesh_set_offset(self, offset)
}
func (self classTextMesh) GetOffset() Vector2 {
	return self.ptr.API.TextMesh_get_offset(self)
}
func (self classTextMesh) SetCurveStep(curve_step Float) {
	self.ptr.API.TextMesh_set_curve_step(self, curve_step)
}
func (self classTextMesh) GetCurveStep() Float {
	return self.ptr.API.TextMesh_get_curve_step(self)
}
func (self classTextMesh) SetTextDirection(direction TextServerDirection) {
	self.ptr.API.TextMesh_set_text_direction(self, direction)
}
func (self classTextMesh) GetTextDirection() TextServerDirection {
	return self.ptr.API.TextMesh_get_text_direction(self)
}
func (self classTextMesh) SetLanguage(language String) {
	self.ptr.API.TextMesh_set_language(self, language)
}
func (self classTextMesh) GetLanguage() String {
	return self.ptr.API.TextMesh_get_language(self)
}
func (self classTextMesh) SetStructuredTextBidiOverride(parser TextServerStructuredTextParser) {
	self.ptr.API.TextMesh_set_structured_text_bidi_override(self, parser)
}
func (self classTextMesh) GetStructuredTextBidiOverride() TextServerStructuredTextParser {
	return self.ptr.API.TextMesh_get_structured_text_bidi_override(self)
}
func (self classTextMesh) SetStructuredTextBidiOverrideOptions(args Array) {
	self.ptr.API.TextMesh_set_structured_text_bidi_override_options(self, args)
}
func (self classTextMesh) GetStructuredTextBidiOverrideOptions() Array {
	return self.ptr.API.TextMesh_get_structured_text_bidi_override_options(self)
}
func (self classTextMesh) SetUppercase(enable bool) {
	self.ptr.API.TextMesh_set_uppercase(self, enable)
}
func (self classTextMesh) IsUppercase() bool {
	return self.ptr.API.TextMesh_is_uppercase(self)
}

type classTextParagraph struct{ Class[classTextParagraph] }

func (self classTextParagraph) Super() RefCounted {
	var super RefCounted
	super.ptr = self.ptr
	return super
}

func (self classTextParagraph) RefCounted() RefCounted { return self.Super() }
func (self classTextParagraph) Clear() {
	self.ptr.API.TextParagraph_clear(self)
}
func (self classTextParagraph) SetDirection(direction TextServerDirection) {
	self.ptr.API.TextParagraph_set_direction(self, direction)
}
func (self classTextParagraph) GetDirection() TextServerDirection {
	return self.ptr.API.TextParagraph_get_direction(self)
}
func (self classTextParagraph) SetCustomPunctuation(custom_punctuation String) {
	self.ptr.API.TextParagraph_set_custom_punctuation(self, custom_punctuation)
}
func (self classTextParagraph) GetCustomPunctuation() String {
	return self.ptr.API.TextParagraph_get_custom_punctuation(self)
}
func (self classTextParagraph) SetOrientation(orientation TextServerOrientation) {
	self.ptr.API.TextParagraph_set_orientation(self, orientation)
}
func (self classTextParagraph) GetOrientation() TextServerOrientation {
	return self.ptr.API.TextParagraph_get_orientation(self)
}
func (self classTextParagraph) SetPreserveInvalid(enabled bool) {
	self.ptr.API.TextParagraph_set_preserve_invalid(self, enabled)
}
func (self classTextParagraph) GetPreserveInvalid() bool {
	return self.ptr.API.TextParagraph_get_preserve_invalid(self)
}
func (self classTextParagraph) SetPreserveControl(enabled bool) {
	self.ptr.API.TextParagraph_set_preserve_control(self, enabled)
}
func (self classTextParagraph) GetPreserveControl() bool {
	return self.ptr.API.TextParagraph_get_preserve_control(self)
}
func (self classTextParagraph) SetBidiOverride(override Array) {
	self.ptr.API.TextParagraph_set_bidi_override(self, override)
}
func (self classTextParagraph) SetDropcap(text String, font Font, font_size Int, dropcap_margins Rect2, language String) bool {
	return self.ptr.API.TextParagraph_set_dropcap(self, text, font, font_size, dropcap_margins, language)
}
func (self classTextParagraph) ClearDropcap() {
	self.ptr.API.TextParagraph_clear_dropcap(self)
}
func (self classTextParagraph) AddString(text String, font Font, font_size Int, language String, meta Variant) bool {
	return self.ptr.API.TextParagraph_add_string(self, text, font, font_size, language, meta)
}
func (self classTextParagraph) AddObject(key Variant, size Vector2, inline_align InlineAlignment, length Int, baseline Float) bool {
	return self.ptr.API.TextParagraph_add_object(self, key, size, inline_align, length, baseline)
}
func (self classTextParagraph) ResizeObject(key Variant, size Vector2, inline_align InlineAlignment, baseline Float) bool {
	return self.ptr.API.TextParagraph_resize_object(self, key, size, inline_align, baseline)
}
func (self classTextParagraph) SetAlignment(alignment HorizontalAlignment) {
	self.ptr.API.TextParagraph_set_alignment(self, alignment)
}
func (self classTextParagraph) GetAlignment() HorizontalAlignment {
	return self.ptr.API.TextParagraph_get_alignment(self)
}
func (self classTextParagraph) TabAlign(tab_stops PackedFloat32Array) {
	self.ptr.API.TextParagraph_tab_align(self, tab_stops)
}
func (self classTextParagraph) SetBreakFlags(flags TextServerLineBreakFlag) {
	self.ptr.API.TextParagraph_set_break_flags(self, flags)
}
func (self classTextParagraph) GetBreakFlags() TextServerLineBreakFlag {
	return self.ptr.API.TextParagraph_get_break_flags(self)
}
func (self classTextParagraph) SetJustificationFlags(flags TextServerJustificationFlag) {
	self.ptr.API.TextParagraph_set_justification_flags(self, flags)
}
func (self classTextParagraph) GetJustificationFlags() TextServerJustificationFlag {
	return self.ptr.API.TextParagraph_get_justification_flags(self)
}
func (self classTextParagraph) SetTextOverrunBehavior(overrun_behavior TextServerOverrunBehavior) {
	self.ptr.API.TextParagraph_set_text_overrun_behavior(self, overrun_behavior)
}
func (self classTextParagraph) GetTextOverrunBehavior() TextServerOverrunBehavior {
	return self.ptr.API.TextParagraph_get_text_overrun_behavior(self)
}
func (self classTextParagraph) SetEllipsisChar(char String) {
	self.ptr.API.TextParagraph_set_ellipsis_char(self, char)
}
func (self classTextParagraph) GetEllipsisChar() String {
	return self.ptr.API.TextParagraph_get_ellipsis_char(self)
}
func (self classTextParagraph) SetWidth(width Float) {
	self.ptr.API.TextParagraph_set_width(self, width)
}
func (self classTextParagraph) GetWidth() Float {
	return self.ptr.API.TextParagraph_get_width(self)
}
func (self classTextParagraph) GetNonWrappedSize() Vector2 {
	return self.ptr.API.TextParagraph_get_non_wrapped_size(self)
}
func (self classTextParagraph) GetSize() Vector2 {
	return self.ptr.API.TextParagraph_get_size(self)
}
func (self classTextParagraph) GetRid() RID {
	return self.ptr.API.TextParagraph_get_rid(self)
}
func (self classTextParagraph) GetLineRid(line Int) RID {
	return self.ptr.API.TextParagraph_get_line_rid(self, line)
}
func (self classTextParagraph) GetDropcapRid() RID {
	return self.ptr.API.TextParagraph_get_dropcap_rid(self)
}
func (self classTextParagraph) GetLineCount() Int {
	return self.ptr.API.TextParagraph_get_line_count(self)
}
func (self classTextParagraph) SetMaxLinesVisible(max_lines_visible Int) {
	self.ptr.API.TextParagraph_set_max_lines_visible(self, max_lines_visible)
}
func (self classTextParagraph) GetMaxLinesVisible() Int {
	return self.ptr.API.TextParagraph_get_max_lines_visible(self)
}
func (self classTextParagraph) GetLineObjects(line Int) Array {
	return self.ptr.API.TextParagraph_get_line_objects(self, line)
}
func (self classTextParagraph) GetLineObjectRect(line Int, key Variant) Rect2 {
	return self.ptr.API.TextParagraph_get_line_object_rect(self, line, key)
}
func (self classTextParagraph) GetLineSize(line Int) Vector2 {
	return self.ptr.API.TextParagraph_get_line_size(self, line)
}
func (self classTextParagraph) GetLineRange(line Int) Vector2i {
	return self.ptr.API.TextParagraph_get_line_range(self, line)
}
func (self classTextParagraph) GetLineAscent(line Int) Float {
	return self.ptr.API.TextParagraph_get_line_ascent(self, line)
}
func (self classTextParagraph) GetLineDescent(line Int) Float {
	return self.ptr.API.TextParagraph_get_line_descent(self, line)
}
func (self classTextParagraph) GetLineWidth(line Int) Float {
	return self.ptr.API.TextParagraph_get_line_width(self, line)
}
func (self classTextParagraph) GetLineUnderlinePosition(line Int) Float {
	return self.ptr.API.TextParagraph_get_line_underline_position(self, line)
}
func (self classTextParagraph) GetLineUnderlineThickness(line Int) Float {
	return self.ptr.API.TextParagraph_get_line_underline_thickness(self, line)
}
func (self classTextParagraph) GetDropcapSize() Vector2 {
	return self.ptr.API.TextParagraph_get_dropcap_size(self)
}
func (self classTextParagraph) GetDropcapLines() Int {
	return self.ptr.API.TextParagraph_get_dropcap_lines(self)
}
func (self classTextParagraph) Draw(canvas RID, pos Vector2, color Color, dc_color Color) {
	self.ptr.API.TextParagraph_draw(self, canvas, pos, color, dc_color)
}
func (self classTextParagraph) DrawOutline(canvas RID, pos Vector2, outline_size Int, color Color, dc_color Color) {
	self.ptr.API.TextParagraph_draw_outline(self, canvas, pos, outline_size, color, dc_color)
}
func (self classTextParagraph) DrawLine(canvas RID, pos Vector2, line Int, color Color) {
	self.ptr.API.TextParagraph_draw_line(self, canvas, pos, line, color)
}
func (self classTextParagraph) DrawLineOutline(canvas RID, pos Vector2, line Int, outline_size Int, color Color) {
	self.ptr.API.TextParagraph_draw_line_outline(self, canvas, pos, line, outline_size, color)
}
func (self classTextParagraph) DrawDropcap(canvas RID, pos Vector2, color Color) {
	self.ptr.API.TextParagraph_draw_dropcap(self, canvas, pos, color)
}
func (self classTextParagraph) DrawDropcapOutline(canvas RID, pos Vector2, outline_size Int, color Color) {
	self.ptr.API.TextParagraph_draw_dropcap_outline(self, canvas, pos, outline_size, color)
}
func (self classTextParagraph) HitTest(coords Vector2) Int {
	return self.ptr.API.TextParagraph_hit_test(self, coords)
}

type classTextServer struct{ Class[classTextServer] }

func (self classTextServer) Super() RefCounted {
	var super RefCounted
	super.ptr = self.ptr
	return super
}

func (self classTextServer) RefCounted() RefCounted { return self.Super() }
func (self classTextServer) HasFeature(feature TextServerFeature) bool {
	return self.ptr.API.TextServer_has_feature(self, feature)
}
func (self classTextServer) GetName() String {
	return self.ptr.API.TextServer_get_name(self)
}
func (self classTextServer) GetFeatures() Int {
	return self.ptr.API.TextServer_get_features(self)
}
func (self classTextServer) LoadSupportData(filename String) bool {
	return self.ptr.API.TextServer_load_support_data(self, filename)
}
func (self classTextServer) GetSupportDataFilename() String {
	return self.ptr.API.TextServer_get_support_data_filename(self)
}
func (self classTextServer) GetSupportDataInfo() String {
	return self.ptr.API.TextServer_get_support_data_info(self)
}
func (self classTextServer) SaveSupportData(filename String) bool {
	return self.ptr.API.TextServer_save_support_data(self, filename)
}
func (self classTextServer) IsLocaleRightToLeft(locale String) bool {
	return self.ptr.API.TextServer_is_locale_right_to_left(self, locale)
}
func (self classTextServer) NameToTag(name String) Int {
	return self.ptr.API.TextServer_name_to_tag(self, name)
}
func (self classTextServer) TagToName(tag Int) String {
	return self.ptr.API.TextServer_tag_to_name(self, tag)
}
func (self classTextServer) Has(rid RID) bool {
	return self.ptr.API.TextServer_has(self, rid)
}
func (self classTextServer) FreeRid(rid RID) {
	self.ptr.API.TextServer_free_rid(self, rid)
}
func (self classTextServer) CreateFont() RID {
	return self.ptr.API.TextServer_create_font(self)
}
func (self classTextServer) CreateFontLinkedVariation(font_rid RID) RID {
	return self.ptr.API.TextServer_create_font_linked_variation(self, font_rid)
}
func (self classTextServer) FontSetData(font_rid RID, data PackedByteArray) {
	self.ptr.API.TextServer_font_set_data(self, font_rid, data)
}
func (self classTextServer) FontSetFaceIndex(font_rid RID, face_index Int) {
	self.ptr.API.TextServer_font_set_face_index(self, font_rid, face_index)
}
func (self classTextServer) FontGetFaceIndex(font_rid RID) Int {
	return self.ptr.API.TextServer_font_get_face_index(self, font_rid)
}
func (self classTextServer) FontGetFaceCount(font_rid RID) Int {
	return self.ptr.API.TextServer_font_get_face_count(self, font_rid)
}
func (self classTextServer) FontSetStyle(font_rid RID, style TextServerFontStyle) {
	self.ptr.API.TextServer_font_set_style(self, font_rid, style)
}
func (self classTextServer) FontGetStyle(font_rid RID) TextServerFontStyle {
	return self.ptr.API.TextServer_font_get_style(self, font_rid)
}
func (self classTextServer) FontSetName(font_rid RID, name String) {
	self.ptr.API.TextServer_font_set_name(self, font_rid, name)
}
func (self classTextServer) FontGetName(font_rid RID) String {
	return self.ptr.API.TextServer_font_get_name(self, font_rid)
}
func (self classTextServer) FontGetOtNameStrings(font_rid RID) Dictionary {
	return self.ptr.API.TextServer_font_get_ot_name_strings(self, font_rid)
}
func (self classTextServer) FontSetStyleName(font_rid RID, name String) {
	self.ptr.API.TextServer_font_set_style_name(self, font_rid, name)
}
func (self classTextServer) FontGetStyleName(font_rid RID) String {
	return self.ptr.API.TextServer_font_get_style_name(self, font_rid)
}
func (self classTextServer) FontSetWeight(font_rid RID, weight Int) {
	self.ptr.API.TextServer_font_set_weight(self, font_rid, weight)
}
func (self classTextServer) FontGetWeight(font_rid RID) Int {
	return self.ptr.API.TextServer_font_get_weight(self, font_rid)
}
func (self classTextServer) FontSetStretch(font_rid RID, weight Int) {
	self.ptr.API.TextServer_font_set_stretch(self, font_rid, weight)
}
func (self classTextServer) FontGetStretch(font_rid RID) Int {
	return self.ptr.API.TextServer_font_get_stretch(self, font_rid)
}
func (self classTextServer) FontSetAntialiasing(font_rid RID, antialiasing TextServerFontAntialiasing) {
	self.ptr.API.TextServer_font_set_antialiasing(self, font_rid, antialiasing)
}
func (self classTextServer) FontGetAntialiasing(font_rid RID) TextServerFontAntialiasing {
	return self.ptr.API.TextServer_font_get_antialiasing(self, font_rid)
}
func (self classTextServer) FontSetGenerateMipmaps(font_rid RID, generate_mipmaps bool) {
	self.ptr.API.TextServer_font_set_generate_mipmaps(self, font_rid, generate_mipmaps)
}
func (self classTextServer) FontGetGenerateMipmaps(font_rid RID) bool {
	return self.ptr.API.TextServer_font_get_generate_mipmaps(self, font_rid)
}
func (self classTextServer) FontSetMultichannelSignedDistanceField(font_rid RID, msdf bool) {
	self.ptr.API.TextServer_font_set_multichannel_signed_distance_field(self, font_rid, msdf)
}
func (self classTextServer) FontIsMultichannelSignedDistanceField(font_rid RID) bool {
	return self.ptr.API.TextServer_font_is_multichannel_signed_distance_field(self, font_rid)
}
func (self classTextServer) FontSetMsdfPixelRange(font_rid RID, msdf_pixel_range Int) {
	self.ptr.API.TextServer_font_set_msdf_pixel_range(self, font_rid, msdf_pixel_range)
}
func (self classTextServer) FontGetMsdfPixelRange(font_rid RID) Int {
	return self.ptr.API.TextServer_font_get_msdf_pixel_range(self, font_rid)
}
func (self classTextServer) FontSetMsdfSize(font_rid RID, msdf_size Int) {
	self.ptr.API.TextServer_font_set_msdf_size(self, font_rid, msdf_size)
}
func (self classTextServer) FontGetMsdfSize(font_rid RID) Int {
	return self.ptr.API.TextServer_font_get_msdf_size(self, font_rid)
}
func (self classTextServer) FontSetFixedSize(font_rid RID, fixed_size Int) {
	self.ptr.API.TextServer_font_set_fixed_size(self, font_rid, fixed_size)
}
func (self classTextServer) FontGetFixedSize(font_rid RID) Int {
	return self.ptr.API.TextServer_font_get_fixed_size(self, font_rid)
}
func (self classTextServer) FontSetFixedSizeScaleMode(font_rid RID, fixed_size_scale_mode TextServerFixedSizeScaleMode) {
	self.ptr.API.TextServer_font_set_fixed_size_scale_mode(self, font_rid, fixed_size_scale_mode)
}
func (self classTextServer) FontGetFixedSizeScaleMode(font_rid RID) TextServerFixedSizeScaleMode {
	return self.ptr.API.TextServer_font_get_fixed_size_scale_mode(self, font_rid)
}
func (self classTextServer) FontSetAllowSystemFallback(font_rid RID, allow_system_fallback bool) {
	self.ptr.API.TextServer_font_set_allow_system_fallback(self, font_rid, allow_system_fallback)
}
func (self classTextServer) FontIsAllowSystemFallback(font_rid RID) bool {
	return self.ptr.API.TextServer_font_is_allow_system_fallback(self, font_rid)
}
func (self classTextServer) FontSetForceAutohinter(font_rid RID, force_autohinter bool) {
	self.ptr.API.TextServer_font_set_force_autohinter(self, font_rid, force_autohinter)
}
func (self classTextServer) FontIsForceAutohinter(font_rid RID) bool {
	return self.ptr.API.TextServer_font_is_force_autohinter(self, font_rid)
}
func (self classTextServer) FontSetHinting(font_rid RID, hinting TextServerHinting) {
	self.ptr.API.TextServer_font_set_hinting(self, font_rid, hinting)
}
func (self classTextServer) FontGetHinting(font_rid RID) TextServerHinting {
	return self.ptr.API.TextServer_font_get_hinting(self, font_rid)
}
func (self classTextServer) FontSetSubpixelPositioning(font_rid RID, subpixel_positioning TextServerSubpixelPositioning) {
	self.ptr.API.TextServer_font_set_subpixel_positioning(self, font_rid, subpixel_positioning)
}
func (self classTextServer) FontGetSubpixelPositioning(font_rid RID) TextServerSubpixelPositioning {
	return self.ptr.API.TextServer_font_get_subpixel_positioning(self, font_rid)
}
func (self classTextServer) FontSetEmbolden(font_rid RID, strength Float) {
	self.ptr.API.TextServer_font_set_embolden(self, font_rid, strength)
}
func (self classTextServer) FontGetEmbolden(font_rid RID) Float {
	return self.ptr.API.TextServer_font_get_embolden(self, font_rid)
}
func (self classTextServer) FontSetSpacing(font_rid RID, spacing TextServerSpacingType, value Int) {
	self.ptr.API.TextServer_font_set_spacing(self, font_rid, spacing, value)
}
func (self classTextServer) FontGetSpacing(font_rid RID, spacing TextServerSpacingType) Int {
	return self.ptr.API.TextServer_font_get_spacing(self, font_rid, spacing)
}
func (self classTextServer) FontSetTransform(font_rid RID, transform Transform2D) {
	self.ptr.API.TextServer_font_set_transform(self, font_rid, transform)
}
func (self classTextServer) FontGetTransform(font_rid RID) Transform2D {
	return self.ptr.API.TextServer_font_get_transform(self, font_rid)
}
func (self classTextServer) FontSetVariationCoordinates(font_rid RID, variation_coordinates Dictionary) {
	self.ptr.API.TextServer_font_set_variation_coordinates(self, font_rid, variation_coordinates)
}
func (self classTextServer) FontGetVariationCoordinates(font_rid RID) Dictionary {
	return self.ptr.API.TextServer_font_get_variation_coordinates(self, font_rid)
}
func (self classTextServer) FontSetOversampling(font_rid RID, oversampling Float) {
	self.ptr.API.TextServer_font_set_oversampling(self, font_rid, oversampling)
}
func (self classTextServer) FontGetOversampling(font_rid RID) Float {
	return self.ptr.API.TextServer_font_get_oversampling(self, font_rid)
}
func (self classTextServer) FontGetSizeCacheList(font_rid RID) ArrayOf[Vector2i] {
	return self.ptr.API.TextServer_font_get_size_cache_list(self, font_rid)
}
func (self classTextServer) FontClearSizeCache(font_rid RID) {
	self.ptr.API.TextServer_font_clear_size_cache(self, font_rid)
}
func (self classTextServer) FontRemoveSizeCache(font_rid RID, size Vector2i) {
	self.ptr.API.TextServer_font_remove_size_cache(self, font_rid, size)
}
func (self classTextServer) FontSetAscent(font_rid RID, size Int, ascent Float) {
	self.ptr.API.TextServer_font_set_ascent(self, font_rid, size, ascent)
}
func (self classTextServer) FontGetAscent(font_rid RID, size Int) Float {
	return self.ptr.API.TextServer_font_get_ascent(self, font_rid, size)
}
func (self classTextServer) FontSetDescent(font_rid RID, size Int, descent Float) {
	self.ptr.API.TextServer_font_set_descent(self, font_rid, size, descent)
}
func (self classTextServer) FontGetDescent(font_rid RID, size Int) Float {
	return self.ptr.API.TextServer_font_get_descent(self, font_rid, size)
}
func (self classTextServer) FontSetUnderlinePosition(font_rid RID, size Int, underline_position Float) {
	self.ptr.API.TextServer_font_set_underline_position(self, font_rid, size, underline_position)
}
func (self classTextServer) FontGetUnderlinePosition(font_rid RID, size Int) Float {
	return self.ptr.API.TextServer_font_get_underline_position(self, font_rid, size)
}
func (self classTextServer) FontSetUnderlineThickness(font_rid RID, size Int, underline_thickness Float) {
	self.ptr.API.TextServer_font_set_underline_thickness(self, font_rid, size, underline_thickness)
}
func (self classTextServer) FontGetUnderlineThickness(font_rid RID, size Int) Float {
	return self.ptr.API.TextServer_font_get_underline_thickness(self, font_rid, size)
}
func (self classTextServer) FontSetScale(font_rid RID, size Int, scale Float) {
	self.ptr.API.TextServer_font_set_scale(self, font_rid, size, scale)
}
func (self classTextServer) FontGetScale(font_rid RID, size Int) Float {
	return self.ptr.API.TextServer_font_get_scale(self, font_rid, size)
}
func (self classTextServer) FontGetTextureCount(font_rid RID, size Vector2i) Int {
	return self.ptr.API.TextServer_font_get_texture_count(self, font_rid, size)
}
func (self classTextServer) FontClearTextures(font_rid RID, size Vector2i) {
	self.ptr.API.TextServer_font_clear_textures(self, font_rid, size)
}
func (self classTextServer) FontRemoveTexture(font_rid RID, size Vector2i, texture_index Int) {
	self.ptr.API.TextServer_font_remove_texture(self, font_rid, size, texture_index)
}
func (self classTextServer) FontSetTextureImage(font_rid RID, size Vector2i, texture_index Int, image Image) {
	self.ptr.API.TextServer_font_set_texture_image(self, font_rid, size, texture_index, image)
}
func (self classTextServer) FontGetTextureImage(font_rid RID, size Vector2i, texture_index Int) Image {
	return self.ptr.API.TextServer_font_get_texture_image(self, font_rid, size, texture_index)
}
func (self classTextServer) FontSetTextureOffsets(font_rid RID, size Vector2i, texture_index Int, offset PackedInt32Array) {
	self.ptr.API.TextServer_font_set_texture_offsets(self, font_rid, size, texture_index, offset)
}
func (self classTextServer) FontGetTextureOffsets(font_rid RID, size Vector2i, texture_index Int) PackedInt32Array {
	return self.ptr.API.TextServer_font_get_texture_offsets(self, font_rid, size, texture_index)
}
func (self classTextServer) FontGetGlyphList(font_rid RID, size Vector2i) PackedInt32Array {
	return self.ptr.API.TextServer_font_get_glyph_list(self, font_rid, size)
}
func (self classTextServer) FontClearGlyphs(font_rid RID, size Vector2i) {
	self.ptr.API.TextServer_font_clear_glyphs(self, font_rid, size)
}
func (self classTextServer) FontRemoveGlyph(font_rid RID, size Vector2i, glyph Int) {
	self.ptr.API.TextServer_font_remove_glyph(self, font_rid, size, glyph)
}
func (self classTextServer) FontGetGlyphAdvance(font_rid RID, size Int, glyph Int) Vector2 {
	return self.ptr.API.TextServer_font_get_glyph_advance(self, font_rid, size, glyph)
}
func (self classTextServer) FontSetGlyphAdvance(font_rid RID, size Int, glyph Int, advance Vector2) {
	self.ptr.API.TextServer_font_set_glyph_advance(self, font_rid, size, glyph, advance)
}
func (self classTextServer) FontGetGlyphOffset(font_rid RID, size Vector2i, glyph Int) Vector2 {
	return self.ptr.API.TextServer_font_get_glyph_offset(self, font_rid, size, glyph)
}
func (self classTextServer) FontSetGlyphOffset(font_rid RID, size Vector2i, glyph Int, offset Vector2) {
	self.ptr.API.TextServer_font_set_glyph_offset(self, font_rid, size, glyph, offset)
}
func (self classTextServer) FontGetGlyphSize(font_rid RID, size Vector2i, glyph Int) Vector2 {
	return self.ptr.API.TextServer_font_get_glyph_size(self, font_rid, size, glyph)
}
func (self classTextServer) FontSetGlyphSize(font_rid RID, size Vector2i, glyph Int, gl_size Vector2) {
	self.ptr.API.TextServer_font_set_glyph_size(self, font_rid, size, glyph, gl_size)
}
func (self classTextServer) FontGetGlyphUvRect(font_rid RID, size Vector2i, glyph Int) Rect2 {
	return self.ptr.API.TextServer_font_get_glyph_uv_rect(self, font_rid, size, glyph)
}
func (self classTextServer) FontSetGlyphUvRect(font_rid RID, size Vector2i, glyph Int, uv_rect Rect2) {
	self.ptr.API.TextServer_font_set_glyph_uv_rect(self, font_rid, size, glyph, uv_rect)
}
func (self classTextServer) FontGetGlyphTextureIdx(font_rid RID, size Vector2i, glyph Int) Int {
	return self.ptr.API.TextServer_font_get_glyph_texture_idx(self, font_rid, size, glyph)
}
func (self classTextServer) FontSetGlyphTextureIdx(font_rid RID, size Vector2i, glyph Int, texture_idx Int) {
	self.ptr.API.TextServer_font_set_glyph_texture_idx(self, font_rid, size, glyph, texture_idx)
}
func (self classTextServer) FontGetGlyphTextureRid(font_rid RID, size Vector2i, glyph Int) RID {
	return self.ptr.API.TextServer_font_get_glyph_texture_rid(self, font_rid, size, glyph)
}
func (self classTextServer) FontGetGlyphTextureSize(font_rid RID, size Vector2i, glyph Int) Vector2 {
	return self.ptr.API.TextServer_font_get_glyph_texture_size(self, font_rid, size, glyph)
}
func (self classTextServer) FontGetGlyphContours(font RID, size Int, index Int) Dictionary {
	return self.ptr.API.TextServer_font_get_glyph_contours(self, font, size, index)
}
func (self classTextServer) FontGetKerningList(font_rid RID, size Int) ArrayOf[Vector2i] {
	return self.ptr.API.TextServer_font_get_kerning_list(self, font_rid, size)
}
func (self classTextServer) FontClearKerningMap(font_rid RID, size Int) {
	self.ptr.API.TextServer_font_clear_kerning_map(self, font_rid, size)
}
func (self classTextServer) FontRemoveKerning(font_rid RID, size Int, glyph_pair Vector2i) {
	self.ptr.API.TextServer_font_remove_kerning(self, font_rid, size, glyph_pair)
}
func (self classTextServer) FontSetKerning(font_rid RID, size Int, glyph_pair Vector2i, kerning Vector2) {
	self.ptr.API.TextServer_font_set_kerning(self, font_rid, size, glyph_pair, kerning)
}
func (self classTextServer) FontGetKerning(font_rid RID, size Int, glyph_pair Vector2i) Vector2 {
	return self.ptr.API.TextServer_font_get_kerning(self, font_rid, size, glyph_pair)
}
func (self classTextServer) FontGetGlyphIndex(font_rid RID, size Int, char Int, variation_selector Int) Int {
	return self.ptr.API.TextServer_font_get_glyph_index(self, font_rid, size, char, variation_selector)
}
func (self classTextServer) FontGetCharFromGlyphIndex(font_rid RID, size Int, glyph_index Int) Int {
	return self.ptr.API.TextServer_font_get_char_from_glyph_index(self, font_rid, size, glyph_index)
}
func (self classTextServer) FontHasChar(font_rid RID, char Int) bool {
	return self.ptr.API.TextServer_font_has_char(self, font_rid, char)
}
func (self classTextServer) FontGetSupportedChars(font_rid RID) String {
	return self.ptr.API.TextServer_font_get_supported_chars(self, font_rid)
}
func (self classTextServer) FontRenderRange(font_rid RID, size Vector2i, start Int, end Int) {
	self.ptr.API.TextServer_font_render_range(self, font_rid, size, start, end)
}
func (self classTextServer) FontRenderGlyph(font_rid RID, size Vector2i, index Int) {
	self.ptr.API.TextServer_font_render_glyph(self, font_rid, size, index)
}
func (self classTextServer) FontDrawGlyph(font_rid RID, canvas RID, size Int, pos Vector2, index Int, color Color) {
	self.ptr.API.TextServer_font_draw_glyph(self, font_rid, canvas, size, pos, index, color)
}
func (self classTextServer) FontDrawGlyphOutline(font_rid RID, canvas RID, size Int, outline_size Int, pos Vector2, index Int, color Color) {
	self.ptr.API.TextServer_font_draw_glyph_outline(self, font_rid, canvas, size, outline_size, pos, index, color)
}
func (self classTextServer) FontIsLanguageSupported(font_rid RID, language String) bool {
	return self.ptr.API.TextServer_font_is_language_supported(self, font_rid, language)
}
func (self classTextServer) FontSetLanguageSupportOverride(font_rid RID, language String, supported bool) {
	self.ptr.API.TextServer_font_set_language_support_override(self, font_rid, language, supported)
}
func (self classTextServer) FontGetLanguageSupportOverride(font_rid RID, language String) bool {
	return self.ptr.API.TextServer_font_get_language_support_override(self, font_rid, language)
}
func (self classTextServer) FontRemoveLanguageSupportOverride(font_rid RID, language String) {
	self.ptr.API.TextServer_font_remove_language_support_override(self, font_rid, language)
}
func (self classTextServer) FontGetLanguageSupportOverrides(font_rid RID) PackedStringArray {
	return self.ptr.API.TextServer_font_get_language_support_overrides(self, font_rid)
}
func (self classTextServer) FontIsScriptSupported(font_rid RID, script String) bool {
	return self.ptr.API.TextServer_font_is_script_supported(self, font_rid, script)
}
func (self classTextServer) FontSetScriptSupportOverride(font_rid RID, script String, supported bool) {
	self.ptr.API.TextServer_font_set_script_support_override(self, font_rid, script, supported)
}
func (self classTextServer) FontGetScriptSupportOverride(font_rid RID, script String) bool {
	return self.ptr.API.TextServer_font_get_script_support_override(self, font_rid, script)
}
func (self classTextServer) FontRemoveScriptSupportOverride(font_rid RID, script String) {
	self.ptr.API.TextServer_font_remove_script_support_override(self, font_rid, script)
}
func (self classTextServer) FontGetScriptSupportOverrides(font_rid RID) PackedStringArray {
	return self.ptr.API.TextServer_font_get_script_support_overrides(self, font_rid)
}
func (self classTextServer) FontSetOpentypeFeatureOverrides(font_rid RID, overrides Dictionary) {
	self.ptr.API.TextServer_font_set_opentype_feature_overrides(self, font_rid, overrides)
}
func (self classTextServer) FontGetOpentypeFeatureOverrides(font_rid RID) Dictionary {
	return self.ptr.API.TextServer_font_get_opentype_feature_overrides(self, font_rid)
}
func (self classTextServer) FontSupportedFeatureList(font_rid RID) Dictionary {
	return self.ptr.API.TextServer_font_supported_feature_list(self, font_rid)
}
func (self classTextServer) FontSupportedVariationList(font_rid RID) Dictionary {
	return self.ptr.API.TextServer_font_supported_variation_list(self, font_rid)
}
func (self classTextServer) FontGetGlobalOversampling() Float {
	return self.ptr.API.TextServer_font_get_global_oversampling(self)
}
func (self classTextServer) FontSetGlobalOversampling(oversampling Float) {
	self.ptr.API.TextServer_font_set_global_oversampling(self, oversampling)
}
func (self classTextServer) GetHexCodeBoxSize(size Int, index Int) Vector2 {
	return self.ptr.API.TextServer_get_hex_code_box_size(self, size, index)
}
func (self classTextServer) DrawHexCodeBox(canvas RID, size Int, pos Vector2, index Int, color Color) {
	self.ptr.API.TextServer_draw_hex_code_box(self, canvas, size, pos, index, color)
}
func (self classTextServer) CreateShapedText(direction TextServerDirection, orientation TextServerOrientation) RID {
	return self.ptr.API.TextServer_create_shaped_text(self, direction, orientation)
}
func (self classTextServer) ShapedTextClear(rid RID) {
	self.ptr.API.TextServer_shaped_text_clear(self, rid)
}
func (self classTextServer) ShapedTextSetDirection(shaped RID, direction TextServerDirection) {
	self.ptr.API.TextServer_shaped_text_set_direction(self, shaped, direction)
}
func (self classTextServer) ShapedTextGetDirection(shaped RID) TextServerDirection {
	return self.ptr.API.TextServer_shaped_text_get_direction(self, shaped)
}
func (self classTextServer) ShapedTextGetInferredDirection(shaped RID) TextServerDirection {
	return self.ptr.API.TextServer_shaped_text_get_inferred_direction(self, shaped)
}
func (self classTextServer) ShapedTextSetBidiOverride(shaped RID, override Array) {
	self.ptr.API.TextServer_shaped_text_set_bidi_override(self, shaped, override)
}
func (self classTextServer) ShapedTextSetCustomPunctuation(shaped RID, punct String) {
	self.ptr.API.TextServer_shaped_text_set_custom_punctuation(self, shaped, punct)
}
func (self classTextServer) ShapedTextGetCustomPunctuation(shaped RID) String {
	return self.ptr.API.TextServer_shaped_text_get_custom_punctuation(self, shaped)
}
func (self classTextServer) ShapedTextSetCustomEllipsis(shaped RID, char Int) {
	self.ptr.API.TextServer_shaped_text_set_custom_ellipsis(self, shaped, char)
}
func (self classTextServer) ShapedTextGetCustomEllipsis(shaped RID) Int {
	return self.ptr.API.TextServer_shaped_text_get_custom_ellipsis(self, shaped)
}
func (self classTextServer) ShapedTextSetOrientation(shaped RID, orientation TextServerOrientation) {
	self.ptr.API.TextServer_shaped_text_set_orientation(self, shaped, orientation)
}
func (self classTextServer) ShapedTextGetOrientation(shaped RID) TextServerOrientation {
	return self.ptr.API.TextServer_shaped_text_get_orientation(self, shaped)
}
func (self classTextServer) ShapedTextSetPreserveInvalid(shaped RID, enabled bool) {
	self.ptr.API.TextServer_shaped_text_set_preserve_invalid(self, shaped, enabled)
}
func (self classTextServer) ShapedTextGetPreserveInvalid(shaped RID) bool {
	return self.ptr.API.TextServer_shaped_text_get_preserve_invalid(self, shaped)
}
func (self classTextServer) ShapedTextSetPreserveControl(shaped RID, enabled bool) {
	self.ptr.API.TextServer_shaped_text_set_preserve_control(self, shaped, enabled)
}
func (self classTextServer) ShapedTextGetPreserveControl(shaped RID) bool {
	return self.ptr.API.TextServer_shaped_text_get_preserve_control(self, shaped)
}
func (self classTextServer) ShapedTextSetSpacing(shaped RID, spacing TextServerSpacingType, value Int) {
	self.ptr.API.TextServer_shaped_text_set_spacing(self, shaped, spacing, value)
}
func (self classTextServer) ShapedTextGetSpacing(shaped RID, spacing TextServerSpacingType) Int {
	return self.ptr.API.TextServer_shaped_text_get_spacing(self, shaped, spacing)
}
func (self classTextServer) ShapedTextAddString(shaped RID, text String, fonts ArrayOf[RID], size Int, opentype_features Dictionary, language String, meta Variant) bool {
	return self.ptr.API.TextServer_shaped_text_add_string(self, shaped, text, fonts, size, opentype_features, language, meta)
}
func (self classTextServer) ShapedTextAddObject(shaped RID, key Variant, size Vector2, inline_align InlineAlignment, length Int, baseline Float) bool {
	return self.ptr.API.TextServer_shaped_text_add_object(self, shaped, key, size, inline_align, length, baseline)
}
func (self classTextServer) ShapedTextResizeObject(shaped RID, key Variant, size Vector2, inline_align InlineAlignment, baseline Float) bool {
	return self.ptr.API.TextServer_shaped_text_resize_object(self, shaped, key, size, inline_align, baseline)
}
func (self classTextServer) ShapedGetSpanCount(shaped RID) Int {
	return self.ptr.API.TextServer_shaped_get_span_count(self, shaped)
}
func (self classTextServer) ShapedGetSpanMeta(shaped RID, index Int) Variant {
	return self.ptr.API.TextServer_shaped_get_span_meta(self, shaped, index)
}
func (self classTextServer) ShapedSetSpanUpdateFont(shaped RID, index Int, fonts ArrayOf[RID], size Int, opentype_features Dictionary) {
	self.ptr.API.TextServer_shaped_set_span_update_font(self, shaped, index, fonts, size, opentype_features)
}
func (self classTextServer) ShapedTextSubstr(shaped RID, start Int, length Int) RID {
	return self.ptr.API.TextServer_shaped_text_substr(self, shaped, start, length)
}
func (self classTextServer) ShapedTextGetParent(shaped RID) RID {
	return self.ptr.API.TextServer_shaped_text_get_parent(self, shaped)
}
func (self classTextServer) ShapedTextFitToWidth(shaped RID, width Float, justification_flags TextServerJustificationFlag) Float {
	return self.ptr.API.TextServer_shaped_text_fit_to_width(self, shaped, width, justification_flags)
}
func (self classTextServer) ShapedTextTabAlign(shaped RID, tab_stops PackedFloat32Array) Float {
	return self.ptr.API.TextServer_shaped_text_tab_align(self, shaped, tab_stops)
}
func (self classTextServer) ShapedTextShape(shaped RID) bool {
	return self.ptr.API.TextServer_shaped_text_shape(self, shaped)
}
func (self classTextServer) ShapedTextIsReady(shaped RID) bool {
	return self.ptr.API.TextServer_shaped_text_is_ready(self, shaped)
}
func (self classTextServer) ShapedTextHasVisibleChars(shaped RID) bool {
	return self.ptr.API.TextServer_shaped_text_has_visible_chars(self, shaped)
}
func (self classTextServer) ShapedTextGetGlyphs(shaped RID) ArrayOf[Dictionary] {
	return self.ptr.API.TextServer_shaped_text_get_glyphs(self, shaped)
}
func (self classTextServer) ShapedTextSortLogical(shaped RID) ArrayOf[Dictionary] {
	return self.ptr.API.TextServer_shaped_text_sort_logical(self, shaped)
}
func (self classTextServer) ShapedTextGetGlyphCount(shaped RID) Int {
	return self.ptr.API.TextServer_shaped_text_get_glyph_count(self, shaped)
}
func (self classTextServer) ShapedTextGetRange(shaped RID) Vector2i {
	return self.ptr.API.TextServer_shaped_text_get_range(self, shaped)
}
func (self classTextServer) ShapedTextGetLineBreaksAdv(shaped RID, width PackedFloat32Array, start Int, once bool, break_flags TextServerLineBreakFlag) PackedInt32Array {
	return self.ptr.API.TextServer_shaped_text_get_line_breaks_adv(self, shaped, width, start, once, break_flags)
}
func (self classTextServer) ShapedTextGetLineBreaks(shaped RID, width Float, start Int, break_flags TextServerLineBreakFlag) PackedInt32Array {
	return self.ptr.API.TextServer_shaped_text_get_line_breaks(self, shaped, width, start, break_flags)
}
func (self classTextServer) ShapedTextGetWordBreaks(shaped RID, grapheme_flags TextServerGraphemeFlag) PackedInt32Array {
	return self.ptr.API.TextServer_shaped_text_get_word_breaks(self, shaped, grapheme_flags)
}
func (self classTextServer) ShapedTextGetTrimPos(shaped RID) Int {
	return self.ptr.API.TextServer_shaped_text_get_trim_pos(self, shaped)
}
func (self classTextServer) ShapedTextGetEllipsisPos(shaped RID) Int {
	return self.ptr.API.TextServer_shaped_text_get_ellipsis_pos(self, shaped)
}
func (self classTextServer) ShapedTextGetEllipsisGlyphs(shaped RID) ArrayOf[Dictionary] {
	return self.ptr.API.TextServer_shaped_text_get_ellipsis_glyphs(self, shaped)
}
func (self classTextServer) ShapedTextGetEllipsisGlyphCount(shaped RID) Int {
	return self.ptr.API.TextServer_shaped_text_get_ellipsis_glyph_count(self, shaped)
}
func (self classTextServer) ShapedTextOverrunTrimToWidth(shaped RID, width Float, overrun_trim_flags TextServerTextOverrunFlag) {
	self.ptr.API.TextServer_shaped_text_overrun_trim_to_width(self, shaped, width, overrun_trim_flags)
}
func (self classTextServer) ShapedTextGetObjects(shaped RID) Array {
	return self.ptr.API.TextServer_shaped_text_get_objects(self, shaped)
}
func (self classTextServer) ShapedTextGetObjectRect(shaped RID, key Variant) Rect2 {
	return self.ptr.API.TextServer_shaped_text_get_object_rect(self, shaped, key)
}
func (self classTextServer) ShapedTextGetSize(shaped RID) Vector2 {
	return self.ptr.API.TextServer_shaped_text_get_size(self, shaped)
}
func (self classTextServer) ShapedTextGetAscent(shaped RID) Float {
	return self.ptr.API.TextServer_shaped_text_get_ascent(self, shaped)
}
func (self classTextServer) ShapedTextGetDescent(shaped RID) Float {
	return self.ptr.API.TextServer_shaped_text_get_descent(self, shaped)
}
func (self classTextServer) ShapedTextGetWidth(shaped RID) Float {
	return self.ptr.API.TextServer_shaped_text_get_width(self, shaped)
}
func (self classTextServer) ShapedTextGetUnderlinePosition(shaped RID) Float {
	return self.ptr.API.TextServer_shaped_text_get_underline_position(self, shaped)
}
func (self classTextServer) ShapedTextGetUnderlineThickness(shaped RID) Float {
	return self.ptr.API.TextServer_shaped_text_get_underline_thickness(self, shaped)
}
func (self classTextServer) ShapedTextGetCarets(shaped RID, position Int) Dictionary {
	return self.ptr.API.TextServer_shaped_text_get_carets(self, shaped, position)
}
func (self classTextServer) ShapedTextGetSelection(shaped RID, start Int, end Int) PackedVector2Array {
	return self.ptr.API.TextServer_shaped_text_get_selection(self, shaped, start, end)
}
func (self classTextServer) ShapedTextHitTestGrapheme(shaped RID, coords Float) Int {
	return self.ptr.API.TextServer_shaped_text_hit_test_grapheme(self, shaped, coords)
}
func (self classTextServer) ShapedTextHitTestPosition(shaped RID, coords Float) Int {
	return self.ptr.API.TextServer_shaped_text_hit_test_position(self, shaped, coords)
}
func (self classTextServer) ShapedTextGetGraphemeBounds(shaped RID, pos Int) Vector2 {
	return self.ptr.API.TextServer_shaped_text_get_grapheme_bounds(self, shaped, pos)
}
func (self classTextServer) ShapedTextNextGraphemePos(shaped RID, pos Int) Int {
	return self.ptr.API.TextServer_shaped_text_next_grapheme_pos(self, shaped, pos)
}
func (self classTextServer) ShapedTextPrevGraphemePos(shaped RID, pos Int) Int {
	return self.ptr.API.TextServer_shaped_text_prev_grapheme_pos(self, shaped, pos)
}
func (self classTextServer) ShapedTextGetCharacterBreaks(shaped RID) PackedInt32Array {
	return self.ptr.API.TextServer_shaped_text_get_character_breaks(self, shaped)
}
func (self classTextServer) ShapedTextNextCharacterPos(shaped RID, pos Int) Int {
	return self.ptr.API.TextServer_shaped_text_next_character_pos(self, shaped, pos)
}
func (self classTextServer) ShapedTextPrevCharacterPos(shaped RID, pos Int) Int {
	return self.ptr.API.TextServer_shaped_text_prev_character_pos(self, shaped, pos)
}
func (self classTextServer) ShapedTextClosestCharacterPos(shaped RID, pos Int) Int {
	return self.ptr.API.TextServer_shaped_text_closest_character_pos(self, shaped, pos)
}
func (self classTextServer) ShapedTextDraw(shaped RID, canvas RID, pos Vector2, clip_l Float, clip_r Float, color Color) {
	self.ptr.API.TextServer_shaped_text_draw(self, shaped, canvas, pos, clip_l, clip_r, color)
}
func (self classTextServer) ShapedTextDrawOutline(shaped RID, canvas RID, pos Vector2, clip_l Float, clip_r Float, outline_size Int, color Color) {
	self.ptr.API.TextServer_shaped_text_draw_outline(self, shaped, canvas, pos, clip_l, clip_r, outline_size, color)
}
func (self classTextServer) ShapedTextGetDominantDirectionInRange(shaped RID, start Int, end Int) TextServerDirection {
	return self.ptr.API.TextServer_shaped_text_get_dominant_direction_in_range(self, shaped, start, end)
}
func (self classTextServer) FormatNumber(number String, language String) String {
	return self.ptr.API.TextServer_format_number(self, number, language)
}
func (self classTextServer) ParseNumber(number String, language String) String {
	return self.ptr.API.TextServer_parse_number(self, number, language)
}
func (self classTextServer) PercentSign(language String) String {
	return self.ptr.API.TextServer_percent_sign(self, language)
}
func (self classTextServer) StringGetWordBreaks(s String, language String, chars_per_line Int) PackedInt32Array {
	return self.ptr.API.TextServer_string_get_word_breaks(self, s, language, chars_per_line)
}
func (self classTextServer) StringGetCharacterBreaks(s String, language String) PackedInt32Array {
	return self.ptr.API.TextServer_string_get_character_breaks(self, s, language)
}
func (self classTextServer) IsConfusable(s String, dict PackedStringArray) Int {
	return self.ptr.API.TextServer_is_confusable(self, s, dict)
}
func (self classTextServer) SpoofCheck(s String) bool {
	return self.ptr.API.TextServer_spoof_check(self, s)
}
func (self classTextServer) StripDiacritics(s String) String {
	return self.ptr.API.TextServer_strip_diacritics(self, s)
}
func (self classTextServer) IsValidIdentifier(s String) bool {
	return self.ptr.API.TextServer_is_valid_identifier(self, s)
}
func (self classTextServer) StringToUpper(s String, language String) String {
	return self.ptr.API.TextServer_string_to_upper(self, s, language)
}
func (self classTextServer) StringToLower(s String, language String) String {
	return self.ptr.API.TextServer_string_to_lower(self, s, language)
}
func (self classTextServer) ParseStructuredText(parser_type TextServerStructuredTextParser, args Array, text String) ArrayOf[Vector3i] {
	return self.ptr.API.TextServer_parse_structured_text(self, parser_type, args, text)
}

type classTextServerAdvanced struct{ Class[classTextServerAdvanced] }

func (self classTextServerAdvanced) Super() TextServerExtension {
	var super TextServerExtension
	super.ptr = self.ptr
	return super
}

func (self classTextServerAdvanced) TextServerExtension() TextServerExtension { return self.Super() }

type classTextServerDummy struct{ Class[classTextServerDummy] }

func (self classTextServerDummy) Super() TextServerExtension {
	var super TextServerExtension
	super.ptr = self.ptr
	return super
}

func (self classTextServerDummy) TextServerExtension() TextServerExtension { return self.Super() }

type classTextServerExtension struct {
	Class[classTextServerExtension]
}

func (self classTextServerExtension) Super() TextServer {
	var super TextServer
	super.ptr = self.ptr
	return super
}

func (self classTextServerExtension) TextServer() TextServer { return self.Super() }

type classTextServerManager struct{ Class[classTextServerManager] }

func (self classTextServerManager) Super() Object {
	var super Object
	super.ptr = self.ptr
	return super
}

func (self classTextServerManager) Object() Object { return self.Super() }

func (self classTextServerManager) isSingleton() {}
func (self classTextServerManager) AddInterface(intf TextServer) {
	self.ptr.API.TextServerManager_add_interface(self, intf)
}
func (self classTextServerManager) GetInterfaceCount() Int {
	return self.ptr.API.TextServerManager_get_interface_count(self)
}
func (self classTextServerManager) RemoveInterface(intf TextServer) {
	self.ptr.API.TextServerManager_remove_interface(self, intf)
}
func (self classTextServerManager) GetInterface(idx Int) TextServer {
	return self.ptr.API.TextServerManager_get_interface(self, idx)
}
func (self classTextServerManager) GetInterfaces() ArrayOf[Dictionary] {
	return self.ptr.API.TextServerManager_get_interfaces(self)
}
func (self classTextServerManager) FindInterface(name String) TextServer {
	return self.ptr.API.TextServerManager_find_interface(self, name)
}
func (self classTextServerManager) SetPrimaryInterface(index TextServer) {
	self.ptr.API.TextServerManager_set_primary_interface(self, index)
}
func (self classTextServerManager) GetPrimaryInterface() TextServer {
	return self.ptr.API.TextServerManager_get_primary_interface(self)
}

type classTexture struct{ Class[classTexture] }

func (self classTexture) Super() Resource { var super Resource; super.ptr = self.ptr; return super }

func (self classTexture) Resource() Resource { return self.Super() }

type classTexture2D struct{ Class[classTexture2D] }

func (self classTexture2D) Super() Texture { var super Texture; super.ptr = self.ptr; return super }

func (self classTexture2D) Texture() Texture { return self.Super() }
func (self classTexture2D) GetWidth() Int {
	return self.ptr.API.Texture2D_get_width(self)
}
func (self classTexture2D) GetHeight() Int {
	return self.ptr.API.Texture2D_get_height(self)
}
func (self classTexture2D) GetSize() Vector2 {
	return self.ptr.API.Texture2D_get_size(self)
}
func (self classTexture2D) HasAlpha() bool {
	return self.ptr.API.Texture2D_has_alpha(self)
}
func (self classTexture2D) Draw(canvas_item RID, position Vector2, modulate Color, transpose bool) {
	self.ptr.API.Texture2D_draw(self, canvas_item, position, modulate, transpose)
}
func (self classTexture2D) DrawRect(canvas_item RID, rect Rect2, tile bool, modulate Color, transpose bool) {
	self.ptr.API.Texture2D_draw_rect(self, canvas_item, rect, tile, modulate, transpose)
}
func (self classTexture2D) DrawRectRegion(canvas_item RID, rect Rect2, src_rect Rect2, modulate Color, transpose bool, clip_uv bool) {
	self.ptr.API.Texture2D_draw_rect_region(self, canvas_item, rect, src_rect, modulate, transpose, clip_uv)
}
func (self classTexture2D) GetImage() Image {
	return self.ptr.API.Texture2D_get_image(self)
}
func (self classTexture2D) CreatePlaceholder() Resource {
	return self.ptr.API.Texture2D_create_placeholder(self)
}

type classTexture2DArray struct{ Class[classTexture2DArray] }

func (self classTexture2DArray) Super() ImageTextureLayered {
	var super ImageTextureLayered
	super.ptr = self.ptr
	return super
}

func (self classTexture2DArray) ImageTextureLayered() ImageTextureLayered { return self.Super() }
func (self classTexture2DArray) CreatePlaceholder() Resource {
	return self.ptr.API.Texture2DArray_create_placeholder(self)
}

type classTexture2DArrayRD struct{ Class[classTexture2DArrayRD] }

func (self classTexture2DArrayRD) Super() TextureLayeredRD {
	var super TextureLayeredRD
	super.ptr = self.ptr
	return super
}

func (self classTexture2DArrayRD) TextureLayeredRD() TextureLayeredRD { return self.Super() }

type classTexture2DRD struct{ Class[classTexture2DRD] }

func (self classTexture2DRD) Super() Texture2D {
	var super Texture2D
	super.ptr = self.ptr
	return super
}

func (self classTexture2DRD) Texture2D() Texture2D { return self.Super() }
func (self classTexture2DRD) SetTextureRdRid(texture_rd_rid RID) {
	self.ptr.API.Texture2DRD_set_texture_rd_rid(self, texture_rd_rid)
}
func (self classTexture2DRD) GetTextureRdRid() RID {
	return self.ptr.API.Texture2DRD_get_texture_rd_rid(self)
}

type classTexture3D struct{ Class[classTexture3D] }

func (self classTexture3D) Super() Texture { var super Texture; super.ptr = self.ptr; return super }

func (self classTexture3D) Texture() Texture { return self.Super() }
func (self classTexture3D) GetFormat() ImageFormat {
	return self.ptr.API.Texture3D_get_format(self)
}
func (self classTexture3D) GetWidth() Int {
	return self.ptr.API.Texture3D_get_width(self)
}
func (self classTexture3D) GetHeight() Int {
	return self.ptr.API.Texture3D_get_height(self)
}
func (self classTexture3D) GetDepth() Int {
	return self.ptr.API.Texture3D_get_depth(self)
}
func (self classTexture3D) HasMipmaps() bool {
	return self.ptr.API.Texture3D_has_mipmaps(self)
}
func (self classTexture3D) GetData() ArrayOf[Image] {
	return self.ptr.API.Texture3D_get_data(self)
}
func (self classTexture3D) CreatePlaceholder() Resource {
	return self.ptr.API.Texture3D_create_placeholder(self)
}

type classTexture3DRD struct{ Class[classTexture3DRD] }

func (self classTexture3DRD) Super() Texture3D {
	var super Texture3D
	super.ptr = self.ptr
	return super
}

func (self classTexture3DRD) Texture3D() Texture3D { return self.Super() }
func (self classTexture3DRD) SetTextureRdRid(texture_rd_rid RID) {
	self.ptr.API.Texture3DRD_set_texture_rd_rid(self, texture_rd_rid)
}
func (self classTexture3DRD) GetTextureRdRid() RID {
	return self.ptr.API.Texture3DRD_get_texture_rd_rid(self)
}

type classTextureButton struct{ Class[classTextureButton] }

func (self classTextureButton) Super() BaseButton {
	var super BaseButton
	super.ptr = self.ptr
	return super
}

func (self classTextureButton) BaseButton() BaseButton { return self.Super() }
func (self classTextureButton) SetTextureNormal(texture Texture2D) {
	self.ptr.API.TextureButton_set_texture_normal(self, texture)
}
func (self classTextureButton) SetTexturePressed(texture Texture2D) {
	self.ptr.API.TextureButton_set_texture_pressed(self, texture)
}
func (self classTextureButton) SetTextureHover(texture Texture2D) {
	self.ptr.API.TextureButton_set_texture_hover(self, texture)
}
func (self classTextureButton) SetTextureDisabled(texture Texture2D) {
	self.ptr.API.TextureButton_set_texture_disabled(self, texture)
}
func (self classTextureButton) SetTextureFocused(texture Texture2D) {
	self.ptr.API.TextureButton_set_texture_focused(self, texture)
}
func (self classTextureButton) SetClickMask(mask BitMap) {
	self.ptr.API.TextureButton_set_click_mask(self, mask)
}
func (self classTextureButton) SetIgnoreTextureSize(ignore bool) {
	self.ptr.API.TextureButton_set_ignore_texture_size(self, ignore)
}
func (self classTextureButton) SetStretchMode(mode TextureButtonStretchMode) {
	self.ptr.API.TextureButton_set_stretch_mode(self, mode)
}
func (self classTextureButton) SetFlipH(enable bool) {
	self.ptr.API.TextureButton_set_flip_h(self, enable)
}
func (self classTextureButton) IsFlippedH() bool {
	return self.ptr.API.TextureButton_is_flipped_h(self)
}
func (self classTextureButton) SetFlipV(enable bool) {
	self.ptr.API.TextureButton_set_flip_v(self, enable)
}
func (self classTextureButton) IsFlippedV() bool {
	return self.ptr.API.TextureButton_is_flipped_v(self)
}
func (self classTextureButton) GetTextureNormal() Texture2D {
	return self.ptr.API.TextureButton_get_texture_normal(self)
}
func (self classTextureButton) GetTexturePressed() Texture2D {
	return self.ptr.API.TextureButton_get_texture_pressed(self)
}
func (self classTextureButton) GetTextureHover() Texture2D {
	return self.ptr.API.TextureButton_get_texture_hover(self)
}
func (self classTextureButton) GetTextureDisabled() Texture2D {
	return self.ptr.API.TextureButton_get_texture_disabled(self)
}
func (self classTextureButton) GetTextureFocused() Texture2D {
	return self.ptr.API.TextureButton_get_texture_focused(self)
}
func (self classTextureButton) GetClickMask() BitMap {
	return self.ptr.API.TextureButton_get_click_mask(self)
}
func (self classTextureButton) GetIgnoreTextureSize() bool {
	return self.ptr.API.TextureButton_get_ignore_texture_size(self)
}
func (self classTextureButton) GetStretchMode() TextureButtonStretchMode {
	return self.ptr.API.TextureButton_get_stretch_mode(self)
}

type classTextureCubemapArrayRD struct {
	Class[classTextureCubemapArrayRD]
}

func (self classTextureCubemapArrayRD) Super() TextureLayeredRD {
	var super TextureLayeredRD
	super.ptr = self.ptr
	return super
}

func (self classTextureCubemapArrayRD) TextureLayeredRD() TextureLayeredRD { return self.Super() }

type classTextureCubemapRD struct{ Class[classTextureCubemapRD] }

func (self classTextureCubemapRD) Super() TextureLayeredRD {
	var super TextureLayeredRD
	super.ptr = self.ptr
	return super
}

func (self classTextureCubemapRD) TextureLayeredRD() TextureLayeredRD { return self.Super() }

type classTextureLayered struct{ Class[classTextureLayered] }

func (self classTextureLayered) Super() Texture {
	var super Texture
	super.ptr = self.ptr
	return super
}

func (self classTextureLayered) Texture() Texture { return self.Super() }
func (self classTextureLayered) GetFormat() ImageFormat {
	return self.ptr.API.TextureLayered_get_format(self)
}
func (self classTextureLayered) GetLayeredType() TextureLayeredLayeredType {
	return self.ptr.API.TextureLayered_get_layered_type(self)
}
func (self classTextureLayered) GetWidth() Int {
	return self.ptr.API.TextureLayered_get_width(self)
}
func (self classTextureLayered) GetHeight() Int {
	return self.ptr.API.TextureLayered_get_height(self)
}
func (self classTextureLayered) GetLayers() Int {
	return self.ptr.API.TextureLayered_get_layers(self)
}
func (self classTextureLayered) HasMipmaps() bool {
	return self.ptr.API.TextureLayered_has_mipmaps(self)
}
func (self classTextureLayered) GetLayerData(layer Int) Image {
	return self.ptr.API.TextureLayered_get_layer_data(self, layer)
}

type classTextureLayeredRD struct{ Class[classTextureLayeredRD] }

func (self classTextureLayeredRD) Super() TextureLayered {
	var super TextureLayered
	super.ptr = self.ptr
	return super
}

func (self classTextureLayeredRD) TextureLayered() TextureLayered { return self.Super() }
func (self classTextureLayeredRD) SetTextureRdRid(texture_rd_rid RID) {
	self.ptr.API.TextureLayeredRD_set_texture_rd_rid(self, texture_rd_rid)
}
func (self classTextureLayeredRD) GetTextureRdRid() RID {
	return self.ptr.API.TextureLayeredRD_get_texture_rd_rid(self)
}

type classTextureProgressBar struct{ Class[classTextureProgressBar] }

func (self classTextureProgressBar) Super() Range {
	var super Range
	super.ptr = self.ptr
	return super
}

func (self classTextureProgressBar) Range() Range { return self.Super() }
func (self classTextureProgressBar) SetUnderTexture(tex Texture2D) {
	self.ptr.API.TextureProgressBar_set_under_texture(self, tex)
}
func (self classTextureProgressBar) GetUnderTexture() Texture2D {
	return self.ptr.API.TextureProgressBar_get_under_texture(self)
}
func (self classTextureProgressBar) SetProgressTexture(tex Texture2D) {
	self.ptr.API.TextureProgressBar_set_progress_texture(self, tex)
}
func (self classTextureProgressBar) GetProgressTexture() Texture2D {
	return self.ptr.API.TextureProgressBar_get_progress_texture(self)
}
func (self classTextureProgressBar) SetOverTexture(tex Texture2D) {
	self.ptr.API.TextureProgressBar_set_over_texture(self, tex)
}
func (self classTextureProgressBar) GetOverTexture() Texture2D {
	return self.ptr.API.TextureProgressBar_get_over_texture(self)
}
func (self classTextureProgressBar) SetFillMode(mode Int) {
	self.ptr.API.TextureProgressBar_set_fill_mode(self, mode)
}
func (self classTextureProgressBar) GetFillMode() Int {
	return self.ptr.API.TextureProgressBar_get_fill_mode(self)
}
func (self classTextureProgressBar) SetTintUnder(tint Color) {
	self.ptr.API.TextureProgressBar_set_tint_under(self, tint)
}
func (self classTextureProgressBar) GetTintUnder() Color {
	return self.ptr.API.TextureProgressBar_get_tint_under(self)
}
func (self classTextureProgressBar) SetTintProgress(tint Color) {
	self.ptr.API.TextureProgressBar_set_tint_progress(self, tint)
}
func (self classTextureProgressBar) GetTintProgress() Color {
	return self.ptr.API.TextureProgressBar_get_tint_progress(self)
}
func (self classTextureProgressBar) SetTintOver(tint Color) {
	self.ptr.API.TextureProgressBar_set_tint_over(self, tint)
}
func (self classTextureProgressBar) GetTintOver() Color {
	return self.ptr.API.TextureProgressBar_get_tint_over(self)
}
func (self classTextureProgressBar) SetTextureProgressOffset(offset Vector2) {
	self.ptr.API.TextureProgressBar_set_texture_progress_offset(self, offset)
}
func (self classTextureProgressBar) GetTextureProgressOffset() Vector2 {
	return self.ptr.API.TextureProgressBar_get_texture_progress_offset(self)
}
func (self classTextureProgressBar) SetRadialInitialAngle(mode Float) {
	self.ptr.API.TextureProgressBar_set_radial_initial_angle(self, mode)
}
func (self classTextureProgressBar) GetRadialInitialAngle() Float {
	return self.ptr.API.TextureProgressBar_get_radial_initial_angle(self)
}
func (self classTextureProgressBar) SetRadialCenterOffset(mode Vector2) {
	self.ptr.API.TextureProgressBar_set_radial_center_offset(self, mode)
}
func (self classTextureProgressBar) GetRadialCenterOffset() Vector2 {
	return self.ptr.API.TextureProgressBar_get_radial_center_offset(self)
}
func (self classTextureProgressBar) SetFillDegrees(mode Float) {
	self.ptr.API.TextureProgressBar_set_fill_degrees(self, mode)
}
func (self classTextureProgressBar) GetFillDegrees() Float {
	return self.ptr.API.TextureProgressBar_get_fill_degrees(self)
}
func (self classTextureProgressBar) SetStretchMargin(margin Side, value Int) {
	self.ptr.API.TextureProgressBar_set_stretch_margin(self, margin, value)
}
func (self classTextureProgressBar) GetStretchMargin(margin Side) Int {
	return self.ptr.API.TextureProgressBar_get_stretch_margin(self, margin)
}
func (self classTextureProgressBar) SetNinePatchStretch(stretch bool) {
	self.ptr.API.TextureProgressBar_set_nine_patch_stretch(self, stretch)
}
func (self classTextureProgressBar) GetNinePatchStretch() bool {
	return self.ptr.API.TextureProgressBar_get_nine_patch_stretch(self)
}

type classTextureRect struct{ Class[classTextureRect] }

func (self classTextureRect) Super() Control { var super Control; super.ptr = self.ptr; return super }

func (self classTextureRect) Control() Control { return self.Super() }
func (self classTextureRect) SetTexture(texture Texture2D) {
	self.ptr.API.TextureRect_set_texture(self, texture)
}
func (self classTextureRect) GetTexture() Texture2D {
	return self.ptr.API.TextureRect_get_texture(self)
}
func (self classTextureRect) SetExpandMode(expand_mode TextureRectExpandMode) {
	self.ptr.API.TextureRect_set_expand_mode(self, expand_mode)
}
func (self classTextureRect) GetExpandMode() TextureRectExpandMode {
	return self.ptr.API.TextureRect_get_expand_mode(self)
}
func (self classTextureRect) SetFlipH(enable bool) {
	self.ptr.API.TextureRect_set_flip_h(self, enable)
}
func (self classTextureRect) IsFlippedH() bool {
	return self.ptr.API.TextureRect_is_flipped_h(self)
}
func (self classTextureRect) SetFlipV(enable bool) {
	self.ptr.API.TextureRect_set_flip_v(self, enable)
}
func (self classTextureRect) IsFlippedV() bool {
	return self.ptr.API.TextureRect_is_flipped_v(self)
}
func (self classTextureRect) SetStretchMode(stretch_mode TextureRectStretchMode) {
	self.ptr.API.TextureRect_set_stretch_mode(self, stretch_mode)
}
func (self classTextureRect) GetStretchMode() TextureRectStretchMode {
	return self.ptr.API.TextureRect_get_stretch_mode(self)
}

type classTheme struct{ Class[classTheme] }

func (self classTheme) Super() Resource { var super Resource; super.ptr = self.ptr; return super }

func (self classTheme) Resource() Resource { return self.Super() }
func (self classTheme) SetIcon(name StringName, theme_type StringName, texture Texture2D) {
	self.ptr.API.Theme_set_icon(self, name, theme_type, texture)
}
func (self classTheme) GetIcon(name StringName, theme_type StringName) Texture2D {
	return self.ptr.API.Theme_get_icon(self, name, theme_type)
}
func (self classTheme) HasIcon(name StringName, theme_type StringName) bool {
	return self.ptr.API.Theme_has_icon(self, name, theme_type)
}
func (self classTheme) RenameIcon(old_name StringName, name StringName, theme_type StringName) {
	self.ptr.API.Theme_rename_icon(self, old_name, name, theme_type)
}
func (self classTheme) ClearIcon(name StringName, theme_type StringName) {
	self.ptr.API.Theme_clear_icon(self, name, theme_type)
}
func (self classTheme) GetIconList(theme_type String) PackedStringArray {
	return self.ptr.API.Theme_get_icon_list(self, theme_type)
}
func (self classTheme) GetIconTypeList() PackedStringArray {
	return self.ptr.API.Theme_get_icon_type_list(self)
}
func (self classTheme) SetStylebox(name StringName, theme_type StringName, texture StyleBox) {
	self.ptr.API.Theme_set_stylebox(self, name, theme_type, texture)
}
func (self classTheme) GetStylebox(name StringName, theme_type StringName) StyleBox {
	return self.ptr.API.Theme_get_stylebox(self, name, theme_type)
}
func (self classTheme) HasStylebox(name StringName, theme_type StringName) bool {
	return self.ptr.API.Theme_has_stylebox(self, name, theme_type)
}
func (self classTheme) RenameStylebox(old_name StringName, name StringName, theme_type StringName) {
	self.ptr.API.Theme_rename_stylebox(self, old_name, name, theme_type)
}
func (self classTheme) ClearStylebox(name StringName, theme_type StringName) {
	self.ptr.API.Theme_clear_stylebox(self, name, theme_type)
}
func (self classTheme) GetStyleboxList(theme_type String) PackedStringArray {
	return self.ptr.API.Theme_get_stylebox_list(self, theme_type)
}
func (self classTheme) GetStyleboxTypeList() PackedStringArray {
	return self.ptr.API.Theme_get_stylebox_type_list(self)
}
func (self classTheme) SetFont(name StringName, theme_type StringName, font Font) {
	self.ptr.API.Theme_set_font(self, name, theme_type, font)
}
func (self classTheme) GetFont(name StringName, theme_type StringName) Font {
	return self.ptr.API.Theme_get_font(self, name, theme_type)
}
func (self classTheme) HasFont(name StringName, theme_type StringName) bool {
	return self.ptr.API.Theme_has_font(self, name, theme_type)
}
func (self classTheme) RenameFont(old_name StringName, name StringName, theme_type StringName) {
	self.ptr.API.Theme_rename_font(self, old_name, name, theme_type)
}
func (self classTheme) ClearFont(name StringName, theme_type StringName) {
	self.ptr.API.Theme_clear_font(self, name, theme_type)
}
func (self classTheme) GetFontList(theme_type String) PackedStringArray {
	return self.ptr.API.Theme_get_font_list(self, theme_type)
}
func (self classTheme) GetFontTypeList() PackedStringArray {
	return self.ptr.API.Theme_get_font_type_list(self)
}
func (self classTheme) SetFontSize(name StringName, theme_type StringName, font_size Int) {
	self.ptr.API.Theme_set_font_size(self, name, theme_type, font_size)
}
func (self classTheme) GetFontSize(name StringName, theme_type StringName) Int {
	return self.ptr.API.Theme_get_font_size(self, name, theme_type)
}
func (self classTheme) HasFontSize(name StringName, theme_type StringName) bool {
	return self.ptr.API.Theme_has_font_size(self, name, theme_type)
}
func (self classTheme) RenameFontSize(old_name StringName, name StringName, theme_type StringName) {
	self.ptr.API.Theme_rename_font_size(self, old_name, name, theme_type)
}
func (self classTheme) ClearFontSize(name StringName, theme_type StringName) {
	self.ptr.API.Theme_clear_font_size(self, name, theme_type)
}
func (self classTheme) GetFontSizeList(theme_type String) PackedStringArray {
	return self.ptr.API.Theme_get_font_size_list(self, theme_type)
}
func (self classTheme) GetFontSizeTypeList() PackedStringArray {
	return self.ptr.API.Theme_get_font_size_type_list(self)
}
func (self classTheme) SetColor(name StringName, theme_type StringName, color Color) {
	self.ptr.API.Theme_set_color(self, name, theme_type, color)
}
func (self classTheme) GetColor(name StringName, theme_type StringName) Color {
	return self.ptr.API.Theme_get_color(self, name, theme_type)
}
func (self classTheme) HasColor(name StringName, theme_type StringName) bool {
	return self.ptr.API.Theme_has_color(self, name, theme_type)
}
func (self classTheme) RenameColor(old_name StringName, name StringName, theme_type StringName) {
	self.ptr.API.Theme_rename_color(self, old_name, name, theme_type)
}
func (self classTheme) ClearColor(name StringName, theme_type StringName) {
	self.ptr.API.Theme_clear_color(self, name, theme_type)
}
func (self classTheme) GetColorList(theme_type String) PackedStringArray {
	return self.ptr.API.Theme_get_color_list(self, theme_type)
}
func (self classTheme) GetColorTypeList() PackedStringArray {
	return self.ptr.API.Theme_get_color_type_list(self)
}
func (self classTheme) SetConstant(name StringName, theme_type StringName, constant Int) {
	self.ptr.API.Theme_set_constant(self, name, theme_type, constant)
}
func (self classTheme) GetConstant(name StringName, theme_type StringName) Int {
	return self.ptr.API.Theme_get_constant(self, name, theme_type)
}
func (self classTheme) HasConstant(name StringName, theme_type StringName) bool {
	return self.ptr.API.Theme_has_constant(self, name, theme_type)
}
func (self classTheme) RenameConstant(old_name StringName, name StringName, theme_type StringName) {
	self.ptr.API.Theme_rename_constant(self, old_name, name, theme_type)
}
func (self classTheme) ClearConstant(name StringName, theme_type StringName) {
	self.ptr.API.Theme_clear_constant(self, name, theme_type)
}
func (self classTheme) GetConstantList(theme_type String) PackedStringArray {
	return self.ptr.API.Theme_get_constant_list(self, theme_type)
}
func (self classTheme) GetConstantTypeList() PackedStringArray {
	return self.ptr.API.Theme_get_constant_type_list(self)
}
func (self classTheme) SetDefaultBaseScale(base_scale Float) {
	self.ptr.API.Theme_set_default_base_scale(self, base_scale)
}
func (self classTheme) GetDefaultBaseScale() Float {
	return self.ptr.API.Theme_get_default_base_scale(self)
}
func (self classTheme) HasDefaultBaseScale() bool {
	return self.ptr.API.Theme_has_default_base_scale(self)
}
func (self classTheme) SetDefaultFont(font Font) {
	self.ptr.API.Theme_set_default_font(self, font)
}
func (self classTheme) GetDefaultFont() Font {
	return self.ptr.API.Theme_get_default_font(self)
}
func (self classTheme) HasDefaultFont() bool {
	return self.ptr.API.Theme_has_default_font(self)
}
func (self classTheme) SetDefaultFontSize(font_size Int) {
	self.ptr.API.Theme_set_default_font_size(self, font_size)
}
func (self classTheme) GetDefaultFontSize() Int {
	return self.ptr.API.Theme_get_default_font_size(self)
}
func (self classTheme) HasDefaultFontSize() bool {
	return self.ptr.API.Theme_has_default_font_size(self)
}
func (self classTheme) SetThemeItem(data_type ThemeDataType, name StringName, theme_type StringName, value Variant) {
	self.ptr.API.Theme_set_theme_item(self, data_type, name, theme_type, value)
}
func (self classTheme) GetThemeItem(data_type ThemeDataType, name StringName, theme_type StringName) Variant {
	return self.ptr.API.Theme_get_theme_item(self, data_type, name, theme_type)
}
func (self classTheme) HasThemeItem(data_type ThemeDataType, name StringName, theme_type StringName) bool {
	return self.ptr.API.Theme_has_theme_item(self, data_type, name, theme_type)
}
func (self classTheme) RenameThemeItem(data_type ThemeDataType, old_name StringName, name StringName, theme_type StringName) {
	self.ptr.API.Theme_rename_theme_item(self, data_type, old_name, name, theme_type)
}
func (self classTheme) ClearThemeItem(data_type ThemeDataType, name StringName, theme_type StringName) {
	self.ptr.API.Theme_clear_theme_item(self, data_type, name, theme_type)
}
func (self classTheme) GetThemeItemList(data_type ThemeDataType, theme_type String) PackedStringArray {
	return self.ptr.API.Theme_get_theme_item_list(self, data_type, theme_type)
}
func (self classTheme) GetThemeItemTypeList(data_type ThemeDataType) PackedStringArray {
	return self.ptr.API.Theme_get_theme_item_type_list(self, data_type)
}
func (self classTheme) SetTypeVariation(theme_type StringName, base_type StringName) {
	self.ptr.API.Theme_set_type_variation(self, theme_type, base_type)
}
func (self classTheme) IsTypeVariation(theme_type StringName, base_type StringName) bool {
	return self.ptr.API.Theme_is_type_variation(self, theme_type, base_type)
}
func (self classTheme) ClearTypeVariation(theme_type StringName) {
	self.ptr.API.Theme_clear_type_variation(self, theme_type)
}
func (self classTheme) GetTypeVariationBase(theme_type StringName) StringName {
	return self.ptr.API.Theme_get_type_variation_base(self, theme_type)
}
func (self classTheme) GetTypeVariationList(base_type StringName) PackedStringArray {
	return self.ptr.API.Theme_get_type_variation_list(self, base_type)
}
func (self classTheme) AddType(theme_type StringName) {
	self.ptr.API.Theme_add_type(self, theme_type)
}
func (self classTheme) RemoveType(theme_type StringName) {
	self.ptr.API.Theme_remove_type(self, theme_type)
}
func (self classTheme) GetTypeList() PackedStringArray {
	return self.ptr.API.Theme_get_type_list(self)
}
func (self classTheme) MergeWith(other Theme) {
	self.ptr.API.Theme_merge_with(self, other)
}
func (self classTheme) Clear() {
	self.ptr.API.Theme_clear(self)
}

type classThemeDB struct{ Class[classThemeDB] }

func (self classThemeDB) Super() Object { var super Object; super.ptr = self.ptr; return super }

func (self classThemeDB) Object() Object { return self.Super() }

func (self classThemeDB) isSingleton() {}
func (self classThemeDB) GetDefaultTheme() Theme {
	return self.ptr.API.ThemeDB_get_default_theme(self)
}
func (self classThemeDB) GetProjectTheme() Theme {
	return self.ptr.API.ThemeDB_get_project_theme(self)
}
func (self classThemeDB) SetFallbackBaseScale(base_scale Float) {
	self.ptr.API.ThemeDB_set_fallback_base_scale(self, base_scale)
}
func (self classThemeDB) GetFallbackBaseScale() Float {
	return self.ptr.API.ThemeDB_get_fallback_base_scale(self)
}
func (self classThemeDB) SetFallbackFont(font Font) {
	self.ptr.API.ThemeDB_set_fallback_font(self, font)
}
func (self classThemeDB) GetFallbackFont() Font {
	return self.ptr.API.ThemeDB_get_fallback_font(self)
}
func (self classThemeDB) SetFallbackFontSize(font_size Int) {
	self.ptr.API.ThemeDB_set_fallback_font_size(self, font_size)
}
func (self classThemeDB) GetFallbackFontSize() Int {
	return self.ptr.API.ThemeDB_get_fallback_font_size(self)
}
func (self classThemeDB) SetFallbackIcon(icon Texture2D) {
	self.ptr.API.ThemeDB_set_fallback_icon(self, icon)
}
func (self classThemeDB) GetFallbackIcon() Texture2D {
	return self.ptr.API.ThemeDB_get_fallback_icon(self)
}
func (self classThemeDB) SetFallbackStylebox(stylebox StyleBox) {
	self.ptr.API.ThemeDB_set_fallback_stylebox(self, stylebox)
}
func (self classThemeDB) GetFallbackStylebox() StyleBox {
	return self.ptr.API.ThemeDB_get_fallback_stylebox(self)
}

type classThread struct{ Class[classThread] }

func (self classThread) Super() RefCounted { var super RefCounted; super.ptr = self.ptr; return super }

func (self classThread) RefCounted() RefCounted { return self.Super() }
func (self classThread) Start(callable Callable, priority ThreadPriority) int64 {
	return self.ptr.API.Thread_start(self, callable, priority)
}
func (self classThread) GetId() String {
	return self.ptr.API.Thread_get_id(self)
}
func (self classThread) IsStarted() bool {
	return self.ptr.API.Thread_is_started(self)
}
func (self classThread) IsAlive() bool {
	return self.ptr.API.Thread_is_alive(self)
}
func (self classThread) WaitToFinish() Variant {
	return self.ptr.API.Thread_wait_to_finish(self)
}
func (self classThread) SetThreadSafetyChecksEnabled(enabled bool) {
	self.ptr.API.Thread_set_thread_safety_checks_enabled(self, enabled)
}

type classTileData struct{ Class[classTileData] }

func (self classTileData) Super() Object { var super Object; super.ptr = self.ptr; return super }

func (self classTileData) Object() Object { return self.Super() }
func (self classTileData) SetFlipH(flip_h bool) {
	self.ptr.API.TileData_set_flip_h(self, flip_h)
}
func (self classTileData) GetFlipH() bool {
	return self.ptr.API.TileData_get_flip_h(self)
}
func (self classTileData) SetFlipV(flip_v bool) {
	self.ptr.API.TileData_set_flip_v(self, flip_v)
}
func (self classTileData) GetFlipV() bool {
	return self.ptr.API.TileData_get_flip_v(self)
}
func (self classTileData) SetTranspose(transpose bool) {
	self.ptr.API.TileData_set_transpose(self, transpose)
}
func (self classTileData) GetTranspose() bool {
	return self.ptr.API.TileData_get_transpose(self)
}
func (self classTileData) SetMaterial(material Material) {
	self.ptr.API.TileData_set_material(self, material)
}
func (self classTileData) GetMaterial() Material {
	return self.ptr.API.TileData_get_material(self)
}
func (self classTileData) SetTextureOrigin(texture_origin Vector2i) {
	self.ptr.API.TileData_set_texture_origin(self, texture_origin)
}
func (self classTileData) GetTextureOrigin() Vector2i {
	return self.ptr.API.TileData_get_texture_origin(self)
}
func (self classTileData) SetModulate(modulate Color) {
	self.ptr.API.TileData_set_modulate(self, modulate)
}
func (self classTileData) GetModulate() Color {
	return self.ptr.API.TileData_get_modulate(self)
}
func (self classTileData) SetZIndex(z_index Int) {
	self.ptr.API.TileData_set_z_index(self, z_index)
}
func (self classTileData) GetZIndex() Int {
	return self.ptr.API.TileData_get_z_index(self)
}
func (self classTileData) SetYSortOrigin(y_sort_origin Int) {
	self.ptr.API.TileData_set_y_sort_origin(self, y_sort_origin)
}
func (self classTileData) GetYSortOrigin() Int {
	return self.ptr.API.TileData_get_y_sort_origin(self)
}
func (self classTileData) SetOccluder(layer_id Int, occluder_polygon OccluderPolygon2D) {
	self.ptr.API.TileData_set_occluder(self, layer_id, occluder_polygon)
}
func (self classTileData) GetOccluder(layer_id Int, flip_h bool, flip_v bool, transpose bool) OccluderPolygon2D {
	return self.ptr.API.TileData_get_occluder(self, layer_id, flip_h, flip_v, transpose)
}
func (self classTileData) SetConstantLinearVelocity(layer_id Int, velocity Vector2) {
	self.ptr.API.TileData_set_constant_linear_velocity(self, layer_id, velocity)
}
func (self classTileData) GetConstantLinearVelocity(layer_id Int) Vector2 {
	return self.ptr.API.TileData_get_constant_linear_velocity(self, layer_id)
}
func (self classTileData) SetConstantAngularVelocity(layer_id Int, velocity Float) {
	self.ptr.API.TileData_set_constant_angular_velocity(self, layer_id, velocity)
}
func (self classTileData) GetConstantAngularVelocity(layer_id Int) Float {
	return self.ptr.API.TileData_get_constant_angular_velocity(self, layer_id)
}
func (self classTileData) SetCollisionPolygonsCount(layer_id Int, polygons_count Int) {
	self.ptr.API.TileData_set_collision_polygons_count(self, layer_id, polygons_count)
}
func (self classTileData) GetCollisionPolygonsCount(layer_id Int) Int {
	return self.ptr.API.TileData_get_collision_polygons_count(self, layer_id)
}
func (self classTileData) AddCollisionPolygon(layer_id Int) {
	self.ptr.API.TileData_add_collision_polygon(self, layer_id)
}
func (self classTileData) RemoveCollisionPolygon(layer_id Int, polygon_index Int) {
	self.ptr.API.TileData_remove_collision_polygon(self, layer_id, polygon_index)
}
func (self classTileData) SetCollisionPolygonPoints(layer_id Int, polygon_index Int, polygon PackedVector2Array) {
	self.ptr.API.TileData_set_collision_polygon_points(self, layer_id, polygon_index, polygon)
}
func (self classTileData) GetCollisionPolygonPoints(layer_id Int, polygon_index Int) PackedVector2Array {
	return self.ptr.API.TileData_get_collision_polygon_points(self, layer_id, polygon_index)
}
func (self classTileData) SetCollisionPolygonOneWay(layer_id Int, polygon_index Int, one_way bool) {
	self.ptr.API.TileData_set_collision_polygon_one_way(self, layer_id, polygon_index, one_way)
}
func (self classTileData) IsCollisionPolygonOneWay(layer_id Int, polygon_index Int) bool {
	return self.ptr.API.TileData_is_collision_polygon_one_way(self, layer_id, polygon_index)
}
func (self classTileData) SetCollisionPolygonOneWayMargin(layer_id Int, polygon_index Int, one_way_margin Float) {
	self.ptr.API.TileData_set_collision_polygon_one_way_margin(self, layer_id, polygon_index, one_way_margin)
}
func (self classTileData) GetCollisionPolygonOneWayMargin(layer_id Int, polygon_index Int) Float {
	return self.ptr.API.TileData_get_collision_polygon_one_way_margin(self, layer_id, polygon_index)
}
func (self classTileData) SetTerrainSet(terrain_set Int) {
	self.ptr.API.TileData_set_terrain_set(self, terrain_set)
}
func (self classTileData) GetTerrainSet() Int {
	return self.ptr.API.TileData_get_terrain_set(self)
}
func (self classTileData) SetTerrain(terrain Int) {
	self.ptr.API.TileData_set_terrain(self, terrain)
}
func (self classTileData) GetTerrain() Int {
	return self.ptr.API.TileData_get_terrain(self)
}
func (self classTileData) SetTerrainPeeringBit(peering_bit TileSetCellNeighbor, terrain Int) {
	self.ptr.API.TileData_set_terrain_peering_bit(self, peering_bit, terrain)
}
func (self classTileData) GetTerrainPeeringBit(peering_bit TileSetCellNeighbor) Int {
	return self.ptr.API.TileData_get_terrain_peering_bit(self, peering_bit)
}
func (self classTileData) SetNavigationPolygon(layer_id Int, navigation_polygon NavigationPolygon) {
	self.ptr.API.TileData_set_navigation_polygon(self, layer_id, navigation_polygon)
}
func (self classTileData) GetNavigationPolygon(layer_id Int, flip_h bool, flip_v bool, transpose bool) NavigationPolygon {
	return self.ptr.API.TileData_get_navigation_polygon(self, layer_id, flip_h, flip_v, transpose)
}
func (self classTileData) SetProbability(probability Float) {
	self.ptr.API.TileData_set_probability(self, probability)
}
func (self classTileData) GetProbability() Float {
	return self.ptr.API.TileData_get_probability(self)
}
func (self classTileData) SetCustomData(layer_name String, value Variant) {
	self.ptr.API.TileData_set_custom_data(self, layer_name, value)
}
func (self classTileData) GetCustomData(layer_name String) Variant {
	return self.ptr.API.TileData_get_custom_data(self, layer_name)
}
func (self classTileData) SetCustomDataByLayerId(layer_id Int, value Variant) {
	self.ptr.API.TileData_set_custom_data_by_layer_id(self, layer_id, value)
}
func (self classTileData) GetCustomDataByLayerId(layer_id Int) Variant {
	return self.ptr.API.TileData_get_custom_data_by_layer_id(self, layer_id)
}

type classTileMap struct{ Class[classTileMap] }

func (self classTileMap) Super() Node2D { var super Node2D; super.ptr = self.ptr; return super }

func (self classTileMap) Node2D() Node2D { return self.Super() }
func (self classTileMap) SetNavigationMap(layer Int, mapping RID) {
	self.ptr.API.TileMap_set_navigation_map(self, layer, mapping)
}
func (self classTileMap) GetNavigationMap(layer Int) RID {
	return self.ptr.API.TileMap_get_navigation_map(self, layer)
}
func (self classTileMap) ForceUpdate(layer Int) {
	self.ptr.API.TileMap_force_update(self, layer)
}
func (self classTileMap) SetTileset(tileset TileSet) {
	self.ptr.API.TileMap_set_tileset(self, tileset)
}
func (self classTileMap) GetTileset() TileSet {
	return self.ptr.API.TileMap_get_tileset(self)
}
func (self classTileMap) SetRenderingQuadrantSize(size Int) {
	self.ptr.API.TileMap_set_rendering_quadrant_size(self, size)
}
func (self classTileMap) GetRenderingQuadrantSize() Int {
	return self.ptr.API.TileMap_get_rendering_quadrant_size(self)
}
func (self classTileMap) GetLayersCount() Int {
	return self.ptr.API.TileMap_get_layers_count(self)
}
func (self classTileMap) AddLayer(to_position Int) {
	self.ptr.API.TileMap_add_layer(self, to_position)
}
func (self classTileMap) MoveLayer(layer Int, to_position Int) {
	self.ptr.API.TileMap_move_layer(self, layer, to_position)
}
func (self classTileMap) RemoveLayer(layer Int) {
	self.ptr.API.TileMap_remove_layer(self, layer)
}
func (self classTileMap) SetLayerName(layer Int, name String) {
	self.ptr.API.TileMap_set_layer_name(self, layer, name)
}
func (self classTileMap) GetLayerName(layer Int) String {
	return self.ptr.API.TileMap_get_layer_name(self, layer)
}
func (self classTileMap) SetLayerEnabled(layer Int, enabled bool) {
	self.ptr.API.TileMap_set_layer_enabled(self, layer, enabled)
}
func (self classTileMap) IsLayerEnabled(layer Int) bool {
	return self.ptr.API.TileMap_is_layer_enabled(self, layer)
}
func (self classTileMap) SetLayerModulate(layer Int, modulate Color) {
	self.ptr.API.TileMap_set_layer_modulate(self, layer, modulate)
}
func (self classTileMap) GetLayerModulate(layer Int) Color {
	return self.ptr.API.TileMap_get_layer_modulate(self, layer)
}
func (self classTileMap) SetLayerYSortEnabled(layer Int, y_sort_enabled bool) {
	self.ptr.API.TileMap_set_layer_y_sort_enabled(self, layer, y_sort_enabled)
}
func (self classTileMap) IsLayerYSortEnabled(layer Int) bool {
	return self.ptr.API.TileMap_is_layer_y_sort_enabled(self, layer)
}
func (self classTileMap) SetLayerYSortOrigin(layer Int, y_sort_origin Int) {
	self.ptr.API.TileMap_set_layer_y_sort_origin(self, layer, y_sort_origin)
}
func (self classTileMap) GetLayerYSortOrigin(layer Int) Int {
	return self.ptr.API.TileMap_get_layer_y_sort_origin(self, layer)
}
func (self classTileMap) SetLayerZIndex(layer Int, z_index Int) {
	self.ptr.API.TileMap_set_layer_z_index(self, layer, z_index)
}
func (self classTileMap) GetLayerZIndex(layer Int) Int {
	return self.ptr.API.TileMap_get_layer_z_index(self, layer)
}
func (self classTileMap) SetLayerNavigationEnabled(layer Int, enabled bool) {
	self.ptr.API.TileMap_set_layer_navigation_enabled(self, layer, enabled)
}
func (self classTileMap) IsLayerNavigationEnabled(layer Int) bool {
	return self.ptr.API.TileMap_is_layer_navigation_enabled(self, layer)
}
func (self classTileMap) SetLayerNavigationMap(layer Int, mapping RID) {
	self.ptr.API.TileMap_set_layer_navigation_map(self, layer, mapping)
}
func (self classTileMap) GetLayerNavigationMap(layer Int) RID {
	return self.ptr.API.TileMap_get_layer_navigation_map(self, layer)
}
func (self classTileMap) SetCollisionAnimatable(enabled bool) {
	self.ptr.API.TileMap_set_collision_animatable(self, enabled)
}
func (self classTileMap) IsCollisionAnimatable() bool {
	return self.ptr.API.TileMap_is_collision_animatable(self)
}
func (self classTileMap) SetCollisionVisibilityMode(collision_visibility_mode TileMapVisibilityMode) {
	self.ptr.API.TileMap_set_collision_visibility_mode(self, collision_visibility_mode)
}
func (self classTileMap) GetCollisionVisibilityMode() TileMapVisibilityMode {
	return self.ptr.API.TileMap_get_collision_visibility_mode(self)
}
func (self classTileMap) SetNavigationVisibilityMode(navigation_visibility_mode TileMapVisibilityMode) {
	self.ptr.API.TileMap_set_navigation_visibility_mode(self, navigation_visibility_mode)
}
func (self classTileMap) GetNavigationVisibilityMode() TileMapVisibilityMode {
	return self.ptr.API.TileMap_get_navigation_visibility_mode(self)
}
func (self classTileMap) SetCell(layer Int, coords Vector2i, source_id Int, atlas_coords Vector2i, alternative_tile Int) {
	self.ptr.API.TileMap_set_cell(self, layer, coords, source_id, atlas_coords, alternative_tile)
}
func (self classTileMap) EraseCell(layer Int, coords Vector2i) {
	self.ptr.API.TileMap_erase_cell(self, layer, coords)
}
func (self classTileMap) GetCellSourceId(layer Int, coords Vector2i, use_proxies bool) Int {
	return self.ptr.API.TileMap_get_cell_source_id(self, layer, coords, use_proxies)
}
func (self classTileMap) GetCellAtlasCoords(layer Int, coords Vector2i, use_proxies bool) Vector2i {
	return self.ptr.API.TileMap_get_cell_atlas_coords(self, layer, coords, use_proxies)
}
func (self classTileMap) GetCellAlternativeTile(layer Int, coords Vector2i, use_proxies bool) Int {
	return self.ptr.API.TileMap_get_cell_alternative_tile(self, layer, coords, use_proxies)
}
func (self classTileMap) GetCellTileData(layer Int, coords Vector2i, use_proxies bool) TileData {
	return self.ptr.API.TileMap_get_cell_tile_data(self, layer, coords, use_proxies)
}
func (self classTileMap) GetCoordsForBodyRid(body RID) Vector2i {
	return self.ptr.API.TileMap_get_coords_for_body_rid(self, body)
}
func (self classTileMap) GetLayerForBodyRid(body RID) Int {
	return self.ptr.API.TileMap_get_layer_for_body_rid(self, body)
}
func (self classTileMap) GetPattern(layer Int, coords_array ArrayOf[Vector2i]) TileMapPattern {
	return self.ptr.API.TileMap_get_pattern(self, layer, coords_array)
}
func (self classTileMap) MapPattern(position_in_tilemap Vector2i, coords_in_pattern Vector2i, pattern TileMapPattern) Vector2i {
	return self.ptr.API.TileMap_map_pattern(self, position_in_tilemap, coords_in_pattern, pattern)
}
func (self classTileMap) SetPattern(layer Int, position Vector2i, pattern TileMapPattern) {
	self.ptr.API.TileMap_set_pattern(self, layer, position, pattern)
}
func (self classTileMap) SetCellsTerrainConnect(layer Int, cells ArrayOf[Vector2i], terrain_set Int, terrain Int, ignore_empty_terrains bool) {
	self.ptr.API.TileMap_set_cells_terrain_connect(self, layer, cells, terrain_set, terrain, ignore_empty_terrains)
}
func (self classTileMap) SetCellsTerrainPath(layer Int, path ArrayOf[Vector2i], terrain_set Int, terrain Int, ignore_empty_terrains bool) {
	self.ptr.API.TileMap_set_cells_terrain_path(self, layer, path, terrain_set, terrain, ignore_empty_terrains)
}
func (self classTileMap) FixInvalidTiles() {
	self.ptr.API.TileMap_fix_invalid_tiles(self)
}
func (self classTileMap) ClearLayer(layer Int) {
	self.ptr.API.TileMap_clear_layer(self, layer)
}
func (self classTileMap) Clear() {
	self.ptr.API.TileMap_clear(self)
}
func (self classTileMap) UpdateInternals() {
	self.ptr.API.TileMap_update_internals(self)
}
func (self classTileMap) NotifyRuntimeTileDataUpdate(layer Int) {
	self.ptr.API.TileMap_notify_runtime_tile_data_update(self, layer)
}
func (self classTileMap) GetSurroundingCells(coords Vector2i) ArrayOf[Vector2i] {
	return self.ptr.API.TileMap_get_surrounding_cells(self, coords)
}
func (self classTileMap) GetUsedCells(layer Int) ArrayOf[Vector2i] {
	return self.ptr.API.TileMap_get_used_cells(self, layer)
}
func (self classTileMap) GetUsedCellsById(layer Int, source_id Int, atlas_coords Vector2i, alternative_tile Int) ArrayOf[Vector2i] {
	return self.ptr.API.TileMap_get_used_cells_by_id(self, layer, source_id, atlas_coords, alternative_tile)
}
func (self classTileMap) GetUsedRect() Rect2i {
	return self.ptr.API.TileMap_get_used_rect(self)
}
func (self classTileMap) MapToLocal(map_position Vector2i) Vector2 {
	return self.ptr.API.TileMap_map_to_local(self, map_position)
}
func (self classTileMap) LocalToMap(local_position Vector2) Vector2i {
	return self.ptr.API.TileMap_local_to_map(self, local_position)
}
func (self classTileMap) GetNeighborCell(coords Vector2i, neighbor TileSetCellNeighbor) Vector2i {
	return self.ptr.API.TileMap_get_neighbor_cell(self, coords, neighbor)
}

type classTileMapPattern struct{ Class[classTileMapPattern] }

func (self classTileMapPattern) Super() Resource {
	var super Resource
	super.ptr = self.ptr
	return super
}

func (self classTileMapPattern) Resource() Resource { return self.Super() }
func (self classTileMapPattern) SetCell(coords Vector2i, source_id Int, atlas_coords Vector2i, alternative_tile Int) {
	self.ptr.API.TileMapPattern_set_cell(self, coords, source_id, atlas_coords, alternative_tile)
}
func (self classTileMapPattern) HasCell(coords Vector2i) bool {
	return self.ptr.API.TileMapPattern_has_cell(self, coords)
}
func (self classTileMapPattern) RemoveCell(coords Vector2i, update_size bool) {
	self.ptr.API.TileMapPattern_remove_cell(self, coords, update_size)
}
func (self classTileMapPattern) GetCellSourceId(coords Vector2i) Int {
	return self.ptr.API.TileMapPattern_get_cell_source_id(self, coords)
}
func (self classTileMapPattern) GetCellAtlasCoords(coords Vector2i) Vector2i {
	return self.ptr.API.TileMapPattern_get_cell_atlas_coords(self, coords)
}
func (self classTileMapPattern) GetCellAlternativeTile(coords Vector2i) Int {
	return self.ptr.API.TileMapPattern_get_cell_alternative_tile(self, coords)
}
func (self classTileMapPattern) GetUsedCells() ArrayOf[Vector2i] {
	return self.ptr.API.TileMapPattern_get_used_cells(self)
}
func (self classTileMapPattern) GetSize() Vector2i {
	return self.ptr.API.TileMapPattern_get_size(self)
}
func (self classTileMapPattern) SetSize(size Vector2i) {
	self.ptr.API.TileMapPattern_set_size(self, size)
}
func (self classTileMapPattern) IsEmpty() bool {
	return self.ptr.API.TileMapPattern_is_empty(self)
}

type classTileSet struct{ Class[classTileSet] }

func (self classTileSet) Super() Resource { var super Resource; super.ptr = self.ptr; return super }

func (self classTileSet) Resource() Resource { return self.Super() }
func (self classTileSet) GetNextSourceId() Int {
	return self.ptr.API.TileSet_get_next_source_id(self)
}
func (self classTileSet) AddSource(source TileSetSource, atlas_source_id_override Int) Int {
	return self.ptr.API.TileSet_add_source(self, source, atlas_source_id_override)
}
func (self classTileSet) RemoveSource(source_id Int) {
	self.ptr.API.TileSet_remove_source(self, source_id)
}
func (self classTileSet) SetSourceId(source_id Int, new_source_id Int) {
	self.ptr.API.TileSet_set_source_id(self, source_id, new_source_id)
}
func (self classTileSet) GetSourceCount() Int {
	return self.ptr.API.TileSet_get_source_count(self)
}
func (self classTileSet) GetSourceId(index Int) Int {
	return self.ptr.API.TileSet_get_source_id(self, index)
}
func (self classTileSet) HasSource(source_id Int) bool {
	return self.ptr.API.TileSet_has_source(self, source_id)
}
func (self classTileSet) GetSource(source_id Int) TileSetSource {
	return self.ptr.API.TileSet_get_source(self, source_id)
}
func (self classTileSet) SetTileShape(shape TileSetTileShape) {
	self.ptr.API.TileSet_set_tile_shape(self, shape)
}
func (self classTileSet) GetTileShape() TileSetTileShape {
	return self.ptr.API.TileSet_get_tile_shape(self)
}
func (self classTileSet) SetTileLayout(layout TileSetTileLayout) {
	self.ptr.API.TileSet_set_tile_layout(self, layout)
}
func (self classTileSet) GetTileLayout() TileSetTileLayout {
	return self.ptr.API.TileSet_get_tile_layout(self)
}
func (self classTileSet) SetTileOffsetAxis(alignment TileSetTileOffsetAxis) {
	self.ptr.API.TileSet_set_tile_offset_axis(self, alignment)
}
func (self classTileSet) GetTileOffsetAxis() TileSetTileOffsetAxis {
	return self.ptr.API.TileSet_get_tile_offset_axis(self)
}
func (self classTileSet) SetTileSize(size Vector2i) {
	self.ptr.API.TileSet_set_tile_size(self, size)
}
func (self classTileSet) GetTileSize() Vector2i {
	return self.ptr.API.TileSet_get_tile_size(self)
}
func (self classTileSet) SetUvClipping(uv_clipping bool) {
	self.ptr.API.TileSet_set_uv_clipping(self, uv_clipping)
}
func (self classTileSet) IsUvClipping() bool {
	return self.ptr.API.TileSet_is_uv_clipping(self)
}
func (self classTileSet) GetOcclusionLayersCount() Int {
	return self.ptr.API.TileSet_get_occlusion_layers_count(self)
}
func (self classTileSet) AddOcclusionLayer(to_position Int) {
	self.ptr.API.TileSet_add_occlusion_layer(self, to_position)
}
func (self classTileSet) MoveOcclusionLayer(layer_index Int, to_position Int) {
	self.ptr.API.TileSet_move_occlusion_layer(self, layer_index, to_position)
}
func (self classTileSet) RemoveOcclusionLayer(layer_index Int) {
	self.ptr.API.TileSet_remove_occlusion_layer(self, layer_index)
}
func (self classTileSet) SetOcclusionLayerLightMask(layer_index Int, light_mask Int) {
	self.ptr.API.TileSet_set_occlusion_layer_light_mask(self, layer_index, light_mask)
}
func (self classTileSet) GetOcclusionLayerLightMask(layer_index Int) Int {
	return self.ptr.API.TileSet_get_occlusion_layer_light_mask(self, layer_index)
}
func (self classTileSet) SetOcclusionLayerSdfCollision(layer_index Int, sdf_collision bool) {
	self.ptr.API.TileSet_set_occlusion_layer_sdf_collision(self, layer_index, sdf_collision)
}
func (self classTileSet) GetOcclusionLayerSdfCollision(layer_index Int) bool {
	return self.ptr.API.TileSet_get_occlusion_layer_sdf_collision(self, layer_index)
}
func (self classTileSet) GetPhysicsLayersCount() Int {
	return self.ptr.API.TileSet_get_physics_layers_count(self)
}
func (self classTileSet) AddPhysicsLayer(to_position Int) {
	self.ptr.API.TileSet_add_physics_layer(self, to_position)
}
func (self classTileSet) MovePhysicsLayer(layer_index Int, to_position Int) {
	self.ptr.API.TileSet_move_physics_layer(self, layer_index, to_position)
}
func (self classTileSet) RemovePhysicsLayer(layer_index Int) {
	self.ptr.API.TileSet_remove_physics_layer(self, layer_index)
}
func (self classTileSet) SetPhysicsLayerCollisionLayer(layer_index Int, layer Int) {
	self.ptr.API.TileSet_set_physics_layer_collision_layer(self, layer_index, layer)
}
func (self classTileSet) GetPhysicsLayerCollisionLayer(layer_index Int) Int {
	return self.ptr.API.TileSet_get_physics_layer_collision_layer(self, layer_index)
}
func (self classTileSet) SetPhysicsLayerCollisionMask(layer_index Int, mask Int) {
	self.ptr.API.TileSet_set_physics_layer_collision_mask(self, layer_index, mask)
}
func (self classTileSet) GetPhysicsLayerCollisionMask(layer_index Int) Int {
	return self.ptr.API.TileSet_get_physics_layer_collision_mask(self, layer_index)
}
func (self classTileSet) SetPhysicsLayerPhysicsMaterial(layer_index Int, physics_material PhysicsMaterial) {
	self.ptr.API.TileSet_set_physics_layer_physics_material(self, layer_index, physics_material)
}
func (self classTileSet) GetPhysicsLayerPhysicsMaterial(layer_index Int) PhysicsMaterial {
	return self.ptr.API.TileSet_get_physics_layer_physics_material(self, layer_index)
}
func (self classTileSet) GetTerrainSetsCount() Int {
	return self.ptr.API.TileSet_get_terrain_sets_count(self)
}
func (self classTileSet) AddTerrainSet(to_position Int) {
	self.ptr.API.TileSet_add_terrain_set(self, to_position)
}
func (self classTileSet) MoveTerrainSet(terrain_set Int, to_position Int) {
	self.ptr.API.TileSet_move_terrain_set(self, terrain_set, to_position)
}
func (self classTileSet) RemoveTerrainSet(terrain_set Int) {
	self.ptr.API.TileSet_remove_terrain_set(self, terrain_set)
}
func (self classTileSet) SetTerrainSetMode(terrain_set Int, mode TileSetTerrainMode) {
	self.ptr.API.TileSet_set_terrain_set_mode(self, terrain_set, mode)
}
func (self classTileSet) GetTerrainSetMode(terrain_set Int) TileSetTerrainMode {
	return self.ptr.API.TileSet_get_terrain_set_mode(self, terrain_set)
}
func (self classTileSet) GetTerrainsCount(terrain_set Int) Int {
	return self.ptr.API.TileSet_get_terrains_count(self, terrain_set)
}
func (self classTileSet) AddTerrain(terrain_set Int, to_position Int) {
	self.ptr.API.TileSet_add_terrain(self, terrain_set, to_position)
}
func (self classTileSet) MoveTerrain(terrain_set Int, terrain_index Int, to_position Int) {
	self.ptr.API.TileSet_move_terrain(self, terrain_set, terrain_index, to_position)
}
func (self classTileSet) RemoveTerrain(terrain_set Int, terrain_index Int) {
	self.ptr.API.TileSet_remove_terrain(self, terrain_set, terrain_index)
}
func (self classTileSet) SetTerrainName(terrain_set Int, terrain_index Int, name String) {
	self.ptr.API.TileSet_set_terrain_name(self, terrain_set, terrain_index, name)
}
func (self classTileSet) GetTerrainName(terrain_set Int, terrain_index Int) String {
	return self.ptr.API.TileSet_get_terrain_name(self, terrain_set, terrain_index)
}
func (self classTileSet) SetTerrainColor(terrain_set Int, terrain_index Int, color Color) {
	self.ptr.API.TileSet_set_terrain_color(self, terrain_set, terrain_index, color)
}
func (self classTileSet) GetTerrainColor(terrain_set Int, terrain_index Int) Color {
	return self.ptr.API.TileSet_get_terrain_color(self, terrain_set, terrain_index)
}
func (self classTileSet) GetNavigationLayersCount() Int {
	return self.ptr.API.TileSet_get_navigation_layers_count(self)
}
func (self classTileSet) AddNavigationLayer(to_position Int) {
	self.ptr.API.TileSet_add_navigation_layer(self, to_position)
}
func (self classTileSet) MoveNavigationLayer(layer_index Int, to_position Int) {
	self.ptr.API.TileSet_move_navigation_layer(self, layer_index, to_position)
}
func (self classTileSet) RemoveNavigationLayer(layer_index Int) {
	self.ptr.API.TileSet_remove_navigation_layer(self, layer_index)
}
func (self classTileSet) SetNavigationLayerLayers(layer_index Int, layers Int) {
	self.ptr.API.TileSet_set_navigation_layer_layers(self, layer_index, layers)
}
func (self classTileSet) GetNavigationLayerLayers(layer_index Int) Int {
	return self.ptr.API.TileSet_get_navigation_layer_layers(self, layer_index)
}
func (self classTileSet) SetNavigationLayerLayerValue(layer_index Int, layer_number Int, value bool) {
	self.ptr.API.TileSet_set_navigation_layer_layer_value(self, layer_index, layer_number, value)
}
func (self classTileSet) GetNavigationLayerLayerValue(layer_index Int, layer_number Int) bool {
	return self.ptr.API.TileSet_get_navigation_layer_layer_value(self, layer_index, layer_number)
}
func (self classTileSet) GetCustomDataLayersCount() Int {
	return self.ptr.API.TileSet_get_custom_data_layers_count(self)
}
func (self classTileSet) AddCustomDataLayer(to_position Int) {
	self.ptr.API.TileSet_add_custom_data_layer(self, to_position)
}
func (self classTileSet) MoveCustomDataLayer(layer_index Int, to_position Int) {
	self.ptr.API.TileSet_move_custom_data_layer(self, layer_index, to_position)
}
func (self classTileSet) RemoveCustomDataLayer(layer_index Int) {
	self.ptr.API.TileSet_remove_custom_data_layer(self, layer_index)
}
func (self classTileSet) GetCustomDataLayerByName(layer_name String) Int {
	return self.ptr.API.TileSet_get_custom_data_layer_by_name(self, layer_name)
}
func (self classTileSet) SetCustomDataLayerName(layer_index Int, layer_name String) {
	self.ptr.API.TileSet_set_custom_data_layer_name(self, layer_index, layer_name)
}
func (self classTileSet) GetCustomDataLayerName(layer_index Int) String {
	return self.ptr.API.TileSet_get_custom_data_layer_name(self, layer_index)
}
func (self classTileSet) SetCustomDataLayerType(layer_index Int, layer_type VariantType) {
	self.ptr.API.TileSet_set_custom_data_layer_type(self, layer_index, layer_type)
}
func (self classTileSet) GetCustomDataLayerType(layer_index Int) VariantType {
	return self.ptr.API.TileSet_get_custom_data_layer_type(self, layer_index)
}
func (self classTileSet) SetSourceLevelTileProxy(source_from Int, source_to Int) {
	self.ptr.API.TileSet_set_source_level_tile_proxy(self, source_from, source_to)
}
func (self classTileSet) GetSourceLevelTileProxy(source_from Int) Int {
	return self.ptr.API.TileSet_get_source_level_tile_proxy(self, source_from)
}
func (self classTileSet) HasSourceLevelTileProxy(source_from Int) bool {
	return self.ptr.API.TileSet_has_source_level_tile_proxy(self, source_from)
}
func (self classTileSet) RemoveSourceLevelTileProxy(source_from Int) {
	self.ptr.API.TileSet_remove_source_level_tile_proxy(self, source_from)
}
func (self classTileSet) SetCoordsLevelTileProxy(p_source_from Int, coords_from Vector2i, source_to Int, coords_to Vector2i) {
	self.ptr.API.TileSet_set_coords_level_tile_proxy(self, p_source_from, coords_from, source_to, coords_to)
}
func (self classTileSet) GetCoordsLevelTileProxy(source_from Int, coords_from Vector2i) Array {
	return self.ptr.API.TileSet_get_coords_level_tile_proxy(self, source_from, coords_from)
}
func (self classTileSet) HasCoordsLevelTileProxy(source_from Int, coords_from Vector2i) bool {
	return self.ptr.API.TileSet_has_coords_level_tile_proxy(self, source_from, coords_from)
}
func (self classTileSet) RemoveCoordsLevelTileProxy(source_from Int, coords_from Vector2i) {
	self.ptr.API.TileSet_remove_coords_level_tile_proxy(self, source_from, coords_from)
}
func (self classTileSet) SetAlternativeLevelTileProxy(source_from Int, coords_from Vector2i, alternative_from Int, source_to Int, coords_to Vector2i, alternative_to Int) {
	self.ptr.API.TileSet_set_alternative_level_tile_proxy(self, source_from, coords_from, alternative_from, source_to, coords_to, alternative_to)
}
func (self classTileSet) GetAlternativeLevelTileProxy(source_from Int, coords_from Vector2i, alternative_from Int) Array {
	return self.ptr.API.TileSet_get_alternative_level_tile_proxy(self, source_from, coords_from, alternative_from)
}
func (self classTileSet) HasAlternativeLevelTileProxy(source_from Int, coords_from Vector2i, alternative_from Int) bool {
	return self.ptr.API.TileSet_has_alternative_level_tile_proxy(self, source_from, coords_from, alternative_from)
}
func (self classTileSet) RemoveAlternativeLevelTileProxy(source_from Int, coords_from Vector2i, alternative_from Int) {
	self.ptr.API.TileSet_remove_alternative_level_tile_proxy(self, source_from, coords_from, alternative_from)
}
func (self classTileSet) MapTileProxy(source_from Int, coords_from Vector2i, alternative_from Int) Array {
	return self.ptr.API.TileSet_map_tile_proxy(self, source_from, coords_from, alternative_from)
}
func (self classTileSet) CleanupInvalidTileProxies() {
	self.ptr.API.TileSet_cleanup_invalid_tile_proxies(self)
}
func (self classTileSet) ClearTileProxies() {
	self.ptr.API.TileSet_clear_tile_proxies(self)
}
func (self classTileSet) AddPattern(pattern TileMapPattern, index Int) Int {
	return self.ptr.API.TileSet_add_pattern(self, pattern, index)
}
func (self classTileSet) GetPattern(index Int) TileMapPattern {
	return self.ptr.API.TileSet_get_pattern(self, index)
}
func (self classTileSet) RemovePattern(index Int) {
	self.ptr.API.TileSet_remove_pattern(self, index)
}
func (self classTileSet) GetPatternsCount() Int {
	return self.ptr.API.TileSet_get_patterns_count(self)
}

type classTileSetAtlasSource struct{ Class[classTileSetAtlasSource] }

func (self classTileSetAtlasSource) Super() TileSetSource {
	var super TileSetSource
	super.ptr = self.ptr
	return super
}

func (self classTileSetAtlasSource) TileSetSource() TileSetSource { return self.Super() }
func (self classTileSetAtlasSource) SetTexture(texture Texture2D) {
	self.ptr.API.TileSetAtlasSource_set_texture(self, texture)
}
func (self classTileSetAtlasSource) GetTexture() Texture2D {
	return self.ptr.API.TileSetAtlasSource_get_texture(self)
}
func (self classTileSetAtlasSource) SetMargins(margins Vector2i) {
	self.ptr.API.TileSetAtlasSource_set_margins(self, margins)
}
func (self classTileSetAtlasSource) GetMargins() Vector2i {
	return self.ptr.API.TileSetAtlasSource_get_margins(self)
}
func (self classTileSetAtlasSource) SetSeparation(separation Vector2i) {
	self.ptr.API.TileSetAtlasSource_set_separation(self, separation)
}
func (self classTileSetAtlasSource) GetSeparation() Vector2i {
	return self.ptr.API.TileSetAtlasSource_get_separation(self)
}
func (self classTileSetAtlasSource) SetTextureRegionSize(texture_region_size Vector2i) {
	self.ptr.API.TileSetAtlasSource_set_texture_region_size(self, texture_region_size)
}
func (self classTileSetAtlasSource) GetTextureRegionSize() Vector2i {
	return self.ptr.API.TileSetAtlasSource_get_texture_region_size(self)
}
func (self classTileSetAtlasSource) SetUseTexturePadding(use_texture_padding bool) {
	self.ptr.API.TileSetAtlasSource_set_use_texture_padding(self, use_texture_padding)
}
func (self classTileSetAtlasSource) GetUseTexturePadding() bool {
	return self.ptr.API.TileSetAtlasSource_get_use_texture_padding(self)
}
func (self classTileSetAtlasSource) CreateTile(atlas_coords Vector2i, size Vector2i) {
	self.ptr.API.TileSetAtlasSource_create_tile(self, atlas_coords, size)
}
func (self classTileSetAtlasSource) RemoveTile(atlas_coords Vector2i) {
	self.ptr.API.TileSetAtlasSource_remove_tile(self, atlas_coords)
}
func (self classTileSetAtlasSource) MoveTileInAtlas(atlas_coords Vector2i, new_atlas_coords Vector2i, new_size Vector2i) {
	self.ptr.API.TileSetAtlasSource_move_tile_in_atlas(self, atlas_coords, new_atlas_coords, new_size)
}
func (self classTileSetAtlasSource) GetTileSizeInAtlas(atlas_coords Vector2i) Vector2i {
	return self.ptr.API.TileSetAtlasSource_get_tile_size_in_atlas(self, atlas_coords)
}
func (self classTileSetAtlasSource) HasRoomForTile(atlas_coords Vector2i, size Vector2i, animation_columns Int, animation_separation Vector2i, frames_count Int, ignored_tile Vector2i) bool {
	return self.ptr.API.TileSetAtlasSource_has_room_for_tile(self, atlas_coords, size, animation_columns, animation_separation, frames_count, ignored_tile)
}
func (self classTileSetAtlasSource) GetTilesToBeRemovedOnChange(texture Texture2D, margins Vector2i, separation Vector2i, texture_region_size Vector2i) PackedVector2Array {
	return self.ptr.API.TileSetAtlasSource_get_tiles_to_be_removed_on_change(self, texture, margins, separation, texture_region_size)
}
func (self classTileSetAtlasSource) GetTileAtCoords(atlas_coords Vector2i) Vector2i {
	return self.ptr.API.TileSetAtlasSource_get_tile_at_coords(self, atlas_coords)
}
func (self classTileSetAtlasSource) HasTilesOutsideTexture() bool {
	return self.ptr.API.TileSetAtlasSource_has_tiles_outside_texture(self)
}
func (self classTileSetAtlasSource) ClearTilesOutsideTexture() {
	self.ptr.API.TileSetAtlasSource_clear_tiles_outside_texture(self)
}
func (self classTileSetAtlasSource) SetTileAnimationColumns(atlas_coords Vector2i, frame_columns Int) {
	self.ptr.API.TileSetAtlasSource_set_tile_animation_columns(self, atlas_coords, frame_columns)
}
func (self classTileSetAtlasSource) GetTileAnimationColumns(atlas_coords Vector2i) Int {
	return self.ptr.API.TileSetAtlasSource_get_tile_animation_columns(self, atlas_coords)
}
func (self classTileSetAtlasSource) SetTileAnimationSeparation(atlas_coords Vector2i, separation Vector2i) {
	self.ptr.API.TileSetAtlasSource_set_tile_animation_separation(self, atlas_coords, separation)
}
func (self classTileSetAtlasSource) GetTileAnimationSeparation(atlas_coords Vector2i) Vector2i {
	return self.ptr.API.TileSetAtlasSource_get_tile_animation_separation(self, atlas_coords)
}
func (self classTileSetAtlasSource) SetTileAnimationSpeed(atlas_coords Vector2i, speed Float) {
	self.ptr.API.TileSetAtlasSource_set_tile_animation_speed(self, atlas_coords, speed)
}
func (self classTileSetAtlasSource) GetTileAnimationSpeed(atlas_coords Vector2i) Float {
	return self.ptr.API.TileSetAtlasSource_get_tile_animation_speed(self, atlas_coords)
}
func (self classTileSetAtlasSource) SetTileAnimationMode(atlas_coords Vector2i, mode TileSetAtlasSourceTileAnimationMode) {
	self.ptr.API.TileSetAtlasSource_set_tile_animation_mode(self, atlas_coords, mode)
}
func (self classTileSetAtlasSource) GetTileAnimationMode(atlas_coords Vector2i) TileSetAtlasSourceTileAnimationMode {
	return self.ptr.API.TileSetAtlasSource_get_tile_animation_mode(self, atlas_coords)
}
func (self classTileSetAtlasSource) SetTileAnimationFramesCount(atlas_coords Vector2i, frames_count Int) {
	self.ptr.API.TileSetAtlasSource_set_tile_animation_frames_count(self, atlas_coords, frames_count)
}
func (self classTileSetAtlasSource) GetTileAnimationFramesCount(atlas_coords Vector2i) Int {
	return self.ptr.API.TileSetAtlasSource_get_tile_animation_frames_count(self, atlas_coords)
}
func (self classTileSetAtlasSource) SetTileAnimationFrameDuration(atlas_coords Vector2i, frame_index Int, duration Float) {
	self.ptr.API.TileSetAtlasSource_set_tile_animation_frame_duration(self, atlas_coords, frame_index, duration)
}
func (self classTileSetAtlasSource) GetTileAnimationFrameDuration(atlas_coords Vector2i, frame_index Int) Float {
	return self.ptr.API.TileSetAtlasSource_get_tile_animation_frame_duration(self, atlas_coords, frame_index)
}
func (self classTileSetAtlasSource) GetTileAnimationTotalDuration(atlas_coords Vector2i) Float {
	return self.ptr.API.TileSetAtlasSource_get_tile_animation_total_duration(self, atlas_coords)
}
func (self classTileSetAtlasSource) CreateAlternativeTile(atlas_coords Vector2i, alternative_id_override Int) Int {
	return self.ptr.API.TileSetAtlasSource_create_alternative_tile(self, atlas_coords, alternative_id_override)
}
func (self classTileSetAtlasSource) RemoveAlternativeTile(atlas_coords Vector2i, alternative_tile Int) {
	self.ptr.API.TileSetAtlasSource_remove_alternative_tile(self, atlas_coords, alternative_tile)
}
func (self classTileSetAtlasSource) SetAlternativeTileId(atlas_coords Vector2i, alternative_tile Int, new_id Int) {
	self.ptr.API.TileSetAtlasSource_set_alternative_tile_id(self, atlas_coords, alternative_tile, new_id)
}
func (self classTileSetAtlasSource) GetNextAlternativeTileId(atlas_coords Vector2i) Int {
	return self.ptr.API.TileSetAtlasSource_get_next_alternative_tile_id(self, atlas_coords)
}
func (self classTileSetAtlasSource) GetTileData(atlas_coords Vector2i, alternative_tile Int) TileData {
	return self.ptr.API.TileSetAtlasSource_get_tile_data(self, atlas_coords, alternative_tile)
}
func (self classTileSetAtlasSource) GetAtlasGridSize() Vector2i {
	return self.ptr.API.TileSetAtlasSource_get_atlas_grid_size(self)
}
func (self classTileSetAtlasSource) GetTileTextureRegion(atlas_coords Vector2i, frame Int) Rect2i {
	return self.ptr.API.TileSetAtlasSource_get_tile_texture_region(self, atlas_coords, frame)
}
func (self classTileSetAtlasSource) GetRuntimeTexture() Texture2D {
	return self.ptr.API.TileSetAtlasSource_get_runtime_texture(self)
}
func (self classTileSetAtlasSource) GetRuntimeTileTextureRegion(atlas_coords Vector2i, frame Int) Rect2i {
	return self.ptr.API.TileSetAtlasSource_get_runtime_tile_texture_region(self, atlas_coords, frame)
}

type classTileSetScenesCollectionSource struct {
	Class[classTileSetScenesCollectionSource]
}

func (self classTileSetScenesCollectionSource) Super() TileSetSource {
	var super TileSetSource
	super.ptr = self.ptr
	return super
}

func (self classTileSetScenesCollectionSource) TileSetSource() TileSetSource { return self.Super() }
func (self classTileSetScenesCollectionSource) GetSceneTilesCount() Int {
	return self.ptr.API.TileSetScenesCollectionSource_get_scene_tiles_count(self)
}
func (self classTileSetScenesCollectionSource) GetSceneTileId(index Int) Int {
	return self.ptr.API.TileSetScenesCollectionSource_get_scene_tile_id(self, index)
}
func (self classTileSetScenesCollectionSource) HasSceneTileId(id Int) bool {
	return self.ptr.API.TileSetScenesCollectionSource_has_scene_tile_id(self, id)
}
func (self classTileSetScenesCollectionSource) CreateSceneTile(packed_scene PackedScene, id_override Int) Int {
	return self.ptr.API.TileSetScenesCollectionSource_create_scene_tile(self, packed_scene, id_override)
}
func (self classTileSetScenesCollectionSource) SetSceneTileId(id Int, new_id Int) {
	self.ptr.API.TileSetScenesCollectionSource_set_scene_tile_id(self, id, new_id)
}
func (self classTileSetScenesCollectionSource) SetSceneTileScene(id Int, packed_scene PackedScene) {
	self.ptr.API.TileSetScenesCollectionSource_set_scene_tile_scene(self, id, packed_scene)
}
func (self classTileSetScenesCollectionSource) GetSceneTileScene(id Int) PackedScene {
	return self.ptr.API.TileSetScenesCollectionSource_get_scene_tile_scene(self, id)
}
func (self classTileSetScenesCollectionSource) SetSceneTileDisplayPlaceholder(id Int, display_placeholder bool) {
	self.ptr.API.TileSetScenesCollectionSource_set_scene_tile_display_placeholder(self, id, display_placeholder)
}
func (self classTileSetScenesCollectionSource) GetSceneTileDisplayPlaceholder(id Int) bool {
	return self.ptr.API.TileSetScenesCollectionSource_get_scene_tile_display_placeholder(self, id)
}
func (self classTileSetScenesCollectionSource) RemoveSceneTile(id Int) {
	self.ptr.API.TileSetScenesCollectionSource_remove_scene_tile(self, id)
}
func (self classTileSetScenesCollectionSource) GetNextSceneTileId() Int {
	return self.ptr.API.TileSetScenesCollectionSource_get_next_scene_tile_id(self)
}

type classTileSetSource struct{ Class[classTileSetSource] }

func (self classTileSetSource) Super() Resource {
	var super Resource
	super.ptr = self.ptr
	return super
}

func (self classTileSetSource) Resource() Resource { return self.Super() }
func (self classTileSetSource) GetTilesCount() Int {
	return self.ptr.API.TileSetSource_get_tiles_count(self)
}
func (self classTileSetSource) GetTileId(index Int) Vector2i {
	return self.ptr.API.TileSetSource_get_tile_id(self, index)
}
func (self classTileSetSource) HasTile(atlas_coords Vector2i) bool {
	return self.ptr.API.TileSetSource_has_tile(self, atlas_coords)
}
func (self classTileSetSource) GetAlternativeTilesCount(atlas_coords Vector2i) Int {
	return self.ptr.API.TileSetSource_get_alternative_tiles_count(self, atlas_coords)
}
func (self classTileSetSource) GetAlternativeTileId(atlas_coords Vector2i, index Int) Int {
	return self.ptr.API.TileSetSource_get_alternative_tile_id(self, atlas_coords, index)
}
func (self classTileSetSource) HasAlternativeTile(atlas_coords Vector2i, alternative_tile Int) bool {
	return self.ptr.API.TileSetSource_has_alternative_tile(self, atlas_coords, alternative_tile)
}

type classTime struct{ Class[classTime] }

func (self classTime) Super() Object { var super Object; super.ptr = self.ptr; return super }

func (self classTime) Object() Object { return self.Super() }

func (self classTime) isSingleton() {}
func (self classTime) GetDatetimeDictFromUnixTime(unix_time_val Int) Dictionary {
	return self.ptr.API.Time_get_datetime_dict_from_unix_time(self, unix_time_val)
}
func (self classTime) GetDateDictFromUnixTime(unix_time_val Int) Dictionary {
	return self.ptr.API.Time_get_date_dict_from_unix_time(self, unix_time_val)
}
func (self classTime) GetTimeDictFromUnixTime(unix_time_val Int) Dictionary {
	return self.ptr.API.Time_get_time_dict_from_unix_time(self, unix_time_val)
}
func (self classTime) GetDatetimeStringFromUnixTime(unix_time_val Int, use_space bool) String {
	return self.ptr.API.Time_get_datetime_string_from_unix_time(self, unix_time_val, use_space)
}
func (self classTime) GetDateStringFromUnixTime(unix_time_val Int) String {
	return self.ptr.API.Time_get_date_string_from_unix_time(self, unix_time_val)
}
func (self classTime) GetTimeStringFromUnixTime(unix_time_val Int) String {
	return self.ptr.API.Time_get_time_string_from_unix_time(self, unix_time_val)
}
func (self classTime) GetDatetimeDictFromDatetimeString(datetime String, weekday bool) Dictionary {
	return self.ptr.API.Time_get_datetime_dict_from_datetime_string(self, datetime, weekday)
}
func (self classTime) GetDatetimeStringFromDatetimeDict(datetime Dictionary, use_space bool) String {
	return self.ptr.API.Time_get_datetime_string_from_datetime_dict(self, datetime, use_space)
}
func (self classTime) GetUnixTimeFromDatetimeDict(datetime Dictionary) Int {
	return self.ptr.API.Time_get_unix_time_from_datetime_dict(self, datetime)
}
func (self classTime) GetUnixTimeFromDatetimeString(datetime String) Int {
	return self.ptr.API.Time_get_unix_time_from_datetime_string(self, datetime)
}
func (self classTime) GetOffsetStringFromOffsetMinutes(offset_minutes Int) String {
	return self.ptr.API.Time_get_offset_string_from_offset_minutes(self, offset_minutes)
}
func (self classTime) GetDatetimeDictFromSystem(utc bool) Dictionary {
	return self.ptr.API.Time_get_datetime_dict_from_system(self, utc)
}
func (self classTime) GetDateDictFromSystem(utc bool) Dictionary {
	return self.ptr.API.Time_get_date_dict_from_system(self, utc)
}
func (self classTime) GetTimeDictFromSystem(utc bool) Dictionary {
	return self.ptr.API.Time_get_time_dict_from_system(self, utc)
}
func (self classTime) GetDatetimeStringFromSystem(utc bool, use_space bool) String {
	return self.ptr.API.Time_get_datetime_string_from_system(self, utc, use_space)
}
func (self classTime) GetDateStringFromSystem(utc bool) String {
	return self.ptr.API.Time_get_date_string_from_system(self, utc)
}
func (self classTime) GetTimeStringFromSystem(utc bool) String {
	return self.ptr.API.Time_get_time_string_from_system(self, utc)
}
func (self classTime) GetTimeZoneFromSystem() Dictionary {
	return self.ptr.API.Time_get_time_zone_from_system(self)
}
func (self classTime) GetUnixTimeFromSystem() Float {
	return self.ptr.API.Time_get_unix_time_from_system(self)
}
func (self classTime) GetTicksMsec() Int {
	return self.ptr.API.Time_get_ticks_msec(self)
}
func (self classTime) GetTicksUsec() Int {
	return self.ptr.API.Time_get_ticks_usec(self)
}

type classTimer struct{ Class[classTimer] }

func (self classTimer) Super() Node { var super Node; super.ptr = self.ptr; return super }

func (self classTimer) Node() Node { return self.Super() }
func (self classTimer) SetWaitTime(time_sec Float) {
	self.ptr.API.Timer_set_wait_time(self, time_sec)
}
func (self classTimer) GetWaitTime() Float {
	return self.ptr.API.Timer_get_wait_time(self)
}
func (self classTimer) SetOneShot(enable bool) {
	self.ptr.API.Timer_set_one_shot(self, enable)
}
func (self classTimer) IsOneShot() bool {
	return self.ptr.API.Timer_is_one_shot(self)
}
func (self classTimer) SetAutostart(enable bool) {
	self.ptr.API.Timer_set_autostart(self, enable)
}
func (self classTimer) HasAutostart() bool {
	return self.ptr.API.Timer_has_autostart(self)
}
func (self classTimer) Start(time_sec Float) {
	self.ptr.API.Timer_start(self, time_sec)
}
func (self classTimer) Stop() {
	self.ptr.API.Timer_stop(self)
}
func (self classTimer) SetPaused(paused bool) {
	self.ptr.API.Timer_set_paused(self, paused)
}
func (self classTimer) IsPaused() bool {
	return self.ptr.API.Timer_is_paused(self)
}
func (self classTimer) IsStopped() bool {
	return self.ptr.API.Timer_is_stopped(self)
}
func (self classTimer) GetTimeLeft() Float {
	return self.ptr.API.Timer_get_time_left(self)
}
func (self classTimer) SetTimerProcessCallback(callback TimerTimerProcessCallback) {
	self.ptr.API.Timer_set_timer_process_callback(self, callback)
}
func (self classTimer) GetTimerProcessCallback() TimerTimerProcessCallback {
	return self.ptr.API.Timer_get_timer_process_callback(self)
}

type classTorusMesh struct{ Class[classTorusMesh] }

func (self classTorusMesh) Super() PrimitiveMesh {
	var super PrimitiveMesh
	super.ptr = self.ptr
	return super
}

func (self classTorusMesh) PrimitiveMesh() PrimitiveMesh { return self.Super() }
func (self classTorusMesh) SetInnerRadius(radius Float) {
	self.ptr.API.TorusMesh_set_inner_radius(self, radius)
}
func (self classTorusMesh) GetInnerRadius() Float {
	return self.ptr.API.TorusMesh_get_inner_radius(self)
}
func (self classTorusMesh) SetOuterRadius(radius Float) {
	self.ptr.API.TorusMesh_set_outer_radius(self, radius)
}
func (self classTorusMesh) GetOuterRadius() Float {
	return self.ptr.API.TorusMesh_get_outer_radius(self)
}
func (self classTorusMesh) SetRings(rings Int) {
	self.ptr.API.TorusMesh_set_rings(self, rings)
}
func (self classTorusMesh) GetRings() Int {
	return self.ptr.API.TorusMesh_get_rings(self)
}
func (self classTorusMesh) SetRingSegments(rings Int) {
	self.ptr.API.TorusMesh_set_ring_segments(self, rings)
}
func (self classTorusMesh) GetRingSegments() Int {
	return self.ptr.API.TorusMesh_get_ring_segments(self)
}

type classTouchScreenButton struct{ Class[classTouchScreenButton] }

func (self classTouchScreenButton) Super() Node2D {
	var super Node2D
	super.ptr = self.ptr
	return super
}

func (self classTouchScreenButton) Node2D() Node2D { return self.Super() }
func (self classTouchScreenButton) SetTextureNormal(texture Texture2D) {
	self.ptr.API.TouchScreenButton_set_texture_normal(self, texture)
}
func (self classTouchScreenButton) GetTextureNormal() Texture2D {
	return self.ptr.API.TouchScreenButton_get_texture_normal(self)
}
func (self classTouchScreenButton) SetTexturePressed(texture Texture2D) {
	self.ptr.API.TouchScreenButton_set_texture_pressed(self, texture)
}
func (self classTouchScreenButton) GetTexturePressed() Texture2D {
	return self.ptr.API.TouchScreenButton_get_texture_pressed(self)
}
func (self classTouchScreenButton) SetBitmask(bitmask BitMap) {
	self.ptr.API.TouchScreenButton_set_bitmask(self, bitmask)
}
func (self classTouchScreenButton) GetBitmask() BitMap {
	return self.ptr.API.TouchScreenButton_get_bitmask(self)
}
func (self classTouchScreenButton) SetShape(shape Shape2D) {
	self.ptr.API.TouchScreenButton_set_shape(self, shape)
}
func (self classTouchScreenButton) GetShape() Shape2D {
	return self.ptr.API.TouchScreenButton_get_shape(self)
}
func (self classTouchScreenButton) SetShapeCentered(bool bool) {
	self.ptr.API.TouchScreenButton_set_shape_centered(self, bool)
}
func (self classTouchScreenButton) IsShapeCentered() bool {
	return self.ptr.API.TouchScreenButton_is_shape_centered(self)
}
func (self classTouchScreenButton) SetShapeVisible(bool bool) {
	self.ptr.API.TouchScreenButton_set_shape_visible(self, bool)
}
func (self classTouchScreenButton) IsShapeVisible() bool {
	return self.ptr.API.TouchScreenButton_is_shape_visible(self)
}
func (self classTouchScreenButton) SetAction(action String) {
	self.ptr.API.TouchScreenButton_set_action(self, action)
}
func (self classTouchScreenButton) GetAction() String {
	return self.ptr.API.TouchScreenButton_get_action(self)
}
func (self classTouchScreenButton) SetVisibilityMode(mode TouchScreenButtonVisibilityMode) {
	self.ptr.API.TouchScreenButton_set_visibility_mode(self, mode)
}
func (self classTouchScreenButton) GetVisibilityMode() TouchScreenButtonVisibilityMode {
	return self.ptr.API.TouchScreenButton_get_visibility_mode(self)
}
func (self classTouchScreenButton) SetPassbyPress(enabled bool) {
	self.ptr.API.TouchScreenButton_set_passby_press(self, enabled)
}
func (self classTouchScreenButton) IsPassbyPressEnabled() bool {
	return self.ptr.API.TouchScreenButton_is_passby_press_enabled(self)
}
func (self classTouchScreenButton) IsPressed() bool {
	return self.ptr.API.TouchScreenButton_is_pressed(self)
}

type classTranslation struct{ Class[classTranslation] }

func (self classTranslation) Super() Resource { var super Resource; super.ptr = self.ptr; return super }

func (self classTranslation) Resource() Resource { return self.Super() }
func (self classTranslation) SetLocale(locale String) {
	self.ptr.API.Translation_set_locale(self, locale)
}
func (self classTranslation) GetLocale() String {
	return self.ptr.API.Translation_get_locale(self)
}
func (self classTranslation) AddMessage(src_message StringName, xlated_message StringName, context StringName) {
	self.ptr.API.Translation_add_message(self, src_message, xlated_message, context)
}
func (self classTranslation) AddPluralMessage(src_message StringName, xlated_messages PackedStringArray, context StringName) {
	self.ptr.API.Translation_add_plural_message(self, src_message, xlated_messages, context)
}
func (self classTranslation) GetMessage(src_message StringName, context StringName) StringName {
	return self.ptr.API.Translation_get_message(self, src_message, context)
}
func (self classTranslation) GetPluralMessage(src_message StringName, src_plural_message StringName, n Int, context StringName) StringName {
	return self.ptr.API.Translation_get_plural_message(self, src_message, src_plural_message, n, context)
}
func (self classTranslation) EraseMessage(src_message StringName, context StringName) {
	self.ptr.API.Translation_erase_message(self, src_message, context)
}
func (self classTranslation) GetMessageList() PackedStringArray {
	return self.ptr.API.Translation_get_message_list(self)
}
func (self classTranslation) GetTranslatedMessageList() PackedStringArray {
	return self.ptr.API.Translation_get_translated_message_list(self)
}
func (self classTranslation) GetMessageCount() Int {
	return self.ptr.API.Translation_get_message_count(self)
}

type classTranslationServer struct{ Class[classTranslationServer] }

func (self classTranslationServer) Super() Object {
	var super Object
	super.ptr = self.ptr
	return super
}

func (self classTranslationServer) Object() Object { return self.Super() }

func (self classTranslationServer) isSingleton() {}
func (self classTranslationServer) SetLocale(locale String) {
	self.ptr.API.TranslationServer_set_locale(self, locale)
}
func (self classTranslationServer) GetLocale() String {
	return self.ptr.API.TranslationServer_get_locale(self)
}
func (self classTranslationServer) GetToolLocale() String {
	return self.ptr.API.TranslationServer_get_tool_locale(self)
}
func (self classTranslationServer) CompareLocales(locale_a String, locale_b String) Int {
	return self.ptr.API.TranslationServer_compare_locales(self, locale_a, locale_b)
}
func (self classTranslationServer) StandardizeLocale(locale String) String {
	return self.ptr.API.TranslationServer_standardize_locale(self, locale)
}
func (self classTranslationServer) GetAllLanguages() PackedStringArray {
	return self.ptr.API.TranslationServer_get_all_languages(self)
}
func (self classTranslationServer) GetLanguageName(language String) String {
	return self.ptr.API.TranslationServer_get_language_name(self, language)
}
func (self classTranslationServer) GetAllScripts() PackedStringArray {
	return self.ptr.API.TranslationServer_get_all_scripts(self)
}
func (self classTranslationServer) GetScriptName(script String) String {
	return self.ptr.API.TranslationServer_get_script_name(self, script)
}
func (self classTranslationServer) GetAllCountries() PackedStringArray {
	return self.ptr.API.TranslationServer_get_all_countries(self)
}
func (self classTranslationServer) GetCountryName(country String) String {
	return self.ptr.API.TranslationServer_get_country_name(self, country)
}
func (self classTranslationServer) GetLocaleName(locale String) String {
	return self.ptr.API.TranslationServer_get_locale_name(self, locale)
}
func (self classTranslationServer) Translate(message StringName, context StringName) StringName {
	return self.ptr.API.TranslationServer_translate(self, message, context)
}
func (self classTranslationServer) TranslatePlural(message StringName, plural_message StringName, n Int, context StringName) StringName {
	return self.ptr.API.TranslationServer_translate_plural(self, message, plural_message, n, context)
}
func (self classTranslationServer) AddTranslation(translation Translation) {
	self.ptr.API.TranslationServer_add_translation(self, translation)
}
func (self classTranslationServer) RemoveTranslation(translation Translation) {
	self.ptr.API.TranslationServer_remove_translation(self, translation)
}
func (self classTranslationServer) GetTranslationObject(locale String) Translation {
	return self.ptr.API.TranslationServer_get_translation_object(self, locale)
}
func (self classTranslationServer) Clear() {
	self.ptr.API.TranslationServer_clear(self)
}
func (self classTranslationServer) GetLoadedLocales() PackedStringArray {
	return self.ptr.API.TranslationServer_get_loaded_locales(self)
}
func (self classTranslationServer) IsPseudolocalizationEnabled() bool {
	return self.ptr.API.TranslationServer_is_pseudolocalization_enabled(self)
}
func (self classTranslationServer) SetPseudolocalizationEnabled(enabled bool) {
	self.ptr.API.TranslationServer_set_pseudolocalization_enabled(self, enabled)
}
func (self classTranslationServer) ReloadPseudolocalization() {
	self.ptr.API.TranslationServer_reload_pseudolocalization(self)
}
func (self classTranslationServer) Pseudolocalize(message StringName) StringName {
	return self.ptr.API.TranslationServer_pseudolocalize(self, message)
}

type classTree struct{ Class[classTree] }

func (self classTree) Super() Control { var super Control; super.ptr = self.ptr; return super }

func (self classTree) Control() Control { return self.Super() }
func (self classTree) Clear() {
	self.ptr.API.Tree_clear(self)
}
func (self classTree) CreateItem(parent TreeItem, index Int) TreeItem {
	return self.ptr.API.Tree_create_item(self, parent, index)
}
func (self classTree) GetRoot() TreeItem {
	return self.ptr.API.Tree_get_root(self)
}
func (self classTree) SetColumnCustomMinimumWidth(column Int, min_width Int) {
	self.ptr.API.Tree_set_column_custom_minimum_width(self, column, min_width)
}
func (self classTree) SetColumnExpand(column Int, expand bool) {
	self.ptr.API.Tree_set_column_expand(self, column, expand)
}
func (self classTree) SetColumnExpandRatio(column Int, ratio Int) {
	self.ptr.API.Tree_set_column_expand_ratio(self, column, ratio)
}
func (self classTree) SetColumnClipContent(column Int, enable bool) {
	self.ptr.API.Tree_set_column_clip_content(self, column, enable)
}
func (self classTree) IsColumnExpanding(column Int) bool {
	return self.ptr.API.Tree_is_column_expanding(self, column)
}
func (self classTree) IsColumnClippingContent(column Int) bool {
	return self.ptr.API.Tree_is_column_clipping_content(self, column)
}
func (self classTree) GetColumnExpandRatio(column Int) Int {
	return self.ptr.API.Tree_get_column_expand_ratio(self, column)
}
func (self classTree) GetColumnWidth(column Int) Int {
	return self.ptr.API.Tree_get_column_width(self, column)
}
func (self classTree) SetHideRoot(enable bool) {
	self.ptr.API.Tree_set_hide_root(self, enable)
}
func (self classTree) IsRootHidden() bool {
	return self.ptr.API.Tree_is_root_hidden(self)
}
func (self classTree) GetNextSelected(from TreeItem) TreeItem {
	return self.ptr.API.Tree_get_next_selected(self, from)
}
func (self classTree) GetSelected() TreeItem {
	return self.ptr.API.Tree_get_selected(self)
}
func (self classTree) SetSelected(item TreeItem, column Int) {
	self.ptr.API.Tree_set_selected(self, item, column)
}
func (self classTree) GetSelectedColumn() Int {
	return self.ptr.API.Tree_get_selected_column(self)
}
func (self classTree) GetPressedButton() Int {
	return self.ptr.API.Tree_get_pressed_button(self)
}
func (self classTree) SetSelectMode(mode TreeSelectMode) {
	self.ptr.API.Tree_set_select_mode(self, mode)
}
func (self classTree) GetSelectMode() TreeSelectMode {
	return self.ptr.API.Tree_get_select_mode(self)
}
func (self classTree) DeselectAll() {
	self.ptr.API.Tree_deselect_all(self)
}
func (self classTree) SetColumns(amount Int) {
	self.ptr.API.Tree_set_columns(self, amount)
}
func (self classTree) GetColumns() Int {
	return self.ptr.API.Tree_get_columns(self)
}
func (self classTree) GetEdited() TreeItem {
	return self.ptr.API.Tree_get_edited(self)
}
func (self classTree) GetEditedColumn() Int {
	return self.ptr.API.Tree_get_edited_column(self)
}
func (self classTree) EditSelected(force_edit bool) bool {
	return self.ptr.API.Tree_edit_selected(self, force_edit)
}
func (self classTree) GetCustomPopupRect() Rect2 {
	return self.ptr.API.Tree_get_custom_popup_rect(self)
}
func (self classTree) GetItemAreaRect(item TreeItem, column Int, button_index Int) Rect2 {
	return self.ptr.API.Tree_get_item_area_rect(self, item, column, button_index)
}
func (self classTree) GetItemAtPosition(position Vector2) TreeItem {
	return self.ptr.API.Tree_get_item_at_position(self, position)
}
func (self classTree) GetColumnAtPosition(position Vector2) Int {
	return self.ptr.API.Tree_get_column_at_position(self, position)
}
func (self classTree) GetDropSectionAtPosition(position Vector2) Int {
	return self.ptr.API.Tree_get_drop_section_at_position(self, position)
}
func (self classTree) GetButtonIdAtPosition(position Vector2) Int {
	return self.ptr.API.Tree_get_button_id_at_position(self, position)
}
func (self classTree) EnsureCursorIsVisible() {
	self.ptr.API.Tree_ensure_cursor_is_visible(self)
}
func (self classTree) SetColumnTitlesVisible(visible bool) {
	self.ptr.API.Tree_set_column_titles_visible(self, visible)
}
func (self classTree) AreColumnTitlesVisible() bool {
	return self.ptr.API.Tree_are_column_titles_visible(self)
}
func (self classTree) SetColumnTitle(column Int, title String) {
	self.ptr.API.Tree_set_column_title(self, column, title)
}
func (self classTree) GetColumnTitle(column Int) String {
	return self.ptr.API.Tree_get_column_title(self, column)
}
func (self classTree) SetColumnTitleAlignment(column Int, title_alignment HorizontalAlignment) {
	self.ptr.API.Tree_set_column_title_alignment(self, column, title_alignment)
}
func (self classTree) GetColumnTitleAlignment(column Int) HorizontalAlignment {
	return self.ptr.API.Tree_get_column_title_alignment(self, column)
}
func (self classTree) SetColumnTitleDirection(column Int, direction ControlTextDirection) {
	self.ptr.API.Tree_set_column_title_direction(self, column, direction)
}
func (self classTree) GetColumnTitleDirection(column Int) ControlTextDirection {
	return self.ptr.API.Tree_get_column_title_direction(self, column)
}
func (self classTree) SetColumnTitleLanguage(column Int, language String) {
	self.ptr.API.Tree_set_column_title_language(self, column, language)
}
func (self classTree) GetColumnTitleLanguage(column Int) String {
	return self.ptr.API.Tree_get_column_title_language(self, column)
}
func (self classTree) GetScroll() Vector2 {
	return self.ptr.API.Tree_get_scroll(self)
}
func (self classTree) ScrollToItem(item TreeItem, center_on_item bool) {
	self.ptr.API.Tree_scroll_to_item(self, item, center_on_item)
}
func (self classTree) SetHScrollEnabled(h_scroll bool) {
	self.ptr.API.Tree_set_h_scroll_enabled(self, h_scroll)
}
func (self classTree) IsHScrollEnabled() bool {
	return self.ptr.API.Tree_is_h_scroll_enabled(self)
}
func (self classTree) SetVScrollEnabled(h_scroll bool) {
	self.ptr.API.Tree_set_v_scroll_enabled(self, h_scroll)
}
func (self classTree) IsVScrollEnabled() bool {
	return self.ptr.API.Tree_is_v_scroll_enabled(self)
}
func (self classTree) SetHideFolding(hide bool) {
	self.ptr.API.Tree_set_hide_folding(self, hide)
}
func (self classTree) IsFoldingHidden() bool {
	return self.ptr.API.Tree_is_folding_hidden(self)
}
func (self classTree) SetEnableRecursiveFolding(enable bool) {
	self.ptr.API.Tree_set_enable_recursive_folding(self, enable)
}
func (self classTree) IsRecursiveFoldingEnabled() bool {
	return self.ptr.API.Tree_is_recursive_folding_enabled(self)
}
func (self classTree) SetDropModeFlags(flags Int) {
	self.ptr.API.Tree_set_drop_mode_flags(self, flags)
}
func (self classTree) GetDropModeFlags() Int {
	return self.ptr.API.Tree_get_drop_mode_flags(self)
}
func (self classTree) SetAllowRmbSelect(allow bool) {
	self.ptr.API.Tree_set_allow_rmb_select(self, allow)
}
func (self classTree) GetAllowRmbSelect() bool {
	return self.ptr.API.Tree_get_allow_rmb_select(self)
}
func (self classTree) SetAllowReselect(allow bool) {
	self.ptr.API.Tree_set_allow_reselect(self, allow)
}
func (self classTree) GetAllowReselect() bool {
	return self.ptr.API.Tree_get_allow_reselect(self)
}
func (self classTree) SetAllowSearch(allow bool) {
	self.ptr.API.Tree_set_allow_search(self, allow)
}
func (self classTree) GetAllowSearch() bool {
	return self.ptr.API.Tree_get_allow_search(self)
}

type classTreeItem struct{ Class[classTreeItem] }

func (self classTreeItem) Super() Object { var super Object; super.ptr = self.ptr; return super }

func (self classTreeItem) Object() Object { return self.Super() }
func (self classTreeItem) SetCellMode(column Int, mode TreeItemTreeCellMode) {
	self.ptr.API.TreeItem_set_cell_mode(self, column, mode)
}
func (self classTreeItem) GetCellMode(column Int) TreeItemTreeCellMode {
	return self.ptr.API.TreeItem_get_cell_mode(self, column)
}
func (self classTreeItem) SetEditMultiline(column Int, multiline bool) {
	self.ptr.API.TreeItem_set_edit_multiline(self, column, multiline)
}
func (self classTreeItem) IsEditMultiline(column Int) bool {
	return self.ptr.API.TreeItem_is_edit_multiline(self, column)
}
func (self classTreeItem) SetChecked(column Int, checked bool) {
	self.ptr.API.TreeItem_set_checked(self, column, checked)
}
func (self classTreeItem) SetIndeterminate(column Int, indeterminate bool) {
	self.ptr.API.TreeItem_set_indeterminate(self, column, indeterminate)
}
func (self classTreeItem) IsChecked(column Int) bool {
	return self.ptr.API.TreeItem_is_checked(self, column)
}
func (self classTreeItem) IsIndeterminate(column Int) bool {
	return self.ptr.API.TreeItem_is_indeterminate(self, column)
}
func (self classTreeItem) PropagateCheck(column Int, emit_signal bool) {
	self.ptr.API.TreeItem_propagate_check(self, column, emit_signal)
}
func (self classTreeItem) SetText(column Int, text String) {
	self.ptr.API.TreeItem_set_text(self, column, text)
}
func (self classTreeItem) GetText(column Int) String {
	return self.ptr.API.TreeItem_get_text(self, column)
}
func (self classTreeItem) SetTextDirection(column Int, direction ControlTextDirection) {
	self.ptr.API.TreeItem_set_text_direction(self, column, direction)
}
func (self classTreeItem) GetTextDirection(column Int) ControlTextDirection {
	return self.ptr.API.TreeItem_get_text_direction(self, column)
}
func (self classTreeItem) SetAutowrapMode(column Int, autowrap_mode TextServerAutowrapMode) {
	self.ptr.API.TreeItem_set_autowrap_mode(self, column, autowrap_mode)
}
func (self classTreeItem) GetAutowrapMode(column Int) TextServerAutowrapMode {
	return self.ptr.API.TreeItem_get_autowrap_mode(self, column)
}
func (self classTreeItem) SetTextOverrunBehavior(column Int, overrun_behavior TextServerOverrunBehavior) {
	self.ptr.API.TreeItem_set_text_overrun_behavior(self, column, overrun_behavior)
}
func (self classTreeItem) GetTextOverrunBehavior(column Int) TextServerOverrunBehavior {
	return self.ptr.API.TreeItem_get_text_overrun_behavior(self, column)
}
func (self classTreeItem) SetStructuredTextBidiOverride(column Int, parser TextServerStructuredTextParser) {
	self.ptr.API.TreeItem_set_structured_text_bidi_override(self, column, parser)
}
func (self classTreeItem) GetStructuredTextBidiOverride(column Int) TextServerStructuredTextParser {
	return self.ptr.API.TreeItem_get_structured_text_bidi_override(self, column)
}
func (self classTreeItem) SetStructuredTextBidiOverrideOptions(column Int, args Array) {
	self.ptr.API.TreeItem_set_structured_text_bidi_override_options(self, column, args)
}
func (self classTreeItem) GetStructuredTextBidiOverrideOptions(column Int) Array {
	return self.ptr.API.TreeItem_get_structured_text_bidi_override_options(self, column)
}
func (self classTreeItem) SetLanguage(column Int, language String) {
	self.ptr.API.TreeItem_set_language(self, column, language)
}
func (self classTreeItem) GetLanguage(column Int) String {
	return self.ptr.API.TreeItem_get_language(self, column)
}
func (self classTreeItem) SetSuffix(column Int, text String) {
	self.ptr.API.TreeItem_set_suffix(self, column, text)
}
func (self classTreeItem) GetSuffix(column Int) String {
	return self.ptr.API.TreeItem_get_suffix(self, column)
}
func (self classTreeItem) SetIcon(column Int, texture Texture2D) {
	self.ptr.API.TreeItem_set_icon(self, column, texture)
}
func (self classTreeItem) GetIcon(column Int) Texture2D {
	return self.ptr.API.TreeItem_get_icon(self, column)
}
func (self classTreeItem) SetIconRegion(column Int, region Rect2) {
	self.ptr.API.TreeItem_set_icon_region(self, column, region)
}
func (self classTreeItem) GetIconRegion(column Int) Rect2 {
	return self.ptr.API.TreeItem_get_icon_region(self, column)
}
func (self classTreeItem) SetIconMaxWidth(column Int, width Int) {
	self.ptr.API.TreeItem_set_icon_max_width(self, column, width)
}
func (self classTreeItem) GetIconMaxWidth(column Int) Int {
	return self.ptr.API.TreeItem_get_icon_max_width(self, column)
}
func (self classTreeItem) SetIconModulate(column Int, modulate Color) {
	self.ptr.API.TreeItem_set_icon_modulate(self, column, modulate)
}
func (self classTreeItem) GetIconModulate(column Int) Color {
	return self.ptr.API.TreeItem_get_icon_modulate(self, column)
}
func (self classTreeItem) SetRange(column Int, value Float) {
	self.ptr.API.TreeItem_set_range(self, column, value)
}
func (self classTreeItem) GetRange(column Int) Float {
	return self.ptr.API.TreeItem_get_range(self, column)
}
func (self classTreeItem) SetRangeConfig(column Int, min Float, max Float, step Float, expr bool) {
	self.ptr.API.TreeItem_set_range_config(self, column, min, max, step, expr)
}
func (self classTreeItem) GetRangeConfig(column Int) Dictionary {
	return self.ptr.API.TreeItem_get_range_config(self, column)
}
func (self classTreeItem) SetMetadata(column Int, meta Variant) {
	self.ptr.API.TreeItem_set_metadata(self, column, meta)
}
func (self classTreeItem) GetMetadata(column Int) Variant {
	return self.ptr.API.TreeItem_get_metadata(self, column)
}
func (self classTreeItem) SetCustomDraw(column Int, object Object, callback StringName) {
	self.ptr.API.TreeItem_set_custom_draw(self, column, object, callback)
}
func (self classTreeItem) SetCollapsed(enable bool) {
	self.ptr.API.TreeItem_set_collapsed(self, enable)
}
func (self classTreeItem) IsCollapsed() bool {
	return self.ptr.API.TreeItem_is_collapsed(self)
}
func (self classTreeItem) SetCollapsedRecursive(enable bool) {
	self.ptr.API.TreeItem_set_collapsed_recursive(self, enable)
}
func (self classTreeItem) IsAnyCollapsed(only_visible bool) bool {
	return self.ptr.API.TreeItem_is_any_collapsed(self, only_visible)
}
func (self classTreeItem) SetVisible(enable bool) {
	self.ptr.API.TreeItem_set_visible(self, enable)
}
func (self classTreeItem) IsVisible() bool {
	return self.ptr.API.TreeItem_is_visible(self)
}
func (self classTreeItem) UncollapseTree() {
	self.ptr.API.TreeItem_uncollapse_tree(self)
}
func (self classTreeItem) SetCustomMinimumHeight(height Int) {
	self.ptr.API.TreeItem_set_custom_minimum_height(self, height)
}
func (self classTreeItem) GetCustomMinimumHeight() Int {
	return self.ptr.API.TreeItem_get_custom_minimum_height(self)
}
func (self classTreeItem) SetSelectable(column Int, selectable bool) {
	self.ptr.API.TreeItem_set_selectable(self, column, selectable)
}
func (self classTreeItem) IsSelectable(column Int) bool {
	return self.ptr.API.TreeItem_is_selectable(self, column)
}
func (self classTreeItem) IsSelected(column Int) bool {
	return self.ptr.API.TreeItem_is_selected(self, column)
}
func (self classTreeItem) Select(column Int) {
	self.ptr.API.TreeItem_select(self, column)
}
func (self classTreeItem) Deselect(column Int) {
	self.ptr.API.TreeItem_deselect(self, column)
}
func (self classTreeItem) SetEditable(column Int, enabled bool) {
	self.ptr.API.TreeItem_set_editable(self, column, enabled)
}
func (self classTreeItem) IsEditable(column Int) bool {
	return self.ptr.API.TreeItem_is_editable(self, column)
}
func (self classTreeItem) SetCustomColor(column Int, color Color) {
	self.ptr.API.TreeItem_set_custom_color(self, column, color)
}
func (self classTreeItem) GetCustomColor(column Int) Color {
	return self.ptr.API.TreeItem_get_custom_color(self, column)
}
func (self classTreeItem) ClearCustomColor(column Int) {
	self.ptr.API.TreeItem_clear_custom_color(self, column)
}
func (self classTreeItem) SetCustomFont(column Int, font Font) {
	self.ptr.API.TreeItem_set_custom_font(self, column, font)
}
func (self classTreeItem) GetCustomFont(column Int) Font {
	return self.ptr.API.TreeItem_get_custom_font(self, column)
}
func (self classTreeItem) SetCustomFontSize(column Int, font_size Int) {
	self.ptr.API.TreeItem_set_custom_font_size(self, column, font_size)
}
func (self classTreeItem) GetCustomFontSize(column Int) Int {
	return self.ptr.API.TreeItem_get_custom_font_size(self, column)
}
func (self classTreeItem) SetCustomBgColor(column Int, color Color, just_outline bool) {
	self.ptr.API.TreeItem_set_custom_bg_color(self, column, color, just_outline)
}
func (self classTreeItem) ClearCustomBgColor(column Int) {
	self.ptr.API.TreeItem_clear_custom_bg_color(self, column)
}
func (self classTreeItem) GetCustomBgColor(column Int) Color {
	return self.ptr.API.TreeItem_get_custom_bg_color(self, column)
}
func (self classTreeItem) SetCustomAsButton(column Int, enable bool) {
	self.ptr.API.TreeItem_set_custom_as_button(self, column, enable)
}
func (self classTreeItem) IsCustomSetAsButton(column Int) bool {
	return self.ptr.API.TreeItem_is_custom_set_as_button(self, column)
}
func (self classTreeItem) AddButton(column Int, button Texture2D, id Int, disabled bool, tooltip_text String) {
	self.ptr.API.TreeItem_add_button(self, column, button, id, disabled, tooltip_text)
}
func (self classTreeItem) GetButtonCount(column Int) Int {
	return self.ptr.API.TreeItem_get_button_count(self, column)
}
func (self classTreeItem) GetButtonTooltipText(column Int, button_index Int) String {
	return self.ptr.API.TreeItem_get_button_tooltip_text(self, column, button_index)
}
func (self classTreeItem) GetButtonId(column Int, button_index Int) Int {
	return self.ptr.API.TreeItem_get_button_id(self, column, button_index)
}
func (self classTreeItem) GetButtonById(column Int, id Int) Int {
	return self.ptr.API.TreeItem_get_button_by_id(self, column, id)
}
func (self classTreeItem) GetButton(column Int, button_index Int) Texture2D {
	return self.ptr.API.TreeItem_get_button(self, column, button_index)
}
func (self classTreeItem) SetButtonTooltipText(column Int, button_index Int, tooltip String) {
	self.ptr.API.TreeItem_set_button_tooltip_text(self, column, button_index, tooltip)
}
func (self classTreeItem) SetButton(column Int, button_index Int, button Texture2D) {
	self.ptr.API.TreeItem_set_button(self, column, button_index, button)
}
func (self classTreeItem) EraseButton(column Int, button_index Int) {
	self.ptr.API.TreeItem_erase_button(self, column, button_index)
}
func (self classTreeItem) SetButtonDisabled(column Int, button_index Int, disabled bool) {
	self.ptr.API.TreeItem_set_button_disabled(self, column, button_index, disabled)
}
func (self classTreeItem) SetButtonColor(column Int, button_index Int, color Color) {
	self.ptr.API.TreeItem_set_button_color(self, column, button_index, color)
}
func (self classTreeItem) IsButtonDisabled(column Int, button_index Int) bool {
	return self.ptr.API.TreeItem_is_button_disabled(self, column, button_index)
}
func (self classTreeItem) SetTooltipText(column Int, tooltip String) {
	self.ptr.API.TreeItem_set_tooltip_text(self, column, tooltip)
}
func (self classTreeItem) GetTooltipText(column Int) String {
	return self.ptr.API.TreeItem_get_tooltip_text(self, column)
}
func (self classTreeItem) SetTextAlignment(column Int, text_alignment HorizontalAlignment) {
	self.ptr.API.TreeItem_set_text_alignment(self, column, text_alignment)
}
func (self classTreeItem) GetTextAlignment(column Int) HorizontalAlignment {
	return self.ptr.API.TreeItem_get_text_alignment(self, column)
}
func (self classTreeItem) SetExpandRight(column Int, enable bool) {
	self.ptr.API.TreeItem_set_expand_right(self, column, enable)
}
func (self classTreeItem) GetExpandRight(column Int) bool {
	return self.ptr.API.TreeItem_get_expand_right(self, column)
}
func (self classTreeItem) SetDisableFolding(disable bool) {
	self.ptr.API.TreeItem_set_disable_folding(self, disable)
}
func (self classTreeItem) IsFoldingDisabled() bool {
	return self.ptr.API.TreeItem_is_folding_disabled(self)
}
func (self classTreeItem) CreateChild(index Int) TreeItem {
	return self.ptr.API.TreeItem_create_child(self, index)
}
func (self classTreeItem) AddChild(child TreeItem) {
	self.ptr.API.TreeItem_add_child(self, child)
}
func (self classTreeItem) RemoveChild(child TreeItem) {
	self.ptr.API.TreeItem_remove_child(self, child)
}
func (self classTreeItem) GetTree() Tree {
	return self.ptr.API.TreeItem_get_tree(self)
}
func (self classTreeItem) GetNext() TreeItem {
	return self.ptr.API.TreeItem_get_next(self)
}
func (self classTreeItem) GetPrev() TreeItem {
	return self.ptr.API.TreeItem_get_prev(self)
}
func (self classTreeItem) GetParent() TreeItem {
	return self.ptr.API.TreeItem_get_parent(self)
}
func (self classTreeItem) GetFirstChild() TreeItem {
	return self.ptr.API.TreeItem_get_first_child(self)
}
func (self classTreeItem) GetNextInTree(wrap bool) TreeItem {
	return self.ptr.API.TreeItem_get_next_in_tree(self, wrap)
}
func (self classTreeItem) GetPrevInTree(wrap bool) TreeItem {
	return self.ptr.API.TreeItem_get_prev_in_tree(self, wrap)
}
func (self classTreeItem) GetNextVisible(wrap bool) TreeItem {
	return self.ptr.API.TreeItem_get_next_visible(self, wrap)
}
func (self classTreeItem) GetPrevVisible(wrap bool) TreeItem {
	return self.ptr.API.TreeItem_get_prev_visible(self, wrap)
}
func (self classTreeItem) GetChild(index Int) TreeItem {
	return self.ptr.API.TreeItem_get_child(self, index)
}
func (self classTreeItem) GetChildCount() Int {
	return self.ptr.API.TreeItem_get_child_count(self)
}
func (self classTreeItem) GetChildren() ArrayOf[TreeItem] {
	return self.ptr.API.TreeItem_get_children(self)
}
func (self classTreeItem) GetIndex() Int {
	return self.ptr.API.TreeItem_get_index(self)
}
func (self classTreeItem) MoveBefore(item TreeItem) {
	self.ptr.API.TreeItem_move_before(self, item)
}
func (self classTreeItem) MoveAfter(item TreeItem) {
	self.ptr.API.TreeItem_move_after(self, item)
}
func (self classTreeItem) CallRecursive(method StringName) {
	self.ptr.API.TreeItem_call_recursive(self, method)
}

type classTriangleMesh struct{ Class[classTriangleMesh] }

func (self classTriangleMesh) Super() RefCounted {
	var super RefCounted
	super.ptr = self.ptr
	return super
}

func (self classTriangleMesh) RefCounted() RefCounted { return self.Super() }

type classTubeTrailMesh struct{ Class[classTubeTrailMesh] }

func (self classTubeTrailMesh) Super() PrimitiveMesh {
	var super PrimitiveMesh
	super.ptr = self.ptr
	return super
}

func (self classTubeTrailMesh) PrimitiveMesh() PrimitiveMesh { return self.Super() }
func (self classTubeTrailMesh) SetRadius(radius Float) {
	self.ptr.API.TubeTrailMesh_set_radius(self, radius)
}
func (self classTubeTrailMesh) GetRadius() Float {
	return self.ptr.API.TubeTrailMesh_get_radius(self)
}
func (self classTubeTrailMesh) SetRadialSteps(radial_steps Int) {
	self.ptr.API.TubeTrailMesh_set_radial_steps(self, radial_steps)
}
func (self classTubeTrailMesh) GetRadialSteps() Int {
	return self.ptr.API.TubeTrailMesh_get_radial_steps(self)
}
func (self classTubeTrailMesh) SetSections(sections Int) {
	self.ptr.API.TubeTrailMesh_set_sections(self, sections)
}
func (self classTubeTrailMesh) GetSections() Int {
	return self.ptr.API.TubeTrailMesh_get_sections(self)
}
func (self classTubeTrailMesh) SetSectionLength(section_length Float) {
	self.ptr.API.TubeTrailMesh_set_section_length(self, section_length)
}
func (self classTubeTrailMesh) GetSectionLength() Float {
	return self.ptr.API.TubeTrailMesh_get_section_length(self)
}
func (self classTubeTrailMesh) SetSectionRings(section_rings Int) {
	self.ptr.API.TubeTrailMesh_set_section_rings(self, section_rings)
}
func (self classTubeTrailMesh) GetSectionRings() Int {
	return self.ptr.API.TubeTrailMesh_get_section_rings(self)
}
func (self classTubeTrailMesh) SetCapTop(cap_top bool) {
	self.ptr.API.TubeTrailMesh_set_cap_top(self, cap_top)
}
func (self classTubeTrailMesh) IsCapTop() bool {
	return self.ptr.API.TubeTrailMesh_is_cap_top(self)
}
func (self classTubeTrailMesh) SetCapBottom(cap_bottom bool) {
	self.ptr.API.TubeTrailMesh_set_cap_bottom(self, cap_bottom)
}
func (self classTubeTrailMesh) IsCapBottom() bool {
	return self.ptr.API.TubeTrailMesh_is_cap_bottom(self)
}
func (self classTubeTrailMesh) SetCurve(curve Curve) {
	self.ptr.API.TubeTrailMesh_set_curve(self, curve)
}
func (self classTubeTrailMesh) GetCurve() Curve {
	return self.ptr.API.TubeTrailMesh_get_curve(self)
}

type classTween struct{ Class[classTween] }

func (self classTween) Super() RefCounted { var super RefCounted; super.ptr = self.ptr; return super }

func (self classTween) RefCounted() RefCounted { return self.Super() }
func (self classTween) TweenProperty(object Object, property NodePath, final_val Variant, duration Float) PropertyTweener {
	return self.ptr.API.Tween_tween_property(self, object, property, final_val, duration)
}
func (self classTween) TweenInterval(time Float) IntervalTweener {
	return self.ptr.API.Tween_tween_interval(self, time)
}
func (self classTween) TweenCallback(callback Callable) CallbackTweener {
	return self.ptr.API.Tween_tween_callback(self, callback)
}
func (self classTween) TweenMethod(method Callable, from Variant, to Variant, duration Float) MethodTweener {
	return self.ptr.API.Tween_tween_method(self, method, from, to, duration)
}
func (self classTween) CustomStep(delta Float) bool {
	return self.ptr.API.Tween_custom_step(self, delta)
}
func (self classTween) Stop() {
	self.ptr.API.Tween_stop(self)
}
func (self classTween) Pause() {
	self.ptr.API.Tween_pause(self)
}
func (self classTween) Play() {
	self.ptr.API.Tween_play(self)
}
func (self classTween) Kill() {
	self.ptr.API.Tween_kill(self)
}
func (self classTween) GetTotalElapsedTime() Float {
	return self.ptr.API.Tween_get_total_elapsed_time(self)
}
func (self classTween) IsRunning() bool {
	return self.ptr.API.Tween_is_running(self)
}
func (self classTween) IsValid() bool {
	return self.ptr.API.Tween_is_valid(self)
}
func (self classTween) BindNode(node Node) Tween {
	return self.ptr.API.Tween_bind_node(self, node)
}
func (self classTween) SetProcessMode(mode TweenTweenProcessMode) Tween {
	return self.ptr.API.Tween_set_process_mode(self, mode)
}
func (self classTween) SetPauseMode(mode TweenTweenPauseMode) Tween {
	return self.ptr.API.Tween_set_pause_mode(self, mode)
}
func (self classTween) SetParallel(parallel bool) Tween {
	return self.ptr.API.Tween_set_parallel(self, parallel)
}
func (self classTween) SetLoops(loops Int) Tween {
	return self.ptr.API.Tween_set_loops(self, loops)
}
func (self classTween) GetLoopsLeft() Int {
	return self.ptr.API.Tween_get_loops_left(self)
}
func (self classTween) SetSpeedScale(speed Float) Tween {
	return self.ptr.API.Tween_set_speed_scale(self, speed)
}
func (self classTween) SetTrans(trans TweenTransitionType) Tween {
	return self.ptr.API.Tween_set_trans(self, trans)
}
func (self classTween) SetEase(ease TweenEaseType) Tween {
	return self.ptr.API.Tween_set_ease(self, ease)
}
func (self classTween) Parallel() Tween {
	return self.ptr.API.Tween_parallel(self)
}
func (self classTween) Chain() Tween {
	return self.ptr.API.Tween_chain(self)
}
func (self classTween) InterpolateValue(initial_value Variant, delta_value Variant, elapsed_time Float, duration Float, trans_type TweenTransitionType, ease_type TweenEaseType) Variant {
	return self.ptr.API.Tween_interpolate_value(self, initial_value, delta_value, elapsed_time, duration, trans_type, ease_type)
}

type classTweener struct{ Class[classTweener] }

func (self classTweener) Super() RefCounted { var super RefCounted; super.ptr = self.ptr; return super }

func (self classTweener) RefCounted() RefCounted { return self.Super() }

type classUDPServer struct{ Class[classUDPServer] }

func (self classUDPServer) Super() RefCounted {
	var super RefCounted
	super.ptr = self.ptr
	return super
}

func (self classUDPServer) RefCounted() RefCounted { return self.Super() }
func (self classUDPServer) Listen(port Int, bind_address String) int64 {
	return self.ptr.API.UDPServer_listen(self, port, bind_address)
}
func (self classUDPServer) Poll() int64 {
	return self.ptr.API.UDPServer_poll(self)
}
func (self classUDPServer) IsConnectionAvailable() bool {
	return self.ptr.API.UDPServer_is_connection_available(self)
}
func (self classUDPServer) GetLocalPort() Int {
	return self.ptr.API.UDPServer_get_local_port(self)
}
func (self classUDPServer) IsListening() bool {
	return self.ptr.API.UDPServer_is_listening(self)
}
func (self classUDPServer) TakeConnection() PacketPeerUDP {
	return self.ptr.API.UDPServer_take_connection(self)
}
func (self classUDPServer) Stop() {
	self.ptr.API.UDPServer_stop(self)
}
func (self classUDPServer) SetMaxPendingConnections(max_pending_connections Int) {
	self.ptr.API.UDPServer_set_max_pending_connections(self, max_pending_connections)
}
func (self classUDPServer) GetMaxPendingConnections() Int {
	return self.ptr.API.UDPServer_get_max_pending_connections(self)
}

type classUPNP struct{ Class[classUPNP] }

func (self classUPNP) Super() RefCounted { var super RefCounted; super.ptr = self.ptr; return super }

func (self classUPNP) RefCounted() RefCounted { return self.Super() }
func (self classUPNP) GetDeviceCount() Int {
	return self.ptr.API.UPNP_get_device_count(self)
}
func (self classUPNP) GetDevice(index Int) UPNPDevice {
	return self.ptr.API.UPNP_get_device(self, index)
}
func (self classUPNP) AddDevice(device UPNPDevice) {
	self.ptr.API.UPNP_add_device(self, device)
}
func (self classUPNP) SetDevice(index Int, device UPNPDevice) {
	self.ptr.API.UPNP_set_device(self, index, device)
}
func (self classUPNP) RemoveDevice(index Int) {
	self.ptr.API.UPNP_remove_device(self, index)
}
func (self classUPNP) ClearDevices() {
	self.ptr.API.UPNP_clear_devices(self)
}
func (self classUPNP) GetGateway() UPNPDevice {
	return self.ptr.API.UPNP_get_gateway(self)
}
func (self classUPNP) Discover(timeout Int, ttl Int, device_filter String) Int {
	return self.ptr.API.UPNP_discover(self, timeout, ttl, device_filter)
}
func (self classUPNP) QueryExternalAddress() String {
	return self.ptr.API.UPNP_query_external_address(self)
}
func (self classUPNP) AddPortMapping(port Int, port_internal Int, desc String, proto String, duration Int) Int {
	return self.ptr.API.UPNP_add_port_mapping(self, port, port_internal, desc, proto, duration)
}
func (self classUPNP) DeletePortMapping(port Int, proto String) Int {
	return self.ptr.API.UPNP_delete_port_mapping(self, port, proto)
}
func (self classUPNP) SetDiscoverMulticastIf(m_if String) {
	self.ptr.API.UPNP_set_discover_multicast_if(self, m_if)
}
func (self classUPNP) GetDiscoverMulticastIf() String {
	return self.ptr.API.UPNP_get_discover_multicast_if(self)
}
func (self classUPNP) SetDiscoverLocalPort(port Int) {
	self.ptr.API.UPNP_set_discover_local_port(self, port)
}
func (self classUPNP) GetDiscoverLocalPort() Int {
	return self.ptr.API.UPNP_get_discover_local_port(self)
}
func (self classUPNP) SetDiscoverIpv6(ipv6 bool) {
	self.ptr.API.UPNP_set_discover_ipv6(self, ipv6)
}
func (self classUPNP) IsDiscoverIpv6() bool {
	return self.ptr.API.UPNP_is_discover_ipv6(self)
}

type classUPNPDevice struct{ Class[classUPNPDevice] }

func (self classUPNPDevice) Super() RefCounted {
	var super RefCounted
	super.ptr = self.ptr
	return super
}

func (self classUPNPDevice) RefCounted() RefCounted { return self.Super() }
func (self classUPNPDevice) IsValidGateway() bool {
	return self.ptr.API.UPNPDevice_is_valid_gateway(self)
}
func (self classUPNPDevice) QueryExternalAddress() String {
	return self.ptr.API.UPNPDevice_query_external_address(self)
}
func (self classUPNPDevice) AddPortMapping(port Int, port_internal Int, desc String, proto String, duration Int) Int {
	return self.ptr.API.UPNPDevice_add_port_mapping(self, port, port_internal, desc, proto, duration)
}
func (self classUPNPDevice) DeletePortMapping(port Int, proto String) Int {
	return self.ptr.API.UPNPDevice_delete_port_mapping(self, port, proto)
}
func (self classUPNPDevice) SetDescriptionUrl(url String) {
	self.ptr.API.UPNPDevice_set_description_url(self, url)
}
func (self classUPNPDevice) GetDescriptionUrl() String {
	return self.ptr.API.UPNPDevice_get_description_url(self)
}
func (self classUPNPDevice) SetServiceType(atype String) {
	self.ptr.API.UPNPDevice_set_service_type(self, atype)
}
func (self classUPNPDevice) GetServiceType() String {
	return self.ptr.API.UPNPDevice_get_service_type(self)
}
func (self classUPNPDevice) SetIgdControlUrl(url String) {
	self.ptr.API.UPNPDevice_set_igd_control_url(self, url)
}
func (self classUPNPDevice) GetIgdControlUrl() String {
	return self.ptr.API.UPNPDevice_get_igd_control_url(self)
}
func (self classUPNPDevice) SetIgdServiceType(atype String) {
	self.ptr.API.UPNPDevice_set_igd_service_type(self, atype)
}
func (self classUPNPDevice) GetIgdServiceType() String {
	return self.ptr.API.UPNPDevice_get_igd_service_type(self)
}
func (self classUPNPDevice) SetIgdOurAddr(addr String) {
	self.ptr.API.UPNPDevice_set_igd_our_addr(self, addr)
}
func (self classUPNPDevice) GetIgdOurAddr() String {
	return self.ptr.API.UPNPDevice_get_igd_our_addr(self)
}
func (self classUPNPDevice) SetIgdStatus(status UPNPDeviceIGDStatus) {
	self.ptr.API.UPNPDevice_set_igd_status(self, status)
}
func (self classUPNPDevice) GetIgdStatus() UPNPDeviceIGDStatus {
	return self.ptr.API.UPNPDevice_get_igd_status(self)
}

type classUndoRedo struct{ Class[classUndoRedo] }

func (self classUndoRedo) Super() Object { var super Object; super.ptr = self.ptr; return super }

func (self classUndoRedo) Object() Object { return self.Super() }
func (self classUndoRedo) CreateAction(name String, merge_mode UndoRedoMergeMode, backward_undo_ops bool) {
	self.ptr.API.UndoRedo_create_action(self, name, merge_mode, backward_undo_ops)
}
func (self classUndoRedo) CommitAction(execute bool) {
	self.ptr.API.UndoRedo_commit_action(self, execute)
}
func (self classUndoRedo) IsCommittingAction() bool {
	return self.ptr.API.UndoRedo_is_committing_action(self)
}
func (self classUndoRedo) AddDoMethod(callable Callable) {
	self.ptr.API.UndoRedo_add_do_method(self, callable)
}
func (self classUndoRedo) AddUndoMethod(callable Callable) {
	self.ptr.API.UndoRedo_add_undo_method(self, callable)
}
func (self classUndoRedo) AddDoProperty(object Object, property StringName, value Variant) {
	self.ptr.API.UndoRedo_add_do_property(self, object, property, value)
}
func (self classUndoRedo) AddUndoProperty(object Object, property StringName, value Variant) {
	self.ptr.API.UndoRedo_add_undo_property(self, object, property, value)
}
func (self classUndoRedo) AddDoReference(object Object) {
	self.ptr.API.UndoRedo_add_do_reference(self, object)
}
func (self classUndoRedo) AddUndoReference(object Object) {
	self.ptr.API.UndoRedo_add_undo_reference(self, object)
}
func (self classUndoRedo) StartForceKeepInMergeEnds() {
	self.ptr.API.UndoRedo_start_force_keep_in_merge_ends(self)
}
func (self classUndoRedo) EndForceKeepInMergeEnds() {
	self.ptr.API.UndoRedo_end_force_keep_in_merge_ends(self)
}
func (self classUndoRedo) GetHistoryCount() Int {
	return self.ptr.API.UndoRedo_get_history_count(self)
}
func (self classUndoRedo) GetCurrentAction() Int {
	return self.ptr.API.UndoRedo_get_current_action(self)
}
func (self classUndoRedo) GetActionName(id Int) String {
	return self.ptr.API.UndoRedo_get_action_name(self, id)
}
func (self classUndoRedo) ClearHistory(increase_version bool) {
	self.ptr.API.UndoRedo_clear_history(self, increase_version)
}
func (self classUndoRedo) GetCurrentActionName() String {
	return self.ptr.API.UndoRedo_get_current_action_name(self)
}
func (self classUndoRedo) HasUndo() bool {
	return self.ptr.API.UndoRedo_has_undo(self)
}
func (self classUndoRedo) HasRedo() bool {
	return self.ptr.API.UndoRedo_has_redo(self)
}
func (self classUndoRedo) GetVersion() Int {
	return self.ptr.API.UndoRedo_get_version(self)
}
func (self classUndoRedo) Redo() bool {
	return self.ptr.API.UndoRedo_redo(self)
}
func (self classUndoRedo) Undo() bool {
	return self.ptr.API.UndoRedo_undo(self)
}

type classVBoxContainer struct{ Class[classVBoxContainer] }

func (self classVBoxContainer) Super() BoxContainer {
	var super BoxContainer
	super.ptr = self.ptr
	return super
}

func (self classVBoxContainer) BoxContainer() BoxContainer { return self.Super() }

type classVFlowContainer struct{ Class[classVFlowContainer] }

func (self classVFlowContainer) Super() FlowContainer {
	var super FlowContainer
	super.ptr = self.ptr
	return super
}

func (self classVFlowContainer) FlowContainer() FlowContainer { return self.Super() }

type classVScrollBar struct{ Class[classVScrollBar] }

func (self classVScrollBar) Super() ScrollBar {
	var super ScrollBar
	super.ptr = self.ptr
	return super
}

func (self classVScrollBar) ScrollBar() ScrollBar { return self.Super() }

type classVSeparator struct{ Class[classVSeparator] }

func (self classVSeparator) Super() Separator {
	var super Separator
	super.ptr = self.ptr
	return super
}

func (self classVSeparator) Separator() Separator { return self.Super() }

type classVSlider struct{ Class[classVSlider] }

func (self classVSlider) Super() Slider { var super Slider; super.ptr = self.ptr; return super }

func (self classVSlider) Slider() Slider { return self.Super() }

type classVSplitContainer struct{ Class[classVSplitContainer] }

func (self classVSplitContainer) Super() SplitContainer {
	var super SplitContainer
	super.ptr = self.ptr
	return super
}

func (self classVSplitContainer) SplitContainer() SplitContainer { return self.Super() }

type classVehicleBody3D struct{ Class[classVehicleBody3D] }

func (self classVehicleBody3D) Super() RigidBody3D {
	var super RigidBody3D
	super.ptr = self.ptr
	return super
}

func (self classVehicleBody3D) RigidBody3D() RigidBody3D { return self.Super() }
func (self classVehicleBody3D) SetEngineForce(engine_force Float) {
	self.ptr.API.VehicleBody3D_set_engine_force(self, engine_force)
}
func (self classVehicleBody3D) GetEngineForce() Float {
	return self.ptr.API.VehicleBody3D_get_engine_force(self)
}
func (self classVehicleBody3D) SetBrake(brake Float) {
	self.ptr.API.VehicleBody3D_set_brake(self, brake)
}
func (self classVehicleBody3D) GetBrake() Float {
	return self.ptr.API.VehicleBody3D_get_brake(self)
}
func (self classVehicleBody3D) SetSteering(steering Float) {
	self.ptr.API.VehicleBody3D_set_steering(self, steering)
}
func (self classVehicleBody3D) GetSteering() Float {
	return self.ptr.API.VehicleBody3D_get_steering(self)
}

type classVehicleWheel3D struct{ Class[classVehicleWheel3D] }

func (self classVehicleWheel3D) Super() Node3D { var super Node3D; super.ptr = self.ptr; return super }

func (self classVehicleWheel3D) Node3D() Node3D { return self.Super() }
func (self classVehicleWheel3D) SetRadius(length Float) {
	self.ptr.API.VehicleWheel3D_set_radius(self, length)
}
func (self classVehicleWheel3D) GetRadius() Float {
	return self.ptr.API.VehicleWheel3D_get_radius(self)
}
func (self classVehicleWheel3D) SetSuspensionRestLength(length Float) {
	self.ptr.API.VehicleWheel3D_set_suspension_rest_length(self, length)
}
func (self classVehicleWheel3D) GetSuspensionRestLength() Float {
	return self.ptr.API.VehicleWheel3D_get_suspension_rest_length(self)
}
func (self classVehicleWheel3D) SetSuspensionTravel(length Float) {
	self.ptr.API.VehicleWheel3D_set_suspension_travel(self, length)
}
func (self classVehicleWheel3D) GetSuspensionTravel() Float {
	return self.ptr.API.VehicleWheel3D_get_suspension_travel(self)
}
func (self classVehicleWheel3D) SetSuspensionStiffness(length Float) {
	self.ptr.API.VehicleWheel3D_set_suspension_stiffness(self, length)
}
func (self classVehicleWheel3D) GetSuspensionStiffness() Float {
	return self.ptr.API.VehicleWheel3D_get_suspension_stiffness(self)
}
func (self classVehicleWheel3D) SetSuspensionMaxForce(length Float) {
	self.ptr.API.VehicleWheel3D_set_suspension_max_force(self, length)
}
func (self classVehicleWheel3D) GetSuspensionMaxForce() Float {
	return self.ptr.API.VehicleWheel3D_get_suspension_max_force(self)
}
func (self classVehicleWheel3D) SetDampingCompression(length Float) {
	self.ptr.API.VehicleWheel3D_set_damping_compression(self, length)
}
func (self classVehicleWheel3D) GetDampingCompression() Float {
	return self.ptr.API.VehicleWheel3D_get_damping_compression(self)
}
func (self classVehicleWheel3D) SetDampingRelaxation(length Float) {
	self.ptr.API.VehicleWheel3D_set_damping_relaxation(self, length)
}
func (self classVehicleWheel3D) GetDampingRelaxation() Float {
	return self.ptr.API.VehicleWheel3D_get_damping_relaxation(self)
}
func (self classVehicleWheel3D) SetUseAsTraction(enable bool) {
	self.ptr.API.VehicleWheel3D_set_use_as_traction(self, enable)
}
func (self classVehicleWheel3D) IsUsedAsTraction() bool {
	return self.ptr.API.VehicleWheel3D_is_used_as_traction(self)
}
func (self classVehicleWheel3D) SetUseAsSteering(enable bool) {
	self.ptr.API.VehicleWheel3D_set_use_as_steering(self, enable)
}
func (self classVehicleWheel3D) IsUsedAsSteering() bool {
	return self.ptr.API.VehicleWheel3D_is_used_as_steering(self)
}
func (self classVehicleWheel3D) SetFrictionSlip(length Float) {
	self.ptr.API.VehicleWheel3D_set_friction_slip(self, length)
}
func (self classVehicleWheel3D) GetFrictionSlip() Float {
	return self.ptr.API.VehicleWheel3D_get_friction_slip(self)
}
func (self classVehicleWheel3D) IsInContact() bool {
	return self.ptr.API.VehicleWheel3D_is_in_contact(self)
}
func (self classVehicleWheel3D) GetContactBody() Node3D {
	return self.ptr.API.VehicleWheel3D_get_contact_body(self)
}
func (self classVehicleWheel3D) SetRollInfluence(roll_influence Float) {
	self.ptr.API.VehicleWheel3D_set_roll_influence(self, roll_influence)
}
func (self classVehicleWheel3D) GetRollInfluence() Float {
	return self.ptr.API.VehicleWheel3D_get_roll_influence(self)
}
func (self classVehicleWheel3D) GetSkidinfo() Float {
	return self.ptr.API.VehicleWheel3D_get_skidinfo(self)
}
func (self classVehicleWheel3D) GetRpm() Float {
	return self.ptr.API.VehicleWheel3D_get_rpm(self)
}
func (self classVehicleWheel3D) SetEngineForce(engine_force Float) {
	self.ptr.API.VehicleWheel3D_set_engine_force(self, engine_force)
}
func (self classVehicleWheel3D) GetEngineForce() Float {
	return self.ptr.API.VehicleWheel3D_get_engine_force(self)
}
func (self classVehicleWheel3D) SetBrake(brake Float) {
	self.ptr.API.VehicleWheel3D_set_brake(self, brake)
}
func (self classVehicleWheel3D) GetBrake() Float {
	return self.ptr.API.VehicleWheel3D_get_brake(self)
}
func (self classVehicleWheel3D) SetSteering(steering Float) {
	self.ptr.API.VehicleWheel3D_set_steering(self, steering)
}
func (self classVehicleWheel3D) GetSteering() Float {
	return self.ptr.API.VehicleWheel3D_get_steering(self)
}

type classVideoStream struct{ Class[classVideoStream] }

func (self classVideoStream) Super() Resource { var super Resource; super.ptr = self.ptr; return super }

func (self classVideoStream) Resource() Resource { return self.Super() }
func (self classVideoStream) SetFile(file String) {
	self.ptr.API.VideoStream_set_file(self, file)
}
func (self classVideoStream) GetFile() String {
	return self.ptr.API.VideoStream_get_file(self)
}

type classVideoStreamPlayback struct {
	Class[classVideoStreamPlayback]
}

func (self classVideoStreamPlayback) Super() Resource {
	var super Resource
	super.ptr = self.ptr
	return super
}

func (self classVideoStreamPlayback) Resource() Resource { return self.Super() }
func (self classVideoStreamPlayback) MixAudio(num_frames Int, buffer PackedFloat32Array, offset Int) Int {
	return self.ptr.API.VideoStreamPlayback_mix_audio(self, num_frames, buffer, offset)
}

type classVideoStreamPlayer struct{ Class[classVideoStreamPlayer] }

func (self classVideoStreamPlayer) Super() Control {
	var super Control
	super.ptr = self.ptr
	return super
}

func (self classVideoStreamPlayer) Control() Control { return self.Super() }
func (self classVideoStreamPlayer) SetStream(stream VideoStream) {
	self.ptr.API.VideoStreamPlayer_set_stream(self, stream)
}
func (self classVideoStreamPlayer) GetStream() VideoStream {
	return self.ptr.API.VideoStreamPlayer_get_stream(self)
}
func (self classVideoStreamPlayer) Play() {
	self.ptr.API.VideoStreamPlayer_play(self)
}
func (self classVideoStreamPlayer) Stop() {
	self.ptr.API.VideoStreamPlayer_stop(self)
}
func (self classVideoStreamPlayer) IsPlaying() bool {
	return self.ptr.API.VideoStreamPlayer_is_playing(self)
}
func (self classVideoStreamPlayer) SetPaused(paused bool) {
	self.ptr.API.VideoStreamPlayer_set_paused(self, paused)
}
func (self classVideoStreamPlayer) IsPaused() bool {
	return self.ptr.API.VideoStreamPlayer_is_paused(self)
}
func (self classVideoStreamPlayer) SetLoop(loop bool) {
	self.ptr.API.VideoStreamPlayer_set_loop(self, loop)
}
func (self classVideoStreamPlayer) HasLoop() bool {
	return self.ptr.API.VideoStreamPlayer_has_loop(self)
}
func (self classVideoStreamPlayer) SetVolume(volume Float) {
	self.ptr.API.VideoStreamPlayer_set_volume(self, volume)
}
func (self classVideoStreamPlayer) GetVolume() Float {
	return self.ptr.API.VideoStreamPlayer_get_volume(self)
}
func (self classVideoStreamPlayer) SetVolumeDb(db Float) {
	self.ptr.API.VideoStreamPlayer_set_volume_db(self, db)
}
func (self classVideoStreamPlayer) GetVolumeDb() Float {
	return self.ptr.API.VideoStreamPlayer_get_volume_db(self)
}
func (self classVideoStreamPlayer) SetAudioTrack(track Int) {
	self.ptr.API.VideoStreamPlayer_set_audio_track(self, track)
}
func (self classVideoStreamPlayer) GetAudioTrack() Int {
	return self.ptr.API.VideoStreamPlayer_get_audio_track(self)
}
func (self classVideoStreamPlayer) GetStreamName() String {
	return self.ptr.API.VideoStreamPlayer_get_stream_name(self)
}
func (self classVideoStreamPlayer) GetStreamLength() Float {
	return self.ptr.API.VideoStreamPlayer_get_stream_length(self)
}
func (self classVideoStreamPlayer) SetStreamPosition(position Float) {
	self.ptr.API.VideoStreamPlayer_set_stream_position(self, position)
}
func (self classVideoStreamPlayer) GetStreamPosition() Float {
	return self.ptr.API.VideoStreamPlayer_get_stream_position(self)
}
func (self classVideoStreamPlayer) SetAutoplay(enabled bool) {
	self.ptr.API.VideoStreamPlayer_set_autoplay(self, enabled)
}
func (self classVideoStreamPlayer) HasAutoplay() bool {
	return self.ptr.API.VideoStreamPlayer_has_autoplay(self)
}
func (self classVideoStreamPlayer) SetExpand(enable bool) {
	self.ptr.API.VideoStreamPlayer_set_expand(self, enable)
}
func (self classVideoStreamPlayer) HasExpand() bool {
	return self.ptr.API.VideoStreamPlayer_has_expand(self)
}
func (self classVideoStreamPlayer) SetBufferingMsec(msec Int) {
	self.ptr.API.VideoStreamPlayer_set_buffering_msec(self, msec)
}
func (self classVideoStreamPlayer) GetBufferingMsec() Int {
	return self.ptr.API.VideoStreamPlayer_get_buffering_msec(self)
}
func (self classVideoStreamPlayer) SetBus(bus StringName) {
	self.ptr.API.VideoStreamPlayer_set_bus(self, bus)
}
func (self classVideoStreamPlayer) GetBus() StringName {
	return self.ptr.API.VideoStreamPlayer_get_bus(self)
}
func (self classVideoStreamPlayer) GetVideoTexture() Texture2D {
	return self.ptr.API.VideoStreamPlayer_get_video_texture(self)
}

type classVideoStreamTheora struct{ Class[classVideoStreamTheora] }

func (self classVideoStreamTheora) Super() VideoStream {
	var super VideoStream
	super.ptr = self.ptr
	return super
}

func (self classVideoStreamTheora) VideoStream() VideoStream { return self.Super() }

type classViewport struct{ Class[classViewport] }

func (self classViewport) Super() Node { var super Node; super.ptr = self.ptr; return super }

func (self classViewport) Node() Node { return self.Super() }
func (self classViewport) SetWorld2d(world_2d World2D) {
	self.ptr.API.Viewport_set_world_2d(self, world_2d)
}
func (self classViewport) GetWorld2d() World2D {
	return self.ptr.API.Viewport_get_world_2d(self)
}
func (self classViewport) FindWorld2d() World2D {
	return self.ptr.API.Viewport_find_world_2d(self)
}
func (self classViewport) SetCanvasTransform(xform Transform2D) {
	self.ptr.API.Viewport_set_canvas_transform(self, xform)
}
func (self classViewport) GetCanvasTransform() Transform2D {
	return self.ptr.API.Viewport_get_canvas_transform(self)
}
func (self classViewport) SetGlobalCanvasTransform(xform Transform2D) {
	self.ptr.API.Viewport_set_global_canvas_transform(self, xform)
}
func (self classViewport) GetGlobalCanvasTransform() Transform2D {
	return self.ptr.API.Viewport_get_global_canvas_transform(self)
}
func (self classViewport) GetFinalTransform() Transform2D {
	return self.ptr.API.Viewport_get_final_transform(self)
}
func (self classViewport) GetScreenTransform() Transform2D {
	return self.ptr.API.Viewport_get_screen_transform(self)
}
func (self classViewport) GetVisibleRect() Rect2 {
	return self.ptr.API.Viewport_get_visible_rect(self)
}
func (self classViewport) SetTransparentBackground(enable bool) {
	self.ptr.API.Viewport_set_transparent_background(self, enable)
}
func (self classViewport) HasTransparentBackground() bool {
	return self.ptr.API.Viewport_has_transparent_background(self)
}
func (self classViewport) SetUseHdr2d(enable bool) {
	self.ptr.API.Viewport_set_use_hdr_2d(self, enable)
}
func (self classViewport) IsUsingHdr2d() bool {
	return self.ptr.API.Viewport_is_using_hdr_2d(self)
}
func (self classViewport) SetMsaa2d(msaa ViewportMSAA) {
	self.ptr.API.Viewport_set_msaa_2d(self, msaa)
}
func (self classViewport) GetMsaa2d() ViewportMSAA {
	return self.ptr.API.Viewport_get_msaa_2d(self)
}
func (self classViewport) SetMsaa3d(msaa ViewportMSAA) {
	self.ptr.API.Viewport_set_msaa_3d(self, msaa)
}
func (self classViewport) GetMsaa3d() ViewportMSAA {
	return self.ptr.API.Viewport_get_msaa_3d(self)
}
func (self classViewport) SetScreenSpaceAa(screen_space_aa ViewportScreenSpaceAA) {
	self.ptr.API.Viewport_set_screen_space_aa(self, screen_space_aa)
}
func (self classViewport) GetScreenSpaceAa() ViewportScreenSpaceAA {
	return self.ptr.API.Viewport_get_screen_space_aa(self)
}
func (self classViewport) SetUseTaa(enable bool) {
	self.ptr.API.Viewport_set_use_taa(self, enable)
}
func (self classViewport) IsUsingTaa() bool {
	return self.ptr.API.Viewport_is_using_taa(self)
}
func (self classViewport) SetUseDebanding(enable bool) {
	self.ptr.API.Viewport_set_use_debanding(self, enable)
}
func (self classViewport) IsUsingDebanding() bool {
	return self.ptr.API.Viewport_is_using_debanding(self)
}
func (self classViewport) SetUseOcclusionCulling(enable bool) {
	self.ptr.API.Viewport_set_use_occlusion_culling(self, enable)
}
func (self classViewport) IsUsingOcclusionCulling() bool {
	return self.ptr.API.Viewport_is_using_occlusion_culling(self)
}
func (self classViewport) SetDebugDraw(debug_draw ViewportDebugDraw) {
	self.ptr.API.Viewport_set_debug_draw(self, debug_draw)
}
func (self classViewport) GetDebugDraw() ViewportDebugDraw {
	return self.ptr.API.Viewport_get_debug_draw(self)
}
func (self classViewport) GetRenderInfo(atype ViewportRenderInfoType, info ViewportRenderInfo) Int {
	return self.ptr.API.Viewport_get_render_info(self, atype, info)
}
func (self classViewport) GetTexture() ViewportTexture {
	return self.ptr.API.Viewport_get_texture(self)
}
func (self classViewport) SetPhysicsObjectPicking(enable bool) {
	self.ptr.API.Viewport_set_physics_object_picking(self, enable)
}
func (self classViewport) GetPhysicsObjectPicking() bool {
	return self.ptr.API.Viewport_get_physics_object_picking(self)
}
func (self classViewport) SetPhysicsObjectPickingSort(enable bool) {
	self.ptr.API.Viewport_set_physics_object_picking_sort(self, enable)
}
func (self classViewport) GetPhysicsObjectPickingSort() bool {
	return self.ptr.API.Viewport_get_physics_object_picking_sort(self)
}
func (self classViewport) GetViewportRid() RID {
	return self.ptr.API.Viewport_get_viewport_rid(self)
}
func (self classViewport) PushTextInput(text String) {
	self.ptr.API.Viewport_push_text_input(self, text)
}
func (self classViewport) PushInput(event InputEvent, in_local_coords bool) {
	self.ptr.API.Viewport_push_input(self, event, in_local_coords)
}
func (self classViewport) PushUnhandledInput(event InputEvent, in_local_coords bool) {
	self.ptr.API.Viewport_push_unhandled_input(self, event, in_local_coords)
}
func (self classViewport) GetCamera2d() Camera2D {
	return self.ptr.API.Viewport_get_camera_2d(self)
}
func (self classViewport) SetAsAudioListener2d(enable bool) {
	self.ptr.API.Viewport_set_as_audio_listener_2d(self, enable)
}
func (self classViewport) IsAudioListener2d() bool {
	return self.ptr.API.Viewport_is_audio_listener_2d(self)
}
func (self classViewport) GetMousePosition() Vector2 {
	return self.ptr.API.Viewport_get_mouse_position(self)
}
func (self classViewport) WarpMouse(position Vector2) {
	self.ptr.API.Viewport_warp_mouse(self, position)
}
func (self classViewport) UpdateMouseCursorState() {
	self.ptr.API.Viewport_update_mouse_cursor_state(self)
}
func (self classViewport) GuiGetDragData() Variant {
	return self.ptr.API.Viewport_gui_get_drag_data(self)
}
func (self classViewport) GuiIsDragging() bool {
	return self.ptr.API.Viewport_gui_is_dragging(self)
}
func (self classViewport) GuiIsDragSuccessful() bool {
	return self.ptr.API.Viewport_gui_is_drag_successful(self)
}
func (self classViewport) GuiReleaseFocus() {
	self.ptr.API.Viewport_gui_release_focus(self)
}
func (self classViewport) GuiGetFocusOwner() Control {
	return self.ptr.API.Viewport_gui_get_focus_owner(self)
}
func (self classViewport) GuiGetHoveredControl() Control {
	return self.ptr.API.Viewport_gui_get_hovered_control(self)
}
func (self classViewport) SetDisableInput(disable bool) {
	self.ptr.API.Viewport_set_disable_input(self, disable)
}
func (self classViewport) IsInputDisabled() bool {
	return self.ptr.API.Viewport_is_input_disabled(self)
}
func (self classViewport) SetPositionalShadowAtlasSize(size Int) {
	self.ptr.API.Viewport_set_positional_shadow_atlas_size(self, size)
}
func (self classViewport) GetPositionalShadowAtlasSize() Int {
	return self.ptr.API.Viewport_get_positional_shadow_atlas_size(self)
}
func (self classViewport) SetPositionalShadowAtlas16Bits(enable bool) {
	self.ptr.API.Viewport_set_positional_shadow_atlas_16_bits(self, enable)
}
func (self classViewport) GetPositionalShadowAtlas16Bits() bool {
	return self.ptr.API.Viewport_get_positional_shadow_atlas_16_bits(self)
}
func (self classViewport) SetSnapControlsToPixels(enabled bool) {
	self.ptr.API.Viewport_set_snap_controls_to_pixels(self, enabled)
}
func (self classViewport) IsSnapControlsToPixelsEnabled() bool {
	return self.ptr.API.Viewport_is_snap_controls_to_pixels_enabled(self)
}
func (self classViewport) SetSnap2dTransformsToPixel(enabled bool) {
	self.ptr.API.Viewport_set_snap_2d_transforms_to_pixel(self, enabled)
}
func (self classViewport) IsSnap2dTransformsToPixelEnabled() bool {
	return self.ptr.API.Viewport_is_snap_2d_transforms_to_pixel_enabled(self)
}
func (self classViewport) SetSnap2dVerticesToPixel(enabled bool) {
	self.ptr.API.Viewport_set_snap_2d_vertices_to_pixel(self, enabled)
}
func (self classViewport) IsSnap2dVerticesToPixelEnabled() bool {
	return self.ptr.API.Viewport_is_snap_2d_vertices_to_pixel_enabled(self)
}
func (self classViewport) SetPositionalShadowAtlasQuadrantSubdiv(quadrant Int, subdiv ViewportPositionalShadowAtlasQuadrantSubdiv) {
	self.ptr.API.Viewport_set_positional_shadow_atlas_quadrant_subdiv(self, quadrant, subdiv)
}
func (self classViewport) GetPositionalShadowAtlasQuadrantSubdiv(quadrant Int) ViewportPositionalShadowAtlasQuadrantSubdiv {
	return self.ptr.API.Viewport_get_positional_shadow_atlas_quadrant_subdiv(self, quadrant)
}
func (self classViewport) SetInputAsHandled() {
	self.ptr.API.Viewport_set_input_as_handled(self)
}
func (self classViewport) IsInputHandled() bool {
	return self.ptr.API.Viewport_is_input_handled(self)
}
func (self classViewport) SetHandleInputLocally(enable bool) {
	self.ptr.API.Viewport_set_handle_input_locally(self, enable)
}
func (self classViewport) IsHandlingInputLocally() bool {
	return self.ptr.API.Viewport_is_handling_input_locally(self)
}
func (self classViewport) SetDefaultCanvasItemTextureFilter(mode ViewportDefaultCanvasItemTextureFilter) {
	self.ptr.API.Viewport_set_default_canvas_item_texture_filter(self, mode)
}
func (self classViewport) GetDefaultCanvasItemTextureFilter() ViewportDefaultCanvasItemTextureFilter {
	return self.ptr.API.Viewport_get_default_canvas_item_texture_filter(self)
}
func (self classViewport) SetEmbeddingSubwindows(enable bool) {
	self.ptr.API.Viewport_set_embedding_subwindows(self, enable)
}
func (self classViewport) IsEmbeddingSubwindows() bool {
	return self.ptr.API.Viewport_is_embedding_subwindows(self)
}
func (self classViewport) GetEmbeddedSubwindows() ArrayOf[Window] {
	return self.ptr.API.Viewport_get_embedded_subwindows(self)
}
func (self classViewport) SetCanvasCullMask(mask Int) {
	self.ptr.API.Viewport_set_canvas_cull_mask(self, mask)
}
func (self classViewport) GetCanvasCullMask() Int {
	return self.ptr.API.Viewport_get_canvas_cull_mask(self)
}
func (self classViewport) SetCanvasCullMaskBit(layer Int, enable bool) {
	self.ptr.API.Viewport_set_canvas_cull_mask_bit(self, layer, enable)
}
func (self classViewport) GetCanvasCullMaskBit(layer Int) bool {
	return self.ptr.API.Viewport_get_canvas_cull_mask_bit(self, layer)
}
func (self classViewport) SetDefaultCanvasItemTextureRepeat(mode ViewportDefaultCanvasItemTextureRepeat) {
	self.ptr.API.Viewport_set_default_canvas_item_texture_repeat(self, mode)
}
func (self classViewport) GetDefaultCanvasItemTextureRepeat() ViewportDefaultCanvasItemTextureRepeat {
	return self.ptr.API.Viewport_get_default_canvas_item_texture_repeat(self)
}
func (self classViewport) SetSdfOversize(oversize ViewportSDFOversize) {
	self.ptr.API.Viewport_set_sdf_oversize(self, oversize)
}
func (self classViewport) GetSdfOversize() ViewportSDFOversize {
	return self.ptr.API.Viewport_get_sdf_oversize(self)
}
func (self classViewport) SetSdfScale(scale ViewportSDFScale) {
	self.ptr.API.Viewport_set_sdf_scale(self, scale)
}
func (self classViewport) GetSdfScale() ViewportSDFScale {
	return self.ptr.API.Viewport_get_sdf_scale(self)
}
func (self classViewport) SetMeshLodThreshold(pixels Float) {
	self.ptr.API.Viewport_set_mesh_lod_threshold(self, pixels)
}
func (self classViewport) GetMeshLodThreshold() Float {
	return self.ptr.API.Viewport_get_mesh_lod_threshold(self)
}
func (self classViewport) SetWorld3d(world_3d World3D) {
	self.ptr.API.Viewport_set_world_3d(self, world_3d)
}
func (self classViewport) GetWorld3d() World3D {
	return self.ptr.API.Viewport_get_world_3d(self)
}
func (self classViewport) FindWorld3d() World3D {
	return self.ptr.API.Viewport_find_world_3d(self)
}
func (self classViewport) SetUseOwnWorld3d(enable bool) {
	self.ptr.API.Viewport_set_use_own_world_3d(self, enable)
}
func (self classViewport) IsUsingOwnWorld3d() bool {
	return self.ptr.API.Viewport_is_using_own_world_3d(self)
}
func (self classViewport) GetCamera3d() Camera3D {
	return self.ptr.API.Viewport_get_camera_3d(self)
}
func (self classViewport) SetAsAudioListener3d(enable bool) {
	self.ptr.API.Viewport_set_as_audio_listener_3d(self, enable)
}
func (self classViewport) IsAudioListener3d() bool {
	return self.ptr.API.Viewport_is_audio_listener_3d(self)
}
func (self classViewport) SetDisable3d(disable bool) {
	self.ptr.API.Viewport_set_disable_3d(self, disable)
}
func (self classViewport) Is3dDisabled() bool {
	return self.ptr.API.Viewport_is_3d_disabled(self)
}
func (self classViewport) SetUseXr(use bool) {
	self.ptr.API.Viewport_set_use_xr(self, use)
}
func (self classViewport) IsUsingXr() bool {
	return self.ptr.API.Viewport_is_using_xr(self)
}
func (self classViewport) SetScaling3dMode(scaling_3d_mode ViewportScaling3DMode) {
	self.ptr.API.Viewport_set_scaling_3d_mode(self, scaling_3d_mode)
}
func (self classViewport) GetScaling3dMode() ViewportScaling3DMode {
	return self.ptr.API.Viewport_get_scaling_3d_mode(self)
}
func (self classViewport) SetScaling3dScale(scale Float) {
	self.ptr.API.Viewport_set_scaling_3d_scale(self, scale)
}
func (self classViewport) GetScaling3dScale() Float {
	return self.ptr.API.Viewport_get_scaling_3d_scale(self)
}
func (self classViewport) SetFsrSharpness(fsr_sharpness Float) {
	self.ptr.API.Viewport_set_fsr_sharpness(self, fsr_sharpness)
}
func (self classViewport) GetFsrSharpness() Float {
	return self.ptr.API.Viewport_get_fsr_sharpness(self)
}
func (self classViewport) SetTextureMipmapBias(texture_mipmap_bias Float) {
	self.ptr.API.Viewport_set_texture_mipmap_bias(self, texture_mipmap_bias)
}
func (self classViewport) GetTextureMipmapBias() Float {
	return self.ptr.API.Viewport_get_texture_mipmap_bias(self)
}
func (self classViewport) SetVrsMode(mode ViewportVRSMode) {
	self.ptr.API.Viewport_set_vrs_mode(self, mode)
}
func (self classViewport) GetVrsMode() ViewportVRSMode {
	return self.ptr.API.Viewport_get_vrs_mode(self)
}
func (self classViewport) SetVrsTexture(texture Texture2D) {
	self.ptr.API.Viewport_set_vrs_texture(self, texture)
}
func (self classViewport) GetVrsTexture() Texture2D {
	return self.ptr.API.Viewport_get_vrs_texture(self)
}

type classViewportTexture struct{ Class[classViewportTexture] }

func (self classViewportTexture) Super() Texture2D {
	var super Texture2D
	super.ptr = self.ptr
	return super
}

func (self classViewportTexture) Texture2D() Texture2D { return self.Super() }
func (self classViewportTexture) SetViewportPathInScene(path NodePath) {
	self.ptr.API.ViewportTexture_set_viewport_path_in_scene(self, path)
}
func (self classViewportTexture) GetViewportPathInScene() NodePath {
	return self.ptr.API.ViewportTexture_get_viewport_path_in_scene(self)
}

type classVisibleOnScreenEnabler2D struct {
	Class[classVisibleOnScreenEnabler2D]
}

func (self classVisibleOnScreenEnabler2D) Super() VisibleOnScreenNotifier2D {
	var super VisibleOnScreenNotifier2D
	super.ptr = self.ptr
	return super
}

func (self classVisibleOnScreenEnabler2D) VisibleOnScreenNotifier2D() VisibleOnScreenNotifier2D {
	return self.Super()
}
func (self classVisibleOnScreenEnabler2D) SetEnableMode(mode VisibleOnScreenEnabler2DEnableMode) {
	self.ptr.API.VisibleOnScreenEnabler2D_set_enable_mode(self, mode)
}
func (self classVisibleOnScreenEnabler2D) GetEnableMode() VisibleOnScreenEnabler2DEnableMode {
	return self.ptr.API.VisibleOnScreenEnabler2D_get_enable_mode(self)
}
func (self classVisibleOnScreenEnabler2D) SetEnableNodePath(path NodePath) {
	self.ptr.API.VisibleOnScreenEnabler2D_set_enable_node_path(self, path)
}
func (self classVisibleOnScreenEnabler2D) GetEnableNodePath() NodePath {
	return self.ptr.API.VisibleOnScreenEnabler2D_get_enable_node_path(self)
}

type classVisibleOnScreenEnabler3D struct {
	Class[classVisibleOnScreenEnabler3D]
}

func (self classVisibleOnScreenEnabler3D) Super() VisibleOnScreenNotifier3D {
	var super VisibleOnScreenNotifier3D
	super.ptr = self.ptr
	return super
}

func (self classVisibleOnScreenEnabler3D) VisibleOnScreenNotifier3D() VisibleOnScreenNotifier3D {
	return self.Super()
}
func (self classVisibleOnScreenEnabler3D) SetEnableMode(mode VisibleOnScreenEnabler3DEnableMode) {
	self.ptr.API.VisibleOnScreenEnabler3D_set_enable_mode(self, mode)
}
func (self classVisibleOnScreenEnabler3D) GetEnableMode() VisibleOnScreenEnabler3DEnableMode {
	return self.ptr.API.VisibleOnScreenEnabler3D_get_enable_mode(self)
}
func (self classVisibleOnScreenEnabler3D) SetEnableNodePath(path NodePath) {
	self.ptr.API.VisibleOnScreenEnabler3D_set_enable_node_path(self, path)
}
func (self classVisibleOnScreenEnabler3D) GetEnableNodePath() NodePath {
	return self.ptr.API.VisibleOnScreenEnabler3D_get_enable_node_path(self)
}

type classVisibleOnScreenNotifier2D struct {
	Class[classVisibleOnScreenNotifier2D]
}

func (self classVisibleOnScreenNotifier2D) Super() Node2D {
	var super Node2D
	super.ptr = self.ptr
	return super
}

func (self classVisibleOnScreenNotifier2D) Node2D() Node2D { return self.Super() }
func (self classVisibleOnScreenNotifier2D) SetRect(rect Rect2) {
	self.ptr.API.VisibleOnScreenNotifier2D_set_rect(self, rect)
}
func (self classVisibleOnScreenNotifier2D) GetRect() Rect2 {
	return self.ptr.API.VisibleOnScreenNotifier2D_get_rect(self)
}
func (self classVisibleOnScreenNotifier2D) IsOnScreen() bool {
	return self.ptr.API.VisibleOnScreenNotifier2D_is_on_screen(self)
}

type classVisibleOnScreenNotifier3D struct {
	Class[classVisibleOnScreenNotifier3D]
}

func (self classVisibleOnScreenNotifier3D) Super() VisualInstance3D {
	var super VisualInstance3D
	super.ptr = self.ptr
	return super
}

func (self classVisibleOnScreenNotifier3D) VisualInstance3D() VisualInstance3D { return self.Super() }
func (self classVisibleOnScreenNotifier3D) SetAabb(rect AABB) {
	self.ptr.API.VisibleOnScreenNotifier3D_set_aabb(self, rect)
}
func (self classVisibleOnScreenNotifier3D) IsOnScreen() bool {
	return self.ptr.API.VisibleOnScreenNotifier3D_is_on_screen(self)
}

type classVisualInstance3D struct{ Class[classVisualInstance3D] }

func (self classVisualInstance3D) Super() Node3D {
	var super Node3D
	super.ptr = self.ptr
	return super
}

func (self classVisualInstance3D) Node3D() Node3D { return self.Super() }
func (self classVisualInstance3D) SetBase(base RID) {
	self.ptr.API.VisualInstance3D_set_base(self, base)
}
func (self classVisualInstance3D) GetBase() RID {
	return self.ptr.API.VisualInstance3D_get_base(self)
}
func (self classVisualInstance3D) GetInstance() RID {
	return self.ptr.API.VisualInstance3D_get_instance(self)
}
func (self classVisualInstance3D) SetLayerMask(mask Int) {
	self.ptr.API.VisualInstance3D_set_layer_mask(self, mask)
}
func (self classVisualInstance3D) GetLayerMask() Int {
	return self.ptr.API.VisualInstance3D_get_layer_mask(self)
}
func (self classVisualInstance3D) SetLayerMaskValue(layer_number Int, value bool) {
	self.ptr.API.VisualInstance3D_set_layer_mask_value(self, layer_number, value)
}
func (self classVisualInstance3D) GetLayerMaskValue(layer_number Int) bool {
	return self.ptr.API.VisualInstance3D_get_layer_mask_value(self, layer_number)
}
func (self classVisualInstance3D) SetSortingOffset(offset Float) {
	self.ptr.API.VisualInstance3D_set_sorting_offset(self, offset)
}
func (self classVisualInstance3D) GetSortingOffset() Float {
	return self.ptr.API.VisualInstance3D_get_sorting_offset(self)
}
func (self classVisualInstance3D) SetSortingUseAabbCenter(enabled bool) {
	self.ptr.API.VisualInstance3D_set_sorting_use_aabb_center(self, enabled)
}
func (self classVisualInstance3D) IsSortingUseAabbCenter() bool {
	return self.ptr.API.VisualInstance3D_is_sorting_use_aabb_center(self)
}
func (self classVisualInstance3D) GetAabb() AABB {
	return self.ptr.API.VisualInstance3D_get_aabb(self)
}

type classVisualShader struct{ Class[classVisualShader] }

func (self classVisualShader) Super() Shader { var super Shader; super.ptr = self.ptr; return super }

func (self classVisualShader) Shader() Shader { return self.Super() }
func (self classVisualShader) SetMode(mode ShaderMode) {
	self.ptr.API.VisualShader_set_mode(self, mode)
}
func (self classVisualShader) AddNode(atype VisualShaderType, node VisualShaderNode, position Vector2, id Int) {
	self.ptr.API.VisualShader_add_node(self, atype, node, position, id)
}
func (self classVisualShader) GetNode(atype VisualShaderType, id Int) VisualShaderNode {
	return self.ptr.API.VisualShader_get_node(self, atype, id)
}
func (self classVisualShader) SetNodePosition(atype VisualShaderType, id Int, position Vector2) {
	self.ptr.API.VisualShader_set_node_position(self, atype, id, position)
}
func (self classVisualShader) GetNodePosition(atype VisualShaderType, id Int) Vector2 {
	return self.ptr.API.VisualShader_get_node_position(self, atype, id)
}
func (self classVisualShader) GetNodeList(atype VisualShaderType) PackedInt32Array {
	return self.ptr.API.VisualShader_get_node_list(self, atype)
}
func (self classVisualShader) GetValidNodeId(atype VisualShaderType) Int {
	return self.ptr.API.VisualShader_get_valid_node_id(self, atype)
}
func (self classVisualShader) RemoveNode(atype VisualShaderType, id Int) {
	self.ptr.API.VisualShader_remove_node(self, atype, id)
}
func (self classVisualShader) ReplaceNode(atype VisualShaderType, id Int, new_class StringName) {
	self.ptr.API.VisualShader_replace_node(self, atype, id, new_class)
}
func (self classVisualShader) IsNodeConnection(atype VisualShaderType, from_node Int, from_port Int, to_node Int, to_port Int) bool {
	return self.ptr.API.VisualShader_is_node_connection(self, atype, from_node, from_port, to_node, to_port)
}
func (self classVisualShader) CanConnectNodes(atype VisualShaderType, from_node Int, from_port Int, to_node Int, to_port Int) bool {
	return self.ptr.API.VisualShader_can_connect_nodes(self, atype, from_node, from_port, to_node, to_port)
}
func (self classVisualShader) ConnectNodes(atype VisualShaderType, from_node Int, from_port Int, to_node Int, to_port Int) int64 {
	return self.ptr.API.VisualShader_connect_nodes(self, atype, from_node, from_port, to_node, to_port)
}
func (self classVisualShader) DisconnectNodes(atype VisualShaderType, from_node Int, from_port Int, to_node Int, to_port Int) {
	self.ptr.API.VisualShader_disconnect_nodes(self, atype, from_node, from_port, to_node, to_port)
}
func (self classVisualShader) ConnectNodesForced(atype VisualShaderType, from_node Int, from_port Int, to_node Int, to_port Int) {
	self.ptr.API.VisualShader_connect_nodes_forced(self, atype, from_node, from_port, to_node, to_port)
}
func (self classVisualShader) GetNodeConnections(atype VisualShaderType) ArrayOf[Dictionary] {
	return self.ptr.API.VisualShader_get_node_connections(self, atype)
}
func (self classVisualShader) SetGraphOffset(offset Vector2) {
	self.ptr.API.VisualShader_set_graph_offset(self, offset)
}
func (self classVisualShader) GetGraphOffset() Vector2 {
	return self.ptr.API.VisualShader_get_graph_offset(self)
}
func (self classVisualShader) AddVarying(name String, mode VisualShaderVaryingMode, atype VisualShaderVaryingType) {
	self.ptr.API.VisualShader_add_varying(self, name, mode, atype)
}
func (self classVisualShader) RemoveVarying(name String) {
	self.ptr.API.VisualShader_remove_varying(self, name)
}
func (self classVisualShader) HasVarying(name String) bool {
	return self.ptr.API.VisualShader_has_varying(self, name)
}

type classVisualShaderNode struct{ Class[classVisualShaderNode] }

func (self classVisualShaderNode) Super() Resource {
	var super Resource
	super.ptr = self.ptr
	return super
}

func (self classVisualShaderNode) Resource() Resource { return self.Super() }
func (self classVisualShaderNode) GetDefaultInputPort(atype VisualShaderNodePortType) Int {
	return self.ptr.API.VisualShaderNode_get_default_input_port(self, atype)
}
func (self classVisualShaderNode) SetOutputPortForPreview(port Int) {
	self.ptr.API.VisualShaderNode_set_output_port_for_preview(self, port)
}
func (self classVisualShaderNode) GetOutputPortForPreview() Int {
	return self.ptr.API.VisualShaderNode_get_output_port_for_preview(self)
}
func (self classVisualShaderNode) SetInputPortDefaultValue(port Int, value Variant, prev_value Variant) {
	self.ptr.API.VisualShaderNode_set_input_port_default_value(self, port, value, prev_value)
}
func (self classVisualShaderNode) GetInputPortDefaultValue(port Int) Variant {
	return self.ptr.API.VisualShaderNode_get_input_port_default_value(self, port)
}
func (self classVisualShaderNode) RemoveInputPortDefaultValue(port Int) {
	self.ptr.API.VisualShaderNode_remove_input_port_default_value(self, port)
}
func (self classVisualShaderNode) ClearDefaultInputValues() {
	self.ptr.API.VisualShaderNode_clear_default_input_values(self)
}
func (self classVisualShaderNode) SetDefaultInputValues(values Array) {
	self.ptr.API.VisualShaderNode_set_default_input_values(self, values)
}
func (self classVisualShaderNode) GetDefaultInputValues() Array {
	return self.ptr.API.VisualShaderNode_get_default_input_values(self)
}

type classVisualShaderNodeBillboard struct {
	Class[classVisualShaderNodeBillboard]
}

func (self classVisualShaderNodeBillboard) Super() VisualShaderNode {
	var super VisualShaderNode
	super.ptr = self.ptr
	return super
}

func (self classVisualShaderNodeBillboard) VisualShaderNode() VisualShaderNode { return self.Super() }
func (self classVisualShaderNodeBillboard) SetBillboardType(billboard_type VisualShaderNodeBillboardBillboardType) {
	self.ptr.API.VisualShaderNodeBillboard_set_billboard_type(self, billboard_type)
}
func (self classVisualShaderNodeBillboard) GetBillboardType() VisualShaderNodeBillboardBillboardType {
	return self.ptr.API.VisualShaderNodeBillboard_get_billboard_type(self)
}
func (self classVisualShaderNodeBillboard) SetKeepScaleEnabled(enabled bool) {
	self.ptr.API.VisualShaderNodeBillboard_set_keep_scale_enabled(self, enabled)
}
func (self classVisualShaderNodeBillboard) IsKeepScaleEnabled() bool {
	return self.ptr.API.VisualShaderNodeBillboard_is_keep_scale_enabled(self)
}

type classVisualShaderNodeBooleanConstant struct {
	Class[classVisualShaderNodeBooleanConstant]
}

func (self classVisualShaderNodeBooleanConstant) Super() VisualShaderNodeConstant {
	var super VisualShaderNodeConstant
	super.ptr = self.ptr
	return super
}

func (self classVisualShaderNodeBooleanConstant) VisualShaderNodeConstant() VisualShaderNodeConstant {
	return self.Super()
}
func (self classVisualShaderNodeBooleanConstant) SetConstant(constant bool) {
	self.ptr.API.VisualShaderNodeBooleanConstant_set_constant(self, constant)
}
func (self classVisualShaderNodeBooleanConstant) GetConstant() bool {
	return self.ptr.API.VisualShaderNodeBooleanConstant_get_constant(self)
}

type classVisualShaderNodeBooleanParameter struct {
	Class[classVisualShaderNodeBooleanParameter]
}

func (self classVisualShaderNodeBooleanParameter) Super() VisualShaderNodeParameter {
	var super VisualShaderNodeParameter
	super.ptr = self.ptr
	return super
}

func (self classVisualShaderNodeBooleanParameter) VisualShaderNodeParameter() VisualShaderNodeParameter {
	return self.Super()
}
func (self classVisualShaderNodeBooleanParameter) SetDefaultValueEnabled(enabled bool) {
	self.ptr.API.VisualShaderNodeBooleanParameter_set_default_value_enabled(self, enabled)
}
func (self classVisualShaderNodeBooleanParameter) IsDefaultValueEnabled() bool {
	return self.ptr.API.VisualShaderNodeBooleanParameter_is_default_value_enabled(self)
}
func (self classVisualShaderNodeBooleanParameter) SetDefaultValue(value bool) {
	self.ptr.API.VisualShaderNodeBooleanParameter_set_default_value(self, value)
}
func (self classVisualShaderNodeBooleanParameter) GetDefaultValue() bool {
	return self.ptr.API.VisualShaderNodeBooleanParameter_get_default_value(self)
}

type classVisualShaderNodeClamp struct {
	Class[classVisualShaderNodeClamp]
}

func (self classVisualShaderNodeClamp) Super() VisualShaderNode {
	var super VisualShaderNode
	super.ptr = self.ptr
	return super
}

func (self classVisualShaderNodeClamp) VisualShaderNode() VisualShaderNode { return self.Super() }
func (self classVisualShaderNodeClamp) SetOpType(op_type VisualShaderNodeClampOpType) {
	self.ptr.API.VisualShaderNodeClamp_set_op_type(self, op_type)
}
func (self classVisualShaderNodeClamp) GetOpType() VisualShaderNodeClampOpType {
	return self.ptr.API.VisualShaderNodeClamp_get_op_type(self)
}

type classVisualShaderNodeColorConstant struct {
	Class[classVisualShaderNodeColorConstant]
}

func (self classVisualShaderNodeColorConstant) Super() VisualShaderNodeConstant {
	var super VisualShaderNodeConstant
	super.ptr = self.ptr
	return super
}

func (self classVisualShaderNodeColorConstant) VisualShaderNodeConstant() VisualShaderNodeConstant {
	return self.Super()
}
func (self classVisualShaderNodeColorConstant) SetConstant(constant Color) {
	self.ptr.API.VisualShaderNodeColorConstant_set_constant(self, constant)
}
func (self classVisualShaderNodeColorConstant) GetConstant() Color {
	return self.ptr.API.VisualShaderNodeColorConstant_get_constant(self)
}

type classVisualShaderNodeColorFunc struct {
	Class[classVisualShaderNodeColorFunc]
}

func (self classVisualShaderNodeColorFunc) Super() VisualShaderNode {
	var super VisualShaderNode
	super.ptr = self.ptr
	return super
}

func (self classVisualShaderNodeColorFunc) VisualShaderNode() VisualShaderNode { return self.Super() }
func (self classVisualShaderNodeColorFunc) SetFunction(fn VisualShaderNodeColorFuncFunction) {
	self.ptr.API.VisualShaderNodeColorFunc_set_function(self, fn)
}
func (self classVisualShaderNodeColorFunc) GetFunction() VisualShaderNodeColorFuncFunction {
	return self.ptr.API.VisualShaderNodeColorFunc_get_function(self)
}

type classVisualShaderNodeColorOp struct {
	Class[classVisualShaderNodeColorOp]
}

func (self classVisualShaderNodeColorOp) Super() VisualShaderNode {
	var super VisualShaderNode
	super.ptr = self.ptr
	return super
}

func (self classVisualShaderNodeColorOp) VisualShaderNode() VisualShaderNode { return self.Super() }
func (self classVisualShaderNodeColorOp) SetOperator(op VisualShaderNodeColorOpOperator) {
	self.ptr.API.VisualShaderNodeColorOp_set_operator(self, op)
}
func (self classVisualShaderNodeColorOp) GetOperator() VisualShaderNodeColorOpOperator {
	return self.ptr.API.VisualShaderNodeColorOp_get_operator(self)
}

type classVisualShaderNodeColorParameter struct {
	Class[classVisualShaderNodeColorParameter]
}

func (self classVisualShaderNodeColorParameter) Super() VisualShaderNodeParameter {
	var super VisualShaderNodeParameter
	super.ptr = self.ptr
	return super
}

func (self classVisualShaderNodeColorParameter) VisualShaderNodeParameter() VisualShaderNodeParameter {
	return self.Super()
}
func (self classVisualShaderNodeColorParameter) SetDefaultValueEnabled(enabled bool) {
	self.ptr.API.VisualShaderNodeColorParameter_set_default_value_enabled(self, enabled)
}
func (self classVisualShaderNodeColorParameter) IsDefaultValueEnabled() bool {
	return self.ptr.API.VisualShaderNodeColorParameter_is_default_value_enabled(self)
}
func (self classVisualShaderNodeColorParameter) SetDefaultValue(value Color) {
	self.ptr.API.VisualShaderNodeColorParameter_set_default_value(self, value)
}
func (self classVisualShaderNodeColorParameter) GetDefaultValue() Color {
	return self.ptr.API.VisualShaderNodeColorParameter_get_default_value(self)
}

type classVisualShaderNodeComment struct {
	Class[classVisualShaderNodeComment]
}

func (self classVisualShaderNodeComment) Super() VisualShaderNodeResizableBase {
	var super VisualShaderNodeResizableBase
	super.ptr = self.ptr
	return super
}

func (self classVisualShaderNodeComment) VisualShaderNodeResizableBase() VisualShaderNodeResizableBase {
	return self.Super()
}
func (self classVisualShaderNodeComment) SetTitle(title String) {
	self.ptr.API.VisualShaderNodeComment_set_title(self, title)
}
func (self classVisualShaderNodeComment) GetTitle() String {
	return self.ptr.API.VisualShaderNodeComment_get_title(self)
}
func (self classVisualShaderNodeComment) SetDescription(description String) {
	self.ptr.API.VisualShaderNodeComment_set_description(self, description)
}
func (self classVisualShaderNodeComment) GetDescription() String {
	return self.ptr.API.VisualShaderNodeComment_get_description(self)
}

type classVisualShaderNodeCompare struct {
	Class[classVisualShaderNodeCompare]
}

func (self classVisualShaderNodeCompare) Super() VisualShaderNode {
	var super VisualShaderNode
	super.ptr = self.ptr
	return super
}

func (self classVisualShaderNodeCompare) VisualShaderNode() VisualShaderNode { return self.Super() }
func (self classVisualShaderNodeCompare) SetComparisonType(atype VisualShaderNodeCompareComparisonType) {
	self.ptr.API.VisualShaderNodeCompare_set_comparison_type(self, atype)
}
func (self classVisualShaderNodeCompare) GetComparisonType() VisualShaderNodeCompareComparisonType {
	return self.ptr.API.VisualShaderNodeCompare_get_comparison_type(self)
}
func (self classVisualShaderNodeCompare) SetFunction(fn VisualShaderNodeCompareFunction) {
	self.ptr.API.VisualShaderNodeCompare_set_function(self, fn)
}
func (self classVisualShaderNodeCompare) GetFunction() VisualShaderNodeCompareFunction {
	return self.ptr.API.VisualShaderNodeCompare_get_function(self)
}
func (self classVisualShaderNodeCompare) SetCondition(condition VisualShaderNodeCompareCondition) {
	self.ptr.API.VisualShaderNodeCompare_set_condition(self, condition)
}
func (self classVisualShaderNodeCompare) GetCondition() VisualShaderNodeCompareCondition {
	return self.ptr.API.VisualShaderNodeCompare_get_condition(self)
}

type classVisualShaderNodeConstant struct {
	Class[classVisualShaderNodeConstant]
}

func (self classVisualShaderNodeConstant) Super() VisualShaderNode {
	var super VisualShaderNode
	super.ptr = self.ptr
	return super
}

func (self classVisualShaderNodeConstant) VisualShaderNode() VisualShaderNode { return self.Super() }

type classVisualShaderNodeCubemap struct {
	Class[classVisualShaderNodeCubemap]
}

func (self classVisualShaderNodeCubemap) Super() VisualShaderNode {
	var super VisualShaderNode
	super.ptr = self.ptr
	return super
}

func (self classVisualShaderNodeCubemap) VisualShaderNode() VisualShaderNode { return self.Super() }
func (self classVisualShaderNodeCubemap) SetSource(value VisualShaderNodeCubemapSource) {
	self.ptr.API.VisualShaderNodeCubemap_set_source(self, value)
}
func (self classVisualShaderNodeCubemap) GetSource() VisualShaderNodeCubemapSource {
	return self.ptr.API.VisualShaderNodeCubemap_get_source(self)
}
func (self classVisualShaderNodeCubemap) SetCubeMap(value Cubemap) {
	self.ptr.API.VisualShaderNodeCubemap_set_cube_map(self, value)
}
func (self classVisualShaderNodeCubemap) GetCubeMap() Cubemap {
	return self.ptr.API.VisualShaderNodeCubemap_get_cube_map(self)
}
func (self classVisualShaderNodeCubemap) SetTextureType(value VisualShaderNodeCubemapTextureType) {
	self.ptr.API.VisualShaderNodeCubemap_set_texture_type(self, value)
}
func (self classVisualShaderNodeCubemap) GetTextureType() VisualShaderNodeCubemapTextureType {
	return self.ptr.API.VisualShaderNodeCubemap_get_texture_type(self)
}

type classVisualShaderNodeCubemapParameter struct {
	Class[classVisualShaderNodeCubemapParameter]
}

func (self classVisualShaderNodeCubemapParameter) Super() VisualShaderNodeTextureParameter {
	var super VisualShaderNodeTextureParameter
	super.ptr = self.ptr
	return super
}

func (self classVisualShaderNodeCubemapParameter) VisualShaderNodeTextureParameter() VisualShaderNodeTextureParameter {
	return self.Super()
}

type classVisualShaderNodeCurveTexture struct {
	Class[classVisualShaderNodeCurveTexture]
}

func (self classVisualShaderNodeCurveTexture) Super() VisualShaderNodeResizableBase {
	var super VisualShaderNodeResizableBase
	super.ptr = self.ptr
	return super
}

func (self classVisualShaderNodeCurveTexture) VisualShaderNodeResizableBase() VisualShaderNodeResizableBase {
	return self.Super()
}
func (self classVisualShaderNodeCurveTexture) SetTexture(texture CurveTexture) {
	self.ptr.API.VisualShaderNodeCurveTexture_set_texture(self, texture)
}
func (self classVisualShaderNodeCurveTexture) GetTexture() CurveTexture {
	return self.ptr.API.VisualShaderNodeCurveTexture_get_texture(self)
}

type classVisualShaderNodeCurveXYZTexture struct {
	Class[classVisualShaderNodeCurveXYZTexture]
}

func (self classVisualShaderNodeCurveXYZTexture) Super() VisualShaderNodeResizableBase {
	var super VisualShaderNodeResizableBase
	super.ptr = self.ptr
	return super
}

func (self classVisualShaderNodeCurveXYZTexture) VisualShaderNodeResizableBase() VisualShaderNodeResizableBase {
	return self.Super()
}
func (self classVisualShaderNodeCurveXYZTexture) SetTexture(texture CurveXYZTexture) {
	self.ptr.API.VisualShaderNodeCurveXYZTexture_set_texture(self, texture)
}
func (self classVisualShaderNodeCurveXYZTexture) GetTexture() CurveXYZTexture {
	return self.ptr.API.VisualShaderNodeCurveXYZTexture_get_texture(self)
}

type classVisualShaderNodeCustom struct {
	Class[classVisualShaderNodeCustom]
}

func (self classVisualShaderNodeCustom) Super() VisualShaderNode {
	var super VisualShaderNode
	super.ptr = self.ptr
	return super
}

func (self classVisualShaderNodeCustom) VisualShaderNode() VisualShaderNode { return self.Super() }
func (self classVisualShaderNodeCustom) GetOptionIndex(option Int) Int {
	return self.ptr.API.VisualShaderNodeCustom_get_option_index(self, option)
}

type classVisualShaderNodeDerivativeFunc struct {
	Class[classVisualShaderNodeDerivativeFunc]
}

func (self classVisualShaderNodeDerivativeFunc) Super() VisualShaderNode {
	var super VisualShaderNode
	super.ptr = self.ptr
	return super
}

func (self classVisualShaderNodeDerivativeFunc) VisualShaderNode() VisualShaderNode {
	return self.Super()
}
func (self classVisualShaderNodeDerivativeFunc) SetOpType(atype VisualShaderNodeDerivativeFuncOpType) {
	self.ptr.API.VisualShaderNodeDerivativeFunc_set_op_type(self, atype)
}
func (self classVisualShaderNodeDerivativeFunc) GetOpType() VisualShaderNodeDerivativeFuncOpType {
	return self.ptr.API.VisualShaderNodeDerivativeFunc_get_op_type(self)
}
func (self classVisualShaderNodeDerivativeFunc) SetFunction(fn VisualShaderNodeDerivativeFuncFunction) {
	self.ptr.API.VisualShaderNodeDerivativeFunc_set_function(self, fn)
}
func (self classVisualShaderNodeDerivativeFunc) GetFunction() VisualShaderNodeDerivativeFuncFunction {
	return self.ptr.API.VisualShaderNodeDerivativeFunc_get_function(self)
}
func (self classVisualShaderNodeDerivativeFunc) SetPrecision(precision VisualShaderNodeDerivativeFuncPrecision) {
	self.ptr.API.VisualShaderNodeDerivativeFunc_set_precision(self, precision)
}
func (self classVisualShaderNodeDerivativeFunc) GetPrecision() VisualShaderNodeDerivativeFuncPrecision {
	return self.ptr.API.VisualShaderNodeDerivativeFunc_get_precision(self)
}

type classVisualShaderNodeDeterminant struct {
	Class[classVisualShaderNodeDeterminant]
}

func (self classVisualShaderNodeDeterminant) Super() VisualShaderNode {
	var super VisualShaderNode
	super.ptr = self.ptr
	return super
}

func (self classVisualShaderNodeDeterminant) VisualShaderNode() VisualShaderNode { return self.Super() }

type classVisualShaderNodeDistanceFade struct {
	Class[classVisualShaderNodeDistanceFade]
}

func (self classVisualShaderNodeDistanceFade) Super() VisualShaderNode {
	var super VisualShaderNode
	super.ptr = self.ptr
	return super
}

func (self classVisualShaderNodeDistanceFade) VisualShaderNode() VisualShaderNode {
	return self.Super()
}

type classVisualShaderNodeDotProduct struct {
	Class[classVisualShaderNodeDotProduct]
}

func (self classVisualShaderNodeDotProduct) Super() VisualShaderNode {
	var super VisualShaderNode
	super.ptr = self.ptr
	return super
}

func (self classVisualShaderNodeDotProduct) VisualShaderNode() VisualShaderNode { return self.Super() }

type classVisualShaderNodeExpression struct {
	Class[classVisualShaderNodeExpression]
}

func (self classVisualShaderNodeExpression) Super() VisualShaderNodeGroupBase {
	var super VisualShaderNodeGroupBase
	super.ptr = self.ptr
	return super
}

func (self classVisualShaderNodeExpression) VisualShaderNodeGroupBase() VisualShaderNodeGroupBase {
	return self.Super()
}
func (self classVisualShaderNodeExpression) SetExpression(expression String) {
	self.ptr.API.VisualShaderNodeExpression_set_expression(self, expression)
}
func (self classVisualShaderNodeExpression) GetExpression() String {
	return self.ptr.API.VisualShaderNodeExpression_get_expression(self)
}

type classVisualShaderNodeFaceForward struct {
	Class[classVisualShaderNodeFaceForward]
}

func (self classVisualShaderNodeFaceForward) Super() VisualShaderNodeVectorBase {
	var super VisualShaderNodeVectorBase
	super.ptr = self.ptr
	return super
}

func (self classVisualShaderNodeFaceForward) VisualShaderNodeVectorBase() VisualShaderNodeVectorBase {
	return self.Super()
}

type classVisualShaderNodeFloatConstant struct {
	Class[classVisualShaderNodeFloatConstant]
}

func (self classVisualShaderNodeFloatConstant) Super() VisualShaderNodeConstant {
	var super VisualShaderNodeConstant
	super.ptr = self.ptr
	return super
}

func (self classVisualShaderNodeFloatConstant) VisualShaderNodeConstant() VisualShaderNodeConstant {
	return self.Super()
}
func (self classVisualShaderNodeFloatConstant) SetConstant(constant Float) {
	self.ptr.API.VisualShaderNodeFloatConstant_set_constant(self, constant)
}
func (self classVisualShaderNodeFloatConstant) GetConstant() Float {
	return self.ptr.API.VisualShaderNodeFloatConstant_get_constant(self)
}

type classVisualShaderNodeFloatFunc struct {
	Class[classVisualShaderNodeFloatFunc]
}

func (self classVisualShaderNodeFloatFunc) Super() VisualShaderNode {
	var super VisualShaderNode
	super.ptr = self.ptr
	return super
}

func (self classVisualShaderNodeFloatFunc) VisualShaderNode() VisualShaderNode { return self.Super() }
func (self classVisualShaderNodeFloatFunc) SetFunction(fn VisualShaderNodeFloatFuncFunction) {
	self.ptr.API.VisualShaderNodeFloatFunc_set_function(self, fn)
}
func (self classVisualShaderNodeFloatFunc) GetFunction() VisualShaderNodeFloatFuncFunction {
	return self.ptr.API.VisualShaderNodeFloatFunc_get_function(self)
}

type classVisualShaderNodeFloatOp struct {
	Class[classVisualShaderNodeFloatOp]
}

func (self classVisualShaderNodeFloatOp) Super() VisualShaderNode {
	var super VisualShaderNode
	super.ptr = self.ptr
	return super
}

func (self classVisualShaderNodeFloatOp) VisualShaderNode() VisualShaderNode { return self.Super() }
func (self classVisualShaderNodeFloatOp) SetOperator(op VisualShaderNodeFloatOpOperator) {
	self.ptr.API.VisualShaderNodeFloatOp_set_operator(self, op)
}
func (self classVisualShaderNodeFloatOp) GetOperator() VisualShaderNodeFloatOpOperator {
	return self.ptr.API.VisualShaderNodeFloatOp_get_operator(self)
}

type classVisualShaderNodeFloatParameter struct {
	Class[classVisualShaderNodeFloatParameter]
}

func (self classVisualShaderNodeFloatParameter) Super() VisualShaderNodeParameter {
	var super VisualShaderNodeParameter
	super.ptr = self.ptr
	return super
}

func (self classVisualShaderNodeFloatParameter) VisualShaderNodeParameter() VisualShaderNodeParameter {
	return self.Super()
}
func (self classVisualShaderNodeFloatParameter) SetHint(hint VisualShaderNodeFloatParameterHint) {
	self.ptr.API.VisualShaderNodeFloatParameter_set_hint(self, hint)
}
func (self classVisualShaderNodeFloatParameter) GetHint() VisualShaderNodeFloatParameterHint {
	return self.ptr.API.VisualShaderNodeFloatParameter_get_hint(self)
}
func (self classVisualShaderNodeFloatParameter) SetMin(value Float) {
	self.ptr.API.VisualShaderNodeFloatParameter_set_min(self, value)
}
func (self classVisualShaderNodeFloatParameter) GetMin() Float {
	return self.ptr.API.VisualShaderNodeFloatParameter_get_min(self)
}
func (self classVisualShaderNodeFloatParameter) SetMax(value Float) {
	self.ptr.API.VisualShaderNodeFloatParameter_set_max(self, value)
}
func (self classVisualShaderNodeFloatParameter) GetMax() Float {
	return self.ptr.API.VisualShaderNodeFloatParameter_get_max(self)
}
func (self classVisualShaderNodeFloatParameter) SetStep(value Float) {
	self.ptr.API.VisualShaderNodeFloatParameter_set_step(self, value)
}
func (self classVisualShaderNodeFloatParameter) GetStep() Float {
	return self.ptr.API.VisualShaderNodeFloatParameter_get_step(self)
}
func (self classVisualShaderNodeFloatParameter) SetDefaultValueEnabled(enabled bool) {
	self.ptr.API.VisualShaderNodeFloatParameter_set_default_value_enabled(self, enabled)
}
func (self classVisualShaderNodeFloatParameter) IsDefaultValueEnabled() bool {
	return self.ptr.API.VisualShaderNodeFloatParameter_is_default_value_enabled(self)
}
func (self classVisualShaderNodeFloatParameter) SetDefaultValue(value Float) {
	self.ptr.API.VisualShaderNodeFloatParameter_set_default_value(self, value)
}
func (self classVisualShaderNodeFloatParameter) GetDefaultValue() Float {
	return self.ptr.API.VisualShaderNodeFloatParameter_get_default_value(self)
}

type classVisualShaderNodeFresnel struct {
	Class[classVisualShaderNodeFresnel]
}

func (self classVisualShaderNodeFresnel) Super() VisualShaderNode {
	var super VisualShaderNode
	super.ptr = self.ptr
	return super
}

func (self classVisualShaderNodeFresnel) VisualShaderNode() VisualShaderNode { return self.Super() }

type classVisualShaderNodeGlobalExpression struct {
	Class[classVisualShaderNodeGlobalExpression]
}

func (self classVisualShaderNodeGlobalExpression) Super() VisualShaderNodeExpression {
	var super VisualShaderNodeExpression
	super.ptr = self.ptr
	return super
}

func (self classVisualShaderNodeGlobalExpression) VisualShaderNodeExpression() VisualShaderNodeExpression {
	return self.Super()
}

type classVisualShaderNodeGroupBase struct {
	Class[classVisualShaderNodeGroupBase]
}

func (self classVisualShaderNodeGroupBase) Super() VisualShaderNodeResizableBase {
	var super VisualShaderNodeResizableBase
	super.ptr = self.ptr
	return super
}

func (self classVisualShaderNodeGroupBase) VisualShaderNodeResizableBase() VisualShaderNodeResizableBase {
	return self.Super()
}
func (self classVisualShaderNodeGroupBase) SetInputs(inputs String) {
	self.ptr.API.VisualShaderNodeGroupBase_set_inputs(self, inputs)
}
func (self classVisualShaderNodeGroupBase) GetInputs() String {
	return self.ptr.API.VisualShaderNodeGroupBase_get_inputs(self)
}
func (self classVisualShaderNodeGroupBase) SetOutputs(outputs String) {
	self.ptr.API.VisualShaderNodeGroupBase_set_outputs(self, outputs)
}
func (self classVisualShaderNodeGroupBase) GetOutputs() String {
	return self.ptr.API.VisualShaderNodeGroupBase_get_outputs(self)
}
func (self classVisualShaderNodeGroupBase) IsValidPortName(name String) bool {
	return self.ptr.API.VisualShaderNodeGroupBase_is_valid_port_name(self, name)
}
func (self classVisualShaderNodeGroupBase) AddInputPort(id Int, atype Int, name String) {
	self.ptr.API.VisualShaderNodeGroupBase_add_input_port(self, id, atype, name)
}
func (self classVisualShaderNodeGroupBase) RemoveInputPort(id Int) {
	self.ptr.API.VisualShaderNodeGroupBase_remove_input_port(self, id)
}
func (self classVisualShaderNodeGroupBase) GetInputPortCount() Int {
	return self.ptr.API.VisualShaderNodeGroupBase_get_input_port_count(self)
}
func (self classVisualShaderNodeGroupBase) HasInputPort(id Int) bool {
	return self.ptr.API.VisualShaderNodeGroupBase_has_input_port(self, id)
}
func (self classVisualShaderNodeGroupBase) ClearInputPorts() {
	self.ptr.API.VisualShaderNodeGroupBase_clear_input_ports(self)
}
func (self classVisualShaderNodeGroupBase) AddOutputPort(id Int, atype Int, name String) {
	self.ptr.API.VisualShaderNodeGroupBase_add_output_port(self, id, atype, name)
}
func (self classVisualShaderNodeGroupBase) RemoveOutputPort(id Int) {
	self.ptr.API.VisualShaderNodeGroupBase_remove_output_port(self, id)
}
func (self classVisualShaderNodeGroupBase) GetOutputPortCount() Int {
	return self.ptr.API.VisualShaderNodeGroupBase_get_output_port_count(self)
}
func (self classVisualShaderNodeGroupBase) HasOutputPort(id Int) bool {
	return self.ptr.API.VisualShaderNodeGroupBase_has_output_port(self, id)
}
func (self classVisualShaderNodeGroupBase) ClearOutputPorts() {
	self.ptr.API.VisualShaderNodeGroupBase_clear_output_ports(self)
}
func (self classVisualShaderNodeGroupBase) SetInputPortName(id Int, name String) {
	self.ptr.API.VisualShaderNodeGroupBase_set_input_port_name(self, id, name)
}
func (self classVisualShaderNodeGroupBase) SetInputPortType(id Int, atype Int) {
	self.ptr.API.VisualShaderNodeGroupBase_set_input_port_type(self, id, atype)
}
func (self classVisualShaderNodeGroupBase) SetOutputPortName(id Int, name String) {
	self.ptr.API.VisualShaderNodeGroupBase_set_output_port_name(self, id, name)
}
func (self classVisualShaderNodeGroupBase) SetOutputPortType(id Int, atype Int) {
	self.ptr.API.VisualShaderNodeGroupBase_set_output_port_type(self, id, atype)
}
func (self classVisualShaderNodeGroupBase) GetFreeInputPortId() Int {
	return self.ptr.API.VisualShaderNodeGroupBase_get_free_input_port_id(self)
}
func (self classVisualShaderNodeGroupBase) GetFreeOutputPortId() Int {
	return self.ptr.API.VisualShaderNodeGroupBase_get_free_output_port_id(self)
}

type classVisualShaderNodeIf struct{ Class[classVisualShaderNodeIf] }

func (self classVisualShaderNodeIf) Super() VisualShaderNode {
	var super VisualShaderNode
	super.ptr = self.ptr
	return super
}

func (self classVisualShaderNodeIf) VisualShaderNode() VisualShaderNode { return self.Super() }

type classVisualShaderNodeInput struct {
	Class[classVisualShaderNodeInput]
}

func (self classVisualShaderNodeInput) Super() VisualShaderNode {
	var super VisualShaderNode
	super.ptr = self.ptr
	return super
}

func (self classVisualShaderNodeInput) VisualShaderNode() VisualShaderNode { return self.Super() }
func (self classVisualShaderNodeInput) SetInputName(name String) {
	self.ptr.API.VisualShaderNodeInput_set_input_name(self, name)
}
func (self classVisualShaderNodeInput) GetInputName() String {
	return self.ptr.API.VisualShaderNodeInput_get_input_name(self)
}
func (self classVisualShaderNodeInput) GetInputRealName() String {
	return self.ptr.API.VisualShaderNodeInput_get_input_real_name(self)
}

type classVisualShaderNodeIntConstant struct {
	Class[classVisualShaderNodeIntConstant]
}

func (self classVisualShaderNodeIntConstant) Super() VisualShaderNodeConstant {
	var super VisualShaderNodeConstant
	super.ptr = self.ptr
	return super
}

func (self classVisualShaderNodeIntConstant) VisualShaderNodeConstant() VisualShaderNodeConstant {
	return self.Super()
}
func (self classVisualShaderNodeIntConstant) SetConstant(constant Int) {
	self.ptr.API.VisualShaderNodeIntConstant_set_constant(self, constant)
}
func (self classVisualShaderNodeIntConstant) GetConstant() Int {
	return self.ptr.API.VisualShaderNodeIntConstant_get_constant(self)
}

type classVisualShaderNodeIntFunc struct {
	Class[classVisualShaderNodeIntFunc]
}

func (self classVisualShaderNodeIntFunc) Super() VisualShaderNode {
	var super VisualShaderNode
	super.ptr = self.ptr
	return super
}

func (self classVisualShaderNodeIntFunc) VisualShaderNode() VisualShaderNode { return self.Super() }
func (self classVisualShaderNodeIntFunc) SetFunction(fn VisualShaderNodeIntFuncFunction) {
	self.ptr.API.VisualShaderNodeIntFunc_set_function(self, fn)
}
func (self classVisualShaderNodeIntFunc) GetFunction() VisualShaderNodeIntFuncFunction {
	return self.ptr.API.VisualShaderNodeIntFunc_get_function(self)
}

type classVisualShaderNodeIntOp struct {
	Class[classVisualShaderNodeIntOp]
}

func (self classVisualShaderNodeIntOp) Super() VisualShaderNode {
	var super VisualShaderNode
	super.ptr = self.ptr
	return super
}

func (self classVisualShaderNodeIntOp) VisualShaderNode() VisualShaderNode { return self.Super() }
func (self classVisualShaderNodeIntOp) SetOperator(op VisualShaderNodeIntOpOperator) {
	self.ptr.API.VisualShaderNodeIntOp_set_operator(self, op)
}
func (self classVisualShaderNodeIntOp) GetOperator() VisualShaderNodeIntOpOperator {
	return self.ptr.API.VisualShaderNodeIntOp_get_operator(self)
}

type classVisualShaderNodeIntParameter struct {
	Class[classVisualShaderNodeIntParameter]
}

func (self classVisualShaderNodeIntParameter) Super() VisualShaderNodeParameter {
	var super VisualShaderNodeParameter
	super.ptr = self.ptr
	return super
}

func (self classVisualShaderNodeIntParameter) VisualShaderNodeParameter() VisualShaderNodeParameter {
	return self.Super()
}
func (self classVisualShaderNodeIntParameter) SetHint(hint VisualShaderNodeIntParameterHint) {
	self.ptr.API.VisualShaderNodeIntParameter_set_hint(self, hint)
}
func (self classVisualShaderNodeIntParameter) GetHint() VisualShaderNodeIntParameterHint {
	return self.ptr.API.VisualShaderNodeIntParameter_get_hint(self)
}
func (self classVisualShaderNodeIntParameter) SetMin(value Int) {
	self.ptr.API.VisualShaderNodeIntParameter_set_min(self, value)
}
func (self classVisualShaderNodeIntParameter) GetMin() Int {
	return self.ptr.API.VisualShaderNodeIntParameter_get_min(self)
}
func (self classVisualShaderNodeIntParameter) SetMax(value Int) {
	self.ptr.API.VisualShaderNodeIntParameter_set_max(self, value)
}
func (self classVisualShaderNodeIntParameter) GetMax() Int {
	return self.ptr.API.VisualShaderNodeIntParameter_get_max(self)
}
func (self classVisualShaderNodeIntParameter) SetStep(value Int) {
	self.ptr.API.VisualShaderNodeIntParameter_set_step(self, value)
}
func (self classVisualShaderNodeIntParameter) GetStep() Int {
	return self.ptr.API.VisualShaderNodeIntParameter_get_step(self)
}
func (self classVisualShaderNodeIntParameter) SetDefaultValueEnabled(enabled bool) {
	self.ptr.API.VisualShaderNodeIntParameter_set_default_value_enabled(self, enabled)
}
func (self classVisualShaderNodeIntParameter) IsDefaultValueEnabled() bool {
	return self.ptr.API.VisualShaderNodeIntParameter_is_default_value_enabled(self)
}
func (self classVisualShaderNodeIntParameter) SetDefaultValue(value Int) {
	self.ptr.API.VisualShaderNodeIntParameter_set_default_value(self, value)
}
func (self classVisualShaderNodeIntParameter) GetDefaultValue() Int {
	return self.ptr.API.VisualShaderNodeIntParameter_get_default_value(self)
}

type classVisualShaderNodeIs struct{ Class[classVisualShaderNodeIs] }

func (self classVisualShaderNodeIs) Super() VisualShaderNode {
	var super VisualShaderNode
	super.ptr = self.ptr
	return super
}

func (self classVisualShaderNodeIs) VisualShaderNode() VisualShaderNode { return self.Super() }
func (self classVisualShaderNodeIs) SetFunction(fn VisualShaderNodeIsFunction) {
	self.ptr.API.VisualShaderNodeIs_set_function(self, fn)
}
func (self classVisualShaderNodeIs) GetFunction() VisualShaderNodeIsFunction {
	return self.ptr.API.VisualShaderNodeIs_get_function(self)
}

type classVisualShaderNodeLinearSceneDepth struct {
	Class[classVisualShaderNodeLinearSceneDepth]
}

func (self classVisualShaderNodeLinearSceneDepth) Super() VisualShaderNode {
	var super VisualShaderNode
	super.ptr = self.ptr
	return super
}

func (self classVisualShaderNodeLinearSceneDepth) VisualShaderNode() VisualShaderNode {
	return self.Super()
}

type classVisualShaderNodeMix struct {
	Class[classVisualShaderNodeMix]
}

func (self classVisualShaderNodeMix) Super() VisualShaderNode {
	var super VisualShaderNode
	super.ptr = self.ptr
	return super
}

func (self classVisualShaderNodeMix) VisualShaderNode() VisualShaderNode { return self.Super() }
func (self classVisualShaderNodeMix) SetOpType(op_type VisualShaderNodeMixOpType) {
	self.ptr.API.VisualShaderNodeMix_set_op_type(self, op_type)
}
func (self classVisualShaderNodeMix) GetOpType() VisualShaderNodeMixOpType {
	return self.ptr.API.VisualShaderNodeMix_get_op_type(self)
}

type classVisualShaderNodeMultiplyAdd struct {
	Class[classVisualShaderNodeMultiplyAdd]
}

func (self classVisualShaderNodeMultiplyAdd) Super() VisualShaderNode {
	var super VisualShaderNode
	super.ptr = self.ptr
	return super
}

func (self classVisualShaderNodeMultiplyAdd) VisualShaderNode() VisualShaderNode { return self.Super() }
func (self classVisualShaderNodeMultiplyAdd) SetOpType(atype VisualShaderNodeMultiplyAddOpType) {
	self.ptr.API.VisualShaderNodeMultiplyAdd_set_op_type(self, atype)
}
func (self classVisualShaderNodeMultiplyAdd) GetOpType() VisualShaderNodeMultiplyAddOpType {
	return self.ptr.API.VisualShaderNodeMultiplyAdd_get_op_type(self)
}

type classVisualShaderNodeOuterProduct struct {
	Class[classVisualShaderNodeOuterProduct]
}

func (self classVisualShaderNodeOuterProduct) Super() VisualShaderNode {
	var super VisualShaderNode
	super.ptr = self.ptr
	return super
}

func (self classVisualShaderNodeOuterProduct) VisualShaderNode() VisualShaderNode {
	return self.Super()
}

type classVisualShaderNodeOutput struct {
	Class[classVisualShaderNodeOutput]
}

func (self classVisualShaderNodeOutput) Super() VisualShaderNode {
	var super VisualShaderNode
	super.ptr = self.ptr
	return super
}

func (self classVisualShaderNodeOutput) VisualShaderNode() VisualShaderNode { return self.Super() }

type classVisualShaderNodeParameter struct {
	Class[classVisualShaderNodeParameter]
}

func (self classVisualShaderNodeParameter) Super() VisualShaderNode {
	var super VisualShaderNode
	super.ptr = self.ptr
	return super
}

func (self classVisualShaderNodeParameter) VisualShaderNode() VisualShaderNode { return self.Super() }
func (self classVisualShaderNodeParameter) SetParameterName(name String) {
	self.ptr.API.VisualShaderNodeParameter_set_parameter_name(self, name)
}
func (self classVisualShaderNodeParameter) GetParameterName() String {
	return self.ptr.API.VisualShaderNodeParameter_get_parameter_name(self)
}
func (self classVisualShaderNodeParameter) SetQualifier(qualifier VisualShaderNodeParameterQualifier) {
	self.ptr.API.VisualShaderNodeParameter_set_qualifier(self, qualifier)
}
func (self classVisualShaderNodeParameter) GetQualifier() VisualShaderNodeParameterQualifier {
	return self.ptr.API.VisualShaderNodeParameter_get_qualifier(self)
}

type classVisualShaderNodeParameterRef struct {
	Class[classVisualShaderNodeParameterRef]
}

func (self classVisualShaderNodeParameterRef) Super() VisualShaderNode {
	var super VisualShaderNode
	super.ptr = self.ptr
	return super
}

func (self classVisualShaderNodeParameterRef) VisualShaderNode() VisualShaderNode {
	return self.Super()
}
func (self classVisualShaderNodeParameterRef) SetParameterName(name String) {
	self.ptr.API.VisualShaderNodeParameterRef_set_parameter_name(self, name)
}
func (self classVisualShaderNodeParameterRef) GetParameterName() String {
	return self.ptr.API.VisualShaderNodeParameterRef_get_parameter_name(self)
}

type classVisualShaderNodeParticleAccelerator struct {
	Class[classVisualShaderNodeParticleAccelerator]
}

func (self classVisualShaderNodeParticleAccelerator) Super() VisualShaderNode {
	var super VisualShaderNode
	super.ptr = self.ptr
	return super
}

func (self classVisualShaderNodeParticleAccelerator) VisualShaderNode() VisualShaderNode {
	return self.Super()
}
func (self classVisualShaderNodeParticleAccelerator) SetMode(mode VisualShaderNodeParticleAcceleratorMode) {
	self.ptr.API.VisualShaderNodeParticleAccelerator_set_mode(self, mode)
}
func (self classVisualShaderNodeParticleAccelerator) GetMode() VisualShaderNodeParticleAcceleratorMode {
	return self.ptr.API.VisualShaderNodeParticleAccelerator_get_mode(self)
}

type classVisualShaderNodeParticleBoxEmitter struct {
	Class[classVisualShaderNodeParticleBoxEmitter]
}

func (self classVisualShaderNodeParticleBoxEmitter) Super() VisualShaderNodeParticleEmitter {
	var super VisualShaderNodeParticleEmitter
	super.ptr = self.ptr
	return super
}

func (self classVisualShaderNodeParticleBoxEmitter) VisualShaderNodeParticleEmitter() VisualShaderNodeParticleEmitter {
	return self.Super()
}

type classVisualShaderNodeParticleConeVelocity struct {
	Class[classVisualShaderNodeParticleConeVelocity]
}

func (self classVisualShaderNodeParticleConeVelocity) Super() VisualShaderNode {
	var super VisualShaderNode
	super.ptr = self.ptr
	return super
}

func (self classVisualShaderNodeParticleConeVelocity) VisualShaderNode() VisualShaderNode {
	return self.Super()
}

type classVisualShaderNodeParticleEmit struct {
	Class[classVisualShaderNodeParticleEmit]
}

func (self classVisualShaderNodeParticleEmit) Super() VisualShaderNode {
	var super VisualShaderNode
	super.ptr = self.ptr
	return super
}

func (self classVisualShaderNodeParticleEmit) VisualShaderNode() VisualShaderNode {
	return self.Super()
}
func (self classVisualShaderNodeParticleEmit) SetFlags(flags VisualShaderNodeParticleEmitEmitFlags) {
	self.ptr.API.VisualShaderNodeParticleEmit_set_flags(self, flags)
}
func (self classVisualShaderNodeParticleEmit) GetFlags() VisualShaderNodeParticleEmitEmitFlags {
	return self.ptr.API.VisualShaderNodeParticleEmit_get_flags(self)
}

type classVisualShaderNodeParticleEmitter struct {
	Class[classVisualShaderNodeParticleEmitter]
}

func (self classVisualShaderNodeParticleEmitter) Super() VisualShaderNode {
	var super VisualShaderNode
	super.ptr = self.ptr
	return super
}

func (self classVisualShaderNodeParticleEmitter) VisualShaderNode() VisualShaderNode {
	return self.Super()
}
func (self classVisualShaderNodeParticleEmitter) SetMode2d(enabled bool) {
	self.ptr.API.VisualShaderNodeParticleEmitter_set_mode_2d(self, enabled)
}
func (self classVisualShaderNodeParticleEmitter) IsMode2d() bool {
	return self.ptr.API.VisualShaderNodeParticleEmitter_is_mode_2d(self)
}

type classVisualShaderNodeParticleMeshEmitter struct {
	Class[classVisualShaderNodeParticleMeshEmitter]
}

func (self classVisualShaderNodeParticleMeshEmitter) Super() VisualShaderNodeParticleEmitter {
	var super VisualShaderNodeParticleEmitter
	super.ptr = self.ptr
	return super
}

func (self classVisualShaderNodeParticleMeshEmitter) VisualShaderNodeParticleEmitter() VisualShaderNodeParticleEmitter {
	return self.Super()
}
func (self classVisualShaderNodeParticleMeshEmitter) SetMesh(mesh Mesh) {
	self.ptr.API.VisualShaderNodeParticleMeshEmitter_set_mesh(self, mesh)
}
func (self classVisualShaderNodeParticleMeshEmitter) GetMesh() Mesh {
	return self.ptr.API.VisualShaderNodeParticleMeshEmitter_get_mesh(self)
}
func (self classVisualShaderNodeParticleMeshEmitter) SetUseAllSurfaces(enabled bool) {
	self.ptr.API.VisualShaderNodeParticleMeshEmitter_set_use_all_surfaces(self, enabled)
}
func (self classVisualShaderNodeParticleMeshEmitter) IsUseAllSurfaces() bool {
	return self.ptr.API.VisualShaderNodeParticleMeshEmitter_is_use_all_surfaces(self)
}
func (self classVisualShaderNodeParticleMeshEmitter) SetSurfaceIndex(surface_index Int) {
	self.ptr.API.VisualShaderNodeParticleMeshEmitter_set_surface_index(self, surface_index)
}
func (self classVisualShaderNodeParticleMeshEmitter) GetSurfaceIndex() Int {
	return self.ptr.API.VisualShaderNodeParticleMeshEmitter_get_surface_index(self)
}

type classVisualShaderNodeParticleMultiplyByAxisAngle struct {
	Class[classVisualShaderNodeParticleMultiplyByAxisAngle]
}

func (self classVisualShaderNodeParticleMultiplyByAxisAngle) Super() VisualShaderNode {
	var super VisualShaderNode
	super.ptr = self.ptr
	return super
}

func (self classVisualShaderNodeParticleMultiplyByAxisAngle) VisualShaderNode() VisualShaderNode {
	return self.Super()
}
func (self classVisualShaderNodeParticleMultiplyByAxisAngle) SetDegreesMode(enabled bool) {
	self.ptr.API.VisualShaderNodeParticleMultiplyByAxisAngle_set_degrees_mode(self, enabled)
}
func (self classVisualShaderNodeParticleMultiplyByAxisAngle) IsDegreesMode() bool {
	return self.ptr.API.VisualShaderNodeParticleMultiplyByAxisAngle_is_degrees_mode(self)
}

type classVisualShaderNodeParticleOutput struct {
	Class[classVisualShaderNodeParticleOutput]
}

func (self classVisualShaderNodeParticleOutput) Super() VisualShaderNodeOutput {
	var super VisualShaderNodeOutput
	super.ptr = self.ptr
	return super
}

func (self classVisualShaderNodeParticleOutput) VisualShaderNodeOutput() VisualShaderNodeOutput {
	return self.Super()
}

type classVisualShaderNodeParticleRandomness struct {
	Class[classVisualShaderNodeParticleRandomness]
}

func (self classVisualShaderNodeParticleRandomness) Super() VisualShaderNode {
	var super VisualShaderNode
	super.ptr = self.ptr
	return super
}

func (self classVisualShaderNodeParticleRandomness) VisualShaderNode() VisualShaderNode {
	return self.Super()
}
func (self classVisualShaderNodeParticleRandomness) SetOpType(atype VisualShaderNodeParticleRandomnessOpType) {
	self.ptr.API.VisualShaderNodeParticleRandomness_set_op_type(self, atype)
}
func (self classVisualShaderNodeParticleRandomness) GetOpType() VisualShaderNodeParticleRandomnessOpType {
	return self.ptr.API.VisualShaderNodeParticleRandomness_get_op_type(self)
}

type classVisualShaderNodeParticleRingEmitter struct {
	Class[classVisualShaderNodeParticleRingEmitter]
}

func (self classVisualShaderNodeParticleRingEmitter) Super() VisualShaderNodeParticleEmitter {
	var super VisualShaderNodeParticleEmitter
	super.ptr = self.ptr
	return super
}

func (self classVisualShaderNodeParticleRingEmitter) VisualShaderNodeParticleEmitter() VisualShaderNodeParticleEmitter {
	return self.Super()
}

type classVisualShaderNodeParticleSphereEmitter struct {
	Class[classVisualShaderNodeParticleSphereEmitter]
}

func (self classVisualShaderNodeParticleSphereEmitter) Super() VisualShaderNodeParticleEmitter {
	var super VisualShaderNodeParticleEmitter
	super.ptr = self.ptr
	return super
}

func (self classVisualShaderNodeParticleSphereEmitter) VisualShaderNodeParticleEmitter() VisualShaderNodeParticleEmitter {
	return self.Super()
}

type classVisualShaderNodeProximityFade struct {
	Class[classVisualShaderNodeProximityFade]
}

func (self classVisualShaderNodeProximityFade) Super() VisualShaderNode {
	var super VisualShaderNode
	super.ptr = self.ptr
	return super
}

func (self classVisualShaderNodeProximityFade) VisualShaderNode() VisualShaderNode {
	return self.Super()
}

type classVisualShaderNodeRandomRange struct {
	Class[classVisualShaderNodeRandomRange]
}

func (self classVisualShaderNodeRandomRange) Super() VisualShaderNode {
	var super VisualShaderNode
	super.ptr = self.ptr
	return super
}

func (self classVisualShaderNodeRandomRange) VisualShaderNode() VisualShaderNode { return self.Super() }

type classVisualShaderNodeRemap struct {
	Class[classVisualShaderNodeRemap]
}

func (self classVisualShaderNodeRemap) Super() VisualShaderNode {
	var super VisualShaderNode
	super.ptr = self.ptr
	return super
}

func (self classVisualShaderNodeRemap) VisualShaderNode() VisualShaderNode { return self.Super() }

type classVisualShaderNodeResizableBase struct {
	Class[classVisualShaderNodeResizableBase]
}

func (self classVisualShaderNodeResizableBase) Super() VisualShaderNode {
	var super VisualShaderNode
	super.ptr = self.ptr
	return super
}

func (self classVisualShaderNodeResizableBase) VisualShaderNode() VisualShaderNode {
	return self.Super()
}
func (self classVisualShaderNodeResizableBase) SetSize(size Vector2) {
	self.ptr.API.VisualShaderNodeResizableBase_set_size(self, size)
}
func (self classVisualShaderNodeResizableBase) GetSize() Vector2 {
	return self.ptr.API.VisualShaderNodeResizableBase_get_size(self)
}

type classVisualShaderNodeRotationByAxis struct {
	Class[classVisualShaderNodeRotationByAxis]
}

func (self classVisualShaderNodeRotationByAxis) Super() VisualShaderNode {
	var super VisualShaderNode
	super.ptr = self.ptr
	return super
}

func (self classVisualShaderNodeRotationByAxis) VisualShaderNode() VisualShaderNode {
	return self.Super()
}

type classVisualShaderNodeSDFRaymarch struct {
	Class[classVisualShaderNodeSDFRaymarch]
}

func (self classVisualShaderNodeSDFRaymarch) Super() VisualShaderNode {
	var super VisualShaderNode
	super.ptr = self.ptr
	return super
}

func (self classVisualShaderNodeSDFRaymarch) VisualShaderNode() VisualShaderNode { return self.Super() }

type classVisualShaderNodeSDFToScreenUV struct {
	Class[classVisualShaderNodeSDFToScreenUV]
}

func (self classVisualShaderNodeSDFToScreenUV) Super() VisualShaderNode {
	var super VisualShaderNode
	super.ptr = self.ptr
	return super
}

func (self classVisualShaderNodeSDFToScreenUV) VisualShaderNode() VisualShaderNode {
	return self.Super()
}

type classVisualShaderNodeSample3D struct {
	Class[classVisualShaderNodeSample3D]
}

func (self classVisualShaderNodeSample3D) Super() VisualShaderNode {
	var super VisualShaderNode
	super.ptr = self.ptr
	return super
}

func (self classVisualShaderNodeSample3D) VisualShaderNode() VisualShaderNode { return self.Super() }
func (self classVisualShaderNodeSample3D) SetSource(value VisualShaderNodeSample3DSource) {
	self.ptr.API.VisualShaderNodeSample3D_set_source(self, value)
}
func (self classVisualShaderNodeSample3D) GetSource() VisualShaderNodeSample3DSource {
	return self.ptr.API.VisualShaderNodeSample3D_get_source(self)
}

type classVisualShaderNodeScreenNormalWorldSpace struct {
	Class[classVisualShaderNodeScreenNormalWorldSpace]
}

func (self classVisualShaderNodeScreenNormalWorldSpace) Super() VisualShaderNode {
	var super VisualShaderNode
	super.ptr = self.ptr
	return super
}

func (self classVisualShaderNodeScreenNormalWorldSpace) VisualShaderNode() VisualShaderNode {
	return self.Super()
}

type classVisualShaderNodeScreenUVToSDF struct {
	Class[classVisualShaderNodeScreenUVToSDF]
}

func (self classVisualShaderNodeScreenUVToSDF) Super() VisualShaderNode {
	var super VisualShaderNode
	super.ptr = self.ptr
	return super
}

func (self classVisualShaderNodeScreenUVToSDF) VisualShaderNode() VisualShaderNode {
	return self.Super()
}

type classVisualShaderNodeSmoothStep struct {
	Class[classVisualShaderNodeSmoothStep]
}

func (self classVisualShaderNodeSmoothStep) Super() VisualShaderNode {
	var super VisualShaderNode
	super.ptr = self.ptr
	return super
}

func (self classVisualShaderNodeSmoothStep) VisualShaderNode() VisualShaderNode { return self.Super() }
func (self classVisualShaderNodeSmoothStep) SetOpType(op_type VisualShaderNodeSmoothStepOpType) {
	self.ptr.API.VisualShaderNodeSmoothStep_set_op_type(self, op_type)
}
func (self classVisualShaderNodeSmoothStep) GetOpType() VisualShaderNodeSmoothStepOpType {
	return self.ptr.API.VisualShaderNodeSmoothStep_get_op_type(self)
}

type classVisualShaderNodeStep struct {
	Class[classVisualShaderNodeStep]
}

func (self classVisualShaderNodeStep) Super() VisualShaderNode {
	var super VisualShaderNode
	super.ptr = self.ptr
	return super
}

func (self classVisualShaderNodeStep) VisualShaderNode() VisualShaderNode { return self.Super() }
func (self classVisualShaderNodeStep) SetOpType(op_type VisualShaderNodeStepOpType) {
	self.ptr.API.VisualShaderNodeStep_set_op_type(self, op_type)
}
func (self classVisualShaderNodeStep) GetOpType() VisualShaderNodeStepOpType {
	return self.ptr.API.VisualShaderNodeStep_get_op_type(self)
}

type classVisualShaderNodeSwitch struct {
	Class[classVisualShaderNodeSwitch]
}

func (self classVisualShaderNodeSwitch) Super() VisualShaderNode {
	var super VisualShaderNode
	super.ptr = self.ptr
	return super
}

func (self classVisualShaderNodeSwitch) VisualShaderNode() VisualShaderNode { return self.Super() }
func (self classVisualShaderNodeSwitch) SetOpType(atype VisualShaderNodeSwitchOpType) {
	self.ptr.API.VisualShaderNodeSwitch_set_op_type(self, atype)
}
func (self classVisualShaderNodeSwitch) GetOpType() VisualShaderNodeSwitchOpType {
	return self.ptr.API.VisualShaderNodeSwitch_get_op_type(self)
}

type classVisualShaderNodeTexture struct {
	Class[classVisualShaderNodeTexture]
}

func (self classVisualShaderNodeTexture) Super() VisualShaderNode {
	var super VisualShaderNode
	super.ptr = self.ptr
	return super
}

func (self classVisualShaderNodeTexture) VisualShaderNode() VisualShaderNode { return self.Super() }
func (self classVisualShaderNodeTexture) SetSource(value VisualShaderNodeTextureSource) {
	self.ptr.API.VisualShaderNodeTexture_set_source(self, value)
}
func (self classVisualShaderNodeTexture) GetSource() VisualShaderNodeTextureSource {
	return self.ptr.API.VisualShaderNodeTexture_get_source(self)
}
func (self classVisualShaderNodeTexture) SetTexture(value Texture2D) {
	self.ptr.API.VisualShaderNodeTexture_set_texture(self, value)
}
func (self classVisualShaderNodeTexture) GetTexture() Texture2D {
	return self.ptr.API.VisualShaderNodeTexture_get_texture(self)
}
func (self classVisualShaderNodeTexture) SetTextureType(value VisualShaderNodeTextureTextureType) {
	self.ptr.API.VisualShaderNodeTexture_set_texture_type(self, value)
}
func (self classVisualShaderNodeTexture) GetTextureType() VisualShaderNodeTextureTextureType {
	return self.ptr.API.VisualShaderNodeTexture_get_texture_type(self)
}

type classVisualShaderNodeTexture2DArray struct {
	Class[classVisualShaderNodeTexture2DArray]
}

func (self classVisualShaderNodeTexture2DArray) Super() VisualShaderNodeSample3D {
	var super VisualShaderNodeSample3D
	super.ptr = self.ptr
	return super
}

func (self classVisualShaderNodeTexture2DArray) VisualShaderNodeSample3D() VisualShaderNodeSample3D {
	return self.Super()
}
func (self classVisualShaderNodeTexture2DArray) SetTextureArray(value Texture2DArray) {
	self.ptr.API.VisualShaderNodeTexture2DArray_set_texture_array(self, value)
}
func (self classVisualShaderNodeTexture2DArray) GetTextureArray() Texture2DArray {
	return self.ptr.API.VisualShaderNodeTexture2DArray_get_texture_array(self)
}

type classVisualShaderNodeTexture2DArrayParameter struct {
	Class[classVisualShaderNodeTexture2DArrayParameter]
}

func (self classVisualShaderNodeTexture2DArrayParameter) Super() VisualShaderNodeTextureParameter {
	var super VisualShaderNodeTextureParameter
	super.ptr = self.ptr
	return super
}

func (self classVisualShaderNodeTexture2DArrayParameter) VisualShaderNodeTextureParameter() VisualShaderNodeTextureParameter {
	return self.Super()
}

type classVisualShaderNodeTexture2DParameter struct {
	Class[classVisualShaderNodeTexture2DParameter]
}

func (self classVisualShaderNodeTexture2DParameter) Super() VisualShaderNodeTextureParameter {
	var super VisualShaderNodeTextureParameter
	super.ptr = self.ptr
	return super
}

func (self classVisualShaderNodeTexture2DParameter) VisualShaderNodeTextureParameter() VisualShaderNodeTextureParameter {
	return self.Super()
}

type classVisualShaderNodeTexture3D struct {
	Class[classVisualShaderNodeTexture3D]
}

func (self classVisualShaderNodeTexture3D) Super() VisualShaderNodeSample3D {
	var super VisualShaderNodeSample3D
	super.ptr = self.ptr
	return super
}

func (self classVisualShaderNodeTexture3D) VisualShaderNodeSample3D() VisualShaderNodeSample3D {
	return self.Super()
}
func (self classVisualShaderNodeTexture3D) SetTexture(value Texture3D) {
	self.ptr.API.VisualShaderNodeTexture3D_set_texture(self, value)
}
func (self classVisualShaderNodeTexture3D) GetTexture() Texture3D {
	return self.ptr.API.VisualShaderNodeTexture3D_get_texture(self)
}

type classVisualShaderNodeTexture3DParameter struct {
	Class[classVisualShaderNodeTexture3DParameter]
}

func (self classVisualShaderNodeTexture3DParameter) Super() VisualShaderNodeTextureParameter {
	var super VisualShaderNodeTextureParameter
	super.ptr = self.ptr
	return super
}

func (self classVisualShaderNodeTexture3DParameter) VisualShaderNodeTextureParameter() VisualShaderNodeTextureParameter {
	return self.Super()
}

type classVisualShaderNodeTextureParameter struct {
	Class[classVisualShaderNodeTextureParameter]
}

func (self classVisualShaderNodeTextureParameter) Super() VisualShaderNodeParameter {
	var super VisualShaderNodeParameter
	super.ptr = self.ptr
	return super
}

func (self classVisualShaderNodeTextureParameter) VisualShaderNodeParameter() VisualShaderNodeParameter {
	return self.Super()
}
func (self classVisualShaderNodeTextureParameter) SetTextureType(atype VisualShaderNodeTextureParameterTextureType) {
	self.ptr.API.VisualShaderNodeTextureParameter_set_texture_type(self, atype)
}
func (self classVisualShaderNodeTextureParameter) GetTextureType() VisualShaderNodeTextureParameterTextureType {
	return self.ptr.API.VisualShaderNodeTextureParameter_get_texture_type(self)
}
func (self classVisualShaderNodeTextureParameter) SetColorDefault(color VisualShaderNodeTextureParameterColorDefault) {
	self.ptr.API.VisualShaderNodeTextureParameter_set_color_default(self, color)
}
func (self classVisualShaderNodeTextureParameter) GetColorDefault() VisualShaderNodeTextureParameterColorDefault {
	return self.ptr.API.VisualShaderNodeTextureParameter_get_color_default(self)
}
func (self classVisualShaderNodeTextureParameter) SetTextureFilter(filter VisualShaderNodeTextureParameterTextureFilter) {
	self.ptr.API.VisualShaderNodeTextureParameter_set_texture_filter(self, filter)
}
func (self classVisualShaderNodeTextureParameter) GetTextureFilter() VisualShaderNodeTextureParameterTextureFilter {
	return self.ptr.API.VisualShaderNodeTextureParameter_get_texture_filter(self)
}
func (self classVisualShaderNodeTextureParameter) SetTextureRepeat(repeat VisualShaderNodeTextureParameterTextureRepeat) {
	self.ptr.API.VisualShaderNodeTextureParameter_set_texture_repeat(self, repeat)
}
func (self classVisualShaderNodeTextureParameter) GetTextureRepeat() VisualShaderNodeTextureParameterTextureRepeat {
	return self.ptr.API.VisualShaderNodeTextureParameter_get_texture_repeat(self)
}
func (self classVisualShaderNodeTextureParameter) SetTextureSource(source VisualShaderNodeTextureParameterTextureSource) {
	self.ptr.API.VisualShaderNodeTextureParameter_set_texture_source(self, source)
}
func (self classVisualShaderNodeTextureParameter) GetTextureSource() VisualShaderNodeTextureParameterTextureSource {
	return self.ptr.API.VisualShaderNodeTextureParameter_get_texture_source(self)
}

type classVisualShaderNodeTextureParameterTriplanar struct {
	Class[classVisualShaderNodeTextureParameterTriplanar]
}

func (self classVisualShaderNodeTextureParameterTriplanar) Super() VisualShaderNodeTextureParameter {
	var super VisualShaderNodeTextureParameter
	super.ptr = self.ptr
	return super
}

func (self classVisualShaderNodeTextureParameterTriplanar) VisualShaderNodeTextureParameter() VisualShaderNodeTextureParameter {
	return self.Super()
}

type classVisualShaderNodeTextureSDF struct {
	Class[classVisualShaderNodeTextureSDF]
}

func (self classVisualShaderNodeTextureSDF) Super() VisualShaderNode {
	var super VisualShaderNode
	super.ptr = self.ptr
	return super
}

func (self classVisualShaderNodeTextureSDF) VisualShaderNode() VisualShaderNode { return self.Super() }

type classVisualShaderNodeTextureSDFNormal struct {
	Class[classVisualShaderNodeTextureSDFNormal]
}

func (self classVisualShaderNodeTextureSDFNormal) Super() VisualShaderNode {
	var super VisualShaderNode
	super.ptr = self.ptr
	return super
}

func (self classVisualShaderNodeTextureSDFNormal) VisualShaderNode() VisualShaderNode {
	return self.Super()
}

type classVisualShaderNodeTransformCompose struct {
	Class[classVisualShaderNodeTransformCompose]
}

func (self classVisualShaderNodeTransformCompose) Super() VisualShaderNode {
	var super VisualShaderNode
	super.ptr = self.ptr
	return super
}

func (self classVisualShaderNodeTransformCompose) VisualShaderNode() VisualShaderNode {
	return self.Super()
}

type classVisualShaderNodeTransformConstant struct {
	Class[classVisualShaderNodeTransformConstant]
}

func (self classVisualShaderNodeTransformConstant) Super() VisualShaderNodeConstant {
	var super VisualShaderNodeConstant
	super.ptr = self.ptr
	return super
}

func (self classVisualShaderNodeTransformConstant) VisualShaderNodeConstant() VisualShaderNodeConstant {
	return self.Super()
}
func (self classVisualShaderNodeTransformConstant) SetConstant(constant Transform3D) {
	self.ptr.API.VisualShaderNodeTransformConstant_set_constant(self, constant)
}
func (self classVisualShaderNodeTransformConstant) GetConstant() Transform3D {
	return self.ptr.API.VisualShaderNodeTransformConstant_get_constant(self)
}

type classVisualShaderNodeTransformDecompose struct {
	Class[classVisualShaderNodeTransformDecompose]
}

func (self classVisualShaderNodeTransformDecompose) Super() VisualShaderNode {
	var super VisualShaderNode
	super.ptr = self.ptr
	return super
}

func (self classVisualShaderNodeTransformDecompose) VisualShaderNode() VisualShaderNode {
	return self.Super()
}

type classVisualShaderNodeTransformFunc struct {
	Class[classVisualShaderNodeTransformFunc]
}

func (self classVisualShaderNodeTransformFunc) Super() VisualShaderNode {
	var super VisualShaderNode
	super.ptr = self.ptr
	return super
}

func (self classVisualShaderNodeTransformFunc) VisualShaderNode() VisualShaderNode {
	return self.Super()
}
func (self classVisualShaderNodeTransformFunc) SetFunction(fn VisualShaderNodeTransformFuncFunction) {
	self.ptr.API.VisualShaderNodeTransformFunc_set_function(self, fn)
}
func (self classVisualShaderNodeTransformFunc) GetFunction() VisualShaderNodeTransformFuncFunction {
	return self.ptr.API.VisualShaderNodeTransformFunc_get_function(self)
}

type classVisualShaderNodeTransformOp struct {
	Class[classVisualShaderNodeTransformOp]
}

func (self classVisualShaderNodeTransformOp) Super() VisualShaderNode {
	var super VisualShaderNode
	super.ptr = self.ptr
	return super
}

func (self classVisualShaderNodeTransformOp) VisualShaderNode() VisualShaderNode { return self.Super() }
func (self classVisualShaderNodeTransformOp) SetOperator(op VisualShaderNodeTransformOpOperator) {
	self.ptr.API.VisualShaderNodeTransformOp_set_operator(self, op)
}
func (self classVisualShaderNodeTransformOp) GetOperator() VisualShaderNodeTransformOpOperator {
	return self.ptr.API.VisualShaderNodeTransformOp_get_operator(self)
}

type classVisualShaderNodeTransformParameter struct {
	Class[classVisualShaderNodeTransformParameter]
}

func (self classVisualShaderNodeTransformParameter) Super() VisualShaderNodeParameter {
	var super VisualShaderNodeParameter
	super.ptr = self.ptr
	return super
}

func (self classVisualShaderNodeTransformParameter) VisualShaderNodeParameter() VisualShaderNodeParameter {
	return self.Super()
}
func (self classVisualShaderNodeTransformParameter) SetDefaultValueEnabled(enabled bool) {
	self.ptr.API.VisualShaderNodeTransformParameter_set_default_value_enabled(self, enabled)
}
func (self classVisualShaderNodeTransformParameter) IsDefaultValueEnabled() bool {
	return self.ptr.API.VisualShaderNodeTransformParameter_is_default_value_enabled(self)
}
func (self classVisualShaderNodeTransformParameter) SetDefaultValue(value Transform3D) {
	self.ptr.API.VisualShaderNodeTransformParameter_set_default_value(self, value)
}
func (self classVisualShaderNodeTransformParameter) GetDefaultValue() Transform3D {
	return self.ptr.API.VisualShaderNodeTransformParameter_get_default_value(self)
}

type classVisualShaderNodeTransformVecMult struct {
	Class[classVisualShaderNodeTransformVecMult]
}

func (self classVisualShaderNodeTransformVecMult) Super() VisualShaderNode {
	var super VisualShaderNode
	super.ptr = self.ptr
	return super
}

func (self classVisualShaderNodeTransformVecMult) VisualShaderNode() VisualShaderNode {
	return self.Super()
}
func (self classVisualShaderNodeTransformVecMult) SetOperator(op VisualShaderNodeTransformVecMultOperator) {
	self.ptr.API.VisualShaderNodeTransformVecMult_set_operator(self, op)
}
func (self classVisualShaderNodeTransformVecMult) GetOperator() VisualShaderNodeTransformVecMultOperator {
	return self.ptr.API.VisualShaderNodeTransformVecMult_get_operator(self)
}

type classVisualShaderNodeUIntConstant struct {
	Class[classVisualShaderNodeUIntConstant]
}

func (self classVisualShaderNodeUIntConstant) Super() VisualShaderNodeConstant {
	var super VisualShaderNodeConstant
	super.ptr = self.ptr
	return super
}

func (self classVisualShaderNodeUIntConstant) VisualShaderNodeConstant() VisualShaderNodeConstant {
	return self.Super()
}
func (self classVisualShaderNodeUIntConstant) SetConstant(constant Int) {
	self.ptr.API.VisualShaderNodeUIntConstant_set_constant(self, constant)
}
func (self classVisualShaderNodeUIntConstant) GetConstant() Int {
	return self.ptr.API.VisualShaderNodeUIntConstant_get_constant(self)
}

type classVisualShaderNodeUIntFunc struct {
	Class[classVisualShaderNodeUIntFunc]
}

func (self classVisualShaderNodeUIntFunc) Super() VisualShaderNode {
	var super VisualShaderNode
	super.ptr = self.ptr
	return super
}

func (self classVisualShaderNodeUIntFunc) VisualShaderNode() VisualShaderNode { return self.Super() }
func (self classVisualShaderNodeUIntFunc) SetFunction(fn VisualShaderNodeUIntFuncFunction) {
	self.ptr.API.VisualShaderNodeUIntFunc_set_function(self, fn)
}
func (self classVisualShaderNodeUIntFunc) GetFunction() VisualShaderNodeUIntFuncFunction {
	return self.ptr.API.VisualShaderNodeUIntFunc_get_function(self)
}

type classVisualShaderNodeUIntOp struct {
	Class[classVisualShaderNodeUIntOp]
}

func (self classVisualShaderNodeUIntOp) Super() VisualShaderNode {
	var super VisualShaderNode
	super.ptr = self.ptr
	return super
}

func (self classVisualShaderNodeUIntOp) VisualShaderNode() VisualShaderNode { return self.Super() }
func (self classVisualShaderNodeUIntOp) SetOperator(op VisualShaderNodeUIntOpOperator) {
	self.ptr.API.VisualShaderNodeUIntOp_set_operator(self, op)
}
func (self classVisualShaderNodeUIntOp) GetOperator() VisualShaderNodeUIntOpOperator {
	return self.ptr.API.VisualShaderNodeUIntOp_get_operator(self)
}

type classVisualShaderNodeUIntParameter struct {
	Class[classVisualShaderNodeUIntParameter]
}

func (self classVisualShaderNodeUIntParameter) Super() VisualShaderNodeParameter {
	var super VisualShaderNodeParameter
	super.ptr = self.ptr
	return super
}

func (self classVisualShaderNodeUIntParameter) VisualShaderNodeParameter() VisualShaderNodeParameter {
	return self.Super()
}
func (self classVisualShaderNodeUIntParameter) SetDefaultValueEnabled(enabled bool) {
	self.ptr.API.VisualShaderNodeUIntParameter_set_default_value_enabled(self, enabled)
}
func (self classVisualShaderNodeUIntParameter) IsDefaultValueEnabled() bool {
	return self.ptr.API.VisualShaderNodeUIntParameter_is_default_value_enabled(self)
}
func (self classVisualShaderNodeUIntParameter) SetDefaultValue(value Int) {
	self.ptr.API.VisualShaderNodeUIntParameter_set_default_value(self, value)
}
func (self classVisualShaderNodeUIntParameter) GetDefaultValue() Int {
	return self.ptr.API.VisualShaderNodeUIntParameter_get_default_value(self)
}

type classVisualShaderNodeUVFunc struct {
	Class[classVisualShaderNodeUVFunc]
}

func (self classVisualShaderNodeUVFunc) Super() VisualShaderNode {
	var super VisualShaderNode
	super.ptr = self.ptr
	return super
}

func (self classVisualShaderNodeUVFunc) VisualShaderNode() VisualShaderNode { return self.Super() }
func (self classVisualShaderNodeUVFunc) SetFunction(fn VisualShaderNodeUVFuncFunction) {
	self.ptr.API.VisualShaderNodeUVFunc_set_function(self, fn)
}
func (self classVisualShaderNodeUVFunc) GetFunction() VisualShaderNodeUVFuncFunction {
	return self.ptr.API.VisualShaderNodeUVFunc_get_function(self)
}

type classVisualShaderNodeUVPolarCoord struct {
	Class[classVisualShaderNodeUVPolarCoord]
}

func (self classVisualShaderNodeUVPolarCoord) Super() VisualShaderNode {
	var super VisualShaderNode
	super.ptr = self.ptr
	return super
}

func (self classVisualShaderNodeUVPolarCoord) VisualShaderNode() VisualShaderNode {
	return self.Super()
}

type classVisualShaderNodeVarying struct {
	Class[classVisualShaderNodeVarying]
}

func (self classVisualShaderNodeVarying) Super() VisualShaderNode {
	var super VisualShaderNode
	super.ptr = self.ptr
	return super
}

func (self classVisualShaderNodeVarying) VisualShaderNode() VisualShaderNode { return self.Super() }
func (self classVisualShaderNodeVarying) SetVaryingName(name String) {
	self.ptr.API.VisualShaderNodeVarying_set_varying_name(self, name)
}
func (self classVisualShaderNodeVarying) GetVaryingName() String {
	return self.ptr.API.VisualShaderNodeVarying_get_varying_name(self)
}
func (self classVisualShaderNodeVarying) SetVaryingType(atype VisualShaderVaryingType) {
	self.ptr.API.VisualShaderNodeVarying_set_varying_type(self, atype)
}
func (self classVisualShaderNodeVarying) GetVaryingType() VisualShaderVaryingType {
	return self.ptr.API.VisualShaderNodeVarying_get_varying_type(self)
}

type classVisualShaderNodeVaryingGetter struct {
	Class[classVisualShaderNodeVaryingGetter]
}

func (self classVisualShaderNodeVaryingGetter) Super() VisualShaderNodeVarying {
	var super VisualShaderNodeVarying
	super.ptr = self.ptr
	return super
}

func (self classVisualShaderNodeVaryingGetter) VisualShaderNodeVarying() VisualShaderNodeVarying {
	return self.Super()
}

type classVisualShaderNodeVaryingSetter struct {
	Class[classVisualShaderNodeVaryingSetter]
}

func (self classVisualShaderNodeVaryingSetter) Super() VisualShaderNodeVarying {
	var super VisualShaderNodeVarying
	super.ptr = self.ptr
	return super
}

func (self classVisualShaderNodeVaryingSetter) VisualShaderNodeVarying() VisualShaderNodeVarying {
	return self.Super()
}

type classVisualShaderNodeVec2Constant struct {
	Class[classVisualShaderNodeVec2Constant]
}

func (self classVisualShaderNodeVec2Constant) Super() VisualShaderNodeConstant {
	var super VisualShaderNodeConstant
	super.ptr = self.ptr
	return super
}

func (self classVisualShaderNodeVec2Constant) VisualShaderNodeConstant() VisualShaderNodeConstant {
	return self.Super()
}
func (self classVisualShaderNodeVec2Constant) SetConstant(constant Vector2) {
	self.ptr.API.VisualShaderNodeVec2Constant_set_constant(self, constant)
}
func (self classVisualShaderNodeVec2Constant) GetConstant() Vector2 {
	return self.ptr.API.VisualShaderNodeVec2Constant_get_constant(self)
}

type classVisualShaderNodeVec2Parameter struct {
	Class[classVisualShaderNodeVec2Parameter]
}

func (self classVisualShaderNodeVec2Parameter) Super() VisualShaderNodeParameter {
	var super VisualShaderNodeParameter
	super.ptr = self.ptr
	return super
}

func (self classVisualShaderNodeVec2Parameter) VisualShaderNodeParameter() VisualShaderNodeParameter {
	return self.Super()
}
func (self classVisualShaderNodeVec2Parameter) SetDefaultValueEnabled(enabled bool) {
	self.ptr.API.VisualShaderNodeVec2Parameter_set_default_value_enabled(self, enabled)
}
func (self classVisualShaderNodeVec2Parameter) IsDefaultValueEnabled() bool {
	return self.ptr.API.VisualShaderNodeVec2Parameter_is_default_value_enabled(self)
}
func (self classVisualShaderNodeVec2Parameter) SetDefaultValue(value Vector2) {
	self.ptr.API.VisualShaderNodeVec2Parameter_set_default_value(self, value)
}
func (self classVisualShaderNodeVec2Parameter) GetDefaultValue() Vector2 {
	return self.ptr.API.VisualShaderNodeVec2Parameter_get_default_value(self)
}

type classVisualShaderNodeVec3Constant struct {
	Class[classVisualShaderNodeVec3Constant]
}

func (self classVisualShaderNodeVec3Constant) Super() VisualShaderNodeConstant {
	var super VisualShaderNodeConstant
	super.ptr = self.ptr
	return super
}

func (self classVisualShaderNodeVec3Constant) VisualShaderNodeConstant() VisualShaderNodeConstant {
	return self.Super()
}
func (self classVisualShaderNodeVec3Constant) SetConstant(constant Vector3) {
	self.ptr.API.VisualShaderNodeVec3Constant_set_constant(self, constant)
}
func (self classVisualShaderNodeVec3Constant) GetConstant() Vector3 {
	return self.ptr.API.VisualShaderNodeVec3Constant_get_constant(self)
}

type classVisualShaderNodeVec3Parameter struct {
	Class[classVisualShaderNodeVec3Parameter]
}

func (self classVisualShaderNodeVec3Parameter) Super() VisualShaderNodeParameter {
	var super VisualShaderNodeParameter
	super.ptr = self.ptr
	return super
}

func (self classVisualShaderNodeVec3Parameter) VisualShaderNodeParameter() VisualShaderNodeParameter {
	return self.Super()
}
func (self classVisualShaderNodeVec3Parameter) SetDefaultValueEnabled(enabled bool) {
	self.ptr.API.VisualShaderNodeVec3Parameter_set_default_value_enabled(self, enabled)
}
func (self classVisualShaderNodeVec3Parameter) IsDefaultValueEnabled() bool {
	return self.ptr.API.VisualShaderNodeVec3Parameter_is_default_value_enabled(self)
}
func (self classVisualShaderNodeVec3Parameter) SetDefaultValue(value Vector3) {
	self.ptr.API.VisualShaderNodeVec3Parameter_set_default_value(self, value)
}
func (self classVisualShaderNodeVec3Parameter) GetDefaultValue() Vector3 {
	return self.ptr.API.VisualShaderNodeVec3Parameter_get_default_value(self)
}

type classVisualShaderNodeVec4Constant struct {
	Class[classVisualShaderNodeVec4Constant]
}

func (self classVisualShaderNodeVec4Constant) Super() VisualShaderNodeConstant {
	var super VisualShaderNodeConstant
	super.ptr = self.ptr
	return super
}

func (self classVisualShaderNodeVec4Constant) VisualShaderNodeConstant() VisualShaderNodeConstant {
	return self.Super()
}
func (self classVisualShaderNodeVec4Constant) SetConstant(constant Quaternion) {
	self.ptr.API.VisualShaderNodeVec4Constant_set_constant(self, constant)
}
func (self classVisualShaderNodeVec4Constant) GetConstant() Quaternion {
	return self.ptr.API.VisualShaderNodeVec4Constant_get_constant(self)
}

type classVisualShaderNodeVec4Parameter struct {
	Class[classVisualShaderNodeVec4Parameter]
}

func (self classVisualShaderNodeVec4Parameter) Super() VisualShaderNodeParameter {
	var super VisualShaderNodeParameter
	super.ptr = self.ptr
	return super
}

func (self classVisualShaderNodeVec4Parameter) VisualShaderNodeParameter() VisualShaderNodeParameter {
	return self.Super()
}
func (self classVisualShaderNodeVec4Parameter) SetDefaultValueEnabled(enabled bool) {
	self.ptr.API.VisualShaderNodeVec4Parameter_set_default_value_enabled(self, enabled)
}
func (self classVisualShaderNodeVec4Parameter) IsDefaultValueEnabled() bool {
	return self.ptr.API.VisualShaderNodeVec4Parameter_is_default_value_enabled(self)
}
func (self classVisualShaderNodeVec4Parameter) SetDefaultValue(value Vector4) {
	self.ptr.API.VisualShaderNodeVec4Parameter_set_default_value(self, value)
}
func (self classVisualShaderNodeVec4Parameter) GetDefaultValue() Vector4 {
	return self.ptr.API.VisualShaderNodeVec4Parameter_get_default_value(self)
}

type classVisualShaderNodeVectorBase struct {
	Class[classVisualShaderNodeVectorBase]
}

func (self classVisualShaderNodeVectorBase) Super() VisualShaderNode {
	var super VisualShaderNode
	super.ptr = self.ptr
	return super
}

func (self classVisualShaderNodeVectorBase) VisualShaderNode() VisualShaderNode { return self.Super() }
func (self classVisualShaderNodeVectorBase) SetOpType(atype VisualShaderNodeVectorBaseOpType) {
	self.ptr.API.VisualShaderNodeVectorBase_set_op_type(self, atype)
}
func (self classVisualShaderNodeVectorBase) GetOpType() VisualShaderNodeVectorBaseOpType {
	return self.ptr.API.VisualShaderNodeVectorBase_get_op_type(self)
}

type classVisualShaderNodeVectorCompose struct {
	Class[classVisualShaderNodeVectorCompose]
}

func (self classVisualShaderNodeVectorCompose) Super() VisualShaderNodeVectorBase {
	var super VisualShaderNodeVectorBase
	super.ptr = self.ptr
	return super
}

func (self classVisualShaderNodeVectorCompose) VisualShaderNodeVectorBase() VisualShaderNodeVectorBase {
	return self.Super()
}

type classVisualShaderNodeVectorDecompose struct {
	Class[classVisualShaderNodeVectorDecompose]
}

func (self classVisualShaderNodeVectorDecompose) Super() VisualShaderNodeVectorBase {
	var super VisualShaderNodeVectorBase
	super.ptr = self.ptr
	return super
}

func (self classVisualShaderNodeVectorDecompose) VisualShaderNodeVectorBase() VisualShaderNodeVectorBase {
	return self.Super()
}

type classVisualShaderNodeVectorDistance struct {
	Class[classVisualShaderNodeVectorDistance]
}

func (self classVisualShaderNodeVectorDistance) Super() VisualShaderNodeVectorBase {
	var super VisualShaderNodeVectorBase
	super.ptr = self.ptr
	return super
}

func (self classVisualShaderNodeVectorDistance) VisualShaderNodeVectorBase() VisualShaderNodeVectorBase {
	return self.Super()
}

type classVisualShaderNodeVectorFunc struct {
	Class[classVisualShaderNodeVectorFunc]
}

func (self classVisualShaderNodeVectorFunc) Super() VisualShaderNodeVectorBase {
	var super VisualShaderNodeVectorBase
	super.ptr = self.ptr
	return super
}

func (self classVisualShaderNodeVectorFunc) VisualShaderNodeVectorBase() VisualShaderNodeVectorBase {
	return self.Super()
}
func (self classVisualShaderNodeVectorFunc) SetFunction(fn VisualShaderNodeVectorFuncFunction) {
	self.ptr.API.VisualShaderNodeVectorFunc_set_function(self, fn)
}
func (self classVisualShaderNodeVectorFunc) GetFunction() VisualShaderNodeVectorFuncFunction {
	return self.ptr.API.VisualShaderNodeVectorFunc_get_function(self)
}

type classVisualShaderNodeVectorLen struct {
	Class[classVisualShaderNodeVectorLen]
}

func (self classVisualShaderNodeVectorLen) Super() VisualShaderNodeVectorBase {
	var super VisualShaderNodeVectorBase
	super.ptr = self.ptr
	return super
}

func (self classVisualShaderNodeVectorLen) VisualShaderNodeVectorBase() VisualShaderNodeVectorBase {
	return self.Super()
}

type classVisualShaderNodeVectorOp struct {
	Class[classVisualShaderNodeVectorOp]
}

func (self classVisualShaderNodeVectorOp) Super() VisualShaderNodeVectorBase {
	var super VisualShaderNodeVectorBase
	super.ptr = self.ptr
	return super
}

func (self classVisualShaderNodeVectorOp) VisualShaderNodeVectorBase() VisualShaderNodeVectorBase {
	return self.Super()
}
func (self classVisualShaderNodeVectorOp) SetOperator(op VisualShaderNodeVectorOpOperator) {
	self.ptr.API.VisualShaderNodeVectorOp_set_operator(self, op)
}
func (self classVisualShaderNodeVectorOp) GetOperator() VisualShaderNodeVectorOpOperator {
	return self.ptr.API.VisualShaderNodeVectorOp_get_operator(self)
}

type classVisualShaderNodeVectorRefract struct {
	Class[classVisualShaderNodeVectorRefract]
}

func (self classVisualShaderNodeVectorRefract) Super() VisualShaderNodeVectorBase {
	var super VisualShaderNodeVectorBase
	super.ptr = self.ptr
	return super
}

func (self classVisualShaderNodeVectorRefract) VisualShaderNodeVectorBase() VisualShaderNodeVectorBase {
	return self.Super()
}

type classVisualShaderNodeWorldPositionFromDepth struct {
	Class[classVisualShaderNodeWorldPositionFromDepth]
}

func (self classVisualShaderNodeWorldPositionFromDepth) Super() VisualShaderNode {
	var super VisualShaderNode
	super.ptr = self.ptr
	return super
}

func (self classVisualShaderNodeWorldPositionFromDepth) VisualShaderNode() VisualShaderNode {
	return self.Super()
}

type classVoxelGI struct{ Class[classVoxelGI] }

func (self classVoxelGI) Super() VisualInstance3D {
	var super VisualInstance3D
	super.ptr = self.ptr
	return super
}

func (self classVoxelGI) VisualInstance3D() VisualInstance3D { return self.Super() }
func (self classVoxelGI) SetProbeData(data VoxelGIData) {
	self.ptr.API.VoxelGI_set_probe_data(self, data)
}
func (self classVoxelGI) GetProbeData() VoxelGIData {
	return self.ptr.API.VoxelGI_get_probe_data(self)
}
func (self classVoxelGI) SetSubdiv(subdiv VoxelGISubdiv) {
	self.ptr.API.VoxelGI_set_subdiv(self, subdiv)
}
func (self classVoxelGI) GetSubdiv() VoxelGISubdiv {
	return self.ptr.API.VoxelGI_get_subdiv(self)
}
func (self classVoxelGI) SetSize(size Vector3) {
	self.ptr.API.VoxelGI_set_size(self, size)
}
func (self classVoxelGI) GetSize() Vector3 {
	return self.ptr.API.VoxelGI_get_size(self)
}
func (self classVoxelGI) SetCameraAttributes(camera_attributes CameraAttributes) {
	self.ptr.API.VoxelGI_set_camera_attributes(self, camera_attributes)
}
func (self classVoxelGI) GetCameraAttributes() CameraAttributes {
	return self.ptr.API.VoxelGI_get_camera_attributes(self)
}
func (self classVoxelGI) Bake(from_node Node, create_visual_debug bool) {
	self.ptr.API.VoxelGI_bake(self, from_node, create_visual_debug)
}
func (self classVoxelGI) DebugBake() {
	self.ptr.API.VoxelGI_debug_bake(self)
}

type classVoxelGIData struct{ Class[classVoxelGIData] }

func (self classVoxelGIData) Super() Resource { var super Resource; super.ptr = self.ptr; return super }

func (self classVoxelGIData) Resource() Resource { return self.Super() }
func (self classVoxelGIData) Allocate(to_cell_xform Transform3D, aabb AABB, octree_size Vector3, octree_cells PackedByteArray, data_cells PackedByteArray, distance_field PackedByteArray, level_counts PackedInt32Array) {
	self.ptr.API.VoxelGIData_allocate(self, to_cell_xform, aabb, octree_size, octree_cells, data_cells, distance_field, level_counts)
}
func (self classVoxelGIData) GetBounds() AABB {
	return self.ptr.API.VoxelGIData_get_bounds(self)
}
func (self classVoxelGIData) GetOctreeSize() Vector3 {
	return self.ptr.API.VoxelGIData_get_octree_size(self)
}
func (self classVoxelGIData) GetToCellXform() Transform3D {
	return self.ptr.API.VoxelGIData_get_to_cell_xform(self)
}
func (self classVoxelGIData) GetOctreeCells() PackedByteArray {
	return self.ptr.API.VoxelGIData_get_octree_cells(self)
}
func (self classVoxelGIData) GetDataCells() PackedByteArray {
	return self.ptr.API.VoxelGIData_get_data_cells(self)
}
func (self classVoxelGIData) GetLevelCounts() PackedInt32Array {
	return self.ptr.API.VoxelGIData_get_level_counts(self)
}
func (self classVoxelGIData) SetDynamicRange(dynamic_range Float) {
	self.ptr.API.VoxelGIData_set_dynamic_range(self, dynamic_range)
}
func (self classVoxelGIData) GetDynamicRange() Float {
	return self.ptr.API.VoxelGIData_get_dynamic_range(self)
}
func (self classVoxelGIData) SetEnergy(energy Float) {
	self.ptr.API.VoxelGIData_set_energy(self, energy)
}
func (self classVoxelGIData) GetEnergy() Float {
	return self.ptr.API.VoxelGIData_get_energy(self)
}
func (self classVoxelGIData) SetBias(bias Float) {
	self.ptr.API.VoxelGIData_set_bias(self, bias)
}
func (self classVoxelGIData) GetBias() Float {
	return self.ptr.API.VoxelGIData_get_bias(self)
}
func (self classVoxelGIData) SetNormalBias(bias Float) {
	self.ptr.API.VoxelGIData_set_normal_bias(self, bias)
}
func (self classVoxelGIData) GetNormalBias() Float {
	return self.ptr.API.VoxelGIData_get_normal_bias(self)
}
func (self classVoxelGIData) SetPropagation(propagation Float) {
	self.ptr.API.VoxelGIData_set_propagation(self, propagation)
}
func (self classVoxelGIData) GetPropagation() Float {
	return self.ptr.API.VoxelGIData_get_propagation(self)
}
func (self classVoxelGIData) SetInterior(interior bool) {
	self.ptr.API.VoxelGIData_set_interior(self, interior)
}
func (self classVoxelGIData) IsInterior() bool {
	return self.ptr.API.VoxelGIData_is_interior(self)
}
func (self classVoxelGIData) SetUseTwoBounces(enable bool) {
	self.ptr.API.VoxelGIData_set_use_two_bounces(self, enable)
}
func (self classVoxelGIData) IsUsingTwoBounces() bool {
	return self.ptr.API.VoxelGIData_is_using_two_bounces(self)
}

type classWeakRef struct{ Class[classWeakRef] }

func (self classWeakRef) Super() RefCounted { var super RefCounted; super.ptr = self.ptr; return super }

func (self classWeakRef) RefCounted() RefCounted { return self.Super() }
func (self classWeakRef) GetRef() Variant {
	return self.ptr.API.WeakRef_get_ref(self)
}

type classWebRTCDataChannel struct{ Class[classWebRTCDataChannel] }

func (self classWebRTCDataChannel) Super() PacketPeer {
	var super PacketPeer
	super.ptr = self.ptr
	return super
}

func (self classWebRTCDataChannel) PacketPeer() PacketPeer { return self.Super() }
func (self classWebRTCDataChannel) Poll() int64 {
	return self.ptr.API.WebRTCDataChannel_poll(self)
}
func (self classWebRTCDataChannel) Close() {
	self.ptr.API.WebRTCDataChannel_close(self)
}
func (self classWebRTCDataChannel) WasStringPacket() bool {
	return self.ptr.API.WebRTCDataChannel_was_string_packet(self)
}
func (self classWebRTCDataChannel) SetWriteMode(write_mode WebRTCDataChannelWriteMode) {
	self.ptr.API.WebRTCDataChannel_set_write_mode(self, write_mode)
}
func (self classWebRTCDataChannel) GetWriteMode() WebRTCDataChannelWriteMode {
	return self.ptr.API.WebRTCDataChannel_get_write_mode(self)
}
func (self classWebRTCDataChannel) GetReadyState() WebRTCDataChannelChannelState {
	return self.ptr.API.WebRTCDataChannel_get_ready_state(self)
}
func (self classWebRTCDataChannel) GetLabel() String {
	return self.ptr.API.WebRTCDataChannel_get_label(self)
}
func (self classWebRTCDataChannel) IsOrdered() bool {
	return self.ptr.API.WebRTCDataChannel_is_ordered(self)
}
func (self classWebRTCDataChannel) GetId() Int {
	return self.ptr.API.WebRTCDataChannel_get_id(self)
}
func (self classWebRTCDataChannel) GetMaxPacketLifeTime() Int {
	return self.ptr.API.WebRTCDataChannel_get_max_packet_life_time(self)
}
func (self classWebRTCDataChannel) GetMaxRetransmits() Int {
	return self.ptr.API.WebRTCDataChannel_get_max_retransmits(self)
}
func (self classWebRTCDataChannel) GetProtocol() String {
	return self.ptr.API.WebRTCDataChannel_get_protocol(self)
}
func (self classWebRTCDataChannel) IsNegotiated() bool {
	return self.ptr.API.WebRTCDataChannel_is_negotiated(self)
}
func (self classWebRTCDataChannel) GetBufferedAmount() Int {
	return self.ptr.API.WebRTCDataChannel_get_buffered_amount(self)
}

type classWebRTCDataChannelExtension struct {
	Class[classWebRTCDataChannelExtension]
}

func (self classWebRTCDataChannelExtension) Super() WebRTCDataChannel {
	var super WebRTCDataChannel
	super.ptr = self.ptr
	return super
}

func (self classWebRTCDataChannelExtension) WebRTCDataChannel() WebRTCDataChannel {
	return self.Super()
}

type classWebRTCMultiplayerPeer struct {
	Class[classWebRTCMultiplayerPeer]
}

func (self classWebRTCMultiplayerPeer) Super() MultiplayerPeer {
	var super MultiplayerPeer
	super.ptr = self.ptr
	return super
}

func (self classWebRTCMultiplayerPeer) MultiplayerPeer() MultiplayerPeer { return self.Super() }
func (self classWebRTCMultiplayerPeer) CreateServer(channels_config Array) int64 {
	return self.ptr.API.WebRTCMultiplayerPeer_create_server(self, channels_config)
}
func (self classWebRTCMultiplayerPeer) CreateClient(peer_id Int, channels_config Array) int64 {
	return self.ptr.API.WebRTCMultiplayerPeer_create_client(self, peer_id, channels_config)
}
func (self classWebRTCMultiplayerPeer) CreateMesh(peer_id Int, channels_config Array) int64 {
	return self.ptr.API.WebRTCMultiplayerPeer_create_mesh(self, peer_id, channels_config)
}
func (self classWebRTCMultiplayerPeer) AddPeer(peer WebRTCPeerConnection, peer_id Int, unreliable_lifetime Int) int64 {
	return self.ptr.API.WebRTCMultiplayerPeer_add_peer(self, peer, peer_id, unreliable_lifetime)
}
func (self classWebRTCMultiplayerPeer) RemovePeer(peer_id Int) {
	self.ptr.API.WebRTCMultiplayerPeer_remove_peer(self, peer_id)
}
func (self classWebRTCMultiplayerPeer) HasPeer(peer_id Int) bool {
	return self.ptr.API.WebRTCMultiplayerPeer_has_peer(self, peer_id)
}
func (self classWebRTCMultiplayerPeer) GetPeer(peer_id Int) Dictionary {
	return self.ptr.API.WebRTCMultiplayerPeer_get_peer(self, peer_id)
}
func (self classWebRTCMultiplayerPeer) GetPeers() Dictionary {
	return self.ptr.API.WebRTCMultiplayerPeer_get_peers(self)
}

type classWebRTCPeerConnection struct {
	Class[classWebRTCPeerConnection]
}

func (self classWebRTCPeerConnection) Super() RefCounted {
	var super RefCounted
	super.ptr = self.ptr
	return super
}

func (self classWebRTCPeerConnection) RefCounted() RefCounted { return self.Super() }
func (self classWebRTCPeerConnection) SetDefaultExtension(extension_class StringName) {
	self.ptr.API.WebRTCPeerConnection_set_default_extension(self, extension_class)
}
func (self classWebRTCPeerConnection) Initialize(configuration Dictionary) int64 {
	return self.ptr.API.WebRTCPeerConnection_initialize(self, configuration)
}
func (self classWebRTCPeerConnection) CreateDataChannel(label String, options Dictionary) WebRTCDataChannel {
	return self.ptr.API.WebRTCPeerConnection_create_data_channel(self, label, options)
}
func (self classWebRTCPeerConnection) CreateOffer() int64 {
	return self.ptr.API.WebRTCPeerConnection_create_offer(self)
}
func (self classWebRTCPeerConnection) SetLocalDescription(atype String, sdp String) int64 {
	return self.ptr.API.WebRTCPeerConnection_set_local_description(self, atype, sdp)
}
func (self classWebRTCPeerConnection) SetRemoteDescription(atype String, sdp String) int64 {
	return self.ptr.API.WebRTCPeerConnection_set_remote_description(self, atype, sdp)
}
func (self classWebRTCPeerConnection) AddIceCandidate(media String, index Int, name String) int64 {
	return self.ptr.API.WebRTCPeerConnection_add_ice_candidate(self, media, index, name)
}
func (self classWebRTCPeerConnection) Poll() int64 {
	return self.ptr.API.WebRTCPeerConnection_poll(self)
}
func (self classWebRTCPeerConnection) Close() {
	self.ptr.API.WebRTCPeerConnection_close(self)
}
func (self classWebRTCPeerConnection) GetConnectionState() WebRTCPeerConnectionConnectionState {
	return self.ptr.API.WebRTCPeerConnection_get_connection_state(self)
}
func (self classWebRTCPeerConnection) GetGatheringState() WebRTCPeerConnectionGatheringState {
	return self.ptr.API.WebRTCPeerConnection_get_gathering_state(self)
}
func (self classWebRTCPeerConnection) GetSignalingState() WebRTCPeerConnectionSignalingState {
	return self.ptr.API.WebRTCPeerConnection_get_signaling_state(self)
}

type classWebRTCPeerConnectionExtension struct {
	Class[classWebRTCPeerConnectionExtension]
}

func (self classWebRTCPeerConnectionExtension) Super() WebRTCPeerConnection {
	var super WebRTCPeerConnection
	super.ptr = self.ptr
	return super
}

func (self classWebRTCPeerConnectionExtension) WebRTCPeerConnection() WebRTCPeerConnection {
	return self.Super()
}

type classWebSocketMultiplayerPeer struct {
	Class[classWebSocketMultiplayerPeer]
}

func (self classWebSocketMultiplayerPeer) Super() MultiplayerPeer {
	var super MultiplayerPeer
	super.ptr = self.ptr
	return super
}

func (self classWebSocketMultiplayerPeer) MultiplayerPeer() MultiplayerPeer { return self.Super() }
func (self classWebSocketMultiplayerPeer) CreateClient(url String, tls_client_options TLSOptions) int64 {
	return self.ptr.API.WebSocketMultiplayerPeer_create_client(self, url, tls_client_options)
}
func (self classWebSocketMultiplayerPeer) CreateServer(port Int, bind_address String, tls_server_options TLSOptions) int64 {
	return self.ptr.API.WebSocketMultiplayerPeer_create_server(self, port, bind_address, tls_server_options)
}
func (self classWebSocketMultiplayerPeer) GetPeer(peer_id Int) WebSocketPeer {
	return self.ptr.API.WebSocketMultiplayerPeer_get_peer(self, peer_id)
}
func (self classWebSocketMultiplayerPeer) GetPeerAddress(id Int) String {
	return self.ptr.API.WebSocketMultiplayerPeer_get_peer_address(self, id)
}
func (self classWebSocketMultiplayerPeer) GetPeerPort(id Int) Int {
	return self.ptr.API.WebSocketMultiplayerPeer_get_peer_port(self, id)
}
func (self classWebSocketMultiplayerPeer) GetSupportedProtocols() PackedStringArray {
	return self.ptr.API.WebSocketMultiplayerPeer_get_supported_protocols(self)
}
func (self classWebSocketMultiplayerPeer) SetSupportedProtocols(protocols PackedStringArray) {
	self.ptr.API.WebSocketMultiplayerPeer_set_supported_protocols(self, protocols)
}
func (self classWebSocketMultiplayerPeer) GetHandshakeHeaders() PackedStringArray {
	return self.ptr.API.WebSocketMultiplayerPeer_get_handshake_headers(self)
}
func (self classWebSocketMultiplayerPeer) SetHandshakeHeaders(protocols PackedStringArray) {
	self.ptr.API.WebSocketMultiplayerPeer_set_handshake_headers(self, protocols)
}
func (self classWebSocketMultiplayerPeer) GetInboundBufferSize() Int {
	return self.ptr.API.WebSocketMultiplayerPeer_get_inbound_buffer_size(self)
}
func (self classWebSocketMultiplayerPeer) SetInboundBufferSize(buffer_size Int) {
	self.ptr.API.WebSocketMultiplayerPeer_set_inbound_buffer_size(self, buffer_size)
}
func (self classWebSocketMultiplayerPeer) GetOutboundBufferSize() Int {
	return self.ptr.API.WebSocketMultiplayerPeer_get_outbound_buffer_size(self)
}
func (self classWebSocketMultiplayerPeer) SetOutboundBufferSize(buffer_size Int) {
	self.ptr.API.WebSocketMultiplayerPeer_set_outbound_buffer_size(self, buffer_size)
}
func (self classWebSocketMultiplayerPeer) GetHandshakeTimeout() Float {
	return self.ptr.API.WebSocketMultiplayerPeer_get_handshake_timeout(self)
}
func (self classWebSocketMultiplayerPeer) SetHandshakeTimeout(timeout Float) {
	self.ptr.API.WebSocketMultiplayerPeer_set_handshake_timeout(self, timeout)
}
func (self classWebSocketMultiplayerPeer) SetMaxQueuedPackets(max_queued_packets Int) {
	self.ptr.API.WebSocketMultiplayerPeer_set_max_queued_packets(self, max_queued_packets)
}
func (self classWebSocketMultiplayerPeer) GetMaxQueuedPackets() Int {
	return self.ptr.API.WebSocketMultiplayerPeer_get_max_queued_packets(self)
}

type classWebSocketPeer struct{ Class[classWebSocketPeer] }

func (self classWebSocketPeer) Super() PacketPeer {
	var super PacketPeer
	super.ptr = self.ptr
	return super
}

func (self classWebSocketPeer) PacketPeer() PacketPeer { return self.Super() }
func (self classWebSocketPeer) ConnectToUrl(url String, tls_client_options TLSOptions) int64 {
	return self.ptr.API.WebSocketPeer_connect_to_url(self, url, tls_client_options)
}
func (self classWebSocketPeer) AcceptStream(stream StreamPeer) int64 {
	return self.ptr.API.WebSocketPeer_accept_stream(self, stream)
}
func (self classWebSocketPeer) Send(message PackedByteArray, write_mode WebSocketPeerWriteMode) int64 {
	return self.ptr.API.WebSocketPeer_send(self, message, write_mode)
}
func (self classWebSocketPeer) SendText(message String) int64 {
	return self.ptr.API.WebSocketPeer_send_text(self, message)
}
func (self classWebSocketPeer) WasStringPacket() bool {
	return self.ptr.API.WebSocketPeer_was_string_packet(self)
}
func (self classWebSocketPeer) Poll() {
	self.ptr.API.WebSocketPeer_poll(self)
}
func (self classWebSocketPeer) Close(code Int, reason String) {
	self.ptr.API.WebSocketPeer_close(self, code, reason)
}
func (self classWebSocketPeer) GetConnectedHost() String {
	return self.ptr.API.WebSocketPeer_get_connected_host(self)
}
func (self classWebSocketPeer) GetConnectedPort() Int {
	return self.ptr.API.WebSocketPeer_get_connected_port(self)
}
func (self classWebSocketPeer) GetSelectedProtocol() String {
	return self.ptr.API.WebSocketPeer_get_selected_protocol(self)
}
func (self classWebSocketPeer) GetRequestedUrl() String {
	return self.ptr.API.WebSocketPeer_get_requested_url(self)
}
func (self classWebSocketPeer) SetNoDelay(enabled bool) {
	self.ptr.API.WebSocketPeer_set_no_delay(self, enabled)
}
func (self classWebSocketPeer) GetCurrentOutboundBufferedAmount() Int {
	return self.ptr.API.WebSocketPeer_get_current_outbound_buffered_amount(self)
}
func (self classWebSocketPeer) GetReadyState() WebSocketPeerState {
	return self.ptr.API.WebSocketPeer_get_ready_state(self)
}
func (self classWebSocketPeer) GetCloseCode() Int {
	return self.ptr.API.WebSocketPeer_get_close_code(self)
}
func (self classWebSocketPeer) GetCloseReason() String {
	return self.ptr.API.WebSocketPeer_get_close_reason(self)
}
func (self classWebSocketPeer) GetSupportedProtocols() PackedStringArray {
	return self.ptr.API.WebSocketPeer_get_supported_protocols(self)
}
func (self classWebSocketPeer) SetSupportedProtocols(protocols PackedStringArray) {
	self.ptr.API.WebSocketPeer_set_supported_protocols(self, protocols)
}
func (self classWebSocketPeer) GetHandshakeHeaders() PackedStringArray {
	return self.ptr.API.WebSocketPeer_get_handshake_headers(self)
}
func (self classWebSocketPeer) SetHandshakeHeaders(protocols PackedStringArray) {
	self.ptr.API.WebSocketPeer_set_handshake_headers(self, protocols)
}
func (self classWebSocketPeer) GetInboundBufferSize() Int {
	return self.ptr.API.WebSocketPeer_get_inbound_buffer_size(self)
}
func (self classWebSocketPeer) SetInboundBufferSize(buffer_size Int) {
	self.ptr.API.WebSocketPeer_set_inbound_buffer_size(self, buffer_size)
}
func (self classWebSocketPeer) GetOutboundBufferSize() Int {
	return self.ptr.API.WebSocketPeer_get_outbound_buffer_size(self)
}
func (self classWebSocketPeer) SetOutboundBufferSize(buffer_size Int) {
	self.ptr.API.WebSocketPeer_set_outbound_buffer_size(self, buffer_size)
}
func (self classWebSocketPeer) SetMaxQueuedPackets(buffer_size Int) {
	self.ptr.API.WebSocketPeer_set_max_queued_packets(self, buffer_size)
}
func (self classWebSocketPeer) GetMaxQueuedPackets() Int {
	return self.ptr.API.WebSocketPeer_get_max_queued_packets(self)
}

type classWebXRInterface struct{ Class[classWebXRInterface] }

func (self classWebXRInterface) Super() XRInterface {
	var super XRInterface
	super.ptr = self.ptr
	return super
}

func (self classWebXRInterface) XRInterface() XRInterface { return self.Super() }
func (self classWebXRInterface) IsSessionSupported(session_mode String) {
	self.ptr.API.WebXRInterface_is_session_supported(self, session_mode)
}
func (self classWebXRInterface) SetSessionMode(session_mode String) {
	self.ptr.API.WebXRInterface_set_session_mode(self, session_mode)
}
func (self classWebXRInterface) GetSessionMode() String {
	return self.ptr.API.WebXRInterface_get_session_mode(self)
}
func (self classWebXRInterface) SetRequiredFeatures(required_features String) {
	self.ptr.API.WebXRInterface_set_required_features(self, required_features)
}
func (self classWebXRInterface) GetRequiredFeatures() String {
	return self.ptr.API.WebXRInterface_get_required_features(self)
}
func (self classWebXRInterface) SetOptionalFeatures(optional_features String) {
	self.ptr.API.WebXRInterface_set_optional_features(self, optional_features)
}
func (self classWebXRInterface) GetOptionalFeatures() String {
	return self.ptr.API.WebXRInterface_get_optional_features(self)
}
func (self classWebXRInterface) GetReferenceSpaceType() String {
	return self.ptr.API.WebXRInterface_get_reference_space_type(self)
}
func (self classWebXRInterface) SetRequestedReferenceSpaceTypes(requested_reference_space_types String) {
	self.ptr.API.WebXRInterface_set_requested_reference_space_types(self, requested_reference_space_types)
}
func (self classWebXRInterface) GetRequestedReferenceSpaceTypes() String {
	return self.ptr.API.WebXRInterface_get_requested_reference_space_types(self)
}
func (self classWebXRInterface) IsInputSourceActive(input_source_id Int) bool {
	return self.ptr.API.WebXRInterface_is_input_source_active(self, input_source_id)
}
func (self classWebXRInterface) GetInputSourceTracker(input_source_id Int) XRPositionalTracker {
	return self.ptr.API.WebXRInterface_get_input_source_tracker(self, input_source_id)
}
func (self classWebXRInterface) GetInputSourceTargetRayMode(input_source_id Int) WebXRInterfaceTargetRayMode {
	return self.ptr.API.WebXRInterface_get_input_source_target_ray_mode(self, input_source_id)
}
func (self classWebXRInterface) GetVisibilityState() String {
	return self.ptr.API.WebXRInterface_get_visibility_state(self)
}
func (self classWebXRInterface) GetDisplayRefreshRate() Float {
	return self.ptr.API.WebXRInterface_get_display_refresh_rate(self)
}
func (self classWebXRInterface) SetDisplayRefreshRate(refresh_rate Float) {
	self.ptr.API.WebXRInterface_set_display_refresh_rate(self, refresh_rate)
}
func (self classWebXRInterface) GetAvailableDisplayRefreshRates() Array {
	return self.ptr.API.WebXRInterface_get_available_display_refresh_rates(self)
}

type classWindow struct{ Class[classWindow] }

func (self classWindow) Super() Viewport { var super Viewport; super.ptr = self.ptr; return super }

func (self classWindow) Viewport() Viewport { return self.Super() }
func (self classWindow) SetTitle(title String) {
	self.ptr.API.Window_set_title(self, title)
}
func (self classWindow) GetTitle() String {
	return self.ptr.API.Window_get_title(self)
}
func (self classWindow) GetWindowId() Int {
	return self.ptr.API.Window_get_window_id(self)
}
func (self classWindow) SetInitialPosition(initial_position WindowWindowInitialPosition) {
	self.ptr.API.Window_set_initial_position(self, initial_position)
}
func (self classWindow) GetInitialPosition() WindowWindowInitialPosition {
	return self.ptr.API.Window_get_initial_position(self)
}
func (self classWindow) SetCurrentScreen(index Int) {
	self.ptr.API.Window_set_current_screen(self, index)
}
func (self classWindow) GetCurrentScreen() Int {
	return self.ptr.API.Window_get_current_screen(self)
}
func (self classWindow) SetPosition(position Vector2i) {
	self.ptr.API.Window_set_position(self, position)
}
func (self classWindow) GetPosition() Vector2i {
	return self.ptr.API.Window_get_position(self)
}
func (self classWindow) MoveToCenter() {
	self.ptr.API.Window_move_to_center(self)
}
func (self classWindow) SetSize(size Vector2i) {
	self.ptr.API.Window_set_size(self, size)
}
func (self classWindow) GetSize() Vector2i {
	return self.ptr.API.Window_get_size(self)
}
func (self classWindow) ResetSize() {
	self.ptr.API.Window_reset_size(self)
}
func (self classWindow) GetPositionWithDecorations() Vector2i {
	return self.ptr.API.Window_get_position_with_decorations(self)
}
func (self classWindow) GetSizeWithDecorations() Vector2i {
	return self.ptr.API.Window_get_size_with_decorations(self)
}
func (self classWindow) SetMaxSize(max_size Vector2i) {
	self.ptr.API.Window_set_max_size(self, max_size)
}
func (self classWindow) GetMaxSize() Vector2i {
	return self.ptr.API.Window_get_max_size(self)
}
func (self classWindow) SetMinSize(min_size Vector2i) {
	self.ptr.API.Window_set_min_size(self, min_size)
}
func (self classWindow) GetMinSize() Vector2i {
	return self.ptr.API.Window_get_min_size(self)
}
func (self classWindow) SetMode(mode WindowMode) {
	self.ptr.API.Window_set_mode(self, mode)
}
func (self classWindow) GetMode() WindowMode {
	return self.ptr.API.Window_get_mode(self)
}
func (self classWindow) SetFlag(flag WindowFlags, enabled bool) {
	self.ptr.API.Window_set_flag(self, flag, enabled)
}
func (self classWindow) GetFlag(flag WindowFlags) bool {
	return self.ptr.API.Window_get_flag(self, flag)
}
func (self classWindow) IsMaximizeAllowed() bool {
	return self.ptr.API.Window_is_maximize_allowed(self)
}
func (self classWindow) RequestAttention() {
	self.ptr.API.Window_request_attention(self)
}
func (self classWindow) MoveToForeground() {
	self.ptr.API.Window_move_to_foreground(self)
}
func (self classWindow) SetVisible(visible bool) {
	self.ptr.API.Window_set_visible(self, visible)
}
func (self classWindow) IsVisible() bool {
	return self.ptr.API.Window_is_visible(self)
}
func (self classWindow) Hide() {
	self.ptr.API.Window_hide(self)
}
func (self classWindow) Show() {
	self.ptr.API.Window_show(self)
}
func (self classWindow) SetTransient(transient bool) {
	self.ptr.API.Window_set_transient(self, transient)
}
func (self classWindow) IsTransient() bool {
	return self.ptr.API.Window_is_transient(self)
}
func (self classWindow) SetExclusive(exclusive bool) {
	self.ptr.API.Window_set_exclusive(self, exclusive)
}
func (self classWindow) IsExclusive() bool {
	return self.ptr.API.Window_is_exclusive(self)
}
func (self classWindow) SetUnparentWhenInvisible(unparent bool) {
	self.ptr.API.Window_set_unparent_when_invisible(self, unparent)
}
func (self classWindow) CanDraw() bool {
	return self.ptr.API.Window_can_draw(self)
}
func (self classWindow) HasFocus() bool {
	return self.ptr.API.Window_has_focus(self)
}
func (self classWindow) GrabFocus() {
	self.ptr.API.Window_grab_focus(self)
}
func (self classWindow) SetImeActive(active bool) {
	self.ptr.API.Window_set_ime_active(self, active)
}
func (self classWindow) SetImePosition(position Vector2i) {
	self.ptr.API.Window_set_ime_position(self, position)
}
func (self classWindow) IsEmbedded() bool {
	return self.ptr.API.Window_is_embedded(self)
}
func (self classWindow) GetContentsMinimumSize() Vector2 {
	return self.ptr.API.Window_get_contents_minimum_size(self)
}
func (self classWindow) SetContentScaleSize(size Vector2i) {
	self.ptr.API.Window_set_content_scale_size(self, size)
}
func (self classWindow) GetContentScaleSize() Vector2i {
	return self.ptr.API.Window_get_content_scale_size(self)
}
func (self classWindow) SetContentScaleMode(mode WindowContentScaleMode) {
	self.ptr.API.Window_set_content_scale_mode(self, mode)
}
func (self classWindow) GetContentScaleMode() WindowContentScaleMode {
	return self.ptr.API.Window_get_content_scale_mode(self)
}
func (self classWindow) SetContentScaleAspect(aspect WindowContentScaleAspect) {
	self.ptr.API.Window_set_content_scale_aspect(self, aspect)
}
func (self classWindow) GetContentScaleAspect() WindowContentScaleAspect {
	return self.ptr.API.Window_get_content_scale_aspect(self)
}
func (self classWindow) SetContentScaleStretch(stretch WindowContentScaleStretch) {
	self.ptr.API.Window_set_content_scale_stretch(self, stretch)
}
func (self classWindow) GetContentScaleStretch() WindowContentScaleStretch {
	return self.ptr.API.Window_get_content_scale_stretch(self)
}
func (self classWindow) SetKeepTitleVisible(title_visible bool) {
	self.ptr.API.Window_set_keep_title_visible(self, title_visible)
}
func (self classWindow) GetKeepTitleVisible() bool {
	return self.ptr.API.Window_get_keep_title_visible(self)
}
func (self classWindow) SetContentScaleFactor(factor Float) {
	self.ptr.API.Window_set_content_scale_factor(self, factor)
}
func (self classWindow) GetContentScaleFactor() Float {
	return self.ptr.API.Window_get_content_scale_factor(self)
}
func (self classWindow) SetUseFontOversampling(enable bool) {
	self.ptr.API.Window_set_use_font_oversampling(self, enable)
}
func (self classWindow) IsUsingFontOversampling() bool {
	return self.ptr.API.Window_is_using_font_oversampling(self)
}
func (self classWindow) SetMousePassthroughPolygon(polygon PackedVector2Array) {
	self.ptr.API.Window_set_mouse_passthrough_polygon(self, polygon)
}
func (self classWindow) GetMousePassthroughPolygon() PackedVector2Array {
	return self.ptr.API.Window_get_mouse_passthrough_polygon(self)
}
func (self classWindow) SetWrapControls(enable bool) {
	self.ptr.API.Window_set_wrap_controls(self, enable)
}
func (self classWindow) IsWrappingControls() bool {
	return self.ptr.API.Window_is_wrapping_controls(self)
}
func (self classWindow) ChildControlsChanged() {
	self.ptr.API.Window_child_controls_changed(self)
}
func (self classWindow) SetTheme(theme Theme) {
	self.ptr.API.Window_set_theme(self, theme)
}
func (self classWindow) GetTheme() Theme {
	return self.ptr.API.Window_get_theme(self)
}
func (self classWindow) SetThemeTypeVariation(theme_type StringName) {
	self.ptr.API.Window_set_theme_type_variation(self, theme_type)
}
func (self classWindow) GetThemeTypeVariation() StringName {
	return self.ptr.API.Window_get_theme_type_variation(self)
}
func (self classWindow) BeginBulkThemeOverride() {
	self.ptr.API.Window_begin_bulk_theme_override(self)
}
func (self classWindow) EndBulkThemeOverride() {
	self.ptr.API.Window_end_bulk_theme_override(self)
}
func (self classWindow) AddThemeIconOverride(name StringName, texture Texture2D) {
	self.ptr.API.Window_add_theme_icon_override(self, name, texture)
}
func (self classWindow) AddThemeStyleboxOverride(name StringName, stylebox StyleBox) {
	self.ptr.API.Window_add_theme_stylebox_override(self, name, stylebox)
}
func (self classWindow) AddThemeFontOverride(name StringName, font Font) {
	self.ptr.API.Window_add_theme_font_override(self, name, font)
}
func (self classWindow) AddThemeFontSizeOverride(name StringName, font_size Int) {
	self.ptr.API.Window_add_theme_font_size_override(self, name, font_size)
}
func (self classWindow) AddThemeColorOverride(name StringName, color Color) {
	self.ptr.API.Window_add_theme_color_override(self, name, color)
}
func (self classWindow) AddThemeConstantOverride(name StringName, constant Int) {
	self.ptr.API.Window_add_theme_constant_override(self, name, constant)
}
func (self classWindow) RemoveThemeIconOverride(name StringName) {
	self.ptr.API.Window_remove_theme_icon_override(self, name)
}
func (self classWindow) RemoveThemeStyleboxOverride(name StringName) {
	self.ptr.API.Window_remove_theme_stylebox_override(self, name)
}
func (self classWindow) RemoveThemeFontOverride(name StringName) {
	self.ptr.API.Window_remove_theme_font_override(self, name)
}
func (self classWindow) RemoveThemeFontSizeOverride(name StringName) {
	self.ptr.API.Window_remove_theme_font_size_override(self, name)
}
func (self classWindow) RemoveThemeColorOverride(name StringName) {
	self.ptr.API.Window_remove_theme_color_override(self, name)
}
func (self classWindow) RemoveThemeConstantOverride(name StringName) {
	self.ptr.API.Window_remove_theme_constant_override(self, name)
}
func (self classWindow) GetThemeIcon(name StringName, theme_type StringName) Texture2D {
	return self.ptr.API.Window_get_theme_icon(self, name, theme_type)
}
func (self classWindow) GetThemeStylebox(name StringName, theme_type StringName) StyleBox {
	return self.ptr.API.Window_get_theme_stylebox(self, name, theme_type)
}
func (self classWindow) GetThemeFont(name StringName, theme_type StringName) Font {
	return self.ptr.API.Window_get_theme_font(self, name, theme_type)
}
func (self classWindow) GetThemeFontSize(name StringName, theme_type StringName) Int {
	return self.ptr.API.Window_get_theme_font_size(self, name, theme_type)
}
func (self classWindow) GetThemeColor(name StringName, theme_type StringName) Color {
	return self.ptr.API.Window_get_theme_color(self, name, theme_type)
}
func (self classWindow) GetThemeConstant(name StringName, theme_type StringName) Int {
	return self.ptr.API.Window_get_theme_constant(self, name, theme_type)
}
func (self classWindow) HasThemeIconOverride(name StringName) bool {
	return self.ptr.API.Window_has_theme_icon_override(self, name)
}
func (self classWindow) HasThemeStyleboxOverride(name StringName) bool {
	return self.ptr.API.Window_has_theme_stylebox_override(self, name)
}
func (self classWindow) HasThemeFontOverride(name StringName) bool {
	return self.ptr.API.Window_has_theme_font_override(self, name)
}
func (self classWindow) HasThemeFontSizeOverride(name StringName) bool {
	return self.ptr.API.Window_has_theme_font_size_override(self, name)
}
func (self classWindow) HasThemeColorOverride(name StringName) bool {
	return self.ptr.API.Window_has_theme_color_override(self, name)
}
func (self classWindow) HasThemeConstantOverride(name StringName) bool {
	return self.ptr.API.Window_has_theme_constant_override(self, name)
}
func (self classWindow) HasThemeIcon(name StringName, theme_type StringName) bool {
	return self.ptr.API.Window_has_theme_icon(self, name, theme_type)
}
func (self classWindow) HasThemeStylebox(name StringName, theme_type StringName) bool {
	return self.ptr.API.Window_has_theme_stylebox(self, name, theme_type)
}
func (self classWindow) HasThemeFont(name StringName, theme_type StringName) bool {
	return self.ptr.API.Window_has_theme_font(self, name, theme_type)
}
func (self classWindow) HasThemeFontSize(name StringName, theme_type StringName) bool {
	return self.ptr.API.Window_has_theme_font_size(self, name, theme_type)
}
func (self classWindow) HasThemeColor(name StringName, theme_type StringName) bool {
	return self.ptr.API.Window_has_theme_color(self, name, theme_type)
}
func (self classWindow) HasThemeConstant(name StringName, theme_type StringName) bool {
	return self.ptr.API.Window_has_theme_constant(self, name, theme_type)
}
func (self classWindow) GetThemeDefaultBaseScale() Float {
	return self.ptr.API.Window_get_theme_default_base_scale(self)
}
func (self classWindow) GetThemeDefaultFont() Font {
	return self.ptr.API.Window_get_theme_default_font(self)
}
func (self classWindow) GetThemeDefaultFontSize() Int {
	return self.ptr.API.Window_get_theme_default_font_size(self)
}
func (self classWindow) SetLayoutDirection(direction WindowLayoutDirection) {
	self.ptr.API.Window_set_layout_direction(self, direction)
}
func (self classWindow) GetLayoutDirection() WindowLayoutDirection {
	return self.ptr.API.Window_get_layout_direction(self)
}
func (self classWindow) IsLayoutRtl() bool {
	return self.ptr.API.Window_is_layout_rtl(self)
}
func (self classWindow) SetAutoTranslate(enable bool) {
	self.ptr.API.Window_set_auto_translate(self, enable)
}
func (self classWindow) IsAutoTranslating() bool {
	return self.ptr.API.Window_is_auto_translating(self)
}
func (self classWindow) Popup(rect Rect2i) {
	self.ptr.API.Window_popup(self, rect)
}
func (self classWindow) PopupOnParent(parent_rect Rect2i) {
	self.ptr.API.Window_popup_on_parent(self, parent_rect)
}
func (self classWindow) PopupCentered(minsize Vector2i) {
	self.ptr.API.Window_popup_centered(self, minsize)
}
func (self classWindow) PopupCenteredRatio(ratio Float) {
	self.ptr.API.Window_popup_centered_ratio(self, ratio)
}
func (self classWindow) PopupCenteredClamped(minsize Vector2i, fallback_ratio Float) {
	self.ptr.API.Window_popup_centered_clamped(self, minsize, fallback_ratio)
}
func (self classWindow) PopupExclusive(from_node Node, rect Rect2i) {
	self.ptr.API.Window_popup_exclusive(self, from_node, rect)
}
func (self classWindow) PopupExclusiveOnParent(from_node Node, parent_rect Rect2i) {
	self.ptr.API.Window_popup_exclusive_on_parent(self, from_node, parent_rect)
}
func (self classWindow) PopupExclusiveCentered(from_node Node, minsize Vector2i) {
	self.ptr.API.Window_popup_exclusive_centered(self, from_node, minsize)
}
func (self classWindow) PopupExclusiveCenteredRatio(from_node Node, ratio Float) {
	self.ptr.API.Window_popup_exclusive_centered_ratio(self, from_node, ratio)
}
func (self classWindow) PopupExclusiveCenteredClamped(from_node Node, minsize Vector2i, fallback_ratio Float) {
	self.ptr.API.Window_popup_exclusive_centered_clamped(self, from_node, minsize, fallback_ratio)
}

type classWorkerThreadPool struct{ Class[classWorkerThreadPool] }

func (self classWorkerThreadPool) Super() Object {
	var super Object
	super.ptr = self.ptr
	return super
}

func (self classWorkerThreadPool) Object() Object { return self.Super() }

func (self classWorkerThreadPool) isSingleton() {}
func (self classWorkerThreadPool) AddTask(action Callable, high_priority bool, description String) Int {
	return self.ptr.API.WorkerThreadPool_add_task(self, action, high_priority, description)
}
func (self classWorkerThreadPool) IsTaskCompleted(task_id Int) bool {
	return self.ptr.API.WorkerThreadPool_is_task_completed(self, task_id)
}
func (self classWorkerThreadPool) WaitForTaskCompletion(task_id Int) int64 {
	return self.ptr.API.WorkerThreadPool_wait_for_task_completion(self, task_id)
}
func (self classWorkerThreadPool) AddGroupTask(action Callable, elements Int, tasks_needed Int, high_priority bool, description String) Int {
	return self.ptr.API.WorkerThreadPool_add_group_task(self, action, elements, tasks_needed, high_priority, description)
}
func (self classWorkerThreadPool) IsGroupTaskCompleted(group_id Int) bool {
	return self.ptr.API.WorkerThreadPool_is_group_task_completed(self, group_id)
}
func (self classWorkerThreadPool) GetGroupProcessedElementCount(group_id Int) Int {
	return self.ptr.API.WorkerThreadPool_get_group_processed_element_count(self, group_id)
}
func (self classWorkerThreadPool) WaitForGroupTaskCompletion(group_id Int) {
	self.ptr.API.WorkerThreadPool_wait_for_group_task_completion(self, group_id)
}

type classWorld2D struct{ Class[classWorld2D] }

func (self classWorld2D) Super() Resource { var super Resource; super.ptr = self.ptr; return super }

func (self classWorld2D) Resource() Resource { return self.Super() }
func (self classWorld2D) GetCanvas() RID {
	return self.ptr.API.World2D_get_canvas(self)
}
func (self classWorld2D) GetSpace() RID {
	return self.ptr.API.World2D_get_space(self)
}
func (self classWorld2D) GetNavigationMap() RID {
	return self.ptr.API.World2D_get_navigation_map(self)
}
func (self classWorld2D) GetDirectSpaceState() PhysicsDirectSpaceState2D {
	return self.ptr.API.World2D_get_direct_space_state(self)
}

type classWorld3D struct{ Class[classWorld3D] }

func (self classWorld3D) Super() Resource { var super Resource; super.ptr = self.ptr; return super }

func (self classWorld3D) Resource() Resource { return self.Super() }
func (self classWorld3D) GetSpace() RID {
	return self.ptr.API.World3D_get_space(self)
}
func (self classWorld3D) GetNavigationMap() RID {
	return self.ptr.API.World3D_get_navigation_map(self)
}
func (self classWorld3D) GetScenario() RID {
	return self.ptr.API.World3D_get_scenario(self)
}
func (self classWorld3D) SetEnvironment(env Environment) {
	self.ptr.API.World3D_set_environment(self, env)
}
func (self classWorld3D) GetEnvironment() Environment {
	return self.ptr.API.World3D_get_environment(self)
}
func (self classWorld3D) SetFallbackEnvironment(env Environment) {
	self.ptr.API.World3D_set_fallback_environment(self, env)
}
func (self classWorld3D) GetFallbackEnvironment() Environment {
	return self.ptr.API.World3D_get_fallback_environment(self)
}
func (self classWorld3D) SetCameraAttributes(attributes CameraAttributes) {
	self.ptr.API.World3D_set_camera_attributes(self, attributes)
}
func (self classWorld3D) GetCameraAttributes() CameraAttributes {
	return self.ptr.API.World3D_get_camera_attributes(self)
}
func (self classWorld3D) GetDirectSpaceState() PhysicsDirectSpaceState3D {
	return self.ptr.API.World3D_get_direct_space_state(self)
}

type classWorldBoundaryShape2D struct {
	Class[classWorldBoundaryShape2D]
}

func (self classWorldBoundaryShape2D) Super() Shape2D {
	var super Shape2D
	super.ptr = self.ptr
	return super
}

func (self classWorldBoundaryShape2D) Shape2D() Shape2D { return self.Super() }
func (self classWorldBoundaryShape2D) SetNormal(normal Vector2) {
	self.ptr.API.WorldBoundaryShape2D_set_normal(self, normal)
}
func (self classWorldBoundaryShape2D) GetNormal() Vector2 {
	return self.ptr.API.WorldBoundaryShape2D_get_normal(self)
}
func (self classWorldBoundaryShape2D) SetDistance(distance Float) {
	self.ptr.API.WorldBoundaryShape2D_set_distance(self, distance)
}
func (self classWorldBoundaryShape2D) GetDistance() Float {
	return self.ptr.API.WorldBoundaryShape2D_get_distance(self)
}

type classWorldBoundaryShape3D struct {
	Class[classWorldBoundaryShape3D]
}

func (self classWorldBoundaryShape3D) Super() Shape3D {
	var super Shape3D
	super.ptr = self.ptr
	return super
}

func (self classWorldBoundaryShape3D) Shape3D() Shape3D { return self.Super() }
func (self classWorldBoundaryShape3D) SetPlane(plane Plane) {
	self.ptr.API.WorldBoundaryShape3D_set_plane(self, plane)
}
func (self classWorldBoundaryShape3D) GetPlane() Plane {
	return self.ptr.API.WorldBoundaryShape3D_get_plane(self)
}

type classWorldEnvironment struct{ Class[classWorldEnvironment] }

func (self classWorldEnvironment) Super() Node { var super Node; super.ptr = self.ptr; return super }

func (self classWorldEnvironment) Node() Node { return self.Super() }
func (self classWorldEnvironment) SetEnvironment(env Environment) {
	self.ptr.API.WorldEnvironment_set_environment(self, env)
}
func (self classWorldEnvironment) GetEnvironment() Environment {
	return self.ptr.API.WorldEnvironment_get_environment(self)
}
func (self classWorldEnvironment) SetCameraAttributes(camera_attributes CameraAttributes) {
	self.ptr.API.WorldEnvironment_set_camera_attributes(self, camera_attributes)
}
func (self classWorldEnvironment) GetCameraAttributes() CameraAttributes {
	return self.ptr.API.WorldEnvironment_get_camera_attributes(self)
}

type classX509Certificate struct{ Class[classX509Certificate] }

func (self classX509Certificate) Super() Resource {
	var super Resource
	super.ptr = self.ptr
	return super
}

func (self classX509Certificate) Resource() Resource { return self.Super() }
func (self classX509Certificate) Save(path String) int64 {
	return self.ptr.API.X509Certificate_save(self, path)
}
func (self classX509Certificate) Load(path String) int64 {
	return self.ptr.API.X509Certificate_load(self, path)
}
func (self classX509Certificate) SaveToString() String {
	return self.ptr.API.X509Certificate_save_to_string(self)
}
func (self classX509Certificate) LoadFromString(s String) int64 {
	return self.ptr.API.X509Certificate_load_from_string(self, s)
}

type classXMLParser struct{ Class[classXMLParser] }

func (self classXMLParser) Super() RefCounted {
	var super RefCounted
	super.ptr = self.ptr
	return super
}

func (self classXMLParser) RefCounted() RefCounted { return self.Super() }
func (self classXMLParser) Read() int64 {
	return self.ptr.API.XMLParser_read(self)
}
func (self classXMLParser) GetNodeType() XMLParserNodeType {
	return self.ptr.API.XMLParser_get_node_type(self)
}
func (self classXMLParser) GetNodeName() String {
	return self.ptr.API.XMLParser_get_node_name(self)
}
func (self classXMLParser) GetNodeData() String {
	return self.ptr.API.XMLParser_get_node_data(self)
}
func (self classXMLParser) GetNodeOffset() Int {
	return self.ptr.API.XMLParser_get_node_offset(self)
}
func (self classXMLParser) GetAttributeCount() Int {
	return self.ptr.API.XMLParser_get_attribute_count(self)
}
func (self classXMLParser) GetAttributeName(idx Int) String {
	return self.ptr.API.XMLParser_get_attribute_name(self, idx)
}
func (self classXMLParser) GetAttributeValue(idx Int) String {
	return self.ptr.API.XMLParser_get_attribute_value(self, idx)
}
func (self classXMLParser) HasAttribute(name String) bool {
	return self.ptr.API.XMLParser_has_attribute(self, name)
}
func (self classXMLParser) GetNamedAttributeValue(name String) String {
	return self.ptr.API.XMLParser_get_named_attribute_value(self, name)
}
func (self classXMLParser) GetNamedAttributeValueSafe(name String) String {
	return self.ptr.API.XMLParser_get_named_attribute_value_safe(self, name)
}
func (self classXMLParser) IsEmpty() bool {
	return self.ptr.API.XMLParser_is_empty(self)
}
func (self classXMLParser) GetCurrentLine() Int {
	return self.ptr.API.XMLParser_get_current_line(self)
}
func (self classXMLParser) SkipSection() {
	self.ptr.API.XMLParser_skip_section(self)
}
func (self classXMLParser) SeekTo(position Int) int64 {
	return self.ptr.API.XMLParser_seek(self, position)
}
func (self classXMLParser) Open(file String) int64 {
	return self.ptr.API.XMLParser_open(self, file)
}
func (self classXMLParser) OpenBuffer(buffer PackedByteArray) int64 {
	return self.ptr.API.XMLParser_open_buffer(self, buffer)
}

type classXRAnchor3D struct{ Class[classXRAnchor3D] }

func (self classXRAnchor3D) Super() XRNode3D { var super XRNode3D; super.ptr = self.ptr; return super }

func (self classXRAnchor3D) XRNode3D() XRNode3D { return self.Super() }
func (self classXRAnchor3D) GetSize() Vector3 {
	return self.ptr.API.XRAnchor3D_get_size(self)
}
func (self classXRAnchor3D) GetPlane() Plane {
	return self.ptr.API.XRAnchor3D_get_plane(self)
}

type classXRCamera3D struct{ Class[classXRCamera3D] }

func (self classXRCamera3D) Super() Camera3D { var super Camera3D; super.ptr = self.ptr; return super }

func (self classXRCamera3D) Camera3D() Camera3D { return self.Super() }

type classXRController3D struct{ Class[classXRController3D] }

func (self classXRController3D) Super() XRNode3D {
	var super XRNode3D
	super.ptr = self.ptr
	return super
}

func (self classXRController3D) XRNode3D() XRNode3D { return self.Super() }
func (self classXRController3D) IsButtonPressed(name StringName) bool {
	return self.ptr.API.XRController3D_is_button_pressed(self, name)
}
func (self classXRController3D) GetInput(name StringName) Variant {
	return self.ptr.API.XRController3D_get_input(self, name)
}
func (self classXRController3D) GetFloat(name StringName) Float {
	return self.ptr.API.XRController3D_get_float(self, name)
}
func (self classXRController3D) GetVector2(name StringName) Vector2 {
	return self.ptr.API.XRController3D_get_vector2(self, name)
}
func (self classXRController3D) GetTrackerHand() XRPositionalTrackerTrackerHand {
	return self.ptr.API.XRController3D_get_tracker_hand(self)
}

type classXRInterface struct{ Class[classXRInterface] }

func (self classXRInterface) Super() RefCounted {
	var super RefCounted
	super.ptr = self.ptr
	return super
}

func (self classXRInterface) RefCounted() RefCounted { return self.Super() }
func (self classXRInterface) GetName() StringName {
	return self.ptr.API.XRInterface_get_name(self)
}
func (self classXRInterface) GetCapabilities() Int {
	return self.ptr.API.XRInterface_get_capabilities(self)
}
func (self classXRInterface) IsPrimary() bool {
	return self.ptr.API.XRInterface_is_primary(self)
}
func (self classXRInterface) SetPrimary(primary bool) {
	self.ptr.API.XRInterface_set_primary(self, primary)
}
func (self classXRInterface) IsInitialized() bool {
	return self.ptr.API.XRInterface_is_initialized(self)
}
func (self classXRInterface) Initialize() bool {
	return self.ptr.API.XRInterface_initialize(self)
}
func (self classXRInterface) Uninitialize() {
	self.ptr.API.XRInterface_uninitialize(self)
}
func (self classXRInterface) GetSystemInfo() Dictionary {
	return self.ptr.API.XRInterface_get_system_info(self)
}
func (self classXRInterface) GetTrackingStatus() XRInterfaceTrackingStatus {
	return self.ptr.API.XRInterface_get_tracking_status(self)
}
func (self classXRInterface) GetRenderTargetSize() Vector2 {
	return self.ptr.API.XRInterface_get_render_target_size(self)
}
func (self classXRInterface) GetViewCount() Int {
	return self.ptr.API.XRInterface_get_view_count(self)
}
func (self classXRInterface) TriggerHapticPulse(action_name String, tracker_name StringName, frequency Float, amplitude Float, duration_sec Float, delay_sec Float) {
	self.ptr.API.XRInterface_trigger_haptic_pulse(self, action_name, tracker_name, frequency, amplitude, duration_sec, delay_sec)
}
func (self classXRInterface) SupportsPlayAreaMode(mode XRInterfacePlayAreaMode) bool {
	return self.ptr.API.XRInterface_supports_play_area_mode(self, mode)
}
func (self classXRInterface) GetPlayAreaMode() XRInterfacePlayAreaMode {
	return self.ptr.API.XRInterface_get_play_area_mode(self)
}
func (self classXRInterface) SetPlayAreaMode(mode XRInterfacePlayAreaMode) bool {
	return self.ptr.API.XRInterface_set_play_area_mode(self, mode)
}
func (self classXRInterface) GetPlayArea() PackedVector3Array {
	return self.ptr.API.XRInterface_get_play_area(self)
}
func (self classXRInterface) GetAnchorDetectionIsEnabled() bool {
	return self.ptr.API.XRInterface_get_anchor_detection_is_enabled(self)
}
func (self classXRInterface) SetAnchorDetectionIsEnabled(enable bool) {
	self.ptr.API.XRInterface_set_anchor_detection_is_enabled(self, enable)
}
func (self classXRInterface) GetCameraFeedId() Int {
	return self.ptr.API.XRInterface_get_camera_feed_id(self)
}
func (self classXRInterface) IsPassthroughSupported() bool {
	return self.ptr.API.XRInterface_is_passthrough_supported(self)
}
func (self classXRInterface) IsPassthroughEnabled() bool {
	return self.ptr.API.XRInterface_is_passthrough_enabled(self)
}
func (self classXRInterface) StartPassthrough() bool {
	return self.ptr.API.XRInterface_start_passthrough(self)
}
func (self classXRInterface) StopPassthrough() {
	self.ptr.API.XRInterface_stop_passthrough(self)
}
func (self classXRInterface) GetTransformForView(view Int, cam_transform Transform3D) Transform3D {
	return self.ptr.API.XRInterface_get_transform_for_view(self, view, cam_transform)
}
func (self classXRInterface) GetProjectionForView(view Int, aspect Float, near Float, far Float) Projection {
	return self.ptr.API.XRInterface_get_projection_for_view(self, view, aspect, near, far)
}
func (self classXRInterface) GetSupportedEnvironmentBlendModes() Array {
	return self.ptr.API.XRInterface_get_supported_environment_blend_modes(self)
}
func (self classXRInterface) SetEnvironmentBlendMode(mode XRInterfaceEnvironmentBlendMode) bool {
	return self.ptr.API.XRInterface_set_environment_blend_mode(self, mode)
}
func (self classXRInterface) GetEnvironmentBlendMode() XRInterfaceEnvironmentBlendMode {
	return self.ptr.API.XRInterface_get_environment_blend_mode(self)
}

type classXRInterfaceExtension struct {
	Class[classXRInterfaceExtension]
}

func (self classXRInterfaceExtension) Super() XRInterface {
	var super XRInterface
	super.ptr = self.ptr
	return super
}

func (self classXRInterfaceExtension) XRInterface() XRInterface { return self.Super() }
func (self classXRInterfaceExtension) GetColorTexture() RID {
	return self.ptr.API.XRInterfaceExtension_get_color_texture(self)
}
func (self classXRInterfaceExtension) GetDepthTexture() RID {
	return self.ptr.API.XRInterfaceExtension_get_depth_texture(self)
}
func (self classXRInterfaceExtension) GetVelocityTexture() RID {
	return self.ptr.API.XRInterfaceExtension_get_velocity_texture(self)
}
func (self classXRInterfaceExtension) AddBlit(render_target RID, src_rect Rect2, dst_rect Rect2i, use_layer bool, layer Int, apply_lens_distortion bool, eye_center Vector2, k1 Float, k2 Float, upscale Float, aspect_ratio Float) {
	self.ptr.API.XRInterfaceExtension_add_blit(self, render_target, src_rect, dst_rect, use_layer, layer, apply_lens_distortion, eye_center, k1, k2, upscale, aspect_ratio)
}
func (self classXRInterfaceExtension) GetRenderTargetTexture(render_target RID) RID {
	return self.ptr.API.XRInterfaceExtension_get_render_target_texture(self, render_target)
}

type classXRNode3D struct{ Class[classXRNode3D] }

func (self classXRNode3D) Super() Node3D { var super Node3D; super.ptr = self.ptr; return super }

func (self classXRNode3D) Node3D() Node3D { return self.Super() }
func (self classXRNode3D) SetTracker(tracker_name StringName) {
	self.ptr.API.XRNode3D_set_tracker(self, tracker_name)
}
func (self classXRNode3D) GetTracker() StringName {
	return self.ptr.API.XRNode3D_get_tracker(self)
}
func (self classXRNode3D) SetPoseName(pose StringName) {
	self.ptr.API.XRNode3D_set_pose_name(self, pose)
}
func (self classXRNode3D) GetPoseName() StringName {
	return self.ptr.API.XRNode3D_get_pose_name(self)
}
func (self classXRNode3D) GetIsActive() bool {
	return self.ptr.API.XRNode3D_get_is_active(self)
}
func (self classXRNode3D) GetHasTrackingData() bool {
	return self.ptr.API.XRNode3D_get_has_tracking_data(self)
}
func (self classXRNode3D) GetPose() XRPose {
	return self.ptr.API.XRNode3D_get_pose(self)
}
func (self classXRNode3D) TriggerHapticPulse(action_name String, frequency Float, amplitude Float, duration_sec Float, delay_sec Float) {
	self.ptr.API.XRNode3D_trigger_haptic_pulse(self, action_name, frequency, amplitude, duration_sec, delay_sec)
}

type classXROrigin3D struct{ Class[classXROrigin3D] }

func (self classXROrigin3D) Super() Node3D { var super Node3D; super.ptr = self.ptr; return super }

func (self classXROrigin3D) Node3D() Node3D { return self.Super() }
func (self classXROrigin3D) SetWorldScale(world_scale Float) {
	self.ptr.API.XROrigin3D_set_world_scale(self, world_scale)
}
func (self classXROrigin3D) GetWorldScale() Float {
	return self.ptr.API.XROrigin3D_get_world_scale(self)
}
func (self classXROrigin3D) SetCurrent(enabled bool) {
	self.ptr.API.XROrigin3D_set_current(self, enabled)
}
func (self classXROrigin3D) IsCurrent() bool {
	return self.ptr.API.XROrigin3D_is_current(self)
}

type classXRPose struct{ Class[classXRPose] }

func (self classXRPose) Super() RefCounted { var super RefCounted; super.ptr = self.ptr; return super }

func (self classXRPose) RefCounted() RefCounted { return self.Super() }
func (self classXRPose) SetHasTrackingData(has_tracking_data bool) {
	self.ptr.API.XRPose_set_has_tracking_data(self, has_tracking_data)
}
func (self classXRPose) GetHasTrackingData() bool {
	return self.ptr.API.XRPose_get_has_tracking_data(self)
}
func (self classXRPose) SetName(name StringName) {
	self.ptr.API.XRPose_set_name(self, name)
}
func (self classXRPose) GetName() StringName {
	return self.ptr.API.XRPose_get_name(self)
}
func (self classXRPose) SetTransform(transform Transform3D) {
	self.ptr.API.XRPose_set_transform(self, transform)
}
func (self classXRPose) GetTransform() Transform3D {
	return self.ptr.API.XRPose_get_transform(self)
}
func (self classXRPose) GetAdjustedTransform() Transform3D {
	return self.ptr.API.XRPose_get_adjusted_transform(self)
}
func (self classXRPose) SetLinearVelocity(velocity Vector3) {
	self.ptr.API.XRPose_set_linear_velocity(self, velocity)
}
func (self classXRPose) GetLinearVelocity() Vector3 {
	return self.ptr.API.XRPose_get_linear_velocity(self)
}
func (self classXRPose) SetAngularVelocity(velocity Vector3) {
	self.ptr.API.XRPose_set_angular_velocity(self, velocity)
}
func (self classXRPose) GetAngularVelocity() Vector3 {
	return self.ptr.API.XRPose_get_angular_velocity(self)
}
func (self classXRPose) SetTrackingConfidence(tracking_confidence XRPoseTrackingConfidence) {
	self.ptr.API.XRPose_set_tracking_confidence(self, tracking_confidence)
}
func (self classXRPose) GetTrackingConfidence() XRPoseTrackingConfidence {
	return self.ptr.API.XRPose_get_tracking_confidence(self)
}

type classXRPositionalTracker struct {
	Class[classXRPositionalTracker]
}

func (self classXRPositionalTracker) Super() RefCounted {
	var super RefCounted
	super.ptr = self.ptr
	return super
}

func (self classXRPositionalTracker) RefCounted() RefCounted { return self.Super() }
func (self classXRPositionalTracker) GetTrackerType() XRServerTrackerType {
	return self.ptr.API.XRPositionalTracker_get_tracker_type(self)
}
func (self classXRPositionalTracker) SetTrackerType(atype XRServerTrackerType) {
	self.ptr.API.XRPositionalTracker_set_tracker_type(self, atype)
}
func (self classXRPositionalTracker) GetTrackerName() StringName {
	return self.ptr.API.XRPositionalTracker_get_tracker_name(self)
}
func (self classXRPositionalTracker) SetTrackerName(name StringName) {
	self.ptr.API.XRPositionalTracker_set_tracker_name(self, name)
}
func (self classXRPositionalTracker) GetTrackerDesc() String {
	return self.ptr.API.XRPositionalTracker_get_tracker_desc(self)
}
func (self classXRPositionalTracker) SetTrackerDesc(description String) {
	self.ptr.API.XRPositionalTracker_set_tracker_desc(self, description)
}
func (self classXRPositionalTracker) GetTrackerProfile() String {
	return self.ptr.API.XRPositionalTracker_get_tracker_profile(self)
}
func (self classXRPositionalTracker) SetTrackerProfile(profile String) {
	self.ptr.API.XRPositionalTracker_set_tracker_profile(self, profile)
}
func (self classXRPositionalTracker) GetTrackerHand() XRPositionalTrackerTrackerHand {
	return self.ptr.API.XRPositionalTracker_get_tracker_hand(self)
}
func (self classXRPositionalTracker) SetTrackerHand(hand XRPositionalTrackerTrackerHand) {
	self.ptr.API.XRPositionalTracker_set_tracker_hand(self, hand)
}
func (self classXRPositionalTracker) HasPose(name StringName) bool {
	return self.ptr.API.XRPositionalTracker_has_pose(self, name)
}
func (self classXRPositionalTracker) GetPose(name StringName) XRPose {
	return self.ptr.API.XRPositionalTracker_get_pose(self, name)
}
func (self classXRPositionalTracker) InvalidatePose(name StringName) {
	self.ptr.API.XRPositionalTracker_invalidate_pose(self, name)
}
func (self classXRPositionalTracker) SetPose(name StringName, transform Transform3D, linear_velocity Vector3, angular_velocity Vector3, tracking_confidence XRPoseTrackingConfidence) {
	self.ptr.API.XRPositionalTracker_set_pose(self, name, transform, linear_velocity, angular_velocity, tracking_confidence)
}
func (self classXRPositionalTracker) GetInput(name StringName) Variant {
	return self.ptr.API.XRPositionalTracker_get_input(self, name)
}
func (self classXRPositionalTracker) SetInput(name StringName, value Variant) {
	self.ptr.API.XRPositionalTracker_set_input(self, name, value)
}

type classXRServer struct{ Class[classXRServer] }

func (self classXRServer) Super() Object { var super Object; super.ptr = self.ptr; return super }

func (self classXRServer) Object() Object { return self.Super() }

func (self classXRServer) isSingleton() {}
func (self classXRServer) GetWorldScale() Float {
	return self.ptr.API.XRServer_get_world_scale(self)
}
func (self classXRServer) SetWorldScale(scale Float) {
	self.ptr.API.XRServer_set_world_scale(self, scale)
}
func (self classXRServer) GetWorldOrigin() Transform3D {
	return self.ptr.API.XRServer_get_world_origin(self)
}
func (self classXRServer) SetWorldOrigin(world_origin Transform3D) {
	self.ptr.API.XRServer_set_world_origin(self, world_origin)
}
func (self classXRServer) GetReferenceFrame() Transform3D {
	return self.ptr.API.XRServer_get_reference_frame(self)
}
func (self classXRServer) CenterOnHmd(rotation_mode XRServerRotationMode, keep_height bool) {
	self.ptr.API.XRServer_center_on_hmd(self, rotation_mode, keep_height)
}
func (self classXRServer) GetHmdTransform() Transform3D {
	return self.ptr.API.XRServer_get_hmd_transform(self)
}
func (self classXRServer) AddInterface(intf XRInterface) {
	self.ptr.API.XRServer_add_interface(self, intf)
}
func (self classXRServer) GetInterfaceCount() Int {
	return self.ptr.API.XRServer_get_interface_count(self)
}
func (self classXRServer) RemoveInterface(intf XRInterface) {
	self.ptr.API.XRServer_remove_interface(self, intf)
}
func (self classXRServer) GetInterface(idx Int) XRInterface {
	return self.ptr.API.XRServer_get_interface(self, idx)
}
func (self classXRServer) GetInterfaces() ArrayOf[Dictionary] {
	return self.ptr.API.XRServer_get_interfaces(self)
}
func (self classXRServer) FindInterface(name String) XRInterface {
	return self.ptr.API.XRServer_find_interface(self, name)
}
func (self classXRServer) AddTracker(tracker XRPositionalTracker) {
	self.ptr.API.XRServer_add_tracker(self, tracker)
}
func (self classXRServer) RemoveTracker(tracker XRPositionalTracker) {
	self.ptr.API.XRServer_remove_tracker(self, tracker)
}
func (self classXRServer) GetTrackers(tracker_types Int) Dictionary {
	return self.ptr.API.XRServer_get_trackers(self, tracker_types)
}
func (self classXRServer) GetTracker(tracker_name StringName) XRPositionalTracker {
	return self.ptr.API.XRServer_get_tracker(self, tracker_name)
}
func (self classXRServer) GetPrimaryInterface() XRInterface {
	return self.ptr.API.XRServer_get_primary_interface(self)
}
func (self classXRServer) SetPrimaryInterface(intf XRInterface) {
	self.ptr.API.XRServer_set_primary_interface(self, intf)
}

type classZIPPacker struct{ Class[classZIPPacker] }

func (self classZIPPacker) Super() RefCounted {
	var super RefCounted
	super.ptr = self.ptr
	return super
}

func (self classZIPPacker) RefCounted() RefCounted { return self.Super() }
func (self classZIPPacker) Open(path String, append ZIPPackerZipAppend) int64 {
	return self.ptr.API.ZIPPacker_open(self, path, append)
}
func (self classZIPPacker) StartFile(path String) int64 {
	return self.ptr.API.ZIPPacker_start_file(self, path)
}
func (self classZIPPacker) WriteFile(data PackedByteArray) int64 {
	return self.ptr.API.ZIPPacker_write_file(self, data)
}
func (self classZIPPacker) CloseFile() int64 {
	return self.ptr.API.ZIPPacker_close_file(self)
}
func (self classZIPPacker) Close() int64 {
	return self.ptr.API.ZIPPacker_close(self)
}

type classZIPReader struct{ Class[classZIPReader] }

func (self classZIPReader) Super() RefCounted {
	var super RefCounted
	super.ptr = self.ptr
	return super
}

func (self classZIPReader) RefCounted() RefCounted { return self.Super() }
func (self classZIPReader) Open(path String) int64 {
	return self.ptr.API.ZIPReader_open(self, path)
}
func (self classZIPReader) Close() int64 {
	return self.ptr.API.ZIPReader_close(self)
}
func (self classZIPReader) GetFiles() PackedStringArray {
	return self.ptr.API.ZIPReader_get_files(self)
}
func (self classZIPReader) ReadFile(path String, case_sensitive bool) PackedByteArray {
	return self.ptr.API.ZIPReader_read_file(self, path, case_sensitive)
}
func (self classZIPReader) FileExists(path String, case_sensitive bool) bool {
	return self.ptr.API.ZIPReader_file_exists(self, path, case_sensitive)
}
