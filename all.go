//go:build !generate

// Code generated by the generate package DO NOT EDIT
package gd

type methodsAESContext struct {
	_ [0]*methodsAESContext
	class
}

func (self AESContext) RefCounted() RefCounted {
	var parent RefCounted
	parent.class = self.class
	return parent
}
func (self methodsAESContext) Start(mode AESContextMode, key PackedByteArray, iv PackedByteArray) int64 {
	return self.Runtime.AESContext_start(AESContext{self}, mode, key, iv)
}
func (self methodsAESContext) Update(src PackedByteArray) PackedByteArray {
	return self.Runtime.AESContext_update(AESContext{self}, src)
}
func (self methodsAESContext) GetIvState() PackedByteArray {
	return self.Runtime.AESContext_get_iv_state(AESContext{self})
}
func (self methodsAESContext) Finish() {
	self.Runtime.AESContext_finish(AESContext{self})
}

type methodsAStar2D struct {
	_ [0]*methodsAStar2D
	class
}

func (self AStar2D) RefCounted() RefCounted {
	var parent RefCounted
	parent.class = self.class
	return parent
}
func (self methodsAStar2D) GetAvailablePointId() int64 {
	return self.Runtime.AStar2D_get_available_point_id(AStar2D{self})
}
func (self methodsAStar2D) AddPoint(id int64, position Vector2, weight_scale Float) {
	self.Runtime.AStar2D_add_point(AStar2D{self}, id, position, weight_scale)
}
func (self methodsAStar2D) GetPointPosition(id int64) Vector2 {
	return self.Runtime.AStar2D_get_point_position(AStar2D{self}, id)
}
func (self methodsAStar2D) SetPointPosition(id int64, position Vector2) {
	self.Runtime.AStar2D_set_point_position(AStar2D{self}, id, position)
}
func (self methodsAStar2D) GetPointWeightScale(id int64) Float {
	return self.Runtime.AStar2D_get_point_weight_scale(AStar2D{self}, id)
}
func (self methodsAStar2D) SetPointWeightScale(id int64, weight_scale Float) {
	self.Runtime.AStar2D_set_point_weight_scale(AStar2D{self}, id, weight_scale)
}
func (self methodsAStar2D) RemovePoint(id int64) {
	self.Runtime.AStar2D_remove_point(AStar2D{self}, id)
}
func (self methodsAStar2D) HasPoint(id int64) bool {
	return self.Runtime.AStar2D_has_point(AStar2D{self}, id)
}
func (self methodsAStar2D) GetPointConnections(id int64) PackedInt64Array {
	return self.Runtime.AStar2D_get_point_connections(AStar2D{self}, id)
}
func (self methodsAStar2D) GetPointIds() PackedInt64Array {
	return self.Runtime.AStar2D_get_point_ids(AStar2D{self})
}
func (self methodsAStar2D) SetPointDisabled(id int64, disabled bool) {
	self.Runtime.AStar2D_set_point_disabled(AStar2D{self}, id, disabled)
}
func (self methodsAStar2D) IsPointDisabled(id int64) bool {
	return self.Runtime.AStar2D_is_point_disabled(AStar2D{self}, id)
}
func (self methodsAStar2D) ConnectPoints(id int64, to_id int64, bidirectional bool) {
	self.Runtime.AStar2D_connect_points(AStar2D{self}, id, to_id, bidirectional)
}
func (self methodsAStar2D) DisconnectPoints(id int64, to_id int64, bidirectional bool) {
	self.Runtime.AStar2D_disconnect_points(AStar2D{self}, id, to_id, bidirectional)
}
func (self methodsAStar2D) ArePointsConnected(id int64, to_id int64, bidirectional bool) bool {
	return self.Runtime.AStar2D_are_points_connected(AStar2D{self}, id, to_id, bidirectional)
}
func (self methodsAStar2D) GetPointCount() int64 {
	return self.Runtime.AStar2D_get_point_count(AStar2D{self})
}
func (self methodsAStar2D) GetPointCapacity() int64 {
	return self.Runtime.AStar2D_get_point_capacity(AStar2D{self})
}
func (self methodsAStar2D) ReserveSpace(num_nodes int64) {
	self.Runtime.AStar2D_reserve_space(AStar2D{self}, num_nodes)
}
func (self methodsAStar2D) Clear() {
	self.Runtime.AStar2D_clear(AStar2D{self})
}
func (self methodsAStar2D) GetClosestPoint(to_position Vector2, include_disabled bool) int64 {
	return self.Runtime.AStar2D_get_closest_point(AStar2D{self}, to_position, include_disabled)
}
func (self methodsAStar2D) GetClosestPositionInSegment(to_position Vector2) Vector2 {
	return self.Runtime.AStar2D_get_closest_position_in_segment(AStar2D{self}, to_position)
}
func (self methodsAStar2D) GetPointPath(from_id int64, to_id int64) PackedVector2Array {
	return self.Runtime.AStar2D_get_point_path(AStar2D{self}, from_id, to_id)
}
func (self methodsAStar2D) GetIdPath(from_id int64, to_id int64) PackedInt64Array {
	return self.Runtime.AStar2D_get_id_path(AStar2D{self}, from_id, to_id)
}

type methodsAStar3D struct {
	_ [0]*methodsAStar3D
	class
}

func (self AStar3D) RefCounted() RefCounted {
	var parent RefCounted
	parent.class = self.class
	return parent
}
func (self methodsAStar3D) GetAvailablePointId() int64 {
	return self.Runtime.AStar3D_get_available_point_id(AStar3D{self})
}
func (self methodsAStar3D) AddPoint(id int64, position Vector3, weight_scale Float) {
	self.Runtime.AStar3D_add_point(AStar3D{self}, id, position, weight_scale)
}
func (self methodsAStar3D) GetPointPosition(id int64) Vector3 {
	return self.Runtime.AStar3D_get_point_position(AStar3D{self}, id)
}
func (self methodsAStar3D) SetPointPosition(id int64, position Vector3) {
	self.Runtime.AStar3D_set_point_position(AStar3D{self}, id, position)
}
func (self methodsAStar3D) GetPointWeightScale(id int64) Float {
	return self.Runtime.AStar3D_get_point_weight_scale(AStar3D{self}, id)
}
func (self methodsAStar3D) SetPointWeightScale(id int64, weight_scale Float) {
	self.Runtime.AStar3D_set_point_weight_scale(AStar3D{self}, id, weight_scale)
}
func (self methodsAStar3D) RemovePoint(id int64) {
	self.Runtime.AStar3D_remove_point(AStar3D{self}, id)
}
func (self methodsAStar3D) HasPoint(id int64) bool {
	return self.Runtime.AStar3D_has_point(AStar3D{self}, id)
}
func (self methodsAStar3D) GetPointConnections(id int64) PackedInt64Array {
	return self.Runtime.AStar3D_get_point_connections(AStar3D{self}, id)
}
func (self methodsAStar3D) GetPointIds() PackedInt64Array {
	return self.Runtime.AStar3D_get_point_ids(AStar3D{self})
}
func (self methodsAStar3D) SetPointDisabled(id int64, disabled bool) {
	self.Runtime.AStar3D_set_point_disabled(AStar3D{self}, id, disabled)
}
func (self methodsAStar3D) IsPointDisabled(id int64) bool {
	return self.Runtime.AStar3D_is_point_disabled(AStar3D{self}, id)
}
func (self methodsAStar3D) ConnectPoints(id int64, to_id int64, bidirectional bool) {
	self.Runtime.AStar3D_connect_points(AStar3D{self}, id, to_id, bidirectional)
}
func (self methodsAStar3D) DisconnectPoints(id int64, to_id int64, bidirectional bool) {
	self.Runtime.AStar3D_disconnect_points(AStar3D{self}, id, to_id, bidirectional)
}
func (self methodsAStar3D) ArePointsConnected(id int64, to_id int64, bidirectional bool) bool {
	return self.Runtime.AStar3D_are_points_connected(AStar3D{self}, id, to_id, bidirectional)
}
func (self methodsAStar3D) GetPointCount() int64 {
	return self.Runtime.AStar3D_get_point_count(AStar3D{self})
}
func (self methodsAStar3D) GetPointCapacity() int64 {
	return self.Runtime.AStar3D_get_point_capacity(AStar3D{self})
}
func (self methodsAStar3D) ReserveSpace(num_nodes int64) {
	self.Runtime.AStar3D_reserve_space(AStar3D{self}, num_nodes)
}
func (self methodsAStar3D) Clear() {
	self.Runtime.AStar3D_clear(AStar3D{self})
}
func (self methodsAStar3D) GetClosestPoint(to_position Vector3, include_disabled bool) int64 {
	return self.Runtime.AStar3D_get_closest_point(AStar3D{self}, to_position, include_disabled)
}
func (self methodsAStar3D) GetClosestPositionInSegment(to_position Vector3) Vector3 {
	return self.Runtime.AStar3D_get_closest_position_in_segment(AStar3D{self}, to_position)
}
func (self methodsAStar3D) GetPointPath(from_id int64, to_id int64) PackedVector3Array {
	return self.Runtime.AStar3D_get_point_path(AStar3D{self}, from_id, to_id)
}
func (self methodsAStar3D) GetIdPath(from_id int64, to_id int64) PackedInt64Array {
	return self.Runtime.AStar3D_get_id_path(AStar3D{self}, from_id, to_id)
}

type methodsAStarGrid2D struct {
	_ [0]*methodsAStarGrid2D
	class
}

func (self AStarGrid2D) RefCounted() RefCounted {
	var parent RefCounted
	parent.class = self.class
	return parent
}
func (self methodsAStarGrid2D) SetRegion(region Rect2i) {
	self.Runtime.AStarGrid2D_set_region(AStarGrid2D{self}, region)
}
func (self methodsAStarGrid2D) GetRegion() Rect2i {
	return self.Runtime.AStarGrid2D_get_region(AStarGrid2D{self})
}
func (self methodsAStarGrid2D) SetSize(size Vector2i) {
	self.Runtime.AStarGrid2D_set_size(AStarGrid2D{self}, size)
}
func (self methodsAStarGrid2D) GetSize() Vector2i {
	return self.Runtime.AStarGrid2D_get_size(AStarGrid2D{self})
}
func (self methodsAStarGrid2D) SetOffset(offset Vector2) {
	self.Runtime.AStarGrid2D_set_offset(AStarGrid2D{self}, offset)
}
func (self methodsAStarGrid2D) GetOffset() Vector2 {
	return self.Runtime.AStarGrid2D_get_offset(AStarGrid2D{self})
}
func (self methodsAStarGrid2D) SetCellSize(cell_size Vector2) {
	self.Runtime.AStarGrid2D_set_cell_size(AStarGrid2D{self}, cell_size)
}
func (self methodsAStarGrid2D) GetCellSize() Vector2 {
	return self.Runtime.AStarGrid2D_get_cell_size(AStarGrid2D{self})
}
func (self methodsAStarGrid2D) IsInBounds(x int64, y int64) bool {
	return self.Runtime.AStarGrid2D_is_in_bounds(AStarGrid2D{self}, x, y)
}
func (self methodsAStarGrid2D) IsInBoundsv(id Vector2i) bool {
	return self.Runtime.AStarGrid2D_is_in_boundsv(AStarGrid2D{self}, id)
}
func (self methodsAStarGrid2D) IsDirty() bool {
	return self.Runtime.AStarGrid2D_is_dirty(AStarGrid2D{self})
}
func (self methodsAStarGrid2D) Update() {
	self.Runtime.AStarGrid2D_update(AStarGrid2D{self})
}
func (self methodsAStarGrid2D) SetJumpingEnabled(enabled bool) {
	self.Runtime.AStarGrid2D_set_jumping_enabled(AStarGrid2D{self}, enabled)
}
func (self methodsAStarGrid2D) IsJumpingEnabled() bool {
	return self.Runtime.AStarGrid2D_is_jumping_enabled(AStarGrid2D{self})
}
func (self methodsAStarGrid2D) SetDiagonalMode(mode AStarGrid2DDiagonalMode) {
	self.Runtime.AStarGrid2D_set_diagonal_mode(AStarGrid2D{self}, mode)
}
func (self methodsAStarGrid2D) GetDiagonalMode() AStarGrid2DDiagonalMode {
	return self.Runtime.AStarGrid2D_get_diagonal_mode(AStarGrid2D{self})
}
func (self methodsAStarGrid2D) SetDefaultComputeHeuristic(heuristic AStarGrid2DHeuristic) {
	self.Runtime.AStarGrid2D_set_default_compute_heuristic(AStarGrid2D{self}, heuristic)
}
func (self methodsAStarGrid2D) GetDefaultComputeHeuristic() AStarGrid2DHeuristic {
	return self.Runtime.AStarGrid2D_get_default_compute_heuristic(AStarGrid2D{self})
}
func (self methodsAStarGrid2D) SetDefaultEstimateHeuristic(heuristic AStarGrid2DHeuristic) {
	self.Runtime.AStarGrid2D_set_default_estimate_heuristic(AStarGrid2D{self}, heuristic)
}
func (self methodsAStarGrid2D) GetDefaultEstimateHeuristic() AStarGrid2DHeuristic {
	return self.Runtime.AStarGrid2D_get_default_estimate_heuristic(AStarGrid2D{self})
}
func (self methodsAStarGrid2D) SetPointSolid(id Vector2i, solid bool) {
	self.Runtime.AStarGrid2D_set_point_solid(AStarGrid2D{self}, id, solid)
}
func (self methodsAStarGrid2D) IsPointSolid(id Vector2i) bool {
	return self.Runtime.AStarGrid2D_is_point_solid(AStarGrid2D{self}, id)
}
func (self methodsAStarGrid2D) SetPointWeightScale(id Vector2i, weight_scale Float) {
	self.Runtime.AStarGrid2D_set_point_weight_scale(AStarGrid2D{self}, id, weight_scale)
}
func (self methodsAStarGrid2D) GetPointWeightScale(id Vector2i) Float {
	return self.Runtime.AStarGrid2D_get_point_weight_scale(AStarGrid2D{self}, id)
}
func (self methodsAStarGrid2D) FillSolidRegion(region Rect2i, solid bool) {
	self.Runtime.AStarGrid2D_fill_solid_region(AStarGrid2D{self}, region, solid)
}
func (self methodsAStarGrid2D) FillWeightScaleRegion(region Rect2i, weight_scale Float) {
	self.Runtime.AStarGrid2D_fill_weight_scale_region(AStarGrid2D{self}, region, weight_scale)
}
func (self methodsAStarGrid2D) Clear() {
	self.Runtime.AStarGrid2D_clear(AStarGrid2D{self})
}
func (self methodsAStarGrid2D) GetPointPosition(id Vector2i) Vector2 {
	return self.Runtime.AStarGrid2D_get_point_position(AStarGrid2D{self}, id)
}
func (self methodsAStarGrid2D) GetPointPath(from_id Vector2i, to_id Vector2i) PackedVector2Array {
	return self.Runtime.AStarGrid2D_get_point_path(AStarGrid2D{self}, from_id, to_id)
}
func (self methodsAStarGrid2D) GetIdPath(from_id Vector2i, to_id Vector2i) ArrayOf[Vector2i] {
	return self.Runtime.AStarGrid2D_get_id_path(AStarGrid2D{self}, from_id, to_id)
}

type methodsAcceptDialog struct {
	_ [0]*methodsAcceptDialog
	class
}

func (self AcceptDialog) Window() Window { var parent Window; parent.class = self.class; return parent }
func (self methodsAcceptDialog) GetOkButton() Button {
	return self.Runtime.AcceptDialog_get_ok_button(AcceptDialog{self})
}
func (self methodsAcceptDialog) GetLabel() Label {
	return self.Runtime.AcceptDialog_get_label(AcceptDialog{self})
}
func (self methodsAcceptDialog) SetHideOnOk(enabled bool) {
	self.Runtime.AcceptDialog_set_hide_on_ok(AcceptDialog{self}, enabled)
}
func (self methodsAcceptDialog) GetHideOnOk() bool {
	return self.Runtime.AcceptDialog_get_hide_on_ok(AcceptDialog{self})
}
func (self methodsAcceptDialog) SetCloseOnEscape(enabled bool) {
	self.Runtime.AcceptDialog_set_close_on_escape(AcceptDialog{self}, enabled)
}
func (self methodsAcceptDialog) GetCloseOnEscape() bool {
	return self.Runtime.AcceptDialog_get_close_on_escape(AcceptDialog{self})
}
func (self methodsAcceptDialog) AddButton(text string, right bool, action string) Button {
	return self.Runtime.AcceptDialog_add_button(AcceptDialog{self}, text, right, action)
}
func (self methodsAcceptDialog) AddCancelButton(name string) Button {
	return self.Runtime.AcceptDialog_add_cancel_button(AcceptDialog{self}, name)
}
func (self methodsAcceptDialog) RemoveButton(button Control) {
	self.Runtime.AcceptDialog_remove_button(AcceptDialog{self}, button)
}
func (self methodsAcceptDialog) RegisterTextEnter(line_edit Control) {
	self.Runtime.AcceptDialog_register_text_enter(AcceptDialog{self}, line_edit)
}
func (self methodsAcceptDialog) SetText(text string) {
	self.Runtime.AcceptDialog_set_text(AcceptDialog{self}, text)
}
func (self methodsAcceptDialog) GetText() string {
	return self.Runtime.AcceptDialog_get_text(AcceptDialog{self})
}
func (self methodsAcceptDialog) SetAutowrap(autowrap bool) {
	self.Runtime.AcceptDialog_set_autowrap(AcceptDialog{self}, autowrap)
}
func (self methodsAcceptDialog) HasAutowrap() bool {
	return self.Runtime.AcceptDialog_has_autowrap(AcceptDialog{self})
}
func (self methodsAcceptDialog) SetOkButtonText(text string) {
	self.Runtime.AcceptDialog_set_ok_button_text(AcceptDialog{self}, text)
}
func (self methodsAcceptDialog) GetOkButtonText() string {
	return self.Runtime.AcceptDialog_get_ok_button_text(AcceptDialog{self})
}

type methodsAnimatableBody2D struct {
	_ [0]*methodsAnimatableBody2D
	class
}

func (self AnimatableBody2D) StaticBody2D() StaticBody2D {
	var parent StaticBody2D
	parent.class = self.class
	return parent
}
func (self methodsAnimatableBody2D) SetSyncToPhysics(enable bool) {
	self.Runtime.AnimatableBody2D_set_sync_to_physics(AnimatableBody2D{self}, enable)
}
func (self methodsAnimatableBody2D) IsSyncToPhysicsEnabled() bool {
	return self.Runtime.AnimatableBody2D_is_sync_to_physics_enabled(AnimatableBody2D{self})
}

type methodsAnimatableBody3D struct {
	_ [0]*methodsAnimatableBody3D
	class
}

func (self AnimatableBody3D) StaticBody3D() StaticBody3D {
	var parent StaticBody3D
	parent.class = self.class
	return parent
}
func (self methodsAnimatableBody3D) SetSyncToPhysics(enable bool) {
	self.Runtime.AnimatableBody3D_set_sync_to_physics(AnimatableBody3D{self}, enable)
}
func (self methodsAnimatableBody3D) IsSyncToPhysicsEnabled() bool {
	return self.Runtime.AnimatableBody3D_is_sync_to_physics_enabled(AnimatableBody3D{self})
}

type methodsAnimatedSprite2D struct {
	_ [0]*methodsAnimatedSprite2D
	class
}

func (self AnimatedSprite2D) Node2D() Node2D {
	var parent Node2D
	parent.class = self.class
	return parent
}
func (self methodsAnimatedSprite2D) SetSpriteFrames(sprite_frames SpriteFrames) {
	self.Runtime.AnimatedSprite2D_set_sprite_frames(AnimatedSprite2D{self}, sprite_frames)
}
func (self methodsAnimatedSprite2D) GetSpriteFrames() SpriteFrames {
	return self.Runtime.AnimatedSprite2D_get_sprite_frames(AnimatedSprite2D{self})
}
func (self methodsAnimatedSprite2D) SetAnimation(name string) {
	self.Runtime.AnimatedSprite2D_set_animation(AnimatedSprite2D{self}, name)
}
func (self methodsAnimatedSprite2D) GetAnimation() string {
	return self.Runtime.AnimatedSprite2D_get_animation(AnimatedSprite2D{self})
}
func (self methodsAnimatedSprite2D) SetAutoplay(name string) {
	self.Runtime.AnimatedSprite2D_set_autoplay(AnimatedSprite2D{self}, name)
}
func (self methodsAnimatedSprite2D) GetAutoplay() string {
	return self.Runtime.AnimatedSprite2D_get_autoplay(AnimatedSprite2D{self})
}
func (self methodsAnimatedSprite2D) IsPlaying() bool {
	return self.Runtime.AnimatedSprite2D_is_playing(AnimatedSprite2D{self})
}
func (self methodsAnimatedSprite2D) Play(name string, custom_speed Float, from_end bool) {
	self.Runtime.AnimatedSprite2D_play(AnimatedSprite2D{self}, name, custom_speed, from_end)
}
func (self methodsAnimatedSprite2D) PlayBackwards(name string) {
	self.Runtime.AnimatedSprite2D_play_backwards(AnimatedSprite2D{self}, name)
}
func (self methodsAnimatedSprite2D) Pause() {
	self.Runtime.AnimatedSprite2D_pause(AnimatedSprite2D{self})
}
func (self methodsAnimatedSprite2D) Stop() {
	self.Runtime.AnimatedSprite2D_stop(AnimatedSprite2D{self})
}
func (self methodsAnimatedSprite2D) SetCentered(centered bool) {
	self.Runtime.AnimatedSprite2D_set_centered(AnimatedSprite2D{self}, centered)
}
func (self methodsAnimatedSprite2D) IsCentered() bool {
	return self.Runtime.AnimatedSprite2D_is_centered(AnimatedSprite2D{self})
}
func (self methodsAnimatedSprite2D) SetOffset(offset Vector2) {
	self.Runtime.AnimatedSprite2D_set_offset(AnimatedSprite2D{self}, offset)
}
func (self methodsAnimatedSprite2D) GetOffset() Vector2 {
	return self.Runtime.AnimatedSprite2D_get_offset(AnimatedSprite2D{self})
}
func (self methodsAnimatedSprite2D) SetFlipH(flip_h bool) {
	self.Runtime.AnimatedSprite2D_set_flip_h(AnimatedSprite2D{self}, flip_h)
}
func (self methodsAnimatedSprite2D) IsFlippedH() bool {
	return self.Runtime.AnimatedSprite2D_is_flipped_h(AnimatedSprite2D{self})
}
func (self methodsAnimatedSprite2D) SetFlipV(flip_v bool) {
	self.Runtime.AnimatedSprite2D_set_flip_v(AnimatedSprite2D{self}, flip_v)
}
func (self methodsAnimatedSprite2D) IsFlippedV() bool {
	return self.Runtime.AnimatedSprite2D_is_flipped_v(AnimatedSprite2D{self})
}
func (self methodsAnimatedSprite2D) SetFrame(frame int64) {
	self.Runtime.AnimatedSprite2D_set_frame(AnimatedSprite2D{self}, frame)
}
func (self methodsAnimatedSprite2D) GetFrame() int64 {
	return self.Runtime.AnimatedSprite2D_get_frame(AnimatedSprite2D{self})
}
func (self methodsAnimatedSprite2D) SetFrameProgress(progress Float) {
	self.Runtime.AnimatedSprite2D_set_frame_progress(AnimatedSprite2D{self}, progress)
}
func (self methodsAnimatedSprite2D) GetFrameProgress() Float {
	return self.Runtime.AnimatedSprite2D_get_frame_progress(AnimatedSprite2D{self})
}
func (self methodsAnimatedSprite2D) SetFrameAndProgress(frame int64, progress Float) {
	self.Runtime.AnimatedSprite2D_set_frame_and_progress(AnimatedSprite2D{self}, frame, progress)
}
func (self methodsAnimatedSprite2D) SetSpeedScale(speed_scale Float) {
	self.Runtime.AnimatedSprite2D_set_speed_scale(AnimatedSprite2D{self}, speed_scale)
}
func (self methodsAnimatedSprite2D) GetSpeedScale() Float {
	return self.Runtime.AnimatedSprite2D_get_speed_scale(AnimatedSprite2D{self})
}
func (self methodsAnimatedSprite2D) GetPlayingSpeed() Float {
	return self.Runtime.AnimatedSprite2D_get_playing_speed(AnimatedSprite2D{self})
}

type methodsAnimatedSprite3D struct {
	_ [0]*methodsAnimatedSprite3D
	class
}

func (self AnimatedSprite3D) SpriteBase3D() SpriteBase3D {
	var parent SpriteBase3D
	parent.class = self.class
	return parent
}
func (self methodsAnimatedSprite3D) SetSpriteFrames(sprite_frames SpriteFrames) {
	self.Runtime.AnimatedSprite3D_set_sprite_frames(AnimatedSprite3D{self}, sprite_frames)
}
func (self methodsAnimatedSprite3D) GetSpriteFrames() SpriteFrames {
	return self.Runtime.AnimatedSprite3D_get_sprite_frames(AnimatedSprite3D{self})
}
func (self methodsAnimatedSprite3D) SetAnimation(name string) {
	self.Runtime.AnimatedSprite3D_set_animation(AnimatedSprite3D{self}, name)
}
func (self methodsAnimatedSprite3D) GetAnimation() string {
	return self.Runtime.AnimatedSprite3D_get_animation(AnimatedSprite3D{self})
}
func (self methodsAnimatedSprite3D) SetAutoplay(name string) {
	self.Runtime.AnimatedSprite3D_set_autoplay(AnimatedSprite3D{self}, name)
}
func (self methodsAnimatedSprite3D) GetAutoplay() string {
	return self.Runtime.AnimatedSprite3D_get_autoplay(AnimatedSprite3D{self})
}
func (self methodsAnimatedSprite3D) IsPlaying() bool {
	return self.Runtime.AnimatedSprite3D_is_playing(AnimatedSprite3D{self})
}
func (self methodsAnimatedSprite3D) Play(name string, custom_speed Float, from_end bool) {
	self.Runtime.AnimatedSprite3D_play(AnimatedSprite3D{self}, name, custom_speed, from_end)
}
func (self methodsAnimatedSprite3D) PlayBackwards(name string) {
	self.Runtime.AnimatedSprite3D_play_backwards(AnimatedSprite3D{self}, name)
}
func (self methodsAnimatedSprite3D) Pause() {
	self.Runtime.AnimatedSprite3D_pause(AnimatedSprite3D{self})
}
func (self methodsAnimatedSprite3D) Stop() {
	self.Runtime.AnimatedSprite3D_stop(AnimatedSprite3D{self})
}
func (self methodsAnimatedSprite3D) SetFrame(frame int64) {
	self.Runtime.AnimatedSprite3D_set_frame(AnimatedSprite3D{self}, frame)
}
func (self methodsAnimatedSprite3D) GetFrame() int64 {
	return self.Runtime.AnimatedSprite3D_get_frame(AnimatedSprite3D{self})
}
func (self methodsAnimatedSprite3D) SetFrameProgress(progress Float) {
	self.Runtime.AnimatedSprite3D_set_frame_progress(AnimatedSprite3D{self}, progress)
}
func (self methodsAnimatedSprite3D) GetFrameProgress() Float {
	return self.Runtime.AnimatedSprite3D_get_frame_progress(AnimatedSprite3D{self})
}
func (self methodsAnimatedSprite3D) SetFrameAndProgress(frame int64, progress Float) {
	self.Runtime.AnimatedSprite3D_set_frame_and_progress(AnimatedSprite3D{self}, frame, progress)
}
func (self methodsAnimatedSprite3D) SetSpeedScale(speed_scale Float) {
	self.Runtime.AnimatedSprite3D_set_speed_scale(AnimatedSprite3D{self}, speed_scale)
}
func (self methodsAnimatedSprite3D) GetSpeedScale() Float {
	return self.Runtime.AnimatedSprite3D_get_speed_scale(AnimatedSprite3D{self})
}
func (self methodsAnimatedSprite3D) GetPlayingSpeed() Float {
	return self.Runtime.AnimatedSprite3D_get_playing_speed(AnimatedSprite3D{self})
}

type methodsAnimatedTexture struct {
	_ [0]*methodsAnimatedTexture
	class
}

func (self AnimatedTexture) Texture2D() Texture2D {
	var parent Texture2D
	parent.class = self.class
	return parent
}
func (self methodsAnimatedTexture) SetFrames(frames int64) {
	self.Runtime.AnimatedTexture_set_frames(AnimatedTexture{self}, frames)
}
func (self methodsAnimatedTexture) GetFrames() int64 {
	return self.Runtime.AnimatedTexture_get_frames(AnimatedTexture{self})
}
func (self methodsAnimatedTexture) SetCurrentFrame(frame int64) {
	self.Runtime.AnimatedTexture_set_current_frame(AnimatedTexture{self}, frame)
}
func (self methodsAnimatedTexture) GetCurrentFrame() int64 {
	return self.Runtime.AnimatedTexture_get_current_frame(AnimatedTexture{self})
}
func (self methodsAnimatedTexture) SetPause(pause bool) {
	self.Runtime.AnimatedTexture_set_pause(AnimatedTexture{self}, pause)
}
func (self methodsAnimatedTexture) GetPause() bool {
	return self.Runtime.AnimatedTexture_get_pause(AnimatedTexture{self})
}
func (self methodsAnimatedTexture) SetOneShot(one_shot bool) {
	self.Runtime.AnimatedTexture_set_one_shot(AnimatedTexture{self}, one_shot)
}
func (self methodsAnimatedTexture) GetOneShot() bool {
	return self.Runtime.AnimatedTexture_get_one_shot(AnimatedTexture{self})
}
func (self methodsAnimatedTexture) SetSpeedScale(scale Float) {
	self.Runtime.AnimatedTexture_set_speed_scale(AnimatedTexture{self}, scale)
}
func (self methodsAnimatedTexture) GetSpeedScale() Float {
	return self.Runtime.AnimatedTexture_get_speed_scale(AnimatedTexture{self})
}
func (self methodsAnimatedTexture) SetFrameTexture(frame int64, texture Texture2D) {
	self.Runtime.AnimatedTexture_set_frame_texture(AnimatedTexture{self}, frame, texture)
}
func (self methodsAnimatedTexture) GetFrameTexture(frame int64) Texture2D {
	return self.Runtime.AnimatedTexture_get_frame_texture(AnimatedTexture{self}, frame)
}
func (self methodsAnimatedTexture) SetFrameDuration(frame int64, duration Float) {
	self.Runtime.AnimatedTexture_set_frame_duration(AnimatedTexture{self}, frame, duration)
}
func (self methodsAnimatedTexture) GetFrameDuration(frame int64) Float {
	return self.Runtime.AnimatedTexture_get_frame_duration(AnimatedTexture{self}, frame)
}

type methodsAnimation struct {
	_ [0]*methodsAnimation
	class
}

func (self Animation) Resource() Resource {
	var parent Resource
	parent.class = self.class
	return parent
}
func (self methodsAnimation) AddTrack(atype AnimationTrackType, at_position int64) int64 {
	return self.Runtime.Animation_add_track(Animation{self}, atype, at_position)
}
func (self methodsAnimation) RemoveTrack(track_idx int64) {
	self.Runtime.Animation_remove_track(Animation{self}, track_idx)
}
func (self methodsAnimation) GetTrackCount() int64 {
	return self.Runtime.Animation_get_track_count(Animation{self})
}
func (self methodsAnimation) TrackGetType(track_idx int64) AnimationTrackType {
	return self.Runtime.Animation_track_get_type(Animation{self}, track_idx)
}
func (self methodsAnimation) TrackGetPath(track_idx int64) NodePath {
	return self.Runtime.Animation_track_get_path(Animation{self}, track_idx)
}
func (self methodsAnimation) TrackSetPath(track_idx int64, path NodePath) {
	self.Runtime.Animation_track_set_path(Animation{self}, track_idx, path)
}
func (self methodsAnimation) FindTrack(path NodePath, atype AnimationTrackType) int64 {
	return self.Runtime.Animation_find_track(Animation{self}, path, atype)
}
func (self methodsAnimation) TrackMoveUp(track_idx int64) {
	self.Runtime.Animation_track_move_up(Animation{self}, track_idx)
}
func (self methodsAnimation) TrackMoveDown(track_idx int64) {
	self.Runtime.Animation_track_move_down(Animation{self}, track_idx)
}
func (self methodsAnimation) TrackMoveTo(track_idx int64, to_idx int64) {
	self.Runtime.Animation_track_move_to(Animation{self}, track_idx, to_idx)
}
func (self methodsAnimation) TrackSwap(track_idx int64, with_idx int64) {
	self.Runtime.Animation_track_swap(Animation{self}, track_idx, with_idx)
}
func (self methodsAnimation) TrackSetImported(track_idx int64, imported bool) {
	self.Runtime.Animation_track_set_imported(Animation{self}, track_idx, imported)
}
func (self methodsAnimation) TrackIsImported(track_idx int64) bool {
	return self.Runtime.Animation_track_is_imported(Animation{self}, track_idx)
}
func (self methodsAnimation) TrackSetEnabled(track_idx int64, enabled bool) {
	self.Runtime.Animation_track_set_enabled(Animation{self}, track_idx, enabled)
}
func (self methodsAnimation) TrackIsEnabled(track_idx int64) bool {
	return self.Runtime.Animation_track_is_enabled(Animation{self}, track_idx)
}
func (self methodsAnimation) PositionTrackInsertKey(track_idx int64, time Float, position Vector3) int64 {
	return self.Runtime.Animation_position_track_insert_key(Animation{self}, track_idx, time, position)
}
func (self methodsAnimation) RotationTrackInsertKey(track_idx int64, time Float, rotation Quaternion) int64 {
	return self.Runtime.Animation_rotation_track_insert_key(Animation{self}, track_idx, time, rotation)
}
func (self methodsAnimation) ScaleTrackInsertKey(track_idx int64, time Float, scale Vector3) int64 {
	return self.Runtime.Animation_scale_track_insert_key(Animation{self}, track_idx, time, scale)
}
func (self methodsAnimation) BlendShapeTrackInsertKey(track_idx int64, time Float, amount Float) int64 {
	return self.Runtime.Animation_blend_shape_track_insert_key(Animation{self}, track_idx, time, amount)
}
func (self methodsAnimation) PositionTrackInterpolate(track_idx int64, time_sec Float) Vector3 {
	return self.Runtime.Animation_position_track_interpolate(Animation{self}, track_idx, time_sec)
}
func (self methodsAnimation) RotationTrackInterpolate(track_idx int64, time_sec Float) Quaternion {
	return self.Runtime.Animation_rotation_track_interpolate(Animation{self}, track_idx, time_sec)
}
func (self methodsAnimation) ScaleTrackInterpolate(track_idx int64, time_sec Float) Vector3 {
	return self.Runtime.Animation_scale_track_interpolate(Animation{self}, track_idx, time_sec)
}
func (self methodsAnimation) BlendShapeTrackInterpolate(track_idx int64, time_sec Float) Float {
	return self.Runtime.Animation_blend_shape_track_interpolate(Animation{self}, track_idx, time_sec)
}
func (self methodsAnimation) TrackInsertKey(track_idx int64, time Float, key any, transition Float) int64 {
	return self.Runtime.Animation_track_insert_key(Animation{self}, track_idx, time, key, transition)
}
func (self methodsAnimation) TrackRemoveKey(track_idx int64, key_idx int64) {
	self.Runtime.Animation_track_remove_key(Animation{self}, track_idx, key_idx)
}
func (self methodsAnimation) TrackRemoveKeyAtTime(track_idx int64, time Float) {
	self.Runtime.Animation_track_remove_key_at_time(Animation{self}, track_idx, time)
}
func (self methodsAnimation) TrackSetKeyValue(track_idx int64, key int64, value any) {
	self.Runtime.Animation_track_set_key_value(Animation{self}, track_idx, key, value)
}
func (self methodsAnimation) TrackSetKeyTransition(track_idx int64, key_idx int64, transition Float) {
	self.Runtime.Animation_track_set_key_transition(Animation{self}, track_idx, key_idx, transition)
}
func (self methodsAnimation) TrackSetKeyTime(track_idx int64, key_idx int64, time Float) {
	self.Runtime.Animation_track_set_key_time(Animation{self}, track_idx, key_idx, time)
}
func (self methodsAnimation) TrackGetKeyTransition(track_idx int64, key_idx int64) Float {
	return self.Runtime.Animation_track_get_key_transition(Animation{self}, track_idx, key_idx)
}
func (self methodsAnimation) TrackGetKeyCount(track_idx int64) int64 {
	return self.Runtime.Animation_track_get_key_count(Animation{self}, track_idx)
}
func (self methodsAnimation) TrackGetKeyValue(track_idx int64, key_idx int64) any {
	return self.Runtime.Animation_track_get_key_value(Animation{self}, track_idx, key_idx)
}
func (self methodsAnimation) TrackGetKeyTime(track_idx int64, key_idx int64) Float {
	return self.Runtime.Animation_track_get_key_time(Animation{self}, track_idx, key_idx)
}
func (self methodsAnimation) TrackFindKey(track_idx int64, time Float, find_mode AnimationFindMode) int64 {
	return self.Runtime.Animation_track_find_key(Animation{self}, track_idx, time, find_mode)
}
func (self methodsAnimation) TrackSetInterpolationType(track_idx int64, interpolation AnimationInterpolationType) {
	self.Runtime.Animation_track_set_interpolation_type(Animation{self}, track_idx, interpolation)
}
func (self methodsAnimation) TrackGetInterpolationType(track_idx int64) AnimationInterpolationType {
	return self.Runtime.Animation_track_get_interpolation_type(Animation{self}, track_idx)
}
func (self methodsAnimation) TrackSetInterpolationLoopWrap(track_idx int64, interpolation bool) {
	self.Runtime.Animation_track_set_interpolation_loop_wrap(Animation{self}, track_idx, interpolation)
}
func (self methodsAnimation) TrackGetInterpolationLoopWrap(track_idx int64) bool {
	return self.Runtime.Animation_track_get_interpolation_loop_wrap(Animation{self}, track_idx)
}
func (self methodsAnimation) TrackIsCompressed(track_idx int64) bool {
	return self.Runtime.Animation_track_is_compressed(Animation{self}, track_idx)
}
func (self methodsAnimation) ValueTrackSetUpdateMode(track_idx int64, mode AnimationUpdateMode) {
	self.Runtime.Animation_value_track_set_update_mode(Animation{self}, track_idx, mode)
}
func (self methodsAnimation) ValueTrackGetUpdateMode(track_idx int64) AnimationUpdateMode {
	return self.Runtime.Animation_value_track_get_update_mode(Animation{self}, track_idx)
}
func (self methodsAnimation) ValueTrackInterpolate(track_idx int64, time_sec Float) any {
	return self.Runtime.Animation_value_track_interpolate(Animation{self}, track_idx, time_sec)
}
func (self methodsAnimation) MethodTrackGetName(track_idx int64, key_idx int64) string {
	return self.Runtime.Animation_method_track_get_name(Animation{self}, track_idx, key_idx)
}
func (self methodsAnimation) MethodTrackGetParams(track_idx int64, key_idx int64) Array {
	return self.Runtime.Animation_method_track_get_params(Animation{self}, track_idx, key_idx)
}
func (self methodsAnimation) BezierTrackInsertKey(track_idx int64, time Float, value Float, in_handle Vector2, out_handle Vector2) int64 {
	return self.Runtime.Animation_bezier_track_insert_key(Animation{self}, track_idx, time, value, in_handle, out_handle)
}
func (self methodsAnimation) BezierTrackSetKeyValue(track_idx int64, key_idx int64, value Float) {
	self.Runtime.Animation_bezier_track_set_key_value(Animation{self}, track_idx, key_idx, value)
}
func (self methodsAnimation) BezierTrackSetKeyInHandle(track_idx int64, key_idx int64, in_handle Vector2, balanced_value_time_ratio Float) {
	self.Runtime.Animation_bezier_track_set_key_in_handle(Animation{self}, track_idx, key_idx, in_handle, balanced_value_time_ratio)
}
func (self methodsAnimation) BezierTrackSetKeyOutHandle(track_idx int64, key_idx int64, out_handle Vector2, balanced_value_time_ratio Float) {
	self.Runtime.Animation_bezier_track_set_key_out_handle(Animation{self}, track_idx, key_idx, out_handle, balanced_value_time_ratio)
}
func (self methodsAnimation) BezierTrackGetKeyValue(track_idx int64, key_idx int64) Float {
	return self.Runtime.Animation_bezier_track_get_key_value(Animation{self}, track_idx, key_idx)
}
func (self methodsAnimation) BezierTrackGetKeyInHandle(track_idx int64, key_idx int64) Vector2 {
	return self.Runtime.Animation_bezier_track_get_key_in_handle(Animation{self}, track_idx, key_idx)
}
func (self methodsAnimation) BezierTrackGetKeyOutHandle(track_idx int64, key_idx int64) Vector2 {
	return self.Runtime.Animation_bezier_track_get_key_out_handle(Animation{self}, track_idx, key_idx)
}
func (self methodsAnimation) BezierTrackInterpolate(track_idx int64, time Float) Float {
	return self.Runtime.Animation_bezier_track_interpolate(Animation{self}, track_idx, time)
}
func (self methodsAnimation) AudioTrackInsertKey(track_idx int64, time Float, stream Resource, start_offset Float, end_offset Float) int64 {
	return self.Runtime.Animation_audio_track_insert_key(Animation{self}, track_idx, time, stream, start_offset, end_offset)
}
func (self methodsAnimation) AudioTrackSetKeyStream(track_idx int64, key_idx int64, stream Resource) {
	self.Runtime.Animation_audio_track_set_key_stream(Animation{self}, track_idx, key_idx, stream)
}
func (self methodsAnimation) AudioTrackSetKeyStartOffset(track_idx int64, key_idx int64, offset Float) {
	self.Runtime.Animation_audio_track_set_key_start_offset(Animation{self}, track_idx, key_idx, offset)
}
func (self methodsAnimation) AudioTrackSetKeyEndOffset(track_idx int64, key_idx int64, offset Float) {
	self.Runtime.Animation_audio_track_set_key_end_offset(Animation{self}, track_idx, key_idx, offset)
}
func (self methodsAnimation) AudioTrackGetKeyStream(track_idx int64, key_idx int64) Resource {
	return self.Runtime.Animation_audio_track_get_key_stream(Animation{self}, track_idx, key_idx)
}
func (self methodsAnimation) AudioTrackGetKeyStartOffset(track_idx int64, key_idx int64) Float {
	return self.Runtime.Animation_audio_track_get_key_start_offset(Animation{self}, track_idx, key_idx)
}
func (self methodsAnimation) AudioTrackGetKeyEndOffset(track_idx int64, key_idx int64) Float {
	return self.Runtime.Animation_audio_track_get_key_end_offset(Animation{self}, track_idx, key_idx)
}
func (self methodsAnimation) AudioTrackSetUseBlend(track_idx int64, enable bool) {
	self.Runtime.Animation_audio_track_set_use_blend(Animation{self}, track_idx, enable)
}
func (self methodsAnimation) AudioTrackIsUseBlend(track_idx int64) bool {
	return self.Runtime.Animation_audio_track_is_use_blend(Animation{self}, track_idx)
}
func (self methodsAnimation) AnimationTrackInsertKey(track_idx int64, time Float, animation string) int64 {
	return self.Runtime.Animation_animation_track_insert_key(Animation{self}, track_idx, time, animation)
}
func (self methodsAnimation) AnimationTrackSetKeyAnimation(track_idx int64, key_idx int64, animation string) {
	self.Runtime.Animation_animation_track_set_key_animation(Animation{self}, track_idx, key_idx, animation)
}
func (self methodsAnimation) AnimationTrackGetKeyAnimation(track_idx int64, key_idx int64) string {
	return self.Runtime.Animation_animation_track_get_key_animation(Animation{self}, track_idx, key_idx)
}
func (self methodsAnimation) SetLength(time_sec Float) {
	self.Runtime.Animation_set_length(Animation{self}, time_sec)
}
func (self methodsAnimation) GetLength() Float {
	return self.Runtime.Animation_get_length(Animation{self})
}
func (self methodsAnimation) SetLoopMode(loop_mode AnimationLoopMode) {
	self.Runtime.Animation_set_loop_mode(Animation{self}, loop_mode)
}
func (self methodsAnimation) GetLoopMode() AnimationLoopMode {
	return self.Runtime.Animation_get_loop_mode(Animation{self})
}
func (self methodsAnimation) SetStep(size_sec Float) {
	self.Runtime.Animation_set_step(Animation{self}, size_sec)
}
func (self methodsAnimation) GetStep() Float {
	return self.Runtime.Animation_get_step(Animation{self})
}
func (self methodsAnimation) Clear() {
	self.Runtime.Animation_clear(Animation{self})
}
func (self methodsAnimation) CopyTrack(track_idx int64, to_animation Animation) {
	self.Runtime.Animation_copy_track(Animation{self}, track_idx, to_animation)
}
func (self methodsAnimation) Compress(page_size int64, fps int64, split_tolerance Float) {
	self.Runtime.Animation_compress(Animation{self}, page_size, fps, split_tolerance)
}

type methodsAnimationLibrary struct {
	_ [0]*methodsAnimationLibrary
	class
}

func (self AnimationLibrary) Resource() Resource {
	var parent Resource
	parent.class = self.class
	return parent
}
func (self methodsAnimationLibrary) AddAnimation(name string, animation Animation) int64 {
	return self.Runtime.AnimationLibrary_add_animation(AnimationLibrary{self}, name, animation)
}
func (self methodsAnimationLibrary) RemoveAnimation(name string) {
	self.Runtime.AnimationLibrary_remove_animation(AnimationLibrary{self}, name)
}
func (self methodsAnimationLibrary) RenameAnimation(name string, newname string) {
	self.Runtime.AnimationLibrary_rename_animation(AnimationLibrary{self}, name, newname)
}
func (self methodsAnimationLibrary) HasAnimation(name string) bool {
	return self.Runtime.AnimationLibrary_has_animation(AnimationLibrary{self}, name)
}
func (self methodsAnimationLibrary) GetAnimation(name string) Animation {
	return self.Runtime.AnimationLibrary_get_animation(AnimationLibrary{self}, name)
}
func (self methodsAnimationLibrary) GetAnimationList() ArrayOf[string] {
	return self.Runtime.AnimationLibrary_get_animation_list(AnimationLibrary{self})
}

type methodsAnimationMixer struct {
	_ [0]*methodsAnimationMixer
	class
}

func (self AnimationMixer) Node() Node { var parent Node; parent.class = self.class; return parent }
func (self methodsAnimationMixer) AddAnimationLibrary(name string, library AnimationLibrary) int64 {
	return self.Runtime.AnimationMixer_add_animation_library(AnimationMixer{self}, name, library)
}
func (self methodsAnimationMixer) RemoveAnimationLibrary(name string) {
	self.Runtime.AnimationMixer_remove_animation_library(AnimationMixer{self}, name)
}
func (self methodsAnimationMixer) RenameAnimationLibrary(name string, newname string) {
	self.Runtime.AnimationMixer_rename_animation_library(AnimationMixer{self}, name, newname)
}
func (self methodsAnimationMixer) HasAnimationLibrary(name string) bool {
	return self.Runtime.AnimationMixer_has_animation_library(AnimationMixer{self}, name)
}
func (self methodsAnimationMixer) GetAnimationLibrary(name string) AnimationLibrary {
	return self.Runtime.AnimationMixer_get_animation_library(AnimationMixer{self}, name)
}
func (self methodsAnimationMixer) GetAnimationLibraryList() ArrayOf[string] {
	return self.Runtime.AnimationMixer_get_animation_library_list(AnimationMixer{self})
}
func (self methodsAnimationMixer) HasAnimation(name string) bool {
	return self.Runtime.AnimationMixer_has_animation(AnimationMixer{self}, name)
}
func (self methodsAnimationMixer) GetAnimation(name string) Animation {
	return self.Runtime.AnimationMixer_get_animation(AnimationMixer{self}, name)
}
func (self methodsAnimationMixer) GetAnimationList() PackedStringArray {
	return self.Runtime.AnimationMixer_get_animation_list(AnimationMixer{self})
}
func (self methodsAnimationMixer) SetActive(active bool) {
	self.Runtime.AnimationMixer_set_active(AnimationMixer{self}, active)
}
func (self methodsAnimationMixer) IsActive() bool {
	return self.Runtime.AnimationMixer_is_active(AnimationMixer{self})
}
func (self methodsAnimationMixer) SetDeterministic(deterministic bool) {
	self.Runtime.AnimationMixer_set_deterministic(AnimationMixer{self}, deterministic)
}
func (self methodsAnimationMixer) IsDeterministic() bool {
	return self.Runtime.AnimationMixer_is_deterministic(AnimationMixer{self})
}
func (self methodsAnimationMixer) SetRootNode(path NodePath) {
	self.Runtime.AnimationMixer_set_root_node(AnimationMixer{self}, path)
}
func (self methodsAnimationMixer) GetRootNode() NodePath {
	return self.Runtime.AnimationMixer_get_root_node(AnimationMixer{self})
}
func (self methodsAnimationMixer) SetCallbackModeProcess(mode AnimationMixerAnimationCallbackModeProcess) {
	self.Runtime.AnimationMixer_set_callback_mode_process(AnimationMixer{self}, mode)
}
func (self methodsAnimationMixer) GetCallbackModeProcess() AnimationMixerAnimationCallbackModeProcess {
	return self.Runtime.AnimationMixer_get_callback_mode_process(AnimationMixer{self})
}
func (self methodsAnimationMixer) SetCallbackModeMethod(mode AnimationMixerAnimationCallbackModeMethod) {
	self.Runtime.AnimationMixer_set_callback_mode_method(AnimationMixer{self}, mode)
}
func (self methodsAnimationMixer) GetCallbackModeMethod() AnimationMixerAnimationCallbackModeMethod {
	return self.Runtime.AnimationMixer_get_callback_mode_method(AnimationMixer{self})
}
func (self methodsAnimationMixer) SetAudioMaxPolyphony(max_polyphony int64) {
	self.Runtime.AnimationMixer_set_audio_max_polyphony(AnimationMixer{self}, max_polyphony)
}
func (self methodsAnimationMixer) GetAudioMaxPolyphony() int64 {
	return self.Runtime.AnimationMixer_get_audio_max_polyphony(AnimationMixer{self})
}
func (self methodsAnimationMixer) SetRootMotionTrack(path NodePath) {
	self.Runtime.AnimationMixer_set_root_motion_track(AnimationMixer{self}, path)
}
func (self methodsAnimationMixer) GetRootMotionTrack() NodePath {
	return self.Runtime.AnimationMixer_get_root_motion_track(AnimationMixer{self})
}
func (self methodsAnimationMixer) GetRootMotionPosition() Vector3 {
	return self.Runtime.AnimationMixer_get_root_motion_position(AnimationMixer{self})
}
func (self methodsAnimationMixer) GetRootMotionRotation() Quaternion {
	return self.Runtime.AnimationMixer_get_root_motion_rotation(AnimationMixer{self})
}
func (self methodsAnimationMixer) GetRootMotionScale() Vector3 {
	return self.Runtime.AnimationMixer_get_root_motion_scale(AnimationMixer{self})
}
func (self methodsAnimationMixer) GetRootMotionPositionAccumulator() Vector3 {
	return self.Runtime.AnimationMixer_get_root_motion_position_accumulator(AnimationMixer{self})
}
func (self methodsAnimationMixer) GetRootMotionRotationAccumulator() Quaternion {
	return self.Runtime.AnimationMixer_get_root_motion_rotation_accumulator(AnimationMixer{self})
}
func (self methodsAnimationMixer) GetRootMotionScaleAccumulator() Vector3 {
	return self.Runtime.AnimationMixer_get_root_motion_scale_accumulator(AnimationMixer{self})
}
func (self methodsAnimationMixer) ClearCaches() {
	self.Runtime.AnimationMixer_clear_caches(AnimationMixer{self})
}
func (self methodsAnimationMixer) Advance(delta Float) {
	self.Runtime.AnimationMixer_advance(AnimationMixer{self}, delta)
}
func (self methodsAnimationMixer) SetResetOnSaveEnabled(enabled bool) {
	self.Runtime.AnimationMixer_set_reset_on_save_enabled(AnimationMixer{self}, enabled)
}
func (self methodsAnimationMixer) IsResetOnSaveEnabled() bool {
	return self.Runtime.AnimationMixer_is_reset_on_save_enabled(AnimationMixer{self})
}
func (self methodsAnimationMixer) FindAnimation(animation Animation) string {
	return self.Runtime.AnimationMixer_find_animation(AnimationMixer{self}, animation)
}
func (self methodsAnimationMixer) FindAnimationLibrary(animation Animation) string {
	return self.Runtime.AnimationMixer_find_animation_library(AnimationMixer{self}, animation)
}

type methodsAnimationNode struct {
	_ [0]*methodsAnimationNode
	class
}

func (self AnimationNode) Resource() Resource {
	var parent Resource
	parent.class = self.class
	return parent
}
func (self methodsAnimationNode) AddInput(name string) bool {
	return self.Runtime.AnimationNode_add_input(AnimationNode{self}, name)
}
func (self methodsAnimationNode) RemoveInput(index int64) {
	self.Runtime.AnimationNode_remove_input(AnimationNode{self}, index)
}
func (self methodsAnimationNode) SetInputName(input int64, name string) bool {
	return self.Runtime.AnimationNode_set_input_name(AnimationNode{self}, input, name)
}
func (self methodsAnimationNode) GetInputName(input int64) string {
	return self.Runtime.AnimationNode_get_input_name(AnimationNode{self}, input)
}
func (self methodsAnimationNode) GetInputCount() int64 {
	return self.Runtime.AnimationNode_get_input_count(AnimationNode{self})
}
func (self methodsAnimationNode) FindInput(name string) int64 {
	return self.Runtime.AnimationNode_find_input(AnimationNode{self}, name)
}
func (self methodsAnimationNode) SetFilterPath(path NodePath, enable bool) {
	self.Runtime.AnimationNode_set_filter_path(AnimationNode{self}, path, enable)
}
func (self methodsAnimationNode) IsPathFiltered(path NodePath) bool {
	return self.Runtime.AnimationNode_is_path_filtered(AnimationNode{self}, path)
}
func (self methodsAnimationNode) SetFilterEnabled(enable bool) {
	self.Runtime.AnimationNode_set_filter_enabled(AnimationNode{self}, enable)
}
func (self methodsAnimationNode) IsFilterEnabled() bool {
	return self.Runtime.AnimationNode_is_filter_enabled(AnimationNode{self})
}
func (self methodsAnimationNode) BlendAnimation(animation string, time Float, delta Float, seeked bool, is_external_seeking bool, blend Float, looped_flag AnimationLoopedFlag) {
	self.Runtime.AnimationNode_blend_animation(AnimationNode{self}, animation, time, delta, seeked, is_external_seeking, blend, looped_flag)
}
func (self methodsAnimationNode) BlendNode(name string, node AnimationNode, time Float, seek bool, is_external_seeking bool, blend Float, filter AnimationNodeFilterAction, sync bool, test_only bool) Float {
	return self.Runtime.AnimationNode_blend_node(AnimationNode{self}, name, node, time, seek, is_external_seeking, blend, filter, sync, test_only)
}
func (self methodsAnimationNode) BlendInput(input_index int64, time Float, seek bool, is_external_seeking bool, blend Float, filter AnimationNodeFilterAction, sync bool, test_only bool) Float {
	return self.Runtime.AnimationNode_blend_input(AnimationNode{self}, input_index, time, seek, is_external_seeking, blend, filter, sync, test_only)
}
func (self methodsAnimationNode) SetParameter(name string, value any) {
	self.Runtime.AnimationNode_set_parameter(AnimationNode{self}, name, value)
}
func (self methodsAnimationNode) GetParameter(name string) any {
	return self.Runtime.AnimationNode_get_parameter(AnimationNode{self}, name)
}

type methodsAnimationNodeAdd2 struct {
	_ [0]*methodsAnimationNodeAdd2
	class
}

func (self AnimationNodeAdd2) AnimationNodeSync() AnimationNodeSync {
	var parent AnimationNodeSync
	parent.class = self.class
	return parent
}

type methodsAnimationNodeAdd3 struct {
	_ [0]*methodsAnimationNodeAdd3
	class
}

func (self AnimationNodeAdd3) AnimationNodeSync() AnimationNodeSync {
	var parent AnimationNodeSync
	parent.class = self.class
	return parent
}

type methodsAnimationNodeAnimation struct {
	_ [0]*methodsAnimationNodeAnimation
	class
}

func (self AnimationNodeAnimation) AnimationRootNode() AnimationRootNode {
	var parent AnimationRootNode
	parent.class = self.class
	return parent
}
func (self methodsAnimationNodeAnimation) SetAnimation(name string) {
	self.Runtime.AnimationNodeAnimation_set_animation(AnimationNodeAnimation{self}, name)
}
func (self methodsAnimationNodeAnimation) GetAnimation() string {
	return self.Runtime.AnimationNodeAnimation_get_animation(AnimationNodeAnimation{self})
}
func (self methodsAnimationNodeAnimation) SetPlayMode(mode AnimationNodeAnimationPlayMode) {
	self.Runtime.AnimationNodeAnimation_set_play_mode(AnimationNodeAnimation{self}, mode)
}
func (self methodsAnimationNodeAnimation) GetPlayMode() AnimationNodeAnimationPlayMode {
	return self.Runtime.AnimationNodeAnimation_get_play_mode(AnimationNodeAnimation{self})
}

type methodsAnimationNodeBlend2 struct {
	_ [0]*methodsAnimationNodeBlend2
	class
}

func (self AnimationNodeBlend2) AnimationNodeSync() AnimationNodeSync {
	var parent AnimationNodeSync
	parent.class = self.class
	return parent
}

type methodsAnimationNodeBlend3 struct {
	_ [0]*methodsAnimationNodeBlend3
	class
}

func (self AnimationNodeBlend3) AnimationNodeSync() AnimationNodeSync {
	var parent AnimationNodeSync
	parent.class = self.class
	return parent
}

type methodsAnimationNodeBlendSpace1D struct {
	_ [0]*methodsAnimationNodeBlendSpace1D
	class
}

func (self AnimationNodeBlendSpace1D) AnimationRootNode() AnimationRootNode {
	var parent AnimationRootNode
	parent.class = self.class
	return parent
}
func (self methodsAnimationNodeBlendSpace1D) AddBlendPoint(node AnimationRootNode, pos Float, at_index int64) {
	self.Runtime.AnimationNodeBlendSpace1D_add_blend_point(AnimationNodeBlendSpace1D{self}, node, pos, at_index)
}
func (self methodsAnimationNodeBlendSpace1D) SetBlendPointPosition(point int64, pos Float) {
	self.Runtime.AnimationNodeBlendSpace1D_set_blend_point_position(AnimationNodeBlendSpace1D{self}, point, pos)
}
func (self methodsAnimationNodeBlendSpace1D) GetBlendPointPosition(point int64) Float {
	return self.Runtime.AnimationNodeBlendSpace1D_get_blend_point_position(AnimationNodeBlendSpace1D{self}, point)
}
func (self methodsAnimationNodeBlendSpace1D) SetBlendPointNode(point int64, node AnimationRootNode) {
	self.Runtime.AnimationNodeBlendSpace1D_set_blend_point_node(AnimationNodeBlendSpace1D{self}, point, node)
}
func (self methodsAnimationNodeBlendSpace1D) GetBlendPointNode(point int64) AnimationRootNode {
	return self.Runtime.AnimationNodeBlendSpace1D_get_blend_point_node(AnimationNodeBlendSpace1D{self}, point)
}
func (self methodsAnimationNodeBlendSpace1D) RemoveBlendPoint(point int64) {
	self.Runtime.AnimationNodeBlendSpace1D_remove_blend_point(AnimationNodeBlendSpace1D{self}, point)
}
func (self methodsAnimationNodeBlendSpace1D) GetBlendPointCount() int64 {
	return self.Runtime.AnimationNodeBlendSpace1D_get_blend_point_count(AnimationNodeBlendSpace1D{self})
}
func (self methodsAnimationNodeBlendSpace1D) SetMinSpace(min_space Float) {
	self.Runtime.AnimationNodeBlendSpace1D_set_min_space(AnimationNodeBlendSpace1D{self}, min_space)
}
func (self methodsAnimationNodeBlendSpace1D) GetMinSpace() Float {
	return self.Runtime.AnimationNodeBlendSpace1D_get_min_space(AnimationNodeBlendSpace1D{self})
}
func (self methodsAnimationNodeBlendSpace1D) SetMaxSpace(max_space Float) {
	self.Runtime.AnimationNodeBlendSpace1D_set_max_space(AnimationNodeBlendSpace1D{self}, max_space)
}
func (self methodsAnimationNodeBlendSpace1D) GetMaxSpace() Float {
	return self.Runtime.AnimationNodeBlendSpace1D_get_max_space(AnimationNodeBlendSpace1D{self})
}
func (self methodsAnimationNodeBlendSpace1D) SetSnap(snap Float) {
	self.Runtime.AnimationNodeBlendSpace1D_set_snap(AnimationNodeBlendSpace1D{self}, snap)
}
func (self methodsAnimationNodeBlendSpace1D) GetSnap() Float {
	return self.Runtime.AnimationNodeBlendSpace1D_get_snap(AnimationNodeBlendSpace1D{self})
}
func (self methodsAnimationNodeBlendSpace1D) SetValueLabel(text string) {
	self.Runtime.AnimationNodeBlendSpace1D_set_value_label(AnimationNodeBlendSpace1D{self}, text)
}
func (self methodsAnimationNodeBlendSpace1D) GetValueLabel() string {
	return self.Runtime.AnimationNodeBlendSpace1D_get_value_label(AnimationNodeBlendSpace1D{self})
}
func (self methodsAnimationNodeBlendSpace1D) SetBlendMode(mode AnimationNodeBlendSpace1DBlendMode) {
	self.Runtime.AnimationNodeBlendSpace1D_set_blend_mode(AnimationNodeBlendSpace1D{self}, mode)
}
func (self methodsAnimationNodeBlendSpace1D) GetBlendMode() AnimationNodeBlendSpace1DBlendMode {
	return self.Runtime.AnimationNodeBlendSpace1D_get_blend_mode(AnimationNodeBlendSpace1D{self})
}
func (self methodsAnimationNodeBlendSpace1D) SetUseSync(enable bool) {
	self.Runtime.AnimationNodeBlendSpace1D_set_use_sync(AnimationNodeBlendSpace1D{self}, enable)
}
func (self methodsAnimationNodeBlendSpace1D) IsUsingSync() bool {
	return self.Runtime.AnimationNodeBlendSpace1D_is_using_sync(AnimationNodeBlendSpace1D{self})
}

type methodsAnimationNodeBlendSpace2D struct {
	_ [0]*methodsAnimationNodeBlendSpace2D
	class
}

func (self AnimationNodeBlendSpace2D) AnimationRootNode() AnimationRootNode {
	var parent AnimationRootNode
	parent.class = self.class
	return parent
}
func (self methodsAnimationNodeBlendSpace2D) AddBlendPoint(node AnimationRootNode, pos Vector2, at_index int64) {
	self.Runtime.AnimationNodeBlendSpace2D_add_blend_point(AnimationNodeBlendSpace2D{self}, node, pos, at_index)
}
func (self methodsAnimationNodeBlendSpace2D) SetBlendPointPosition(point int64, pos Vector2) {
	self.Runtime.AnimationNodeBlendSpace2D_set_blend_point_position(AnimationNodeBlendSpace2D{self}, point, pos)
}
func (self methodsAnimationNodeBlendSpace2D) GetBlendPointPosition(point int64) Vector2 {
	return self.Runtime.AnimationNodeBlendSpace2D_get_blend_point_position(AnimationNodeBlendSpace2D{self}, point)
}
func (self methodsAnimationNodeBlendSpace2D) SetBlendPointNode(point int64, node AnimationRootNode) {
	self.Runtime.AnimationNodeBlendSpace2D_set_blend_point_node(AnimationNodeBlendSpace2D{self}, point, node)
}
func (self methodsAnimationNodeBlendSpace2D) GetBlendPointNode(point int64) AnimationRootNode {
	return self.Runtime.AnimationNodeBlendSpace2D_get_blend_point_node(AnimationNodeBlendSpace2D{self}, point)
}
func (self methodsAnimationNodeBlendSpace2D) RemoveBlendPoint(point int64) {
	self.Runtime.AnimationNodeBlendSpace2D_remove_blend_point(AnimationNodeBlendSpace2D{self}, point)
}
func (self methodsAnimationNodeBlendSpace2D) GetBlendPointCount() int64 {
	return self.Runtime.AnimationNodeBlendSpace2D_get_blend_point_count(AnimationNodeBlendSpace2D{self})
}
func (self methodsAnimationNodeBlendSpace2D) AddTriangle(x int64, y int64, z int64, at_index int64) {
	self.Runtime.AnimationNodeBlendSpace2D_add_triangle(AnimationNodeBlendSpace2D{self}, x, y, z, at_index)
}
func (self methodsAnimationNodeBlendSpace2D) GetTrianglePoint(triangle int64, point int64) int64 {
	return self.Runtime.AnimationNodeBlendSpace2D_get_triangle_point(AnimationNodeBlendSpace2D{self}, triangle, point)
}
func (self methodsAnimationNodeBlendSpace2D) RemoveTriangle(triangle int64) {
	self.Runtime.AnimationNodeBlendSpace2D_remove_triangle(AnimationNodeBlendSpace2D{self}, triangle)
}
func (self methodsAnimationNodeBlendSpace2D) GetTriangleCount() int64 {
	return self.Runtime.AnimationNodeBlendSpace2D_get_triangle_count(AnimationNodeBlendSpace2D{self})
}
func (self methodsAnimationNodeBlendSpace2D) SetMinSpace(min_space Vector2) {
	self.Runtime.AnimationNodeBlendSpace2D_set_min_space(AnimationNodeBlendSpace2D{self}, min_space)
}
func (self methodsAnimationNodeBlendSpace2D) GetMinSpace() Vector2 {
	return self.Runtime.AnimationNodeBlendSpace2D_get_min_space(AnimationNodeBlendSpace2D{self})
}
func (self methodsAnimationNodeBlendSpace2D) SetMaxSpace(max_space Vector2) {
	self.Runtime.AnimationNodeBlendSpace2D_set_max_space(AnimationNodeBlendSpace2D{self}, max_space)
}
func (self methodsAnimationNodeBlendSpace2D) GetMaxSpace() Vector2 {
	return self.Runtime.AnimationNodeBlendSpace2D_get_max_space(AnimationNodeBlendSpace2D{self})
}
func (self methodsAnimationNodeBlendSpace2D) SetSnap(snap Vector2) {
	self.Runtime.AnimationNodeBlendSpace2D_set_snap(AnimationNodeBlendSpace2D{self}, snap)
}
func (self methodsAnimationNodeBlendSpace2D) GetSnap() Vector2 {
	return self.Runtime.AnimationNodeBlendSpace2D_get_snap(AnimationNodeBlendSpace2D{self})
}
func (self methodsAnimationNodeBlendSpace2D) SetXLabel(text string) {
	self.Runtime.AnimationNodeBlendSpace2D_set_x_label(AnimationNodeBlendSpace2D{self}, text)
}
func (self methodsAnimationNodeBlendSpace2D) GetXLabel() string {
	return self.Runtime.AnimationNodeBlendSpace2D_get_x_label(AnimationNodeBlendSpace2D{self})
}
func (self methodsAnimationNodeBlendSpace2D) SetYLabel(text string) {
	self.Runtime.AnimationNodeBlendSpace2D_set_y_label(AnimationNodeBlendSpace2D{self}, text)
}
func (self methodsAnimationNodeBlendSpace2D) GetYLabel() string {
	return self.Runtime.AnimationNodeBlendSpace2D_get_y_label(AnimationNodeBlendSpace2D{self})
}
func (self methodsAnimationNodeBlendSpace2D) SetAutoTriangles(enable bool) {
	self.Runtime.AnimationNodeBlendSpace2D_set_auto_triangles(AnimationNodeBlendSpace2D{self}, enable)
}
func (self methodsAnimationNodeBlendSpace2D) GetAutoTriangles() bool {
	return self.Runtime.AnimationNodeBlendSpace2D_get_auto_triangles(AnimationNodeBlendSpace2D{self})
}
func (self methodsAnimationNodeBlendSpace2D) SetBlendMode(mode AnimationNodeBlendSpace2DBlendMode) {
	self.Runtime.AnimationNodeBlendSpace2D_set_blend_mode(AnimationNodeBlendSpace2D{self}, mode)
}
func (self methodsAnimationNodeBlendSpace2D) GetBlendMode() AnimationNodeBlendSpace2DBlendMode {
	return self.Runtime.AnimationNodeBlendSpace2D_get_blend_mode(AnimationNodeBlendSpace2D{self})
}
func (self methodsAnimationNodeBlendSpace2D) SetUseSync(enable bool) {
	self.Runtime.AnimationNodeBlendSpace2D_set_use_sync(AnimationNodeBlendSpace2D{self}, enable)
}
func (self methodsAnimationNodeBlendSpace2D) IsUsingSync() bool {
	return self.Runtime.AnimationNodeBlendSpace2D_is_using_sync(AnimationNodeBlendSpace2D{self})
}

type methodsAnimationNodeBlendTree struct {
	_ [0]*methodsAnimationNodeBlendTree
	class
}

func (self AnimationNodeBlendTree) AnimationRootNode() AnimationRootNode {
	var parent AnimationRootNode
	parent.class = self.class
	return parent
}
func (self methodsAnimationNodeBlendTree) AddNode(name string, node AnimationNode, position Vector2) {
	self.Runtime.AnimationNodeBlendTree_add_node(AnimationNodeBlendTree{self}, name, node, position)
}
func (self methodsAnimationNodeBlendTree) GetNode(name string) AnimationNode {
	return self.Runtime.AnimationNodeBlendTree_get_node(AnimationNodeBlendTree{self}, name)
}
func (self methodsAnimationNodeBlendTree) RemoveNode(name string) {
	self.Runtime.AnimationNodeBlendTree_remove_node(AnimationNodeBlendTree{self}, name)
}
func (self methodsAnimationNodeBlendTree) RenameNode(name string, new_name string) {
	self.Runtime.AnimationNodeBlendTree_rename_node(AnimationNodeBlendTree{self}, name, new_name)
}
func (self methodsAnimationNodeBlendTree) HasNode(name string) bool {
	return self.Runtime.AnimationNodeBlendTree_has_node(AnimationNodeBlendTree{self}, name)
}
func (self methodsAnimationNodeBlendTree) ConnectNode(input_node string, input_index int64, output_node string) {
	self.Runtime.AnimationNodeBlendTree_connect_node(AnimationNodeBlendTree{self}, input_node, input_index, output_node)
}
func (self methodsAnimationNodeBlendTree) DisconnectNode(input_node string, input_index int64) {
	self.Runtime.AnimationNodeBlendTree_disconnect_node(AnimationNodeBlendTree{self}, input_node, input_index)
}
func (self methodsAnimationNodeBlendTree) SetNodePosition(name string, position Vector2) {
	self.Runtime.AnimationNodeBlendTree_set_node_position(AnimationNodeBlendTree{self}, name, position)
}
func (self methodsAnimationNodeBlendTree) GetNodePosition(name string) Vector2 {
	return self.Runtime.AnimationNodeBlendTree_get_node_position(AnimationNodeBlendTree{self}, name)
}
func (self methodsAnimationNodeBlendTree) SetGraphOffset(offset Vector2) {
	self.Runtime.AnimationNodeBlendTree_set_graph_offset(AnimationNodeBlendTree{self}, offset)
}
func (self methodsAnimationNodeBlendTree) GetGraphOffset() Vector2 {
	return self.Runtime.AnimationNodeBlendTree_get_graph_offset(AnimationNodeBlendTree{self})
}

type methodsAnimationNodeOneShot struct {
	_ [0]*methodsAnimationNodeOneShot
	class
}

func (self AnimationNodeOneShot) AnimationNodeSync() AnimationNodeSync {
	var parent AnimationNodeSync
	parent.class = self.class
	return parent
}
func (self methodsAnimationNodeOneShot) SetFadeinTime(time Float) {
	self.Runtime.AnimationNodeOneShot_set_fadein_time(AnimationNodeOneShot{self}, time)
}
func (self methodsAnimationNodeOneShot) GetFadeinTime() Float {
	return self.Runtime.AnimationNodeOneShot_get_fadein_time(AnimationNodeOneShot{self})
}
func (self methodsAnimationNodeOneShot) SetFadeinCurve(curve Curve) {
	self.Runtime.AnimationNodeOneShot_set_fadein_curve(AnimationNodeOneShot{self}, curve)
}
func (self methodsAnimationNodeOneShot) GetFadeinCurve() Curve {
	return self.Runtime.AnimationNodeOneShot_get_fadein_curve(AnimationNodeOneShot{self})
}
func (self methodsAnimationNodeOneShot) SetFadeoutTime(time Float) {
	self.Runtime.AnimationNodeOneShot_set_fadeout_time(AnimationNodeOneShot{self}, time)
}
func (self methodsAnimationNodeOneShot) GetFadeoutTime() Float {
	return self.Runtime.AnimationNodeOneShot_get_fadeout_time(AnimationNodeOneShot{self})
}
func (self methodsAnimationNodeOneShot) SetFadeoutCurve(curve Curve) {
	self.Runtime.AnimationNodeOneShot_set_fadeout_curve(AnimationNodeOneShot{self}, curve)
}
func (self methodsAnimationNodeOneShot) GetFadeoutCurve() Curve {
	return self.Runtime.AnimationNodeOneShot_get_fadeout_curve(AnimationNodeOneShot{self})
}
func (self methodsAnimationNodeOneShot) SetAutorestart(active bool) {
	self.Runtime.AnimationNodeOneShot_set_autorestart(AnimationNodeOneShot{self}, active)
}
func (self methodsAnimationNodeOneShot) HasAutorestart() bool {
	return self.Runtime.AnimationNodeOneShot_has_autorestart(AnimationNodeOneShot{self})
}
func (self methodsAnimationNodeOneShot) SetAutorestartDelay(time Float) {
	self.Runtime.AnimationNodeOneShot_set_autorestart_delay(AnimationNodeOneShot{self}, time)
}
func (self methodsAnimationNodeOneShot) GetAutorestartDelay() Float {
	return self.Runtime.AnimationNodeOneShot_get_autorestart_delay(AnimationNodeOneShot{self})
}
func (self methodsAnimationNodeOneShot) SetAutorestartRandomDelay(time Float) {
	self.Runtime.AnimationNodeOneShot_set_autorestart_random_delay(AnimationNodeOneShot{self}, time)
}
func (self methodsAnimationNodeOneShot) GetAutorestartRandomDelay() Float {
	return self.Runtime.AnimationNodeOneShot_get_autorestart_random_delay(AnimationNodeOneShot{self})
}
func (self methodsAnimationNodeOneShot) SetMixMode(mode AnimationNodeOneShotMixMode) {
	self.Runtime.AnimationNodeOneShot_set_mix_mode(AnimationNodeOneShot{self}, mode)
}
func (self methodsAnimationNodeOneShot) GetMixMode() AnimationNodeOneShotMixMode {
	return self.Runtime.AnimationNodeOneShot_get_mix_mode(AnimationNodeOneShot{self})
}

type methodsAnimationNodeOutput struct {
	_ [0]*methodsAnimationNodeOutput
	class
}

func (self AnimationNodeOutput) AnimationNode() AnimationNode {
	var parent AnimationNode
	parent.class = self.class
	return parent
}

type methodsAnimationNodeStateMachine struct {
	_ [0]*methodsAnimationNodeStateMachine
	class
}

func (self AnimationNodeStateMachine) AnimationRootNode() AnimationRootNode {
	var parent AnimationRootNode
	parent.class = self.class
	return parent
}
func (self methodsAnimationNodeStateMachine) AddNode(name string, node AnimationNode, position Vector2) {
	self.Runtime.AnimationNodeStateMachine_add_node(AnimationNodeStateMachine{self}, name, node, position)
}
func (self methodsAnimationNodeStateMachine) ReplaceNode(name string, node AnimationNode) {
	self.Runtime.AnimationNodeStateMachine_replace_node(AnimationNodeStateMachine{self}, name, node)
}
func (self methodsAnimationNodeStateMachine) GetNode(name string) AnimationNode {
	return self.Runtime.AnimationNodeStateMachine_get_node(AnimationNodeStateMachine{self}, name)
}
func (self methodsAnimationNodeStateMachine) RemoveNode(name string) {
	self.Runtime.AnimationNodeStateMachine_remove_node(AnimationNodeStateMachine{self}, name)
}
func (self methodsAnimationNodeStateMachine) RenameNode(name string, new_name string) {
	self.Runtime.AnimationNodeStateMachine_rename_node(AnimationNodeStateMachine{self}, name, new_name)
}
func (self methodsAnimationNodeStateMachine) HasNode(name string) bool {
	return self.Runtime.AnimationNodeStateMachine_has_node(AnimationNodeStateMachine{self}, name)
}
func (self methodsAnimationNodeStateMachine) GetNodeName(node AnimationNode) string {
	return self.Runtime.AnimationNodeStateMachine_get_node_name(AnimationNodeStateMachine{self}, node)
}
func (self methodsAnimationNodeStateMachine) SetNodePosition(name string, position Vector2) {
	self.Runtime.AnimationNodeStateMachine_set_node_position(AnimationNodeStateMachine{self}, name, position)
}
func (self methodsAnimationNodeStateMachine) GetNodePosition(name string) Vector2 {
	return self.Runtime.AnimationNodeStateMachine_get_node_position(AnimationNodeStateMachine{self}, name)
}
func (self methodsAnimationNodeStateMachine) HasTransition(from string, to string) bool {
	return self.Runtime.AnimationNodeStateMachine_has_transition(AnimationNodeStateMachine{self}, from, to)
}
func (self methodsAnimationNodeStateMachine) AddTransition(from string, to string, transition AnimationNodeStateMachineTransition) {
	self.Runtime.AnimationNodeStateMachine_add_transition(AnimationNodeStateMachine{self}, from, to, transition)
}
func (self methodsAnimationNodeStateMachine) GetTransition(idx int64) AnimationNodeStateMachineTransition {
	return self.Runtime.AnimationNodeStateMachine_get_transition(AnimationNodeStateMachine{self}, idx)
}
func (self methodsAnimationNodeStateMachine) GetTransitionFrom(idx int64) string {
	return self.Runtime.AnimationNodeStateMachine_get_transition_from(AnimationNodeStateMachine{self}, idx)
}
func (self methodsAnimationNodeStateMachine) GetTransitionTo(idx int64) string {
	return self.Runtime.AnimationNodeStateMachine_get_transition_to(AnimationNodeStateMachine{self}, idx)
}
func (self methodsAnimationNodeStateMachine) GetTransitionCount() int64 {
	return self.Runtime.AnimationNodeStateMachine_get_transition_count(AnimationNodeStateMachine{self})
}
func (self methodsAnimationNodeStateMachine) RemoveTransitionByIndex(idx int64) {
	self.Runtime.AnimationNodeStateMachine_remove_transition_by_index(AnimationNodeStateMachine{self}, idx)
}
func (self methodsAnimationNodeStateMachine) RemoveTransition(from string, to string) {
	self.Runtime.AnimationNodeStateMachine_remove_transition(AnimationNodeStateMachine{self}, from, to)
}
func (self methodsAnimationNodeStateMachine) SetGraphOffset(offset Vector2) {
	self.Runtime.AnimationNodeStateMachine_set_graph_offset(AnimationNodeStateMachine{self}, offset)
}
func (self methodsAnimationNodeStateMachine) GetGraphOffset() Vector2 {
	return self.Runtime.AnimationNodeStateMachine_get_graph_offset(AnimationNodeStateMachine{self})
}
func (self methodsAnimationNodeStateMachine) SetStateMachineType(state_machine_type AnimationNodeStateMachineStateMachineType) {
	self.Runtime.AnimationNodeStateMachine_set_state_machine_type(AnimationNodeStateMachine{self}, state_machine_type)
}
func (self methodsAnimationNodeStateMachine) GetStateMachineType() AnimationNodeStateMachineStateMachineType {
	return self.Runtime.AnimationNodeStateMachine_get_state_machine_type(AnimationNodeStateMachine{self})
}
func (self methodsAnimationNodeStateMachine) SetAllowTransitionToSelf(enable bool) {
	self.Runtime.AnimationNodeStateMachine_set_allow_transition_to_self(AnimationNodeStateMachine{self}, enable)
}
func (self methodsAnimationNodeStateMachine) IsAllowTransitionToSelf() bool {
	return self.Runtime.AnimationNodeStateMachine_is_allow_transition_to_self(AnimationNodeStateMachine{self})
}
func (self methodsAnimationNodeStateMachine) SetResetEnds(enable bool) {
	self.Runtime.AnimationNodeStateMachine_set_reset_ends(AnimationNodeStateMachine{self}, enable)
}
func (self methodsAnimationNodeStateMachine) AreEndsReset() bool {
	return self.Runtime.AnimationNodeStateMachine_are_ends_reset(AnimationNodeStateMachine{self})
}

type methodsAnimationNodeStateMachinePlayback struct {
	_ [0]*methodsAnimationNodeStateMachinePlayback
	class
}

func (self AnimationNodeStateMachinePlayback) Resource() Resource {
	var parent Resource
	parent.class = self.class
	return parent
}
func (self methodsAnimationNodeStateMachinePlayback) Travel(to_node string, reset_on_teleport bool) {
	self.Runtime.AnimationNodeStateMachinePlayback_travel(AnimationNodeStateMachinePlayback{self}, to_node, reset_on_teleport)
}
func (self methodsAnimationNodeStateMachinePlayback) Start(node string, reset bool) {
	self.Runtime.AnimationNodeStateMachinePlayback_start(AnimationNodeStateMachinePlayback{self}, node, reset)
}
func (self methodsAnimationNodeStateMachinePlayback) Next() {
	self.Runtime.AnimationNodeStateMachinePlayback_next(AnimationNodeStateMachinePlayback{self})
}
func (self methodsAnimationNodeStateMachinePlayback) Stop() {
	self.Runtime.AnimationNodeStateMachinePlayback_stop(AnimationNodeStateMachinePlayback{self})
}
func (self methodsAnimationNodeStateMachinePlayback) IsPlaying() bool {
	return self.Runtime.AnimationNodeStateMachinePlayback_is_playing(AnimationNodeStateMachinePlayback{self})
}
func (self methodsAnimationNodeStateMachinePlayback) GetCurrentNode() string {
	return self.Runtime.AnimationNodeStateMachinePlayback_get_current_node(AnimationNodeStateMachinePlayback{self})
}
func (self methodsAnimationNodeStateMachinePlayback) GetCurrentPlayPosition() Float {
	return self.Runtime.AnimationNodeStateMachinePlayback_get_current_play_position(AnimationNodeStateMachinePlayback{self})
}
func (self methodsAnimationNodeStateMachinePlayback) GetCurrentLength() Float {
	return self.Runtime.AnimationNodeStateMachinePlayback_get_current_length(AnimationNodeStateMachinePlayback{self})
}
func (self methodsAnimationNodeStateMachinePlayback) GetFadingFromNode() string {
	return self.Runtime.AnimationNodeStateMachinePlayback_get_fading_from_node(AnimationNodeStateMachinePlayback{self})
}
func (self methodsAnimationNodeStateMachinePlayback) GetTravelPath() ArrayOf[string] {
	return self.Runtime.AnimationNodeStateMachinePlayback_get_travel_path(AnimationNodeStateMachinePlayback{self})
}

type methodsAnimationNodeStateMachineTransition struct {
	_ [0]*methodsAnimationNodeStateMachineTransition
	class
}

func (self AnimationNodeStateMachineTransition) Resource() Resource {
	var parent Resource
	parent.class = self.class
	return parent
}
func (self methodsAnimationNodeStateMachineTransition) SetSwitchMode(mode AnimationNodeStateMachineTransitionSwitchMode) {
	self.Runtime.AnimationNodeStateMachineTransition_set_switch_mode(AnimationNodeStateMachineTransition{self}, mode)
}
func (self methodsAnimationNodeStateMachineTransition) GetSwitchMode() AnimationNodeStateMachineTransitionSwitchMode {
	return self.Runtime.AnimationNodeStateMachineTransition_get_switch_mode(AnimationNodeStateMachineTransition{self})
}
func (self methodsAnimationNodeStateMachineTransition) SetAdvanceMode(mode AnimationNodeStateMachineTransitionAdvanceMode) {
	self.Runtime.AnimationNodeStateMachineTransition_set_advance_mode(AnimationNodeStateMachineTransition{self}, mode)
}
func (self methodsAnimationNodeStateMachineTransition) GetAdvanceMode() AnimationNodeStateMachineTransitionAdvanceMode {
	return self.Runtime.AnimationNodeStateMachineTransition_get_advance_mode(AnimationNodeStateMachineTransition{self})
}
func (self methodsAnimationNodeStateMachineTransition) SetAdvanceCondition(name string) {
	self.Runtime.AnimationNodeStateMachineTransition_set_advance_condition(AnimationNodeStateMachineTransition{self}, name)
}
func (self methodsAnimationNodeStateMachineTransition) GetAdvanceCondition() string {
	return self.Runtime.AnimationNodeStateMachineTransition_get_advance_condition(AnimationNodeStateMachineTransition{self})
}
func (self methodsAnimationNodeStateMachineTransition) SetXfadeTime(secs Float) {
	self.Runtime.AnimationNodeStateMachineTransition_set_xfade_time(AnimationNodeStateMachineTransition{self}, secs)
}
func (self methodsAnimationNodeStateMachineTransition) GetXfadeTime() Float {
	return self.Runtime.AnimationNodeStateMachineTransition_get_xfade_time(AnimationNodeStateMachineTransition{self})
}
func (self methodsAnimationNodeStateMachineTransition) SetXfadeCurve(curve Curve) {
	self.Runtime.AnimationNodeStateMachineTransition_set_xfade_curve(AnimationNodeStateMachineTransition{self}, curve)
}
func (self methodsAnimationNodeStateMachineTransition) GetXfadeCurve() Curve {
	return self.Runtime.AnimationNodeStateMachineTransition_get_xfade_curve(AnimationNodeStateMachineTransition{self})
}
func (self methodsAnimationNodeStateMachineTransition) SetReset(reset bool) {
	self.Runtime.AnimationNodeStateMachineTransition_set_reset(AnimationNodeStateMachineTransition{self}, reset)
}
func (self methodsAnimationNodeStateMachineTransition) IsReset() bool {
	return self.Runtime.AnimationNodeStateMachineTransition_is_reset(AnimationNodeStateMachineTransition{self})
}
func (self methodsAnimationNodeStateMachineTransition) SetPriority(priority int64) {
	self.Runtime.AnimationNodeStateMachineTransition_set_priority(AnimationNodeStateMachineTransition{self}, priority)
}
func (self methodsAnimationNodeStateMachineTransition) GetPriority() int64 {
	return self.Runtime.AnimationNodeStateMachineTransition_get_priority(AnimationNodeStateMachineTransition{self})
}
func (self methodsAnimationNodeStateMachineTransition) SetAdvanceExpression(text string) {
	self.Runtime.AnimationNodeStateMachineTransition_set_advance_expression(AnimationNodeStateMachineTransition{self}, text)
}
func (self methodsAnimationNodeStateMachineTransition) GetAdvanceExpression() string {
	return self.Runtime.AnimationNodeStateMachineTransition_get_advance_expression(AnimationNodeStateMachineTransition{self})
}

type methodsAnimationNodeSub2 struct {
	_ [0]*methodsAnimationNodeSub2
	class
}

func (self AnimationNodeSub2) AnimationNodeSync() AnimationNodeSync {
	var parent AnimationNodeSync
	parent.class = self.class
	return parent
}

type methodsAnimationNodeSync struct {
	_ [0]*methodsAnimationNodeSync
	class
}

func (self AnimationNodeSync) AnimationNode() AnimationNode {
	var parent AnimationNode
	parent.class = self.class
	return parent
}
func (self methodsAnimationNodeSync) SetUseSync(enable bool) {
	self.Runtime.AnimationNodeSync_set_use_sync(AnimationNodeSync{self}, enable)
}
func (self methodsAnimationNodeSync) IsUsingSync() bool {
	return self.Runtime.AnimationNodeSync_is_using_sync(AnimationNodeSync{self})
}

type methodsAnimationNodeTimeScale struct {
	_ [0]*methodsAnimationNodeTimeScale
	class
}

func (self AnimationNodeTimeScale) AnimationNode() AnimationNode {
	var parent AnimationNode
	parent.class = self.class
	return parent
}

type methodsAnimationNodeTimeSeek struct {
	_ [0]*methodsAnimationNodeTimeSeek
	class
}

func (self AnimationNodeTimeSeek) AnimationNode() AnimationNode {
	var parent AnimationNode
	parent.class = self.class
	return parent
}

type methodsAnimationNodeTransition struct {
	_ [0]*methodsAnimationNodeTransition
	class
}

func (self AnimationNodeTransition) AnimationNodeSync() AnimationNodeSync {
	var parent AnimationNodeSync
	parent.class = self.class
	return parent
}
func (self methodsAnimationNodeTransition) SetInputCount(input_count int64) {
	self.Runtime.AnimationNodeTransition_set_input_count(AnimationNodeTransition{self}, input_count)
}
func (self methodsAnimationNodeTransition) SetInputAsAutoAdvance(input int64, enable bool) {
	self.Runtime.AnimationNodeTransition_set_input_as_auto_advance(AnimationNodeTransition{self}, input, enable)
}
func (self methodsAnimationNodeTransition) IsInputSetAsAutoAdvance(input int64) bool {
	return self.Runtime.AnimationNodeTransition_is_input_set_as_auto_advance(AnimationNodeTransition{self}, input)
}
func (self methodsAnimationNodeTransition) SetInputReset(input int64, enable bool) {
	self.Runtime.AnimationNodeTransition_set_input_reset(AnimationNodeTransition{self}, input, enable)
}
func (self methodsAnimationNodeTransition) IsInputReset(input int64) bool {
	return self.Runtime.AnimationNodeTransition_is_input_reset(AnimationNodeTransition{self}, input)
}
func (self methodsAnimationNodeTransition) SetXfadeTime(time Float) {
	self.Runtime.AnimationNodeTransition_set_xfade_time(AnimationNodeTransition{self}, time)
}
func (self methodsAnimationNodeTransition) GetXfadeTime() Float {
	return self.Runtime.AnimationNodeTransition_get_xfade_time(AnimationNodeTransition{self})
}
func (self methodsAnimationNodeTransition) SetXfadeCurve(curve Curve) {
	self.Runtime.AnimationNodeTransition_set_xfade_curve(AnimationNodeTransition{self}, curve)
}
func (self methodsAnimationNodeTransition) GetXfadeCurve() Curve {
	return self.Runtime.AnimationNodeTransition_get_xfade_curve(AnimationNodeTransition{self})
}
func (self methodsAnimationNodeTransition) SetAllowTransitionToSelf(enable bool) {
	self.Runtime.AnimationNodeTransition_set_allow_transition_to_self(AnimationNodeTransition{self}, enable)
}
func (self methodsAnimationNodeTransition) IsAllowTransitionToSelf() bool {
	return self.Runtime.AnimationNodeTransition_is_allow_transition_to_self(AnimationNodeTransition{self})
}

type methodsAnimationPlayer struct {
	_ [0]*methodsAnimationPlayer
	class
}

func (self AnimationPlayer) AnimationMixer() AnimationMixer {
	var parent AnimationMixer
	parent.class = self.class
	return parent
}
func (self methodsAnimationPlayer) AnimationSetNext(animation_from string, animation_to string) {
	self.Runtime.AnimationPlayer_animation_set_next(AnimationPlayer{self}, animation_from, animation_to)
}
func (self methodsAnimationPlayer) AnimationGetNext(animation_from string) string {
	return self.Runtime.AnimationPlayer_animation_get_next(AnimationPlayer{self}, animation_from)
}
func (self methodsAnimationPlayer) SetBlendTime(animation_from string, animation_to string, sec Float) {
	self.Runtime.AnimationPlayer_set_blend_time(AnimationPlayer{self}, animation_from, animation_to, sec)
}
func (self methodsAnimationPlayer) GetBlendTime(animation_from string, animation_to string) Float {
	return self.Runtime.AnimationPlayer_get_blend_time(AnimationPlayer{self}, animation_from, animation_to)
}
func (self methodsAnimationPlayer) SetDefaultBlendTime(sec Float) {
	self.Runtime.AnimationPlayer_set_default_blend_time(AnimationPlayer{self}, sec)
}
func (self methodsAnimationPlayer) GetDefaultBlendTime() Float {
	return self.Runtime.AnimationPlayer_get_default_blend_time(AnimationPlayer{self})
}
func (self methodsAnimationPlayer) Play(name string, custom_blend Float, custom_speed Float, from_end bool) {
	self.Runtime.AnimationPlayer_play(AnimationPlayer{self}, name, custom_blend, custom_speed, from_end)
}
func (self methodsAnimationPlayer) PlayBackwards(name string, custom_blend Float) {
	self.Runtime.AnimationPlayer_play_backwards(AnimationPlayer{self}, name, custom_blend)
}
func (self methodsAnimationPlayer) Pause() {
	self.Runtime.AnimationPlayer_pause(AnimationPlayer{self})
}
func (self methodsAnimationPlayer) Stop(keep_state bool) {
	self.Runtime.AnimationPlayer_stop(AnimationPlayer{self}, keep_state)
}
func (self methodsAnimationPlayer) IsPlaying() bool {
	return self.Runtime.AnimationPlayer_is_playing(AnimationPlayer{self})
}
func (self methodsAnimationPlayer) SetCurrentAnimation(animation string) {
	self.Runtime.AnimationPlayer_set_current_animation(AnimationPlayer{self}, animation)
}
func (self methodsAnimationPlayer) GetCurrentAnimation() string {
	return self.Runtime.AnimationPlayer_get_current_animation(AnimationPlayer{self})
}
func (self methodsAnimationPlayer) SetAssignedAnimation(animation string) {
	self.Runtime.AnimationPlayer_set_assigned_animation(AnimationPlayer{self}, animation)
}
func (self methodsAnimationPlayer) GetAssignedAnimation() string {
	return self.Runtime.AnimationPlayer_get_assigned_animation(AnimationPlayer{self})
}
func (self methodsAnimationPlayer) Queue(name string) {
	self.Runtime.AnimationPlayer_queue(AnimationPlayer{self}, name)
}
func (self methodsAnimationPlayer) GetQueue() PackedStringArray {
	return self.Runtime.AnimationPlayer_get_queue(AnimationPlayer{self})
}
func (self methodsAnimationPlayer) ClearQueue() {
	self.Runtime.AnimationPlayer_clear_queue(AnimationPlayer{self})
}
func (self methodsAnimationPlayer) SetSpeedScale(speed Float) {
	self.Runtime.AnimationPlayer_set_speed_scale(AnimationPlayer{self}, speed)
}
func (self methodsAnimationPlayer) GetSpeedScale() Float {
	return self.Runtime.AnimationPlayer_get_speed_scale(AnimationPlayer{self})
}
func (self methodsAnimationPlayer) GetPlayingSpeed() Float {
	return self.Runtime.AnimationPlayer_get_playing_speed(AnimationPlayer{self})
}
func (self methodsAnimationPlayer) SetAutoplay(name string) {
	self.Runtime.AnimationPlayer_set_autoplay(AnimationPlayer{self}, name)
}
func (self methodsAnimationPlayer) GetAutoplay() string {
	return self.Runtime.AnimationPlayer_get_autoplay(AnimationPlayer{self})
}
func (self methodsAnimationPlayer) SetMovieQuitOnFinishEnabled(enabled bool) {
	self.Runtime.AnimationPlayer_set_movie_quit_on_finish_enabled(AnimationPlayer{self}, enabled)
}
func (self methodsAnimationPlayer) IsMovieQuitOnFinishEnabled() bool {
	return self.Runtime.AnimationPlayer_is_movie_quit_on_finish_enabled(AnimationPlayer{self})
}
func (self methodsAnimationPlayer) GetCurrentAnimationPosition() Float {
	return self.Runtime.AnimationPlayer_get_current_animation_position(AnimationPlayer{self})
}
func (self methodsAnimationPlayer) GetCurrentAnimationLength() Float {
	return self.Runtime.AnimationPlayer_get_current_animation_length(AnimationPlayer{self})
}
func (self methodsAnimationPlayer) SeekTo(seconds Float, update bool, update_only bool) {
	self.Runtime.AnimationPlayer_seek(AnimationPlayer{self}, seconds, update, update_only)
}
func (self methodsAnimationPlayer) SetProcessCallback(mode AnimationPlayerAnimationProcessCallback) {
	self.Runtime.AnimationPlayer_set_process_callback(AnimationPlayer{self}, mode)
}
func (self methodsAnimationPlayer) GetProcessCallback() AnimationPlayerAnimationProcessCallback {
	return self.Runtime.AnimationPlayer_get_process_callback(AnimationPlayer{self})
}
func (self methodsAnimationPlayer) SetMethodCallMode(mode AnimationPlayerAnimationMethodCallMode) {
	self.Runtime.AnimationPlayer_set_method_call_mode(AnimationPlayer{self}, mode)
}
func (self methodsAnimationPlayer) GetMethodCallMode() AnimationPlayerAnimationMethodCallMode {
	return self.Runtime.AnimationPlayer_get_method_call_mode(AnimationPlayer{self})
}
func (self methodsAnimationPlayer) SetRoot(path NodePath) {
	self.Runtime.AnimationPlayer_set_root(AnimationPlayer{self}, path)
}
func (self methodsAnimationPlayer) GetRoot() NodePath {
	return self.Runtime.AnimationPlayer_get_root(AnimationPlayer{self})
}

type methodsAnimationRootNode struct {
	_ [0]*methodsAnimationRootNode
	class
}

func (self AnimationRootNode) AnimationNode() AnimationNode {
	var parent AnimationNode
	parent.class = self.class
	return parent
}

type methodsAnimationTree struct {
	_ [0]*methodsAnimationTree
	class
}

func (self AnimationTree) AnimationMixer() AnimationMixer {
	var parent AnimationMixer
	parent.class = self.class
	return parent
}
func (self methodsAnimationTree) SetTreeRoot(animation_node AnimationRootNode) {
	self.Runtime.AnimationTree_set_tree_root(AnimationTree{self}, animation_node)
}
func (self methodsAnimationTree) GetTreeRoot() AnimationRootNode {
	return self.Runtime.AnimationTree_get_tree_root(AnimationTree{self})
}
func (self methodsAnimationTree) SetAdvanceExpressionBaseNode(path NodePath) {
	self.Runtime.AnimationTree_set_advance_expression_base_node(AnimationTree{self}, path)
}
func (self methodsAnimationTree) GetAdvanceExpressionBaseNode() NodePath {
	return self.Runtime.AnimationTree_get_advance_expression_base_node(AnimationTree{self})
}
func (self methodsAnimationTree) SetAnimationPlayer(path NodePath) {
	self.Runtime.AnimationTree_set_animation_player(AnimationTree{self}, path)
}
func (self methodsAnimationTree) GetAnimationPlayer() NodePath {
	return self.Runtime.AnimationTree_get_animation_player(AnimationTree{self})
}
func (self methodsAnimationTree) SetProcessCallback(mode AnimationTreeAnimationProcessCallback) {
	self.Runtime.AnimationTree_set_process_callback(AnimationTree{self}, mode)
}
func (self methodsAnimationTree) GetProcessCallback() AnimationTreeAnimationProcessCallback {
	return self.Runtime.AnimationTree_get_process_callback(AnimationTree{self})
}

type methodsArea2D struct {
	_ [0]*methodsArea2D
	class
}

func (self Area2D) CollisionObject2D() CollisionObject2D {
	var parent CollisionObject2D
	parent.class = self.class
	return parent
}
func (self methodsArea2D) SetGravitySpaceOverrideMode(space_override_mode Area2DSpaceOverride) {
	self.Runtime.Area2D_set_gravity_space_override_mode(Area2D{self}, space_override_mode)
}
func (self methodsArea2D) GetGravitySpaceOverrideMode() Area2DSpaceOverride {
	return self.Runtime.Area2D_get_gravity_space_override_mode(Area2D{self})
}
func (self methodsArea2D) SetGravityIsPoint(enable bool) {
	self.Runtime.Area2D_set_gravity_is_point(Area2D{self}, enable)
}
func (self methodsArea2D) IsGravityAPoint() bool {
	return self.Runtime.Area2D_is_gravity_a_point(Area2D{self})
}
func (self methodsArea2D) SetGravityPointUnitDistance(distance_scale Float) {
	self.Runtime.Area2D_set_gravity_point_unit_distance(Area2D{self}, distance_scale)
}
func (self methodsArea2D) GetGravityPointUnitDistance() Float {
	return self.Runtime.Area2D_get_gravity_point_unit_distance(Area2D{self})
}
func (self methodsArea2D) SetGravityPointCenter(center Vector2) {
	self.Runtime.Area2D_set_gravity_point_center(Area2D{self}, center)
}
func (self methodsArea2D) GetGravityPointCenter() Vector2 {
	return self.Runtime.Area2D_get_gravity_point_center(Area2D{self})
}
func (self methodsArea2D) SetGravityDirection(direction Vector2) {
	self.Runtime.Area2D_set_gravity_direction(Area2D{self}, direction)
}
func (self methodsArea2D) GetGravityDirection() Vector2 {
	return self.Runtime.Area2D_get_gravity_direction(Area2D{self})
}
func (self methodsArea2D) SetGravity(gravity Float) {
	self.Runtime.Area2D_set_gravity(Area2D{self}, gravity)
}
func (self methodsArea2D) GetGravity() Float {
	return self.Runtime.Area2D_get_gravity(Area2D{self})
}
func (self methodsArea2D) SetLinearDampSpaceOverrideMode(space_override_mode Area2DSpaceOverride) {
	self.Runtime.Area2D_set_linear_damp_space_override_mode(Area2D{self}, space_override_mode)
}
func (self methodsArea2D) GetLinearDampSpaceOverrideMode() Area2DSpaceOverride {
	return self.Runtime.Area2D_get_linear_damp_space_override_mode(Area2D{self})
}
func (self methodsArea2D) SetAngularDampSpaceOverrideMode(space_override_mode Area2DSpaceOverride) {
	self.Runtime.Area2D_set_angular_damp_space_override_mode(Area2D{self}, space_override_mode)
}
func (self methodsArea2D) GetAngularDampSpaceOverrideMode() Area2DSpaceOverride {
	return self.Runtime.Area2D_get_angular_damp_space_override_mode(Area2D{self})
}
func (self methodsArea2D) SetLinearDamp(linear_damp Float) {
	self.Runtime.Area2D_set_linear_damp(Area2D{self}, linear_damp)
}
func (self methodsArea2D) GetLinearDamp() Float {
	return self.Runtime.Area2D_get_linear_damp(Area2D{self})
}
func (self methodsArea2D) SetAngularDamp(angular_damp Float) {
	self.Runtime.Area2D_set_angular_damp(Area2D{self}, angular_damp)
}
func (self methodsArea2D) GetAngularDamp() Float {
	return self.Runtime.Area2D_get_angular_damp(Area2D{self})
}
func (self methodsArea2D) SetPriority(priority int64) {
	self.Runtime.Area2D_set_priority(Area2D{self}, priority)
}
func (self methodsArea2D) GetPriority() int64 {
	return self.Runtime.Area2D_get_priority(Area2D{self})
}
func (self methodsArea2D) SetMonitoring(enable bool) {
	self.Runtime.Area2D_set_monitoring(Area2D{self}, enable)
}
func (self methodsArea2D) IsMonitoring() bool {
	return self.Runtime.Area2D_is_monitoring(Area2D{self})
}
func (self methodsArea2D) SetMonitorable(enable bool) {
	self.Runtime.Area2D_set_monitorable(Area2D{self}, enable)
}
func (self methodsArea2D) IsMonitorable() bool {
	return self.Runtime.Area2D_is_monitorable(Area2D{self})
}
func (self methodsArea2D) GetOverlappingBodies() ArrayOf[Node2D] {
	return self.Runtime.Area2D_get_overlapping_bodies(Area2D{self})
}
func (self methodsArea2D) GetOverlappingAreas() ArrayOf[Area2D] {
	return self.Runtime.Area2D_get_overlapping_areas(Area2D{self})
}
func (self methodsArea2D) HasOverlappingBodies() bool {
	return self.Runtime.Area2D_has_overlapping_bodies(Area2D{self})
}
func (self methodsArea2D) HasOverlappingAreas() bool {
	return self.Runtime.Area2D_has_overlapping_areas(Area2D{self})
}
func (self methodsArea2D) OverlapsBody(body Node) bool {
	return self.Runtime.Area2D_overlaps_body(Area2D{self}, body)
}
func (self methodsArea2D) OverlapsArea(area Node) bool {
	return self.Runtime.Area2D_overlaps_area(Area2D{self}, area)
}
func (self methodsArea2D) SetAudioBusName(name string) {
	self.Runtime.Area2D_set_audio_bus_name(Area2D{self}, name)
}
func (self methodsArea2D) GetAudioBusName() string {
	return self.Runtime.Area2D_get_audio_bus_name(Area2D{self})
}
func (self methodsArea2D) SetAudioBusOverride(enable bool) {
	self.Runtime.Area2D_set_audio_bus_override(Area2D{self}, enable)
}
func (self methodsArea2D) IsOverridingAudioBus() bool {
	return self.Runtime.Area2D_is_overriding_audio_bus(Area2D{self})
}

type methodsArea3D struct {
	_ [0]*methodsArea3D
	class
}

func (self Area3D) CollisionObject3D() CollisionObject3D {
	var parent CollisionObject3D
	parent.class = self.class
	return parent
}
func (self methodsArea3D) SetGravitySpaceOverrideMode(space_override_mode Area3DSpaceOverride) {
	self.Runtime.Area3D_set_gravity_space_override_mode(Area3D{self}, space_override_mode)
}
func (self methodsArea3D) GetGravitySpaceOverrideMode() Area3DSpaceOverride {
	return self.Runtime.Area3D_get_gravity_space_override_mode(Area3D{self})
}
func (self methodsArea3D) SetGravityIsPoint(enable bool) {
	self.Runtime.Area3D_set_gravity_is_point(Area3D{self}, enable)
}
func (self methodsArea3D) IsGravityAPoint() bool {
	return self.Runtime.Area3D_is_gravity_a_point(Area3D{self})
}
func (self methodsArea3D) SetGravityPointUnitDistance(distance_scale Float) {
	self.Runtime.Area3D_set_gravity_point_unit_distance(Area3D{self}, distance_scale)
}
func (self methodsArea3D) GetGravityPointUnitDistance() Float {
	return self.Runtime.Area3D_get_gravity_point_unit_distance(Area3D{self})
}
func (self methodsArea3D) SetGravityPointCenter(center Vector3) {
	self.Runtime.Area3D_set_gravity_point_center(Area3D{self}, center)
}
func (self methodsArea3D) GetGravityPointCenter() Vector3 {
	return self.Runtime.Area3D_get_gravity_point_center(Area3D{self})
}
func (self methodsArea3D) SetGravityDirection(direction Vector3) {
	self.Runtime.Area3D_set_gravity_direction(Area3D{self}, direction)
}
func (self methodsArea3D) GetGravityDirection() Vector3 {
	return self.Runtime.Area3D_get_gravity_direction(Area3D{self})
}
func (self methodsArea3D) SetGravity(gravity Float) {
	self.Runtime.Area3D_set_gravity(Area3D{self}, gravity)
}
func (self methodsArea3D) GetGravity() Float {
	return self.Runtime.Area3D_get_gravity(Area3D{self})
}
func (self methodsArea3D) SetLinearDampSpaceOverrideMode(space_override_mode Area3DSpaceOverride) {
	self.Runtime.Area3D_set_linear_damp_space_override_mode(Area3D{self}, space_override_mode)
}
func (self methodsArea3D) GetLinearDampSpaceOverrideMode() Area3DSpaceOverride {
	return self.Runtime.Area3D_get_linear_damp_space_override_mode(Area3D{self})
}
func (self methodsArea3D) SetAngularDampSpaceOverrideMode(space_override_mode Area3DSpaceOverride) {
	self.Runtime.Area3D_set_angular_damp_space_override_mode(Area3D{self}, space_override_mode)
}
func (self methodsArea3D) GetAngularDampSpaceOverrideMode() Area3DSpaceOverride {
	return self.Runtime.Area3D_get_angular_damp_space_override_mode(Area3D{self})
}
func (self methodsArea3D) SetAngularDamp(angular_damp Float) {
	self.Runtime.Area3D_set_angular_damp(Area3D{self}, angular_damp)
}
func (self methodsArea3D) GetAngularDamp() Float {
	return self.Runtime.Area3D_get_angular_damp(Area3D{self})
}
func (self methodsArea3D) SetLinearDamp(linear_damp Float) {
	self.Runtime.Area3D_set_linear_damp(Area3D{self}, linear_damp)
}
func (self methodsArea3D) GetLinearDamp() Float {
	return self.Runtime.Area3D_get_linear_damp(Area3D{self})
}
func (self methodsArea3D) SetPriority(priority int64) {
	self.Runtime.Area3D_set_priority(Area3D{self}, priority)
}
func (self methodsArea3D) GetPriority() int64 {
	return self.Runtime.Area3D_get_priority(Area3D{self})
}
func (self methodsArea3D) SetWindForceMagnitude(wind_force_magnitude Float) {
	self.Runtime.Area3D_set_wind_force_magnitude(Area3D{self}, wind_force_magnitude)
}
func (self methodsArea3D) GetWindForceMagnitude() Float {
	return self.Runtime.Area3D_get_wind_force_magnitude(Area3D{self})
}
func (self methodsArea3D) SetWindAttenuationFactor(wind_attenuation_factor Float) {
	self.Runtime.Area3D_set_wind_attenuation_factor(Area3D{self}, wind_attenuation_factor)
}
func (self methodsArea3D) GetWindAttenuationFactor() Float {
	return self.Runtime.Area3D_get_wind_attenuation_factor(Area3D{self})
}
func (self methodsArea3D) SetWindSourcePath(wind_source_path NodePath) {
	self.Runtime.Area3D_set_wind_source_path(Area3D{self}, wind_source_path)
}
func (self methodsArea3D) GetWindSourcePath() NodePath {
	return self.Runtime.Area3D_get_wind_source_path(Area3D{self})
}
func (self methodsArea3D) SetMonitorable(enable bool) {
	self.Runtime.Area3D_set_monitorable(Area3D{self}, enable)
}
func (self methodsArea3D) IsMonitorable() bool {
	return self.Runtime.Area3D_is_monitorable(Area3D{self})
}
func (self methodsArea3D) SetMonitoring(enable bool) {
	self.Runtime.Area3D_set_monitoring(Area3D{self}, enable)
}
func (self methodsArea3D) IsMonitoring() bool {
	return self.Runtime.Area3D_is_monitoring(Area3D{self})
}
func (self methodsArea3D) GetOverlappingBodies() ArrayOf[Node3D] {
	return self.Runtime.Area3D_get_overlapping_bodies(Area3D{self})
}
func (self methodsArea3D) GetOverlappingAreas() ArrayOf[Area3D] {
	return self.Runtime.Area3D_get_overlapping_areas(Area3D{self})
}
func (self methodsArea3D) HasOverlappingBodies() bool {
	return self.Runtime.Area3D_has_overlapping_bodies(Area3D{self})
}
func (self methodsArea3D) HasOverlappingAreas() bool {
	return self.Runtime.Area3D_has_overlapping_areas(Area3D{self})
}
func (self methodsArea3D) OverlapsBody(body Node) bool {
	return self.Runtime.Area3D_overlaps_body(Area3D{self}, body)
}
func (self methodsArea3D) OverlapsArea(area Node) bool {
	return self.Runtime.Area3D_overlaps_area(Area3D{self}, area)
}
func (self methodsArea3D) SetAudioBusOverride(enable bool) {
	self.Runtime.Area3D_set_audio_bus_override(Area3D{self}, enable)
}
func (self methodsArea3D) IsOverridingAudioBus() bool {
	return self.Runtime.Area3D_is_overriding_audio_bus(Area3D{self})
}
func (self methodsArea3D) SetAudioBusName(name string) {
	self.Runtime.Area3D_set_audio_bus_name(Area3D{self}, name)
}
func (self methodsArea3D) GetAudioBusName() string {
	return self.Runtime.Area3D_get_audio_bus_name(Area3D{self})
}
func (self methodsArea3D) SetUseReverbBus(enable bool) {
	self.Runtime.Area3D_set_use_reverb_bus(Area3D{self}, enable)
}
func (self methodsArea3D) IsUsingReverbBus() bool {
	return self.Runtime.Area3D_is_using_reverb_bus(Area3D{self})
}
func (self methodsArea3D) SetReverbBusName(name string) {
	self.Runtime.Area3D_set_reverb_bus_name(Area3D{self}, name)
}
func (self methodsArea3D) GetReverbBusName() string {
	return self.Runtime.Area3D_get_reverb_bus_name(Area3D{self})
}
func (self methodsArea3D) SetReverbAmount(amount Float) {
	self.Runtime.Area3D_set_reverb_amount(Area3D{self}, amount)
}
func (self methodsArea3D) GetReverbAmount() Float {
	return self.Runtime.Area3D_get_reverb_amount(Area3D{self})
}
func (self methodsArea3D) SetReverbUniformity(amount Float) {
	self.Runtime.Area3D_set_reverb_uniformity(Area3D{self}, amount)
}
func (self methodsArea3D) GetReverbUniformity() Float {
	return self.Runtime.Area3D_get_reverb_uniformity(Area3D{self})
}

type methodsArrayMesh struct {
	_ [0]*methodsArrayMesh
	class
}

func (self ArrayMesh) Mesh() Mesh { var parent Mesh; parent.class = self.class; return parent }
func (self methodsArrayMesh) AddBlendShape(name string) {
	self.Runtime.ArrayMesh_add_blend_shape(ArrayMesh{self}, name)
}
func (self methodsArrayMesh) GetBlendShapeCount() int64 {
	return self.Runtime.ArrayMesh_get_blend_shape_count(ArrayMesh{self})
}
func (self methodsArrayMesh) GetBlendShapeName(index int64) string {
	return self.Runtime.ArrayMesh_get_blend_shape_name(ArrayMesh{self}, index)
}
func (self methodsArrayMesh) SetBlendShapeName(index int64, name string) {
	self.Runtime.ArrayMesh_set_blend_shape_name(ArrayMesh{self}, index, name)
}
func (self methodsArrayMesh) ClearBlendShapes() {
	self.Runtime.ArrayMesh_clear_blend_shapes(ArrayMesh{self})
}
func (self methodsArrayMesh) SetBlendShapeMode(mode MeshBlendShapeMode) {
	self.Runtime.ArrayMesh_set_blend_shape_mode(ArrayMesh{self}, mode)
}
func (self methodsArrayMesh) GetBlendShapeMode() MeshBlendShapeMode {
	return self.Runtime.ArrayMesh_get_blend_shape_mode(ArrayMesh{self})
}
func (self methodsArrayMesh) AddSurfaceFromArrays(primitive MeshPrimitiveType, arrays Array, blend_shapes ArrayOf[Array], lods Dictionary, flags MeshArrayFormat) {
	self.Runtime.ArrayMesh_add_surface_from_arrays(ArrayMesh{self}, primitive, arrays, blend_shapes, lods, flags)
}
func (self methodsArrayMesh) ClearSurfaces() {
	self.Runtime.ArrayMesh_clear_surfaces(ArrayMesh{self})
}
func (self methodsArrayMesh) SurfaceUpdateVertexRegion(surf_idx int64, offset int64, data PackedByteArray) {
	self.Runtime.ArrayMesh_surface_update_vertex_region(ArrayMesh{self}, surf_idx, offset, data)
}
func (self methodsArrayMesh) SurfaceUpdateAttributeRegion(surf_idx int64, offset int64, data PackedByteArray) {
	self.Runtime.ArrayMesh_surface_update_attribute_region(ArrayMesh{self}, surf_idx, offset, data)
}
func (self methodsArrayMesh) SurfaceUpdateSkinRegion(surf_idx int64, offset int64, data PackedByteArray) {
	self.Runtime.ArrayMesh_surface_update_skin_region(ArrayMesh{self}, surf_idx, offset, data)
}
func (self methodsArrayMesh) SurfaceGetArrayLen(surf_idx int64) int64 {
	return self.Runtime.ArrayMesh_surface_get_array_len(ArrayMesh{self}, surf_idx)
}
func (self methodsArrayMesh) SurfaceGetArrayIndexLen(surf_idx int64) int64 {
	return self.Runtime.ArrayMesh_surface_get_array_index_len(ArrayMesh{self}, surf_idx)
}
func (self methodsArrayMesh) SurfaceGetFormat(surf_idx int64) MeshArrayFormat {
	return self.Runtime.ArrayMesh_surface_get_format(ArrayMesh{self}, surf_idx)
}
func (self methodsArrayMesh) SurfaceGetPrimitiveType(surf_idx int64) MeshPrimitiveType {
	return self.Runtime.ArrayMesh_surface_get_primitive_type(ArrayMesh{self}, surf_idx)
}
func (self methodsArrayMesh) SurfaceFindByName(name string) int64 {
	return self.Runtime.ArrayMesh_surface_find_by_name(ArrayMesh{self}, name)
}
func (self methodsArrayMesh) SurfaceSetName(surf_idx int64, name string) {
	self.Runtime.ArrayMesh_surface_set_name(ArrayMesh{self}, surf_idx, name)
}
func (self methodsArrayMesh) SurfaceGetName(surf_idx int64) string {
	return self.Runtime.ArrayMesh_surface_get_name(ArrayMesh{self}, surf_idx)
}
func (self methodsArrayMesh) RegenNormalMaps() {
	self.Runtime.ArrayMesh_regen_normal_maps(ArrayMesh{self})
}
func (self methodsArrayMesh) LightmapUnwrap(transform Transform3D, texel_size Float) int64 {
	return self.Runtime.ArrayMesh_lightmap_unwrap(ArrayMesh{self}, transform, texel_size)
}
func (self methodsArrayMesh) SetCustomAabb(aabb AABB) {
	self.Runtime.ArrayMesh_set_custom_aabb(ArrayMesh{self}, aabb)
}
func (self methodsArrayMesh) GetCustomAabb() AABB {
	return self.Runtime.ArrayMesh_get_custom_aabb(ArrayMesh{self})
}
func (self methodsArrayMesh) SetShadowMesh(mesh ArrayMesh) {
	self.Runtime.ArrayMesh_set_shadow_mesh(ArrayMesh{self}, mesh)
}
func (self methodsArrayMesh) GetShadowMesh() ArrayMesh {
	return self.Runtime.ArrayMesh_get_shadow_mesh(ArrayMesh{self})
}

type methodsArrayOccluder3D struct {
	_ [0]*methodsArrayOccluder3D
	class
}

func (self ArrayOccluder3D) Occluder3D() Occluder3D {
	var parent Occluder3D
	parent.class = self.class
	return parent
}
func (self methodsArrayOccluder3D) SetArrays(vertices PackedVector3Array, indices PackedInt32Array) {
	self.Runtime.ArrayOccluder3D_set_arrays(ArrayOccluder3D{self}, vertices, indices)
}
func (self methodsArrayOccluder3D) SetVertices(vertices PackedVector3Array) {
	self.Runtime.ArrayOccluder3D_set_vertices(ArrayOccluder3D{self}, vertices)
}
func (self methodsArrayOccluder3D) SetIndices(indices PackedInt32Array) {
	self.Runtime.ArrayOccluder3D_set_indices(ArrayOccluder3D{self}, indices)
}

type methodsAspectRatioContainer struct {
	_ [0]*methodsAspectRatioContainer
	class
}

func (self AspectRatioContainer) Container() Container {
	var parent Container
	parent.class = self.class
	return parent
}
func (self methodsAspectRatioContainer) SetRatio(ratio Float) {
	self.Runtime.AspectRatioContainer_set_ratio(AspectRatioContainer{self}, ratio)
}
func (self methodsAspectRatioContainer) GetRatio() Float {
	return self.Runtime.AspectRatioContainer_get_ratio(AspectRatioContainer{self})
}
func (self methodsAspectRatioContainer) SetStretchMode(stretch_mode AspectRatioContainerStretchMode) {
	self.Runtime.AspectRatioContainer_set_stretch_mode(AspectRatioContainer{self}, stretch_mode)
}
func (self methodsAspectRatioContainer) GetStretchMode() AspectRatioContainerStretchMode {
	return self.Runtime.AspectRatioContainer_get_stretch_mode(AspectRatioContainer{self})
}
func (self methodsAspectRatioContainer) SetAlignmentHorizontal(alignment_horizontal AspectRatioContainerAlignmentMode) {
	self.Runtime.AspectRatioContainer_set_alignment_horizontal(AspectRatioContainer{self}, alignment_horizontal)
}
func (self methodsAspectRatioContainer) GetAlignmentHorizontal() AspectRatioContainerAlignmentMode {
	return self.Runtime.AspectRatioContainer_get_alignment_horizontal(AspectRatioContainer{self})
}
func (self methodsAspectRatioContainer) SetAlignmentVertical(alignment_vertical AspectRatioContainerAlignmentMode) {
	self.Runtime.AspectRatioContainer_set_alignment_vertical(AspectRatioContainer{self}, alignment_vertical)
}
func (self methodsAspectRatioContainer) GetAlignmentVertical() AspectRatioContainerAlignmentMode {
	return self.Runtime.AspectRatioContainer_get_alignment_vertical(AspectRatioContainer{self})
}

type methodsAtlasTexture struct {
	_ [0]*methodsAtlasTexture
	class
}

func (self AtlasTexture) Texture2D() Texture2D {
	var parent Texture2D
	parent.class = self.class
	return parent
}
func (self methodsAtlasTexture) SetAtlas(atlas Texture2D) {
	self.Runtime.AtlasTexture_set_atlas(AtlasTexture{self}, atlas)
}
func (self methodsAtlasTexture) GetAtlas() Texture2D {
	return self.Runtime.AtlasTexture_get_atlas(AtlasTexture{self})
}
func (self methodsAtlasTexture) SetRegion(region Rect2) {
	self.Runtime.AtlasTexture_set_region(AtlasTexture{self}, region)
}
func (self methodsAtlasTexture) GetRegion() Rect2 {
	return self.Runtime.AtlasTexture_get_region(AtlasTexture{self})
}
func (self methodsAtlasTexture) SetMargin(margin Rect2) {
	self.Runtime.AtlasTexture_set_margin(AtlasTexture{self}, margin)
}
func (self methodsAtlasTexture) GetMargin() Rect2 {
	return self.Runtime.AtlasTexture_get_margin(AtlasTexture{self})
}
func (self methodsAtlasTexture) SetFilterClip(enable bool) {
	self.Runtime.AtlasTexture_set_filter_clip(AtlasTexture{self}, enable)
}
func (self methodsAtlasTexture) HasFilterClip() bool {
	return self.Runtime.AtlasTexture_has_filter_clip(AtlasTexture{self})
}

type methodsAudioBusLayout struct {
	_ [0]*methodsAudioBusLayout
	class
}

func (self AudioBusLayout) Resource() Resource {
	var parent Resource
	parent.class = self.class
	return parent
}

type methodsAudioEffect struct {
	_ [0]*methodsAudioEffect
	class
}

func (self AudioEffect) Resource() Resource {
	var parent Resource
	parent.class = self.class
	return parent
}

type methodsAudioEffectAmplify struct {
	_ [0]*methodsAudioEffectAmplify
	class
}

func (self AudioEffectAmplify) AudioEffect() AudioEffect {
	var parent AudioEffect
	parent.class = self.class
	return parent
}
func (self methodsAudioEffectAmplify) SetVolumeDb(volume Float) {
	self.Runtime.AudioEffectAmplify_set_volume_db(AudioEffectAmplify{self}, volume)
}
func (self methodsAudioEffectAmplify) GetVolumeDb() Float {
	return self.Runtime.AudioEffectAmplify_get_volume_db(AudioEffectAmplify{self})
}

type methodsAudioEffectBandLimitFilter struct {
	_ [0]*methodsAudioEffectBandLimitFilter
	class
}

func (self AudioEffectBandLimitFilter) AudioEffectFilter() AudioEffectFilter {
	var parent AudioEffectFilter
	parent.class = self.class
	return parent
}

type methodsAudioEffectBandPassFilter struct {
	_ [0]*methodsAudioEffectBandPassFilter
	class
}

func (self AudioEffectBandPassFilter) AudioEffectFilter() AudioEffectFilter {
	var parent AudioEffectFilter
	parent.class = self.class
	return parent
}

type methodsAudioEffectCapture struct {
	_ [0]*methodsAudioEffectCapture
	class
}

func (self AudioEffectCapture) AudioEffect() AudioEffect {
	var parent AudioEffect
	parent.class = self.class
	return parent
}
func (self methodsAudioEffectCapture) CanGetBuffer(frames int64) bool {
	return self.Runtime.AudioEffectCapture_can_get_buffer(AudioEffectCapture{self}, frames)
}
func (self methodsAudioEffectCapture) GetBuffer(frames int64) PackedVector2Array {
	return self.Runtime.AudioEffectCapture_get_buffer(AudioEffectCapture{self}, frames)
}
func (self methodsAudioEffectCapture) ClearBuffer() {
	self.Runtime.AudioEffectCapture_clear_buffer(AudioEffectCapture{self})
}
func (self methodsAudioEffectCapture) SetBufferLength(buffer_length_seconds Float) {
	self.Runtime.AudioEffectCapture_set_buffer_length(AudioEffectCapture{self}, buffer_length_seconds)
}
func (self methodsAudioEffectCapture) GetBufferLength() Float {
	return self.Runtime.AudioEffectCapture_get_buffer_length(AudioEffectCapture{self})
}
func (self methodsAudioEffectCapture) GetFramesAvailable() int64 {
	return self.Runtime.AudioEffectCapture_get_frames_available(AudioEffectCapture{self})
}
func (self methodsAudioEffectCapture) GetDiscardedFrames() int64 {
	return self.Runtime.AudioEffectCapture_get_discarded_frames(AudioEffectCapture{self})
}
func (self methodsAudioEffectCapture) GetBufferLengthFrames() int64 {
	return self.Runtime.AudioEffectCapture_get_buffer_length_frames(AudioEffectCapture{self})
}
func (self methodsAudioEffectCapture) GetPushedFrames() int64 {
	return self.Runtime.AudioEffectCapture_get_pushed_frames(AudioEffectCapture{self})
}

type methodsAudioEffectChorus struct {
	_ [0]*methodsAudioEffectChorus
	class
}

func (self AudioEffectChorus) AudioEffect() AudioEffect {
	var parent AudioEffect
	parent.class = self.class
	return parent
}
func (self methodsAudioEffectChorus) SetVoiceCount(voices int64) {
	self.Runtime.AudioEffectChorus_set_voice_count(AudioEffectChorus{self}, voices)
}
func (self methodsAudioEffectChorus) GetVoiceCount() int64 {
	return self.Runtime.AudioEffectChorus_get_voice_count(AudioEffectChorus{self})
}
func (self methodsAudioEffectChorus) SetVoiceDelayMs(voice_idx int64, delay_ms Float) {
	self.Runtime.AudioEffectChorus_set_voice_delay_ms(AudioEffectChorus{self}, voice_idx, delay_ms)
}
func (self methodsAudioEffectChorus) GetVoiceDelayMs(voice_idx int64) Float {
	return self.Runtime.AudioEffectChorus_get_voice_delay_ms(AudioEffectChorus{self}, voice_idx)
}
func (self methodsAudioEffectChorus) SetVoiceRateHz(voice_idx int64, rate_hz Float) {
	self.Runtime.AudioEffectChorus_set_voice_rate_hz(AudioEffectChorus{self}, voice_idx, rate_hz)
}
func (self methodsAudioEffectChorus) GetVoiceRateHz(voice_idx int64) Float {
	return self.Runtime.AudioEffectChorus_get_voice_rate_hz(AudioEffectChorus{self}, voice_idx)
}
func (self methodsAudioEffectChorus) SetVoiceDepthMs(voice_idx int64, depth_ms Float) {
	self.Runtime.AudioEffectChorus_set_voice_depth_ms(AudioEffectChorus{self}, voice_idx, depth_ms)
}
func (self methodsAudioEffectChorus) GetVoiceDepthMs(voice_idx int64) Float {
	return self.Runtime.AudioEffectChorus_get_voice_depth_ms(AudioEffectChorus{self}, voice_idx)
}
func (self methodsAudioEffectChorus) SetVoiceLevelDb(voice_idx int64, level_db Float) {
	self.Runtime.AudioEffectChorus_set_voice_level_db(AudioEffectChorus{self}, voice_idx, level_db)
}
func (self methodsAudioEffectChorus) GetVoiceLevelDb(voice_idx int64) Float {
	return self.Runtime.AudioEffectChorus_get_voice_level_db(AudioEffectChorus{self}, voice_idx)
}
func (self methodsAudioEffectChorus) SetVoiceCutoffHz(voice_idx int64, cutoff_hz Float) {
	self.Runtime.AudioEffectChorus_set_voice_cutoff_hz(AudioEffectChorus{self}, voice_idx, cutoff_hz)
}
func (self methodsAudioEffectChorus) GetVoiceCutoffHz(voice_idx int64) Float {
	return self.Runtime.AudioEffectChorus_get_voice_cutoff_hz(AudioEffectChorus{self}, voice_idx)
}
func (self methodsAudioEffectChorus) SetVoicePan(voice_idx int64, pan Float) {
	self.Runtime.AudioEffectChorus_set_voice_pan(AudioEffectChorus{self}, voice_idx, pan)
}
func (self methodsAudioEffectChorus) GetVoicePan(voice_idx int64) Float {
	return self.Runtime.AudioEffectChorus_get_voice_pan(AudioEffectChorus{self}, voice_idx)
}
func (self methodsAudioEffectChorus) SetWet(amount Float) {
	self.Runtime.AudioEffectChorus_set_wet(AudioEffectChorus{self}, amount)
}
func (self methodsAudioEffectChorus) GetWet() Float {
	return self.Runtime.AudioEffectChorus_get_wet(AudioEffectChorus{self})
}
func (self methodsAudioEffectChorus) SetDry(amount Float) {
	self.Runtime.AudioEffectChorus_set_dry(AudioEffectChorus{self}, amount)
}
func (self methodsAudioEffectChorus) GetDry() Float {
	return self.Runtime.AudioEffectChorus_get_dry(AudioEffectChorus{self})
}

type methodsAudioEffectCompressor struct {
	_ [0]*methodsAudioEffectCompressor
	class
}

func (self AudioEffectCompressor) AudioEffect() AudioEffect {
	var parent AudioEffect
	parent.class = self.class
	return parent
}
func (self methodsAudioEffectCompressor) SetThreshold(threshold Float) {
	self.Runtime.AudioEffectCompressor_set_threshold(AudioEffectCompressor{self}, threshold)
}
func (self methodsAudioEffectCompressor) GetThreshold() Float {
	return self.Runtime.AudioEffectCompressor_get_threshold(AudioEffectCompressor{self})
}
func (self methodsAudioEffectCompressor) SetRatio(ratio Float) {
	self.Runtime.AudioEffectCompressor_set_ratio(AudioEffectCompressor{self}, ratio)
}
func (self methodsAudioEffectCompressor) GetRatio() Float {
	return self.Runtime.AudioEffectCompressor_get_ratio(AudioEffectCompressor{self})
}
func (self methodsAudioEffectCompressor) SetGain(gain Float) {
	self.Runtime.AudioEffectCompressor_set_gain(AudioEffectCompressor{self}, gain)
}
func (self methodsAudioEffectCompressor) GetGain() Float {
	return self.Runtime.AudioEffectCompressor_get_gain(AudioEffectCompressor{self})
}
func (self methodsAudioEffectCompressor) SetAttackUs(attack_us Float) {
	self.Runtime.AudioEffectCompressor_set_attack_us(AudioEffectCompressor{self}, attack_us)
}
func (self methodsAudioEffectCompressor) GetAttackUs() Float {
	return self.Runtime.AudioEffectCompressor_get_attack_us(AudioEffectCompressor{self})
}
func (self methodsAudioEffectCompressor) SetReleaseMs(release_ms Float) {
	self.Runtime.AudioEffectCompressor_set_release_ms(AudioEffectCompressor{self}, release_ms)
}
func (self methodsAudioEffectCompressor) GetReleaseMs() Float {
	return self.Runtime.AudioEffectCompressor_get_release_ms(AudioEffectCompressor{self})
}
func (self methodsAudioEffectCompressor) SetMix(mix Float) {
	self.Runtime.AudioEffectCompressor_set_mix(AudioEffectCompressor{self}, mix)
}
func (self methodsAudioEffectCompressor) GetMix() Float {
	return self.Runtime.AudioEffectCompressor_get_mix(AudioEffectCompressor{self})
}
func (self methodsAudioEffectCompressor) SetSidechain(sidechain string) {
	self.Runtime.AudioEffectCompressor_set_sidechain(AudioEffectCompressor{self}, sidechain)
}
func (self methodsAudioEffectCompressor) GetSidechain() string {
	return self.Runtime.AudioEffectCompressor_get_sidechain(AudioEffectCompressor{self})
}

type methodsAudioEffectDelay struct {
	_ [0]*methodsAudioEffectDelay
	class
}

func (self AudioEffectDelay) AudioEffect() AudioEffect {
	var parent AudioEffect
	parent.class = self.class
	return parent
}
func (self methodsAudioEffectDelay) SetDry(amount Float) {
	self.Runtime.AudioEffectDelay_set_dry(AudioEffectDelay{self}, amount)
}
func (self methodsAudioEffectDelay) GetDry() Float {
	return self.Runtime.AudioEffectDelay_get_dry(AudioEffectDelay{self})
}
func (self methodsAudioEffectDelay) SetTap1Active(amount bool) {
	self.Runtime.AudioEffectDelay_set_tap1_active(AudioEffectDelay{self}, amount)
}
func (self methodsAudioEffectDelay) IsTap1Active() bool {
	return self.Runtime.AudioEffectDelay_is_tap1_active(AudioEffectDelay{self})
}
func (self methodsAudioEffectDelay) SetTap1DelayMs(amount Float) {
	self.Runtime.AudioEffectDelay_set_tap1_delay_ms(AudioEffectDelay{self}, amount)
}
func (self methodsAudioEffectDelay) GetTap1DelayMs() Float {
	return self.Runtime.AudioEffectDelay_get_tap1_delay_ms(AudioEffectDelay{self})
}
func (self methodsAudioEffectDelay) SetTap1LevelDb(amount Float) {
	self.Runtime.AudioEffectDelay_set_tap1_level_db(AudioEffectDelay{self}, amount)
}
func (self methodsAudioEffectDelay) GetTap1LevelDb() Float {
	return self.Runtime.AudioEffectDelay_get_tap1_level_db(AudioEffectDelay{self})
}
func (self methodsAudioEffectDelay) SetTap1Pan(amount Float) {
	self.Runtime.AudioEffectDelay_set_tap1_pan(AudioEffectDelay{self}, amount)
}
func (self methodsAudioEffectDelay) GetTap1Pan() Float {
	return self.Runtime.AudioEffectDelay_get_tap1_pan(AudioEffectDelay{self})
}
func (self methodsAudioEffectDelay) SetTap2Active(amount bool) {
	self.Runtime.AudioEffectDelay_set_tap2_active(AudioEffectDelay{self}, amount)
}
func (self methodsAudioEffectDelay) IsTap2Active() bool {
	return self.Runtime.AudioEffectDelay_is_tap2_active(AudioEffectDelay{self})
}
func (self methodsAudioEffectDelay) SetTap2DelayMs(amount Float) {
	self.Runtime.AudioEffectDelay_set_tap2_delay_ms(AudioEffectDelay{self}, amount)
}
func (self methodsAudioEffectDelay) GetTap2DelayMs() Float {
	return self.Runtime.AudioEffectDelay_get_tap2_delay_ms(AudioEffectDelay{self})
}
func (self methodsAudioEffectDelay) SetTap2LevelDb(amount Float) {
	self.Runtime.AudioEffectDelay_set_tap2_level_db(AudioEffectDelay{self}, amount)
}
func (self methodsAudioEffectDelay) GetTap2LevelDb() Float {
	return self.Runtime.AudioEffectDelay_get_tap2_level_db(AudioEffectDelay{self})
}
func (self methodsAudioEffectDelay) SetTap2Pan(amount Float) {
	self.Runtime.AudioEffectDelay_set_tap2_pan(AudioEffectDelay{self}, amount)
}
func (self methodsAudioEffectDelay) GetTap2Pan() Float {
	return self.Runtime.AudioEffectDelay_get_tap2_pan(AudioEffectDelay{self})
}
func (self methodsAudioEffectDelay) SetFeedbackActive(amount bool) {
	self.Runtime.AudioEffectDelay_set_feedback_active(AudioEffectDelay{self}, amount)
}
func (self methodsAudioEffectDelay) IsFeedbackActive() bool {
	return self.Runtime.AudioEffectDelay_is_feedback_active(AudioEffectDelay{self})
}
func (self methodsAudioEffectDelay) SetFeedbackDelayMs(amount Float) {
	self.Runtime.AudioEffectDelay_set_feedback_delay_ms(AudioEffectDelay{self}, amount)
}
func (self methodsAudioEffectDelay) GetFeedbackDelayMs() Float {
	return self.Runtime.AudioEffectDelay_get_feedback_delay_ms(AudioEffectDelay{self})
}
func (self methodsAudioEffectDelay) SetFeedbackLevelDb(amount Float) {
	self.Runtime.AudioEffectDelay_set_feedback_level_db(AudioEffectDelay{self}, amount)
}
func (self methodsAudioEffectDelay) GetFeedbackLevelDb() Float {
	return self.Runtime.AudioEffectDelay_get_feedback_level_db(AudioEffectDelay{self})
}
func (self methodsAudioEffectDelay) SetFeedbackLowpass(amount Float) {
	self.Runtime.AudioEffectDelay_set_feedback_lowpass(AudioEffectDelay{self}, amount)
}
func (self methodsAudioEffectDelay) GetFeedbackLowpass() Float {
	return self.Runtime.AudioEffectDelay_get_feedback_lowpass(AudioEffectDelay{self})
}

type methodsAudioEffectDistortion struct {
	_ [0]*methodsAudioEffectDistortion
	class
}

func (self AudioEffectDistortion) AudioEffect() AudioEffect {
	var parent AudioEffect
	parent.class = self.class
	return parent
}
func (self methodsAudioEffectDistortion) SetMode(mode AudioEffectDistortionMode) {
	self.Runtime.AudioEffectDistortion_set_mode(AudioEffectDistortion{self}, mode)
}
func (self methodsAudioEffectDistortion) GetMode() AudioEffectDistortionMode {
	return self.Runtime.AudioEffectDistortion_get_mode(AudioEffectDistortion{self})
}
func (self methodsAudioEffectDistortion) SetPreGain(pre_gain Float) {
	self.Runtime.AudioEffectDistortion_set_pre_gain(AudioEffectDistortion{self}, pre_gain)
}
func (self methodsAudioEffectDistortion) GetPreGain() Float {
	return self.Runtime.AudioEffectDistortion_get_pre_gain(AudioEffectDistortion{self})
}
func (self methodsAudioEffectDistortion) SetKeepHfHz(keep_hf_hz Float) {
	self.Runtime.AudioEffectDistortion_set_keep_hf_hz(AudioEffectDistortion{self}, keep_hf_hz)
}
func (self methodsAudioEffectDistortion) GetKeepHfHz() Float {
	return self.Runtime.AudioEffectDistortion_get_keep_hf_hz(AudioEffectDistortion{self})
}
func (self methodsAudioEffectDistortion) SetDrive(drive Float) {
	self.Runtime.AudioEffectDistortion_set_drive(AudioEffectDistortion{self}, drive)
}
func (self methodsAudioEffectDistortion) GetDrive() Float {
	return self.Runtime.AudioEffectDistortion_get_drive(AudioEffectDistortion{self})
}
func (self methodsAudioEffectDistortion) SetPostGain(post_gain Float) {
	self.Runtime.AudioEffectDistortion_set_post_gain(AudioEffectDistortion{self}, post_gain)
}
func (self methodsAudioEffectDistortion) GetPostGain() Float {
	return self.Runtime.AudioEffectDistortion_get_post_gain(AudioEffectDistortion{self})
}

type methodsAudioEffectEQ struct {
	_ [0]*methodsAudioEffectEQ
	class
}

func (self AudioEffectEQ) AudioEffect() AudioEffect {
	var parent AudioEffect
	parent.class = self.class
	return parent
}
func (self methodsAudioEffectEQ) SetBandGainDb(band_idx int64, volume_db Float) {
	self.Runtime.AudioEffectEQ_set_band_gain_db(AudioEffectEQ{self}, band_idx, volume_db)
}
func (self methodsAudioEffectEQ) GetBandGainDb(band_idx int64) Float {
	return self.Runtime.AudioEffectEQ_get_band_gain_db(AudioEffectEQ{self}, band_idx)
}
func (self methodsAudioEffectEQ) GetBandCount() int64 {
	return self.Runtime.AudioEffectEQ_get_band_count(AudioEffectEQ{self})
}

type methodsAudioEffectEQ10 struct {
	_ [0]*methodsAudioEffectEQ10
	class
}

func (self AudioEffectEQ10) AudioEffectEQ() AudioEffectEQ {
	var parent AudioEffectEQ
	parent.class = self.class
	return parent
}

type methodsAudioEffectEQ21 struct {
	_ [0]*methodsAudioEffectEQ21
	class
}

func (self AudioEffectEQ21) AudioEffectEQ() AudioEffectEQ {
	var parent AudioEffectEQ
	parent.class = self.class
	return parent
}

type methodsAudioEffectEQ6 struct {
	_ [0]*methodsAudioEffectEQ6
	class
}

func (self AudioEffectEQ6) AudioEffectEQ() AudioEffectEQ {
	var parent AudioEffectEQ
	parent.class = self.class
	return parent
}

type methodsAudioEffectFilter struct {
	_ [0]*methodsAudioEffectFilter
	class
}

func (self AudioEffectFilter) AudioEffect() AudioEffect {
	var parent AudioEffect
	parent.class = self.class
	return parent
}
func (self methodsAudioEffectFilter) SetCutoff(freq Float) {
	self.Runtime.AudioEffectFilter_set_cutoff(AudioEffectFilter{self}, freq)
}
func (self methodsAudioEffectFilter) GetCutoff() Float {
	return self.Runtime.AudioEffectFilter_get_cutoff(AudioEffectFilter{self})
}
func (self methodsAudioEffectFilter) SetResonance(amount Float) {
	self.Runtime.AudioEffectFilter_set_resonance(AudioEffectFilter{self}, amount)
}
func (self methodsAudioEffectFilter) GetResonance() Float {
	return self.Runtime.AudioEffectFilter_get_resonance(AudioEffectFilter{self})
}
func (self methodsAudioEffectFilter) SetGain(amount Float) {
	self.Runtime.AudioEffectFilter_set_gain(AudioEffectFilter{self}, amount)
}
func (self methodsAudioEffectFilter) GetGain() Float {
	return self.Runtime.AudioEffectFilter_get_gain(AudioEffectFilter{self})
}
func (self methodsAudioEffectFilter) SetDb(amount AudioEffectFilterFilterDB) {
	self.Runtime.AudioEffectFilter_set_db(AudioEffectFilter{self}, amount)
}
func (self methodsAudioEffectFilter) GetDb() AudioEffectFilterFilterDB {
	return self.Runtime.AudioEffectFilter_get_db(AudioEffectFilter{self})
}

type methodsAudioEffectHighPassFilter struct {
	_ [0]*methodsAudioEffectHighPassFilter
	class
}

func (self AudioEffectHighPassFilter) AudioEffectFilter() AudioEffectFilter {
	var parent AudioEffectFilter
	parent.class = self.class
	return parent
}

type methodsAudioEffectHighShelfFilter struct {
	_ [0]*methodsAudioEffectHighShelfFilter
	class
}

func (self AudioEffectHighShelfFilter) AudioEffectFilter() AudioEffectFilter {
	var parent AudioEffectFilter
	parent.class = self.class
	return parent
}

type methodsAudioEffectInstance struct {
	_ [0]*methodsAudioEffectInstance
	class
}

func (self AudioEffectInstance) RefCounted() RefCounted {
	var parent RefCounted
	parent.class = self.class
	return parent
}

type methodsAudioEffectLimiter struct {
	_ [0]*methodsAudioEffectLimiter
	class
}

func (self AudioEffectLimiter) AudioEffect() AudioEffect {
	var parent AudioEffect
	parent.class = self.class
	return parent
}
func (self methodsAudioEffectLimiter) SetCeilingDb(ceiling Float) {
	self.Runtime.AudioEffectLimiter_set_ceiling_db(AudioEffectLimiter{self}, ceiling)
}
func (self methodsAudioEffectLimiter) GetCeilingDb() Float {
	return self.Runtime.AudioEffectLimiter_get_ceiling_db(AudioEffectLimiter{self})
}
func (self methodsAudioEffectLimiter) SetThresholdDb(threshold Float) {
	self.Runtime.AudioEffectLimiter_set_threshold_db(AudioEffectLimiter{self}, threshold)
}
func (self methodsAudioEffectLimiter) GetThresholdDb() Float {
	return self.Runtime.AudioEffectLimiter_get_threshold_db(AudioEffectLimiter{self})
}
func (self methodsAudioEffectLimiter) SetSoftClipDb(soft_clip Float) {
	self.Runtime.AudioEffectLimiter_set_soft_clip_db(AudioEffectLimiter{self}, soft_clip)
}
func (self methodsAudioEffectLimiter) GetSoftClipDb() Float {
	return self.Runtime.AudioEffectLimiter_get_soft_clip_db(AudioEffectLimiter{self})
}
func (self methodsAudioEffectLimiter) SetSoftClipRatio(soft_clip Float) {
	self.Runtime.AudioEffectLimiter_set_soft_clip_ratio(AudioEffectLimiter{self}, soft_clip)
}
func (self methodsAudioEffectLimiter) GetSoftClipRatio() Float {
	return self.Runtime.AudioEffectLimiter_get_soft_clip_ratio(AudioEffectLimiter{self})
}

type methodsAudioEffectLowPassFilter struct {
	_ [0]*methodsAudioEffectLowPassFilter
	class
}

func (self AudioEffectLowPassFilter) AudioEffectFilter() AudioEffectFilter {
	var parent AudioEffectFilter
	parent.class = self.class
	return parent
}

type methodsAudioEffectLowShelfFilter struct {
	_ [0]*methodsAudioEffectLowShelfFilter
	class
}

func (self AudioEffectLowShelfFilter) AudioEffectFilter() AudioEffectFilter {
	var parent AudioEffectFilter
	parent.class = self.class
	return parent
}

type methodsAudioEffectNotchFilter struct {
	_ [0]*methodsAudioEffectNotchFilter
	class
}

func (self AudioEffectNotchFilter) AudioEffectFilter() AudioEffectFilter {
	var parent AudioEffectFilter
	parent.class = self.class
	return parent
}

type methodsAudioEffectPanner struct {
	_ [0]*methodsAudioEffectPanner
	class
}

func (self AudioEffectPanner) AudioEffect() AudioEffect {
	var parent AudioEffect
	parent.class = self.class
	return parent
}
func (self methodsAudioEffectPanner) SetPan(cpanume Float) {
	self.Runtime.AudioEffectPanner_set_pan(AudioEffectPanner{self}, cpanume)
}
func (self methodsAudioEffectPanner) GetPan() Float {
	return self.Runtime.AudioEffectPanner_get_pan(AudioEffectPanner{self})
}

type methodsAudioEffectPhaser struct {
	_ [0]*methodsAudioEffectPhaser
	class
}

func (self AudioEffectPhaser) AudioEffect() AudioEffect {
	var parent AudioEffect
	parent.class = self.class
	return parent
}
func (self methodsAudioEffectPhaser) SetRangeMinHz(hz Float) {
	self.Runtime.AudioEffectPhaser_set_range_min_hz(AudioEffectPhaser{self}, hz)
}
func (self methodsAudioEffectPhaser) GetRangeMinHz() Float {
	return self.Runtime.AudioEffectPhaser_get_range_min_hz(AudioEffectPhaser{self})
}
func (self methodsAudioEffectPhaser) SetRangeMaxHz(hz Float) {
	self.Runtime.AudioEffectPhaser_set_range_max_hz(AudioEffectPhaser{self}, hz)
}
func (self methodsAudioEffectPhaser) GetRangeMaxHz() Float {
	return self.Runtime.AudioEffectPhaser_get_range_max_hz(AudioEffectPhaser{self})
}
func (self methodsAudioEffectPhaser) SetRateHz(hz Float) {
	self.Runtime.AudioEffectPhaser_set_rate_hz(AudioEffectPhaser{self}, hz)
}
func (self methodsAudioEffectPhaser) GetRateHz() Float {
	return self.Runtime.AudioEffectPhaser_get_rate_hz(AudioEffectPhaser{self})
}
func (self methodsAudioEffectPhaser) SetFeedback(fbk Float) {
	self.Runtime.AudioEffectPhaser_set_feedback(AudioEffectPhaser{self}, fbk)
}
func (self methodsAudioEffectPhaser) GetFeedback() Float {
	return self.Runtime.AudioEffectPhaser_get_feedback(AudioEffectPhaser{self})
}
func (self methodsAudioEffectPhaser) SetDepth(depth Float) {
	self.Runtime.AudioEffectPhaser_set_depth(AudioEffectPhaser{self}, depth)
}
func (self methodsAudioEffectPhaser) GetDepth() Float {
	return self.Runtime.AudioEffectPhaser_get_depth(AudioEffectPhaser{self})
}

type methodsAudioEffectPitchShift struct {
	_ [0]*methodsAudioEffectPitchShift
	class
}

func (self AudioEffectPitchShift) AudioEffect() AudioEffect {
	var parent AudioEffect
	parent.class = self.class
	return parent
}
func (self methodsAudioEffectPitchShift) SetPitchScale(rate Float) {
	self.Runtime.AudioEffectPitchShift_set_pitch_scale(AudioEffectPitchShift{self}, rate)
}
func (self methodsAudioEffectPitchShift) GetPitchScale() Float {
	return self.Runtime.AudioEffectPitchShift_get_pitch_scale(AudioEffectPitchShift{self})
}
func (self methodsAudioEffectPitchShift) SetOversampling(amount int64) {
	self.Runtime.AudioEffectPitchShift_set_oversampling(AudioEffectPitchShift{self}, amount)
}
func (self methodsAudioEffectPitchShift) GetOversampling() int64 {
	return self.Runtime.AudioEffectPitchShift_get_oversampling(AudioEffectPitchShift{self})
}
func (self methodsAudioEffectPitchShift) SetFftSize(size AudioEffectPitchShiftFFTSize) {
	self.Runtime.AudioEffectPitchShift_set_fft_size(AudioEffectPitchShift{self}, size)
}
func (self methodsAudioEffectPitchShift) GetFftSize() AudioEffectPitchShiftFFTSize {
	return self.Runtime.AudioEffectPitchShift_get_fft_size(AudioEffectPitchShift{self})
}

type methodsAudioEffectRecord struct {
	_ [0]*methodsAudioEffectRecord
	class
}

func (self AudioEffectRecord) AudioEffect() AudioEffect {
	var parent AudioEffect
	parent.class = self.class
	return parent
}
func (self methodsAudioEffectRecord) SetRecordingActive(record bool) {
	self.Runtime.AudioEffectRecord_set_recording_active(AudioEffectRecord{self}, record)
}
func (self methodsAudioEffectRecord) IsRecordingActive() bool {
	return self.Runtime.AudioEffectRecord_is_recording_active(AudioEffectRecord{self})
}
func (self methodsAudioEffectRecord) SetFormat(format AudioStreamWAVFormat) {
	self.Runtime.AudioEffectRecord_set_format(AudioEffectRecord{self}, format)
}
func (self methodsAudioEffectRecord) GetFormat() AudioStreamWAVFormat {
	return self.Runtime.AudioEffectRecord_get_format(AudioEffectRecord{self})
}
func (self methodsAudioEffectRecord) GetRecording() AudioStreamWAV {
	return self.Runtime.AudioEffectRecord_get_recording(AudioEffectRecord{self})
}

type methodsAudioEffectReverb struct {
	_ [0]*methodsAudioEffectReverb
	class
}

func (self AudioEffectReverb) AudioEffect() AudioEffect {
	var parent AudioEffect
	parent.class = self.class
	return parent
}
func (self methodsAudioEffectReverb) SetPredelayMsec(msec Float) {
	self.Runtime.AudioEffectReverb_set_predelay_msec(AudioEffectReverb{self}, msec)
}
func (self methodsAudioEffectReverb) GetPredelayMsec() Float {
	return self.Runtime.AudioEffectReverb_get_predelay_msec(AudioEffectReverb{self})
}
func (self methodsAudioEffectReverb) SetPredelayFeedback(feedback Float) {
	self.Runtime.AudioEffectReverb_set_predelay_feedback(AudioEffectReverb{self}, feedback)
}
func (self methodsAudioEffectReverb) GetPredelayFeedback() Float {
	return self.Runtime.AudioEffectReverb_get_predelay_feedback(AudioEffectReverb{self})
}
func (self methodsAudioEffectReverb) SetRoomSize(size Float) {
	self.Runtime.AudioEffectReverb_set_room_size(AudioEffectReverb{self}, size)
}
func (self methodsAudioEffectReverb) GetRoomSize() Float {
	return self.Runtime.AudioEffectReverb_get_room_size(AudioEffectReverb{self})
}
func (self methodsAudioEffectReverb) SetDamping(amount Float) {
	self.Runtime.AudioEffectReverb_set_damping(AudioEffectReverb{self}, amount)
}
func (self methodsAudioEffectReverb) GetDamping() Float {
	return self.Runtime.AudioEffectReverb_get_damping(AudioEffectReverb{self})
}
func (self methodsAudioEffectReverb) SetSpread(amount Float) {
	self.Runtime.AudioEffectReverb_set_spread(AudioEffectReverb{self}, amount)
}
func (self methodsAudioEffectReverb) GetSpread() Float {
	return self.Runtime.AudioEffectReverb_get_spread(AudioEffectReverb{self})
}
func (self methodsAudioEffectReverb) SetDry(amount Float) {
	self.Runtime.AudioEffectReverb_set_dry(AudioEffectReverb{self}, amount)
}
func (self methodsAudioEffectReverb) GetDry() Float {
	return self.Runtime.AudioEffectReverb_get_dry(AudioEffectReverb{self})
}
func (self methodsAudioEffectReverb) SetWet(amount Float) {
	self.Runtime.AudioEffectReverb_set_wet(AudioEffectReverb{self}, amount)
}
func (self methodsAudioEffectReverb) GetWet() Float {
	return self.Runtime.AudioEffectReverb_get_wet(AudioEffectReverb{self})
}
func (self methodsAudioEffectReverb) SetHpf(amount Float) {
	self.Runtime.AudioEffectReverb_set_hpf(AudioEffectReverb{self}, amount)
}
func (self methodsAudioEffectReverb) GetHpf() Float {
	return self.Runtime.AudioEffectReverb_get_hpf(AudioEffectReverb{self})
}

type methodsAudioEffectSpectrumAnalyzer struct {
	_ [0]*methodsAudioEffectSpectrumAnalyzer
	class
}

func (self AudioEffectSpectrumAnalyzer) AudioEffect() AudioEffect {
	var parent AudioEffect
	parent.class = self.class
	return parent
}
func (self methodsAudioEffectSpectrumAnalyzer) SetBufferLength(seconds Float) {
	self.Runtime.AudioEffectSpectrumAnalyzer_set_buffer_length(AudioEffectSpectrumAnalyzer{self}, seconds)
}
func (self methodsAudioEffectSpectrumAnalyzer) GetBufferLength() Float {
	return self.Runtime.AudioEffectSpectrumAnalyzer_get_buffer_length(AudioEffectSpectrumAnalyzer{self})
}
func (self methodsAudioEffectSpectrumAnalyzer) SetTapBackPos(seconds Float) {
	self.Runtime.AudioEffectSpectrumAnalyzer_set_tap_back_pos(AudioEffectSpectrumAnalyzer{self}, seconds)
}
func (self methodsAudioEffectSpectrumAnalyzer) GetTapBackPos() Float {
	return self.Runtime.AudioEffectSpectrumAnalyzer_get_tap_back_pos(AudioEffectSpectrumAnalyzer{self})
}
func (self methodsAudioEffectSpectrumAnalyzer) SetFftSize(size AudioEffectSpectrumAnalyzerFFTSize) {
	self.Runtime.AudioEffectSpectrumAnalyzer_set_fft_size(AudioEffectSpectrumAnalyzer{self}, size)
}
func (self methodsAudioEffectSpectrumAnalyzer) GetFftSize() AudioEffectSpectrumAnalyzerFFTSize {
	return self.Runtime.AudioEffectSpectrumAnalyzer_get_fft_size(AudioEffectSpectrumAnalyzer{self})
}

type methodsAudioEffectSpectrumAnalyzerInstance struct {
	_ [0]*methodsAudioEffectSpectrumAnalyzerInstance
	class
}

func (self AudioEffectSpectrumAnalyzerInstance) AudioEffectInstance() AudioEffectInstance {
	var parent AudioEffectInstance
	parent.class = self.class
	return parent
}
func (self methodsAudioEffectSpectrumAnalyzerInstance) GetMagnitudeForFrequencyRange(from_hz Float, to_hz Float, mode AudioEffectSpectrumAnalyzerInstanceMagnitudeMode) Vector2 {
	return self.Runtime.AudioEffectSpectrumAnalyzerInstance_get_magnitude_for_frequency_range(AudioEffectSpectrumAnalyzerInstance{self}, from_hz, to_hz, mode)
}

type methodsAudioEffectStereoEnhance struct {
	_ [0]*methodsAudioEffectStereoEnhance
	class
}

func (self AudioEffectStereoEnhance) AudioEffect() AudioEffect {
	var parent AudioEffect
	parent.class = self.class
	return parent
}
func (self methodsAudioEffectStereoEnhance) SetPanPullout(amount Float) {
	self.Runtime.AudioEffectStereoEnhance_set_pan_pullout(AudioEffectStereoEnhance{self}, amount)
}
func (self methodsAudioEffectStereoEnhance) GetPanPullout() Float {
	return self.Runtime.AudioEffectStereoEnhance_get_pan_pullout(AudioEffectStereoEnhance{self})
}
func (self methodsAudioEffectStereoEnhance) SetTimePullout(amount Float) {
	self.Runtime.AudioEffectStereoEnhance_set_time_pullout(AudioEffectStereoEnhance{self}, amount)
}
func (self methodsAudioEffectStereoEnhance) GetTimePullout() Float {
	return self.Runtime.AudioEffectStereoEnhance_get_time_pullout(AudioEffectStereoEnhance{self})
}
func (self methodsAudioEffectStereoEnhance) SetSurround(amount Float) {
	self.Runtime.AudioEffectStereoEnhance_set_surround(AudioEffectStereoEnhance{self}, amount)
}
func (self methodsAudioEffectStereoEnhance) GetSurround() Float {
	return self.Runtime.AudioEffectStereoEnhance_get_surround(AudioEffectStereoEnhance{self})
}

type methodsAudioListener2D struct {
	_ [0]*methodsAudioListener2D
	class
}

func (self AudioListener2D) Node2D() Node2D {
	var parent Node2D
	parent.class = self.class
	return parent
}
func (self methodsAudioListener2D) MakeCurrent() {
	self.Runtime.AudioListener2D_make_current(AudioListener2D{self})
}
func (self methodsAudioListener2D) ClearCurrent() {
	self.Runtime.AudioListener2D_clear_current(AudioListener2D{self})
}
func (self methodsAudioListener2D) IsCurrent() bool {
	return self.Runtime.AudioListener2D_is_current(AudioListener2D{self})
}

type methodsAudioListener3D struct {
	_ [0]*methodsAudioListener3D
	class
}

func (self AudioListener3D) Node3D() Node3D {
	var parent Node3D
	parent.class = self.class
	return parent
}
func (self methodsAudioListener3D) MakeCurrent() {
	self.Runtime.AudioListener3D_make_current(AudioListener3D{self})
}
func (self methodsAudioListener3D) ClearCurrent() {
	self.Runtime.AudioListener3D_clear_current(AudioListener3D{self})
}
func (self methodsAudioListener3D) IsCurrent() bool {
	return self.Runtime.AudioListener3D_is_current(AudioListener3D{self})
}
func (self methodsAudioListener3D) GetListenerTransform() Transform3D {
	return self.Runtime.AudioListener3D_get_listener_transform(AudioListener3D{self})
}

type methodsAudioServer struct {
	_ [0]*methodsAudioServer
	class
}

func (self AudioServer) Object() Object { var parent Object; parent.class = self.class; return parent }
func (self methodsAudioServer) SetBusCount(amount int64) {
	self.Runtime.AudioServer_set_bus_count(AudioServer{self}, amount)
}
func (self methodsAudioServer) GetBusCount() int64 {
	return self.Runtime.AudioServer_get_bus_count(AudioServer{self})
}
func (self methodsAudioServer) RemoveBus(index int64) {
	self.Runtime.AudioServer_remove_bus(AudioServer{self}, index)
}
func (self methodsAudioServer) AddBus(at_position int64) {
	self.Runtime.AudioServer_add_bus(AudioServer{self}, at_position)
}
func (self methodsAudioServer) MoveBus(index int64, to_index int64) {
	self.Runtime.AudioServer_move_bus(AudioServer{self}, index, to_index)
}
func (self methodsAudioServer) SetBusName(bus_idx int64, name string) {
	self.Runtime.AudioServer_set_bus_name(AudioServer{self}, bus_idx, name)
}
func (self methodsAudioServer) GetBusName(bus_idx int64) string {
	return self.Runtime.AudioServer_get_bus_name(AudioServer{self}, bus_idx)
}
func (self methodsAudioServer) GetBusIndex(bus_name string) int64 {
	return self.Runtime.AudioServer_get_bus_index(AudioServer{self}, bus_name)
}
func (self methodsAudioServer) GetBusChannels(bus_idx int64) int64 {
	return self.Runtime.AudioServer_get_bus_channels(AudioServer{self}, bus_idx)
}
func (self methodsAudioServer) SetBusVolumeDb(bus_idx int64, volume_db Float) {
	self.Runtime.AudioServer_set_bus_volume_db(AudioServer{self}, bus_idx, volume_db)
}
func (self methodsAudioServer) GetBusVolumeDb(bus_idx int64) Float {
	return self.Runtime.AudioServer_get_bus_volume_db(AudioServer{self}, bus_idx)
}
func (self methodsAudioServer) SetBusSend(bus_idx int64, send string) {
	self.Runtime.AudioServer_set_bus_send(AudioServer{self}, bus_idx, send)
}
func (self methodsAudioServer) GetBusSend(bus_idx int64) string {
	return self.Runtime.AudioServer_get_bus_send(AudioServer{self}, bus_idx)
}
func (self methodsAudioServer) SetBusSolo(bus_idx int64, enable bool) {
	self.Runtime.AudioServer_set_bus_solo(AudioServer{self}, bus_idx, enable)
}
func (self methodsAudioServer) IsBusSolo(bus_idx int64) bool {
	return self.Runtime.AudioServer_is_bus_solo(AudioServer{self}, bus_idx)
}
func (self methodsAudioServer) SetBusMute(bus_idx int64, enable bool) {
	self.Runtime.AudioServer_set_bus_mute(AudioServer{self}, bus_idx, enable)
}
func (self methodsAudioServer) IsBusMute(bus_idx int64) bool {
	return self.Runtime.AudioServer_is_bus_mute(AudioServer{self}, bus_idx)
}
func (self methodsAudioServer) SetBusBypassEffects(bus_idx int64, enable bool) {
	self.Runtime.AudioServer_set_bus_bypass_effects(AudioServer{self}, bus_idx, enable)
}
func (self methodsAudioServer) IsBusBypassingEffects(bus_idx int64) bool {
	return self.Runtime.AudioServer_is_bus_bypassing_effects(AudioServer{self}, bus_idx)
}
func (self methodsAudioServer) AddBusEffect(bus_idx int64, effect AudioEffect, at_position int64) {
	self.Runtime.AudioServer_add_bus_effect(AudioServer{self}, bus_idx, effect, at_position)
}
func (self methodsAudioServer) RemoveBusEffect(bus_idx int64, effect_idx int64) {
	self.Runtime.AudioServer_remove_bus_effect(AudioServer{self}, bus_idx, effect_idx)
}
func (self methodsAudioServer) GetBusEffectCount(bus_idx int64) int64 {
	return self.Runtime.AudioServer_get_bus_effect_count(AudioServer{self}, bus_idx)
}
func (self methodsAudioServer) GetBusEffect(bus_idx int64, effect_idx int64) AudioEffect {
	return self.Runtime.AudioServer_get_bus_effect(AudioServer{self}, bus_idx, effect_idx)
}
func (self methodsAudioServer) GetBusEffectInstance(bus_idx int64, effect_idx int64, channel int64) AudioEffectInstance {
	return self.Runtime.AudioServer_get_bus_effect_instance(AudioServer{self}, bus_idx, effect_idx, channel)
}
func (self methodsAudioServer) SwapBusEffects(bus_idx int64, effect_idx int64, by_effect_idx int64) {
	self.Runtime.AudioServer_swap_bus_effects(AudioServer{self}, bus_idx, effect_idx, by_effect_idx)
}
func (self methodsAudioServer) SetBusEffectEnabled(bus_idx int64, effect_idx int64, enabled bool) {
	self.Runtime.AudioServer_set_bus_effect_enabled(AudioServer{self}, bus_idx, effect_idx, enabled)
}
func (self methodsAudioServer) IsBusEffectEnabled(bus_idx int64, effect_idx int64) bool {
	return self.Runtime.AudioServer_is_bus_effect_enabled(AudioServer{self}, bus_idx, effect_idx)
}
func (self methodsAudioServer) GetBusPeakVolumeLeftDb(bus_idx int64, channel int64) Float {
	return self.Runtime.AudioServer_get_bus_peak_volume_left_db(AudioServer{self}, bus_idx, channel)
}
func (self methodsAudioServer) GetBusPeakVolumeRightDb(bus_idx int64, channel int64) Float {
	return self.Runtime.AudioServer_get_bus_peak_volume_right_db(AudioServer{self}, bus_idx, channel)
}
func (self methodsAudioServer) SetPlaybackSpeedScale(scale Float) {
	self.Runtime.AudioServer_set_playback_speed_scale(AudioServer{self}, scale)
}
func (self methodsAudioServer) GetPlaybackSpeedScale() Float {
	return self.Runtime.AudioServer_get_playback_speed_scale(AudioServer{self})
}
func (self methodsAudioServer) Lock() {
	self.Runtime.AudioServer_lock(AudioServer{self})
}
func (self methodsAudioServer) Unlock() {
	self.Runtime.AudioServer_unlock(AudioServer{self})
}
func (self methodsAudioServer) GetSpeakerMode() AudioServerSpeakerMode {
	return self.Runtime.AudioServer_get_speaker_mode(AudioServer{self})
}
func (self methodsAudioServer) GetMixRate() Float {
	return self.Runtime.AudioServer_get_mix_rate(AudioServer{self})
}
func (self methodsAudioServer) GetOutputDeviceList() PackedStringArray {
	return self.Runtime.AudioServer_get_output_device_list(AudioServer{self})
}
func (self methodsAudioServer) GetOutputDevice() string {
	return self.Runtime.AudioServer_get_output_device(AudioServer{self})
}
func (self methodsAudioServer) SetOutputDevice(name string) {
	self.Runtime.AudioServer_set_output_device(AudioServer{self}, name)
}
func (self methodsAudioServer) GetTimeToNextMix() Float {
	return self.Runtime.AudioServer_get_time_to_next_mix(AudioServer{self})
}
func (self methodsAudioServer) GetTimeSinceLastMix() Float {
	return self.Runtime.AudioServer_get_time_since_last_mix(AudioServer{self})
}
func (self methodsAudioServer) GetOutputLatency() Float {
	return self.Runtime.AudioServer_get_output_latency(AudioServer{self})
}
func (self methodsAudioServer) GetInputDeviceList() PackedStringArray {
	return self.Runtime.AudioServer_get_input_device_list(AudioServer{self})
}
func (self methodsAudioServer) GetInputDevice() string {
	return self.Runtime.AudioServer_get_input_device(AudioServer{self})
}
func (self methodsAudioServer) SetInputDevice(name string) {
	self.Runtime.AudioServer_set_input_device(AudioServer{self}, name)
}
func (self methodsAudioServer) SetBusLayout(bus_layout AudioBusLayout) {
	self.Runtime.AudioServer_set_bus_layout(AudioServer{self}, bus_layout)
}
func (self methodsAudioServer) GenerateBusLayout() AudioBusLayout {
	return self.Runtime.AudioServer_generate_bus_layout(AudioServer{self})
}
func (self methodsAudioServer) SetEnableTaggingUsedAudioStreams(enable bool) {
	self.Runtime.AudioServer_set_enable_tagging_used_audio_streams(AudioServer{self}, enable)
}

type methodsAudioStream struct {
	_ [0]*methodsAudioStream
	class
}

func (self AudioStream) Resource() Resource {
	var parent Resource
	parent.class = self.class
	return parent
}
func (self methodsAudioStream) GetLength() Float {
	return self.Runtime.AudioStream_get_length(AudioStream{self})
}
func (self methodsAudioStream) IsMonophonic() bool {
	return self.Runtime.AudioStream_is_monophonic(AudioStream{self})
}
func (self methodsAudioStream) InstantiatePlayback() AudioStreamPlayback {
	return self.Runtime.AudioStream_instantiate_playback(AudioStream{self})
}

type methodsAudioStreamGenerator struct {
	_ [0]*methodsAudioStreamGenerator
	class
}

func (self AudioStreamGenerator) AudioStream() AudioStream {
	var parent AudioStream
	parent.class = self.class
	return parent
}
func (self methodsAudioStreamGenerator) SetMixRate(hz Float) {
	self.Runtime.AudioStreamGenerator_set_mix_rate(AudioStreamGenerator{self}, hz)
}
func (self methodsAudioStreamGenerator) GetMixRate() Float {
	return self.Runtime.AudioStreamGenerator_get_mix_rate(AudioStreamGenerator{self})
}
func (self methodsAudioStreamGenerator) SetBufferLength(seconds Float) {
	self.Runtime.AudioStreamGenerator_set_buffer_length(AudioStreamGenerator{self}, seconds)
}
func (self methodsAudioStreamGenerator) GetBufferLength() Float {
	return self.Runtime.AudioStreamGenerator_get_buffer_length(AudioStreamGenerator{self})
}

type methodsAudioStreamGeneratorPlayback struct {
	_ [0]*methodsAudioStreamGeneratorPlayback
	class
}

func (self AudioStreamGeneratorPlayback) AudioStreamPlaybackResampled() AudioStreamPlaybackResampled {
	var parent AudioStreamPlaybackResampled
	parent.class = self.class
	return parent
}
func (self methodsAudioStreamGeneratorPlayback) PushFrame(frame Vector2) bool {
	return self.Runtime.AudioStreamGeneratorPlayback_push_frame(AudioStreamGeneratorPlayback{self}, frame)
}
func (self methodsAudioStreamGeneratorPlayback) CanPushBuffer(amount int64) bool {
	return self.Runtime.AudioStreamGeneratorPlayback_can_push_buffer(AudioStreamGeneratorPlayback{self}, amount)
}
func (self methodsAudioStreamGeneratorPlayback) PushBuffer(frames PackedVector2Array) bool {
	return self.Runtime.AudioStreamGeneratorPlayback_push_buffer(AudioStreamGeneratorPlayback{self}, frames)
}
func (self methodsAudioStreamGeneratorPlayback) GetFramesAvailable() int64 {
	return self.Runtime.AudioStreamGeneratorPlayback_get_frames_available(AudioStreamGeneratorPlayback{self})
}
func (self methodsAudioStreamGeneratorPlayback) GetSkips() int64 {
	return self.Runtime.AudioStreamGeneratorPlayback_get_skips(AudioStreamGeneratorPlayback{self})
}
func (self methodsAudioStreamGeneratorPlayback) ClearBuffer() {
	self.Runtime.AudioStreamGeneratorPlayback_clear_buffer(AudioStreamGeneratorPlayback{self})
}

type methodsAudioStreamMP3 struct {
	_ [0]*methodsAudioStreamMP3
	class
}

func (self AudioStreamMP3) AudioStream() AudioStream {
	var parent AudioStream
	parent.class = self.class
	return parent
}
func (self methodsAudioStreamMP3) SetData(data PackedByteArray) {
	self.Runtime.AudioStreamMP3_set_data(AudioStreamMP3{self}, data)
}
func (self methodsAudioStreamMP3) GetData() PackedByteArray {
	return self.Runtime.AudioStreamMP3_get_data(AudioStreamMP3{self})
}
func (self methodsAudioStreamMP3) SetLoop(enable bool) {
	self.Runtime.AudioStreamMP3_set_loop(AudioStreamMP3{self}, enable)
}
func (self methodsAudioStreamMP3) HasLoop() bool {
	return self.Runtime.AudioStreamMP3_has_loop(AudioStreamMP3{self})
}
func (self methodsAudioStreamMP3) SetLoopOffset(seconds Float) {
	self.Runtime.AudioStreamMP3_set_loop_offset(AudioStreamMP3{self}, seconds)
}
func (self methodsAudioStreamMP3) GetLoopOffset() Float {
	return self.Runtime.AudioStreamMP3_get_loop_offset(AudioStreamMP3{self})
}
func (self methodsAudioStreamMP3) SetBpm(bpm Float) {
	self.Runtime.AudioStreamMP3_set_bpm(AudioStreamMP3{self}, bpm)
}
func (self methodsAudioStreamMP3) GetBpm() Float {
	return self.Runtime.AudioStreamMP3_get_bpm(AudioStreamMP3{self})
}
func (self methodsAudioStreamMP3) SetBeatCount(count int64) {
	self.Runtime.AudioStreamMP3_set_beat_count(AudioStreamMP3{self}, count)
}
func (self methodsAudioStreamMP3) GetBeatCount() int64 {
	return self.Runtime.AudioStreamMP3_get_beat_count(AudioStreamMP3{self})
}
func (self methodsAudioStreamMP3) SetBarBeats(count int64) {
	self.Runtime.AudioStreamMP3_set_bar_beats(AudioStreamMP3{self}, count)
}
func (self methodsAudioStreamMP3) GetBarBeats() int64 {
	return self.Runtime.AudioStreamMP3_get_bar_beats(AudioStreamMP3{self})
}

type methodsAudioStreamMicrophone struct {
	_ [0]*methodsAudioStreamMicrophone
	class
}

func (self AudioStreamMicrophone) AudioStream() AudioStream {
	var parent AudioStream
	parent.class = self.class
	return parent
}

type methodsAudioStreamOggVorbis struct {
	_ [0]*methodsAudioStreamOggVorbis
	class
}

func (self AudioStreamOggVorbis) AudioStream() AudioStream {
	var parent AudioStream
	parent.class = self.class
	return parent
}
func (self methodsAudioStreamOggVorbis) LoadFromBuffer(buffer PackedByteArray) AudioStreamOggVorbis {
	return self.Runtime.AudioStreamOggVorbis_load_from_buffer(AudioStreamOggVorbis{self}, buffer)
}
func (self methodsAudioStreamOggVorbis) LoadFromFile(path string) AudioStreamOggVorbis {
	return self.Runtime.AudioStreamOggVorbis_load_from_file(AudioStreamOggVorbis{self}, path)
}
func (self methodsAudioStreamOggVorbis) SetPacketSequence(packet_sequence OggPacketSequence) {
	self.Runtime.AudioStreamOggVorbis_set_packet_sequence(AudioStreamOggVorbis{self}, packet_sequence)
}
func (self methodsAudioStreamOggVorbis) GetPacketSequence() OggPacketSequence {
	return self.Runtime.AudioStreamOggVorbis_get_packet_sequence(AudioStreamOggVorbis{self})
}
func (self methodsAudioStreamOggVorbis) SetLoop(enable bool) {
	self.Runtime.AudioStreamOggVorbis_set_loop(AudioStreamOggVorbis{self}, enable)
}
func (self methodsAudioStreamOggVorbis) HasLoop() bool {
	return self.Runtime.AudioStreamOggVorbis_has_loop(AudioStreamOggVorbis{self})
}
func (self methodsAudioStreamOggVorbis) SetLoopOffset(seconds Float) {
	self.Runtime.AudioStreamOggVorbis_set_loop_offset(AudioStreamOggVorbis{self}, seconds)
}
func (self methodsAudioStreamOggVorbis) GetLoopOffset() Float {
	return self.Runtime.AudioStreamOggVorbis_get_loop_offset(AudioStreamOggVorbis{self})
}
func (self methodsAudioStreamOggVorbis) SetBpm(bpm Float) {
	self.Runtime.AudioStreamOggVorbis_set_bpm(AudioStreamOggVorbis{self}, bpm)
}
func (self methodsAudioStreamOggVorbis) GetBpm() Float {
	return self.Runtime.AudioStreamOggVorbis_get_bpm(AudioStreamOggVorbis{self})
}
func (self methodsAudioStreamOggVorbis) SetBeatCount(count int64) {
	self.Runtime.AudioStreamOggVorbis_set_beat_count(AudioStreamOggVorbis{self}, count)
}
func (self methodsAudioStreamOggVorbis) GetBeatCount() int64 {
	return self.Runtime.AudioStreamOggVorbis_get_beat_count(AudioStreamOggVorbis{self})
}
func (self methodsAudioStreamOggVorbis) SetBarBeats(count int64) {
	self.Runtime.AudioStreamOggVorbis_set_bar_beats(AudioStreamOggVorbis{self}, count)
}
func (self methodsAudioStreamOggVorbis) GetBarBeats() int64 {
	return self.Runtime.AudioStreamOggVorbis_get_bar_beats(AudioStreamOggVorbis{self})
}

type methodsAudioStreamPlayback struct {
	_ [0]*methodsAudioStreamPlayback
	class
}

func (self AudioStreamPlayback) RefCounted() RefCounted {
	var parent RefCounted
	parent.class = self.class
	return parent
}

type methodsAudioStreamPlaybackOggVorbis struct {
	_ [0]*methodsAudioStreamPlaybackOggVorbis
	class
}

func (self AudioStreamPlaybackOggVorbis) AudioStreamPlaybackResampled() AudioStreamPlaybackResampled {
	var parent AudioStreamPlaybackResampled
	parent.class = self.class
	return parent
}

type methodsAudioStreamPlaybackPolyphonic struct {
	_ [0]*methodsAudioStreamPlaybackPolyphonic
	class
}

func (self AudioStreamPlaybackPolyphonic) AudioStreamPlayback() AudioStreamPlayback {
	var parent AudioStreamPlayback
	parent.class = self.class
	return parent
}
func (self methodsAudioStreamPlaybackPolyphonic) PlayStream(stream AudioStream, from_offset Float, volume_db Float, pitch_scale Float) int64 {
	return self.Runtime.AudioStreamPlaybackPolyphonic_play_stream(AudioStreamPlaybackPolyphonic{self}, stream, from_offset, volume_db, pitch_scale)
}
func (self methodsAudioStreamPlaybackPolyphonic) SetStreamVolume(stream int64, volume_db Float) {
	self.Runtime.AudioStreamPlaybackPolyphonic_set_stream_volume(AudioStreamPlaybackPolyphonic{self}, stream, volume_db)
}
func (self methodsAudioStreamPlaybackPolyphonic) SetStreamPitchScale(stream int64, pitch_scale Float) {
	self.Runtime.AudioStreamPlaybackPolyphonic_set_stream_pitch_scale(AudioStreamPlaybackPolyphonic{self}, stream, pitch_scale)
}
func (self methodsAudioStreamPlaybackPolyphonic) IsStreamPlaying(stream int64) bool {
	return self.Runtime.AudioStreamPlaybackPolyphonic_is_stream_playing(AudioStreamPlaybackPolyphonic{self}, stream)
}
func (self methodsAudioStreamPlaybackPolyphonic) StopStream(stream int64) {
	self.Runtime.AudioStreamPlaybackPolyphonic_stop_stream(AudioStreamPlaybackPolyphonic{self}, stream)
}

type methodsAudioStreamPlaybackResampled struct {
	_ [0]*methodsAudioStreamPlaybackResampled
	class
}

func (self AudioStreamPlaybackResampled) AudioStreamPlayback() AudioStreamPlayback {
	var parent AudioStreamPlayback
	parent.class = self.class
	return parent
}
func (self methodsAudioStreamPlaybackResampled) BeginResample() {
	self.Runtime.AudioStreamPlaybackResampled_begin_resample(AudioStreamPlaybackResampled{self})
}

type methodsAudioStreamPlayer struct {
	_ [0]*methodsAudioStreamPlayer
	class
}

func (self AudioStreamPlayer) Node() Node { var parent Node; parent.class = self.class; return parent }
func (self methodsAudioStreamPlayer) SetStream(stream AudioStream) {
	self.Runtime.AudioStreamPlayer_set_stream(AudioStreamPlayer{self}, stream)
}
func (self methodsAudioStreamPlayer) GetStream() AudioStream {
	return self.Runtime.AudioStreamPlayer_get_stream(AudioStreamPlayer{self})
}
func (self methodsAudioStreamPlayer) SetVolumeDb(volume_db Float) {
	self.Runtime.AudioStreamPlayer_set_volume_db(AudioStreamPlayer{self}, volume_db)
}
func (self methodsAudioStreamPlayer) GetVolumeDb() Float {
	return self.Runtime.AudioStreamPlayer_get_volume_db(AudioStreamPlayer{self})
}
func (self methodsAudioStreamPlayer) SetPitchScale(pitch_scale Float) {
	self.Runtime.AudioStreamPlayer_set_pitch_scale(AudioStreamPlayer{self}, pitch_scale)
}
func (self methodsAudioStreamPlayer) GetPitchScale() Float {
	return self.Runtime.AudioStreamPlayer_get_pitch_scale(AudioStreamPlayer{self})
}
func (self methodsAudioStreamPlayer) Play(from_position Float) {
	self.Runtime.AudioStreamPlayer_play(AudioStreamPlayer{self}, from_position)
}
func (self methodsAudioStreamPlayer) SeekTo(to_position Float) {
	self.Runtime.AudioStreamPlayer_seek(AudioStreamPlayer{self}, to_position)
}
func (self methodsAudioStreamPlayer) Stop() {
	self.Runtime.AudioStreamPlayer_stop(AudioStreamPlayer{self})
}
func (self methodsAudioStreamPlayer) IsPlaying() bool {
	return self.Runtime.AudioStreamPlayer_is_playing(AudioStreamPlayer{self})
}
func (self methodsAudioStreamPlayer) GetPlaybackPosition() Float {
	return self.Runtime.AudioStreamPlayer_get_playback_position(AudioStreamPlayer{self})
}
func (self methodsAudioStreamPlayer) SetBus(bus string) {
	self.Runtime.AudioStreamPlayer_set_bus(AudioStreamPlayer{self}, bus)
}
func (self methodsAudioStreamPlayer) GetBus() string {
	return self.Runtime.AudioStreamPlayer_get_bus(AudioStreamPlayer{self})
}
func (self methodsAudioStreamPlayer) SetAutoplay(enable bool) {
	self.Runtime.AudioStreamPlayer_set_autoplay(AudioStreamPlayer{self}, enable)
}
func (self methodsAudioStreamPlayer) IsAutoplayEnabled() bool {
	return self.Runtime.AudioStreamPlayer_is_autoplay_enabled(AudioStreamPlayer{self})
}
func (self methodsAudioStreamPlayer) SetMixTarget(mix_target AudioStreamPlayerMixTarget) {
	self.Runtime.AudioStreamPlayer_set_mix_target(AudioStreamPlayer{self}, mix_target)
}
func (self methodsAudioStreamPlayer) GetMixTarget() AudioStreamPlayerMixTarget {
	return self.Runtime.AudioStreamPlayer_get_mix_target(AudioStreamPlayer{self})
}
func (self methodsAudioStreamPlayer) SetStreamPaused(pause bool) {
	self.Runtime.AudioStreamPlayer_set_stream_paused(AudioStreamPlayer{self}, pause)
}
func (self methodsAudioStreamPlayer) GetStreamPaused() bool {
	return self.Runtime.AudioStreamPlayer_get_stream_paused(AudioStreamPlayer{self})
}
func (self methodsAudioStreamPlayer) SetMaxPolyphony(max_polyphony int64) {
	self.Runtime.AudioStreamPlayer_set_max_polyphony(AudioStreamPlayer{self}, max_polyphony)
}
func (self methodsAudioStreamPlayer) GetMaxPolyphony() int64 {
	return self.Runtime.AudioStreamPlayer_get_max_polyphony(AudioStreamPlayer{self})
}
func (self methodsAudioStreamPlayer) HasStreamPlayback() bool {
	return self.Runtime.AudioStreamPlayer_has_stream_playback(AudioStreamPlayer{self})
}
func (self methodsAudioStreamPlayer) GetStreamPlayback() AudioStreamPlayback {
	return self.Runtime.AudioStreamPlayer_get_stream_playback(AudioStreamPlayer{self})
}

type methodsAudioStreamPlayer2D struct {
	_ [0]*methodsAudioStreamPlayer2D
	class
}

func (self AudioStreamPlayer2D) Node2D() Node2D {
	var parent Node2D
	parent.class = self.class
	return parent
}
func (self methodsAudioStreamPlayer2D) SetStream(stream AudioStream) {
	self.Runtime.AudioStreamPlayer2D_set_stream(AudioStreamPlayer2D{self}, stream)
}
func (self methodsAudioStreamPlayer2D) GetStream() AudioStream {
	return self.Runtime.AudioStreamPlayer2D_get_stream(AudioStreamPlayer2D{self})
}
func (self methodsAudioStreamPlayer2D) SetVolumeDb(volume_db Float) {
	self.Runtime.AudioStreamPlayer2D_set_volume_db(AudioStreamPlayer2D{self}, volume_db)
}
func (self methodsAudioStreamPlayer2D) GetVolumeDb() Float {
	return self.Runtime.AudioStreamPlayer2D_get_volume_db(AudioStreamPlayer2D{self})
}
func (self methodsAudioStreamPlayer2D) SetPitchScale(pitch_scale Float) {
	self.Runtime.AudioStreamPlayer2D_set_pitch_scale(AudioStreamPlayer2D{self}, pitch_scale)
}
func (self methodsAudioStreamPlayer2D) GetPitchScale() Float {
	return self.Runtime.AudioStreamPlayer2D_get_pitch_scale(AudioStreamPlayer2D{self})
}
func (self methodsAudioStreamPlayer2D) Play(from_position Float) {
	self.Runtime.AudioStreamPlayer2D_play(AudioStreamPlayer2D{self}, from_position)
}
func (self methodsAudioStreamPlayer2D) SeekTo(to_position Float) {
	self.Runtime.AudioStreamPlayer2D_seek(AudioStreamPlayer2D{self}, to_position)
}
func (self methodsAudioStreamPlayer2D) Stop() {
	self.Runtime.AudioStreamPlayer2D_stop(AudioStreamPlayer2D{self})
}
func (self methodsAudioStreamPlayer2D) IsPlaying() bool {
	return self.Runtime.AudioStreamPlayer2D_is_playing(AudioStreamPlayer2D{self})
}
func (self methodsAudioStreamPlayer2D) GetPlaybackPosition() Float {
	return self.Runtime.AudioStreamPlayer2D_get_playback_position(AudioStreamPlayer2D{self})
}
func (self methodsAudioStreamPlayer2D) SetBus(bus string) {
	self.Runtime.AudioStreamPlayer2D_set_bus(AudioStreamPlayer2D{self}, bus)
}
func (self methodsAudioStreamPlayer2D) GetBus() string {
	return self.Runtime.AudioStreamPlayer2D_get_bus(AudioStreamPlayer2D{self})
}
func (self methodsAudioStreamPlayer2D) SetAutoplay(enable bool) {
	self.Runtime.AudioStreamPlayer2D_set_autoplay(AudioStreamPlayer2D{self}, enable)
}
func (self methodsAudioStreamPlayer2D) IsAutoplayEnabled() bool {
	return self.Runtime.AudioStreamPlayer2D_is_autoplay_enabled(AudioStreamPlayer2D{self})
}
func (self methodsAudioStreamPlayer2D) SetMaxDistance(pixels Float) {
	self.Runtime.AudioStreamPlayer2D_set_max_distance(AudioStreamPlayer2D{self}, pixels)
}
func (self methodsAudioStreamPlayer2D) GetMaxDistance() Float {
	return self.Runtime.AudioStreamPlayer2D_get_max_distance(AudioStreamPlayer2D{self})
}
func (self methodsAudioStreamPlayer2D) SetAttenuation(curve Float) {
	self.Runtime.AudioStreamPlayer2D_set_attenuation(AudioStreamPlayer2D{self}, curve)
}
func (self methodsAudioStreamPlayer2D) GetAttenuation() Float {
	return self.Runtime.AudioStreamPlayer2D_get_attenuation(AudioStreamPlayer2D{self})
}
func (self methodsAudioStreamPlayer2D) SetAreaMask(mask int64) {
	self.Runtime.AudioStreamPlayer2D_set_area_mask(AudioStreamPlayer2D{self}, mask)
}
func (self methodsAudioStreamPlayer2D) GetAreaMask() int64 {
	return self.Runtime.AudioStreamPlayer2D_get_area_mask(AudioStreamPlayer2D{self})
}
func (self methodsAudioStreamPlayer2D) SetStreamPaused(pause bool) {
	self.Runtime.AudioStreamPlayer2D_set_stream_paused(AudioStreamPlayer2D{self}, pause)
}
func (self methodsAudioStreamPlayer2D) GetStreamPaused() bool {
	return self.Runtime.AudioStreamPlayer2D_get_stream_paused(AudioStreamPlayer2D{self})
}
func (self methodsAudioStreamPlayer2D) SetMaxPolyphony(max_polyphony int64) {
	self.Runtime.AudioStreamPlayer2D_set_max_polyphony(AudioStreamPlayer2D{self}, max_polyphony)
}
func (self methodsAudioStreamPlayer2D) GetMaxPolyphony() int64 {
	return self.Runtime.AudioStreamPlayer2D_get_max_polyphony(AudioStreamPlayer2D{self})
}
func (self methodsAudioStreamPlayer2D) SetPanningStrength(panning_strength Float) {
	self.Runtime.AudioStreamPlayer2D_set_panning_strength(AudioStreamPlayer2D{self}, panning_strength)
}
func (self methodsAudioStreamPlayer2D) GetPanningStrength() Float {
	return self.Runtime.AudioStreamPlayer2D_get_panning_strength(AudioStreamPlayer2D{self})
}
func (self methodsAudioStreamPlayer2D) HasStreamPlayback() bool {
	return self.Runtime.AudioStreamPlayer2D_has_stream_playback(AudioStreamPlayer2D{self})
}
func (self methodsAudioStreamPlayer2D) GetStreamPlayback() AudioStreamPlayback {
	return self.Runtime.AudioStreamPlayer2D_get_stream_playback(AudioStreamPlayer2D{self})
}

type methodsAudioStreamPlayer3D struct {
	_ [0]*methodsAudioStreamPlayer3D
	class
}

func (self AudioStreamPlayer3D) Node3D() Node3D {
	var parent Node3D
	parent.class = self.class
	return parent
}
func (self methodsAudioStreamPlayer3D) SetStream(stream AudioStream) {
	self.Runtime.AudioStreamPlayer3D_set_stream(AudioStreamPlayer3D{self}, stream)
}
func (self methodsAudioStreamPlayer3D) GetStream() AudioStream {
	return self.Runtime.AudioStreamPlayer3D_get_stream(AudioStreamPlayer3D{self})
}
func (self methodsAudioStreamPlayer3D) SetVolumeDb(volume_db Float) {
	self.Runtime.AudioStreamPlayer3D_set_volume_db(AudioStreamPlayer3D{self}, volume_db)
}
func (self methodsAudioStreamPlayer3D) GetVolumeDb() Float {
	return self.Runtime.AudioStreamPlayer3D_get_volume_db(AudioStreamPlayer3D{self})
}
func (self methodsAudioStreamPlayer3D) SetUnitSize(unit_size Float) {
	self.Runtime.AudioStreamPlayer3D_set_unit_size(AudioStreamPlayer3D{self}, unit_size)
}
func (self methodsAudioStreamPlayer3D) GetUnitSize() Float {
	return self.Runtime.AudioStreamPlayer3D_get_unit_size(AudioStreamPlayer3D{self})
}
func (self methodsAudioStreamPlayer3D) SetMaxDb(max_db Float) {
	self.Runtime.AudioStreamPlayer3D_set_max_db(AudioStreamPlayer3D{self}, max_db)
}
func (self methodsAudioStreamPlayer3D) GetMaxDb() Float {
	return self.Runtime.AudioStreamPlayer3D_get_max_db(AudioStreamPlayer3D{self})
}
func (self methodsAudioStreamPlayer3D) SetPitchScale(pitch_scale Float) {
	self.Runtime.AudioStreamPlayer3D_set_pitch_scale(AudioStreamPlayer3D{self}, pitch_scale)
}
func (self methodsAudioStreamPlayer3D) GetPitchScale() Float {
	return self.Runtime.AudioStreamPlayer3D_get_pitch_scale(AudioStreamPlayer3D{self})
}
func (self methodsAudioStreamPlayer3D) Play(from_position Float) {
	self.Runtime.AudioStreamPlayer3D_play(AudioStreamPlayer3D{self}, from_position)
}
func (self methodsAudioStreamPlayer3D) SeekTo(to_position Float) {
	self.Runtime.AudioStreamPlayer3D_seek(AudioStreamPlayer3D{self}, to_position)
}
func (self methodsAudioStreamPlayer3D) Stop() {
	self.Runtime.AudioStreamPlayer3D_stop(AudioStreamPlayer3D{self})
}
func (self methodsAudioStreamPlayer3D) IsPlaying() bool {
	return self.Runtime.AudioStreamPlayer3D_is_playing(AudioStreamPlayer3D{self})
}
func (self methodsAudioStreamPlayer3D) GetPlaybackPosition() Float {
	return self.Runtime.AudioStreamPlayer3D_get_playback_position(AudioStreamPlayer3D{self})
}
func (self methodsAudioStreamPlayer3D) SetBus(bus string) {
	self.Runtime.AudioStreamPlayer3D_set_bus(AudioStreamPlayer3D{self}, bus)
}
func (self methodsAudioStreamPlayer3D) GetBus() string {
	return self.Runtime.AudioStreamPlayer3D_get_bus(AudioStreamPlayer3D{self})
}
func (self methodsAudioStreamPlayer3D) SetAutoplay(enable bool) {
	self.Runtime.AudioStreamPlayer3D_set_autoplay(AudioStreamPlayer3D{self}, enable)
}
func (self methodsAudioStreamPlayer3D) IsAutoplayEnabled() bool {
	return self.Runtime.AudioStreamPlayer3D_is_autoplay_enabled(AudioStreamPlayer3D{self})
}
func (self methodsAudioStreamPlayer3D) SetMaxDistance(meters Float) {
	self.Runtime.AudioStreamPlayer3D_set_max_distance(AudioStreamPlayer3D{self}, meters)
}
func (self methodsAudioStreamPlayer3D) GetMaxDistance() Float {
	return self.Runtime.AudioStreamPlayer3D_get_max_distance(AudioStreamPlayer3D{self})
}
func (self methodsAudioStreamPlayer3D) SetAreaMask(mask int64) {
	self.Runtime.AudioStreamPlayer3D_set_area_mask(AudioStreamPlayer3D{self}, mask)
}
func (self methodsAudioStreamPlayer3D) GetAreaMask() int64 {
	return self.Runtime.AudioStreamPlayer3D_get_area_mask(AudioStreamPlayer3D{self})
}
func (self methodsAudioStreamPlayer3D) SetEmissionAngle(degrees Float) {
	self.Runtime.AudioStreamPlayer3D_set_emission_angle(AudioStreamPlayer3D{self}, degrees)
}
func (self methodsAudioStreamPlayer3D) GetEmissionAngle() Float {
	return self.Runtime.AudioStreamPlayer3D_get_emission_angle(AudioStreamPlayer3D{self})
}
func (self methodsAudioStreamPlayer3D) SetEmissionAngleEnabled(enabled bool) {
	self.Runtime.AudioStreamPlayer3D_set_emission_angle_enabled(AudioStreamPlayer3D{self}, enabled)
}
func (self methodsAudioStreamPlayer3D) IsEmissionAngleEnabled() bool {
	return self.Runtime.AudioStreamPlayer3D_is_emission_angle_enabled(AudioStreamPlayer3D{self})
}
func (self methodsAudioStreamPlayer3D) SetEmissionAngleFilterAttenuationDb(db Float) {
	self.Runtime.AudioStreamPlayer3D_set_emission_angle_filter_attenuation_db(AudioStreamPlayer3D{self}, db)
}
func (self methodsAudioStreamPlayer3D) GetEmissionAngleFilterAttenuationDb() Float {
	return self.Runtime.AudioStreamPlayer3D_get_emission_angle_filter_attenuation_db(AudioStreamPlayer3D{self})
}
func (self methodsAudioStreamPlayer3D) SetAttenuationFilterCutoffHz(degrees Float) {
	self.Runtime.AudioStreamPlayer3D_set_attenuation_filter_cutoff_hz(AudioStreamPlayer3D{self}, degrees)
}
func (self methodsAudioStreamPlayer3D) GetAttenuationFilterCutoffHz() Float {
	return self.Runtime.AudioStreamPlayer3D_get_attenuation_filter_cutoff_hz(AudioStreamPlayer3D{self})
}
func (self methodsAudioStreamPlayer3D) SetAttenuationFilterDb(db Float) {
	self.Runtime.AudioStreamPlayer3D_set_attenuation_filter_db(AudioStreamPlayer3D{self}, db)
}
func (self methodsAudioStreamPlayer3D) GetAttenuationFilterDb() Float {
	return self.Runtime.AudioStreamPlayer3D_get_attenuation_filter_db(AudioStreamPlayer3D{self})
}
func (self methodsAudioStreamPlayer3D) SetAttenuationModel(model AudioStreamPlayer3DAttenuationModel) {
	self.Runtime.AudioStreamPlayer3D_set_attenuation_model(AudioStreamPlayer3D{self}, model)
}
func (self methodsAudioStreamPlayer3D) GetAttenuationModel() AudioStreamPlayer3DAttenuationModel {
	return self.Runtime.AudioStreamPlayer3D_get_attenuation_model(AudioStreamPlayer3D{self})
}
func (self methodsAudioStreamPlayer3D) SetDopplerTracking(mode AudioStreamPlayer3DDopplerTracking) {
	self.Runtime.AudioStreamPlayer3D_set_doppler_tracking(AudioStreamPlayer3D{self}, mode)
}
func (self methodsAudioStreamPlayer3D) GetDopplerTracking() AudioStreamPlayer3DDopplerTracking {
	return self.Runtime.AudioStreamPlayer3D_get_doppler_tracking(AudioStreamPlayer3D{self})
}
func (self methodsAudioStreamPlayer3D) SetStreamPaused(pause bool) {
	self.Runtime.AudioStreamPlayer3D_set_stream_paused(AudioStreamPlayer3D{self}, pause)
}
func (self methodsAudioStreamPlayer3D) GetStreamPaused() bool {
	return self.Runtime.AudioStreamPlayer3D_get_stream_paused(AudioStreamPlayer3D{self})
}
func (self methodsAudioStreamPlayer3D) SetMaxPolyphony(max_polyphony int64) {
	self.Runtime.AudioStreamPlayer3D_set_max_polyphony(AudioStreamPlayer3D{self}, max_polyphony)
}
func (self methodsAudioStreamPlayer3D) GetMaxPolyphony() int64 {
	return self.Runtime.AudioStreamPlayer3D_get_max_polyphony(AudioStreamPlayer3D{self})
}
func (self methodsAudioStreamPlayer3D) SetPanningStrength(panning_strength Float) {
	self.Runtime.AudioStreamPlayer3D_set_panning_strength(AudioStreamPlayer3D{self}, panning_strength)
}
func (self methodsAudioStreamPlayer3D) GetPanningStrength() Float {
	return self.Runtime.AudioStreamPlayer3D_get_panning_strength(AudioStreamPlayer3D{self})
}
func (self methodsAudioStreamPlayer3D) HasStreamPlayback() bool {
	return self.Runtime.AudioStreamPlayer3D_has_stream_playback(AudioStreamPlayer3D{self})
}
func (self methodsAudioStreamPlayer3D) GetStreamPlayback() AudioStreamPlayback {
	return self.Runtime.AudioStreamPlayer3D_get_stream_playback(AudioStreamPlayer3D{self})
}

type methodsAudioStreamPolyphonic struct {
	_ [0]*methodsAudioStreamPolyphonic
	class
}

func (self AudioStreamPolyphonic) AudioStream() AudioStream {
	var parent AudioStream
	parent.class = self.class
	return parent
}
func (self methodsAudioStreamPolyphonic) SetPolyphony(voices int64) {
	self.Runtime.AudioStreamPolyphonic_set_polyphony(AudioStreamPolyphonic{self}, voices)
}
func (self methodsAudioStreamPolyphonic) GetPolyphony() int64 {
	return self.Runtime.AudioStreamPolyphonic_get_polyphony(AudioStreamPolyphonic{self})
}

type methodsAudioStreamRandomizer struct {
	_ [0]*methodsAudioStreamRandomizer
	class
}

func (self AudioStreamRandomizer) AudioStream() AudioStream {
	var parent AudioStream
	parent.class = self.class
	return parent
}
func (self methodsAudioStreamRandomizer) AddStream(index int64, stream AudioStream, weight Float) {
	self.Runtime.AudioStreamRandomizer_add_stream(AudioStreamRandomizer{self}, index, stream, weight)
}
func (self methodsAudioStreamRandomizer) MoveStream(index_from int64, index_to int64) {
	self.Runtime.AudioStreamRandomizer_move_stream(AudioStreamRandomizer{self}, index_from, index_to)
}
func (self methodsAudioStreamRandomizer) RemoveStream(index int64) {
	self.Runtime.AudioStreamRandomizer_remove_stream(AudioStreamRandomizer{self}, index)
}
func (self methodsAudioStreamRandomizer) SetStream(index int64, stream AudioStream) {
	self.Runtime.AudioStreamRandomizer_set_stream(AudioStreamRandomizer{self}, index, stream)
}
func (self methodsAudioStreamRandomizer) GetStream(index int64) AudioStream {
	return self.Runtime.AudioStreamRandomizer_get_stream(AudioStreamRandomizer{self}, index)
}
func (self methodsAudioStreamRandomizer) SetStreamProbabilityWeight(index int64, weight Float) {
	self.Runtime.AudioStreamRandomizer_set_stream_probability_weight(AudioStreamRandomizer{self}, index, weight)
}
func (self methodsAudioStreamRandomizer) GetStreamProbabilityWeight(index int64) Float {
	return self.Runtime.AudioStreamRandomizer_get_stream_probability_weight(AudioStreamRandomizer{self}, index)
}
func (self methodsAudioStreamRandomizer) SetStreamsCount(count int64) {
	self.Runtime.AudioStreamRandomizer_set_streams_count(AudioStreamRandomizer{self}, count)
}
func (self methodsAudioStreamRandomizer) GetStreamsCount() int64 {
	return self.Runtime.AudioStreamRandomizer_get_streams_count(AudioStreamRandomizer{self})
}
func (self methodsAudioStreamRandomizer) SetRandomPitch(scale Float) {
	self.Runtime.AudioStreamRandomizer_set_random_pitch(AudioStreamRandomizer{self}, scale)
}
func (self methodsAudioStreamRandomizer) GetRandomPitch() Float {
	return self.Runtime.AudioStreamRandomizer_get_random_pitch(AudioStreamRandomizer{self})
}
func (self methodsAudioStreamRandomizer) SetRandomVolumeOffsetDb(db_offset Float) {
	self.Runtime.AudioStreamRandomizer_set_random_volume_offset_db(AudioStreamRandomizer{self}, db_offset)
}
func (self methodsAudioStreamRandomizer) GetRandomVolumeOffsetDb() Float {
	return self.Runtime.AudioStreamRandomizer_get_random_volume_offset_db(AudioStreamRandomizer{self})
}
func (self methodsAudioStreamRandomizer) SetPlaybackMode(mode AudioStreamRandomizerPlaybackMode) {
	self.Runtime.AudioStreamRandomizer_set_playback_mode(AudioStreamRandomizer{self}, mode)
}
func (self methodsAudioStreamRandomizer) GetPlaybackMode() AudioStreamRandomizerPlaybackMode {
	return self.Runtime.AudioStreamRandomizer_get_playback_mode(AudioStreamRandomizer{self})
}

type methodsAudioStreamWAV struct {
	_ [0]*methodsAudioStreamWAV
	class
}

func (self AudioStreamWAV) AudioStream() AudioStream {
	var parent AudioStream
	parent.class = self.class
	return parent
}
func (self methodsAudioStreamWAV) SetData(data PackedByteArray) {
	self.Runtime.AudioStreamWAV_set_data(AudioStreamWAV{self}, data)
}
func (self methodsAudioStreamWAV) GetData() PackedByteArray {
	return self.Runtime.AudioStreamWAV_get_data(AudioStreamWAV{self})
}
func (self methodsAudioStreamWAV) SetFormat(format AudioStreamWAVFormat) {
	self.Runtime.AudioStreamWAV_set_format(AudioStreamWAV{self}, format)
}
func (self methodsAudioStreamWAV) GetFormat() AudioStreamWAVFormat {
	return self.Runtime.AudioStreamWAV_get_format(AudioStreamWAV{self})
}
func (self methodsAudioStreamWAV) SetLoopMode(loop_mode AudioStreamWAVLoopMode) {
	self.Runtime.AudioStreamWAV_set_loop_mode(AudioStreamWAV{self}, loop_mode)
}
func (self methodsAudioStreamWAV) GetLoopMode() AudioStreamWAVLoopMode {
	return self.Runtime.AudioStreamWAV_get_loop_mode(AudioStreamWAV{self})
}
func (self methodsAudioStreamWAV) SetLoopBegin(loop_begin int64) {
	self.Runtime.AudioStreamWAV_set_loop_begin(AudioStreamWAV{self}, loop_begin)
}
func (self methodsAudioStreamWAV) GetLoopBegin() int64 {
	return self.Runtime.AudioStreamWAV_get_loop_begin(AudioStreamWAV{self})
}
func (self methodsAudioStreamWAV) SetLoopEnd(loop_end int64) {
	self.Runtime.AudioStreamWAV_set_loop_end(AudioStreamWAV{self}, loop_end)
}
func (self methodsAudioStreamWAV) GetLoopEnd() int64 {
	return self.Runtime.AudioStreamWAV_get_loop_end(AudioStreamWAV{self})
}
func (self methodsAudioStreamWAV) SetMixRate(mix_rate int64) {
	self.Runtime.AudioStreamWAV_set_mix_rate(AudioStreamWAV{self}, mix_rate)
}
func (self methodsAudioStreamWAV) GetMixRate() int64 {
	return self.Runtime.AudioStreamWAV_get_mix_rate(AudioStreamWAV{self})
}
func (self methodsAudioStreamWAV) SetStereo(stereo bool) {
	self.Runtime.AudioStreamWAV_set_stereo(AudioStreamWAV{self}, stereo)
}
func (self methodsAudioStreamWAV) IsStereo() bool {
	return self.Runtime.AudioStreamWAV_is_stereo(AudioStreamWAV{self})
}
func (self methodsAudioStreamWAV) SaveToWav(path string) int64 {
	return self.Runtime.AudioStreamWAV_save_to_wav(AudioStreamWAV{self}, path)
}

type methodsBackBufferCopy struct {
	_ [0]*methodsBackBufferCopy
	class
}

func (self BackBufferCopy) Node2D() Node2D {
	var parent Node2D
	parent.class = self.class
	return parent
}
func (self methodsBackBufferCopy) SetRect(rect Rect2) {
	self.Runtime.BackBufferCopy_set_rect(BackBufferCopy{self}, rect)
}
func (self methodsBackBufferCopy) GetRect() Rect2 {
	return self.Runtime.BackBufferCopy_get_rect(BackBufferCopy{self})
}
func (self methodsBackBufferCopy) SetCopyMode(copy_mode BackBufferCopyCopyMode) {
	self.Runtime.BackBufferCopy_set_copy_mode(BackBufferCopy{self}, copy_mode)
}
func (self methodsBackBufferCopy) GetCopyMode() BackBufferCopyCopyMode {
	return self.Runtime.BackBufferCopy_get_copy_mode(BackBufferCopy{self})
}

type methodsBaseButton struct {
	_ [0]*methodsBaseButton
	class
}

func (self BaseButton) Control() Control {
	var parent Control
	parent.class = self.class
	return parent
}
func (self methodsBaseButton) SetPressed(pressed bool) {
	self.Runtime.BaseButton_set_pressed(BaseButton{self}, pressed)
}
func (self methodsBaseButton) IsPressed() bool {
	return self.Runtime.BaseButton_is_pressed(BaseButton{self})
}
func (self methodsBaseButton) SetPressedNoSignal(pressed bool) {
	self.Runtime.BaseButton_set_pressed_no_signal(BaseButton{self}, pressed)
}
func (self methodsBaseButton) IsHovered() bool {
	return self.Runtime.BaseButton_is_hovered(BaseButton{self})
}
func (self methodsBaseButton) SetToggleMode(enabled bool) {
	self.Runtime.BaseButton_set_toggle_mode(BaseButton{self}, enabled)
}
func (self methodsBaseButton) IsToggleMode() bool {
	return self.Runtime.BaseButton_is_toggle_mode(BaseButton{self})
}
func (self methodsBaseButton) SetShortcutInTooltip(enabled bool) {
	self.Runtime.BaseButton_set_shortcut_in_tooltip(BaseButton{self}, enabled)
}
func (self methodsBaseButton) IsShortcutInTooltipEnabled() bool {
	return self.Runtime.BaseButton_is_shortcut_in_tooltip_enabled(BaseButton{self})
}
func (self methodsBaseButton) SetDisabled(disabled bool) {
	self.Runtime.BaseButton_set_disabled(BaseButton{self}, disabled)
}
func (self methodsBaseButton) IsDisabled() bool {
	return self.Runtime.BaseButton_is_disabled(BaseButton{self})
}
func (self methodsBaseButton) SetActionMode(mode BaseButtonActionMode) {
	self.Runtime.BaseButton_set_action_mode(BaseButton{self}, mode)
}
func (self methodsBaseButton) GetActionMode() BaseButtonActionMode {
	return self.Runtime.BaseButton_get_action_mode(BaseButton{self})
}
func (self methodsBaseButton) SetButtonMask(mask MouseButtonMask) {
	self.Runtime.BaseButton_set_button_mask(BaseButton{self}, mask)
}
func (self methodsBaseButton) GetButtonMask() MouseButtonMask {
	return self.Runtime.BaseButton_get_button_mask(BaseButton{self})
}
func (self methodsBaseButton) GetDrawMode() BaseButtonDrawMode {
	return self.Runtime.BaseButton_get_draw_mode(BaseButton{self})
}
func (self methodsBaseButton) SetKeepPressedOutside(enabled bool) {
	self.Runtime.BaseButton_set_keep_pressed_outside(BaseButton{self}, enabled)
}
func (self methodsBaseButton) IsKeepPressedOutside() bool {
	return self.Runtime.BaseButton_is_keep_pressed_outside(BaseButton{self})
}
func (self methodsBaseButton) SetShortcutFeedback(enabled bool) {
	self.Runtime.BaseButton_set_shortcut_feedback(BaseButton{self}, enabled)
}
func (self methodsBaseButton) IsShortcutFeedback() bool {
	return self.Runtime.BaseButton_is_shortcut_feedback(BaseButton{self})
}
func (self methodsBaseButton) SetShortcut(shortcut Shortcut) {
	self.Runtime.BaseButton_set_shortcut(BaseButton{self}, shortcut)
}
func (self methodsBaseButton) GetShortcut() Shortcut {
	return self.Runtime.BaseButton_get_shortcut(BaseButton{self})
}
func (self methodsBaseButton) SetButtonGroup(button_group ButtonGroup) {
	self.Runtime.BaseButton_set_button_group(BaseButton{self}, button_group)
}
func (self methodsBaseButton) GetButtonGroup() ButtonGroup {
	return self.Runtime.BaseButton_get_button_group(BaseButton{self})
}

type methodsBaseMaterial3D struct {
	_ [0]*methodsBaseMaterial3D
	class
}

func (self BaseMaterial3D) Material() Material {
	var parent Material
	parent.class = self.class
	return parent
}
func (self methodsBaseMaterial3D) SetAlbedo(albedo Color) {
	self.Runtime.BaseMaterial3D_set_albedo(BaseMaterial3D{self}, albedo)
}
func (self methodsBaseMaterial3D) GetAlbedo() Color {
	return self.Runtime.BaseMaterial3D_get_albedo(BaseMaterial3D{self})
}
func (self methodsBaseMaterial3D) SetTransparency(transparency BaseMaterial3DTransparency) {
	self.Runtime.BaseMaterial3D_set_transparency(BaseMaterial3D{self}, transparency)
}
func (self methodsBaseMaterial3D) GetTransparency() BaseMaterial3DTransparency {
	return self.Runtime.BaseMaterial3D_get_transparency(BaseMaterial3D{self})
}
func (self methodsBaseMaterial3D) SetAlphaAntialiasing(alpha_aa BaseMaterial3DAlphaAntiAliasing) {
	self.Runtime.BaseMaterial3D_set_alpha_antialiasing(BaseMaterial3D{self}, alpha_aa)
}
func (self methodsBaseMaterial3D) GetAlphaAntialiasing() BaseMaterial3DAlphaAntiAliasing {
	return self.Runtime.BaseMaterial3D_get_alpha_antialiasing(BaseMaterial3D{self})
}
func (self methodsBaseMaterial3D) SetAlphaAntialiasingEdge(edge Float) {
	self.Runtime.BaseMaterial3D_set_alpha_antialiasing_edge(BaseMaterial3D{self}, edge)
}
func (self methodsBaseMaterial3D) GetAlphaAntialiasingEdge() Float {
	return self.Runtime.BaseMaterial3D_get_alpha_antialiasing_edge(BaseMaterial3D{self})
}
func (self methodsBaseMaterial3D) SetShadingMode(shading_mode BaseMaterial3DShadingMode) {
	self.Runtime.BaseMaterial3D_set_shading_mode(BaseMaterial3D{self}, shading_mode)
}
func (self methodsBaseMaterial3D) GetShadingMode() BaseMaterial3DShadingMode {
	return self.Runtime.BaseMaterial3D_get_shading_mode(BaseMaterial3D{self})
}
func (self methodsBaseMaterial3D) SetSpecular(specular Float) {
	self.Runtime.BaseMaterial3D_set_specular(BaseMaterial3D{self}, specular)
}
func (self methodsBaseMaterial3D) GetSpecular() Float {
	return self.Runtime.BaseMaterial3D_get_specular(BaseMaterial3D{self})
}
func (self methodsBaseMaterial3D) SetMetallic(metallic Float) {
	self.Runtime.BaseMaterial3D_set_metallic(BaseMaterial3D{self}, metallic)
}
func (self methodsBaseMaterial3D) GetMetallic() Float {
	return self.Runtime.BaseMaterial3D_get_metallic(BaseMaterial3D{self})
}
func (self methodsBaseMaterial3D) SetRoughness(roughness Float) {
	self.Runtime.BaseMaterial3D_set_roughness(BaseMaterial3D{self}, roughness)
}
func (self methodsBaseMaterial3D) GetRoughness() Float {
	return self.Runtime.BaseMaterial3D_get_roughness(BaseMaterial3D{self})
}
func (self methodsBaseMaterial3D) SetEmission(emission Color) {
	self.Runtime.BaseMaterial3D_set_emission(BaseMaterial3D{self}, emission)
}
func (self methodsBaseMaterial3D) GetEmission() Color {
	return self.Runtime.BaseMaterial3D_get_emission(BaseMaterial3D{self})
}
func (self methodsBaseMaterial3D) SetEmissionEnergyMultiplier(emission_energy_multiplier Float) {
	self.Runtime.BaseMaterial3D_set_emission_energy_multiplier(BaseMaterial3D{self}, emission_energy_multiplier)
}
func (self methodsBaseMaterial3D) GetEmissionEnergyMultiplier() Float {
	return self.Runtime.BaseMaterial3D_get_emission_energy_multiplier(BaseMaterial3D{self})
}
func (self methodsBaseMaterial3D) SetEmissionIntensity(emission_energy_multiplier Float) {
	self.Runtime.BaseMaterial3D_set_emission_intensity(BaseMaterial3D{self}, emission_energy_multiplier)
}
func (self methodsBaseMaterial3D) GetEmissionIntensity() Float {
	return self.Runtime.BaseMaterial3D_get_emission_intensity(BaseMaterial3D{self})
}
func (self methodsBaseMaterial3D) SetNormalScale(normal_scale Float) {
	self.Runtime.BaseMaterial3D_set_normal_scale(BaseMaterial3D{self}, normal_scale)
}
func (self methodsBaseMaterial3D) GetNormalScale() Float {
	return self.Runtime.BaseMaterial3D_get_normal_scale(BaseMaterial3D{self})
}
func (self methodsBaseMaterial3D) SetRim(rim Float) {
	self.Runtime.BaseMaterial3D_set_rim(BaseMaterial3D{self}, rim)
}
func (self methodsBaseMaterial3D) GetRim() Float {
	return self.Runtime.BaseMaterial3D_get_rim(BaseMaterial3D{self})
}
func (self methodsBaseMaterial3D) SetRimTint(rim_tint Float) {
	self.Runtime.BaseMaterial3D_set_rim_tint(BaseMaterial3D{self}, rim_tint)
}
func (self methodsBaseMaterial3D) GetRimTint() Float {
	return self.Runtime.BaseMaterial3D_get_rim_tint(BaseMaterial3D{self})
}
func (self methodsBaseMaterial3D) SetClearcoat(clearcoat Float) {
	self.Runtime.BaseMaterial3D_set_clearcoat(BaseMaterial3D{self}, clearcoat)
}
func (self methodsBaseMaterial3D) GetClearcoat() Float {
	return self.Runtime.BaseMaterial3D_get_clearcoat(BaseMaterial3D{self})
}
func (self methodsBaseMaterial3D) SetClearcoatRoughness(clearcoat_roughness Float) {
	self.Runtime.BaseMaterial3D_set_clearcoat_roughness(BaseMaterial3D{self}, clearcoat_roughness)
}
func (self methodsBaseMaterial3D) GetClearcoatRoughness() Float {
	return self.Runtime.BaseMaterial3D_get_clearcoat_roughness(BaseMaterial3D{self})
}
func (self methodsBaseMaterial3D) SetAnisotropy(anisotropy Float) {
	self.Runtime.BaseMaterial3D_set_anisotropy(BaseMaterial3D{self}, anisotropy)
}
func (self methodsBaseMaterial3D) GetAnisotropy() Float {
	return self.Runtime.BaseMaterial3D_get_anisotropy(BaseMaterial3D{self})
}
func (self methodsBaseMaterial3D) SetHeightmapScale(heightmap_scale Float) {
	self.Runtime.BaseMaterial3D_set_heightmap_scale(BaseMaterial3D{self}, heightmap_scale)
}
func (self methodsBaseMaterial3D) GetHeightmapScale() Float {
	return self.Runtime.BaseMaterial3D_get_heightmap_scale(BaseMaterial3D{self})
}
func (self methodsBaseMaterial3D) SetSubsurfaceScatteringStrength(strength Float) {
	self.Runtime.BaseMaterial3D_set_subsurface_scattering_strength(BaseMaterial3D{self}, strength)
}
func (self methodsBaseMaterial3D) GetSubsurfaceScatteringStrength() Float {
	return self.Runtime.BaseMaterial3D_get_subsurface_scattering_strength(BaseMaterial3D{self})
}
func (self methodsBaseMaterial3D) SetTransmittanceColor(color Color) {
	self.Runtime.BaseMaterial3D_set_transmittance_color(BaseMaterial3D{self}, color)
}
func (self methodsBaseMaterial3D) GetTransmittanceColor() Color {
	return self.Runtime.BaseMaterial3D_get_transmittance_color(BaseMaterial3D{self})
}
func (self methodsBaseMaterial3D) SetTransmittanceDepth(depth Float) {
	self.Runtime.BaseMaterial3D_set_transmittance_depth(BaseMaterial3D{self}, depth)
}
func (self methodsBaseMaterial3D) GetTransmittanceDepth() Float {
	return self.Runtime.BaseMaterial3D_get_transmittance_depth(BaseMaterial3D{self})
}
func (self methodsBaseMaterial3D) SetTransmittanceBoost(boost Float) {
	self.Runtime.BaseMaterial3D_set_transmittance_boost(BaseMaterial3D{self}, boost)
}
func (self methodsBaseMaterial3D) GetTransmittanceBoost() Float {
	return self.Runtime.BaseMaterial3D_get_transmittance_boost(BaseMaterial3D{self})
}
func (self methodsBaseMaterial3D) SetBacklight(backlight Color) {
	self.Runtime.BaseMaterial3D_set_backlight(BaseMaterial3D{self}, backlight)
}
func (self methodsBaseMaterial3D) GetBacklight() Color {
	return self.Runtime.BaseMaterial3D_get_backlight(BaseMaterial3D{self})
}
func (self methodsBaseMaterial3D) SetRefraction(refraction Float) {
	self.Runtime.BaseMaterial3D_set_refraction(BaseMaterial3D{self}, refraction)
}
func (self methodsBaseMaterial3D) GetRefraction() Float {
	return self.Runtime.BaseMaterial3D_get_refraction(BaseMaterial3D{self})
}
func (self methodsBaseMaterial3D) SetPointSize(point_size Float) {
	self.Runtime.BaseMaterial3D_set_point_size(BaseMaterial3D{self}, point_size)
}
func (self methodsBaseMaterial3D) GetPointSize() Float {
	return self.Runtime.BaseMaterial3D_get_point_size(BaseMaterial3D{self})
}
func (self methodsBaseMaterial3D) SetDetailUv(detail_uv BaseMaterial3DDetailUV) {
	self.Runtime.BaseMaterial3D_set_detail_uv(BaseMaterial3D{self}, detail_uv)
}
func (self methodsBaseMaterial3D) GetDetailUv() BaseMaterial3DDetailUV {
	return self.Runtime.BaseMaterial3D_get_detail_uv(BaseMaterial3D{self})
}
func (self methodsBaseMaterial3D) SetBlendMode(blend_mode BaseMaterial3DBlendMode) {
	self.Runtime.BaseMaterial3D_set_blend_mode(BaseMaterial3D{self}, blend_mode)
}
func (self methodsBaseMaterial3D) GetBlendMode() BaseMaterial3DBlendMode {
	return self.Runtime.BaseMaterial3D_get_blend_mode(BaseMaterial3D{self})
}
func (self methodsBaseMaterial3D) SetDepthDrawMode(depth_draw_mode BaseMaterial3DDepthDrawMode) {
	self.Runtime.BaseMaterial3D_set_depth_draw_mode(BaseMaterial3D{self}, depth_draw_mode)
}
func (self methodsBaseMaterial3D) GetDepthDrawMode() BaseMaterial3DDepthDrawMode {
	return self.Runtime.BaseMaterial3D_get_depth_draw_mode(BaseMaterial3D{self})
}
func (self methodsBaseMaterial3D) SetCullMode(cull_mode BaseMaterial3DCullMode) {
	self.Runtime.BaseMaterial3D_set_cull_mode(BaseMaterial3D{self}, cull_mode)
}
func (self methodsBaseMaterial3D) GetCullMode() BaseMaterial3DCullMode {
	return self.Runtime.BaseMaterial3D_get_cull_mode(BaseMaterial3D{self})
}
func (self methodsBaseMaterial3D) SetDiffuseMode(diffuse_mode BaseMaterial3DDiffuseMode) {
	self.Runtime.BaseMaterial3D_set_diffuse_mode(BaseMaterial3D{self}, diffuse_mode)
}
func (self methodsBaseMaterial3D) GetDiffuseMode() BaseMaterial3DDiffuseMode {
	return self.Runtime.BaseMaterial3D_get_diffuse_mode(BaseMaterial3D{self})
}
func (self methodsBaseMaterial3D) SetSpecularMode(specular_mode BaseMaterial3DSpecularMode) {
	self.Runtime.BaseMaterial3D_set_specular_mode(BaseMaterial3D{self}, specular_mode)
}
func (self methodsBaseMaterial3D) GetSpecularMode() BaseMaterial3DSpecularMode {
	return self.Runtime.BaseMaterial3D_get_specular_mode(BaseMaterial3D{self})
}
func (self methodsBaseMaterial3D) SetFlag(flag BaseMaterial3DFlags, enable bool) {
	self.Runtime.BaseMaterial3D_set_flag(BaseMaterial3D{self}, flag, enable)
}
func (self methodsBaseMaterial3D) GetFlag(flag BaseMaterial3DFlags) bool {
	return self.Runtime.BaseMaterial3D_get_flag(BaseMaterial3D{self}, flag)
}
func (self methodsBaseMaterial3D) SetTextureFilter(mode BaseMaterial3DTextureFilter) {
	self.Runtime.BaseMaterial3D_set_texture_filter(BaseMaterial3D{self}, mode)
}
func (self methodsBaseMaterial3D) GetTextureFilter() BaseMaterial3DTextureFilter {
	return self.Runtime.BaseMaterial3D_get_texture_filter(BaseMaterial3D{self})
}
func (self methodsBaseMaterial3D) SetFeature(feature BaseMaterial3DFeature, enable bool) {
	self.Runtime.BaseMaterial3D_set_feature(BaseMaterial3D{self}, feature, enable)
}
func (self methodsBaseMaterial3D) GetFeature(feature BaseMaterial3DFeature) bool {
	return self.Runtime.BaseMaterial3D_get_feature(BaseMaterial3D{self}, feature)
}
func (self methodsBaseMaterial3D) SetTexture(param BaseMaterial3DTextureParam, texture Texture2D) {
	self.Runtime.BaseMaterial3D_set_texture(BaseMaterial3D{self}, param, texture)
}
func (self methodsBaseMaterial3D) GetTexture(param BaseMaterial3DTextureParam) Texture2D {
	return self.Runtime.BaseMaterial3D_get_texture(BaseMaterial3D{self}, param)
}
func (self methodsBaseMaterial3D) SetDetailBlendMode(detail_blend_mode BaseMaterial3DBlendMode) {
	self.Runtime.BaseMaterial3D_set_detail_blend_mode(BaseMaterial3D{self}, detail_blend_mode)
}
func (self methodsBaseMaterial3D) GetDetailBlendMode() BaseMaterial3DBlendMode {
	return self.Runtime.BaseMaterial3D_get_detail_blend_mode(BaseMaterial3D{self})
}
func (self methodsBaseMaterial3D) SetUv1Scale(scale Vector3) {
	self.Runtime.BaseMaterial3D_set_uv1_scale(BaseMaterial3D{self}, scale)
}
func (self methodsBaseMaterial3D) GetUv1Scale() Vector3 {
	return self.Runtime.BaseMaterial3D_get_uv1_scale(BaseMaterial3D{self})
}
func (self methodsBaseMaterial3D) SetUv1Offset(offset Vector3) {
	self.Runtime.BaseMaterial3D_set_uv1_offset(BaseMaterial3D{self}, offset)
}
func (self methodsBaseMaterial3D) GetUv1Offset() Vector3 {
	return self.Runtime.BaseMaterial3D_get_uv1_offset(BaseMaterial3D{self})
}
func (self methodsBaseMaterial3D) SetUv1TriplanarBlendSharpness(sharpness Float) {
	self.Runtime.BaseMaterial3D_set_uv1_triplanar_blend_sharpness(BaseMaterial3D{self}, sharpness)
}
func (self methodsBaseMaterial3D) GetUv1TriplanarBlendSharpness() Float {
	return self.Runtime.BaseMaterial3D_get_uv1_triplanar_blend_sharpness(BaseMaterial3D{self})
}
func (self methodsBaseMaterial3D) SetUv2Scale(scale Vector3) {
	self.Runtime.BaseMaterial3D_set_uv2_scale(BaseMaterial3D{self}, scale)
}
func (self methodsBaseMaterial3D) GetUv2Scale() Vector3 {
	return self.Runtime.BaseMaterial3D_get_uv2_scale(BaseMaterial3D{self})
}
func (self methodsBaseMaterial3D) SetUv2Offset(offset Vector3) {
	self.Runtime.BaseMaterial3D_set_uv2_offset(BaseMaterial3D{self}, offset)
}
func (self methodsBaseMaterial3D) GetUv2Offset() Vector3 {
	return self.Runtime.BaseMaterial3D_get_uv2_offset(BaseMaterial3D{self})
}
func (self methodsBaseMaterial3D) SetUv2TriplanarBlendSharpness(sharpness Float) {
	self.Runtime.BaseMaterial3D_set_uv2_triplanar_blend_sharpness(BaseMaterial3D{self}, sharpness)
}
func (self methodsBaseMaterial3D) GetUv2TriplanarBlendSharpness() Float {
	return self.Runtime.BaseMaterial3D_get_uv2_triplanar_blend_sharpness(BaseMaterial3D{self})
}
func (self methodsBaseMaterial3D) SetBillboardMode(mode BaseMaterial3DBillboardMode) {
	self.Runtime.BaseMaterial3D_set_billboard_mode(BaseMaterial3D{self}, mode)
}
func (self methodsBaseMaterial3D) GetBillboardMode() BaseMaterial3DBillboardMode {
	return self.Runtime.BaseMaterial3D_get_billboard_mode(BaseMaterial3D{self})
}
func (self methodsBaseMaterial3D) SetParticlesAnimHFrames(frames int64) {
	self.Runtime.BaseMaterial3D_set_particles_anim_h_frames(BaseMaterial3D{self}, frames)
}
func (self methodsBaseMaterial3D) GetParticlesAnimHFrames() int64 {
	return self.Runtime.BaseMaterial3D_get_particles_anim_h_frames(BaseMaterial3D{self})
}
func (self methodsBaseMaterial3D) SetParticlesAnimVFrames(frames int64) {
	self.Runtime.BaseMaterial3D_set_particles_anim_v_frames(BaseMaterial3D{self}, frames)
}
func (self methodsBaseMaterial3D) GetParticlesAnimVFrames() int64 {
	return self.Runtime.BaseMaterial3D_get_particles_anim_v_frames(BaseMaterial3D{self})
}
func (self methodsBaseMaterial3D) SetParticlesAnimLoop(loop bool) {
	self.Runtime.BaseMaterial3D_set_particles_anim_loop(BaseMaterial3D{self}, loop)
}
func (self methodsBaseMaterial3D) GetParticlesAnimLoop() bool {
	return self.Runtime.BaseMaterial3D_get_particles_anim_loop(BaseMaterial3D{self})
}
func (self methodsBaseMaterial3D) SetHeightmapDeepParallax(enable bool) {
	self.Runtime.BaseMaterial3D_set_heightmap_deep_parallax(BaseMaterial3D{self}, enable)
}
func (self methodsBaseMaterial3D) IsHeightmapDeepParallaxEnabled() bool {
	return self.Runtime.BaseMaterial3D_is_heightmap_deep_parallax_enabled(BaseMaterial3D{self})
}
func (self methodsBaseMaterial3D) SetHeightmapDeepParallaxMinLayers(layer int64) {
	self.Runtime.BaseMaterial3D_set_heightmap_deep_parallax_min_layers(BaseMaterial3D{self}, layer)
}
func (self methodsBaseMaterial3D) GetHeightmapDeepParallaxMinLayers() int64 {
	return self.Runtime.BaseMaterial3D_get_heightmap_deep_parallax_min_layers(BaseMaterial3D{self})
}
func (self methodsBaseMaterial3D) SetHeightmapDeepParallaxMaxLayers(layer int64) {
	self.Runtime.BaseMaterial3D_set_heightmap_deep_parallax_max_layers(BaseMaterial3D{self}, layer)
}
func (self methodsBaseMaterial3D) GetHeightmapDeepParallaxMaxLayers() int64 {
	return self.Runtime.BaseMaterial3D_get_heightmap_deep_parallax_max_layers(BaseMaterial3D{self})
}
func (self methodsBaseMaterial3D) SetHeightmapDeepParallaxFlipTangent(flip bool) {
	self.Runtime.BaseMaterial3D_set_heightmap_deep_parallax_flip_tangent(BaseMaterial3D{self}, flip)
}
func (self methodsBaseMaterial3D) GetHeightmapDeepParallaxFlipTangent() bool {
	return self.Runtime.BaseMaterial3D_get_heightmap_deep_parallax_flip_tangent(BaseMaterial3D{self})
}
func (self methodsBaseMaterial3D) SetHeightmapDeepParallaxFlipBinormal(flip bool) {
	self.Runtime.BaseMaterial3D_set_heightmap_deep_parallax_flip_binormal(BaseMaterial3D{self}, flip)
}
func (self methodsBaseMaterial3D) GetHeightmapDeepParallaxFlipBinormal() bool {
	return self.Runtime.BaseMaterial3D_get_heightmap_deep_parallax_flip_binormal(BaseMaterial3D{self})
}
func (self methodsBaseMaterial3D) SetGrow(amount Float) {
	self.Runtime.BaseMaterial3D_set_grow(BaseMaterial3D{self}, amount)
}
func (self methodsBaseMaterial3D) GetGrow() Float {
	return self.Runtime.BaseMaterial3D_get_grow(BaseMaterial3D{self})
}
func (self methodsBaseMaterial3D) SetEmissionOperator(operator BaseMaterial3DEmissionOperator) {
	self.Runtime.BaseMaterial3D_set_emission_operator(BaseMaterial3D{self}, operator)
}
func (self methodsBaseMaterial3D) GetEmissionOperator() BaseMaterial3DEmissionOperator {
	return self.Runtime.BaseMaterial3D_get_emission_operator(BaseMaterial3D{self})
}
func (self methodsBaseMaterial3D) SetAoLightAffect(amount Float) {
	self.Runtime.BaseMaterial3D_set_ao_light_affect(BaseMaterial3D{self}, amount)
}
func (self methodsBaseMaterial3D) GetAoLightAffect() Float {
	return self.Runtime.BaseMaterial3D_get_ao_light_affect(BaseMaterial3D{self})
}
func (self methodsBaseMaterial3D) SetAlphaScissorThreshold(threshold Float) {
	self.Runtime.BaseMaterial3D_set_alpha_scissor_threshold(BaseMaterial3D{self}, threshold)
}
func (self methodsBaseMaterial3D) GetAlphaScissorThreshold() Float {
	return self.Runtime.BaseMaterial3D_get_alpha_scissor_threshold(BaseMaterial3D{self})
}
func (self methodsBaseMaterial3D) SetAlphaHashScale(threshold Float) {
	self.Runtime.BaseMaterial3D_set_alpha_hash_scale(BaseMaterial3D{self}, threshold)
}
func (self methodsBaseMaterial3D) GetAlphaHashScale() Float {
	return self.Runtime.BaseMaterial3D_get_alpha_hash_scale(BaseMaterial3D{self})
}
func (self methodsBaseMaterial3D) SetGrowEnabled(enable bool) {
	self.Runtime.BaseMaterial3D_set_grow_enabled(BaseMaterial3D{self}, enable)
}
func (self methodsBaseMaterial3D) IsGrowEnabled() bool {
	return self.Runtime.BaseMaterial3D_is_grow_enabled(BaseMaterial3D{self})
}
func (self methodsBaseMaterial3D) SetMetallicTextureChannel(channel BaseMaterial3DTextureChannel) {
	self.Runtime.BaseMaterial3D_set_metallic_texture_channel(BaseMaterial3D{self}, channel)
}
func (self methodsBaseMaterial3D) GetMetallicTextureChannel() BaseMaterial3DTextureChannel {
	return self.Runtime.BaseMaterial3D_get_metallic_texture_channel(BaseMaterial3D{self})
}
func (self methodsBaseMaterial3D) SetRoughnessTextureChannel(channel BaseMaterial3DTextureChannel) {
	self.Runtime.BaseMaterial3D_set_roughness_texture_channel(BaseMaterial3D{self}, channel)
}
func (self methodsBaseMaterial3D) GetRoughnessTextureChannel() BaseMaterial3DTextureChannel {
	return self.Runtime.BaseMaterial3D_get_roughness_texture_channel(BaseMaterial3D{self})
}
func (self methodsBaseMaterial3D) SetAoTextureChannel(channel BaseMaterial3DTextureChannel) {
	self.Runtime.BaseMaterial3D_set_ao_texture_channel(BaseMaterial3D{self}, channel)
}
func (self methodsBaseMaterial3D) GetAoTextureChannel() BaseMaterial3DTextureChannel {
	return self.Runtime.BaseMaterial3D_get_ao_texture_channel(BaseMaterial3D{self})
}
func (self methodsBaseMaterial3D) SetRefractionTextureChannel(channel BaseMaterial3DTextureChannel) {
	self.Runtime.BaseMaterial3D_set_refraction_texture_channel(BaseMaterial3D{self}, channel)
}
func (self methodsBaseMaterial3D) GetRefractionTextureChannel() BaseMaterial3DTextureChannel {
	return self.Runtime.BaseMaterial3D_get_refraction_texture_channel(BaseMaterial3D{self})
}
func (self methodsBaseMaterial3D) SetProximityFadeEnabled(enabled bool) {
	self.Runtime.BaseMaterial3D_set_proximity_fade_enabled(BaseMaterial3D{self}, enabled)
}
func (self methodsBaseMaterial3D) IsProximityFadeEnabled() bool {
	return self.Runtime.BaseMaterial3D_is_proximity_fade_enabled(BaseMaterial3D{self})
}
func (self methodsBaseMaterial3D) SetProximityFadeDistance(distance Float) {
	self.Runtime.BaseMaterial3D_set_proximity_fade_distance(BaseMaterial3D{self}, distance)
}
func (self methodsBaseMaterial3D) GetProximityFadeDistance() Float {
	return self.Runtime.BaseMaterial3D_get_proximity_fade_distance(BaseMaterial3D{self})
}
func (self methodsBaseMaterial3D) SetMsdfPixelRange(arange Float) {
	self.Runtime.BaseMaterial3D_set_msdf_pixel_range(BaseMaterial3D{self}, arange)
}
func (self methodsBaseMaterial3D) GetMsdfPixelRange() Float {
	return self.Runtime.BaseMaterial3D_get_msdf_pixel_range(BaseMaterial3D{self})
}
func (self methodsBaseMaterial3D) SetMsdfOutlineSize(size Float) {
	self.Runtime.BaseMaterial3D_set_msdf_outline_size(BaseMaterial3D{self}, size)
}
func (self methodsBaseMaterial3D) GetMsdfOutlineSize() Float {
	return self.Runtime.BaseMaterial3D_get_msdf_outline_size(BaseMaterial3D{self})
}
func (self methodsBaseMaterial3D) SetDistanceFade(mode BaseMaterial3DDistanceFadeMode) {
	self.Runtime.BaseMaterial3D_set_distance_fade(BaseMaterial3D{self}, mode)
}
func (self methodsBaseMaterial3D) GetDistanceFade() BaseMaterial3DDistanceFadeMode {
	return self.Runtime.BaseMaterial3D_get_distance_fade(BaseMaterial3D{self})
}
func (self methodsBaseMaterial3D) SetDistanceFadeMaxDistance(distance Float) {
	self.Runtime.BaseMaterial3D_set_distance_fade_max_distance(BaseMaterial3D{self}, distance)
}
func (self methodsBaseMaterial3D) GetDistanceFadeMaxDistance() Float {
	return self.Runtime.BaseMaterial3D_get_distance_fade_max_distance(BaseMaterial3D{self})
}
func (self methodsBaseMaterial3D) SetDistanceFadeMinDistance(distance Float) {
	self.Runtime.BaseMaterial3D_set_distance_fade_min_distance(BaseMaterial3D{self}, distance)
}
func (self methodsBaseMaterial3D) GetDistanceFadeMinDistance() Float {
	return self.Runtime.BaseMaterial3D_get_distance_fade_min_distance(BaseMaterial3D{self})
}

type methodsBitMap struct {
	_ [0]*methodsBitMap
	class
}

func (self BitMap) Resource() Resource { var parent Resource; parent.class = self.class; return parent }
func (self methodsBitMap) Create(size Vector2i) {
	self.Runtime.BitMap_create(BitMap{self}, size)
}
func (self methodsBitMap) CreateFromImageAlpha(image Image, threshold Float) {
	self.Runtime.BitMap_create_from_image_alpha(BitMap{self}, image, threshold)
}
func (self methodsBitMap) SetBitv(position Vector2i, bit bool) {
	self.Runtime.BitMap_set_bitv(BitMap{self}, position, bit)
}
func (self methodsBitMap) SetBit(x int64, y int64, bit bool) {
	self.Runtime.BitMap_set_bit(BitMap{self}, x, y, bit)
}
func (self methodsBitMap) GetBitv(position Vector2i) bool {
	return self.Runtime.BitMap_get_bitv(BitMap{self}, position)
}
func (self methodsBitMap) GetBit(x int64, y int64) bool {
	return self.Runtime.BitMap_get_bit(BitMap{self}, x, y)
}
func (self methodsBitMap) SetBitRect(rect Rect2i, bit bool) {
	self.Runtime.BitMap_set_bit_rect(BitMap{self}, rect, bit)
}
func (self methodsBitMap) GetTrueBitCount() int64 {
	return self.Runtime.BitMap_get_true_bit_count(BitMap{self})
}
func (self methodsBitMap) GetSize() Vector2i {
	return self.Runtime.BitMap_get_size(BitMap{self})
}
func (self methodsBitMap) Resize(new_size Vector2i) {
	self.Runtime.BitMap_resize(BitMap{self}, new_size)
}
func (self methodsBitMap) GrowMask(pixels int64, rect Rect2i) {
	self.Runtime.BitMap_grow_mask(BitMap{self}, pixels, rect)
}
func (self methodsBitMap) ConvertToImage() Image {
	return self.Runtime.BitMap_convert_to_image(BitMap{self})
}
func (self methodsBitMap) OpaqueToPolygons(rect Rect2i, epsilon Float) ArrayOf[PackedVector2Array] {
	return self.Runtime.BitMap_opaque_to_polygons(BitMap{self}, rect, epsilon)
}

type methodsBone2D struct {
	_ [0]*methodsBone2D
	class
}

func (self Bone2D) Node2D() Node2D { var parent Node2D; parent.class = self.class; return parent }
func (self methodsBone2D) SetRest(rest Transform2D) {
	self.Runtime.Bone2D_set_rest(Bone2D{self}, rest)
}
func (self methodsBone2D) GetRest() Transform2D {
	return self.Runtime.Bone2D_get_rest(Bone2D{self})
}
func (self methodsBone2D) ApplyRest() {
	self.Runtime.Bone2D_apply_rest(Bone2D{self})
}
func (self methodsBone2D) GetSkeletonRest() Transform2D {
	return self.Runtime.Bone2D_get_skeleton_rest(Bone2D{self})
}
func (self methodsBone2D) GetIndexInSkeleton() int64 {
	return self.Runtime.Bone2D_get_index_in_skeleton(Bone2D{self})
}
func (self methodsBone2D) SetAutocalculateLengthAndAngle(auto_calculate bool) {
	self.Runtime.Bone2D_set_autocalculate_length_and_angle(Bone2D{self}, auto_calculate)
}
func (self methodsBone2D) GetAutocalculateLengthAndAngle() bool {
	return self.Runtime.Bone2D_get_autocalculate_length_and_angle(Bone2D{self})
}
func (self methodsBone2D) SetLength(length Float) {
	self.Runtime.Bone2D_set_length(Bone2D{self}, length)
}
func (self methodsBone2D) GetLength() Float {
	return self.Runtime.Bone2D_get_length(Bone2D{self})
}
func (self methodsBone2D) SetBoneAngle(angle Float) {
	self.Runtime.Bone2D_set_bone_angle(Bone2D{self}, angle)
}
func (self methodsBone2D) GetBoneAngle() Float {
	return self.Runtime.Bone2D_get_bone_angle(Bone2D{self})
}

type methodsBoneAttachment3D struct {
	_ [0]*methodsBoneAttachment3D
	class
}

func (self BoneAttachment3D) Node3D() Node3D {
	var parent Node3D
	parent.class = self.class
	return parent
}
func (self methodsBoneAttachment3D) SetBoneName(bone_name string) {
	self.Runtime.BoneAttachment3D_set_bone_name(BoneAttachment3D{self}, bone_name)
}
func (self methodsBoneAttachment3D) GetBoneName() string {
	return self.Runtime.BoneAttachment3D_get_bone_name(BoneAttachment3D{self})
}
func (self methodsBoneAttachment3D) SetBoneIdx(bone_idx int64) {
	self.Runtime.BoneAttachment3D_set_bone_idx(BoneAttachment3D{self}, bone_idx)
}
func (self methodsBoneAttachment3D) GetBoneIdx() int64 {
	return self.Runtime.BoneAttachment3D_get_bone_idx(BoneAttachment3D{self})
}
func (self methodsBoneAttachment3D) OnBonePoseUpdate(bone_index int64) {
	self.Runtime.BoneAttachment3D_on_bone_pose_update(BoneAttachment3D{self}, bone_index)
}
func (self methodsBoneAttachment3D) SetOverridePose(override_pose bool) {
	self.Runtime.BoneAttachment3D_set_override_pose(BoneAttachment3D{self}, override_pose)
}
func (self methodsBoneAttachment3D) GetOverridePose() bool {
	return self.Runtime.BoneAttachment3D_get_override_pose(BoneAttachment3D{self})
}
func (self methodsBoneAttachment3D) SetUseExternalSkeleton(use_external_skeleton bool) {
	self.Runtime.BoneAttachment3D_set_use_external_skeleton(BoneAttachment3D{self}, use_external_skeleton)
}
func (self methodsBoneAttachment3D) GetUseExternalSkeleton() bool {
	return self.Runtime.BoneAttachment3D_get_use_external_skeleton(BoneAttachment3D{self})
}
func (self methodsBoneAttachment3D) SetExternalSkeleton(external_skeleton NodePath) {
	self.Runtime.BoneAttachment3D_set_external_skeleton(BoneAttachment3D{self}, external_skeleton)
}
func (self methodsBoneAttachment3D) GetExternalSkeleton() NodePath {
	return self.Runtime.BoneAttachment3D_get_external_skeleton(BoneAttachment3D{self})
}

type methodsBoneMap struct {
	_ [0]*methodsBoneMap
	class
}

func (self BoneMap) Resource() Resource {
	var parent Resource
	parent.class = self.class
	return parent
}
func (self methodsBoneMap) GetProfile() SkeletonProfile {
	return self.Runtime.BoneMap_get_profile(BoneMap{self})
}
func (self methodsBoneMap) SetProfile(profile SkeletonProfile) {
	self.Runtime.BoneMap_set_profile(BoneMap{self}, profile)
}
func (self methodsBoneMap) GetSkeletonBoneName(profile_bone_name string) string {
	return self.Runtime.BoneMap_get_skeleton_bone_name(BoneMap{self}, profile_bone_name)
}
func (self methodsBoneMap) SetSkeletonBoneName(profile_bone_name string, skeleton_bone_name string) {
	self.Runtime.BoneMap_set_skeleton_bone_name(BoneMap{self}, profile_bone_name, skeleton_bone_name)
}
func (self methodsBoneMap) FindProfileBoneName(skeleton_bone_name string) string {
	return self.Runtime.BoneMap_find_profile_bone_name(BoneMap{self}, skeleton_bone_name)
}

type methodsBoxContainer struct {
	_ [0]*methodsBoxContainer
	class
}

func (self BoxContainer) Container() Container {
	var parent Container
	parent.class = self.class
	return parent
}
func (self methodsBoxContainer) AddSpacer(begin bool) Control {
	return self.Runtime.BoxContainer_add_spacer(BoxContainer{self}, begin)
}
func (self methodsBoxContainer) SetAlignment(alignment BoxContainerAlignmentMode) {
	self.Runtime.BoxContainer_set_alignment(BoxContainer{self}, alignment)
}
func (self methodsBoxContainer) GetAlignment() BoxContainerAlignmentMode {
	return self.Runtime.BoxContainer_get_alignment(BoxContainer{self})
}
func (self methodsBoxContainer) SetVertical(vertical bool) {
	self.Runtime.BoxContainer_set_vertical(BoxContainer{self}, vertical)
}
func (self methodsBoxContainer) IsVertical() bool {
	return self.Runtime.BoxContainer_is_vertical(BoxContainer{self})
}

type methodsBoxMesh struct {
	_ [0]*methodsBoxMesh
	class
}

func (self BoxMesh) PrimitiveMesh() PrimitiveMesh {
	var parent PrimitiveMesh
	parent.class = self.class
	return parent
}
func (self methodsBoxMesh) SetSize(size Vector3) {
	self.Runtime.BoxMesh_set_size(BoxMesh{self}, size)
}
func (self methodsBoxMesh) GetSize() Vector3 {
	return self.Runtime.BoxMesh_get_size(BoxMesh{self})
}
func (self methodsBoxMesh) SetSubdivideWidth(subdivide int64) {
	self.Runtime.BoxMesh_set_subdivide_width(BoxMesh{self}, subdivide)
}
func (self methodsBoxMesh) GetSubdivideWidth() int64 {
	return self.Runtime.BoxMesh_get_subdivide_width(BoxMesh{self})
}
func (self methodsBoxMesh) SetSubdivideHeight(divisions int64) {
	self.Runtime.BoxMesh_set_subdivide_height(BoxMesh{self}, divisions)
}
func (self methodsBoxMesh) GetSubdivideHeight() int64 {
	return self.Runtime.BoxMesh_get_subdivide_height(BoxMesh{self})
}
func (self methodsBoxMesh) SetSubdivideDepth(divisions int64) {
	self.Runtime.BoxMesh_set_subdivide_depth(BoxMesh{self}, divisions)
}
func (self methodsBoxMesh) GetSubdivideDepth() int64 {
	return self.Runtime.BoxMesh_get_subdivide_depth(BoxMesh{self})
}

type methodsBoxOccluder3D struct {
	_ [0]*methodsBoxOccluder3D
	class
}

func (self BoxOccluder3D) Occluder3D() Occluder3D {
	var parent Occluder3D
	parent.class = self.class
	return parent
}
func (self methodsBoxOccluder3D) SetSize(size Vector3) {
	self.Runtime.BoxOccluder3D_set_size(BoxOccluder3D{self}, size)
}
func (self methodsBoxOccluder3D) GetSize() Vector3 {
	return self.Runtime.BoxOccluder3D_get_size(BoxOccluder3D{self})
}

type methodsBoxShape3D struct {
	_ [0]*methodsBoxShape3D
	class
}

func (self BoxShape3D) Shape3D() Shape3D {
	var parent Shape3D
	parent.class = self.class
	return parent
}
func (self methodsBoxShape3D) SetSize(size Vector3) {
	self.Runtime.BoxShape3D_set_size(BoxShape3D{self}, size)
}
func (self methodsBoxShape3D) GetSize() Vector3 {
	return self.Runtime.BoxShape3D_get_size(BoxShape3D{self})
}

type methodsButton struct {
	_ [0]*methodsButton
	class
}

func (self Button) BaseButton() BaseButton {
	var parent BaseButton
	parent.class = self.class
	return parent
}
func (self methodsButton) SetText(text string) {
	self.Runtime.Button_set_text(Button{self}, text)
}
func (self methodsButton) GetText() string {
	return self.Runtime.Button_get_text(Button{self})
}
func (self methodsButton) SetTextOverrunBehavior(overrun_behavior TextServerOverrunBehavior) {
	self.Runtime.Button_set_text_overrun_behavior(Button{self}, overrun_behavior)
}
func (self methodsButton) GetTextOverrunBehavior() TextServerOverrunBehavior {
	return self.Runtime.Button_get_text_overrun_behavior(Button{self})
}
func (self methodsButton) SetTextDirection(direction ControlTextDirection) {
	self.Runtime.Button_set_text_direction(Button{self}, direction)
}
func (self methodsButton) GetTextDirection() ControlTextDirection {
	return self.Runtime.Button_get_text_direction(Button{self})
}
func (self methodsButton) SetLanguage(language string) {
	self.Runtime.Button_set_language(Button{self}, language)
}
func (self methodsButton) GetLanguage() string {
	return self.Runtime.Button_get_language(Button{self})
}
func (self methodsButton) SetButtonIcon(texture Texture2D) {
	self.Runtime.Button_set_button_icon(Button{self}, texture)
}
func (self methodsButton) GetButtonIcon() Texture2D {
	return self.Runtime.Button_get_button_icon(Button{self})
}
func (self methodsButton) SetFlat(enabled bool) {
	self.Runtime.Button_set_flat(Button{self}, enabled)
}
func (self methodsButton) IsFlat() bool {
	return self.Runtime.Button_is_flat(Button{self})
}
func (self methodsButton) SetClipText(enabled bool) {
	self.Runtime.Button_set_clip_text(Button{self}, enabled)
}
func (self methodsButton) GetClipText() bool {
	return self.Runtime.Button_get_clip_text(Button{self})
}
func (self methodsButton) SetTextAlignment(alignment HorizontalAlignment) {
	self.Runtime.Button_set_text_alignment(Button{self}, alignment)
}
func (self methodsButton) GetTextAlignment() HorizontalAlignment {
	return self.Runtime.Button_get_text_alignment(Button{self})
}
func (self methodsButton) SetIconAlignment(icon_alignment HorizontalAlignment) {
	self.Runtime.Button_set_icon_alignment(Button{self}, icon_alignment)
}
func (self methodsButton) GetIconAlignment() HorizontalAlignment {
	return self.Runtime.Button_get_icon_alignment(Button{self})
}
func (self methodsButton) SetVerticalIconAlignment(vertical_icon_alignment VerticalAlignment) {
	self.Runtime.Button_set_vertical_icon_alignment(Button{self}, vertical_icon_alignment)
}
func (self methodsButton) GetVerticalIconAlignment() VerticalAlignment {
	return self.Runtime.Button_get_vertical_icon_alignment(Button{self})
}
func (self methodsButton) SetExpandIcon(enabled bool) {
	self.Runtime.Button_set_expand_icon(Button{self}, enabled)
}
func (self methodsButton) IsExpandIcon() bool {
	return self.Runtime.Button_is_expand_icon(Button{self})
}

type methodsButtonGroup struct {
	_ [0]*methodsButtonGroup
	class
}

func (self ButtonGroup) Resource() Resource {
	var parent Resource
	parent.class = self.class
	return parent
}
func (self methodsButtonGroup) GetPressedButton() BaseButton {
	return self.Runtime.ButtonGroup_get_pressed_button(ButtonGroup{self})
}
func (self methodsButtonGroup) GetButtons() ArrayOf[BaseButton] {
	return self.Runtime.ButtonGroup_get_buttons(ButtonGroup{self})
}
func (self methodsButtonGroup) SetAllowUnpress(enabled bool) {
	self.Runtime.ButtonGroup_set_allow_unpress(ButtonGroup{self}, enabled)
}
func (self methodsButtonGroup) IsAllowUnpress() bool {
	return self.Runtime.ButtonGroup_is_allow_unpress(ButtonGroup{self})
}

type methodsCPUParticles2D struct {
	_ [0]*methodsCPUParticles2D
	class
}

func (self CPUParticles2D) Node2D() Node2D {
	var parent Node2D
	parent.class = self.class
	return parent
}
func (self methodsCPUParticles2D) SetEmitting(emitting bool) {
	self.Runtime.CPUParticles2D_set_emitting(CPUParticles2D{self}, emitting)
}
func (self methodsCPUParticles2D) SetAmount(amount int64) {
	self.Runtime.CPUParticles2D_set_amount(CPUParticles2D{self}, amount)
}
func (self methodsCPUParticles2D) SetLifetime(secs Float) {
	self.Runtime.CPUParticles2D_set_lifetime(CPUParticles2D{self}, secs)
}
func (self methodsCPUParticles2D) SetOneShot(enable bool) {
	self.Runtime.CPUParticles2D_set_one_shot(CPUParticles2D{self}, enable)
}
func (self methodsCPUParticles2D) SetPreProcessTime(secs Float) {
	self.Runtime.CPUParticles2D_set_pre_process_time(CPUParticles2D{self}, secs)
}
func (self methodsCPUParticles2D) SetExplosivenessRatio(ratio Float) {
	self.Runtime.CPUParticles2D_set_explosiveness_ratio(CPUParticles2D{self}, ratio)
}
func (self methodsCPUParticles2D) SetRandomnessRatio(ratio Float) {
	self.Runtime.CPUParticles2D_set_randomness_ratio(CPUParticles2D{self}, ratio)
}
func (self methodsCPUParticles2D) SetLifetimeRandomness(random Float) {
	self.Runtime.CPUParticles2D_set_lifetime_randomness(CPUParticles2D{self}, random)
}
func (self methodsCPUParticles2D) SetUseLocalCoordinates(enable bool) {
	self.Runtime.CPUParticles2D_set_use_local_coordinates(CPUParticles2D{self}, enable)
}
func (self methodsCPUParticles2D) SetFixedFps(fps int64) {
	self.Runtime.CPUParticles2D_set_fixed_fps(CPUParticles2D{self}, fps)
}
func (self methodsCPUParticles2D) SetFractionalDelta(enable bool) {
	self.Runtime.CPUParticles2D_set_fractional_delta(CPUParticles2D{self}, enable)
}
func (self methodsCPUParticles2D) SetSpeedScale(scale Float) {
	self.Runtime.CPUParticles2D_set_speed_scale(CPUParticles2D{self}, scale)
}
func (self methodsCPUParticles2D) IsEmitting() bool {
	return self.Runtime.CPUParticles2D_is_emitting(CPUParticles2D{self})
}
func (self methodsCPUParticles2D) GetAmount() int64 {
	return self.Runtime.CPUParticles2D_get_amount(CPUParticles2D{self})
}
func (self methodsCPUParticles2D) GetLifetime() Float {
	return self.Runtime.CPUParticles2D_get_lifetime(CPUParticles2D{self})
}
func (self methodsCPUParticles2D) GetOneShot() bool {
	return self.Runtime.CPUParticles2D_get_one_shot(CPUParticles2D{self})
}
func (self methodsCPUParticles2D) GetPreProcessTime() Float {
	return self.Runtime.CPUParticles2D_get_pre_process_time(CPUParticles2D{self})
}
func (self methodsCPUParticles2D) GetExplosivenessRatio() Float {
	return self.Runtime.CPUParticles2D_get_explosiveness_ratio(CPUParticles2D{self})
}
func (self methodsCPUParticles2D) GetRandomnessRatio() Float {
	return self.Runtime.CPUParticles2D_get_randomness_ratio(CPUParticles2D{self})
}
func (self methodsCPUParticles2D) GetLifetimeRandomness() Float {
	return self.Runtime.CPUParticles2D_get_lifetime_randomness(CPUParticles2D{self})
}
func (self methodsCPUParticles2D) GetUseLocalCoordinates() bool {
	return self.Runtime.CPUParticles2D_get_use_local_coordinates(CPUParticles2D{self})
}
func (self methodsCPUParticles2D) GetFixedFps() int64 {
	return self.Runtime.CPUParticles2D_get_fixed_fps(CPUParticles2D{self})
}
func (self methodsCPUParticles2D) GetFractionalDelta() bool {
	return self.Runtime.CPUParticles2D_get_fractional_delta(CPUParticles2D{self})
}
func (self methodsCPUParticles2D) GetSpeedScale() Float {
	return self.Runtime.CPUParticles2D_get_speed_scale(CPUParticles2D{self})
}
func (self methodsCPUParticles2D) SetDrawOrder(order CPUParticles2DDrawOrder) {
	self.Runtime.CPUParticles2D_set_draw_order(CPUParticles2D{self}, order)
}
func (self methodsCPUParticles2D) GetDrawOrder() CPUParticles2DDrawOrder {
	return self.Runtime.CPUParticles2D_get_draw_order(CPUParticles2D{self})
}
func (self methodsCPUParticles2D) SetTexture(texture Texture2D) {
	self.Runtime.CPUParticles2D_set_texture(CPUParticles2D{self}, texture)
}
func (self methodsCPUParticles2D) GetTexture() Texture2D {
	return self.Runtime.CPUParticles2D_get_texture(CPUParticles2D{self})
}
func (self methodsCPUParticles2D) Restart() {
	self.Runtime.CPUParticles2D_restart(CPUParticles2D{self})
}
func (self methodsCPUParticles2D) SetDirection(direction Vector2) {
	self.Runtime.CPUParticles2D_set_direction(CPUParticles2D{self}, direction)
}
func (self methodsCPUParticles2D) GetDirection() Vector2 {
	return self.Runtime.CPUParticles2D_get_direction(CPUParticles2D{self})
}
func (self methodsCPUParticles2D) SetSpread(spread Float) {
	self.Runtime.CPUParticles2D_set_spread(CPUParticles2D{self}, spread)
}
func (self methodsCPUParticles2D) GetSpread() Float {
	return self.Runtime.CPUParticles2D_get_spread(CPUParticles2D{self})
}
func (self methodsCPUParticles2D) SetParamMin(param CPUParticles2DParameter, value Float) {
	self.Runtime.CPUParticles2D_set_param_min(CPUParticles2D{self}, param, value)
}
func (self methodsCPUParticles2D) GetParamMin(param CPUParticles2DParameter) Float {
	return self.Runtime.CPUParticles2D_get_param_min(CPUParticles2D{self}, param)
}
func (self methodsCPUParticles2D) SetParamMax(param CPUParticles2DParameter, value Float) {
	self.Runtime.CPUParticles2D_set_param_max(CPUParticles2D{self}, param, value)
}
func (self methodsCPUParticles2D) GetParamMax(param CPUParticles2DParameter) Float {
	return self.Runtime.CPUParticles2D_get_param_max(CPUParticles2D{self}, param)
}
func (self methodsCPUParticles2D) SetParamCurve(param CPUParticles2DParameter, curve Curve) {
	self.Runtime.CPUParticles2D_set_param_curve(CPUParticles2D{self}, param, curve)
}
func (self methodsCPUParticles2D) GetParamCurve(param CPUParticles2DParameter) Curve {
	return self.Runtime.CPUParticles2D_get_param_curve(CPUParticles2D{self}, param)
}
func (self methodsCPUParticles2D) SetColor(color Color) {
	self.Runtime.CPUParticles2D_set_color(CPUParticles2D{self}, color)
}
func (self methodsCPUParticles2D) GetColor() Color {
	return self.Runtime.CPUParticles2D_get_color(CPUParticles2D{self})
}
func (self methodsCPUParticles2D) SetColorRamp(ramp Gradient) {
	self.Runtime.CPUParticles2D_set_color_ramp(CPUParticles2D{self}, ramp)
}
func (self methodsCPUParticles2D) GetColorRamp() Gradient {
	return self.Runtime.CPUParticles2D_get_color_ramp(CPUParticles2D{self})
}
func (self methodsCPUParticles2D) SetColorInitialRamp(ramp Gradient) {
	self.Runtime.CPUParticles2D_set_color_initial_ramp(CPUParticles2D{self}, ramp)
}
func (self methodsCPUParticles2D) GetColorInitialRamp() Gradient {
	return self.Runtime.CPUParticles2D_get_color_initial_ramp(CPUParticles2D{self})
}
func (self methodsCPUParticles2D) SetParticleFlag(particle_flag CPUParticles2DParticleFlags, enable bool) {
	self.Runtime.CPUParticles2D_set_particle_flag(CPUParticles2D{self}, particle_flag, enable)
}
func (self methodsCPUParticles2D) GetParticleFlag(particle_flag CPUParticles2DParticleFlags) bool {
	return self.Runtime.CPUParticles2D_get_particle_flag(CPUParticles2D{self}, particle_flag)
}
func (self methodsCPUParticles2D) SetEmissionShape(shape CPUParticles2DEmissionShape) {
	self.Runtime.CPUParticles2D_set_emission_shape(CPUParticles2D{self}, shape)
}
func (self methodsCPUParticles2D) GetEmissionShape() CPUParticles2DEmissionShape {
	return self.Runtime.CPUParticles2D_get_emission_shape(CPUParticles2D{self})
}
func (self methodsCPUParticles2D) SetEmissionSphereRadius(radius Float) {
	self.Runtime.CPUParticles2D_set_emission_sphere_radius(CPUParticles2D{self}, radius)
}
func (self methodsCPUParticles2D) GetEmissionSphereRadius() Float {
	return self.Runtime.CPUParticles2D_get_emission_sphere_radius(CPUParticles2D{self})
}
func (self methodsCPUParticles2D) SetEmissionRectExtents(extents Vector2) {
	self.Runtime.CPUParticles2D_set_emission_rect_extents(CPUParticles2D{self}, extents)
}
func (self methodsCPUParticles2D) GetEmissionRectExtents() Vector2 {
	return self.Runtime.CPUParticles2D_get_emission_rect_extents(CPUParticles2D{self})
}
func (self methodsCPUParticles2D) SetEmissionPoints(array PackedVector2Array) {
	self.Runtime.CPUParticles2D_set_emission_points(CPUParticles2D{self}, array)
}
func (self methodsCPUParticles2D) GetEmissionPoints() PackedVector2Array {
	return self.Runtime.CPUParticles2D_get_emission_points(CPUParticles2D{self})
}
func (self methodsCPUParticles2D) SetEmissionNormals(array PackedVector2Array) {
	self.Runtime.CPUParticles2D_set_emission_normals(CPUParticles2D{self}, array)
}
func (self methodsCPUParticles2D) GetEmissionNormals() PackedVector2Array {
	return self.Runtime.CPUParticles2D_get_emission_normals(CPUParticles2D{self})
}
func (self methodsCPUParticles2D) SetEmissionColors(array PackedColorArray) {
	self.Runtime.CPUParticles2D_set_emission_colors(CPUParticles2D{self}, array)
}
func (self methodsCPUParticles2D) GetEmissionColors() PackedColorArray {
	return self.Runtime.CPUParticles2D_get_emission_colors(CPUParticles2D{self})
}
func (self methodsCPUParticles2D) GetGravity() Vector2 {
	return self.Runtime.CPUParticles2D_get_gravity(CPUParticles2D{self})
}
func (self methodsCPUParticles2D) SetGravity(accel_vec Vector2) {
	self.Runtime.CPUParticles2D_set_gravity(CPUParticles2D{self}, accel_vec)
}
func (self methodsCPUParticles2D) GetSplitScale() bool {
	return self.Runtime.CPUParticles2D_get_split_scale(CPUParticles2D{self})
}
func (self methodsCPUParticles2D) SetSplitScale(split_scale bool) {
	self.Runtime.CPUParticles2D_set_split_scale(CPUParticles2D{self}, split_scale)
}
func (self methodsCPUParticles2D) GetScaleCurveX() Curve {
	return self.Runtime.CPUParticles2D_get_scale_curve_x(CPUParticles2D{self})
}
func (self methodsCPUParticles2D) SetScaleCurveX(scale_curve Curve) {
	self.Runtime.CPUParticles2D_set_scale_curve_x(CPUParticles2D{self}, scale_curve)
}
func (self methodsCPUParticles2D) GetScaleCurveY() Curve {
	return self.Runtime.CPUParticles2D_get_scale_curve_y(CPUParticles2D{self})
}
func (self methodsCPUParticles2D) SetScaleCurveY(scale_curve Curve) {
	self.Runtime.CPUParticles2D_set_scale_curve_y(CPUParticles2D{self}, scale_curve)
}
func (self methodsCPUParticles2D) ConvertFromParticles(particles Node) {
	self.Runtime.CPUParticles2D_convert_from_particles(CPUParticles2D{self}, particles)
}

type methodsCPUParticles3D struct {
	_ [0]*methodsCPUParticles3D
	class
}

func (self CPUParticles3D) GeometryInstance3D() GeometryInstance3D {
	var parent GeometryInstance3D
	parent.class = self.class
	return parent
}
func (self methodsCPUParticles3D) SetEmitting(emitting bool) {
	self.Runtime.CPUParticles3D_set_emitting(CPUParticles3D{self}, emitting)
}
func (self methodsCPUParticles3D) SetAmount(amount int64) {
	self.Runtime.CPUParticles3D_set_amount(CPUParticles3D{self}, amount)
}
func (self methodsCPUParticles3D) SetLifetime(secs Float) {
	self.Runtime.CPUParticles3D_set_lifetime(CPUParticles3D{self}, secs)
}
func (self methodsCPUParticles3D) SetOneShot(enable bool) {
	self.Runtime.CPUParticles3D_set_one_shot(CPUParticles3D{self}, enable)
}
func (self methodsCPUParticles3D) SetPreProcessTime(secs Float) {
	self.Runtime.CPUParticles3D_set_pre_process_time(CPUParticles3D{self}, secs)
}
func (self methodsCPUParticles3D) SetExplosivenessRatio(ratio Float) {
	self.Runtime.CPUParticles3D_set_explosiveness_ratio(CPUParticles3D{self}, ratio)
}
func (self methodsCPUParticles3D) SetRandomnessRatio(ratio Float) {
	self.Runtime.CPUParticles3D_set_randomness_ratio(CPUParticles3D{self}, ratio)
}
func (self methodsCPUParticles3D) SetLifetimeRandomness(random Float) {
	self.Runtime.CPUParticles3D_set_lifetime_randomness(CPUParticles3D{self}, random)
}
func (self methodsCPUParticles3D) SetUseLocalCoordinates(enable bool) {
	self.Runtime.CPUParticles3D_set_use_local_coordinates(CPUParticles3D{self}, enable)
}
func (self methodsCPUParticles3D) SetFixedFps(fps int64) {
	self.Runtime.CPUParticles3D_set_fixed_fps(CPUParticles3D{self}, fps)
}
func (self methodsCPUParticles3D) SetFractionalDelta(enable bool) {
	self.Runtime.CPUParticles3D_set_fractional_delta(CPUParticles3D{self}, enable)
}
func (self methodsCPUParticles3D) SetSpeedScale(scale Float) {
	self.Runtime.CPUParticles3D_set_speed_scale(CPUParticles3D{self}, scale)
}
func (self methodsCPUParticles3D) IsEmitting() bool {
	return self.Runtime.CPUParticles3D_is_emitting(CPUParticles3D{self})
}
func (self methodsCPUParticles3D) GetAmount() int64 {
	return self.Runtime.CPUParticles3D_get_amount(CPUParticles3D{self})
}
func (self methodsCPUParticles3D) GetLifetime() Float {
	return self.Runtime.CPUParticles3D_get_lifetime(CPUParticles3D{self})
}
func (self methodsCPUParticles3D) GetOneShot() bool {
	return self.Runtime.CPUParticles3D_get_one_shot(CPUParticles3D{self})
}
func (self methodsCPUParticles3D) GetPreProcessTime() Float {
	return self.Runtime.CPUParticles3D_get_pre_process_time(CPUParticles3D{self})
}
func (self methodsCPUParticles3D) GetExplosivenessRatio() Float {
	return self.Runtime.CPUParticles3D_get_explosiveness_ratio(CPUParticles3D{self})
}
func (self methodsCPUParticles3D) GetRandomnessRatio() Float {
	return self.Runtime.CPUParticles3D_get_randomness_ratio(CPUParticles3D{self})
}
func (self methodsCPUParticles3D) GetLifetimeRandomness() Float {
	return self.Runtime.CPUParticles3D_get_lifetime_randomness(CPUParticles3D{self})
}
func (self methodsCPUParticles3D) GetUseLocalCoordinates() bool {
	return self.Runtime.CPUParticles3D_get_use_local_coordinates(CPUParticles3D{self})
}
func (self methodsCPUParticles3D) GetFixedFps() int64 {
	return self.Runtime.CPUParticles3D_get_fixed_fps(CPUParticles3D{self})
}
func (self methodsCPUParticles3D) GetFractionalDelta() bool {
	return self.Runtime.CPUParticles3D_get_fractional_delta(CPUParticles3D{self})
}
func (self methodsCPUParticles3D) GetSpeedScale() Float {
	return self.Runtime.CPUParticles3D_get_speed_scale(CPUParticles3D{self})
}
func (self methodsCPUParticles3D) SetDrawOrder(order CPUParticles3DDrawOrder) {
	self.Runtime.CPUParticles3D_set_draw_order(CPUParticles3D{self}, order)
}
func (self methodsCPUParticles3D) GetDrawOrder() CPUParticles3DDrawOrder {
	return self.Runtime.CPUParticles3D_get_draw_order(CPUParticles3D{self})
}
func (self methodsCPUParticles3D) SetMesh(mesh Mesh) {
	self.Runtime.CPUParticles3D_set_mesh(CPUParticles3D{self}, mesh)
}
func (self methodsCPUParticles3D) GetMesh() Mesh {
	return self.Runtime.CPUParticles3D_get_mesh(CPUParticles3D{self})
}
func (self methodsCPUParticles3D) Restart() {
	self.Runtime.CPUParticles3D_restart(CPUParticles3D{self})
}
func (self methodsCPUParticles3D) SetDirection(direction Vector3) {
	self.Runtime.CPUParticles3D_set_direction(CPUParticles3D{self}, direction)
}
func (self methodsCPUParticles3D) GetDirection() Vector3 {
	return self.Runtime.CPUParticles3D_get_direction(CPUParticles3D{self})
}
func (self methodsCPUParticles3D) SetSpread(degrees Float) {
	self.Runtime.CPUParticles3D_set_spread(CPUParticles3D{self}, degrees)
}
func (self methodsCPUParticles3D) GetSpread() Float {
	return self.Runtime.CPUParticles3D_get_spread(CPUParticles3D{self})
}
func (self methodsCPUParticles3D) SetFlatness(amount Float) {
	self.Runtime.CPUParticles3D_set_flatness(CPUParticles3D{self}, amount)
}
func (self methodsCPUParticles3D) GetFlatness() Float {
	return self.Runtime.CPUParticles3D_get_flatness(CPUParticles3D{self})
}
func (self methodsCPUParticles3D) SetParamMin(param CPUParticles3DParameter, value Float) {
	self.Runtime.CPUParticles3D_set_param_min(CPUParticles3D{self}, param, value)
}
func (self methodsCPUParticles3D) GetParamMin(param CPUParticles3DParameter) Float {
	return self.Runtime.CPUParticles3D_get_param_min(CPUParticles3D{self}, param)
}
func (self methodsCPUParticles3D) SetParamMax(param CPUParticles3DParameter, value Float) {
	self.Runtime.CPUParticles3D_set_param_max(CPUParticles3D{self}, param, value)
}
func (self methodsCPUParticles3D) GetParamMax(param CPUParticles3DParameter) Float {
	return self.Runtime.CPUParticles3D_get_param_max(CPUParticles3D{self}, param)
}
func (self methodsCPUParticles3D) SetParamCurve(param CPUParticles3DParameter, curve Curve) {
	self.Runtime.CPUParticles3D_set_param_curve(CPUParticles3D{self}, param, curve)
}
func (self methodsCPUParticles3D) GetParamCurve(param CPUParticles3DParameter) Curve {
	return self.Runtime.CPUParticles3D_get_param_curve(CPUParticles3D{self}, param)
}
func (self methodsCPUParticles3D) SetColor(color Color) {
	self.Runtime.CPUParticles3D_set_color(CPUParticles3D{self}, color)
}
func (self methodsCPUParticles3D) GetColor() Color {
	return self.Runtime.CPUParticles3D_get_color(CPUParticles3D{self})
}
func (self methodsCPUParticles3D) SetColorRamp(ramp Gradient) {
	self.Runtime.CPUParticles3D_set_color_ramp(CPUParticles3D{self}, ramp)
}
func (self methodsCPUParticles3D) GetColorRamp() Gradient {
	return self.Runtime.CPUParticles3D_get_color_ramp(CPUParticles3D{self})
}
func (self methodsCPUParticles3D) SetColorInitialRamp(ramp Gradient) {
	self.Runtime.CPUParticles3D_set_color_initial_ramp(CPUParticles3D{self}, ramp)
}
func (self methodsCPUParticles3D) GetColorInitialRamp() Gradient {
	return self.Runtime.CPUParticles3D_get_color_initial_ramp(CPUParticles3D{self})
}
func (self methodsCPUParticles3D) SetParticleFlag(particle_flag CPUParticles3DParticleFlags, enable bool) {
	self.Runtime.CPUParticles3D_set_particle_flag(CPUParticles3D{self}, particle_flag, enable)
}
func (self methodsCPUParticles3D) GetParticleFlag(particle_flag CPUParticles3DParticleFlags) bool {
	return self.Runtime.CPUParticles3D_get_particle_flag(CPUParticles3D{self}, particle_flag)
}
func (self methodsCPUParticles3D) SetEmissionShape(shape CPUParticles3DEmissionShape) {
	self.Runtime.CPUParticles3D_set_emission_shape(CPUParticles3D{self}, shape)
}
func (self methodsCPUParticles3D) GetEmissionShape() CPUParticles3DEmissionShape {
	return self.Runtime.CPUParticles3D_get_emission_shape(CPUParticles3D{self})
}
func (self methodsCPUParticles3D) SetEmissionSphereRadius(radius Float) {
	self.Runtime.CPUParticles3D_set_emission_sphere_radius(CPUParticles3D{self}, radius)
}
func (self methodsCPUParticles3D) GetEmissionSphereRadius() Float {
	return self.Runtime.CPUParticles3D_get_emission_sphere_radius(CPUParticles3D{self})
}
func (self methodsCPUParticles3D) SetEmissionBoxExtents(extents Vector3) {
	self.Runtime.CPUParticles3D_set_emission_box_extents(CPUParticles3D{self}, extents)
}
func (self methodsCPUParticles3D) GetEmissionBoxExtents() Vector3 {
	return self.Runtime.CPUParticles3D_get_emission_box_extents(CPUParticles3D{self})
}
func (self methodsCPUParticles3D) SetEmissionPoints(array PackedVector3Array) {
	self.Runtime.CPUParticles3D_set_emission_points(CPUParticles3D{self}, array)
}
func (self methodsCPUParticles3D) GetEmissionPoints() PackedVector3Array {
	return self.Runtime.CPUParticles3D_get_emission_points(CPUParticles3D{self})
}
func (self methodsCPUParticles3D) SetEmissionNormals(array PackedVector3Array) {
	self.Runtime.CPUParticles3D_set_emission_normals(CPUParticles3D{self}, array)
}
func (self methodsCPUParticles3D) GetEmissionNormals() PackedVector3Array {
	return self.Runtime.CPUParticles3D_get_emission_normals(CPUParticles3D{self})
}
func (self methodsCPUParticles3D) SetEmissionColors(array PackedColorArray) {
	self.Runtime.CPUParticles3D_set_emission_colors(CPUParticles3D{self}, array)
}
func (self methodsCPUParticles3D) GetEmissionColors() PackedColorArray {
	return self.Runtime.CPUParticles3D_get_emission_colors(CPUParticles3D{self})
}
func (self methodsCPUParticles3D) SetEmissionRingAxis(axis Vector3) {
	self.Runtime.CPUParticles3D_set_emission_ring_axis(CPUParticles3D{self}, axis)
}
func (self methodsCPUParticles3D) GetEmissionRingAxis() Vector3 {
	return self.Runtime.CPUParticles3D_get_emission_ring_axis(CPUParticles3D{self})
}
func (self methodsCPUParticles3D) SetEmissionRingHeight(height Float) {
	self.Runtime.CPUParticles3D_set_emission_ring_height(CPUParticles3D{self}, height)
}
func (self methodsCPUParticles3D) GetEmissionRingHeight() Float {
	return self.Runtime.CPUParticles3D_get_emission_ring_height(CPUParticles3D{self})
}
func (self methodsCPUParticles3D) SetEmissionRingRadius(radius Float) {
	self.Runtime.CPUParticles3D_set_emission_ring_radius(CPUParticles3D{self}, radius)
}
func (self methodsCPUParticles3D) GetEmissionRingRadius() Float {
	return self.Runtime.CPUParticles3D_get_emission_ring_radius(CPUParticles3D{self})
}
func (self methodsCPUParticles3D) SetEmissionRingInnerRadius(inner_radius Float) {
	self.Runtime.CPUParticles3D_set_emission_ring_inner_radius(CPUParticles3D{self}, inner_radius)
}
func (self methodsCPUParticles3D) GetEmissionRingInnerRadius() Float {
	return self.Runtime.CPUParticles3D_get_emission_ring_inner_radius(CPUParticles3D{self})
}
func (self methodsCPUParticles3D) GetGravity() Vector3 {
	return self.Runtime.CPUParticles3D_get_gravity(CPUParticles3D{self})
}
func (self methodsCPUParticles3D) SetGravity(accel_vec Vector3) {
	self.Runtime.CPUParticles3D_set_gravity(CPUParticles3D{self}, accel_vec)
}
func (self methodsCPUParticles3D) GetSplitScale() bool {
	return self.Runtime.CPUParticles3D_get_split_scale(CPUParticles3D{self})
}
func (self methodsCPUParticles3D) SetSplitScale(split_scale bool) {
	self.Runtime.CPUParticles3D_set_split_scale(CPUParticles3D{self}, split_scale)
}
func (self methodsCPUParticles3D) GetScaleCurveX() Curve {
	return self.Runtime.CPUParticles3D_get_scale_curve_x(CPUParticles3D{self})
}
func (self methodsCPUParticles3D) SetScaleCurveX(scale_curve Curve) {
	self.Runtime.CPUParticles3D_set_scale_curve_x(CPUParticles3D{self}, scale_curve)
}
func (self methodsCPUParticles3D) GetScaleCurveY() Curve {
	return self.Runtime.CPUParticles3D_get_scale_curve_y(CPUParticles3D{self})
}
func (self methodsCPUParticles3D) SetScaleCurveY(scale_curve Curve) {
	self.Runtime.CPUParticles3D_set_scale_curve_y(CPUParticles3D{self}, scale_curve)
}
func (self methodsCPUParticles3D) GetScaleCurveZ() Curve {
	return self.Runtime.CPUParticles3D_get_scale_curve_z(CPUParticles3D{self})
}
func (self methodsCPUParticles3D) SetScaleCurveZ(scale_curve Curve) {
	self.Runtime.CPUParticles3D_set_scale_curve_z(CPUParticles3D{self}, scale_curve)
}
func (self methodsCPUParticles3D) ConvertFromParticles(particles Node) {
	self.Runtime.CPUParticles3D_convert_from_particles(CPUParticles3D{self}, particles)
}

type methodsCSGBox3D struct {
	_ [0]*methodsCSGBox3D
	class
}

func (self CSGBox3D) CSGPrimitive3D() CSGPrimitive3D {
	var parent CSGPrimitive3D
	parent.class = self.class
	return parent
}
func (self methodsCSGBox3D) SetSize(size Vector3) {
	self.Runtime.CSGBox3D_set_size(CSGBox3D{self}, size)
}
func (self methodsCSGBox3D) GetSize() Vector3 {
	return self.Runtime.CSGBox3D_get_size(CSGBox3D{self})
}
func (self methodsCSGBox3D) SetMaterial(material Material) {
	self.Runtime.CSGBox3D_set_material(CSGBox3D{self}, material)
}
func (self methodsCSGBox3D) GetMaterial() Material {
	return self.Runtime.CSGBox3D_get_material(CSGBox3D{self})
}

type methodsCSGCombiner3D struct {
	_ [0]*methodsCSGCombiner3D
	class
}

func (self CSGCombiner3D) CSGShape3D() CSGShape3D {
	var parent CSGShape3D
	parent.class = self.class
	return parent
}

type methodsCSGCylinder3D struct {
	_ [0]*methodsCSGCylinder3D
	class
}

func (self CSGCylinder3D) CSGPrimitive3D() CSGPrimitive3D {
	var parent CSGPrimitive3D
	parent.class = self.class
	return parent
}
func (self methodsCSGCylinder3D) SetRadius(radius Float) {
	self.Runtime.CSGCylinder3D_set_radius(CSGCylinder3D{self}, radius)
}
func (self methodsCSGCylinder3D) GetRadius() Float {
	return self.Runtime.CSGCylinder3D_get_radius(CSGCylinder3D{self})
}
func (self methodsCSGCylinder3D) SetHeight(height Float) {
	self.Runtime.CSGCylinder3D_set_height(CSGCylinder3D{self}, height)
}
func (self methodsCSGCylinder3D) GetHeight() Float {
	return self.Runtime.CSGCylinder3D_get_height(CSGCylinder3D{self})
}
func (self methodsCSGCylinder3D) SetSides(sides int64) {
	self.Runtime.CSGCylinder3D_set_sides(CSGCylinder3D{self}, sides)
}
func (self methodsCSGCylinder3D) GetSides() int64 {
	return self.Runtime.CSGCylinder3D_get_sides(CSGCylinder3D{self})
}
func (self methodsCSGCylinder3D) SetCone(cone bool) {
	self.Runtime.CSGCylinder3D_set_cone(CSGCylinder3D{self}, cone)
}
func (self methodsCSGCylinder3D) IsCone() bool {
	return self.Runtime.CSGCylinder3D_is_cone(CSGCylinder3D{self})
}
func (self methodsCSGCylinder3D) SetMaterial(material Material) {
	self.Runtime.CSGCylinder3D_set_material(CSGCylinder3D{self}, material)
}
func (self methodsCSGCylinder3D) GetMaterial() Material {
	return self.Runtime.CSGCylinder3D_get_material(CSGCylinder3D{self})
}
func (self methodsCSGCylinder3D) SetSmoothFaces(smooth_faces bool) {
	self.Runtime.CSGCylinder3D_set_smooth_faces(CSGCylinder3D{self}, smooth_faces)
}
func (self methodsCSGCylinder3D) GetSmoothFaces() bool {
	return self.Runtime.CSGCylinder3D_get_smooth_faces(CSGCylinder3D{self})
}

type methodsCSGMesh3D struct {
	_ [0]*methodsCSGMesh3D
	class
}

func (self CSGMesh3D) CSGPrimitive3D() CSGPrimitive3D {
	var parent CSGPrimitive3D
	parent.class = self.class
	return parent
}
func (self methodsCSGMesh3D) SetMesh(mesh Mesh) {
	self.Runtime.CSGMesh3D_set_mesh(CSGMesh3D{self}, mesh)
}
func (self methodsCSGMesh3D) GetMesh() Mesh {
	return self.Runtime.CSGMesh3D_get_mesh(CSGMesh3D{self})
}
func (self methodsCSGMesh3D) SetMaterial(material Material) {
	self.Runtime.CSGMesh3D_set_material(CSGMesh3D{self}, material)
}
func (self methodsCSGMesh3D) GetMaterial() Material {
	return self.Runtime.CSGMesh3D_get_material(CSGMesh3D{self})
}

type methodsCSGPolygon3D struct {
	_ [0]*methodsCSGPolygon3D
	class
}

func (self CSGPolygon3D) CSGPrimitive3D() CSGPrimitive3D {
	var parent CSGPrimitive3D
	parent.class = self.class
	return parent
}
func (self methodsCSGPolygon3D) SetPolygon(polygon PackedVector2Array) {
	self.Runtime.CSGPolygon3D_set_polygon(CSGPolygon3D{self}, polygon)
}
func (self methodsCSGPolygon3D) GetPolygon() PackedVector2Array {
	return self.Runtime.CSGPolygon3D_get_polygon(CSGPolygon3D{self})
}
func (self methodsCSGPolygon3D) SetMode(mode CSGPolygon3DMode) {
	self.Runtime.CSGPolygon3D_set_mode(CSGPolygon3D{self}, mode)
}
func (self methodsCSGPolygon3D) GetMode() CSGPolygon3DMode {
	return self.Runtime.CSGPolygon3D_get_mode(CSGPolygon3D{self})
}
func (self methodsCSGPolygon3D) SetDepth(depth Float) {
	self.Runtime.CSGPolygon3D_set_depth(CSGPolygon3D{self}, depth)
}
func (self methodsCSGPolygon3D) GetDepth() Float {
	return self.Runtime.CSGPolygon3D_get_depth(CSGPolygon3D{self})
}
func (self methodsCSGPolygon3D) SetSpinDegrees(degrees Float) {
	self.Runtime.CSGPolygon3D_set_spin_degrees(CSGPolygon3D{self}, degrees)
}
func (self methodsCSGPolygon3D) GetSpinDegrees() Float {
	return self.Runtime.CSGPolygon3D_get_spin_degrees(CSGPolygon3D{self})
}
func (self methodsCSGPolygon3D) SetSpinSides(spin_sides int64) {
	self.Runtime.CSGPolygon3D_set_spin_sides(CSGPolygon3D{self}, spin_sides)
}
func (self methodsCSGPolygon3D) GetSpinSides() int64 {
	return self.Runtime.CSGPolygon3D_get_spin_sides(CSGPolygon3D{self})
}
func (self methodsCSGPolygon3D) SetPathNode(path NodePath) {
	self.Runtime.CSGPolygon3D_set_path_node(CSGPolygon3D{self}, path)
}
func (self methodsCSGPolygon3D) GetPathNode() NodePath {
	return self.Runtime.CSGPolygon3D_get_path_node(CSGPolygon3D{self})
}
func (self methodsCSGPolygon3D) SetPathIntervalType(interval_type CSGPolygon3DPathIntervalType) {
	self.Runtime.CSGPolygon3D_set_path_interval_type(CSGPolygon3D{self}, interval_type)
}
func (self methodsCSGPolygon3D) GetPathIntervalType() CSGPolygon3DPathIntervalType {
	return self.Runtime.CSGPolygon3D_get_path_interval_type(CSGPolygon3D{self})
}
func (self methodsCSGPolygon3D) SetPathInterval(interval Float) {
	self.Runtime.CSGPolygon3D_set_path_interval(CSGPolygon3D{self}, interval)
}
func (self methodsCSGPolygon3D) GetPathInterval() Float {
	return self.Runtime.CSGPolygon3D_get_path_interval(CSGPolygon3D{self})
}
func (self methodsCSGPolygon3D) SetPathSimplifyAngle(degrees Float) {
	self.Runtime.CSGPolygon3D_set_path_simplify_angle(CSGPolygon3D{self}, degrees)
}
func (self methodsCSGPolygon3D) GetPathSimplifyAngle() Float {
	return self.Runtime.CSGPolygon3D_get_path_simplify_angle(CSGPolygon3D{self})
}
func (self methodsCSGPolygon3D) SetPathRotation(path_rotation CSGPolygon3DPathRotation) {
	self.Runtime.CSGPolygon3D_set_path_rotation(CSGPolygon3D{self}, path_rotation)
}
func (self methodsCSGPolygon3D) GetPathRotation() CSGPolygon3DPathRotation {
	return self.Runtime.CSGPolygon3D_get_path_rotation(CSGPolygon3D{self})
}
func (self methodsCSGPolygon3D) SetPathLocal(enable bool) {
	self.Runtime.CSGPolygon3D_set_path_local(CSGPolygon3D{self}, enable)
}
func (self methodsCSGPolygon3D) IsPathLocal() bool {
	return self.Runtime.CSGPolygon3D_is_path_local(CSGPolygon3D{self})
}
func (self methodsCSGPolygon3D) SetPathContinuousU(enable bool) {
	self.Runtime.CSGPolygon3D_set_path_continuous_u(CSGPolygon3D{self}, enable)
}
func (self methodsCSGPolygon3D) IsPathContinuousU() bool {
	return self.Runtime.CSGPolygon3D_is_path_continuous_u(CSGPolygon3D{self})
}
func (self methodsCSGPolygon3D) SetPathUDistance(distance Float) {
	self.Runtime.CSGPolygon3D_set_path_u_distance(CSGPolygon3D{self}, distance)
}
func (self methodsCSGPolygon3D) GetPathUDistance() Float {
	return self.Runtime.CSGPolygon3D_get_path_u_distance(CSGPolygon3D{self})
}
func (self methodsCSGPolygon3D) SetPathJoined(enable bool) {
	self.Runtime.CSGPolygon3D_set_path_joined(CSGPolygon3D{self}, enable)
}
func (self methodsCSGPolygon3D) IsPathJoined() bool {
	return self.Runtime.CSGPolygon3D_is_path_joined(CSGPolygon3D{self})
}
func (self methodsCSGPolygon3D) SetMaterial(material Material) {
	self.Runtime.CSGPolygon3D_set_material(CSGPolygon3D{self}, material)
}
func (self methodsCSGPolygon3D) GetMaterial() Material {
	return self.Runtime.CSGPolygon3D_get_material(CSGPolygon3D{self})
}
func (self methodsCSGPolygon3D) SetSmoothFaces(smooth_faces bool) {
	self.Runtime.CSGPolygon3D_set_smooth_faces(CSGPolygon3D{self}, smooth_faces)
}
func (self methodsCSGPolygon3D) GetSmoothFaces() bool {
	return self.Runtime.CSGPolygon3D_get_smooth_faces(CSGPolygon3D{self})
}

type methodsCSGPrimitive3D struct {
	_ [0]*methodsCSGPrimitive3D
	class
}

func (self CSGPrimitive3D) CSGShape3D() CSGShape3D {
	var parent CSGShape3D
	parent.class = self.class
	return parent
}
func (self methodsCSGPrimitive3D) SetFlipFaces(flip_faces bool) {
	self.Runtime.CSGPrimitive3D_set_flip_faces(CSGPrimitive3D{self}, flip_faces)
}
func (self methodsCSGPrimitive3D) GetFlipFaces() bool {
	return self.Runtime.CSGPrimitive3D_get_flip_faces(CSGPrimitive3D{self})
}

type methodsCSGShape3D struct {
	_ [0]*methodsCSGShape3D
	class
}

func (self CSGShape3D) GeometryInstance3D() GeometryInstance3D {
	var parent GeometryInstance3D
	parent.class = self.class
	return parent
}
func (self methodsCSGShape3D) IsRootShape() bool {
	return self.Runtime.CSGShape3D_is_root_shape(CSGShape3D{self})
}
func (self methodsCSGShape3D) SetOperation(operation CSGShape3DOperation) {
	self.Runtime.CSGShape3D_set_operation(CSGShape3D{self}, operation)
}
func (self methodsCSGShape3D) GetOperation() CSGShape3DOperation {
	return self.Runtime.CSGShape3D_get_operation(CSGShape3D{self})
}
func (self methodsCSGShape3D) SetSnap(snap Float) {
	self.Runtime.CSGShape3D_set_snap(CSGShape3D{self}, snap)
}
func (self methodsCSGShape3D) GetSnap() Float {
	return self.Runtime.CSGShape3D_get_snap(CSGShape3D{self})
}
func (self methodsCSGShape3D) SetUseCollision(operation bool) {
	self.Runtime.CSGShape3D_set_use_collision(CSGShape3D{self}, operation)
}
func (self methodsCSGShape3D) IsUsingCollision() bool {
	return self.Runtime.CSGShape3D_is_using_collision(CSGShape3D{self})
}
func (self methodsCSGShape3D) SetCollisionLayer(layer int64) {
	self.Runtime.CSGShape3D_set_collision_layer(CSGShape3D{self}, layer)
}
func (self methodsCSGShape3D) GetCollisionLayer() int64 {
	return self.Runtime.CSGShape3D_get_collision_layer(CSGShape3D{self})
}
func (self methodsCSGShape3D) SetCollisionMask(mask int64) {
	self.Runtime.CSGShape3D_set_collision_mask(CSGShape3D{self}, mask)
}
func (self methodsCSGShape3D) GetCollisionMask() int64 {
	return self.Runtime.CSGShape3D_get_collision_mask(CSGShape3D{self})
}
func (self methodsCSGShape3D) SetCollisionMaskValue(layer_number int64, value bool) {
	self.Runtime.CSGShape3D_set_collision_mask_value(CSGShape3D{self}, layer_number, value)
}
func (self methodsCSGShape3D) GetCollisionMaskValue(layer_number int64) bool {
	return self.Runtime.CSGShape3D_get_collision_mask_value(CSGShape3D{self}, layer_number)
}
func (self methodsCSGShape3D) SetCollisionLayerValue(layer_number int64, value bool) {
	self.Runtime.CSGShape3D_set_collision_layer_value(CSGShape3D{self}, layer_number, value)
}
func (self methodsCSGShape3D) GetCollisionLayerValue(layer_number int64) bool {
	return self.Runtime.CSGShape3D_get_collision_layer_value(CSGShape3D{self}, layer_number)
}
func (self methodsCSGShape3D) SetCollisionPriority(priority Float) {
	self.Runtime.CSGShape3D_set_collision_priority(CSGShape3D{self}, priority)
}
func (self methodsCSGShape3D) GetCollisionPriority() Float {
	return self.Runtime.CSGShape3D_get_collision_priority(CSGShape3D{self})
}
func (self methodsCSGShape3D) SetCalculateTangents(enabled bool) {
	self.Runtime.CSGShape3D_set_calculate_tangents(CSGShape3D{self}, enabled)
}
func (self methodsCSGShape3D) IsCalculatingTangents() bool {
	return self.Runtime.CSGShape3D_is_calculating_tangents(CSGShape3D{self})
}
func (self methodsCSGShape3D) GetMeshes() Array {
	return self.Runtime.CSGShape3D_get_meshes(CSGShape3D{self})
}

type methodsCSGSphere3D struct {
	_ [0]*methodsCSGSphere3D
	class
}

func (self CSGSphere3D) CSGPrimitive3D() CSGPrimitive3D {
	var parent CSGPrimitive3D
	parent.class = self.class
	return parent
}
func (self methodsCSGSphere3D) SetRadius(radius Float) {
	self.Runtime.CSGSphere3D_set_radius(CSGSphere3D{self}, radius)
}
func (self methodsCSGSphere3D) GetRadius() Float {
	return self.Runtime.CSGSphere3D_get_radius(CSGSphere3D{self})
}
func (self methodsCSGSphere3D) SetRadialSegments(radial_segments int64) {
	self.Runtime.CSGSphere3D_set_radial_segments(CSGSphere3D{self}, radial_segments)
}
func (self methodsCSGSphere3D) GetRadialSegments() int64 {
	return self.Runtime.CSGSphere3D_get_radial_segments(CSGSphere3D{self})
}
func (self methodsCSGSphere3D) SetRings(rings int64) {
	self.Runtime.CSGSphere3D_set_rings(CSGSphere3D{self}, rings)
}
func (self methodsCSGSphere3D) GetRings() int64 {
	return self.Runtime.CSGSphere3D_get_rings(CSGSphere3D{self})
}
func (self methodsCSGSphere3D) SetSmoothFaces(smooth_faces bool) {
	self.Runtime.CSGSphere3D_set_smooth_faces(CSGSphere3D{self}, smooth_faces)
}
func (self methodsCSGSphere3D) GetSmoothFaces() bool {
	return self.Runtime.CSGSphere3D_get_smooth_faces(CSGSphere3D{self})
}
func (self methodsCSGSphere3D) SetMaterial(material Material) {
	self.Runtime.CSGSphere3D_set_material(CSGSphere3D{self}, material)
}
func (self methodsCSGSphere3D) GetMaterial() Material {
	return self.Runtime.CSGSphere3D_get_material(CSGSphere3D{self})
}

type methodsCSGTorus3D struct {
	_ [0]*methodsCSGTorus3D
	class
}

func (self CSGTorus3D) CSGPrimitive3D() CSGPrimitive3D {
	var parent CSGPrimitive3D
	parent.class = self.class
	return parent
}
func (self methodsCSGTorus3D) SetInnerRadius(radius Float) {
	self.Runtime.CSGTorus3D_set_inner_radius(CSGTorus3D{self}, radius)
}
func (self methodsCSGTorus3D) GetInnerRadius() Float {
	return self.Runtime.CSGTorus3D_get_inner_radius(CSGTorus3D{self})
}
func (self methodsCSGTorus3D) SetOuterRadius(radius Float) {
	self.Runtime.CSGTorus3D_set_outer_radius(CSGTorus3D{self}, radius)
}
func (self methodsCSGTorus3D) GetOuterRadius() Float {
	return self.Runtime.CSGTorus3D_get_outer_radius(CSGTorus3D{self})
}
func (self methodsCSGTorus3D) SetSides(sides int64) {
	self.Runtime.CSGTorus3D_set_sides(CSGTorus3D{self}, sides)
}
func (self methodsCSGTorus3D) GetSides() int64 {
	return self.Runtime.CSGTorus3D_get_sides(CSGTorus3D{self})
}
func (self methodsCSGTorus3D) SetRingSides(sides int64) {
	self.Runtime.CSGTorus3D_set_ring_sides(CSGTorus3D{self}, sides)
}
func (self methodsCSGTorus3D) GetRingSides() int64 {
	return self.Runtime.CSGTorus3D_get_ring_sides(CSGTorus3D{self})
}
func (self methodsCSGTorus3D) SetMaterial(material Material) {
	self.Runtime.CSGTorus3D_set_material(CSGTorus3D{self}, material)
}
func (self methodsCSGTorus3D) GetMaterial() Material {
	return self.Runtime.CSGTorus3D_get_material(CSGTorus3D{self})
}
func (self methodsCSGTorus3D) SetSmoothFaces(smooth_faces bool) {
	self.Runtime.CSGTorus3D_set_smooth_faces(CSGTorus3D{self}, smooth_faces)
}
func (self methodsCSGTorus3D) GetSmoothFaces() bool {
	return self.Runtime.CSGTorus3D_get_smooth_faces(CSGTorus3D{self})
}

type methodsCallbackTweener struct {
	_ [0]*methodsCallbackTweener
	class
}

func (self CallbackTweener) Tweener() Tweener {
	var parent Tweener
	parent.class = self.class
	return parent
}
func (self methodsCallbackTweener) SetDelay(delay Float) CallbackTweener {
	return self.Runtime.CallbackTweener_set_delay(CallbackTweener{self}, delay)
}

type methodsCamera2D struct {
	_ [0]*methodsCamera2D
	class
}

func (self Camera2D) Node2D() Node2D { var parent Node2D; parent.class = self.class; return parent }
func (self methodsCamera2D) SetOffset(offset Vector2) {
	self.Runtime.Camera2D_set_offset(Camera2D{self}, offset)
}
func (self methodsCamera2D) GetOffset() Vector2 {
	return self.Runtime.Camera2D_get_offset(Camera2D{self})
}
func (self methodsCamera2D) SetAnchorMode(anchor_mode Camera2DAnchorMode) {
	self.Runtime.Camera2D_set_anchor_mode(Camera2D{self}, anchor_mode)
}
func (self methodsCamera2D) GetAnchorMode() Camera2DAnchorMode {
	return self.Runtime.Camera2D_get_anchor_mode(Camera2D{self})
}
func (self methodsCamera2D) SetIgnoreRotation(ignore bool) {
	self.Runtime.Camera2D_set_ignore_rotation(Camera2D{self}, ignore)
}
func (self methodsCamera2D) IsIgnoringRotation() bool {
	return self.Runtime.Camera2D_is_ignoring_rotation(Camera2D{self})
}
func (self methodsCamera2D) SetProcessCallback(mode Camera2DCamera2DProcessCallback) {
	self.Runtime.Camera2D_set_process_callback(Camera2D{self}, mode)
}
func (self methodsCamera2D) GetProcessCallback() Camera2DCamera2DProcessCallback {
	return self.Runtime.Camera2D_get_process_callback(Camera2D{self})
}
func (self methodsCamera2D) SetEnabled(enabled bool) {
	self.Runtime.Camera2D_set_enabled(Camera2D{self}, enabled)
}
func (self methodsCamera2D) IsEnabled() bool {
	return self.Runtime.Camera2D_is_enabled(Camera2D{self})
}
func (self methodsCamera2D) MakeCurrent() {
	self.Runtime.Camera2D_make_current(Camera2D{self})
}
func (self methodsCamera2D) IsCurrent() bool {
	return self.Runtime.Camera2D_is_current(Camera2D{self})
}
func (self methodsCamera2D) SetLimit(margin Side, limit int64) {
	self.Runtime.Camera2D_set_limit(Camera2D{self}, margin, limit)
}
func (self methodsCamera2D) GetLimit(margin Side) int64 {
	return self.Runtime.Camera2D_get_limit(Camera2D{self}, margin)
}
func (self methodsCamera2D) SetLimitSmoothingEnabled(limit_smoothing_enabled bool) {
	self.Runtime.Camera2D_set_limit_smoothing_enabled(Camera2D{self}, limit_smoothing_enabled)
}
func (self methodsCamera2D) IsLimitSmoothingEnabled() bool {
	return self.Runtime.Camera2D_is_limit_smoothing_enabled(Camera2D{self})
}
func (self methodsCamera2D) SetDragVerticalEnabled(enabled bool) {
	self.Runtime.Camera2D_set_drag_vertical_enabled(Camera2D{self}, enabled)
}
func (self methodsCamera2D) IsDragVerticalEnabled() bool {
	return self.Runtime.Camera2D_is_drag_vertical_enabled(Camera2D{self})
}
func (self methodsCamera2D) SetDragHorizontalEnabled(enabled bool) {
	self.Runtime.Camera2D_set_drag_horizontal_enabled(Camera2D{self}, enabled)
}
func (self methodsCamera2D) IsDragHorizontalEnabled() bool {
	return self.Runtime.Camera2D_is_drag_horizontal_enabled(Camera2D{self})
}
func (self methodsCamera2D) SetDragVerticalOffset(offset Float) {
	self.Runtime.Camera2D_set_drag_vertical_offset(Camera2D{self}, offset)
}
func (self methodsCamera2D) GetDragVerticalOffset() Float {
	return self.Runtime.Camera2D_get_drag_vertical_offset(Camera2D{self})
}
func (self methodsCamera2D) SetDragHorizontalOffset(offset Float) {
	self.Runtime.Camera2D_set_drag_horizontal_offset(Camera2D{self}, offset)
}
func (self methodsCamera2D) GetDragHorizontalOffset() Float {
	return self.Runtime.Camera2D_get_drag_horizontal_offset(Camera2D{self})
}
func (self methodsCamera2D) SetDragMargin(margin Side, drag_margin Float) {
	self.Runtime.Camera2D_set_drag_margin(Camera2D{self}, margin, drag_margin)
}
func (self methodsCamera2D) GetDragMargin(margin Side) Float {
	return self.Runtime.Camera2D_get_drag_margin(Camera2D{self}, margin)
}
func (self methodsCamera2D) GetTargetPosition() Vector2 {
	return self.Runtime.Camera2D_get_target_position(Camera2D{self})
}
func (self methodsCamera2D) GetScreenCenterPosition() Vector2 {
	return self.Runtime.Camera2D_get_screen_center_position(Camera2D{self})
}
func (self methodsCamera2D) SetZoom(zoom Vector2) {
	self.Runtime.Camera2D_set_zoom(Camera2D{self}, zoom)
}
func (self methodsCamera2D) GetZoom() Vector2 {
	return self.Runtime.Camera2D_get_zoom(Camera2D{self})
}
func (self methodsCamera2D) SetCustomViewport(viewport Node) {
	self.Runtime.Camera2D_set_custom_viewport(Camera2D{self}, viewport)
}
func (self methodsCamera2D) GetCustomViewport() Node {
	return self.Runtime.Camera2D_get_custom_viewport(Camera2D{self})
}
func (self methodsCamera2D) SetPositionSmoothingSpeed(position_smoothing_speed Float) {
	self.Runtime.Camera2D_set_position_smoothing_speed(Camera2D{self}, position_smoothing_speed)
}
func (self methodsCamera2D) GetPositionSmoothingSpeed() Float {
	return self.Runtime.Camera2D_get_position_smoothing_speed(Camera2D{self})
}
func (self methodsCamera2D) SetPositionSmoothingEnabled(position_smoothing_speed bool) {
	self.Runtime.Camera2D_set_position_smoothing_enabled(Camera2D{self}, position_smoothing_speed)
}
func (self methodsCamera2D) IsPositionSmoothingEnabled() bool {
	return self.Runtime.Camera2D_is_position_smoothing_enabled(Camera2D{self})
}
func (self methodsCamera2D) SetRotationSmoothingEnabled(enabled bool) {
	self.Runtime.Camera2D_set_rotation_smoothing_enabled(Camera2D{self}, enabled)
}
func (self methodsCamera2D) IsRotationSmoothingEnabled() bool {
	return self.Runtime.Camera2D_is_rotation_smoothing_enabled(Camera2D{self})
}
func (self methodsCamera2D) SetRotationSmoothingSpeed(speed Float) {
	self.Runtime.Camera2D_set_rotation_smoothing_speed(Camera2D{self}, speed)
}
func (self methodsCamera2D) GetRotationSmoothingSpeed() Float {
	return self.Runtime.Camera2D_get_rotation_smoothing_speed(Camera2D{self})
}
func (self methodsCamera2D) ForceUpdateScroll() {
	self.Runtime.Camera2D_force_update_scroll(Camera2D{self})
}
func (self methodsCamera2D) ResetSmoothing() {
	self.Runtime.Camera2D_reset_smoothing(Camera2D{self})
}
func (self methodsCamera2D) Align() {
	self.Runtime.Camera2D_align(Camera2D{self})
}
func (self methodsCamera2D) SetScreenDrawingEnabled(screen_drawing_enabled bool) {
	self.Runtime.Camera2D_set_screen_drawing_enabled(Camera2D{self}, screen_drawing_enabled)
}
func (self methodsCamera2D) IsScreenDrawingEnabled() bool {
	return self.Runtime.Camera2D_is_screen_drawing_enabled(Camera2D{self})
}
func (self methodsCamera2D) SetLimitDrawingEnabled(limit_drawing_enabled bool) {
	self.Runtime.Camera2D_set_limit_drawing_enabled(Camera2D{self}, limit_drawing_enabled)
}
func (self methodsCamera2D) IsLimitDrawingEnabled() bool {
	return self.Runtime.Camera2D_is_limit_drawing_enabled(Camera2D{self})
}
func (self methodsCamera2D) SetMarginDrawingEnabled(margin_drawing_enabled bool) {
	self.Runtime.Camera2D_set_margin_drawing_enabled(Camera2D{self}, margin_drawing_enabled)
}
func (self methodsCamera2D) IsMarginDrawingEnabled() bool {
	return self.Runtime.Camera2D_is_margin_drawing_enabled(Camera2D{self})
}

type methodsCamera3D struct {
	_ [0]*methodsCamera3D
	class
}

func (self Camera3D) Node3D() Node3D { var parent Node3D; parent.class = self.class; return parent }
func (self methodsCamera3D) ProjectRayNormal(screen_point Vector2) Vector3 {
	return self.Runtime.Camera3D_project_ray_normal(Camera3D{self}, screen_point)
}
func (self methodsCamera3D) ProjectLocalRayNormal(screen_point Vector2) Vector3 {
	return self.Runtime.Camera3D_project_local_ray_normal(Camera3D{self}, screen_point)
}
func (self methodsCamera3D) ProjectRayOrigin(screen_point Vector2) Vector3 {
	return self.Runtime.Camera3D_project_ray_origin(Camera3D{self}, screen_point)
}
func (self methodsCamera3D) UnprojectPosition(world_point Vector3) Vector2 {
	return self.Runtime.Camera3D_unproject_position(Camera3D{self}, world_point)
}
func (self methodsCamera3D) IsPositionBehind(world_point Vector3) bool {
	return self.Runtime.Camera3D_is_position_behind(Camera3D{self}, world_point)
}
func (self methodsCamera3D) ProjectPosition(screen_point Vector2, z_depth Float) Vector3 {
	return self.Runtime.Camera3D_project_position(Camera3D{self}, screen_point, z_depth)
}
func (self methodsCamera3D) SetPerspective(fov Float, z_near Float, z_far Float) {
	self.Runtime.Camera3D_set_perspective(Camera3D{self}, fov, z_near, z_far)
}
func (self methodsCamera3D) SetOrthogonal(size Float, z_near Float, z_far Float) {
	self.Runtime.Camera3D_set_orthogonal(Camera3D{self}, size, z_near, z_far)
}
func (self methodsCamera3D) SetFrustum(size Float, offset Vector2, z_near Float, z_far Float) {
	self.Runtime.Camera3D_set_frustum(Camera3D{self}, size, offset, z_near, z_far)
}
func (self methodsCamera3D) MakeCurrent() {
	self.Runtime.Camera3D_make_current(Camera3D{self})
}
func (self methodsCamera3D) ClearCurrent(enable_next bool) {
	self.Runtime.Camera3D_clear_current(Camera3D{self}, enable_next)
}
func (self methodsCamera3D) SetCurrent(enabled bool) {
	self.Runtime.Camera3D_set_current(Camera3D{self}, enabled)
}
func (self methodsCamera3D) IsCurrent() bool {
	return self.Runtime.Camera3D_is_current(Camera3D{self})
}
func (self methodsCamera3D) GetCameraTransform() Transform3D {
	return self.Runtime.Camera3D_get_camera_transform(Camera3D{self})
}
func (self methodsCamera3D) GetCameraProjection() Projection {
	return self.Runtime.Camera3D_get_camera_projection(Camera3D{self})
}
func (self methodsCamera3D) GetFov() Float {
	return self.Runtime.Camera3D_get_fov(Camera3D{self})
}
func (self methodsCamera3D) GetFrustumOffset() Vector2 {
	return self.Runtime.Camera3D_get_frustum_offset(Camera3D{self})
}
func (self methodsCamera3D) GetSize() Float {
	return self.Runtime.Camera3D_get_size(Camera3D{self})
}
func (self methodsCamera3D) GetFar() Float {
	return self.Runtime.Camera3D_get_far(Camera3D{self})
}
func (self methodsCamera3D) GetNear() Float {
	return self.Runtime.Camera3D_get_near(Camera3D{self})
}
func (self methodsCamera3D) SetFov(fov Float) {
	self.Runtime.Camera3D_set_fov(Camera3D{self}, fov)
}
func (self methodsCamera3D) SetFrustumOffset(offset Vector2) {
	self.Runtime.Camera3D_set_frustum_offset(Camera3D{self}, offset)
}
func (self methodsCamera3D) SetSize(size Float) {
	self.Runtime.Camera3D_set_size(Camera3D{self}, size)
}
func (self methodsCamera3D) SetFar(far Float) {
	self.Runtime.Camera3D_set_far(Camera3D{self}, far)
}
func (self methodsCamera3D) SetNear(near Float) {
	self.Runtime.Camera3D_set_near(Camera3D{self}, near)
}
func (self methodsCamera3D) GetProjection() Camera3DProjectionType {
	return self.Runtime.Camera3D_get_projection(Camera3D{self})
}
func (self methodsCamera3D) SetProjection(mode Camera3DProjectionType) {
	self.Runtime.Camera3D_set_projection(Camera3D{self}, mode)
}
func (self methodsCamera3D) SetHOffset(offset Float) {
	self.Runtime.Camera3D_set_h_offset(Camera3D{self}, offset)
}
func (self methodsCamera3D) GetHOffset() Float {
	return self.Runtime.Camera3D_get_h_offset(Camera3D{self})
}
func (self methodsCamera3D) SetVOffset(offset Float) {
	self.Runtime.Camera3D_set_v_offset(Camera3D{self}, offset)
}
func (self methodsCamera3D) GetVOffset() Float {
	return self.Runtime.Camera3D_get_v_offset(Camera3D{self})
}
func (self methodsCamera3D) SetCullMask(mask int64) {
	self.Runtime.Camera3D_set_cull_mask(Camera3D{self}, mask)
}
func (self methodsCamera3D) GetCullMask() int64 {
	return self.Runtime.Camera3D_get_cull_mask(Camera3D{self})
}
func (self methodsCamera3D) SetEnvironment(env Environment) {
	self.Runtime.Camera3D_set_environment(Camera3D{self}, env)
}
func (self methodsCamera3D) GetEnvironment() Environment {
	return self.Runtime.Camera3D_get_environment(Camera3D{self})
}
func (self methodsCamera3D) SetAttributes(env CameraAttributes) {
	self.Runtime.Camera3D_set_attributes(Camera3D{self}, env)
}
func (self methodsCamera3D) GetAttributes() CameraAttributes {
	return self.Runtime.Camera3D_get_attributes(Camera3D{self})
}
func (self methodsCamera3D) SetKeepAspectMode(mode Camera3DKeepAspect) {
	self.Runtime.Camera3D_set_keep_aspect_mode(Camera3D{self}, mode)
}
func (self methodsCamera3D) GetKeepAspectMode() Camera3DKeepAspect {
	return self.Runtime.Camera3D_get_keep_aspect_mode(Camera3D{self})
}
func (self methodsCamera3D) SetDopplerTracking(mode Camera3DDopplerTracking) {
	self.Runtime.Camera3D_set_doppler_tracking(Camera3D{self}, mode)
}
func (self methodsCamera3D) GetDopplerTracking() Camera3DDopplerTracking {
	return self.Runtime.Camera3D_get_doppler_tracking(Camera3D{self})
}
func (self methodsCamera3D) GetFrustum() ArrayOf[Plane] {
	return self.Runtime.Camera3D_get_frustum(Camera3D{self})
}
func (self methodsCamera3D) IsPositionInFrustum(world_point Vector3) bool {
	return self.Runtime.Camera3D_is_position_in_frustum(Camera3D{self}, world_point)
}
func (self methodsCamera3D) GetCameraRid() RID {
	return self.Runtime.Camera3D_get_camera_rid(Camera3D{self})
}
func (self methodsCamera3D) GetPyramidShapeRid() RID {
	return self.Runtime.Camera3D_get_pyramid_shape_rid(Camera3D{self})
}
func (self methodsCamera3D) SetCullMaskValue(layer_number int64, value bool) {
	self.Runtime.Camera3D_set_cull_mask_value(Camera3D{self}, layer_number, value)
}
func (self methodsCamera3D) GetCullMaskValue(layer_number int64) bool {
	return self.Runtime.Camera3D_get_cull_mask_value(Camera3D{self}, layer_number)
}

type methodsCameraAttributes struct {
	_ [0]*methodsCameraAttributes
	class
}

func (self CameraAttributes) Resource() Resource {
	var parent Resource
	parent.class = self.class
	return parent
}
func (self methodsCameraAttributes) SetExposureMultiplier(multiplier Float) {
	self.Runtime.CameraAttributes_set_exposure_multiplier(CameraAttributes{self}, multiplier)
}
func (self methodsCameraAttributes) GetExposureMultiplier() Float {
	return self.Runtime.CameraAttributes_get_exposure_multiplier(CameraAttributes{self})
}
func (self methodsCameraAttributes) SetExposureSensitivity(sensitivity Float) {
	self.Runtime.CameraAttributes_set_exposure_sensitivity(CameraAttributes{self}, sensitivity)
}
func (self methodsCameraAttributes) GetExposureSensitivity() Float {
	return self.Runtime.CameraAttributes_get_exposure_sensitivity(CameraAttributes{self})
}
func (self methodsCameraAttributes) SetAutoExposureEnabled(enabled bool) {
	self.Runtime.CameraAttributes_set_auto_exposure_enabled(CameraAttributes{self}, enabled)
}
func (self methodsCameraAttributes) IsAutoExposureEnabled() bool {
	return self.Runtime.CameraAttributes_is_auto_exposure_enabled(CameraAttributes{self})
}
func (self methodsCameraAttributes) SetAutoExposureSpeed(exposure_speed Float) {
	self.Runtime.CameraAttributes_set_auto_exposure_speed(CameraAttributes{self}, exposure_speed)
}
func (self methodsCameraAttributes) GetAutoExposureSpeed() Float {
	return self.Runtime.CameraAttributes_get_auto_exposure_speed(CameraAttributes{self})
}
func (self methodsCameraAttributes) SetAutoExposureScale(exposure_grey Float) {
	self.Runtime.CameraAttributes_set_auto_exposure_scale(CameraAttributes{self}, exposure_grey)
}
func (self methodsCameraAttributes) GetAutoExposureScale() Float {
	return self.Runtime.CameraAttributes_get_auto_exposure_scale(CameraAttributes{self})
}

type methodsCameraAttributesPhysical struct {
	_ [0]*methodsCameraAttributesPhysical
	class
}

func (self CameraAttributesPhysical) CameraAttributes() CameraAttributes {
	var parent CameraAttributes
	parent.class = self.class
	return parent
}
func (self methodsCameraAttributesPhysical) SetAperture(aperture Float) {
	self.Runtime.CameraAttributesPhysical_set_aperture(CameraAttributesPhysical{self}, aperture)
}
func (self methodsCameraAttributesPhysical) GetAperture() Float {
	return self.Runtime.CameraAttributesPhysical_get_aperture(CameraAttributesPhysical{self})
}
func (self methodsCameraAttributesPhysical) SetShutterSpeed(shutter_speed Float) {
	self.Runtime.CameraAttributesPhysical_set_shutter_speed(CameraAttributesPhysical{self}, shutter_speed)
}
func (self methodsCameraAttributesPhysical) GetShutterSpeed() Float {
	return self.Runtime.CameraAttributesPhysical_get_shutter_speed(CameraAttributesPhysical{self})
}
func (self methodsCameraAttributesPhysical) SetFocalLength(focal_length Float) {
	self.Runtime.CameraAttributesPhysical_set_focal_length(CameraAttributesPhysical{self}, focal_length)
}
func (self methodsCameraAttributesPhysical) GetFocalLength() Float {
	return self.Runtime.CameraAttributesPhysical_get_focal_length(CameraAttributesPhysical{self})
}
func (self methodsCameraAttributesPhysical) SetFocusDistance(focus_distance Float) {
	self.Runtime.CameraAttributesPhysical_set_focus_distance(CameraAttributesPhysical{self}, focus_distance)
}
func (self methodsCameraAttributesPhysical) GetFocusDistance() Float {
	return self.Runtime.CameraAttributesPhysical_get_focus_distance(CameraAttributesPhysical{self})
}
func (self methodsCameraAttributesPhysical) SetNear(near Float) {
	self.Runtime.CameraAttributesPhysical_set_near(CameraAttributesPhysical{self}, near)
}
func (self methodsCameraAttributesPhysical) GetNear() Float {
	return self.Runtime.CameraAttributesPhysical_get_near(CameraAttributesPhysical{self})
}
func (self methodsCameraAttributesPhysical) SetFar(far Float) {
	self.Runtime.CameraAttributesPhysical_set_far(CameraAttributesPhysical{self}, far)
}
func (self methodsCameraAttributesPhysical) GetFar() Float {
	return self.Runtime.CameraAttributesPhysical_get_far(CameraAttributesPhysical{self})
}
func (self methodsCameraAttributesPhysical) GetFov() Float {
	return self.Runtime.CameraAttributesPhysical_get_fov(CameraAttributesPhysical{self})
}
func (self methodsCameraAttributesPhysical) SetAutoExposureMaxExposureValue(exposure_value_max Float) {
	self.Runtime.CameraAttributesPhysical_set_auto_exposure_max_exposure_value(CameraAttributesPhysical{self}, exposure_value_max)
}
func (self methodsCameraAttributesPhysical) GetAutoExposureMaxExposureValue() Float {
	return self.Runtime.CameraAttributesPhysical_get_auto_exposure_max_exposure_value(CameraAttributesPhysical{self})
}
func (self methodsCameraAttributesPhysical) SetAutoExposureMinExposureValue(exposure_value_min Float) {
	self.Runtime.CameraAttributesPhysical_set_auto_exposure_min_exposure_value(CameraAttributesPhysical{self}, exposure_value_min)
}
func (self methodsCameraAttributesPhysical) GetAutoExposureMinExposureValue() Float {
	return self.Runtime.CameraAttributesPhysical_get_auto_exposure_min_exposure_value(CameraAttributesPhysical{self})
}

type methodsCameraAttributesPractical struct {
	_ [0]*methodsCameraAttributesPractical
	class
}

func (self CameraAttributesPractical) CameraAttributes() CameraAttributes {
	var parent CameraAttributes
	parent.class = self.class
	return parent
}
func (self methodsCameraAttributesPractical) SetDofBlurFarEnabled(enabled bool) {
	self.Runtime.CameraAttributesPractical_set_dof_blur_far_enabled(CameraAttributesPractical{self}, enabled)
}
func (self methodsCameraAttributesPractical) IsDofBlurFarEnabled() bool {
	return self.Runtime.CameraAttributesPractical_is_dof_blur_far_enabled(CameraAttributesPractical{self})
}
func (self methodsCameraAttributesPractical) SetDofBlurFarDistance(distance Float) {
	self.Runtime.CameraAttributesPractical_set_dof_blur_far_distance(CameraAttributesPractical{self}, distance)
}
func (self methodsCameraAttributesPractical) GetDofBlurFarDistance() Float {
	return self.Runtime.CameraAttributesPractical_get_dof_blur_far_distance(CameraAttributesPractical{self})
}
func (self methodsCameraAttributesPractical) SetDofBlurFarTransition(distance Float) {
	self.Runtime.CameraAttributesPractical_set_dof_blur_far_transition(CameraAttributesPractical{self}, distance)
}
func (self methodsCameraAttributesPractical) GetDofBlurFarTransition() Float {
	return self.Runtime.CameraAttributesPractical_get_dof_blur_far_transition(CameraAttributesPractical{self})
}
func (self methodsCameraAttributesPractical) SetDofBlurNearEnabled(enabled bool) {
	self.Runtime.CameraAttributesPractical_set_dof_blur_near_enabled(CameraAttributesPractical{self}, enabled)
}
func (self methodsCameraAttributesPractical) IsDofBlurNearEnabled() bool {
	return self.Runtime.CameraAttributesPractical_is_dof_blur_near_enabled(CameraAttributesPractical{self})
}
func (self methodsCameraAttributesPractical) SetDofBlurNearDistance(distance Float) {
	self.Runtime.CameraAttributesPractical_set_dof_blur_near_distance(CameraAttributesPractical{self}, distance)
}
func (self methodsCameraAttributesPractical) GetDofBlurNearDistance() Float {
	return self.Runtime.CameraAttributesPractical_get_dof_blur_near_distance(CameraAttributesPractical{self})
}
func (self methodsCameraAttributesPractical) SetDofBlurNearTransition(distance Float) {
	self.Runtime.CameraAttributesPractical_set_dof_blur_near_transition(CameraAttributesPractical{self}, distance)
}
func (self methodsCameraAttributesPractical) GetDofBlurNearTransition() Float {
	return self.Runtime.CameraAttributesPractical_get_dof_blur_near_transition(CameraAttributesPractical{self})
}
func (self methodsCameraAttributesPractical) SetDofBlurAmount(amount Float) {
	self.Runtime.CameraAttributesPractical_set_dof_blur_amount(CameraAttributesPractical{self}, amount)
}
func (self methodsCameraAttributesPractical) GetDofBlurAmount() Float {
	return self.Runtime.CameraAttributesPractical_get_dof_blur_amount(CameraAttributesPractical{self})
}
func (self methodsCameraAttributesPractical) SetAutoExposureMaxSensitivity(max_sensitivity Float) {
	self.Runtime.CameraAttributesPractical_set_auto_exposure_max_sensitivity(CameraAttributesPractical{self}, max_sensitivity)
}
func (self methodsCameraAttributesPractical) GetAutoExposureMaxSensitivity() Float {
	return self.Runtime.CameraAttributesPractical_get_auto_exposure_max_sensitivity(CameraAttributesPractical{self})
}
func (self methodsCameraAttributesPractical) SetAutoExposureMinSensitivity(min_sensitivity Float) {
	self.Runtime.CameraAttributesPractical_set_auto_exposure_min_sensitivity(CameraAttributesPractical{self}, min_sensitivity)
}
func (self methodsCameraAttributesPractical) GetAutoExposureMinSensitivity() Float {
	return self.Runtime.CameraAttributesPractical_get_auto_exposure_min_sensitivity(CameraAttributesPractical{self})
}

type methodsCameraFeed struct {
	_ [0]*methodsCameraFeed
	class
}

func (self CameraFeed) RefCounted() RefCounted {
	var parent RefCounted
	parent.class = self.class
	return parent
}
func (self methodsCameraFeed) GetId() int64 {
	return self.Runtime.CameraFeed_get_id(CameraFeed{self})
}
func (self methodsCameraFeed) IsActive() bool {
	return self.Runtime.CameraFeed_is_active(CameraFeed{self})
}
func (self methodsCameraFeed) SetActive(active bool) {
	self.Runtime.CameraFeed_set_active(CameraFeed{self}, active)
}
func (self methodsCameraFeed) GetName() string {
	return self.Runtime.CameraFeed_get_name(CameraFeed{self})
}
func (self methodsCameraFeed) GetPosition() CameraFeedFeedPosition {
	return self.Runtime.CameraFeed_get_position(CameraFeed{self})
}
func (self methodsCameraFeed) GetTransform() Transform2D {
	return self.Runtime.CameraFeed_get_transform(CameraFeed{self})
}
func (self methodsCameraFeed) SetTransform(transform Transform2D) {
	self.Runtime.CameraFeed_set_transform(CameraFeed{self}, transform)
}
func (self methodsCameraFeed) GetDatatype() CameraFeedFeedDataType {
	return self.Runtime.CameraFeed_get_datatype(CameraFeed{self})
}

type methodsCameraServer struct {
	_ [0]*methodsCameraServer
	class
}

func (self CameraServer) Object() Object { var parent Object; parent.class = self.class; return parent }
func (self methodsCameraServer) GetFeed(index int64) CameraFeed {
	return self.Runtime.CameraServer_get_feed(CameraServer{self}, index)
}
func (self methodsCameraServer) GetFeedCount() int64 {
	return self.Runtime.CameraServer_get_feed_count(CameraServer{self})
}
func (self methodsCameraServer) Feeds() ArrayOf[CameraFeed] {
	return self.Runtime.CameraServer_feeds(CameraServer{self})
}
func (self methodsCameraServer) AddFeed(feed CameraFeed) {
	self.Runtime.CameraServer_add_feed(CameraServer{self}, feed)
}
func (self methodsCameraServer) RemoveFeed(feed CameraFeed) {
	self.Runtime.CameraServer_remove_feed(CameraServer{self}, feed)
}

type methodsCameraTexture struct {
	_ [0]*methodsCameraTexture
	class
}

func (self CameraTexture) Texture2D() Texture2D {
	var parent Texture2D
	parent.class = self.class
	return parent
}
func (self methodsCameraTexture) SetCameraFeedId(feed_id int64) {
	self.Runtime.CameraTexture_set_camera_feed_id(CameraTexture{self}, feed_id)
}
func (self methodsCameraTexture) GetCameraFeedId() int64 {
	return self.Runtime.CameraTexture_get_camera_feed_id(CameraTexture{self})
}
func (self methodsCameraTexture) SetWhichFeed(which_feed CameraServerFeedImage) {
	self.Runtime.CameraTexture_set_which_feed(CameraTexture{self}, which_feed)
}
func (self methodsCameraTexture) GetWhichFeed() CameraServerFeedImage {
	return self.Runtime.CameraTexture_get_which_feed(CameraTexture{self})
}
func (self methodsCameraTexture) SetCameraActive(active bool) {
	self.Runtime.CameraTexture_set_camera_active(CameraTexture{self}, active)
}
func (self methodsCameraTexture) GetCameraActive() bool {
	return self.Runtime.CameraTexture_get_camera_active(CameraTexture{self})
}

type methodsCanvasGroup struct {
	_ [0]*methodsCanvasGroup
	class
}

func (self CanvasGroup) Node2D() Node2D { var parent Node2D; parent.class = self.class; return parent }
func (self methodsCanvasGroup) SetFitMargin(fit_margin Float) {
	self.Runtime.CanvasGroup_set_fit_margin(CanvasGroup{self}, fit_margin)
}
func (self methodsCanvasGroup) GetFitMargin() Float {
	return self.Runtime.CanvasGroup_get_fit_margin(CanvasGroup{self})
}
func (self methodsCanvasGroup) SetClearMargin(clear_margin Float) {
	self.Runtime.CanvasGroup_set_clear_margin(CanvasGroup{self}, clear_margin)
}
func (self methodsCanvasGroup) GetClearMargin() Float {
	return self.Runtime.CanvasGroup_get_clear_margin(CanvasGroup{self})
}
func (self methodsCanvasGroup) SetUseMipmaps(use_mipmaps bool) {
	self.Runtime.CanvasGroup_set_use_mipmaps(CanvasGroup{self}, use_mipmaps)
}
func (self methodsCanvasGroup) IsUsingMipmaps() bool {
	return self.Runtime.CanvasGroup_is_using_mipmaps(CanvasGroup{self})
}

type methodsCanvasItem struct {
	_ [0]*methodsCanvasItem
	class
}

func (self CanvasItem) Node() Node { var parent Node; parent.class = self.class; return parent }
func (self methodsCanvasItem) GetCanvasItem() RID {
	return self.Runtime.CanvasItem_get_canvas_item(CanvasItem{self})
}
func (self methodsCanvasItem) SetVisible(visible bool) {
	self.Runtime.CanvasItem_set_visible(CanvasItem{self}, visible)
}
func (self methodsCanvasItem) IsVisible() bool {
	return self.Runtime.CanvasItem_is_visible(CanvasItem{self})
}
func (self methodsCanvasItem) IsVisibleInTree() bool {
	return self.Runtime.CanvasItem_is_visible_in_tree(CanvasItem{self})
}
func (self methodsCanvasItem) Show() {
	self.Runtime.CanvasItem_show(CanvasItem{self})
}
func (self methodsCanvasItem) Hide() {
	self.Runtime.CanvasItem_hide(CanvasItem{self})
}
func (self methodsCanvasItem) QueueRedraw() {
	self.Runtime.CanvasItem_queue_redraw(CanvasItem{self})
}
func (self methodsCanvasItem) MoveToFront() {
	self.Runtime.CanvasItem_move_to_front(CanvasItem{self})
}
func (self methodsCanvasItem) SetAsTopLevel(enable bool) {
	self.Runtime.CanvasItem_set_as_top_level(CanvasItem{self}, enable)
}
func (self methodsCanvasItem) IsSetAsTopLevel() bool {
	return self.Runtime.CanvasItem_is_set_as_top_level(CanvasItem{self})
}
func (self methodsCanvasItem) SetLightMask(light_mask int64) {
	self.Runtime.CanvasItem_set_light_mask(CanvasItem{self}, light_mask)
}
func (self methodsCanvasItem) GetLightMask() int64 {
	return self.Runtime.CanvasItem_get_light_mask(CanvasItem{self})
}
func (self methodsCanvasItem) SetModulate(modulate Color) {
	self.Runtime.CanvasItem_set_modulate(CanvasItem{self}, modulate)
}
func (self methodsCanvasItem) GetModulate() Color {
	return self.Runtime.CanvasItem_get_modulate(CanvasItem{self})
}
func (self methodsCanvasItem) SetSelfModulate(self_modulate Color) {
	self.Runtime.CanvasItem_set_self_modulate(CanvasItem{self}, self_modulate)
}
func (self methodsCanvasItem) GetSelfModulate() Color {
	return self.Runtime.CanvasItem_get_self_modulate(CanvasItem{self})
}
func (self methodsCanvasItem) SetZIndex(z_index int64) {
	self.Runtime.CanvasItem_set_z_index(CanvasItem{self}, z_index)
}
func (self methodsCanvasItem) GetZIndex() int64 {
	return self.Runtime.CanvasItem_get_z_index(CanvasItem{self})
}
func (self methodsCanvasItem) SetZAsRelative(enable bool) {
	self.Runtime.CanvasItem_set_z_as_relative(CanvasItem{self}, enable)
}
func (self methodsCanvasItem) IsZRelative() bool {
	return self.Runtime.CanvasItem_is_z_relative(CanvasItem{self})
}
func (self methodsCanvasItem) SetYSortEnabled(enabled bool) {
	self.Runtime.CanvasItem_set_y_sort_enabled(CanvasItem{self}, enabled)
}
func (self methodsCanvasItem) IsYSortEnabled() bool {
	return self.Runtime.CanvasItem_is_y_sort_enabled(CanvasItem{self})
}
func (self methodsCanvasItem) SetDrawBehindParent(enable bool) {
	self.Runtime.CanvasItem_set_draw_behind_parent(CanvasItem{self}, enable)
}
func (self methodsCanvasItem) IsDrawBehindParentEnabled() bool {
	return self.Runtime.CanvasItem_is_draw_behind_parent_enabled(CanvasItem{self})
}
func (self methodsCanvasItem) DrawLine(from Vector2, to Vector2, color Color, width Float, antialiased bool) {
	self.Runtime.CanvasItem_draw_line(CanvasItem{self}, from, to, color, width, antialiased)
}
func (self methodsCanvasItem) DrawDashedLine(from Vector2, to Vector2, color Color, width Float, dash Float, aligned bool) {
	self.Runtime.CanvasItem_draw_dashed_line(CanvasItem{self}, from, to, color, width, dash, aligned)
}
func (self methodsCanvasItem) DrawPolyline(points PackedVector2Array, color Color, width Float, antialiased bool) {
	self.Runtime.CanvasItem_draw_polyline(CanvasItem{self}, points, color, width, antialiased)
}
func (self methodsCanvasItem) DrawPolylineColors(points PackedVector2Array, colors PackedColorArray, width Float, antialiased bool) {
	self.Runtime.CanvasItem_draw_polyline_colors(CanvasItem{self}, points, colors, width, antialiased)
}
func (self methodsCanvasItem) DrawArc(center Vector2, radius Float, start_angle Float, end_angle Float, point_count int64, color Color, width Float, antialiased bool) {
	self.Runtime.CanvasItem_draw_arc(CanvasItem{self}, center, radius, start_angle, end_angle, point_count, color, width, antialiased)
}
func (self methodsCanvasItem) DrawMultiline(points PackedVector2Array, color Color, width Float) {
	self.Runtime.CanvasItem_draw_multiline(CanvasItem{self}, points, color, width)
}
func (self methodsCanvasItem) DrawMultilineColors(points PackedVector2Array, colors PackedColorArray, width Float) {
	self.Runtime.CanvasItem_draw_multiline_colors(CanvasItem{self}, points, colors, width)
}
func (self methodsCanvasItem) DrawRect(rect Rect2, color Color, filled bool, width Float) {
	self.Runtime.CanvasItem_draw_rect(CanvasItem{self}, rect, color, filled, width)
}
func (self methodsCanvasItem) DrawCircle(position Vector2, radius Float, color Color) {
	self.Runtime.CanvasItem_draw_circle(CanvasItem{self}, position, radius, color)
}
func (self methodsCanvasItem) DrawTexture(texture Texture2D, position Vector2, modulate Color) {
	self.Runtime.CanvasItem_draw_texture(CanvasItem{self}, texture, position, modulate)
}
func (self methodsCanvasItem) DrawTextureRect(texture Texture2D, rect Rect2, tile bool, modulate Color, transpose bool) {
	self.Runtime.CanvasItem_draw_texture_rect(CanvasItem{self}, texture, rect, tile, modulate, transpose)
}
func (self methodsCanvasItem) DrawTextureRectRegion(texture Texture2D, rect Rect2, src_rect Rect2, modulate Color, transpose bool, clip_uv bool) {
	self.Runtime.CanvasItem_draw_texture_rect_region(CanvasItem{self}, texture, rect, src_rect, modulate, transpose, clip_uv)
}
func (self methodsCanvasItem) DrawMsdfTextureRectRegion(texture Texture2D, rect Rect2, src_rect Rect2, modulate Color, outline Float, pixel_range Float, scale Float) {
	self.Runtime.CanvasItem_draw_msdf_texture_rect_region(CanvasItem{self}, texture, rect, src_rect, modulate, outline, pixel_range, scale)
}
func (self methodsCanvasItem) DrawLcdTextureRectRegion(texture Texture2D, rect Rect2, src_rect Rect2, modulate Color) {
	self.Runtime.CanvasItem_draw_lcd_texture_rect_region(CanvasItem{self}, texture, rect, src_rect, modulate)
}
func (self methodsCanvasItem) DrawStyleBox(style_box StyleBox, rect Rect2) {
	self.Runtime.CanvasItem_draw_style_box(CanvasItem{self}, style_box, rect)
}
func (self methodsCanvasItem) DrawPrimitive(points PackedVector2Array, colors PackedColorArray, uvs PackedVector2Array, texture Texture2D) {
	self.Runtime.CanvasItem_draw_primitive(CanvasItem{self}, points, colors, uvs, texture)
}
func (self methodsCanvasItem) DrawPolygon(points PackedVector2Array, colors PackedColorArray, uvs PackedVector2Array, texture Texture2D) {
	self.Runtime.CanvasItem_draw_polygon(CanvasItem{self}, points, colors, uvs, texture)
}
func (self methodsCanvasItem) DrawColoredPolygon(points PackedVector2Array, color Color, uvs PackedVector2Array, texture Texture2D) {
	self.Runtime.CanvasItem_draw_colored_polygon(CanvasItem{self}, points, color, uvs, texture)
}
func (self methodsCanvasItem) DrawString(font Font, pos Vector2, text string, alignment HorizontalAlignment, width Float, font_size int64, modulate Color, justification_flags TextServerJustificationFlag, direction TextServerDirection, orientation TextServerOrientation) {
	self.Runtime.CanvasItem_draw_string(CanvasItem{self}, font, pos, text, alignment, width, font_size, modulate, justification_flags, direction, orientation)
}
func (self methodsCanvasItem) DrawMultilineString(font Font, pos Vector2, text string, alignment HorizontalAlignment, width Float, font_size int64, max_lines int64, modulate Color, brk_flags TextServerLineBreakFlag, justification_flags TextServerJustificationFlag, direction TextServerDirection, orientation TextServerOrientation) {
	self.Runtime.CanvasItem_draw_multiline_string(CanvasItem{self}, font, pos, text, alignment, width, font_size, max_lines, modulate, brk_flags, justification_flags, direction, orientation)
}
func (self methodsCanvasItem) DrawStringOutline(font Font, pos Vector2, text string, alignment HorizontalAlignment, width Float, font_size int64, size int64, modulate Color, justification_flags TextServerJustificationFlag, direction TextServerDirection, orientation TextServerOrientation) {
	self.Runtime.CanvasItem_draw_string_outline(CanvasItem{self}, font, pos, text, alignment, width, font_size, size, modulate, justification_flags, direction, orientation)
}
func (self methodsCanvasItem) DrawMultilineStringOutline(font Font, pos Vector2, text string, alignment HorizontalAlignment, width Float, font_size int64, max_lines int64, size int64, modulate Color, brk_flags TextServerLineBreakFlag, justification_flags TextServerJustificationFlag, direction TextServerDirection, orientation TextServerOrientation) {
	self.Runtime.CanvasItem_draw_multiline_string_outline(CanvasItem{self}, font, pos, text, alignment, width, font_size, max_lines, size, modulate, brk_flags, justification_flags, direction, orientation)
}
func (self methodsCanvasItem) DrawChar(font Font, pos Vector2, char string, font_size int64, modulate Color) {
	self.Runtime.CanvasItem_draw_char(CanvasItem{self}, font, pos, char, font_size, modulate)
}
func (self methodsCanvasItem) DrawCharOutline(font Font, pos Vector2, char string, font_size int64, size int64, modulate Color) {
	self.Runtime.CanvasItem_draw_char_outline(CanvasItem{self}, font, pos, char, font_size, size, modulate)
}
func (self methodsCanvasItem) DrawMesh(mesh Mesh, texture Texture2D, transform Transform2D, modulate Color) {
	self.Runtime.CanvasItem_draw_mesh(CanvasItem{self}, mesh, texture, transform, modulate)
}
func (self methodsCanvasItem) DrawMultimesh(multimesh MultiMesh, texture Texture2D) {
	self.Runtime.CanvasItem_draw_multimesh(CanvasItem{self}, multimesh, texture)
}
func (self methodsCanvasItem) DrawSetTransform(position Vector2, rotation Float, scale Vector2) {
	self.Runtime.CanvasItem_draw_set_transform(CanvasItem{self}, position, rotation, scale)
}
func (self methodsCanvasItem) DrawSetTransformMatrix(xform Transform2D) {
	self.Runtime.CanvasItem_draw_set_transform_matrix(CanvasItem{self}, xform)
}
func (self methodsCanvasItem) DrawAnimationSlice(animation_length Float, slice_begin Float, slice_end Float, offset Float) {
	self.Runtime.CanvasItem_draw_animation_slice(CanvasItem{self}, animation_length, slice_begin, slice_end, offset)
}
func (self methodsCanvasItem) DrawEndAnimation() {
	self.Runtime.CanvasItem_draw_end_animation(CanvasItem{self})
}
func (self methodsCanvasItem) GetTransform() Transform2D {
	return self.Runtime.CanvasItem_get_transform(CanvasItem{self})
}
func (self methodsCanvasItem) GetGlobalTransform() Transform2D {
	return self.Runtime.CanvasItem_get_global_transform(CanvasItem{self})
}
func (self methodsCanvasItem) GetGlobalTransformWithCanvas() Transform2D {
	return self.Runtime.CanvasItem_get_global_transform_with_canvas(CanvasItem{self})
}
func (self methodsCanvasItem) GetViewportTransform() Transform2D {
	return self.Runtime.CanvasItem_get_viewport_transform(CanvasItem{self})
}
func (self methodsCanvasItem) GetViewportRect() Rect2 {
	return self.Runtime.CanvasItem_get_viewport_rect(CanvasItem{self})
}
func (self methodsCanvasItem) GetCanvasTransform() Transform2D {
	return self.Runtime.CanvasItem_get_canvas_transform(CanvasItem{self})
}
func (self methodsCanvasItem) GetScreenTransform() Transform2D {
	return self.Runtime.CanvasItem_get_screen_transform(CanvasItem{self})
}
func (self methodsCanvasItem) GetLocalMousePosition() Vector2 {
	return self.Runtime.CanvasItem_get_local_mouse_position(CanvasItem{self})
}
func (self methodsCanvasItem) GetGlobalMousePosition() Vector2 {
	return self.Runtime.CanvasItem_get_global_mouse_position(CanvasItem{self})
}
func (self methodsCanvasItem) GetCanvas() RID {
	return self.Runtime.CanvasItem_get_canvas(CanvasItem{self})
}
func (self methodsCanvasItem) GetWorld2d() World2D {
	return self.Runtime.CanvasItem_get_world_2d(CanvasItem{self})
}
func (self methodsCanvasItem) SetMaterial(material Material) {
	self.Runtime.CanvasItem_set_material(CanvasItem{self}, material)
}
func (self methodsCanvasItem) GetMaterial() Material {
	return self.Runtime.CanvasItem_get_material(CanvasItem{self})
}
func (self methodsCanvasItem) SetUseParentMaterial(enable bool) {
	self.Runtime.CanvasItem_set_use_parent_material(CanvasItem{self}, enable)
}
func (self methodsCanvasItem) GetUseParentMaterial() bool {
	return self.Runtime.CanvasItem_get_use_parent_material(CanvasItem{self})
}
func (self methodsCanvasItem) SetNotifyLocalTransform(enable bool) {
	self.Runtime.CanvasItem_set_notify_local_transform(CanvasItem{self}, enable)
}
func (self methodsCanvasItem) IsLocalTransformNotificationEnabled() bool {
	return self.Runtime.CanvasItem_is_local_transform_notification_enabled(CanvasItem{self})
}
func (self methodsCanvasItem) SetNotifyTransform(enable bool) {
	self.Runtime.CanvasItem_set_notify_transform(CanvasItem{self}, enable)
}
func (self methodsCanvasItem) IsTransformNotificationEnabled() bool {
	return self.Runtime.CanvasItem_is_transform_notification_enabled(CanvasItem{self})
}
func (self methodsCanvasItem) ForceUpdateTransform() {
	self.Runtime.CanvasItem_force_update_transform(CanvasItem{self})
}
func (self methodsCanvasItem) MakeCanvasPositionLocal(screen_point Vector2) Vector2 {
	return self.Runtime.CanvasItem_make_canvas_position_local(CanvasItem{self}, screen_point)
}
func (self methodsCanvasItem) MakeInputLocal(event InputEvent) InputEvent {
	return self.Runtime.CanvasItem_make_input_local(CanvasItem{self}, event)
}
func (self methodsCanvasItem) SetVisibilityLayer(layer int64) {
	self.Runtime.CanvasItem_set_visibility_layer(CanvasItem{self}, layer)
}
func (self methodsCanvasItem) GetVisibilityLayer() int64 {
	return self.Runtime.CanvasItem_get_visibility_layer(CanvasItem{self})
}
func (self methodsCanvasItem) SetVisibilityLayerBit(layer int64, enabled bool) {
	self.Runtime.CanvasItem_set_visibility_layer_bit(CanvasItem{self}, layer, enabled)
}
func (self methodsCanvasItem) GetVisibilityLayerBit(layer int64) bool {
	return self.Runtime.CanvasItem_get_visibility_layer_bit(CanvasItem{self}, layer)
}
func (self methodsCanvasItem) SetTextureFilter(mode CanvasItemTextureFilter) {
	self.Runtime.CanvasItem_set_texture_filter(CanvasItem{self}, mode)
}
func (self methodsCanvasItem) GetTextureFilter() CanvasItemTextureFilter {
	return self.Runtime.CanvasItem_get_texture_filter(CanvasItem{self})
}
func (self methodsCanvasItem) SetTextureRepeat(mode CanvasItemTextureRepeat) {
	self.Runtime.CanvasItem_set_texture_repeat(CanvasItem{self}, mode)
}
func (self methodsCanvasItem) GetTextureRepeat() CanvasItemTextureRepeat {
	return self.Runtime.CanvasItem_get_texture_repeat(CanvasItem{self})
}
func (self methodsCanvasItem) SetClipChildrenMode(mode CanvasItemClipChildrenMode) {
	self.Runtime.CanvasItem_set_clip_children_mode(CanvasItem{self}, mode)
}
func (self methodsCanvasItem) GetClipChildrenMode() CanvasItemClipChildrenMode {
	return self.Runtime.CanvasItem_get_clip_children_mode(CanvasItem{self})
}

type methodsCanvasItemMaterial struct {
	_ [0]*methodsCanvasItemMaterial
	class
}

func (self CanvasItemMaterial) Material() Material {
	var parent Material
	parent.class = self.class
	return parent
}
func (self methodsCanvasItemMaterial) SetBlendMode(blend_mode CanvasItemMaterialBlendMode) {
	self.Runtime.CanvasItemMaterial_set_blend_mode(CanvasItemMaterial{self}, blend_mode)
}
func (self methodsCanvasItemMaterial) GetBlendMode() CanvasItemMaterialBlendMode {
	return self.Runtime.CanvasItemMaterial_get_blend_mode(CanvasItemMaterial{self})
}
func (self methodsCanvasItemMaterial) SetLightMode(light_mode CanvasItemMaterialLightMode) {
	self.Runtime.CanvasItemMaterial_set_light_mode(CanvasItemMaterial{self}, light_mode)
}
func (self methodsCanvasItemMaterial) GetLightMode() CanvasItemMaterialLightMode {
	return self.Runtime.CanvasItemMaterial_get_light_mode(CanvasItemMaterial{self})
}
func (self methodsCanvasItemMaterial) SetParticlesAnimation(particles_anim bool) {
	self.Runtime.CanvasItemMaterial_set_particles_animation(CanvasItemMaterial{self}, particles_anim)
}
func (self methodsCanvasItemMaterial) GetParticlesAnimation() bool {
	return self.Runtime.CanvasItemMaterial_get_particles_animation(CanvasItemMaterial{self})
}
func (self methodsCanvasItemMaterial) SetParticlesAnimHFrames(frames int64) {
	self.Runtime.CanvasItemMaterial_set_particles_anim_h_frames(CanvasItemMaterial{self}, frames)
}
func (self methodsCanvasItemMaterial) GetParticlesAnimHFrames() int64 {
	return self.Runtime.CanvasItemMaterial_get_particles_anim_h_frames(CanvasItemMaterial{self})
}
func (self methodsCanvasItemMaterial) SetParticlesAnimVFrames(frames int64) {
	self.Runtime.CanvasItemMaterial_set_particles_anim_v_frames(CanvasItemMaterial{self}, frames)
}
func (self methodsCanvasItemMaterial) GetParticlesAnimVFrames() int64 {
	return self.Runtime.CanvasItemMaterial_get_particles_anim_v_frames(CanvasItemMaterial{self})
}
func (self methodsCanvasItemMaterial) SetParticlesAnimLoop(loop bool) {
	self.Runtime.CanvasItemMaterial_set_particles_anim_loop(CanvasItemMaterial{self}, loop)
}
func (self methodsCanvasItemMaterial) GetParticlesAnimLoop() bool {
	return self.Runtime.CanvasItemMaterial_get_particles_anim_loop(CanvasItemMaterial{self})
}

type methodsCanvasLayer struct {
	_ [0]*methodsCanvasLayer
	class
}

func (self CanvasLayer) Node() Node { var parent Node; parent.class = self.class; return parent }
func (self methodsCanvasLayer) SetLayer(layer int64) {
	self.Runtime.CanvasLayer_set_layer(CanvasLayer{self}, layer)
}
func (self methodsCanvasLayer) GetLayer() int64 {
	return self.Runtime.CanvasLayer_get_layer(CanvasLayer{self})
}
func (self methodsCanvasLayer) SetVisible(visible bool) {
	self.Runtime.CanvasLayer_set_visible(CanvasLayer{self}, visible)
}
func (self methodsCanvasLayer) IsVisible() bool {
	return self.Runtime.CanvasLayer_is_visible(CanvasLayer{self})
}
func (self methodsCanvasLayer) Show() {
	self.Runtime.CanvasLayer_show(CanvasLayer{self})
}
func (self methodsCanvasLayer) Hide() {
	self.Runtime.CanvasLayer_hide(CanvasLayer{self})
}
func (self methodsCanvasLayer) SetTransform(transform Transform2D) {
	self.Runtime.CanvasLayer_set_transform(CanvasLayer{self}, transform)
}
func (self methodsCanvasLayer) GetTransform() Transform2D {
	return self.Runtime.CanvasLayer_get_transform(CanvasLayer{self})
}
func (self methodsCanvasLayer) GetFinalTransform() Transform2D {
	return self.Runtime.CanvasLayer_get_final_transform(CanvasLayer{self})
}
func (self methodsCanvasLayer) SetOffset(offset Vector2) {
	self.Runtime.CanvasLayer_set_offset(CanvasLayer{self}, offset)
}
func (self methodsCanvasLayer) GetOffset() Vector2 {
	return self.Runtime.CanvasLayer_get_offset(CanvasLayer{self})
}
func (self methodsCanvasLayer) SetRotation(radians Float) {
	self.Runtime.CanvasLayer_set_rotation(CanvasLayer{self}, radians)
}
func (self methodsCanvasLayer) GetRotation() Float {
	return self.Runtime.CanvasLayer_get_rotation(CanvasLayer{self})
}
func (self methodsCanvasLayer) SetScale(scale Vector2) {
	self.Runtime.CanvasLayer_set_scale(CanvasLayer{self}, scale)
}
func (self methodsCanvasLayer) GetScale() Vector2 {
	return self.Runtime.CanvasLayer_get_scale(CanvasLayer{self})
}
func (self methodsCanvasLayer) SetFollowViewport(enable bool) {
	self.Runtime.CanvasLayer_set_follow_viewport(CanvasLayer{self}, enable)
}
func (self methodsCanvasLayer) IsFollowingViewport() bool {
	return self.Runtime.CanvasLayer_is_following_viewport(CanvasLayer{self})
}
func (self methodsCanvasLayer) SetFollowViewportScale(scale Float) {
	self.Runtime.CanvasLayer_set_follow_viewport_scale(CanvasLayer{self}, scale)
}
func (self methodsCanvasLayer) GetFollowViewportScale() Float {
	return self.Runtime.CanvasLayer_get_follow_viewport_scale(CanvasLayer{self})
}
func (self methodsCanvasLayer) SetCustomViewport(viewport Node) {
	self.Runtime.CanvasLayer_set_custom_viewport(CanvasLayer{self}, viewport)
}
func (self methodsCanvasLayer) GetCustomViewport() Node {
	return self.Runtime.CanvasLayer_get_custom_viewport(CanvasLayer{self})
}
func (self methodsCanvasLayer) GetCanvas() RID {
	return self.Runtime.CanvasLayer_get_canvas(CanvasLayer{self})
}

type methodsCanvasModulate struct {
	_ [0]*methodsCanvasModulate
	class
}

func (self CanvasModulate) Node2D() Node2D {
	var parent Node2D
	parent.class = self.class
	return parent
}
func (self methodsCanvasModulate) SetColor(color Color) {
	self.Runtime.CanvasModulate_set_color(CanvasModulate{self}, color)
}
func (self methodsCanvasModulate) GetColor() Color {
	return self.Runtime.CanvasModulate_get_color(CanvasModulate{self})
}

type methodsCanvasTexture struct {
	_ [0]*methodsCanvasTexture
	class
}

func (self CanvasTexture) Texture2D() Texture2D {
	var parent Texture2D
	parent.class = self.class
	return parent
}
func (self methodsCanvasTexture) SetDiffuseTexture(texture Texture2D) {
	self.Runtime.CanvasTexture_set_diffuse_texture(CanvasTexture{self}, texture)
}
func (self methodsCanvasTexture) GetDiffuseTexture() Texture2D {
	return self.Runtime.CanvasTexture_get_diffuse_texture(CanvasTexture{self})
}
func (self methodsCanvasTexture) SetNormalTexture(texture Texture2D) {
	self.Runtime.CanvasTexture_set_normal_texture(CanvasTexture{self}, texture)
}
func (self methodsCanvasTexture) GetNormalTexture() Texture2D {
	return self.Runtime.CanvasTexture_get_normal_texture(CanvasTexture{self})
}
func (self methodsCanvasTexture) SetSpecularTexture(texture Texture2D) {
	self.Runtime.CanvasTexture_set_specular_texture(CanvasTexture{self}, texture)
}
func (self methodsCanvasTexture) GetSpecularTexture() Texture2D {
	return self.Runtime.CanvasTexture_get_specular_texture(CanvasTexture{self})
}
func (self methodsCanvasTexture) SetSpecularColor(color Color) {
	self.Runtime.CanvasTexture_set_specular_color(CanvasTexture{self}, color)
}
func (self methodsCanvasTexture) GetSpecularColor() Color {
	return self.Runtime.CanvasTexture_get_specular_color(CanvasTexture{self})
}
func (self methodsCanvasTexture) SetSpecularShininess(shininess Float) {
	self.Runtime.CanvasTexture_set_specular_shininess(CanvasTexture{self}, shininess)
}
func (self methodsCanvasTexture) GetSpecularShininess() Float {
	return self.Runtime.CanvasTexture_get_specular_shininess(CanvasTexture{self})
}
func (self methodsCanvasTexture) SetTextureFilter(filter CanvasItemTextureFilter) {
	self.Runtime.CanvasTexture_set_texture_filter(CanvasTexture{self}, filter)
}
func (self methodsCanvasTexture) GetTextureFilter() CanvasItemTextureFilter {
	return self.Runtime.CanvasTexture_get_texture_filter(CanvasTexture{self})
}
func (self methodsCanvasTexture) SetTextureRepeat(repeat CanvasItemTextureRepeat) {
	self.Runtime.CanvasTexture_set_texture_repeat(CanvasTexture{self}, repeat)
}
func (self methodsCanvasTexture) GetTextureRepeat() CanvasItemTextureRepeat {
	return self.Runtime.CanvasTexture_get_texture_repeat(CanvasTexture{self})
}

type methodsCapsuleMesh struct {
	_ [0]*methodsCapsuleMesh
	class
}

func (self CapsuleMesh) PrimitiveMesh() PrimitiveMesh {
	var parent PrimitiveMesh
	parent.class = self.class
	return parent
}
func (self methodsCapsuleMesh) SetRadius(radius Float) {
	self.Runtime.CapsuleMesh_set_radius(CapsuleMesh{self}, radius)
}
func (self methodsCapsuleMesh) GetRadius() Float {
	return self.Runtime.CapsuleMesh_get_radius(CapsuleMesh{self})
}
func (self methodsCapsuleMesh) SetHeight(height Float) {
	self.Runtime.CapsuleMesh_set_height(CapsuleMesh{self}, height)
}
func (self methodsCapsuleMesh) GetHeight() Float {
	return self.Runtime.CapsuleMesh_get_height(CapsuleMesh{self})
}
func (self methodsCapsuleMesh) SetRadialSegments(segments int64) {
	self.Runtime.CapsuleMesh_set_radial_segments(CapsuleMesh{self}, segments)
}
func (self methodsCapsuleMesh) GetRadialSegments() int64 {
	return self.Runtime.CapsuleMesh_get_radial_segments(CapsuleMesh{self})
}
func (self methodsCapsuleMesh) SetRings(rings int64) {
	self.Runtime.CapsuleMesh_set_rings(CapsuleMesh{self}, rings)
}
func (self methodsCapsuleMesh) GetRings() int64 {
	return self.Runtime.CapsuleMesh_get_rings(CapsuleMesh{self})
}

type methodsCapsuleShape2D struct {
	_ [0]*methodsCapsuleShape2D
	class
}

func (self CapsuleShape2D) Shape2D() Shape2D {
	var parent Shape2D
	parent.class = self.class
	return parent
}
func (self methodsCapsuleShape2D) SetRadius(radius Float) {
	self.Runtime.CapsuleShape2D_set_radius(CapsuleShape2D{self}, radius)
}
func (self methodsCapsuleShape2D) GetRadius() Float {
	return self.Runtime.CapsuleShape2D_get_radius(CapsuleShape2D{self})
}
func (self methodsCapsuleShape2D) SetHeight(height Float) {
	self.Runtime.CapsuleShape2D_set_height(CapsuleShape2D{self}, height)
}
func (self methodsCapsuleShape2D) GetHeight() Float {
	return self.Runtime.CapsuleShape2D_get_height(CapsuleShape2D{self})
}

type methodsCapsuleShape3D struct {
	_ [0]*methodsCapsuleShape3D
	class
}

func (self CapsuleShape3D) Shape3D() Shape3D {
	var parent Shape3D
	parent.class = self.class
	return parent
}
func (self methodsCapsuleShape3D) SetRadius(radius Float) {
	self.Runtime.CapsuleShape3D_set_radius(CapsuleShape3D{self}, radius)
}
func (self methodsCapsuleShape3D) GetRadius() Float {
	return self.Runtime.CapsuleShape3D_get_radius(CapsuleShape3D{self})
}
func (self methodsCapsuleShape3D) SetHeight(height Float) {
	self.Runtime.CapsuleShape3D_set_height(CapsuleShape3D{self}, height)
}
func (self methodsCapsuleShape3D) GetHeight() Float {
	return self.Runtime.CapsuleShape3D_get_height(CapsuleShape3D{self})
}

type methodsCenterContainer struct {
	_ [0]*methodsCenterContainer
	class
}

func (self CenterContainer) Container() Container {
	var parent Container
	parent.class = self.class
	return parent
}
func (self methodsCenterContainer) SetUseTopLeft(enable bool) {
	self.Runtime.CenterContainer_set_use_top_left(CenterContainer{self}, enable)
}
func (self methodsCenterContainer) IsUsingTopLeft() bool {
	return self.Runtime.CenterContainer_is_using_top_left(CenterContainer{self})
}

type methodsCharFXTransform struct {
	_ [0]*methodsCharFXTransform
	class
}

func (self CharFXTransform) RefCounted() RefCounted {
	var parent RefCounted
	parent.class = self.class
	return parent
}
func (self methodsCharFXTransform) GetTransform() Transform2D {
	return self.Runtime.CharFXTransform_get_transform(CharFXTransform{self})
}
func (self methodsCharFXTransform) SetTransform(transform Transform2D) {
	self.Runtime.CharFXTransform_set_transform(CharFXTransform{self}, transform)
}
func (self methodsCharFXTransform) GetRange() Vector2i {
	return self.Runtime.CharFXTransform_get_range(CharFXTransform{self})
}
func (self methodsCharFXTransform) SetRange(arange Vector2i) {
	self.Runtime.CharFXTransform_set_range(CharFXTransform{self}, arange)
}
func (self methodsCharFXTransform) GetElapsedTime() Float {
	return self.Runtime.CharFXTransform_get_elapsed_time(CharFXTransform{self})
}
func (self methodsCharFXTransform) SetElapsedTime(time Float) {
	self.Runtime.CharFXTransform_set_elapsed_time(CharFXTransform{self}, time)
}
func (self methodsCharFXTransform) IsVisible() bool {
	return self.Runtime.CharFXTransform_is_visible(CharFXTransform{self})
}
func (self methodsCharFXTransform) SetVisibility(visibility bool) {
	self.Runtime.CharFXTransform_set_visibility(CharFXTransform{self}, visibility)
}
func (self methodsCharFXTransform) IsOutline() bool {
	return self.Runtime.CharFXTransform_is_outline(CharFXTransform{self})
}
func (self methodsCharFXTransform) SetOutline(outline bool) {
	self.Runtime.CharFXTransform_set_outline(CharFXTransform{self}, outline)
}
func (self methodsCharFXTransform) GetOffset() Vector2 {
	return self.Runtime.CharFXTransform_get_offset(CharFXTransform{self})
}
func (self methodsCharFXTransform) SetOffset(offset Vector2) {
	self.Runtime.CharFXTransform_set_offset(CharFXTransform{self}, offset)
}
func (self methodsCharFXTransform) GetColor() Color {
	return self.Runtime.CharFXTransform_get_color(CharFXTransform{self})
}
func (self methodsCharFXTransform) SetColor(color Color) {
	self.Runtime.CharFXTransform_set_color(CharFXTransform{self}, color)
}
func (self methodsCharFXTransform) GetEnvironment() Dictionary {
	return self.Runtime.CharFXTransform_get_environment(CharFXTransform{self})
}
func (self methodsCharFXTransform) SetEnvironment(environment Dictionary) {
	self.Runtime.CharFXTransform_set_environment(CharFXTransform{self}, environment)
}
func (self methodsCharFXTransform) GetGlyphIndex() int64 {
	return self.Runtime.CharFXTransform_get_glyph_index(CharFXTransform{self})
}
func (self methodsCharFXTransform) SetGlyphIndex(glyph_index int64) {
	self.Runtime.CharFXTransform_set_glyph_index(CharFXTransform{self}, glyph_index)
}
func (self methodsCharFXTransform) GetRelativeIndex() int64 {
	return self.Runtime.CharFXTransform_get_relative_index(CharFXTransform{self})
}
func (self methodsCharFXTransform) SetRelativeIndex(relative_index int64) {
	self.Runtime.CharFXTransform_set_relative_index(CharFXTransform{self}, relative_index)
}
func (self methodsCharFXTransform) GetGlyphCount() int64 {
	return self.Runtime.CharFXTransform_get_glyph_count(CharFXTransform{self})
}
func (self methodsCharFXTransform) SetGlyphCount(glyph_count int64) {
	self.Runtime.CharFXTransform_set_glyph_count(CharFXTransform{self}, glyph_count)
}
func (self methodsCharFXTransform) GetGlyphFlags() int64 {
	return self.Runtime.CharFXTransform_get_glyph_flags(CharFXTransform{self})
}
func (self methodsCharFXTransform) SetGlyphFlags(glyph_flags int64) {
	self.Runtime.CharFXTransform_set_glyph_flags(CharFXTransform{self}, glyph_flags)
}
func (self methodsCharFXTransform) GetFont() RID {
	return self.Runtime.CharFXTransform_get_font(CharFXTransform{self})
}
func (self methodsCharFXTransform) SetFont(font RID) {
	self.Runtime.CharFXTransform_set_font(CharFXTransform{self}, font)
}

type methodsCharacterBody2D struct {
	_ [0]*methodsCharacterBody2D
	class
}

func (self CharacterBody2D) PhysicsBody2D() PhysicsBody2D {
	var parent PhysicsBody2D
	parent.class = self.class
	return parent
}
func (self methodsCharacterBody2D) MoveAndSlide() bool {
	return self.Runtime.CharacterBody2D_move_and_slide(CharacterBody2D{self})
}
func (self methodsCharacterBody2D) ApplyFloorSnap() {
	self.Runtime.CharacterBody2D_apply_floor_snap(CharacterBody2D{self})
}
func (self methodsCharacterBody2D) SetVelocity(velocity Vector2) {
	self.Runtime.CharacterBody2D_set_velocity(CharacterBody2D{self}, velocity)
}
func (self methodsCharacterBody2D) GetVelocity() Vector2 {
	return self.Runtime.CharacterBody2D_get_velocity(CharacterBody2D{self})
}
func (self methodsCharacterBody2D) SetSafeMargin(margin Float) {
	self.Runtime.CharacterBody2D_set_safe_margin(CharacterBody2D{self}, margin)
}
func (self methodsCharacterBody2D) GetSafeMargin() Float {
	return self.Runtime.CharacterBody2D_get_safe_margin(CharacterBody2D{self})
}
func (self methodsCharacterBody2D) IsFloorStopOnSlopeEnabled() bool {
	return self.Runtime.CharacterBody2D_is_floor_stop_on_slope_enabled(CharacterBody2D{self})
}
func (self methodsCharacterBody2D) SetFloorStopOnSlopeEnabled(enabled bool) {
	self.Runtime.CharacterBody2D_set_floor_stop_on_slope_enabled(CharacterBody2D{self}, enabled)
}
func (self methodsCharacterBody2D) SetFloorConstantSpeedEnabled(enabled bool) {
	self.Runtime.CharacterBody2D_set_floor_constant_speed_enabled(CharacterBody2D{self}, enabled)
}
func (self methodsCharacterBody2D) IsFloorConstantSpeedEnabled() bool {
	return self.Runtime.CharacterBody2D_is_floor_constant_speed_enabled(CharacterBody2D{self})
}
func (self methodsCharacterBody2D) SetFloorBlockOnWallEnabled(enabled bool) {
	self.Runtime.CharacterBody2D_set_floor_block_on_wall_enabled(CharacterBody2D{self}, enabled)
}
func (self methodsCharacterBody2D) IsFloorBlockOnWallEnabled() bool {
	return self.Runtime.CharacterBody2D_is_floor_block_on_wall_enabled(CharacterBody2D{self})
}
func (self methodsCharacterBody2D) SetSlideOnCeilingEnabled(enabled bool) {
	self.Runtime.CharacterBody2D_set_slide_on_ceiling_enabled(CharacterBody2D{self}, enabled)
}
func (self methodsCharacterBody2D) IsSlideOnCeilingEnabled() bool {
	return self.Runtime.CharacterBody2D_is_slide_on_ceiling_enabled(CharacterBody2D{self})
}
func (self methodsCharacterBody2D) SetPlatformFloorLayers(exclude_layer int64) {
	self.Runtime.CharacterBody2D_set_platform_floor_layers(CharacterBody2D{self}, exclude_layer)
}
func (self methodsCharacterBody2D) GetPlatformFloorLayers() int64 {
	return self.Runtime.CharacterBody2D_get_platform_floor_layers(CharacterBody2D{self})
}
func (self methodsCharacterBody2D) SetPlatformWallLayers(exclude_layer int64) {
	self.Runtime.CharacterBody2D_set_platform_wall_layers(CharacterBody2D{self}, exclude_layer)
}
func (self methodsCharacterBody2D) GetPlatformWallLayers() int64 {
	return self.Runtime.CharacterBody2D_get_platform_wall_layers(CharacterBody2D{self})
}
func (self methodsCharacterBody2D) GetMaxSlides() int64 {
	return self.Runtime.CharacterBody2D_get_max_slides(CharacterBody2D{self})
}
func (self methodsCharacterBody2D) SetMaxSlides(max_slides int64) {
	self.Runtime.CharacterBody2D_set_max_slides(CharacterBody2D{self}, max_slides)
}
func (self methodsCharacterBody2D) GetFloorMaxAngle() Float {
	return self.Runtime.CharacterBody2D_get_floor_max_angle(CharacterBody2D{self})
}
func (self methodsCharacterBody2D) SetFloorMaxAngle(radians Float) {
	self.Runtime.CharacterBody2D_set_floor_max_angle(CharacterBody2D{self}, radians)
}
func (self methodsCharacterBody2D) GetFloorSnapLength() Float {
	return self.Runtime.CharacterBody2D_get_floor_snap_length(CharacterBody2D{self})
}
func (self methodsCharacterBody2D) SetFloorSnapLength(floor_snap_length Float) {
	self.Runtime.CharacterBody2D_set_floor_snap_length(CharacterBody2D{self}, floor_snap_length)
}
func (self methodsCharacterBody2D) GetWallMinSlideAngle() Float {
	return self.Runtime.CharacterBody2D_get_wall_min_slide_angle(CharacterBody2D{self})
}
func (self methodsCharacterBody2D) SetWallMinSlideAngle(radians Float) {
	self.Runtime.CharacterBody2D_set_wall_min_slide_angle(CharacterBody2D{self}, radians)
}
func (self methodsCharacterBody2D) GetUpDirection() Vector2 {
	return self.Runtime.CharacterBody2D_get_up_direction(CharacterBody2D{self})
}
func (self methodsCharacterBody2D) SetUpDirection(up_direction Vector2) {
	self.Runtime.CharacterBody2D_set_up_direction(CharacterBody2D{self}, up_direction)
}
func (self methodsCharacterBody2D) SetMotionMode(mode CharacterBody2DMotionMode) {
	self.Runtime.CharacterBody2D_set_motion_mode(CharacterBody2D{self}, mode)
}
func (self methodsCharacterBody2D) GetMotionMode() CharacterBody2DMotionMode {
	return self.Runtime.CharacterBody2D_get_motion_mode(CharacterBody2D{self})
}
func (self methodsCharacterBody2D) SetPlatformOnLeave(on_leave_apply_velocity CharacterBody2DPlatformOnLeave) {
	self.Runtime.CharacterBody2D_set_platform_on_leave(CharacterBody2D{self}, on_leave_apply_velocity)
}
func (self methodsCharacterBody2D) GetPlatformOnLeave() CharacterBody2DPlatformOnLeave {
	return self.Runtime.CharacterBody2D_get_platform_on_leave(CharacterBody2D{self})
}
func (self methodsCharacterBody2D) IsOnFloor() bool {
	return self.Runtime.CharacterBody2D_is_on_floor(CharacterBody2D{self})
}
func (self methodsCharacterBody2D) IsOnFloorOnly() bool {
	return self.Runtime.CharacterBody2D_is_on_floor_only(CharacterBody2D{self})
}
func (self methodsCharacterBody2D) IsOnCeiling() bool {
	return self.Runtime.CharacterBody2D_is_on_ceiling(CharacterBody2D{self})
}
func (self methodsCharacterBody2D) IsOnCeilingOnly() bool {
	return self.Runtime.CharacterBody2D_is_on_ceiling_only(CharacterBody2D{self})
}
func (self methodsCharacterBody2D) IsOnWall() bool {
	return self.Runtime.CharacterBody2D_is_on_wall(CharacterBody2D{self})
}
func (self methodsCharacterBody2D) IsOnWallOnly() bool {
	return self.Runtime.CharacterBody2D_is_on_wall_only(CharacterBody2D{self})
}
func (self methodsCharacterBody2D) GetFloorNormal() Vector2 {
	return self.Runtime.CharacterBody2D_get_floor_normal(CharacterBody2D{self})
}
func (self methodsCharacterBody2D) GetWallNormal() Vector2 {
	return self.Runtime.CharacterBody2D_get_wall_normal(CharacterBody2D{self})
}
func (self methodsCharacterBody2D) GetLastMotion() Vector2 {
	return self.Runtime.CharacterBody2D_get_last_motion(CharacterBody2D{self})
}
func (self methodsCharacterBody2D) GetPositionDelta() Vector2 {
	return self.Runtime.CharacterBody2D_get_position_delta(CharacterBody2D{self})
}
func (self methodsCharacterBody2D) GetRealVelocity() Vector2 {
	return self.Runtime.CharacterBody2D_get_real_velocity(CharacterBody2D{self})
}
func (self methodsCharacterBody2D) GetFloorAngle(up_direction Vector2) Float {
	return self.Runtime.CharacterBody2D_get_floor_angle(CharacterBody2D{self}, up_direction)
}
func (self methodsCharacterBody2D) GetPlatformVelocity() Vector2 {
	return self.Runtime.CharacterBody2D_get_platform_velocity(CharacterBody2D{self})
}
func (self methodsCharacterBody2D) GetSlideCollisionCount() int64 {
	return self.Runtime.CharacterBody2D_get_slide_collision_count(CharacterBody2D{self})
}
func (self methodsCharacterBody2D) GetSlideCollision(slide_idx int64) KinematicCollision2D {
	return self.Runtime.CharacterBody2D_get_slide_collision(CharacterBody2D{self}, slide_idx)
}
func (self methodsCharacterBody2D) GetLastSlideCollision() KinematicCollision2D {
	return self.Runtime.CharacterBody2D_get_last_slide_collision(CharacterBody2D{self})
}

type methodsCharacterBody3D struct {
	_ [0]*methodsCharacterBody3D
	class
}

func (self CharacterBody3D) PhysicsBody3D() PhysicsBody3D {
	var parent PhysicsBody3D
	parent.class = self.class
	return parent
}
func (self methodsCharacterBody3D) MoveAndSlide() bool {
	return self.Runtime.CharacterBody3D_move_and_slide(CharacterBody3D{self})
}
func (self methodsCharacterBody3D) ApplyFloorSnap() {
	self.Runtime.CharacterBody3D_apply_floor_snap(CharacterBody3D{self})
}
func (self methodsCharacterBody3D) SetVelocity(velocity Vector3) {
	self.Runtime.CharacterBody3D_set_velocity(CharacterBody3D{self}, velocity)
}
func (self methodsCharacterBody3D) GetVelocity() Vector3 {
	return self.Runtime.CharacterBody3D_get_velocity(CharacterBody3D{self})
}
func (self methodsCharacterBody3D) SetSafeMargin(margin Float) {
	self.Runtime.CharacterBody3D_set_safe_margin(CharacterBody3D{self}, margin)
}
func (self methodsCharacterBody3D) GetSafeMargin() Float {
	return self.Runtime.CharacterBody3D_get_safe_margin(CharacterBody3D{self})
}
func (self methodsCharacterBody3D) IsFloorStopOnSlopeEnabled() bool {
	return self.Runtime.CharacterBody3D_is_floor_stop_on_slope_enabled(CharacterBody3D{self})
}
func (self methodsCharacterBody3D) SetFloorStopOnSlopeEnabled(enabled bool) {
	self.Runtime.CharacterBody3D_set_floor_stop_on_slope_enabled(CharacterBody3D{self}, enabled)
}
func (self methodsCharacterBody3D) SetFloorConstantSpeedEnabled(enabled bool) {
	self.Runtime.CharacterBody3D_set_floor_constant_speed_enabled(CharacterBody3D{self}, enabled)
}
func (self methodsCharacterBody3D) IsFloorConstantSpeedEnabled() bool {
	return self.Runtime.CharacterBody3D_is_floor_constant_speed_enabled(CharacterBody3D{self})
}
func (self methodsCharacterBody3D) SetFloorBlockOnWallEnabled(enabled bool) {
	self.Runtime.CharacterBody3D_set_floor_block_on_wall_enabled(CharacterBody3D{self}, enabled)
}
func (self methodsCharacterBody3D) IsFloorBlockOnWallEnabled() bool {
	return self.Runtime.CharacterBody3D_is_floor_block_on_wall_enabled(CharacterBody3D{self})
}
func (self methodsCharacterBody3D) SetSlideOnCeilingEnabled(enabled bool) {
	self.Runtime.CharacterBody3D_set_slide_on_ceiling_enabled(CharacterBody3D{self}, enabled)
}
func (self methodsCharacterBody3D) IsSlideOnCeilingEnabled() bool {
	return self.Runtime.CharacterBody3D_is_slide_on_ceiling_enabled(CharacterBody3D{self})
}
func (self methodsCharacterBody3D) SetPlatformFloorLayers(exclude_layer int64) {
	self.Runtime.CharacterBody3D_set_platform_floor_layers(CharacterBody3D{self}, exclude_layer)
}
func (self methodsCharacterBody3D) GetPlatformFloorLayers() int64 {
	return self.Runtime.CharacterBody3D_get_platform_floor_layers(CharacterBody3D{self})
}
func (self methodsCharacterBody3D) SetPlatformWallLayers(exclude_layer int64) {
	self.Runtime.CharacterBody3D_set_platform_wall_layers(CharacterBody3D{self}, exclude_layer)
}
func (self methodsCharacterBody3D) GetPlatformWallLayers() int64 {
	return self.Runtime.CharacterBody3D_get_platform_wall_layers(CharacterBody3D{self})
}
func (self methodsCharacterBody3D) GetMaxSlides() int64 {
	return self.Runtime.CharacterBody3D_get_max_slides(CharacterBody3D{self})
}
func (self methodsCharacterBody3D) SetMaxSlides(max_slides int64) {
	self.Runtime.CharacterBody3D_set_max_slides(CharacterBody3D{self}, max_slides)
}
func (self methodsCharacterBody3D) GetFloorMaxAngle() Float {
	return self.Runtime.CharacterBody3D_get_floor_max_angle(CharacterBody3D{self})
}
func (self methodsCharacterBody3D) SetFloorMaxAngle(radians Float) {
	self.Runtime.CharacterBody3D_set_floor_max_angle(CharacterBody3D{self}, radians)
}
func (self methodsCharacterBody3D) GetFloorSnapLength() Float {
	return self.Runtime.CharacterBody3D_get_floor_snap_length(CharacterBody3D{self})
}
func (self methodsCharacterBody3D) SetFloorSnapLength(floor_snap_length Float) {
	self.Runtime.CharacterBody3D_set_floor_snap_length(CharacterBody3D{self}, floor_snap_length)
}
func (self methodsCharacterBody3D) GetWallMinSlideAngle() Float {
	return self.Runtime.CharacterBody3D_get_wall_min_slide_angle(CharacterBody3D{self})
}
func (self methodsCharacterBody3D) SetWallMinSlideAngle(radians Float) {
	self.Runtime.CharacterBody3D_set_wall_min_slide_angle(CharacterBody3D{self}, radians)
}
func (self methodsCharacterBody3D) GetUpDirection() Vector3 {
	return self.Runtime.CharacterBody3D_get_up_direction(CharacterBody3D{self})
}
func (self methodsCharacterBody3D) SetUpDirection(up_direction Vector3) {
	self.Runtime.CharacterBody3D_set_up_direction(CharacterBody3D{self}, up_direction)
}
func (self methodsCharacterBody3D) SetMotionMode(mode CharacterBody3DMotionMode) {
	self.Runtime.CharacterBody3D_set_motion_mode(CharacterBody3D{self}, mode)
}
func (self methodsCharacterBody3D) GetMotionMode() CharacterBody3DMotionMode {
	return self.Runtime.CharacterBody3D_get_motion_mode(CharacterBody3D{self})
}
func (self methodsCharacterBody3D) SetPlatformOnLeave(on_leave_apply_velocity CharacterBody3DPlatformOnLeave) {
	self.Runtime.CharacterBody3D_set_platform_on_leave(CharacterBody3D{self}, on_leave_apply_velocity)
}
func (self methodsCharacterBody3D) GetPlatformOnLeave() CharacterBody3DPlatformOnLeave {
	return self.Runtime.CharacterBody3D_get_platform_on_leave(CharacterBody3D{self})
}
func (self methodsCharacterBody3D) IsOnFloor() bool {
	return self.Runtime.CharacterBody3D_is_on_floor(CharacterBody3D{self})
}
func (self methodsCharacterBody3D) IsOnFloorOnly() bool {
	return self.Runtime.CharacterBody3D_is_on_floor_only(CharacterBody3D{self})
}
func (self methodsCharacterBody3D) IsOnCeiling() bool {
	return self.Runtime.CharacterBody3D_is_on_ceiling(CharacterBody3D{self})
}
func (self methodsCharacterBody3D) IsOnCeilingOnly() bool {
	return self.Runtime.CharacterBody3D_is_on_ceiling_only(CharacterBody3D{self})
}
func (self methodsCharacterBody3D) IsOnWall() bool {
	return self.Runtime.CharacterBody3D_is_on_wall(CharacterBody3D{self})
}
func (self methodsCharacterBody3D) IsOnWallOnly() bool {
	return self.Runtime.CharacterBody3D_is_on_wall_only(CharacterBody3D{self})
}
func (self methodsCharacterBody3D) GetFloorNormal() Vector3 {
	return self.Runtime.CharacterBody3D_get_floor_normal(CharacterBody3D{self})
}
func (self methodsCharacterBody3D) GetWallNormal() Vector3 {
	return self.Runtime.CharacterBody3D_get_wall_normal(CharacterBody3D{self})
}
func (self methodsCharacterBody3D) GetLastMotion() Vector3 {
	return self.Runtime.CharacterBody3D_get_last_motion(CharacterBody3D{self})
}
func (self methodsCharacterBody3D) GetPositionDelta() Vector3 {
	return self.Runtime.CharacterBody3D_get_position_delta(CharacterBody3D{self})
}
func (self methodsCharacterBody3D) GetRealVelocity() Vector3 {
	return self.Runtime.CharacterBody3D_get_real_velocity(CharacterBody3D{self})
}
func (self methodsCharacterBody3D) GetFloorAngle(up_direction Vector3) Float {
	return self.Runtime.CharacterBody3D_get_floor_angle(CharacterBody3D{self}, up_direction)
}
func (self methodsCharacterBody3D) GetPlatformVelocity() Vector3 {
	return self.Runtime.CharacterBody3D_get_platform_velocity(CharacterBody3D{self})
}
func (self methodsCharacterBody3D) GetPlatformAngularVelocity() Vector3 {
	return self.Runtime.CharacterBody3D_get_platform_angular_velocity(CharacterBody3D{self})
}
func (self methodsCharacterBody3D) GetSlideCollisionCount() int64 {
	return self.Runtime.CharacterBody3D_get_slide_collision_count(CharacterBody3D{self})
}
func (self methodsCharacterBody3D) GetSlideCollision(slide_idx int64) KinematicCollision3D {
	return self.Runtime.CharacterBody3D_get_slide_collision(CharacterBody3D{self}, slide_idx)
}
func (self methodsCharacterBody3D) GetLastSlideCollision() KinematicCollision3D {
	return self.Runtime.CharacterBody3D_get_last_slide_collision(CharacterBody3D{self})
}

type methodsCheckBox struct {
	_ [0]*methodsCheckBox
	class
}

func (self CheckBox) Button() Button { var parent Button; parent.class = self.class; return parent }

type methodsCheckButton struct {
	_ [0]*methodsCheckButton
	class
}

func (self CheckButton) Button() Button { var parent Button; parent.class = self.class; return parent }

type methodsCircleShape2D struct {
	_ [0]*methodsCircleShape2D
	class
}

func (self CircleShape2D) Shape2D() Shape2D {
	var parent Shape2D
	parent.class = self.class
	return parent
}
func (self methodsCircleShape2D) SetRadius(radius Float) {
	self.Runtime.CircleShape2D_set_radius(CircleShape2D{self}, radius)
}
func (self methodsCircleShape2D) GetRadius() Float {
	return self.Runtime.CircleShape2D_get_radius(CircleShape2D{self})
}

type methodsClassDB struct {
	_ [0]*methodsClassDB
	class
}

func (self ClassDB) Object() Object { var parent Object; parent.class = self.class; return parent }
func (self methodsClassDB) GetClassList() PackedStringArray {
	return self.Runtime.ClassDB_get_class_list(ClassDB{self})
}
func (self methodsClassDB) GetInheritersFromClass(class string) PackedStringArray {
	return self.Runtime.ClassDB_get_inheriters_from_class(ClassDB{self}, class)
}
func (self methodsClassDB) GetParentClass(class string) string {
	return self.Runtime.ClassDB_get_parent_class(ClassDB{self}, class)
}
func (self methodsClassDB) ClassExists(class string) bool {
	return self.Runtime.ClassDB_class_exists(ClassDB{self}, class)
}
func (self methodsClassDB) IsParentClass(class string, inherits string) bool {
	return self.Runtime.ClassDB_is_parent_class(ClassDB{self}, class, inherits)
}
func (self methodsClassDB) CanInstantiate(class string) bool {
	return self.Runtime.ClassDB_can_instantiate(ClassDB{self}, class)
}
func (self methodsClassDB) Instantiate(class string) any {
	return self.Runtime.ClassDB_instantiate(ClassDB{self}, class)
}
func (self methodsClassDB) ClassHasSignal(class string, signal string) bool {
	return self.Runtime.ClassDB_class_has_signal(ClassDB{self}, class, signal)
}
func (self methodsClassDB) ClassGetSignal(class string, signal string) Dictionary {
	return self.Runtime.ClassDB_class_get_signal(ClassDB{self}, class, signal)
}
func (self methodsClassDB) ClassGetSignalList(class string, no_inheritance bool) ArrayOf[Dictionary] {
	return self.Runtime.ClassDB_class_get_signal_list(ClassDB{self}, class, no_inheritance)
}
func (self methodsClassDB) ClassGetPropertyList(class string, no_inheritance bool) ArrayOf[Dictionary] {
	return self.Runtime.ClassDB_class_get_property_list(ClassDB{self}, class, no_inheritance)
}
func (self methodsClassDB) ClassGetProperty(object Object, property string) any {
	return self.Runtime.ClassDB_class_get_property(ClassDB{self}, object, property)
}
func (self methodsClassDB) ClassSetProperty(object Object, property string, value any) int64 {
	return self.Runtime.ClassDB_class_set_property(ClassDB{self}, object, property, value)
}
func (self methodsClassDB) ClassHasMethod(class string, method string, no_inheritance bool) bool {
	return self.Runtime.ClassDB_class_has_method(ClassDB{self}, class, method, no_inheritance)
}
func (self methodsClassDB) ClassGetMethodList(class string, no_inheritance bool) ArrayOf[Dictionary] {
	return self.Runtime.ClassDB_class_get_method_list(ClassDB{self}, class, no_inheritance)
}
func (self methodsClassDB) ClassGetIntegerConstantList(class string, no_inheritance bool) PackedStringArray {
	return self.Runtime.ClassDB_class_get_integer_constant_list(ClassDB{self}, class, no_inheritance)
}
func (self methodsClassDB) ClassHasIntegerConstant(class string, name string) bool {
	return self.Runtime.ClassDB_class_has_integer_constant(ClassDB{self}, class, name)
}
func (self methodsClassDB) ClassGetIntegerConstant(class string, name string) int64 {
	return self.Runtime.ClassDB_class_get_integer_constant(ClassDB{self}, class, name)
}
func (self methodsClassDB) ClassHasEnum(class string, name string, no_inheritance bool) bool {
	return self.Runtime.ClassDB_class_has_enum(ClassDB{self}, class, name, no_inheritance)
}
func (self methodsClassDB) ClassGetEnumList(class string, no_inheritance bool) PackedStringArray {
	return self.Runtime.ClassDB_class_get_enum_list(ClassDB{self}, class, no_inheritance)
}
func (self methodsClassDB) ClassGetEnumConstants(class string, enum string, no_inheritance bool) PackedStringArray {
	return self.Runtime.ClassDB_class_get_enum_constants(ClassDB{self}, class, enum, no_inheritance)
}
func (self methodsClassDB) ClassGetIntegerConstantEnum(class string, name string, no_inheritance bool) string {
	return self.Runtime.ClassDB_class_get_integer_constant_enum(ClassDB{self}, class, name, no_inheritance)
}
func (self methodsClassDB) IsClassEnabled(class string) bool {
	return self.Runtime.ClassDB_is_class_enabled(ClassDB{self}, class)
}

type methodsCodeEdit struct {
	_ [0]*methodsCodeEdit
	class
}

func (self CodeEdit) TextEdit() TextEdit {
	var parent TextEdit
	parent.class = self.class
	return parent
}
func (self methodsCodeEdit) SetIndentSize(size int64) {
	self.Runtime.CodeEdit_set_indent_size(CodeEdit{self}, size)
}
func (self methodsCodeEdit) GetIndentSize() int64 {
	return self.Runtime.CodeEdit_get_indent_size(CodeEdit{self})
}
func (self methodsCodeEdit) SetIndentUsingSpaces(use_spaces bool) {
	self.Runtime.CodeEdit_set_indent_using_spaces(CodeEdit{self}, use_spaces)
}
func (self methodsCodeEdit) IsIndentUsingSpaces() bool {
	return self.Runtime.CodeEdit_is_indent_using_spaces(CodeEdit{self})
}
func (self methodsCodeEdit) SetAutoIndentEnabled(enable bool) {
	self.Runtime.CodeEdit_set_auto_indent_enabled(CodeEdit{self}, enable)
}
func (self methodsCodeEdit) IsAutoIndentEnabled() bool {
	return self.Runtime.CodeEdit_is_auto_indent_enabled(CodeEdit{self})
}
func (self methodsCodeEdit) SetAutoIndentPrefixes(prefixes ArrayOf[string]) {
	self.Runtime.CodeEdit_set_auto_indent_prefixes(CodeEdit{self}, prefixes)
}
func (self methodsCodeEdit) GetAutoIndentPrefixes() ArrayOf[string] {
	return self.Runtime.CodeEdit_get_auto_indent_prefixes(CodeEdit{self})
}
func (self methodsCodeEdit) DoIndent() {
	self.Runtime.CodeEdit_do_indent(CodeEdit{self})
}
func (self methodsCodeEdit) IndentLines() {
	self.Runtime.CodeEdit_indent_lines(CodeEdit{self})
}
func (self methodsCodeEdit) UnindentLines() {
	self.Runtime.CodeEdit_unindent_lines(CodeEdit{self})
}
func (self methodsCodeEdit) ConvertIndent(from_line int64, to_line int64) {
	self.Runtime.CodeEdit_convert_indent(CodeEdit{self}, from_line, to_line)
}
func (self methodsCodeEdit) SetAutoBraceCompletionEnabled(enable bool) {
	self.Runtime.CodeEdit_set_auto_brace_completion_enabled(CodeEdit{self}, enable)
}
func (self methodsCodeEdit) IsAutoBraceCompletionEnabled() bool {
	return self.Runtime.CodeEdit_is_auto_brace_completion_enabled(CodeEdit{self})
}
func (self methodsCodeEdit) SetHighlightMatchingBracesEnabled(enable bool) {
	self.Runtime.CodeEdit_set_highlight_matching_braces_enabled(CodeEdit{self}, enable)
}
func (self methodsCodeEdit) IsHighlightMatchingBracesEnabled() bool {
	return self.Runtime.CodeEdit_is_highlight_matching_braces_enabled(CodeEdit{self})
}
func (self methodsCodeEdit) AddAutoBraceCompletionPair(start_key string, end_key string) {
	self.Runtime.CodeEdit_add_auto_brace_completion_pair(CodeEdit{self}, start_key, end_key)
}
func (self methodsCodeEdit) SetAutoBraceCompletionPairs(pairs Dictionary) {
	self.Runtime.CodeEdit_set_auto_brace_completion_pairs(CodeEdit{self}, pairs)
}
func (self methodsCodeEdit) GetAutoBraceCompletionPairs() Dictionary {
	return self.Runtime.CodeEdit_get_auto_brace_completion_pairs(CodeEdit{self})
}
func (self methodsCodeEdit) HasAutoBraceCompletionOpenKey(open_key string) bool {
	return self.Runtime.CodeEdit_has_auto_brace_completion_open_key(CodeEdit{self}, open_key)
}
func (self methodsCodeEdit) HasAutoBraceCompletionCloseKey(close_key string) bool {
	return self.Runtime.CodeEdit_has_auto_brace_completion_close_key(CodeEdit{self}, close_key)
}
func (self methodsCodeEdit) GetAutoBraceCompletionCloseKey(open_key string) string {
	return self.Runtime.CodeEdit_get_auto_brace_completion_close_key(CodeEdit{self}, open_key)
}
func (self methodsCodeEdit) SetDrawBreakpointsGutter(enable bool) {
	self.Runtime.CodeEdit_set_draw_breakpoints_gutter(CodeEdit{self}, enable)
}
func (self methodsCodeEdit) IsDrawingBreakpointsGutter() bool {
	return self.Runtime.CodeEdit_is_drawing_breakpoints_gutter(CodeEdit{self})
}
func (self methodsCodeEdit) SetDrawBookmarksGutter(enable bool) {
	self.Runtime.CodeEdit_set_draw_bookmarks_gutter(CodeEdit{self}, enable)
}
func (self methodsCodeEdit) IsDrawingBookmarksGutter() bool {
	return self.Runtime.CodeEdit_is_drawing_bookmarks_gutter(CodeEdit{self})
}
func (self methodsCodeEdit) SetDrawExecutingLinesGutter(enable bool) {
	self.Runtime.CodeEdit_set_draw_executing_lines_gutter(CodeEdit{self}, enable)
}
func (self methodsCodeEdit) IsDrawingExecutingLinesGutter() bool {
	return self.Runtime.CodeEdit_is_drawing_executing_lines_gutter(CodeEdit{self})
}
func (self methodsCodeEdit) SetLineAsBreakpoint(line int64, breakpointed bool) {
	self.Runtime.CodeEdit_set_line_as_breakpoint(CodeEdit{self}, line, breakpointed)
}
func (self methodsCodeEdit) IsLineBreakpointed(line int64) bool {
	return self.Runtime.CodeEdit_is_line_breakpointed(CodeEdit{self}, line)
}
func (self methodsCodeEdit) ClearBreakpointedLines() {
	self.Runtime.CodeEdit_clear_breakpointed_lines(CodeEdit{self})
}
func (self methodsCodeEdit) GetBreakpointedLines() PackedInt32Array {
	return self.Runtime.CodeEdit_get_breakpointed_lines(CodeEdit{self})
}
func (self methodsCodeEdit) SetLineAsBookmarked(line int64, bookmarked bool) {
	self.Runtime.CodeEdit_set_line_as_bookmarked(CodeEdit{self}, line, bookmarked)
}
func (self methodsCodeEdit) IsLineBookmarked(line int64) bool {
	return self.Runtime.CodeEdit_is_line_bookmarked(CodeEdit{self}, line)
}
func (self methodsCodeEdit) ClearBookmarkedLines() {
	self.Runtime.CodeEdit_clear_bookmarked_lines(CodeEdit{self})
}
func (self methodsCodeEdit) GetBookmarkedLines() PackedInt32Array {
	return self.Runtime.CodeEdit_get_bookmarked_lines(CodeEdit{self})
}
func (self methodsCodeEdit) SetLineAsExecuting(line int64, executing bool) {
	self.Runtime.CodeEdit_set_line_as_executing(CodeEdit{self}, line, executing)
}
func (self methodsCodeEdit) IsLineExecuting(line int64) bool {
	return self.Runtime.CodeEdit_is_line_executing(CodeEdit{self}, line)
}
func (self methodsCodeEdit) ClearExecutingLines() {
	self.Runtime.CodeEdit_clear_executing_lines(CodeEdit{self})
}
func (self methodsCodeEdit) GetExecutingLines() PackedInt32Array {
	return self.Runtime.CodeEdit_get_executing_lines(CodeEdit{self})
}
func (self methodsCodeEdit) SetDrawLineNumbers(enable bool) {
	self.Runtime.CodeEdit_set_draw_line_numbers(CodeEdit{self}, enable)
}
func (self methodsCodeEdit) IsDrawLineNumbersEnabled() bool {
	return self.Runtime.CodeEdit_is_draw_line_numbers_enabled(CodeEdit{self})
}
func (self methodsCodeEdit) SetLineNumbersZeroPadded(enable bool) {
	self.Runtime.CodeEdit_set_line_numbers_zero_padded(CodeEdit{self}, enable)
}
func (self methodsCodeEdit) IsLineNumbersZeroPadded() bool {
	return self.Runtime.CodeEdit_is_line_numbers_zero_padded(CodeEdit{self})
}
func (self methodsCodeEdit) SetDrawFoldGutter(enable bool) {
	self.Runtime.CodeEdit_set_draw_fold_gutter(CodeEdit{self}, enable)
}
func (self methodsCodeEdit) IsDrawingFoldGutter() bool {
	return self.Runtime.CodeEdit_is_drawing_fold_gutter(CodeEdit{self})
}
func (self methodsCodeEdit) SetLineFoldingEnabled(enabled bool) {
	self.Runtime.CodeEdit_set_line_folding_enabled(CodeEdit{self}, enabled)
}
func (self methodsCodeEdit) IsLineFoldingEnabled() bool {
	return self.Runtime.CodeEdit_is_line_folding_enabled(CodeEdit{self})
}
func (self methodsCodeEdit) CanFoldLine(line int64) bool {
	return self.Runtime.CodeEdit_can_fold_line(CodeEdit{self}, line)
}
func (self methodsCodeEdit) FoldLine(line int64) {
	self.Runtime.CodeEdit_fold_line(CodeEdit{self}, line)
}
func (self methodsCodeEdit) UnfoldLine(line int64) {
	self.Runtime.CodeEdit_unfold_line(CodeEdit{self}, line)
}
func (self methodsCodeEdit) FoldAllLines() {
	self.Runtime.CodeEdit_fold_all_lines(CodeEdit{self})
}
func (self methodsCodeEdit) UnfoldAllLines() {
	self.Runtime.CodeEdit_unfold_all_lines(CodeEdit{self})
}
func (self methodsCodeEdit) ToggleFoldableLine(line int64) {
	self.Runtime.CodeEdit_toggle_foldable_line(CodeEdit{self}, line)
}
func (self methodsCodeEdit) IsLineFolded(line int64) bool {
	return self.Runtime.CodeEdit_is_line_folded(CodeEdit{self}, line)
}
func (self methodsCodeEdit) GetFoldedLines() ArrayOf[int64] {
	return self.Runtime.CodeEdit_get_folded_lines(CodeEdit{self})
}
func (self methodsCodeEdit) CreateCodeRegion() {
	self.Runtime.CodeEdit_create_code_region(CodeEdit{self})
}
func (self methodsCodeEdit) GetCodeRegionStartTag() string {
	return self.Runtime.CodeEdit_get_code_region_start_tag(CodeEdit{self})
}
func (self methodsCodeEdit) GetCodeRegionEndTag() string {
	return self.Runtime.CodeEdit_get_code_region_end_tag(CodeEdit{self})
}
func (self methodsCodeEdit) SetCodeRegionTags(start string, end string) {
	self.Runtime.CodeEdit_set_code_region_tags(CodeEdit{self}, start, end)
}
func (self methodsCodeEdit) IsLineCodeRegionStart(line int64) bool {
	return self.Runtime.CodeEdit_is_line_code_region_start(CodeEdit{self}, line)
}
func (self methodsCodeEdit) IsLineCodeRegionEnd(line int64) bool {
	return self.Runtime.CodeEdit_is_line_code_region_end(CodeEdit{self}, line)
}
func (self methodsCodeEdit) AddStringDelimiter(start_key string, end_key string, line_only bool) {
	self.Runtime.CodeEdit_add_string_delimiter(CodeEdit{self}, start_key, end_key, line_only)
}
func (self methodsCodeEdit) RemoveStringDelimiter(start_key string) {
	self.Runtime.CodeEdit_remove_string_delimiter(CodeEdit{self}, start_key)
}
func (self methodsCodeEdit) HasStringDelimiter(start_key string) bool {
	return self.Runtime.CodeEdit_has_string_delimiter(CodeEdit{self}, start_key)
}
func (self methodsCodeEdit) SetStringDelimiters(string_delimiters ArrayOf[string]) {
	self.Runtime.CodeEdit_set_string_delimiters(CodeEdit{self}, string_delimiters)
}
func (self methodsCodeEdit) ClearStringDelimiters() {
	self.Runtime.CodeEdit_clear_string_delimiters(CodeEdit{self})
}
func (self methodsCodeEdit) GetStringDelimiters() ArrayOf[string] {
	return self.Runtime.CodeEdit_get_string_delimiters(CodeEdit{self})
}
func (self methodsCodeEdit) IsInString(line int64, column int64) int64 {
	return self.Runtime.CodeEdit_is_in_string(CodeEdit{self}, line, column)
}
func (self methodsCodeEdit) AddCommentDelimiter(start_key string, end_key string, line_only bool) {
	self.Runtime.CodeEdit_add_comment_delimiter(CodeEdit{self}, start_key, end_key, line_only)
}
func (self methodsCodeEdit) RemoveCommentDelimiter(start_key string) {
	self.Runtime.CodeEdit_remove_comment_delimiter(CodeEdit{self}, start_key)
}
func (self methodsCodeEdit) HasCommentDelimiter(start_key string) bool {
	return self.Runtime.CodeEdit_has_comment_delimiter(CodeEdit{self}, start_key)
}
func (self methodsCodeEdit) SetCommentDelimiters(comment_delimiters ArrayOf[string]) {
	self.Runtime.CodeEdit_set_comment_delimiters(CodeEdit{self}, comment_delimiters)
}
func (self methodsCodeEdit) ClearCommentDelimiters() {
	self.Runtime.CodeEdit_clear_comment_delimiters(CodeEdit{self})
}
func (self methodsCodeEdit) GetCommentDelimiters() ArrayOf[string] {
	return self.Runtime.CodeEdit_get_comment_delimiters(CodeEdit{self})
}
func (self methodsCodeEdit) IsInComment(line int64, column int64) int64 {
	return self.Runtime.CodeEdit_is_in_comment(CodeEdit{self}, line, column)
}
func (self methodsCodeEdit) GetDelimiterStartKey(delimiter_index int64) string {
	return self.Runtime.CodeEdit_get_delimiter_start_key(CodeEdit{self}, delimiter_index)
}
func (self methodsCodeEdit) GetDelimiterEndKey(delimiter_index int64) string {
	return self.Runtime.CodeEdit_get_delimiter_end_key(CodeEdit{self}, delimiter_index)
}
func (self methodsCodeEdit) GetDelimiterStartPosition(line int64, column int64) Vector2 {
	return self.Runtime.CodeEdit_get_delimiter_start_position(CodeEdit{self}, line, column)
}
func (self methodsCodeEdit) GetDelimiterEndPosition(line int64, column int64) Vector2 {
	return self.Runtime.CodeEdit_get_delimiter_end_position(CodeEdit{self}, line, column)
}
func (self methodsCodeEdit) SetCodeHint(code_hint string) {
	self.Runtime.CodeEdit_set_code_hint(CodeEdit{self}, code_hint)
}
func (self methodsCodeEdit) SetCodeHintDrawBelow(draw_below bool) {
	self.Runtime.CodeEdit_set_code_hint_draw_below(CodeEdit{self}, draw_below)
}
func (self methodsCodeEdit) GetTextForCodeCompletion() string {
	return self.Runtime.CodeEdit_get_text_for_code_completion(CodeEdit{self})
}
func (self methodsCodeEdit) RequestCodeCompletion(force bool) {
	self.Runtime.CodeEdit_request_code_completion(CodeEdit{self}, force)
}
func (self methodsCodeEdit) AddCodeCompletionOption(atype CodeEditCodeCompletionKind, display_text string, insert_text string, text_color Color, icon Resource, value any, location int64) {
	self.Runtime.CodeEdit_add_code_completion_option(CodeEdit{self}, atype, display_text, insert_text, text_color, icon, value, location)
}
func (self methodsCodeEdit) UpdateCodeCompletionOptions(force bool) {
	self.Runtime.CodeEdit_update_code_completion_options(CodeEdit{self}, force)
}
func (self methodsCodeEdit) GetCodeCompletionOptions() ArrayOf[Dictionary] {
	return self.Runtime.CodeEdit_get_code_completion_options(CodeEdit{self})
}
func (self methodsCodeEdit) GetCodeCompletionOption(index int64) Dictionary {
	return self.Runtime.CodeEdit_get_code_completion_option(CodeEdit{self}, index)
}
func (self methodsCodeEdit) GetCodeCompletionSelectedIndex() int64 {
	return self.Runtime.CodeEdit_get_code_completion_selected_index(CodeEdit{self})
}
func (self methodsCodeEdit) SetCodeCompletionSelectedIndex(index int64) {
	self.Runtime.CodeEdit_set_code_completion_selected_index(CodeEdit{self}, index)
}
func (self methodsCodeEdit) ConfirmCodeCompletion(replace bool) {
	self.Runtime.CodeEdit_confirm_code_completion(CodeEdit{self}, replace)
}
func (self methodsCodeEdit) CancelCodeCompletion() {
	self.Runtime.CodeEdit_cancel_code_completion(CodeEdit{self})
}
func (self methodsCodeEdit) SetCodeCompletionEnabled(enable bool) {
	self.Runtime.CodeEdit_set_code_completion_enabled(CodeEdit{self}, enable)
}
func (self methodsCodeEdit) IsCodeCompletionEnabled() bool {
	return self.Runtime.CodeEdit_is_code_completion_enabled(CodeEdit{self})
}
func (self methodsCodeEdit) SetCodeCompletionPrefixes(prefixes ArrayOf[string]) {
	self.Runtime.CodeEdit_set_code_completion_prefixes(CodeEdit{self}, prefixes)
}
func (self methodsCodeEdit) GetCodeCompletionPrefixes() ArrayOf[string] {
	return self.Runtime.CodeEdit_get_code_completion_prefixes(CodeEdit{self})
}
func (self methodsCodeEdit) SetLineLengthGuidelines(guideline_columns ArrayOf[int64]) {
	self.Runtime.CodeEdit_set_line_length_guidelines(CodeEdit{self}, guideline_columns)
}
func (self methodsCodeEdit) GetLineLengthGuidelines() ArrayOf[int64] {
	return self.Runtime.CodeEdit_get_line_length_guidelines(CodeEdit{self})
}
func (self methodsCodeEdit) SetSymbolLookupOnClickEnabled(enable bool) {
	self.Runtime.CodeEdit_set_symbol_lookup_on_click_enabled(CodeEdit{self}, enable)
}
func (self methodsCodeEdit) IsSymbolLookupOnClickEnabled() bool {
	return self.Runtime.CodeEdit_is_symbol_lookup_on_click_enabled(CodeEdit{self})
}
func (self methodsCodeEdit) GetTextForSymbolLookup() string {
	return self.Runtime.CodeEdit_get_text_for_symbol_lookup(CodeEdit{self})
}
func (self methodsCodeEdit) GetTextWithCursorChar(line int64, column int64) string {
	return self.Runtime.CodeEdit_get_text_with_cursor_char(CodeEdit{self}, line, column)
}
func (self methodsCodeEdit) SetSymbolLookupWordAsValid(valid bool) {
	self.Runtime.CodeEdit_set_symbol_lookup_word_as_valid(CodeEdit{self}, valid)
}
func (self methodsCodeEdit) DuplicateLines() {
	self.Runtime.CodeEdit_duplicate_lines(CodeEdit{self})
}

type methodsCodeHighlighter struct {
	_ [0]*methodsCodeHighlighter
	class
}

func (self CodeHighlighter) SyntaxHighlighter() SyntaxHighlighter {
	var parent SyntaxHighlighter
	parent.class = self.class
	return parent
}
func (self methodsCodeHighlighter) AddKeywordColor(keyword string, color Color) {
	self.Runtime.CodeHighlighter_add_keyword_color(CodeHighlighter{self}, keyword, color)
}
func (self methodsCodeHighlighter) RemoveKeywordColor(keyword string) {
	self.Runtime.CodeHighlighter_remove_keyword_color(CodeHighlighter{self}, keyword)
}
func (self methodsCodeHighlighter) HasKeywordColor(keyword string) bool {
	return self.Runtime.CodeHighlighter_has_keyword_color(CodeHighlighter{self}, keyword)
}
func (self methodsCodeHighlighter) GetKeywordColor(keyword string) Color {
	return self.Runtime.CodeHighlighter_get_keyword_color(CodeHighlighter{self}, keyword)
}
func (self methodsCodeHighlighter) SetKeywordColors(keywords Dictionary) {
	self.Runtime.CodeHighlighter_set_keyword_colors(CodeHighlighter{self}, keywords)
}
func (self methodsCodeHighlighter) ClearKeywordColors() {
	self.Runtime.CodeHighlighter_clear_keyword_colors(CodeHighlighter{self})
}
func (self methodsCodeHighlighter) GetKeywordColors() Dictionary {
	return self.Runtime.CodeHighlighter_get_keyword_colors(CodeHighlighter{self})
}
func (self methodsCodeHighlighter) AddMemberKeywordColor(member_keyword string, color Color) {
	self.Runtime.CodeHighlighter_add_member_keyword_color(CodeHighlighter{self}, member_keyword, color)
}
func (self methodsCodeHighlighter) RemoveMemberKeywordColor(member_keyword string) {
	self.Runtime.CodeHighlighter_remove_member_keyword_color(CodeHighlighter{self}, member_keyword)
}
func (self methodsCodeHighlighter) HasMemberKeywordColor(member_keyword string) bool {
	return self.Runtime.CodeHighlighter_has_member_keyword_color(CodeHighlighter{self}, member_keyword)
}
func (self methodsCodeHighlighter) GetMemberKeywordColor(member_keyword string) Color {
	return self.Runtime.CodeHighlighter_get_member_keyword_color(CodeHighlighter{self}, member_keyword)
}
func (self methodsCodeHighlighter) SetMemberKeywordColors(member_keyword Dictionary) {
	self.Runtime.CodeHighlighter_set_member_keyword_colors(CodeHighlighter{self}, member_keyword)
}
func (self methodsCodeHighlighter) ClearMemberKeywordColors() {
	self.Runtime.CodeHighlighter_clear_member_keyword_colors(CodeHighlighter{self})
}
func (self methodsCodeHighlighter) GetMemberKeywordColors() Dictionary {
	return self.Runtime.CodeHighlighter_get_member_keyword_colors(CodeHighlighter{self})
}
func (self methodsCodeHighlighter) AddColorRegion(start_key string, end_key string, color Color, line_only bool) {
	self.Runtime.CodeHighlighter_add_color_region(CodeHighlighter{self}, start_key, end_key, color, line_only)
}
func (self methodsCodeHighlighter) RemoveColorRegion(start_key string) {
	self.Runtime.CodeHighlighter_remove_color_region(CodeHighlighter{self}, start_key)
}
func (self methodsCodeHighlighter) HasColorRegion(start_key string) bool {
	return self.Runtime.CodeHighlighter_has_color_region(CodeHighlighter{self}, start_key)
}
func (self methodsCodeHighlighter) SetColorRegions(color_regions Dictionary) {
	self.Runtime.CodeHighlighter_set_color_regions(CodeHighlighter{self}, color_regions)
}
func (self methodsCodeHighlighter) ClearColorRegions() {
	self.Runtime.CodeHighlighter_clear_color_regions(CodeHighlighter{self})
}
func (self methodsCodeHighlighter) GetColorRegions() Dictionary {
	return self.Runtime.CodeHighlighter_get_color_regions(CodeHighlighter{self})
}
func (self methodsCodeHighlighter) SetFunctionColor(color Color) {
	self.Runtime.CodeHighlighter_set_function_color(CodeHighlighter{self}, color)
}
func (self methodsCodeHighlighter) GetFunctionColor() Color {
	return self.Runtime.CodeHighlighter_get_function_color(CodeHighlighter{self})
}
func (self methodsCodeHighlighter) SetNumberColor(color Color) {
	self.Runtime.CodeHighlighter_set_number_color(CodeHighlighter{self}, color)
}
func (self methodsCodeHighlighter) GetNumberColor() Color {
	return self.Runtime.CodeHighlighter_get_number_color(CodeHighlighter{self})
}
func (self methodsCodeHighlighter) SetSymbolColor(color Color) {
	self.Runtime.CodeHighlighter_set_symbol_color(CodeHighlighter{self}, color)
}
func (self methodsCodeHighlighter) GetSymbolColor() Color {
	return self.Runtime.CodeHighlighter_get_symbol_color(CodeHighlighter{self})
}
func (self methodsCodeHighlighter) SetMemberVariableColor(color Color) {
	self.Runtime.CodeHighlighter_set_member_variable_color(CodeHighlighter{self}, color)
}
func (self methodsCodeHighlighter) GetMemberVariableColor() Color {
	return self.Runtime.CodeHighlighter_get_member_variable_color(CodeHighlighter{self})
}

type methodsCollisionObject2D struct {
	_ [0]*methodsCollisionObject2D
	class
}

func (self CollisionObject2D) Node2D() Node2D {
	var parent Node2D
	parent.class = self.class
	return parent
}
func (self methodsCollisionObject2D) GetRid() RID {
	return self.Runtime.CollisionObject2D_get_rid(CollisionObject2D{self})
}
func (self methodsCollisionObject2D) SetCollisionLayer(layer int64) {
	self.Runtime.CollisionObject2D_set_collision_layer(CollisionObject2D{self}, layer)
}
func (self methodsCollisionObject2D) GetCollisionLayer() int64 {
	return self.Runtime.CollisionObject2D_get_collision_layer(CollisionObject2D{self})
}
func (self methodsCollisionObject2D) SetCollisionMask(mask int64) {
	self.Runtime.CollisionObject2D_set_collision_mask(CollisionObject2D{self}, mask)
}
func (self methodsCollisionObject2D) GetCollisionMask() int64 {
	return self.Runtime.CollisionObject2D_get_collision_mask(CollisionObject2D{self})
}
func (self methodsCollisionObject2D) SetCollisionLayerValue(layer_number int64, value bool) {
	self.Runtime.CollisionObject2D_set_collision_layer_value(CollisionObject2D{self}, layer_number, value)
}
func (self methodsCollisionObject2D) GetCollisionLayerValue(layer_number int64) bool {
	return self.Runtime.CollisionObject2D_get_collision_layer_value(CollisionObject2D{self}, layer_number)
}
func (self methodsCollisionObject2D) SetCollisionMaskValue(layer_number int64, value bool) {
	self.Runtime.CollisionObject2D_set_collision_mask_value(CollisionObject2D{self}, layer_number, value)
}
func (self methodsCollisionObject2D) GetCollisionMaskValue(layer_number int64) bool {
	return self.Runtime.CollisionObject2D_get_collision_mask_value(CollisionObject2D{self}, layer_number)
}
func (self methodsCollisionObject2D) SetCollisionPriority(priority Float) {
	self.Runtime.CollisionObject2D_set_collision_priority(CollisionObject2D{self}, priority)
}
func (self methodsCollisionObject2D) GetCollisionPriority() Float {
	return self.Runtime.CollisionObject2D_get_collision_priority(CollisionObject2D{self})
}
func (self methodsCollisionObject2D) SetDisableMode(mode CollisionObject2DDisableMode) {
	self.Runtime.CollisionObject2D_set_disable_mode(CollisionObject2D{self}, mode)
}
func (self methodsCollisionObject2D) GetDisableMode() CollisionObject2DDisableMode {
	return self.Runtime.CollisionObject2D_get_disable_mode(CollisionObject2D{self})
}
func (self methodsCollisionObject2D) SetPickable(enabled bool) {
	self.Runtime.CollisionObject2D_set_pickable(CollisionObject2D{self}, enabled)
}
func (self methodsCollisionObject2D) IsPickable() bool {
	return self.Runtime.CollisionObject2D_is_pickable(CollisionObject2D{self})
}
func (self methodsCollisionObject2D) CreateShapeOwner(owner Object) int64 {
	return self.Runtime.CollisionObject2D_create_shape_owner(CollisionObject2D{self}, owner)
}
func (self methodsCollisionObject2D) RemoveShapeOwner(owner_id int64) {
	self.Runtime.CollisionObject2D_remove_shape_owner(CollisionObject2D{self}, owner_id)
}
func (self methodsCollisionObject2D) GetShapeOwners() PackedInt32Array {
	return self.Runtime.CollisionObject2D_get_shape_owners(CollisionObject2D{self})
}
func (self methodsCollisionObject2D) ShapeOwnerSetTransform(owner_id int64, transform Transform2D) {
	self.Runtime.CollisionObject2D_shape_owner_set_transform(CollisionObject2D{self}, owner_id, transform)
}
func (self methodsCollisionObject2D) ShapeOwnerGetTransform(owner_id int64) Transform2D {
	return self.Runtime.CollisionObject2D_shape_owner_get_transform(CollisionObject2D{self}, owner_id)
}
func (self methodsCollisionObject2D) ShapeOwnerGetOwner(owner_id int64) Object {
	return self.Runtime.CollisionObject2D_shape_owner_get_owner(CollisionObject2D{self}, owner_id)
}
func (self methodsCollisionObject2D) ShapeOwnerSetDisabled(owner_id int64, disabled bool) {
	self.Runtime.CollisionObject2D_shape_owner_set_disabled(CollisionObject2D{self}, owner_id, disabled)
}
func (self methodsCollisionObject2D) IsShapeOwnerDisabled(owner_id int64) bool {
	return self.Runtime.CollisionObject2D_is_shape_owner_disabled(CollisionObject2D{self}, owner_id)
}
func (self methodsCollisionObject2D) ShapeOwnerSetOneWayCollision(owner_id int64, enable bool) {
	self.Runtime.CollisionObject2D_shape_owner_set_one_way_collision(CollisionObject2D{self}, owner_id, enable)
}
func (self methodsCollisionObject2D) IsShapeOwnerOneWayCollisionEnabled(owner_id int64) bool {
	return self.Runtime.CollisionObject2D_is_shape_owner_one_way_collision_enabled(CollisionObject2D{self}, owner_id)
}
func (self methodsCollisionObject2D) ShapeOwnerSetOneWayCollisionMargin(owner_id int64, margin Float) {
	self.Runtime.CollisionObject2D_shape_owner_set_one_way_collision_margin(CollisionObject2D{self}, owner_id, margin)
}
func (self methodsCollisionObject2D) GetShapeOwnerOneWayCollisionMargin(owner_id int64) Float {
	return self.Runtime.CollisionObject2D_get_shape_owner_one_way_collision_margin(CollisionObject2D{self}, owner_id)
}
func (self methodsCollisionObject2D) ShapeOwnerAddShape(owner_id int64, shape Shape2D) {
	self.Runtime.CollisionObject2D_shape_owner_add_shape(CollisionObject2D{self}, owner_id, shape)
}
func (self methodsCollisionObject2D) ShapeOwnerGetShapeCount(owner_id int64) int64 {
	return self.Runtime.CollisionObject2D_shape_owner_get_shape_count(CollisionObject2D{self}, owner_id)
}
func (self methodsCollisionObject2D) ShapeOwnerGetShape(owner_id int64, shape_id int64) Shape2D {
	return self.Runtime.CollisionObject2D_shape_owner_get_shape(CollisionObject2D{self}, owner_id, shape_id)
}
func (self methodsCollisionObject2D) ShapeOwnerGetShapeIndex(owner_id int64, shape_id int64) int64 {
	return self.Runtime.CollisionObject2D_shape_owner_get_shape_index(CollisionObject2D{self}, owner_id, shape_id)
}
func (self methodsCollisionObject2D) ShapeOwnerRemoveShape(owner_id int64, shape_id int64) {
	self.Runtime.CollisionObject2D_shape_owner_remove_shape(CollisionObject2D{self}, owner_id, shape_id)
}
func (self methodsCollisionObject2D) ShapeOwnerClearShapes(owner_id int64) {
	self.Runtime.CollisionObject2D_shape_owner_clear_shapes(CollisionObject2D{self}, owner_id)
}
func (self methodsCollisionObject2D) ShapeFindOwner(shape_index int64) int64 {
	return self.Runtime.CollisionObject2D_shape_find_owner(CollisionObject2D{self}, shape_index)
}

type methodsCollisionObject3D struct {
	_ [0]*methodsCollisionObject3D
	class
}

func (self CollisionObject3D) Node3D() Node3D {
	var parent Node3D
	parent.class = self.class
	return parent
}
func (self methodsCollisionObject3D) SetCollisionLayer(layer int64) {
	self.Runtime.CollisionObject3D_set_collision_layer(CollisionObject3D{self}, layer)
}
func (self methodsCollisionObject3D) GetCollisionLayer() int64 {
	return self.Runtime.CollisionObject3D_get_collision_layer(CollisionObject3D{self})
}
func (self methodsCollisionObject3D) SetCollisionMask(mask int64) {
	self.Runtime.CollisionObject3D_set_collision_mask(CollisionObject3D{self}, mask)
}
func (self methodsCollisionObject3D) GetCollisionMask() int64 {
	return self.Runtime.CollisionObject3D_get_collision_mask(CollisionObject3D{self})
}
func (self methodsCollisionObject3D) SetCollisionLayerValue(layer_number int64, value bool) {
	self.Runtime.CollisionObject3D_set_collision_layer_value(CollisionObject3D{self}, layer_number, value)
}
func (self methodsCollisionObject3D) GetCollisionLayerValue(layer_number int64) bool {
	return self.Runtime.CollisionObject3D_get_collision_layer_value(CollisionObject3D{self}, layer_number)
}
func (self methodsCollisionObject3D) SetCollisionMaskValue(layer_number int64, value bool) {
	self.Runtime.CollisionObject3D_set_collision_mask_value(CollisionObject3D{self}, layer_number, value)
}
func (self methodsCollisionObject3D) GetCollisionMaskValue(layer_number int64) bool {
	return self.Runtime.CollisionObject3D_get_collision_mask_value(CollisionObject3D{self}, layer_number)
}
func (self methodsCollisionObject3D) SetCollisionPriority(priority Float) {
	self.Runtime.CollisionObject3D_set_collision_priority(CollisionObject3D{self}, priority)
}
func (self methodsCollisionObject3D) GetCollisionPriority() Float {
	return self.Runtime.CollisionObject3D_get_collision_priority(CollisionObject3D{self})
}
func (self methodsCollisionObject3D) SetDisableMode(mode CollisionObject3DDisableMode) {
	self.Runtime.CollisionObject3D_set_disable_mode(CollisionObject3D{self}, mode)
}
func (self methodsCollisionObject3D) GetDisableMode() CollisionObject3DDisableMode {
	return self.Runtime.CollisionObject3D_get_disable_mode(CollisionObject3D{self})
}
func (self methodsCollisionObject3D) SetRayPickable(ray_pickable bool) {
	self.Runtime.CollisionObject3D_set_ray_pickable(CollisionObject3D{self}, ray_pickable)
}
func (self methodsCollisionObject3D) IsRayPickable() bool {
	return self.Runtime.CollisionObject3D_is_ray_pickable(CollisionObject3D{self})
}
func (self methodsCollisionObject3D) SetCaptureInputOnDrag(enable bool) {
	self.Runtime.CollisionObject3D_set_capture_input_on_drag(CollisionObject3D{self}, enable)
}
func (self methodsCollisionObject3D) GetCaptureInputOnDrag() bool {
	return self.Runtime.CollisionObject3D_get_capture_input_on_drag(CollisionObject3D{self})
}
func (self methodsCollisionObject3D) GetRid() RID {
	return self.Runtime.CollisionObject3D_get_rid(CollisionObject3D{self})
}
func (self methodsCollisionObject3D) CreateShapeOwner(owner Object) int64 {
	return self.Runtime.CollisionObject3D_create_shape_owner(CollisionObject3D{self}, owner)
}
func (self methodsCollisionObject3D) RemoveShapeOwner(owner_id int64) {
	self.Runtime.CollisionObject3D_remove_shape_owner(CollisionObject3D{self}, owner_id)
}
func (self methodsCollisionObject3D) GetShapeOwners() PackedInt32Array {
	return self.Runtime.CollisionObject3D_get_shape_owners(CollisionObject3D{self})
}
func (self methodsCollisionObject3D) ShapeOwnerSetTransform(owner_id int64, transform Transform3D) {
	self.Runtime.CollisionObject3D_shape_owner_set_transform(CollisionObject3D{self}, owner_id, transform)
}
func (self methodsCollisionObject3D) ShapeOwnerGetTransform(owner_id int64) Transform3D {
	return self.Runtime.CollisionObject3D_shape_owner_get_transform(CollisionObject3D{self}, owner_id)
}
func (self methodsCollisionObject3D) ShapeOwnerGetOwner(owner_id int64) Object {
	return self.Runtime.CollisionObject3D_shape_owner_get_owner(CollisionObject3D{self}, owner_id)
}
func (self methodsCollisionObject3D) ShapeOwnerSetDisabled(owner_id int64, disabled bool) {
	self.Runtime.CollisionObject3D_shape_owner_set_disabled(CollisionObject3D{self}, owner_id, disabled)
}
func (self methodsCollisionObject3D) IsShapeOwnerDisabled(owner_id int64) bool {
	return self.Runtime.CollisionObject3D_is_shape_owner_disabled(CollisionObject3D{self}, owner_id)
}
func (self methodsCollisionObject3D) ShapeOwnerAddShape(owner_id int64, shape Shape3D) {
	self.Runtime.CollisionObject3D_shape_owner_add_shape(CollisionObject3D{self}, owner_id, shape)
}
func (self methodsCollisionObject3D) ShapeOwnerGetShapeCount(owner_id int64) int64 {
	return self.Runtime.CollisionObject3D_shape_owner_get_shape_count(CollisionObject3D{self}, owner_id)
}
func (self methodsCollisionObject3D) ShapeOwnerGetShape(owner_id int64, shape_id int64) Shape3D {
	return self.Runtime.CollisionObject3D_shape_owner_get_shape(CollisionObject3D{self}, owner_id, shape_id)
}
func (self methodsCollisionObject3D) ShapeOwnerGetShapeIndex(owner_id int64, shape_id int64) int64 {
	return self.Runtime.CollisionObject3D_shape_owner_get_shape_index(CollisionObject3D{self}, owner_id, shape_id)
}
func (self methodsCollisionObject3D) ShapeOwnerRemoveShape(owner_id int64, shape_id int64) {
	self.Runtime.CollisionObject3D_shape_owner_remove_shape(CollisionObject3D{self}, owner_id, shape_id)
}
func (self methodsCollisionObject3D) ShapeOwnerClearShapes(owner_id int64) {
	self.Runtime.CollisionObject3D_shape_owner_clear_shapes(CollisionObject3D{self}, owner_id)
}
func (self methodsCollisionObject3D) ShapeFindOwner(shape_index int64) int64 {
	return self.Runtime.CollisionObject3D_shape_find_owner(CollisionObject3D{self}, shape_index)
}

type methodsCollisionPolygon2D struct {
	_ [0]*methodsCollisionPolygon2D
	class
}

func (self CollisionPolygon2D) Node2D() Node2D {
	var parent Node2D
	parent.class = self.class
	return parent
}
func (self methodsCollisionPolygon2D) SetPolygon(polygon PackedVector2Array) {
	self.Runtime.CollisionPolygon2D_set_polygon(CollisionPolygon2D{self}, polygon)
}
func (self methodsCollisionPolygon2D) GetPolygon() PackedVector2Array {
	return self.Runtime.CollisionPolygon2D_get_polygon(CollisionPolygon2D{self})
}
func (self methodsCollisionPolygon2D) SetBuildMode(build_mode CollisionPolygon2DBuildMode) {
	self.Runtime.CollisionPolygon2D_set_build_mode(CollisionPolygon2D{self}, build_mode)
}
func (self methodsCollisionPolygon2D) GetBuildMode() CollisionPolygon2DBuildMode {
	return self.Runtime.CollisionPolygon2D_get_build_mode(CollisionPolygon2D{self})
}
func (self methodsCollisionPolygon2D) SetDisabled(disabled bool) {
	self.Runtime.CollisionPolygon2D_set_disabled(CollisionPolygon2D{self}, disabled)
}
func (self methodsCollisionPolygon2D) IsDisabled() bool {
	return self.Runtime.CollisionPolygon2D_is_disabled(CollisionPolygon2D{self})
}
func (self methodsCollisionPolygon2D) SetOneWayCollision(enabled bool) {
	self.Runtime.CollisionPolygon2D_set_one_way_collision(CollisionPolygon2D{self}, enabled)
}
func (self methodsCollisionPolygon2D) IsOneWayCollisionEnabled() bool {
	return self.Runtime.CollisionPolygon2D_is_one_way_collision_enabled(CollisionPolygon2D{self})
}
func (self methodsCollisionPolygon2D) SetOneWayCollisionMargin(margin Float) {
	self.Runtime.CollisionPolygon2D_set_one_way_collision_margin(CollisionPolygon2D{self}, margin)
}
func (self methodsCollisionPolygon2D) GetOneWayCollisionMargin() Float {
	return self.Runtime.CollisionPolygon2D_get_one_way_collision_margin(CollisionPolygon2D{self})
}

type methodsCollisionPolygon3D struct {
	_ [0]*methodsCollisionPolygon3D
	class
}

func (self CollisionPolygon3D) Node3D() Node3D {
	var parent Node3D
	parent.class = self.class
	return parent
}
func (self methodsCollisionPolygon3D) SetDepth(depth Float) {
	self.Runtime.CollisionPolygon3D_set_depth(CollisionPolygon3D{self}, depth)
}
func (self methodsCollisionPolygon3D) GetDepth() Float {
	return self.Runtime.CollisionPolygon3D_get_depth(CollisionPolygon3D{self})
}
func (self methodsCollisionPolygon3D) SetPolygon(polygon PackedVector2Array) {
	self.Runtime.CollisionPolygon3D_set_polygon(CollisionPolygon3D{self}, polygon)
}
func (self methodsCollisionPolygon3D) GetPolygon() PackedVector2Array {
	return self.Runtime.CollisionPolygon3D_get_polygon(CollisionPolygon3D{self})
}
func (self methodsCollisionPolygon3D) SetDisabled(disabled bool) {
	self.Runtime.CollisionPolygon3D_set_disabled(CollisionPolygon3D{self}, disabled)
}
func (self methodsCollisionPolygon3D) IsDisabled() bool {
	return self.Runtime.CollisionPolygon3D_is_disabled(CollisionPolygon3D{self})
}
func (self methodsCollisionPolygon3D) SetMargin(margin Float) {
	self.Runtime.CollisionPolygon3D_set_margin(CollisionPolygon3D{self}, margin)
}
func (self methodsCollisionPolygon3D) GetMargin() Float {
	return self.Runtime.CollisionPolygon3D_get_margin(CollisionPolygon3D{self})
}

type methodsCollisionShape2D struct {
	_ [0]*methodsCollisionShape2D
	class
}

func (self CollisionShape2D) Node2D() Node2D {
	var parent Node2D
	parent.class = self.class
	return parent
}
func (self methodsCollisionShape2D) SetShape(shape Shape2D) {
	self.Runtime.CollisionShape2D_set_shape(CollisionShape2D{self}, shape)
}
func (self methodsCollisionShape2D) GetShape() Shape2D {
	return self.Runtime.CollisionShape2D_get_shape(CollisionShape2D{self})
}
func (self methodsCollisionShape2D) SetDisabled(disabled bool) {
	self.Runtime.CollisionShape2D_set_disabled(CollisionShape2D{self}, disabled)
}
func (self methodsCollisionShape2D) IsDisabled() bool {
	return self.Runtime.CollisionShape2D_is_disabled(CollisionShape2D{self})
}
func (self methodsCollisionShape2D) SetOneWayCollision(enabled bool) {
	self.Runtime.CollisionShape2D_set_one_way_collision(CollisionShape2D{self}, enabled)
}
func (self methodsCollisionShape2D) IsOneWayCollisionEnabled() bool {
	return self.Runtime.CollisionShape2D_is_one_way_collision_enabled(CollisionShape2D{self})
}
func (self methodsCollisionShape2D) SetOneWayCollisionMargin(margin Float) {
	self.Runtime.CollisionShape2D_set_one_way_collision_margin(CollisionShape2D{self}, margin)
}
func (self methodsCollisionShape2D) GetOneWayCollisionMargin() Float {
	return self.Runtime.CollisionShape2D_get_one_way_collision_margin(CollisionShape2D{self})
}
func (self methodsCollisionShape2D) SetDebugColor(color Color) {
	self.Runtime.CollisionShape2D_set_debug_color(CollisionShape2D{self}, color)
}
func (self methodsCollisionShape2D) GetDebugColor() Color {
	return self.Runtime.CollisionShape2D_get_debug_color(CollisionShape2D{self})
}

type methodsCollisionShape3D struct {
	_ [0]*methodsCollisionShape3D
	class
}

func (self CollisionShape3D) Node3D() Node3D {
	var parent Node3D
	parent.class = self.class
	return parent
}
func (self methodsCollisionShape3D) ResourceChanged(resource Resource) {
	self.Runtime.CollisionShape3D_resource_changed(CollisionShape3D{self}, resource)
}
func (self methodsCollisionShape3D) SetShape(shape Shape3D) {
	self.Runtime.CollisionShape3D_set_shape(CollisionShape3D{self}, shape)
}
func (self methodsCollisionShape3D) GetShape() Shape3D {
	return self.Runtime.CollisionShape3D_get_shape(CollisionShape3D{self})
}
func (self methodsCollisionShape3D) SetDisabled(enable bool) {
	self.Runtime.CollisionShape3D_set_disabled(CollisionShape3D{self}, enable)
}
func (self methodsCollisionShape3D) IsDisabled() bool {
	return self.Runtime.CollisionShape3D_is_disabled(CollisionShape3D{self})
}
func (self methodsCollisionShape3D) MakeConvexFromSiblings() {
	self.Runtime.CollisionShape3D_make_convex_from_siblings(CollisionShape3D{self})
}

type methodsColorPicker struct {
	_ [0]*methodsColorPicker
	class
}

func (self ColorPicker) VBoxContainer() VBoxContainer {
	var parent VBoxContainer
	parent.class = self.class
	return parent
}
func (self methodsColorPicker) SetPickColor(color Color) {
	self.Runtime.ColorPicker_set_pick_color(ColorPicker{self}, color)
}
func (self methodsColorPicker) GetPickColor() Color {
	return self.Runtime.ColorPicker_get_pick_color(ColorPicker{self})
}
func (self methodsColorPicker) SetDeferredMode(mode bool) {
	self.Runtime.ColorPicker_set_deferred_mode(ColorPicker{self}, mode)
}
func (self methodsColorPicker) IsDeferredMode() bool {
	return self.Runtime.ColorPicker_is_deferred_mode(ColorPicker{self})
}
func (self methodsColorPicker) SetColorMode(color_mode ColorPickerColorModeType) {
	self.Runtime.ColorPicker_set_color_mode(ColorPicker{self}, color_mode)
}
func (self methodsColorPicker) GetColorMode() ColorPickerColorModeType {
	return self.Runtime.ColorPicker_get_color_mode(ColorPicker{self})
}
func (self methodsColorPicker) SetEditAlpha(show bool) {
	self.Runtime.ColorPicker_set_edit_alpha(ColorPicker{self}, show)
}
func (self methodsColorPicker) IsEditingAlpha() bool {
	return self.Runtime.ColorPicker_is_editing_alpha(ColorPicker{self})
}
func (self methodsColorPicker) SetCanAddSwatches(enabled bool) {
	self.Runtime.ColorPicker_set_can_add_swatches(ColorPicker{self}, enabled)
}
func (self methodsColorPicker) AreSwatchesEnabled() bool {
	return self.Runtime.ColorPicker_are_swatches_enabled(ColorPicker{self})
}
func (self methodsColorPicker) SetPresetsVisible(visible bool) {
	self.Runtime.ColorPicker_set_presets_visible(ColorPicker{self}, visible)
}
func (self methodsColorPicker) ArePresetsVisible() bool {
	return self.Runtime.ColorPicker_are_presets_visible(ColorPicker{self})
}
func (self methodsColorPicker) SetModesVisible(visible bool) {
	self.Runtime.ColorPicker_set_modes_visible(ColorPicker{self}, visible)
}
func (self methodsColorPicker) AreModesVisible() bool {
	return self.Runtime.ColorPicker_are_modes_visible(ColorPicker{self})
}
func (self methodsColorPicker) SetSamplerVisible(visible bool) {
	self.Runtime.ColorPicker_set_sampler_visible(ColorPicker{self}, visible)
}
func (self methodsColorPicker) IsSamplerVisible() bool {
	return self.Runtime.ColorPicker_is_sampler_visible(ColorPicker{self})
}
func (self methodsColorPicker) SetSlidersVisible(visible bool) {
	self.Runtime.ColorPicker_set_sliders_visible(ColorPicker{self}, visible)
}
func (self methodsColorPicker) AreSlidersVisible() bool {
	return self.Runtime.ColorPicker_are_sliders_visible(ColorPicker{self})
}
func (self methodsColorPicker) SetHexVisible(visible bool) {
	self.Runtime.ColorPicker_set_hex_visible(ColorPicker{self}, visible)
}
func (self methodsColorPicker) IsHexVisible() bool {
	return self.Runtime.ColorPicker_is_hex_visible(ColorPicker{self})
}
func (self methodsColorPicker) AddPreset(color Color) {
	self.Runtime.ColorPicker_add_preset(ColorPicker{self}, color)
}
func (self methodsColorPicker) ErasePreset(color Color) {
	self.Runtime.ColorPicker_erase_preset(ColorPicker{self}, color)
}
func (self methodsColorPicker) GetPresets() PackedColorArray {
	return self.Runtime.ColorPicker_get_presets(ColorPicker{self})
}
func (self methodsColorPicker) AddRecentPreset(color Color) {
	self.Runtime.ColorPicker_add_recent_preset(ColorPicker{self}, color)
}
func (self methodsColorPicker) EraseRecentPreset(color Color) {
	self.Runtime.ColorPicker_erase_recent_preset(ColorPicker{self}, color)
}
func (self methodsColorPicker) GetRecentPresets() PackedColorArray {
	return self.Runtime.ColorPicker_get_recent_presets(ColorPicker{self})
}
func (self methodsColorPicker) SetPickerShape(shape ColorPickerPickerShapeType) {
	self.Runtime.ColorPicker_set_picker_shape(ColorPicker{self}, shape)
}
func (self methodsColorPicker) GetPickerShape() ColorPickerPickerShapeType {
	return self.Runtime.ColorPicker_get_picker_shape(ColorPicker{self})
}

type methodsColorPickerButton struct {
	_ [0]*methodsColorPickerButton
	class
}

func (self ColorPickerButton) Button() Button {
	var parent Button
	parent.class = self.class
	return parent
}
func (self methodsColorPickerButton) SetPickColor(color Color) {
	self.Runtime.ColorPickerButton_set_pick_color(ColorPickerButton{self}, color)
}
func (self methodsColorPickerButton) GetPickColor() Color {
	return self.Runtime.ColorPickerButton_get_pick_color(ColorPickerButton{self})
}
func (self methodsColorPickerButton) GetPicker() ColorPicker {
	return self.Runtime.ColorPickerButton_get_picker(ColorPickerButton{self})
}
func (self methodsColorPickerButton) GetPopup() PopupPanel {
	return self.Runtime.ColorPickerButton_get_popup(ColorPickerButton{self})
}
func (self methodsColorPickerButton) SetEditAlpha(show bool) {
	self.Runtime.ColorPickerButton_set_edit_alpha(ColorPickerButton{self}, show)
}
func (self methodsColorPickerButton) IsEditingAlpha() bool {
	return self.Runtime.ColorPickerButton_is_editing_alpha(ColorPickerButton{self})
}

type methodsColorRect struct {
	_ [0]*methodsColorRect
	class
}

func (self ColorRect) Control() Control { var parent Control; parent.class = self.class; return parent }
func (self methodsColorRect) SetColor(color Color) {
	self.Runtime.ColorRect_set_color(ColorRect{self}, color)
}
func (self methodsColorRect) GetColor() Color {
	return self.Runtime.ColorRect_get_color(ColorRect{self})
}

type methodsCompressedCubemap struct {
	_ [0]*methodsCompressedCubemap
	class
}

func (self CompressedCubemap) CompressedTextureLayered() CompressedTextureLayered {
	var parent CompressedTextureLayered
	parent.class = self.class
	return parent
}

type methodsCompressedCubemapArray struct {
	_ [0]*methodsCompressedCubemapArray
	class
}

func (self CompressedCubemapArray) CompressedTextureLayered() CompressedTextureLayered {
	var parent CompressedTextureLayered
	parent.class = self.class
	return parent
}

type methodsCompressedTexture2D struct {
	_ [0]*methodsCompressedTexture2D
	class
}

func (self CompressedTexture2D) Texture2D() Texture2D {
	var parent Texture2D
	parent.class = self.class
	return parent
}
func (self methodsCompressedTexture2D) Load(path string) int64 {
	return self.Runtime.CompressedTexture2D_load(CompressedTexture2D{self}, path)
}
func (self methodsCompressedTexture2D) GetLoadPath() string {
	return self.Runtime.CompressedTexture2D_get_load_path(CompressedTexture2D{self})
}

type methodsCompressedTexture2DArray struct {
	_ [0]*methodsCompressedTexture2DArray
	class
}

func (self CompressedTexture2DArray) CompressedTextureLayered() CompressedTextureLayered {
	var parent CompressedTextureLayered
	parent.class = self.class
	return parent
}

type methodsCompressedTexture3D struct {
	_ [0]*methodsCompressedTexture3D
	class
}

func (self CompressedTexture3D) Texture3D() Texture3D {
	var parent Texture3D
	parent.class = self.class
	return parent
}
func (self methodsCompressedTexture3D) Load(path string) int64 {
	return self.Runtime.CompressedTexture3D_load(CompressedTexture3D{self}, path)
}
func (self methodsCompressedTexture3D) GetLoadPath() string {
	return self.Runtime.CompressedTexture3D_get_load_path(CompressedTexture3D{self})
}

type methodsCompressedTextureLayered struct {
	_ [0]*methodsCompressedTextureLayered
	class
}

func (self CompressedTextureLayered) TextureLayered() TextureLayered {
	var parent TextureLayered
	parent.class = self.class
	return parent
}
func (self methodsCompressedTextureLayered) Load(path string) int64 {
	return self.Runtime.CompressedTextureLayered_load(CompressedTextureLayered{self}, path)
}
func (self methodsCompressedTextureLayered) GetLoadPath() string {
	return self.Runtime.CompressedTextureLayered_get_load_path(CompressedTextureLayered{self})
}

type methodsConcavePolygonShape2D struct {
	_ [0]*methodsConcavePolygonShape2D
	class
}

func (self ConcavePolygonShape2D) Shape2D() Shape2D {
	var parent Shape2D
	parent.class = self.class
	return parent
}
func (self methodsConcavePolygonShape2D) SetSegments(segments PackedVector2Array) {
	self.Runtime.ConcavePolygonShape2D_set_segments(ConcavePolygonShape2D{self}, segments)
}
func (self methodsConcavePolygonShape2D) GetSegments() PackedVector2Array {
	return self.Runtime.ConcavePolygonShape2D_get_segments(ConcavePolygonShape2D{self})
}

type methodsConcavePolygonShape3D struct {
	_ [0]*methodsConcavePolygonShape3D
	class
}

func (self ConcavePolygonShape3D) Shape3D() Shape3D {
	var parent Shape3D
	parent.class = self.class
	return parent
}
func (self methodsConcavePolygonShape3D) SetFaces(faces PackedVector3Array) {
	self.Runtime.ConcavePolygonShape3D_set_faces(ConcavePolygonShape3D{self}, faces)
}
func (self methodsConcavePolygonShape3D) GetFaces() PackedVector3Array {
	return self.Runtime.ConcavePolygonShape3D_get_faces(ConcavePolygonShape3D{self})
}
func (self methodsConcavePolygonShape3D) SetBackfaceCollisionEnabled(enabled bool) {
	self.Runtime.ConcavePolygonShape3D_set_backface_collision_enabled(ConcavePolygonShape3D{self}, enabled)
}
func (self methodsConcavePolygonShape3D) IsBackfaceCollisionEnabled() bool {
	return self.Runtime.ConcavePolygonShape3D_is_backface_collision_enabled(ConcavePolygonShape3D{self})
}

type methodsConeTwistJoint3D struct {
	_ [0]*methodsConeTwistJoint3D
	class
}

func (self ConeTwistJoint3D) Joint3D() Joint3D {
	var parent Joint3D
	parent.class = self.class
	return parent
}
func (self methodsConeTwistJoint3D) SetParam(param ConeTwistJoint3DParam, value Float) {
	self.Runtime.ConeTwistJoint3D_set_param(ConeTwistJoint3D{self}, param, value)
}
func (self methodsConeTwistJoint3D) GetParam(param ConeTwistJoint3DParam) Float {
	return self.Runtime.ConeTwistJoint3D_get_param(ConeTwistJoint3D{self}, param)
}

type methodsConfigFile struct {
	_ [0]*methodsConfigFile
	class
}

func (self ConfigFile) RefCounted() RefCounted {
	var parent RefCounted
	parent.class = self.class
	return parent
}
func (self methodsConfigFile) SetValue(section string, key string, value any) {
	self.Runtime.ConfigFile_set_value(ConfigFile{self}, section, key, value)
}
func (self methodsConfigFile) GetValue(section string, key string, def any) any {
	return self.Runtime.ConfigFile_get_value(ConfigFile{self}, section, key, def)
}
func (self methodsConfigFile) HasSection(section string) bool {
	return self.Runtime.ConfigFile_has_section(ConfigFile{self}, section)
}
func (self methodsConfigFile) HasSectionKey(section string, key string) bool {
	return self.Runtime.ConfigFile_has_section_key(ConfigFile{self}, section, key)
}
func (self methodsConfigFile) GetSections() PackedStringArray {
	return self.Runtime.ConfigFile_get_sections(ConfigFile{self})
}
func (self methodsConfigFile) GetSectionKeys(section string) PackedStringArray {
	return self.Runtime.ConfigFile_get_section_keys(ConfigFile{self}, section)
}
func (self methodsConfigFile) EraseSection(section string) {
	self.Runtime.ConfigFile_erase_section(ConfigFile{self}, section)
}
func (self methodsConfigFile) EraseSectionKey(section string, key string) {
	self.Runtime.ConfigFile_erase_section_key(ConfigFile{self}, section, key)
}
func (self methodsConfigFile) Load(path string) int64 {
	return self.Runtime.ConfigFile_load(ConfigFile{self}, path)
}
func (self methodsConfigFile) Parse(data string) int64 {
	return self.Runtime.ConfigFile_parse(ConfigFile{self}, data)
}
func (self methodsConfigFile) Save(path string) int64 {
	return self.Runtime.ConfigFile_save(ConfigFile{self}, path)
}
func (self methodsConfigFile) EncodeToText() string {
	return self.Runtime.ConfigFile_encode_to_text(ConfigFile{self})
}
func (self methodsConfigFile) LoadEncrypted(path string, key PackedByteArray) int64 {
	return self.Runtime.ConfigFile_load_encrypted(ConfigFile{self}, path, key)
}
func (self methodsConfigFile) LoadEncryptedPass(path string, password string) int64 {
	return self.Runtime.ConfigFile_load_encrypted_pass(ConfigFile{self}, path, password)
}
func (self methodsConfigFile) SaveEncrypted(path string, key PackedByteArray) int64 {
	return self.Runtime.ConfigFile_save_encrypted(ConfigFile{self}, path, key)
}
func (self methodsConfigFile) SaveEncryptedPass(path string, password string) int64 {
	return self.Runtime.ConfigFile_save_encrypted_pass(ConfigFile{self}, path, password)
}
func (self methodsConfigFile) Clear() {
	self.Runtime.ConfigFile_clear(ConfigFile{self})
}

type methodsConfirmationDialog struct {
	_ [0]*methodsConfirmationDialog
	class
}

func (self ConfirmationDialog) AcceptDialog() AcceptDialog {
	var parent AcceptDialog
	parent.class = self.class
	return parent
}
func (self methodsConfirmationDialog) GetCancelButton() Button {
	return self.Runtime.ConfirmationDialog_get_cancel_button(ConfirmationDialog{self})
}
func (self methodsConfirmationDialog) SetCancelButtonText(text string) {
	self.Runtime.ConfirmationDialog_set_cancel_button_text(ConfirmationDialog{self}, text)
}
func (self methodsConfirmationDialog) GetCancelButtonText() string {
	return self.Runtime.ConfirmationDialog_get_cancel_button_text(ConfirmationDialog{self})
}

type methodsContainer struct {
	_ [0]*methodsContainer
	class
}

func (self Container) Control() Control { var parent Control; parent.class = self.class; return parent }
func (self methodsContainer) QueueSort() {
	self.Runtime.Container_queue_sort(Container{self})
}
func (self methodsContainer) FitChildInRect(child Control, rect Rect2) {
	self.Runtime.Container_fit_child_in_rect(Container{self}, child, rect)
}

type methodsControl struct {
	_ [0]*methodsControl
	class
}

func (self Control) CanvasItem() CanvasItem {
	var parent CanvasItem
	parent.class = self.class
	return parent
}
func (self methodsControl) AcceptEvent() {
	self.Runtime.Control_accept_event(Control{self})
}
func (self methodsControl) GetMinimumSize() Vector2 {
	return self.Runtime.Control_get_minimum_size(Control{self})
}
func (self methodsControl) GetCombinedMinimumSize() Vector2 {
	return self.Runtime.Control_get_combined_minimum_size(Control{self})
}
func (self methodsControl) SetAnchorsPreset(preset ControlLayoutPreset, keep_offsets bool) {
	self.Runtime.Control_set_anchors_preset(Control{self}, preset, keep_offsets)
}
func (self methodsControl) SetOffsetsPreset(preset ControlLayoutPreset, resize_mode ControlLayoutPresetMode, margin int64) {
	self.Runtime.Control_set_offsets_preset(Control{self}, preset, resize_mode, margin)
}
func (self methodsControl) SetAnchorsAndOffsetsPreset(preset ControlLayoutPreset, resize_mode ControlLayoutPresetMode, margin int64) {
	self.Runtime.Control_set_anchors_and_offsets_preset(Control{self}, preset, resize_mode, margin)
}
func (self methodsControl) SetAnchor(side Side, anchor Float, keep_offset bool, push_opposite_anchor bool) {
	self.Runtime.Control_set_anchor(Control{self}, side, anchor, keep_offset, push_opposite_anchor)
}
func (self methodsControl) GetAnchor(side Side) Float {
	return self.Runtime.Control_get_anchor(Control{self}, side)
}
func (self methodsControl) SetOffset(side Side, offset Float) {
	self.Runtime.Control_set_offset(Control{self}, side, offset)
}
func (self methodsControl) GetOffset(offset Side) Float {
	return self.Runtime.Control_get_offset(Control{self}, offset)
}
func (self methodsControl) SetAnchorAndOffset(side Side, anchor Float, offset Float, push_opposite_anchor bool) {
	self.Runtime.Control_set_anchor_and_offset(Control{self}, side, anchor, offset, push_opposite_anchor)
}
func (self methodsControl) SetBegin(position Vector2) {
	self.Runtime.Control_set_begin(Control{self}, position)
}
func (self methodsControl) SetEnd(position Vector2) {
	self.Runtime.Control_set_end(Control{self}, position)
}
func (self methodsControl) SetPosition(position Vector2, keep_offsets bool) {
	self.Runtime.Control_set_position(Control{self}, position, keep_offsets)
}
func (self methodsControl) SetSize(size Vector2, keep_offsets bool) {
	self.Runtime.Control_set_size(Control{self}, size, keep_offsets)
}
func (self methodsControl) ResetSize() {
	self.Runtime.Control_reset_size(Control{self})
}
func (self methodsControl) SetCustomMinimumSize(size Vector2) {
	self.Runtime.Control_set_custom_minimum_size(Control{self}, size)
}
func (self methodsControl) SetGlobalPosition(position Vector2, keep_offsets bool) {
	self.Runtime.Control_set_global_position(Control{self}, position, keep_offsets)
}
func (self methodsControl) SetRotation(radians Float) {
	self.Runtime.Control_set_rotation(Control{self}, radians)
}
func (self methodsControl) SetRotationDegrees(degrees Float) {
	self.Runtime.Control_set_rotation_degrees(Control{self}, degrees)
}
func (self methodsControl) SetScale(scale Vector2) {
	self.Runtime.Control_set_scale(Control{self}, scale)
}
func (self methodsControl) SetPivotOffset(pivot_offset Vector2) {
	self.Runtime.Control_set_pivot_offset(Control{self}, pivot_offset)
}
func (self methodsControl) GetBegin() Vector2 {
	return self.Runtime.Control_get_begin(Control{self})
}
func (self methodsControl) GetEnd() Vector2 {
	return self.Runtime.Control_get_end(Control{self})
}
func (self methodsControl) GetPosition() Vector2 {
	return self.Runtime.Control_get_position(Control{self})
}
func (self methodsControl) GetSize() Vector2 {
	return self.Runtime.Control_get_size(Control{self})
}
func (self methodsControl) GetRotation() Float {
	return self.Runtime.Control_get_rotation(Control{self})
}
func (self methodsControl) GetRotationDegrees() Float {
	return self.Runtime.Control_get_rotation_degrees(Control{self})
}
func (self methodsControl) GetScale() Vector2 {
	return self.Runtime.Control_get_scale(Control{self})
}
func (self methodsControl) GetPivotOffset() Vector2 {
	return self.Runtime.Control_get_pivot_offset(Control{self})
}
func (self methodsControl) GetCustomMinimumSize() Vector2 {
	return self.Runtime.Control_get_custom_minimum_size(Control{self})
}
func (self methodsControl) GetParentAreaSize() Vector2 {
	return self.Runtime.Control_get_parent_area_size(Control{self})
}
func (self methodsControl) GetGlobalPosition() Vector2 {
	return self.Runtime.Control_get_global_position(Control{self})
}
func (self methodsControl) GetScreenPosition() Vector2 {
	return self.Runtime.Control_get_screen_position(Control{self})
}
func (self methodsControl) GetRect() Rect2 {
	return self.Runtime.Control_get_rect(Control{self})
}
func (self methodsControl) GetGlobalRect() Rect2 {
	return self.Runtime.Control_get_global_rect(Control{self})
}
func (self methodsControl) SetFocusMode(mode ControlFocusMode) {
	self.Runtime.Control_set_focus_mode(Control{self}, mode)
}
func (self methodsControl) GetFocusMode() ControlFocusMode {
	return self.Runtime.Control_get_focus_mode(Control{self})
}
func (self methodsControl) HasFocus() bool {
	return self.Runtime.Control_has_focus(Control{self})
}
func (self methodsControl) GrabFocus() {
	self.Runtime.Control_grab_focus(Control{self})
}
func (self methodsControl) ReleaseFocus() {
	self.Runtime.Control_release_focus(Control{self})
}
func (self methodsControl) FindPrevValidFocus() Control {
	return self.Runtime.Control_find_prev_valid_focus(Control{self})
}
func (self methodsControl) FindNextValidFocus() Control {
	return self.Runtime.Control_find_next_valid_focus(Control{self})
}
func (self methodsControl) FindValidFocusNeighbor(side Side) Control {
	return self.Runtime.Control_find_valid_focus_neighbor(Control{self}, side)
}
func (self methodsControl) SetHSizeFlags(flags ControlSizeFlags) {
	self.Runtime.Control_set_h_size_flags(Control{self}, flags)
}
func (self methodsControl) GetHSizeFlags() ControlSizeFlags {
	return self.Runtime.Control_get_h_size_flags(Control{self})
}
func (self methodsControl) SetStretchRatio(ratio Float) {
	self.Runtime.Control_set_stretch_ratio(Control{self}, ratio)
}
func (self methodsControl) GetStretchRatio() Float {
	return self.Runtime.Control_get_stretch_ratio(Control{self})
}
func (self methodsControl) SetVSizeFlags(flags ControlSizeFlags) {
	self.Runtime.Control_set_v_size_flags(Control{self}, flags)
}
func (self methodsControl) GetVSizeFlags() ControlSizeFlags {
	return self.Runtime.Control_get_v_size_flags(Control{self})
}
func (self methodsControl) SetTheme(theme Theme) {
	self.Runtime.Control_set_theme(Control{self}, theme)
}
func (self methodsControl) GetTheme() Theme {
	return self.Runtime.Control_get_theme(Control{self})
}
func (self methodsControl) SetThemeTypeVariation(theme_type string) {
	self.Runtime.Control_set_theme_type_variation(Control{self}, theme_type)
}
func (self methodsControl) GetThemeTypeVariation() string {
	return self.Runtime.Control_get_theme_type_variation(Control{self})
}
func (self methodsControl) BeginBulkThemeOverride() {
	self.Runtime.Control_begin_bulk_theme_override(Control{self})
}
func (self methodsControl) EndBulkThemeOverride() {
	self.Runtime.Control_end_bulk_theme_override(Control{self})
}
func (self methodsControl) AddThemeIconOverride(name string, texture Texture2D) {
	self.Runtime.Control_add_theme_icon_override(Control{self}, name, texture)
}
func (self methodsControl) AddThemeStyleboxOverride(name string, stylebox StyleBox) {
	self.Runtime.Control_add_theme_stylebox_override(Control{self}, name, stylebox)
}
func (self methodsControl) AddThemeFontOverride(name string, font Font) {
	self.Runtime.Control_add_theme_font_override(Control{self}, name, font)
}
func (self methodsControl) AddThemeFontSizeOverride(name string, font_size int64) {
	self.Runtime.Control_add_theme_font_size_override(Control{self}, name, font_size)
}
func (self methodsControl) AddThemeColorOverride(name string, color Color) {
	self.Runtime.Control_add_theme_color_override(Control{self}, name, color)
}
func (self methodsControl) AddThemeConstantOverride(name string, constant int64) {
	self.Runtime.Control_add_theme_constant_override(Control{self}, name, constant)
}
func (self methodsControl) RemoveThemeIconOverride(name string) {
	self.Runtime.Control_remove_theme_icon_override(Control{self}, name)
}
func (self methodsControl) RemoveThemeStyleboxOverride(name string) {
	self.Runtime.Control_remove_theme_stylebox_override(Control{self}, name)
}
func (self methodsControl) RemoveThemeFontOverride(name string) {
	self.Runtime.Control_remove_theme_font_override(Control{self}, name)
}
func (self methodsControl) RemoveThemeFontSizeOverride(name string) {
	self.Runtime.Control_remove_theme_font_size_override(Control{self}, name)
}
func (self methodsControl) RemoveThemeColorOverride(name string) {
	self.Runtime.Control_remove_theme_color_override(Control{self}, name)
}
func (self methodsControl) RemoveThemeConstantOverride(name string) {
	self.Runtime.Control_remove_theme_constant_override(Control{self}, name)
}
func (self methodsControl) GetThemeIcon(name string, theme_type string) Texture2D {
	return self.Runtime.Control_get_theme_icon(Control{self}, name, theme_type)
}
func (self methodsControl) GetThemeStylebox(name string, theme_type string) StyleBox {
	return self.Runtime.Control_get_theme_stylebox(Control{self}, name, theme_type)
}
func (self methodsControl) GetThemeFont(name string, theme_type string) Font {
	return self.Runtime.Control_get_theme_font(Control{self}, name, theme_type)
}
func (self methodsControl) GetThemeFontSize(name string, theme_type string) int64 {
	return self.Runtime.Control_get_theme_font_size(Control{self}, name, theme_type)
}
func (self methodsControl) GetThemeColor(name string, theme_type string) Color {
	return self.Runtime.Control_get_theme_color(Control{self}, name, theme_type)
}
func (self methodsControl) GetThemeConstant(name string, theme_type string) int64 {
	return self.Runtime.Control_get_theme_constant(Control{self}, name, theme_type)
}
func (self methodsControl) HasThemeIconOverride(name string) bool {
	return self.Runtime.Control_has_theme_icon_override(Control{self}, name)
}
func (self methodsControl) HasThemeStyleboxOverride(name string) bool {
	return self.Runtime.Control_has_theme_stylebox_override(Control{self}, name)
}
func (self methodsControl) HasThemeFontOverride(name string) bool {
	return self.Runtime.Control_has_theme_font_override(Control{self}, name)
}
func (self methodsControl) HasThemeFontSizeOverride(name string) bool {
	return self.Runtime.Control_has_theme_font_size_override(Control{self}, name)
}
func (self methodsControl) HasThemeColorOverride(name string) bool {
	return self.Runtime.Control_has_theme_color_override(Control{self}, name)
}
func (self methodsControl) HasThemeConstantOverride(name string) bool {
	return self.Runtime.Control_has_theme_constant_override(Control{self}, name)
}
func (self methodsControl) HasThemeIcon(name string, theme_type string) bool {
	return self.Runtime.Control_has_theme_icon(Control{self}, name, theme_type)
}
func (self methodsControl) HasThemeStylebox(name string, theme_type string) bool {
	return self.Runtime.Control_has_theme_stylebox(Control{self}, name, theme_type)
}
func (self methodsControl) HasThemeFont(name string, theme_type string) bool {
	return self.Runtime.Control_has_theme_font(Control{self}, name, theme_type)
}
func (self methodsControl) HasThemeFontSize(name string, theme_type string) bool {
	return self.Runtime.Control_has_theme_font_size(Control{self}, name, theme_type)
}
func (self methodsControl) HasThemeColor(name string, theme_type string) bool {
	return self.Runtime.Control_has_theme_color(Control{self}, name, theme_type)
}
func (self methodsControl) HasThemeConstant(name string, theme_type string) bool {
	return self.Runtime.Control_has_theme_constant(Control{self}, name, theme_type)
}
func (self methodsControl) GetThemeDefaultBaseScale() Float {
	return self.Runtime.Control_get_theme_default_base_scale(Control{self})
}
func (self methodsControl) GetThemeDefaultFont() Font {
	return self.Runtime.Control_get_theme_default_font(Control{self})
}
func (self methodsControl) GetThemeDefaultFontSize() int64 {
	return self.Runtime.Control_get_theme_default_font_size(Control{self})
}
func (self methodsControl) GetParentControl() Control {
	return self.Runtime.Control_get_parent_control(Control{self})
}
func (self methodsControl) SetHGrowDirection(direction ControlGrowDirection) {
	self.Runtime.Control_set_h_grow_direction(Control{self}, direction)
}
func (self methodsControl) GetHGrowDirection() ControlGrowDirection {
	return self.Runtime.Control_get_h_grow_direction(Control{self})
}
func (self methodsControl) SetVGrowDirection(direction ControlGrowDirection) {
	self.Runtime.Control_set_v_grow_direction(Control{self}, direction)
}
func (self methodsControl) GetVGrowDirection() ControlGrowDirection {
	return self.Runtime.Control_get_v_grow_direction(Control{self})
}
func (self methodsControl) SetTooltipText(hint string) {
	self.Runtime.Control_set_tooltip_text(Control{self}, hint)
}
func (self methodsControl) GetTooltipText() string {
	return self.Runtime.Control_get_tooltip_text(Control{self})
}
func (self methodsControl) GetTooltip(at_position Vector2) string {
	return self.Runtime.Control_get_tooltip(Control{self}, at_position)
}
func (self methodsControl) SetDefaultCursorShape(shape ControlCursorShape) {
	self.Runtime.Control_set_default_cursor_shape(Control{self}, shape)
}
func (self methodsControl) GetDefaultCursorShape() ControlCursorShape {
	return self.Runtime.Control_get_default_cursor_shape(Control{self})
}
func (self methodsControl) GetCursorShape(position Vector2) ControlCursorShape {
	return self.Runtime.Control_get_cursor_shape(Control{self}, position)
}
func (self methodsControl) SetFocusNeighbor(side Side, neighbor NodePath) {
	self.Runtime.Control_set_focus_neighbor(Control{self}, side, neighbor)
}
func (self methodsControl) GetFocusNeighbor(side Side) NodePath {
	return self.Runtime.Control_get_focus_neighbor(Control{self}, side)
}
func (self methodsControl) SetFocusNext(next NodePath) {
	self.Runtime.Control_set_focus_next(Control{self}, next)
}
func (self methodsControl) GetFocusNext() NodePath {
	return self.Runtime.Control_get_focus_next(Control{self})
}
func (self methodsControl) SetFocusPrevious(previous NodePath) {
	self.Runtime.Control_set_focus_previous(Control{self}, previous)
}
func (self methodsControl) GetFocusPrevious() NodePath {
	return self.Runtime.Control_get_focus_previous(Control{self})
}
func (self methodsControl) ForceDrag(data any, preview Control) {
	self.Runtime.Control_force_drag(Control{self}, data, preview)
}
func (self methodsControl) SetMouseFilter(filter ControlMouseFilter) {
	self.Runtime.Control_set_mouse_filter(Control{self}, filter)
}
func (self methodsControl) GetMouseFilter() ControlMouseFilter {
	return self.Runtime.Control_get_mouse_filter(Control{self})
}
func (self methodsControl) SetForcePassScrollEvents(force_pass_scroll_events bool) {
	self.Runtime.Control_set_force_pass_scroll_events(Control{self}, force_pass_scroll_events)
}
func (self methodsControl) IsForcePassScrollEvents() bool {
	return self.Runtime.Control_is_force_pass_scroll_events(Control{self})
}
func (self methodsControl) SetClipContents(enable bool) {
	self.Runtime.Control_set_clip_contents(Control{self}, enable)
}
func (self methodsControl) IsClippingContents() bool {
	return self.Runtime.Control_is_clipping_contents(Control{self})
}
func (self methodsControl) GrabClickFocus() {
	self.Runtime.Control_grab_click_focus(Control{self})
}
func (self methodsControl) SetDragForwarding(drag_func Callable, can_drop_func Callable, drop_func Callable) {
	self.Runtime.Control_set_drag_forwarding(Control{self}, drag_func, can_drop_func, drop_func)
}
func (self methodsControl) SetDragPreview(control Control) {
	self.Runtime.Control_set_drag_preview(Control{self}, control)
}
func (self methodsControl) IsDragSuccessful() bool {
	return self.Runtime.Control_is_drag_successful(Control{self})
}
func (self methodsControl) WarpMouse(position Vector2) {
	self.Runtime.Control_warp_mouse(Control{self}, position)
}
func (self methodsControl) SetShortcutContext(node Node) {
	self.Runtime.Control_set_shortcut_context(Control{self}, node)
}
func (self methodsControl) GetShortcutContext() Node {
	return self.Runtime.Control_get_shortcut_context(Control{self})
}
func (self methodsControl) UpdateMinimumSize() {
	self.Runtime.Control_update_minimum_size(Control{self})
}
func (self methodsControl) SetLayoutDirection(direction ControlLayoutDirection) {
	self.Runtime.Control_set_layout_direction(Control{self}, direction)
}
func (self methodsControl) GetLayoutDirection() ControlLayoutDirection {
	return self.Runtime.Control_get_layout_direction(Control{self})
}
func (self methodsControl) IsLayoutRtl() bool {
	return self.Runtime.Control_is_layout_rtl(Control{self})
}
func (self methodsControl) SetAutoTranslate(enable bool) {
	self.Runtime.Control_set_auto_translate(Control{self}, enable)
}
func (self methodsControl) IsAutoTranslating() bool {
	return self.Runtime.Control_is_auto_translating(Control{self})
}
func (self methodsControl) SetLocalizeNumeralSystem(enable bool) {
	self.Runtime.Control_set_localize_numeral_system(Control{self}, enable)
}
func (self methodsControl) IsLocalizingNumeralSystem() bool {
	return self.Runtime.Control_is_localizing_numeral_system(Control{self})
}

type methodsConvexPolygonShape2D struct {
	_ [0]*methodsConvexPolygonShape2D
	class
}

func (self ConvexPolygonShape2D) Shape2D() Shape2D {
	var parent Shape2D
	parent.class = self.class
	return parent
}
func (self methodsConvexPolygonShape2D) SetPointCloud(point_cloud PackedVector2Array) {
	self.Runtime.ConvexPolygonShape2D_set_point_cloud(ConvexPolygonShape2D{self}, point_cloud)
}
func (self methodsConvexPolygonShape2D) SetPoints(points PackedVector2Array) {
	self.Runtime.ConvexPolygonShape2D_set_points(ConvexPolygonShape2D{self}, points)
}
func (self methodsConvexPolygonShape2D) GetPoints() PackedVector2Array {
	return self.Runtime.ConvexPolygonShape2D_get_points(ConvexPolygonShape2D{self})
}

type methodsConvexPolygonShape3D struct {
	_ [0]*methodsConvexPolygonShape3D
	class
}

func (self ConvexPolygonShape3D) Shape3D() Shape3D {
	var parent Shape3D
	parent.class = self.class
	return parent
}
func (self methodsConvexPolygonShape3D) SetPoints(points PackedVector3Array) {
	self.Runtime.ConvexPolygonShape3D_set_points(ConvexPolygonShape3D{self}, points)
}
func (self methodsConvexPolygonShape3D) GetPoints() PackedVector3Array {
	return self.Runtime.ConvexPolygonShape3D_get_points(ConvexPolygonShape3D{self})
}

type methodsCrypto struct {
	_ [0]*methodsCrypto
	class
}

func (self Crypto) RefCounted() RefCounted {
	var parent RefCounted
	parent.class = self.class
	return parent
}
func (self methodsCrypto) GenerateRandomBytes(size int64) PackedByteArray {
	return self.Runtime.Crypto_generate_random_bytes(Crypto{self}, size)
}
func (self methodsCrypto) GenerateRsa(size int64) CryptoKey {
	return self.Runtime.Crypto_generate_rsa(Crypto{self}, size)
}
func (self methodsCrypto) GenerateSelfSignedCertificate(key CryptoKey, issuer_name string, not_before string, not_after string) X509Certificate {
	return self.Runtime.Crypto_generate_self_signed_certificate(Crypto{self}, key, issuer_name, not_before, not_after)
}
func (self methodsCrypto) Sign(hash_type HashingContextHashType, hash PackedByteArray, key CryptoKey) PackedByteArray {
	return self.Runtime.Crypto_sign(Crypto{self}, hash_type, hash, key)
}
func (self methodsCrypto) Verify(hash_type HashingContextHashType, hash PackedByteArray, signature PackedByteArray, key CryptoKey) bool {
	return self.Runtime.Crypto_verify(Crypto{self}, hash_type, hash, signature, key)
}
func (self methodsCrypto) Encrypt(key CryptoKey, plaintext PackedByteArray) PackedByteArray {
	return self.Runtime.Crypto_encrypt(Crypto{self}, key, plaintext)
}
func (self methodsCrypto) Decrypt(key CryptoKey, ciphertext PackedByteArray) PackedByteArray {
	return self.Runtime.Crypto_decrypt(Crypto{self}, key, ciphertext)
}
func (self methodsCrypto) HmacDigest(hash_type HashingContextHashType, key PackedByteArray, msg PackedByteArray) PackedByteArray {
	return self.Runtime.Crypto_hmac_digest(Crypto{self}, hash_type, key, msg)
}
func (self methodsCrypto) ConstantTimeCompare(trusted PackedByteArray, received PackedByteArray) bool {
	return self.Runtime.Crypto_constant_time_compare(Crypto{self}, trusted, received)
}

type methodsCryptoKey struct {
	_ [0]*methodsCryptoKey
	class
}

func (self CryptoKey) Resource() Resource {
	var parent Resource
	parent.class = self.class
	return parent
}
func (self methodsCryptoKey) Save(path string, public_only bool) int64 {
	return self.Runtime.CryptoKey_save(CryptoKey{self}, path, public_only)
}
func (self methodsCryptoKey) Load(path string, public_only bool) int64 {
	return self.Runtime.CryptoKey_load(CryptoKey{self}, path, public_only)
}
func (self methodsCryptoKey) IsPublicOnly() bool {
	return self.Runtime.CryptoKey_is_public_only(CryptoKey{self})
}
func (self methodsCryptoKey) SaveToString(public_only bool) string {
	return self.Runtime.CryptoKey_save_to_string(CryptoKey{self}, public_only)
}
func (self methodsCryptoKey) LoadFromString(string_key string, public_only bool) int64 {
	return self.Runtime.CryptoKey_load_from_string(CryptoKey{self}, string_key, public_only)
}

type methodsCubemap struct {
	_ [0]*methodsCubemap
	class
}

func (self Cubemap) ImageTextureLayered() ImageTextureLayered {
	var parent ImageTextureLayered
	parent.class = self.class
	return parent
}
func (self methodsCubemap) CreatePlaceholder() Resource {
	return self.Runtime.Cubemap_create_placeholder(Cubemap{self})
}

type methodsCubemapArray struct {
	_ [0]*methodsCubemapArray
	class
}

func (self CubemapArray) ImageTextureLayered() ImageTextureLayered {
	var parent ImageTextureLayered
	parent.class = self.class
	return parent
}
func (self methodsCubemapArray) CreatePlaceholder() Resource {
	return self.Runtime.CubemapArray_create_placeholder(CubemapArray{self})
}

type methodsCurve struct {
	_ [0]*methodsCurve
	class
}

func (self Curve) Resource() Resource { var parent Resource; parent.class = self.class; return parent }
func (self methodsCurve) GetPointCount() int64 {
	return self.Runtime.Curve_get_point_count(Curve{self})
}
func (self methodsCurve) SetPointCount(count int64) {
	self.Runtime.Curve_set_point_count(Curve{self}, count)
}
func (self methodsCurve) AddPoint(position Vector2, left_tangent Float, right_tangent Float, left_mode CurveTangentMode, right_mode CurveTangentMode) int64 {
	return self.Runtime.Curve_add_point(Curve{self}, position, left_tangent, right_tangent, left_mode, right_mode)
}
func (self methodsCurve) RemovePoint(index int64) {
	self.Runtime.Curve_remove_point(Curve{self}, index)
}
func (self methodsCurve) ClearPoints() {
	self.Runtime.Curve_clear_points(Curve{self})
}
func (self methodsCurve) GetPointPosition(index int64) Vector2 {
	return self.Runtime.Curve_get_point_position(Curve{self}, index)
}
func (self methodsCurve) SetPointValue(index int64, y Float) {
	self.Runtime.Curve_set_point_value(Curve{self}, index, y)
}
func (self methodsCurve) SetPointOffset(index int64, offset Float) int64 {
	return self.Runtime.Curve_set_point_offset(Curve{self}, index, offset)
}
func (self methodsCurve) Sample(offset Float) Float {
	return self.Runtime.Curve_sample(Curve{self}, offset)
}
func (self methodsCurve) SampleBaked(offset Float) Float {
	return self.Runtime.Curve_sample_baked(Curve{self}, offset)
}
func (self methodsCurve) GetPointLeftTangent(index int64) Float {
	return self.Runtime.Curve_get_point_left_tangent(Curve{self}, index)
}
func (self methodsCurve) GetPointRightTangent(index int64) Float {
	return self.Runtime.Curve_get_point_right_tangent(Curve{self}, index)
}
func (self methodsCurve) GetPointLeftMode(index int64) CurveTangentMode {
	return self.Runtime.Curve_get_point_left_mode(Curve{self}, index)
}
func (self methodsCurve) GetPointRightMode(index int64) CurveTangentMode {
	return self.Runtime.Curve_get_point_right_mode(Curve{self}, index)
}
func (self methodsCurve) SetPointLeftTangent(index int64, tangent Float) {
	self.Runtime.Curve_set_point_left_tangent(Curve{self}, index, tangent)
}
func (self methodsCurve) SetPointRightTangent(index int64, tangent Float) {
	self.Runtime.Curve_set_point_right_tangent(Curve{self}, index, tangent)
}
func (self methodsCurve) SetPointLeftMode(index int64, mode CurveTangentMode) {
	self.Runtime.Curve_set_point_left_mode(Curve{self}, index, mode)
}
func (self methodsCurve) SetPointRightMode(index int64, mode CurveTangentMode) {
	self.Runtime.Curve_set_point_right_mode(Curve{self}, index, mode)
}
func (self methodsCurve) GetMinValue() Float {
	return self.Runtime.Curve_get_min_value(Curve{self})
}
func (self methodsCurve) SetMinValue(min Float) {
	self.Runtime.Curve_set_min_value(Curve{self}, min)
}
func (self methodsCurve) GetMaxValue() Float {
	return self.Runtime.Curve_get_max_value(Curve{self})
}
func (self methodsCurve) SetMaxValue(max Float) {
	self.Runtime.Curve_set_max_value(Curve{self}, max)
}
func (self methodsCurve) CleanDupes() {
	self.Runtime.Curve_clean_dupes(Curve{self})
}
func (self methodsCurve) Bake() {
	self.Runtime.Curve_bake(Curve{self})
}
func (self methodsCurve) GetBakeResolution() int64 {
	return self.Runtime.Curve_get_bake_resolution(Curve{self})
}
func (self methodsCurve) SetBakeResolution(resolution int64) {
	self.Runtime.Curve_set_bake_resolution(Curve{self}, resolution)
}

type methodsCurve2D struct {
	_ [0]*methodsCurve2D
	class
}

func (self Curve2D) Resource() Resource {
	var parent Resource
	parent.class = self.class
	return parent
}
func (self methodsCurve2D) GetPointCount() int64 {
	return self.Runtime.Curve2D_get_point_count(Curve2D{self})
}
func (self methodsCurve2D) SetPointCount(count int64) {
	self.Runtime.Curve2D_set_point_count(Curve2D{self}, count)
}
func (self methodsCurve2D) AddPoint(position Vector2, in Vector2, out Vector2, index int64) {
	self.Runtime.Curve2D_add_point(Curve2D{self}, position, in, out, index)
}
func (self methodsCurve2D) SetPointPosition(idx int64, position Vector2) {
	self.Runtime.Curve2D_set_point_position(Curve2D{self}, idx, position)
}
func (self methodsCurve2D) GetPointPosition(idx int64) Vector2 {
	return self.Runtime.Curve2D_get_point_position(Curve2D{self}, idx)
}
func (self methodsCurve2D) SetPointIn(idx int64, position Vector2) {
	self.Runtime.Curve2D_set_point_in(Curve2D{self}, idx, position)
}
func (self methodsCurve2D) GetPointIn(idx int64) Vector2 {
	return self.Runtime.Curve2D_get_point_in(Curve2D{self}, idx)
}
func (self methodsCurve2D) SetPointOut(idx int64, position Vector2) {
	self.Runtime.Curve2D_set_point_out(Curve2D{self}, idx, position)
}
func (self methodsCurve2D) GetPointOut(idx int64) Vector2 {
	return self.Runtime.Curve2D_get_point_out(Curve2D{self}, idx)
}
func (self methodsCurve2D) RemovePoint(idx int64) {
	self.Runtime.Curve2D_remove_point(Curve2D{self}, idx)
}
func (self methodsCurve2D) ClearPoints() {
	self.Runtime.Curve2D_clear_points(Curve2D{self})
}
func (self methodsCurve2D) Sample(idx int64, t Float) Vector2 {
	return self.Runtime.Curve2D_sample(Curve2D{self}, idx, t)
}
func (self methodsCurve2D) Samplef(fofs Float) Vector2 {
	return self.Runtime.Curve2D_samplef(Curve2D{self}, fofs)
}
func (self methodsCurve2D) SetBakeInterval(distance Float) {
	self.Runtime.Curve2D_set_bake_interval(Curve2D{self}, distance)
}
func (self methodsCurve2D) GetBakeInterval() Float {
	return self.Runtime.Curve2D_get_bake_interval(Curve2D{self})
}
func (self methodsCurve2D) GetBakedLength() Float {
	return self.Runtime.Curve2D_get_baked_length(Curve2D{self})
}
func (self methodsCurve2D) SampleBaked(offset Float, cubic bool) Vector2 {
	return self.Runtime.Curve2D_sample_baked(Curve2D{self}, offset, cubic)
}
func (self methodsCurve2D) SampleBakedWithRotation(offset Float, cubic bool) Transform2D {
	return self.Runtime.Curve2D_sample_baked_with_rotation(Curve2D{self}, offset, cubic)
}
func (self methodsCurve2D) GetBakedPoints() PackedVector2Array {
	return self.Runtime.Curve2D_get_baked_points(Curve2D{self})
}
func (self methodsCurve2D) GetClosestPoint(to_point Vector2) Vector2 {
	return self.Runtime.Curve2D_get_closest_point(Curve2D{self}, to_point)
}
func (self methodsCurve2D) GetClosestOffset(to_point Vector2) Float {
	return self.Runtime.Curve2D_get_closest_offset(Curve2D{self}, to_point)
}
func (self methodsCurve2D) Tessellate(max_stages int64, tolerance_degrees Float) PackedVector2Array {
	return self.Runtime.Curve2D_tessellate(Curve2D{self}, max_stages, tolerance_degrees)
}
func (self methodsCurve2D) TessellateEvenLength(max_stages int64, tolerance_length Float) PackedVector2Array {
	return self.Runtime.Curve2D_tessellate_even_length(Curve2D{self}, max_stages, tolerance_length)
}

type methodsCurve3D struct {
	_ [0]*methodsCurve3D
	class
}

func (self Curve3D) Resource() Resource {
	var parent Resource
	parent.class = self.class
	return parent
}
func (self methodsCurve3D) GetPointCount() int64 {
	return self.Runtime.Curve3D_get_point_count(Curve3D{self})
}
func (self methodsCurve3D) SetPointCount(count int64) {
	self.Runtime.Curve3D_set_point_count(Curve3D{self}, count)
}
func (self methodsCurve3D) AddPoint(position Vector3, in Vector3, out Vector3, index int64) {
	self.Runtime.Curve3D_add_point(Curve3D{self}, position, in, out, index)
}
func (self methodsCurve3D) SetPointPosition(idx int64, position Vector3) {
	self.Runtime.Curve3D_set_point_position(Curve3D{self}, idx, position)
}
func (self methodsCurve3D) GetPointPosition(idx int64) Vector3 {
	return self.Runtime.Curve3D_get_point_position(Curve3D{self}, idx)
}
func (self methodsCurve3D) SetPointTilt(idx int64, tilt Float) {
	self.Runtime.Curve3D_set_point_tilt(Curve3D{self}, idx, tilt)
}
func (self methodsCurve3D) GetPointTilt(idx int64) Float {
	return self.Runtime.Curve3D_get_point_tilt(Curve3D{self}, idx)
}
func (self methodsCurve3D) SetPointIn(idx int64, position Vector3) {
	self.Runtime.Curve3D_set_point_in(Curve3D{self}, idx, position)
}
func (self methodsCurve3D) GetPointIn(idx int64) Vector3 {
	return self.Runtime.Curve3D_get_point_in(Curve3D{self}, idx)
}
func (self methodsCurve3D) SetPointOut(idx int64, position Vector3) {
	self.Runtime.Curve3D_set_point_out(Curve3D{self}, idx, position)
}
func (self methodsCurve3D) GetPointOut(idx int64) Vector3 {
	return self.Runtime.Curve3D_get_point_out(Curve3D{self}, idx)
}
func (self methodsCurve3D) RemovePoint(idx int64) {
	self.Runtime.Curve3D_remove_point(Curve3D{self}, idx)
}
func (self methodsCurve3D) ClearPoints() {
	self.Runtime.Curve3D_clear_points(Curve3D{self})
}
func (self methodsCurve3D) Sample(idx int64, t Float) Vector3 {
	return self.Runtime.Curve3D_sample(Curve3D{self}, idx, t)
}
func (self methodsCurve3D) Samplef(fofs Float) Vector3 {
	return self.Runtime.Curve3D_samplef(Curve3D{self}, fofs)
}
func (self methodsCurve3D) SetBakeInterval(distance Float) {
	self.Runtime.Curve3D_set_bake_interval(Curve3D{self}, distance)
}
func (self methodsCurve3D) GetBakeInterval() Float {
	return self.Runtime.Curve3D_get_bake_interval(Curve3D{self})
}
func (self methodsCurve3D) SetUpVectorEnabled(enable bool) {
	self.Runtime.Curve3D_set_up_vector_enabled(Curve3D{self}, enable)
}
func (self methodsCurve3D) IsUpVectorEnabled() bool {
	return self.Runtime.Curve3D_is_up_vector_enabled(Curve3D{self})
}
func (self methodsCurve3D) GetBakedLength() Float {
	return self.Runtime.Curve3D_get_baked_length(Curve3D{self})
}
func (self methodsCurve3D) SampleBaked(offset Float, cubic bool) Vector3 {
	return self.Runtime.Curve3D_sample_baked(Curve3D{self}, offset, cubic)
}
func (self methodsCurve3D) SampleBakedWithRotation(offset Float, cubic bool, apply_tilt bool) Transform3D {
	return self.Runtime.Curve3D_sample_baked_with_rotation(Curve3D{self}, offset, cubic, apply_tilt)
}
func (self methodsCurve3D) SampleBakedUpVector(offset Float, apply_tilt bool) Vector3 {
	return self.Runtime.Curve3D_sample_baked_up_vector(Curve3D{self}, offset, apply_tilt)
}
func (self methodsCurve3D) GetBakedPoints() PackedVector3Array {
	return self.Runtime.Curve3D_get_baked_points(Curve3D{self})
}
func (self methodsCurve3D) GetBakedTilts() PackedFloat32Array {
	return self.Runtime.Curve3D_get_baked_tilts(Curve3D{self})
}
func (self methodsCurve3D) GetBakedUpVectors() PackedVector3Array {
	return self.Runtime.Curve3D_get_baked_up_vectors(Curve3D{self})
}
func (self methodsCurve3D) GetClosestPoint(to_point Vector3) Vector3 {
	return self.Runtime.Curve3D_get_closest_point(Curve3D{self}, to_point)
}
func (self methodsCurve3D) GetClosestOffset(to_point Vector3) Float {
	return self.Runtime.Curve3D_get_closest_offset(Curve3D{self}, to_point)
}
func (self methodsCurve3D) Tessellate(max_stages int64, tolerance_degrees Float) PackedVector3Array {
	return self.Runtime.Curve3D_tessellate(Curve3D{self}, max_stages, tolerance_degrees)
}
func (self methodsCurve3D) TessellateEvenLength(max_stages int64, tolerance_length Float) PackedVector3Array {
	return self.Runtime.Curve3D_tessellate_even_length(Curve3D{self}, max_stages, tolerance_length)
}

type methodsCurveTexture struct {
	_ [0]*methodsCurveTexture
	class
}

func (self CurveTexture) Texture2D() Texture2D {
	var parent Texture2D
	parent.class = self.class
	return parent
}
func (self methodsCurveTexture) SetWidth(width int64) {
	self.Runtime.CurveTexture_set_width(CurveTexture{self}, width)
}
func (self methodsCurveTexture) SetCurve(curve Curve) {
	self.Runtime.CurveTexture_set_curve(CurveTexture{self}, curve)
}
func (self methodsCurveTexture) GetCurve() Curve {
	return self.Runtime.CurveTexture_get_curve(CurveTexture{self})
}
func (self methodsCurveTexture) SetTextureMode(texture_mode CurveTextureTextureMode) {
	self.Runtime.CurveTexture_set_texture_mode(CurveTexture{self}, texture_mode)
}
func (self methodsCurveTexture) GetTextureMode() CurveTextureTextureMode {
	return self.Runtime.CurveTexture_get_texture_mode(CurveTexture{self})
}

type methodsCurveXYZTexture struct {
	_ [0]*methodsCurveXYZTexture
	class
}

func (self CurveXYZTexture) Texture2D() Texture2D {
	var parent Texture2D
	parent.class = self.class
	return parent
}
func (self methodsCurveXYZTexture) SetWidth(width int64) {
	self.Runtime.CurveXYZTexture_set_width(CurveXYZTexture{self}, width)
}
func (self methodsCurveXYZTexture) SetCurveX(curve Curve) {
	self.Runtime.CurveXYZTexture_set_curve_x(CurveXYZTexture{self}, curve)
}
func (self methodsCurveXYZTexture) GetCurveX() Curve {
	return self.Runtime.CurveXYZTexture_get_curve_x(CurveXYZTexture{self})
}
func (self methodsCurveXYZTexture) SetCurveY(curve Curve) {
	self.Runtime.CurveXYZTexture_set_curve_y(CurveXYZTexture{self}, curve)
}
func (self methodsCurveXYZTexture) GetCurveY() Curve {
	return self.Runtime.CurveXYZTexture_get_curve_y(CurveXYZTexture{self})
}
func (self methodsCurveXYZTexture) SetCurveZ(curve Curve) {
	self.Runtime.CurveXYZTexture_set_curve_z(CurveXYZTexture{self}, curve)
}
func (self methodsCurveXYZTexture) GetCurveZ() Curve {
	return self.Runtime.CurveXYZTexture_get_curve_z(CurveXYZTexture{self})
}

type methodsCylinderMesh struct {
	_ [0]*methodsCylinderMesh
	class
}

func (self CylinderMesh) PrimitiveMesh() PrimitiveMesh {
	var parent PrimitiveMesh
	parent.class = self.class
	return parent
}
func (self methodsCylinderMesh) SetTopRadius(radius Float) {
	self.Runtime.CylinderMesh_set_top_radius(CylinderMesh{self}, radius)
}
func (self methodsCylinderMesh) GetTopRadius() Float {
	return self.Runtime.CylinderMesh_get_top_radius(CylinderMesh{self})
}
func (self methodsCylinderMesh) SetBottomRadius(radius Float) {
	self.Runtime.CylinderMesh_set_bottom_radius(CylinderMesh{self}, radius)
}
func (self methodsCylinderMesh) GetBottomRadius() Float {
	return self.Runtime.CylinderMesh_get_bottom_radius(CylinderMesh{self})
}
func (self methodsCylinderMesh) SetHeight(height Float) {
	self.Runtime.CylinderMesh_set_height(CylinderMesh{self}, height)
}
func (self methodsCylinderMesh) GetHeight() Float {
	return self.Runtime.CylinderMesh_get_height(CylinderMesh{self})
}
func (self methodsCylinderMesh) SetRadialSegments(segments int64) {
	self.Runtime.CylinderMesh_set_radial_segments(CylinderMesh{self}, segments)
}
func (self methodsCylinderMesh) GetRadialSegments() int64 {
	return self.Runtime.CylinderMesh_get_radial_segments(CylinderMesh{self})
}
func (self methodsCylinderMesh) SetRings(rings int64) {
	self.Runtime.CylinderMesh_set_rings(CylinderMesh{self}, rings)
}
func (self methodsCylinderMesh) GetRings() int64 {
	return self.Runtime.CylinderMesh_get_rings(CylinderMesh{self})
}
func (self methodsCylinderMesh) SetCapTop(cap_top bool) {
	self.Runtime.CylinderMesh_set_cap_top(CylinderMesh{self}, cap_top)
}
func (self methodsCylinderMesh) IsCapTop() bool {
	return self.Runtime.CylinderMesh_is_cap_top(CylinderMesh{self})
}
func (self methodsCylinderMesh) SetCapBottom(cap_bottom bool) {
	self.Runtime.CylinderMesh_set_cap_bottom(CylinderMesh{self}, cap_bottom)
}
func (self methodsCylinderMesh) IsCapBottom() bool {
	return self.Runtime.CylinderMesh_is_cap_bottom(CylinderMesh{self})
}

type methodsCylinderShape3D struct {
	_ [0]*methodsCylinderShape3D
	class
}

func (self CylinderShape3D) Shape3D() Shape3D {
	var parent Shape3D
	parent.class = self.class
	return parent
}
func (self methodsCylinderShape3D) SetRadius(radius Float) {
	self.Runtime.CylinderShape3D_set_radius(CylinderShape3D{self}, radius)
}
func (self methodsCylinderShape3D) GetRadius() Float {
	return self.Runtime.CylinderShape3D_get_radius(CylinderShape3D{self})
}
func (self methodsCylinderShape3D) SetHeight(height Float) {
	self.Runtime.CylinderShape3D_set_height(CylinderShape3D{self}, height)
}
func (self methodsCylinderShape3D) GetHeight() Float {
	return self.Runtime.CylinderShape3D_get_height(CylinderShape3D{self})
}

type methodsDTLSServer struct {
	_ [0]*methodsDTLSServer
	class
}

func (self DTLSServer) RefCounted() RefCounted {
	var parent RefCounted
	parent.class = self.class
	return parent
}
func (self methodsDTLSServer) Setup(server_options TLSOptions) int64 {
	return self.Runtime.DTLSServer_setup(DTLSServer{self}, server_options)
}
func (self methodsDTLSServer) TakeConnection(udp_peer PacketPeerUDP) PacketPeerDTLS {
	return self.Runtime.DTLSServer_take_connection(DTLSServer{self}, udp_peer)
}

type methodsDampedSpringJoint2D struct {
	_ [0]*methodsDampedSpringJoint2D
	class
}

func (self DampedSpringJoint2D) Joint2D() Joint2D {
	var parent Joint2D
	parent.class = self.class
	return parent
}
func (self methodsDampedSpringJoint2D) SetLength(length Float) {
	self.Runtime.DampedSpringJoint2D_set_length(DampedSpringJoint2D{self}, length)
}
func (self methodsDampedSpringJoint2D) GetLength() Float {
	return self.Runtime.DampedSpringJoint2D_get_length(DampedSpringJoint2D{self})
}
func (self methodsDampedSpringJoint2D) SetRestLength(rest_length Float) {
	self.Runtime.DampedSpringJoint2D_set_rest_length(DampedSpringJoint2D{self}, rest_length)
}
func (self methodsDampedSpringJoint2D) GetRestLength() Float {
	return self.Runtime.DampedSpringJoint2D_get_rest_length(DampedSpringJoint2D{self})
}
func (self methodsDampedSpringJoint2D) SetStiffness(stiffness Float) {
	self.Runtime.DampedSpringJoint2D_set_stiffness(DampedSpringJoint2D{self}, stiffness)
}
func (self methodsDampedSpringJoint2D) GetStiffness() Float {
	return self.Runtime.DampedSpringJoint2D_get_stiffness(DampedSpringJoint2D{self})
}
func (self methodsDampedSpringJoint2D) SetDamping(damping Float) {
	self.Runtime.DampedSpringJoint2D_set_damping(DampedSpringJoint2D{self}, damping)
}
func (self methodsDampedSpringJoint2D) GetDamping() Float {
	return self.Runtime.DampedSpringJoint2D_get_damping(DampedSpringJoint2D{self})
}

type methodsDecal struct {
	_ [0]*methodsDecal
	class
}

func (self Decal) VisualInstance3D() VisualInstance3D {
	var parent VisualInstance3D
	parent.class = self.class
	return parent
}
func (self methodsDecal) SetSize(size Vector3) {
	self.Runtime.Decal_set_size(Decal{self}, size)
}
func (self methodsDecal) GetSize() Vector3 {
	return self.Runtime.Decal_get_size(Decal{self})
}
func (self methodsDecal) SetTexture(atype DecalDecalTexture, texture Texture2D) {
	self.Runtime.Decal_set_texture(Decal{self}, atype, texture)
}
func (self methodsDecal) GetTexture(atype DecalDecalTexture) Texture2D {
	return self.Runtime.Decal_get_texture(Decal{self}, atype)
}
func (self methodsDecal) SetEmissionEnergy(energy Float) {
	self.Runtime.Decal_set_emission_energy(Decal{self}, energy)
}
func (self methodsDecal) GetEmissionEnergy() Float {
	return self.Runtime.Decal_get_emission_energy(Decal{self})
}
func (self methodsDecal) SetAlbedoMix(energy Float) {
	self.Runtime.Decal_set_albedo_mix(Decal{self}, energy)
}
func (self methodsDecal) GetAlbedoMix() Float {
	return self.Runtime.Decal_get_albedo_mix(Decal{self})
}
func (self methodsDecal) SetModulate(color Color) {
	self.Runtime.Decal_set_modulate(Decal{self}, color)
}
func (self methodsDecal) GetModulate() Color {
	return self.Runtime.Decal_get_modulate(Decal{self})
}
func (self methodsDecal) SetUpperFade(fade Float) {
	self.Runtime.Decal_set_upper_fade(Decal{self}, fade)
}
func (self methodsDecal) GetUpperFade() Float {
	return self.Runtime.Decal_get_upper_fade(Decal{self})
}
func (self methodsDecal) SetLowerFade(fade Float) {
	self.Runtime.Decal_set_lower_fade(Decal{self}, fade)
}
func (self methodsDecal) GetLowerFade() Float {
	return self.Runtime.Decal_get_lower_fade(Decal{self})
}
func (self methodsDecal) SetNormalFade(fade Float) {
	self.Runtime.Decal_set_normal_fade(Decal{self}, fade)
}
func (self methodsDecal) GetNormalFade() Float {
	return self.Runtime.Decal_get_normal_fade(Decal{self})
}
func (self methodsDecal) SetEnableDistanceFade(enable bool) {
	self.Runtime.Decal_set_enable_distance_fade(Decal{self}, enable)
}
func (self methodsDecal) IsDistanceFadeEnabled() bool {
	return self.Runtime.Decal_is_distance_fade_enabled(Decal{self})
}
func (self methodsDecal) SetDistanceFadeBegin(distance Float) {
	self.Runtime.Decal_set_distance_fade_begin(Decal{self}, distance)
}
func (self methodsDecal) GetDistanceFadeBegin() Float {
	return self.Runtime.Decal_get_distance_fade_begin(Decal{self})
}
func (self methodsDecal) SetDistanceFadeLength(distance Float) {
	self.Runtime.Decal_set_distance_fade_length(Decal{self}, distance)
}
func (self methodsDecal) GetDistanceFadeLength() Float {
	return self.Runtime.Decal_get_distance_fade_length(Decal{self})
}
func (self methodsDecal) SetCullMask(mask int64) {
	self.Runtime.Decal_set_cull_mask(Decal{self}, mask)
}
func (self methodsDecal) GetCullMask() int64 {
	return self.Runtime.Decal_get_cull_mask(Decal{self})
}

type methodsDirAccess struct {
	_ [0]*methodsDirAccess
	class
}

func (self DirAccess) RefCounted() RefCounted {
	var parent RefCounted
	parent.class = self.class
	return parent
}
func (self methodsDirAccess) Open(path string) DirAccess {
	return self.Runtime.DirAccess_open(DirAccess{self}, path)
}
func (self methodsDirAccess) GetOpenError() int64 {
	return self.Runtime.DirAccess_get_open_error(DirAccess{self})
}
func (self methodsDirAccess) ListDirBegin() int64 {
	return self.Runtime.DirAccess_list_dir_begin(DirAccess{self})
}
func (self methodsDirAccess) GetNext() string {
	return self.Runtime.DirAccess_get_next(DirAccess{self})
}
func (self methodsDirAccess) CurrentIsDir() bool {
	return self.Runtime.DirAccess_current_is_dir(DirAccess{self})
}
func (self methodsDirAccess) ListDirEnd() {
	self.Runtime.DirAccess_list_dir_end(DirAccess{self})
}
func (self methodsDirAccess) GetFiles() PackedStringArray {
	return self.Runtime.DirAccess_get_files(DirAccess{self})
}
func (self methodsDirAccess) GetFilesAt(path string) PackedStringArray {
	return self.Runtime.DirAccess_get_files_at(DirAccess{self}, path)
}
func (self methodsDirAccess) GetDirectories() PackedStringArray {
	return self.Runtime.DirAccess_get_directories(DirAccess{self})
}
func (self methodsDirAccess) GetDirectoriesAt(path string) PackedStringArray {
	return self.Runtime.DirAccess_get_directories_at(DirAccess{self}, path)
}
func (self methodsDirAccess) GetDriveCount() int64 {
	return self.Runtime.DirAccess_get_drive_count(DirAccess{self})
}
func (self methodsDirAccess) GetDriveName(idx int64) string {
	return self.Runtime.DirAccess_get_drive_name(DirAccess{self}, idx)
}
func (self methodsDirAccess) GetCurrentDrive() int64 {
	return self.Runtime.DirAccess_get_current_drive(DirAccess{self})
}
func (self methodsDirAccess) ChangeDir(to_dir string) int64 {
	return self.Runtime.DirAccess_change_dir(DirAccess{self}, to_dir)
}
func (self methodsDirAccess) GetCurrentDir(include_drive bool) string {
	return self.Runtime.DirAccess_get_current_dir(DirAccess{self}, include_drive)
}
func (self methodsDirAccess) MakeDir(path string) int64 {
	return self.Runtime.DirAccess_make_dir(DirAccess{self}, path)
}
func (self methodsDirAccess) MakeDirAbsolute(path string) int64 {
	return self.Runtime.DirAccess_make_dir_absolute(DirAccess{self}, path)
}
func (self methodsDirAccess) MakeDirRecursive(path string) int64 {
	return self.Runtime.DirAccess_make_dir_recursive(DirAccess{self}, path)
}
func (self methodsDirAccess) MakeDirRecursiveAbsolute(path string) int64 {
	return self.Runtime.DirAccess_make_dir_recursive_absolute(DirAccess{self}, path)
}
func (self methodsDirAccess) FileExists(path string) bool {
	return self.Runtime.DirAccess_file_exists(DirAccess{self}, path)
}
func (self methodsDirAccess) DirExists(path string) bool {
	return self.Runtime.DirAccess_dir_exists(DirAccess{self}, path)
}
func (self methodsDirAccess) DirExistsAbsolute(path string) bool {
	return self.Runtime.DirAccess_dir_exists_absolute(DirAccess{self}, path)
}
func (self methodsDirAccess) GetSpaceLeft() int64 {
	return self.Runtime.DirAccess_get_space_left(DirAccess{self})
}
func (self methodsDirAccess) Copy(from string, to string, chmod_flags int64) int64 {
	return self.Runtime.DirAccess_copy(DirAccess{self}, from, to, chmod_flags)
}
func (self methodsDirAccess) CopyAbsolute(from string, to string, chmod_flags int64) int64 {
	return self.Runtime.DirAccess_copy_absolute(DirAccess{self}, from, to, chmod_flags)
}
func (self methodsDirAccess) Rename(from string, to string) int64 {
	return self.Runtime.DirAccess_rename(DirAccess{self}, from, to)
}
func (self methodsDirAccess) RenameAbsolute(from string, to string) int64 {
	return self.Runtime.DirAccess_rename_absolute(DirAccess{self}, from, to)
}
func (self methodsDirAccess) Remove(path string) int64 {
	return self.Runtime.DirAccess_remove(DirAccess{self}, path)
}
func (self methodsDirAccess) RemoveAbsolute(path string) int64 {
	return self.Runtime.DirAccess_remove_absolute(DirAccess{self}, path)
}
func (self methodsDirAccess) SetIncludeNavigational(enable bool) {
	self.Runtime.DirAccess_set_include_navigational(DirAccess{self}, enable)
}
func (self methodsDirAccess) GetIncludeNavigational() bool {
	return self.Runtime.DirAccess_get_include_navigational(DirAccess{self})
}
func (self methodsDirAccess) SetIncludeHidden(enable bool) {
	self.Runtime.DirAccess_set_include_hidden(DirAccess{self}, enable)
}
func (self methodsDirAccess) GetIncludeHidden() bool {
	return self.Runtime.DirAccess_get_include_hidden(DirAccess{self})
}
func (self methodsDirAccess) IsCaseSensitive(path string) bool {
	return self.Runtime.DirAccess_is_case_sensitive(DirAccess{self}, path)
}

type methodsDirectionalLight2D struct {
	_ [0]*methodsDirectionalLight2D
	class
}

func (self DirectionalLight2D) Light2D() Light2D {
	var parent Light2D
	parent.class = self.class
	return parent
}
func (self methodsDirectionalLight2D) SetMaxDistance(pixels Float) {
	self.Runtime.DirectionalLight2D_set_max_distance(DirectionalLight2D{self}, pixels)
}
func (self methodsDirectionalLight2D) GetMaxDistance() Float {
	return self.Runtime.DirectionalLight2D_get_max_distance(DirectionalLight2D{self})
}

type methodsDirectionalLight3D struct {
	_ [0]*methodsDirectionalLight3D
	class
}

func (self DirectionalLight3D) Light3D() Light3D {
	var parent Light3D
	parent.class = self.class
	return parent
}
func (self methodsDirectionalLight3D) SetShadowMode(mode DirectionalLight3DShadowMode) {
	self.Runtime.DirectionalLight3D_set_shadow_mode(DirectionalLight3D{self}, mode)
}
func (self methodsDirectionalLight3D) GetShadowMode() DirectionalLight3DShadowMode {
	return self.Runtime.DirectionalLight3D_get_shadow_mode(DirectionalLight3D{self})
}
func (self methodsDirectionalLight3D) SetBlendSplits(enabled bool) {
	self.Runtime.DirectionalLight3D_set_blend_splits(DirectionalLight3D{self}, enabled)
}
func (self methodsDirectionalLight3D) IsBlendSplitsEnabled() bool {
	return self.Runtime.DirectionalLight3D_is_blend_splits_enabled(DirectionalLight3D{self})
}
func (self methodsDirectionalLight3D) SetSkyMode(mode DirectionalLight3DSkyMode) {
	self.Runtime.DirectionalLight3D_set_sky_mode(DirectionalLight3D{self}, mode)
}
func (self methodsDirectionalLight3D) GetSkyMode() DirectionalLight3DSkyMode {
	return self.Runtime.DirectionalLight3D_get_sky_mode(DirectionalLight3D{self})
}

type methodsDisplayServer struct {
	_ [0]*methodsDisplayServer
	class
}

func (self DisplayServer) Object() Object {
	var parent Object
	parent.class = self.class
	return parent
}
func (self methodsDisplayServer) HasFeature(feature DisplayServerFeature) bool {
	return self.Runtime.DisplayServer_has_feature(DisplayServer{self}, feature)
}
func (self methodsDisplayServer) GetName() string {
	return self.Runtime.DisplayServer_get_name(DisplayServer{self})
}
func (self methodsDisplayServer) GlobalMenuSetPopupCallbacks(menu_root string, open_callback Callable, close_callback Callable) {
	self.Runtime.DisplayServer_global_menu_set_popup_callbacks(DisplayServer{self}, menu_root, open_callback, close_callback)
}
func (self methodsDisplayServer) GlobalMenuAddSubmenuItem(menu_root string, label string, submenu string, index int64) int64 {
	return self.Runtime.DisplayServer_global_menu_add_submenu_item(DisplayServer{self}, menu_root, label, submenu, index)
}
func (self methodsDisplayServer) GlobalMenuAddItem(menu_root string, label string, callback Callable, key_callback Callable, tag any, accelerator Key, index int64) int64 {
	return self.Runtime.DisplayServer_global_menu_add_item(DisplayServer{self}, menu_root, label, callback, key_callback, tag, accelerator, index)
}
func (self methodsDisplayServer) GlobalMenuAddCheckItem(menu_root string, label string, callback Callable, key_callback Callable, tag any, accelerator Key, index int64) int64 {
	return self.Runtime.DisplayServer_global_menu_add_check_item(DisplayServer{self}, menu_root, label, callback, key_callback, tag, accelerator, index)
}
func (self methodsDisplayServer) GlobalMenuAddIconItem(menu_root string, icon Texture2D, label string, callback Callable, key_callback Callable, tag any, accelerator Key, index int64) int64 {
	return self.Runtime.DisplayServer_global_menu_add_icon_item(DisplayServer{self}, menu_root, icon, label, callback, key_callback, tag, accelerator, index)
}
func (self methodsDisplayServer) GlobalMenuAddIconCheckItem(menu_root string, icon Texture2D, label string, callback Callable, key_callback Callable, tag any, accelerator Key, index int64) int64 {
	return self.Runtime.DisplayServer_global_menu_add_icon_check_item(DisplayServer{self}, menu_root, icon, label, callback, key_callback, tag, accelerator, index)
}
func (self methodsDisplayServer) GlobalMenuAddRadioCheckItem(menu_root string, label string, callback Callable, key_callback Callable, tag any, accelerator Key, index int64) int64 {
	return self.Runtime.DisplayServer_global_menu_add_radio_check_item(DisplayServer{self}, menu_root, label, callback, key_callback, tag, accelerator, index)
}
func (self methodsDisplayServer) GlobalMenuAddIconRadioCheckItem(menu_root string, icon Texture2D, label string, callback Callable, key_callback Callable, tag any, accelerator Key, index int64) int64 {
	return self.Runtime.DisplayServer_global_menu_add_icon_radio_check_item(DisplayServer{self}, menu_root, icon, label, callback, key_callback, tag, accelerator, index)
}
func (self methodsDisplayServer) GlobalMenuAddMultistateItem(menu_root string, label string, max_states int64, default_state int64, callback Callable, key_callback Callable, tag any, accelerator Key, index int64) int64 {
	return self.Runtime.DisplayServer_global_menu_add_multistate_item(DisplayServer{self}, menu_root, label, max_states, default_state, callback, key_callback, tag, accelerator, index)
}
func (self methodsDisplayServer) GlobalMenuAddSeparator(menu_root string, index int64) int64 {
	return self.Runtime.DisplayServer_global_menu_add_separator(DisplayServer{self}, menu_root, index)
}
func (self methodsDisplayServer) GlobalMenuGetItemIndexFromText(menu_root string, text string) int64 {
	return self.Runtime.DisplayServer_global_menu_get_item_index_from_text(DisplayServer{self}, menu_root, text)
}
func (self methodsDisplayServer) GlobalMenuGetItemIndexFromTag(menu_root string, tag any) int64 {
	return self.Runtime.DisplayServer_global_menu_get_item_index_from_tag(DisplayServer{self}, menu_root, tag)
}
func (self methodsDisplayServer) GlobalMenuIsItemChecked(menu_root string, idx int64) bool {
	return self.Runtime.DisplayServer_global_menu_is_item_checked(DisplayServer{self}, menu_root, idx)
}
func (self methodsDisplayServer) GlobalMenuIsItemCheckable(menu_root string, idx int64) bool {
	return self.Runtime.DisplayServer_global_menu_is_item_checkable(DisplayServer{self}, menu_root, idx)
}
func (self methodsDisplayServer) GlobalMenuIsItemRadioCheckable(menu_root string, idx int64) bool {
	return self.Runtime.DisplayServer_global_menu_is_item_radio_checkable(DisplayServer{self}, menu_root, idx)
}
func (self methodsDisplayServer) GlobalMenuGetItemCallback(menu_root string, idx int64) Callable {
	return self.Runtime.DisplayServer_global_menu_get_item_callback(DisplayServer{self}, menu_root, idx)
}
func (self methodsDisplayServer) GlobalMenuGetItemKeyCallback(menu_root string, idx int64) Callable {
	return self.Runtime.DisplayServer_global_menu_get_item_key_callback(DisplayServer{self}, menu_root, idx)
}
func (self methodsDisplayServer) GlobalMenuGetItemTag(menu_root string, idx int64) any {
	return self.Runtime.DisplayServer_global_menu_get_item_tag(DisplayServer{self}, menu_root, idx)
}
func (self methodsDisplayServer) GlobalMenuGetItemText(menu_root string, idx int64) string {
	return self.Runtime.DisplayServer_global_menu_get_item_text(DisplayServer{self}, menu_root, idx)
}
func (self methodsDisplayServer) GlobalMenuGetItemSubmenu(menu_root string, idx int64) string {
	return self.Runtime.DisplayServer_global_menu_get_item_submenu(DisplayServer{self}, menu_root, idx)
}
func (self methodsDisplayServer) GlobalMenuGetItemAccelerator(menu_root string, idx int64) Key {
	return self.Runtime.DisplayServer_global_menu_get_item_accelerator(DisplayServer{self}, menu_root, idx)
}
func (self methodsDisplayServer) GlobalMenuIsItemDisabled(menu_root string, idx int64) bool {
	return self.Runtime.DisplayServer_global_menu_is_item_disabled(DisplayServer{self}, menu_root, idx)
}
func (self methodsDisplayServer) GlobalMenuIsItemHidden(menu_root string, idx int64) bool {
	return self.Runtime.DisplayServer_global_menu_is_item_hidden(DisplayServer{self}, menu_root, idx)
}
func (self methodsDisplayServer) GlobalMenuGetItemTooltip(menu_root string, idx int64) string {
	return self.Runtime.DisplayServer_global_menu_get_item_tooltip(DisplayServer{self}, menu_root, idx)
}
func (self methodsDisplayServer) GlobalMenuGetItemState(menu_root string, idx int64) int64 {
	return self.Runtime.DisplayServer_global_menu_get_item_state(DisplayServer{self}, menu_root, idx)
}
func (self methodsDisplayServer) GlobalMenuGetItemMaxStates(menu_root string, idx int64) int64 {
	return self.Runtime.DisplayServer_global_menu_get_item_max_states(DisplayServer{self}, menu_root, idx)
}
func (self methodsDisplayServer) GlobalMenuGetItemIcon(menu_root string, idx int64) Texture2D {
	return self.Runtime.DisplayServer_global_menu_get_item_icon(DisplayServer{self}, menu_root, idx)
}
func (self methodsDisplayServer) GlobalMenuGetItemIndentationLevel(menu_root string, idx int64) int64 {
	return self.Runtime.DisplayServer_global_menu_get_item_indentation_level(DisplayServer{self}, menu_root, idx)
}
func (self methodsDisplayServer) GlobalMenuSetItemChecked(menu_root string, idx int64, checked bool) {
	self.Runtime.DisplayServer_global_menu_set_item_checked(DisplayServer{self}, menu_root, idx, checked)
}
func (self methodsDisplayServer) GlobalMenuSetItemCheckable(menu_root string, idx int64, checkable bool) {
	self.Runtime.DisplayServer_global_menu_set_item_checkable(DisplayServer{self}, menu_root, idx, checkable)
}
func (self methodsDisplayServer) GlobalMenuSetItemRadioCheckable(menu_root string, idx int64, checkable bool) {
	self.Runtime.DisplayServer_global_menu_set_item_radio_checkable(DisplayServer{self}, menu_root, idx, checkable)
}
func (self methodsDisplayServer) GlobalMenuSetItemCallback(menu_root string, idx int64, callback Callable) {
	self.Runtime.DisplayServer_global_menu_set_item_callback(DisplayServer{self}, menu_root, idx, callback)
}
func (self methodsDisplayServer) GlobalMenuSetItemHoverCallbacks(menu_root string, idx int64, callback Callable) {
	self.Runtime.DisplayServer_global_menu_set_item_hover_callbacks(DisplayServer{self}, menu_root, idx, callback)
}
func (self methodsDisplayServer) GlobalMenuSetItemKeyCallback(menu_root string, idx int64, key_callback Callable) {
	self.Runtime.DisplayServer_global_menu_set_item_key_callback(DisplayServer{self}, menu_root, idx, key_callback)
}
func (self methodsDisplayServer) GlobalMenuSetItemTag(menu_root string, idx int64, tag any) {
	self.Runtime.DisplayServer_global_menu_set_item_tag(DisplayServer{self}, menu_root, idx, tag)
}
func (self methodsDisplayServer) GlobalMenuSetItemText(menu_root string, idx int64, text string) {
	self.Runtime.DisplayServer_global_menu_set_item_text(DisplayServer{self}, menu_root, idx, text)
}
func (self methodsDisplayServer) GlobalMenuSetItemSubmenu(menu_root string, idx int64, submenu string) {
	self.Runtime.DisplayServer_global_menu_set_item_submenu(DisplayServer{self}, menu_root, idx, submenu)
}
func (self methodsDisplayServer) GlobalMenuSetItemAccelerator(menu_root string, idx int64, keycode Key) {
	self.Runtime.DisplayServer_global_menu_set_item_accelerator(DisplayServer{self}, menu_root, idx, keycode)
}
func (self methodsDisplayServer) GlobalMenuSetItemDisabled(menu_root string, idx int64, disabled bool) {
	self.Runtime.DisplayServer_global_menu_set_item_disabled(DisplayServer{self}, menu_root, idx, disabled)
}
func (self methodsDisplayServer) GlobalMenuSetItemHidden(menu_root string, idx int64, hidden bool) {
	self.Runtime.DisplayServer_global_menu_set_item_hidden(DisplayServer{self}, menu_root, idx, hidden)
}
func (self methodsDisplayServer) GlobalMenuSetItemTooltip(menu_root string, idx int64, tooltip string) {
	self.Runtime.DisplayServer_global_menu_set_item_tooltip(DisplayServer{self}, menu_root, idx, tooltip)
}
func (self methodsDisplayServer) GlobalMenuSetItemState(menu_root string, idx int64, state int64) {
	self.Runtime.DisplayServer_global_menu_set_item_state(DisplayServer{self}, menu_root, idx, state)
}
func (self methodsDisplayServer) GlobalMenuSetItemMaxStates(menu_root string, idx int64, max_states int64) {
	self.Runtime.DisplayServer_global_menu_set_item_max_states(DisplayServer{self}, menu_root, idx, max_states)
}
func (self methodsDisplayServer) GlobalMenuSetItemIcon(menu_root string, idx int64, icon Texture2D) {
	self.Runtime.DisplayServer_global_menu_set_item_icon(DisplayServer{self}, menu_root, idx, icon)
}
func (self methodsDisplayServer) GlobalMenuSetItemIndentationLevel(menu_root string, idx int64, level int64) {
	self.Runtime.DisplayServer_global_menu_set_item_indentation_level(DisplayServer{self}, menu_root, idx, level)
}
func (self methodsDisplayServer) GlobalMenuGetItemCount(menu_root string) int64 {
	return self.Runtime.DisplayServer_global_menu_get_item_count(DisplayServer{self}, menu_root)
}
func (self methodsDisplayServer) GlobalMenuRemoveItem(menu_root string, idx int64) {
	self.Runtime.DisplayServer_global_menu_remove_item(DisplayServer{self}, menu_root, idx)
}
func (self methodsDisplayServer) GlobalMenuClear(menu_root string) {
	self.Runtime.DisplayServer_global_menu_clear(DisplayServer{self}, menu_root)
}
func (self methodsDisplayServer) GlobalMenuGetSystemMenuRoots() Dictionary {
	return self.Runtime.DisplayServer_global_menu_get_system_menu_roots(DisplayServer{self})
}
func (self methodsDisplayServer) TtsIsSpeaking() bool {
	return self.Runtime.DisplayServer_tts_is_speaking(DisplayServer{self})
}
func (self methodsDisplayServer) TtsIsPaused() bool {
	return self.Runtime.DisplayServer_tts_is_paused(DisplayServer{self})
}
func (self methodsDisplayServer) TtsGetVoices() ArrayOf[Dictionary] {
	return self.Runtime.DisplayServer_tts_get_voices(DisplayServer{self})
}
func (self methodsDisplayServer) TtsGetVoicesForLanguage(language string) PackedStringArray {
	return self.Runtime.DisplayServer_tts_get_voices_for_language(DisplayServer{self}, language)
}
func (self methodsDisplayServer) TtsSpeak(text string, voice string, volume int64, pitch Float, rate Float, utterance_id int64, interrupt bool) {
	self.Runtime.DisplayServer_tts_speak(DisplayServer{self}, text, voice, volume, pitch, rate, utterance_id, interrupt)
}
func (self methodsDisplayServer) TtsPause() {
	self.Runtime.DisplayServer_tts_pause(DisplayServer{self})
}
func (self methodsDisplayServer) TtsResume() {
	self.Runtime.DisplayServer_tts_resume(DisplayServer{self})
}
func (self methodsDisplayServer) TtsStop() {
	self.Runtime.DisplayServer_tts_stop(DisplayServer{self})
}
func (self methodsDisplayServer) TtsSetUtteranceCallback(event DisplayServerTTSUtteranceEvent, callable Callable) {
	self.Runtime.DisplayServer_tts_set_utterance_callback(DisplayServer{self}, event, callable)
}
func (self methodsDisplayServer) IsDarkModeSupported() bool {
	return self.Runtime.DisplayServer_is_dark_mode_supported(DisplayServer{self})
}
func (self methodsDisplayServer) IsDarkMode() bool {
	return self.Runtime.DisplayServer_is_dark_mode(DisplayServer{self})
}
func (self methodsDisplayServer) GetAccentColor() Color {
	return self.Runtime.DisplayServer_get_accent_color(DisplayServer{self})
}
func (self methodsDisplayServer) MouseSetMode(mouse_mode DisplayServerMouseMode) {
	self.Runtime.DisplayServer_mouse_set_mode(DisplayServer{self}, mouse_mode)
}
func (self methodsDisplayServer) MouseGetMode() DisplayServerMouseMode {
	return self.Runtime.DisplayServer_mouse_get_mode(DisplayServer{self})
}
func (self methodsDisplayServer) WarpMouse(position Vector2i) {
	self.Runtime.DisplayServer_warp_mouse(DisplayServer{self}, position)
}
func (self methodsDisplayServer) MouseGetPosition() Vector2i {
	return self.Runtime.DisplayServer_mouse_get_position(DisplayServer{self})
}
func (self methodsDisplayServer) MouseGetButtonState() MouseButtonMask {
	return self.Runtime.DisplayServer_mouse_get_button_state(DisplayServer{self})
}
func (self methodsDisplayServer) ClipboardSet(clipboard string) {
	self.Runtime.DisplayServer_clipboard_set(DisplayServer{self}, clipboard)
}
func (self methodsDisplayServer) ClipboardGet() string {
	return self.Runtime.DisplayServer_clipboard_get(DisplayServer{self})
}
func (self methodsDisplayServer) ClipboardGetImage() Image {
	return self.Runtime.DisplayServer_clipboard_get_image(DisplayServer{self})
}
func (self methodsDisplayServer) ClipboardHas() bool {
	return self.Runtime.DisplayServer_clipboard_has(DisplayServer{self})
}
func (self methodsDisplayServer) ClipboardHasImage() bool {
	return self.Runtime.DisplayServer_clipboard_has_image(DisplayServer{self})
}
func (self methodsDisplayServer) ClipboardSetPrimary(clipboard_primary string) {
	self.Runtime.DisplayServer_clipboard_set_primary(DisplayServer{self}, clipboard_primary)
}
func (self methodsDisplayServer) ClipboardGetPrimary() string {
	return self.Runtime.DisplayServer_clipboard_get_primary(DisplayServer{self})
}
func (self methodsDisplayServer) GetDisplayCutouts() ArrayOf[Rect2] {
	return self.Runtime.DisplayServer_get_display_cutouts(DisplayServer{self})
}
func (self methodsDisplayServer) GetDisplaySafeArea() Rect2i {
	return self.Runtime.DisplayServer_get_display_safe_area(DisplayServer{self})
}
func (self methodsDisplayServer) GetScreenCount() int64 {
	return self.Runtime.DisplayServer_get_screen_count(DisplayServer{self})
}
func (self methodsDisplayServer) GetPrimaryScreen() int64 {
	return self.Runtime.DisplayServer_get_primary_screen(DisplayServer{self})
}
func (self methodsDisplayServer) GetKeyboardFocusScreen() int64 {
	return self.Runtime.DisplayServer_get_keyboard_focus_screen(DisplayServer{self})
}
func (self methodsDisplayServer) GetScreenFromRect(rect Rect2) int64 {
	return self.Runtime.DisplayServer_get_screen_from_rect(DisplayServer{self}, rect)
}
func (self methodsDisplayServer) ScreenGetPosition(screen int64) Vector2i {
	return self.Runtime.DisplayServer_screen_get_position(DisplayServer{self}, screen)
}
func (self methodsDisplayServer) ScreenGetSize(screen int64) Vector2i {
	return self.Runtime.DisplayServer_screen_get_size(DisplayServer{self}, screen)
}
func (self methodsDisplayServer) ScreenGetUsableRect(screen int64) Rect2i {
	return self.Runtime.DisplayServer_screen_get_usable_rect(DisplayServer{self}, screen)
}
func (self methodsDisplayServer) ScreenGetDpi(screen int64) int64 {
	return self.Runtime.DisplayServer_screen_get_dpi(DisplayServer{self}, screen)
}
func (self methodsDisplayServer) ScreenGetScale(screen int64) Float {
	return self.Runtime.DisplayServer_screen_get_scale(DisplayServer{self}, screen)
}
func (self methodsDisplayServer) IsTouchscreenAvailable() bool {
	return self.Runtime.DisplayServer_is_touchscreen_available(DisplayServer{self})
}
func (self methodsDisplayServer) ScreenGetMaxScale() Float {
	return self.Runtime.DisplayServer_screen_get_max_scale(DisplayServer{self})
}
func (self methodsDisplayServer) ScreenGetRefreshRate(screen int64) Float {
	return self.Runtime.DisplayServer_screen_get_refresh_rate(DisplayServer{self}, screen)
}
func (self methodsDisplayServer) ScreenGetPixel(position Vector2i) Color {
	return self.Runtime.DisplayServer_screen_get_pixel(DisplayServer{self}, position)
}
func (self methodsDisplayServer) ScreenGetImage(screen int64) Image {
	return self.Runtime.DisplayServer_screen_get_image(DisplayServer{self}, screen)
}
func (self methodsDisplayServer) ScreenSetOrientation(orientation DisplayServerScreenOrientation, screen int64) {
	self.Runtime.DisplayServer_screen_set_orientation(DisplayServer{self}, orientation, screen)
}
func (self methodsDisplayServer) ScreenGetOrientation(screen int64) DisplayServerScreenOrientation {
	return self.Runtime.DisplayServer_screen_get_orientation(DisplayServer{self}, screen)
}
func (self methodsDisplayServer) ScreenSetKeepOn(enable bool) {
	self.Runtime.DisplayServer_screen_set_keep_on(DisplayServer{self}, enable)
}
func (self methodsDisplayServer) ScreenIsKeptOn() bool {
	return self.Runtime.DisplayServer_screen_is_kept_on(DisplayServer{self})
}
func (self methodsDisplayServer) GetWindowList() PackedInt32Array {
	return self.Runtime.DisplayServer_get_window_list(DisplayServer{self})
}
func (self methodsDisplayServer) GetWindowAtScreenPosition(position Vector2i) int64 {
	return self.Runtime.DisplayServer_get_window_at_screen_position(DisplayServer{self}, position)
}
func (self methodsDisplayServer) WindowGetNativeHandle(handle_type DisplayServerHandleType, window_id int64) int64 {
	return self.Runtime.DisplayServer_window_get_native_handle(DisplayServer{self}, handle_type, window_id)
}
func (self methodsDisplayServer) WindowGetActivePopup() int64 {
	return self.Runtime.DisplayServer_window_get_active_popup(DisplayServer{self})
}
func (self methodsDisplayServer) WindowSetPopupSafeRect(window int64, rect Rect2i) {
	self.Runtime.DisplayServer_window_set_popup_safe_rect(DisplayServer{self}, window, rect)
}
func (self methodsDisplayServer) WindowGetPopupSafeRect(window int64) Rect2i {
	return self.Runtime.DisplayServer_window_get_popup_safe_rect(DisplayServer{self}, window)
}
func (self methodsDisplayServer) WindowSetTitle(title string, window_id int64) {
	self.Runtime.DisplayServer_window_set_title(DisplayServer{self}, title, window_id)
}
func (self methodsDisplayServer) WindowGetTitleSize(title string, window_id int64) Vector2i {
	return self.Runtime.DisplayServer_window_get_title_size(DisplayServer{self}, title, window_id)
}
func (self methodsDisplayServer) WindowSetMousePassthrough(region PackedVector2Array, window_id int64) {
	self.Runtime.DisplayServer_window_set_mouse_passthrough(DisplayServer{self}, region, window_id)
}
func (self methodsDisplayServer) WindowGetCurrentScreen(window_id int64) int64 {
	return self.Runtime.DisplayServer_window_get_current_screen(DisplayServer{self}, window_id)
}
func (self methodsDisplayServer) WindowSetCurrentScreen(screen int64, window_id int64) {
	self.Runtime.DisplayServer_window_set_current_screen(DisplayServer{self}, screen, window_id)
}
func (self methodsDisplayServer) WindowGetPosition(window_id int64) Vector2i {
	return self.Runtime.DisplayServer_window_get_position(DisplayServer{self}, window_id)
}
func (self methodsDisplayServer) WindowGetPositionWithDecorations(window_id int64) Vector2i {
	return self.Runtime.DisplayServer_window_get_position_with_decorations(DisplayServer{self}, window_id)
}
func (self methodsDisplayServer) WindowSetPosition(position Vector2i, window_id int64) {
	self.Runtime.DisplayServer_window_set_position(DisplayServer{self}, position, window_id)
}
func (self methodsDisplayServer) WindowGetSize(window_id int64) Vector2i {
	return self.Runtime.DisplayServer_window_get_size(DisplayServer{self}, window_id)
}
func (self methodsDisplayServer) WindowSetSize(size Vector2i, window_id int64) {
	self.Runtime.DisplayServer_window_set_size(DisplayServer{self}, size, window_id)
}
func (self methodsDisplayServer) WindowSetRectChangedCallback(callback Callable, window_id int64) {
	self.Runtime.DisplayServer_window_set_rect_changed_callback(DisplayServer{self}, callback, window_id)
}
func (self methodsDisplayServer) WindowSetWindowEventCallback(callback Callable, window_id int64) {
	self.Runtime.DisplayServer_window_set_window_event_callback(DisplayServer{self}, callback, window_id)
}
func (self methodsDisplayServer) WindowSetInputEventCallback(callback Callable, window_id int64) {
	self.Runtime.DisplayServer_window_set_input_event_callback(DisplayServer{self}, callback, window_id)
}
func (self methodsDisplayServer) WindowSetInputTextCallback(callback Callable, window_id int64) {
	self.Runtime.DisplayServer_window_set_input_text_callback(DisplayServer{self}, callback, window_id)
}
func (self methodsDisplayServer) WindowSetDropFilesCallback(callback Callable, window_id int64) {
	self.Runtime.DisplayServer_window_set_drop_files_callback(DisplayServer{self}, callback, window_id)
}
func (self methodsDisplayServer) WindowGetAttachedInstanceId(window_id int64) int64 {
	return self.Runtime.DisplayServer_window_get_attached_instance_id(DisplayServer{self}, window_id)
}
func (self methodsDisplayServer) WindowGetMaxSize(window_id int64) Vector2i {
	return self.Runtime.DisplayServer_window_get_max_size(DisplayServer{self}, window_id)
}
func (self methodsDisplayServer) WindowSetMaxSize(max_size Vector2i, window_id int64) {
	self.Runtime.DisplayServer_window_set_max_size(DisplayServer{self}, max_size, window_id)
}
func (self methodsDisplayServer) WindowGetMinSize(window_id int64) Vector2i {
	return self.Runtime.DisplayServer_window_get_min_size(DisplayServer{self}, window_id)
}
func (self methodsDisplayServer) WindowSetMinSize(min_size Vector2i, window_id int64) {
	self.Runtime.DisplayServer_window_set_min_size(DisplayServer{self}, min_size, window_id)
}
func (self methodsDisplayServer) WindowGetSizeWithDecorations(window_id int64) Vector2i {
	return self.Runtime.DisplayServer_window_get_size_with_decorations(DisplayServer{self}, window_id)
}
func (self methodsDisplayServer) WindowGetMode(window_id int64) DisplayServerWindowMode {
	return self.Runtime.DisplayServer_window_get_mode(DisplayServer{self}, window_id)
}
func (self methodsDisplayServer) WindowSetMode(mode DisplayServerWindowMode, window_id int64) {
	self.Runtime.DisplayServer_window_set_mode(DisplayServer{self}, mode, window_id)
}
func (self methodsDisplayServer) WindowSetFlag(flag DisplayServerWindowFlags, enabled bool, window_id int64) {
	self.Runtime.DisplayServer_window_set_flag(DisplayServer{self}, flag, enabled, window_id)
}
func (self methodsDisplayServer) WindowGetFlag(flag DisplayServerWindowFlags, window_id int64) bool {
	return self.Runtime.DisplayServer_window_get_flag(DisplayServer{self}, flag, window_id)
}
func (self methodsDisplayServer) WindowSetWindowButtonsOffset(offset Vector2i, window_id int64) {
	self.Runtime.DisplayServer_window_set_window_buttons_offset(DisplayServer{self}, offset, window_id)
}
func (self methodsDisplayServer) WindowGetSafeTitleMargins(window_id int64) Vector3i {
	return self.Runtime.DisplayServer_window_get_safe_title_margins(DisplayServer{self}, window_id)
}
func (self methodsDisplayServer) WindowRequestAttention(window_id int64) {
	self.Runtime.DisplayServer_window_request_attention(DisplayServer{self}, window_id)
}
func (self methodsDisplayServer) WindowMoveToForeground(window_id int64) {
	self.Runtime.DisplayServer_window_move_to_foreground(DisplayServer{self}, window_id)
}
func (self methodsDisplayServer) WindowIsFocused(window_id int64) bool {
	return self.Runtime.DisplayServer_window_is_focused(DisplayServer{self}, window_id)
}
func (self methodsDisplayServer) WindowCanDraw(window_id int64) bool {
	return self.Runtime.DisplayServer_window_can_draw(DisplayServer{self}, window_id)
}
func (self methodsDisplayServer) WindowSetTransient(window_id int64, parent_window_id int64) {
	self.Runtime.DisplayServer_window_set_transient(DisplayServer{self}, window_id, parent_window_id)
}
func (self methodsDisplayServer) WindowSetExclusive(window_id int64, exclusive bool) {
	self.Runtime.DisplayServer_window_set_exclusive(DisplayServer{self}, window_id, exclusive)
}
func (self methodsDisplayServer) WindowSetImeActive(active bool, window_id int64) {
	self.Runtime.DisplayServer_window_set_ime_active(DisplayServer{self}, active, window_id)
}
func (self methodsDisplayServer) WindowSetImePosition(position Vector2i, window_id int64) {
	self.Runtime.DisplayServer_window_set_ime_position(DisplayServer{self}, position, window_id)
}
func (self methodsDisplayServer) WindowSetVsyncMode(vsync_mode DisplayServerVSyncMode, window_id int64) {
	self.Runtime.DisplayServer_window_set_vsync_mode(DisplayServer{self}, vsync_mode, window_id)
}
func (self methodsDisplayServer) WindowGetVsyncMode(window_id int64) DisplayServerVSyncMode {
	return self.Runtime.DisplayServer_window_get_vsync_mode(DisplayServer{self}, window_id)
}
func (self methodsDisplayServer) WindowIsMaximizeAllowed(window_id int64) bool {
	return self.Runtime.DisplayServer_window_is_maximize_allowed(DisplayServer{self}, window_id)
}
func (self methodsDisplayServer) WindowMaximizeOnTitleDblClick() bool {
	return self.Runtime.DisplayServer_window_maximize_on_title_dbl_click(DisplayServer{self})
}
func (self methodsDisplayServer) WindowMinimizeOnTitleDblClick() bool {
	return self.Runtime.DisplayServer_window_minimize_on_title_dbl_click(DisplayServer{self})
}
func (self methodsDisplayServer) ImeGetSelection() Vector2i {
	return self.Runtime.DisplayServer_ime_get_selection(DisplayServer{self})
}
func (self methodsDisplayServer) ImeGetText() string {
	return self.Runtime.DisplayServer_ime_get_text(DisplayServer{self})
}
func (self methodsDisplayServer) VirtualKeyboardShow(existing_text string, position Rect2, atype DisplayServerVirtualKeyboardType, max_length int64, cursor_start int64, cursor_end int64) {
	self.Runtime.DisplayServer_virtual_keyboard_show(DisplayServer{self}, existing_text, position, atype, max_length, cursor_start, cursor_end)
}
func (self methodsDisplayServer) VirtualKeyboardHide() {
	self.Runtime.DisplayServer_virtual_keyboard_hide(DisplayServer{self})
}
func (self methodsDisplayServer) VirtualKeyboardGetHeight() int64 {
	return self.Runtime.DisplayServer_virtual_keyboard_get_height(DisplayServer{self})
}
func (self methodsDisplayServer) CursorSetShape(shape DisplayServerCursorShape) {
	self.Runtime.DisplayServer_cursor_set_shape(DisplayServer{self}, shape)
}
func (self methodsDisplayServer) CursorGetShape() DisplayServerCursorShape {
	return self.Runtime.DisplayServer_cursor_get_shape(DisplayServer{self})
}
func (self methodsDisplayServer) CursorSetCustomImage(cursor Resource, shape DisplayServerCursorShape, hotspot Vector2) {
	self.Runtime.DisplayServer_cursor_set_custom_image(DisplayServer{self}, cursor, shape, hotspot)
}
func (self methodsDisplayServer) GetSwapCancelOk() bool {
	return self.Runtime.DisplayServer_get_swap_cancel_ok(DisplayServer{self})
}
func (self methodsDisplayServer) EnableForStealingFocus(process_id int64) {
	self.Runtime.DisplayServer_enable_for_stealing_focus(DisplayServer{self}, process_id)
}
func (self methodsDisplayServer) DialogShow(title string, description string, buttons PackedStringArray, callback Callable) int64 {
	return self.Runtime.DisplayServer_dialog_show(DisplayServer{self}, title, description, buttons, callback)
}
func (self methodsDisplayServer) DialogInputText(title string, description string, existing_text string, callback Callable) int64 {
	return self.Runtime.DisplayServer_dialog_input_text(DisplayServer{self}, title, description, existing_text, callback)
}
func (self methodsDisplayServer) FileDialogShow(title string, current_directory string, filename string, show_hidden bool, mode DisplayServerFileDialogMode, filters PackedStringArray, callback Callable) int64 {
	return self.Runtime.DisplayServer_file_dialog_show(DisplayServer{self}, title, current_directory, filename, show_hidden, mode, filters, callback)
}
func (self methodsDisplayServer) KeyboardGetLayoutCount() int64 {
	return self.Runtime.DisplayServer_keyboard_get_layout_count(DisplayServer{self})
}
func (self methodsDisplayServer) KeyboardGetCurrentLayout() int64 {
	return self.Runtime.DisplayServer_keyboard_get_current_layout(DisplayServer{self})
}
func (self methodsDisplayServer) KeyboardSetCurrentLayout(index int64) {
	self.Runtime.DisplayServer_keyboard_set_current_layout(DisplayServer{self}, index)
}
func (self methodsDisplayServer) KeyboardGetLayoutLanguage(index int64) string {
	return self.Runtime.DisplayServer_keyboard_get_layout_language(DisplayServer{self}, index)
}
func (self methodsDisplayServer) KeyboardGetLayoutName(index int64) string {
	return self.Runtime.DisplayServer_keyboard_get_layout_name(DisplayServer{self}, index)
}
func (self methodsDisplayServer) KeyboardGetKeycodeFromPhysical(keycode Key) Key {
	return self.Runtime.DisplayServer_keyboard_get_keycode_from_physical(DisplayServer{self}, keycode)
}
func (self methodsDisplayServer) KeyboardGetLabelFromPhysical(keycode Key) Key {
	return self.Runtime.DisplayServer_keyboard_get_label_from_physical(DisplayServer{self}, keycode)
}
func (self methodsDisplayServer) ProcessEvents() {
	self.Runtime.DisplayServer_process_events(DisplayServer{self})
}
func (self methodsDisplayServer) ForceProcessAndDropEvents() {
	self.Runtime.DisplayServer_force_process_and_drop_events(DisplayServer{self})
}
func (self methodsDisplayServer) SetNativeIcon(filename string) {
	self.Runtime.DisplayServer_set_native_icon(DisplayServer{self}, filename)
}
func (self methodsDisplayServer) SetIcon(image Image) {
	self.Runtime.DisplayServer_set_icon(DisplayServer{self}, image)
}
func (self methodsDisplayServer) TabletGetDriverCount() int64 {
	return self.Runtime.DisplayServer_tablet_get_driver_count(DisplayServer{self})
}
func (self methodsDisplayServer) TabletGetDriverName(idx int64) string {
	return self.Runtime.DisplayServer_tablet_get_driver_name(DisplayServer{self}, idx)
}
func (self methodsDisplayServer) TabletGetCurrentDriver() string {
	return self.Runtime.DisplayServer_tablet_get_current_driver(DisplayServer{self})
}
func (self methodsDisplayServer) TabletSetCurrentDriver(name string) {
	self.Runtime.DisplayServer_tablet_set_current_driver(DisplayServer{self}, name)
}

type methodsENetConnection struct {
	_ [0]*methodsENetConnection
	class
}

func (self ENetConnection) RefCounted() RefCounted {
	var parent RefCounted
	parent.class = self.class
	return parent
}
func (self methodsENetConnection) CreateHostBound(bind_address string, bind_port int64, max_peers int64, max_channels int64, in_bandwidth int64, out_bandwidth int64) int64 {
	return self.Runtime.ENetConnection_create_host_bound(ENetConnection{self}, bind_address, bind_port, max_peers, max_channels, in_bandwidth, out_bandwidth)
}
func (self methodsENetConnection) CreateHost(max_peers int64, max_channels int64, in_bandwidth int64, out_bandwidth int64) int64 {
	return self.Runtime.ENetConnection_create_host(ENetConnection{self}, max_peers, max_channels, in_bandwidth, out_bandwidth)
}
func (self methodsENetConnection) Destroy() {
	self.Runtime.ENetConnection_destroy(ENetConnection{self})
}
func (self methodsENetConnection) ConnectToHost(address string, port int64, channels int64, data int64) ENetPacketPeer {
	return self.Runtime.ENetConnection_connect_to_host(ENetConnection{self}, address, port, channels, data)
}
func (self methodsENetConnection) Service(timeout int64) Array {
	return self.Runtime.ENetConnection_service(ENetConnection{self}, timeout)
}
func (self methodsENetConnection) Flush() {
	self.Runtime.ENetConnection_flush(ENetConnection{self})
}
func (self methodsENetConnection) BandwidthLimit(in_bandwidth int64, out_bandwidth int64) {
	self.Runtime.ENetConnection_bandwidth_limit(ENetConnection{self}, in_bandwidth, out_bandwidth)
}
func (self methodsENetConnection) ChannelLimit(limit int64) {
	self.Runtime.ENetConnection_channel_limit(ENetConnection{self}, limit)
}
func (self methodsENetConnection) Broadcast(channel int64, packet PackedByteArray, flags int64) {
	self.Runtime.ENetConnection_broadcast(ENetConnection{self}, channel, packet, flags)
}
func (self methodsENetConnection) Compress(mode ENetConnectionCompressionMode) {
	self.Runtime.ENetConnection_compress(ENetConnection{self}, mode)
}
func (self methodsENetConnection) DtlsServerSetup(server_options TLSOptions) int64 {
	return self.Runtime.ENetConnection_dtls_server_setup(ENetConnection{self}, server_options)
}
func (self methodsENetConnection) DtlsClientSetup(hostname string, client_options TLSOptions) int64 {
	return self.Runtime.ENetConnection_dtls_client_setup(ENetConnection{self}, hostname, client_options)
}
func (self methodsENetConnection) RefuseNewConnections(refuse bool) {
	self.Runtime.ENetConnection_refuse_new_connections(ENetConnection{self}, refuse)
}
func (self methodsENetConnection) PopStatistic(statistic ENetConnectionHostStatistic) Float {
	return self.Runtime.ENetConnection_pop_statistic(ENetConnection{self}, statistic)
}
func (self methodsENetConnection) GetMaxChannels() int64 {
	return self.Runtime.ENetConnection_get_max_channels(ENetConnection{self})
}
func (self methodsENetConnection) GetLocalPort() int64 {
	return self.Runtime.ENetConnection_get_local_port(ENetConnection{self})
}
func (self methodsENetConnection) GetPeers() ArrayOf[ENetPacketPeer] {
	return self.Runtime.ENetConnection_get_peers(ENetConnection{self})
}
func (self methodsENetConnection) SocketSend(destination_address string, destination_port int64, packet PackedByteArray) {
	self.Runtime.ENetConnection_socket_send(ENetConnection{self}, destination_address, destination_port, packet)
}

type methodsENetMultiplayerPeer struct {
	_ [0]*methodsENetMultiplayerPeer
	class
}

func (self ENetMultiplayerPeer) MultiplayerPeer() MultiplayerPeer {
	var parent MultiplayerPeer
	parent.class = self.class
	return parent
}
func (self methodsENetMultiplayerPeer) CreateServer(port int64, max_clients int64, max_channels int64, in_bandwidth int64, out_bandwidth int64) int64 {
	return self.Runtime.ENetMultiplayerPeer_create_server(ENetMultiplayerPeer{self}, port, max_clients, max_channels, in_bandwidth, out_bandwidth)
}
func (self methodsENetMultiplayerPeer) CreateClient(address string, port int64, channel_count int64, in_bandwidth int64, out_bandwidth int64, local_port int64) int64 {
	return self.Runtime.ENetMultiplayerPeer_create_client(ENetMultiplayerPeer{self}, address, port, channel_count, in_bandwidth, out_bandwidth, local_port)
}
func (self methodsENetMultiplayerPeer) CreateMesh(unique_id int64) int64 {
	return self.Runtime.ENetMultiplayerPeer_create_mesh(ENetMultiplayerPeer{self}, unique_id)
}
func (self methodsENetMultiplayerPeer) AddMeshPeer(peer_id int64, host ENetConnection) int64 {
	return self.Runtime.ENetMultiplayerPeer_add_mesh_peer(ENetMultiplayerPeer{self}, peer_id, host)
}
func (self methodsENetMultiplayerPeer) SetBindIp(ip string) {
	self.Runtime.ENetMultiplayerPeer_set_bind_ip(ENetMultiplayerPeer{self}, ip)
}
func (self methodsENetMultiplayerPeer) GetHost() ENetConnection {
	return self.Runtime.ENetMultiplayerPeer_get_host(ENetMultiplayerPeer{self})
}
func (self methodsENetMultiplayerPeer) GetPeer(id int64) ENetPacketPeer {
	return self.Runtime.ENetMultiplayerPeer_get_peer(ENetMultiplayerPeer{self}, id)
}

type methodsENetPacketPeer struct {
	_ [0]*methodsENetPacketPeer
	class
}

func (self ENetPacketPeer) PacketPeer() PacketPeer {
	var parent PacketPeer
	parent.class = self.class
	return parent
}
func (self methodsENetPacketPeer) PeerDisconnect(data int64) {
	self.Runtime.ENetPacketPeer_peer_disconnect(ENetPacketPeer{self}, data)
}
func (self methodsENetPacketPeer) PeerDisconnectLater(data int64) {
	self.Runtime.ENetPacketPeer_peer_disconnect_later(ENetPacketPeer{self}, data)
}
func (self methodsENetPacketPeer) PeerDisconnectNow(data int64) {
	self.Runtime.ENetPacketPeer_peer_disconnect_now(ENetPacketPeer{self}, data)
}
func (self methodsENetPacketPeer) Ping() {
	self.Runtime.ENetPacketPeer_ping(ENetPacketPeer{self})
}
func (self methodsENetPacketPeer) PingInterval(ping_interval int64) {
	self.Runtime.ENetPacketPeer_ping_interval(ENetPacketPeer{self}, ping_interval)
}
func (self methodsENetPacketPeer) Reset() {
	self.Runtime.ENetPacketPeer_reset(ENetPacketPeer{self})
}
func (self methodsENetPacketPeer) Send(channel int64, packet PackedByteArray, flags int64) int64 {
	return self.Runtime.ENetPacketPeer_send(ENetPacketPeer{self}, channel, packet, flags)
}
func (self methodsENetPacketPeer) ThrottleConfigure(interval int64, acceleration int64, deceleration int64) {
	self.Runtime.ENetPacketPeer_throttle_configure(ENetPacketPeer{self}, interval, acceleration, deceleration)
}
func (self methodsENetPacketPeer) SetTimeout(timeout int64, timeout_min int64, timeout_max int64) {
	self.Runtime.ENetPacketPeer_set_timeout(ENetPacketPeer{self}, timeout, timeout_min, timeout_max)
}
func (self methodsENetPacketPeer) GetRemoteAddress() string {
	return self.Runtime.ENetPacketPeer_get_remote_address(ENetPacketPeer{self})
}
func (self methodsENetPacketPeer) GetRemotePort() int64 {
	return self.Runtime.ENetPacketPeer_get_remote_port(ENetPacketPeer{self})
}
func (self methodsENetPacketPeer) GetStatistic(statistic ENetPacketPeerPeerStatistic) Float {
	return self.Runtime.ENetPacketPeer_get_statistic(ENetPacketPeer{self}, statistic)
}
func (self methodsENetPacketPeer) GetState() ENetPacketPeerPeerState {
	return self.Runtime.ENetPacketPeer_get_state(ENetPacketPeer{self})
}
func (self methodsENetPacketPeer) GetChannels() int64 {
	return self.Runtime.ENetPacketPeer_get_channels(ENetPacketPeer{self})
}
func (self methodsENetPacketPeer) IsActive() bool {
	return self.Runtime.ENetPacketPeer_is_active(ENetPacketPeer{self})
}

type methodsEditorCommandPalette struct {
	_ [0]*methodsEditorCommandPalette
	class
}

func (self EditorCommandPalette) ConfirmationDialog() ConfirmationDialog {
	var parent ConfirmationDialog
	parent.class = self.class
	return parent
}
func (self methodsEditorCommandPalette) AddCommand(command_name string, key_name string, binded_callable Callable, shortcut_text string) {
	self.Runtime.EditorCommandPalette_add_command(EditorCommandPalette{self}, command_name, key_name, binded_callable, shortcut_text)
}
func (self methodsEditorCommandPalette) RemoveCommand(key_name string) {
	self.Runtime.EditorCommandPalette_remove_command(EditorCommandPalette{self}, key_name)
}

type methodsEditorDebuggerPlugin struct {
	_ [0]*methodsEditorDebuggerPlugin
	class
}

func (self EditorDebuggerPlugin) RefCounted() RefCounted {
	var parent RefCounted
	parent.class = self.class
	return parent
}
func (self methodsEditorDebuggerPlugin) GetSession(id int64) EditorDebuggerSession {
	return self.Runtime.EditorDebuggerPlugin_get_session(EditorDebuggerPlugin{self}, id)
}
func (self methodsEditorDebuggerPlugin) GetSessions() Array {
	return self.Runtime.EditorDebuggerPlugin_get_sessions(EditorDebuggerPlugin{self})
}

type methodsEditorDebuggerSession struct {
	_ [0]*methodsEditorDebuggerSession
	class
}

func (self EditorDebuggerSession) RefCounted() RefCounted {
	var parent RefCounted
	parent.class = self.class
	return parent
}
func (self methodsEditorDebuggerSession) SendMessage(message string, data Array) {
	self.Runtime.EditorDebuggerSession_send_message(EditorDebuggerSession{self}, message, data)
}
func (self methodsEditorDebuggerSession) ToggleProfiler(profiler string, enable bool, data Array) {
	self.Runtime.EditorDebuggerSession_toggle_profiler(EditorDebuggerSession{self}, profiler, enable, data)
}
func (self methodsEditorDebuggerSession) IsBreaked() bool {
	return self.Runtime.EditorDebuggerSession_is_breaked(EditorDebuggerSession{self})
}
func (self methodsEditorDebuggerSession) IsDebuggable() bool {
	return self.Runtime.EditorDebuggerSession_is_debuggable(EditorDebuggerSession{self})
}
func (self methodsEditorDebuggerSession) IsActive() bool {
	return self.Runtime.EditorDebuggerSession_is_active(EditorDebuggerSession{self})
}
func (self methodsEditorDebuggerSession) AddSessionTab(control Control) {
	self.Runtime.EditorDebuggerSession_add_session_tab(EditorDebuggerSession{self}, control)
}
func (self methodsEditorDebuggerSession) RemoveSessionTab(control Control) {
	self.Runtime.EditorDebuggerSession_remove_session_tab(EditorDebuggerSession{self}, control)
}

type methodsEditorExportPlatform struct {
	_ [0]*methodsEditorExportPlatform
	class
}

func (self EditorExportPlatform) RefCounted() RefCounted {
	var parent RefCounted
	parent.class = self.class
	return parent
}
func (self methodsEditorExportPlatform) GetOsName() string {
	return self.Runtime.EditorExportPlatform_get_os_name(EditorExportPlatform{self})
}

type methodsEditorExportPlatformAndroid struct {
	_ [0]*methodsEditorExportPlatformAndroid
	class
}

func (self EditorExportPlatformAndroid) EditorExportPlatform() EditorExportPlatform {
	var parent EditorExportPlatform
	parent.class = self.class
	return parent
}

type methodsEditorExportPlatformIOS struct {
	_ [0]*methodsEditorExportPlatformIOS
	class
}

func (self EditorExportPlatformIOS) EditorExportPlatform() EditorExportPlatform {
	var parent EditorExportPlatform
	parent.class = self.class
	return parent
}

type methodsEditorExportPlatformLinuxBSD struct {
	_ [0]*methodsEditorExportPlatformLinuxBSD
	class
}

func (self EditorExportPlatformLinuxBSD) EditorExportPlatformPC() EditorExportPlatformPC {
	var parent EditorExportPlatformPC
	parent.class = self.class
	return parent
}

type methodsEditorExportPlatformMacOS struct {
	_ [0]*methodsEditorExportPlatformMacOS
	class
}

func (self EditorExportPlatformMacOS) EditorExportPlatform() EditorExportPlatform {
	var parent EditorExportPlatform
	parent.class = self.class
	return parent
}

type methodsEditorExportPlatformPC struct {
	_ [0]*methodsEditorExportPlatformPC
	class
}

func (self EditorExportPlatformPC) EditorExportPlatform() EditorExportPlatform {
	var parent EditorExportPlatform
	parent.class = self.class
	return parent
}

type methodsEditorExportPlatformWeb struct {
	_ [0]*methodsEditorExportPlatformWeb
	class
}

func (self EditorExportPlatformWeb) EditorExportPlatform() EditorExportPlatform {
	var parent EditorExportPlatform
	parent.class = self.class
	return parent
}

type methodsEditorExportPlatformWindows struct {
	_ [0]*methodsEditorExportPlatformWindows
	class
}

func (self EditorExportPlatformWindows) EditorExportPlatformPC() EditorExportPlatformPC {
	var parent EditorExportPlatformPC
	parent.class = self.class
	return parent
}

type methodsEditorExportPlugin struct {
	_ [0]*methodsEditorExportPlugin
	class
}

func (self EditorExportPlugin) RefCounted() RefCounted {
	var parent RefCounted
	parent.class = self.class
	return parent
}
func (self methodsEditorExportPlugin) AddSharedObject(path string, tags PackedStringArray, target string) {
	self.Runtime.EditorExportPlugin_add_shared_object(EditorExportPlugin{self}, path, tags, target)
}
func (self methodsEditorExportPlugin) AddIosProjectStaticLib(path string) {
	self.Runtime.EditorExportPlugin_add_ios_project_static_lib(EditorExportPlugin{self}, path)
}
func (self methodsEditorExportPlugin) AddFile(path string, file PackedByteArray, remap bool) {
	self.Runtime.EditorExportPlugin_add_file(EditorExportPlugin{self}, path, file, remap)
}
func (self methodsEditorExportPlugin) AddIosFramework(path string) {
	self.Runtime.EditorExportPlugin_add_ios_framework(EditorExportPlugin{self}, path)
}
func (self methodsEditorExportPlugin) AddIosEmbeddedFramework(path string) {
	self.Runtime.EditorExportPlugin_add_ios_embedded_framework(EditorExportPlugin{self}, path)
}
func (self methodsEditorExportPlugin) AddIosPlistContent(plist_content string) {
	self.Runtime.EditorExportPlugin_add_ios_plist_content(EditorExportPlugin{self}, plist_content)
}
func (self methodsEditorExportPlugin) AddIosLinkerFlags(flags string) {
	self.Runtime.EditorExportPlugin_add_ios_linker_flags(EditorExportPlugin{self}, flags)
}
func (self methodsEditorExportPlugin) AddIosBundleFile(path string) {
	self.Runtime.EditorExportPlugin_add_ios_bundle_file(EditorExportPlugin{self}, path)
}
func (self methodsEditorExportPlugin) AddIosCppCode(code string) {
	self.Runtime.EditorExportPlugin_add_ios_cpp_code(EditorExportPlugin{self}, code)
}
func (self methodsEditorExportPlugin) AddMacosPluginFile(path string) {
	self.Runtime.EditorExportPlugin_add_macos_plugin_file(EditorExportPlugin{self}, path)
}
func (self methodsEditorExportPlugin) Skip() {
	self.Runtime.EditorExportPlugin_skip(EditorExportPlugin{self})
}
func (self methodsEditorExportPlugin) GetOption(name string) any {
	return self.Runtime.EditorExportPlugin_get_option(EditorExportPlugin{self}, name)
}

type methodsEditorFeatureProfile struct {
	_ [0]*methodsEditorFeatureProfile
	class
}

func (self EditorFeatureProfile) RefCounted() RefCounted {
	var parent RefCounted
	parent.class = self.class
	return parent
}
func (self methodsEditorFeatureProfile) SetDisableClass(class_name string, disable bool) {
	self.Runtime.EditorFeatureProfile_set_disable_class(EditorFeatureProfile{self}, class_name, disable)
}
func (self methodsEditorFeatureProfile) IsClassDisabled(class_name string) bool {
	return self.Runtime.EditorFeatureProfile_is_class_disabled(EditorFeatureProfile{self}, class_name)
}
func (self methodsEditorFeatureProfile) SetDisableClassEditor(class_name string, disable bool) {
	self.Runtime.EditorFeatureProfile_set_disable_class_editor(EditorFeatureProfile{self}, class_name, disable)
}
func (self methodsEditorFeatureProfile) IsClassEditorDisabled(class_name string) bool {
	return self.Runtime.EditorFeatureProfile_is_class_editor_disabled(EditorFeatureProfile{self}, class_name)
}
func (self methodsEditorFeatureProfile) SetDisableClassProperty(class_name string, property string, disable bool) {
	self.Runtime.EditorFeatureProfile_set_disable_class_property(EditorFeatureProfile{self}, class_name, property, disable)
}
func (self methodsEditorFeatureProfile) IsClassPropertyDisabled(class_name string, property string) bool {
	return self.Runtime.EditorFeatureProfile_is_class_property_disabled(EditorFeatureProfile{self}, class_name, property)
}
func (self methodsEditorFeatureProfile) SetDisableFeature(feature EditorFeatureProfileFeature, disable bool) {
	self.Runtime.EditorFeatureProfile_set_disable_feature(EditorFeatureProfile{self}, feature, disable)
}
func (self methodsEditorFeatureProfile) IsFeatureDisabled(feature EditorFeatureProfileFeature) bool {
	return self.Runtime.EditorFeatureProfile_is_feature_disabled(EditorFeatureProfile{self}, feature)
}
func (self methodsEditorFeatureProfile) GetFeatureName(feature EditorFeatureProfileFeature) string {
	return self.Runtime.EditorFeatureProfile_get_feature_name(EditorFeatureProfile{self}, feature)
}
func (self methodsEditorFeatureProfile) SaveToFile(path string) int64 {
	return self.Runtime.EditorFeatureProfile_save_to_file(EditorFeatureProfile{self}, path)
}
func (self methodsEditorFeatureProfile) LoadFromFile(path string) int64 {
	return self.Runtime.EditorFeatureProfile_load_from_file(EditorFeatureProfile{self}, path)
}

type methodsEditorFileDialog struct {
	_ [0]*methodsEditorFileDialog
	class
}

func (self EditorFileDialog) ConfirmationDialog() ConfirmationDialog {
	var parent ConfirmationDialog
	parent.class = self.class
	return parent
}
func (self methodsEditorFileDialog) ClearFilters() {
	self.Runtime.EditorFileDialog_clear_filters(EditorFileDialog{self})
}
func (self methodsEditorFileDialog) AddFilter(filter string, description string) {
	self.Runtime.EditorFileDialog_add_filter(EditorFileDialog{self}, filter, description)
}
func (self methodsEditorFileDialog) SetFilters(filters PackedStringArray) {
	self.Runtime.EditorFileDialog_set_filters(EditorFileDialog{self}, filters)
}
func (self methodsEditorFileDialog) GetFilters() PackedStringArray {
	return self.Runtime.EditorFileDialog_get_filters(EditorFileDialog{self})
}
func (self methodsEditorFileDialog) GetCurrentDir() string {
	return self.Runtime.EditorFileDialog_get_current_dir(EditorFileDialog{self})
}
func (self methodsEditorFileDialog) GetCurrentFile() string {
	return self.Runtime.EditorFileDialog_get_current_file(EditorFileDialog{self})
}
func (self methodsEditorFileDialog) GetCurrentPath() string {
	return self.Runtime.EditorFileDialog_get_current_path(EditorFileDialog{self})
}
func (self methodsEditorFileDialog) SetCurrentDir(dir string) {
	self.Runtime.EditorFileDialog_set_current_dir(EditorFileDialog{self}, dir)
}
func (self methodsEditorFileDialog) SetCurrentFile(file string) {
	self.Runtime.EditorFileDialog_set_current_file(EditorFileDialog{self}, file)
}
func (self methodsEditorFileDialog) SetCurrentPath(path string) {
	self.Runtime.EditorFileDialog_set_current_path(EditorFileDialog{self}, path)
}
func (self methodsEditorFileDialog) SetFileMode(mode EditorFileDialogFileMode) {
	self.Runtime.EditorFileDialog_set_file_mode(EditorFileDialog{self}, mode)
}
func (self methodsEditorFileDialog) GetFileMode() EditorFileDialogFileMode {
	return self.Runtime.EditorFileDialog_get_file_mode(EditorFileDialog{self})
}
func (self methodsEditorFileDialog) GetVbox() VBoxContainer {
	return self.Runtime.EditorFileDialog_get_vbox(EditorFileDialog{self})
}
func (self methodsEditorFileDialog) GetLineEdit() LineEdit {
	return self.Runtime.EditorFileDialog_get_line_edit(EditorFileDialog{self})
}
func (self methodsEditorFileDialog) SetAccess(access EditorFileDialogAccess) {
	self.Runtime.EditorFileDialog_set_access(EditorFileDialog{self}, access)
}
func (self methodsEditorFileDialog) GetAccess() EditorFileDialogAccess {
	return self.Runtime.EditorFileDialog_get_access(EditorFileDialog{self})
}
func (self methodsEditorFileDialog) SetShowHiddenFiles(show bool) {
	self.Runtime.EditorFileDialog_set_show_hidden_files(EditorFileDialog{self}, show)
}
func (self methodsEditorFileDialog) IsShowingHiddenFiles() bool {
	return self.Runtime.EditorFileDialog_is_showing_hidden_files(EditorFileDialog{self})
}
func (self methodsEditorFileDialog) SetDisplayMode(mode EditorFileDialogDisplayMode) {
	self.Runtime.EditorFileDialog_set_display_mode(EditorFileDialog{self}, mode)
}
func (self methodsEditorFileDialog) GetDisplayMode() EditorFileDialogDisplayMode {
	return self.Runtime.EditorFileDialog_get_display_mode(EditorFileDialog{self})
}
func (self methodsEditorFileDialog) SetDisableOverwriteWarning(disable bool) {
	self.Runtime.EditorFileDialog_set_disable_overwrite_warning(EditorFileDialog{self}, disable)
}
func (self methodsEditorFileDialog) IsOverwriteWarningDisabled() bool {
	return self.Runtime.EditorFileDialog_is_overwrite_warning_disabled(EditorFileDialog{self})
}
func (self methodsEditorFileDialog) AddSideMenu(menu Control, title string) {
	self.Runtime.EditorFileDialog_add_side_menu(EditorFileDialog{self}, menu, title)
}
func (self methodsEditorFileDialog) Invalidate() {
	self.Runtime.EditorFileDialog_invalidate(EditorFileDialog{self})
}

type methodsEditorFileSystem struct {
	_ [0]*methodsEditorFileSystem
	class
}

func (self EditorFileSystem) Node() Node { var parent Node; parent.class = self.class; return parent }
func (self methodsEditorFileSystem) GetFilesystem() EditorFileSystemDirectory {
	return self.Runtime.EditorFileSystem_get_filesystem(EditorFileSystem{self})
}
func (self methodsEditorFileSystem) IsScanning() bool {
	return self.Runtime.EditorFileSystem_is_scanning(EditorFileSystem{self})
}
func (self methodsEditorFileSystem) GetScanningProgress() Float {
	return self.Runtime.EditorFileSystem_get_scanning_progress(EditorFileSystem{self})
}
func (self methodsEditorFileSystem) Scan() {
	self.Runtime.EditorFileSystem_scan(EditorFileSystem{self})
}
func (self methodsEditorFileSystem) ScanSources() {
	self.Runtime.EditorFileSystem_scan_sources(EditorFileSystem{self})
}
func (self methodsEditorFileSystem) UpdateFile(path string) {
	self.Runtime.EditorFileSystem_update_file(EditorFileSystem{self}, path)
}
func (self methodsEditorFileSystem) GetFilesystemPath(path string) EditorFileSystemDirectory {
	return self.Runtime.EditorFileSystem_get_filesystem_path(EditorFileSystem{self}, path)
}
func (self methodsEditorFileSystem) GetFileType(path string) string {
	return self.Runtime.EditorFileSystem_get_file_type(EditorFileSystem{self}, path)
}
func (self methodsEditorFileSystem) ReimportFiles(files PackedStringArray) {
	self.Runtime.EditorFileSystem_reimport_files(EditorFileSystem{self}, files)
}

type methodsEditorFileSystemDirectory struct {
	_ [0]*methodsEditorFileSystemDirectory
	class
}

func (self EditorFileSystemDirectory) Object() Object {
	var parent Object
	parent.class = self.class
	return parent
}
func (self methodsEditorFileSystemDirectory) GetSubdirCount() int64 {
	return self.Runtime.EditorFileSystemDirectory_get_subdir_count(EditorFileSystemDirectory{self})
}
func (self methodsEditorFileSystemDirectory) GetSubdir(idx int64) EditorFileSystemDirectory {
	return self.Runtime.EditorFileSystemDirectory_get_subdir(EditorFileSystemDirectory{self}, idx)
}
func (self methodsEditorFileSystemDirectory) GetFileCount() int64 {
	return self.Runtime.EditorFileSystemDirectory_get_file_count(EditorFileSystemDirectory{self})
}
func (self methodsEditorFileSystemDirectory) GetFile(idx int64) string {
	return self.Runtime.EditorFileSystemDirectory_get_file(EditorFileSystemDirectory{self}, idx)
}
func (self methodsEditorFileSystemDirectory) GetFilePath(idx int64) string {
	return self.Runtime.EditorFileSystemDirectory_get_file_path(EditorFileSystemDirectory{self}, idx)
}
func (self methodsEditorFileSystemDirectory) GetFileType(idx int64) string {
	return self.Runtime.EditorFileSystemDirectory_get_file_type(EditorFileSystemDirectory{self}, idx)
}
func (self methodsEditorFileSystemDirectory) GetFileScriptClassName(idx int64) string {
	return self.Runtime.EditorFileSystemDirectory_get_file_script_class_name(EditorFileSystemDirectory{self}, idx)
}
func (self methodsEditorFileSystemDirectory) GetFileScriptClassExtends(idx int64) string {
	return self.Runtime.EditorFileSystemDirectory_get_file_script_class_extends(EditorFileSystemDirectory{self}, idx)
}
func (self methodsEditorFileSystemDirectory) GetFileImportIsValid(idx int64) bool {
	return self.Runtime.EditorFileSystemDirectory_get_file_import_is_valid(EditorFileSystemDirectory{self}, idx)
}
func (self methodsEditorFileSystemDirectory) GetName() string {
	return self.Runtime.EditorFileSystemDirectory_get_name(EditorFileSystemDirectory{self})
}
func (self methodsEditorFileSystemDirectory) GetPath() string {
	return self.Runtime.EditorFileSystemDirectory_get_path(EditorFileSystemDirectory{self})
}
func (self methodsEditorFileSystemDirectory) GetParent() EditorFileSystemDirectory {
	return self.Runtime.EditorFileSystemDirectory_get_parent(EditorFileSystemDirectory{self})
}
func (self methodsEditorFileSystemDirectory) FindFileIndex(name string) int64 {
	return self.Runtime.EditorFileSystemDirectory_find_file_index(EditorFileSystemDirectory{self}, name)
}
func (self methodsEditorFileSystemDirectory) FindDirIndex(name string) int64 {
	return self.Runtime.EditorFileSystemDirectory_find_dir_index(EditorFileSystemDirectory{self}, name)
}

type methodsEditorFileSystemImportFormatSupportQuery struct {
	_ [0]*methodsEditorFileSystemImportFormatSupportQuery
	class
}

func (self EditorFileSystemImportFormatSupportQuery) RefCounted() RefCounted {
	var parent RefCounted
	parent.class = self.class
	return parent
}

type methodsEditorImportPlugin struct {
	_ [0]*methodsEditorImportPlugin
	class
}

func (self EditorImportPlugin) ResourceImporter() ResourceImporter {
	var parent ResourceImporter
	parent.class = self.class
	return parent
}
func (self methodsEditorImportPlugin) AppendImportExternalResource(path string, custom_options Dictionary, custom_importer string, generator_parameters any) int64 {
	return self.Runtime.EditorImportPlugin_append_import_external_resource(EditorImportPlugin{self}, path, custom_options, custom_importer, generator_parameters)
}

type methodsEditorInspector struct {
	_ [0]*methodsEditorInspector
	class
}

func (self EditorInspector) ScrollContainer() ScrollContainer {
	var parent ScrollContainer
	parent.class = self.class
	return parent
}
func (self methodsEditorInspector) GetSelectedPath() string {
	return self.Runtime.EditorInspector_get_selected_path(EditorInspector{self})
}
func (self methodsEditorInspector) GetEditedObject() Object {
	return self.Runtime.EditorInspector_get_edited_object(EditorInspector{self})
}

type methodsEditorInspectorPlugin struct {
	_ [0]*methodsEditorInspectorPlugin
	class
}

func (self EditorInspectorPlugin) RefCounted() RefCounted {
	var parent RefCounted
	parent.class = self.class
	return parent
}
func (self methodsEditorInspectorPlugin) AddCustomControl(control Control) {
	self.Runtime.EditorInspectorPlugin_add_custom_control(EditorInspectorPlugin{self}, control)
}
func (self methodsEditorInspectorPlugin) AddPropertyEditor(property string, editor Control, add_to_end bool) {
	self.Runtime.EditorInspectorPlugin_add_property_editor(EditorInspectorPlugin{self}, property, editor, add_to_end)
}
func (self methodsEditorInspectorPlugin) AddPropertyEditorForMultipleProperties(label string, properties PackedStringArray, editor Control) {
	self.Runtime.EditorInspectorPlugin_add_property_editor_for_multiple_properties(EditorInspectorPlugin{self}, label, properties, editor)
}

type methodsEditorInterface struct {
	_ [0]*methodsEditorInterface
	class
}

func (self EditorInterface) Object() Object {
	var parent Object
	parent.class = self.class
	return parent
}
func (self methodsEditorInterface) RestartEditor(save bool) {
	self.Runtime.EditorInterface_restart_editor(EditorInterface{self}, save)
}
func (self methodsEditorInterface) GetCommandPalette() EditorCommandPalette {
	return self.Runtime.EditorInterface_get_command_palette(EditorInterface{self})
}
func (self methodsEditorInterface) GetResourceFilesystem() EditorFileSystem {
	return self.Runtime.EditorInterface_get_resource_filesystem(EditorInterface{self})
}
func (self methodsEditorInterface) GetEditorPaths() EditorPaths {
	return self.Runtime.EditorInterface_get_editor_paths(EditorInterface{self})
}
func (self methodsEditorInterface) GetResourcePreviewer() EditorResourcePreview {
	return self.Runtime.EditorInterface_get_resource_previewer(EditorInterface{self})
}
func (self methodsEditorInterface) GetSelection() EditorSelection {
	return self.Runtime.EditorInterface_get_selection(EditorInterface{self})
}
func (self methodsEditorInterface) GetEditorSettings() EditorSettings {
	return self.Runtime.EditorInterface_get_editor_settings(EditorInterface{self})
}
func (self methodsEditorInterface) MakeMeshPreviews(meshes ArrayOf[Mesh], preview_size int64) ArrayOf[Texture2D] {
	return self.Runtime.EditorInterface_make_mesh_previews(EditorInterface{self}, meshes, preview_size)
}
func (self methodsEditorInterface) SetPluginEnabled(plugin string, enabled bool) {
	self.Runtime.EditorInterface_set_plugin_enabled(EditorInterface{self}, plugin, enabled)
}
func (self methodsEditorInterface) IsPluginEnabled(plugin string) bool {
	return self.Runtime.EditorInterface_is_plugin_enabled(EditorInterface{self}, plugin)
}
func (self methodsEditorInterface) GetEditorTheme() Theme {
	return self.Runtime.EditorInterface_get_editor_theme(EditorInterface{self})
}
func (self methodsEditorInterface) GetBaseControl() Control {
	return self.Runtime.EditorInterface_get_base_control(EditorInterface{self})
}
func (self methodsEditorInterface) GetEditorMainScreen() VBoxContainer {
	return self.Runtime.EditorInterface_get_editor_main_screen(EditorInterface{self})
}
func (self methodsEditorInterface) GetScriptEditor() ScriptEditor {
	return self.Runtime.EditorInterface_get_script_editor(EditorInterface{self})
}
func (self methodsEditorInterface) GetEditorViewport2d() SubViewport {
	return self.Runtime.EditorInterface_get_editor_viewport_2d(EditorInterface{self})
}
func (self methodsEditorInterface) GetEditorViewport3d(idx int64) SubViewport {
	return self.Runtime.EditorInterface_get_editor_viewport_3d(EditorInterface{self}, idx)
}
func (self methodsEditorInterface) SetMainScreenEditor(name string) {
	self.Runtime.EditorInterface_set_main_screen_editor(EditorInterface{self}, name)
}
func (self methodsEditorInterface) SetDistractionFreeMode(enter bool) {
	self.Runtime.EditorInterface_set_distraction_free_mode(EditorInterface{self}, enter)
}
func (self methodsEditorInterface) IsDistractionFreeModeEnabled() bool {
	return self.Runtime.EditorInterface_is_distraction_free_mode_enabled(EditorInterface{self})
}
func (self methodsEditorInterface) GetEditorScale() Float {
	return self.Runtime.EditorInterface_get_editor_scale(EditorInterface{self})
}
func (self methodsEditorInterface) PopupDialog(dialog Window, rect Rect2i) {
	self.Runtime.EditorInterface_popup_dialog(EditorInterface{self}, dialog, rect)
}
func (self methodsEditorInterface) PopupDialogCentered(dialog Window, minsize Vector2i) {
	self.Runtime.EditorInterface_popup_dialog_centered(EditorInterface{self}, dialog, minsize)
}
func (self methodsEditorInterface) PopupDialogCenteredRatio(dialog Window, ratio Float) {
	self.Runtime.EditorInterface_popup_dialog_centered_ratio(EditorInterface{self}, dialog, ratio)
}
func (self methodsEditorInterface) PopupDialogCenteredClamped(dialog Window, minsize Vector2i, fallback_ratio Float) {
	self.Runtime.EditorInterface_popup_dialog_centered_clamped(EditorInterface{self}, dialog, minsize, fallback_ratio)
}
func (self methodsEditorInterface) GetCurrentFeatureProfile() string {
	return self.Runtime.EditorInterface_get_current_feature_profile(EditorInterface{self})
}
func (self methodsEditorInterface) SetCurrentFeatureProfile(profile_name string) {
	self.Runtime.EditorInterface_set_current_feature_profile(EditorInterface{self}, profile_name)
}
func (self methodsEditorInterface) GetFileSystemDock() FileSystemDock {
	return self.Runtime.EditorInterface_get_file_system_dock(EditorInterface{self})
}
func (self methodsEditorInterface) SelectFile(file string) {
	self.Runtime.EditorInterface_select_file(EditorInterface{self}, file)
}
func (self methodsEditorInterface) GetSelectedPaths() PackedStringArray {
	return self.Runtime.EditorInterface_get_selected_paths(EditorInterface{self})
}
func (self methodsEditorInterface) GetCurrentPath() string {
	return self.Runtime.EditorInterface_get_current_path(EditorInterface{self})
}
func (self methodsEditorInterface) GetCurrentDirectory() string {
	return self.Runtime.EditorInterface_get_current_directory(EditorInterface{self})
}
func (self methodsEditorInterface) GetInspector() EditorInspector {
	return self.Runtime.EditorInterface_get_inspector(EditorInterface{self})
}
func (self methodsEditorInterface) InspectObject(object Object, for_property string, inspector_only bool) {
	self.Runtime.EditorInterface_inspect_object(EditorInterface{self}, object, for_property, inspector_only)
}
func (self methodsEditorInterface) EditResource(resource Resource) {
	self.Runtime.EditorInterface_edit_resource(EditorInterface{self}, resource)
}
func (self methodsEditorInterface) EditNode(node Node) {
	self.Runtime.EditorInterface_edit_node(EditorInterface{self}, node)
}
func (self methodsEditorInterface) EditScript(script Script, line int64, column int64, grab_focus bool) {
	self.Runtime.EditorInterface_edit_script(EditorInterface{self}, script, line, column, grab_focus)
}
func (self methodsEditorInterface) OpenSceneFromPath(scene_filepath string) {
	self.Runtime.EditorInterface_open_scene_from_path(EditorInterface{self}, scene_filepath)
}
func (self methodsEditorInterface) ReloadSceneFromPath(scene_filepath string) {
	self.Runtime.EditorInterface_reload_scene_from_path(EditorInterface{self}, scene_filepath)
}
func (self methodsEditorInterface) GetOpenScenes() PackedStringArray {
	return self.Runtime.EditorInterface_get_open_scenes(EditorInterface{self})
}
func (self methodsEditorInterface) GetEditedSceneRoot() Node {
	return self.Runtime.EditorInterface_get_edited_scene_root(EditorInterface{self})
}
func (self methodsEditorInterface) SaveScene() int64 {
	return self.Runtime.EditorInterface_save_scene(EditorInterface{self})
}
func (self methodsEditorInterface) SaveSceneAs(path string, with_preview bool) {
	self.Runtime.EditorInterface_save_scene_as(EditorInterface{self}, path, with_preview)
}
func (self methodsEditorInterface) SaveAllScenes() {
	self.Runtime.EditorInterface_save_all_scenes(EditorInterface{self})
}
func (self methodsEditorInterface) MarkSceneAsUnsaved() {
	self.Runtime.EditorInterface_mark_scene_as_unsaved(EditorInterface{self})
}
func (self methodsEditorInterface) PlayMainScene() {
	self.Runtime.EditorInterface_play_main_scene(EditorInterface{self})
}
func (self methodsEditorInterface) PlayCurrentScene() {
	self.Runtime.EditorInterface_play_current_scene(EditorInterface{self})
}
func (self methodsEditorInterface) PlayCustomScene(scene_filepath string) {
	self.Runtime.EditorInterface_play_custom_scene(EditorInterface{self}, scene_filepath)
}
func (self methodsEditorInterface) StopPlayingScene() {
	self.Runtime.EditorInterface_stop_playing_scene(EditorInterface{self})
}
func (self methodsEditorInterface) IsPlayingScene() bool {
	return self.Runtime.EditorInterface_is_playing_scene(EditorInterface{self})
}
func (self methodsEditorInterface) GetPlayingScene() string {
	return self.Runtime.EditorInterface_get_playing_scene(EditorInterface{self})
}
func (self methodsEditorInterface) SetMovieMakerEnabled(enabled bool) {
	self.Runtime.EditorInterface_set_movie_maker_enabled(EditorInterface{self}, enabled)
}
func (self methodsEditorInterface) IsMovieMakerEnabled() bool {
	return self.Runtime.EditorInterface_is_movie_maker_enabled(EditorInterface{self})
}

type methodsEditorNode3DGizmo struct {
	_ [0]*methodsEditorNode3DGizmo
	class
}

func (self EditorNode3DGizmo) Node3DGizmo() Node3DGizmo {
	var parent Node3DGizmo
	parent.class = self.class
	return parent
}
func (self methodsEditorNode3DGizmo) AddLines(lines PackedVector3Array, material Material, billboard bool, modulate Color) {
	self.Runtime.EditorNode3DGizmo_add_lines(EditorNode3DGizmo{self}, lines, material, billboard, modulate)
}
func (self methodsEditorNode3DGizmo) AddMesh(mesh Mesh, material Material, transform Transform3D, skeleton SkinReference) {
	self.Runtime.EditorNode3DGizmo_add_mesh(EditorNode3DGizmo{self}, mesh, material, transform, skeleton)
}
func (self methodsEditorNode3DGizmo) AddCollisionSegments(segments PackedVector3Array) {
	self.Runtime.EditorNode3DGizmo_add_collision_segments(EditorNode3DGizmo{self}, segments)
}
func (self methodsEditorNode3DGizmo) AddCollisionTriangles(triangles TriangleMesh) {
	self.Runtime.EditorNode3DGizmo_add_collision_triangles(EditorNode3DGizmo{self}, triangles)
}
func (self methodsEditorNode3DGizmo) AddUnscaledBillboard(material Material, default_scale Float, modulate Color) {
	self.Runtime.EditorNode3DGizmo_add_unscaled_billboard(EditorNode3DGizmo{self}, material, default_scale, modulate)
}
func (self methodsEditorNode3DGizmo) AddHandles(handles PackedVector3Array, material Material, ids PackedInt32Array, billboard bool, secondary bool) {
	self.Runtime.EditorNode3DGizmo_add_handles(EditorNode3DGizmo{self}, handles, material, ids, billboard, secondary)
}
func (self methodsEditorNode3DGizmo) SetNode3d(node Node) {
	self.Runtime.EditorNode3DGizmo_set_node_3d(EditorNode3DGizmo{self}, node)
}
func (self methodsEditorNode3DGizmo) GetNode3d() Node3D {
	return self.Runtime.EditorNode3DGizmo_get_node_3d(EditorNode3DGizmo{self})
}
func (self methodsEditorNode3DGizmo) GetPlugin() EditorNode3DGizmoPlugin {
	return self.Runtime.EditorNode3DGizmo_get_plugin(EditorNode3DGizmo{self})
}
func (self methodsEditorNode3DGizmo) Clear() {
	self.Runtime.EditorNode3DGizmo_clear(EditorNode3DGizmo{self})
}
func (self methodsEditorNode3DGizmo) SetHidden(hidden bool) {
	self.Runtime.EditorNode3DGizmo_set_hidden(EditorNode3DGizmo{self}, hidden)
}
func (self methodsEditorNode3DGizmo) IsSubgizmoSelected(id int64) bool {
	return self.Runtime.EditorNode3DGizmo_is_subgizmo_selected(EditorNode3DGizmo{self}, id)
}
func (self methodsEditorNode3DGizmo) GetSubgizmoSelection() PackedInt32Array {
	return self.Runtime.EditorNode3DGizmo_get_subgizmo_selection(EditorNode3DGizmo{self})
}

type methodsEditorNode3DGizmoPlugin struct {
	_ [0]*methodsEditorNode3DGizmoPlugin
	class
}

func (self EditorNode3DGizmoPlugin) Resource() Resource {
	var parent Resource
	parent.class = self.class
	return parent
}
func (self methodsEditorNode3DGizmoPlugin) CreateMaterial(name string, color Color, billboard bool, on_top bool, use_vertex_color bool) {
	self.Runtime.EditorNode3DGizmoPlugin_create_material(EditorNode3DGizmoPlugin{self}, name, color, billboard, on_top, use_vertex_color)
}
func (self methodsEditorNode3DGizmoPlugin) CreateIconMaterial(name string, texture Texture2D, on_top bool, color Color) {
	self.Runtime.EditorNode3DGizmoPlugin_create_icon_material(EditorNode3DGizmoPlugin{self}, name, texture, on_top, color)
}
func (self methodsEditorNode3DGizmoPlugin) CreateHandleMaterial(name string, billboard bool, texture Texture2D) {
	self.Runtime.EditorNode3DGizmoPlugin_create_handle_material(EditorNode3DGizmoPlugin{self}, name, billboard, texture)
}
func (self methodsEditorNode3DGizmoPlugin) AddMaterial(name string, material StandardMaterial3D) {
	self.Runtime.EditorNode3DGizmoPlugin_add_material(EditorNode3DGizmoPlugin{self}, name, material)
}
func (self methodsEditorNode3DGizmoPlugin) GetMaterial(name string, gizmo EditorNode3DGizmo) StandardMaterial3D {
	return self.Runtime.EditorNode3DGizmoPlugin_get_material(EditorNode3DGizmoPlugin{self}, name, gizmo)
}

type methodsEditorPaths struct {
	_ [0]*methodsEditorPaths
	class
}

func (self EditorPaths) Object() Object { var parent Object; parent.class = self.class; return parent }
func (self methodsEditorPaths) GetDataDir() string {
	return self.Runtime.EditorPaths_get_data_dir(EditorPaths{self})
}
func (self methodsEditorPaths) GetConfigDir() string {
	return self.Runtime.EditorPaths_get_config_dir(EditorPaths{self})
}
func (self methodsEditorPaths) GetCacheDir() string {
	return self.Runtime.EditorPaths_get_cache_dir(EditorPaths{self})
}
func (self methodsEditorPaths) IsSelfContained() bool {
	return self.Runtime.EditorPaths_is_self_contained(EditorPaths{self})
}
func (self methodsEditorPaths) GetSelfContainedFile() string {
	return self.Runtime.EditorPaths_get_self_contained_file(EditorPaths{self})
}
func (self methodsEditorPaths) GetProjectSettingsDir() string {
	return self.Runtime.EditorPaths_get_project_settings_dir(EditorPaths{self})
}

type methodsEditorPlugin struct {
	_ [0]*methodsEditorPlugin
	class
}

func (self EditorPlugin) Node() Node { var parent Node; parent.class = self.class; return parent }
func (self methodsEditorPlugin) AddControlToContainer(container EditorPluginCustomControlContainer, control Control) {
	self.Runtime.EditorPlugin_add_control_to_container(EditorPlugin{self}, container, control)
}
func (self methodsEditorPlugin) AddControlToBottomPanel(control Control, title string) Button {
	return self.Runtime.EditorPlugin_add_control_to_bottom_panel(EditorPlugin{self}, control, title)
}
func (self methodsEditorPlugin) AddControlToDock(slot EditorPluginDockSlot, control Control) {
	self.Runtime.EditorPlugin_add_control_to_dock(EditorPlugin{self}, slot, control)
}
func (self methodsEditorPlugin) RemoveControlFromDocks(control Control) {
	self.Runtime.EditorPlugin_remove_control_from_docks(EditorPlugin{self}, control)
}
func (self methodsEditorPlugin) RemoveControlFromBottomPanel(control Control) {
	self.Runtime.EditorPlugin_remove_control_from_bottom_panel(EditorPlugin{self}, control)
}
func (self methodsEditorPlugin) RemoveControlFromContainer(container EditorPluginCustomControlContainer, control Control) {
	self.Runtime.EditorPlugin_remove_control_from_container(EditorPlugin{self}, container, control)
}
func (self methodsEditorPlugin) AddToolMenuItem(name string, callable Callable) {
	self.Runtime.EditorPlugin_add_tool_menu_item(EditorPlugin{self}, name, callable)
}
func (self methodsEditorPlugin) AddToolSubmenuItem(name string, submenu PopupMenu) {
	self.Runtime.EditorPlugin_add_tool_submenu_item(EditorPlugin{self}, name, submenu)
}
func (self methodsEditorPlugin) RemoveToolMenuItem(name string) {
	self.Runtime.EditorPlugin_remove_tool_menu_item(EditorPlugin{self}, name)
}
func (self methodsEditorPlugin) GetExportAsMenu() PopupMenu {
	return self.Runtime.EditorPlugin_get_export_as_menu(EditorPlugin{self})
}
func (self methodsEditorPlugin) AddCustomType(atype string, base string, script Script, icon Texture2D) {
	self.Runtime.EditorPlugin_add_custom_type(EditorPlugin{self}, atype, base, script, icon)
}
func (self methodsEditorPlugin) RemoveCustomType(atype string) {
	self.Runtime.EditorPlugin_remove_custom_type(EditorPlugin{self}, atype)
}
func (self methodsEditorPlugin) AddAutoloadSingleton(name string, path string) {
	self.Runtime.EditorPlugin_add_autoload_singleton(EditorPlugin{self}, name, path)
}
func (self methodsEditorPlugin) RemoveAutoloadSingleton(name string) {
	self.Runtime.EditorPlugin_remove_autoload_singleton(EditorPlugin{self}, name)
}
func (self methodsEditorPlugin) UpdateOverlays() int64 {
	return self.Runtime.EditorPlugin_update_overlays(EditorPlugin{self})
}
func (self methodsEditorPlugin) MakeBottomPanelItemVisible(item Control) {
	self.Runtime.EditorPlugin_make_bottom_panel_item_visible(EditorPlugin{self}, item)
}
func (self methodsEditorPlugin) HideBottomPanel() {
	self.Runtime.EditorPlugin_hide_bottom_panel(EditorPlugin{self})
}
func (self methodsEditorPlugin) GetUndoRedo() EditorUndoRedoManager {
	return self.Runtime.EditorPlugin_get_undo_redo(EditorPlugin{self})
}
func (self methodsEditorPlugin) AddUndoRedoInspectorHookCallback(callable Callable) {
	self.Runtime.EditorPlugin_add_undo_redo_inspector_hook_callback(EditorPlugin{self}, callable)
}
func (self methodsEditorPlugin) RemoveUndoRedoInspectorHookCallback(callable Callable) {
	self.Runtime.EditorPlugin_remove_undo_redo_inspector_hook_callback(EditorPlugin{self}, callable)
}
func (self methodsEditorPlugin) QueueSaveLayout() {
	self.Runtime.EditorPlugin_queue_save_layout(EditorPlugin{self})
}
func (self methodsEditorPlugin) AddTranslationParserPlugin(parser EditorTranslationParserPlugin) {
	self.Runtime.EditorPlugin_add_translation_parser_plugin(EditorPlugin{self}, parser)
}
func (self methodsEditorPlugin) RemoveTranslationParserPlugin(parser EditorTranslationParserPlugin) {
	self.Runtime.EditorPlugin_remove_translation_parser_plugin(EditorPlugin{self}, parser)
}
func (self methodsEditorPlugin) AddImportPlugin(importer EditorImportPlugin, first_priority bool) {
	self.Runtime.EditorPlugin_add_import_plugin(EditorPlugin{self}, importer, first_priority)
}
func (self methodsEditorPlugin) RemoveImportPlugin(importer EditorImportPlugin) {
	self.Runtime.EditorPlugin_remove_import_plugin(EditorPlugin{self}, importer)
}
func (self methodsEditorPlugin) AddSceneFormatImporterPlugin(scene_format_importer EditorSceneFormatImporter, first_priority bool) {
	self.Runtime.EditorPlugin_add_scene_format_importer_plugin(EditorPlugin{self}, scene_format_importer, first_priority)
}
func (self methodsEditorPlugin) RemoveSceneFormatImporterPlugin(scene_format_importer EditorSceneFormatImporter) {
	self.Runtime.EditorPlugin_remove_scene_format_importer_plugin(EditorPlugin{self}, scene_format_importer)
}
func (self methodsEditorPlugin) AddScenePostImportPlugin(scene_import_plugin EditorScenePostImportPlugin, first_priority bool) {
	self.Runtime.EditorPlugin_add_scene_post_import_plugin(EditorPlugin{self}, scene_import_plugin, first_priority)
}
func (self methodsEditorPlugin) RemoveScenePostImportPlugin(scene_import_plugin EditorScenePostImportPlugin) {
	self.Runtime.EditorPlugin_remove_scene_post_import_plugin(EditorPlugin{self}, scene_import_plugin)
}
func (self methodsEditorPlugin) AddExportPlugin(plugin EditorExportPlugin) {
	self.Runtime.EditorPlugin_add_export_plugin(EditorPlugin{self}, plugin)
}
func (self methodsEditorPlugin) RemoveExportPlugin(plugin EditorExportPlugin) {
	self.Runtime.EditorPlugin_remove_export_plugin(EditorPlugin{self}, plugin)
}
func (self methodsEditorPlugin) AddNode3dGizmoPlugin(plugin EditorNode3DGizmoPlugin) {
	self.Runtime.EditorPlugin_add_node_3d_gizmo_plugin(EditorPlugin{self}, plugin)
}
func (self methodsEditorPlugin) RemoveNode3dGizmoPlugin(plugin EditorNode3DGizmoPlugin) {
	self.Runtime.EditorPlugin_remove_node_3d_gizmo_plugin(EditorPlugin{self}, plugin)
}
func (self methodsEditorPlugin) AddInspectorPlugin(plugin EditorInspectorPlugin) {
	self.Runtime.EditorPlugin_add_inspector_plugin(EditorPlugin{self}, plugin)
}
func (self methodsEditorPlugin) RemoveInspectorPlugin(plugin EditorInspectorPlugin) {
	self.Runtime.EditorPlugin_remove_inspector_plugin(EditorPlugin{self}, plugin)
}
func (self methodsEditorPlugin) AddResourceConversionPlugin(plugin EditorResourceConversionPlugin) {
	self.Runtime.EditorPlugin_add_resource_conversion_plugin(EditorPlugin{self}, plugin)
}
func (self methodsEditorPlugin) RemoveResourceConversionPlugin(plugin EditorResourceConversionPlugin) {
	self.Runtime.EditorPlugin_remove_resource_conversion_plugin(EditorPlugin{self}, plugin)
}
func (self methodsEditorPlugin) SetInputEventForwardingAlwaysEnabled() {
	self.Runtime.EditorPlugin_set_input_event_forwarding_always_enabled(EditorPlugin{self})
}
func (self methodsEditorPlugin) SetForceDrawOverForwardingEnabled() {
	self.Runtime.EditorPlugin_set_force_draw_over_forwarding_enabled(EditorPlugin{self})
}
func (self methodsEditorPlugin) GetEditorInterface() EditorInterface {
	return self.Runtime.EditorPlugin_get_editor_interface(EditorPlugin{self})
}
func (self methodsEditorPlugin) GetScriptCreateDialog() ScriptCreateDialog {
	return self.Runtime.EditorPlugin_get_script_create_dialog(EditorPlugin{self})
}
func (self methodsEditorPlugin) AddDebuggerPlugin(script EditorDebuggerPlugin) {
	self.Runtime.EditorPlugin_add_debugger_plugin(EditorPlugin{self}, script)
}
func (self methodsEditorPlugin) RemoveDebuggerPlugin(script EditorDebuggerPlugin) {
	self.Runtime.EditorPlugin_remove_debugger_plugin(EditorPlugin{self}, script)
}
func (self methodsEditorPlugin) GetPluginVersion() string {
	return self.Runtime.EditorPlugin_get_plugin_version(EditorPlugin{self})
}

type methodsEditorProperty struct {
	_ [0]*methodsEditorProperty
	class
}

func (self EditorProperty) Container() Container {
	var parent Container
	parent.class = self.class
	return parent
}
func (self methodsEditorProperty) SetLabel(text string) {
	self.Runtime.EditorProperty_set_label(EditorProperty{self}, text)
}
func (self methodsEditorProperty) GetLabel() string {
	return self.Runtime.EditorProperty_get_label(EditorProperty{self})
}
func (self methodsEditorProperty) SetReadOnly(read_only bool) {
	self.Runtime.EditorProperty_set_read_only(EditorProperty{self}, read_only)
}
func (self methodsEditorProperty) IsReadOnly() bool {
	return self.Runtime.EditorProperty_is_read_only(EditorProperty{self})
}
func (self methodsEditorProperty) SetCheckable(checkable bool) {
	self.Runtime.EditorProperty_set_checkable(EditorProperty{self}, checkable)
}
func (self methodsEditorProperty) IsCheckable() bool {
	return self.Runtime.EditorProperty_is_checkable(EditorProperty{self})
}
func (self methodsEditorProperty) SetChecked(checked bool) {
	self.Runtime.EditorProperty_set_checked(EditorProperty{self}, checked)
}
func (self methodsEditorProperty) IsChecked() bool {
	return self.Runtime.EditorProperty_is_checked(EditorProperty{self})
}
func (self methodsEditorProperty) SetDrawWarning(draw_warning bool) {
	self.Runtime.EditorProperty_set_draw_warning(EditorProperty{self}, draw_warning)
}
func (self methodsEditorProperty) IsDrawWarning() bool {
	return self.Runtime.EditorProperty_is_draw_warning(EditorProperty{self})
}
func (self methodsEditorProperty) SetKeying(keying bool) {
	self.Runtime.EditorProperty_set_keying(EditorProperty{self}, keying)
}
func (self methodsEditorProperty) IsKeying() bool {
	return self.Runtime.EditorProperty_is_keying(EditorProperty{self})
}
func (self methodsEditorProperty) SetDeletable(deletable bool) {
	self.Runtime.EditorProperty_set_deletable(EditorProperty{self}, deletable)
}
func (self methodsEditorProperty) IsDeletable() bool {
	return self.Runtime.EditorProperty_is_deletable(EditorProperty{self})
}
func (self methodsEditorProperty) GetEditedProperty() string {
	return self.Runtime.EditorProperty_get_edited_property(EditorProperty{self})
}
func (self methodsEditorProperty) GetEditedObject() Object {
	return self.Runtime.EditorProperty_get_edited_object(EditorProperty{self})
}
func (self methodsEditorProperty) UpdateProperty() {
	self.Runtime.EditorProperty_update_property(EditorProperty{self})
}
func (self methodsEditorProperty) AddFocusable(control Control) {
	self.Runtime.EditorProperty_add_focusable(EditorProperty{self}, control)
}
func (self methodsEditorProperty) SetBottomEditor(editor Control) {
	self.Runtime.EditorProperty_set_bottom_editor(EditorProperty{self}, editor)
}
func (self methodsEditorProperty) EmitChanged(property string, value any, field string, changing bool) {
	self.Runtime.EditorProperty_emit_changed(EditorProperty{self}, property, value, field, changing)
}

type methodsEditorResourceConversionPlugin struct {
	_ [0]*methodsEditorResourceConversionPlugin
	class
}

func (self EditorResourceConversionPlugin) RefCounted() RefCounted {
	var parent RefCounted
	parent.class = self.class
	return parent
}

type methodsEditorResourcePicker struct {
	_ [0]*methodsEditorResourcePicker
	class
}

func (self EditorResourcePicker) HBoxContainer() HBoxContainer {
	var parent HBoxContainer
	parent.class = self.class
	return parent
}
func (self methodsEditorResourcePicker) SetBaseType(base_type string) {
	self.Runtime.EditorResourcePicker_set_base_type(EditorResourcePicker{self}, base_type)
}
func (self methodsEditorResourcePicker) GetBaseType() string {
	return self.Runtime.EditorResourcePicker_get_base_type(EditorResourcePicker{self})
}
func (self methodsEditorResourcePicker) GetAllowedTypes() PackedStringArray {
	return self.Runtime.EditorResourcePicker_get_allowed_types(EditorResourcePicker{self})
}
func (self methodsEditorResourcePicker) SetEditedResource(resource Resource) {
	self.Runtime.EditorResourcePicker_set_edited_resource(EditorResourcePicker{self}, resource)
}
func (self methodsEditorResourcePicker) GetEditedResource() Resource {
	return self.Runtime.EditorResourcePicker_get_edited_resource(EditorResourcePicker{self})
}
func (self methodsEditorResourcePicker) SetToggleMode(enable bool) {
	self.Runtime.EditorResourcePicker_set_toggle_mode(EditorResourcePicker{self}, enable)
}
func (self methodsEditorResourcePicker) IsToggleMode() bool {
	return self.Runtime.EditorResourcePicker_is_toggle_mode(EditorResourcePicker{self})
}
func (self methodsEditorResourcePicker) SetTogglePressed(pressed bool) {
	self.Runtime.EditorResourcePicker_set_toggle_pressed(EditorResourcePicker{self}, pressed)
}
func (self methodsEditorResourcePicker) SetEditable(enable bool) {
	self.Runtime.EditorResourcePicker_set_editable(EditorResourcePicker{self}, enable)
}
func (self methodsEditorResourcePicker) IsEditable() bool {
	return self.Runtime.EditorResourcePicker_is_editable(EditorResourcePicker{self})
}

type methodsEditorResourcePreview struct {
	_ [0]*methodsEditorResourcePreview
	class
}

func (self EditorResourcePreview) Node() Node {
	var parent Node
	parent.class = self.class
	return parent
}
func (self methodsEditorResourcePreview) QueueResourcePreview(path string, receiver Object, receiver_func string, userdata any) {
	self.Runtime.EditorResourcePreview_queue_resource_preview(EditorResourcePreview{self}, path, receiver, receiver_func, userdata)
}
func (self methodsEditorResourcePreview) QueueEditedResourcePreview(resource Resource, receiver Object, receiver_func string, userdata any) {
	self.Runtime.EditorResourcePreview_queue_edited_resource_preview(EditorResourcePreview{self}, resource, receiver, receiver_func, userdata)
}
func (self methodsEditorResourcePreview) AddPreviewGenerator(generator EditorResourcePreviewGenerator) {
	self.Runtime.EditorResourcePreview_add_preview_generator(EditorResourcePreview{self}, generator)
}
func (self methodsEditorResourcePreview) RemovePreviewGenerator(generator EditorResourcePreviewGenerator) {
	self.Runtime.EditorResourcePreview_remove_preview_generator(EditorResourcePreview{self}, generator)
}
func (self methodsEditorResourcePreview) CheckForInvalidation(path string) {
	self.Runtime.EditorResourcePreview_check_for_invalidation(EditorResourcePreview{self}, path)
}

type methodsEditorResourcePreviewGenerator struct {
	_ [0]*methodsEditorResourcePreviewGenerator
	class
}

func (self EditorResourcePreviewGenerator) RefCounted() RefCounted {
	var parent RefCounted
	parent.class = self.class
	return parent
}

type methodsEditorResourceTooltipPlugin struct {
	_ [0]*methodsEditorResourceTooltipPlugin
	class
}

func (self EditorResourceTooltipPlugin) RefCounted() RefCounted {
	var parent RefCounted
	parent.class = self.class
	return parent
}
func (self methodsEditorResourceTooltipPlugin) RequestThumbnail(path string, control TextureRect) {
	self.Runtime.EditorResourceTooltipPlugin_request_thumbnail(EditorResourceTooltipPlugin{self}, path, control)
}

type methodsEditorSceneFormatImporter struct {
	_ [0]*methodsEditorSceneFormatImporter
	class
}

func (self EditorSceneFormatImporter) RefCounted() RefCounted {
	var parent RefCounted
	parent.class = self.class
	return parent
}

type methodsEditorSceneFormatImporterBlend struct {
	_ [0]*methodsEditorSceneFormatImporterBlend
	class
}

func (self EditorSceneFormatImporterBlend) EditorSceneFormatImporter() EditorSceneFormatImporter {
	var parent EditorSceneFormatImporter
	parent.class = self.class
	return parent
}

type methodsEditorSceneFormatImporterFBX struct {
	_ [0]*methodsEditorSceneFormatImporterFBX
	class
}

func (self EditorSceneFormatImporterFBX) EditorSceneFormatImporter() EditorSceneFormatImporter {
	var parent EditorSceneFormatImporter
	parent.class = self.class
	return parent
}

type methodsEditorSceneFormatImporterGLTF struct {
	_ [0]*methodsEditorSceneFormatImporterGLTF
	class
}

func (self EditorSceneFormatImporterGLTF) EditorSceneFormatImporter() EditorSceneFormatImporter {
	var parent EditorSceneFormatImporter
	parent.class = self.class
	return parent
}

type methodsEditorScenePostImport struct {
	_ [0]*methodsEditorScenePostImport
	class
}

func (self EditorScenePostImport) RefCounted() RefCounted {
	var parent RefCounted
	parent.class = self.class
	return parent
}
func (self methodsEditorScenePostImport) GetSourceFile() string {
	return self.Runtime.EditorScenePostImport_get_source_file(EditorScenePostImport{self})
}

type methodsEditorScenePostImportPlugin struct {
	_ [0]*methodsEditorScenePostImportPlugin
	class
}

func (self EditorScenePostImportPlugin) RefCounted() RefCounted {
	var parent RefCounted
	parent.class = self.class
	return parent
}
func (self methodsEditorScenePostImportPlugin) GetOptionValue(name string) any {
	return self.Runtime.EditorScenePostImportPlugin_get_option_value(EditorScenePostImportPlugin{self}, name)
}
func (self methodsEditorScenePostImportPlugin) AddImportOption(name string, value any) {
	self.Runtime.EditorScenePostImportPlugin_add_import_option(EditorScenePostImportPlugin{self}, name, value)
}
func (self methodsEditorScenePostImportPlugin) AddImportOptionAdvanced(atype VariantType, name string, default_value any, hint PropertyHint, hint_string string, usage_flags int64) {
	self.Runtime.EditorScenePostImportPlugin_add_import_option_advanced(EditorScenePostImportPlugin{self}, atype, name, default_value, hint, hint_string, usage_flags)
}

type methodsEditorScript struct {
	_ [0]*methodsEditorScript
	class
}

func (self EditorScript) RefCounted() RefCounted {
	var parent RefCounted
	parent.class = self.class
	return parent
}
func (self methodsEditorScript) AddRootNode(node Node) {
	self.Runtime.EditorScript_add_root_node(EditorScript{self}, node)
}
func (self methodsEditorScript) GetScene() Node {
	return self.Runtime.EditorScript_get_scene(EditorScript{self})
}
func (self methodsEditorScript) GetEditorInterface() EditorInterface {
	return self.Runtime.EditorScript_get_editor_interface(EditorScript{self})
}

type methodsEditorScriptPicker struct {
	_ [0]*methodsEditorScriptPicker
	class
}

func (self EditorScriptPicker) EditorResourcePicker() EditorResourcePicker {
	var parent EditorResourcePicker
	parent.class = self.class
	return parent
}
func (self methodsEditorScriptPicker) SetScriptOwner(owner_node Node) {
	self.Runtime.EditorScriptPicker_set_script_owner(EditorScriptPicker{self}, owner_node)
}
func (self methodsEditorScriptPicker) GetScriptOwner() Node {
	return self.Runtime.EditorScriptPicker_get_script_owner(EditorScriptPicker{self})
}

type methodsEditorSelection struct {
	_ [0]*methodsEditorSelection
	class
}

func (self EditorSelection) Object() Object {
	var parent Object
	parent.class = self.class
	return parent
}
func (self methodsEditorSelection) Clear() {
	self.Runtime.EditorSelection_clear(EditorSelection{self})
}
func (self methodsEditorSelection) AddNode(node Node) {
	self.Runtime.EditorSelection_add_node(EditorSelection{self}, node)
}
func (self methodsEditorSelection) RemoveNode(node Node) {
	self.Runtime.EditorSelection_remove_node(EditorSelection{self}, node)
}
func (self methodsEditorSelection) GetSelectedNodes() ArrayOf[Node] {
	return self.Runtime.EditorSelection_get_selected_nodes(EditorSelection{self})
}
func (self methodsEditorSelection) GetTransformableSelectedNodes() ArrayOf[Node] {
	return self.Runtime.EditorSelection_get_transformable_selected_nodes(EditorSelection{self})
}

type methodsEditorSettings struct {
	_ [0]*methodsEditorSettings
	class
}

func (self EditorSettings) Resource() Resource {
	var parent Resource
	parent.class = self.class
	return parent
}
func (self methodsEditorSettings) HasSetting(name string) bool {
	return self.Runtime.EditorSettings_has_setting(EditorSettings{self}, name)
}
func (self methodsEditorSettings) SetSetting(name string, value any) {
	self.Runtime.EditorSettings_set_setting(EditorSettings{self}, name, value)
}
func (self methodsEditorSettings) GetSetting(name string) any {
	return self.Runtime.EditorSettings_get_setting(EditorSettings{self}, name)
}
func (self methodsEditorSettings) Erase(property string) {
	self.Runtime.EditorSettings_erase(EditorSettings{self}, property)
}
func (self methodsEditorSettings) SetInitialValue(name string, value any, update_current bool) {
	self.Runtime.EditorSettings_set_initial_value(EditorSettings{self}, name, value, update_current)
}
func (self methodsEditorSettings) AddPropertyInfo(info Dictionary) {
	self.Runtime.EditorSettings_add_property_info(EditorSettings{self}, info)
}
func (self methodsEditorSettings) SetProjectMetadata(section string, key string, data any) {
	self.Runtime.EditorSettings_set_project_metadata(EditorSettings{self}, section, key, data)
}
func (self methodsEditorSettings) GetProjectMetadata(section string, key string, def any) any {
	return self.Runtime.EditorSettings_get_project_metadata(EditorSettings{self}, section, key, def)
}
func (self methodsEditorSettings) SetFavorites(dirs PackedStringArray) {
	self.Runtime.EditorSettings_set_favorites(EditorSettings{self}, dirs)
}
func (self methodsEditorSettings) GetFavorites() PackedStringArray {
	return self.Runtime.EditorSettings_get_favorites(EditorSettings{self})
}
func (self methodsEditorSettings) SetRecentDirs(dirs PackedStringArray) {
	self.Runtime.EditorSettings_set_recent_dirs(EditorSettings{self}, dirs)
}
func (self methodsEditorSettings) GetRecentDirs() PackedStringArray {
	return self.Runtime.EditorSettings_get_recent_dirs(EditorSettings{self})
}
func (self methodsEditorSettings) SetBuiltinActionOverride(name string, actions_list ArrayOf[InputEvent]) {
	self.Runtime.EditorSettings_set_builtin_action_override(EditorSettings{self}, name, actions_list)
}
func (self methodsEditorSettings) CheckChangedSettingsInGroup(setting_prefix string) bool {
	return self.Runtime.EditorSettings_check_changed_settings_in_group(EditorSettings{self}, setting_prefix)
}
func (self methodsEditorSettings) GetChangedSettings() PackedStringArray {
	return self.Runtime.EditorSettings_get_changed_settings(EditorSettings{self})
}
func (self methodsEditorSettings) MarkSettingChanged(setting string) {
	self.Runtime.EditorSettings_mark_setting_changed(EditorSettings{self}, setting)
}

type methodsEditorSpinSlider struct {
	_ [0]*methodsEditorSpinSlider
	class
}

func (self EditorSpinSlider) Range() Range {
	var parent Range
	parent.class = self.class
	return parent
}
func (self methodsEditorSpinSlider) SetLabel(label string) {
	self.Runtime.EditorSpinSlider_set_label(EditorSpinSlider{self}, label)
}
func (self methodsEditorSpinSlider) GetLabel() string {
	return self.Runtime.EditorSpinSlider_get_label(EditorSpinSlider{self})
}
func (self methodsEditorSpinSlider) SetSuffix(suffix string) {
	self.Runtime.EditorSpinSlider_set_suffix(EditorSpinSlider{self}, suffix)
}
func (self methodsEditorSpinSlider) GetSuffix() string {
	return self.Runtime.EditorSpinSlider_get_suffix(EditorSpinSlider{self})
}
func (self methodsEditorSpinSlider) SetReadOnly(read_only bool) {
	self.Runtime.EditorSpinSlider_set_read_only(EditorSpinSlider{self}, read_only)
}
func (self methodsEditorSpinSlider) IsReadOnly() bool {
	return self.Runtime.EditorSpinSlider_is_read_only(EditorSpinSlider{self})
}
func (self methodsEditorSpinSlider) SetFlat(flat bool) {
	self.Runtime.EditorSpinSlider_set_flat(EditorSpinSlider{self}, flat)
}
func (self methodsEditorSpinSlider) IsFlat() bool {
	return self.Runtime.EditorSpinSlider_is_flat(EditorSpinSlider{self})
}
func (self methodsEditorSpinSlider) SetHideSlider(hide_slider bool) {
	self.Runtime.EditorSpinSlider_set_hide_slider(EditorSpinSlider{self}, hide_slider)
}
func (self methodsEditorSpinSlider) IsHidingSlider() bool {
	return self.Runtime.EditorSpinSlider_is_hiding_slider(EditorSpinSlider{self})
}

type methodsEditorSyntaxHighlighter struct {
	_ [0]*methodsEditorSyntaxHighlighter
	class
}

func (self EditorSyntaxHighlighter) SyntaxHighlighter() SyntaxHighlighter {
	var parent SyntaxHighlighter
	parent.class = self.class
	return parent
}

type methodsEditorTranslationParserPlugin struct {
	_ [0]*methodsEditorTranslationParserPlugin
	class
}

func (self EditorTranslationParserPlugin) RefCounted() RefCounted {
	var parent RefCounted
	parent.class = self.class
	return parent
}

type methodsEditorUndoRedoManager struct {
	_ [0]*methodsEditorUndoRedoManager
	class
}

func (self EditorUndoRedoManager) Object() Object {
	var parent Object
	parent.class = self.class
	return parent
}
func (self methodsEditorUndoRedoManager) CreateAction(name string, merge_mode UndoRedoMergeMode, custom_context Object, backward_undo_ops bool) {
	self.Runtime.EditorUndoRedoManager_create_action(EditorUndoRedoManager{self}, name, merge_mode, custom_context, backward_undo_ops)
}
func (self methodsEditorUndoRedoManager) CommitAction(execute bool) {
	self.Runtime.EditorUndoRedoManager_commit_action(EditorUndoRedoManager{self}, execute)
}
func (self methodsEditorUndoRedoManager) IsCommittingAction() bool {
	return self.Runtime.EditorUndoRedoManager_is_committing_action(EditorUndoRedoManager{self})
}
func (self methodsEditorUndoRedoManager) AddDoMethod(object Object, method string) {
	self.Runtime.EditorUndoRedoManager_add_do_method(EditorUndoRedoManager{self}, object, method)
}
func (self methodsEditorUndoRedoManager) AddUndoMethod(object Object, method string) {
	self.Runtime.EditorUndoRedoManager_add_undo_method(EditorUndoRedoManager{self}, object, method)
}
func (self methodsEditorUndoRedoManager) AddDoProperty(object Object, property string, value any) {
	self.Runtime.EditorUndoRedoManager_add_do_property(EditorUndoRedoManager{self}, object, property, value)
}
func (self methodsEditorUndoRedoManager) AddUndoProperty(object Object, property string, value any) {
	self.Runtime.EditorUndoRedoManager_add_undo_property(EditorUndoRedoManager{self}, object, property, value)
}
func (self methodsEditorUndoRedoManager) AddDoReference(object Object) {
	self.Runtime.EditorUndoRedoManager_add_do_reference(EditorUndoRedoManager{self}, object)
}
func (self methodsEditorUndoRedoManager) AddUndoReference(object Object) {
	self.Runtime.EditorUndoRedoManager_add_undo_reference(EditorUndoRedoManager{self}, object)
}
func (self methodsEditorUndoRedoManager) GetObjectHistoryId(object Object) int64 {
	return self.Runtime.EditorUndoRedoManager_get_object_history_id(EditorUndoRedoManager{self}, object)
}
func (self methodsEditorUndoRedoManager) GetHistoryUndoRedo(id int64) UndoRedo {
	return self.Runtime.EditorUndoRedoManager_get_history_undo_redo(EditorUndoRedoManager{self}, id)
}

type methodsEditorVCSInterface struct {
	_ [0]*methodsEditorVCSInterface
	class
}

func (self EditorVCSInterface) Object() Object {
	var parent Object
	parent.class = self.class
	return parent
}
func (self methodsEditorVCSInterface) CreateDiffLine(new_line_no int64, old_line_no int64, content string, status string) Dictionary {
	return self.Runtime.EditorVCSInterface_create_diff_line(EditorVCSInterface{self}, new_line_no, old_line_no, content, status)
}
func (self methodsEditorVCSInterface) CreateDiffHunk(old_start int64, new_start int64, old_lines int64, new_lines int64) Dictionary {
	return self.Runtime.EditorVCSInterface_create_diff_hunk(EditorVCSInterface{self}, old_start, new_start, old_lines, new_lines)
}
func (self methodsEditorVCSInterface) CreateDiffFile(new_file string, old_file string) Dictionary {
	return self.Runtime.EditorVCSInterface_create_diff_file(EditorVCSInterface{self}, new_file, old_file)
}
func (self methodsEditorVCSInterface) CreateCommit(msg string, author string, id string, unix_timestamp int64, offset_minutes int64) Dictionary {
	return self.Runtime.EditorVCSInterface_create_commit(EditorVCSInterface{self}, msg, author, id, unix_timestamp, offset_minutes)
}
func (self methodsEditorVCSInterface) CreateStatusFile(file_path string, change_type EditorVCSInterfaceChangeType, area EditorVCSInterfaceTreeArea) Dictionary {
	return self.Runtime.EditorVCSInterface_create_status_file(EditorVCSInterface{self}, file_path, change_type, area)
}
func (self methodsEditorVCSInterface) AddDiffHunksIntoDiffFile(diff_file Dictionary, diff_hunks ArrayOf[Dictionary]) Dictionary {
	return self.Runtime.EditorVCSInterface_add_diff_hunks_into_diff_file(EditorVCSInterface{self}, diff_file, diff_hunks)
}
func (self methodsEditorVCSInterface) AddLineDiffsIntoDiffHunk(diff_hunk Dictionary, line_diffs ArrayOf[Dictionary]) Dictionary {
	return self.Runtime.EditorVCSInterface_add_line_diffs_into_diff_hunk(EditorVCSInterface{self}, diff_hunk, line_diffs)
}
func (self methodsEditorVCSInterface) PopupError(msg string) {
	self.Runtime.EditorVCSInterface_popup_error(EditorVCSInterface{self}, msg)
}

type methodsEncodedObjectAsID struct {
	_ [0]*methodsEncodedObjectAsID
	class
}

func (self EncodedObjectAsID) RefCounted() RefCounted {
	var parent RefCounted
	parent.class = self.class
	return parent
}
func (self methodsEncodedObjectAsID) SetObjectId(id int64) {
	self.Runtime.EncodedObjectAsID_set_object_id(EncodedObjectAsID{self}, id)
}
func (self methodsEncodedObjectAsID) GetObjectId() int64 {
	return self.Runtime.EncodedObjectAsID_get_object_id(EncodedObjectAsID{self})
}

type methodsEngine struct {
	_ [0]*methodsEngine
	class
}

func (self Engine) Object() Object { var parent Object; parent.class = self.class; return parent }
func (self methodsEngine) SetPhysicsTicksPerSecond(physics_ticks_per_second int64) {
	self.Runtime.Engine_set_physics_ticks_per_second(Engine{self}, physics_ticks_per_second)
}
func (self methodsEngine) GetPhysicsTicksPerSecond() int64 {
	return self.Runtime.Engine_get_physics_ticks_per_second(Engine{self})
}
func (self methodsEngine) SetMaxPhysicsStepsPerFrame(max_physics_steps int64) {
	self.Runtime.Engine_set_max_physics_steps_per_frame(Engine{self}, max_physics_steps)
}
func (self methodsEngine) GetMaxPhysicsStepsPerFrame() int64 {
	return self.Runtime.Engine_get_max_physics_steps_per_frame(Engine{self})
}
func (self methodsEngine) SetPhysicsJitterFix(physics_jitter_fix Float) {
	self.Runtime.Engine_set_physics_jitter_fix(Engine{self}, physics_jitter_fix)
}
func (self methodsEngine) GetPhysicsJitterFix() Float {
	return self.Runtime.Engine_get_physics_jitter_fix(Engine{self})
}
func (self methodsEngine) GetPhysicsInterpolationFraction() Float {
	return self.Runtime.Engine_get_physics_interpolation_fraction(Engine{self})
}
func (self methodsEngine) SetMaxFps(max_fps int64) {
	self.Runtime.Engine_set_max_fps(Engine{self}, max_fps)
}
func (self methodsEngine) GetMaxFps() int64 {
	return self.Runtime.Engine_get_max_fps(Engine{self})
}
func (self methodsEngine) SetTimeScale(time_scale Float) {
	self.Runtime.Engine_set_time_scale(Engine{self}, time_scale)
}
func (self methodsEngine) GetTimeScale() Float {
	return self.Runtime.Engine_get_time_scale(Engine{self})
}
func (self methodsEngine) GetFramesDrawn() int64 {
	return self.Runtime.Engine_get_frames_drawn(Engine{self})
}
func (self methodsEngine) GetFramesPerSecond() Float {
	return self.Runtime.Engine_get_frames_per_second(Engine{self})
}
func (self methodsEngine) GetPhysicsFrames() int64 {
	return self.Runtime.Engine_get_physics_frames(Engine{self})
}
func (self methodsEngine) GetProcessFrames() int64 {
	return self.Runtime.Engine_get_process_frames(Engine{self})
}
func (self methodsEngine) GetMainLoop() MainLoop {
	return self.Runtime.Engine_get_main_loop(Engine{self})
}
func (self methodsEngine) GetVersionInfo() Dictionary {
	return self.Runtime.Engine_get_version_info(Engine{self})
}
func (self methodsEngine) GetAuthorInfo() Dictionary {
	return self.Runtime.Engine_get_author_info(Engine{self})
}
func (self methodsEngine) GetCopyrightInfo() ArrayOf[Dictionary] {
	return self.Runtime.Engine_get_copyright_info(Engine{self})
}
func (self methodsEngine) GetDonorInfo() Dictionary {
	return self.Runtime.Engine_get_donor_info(Engine{self})
}
func (self methodsEngine) GetLicenseInfo() Dictionary {
	return self.Runtime.Engine_get_license_info(Engine{self})
}
func (self methodsEngine) GetLicenseText() string {
	return self.Runtime.Engine_get_license_text(Engine{self})
}
func (self methodsEngine) GetArchitectureName() string {
	return self.Runtime.Engine_get_architecture_name(Engine{self})
}
func (self methodsEngine) IsInPhysicsFrame() bool {
	return self.Runtime.Engine_is_in_physics_frame(Engine{self})
}
func (self methodsEngine) HasSingleton(name string) bool {
	return self.Runtime.Engine_has_singleton(Engine{self}, name)
}
func (self methodsEngine) GetSingleton(name string) Object {
	return self.Runtime.Engine_get_singleton(Engine{self}, name)
}
func (self methodsEngine) RegisterSingleton(name string, instance Object) {
	self.Runtime.Engine_register_singleton(Engine{self}, name, instance)
}
func (self methodsEngine) UnregisterSingleton(name string) {
	self.Runtime.Engine_unregister_singleton(Engine{self}, name)
}
func (self methodsEngine) GetSingletonList() PackedStringArray {
	return self.Runtime.Engine_get_singleton_list(Engine{self})
}
func (self methodsEngine) RegisterScriptLanguage(language ScriptLanguage) int64 {
	return self.Runtime.Engine_register_script_language(Engine{self}, language)
}
func (self methodsEngine) UnregisterScriptLanguage(language ScriptLanguage) int64 {
	return self.Runtime.Engine_unregister_script_language(Engine{self}, language)
}
func (self methodsEngine) GetScriptLanguageCount() int64 {
	return self.Runtime.Engine_get_script_language_count(Engine{self})
}
func (self methodsEngine) GetScriptLanguage(index int64) ScriptLanguage {
	return self.Runtime.Engine_get_script_language(Engine{self}, index)
}
func (self methodsEngine) IsEditorHint() bool {
	return self.Runtime.Engine_is_editor_hint(Engine{self})
}
func (self methodsEngine) GetWriteMoviePath() string {
	return self.Runtime.Engine_get_write_movie_path(Engine{self})
}
func (self methodsEngine) SetPrintErrorMessages(enabled bool) {
	self.Runtime.Engine_set_print_error_messages(Engine{self}, enabled)
}
func (self methodsEngine) IsPrintingErrorMessages() bool {
	return self.Runtime.Engine_is_printing_error_messages(Engine{self})
}

type methodsEngineDebugger struct {
	_ [0]*methodsEngineDebugger
	class
}

func (self EngineDebugger) Object() Object {
	var parent Object
	parent.class = self.class
	return parent
}
func (self methodsEngineDebugger) IsActive() bool {
	return self.Runtime.EngineDebugger_is_active(EngineDebugger{self})
}
func (self methodsEngineDebugger) RegisterProfiler(name string, profiler EngineProfiler) {
	self.Runtime.EngineDebugger_register_profiler(EngineDebugger{self}, name, profiler)
}
func (self methodsEngineDebugger) UnregisterProfiler(name string) {
	self.Runtime.EngineDebugger_unregister_profiler(EngineDebugger{self}, name)
}
func (self methodsEngineDebugger) IsProfiling(name string) bool {
	return self.Runtime.EngineDebugger_is_profiling(EngineDebugger{self}, name)
}
func (self methodsEngineDebugger) HasProfiler(name string) bool {
	return self.Runtime.EngineDebugger_has_profiler(EngineDebugger{self}, name)
}
func (self methodsEngineDebugger) ProfilerAddFrameData(name string, data Array) {
	self.Runtime.EngineDebugger_profiler_add_frame_data(EngineDebugger{self}, name, data)
}
func (self methodsEngineDebugger) ProfilerEnable(name string, enable bool, arguments Array) {
	self.Runtime.EngineDebugger_profiler_enable(EngineDebugger{self}, name, enable, arguments)
}
func (self methodsEngineDebugger) RegisterMessageCapture(name string, callable Callable) {
	self.Runtime.EngineDebugger_register_message_capture(EngineDebugger{self}, name, callable)
}
func (self methodsEngineDebugger) UnregisterMessageCapture(name string) {
	self.Runtime.EngineDebugger_unregister_message_capture(EngineDebugger{self}, name)
}
func (self methodsEngineDebugger) HasCapture(name string) bool {
	return self.Runtime.EngineDebugger_has_capture(EngineDebugger{self}, name)
}
func (self methodsEngineDebugger) SendMessage(message string, data Array) {
	self.Runtime.EngineDebugger_send_message(EngineDebugger{self}, message, data)
}

type methodsEngineProfiler struct {
	_ [0]*methodsEngineProfiler
	class
}

func (self EngineProfiler) RefCounted() RefCounted {
	var parent RefCounted
	parent.class = self.class
	return parent
}

type methodsEnvironment struct {
	_ [0]*methodsEnvironment
	class
}

func (self Environment) Resource() Resource {
	var parent Resource
	parent.class = self.class
	return parent
}
func (self methodsEnvironment) SetBackground(mode EnvironmentBGMode) {
	self.Runtime.Environment_set_background(Environment{self}, mode)
}
func (self methodsEnvironment) GetBackground() EnvironmentBGMode {
	return self.Runtime.Environment_get_background(Environment{self})
}
func (self methodsEnvironment) SetSky(sky Sky) {
	self.Runtime.Environment_set_sky(Environment{self}, sky)
}
func (self methodsEnvironment) GetSky() Sky {
	return self.Runtime.Environment_get_sky(Environment{self})
}
func (self methodsEnvironment) SetSkyCustomFov(scale Float) {
	self.Runtime.Environment_set_sky_custom_fov(Environment{self}, scale)
}
func (self methodsEnvironment) GetSkyCustomFov() Float {
	return self.Runtime.Environment_get_sky_custom_fov(Environment{self})
}
func (self methodsEnvironment) SetSkyRotation(euler_radians Vector3) {
	self.Runtime.Environment_set_sky_rotation(Environment{self}, euler_radians)
}
func (self methodsEnvironment) GetSkyRotation() Vector3 {
	return self.Runtime.Environment_get_sky_rotation(Environment{self})
}
func (self methodsEnvironment) SetBgColor(color Color) {
	self.Runtime.Environment_set_bg_color(Environment{self}, color)
}
func (self methodsEnvironment) GetBgColor() Color {
	return self.Runtime.Environment_get_bg_color(Environment{self})
}
func (self methodsEnvironment) SetBgEnergyMultiplier(energy Float) {
	self.Runtime.Environment_set_bg_energy_multiplier(Environment{self}, energy)
}
func (self methodsEnvironment) GetBgEnergyMultiplier() Float {
	return self.Runtime.Environment_get_bg_energy_multiplier(Environment{self})
}
func (self methodsEnvironment) SetBgIntensity(energy Float) {
	self.Runtime.Environment_set_bg_intensity(Environment{self}, energy)
}
func (self methodsEnvironment) GetBgIntensity() Float {
	return self.Runtime.Environment_get_bg_intensity(Environment{self})
}
func (self methodsEnvironment) SetCanvasMaxLayer(layer int64) {
	self.Runtime.Environment_set_canvas_max_layer(Environment{self}, layer)
}
func (self methodsEnvironment) GetCanvasMaxLayer() int64 {
	return self.Runtime.Environment_get_canvas_max_layer(Environment{self})
}
func (self methodsEnvironment) SetCameraFeedId(id int64) {
	self.Runtime.Environment_set_camera_feed_id(Environment{self}, id)
}
func (self methodsEnvironment) GetCameraFeedId() int64 {
	return self.Runtime.Environment_get_camera_feed_id(Environment{self})
}
func (self methodsEnvironment) SetAmbientLightColor(color Color) {
	self.Runtime.Environment_set_ambient_light_color(Environment{self}, color)
}
func (self methodsEnvironment) GetAmbientLightColor() Color {
	return self.Runtime.Environment_get_ambient_light_color(Environment{self})
}
func (self methodsEnvironment) SetAmbientSource(source EnvironmentAmbientSource) {
	self.Runtime.Environment_set_ambient_source(Environment{self}, source)
}
func (self methodsEnvironment) GetAmbientSource() EnvironmentAmbientSource {
	return self.Runtime.Environment_get_ambient_source(Environment{self})
}
func (self methodsEnvironment) SetAmbientLightEnergy(energy Float) {
	self.Runtime.Environment_set_ambient_light_energy(Environment{self}, energy)
}
func (self methodsEnvironment) GetAmbientLightEnergy() Float {
	return self.Runtime.Environment_get_ambient_light_energy(Environment{self})
}
func (self methodsEnvironment) SetAmbientLightSkyContribution(ratio Float) {
	self.Runtime.Environment_set_ambient_light_sky_contribution(Environment{self}, ratio)
}
func (self methodsEnvironment) GetAmbientLightSkyContribution() Float {
	return self.Runtime.Environment_get_ambient_light_sky_contribution(Environment{self})
}
func (self methodsEnvironment) SetReflectionSource(source EnvironmentReflectionSource) {
	self.Runtime.Environment_set_reflection_source(Environment{self}, source)
}
func (self methodsEnvironment) GetReflectionSource() EnvironmentReflectionSource {
	return self.Runtime.Environment_get_reflection_source(Environment{self})
}
func (self methodsEnvironment) SetTonemapper(mode EnvironmentToneMapper) {
	self.Runtime.Environment_set_tonemapper(Environment{self}, mode)
}
func (self methodsEnvironment) GetTonemapper() EnvironmentToneMapper {
	return self.Runtime.Environment_get_tonemapper(Environment{self})
}
func (self methodsEnvironment) SetTonemapExposure(exposure Float) {
	self.Runtime.Environment_set_tonemap_exposure(Environment{self}, exposure)
}
func (self methodsEnvironment) GetTonemapExposure() Float {
	return self.Runtime.Environment_get_tonemap_exposure(Environment{self})
}
func (self methodsEnvironment) SetTonemapWhite(white Float) {
	self.Runtime.Environment_set_tonemap_white(Environment{self}, white)
}
func (self methodsEnvironment) GetTonemapWhite() Float {
	return self.Runtime.Environment_get_tonemap_white(Environment{self})
}
func (self methodsEnvironment) SetSsrEnabled(enabled bool) {
	self.Runtime.Environment_set_ssr_enabled(Environment{self}, enabled)
}
func (self methodsEnvironment) IsSsrEnabled() bool {
	return self.Runtime.Environment_is_ssr_enabled(Environment{self})
}
func (self methodsEnvironment) SetSsrMaxSteps(max_steps int64) {
	self.Runtime.Environment_set_ssr_max_steps(Environment{self}, max_steps)
}
func (self methodsEnvironment) GetSsrMaxSteps() int64 {
	return self.Runtime.Environment_get_ssr_max_steps(Environment{self})
}
func (self methodsEnvironment) SetSsrFadeIn(fade_in Float) {
	self.Runtime.Environment_set_ssr_fade_in(Environment{self}, fade_in)
}
func (self methodsEnvironment) GetSsrFadeIn() Float {
	return self.Runtime.Environment_get_ssr_fade_in(Environment{self})
}
func (self methodsEnvironment) SetSsrFadeOut(fade_out Float) {
	self.Runtime.Environment_set_ssr_fade_out(Environment{self}, fade_out)
}
func (self methodsEnvironment) GetSsrFadeOut() Float {
	return self.Runtime.Environment_get_ssr_fade_out(Environment{self})
}
func (self methodsEnvironment) SetSsrDepthTolerance(depth_tolerance Float) {
	self.Runtime.Environment_set_ssr_depth_tolerance(Environment{self}, depth_tolerance)
}
func (self methodsEnvironment) GetSsrDepthTolerance() Float {
	return self.Runtime.Environment_get_ssr_depth_tolerance(Environment{self})
}
func (self methodsEnvironment) SetSsaoEnabled(enabled bool) {
	self.Runtime.Environment_set_ssao_enabled(Environment{self}, enabled)
}
func (self methodsEnvironment) IsSsaoEnabled() bool {
	return self.Runtime.Environment_is_ssao_enabled(Environment{self})
}
func (self methodsEnvironment) SetSsaoRadius(radius Float) {
	self.Runtime.Environment_set_ssao_radius(Environment{self}, radius)
}
func (self methodsEnvironment) GetSsaoRadius() Float {
	return self.Runtime.Environment_get_ssao_radius(Environment{self})
}
func (self methodsEnvironment) SetSsaoIntensity(intensity Float) {
	self.Runtime.Environment_set_ssao_intensity(Environment{self}, intensity)
}
func (self methodsEnvironment) GetSsaoIntensity() Float {
	return self.Runtime.Environment_get_ssao_intensity(Environment{self})
}
func (self methodsEnvironment) SetSsaoPower(power Float) {
	self.Runtime.Environment_set_ssao_power(Environment{self}, power)
}
func (self methodsEnvironment) GetSsaoPower() Float {
	return self.Runtime.Environment_get_ssao_power(Environment{self})
}
func (self methodsEnvironment) SetSsaoDetail(detail Float) {
	self.Runtime.Environment_set_ssao_detail(Environment{self}, detail)
}
func (self methodsEnvironment) GetSsaoDetail() Float {
	return self.Runtime.Environment_get_ssao_detail(Environment{self})
}
func (self methodsEnvironment) SetSsaoHorizon(horizon Float) {
	self.Runtime.Environment_set_ssao_horizon(Environment{self}, horizon)
}
func (self methodsEnvironment) GetSsaoHorizon() Float {
	return self.Runtime.Environment_get_ssao_horizon(Environment{self})
}
func (self methodsEnvironment) SetSsaoSharpness(sharpness Float) {
	self.Runtime.Environment_set_ssao_sharpness(Environment{self}, sharpness)
}
func (self methodsEnvironment) GetSsaoSharpness() Float {
	return self.Runtime.Environment_get_ssao_sharpness(Environment{self})
}
func (self methodsEnvironment) SetSsaoDirectLightAffect(amount Float) {
	self.Runtime.Environment_set_ssao_direct_light_affect(Environment{self}, amount)
}
func (self methodsEnvironment) GetSsaoDirectLightAffect() Float {
	return self.Runtime.Environment_get_ssao_direct_light_affect(Environment{self})
}
func (self methodsEnvironment) SetSsaoAoChannelAffect(amount Float) {
	self.Runtime.Environment_set_ssao_ao_channel_affect(Environment{self}, amount)
}
func (self methodsEnvironment) GetSsaoAoChannelAffect() Float {
	return self.Runtime.Environment_get_ssao_ao_channel_affect(Environment{self})
}
func (self methodsEnvironment) SetSsilEnabled(enabled bool) {
	self.Runtime.Environment_set_ssil_enabled(Environment{self}, enabled)
}
func (self methodsEnvironment) IsSsilEnabled() bool {
	return self.Runtime.Environment_is_ssil_enabled(Environment{self})
}
func (self methodsEnvironment) SetSsilRadius(radius Float) {
	self.Runtime.Environment_set_ssil_radius(Environment{self}, radius)
}
func (self methodsEnvironment) GetSsilRadius() Float {
	return self.Runtime.Environment_get_ssil_radius(Environment{self})
}
func (self methodsEnvironment) SetSsilIntensity(intensity Float) {
	self.Runtime.Environment_set_ssil_intensity(Environment{self}, intensity)
}
func (self methodsEnvironment) GetSsilIntensity() Float {
	return self.Runtime.Environment_get_ssil_intensity(Environment{self})
}
func (self methodsEnvironment) SetSsilSharpness(sharpness Float) {
	self.Runtime.Environment_set_ssil_sharpness(Environment{self}, sharpness)
}
func (self methodsEnvironment) GetSsilSharpness() Float {
	return self.Runtime.Environment_get_ssil_sharpness(Environment{self})
}
func (self methodsEnvironment) SetSsilNormalRejection(normal_rejection Float) {
	self.Runtime.Environment_set_ssil_normal_rejection(Environment{self}, normal_rejection)
}
func (self methodsEnvironment) GetSsilNormalRejection() Float {
	return self.Runtime.Environment_get_ssil_normal_rejection(Environment{self})
}
func (self methodsEnvironment) SetSdfgiEnabled(enabled bool) {
	self.Runtime.Environment_set_sdfgi_enabled(Environment{self}, enabled)
}
func (self methodsEnvironment) IsSdfgiEnabled() bool {
	return self.Runtime.Environment_is_sdfgi_enabled(Environment{self})
}
func (self methodsEnvironment) SetSdfgiCascades(amount int64) {
	self.Runtime.Environment_set_sdfgi_cascades(Environment{self}, amount)
}
func (self methodsEnvironment) GetSdfgiCascades() int64 {
	return self.Runtime.Environment_get_sdfgi_cascades(Environment{self})
}
func (self methodsEnvironment) SetSdfgiMinCellSize(size Float) {
	self.Runtime.Environment_set_sdfgi_min_cell_size(Environment{self}, size)
}
func (self methodsEnvironment) GetSdfgiMinCellSize() Float {
	return self.Runtime.Environment_get_sdfgi_min_cell_size(Environment{self})
}
func (self methodsEnvironment) SetSdfgiMaxDistance(distance Float) {
	self.Runtime.Environment_set_sdfgi_max_distance(Environment{self}, distance)
}
func (self methodsEnvironment) GetSdfgiMaxDistance() Float {
	return self.Runtime.Environment_get_sdfgi_max_distance(Environment{self})
}
func (self methodsEnvironment) SetSdfgiCascade0Distance(distance Float) {
	self.Runtime.Environment_set_sdfgi_cascade0_distance(Environment{self}, distance)
}
func (self methodsEnvironment) GetSdfgiCascade0Distance() Float {
	return self.Runtime.Environment_get_sdfgi_cascade0_distance(Environment{self})
}
func (self methodsEnvironment) SetSdfgiYScale(scale EnvironmentSDFGIYScale) {
	self.Runtime.Environment_set_sdfgi_y_scale(Environment{self}, scale)
}
func (self methodsEnvironment) GetSdfgiYScale() EnvironmentSDFGIYScale {
	return self.Runtime.Environment_get_sdfgi_y_scale(Environment{self})
}
func (self methodsEnvironment) SetSdfgiUseOcclusion(enable bool) {
	self.Runtime.Environment_set_sdfgi_use_occlusion(Environment{self}, enable)
}
func (self methodsEnvironment) IsSdfgiUsingOcclusion() bool {
	return self.Runtime.Environment_is_sdfgi_using_occlusion(Environment{self})
}
func (self methodsEnvironment) SetSdfgiBounceFeedback(amount Float) {
	self.Runtime.Environment_set_sdfgi_bounce_feedback(Environment{self}, amount)
}
func (self methodsEnvironment) GetSdfgiBounceFeedback() Float {
	return self.Runtime.Environment_get_sdfgi_bounce_feedback(Environment{self})
}
func (self methodsEnvironment) SetSdfgiReadSkyLight(enable bool) {
	self.Runtime.Environment_set_sdfgi_read_sky_light(Environment{self}, enable)
}
func (self methodsEnvironment) IsSdfgiReadingSkyLight() bool {
	return self.Runtime.Environment_is_sdfgi_reading_sky_light(Environment{self})
}
func (self methodsEnvironment) SetSdfgiEnergy(amount Float) {
	self.Runtime.Environment_set_sdfgi_energy(Environment{self}, amount)
}
func (self methodsEnvironment) GetSdfgiEnergy() Float {
	return self.Runtime.Environment_get_sdfgi_energy(Environment{self})
}
func (self methodsEnvironment) SetSdfgiNormalBias(bias Float) {
	self.Runtime.Environment_set_sdfgi_normal_bias(Environment{self}, bias)
}
func (self methodsEnvironment) GetSdfgiNormalBias() Float {
	return self.Runtime.Environment_get_sdfgi_normal_bias(Environment{self})
}
func (self methodsEnvironment) SetSdfgiProbeBias(bias Float) {
	self.Runtime.Environment_set_sdfgi_probe_bias(Environment{self}, bias)
}
func (self methodsEnvironment) GetSdfgiProbeBias() Float {
	return self.Runtime.Environment_get_sdfgi_probe_bias(Environment{self})
}
func (self methodsEnvironment) SetGlowEnabled(enabled bool) {
	self.Runtime.Environment_set_glow_enabled(Environment{self}, enabled)
}
func (self methodsEnvironment) IsGlowEnabled() bool {
	return self.Runtime.Environment_is_glow_enabled(Environment{self})
}
func (self methodsEnvironment) SetGlowLevel(idx int64, intensity Float) {
	self.Runtime.Environment_set_glow_level(Environment{self}, idx, intensity)
}
func (self methodsEnvironment) GetGlowLevel(idx int64) Float {
	return self.Runtime.Environment_get_glow_level(Environment{self}, idx)
}
func (self methodsEnvironment) SetGlowNormalized(normalize bool) {
	self.Runtime.Environment_set_glow_normalized(Environment{self}, normalize)
}
func (self methodsEnvironment) IsGlowNormalized() bool {
	return self.Runtime.Environment_is_glow_normalized(Environment{self})
}
func (self methodsEnvironment) SetGlowIntensity(intensity Float) {
	self.Runtime.Environment_set_glow_intensity(Environment{self}, intensity)
}
func (self methodsEnvironment) GetGlowIntensity() Float {
	return self.Runtime.Environment_get_glow_intensity(Environment{self})
}
func (self methodsEnvironment) SetGlowStrength(strength Float) {
	self.Runtime.Environment_set_glow_strength(Environment{self}, strength)
}
func (self methodsEnvironment) GetGlowStrength() Float {
	return self.Runtime.Environment_get_glow_strength(Environment{self})
}
func (self methodsEnvironment) SetGlowMix(mix Float) {
	self.Runtime.Environment_set_glow_mix(Environment{self}, mix)
}
func (self methodsEnvironment) GetGlowMix() Float {
	return self.Runtime.Environment_get_glow_mix(Environment{self})
}
func (self methodsEnvironment) SetGlowBloom(amount Float) {
	self.Runtime.Environment_set_glow_bloom(Environment{self}, amount)
}
func (self methodsEnvironment) GetGlowBloom() Float {
	return self.Runtime.Environment_get_glow_bloom(Environment{self})
}
func (self methodsEnvironment) SetGlowBlendMode(mode EnvironmentGlowBlendMode) {
	self.Runtime.Environment_set_glow_blend_mode(Environment{self}, mode)
}
func (self methodsEnvironment) GetGlowBlendMode() EnvironmentGlowBlendMode {
	return self.Runtime.Environment_get_glow_blend_mode(Environment{self})
}
func (self methodsEnvironment) SetGlowHdrBleedThreshold(threshold Float) {
	self.Runtime.Environment_set_glow_hdr_bleed_threshold(Environment{self}, threshold)
}
func (self methodsEnvironment) GetGlowHdrBleedThreshold() Float {
	return self.Runtime.Environment_get_glow_hdr_bleed_threshold(Environment{self})
}
func (self methodsEnvironment) SetGlowHdrBleedScale(scale Float) {
	self.Runtime.Environment_set_glow_hdr_bleed_scale(Environment{self}, scale)
}
func (self methodsEnvironment) GetGlowHdrBleedScale() Float {
	return self.Runtime.Environment_get_glow_hdr_bleed_scale(Environment{self})
}
func (self methodsEnvironment) SetGlowHdrLuminanceCap(amount Float) {
	self.Runtime.Environment_set_glow_hdr_luminance_cap(Environment{self}, amount)
}
func (self methodsEnvironment) GetGlowHdrLuminanceCap() Float {
	return self.Runtime.Environment_get_glow_hdr_luminance_cap(Environment{self})
}
func (self methodsEnvironment) SetGlowMapStrength(strength Float) {
	self.Runtime.Environment_set_glow_map_strength(Environment{self}, strength)
}
func (self methodsEnvironment) GetGlowMapStrength() Float {
	return self.Runtime.Environment_get_glow_map_strength(Environment{self})
}
func (self methodsEnvironment) SetGlowMap(mode Texture) {
	self.Runtime.Environment_set_glow_map(Environment{self}, mode)
}
func (self methodsEnvironment) GetGlowMap() Texture {
	return self.Runtime.Environment_get_glow_map(Environment{self})
}
func (self methodsEnvironment) SetFogEnabled(enabled bool) {
	self.Runtime.Environment_set_fog_enabled(Environment{self}, enabled)
}
func (self methodsEnvironment) IsFogEnabled() bool {
	return self.Runtime.Environment_is_fog_enabled(Environment{self})
}
func (self methodsEnvironment) SetFogLightColor(light_color Color) {
	self.Runtime.Environment_set_fog_light_color(Environment{self}, light_color)
}
func (self methodsEnvironment) GetFogLightColor() Color {
	return self.Runtime.Environment_get_fog_light_color(Environment{self})
}
func (self methodsEnvironment) SetFogLightEnergy(light_energy Float) {
	self.Runtime.Environment_set_fog_light_energy(Environment{self}, light_energy)
}
func (self methodsEnvironment) GetFogLightEnergy() Float {
	return self.Runtime.Environment_get_fog_light_energy(Environment{self})
}
func (self methodsEnvironment) SetFogSunScatter(sun_scatter Float) {
	self.Runtime.Environment_set_fog_sun_scatter(Environment{self}, sun_scatter)
}
func (self methodsEnvironment) GetFogSunScatter() Float {
	return self.Runtime.Environment_get_fog_sun_scatter(Environment{self})
}
func (self methodsEnvironment) SetFogDensity(density Float) {
	self.Runtime.Environment_set_fog_density(Environment{self}, density)
}
func (self methodsEnvironment) GetFogDensity() Float {
	return self.Runtime.Environment_get_fog_density(Environment{self})
}
func (self methodsEnvironment) SetFogHeight(height Float) {
	self.Runtime.Environment_set_fog_height(Environment{self}, height)
}
func (self methodsEnvironment) GetFogHeight() Float {
	return self.Runtime.Environment_get_fog_height(Environment{self})
}
func (self methodsEnvironment) SetFogHeightDensity(height_density Float) {
	self.Runtime.Environment_set_fog_height_density(Environment{self}, height_density)
}
func (self methodsEnvironment) GetFogHeightDensity() Float {
	return self.Runtime.Environment_get_fog_height_density(Environment{self})
}
func (self methodsEnvironment) SetFogAerialPerspective(aerial_perspective Float) {
	self.Runtime.Environment_set_fog_aerial_perspective(Environment{self}, aerial_perspective)
}
func (self methodsEnvironment) GetFogAerialPerspective() Float {
	return self.Runtime.Environment_get_fog_aerial_perspective(Environment{self})
}
func (self methodsEnvironment) SetFogSkyAffect(sky_affect Float) {
	self.Runtime.Environment_set_fog_sky_affect(Environment{self}, sky_affect)
}
func (self methodsEnvironment) GetFogSkyAffect() Float {
	return self.Runtime.Environment_get_fog_sky_affect(Environment{self})
}
func (self methodsEnvironment) SetVolumetricFogEnabled(enabled bool) {
	self.Runtime.Environment_set_volumetric_fog_enabled(Environment{self}, enabled)
}
func (self methodsEnvironment) IsVolumetricFogEnabled() bool {
	return self.Runtime.Environment_is_volumetric_fog_enabled(Environment{self})
}
func (self methodsEnvironment) SetVolumetricFogEmission(color Color) {
	self.Runtime.Environment_set_volumetric_fog_emission(Environment{self}, color)
}
func (self methodsEnvironment) GetVolumetricFogEmission() Color {
	return self.Runtime.Environment_get_volumetric_fog_emission(Environment{self})
}
func (self methodsEnvironment) SetVolumetricFogAlbedo(color Color) {
	self.Runtime.Environment_set_volumetric_fog_albedo(Environment{self}, color)
}
func (self methodsEnvironment) GetVolumetricFogAlbedo() Color {
	return self.Runtime.Environment_get_volumetric_fog_albedo(Environment{self})
}
func (self methodsEnvironment) SetVolumetricFogDensity(density Float) {
	self.Runtime.Environment_set_volumetric_fog_density(Environment{self}, density)
}
func (self methodsEnvironment) GetVolumetricFogDensity() Float {
	return self.Runtime.Environment_get_volumetric_fog_density(Environment{self})
}
func (self methodsEnvironment) SetVolumetricFogEmissionEnergy(begin Float) {
	self.Runtime.Environment_set_volumetric_fog_emission_energy(Environment{self}, begin)
}
func (self methodsEnvironment) GetVolumetricFogEmissionEnergy() Float {
	return self.Runtime.Environment_get_volumetric_fog_emission_energy(Environment{self})
}
func (self methodsEnvironment) SetVolumetricFogAnisotropy(anisotropy Float) {
	self.Runtime.Environment_set_volumetric_fog_anisotropy(Environment{self}, anisotropy)
}
func (self methodsEnvironment) GetVolumetricFogAnisotropy() Float {
	return self.Runtime.Environment_get_volumetric_fog_anisotropy(Environment{self})
}
func (self methodsEnvironment) SetVolumetricFogLength(length Float) {
	self.Runtime.Environment_set_volumetric_fog_length(Environment{self}, length)
}
func (self methodsEnvironment) GetVolumetricFogLength() Float {
	return self.Runtime.Environment_get_volumetric_fog_length(Environment{self})
}
func (self methodsEnvironment) SetVolumetricFogDetailSpread(detail_spread Float) {
	self.Runtime.Environment_set_volumetric_fog_detail_spread(Environment{self}, detail_spread)
}
func (self methodsEnvironment) GetVolumetricFogDetailSpread() Float {
	return self.Runtime.Environment_get_volumetric_fog_detail_spread(Environment{self})
}
func (self methodsEnvironment) SetVolumetricFogGiInject(gi_inject Float) {
	self.Runtime.Environment_set_volumetric_fog_gi_inject(Environment{self}, gi_inject)
}
func (self methodsEnvironment) GetVolumetricFogGiInject() Float {
	return self.Runtime.Environment_get_volumetric_fog_gi_inject(Environment{self})
}
func (self methodsEnvironment) SetVolumetricFogAmbientInject(enabled Float) {
	self.Runtime.Environment_set_volumetric_fog_ambient_inject(Environment{self}, enabled)
}
func (self methodsEnvironment) GetVolumetricFogAmbientInject() Float {
	return self.Runtime.Environment_get_volumetric_fog_ambient_inject(Environment{self})
}
func (self methodsEnvironment) SetVolumetricFogSkyAffect(sky_affect Float) {
	self.Runtime.Environment_set_volumetric_fog_sky_affect(Environment{self}, sky_affect)
}
func (self methodsEnvironment) GetVolumetricFogSkyAffect() Float {
	return self.Runtime.Environment_get_volumetric_fog_sky_affect(Environment{self})
}
func (self methodsEnvironment) SetVolumetricFogTemporalReprojectionEnabled(enabled bool) {
	self.Runtime.Environment_set_volumetric_fog_temporal_reprojection_enabled(Environment{self}, enabled)
}
func (self methodsEnvironment) IsVolumetricFogTemporalReprojectionEnabled() bool {
	return self.Runtime.Environment_is_volumetric_fog_temporal_reprojection_enabled(Environment{self})
}
func (self methodsEnvironment) SetVolumetricFogTemporalReprojectionAmount(temporal_reprojection_amount Float) {
	self.Runtime.Environment_set_volumetric_fog_temporal_reprojection_amount(Environment{self}, temporal_reprojection_amount)
}
func (self methodsEnvironment) GetVolumetricFogTemporalReprojectionAmount() Float {
	return self.Runtime.Environment_get_volumetric_fog_temporal_reprojection_amount(Environment{self})
}
func (self methodsEnvironment) SetAdjustmentEnabled(enabled bool) {
	self.Runtime.Environment_set_adjustment_enabled(Environment{self}, enabled)
}
func (self methodsEnvironment) IsAdjustmentEnabled() bool {
	return self.Runtime.Environment_is_adjustment_enabled(Environment{self})
}
func (self methodsEnvironment) SetAdjustmentBrightness(brightness Float) {
	self.Runtime.Environment_set_adjustment_brightness(Environment{self}, brightness)
}
func (self methodsEnvironment) GetAdjustmentBrightness() Float {
	return self.Runtime.Environment_get_adjustment_brightness(Environment{self})
}
func (self methodsEnvironment) SetAdjustmentContrast(contrast Float) {
	self.Runtime.Environment_set_adjustment_contrast(Environment{self}, contrast)
}
func (self methodsEnvironment) GetAdjustmentContrast() Float {
	return self.Runtime.Environment_get_adjustment_contrast(Environment{self})
}
func (self methodsEnvironment) SetAdjustmentSaturation(saturation Float) {
	self.Runtime.Environment_set_adjustment_saturation(Environment{self}, saturation)
}
func (self methodsEnvironment) GetAdjustmentSaturation() Float {
	return self.Runtime.Environment_get_adjustment_saturation(Environment{self})
}
func (self methodsEnvironment) SetAdjustmentColorCorrection(color_correction Texture) {
	self.Runtime.Environment_set_adjustment_color_correction(Environment{self}, color_correction)
}
func (self methodsEnvironment) GetAdjustmentColorCorrection() Texture {
	return self.Runtime.Environment_get_adjustment_color_correction(Environment{self})
}

type methodsExpression struct {
	_ [0]*methodsExpression
	class
}

func (self Expression) RefCounted() RefCounted {
	var parent RefCounted
	parent.class = self.class
	return parent
}
func (self methodsExpression) Parse(expression string, input_names PackedStringArray) int64 {
	return self.Runtime.Expression_parse(Expression{self}, expression, input_names)
}
func (self methodsExpression) Execute(inputs Array, base_instance Object, show_error bool, const_calls_only bool) any {
	return self.Runtime.Expression_execute(Expression{self}, inputs, base_instance, show_error, const_calls_only)
}
func (self methodsExpression) HasExecuteFailed() bool {
	return self.Runtime.Expression_has_execute_failed(Expression{self})
}
func (self methodsExpression) GetErrorText() string {
	return self.Runtime.Expression_get_error_text(Expression{self})
}

type methodsFastNoiseLite struct {
	_ [0]*methodsFastNoiseLite
	class
}

func (self FastNoiseLite) Noise() Noise { var parent Noise; parent.class = self.class; return parent }
func (self methodsFastNoiseLite) SetNoiseType(atype FastNoiseLiteNoiseType) {
	self.Runtime.FastNoiseLite_set_noise_type(FastNoiseLite{self}, atype)
}
func (self methodsFastNoiseLite) GetNoiseType() FastNoiseLiteNoiseType {
	return self.Runtime.FastNoiseLite_get_noise_type(FastNoiseLite{self})
}
func (self methodsFastNoiseLite) SetSeed(seed int64) {
	self.Runtime.FastNoiseLite_set_seed(FastNoiseLite{self}, seed)
}
func (self methodsFastNoiseLite) GetSeed() int64 {
	return self.Runtime.FastNoiseLite_get_seed(FastNoiseLite{self})
}
func (self methodsFastNoiseLite) SetFrequency(freq Float) {
	self.Runtime.FastNoiseLite_set_frequency(FastNoiseLite{self}, freq)
}
func (self methodsFastNoiseLite) GetFrequency() Float {
	return self.Runtime.FastNoiseLite_get_frequency(FastNoiseLite{self})
}
func (self methodsFastNoiseLite) SetOffset(offset Vector3) {
	self.Runtime.FastNoiseLite_set_offset(FastNoiseLite{self}, offset)
}
func (self methodsFastNoiseLite) GetOffset() Vector3 {
	return self.Runtime.FastNoiseLite_get_offset(FastNoiseLite{self})
}
func (self methodsFastNoiseLite) SetFractalType(atype FastNoiseLiteFractalType) {
	self.Runtime.FastNoiseLite_set_fractal_type(FastNoiseLite{self}, atype)
}
func (self methodsFastNoiseLite) GetFractalType() FastNoiseLiteFractalType {
	return self.Runtime.FastNoiseLite_get_fractal_type(FastNoiseLite{self})
}
func (self methodsFastNoiseLite) SetFractalOctaves(octave_count int64) {
	self.Runtime.FastNoiseLite_set_fractal_octaves(FastNoiseLite{self}, octave_count)
}
func (self methodsFastNoiseLite) GetFractalOctaves() int64 {
	return self.Runtime.FastNoiseLite_get_fractal_octaves(FastNoiseLite{self})
}
func (self methodsFastNoiseLite) SetFractalLacunarity(lacunarity Float) {
	self.Runtime.FastNoiseLite_set_fractal_lacunarity(FastNoiseLite{self}, lacunarity)
}
func (self methodsFastNoiseLite) GetFractalLacunarity() Float {
	return self.Runtime.FastNoiseLite_get_fractal_lacunarity(FastNoiseLite{self})
}
func (self methodsFastNoiseLite) SetFractalGain(gain Float) {
	self.Runtime.FastNoiseLite_set_fractal_gain(FastNoiseLite{self}, gain)
}
func (self methodsFastNoiseLite) GetFractalGain() Float {
	return self.Runtime.FastNoiseLite_get_fractal_gain(FastNoiseLite{self})
}
func (self methodsFastNoiseLite) SetFractalWeightedStrength(weighted_strength Float) {
	self.Runtime.FastNoiseLite_set_fractal_weighted_strength(FastNoiseLite{self}, weighted_strength)
}
func (self methodsFastNoiseLite) GetFractalWeightedStrength() Float {
	return self.Runtime.FastNoiseLite_get_fractal_weighted_strength(FastNoiseLite{self})
}
func (self methodsFastNoiseLite) SetFractalPingPongStrength(ping_pong_strength Float) {
	self.Runtime.FastNoiseLite_set_fractal_ping_pong_strength(FastNoiseLite{self}, ping_pong_strength)
}
func (self methodsFastNoiseLite) GetFractalPingPongStrength() Float {
	return self.Runtime.FastNoiseLite_get_fractal_ping_pong_strength(FastNoiseLite{self})
}
func (self methodsFastNoiseLite) SetCellularDistanceFunction(fn FastNoiseLiteCellularDistanceFunction) {
	self.Runtime.FastNoiseLite_set_cellular_distance_function(FastNoiseLite{self}, fn)
}
func (self methodsFastNoiseLite) GetCellularDistanceFunction() FastNoiseLiteCellularDistanceFunction {
	return self.Runtime.FastNoiseLite_get_cellular_distance_function(FastNoiseLite{self})
}
func (self methodsFastNoiseLite) SetCellularJitter(jitter Float) {
	self.Runtime.FastNoiseLite_set_cellular_jitter(FastNoiseLite{self}, jitter)
}
func (self methodsFastNoiseLite) GetCellularJitter() Float {
	return self.Runtime.FastNoiseLite_get_cellular_jitter(FastNoiseLite{self})
}
func (self methodsFastNoiseLite) SetCellularReturnType(ret FastNoiseLiteCellularReturnType) {
	self.Runtime.FastNoiseLite_set_cellular_return_type(FastNoiseLite{self}, ret)
}
func (self methodsFastNoiseLite) GetCellularReturnType() FastNoiseLiteCellularReturnType {
	return self.Runtime.FastNoiseLite_get_cellular_return_type(FastNoiseLite{self})
}
func (self methodsFastNoiseLite) SetDomainWarpEnabled(domain_warp_enabled bool) {
	self.Runtime.FastNoiseLite_set_domain_warp_enabled(FastNoiseLite{self}, domain_warp_enabled)
}
func (self methodsFastNoiseLite) IsDomainWarpEnabled() bool {
	return self.Runtime.FastNoiseLite_is_domain_warp_enabled(FastNoiseLite{self})
}
func (self methodsFastNoiseLite) SetDomainWarpType(domain_warp_type FastNoiseLiteDomainWarpType) {
	self.Runtime.FastNoiseLite_set_domain_warp_type(FastNoiseLite{self}, domain_warp_type)
}
func (self methodsFastNoiseLite) GetDomainWarpType() FastNoiseLiteDomainWarpType {
	return self.Runtime.FastNoiseLite_get_domain_warp_type(FastNoiseLite{self})
}
func (self methodsFastNoiseLite) SetDomainWarpAmplitude(domain_warp_amplitude Float) {
	self.Runtime.FastNoiseLite_set_domain_warp_amplitude(FastNoiseLite{self}, domain_warp_amplitude)
}
func (self methodsFastNoiseLite) GetDomainWarpAmplitude() Float {
	return self.Runtime.FastNoiseLite_get_domain_warp_amplitude(FastNoiseLite{self})
}
func (self methodsFastNoiseLite) SetDomainWarpFrequency(domain_warp_frequency Float) {
	self.Runtime.FastNoiseLite_set_domain_warp_frequency(FastNoiseLite{self}, domain_warp_frequency)
}
func (self methodsFastNoiseLite) GetDomainWarpFrequency() Float {
	return self.Runtime.FastNoiseLite_get_domain_warp_frequency(FastNoiseLite{self})
}
func (self methodsFastNoiseLite) SetDomainWarpFractalType(domain_warp_fractal_type FastNoiseLiteDomainWarpFractalType) {
	self.Runtime.FastNoiseLite_set_domain_warp_fractal_type(FastNoiseLite{self}, domain_warp_fractal_type)
}
func (self methodsFastNoiseLite) GetDomainWarpFractalType() FastNoiseLiteDomainWarpFractalType {
	return self.Runtime.FastNoiseLite_get_domain_warp_fractal_type(FastNoiseLite{self})
}
func (self methodsFastNoiseLite) SetDomainWarpFractalOctaves(domain_warp_octave_count int64) {
	self.Runtime.FastNoiseLite_set_domain_warp_fractal_octaves(FastNoiseLite{self}, domain_warp_octave_count)
}
func (self methodsFastNoiseLite) GetDomainWarpFractalOctaves() int64 {
	return self.Runtime.FastNoiseLite_get_domain_warp_fractal_octaves(FastNoiseLite{self})
}
func (self methodsFastNoiseLite) SetDomainWarpFractalLacunarity(domain_warp_lacunarity Float) {
	self.Runtime.FastNoiseLite_set_domain_warp_fractal_lacunarity(FastNoiseLite{self}, domain_warp_lacunarity)
}
func (self methodsFastNoiseLite) GetDomainWarpFractalLacunarity() Float {
	return self.Runtime.FastNoiseLite_get_domain_warp_fractal_lacunarity(FastNoiseLite{self})
}
func (self methodsFastNoiseLite) SetDomainWarpFractalGain(domain_warp_gain Float) {
	self.Runtime.FastNoiseLite_set_domain_warp_fractal_gain(FastNoiseLite{self}, domain_warp_gain)
}
func (self methodsFastNoiseLite) GetDomainWarpFractalGain() Float {
	return self.Runtime.FastNoiseLite_get_domain_warp_fractal_gain(FastNoiseLite{self})
}

type methodsFileAccess struct {
	_ [0]*methodsFileAccess
	class
}

func (self FileAccess) RefCounted() RefCounted {
	var parent RefCounted
	parent.class = self.class
	return parent
}
func (self methodsFileAccess) Open(path string, flags FileAccessModeFlags) FileAccess {
	return self.Runtime.FileAccess_open(FileAccess{self}, path, flags)
}
func (self methodsFileAccess) OpenEncrypted(path string, mode_flags FileAccessModeFlags, key PackedByteArray) FileAccess {
	return self.Runtime.FileAccess_open_encrypted(FileAccess{self}, path, mode_flags, key)
}
func (self methodsFileAccess) OpenEncryptedWithPass(path string, mode_flags FileAccessModeFlags, pass string) FileAccess {
	return self.Runtime.FileAccess_open_encrypted_with_pass(FileAccess{self}, path, mode_flags, pass)
}
func (self methodsFileAccess) OpenCompressed(path string, mode_flags FileAccessModeFlags, compression_mode FileAccessCompressionMode) FileAccess {
	return self.Runtime.FileAccess_open_compressed(FileAccess{self}, path, mode_flags, compression_mode)
}
func (self methodsFileAccess) GetOpenError() int64 {
	return self.Runtime.FileAccess_get_open_error(FileAccess{self})
}
func (self methodsFileAccess) GetFileAsBytes(path string) PackedByteArray {
	return self.Runtime.FileAccess_get_file_as_bytes(FileAccess{self}, path)
}
func (self methodsFileAccess) GetFileAsString(path string) string {
	return self.Runtime.FileAccess_get_file_as_string(FileAccess{self}, path)
}
func (self methodsFileAccess) Flush() {
	self.Runtime.FileAccess_flush(FileAccess{self})
}
func (self methodsFileAccess) GetPath() string {
	return self.Runtime.FileAccess_get_path(FileAccess{self})
}
func (self methodsFileAccess) GetPathAbsolute() string {
	return self.Runtime.FileAccess_get_path_absolute(FileAccess{self})
}
func (self methodsFileAccess) IsOpen() bool {
	return self.Runtime.FileAccess_is_open(FileAccess{self})
}
func (self methodsFileAccess) SeekTo(position int64) {
	self.Runtime.FileAccess_seek(FileAccess{self}, position)
}
func (self methodsFileAccess) SeekEnd(position int64) {
	self.Runtime.FileAccess_seek_end(FileAccess{self}, position)
}
func (self methodsFileAccess) GetPosition() int64 {
	return self.Runtime.FileAccess_get_position(FileAccess{self})
}
func (self methodsFileAccess) GetLength() int64 {
	return self.Runtime.FileAccess_get_length(FileAccess{self})
}
func (self methodsFileAccess) EofReached() bool {
	return self.Runtime.FileAccess_eof_reached(FileAccess{self})
}
func (self methodsFileAccess) Get8() int64 {
	return self.Runtime.FileAccess_get_8(FileAccess{self})
}
func (self methodsFileAccess) Get16() int64 {
	return self.Runtime.FileAccess_get_16(FileAccess{self})
}
func (self methodsFileAccess) Get32() int64 {
	return self.Runtime.FileAccess_get_32(FileAccess{self})
}
func (self methodsFileAccess) Get64() int64 {
	return self.Runtime.FileAccess_get_64(FileAccess{self})
}
func (self methodsFileAccess) GetFloat() Float {
	return self.Runtime.FileAccess_get_float(FileAccess{self})
}
func (self methodsFileAccess) GetDouble() Float {
	return self.Runtime.FileAccess_get_double(FileAccess{self})
}
func (self methodsFileAccess) GetReal() Float {
	return self.Runtime.FileAccess_get_real(FileAccess{self})
}
func (self methodsFileAccess) GetBuffer(length int64) PackedByteArray {
	return self.Runtime.FileAccess_get_buffer(FileAccess{self}, length)
}
func (self methodsFileAccess) GetLine() string {
	return self.Runtime.FileAccess_get_line(FileAccess{self})
}
func (self methodsFileAccess) GetCsvLine(delim string) PackedStringArray {
	return self.Runtime.FileAccess_get_csv_line(FileAccess{self}, delim)
}
func (self methodsFileAccess) GetAsText(skip_cr bool) string {
	return self.Runtime.FileAccess_get_as_text(FileAccess{self}, skip_cr)
}
func (self methodsFileAccess) GetMd5(path string) string {
	return self.Runtime.FileAccess_get_md5(FileAccess{self}, path)
}
func (self methodsFileAccess) GetSha256(path string) string {
	return self.Runtime.FileAccess_get_sha256(FileAccess{self}, path)
}
func (self methodsFileAccess) IsBigEndian() bool {
	return self.Runtime.FileAccess_is_big_endian(FileAccess{self})
}
func (self methodsFileAccess) SetBigEndian(big_endian bool) {
	self.Runtime.FileAccess_set_big_endian(FileAccess{self}, big_endian)
}
func (self methodsFileAccess) GetError() int64 {
	return self.Runtime.FileAccess_get_error(FileAccess{self})
}
func (self methodsFileAccess) GetVar(allow_objects bool) any {
	return self.Runtime.FileAccess_get_var(FileAccess{self}, allow_objects)
}
func (self methodsFileAccess) Store8(value int64) {
	self.Runtime.FileAccess_store_8(FileAccess{self}, value)
}
func (self methodsFileAccess) Store16(value int64) {
	self.Runtime.FileAccess_store_16(FileAccess{self}, value)
}
func (self methodsFileAccess) Store32(value int64) {
	self.Runtime.FileAccess_store_32(FileAccess{self}, value)
}
func (self methodsFileAccess) Store64(value int64) {
	self.Runtime.FileAccess_store_64(FileAccess{self}, value)
}
func (self methodsFileAccess) StoreFloat(value Float) {
	self.Runtime.FileAccess_store_float(FileAccess{self}, value)
}
func (self methodsFileAccess) StoreDouble(value Float) {
	self.Runtime.FileAccess_store_double(FileAccess{self}, value)
}
func (self methodsFileAccess) StoreReal(value Float) {
	self.Runtime.FileAccess_store_real(FileAccess{self}, value)
}
func (self methodsFileAccess) StoreBuffer(buffer PackedByteArray) {
	self.Runtime.FileAccess_store_buffer(FileAccess{self}, buffer)
}
func (self methodsFileAccess) StoreLine(line string) {
	self.Runtime.FileAccess_store_line(FileAccess{self}, line)
}
func (self methodsFileAccess) StoreCsvLine(values PackedStringArray, delim string) {
	self.Runtime.FileAccess_store_csv_line(FileAccess{self}, values, delim)
}
func (self methodsFileAccess) StoreString(s string) {
	self.Runtime.FileAccess_store_string(FileAccess{self}, s)
}
func (self methodsFileAccess) StoreVar(value any, full_objects bool) {
	self.Runtime.FileAccess_store_var(FileAccess{self}, value, full_objects)
}
func (self methodsFileAccess) StorePascalString(s string) {
	self.Runtime.FileAccess_store_pascal_string(FileAccess{self}, s)
}
func (self methodsFileAccess) GetPascalString() string {
	return self.Runtime.FileAccess_get_pascal_string(FileAccess{self})
}
func (self methodsFileAccess) Close() {
	self.Runtime.FileAccess_close(FileAccess{self})
}
func (self methodsFileAccess) FileExists(path string) bool {
	return self.Runtime.FileAccess_file_exists(FileAccess{self}, path)
}
func (self methodsFileAccess) GetModifiedTime(file string) int64 {
	return self.Runtime.FileAccess_get_modified_time(FileAccess{self}, file)
}
func (self methodsFileAccess) GetUnixPermissions(file string) FileAccessUnixPermissionFlags {
	return self.Runtime.FileAccess_get_unix_permissions(FileAccess{self}, file)
}
func (self methodsFileAccess) SetUnixPermissions(file string, permissions FileAccessUnixPermissionFlags) int64 {
	return self.Runtime.FileAccess_set_unix_permissions(FileAccess{self}, file, permissions)
}
func (self methodsFileAccess) GetHiddenAttribute(file string) bool {
	return self.Runtime.FileAccess_get_hidden_attribute(FileAccess{self}, file)
}
func (self methodsFileAccess) SetHiddenAttribute(file string, hidden bool) int64 {
	return self.Runtime.FileAccess_set_hidden_attribute(FileAccess{self}, file, hidden)
}
func (self methodsFileAccess) SetReadOnlyAttribute(file string, ro bool) int64 {
	return self.Runtime.FileAccess_set_read_only_attribute(FileAccess{self}, file, ro)
}
func (self methodsFileAccess) GetReadOnlyAttribute(file string) bool {
	return self.Runtime.FileAccess_get_read_only_attribute(FileAccess{self}, file)
}

type methodsFileDialog struct {
	_ [0]*methodsFileDialog
	class
}

func (self FileDialog) ConfirmationDialog() ConfirmationDialog {
	var parent ConfirmationDialog
	parent.class = self.class
	return parent
}
func (self methodsFileDialog) ClearFilters() {
	self.Runtime.FileDialog_clear_filters(FileDialog{self})
}
func (self methodsFileDialog) AddFilter(filter string, description string) {
	self.Runtime.FileDialog_add_filter(FileDialog{self}, filter, description)
}
func (self methodsFileDialog) SetFilters(filters PackedStringArray) {
	self.Runtime.FileDialog_set_filters(FileDialog{self}, filters)
}
func (self methodsFileDialog) GetFilters() PackedStringArray {
	return self.Runtime.FileDialog_get_filters(FileDialog{self})
}
func (self methodsFileDialog) GetCurrentDir() string {
	return self.Runtime.FileDialog_get_current_dir(FileDialog{self})
}
func (self methodsFileDialog) GetCurrentFile() string {
	return self.Runtime.FileDialog_get_current_file(FileDialog{self})
}
func (self methodsFileDialog) GetCurrentPath() string {
	return self.Runtime.FileDialog_get_current_path(FileDialog{self})
}
func (self methodsFileDialog) SetCurrentDir(dir string) {
	self.Runtime.FileDialog_set_current_dir(FileDialog{self}, dir)
}
func (self methodsFileDialog) SetCurrentFile(file string) {
	self.Runtime.FileDialog_set_current_file(FileDialog{self}, file)
}
func (self methodsFileDialog) SetCurrentPath(path string) {
	self.Runtime.FileDialog_set_current_path(FileDialog{self}, path)
}
func (self methodsFileDialog) SetModeOverridesTitle(override bool) {
	self.Runtime.FileDialog_set_mode_overrides_title(FileDialog{self}, override)
}
func (self methodsFileDialog) IsModeOverridingTitle() bool {
	return self.Runtime.FileDialog_is_mode_overriding_title(FileDialog{self})
}
func (self methodsFileDialog) SetFileMode(mode FileDialogFileMode) {
	self.Runtime.FileDialog_set_file_mode(FileDialog{self}, mode)
}
func (self methodsFileDialog) GetFileMode() FileDialogFileMode {
	return self.Runtime.FileDialog_get_file_mode(FileDialog{self})
}
func (self methodsFileDialog) GetVbox() VBoxContainer {
	return self.Runtime.FileDialog_get_vbox(FileDialog{self})
}
func (self methodsFileDialog) GetLineEdit() LineEdit {
	return self.Runtime.FileDialog_get_line_edit(FileDialog{self})
}
func (self methodsFileDialog) SetAccess(access FileDialogAccess) {
	self.Runtime.FileDialog_set_access(FileDialog{self}, access)
}
func (self methodsFileDialog) GetAccess() FileDialogAccess {
	return self.Runtime.FileDialog_get_access(FileDialog{self})
}
func (self methodsFileDialog) SetRootSubfolder(dir string) {
	self.Runtime.FileDialog_set_root_subfolder(FileDialog{self}, dir)
}
func (self methodsFileDialog) GetRootSubfolder() string {
	return self.Runtime.FileDialog_get_root_subfolder(FileDialog{self})
}
func (self methodsFileDialog) SetShowHiddenFiles(show bool) {
	self.Runtime.FileDialog_set_show_hidden_files(FileDialog{self}, show)
}
func (self methodsFileDialog) IsShowingHiddenFiles() bool {
	return self.Runtime.FileDialog_is_showing_hidden_files(FileDialog{self})
}
func (self methodsFileDialog) SetUseNativeDialog(native bool) {
	self.Runtime.FileDialog_set_use_native_dialog(FileDialog{self}, native)
}
func (self methodsFileDialog) GetUseNativeDialog() bool {
	return self.Runtime.FileDialog_get_use_native_dialog(FileDialog{self})
}
func (self methodsFileDialog) DeselectAll() {
	self.Runtime.FileDialog_deselect_all(FileDialog{self})
}
func (self methodsFileDialog) Invalidate() {
	self.Runtime.FileDialog_invalidate(FileDialog{self})
}

type methodsFileSystemDock struct {
	_ [0]*methodsFileSystemDock
	class
}

func (self FileSystemDock) VBoxContainer() VBoxContainer {
	var parent VBoxContainer
	parent.class = self.class
	return parent
}
func (self methodsFileSystemDock) NavigateToPath(path string) {
	self.Runtime.FileSystemDock_navigate_to_path(FileSystemDock{self}, path)
}
func (self methodsFileSystemDock) AddResourceTooltipPlugin(plugin EditorResourceTooltipPlugin) {
	self.Runtime.FileSystemDock_add_resource_tooltip_plugin(FileSystemDock{self}, plugin)
}
func (self methodsFileSystemDock) RemoveResourceTooltipPlugin(plugin EditorResourceTooltipPlugin) {
	self.Runtime.FileSystemDock_remove_resource_tooltip_plugin(FileSystemDock{self}, plugin)
}

type methodsFlowContainer struct {
	_ [0]*methodsFlowContainer
	class
}

func (self FlowContainer) Container() Container {
	var parent Container
	parent.class = self.class
	return parent
}
func (self methodsFlowContainer) GetLineCount() int64 {
	return self.Runtime.FlowContainer_get_line_count(FlowContainer{self})
}
func (self methodsFlowContainer) SetAlignment(alignment FlowContainerAlignmentMode) {
	self.Runtime.FlowContainer_set_alignment(FlowContainer{self}, alignment)
}
func (self methodsFlowContainer) GetAlignment() FlowContainerAlignmentMode {
	return self.Runtime.FlowContainer_get_alignment(FlowContainer{self})
}
func (self methodsFlowContainer) SetVertical(vertical bool) {
	self.Runtime.FlowContainer_set_vertical(FlowContainer{self}, vertical)
}
func (self methodsFlowContainer) IsVertical() bool {
	return self.Runtime.FlowContainer_is_vertical(FlowContainer{self})
}

type methodsFogMaterial struct {
	_ [0]*methodsFogMaterial
	class
}

func (self FogMaterial) Material() Material {
	var parent Material
	parent.class = self.class
	return parent
}
func (self methodsFogMaterial) SetDensity(density Float) {
	self.Runtime.FogMaterial_set_density(FogMaterial{self}, density)
}
func (self methodsFogMaterial) GetDensity() Float {
	return self.Runtime.FogMaterial_get_density(FogMaterial{self})
}
func (self methodsFogMaterial) SetAlbedo(albedo Color) {
	self.Runtime.FogMaterial_set_albedo(FogMaterial{self}, albedo)
}
func (self methodsFogMaterial) GetAlbedo() Color {
	return self.Runtime.FogMaterial_get_albedo(FogMaterial{self})
}
func (self methodsFogMaterial) SetEmission(emission Color) {
	self.Runtime.FogMaterial_set_emission(FogMaterial{self}, emission)
}
func (self methodsFogMaterial) GetEmission() Color {
	return self.Runtime.FogMaterial_get_emission(FogMaterial{self})
}
func (self methodsFogMaterial) SetHeightFalloff(height_falloff Float) {
	self.Runtime.FogMaterial_set_height_falloff(FogMaterial{self}, height_falloff)
}
func (self methodsFogMaterial) GetHeightFalloff() Float {
	return self.Runtime.FogMaterial_get_height_falloff(FogMaterial{self})
}
func (self methodsFogMaterial) SetEdgeFade(edge_fade Float) {
	self.Runtime.FogMaterial_set_edge_fade(FogMaterial{self}, edge_fade)
}
func (self methodsFogMaterial) GetEdgeFade() Float {
	return self.Runtime.FogMaterial_get_edge_fade(FogMaterial{self})
}
func (self methodsFogMaterial) SetDensityTexture(density_texture Texture3D) {
	self.Runtime.FogMaterial_set_density_texture(FogMaterial{self}, density_texture)
}
func (self methodsFogMaterial) GetDensityTexture() Texture3D {
	return self.Runtime.FogMaterial_get_density_texture(FogMaterial{self})
}

type methodsFogVolume struct {
	_ [0]*methodsFogVolume
	class
}

func (self FogVolume) VisualInstance3D() VisualInstance3D {
	var parent VisualInstance3D
	parent.class = self.class
	return parent
}
func (self methodsFogVolume) SetSize(size Vector3) {
	self.Runtime.FogVolume_set_size(FogVolume{self}, size)
}
func (self methodsFogVolume) GetSize() Vector3 {
	return self.Runtime.FogVolume_get_size(FogVolume{self})
}
func (self methodsFogVolume) SetShape(shape RenderingServerFogVolumeShape) {
	self.Runtime.FogVolume_set_shape(FogVolume{self}, shape)
}
func (self methodsFogVolume) GetShape() RenderingServerFogVolumeShape {
	return self.Runtime.FogVolume_get_shape(FogVolume{self})
}
func (self methodsFogVolume) SetMaterial(material Material) {
	self.Runtime.FogVolume_set_material(FogVolume{self}, material)
}
func (self methodsFogVolume) GetMaterial() Material {
	return self.Runtime.FogVolume_get_material(FogVolume{self})
}

type methodsFont struct {
	_ [0]*methodsFont
	class
}

func (self Font) Resource() Resource { var parent Resource; parent.class = self.class; return parent }
func (self methodsFont) SetFallbacks(fallbacks ArrayOf[Font]) {
	self.Runtime.Font_set_fallbacks(Font{self}, fallbacks)
}
func (self methodsFont) GetFallbacks() ArrayOf[Font] {
	return self.Runtime.Font_get_fallbacks(Font{self})
}
func (self methodsFont) FindVariation(variation_coordinates Dictionary, face_index int64, strength Float, transform Transform2D, spacing_top int64, spacing_bottom int64, spacing_space int64, spacing_glyph int64) RID {
	return self.Runtime.Font_find_variation(Font{self}, variation_coordinates, face_index, strength, transform, spacing_top, spacing_bottom, spacing_space, spacing_glyph)
}
func (self methodsFont) GetRids() ArrayOf[RID] {
	return self.Runtime.Font_get_rids(Font{self})
}
func (self methodsFont) GetHeight(font_size int64) Float {
	return self.Runtime.Font_get_height(Font{self}, font_size)
}
func (self methodsFont) GetAscent(font_size int64) Float {
	return self.Runtime.Font_get_ascent(Font{self}, font_size)
}
func (self methodsFont) GetDescent(font_size int64) Float {
	return self.Runtime.Font_get_descent(Font{self}, font_size)
}
func (self methodsFont) GetUnderlinePosition(font_size int64) Float {
	return self.Runtime.Font_get_underline_position(Font{self}, font_size)
}
func (self methodsFont) GetUnderlineThickness(font_size int64) Float {
	return self.Runtime.Font_get_underline_thickness(Font{self}, font_size)
}
func (self methodsFont) GetFontName() string {
	return self.Runtime.Font_get_font_name(Font{self})
}
func (self methodsFont) GetFontStyleName() string {
	return self.Runtime.Font_get_font_style_name(Font{self})
}
func (self methodsFont) GetOtNameStrings() Dictionary {
	return self.Runtime.Font_get_ot_name_strings(Font{self})
}
func (self methodsFont) GetFontStyle() TextServerFontStyle {
	return self.Runtime.Font_get_font_style(Font{self})
}
func (self methodsFont) GetFontWeight() int64 {
	return self.Runtime.Font_get_font_weight(Font{self})
}
func (self methodsFont) GetFontStretch() int64 {
	return self.Runtime.Font_get_font_stretch(Font{self})
}
func (self methodsFont) GetSpacing(spacing TextServerSpacingType) int64 {
	return self.Runtime.Font_get_spacing(Font{self}, spacing)
}
func (self methodsFont) GetOpentypeFeatures() Dictionary {
	return self.Runtime.Font_get_opentype_features(Font{self})
}
func (self methodsFont) SetCacheCapacity(single_line int64, multi_line int64) {
	self.Runtime.Font_set_cache_capacity(Font{self}, single_line, multi_line)
}
func (self methodsFont) GetStringSize(text string, alignment HorizontalAlignment, width Float, font_size int64, justification_flags TextServerJustificationFlag, direction TextServerDirection, orientation TextServerOrientation) Vector2 {
	return self.Runtime.Font_get_string_size(Font{self}, text, alignment, width, font_size, justification_flags, direction, orientation)
}
func (self methodsFont) GetMultilineStringSize(text string, alignment HorizontalAlignment, width Float, font_size int64, max_lines int64, brk_flags TextServerLineBreakFlag, justification_flags TextServerJustificationFlag, direction TextServerDirection, orientation TextServerOrientation) Vector2 {
	return self.Runtime.Font_get_multiline_string_size(Font{self}, text, alignment, width, font_size, max_lines, brk_flags, justification_flags, direction, orientation)
}
func (self methodsFont) DrawString(canvas_item RID, pos Vector2, text string, alignment HorizontalAlignment, width Float, font_size int64, modulate Color, justification_flags TextServerJustificationFlag, direction TextServerDirection, orientation TextServerOrientation) {
	self.Runtime.Font_draw_string(Font{self}, canvas_item, pos, text, alignment, width, font_size, modulate, justification_flags, direction, orientation)
}
func (self methodsFont) DrawMultilineString(canvas_item RID, pos Vector2, text string, alignment HorizontalAlignment, width Float, font_size int64, max_lines int64, modulate Color, brk_flags TextServerLineBreakFlag, justification_flags TextServerJustificationFlag, direction TextServerDirection, orientation TextServerOrientation) {
	self.Runtime.Font_draw_multiline_string(Font{self}, canvas_item, pos, text, alignment, width, font_size, max_lines, modulate, brk_flags, justification_flags, direction, orientation)
}
func (self methodsFont) DrawStringOutline(canvas_item RID, pos Vector2, text string, alignment HorizontalAlignment, width Float, font_size int64, size int64, modulate Color, justification_flags TextServerJustificationFlag, direction TextServerDirection, orientation TextServerOrientation) {
	self.Runtime.Font_draw_string_outline(Font{self}, canvas_item, pos, text, alignment, width, font_size, size, modulate, justification_flags, direction, orientation)
}
func (self methodsFont) DrawMultilineStringOutline(canvas_item RID, pos Vector2, text string, alignment HorizontalAlignment, width Float, font_size int64, max_lines int64, size int64, modulate Color, brk_flags TextServerLineBreakFlag, justification_flags TextServerJustificationFlag, direction TextServerDirection, orientation TextServerOrientation) {
	self.Runtime.Font_draw_multiline_string_outline(Font{self}, canvas_item, pos, text, alignment, width, font_size, max_lines, size, modulate, brk_flags, justification_flags, direction, orientation)
}
func (self methodsFont) GetCharSize(char int64, font_size int64) Vector2 {
	return self.Runtime.Font_get_char_size(Font{self}, char, font_size)
}
func (self methodsFont) DrawChar(canvas_item RID, pos Vector2, char int64, font_size int64, modulate Color) Float {
	return self.Runtime.Font_draw_char(Font{self}, canvas_item, pos, char, font_size, modulate)
}
func (self methodsFont) DrawCharOutline(canvas_item RID, pos Vector2, char int64, font_size int64, size int64, modulate Color) Float {
	return self.Runtime.Font_draw_char_outline(Font{self}, canvas_item, pos, char, font_size, size, modulate)
}
func (self methodsFont) HasChar(char int64) bool {
	return self.Runtime.Font_has_char(Font{self}, char)
}
func (self methodsFont) GetSupportedChars() string {
	return self.Runtime.Font_get_supported_chars(Font{self})
}
func (self methodsFont) IsLanguageSupported(language string) bool {
	return self.Runtime.Font_is_language_supported(Font{self}, language)
}
func (self methodsFont) IsScriptSupported(script string) bool {
	return self.Runtime.Font_is_script_supported(Font{self}, script)
}
func (self methodsFont) GetSupportedFeatureList() Dictionary {
	return self.Runtime.Font_get_supported_feature_list(Font{self})
}
func (self methodsFont) GetSupportedVariationList() Dictionary {
	return self.Runtime.Font_get_supported_variation_list(Font{self})
}
func (self methodsFont) GetFaceCount() int64 {
	return self.Runtime.Font_get_face_count(Font{self})
}

type methodsFontFile struct {
	_ [0]*methodsFontFile
	class
}

func (self FontFile) Font() Font { var parent Font; parent.class = self.class; return parent }
func (self methodsFontFile) LoadBitmapFont(path string) int64 {
	return self.Runtime.FontFile_load_bitmap_font(FontFile{self}, path)
}
func (self methodsFontFile) LoadDynamicFont(path string) int64 {
	return self.Runtime.FontFile_load_dynamic_font(FontFile{self}, path)
}
func (self methodsFontFile) SetData(data PackedByteArray) {
	self.Runtime.FontFile_set_data(FontFile{self}, data)
}
func (self methodsFontFile) GetData() PackedByteArray {
	return self.Runtime.FontFile_get_data(FontFile{self})
}
func (self methodsFontFile) SetFontName(name string) {
	self.Runtime.FontFile_set_font_name(FontFile{self}, name)
}
func (self methodsFontFile) SetFontStyleName(name string) {
	self.Runtime.FontFile_set_font_style_name(FontFile{self}, name)
}
func (self methodsFontFile) SetFontStyle(style TextServerFontStyle) {
	self.Runtime.FontFile_set_font_style(FontFile{self}, style)
}
func (self methodsFontFile) SetFontWeight(weight int64) {
	self.Runtime.FontFile_set_font_weight(FontFile{self}, weight)
}
func (self methodsFontFile) SetFontStretch(stretch int64) {
	self.Runtime.FontFile_set_font_stretch(FontFile{self}, stretch)
}
func (self methodsFontFile) SetAntialiasing(antialiasing TextServerFontAntialiasing) {
	self.Runtime.FontFile_set_antialiasing(FontFile{self}, antialiasing)
}
func (self methodsFontFile) GetAntialiasing() TextServerFontAntialiasing {
	return self.Runtime.FontFile_get_antialiasing(FontFile{self})
}
func (self methodsFontFile) SetGenerateMipmaps(generate_mipmaps bool) {
	self.Runtime.FontFile_set_generate_mipmaps(FontFile{self}, generate_mipmaps)
}
func (self methodsFontFile) GetGenerateMipmaps() bool {
	return self.Runtime.FontFile_get_generate_mipmaps(FontFile{self})
}
func (self methodsFontFile) SetMultichannelSignedDistanceField(msdf bool) {
	self.Runtime.FontFile_set_multichannel_signed_distance_field(FontFile{self}, msdf)
}
func (self methodsFontFile) IsMultichannelSignedDistanceField() bool {
	return self.Runtime.FontFile_is_multichannel_signed_distance_field(FontFile{self})
}
func (self methodsFontFile) SetMsdfPixelRange(msdf_pixel_range int64) {
	self.Runtime.FontFile_set_msdf_pixel_range(FontFile{self}, msdf_pixel_range)
}
func (self methodsFontFile) GetMsdfPixelRange() int64 {
	return self.Runtime.FontFile_get_msdf_pixel_range(FontFile{self})
}
func (self methodsFontFile) SetMsdfSize(msdf_size int64) {
	self.Runtime.FontFile_set_msdf_size(FontFile{self}, msdf_size)
}
func (self methodsFontFile) GetMsdfSize() int64 {
	return self.Runtime.FontFile_get_msdf_size(FontFile{self})
}
func (self methodsFontFile) SetFixedSize(fixed_size int64) {
	self.Runtime.FontFile_set_fixed_size(FontFile{self}, fixed_size)
}
func (self methodsFontFile) GetFixedSize() int64 {
	return self.Runtime.FontFile_get_fixed_size(FontFile{self})
}
func (self methodsFontFile) SetFixedSizeScaleMode(fixed_size_scale_mode TextServerFixedSizeScaleMode) {
	self.Runtime.FontFile_set_fixed_size_scale_mode(FontFile{self}, fixed_size_scale_mode)
}
func (self methodsFontFile) GetFixedSizeScaleMode() TextServerFixedSizeScaleMode {
	return self.Runtime.FontFile_get_fixed_size_scale_mode(FontFile{self})
}
func (self methodsFontFile) SetAllowSystemFallback(allow_system_fallback bool) {
	self.Runtime.FontFile_set_allow_system_fallback(FontFile{self}, allow_system_fallback)
}
func (self methodsFontFile) IsAllowSystemFallback() bool {
	return self.Runtime.FontFile_is_allow_system_fallback(FontFile{self})
}
func (self methodsFontFile) SetForceAutohinter(force_autohinter bool) {
	self.Runtime.FontFile_set_force_autohinter(FontFile{self}, force_autohinter)
}
func (self methodsFontFile) IsForceAutohinter() bool {
	return self.Runtime.FontFile_is_force_autohinter(FontFile{self})
}
func (self methodsFontFile) SetHinting(hinting TextServerHinting) {
	self.Runtime.FontFile_set_hinting(FontFile{self}, hinting)
}
func (self methodsFontFile) GetHinting() TextServerHinting {
	return self.Runtime.FontFile_get_hinting(FontFile{self})
}
func (self methodsFontFile) SetSubpixelPositioning(subpixel_positioning TextServerSubpixelPositioning) {
	self.Runtime.FontFile_set_subpixel_positioning(FontFile{self}, subpixel_positioning)
}
func (self methodsFontFile) GetSubpixelPositioning() TextServerSubpixelPositioning {
	return self.Runtime.FontFile_get_subpixel_positioning(FontFile{self})
}
func (self methodsFontFile) SetOversampling(oversampling Float) {
	self.Runtime.FontFile_set_oversampling(FontFile{self}, oversampling)
}
func (self methodsFontFile) GetOversampling() Float {
	return self.Runtime.FontFile_get_oversampling(FontFile{self})
}
func (self methodsFontFile) GetCacheCount() int64 {
	return self.Runtime.FontFile_get_cache_count(FontFile{self})
}
func (self methodsFontFile) ClearCache() {
	self.Runtime.FontFile_clear_cache(FontFile{self})
}
func (self methodsFontFile) RemoveCache(cache_index int64) {
	self.Runtime.FontFile_remove_cache(FontFile{self}, cache_index)
}
func (self methodsFontFile) GetSizeCacheList(cache_index int64) ArrayOf[Vector2i] {
	return self.Runtime.FontFile_get_size_cache_list(FontFile{self}, cache_index)
}
func (self methodsFontFile) ClearSizeCache(cache_index int64) {
	self.Runtime.FontFile_clear_size_cache(FontFile{self}, cache_index)
}
func (self methodsFontFile) RemoveSizeCache(cache_index int64, size Vector2i) {
	self.Runtime.FontFile_remove_size_cache(FontFile{self}, cache_index, size)
}
func (self methodsFontFile) SetVariationCoordinates(cache_index int64, variation_coordinates Dictionary) {
	self.Runtime.FontFile_set_variation_coordinates(FontFile{self}, cache_index, variation_coordinates)
}
func (self methodsFontFile) GetVariationCoordinates(cache_index int64) Dictionary {
	return self.Runtime.FontFile_get_variation_coordinates(FontFile{self}, cache_index)
}
func (self methodsFontFile) SetEmbolden(cache_index int64, strength Float) {
	self.Runtime.FontFile_set_embolden(FontFile{self}, cache_index, strength)
}
func (self methodsFontFile) GetEmbolden(cache_index int64) Float {
	return self.Runtime.FontFile_get_embolden(FontFile{self}, cache_index)
}
func (self methodsFontFile) SetTransform(cache_index int64, transform Transform2D) {
	self.Runtime.FontFile_set_transform(FontFile{self}, cache_index, transform)
}
func (self methodsFontFile) GetTransform(cache_index int64) Transform2D {
	return self.Runtime.FontFile_get_transform(FontFile{self}, cache_index)
}
func (self methodsFontFile) SetExtraSpacing(cache_index int64, spacing TextServerSpacingType, value int64) {
	self.Runtime.FontFile_set_extra_spacing(FontFile{self}, cache_index, spacing, value)
}
func (self methodsFontFile) GetExtraSpacing(cache_index int64, spacing TextServerSpacingType) int64 {
	return self.Runtime.FontFile_get_extra_spacing(FontFile{self}, cache_index, spacing)
}
func (self methodsFontFile) SetFaceIndex(cache_index int64, face_index int64) {
	self.Runtime.FontFile_set_face_index(FontFile{self}, cache_index, face_index)
}
func (self methodsFontFile) GetFaceIndex(cache_index int64) int64 {
	return self.Runtime.FontFile_get_face_index(FontFile{self}, cache_index)
}
func (self methodsFontFile) SetCacheAscent(cache_index int64, size int64, ascent Float) {
	self.Runtime.FontFile_set_cache_ascent(FontFile{self}, cache_index, size, ascent)
}
func (self methodsFontFile) GetCacheAscent(cache_index int64, size int64) Float {
	return self.Runtime.FontFile_get_cache_ascent(FontFile{self}, cache_index, size)
}
func (self methodsFontFile) SetCacheDescent(cache_index int64, size int64, descent Float) {
	self.Runtime.FontFile_set_cache_descent(FontFile{self}, cache_index, size, descent)
}
func (self methodsFontFile) GetCacheDescent(cache_index int64, size int64) Float {
	return self.Runtime.FontFile_get_cache_descent(FontFile{self}, cache_index, size)
}
func (self methodsFontFile) SetCacheUnderlinePosition(cache_index int64, size int64, underline_position Float) {
	self.Runtime.FontFile_set_cache_underline_position(FontFile{self}, cache_index, size, underline_position)
}
func (self methodsFontFile) GetCacheUnderlinePosition(cache_index int64, size int64) Float {
	return self.Runtime.FontFile_get_cache_underline_position(FontFile{self}, cache_index, size)
}
func (self methodsFontFile) SetCacheUnderlineThickness(cache_index int64, size int64, underline_thickness Float) {
	self.Runtime.FontFile_set_cache_underline_thickness(FontFile{self}, cache_index, size, underline_thickness)
}
func (self methodsFontFile) GetCacheUnderlineThickness(cache_index int64, size int64) Float {
	return self.Runtime.FontFile_get_cache_underline_thickness(FontFile{self}, cache_index, size)
}
func (self methodsFontFile) SetCacheScale(cache_index int64, size int64, scale Float) {
	self.Runtime.FontFile_set_cache_scale(FontFile{self}, cache_index, size, scale)
}
func (self methodsFontFile) GetCacheScale(cache_index int64, size int64) Float {
	return self.Runtime.FontFile_get_cache_scale(FontFile{self}, cache_index, size)
}
func (self methodsFontFile) GetTextureCount(cache_index int64, size Vector2i) int64 {
	return self.Runtime.FontFile_get_texture_count(FontFile{self}, cache_index, size)
}
func (self methodsFontFile) ClearTextures(cache_index int64, size Vector2i) {
	self.Runtime.FontFile_clear_textures(FontFile{self}, cache_index, size)
}
func (self methodsFontFile) RemoveTexture(cache_index int64, size Vector2i, texture_index int64) {
	self.Runtime.FontFile_remove_texture(FontFile{self}, cache_index, size, texture_index)
}
func (self methodsFontFile) SetTextureImage(cache_index int64, size Vector2i, texture_index int64, image Image) {
	self.Runtime.FontFile_set_texture_image(FontFile{self}, cache_index, size, texture_index, image)
}
func (self methodsFontFile) GetTextureImage(cache_index int64, size Vector2i, texture_index int64) Image {
	return self.Runtime.FontFile_get_texture_image(FontFile{self}, cache_index, size, texture_index)
}
func (self methodsFontFile) SetTextureOffsets(cache_index int64, size Vector2i, texture_index int64, offset PackedInt32Array) {
	self.Runtime.FontFile_set_texture_offsets(FontFile{self}, cache_index, size, texture_index, offset)
}
func (self methodsFontFile) GetTextureOffsets(cache_index int64, size Vector2i, texture_index int64) PackedInt32Array {
	return self.Runtime.FontFile_get_texture_offsets(FontFile{self}, cache_index, size, texture_index)
}
func (self methodsFontFile) GetGlyphList(cache_index int64, size Vector2i) PackedInt32Array {
	return self.Runtime.FontFile_get_glyph_list(FontFile{self}, cache_index, size)
}
func (self methodsFontFile) ClearGlyphs(cache_index int64, size Vector2i) {
	self.Runtime.FontFile_clear_glyphs(FontFile{self}, cache_index, size)
}
func (self methodsFontFile) RemoveGlyph(cache_index int64, size Vector2i, glyph int64) {
	self.Runtime.FontFile_remove_glyph(FontFile{self}, cache_index, size, glyph)
}
func (self methodsFontFile) SetGlyphAdvance(cache_index int64, size int64, glyph int64, advance Vector2) {
	self.Runtime.FontFile_set_glyph_advance(FontFile{self}, cache_index, size, glyph, advance)
}
func (self methodsFontFile) GetGlyphAdvance(cache_index int64, size int64, glyph int64) Vector2 {
	return self.Runtime.FontFile_get_glyph_advance(FontFile{self}, cache_index, size, glyph)
}
func (self methodsFontFile) SetGlyphOffset(cache_index int64, size Vector2i, glyph int64, offset Vector2) {
	self.Runtime.FontFile_set_glyph_offset(FontFile{self}, cache_index, size, glyph, offset)
}
func (self methodsFontFile) GetGlyphOffset(cache_index int64, size Vector2i, glyph int64) Vector2 {
	return self.Runtime.FontFile_get_glyph_offset(FontFile{self}, cache_index, size, glyph)
}
func (self methodsFontFile) SetGlyphSize(cache_index int64, size Vector2i, glyph int64, gl_size Vector2) {
	self.Runtime.FontFile_set_glyph_size(FontFile{self}, cache_index, size, glyph, gl_size)
}
func (self methodsFontFile) GetGlyphSize(cache_index int64, size Vector2i, glyph int64) Vector2 {
	return self.Runtime.FontFile_get_glyph_size(FontFile{self}, cache_index, size, glyph)
}
func (self methodsFontFile) SetGlyphUvRect(cache_index int64, size Vector2i, glyph int64, uv_rect Rect2) {
	self.Runtime.FontFile_set_glyph_uv_rect(FontFile{self}, cache_index, size, glyph, uv_rect)
}
func (self methodsFontFile) GetGlyphUvRect(cache_index int64, size Vector2i, glyph int64) Rect2 {
	return self.Runtime.FontFile_get_glyph_uv_rect(FontFile{self}, cache_index, size, glyph)
}
func (self methodsFontFile) SetGlyphTextureIdx(cache_index int64, size Vector2i, glyph int64, texture_idx int64) {
	self.Runtime.FontFile_set_glyph_texture_idx(FontFile{self}, cache_index, size, glyph, texture_idx)
}
func (self methodsFontFile) GetGlyphTextureIdx(cache_index int64, size Vector2i, glyph int64) int64 {
	return self.Runtime.FontFile_get_glyph_texture_idx(FontFile{self}, cache_index, size, glyph)
}
func (self methodsFontFile) GetKerningList(cache_index int64, size int64) ArrayOf[Vector2i] {
	return self.Runtime.FontFile_get_kerning_list(FontFile{self}, cache_index, size)
}
func (self methodsFontFile) ClearKerningMap(cache_index int64, size int64) {
	self.Runtime.FontFile_clear_kerning_map(FontFile{self}, cache_index, size)
}
func (self methodsFontFile) RemoveKerning(cache_index int64, size int64, glyph_pair Vector2i) {
	self.Runtime.FontFile_remove_kerning(FontFile{self}, cache_index, size, glyph_pair)
}
func (self methodsFontFile) SetKerning(cache_index int64, size int64, glyph_pair Vector2i, kerning Vector2) {
	self.Runtime.FontFile_set_kerning(FontFile{self}, cache_index, size, glyph_pair, kerning)
}
func (self methodsFontFile) GetKerning(cache_index int64, size int64, glyph_pair Vector2i) Vector2 {
	return self.Runtime.FontFile_get_kerning(FontFile{self}, cache_index, size, glyph_pair)
}
func (self methodsFontFile) RenderRange(cache_index int64, size Vector2i, start int64, end int64) {
	self.Runtime.FontFile_render_range(FontFile{self}, cache_index, size, start, end)
}
func (self methodsFontFile) RenderGlyph(cache_index int64, size Vector2i, index int64) {
	self.Runtime.FontFile_render_glyph(FontFile{self}, cache_index, size, index)
}
func (self methodsFontFile) SetLanguageSupportOverride(language string, supported bool) {
	self.Runtime.FontFile_set_language_support_override(FontFile{self}, language, supported)
}
func (self methodsFontFile) GetLanguageSupportOverride(language string) bool {
	return self.Runtime.FontFile_get_language_support_override(FontFile{self}, language)
}
func (self methodsFontFile) RemoveLanguageSupportOverride(language string) {
	self.Runtime.FontFile_remove_language_support_override(FontFile{self}, language)
}
func (self methodsFontFile) GetLanguageSupportOverrides() PackedStringArray {
	return self.Runtime.FontFile_get_language_support_overrides(FontFile{self})
}
func (self methodsFontFile) SetScriptSupportOverride(script string, supported bool) {
	self.Runtime.FontFile_set_script_support_override(FontFile{self}, script, supported)
}
func (self methodsFontFile) GetScriptSupportOverride(script string) bool {
	return self.Runtime.FontFile_get_script_support_override(FontFile{self}, script)
}
func (self methodsFontFile) RemoveScriptSupportOverride(script string) {
	self.Runtime.FontFile_remove_script_support_override(FontFile{self}, script)
}
func (self methodsFontFile) GetScriptSupportOverrides() PackedStringArray {
	return self.Runtime.FontFile_get_script_support_overrides(FontFile{self})
}
func (self methodsFontFile) SetOpentypeFeatureOverrides(overrides Dictionary) {
	self.Runtime.FontFile_set_opentype_feature_overrides(FontFile{self}, overrides)
}
func (self methodsFontFile) GetOpentypeFeatureOverrides() Dictionary {
	return self.Runtime.FontFile_get_opentype_feature_overrides(FontFile{self})
}
func (self methodsFontFile) GetGlyphIndex(size int64, char int64, variation_selector int64) int64 {
	return self.Runtime.FontFile_get_glyph_index(FontFile{self}, size, char, variation_selector)
}
func (self methodsFontFile) GetCharFromGlyphIndex(size int64, glyph_index int64) int64 {
	return self.Runtime.FontFile_get_char_from_glyph_index(FontFile{self}, size, glyph_index)
}

type methodsFontVariation struct {
	_ [0]*methodsFontVariation
	class
}

func (self FontVariation) Font() Font { var parent Font; parent.class = self.class; return parent }
func (self methodsFontVariation) SetBaseFont(font Font) {
	self.Runtime.FontVariation_set_base_font(FontVariation{self}, font)
}
func (self methodsFontVariation) GetBaseFont() Font {
	return self.Runtime.FontVariation_get_base_font(FontVariation{self})
}
func (self methodsFontVariation) SetVariationOpentype(coords Dictionary) {
	self.Runtime.FontVariation_set_variation_opentype(FontVariation{self}, coords)
}
func (self methodsFontVariation) GetVariationOpentype() Dictionary {
	return self.Runtime.FontVariation_get_variation_opentype(FontVariation{self})
}
func (self methodsFontVariation) SetVariationEmbolden(strength Float) {
	self.Runtime.FontVariation_set_variation_embolden(FontVariation{self}, strength)
}
func (self methodsFontVariation) GetVariationEmbolden() Float {
	return self.Runtime.FontVariation_get_variation_embolden(FontVariation{self})
}
func (self methodsFontVariation) SetVariationFaceIndex(face_index int64) {
	self.Runtime.FontVariation_set_variation_face_index(FontVariation{self}, face_index)
}
func (self methodsFontVariation) GetVariationFaceIndex() int64 {
	return self.Runtime.FontVariation_get_variation_face_index(FontVariation{self})
}
func (self methodsFontVariation) SetVariationTransform(transform Transform2D) {
	self.Runtime.FontVariation_set_variation_transform(FontVariation{self}, transform)
}
func (self methodsFontVariation) GetVariationTransform() Transform2D {
	return self.Runtime.FontVariation_get_variation_transform(FontVariation{self})
}
func (self methodsFontVariation) SetOpentypeFeatures(features Dictionary) {
	self.Runtime.FontVariation_set_opentype_features(FontVariation{self}, features)
}
func (self methodsFontVariation) SetSpacing(spacing TextServerSpacingType, value int64) {
	self.Runtime.FontVariation_set_spacing(FontVariation{self}, spacing, value)
}

type methodsGDExtension struct {
	_ [0]*methodsGDExtension
	class
}

func (self GDExtension) Resource() Resource {
	var parent Resource
	parent.class = self.class
	return parent
}
func (self methodsGDExtension) OpenLibrary(path string, entry_symbol string) int64 {
	return self.Runtime.GDExtension_open_library(GDExtension{self}, path, entry_symbol)
}
func (self methodsGDExtension) CloseLibrary() {
	self.Runtime.GDExtension_close_library(GDExtension{self})
}
func (self methodsGDExtension) IsLibraryOpen() bool {
	return self.Runtime.GDExtension_is_library_open(GDExtension{self})
}
func (self methodsGDExtension) GetMinimumLibraryInitializationLevel() ExtensionInitializationLevel {
	return self.Runtime.GDExtension_get_minimum_library_initialization_level(GDExtension{self})
}
func (self methodsGDExtension) InitializeLibrary(level ExtensionInitializationLevel) {
	self.Runtime.GDExtension_initialize_library(GDExtension{self}, level)
}

type methodsGDExtensionManager struct {
	_ [0]*methodsGDExtensionManager
	class
}

func (self GDExtensionManager) Object() Object {
	var parent Object
	parent.class = self.class
	return parent
}
func (self methodsGDExtensionManager) LoadExtension(path string) ExtensionManagerLoadStatus {
	return self.Runtime.GDExtensionManager_load_extension(GDExtensionManager{self}, path)
}
func (self methodsGDExtensionManager) ReloadExtension(path string) ExtensionManagerLoadStatus {
	return self.Runtime.GDExtensionManager_reload_extension(GDExtensionManager{self}, path)
}
func (self methodsGDExtensionManager) UnloadExtension(path string) ExtensionManagerLoadStatus {
	return self.Runtime.GDExtensionManager_unload_extension(GDExtensionManager{self}, path)
}
func (self methodsGDExtensionManager) IsExtensionLoaded(path string) bool {
	return self.Runtime.GDExtensionManager_is_extension_loaded(GDExtensionManager{self}, path)
}
func (self methodsGDExtensionManager) GetLoadedExtensions() PackedStringArray {
	return self.Runtime.GDExtensionManager_get_loaded_extensions(GDExtensionManager{self})
}
func (self methodsGDExtensionManager) GetExtension(path string) GDExtension {
	return self.Runtime.GDExtensionManager_get_extension(GDExtensionManager{self}, path)
}

type methodsGDScript struct {
	_ [0]*methodsGDScript
	class
}

func (self GDScript) Script() Script { var parent Script; parent.class = self.class; return parent }
func (self methodsGDScript) New() any {
	return self.Runtime.GDScript_new(GDScript{self})
}

type methodsGLTFAccessor struct {
	_ [0]*methodsGLTFAccessor
	class
}

func (self GLTFAccessor) Resource() Resource {
	var parent Resource
	parent.class = self.class
	return parent
}
func (self methodsGLTFAccessor) GetBufferView() int64 {
	return self.Runtime.GLTFAccessor_get_buffer_view(GLTFAccessor{self})
}
func (self methodsGLTFAccessor) SetBufferView(buffer_view int64) {
	self.Runtime.GLTFAccessor_set_buffer_view(GLTFAccessor{self}, buffer_view)
}
func (self methodsGLTFAccessor) GetByteOffset() int64 {
	return self.Runtime.GLTFAccessor_get_byte_offset(GLTFAccessor{self})
}
func (self methodsGLTFAccessor) SetByteOffset(byte_offset int64) {
	self.Runtime.GLTFAccessor_set_byte_offset(GLTFAccessor{self}, byte_offset)
}
func (self methodsGLTFAccessor) GetComponentType() int64 {
	return self.Runtime.GLTFAccessor_get_component_type(GLTFAccessor{self})
}
func (self methodsGLTFAccessor) SetComponentType(component_type int64) {
	self.Runtime.GLTFAccessor_set_component_type(GLTFAccessor{self}, component_type)
}
func (self methodsGLTFAccessor) GetNormalized() bool {
	return self.Runtime.GLTFAccessor_get_normalized(GLTFAccessor{self})
}
func (self methodsGLTFAccessor) SetNormalized(normalized bool) {
	self.Runtime.GLTFAccessor_set_normalized(GLTFAccessor{self}, normalized)
}
func (self methodsGLTFAccessor) GetCount() int64 {
	return self.Runtime.GLTFAccessor_get_count(GLTFAccessor{self})
}
func (self methodsGLTFAccessor) SetCount(count int64) {
	self.Runtime.GLTFAccessor_set_count(GLTFAccessor{self}, count)
}
func (self methodsGLTFAccessor) GetType() int64 {
	return self.Runtime.GLTFAccessor_get_type(GLTFAccessor{self})
}
func (self methodsGLTFAccessor) SetType(atype int64) {
	self.Runtime.GLTFAccessor_set_type(GLTFAccessor{self}, atype)
}
func (self methodsGLTFAccessor) GetMin() PackedFloat64Array {
	return self.Runtime.GLTFAccessor_get_min(GLTFAccessor{self})
}
func (self methodsGLTFAccessor) SetMin(min PackedFloat64Array) {
	self.Runtime.GLTFAccessor_set_min(GLTFAccessor{self}, min)
}
func (self methodsGLTFAccessor) GetMax() PackedFloat64Array {
	return self.Runtime.GLTFAccessor_get_max(GLTFAccessor{self})
}
func (self methodsGLTFAccessor) SetMax(max PackedFloat64Array) {
	self.Runtime.GLTFAccessor_set_max(GLTFAccessor{self}, max)
}
func (self methodsGLTFAccessor) GetSparseCount() int64 {
	return self.Runtime.GLTFAccessor_get_sparse_count(GLTFAccessor{self})
}
func (self methodsGLTFAccessor) SetSparseCount(sparse_count int64) {
	self.Runtime.GLTFAccessor_set_sparse_count(GLTFAccessor{self}, sparse_count)
}
func (self methodsGLTFAccessor) GetSparseIndicesBufferView() int64 {
	return self.Runtime.GLTFAccessor_get_sparse_indices_buffer_view(GLTFAccessor{self})
}
func (self methodsGLTFAccessor) SetSparseIndicesBufferView(sparse_indices_buffer_view int64) {
	self.Runtime.GLTFAccessor_set_sparse_indices_buffer_view(GLTFAccessor{self}, sparse_indices_buffer_view)
}
func (self methodsGLTFAccessor) GetSparseIndicesByteOffset() int64 {
	return self.Runtime.GLTFAccessor_get_sparse_indices_byte_offset(GLTFAccessor{self})
}
func (self methodsGLTFAccessor) SetSparseIndicesByteOffset(sparse_indices_byte_offset int64) {
	self.Runtime.GLTFAccessor_set_sparse_indices_byte_offset(GLTFAccessor{self}, sparse_indices_byte_offset)
}
func (self methodsGLTFAccessor) GetSparseIndicesComponentType() int64 {
	return self.Runtime.GLTFAccessor_get_sparse_indices_component_type(GLTFAccessor{self})
}
func (self methodsGLTFAccessor) SetSparseIndicesComponentType(sparse_indices_component_type int64) {
	self.Runtime.GLTFAccessor_set_sparse_indices_component_type(GLTFAccessor{self}, sparse_indices_component_type)
}
func (self methodsGLTFAccessor) GetSparseValuesBufferView() int64 {
	return self.Runtime.GLTFAccessor_get_sparse_values_buffer_view(GLTFAccessor{self})
}
func (self methodsGLTFAccessor) SetSparseValuesBufferView(sparse_values_buffer_view int64) {
	self.Runtime.GLTFAccessor_set_sparse_values_buffer_view(GLTFAccessor{self}, sparse_values_buffer_view)
}
func (self methodsGLTFAccessor) GetSparseValuesByteOffset() int64 {
	return self.Runtime.GLTFAccessor_get_sparse_values_byte_offset(GLTFAccessor{self})
}
func (self methodsGLTFAccessor) SetSparseValuesByteOffset(sparse_values_byte_offset int64) {
	self.Runtime.GLTFAccessor_set_sparse_values_byte_offset(GLTFAccessor{self}, sparse_values_byte_offset)
}

type methodsGLTFAnimation struct {
	_ [0]*methodsGLTFAnimation
	class
}

func (self GLTFAnimation) Resource() Resource {
	var parent Resource
	parent.class = self.class
	return parent
}
func (self methodsGLTFAnimation) GetLoop() bool {
	return self.Runtime.GLTFAnimation_get_loop(GLTFAnimation{self})
}
func (self methodsGLTFAnimation) SetLoop(loop bool) {
	self.Runtime.GLTFAnimation_set_loop(GLTFAnimation{self}, loop)
}

type methodsGLTFBufferView struct {
	_ [0]*methodsGLTFBufferView
	class
}

func (self GLTFBufferView) Resource() Resource {
	var parent Resource
	parent.class = self.class
	return parent
}
func (self methodsGLTFBufferView) GetBuffer() int64 {
	return self.Runtime.GLTFBufferView_get_buffer(GLTFBufferView{self})
}
func (self methodsGLTFBufferView) SetBuffer(buffer int64) {
	self.Runtime.GLTFBufferView_set_buffer(GLTFBufferView{self}, buffer)
}
func (self methodsGLTFBufferView) GetByteOffset() int64 {
	return self.Runtime.GLTFBufferView_get_byte_offset(GLTFBufferView{self})
}
func (self methodsGLTFBufferView) SetByteOffset(byte_offset int64) {
	self.Runtime.GLTFBufferView_set_byte_offset(GLTFBufferView{self}, byte_offset)
}
func (self methodsGLTFBufferView) GetByteLength() int64 {
	return self.Runtime.GLTFBufferView_get_byte_length(GLTFBufferView{self})
}
func (self methodsGLTFBufferView) SetByteLength(byte_length int64) {
	self.Runtime.GLTFBufferView_set_byte_length(GLTFBufferView{self}, byte_length)
}
func (self methodsGLTFBufferView) GetByteStride() int64 {
	return self.Runtime.GLTFBufferView_get_byte_stride(GLTFBufferView{self})
}
func (self methodsGLTFBufferView) SetByteStride(byte_stride int64) {
	self.Runtime.GLTFBufferView_set_byte_stride(GLTFBufferView{self}, byte_stride)
}
func (self methodsGLTFBufferView) GetIndices() bool {
	return self.Runtime.GLTFBufferView_get_indices(GLTFBufferView{self})
}
func (self methodsGLTFBufferView) SetIndices(indices bool) {
	self.Runtime.GLTFBufferView_set_indices(GLTFBufferView{self}, indices)
}

type methodsGLTFCamera struct {
	_ [0]*methodsGLTFCamera
	class
}

func (self GLTFCamera) Resource() Resource {
	var parent Resource
	parent.class = self.class
	return parent
}
func (self methodsGLTFCamera) FromNode(camera_node Camera3D) GLTFCamera {
	return self.Runtime.GLTFCamera_from_node(GLTFCamera{self}, camera_node)
}
func (self methodsGLTFCamera) ToNode() Camera3D {
	return self.Runtime.GLTFCamera_to_node(GLTFCamera{self})
}
func (self methodsGLTFCamera) FromDictionary(dictionary Dictionary) GLTFCamera {
	return self.Runtime.GLTFCamera_from_dictionary(GLTFCamera{self}, dictionary)
}
func (self methodsGLTFCamera) ToDictionary() Dictionary {
	return self.Runtime.GLTFCamera_to_dictionary(GLTFCamera{self})
}
func (self methodsGLTFCamera) GetPerspective() bool {
	return self.Runtime.GLTFCamera_get_perspective(GLTFCamera{self})
}
func (self methodsGLTFCamera) SetPerspective(perspective bool) {
	self.Runtime.GLTFCamera_set_perspective(GLTFCamera{self}, perspective)
}
func (self methodsGLTFCamera) GetFov() Float {
	return self.Runtime.GLTFCamera_get_fov(GLTFCamera{self})
}
func (self methodsGLTFCamera) SetFov(fov Float) {
	self.Runtime.GLTFCamera_set_fov(GLTFCamera{self}, fov)
}
func (self methodsGLTFCamera) GetSizeMag() Float {
	return self.Runtime.GLTFCamera_get_size_mag(GLTFCamera{self})
}
func (self methodsGLTFCamera) SetSizeMag(size_mag Float) {
	self.Runtime.GLTFCamera_set_size_mag(GLTFCamera{self}, size_mag)
}
func (self methodsGLTFCamera) GetDepthFar() Float {
	return self.Runtime.GLTFCamera_get_depth_far(GLTFCamera{self})
}
func (self methodsGLTFCamera) SetDepthFar(zdepth_far Float) {
	self.Runtime.GLTFCamera_set_depth_far(GLTFCamera{self}, zdepth_far)
}
func (self methodsGLTFCamera) GetDepthNear() Float {
	return self.Runtime.GLTFCamera_get_depth_near(GLTFCamera{self})
}
func (self methodsGLTFCamera) SetDepthNear(zdepth_near Float) {
	self.Runtime.GLTFCamera_set_depth_near(GLTFCamera{self}, zdepth_near)
}

type methodsGLTFDocument struct {
	_ [0]*methodsGLTFDocument
	class
}

func (self GLTFDocument) Resource() Resource {
	var parent Resource
	parent.class = self.class
	return parent
}
func (self methodsGLTFDocument) AppendFromFile(path string, state GLTFState, flags int64, base_path string) int64 {
	return self.Runtime.GLTFDocument_append_from_file(GLTFDocument{self}, path, state, flags, base_path)
}
func (self methodsGLTFDocument) AppendFromBuffer(bytes PackedByteArray, base_path string, state GLTFState, flags int64) int64 {
	return self.Runtime.GLTFDocument_append_from_buffer(GLTFDocument{self}, bytes, base_path, state, flags)
}
func (self methodsGLTFDocument) AppendFromScene(node Node, state GLTFState, flags int64) int64 {
	return self.Runtime.GLTFDocument_append_from_scene(GLTFDocument{self}, node, state, flags)
}
func (self methodsGLTFDocument) GenerateScene(state GLTFState, bake_fps Float, trimming bool, remove_immutable_tracks bool) Node {
	return self.Runtime.GLTFDocument_generate_scene(GLTFDocument{self}, state, bake_fps, trimming, remove_immutable_tracks)
}
func (self methodsGLTFDocument) GenerateBuffer(state GLTFState) PackedByteArray {
	return self.Runtime.GLTFDocument_generate_buffer(GLTFDocument{self}, state)
}
func (self methodsGLTFDocument) WriteToFilesystem(state GLTFState, path string) int64 {
	return self.Runtime.GLTFDocument_write_to_filesystem(GLTFDocument{self}, state, path)
}
func (self methodsGLTFDocument) SetImageFormat(image_format string) {
	self.Runtime.GLTFDocument_set_image_format(GLTFDocument{self}, image_format)
}
func (self methodsGLTFDocument) GetImageFormat() string {
	return self.Runtime.GLTFDocument_get_image_format(GLTFDocument{self})
}
func (self methodsGLTFDocument) SetLossyQuality(lossy_quality Float) {
	self.Runtime.GLTFDocument_set_lossy_quality(GLTFDocument{self}, lossy_quality)
}
func (self methodsGLTFDocument) GetLossyQuality() Float {
	return self.Runtime.GLTFDocument_get_lossy_quality(GLTFDocument{self})
}
func (self methodsGLTFDocument) SetRootNodeMode(root_node_mode GLTFDocumentRootNodeMode) {
	self.Runtime.GLTFDocument_set_root_node_mode(GLTFDocument{self}, root_node_mode)
}
func (self methodsGLTFDocument) GetRootNodeMode() GLTFDocumentRootNodeMode {
	return self.Runtime.GLTFDocument_get_root_node_mode(GLTFDocument{self})
}
func (self methodsGLTFDocument) RegisterGltfDocumentExtension(extension GLTFDocumentExtension, first_priority bool) {
	self.Runtime.GLTFDocument_register_gltf_document_extension(GLTFDocument{self}, extension, first_priority)
}
func (self methodsGLTFDocument) UnregisterGltfDocumentExtension(extension GLTFDocumentExtension) {
	self.Runtime.GLTFDocument_unregister_gltf_document_extension(GLTFDocument{self}, extension)
}

type methodsGLTFDocumentExtension struct {
	_ [0]*methodsGLTFDocumentExtension
	class
}

func (self GLTFDocumentExtension) Resource() Resource {
	var parent Resource
	parent.class = self.class
	return parent
}

type methodsGLTFDocumentExtensionConvertImporterMesh struct {
	_ [0]*methodsGLTFDocumentExtensionConvertImporterMesh
	class
}

func (self GLTFDocumentExtensionConvertImporterMesh) GLTFDocumentExtension() GLTFDocumentExtension {
	var parent GLTFDocumentExtension
	parent.class = self.class
	return parent
}

type methodsGLTFLight struct {
	_ [0]*methodsGLTFLight
	class
}

func (self GLTFLight) Resource() Resource {
	var parent Resource
	parent.class = self.class
	return parent
}
func (self methodsGLTFLight) FromNode(light_node Light3D) GLTFLight {
	return self.Runtime.GLTFLight_from_node(GLTFLight{self}, light_node)
}
func (self methodsGLTFLight) ToNode() Light3D {
	return self.Runtime.GLTFLight_to_node(GLTFLight{self})
}
func (self methodsGLTFLight) FromDictionary(dictionary Dictionary) GLTFLight {
	return self.Runtime.GLTFLight_from_dictionary(GLTFLight{self}, dictionary)
}
func (self methodsGLTFLight) ToDictionary() Dictionary {
	return self.Runtime.GLTFLight_to_dictionary(GLTFLight{self})
}
func (self methodsGLTFLight) GetColor() Color {
	return self.Runtime.GLTFLight_get_color(GLTFLight{self})
}
func (self methodsGLTFLight) SetColor(color Color) {
	self.Runtime.GLTFLight_set_color(GLTFLight{self}, color)
}
func (self methodsGLTFLight) GetIntensity() Float {
	return self.Runtime.GLTFLight_get_intensity(GLTFLight{self})
}
func (self methodsGLTFLight) SetIntensity(intensity Float) {
	self.Runtime.GLTFLight_set_intensity(GLTFLight{self}, intensity)
}
func (self methodsGLTFLight) GetLightType() string {
	return self.Runtime.GLTFLight_get_light_type(GLTFLight{self})
}
func (self methodsGLTFLight) SetLightType(light_type string) {
	self.Runtime.GLTFLight_set_light_type(GLTFLight{self}, light_type)
}
func (self methodsGLTFLight) GetRange() Float {
	return self.Runtime.GLTFLight_get_range(GLTFLight{self})
}
func (self methodsGLTFLight) SetRange(arange Float) {
	self.Runtime.GLTFLight_set_range(GLTFLight{self}, arange)
}
func (self methodsGLTFLight) GetInnerConeAngle() Float {
	return self.Runtime.GLTFLight_get_inner_cone_angle(GLTFLight{self})
}
func (self methodsGLTFLight) SetInnerConeAngle(inner_cone_angle Float) {
	self.Runtime.GLTFLight_set_inner_cone_angle(GLTFLight{self}, inner_cone_angle)
}
func (self methodsGLTFLight) GetOuterConeAngle() Float {
	return self.Runtime.GLTFLight_get_outer_cone_angle(GLTFLight{self})
}
func (self methodsGLTFLight) SetOuterConeAngle(outer_cone_angle Float) {
	self.Runtime.GLTFLight_set_outer_cone_angle(GLTFLight{self}, outer_cone_angle)
}

type methodsGLTFMesh struct {
	_ [0]*methodsGLTFMesh
	class
}

func (self GLTFMesh) Resource() Resource {
	var parent Resource
	parent.class = self.class
	return parent
}
func (self methodsGLTFMesh) GetMesh() ImporterMesh {
	return self.Runtime.GLTFMesh_get_mesh(GLTFMesh{self})
}
func (self methodsGLTFMesh) SetMesh(mesh ImporterMesh) {
	self.Runtime.GLTFMesh_set_mesh(GLTFMesh{self}, mesh)
}
func (self methodsGLTFMesh) GetBlendWeights() PackedFloat32Array {
	return self.Runtime.GLTFMesh_get_blend_weights(GLTFMesh{self})
}
func (self methodsGLTFMesh) SetBlendWeights(blend_weights PackedFloat32Array) {
	self.Runtime.GLTFMesh_set_blend_weights(GLTFMesh{self}, blend_weights)
}
func (self methodsGLTFMesh) GetInstanceMaterials() ArrayOf[Material] {
	return self.Runtime.GLTFMesh_get_instance_materials(GLTFMesh{self})
}
func (self methodsGLTFMesh) SetInstanceMaterials(instance_materials ArrayOf[Material]) {
	self.Runtime.GLTFMesh_set_instance_materials(GLTFMesh{self}, instance_materials)
}

type methodsGLTFNode struct {
	_ [0]*methodsGLTFNode
	class
}

func (self GLTFNode) Resource() Resource {
	var parent Resource
	parent.class = self.class
	return parent
}
func (self methodsGLTFNode) GetParent() int64 {
	return self.Runtime.GLTFNode_get_parent(GLTFNode{self})
}
func (self methodsGLTFNode) SetParent(parent int64) {
	self.Runtime.GLTFNode_set_parent(GLTFNode{self}, parent)
}
func (self methodsGLTFNode) GetHeight() int64 {
	return self.Runtime.GLTFNode_get_height(GLTFNode{self})
}
func (self methodsGLTFNode) SetHeight(height int64) {
	self.Runtime.GLTFNode_set_height(GLTFNode{self}, height)
}
func (self methodsGLTFNode) GetXform() Transform3D {
	return self.Runtime.GLTFNode_get_xform(GLTFNode{self})
}
func (self methodsGLTFNode) SetXform(xform Transform3D) {
	self.Runtime.GLTFNode_set_xform(GLTFNode{self}, xform)
}
func (self methodsGLTFNode) GetMesh() int64 {
	return self.Runtime.GLTFNode_get_mesh(GLTFNode{self})
}
func (self methodsGLTFNode) SetMesh(mesh int64) {
	self.Runtime.GLTFNode_set_mesh(GLTFNode{self}, mesh)
}
func (self methodsGLTFNode) GetCamera() int64 {
	return self.Runtime.GLTFNode_get_camera(GLTFNode{self})
}
func (self methodsGLTFNode) SetCamera(camera int64) {
	self.Runtime.GLTFNode_set_camera(GLTFNode{self}, camera)
}
func (self methodsGLTFNode) GetSkin() int64 {
	return self.Runtime.GLTFNode_get_skin(GLTFNode{self})
}
func (self methodsGLTFNode) SetSkin(skin int64) {
	self.Runtime.GLTFNode_set_skin(GLTFNode{self}, skin)
}
func (self methodsGLTFNode) GetSkeleton() int64 {
	return self.Runtime.GLTFNode_get_skeleton(GLTFNode{self})
}
func (self methodsGLTFNode) SetSkeleton(skeleton int64) {
	self.Runtime.GLTFNode_set_skeleton(GLTFNode{self}, skeleton)
}
func (self methodsGLTFNode) GetPosition() Vector3 {
	return self.Runtime.GLTFNode_get_position(GLTFNode{self})
}
func (self methodsGLTFNode) SetPosition(position Vector3) {
	self.Runtime.GLTFNode_set_position(GLTFNode{self}, position)
}
func (self methodsGLTFNode) GetRotation() Quaternion {
	return self.Runtime.GLTFNode_get_rotation(GLTFNode{self})
}
func (self methodsGLTFNode) SetRotation(rotation Quaternion) {
	self.Runtime.GLTFNode_set_rotation(GLTFNode{self}, rotation)
}
func (self methodsGLTFNode) GetScale() Vector3 {
	return self.Runtime.GLTFNode_get_scale(GLTFNode{self})
}
func (self methodsGLTFNode) SetScale(scale Vector3) {
	self.Runtime.GLTFNode_set_scale(GLTFNode{self}, scale)
}
func (self methodsGLTFNode) GetChildren() PackedInt32Array {
	return self.Runtime.GLTFNode_get_children(GLTFNode{self})
}
func (self methodsGLTFNode) SetChildren(children PackedInt32Array) {
	self.Runtime.GLTFNode_set_children(GLTFNode{self}, children)
}
func (self methodsGLTFNode) GetLight() int64 {
	return self.Runtime.GLTFNode_get_light(GLTFNode{self})
}
func (self methodsGLTFNode) SetLight(light int64) {
	self.Runtime.GLTFNode_set_light(GLTFNode{self}, light)
}
func (self methodsGLTFNode) GetAdditionalData(extension_name string) any {
	return self.Runtime.GLTFNode_get_additional_data(GLTFNode{self}, extension_name)
}
func (self methodsGLTFNode) SetAdditionalData(extension_name string, additional_data any) {
	self.Runtime.GLTFNode_set_additional_data(GLTFNode{self}, extension_name, additional_data)
}

type methodsGLTFPhysicsBody struct {
	_ [0]*methodsGLTFPhysicsBody
	class
}

func (self GLTFPhysicsBody) Resource() Resource {
	var parent Resource
	parent.class = self.class
	return parent
}
func (self methodsGLTFPhysicsBody) FromNode(body_node CollisionObject3D) GLTFPhysicsBody {
	return self.Runtime.GLTFPhysicsBody_from_node(GLTFPhysicsBody{self}, body_node)
}
func (self methodsGLTFPhysicsBody) ToNode() CollisionObject3D {
	return self.Runtime.GLTFPhysicsBody_to_node(GLTFPhysicsBody{self})
}
func (self methodsGLTFPhysicsBody) FromDictionary(dictionary Dictionary) GLTFPhysicsBody {
	return self.Runtime.GLTFPhysicsBody_from_dictionary(GLTFPhysicsBody{self}, dictionary)
}
func (self methodsGLTFPhysicsBody) ToDictionary() Dictionary {
	return self.Runtime.GLTFPhysicsBody_to_dictionary(GLTFPhysicsBody{self})
}
func (self methodsGLTFPhysicsBody) GetBodyType() string {
	return self.Runtime.GLTFPhysicsBody_get_body_type(GLTFPhysicsBody{self})
}
func (self methodsGLTFPhysicsBody) SetBodyType(body_type string) {
	self.Runtime.GLTFPhysicsBody_set_body_type(GLTFPhysicsBody{self}, body_type)
}
func (self methodsGLTFPhysicsBody) GetMass() Float {
	return self.Runtime.GLTFPhysicsBody_get_mass(GLTFPhysicsBody{self})
}
func (self methodsGLTFPhysicsBody) SetMass(mass Float) {
	self.Runtime.GLTFPhysicsBody_set_mass(GLTFPhysicsBody{self}, mass)
}
func (self methodsGLTFPhysicsBody) GetLinearVelocity() Vector3 {
	return self.Runtime.GLTFPhysicsBody_get_linear_velocity(GLTFPhysicsBody{self})
}
func (self methodsGLTFPhysicsBody) SetLinearVelocity(linear_velocity Vector3) {
	self.Runtime.GLTFPhysicsBody_set_linear_velocity(GLTFPhysicsBody{self}, linear_velocity)
}
func (self methodsGLTFPhysicsBody) GetAngularVelocity() Vector3 {
	return self.Runtime.GLTFPhysicsBody_get_angular_velocity(GLTFPhysicsBody{self})
}
func (self methodsGLTFPhysicsBody) SetAngularVelocity(angular_velocity Vector3) {
	self.Runtime.GLTFPhysicsBody_set_angular_velocity(GLTFPhysicsBody{self}, angular_velocity)
}
func (self methodsGLTFPhysicsBody) GetCenterOfMass() Vector3 {
	return self.Runtime.GLTFPhysicsBody_get_center_of_mass(GLTFPhysicsBody{self})
}
func (self methodsGLTFPhysicsBody) SetCenterOfMass(center_of_mass Vector3) {
	self.Runtime.GLTFPhysicsBody_set_center_of_mass(GLTFPhysicsBody{self}, center_of_mass)
}
func (self methodsGLTFPhysicsBody) GetInertiaTensor() Basis {
	return self.Runtime.GLTFPhysicsBody_get_inertia_tensor(GLTFPhysicsBody{self})
}
func (self methodsGLTFPhysicsBody) SetInertiaTensor(inertia_tensor Basis) {
	self.Runtime.GLTFPhysicsBody_set_inertia_tensor(GLTFPhysicsBody{self}, inertia_tensor)
}

type methodsGLTFPhysicsShape struct {
	_ [0]*methodsGLTFPhysicsShape
	class
}

func (self GLTFPhysicsShape) Resource() Resource {
	var parent Resource
	parent.class = self.class
	return parent
}
func (self methodsGLTFPhysicsShape) FromNode(shape_node CollisionShape3D) GLTFPhysicsShape {
	return self.Runtime.GLTFPhysicsShape_from_node(GLTFPhysicsShape{self}, shape_node)
}
func (self methodsGLTFPhysicsShape) ToNode(cache_shapes bool) CollisionShape3D {
	return self.Runtime.GLTFPhysicsShape_to_node(GLTFPhysicsShape{self}, cache_shapes)
}
func (self methodsGLTFPhysicsShape) FromDictionary(dictionary Dictionary) GLTFPhysicsShape {
	return self.Runtime.GLTFPhysicsShape_from_dictionary(GLTFPhysicsShape{self}, dictionary)
}
func (self methodsGLTFPhysicsShape) ToDictionary() Dictionary {
	return self.Runtime.GLTFPhysicsShape_to_dictionary(GLTFPhysicsShape{self})
}
func (self methodsGLTFPhysicsShape) GetShapeType() string {
	return self.Runtime.GLTFPhysicsShape_get_shape_type(GLTFPhysicsShape{self})
}
func (self methodsGLTFPhysicsShape) SetShapeType(shape_type string) {
	self.Runtime.GLTFPhysicsShape_set_shape_type(GLTFPhysicsShape{self}, shape_type)
}
func (self methodsGLTFPhysicsShape) GetSize() Vector3 {
	return self.Runtime.GLTFPhysicsShape_get_size(GLTFPhysicsShape{self})
}
func (self methodsGLTFPhysicsShape) SetSize(size Vector3) {
	self.Runtime.GLTFPhysicsShape_set_size(GLTFPhysicsShape{self}, size)
}
func (self methodsGLTFPhysicsShape) GetRadius() Float {
	return self.Runtime.GLTFPhysicsShape_get_radius(GLTFPhysicsShape{self})
}
func (self methodsGLTFPhysicsShape) SetRadius(radius Float) {
	self.Runtime.GLTFPhysicsShape_set_radius(GLTFPhysicsShape{self}, radius)
}
func (self methodsGLTFPhysicsShape) GetHeight() Float {
	return self.Runtime.GLTFPhysicsShape_get_height(GLTFPhysicsShape{self})
}
func (self methodsGLTFPhysicsShape) SetHeight(height Float) {
	self.Runtime.GLTFPhysicsShape_set_height(GLTFPhysicsShape{self}, height)
}
func (self methodsGLTFPhysicsShape) GetIsTrigger() bool {
	return self.Runtime.GLTFPhysicsShape_get_is_trigger(GLTFPhysicsShape{self})
}
func (self methodsGLTFPhysicsShape) SetIsTrigger(is_trigger bool) {
	self.Runtime.GLTFPhysicsShape_set_is_trigger(GLTFPhysicsShape{self}, is_trigger)
}
func (self methodsGLTFPhysicsShape) GetMeshIndex() int64 {
	return self.Runtime.GLTFPhysicsShape_get_mesh_index(GLTFPhysicsShape{self})
}
func (self methodsGLTFPhysicsShape) SetMeshIndex(mesh_index int64) {
	self.Runtime.GLTFPhysicsShape_set_mesh_index(GLTFPhysicsShape{self}, mesh_index)
}
func (self methodsGLTFPhysicsShape) GetImporterMesh() ImporterMesh {
	return self.Runtime.GLTFPhysicsShape_get_importer_mesh(GLTFPhysicsShape{self})
}
func (self methodsGLTFPhysicsShape) SetImporterMesh(importer_mesh ImporterMesh) {
	self.Runtime.GLTFPhysicsShape_set_importer_mesh(GLTFPhysicsShape{self}, importer_mesh)
}

type methodsGLTFSkeleton struct {
	_ [0]*methodsGLTFSkeleton
	class
}

func (self GLTFSkeleton) Resource() Resource {
	var parent Resource
	parent.class = self.class
	return parent
}
func (self methodsGLTFSkeleton) GetJoints() PackedInt32Array {
	return self.Runtime.GLTFSkeleton_get_joints(GLTFSkeleton{self})
}
func (self methodsGLTFSkeleton) SetJoints(joints PackedInt32Array) {
	self.Runtime.GLTFSkeleton_set_joints(GLTFSkeleton{self}, joints)
}
func (self methodsGLTFSkeleton) GetRoots() PackedInt32Array {
	return self.Runtime.GLTFSkeleton_get_roots(GLTFSkeleton{self})
}
func (self methodsGLTFSkeleton) SetRoots(roots PackedInt32Array) {
	self.Runtime.GLTFSkeleton_set_roots(GLTFSkeleton{self}, roots)
}
func (self methodsGLTFSkeleton) GetGodotSkeleton() Skeleton3D {
	return self.Runtime.GLTFSkeleton_get_godot_skeleton(GLTFSkeleton{self})
}
func (self methodsGLTFSkeleton) GetUniqueNames() ArrayOf[string] {
	return self.Runtime.GLTFSkeleton_get_unique_names(GLTFSkeleton{self})
}
func (self methodsGLTFSkeleton) SetUniqueNames(unique_names ArrayOf[string]) {
	self.Runtime.GLTFSkeleton_set_unique_names(GLTFSkeleton{self}, unique_names)
}
func (self methodsGLTFSkeleton) GetGodotBoneNode() Dictionary {
	return self.Runtime.GLTFSkeleton_get_godot_bone_node(GLTFSkeleton{self})
}
func (self methodsGLTFSkeleton) SetGodotBoneNode(godot_bone_node Dictionary) {
	self.Runtime.GLTFSkeleton_set_godot_bone_node(GLTFSkeleton{self}, godot_bone_node)
}
func (self methodsGLTFSkeleton) GetBoneAttachmentCount() int64 {
	return self.Runtime.GLTFSkeleton_get_bone_attachment_count(GLTFSkeleton{self})
}
func (self methodsGLTFSkeleton) GetBoneAttachment(idx int64) BoneAttachment3D {
	return self.Runtime.GLTFSkeleton_get_bone_attachment(GLTFSkeleton{self}, idx)
}

type methodsGLTFSkin struct {
	_ [0]*methodsGLTFSkin
	class
}

func (self GLTFSkin) Resource() Resource {
	var parent Resource
	parent.class = self.class
	return parent
}
func (self methodsGLTFSkin) GetSkinRoot() int64 {
	return self.Runtime.GLTFSkin_get_skin_root(GLTFSkin{self})
}
func (self methodsGLTFSkin) SetSkinRoot(skin_root int64) {
	self.Runtime.GLTFSkin_set_skin_root(GLTFSkin{self}, skin_root)
}
func (self methodsGLTFSkin) GetJointsOriginal() PackedInt32Array {
	return self.Runtime.GLTFSkin_get_joints_original(GLTFSkin{self})
}
func (self methodsGLTFSkin) SetJointsOriginal(joints_original PackedInt32Array) {
	self.Runtime.GLTFSkin_set_joints_original(GLTFSkin{self}, joints_original)
}
func (self methodsGLTFSkin) GetInverseBinds() ArrayOf[Transform3D] {
	return self.Runtime.GLTFSkin_get_inverse_binds(GLTFSkin{self})
}
func (self methodsGLTFSkin) SetInverseBinds(inverse_binds ArrayOf[Transform3D]) {
	self.Runtime.GLTFSkin_set_inverse_binds(GLTFSkin{self}, inverse_binds)
}
func (self methodsGLTFSkin) GetJoints() PackedInt32Array {
	return self.Runtime.GLTFSkin_get_joints(GLTFSkin{self})
}
func (self methodsGLTFSkin) SetJoints(joints PackedInt32Array) {
	self.Runtime.GLTFSkin_set_joints(GLTFSkin{self}, joints)
}
func (self methodsGLTFSkin) GetNonJoints() PackedInt32Array {
	return self.Runtime.GLTFSkin_get_non_joints(GLTFSkin{self})
}
func (self methodsGLTFSkin) SetNonJoints(non_joints PackedInt32Array) {
	self.Runtime.GLTFSkin_set_non_joints(GLTFSkin{self}, non_joints)
}
func (self methodsGLTFSkin) GetRoots() PackedInt32Array {
	return self.Runtime.GLTFSkin_get_roots(GLTFSkin{self})
}
func (self methodsGLTFSkin) SetRoots(roots PackedInt32Array) {
	self.Runtime.GLTFSkin_set_roots(GLTFSkin{self}, roots)
}
func (self methodsGLTFSkin) GetSkeleton() int64 {
	return self.Runtime.GLTFSkin_get_skeleton(GLTFSkin{self})
}
func (self methodsGLTFSkin) SetSkeleton(skeleton int64) {
	self.Runtime.GLTFSkin_set_skeleton(GLTFSkin{self}, skeleton)
}
func (self methodsGLTFSkin) GetJointIToBoneI() Dictionary {
	return self.Runtime.GLTFSkin_get_joint_i_to_bone_i(GLTFSkin{self})
}
func (self methodsGLTFSkin) SetJointIToBoneI(joint_i_to_bone_i Dictionary) {
	self.Runtime.GLTFSkin_set_joint_i_to_bone_i(GLTFSkin{self}, joint_i_to_bone_i)
}
func (self methodsGLTFSkin) GetJointIToName() Dictionary {
	return self.Runtime.GLTFSkin_get_joint_i_to_name(GLTFSkin{self})
}
func (self methodsGLTFSkin) SetJointIToName(joint_i_to_name Dictionary) {
	self.Runtime.GLTFSkin_set_joint_i_to_name(GLTFSkin{self}, joint_i_to_name)
}
func (self methodsGLTFSkin) GetGodotSkin() Skin {
	return self.Runtime.GLTFSkin_get_godot_skin(GLTFSkin{self})
}
func (self methodsGLTFSkin) SetGodotSkin(godot_skin Skin) {
	self.Runtime.GLTFSkin_set_godot_skin(GLTFSkin{self}, godot_skin)
}

type methodsGLTFSpecGloss struct {
	_ [0]*methodsGLTFSpecGloss
	class
}

func (self GLTFSpecGloss) Resource() Resource {
	var parent Resource
	parent.class = self.class
	return parent
}
func (self methodsGLTFSpecGloss) GetDiffuseImg() Image {
	return self.Runtime.GLTFSpecGloss_get_diffuse_img(GLTFSpecGloss{self})
}
func (self methodsGLTFSpecGloss) SetDiffuseImg(diffuse_img Image) {
	self.Runtime.GLTFSpecGloss_set_diffuse_img(GLTFSpecGloss{self}, diffuse_img)
}
func (self methodsGLTFSpecGloss) GetDiffuseFactor() Color {
	return self.Runtime.GLTFSpecGloss_get_diffuse_factor(GLTFSpecGloss{self})
}
func (self methodsGLTFSpecGloss) SetDiffuseFactor(diffuse_factor Color) {
	self.Runtime.GLTFSpecGloss_set_diffuse_factor(GLTFSpecGloss{self}, diffuse_factor)
}
func (self methodsGLTFSpecGloss) GetGlossFactor() Float {
	return self.Runtime.GLTFSpecGloss_get_gloss_factor(GLTFSpecGloss{self})
}
func (self methodsGLTFSpecGloss) SetGlossFactor(gloss_factor Float) {
	self.Runtime.GLTFSpecGloss_set_gloss_factor(GLTFSpecGloss{self}, gloss_factor)
}
func (self methodsGLTFSpecGloss) GetSpecularFactor() Color {
	return self.Runtime.GLTFSpecGloss_get_specular_factor(GLTFSpecGloss{self})
}
func (self methodsGLTFSpecGloss) SetSpecularFactor(specular_factor Color) {
	self.Runtime.GLTFSpecGloss_set_specular_factor(GLTFSpecGloss{self}, specular_factor)
}
func (self methodsGLTFSpecGloss) GetSpecGlossImg() Image {
	return self.Runtime.GLTFSpecGloss_get_spec_gloss_img(GLTFSpecGloss{self})
}
func (self methodsGLTFSpecGloss) SetSpecGlossImg(spec_gloss_img Image) {
	self.Runtime.GLTFSpecGloss_set_spec_gloss_img(GLTFSpecGloss{self}, spec_gloss_img)
}

type methodsGLTFState struct {
	_ [0]*methodsGLTFState
	class
}

func (self GLTFState) Resource() Resource {
	var parent Resource
	parent.class = self.class
	return parent
}
func (self methodsGLTFState) AddUsedExtension(extension_name string, required bool) {
	self.Runtime.GLTFState_add_used_extension(GLTFState{self}, extension_name, required)
}
func (self methodsGLTFState) GetJson() Dictionary {
	return self.Runtime.GLTFState_get_json(GLTFState{self})
}
func (self methodsGLTFState) SetJson(json Dictionary) {
	self.Runtime.GLTFState_set_json(GLTFState{self}, json)
}
func (self methodsGLTFState) GetMajorVersion() int64 {
	return self.Runtime.GLTFState_get_major_version(GLTFState{self})
}
func (self methodsGLTFState) SetMajorVersion(major_version int64) {
	self.Runtime.GLTFState_set_major_version(GLTFState{self}, major_version)
}
func (self methodsGLTFState) GetMinorVersion() int64 {
	return self.Runtime.GLTFState_get_minor_version(GLTFState{self})
}
func (self methodsGLTFState) SetMinorVersion(minor_version int64) {
	self.Runtime.GLTFState_set_minor_version(GLTFState{self}, minor_version)
}
func (self methodsGLTFState) GetCopyright() string {
	return self.Runtime.GLTFState_get_copyright(GLTFState{self})
}
func (self methodsGLTFState) SetCopyright(copyright string) {
	self.Runtime.GLTFState_set_copyright(GLTFState{self}, copyright)
}
func (self methodsGLTFState) GetGlbData() PackedByteArray {
	return self.Runtime.GLTFState_get_glb_data(GLTFState{self})
}
func (self methodsGLTFState) SetGlbData(glb_data PackedByteArray) {
	self.Runtime.GLTFState_set_glb_data(GLTFState{self}, glb_data)
}
func (self methodsGLTFState) GetUseNamedSkinBinds() bool {
	return self.Runtime.GLTFState_get_use_named_skin_binds(GLTFState{self})
}
func (self methodsGLTFState) SetUseNamedSkinBinds(use_named_skin_binds bool) {
	self.Runtime.GLTFState_set_use_named_skin_binds(GLTFState{self}, use_named_skin_binds)
}
func (self methodsGLTFState) GetNodes() ArrayOf[GLTFNode] {
	return self.Runtime.GLTFState_get_nodes(GLTFState{self})
}
func (self methodsGLTFState) SetNodes(nodes ArrayOf[GLTFNode]) {
	self.Runtime.GLTFState_set_nodes(GLTFState{self}, nodes)
}
func (self methodsGLTFState) GetBuffers() ArrayOf[PackedByteArray] {
	return self.Runtime.GLTFState_get_buffers(GLTFState{self})
}
func (self methodsGLTFState) SetBuffers(buffers ArrayOf[PackedByteArray]) {
	self.Runtime.GLTFState_set_buffers(GLTFState{self}, buffers)
}
func (self methodsGLTFState) GetBufferViews() ArrayOf[GLTFBufferView] {
	return self.Runtime.GLTFState_get_buffer_views(GLTFState{self})
}
func (self methodsGLTFState) SetBufferViews(buffer_views ArrayOf[GLTFBufferView]) {
	self.Runtime.GLTFState_set_buffer_views(GLTFState{self}, buffer_views)
}
func (self methodsGLTFState) GetAccessors() ArrayOf[GLTFAccessor] {
	return self.Runtime.GLTFState_get_accessors(GLTFState{self})
}
func (self methodsGLTFState) SetAccessors(accessors ArrayOf[GLTFAccessor]) {
	self.Runtime.GLTFState_set_accessors(GLTFState{self}, accessors)
}
func (self methodsGLTFState) GetMeshes() ArrayOf[GLTFMesh] {
	return self.Runtime.GLTFState_get_meshes(GLTFState{self})
}
func (self methodsGLTFState) SetMeshes(meshes ArrayOf[GLTFMesh]) {
	self.Runtime.GLTFState_set_meshes(GLTFState{self}, meshes)
}
func (self methodsGLTFState) GetAnimationPlayersCount(idx int64) int64 {
	return self.Runtime.GLTFState_get_animation_players_count(GLTFState{self}, idx)
}
func (self methodsGLTFState) GetAnimationPlayer(idx int64) AnimationPlayer {
	return self.Runtime.GLTFState_get_animation_player(GLTFState{self}, idx)
}
func (self methodsGLTFState) GetMaterials() ArrayOf[Material] {
	return self.Runtime.GLTFState_get_materials(GLTFState{self})
}
func (self methodsGLTFState) SetMaterials(materials ArrayOf[Material]) {
	self.Runtime.GLTFState_set_materials(GLTFState{self}, materials)
}
func (self methodsGLTFState) GetSceneName() string {
	return self.Runtime.GLTFState_get_scene_name(GLTFState{self})
}
func (self methodsGLTFState) SetSceneName(scene_name string) {
	self.Runtime.GLTFState_set_scene_name(GLTFState{self}, scene_name)
}
func (self methodsGLTFState) GetBasePath() string {
	return self.Runtime.GLTFState_get_base_path(GLTFState{self})
}
func (self methodsGLTFState) SetBasePath(base_path string) {
	self.Runtime.GLTFState_set_base_path(GLTFState{self}, base_path)
}
func (self methodsGLTFState) GetFilename() string {
	return self.Runtime.GLTFState_get_filename(GLTFState{self})
}
func (self methodsGLTFState) SetFilename(filename string) {
	self.Runtime.GLTFState_set_filename(GLTFState{self}, filename)
}
func (self methodsGLTFState) GetRootNodes() PackedInt32Array {
	return self.Runtime.GLTFState_get_root_nodes(GLTFState{self})
}
func (self methodsGLTFState) SetRootNodes(root_nodes PackedInt32Array) {
	self.Runtime.GLTFState_set_root_nodes(GLTFState{self}, root_nodes)
}
func (self methodsGLTFState) GetTextures() ArrayOf[GLTFTexture] {
	return self.Runtime.GLTFState_get_textures(GLTFState{self})
}
func (self methodsGLTFState) SetTextures(textures ArrayOf[GLTFTexture]) {
	self.Runtime.GLTFState_set_textures(GLTFState{self}, textures)
}
func (self methodsGLTFState) GetTextureSamplers() ArrayOf[GLTFTextureSampler] {
	return self.Runtime.GLTFState_get_texture_samplers(GLTFState{self})
}
func (self methodsGLTFState) SetTextureSamplers(texture_samplers ArrayOf[GLTFTextureSampler]) {
	self.Runtime.GLTFState_set_texture_samplers(GLTFState{self}, texture_samplers)
}
func (self methodsGLTFState) GetImages() ArrayOf[Texture2D] {
	return self.Runtime.GLTFState_get_images(GLTFState{self})
}
func (self methodsGLTFState) SetImages(images ArrayOf[Texture2D]) {
	self.Runtime.GLTFState_set_images(GLTFState{self}, images)
}
func (self methodsGLTFState) GetSkins() ArrayOf[GLTFSkin] {
	return self.Runtime.GLTFState_get_skins(GLTFState{self})
}
func (self methodsGLTFState) SetSkins(skins ArrayOf[GLTFSkin]) {
	self.Runtime.GLTFState_set_skins(GLTFState{self}, skins)
}
func (self methodsGLTFState) GetCameras() ArrayOf[GLTFCamera] {
	return self.Runtime.GLTFState_get_cameras(GLTFState{self})
}
func (self methodsGLTFState) SetCameras(cameras ArrayOf[GLTFCamera]) {
	self.Runtime.GLTFState_set_cameras(GLTFState{self}, cameras)
}
func (self methodsGLTFState) GetLights() ArrayOf[GLTFLight] {
	return self.Runtime.GLTFState_get_lights(GLTFState{self})
}
func (self methodsGLTFState) SetLights(lights ArrayOf[GLTFLight]) {
	self.Runtime.GLTFState_set_lights(GLTFState{self}, lights)
}
func (self methodsGLTFState) GetUniqueNames() ArrayOf[string] {
	return self.Runtime.GLTFState_get_unique_names(GLTFState{self})
}
func (self methodsGLTFState) SetUniqueNames(unique_names ArrayOf[string]) {
	self.Runtime.GLTFState_set_unique_names(GLTFState{self}, unique_names)
}
func (self methodsGLTFState) GetUniqueAnimationNames() ArrayOf[string] {
	return self.Runtime.GLTFState_get_unique_animation_names(GLTFState{self})
}
func (self methodsGLTFState) SetUniqueAnimationNames(unique_animation_names ArrayOf[string]) {
	self.Runtime.GLTFState_set_unique_animation_names(GLTFState{self}, unique_animation_names)
}
func (self methodsGLTFState) GetSkeletons() ArrayOf[GLTFSkeleton] {
	return self.Runtime.GLTFState_get_skeletons(GLTFState{self})
}
func (self methodsGLTFState) SetSkeletons(skeletons ArrayOf[GLTFSkeleton]) {
	self.Runtime.GLTFState_set_skeletons(GLTFState{self}, skeletons)
}
func (self methodsGLTFState) GetCreateAnimations() bool {
	return self.Runtime.GLTFState_get_create_animations(GLTFState{self})
}
func (self methodsGLTFState) SetCreateAnimations(create_animations bool) {
	self.Runtime.GLTFState_set_create_animations(GLTFState{self}, create_animations)
}
func (self methodsGLTFState) GetAnimations() ArrayOf[GLTFAnimation] {
	return self.Runtime.GLTFState_get_animations(GLTFState{self})
}
func (self methodsGLTFState) SetAnimations(animations ArrayOf[GLTFAnimation]) {
	self.Runtime.GLTFState_set_animations(GLTFState{self}, animations)
}
func (self methodsGLTFState) GetSceneNode(idx int64) Node {
	return self.Runtime.GLTFState_get_scene_node(GLTFState{self}, idx)
}
func (self methodsGLTFState) GetNodeIndex(scene_node Node) int64 {
	return self.Runtime.GLTFState_get_node_index(GLTFState{self}, scene_node)
}
func (self methodsGLTFState) GetAdditionalData(extension_name string) any {
	return self.Runtime.GLTFState_get_additional_data(GLTFState{self}, extension_name)
}
func (self methodsGLTFState) SetAdditionalData(extension_name string, additional_data any) {
	self.Runtime.GLTFState_set_additional_data(GLTFState{self}, extension_name, additional_data)
}
func (self methodsGLTFState) GetHandleBinaryImage() int64 {
	return self.Runtime.GLTFState_get_handle_binary_image(GLTFState{self})
}
func (self methodsGLTFState) SetHandleBinaryImage(method int64) {
	self.Runtime.GLTFState_set_handle_binary_image(GLTFState{self}, method)
}

type methodsGLTFTexture struct {
	_ [0]*methodsGLTFTexture
	class
}

func (self GLTFTexture) Resource() Resource {
	var parent Resource
	parent.class = self.class
	return parent
}
func (self methodsGLTFTexture) GetSrcImage() int64 {
	return self.Runtime.GLTFTexture_get_src_image(GLTFTexture{self})
}
func (self methodsGLTFTexture) SetSrcImage(src_image int64) {
	self.Runtime.GLTFTexture_set_src_image(GLTFTexture{self}, src_image)
}
func (self methodsGLTFTexture) GetSampler() int64 {
	return self.Runtime.GLTFTexture_get_sampler(GLTFTexture{self})
}
func (self methodsGLTFTexture) SetSampler(sampler int64) {
	self.Runtime.GLTFTexture_set_sampler(GLTFTexture{self}, sampler)
}

type methodsGLTFTextureSampler struct {
	_ [0]*methodsGLTFTextureSampler
	class
}

func (self GLTFTextureSampler) Resource() Resource {
	var parent Resource
	parent.class = self.class
	return parent
}
func (self methodsGLTFTextureSampler) GetMagFilter() int64 {
	return self.Runtime.GLTFTextureSampler_get_mag_filter(GLTFTextureSampler{self})
}
func (self methodsGLTFTextureSampler) SetMagFilter(filter_mode int64) {
	self.Runtime.GLTFTextureSampler_set_mag_filter(GLTFTextureSampler{self}, filter_mode)
}
func (self methodsGLTFTextureSampler) GetMinFilter() int64 {
	return self.Runtime.GLTFTextureSampler_get_min_filter(GLTFTextureSampler{self})
}
func (self methodsGLTFTextureSampler) SetMinFilter(filter_mode int64) {
	self.Runtime.GLTFTextureSampler_set_min_filter(GLTFTextureSampler{self}, filter_mode)
}
func (self methodsGLTFTextureSampler) GetWrapS() int64 {
	return self.Runtime.GLTFTextureSampler_get_wrap_s(GLTFTextureSampler{self})
}
func (self methodsGLTFTextureSampler) SetWrapS(wrap_mode int64) {
	self.Runtime.GLTFTextureSampler_set_wrap_s(GLTFTextureSampler{self}, wrap_mode)
}
func (self methodsGLTFTextureSampler) GetWrapT() int64 {
	return self.Runtime.GLTFTextureSampler_get_wrap_t(GLTFTextureSampler{self})
}
func (self methodsGLTFTextureSampler) SetWrapT(wrap_mode int64) {
	self.Runtime.GLTFTextureSampler_set_wrap_t(GLTFTextureSampler{self}, wrap_mode)
}

type methodsGPUParticles2D struct {
	_ [0]*methodsGPUParticles2D
	class
}

func (self GPUParticles2D) Node2D() Node2D {
	var parent Node2D
	parent.class = self.class
	return parent
}
func (self methodsGPUParticles2D) SetEmitting(emitting bool) {
	self.Runtime.GPUParticles2D_set_emitting(GPUParticles2D{self}, emitting)
}
func (self methodsGPUParticles2D) SetAmount(amount int64) {
	self.Runtime.GPUParticles2D_set_amount(GPUParticles2D{self}, amount)
}
func (self methodsGPUParticles2D) SetLifetime(secs Float) {
	self.Runtime.GPUParticles2D_set_lifetime(GPUParticles2D{self}, secs)
}
func (self methodsGPUParticles2D) SetOneShot(secs bool) {
	self.Runtime.GPUParticles2D_set_one_shot(GPUParticles2D{self}, secs)
}
func (self methodsGPUParticles2D) SetPreProcessTime(secs Float) {
	self.Runtime.GPUParticles2D_set_pre_process_time(GPUParticles2D{self}, secs)
}
func (self methodsGPUParticles2D) SetExplosivenessRatio(ratio Float) {
	self.Runtime.GPUParticles2D_set_explosiveness_ratio(GPUParticles2D{self}, ratio)
}
func (self methodsGPUParticles2D) SetRandomnessRatio(ratio Float) {
	self.Runtime.GPUParticles2D_set_randomness_ratio(GPUParticles2D{self}, ratio)
}
func (self methodsGPUParticles2D) SetVisibilityRect(visibility_rect Rect2) {
	self.Runtime.GPUParticles2D_set_visibility_rect(GPUParticles2D{self}, visibility_rect)
}
func (self methodsGPUParticles2D) SetUseLocalCoordinates(enable bool) {
	self.Runtime.GPUParticles2D_set_use_local_coordinates(GPUParticles2D{self}, enable)
}
func (self methodsGPUParticles2D) SetFixedFps(fps int64) {
	self.Runtime.GPUParticles2D_set_fixed_fps(GPUParticles2D{self}, fps)
}
func (self methodsGPUParticles2D) SetFractionalDelta(enable bool) {
	self.Runtime.GPUParticles2D_set_fractional_delta(GPUParticles2D{self}, enable)
}
func (self methodsGPUParticles2D) SetInterpolate(enable bool) {
	self.Runtime.GPUParticles2D_set_interpolate(GPUParticles2D{self}, enable)
}
func (self methodsGPUParticles2D) SetProcessMaterial(material Material) {
	self.Runtime.GPUParticles2D_set_process_material(GPUParticles2D{self}, material)
}
func (self methodsGPUParticles2D) SetSpeedScale(scale Float) {
	self.Runtime.GPUParticles2D_set_speed_scale(GPUParticles2D{self}, scale)
}
func (self methodsGPUParticles2D) SetCollisionBaseSize(size Float) {
	self.Runtime.GPUParticles2D_set_collision_base_size(GPUParticles2D{self}, size)
}
func (self methodsGPUParticles2D) SetInterpToEnd(interp Float) {
	self.Runtime.GPUParticles2D_set_interp_to_end(GPUParticles2D{self}, interp)
}
func (self methodsGPUParticles2D) IsEmitting() bool {
	return self.Runtime.GPUParticles2D_is_emitting(GPUParticles2D{self})
}
func (self methodsGPUParticles2D) GetAmount() int64 {
	return self.Runtime.GPUParticles2D_get_amount(GPUParticles2D{self})
}
func (self methodsGPUParticles2D) GetLifetime() Float {
	return self.Runtime.GPUParticles2D_get_lifetime(GPUParticles2D{self})
}
func (self methodsGPUParticles2D) GetOneShot() bool {
	return self.Runtime.GPUParticles2D_get_one_shot(GPUParticles2D{self})
}
func (self methodsGPUParticles2D) GetPreProcessTime() Float {
	return self.Runtime.GPUParticles2D_get_pre_process_time(GPUParticles2D{self})
}
func (self methodsGPUParticles2D) GetExplosivenessRatio() Float {
	return self.Runtime.GPUParticles2D_get_explosiveness_ratio(GPUParticles2D{self})
}
func (self methodsGPUParticles2D) GetRandomnessRatio() Float {
	return self.Runtime.GPUParticles2D_get_randomness_ratio(GPUParticles2D{self})
}
func (self methodsGPUParticles2D) GetVisibilityRect() Rect2 {
	return self.Runtime.GPUParticles2D_get_visibility_rect(GPUParticles2D{self})
}
func (self methodsGPUParticles2D) GetUseLocalCoordinates() bool {
	return self.Runtime.GPUParticles2D_get_use_local_coordinates(GPUParticles2D{self})
}
func (self methodsGPUParticles2D) GetFixedFps() int64 {
	return self.Runtime.GPUParticles2D_get_fixed_fps(GPUParticles2D{self})
}
func (self methodsGPUParticles2D) GetFractionalDelta() bool {
	return self.Runtime.GPUParticles2D_get_fractional_delta(GPUParticles2D{self})
}
func (self methodsGPUParticles2D) GetInterpolate() bool {
	return self.Runtime.GPUParticles2D_get_interpolate(GPUParticles2D{self})
}
func (self methodsGPUParticles2D) GetProcessMaterial() Material {
	return self.Runtime.GPUParticles2D_get_process_material(GPUParticles2D{self})
}
func (self methodsGPUParticles2D) GetSpeedScale() Float {
	return self.Runtime.GPUParticles2D_get_speed_scale(GPUParticles2D{self})
}
func (self methodsGPUParticles2D) GetCollisionBaseSize() Float {
	return self.Runtime.GPUParticles2D_get_collision_base_size(GPUParticles2D{self})
}
func (self methodsGPUParticles2D) GetInterpToEnd() Float {
	return self.Runtime.GPUParticles2D_get_interp_to_end(GPUParticles2D{self})
}
func (self methodsGPUParticles2D) SetDrawOrder(order GPUParticles2DDrawOrder) {
	self.Runtime.GPUParticles2D_set_draw_order(GPUParticles2D{self}, order)
}
func (self methodsGPUParticles2D) GetDrawOrder() GPUParticles2DDrawOrder {
	return self.Runtime.GPUParticles2D_get_draw_order(GPUParticles2D{self})
}
func (self methodsGPUParticles2D) SetTexture(texture Texture2D) {
	self.Runtime.GPUParticles2D_set_texture(GPUParticles2D{self}, texture)
}
func (self methodsGPUParticles2D) GetTexture() Texture2D {
	return self.Runtime.GPUParticles2D_get_texture(GPUParticles2D{self})
}
func (self methodsGPUParticles2D) CaptureRect() Rect2 {
	return self.Runtime.GPUParticles2D_capture_rect(GPUParticles2D{self})
}
func (self methodsGPUParticles2D) Restart() {
	self.Runtime.GPUParticles2D_restart(GPUParticles2D{self})
}
func (self methodsGPUParticles2D) SetSubEmitter(path NodePath) {
	self.Runtime.GPUParticles2D_set_sub_emitter(GPUParticles2D{self}, path)
}
func (self methodsGPUParticles2D) GetSubEmitter() NodePath {
	return self.Runtime.GPUParticles2D_get_sub_emitter(GPUParticles2D{self})
}
func (self methodsGPUParticles2D) EmitParticle(xform Transform2D, velocity Vector2, color Color, custom Color, flags int64) {
	self.Runtime.GPUParticles2D_emit_particle(GPUParticles2D{self}, xform, velocity, color, custom, flags)
}
func (self methodsGPUParticles2D) SetTrailEnabled(enabled bool) {
	self.Runtime.GPUParticles2D_set_trail_enabled(GPUParticles2D{self}, enabled)
}
func (self methodsGPUParticles2D) SetTrailLifetime(secs Float) {
	self.Runtime.GPUParticles2D_set_trail_lifetime(GPUParticles2D{self}, secs)
}
func (self methodsGPUParticles2D) IsTrailEnabled() bool {
	return self.Runtime.GPUParticles2D_is_trail_enabled(GPUParticles2D{self})
}
func (self methodsGPUParticles2D) GetTrailLifetime() Float {
	return self.Runtime.GPUParticles2D_get_trail_lifetime(GPUParticles2D{self})
}
func (self methodsGPUParticles2D) SetTrailSections(sections int64) {
	self.Runtime.GPUParticles2D_set_trail_sections(GPUParticles2D{self}, sections)
}
func (self methodsGPUParticles2D) GetTrailSections() int64 {
	return self.Runtime.GPUParticles2D_get_trail_sections(GPUParticles2D{self})
}
func (self methodsGPUParticles2D) SetTrailSectionSubdivisions(subdivisions int64) {
	self.Runtime.GPUParticles2D_set_trail_section_subdivisions(GPUParticles2D{self}, subdivisions)
}
func (self methodsGPUParticles2D) GetTrailSectionSubdivisions() int64 {
	return self.Runtime.GPUParticles2D_get_trail_section_subdivisions(GPUParticles2D{self})
}
func (self methodsGPUParticles2D) ConvertFromParticles(particles Node) {
	self.Runtime.GPUParticles2D_convert_from_particles(GPUParticles2D{self}, particles)
}
func (self methodsGPUParticles2D) SetAmountRatio(ratio Float) {
	self.Runtime.GPUParticles2D_set_amount_ratio(GPUParticles2D{self}, ratio)
}
func (self methodsGPUParticles2D) GetAmountRatio() Float {
	return self.Runtime.GPUParticles2D_get_amount_ratio(GPUParticles2D{self})
}

type methodsGPUParticles3D struct {
	_ [0]*methodsGPUParticles3D
	class
}

func (self GPUParticles3D) GeometryInstance3D() GeometryInstance3D {
	var parent GeometryInstance3D
	parent.class = self.class
	return parent
}
func (self methodsGPUParticles3D) SetEmitting(emitting bool) {
	self.Runtime.GPUParticles3D_set_emitting(GPUParticles3D{self}, emitting)
}
func (self methodsGPUParticles3D) SetAmount(amount int64) {
	self.Runtime.GPUParticles3D_set_amount(GPUParticles3D{self}, amount)
}
func (self methodsGPUParticles3D) SetLifetime(secs Float) {
	self.Runtime.GPUParticles3D_set_lifetime(GPUParticles3D{self}, secs)
}
func (self methodsGPUParticles3D) SetOneShot(enable bool) {
	self.Runtime.GPUParticles3D_set_one_shot(GPUParticles3D{self}, enable)
}
func (self methodsGPUParticles3D) SetPreProcessTime(secs Float) {
	self.Runtime.GPUParticles3D_set_pre_process_time(GPUParticles3D{self}, secs)
}
func (self methodsGPUParticles3D) SetExplosivenessRatio(ratio Float) {
	self.Runtime.GPUParticles3D_set_explosiveness_ratio(GPUParticles3D{self}, ratio)
}
func (self methodsGPUParticles3D) SetRandomnessRatio(ratio Float) {
	self.Runtime.GPUParticles3D_set_randomness_ratio(GPUParticles3D{self}, ratio)
}
func (self methodsGPUParticles3D) SetVisibilityAabb(aabb AABB) {
	self.Runtime.GPUParticles3D_set_visibility_aabb(GPUParticles3D{self}, aabb)
}
func (self methodsGPUParticles3D) SetUseLocalCoordinates(enable bool) {
	self.Runtime.GPUParticles3D_set_use_local_coordinates(GPUParticles3D{self}, enable)
}
func (self methodsGPUParticles3D) SetFixedFps(fps int64) {
	self.Runtime.GPUParticles3D_set_fixed_fps(GPUParticles3D{self}, fps)
}
func (self methodsGPUParticles3D) SetFractionalDelta(enable bool) {
	self.Runtime.GPUParticles3D_set_fractional_delta(GPUParticles3D{self}, enable)
}
func (self methodsGPUParticles3D) SetInterpolate(enable bool) {
	self.Runtime.GPUParticles3D_set_interpolate(GPUParticles3D{self}, enable)
}
func (self methodsGPUParticles3D) SetProcessMaterial(material Material) {
	self.Runtime.GPUParticles3D_set_process_material(GPUParticles3D{self}, material)
}
func (self methodsGPUParticles3D) SetSpeedScale(scale Float) {
	self.Runtime.GPUParticles3D_set_speed_scale(GPUParticles3D{self}, scale)
}
func (self methodsGPUParticles3D) SetCollisionBaseSize(size Float) {
	self.Runtime.GPUParticles3D_set_collision_base_size(GPUParticles3D{self}, size)
}
func (self methodsGPUParticles3D) SetInterpToEnd(interp Float) {
	self.Runtime.GPUParticles3D_set_interp_to_end(GPUParticles3D{self}, interp)
}
func (self methodsGPUParticles3D) IsEmitting() bool {
	return self.Runtime.GPUParticles3D_is_emitting(GPUParticles3D{self})
}
func (self methodsGPUParticles3D) GetAmount() int64 {
	return self.Runtime.GPUParticles3D_get_amount(GPUParticles3D{self})
}
func (self methodsGPUParticles3D) GetLifetime() Float {
	return self.Runtime.GPUParticles3D_get_lifetime(GPUParticles3D{self})
}
func (self methodsGPUParticles3D) GetOneShot() bool {
	return self.Runtime.GPUParticles3D_get_one_shot(GPUParticles3D{self})
}
func (self methodsGPUParticles3D) GetPreProcessTime() Float {
	return self.Runtime.GPUParticles3D_get_pre_process_time(GPUParticles3D{self})
}
func (self methodsGPUParticles3D) GetExplosivenessRatio() Float {
	return self.Runtime.GPUParticles3D_get_explosiveness_ratio(GPUParticles3D{self})
}
func (self methodsGPUParticles3D) GetRandomnessRatio() Float {
	return self.Runtime.GPUParticles3D_get_randomness_ratio(GPUParticles3D{self})
}
func (self methodsGPUParticles3D) GetVisibilityAabb() AABB {
	return self.Runtime.GPUParticles3D_get_visibility_aabb(GPUParticles3D{self})
}
func (self methodsGPUParticles3D) GetUseLocalCoordinates() bool {
	return self.Runtime.GPUParticles3D_get_use_local_coordinates(GPUParticles3D{self})
}
func (self methodsGPUParticles3D) GetFixedFps() int64 {
	return self.Runtime.GPUParticles3D_get_fixed_fps(GPUParticles3D{self})
}
func (self methodsGPUParticles3D) GetFractionalDelta() bool {
	return self.Runtime.GPUParticles3D_get_fractional_delta(GPUParticles3D{self})
}
func (self methodsGPUParticles3D) GetInterpolate() bool {
	return self.Runtime.GPUParticles3D_get_interpolate(GPUParticles3D{self})
}
func (self methodsGPUParticles3D) GetProcessMaterial() Material {
	return self.Runtime.GPUParticles3D_get_process_material(GPUParticles3D{self})
}
func (self methodsGPUParticles3D) GetSpeedScale() Float {
	return self.Runtime.GPUParticles3D_get_speed_scale(GPUParticles3D{self})
}
func (self methodsGPUParticles3D) GetCollisionBaseSize() Float {
	return self.Runtime.GPUParticles3D_get_collision_base_size(GPUParticles3D{self})
}
func (self methodsGPUParticles3D) GetInterpToEnd() Float {
	return self.Runtime.GPUParticles3D_get_interp_to_end(GPUParticles3D{self})
}
func (self methodsGPUParticles3D) SetDrawOrder(order GPUParticles3DDrawOrder) {
	self.Runtime.GPUParticles3D_set_draw_order(GPUParticles3D{self}, order)
}
func (self methodsGPUParticles3D) GetDrawOrder() GPUParticles3DDrawOrder {
	return self.Runtime.GPUParticles3D_get_draw_order(GPUParticles3D{self})
}
func (self methodsGPUParticles3D) SetDrawPasses(passes int64) {
	self.Runtime.GPUParticles3D_set_draw_passes(GPUParticles3D{self}, passes)
}
func (self methodsGPUParticles3D) SetDrawPassMesh(pass int64, mesh Mesh) {
	self.Runtime.GPUParticles3D_set_draw_pass_mesh(GPUParticles3D{self}, pass, mesh)
}
func (self methodsGPUParticles3D) GetDrawPasses() int64 {
	return self.Runtime.GPUParticles3D_get_draw_passes(GPUParticles3D{self})
}
func (self methodsGPUParticles3D) GetDrawPassMesh(pass int64) Mesh {
	return self.Runtime.GPUParticles3D_get_draw_pass_mesh(GPUParticles3D{self}, pass)
}
func (self methodsGPUParticles3D) SetSkin(skin Skin) {
	self.Runtime.GPUParticles3D_set_skin(GPUParticles3D{self}, skin)
}
func (self methodsGPUParticles3D) GetSkin() Skin {
	return self.Runtime.GPUParticles3D_get_skin(GPUParticles3D{self})
}
func (self methodsGPUParticles3D) Restart() {
	self.Runtime.GPUParticles3D_restart(GPUParticles3D{self})
}
func (self methodsGPUParticles3D) CaptureAabb() AABB {
	return self.Runtime.GPUParticles3D_capture_aabb(GPUParticles3D{self})
}
func (self methodsGPUParticles3D) SetSubEmitter(path NodePath) {
	self.Runtime.GPUParticles3D_set_sub_emitter(GPUParticles3D{self}, path)
}
func (self methodsGPUParticles3D) GetSubEmitter() NodePath {
	return self.Runtime.GPUParticles3D_get_sub_emitter(GPUParticles3D{self})
}
func (self methodsGPUParticles3D) EmitParticle(xform Transform3D, velocity Vector3, color Color, custom Color, flags int64) {
	self.Runtime.GPUParticles3D_emit_particle(GPUParticles3D{self}, xform, velocity, color, custom, flags)
}
func (self methodsGPUParticles3D) SetTrailEnabled(enabled bool) {
	self.Runtime.GPUParticles3D_set_trail_enabled(GPUParticles3D{self}, enabled)
}
func (self methodsGPUParticles3D) SetTrailLifetime(secs Float) {
	self.Runtime.GPUParticles3D_set_trail_lifetime(GPUParticles3D{self}, secs)
}
func (self methodsGPUParticles3D) IsTrailEnabled() bool {
	return self.Runtime.GPUParticles3D_is_trail_enabled(GPUParticles3D{self})
}
func (self methodsGPUParticles3D) GetTrailLifetime() Float {
	return self.Runtime.GPUParticles3D_get_trail_lifetime(GPUParticles3D{self})
}
func (self methodsGPUParticles3D) SetTransformAlign(align GPUParticles3DTransformAlign) {
	self.Runtime.GPUParticles3D_set_transform_align(GPUParticles3D{self}, align)
}
func (self methodsGPUParticles3D) GetTransformAlign() GPUParticles3DTransformAlign {
	return self.Runtime.GPUParticles3D_get_transform_align(GPUParticles3D{self})
}
func (self methodsGPUParticles3D) ConvertFromParticles(particles Node) {
	self.Runtime.GPUParticles3D_convert_from_particles(GPUParticles3D{self}, particles)
}
func (self methodsGPUParticles3D) SetAmountRatio(ratio Float) {
	self.Runtime.GPUParticles3D_set_amount_ratio(GPUParticles3D{self}, ratio)
}
func (self methodsGPUParticles3D) GetAmountRatio() Float {
	return self.Runtime.GPUParticles3D_get_amount_ratio(GPUParticles3D{self})
}

type methodsGPUParticlesAttractor3D struct {
	_ [0]*methodsGPUParticlesAttractor3D
	class
}

func (self GPUParticlesAttractor3D) VisualInstance3D() VisualInstance3D {
	var parent VisualInstance3D
	parent.class = self.class
	return parent
}
func (self methodsGPUParticlesAttractor3D) SetCullMask(mask int64) {
	self.Runtime.GPUParticlesAttractor3D_set_cull_mask(GPUParticlesAttractor3D{self}, mask)
}
func (self methodsGPUParticlesAttractor3D) GetCullMask() int64 {
	return self.Runtime.GPUParticlesAttractor3D_get_cull_mask(GPUParticlesAttractor3D{self})
}
func (self methodsGPUParticlesAttractor3D) SetStrength(strength Float) {
	self.Runtime.GPUParticlesAttractor3D_set_strength(GPUParticlesAttractor3D{self}, strength)
}
func (self methodsGPUParticlesAttractor3D) GetStrength() Float {
	return self.Runtime.GPUParticlesAttractor3D_get_strength(GPUParticlesAttractor3D{self})
}
func (self methodsGPUParticlesAttractor3D) SetAttenuation(attenuation Float) {
	self.Runtime.GPUParticlesAttractor3D_set_attenuation(GPUParticlesAttractor3D{self}, attenuation)
}
func (self methodsGPUParticlesAttractor3D) GetAttenuation() Float {
	return self.Runtime.GPUParticlesAttractor3D_get_attenuation(GPUParticlesAttractor3D{self})
}
func (self methodsGPUParticlesAttractor3D) SetDirectionality(amount Float) {
	self.Runtime.GPUParticlesAttractor3D_set_directionality(GPUParticlesAttractor3D{self}, amount)
}
func (self methodsGPUParticlesAttractor3D) GetDirectionality() Float {
	return self.Runtime.GPUParticlesAttractor3D_get_directionality(GPUParticlesAttractor3D{self})
}

type methodsGPUParticlesAttractorBox3D struct {
	_ [0]*methodsGPUParticlesAttractorBox3D
	class
}

func (self GPUParticlesAttractorBox3D) GPUParticlesAttractor3D() GPUParticlesAttractor3D {
	var parent GPUParticlesAttractor3D
	parent.class = self.class
	return parent
}
func (self methodsGPUParticlesAttractorBox3D) SetSize(size Vector3) {
	self.Runtime.GPUParticlesAttractorBox3D_set_size(GPUParticlesAttractorBox3D{self}, size)
}
func (self methodsGPUParticlesAttractorBox3D) GetSize() Vector3 {
	return self.Runtime.GPUParticlesAttractorBox3D_get_size(GPUParticlesAttractorBox3D{self})
}

type methodsGPUParticlesAttractorSphere3D struct {
	_ [0]*methodsGPUParticlesAttractorSphere3D
	class
}

func (self GPUParticlesAttractorSphere3D) GPUParticlesAttractor3D() GPUParticlesAttractor3D {
	var parent GPUParticlesAttractor3D
	parent.class = self.class
	return parent
}
func (self methodsGPUParticlesAttractorSphere3D) SetRadius(radius Float) {
	self.Runtime.GPUParticlesAttractorSphere3D_set_radius(GPUParticlesAttractorSphere3D{self}, radius)
}
func (self methodsGPUParticlesAttractorSphere3D) GetRadius() Float {
	return self.Runtime.GPUParticlesAttractorSphere3D_get_radius(GPUParticlesAttractorSphere3D{self})
}

type methodsGPUParticlesAttractorVectorField3D struct {
	_ [0]*methodsGPUParticlesAttractorVectorField3D
	class
}

func (self GPUParticlesAttractorVectorField3D) GPUParticlesAttractor3D() GPUParticlesAttractor3D {
	var parent GPUParticlesAttractor3D
	parent.class = self.class
	return parent
}
func (self methodsGPUParticlesAttractorVectorField3D) SetSize(size Vector3) {
	self.Runtime.GPUParticlesAttractorVectorField3D_set_size(GPUParticlesAttractorVectorField3D{self}, size)
}
func (self methodsGPUParticlesAttractorVectorField3D) GetSize() Vector3 {
	return self.Runtime.GPUParticlesAttractorVectorField3D_get_size(GPUParticlesAttractorVectorField3D{self})
}
func (self methodsGPUParticlesAttractorVectorField3D) SetTexture(texture Texture3D) {
	self.Runtime.GPUParticlesAttractorVectorField3D_set_texture(GPUParticlesAttractorVectorField3D{self}, texture)
}
func (self methodsGPUParticlesAttractorVectorField3D) GetTexture() Texture3D {
	return self.Runtime.GPUParticlesAttractorVectorField3D_get_texture(GPUParticlesAttractorVectorField3D{self})
}

type methodsGPUParticlesCollision3D struct {
	_ [0]*methodsGPUParticlesCollision3D
	class
}

func (self GPUParticlesCollision3D) VisualInstance3D() VisualInstance3D {
	var parent VisualInstance3D
	parent.class = self.class
	return parent
}
func (self methodsGPUParticlesCollision3D) SetCullMask(mask int64) {
	self.Runtime.GPUParticlesCollision3D_set_cull_mask(GPUParticlesCollision3D{self}, mask)
}
func (self methodsGPUParticlesCollision3D) GetCullMask() int64 {
	return self.Runtime.GPUParticlesCollision3D_get_cull_mask(GPUParticlesCollision3D{self})
}

type methodsGPUParticlesCollisionBox3D struct {
	_ [0]*methodsGPUParticlesCollisionBox3D
	class
}

func (self GPUParticlesCollisionBox3D) GPUParticlesCollision3D() GPUParticlesCollision3D {
	var parent GPUParticlesCollision3D
	parent.class = self.class
	return parent
}
func (self methodsGPUParticlesCollisionBox3D) SetSize(size Vector3) {
	self.Runtime.GPUParticlesCollisionBox3D_set_size(GPUParticlesCollisionBox3D{self}, size)
}
func (self methodsGPUParticlesCollisionBox3D) GetSize() Vector3 {
	return self.Runtime.GPUParticlesCollisionBox3D_get_size(GPUParticlesCollisionBox3D{self})
}

type methodsGPUParticlesCollisionHeightField3D struct {
	_ [0]*methodsGPUParticlesCollisionHeightField3D
	class
}

func (self GPUParticlesCollisionHeightField3D) GPUParticlesCollision3D() GPUParticlesCollision3D {
	var parent GPUParticlesCollision3D
	parent.class = self.class
	return parent
}
func (self methodsGPUParticlesCollisionHeightField3D) SetSize(size Vector3) {
	self.Runtime.GPUParticlesCollisionHeightField3D_set_size(GPUParticlesCollisionHeightField3D{self}, size)
}
func (self methodsGPUParticlesCollisionHeightField3D) GetSize() Vector3 {
	return self.Runtime.GPUParticlesCollisionHeightField3D_get_size(GPUParticlesCollisionHeightField3D{self})
}
func (self methodsGPUParticlesCollisionHeightField3D) SetResolution(resolution GPUParticlesCollisionHeightField3DResolution) {
	self.Runtime.GPUParticlesCollisionHeightField3D_set_resolution(GPUParticlesCollisionHeightField3D{self}, resolution)
}
func (self methodsGPUParticlesCollisionHeightField3D) GetResolution() GPUParticlesCollisionHeightField3DResolution {
	return self.Runtime.GPUParticlesCollisionHeightField3D_get_resolution(GPUParticlesCollisionHeightField3D{self})
}
func (self methodsGPUParticlesCollisionHeightField3D) SetUpdateMode(update_mode GPUParticlesCollisionHeightField3DUpdateMode) {
	self.Runtime.GPUParticlesCollisionHeightField3D_set_update_mode(GPUParticlesCollisionHeightField3D{self}, update_mode)
}
func (self methodsGPUParticlesCollisionHeightField3D) GetUpdateMode() GPUParticlesCollisionHeightField3DUpdateMode {
	return self.Runtime.GPUParticlesCollisionHeightField3D_get_update_mode(GPUParticlesCollisionHeightField3D{self})
}
func (self methodsGPUParticlesCollisionHeightField3D) SetFollowCameraEnabled(enabled bool) {
	self.Runtime.GPUParticlesCollisionHeightField3D_set_follow_camera_enabled(GPUParticlesCollisionHeightField3D{self}, enabled)
}
func (self methodsGPUParticlesCollisionHeightField3D) IsFollowCameraEnabled() bool {
	return self.Runtime.GPUParticlesCollisionHeightField3D_is_follow_camera_enabled(GPUParticlesCollisionHeightField3D{self})
}

type methodsGPUParticlesCollisionSDF3D struct {
	_ [0]*methodsGPUParticlesCollisionSDF3D
	class
}

func (self GPUParticlesCollisionSDF3D) GPUParticlesCollision3D() GPUParticlesCollision3D {
	var parent GPUParticlesCollision3D
	parent.class = self.class
	return parent
}
func (self methodsGPUParticlesCollisionSDF3D) SetSize(size Vector3) {
	self.Runtime.GPUParticlesCollisionSDF3D_set_size(GPUParticlesCollisionSDF3D{self}, size)
}
func (self methodsGPUParticlesCollisionSDF3D) GetSize() Vector3 {
	return self.Runtime.GPUParticlesCollisionSDF3D_get_size(GPUParticlesCollisionSDF3D{self})
}
func (self methodsGPUParticlesCollisionSDF3D) SetResolution(resolution GPUParticlesCollisionSDF3DResolution) {
	self.Runtime.GPUParticlesCollisionSDF3D_set_resolution(GPUParticlesCollisionSDF3D{self}, resolution)
}
func (self methodsGPUParticlesCollisionSDF3D) GetResolution() GPUParticlesCollisionSDF3DResolution {
	return self.Runtime.GPUParticlesCollisionSDF3D_get_resolution(GPUParticlesCollisionSDF3D{self})
}
func (self methodsGPUParticlesCollisionSDF3D) SetTexture(texture Texture3D) {
	self.Runtime.GPUParticlesCollisionSDF3D_set_texture(GPUParticlesCollisionSDF3D{self}, texture)
}
func (self methodsGPUParticlesCollisionSDF3D) GetTexture() Texture3D {
	return self.Runtime.GPUParticlesCollisionSDF3D_get_texture(GPUParticlesCollisionSDF3D{self})
}
func (self methodsGPUParticlesCollisionSDF3D) SetThickness(thickness Float) {
	self.Runtime.GPUParticlesCollisionSDF3D_set_thickness(GPUParticlesCollisionSDF3D{self}, thickness)
}
func (self methodsGPUParticlesCollisionSDF3D) GetThickness() Float {
	return self.Runtime.GPUParticlesCollisionSDF3D_get_thickness(GPUParticlesCollisionSDF3D{self})
}
func (self methodsGPUParticlesCollisionSDF3D) SetBakeMask(mask int64) {
	self.Runtime.GPUParticlesCollisionSDF3D_set_bake_mask(GPUParticlesCollisionSDF3D{self}, mask)
}
func (self methodsGPUParticlesCollisionSDF3D) GetBakeMask() int64 {
	return self.Runtime.GPUParticlesCollisionSDF3D_get_bake_mask(GPUParticlesCollisionSDF3D{self})
}
func (self methodsGPUParticlesCollisionSDF3D) SetBakeMaskValue(layer_number int64, value bool) {
	self.Runtime.GPUParticlesCollisionSDF3D_set_bake_mask_value(GPUParticlesCollisionSDF3D{self}, layer_number, value)
}
func (self methodsGPUParticlesCollisionSDF3D) GetBakeMaskValue(layer_number int64) bool {
	return self.Runtime.GPUParticlesCollisionSDF3D_get_bake_mask_value(GPUParticlesCollisionSDF3D{self}, layer_number)
}

type methodsGPUParticlesCollisionSphere3D struct {
	_ [0]*methodsGPUParticlesCollisionSphere3D
	class
}

func (self GPUParticlesCollisionSphere3D) GPUParticlesCollision3D() GPUParticlesCollision3D {
	var parent GPUParticlesCollision3D
	parent.class = self.class
	return parent
}
func (self methodsGPUParticlesCollisionSphere3D) SetRadius(radius Float) {
	self.Runtime.GPUParticlesCollisionSphere3D_set_radius(GPUParticlesCollisionSphere3D{self}, radius)
}
func (self methodsGPUParticlesCollisionSphere3D) GetRadius() Float {
	return self.Runtime.GPUParticlesCollisionSphere3D_get_radius(GPUParticlesCollisionSphere3D{self})
}

type methodsGeneric6DOFJoint3D struct {
	_ [0]*methodsGeneric6DOFJoint3D
	class
}

func (self Generic6DOFJoint3D) Joint3D() Joint3D {
	var parent Joint3D
	parent.class = self.class
	return parent
}
func (self methodsGeneric6DOFJoint3D) SetParamX(param Generic6DOFJoint3DParam, value Float) {
	self.Runtime.Generic6DOFJoint3D_set_param_x(Generic6DOFJoint3D{self}, param, value)
}
func (self methodsGeneric6DOFJoint3D) GetParamX(param Generic6DOFJoint3DParam) Float {
	return self.Runtime.Generic6DOFJoint3D_get_param_x(Generic6DOFJoint3D{self}, param)
}
func (self methodsGeneric6DOFJoint3D) SetParamY(param Generic6DOFJoint3DParam, value Float) {
	self.Runtime.Generic6DOFJoint3D_set_param_y(Generic6DOFJoint3D{self}, param, value)
}
func (self methodsGeneric6DOFJoint3D) GetParamY(param Generic6DOFJoint3DParam) Float {
	return self.Runtime.Generic6DOFJoint3D_get_param_y(Generic6DOFJoint3D{self}, param)
}
func (self methodsGeneric6DOFJoint3D) SetParamZ(param Generic6DOFJoint3DParam, value Float) {
	self.Runtime.Generic6DOFJoint3D_set_param_z(Generic6DOFJoint3D{self}, param, value)
}
func (self methodsGeneric6DOFJoint3D) GetParamZ(param Generic6DOFJoint3DParam) Float {
	return self.Runtime.Generic6DOFJoint3D_get_param_z(Generic6DOFJoint3D{self}, param)
}
func (self methodsGeneric6DOFJoint3D) SetFlagX(flag Generic6DOFJoint3DFlag, value bool) {
	self.Runtime.Generic6DOFJoint3D_set_flag_x(Generic6DOFJoint3D{self}, flag, value)
}
func (self methodsGeneric6DOFJoint3D) GetFlagX(flag Generic6DOFJoint3DFlag) bool {
	return self.Runtime.Generic6DOFJoint3D_get_flag_x(Generic6DOFJoint3D{self}, flag)
}
func (self methodsGeneric6DOFJoint3D) SetFlagY(flag Generic6DOFJoint3DFlag, value bool) {
	self.Runtime.Generic6DOFJoint3D_set_flag_y(Generic6DOFJoint3D{self}, flag, value)
}
func (self methodsGeneric6DOFJoint3D) GetFlagY(flag Generic6DOFJoint3DFlag) bool {
	return self.Runtime.Generic6DOFJoint3D_get_flag_y(Generic6DOFJoint3D{self}, flag)
}
func (self methodsGeneric6DOFJoint3D) SetFlagZ(flag Generic6DOFJoint3DFlag, value bool) {
	self.Runtime.Generic6DOFJoint3D_set_flag_z(Generic6DOFJoint3D{self}, flag, value)
}
func (self methodsGeneric6DOFJoint3D) GetFlagZ(flag Generic6DOFJoint3DFlag) bool {
	return self.Runtime.Generic6DOFJoint3D_get_flag_z(Generic6DOFJoint3D{self}, flag)
}

type methodsGeometry2D struct {
	_ [0]*methodsGeometry2D
	class
}

func (self Geometry2D) Object() Object { var parent Object; parent.class = self.class; return parent }
func (self methodsGeometry2D) IsPointInCircle(point Vector2, circle_position Vector2, circle_radius Float) bool {
	return self.Runtime.Geometry2D_is_point_in_circle(Geometry2D{self}, point, circle_position, circle_radius)
}
func (self methodsGeometry2D) SegmentIntersectsCircle(segment_from Vector2, segment_to Vector2, circle_position Vector2, circle_radius Float) Float {
	return self.Runtime.Geometry2D_segment_intersects_circle(Geometry2D{self}, segment_from, segment_to, circle_position, circle_radius)
}
func (self methodsGeometry2D) SegmentIntersectsSegment(from_a Vector2, to_a Vector2, from_b Vector2, to_b Vector2) any {
	return self.Runtime.Geometry2D_segment_intersects_segment(Geometry2D{self}, from_a, to_a, from_b, to_b)
}
func (self methodsGeometry2D) LineIntersectsLine(from_a Vector2, dir_a Vector2, from_b Vector2, dir_b Vector2) any {
	return self.Runtime.Geometry2D_line_intersects_line(Geometry2D{self}, from_a, dir_a, from_b, dir_b)
}
func (self methodsGeometry2D) GetClosestPointsBetweenSegments(p1 Vector2, q1 Vector2, p2 Vector2, q2 Vector2) PackedVector2Array {
	return self.Runtime.Geometry2D_get_closest_points_between_segments(Geometry2D{self}, p1, q1, p2, q2)
}
func (self methodsGeometry2D) GetClosestPointToSegment(point Vector2, s1 Vector2, s2 Vector2) Vector2 {
	return self.Runtime.Geometry2D_get_closest_point_to_segment(Geometry2D{self}, point, s1, s2)
}
func (self methodsGeometry2D) GetClosestPointToSegmentUncapped(point Vector2, s1 Vector2, s2 Vector2) Vector2 {
	return self.Runtime.Geometry2D_get_closest_point_to_segment_uncapped(Geometry2D{self}, point, s1, s2)
}
func (self methodsGeometry2D) PointIsInsideTriangle(point Vector2, a Vector2, b Vector2, c Vector2) bool {
	return self.Runtime.Geometry2D_point_is_inside_triangle(Geometry2D{self}, point, a, b, c)
}
func (self methodsGeometry2D) IsPolygonClockwise(polygon PackedVector2Array) bool {
	return self.Runtime.Geometry2D_is_polygon_clockwise(Geometry2D{self}, polygon)
}
func (self methodsGeometry2D) IsPointInPolygon(point Vector2, polygon PackedVector2Array) bool {
	return self.Runtime.Geometry2D_is_point_in_polygon(Geometry2D{self}, point, polygon)
}
func (self methodsGeometry2D) TriangulatePolygon(polygon PackedVector2Array) PackedInt32Array {
	return self.Runtime.Geometry2D_triangulate_polygon(Geometry2D{self}, polygon)
}
func (self methodsGeometry2D) TriangulateDelaunay(points PackedVector2Array) PackedInt32Array {
	return self.Runtime.Geometry2D_triangulate_delaunay(Geometry2D{self}, points)
}
func (self methodsGeometry2D) ConvexHull(points PackedVector2Array) PackedVector2Array {
	return self.Runtime.Geometry2D_convex_hull(Geometry2D{self}, points)
}
func (self methodsGeometry2D) DecomposePolygonInConvex(polygon PackedVector2Array) ArrayOf[PackedVector2Array] {
	return self.Runtime.Geometry2D_decompose_polygon_in_convex(Geometry2D{self}, polygon)
}
func (self methodsGeometry2D) MergePolygons(polygon_a PackedVector2Array, polygon_b PackedVector2Array) ArrayOf[PackedVector2Array] {
	return self.Runtime.Geometry2D_merge_polygons(Geometry2D{self}, polygon_a, polygon_b)
}
func (self methodsGeometry2D) ClipPolygons(polygon_a PackedVector2Array, polygon_b PackedVector2Array) ArrayOf[PackedVector2Array] {
	return self.Runtime.Geometry2D_clip_polygons(Geometry2D{self}, polygon_a, polygon_b)
}
func (self methodsGeometry2D) IntersectPolygons(polygon_a PackedVector2Array, polygon_b PackedVector2Array) ArrayOf[PackedVector2Array] {
	return self.Runtime.Geometry2D_intersect_polygons(Geometry2D{self}, polygon_a, polygon_b)
}
func (self methodsGeometry2D) ExcludePolygons(polygon_a PackedVector2Array, polygon_b PackedVector2Array) ArrayOf[PackedVector2Array] {
	return self.Runtime.Geometry2D_exclude_polygons(Geometry2D{self}, polygon_a, polygon_b)
}
func (self methodsGeometry2D) ClipPolylineWithPolygon(polyline PackedVector2Array, polygon PackedVector2Array) ArrayOf[PackedVector2Array] {
	return self.Runtime.Geometry2D_clip_polyline_with_polygon(Geometry2D{self}, polyline, polygon)
}
func (self methodsGeometry2D) IntersectPolylineWithPolygon(polyline PackedVector2Array, polygon PackedVector2Array) ArrayOf[PackedVector2Array] {
	return self.Runtime.Geometry2D_intersect_polyline_with_polygon(Geometry2D{self}, polyline, polygon)
}
func (self methodsGeometry2D) OffsetPolygon(polygon PackedVector2Array, delta Float, join_type Geometry2DPolyJoinType) ArrayOf[PackedVector2Array] {
	return self.Runtime.Geometry2D_offset_polygon(Geometry2D{self}, polygon, delta, join_type)
}
func (self methodsGeometry2D) OffsetPolyline(polyline PackedVector2Array, delta Float, join_type Geometry2DPolyJoinType, end_type Geometry2DPolyEndType) ArrayOf[PackedVector2Array] {
	return self.Runtime.Geometry2D_offset_polyline(Geometry2D{self}, polyline, delta, join_type, end_type)
}
func (self methodsGeometry2D) MakeAtlas(sizes PackedVector2Array) Dictionary {
	return self.Runtime.Geometry2D_make_atlas(Geometry2D{self}, sizes)
}

type methodsGeometry3D struct {
	_ [0]*methodsGeometry3D
	class
}

func (self Geometry3D) Object() Object { var parent Object; parent.class = self.class; return parent }
func (self methodsGeometry3D) ComputeConvexMeshPoints(planes ArrayOf[Plane]) PackedVector3Array {
	return self.Runtime.Geometry3D_compute_convex_mesh_points(Geometry3D{self}, planes)
}
func (self methodsGeometry3D) BuildBoxPlanes(extents Vector3) ArrayOf[Plane] {
	return self.Runtime.Geometry3D_build_box_planes(Geometry3D{self}, extents)
}
func (self methodsGeometry3D) BuildCylinderPlanes(radius Float, height Float, sides int64, axis Vector3Axis) ArrayOf[Plane] {
	return self.Runtime.Geometry3D_build_cylinder_planes(Geometry3D{self}, radius, height, sides, axis)
}
func (self methodsGeometry3D) BuildCapsulePlanes(radius Float, height Float, sides int64, lats int64, axis Vector3Axis) ArrayOf[Plane] {
	return self.Runtime.Geometry3D_build_capsule_planes(Geometry3D{self}, radius, height, sides, lats, axis)
}
func (self methodsGeometry3D) GetClosestPointsBetweenSegments(p1 Vector3, p2 Vector3, q1 Vector3, q2 Vector3) PackedVector3Array {
	return self.Runtime.Geometry3D_get_closest_points_between_segments(Geometry3D{self}, p1, p2, q1, q2)
}
func (self methodsGeometry3D) GetClosestPointToSegment(point Vector3, s1 Vector3, s2 Vector3) Vector3 {
	return self.Runtime.Geometry3D_get_closest_point_to_segment(Geometry3D{self}, point, s1, s2)
}
func (self methodsGeometry3D) GetClosestPointToSegmentUncapped(point Vector3, s1 Vector3, s2 Vector3) Vector3 {
	return self.Runtime.Geometry3D_get_closest_point_to_segment_uncapped(Geometry3D{self}, point, s1, s2)
}
func (self methodsGeometry3D) GetTriangleBarycentricCoords(point Vector3, a Vector3, b Vector3, c Vector3) Vector3 {
	return self.Runtime.Geometry3D_get_triangle_barycentric_coords(Geometry3D{self}, point, a, b, c)
}
func (self methodsGeometry3D) RayIntersectsTriangle(from Vector3, dir Vector3, a Vector3, b Vector3, c Vector3) any {
	return self.Runtime.Geometry3D_ray_intersects_triangle(Geometry3D{self}, from, dir, a, b, c)
}
func (self methodsGeometry3D) SegmentIntersectsTriangle(from Vector3, to Vector3, a Vector3, b Vector3, c Vector3) any {
	return self.Runtime.Geometry3D_segment_intersects_triangle(Geometry3D{self}, from, to, a, b, c)
}
func (self methodsGeometry3D) SegmentIntersectsSphere(from Vector3, to Vector3, sphere_position Vector3, sphere_radius Float) PackedVector3Array {
	return self.Runtime.Geometry3D_segment_intersects_sphere(Geometry3D{self}, from, to, sphere_position, sphere_radius)
}
func (self methodsGeometry3D) SegmentIntersectsCylinder(from Vector3, to Vector3, height Float, radius Float) PackedVector3Array {
	return self.Runtime.Geometry3D_segment_intersects_cylinder(Geometry3D{self}, from, to, height, radius)
}
func (self methodsGeometry3D) SegmentIntersectsConvex(from Vector3, to Vector3, planes ArrayOf[Plane]) PackedVector3Array {
	return self.Runtime.Geometry3D_segment_intersects_convex(Geometry3D{self}, from, to, planes)
}
func (self methodsGeometry3D) ClipPolygon(points PackedVector3Array, plane Plane) PackedVector3Array {
	return self.Runtime.Geometry3D_clip_polygon(Geometry3D{self}, points, plane)
}

type methodsGeometryInstance3D struct {
	_ [0]*methodsGeometryInstance3D
	class
}

func (self GeometryInstance3D) VisualInstance3D() VisualInstance3D {
	var parent VisualInstance3D
	parent.class = self.class
	return parent
}
func (self methodsGeometryInstance3D) SetMaterialOverride(material Material) {
	self.Runtime.GeometryInstance3D_set_material_override(GeometryInstance3D{self}, material)
}
func (self methodsGeometryInstance3D) GetMaterialOverride() Material {
	return self.Runtime.GeometryInstance3D_get_material_override(GeometryInstance3D{self})
}
func (self methodsGeometryInstance3D) SetMaterialOverlay(material Material) {
	self.Runtime.GeometryInstance3D_set_material_overlay(GeometryInstance3D{self}, material)
}
func (self methodsGeometryInstance3D) GetMaterialOverlay() Material {
	return self.Runtime.GeometryInstance3D_get_material_overlay(GeometryInstance3D{self})
}
func (self methodsGeometryInstance3D) SetCastShadowsSetting(shadow_casting_setting GeometryInstance3DShadowCastingSetting) {
	self.Runtime.GeometryInstance3D_set_cast_shadows_setting(GeometryInstance3D{self}, shadow_casting_setting)
}
func (self methodsGeometryInstance3D) GetCastShadowsSetting() GeometryInstance3DShadowCastingSetting {
	return self.Runtime.GeometryInstance3D_get_cast_shadows_setting(GeometryInstance3D{self})
}
func (self methodsGeometryInstance3D) SetLodBias(bias Float) {
	self.Runtime.GeometryInstance3D_set_lod_bias(GeometryInstance3D{self}, bias)
}
func (self methodsGeometryInstance3D) GetLodBias() Float {
	return self.Runtime.GeometryInstance3D_get_lod_bias(GeometryInstance3D{self})
}
func (self methodsGeometryInstance3D) SetTransparency(transparency Float) {
	self.Runtime.GeometryInstance3D_set_transparency(GeometryInstance3D{self}, transparency)
}
func (self methodsGeometryInstance3D) GetTransparency() Float {
	return self.Runtime.GeometryInstance3D_get_transparency(GeometryInstance3D{self})
}
func (self methodsGeometryInstance3D) SetVisibilityRangeEndMargin(distance Float) {
	self.Runtime.GeometryInstance3D_set_visibility_range_end_margin(GeometryInstance3D{self}, distance)
}
func (self methodsGeometryInstance3D) GetVisibilityRangeEndMargin() Float {
	return self.Runtime.GeometryInstance3D_get_visibility_range_end_margin(GeometryInstance3D{self})
}
func (self methodsGeometryInstance3D) SetVisibilityRangeEnd(distance Float) {
	self.Runtime.GeometryInstance3D_set_visibility_range_end(GeometryInstance3D{self}, distance)
}
func (self methodsGeometryInstance3D) GetVisibilityRangeEnd() Float {
	return self.Runtime.GeometryInstance3D_get_visibility_range_end(GeometryInstance3D{self})
}
func (self methodsGeometryInstance3D) SetVisibilityRangeBeginMargin(distance Float) {
	self.Runtime.GeometryInstance3D_set_visibility_range_begin_margin(GeometryInstance3D{self}, distance)
}
func (self methodsGeometryInstance3D) GetVisibilityRangeBeginMargin() Float {
	return self.Runtime.GeometryInstance3D_get_visibility_range_begin_margin(GeometryInstance3D{self})
}
func (self methodsGeometryInstance3D) SetVisibilityRangeBegin(distance Float) {
	self.Runtime.GeometryInstance3D_set_visibility_range_begin(GeometryInstance3D{self}, distance)
}
func (self methodsGeometryInstance3D) GetVisibilityRangeBegin() Float {
	return self.Runtime.GeometryInstance3D_get_visibility_range_begin(GeometryInstance3D{self})
}
func (self methodsGeometryInstance3D) SetVisibilityRangeFadeMode(mode GeometryInstance3DVisibilityRangeFadeMode) {
	self.Runtime.GeometryInstance3D_set_visibility_range_fade_mode(GeometryInstance3D{self}, mode)
}
func (self methodsGeometryInstance3D) GetVisibilityRangeFadeMode() GeometryInstance3DVisibilityRangeFadeMode {
	return self.Runtime.GeometryInstance3D_get_visibility_range_fade_mode(GeometryInstance3D{self})
}
func (self methodsGeometryInstance3D) SetInstanceShaderParameter(name string, value any) {
	self.Runtime.GeometryInstance3D_set_instance_shader_parameter(GeometryInstance3D{self}, name, value)
}
func (self methodsGeometryInstance3D) GetInstanceShaderParameter(name string) any {
	return self.Runtime.GeometryInstance3D_get_instance_shader_parameter(GeometryInstance3D{self}, name)
}
func (self methodsGeometryInstance3D) SetExtraCullMargin(margin Float) {
	self.Runtime.GeometryInstance3D_set_extra_cull_margin(GeometryInstance3D{self}, margin)
}
func (self methodsGeometryInstance3D) GetExtraCullMargin() Float {
	return self.Runtime.GeometryInstance3D_get_extra_cull_margin(GeometryInstance3D{self})
}
func (self methodsGeometryInstance3D) SetLightmapScale(scale GeometryInstance3DLightmapScale) {
	self.Runtime.GeometryInstance3D_set_lightmap_scale(GeometryInstance3D{self}, scale)
}
func (self methodsGeometryInstance3D) GetLightmapScale() GeometryInstance3DLightmapScale {
	return self.Runtime.GeometryInstance3D_get_lightmap_scale(GeometryInstance3D{self})
}
func (self methodsGeometryInstance3D) SetGiMode(mode GeometryInstance3DGIMode) {
	self.Runtime.GeometryInstance3D_set_gi_mode(GeometryInstance3D{self}, mode)
}
func (self methodsGeometryInstance3D) GetGiMode() GeometryInstance3DGIMode {
	return self.Runtime.GeometryInstance3D_get_gi_mode(GeometryInstance3D{self})
}
func (self methodsGeometryInstance3D) SetIgnoreOcclusionCulling(ignore_culling bool) {
	self.Runtime.GeometryInstance3D_set_ignore_occlusion_culling(GeometryInstance3D{self}, ignore_culling)
}
func (self methodsGeometryInstance3D) IsIgnoringOcclusionCulling() bool {
	return self.Runtime.GeometryInstance3D_is_ignoring_occlusion_culling(GeometryInstance3D{self})
}
func (self methodsGeometryInstance3D) SetCustomAabb(aabb AABB) {
	self.Runtime.GeometryInstance3D_set_custom_aabb(GeometryInstance3D{self}, aabb)
}
func (self methodsGeometryInstance3D) GetCustomAabb() AABB {
	return self.Runtime.GeometryInstance3D_get_custom_aabb(GeometryInstance3D{self})
}

type methodsGradient struct {
	_ [0]*methodsGradient
	class
}

func (self Gradient) Resource() Resource {
	var parent Resource
	parent.class = self.class
	return parent
}
func (self methodsGradient) AddPoint(offset Float, color Color) {
	self.Runtime.Gradient_add_point(Gradient{self}, offset, color)
}
func (self methodsGradient) RemovePoint(point int64) {
	self.Runtime.Gradient_remove_point(Gradient{self}, point)
}
func (self methodsGradient) SetOffset(point int64, offset Float) {
	self.Runtime.Gradient_set_offset(Gradient{self}, point, offset)
}
func (self methodsGradient) GetOffset(point int64) Float {
	return self.Runtime.Gradient_get_offset(Gradient{self}, point)
}
func (self methodsGradient) Reverse() {
	self.Runtime.Gradient_reverse(Gradient{self})
}
func (self methodsGradient) SetColor(point int64, color Color) {
	self.Runtime.Gradient_set_color(Gradient{self}, point, color)
}
func (self methodsGradient) GetColor(point int64) Color {
	return self.Runtime.Gradient_get_color(Gradient{self}, point)
}
func (self methodsGradient) Sample(offset Float) Color {
	return self.Runtime.Gradient_sample(Gradient{self}, offset)
}
func (self methodsGradient) GetPointCount() int64 {
	return self.Runtime.Gradient_get_point_count(Gradient{self})
}
func (self methodsGradient) SetOffsets(offsets PackedFloat32Array) {
	self.Runtime.Gradient_set_offsets(Gradient{self}, offsets)
}
func (self methodsGradient) GetOffsets() PackedFloat32Array {
	return self.Runtime.Gradient_get_offsets(Gradient{self})
}
func (self methodsGradient) SetColors(colors PackedColorArray) {
	self.Runtime.Gradient_set_colors(Gradient{self}, colors)
}
func (self methodsGradient) GetColors() PackedColorArray {
	return self.Runtime.Gradient_get_colors(Gradient{self})
}
func (self methodsGradient) SetInterpolationMode(interpolation_mode GradientInterpolationMode) {
	self.Runtime.Gradient_set_interpolation_mode(Gradient{self}, interpolation_mode)
}
func (self methodsGradient) GetInterpolationMode() GradientInterpolationMode {
	return self.Runtime.Gradient_get_interpolation_mode(Gradient{self})
}
func (self methodsGradient) SetInterpolationColorSpace(interpolation_color_space GradientColorSpace) {
	self.Runtime.Gradient_set_interpolation_color_space(Gradient{self}, interpolation_color_space)
}
func (self methodsGradient) GetInterpolationColorSpace() GradientColorSpace {
	return self.Runtime.Gradient_get_interpolation_color_space(Gradient{self})
}

type methodsGradientTexture1D struct {
	_ [0]*methodsGradientTexture1D
	class
}

func (self GradientTexture1D) Texture2D() Texture2D {
	var parent Texture2D
	parent.class = self.class
	return parent
}
func (self methodsGradientTexture1D) SetGradient(gradient Gradient) {
	self.Runtime.GradientTexture1D_set_gradient(GradientTexture1D{self}, gradient)
}
func (self methodsGradientTexture1D) GetGradient() Gradient {
	return self.Runtime.GradientTexture1D_get_gradient(GradientTexture1D{self})
}
func (self methodsGradientTexture1D) SetWidth(width int64) {
	self.Runtime.GradientTexture1D_set_width(GradientTexture1D{self}, width)
}
func (self methodsGradientTexture1D) SetUseHdr(enabled bool) {
	self.Runtime.GradientTexture1D_set_use_hdr(GradientTexture1D{self}, enabled)
}
func (self methodsGradientTexture1D) IsUsingHdr() bool {
	return self.Runtime.GradientTexture1D_is_using_hdr(GradientTexture1D{self})
}

type methodsGradientTexture2D struct {
	_ [0]*methodsGradientTexture2D
	class
}

func (self GradientTexture2D) Texture2D() Texture2D {
	var parent Texture2D
	parent.class = self.class
	return parent
}
func (self methodsGradientTexture2D) SetGradient(gradient Gradient) {
	self.Runtime.GradientTexture2D_set_gradient(GradientTexture2D{self}, gradient)
}
func (self methodsGradientTexture2D) GetGradient() Gradient {
	return self.Runtime.GradientTexture2D_get_gradient(GradientTexture2D{self})
}
func (self methodsGradientTexture2D) SetWidth(width int64) {
	self.Runtime.GradientTexture2D_set_width(GradientTexture2D{self}, width)
}
func (self methodsGradientTexture2D) SetHeight(height int64) {
	self.Runtime.GradientTexture2D_set_height(GradientTexture2D{self}, height)
}
func (self methodsGradientTexture2D) SetUseHdr(enabled bool) {
	self.Runtime.GradientTexture2D_set_use_hdr(GradientTexture2D{self}, enabled)
}
func (self methodsGradientTexture2D) IsUsingHdr() bool {
	return self.Runtime.GradientTexture2D_is_using_hdr(GradientTexture2D{self})
}
func (self methodsGradientTexture2D) SetFill(fill GradientTexture2DFill) {
	self.Runtime.GradientTexture2D_set_fill(GradientTexture2D{self}, fill)
}
func (self methodsGradientTexture2D) GetFill() GradientTexture2DFill {
	return self.Runtime.GradientTexture2D_get_fill(GradientTexture2D{self})
}
func (self methodsGradientTexture2D) SetFillFrom(fill_from Vector2) {
	self.Runtime.GradientTexture2D_set_fill_from(GradientTexture2D{self}, fill_from)
}
func (self methodsGradientTexture2D) GetFillFrom() Vector2 {
	return self.Runtime.GradientTexture2D_get_fill_from(GradientTexture2D{self})
}
func (self methodsGradientTexture2D) SetFillTo(fill_to Vector2) {
	self.Runtime.GradientTexture2D_set_fill_to(GradientTexture2D{self}, fill_to)
}
func (self methodsGradientTexture2D) GetFillTo() Vector2 {
	return self.Runtime.GradientTexture2D_get_fill_to(GradientTexture2D{self})
}
func (self methodsGradientTexture2D) SetRepeat(repeat GradientTexture2DRepeat) {
	self.Runtime.GradientTexture2D_set_repeat(GradientTexture2D{self}, repeat)
}
func (self methodsGradientTexture2D) GetRepeat() GradientTexture2DRepeat {
	return self.Runtime.GradientTexture2D_get_repeat(GradientTexture2D{self})
}

type methodsGraphEdit struct {
	_ [0]*methodsGraphEdit
	class
}

func (self GraphEdit) Control() Control { var parent Control; parent.class = self.class; return parent }
func (self methodsGraphEdit) ConnectNode(from_node string, from_port int64, to_node string, to_port int64) int64 {
	return self.Runtime.GraphEdit_connect_node(GraphEdit{self}, from_node, from_port, to_node, to_port)
}
func (self methodsGraphEdit) IsNodeConnected(from_node string, from_port int64, to_node string, to_port int64) bool {
	return self.Runtime.GraphEdit_is_node_connected(GraphEdit{self}, from_node, from_port, to_node, to_port)
}
func (self methodsGraphEdit) DisconnectNode(from_node string, from_port int64, to_node string, to_port int64) {
	self.Runtime.GraphEdit_disconnect_node(GraphEdit{self}, from_node, from_port, to_node, to_port)
}
func (self methodsGraphEdit) SetConnectionActivity(from_node string, from_port int64, to_node string, to_port int64, amount Float) {
	self.Runtime.GraphEdit_set_connection_activity(GraphEdit{self}, from_node, from_port, to_node, to_port, amount)
}
func (self methodsGraphEdit) GetConnectionList() ArrayOf[Dictionary] {
	return self.Runtime.GraphEdit_get_connection_list(GraphEdit{self})
}
func (self methodsGraphEdit) ClearConnections() {
	self.Runtime.GraphEdit_clear_connections(GraphEdit{self})
}
func (self methodsGraphEdit) ForceConnectionDragEnd() {
	self.Runtime.GraphEdit_force_connection_drag_end(GraphEdit{self})
}
func (self methodsGraphEdit) GetScrollOffset() Vector2 {
	return self.Runtime.GraphEdit_get_scroll_offset(GraphEdit{self})
}
func (self methodsGraphEdit) SetScrollOffset(offset Vector2) {
	self.Runtime.GraphEdit_set_scroll_offset(GraphEdit{self}, offset)
}
func (self methodsGraphEdit) AddValidRightDisconnectType(atype int64) {
	self.Runtime.GraphEdit_add_valid_right_disconnect_type(GraphEdit{self}, atype)
}
func (self methodsGraphEdit) RemoveValidRightDisconnectType(atype int64) {
	self.Runtime.GraphEdit_remove_valid_right_disconnect_type(GraphEdit{self}, atype)
}
func (self methodsGraphEdit) AddValidLeftDisconnectType(atype int64) {
	self.Runtime.GraphEdit_add_valid_left_disconnect_type(GraphEdit{self}, atype)
}
func (self methodsGraphEdit) RemoveValidLeftDisconnectType(atype int64) {
	self.Runtime.GraphEdit_remove_valid_left_disconnect_type(GraphEdit{self}, atype)
}
func (self methodsGraphEdit) AddValidConnectionType(from_type int64, to_type int64) {
	self.Runtime.GraphEdit_add_valid_connection_type(GraphEdit{self}, from_type, to_type)
}
func (self methodsGraphEdit) RemoveValidConnectionType(from_type int64, to_type int64) {
	self.Runtime.GraphEdit_remove_valid_connection_type(GraphEdit{self}, from_type, to_type)
}
func (self methodsGraphEdit) IsValidConnectionType(from_type int64, to_type int64) bool {
	return self.Runtime.GraphEdit_is_valid_connection_type(GraphEdit{self}, from_type, to_type)
}
func (self methodsGraphEdit) GetConnectionLine(from_node Vector2, to_node Vector2) PackedVector2Array {
	return self.Runtime.GraphEdit_get_connection_line(GraphEdit{self}, from_node, to_node)
}
func (self methodsGraphEdit) SetPanningScheme(scheme GraphEditPanningScheme) {
	self.Runtime.GraphEdit_set_panning_scheme(GraphEdit{self}, scheme)
}
func (self methodsGraphEdit) GetPanningScheme() GraphEditPanningScheme {
	return self.Runtime.GraphEdit_get_panning_scheme(GraphEdit{self})
}
func (self methodsGraphEdit) SetZoom(zoom Float) {
	self.Runtime.GraphEdit_set_zoom(GraphEdit{self}, zoom)
}
func (self methodsGraphEdit) GetZoom() Float {
	return self.Runtime.GraphEdit_get_zoom(GraphEdit{self})
}
func (self methodsGraphEdit) SetZoomMin(zoom_min Float) {
	self.Runtime.GraphEdit_set_zoom_min(GraphEdit{self}, zoom_min)
}
func (self methodsGraphEdit) GetZoomMin() Float {
	return self.Runtime.GraphEdit_get_zoom_min(GraphEdit{self})
}
func (self methodsGraphEdit) SetZoomMax(zoom_max Float) {
	self.Runtime.GraphEdit_set_zoom_max(GraphEdit{self}, zoom_max)
}
func (self methodsGraphEdit) GetZoomMax() Float {
	return self.Runtime.GraphEdit_get_zoom_max(GraphEdit{self})
}
func (self methodsGraphEdit) SetZoomStep(zoom_step Float) {
	self.Runtime.GraphEdit_set_zoom_step(GraphEdit{self}, zoom_step)
}
func (self methodsGraphEdit) GetZoomStep() Float {
	return self.Runtime.GraphEdit_get_zoom_step(GraphEdit{self})
}
func (self methodsGraphEdit) SetShowGrid(enable bool) {
	self.Runtime.GraphEdit_set_show_grid(GraphEdit{self}, enable)
}
func (self methodsGraphEdit) IsShowingGrid() bool {
	return self.Runtime.GraphEdit_is_showing_grid(GraphEdit{self})
}
func (self methodsGraphEdit) SetGridPattern(pattern GraphEditGridPattern) {
	self.Runtime.GraphEdit_set_grid_pattern(GraphEdit{self}, pattern)
}
func (self methodsGraphEdit) GetGridPattern() GraphEditGridPattern {
	return self.Runtime.GraphEdit_get_grid_pattern(GraphEdit{self})
}
func (self methodsGraphEdit) SetSnappingEnabled(enable bool) {
	self.Runtime.GraphEdit_set_snapping_enabled(GraphEdit{self}, enable)
}
func (self methodsGraphEdit) IsSnappingEnabled() bool {
	return self.Runtime.GraphEdit_is_snapping_enabled(GraphEdit{self})
}
func (self methodsGraphEdit) SetSnappingDistance(pixels int64) {
	self.Runtime.GraphEdit_set_snapping_distance(GraphEdit{self}, pixels)
}
func (self methodsGraphEdit) GetSnappingDistance() int64 {
	return self.Runtime.GraphEdit_get_snapping_distance(GraphEdit{self})
}
func (self methodsGraphEdit) SetConnectionLinesCurvature(curvature Float) {
	self.Runtime.GraphEdit_set_connection_lines_curvature(GraphEdit{self}, curvature)
}
func (self methodsGraphEdit) GetConnectionLinesCurvature() Float {
	return self.Runtime.GraphEdit_get_connection_lines_curvature(GraphEdit{self})
}
func (self methodsGraphEdit) SetConnectionLinesThickness(pixels Float) {
	self.Runtime.GraphEdit_set_connection_lines_thickness(GraphEdit{self}, pixels)
}
func (self methodsGraphEdit) GetConnectionLinesThickness() Float {
	return self.Runtime.GraphEdit_get_connection_lines_thickness(GraphEdit{self})
}
func (self methodsGraphEdit) SetConnectionLinesAntialiased(pixels bool) {
	self.Runtime.GraphEdit_set_connection_lines_antialiased(GraphEdit{self}, pixels)
}
func (self methodsGraphEdit) IsConnectionLinesAntialiased() bool {
	return self.Runtime.GraphEdit_is_connection_lines_antialiased(GraphEdit{self})
}
func (self methodsGraphEdit) SetMinimapSize(size Vector2) {
	self.Runtime.GraphEdit_set_minimap_size(GraphEdit{self}, size)
}
func (self methodsGraphEdit) GetMinimapSize() Vector2 {
	return self.Runtime.GraphEdit_get_minimap_size(GraphEdit{self})
}
func (self methodsGraphEdit) SetMinimapOpacity(opacity Float) {
	self.Runtime.GraphEdit_set_minimap_opacity(GraphEdit{self}, opacity)
}
func (self methodsGraphEdit) GetMinimapOpacity() Float {
	return self.Runtime.GraphEdit_get_minimap_opacity(GraphEdit{self})
}
func (self methodsGraphEdit) SetMinimapEnabled(enable bool) {
	self.Runtime.GraphEdit_set_minimap_enabled(GraphEdit{self}, enable)
}
func (self methodsGraphEdit) IsMinimapEnabled() bool {
	return self.Runtime.GraphEdit_is_minimap_enabled(GraphEdit{self})
}
func (self methodsGraphEdit) SetShowMenu(hidden bool) {
	self.Runtime.GraphEdit_set_show_menu(GraphEdit{self}, hidden)
}
func (self methodsGraphEdit) IsShowingMenu() bool {
	return self.Runtime.GraphEdit_is_showing_menu(GraphEdit{self})
}
func (self methodsGraphEdit) SetShowZoomLabel(enable bool) {
	self.Runtime.GraphEdit_set_show_zoom_label(GraphEdit{self}, enable)
}
func (self methodsGraphEdit) IsShowingZoomLabel() bool {
	return self.Runtime.GraphEdit_is_showing_zoom_label(GraphEdit{self})
}
func (self methodsGraphEdit) SetShowGridButtons(hidden bool) {
	self.Runtime.GraphEdit_set_show_grid_buttons(GraphEdit{self}, hidden)
}
func (self methodsGraphEdit) IsShowingGridButtons() bool {
	return self.Runtime.GraphEdit_is_showing_grid_buttons(GraphEdit{self})
}
func (self methodsGraphEdit) SetShowZoomButtons(hidden bool) {
	self.Runtime.GraphEdit_set_show_zoom_buttons(GraphEdit{self}, hidden)
}
func (self methodsGraphEdit) IsShowingZoomButtons() bool {
	return self.Runtime.GraphEdit_is_showing_zoom_buttons(GraphEdit{self})
}
func (self methodsGraphEdit) SetShowMinimapButton(hidden bool) {
	self.Runtime.GraphEdit_set_show_minimap_button(GraphEdit{self}, hidden)
}
func (self methodsGraphEdit) IsShowingMinimapButton() bool {
	return self.Runtime.GraphEdit_is_showing_minimap_button(GraphEdit{self})
}
func (self methodsGraphEdit) SetShowArrangeButton(hidden bool) {
	self.Runtime.GraphEdit_set_show_arrange_button(GraphEdit{self}, hidden)
}
func (self methodsGraphEdit) IsShowingArrangeButton() bool {
	return self.Runtime.GraphEdit_is_showing_arrange_button(GraphEdit{self})
}
func (self methodsGraphEdit) SetRightDisconnects(enable bool) {
	self.Runtime.GraphEdit_set_right_disconnects(GraphEdit{self}, enable)
}
func (self methodsGraphEdit) IsRightDisconnectsEnabled() bool {
	return self.Runtime.GraphEdit_is_right_disconnects_enabled(GraphEdit{self})
}
func (self methodsGraphEdit) GetMenuHbox() HBoxContainer {
	return self.Runtime.GraphEdit_get_menu_hbox(GraphEdit{self})
}
func (self methodsGraphEdit) ArrangeNodes() {
	self.Runtime.GraphEdit_arrange_nodes(GraphEdit{self})
}
func (self methodsGraphEdit) SetSelected(node Node) {
	self.Runtime.GraphEdit_set_selected(GraphEdit{self}, node)
}

type methodsGraphElement struct {
	_ [0]*methodsGraphElement
	class
}

func (self GraphElement) Container() Container {
	var parent Container
	parent.class = self.class
	return parent
}
func (self methodsGraphElement) SetResizable(resizable bool) {
	self.Runtime.GraphElement_set_resizable(GraphElement{self}, resizable)
}
func (self methodsGraphElement) IsResizable() bool {
	return self.Runtime.GraphElement_is_resizable(GraphElement{self})
}
func (self methodsGraphElement) SetDraggable(draggable bool) {
	self.Runtime.GraphElement_set_draggable(GraphElement{self}, draggable)
}
func (self methodsGraphElement) IsDraggable() bool {
	return self.Runtime.GraphElement_is_draggable(GraphElement{self})
}
func (self methodsGraphElement) SetSelectable(selectable bool) {
	self.Runtime.GraphElement_set_selectable(GraphElement{self}, selectable)
}
func (self methodsGraphElement) IsSelectable() bool {
	return self.Runtime.GraphElement_is_selectable(GraphElement{self})
}
func (self methodsGraphElement) SetSelected(selected bool) {
	self.Runtime.GraphElement_set_selected(GraphElement{self}, selected)
}
func (self methodsGraphElement) IsSelected() bool {
	return self.Runtime.GraphElement_is_selected(GraphElement{self})
}
func (self methodsGraphElement) SetPositionOffset(offset Vector2) {
	self.Runtime.GraphElement_set_position_offset(GraphElement{self}, offset)
}
func (self methodsGraphElement) GetPositionOffset() Vector2 {
	return self.Runtime.GraphElement_get_position_offset(GraphElement{self})
}

type methodsGraphNode struct {
	_ [0]*methodsGraphNode
	class
}

func (self GraphNode) GraphElement() GraphElement {
	var parent GraphElement
	parent.class = self.class
	return parent
}
func (self methodsGraphNode) SetTitle(title string) {
	self.Runtime.GraphNode_set_title(GraphNode{self}, title)
}
func (self methodsGraphNode) GetTitle() string {
	return self.Runtime.GraphNode_get_title(GraphNode{self})
}
func (self methodsGraphNode) GetTitlebarHbox() HBoxContainer {
	return self.Runtime.GraphNode_get_titlebar_hbox(GraphNode{self})
}
func (self methodsGraphNode) SetSlot(slot_index int64, enable_left_port bool, type_left int64, color_left Color, enable_right_port bool, type_right int64, color_right Color, custom_icon_left Texture2D, custom_icon_right Texture2D, draw_stylebox bool) {
	self.Runtime.GraphNode_set_slot(GraphNode{self}, slot_index, enable_left_port, type_left, color_left, enable_right_port, type_right, color_right, custom_icon_left, custom_icon_right, draw_stylebox)
}
func (self methodsGraphNode) ClearSlot(slot_index int64) {
	self.Runtime.GraphNode_clear_slot(GraphNode{self}, slot_index)
}
func (self methodsGraphNode) ClearAllSlots() {
	self.Runtime.GraphNode_clear_all_slots(GraphNode{self})
}
func (self methodsGraphNode) IsSlotEnabledLeft(slot_index int64) bool {
	return self.Runtime.GraphNode_is_slot_enabled_left(GraphNode{self}, slot_index)
}
func (self methodsGraphNode) SetSlotEnabledLeft(slot_index int64, enable bool) {
	self.Runtime.GraphNode_set_slot_enabled_left(GraphNode{self}, slot_index, enable)
}
func (self methodsGraphNode) SetSlotTypeLeft(slot_index int64, atype int64) {
	self.Runtime.GraphNode_set_slot_type_left(GraphNode{self}, slot_index, atype)
}
func (self methodsGraphNode) GetSlotTypeLeft(slot_index int64) int64 {
	return self.Runtime.GraphNode_get_slot_type_left(GraphNode{self}, slot_index)
}
func (self methodsGraphNode) SetSlotColorLeft(slot_index int64, color Color) {
	self.Runtime.GraphNode_set_slot_color_left(GraphNode{self}, slot_index, color)
}
func (self methodsGraphNode) GetSlotColorLeft(slot_index int64) Color {
	return self.Runtime.GraphNode_get_slot_color_left(GraphNode{self}, slot_index)
}
func (self methodsGraphNode) IsSlotEnabledRight(slot_index int64) bool {
	return self.Runtime.GraphNode_is_slot_enabled_right(GraphNode{self}, slot_index)
}
func (self methodsGraphNode) SetSlotEnabledRight(slot_index int64, enable bool) {
	self.Runtime.GraphNode_set_slot_enabled_right(GraphNode{self}, slot_index, enable)
}
func (self methodsGraphNode) SetSlotTypeRight(slot_index int64, atype int64) {
	self.Runtime.GraphNode_set_slot_type_right(GraphNode{self}, slot_index, atype)
}
func (self methodsGraphNode) GetSlotTypeRight(slot_index int64) int64 {
	return self.Runtime.GraphNode_get_slot_type_right(GraphNode{self}, slot_index)
}
func (self methodsGraphNode) SetSlotColorRight(slot_index int64, color Color) {
	self.Runtime.GraphNode_set_slot_color_right(GraphNode{self}, slot_index, color)
}
func (self methodsGraphNode) GetSlotColorRight(slot_index int64) Color {
	return self.Runtime.GraphNode_get_slot_color_right(GraphNode{self}, slot_index)
}
func (self methodsGraphNode) IsSlotDrawStylebox(slot_index int64) bool {
	return self.Runtime.GraphNode_is_slot_draw_stylebox(GraphNode{self}, slot_index)
}
func (self methodsGraphNode) SetSlotDrawStylebox(slot_index int64, enable bool) {
	self.Runtime.GraphNode_set_slot_draw_stylebox(GraphNode{self}, slot_index, enable)
}
func (self methodsGraphNode) GetInputPortCount() int64 {
	return self.Runtime.GraphNode_get_input_port_count(GraphNode{self})
}
func (self methodsGraphNode) GetInputPortPosition(port_idx int64) Vector2 {
	return self.Runtime.GraphNode_get_input_port_position(GraphNode{self}, port_idx)
}
func (self methodsGraphNode) GetInputPortType(port_idx int64) int64 {
	return self.Runtime.GraphNode_get_input_port_type(GraphNode{self}, port_idx)
}
func (self methodsGraphNode) GetInputPortColor(port_idx int64) Color {
	return self.Runtime.GraphNode_get_input_port_color(GraphNode{self}, port_idx)
}
func (self methodsGraphNode) GetInputPortSlot(port_idx int64) int64 {
	return self.Runtime.GraphNode_get_input_port_slot(GraphNode{self}, port_idx)
}
func (self methodsGraphNode) GetOutputPortCount() int64 {
	return self.Runtime.GraphNode_get_output_port_count(GraphNode{self})
}
func (self methodsGraphNode) GetOutputPortPosition(port_idx int64) Vector2 {
	return self.Runtime.GraphNode_get_output_port_position(GraphNode{self}, port_idx)
}
func (self methodsGraphNode) GetOutputPortType(port_idx int64) int64 {
	return self.Runtime.GraphNode_get_output_port_type(GraphNode{self}, port_idx)
}
func (self methodsGraphNode) GetOutputPortColor(port_idx int64) Color {
	return self.Runtime.GraphNode_get_output_port_color(GraphNode{self}, port_idx)
}
func (self methodsGraphNode) GetOutputPortSlot(port_idx int64) int64 {
	return self.Runtime.GraphNode_get_output_port_slot(GraphNode{self}, port_idx)
}

type methodsGridContainer struct {
	_ [0]*methodsGridContainer
	class
}

func (self GridContainer) Container() Container {
	var parent Container
	parent.class = self.class
	return parent
}
func (self methodsGridContainer) SetColumns(columns int64) {
	self.Runtime.GridContainer_set_columns(GridContainer{self}, columns)
}
func (self methodsGridContainer) GetColumns() int64 {
	return self.Runtime.GridContainer_get_columns(GridContainer{self})
}

type methodsGridMap struct {
	_ [0]*methodsGridMap
	class
}

func (self GridMap) Node3D() Node3D { var parent Node3D; parent.class = self.class; return parent }
func (self methodsGridMap) SetCollisionLayer(layer int64) {
	self.Runtime.GridMap_set_collision_layer(GridMap{self}, layer)
}
func (self methodsGridMap) GetCollisionLayer() int64 {
	return self.Runtime.GridMap_get_collision_layer(GridMap{self})
}
func (self methodsGridMap) SetCollisionMask(mask int64) {
	self.Runtime.GridMap_set_collision_mask(GridMap{self}, mask)
}
func (self methodsGridMap) GetCollisionMask() int64 {
	return self.Runtime.GridMap_get_collision_mask(GridMap{self})
}
func (self methodsGridMap) SetCollisionMaskValue(layer_number int64, value bool) {
	self.Runtime.GridMap_set_collision_mask_value(GridMap{self}, layer_number, value)
}
func (self methodsGridMap) GetCollisionMaskValue(layer_number int64) bool {
	return self.Runtime.GridMap_get_collision_mask_value(GridMap{self}, layer_number)
}
func (self methodsGridMap) SetCollisionLayerValue(layer_number int64, value bool) {
	self.Runtime.GridMap_set_collision_layer_value(GridMap{self}, layer_number, value)
}
func (self methodsGridMap) GetCollisionLayerValue(layer_number int64) bool {
	return self.Runtime.GridMap_get_collision_layer_value(GridMap{self}, layer_number)
}
func (self methodsGridMap) SetCollisionPriority(priority Float) {
	self.Runtime.GridMap_set_collision_priority(GridMap{self}, priority)
}
func (self methodsGridMap) GetCollisionPriority() Float {
	return self.Runtime.GridMap_get_collision_priority(GridMap{self})
}
func (self methodsGridMap) SetPhysicsMaterial(material PhysicsMaterial) {
	self.Runtime.GridMap_set_physics_material(GridMap{self}, material)
}
func (self methodsGridMap) GetPhysicsMaterial() PhysicsMaterial {
	return self.Runtime.GridMap_get_physics_material(GridMap{self})
}
func (self methodsGridMap) SetBakeNavigation(bake_navigation bool) {
	self.Runtime.GridMap_set_bake_navigation(GridMap{self}, bake_navigation)
}
func (self methodsGridMap) IsBakingNavigation() bool {
	return self.Runtime.GridMap_is_baking_navigation(GridMap{self})
}
func (self methodsGridMap) SetNavigationMap(navigation_map RID) {
	self.Runtime.GridMap_set_navigation_map(GridMap{self}, navigation_map)
}
func (self methodsGridMap) GetNavigationMap() RID {
	return self.Runtime.GridMap_get_navigation_map(GridMap{self})
}
func (self methodsGridMap) SetMeshLibrary(mesh_library MeshLibrary) {
	self.Runtime.GridMap_set_mesh_library(GridMap{self}, mesh_library)
}
func (self methodsGridMap) GetMeshLibrary() MeshLibrary {
	return self.Runtime.GridMap_get_mesh_library(GridMap{self})
}
func (self methodsGridMap) SetCellSize(size Vector3) {
	self.Runtime.GridMap_set_cell_size(GridMap{self}, size)
}
func (self methodsGridMap) GetCellSize() Vector3 {
	return self.Runtime.GridMap_get_cell_size(GridMap{self})
}
func (self methodsGridMap) SetCellScale(scale Float) {
	self.Runtime.GridMap_set_cell_scale(GridMap{self}, scale)
}
func (self methodsGridMap) GetCellScale() Float {
	return self.Runtime.GridMap_get_cell_scale(GridMap{self})
}
func (self methodsGridMap) SetOctantSize(size int64) {
	self.Runtime.GridMap_set_octant_size(GridMap{self}, size)
}
func (self methodsGridMap) GetOctantSize() int64 {
	return self.Runtime.GridMap_get_octant_size(GridMap{self})
}
func (self methodsGridMap) SetCellItem(position Vector3i, item int64, orientation int64) {
	self.Runtime.GridMap_set_cell_item(GridMap{self}, position, item, orientation)
}
func (self methodsGridMap) GetCellItem(position Vector3i) int64 {
	return self.Runtime.GridMap_get_cell_item(GridMap{self}, position)
}
func (self methodsGridMap) GetCellItemOrientation(position Vector3i) int64 {
	return self.Runtime.GridMap_get_cell_item_orientation(GridMap{self}, position)
}
func (self methodsGridMap) GetCellItemBasis(position Vector3i) Basis {
	return self.Runtime.GridMap_get_cell_item_basis(GridMap{self}, position)
}
func (self methodsGridMap) GetBasisWithOrthogonalIndex(index int64) Basis {
	return self.Runtime.GridMap_get_basis_with_orthogonal_index(GridMap{self}, index)
}
func (self methodsGridMap) GetOrthogonalIndexFromBasis(basis Basis) int64 {
	return self.Runtime.GridMap_get_orthogonal_index_from_basis(GridMap{self}, basis)
}
func (self methodsGridMap) LocalToMap(local_position Vector3) Vector3i {
	return self.Runtime.GridMap_local_to_map(GridMap{self}, local_position)
}
func (self methodsGridMap) MapToLocal(map_position Vector3i) Vector3 {
	return self.Runtime.GridMap_map_to_local(GridMap{self}, map_position)
}
func (self methodsGridMap) ResourceChanged(resource Resource) {
	self.Runtime.GridMap_resource_changed(GridMap{self}, resource)
}
func (self methodsGridMap) SetCenterX(enable bool) {
	self.Runtime.GridMap_set_center_x(GridMap{self}, enable)
}
func (self methodsGridMap) GetCenterX() bool {
	return self.Runtime.GridMap_get_center_x(GridMap{self})
}
func (self methodsGridMap) SetCenterY(enable bool) {
	self.Runtime.GridMap_set_center_y(GridMap{self}, enable)
}
func (self methodsGridMap) GetCenterY() bool {
	return self.Runtime.GridMap_get_center_y(GridMap{self})
}
func (self methodsGridMap) SetCenterZ(enable bool) {
	self.Runtime.GridMap_set_center_z(GridMap{self}, enable)
}
func (self methodsGridMap) GetCenterZ() bool {
	return self.Runtime.GridMap_get_center_z(GridMap{self})
}
func (self methodsGridMap) Clear() {
	self.Runtime.GridMap_clear(GridMap{self})
}
func (self methodsGridMap) GetUsedCells() ArrayOf[Vector3i] {
	return self.Runtime.GridMap_get_used_cells(GridMap{self})
}
func (self methodsGridMap) GetUsedCellsByItem(item int64) ArrayOf[Vector3i] {
	return self.Runtime.GridMap_get_used_cells_by_item(GridMap{self}, item)
}
func (self methodsGridMap) GetMeshes() Array {
	return self.Runtime.GridMap_get_meshes(GridMap{self})
}
func (self methodsGridMap) GetBakeMeshes() Array {
	return self.Runtime.GridMap_get_bake_meshes(GridMap{self})
}
func (self methodsGridMap) GetBakeMeshInstance(idx int64) RID {
	return self.Runtime.GridMap_get_bake_mesh_instance(GridMap{self}, idx)
}
func (self methodsGridMap) ClearBakedMeshes() {
	self.Runtime.GridMap_clear_baked_meshes(GridMap{self})
}
func (self methodsGridMap) MakeBakedMeshes(gen_lightmap_uv bool, lightmap_uv_texel_size Float) {
	self.Runtime.GridMap_make_baked_meshes(GridMap{self}, gen_lightmap_uv, lightmap_uv_texel_size)
}

type methodsGrooveJoint2D struct {
	_ [0]*methodsGrooveJoint2D
	class
}

func (self GrooveJoint2D) Joint2D() Joint2D {
	var parent Joint2D
	parent.class = self.class
	return parent
}
func (self methodsGrooveJoint2D) SetLength(length Float) {
	self.Runtime.GrooveJoint2D_set_length(GrooveJoint2D{self}, length)
}
func (self methodsGrooveJoint2D) GetLength() Float {
	return self.Runtime.GrooveJoint2D_get_length(GrooveJoint2D{self})
}
func (self methodsGrooveJoint2D) SetInitialOffset(offset Float) {
	self.Runtime.GrooveJoint2D_set_initial_offset(GrooveJoint2D{self}, offset)
}
func (self methodsGrooveJoint2D) GetInitialOffset() Float {
	return self.Runtime.GrooveJoint2D_get_initial_offset(GrooveJoint2D{self})
}

type methodsHBoxContainer struct {
	_ [0]*methodsHBoxContainer
	class
}

func (self HBoxContainer) BoxContainer() BoxContainer {
	var parent BoxContainer
	parent.class = self.class
	return parent
}

type methodsHFlowContainer struct {
	_ [0]*methodsHFlowContainer
	class
}

func (self HFlowContainer) FlowContainer() FlowContainer {
	var parent FlowContainer
	parent.class = self.class
	return parent
}

type methodsHMACContext struct {
	_ [0]*methodsHMACContext
	class
}

func (self HMACContext) RefCounted() RefCounted {
	var parent RefCounted
	parent.class = self.class
	return parent
}
func (self methodsHMACContext) Start(hash_type HashingContextHashType, key PackedByteArray) int64 {
	return self.Runtime.HMACContext_start(HMACContext{self}, hash_type, key)
}
func (self methodsHMACContext) Update(data PackedByteArray) int64 {
	return self.Runtime.HMACContext_update(HMACContext{self}, data)
}
func (self methodsHMACContext) Finish() PackedByteArray {
	return self.Runtime.HMACContext_finish(HMACContext{self})
}

type methodsHScrollBar struct {
	_ [0]*methodsHScrollBar
	class
}

func (self HScrollBar) ScrollBar() ScrollBar {
	var parent ScrollBar
	parent.class = self.class
	return parent
}

type methodsHSeparator struct {
	_ [0]*methodsHSeparator
	class
}

func (self HSeparator) Separator() Separator {
	var parent Separator
	parent.class = self.class
	return parent
}

type methodsHSlider struct {
	_ [0]*methodsHSlider
	class
}

func (self HSlider) Slider() Slider { var parent Slider; parent.class = self.class; return parent }

type methodsHSplitContainer struct {
	_ [0]*methodsHSplitContainer
	class
}

func (self HSplitContainer) SplitContainer() SplitContainer {
	var parent SplitContainer
	parent.class = self.class
	return parent
}

type methodsHTTPClient struct {
	_ [0]*methodsHTTPClient
	class
}

func (self HTTPClient) RefCounted() RefCounted {
	var parent RefCounted
	parent.class = self.class
	return parent
}
func (self methodsHTTPClient) ConnectToHost(host string, port int64, tls_options TLSOptions) int64 {
	return self.Runtime.HTTPClient_connect_to_host(HTTPClient{self}, host, port, tls_options)
}
func (self methodsHTTPClient) SetConnection(connection StreamPeer) {
	self.Runtime.HTTPClient_set_connection(HTTPClient{self}, connection)
}
func (self methodsHTTPClient) GetConnection() StreamPeer {
	return self.Runtime.HTTPClient_get_connection(HTTPClient{self})
}
func (self methodsHTTPClient) RequestRaw(method HTTPClientMethod, url string, headers PackedStringArray, body PackedByteArray) int64 {
	return self.Runtime.HTTPClient_request_raw(HTTPClient{self}, method, url, headers, body)
}
func (self methodsHTTPClient) Request(method HTTPClientMethod, url string, headers PackedStringArray, body string) int64 {
	return self.Runtime.HTTPClient_request(HTTPClient{self}, method, url, headers, body)
}
func (self methodsHTTPClient) Close() {
	self.Runtime.HTTPClient_close(HTTPClient{self})
}
func (self methodsHTTPClient) HasResponse() bool {
	return self.Runtime.HTTPClient_has_response(HTTPClient{self})
}
func (self methodsHTTPClient) IsResponseChunked() bool {
	return self.Runtime.HTTPClient_is_response_chunked(HTTPClient{self})
}
func (self methodsHTTPClient) GetResponseCode() int64 {
	return self.Runtime.HTTPClient_get_response_code(HTTPClient{self})
}
func (self methodsHTTPClient) GetResponseHeaders() PackedStringArray {
	return self.Runtime.HTTPClient_get_response_headers(HTTPClient{self})
}
func (self methodsHTTPClient) GetResponseHeadersAsDictionary() Dictionary {
	return self.Runtime.HTTPClient_get_response_headers_as_dictionary(HTTPClient{self})
}
func (self methodsHTTPClient) GetResponseBodyLength() int64 {
	return self.Runtime.HTTPClient_get_response_body_length(HTTPClient{self})
}
func (self methodsHTTPClient) ReadResponseBodyChunk() PackedByteArray {
	return self.Runtime.HTTPClient_read_response_body_chunk(HTTPClient{self})
}
func (self methodsHTTPClient) SetReadChunkSize(bytes int64) {
	self.Runtime.HTTPClient_set_read_chunk_size(HTTPClient{self}, bytes)
}
func (self methodsHTTPClient) GetReadChunkSize() int64 {
	return self.Runtime.HTTPClient_get_read_chunk_size(HTTPClient{self})
}
func (self methodsHTTPClient) SetBlockingMode(enabled bool) {
	self.Runtime.HTTPClient_set_blocking_mode(HTTPClient{self}, enabled)
}
func (self methodsHTTPClient) IsBlockingModeEnabled() bool {
	return self.Runtime.HTTPClient_is_blocking_mode_enabled(HTTPClient{self})
}
func (self methodsHTTPClient) GetStatus() HTTPClientStatus {
	return self.Runtime.HTTPClient_get_status(HTTPClient{self})
}
func (self methodsHTTPClient) Poll() int64 {
	return self.Runtime.HTTPClient_poll(HTTPClient{self})
}
func (self methodsHTTPClient) SetHttpProxy(host string, port int64) {
	self.Runtime.HTTPClient_set_http_proxy(HTTPClient{self}, host, port)
}
func (self methodsHTTPClient) SetHttpsProxy(host string, port int64) {
	self.Runtime.HTTPClient_set_https_proxy(HTTPClient{self}, host, port)
}
func (self methodsHTTPClient) QueryStringFromDict(fields Dictionary) string {
	return self.Runtime.HTTPClient_query_string_from_dict(HTTPClient{self}, fields)
}

type methodsHTTPRequest struct {
	_ [0]*methodsHTTPRequest
	class
}

func (self HTTPRequest) Node() Node { var parent Node; parent.class = self.class; return parent }
func (self methodsHTTPRequest) Request(url string, custom_headers PackedStringArray, method HTTPClientMethod, request_data string) int64 {
	return self.Runtime.HTTPRequest_request(HTTPRequest{self}, url, custom_headers, method, request_data)
}
func (self methodsHTTPRequest) RequestRaw(url string, custom_headers PackedStringArray, method HTTPClientMethod, request_data_raw PackedByteArray) int64 {
	return self.Runtime.HTTPRequest_request_raw(HTTPRequest{self}, url, custom_headers, method, request_data_raw)
}
func (self methodsHTTPRequest) CancelRequest() {
	self.Runtime.HTTPRequest_cancel_request(HTTPRequest{self})
}
func (self methodsHTTPRequest) SetTlsOptions(client_options TLSOptions) {
	self.Runtime.HTTPRequest_set_tls_options(HTTPRequest{self}, client_options)
}
func (self methodsHTTPRequest) GetHttpClientStatus() HTTPClientStatus {
	return self.Runtime.HTTPRequest_get_http_client_status(HTTPRequest{self})
}
func (self methodsHTTPRequest) SetUseThreads(enable bool) {
	self.Runtime.HTTPRequest_set_use_threads(HTTPRequest{self}, enable)
}
func (self methodsHTTPRequest) IsUsingThreads() bool {
	return self.Runtime.HTTPRequest_is_using_threads(HTTPRequest{self})
}
func (self methodsHTTPRequest) SetAcceptGzip(enable bool) {
	self.Runtime.HTTPRequest_set_accept_gzip(HTTPRequest{self}, enable)
}
func (self methodsHTTPRequest) IsAcceptingGzip() bool {
	return self.Runtime.HTTPRequest_is_accepting_gzip(HTTPRequest{self})
}
func (self methodsHTTPRequest) SetBodySizeLimit(bytes int64) {
	self.Runtime.HTTPRequest_set_body_size_limit(HTTPRequest{self}, bytes)
}
func (self methodsHTTPRequest) GetBodySizeLimit() int64 {
	return self.Runtime.HTTPRequest_get_body_size_limit(HTTPRequest{self})
}
func (self methodsHTTPRequest) SetMaxRedirects(amount int64) {
	self.Runtime.HTTPRequest_set_max_redirects(HTTPRequest{self}, amount)
}
func (self methodsHTTPRequest) GetMaxRedirects() int64 {
	return self.Runtime.HTTPRequest_get_max_redirects(HTTPRequest{self})
}
func (self methodsHTTPRequest) SetDownloadFile(path string) {
	self.Runtime.HTTPRequest_set_download_file(HTTPRequest{self}, path)
}
func (self methodsHTTPRequest) GetDownloadFile() string {
	return self.Runtime.HTTPRequest_get_download_file(HTTPRequest{self})
}
func (self methodsHTTPRequest) GetDownloadedBytes() int64 {
	return self.Runtime.HTTPRequest_get_downloaded_bytes(HTTPRequest{self})
}
func (self methodsHTTPRequest) GetBodySize() int64 {
	return self.Runtime.HTTPRequest_get_body_size(HTTPRequest{self})
}
func (self methodsHTTPRequest) SetTimeout(timeout Float) {
	self.Runtime.HTTPRequest_set_timeout(HTTPRequest{self}, timeout)
}
func (self methodsHTTPRequest) GetTimeout() Float {
	return self.Runtime.HTTPRequest_get_timeout(HTTPRequest{self})
}
func (self methodsHTTPRequest) SetDownloadChunkSize(chunk_size int64) {
	self.Runtime.HTTPRequest_set_download_chunk_size(HTTPRequest{self}, chunk_size)
}
func (self methodsHTTPRequest) GetDownloadChunkSize() int64 {
	return self.Runtime.HTTPRequest_get_download_chunk_size(HTTPRequest{self})
}
func (self methodsHTTPRequest) SetHttpProxy(host string, port int64) {
	self.Runtime.HTTPRequest_set_http_proxy(HTTPRequest{self}, host, port)
}
func (self methodsHTTPRequest) SetHttpsProxy(host string, port int64) {
	self.Runtime.HTTPRequest_set_https_proxy(HTTPRequest{self}, host, port)
}

type methodsHashingContext struct {
	_ [0]*methodsHashingContext
	class
}

func (self HashingContext) RefCounted() RefCounted {
	var parent RefCounted
	parent.class = self.class
	return parent
}
func (self methodsHashingContext) Start(atype HashingContextHashType) int64 {
	return self.Runtime.HashingContext_start(HashingContext{self}, atype)
}
func (self methodsHashingContext) Update(chunk PackedByteArray) int64 {
	return self.Runtime.HashingContext_update(HashingContext{self}, chunk)
}
func (self methodsHashingContext) Finish() PackedByteArray {
	return self.Runtime.HashingContext_finish(HashingContext{self})
}

type methodsHeightMapShape3D struct {
	_ [0]*methodsHeightMapShape3D
	class
}

func (self HeightMapShape3D) Shape3D() Shape3D {
	var parent Shape3D
	parent.class = self.class
	return parent
}
func (self methodsHeightMapShape3D) SetMapWidth(width int64) {
	self.Runtime.HeightMapShape3D_set_map_width(HeightMapShape3D{self}, width)
}
func (self methodsHeightMapShape3D) GetMapWidth() int64 {
	return self.Runtime.HeightMapShape3D_get_map_width(HeightMapShape3D{self})
}
func (self methodsHeightMapShape3D) SetMapDepth(height int64) {
	self.Runtime.HeightMapShape3D_set_map_depth(HeightMapShape3D{self}, height)
}
func (self methodsHeightMapShape3D) GetMapDepth() int64 {
	return self.Runtime.HeightMapShape3D_get_map_depth(HeightMapShape3D{self})
}
func (self methodsHeightMapShape3D) SetMapData(data PackedFloat32Array) {
	self.Runtime.HeightMapShape3D_set_map_data(HeightMapShape3D{self}, data)
}
func (self methodsHeightMapShape3D) GetMapData() PackedFloat32Array {
	return self.Runtime.HeightMapShape3D_get_map_data(HeightMapShape3D{self})
}

type methodsHingeJoint3D struct {
	_ [0]*methodsHingeJoint3D
	class
}

func (self HingeJoint3D) Joint3D() Joint3D {
	var parent Joint3D
	parent.class = self.class
	return parent
}
func (self methodsHingeJoint3D) SetParam(param HingeJoint3DParam, value Float) {
	self.Runtime.HingeJoint3D_set_param(HingeJoint3D{self}, param, value)
}
func (self methodsHingeJoint3D) GetParam(param HingeJoint3DParam) Float {
	return self.Runtime.HingeJoint3D_get_param(HingeJoint3D{self}, param)
}
func (self methodsHingeJoint3D) SetFlag(flag HingeJoint3DFlag, enabled bool) {
	self.Runtime.HingeJoint3D_set_flag(HingeJoint3D{self}, flag, enabled)
}
func (self methodsHingeJoint3D) GetFlag(flag HingeJoint3DFlag) bool {
	return self.Runtime.HingeJoint3D_get_flag(HingeJoint3D{self}, flag)
}

type methodsIP struct {
	_ [0]*methodsIP
	class
}

func (self IP) Object() Object { var parent Object; parent.class = self.class; return parent }
func (self methodsIP) ResolveHostname(host string, ip_type IPType) string {
	return self.Runtime.IP_resolve_hostname(IP{self}, host, ip_type)
}
func (self methodsIP) ResolveHostnameAddresses(host string, ip_type IPType) PackedStringArray {
	return self.Runtime.IP_resolve_hostname_addresses(IP{self}, host, ip_type)
}
func (self methodsIP) ResolveHostnameQueueItem(host string, ip_type IPType) int64 {
	return self.Runtime.IP_resolve_hostname_queue_item(IP{self}, host, ip_type)
}
func (self methodsIP) GetResolveItemStatus(id int64) IPResolverStatus {
	return self.Runtime.IP_get_resolve_item_status(IP{self}, id)
}
func (self methodsIP) GetResolveItemAddress(id int64) string {
	return self.Runtime.IP_get_resolve_item_address(IP{self}, id)
}
func (self methodsIP) GetResolveItemAddresses(id int64) Array {
	return self.Runtime.IP_get_resolve_item_addresses(IP{self}, id)
}
func (self methodsIP) EraseResolveItem(id int64) {
	self.Runtime.IP_erase_resolve_item(IP{self}, id)
}
func (self methodsIP) GetLocalAddresses() PackedStringArray {
	return self.Runtime.IP_get_local_addresses(IP{self})
}
func (self methodsIP) GetLocalInterfaces() ArrayOf[Dictionary] {
	return self.Runtime.IP_get_local_interfaces(IP{self})
}
func (self methodsIP) ClearCache(hostname string) {
	self.Runtime.IP_clear_cache(IP{self}, hostname)
}

type methodsImage struct {
	_ [0]*methodsImage
	class
}

func (self Image) Resource() Resource { var parent Resource; parent.class = self.class; return parent }
func (self methodsImage) GetWidth() int64 {
	return self.Runtime.Image_get_width(Image{self})
}
func (self methodsImage) GetHeight() int64 {
	return self.Runtime.Image_get_height(Image{self})
}
func (self methodsImage) GetSize() Vector2i {
	return self.Runtime.Image_get_size(Image{self})
}
func (self methodsImage) HasMipmaps() bool {
	return self.Runtime.Image_has_mipmaps(Image{self})
}
func (self methodsImage) GetFormat() ImageFormat {
	return self.Runtime.Image_get_format(Image{self})
}
func (self methodsImage) GetData() PackedByteArray {
	return self.Runtime.Image_get_data(Image{self})
}
func (self methodsImage) Convert(format ImageFormat) {
	self.Runtime.Image_convert(Image{self}, format)
}
func (self methodsImage) GetMipmapCount() int64 {
	return self.Runtime.Image_get_mipmap_count(Image{self})
}
func (self methodsImage) GetMipmapOffset(mipmap int64) int64 {
	return self.Runtime.Image_get_mipmap_offset(Image{self}, mipmap)
}
func (self methodsImage) ResizeToPo2(square bool, interpolation ImageInterpolation) {
	self.Runtime.Image_resize_to_po2(Image{self}, square, interpolation)
}
func (self methodsImage) Resize(width int64, height int64, interpolation ImageInterpolation) {
	self.Runtime.Image_resize(Image{self}, width, height, interpolation)
}
func (self methodsImage) ShrinkX2() {
	self.Runtime.Image_shrink_x2(Image{self})
}
func (self methodsImage) Crop(width int64, height int64) {
	self.Runtime.Image_crop(Image{self}, width, height)
}
func (self methodsImage) FlipX() {
	self.Runtime.Image_flip_x(Image{self})
}
func (self methodsImage) FlipY() {
	self.Runtime.Image_flip_y(Image{self})
}
func (self methodsImage) GenerateMipmaps(renormalize bool) int64 {
	return self.Runtime.Image_generate_mipmaps(Image{self}, renormalize)
}
func (self methodsImage) ClearMipmaps() {
	self.Runtime.Image_clear_mipmaps(Image{self})
}
func (self methodsImage) Create(width int64, height int64, use_mipmaps bool, format ImageFormat) Image {
	return self.Runtime.Image_create(Image{self}, width, height, use_mipmaps, format)
}
func (self methodsImage) CreateFromData(width int64, height int64, use_mipmaps bool, format ImageFormat, data PackedByteArray) Image {
	return self.Runtime.Image_create_from_data(Image{self}, width, height, use_mipmaps, format, data)
}
func (self methodsImage) SetData(width int64, height int64, use_mipmaps bool, format ImageFormat, data PackedByteArray) {
	self.Runtime.Image_set_data(Image{self}, width, height, use_mipmaps, format, data)
}
func (self methodsImage) IsEmpty() bool {
	return self.Runtime.Image_is_empty(Image{self})
}
func (self methodsImage) Load(path string) int64 {
	return self.Runtime.Image_load(Image{self}, path)
}
func (self methodsImage) LoadFromFile(path string) Image {
	return self.Runtime.Image_load_from_file(Image{self}, path)
}
func (self methodsImage) SavePng(path string) int64 {
	return self.Runtime.Image_save_png(Image{self}, path)
}
func (self methodsImage) SavePngToBuffer() PackedByteArray {
	return self.Runtime.Image_save_png_to_buffer(Image{self})
}
func (self methodsImage) SaveJpg(path string, quality Float) int64 {
	return self.Runtime.Image_save_jpg(Image{self}, path, quality)
}
func (self methodsImage) SaveJpgToBuffer(quality Float) PackedByteArray {
	return self.Runtime.Image_save_jpg_to_buffer(Image{self}, quality)
}
func (self methodsImage) SaveExr(path string, grayscale bool) int64 {
	return self.Runtime.Image_save_exr(Image{self}, path, grayscale)
}
func (self methodsImage) SaveExrToBuffer(grayscale bool) PackedByteArray {
	return self.Runtime.Image_save_exr_to_buffer(Image{self}, grayscale)
}
func (self methodsImage) SaveWebp(path string, lossy bool, quality Float) int64 {
	return self.Runtime.Image_save_webp(Image{self}, path, lossy, quality)
}
func (self methodsImage) SaveWebpToBuffer(lossy bool, quality Float) PackedByteArray {
	return self.Runtime.Image_save_webp_to_buffer(Image{self}, lossy, quality)
}
func (self methodsImage) DetectAlpha() ImageAlphaMode {
	return self.Runtime.Image_detect_alpha(Image{self})
}
func (self methodsImage) IsInvisible() bool {
	return self.Runtime.Image_is_invisible(Image{self})
}
func (self methodsImage) DetectUsedChannels(source ImageCompressSource) ImageUsedChannels {
	return self.Runtime.Image_detect_used_channels(Image{self}, source)
}
func (self methodsImage) Compress(mode ImageCompressMode, source ImageCompressSource, astc_format ImageASTCFormat) int64 {
	return self.Runtime.Image_compress(Image{self}, mode, source, astc_format)
}
func (self methodsImage) CompressFromChannels(mode ImageCompressMode, channels ImageUsedChannels, astc_format ImageASTCFormat) int64 {
	return self.Runtime.Image_compress_from_channels(Image{self}, mode, channels, astc_format)
}
func (self methodsImage) Decompress() int64 {
	return self.Runtime.Image_decompress(Image{self})
}
func (self methodsImage) IsCompressed() bool {
	return self.Runtime.Image_is_compressed(Image{self})
}
func (self methodsImage) Rotate90(direction ClockDirection) {
	self.Runtime.Image_rotate_90(Image{self}, direction)
}
func (self methodsImage) Rotate180() {
	self.Runtime.Image_rotate_180(Image{self})
}
func (self methodsImage) FixAlphaEdges() {
	self.Runtime.Image_fix_alpha_edges(Image{self})
}
func (self methodsImage) PremultiplyAlpha() {
	self.Runtime.Image_premultiply_alpha(Image{self})
}
func (self methodsImage) SrgbToLinear() {
	self.Runtime.Image_srgb_to_linear(Image{self})
}
func (self methodsImage) NormalMapToXy() {
	self.Runtime.Image_normal_map_to_xy(Image{self})
}
func (self methodsImage) RgbeToSrgb() Image {
	return self.Runtime.Image_rgbe_to_srgb(Image{self})
}
func (self methodsImage) BumpMapToNormalMap(bump_scale Float) {
	self.Runtime.Image_bump_map_to_normal_map(Image{self}, bump_scale)
}
func (self methodsImage) ComputeImageMetrics(compared_image Image, use_luma bool) Dictionary {
	return self.Runtime.Image_compute_image_metrics(Image{self}, compared_image, use_luma)
}
func (self methodsImage) BlitRect(src Image, src_rect Rect2i, dst Vector2i) {
	self.Runtime.Image_blit_rect(Image{self}, src, src_rect, dst)
}
func (self methodsImage) BlitRectMask(src Image, mask Image, src_rect Rect2i, dst Vector2i) {
	self.Runtime.Image_blit_rect_mask(Image{self}, src, mask, src_rect, dst)
}
func (self methodsImage) BlendRect(src Image, src_rect Rect2i, dst Vector2i) {
	self.Runtime.Image_blend_rect(Image{self}, src, src_rect, dst)
}
func (self methodsImage) BlendRectMask(src Image, mask Image, src_rect Rect2i, dst Vector2i) {
	self.Runtime.Image_blend_rect_mask(Image{self}, src, mask, src_rect, dst)
}
func (self methodsImage) Fill(color Color) {
	self.Runtime.Image_fill(Image{self}, color)
}
func (self methodsImage) FillRect(rect Rect2i, color Color) {
	self.Runtime.Image_fill_rect(Image{self}, rect, color)
}
func (self methodsImage) GetUsedRect() Rect2i {
	return self.Runtime.Image_get_used_rect(Image{self})
}
func (self methodsImage) GetRegion(region Rect2i) Image {
	return self.Runtime.Image_get_region(Image{self}, region)
}
func (self methodsImage) CopyFrom(src Image) {
	self.Runtime.Image_copy_from(Image{self}, src)
}
func (self methodsImage) GetPixelv(point Vector2i) Color {
	return self.Runtime.Image_get_pixelv(Image{self}, point)
}
func (self methodsImage) GetPixel(x int64, y int64) Color {
	return self.Runtime.Image_get_pixel(Image{self}, x, y)
}
func (self methodsImage) SetPixelv(point Vector2i, color Color) {
	self.Runtime.Image_set_pixelv(Image{self}, point, color)
}
func (self methodsImage) SetPixel(x int64, y int64, color Color) {
	self.Runtime.Image_set_pixel(Image{self}, x, y, color)
}
func (self methodsImage) AdjustBcs(brightness Float, contrast Float, saturation Float) {
	self.Runtime.Image_adjust_bcs(Image{self}, brightness, contrast, saturation)
}
func (self methodsImage) LoadPngFromBuffer(buffer PackedByteArray) int64 {
	return self.Runtime.Image_load_png_from_buffer(Image{self}, buffer)
}
func (self methodsImage) LoadJpgFromBuffer(buffer PackedByteArray) int64 {
	return self.Runtime.Image_load_jpg_from_buffer(Image{self}, buffer)
}
func (self methodsImage) LoadWebpFromBuffer(buffer PackedByteArray) int64 {
	return self.Runtime.Image_load_webp_from_buffer(Image{self}, buffer)
}
func (self methodsImage) LoadTgaFromBuffer(buffer PackedByteArray) int64 {
	return self.Runtime.Image_load_tga_from_buffer(Image{self}, buffer)
}
func (self methodsImage) LoadBmpFromBuffer(buffer PackedByteArray) int64 {
	return self.Runtime.Image_load_bmp_from_buffer(Image{self}, buffer)
}
func (self methodsImage) LoadKtxFromBuffer(buffer PackedByteArray) int64 {
	return self.Runtime.Image_load_ktx_from_buffer(Image{self}, buffer)
}
func (self methodsImage) LoadSvgFromBuffer(buffer PackedByteArray, scale Float) int64 {
	return self.Runtime.Image_load_svg_from_buffer(Image{self}, buffer, scale)
}
func (self methodsImage) LoadSvgFromString(svg_str string, scale Float) int64 {
	return self.Runtime.Image_load_svg_from_string(Image{self}, svg_str, scale)
}

type methodsImageFormatLoader struct {
	_ [0]*methodsImageFormatLoader
	class
}

func (self ImageFormatLoader) RefCounted() RefCounted {
	var parent RefCounted
	parent.class = self.class
	return parent
}

type methodsImageFormatLoaderExtension struct {
	_ [0]*methodsImageFormatLoaderExtension
	class
}

func (self ImageFormatLoaderExtension) ImageFormatLoader() ImageFormatLoader {
	var parent ImageFormatLoader
	parent.class = self.class
	return parent
}
func (self methodsImageFormatLoaderExtension) AddFormatLoader() {
	self.Runtime.ImageFormatLoaderExtension_add_format_loader(ImageFormatLoaderExtension{self})
}
func (self methodsImageFormatLoaderExtension) RemoveFormatLoader() {
	self.Runtime.ImageFormatLoaderExtension_remove_format_loader(ImageFormatLoaderExtension{self})
}

type methodsImageTexture struct {
	_ [0]*methodsImageTexture
	class
}

func (self ImageTexture) Texture2D() Texture2D {
	var parent Texture2D
	parent.class = self.class
	return parent
}
func (self methodsImageTexture) CreateFromImage(image Image) ImageTexture {
	return self.Runtime.ImageTexture_create_from_image(ImageTexture{self}, image)
}
func (self methodsImageTexture) GetFormat() ImageFormat {
	return self.Runtime.ImageTexture_get_format(ImageTexture{self})
}
func (self methodsImageTexture) SetImage(image Image) {
	self.Runtime.ImageTexture_set_image(ImageTexture{self}, image)
}
func (self methodsImageTexture) Update(image Image) {
	self.Runtime.ImageTexture_update(ImageTexture{self}, image)
}
func (self methodsImageTexture) SetSizeOverride(size Vector2i) {
	self.Runtime.ImageTexture_set_size_override(ImageTexture{self}, size)
}

type methodsImageTexture3D struct {
	_ [0]*methodsImageTexture3D
	class
}

func (self ImageTexture3D) Texture3D() Texture3D {
	var parent Texture3D
	parent.class = self.class
	return parent
}
func (self methodsImageTexture3D) Create(format ImageFormat, width int64, height int64, depth int64, use_mipmaps bool, data ArrayOf[Image]) int64 {
	return self.Runtime.ImageTexture3D_create(ImageTexture3D{self}, format, width, height, depth, use_mipmaps, data)
}
func (self methodsImageTexture3D) Update(data ArrayOf[Image]) {
	self.Runtime.ImageTexture3D_update(ImageTexture3D{self}, data)
}

type methodsImageTextureLayered struct {
	_ [0]*methodsImageTextureLayered
	class
}

func (self ImageTextureLayered) TextureLayered() TextureLayered {
	var parent TextureLayered
	parent.class = self.class
	return parent
}
func (self methodsImageTextureLayered) CreateFromImages(images ArrayOf[Image]) int64 {
	return self.Runtime.ImageTextureLayered_create_from_images(ImageTextureLayered{self}, images)
}
func (self methodsImageTextureLayered) UpdateLayer(image Image, layer int64) {
	self.Runtime.ImageTextureLayered_update_layer(ImageTextureLayered{self}, image, layer)
}

type methodsImmediateMesh struct {
	_ [0]*methodsImmediateMesh
	class
}

func (self ImmediateMesh) Mesh() Mesh { var parent Mesh; parent.class = self.class; return parent }
func (self methodsImmediateMesh) SurfaceBegin(primitive MeshPrimitiveType, material Material) {
	self.Runtime.ImmediateMesh_surface_begin(ImmediateMesh{self}, primitive, material)
}
func (self methodsImmediateMesh) SurfaceSetColor(color Color) {
	self.Runtime.ImmediateMesh_surface_set_color(ImmediateMesh{self}, color)
}
func (self methodsImmediateMesh) SurfaceSetNormal(normal Vector3) {
	self.Runtime.ImmediateMesh_surface_set_normal(ImmediateMesh{self}, normal)
}
func (self methodsImmediateMesh) SurfaceSetTangent(tangent Plane) {
	self.Runtime.ImmediateMesh_surface_set_tangent(ImmediateMesh{self}, tangent)
}
func (self methodsImmediateMesh) SurfaceSetUv(uv Vector2) {
	self.Runtime.ImmediateMesh_surface_set_uv(ImmediateMesh{self}, uv)
}
func (self methodsImmediateMesh) SurfaceSetUv2(uv2 Vector2) {
	self.Runtime.ImmediateMesh_surface_set_uv2(ImmediateMesh{self}, uv2)
}
func (self methodsImmediateMesh) SurfaceAddVertex(vertex Vector3) {
	self.Runtime.ImmediateMesh_surface_add_vertex(ImmediateMesh{self}, vertex)
}
func (self methodsImmediateMesh) SurfaceAddVertex2d(vertex Vector2) {
	self.Runtime.ImmediateMesh_surface_add_vertex_2d(ImmediateMesh{self}, vertex)
}
func (self methodsImmediateMesh) SurfaceEnd() {
	self.Runtime.ImmediateMesh_surface_end(ImmediateMesh{self})
}
func (self methodsImmediateMesh) ClearSurfaces() {
	self.Runtime.ImmediateMesh_clear_surfaces(ImmediateMesh{self})
}

type methodsImporterMesh struct {
	_ [0]*methodsImporterMesh
	class
}

func (self ImporterMesh) Resource() Resource {
	var parent Resource
	parent.class = self.class
	return parent
}
func (self methodsImporterMesh) AddBlendShape(name string) {
	self.Runtime.ImporterMesh_add_blend_shape(ImporterMesh{self}, name)
}
func (self methodsImporterMesh) GetBlendShapeCount() int64 {
	return self.Runtime.ImporterMesh_get_blend_shape_count(ImporterMesh{self})
}
func (self methodsImporterMesh) GetBlendShapeName(blend_shape_idx int64) string {
	return self.Runtime.ImporterMesh_get_blend_shape_name(ImporterMesh{self}, blend_shape_idx)
}
func (self methodsImporterMesh) SetBlendShapeMode(mode MeshBlendShapeMode) {
	self.Runtime.ImporterMesh_set_blend_shape_mode(ImporterMesh{self}, mode)
}
func (self methodsImporterMesh) GetBlendShapeMode() MeshBlendShapeMode {
	return self.Runtime.ImporterMesh_get_blend_shape_mode(ImporterMesh{self})
}
func (self methodsImporterMesh) AddSurface(primitive MeshPrimitiveType, arrays Array, blend_shapes ArrayOf[Array], lods Dictionary, material Material, name string, flags int64) {
	self.Runtime.ImporterMesh_add_surface(ImporterMesh{self}, primitive, arrays, blend_shapes, lods, material, name, flags)
}
func (self methodsImporterMesh) GetSurfaceCount() int64 {
	return self.Runtime.ImporterMesh_get_surface_count(ImporterMesh{self})
}
func (self methodsImporterMesh) GetSurfacePrimitiveType(surface_idx int64) MeshPrimitiveType {
	return self.Runtime.ImporterMesh_get_surface_primitive_type(ImporterMesh{self}, surface_idx)
}
func (self methodsImporterMesh) GetSurfaceName(surface_idx int64) string {
	return self.Runtime.ImporterMesh_get_surface_name(ImporterMesh{self}, surface_idx)
}
func (self methodsImporterMesh) GetSurfaceArrays(surface_idx int64) Array {
	return self.Runtime.ImporterMesh_get_surface_arrays(ImporterMesh{self}, surface_idx)
}
func (self methodsImporterMesh) GetSurfaceBlendShapeArrays(surface_idx int64, blend_shape_idx int64) Array {
	return self.Runtime.ImporterMesh_get_surface_blend_shape_arrays(ImporterMesh{self}, surface_idx, blend_shape_idx)
}
func (self methodsImporterMesh) GetSurfaceLodCount(surface_idx int64) int64 {
	return self.Runtime.ImporterMesh_get_surface_lod_count(ImporterMesh{self}, surface_idx)
}
func (self methodsImporterMesh) GetSurfaceLodSize(surface_idx int64, lod_idx int64) Float {
	return self.Runtime.ImporterMesh_get_surface_lod_size(ImporterMesh{self}, surface_idx, lod_idx)
}
func (self methodsImporterMesh) GetSurfaceLodIndices(surface_idx int64, lod_idx int64) PackedInt32Array {
	return self.Runtime.ImporterMesh_get_surface_lod_indices(ImporterMesh{self}, surface_idx, lod_idx)
}
func (self methodsImporterMesh) GetSurfaceMaterial(surface_idx int64) Material {
	return self.Runtime.ImporterMesh_get_surface_material(ImporterMesh{self}, surface_idx)
}
func (self methodsImporterMesh) GetSurfaceFormat(surface_idx int64) int64 {
	return self.Runtime.ImporterMesh_get_surface_format(ImporterMesh{self}, surface_idx)
}
func (self methodsImporterMesh) SetSurfaceName(surface_idx int64, name string) {
	self.Runtime.ImporterMesh_set_surface_name(ImporterMesh{self}, surface_idx, name)
}
func (self methodsImporterMesh) SetSurfaceMaterial(surface_idx int64, material Material) {
	self.Runtime.ImporterMesh_set_surface_material(ImporterMesh{self}, surface_idx, material)
}
func (self methodsImporterMesh) GenerateLods(normal_merge_angle Float, normal_split_angle Float, bone_transform_array Array) {
	self.Runtime.ImporterMesh_generate_lods(ImporterMesh{self}, normal_merge_angle, normal_split_angle, bone_transform_array)
}
func (self methodsImporterMesh) GetMesh(base_mesh ArrayMesh) ArrayMesh {
	return self.Runtime.ImporterMesh_get_mesh(ImporterMesh{self}, base_mesh)
}
func (self methodsImporterMesh) Clear() {
	self.Runtime.ImporterMesh_clear(ImporterMesh{self})
}
func (self methodsImporterMesh) SetLightmapSizeHint(size Vector2i) {
	self.Runtime.ImporterMesh_set_lightmap_size_hint(ImporterMesh{self}, size)
}
func (self methodsImporterMesh) GetLightmapSizeHint() Vector2i {
	return self.Runtime.ImporterMesh_get_lightmap_size_hint(ImporterMesh{self})
}

type methodsImporterMeshInstance3D struct {
	_ [0]*methodsImporterMeshInstance3D
	class
}

func (self ImporterMeshInstance3D) Node3D() Node3D {
	var parent Node3D
	parent.class = self.class
	return parent
}
func (self methodsImporterMeshInstance3D) SetMesh(mesh ImporterMesh) {
	self.Runtime.ImporterMeshInstance3D_set_mesh(ImporterMeshInstance3D{self}, mesh)
}
func (self methodsImporterMeshInstance3D) GetMesh() ImporterMesh {
	return self.Runtime.ImporterMeshInstance3D_get_mesh(ImporterMeshInstance3D{self})
}
func (self methodsImporterMeshInstance3D) SetSkin(skin Skin) {
	self.Runtime.ImporterMeshInstance3D_set_skin(ImporterMeshInstance3D{self}, skin)
}
func (self methodsImporterMeshInstance3D) GetSkin() Skin {
	return self.Runtime.ImporterMeshInstance3D_get_skin(ImporterMeshInstance3D{self})
}
func (self methodsImporterMeshInstance3D) SetSkeletonPath(skeleton_path NodePath) {
	self.Runtime.ImporterMeshInstance3D_set_skeleton_path(ImporterMeshInstance3D{self}, skeleton_path)
}
func (self methodsImporterMeshInstance3D) GetSkeletonPath() NodePath {
	return self.Runtime.ImporterMeshInstance3D_get_skeleton_path(ImporterMeshInstance3D{self})
}
func (self methodsImporterMeshInstance3D) SetLayerMask(layer_mask int64) {
	self.Runtime.ImporterMeshInstance3D_set_layer_mask(ImporterMeshInstance3D{self}, layer_mask)
}
func (self methodsImporterMeshInstance3D) GetLayerMask() int64 {
	return self.Runtime.ImporterMeshInstance3D_get_layer_mask(ImporterMeshInstance3D{self})
}
func (self methodsImporterMeshInstance3D) SetCastShadowsSetting(shadow_casting_setting GeometryInstance3DShadowCastingSetting) {
	self.Runtime.ImporterMeshInstance3D_set_cast_shadows_setting(ImporterMeshInstance3D{self}, shadow_casting_setting)
}
func (self methodsImporterMeshInstance3D) GetCastShadowsSetting() GeometryInstance3DShadowCastingSetting {
	return self.Runtime.ImporterMeshInstance3D_get_cast_shadows_setting(ImporterMeshInstance3D{self})
}
func (self methodsImporterMeshInstance3D) SetVisibilityRangeEndMargin(distance Float) {
	self.Runtime.ImporterMeshInstance3D_set_visibility_range_end_margin(ImporterMeshInstance3D{self}, distance)
}
func (self methodsImporterMeshInstance3D) GetVisibilityRangeEndMargin() Float {
	return self.Runtime.ImporterMeshInstance3D_get_visibility_range_end_margin(ImporterMeshInstance3D{self})
}
func (self methodsImporterMeshInstance3D) SetVisibilityRangeEnd(distance Float) {
	self.Runtime.ImporterMeshInstance3D_set_visibility_range_end(ImporterMeshInstance3D{self}, distance)
}
func (self methodsImporterMeshInstance3D) GetVisibilityRangeEnd() Float {
	return self.Runtime.ImporterMeshInstance3D_get_visibility_range_end(ImporterMeshInstance3D{self})
}
func (self methodsImporterMeshInstance3D) SetVisibilityRangeBeginMargin(distance Float) {
	self.Runtime.ImporterMeshInstance3D_set_visibility_range_begin_margin(ImporterMeshInstance3D{self}, distance)
}
func (self methodsImporterMeshInstance3D) GetVisibilityRangeBeginMargin() Float {
	return self.Runtime.ImporterMeshInstance3D_get_visibility_range_begin_margin(ImporterMeshInstance3D{self})
}
func (self methodsImporterMeshInstance3D) SetVisibilityRangeBegin(distance Float) {
	self.Runtime.ImporterMeshInstance3D_set_visibility_range_begin(ImporterMeshInstance3D{self}, distance)
}
func (self methodsImporterMeshInstance3D) GetVisibilityRangeBegin() Float {
	return self.Runtime.ImporterMeshInstance3D_get_visibility_range_begin(ImporterMeshInstance3D{self})
}
func (self methodsImporterMeshInstance3D) SetVisibilityRangeFadeMode(mode GeometryInstance3DVisibilityRangeFadeMode) {
	self.Runtime.ImporterMeshInstance3D_set_visibility_range_fade_mode(ImporterMeshInstance3D{self}, mode)
}
func (self methodsImporterMeshInstance3D) GetVisibilityRangeFadeMode() GeometryInstance3DVisibilityRangeFadeMode {
	return self.Runtime.ImporterMeshInstance3D_get_visibility_range_fade_mode(ImporterMeshInstance3D{self})
}

type methodsInput struct {
	_ [0]*methodsInput
	class
}

func (self Input) Object() Object { var parent Object; parent.class = self.class; return parent }
func (self methodsInput) IsAnythingPressed() bool {
	return self.Runtime.Input_is_anything_pressed(Input{self})
}
func (self methodsInput) IsKeyPressed(keycode Key) bool {
	return self.Runtime.Input_is_key_pressed(Input{self}, keycode)
}
func (self methodsInput) IsPhysicalKeyPressed(keycode Key) bool {
	return self.Runtime.Input_is_physical_key_pressed(Input{self}, keycode)
}
func (self methodsInput) IsKeyLabelPressed(keycode Key) bool {
	return self.Runtime.Input_is_key_label_pressed(Input{self}, keycode)
}
func (self methodsInput) IsMouseButtonPressed(button MouseButton) bool {
	return self.Runtime.Input_is_mouse_button_pressed(Input{self}, button)
}
func (self methodsInput) IsJoyButtonPressed(device int64, button JoyButton) bool {
	return self.Runtime.Input_is_joy_button_pressed(Input{self}, device, button)
}
func (self methodsInput) IsActionPressed(action string, exact_match bool) bool {
	return self.Runtime.Input_is_action_pressed(Input{self}, action, exact_match)
}
func (self methodsInput) IsActionJustPressed(action string, exact_match bool) bool {
	return self.Runtime.Input_is_action_just_pressed(Input{self}, action, exact_match)
}
func (self methodsInput) IsActionJustReleased(action string, exact_match bool) bool {
	return self.Runtime.Input_is_action_just_released(Input{self}, action, exact_match)
}
func (self methodsInput) GetActionStrength(action string, exact_match bool) Float {
	return self.Runtime.Input_get_action_strength(Input{self}, action, exact_match)
}
func (self methodsInput) GetActionRawStrength(action string, exact_match bool) Float {
	return self.Runtime.Input_get_action_raw_strength(Input{self}, action, exact_match)
}
func (self methodsInput) GetAxis(negative_action string, positive_action string) Float {
	return self.Runtime.Input_get_axis(Input{self}, negative_action, positive_action)
}
func (self methodsInput) GetVector(negative_x string, positive_x string, negative_y string, positive_y string, deadzone Float) Vector2 {
	return self.Runtime.Input_get_vector(Input{self}, negative_x, positive_x, negative_y, positive_y, deadzone)
}
func (self methodsInput) AddJoyMapping(mapping string, update_existing bool) {
	self.Runtime.Input_add_joy_mapping(Input{self}, mapping, update_existing)
}
func (self methodsInput) RemoveJoyMapping(guid string) {
	self.Runtime.Input_remove_joy_mapping(Input{self}, guid)
}
func (self methodsInput) IsJoyKnown(device int64) bool {
	return self.Runtime.Input_is_joy_known(Input{self}, device)
}
func (self methodsInput) GetJoyAxis(device int64, axis JoyAxis) Float {
	return self.Runtime.Input_get_joy_axis(Input{self}, device, axis)
}
func (self methodsInput) GetJoyName(device int64) string {
	return self.Runtime.Input_get_joy_name(Input{self}, device)
}
func (self methodsInput) GetJoyGuid(device int64) string {
	return self.Runtime.Input_get_joy_guid(Input{self}, device)
}
func (self methodsInput) GetJoyInfo(device int64) Dictionary {
	return self.Runtime.Input_get_joy_info(Input{self}, device)
}
func (self methodsInput) ShouldIgnoreDevice(vendor_id int64, product_id int64) bool {
	return self.Runtime.Input_should_ignore_device(Input{self}, vendor_id, product_id)
}
func (self methodsInput) GetConnectedJoypads() ArrayOf[int64] {
	return self.Runtime.Input_get_connected_joypads(Input{self})
}
func (self methodsInput) GetJoyVibrationStrength(device int64) Vector2 {
	return self.Runtime.Input_get_joy_vibration_strength(Input{self}, device)
}
func (self methodsInput) GetJoyVibrationDuration(device int64) Float {
	return self.Runtime.Input_get_joy_vibration_duration(Input{self}, device)
}
func (self methodsInput) StartJoyVibration(device int64, weak_magnitude Float, strong_magnitude Float, duration Float) {
	self.Runtime.Input_start_joy_vibration(Input{self}, device, weak_magnitude, strong_magnitude, duration)
}
func (self methodsInput) StopJoyVibration(device int64) {
	self.Runtime.Input_stop_joy_vibration(Input{self}, device)
}
func (self methodsInput) VibrateHandheld(duration_ms int64) {
	self.Runtime.Input_vibrate_handheld(Input{self}, duration_ms)
}
func (self methodsInput) GetGravity() Vector3 {
	return self.Runtime.Input_get_gravity(Input{self})
}
func (self methodsInput) GetAccelerometer() Vector3 {
	return self.Runtime.Input_get_accelerometer(Input{self})
}
func (self methodsInput) GetMagnetometer() Vector3 {
	return self.Runtime.Input_get_magnetometer(Input{self})
}
func (self methodsInput) GetGyroscope() Vector3 {
	return self.Runtime.Input_get_gyroscope(Input{self})
}
func (self methodsInput) SetGravity(value Vector3) {
	self.Runtime.Input_set_gravity(Input{self}, value)
}
func (self methodsInput) SetAccelerometer(value Vector3) {
	self.Runtime.Input_set_accelerometer(Input{self}, value)
}
func (self methodsInput) SetMagnetometer(value Vector3) {
	self.Runtime.Input_set_magnetometer(Input{self}, value)
}
func (self methodsInput) SetGyroscope(value Vector3) {
	self.Runtime.Input_set_gyroscope(Input{self}, value)
}
func (self methodsInput) GetLastMouseVelocity() Vector2 {
	return self.Runtime.Input_get_last_mouse_velocity(Input{self})
}
func (self methodsInput) GetMouseButtonMask() MouseButtonMask {
	return self.Runtime.Input_get_mouse_button_mask(Input{self})
}
func (self methodsInput) SetMouseMode(mode InputMouseMode) {
	self.Runtime.Input_set_mouse_mode(Input{self}, mode)
}
func (self methodsInput) GetMouseMode() InputMouseMode {
	return self.Runtime.Input_get_mouse_mode(Input{self})
}
func (self methodsInput) WarpMouse(position Vector2) {
	self.Runtime.Input_warp_mouse(Input{self}, position)
}
func (self methodsInput) ActionPress(action string, strength Float) {
	self.Runtime.Input_action_press(Input{self}, action, strength)
}
func (self methodsInput) ActionRelease(action string) {
	self.Runtime.Input_action_release(Input{self}, action)
}
func (self methodsInput) SetDefaultCursorShape(shape InputCursorShape) {
	self.Runtime.Input_set_default_cursor_shape(Input{self}, shape)
}
func (self methodsInput) GetCurrentCursorShape() InputCursorShape {
	return self.Runtime.Input_get_current_cursor_shape(Input{self})
}
func (self methodsInput) SetCustomMouseCursor(image Resource, shape InputCursorShape, hotspot Vector2) {
	self.Runtime.Input_set_custom_mouse_cursor(Input{self}, image, shape, hotspot)
}
func (self methodsInput) ParseInputEvent(event InputEvent) {
	self.Runtime.Input_parse_input_event(Input{self}, event)
}
func (self methodsInput) SetUseAccumulatedInput(enable bool) {
	self.Runtime.Input_set_use_accumulated_input(Input{self}, enable)
}
func (self methodsInput) IsUsingAccumulatedInput() bool {
	return self.Runtime.Input_is_using_accumulated_input(Input{self})
}
func (self methodsInput) FlushBufferedEvents() {
	self.Runtime.Input_flush_buffered_events(Input{self})
}
func (self methodsInput) SetEmulateMouseFromTouch(enable bool) {
	self.Runtime.Input_set_emulate_mouse_from_touch(Input{self}, enable)
}
func (self methodsInput) IsEmulatingMouseFromTouch() bool {
	return self.Runtime.Input_is_emulating_mouse_from_touch(Input{self})
}
func (self methodsInput) SetEmulateTouchFromMouse(enable bool) {
	self.Runtime.Input_set_emulate_touch_from_mouse(Input{self}, enable)
}
func (self methodsInput) IsEmulatingTouchFromMouse() bool {
	return self.Runtime.Input_is_emulating_touch_from_mouse(Input{self})
}

type methodsInputEvent struct {
	_ [0]*methodsInputEvent
	class
}

func (self InputEvent) Resource() Resource {
	var parent Resource
	parent.class = self.class
	return parent
}
func (self methodsInputEvent) SetDevice(device int64) {
	self.Runtime.InputEvent_set_device(InputEvent{self}, device)
}
func (self methodsInputEvent) GetDevice() int64 {
	return self.Runtime.InputEvent_get_device(InputEvent{self})
}
func (self methodsInputEvent) IsAction(action string, exact_match bool) bool {
	return self.Runtime.InputEvent_is_action(InputEvent{self}, action, exact_match)
}
func (self methodsInputEvent) IsActionPressed(action string, allow_echo bool, exact_match bool) bool {
	return self.Runtime.InputEvent_is_action_pressed(InputEvent{self}, action, allow_echo, exact_match)
}
func (self methodsInputEvent) IsActionReleased(action string, exact_match bool) bool {
	return self.Runtime.InputEvent_is_action_released(InputEvent{self}, action, exact_match)
}
func (self methodsInputEvent) GetActionStrength(action string, exact_match bool) Float {
	return self.Runtime.InputEvent_get_action_strength(InputEvent{self}, action, exact_match)
}
func (self methodsInputEvent) IsCanceled() bool {
	return self.Runtime.InputEvent_is_canceled(InputEvent{self})
}
func (self methodsInputEvent) IsPressed() bool {
	return self.Runtime.InputEvent_is_pressed(InputEvent{self})
}
func (self methodsInputEvent) IsReleased() bool {
	return self.Runtime.InputEvent_is_released(InputEvent{self})
}
func (self methodsInputEvent) IsEcho() bool {
	return self.Runtime.InputEvent_is_echo(InputEvent{self})
}
func (self methodsInputEvent) AsText() string {
	return self.Runtime.InputEvent_as_text(InputEvent{self})
}
func (self methodsInputEvent) IsMatch(event InputEvent, exact_match bool) bool {
	return self.Runtime.InputEvent_is_match(InputEvent{self}, event, exact_match)
}
func (self methodsInputEvent) IsActionType() bool {
	return self.Runtime.InputEvent_is_action_type(InputEvent{self})
}
func (self methodsInputEvent) Accumulate(with_event InputEvent) bool {
	return self.Runtime.InputEvent_accumulate(InputEvent{self}, with_event)
}
func (self methodsInputEvent) XformedBy(xform Transform2D, local_ofs Vector2) InputEvent {
	return self.Runtime.InputEvent_xformed_by(InputEvent{self}, xform, local_ofs)
}

type methodsInputEventAction struct {
	_ [0]*methodsInputEventAction
	class
}

func (self InputEventAction) InputEvent() InputEvent {
	var parent InputEvent
	parent.class = self.class
	return parent
}
func (self methodsInputEventAction) SetAction(action string) {
	self.Runtime.InputEventAction_set_action(InputEventAction{self}, action)
}
func (self methodsInputEventAction) GetAction() string {
	return self.Runtime.InputEventAction_get_action(InputEventAction{self})
}
func (self methodsInputEventAction) SetPressed(pressed bool) {
	self.Runtime.InputEventAction_set_pressed(InputEventAction{self}, pressed)
}
func (self methodsInputEventAction) SetStrength(strength Float) {
	self.Runtime.InputEventAction_set_strength(InputEventAction{self}, strength)
}
func (self methodsInputEventAction) GetStrength() Float {
	return self.Runtime.InputEventAction_get_strength(InputEventAction{self})
}

type methodsInputEventFromWindow struct {
	_ [0]*methodsInputEventFromWindow
	class
}

func (self InputEventFromWindow) InputEvent() InputEvent {
	var parent InputEvent
	parent.class = self.class
	return parent
}
func (self methodsInputEventFromWindow) SetWindowId(id int64) {
	self.Runtime.InputEventFromWindow_set_window_id(InputEventFromWindow{self}, id)
}
func (self methodsInputEventFromWindow) GetWindowId() int64 {
	return self.Runtime.InputEventFromWindow_get_window_id(InputEventFromWindow{self})
}

type methodsInputEventGesture struct {
	_ [0]*methodsInputEventGesture
	class
}

func (self InputEventGesture) InputEventWithModifiers() InputEventWithModifiers {
	var parent InputEventWithModifiers
	parent.class = self.class
	return parent
}
func (self methodsInputEventGesture) SetPosition(position Vector2) {
	self.Runtime.InputEventGesture_set_position(InputEventGesture{self}, position)
}
func (self methodsInputEventGesture) GetPosition() Vector2 {
	return self.Runtime.InputEventGesture_get_position(InputEventGesture{self})
}

type methodsInputEventJoypadButton struct {
	_ [0]*methodsInputEventJoypadButton
	class
}

func (self InputEventJoypadButton) InputEvent() InputEvent {
	var parent InputEvent
	parent.class = self.class
	return parent
}
func (self methodsInputEventJoypadButton) SetButtonIndex(button_index JoyButton) {
	self.Runtime.InputEventJoypadButton_set_button_index(InputEventJoypadButton{self}, button_index)
}
func (self methodsInputEventJoypadButton) GetButtonIndex() JoyButton {
	return self.Runtime.InputEventJoypadButton_get_button_index(InputEventJoypadButton{self})
}
func (self methodsInputEventJoypadButton) SetPressure(pressure Float) {
	self.Runtime.InputEventJoypadButton_set_pressure(InputEventJoypadButton{self}, pressure)
}
func (self methodsInputEventJoypadButton) GetPressure() Float {
	return self.Runtime.InputEventJoypadButton_get_pressure(InputEventJoypadButton{self})
}
func (self methodsInputEventJoypadButton) SetPressed(pressed bool) {
	self.Runtime.InputEventJoypadButton_set_pressed(InputEventJoypadButton{self}, pressed)
}

type methodsInputEventJoypadMotion struct {
	_ [0]*methodsInputEventJoypadMotion
	class
}

func (self InputEventJoypadMotion) InputEvent() InputEvent {
	var parent InputEvent
	parent.class = self.class
	return parent
}
func (self methodsInputEventJoypadMotion) SetAxis(axis JoyAxis) {
	self.Runtime.InputEventJoypadMotion_set_axis(InputEventJoypadMotion{self}, axis)
}
func (self methodsInputEventJoypadMotion) GetAxis() JoyAxis {
	return self.Runtime.InputEventJoypadMotion_get_axis(InputEventJoypadMotion{self})
}
func (self methodsInputEventJoypadMotion) SetAxisValue(axis_value Float) {
	self.Runtime.InputEventJoypadMotion_set_axis_value(InputEventJoypadMotion{self}, axis_value)
}
func (self methodsInputEventJoypadMotion) GetAxisValue() Float {
	return self.Runtime.InputEventJoypadMotion_get_axis_value(InputEventJoypadMotion{self})
}

type methodsInputEventKey struct {
	_ [0]*methodsInputEventKey
	class
}

func (self InputEventKey) InputEventWithModifiers() InputEventWithModifiers {
	var parent InputEventWithModifiers
	parent.class = self.class
	return parent
}
func (self methodsInputEventKey) SetPressed(pressed bool) {
	self.Runtime.InputEventKey_set_pressed(InputEventKey{self}, pressed)
}
func (self methodsInputEventKey) SetKeycode(keycode Key) {
	self.Runtime.InputEventKey_set_keycode(InputEventKey{self}, keycode)
}
func (self methodsInputEventKey) GetKeycode() Key {
	return self.Runtime.InputEventKey_get_keycode(InputEventKey{self})
}
func (self methodsInputEventKey) SetPhysicalKeycode(physical_keycode Key) {
	self.Runtime.InputEventKey_set_physical_keycode(InputEventKey{self}, physical_keycode)
}
func (self methodsInputEventKey) GetPhysicalKeycode() Key {
	return self.Runtime.InputEventKey_get_physical_keycode(InputEventKey{self})
}
func (self methodsInputEventKey) SetKeyLabel(key_label Key) {
	self.Runtime.InputEventKey_set_key_label(InputEventKey{self}, key_label)
}
func (self methodsInputEventKey) GetKeyLabel() Key {
	return self.Runtime.InputEventKey_get_key_label(InputEventKey{self})
}
func (self methodsInputEventKey) SetUnicode(unicode int64) {
	self.Runtime.InputEventKey_set_unicode(InputEventKey{self}, unicode)
}
func (self methodsInputEventKey) GetUnicode() int64 {
	return self.Runtime.InputEventKey_get_unicode(InputEventKey{self})
}
func (self methodsInputEventKey) SetEcho(echo bool) {
	self.Runtime.InputEventKey_set_echo(InputEventKey{self}, echo)
}
func (self methodsInputEventKey) GetKeycodeWithModifiers() Key {
	return self.Runtime.InputEventKey_get_keycode_with_modifiers(InputEventKey{self})
}
func (self methodsInputEventKey) GetPhysicalKeycodeWithModifiers() Key {
	return self.Runtime.InputEventKey_get_physical_keycode_with_modifiers(InputEventKey{self})
}
func (self methodsInputEventKey) GetKeyLabelWithModifiers() Key {
	return self.Runtime.InputEventKey_get_key_label_with_modifiers(InputEventKey{self})
}
func (self methodsInputEventKey) AsTextKeycode() string {
	return self.Runtime.InputEventKey_as_text_keycode(InputEventKey{self})
}
func (self methodsInputEventKey) AsTextPhysicalKeycode() string {
	return self.Runtime.InputEventKey_as_text_physical_keycode(InputEventKey{self})
}
func (self methodsInputEventKey) AsTextKeyLabel() string {
	return self.Runtime.InputEventKey_as_text_key_label(InputEventKey{self})
}

type methodsInputEventMIDI struct {
	_ [0]*methodsInputEventMIDI
	class
}

func (self InputEventMIDI) InputEvent() InputEvent {
	var parent InputEvent
	parent.class = self.class
	return parent
}
func (self methodsInputEventMIDI) SetChannel(channel int64) {
	self.Runtime.InputEventMIDI_set_channel(InputEventMIDI{self}, channel)
}
func (self methodsInputEventMIDI) GetChannel() int64 {
	return self.Runtime.InputEventMIDI_get_channel(InputEventMIDI{self})
}
func (self methodsInputEventMIDI) SetMessage(message MIDIMessage) {
	self.Runtime.InputEventMIDI_set_message(InputEventMIDI{self}, message)
}
func (self methodsInputEventMIDI) GetMessage() MIDIMessage {
	return self.Runtime.InputEventMIDI_get_message(InputEventMIDI{self})
}
func (self methodsInputEventMIDI) SetPitch(pitch int64) {
	self.Runtime.InputEventMIDI_set_pitch(InputEventMIDI{self}, pitch)
}
func (self methodsInputEventMIDI) GetPitch() int64 {
	return self.Runtime.InputEventMIDI_get_pitch(InputEventMIDI{self})
}
func (self methodsInputEventMIDI) SetVelocity(velocity int64) {
	self.Runtime.InputEventMIDI_set_velocity(InputEventMIDI{self}, velocity)
}
func (self methodsInputEventMIDI) GetVelocity() int64 {
	return self.Runtime.InputEventMIDI_get_velocity(InputEventMIDI{self})
}
func (self methodsInputEventMIDI) SetInstrument(instrument int64) {
	self.Runtime.InputEventMIDI_set_instrument(InputEventMIDI{self}, instrument)
}
func (self methodsInputEventMIDI) GetInstrument() int64 {
	return self.Runtime.InputEventMIDI_get_instrument(InputEventMIDI{self})
}
func (self methodsInputEventMIDI) SetPressure(pressure int64) {
	self.Runtime.InputEventMIDI_set_pressure(InputEventMIDI{self}, pressure)
}
func (self methodsInputEventMIDI) GetPressure() int64 {
	return self.Runtime.InputEventMIDI_get_pressure(InputEventMIDI{self})
}
func (self methodsInputEventMIDI) SetControllerNumber(controller_number int64) {
	self.Runtime.InputEventMIDI_set_controller_number(InputEventMIDI{self}, controller_number)
}
func (self methodsInputEventMIDI) GetControllerNumber() int64 {
	return self.Runtime.InputEventMIDI_get_controller_number(InputEventMIDI{self})
}
func (self methodsInputEventMIDI) SetControllerValue(controller_value int64) {
	self.Runtime.InputEventMIDI_set_controller_value(InputEventMIDI{self}, controller_value)
}
func (self methodsInputEventMIDI) GetControllerValue() int64 {
	return self.Runtime.InputEventMIDI_get_controller_value(InputEventMIDI{self})
}

type methodsInputEventMagnifyGesture struct {
	_ [0]*methodsInputEventMagnifyGesture
	class
}

func (self InputEventMagnifyGesture) InputEventGesture() InputEventGesture {
	var parent InputEventGesture
	parent.class = self.class
	return parent
}
func (self methodsInputEventMagnifyGesture) SetFactor(factor Float) {
	self.Runtime.InputEventMagnifyGesture_set_factor(InputEventMagnifyGesture{self}, factor)
}
func (self methodsInputEventMagnifyGesture) GetFactor() Float {
	return self.Runtime.InputEventMagnifyGesture_get_factor(InputEventMagnifyGesture{self})
}

type methodsInputEventMouse struct {
	_ [0]*methodsInputEventMouse
	class
}

func (self InputEventMouse) InputEventWithModifiers() InputEventWithModifiers {
	var parent InputEventWithModifiers
	parent.class = self.class
	return parent
}
func (self methodsInputEventMouse) SetButtonMask(button_mask MouseButtonMask) {
	self.Runtime.InputEventMouse_set_button_mask(InputEventMouse{self}, button_mask)
}
func (self methodsInputEventMouse) GetButtonMask() MouseButtonMask {
	return self.Runtime.InputEventMouse_get_button_mask(InputEventMouse{self})
}
func (self methodsInputEventMouse) SetPosition(position Vector2) {
	self.Runtime.InputEventMouse_set_position(InputEventMouse{self}, position)
}
func (self methodsInputEventMouse) GetPosition() Vector2 {
	return self.Runtime.InputEventMouse_get_position(InputEventMouse{self})
}
func (self methodsInputEventMouse) SetGlobalPosition(global_position Vector2) {
	self.Runtime.InputEventMouse_set_global_position(InputEventMouse{self}, global_position)
}
func (self methodsInputEventMouse) GetGlobalPosition() Vector2 {
	return self.Runtime.InputEventMouse_get_global_position(InputEventMouse{self})
}

type methodsInputEventMouseButton struct {
	_ [0]*methodsInputEventMouseButton
	class
}

func (self InputEventMouseButton) InputEventMouse() InputEventMouse {
	var parent InputEventMouse
	parent.class = self.class
	return parent
}
func (self methodsInputEventMouseButton) SetFactor(factor Float) {
	self.Runtime.InputEventMouseButton_set_factor(InputEventMouseButton{self}, factor)
}
func (self methodsInputEventMouseButton) GetFactor() Float {
	return self.Runtime.InputEventMouseButton_get_factor(InputEventMouseButton{self})
}
func (self methodsInputEventMouseButton) SetButtonIndex(button_index MouseButton) {
	self.Runtime.InputEventMouseButton_set_button_index(InputEventMouseButton{self}, button_index)
}
func (self methodsInputEventMouseButton) GetButtonIndex() MouseButton {
	return self.Runtime.InputEventMouseButton_get_button_index(InputEventMouseButton{self})
}
func (self methodsInputEventMouseButton) SetPressed(pressed bool) {
	self.Runtime.InputEventMouseButton_set_pressed(InputEventMouseButton{self}, pressed)
}
func (self methodsInputEventMouseButton) SetCanceled(canceled bool) {
	self.Runtime.InputEventMouseButton_set_canceled(InputEventMouseButton{self}, canceled)
}
func (self methodsInputEventMouseButton) SetDoubleClick(double_click bool) {
	self.Runtime.InputEventMouseButton_set_double_click(InputEventMouseButton{self}, double_click)
}
func (self methodsInputEventMouseButton) IsDoubleClick() bool {
	return self.Runtime.InputEventMouseButton_is_double_click(InputEventMouseButton{self})
}

type methodsInputEventMouseMotion struct {
	_ [0]*methodsInputEventMouseMotion
	class
}

func (self InputEventMouseMotion) InputEventMouse() InputEventMouse {
	var parent InputEventMouse
	parent.class = self.class
	return parent
}
func (self methodsInputEventMouseMotion) SetTilt(tilt Vector2) {
	self.Runtime.InputEventMouseMotion_set_tilt(InputEventMouseMotion{self}, tilt)
}
func (self methodsInputEventMouseMotion) GetTilt() Vector2 {
	return self.Runtime.InputEventMouseMotion_get_tilt(InputEventMouseMotion{self})
}
func (self methodsInputEventMouseMotion) SetPressure(pressure Float) {
	self.Runtime.InputEventMouseMotion_set_pressure(InputEventMouseMotion{self}, pressure)
}
func (self methodsInputEventMouseMotion) GetPressure() Float {
	return self.Runtime.InputEventMouseMotion_get_pressure(InputEventMouseMotion{self})
}
func (self methodsInputEventMouseMotion) SetPenInverted(pen_inverted bool) {
	self.Runtime.InputEventMouseMotion_set_pen_inverted(InputEventMouseMotion{self}, pen_inverted)
}
func (self methodsInputEventMouseMotion) GetPenInverted() bool {
	return self.Runtime.InputEventMouseMotion_get_pen_inverted(InputEventMouseMotion{self})
}
func (self methodsInputEventMouseMotion) SetRelative(relative Vector2) {
	self.Runtime.InputEventMouseMotion_set_relative(InputEventMouseMotion{self}, relative)
}
func (self methodsInputEventMouseMotion) GetRelative() Vector2 {
	return self.Runtime.InputEventMouseMotion_get_relative(InputEventMouseMotion{self})
}
func (self methodsInputEventMouseMotion) SetVelocity(velocity Vector2) {
	self.Runtime.InputEventMouseMotion_set_velocity(InputEventMouseMotion{self}, velocity)
}
func (self methodsInputEventMouseMotion) GetVelocity() Vector2 {
	return self.Runtime.InputEventMouseMotion_get_velocity(InputEventMouseMotion{self})
}

type methodsInputEventPanGesture struct {
	_ [0]*methodsInputEventPanGesture
	class
}

func (self InputEventPanGesture) InputEventGesture() InputEventGesture {
	var parent InputEventGesture
	parent.class = self.class
	return parent
}
func (self methodsInputEventPanGesture) SetDelta(delta Vector2) {
	self.Runtime.InputEventPanGesture_set_delta(InputEventPanGesture{self}, delta)
}
func (self methodsInputEventPanGesture) GetDelta() Vector2 {
	return self.Runtime.InputEventPanGesture_get_delta(InputEventPanGesture{self})
}

type methodsInputEventScreenDrag struct {
	_ [0]*methodsInputEventScreenDrag
	class
}

func (self InputEventScreenDrag) InputEventFromWindow() InputEventFromWindow {
	var parent InputEventFromWindow
	parent.class = self.class
	return parent
}
func (self methodsInputEventScreenDrag) SetIndex(index int64) {
	self.Runtime.InputEventScreenDrag_set_index(InputEventScreenDrag{self}, index)
}
func (self methodsInputEventScreenDrag) GetIndex() int64 {
	return self.Runtime.InputEventScreenDrag_get_index(InputEventScreenDrag{self})
}
func (self methodsInputEventScreenDrag) SetTilt(tilt Vector2) {
	self.Runtime.InputEventScreenDrag_set_tilt(InputEventScreenDrag{self}, tilt)
}
func (self methodsInputEventScreenDrag) GetTilt() Vector2 {
	return self.Runtime.InputEventScreenDrag_get_tilt(InputEventScreenDrag{self})
}
func (self methodsInputEventScreenDrag) SetPressure(pressure Float) {
	self.Runtime.InputEventScreenDrag_set_pressure(InputEventScreenDrag{self}, pressure)
}
func (self methodsInputEventScreenDrag) GetPressure() Float {
	return self.Runtime.InputEventScreenDrag_get_pressure(InputEventScreenDrag{self})
}
func (self methodsInputEventScreenDrag) SetPenInverted(pen_inverted bool) {
	self.Runtime.InputEventScreenDrag_set_pen_inverted(InputEventScreenDrag{self}, pen_inverted)
}
func (self methodsInputEventScreenDrag) GetPenInverted() bool {
	return self.Runtime.InputEventScreenDrag_get_pen_inverted(InputEventScreenDrag{self})
}
func (self methodsInputEventScreenDrag) SetPosition(position Vector2) {
	self.Runtime.InputEventScreenDrag_set_position(InputEventScreenDrag{self}, position)
}
func (self methodsInputEventScreenDrag) GetPosition() Vector2 {
	return self.Runtime.InputEventScreenDrag_get_position(InputEventScreenDrag{self})
}
func (self methodsInputEventScreenDrag) SetRelative(relative Vector2) {
	self.Runtime.InputEventScreenDrag_set_relative(InputEventScreenDrag{self}, relative)
}
func (self methodsInputEventScreenDrag) GetRelative() Vector2 {
	return self.Runtime.InputEventScreenDrag_get_relative(InputEventScreenDrag{self})
}
func (self methodsInputEventScreenDrag) SetVelocity(velocity Vector2) {
	self.Runtime.InputEventScreenDrag_set_velocity(InputEventScreenDrag{self}, velocity)
}
func (self methodsInputEventScreenDrag) GetVelocity() Vector2 {
	return self.Runtime.InputEventScreenDrag_get_velocity(InputEventScreenDrag{self})
}

type methodsInputEventScreenTouch struct {
	_ [0]*methodsInputEventScreenTouch
	class
}

func (self InputEventScreenTouch) InputEventFromWindow() InputEventFromWindow {
	var parent InputEventFromWindow
	parent.class = self.class
	return parent
}
func (self methodsInputEventScreenTouch) SetIndex(index int64) {
	self.Runtime.InputEventScreenTouch_set_index(InputEventScreenTouch{self}, index)
}
func (self methodsInputEventScreenTouch) GetIndex() int64 {
	return self.Runtime.InputEventScreenTouch_get_index(InputEventScreenTouch{self})
}
func (self methodsInputEventScreenTouch) SetPosition(position Vector2) {
	self.Runtime.InputEventScreenTouch_set_position(InputEventScreenTouch{self}, position)
}
func (self methodsInputEventScreenTouch) GetPosition() Vector2 {
	return self.Runtime.InputEventScreenTouch_get_position(InputEventScreenTouch{self})
}
func (self methodsInputEventScreenTouch) SetPressed(pressed bool) {
	self.Runtime.InputEventScreenTouch_set_pressed(InputEventScreenTouch{self}, pressed)
}
func (self methodsInputEventScreenTouch) SetCanceled(canceled bool) {
	self.Runtime.InputEventScreenTouch_set_canceled(InputEventScreenTouch{self}, canceled)
}
func (self methodsInputEventScreenTouch) SetDoubleTap(double_tap bool) {
	self.Runtime.InputEventScreenTouch_set_double_tap(InputEventScreenTouch{self}, double_tap)
}
func (self methodsInputEventScreenTouch) IsDoubleTap() bool {
	return self.Runtime.InputEventScreenTouch_is_double_tap(InputEventScreenTouch{self})
}

type methodsInputEventShortcut struct {
	_ [0]*methodsInputEventShortcut
	class
}

func (self InputEventShortcut) InputEvent() InputEvent {
	var parent InputEvent
	parent.class = self.class
	return parent
}
func (self methodsInputEventShortcut) SetShortcut(shortcut Shortcut) {
	self.Runtime.InputEventShortcut_set_shortcut(InputEventShortcut{self}, shortcut)
}
func (self methodsInputEventShortcut) GetShortcut() Shortcut {
	return self.Runtime.InputEventShortcut_get_shortcut(InputEventShortcut{self})
}

type methodsInputEventWithModifiers struct {
	_ [0]*methodsInputEventWithModifiers
	class
}

func (self InputEventWithModifiers) InputEventFromWindow() InputEventFromWindow {
	var parent InputEventFromWindow
	parent.class = self.class
	return parent
}
func (self methodsInputEventWithModifiers) SetCommandOrControlAutoremap(enable bool) {
	self.Runtime.InputEventWithModifiers_set_command_or_control_autoremap(InputEventWithModifiers{self}, enable)
}
func (self methodsInputEventWithModifiers) IsCommandOrControlAutoremap() bool {
	return self.Runtime.InputEventWithModifiers_is_command_or_control_autoremap(InputEventWithModifiers{self})
}
func (self methodsInputEventWithModifiers) IsCommandOrControlPressed() bool {
	return self.Runtime.InputEventWithModifiers_is_command_or_control_pressed(InputEventWithModifiers{self})
}
func (self methodsInputEventWithModifiers) SetAltPressed(pressed bool) {
	self.Runtime.InputEventWithModifiers_set_alt_pressed(InputEventWithModifiers{self}, pressed)
}
func (self methodsInputEventWithModifiers) IsAltPressed() bool {
	return self.Runtime.InputEventWithModifiers_is_alt_pressed(InputEventWithModifiers{self})
}
func (self methodsInputEventWithModifiers) SetShiftPressed(pressed bool) {
	self.Runtime.InputEventWithModifiers_set_shift_pressed(InputEventWithModifiers{self}, pressed)
}
func (self methodsInputEventWithModifiers) IsShiftPressed() bool {
	return self.Runtime.InputEventWithModifiers_is_shift_pressed(InputEventWithModifiers{self})
}
func (self methodsInputEventWithModifiers) SetCtrlPressed(pressed bool) {
	self.Runtime.InputEventWithModifiers_set_ctrl_pressed(InputEventWithModifiers{self}, pressed)
}
func (self methodsInputEventWithModifiers) IsCtrlPressed() bool {
	return self.Runtime.InputEventWithModifiers_is_ctrl_pressed(InputEventWithModifiers{self})
}
func (self methodsInputEventWithModifiers) SetMetaPressed(pressed bool) {
	self.Runtime.InputEventWithModifiers_set_meta_pressed(InputEventWithModifiers{self}, pressed)
}
func (self methodsInputEventWithModifiers) IsMetaPressed() bool {
	return self.Runtime.InputEventWithModifiers_is_meta_pressed(InputEventWithModifiers{self})
}
func (self methodsInputEventWithModifiers) GetModifiersMask() KeyModifierMask {
	return self.Runtime.InputEventWithModifiers_get_modifiers_mask(InputEventWithModifiers{self})
}

type methodsInputMap struct {
	_ [0]*methodsInputMap
	class
}

func (self InputMap) Object() Object { var parent Object; parent.class = self.class; return parent }
func (self methodsInputMap) HasAction(action string) bool {
	return self.Runtime.InputMap_has_action(InputMap{self}, action)
}
func (self methodsInputMap) GetActions() ArrayOf[string] {
	return self.Runtime.InputMap_get_actions(InputMap{self})
}
func (self methodsInputMap) AddAction(action string, deadzone Float) {
	self.Runtime.InputMap_add_action(InputMap{self}, action, deadzone)
}
func (self methodsInputMap) EraseAction(action string) {
	self.Runtime.InputMap_erase_action(InputMap{self}, action)
}
func (self methodsInputMap) ActionSetDeadzone(action string, deadzone Float) {
	self.Runtime.InputMap_action_set_deadzone(InputMap{self}, action, deadzone)
}
func (self methodsInputMap) ActionGetDeadzone(action string) Float {
	return self.Runtime.InputMap_action_get_deadzone(InputMap{self}, action)
}
func (self methodsInputMap) ActionAddEvent(action string, event InputEvent) {
	self.Runtime.InputMap_action_add_event(InputMap{self}, action, event)
}
func (self methodsInputMap) ActionHasEvent(action string, event InputEvent) bool {
	return self.Runtime.InputMap_action_has_event(InputMap{self}, action, event)
}
func (self methodsInputMap) ActionEraseEvent(action string, event InputEvent) {
	self.Runtime.InputMap_action_erase_event(InputMap{self}, action, event)
}
func (self methodsInputMap) ActionEraseEvents(action string) {
	self.Runtime.InputMap_action_erase_events(InputMap{self}, action)
}
func (self methodsInputMap) ActionGetEvents(action string) ArrayOf[InputEvent] {
	return self.Runtime.InputMap_action_get_events(InputMap{self}, action)
}
func (self methodsInputMap) EventIsAction(event InputEvent, action string, exact_match bool) bool {
	return self.Runtime.InputMap_event_is_action(InputMap{self}, event, action, exact_match)
}
func (self methodsInputMap) LoadFromProjectSettings() {
	self.Runtime.InputMap_load_from_project_settings(InputMap{self})
}

type methodsInstancePlaceholder struct {
	_ [0]*methodsInstancePlaceholder
	class
}

func (self InstancePlaceholder) Node() Node {
	var parent Node
	parent.class = self.class
	return parent
}
func (self methodsInstancePlaceholder) GetStoredValues(with_order bool) Dictionary {
	return self.Runtime.InstancePlaceholder_get_stored_values(InstancePlaceholder{self}, with_order)
}
func (self methodsInstancePlaceholder) CreateInstance(replace bool, custom_scene PackedScene) Node {
	return self.Runtime.InstancePlaceholder_create_instance(InstancePlaceholder{self}, replace, custom_scene)
}
func (self methodsInstancePlaceholder) GetInstancePath() string {
	return self.Runtime.InstancePlaceholder_get_instance_path(InstancePlaceholder{self})
}

type methodsIntervalTweener struct {
	_ [0]*methodsIntervalTweener
	class
}

func (self IntervalTweener) Tweener() Tweener {
	var parent Tweener
	parent.class = self.class
	return parent
}

type methodsItemList struct {
	_ [0]*methodsItemList
	class
}

func (self ItemList) Control() Control { var parent Control; parent.class = self.class; return parent }
func (self methodsItemList) AddItem(text string, icon Texture2D, selectable bool) int64 {
	return self.Runtime.ItemList_add_item(ItemList{self}, text, icon, selectable)
}
func (self methodsItemList) AddIconItem(icon Texture2D, selectable bool) int64 {
	return self.Runtime.ItemList_add_icon_item(ItemList{self}, icon, selectable)
}
func (self methodsItemList) SetItemText(idx int64, text string) {
	self.Runtime.ItemList_set_item_text(ItemList{self}, idx, text)
}
func (self methodsItemList) GetItemText(idx int64) string {
	return self.Runtime.ItemList_get_item_text(ItemList{self}, idx)
}
func (self methodsItemList) SetItemIcon(idx int64, icon Texture2D) {
	self.Runtime.ItemList_set_item_icon(ItemList{self}, idx, icon)
}
func (self methodsItemList) GetItemIcon(idx int64) Texture2D {
	return self.Runtime.ItemList_get_item_icon(ItemList{self}, idx)
}
func (self methodsItemList) SetItemTextDirection(idx int64, direction ControlTextDirection) {
	self.Runtime.ItemList_set_item_text_direction(ItemList{self}, idx, direction)
}
func (self methodsItemList) GetItemTextDirection(idx int64) ControlTextDirection {
	return self.Runtime.ItemList_get_item_text_direction(ItemList{self}, idx)
}
func (self methodsItemList) SetItemLanguage(idx int64, language string) {
	self.Runtime.ItemList_set_item_language(ItemList{self}, idx, language)
}
func (self methodsItemList) GetItemLanguage(idx int64) string {
	return self.Runtime.ItemList_get_item_language(ItemList{self}, idx)
}
func (self methodsItemList) SetItemIconTransposed(idx int64, transposed bool) {
	self.Runtime.ItemList_set_item_icon_transposed(ItemList{self}, idx, transposed)
}
func (self methodsItemList) IsItemIconTransposed(idx int64) bool {
	return self.Runtime.ItemList_is_item_icon_transposed(ItemList{self}, idx)
}
func (self methodsItemList) SetItemIconRegion(idx int64, rect Rect2) {
	self.Runtime.ItemList_set_item_icon_region(ItemList{self}, idx, rect)
}
func (self methodsItemList) GetItemIconRegion(idx int64) Rect2 {
	return self.Runtime.ItemList_get_item_icon_region(ItemList{self}, idx)
}
func (self methodsItemList) SetItemIconModulate(idx int64, modulate Color) {
	self.Runtime.ItemList_set_item_icon_modulate(ItemList{self}, idx, modulate)
}
func (self methodsItemList) GetItemIconModulate(idx int64) Color {
	return self.Runtime.ItemList_get_item_icon_modulate(ItemList{self}, idx)
}
func (self methodsItemList) SetItemSelectable(idx int64, selectable bool) {
	self.Runtime.ItemList_set_item_selectable(ItemList{self}, idx, selectable)
}
func (self methodsItemList) IsItemSelectable(idx int64) bool {
	return self.Runtime.ItemList_is_item_selectable(ItemList{self}, idx)
}
func (self methodsItemList) SetItemDisabled(idx int64, disabled bool) {
	self.Runtime.ItemList_set_item_disabled(ItemList{self}, idx, disabled)
}
func (self methodsItemList) IsItemDisabled(idx int64) bool {
	return self.Runtime.ItemList_is_item_disabled(ItemList{self}, idx)
}
func (self methodsItemList) SetItemMetadata(idx int64, metadata any) {
	self.Runtime.ItemList_set_item_metadata(ItemList{self}, idx, metadata)
}
func (self methodsItemList) GetItemMetadata(idx int64) any {
	return self.Runtime.ItemList_get_item_metadata(ItemList{self}, idx)
}
func (self methodsItemList) SetItemCustomBgColor(idx int64, custom_bg_color Color) {
	self.Runtime.ItemList_set_item_custom_bg_color(ItemList{self}, idx, custom_bg_color)
}
func (self methodsItemList) GetItemCustomBgColor(idx int64) Color {
	return self.Runtime.ItemList_get_item_custom_bg_color(ItemList{self}, idx)
}
func (self methodsItemList) SetItemCustomFgColor(idx int64, custom_fg_color Color) {
	self.Runtime.ItemList_set_item_custom_fg_color(ItemList{self}, idx, custom_fg_color)
}
func (self methodsItemList) GetItemCustomFgColor(idx int64) Color {
	return self.Runtime.ItemList_get_item_custom_fg_color(ItemList{self}, idx)
}
func (self methodsItemList) GetItemRect(idx int64, expand bool) Rect2 {
	return self.Runtime.ItemList_get_item_rect(ItemList{self}, idx, expand)
}
func (self methodsItemList) SetItemTooltipEnabled(idx int64, enable bool) {
	self.Runtime.ItemList_set_item_tooltip_enabled(ItemList{self}, idx, enable)
}
func (self methodsItemList) IsItemTooltipEnabled(idx int64) bool {
	return self.Runtime.ItemList_is_item_tooltip_enabled(ItemList{self}, idx)
}
func (self methodsItemList) SetItemTooltip(idx int64, tooltip string) {
	self.Runtime.ItemList_set_item_tooltip(ItemList{self}, idx, tooltip)
}
func (self methodsItemList) GetItemTooltip(idx int64) string {
	return self.Runtime.ItemList_get_item_tooltip(ItemList{self}, idx)
}
func (self methodsItemList) Select(idx int64, single bool) {
	self.Runtime.ItemList_select(ItemList{self}, idx, single)
}
func (self methodsItemList) Deselect(idx int64) {
	self.Runtime.ItemList_deselect(ItemList{self}, idx)
}
func (self methodsItemList) DeselectAll() {
	self.Runtime.ItemList_deselect_all(ItemList{self})
}
func (self methodsItemList) IsSelected(idx int64) bool {
	return self.Runtime.ItemList_is_selected(ItemList{self}, idx)
}
func (self methodsItemList) GetSelectedItems() PackedInt32Array {
	return self.Runtime.ItemList_get_selected_items(ItemList{self})
}
func (self methodsItemList) MoveItem(from_idx int64, to_idx int64) {
	self.Runtime.ItemList_move_item(ItemList{self}, from_idx, to_idx)
}
func (self methodsItemList) SetItemCount(count int64) {
	self.Runtime.ItemList_set_item_count(ItemList{self}, count)
}
func (self methodsItemList) GetItemCount() int64 {
	return self.Runtime.ItemList_get_item_count(ItemList{self})
}
func (self methodsItemList) RemoveItem(idx int64) {
	self.Runtime.ItemList_remove_item(ItemList{self}, idx)
}
func (self methodsItemList) Clear() {
	self.Runtime.ItemList_clear(ItemList{self})
}
func (self methodsItemList) SortItemsByText() {
	self.Runtime.ItemList_sort_items_by_text(ItemList{self})
}
func (self methodsItemList) SetFixedColumnWidth(width int64) {
	self.Runtime.ItemList_set_fixed_column_width(ItemList{self}, width)
}
func (self methodsItemList) GetFixedColumnWidth() int64 {
	return self.Runtime.ItemList_get_fixed_column_width(ItemList{self})
}
func (self methodsItemList) SetSameColumnWidth(enable bool) {
	self.Runtime.ItemList_set_same_column_width(ItemList{self}, enable)
}
func (self methodsItemList) IsSameColumnWidth() bool {
	return self.Runtime.ItemList_is_same_column_width(ItemList{self})
}
func (self methodsItemList) SetMaxTextLines(lines int64) {
	self.Runtime.ItemList_set_max_text_lines(ItemList{self}, lines)
}
func (self methodsItemList) GetMaxTextLines() int64 {
	return self.Runtime.ItemList_get_max_text_lines(ItemList{self})
}
func (self methodsItemList) SetMaxColumns(amount int64) {
	self.Runtime.ItemList_set_max_columns(ItemList{self}, amount)
}
func (self methodsItemList) GetMaxColumns() int64 {
	return self.Runtime.ItemList_get_max_columns(ItemList{self})
}
func (self methodsItemList) SetSelectMode(mode ItemListSelectMode) {
	self.Runtime.ItemList_set_select_mode(ItemList{self}, mode)
}
func (self methodsItemList) GetSelectMode() ItemListSelectMode {
	return self.Runtime.ItemList_get_select_mode(ItemList{self})
}
func (self methodsItemList) SetIconMode(mode ItemListIconMode) {
	self.Runtime.ItemList_set_icon_mode(ItemList{self}, mode)
}
func (self methodsItemList) GetIconMode() ItemListIconMode {
	return self.Runtime.ItemList_get_icon_mode(ItemList{self})
}
func (self methodsItemList) SetFixedIconSize(size Vector2i) {
	self.Runtime.ItemList_set_fixed_icon_size(ItemList{self}, size)
}
func (self methodsItemList) GetFixedIconSize() Vector2i {
	return self.Runtime.ItemList_get_fixed_icon_size(ItemList{self})
}
func (self methodsItemList) SetIconScale(scale Float) {
	self.Runtime.ItemList_set_icon_scale(ItemList{self}, scale)
}
func (self methodsItemList) GetIconScale() Float {
	return self.Runtime.ItemList_get_icon_scale(ItemList{self})
}
func (self methodsItemList) SetAllowRmbSelect(allow bool) {
	self.Runtime.ItemList_set_allow_rmb_select(ItemList{self}, allow)
}
func (self methodsItemList) GetAllowRmbSelect() bool {
	return self.Runtime.ItemList_get_allow_rmb_select(ItemList{self})
}
func (self methodsItemList) SetAllowReselect(allow bool) {
	self.Runtime.ItemList_set_allow_reselect(ItemList{self}, allow)
}
func (self methodsItemList) GetAllowReselect() bool {
	return self.Runtime.ItemList_get_allow_reselect(ItemList{self})
}
func (self methodsItemList) SetAllowSearch(allow bool) {
	self.Runtime.ItemList_set_allow_search(ItemList{self}, allow)
}
func (self methodsItemList) GetAllowSearch() bool {
	return self.Runtime.ItemList_get_allow_search(ItemList{self})
}
func (self methodsItemList) SetAutoHeight(enable bool) {
	self.Runtime.ItemList_set_auto_height(ItemList{self}, enable)
}
func (self methodsItemList) HasAutoHeight() bool {
	return self.Runtime.ItemList_has_auto_height(ItemList{self})
}
func (self methodsItemList) IsAnythingSelected() bool {
	return self.Runtime.ItemList_is_anything_selected(ItemList{self})
}
func (self methodsItemList) GetItemAtPosition(position Vector2, exact bool) int64 {
	return self.Runtime.ItemList_get_item_at_position(ItemList{self}, position, exact)
}
func (self methodsItemList) EnsureCurrentIsVisible() {
	self.Runtime.ItemList_ensure_current_is_visible(ItemList{self})
}
func (self methodsItemList) GetVScrollBar() VScrollBar {
	return self.Runtime.ItemList_get_v_scroll_bar(ItemList{self})
}
func (self methodsItemList) SetTextOverrunBehavior(overrun_behavior TextServerOverrunBehavior) {
	self.Runtime.ItemList_set_text_overrun_behavior(ItemList{self}, overrun_behavior)
}
func (self methodsItemList) GetTextOverrunBehavior() TextServerOverrunBehavior {
	return self.Runtime.ItemList_get_text_overrun_behavior(ItemList{self})
}
func (self methodsItemList) ForceUpdateListSize() {
	self.Runtime.ItemList_force_update_list_size(ItemList{self})
}

type methodsJNISingleton struct {
	_ [0]*methodsJNISingleton
	class
}

func (self JNISingleton) Object() Object { var parent Object; parent.class = self.class; return parent }

type methodsJSON struct {
	_ [0]*methodsJSON
	class
}

func (self JSON) Resource() Resource { var parent Resource; parent.class = self.class; return parent }
func (self methodsJSON) Stringify(data any, indent string, sort_keys bool, full_precision bool) string {
	return self.Runtime.JSON_stringify(JSON{self}, data, indent, sort_keys, full_precision)
}
func (self methodsJSON) ParseString(json_string string) any {
	return self.Runtime.JSON_parse_string(JSON{self}, json_string)
}
func (self methodsJSON) Parse(json_text string, keep_text bool) int64 {
	return self.Runtime.JSON_parse(JSON{self}, json_text, keep_text)
}
func (self methodsJSON) GetData() any {
	return self.Runtime.JSON_get_data(JSON{self})
}
func (self methodsJSON) SetData(data any) {
	self.Runtime.JSON_set_data(JSON{self}, data)
}
func (self methodsJSON) GetParsedText() string {
	return self.Runtime.JSON_get_parsed_text(JSON{self})
}
func (self methodsJSON) GetErrorLine() int64 {
	return self.Runtime.JSON_get_error_line(JSON{self})
}
func (self methodsJSON) GetErrorMessage() string {
	return self.Runtime.JSON_get_error_message(JSON{self})
}

type methodsJSONRPC struct {
	_ [0]*methodsJSONRPC
	class
}

func (self JSONRPC) Object() Object { var parent Object; parent.class = self.class; return parent }
func (self methodsJSONRPC) SetScope(scope string, target Object) {
	self.Runtime.JSONRPC_set_scope(JSONRPC{self}, scope, target)
}
func (self methodsJSONRPC) ProcessAction(action any, recurse bool) any {
	return self.Runtime.JSONRPC_process_action(JSONRPC{self}, action, recurse)
}
func (self methodsJSONRPC) ProcessString(action string) string {
	return self.Runtime.JSONRPC_process_string(JSONRPC{self}, action)
}
func (self methodsJSONRPC) MakeRequest(method string, params any, id any) Dictionary {
	return self.Runtime.JSONRPC_make_request(JSONRPC{self}, method, params, id)
}
func (self methodsJSONRPC) MakeResponse(result any, id any) Dictionary {
	return self.Runtime.JSONRPC_make_response(JSONRPC{self}, result, id)
}
func (self methodsJSONRPC) MakeNotification(method string, params any) Dictionary {
	return self.Runtime.JSONRPC_make_notification(JSONRPC{self}, method, params)
}
func (self methodsJSONRPC) MakeResponseError(code int64, message string, id any) Dictionary {
	return self.Runtime.JSONRPC_make_response_error(JSONRPC{self}, code, message, id)
}

type methodsJavaClass struct {
	_ [0]*methodsJavaClass
	class
}

func (self JavaClass) RefCounted() RefCounted {
	var parent RefCounted
	parent.class = self.class
	return parent
}

type methodsJavaClassWrapper struct {
	_ [0]*methodsJavaClassWrapper
	class
}

func (self JavaClassWrapper) Object() Object {
	var parent Object
	parent.class = self.class
	return parent
}
func (self methodsJavaClassWrapper) Wrap(name string) JavaClass {
	return self.Runtime.JavaClassWrapper_wrap(JavaClassWrapper{self}, name)
}

type methodsJavaScriptBridge struct {
	_ [0]*methodsJavaScriptBridge
	class
}

func (self JavaScriptBridge) Object() Object {
	var parent Object
	parent.class = self.class
	return parent
}
func (self methodsJavaScriptBridge) Eval(code string, use_global_execution_context bool) any {
	return self.Runtime.JavaScriptBridge_eval(JavaScriptBridge{self}, code, use_global_execution_context)
}
func (self methodsJavaScriptBridge) GetInterface(intf string) JavaScriptObject {
	return self.Runtime.JavaScriptBridge_get_interface(JavaScriptBridge{self}, intf)
}
func (self methodsJavaScriptBridge) CreateCallback(callable Callable) JavaScriptObject {
	return self.Runtime.JavaScriptBridge_create_callback(JavaScriptBridge{self}, callable)
}
func (self methodsJavaScriptBridge) CreateObject(object string) any {
	return self.Runtime.JavaScriptBridge_create_object(JavaScriptBridge{self}, object)
}
func (self methodsJavaScriptBridge) DownloadBuffer(buffer PackedByteArray, name string, mime string) {
	self.Runtime.JavaScriptBridge_download_buffer(JavaScriptBridge{self}, buffer, name, mime)
}
func (self methodsJavaScriptBridge) PwaNeedsUpdate() bool {
	return self.Runtime.JavaScriptBridge_pwa_needs_update(JavaScriptBridge{self})
}
func (self methodsJavaScriptBridge) PwaUpdate() int64 {
	return self.Runtime.JavaScriptBridge_pwa_update(JavaScriptBridge{self})
}
func (self methodsJavaScriptBridge) ForceFsSync() {
	self.Runtime.JavaScriptBridge_force_fs_sync(JavaScriptBridge{self})
}

type methodsJavaScriptObject struct {
	_ [0]*methodsJavaScriptObject
	class
}

func (self JavaScriptObject) RefCounted() RefCounted {
	var parent RefCounted
	parent.class = self.class
	return parent
}

type methodsJoint2D struct {
	_ [0]*methodsJoint2D
	class
}

func (self Joint2D) Node2D() Node2D { var parent Node2D; parent.class = self.class; return parent }
func (self methodsJoint2D) SetNodeA(node NodePath) {
	self.Runtime.Joint2D_set_node_a(Joint2D{self}, node)
}
func (self methodsJoint2D) GetNodeA() NodePath {
	return self.Runtime.Joint2D_get_node_a(Joint2D{self})
}
func (self methodsJoint2D) SetNodeB(node NodePath) {
	self.Runtime.Joint2D_set_node_b(Joint2D{self}, node)
}
func (self methodsJoint2D) GetNodeB() NodePath {
	return self.Runtime.Joint2D_get_node_b(Joint2D{self})
}
func (self methodsJoint2D) SetBias(bias Float) {
	self.Runtime.Joint2D_set_bias(Joint2D{self}, bias)
}
func (self methodsJoint2D) GetBias() Float {
	return self.Runtime.Joint2D_get_bias(Joint2D{self})
}
func (self methodsJoint2D) SetExcludeNodesFromCollision(enable bool) {
	self.Runtime.Joint2D_set_exclude_nodes_from_collision(Joint2D{self}, enable)
}
func (self methodsJoint2D) GetExcludeNodesFromCollision() bool {
	return self.Runtime.Joint2D_get_exclude_nodes_from_collision(Joint2D{self})
}
func (self methodsJoint2D) GetRid() RID {
	return self.Runtime.Joint2D_get_rid(Joint2D{self})
}

type methodsJoint3D struct {
	_ [0]*methodsJoint3D
	class
}

func (self Joint3D) Node3D() Node3D { var parent Node3D; parent.class = self.class; return parent }
func (self methodsJoint3D) SetNodeA(node NodePath) {
	self.Runtime.Joint3D_set_node_a(Joint3D{self}, node)
}
func (self methodsJoint3D) GetNodeA() NodePath {
	return self.Runtime.Joint3D_get_node_a(Joint3D{self})
}
func (self methodsJoint3D) SetNodeB(node NodePath) {
	self.Runtime.Joint3D_set_node_b(Joint3D{self}, node)
}
func (self methodsJoint3D) GetNodeB() NodePath {
	return self.Runtime.Joint3D_get_node_b(Joint3D{self})
}
func (self methodsJoint3D) SetSolverPriority(priority int64) {
	self.Runtime.Joint3D_set_solver_priority(Joint3D{self}, priority)
}
func (self methodsJoint3D) GetSolverPriority() int64 {
	return self.Runtime.Joint3D_get_solver_priority(Joint3D{self})
}
func (self methodsJoint3D) SetExcludeNodesFromCollision(enable bool) {
	self.Runtime.Joint3D_set_exclude_nodes_from_collision(Joint3D{self}, enable)
}
func (self methodsJoint3D) GetExcludeNodesFromCollision() bool {
	return self.Runtime.Joint3D_get_exclude_nodes_from_collision(Joint3D{self})
}
func (self methodsJoint3D) GetRid() RID {
	return self.Runtime.Joint3D_get_rid(Joint3D{self})
}

type methodsKinematicCollision2D struct {
	_ [0]*methodsKinematicCollision2D
	class
}

func (self KinematicCollision2D) RefCounted() RefCounted {
	var parent RefCounted
	parent.class = self.class
	return parent
}
func (self methodsKinematicCollision2D) GetPosition() Vector2 {
	return self.Runtime.KinematicCollision2D_get_position(KinematicCollision2D{self})
}
func (self methodsKinematicCollision2D) GetNormal() Vector2 {
	return self.Runtime.KinematicCollision2D_get_normal(KinematicCollision2D{self})
}
func (self methodsKinematicCollision2D) GetTravel() Vector2 {
	return self.Runtime.KinematicCollision2D_get_travel(KinematicCollision2D{self})
}
func (self methodsKinematicCollision2D) GetRemainder() Vector2 {
	return self.Runtime.KinematicCollision2D_get_remainder(KinematicCollision2D{self})
}
func (self methodsKinematicCollision2D) GetAngle(up_direction Vector2) Float {
	return self.Runtime.KinematicCollision2D_get_angle(KinematicCollision2D{self}, up_direction)
}
func (self methodsKinematicCollision2D) GetDepth() Float {
	return self.Runtime.KinematicCollision2D_get_depth(KinematicCollision2D{self})
}
func (self methodsKinematicCollision2D) GetLocalShape() Object {
	return self.Runtime.KinematicCollision2D_get_local_shape(KinematicCollision2D{self})
}
func (self methodsKinematicCollision2D) GetCollider() Object {
	return self.Runtime.KinematicCollision2D_get_collider(KinematicCollision2D{self})
}
func (self methodsKinematicCollision2D) GetColliderId() int64 {
	return self.Runtime.KinematicCollision2D_get_collider_id(KinematicCollision2D{self})
}
func (self methodsKinematicCollision2D) GetColliderRid() RID {
	return self.Runtime.KinematicCollision2D_get_collider_rid(KinematicCollision2D{self})
}
func (self methodsKinematicCollision2D) GetColliderShape() Object {
	return self.Runtime.KinematicCollision2D_get_collider_shape(KinematicCollision2D{self})
}
func (self methodsKinematicCollision2D) GetColliderShapeIndex() int64 {
	return self.Runtime.KinematicCollision2D_get_collider_shape_index(KinematicCollision2D{self})
}
func (self methodsKinematicCollision2D) GetColliderVelocity() Vector2 {
	return self.Runtime.KinematicCollision2D_get_collider_velocity(KinematicCollision2D{self})
}

type methodsKinematicCollision3D struct {
	_ [0]*methodsKinematicCollision3D
	class
}

func (self KinematicCollision3D) RefCounted() RefCounted {
	var parent RefCounted
	parent.class = self.class
	return parent
}
func (self methodsKinematicCollision3D) GetTravel() Vector3 {
	return self.Runtime.KinematicCollision3D_get_travel(KinematicCollision3D{self})
}
func (self methodsKinematicCollision3D) GetRemainder() Vector3 {
	return self.Runtime.KinematicCollision3D_get_remainder(KinematicCollision3D{self})
}
func (self methodsKinematicCollision3D) GetDepth() Float {
	return self.Runtime.KinematicCollision3D_get_depth(KinematicCollision3D{self})
}
func (self methodsKinematicCollision3D) GetCollisionCount() int64 {
	return self.Runtime.KinematicCollision3D_get_collision_count(KinematicCollision3D{self})
}
func (self methodsKinematicCollision3D) GetPosition(collision_index int64) Vector3 {
	return self.Runtime.KinematicCollision3D_get_position(KinematicCollision3D{self}, collision_index)
}
func (self methodsKinematicCollision3D) GetNormal(collision_index int64) Vector3 {
	return self.Runtime.KinematicCollision3D_get_normal(KinematicCollision3D{self}, collision_index)
}
func (self methodsKinematicCollision3D) GetAngle(collision_index int64, up_direction Vector3) Float {
	return self.Runtime.KinematicCollision3D_get_angle(KinematicCollision3D{self}, collision_index, up_direction)
}
func (self methodsKinematicCollision3D) GetLocalShape(collision_index int64) Object {
	return self.Runtime.KinematicCollision3D_get_local_shape(KinematicCollision3D{self}, collision_index)
}
func (self methodsKinematicCollision3D) GetCollider(collision_index int64) Object {
	return self.Runtime.KinematicCollision3D_get_collider(KinematicCollision3D{self}, collision_index)
}
func (self methodsKinematicCollision3D) GetColliderId(collision_index int64) int64 {
	return self.Runtime.KinematicCollision3D_get_collider_id(KinematicCollision3D{self}, collision_index)
}
func (self methodsKinematicCollision3D) GetColliderRid(collision_index int64) RID {
	return self.Runtime.KinematicCollision3D_get_collider_rid(KinematicCollision3D{self}, collision_index)
}
func (self methodsKinematicCollision3D) GetColliderShape(collision_index int64) Object {
	return self.Runtime.KinematicCollision3D_get_collider_shape(KinematicCollision3D{self}, collision_index)
}
func (self methodsKinematicCollision3D) GetColliderShapeIndex(collision_index int64) int64 {
	return self.Runtime.KinematicCollision3D_get_collider_shape_index(KinematicCollision3D{self}, collision_index)
}
func (self methodsKinematicCollision3D) GetColliderVelocity(collision_index int64) Vector3 {
	return self.Runtime.KinematicCollision3D_get_collider_velocity(KinematicCollision3D{self}, collision_index)
}

type methodsLabel struct {
	_ [0]*methodsLabel
	class
}

func (self Label) Control() Control { var parent Control; parent.class = self.class; return parent }
func (self methodsLabel) SetHorizontalAlignment(alignment HorizontalAlignment) {
	self.Runtime.Label_set_horizontal_alignment(Label{self}, alignment)
}
func (self methodsLabel) GetHorizontalAlignment() HorizontalAlignment {
	return self.Runtime.Label_get_horizontal_alignment(Label{self})
}
func (self methodsLabel) SetVerticalAlignment(alignment VerticalAlignment) {
	self.Runtime.Label_set_vertical_alignment(Label{self}, alignment)
}
func (self methodsLabel) GetVerticalAlignment() VerticalAlignment {
	return self.Runtime.Label_get_vertical_alignment(Label{self})
}
func (self methodsLabel) SetText(text string) {
	self.Runtime.Label_set_text(Label{self}, text)
}
func (self methodsLabel) GetText() string {
	return self.Runtime.Label_get_text(Label{self})
}
func (self methodsLabel) SetLabelSettings(settings LabelSettings) {
	self.Runtime.Label_set_label_settings(Label{self}, settings)
}
func (self methodsLabel) GetLabelSettings() LabelSettings {
	return self.Runtime.Label_get_label_settings(Label{self})
}
func (self methodsLabel) SetTextDirection(direction ControlTextDirection) {
	self.Runtime.Label_set_text_direction(Label{self}, direction)
}
func (self methodsLabel) GetTextDirection() ControlTextDirection {
	return self.Runtime.Label_get_text_direction(Label{self})
}
func (self methodsLabel) SetLanguage(language string) {
	self.Runtime.Label_set_language(Label{self}, language)
}
func (self methodsLabel) GetLanguage() string {
	return self.Runtime.Label_get_language(Label{self})
}
func (self methodsLabel) SetAutowrapMode(autowrap_mode TextServerAutowrapMode) {
	self.Runtime.Label_set_autowrap_mode(Label{self}, autowrap_mode)
}
func (self methodsLabel) GetAutowrapMode() TextServerAutowrapMode {
	return self.Runtime.Label_get_autowrap_mode(Label{self})
}
func (self methodsLabel) SetJustificationFlags(justification_flags TextServerJustificationFlag) {
	self.Runtime.Label_set_justification_flags(Label{self}, justification_flags)
}
func (self methodsLabel) GetJustificationFlags() TextServerJustificationFlag {
	return self.Runtime.Label_get_justification_flags(Label{self})
}
func (self methodsLabel) SetClipText(enable bool) {
	self.Runtime.Label_set_clip_text(Label{self}, enable)
}
func (self methodsLabel) IsClippingText() bool {
	return self.Runtime.Label_is_clipping_text(Label{self})
}
func (self methodsLabel) SetTabStops(tab_stops PackedFloat32Array) {
	self.Runtime.Label_set_tab_stops(Label{self}, tab_stops)
}
func (self methodsLabel) GetTabStops() PackedFloat32Array {
	return self.Runtime.Label_get_tab_stops(Label{self})
}
func (self methodsLabel) SetTextOverrunBehavior(overrun_behavior TextServerOverrunBehavior) {
	self.Runtime.Label_set_text_overrun_behavior(Label{self}, overrun_behavior)
}
func (self methodsLabel) GetTextOverrunBehavior() TextServerOverrunBehavior {
	return self.Runtime.Label_get_text_overrun_behavior(Label{self})
}
func (self methodsLabel) SetEllipsisChar(char string) {
	self.Runtime.Label_set_ellipsis_char(Label{self}, char)
}
func (self methodsLabel) GetEllipsisChar() string {
	return self.Runtime.Label_get_ellipsis_char(Label{self})
}
func (self methodsLabel) SetUppercase(enable bool) {
	self.Runtime.Label_set_uppercase(Label{self}, enable)
}
func (self methodsLabel) IsUppercase() bool {
	return self.Runtime.Label_is_uppercase(Label{self})
}
func (self methodsLabel) GetLineHeight(line int64) int64 {
	return self.Runtime.Label_get_line_height(Label{self}, line)
}
func (self methodsLabel) GetLineCount() int64 {
	return self.Runtime.Label_get_line_count(Label{self})
}
func (self methodsLabel) GetVisibleLineCount() int64 {
	return self.Runtime.Label_get_visible_line_count(Label{self})
}
func (self methodsLabel) GetTotalCharacterCount() int64 {
	return self.Runtime.Label_get_total_character_count(Label{self})
}
func (self methodsLabel) SetVisibleCharacters(amount int64) {
	self.Runtime.Label_set_visible_characters(Label{self}, amount)
}
func (self methodsLabel) GetVisibleCharacters() int64 {
	return self.Runtime.Label_get_visible_characters(Label{self})
}
func (self methodsLabel) GetVisibleCharactersBehavior() TextServerVisibleCharactersBehavior {
	return self.Runtime.Label_get_visible_characters_behavior(Label{self})
}
func (self methodsLabel) SetVisibleCharactersBehavior(behavior TextServerVisibleCharactersBehavior) {
	self.Runtime.Label_set_visible_characters_behavior(Label{self}, behavior)
}
func (self methodsLabel) SetVisibleRatio(ratio Float) {
	self.Runtime.Label_set_visible_ratio(Label{self}, ratio)
}
func (self methodsLabel) GetVisibleRatio() Float {
	return self.Runtime.Label_get_visible_ratio(Label{self})
}
func (self methodsLabel) SetLinesSkipped(lines_skipped int64) {
	self.Runtime.Label_set_lines_skipped(Label{self}, lines_skipped)
}
func (self methodsLabel) GetLinesSkipped() int64 {
	return self.Runtime.Label_get_lines_skipped(Label{self})
}
func (self methodsLabel) SetMaxLinesVisible(lines_visible int64) {
	self.Runtime.Label_set_max_lines_visible(Label{self}, lines_visible)
}
func (self methodsLabel) GetMaxLinesVisible() int64 {
	return self.Runtime.Label_get_max_lines_visible(Label{self})
}
func (self methodsLabel) SetStructuredTextBidiOverride(parser TextServerStructuredTextParser) {
	self.Runtime.Label_set_structured_text_bidi_override(Label{self}, parser)
}
func (self methodsLabel) GetStructuredTextBidiOverride() TextServerStructuredTextParser {
	return self.Runtime.Label_get_structured_text_bidi_override(Label{self})
}
func (self methodsLabel) SetStructuredTextBidiOverrideOptions(args Array) {
	self.Runtime.Label_set_structured_text_bidi_override_options(Label{self}, args)
}
func (self methodsLabel) GetStructuredTextBidiOverrideOptions() Array {
	return self.Runtime.Label_get_structured_text_bidi_override_options(Label{self})
}
func (self methodsLabel) GetCharacterBounds(pos int64) Rect2 {
	return self.Runtime.Label_get_character_bounds(Label{self}, pos)
}

type methodsLabel3D struct {
	_ [0]*methodsLabel3D
	class
}

func (self Label3D) GeometryInstance3D() GeometryInstance3D {
	var parent GeometryInstance3D
	parent.class = self.class
	return parent
}
func (self methodsLabel3D) SetHorizontalAlignment(alignment HorizontalAlignment) {
	self.Runtime.Label3D_set_horizontal_alignment(Label3D{self}, alignment)
}
func (self methodsLabel3D) GetHorizontalAlignment() HorizontalAlignment {
	return self.Runtime.Label3D_get_horizontal_alignment(Label3D{self})
}
func (self methodsLabel3D) SetVerticalAlignment(alignment VerticalAlignment) {
	self.Runtime.Label3D_set_vertical_alignment(Label3D{self}, alignment)
}
func (self methodsLabel3D) GetVerticalAlignment() VerticalAlignment {
	return self.Runtime.Label3D_get_vertical_alignment(Label3D{self})
}
func (self methodsLabel3D) SetModulate(modulate Color) {
	self.Runtime.Label3D_set_modulate(Label3D{self}, modulate)
}
func (self methodsLabel3D) GetModulate() Color {
	return self.Runtime.Label3D_get_modulate(Label3D{self})
}
func (self methodsLabel3D) SetOutlineModulate(modulate Color) {
	self.Runtime.Label3D_set_outline_modulate(Label3D{self}, modulate)
}
func (self methodsLabel3D) GetOutlineModulate() Color {
	return self.Runtime.Label3D_get_outline_modulate(Label3D{self})
}
func (self methodsLabel3D) SetText(text string) {
	self.Runtime.Label3D_set_text(Label3D{self}, text)
}
func (self methodsLabel3D) GetText() string {
	return self.Runtime.Label3D_get_text(Label3D{self})
}
func (self methodsLabel3D) SetTextDirection(direction TextServerDirection) {
	self.Runtime.Label3D_set_text_direction(Label3D{self}, direction)
}
func (self methodsLabel3D) GetTextDirection() TextServerDirection {
	return self.Runtime.Label3D_get_text_direction(Label3D{self})
}
func (self methodsLabel3D) SetLanguage(language string) {
	self.Runtime.Label3D_set_language(Label3D{self}, language)
}
func (self methodsLabel3D) GetLanguage() string {
	return self.Runtime.Label3D_get_language(Label3D{self})
}
func (self methodsLabel3D) SetStructuredTextBidiOverride(parser TextServerStructuredTextParser) {
	self.Runtime.Label3D_set_structured_text_bidi_override(Label3D{self}, parser)
}
func (self methodsLabel3D) GetStructuredTextBidiOverride() TextServerStructuredTextParser {
	return self.Runtime.Label3D_get_structured_text_bidi_override(Label3D{self})
}
func (self methodsLabel3D) SetStructuredTextBidiOverrideOptions(args Array) {
	self.Runtime.Label3D_set_structured_text_bidi_override_options(Label3D{self}, args)
}
func (self methodsLabel3D) GetStructuredTextBidiOverrideOptions() Array {
	return self.Runtime.Label3D_get_structured_text_bidi_override_options(Label3D{self})
}
func (self methodsLabel3D) SetUppercase(enable bool) {
	self.Runtime.Label3D_set_uppercase(Label3D{self}, enable)
}
func (self methodsLabel3D) IsUppercase() bool {
	return self.Runtime.Label3D_is_uppercase(Label3D{self})
}
func (self methodsLabel3D) SetRenderPriority(priority int64) {
	self.Runtime.Label3D_set_render_priority(Label3D{self}, priority)
}
func (self methodsLabel3D) GetRenderPriority() int64 {
	return self.Runtime.Label3D_get_render_priority(Label3D{self})
}
func (self methodsLabel3D) SetOutlineRenderPriority(priority int64) {
	self.Runtime.Label3D_set_outline_render_priority(Label3D{self}, priority)
}
func (self methodsLabel3D) GetOutlineRenderPriority() int64 {
	return self.Runtime.Label3D_get_outline_render_priority(Label3D{self})
}
func (self methodsLabel3D) SetFont(font Font) {
	self.Runtime.Label3D_set_font(Label3D{self}, font)
}
func (self methodsLabel3D) GetFont() Font {
	return self.Runtime.Label3D_get_font(Label3D{self})
}
func (self methodsLabel3D) SetFontSize(size int64) {
	self.Runtime.Label3D_set_font_size(Label3D{self}, size)
}
func (self methodsLabel3D) GetFontSize() int64 {
	return self.Runtime.Label3D_get_font_size(Label3D{self})
}
func (self methodsLabel3D) SetOutlineSize(outline_size int64) {
	self.Runtime.Label3D_set_outline_size(Label3D{self}, outline_size)
}
func (self methodsLabel3D) GetOutlineSize() int64 {
	return self.Runtime.Label3D_get_outline_size(Label3D{self})
}
func (self methodsLabel3D) SetLineSpacing(line_spacing Float) {
	self.Runtime.Label3D_set_line_spacing(Label3D{self}, line_spacing)
}
func (self methodsLabel3D) GetLineSpacing() Float {
	return self.Runtime.Label3D_get_line_spacing(Label3D{self})
}
func (self methodsLabel3D) SetAutowrapMode(autowrap_mode TextServerAutowrapMode) {
	self.Runtime.Label3D_set_autowrap_mode(Label3D{self}, autowrap_mode)
}
func (self methodsLabel3D) GetAutowrapMode() TextServerAutowrapMode {
	return self.Runtime.Label3D_get_autowrap_mode(Label3D{self})
}
func (self methodsLabel3D) SetJustificationFlags(justification_flags TextServerJustificationFlag) {
	self.Runtime.Label3D_set_justification_flags(Label3D{self}, justification_flags)
}
func (self methodsLabel3D) GetJustificationFlags() TextServerJustificationFlag {
	return self.Runtime.Label3D_get_justification_flags(Label3D{self})
}
func (self methodsLabel3D) SetWidth(width Float) {
	self.Runtime.Label3D_set_width(Label3D{self}, width)
}
func (self methodsLabel3D) GetWidth() Float {
	return self.Runtime.Label3D_get_width(Label3D{self})
}
func (self methodsLabel3D) SetPixelSize(pixel_size Float) {
	self.Runtime.Label3D_set_pixel_size(Label3D{self}, pixel_size)
}
func (self methodsLabel3D) GetPixelSize() Float {
	return self.Runtime.Label3D_get_pixel_size(Label3D{self})
}
func (self methodsLabel3D) SetOffset(offset Vector2) {
	self.Runtime.Label3D_set_offset(Label3D{self}, offset)
}
func (self methodsLabel3D) GetOffset() Vector2 {
	return self.Runtime.Label3D_get_offset(Label3D{self})
}
func (self methodsLabel3D) SetDrawFlag(flag Label3DDrawFlags, enabled bool) {
	self.Runtime.Label3D_set_draw_flag(Label3D{self}, flag, enabled)
}
func (self methodsLabel3D) GetDrawFlag(flag Label3DDrawFlags) bool {
	return self.Runtime.Label3D_get_draw_flag(Label3D{self}, flag)
}
func (self methodsLabel3D) SetBillboardMode(mode BaseMaterial3DBillboardMode) {
	self.Runtime.Label3D_set_billboard_mode(Label3D{self}, mode)
}
func (self methodsLabel3D) GetBillboardMode() BaseMaterial3DBillboardMode {
	return self.Runtime.Label3D_get_billboard_mode(Label3D{self})
}
func (self methodsLabel3D) SetAlphaCutMode(mode Label3DAlphaCutMode) {
	self.Runtime.Label3D_set_alpha_cut_mode(Label3D{self}, mode)
}
func (self methodsLabel3D) GetAlphaCutMode() Label3DAlphaCutMode {
	return self.Runtime.Label3D_get_alpha_cut_mode(Label3D{self})
}
func (self methodsLabel3D) SetAlphaScissorThreshold(threshold Float) {
	self.Runtime.Label3D_set_alpha_scissor_threshold(Label3D{self}, threshold)
}
func (self methodsLabel3D) GetAlphaScissorThreshold() Float {
	return self.Runtime.Label3D_get_alpha_scissor_threshold(Label3D{self})
}
func (self methodsLabel3D) SetAlphaHashScale(threshold Float) {
	self.Runtime.Label3D_set_alpha_hash_scale(Label3D{self}, threshold)
}
func (self methodsLabel3D) GetAlphaHashScale() Float {
	return self.Runtime.Label3D_get_alpha_hash_scale(Label3D{self})
}
func (self methodsLabel3D) SetAlphaAntialiasing(alpha_aa BaseMaterial3DAlphaAntiAliasing) {
	self.Runtime.Label3D_set_alpha_antialiasing(Label3D{self}, alpha_aa)
}
func (self methodsLabel3D) GetAlphaAntialiasing() BaseMaterial3DAlphaAntiAliasing {
	return self.Runtime.Label3D_get_alpha_antialiasing(Label3D{self})
}
func (self methodsLabel3D) SetAlphaAntialiasingEdge(edge Float) {
	self.Runtime.Label3D_set_alpha_antialiasing_edge(Label3D{self}, edge)
}
func (self methodsLabel3D) GetAlphaAntialiasingEdge() Float {
	return self.Runtime.Label3D_get_alpha_antialiasing_edge(Label3D{self})
}
func (self methodsLabel3D) SetTextureFilter(mode BaseMaterial3DTextureFilter) {
	self.Runtime.Label3D_set_texture_filter(Label3D{self}, mode)
}
func (self methodsLabel3D) GetTextureFilter() BaseMaterial3DTextureFilter {
	return self.Runtime.Label3D_get_texture_filter(Label3D{self})
}
func (self methodsLabel3D) GenerateTriangleMesh() TriangleMesh {
	return self.Runtime.Label3D_generate_triangle_mesh(Label3D{self})
}

type methodsLabelSettings struct {
	_ [0]*methodsLabelSettings
	class
}

func (self LabelSettings) Resource() Resource {
	var parent Resource
	parent.class = self.class
	return parent
}
func (self methodsLabelSettings) SetLineSpacing(spacing Float) {
	self.Runtime.LabelSettings_set_line_spacing(LabelSettings{self}, spacing)
}
func (self methodsLabelSettings) GetLineSpacing() Float {
	return self.Runtime.LabelSettings_get_line_spacing(LabelSettings{self})
}
func (self methodsLabelSettings) SetFont(font Font) {
	self.Runtime.LabelSettings_set_font(LabelSettings{self}, font)
}
func (self methodsLabelSettings) GetFont() Font {
	return self.Runtime.LabelSettings_get_font(LabelSettings{self})
}
func (self methodsLabelSettings) SetFontSize(size int64) {
	self.Runtime.LabelSettings_set_font_size(LabelSettings{self}, size)
}
func (self methodsLabelSettings) GetFontSize() int64 {
	return self.Runtime.LabelSettings_get_font_size(LabelSettings{self})
}
func (self methodsLabelSettings) SetFontColor(color Color) {
	self.Runtime.LabelSettings_set_font_color(LabelSettings{self}, color)
}
func (self methodsLabelSettings) GetFontColor() Color {
	return self.Runtime.LabelSettings_get_font_color(LabelSettings{self})
}
func (self methodsLabelSettings) SetOutlineSize(size int64) {
	self.Runtime.LabelSettings_set_outline_size(LabelSettings{self}, size)
}
func (self methodsLabelSettings) GetOutlineSize() int64 {
	return self.Runtime.LabelSettings_get_outline_size(LabelSettings{self})
}
func (self methodsLabelSettings) SetOutlineColor(color Color) {
	self.Runtime.LabelSettings_set_outline_color(LabelSettings{self}, color)
}
func (self methodsLabelSettings) GetOutlineColor() Color {
	return self.Runtime.LabelSettings_get_outline_color(LabelSettings{self})
}
func (self methodsLabelSettings) SetShadowSize(size int64) {
	self.Runtime.LabelSettings_set_shadow_size(LabelSettings{self}, size)
}
func (self methodsLabelSettings) GetShadowSize() int64 {
	return self.Runtime.LabelSettings_get_shadow_size(LabelSettings{self})
}
func (self methodsLabelSettings) SetShadowColor(color Color) {
	self.Runtime.LabelSettings_set_shadow_color(LabelSettings{self}, color)
}
func (self methodsLabelSettings) GetShadowColor() Color {
	return self.Runtime.LabelSettings_get_shadow_color(LabelSettings{self})
}
func (self methodsLabelSettings) SetShadowOffset(offset Vector2) {
	self.Runtime.LabelSettings_set_shadow_offset(LabelSettings{self}, offset)
}
func (self methodsLabelSettings) GetShadowOffset() Vector2 {
	return self.Runtime.LabelSettings_get_shadow_offset(LabelSettings{self})
}

type methodsLight2D struct {
	_ [0]*methodsLight2D
	class
}

func (self Light2D) Node2D() Node2D { var parent Node2D; parent.class = self.class; return parent }
func (self methodsLight2D) SetEnabled(enabled bool) {
	self.Runtime.Light2D_set_enabled(Light2D{self}, enabled)
}
func (self methodsLight2D) IsEnabled() bool {
	return self.Runtime.Light2D_is_enabled(Light2D{self})
}
func (self methodsLight2D) SetEditorOnly(editor_only bool) {
	self.Runtime.Light2D_set_editor_only(Light2D{self}, editor_only)
}
func (self methodsLight2D) IsEditorOnly() bool {
	return self.Runtime.Light2D_is_editor_only(Light2D{self})
}
func (self methodsLight2D) SetColor(color Color) {
	self.Runtime.Light2D_set_color(Light2D{self}, color)
}
func (self methodsLight2D) GetColor() Color {
	return self.Runtime.Light2D_get_color(Light2D{self})
}
func (self methodsLight2D) SetEnergy(energy Float) {
	self.Runtime.Light2D_set_energy(Light2D{self}, energy)
}
func (self methodsLight2D) GetEnergy() Float {
	return self.Runtime.Light2D_get_energy(Light2D{self})
}
func (self methodsLight2D) SetZRangeMin(z int64) {
	self.Runtime.Light2D_set_z_range_min(Light2D{self}, z)
}
func (self methodsLight2D) GetZRangeMin() int64 {
	return self.Runtime.Light2D_get_z_range_min(Light2D{self})
}
func (self methodsLight2D) SetZRangeMax(z int64) {
	self.Runtime.Light2D_set_z_range_max(Light2D{self}, z)
}
func (self methodsLight2D) GetZRangeMax() int64 {
	return self.Runtime.Light2D_get_z_range_max(Light2D{self})
}
func (self methodsLight2D) SetLayerRangeMin(layer int64) {
	self.Runtime.Light2D_set_layer_range_min(Light2D{self}, layer)
}
func (self methodsLight2D) GetLayerRangeMin() int64 {
	return self.Runtime.Light2D_get_layer_range_min(Light2D{self})
}
func (self methodsLight2D) SetLayerRangeMax(layer int64) {
	self.Runtime.Light2D_set_layer_range_max(Light2D{self}, layer)
}
func (self methodsLight2D) GetLayerRangeMax() int64 {
	return self.Runtime.Light2D_get_layer_range_max(Light2D{self})
}
func (self methodsLight2D) SetItemCullMask(item_cull_mask int64) {
	self.Runtime.Light2D_set_item_cull_mask(Light2D{self}, item_cull_mask)
}
func (self methodsLight2D) GetItemCullMask() int64 {
	return self.Runtime.Light2D_get_item_cull_mask(Light2D{self})
}
func (self methodsLight2D) SetItemShadowCullMask(item_shadow_cull_mask int64) {
	self.Runtime.Light2D_set_item_shadow_cull_mask(Light2D{self}, item_shadow_cull_mask)
}
func (self methodsLight2D) GetItemShadowCullMask() int64 {
	return self.Runtime.Light2D_get_item_shadow_cull_mask(Light2D{self})
}
func (self methodsLight2D) SetShadowEnabled(enabled bool) {
	self.Runtime.Light2D_set_shadow_enabled(Light2D{self}, enabled)
}
func (self methodsLight2D) IsShadowEnabled() bool {
	return self.Runtime.Light2D_is_shadow_enabled(Light2D{self})
}
func (self methodsLight2D) SetShadowSmooth(smooth Float) {
	self.Runtime.Light2D_set_shadow_smooth(Light2D{self}, smooth)
}
func (self methodsLight2D) GetShadowSmooth() Float {
	return self.Runtime.Light2D_get_shadow_smooth(Light2D{self})
}
func (self methodsLight2D) SetShadowFilter(filter Light2DShadowFilter) {
	self.Runtime.Light2D_set_shadow_filter(Light2D{self}, filter)
}
func (self methodsLight2D) GetShadowFilter() Light2DShadowFilter {
	return self.Runtime.Light2D_get_shadow_filter(Light2D{self})
}
func (self methodsLight2D) SetShadowColor(shadow_color Color) {
	self.Runtime.Light2D_set_shadow_color(Light2D{self}, shadow_color)
}
func (self methodsLight2D) GetShadowColor() Color {
	return self.Runtime.Light2D_get_shadow_color(Light2D{self})
}
func (self methodsLight2D) SetBlendMode(mode Light2DBlendMode) {
	self.Runtime.Light2D_set_blend_mode(Light2D{self}, mode)
}
func (self methodsLight2D) GetBlendMode() Light2DBlendMode {
	return self.Runtime.Light2D_get_blend_mode(Light2D{self})
}
func (self methodsLight2D) SetHeight(height Float) {
	self.Runtime.Light2D_set_height(Light2D{self}, height)
}
func (self methodsLight2D) GetHeight() Float {
	return self.Runtime.Light2D_get_height(Light2D{self})
}

type methodsLight3D struct {
	_ [0]*methodsLight3D
	class
}

func (self Light3D) VisualInstance3D() VisualInstance3D {
	var parent VisualInstance3D
	parent.class = self.class
	return parent
}
func (self methodsLight3D) SetEditorOnly(editor_only bool) {
	self.Runtime.Light3D_set_editor_only(Light3D{self}, editor_only)
}
func (self methodsLight3D) IsEditorOnly() bool {
	return self.Runtime.Light3D_is_editor_only(Light3D{self})
}
func (self methodsLight3D) SetParam(param Light3DParam, value Float) {
	self.Runtime.Light3D_set_param(Light3D{self}, param, value)
}
func (self methodsLight3D) GetParam(param Light3DParam) Float {
	return self.Runtime.Light3D_get_param(Light3D{self}, param)
}
func (self methodsLight3D) SetShadow(enabled bool) {
	self.Runtime.Light3D_set_shadow(Light3D{self}, enabled)
}
func (self methodsLight3D) HasShadow() bool {
	return self.Runtime.Light3D_has_shadow(Light3D{self})
}
func (self methodsLight3D) SetNegative(enabled bool) {
	self.Runtime.Light3D_set_negative(Light3D{self}, enabled)
}
func (self methodsLight3D) IsNegative() bool {
	return self.Runtime.Light3D_is_negative(Light3D{self})
}
func (self methodsLight3D) SetCullMask(cull_mask int64) {
	self.Runtime.Light3D_set_cull_mask(Light3D{self}, cull_mask)
}
func (self methodsLight3D) GetCullMask() int64 {
	return self.Runtime.Light3D_get_cull_mask(Light3D{self})
}
func (self methodsLight3D) SetEnableDistanceFade(enable bool) {
	self.Runtime.Light3D_set_enable_distance_fade(Light3D{self}, enable)
}
func (self methodsLight3D) IsDistanceFadeEnabled() bool {
	return self.Runtime.Light3D_is_distance_fade_enabled(Light3D{self})
}
func (self methodsLight3D) SetDistanceFadeBegin(distance Float) {
	self.Runtime.Light3D_set_distance_fade_begin(Light3D{self}, distance)
}
func (self methodsLight3D) GetDistanceFadeBegin() Float {
	return self.Runtime.Light3D_get_distance_fade_begin(Light3D{self})
}
func (self methodsLight3D) SetDistanceFadeShadow(distance Float) {
	self.Runtime.Light3D_set_distance_fade_shadow(Light3D{self}, distance)
}
func (self methodsLight3D) GetDistanceFadeShadow() Float {
	return self.Runtime.Light3D_get_distance_fade_shadow(Light3D{self})
}
func (self methodsLight3D) SetDistanceFadeLength(distance Float) {
	self.Runtime.Light3D_set_distance_fade_length(Light3D{self}, distance)
}
func (self methodsLight3D) GetDistanceFadeLength() Float {
	return self.Runtime.Light3D_get_distance_fade_length(Light3D{self})
}
func (self methodsLight3D) SetColor(color Color) {
	self.Runtime.Light3D_set_color(Light3D{self}, color)
}
func (self methodsLight3D) GetColor() Color {
	return self.Runtime.Light3D_get_color(Light3D{self})
}
func (self methodsLight3D) SetShadowReverseCullFace(enable bool) {
	self.Runtime.Light3D_set_shadow_reverse_cull_face(Light3D{self}, enable)
}
func (self methodsLight3D) GetShadowReverseCullFace() bool {
	return self.Runtime.Light3D_get_shadow_reverse_cull_face(Light3D{self})
}
func (self methodsLight3D) SetBakeMode(bake_mode Light3DBakeMode) {
	self.Runtime.Light3D_set_bake_mode(Light3D{self}, bake_mode)
}
func (self methodsLight3D) GetBakeMode() Light3DBakeMode {
	return self.Runtime.Light3D_get_bake_mode(Light3D{self})
}
func (self methodsLight3D) SetProjector(projector Texture2D) {
	self.Runtime.Light3D_set_projector(Light3D{self}, projector)
}
func (self methodsLight3D) GetProjector() Texture2D {
	return self.Runtime.Light3D_get_projector(Light3D{self})
}
func (self methodsLight3D) SetTemperature(temperature Float) {
	self.Runtime.Light3D_set_temperature(Light3D{self}, temperature)
}
func (self methodsLight3D) GetTemperature() Float {
	return self.Runtime.Light3D_get_temperature(Light3D{self})
}
func (self methodsLight3D) GetCorrelatedColor() Color {
	return self.Runtime.Light3D_get_correlated_color(Light3D{self})
}

type methodsLightOccluder2D struct {
	_ [0]*methodsLightOccluder2D
	class
}

func (self LightOccluder2D) Node2D() Node2D {
	var parent Node2D
	parent.class = self.class
	return parent
}
func (self methodsLightOccluder2D) SetOccluderPolygon(polygon OccluderPolygon2D) {
	self.Runtime.LightOccluder2D_set_occluder_polygon(LightOccluder2D{self}, polygon)
}
func (self methodsLightOccluder2D) GetOccluderPolygon() OccluderPolygon2D {
	return self.Runtime.LightOccluder2D_get_occluder_polygon(LightOccluder2D{self})
}
func (self methodsLightOccluder2D) SetOccluderLightMask(mask int64) {
	self.Runtime.LightOccluder2D_set_occluder_light_mask(LightOccluder2D{self}, mask)
}
func (self methodsLightOccluder2D) GetOccluderLightMask() int64 {
	return self.Runtime.LightOccluder2D_get_occluder_light_mask(LightOccluder2D{self})
}
func (self methodsLightOccluder2D) SetAsSdfCollision(enable bool) {
	self.Runtime.LightOccluder2D_set_as_sdf_collision(LightOccluder2D{self}, enable)
}
func (self methodsLightOccluder2D) IsSetAsSdfCollision() bool {
	return self.Runtime.LightOccluder2D_is_set_as_sdf_collision(LightOccluder2D{self})
}

type methodsLightmapGI struct {
	_ [0]*methodsLightmapGI
	class
}

func (self LightmapGI) VisualInstance3D() VisualInstance3D {
	var parent VisualInstance3D
	parent.class = self.class
	return parent
}
func (self methodsLightmapGI) SetLightData(data LightmapGIData) {
	self.Runtime.LightmapGI_set_light_data(LightmapGI{self}, data)
}
func (self methodsLightmapGI) GetLightData() LightmapGIData {
	return self.Runtime.LightmapGI_get_light_data(LightmapGI{self})
}
func (self methodsLightmapGI) SetBakeQuality(bake_quality LightmapGIBakeQuality) {
	self.Runtime.LightmapGI_set_bake_quality(LightmapGI{self}, bake_quality)
}
func (self methodsLightmapGI) GetBakeQuality() LightmapGIBakeQuality {
	return self.Runtime.LightmapGI_get_bake_quality(LightmapGI{self})
}
func (self methodsLightmapGI) SetBounces(bounces int64) {
	self.Runtime.LightmapGI_set_bounces(LightmapGI{self}, bounces)
}
func (self methodsLightmapGI) GetBounces() int64 {
	return self.Runtime.LightmapGI_get_bounces(LightmapGI{self})
}
func (self methodsLightmapGI) SetBounceIndirectEnergy(bounce_indirect_energy Float) {
	self.Runtime.LightmapGI_set_bounce_indirect_energy(LightmapGI{self}, bounce_indirect_energy)
}
func (self methodsLightmapGI) GetBounceIndirectEnergy() Float {
	return self.Runtime.LightmapGI_get_bounce_indirect_energy(LightmapGI{self})
}
func (self methodsLightmapGI) SetGenerateProbes(subdivision LightmapGIGenerateProbes) {
	self.Runtime.LightmapGI_set_generate_probes(LightmapGI{self}, subdivision)
}
func (self methodsLightmapGI) GetGenerateProbes() LightmapGIGenerateProbes {
	return self.Runtime.LightmapGI_get_generate_probes(LightmapGI{self})
}
func (self methodsLightmapGI) SetBias(bias Float) {
	self.Runtime.LightmapGI_set_bias(LightmapGI{self}, bias)
}
func (self methodsLightmapGI) GetBias() Float {
	return self.Runtime.LightmapGI_get_bias(LightmapGI{self})
}
func (self methodsLightmapGI) SetEnvironmentMode(mode LightmapGIEnvironmentMode) {
	self.Runtime.LightmapGI_set_environment_mode(LightmapGI{self}, mode)
}
func (self methodsLightmapGI) GetEnvironmentMode() LightmapGIEnvironmentMode {
	return self.Runtime.LightmapGI_get_environment_mode(LightmapGI{self})
}
func (self methodsLightmapGI) SetEnvironmentCustomSky(sky Sky) {
	self.Runtime.LightmapGI_set_environment_custom_sky(LightmapGI{self}, sky)
}
func (self methodsLightmapGI) GetEnvironmentCustomSky() Sky {
	return self.Runtime.LightmapGI_get_environment_custom_sky(LightmapGI{self})
}
func (self methodsLightmapGI) SetEnvironmentCustomColor(color Color) {
	self.Runtime.LightmapGI_set_environment_custom_color(LightmapGI{self}, color)
}
func (self methodsLightmapGI) GetEnvironmentCustomColor() Color {
	return self.Runtime.LightmapGI_get_environment_custom_color(LightmapGI{self})
}
func (self methodsLightmapGI) SetEnvironmentCustomEnergy(energy Float) {
	self.Runtime.LightmapGI_set_environment_custom_energy(LightmapGI{self}, energy)
}
func (self methodsLightmapGI) GetEnvironmentCustomEnergy() Float {
	return self.Runtime.LightmapGI_get_environment_custom_energy(LightmapGI{self})
}
func (self methodsLightmapGI) SetMaxTextureSize(max_texture_size int64) {
	self.Runtime.LightmapGI_set_max_texture_size(LightmapGI{self}, max_texture_size)
}
func (self methodsLightmapGI) GetMaxTextureSize() int64 {
	return self.Runtime.LightmapGI_get_max_texture_size(LightmapGI{self})
}
func (self methodsLightmapGI) SetUseDenoiser(use_denoiser bool) {
	self.Runtime.LightmapGI_set_use_denoiser(LightmapGI{self}, use_denoiser)
}
func (self methodsLightmapGI) IsUsingDenoiser() bool {
	return self.Runtime.LightmapGI_is_using_denoiser(LightmapGI{self})
}
func (self methodsLightmapGI) SetDenoiserStrength(denoiser_strength Float) {
	self.Runtime.LightmapGI_set_denoiser_strength(LightmapGI{self}, denoiser_strength)
}
func (self methodsLightmapGI) GetDenoiserStrength() Float {
	return self.Runtime.LightmapGI_get_denoiser_strength(LightmapGI{self})
}
func (self methodsLightmapGI) SetInterior(enable bool) {
	self.Runtime.LightmapGI_set_interior(LightmapGI{self}, enable)
}
func (self methodsLightmapGI) IsInterior() bool {
	return self.Runtime.LightmapGI_is_interior(LightmapGI{self})
}
func (self methodsLightmapGI) SetDirectional(directional bool) {
	self.Runtime.LightmapGI_set_directional(LightmapGI{self}, directional)
}
func (self methodsLightmapGI) IsDirectional() bool {
	return self.Runtime.LightmapGI_is_directional(LightmapGI{self})
}
func (self methodsLightmapGI) SetUseTextureForBounces(use_texture_for_bounces bool) {
	self.Runtime.LightmapGI_set_use_texture_for_bounces(LightmapGI{self}, use_texture_for_bounces)
}
func (self methodsLightmapGI) IsUsingTextureForBounces() bool {
	return self.Runtime.LightmapGI_is_using_texture_for_bounces(LightmapGI{self})
}
func (self methodsLightmapGI) SetCameraAttributes(camera_attributes CameraAttributes) {
	self.Runtime.LightmapGI_set_camera_attributes(LightmapGI{self}, camera_attributes)
}
func (self methodsLightmapGI) GetCameraAttributes() CameraAttributes {
	return self.Runtime.LightmapGI_get_camera_attributes(LightmapGI{self})
}

type methodsLightmapGIData struct {
	_ [0]*methodsLightmapGIData
	class
}

func (self LightmapGIData) Resource() Resource {
	var parent Resource
	parent.class = self.class
	return parent
}
func (self methodsLightmapGIData) SetLightmapTextures(light_textures ArrayOf[TextureLayered]) {
	self.Runtime.LightmapGIData_set_lightmap_textures(LightmapGIData{self}, light_textures)
}
func (self methodsLightmapGIData) GetLightmapTextures() ArrayOf[TextureLayered] {
	return self.Runtime.LightmapGIData_get_lightmap_textures(LightmapGIData{self})
}
func (self methodsLightmapGIData) SetUsesSphericalHarmonics(uses_spherical_harmonics bool) {
	self.Runtime.LightmapGIData_set_uses_spherical_harmonics(LightmapGIData{self}, uses_spherical_harmonics)
}
func (self methodsLightmapGIData) IsUsingSphericalHarmonics() bool {
	return self.Runtime.LightmapGIData_is_using_spherical_harmonics(LightmapGIData{self})
}
func (self methodsLightmapGIData) AddUser(path NodePath, uv_scale Rect2, slice_index int64, sub_instance int64) {
	self.Runtime.LightmapGIData_add_user(LightmapGIData{self}, path, uv_scale, slice_index, sub_instance)
}
func (self methodsLightmapGIData) GetUserCount() int64 {
	return self.Runtime.LightmapGIData_get_user_count(LightmapGIData{self})
}
func (self methodsLightmapGIData) GetUserPath(user_idx int64) NodePath {
	return self.Runtime.LightmapGIData_get_user_path(LightmapGIData{self}, user_idx)
}
func (self methodsLightmapGIData) ClearUsers() {
	self.Runtime.LightmapGIData_clear_users(LightmapGIData{self})
}
func (self methodsLightmapGIData) SetLightTexture(light_texture TextureLayered) {
	self.Runtime.LightmapGIData_set_light_texture(LightmapGIData{self}, light_texture)
}
func (self methodsLightmapGIData) GetLightTexture() TextureLayered {
	return self.Runtime.LightmapGIData_get_light_texture(LightmapGIData{self})
}

type methodsLightmapProbe struct {
	_ [0]*methodsLightmapProbe
	class
}

func (self LightmapProbe) Node3D() Node3D {
	var parent Node3D
	parent.class = self.class
	return parent
}

type methodsLightmapper struct {
	_ [0]*methodsLightmapper
	class
}

func (self Lightmapper) RefCounted() RefCounted {
	var parent RefCounted
	parent.class = self.class
	return parent
}

type methodsLightmapperRD struct {
	_ [0]*methodsLightmapperRD
	class
}

func (self LightmapperRD) Lightmapper() Lightmapper {
	var parent Lightmapper
	parent.class = self.class
	return parent
}

type methodsLine2D struct {
	_ [0]*methodsLine2D
	class
}

func (self Line2D) Node2D() Node2D { var parent Node2D; parent.class = self.class; return parent }
func (self methodsLine2D) SetPoints(points PackedVector2Array) {
	self.Runtime.Line2D_set_points(Line2D{self}, points)
}
func (self methodsLine2D) GetPoints() PackedVector2Array {
	return self.Runtime.Line2D_get_points(Line2D{self})
}
func (self methodsLine2D) SetPointPosition(index int64, position Vector2) {
	self.Runtime.Line2D_set_point_position(Line2D{self}, index, position)
}
func (self methodsLine2D) GetPointPosition(index int64) Vector2 {
	return self.Runtime.Line2D_get_point_position(Line2D{self}, index)
}
func (self methodsLine2D) GetPointCount() int64 {
	return self.Runtime.Line2D_get_point_count(Line2D{self})
}
func (self methodsLine2D) AddPoint(position Vector2, index int64) {
	self.Runtime.Line2D_add_point(Line2D{self}, position, index)
}
func (self methodsLine2D) RemovePoint(index int64) {
	self.Runtime.Line2D_remove_point(Line2D{self}, index)
}
func (self methodsLine2D) ClearPoints() {
	self.Runtime.Line2D_clear_points(Line2D{self})
}
func (self methodsLine2D) SetClosed(closed bool) {
	self.Runtime.Line2D_set_closed(Line2D{self}, closed)
}
func (self methodsLine2D) IsClosed() bool {
	return self.Runtime.Line2D_is_closed(Line2D{self})
}
func (self methodsLine2D) SetWidth(width Float) {
	self.Runtime.Line2D_set_width(Line2D{self}, width)
}
func (self methodsLine2D) GetWidth() Float {
	return self.Runtime.Line2D_get_width(Line2D{self})
}
func (self methodsLine2D) SetCurve(curve Curve) {
	self.Runtime.Line2D_set_curve(Line2D{self}, curve)
}
func (self methodsLine2D) GetCurve() Curve {
	return self.Runtime.Line2D_get_curve(Line2D{self})
}
func (self methodsLine2D) SetDefaultColor(color Color) {
	self.Runtime.Line2D_set_default_color(Line2D{self}, color)
}
func (self methodsLine2D) GetDefaultColor() Color {
	return self.Runtime.Line2D_get_default_color(Line2D{self})
}
func (self methodsLine2D) SetGradient(color Gradient) {
	self.Runtime.Line2D_set_gradient(Line2D{self}, color)
}
func (self methodsLine2D) GetGradient() Gradient {
	return self.Runtime.Line2D_get_gradient(Line2D{self})
}
func (self methodsLine2D) SetTexture(texture Texture2D) {
	self.Runtime.Line2D_set_texture(Line2D{self}, texture)
}
func (self methodsLine2D) GetTexture() Texture2D {
	return self.Runtime.Line2D_get_texture(Line2D{self})
}
func (self methodsLine2D) SetTextureMode(mode Line2DLineTextureMode) {
	self.Runtime.Line2D_set_texture_mode(Line2D{self}, mode)
}
func (self methodsLine2D) GetTextureMode() Line2DLineTextureMode {
	return self.Runtime.Line2D_get_texture_mode(Line2D{self})
}
func (self methodsLine2D) SetJointMode(mode Line2DLineJointMode) {
	self.Runtime.Line2D_set_joint_mode(Line2D{self}, mode)
}
func (self methodsLine2D) GetJointMode() Line2DLineJointMode {
	return self.Runtime.Line2D_get_joint_mode(Line2D{self})
}
func (self methodsLine2D) SetBeginCapMode(mode Line2DLineCapMode) {
	self.Runtime.Line2D_set_begin_cap_mode(Line2D{self}, mode)
}
func (self methodsLine2D) GetBeginCapMode() Line2DLineCapMode {
	return self.Runtime.Line2D_get_begin_cap_mode(Line2D{self})
}
func (self methodsLine2D) SetEndCapMode(mode Line2DLineCapMode) {
	self.Runtime.Line2D_set_end_cap_mode(Line2D{self}, mode)
}
func (self methodsLine2D) GetEndCapMode() Line2DLineCapMode {
	return self.Runtime.Line2D_get_end_cap_mode(Line2D{self})
}
func (self methodsLine2D) SetSharpLimit(limit Float) {
	self.Runtime.Line2D_set_sharp_limit(Line2D{self}, limit)
}
func (self methodsLine2D) GetSharpLimit() Float {
	return self.Runtime.Line2D_get_sharp_limit(Line2D{self})
}
func (self methodsLine2D) SetRoundPrecision(precision int64) {
	self.Runtime.Line2D_set_round_precision(Line2D{self}, precision)
}
func (self methodsLine2D) GetRoundPrecision() int64 {
	return self.Runtime.Line2D_get_round_precision(Line2D{self})
}
func (self methodsLine2D) SetAntialiased(antialiased bool) {
	self.Runtime.Line2D_set_antialiased(Line2D{self}, antialiased)
}
func (self methodsLine2D) GetAntialiased() bool {
	return self.Runtime.Line2D_get_antialiased(Line2D{self})
}

type methodsLineEdit struct {
	_ [0]*methodsLineEdit
	class
}

func (self LineEdit) Control() Control { var parent Control; parent.class = self.class; return parent }
func (self methodsLineEdit) SetHorizontalAlignment(alignment HorizontalAlignment) {
	self.Runtime.LineEdit_set_horizontal_alignment(LineEdit{self}, alignment)
}
func (self methodsLineEdit) GetHorizontalAlignment() HorizontalAlignment {
	return self.Runtime.LineEdit_get_horizontal_alignment(LineEdit{self})
}
func (self methodsLineEdit) Clear() {
	self.Runtime.LineEdit_clear(LineEdit{self})
}
func (self methodsLineEdit) Select(from int64, to int64) {
	self.Runtime.LineEdit_select(LineEdit{self}, from, to)
}
func (self methodsLineEdit) SelectAll() {
	self.Runtime.LineEdit_select_all(LineEdit{self})
}
func (self methodsLineEdit) Deselect() {
	self.Runtime.LineEdit_deselect(LineEdit{self})
}
func (self methodsLineEdit) HasSelection() bool {
	return self.Runtime.LineEdit_has_selection(LineEdit{self})
}
func (self methodsLineEdit) GetSelectedText() string {
	return self.Runtime.LineEdit_get_selected_text(LineEdit{self})
}
func (self methodsLineEdit) GetSelectionFromColumn() int64 {
	return self.Runtime.LineEdit_get_selection_from_column(LineEdit{self})
}
func (self methodsLineEdit) GetSelectionToColumn() int64 {
	return self.Runtime.LineEdit_get_selection_to_column(LineEdit{self})
}
func (self methodsLineEdit) SetText(text string) {
	self.Runtime.LineEdit_set_text(LineEdit{self}, text)
}
func (self methodsLineEdit) GetText() string {
	return self.Runtime.LineEdit_get_text(LineEdit{self})
}
func (self methodsLineEdit) GetDrawControlChars() bool {
	return self.Runtime.LineEdit_get_draw_control_chars(LineEdit{self})
}
func (self methodsLineEdit) SetDrawControlChars(enable bool) {
	self.Runtime.LineEdit_set_draw_control_chars(LineEdit{self}, enable)
}
func (self methodsLineEdit) SetTextDirection(direction ControlTextDirection) {
	self.Runtime.LineEdit_set_text_direction(LineEdit{self}, direction)
}
func (self methodsLineEdit) GetTextDirection() ControlTextDirection {
	return self.Runtime.LineEdit_get_text_direction(LineEdit{self})
}
func (self methodsLineEdit) SetLanguage(language string) {
	self.Runtime.LineEdit_set_language(LineEdit{self}, language)
}
func (self methodsLineEdit) GetLanguage() string {
	return self.Runtime.LineEdit_get_language(LineEdit{self})
}
func (self methodsLineEdit) SetStructuredTextBidiOverride(parser TextServerStructuredTextParser) {
	self.Runtime.LineEdit_set_structured_text_bidi_override(LineEdit{self}, parser)
}
func (self methodsLineEdit) GetStructuredTextBidiOverride() TextServerStructuredTextParser {
	return self.Runtime.LineEdit_get_structured_text_bidi_override(LineEdit{self})
}
func (self methodsLineEdit) SetStructuredTextBidiOverrideOptions(args Array) {
	self.Runtime.LineEdit_set_structured_text_bidi_override_options(LineEdit{self}, args)
}
func (self methodsLineEdit) GetStructuredTextBidiOverrideOptions() Array {
	return self.Runtime.LineEdit_get_structured_text_bidi_override_options(LineEdit{self})
}
func (self methodsLineEdit) SetPlaceholder(text string) {
	self.Runtime.LineEdit_set_placeholder(LineEdit{self}, text)
}
func (self methodsLineEdit) GetPlaceholder() string {
	return self.Runtime.LineEdit_get_placeholder(LineEdit{self})
}
func (self methodsLineEdit) SetCaretColumn(position int64) {
	self.Runtime.LineEdit_set_caret_column(LineEdit{self}, position)
}
func (self methodsLineEdit) GetCaretColumn() int64 {
	return self.Runtime.LineEdit_get_caret_column(LineEdit{self})
}
func (self methodsLineEdit) GetScrollOffset() Float {
	return self.Runtime.LineEdit_get_scroll_offset(LineEdit{self})
}
func (self methodsLineEdit) SetExpandToTextLengthEnabled(enabled bool) {
	self.Runtime.LineEdit_set_expand_to_text_length_enabled(LineEdit{self}, enabled)
}
func (self methodsLineEdit) IsExpandToTextLengthEnabled() bool {
	return self.Runtime.LineEdit_is_expand_to_text_length_enabled(LineEdit{self})
}
func (self methodsLineEdit) SetCaretBlinkEnabled(enabled bool) {
	self.Runtime.LineEdit_set_caret_blink_enabled(LineEdit{self}, enabled)
}
func (self methodsLineEdit) IsCaretBlinkEnabled() bool {
	return self.Runtime.LineEdit_is_caret_blink_enabled(LineEdit{self})
}
func (self methodsLineEdit) SetCaretMidGraphemeEnabled(enabled bool) {
	self.Runtime.LineEdit_set_caret_mid_grapheme_enabled(LineEdit{self}, enabled)
}
func (self methodsLineEdit) IsCaretMidGraphemeEnabled() bool {
	return self.Runtime.LineEdit_is_caret_mid_grapheme_enabled(LineEdit{self})
}
func (self methodsLineEdit) SetCaretForceDisplayed(enabled bool) {
	self.Runtime.LineEdit_set_caret_force_displayed(LineEdit{self}, enabled)
}
func (self methodsLineEdit) IsCaretForceDisplayed() bool {
	return self.Runtime.LineEdit_is_caret_force_displayed(LineEdit{self})
}
func (self methodsLineEdit) SetCaretBlinkInterval(interval Float) {
	self.Runtime.LineEdit_set_caret_blink_interval(LineEdit{self}, interval)
}
func (self methodsLineEdit) GetCaretBlinkInterval() Float {
	return self.Runtime.LineEdit_get_caret_blink_interval(LineEdit{self})
}
func (self methodsLineEdit) SetMaxLength(chars int64) {
	self.Runtime.LineEdit_set_max_length(LineEdit{self}, chars)
}
func (self methodsLineEdit) GetMaxLength() int64 {
	return self.Runtime.LineEdit_get_max_length(LineEdit{self})
}
func (self methodsLineEdit) InsertTextAtCaret(text string) {
	self.Runtime.LineEdit_insert_text_at_caret(LineEdit{self}, text)
}
func (self methodsLineEdit) DeleteCharAtCaret() {
	self.Runtime.LineEdit_delete_char_at_caret(LineEdit{self})
}
func (self methodsLineEdit) DeleteText(from_column int64, to_column int64) {
	self.Runtime.LineEdit_delete_text(LineEdit{self}, from_column, to_column)
}
func (self methodsLineEdit) SetEditable(enabled bool) {
	self.Runtime.LineEdit_set_editable(LineEdit{self}, enabled)
}
func (self methodsLineEdit) IsEditable() bool {
	return self.Runtime.LineEdit_is_editable(LineEdit{self})
}
func (self methodsLineEdit) SetSecret(enabled bool) {
	self.Runtime.LineEdit_set_secret(LineEdit{self}, enabled)
}
func (self methodsLineEdit) IsSecret() bool {
	return self.Runtime.LineEdit_is_secret(LineEdit{self})
}
func (self methodsLineEdit) SetSecretCharacter(character string) {
	self.Runtime.LineEdit_set_secret_character(LineEdit{self}, character)
}
func (self methodsLineEdit) GetSecretCharacter() string {
	return self.Runtime.LineEdit_get_secret_character(LineEdit{self})
}
func (self methodsLineEdit) MenuOption(option int64) {
	self.Runtime.LineEdit_menu_option(LineEdit{self}, option)
}
func (self methodsLineEdit) GetMenu() PopupMenu {
	return self.Runtime.LineEdit_get_menu(LineEdit{self})
}
func (self methodsLineEdit) IsMenuVisible() bool {
	return self.Runtime.LineEdit_is_menu_visible(LineEdit{self})
}
func (self methodsLineEdit) SetContextMenuEnabled(enable bool) {
	self.Runtime.LineEdit_set_context_menu_enabled(LineEdit{self}, enable)
}
func (self methodsLineEdit) IsContextMenuEnabled() bool {
	return self.Runtime.LineEdit_is_context_menu_enabled(LineEdit{self})
}
func (self methodsLineEdit) SetVirtualKeyboardEnabled(enable bool) {
	self.Runtime.LineEdit_set_virtual_keyboard_enabled(LineEdit{self}, enable)
}
func (self methodsLineEdit) IsVirtualKeyboardEnabled() bool {
	return self.Runtime.LineEdit_is_virtual_keyboard_enabled(LineEdit{self})
}
func (self methodsLineEdit) SetVirtualKeyboardType(atype LineEditVirtualKeyboardType) {
	self.Runtime.LineEdit_set_virtual_keyboard_type(LineEdit{self}, atype)
}
func (self methodsLineEdit) GetVirtualKeyboardType() LineEditVirtualKeyboardType {
	return self.Runtime.LineEdit_get_virtual_keyboard_type(LineEdit{self})
}
func (self methodsLineEdit) SetClearButtonEnabled(enable bool) {
	self.Runtime.LineEdit_set_clear_button_enabled(LineEdit{self}, enable)
}
func (self methodsLineEdit) IsClearButtonEnabled() bool {
	return self.Runtime.LineEdit_is_clear_button_enabled(LineEdit{self})
}
func (self methodsLineEdit) SetShortcutKeysEnabled(enable bool) {
	self.Runtime.LineEdit_set_shortcut_keys_enabled(LineEdit{self}, enable)
}
func (self methodsLineEdit) IsShortcutKeysEnabled() bool {
	return self.Runtime.LineEdit_is_shortcut_keys_enabled(LineEdit{self})
}
func (self methodsLineEdit) SetMiddleMousePasteEnabled(enable bool) {
	self.Runtime.LineEdit_set_middle_mouse_paste_enabled(LineEdit{self}, enable)
}
func (self methodsLineEdit) IsMiddleMousePasteEnabled() bool {
	return self.Runtime.LineEdit_is_middle_mouse_paste_enabled(LineEdit{self})
}
func (self methodsLineEdit) SetSelectingEnabled(enable bool) {
	self.Runtime.LineEdit_set_selecting_enabled(LineEdit{self}, enable)
}
func (self methodsLineEdit) IsSelectingEnabled() bool {
	return self.Runtime.LineEdit_is_selecting_enabled(LineEdit{self})
}
func (self methodsLineEdit) SetDeselectOnFocusLossEnabled(enable bool) {
	self.Runtime.LineEdit_set_deselect_on_focus_loss_enabled(LineEdit{self}, enable)
}
func (self methodsLineEdit) IsDeselectOnFocusLossEnabled() bool {
	return self.Runtime.LineEdit_is_deselect_on_focus_loss_enabled(LineEdit{self})
}
func (self methodsLineEdit) SetDragAndDropSelectionEnabled(enable bool) {
	self.Runtime.LineEdit_set_drag_and_drop_selection_enabled(LineEdit{self}, enable)
}
func (self methodsLineEdit) IsDragAndDropSelectionEnabled() bool {
	return self.Runtime.LineEdit_is_drag_and_drop_selection_enabled(LineEdit{self})
}
func (self methodsLineEdit) SetRightIcon(icon Texture2D) {
	self.Runtime.LineEdit_set_right_icon(LineEdit{self}, icon)
}
func (self methodsLineEdit) GetRightIcon() Texture2D {
	return self.Runtime.LineEdit_get_right_icon(LineEdit{self})
}
func (self methodsLineEdit) SetFlat(enabled bool) {
	self.Runtime.LineEdit_set_flat(LineEdit{self}, enabled)
}
func (self methodsLineEdit) IsFlat() bool {
	return self.Runtime.LineEdit_is_flat(LineEdit{self})
}
func (self methodsLineEdit) SetSelectAllOnFocus(enabled bool) {
	self.Runtime.LineEdit_set_select_all_on_focus(LineEdit{self}, enabled)
}
func (self methodsLineEdit) IsSelectAllOnFocus() bool {
	return self.Runtime.LineEdit_is_select_all_on_focus(LineEdit{self})
}

type methodsLinkButton struct {
	_ [0]*methodsLinkButton
	class
}

func (self LinkButton) BaseButton() BaseButton {
	var parent BaseButton
	parent.class = self.class
	return parent
}
func (self methodsLinkButton) SetText(text string) {
	self.Runtime.LinkButton_set_text(LinkButton{self}, text)
}
func (self methodsLinkButton) GetText() string {
	return self.Runtime.LinkButton_get_text(LinkButton{self})
}
func (self methodsLinkButton) SetTextDirection(direction ControlTextDirection) {
	self.Runtime.LinkButton_set_text_direction(LinkButton{self}, direction)
}
func (self methodsLinkButton) GetTextDirection() ControlTextDirection {
	return self.Runtime.LinkButton_get_text_direction(LinkButton{self})
}
func (self methodsLinkButton) SetLanguage(language string) {
	self.Runtime.LinkButton_set_language(LinkButton{self}, language)
}
func (self methodsLinkButton) GetLanguage() string {
	return self.Runtime.LinkButton_get_language(LinkButton{self})
}
func (self methodsLinkButton) SetUri(uri string) {
	self.Runtime.LinkButton_set_uri(LinkButton{self}, uri)
}
func (self methodsLinkButton) GetUri() string {
	return self.Runtime.LinkButton_get_uri(LinkButton{self})
}
func (self methodsLinkButton) SetUnderlineMode(underline_mode LinkButtonUnderlineMode) {
	self.Runtime.LinkButton_set_underline_mode(LinkButton{self}, underline_mode)
}
func (self methodsLinkButton) GetUnderlineMode() LinkButtonUnderlineMode {
	return self.Runtime.LinkButton_get_underline_mode(LinkButton{self})
}
func (self methodsLinkButton) SetStructuredTextBidiOverride(parser TextServerStructuredTextParser) {
	self.Runtime.LinkButton_set_structured_text_bidi_override(LinkButton{self}, parser)
}
func (self methodsLinkButton) GetStructuredTextBidiOverride() TextServerStructuredTextParser {
	return self.Runtime.LinkButton_get_structured_text_bidi_override(LinkButton{self})
}
func (self methodsLinkButton) SetStructuredTextBidiOverrideOptions(args Array) {
	self.Runtime.LinkButton_set_structured_text_bidi_override_options(LinkButton{self}, args)
}
func (self methodsLinkButton) GetStructuredTextBidiOverrideOptions() Array {
	return self.Runtime.LinkButton_get_structured_text_bidi_override_options(LinkButton{self})
}

type methodsMainLoop struct {
	_ [0]*methodsMainLoop
	class
}

func (self MainLoop) Object() Object { var parent Object; parent.class = self.class; return parent }

type methodsMarginContainer struct {
	_ [0]*methodsMarginContainer
	class
}

func (self MarginContainer) Container() Container {
	var parent Container
	parent.class = self.class
	return parent
}

type methodsMarker2D struct {
	_ [0]*methodsMarker2D
	class
}

func (self Marker2D) Node2D() Node2D { var parent Node2D; parent.class = self.class; return parent }
func (self methodsMarker2D) SetGizmoExtents(extents Float) {
	self.Runtime.Marker2D_set_gizmo_extents(Marker2D{self}, extents)
}
func (self methodsMarker2D) GetGizmoExtents() Float {
	return self.Runtime.Marker2D_get_gizmo_extents(Marker2D{self})
}

type methodsMarker3D struct {
	_ [0]*methodsMarker3D
	class
}

func (self Marker3D) Node3D() Node3D { var parent Node3D; parent.class = self.class; return parent }
func (self methodsMarker3D) SetGizmoExtents(extents Float) {
	self.Runtime.Marker3D_set_gizmo_extents(Marker3D{self}, extents)
}
func (self methodsMarker3D) GetGizmoExtents() Float {
	return self.Runtime.Marker3D_get_gizmo_extents(Marker3D{self})
}

type methodsMarshalls struct {
	_ [0]*methodsMarshalls
	class
}

func (self Marshalls) Object() Object { var parent Object; parent.class = self.class; return parent }
func (self methodsMarshalls) VariantToBase64(variant any, full_objects bool) string {
	return self.Runtime.Marshalls_variant_to_base64(Marshalls{self}, variant, full_objects)
}
func (self methodsMarshalls) Base64ToVariant(base64_str string, allow_objects bool) any {
	return self.Runtime.Marshalls_base64_to_variant(Marshalls{self}, base64_str, allow_objects)
}
func (self methodsMarshalls) RawToBase64(array PackedByteArray) string {
	return self.Runtime.Marshalls_raw_to_base64(Marshalls{self}, array)
}
func (self methodsMarshalls) Base64ToRaw(base64_str string) PackedByteArray {
	return self.Runtime.Marshalls_base64_to_raw(Marshalls{self}, base64_str)
}
func (self methodsMarshalls) Utf8ToBase64(utf8_str string) string {
	return self.Runtime.Marshalls_utf8_to_base64(Marshalls{self}, utf8_str)
}
func (self methodsMarshalls) Base64ToUtf8(base64_str string) string {
	return self.Runtime.Marshalls_base64_to_utf8(Marshalls{self}, base64_str)
}

type methodsMaterial struct {
	_ [0]*methodsMaterial
	class
}

func (self Material) Resource() Resource {
	var parent Resource
	parent.class = self.class
	return parent
}
func (self methodsMaterial) SetNextPass(next_pass Material) {
	self.Runtime.Material_set_next_pass(Material{self}, next_pass)
}
func (self methodsMaterial) GetNextPass() Material {
	return self.Runtime.Material_get_next_pass(Material{self})
}
func (self methodsMaterial) SetRenderPriority(priority int64) {
	self.Runtime.Material_set_render_priority(Material{self}, priority)
}
func (self methodsMaterial) GetRenderPriority() int64 {
	return self.Runtime.Material_get_render_priority(Material{self})
}
func (self methodsMaterial) InspectNativeShaderCode() {
	self.Runtime.Material_inspect_native_shader_code(Material{self})
}
func (self methodsMaterial) CreatePlaceholder() Resource {
	return self.Runtime.Material_create_placeholder(Material{self})
}

type methodsMenuBar struct {
	_ [0]*methodsMenuBar
	class
}

func (self MenuBar) Control() Control { var parent Control; parent.class = self.class; return parent }
func (self methodsMenuBar) SetSwitchOnHover(enable bool) {
	self.Runtime.MenuBar_set_switch_on_hover(MenuBar{self}, enable)
}
func (self methodsMenuBar) IsSwitchOnHover() bool {
	return self.Runtime.MenuBar_is_switch_on_hover(MenuBar{self})
}
func (self methodsMenuBar) SetDisableShortcuts(disabled bool) {
	self.Runtime.MenuBar_set_disable_shortcuts(MenuBar{self}, disabled)
}
func (self methodsMenuBar) SetPreferGlobalMenu(enabled bool) {
	self.Runtime.MenuBar_set_prefer_global_menu(MenuBar{self}, enabled)
}
func (self methodsMenuBar) IsPreferGlobalMenu() bool {
	return self.Runtime.MenuBar_is_prefer_global_menu(MenuBar{self})
}
func (self methodsMenuBar) IsNativeMenu() bool {
	return self.Runtime.MenuBar_is_native_menu(MenuBar{self})
}
func (self methodsMenuBar) GetMenuCount() int64 {
	return self.Runtime.MenuBar_get_menu_count(MenuBar{self})
}
func (self methodsMenuBar) SetTextDirection(direction ControlTextDirection) {
	self.Runtime.MenuBar_set_text_direction(MenuBar{self}, direction)
}
func (self methodsMenuBar) GetTextDirection() ControlTextDirection {
	return self.Runtime.MenuBar_get_text_direction(MenuBar{self})
}
func (self methodsMenuBar) SetLanguage(language string) {
	self.Runtime.MenuBar_set_language(MenuBar{self}, language)
}
func (self methodsMenuBar) GetLanguage() string {
	return self.Runtime.MenuBar_get_language(MenuBar{self})
}
func (self methodsMenuBar) SetFlat(enabled bool) {
	self.Runtime.MenuBar_set_flat(MenuBar{self}, enabled)
}
func (self methodsMenuBar) IsFlat() bool {
	return self.Runtime.MenuBar_is_flat(MenuBar{self})
}
func (self methodsMenuBar) SetStartIndex(enabled int64) {
	self.Runtime.MenuBar_set_start_index(MenuBar{self}, enabled)
}
func (self methodsMenuBar) GetStartIndex() int64 {
	return self.Runtime.MenuBar_get_start_index(MenuBar{self})
}
func (self methodsMenuBar) SetMenuTitle(menu int64, title string) {
	self.Runtime.MenuBar_set_menu_title(MenuBar{self}, menu, title)
}
func (self methodsMenuBar) GetMenuTitle(menu int64) string {
	return self.Runtime.MenuBar_get_menu_title(MenuBar{self}, menu)
}
func (self methodsMenuBar) SetMenuTooltip(menu int64, tooltip string) {
	self.Runtime.MenuBar_set_menu_tooltip(MenuBar{self}, menu, tooltip)
}
func (self methodsMenuBar) GetMenuTooltip(menu int64) string {
	return self.Runtime.MenuBar_get_menu_tooltip(MenuBar{self}, menu)
}
func (self methodsMenuBar) SetMenuDisabled(menu int64, disabled bool) {
	self.Runtime.MenuBar_set_menu_disabled(MenuBar{self}, menu, disabled)
}
func (self methodsMenuBar) IsMenuDisabled(menu int64) bool {
	return self.Runtime.MenuBar_is_menu_disabled(MenuBar{self}, menu)
}
func (self methodsMenuBar) SetMenuHidden(menu int64, hidden bool) {
	self.Runtime.MenuBar_set_menu_hidden(MenuBar{self}, menu, hidden)
}
func (self methodsMenuBar) IsMenuHidden(menu int64) bool {
	return self.Runtime.MenuBar_is_menu_hidden(MenuBar{self}, menu)
}
func (self methodsMenuBar) GetMenuPopup(menu int64) PopupMenu {
	return self.Runtime.MenuBar_get_menu_popup(MenuBar{self}, menu)
}

type methodsMenuButton struct {
	_ [0]*methodsMenuButton
	class
}

func (self MenuButton) Button() Button { var parent Button; parent.class = self.class; return parent }
func (self methodsMenuButton) GetPopup() PopupMenu {
	return self.Runtime.MenuButton_get_popup(MenuButton{self})
}
func (self methodsMenuButton) ShowPopup() {
	self.Runtime.MenuButton_show_popup(MenuButton{self})
}
func (self methodsMenuButton) SetSwitchOnHover(enable bool) {
	self.Runtime.MenuButton_set_switch_on_hover(MenuButton{self}, enable)
}
func (self methodsMenuButton) IsSwitchOnHover() bool {
	return self.Runtime.MenuButton_is_switch_on_hover(MenuButton{self})
}
func (self methodsMenuButton) SetDisableShortcuts(disabled bool) {
	self.Runtime.MenuButton_set_disable_shortcuts(MenuButton{self}, disabled)
}
func (self methodsMenuButton) SetItemCount(count int64) {
	self.Runtime.MenuButton_set_item_count(MenuButton{self}, count)
}
func (self methodsMenuButton) GetItemCount() int64 {
	return self.Runtime.MenuButton_get_item_count(MenuButton{self})
}

type methodsMesh struct {
	_ [0]*methodsMesh
	class
}

func (self Mesh) Resource() Resource { var parent Resource; parent.class = self.class; return parent }
func (self methodsMesh) SetLightmapSizeHint(size Vector2i) {
	self.Runtime.Mesh_set_lightmap_size_hint(Mesh{self}, size)
}
func (self methodsMesh) GetLightmapSizeHint() Vector2i {
	return self.Runtime.Mesh_get_lightmap_size_hint(Mesh{self})
}
func (self methodsMesh) GetAabb() AABB {
	return self.Runtime.Mesh_get_aabb(Mesh{self})
}
func (self methodsMesh) GetFaces() PackedVector3Array {
	return self.Runtime.Mesh_get_faces(Mesh{self})
}
func (self methodsMesh) GetSurfaceCount() int64 {
	return self.Runtime.Mesh_get_surface_count(Mesh{self})
}
func (self methodsMesh) SurfaceGetArrays(surf_idx int64) Array {
	return self.Runtime.Mesh_surface_get_arrays(Mesh{self}, surf_idx)
}
func (self methodsMesh) SurfaceGetBlendShapeArrays(surf_idx int64) ArrayOf[Array] {
	return self.Runtime.Mesh_surface_get_blend_shape_arrays(Mesh{self}, surf_idx)
}
func (self methodsMesh) SurfaceSetMaterial(surf_idx int64, material Material) {
	self.Runtime.Mesh_surface_set_material(Mesh{self}, surf_idx, material)
}
func (self methodsMesh) SurfaceGetMaterial(surf_idx int64) Material {
	return self.Runtime.Mesh_surface_get_material(Mesh{self}, surf_idx)
}
func (self methodsMesh) CreatePlaceholder() Resource {
	return self.Runtime.Mesh_create_placeholder(Mesh{self})
}
func (self methodsMesh) CreateTrimeshShape() ConcavePolygonShape3D {
	return self.Runtime.Mesh_create_trimesh_shape(Mesh{self})
}
func (self methodsMesh) CreateConvexShape(clean bool, simplify bool) ConvexPolygonShape3D {
	return self.Runtime.Mesh_create_convex_shape(Mesh{self}, clean, simplify)
}
func (self methodsMesh) CreateOutline(margin Float) Mesh {
	return self.Runtime.Mesh_create_outline(Mesh{self}, margin)
}
func (self methodsMesh) GenerateTriangleMesh() TriangleMesh {
	return self.Runtime.Mesh_generate_triangle_mesh(Mesh{self})
}

type methodsMeshConvexDecompositionSettings struct {
	_ [0]*methodsMeshConvexDecompositionSettings
	class
}

func (self MeshConvexDecompositionSettings) RefCounted() RefCounted {
	var parent RefCounted
	parent.class = self.class
	return parent
}
func (self methodsMeshConvexDecompositionSettings) SetMaxConcavity(max_concavity Float) {
	self.Runtime.MeshConvexDecompositionSettings_set_max_concavity(MeshConvexDecompositionSettings{self}, max_concavity)
}
func (self methodsMeshConvexDecompositionSettings) GetMaxConcavity() Float {
	return self.Runtime.MeshConvexDecompositionSettings_get_max_concavity(MeshConvexDecompositionSettings{self})
}
func (self methodsMeshConvexDecompositionSettings) SetSymmetryPlanesClippingBias(symmetry_planes_clipping_bias Float) {
	self.Runtime.MeshConvexDecompositionSettings_set_symmetry_planes_clipping_bias(MeshConvexDecompositionSettings{self}, symmetry_planes_clipping_bias)
}
func (self methodsMeshConvexDecompositionSettings) GetSymmetryPlanesClippingBias() Float {
	return self.Runtime.MeshConvexDecompositionSettings_get_symmetry_planes_clipping_bias(MeshConvexDecompositionSettings{self})
}
func (self methodsMeshConvexDecompositionSettings) SetRevolutionAxesClippingBias(revolution_axes_clipping_bias Float) {
	self.Runtime.MeshConvexDecompositionSettings_set_revolution_axes_clipping_bias(MeshConvexDecompositionSettings{self}, revolution_axes_clipping_bias)
}
func (self methodsMeshConvexDecompositionSettings) GetRevolutionAxesClippingBias() Float {
	return self.Runtime.MeshConvexDecompositionSettings_get_revolution_axes_clipping_bias(MeshConvexDecompositionSettings{self})
}
func (self methodsMeshConvexDecompositionSettings) SetMinVolumePerConvexHull(min_volume_per_convex_hull Float) {
	self.Runtime.MeshConvexDecompositionSettings_set_min_volume_per_convex_hull(MeshConvexDecompositionSettings{self}, min_volume_per_convex_hull)
}
func (self methodsMeshConvexDecompositionSettings) GetMinVolumePerConvexHull() Float {
	return self.Runtime.MeshConvexDecompositionSettings_get_min_volume_per_convex_hull(MeshConvexDecompositionSettings{self})
}
func (self methodsMeshConvexDecompositionSettings) SetResolution(min_volume_per_convex_hull int64) {
	self.Runtime.MeshConvexDecompositionSettings_set_resolution(MeshConvexDecompositionSettings{self}, min_volume_per_convex_hull)
}
func (self methodsMeshConvexDecompositionSettings) GetResolution() int64 {
	return self.Runtime.MeshConvexDecompositionSettings_get_resolution(MeshConvexDecompositionSettings{self})
}
func (self methodsMeshConvexDecompositionSettings) SetMaxNumVerticesPerConvexHull(max_num_vertices_per_convex_hull int64) {
	self.Runtime.MeshConvexDecompositionSettings_set_max_num_vertices_per_convex_hull(MeshConvexDecompositionSettings{self}, max_num_vertices_per_convex_hull)
}
func (self methodsMeshConvexDecompositionSettings) GetMaxNumVerticesPerConvexHull() int64 {
	return self.Runtime.MeshConvexDecompositionSettings_get_max_num_vertices_per_convex_hull(MeshConvexDecompositionSettings{self})
}
func (self methodsMeshConvexDecompositionSettings) SetPlaneDownsampling(plane_downsampling int64) {
	self.Runtime.MeshConvexDecompositionSettings_set_plane_downsampling(MeshConvexDecompositionSettings{self}, plane_downsampling)
}
func (self methodsMeshConvexDecompositionSettings) GetPlaneDownsampling() int64 {
	return self.Runtime.MeshConvexDecompositionSettings_get_plane_downsampling(MeshConvexDecompositionSettings{self})
}
func (self methodsMeshConvexDecompositionSettings) SetConvexHullDownsampling(convex_hull_downsampling int64) {
	self.Runtime.MeshConvexDecompositionSettings_set_convex_hull_downsampling(MeshConvexDecompositionSettings{self}, convex_hull_downsampling)
}
func (self methodsMeshConvexDecompositionSettings) GetConvexHullDownsampling() int64 {
	return self.Runtime.MeshConvexDecompositionSettings_get_convex_hull_downsampling(MeshConvexDecompositionSettings{self})
}
func (self methodsMeshConvexDecompositionSettings) SetNormalizeMesh(normalize_mesh bool) {
	self.Runtime.MeshConvexDecompositionSettings_set_normalize_mesh(MeshConvexDecompositionSettings{self}, normalize_mesh)
}
func (self methodsMeshConvexDecompositionSettings) GetNormalizeMesh() bool {
	return self.Runtime.MeshConvexDecompositionSettings_get_normalize_mesh(MeshConvexDecompositionSettings{self})
}
func (self methodsMeshConvexDecompositionSettings) SetMode(mode MeshConvexDecompositionSettingsMode) {
	self.Runtime.MeshConvexDecompositionSettings_set_mode(MeshConvexDecompositionSettings{self}, mode)
}
func (self methodsMeshConvexDecompositionSettings) GetMode() MeshConvexDecompositionSettingsMode {
	return self.Runtime.MeshConvexDecompositionSettings_get_mode(MeshConvexDecompositionSettings{self})
}
func (self methodsMeshConvexDecompositionSettings) SetConvexHullApproximation(convex_hull_approximation bool) {
	self.Runtime.MeshConvexDecompositionSettings_set_convex_hull_approximation(MeshConvexDecompositionSettings{self}, convex_hull_approximation)
}
func (self methodsMeshConvexDecompositionSettings) GetConvexHullApproximation() bool {
	return self.Runtime.MeshConvexDecompositionSettings_get_convex_hull_approximation(MeshConvexDecompositionSettings{self})
}
func (self methodsMeshConvexDecompositionSettings) SetMaxConvexHulls(max_convex_hulls int64) {
	self.Runtime.MeshConvexDecompositionSettings_set_max_convex_hulls(MeshConvexDecompositionSettings{self}, max_convex_hulls)
}
func (self methodsMeshConvexDecompositionSettings) GetMaxConvexHulls() int64 {
	return self.Runtime.MeshConvexDecompositionSettings_get_max_convex_hulls(MeshConvexDecompositionSettings{self})
}
func (self methodsMeshConvexDecompositionSettings) SetProjectHullVertices(project_hull_vertices bool) {
	self.Runtime.MeshConvexDecompositionSettings_set_project_hull_vertices(MeshConvexDecompositionSettings{self}, project_hull_vertices)
}
func (self methodsMeshConvexDecompositionSettings) GetProjectHullVertices() bool {
	return self.Runtime.MeshConvexDecompositionSettings_get_project_hull_vertices(MeshConvexDecompositionSettings{self})
}

type methodsMeshDataTool struct {
	_ [0]*methodsMeshDataTool
	class
}

func (self MeshDataTool) RefCounted() RefCounted {
	var parent RefCounted
	parent.class = self.class
	return parent
}
func (self methodsMeshDataTool) Clear() {
	self.Runtime.MeshDataTool_clear(MeshDataTool{self})
}
func (self methodsMeshDataTool) CreateFromSurface(mesh ArrayMesh, surface int64) int64 {
	return self.Runtime.MeshDataTool_create_from_surface(MeshDataTool{self}, mesh, surface)
}
func (self methodsMeshDataTool) CommitToSurface(mesh ArrayMesh, compression_flags int64) int64 {
	return self.Runtime.MeshDataTool_commit_to_surface(MeshDataTool{self}, mesh, compression_flags)
}
func (self methodsMeshDataTool) GetFormat() int64 {
	return self.Runtime.MeshDataTool_get_format(MeshDataTool{self})
}
func (self methodsMeshDataTool) GetVertexCount() int64 {
	return self.Runtime.MeshDataTool_get_vertex_count(MeshDataTool{self})
}
func (self methodsMeshDataTool) GetEdgeCount() int64 {
	return self.Runtime.MeshDataTool_get_edge_count(MeshDataTool{self})
}
func (self methodsMeshDataTool) GetFaceCount() int64 {
	return self.Runtime.MeshDataTool_get_face_count(MeshDataTool{self})
}
func (self methodsMeshDataTool) SetVertex(idx int64, vertex Vector3) {
	self.Runtime.MeshDataTool_set_vertex(MeshDataTool{self}, idx, vertex)
}
func (self methodsMeshDataTool) GetVertex(idx int64) Vector3 {
	return self.Runtime.MeshDataTool_get_vertex(MeshDataTool{self}, idx)
}
func (self methodsMeshDataTool) SetVertexNormal(idx int64, normal Vector3) {
	self.Runtime.MeshDataTool_set_vertex_normal(MeshDataTool{self}, idx, normal)
}
func (self methodsMeshDataTool) GetVertexNormal(idx int64) Vector3 {
	return self.Runtime.MeshDataTool_get_vertex_normal(MeshDataTool{self}, idx)
}
func (self methodsMeshDataTool) SetVertexTangent(idx int64, tangent Plane) {
	self.Runtime.MeshDataTool_set_vertex_tangent(MeshDataTool{self}, idx, tangent)
}
func (self methodsMeshDataTool) GetVertexTangent(idx int64) Plane {
	return self.Runtime.MeshDataTool_get_vertex_tangent(MeshDataTool{self}, idx)
}
func (self methodsMeshDataTool) SetVertexUv(idx int64, uv Vector2) {
	self.Runtime.MeshDataTool_set_vertex_uv(MeshDataTool{self}, idx, uv)
}
func (self methodsMeshDataTool) GetVertexUv(idx int64) Vector2 {
	return self.Runtime.MeshDataTool_get_vertex_uv(MeshDataTool{self}, idx)
}
func (self methodsMeshDataTool) SetVertexUv2(idx int64, uv2 Vector2) {
	self.Runtime.MeshDataTool_set_vertex_uv2(MeshDataTool{self}, idx, uv2)
}
func (self methodsMeshDataTool) GetVertexUv2(idx int64) Vector2 {
	return self.Runtime.MeshDataTool_get_vertex_uv2(MeshDataTool{self}, idx)
}
func (self methodsMeshDataTool) SetVertexColor(idx int64, color Color) {
	self.Runtime.MeshDataTool_set_vertex_color(MeshDataTool{self}, idx, color)
}
func (self methodsMeshDataTool) GetVertexColor(idx int64) Color {
	return self.Runtime.MeshDataTool_get_vertex_color(MeshDataTool{self}, idx)
}
func (self methodsMeshDataTool) SetVertexBones(idx int64, bones PackedInt32Array) {
	self.Runtime.MeshDataTool_set_vertex_bones(MeshDataTool{self}, idx, bones)
}
func (self methodsMeshDataTool) GetVertexBones(idx int64) PackedInt32Array {
	return self.Runtime.MeshDataTool_get_vertex_bones(MeshDataTool{self}, idx)
}
func (self methodsMeshDataTool) SetVertexWeights(idx int64, weights PackedFloat32Array) {
	self.Runtime.MeshDataTool_set_vertex_weights(MeshDataTool{self}, idx, weights)
}
func (self methodsMeshDataTool) GetVertexWeights(idx int64) PackedFloat32Array {
	return self.Runtime.MeshDataTool_get_vertex_weights(MeshDataTool{self}, idx)
}
func (self methodsMeshDataTool) SetVertexMeta(idx int64, meta any) {
	self.Runtime.MeshDataTool_set_vertex_meta(MeshDataTool{self}, idx, meta)
}
func (self methodsMeshDataTool) GetVertexMeta(idx int64) any {
	return self.Runtime.MeshDataTool_get_vertex_meta(MeshDataTool{self}, idx)
}
func (self methodsMeshDataTool) GetVertexEdges(idx int64) PackedInt32Array {
	return self.Runtime.MeshDataTool_get_vertex_edges(MeshDataTool{self}, idx)
}
func (self methodsMeshDataTool) GetVertexFaces(idx int64) PackedInt32Array {
	return self.Runtime.MeshDataTool_get_vertex_faces(MeshDataTool{self}, idx)
}
func (self methodsMeshDataTool) GetEdgeVertex(idx int64, vertex int64) int64 {
	return self.Runtime.MeshDataTool_get_edge_vertex(MeshDataTool{self}, idx, vertex)
}
func (self methodsMeshDataTool) GetEdgeFaces(idx int64) PackedInt32Array {
	return self.Runtime.MeshDataTool_get_edge_faces(MeshDataTool{self}, idx)
}
func (self methodsMeshDataTool) SetEdgeMeta(idx int64, meta any) {
	self.Runtime.MeshDataTool_set_edge_meta(MeshDataTool{self}, idx, meta)
}
func (self methodsMeshDataTool) GetEdgeMeta(idx int64) any {
	return self.Runtime.MeshDataTool_get_edge_meta(MeshDataTool{self}, idx)
}
func (self methodsMeshDataTool) GetFaceVertex(idx int64, vertex int64) int64 {
	return self.Runtime.MeshDataTool_get_face_vertex(MeshDataTool{self}, idx, vertex)
}
func (self methodsMeshDataTool) GetFaceEdge(idx int64, edge int64) int64 {
	return self.Runtime.MeshDataTool_get_face_edge(MeshDataTool{self}, idx, edge)
}
func (self methodsMeshDataTool) SetFaceMeta(idx int64, meta any) {
	self.Runtime.MeshDataTool_set_face_meta(MeshDataTool{self}, idx, meta)
}
func (self methodsMeshDataTool) GetFaceMeta(idx int64) any {
	return self.Runtime.MeshDataTool_get_face_meta(MeshDataTool{self}, idx)
}
func (self methodsMeshDataTool) GetFaceNormal(idx int64) Vector3 {
	return self.Runtime.MeshDataTool_get_face_normal(MeshDataTool{self}, idx)
}
func (self methodsMeshDataTool) SetMaterial(material Material) {
	self.Runtime.MeshDataTool_set_material(MeshDataTool{self}, material)
}
func (self methodsMeshDataTool) GetMaterial() Material {
	return self.Runtime.MeshDataTool_get_material(MeshDataTool{self})
}

type methodsMeshInstance2D struct {
	_ [0]*methodsMeshInstance2D
	class
}

func (self MeshInstance2D) Node2D() Node2D {
	var parent Node2D
	parent.class = self.class
	return parent
}
func (self methodsMeshInstance2D) SetMesh(mesh Mesh) {
	self.Runtime.MeshInstance2D_set_mesh(MeshInstance2D{self}, mesh)
}
func (self methodsMeshInstance2D) GetMesh() Mesh {
	return self.Runtime.MeshInstance2D_get_mesh(MeshInstance2D{self})
}
func (self methodsMeshInstance2D) SetTexture(texture Texture2D) {
	self.Runtime.MeshInstance2D_set_texture(MeshInstance2D{self}, texture)
}
func (self methodsMeshInstance2D) GetTexture() Texture2D {
	return self.Runtime.MeshInstance2D_get_texture(MeshInstance2D{self})
}

type methodsMeshInstance3D struct {
	_ [0]*methodsMeshInstance3D
	class
}

func (self MeshInstance3D) GeometryInstance3D() GeometryInstance3D {
	var parent GeometryInstance3D
	parent.class = self.class
	return parent
}
func (self methodsMeshInstance3D) SetMesh(mesh Mesh) {
	self.Runtime.MeshInstance3D_set_mesh(MeshInstance3D{self}, mesh)
}
func (self methodsMeshInstance3D) GetMesh() Mesh {
	return self.Runtime.MeshInstance3D_get_mesh(MeshInstance3D{self})
}
func (self methodsMeshInstance3D) SetSkeletonPath(skeleton_path NodePath) {
	self.Runtime.MeshInstance3D_set_skeleton_path(MeshInstance3D{self}, skeleton_path)
}
func (self methodsMeshInstance3D) GetSkeletonPath() NodePath {
	return self.Runtime.MeshInstance3D_get_skeleton_path(MeshInstance3D{self})
}
func (self methodsMeshInstance3D) SetSkin(skin Skin) {
	self.Runtime.MeshInstance3D_set_skin(MeshInstance3D{self}, skin)
}
func (self methodsMeshInstance3D) GetSkin() Skin {
	return self.Runtime.MeshInstance3D_get_skin(MeshInstance3D{self})
}
func (self methodsMeshInstance3D) GetSurfaceOverrideMaterialCount() int64 {
	return self.Runtime.MeshInstance3D_get_surface_override_material_count(MeshInstance3D{self})
}
func (self methodsMeshInstance3D) SetSurfaceOverrideMaterial(surface int64, material Material) {
	self.Runtime.MeshInstance3D_set_surface_override_material(MeshInstance3D{self}, surface, material)
}
func (self methodsMeshInstance3D) GetSurfaceOverrideMaterial(surface int64) Material {
	return self.Runtime.MeshInstance3D_get_surface_override_material(MeshInstance3D{self}, surface)
}
func (self methodsMeshInstance3D) GetActiveMaterial(surface int64) Material {
	return self.Runtime.MeshInstance3D_get_active_material(MeshInstance3D{self}, surface)
}
func (self methodsMeshInstance3D) CreateTrimeshCollision() {
	self.Runtime.MeshInstance3D_create_trimesh_collision(MeshInstance3D{self})
}
func (self methodsMeshInstance3D) CreateConvexCollision(clean bool, simplify bool) {
	self.Runtime.MeshInstance3D_create_convex_collision(MeshInstance3D{self}, clean, simplify)
}
func (self methodsMeshInstance3D) CreateMultipleConvexCollisions(settings MeshConvexDecompositionSettings) {
	self.Runtime.MeshInstance3D_create_multiple_convex_collisions(MeshInstance3D{self}, settings)
}
func (self methodsMeshInstance3D) GetBlendShapeCount() int64 {
	return self.Runtime.MeshInstance3D_get_blend_shape_count(MeshInstance3D{self})
}
func (self methodsMeshInstance3D) FindBlendShapeByName(name string) int64 {
	return self.Runtime.MeshInstance3D_find_blend_shape_by_name(MeshInstance3D{self}, name)
}
func (self methodsMeshInstance3D) GetBlendShapeValue(blend_shape_idx int64) Float {
	return self.Runtime.MeshInstance3D_get_blend_shape_value(MeshInstance3D{self}, blend_shape_idx)
}
func (self methodsMeshInstance3D) SetBlendShapeValue(blend_shape_idx int64, value Float) {
	self.Runtime.MeshInstance3D_set_blend_shape_value(MeshInstance3D{self}, blend_shape_idx, value)
}
func (self methodsMeshInstance3D) CreateDebugTangents() {
	self.Runtime.MeshInstance3D_create_debug_tangents(MeshInstance3D{self})
}

type methodsMeshLibrary struct {
	_ [0]*methodsMeshLibrary
	class
}

func (self MeshLibrary) Resource() Resource {
	var parent Resource
	parent.class = self.class
	return parent
}
func (self methodsMeshLibrary) CreateItem(id int64) {
	self.Runtime.MeshLibrary_create_item(MeshLibrary{self}, id)
}
func (self methodsMeshLibrary) SetItemName(id int64, name string) {
	self.Runtime.MeshLibrary_set_item_name(MeshLibrary{self}, id, name)
}
func (self methodsMeshLibrary) SetItemMesh(id int64, mesh Mesh) {
	self.Runtime.MeshLibrary_set_item_mesh(MeshLibrary{self}, id, mesh)
}
func (self methodsMeshLibrary) SetItemMeshTransform(id int64, mesh_transform Transform3D) {
	self.Runtime.MeshLibrary_set_item_mesh_transform(MeshLibrary{self}, id, mesh_transform)
}
func (self methodsMeshLibrary) SetItemNavigationMesh(id int64, navigation_mesh NavigationMesh) {
	self.Runtime.MeshLibrary_set_item_navigation_mesh(MeshLibrary{self}, id, navigation_mesh)
}
func (self methodsMeshLibrary) SetItemNavigationMeshTransform(id int64, navigation_mesh Transform3D) {
	self.Runtime.MeshLibrary_set_item_navigation_mesh_transform(MeshLibrary{self}, id, navigation_mesh)
}
func (self methodsMeshLibrary) SetItemNavigationLayers(id int64, navigation_layers int64) {
	self.Runtime.MeshLibrary_set_item_navigation_layers(MeshLibrary{self}, id, navigation_layers)
}
func (self methodsMeshLibrary) SetItemShapes(id int64, shapes Array) {
	self.Runtime.MeshLibrary_set_item_shapes(MeshLibrary{self}, id, shapes)
}
func (self methodsMeshLibrary) SetItemPreview(id int64, texture Texture2D) {
	self.Runtime.MeshLibrary_set_item_preview(MeshLibrary{self}, id, texture)
}
func (self methodsMeshLibrary) GetItemName(id int64) string {
	return self.Runtime.MeshLibrary_get_item_name(MeshLibrary{self}, id)
}
func (self methodsMeshLibrary) GetItemMesh(id int64) Mesh {
	return self.Runtime.MeshLibrary_get_item_mesh(MeshLibrary{self}, id)
}
func (self methodsMeshLibrary) GetItemMeshTransform(id int64) Transform3D {
	return self.Runtime.MeshLibrary_get_item_mesh_transform(MeshLibrary{self}, id)
}
func (self methodsMeshLibrary) GetItemNavigationMesh(id int64) NavigationMesh {
	return self.Runtime.MeshLibrary_get_item_navigation_mesh(MeshLibrary{self}, id)
}
func (self methodsMeshLibrary) GetItemNavigationMeshTransform(id int64) Transform3D {
	return self.Runtime.MeshLibrary_get_item_navigation_mesh_transform(MeshLibrary{self}, id)
}
func (self methodsMeshLibrary) GetItemNavigationLayers(id int64) int64 {
	return self.Runtime.MeshLibrary_get_item_navigation_layers(MeshLibrary{self}, id)
}
func (self methodsMeshLibrary) GetItemShapes(id int64) Array {
	return self.Runtime.MeshLibrary_get_item_shapes(MeshLibrary{self}, id)
}
func (self methodsMeshLibrary) GetItemPreview(id int64) Texture2D {
	return self.Runtime.MeshLibrary_get_item_preview(MeshLibrary{self}, id)
}
func (self methodsMeshLibrary) RemoveItem(id int64) {
	self.Runtime.MeshLibrary_remove_item(MeshLibrary{self}, id)
}
func (self methodsMeshLibrary) FindItemByName(name string) int64 {
	return self.Runtime.MeshLibrary_find_item_by_name(MeshLibrary{self}, name)
}
func (self methodsMeshLibrary) Clear() {
	self.Runtime.MeshLibrary_clear(MeshLibrary{self})
}
func (self methodsMeshLibrary) GetItemList() PackedInt32Array {
	return self.Runtime.MeshLibrary_get_item_list(MeshLibrary{self})
}
func (self methodsMeshLibrary) GetLastUnusedItemId() int64 {
	return self.Runtime.MeshLibrary_get_last_unused_item_id(MeshLibrary{self})
}

type methodsMeshTexture struct {
	_ [0]*methodsMeshTexture
	class
}

func (self MeshTexture) Texture2D() Texture2D {
	var parent Texture2D
	parent.class = self.class
	return parent
}
func (self methodsMeshTexture) SetMesh(mesh Mesh) {
	self.Runtime.MeshTexture_set_mesh(MeshTexture{self}, mesh)
}
func (self methodsMeshTexture) GetMesh() Mesh {
	return self.Runtime.MeshTexture_get_mesh(MeshTexture{self})
}
func (self methodsMeshTexture) SetImageSize(size Vector2) {
	self.Runtime.MeshTexture_set_image_size(MeshTexture{self}, size)
}
func (self methodsMeshTexture) GetImageSize() Vector2 {
	return self.Runtime.MeshTexture_get_image_size(MeshTexture{self})
}
func (self methodsMeshTexture) SetBaseTexture(texture Texture2D) {
	self.Runtime.MeshTexture_set_base_texture(MeshTexture{self}, texture)
}
func (self methodsMeshTexture) GetBaseTexture() Texture2D {
	return self.Runtime.MeshTexture_get_base_texture(MeshTexture{self})
}

type methodsMethodTweener struct {
	_ [0]*methodsMethodTweener
	class
}

func (self MethodTweener) Tweener() Tweener {
	var parent Tweener
	parent.class = self.class
	return parent
}
func (self methodsMethodTweener) SetDelay(delay Float) MethodTweener {
	return self.Runtime.MethodTweener_set_delay(MethodTweener{self}, delay)
}
func (self methodsMethodTweener) SetTrans(trans TweenTransitionType) MethodTweener {
	return self.Runtime.MethodTweener_set_trans(MethodTweener{self}, trans)
}
func (self methodsMethodTweener) SetEase(ease TweenEaseType) MethodTweener {
	return self.Runtime.MethodTweener_set_ease(MethodTweener{self}, ease)
}

type methodsMissingNode struct {
	_ [0]*methodsMissingNode
	class
}

func (self MissingNode) Node() Node { var parent Node; parent.class = self.class; return parent }
func (self methodsMissingNode) SetOriginalClass(name string) {
	self.Runtime.MissingNode_set_original_class(MissingNode{self}, name)
}
func (self methodsMissingNode) GetOriginalClass() string {
	return self.Runtime.MissingNode_get_original_class(MissingNode{self})
}
func (self methodsMissingNode) SetRecordingProperties(enable bool) {
	self.Runtime.MissingNode_set_recording_properties(MissingNode{self}, enable)
}
func (self methodsMissingNode) IsRecordingProperties() bool {
	return self.Runtime.MissingNode_is_recording_properties(MissingNode{self})
}

type methodsMissingResource struct {
	_ [0]*methodsMissingResource
	class
}

func (self MissingResource) Resource() Resource {
	var parent Resource
	parent.class = self.class
	return parent
}
func (self methodsMissingResource) SetOriginalClass(name string) {
	self.Runtime.MissingResource_set_original_class(MissingResource{self}, name)
}
func (self methodsMissingResource) GetOriginalClass() string {
	return self.Runtime.MissingResource_get_original_class(MissingResource{self})
}
func (self methodsMissingResource) SetRecordingProperties(enable bool) {
	self.Runtime.MissingResource_set_recording_properties(MissingResource{self}, enable)
}
func (self methodsMissingResource) IsRecordingProperties() bool {
	return self.Runtime.MissingResource_is_recording_properties(MissingResource{self})
}

type methodsMobileVRInterface struct {
	_ [0]*methodsMobileVRInterface
	class
}

func (self MobileVRInterface) XRInterface() XRInterface {
	var parent XRInterface
	parent.class = self.class
	return parent
}
func (self methodsMobileVRInterface) SetEyeHeight(eye_height Float) {
	self.Runtime.MobileVRInterface_set_eye_height(MobileVRInterface{self}, eye_height)
}
func (self methodsMobileVRInterface) GetEyeHeight() Float {
	return self.Runtime.MobileVRInterface_get_eye_height(MobileVRInterface{self})
}
func (self methodsMobileVRInterface) SetIod(iod Float) {
	self.Runtime.MobileVRInterface_set_iod(MobileVRInterface{self}, iod)
}
func (self methodsMobileVRInterface) GetIod() Float {
	return self.Runtime.MobileVRInterface_get_iod(MobileVRInterface{self})
}
func (self methodsMobileVRInterface) SetDisplayWidth(display_width Float) {
	self.Runtime.MobileVRInterface_set_display_width(MobileVRInterface{self}, display_width)
}
func (self methodsMobileVRInterface) GetDisplayWidth() Float {
	return self.Runtime.MobileVRInterface_get_display_width(MobileVRInterface{self})
}
func (self methodsMobileVRInterface) SetDisplayToLens(display_to_lens Float) {
	self.Runtime.MobileVRInterface_set_display_to_lens(MobileVRInterface{self}, display_to_lens)
}
func (self methodsMobileVRInterface) GetDisplayToLens() Float {
	return self.Runtime.MobileVRInterface_get_display_to_lens(MobileVRInterface{self})
}
func (self methodsMobileVRInterface) SetOversample(oversample Float) {
	self.Runtime.MobileVRInterface_set_oversample(MobileVRInterface{self}, oversample)
}
func (self methodsMobileVRInterface) GetOversample() Float {
	return self.Runtime.MobileVRInterface_get_oversample(MobileVRInterface{self})
}
func (self methodsMobileVRInterface) SetK1(k Float) {
	self.Runtime.MobileVRInterface_set_k1(MobileVRInterface{self}, k)
}
func (self methodsMobileVRInterface) GetK1() Float {
	return self.Runtime.MobileVRInterface_get_k1(MobileVRInterface{self})
}
func (self methodsMobileVRInterface) SetK2(k Float) {
	self.Runtime.MobileVRInterface_set_k2(MobileVRInterface{self}, k)
}
func (self methodsMobileVRInterface) GetK2() Float {
	return self.Runtime.MobileVRInterface_get_k2(MobileVRInterface{self})
}

type methodsMovieWriter struct {
	_ [0]*methodsMovieWriter
	class
}

func (self MovieWriter) Object() Object { var parent Object; parent.class = self.class; return parent }
func (self methodsMovieWriter) AddWriter(writer MovieWriter) {
	self.Runtime.MovieWriter_add_writer(MovieWriter{self}, writer)
}

type methodsMultiMesh struct {
	_ [0]*methodsMultiMesh
	class
}

func (self MultiMesh) Resource() Resource {
	var parent Resource
	parent.class = self.class
	return parent
}
func (self methodsMultiMesh) SetMesh(mesh Mesh) {
	self.Runtime.MultiMesh_set_mesh(MultiMesh{self}, mesh)
}
func (self methodsMultiMesh) GetMesh() Mesh {
	return self.Runtime.MultiMesh_get_mesh(MultiMesh{self})
}
func (self methodsMultiMesh) SetUseColors(enable bool) {
	self.Runtime.MultiMesh_set_use_colors(MultiMesh{self}, enable)
}
func (self methodsMultiMesh) IsUsingColors() bool {
	return self.Runtime.MultiMesh_is_using_colors(MultiMesh{self})
}
func (self methodsMultiMesh) SetUseCustomData(enable bool) {
	self.Runtime.MultiMesh_set_use_custom_data(MultiMesh{self}, enable)
}
func (self methodsMultiMesh) IsUsingCustomData() bool {
	return self.Runtime.MultiMesh_is_using_custom_data(MultiMesh{self})
}
func (self methodsMultiMesh) SetTransformFormat(format MultiMeshTransformFormat) {
	self.Runtime.MultiMesh_set_transform_format(MultiMesh{self}, format)
}
func (self methodsMultiMesh) GetTransformFormat() MultiMeshTransformFormat {
	return self.Runtime.MultiMesh_get_transform_format(MultiMesh{self})
}
func (self methodsMultiMesh) SetInstanceCount(count int64) {
	self.Runtime.MultiMesh_set_instance_count(MultiMesh{self}, count)
}
func (self methodsMultiMesh) GetInstanceCount() int64 {
	return self.Runtime.MultiMesh_get_instance_count(MultiMesh{self})
}
func (self methodsMultiMesh) SetVisibleInstanceCount(count int64) {
	self.Runtime.MultiMesh_set_visible_instance_count(MultiMesh{self}, count)
}
func (self methodsMultiMesh) GetVisibleInstanceCount() int64 {
	return self.Runtime.MultiMesh_get_visible_instance_count(MultiMesh{self})
}
func (self methodsMultiMesh) SetInstanceTransform(instance int64, transform Transform3D) {
	self.Runtime.MultiMesh_set_instance_transform(MultiMesh{self}, instance, transform)
}
func (self methodsMultiMesh) SetInstanceTransform2d(instance int64, transform Transform2D) {
	self.Runtime.MultiMesh_set_instance_transform_2d(MultiMesh{self}, instance, transform)
}
func (self methodsMultiMesh) GetInstanceTransform(instance int64) Transform3D {
	return self.Runtime.MultiMesh_get_instance_transform(MultiMesh{self}, instance)
}
func (self methodsMultiMesh) GetInstanceTransform2d(instance int64) Transform2D {
	return self.Runtime.MultiMesh_get_instance_transform_2d(MultiMesh{self}, instance)
}
func (self methodsMultiMesh) SetInstanceColor(instance int64, color Color) {
	self.Runtime.MultiMesh_set_instance_color(MultiMesh{self}, instance, color)
}
func (self methodsMultiMesh) GetInstanceColor(instance int64) Color {
	return self.Runtime.MultiMesh_get_instance_color(MultiMesh{self}, instance)
}
func (self methodsMultiMesh) SetInstanceCustomData(instance int64, custom_data Color) {
	self.Runtime.MultiMesh_set_instance_custom_data(MultiMesh{self}, instance, custom_data)
}
func (self methodsMultiMesh) GetInstanceCustomData(instance int64) Color {
	return self.Runtime.MultiMesh_get_instance_custom_data(MultiMesh{self}, instance)
}
func (self methodsMultiMesh) GetAabb() AABB {
	return self.Runtime.MultiMesh_get_aabb(MultiMesh{self})
}
func (self methodsMultiMesh) GetBuffer() PackedFloat32Array {
	return self.Runtime.MultiMesh_get_buffer(MultiMesh{self})
}
func (self methodsMultiMesh) SetBuffer(buffer PackedFloat32Array) {
	self.Runtime.MultiMesh_set_buffer(MultiMesh{self}, buffer)
}

type methodsMultiMeshInstance2D struct {
	_ [0]*methodsMultiMeshInstance2D
	class
}

func (self MultiMeshInstance2D) Node2D() Node2D {
	var parent Node2D
	parent.class = self.class
	return parent
}
func (self methodsMultiMeshInstance2D) SetMultimesh(multimesh MultiMesh) {
	self.Runtime.MultiMeshInstance2D_set_multimesh(MultiMeshInstance2D{self}, multimesh)
}
func (self methodsMultiMeshInstance2D) GetMultimesh() MultiMesh {
	return self.Runtime.MultiMeshInstance2D_get_multimesh(MultiMeshInstance2D{self})
}
func (self methodsMultiMeshInstance2D) SetTexture(texture Texture2D) {
	self.Runtime.MultiMeshInstance2D_set_texture(MultiMeshInstance2D{self}, texture)
}
func (self methodsMultiMeshInstance2D) GetTexture() Texture2D {
	return self.Runtime.MultiMeshInstance2D_get_texture(MultiMeshInstance2D{self})
}

type methodsMultiMeshInstance3D struct {
	_ [0]*methodsMultiMeshInstance3D
	class
}

func (self MultiMeshInstance3D) GeometryInstance3D() GeometryInstance3D {
	var parent GeometryInstance3D
	parent.class = self.class
	return parent
}
func (self methodsMultiMeshInstance3D) SetMultimesh(multimesh MultiMesh) {
	self.Runtime.MultiMeshInstance3D_set_multimesh(MultiMeshInstance3D{self}, multimesh)
}
func (self methodsMultiMeshInstance3D) GetMultimesh() MultiMesh {
	return self.Runtime.MultiMeshInstance3D_get_multimesh(MultiMeshInstance3D{self})
}

type methodsMultiplayerAPI struct {
	_ [0]*methodsMultiplayerAPI
	class
}

func (self MultiplayerAPI) RefCounted() RefCounted {
	var parent RefCounted
	parent.class = self.class
	return parent
}
func (self methodsMultiplayerAPI) HasMultiplayerPeer() bool {
	return self.Runtime.MultiplayerAPI_has_multiplayer_peer(MultiplayerAPI{self})
}
func (self methodsMultiplayerAPI) GetMultiplayerPeer() MultiplayerPeer {
	return self.Runtime.MultiplayerAPI_get_multiplayer_peer(MultiplayerAPI{self})
}
func (self methodsMultiplayerAPI) SetMultiplayerPeer(peer MultiplayerPeer) {
	self.Runtime.MultiplayerAPI_set_multiplayer_peer(MultiplayerAPI{self}, peer)
}
func (self methodsMultiplayerAPI) GetUniqueId() int64 {
	return self.Runtime.MultiplayerAPI_get_unique_id(MultiplayerAPI{self})
}
func (self methodsMultiplayerAPI) IsServer() bool {
	return self.Runtime.MultiplayerAPI_is_server(MultiplayerAPI{self})
}
func (self methodsMultiplayerAPI) GetRemoteSenderId() int64 {
	return self.Runtime.MultiplayerAPI_get_remote_sender_id(MultiplayerAPI{self})
}
func (self methodsMultiplayerAPI) Poll() int64 {
	return self.Runtime.MultiplayerAPI_poll(MultiplayerAPI{self})
}
func (self methodsMultiplayerAPI) Rpc(peer int64, object Object, method string, arguments Array) int64 {
	return self.Runtime.MultiplayerAPI_rpc(MultiplayerAPI{self}, peer, object, method, arguments)
}
func (self methodsMultiplayerAPI) ObjectConfigurationAdd(object Object, configuration any) int64 {
	return self.Runtime.MultiplayerAPI_object_configuration_add(MultiplayerAPI{self}, object, configuration)
}
func (self methodsMultiplayerAPI) ObjectConfigurationRemove(object Object, configuration any) int64 {
	return self.Runtime.MultiplayerAPI_object_configuration_remove(MultiplayerAPI{self}, object, configuration)
}
func (self methodsMultiplayerAPI) GetPeers() PackedInt32Array {
	return self.Runtime.MultiplayerAPI_get_peers(MultiplayerAPI{self})
}
func (self methodsMultiplayerAPI) SetDefaultInterface(interface_name string) {
	self.Runtime.MultiplayerAPI_set_default_interface(MultiplayerAPI{self}, interface_name)
}
func (self methodsMultiplayerAPI) GetDefaultInterface() string {
	return self.Runtime.MultiplayerAPI_get_default_interface(MultiplayerAPI{self})
}
func (self methodsMultiplayerAPI) CreateDefaultInterface() MultiplayerAPI {
	return self.Runtime.MultiplayerAPI_create_default_interface(MultiplayerAPI{self})
}

type methodsMultiplayerAPIExtension struct {
	_ [0]*methodsMultiplayerAPIExtension
	class
}

func (self MultiplayerAPIExtension) MultiplayerAPI() MultiplayerAPI {
	var parent MultiplayerAPI
	parent.class = self.class
	return parent
}

type methodsMultiplayerPeer struct {
	_ [0]*methodsMultiplayerPeer
	class
}

func (self MultiplayerPeer) PacketPeer() PacketPeer {
	var parent PacketPeer
	parent.class = self.class
	return parent
}
func (self methodsMultiplayerPeer) SetTransferChannel(channel int64) {
	self.Runtime.MultiplayerPeer_set_transfer_channel(MultiplayerPeer{self}, channel)
}
func (self methodsMultiplayerPeer) GetTransferChannel() int64 {
	return self.Runtime.MultiplayerPeer_get_transfer_channel(MultiplayerPeer{self})
}
func (self methodsMultiplayerPeer) SetTransferMode(mode MultiplayerPeerTransferMode) {
	self.Runtime.MultiplayerPeer_set_transfer_mode(MultiplayerPeer{self}, mode)
}
func (self methodsMultiplayerPeer) GetTransferMode() MultiplayerPeerTransferMode {
	return self.Runtime.MultiplayerPeer_get_transfer_mode(MultiplayerPeer{self})
}
func (self methodsMultiplayerPeer) SetTargetPeer(id int64) {
	self.Runtime.MultiplayerPeer_set_target_peer(MultiplayerPeer{self}, id)
}
func (self methodsMultiplayerPeer) GetPacketPeer() int64 {
	return self.Runtime.MultiplayerPeer_get_packet_peer(MultiplayerPeer{self})
}
func (self methodsMultiplayerPeer) GetPacketChannel() int64 {
	return self.Runtime.MultiplayerPeer_get_packet_channel(MultiplayerPeer{self})
}
func (self methodsMultiplayerPeer) GetPacketMode() MultiplayerPeerTransferMode {
	return self.Runtime.MultiplayerPeer_get_packet_mode(MultiplayerPeer{self})
}
func (self methodsMultiplayerPeer) Poll() {
	self.Runtime.MultiplayerPeer_poll(MultiplayerPeer{self})
}
func (self methodsMultiplayerPeer) Close() {
	self.Runtime.MultiplayerPeer_close(MultiplayerPeer{self})
}
func (self methodsMultiplayerPeer) DisconnectPeer(peer int64, force bool) {
	self.Runtime.MultiplayerPeer_disconnect_peer(MultiplayerPeer{self}, peer, force)
}
func (self methodsMultiplayerPeer) GetConnectionStatus() MultiplayerPeerConnectionStatus {
	return self.Runtime.MultiplayerPeer_get_connection_status(MultiplayerPeer{self})
}
func (self methodsMultiplayerPeer) GetUniqueId() int64 {
	return self.Runtime.MultiplayerPeer_get_unique_id(MultiplayerPeer{self})
}
func (self methodsMultiplayerPeer) GenerateUniqueId() int64 {
	return self.Runtime.MultiplayerPeer_generate_unique_id(MultiplayerPeer{self})
}
func (self methodsMultiplayerPeer) SetRefuseNewConnections(enable bool) {
	self.Runtime.MultiplayerPeer_set_refuse_new_connections(MultiplayerPeer{self}, enable)
}
func (self methodsMultiplayerPeer) IsRefusingNewConnections() bool {
	return self.Runtime.MultiplayerPeer_is_refusing_new_connections(MultiplayerPeer{self})
}
func (self methodsMultiplayerPeer) IsServerRelaySupported() bool {
	return self.Runtime.MultiplayerPeer_is_server_relay_supported(MultiplayerPeer{self})
}

type methodsMultiplayerPeerExtension struct {
	_ [0]*methodsMultiplayerPeerExtension
	class
}

func (self MultiplayerPeerExtension) MultiplayerPeer() MultiplayerPeer {
	var parent MultiplayerPeer
	parent.class = self.class
	return parent
}

type methodsMultiplayerSpawner struct {
	_ [0]*methodsMultiplayerSpawner
	class
}

func (self MultiplayerSpawner) Node() Node { var parent Node; parent.class = self.class; return parent }
func (self methodsMultiplayerSpawner) AddSpawnableScene(path string) {
	self.Runtime.MultiplayerSpawner_add_spawnable_scene(MultiplayerSpawner{self}, path)
}
func (self methodsMultiplayerSpawner) GetSpawnableSceneCount() int64 {
	return self.Runtime.MultiplayerSpawner_get_spawnable_scene_count(MultiplayerSpawner{self})
}
func (self methodsMultiplayerSpawner) GetSpawnableScene(index int64) string {
	return self.Runtime.MultiplayerSpawner_get_spawnable_scene(MultiplayerSpawner{self}, index)
}
func (self methodsMultiplayerSpawner) ClearSpawnableScenes() {
	self.Runtime.MultiplayerSpawner_clear_spawnable_scenes(MultiplayerSpawner{self})
}
func (self methodsMultiplayerSpawner) Spawn(data any) Node {
	return self.Runtime.MultiplayerSpawner_spawn(MultiplayerSpawner{self}, data)
}
func (self methodsMultiplayerSpawner) GetSpawnPath() NodePath {
	return self.Runtime.MultiplayerSpawner_get_spawn_path(MultiplayerSpawner{self})
}
func (self methodsMultiplayerSpawner) SetSpawnPath(path NodePath) {
	self.Runtime.MultiplayerSpawner_set_spawn_path(MultiplayerSpawner{self}, path)
}
func (self methodsMultiplayerSpawner) GetSpawnLimit() int64 {
	return self.Runtime.MultiplayerSpawner_get_spawn_limit(MultiplayerSpawner{self})
}
func (self methodsMultiplayerSpawner) SetSpawnLimit(limit int64) {
	self.Runtime.MultiplayerSpawner_set_spawn_limit(MultiplayerSpawner{self}, limit)
}
func (self methodsMultiplayerSpawner) GetSpawnFunction() Callable {
	return self.Runtime.MultiplayerSpawner_get_spawn_function(MultiplayerSpawner{self})
}
func (self methodsMultiplayerSpawner) SetSpawnFunction(spawn_function Callable) {
	self.Runtime.MultiplayerSpawner_set_spawn_function(MultiplayerSpawner{self}, spawn_function)
}

type methodsMultiplayerSynchronizer struct {
	_ [0]*methodsMultiplayerSynchronizer
	class
}

func (self MultiplayerSynchronizer) Node() Node {
	var parent Node
	parent.class = self.class
	return parent
}
func (self methodsMultiplayerSynchronizer) SetRootPath(path NodePath) {
	self.Runtime.MultiplayerSynchronizer_set_root_path(MultiplayerSynchronizer{self}, path)
}
func (self methodsMultiplayerSynchronizer) GetRootPath() NodePath {
	return self.Runtime.MultiplayerSynchronizer_get_root_path(MultiplayerSynchronizer{self})
}
func (self methodsMultiplayerSynchronizer) SetReplicationInterval(milliseconds Float) {
	self.Runtime.MultiplayerSynchronizer_set_replication_interval(MultiplayerSynchronizer{self}, milliseconds)
}
func (self methodsMultiplayerSynchronizer) GetReplicationInterval() Float {
	return self.Runtime.MultiplayerSynchronizer_get_replication_interval(MultiplayerSynchronizer{self})
}
func (self methodsMultiplayerSynchronizer) SetDeltaInterval(milliseconds Float) {
	self.Runtime.MultiplayerSynchronizer_set_delta_interval(MultiplayerSynchronizer{self}, milliseconds)
}
func (self methodsMultiplayerSynchronizer) GetDeltaInterval() Float {
	return self.Runtime.MultiplayerSynchronizer_get_delta_interval(MultiplayerSynchronizer{self})
}
func (self methodsMultiplayerSynchronizer) SetReplicationConfig(config SceneReplicationConfig) {
	self.Runtime.MultiplayerSynchronizer_set_replication_config(MultiplayerSynchronizer{self}, config)
}
func (self methodsMultiplayerSynchronizer) GetReplicationConfig() SceneReplicationConfig {
	return self.Runtime.MultiplayerSynchronizer_get_replication_config(MultiplayerSynchronizer{self})
}
func (self methodsMultiplayerSynchronizer) SetVisibilityUpdateMode(mode MultiplayerSynchronizerVisibilityUpdateMode) {
	self.Runtime.MultiplayerSynchronizer_set_visibility_update_mode(MultiplayerSynchronizer{self}, mode)
}
func (self methodsMultiplayerSynchronizer) GetVisibilityUpdateMode() MultiplayerSynchronizerVisibilityUpdateMode {
	return self.Runtime.MultiplayerSynchronizer_get_visibility_update_mode(MultiplayerSynchronizer{self})
}
func (self methodsMultiplayerSynchronizer) UpdateVisibility(for_peer int64) {
	self.Runtime.MultiplayerSynchronizer_update_visibility(MultiplayerSynchronizer{self}, for_peer)
}
func (self methodsMultiplayerSynchronizer) SetVisibilityPublic(visible bool) {
	self.Runtime.MultiplayerSynchronizer_set_visibility_public(MultiplayerSynchronizer{self}, visible)
}
func (self methodsMultiplayerSynchronizer) IsVisibilityPublic() bool {
	return self.Runtime.MultiplayerSynchronizer_is_visibility_public(MultiplayerSynchronizer{self})
}
func (self methodsMultiplayerSynchronizer) AddVisibilityFilter(filter Callable) {
	self.Runtime.MultiplayerSynchronizer_add_visibility_filter(MultiplayerSynchronizer{self}, filter)
}
func (self methodsMultiplayerSynchronizer) RemoveVisibilityFilter(filter Callable) {
	self.Runtime.MultiplayerSynchronizer_remove_visibility_filter(MultiplayerSynchronizer{self}, filter)
}
func (self methodsMultiplayerSynchronizer) SetVisibilityFor(peer int64, visible bool) {
	self.Runtime.MultiplayerSynchronizer_set_visibility_for(MultiplayerSynchronizer{self}, peer, visible)
}
func (self methodsMultiplayerSynchronizer) GetVisibilityFor(peer int64) bool {
	return self.Runtime.MultiplayerSynchronizer_get_visibility_for(MultiplayerSynchronizer{self}, peer)
}

type methodsMutex struct {
	_ [0]*methodsMutex
	class
}

func (self Mutex) RefCounted() RefCounted {
	var parent RefCounted
	parent.class = self.class
	return parent
}
func (self methodsMutex) Lock() {
	self.Runtime.Mutex_lock(Mutex{self})
}
func (self methodsMutex) TryLock() bool {
	return self.Runtime.Mutex_try_lock(Mutex{self})
}
func (self methodsMutex) Unlock() {
	self.Runtime.Mutex_unlock(Mutex{self})
}

type methodsNavigationAgent2D struct {
	_ [0]*methodsNavigationAgent2D
	class
}

func (self NavigationAgent2D) Node() Node { var parent Node; parent.class = self.class; return parent }
func (self methodsNavigationAgent2D) GetRid() RID {
	return self.Runtime.NavigationAgent2D_get_rid(NavigationAgent2D{self})
}
func (self methodsNavigationAgent2D) SetAvoidanceEnabled(enabled bool) {
	self.Runtime.NavigationAgent2D_set_avoidance_enabled(NavigationAgent2D{self}, enabled)
}
func (self methodsNavigationAgent2D) GetAvoidanceEnabled() bool {
	return self.Runtime.NavigationAgent2D_get_avoidance_enabled(NavigationAgent2D{self})
}
func (self methodsNavigationAgent2D) SetPathDesiredDistance(desired_distance Float) {
	self.Runtime.NavigationAgent2D_set_path_desired_distance(NavigationAgent2D{self}, desired_distance)
}
func (self methodsNavigationAgent2D) GetPathDesiredDistance() Float {
	return self.Runtime.NavigationAgent2D_get_path_desired_distance(NavigationAgent2D{self})
}
func (self methodsNavigationAgent2D) SetTargetDesiredDistance(desired_distance Float) {
	self.Runtime.NavigationAgent2D_set_target_desired_distance(NavigationAgent2D{self}, desired_distance)
}
func (self methodsNavigationAgent2D) GetTargetDesiredDistance() Float {
	return self.Runtime.NavigationAgent2D_get_target_desired_distance(NavigationAgent2D{self})
}
func (self methodsNavigationAgent2D) SetRadius(radius Float) {
	self.Runtime.NavigationAgent2D_set_radius(NavigationAgent2D{self}, radius)
}
func (self methodsNavigationAgent2D) GetRadius() Float {
	return self.Runtime.NavigationAgent2D_get_radius(NavigationAgent2D{self})
}
func (self methodsNavigationAgent2D) SetNeighborDistance(neighbor_distance Float) {
	self.Runtime.NavigationAgent2D_set_neighbor_distance(NavigationAgent2D{self}, neighbor_distance)
}
func (self methodsNavigationAgent2D) GetNeighborDistance() Float {
	return self.Runtime.NavigationAgent2D_get_neighbor_distance(NavigationAgent2D{self})
}
func (self methodsNavigationAgent2D) SetMaxNeighbors(max_neighbors int64) {
	self.Runtime.NavigationAgent2D_set_max_neighbors(NavigationAgent2D{self}, max_neighbors)
}
func (self methodsNavigationAgent2D) GetMaxNeighbors() int64 {
	return self.Runtime.NavigationAgent2D_get_max_neighbors(NavigationAgent2D{self})
}
func (self methodsNavigationAgent2D) SetTimeHorizonAgents(time_horizon Float) {
	self.Runtime.NavigationAgent2D_set_time_horizon_agents(NavigationAgent2D{self}, time_horizon)
}
func (self methodsNavigationAgent2D) GetTimeHorizonAgents() Float {
	return self.Runtime.NavigationAgent2D_get_time_horizon_agents(NavigationAgent2D{self})
}
func (self methodsNavigationAgent2D) SetTimeHorizonObstacles(time_horizon Float) {
	self.Runtime.NavigationAgent2D_set_time_horizon_obstacles(NavigationAgent2D{self}, time_horizon)
}
func (self methodsNavigationAgent2D) GetTimeHorizonObstacles() Float {
	return self.Runtime.NavigationAgent2D_get_time_horizon_obstacles(NavigationAgent2D{self})
}
func (self methodsNavigationAgent2D) SetMaxSpeed(max_speed Float) {
	self.Runtime.NavigationAgent2D_set_max_speed(NavigationAgent2D{self}, max_speed)
}
func (self methodsNavigationAgent2D) GetMaxSpeed() Float {
	return self.Runtime.NavigationAgent2D_get_max_speed(NavigationAgent2D{self})
}
func (self methodsNavigationAgent2D) SetPathMaxDistance(max_speed Float) {
	self.Runtime.NavigationAgent2D_set_path_max_distance(NavigationAgent2D{self}, max_speed)
}
func (self methodsNavigationAgent2D) GetPathMaxDistance() Float {
	return self.Runtime.NavigationAgent2D_get_path_max_distance(NavigationAgent2D{self})
}
func (self methodsNavigationAgent2D) SetNavigationLayers(navigation_layers int64) {
	self.Runtime.NavigationAgent2D_set_navigation_layers(NavigationAgent2D{self}, navigation_layers)
}
func (self methodsNavigationAgent2D) GetNavigationLayers() int64 {
	return self.Runtime.NavigationAgent2D_get_navigation_layers(NavigationAgent2D{self})
}
func (self methodsNavigationAgent2D) SetNavigationLayerValue(layer_number int64, value bool) {
	self.Runtime.NavigationAgent2D_set_navigation_layer_value(NavigationAgent2D{self}, layer_number, value)
}
func (self methodsNavigationAgent2D) GetNavigationLayerValue(layer_number int64) bool {
	return self.Runtime.NavigationAgent2D_get_navigation_layer_value(NavigationAgent2D{self}, layer_number)
}
func (self methodsNavigationAgent2D) SetPathfindingAlgorithm(pathfinding_algorithm NavigationPathQueryParameters2DPathfindingAlgorithm) {
	self.Runtime.NavigationAgent2D_set_pathfinding_algorithm(NavigationAgent2D{self}, pathfinding_algorithm)
}
func (self methodsNavigationAgent2D) GetPathfindingAlgorithm() NavigationPathQueryParameters2DPathfindingAlgorithm {
	return self.Runtime.NavigationAgent2D_get_pathfinding_algorithm(NavigationAgent2D{self})
}
func (self methodsNavigationAgent2D) SetPathPostprocessing(path_postprocessing NavigationPathQueryParameters2DPathPostProcessing) {
	self.Runtime.NavigationAgent2D_set_path_postprocessing(NavigationAgent2D{self}, path_postprocessing)
}
func (self methodsNavigationAgent2D) GetPathPostprocessing() NavigationPathQueryParameters2DPathPostProcessing {
	return self.Runtime.NavigationAgent2D_get_path_postprocessing(NavigationAgent2D{self})
}
func (self methodsNavigationAgent2D) SetPathMetadataFlags(flags NavigationPathQueryParameters2DPathMetadataFlags) {
	self.Runtime.NavigationAgent2D_set_path_metadata_flags(NavigationAgent2D{self}, flags)
}
func (self methodsNavigationAgent2D) GetPathMetadataFlags() NavigationPathQueryParameters2DPathMetadataFlags {
	return self.Runtime.NavigationAgent2D_get_path_metadata_flags(NavigationAgent2D{self})
}
func (self methodsNavigationAgent2D) SetNavigationMap(navigation_map RID) {
	self.Runtime.NavigationAgent2D_set_navigation_map(NavigationAgent2D{self}, navigation_map)
}
func (self methodsNavigationAgent2D) GetNavigationMap() RID {
	return self.Runtime.NavigationAgent2D_get_navigation_map(NavigationAgent2D{self})
}
func (self methodsNavigationAgent2D) SetTargetPosition(position Vector2) {
	self.Runtime.NavigationAgent2D_set_target_position(NavigationAgent2D{self}, position)
}
func (self methodsNavigationAgent2D) GetTargetPosition() Vector2 {
	return self.Runtime.NavigationAgent2D_get_target_position(NavigationAgent2D{self})
}
func (self methodsNavigationAgent2D) GetNextPathPosition() Vector2 {
	return self.Runtime.NavigationAgent2D_get_next_path_position(NavigationAgent2D{self})
}
func (self methodsNavigationAgent2D) SetVelocityForced(velocity Vector2) {
	self.Runtime.NavigationAgent2D_set_velocity_forced(NavigationAgent2D{self}, velocity)
}
func (self methodsNavigationAgent2D) SetVelocity(velocity Vector2) {
	self.Runtime.NavigationAgent2D_set_velocity(NavigationAgent2D{self}, velocity)
}
func (self methodsNavigationAgent2D) GetVelocity() Vector2 {
	return self.Runtime.NavigationAgent2D_get_velocity(NavigationAgent2D{self})
}
func (self methodsNavigationAgent2D) DistanceToTarget() Float {
	return self.Runtime.NavigationAgent2D_distance_to_target(NavigationAgent2D{self})
}
func (self methodsNavigationAgent2D) GetCurrentNavigationResult() NavigationPathQueryResult2D {
	return self.Runtime.NavigationAgent2D_get_current_navigation_result(NavigationAgent2D{self})
}
func (self methodsNavigationAgent2D) GetCurrentNavigationPath() PackedVector2Array {
	return self.Runtime.NavigationAgent2D_get_current_navigation_path(NavigationAgent2D{self})
}
func (self methodsNavigationAgent2D) GetCurrentNavigationPathIndex() int64 {
	return self.Runtime.NavigationAgent2D_get_current_navigation_path_index(NavigationAgent2D{self})
}
func (self methodsNavigationAgent2D) IsTargetReached() bool {
	return self.Runtime.NavigationAgent2D_is_target_reached(NavigationAgent2D{self})
}
func (self methodsNavigationAgent2D) IsTargetReachable() bool {
	return self.Runtime.NavigationAgent2D_is_target_reachable(NavigationAgent2D{self})
}
func (self methodsNavigationAgent2D) IsNavigationFinished() bool {
	return self.Runtime.NavigationAgent2D_is_navigation_finished(NavigationAgent2D{self})
}
func (self methodsNavigationAgent2D) GetFinalPosition() Vector2 {
	return self.Runtime.NavigationAgent2D_get_final_position(NavigationAgent2D{self})
}
func (self methodsNavigationAgent2D) SetAvoidanceLayers(layers int64) {
	self.Runtime.NavigationAgent2D_set_avoidance_layers(NavigationAgent2D{self}, layers)
}
func (self methodsNavigationAgent2D) GetAvoidanceLayers() int64 {
	return self.Runtime.NavigationAgent2D_get_avoidance_layers(NavigationAgent2D{self})
}
func (self methodsNavigationAgent2D) SetAvoidanceMask(mask int64) {
	self.Runtime.NavigationAgent2D_set_avoidance_mask(NavigationAgent2D{self}, mask)
}
func (self methodsNavigationAgent2D) GetAvoidanceMask() int64 {
	return self.Runtime.NavigationAgent2D_get_avoidance_mask(NavigationAgent2D{self})
}
func (self methodsNavigationAgent2D) SetAvoidanceLayerValue(layer_number int64, value bool) {
	self.Runtime.NavigationAgent2D_set_avoidance_layer_value(NavigationAgent2D{self}, layer_number, value)
}
func (self methodsNavigationAgent2D) GetAvoidanceLayerValue(layer_number int64) bool {
	return self.Runtime.NavigationAgent2D_get_avoidance_layer_value(NavigationAgent2D{self}, layer_number)
}
func (self methodsNavigationAgent2D) SetAvoidanceMaskValue(mask_number int64, value bool) {
	self.Runtime.NavigationAgent2D_set_avoidance_mask_value(NavigationAgent2D{self}, mask_number, value)
}
func (self methodsNavigationAgent2D) GetAvoidanceMaskValue(mask_number int64) bool {
	return self.Runtime.NavigationAgent2D_get_avoidance_mask_value(NavigationAgent2D{self}, mask_number)
}
func (self methodsNavigationAgent2D) SetAvoidancePriority(priority Float) {
	self.Runtime.NavigationAgent2D_set_avoidance_priority(NavigationAgent2D{self}, priority)
}
func (self methodsNavigationAgent2D) GetAvoidancePriority() Float {
	return self.Runtime.NavigationAgent2D_get_avoidance_priority(NavigationAgent2D{self})
}
func (self methodsNavigationAgent2D) SetDebugEnabled(enabled bool) {
	self.Runtime.NavigationAgent2D_set_debug_enabled(NavigationAgent2D{self}, enabled)
}
func (self methodsNavigationAgent2D) GetDebugEnabled() bool {
	return self.Runtime.NavigationAgent2D_get_debug_enabled(NavigationAgent2D{self})
}
func (self methodsNavigationAgent2D) SetDebugUseCustom(enabled bool) {
	self.Runtime.NavigationAgent2D_set_debug_use_custom(NavigationAgent2D{self}, enabled)
}
func (self methodsNavigationAgent2D) GetDebugUseCustom() bool {
	return self.Runtime.NavigationAgent2D_get_debug_use_custom(NavigationAgent2D{self})
}
func (self methodsNavigationAgent2D) SetDebugPathCustomColor(color Color) {
	self.Runtime.NavigationAgent2D_set_debug_path_custom_color(NavigationAgent2D{self}, color)
}
func (self methodsNavigationAgent2D) GetDebugPathCustomColor() Color {
	return self.Runtime.NavigationAgent2D_get_debug_path_custom_color(NavigationAgent2D{self})
}
func (self methodsNavigationAgent2D) SetDebugPathCustomPointSize(point_size Float) {
	self.Runtime.NavigationAgent2D_set_debug_path_custom_point_size(NavigationAgent2D{self}, point_size)
}
func (self methodsNavigationAgent2D) GetDebugPathCustomPointSize() Float {
	return self.Runtime.NavigationAgent2D_get_debug_path_custom_point_size(NavigationAgent2D{self})
}
func (self methodsNavigationAgent2D) SetDebugPathCustomLineWidth(line_width Float) {
	self.Runtime.NavigationAgent2D_set_debug_path_custom_line_width(NavigationAgent2D{self}, line_width)
}
func (self methodsNavigationAgent2D) GetDebugPathCustomLineWidth() Float {
	return self.Runtime.NavigationAgent2D_get_debug_path_custom_line_width(NavigationAgent2D{self})
}

type methodsNavigationAgent3D struct {
	_ [0]*methodsNavigationAgent3D
	class
}

func (self NavigationAgent3D) Node() Node { var parent Node; parent.class = self.class; return parent }
func (self methodsNavigationAgent3D) GetRid() RID {
	return self.Runtime.NavigationAgent3D_get_rid(NavigationAgent3D{self})
}
func (self methodsNavigationAgent3D) SetAvoidanceEnabled(enabled bool) {
	self.Runtime.NavigationAgent3D_set_avoidance_enabled(NavigationAgent3D{self}, enabled)
}
func (self methodsNavigationAgent3D) GetAvoidanceEnabled() bool {
	return self.Runtime.NavigationAgent3D_get_avoidance_enabled(NavigationAgent3D{self})
}
func (self methodsNavigationAgent3D) SetPathDesiredDistance(desired_distance Float) {
	self.Runtime.NavigationAgent3D_set_path_desired_distance(NavigationAgent3D{self}, desired_distance)
}
func (self methodsNavigationAgent3D) GetPathDesiredDistance() Float {
	return self.Runtime.NavigationAgent3D_get_path_desired_distance(NavigationAgent3D{self})
}
func (self methodsNavigationAgent3D) SetTargetDesiredDistance(desired_distance Float) {
	self.Runtime.NavigationAgent3D_set_target_desired_distance(NavigationAgent3D{self}, desired_distance)
}
func (self methodsNavigationAgent3D) GetTargetDesiredDistance() Float {
	return self.Runtime.NavigationAgent3D_get_target_desired_distance(NavigationAgent3D{self})
}
func (self methodsNavigationAgent3D) SetRadius(radius Float) {
	self.Runtime.NavigationAgent3D_set_radius(NavigationAgent3D{self}, radius)
}
func (self methodsNavigationAgent3D) GetRadius() Float {
	return self.Runtime.NavigationAgent3D_get_radius(NavigationAgent3D{self})
}
func (self methodsNavigationAgent3D) SetHeight(height Float) {
	self.Runtime.NavigationAgent3D_set_height(NavigationAgent3D{self}, height)
}
func (self methodsNavigationAgent3D) GetHeight() Float {
	return self.Runtime.NavigationAgent3D_get_height(NavigationAgent3D{self})
}
func (self methodsNavigationAgent3D) SetPathHeightOffset(path_height_offset Float) {
	self.Runtime.NavigationAgent3D_set_path_height_offset(NavigationAgent3D{self}, path_height_offset)
}
func (self methodsNavigationAgent3D) GetPathHeightOffset() Float {
	return self.Runtime.NavigationAgent3D_get_path_height_offset(NavigationAgent3D{self})
}
func (self methodsNavigationAgent3D) SetUse3dAvoidance(enabled bool) {
	self.Runtime.NavigationAgent3D_set_use_3d_avoidance(NavigationAgent3D{self}, enabled)
}
func (self methodsNavigationAgent3D) GetUse3dAvoidance() bool {
	return self.Runtime.NavigationAgent3D_get_use_3d_avoidance(NavigationAgent3D{self})
}
func (self methodsNavigationAgent3D) SetKeepYVelocity(enabled bool) {
	self.Runtime.NavigationAgent3D_set_keep_y_velocity(NavigationAgent3D{self}, enabled)
}
func (self methodsNavigationAgent3D) GetKeepYVelocity() bool {
	return self.Runtime.NavigationAgent3D_get_keep_y_velocity(NavigationAgent3D{self})
}
func (self methodsNavigationAgent3D) SetNeighborDistance(neighbor_distance Float) {
	self.Runtime.NavigationAgent3D_set_neighbor_distance(NavigationAgent3D{self}, neighbor_distance)
}
func (self methodsNavigationAgent3D) GetNeighborDistance() Float {
	return self.Runtime.NavigationAgent3D_get_neighbor_distance(NavigationAgent3D{self})
}
func (self methodsNavigationAgent3D) SetMaxNeighbors(max_neighbors int64) {
	self.Runtime.NavigationAgent3D_set_max_neighbors(NavigationAgent3D{self}, max_neighbors)
}
func (self methodsNavigationAgent3D) GetMaxNeighbors() int64 {
	return self.Runtime.NavigationAgent3D_get_max_neighbors(NavigationAgent3D{self})
}
func (self methodsNavigationAgent3D) SetTimeHorizonAgents(time_horizon Float) {
	self.Runtime.NavigationAgent3D_set_time_horizon_agents(NavigationAgent3D{self}, time_horizon)
}
func (self methodsNavigationAgent3D) GetTimeHorizonAgents() Float {
	return self.Runtime.NavigationAgent3D_get_time_horizon_agents(NavigationAgent3D{self})
}
func (self methodsNavigationAgent3D) SetTimeHorizonObstacles(time_horizon Float) {
	self.Runtime.NavigationAgent3D_set_time_horizon_obstacles(NavigationAgent3D{self}, time_horizon)
}
func (self methodsNavigationAgent3D) GetTimeHorizonObstacles() Float {
	return self.Runtime.NavigationAgent3D_get_time_horizon_obstacles(NavigationAgent3D{self})
}
func (self methodsNavigationAgent3D) SetMaxSpeed(max_speed Float) {
	self.Runtime.NavigationAgent3D_set_max_speed(NavigationAgent3D{self}, max_speed)
}
func (self methodsNavigationAgent3D) GetMaxSpeed() Float {
	return self.Runtime.NavigationAgent3D_get_max_speed(NavigationAgent3D{self})
}
func (self methodsNavigationAgent3D) SetPathMaxDistance(max_speed Float) {
	self.Runtime.NavigationAgent3D_set_path_max_distance(NavigationAgent3D{self}, max_speed)
}
func (self methodsNavigationAgent3D) GetPathMaxDistance() Float {
	return self.Runtime.NavigationAgent3D_get_path_max_distance(NavigationAgent3D{self})
}
func (self methodsNavigationAgent3D) SetNavigationLayers(navigation_layers int64) {
	self.Runtime.NavigationAgent3D_set_navigation_layers(NavigationAgent3D{self}, navigation_layers)
}
func (self methodsNavigationAgent3D) GetNavigationLayers() int64 {
	return self.Runtime.NavigationAgent3D_get_navigation_layers(NavigationAgent3D{self})
}
func (self methodsNavigationAgent3D) SetNavigationLayerValue(layer_number int64, value bool) {
	self.Runtime.NavigationAgent3D_set_navigation_layer_value(NavigationAgent3D{self}, layer_number, value)
}
func (self methodsNavigationAgent3D) GetNavigationLayerValue(layer_number int64) bool {
	return self.Runtime.NavigationAgent3D_get_navigation_layer_value(NavigationAgent3D{self}, layer_number)
}
func (self methodsNavigationAgent3D) SetPathfindingAlgorithm(pathfinding_algorithm NavigationPathQueryParameters3DPathfindingAlgorithm) {
	self.Runtime.NavigationAgent3D_set_pathfinding_algorithm(NavigationAgent3D{self}, pathfinding_algorithm)
}
func (self methodsNavigationAgent3D) GetPathfindingAlgorithm() NavigationPathQueryParameters3DPathfindingAlgorithm {
	return self.Runtime.NavigationAgent3D_get_pathfinding_algorithm(NavigationAgent3D{self})
}
func (self methodsNavigationAgent3D) SetPathPostprocessing(path_postprocessing NavigationPathQueryParameters3DPathPostProcessing) {
	self.Runtime.NavigationAgent3D_set_path_postprocessing(NavigationAgent3D{self}, path_postprocessing)
}
func (self methodsNavigationAgent3D) GetPathPostprocessing() NavigationPathQueryParameters3DPathPostProcessing {
	return self.Runtime.NavigationAgent3D_get_path_postprocessing(NavigationAgent3D{self})
}
func (self methodsNavigationAgent3D) SetPathMetadataFlags(flags NavigationPathQueryParameters3DPathMetadataFlags) {
	self.Runtime.NavigationAgent3D_set_path_metadata_flags(NavigationAgent3D{self}, flags)
}
func (self methodsNavigationAgent3D) GetPathMetadataFlags() NavigationPathQueryParameters3DPathMetadataFlags {
	return self.Runtime.NavigationAgent3D_get_path_metadata_flags(NavigationAgent3D{self})
}
func (self methodsNavigationAgent3D) SetNavigationMap(navigation_map RID) {
	self.Runtime.NavigationAgent3D_set_navigation_map(NavigationAgent3D{self}, navigation_map)
}
func (self methodsNavigationAgent3D) GetNavigationMap() RID {
	return self.Runtime.NavigationAgent3D_get_navigation_map(NavigationAgent3D{self})
}
func (self methodsNavigationAgent3D) SetTargetPosition(position Vector3) {
	self.Runtime.NavigationAgent3D_set_target_position(NavigationAgent3D{self}, position)
}
func (self methodsNavigationAgent3D) GetTargetPosition() Vector3 {
	return self.Runtime.NavigationAgent3D_get_target_position(NavigationAgent3D{self})
}
func (self methodsNavigationAgent3D) GetNextPathPosition() Vector3 {
	return self.Runtime.NavigationAgent3D_get_next_path_position(NavigationAgent3D{self})
}
func (self methodsNavigationAgent3D) SetVelocityForced(velocity Vector3) {
	self.Runtime.NavigationAgent3D_set_velocity_forced(NavigationAgent3D{self}, velocity)
}
func (self methodsNavigationAgent3D) SetVelocity(velocity Vector3) {
	self.Runtime.NavigationAgent3D_set_velocity(NavigationAgent3D{self}, velocity)
}
func (self methodsNavigationAgent3D) GetVelocity() Vector3 {
	return self.Runtime.NavigationAgent3D_get_velocity(NavigationAgent3D{self})
}
func (self methodsNavigationAgent3D) DistanceToTarget() Float {
	return self.Runtime.NavigationAgent3D_distance_to_target(NavigationAgent3D{self})
}
func (self methodsNavigationAgent3D) GetCurrentNavigationResult() NavigationPathQueryResult3D {
	return self.Runtime.NavigationAgent3D_get_current_navigation_result(NavigationAgent3D{self})
}
func (self methodsNavigationAgent3D) GetCurrentNavigationPath() PackedVector3Array {
	return self.Runtime.NavigationAgent3D_get_current_navigation_path(NavigationAgent3D{self})
}
func (self methodsNavigationAgent3D) GetCurrentNavigationPathIndex() int64 {
	return self.Runtime.NavigationAgent3D_get_current_navigation_path_index(NavigationAgent3D{self})
}
func (self methodsNavigationAgent3D) IsTargetReached() bool {
	return self.Runtime.NavigationAgent3D_is_target_reached(NavigationAgent3D{self})
}
func (self methodsNavigationAgent3D) IsTargetReachable() bool {
	return self.Runtime.NavigationAgent3D_is_target_reachable(NavigationAgent3D{self})
}
func (self methodsNavigationAgent3D) IsNavigationFinished() bool {
	return self.Runtime.NavigationAgent3D_is_navigation_finished(NavigationAgent3D{self})
}
func (self methodsNavigationAgent3D) GetFinalPosition() Vector3 {
	return self.Runtime.NavigationAgent3D_get_final_position(NavigationAgent3D{self})
}
func (self methodsNavigationAgent3D) SetAvoidanceLayers(layers int64) {
	self.Runtime.NavigationAgent3D_set_avoidance_layers(NavigationAgent3D{self}, layers)
}
func (self methodsNavigationAgent3D) GetAvoidanceLayers() int64 {
	return self.Runtime.NavigationAgent3D_get_avoidance_layers(NavigationAgent3D{self})
}
func (self methodsNavigationAgent3D) SetAvoidanceMask(mask int64) {
	self.Runtime.NavigationAgent3D_set_avoidance_mask(NavigationAgent3D{self}, mask)
}
func (self methodsNavigationAgent3D) GetAvoidanceMask() int64 {
	return self.Runtime.NavigationAgent3D_get_avoidance_mask(NavigationAgent3D{self})
}
func (self methodsNavigationAgent3D) SetAvoidanceLayerValue(layer_number int64, value bool) {
	self.Runtime.NavigationAgent3D_set_avoidance_layer_value(NavigationAgent3D{self}, layer_number, value)
}
func (self methodsNavigationAgent3D) GetAvoidanceLayerValue(layer_number int64) bool {
	return self.Runtime.NavigationAgent3D_get_avoidance_layer_value(NavigationAgent3D{self}, layer_number)
}
func (self methodsNavigationAgent3D) SetAvoidanceMaskValue(mask_number int64, value bool) {
	self.Runtime.NavigationAgent3D_set_avoidance_mask_value(NavigationAgent3D{self}, mask_number, value)
}
func (self methodsNavigationAgent3D) GetAvoidanceMaskValue(mask_number int64) bool {
	return self.Runtime.NavigationAgent3D_get_avoidance_mask_value(NavigationAgent3D{self}, mask_number)
}
func (self methodsNavigationAgent3D) SetAvoidancePriority(priority Float) {
	self.Runtime.NavigationAgent3D_set_avoidance_priority(NavigationAgent3D{self}, priority)
}
func (self methodsNavigationAgent3D) GetAvoidancePriority() Float {
	return self.Runtime.NavigationAgent3D_get_avoidance_priority(NavigationAgent3D{self})
}
func (self methodsNavigationAgent3D) SetDebugEnabled(enabled bool) {
	self.Runtime.NavigationAgent3D_set_debug_enabled(NavigationAgent3D{self}, enabled)
}
func (self methodsNavigationAgent3D) GetDebugEnabled() bool {
	return self.Runtime.NavigationAgent3D_get_debug_enabled(NavigationAgent3D{self})
}
func (self methodsNavigationAgent3D) SetDebugUseCustom(enabled bool) {
	self.Runtime.NavigationAgent3D_set_debug_use_custom(NavigationAgent3D{self}, enabled)
}
func (self methodsNavigationAgent3D) GetDebugUseCustom() bool {
	return self.Runtime.NavigationAgent3D_get_debug_use_custom(NavigationAgent3D{self})
}
func (self methodsNavigationAgent3D) SetDebugPathCustomColor(color Color) {
	self.Runtime.NavigationAgent3D_set_debug_path_custom_color(NavigationAgent3D{self}, color)
}
func (self methodsNavigationAgent3D) GetDebugPathCustomColor() Color {
	return self.Runtime.NavigationAgent3D_get_debug_path_custom_color(NavigationAgent3D{self})
}
func (self methodsNavigationAgent3D) SetDebugPathCustomPointSize(point_size Float) {
	self.Runtime.NavigationAgent3D_set_debug_path_custom_point_size(NavigationAgent3D{self}, point_size)
}
func (self methodsNavigationAgent3D) GetDebugPathCustomPointSize() Float {
	return self.Runtime.NavigationAgent3D_get_debug_path_custom_point_size(NavigationAgent3D{self})
}

type methodsNavigationLink2D struct {
	_ [0]*methodsNavigationLink2D
	class
}

func (self NavigationLink2D) Node2D() Node2D {
	var parent Node2D
	parent.class = self.class
	return parent
}
func (self methodsNavigationLink2D) GetRid() RID {
	return self.Runtime.NavigationLink2D_get_rid(NavigationLink2D{self})
}
func (self methodsNavigationLink2D) SetEnabled(enabled bool) {
	self.Runtime.NavigationLink2D_set_enabled(NavigationLink2D{self}, enabled)
}
func (self methodsNavigationLink2D) IsEnabled() bool {
	return self.Runtime.NavigationLink2D_is_enabled(NavigationLink2D{self})
}
func (self methodsNavigationLink2D) SetBidirectional(bidirectional bool) {
	self.Runtime.NavigationLink2D_set_bidirectional(NavigationLink2D{self}, bidirectional)
}
func (self methodsNavigationLink2D) IsBidirectional() bool {
	return self.Runtime.NavigationLink2D_is_bidirectional(NavigationLink2D{self})
}
func (self methodsNavigationLink2D) SetNavigationLayers(navigation_layers int64) {
	self.Runtime.NavigationLink2D_set_navigation_layers(NavigationLink2D{self}, navigation_layers)
}
func (self methodsNavigationLink2D) GetNavigationLayers() int64 {
	return self.Runtime.NavigationLink2D_get_navigation_layers(NavigationLink2D{self})
}
func (self methodsNavigationLink2D) SetNavigationLayerValue(layer_number int64, value bool) {
	self.Runtime.NavigationLink2D_set_navigation_layer_value(NavigationLink2D{self}, layer_number, value)
}
func (self methodsNavigationLink2D) GetNavigationLayerValue(layer_number int64) bool {
	return self.Runtime.NavigationLink2D_get_navigation_layer_value(NavigationLink2D{self}, layer_number)
}
func (self methodsNavigationLink2D) SetStartPosition(position Vector2) {
	self.Runtime.NavigationLink2D_set_start_position(NavigationLink2D{self}, position)
}
func (self methodsNavigationLink2D) GetStartPosition() Vector2 {
	return self.Runtime.NavigationLink2D_get_start_position(NavigationLink2D{self})
}
func (self methodsNavigationLink2D) SetEndPosition(position Vector2) {
	self.Runtime.NavigationLink2D_set_end_position(NavigationLink2D{self}, position)
}
func (self methodsNavigationLink2D) GetEndPosition() Vector2 {
	return self.Runtime.NavigationLink2D_get_end_position(NavigationLink2D{self})
}
func (self methodsNavigationLink2D) SetGlobalStartPosition(position Vector2) {
	self.Runtime.NavigationLink2D_set_global_start_position(NavigationLink2D{self}, position)
}
func (self methodsNavigationLink2D) GetGlobalStartPosition() Vector2 {
	return self.Runtime.NavigationLink2D_get_global_start_position(NavigationLink2D{self})
}
func (self methodsNavigationLink2D) SetGlobalEndPosition(position Vector2) {
	self.Runtime.NavigationLink2D_set_global_end_position(NavigationLink2D{self}, position)
}
func (self methodsNavigationLink2D) GetGlobalEndPosition() Vector2 {
	return self.Runtime.NavigationLink2D_get_global_end_position(NavigationLink2D{self})
}
func (self methodsNavigationLink2D) SetEnterCost(enter_cost Float) {
	self.Runtime.NavigationLink2D_set_enter_cost(NavigationLink2D{self}, enter_cost)
}
func (self methodsNavigationLink2D) GetEnterCost() Float {
	return self.Runtime.NavigationLink2D_get_enter_cost(NavigationLink2D{self})
}
func (self methodsNavigationLink2D) SetTravelCost(travel_cost Float) {
	self.Runtime.NavigationLink2D_set_travel_cost(NavigationLink2D{self}, travel_cost)
}
func (self methodsNavigationLink2D) GetTravelCost() Float {
	return self.Runtime.NavigationLink2D_get_travel_cost(NavigationLink2D{self})
}

type methodsNavigationLink3D struct {
	_ [0]*methodsNavigationLink3D
	class
}

func (self NavigationLink3D) Node3D() Node3D {
	var parent Node3D
	parent.class = self.class
	return parent
}
func (self methodsNavigationLink3D) GetRid() RID {
	return self.Runtime.NavigationLink3D_get_rid(NavigationLink3D{self})
}
func (self methodsNavigationLink3D) SetEnabled(enabled bool) {
	self.Runtime.NavigationLink3D_set_enabled(NavigationLink3D{self}, enabled)
}
func (self methodsNavigationLink3D) IsEnabled() bool {
	return self.Runtime.NavigationLink3D_is_enabled(NavigationLink3D{self})
}
func (self methodsNavigationLink3D) SetBidirectional(bidirectional bool) {
	self.Runtime.NavigationLink3D_set_bidirectional(NavigationLink3D{self}, bidirectional)
}
func (self methodsNavigationLink3D) IsBidirectional() bool {
	return self.Runtime.NavigationLink3D_is_bidirectional(NavigationLink3D{self})
}
func (self methodsNavigationLink3D) SetNavigationLayers(navigation_layers int64) {
	self.Runtime.NavigationLink3D_set_navigation_layers(NavigationLink3D{self}, navigation_layers)
}
func (self methodsNavigationLink3D) GetNavigationLayers() int64 {
	return self.Runtime.NavigationLink3D_get_navigation_layers(NavigationLink3D{self})
}
func (self methodsNavigationLink3D) SetNavigationLayerValue(layer_number int64, value bool) {
	self.Runtime.NavigationLink3D_set_navigation_layer_value(NavigationLink3D{self}, layer_number, value)
}
func (self methodsNavigationLink3D) GetNavigationLayerValue(layer_number int64) bool {
	return self.Runtime.NavigationLink3D_get_navigation_layer_value(NavigationLink3D{self}, layer_number)
}
func (self methodsNavigationLink3D) SetStartPosition(position Vector3) {
	self.Runtime.NavigationLink3D_set_start_position(NavigationLink3D{self}, position)
}
func (self methodsNavigationLink3D) GetStartPosition() Vector3 {
	return self.Runtime.NavigationLink3D_get_start_position(NavigationLink3D{self})
}
func (self methodsNavigationLink3D) SetEndPosition(position Vector3) {
	self.Runtime.NavigationLink3D_set_end_position(NavigationLink3D{self}, position)
}
func (self methodsNavigationLink3D) GetEndPosition() Vector3 {
	return self.Runtime.NavigationLink3D_get_end_position(NavigationLink3D{self})
}
func (self methodsNavigationLink3D) SetGlobalStartPosition(position Vector3) {
	self.Runtime.NavigationLink3D_set_global_start_position(NavigationLink3D{self}, position)
}
func (self methodsNavigationLink3D) GetGlobalStartPosition() Vector3 {
	return self.Runtime.NavigationLink3D_get_global_start_position(NavigationLink3D{self})
}
func (self methodsNavigationLink3D) SetGlobalEndPosition(position Vector3) {
	self.Runtime.NavigationLink3D_set_global_end_position(NavigationLink3D{self}, position)
}
func (self methodsNavigationLink3D) GetGlobalEndPosition() Vector3 {
	return self.Runtime.NavigationLink3D_get_global_end_position(NavigationLink3D{self})
}
func (self methodsNavigationLink3D) SetEnterCost(enter_cost Float) {
	self.Runtime.NavigationLink3D_set_enter_cost(NavigationLink3D{self}, enter_cost)
}
func (self methodsNavigationLink3D) GetEnterCost() Float {
	return self.Runtime.NavigationLink3D_get_enter_cost(NavigationLink3D{self})
}
func (self methodsNavigationLink3D) SetTravelCost(travel_cost Float) {
	self.Runtime.NavigationLink3D_set_travel_cost(NavigationLink3D{self}, travel_cost)
}
func (self methodsNavigationLink3D) GetTravelCost() Float {
	return self.Runtime.NavigationLink3D_get_travel_cost(NavigationLink3D{self})
}

type methodsNavigationMesh struct {
	_ [0]*methodsNavigationMesh
	class
}

func (self NavigationMesh) Resource() Resource {
	var parent Resource
	parent.class = self.class
	return parent
}
func (self methodsNavigationMesh) SetSamplePartitionType(sample_partition_type NavigationMeshSamplePartitionType) {
	self.Runtime.NavigationMesh_set_sample_partition_type(NavigationMesh{self}, sample_partition_type)
}
func (self methodsNavigationMesh) GetSamplePartitionType() NavigationMeshSamplePartitionType {
	return self.Runtime.NavigationMesh_get_sample_partition_type(NavigationMesh{self})
}
func (self methodsNavigationMesh) SetParsedGeometryType(geometry_type NavigationMeshParsedGeometryType) {
	self.Runtime.NavigationMesh_set_parsed_geometry_type(NavigationMesh{self}, geometry_type)
}
func (self methodsNavigationMesh) GetParsedGeometryType() NavigationMeshParsedGeometryType {
	return self.Runtime.NavigationMesh_get_parsed_geometry_type(NavigationMesh{self})
}
func (self methodsNavigationMesh) SetCollisionMask(mask int64) {
	self.Runtime.NavigationMesh_set_collision_mask(NavigationMesh{self}, mask)
}
func (self methodsNavigationMesh) GetCollisionMask() int64 {
	return self.Runtime.NavigationMesh_get_collision_mask(NavigationMesh{self})
}
func (self methodsNavigationMesh) SetCollisionMaskValue(layer_number int64, value bool) {
	self.Runtime.NavigationMesh_set_collision_mask_value(NavigationMesh{self}, layer_number, value)
}
func (self methodsNavigationMesh) GetCollisionMaskValue(layer_number int64) bool {
	return self.Runtime.NavigationMesh_get_collision_mask_value(NavigationMesh{self}, layer_number)
}
func (self methodsNavigationMesh) SetSourceGeometryMode(mask NavigationMeshSourceGeometryMode) {
	self.Runtime.NavigationMesh_set_source_geometry_mode(NavigationMesh{self}, mask)
}
func (self methodsNavigationMesh) GetSourceGeometryMode() NavigationMeshSourceGeometryMode {
	return self.Runtime.NavigationMesh_get_source_geometry_mode(NavigationMesh{self})
}
func (self methodsNavigationMesh) SetSourceGroupName(mask string) {
	self.Runtime.NavigationMesh_set_source_group_name(NavigationMesh{self}, mask)
}
func (self methodsNavigationMesh) GetSourceGroupName() string {
	return self.Runtime.NavigationMesh_get_source_group_name(NavigationMesh{self})
}
func (self methodsNavigationMesh) SetCellSize(cell_size Float) {
	self.Runtime.NavigationMesh_set_cell_size(NavigationMesh{self}, cell_size)
}
func (self methodsNavigationMesh) GetCellSize() Float {
	return self.Runtime.NavigationMesh_get_cell_size(NavigationMesh{self})
}
func (self methodsNavigationMesh) SetCellHeight(cell_height Float) {
	self.Runtime.NavigationMesh_set_cell_height(NavigationMesh{self}, cell_height)
}
func (self methodsNavigationMesh) GetCellHeight() Float {
	return self.Runtime.NavigationMesh_get_cell_height(NavigationMesh{self})
}
func (self methodsNavigationMesh) SetAgentHeight(agent_height Float) {
	self.Runtime.NavigationMesh_set_agent_height(NavigationMesh{self}, agent_height)
}
func (self methodsNavigationMesh) GetAgentHeight() Float {
	return self.Runtime.NavigationMesh_get_agent_height(NavigationMesh{self})
}
func (self methodsNavigationMesh) SetAgentRadius(agent_radius Float) {
	self.Runtime.NavigationMesh_set_agent_radius(NavigationMesh{self}, agent_radius)
}
func (self methodsNavigationMesh) GetAgentRadius() Float {
	return self.Runtime.NavigationMesh_get_agent_radius(NavigationMesh{self})
}
func (self methodsNavigationMesh) SetAgentMaxClimb(agent_max_climb Float) {
	self.Runtime.NavigationMesh_set_agent_max_climb(NavigationMesh{self}, agent_max_climb)
}
func (self methodsNavigationMesh) GetAgentMaxClimb() Float {
	return self.Runtime.NavigationMesh_get_agent_max_climb(NavigationMesh{self})
}
func (self methodsNavigationMesh) SetAgentMaxSlope(agent_max_slope Float) {
	self.Runtime.NavigationMesh_set_agent_max_slope(NavigationMesh{self}, agent_max_slope)
}
func (self methodsNavigationMesh) GetAgentMaxSlope() Float {
	return self.Runtime.NavigationMesh_get_agent_max_slope(NavigationMesh{self})
}
func (self methodsNavigationMesh) SetRegionMinSize(region_min_size Float) {
	self.Runtime.NavigationMesh_set_region_min_size(NavigationMesh{self}, region_min_size)
}
func (self methodsNavigationMesh) GetRegionMinSize() Float {
	return self.Runtime.NavigationMesh_get_region_min_size(NavigationMesh{self})
}
func (self methodsNavigationMesh) SetRegionMergeSize(region_merge_size Float) {
	self.Runtime.NavigationMesh_set_region_merge_size(NavigationMesh{self}, region_merge_size)
}
func (self methodsNavigationMesh) GetRegionMergeSize() Float {
	return self.Runtime.NavigationMesh_get_region_merge_size(NavigationMesh{self})
}
func (self methodsNavigationMesh) SetEdgeMaxLength(edge_max_length Float) {
	self.Runtime.NavigationMesh_set_edge_max_length(NavigationMesh{self}, edge_max_length)
}
func (self methodsNavigationMesh) GetEdgeMaxLength() Float {
	return self.Runtime.NavigationMesh_get_edge_max_length(NavigationMesh{self})
}
func (self methodsNavigationMesh) SetEdgeMaxError(edge_max_error Float) {
	self.Runtime.NavigationMesh_set_edge_max_error(NavigationMesh{self}, edge_max_error)
}
func (self methodsNavigationMesh) GetEdgeMaxError() Float {
	return self.Runtime.NavigationMesh_get_edge_max_error(NavigationMesh{self})
}
func (self methodsNavigationMesh) SetVerticesPerPolygon(vertices_per_polygon Float) {
	self.Runtime.NavigationMesh_set_vertices_per_polygon(NavigationMesh{self}, vertices_per_polygon)
}
func (self methodsNavigationMesh) GetVerticesPerPolygon() Float {
	return self.Runtime.NavigationMesh_get_vertices_per_polygon(NavigationMesh{self})
}
func (self methodsNavigationMesh) SetDetailSampleDistance(detail_sample_dist Float) {
	self.Runtime.NavigationMesh_set_detail_sample_distance(NavigationMesh{self}, detail_sample_dist)
}
func (self methodsNavigationMesh) GetDetailSampleDistance() Float {
	return self.Runtime.NavigationMesh_get_detail_sample_distance(NavigationMesh{self})
}
func (self methodsNavigationMesh) SetDetailSampleMaxError(detail_sample_max_error Float) {
	self.Runtime.NavigationMesh_set_detail_sample_max_error(NavigationMesh{self}, detail_sample_max_error)
}
func (self methodsNavigationMesh) GetDetailSampleMaxError() Float {
	return self.Runtime.NavigationMesh_get_detail_sample_max_error(NavigationMesh{self})
}
func (self methodsNavigationMesh) SetFilterLowHangingObstacles(filter_low_hanging_obstacles bool) {
	self.Runtime.NavigationMesh_set_filter_low_hanging_obstacles(NavigationMesh{self}, filter_low_hanging_obstacles)
}
func (self methodsNavigationMesh) GetFilterLowHangingObstacles() bool {
	return self.Runtime.NavigationMesh_get_filter_low_hanging_obstacles(NavigationMesh{self})
}
func (self methodsNavigationMesh) SetFilterLedgeSpans(filter_ledge_spans bool) {
	self.Runtime.NavigationMesh_set_filter_ledge_spans(NavigationMesh{self}, filter_ledge_spans)
}
func (self methodsNavigationMesh) GetFilterLedgeSpans() bool {
	return self.Runtime.NavigationMesh_get_filter_ledge_spans(NavigationMesh{self})
}
func (self methodsNavigationMesh) SetFilterWalkableLowHeightSpans(filter_walkable_low_height_spans bool) {
	self.Runtime.NavigationMesh_set_filter_walkable_low_height_spans(NavigationMesh{self}, filter_walkable_low_height_spans)
}
func (self methodsNavigationMesh) GetFilterWalkableLowHeightSpans() bool {
	return self.Runtime.NavigationMesh_get_filter_walkable_low_height_spans(NavigationMesh{self})
}
func (self methodsNavigationMesh) SetFilterBakingAabb(baking_aabb AABB) {
	self.Runtime.NavigationMesh_set_filter_baking_aabb(NavigationMesh{self}, baking_aabb)
}
func (self methodsNavigationMesh) GetFilterBakingAabb() AABB {
	return self.Runtime.NavigationMesh_get_filter_baking_aabb(NavigationMesh{self})
}
func (self methodsNavigationMesh) SetFilterBakingAabbOffset(baking_aabb_offset Vector3) {
	self.Runtime.NavigationMesh_set_filter_baking_aabb_offset(NavigationMesh{self}, baking_aabb_offset)
}
func (self methodsNavigationMesh) GetFilterBakingAabbOffset() Vector3 {
	return self.Runtime.NavigationMesh_get_filter_baking_aabb_offset(NavigationMesh{self})
}
func (self methodsNavigationMesh) SetVertices(vertices PackedVector3Array) {
	self.Runtime.NavigationMesh_set_vertices(NavigationMesh{self}, vertices)
}
func (self methodsNavigationMesh) GetVertices() PackedVector3Array {
	return self.Runtime.NavigationMesh_get_vertices(NavigationMesh{self})
}
func (self methodsNavigationMesh) AddPolygon(polygon PackedInt32Array) {
	self.Runtime.NavigationMesh_add_polygon(NavigationMesh{self}, polygon)
}
func (self methodsNavigationMesh) GetPolygonCount() int64 {
	return self.Runtime.NavigationMesh_get_polygon_count(NavigationMesh{self})
}
func (self methodsNavigationMesh) GetPolygon(idx int64) PackedInt32Array {
	return self.Runtime.NavigationMesh_get_polygon(NavigationMesh{self}, idx)
}
func (self methodsNavigationMesh) ClearPolygons() {
	self.Runtime.NavigationMesh_clear_polygons(NavigationMesh{self})
}
func (self methodsNavigationMesh) CreateFromMesh(mesh Mesh) {
	self.Runtime.NavigationMesh_create_from_mesh(NavigationMesh{self}, mesh)
}
func (self methodsNavigationMesh) Clear() {
	self.Runtime.NavigationMesh_clear(NavigationMesh{self})
}

type methodsNavigationMeshGenerator struct {
	_ [0]*methodsNavigationMeshGenerator
	class
}

func (self NavigationMeshGenerator) Object() Object {
	var parent Object
	parent.class = self.class
	return parent
}
func (self methodsNavigationMeshGenerator) Bake(navigation_mesh NavigationMesh, root_node Node) {
	self.Runtime.NavigationMeshGenerator_bake(NavigationMeshGenerator{self}, navigation_mesh, root_node)
}
func (self methodsNavigationMeshGenerator) Clear(navigation_mesh NavigationMesh) {
	self.Runtime.NavigationMeshGenerator_clear(NavigationMeshGenerator{self}, navigation_mesh)
}
func (self methodsNavigationMeshGenerator) ParseSourceGeometryData(navigation_mesh NavigationMesh, source_geometry_data NavigationMeshSourceGeometryData3D, root_node Node, callback Callable) {
	self.Runtime.NavigationMeshGenerator_parse_source_geometry_data(NavigationMeshGenerator{self}, navigation_mesh, source_geometry_data, root_node, callback)
}
func (self methodsNavigationMeshGenerator) BakeFromSourceGeometryData(navigation_mesh NavigationMesh, source_geometry_data NavigationMeshSourceGeometryData3D, callback Callable) {
	self.Runtime.NavigationMeshGenerator_bake_from_source_geometry_data(NavigationMeshGenerator{self}, navigation_mesh, source_geometry_data, callback)
}

type methodsNavigationMeshSourceGeometryData2D struct {
	_ [0]*methodsNavigationMeshSourceGeometryData2D
	class
}

func (self NavigationMeshSourceGeometryData2D) Resource() Resource {
	var parent Resource
	parent.class = self.class
	return parent
}
func (self methodsNavigationMeshSourceGeometryData2D) Clear() {
	self.Runtime.NavigationMeshSourceGeometryData2D_clear(NavigationMeshSourceGeometryData2D{self})
}
func (self methodsNavigationMeshSourceGeometryData2D) HasData() bool {
	return self.Runtime.NavigationMeshSourceGeometryData2D_has_data(NavigationMeshSourceGeometryData2D{self})
}
func (self methodsNavigationMeshSourceGeometryData2D) SetTraversableOutlines(traversable_outlines ArrayOf[PackedVector2Array]) {
	self.Runtime.NavigationMeshSourceGeometryData2D_set_traversable_outlines(NavigationMeshSourceGeometryData2D{self}, traversable_outlines)
}
func (self methodsNavigationMeshSourceGeometryData2D) GetTraversableOutlines() ArrayOf[PackedVector2Array] {
	return self.Runtime.NavigationMeshSourceGeometryData2D_get_traversable_outlines(NavigationMeshSourceGeometryData2D{self})
}
func (self methodsNavigationMeshSourceGeometryData2D) SetObstructionOutlines(obstruction_outlines ArrayOf[PackedVector2Array]) {
	self.Runtime.NavigationMeshSourceGeometryData2D_set_obstruction_outlines(NavigationMeshSourceGeometryData2D{self}, obstruction_outlines)
}
func (self methodsNavigationMeshSourceGeometryData2D) GetObstructionOutlines() ArrayOf[PackedVector2Array] {
	return self.Runtime.NavigationMeshSourceGeometryData2D_get_obstruction_outlines(NavigationMeshSourceGeometryData2D{self})
}
func (self methodsNavigationMeshSourceGeometryData2D) AddTraversableOutline(shape_outline PackedVector2Array) {
	self.Runtime.NavigationMeshSourceGeometryData2D_add_traversable_outline(NavigationMeshSourceGeometryData2D{self}, shape_outline)
}
func (self methodsNavigationMeshSourceGeometryData2D) AddObstructionOutline(shape_outline PackedVector2Array) {
	self.Runtime.NavigationMeshSourceGeometryData2D_add_obstruction_outline(NavigationMeshSourceGeometryData2D{self}, shape_outline)
}

type methodsNavigationMeshSourceGeometryData3D struct {
	_ [0]*methodsNavigationMeshSourceGeometryData3D
	class
}

func (self NavigationMeshSourceGeometryData3D) Resource() Resource {
	var parent Resource
	parent.class = self.class
	return parent
}
func (self methodsNavigationMeshSourceGeometryData3D) SetVertices(vertices PackedFloat32Array) {
	self.Runtime.NavigationMeshSourceGeometryData3D_set_vertices(NavigationMeshSourceGeometryData3D{self}, vertices)
}
func (self methodsNavigationMeshSourceGeometryData3D) GetVertices() PackedFloat32Array {
	return self.Runtime.NavigationMeshSourceGeometryData3D_get_vertices(NavigationMeshSourceGeometryData3D{self})
}
func (self methodsNavigationMeshSourceGeometryData3D) SetIndices(indices PackedInt32Array) {
	self.Runtime.NavigationMeshSourceGeometryData3D_set_indices(NavigationMeshSourceGeometryData3D{self}, indices)
}
func (self methodsNavigationMeshSourceGeometryData3D) GetIndices() PackedInt32Array {
	return self.Runtime.NavigationMeshSourceGeometryData3D_get_indices(NavigationMeshSourceGeometryData3D{self})
}
func (self methodsNavigationMeshSourceGeometryData3D) Clear() {
	self.Runtime.NavigationMeshSourceGeometryData3D_clear(NavigationMeshSourceGeometryData3D{self})
}
func (self methodsNavigationMeshSourceGeometryData3D) HasData() bool {
	return self.Runtime.NavigationMeshSourceGeometryData3D_has_data(NavigationMeshSourceGeometryData3D{self})
}
func (self methodsNavigationMeshSourceGeometryData3D) AddMesh(mesh Mesh, xform Transform3D) {
	self.Runtime.NavigationMeshSourceGeometryData3D_add_mesh(NavigationMeshSourceGeometryData3D{self}, mesh, xform)
}
func (self methodsNavigationMeshSourceGeometryData3D) AddMeshArray(mesh_array Array, xform Transform3D) {
	self.Runtime.NavigationMeshSourceGeometryData3D_add_mesh_array(NavigationMeshSourceGeometryData3D{self}, mesh_array, xform)
}
func (self methodsNavigationMeshSourceGeometryData3D) AddFaces(faces PackedVector3Array, xform Transform3D) {
	self.Runtime.NavigationMeshSourceGeometryData3D_add_faces(NavigationMeshSourceGeometryData3D{self}, faces, xform)
}

type methodsNavigationObstacle2D struct {
	_ [0]*methodsNavigationObstacle2D
	class
}

func (self NavigationObstacle2D) Node2D() Node2D {
	var parent Node2D
	parent.class = self.class
	return parent
}
func (self methodsNavigationObstacle2D) GetRid() RID {
	return self.Runtime.NavigationObstacle2D_get_rid(NavigationObstacle2D{self})
}
func (self methodsNavigationObstacle2D) SetAvoidanceEnabled(enabled bool) {
	self.Runtime.NavigationObstacle2D_set_avoidance_enabled(NavigationObstacle2D{self}, enabled)
}
func (self methodsNavigationObstacle2D) GetAvoidanceEnabled() bool {
	return self.Runtime.NavigationObstacle2D_get_avoidance_enabled(NavigationObstacle2D{self})
}
func (self methodsNavigationObstacle2D) SetNavigationMap(navigation_map RID) {
	self.Runtime.NavigationObstacle2D_set_navigation_map(NavigationObstacle2D{self}, navigation_map)
}
func (self methodsNavigationObstacle2D) GetNavigationMap() RID {
	return self.Runtime.NavigationObstacle2D_get_navigation_map(NavigationObstacle2D{self})
}
func (self methodsNavigationObstacle2D) SetRadius(radius Float) {
	self.Runtime.NavigationObstacle2D_set_radius(NavigationObstacle2D{self}, radius)
}
func (self methodsNavigationObstacle2D) GetRadius() Float {
	return self.Runtime.NavigationObstacle2D_get_radius(NavigationObstacle2D{self})
}
func (self methodsNavigationObstacle2D) SetVelocity(velocity Vector2) {
	self.Runtime.NavigationObstacle2D_set_velocity(NavigationObstacle2D{self}, velocity)
}
func (self methodsNavigationObstacle2D) GetVelocity() Vector2 {
	return self.Runtime.NavigationObstacle2D_get_velocity(NavigationObstacle2D{self})
}
func (self methodsNavigationObstacle2D) SetVertices(vertices PackedVector2Array) {
	self.Runtime.NavigationObstacle2D_set_vertices(NavigationObstacle2D{self}, vertices)
}
func (self methodsNavigationObstacle2D) GetVertices() PackedVector2Array {
	return self.Runtime.NavigationObstacle2D_get_vertices(NavigationObstacle2D{self})
}
func (self methodsNavigationObstacle2D) SetAvoidanceLayers(layers int64) {
	self.Runtime.NavigationObstacle2D_set_avoidance_layers(NavigationObstacle2D{self}, layers)
}
func (self methodsNavigationObstacle2D) GetAvoidanceLayers() int64 {
	return self.Runtime.NavigationObstacle2D_get_avoidance_layers(NavigationObstacle2D{self})
}
func (self methodsNavigationObstacle2D) SetAvoidanceLayerValue(layer_number int64, value bool) {
	self.Runtime.NavigationObstacle2D_set_avoidance_layer_value(NavigationObstacle2D{self}, layer_number, value)
}
func (self methodsNavigationObstacle2D) GetAvoidanceLayerValue(layer_number int64) bool {
	return self.Runtime.NavigationObstacle2D_get_avoidance_layer_value(NavigationObstacle2D{self}, layer_number)
}

type methodsNavigationObstacle3D struct {
	_ [0]*methodsNavigationObstacle3D
	class
}

func (self NavigationObstacle3D) Node3D() Node3D {
	var parent Node3D
	parent.class = self.class
	return parent
}
func (self methodsNavigationObstacle3D) GetRid() RID {
	return self.Runtime.NavigationObstacle3D_get_rid(NavigationObstacle3D{self})
}
func (self methodsNavigationObstacle3D) SetAvoidanceEnabled(enabled bool) {
	self.Runtime.NavigationObstacle3D_set_avoidance_enabled(NavigationObstacle3D{self}, enabled)
}
func (self methodsNavigationObstacle3D) GetAvoidanceEnabled() bool {
	return self.Runtime.NavigationObstacle3D_get_avoidance_enabled(NavigationObstacle3D{self})
}
func (self methodsNavigationObstacle3D) SetNavigationMap(navigation_map RID) {
	self.Runtime.NavigationObstacle3D_set_navigation_map(NavigationObstacle3D{self}, navigation_map)
}
func (self methodsNavigationObstacle3D) GetNavigationMap() RID {
	return self.Runtime.NavigationObstacle3D_get_navigation_map(NavigationObstacle3D{self})
}
func (self methodsNavigationObstacle3D) SetRadius(radius Float) {
	self.Runtime.NavigationObstacle3D_set_radius(NavigationObstacle3D{self}, radius)
}
func (self methodsNavigationObstacle3D) GetRadius() Float {
	return self.Runtime.NavigationObstacle3D_get_radius(NavigationObstacle3D{self})
}
func (self methodsNavigationObstacle3D) SetHeight(height Float) {
	self.Runtime.NavigationObstacle3D_set_height(NavigationObstacle3D{self}, height)
}
func (self methodsNavigationObstacle3D) GetHeight() Float {
	return self.Runtime.NavigationObstacle3D_get_height(NavigationObstacle3D{self})
}
func (self methodsNavigationObstacle3D) SetVelocity(velocity Vector3) {
	self.Runtime.NavigationObstacle3D_set_velocity(NavigationObstacle3D{self}, velocity)
}
func (self methodsNavigationObstacle3D) GetVelocity() Vector3 {
	return self.Runtime.NavigationObstacle3D_get_velocity(NavigationObstacle3D{self})
}
func (self methodsNavigationObstacle3D) SetVertices(vertices PackedVector3Array) {
	self.Runtime.NavigationObstacle3D_set_vertices(NavigationObstacle3D{self}, vertices)
}
func (self methodsNavigationObstacle3D) GetVertices() PackedVector3Array {
	return self.Runtime.NavigationObstacle3D_get_vertices(NavigationObstacle3D{self})
}
func (self methodsNavigationObstacle3D) SetAvoidanceLayers(layers int64) {
	self.Runtime.NavigationObstacle3D_set_avoidance_layers(NavigationObstacle3D{self}, layers)
}
func (self methodsNavigationObstacle3D) GetAvoidanceLayers() int64 {
	return self.Runtime.NavigationObstacle3D_get_avoidance_layers(NavigationObstacle3D{self})
}
func (self methodsNavigationObstacle3D) SetAvoidanceLayerValue(layer_number int64, value bool) {
	self.Runtime.NavigationObstacle3D_set_avoidance_layer_value(NavigationObstacle3D{self}, layer_number, value)
}
func (self methodsNavigationObstacle3D) GetAvoidanceLayerValue(layer_number int64) bool {
	return self.Runtime.NavigationObstacle3D_get_avoidance_layer_value(NavigationObstacle3D{self}, layer_number)
}
func (self methodsNavigationObstacle3D) SetUse3dAvoidance(enabled bool) {
	self.Runtime.NavigationObstacle3D_set_use_3d_avoidance(NavigationObstacle3D{self}, enabled)
}
func (self methodsNavigationObstacle3D) GetUse3dAvoidance() bool {
	return self.Runtime.NavigationObstacle3D_get_use_3d_avoidance(NavigationObstacle3D{self})
}

type methodsNavigationPathQueryParameters2D struct {
	_ [0]*methodsNavigationPathQueryParameters2D
	class
}

func (self NavigationPathQueryParameters2D) RefCounted() RefCounted {
	var parent RefCounted
	parent.class = self.class
	return parent
}
func (self methodsNavigationPathQueryParameters2D) SetPathfindingAlgorithm(pathfinding_algorithm NavigationPathQueryParameters2DPathfindingAlgorithm) {
	self.Runtime.NavigationPathQueryParameters2D_set_pathfinding_algorithm(NavigationPathQueryParameters2D{self}, pathfinding_algorithm)
}
func (self methodsNavigationPathQueryParameters2D) GetPathfindingAlgorithm() NavigationPathQueryParameters2DPathfindingAlgorithm {
	return self.Runtime.NavigationPathQueryParameters2D_get_pathfinding_algorithm(NavigationPathQueryParameters2D{self})
}
func (self methodsNavigationPathQueryParameters2D) SetPathPostprocessing(path_postprocessing NavigationPathQueryParameters2DPathPostProcessing) {
	self.Runtime.NavigationPathQueryParameters2D_set_path_postprocessing(NavigationPathQueryParameters2D{self}, path_postprocessing)
}
func (self methodsNavigationPathQueryParameters2D) GetPathPostprocessing() NavigationPathQueryParameters2DPathPostProcessing {
	return self.Runtime.NavigationPathQueryParameters2D_get_path_postprocessing(NavigationPathQueryParameters2D{self})
}
func (self methodsNavigationPathQueryParameters2D) SetMap(mapping RID) {
	self.Runtime.NavigationPathQueryParameters2D_set_map(NavigationPathQueryParameters2D{self}, mapping)
}
func (self methodsNavigationPathQueryParameters2D) GetMap() RID {
	return self.Runtime.NavigationPathQueryParameters2D_get_map(NavigationPathQueryParameters2D{self})
}
func (self methodsNavigationPathQueryParameters2D) SetStartPosition(start_position Vector2) {
	self.Runtime.NavigationPathQueryParameters2D_set_start_position(NavigationPathQueryParameters2D{self}, start_position)
}
func (self methodsNavigationPathQueryParameters2D) GetStartPosition() Vector2 {
	return self.Runtime.NavigationPathQueryParameters2D_get_start_position(NavigationPathQueryParameters2D{self})
}
func (self methodsNavigationPathQueryParameters2D) SetTargetPosition(target_position Vector2) {
	self.Runtime.NavigationPathQueryParameters2D_set_target_position(NavigationPathQueryParameters2D{self}, target_position)
}
func (self methodsNavigationPathQueryParameters2D) GetTargetPosition() Vector2 {
	return self.Runtime.NavigationPathQueryParameters2D_get_target_position(NavigationPathQueryParameters2D{self})
}
func (self methodsNavigationPathQueryParameters2D) SetNavigationLayers(navigation_layers int64) {
	self.Runtime.NavigationPathQueryParameters2D_set_navigation_layers(NavigationPathQueryParameters2D{self}, navigation_layers)
}
func (self methodsNavigationPathQueryParameters2D) GetNavigationLayers() int64 {
	return self.Runtime.NavigationPathQueryParameters2D_get_navigation_layers(NavigationPathQueryParameters2D{self})
}
func (self methodsNavigationPathQueryParameters2D) SetMetadataFlags(flags NavigationPathQueryParameters2DPathMetadataFlags) {
	self.Runtime.NavigationPathQueryParameters2D_set_metadata_flags(NavigationPathQueryParameters2D{self}, flags)
}
func (self methodsNavigationPathQueryParameters2D) GetMetadataFlags() NavigationPathQueryParameters2DPathMetadataFlags {
	return self.Runtime.NavigationPathQueryParameters2D_get_metadata_flags(NavigationPathQueryParameters2D{self})
}

type methodsNavigationPathQueryParameters3D struct {
	_ [0]*methodsNavigationPathQueryParameters3D
	class
}

func (self NavigationPathQueryParameters3D) RefCounted() RefCounted {
	var parent RefCounted
	parent.class = self.class
	return parent
}
func (self methodsNavigationPathQueryParameters3D) SetPathfindingAlgorithm(pathfinding_algorithm NavigationPathQueryParameters3DPathfindingAlgorithm) {
	self.Runtime.NavigationPathQueryParameters3D_set_pathfinding_algorithm(NavigationPathQueryParameters3D{self}, pathfinding_algorithm)
}
func (self methodsNavigationPathQueryParameters3D) GetPathfindingAlgorithm() NavigationPathQueryParameters3DPathfindingAlgorithm {
	return self.Runtime.NavigationPathQueryParameters3D_get_pathfinding_algorithm(NavigationPathQueryParameters3D{self})
}
func (self methodsNavigationPathQueryParameters3D) SetPathPostprocessing(path_postprocessing NavigationPathQueryParameters3DPathPostProcessing) {
	self.Runtime.NavigationPathQueryParameters3D_set_path_postprocessing(NavigationPathQueryParameters3D{self}, path_postprocessing)
}
func (self methodsNavigationPathQueryParameters3D) GetPathPostprocessing() NavigationPathQueryParameters3DPathPostProcessing {
	return self.Runtime.NavigationPathQueryParameters3D_get_path_postprocessing(NavigationPathQueryParameters3D{self})
}
func (self methodsNavigationPathQueryParameters3D) SetMap(mapping RID) {
	self.Runtime.NavigationPathQueryParameters3D_set_map(NavigationPathQueryParameters3D{self}, mapping)
}
func (self methodsNavigationPathQueryParameters3D) GetMap() RID {
	return self.Runtime.NavigationPathQueryParameters3D_get_map(NavigationPathQueryParameters3D{self})
}
func (self methodsNavigationPathQueryParameters3D) SetStartPosition(start_position Vector3) {
	self.Runtime.NavigationPathQueryParameters3D_set_start_position(NavigationPathQueryParameters3D{self}, start_position)
}
func (self methodsNavigationPathQueryParameters3D) GetStartPosition() Vector3 {
	return self.Runtime.NavigationPathQueryParameters3D_get_start_position(NavigationPathQueryParameters3D{self})
}
func (self methodsNavigationPathQueryParameters3D) SetTargetPosition(target_position Vector3) {
	self.Runtime.NavigationPathQueryParameters3D_set_target_position(NavigationPathQueryParameters3D{self}, target_position)
}
func (self methodsNavigationPathQueryParameters3D) GetTargetPosition() Vector3 {
	return self.Runtime.NavigationPathQueryParameters3D_get_target_position(NavigationPathQueryParameters3D{self})
}
func (self methodsNavigationPathQueryParameters3D) SetNavigationLayers(navigation_layers int64) {
	self.Runtime.NavigationPathQueryParameters3D_set_navigation_layers(NavigationPathQueryParameters3D{self}, navigation_layers)
}
func (self methodsNavigationPathQueryParameters3D) GetNavigationLayers() int64 {
	return self.Runtime.NavigationPathQueryParameters3D_get_navigation_layers(NavigationPathQueryParameters3D{self})
}
func (self methodsNavigationPathQueryParameters3D) SetMetadataFlags(flags NavigationPathQueryParameters3DPathMetadataFlags) {
	self.Runtime.NavigationPathQueryParameters3D_set_metadata_flags(NavigationPathQueryParameters3D{self}, flags)
}
func (self methodsNavigationPathQueryParameters3D) GetMetadataFlags() NavigationPathQueryParameters3DPathMetadataFlags {
	return self.Runtime.NavigationPathQueryParameters3D_get_metadata_flags(NavigationPathQueryParameters3D{self})
}

type methodsNavigationPathQueryResult2D struct {
	_ [0]*methodsNavigationPathQueryResult2D
	class
}

func (self NavigationPathQueryResult2D) RefCounted() RefCounted {
	var parent RefCounted
	parent.class = self.class
	return parent
}
func (self methodsNavigationPathQueryResult2D) SetPath(path PackedVector2Array) {
	self.Runtime.NavigationPathQueryResult2D_set_path(NavigationPathQueryResult2D{self}, path)
}
func (self methodsNavigationPathQueryResult2D) GetPath() PackedVector2Array {
	return self.Runtime.NavigationPathQueryResult2D_get_path(NavigationPathQueryResult2D{self})
}
func (self methodsNavigationPathQueryResult2D) SetPathTypes(path_types PackedInt32Array) {
	self.Runtime.NavigationPathQueryResult2D_set_path_types(NavigationPathQueryResult2D{self}, path_types)
}
func (self methodsNavigationPathQueryResult2D) GetPathTypes() PackedInt32Array {
	return self.Runtime.NavigationPathQueryResult2D_get_path_types(NavigationPathQueryResult2D{self})
}
func (self methodsNavigationPathQueryResult2D) SetPathRids(path_rids ArrayOf[RID]) {
	self.Runtime.NavigationPathQueryResult2D_set_path_rids(NavigationPathQueryResult2D{self}, path_rids)
}
func (self methodsNavigationPathQueryResult2D) GetPathRids() ArrayOf[RID] {
	return self.Runtime.NavigationPathQueryResult2D_get_path_rids(NavigationPathQueryResult2D{self})
}
func (self methodsNavigationPathQueryResult2D) SetPathOwnerIds(path_owner_ids PackedInt64Array) {
	self.Runtime.NavigationPathQueryResult2D_set_path_owner_ids(NavigationPathQueryResult2D{self}, path_owner_ids)
}
func (self methodsNavigationPathQueryResult2D) GetPathOwnerIds() PackedInt64Array {
	return self.Runtime.NavigationPathQueryResult2D_get_path_owner_ids(NavigationPathQueryResult2D{self})
}
func (self methodsNavigationPathQueryResult2D) Reset() {
	self.Runtime.NavigationPathQueryResult2D_reset(NavigationPathQueryResult2D{self})
}

type methodsNavigationPathQueryResult3D struct {
	_ [0]*methodsNavigationPathQueryResult3D
	class
}

func (self NavigationPathQueryResult3D) RefCounted() RefCounted {
	var parent RefCounted
	parent.class = self.class
	return parent
}
func (self methodsNavigationPathQueryResult3D) SetPath(path PackedVector3Array) {
	self.Runtime.NavigationPathQueryResult3D_set_path(NavigationPathQueryResult3D{self}, path)
}
func (self methodsNavigationPathQueryResult3D) GetPath() PackedVector3Array {
	return self.Runtime.NavigationPathQueryResult3D_get_path(NavigationPathQueryResult3D{self})
}
func (self methodsNavigationPathQueryResult3D) SetPathTypes(path_types PackedInt32Array) {
	self.Runtime.NavigationPathQueryResult3D_set_path_types(NavigationPathQueryResult3D{self}, path_types)
}
func (self methodsNavigationPathQueryResult3D) GetPathTypes() PackedInt32Array {
	return self.Runtime.NavigationPathQueryResult3D_get_path_types(NavigationPathQueryResult3D{self})
}
func (self methodsNavigationPathQueryResult3D) SetPathRids(path_rids ArrayOf[RID]) {
	self.Runtime.NavigationPathQueryResult3D_set_path_rids(NavigationPathQueryResult3D{self}, path_rids)
}
func (self methodsNavigationPathQueryResult3D) GetPathRids() ArrayOf[RID] {
	return self.Runtime.NavigationPathQueryResult3D_get_path_rids(NavigationPathQueryResult3D{self})
}
func (self methodsNavigationPathQueryResult3D) SetPathOwnerIds(path_owner_ids PackedInt64Array) {
	self.Runtime.NavigationPathQueryResult3D_set_path_owner_ids(NavigationPathQueryResult3D{self}, path_owner_ids)
}
func (self methodsNavigationPathQueryResult3D) GetPathOwnerIds() PackedInt64Array {
	return self.Runtime.NavigationPathQueryResult3D_get_path_owner_ids(NavigationPathQueryResult3D{self})
}
func (self methodsNavigationPathQueryResult3D) Reset() {
	self.Runtime.NavigationPathQueryResult3D_reset(NavigationPathQueryResult3D{self})
}

type methodsNavigationPolygon struct {
	_ [0]*methodsNavigationPolygon
	class
}

func (self NavigationPolygon) Resource() Resource {
	var parent Resource
	parent.class = self.class
	return parent
}
func (self methodsNavigationPolygon) SetVertices(vertices PackedVector2Array) {
	self.Runtime.NavigationPolygon_set_vertices(NavigationPolygon{self}, vertices)
}
func (self methodsNavigationPolygon) GetVertices() PackedVector2Array {
	return self.Runtime.NavigationPolygon_get_vertices(NavigationPolygon{self})
}
func (self methodsNavigationPolygon) AddPolygon(polygon PackedInt32Array) {
	self.Runtime.NavigationPolygon_add_polygon(NavigationPolygon{self}, polygon)
}
func (self methodsNavigationPolygon) GetPolygonCount() int64 {
	return self.Runtime.NavigationPolygon_get_polygon_count(NavigationPolygon{self})
}
func (self methodsNavigationPolygon) GetPolygon(idx int64) PackedInt32Array {
	return self.Runtime.NavigationPolygon_get_polygon(NavigationPolygon{self}, idx)
}
func (self methodsNavigationPolygon) ClearPolygons() {
	self.Runtime.NavigationPolygon_clear_polygons(NavigationPolygon{self})
}
func (self methodsNavigationPolygon) GetNavigationMesh() NavigationMesh {
	return self.Runtime.NavigationPolygon_get_navigation_mesh(NavigationPolygon{self})
}
func (self methodsNavigationPolygon) AddOutline(outline PackedVector2Array) {
	self.Runtime.NavigationPolygon_add_outline(NavigationPolygon{self}, outline)
}
func (self methodsNavigationPolygon) AddOutlineAtIndex(outline PackedVector2Array, index int64) {
	self.Runtime.NavigationPolygon_add_outline_at_index(NavigationPolygon{self}, outline, index)
}
func (self methodsNavigationPolygon) GetOutlineCount() int64 {
	return self.Runtime.NavigationPolygon_get_outline_count(NavigationPolygon{self})
}
func (self methodsNavigationPolygon) SetOutline(idx int64, outline PackedVector2Array) {
	self.Runtime.NavigationPolygon_set_outline(NavigationPolygon{self}, idx, outline)
}
func (self methodsNavigationPolygon) GetOutline(idx int64) PackedVector2Array {
	return self.Runtime.NavigationPolygon_get_outline(NavigationPolygon{self}, idx)
}
func (self methodsNavigationPolygon) RemoveOutline(idx int64) {
	self.Runtime.NavigationPolygon_remove_outline(NavigationPolygon{self}, idx)
}
func (self methodsNavigationPolygon) ClearOutlines() {
	self.Runtime.NavigationPolygon_clear_outlines(NavigationPolygon{self})
}
func (self methodsNavigationPolygon) MakePolygonsFromOutlines() {
	self.Runtime.NavigationPolygon_make_polygons_from_outlines(NavigationPolygon{self})
}
func (self methodsNavigationPolygon) SetCellSize(cell_size Float) {
	self.Runtime.NavigationPolygon_set_cell_size(NavigationPolygon{self}, cell_size)
}
func (self methodsNavigationPolygon) GetCellSize() Float {
	return self.Runtime.NavigationPolygon_get_cell_size(NavigationPolygon{self})
}
func (self methodsNavigationPolygon) SetParsedGeometryType(geometry_type NavigationPolygonParsedGeometryType) {
	self.Runtime.NavigationPolygon_set_parsed_geometry_type(NavigationPolygon{self}, geometry_type)
}
func (self methodsNavigationPolygon) GetParsedGeometryType() NavigationPolygonParsedGeometryType {
	return self.Runtime.NavigationPolygon_get_parsed_geometry_type(NavigationPolygon{self})
}
func (self methodsNavigationPolygon) SetParsedCollisionMask(mask int64) {
	self.Runtime.NavigationPolygon_set_parsed_collision_mask(NavigationPolygon{self}, mask)
}
func (self methodsNavigationPolygon) GetParsedCollisionMask() int64 {
	return self.Runtime.NavigationPolygon_get_parsed_collision_mask(NavigationPolygon{self})
}
func (self methodsNavigationPolygon) SetParsedCollisionMaskValue(layer_number int64, value bool) {
	self.Runtime.NavigationPolygon_set_parsed_collision_mask_value(NavigationPolygon{self}, layer_number, value)
}
func (self methodsNavigationPolygon) GetParsedCollisionMaskValue(layer_number int64) bool {
	return self.Runtime.NavigationPolygon_get_parsed_collision_mask_value(NavigationPolygon{self}, layer_number)
}
func (self methodsNavigationPolygon) SetSourceGeometryMode(geometry_mode NavigationPolygonSourceGeometryMode) {
	self.Runtime.NavigationPolygon_set_source_geometry_mode(NavigationPolygon{self}, geometry_mode)
}
func (self methodsNavigationPolygon) GetSourceGeometryMode() NavigationPolygonSourceGeometryMode {
	return self.Runtime.NavigationPolygon_get_source_geometry_mode(NavigationPolygon{self})
}
func (self methodsNavigationPolygon) SetSourceGeometryGroupName(group_name string) {
	self.Runtime.NavigationPolygon_set_source_geometry_group_name(NavigationPolygon{self}, group_name)
}
func (self methodsNavigationPolygon) GetSourceGeometryGroupName() string {
	return self.Runtime.NavigationPolygon_get_source_geometry_group_name(NavigationPolygon{self})
}
func (self methodsNavigationPolygon) SetAgentRadius(agent_radius Float) {
	self.Runtime.NavigationPolygon_set_agent_radius(NavigationPolygon{self}, agent_radius)
}
func (self methodsNavigationPolygon) GetAgentRadius() Float {
	return self.Runtime.NavigationPolygon_get_agent_radius(NavigationPolygon{self})
}
func (self methodsNavigationPolygon) Clear() {
	self.Runtime.NavigationPolygon_clear(NavigationPolygon{self})
}

type methodsNavigationRegion2D struct {
	_ [0]*methodsNavigationRegion2D
	class
}

func (self NavigationRegion2D) Node2D() Node2D {
	var parent Node2D
	parent.class = self.class
	return parent
}
func (self methodsNavigationRegion2D) GetRid() RID {
	return self.Runtime.NavigationRegion2D_get_rid(NavigationRegion2D{self})
}
func (self methodsNavigationRegion2D) SetNavigationPolygon(navigation_polygon NavigationPolygon) {
	self.Runtime.NavigationRegion2D_set_navigation_polygon(NavigationRegion2D{self}, navigation_polygon)
}
func (self methodsNavigationRegion2D) GetNavigationPolygon() NavigationPolygon {
	return self.Runtime.NavigationRegion2D_get_navigation_polygon(NavigationRegion2D{self})
}
func (self methodsNavigationRegion2D) SetEnabled(enabled bool) {
	self.Runtime.NavigationRegion2D_set_enabled(NavigationRegion2D{self}, enabled)
}
func (self methodsNavigationRegion2D) IsEnabled() bool {
	return self.Runtime.NavigationRegion2D_is_enabled(NavigationRegion2D{self})
}
func (self methodsNavigationRegion2D) SetNavigationMap(navigation_map RID) {
	self.Runtime.NavigationRegion2D_set_navigation_map(NavigationRegion2D{self}, navigation_map)
}
func (self methodsNavigationRegion2D) GetNavigationMap() RID {
	return self.Runtime.NavigationRegion2D_get_navigation_map(NavigationRegion2D{self})
}
func (self methodsNavigationRegion2D) SetUseEdgeConnections(enabled bool) {
	self.Runtime.NavigationRegion2D_set_use_edge_connections(NavigationRegion2D{self}, enabled)
}
func (self methodsNavigationRegion2D) GetUseEdgeConnections() bool {
	return self.Runtime.NavigationRegion2D_get_use_edge_connections(NavigationRegion2D{self})
}
func (self methodsNavigationRegion2D) SetNavigationLayers(navigation_layers int64) {
	self.Runtime.NavigationRegion2D_set_navigation_layers(NavigationRegion2D{self}, navigation_layers)
}
func (self methodsNavigationRegion2D) GetNavigationLayers() int64 {
	return self.Runtime.NavigationRegion2D_get_navigation_layers(NavigationRegion2D{self})
}
func (self methodsNavigationRegion2D) SetNavigationLayerValue(layer_number int64, value bool) {
	self.Runtime.NavigationRegion2D_set_navigation_layer_value(NavigationRegion2D{self}, layer_number, value)
}
func (self methodsNavigationRegion2D) GetNavigationLayerValue(layer_number int64) bool {
	return self.Runtime.NavigationRegion2D_get_navigation_layer_value(NavigationRegion2D{self}, layer_number)
}
func (self methodsNavigationRegion2D) SetConstrainAvoidance(enabled bool) {
	self.Runtime.NavigationRegion2D_set_constrain_avoidance(NavigationRegion2D{self}, enabled)
}
func (self methodsNavigationRegion2D) GetConstrainAvoidance() bool {
	return self.Runtime.NavigationRegion2D_get_constrain_avoidance(NavigationRegion2D{self})
}
func (self methodsNavigationRegion2D) SetAvoidanceLayers(layers int64) {
	self.Runtime.NavigationRegion2D_set_avoidance_layers(NavigationRegion2D{self}, layers)
}
func (self methodsNavigationRegion2D) GetAvoidanceLayers() int64 {
	return self.Runtime.NavigationRegion2D_get_avoidance_layers(NavigationRegion2D{self})
}
func (self methodsNavigationRegion2D) SetAvoidanceLayerValue(layer_number int64, value bool) {
	self.Runtime.NavigationRegion2D_set_avoidance_layer_value(NavigationRegion2D{self}, layer_number, value)
}
func (self methodsNavigationRegion2D) GetAvoidanceLayerValue(layer_number int64) bool {
	return self.Runtime.NavigationRegion2D_get_avoidance_layer_value(NavigationRegion2D{self}, layer_number)
}
func (self methodsNavigationRegion2D) GetRegionRid() RID {
	return self.Runtime.NavigationRegion2D_get_region_rid(NavigationRegion2D{self})
}
func (self methodsNavigationRegion2D) SetEnterCost(enter_cost Float) {
	self.Runtime.NavigationRegion2D_set_enter_cost(NavigationRegion2D{self}, enter_cost)
}
func (self methodsNavigationRegion2D) GetEnterCost() Float {
	return self.Runtime.NavigationRegion2D_get_enter_cost(NavigationRegion2D{self})
}
func (self methodsNavigationRegion2D) SetTravelCost(travel_cost Float) {
	self.Runtime.NavigationRegion2D_set_travel_cost(NavigationRegion2D{self}, travel_cost)
}
func (self methodsNavigationRegion2D) GetTravelCost() Float {
	return self.Runtime.NavigationRegion2D_get_travel_cost(NavigationRegion2D{self})
}
func (self methodsNavigationRegion2D) BakeNavigationPolygon(on_thread bool) {
	self.Runtime.NavigationRegion2D_bake_navigation_polygon(NavigationRegion2D{self}, on_thread)
}

type methodsNavigationRegion3D struct {
	_ [0]*methodsNavigationRegion3D
	class
}

func (self NavigationRegion3D) Node3D() Node3D {
	var parent Node3D
	parent.class = self.class
	return parent
}
func (self methodsNavigationRegion3D) GetRid() RID {
	return self.Runtime.NavigationRegion3D_get_rid(NavigationRegion3D{self})
}
func (self methodsNavigationRegion3D) SetNavigationMesh(navigation_mesh NavigationMesh) {
	self.Runtime.NavigationRegion3D_set_navigation_mesh(NavigationRegion3D{self}, navigation_mesh)
}
func (self methodsNavigationRegion3D) GetNavigationMesh() NavigationMesh {
	return self.Runtime.NavigationRegion3D_get_navigation_mesh(NavigationRegion3D{self})
}
func (self methodsNavigationRegion3D) SetEnabled(enabled bool) {
	self.Runtime.NavigationRegion3D_set_enabled(NavigationRegion3D{self}, enabled)
}
func (self methodsNavigationRegion3D) IsEnabled() bool {
	return self.Runtime.NavigationRegion3D_is_enabled(NavigationRegion3D{self})
}
func (self methodsNavigationRegion3D) SetNavigationMap(navigation_map RID) {
	self.Runtime.NavigationRegion3D_set_navigation_map(NavigationRegion3D{self}, navigation_map)
}
func (self methodsNavigationRegion3D) GetNavigationMap() RID {
	return self.Runtime.NavigationRegion3D_get_navigation_map(NavigationRegion3D{self})
}
func (self methodsNavigationRegion3D) SetUseEdgeConnections(enabled bool) {
	self.Runtime.NavigationRegion3D_set_use_edge_connections(NavigationRegion3D{self}, enabled)
}
func (self methodsNavigationRegion3D) GetUseEdgeConnections() bool {
	return self.Runtime.NavigationRegion3D_get_use_edge_connections(NavigationRegion3D{self})
}
func (self methodsNavigationRegion3D) SetNavigationLayers(navigation_layers int64) {
	self.Runtime.NavigationRegion3D_set_navigation_layers(NavigationRegion3D{self}, navigation_layers)
}
func (self methodsNavigationRegion3D) GetNavigationLayers() int64 {
	return self.Runtime.NavigationRegion3D_get_navigation_layers(NavigationRegion3D{self})
}
func (self methodsNavigationRegion3D) SetNavigationLayerValue(layer_number int64, value bool) {
	self.Runtime.NavigationRegion3D_set_navigation_layer_value(NavigationRegion3D{self}, layer_number, value)
}
func (self methodsNavigationRegion3D) GetNavigationLayerValue(layer_number int64) bool {
	return self.Runtime.NavigationRegion3D_get_navigation_layer_value(NavigationRegion3D{self}, layer_number)
}
func (self methodsNavigationRegion3D) GetRegionRid() RID {
	return self.Runtime.NavigationRegion3D_get_region_rid(NavigationRegion3D{self})
}
func (self methodsNavigationRegion3D) SetEnterCost(enter_cost Float) {
	self.Runtime.NavigationRegion3D_set_enter_cost(NavigationRegion3D{self}, enter_cost)
}
func (self methodsNavigationRegion3D) GetEnterCost() Float {
	return self.Runtime.NavigationRegion3D_get_enter_cost(NavigationRegion3D{self})
}
func (self methodsNavigationRegion3D) SetTravelCost(travel_cost Float) {
	self.Runtime.NavigationRegion3D_set_travel_cost(NavigationRegion3D{self}, travel_cost)
}
func (self methodsNavigationRegion3D) GetTravelCost() Float {
	return self.Runtime.NavigationRegion3D_get_travel_cost(NavigationRegion3D{self})
}
func (self methodsNavigationRegion3D) BakeNavigationMesh(on_thread bool) {
	self.Runtime.NavigationRegion3D_bake_navigation_mesh(NavigationRegion3D{self}, on_thread)
}

type methodsNavigationServer2D struct {
	_ [0]*methodsNavigationServer2D
	class
}

func (self NavigationServer2D) Object() Object {
	var parent Object
	parent.class = self.class
	return parent
}
func (self methodsNavigationServer2D) GetMaps() ArrayOf[RID] {
	return self.Runtime.NavigationServer2D_get_maps(NavigationServer2D{self})
}
func (self methodsNavigationServer2D) MapCreate() RID {
	return self.Runtime.NavigationServer2D_map_create(NavigationServer2D{self})
}
func (self methodsNavigationServer2D) MapSetActive(mapping RID, active bool) {
	self.Runtime.NavigationServer2D_map_set_active(NavigationServer2D{self}, mapping, active)
}
func (self methodsNavigationServer2D) MapIsActive(mapping RID) bool {
	return self.Runtime.NavigationServer2D_map_is_active(NavigationServer2D{self}, mapping)
}
func (self methodsNavigationServer2D) MapSetCellSize(mapping RID, cell_size Float) {
	self.Runtime.NavigationServer2D_map_set_cell_size(NavigationServer2D{self}, mapping, cell_size)
}
func (self methodsNavigationServer2D) MapGetCellSize(mapping RID) Float {
	return self.Runtime.NavigationServer2D_map_get_cell_size(NavigationServer2D{self}, mapping)
}
func (self methodsNavigationServer2D) MapSetUseEdgeConnections(mapping RID, enabled bool) {
	self.Runtime.NavigationServer2D_map_set_use_edge_connections(NavigationServer2D{self}, mapping, enabled)
}
func (self methodsNavigationServer2D) MapGetUseEdgeConnections(mapping RID) bool {
	return self.Runtime.NavigationServer2D_map_get_use_edge_connections(NavigationServer2D{self}, mapping)
}
func (self methodsNavigationServer2D) MapSetEdgeConnectionMargin(mapping RID, margin Float) {
	self.Runtime.NavigationServer2D_map_set_edge_connection_margin(NavigationServer2D{self}, mapping, margin)
}
func (self methodsNavigationServer2D) MapGetEdgeConnectionMargin(mapping RID) Float {
	return self.Runtime.NavigationServer2D_map_get_edge_connection_margin(NavigationServer2D{self}, mapping)
}
func (self methodsNavigationServer2D) MapSetLinkConnectionRadius(mapping RID, radius Float) {
	self.Runtime.NavigationServer2D_map_set_link_connection_radius(NavigationServer2D{self}, mapping, radius)
}
func (self methodsNavigationServer2D) MapGetLinkConnectionRadius(mapping RID) Float {
	return self.Runtime.NavigationServer2D_map_get_link_connection_radius(NavigationServer2D{self}, mapping)
}
func (self methodsNavigationServer2D) MapGetPath(mapping RID, origin Vector2, destination Vector2, optimize bool, navigation_layers int64) PackedVector2Array {
	return self.Runtime.NavigationServer2D_map_get_path(NavigationServer2D{self}, mapping, origin, destination, optimize, navigation_layers)
}
func (self methodsNavigationServer2D) MapGetClosestPoint(mapping RID, to_point Vector2) Vector2 {
	return self.Runtime.NavigationServer2D_map_get_closest_point(NavigationServer2D{self}, mapping, to_point)
}
func (self methodsNavigationServer2D) MapGetClosestPointOwner(mapping RID, to_point Vector2) RID {
	return self.Runtime.NavigationServer2D_map_get_closest_point_owner(NavigationServer2D{self}, mapping, to_point)
}
func (self methodsNavigationServer2D) MapGetLinks(mapping RID) ArrayOf[RID] {
	return self.Runtime.NavigationServer2D_map_get_links(NavigationServer2D{self}, mapping)
}
func (self methodsNavigationServer2D) MapGetRegions(mapping RID) ArrayOf[RID] {
	return self.Runtime.NavigationServer2D_map_get_regions(NavigationServer2D{self}, mapping)
}
func (self methodsNavigationServer2D) MapGetAgents(mapping RID) ArrayOf[RID] {
	return self.Runtime.NavigationServer2D_map_get_agents(NavigationServer2D{self}, mapping)
}
func (self methodsNavigationServer2D) MapGetObstacles(mapping RID) ArrayOf[RID] {
	return self.Runtime.NavigationServer2D_map_get_obstacles(NavigationServer2D{self}, mapping)
}
func (self methodsNavigationServer2D) MapForceUpdate(mapping RID) {
	self.Runtime.NavigationServer2D_map_force_update(NavigationServer2D{self}, mapping)
}
func (self methodsNavigationServer2D) MapGetRandomPoint(mapping RID, navigation_layers int64, uniformly bool) Vector2 {
	return self.Runtime.NavigationServer2D_map_get_random_point(NavigationServer2D{self}, mapping, navigation_layers, uniformly)
}
func (self methodsNavigationServer2D) QueryPath(parameters NavigationPathQueryParameters2D, result NavigationPathQueryResult2D) {
	self.Runtime.NavigationServer2D_query_path(NavigationServer2D{self}, parameters, result)
}
func (self methodsNavigationServer2D) RegionCreate() RID {
	return self.Runtime.NavigationServer2D_region_create(NavigationServer2D{self})
}
func (self methodsNavigationServer2D) RegionSetEnabled(region RID, enabled bool) {
	self.Runtime.NavigationServer2D_region_set_enabled(NavigationServer2D{self}, region, enabled)
}
func (self methodsNavigationServer2D) RegionGetEnabled(region RID) bool {
	return self.Runtime.NavigationServer2D_region_get_enabled(NavigationServer2D{self}, region)
}
func (self methodsNavigationServer2D) RegionSetUseEdgeConnections(region RID, enabled bool) {
	self.Runtime.NavigationServer2D_region_set_use_edge_connections(NavigationServer2D{self}, region, enabled)
}
func (self methodsNavigationServer2D) RegionGetUseEdgeConnections(region RID) bool {
	return self.Runtime.NavigationServer2D_region_get_use_edge_connections(NavigationServer2D{self}, region)
}
func (self methodsNavigationServer2D) RegionSetEnterCost(region RID, enter_cost Float) {
	self.Runtime.NavigationServer2D_region_set_enter_cost(NavigationServer2D{self}, region, enter_cost)
}
func (self methodsNavigationServer2D) RegionGetEnterCost(region RID) Float {
	return self.Runtime.NavigationServer2D_region_get_enter_cost(NavigationServer2D{self}, region)
}
func (self methodsNavigationServer2D) RegionSetTravelCost(region RID, travel_cost Float) {
	self.Runtime.NavigationServer2D_region_set_travel_cost(NavigationServer2D{self}, region, travel_cost)
}
func (self methodsNavigationServer2D) RegionGetTravelCost(region RID) Float {
	return self.Runtime.NavigationServer2D_region_get_travel_cost(NavigationServer2D{self}, region)
}
func (self methodsNavigationServer2D) RegionSetOwnerId(region RID, owner_id int64) {
	self.Runtime.NavigationServer2D_region_set_owner_id(NavigationServer2D{self}, region, owner_id)
}
func (self methodsNavigationServer2D) RegionGetOwnerId(region RID) int64 {
	return self.Runtime.NavigationServer2D_region_get_owner_id(NavigationServer2D{self}, region)
}
func (self methodsNavigationServer2D) RegionOwnsPoint(region RID, point Vector2) bool {
	return self.Runtime.NavigationServer2D_region_owns_point(NavigationServer2D{self}, region, point)
}
func (self methodsNavigationServer2D) RegionSetMap(region RID, mapping RID) {
	self.Runtime.NavigationServer2D_region_set_map(NavigationServer2D{self}, region, mapping)
}
func (self methodsNavigationServer2D) RegionGetMap(region RID) RID {
	return self.Runtime.NavigationServer2D_region_get_map(NavigationServer2D{self}, region)
}
func (self methodsNavigationServer2D) RegionSetNavigationLayers(region RID, navigation_layers int64) {
	self.Runtime.NavigationServer2D_region_set_navigation_layers(NavigationServer2D{self}, region, navigation_layers)
}
func (self methodsNavigationServer2D) RegionGetNavigationLayers(region RID) int64 {
	return self.Runtime.NavigationServer2D_region_get_navigation_layers(NavigationServer2D{self}, region)
}
func (self methodsNavigationServer2D) RegionSetTransform(region RID, transform Transform2D) {
	self.Runtime.NavigationServer2D_region_set_transform(NavigationServer2D{self}, region, transform)
}
func (self methodsNavigationServer2D) RegionGetTransform(region RID) Transform2D {
	return self.Runtime.NavigationServer2D_region_get_transform(NavigationServer2D{self}, region)
}
func (self methodsNavigationServer2D) RegionSetNavigationPolygon(region RID, navigation_polygon NavigationPolygon) {
	self.Runtime.NavigationServer2D_region_set_navigation_polygon(NavigationServer2D{self}, region, navigation_polygon)
}
func (self methodsNavigationServer2D) RegionGetConnectionsCount(region RID) int64 {
	return self.Runtime.NavigationServer2D_region_get_connections_count(NavigationServer2D{self}, region)
}
func (self methodsNavigationServer2D) RegionGetConnectionPathwayStart(region RID, connection int64) Vector2 {
	return self.Runtime.NavigationServer2D_region_get_connection_pathway_start(NavigationServer2D{self}, region, connection)
}
func (self methodsNavigationServer2D) RegionGetConnectionPathwayEnd(region RID, connection int64) Vector2 {
	return self.Runtime.NavigationServer2D_region_get_connection_pathway_end(NavigationServer2D{self}, region, connection)
}
func (self methodsNavigationServer2D) RegionGetRandomPoint(region RID, navigation_layers int64, uniformly bool) Vector2 {
	return self.Runtime.NavigationServer2D_region_get_random_point(NavigationServer2D{self}, region, navigation_layers, uniformly)
}
func (self methodsNavigationServer2D) LinkCreate() RID {
	return self.Runtime.NavigationServer2D_link_create(NavigationServer2D{self})
}
func (self methodsNavigationServer2D) LinkSetMap(link RID, mapping RID) {
	self.Runtime.NavigationServer2D_link_set_map(NavigationServer2D{self}, link, mapping)
}
func (self methodsNavigationServer2D) LinkGetMap(link RID) RID {
	return self.Runtime.NavigationServer2D_link_get_map(NavigationServer2D{self}, link)
}
func (self methodsNavigationServer2D) LinkSetEnabled(link RID, enabled bool) {
	self.Runtime.NavigationServer2D_link_set_enabled(NavigationServer2D{self}, link, enabled)
}
func (self methodsNavigationServer2D) LinkGetEnabled(link RID) bool {
	return self.Runtime.NavigationServer2D_link_get_enabled(NavigationServer2D{self}, link)
}
func (self methodsNavigationServer2D) LinkSetBidirectional(link RID, bidirectional bool) {
	self.Runtime.NavigationServer2D_link_set_bidirectional(NavigationServer2D{self}, link, bidirectional)
}
func (self methodsNavigationServer2D) LinkIsBidirectional(link RID) bool {
	return self.Runtime.NavigationServer2D_link_is_bidirectional(NavigationServer2D{self}, link)
}
func (self methodsNavigationServer2D) LinkSetNavigationLayers(link RID, navigation_layers int64) {
	self.Runtime.NavigationServer2D_link_set_navigation_layers(NavigationServer2D{self}, link, navigation_layers)
}
func (self methodsNavigationServer2D) LinkGetNavigationLayers(link RID) int64 {
	return self.Runtime.NavigationServer2D_link_get_navigation_layers(NavigationServer2D{self}, link)
}
func (self methodsNavigationServer2D) LinkSetStartPosition(link RID, position Vector2) {
	self.Runtime.NavigationServer2D_link_set_start_position(NavigationServer2D{self}, link, position)
}
func (self methodsNavigationServer2D) LinkGetStartPosition(link RID) Vector2 {
	return self.Runtime.NavigationServer2D_link_get_start_position(NavigationServer2D{self}, link)
}
func (self methodsNavigationServer2D) LinkSetEndPosition(link RID, position Vector2) {
	self.Runtime.NavigationServer2D_link_set_end_position(NavigationServer2D{self}, link, position)
}
func (self methodsNavigationServer2D) LinkGetEndPosition(link RID) Vector2 {
	return self.Runtime.NavigationServer2D_link_get_end_position(NavigationServer2D{self}, link)
}
func (self methodsNavigationServer2D) LinkSetEnterCost(link RID, enter_cost Float) {
	self.Runtime.NavigationServer2D_link_set_enter_cost(NavigationServer2D{self}, link, enter_cost)
}
func (self methodsNavigationServer2D) LinkGetEnterCost(link RID) Float {
	return self.Runtime.NavigationServer2D_link_get_enter_cost(NavigationServer2D{self}, link)
}
func (self methodsNavigationServer2D) LinkSetTravelCost(link RID, travel_cost Float) {
	self.Runtime.NavigationServer2D_link_set_travel_cost(NavigationServer2D{self}, link, travel_cost)
}
func (self methodsNavigationServer2D) LinkGetTravelCost(link RID) Float {
	return self.Runtime.NavigationServer2D_link_get_travel_cost(NavigationServer2D{self}, link)
}
func (self methodsNavigationServer2D) LinkSetOwnerId(link RID, owner_id int64) {
	self.Runtime.NavigationServer2D_link_set_owner_id(NavigationServer2D{self}, link, owner_id)
}
func (self methodsNavigationServer2D) LinkGetOwnerId(link RID) int64 {
	return self.Runtime.NavigationServer2D_link_get_owner_id(NavigationServer2D{self}, link)
}
func (self methodsNavigationServer2D) AgentCreate() RID {
	return self.Runtime.NavigationServer2D_agent_create(NavigationServer2D{self})
}
func (self methodsNavigationServer2D) AgentSetAvoidanceEnabled(agent RID, enabled bool) {
	self.Runtime.NavigationServer2D_agent_set_avoidance_enabled(NavigationServer2D{self}, agent, enabled)
}
func (self methodsNavigationServer2D) AgentGetAvoidanceEnabled(agent RID) bool {
	return self.Runtime.NavigationServer2D_agent_get_avoidance_enabled(NavigationServer2D{self}, agent)
}
func (self methodsNavigationServer2D) AgentSetMap(agent RID, mapping RID) {
	self.Runtime.NavigationServer2D_agent_set_map(NavigationServer2D{self}, agent, mapping)
}
func (self methodsNavigationServer2D) AgentGetMap(agent RID) RID {
	return self.Runtime.NavigationServer2D_agent_get_map(NavigationServer2D{self}, agent)
}
func (self methodsNavigationServer2D) AgentSetPaused(agent RID, paused bool) {
	self.Runtime.NavigationServer2D_agent_set_paused(NavigationServer2D{self}, agent, paused)
}
func (self methodsNavigationServer2D) AgentGetPaused(agent RID) bool {
	return self.Runtime.NavigationServer2D_agent_get_paused(NavigationServer2D{self}, agent)
}
func (self methodsNavigationServer2D) AgentSetNeighborDistance(agent RID, distance Float) {
	self.Runtime.NavigationServer2D_agent_set_neighbor_distance(NavigationServer2D{self}, agent, distance)
}
func (self methodsNavigationServer2D) AgentGetNeighborDistance(agent RID) Float {
	return self.Runtime.NavigationServer2D_agent_get_neighbor_distance(NavigationServer2D{self}, agent)
}
func (self methodsNavigationServer2D) AgentSetMaxNeighbors(agent RID, count int64) {
	self.Runtime.NavigationServer2D_agent_set_max_neighbors(NavigationServer2D{self}, agent, count)
}
func (self methodsNavigationServer2D) AgentGetMaxNeighbors(agent RID) int64 {
	return self.Runtime.NavigationServer2D_agent_get_max_neighbors(NavigationServer2D{self}, agent)
}
func (self methodsNavigationServer2D) AgentSetTimeHorizonAgents(agent RID, time_horizon Float) {
	self.Runtime.NavigationServer2D_agent_set_time_horizon_agents(NavigationServer2D{self}, agent, time_horizon)
}
func (self methodsNavigationServer2D) AgentGetTimeHorizonAgents(agent RID) Float {
	return self.Runtime.NavigationServer2D_agent_get_time_horizon_agents(NavigationServer2D{self}, agent)
}
func (self methodsNavigationServer2D) AgentSetTimeHorizonObstacles(agent RID, time_horizon Float) {
	self.Runtime.NavigationServer2D_agent_set_time_horizon_obstacles(NavigationServer2D{self}, agent, time_horizon)
}
func (self methodsNavigationServer2D) AgentGetTimeHorizonObstacles(agent RID) Float {
	return self.Runtime.NavigationServer2D_agent_get_time_horizon_obstacles(NavigationServer2D{self}, agent)
}
func (self methodsNavigationServer2D) AgentSetRadius(agent RID, radius Float) {
	self.Runtime.NavigationServer2D_agent_set_radius(NavigationServer2D{self}, agent, radius)
}
func (self methodsNavigationServer2D) AgentGetRadius(agent RID) Float {
	return self.Runtime.NavigationServer2D_agent_get_radius(NavigationServer2D{self}, agent)
}
func (self methodsNavigationServer2D) AgentSetMaxSpeed(agent RID, max_speed Float) {
	self.Runtime.NavigationServer2D_agent_set_max_speed(NavigationServer2D{self}, agent, max_speed)
}
func (self methodsNavigationServer2D) AgentGetMaxSpeed(agent RID) Float {
	return self.Runtime.NavigationServer2D_agent_get_max_speed(NavigationServer2D{self}, agent)
}
func (self methodsNavigationServer2D) AgentSetVelocityForced(agent RID, velocity Vector2) {
	self.Runtime.NavigationServer2D_agent_set_velocity_forced(NavigationServer2D{self}, agent, velocity)
}
func (self methodsNavigationServer2D) AgentSetVelocity(agent RID, velocity Vector2) {
	self.Runtime.NavigationServer2D_agent_set_velocity(NavigationServer2D{self}, agent, velocity)
}
func (self methodsNavigationServer2D) AgentGetVelocity(agent RID) Vector2 {
	return self.Runtime.NavigationServer2D_agent_get_velocity(NavigationServer2D{self}, agent)
}
func (self methodsNavigationServer2D) AgentSetPosition(agent RID, position Vector2) {
	self.Runtime.NavigationServer2D_agent_set_position(NavigationServer2D{self}, agent, position)
}
func (self methodsNavigationServer2D) AgentGetPosition(agent RID) Vector2 {
	return self.Runtime.NavigationServer2D_agent_get_position(NavigationServer2D{self}, agent)
}
func (self methodsNavigationServer2D) AgentIsMapChanged(agent RID) bool {
	return self.Runtime.NavigationServer2D_agent_is_map_changed(NavigationServer2D{self}, agent)
}
func (self methodsNavigationServer2D) AgentSetAvoidanceCallback(agent RID, callback Callable) {
	self.Runtime.NavigationServer2D_agent_set_avoidance_callback(NavigationServer2D{self}, agent, callback)
}
func (self methodsNavigationServer2D) AgentHasAvoidanceCallback(agent RID) bool {
	return self.Runtime.NavigationServer2D_agent_has_avoidance_callback(NavigationServer2D{self}, agent)
}
func (self methodsNavigationServer2D) AgentSetAvoidanceLayers(agent RID, layers int64) {
	self.Runtime.NavigationServer2D_agent_set_avoidance_layers(NavigationServer2D{self}, agent, layers)
}
func (self methodsNavigationServer2D) AgentGetAvoidanceLayers(agent RID) int64 {
	return self.Runtime.NavigationServer2D_agent_get_avoidance_layers(NavigationServer2D{self}, agent)
}
func (self methodsNavigationServer2D) AgentSetAvoidanceMask(agent RID, mask int64) {
	self.Runtime.NavigationServer2D_agent_set_avoidance_mask(NavigationServer2D{self}, agent, mask)
}
func (self methodsNavigationServer2D) AgentGetAvoidanceMask(agent RID) int64 {
	return self.Runtime.NavigationServer2D_agent_get_avoidance_mask(NavigationServer2D{self}, agent)
}
func (self methodsNavigationServer2D) AgentSetAvoidancePriority(agent RID, priority Float) {
	self.Runtime.NavigationServer2D_agent_set_avoidance_priority(NavigationServer2D{self}, agent, priority)
}
func (self methodsNavigationServer2D) AgentGetAvoidancePriority(agent RID) Float {
	return self.Runtime.NavigationServer2D_agent_get_avoidance_priority(NavigationServer2D{self}, agent)
}
func (self methodsNavigationServer2D) ObstacleCreate() RID {
	return self.Runtime.NavigationServer2D_obstacle_create(NavigationServer2D{self})
}
func (self methodsNavigationServer2D) ObstacleSetAvoidanceEnabled(obstacle RID, enabled bool) {
	self.Runtime.NavigationServer2D_obstacle_set_avoidance_enabled(NavigationServer2D{self}, obstacle, enabled)
}
func (self methodsNavigationServer2D) ObstacleGetAvoidanceEnabled(obstacle RID) bool {
	return self.Runtime.NavigationServer2D_obstacle_get_avoidance_enabled(NavigationServer2D{self}, obstacle)
}
func (self methodsNavigationServer2D) ObstacleSetMap(obstacle RID, mapping RID) {
	self.Runtime.NavigationServer2D_obstacle_set_map(NavigationServer2D{self}, obstacle, mapping)
}
func (self methodsNavigationServer2D) ObstacleGetMap(obstacle RID) RID {
	return self.Runtime.NavigationServer2D_obstacle_get_map(NavigationServer2D{self}, obstacle)
}
func (self methodsNavigationServer2D) ObstacleSetPaused(obstacle RID, paused bool) {
	self.Runtime.NavigationServer2D_obstacle_set_paused(NavigationServer2D{self}, obstacle, paused)
}
func (self methodsNavigationServer2D) ObstacleGetPaused(obstacle RID) bool {
	return self.Runtime.NavigationServer2D_obstacle_get_paused(NavigationServer2D{self}, obstacle)
}
func (self methodsNavigationServer2D) ObstacleSetRadius(obstacle RID, radius Float) {
	self.Runtime.NavigationServer2D_obstacle_set_radius(NavigationServer2D{self}, obstacle, radius)
}
func (self methodsNavigationServer2D) ObstacleGetRadius(obstacle RID) Float {
	return self.Runtime.NavigationServer2D_obstacle_get_radius(NavigationServer2D{self}, obstacle)
}
func (self methodsNavigationServer2D) ObstacleSetVelocity(obstacle RID, velocity Vector2) {
	self.Runtime.NavigationServer2D_obstacle_set_velocity(NavigationServer2D{self}, obstacle, velocity)
}
func (self methodsNavigationServer2D) ObstacleGetVelocity(obstacle RID) Vector2 {
	return self.Runtime.NavigationServer2D_obstacle_get_velocity(NavigationServer2D{self}, obstacle)
}
func (self methodsNavigationServer2D) ObstacleSetPosition(obstacle RID, position Vector2) {
	self.Runtime.NavigationServer2D_obstacle_set_position(NavigationServer2D{self}, obstacle, position)
}
func (self methodsNavigationServer2D) ObstacleGetPosition(obstacle RID) Vector2 {
	return self.Runtime.NavigationServer2D_obstacle_get_position(NavigationServer2D{self}, obstacle)
}
func (self methodsNavigationServer2D) ObstacleSetVertices(obstacle RID, vertices PackedVector2Array) {
	self.Runtime.NavigationServer2D_obstacle_set_vertices(NavigationServer2D{self}, obstacle, vertices)
}
func (self methodsNavigationServer2D) ObstacleGetVertices(obstacle RID) PackedVector2Array {
	return self.Runtime.NavigationServer2D_obstacle_get_vertices(NavigationServer2D{self}, obstacle)
}
func (self methodsNavigationServer2D) ObstacleSetAvoidanceLayers(obstacle RID, layers int64) {
	self.Runtime.NavigationServer2D_obstacle_set_avoidance_layers(NavigationServer2D{self}, obstacle, layers)
}
func (self methodsNavigationServer2D) ObstacleGetAvoidanceLayers(obstacle RID) int64 {
	return self.Runtime.NavigationServer2D_obstacle_get_avoidance_layers(NavigationServer2D{self}, obstacle)
}
func (self methodsNavigationServer2D) ParseSourceGeometryData(navigation_polygon NavigationPolygon, source_geometry_data NavigationMeshSourceGeometryData2D, root_node Node, callback Callable) {
	self.Runtime.NavigationServer2D_parse_source_geometry_data(NavigationServer2D{self}, navigation_polygon, source_geometry_data, root_node, callback)
}
func (self methodsNavigationServer2D) BakeFromSourceGeometryData(navigation_polygon NavigationPolygon, source_geometry_data NavigationMeshSourceGeometryData2D, callback Callable) {
	self.Runtime.NavigationServer2D_bake_from_source_geometry_data(NavigationServer2D{self}, navigation_polygon, source_geometry_data, callback)
}
func (self methodsNavigationServer2D) BakeFromSourceGeometryDataAsync(navigation_polygon NavigationPolygon, source_geometry_data NavigationMeshSourceGeometryData2D, callback Callable) {
	self.Runtime.NavigationServer2D_bake_from_source_geometry_data_async(NavigationServer2D{self}, navigation_polygon, source_geometry_data, callback)
}
func (self methodsNavigationServer2D) FreeRid(rid RID) {
	self.Runtime.NavigationServer2D_free_rid(NavigationServer2D{self}, rid)
}
func (self methodsNavigationServer2D) SetDebugEnabled(enabled bool) {
	self.Runtime.NavigationServer2D_set_debug_enabled(NavigationServer2D{self}, enabled)
}
func (self methodsNavigationServer2D) GetDebugEnabled() bool {
	return self.Runtime.NavigationServer2D_get_debug_enabled(NavigationServer2D{self})
}

type methodsNavigationServer3D struct {
	_ [0]*methodsNavigationServer3D
	class
}

func (self NavigationServer3D) Object() Object {
	var parent Object
	parent.class = self.class
	return parent
}
func (self methodsNavigationServer3D) GetMaps() ArrayOf[RID] {
	return self.Runtime.NavigationServer3D_get_maps(NavigationServer3D{self})
}
func (self methodsNavigationServer3D) MapCreate() RID {
	return self.Runtime.NavigationServer3D_map_create(NavigationServer3D{self})
}
func (self methodsNavigationServer3D) MapSetActive(mapping RID, active bool) {
	self.Runtime.NavigationServer3D_map_set_active(NavigationServer3D{self}, mapping, active)
}
func (self methodsNavigationServer3D) MapIsActive(mapping RID) bool {
	return self.Runtime.NavigationServer3D_map_is_active(NavigationServer3D{self}, mapping)
}
func (self methodsNavigationServer3D) MapSetUp(mapping RID, up Vector3) {
	self.Runtime.NavigationServer3D_map_set_up(NavigationServer3D{self}, mapping, up)
}
func (self methodsNavigationServer3D) MapGetUp(mapping RID) Vector3 {
	return self.Runtime.NavigationServer3D_map_get_up(NavigationServer3D{self}, mapping)
}
func (self methodsNavigationServer3D) MapSetCellSize(mapping RID, cell_size Float) {
	self.Runtime.NavigationServer3D_map_set_cell_size(NavigationServer3D{self}, mapping, cell_size)
}
func (self methodsNavigationServer3D) MapGetCellSize(mapping RID) Float {
	return self.Runtime.NavigationServer3D_map_get_cell_size(NavigationServer3D{self}, mapping)
}
func (self methodsNavigationServer3D) MapSetCellHeight(mapping RID, cell_height Float) {
	self.Runtime.NavigationServer3D_map_set_cell_height(NavigationServer3D{self}, mapping, cell_height)
}
func (self methodsNavigationServer3D) MapGetCellHeight(mapping RID) Float {
	return self.Runtime.NavigationServer3D_map_get_cell_height(NavigationServer3D{self}, mapping)
}
func (self methodsNavigationServer3D) MapSetUseEdgeConnections(mapping RID, enabled bool) {
	self.Runtime.NavigationServer3D_map_set_use_edge_connections(NavigationServer3D{self}, mapping, enabled)
}
func (self methodsNavigationServer3D) MapGetUseEdgeConnections(mapping RID) bool {
	return self.Runtime.NavigationServer3D_map_get_use_edge_connections(NavigationServer3D{self}, mapping)
}
func (self methodsNavigationServer3D) MapSetEdgeConnectionMargin(mapping RID, margin Float) {
	self.Runtime.NavigationServer3D_map_set_edge_connection_margin(NavigationServer3D{self}, mapping, margin)
}
func (self methodsNavigationServer3D) MapGetEdgeConnectionMargin(mapping RID) Float {
	return self.Runtime.NavigationServer3D_map_get_edge_connection_margin(NavigationServer3D{self}, mapping)
}
func (self methodsNavigationServer3D) MapSetLinkConnectionRadius(mapping RID, radius Float) {
	self.Runtime.NavigationServer3D_map_set_link_connection_radius(NavigationServer3D{self}, mapping, radius)
}
func (self methodsNavigationServer3D) MapGetLinkConnectionRadius(mapping RID) Float {
	return self.Runtime.NavigationServer3D_map_get_link_connection_radius(NavigationServer3D{self}, mapping)
}
func (self methodsNavigationServer3D) MapGetPath(mapping RID, origin Vector3, destination Vector3, optimize bool, navigation_layers int64) PackedVector3Array {
	return self.Runtime.NavigationServer3D_map_get_path(NavigationServer3D{self}, mapping, origin, destination, optimize, navigation_layers)
}
func (self methodsNavigationServer3D) MapGetClosestPointToSegment(mapping RID, start Vector3, end Vector3, use_collision bool) Vector3 {
	return self.Runtime.NavigationServer3D_map_get_closest_point_to_segment(NavigationServer3D{self}, mapping, start, end, use_collision)
}
func (self methodsNavigationServer3D) MapGetClosestPoint(mapping RID, to_point Vector3) Vector3 {
	return self.Runtime.NavigationServer3D_map_get_closest_point(NavigationServer3D{self}, mapping, to_point)
}
func (self methodsNavigationServer3D) MapGetClosestPointNormal(mapping RID, to_point Vector3) Vector3 {
	return self.Runtime.NavigationServer3D_map_get_closest_point_normal(NavigationServer3D{self}, mapping, to_point)
}
func (self methodsNavigationServer3D) MapGetClosestPointOwner(mapping RID, to_point Vector3) RID {
	return self.Runtime.NavigationServer3D_map_get_closest_point_owner(NavigationServer3D{self}, mapping, to_point)
}
func (self methodsNavigationServer3D) MapGetLinks(mapping RID) ArrayOf[RID] {
	return self.Runtime.NavigationServer3D_map_get_links(NavigationServer3D{self}, mapping)
}
func (self methodsNavigationServer3D) MapGetRegions(mapping RID) ArrayOf[RID] {
	return self.Runtime.NavigationServer3D_map_get_regions(NavigationServer3D{self}, mapping)
}
func (self methodsNavigationServer3D) MapGetAgents(mapping RID) ArrayOf[RID] {
	return self.Runtime.NavigationServer3D_map_get_agents(NavigationServer3D{self}, mapping)
}
func (self methodsNavigationServer3D) MapGetObstacles(mapping RID) ArrayOf[RID] {
	return self.Runtime.NavigationServer3D_map_get_obstacles(NavigationServer3D{self}, mapping)
}
func (self methodsNavigationServer3D) MapForceUpdate(mapping RID) {
	self.Runtime.NavigationServer3D_map_force_update(NavigationServer3D{self}, mapping)
}
func (self methodsNavigationServer3D) MapGetRandomPoint(mapping RID, navigation_layers int64, uniformly bool) Vector3 {
	return self.Runtime.NavigationServer3D_map_get_random_point(NavigationServer3D{self}, mapping, navigation_layers, uniformly)
}
func (self methodsNavigationServer3D) QueryPath(parameters NavigationPathQueryParameters3D, result NavigationPathQueryResult3D) {
	self.Runtime.NavigationServer3D_query_path(NavigationServer3D{self}, parameters, result)
}
func (self methodsNavigationServer3D) RegionCreate() RID {
	return self.Runtime.NavigationServer3D_region_create(NavigationServer3D{self})
}
func (self methodsNavigationServer3D) RegionSetEnabled(region RID, enabled bool) {
	self.Runtime.NavigationServer3D_region_set_enabled(NavigationServer3D{self}, region, enabled)
}
func (self methodsNavigationServer3D) RegionGetEnabled(region RID) bool {
	return self.Runtime.NavigationServer3D_region_get_enabled(NavigationServer3D{self}, region)
}
func (self methodsNavigationServer3D) RegionSetUseEdgeConnections(region RID, enabled bool) {
	self.Runtime.NavigationServer3D_region_set_use_edge_connections(NavigationServer3D{self}, region, enabled)
}
func (self methodsNavigationServer3D) RegionGetUseEdgeConnections(region RID) bool {
	return self.Runtime.NavigationServer3D_region_get_use_edge_connections(NavigationServer3D{self}, region)
}
func (self methodsNavigationServer3D) RegionSetEnterCost(region RID, enter_cost Float) {
	self.Runtime.NavigationServer3D_region_set_enter_cost(NavigationServer3D{self}, region, enter_cost)
}
func (self methodsNavigationServer3D) RegionGetEnterCost(region RID) Float {
	return self.Runtime.NavigationServer3D_region_get_enter_cost(NavigationServer3D{self}, region)
}
func (self methodsNavigationServer3D) RegionSetTravelCost(region RID, travel_cost Float) {
	self.Runtime.NavigationServer3D_region_set_travel_cost(NavigationServer3D{self}, region, travel_cost)
}
func (self methodsNavigationServer3D) RegionGetTravelCost(region RID) Float {
	return self.Runtime.NavigationServer3D_region_get_travel_cost(NavigationServer3D{self}, region)
}
func (self methodsNavigationServer3D) RegionSetOwnerId(region RID, owner_id int64) {
	self.Runtime.NavigationServer3D_region_set_owner_id(NavigationServer3D{self}, region, owner_id)
}
func (self methodsNavigationServer3D) RegionGetOwnerId(region RID) int64 {
	return self.Runtime.NavigationServer3D_region_get_owner_id(NavigationServer3D{self}, region)
}
func (self methodsNavigationServer3D) RegionOwnsPoint(region RID, point Vector3) bool {
	return self.Runtime.NavigationServer3D_region_owns_point(NavigationServer3D{self}, region, point)
}
func (self methodsNavigationServer3D) RegionSetMap(region RID, mapping RID) {
	self.Runtime.NavigationServer3D_region_set_map(NavigationServer3D{self}, region, mapping)
}
func (self methodsNavigationServer3D) RegionGetMap(region RID) RID {
	return self.Runtime.NavigationServer3D_region_get_map(NavigationServer3D{self}, region)
}
func (self methodsNavigationServer3D) RegionSetNavigationLayers(region RID, navigation_layers int64) {
	self.Runtime.NavigationServer3D_region_set_navigation_layers(NavigationServer3D{self}, region, navigation_layers)
}
func (self methodsNavigationServer3D) RegionGetNavigationLayers(region RID) int64 {
	return self.Runtime.NavigationServer3D_region_get_navigation_layers(NavigationServer3D{self}, region)
}
func (self methodsNavigationServer3D) RegionSetTransform(region RID, transform Transform3D) {
	self.Runtime.NavigationServer3D_region_set_transform(NavigationServer3D{self}, region, transform)
}
func (self methodsNavigationServer3D) RegionGetTransform(region RID) Transform3D {
	return self.Runtime.NavigationServer3D_region_get_transform(NavigationServer3D{self}, region)
}
func (self methodsNavigationServer3D) RegionSetNavigationMesh(region RID, navigation_mesh NavigationMesh) {
	self.Runtime.NavigationServer3D_region_set_navigation_mesh(NavigationServer3D{self}, region, navigation_mesh)
}
func (self methodsNavigationServer3D) RegionBakeNavigationMesh(navigation_mesh NavigationMesh, root_node Node) {
	self.Runtime.NavigationServer3D_region_bake_navigation_mesh(NavigationServer3D{self}, navigation_mesh, root_node)
}
func (self methodsNavigationServer3D) RegionGetConnectionsCount(region RID) int64 {
	return self.Runtime.NavigationServer3D_region_get_connections_count(NavigationServer3D{self}, region)
}
func (self methodsNavigationServer3D) RegionGetConnectionPathwayStart(region RID, connection int64) Vector3 {
	return self.Runtime.NavigationServer3D_region_get_connection_pathway_start(NavigationServer3D{self}, region, connection)
}
func (self methodsNavigationServer3D) RegionGetConnectionPathwayEnd(region RID, connection int64) Vector3 {
	return self.Runtime.NavigationServer3D_region_get_connection_pathway_end(NavigationServer3D{self}, region, connection)
}
func (self methodsNavigationServer3D) RegionGetRandomPoint(region RID, navigation_layers int64, uniformly bool) Vector3 {
	return self.Runtime.NavigationServer3D_region_get_random_point(NavigationServer3D{self}, region, navigation_layers, uniformly)
}
func (self methodsNavigationServer3D) LinkCreate() RID {
	return self.Runtime.NavigationServer3D_link_create(NavigationServer3D{self})
}
func (self methodsNavigationServer3D) LinkSetMap(link RID, mapping RID) {
	self.Runtime.NavigationServer3D_link_set_map(NavigationServer3D{self}, link, mapping)
}
func (self methodsNavigationServer3D) LinkGetMap(link RID) RID {
	return self.Runtime.NavigationServer3D_link_get_map(NavigationServer3D{self}, link)
}
func (self methodsNavigationServer3D) LinkSetEnabled(link RID, enabled bool) {
	self.Runtime.NavigationServer3D_link_set_enabled(NavigationServer3D{self}, link, enabled)
}
func (self methodsNavigationServer3D) LinkGetEnabled(link RID) bool {
	return self.Runtime.NavigationServer3D_link_get_enabled(NavigationServer3D{self}, link)
}
func (self methodsNavigationServer3D) LinkSetBidirectional(link RID, bidirectional bool) {
	self.Runtime.NavigationServer3D_link_set_bidirectional(NavigationServer3D{self}, link, bidirectional)
}
func (self methodsNavigationServer3D) LinkIsBidirectional(link RID) bool {
	return self.Runtime.NavigationServer3D_link_is_bidirectional(NavigationServer3D{self}, link)
}
func (self methodsNavigationServer3D) LinkSetNavigationLayers(link RID, navigation_layers int64) {
	self.Runtime.NavigationServer3D_link_set_navigation_layers(NavigationServer3D{self}, link, navigation_layers)
}
func (self methodsNavigationServer3D) LinkGetNavigationLayers(link RID) int64 {
	return self.Runtime.NavigationServer3D_link_get_navigation_layers(NavigationServer3D{self}, link)
}
func (self methodsNavigationServer3D) LinkSetStartPosition(link RID, position Vector3) {
	self.Runtime.NavigationServer3D_link_set_start_position(NavigationServer3D{self}, link, position)
}
func (self methodsNavigationServer3D) LinkGetStartPosition(link RID) Vector3 {
	return self.Runtime.NavigationServer3D_link_get_start_position(NavigationServer3D{self}, link)
}
func (self methodsNavigationServer3D) LinkSetEndPosition(link RID, position Vector3) {
	self.Runtime.NavigationServer3D_link_set_end_position(NavigationServer3D{self}, link, position)
}
func (self methodsNavigationServer3D) LinkGetEndPosition(link RID) Vector3 {
	return self.Runtime.NavigationServer3D_link_get_end_position(NavigationServer3D{self}, link)
}
func (self methodsNavigationServer3D) LinkSetEnterCost(link RID, enter_cost Float) {
	self.Runtime.NavigationServer3D_link_set_enter_cost(NavigationServer3D{self}, link, enter_cost)
}
func (self methodsNavigationServer3D) LinkGetEnterCost(link RID) Float {
	return self.Runtime.NavigationServer3D_link_get_enter_cost(NavigationServer3D{self}, link)
}
func (self methodsNavigationServer3D) LinkSetTravelCost(link RID, travel_cost Float) {
	self.Runtime.NavigationServer3D_link_set_travel_cost(NavigationServer3D{self}, link, travel_cost)
}
func (self methodsNavigationServer3D) LinkGetTravelCost(link RID) Float {
	return self.Runtime.NavigationServer3D_link_get_travel_cost(NavigationServer3D{self}, link)
}
func (self methodsNavigationServer3D) LinkSetOwnerId(link RID, owner_id int64) {
	self.Runtime.NavigationServer3D_link_set_owner_id(NavigationServer3D{self}, link, owner_id)
}
func (self methodsNavigationServer3D) LinkGetOwnerId(link RID) int64 {
	return self.Runtime.NavigationServer3D_link_get_owner_id(NavigationServer3D{self}, link)
}
func (self methodsNavigationServer3D) AgentCreate() RID {
	return self.Runtime.NavigationServer3D_agent_create(NavigationServer3D{self})
}
func (self methodsNavigationServer3D) AgentSetAvoidanceEnabled(agent RID, enabled bool) {
	self.Runtime.NavigationServer3D_agent_set_avoidance_enabled(NavigationServer3D{self}, agent, enabled)
}
func (self methodsNavigationServer3D) AgentGetAvoidanceEnabled(agent RID) bool {
	return self.Runtime.NavigationServer3D_agent_get_avoidance_enabled(NavigationServer3D{self}, agent)
}
func (self methodsNavigationServer3D) AgentSetUse3dAvoidance(agent RID, enabled bool) {
	self.Runtime.NavigationServer3D_agent_set_use_3d_avoidance(NavigationServer3D{self}, agent, enabled)
}
func (self methodsNavigationServer3D) AgentGetUse3dAvoidance(agent RID) bool {
	return self.Runtime.NavigationServer3D_agent_get_use_3d_avoidance(NavigationServer3D{self}, agent)
}
func (self methodsNavigationServer3D) AgentSetMap(agent RID, mapping RID) {
	self.Runtime.NavigationServer3D_agent_set_map(NavigationServer3D{self}, agent, mapping)
}
func (self methodsNavigationServer3D) AgentGetMap(agent RID) RID {
	return self.Runtime.NavigationServer3D_agent_get_map(NavigationServer3D{self}, agent)
}
func (self methodsNavigationServer3D) AgentSetPaused(agent RID, paused bool) {
	self.Runtime.NavigationServer3D_agent_set_paused(NavigationServer3D{self}, agent, paused)
}
func (self methodsNavigationServer3D) AgentGetPaused(agent RID) bool {
	return self.Runtime.NavigationServer3D_agent_get_paused(NavigationServer3D{self}, agent)
}
func (self methodsNavigationServer3D) AgentSetNeighborDistance(agent RID, distance Float) {
	self.Runtime.NavigationServer3D_agent_set_neighbor_distance(NavigationServer3D{self}, agent, distance)
}
func (self methodsNavigationServer3D) AgentGetNeighborDistance(agent RID) Float {
	return self.Runtime.NavigationServer3D_agent_get_neighbor_distance(NavigationServer3D{self}, agent)
}
func (self methodsNavigationServer3D) AgentSetMaxNeighbors(agent RID, count int64) {
	self.Runtime.NavigationServer3D_agent_set_max_neighbors(NavigationServer3D{self}, agent, count)
}
func (self methodsNavigationServer3D) AgentGetMaxNeighbors(agent RID) int64 {
	return self.Runtime.NavigationServer3D_agent_get_max_neighbors(NavigationServer3D{self}, agent)
}
func (self methodsNavigationServer3D) AgentSetTimeHorizonAgents(agent RID, time_horizon Float) {
	self.Runtime.NavigationServer3D_agent_set_time_horizon_agents(NavigationServer3D{self}, agent, time_horizon)
}
func (self methodsNavigationServer3D) AgentGetTimeHorizonAgents(agent RID) Float {
	return self.Runtime.NavigationServer3D_agent_get_time_horizon_agents(NavigationServer3D{self}, agent)
}
func (self methodsNavigationServer3D) AgentSetTimeHorizonObstacles(agent RID, time_horizon Float) {
	self.Runtime.NavigationServer3D_agent_set_time_horizon_obstacles(NavigationServer3D{self}, agent, time_horizon)
}
func (self methodsNavigationServer3D) AgentGetTimeHorizonObstacles(agent RID) Float {
	return self.Runtime.NavigationServer3D_agent_get_time_horizon_obstacles(NavigationServer3D{self}, agent)
}
func (self methodsNavigationServer3D) AgentSetRadius(agent RID, radius Float) {
	self.Runtime.NavigationServer3D_agent_set_radius(NavigationServer3D{self}, agent, radius)
}
func (self methodsNavigationServer3D) AgentGetRadius(agent RID) Float {
	return self.Runtime.NavigationServer3D_agent_get_radius(NavigationServer3D{self}, agent)
}
func (self methodsNavigationServer3D) AgentSetHeight(agent RID, height Float) {
	self.Runtime.NavigationServer3D_agent_set_height(NavigationServer3D{self}, agent, height)
}
func (self methodsNavigationServer3D) AgentGetHeight(agent RID) Float {
	return self.Runtime.NavigationServer3D_agent_get_height(NavigationServer3D{self}, agent)
}
func (self methodsNavigationServer3D) AgentSetMaxSpeed(agent RID, max_speed Float) {
	self.Runtime.NavigationServer3D_agent_set_max_speed(NavigationServer3D{self}, agent, max_speed)
}
func (self methodsNavigationServer3D) AgentGetMaxSpeed(agent RID) Float {
	return self.Runtime.NavigationServer3D_agent_get_max_speed(NavigationServer3D{self}, agent)
}
func (self methodsNavigationServer3D) AgentSetVelocityForced(agent RID, velocity Vector3) {
	self.Runtime.NavigationServer3D_agent_set_velocity_forced(NavigationServer3D{self}, agent, velocity)
}
func (self methodsNavigationServer3D) AgentSetVelocity(agent RID, velocity Vector3) {
	self.Runtime.NavigationServer3D_agent_set_velocity(NavigationServer3D{self}, agent, velocity)
}
func (self methodsNavigationServer3D) AgentGetVelocity(agent RID) Vector3 {
	return self.Runtime.NavigationServer3D_agent_get_velocity(NavigationServer3D{self}, agent)
}
func (self methodsNavigationServer3D) AgentSetPosition(agent RID, position Vector3) {
	self.Runtime.NavigationServer3D_agent_set_position(NavigationServer3D{self}, agent, position)
}
func (self methodsNavigationServer3D) AgentGetPosition(agent RID) Vector3 {
	return self.Runtime.NavigationServer3D_agent_get_position(NavigationServer3D{self}, agent)
}
func (self methodsNavigationServer3D) AgentIsMapChanged(agent RID) bool {
	return self.Runtime.NavigationServer3D_agent_is_map_changed(NavigationServer3D{self}, agent)
}
func (self methodsNavigationServer3D) AgentSetAvoidanceCallback(agent RID, callback Callable) {
	self.Runtime.NavigationServer3D_agent_set_avoidance_callback(NavigationServer3D{self}, agent, callback)
}
func (self methodsNavigationServer3D) AgentHasAvoidanceCallback(agent RID) bool {
	return self.Runtime.NavigationServer3D_agent_has_avoidance_callback(NavigationServer3D{self}, agent)
}
func (self methodsNavigationServer3D) AgentSetAvoidanceLayers(agent RID, layers int64) {
	self.Runtime.NavigationServer3D_agent_set_avoidance_layers(NavigationServer3D{self}, agent, layers)
}
func (self methodsNavigationServer3D) AgentGetAvoidanceLayers(agent RID) int64 {
	return self.Runtime.NavigationServer3D_agent_get_avoidance_layers(NavigationServer3D{self}, agent)
}
func (self methodsNavigationServer3D) AgentSetAvoidanceMask(agent RID, mask int64) {
	self.Runtime.NavigationServer3D_agent_set_avoidance_mask(NavigationServer3D{self}, agent, mask)
}
func (self methodsNavigationServer3D) AgentGetAvoidanceMask(agent RID) int64 {
	return self.Runtime.NavigationServer3D_agent_get_avoidance_mask(NavigationServer3D{self}, agent)
}
func (self methodsNavigationServer3D) AgentSetAvoidancePriority(agent RID, priority Float) {
	self.Runtime.NavigationServer3D_agent_set_avoidance_priority(NavigationServer3D{self}, agent, priority)
}
func (self methodsNavigationServer3D) AgentGetAvoidancePriority(agent RID) Float {
	return self.Runtime.NavigationServer3D_agent_get_avoidance_priority(NavigationServer3D{self}, agent)
}
func (self methodsNavigationServer3D) ObstacleCreate() RID {
	return self.Runtime.NavigationServer3D_obstacle_create(NavigationServer3D{self})
}
func (self methodsNavigationServer3D) ObstacleSetAvoidanceEnabled(obstacle RID, enabled bool) {
	self.Runtime.NavigationServer3D_obstacle_set_avoidance_enabled(NavigationServer3D{self}, obstacle, enabled)
}
func (self methodsNavigationServer3D) ObstacleGetAvoidanceEnabled(obstacle RID) bool {
	return self.Runtime.NavigationServer3D_obstacle_get_avoidance_enabled(NavigationServer3D{self}, obstacle)
}
func (self methodsNavigationServer3D) ObstacleSetUse3dAvoidance(obstacle RID, enabled bool) {
	self.Runtime.NavigationServer3D_obstacle_set_use_3d_avoidance(NavigationServer3D{self}, obstacle, enabled)
}
func (self methodsNavigationServer3D) ObstacleGetUse3dAvoidance(obstacle RID) bool {
	return self.Runtime.NavigationServer3D_obstacle_get_use_3d_avoidance(NavigationServer3D{self}, obstacle)
}
func (self methodsNavigationServer3D) ObstacleSetMap(obstacle RID, mapping RID) {
	self.Runtime.NavigationServer3D_obstacle_set_map(NavigationServer3D{self}, obstacle, mapping)
}
func (self methodsNavigationServer3D) ObstacleGetMap(obstacle RID) RID {
	return self.Runtime.NavigationServer3D_obstacle_get_map(NavigationServer3D{self}, obstacle)
}
func (self methodsNavigationServer3D) ObstacleSetPaused(obstacle RID, paused bool) {
	self.Runtime.NavigationServer3D_obstacle_set_paused(NavigationServer3D{self}, obstacle, paused)
}
func (self methodsNavigationServer3D) ObstacleGetPaused(obstacle RID) bool {
	return self.Runtime.NavigationServer3D_obstacle_get_paused(NavigationServer3D{self}, obstacle)
}
func (self methodsNavigationServer3D) ObstacleSetRadius(obstacle RID, radius Float) {
	self.Runtime.NavigationServer3D_obstacle_set_radius(NavigationServer3D{self}, obstacle, radius)
}
func (self methodsNavigationServer3D) ObstacleGetRadius(obstacle RID) Float {
	return self.Runtime.NavigationServer3D_obstacle_get_radius(NavigationServer3D{self}, obstacle)
}
func (self methodsNavigationServer3D) ObstacleSetHeight(obstacle RID, height Float) {
	self.Runtime.NavigationServer3D_obstacle_set_height(NavigationServer3D{self}, obstacle, height)
}
func (self methodsNavigationServer3D) ObstacleGetHeight(obstacle RID) Float {
	return self.Runtime.NavigationServer3D_obstacle_get_height(NavigationServer3D{self}, obstacle)
}
func (self methodsNavigationServer3D) ObstacleSetVelocity(obstacle RID, velocity Vector3) {
	self.Runtime.NavigationServer3D_obstacle_set_velocity(NavigationServer3D{self}, obstacle, velocity)
}
func (self methodsNavigationServer3D) ObstacleGetVelocity(obstacle RID) Vector3 {
	return self.Runtime.NavigationServer3D_obstacle_get_velocity(NavigationServer3D{self}, obstacle)
}
func (self methodsNavigationServer3D) ObstacleSetPosition(obstacle RID, position Vector3) {
	self.Runtime.NavigationServer3D_obstacle_set_position(NavigationServer3D{self}, obstacle, position)
}
func (self methodsNavigationServer3D) ObstacleGetPosition(obstacle RID) Vector3 {
	return self.Runtime.NavigationServer3D_obstacle_get_position(NavigationServer3D{self}, obstacle)
}
func (self methodsNavigationServer3D) ObstacleSetVertices(obstacle RID, vertices PackedVector3Array) {
	self.Runtime.NavigationServer3D_obstacle_set_vertices(NavigationServer3D{self}, obstacle, vertices)
}
func (self methodsNavigationServer3D) ObstacleGetVertices(obstacle RID) PackedVector3Array {
	return self.Runtime.NavigationServer3D_obstacle_get_vertices(NavigationServer3D{self}, obstacle)
}
func (self methodsNavigationServer3D) ObstacleSetAvoidanceLayers(obstacle RID, layers int64) {
	self.Runtime.NavigationServer3D_obstacle_set_avoidance_layers(NavigationServer3D{self}, obstacle, layers)
}
func (self methodsNavigationServer3D) ObstacleGetAvoidanceLayers(obstacle RID) int64 {
	return self.Runtime.NavigationServer3D_obstacle_get_avoidance_layers(NavigationServer3D{self}, obstacle)
}
func (self methodsNavigationServer3D) ParseSourceGeometryData(navigation_mesh NavigationMesh, source_geometry_data NavigationMeshSourceGeometryData3D, root_node Node, callback Callable) {
	self.Runtime.NavigationServer3D_parse_source_geometry_data(NavigationServer3D{self}, navigation_mesh, source_geometry_data, root_node, callback)
}
func (self methodsNavigationServer3D) BakeFromSourceGeometryData(navigation_mesh NavigationMesh, source_geometry_data NavigationMeshSourceGeometryData3D, callback Callable) {
	self.Runtime.NavigationServer3D_bake_from_source_geometry_data(NavigationServer3D{self}, navigation_mesh, source_geometry_data, callback)
}
func (self methodsNavigationServer3D) BakeFromSourceGeometryDataAsync(navigation_mesh NavigationMesh, source_geometry_data NavigationMeshSourceGeometryData3D, callback Callable) {
	self.Runtime.NavigationServer3D_bake_from_source_geometry_data_async(NavigationServer3D{self}, navigation_mesh, source_geometry_data, callback)
}
func (self methodsNavigationServer3D) FreeRid(rid RID) {
	self.Runtime.NavigationServer3D_free_rid(NavigationServer3D{self}, rid)
}
func (self methodsNavigationServer3D) SetActive(active bool) {
	self.Runtime.NavigationServer3D_set_active(NavigationServer3D{self}, active)
}
func (self methodsNavigationServer3D) SetDebugEnabled(enabled bool) {
	self.Runtime.NavigationServer3D_set_debug_enabled(NavigationServer3D{self}, enabled)
}
func (self methodsNavigationServer3D) GetDebugEnabled() bool {
	return self.Runtime.NavigationServer3D_get_debug_enabled(NavigationServer3D{self})
}
func (self methodsNavigationServer3D) GetProcessInfo(process_info NavigationServer3DProcessInfo) int64 {
	return self.Runtime.NavigationServer3D_get_process_info(NavigationServer3D{self}, process_info)
}

type methodsNinePatchRect struct {
	_ [0]*methodsNinePatchRect
	class
}

func (self NinePatchRect) Control() Control {
	var parent Control
	parent.class = self.class
	return parent
}
func (self methodsNinePatchRect) SetTexture(texture Texture2D) {
	self.Runtime.NinePatchRect_set_texture(NinePatchRect{self}, texture)
}
func (self methodsNinePatchRect) GetTexture() Texture2D {
	return self.Runtime.NinePatchRect_get_texture(NinePatchRect{self})
}
func (self methodsNinePatchRect) SetPatchMargin(margin Side, value int64) {
	self.Runtime.NinePatchRect_set_patch_margin(NinePatchRect{self}, margin, value)
}
func (self methodsNinePatchRect) GetPatchMargin(margin Side) int64 {
	return self.Runtime.NinePatchRect_get_patch_margin(NinePatchRect{self}, margin)
}
func (self methodsNinePatchRect) SetRegionRect(rect Rect2) {
	self.Runtime.NinePatchRect_set_region_rect(NinePatchRect{self}, rect)
}
func (self methodsNinePatchRect) GetRegionRect() Rect2 {
	return self.Runtime.NinePatchRect_get_region_rect(NinePatchRect{self})
}
func (self methodsNinePatchRect) SetDrawCenter(draw_center bool) {
	self.Runtime.NinePatchRect_set_draw_center(NinePatchRect{self}, draw_center)
}
func (self methodsNinePatchRect) IsDrawCenterEnabled() bool {
	return self.Runtime.NinePatchRect_is_draw_center_enabled(NinePatchRect{self})
}
func (self methodsNinePatchRect) SetHAxisStretchMode(mode NinePatchRectAxisStretchMode) {
	self.Runtime.NinePatchRect_set_h_axis_stretch_mode(NinePatchRect{self}, mode)
}
func (self methodsNinePatchRect) GetHAxisStretchMode() NinePatchRectAxisStretchMode {
	return self.Runtime.NinePatchRect_get_h_axis_stretch_mode(NinePatchRect{self})
}
func (self methodsNinePatchRect) SetVAxisStretchMode(mode NinePatchRectAxisStretchMode) {
	self.Runtime.NinePatchRect_set_v_axis_stretch_mode(NinePatchRect{self}, mode)
}
func (self methodsNinePatchRect) GetVAxisStretchMode() NinePatchRectAxisStretchMode {
	return self.Runtime.NinePatchRect_get_v_axis_stretch_mode(NinePatchRect{self})
}

type methodsNode struct {
	_ [0]*methodsNode
	class
}

func (self Node) Object() Object { var parent Object; parent.class = self.class; return parent }
func (self methodsNode) PrintOrphanNodes() {
	self.Runtime.Node_print_orphan_nodes(Node{self})
}
func (self methodsNode) AddSibling(sibling Node, force_readable_name bool) {
	self.Runtime.Node_add_sibling(Node{self}, sibling, force_readable_name)
}
func (self methodsNode) SetName(name string) {
	self.Runtime.Node_set_name(Node{self}, name)
}
func (self methodsNode) GetName() string {
	return self.Runtime.Node_get_name(Node{self})
}
func (self methodsNode) AddChild(node Node, force_readable_name bool, internal NodeInternalMode) {
	self.Runtime.Node_add_child(Node{self}, node, force_readable_name, internal)
}
func (self methodsNode) RemoveChild(node Node) {
	self.Runtime.Node_remove_child(Node{self}, node)
}
func (self methodsNode) Reparent(new_parent Node, keep_global_transform bool) {
	self.Runtime.Node_reparent(Node{self}, new_parent, keep_global_transform)
}
func (self methodsNode) GetChildCount(include_internal bool) int64 {
	return self.Runtime.Node_get_child_count(Node{self}, include_internal)
}
func (self methodsNode) GetChildren(include_internal bool) ArrayOf[Node] {
	return self.Runtime.Node_get_children(Node{self}, include_internal)
}
func (self methodsNode) GetChild(idx int64, include_internal bool) Node {
	return self.Runtime.Node_get_child(Node{self}, idx, include_internal)
}
func (self methodsNode) HasNode(path NodePath) bool {
	return self.Runtime.Node_has_node(Node{self}, path)
}
func (self methodsNode) GetNode(path NodePath) Node {
	return self.Runtime.Node_get_node(Node{self}, path)
}
func (self methodsNode) GetNodeOrNull(path NodePath) Node {
	return self.Runtime.Node_get_node_or_null(Node{self}, path)
}
func (self methodsNode) GetParent() Node {
	return self.Runtime.Node_get_parent(Node{self})
}
func (self methodsNode) FindChild(pattern string, recursive bool, owned bool) Node {
	return self.Runtime.Node_find_child(Node{self}, pattern, recursive, owned)
}
func (self methodsNode) FindChildren(pattern string, atype string, recursive bool, owned bool) ArrayOf[Node] {
	return self.Runtime.Node_find_children(Node{self}, pattern, atype, recursive, owned)
}
func (self methodsNode) FindParent(pattern string) Node {
	return self.Runtime.Node_find_parent(Node{self}, pattern)
}
func (self methodsNode) HasNodeAndResource(path NodePath) bool {
	return self.Runtime.Node_has_node_and_resource(Node{self}, path)
}
func (self methodsNode) GetNodeAndResource(path NodePath) Array {
	return self.Runtime.Node_get_node_and_resource(Node{self}, path)
}
func (self methodsNode) IsInsideTree() bool {
	return self.Runtime.Node_is_inside_tree(Node{self})
}
func (self methodsNode) IsAncestorOf(node Node) bool {
	return self.Runtime.Node_is_ancestor_of(Node{self}, node)
}
func (self methodsNode) IsGreaterThan(node Node) bool {
	return self.Runtime.Node_is_greater_than(Node{self}, node)
}
func (self methodsNode) GetPath() NodePath {
	return self.Runtime.Node_get_path(Node{self})
}
func (self methodsNode) GetPathTo(node Node, use_unique_path bool) NodePath {
	return self.Runtime.Node_get_path_to(Node{self}, node, use_unique_path)
}
func (self methodsNode) AddToGroup(group string, persistent bool) {
	self.Runtime.Node_add_to_group(Node{self}, group, persistent)
}
func (self methodsNode) RemoveFromGroup(group string) {
	self.Runtime.Node_remove_from_group(Node{self}, group)
}
func (self methodsNode) IsInGroup(group string) bool {
	return self.Runtime.Node_is_in_group(Node{self}, group)
}
func (self methodsNode) MoveChild(child_node Node, to_index int64) {
	self.Runtime.Node_move_child(Node{self}, child_node, to_index)
}
func (self methodsNode) GetGroups() ArrayOf[string] {
	return self.Runtime.Node_get_groups(Node{self})
}
func (self methodsNode) SetOwner(owner Node) {
	self.Runtime.Node_set_owner(Node{self}, owner)
}
func (self methodsNode) GetOwner() Node {
	return self.Runtime.Node_get_owner(Node{self})
}
func (self methodsNode) GetIndex(include_internal bool) int64 {
	return self.Runtime.Node_get_index(Node{self}, include_internal)
}
func (self methodsNode) PrintTree() {
	self.Runtime.Node_print_tree(Node{self})
}
func (self methodsNode) PrintTreePretty() {
	self.Runtime.Node_print_tree_pretty(Node{self})
}
func (self methodsNode) GetTreeString() string {
	return self.Runtime.Node_get_tree_string(Node{self})
}
func (self methodsNode) GetTreeStringPretty() string {
	return self.Runtime.Node_get_tree_string_pretty(Node{self})
}
func (self methodsNode) SetSceneFilePath(scene_file_path string) {
	self.Runtime.Node_set_scene_file_path(Node{self}, scene_file_path)
}
func (self methodsNode) GetSceneFilePath() string {
	return self.Runtime.Node_get_scene_file_path(Node{self})
}
func (self methodsNode) PropagateNotification(what int64) {
	self.Runtime.Node_propagate_notification(Node{self}, what)
}
func (self methodsNode) PropagateCall(method string, args Array, parent_first bool) {
	self.Runtime.Node_propagate_call(Node{self}, method, args, parent_first)
}
func (self methodsNode) SetPhysicsProcess(enable bool) {
	self.Runtime.Node_set_physics_process(Node{self}, enable)
}
func (self methodsNode) GetPhysicsProcessDeltaTime() Float {
	return self.Runtime.Node_get_physics_process_delta_time(Node{self})
}
func (self methodsNode) IsPhysicsProcessing() bool {
	return self.Runtime.Node_is_physics_processing(Node{self})
}
func (self methodsNode) GetProcessDeltaTime() Float {
	return self.Runtime.Node_get_process_delta_time(Node{self})
}
func (self methodsNode) SetProcess(enable bool) {
	self.Runtime.Node_set_process(Node{self}, enable)
}
func (self methodsNode) SetProcessPriority(priority int64) {
	self.Runtime.Node_set_process_priority(Node{self}, priority)
}
func (self methodsNode) GetProcessPriority() int64 {
	return self.Runtime.Node_get_process_priority(Node{self})
}
func (self methodsNode) SetPhysicsProcessPriority(priority int64) {
	self.Runtime.Node_set_physics_process_priority(Node{self}, priority)
}
func (self methodsNode) GetPhysicsProcessPriority() int64 {
	return self.Runtime.Node_get_physics_process_priority(Node{self})
}
func (self methodsNode) IsProcessing() bool {
	return self.Runtime.Node_is_processing(Node{self})
}
func (self methodsNode) SetProcessInput(enable bool) {
	self.Runtime.Node_set_process_input(Node{self}, enable)
}
func (self methodsNode) IsProcessingInput() bool {
	return self.Runtime.Node_is_processing_input(Node{self})
}
func (self methodsNode) SetProcessShortcutInput(enable bool) {
	self.Runtime.Node_set_process_shortcut_input(Node{self}, enable)
}
func (self methodsNode) IsProcessingShortcutInput() bool {
	return self.Runtime.Node_is_processing_shortcut_input(Node{self})
}
func (self methodsNode) SetProcessUnhandledInput(enable bool) {
	self.Runtime.Node_set_process_unhandled_input(Node{self}, enable)
}
func (self methodsNode) IsProcessingUnhandledInput() bool {
	return self.Runtime.Node_is_processing_unhandled_input(Node{self})
}
func (self methodsNode) SetProcessUnhandledKeyInput(enable bool) {
	self.Runtime.Node_set_process_unhandled_key_input(Node{self}, enable)
}
func (self methodsNode) IsProcessingUnhandledKeyInput() bool {
	return self.Runtime.Node_is_processing_unhandled_key_input(Node{self})
}
func (self methodsNode) SetProcessMode(mode NodeProcessMode) {
	self.Runtime.Node_set_process_mode(Node{self}, mode)
}
func (self methodsNode) GetProcessMode() NodeProcessMode {
	return self.Runtime.Node_get_process_mode(Node{self})
}
func (self methodsNode) CanProcess() bool {
	return self.Runtime.Node_can_process(Node{self})
}
func (self methodsNode) SetProcessThreadGroup(mode NodeProcessThreadGroup) {
	self.Runtime.Node_set_process_thread_group(Node{self}, mode)
}
func (self methodsNode) GetProcessThreadGroup() NodeProcessThreadGroup {
	return self.Runtime.Node_get_process_thread_group(Node{self})
}
func (self methodsNode) SetProcessThreadMessages(flags NodeProcessThreadMessages) {
	self.Runtime.Node_set_process_thread_messages(Node{self}, flags)
}
func (self methodsNode) GetProcessThreadMessages() NodeProcessThreadMessages {
	return self.Runtime.Node_get_process_thread_messages(Node{self})
}
func (self methodsNode) SetProcessThreadGroupOrder(order int64) {
	self.Runtime.Node_set_process_thread_group_order(Node{self}, order)
}
func (self methodsNode) GetProcessThreadGroupOrder() int64 {
	return self.Runtime.Node_get_process_thread_group_order(Node{self})
}
func (self methodsNode) SetDisplayFolded(fold bool) {
	self.Runtime.Node_set_display_folded(Node{self}, fold)
}
func (self methodsNode) IsDisplayedFolded() bool {
	return self.Runtime.Node_is_displayed_folded(Node{self})
}
func (self methodsNode) SetProcessInternal(enable bool) {
	self.Runtime.Node_set_process_internal(Node{self}, enable)
}
func (self methodsNode) IsProcessingInternal() bool {
	return self.Runtime.Node_is_processing_internal(Node{self})
}
func (self methodsNode) SetPhysicsProcessInternal(enable bool) {
	self.Runtime.Node_set_physics_process_internal(Node{self}, enable)
}
func (self methodsNode) IsPhysicsProcessingInternal() bool {
	return self.Runtime.Node_is_physics_processing_internal(Node{self})
}
func (self methodsNode) GetWindow() Window {
	return self.Runtime.Node_get_window(Node{self})
}
func (self methodsNode) GetLastExclusiveWindow() Window {
	return self.Runtime.Node_get_last_exclusive_window(Node{self})
}
func (self methodsNode) GetTree() SceneTree {
	return self.Runtime.Node_get_tree(Node{self})
}
func (self methodsNode) CreateTween() Tween {
	return self.Runtime.Node_create_tween(Node{self})
}
func (self methodsNode) Duplicate(flags int64) Node {
	return self.Runtime.Node_duplicate(Node{self}, flags)
}
func (self methodsNode) ReplaceBy(node Node, keep_groups bool) {
	self.Runtime.Node_replace_by(Node{self}, node, keep_groups)
}
func (self methodsNode) SetSceneInstanceLoadPlaceholder(load_placeholder bool) {
	self.Runtime.Node_set_scene_instance_load_placeholder(Node{self}, load_placeholder)
}
func (self methodsNode) GetSceneInstanceLoadPlaceholder() bool {
	return self.Runtime.Node_get_scene_instance_load_placeholder(Node{self})
}
func (self methodsNode) SetEditableInstance(node Node, is_editable bool) {
	self.Runtime.Node_set_editable_instance(Node{self}, node, is_editable)
}
func (self methodsNode) IsEditableInstance(node Node) bool {
	return self.Runtime.Node_is_editable_instance(Node{self}, node)
}
func (self methodsNode) GetViewport() Viewport {
	return self.Runtime.Node_get_viewport(Node{self})
}
func (self methodsNode) QueueFree() {
	self.Runtime.Node_queue_free(Node{self})
}
func (self methodsNode) RequestReady() {
	self.Runtime.Node_request_ready(Node{self})
}
func (self methodsNode) IsNodeReady() bool {
	return self.Runtime.Node_is_node_ready(Node{self})
}
func (self methodsNode) SetMultiplayerAuthority(id int64, recursive bool) {
	self.Runtime.Node_set_multiplayer_authority(Node{self}, id, recursive)
}
func (self methodsNode) GetMultiplayerAuthority() int64 {
	return self.Runtime.Node_get_multiplayer_authority(Node{self})
}
func (self methodsNode) IsMultiplayerAuthority() bool {
	return self.Runtime.Node_is_multiplayer_authority(Node{self})
}
func (self methodsNode) GetMultiplayer() MultiplayerAPI {
	return self.Runtime.Node_get_multiplayer(Node{self})
}
func (self methodsNode) RpcConfig(method string, config any) {
	self.Runtime.Node_rpc_config(Node{self}, method, config)
}
func (self methodsNode) SetEditorDescription(editor_description string) {
	self.Runtime.Node_set_editor_description(Node{self}, editor_description)
}
func (self methodsNode) GetEditorDescription() string {
	return self.Runtime.Node_get_editor_description(Node{self})
}
func (self methodsNode) SetUniqueNameInOwner(enable bool) {
	self.Runtime.Node_set_unique_name_in_owner(Node{self}, enable)
}
func (self methodsNode) IsUniqueNameInOwner() bool {
	return self.Runtime.Node_is_unique_name_in_owner(Node{self})
}
func (self methodsNode) Rpc(method string) int64 {
	return self.Runtime.Node_rpc(Node{self}, method)
}
func (self methodsNode) RpcId(peer_id int64, method string) int64 {
	return self.Runtime.Node_rpc_id(Node{self}, peer_id, method)
}
func (self methodsNode) UpdateConfigurationWarnings() {
	self.Runtime.Node_update_configuration_warnings(Node{self})
}
func (self methodsNode) CallDeferredThreadGroup(method string) any {
	return self.Runtime.Node_call_deferred_thread_group(Node{self}, method)
}
func (self methodsNode) SetDeferredThreadGroup(property string, value any) {
	self.Runtime.Node_set_deferred_thread_group(Node{self}, property, value)
}
func (self methodsNode) NotifyDeferredThreadGroup(what int64) {
	self.Runtime.Node_notify_deferred_thread_group(Node{self}, what)
}
func (self methodsNode) CallThreadSafe(method string) any {
	return self.Runtime.Node_call_thread_safe(Node{self}, method)
}
func (self methodsNode) SetThreadSafe(property string, value any) {
	self.Runtime.Node_set_thread_safe(Node{self}, property, value)
}
func (self methodsNode) NotifyThreadSafe(what int64) {
	self.Runtime.Node_notify_thread_safe(Node{self}, what)
}

type methodsNode2D struct {
	_ [0]*methodsNode2D
	class
}

func (self Node2D) CanvasItem() CanvasItem {
	var parent CanvasItem
	parent.class = self.class
	return parent
}
func (self methodsNode2D) SetPosition(position Vector2) {
	self.Runtime.Node2D_set_position(Node2D{self}, position)
}
func (self methodsNode2D) SetRotation(radians Float) {
	self.Runtime.Node2D_set_rotation(Node2D{self}, radians)
}
func (self methodsNode2D) SetRotationDegrees(degrees Float) {
	self.Runtime.Node2D_set_rotation_degrees(Node2D{self}, degrees)
}
func (self methodsNode2D) SetSkew(radians Float) {
	self.Runtime.Node2D_set_skew(Node2D{self}, radians)
}
func (self methodsNode2D) SetScale(scale Vector2) {
	self.Runtime.Node2D_set_scale(Node2D{self}, scale)
}
func (self methodsNode2D) GetPosition() Vector2 {
	return self.Runtime.Node2D_get_position(Node2D{self})
}
func (self methodsNode2D) GetRotation() Float {
	return self.Runtime.Node2D_get_rotation(Node2D{self})
}
func (self methodsNode2D) GetRotationDegrees() Float {
	return self.Runtime.Node2D_get_rotation_degrees(Node2D{self})
}
func (self methodsNode2D) GetSkew() Float {
	return self.Runtime.Node2D_get_skew(Node2D{self})
}
func (self methodsNode2D) GetScale() Vector2 {
	return self.Runtime.Node2D_get_scale(Node2D{self})
}
func (self methodsNode2D) Rotate(radians Float) {
	self.Runtime.Node2D_rotate(Node2D{self}, radians)
}
func (self methodsNode2D) MoveLocalX(delta Float, scaled bool) {
	self.Runtime.Node2D_move_local_x(Node2D{self}, delta, scaled)
}
func (self methodsNode2D) MoveLocalY(delta Float, scaled bool) {
	self.Runtime.Node2D_move_local_y(Node2D{self}, delta, scaled)
}
func (self methodsNode2D) Translate(offset Vector2) {
	self.Runtime.Node2D_translate(Node2D{self}, offset)
}
func (self methodsNode2D) GlobalTranslate(offset Vector2) {
	self.Runtime.Node2D_global_translate(Node2D{self}, offset)
}
func (self methodsNode2D) ApplyScale(ratio Vector2) {
	self.Runtime.Node2D_apply_scale(Node2D{self}, ratio)
}
func (self methodsNode2D) SetGlobalPosition(position Vector2) {
	self.Runtime.Node2D_set_global_position(Node2D{self}, position)
}
func (self methodsNode2D) GetGlobalPosition() Vector2 {
	return self.Runtime.Node2D_get_global_position(Node2D{self})
}
func (self methodsNode2D) SetGlobalRotation(radians Float) {
	self.Runtime.Node2D_set_global_rotation(Node2D{self}, radians)
}
func (self methodsNode2D) SetGlobalRotationDegrees(degrees Float) {
	self.Runtime.Node2D_set_global_rotation_degrees(Node2D{self}, degrees)
}
func (self methodsNode2D) GetGlobalRotation() Float {
	return self.Runtime.Node2D_get_global_rotation(Node2D{self})
}
func (self methodsNode2D) GetGlobalRotationDegrees() Float {
	return self.Runtime.Node2D_get_global_rotation_degrees(Node2D{self})
}
func (self methodsNode2D) SetGlobalSkew(radians Float) {
	self.Runtime.Node2D_set_global_skew(Node2D{self}, radians)
}
func (self methodsNode2D) GetGlobalSkew() Float {
	return self.Runtime.Node2D_get_global_skew(Node2D{self})
}
func (self methodsNode2D) SetGlobalScale(scale Vector2) {
	self.Runtime.Node2D_set_global_scale(Node2D{self}, scale)
}
func (self methodsNode2D) GetGlobalScale() Vector2 {
	return self.Runtime.Node2D_get_global_scale(Node2D{self})
}
func (self methodsNode2D) SetTransform(xform Transform2D) {
	self.Runtime.Node2D_set_transform(Node2D{self}, xform)
}
func (self methodsNode2D) SetGlobalTransform(xform Transform2D) {
	self.Runtime.Node2D_set_global_transform(Node2D{self}, xform)
}
func (self methodsNode2D) LookAt(point Vector2) {
	self.Runtime.Node2D_look_at(Node2D{self}, point)
}
func (self methodsNode2D) GetAngleTo(point Vector2) Float {
	return self.Runtime.Node2D_get_angle_to(Node2D{self}, point)
}
func (self methodsNode2D) ToLocal(global_point Vector2) Vector2 {
	return self.Runtime.Node2D_to_local(Node2D{self}, global_point)
}
func (self methodsNode2D) ToGlobal(local_point Vector2) Vector2 {
	return self.Runtime.Node2D_to_global(Node2D{self}, local_point)
}
func (self methodsNode2D) GetRelativeTransformToParent(parent Node) Transform2D {
	return self.Runtime.Node2D_get_relative_transform_to_parent(Node2D{self}, parent)
}

type methodsNode3D struct {
	_ [0]*methodsNode3D
	class
}

func (self Node3D) Node() Node { var parent Node; parent.class = self.class; return parent }
func (self methodsNode3D) SetTransform(local Transform3D) {
	self.Runtime.Node3D_set_transform(Node3D{self}, local)
}
func (self methodsNode3D) GetTransform() Transform3D {
	return self.Runtime.Node3D_get_transform(Node3D{self})
}
func (self methodsNode3D) SetPosition(position Vector3) {
	self.Runtime.Node3D_set_position(Node3D{self}, position)
}
func (self methodsNode3D) GetPosition() Vector3 {
	return self.Runtime.Node3D_get_position(Node3D{self})
}
func (self methodsNode3D) SetRotation(euler_radians Vector3) {
	self.Runtime.Node3D_set_rotation(Node3D{self}, euler_radians)
}
func (self methodsNode3D) GetRotation() Vector3 {
	return self.Runtime.Node3D_get_rotation(Node3D{self})
}
func (self methodsNode3D) SetRotationDegrees(euler_degrees Vector3) {
	self.Runtime.Node3D_set_rotation_degrees(Node3D{self}, euler_degrees)
}
func (self methodsNode3D) GetRotationDegrees() Vector3 {
	return self.Runtime.Node3D_get_rotation_degrees(Node3D{self})
}
func (self methodsNode3D) SetRotationOrder(order EulerOrder) {
	self.Runtime.Node3D_set_rotation_order(Node3D{self}, order)
}
func (self methodsNode3D) GetRotationOrder() EulerOrder {
	return self.Runtime.Node3D_get_rotation_order(Node3D{self})
}
func (self methodsNode3D) SetRotationEditMode(edit_mode Node3DRotationEditMode) {
	self.Runtime.Node3D_set_rotation_edit_mode(Node3D{self}, edit_mode)
}
func (self methodsNode3D) GetRotationEditMode() Node3DRotationEditMode {
	return self.Runtime.Node3D_get_rotation_edit_mode(Node3D{self})
}
func (self methodsNode3D) SetScale(scale Vector3) {
	self.Runtime.Node3D_set_scale(Node3D{self}, scale)
}
func (self methodsNode3D) GetScale() Vector3 {
	return self.Runtime.Node3D_get_scale(Node3D{self})
}
func (self methodsNode3D) SetQuaternion(quaternion Quaternion) {
	self.Runtime.Node3D_set_quaternion(Node3D{self}, quaternion)
}
func (self methodsNode3D) GetQuaternion() Quaternion {
	return self.Runtime.Node3D_get_quaternion(Node3D{self})
}
func (self methodsNode3D) SetBasis(basis Basis) {
	self.Runtime.Node3D_set_basis(Node3D{self}, basis)
}
func (self methodsNode3D) GetBasis() Basis {
	return self.Runtime.Node3D_get_basis(Node3D{self})
}
func (self methodsNode3D) SetGlobalTransform(global Transform3D) {
	self.Runtime.Node3D_set_global_transform(Node3D{self}, global)
}
func (self methodsNode3D) GetGlobalTransform() Transform3D {
	return self.Runtime.Node3D_get_global_transform(Node3D{self})
}
func (self methodsNode3D) SetGlobalPosition(position Vector3) {
	self.Runtime.Node3D_set_global_position(Node3D{self}, position)
}
func (self methodsNode3D) GetGlobalPosition() Vector3 {
	return self.Runtime.Node3D_get_global_position(Node3D{self})
}
func (self methodsNode3D) SetGlobalBasis(basis Basis) {
	self.Runtime.Node3D_set_global_basis(Node3D{self}, basis)
}
func (self methodsNode3D) GetGlobalBasis() Basis {
	return self.Runtime.Node3D_get_global_basis(Node3D{self})
}
func (self methodsNode3D) SetGlobalRotation(euler_radians Vector3) {
	self.Runtime.Node3D_set_global_rotation(Node3D{self}, euler_radians)
}
func (self methodsNode3D) GetGlobalRotation() Vector3 {
	return self.Runtime.Node3D_get_global_rotation(Node3D{self})
}
func (self methodsNode3D) SetGlobalRotationDegrees(euler_degrees Vector3) {
	self.Runtime.Node3D_set_global_rotation_degrees(Node3D{self}, euler_degrees)
}
func (self methodsNode3D) GetGlobalRotationDegrees() Vector3 {
	return self.Runtime.Node3D_get_global_rotation_degrees(Node3D{self})
}
func (self methodsNode3D) GetParentNode3d() Node3D {
	return self.Runtime.Node3D_get_parent_node_3d(Node3D{self})
}
func (self methodsNode3D) SetIgnoreTransformNotification(enabled bool) {
	self.Runtime.Node3D_set_ignore_transform_notification(Node3D{self}, enabled)
}
func (self methodsNode3D) SetAsTopLevel(enable bool) {
	self.Runtime.Node3D_set_as_top_level(Node3D{self}, enable)
}
func (self methodsNode3D) IsSetAsTopLevel() bool {
	return self.Runtime.Node3D_is_set_as_top_level(Node3D{self})
}
func (self methodsNode3D) SetDisableScale(disable bool) {
	self.Runtime.Node3D_set_disable_scale(Node3D{self}, disable)
}
func (self methodsNode3D) IsScaleDisabled() bool {
	return self.Runtime.Node3D_is_scale_disabled(Node3D{self})
}
func (self methodsNode3D) GetWorld3d() World3D {
	return self.Runtime.Node3D_get_world_3d(Node3D{self})
}
func (self methodsNode3D) ForceUpdateTransform() {
	self.Runtime.Node3D_force_update_transform(Node3D{self})
}
func (self methodsNode3D) SetVisibilityParent(path NodePath) {
	self.Runtime.Node3D_set_visibility_parent(Node3D{self}, path)
}
func (self methodsNode3D) GetVisibilityParent() NodePath {
	return self.Runtime.Node3D_get_visibility_parent(Node3D{self})
}
func (self methodsNode3D) UpdateGizmos() {
	self.Runtime.Node3D_update_gizmos(Node3D{self})
}
func (self methodsNode3D) AddGizmo(gizmo Node3DGizmo) {
	self.Runtime.Node3D_add_gizmo(Node3D{self}, gizmo)
}
func (self methodsNode3D) GetGizmos() ArrayOf[Node3DGizmo] {
	return self.Runtime.Node3D_get_gizmos(Node3D{self})
}
func (self methodsNode3D) ClearGizmos() {
	self.Runtime.Node3D_clear_gizmos(Node3D{self})
}
func (self methodsNode3D) SetSubgizmoSelection(gizmo Node3DGizmo, id int64, transform Transform3D) {
	self.Runtime.Node3D_set_subgizmo_selection(Node3D{self}, gizmo, id, transform)
}
func (self methodsNode3D) ClearSubgizmoSelection() {
	self.Runtime.Node3D_clear_subgizmo_selection(Node3D{self})
}
func (self methodsNode3D) SetVisible(visible bool) {
	self.Runtime.Node3D_set_visible(Node3D{self}, visible)
}
func (self methodsNode3D) IsVisible() bool {
	return self.Runtime.Node3D_is_visible(Node3D{self})
}
func (self methodsNode3D) IsVisibleInTree() bool {
	return self.Runtime.Node3D_is_visible_in_tree(Node3D{self})
}
func (self methodsNode3D) Show() {
	self.Runtime.Node3D_show(Node3D{self})
}
func (self methodsNode3D) Hide() {
	self.Runtime.Node3D_hide(Node3D{self})
}
func (self methodsNode3D) SetNotifyLocalTransform(enable bool) {
	self.Runtime.Node3D_set_notify_local_transform(Node3D{self}, enable)
}
func (self methodsNode3D) IsLocalTransformNotificationEnabled() bool {
	return self.Runtime.Node3D_is_local_transform_notification_enabled(Node3D{self})
}
func (self methodsNode3D) SetNotifyTransform(enable bool) {
	self.Runtime.Node3D_set_notify_transform(Node3D{self}, enable)
}
func (self methodsNode3D) IsTransformNotificationEnabled() bool {
	return self.Runtime.Node3D_is_transform_notification_enabled(Node3D{self})
}
func (self methodsNode3D) Rotate(axis Vector3, angle Float) {
	self.Runtime.Node3D_rotate(Node3D{self}, axis, angle)
}
func (self methodsNode3D) GlobalRotate(axis Vector3, angle Float) {
	self.Runtime.Node3D_global_rotate(Node3D{self}, axis, angle)
}
func (self methodsNode3D) GlobalScale(scale Vector3) {
	self.Runtime.Node3D_global_scale(Node3D{self}, scale)
}
func (self methodsNode3D) GlobalTranslate(offset Vector3) {
	self.Runtime.Node3D_global_translate(Node3D{self}, offset)
}
func (self methodsNode3D) RotateObjectLocal(axis Vector3, angle Float) {
	self.Runtime.Node3D_rotate_object_local(Node3D{self}, axis, angle)
}
func (self methodsNode3D) ScaleObjectLocal(scale Vector3) {
	self.Runtime.Node3D_scale_object_local(Node3D{self}, scale)
}
func (self methodsNode3D) TranslateObjectLocal(offset Vector3) {
	self.Runtime.Node3D_translate_object_local(Node3D{self}, offset)
}
func (self methodsNode3D) RotateX(angle Float) {
	self.Runtime.Node3D_rotate_x(Node3D{self}, angle)
}
func (self methodsNode3D) RotateY(angle Float) {
	self.Runtime.Node3D_rotate_y(Node3D{self}, angle)
}
func (self methodsNode3D) RotateZ(angle Float) {
	self.Runtime.Node3D_rotate_z(Node3D{self}, angle)
}
func (self methodsNode3D) Translate(offset Vector3) {
	self.Runtime.Node3D_translate(Node3D{self}, offset)
}
func (self methodsNode3D) Orthonormalize() {
	self.Runtime.Node3D_orthonormalize(Node3D{self})
}
func (self methodsNode3D) SetIdentity() {
	self.Runtime.Node3D_set_identity(Node3D{self})
}
func (self methodsNode3D) LookAt(target Vector3, up Vector3, use_model_front bool) {
	self.Runtime.Node3D_look_at(Node3D{self}, target, up, use_model_front)
}
func (self methodsNode3D) LookAtFromPosition(position Vector3, target Vector3, up Vector3, use_model_front bool) {
	self.Runtime.Node3D_look_at_from_position(Node3D{self}, position, target, up, use_model_front)
}
func (self methodsNode3D) ToLocal(global_point Vector3) Vector3 {
	return self.Runtime.Node3D_to_local(Node3D{self}, global_point)
}
func (self methodsNode3D) ToGlobal(local_point Vector3) Vector3 {
	return self.Runtime.Node3D_to_global(Node3D{self}, local_point)
}

type methodsNode3DGizmo struct {
	_ [0]*methodsNode3DGizmo
	class
}

func (self Node3DGizmo) RefCounted() RefCounted {
	var parent RefCounted
	parent.class = self.class
	return parent
}

type methodsNoise struct {
	_ [0]*methodsNoise
	class
}

func (self Noise) Resource() Resource { var parent Resource; parent.class = self.class; return parent }
func (self methodsNoise) GetNoise1d(x Float) Float {
	return self.Runtime.Noise_get_noise_1d(Noise{self}, x)
}
func (self methodsNoise) GetNoise2d(x Float, y Float) Float {
	return self.Runtime.Noise_get_noise_2d(Noise{self}, x, y)
}
func (self methodsNoise) GetNoise2dv(v Vector2) Float {
	return self.Runtime.Noise_get_noise_2dv(Noise{self}, v)
}
func (self methodsNoise) GetNoise3d(x Float, y Float, z Float) Float {
	return self.Runtime.Noise_get_noise_3d(Noise{self}, x, y, z)
}
func (self methodsNoise) GetNoise3dv(v Vector3) Float {
	return self.Runtime.Noise_get_noise_3dv(Noise{self}, v)
}
func (self methodsNoise) GetImage(width int64, height int64, invert bool, in_3d_space bool, normalize bool) Image {
	return self.Runtime.Noise_get_image(Noise{self}, width, height, invert, in_3d_space, normalize)
}
func (self methodsNoise) GetSeamlessImage(width int64, height int64, invert bool, in_3d_space bool, skirt Float, normalize bool) Image {
	return self.Runtime.Noise_get_seamless_image(Noise{self}, width, height, invert, in_3d_space, skirt, normalize)
}
func (self methodsNoise) GetImage3d(width int64, height int64, depth int64, invert bool, normalize bool) ArrayOf[Image] {
	return self.Runtime.Noise_get_image_3d(Noise{self}, width, height, depth, invert, normalize)
}
func (self methodsNoise) GetSeamlessImage3d(width int64, height int64, depth int64, invert bool, skirt Float, normalize bool) ArrayOf[Image] {
	return self.Runtime.Noise_get_seamless_image_3d(Noise{self}, width, height, depth, invert, skirt, normalize)
}

type methodsNoiseTexture2D struct {
	_ [0]*methodsNoiseTexture2D
	class
}

func (self NoiseTexture2D) Texture2D() Texture2D {
	var parent Texture2D
	parent.class = self.class
	return parent
}
func (self methodsNoiseTexture2D) SetWidth(width int64) {
	self.Runtime.NoiseTexture2D_set_width(NoiseTexture2D{self}, width)
}
func (self methodsNoiseTexture2D) SetHeight(height int64) {
	self.Runtime.NoiseTexture2D_set_height(NoiseTexture2D{self}, height)
}
func (self methodsNoiseTexture2D) SetInvert(invert bool) {
	self.Runtime.NoiseTexture2D_set_invert(NoiseTexture2D{self}, invert)
}
func (self methodsNoiseTexture2D) GetInvert() bool {
	return self.Runtime.NoiseTexture2D_get_invert(NoiseTexture2D{self})
}
func (self methodsNoiseTexture2D) SetIn3dSpace(enable bool) {
	self.Runtime.NoiseTexture2D_set_in_3d_space(NoiseTexture2D{self}, enable)
}
func (self methodsNoiseTexture2D) IsIn3dSpace() bool {
	return self.Runtime.NoiseTexture2D_is_in_3d_space(NoiseTexture2D{self})
}
func (self methodsNoiseTexture2D) SetGenerateMipmaps(invert bool) {
	self.Runtime.NoiseTexture2D_set_generate_mipmaps(NoiseTexture2D{self}, invert)
}
func (self methodsNoiseTexture2D) IsGeneratingMipmaps() bool {
	return self.Runtime.NoiseTexture2D_is_generating_mipmaps(NoiseTexture2D{self})
}
func (self methodsNoiseTexture2D) SetSeamless(seamless bool) {
	self.Runtime.NoiseTexture2D_set_seamless(NoiseTexture2D{self}, seamless)
}
func (self methodsNoiseTexture2D) GetSeamless() bool {
	return self.Runtime.NoiseTexture2D_get_seamless(NoiseTexture2D{self})
}
func (self methodsNoiseTexture2D) SetSeamlessBlendSkirt(seamless_blend_skirt Float) {
	self.Runtime.NoiseTexture2D_set_seamless_blend_skirt(NoiseTexture2D{self}, seamless_blend_skirt)
}
func (self methodsNoiseTexture2D) GetSeamlessBlendSkirt() Float {
	return self.Runtime.NoiseTexture2D_get_seamless_blend_skirt(NoiseTexture2D{self})
}
func (self methodsNoiseTexture2D) SetAsNormalMap(as_normal_map bool) {
	self.Runtime.NoiseTexture2D_set_as_normal_map(NoiseTexture2D{self}, as_normal_map)
}
func (self methodsNoiseTexture2D) IsNormalMap() bool {
	return self.Runtime.NoiseTexture2D_is_normal_map(NoiseTexture2D{self})
}
func (self methodsNoiseTexture2D) SetBumpStrength(bump_strength Float) {
	self.Runtime.NoiseTexture2D_set_bump_strength(NoiseTexture2D{self}, bump_strength)
}
func (self methodsNoiseTexture2D) GetBumpStrength() Float {
	return self.Runtime.NoiseTexture2D_get_bump_strength(NoiseTexture2D{self})
}
func (self methodsNoiseTexture2D) SetNormalize(normalize bool) {
	self.Runtime.NoiseTexture2D_set_normalize(NoiseTexture2D{self}, normalize)
}
func (self methodsNoiseTexture2D) IsNormalized() bool {
	return self.Runtime.NoiseTexture2D_is_normalized(NoiseTexture2D{self})
}
func (self methodsNoiseTexture2D) SetColorRamp(gradient Gradient) {
	self.Runtime.NoiseTexture2D_set_color_ramp(NoiseTexture2D{self}, gradient)
}
func (self methodsNoiseTexture2D) GetColorRamp() Gradient {
	return self.Runtime.NoiseTexture2D_get_color_ramp(NoiseTexture2D{self})
}
func (self methodsNoiseTexture2D) SetNoise(noise Noise) {
	self.Runtime.NoiseTexture2D_set_noise(NoiseTexture2D{self}, noise)
}
func (self methodsNoiseTexture2D) GetNoise() Noise {
	return self.Runtime.NoiseTexture2D_get_noise(NoiseTexture2D{self})
}

type methodsNoiseTexture3D struct {
	_ [0]*methodsNoiseTexture3D
	class
}

func (self NoiseTexture3D) Texture3D() Texture3D {
	var parent Texture3D
	parent.class = self.class
	return parent
}
func (self methodsNoiseTexture3D) SetWidth(width int64) {
	self.Runtime.NoiseTexture3D_set_width(NoiseTexture3D{self}, width)
}
func (self methodsNoiseTexture3D) SetHeight(height int64) {
	self.Runtime.NoiseTexture3D_set_height(NoiseTexture3D{self}, height)
}
func (self methodsNoiseTexture3D) SetDepth(depth int64) {
	self.Runtime.NoiseTexture3D_set_depth(NoiseTexture3D{self}, depth)
}
func (self methodsNoiseTexture3D) SetInvert(invert bool) {
	self.Runtime.NoiseTexture3D_set_invert(NoiseTexture3D{self}, invert)
}
func (self methodsNoiseTexture3D) GetInvert() bool {
	return self.Runtime.NoiseTexture3D_get_invert(NoiseTexture3D{self})
}
func (self methodsNoiseTexture3D) SetSeamless(seamless bool) {
	self.Runtime.NoiseTexture3D_set_seamless(NoiseTexture3D{self}, seamless)
}
func (self methodsNoiseTexture3D) GetSeamless() bool {
	return self.Runtime.NoiseTexture3D_get_seamless(NoiseTexture3D{self})
}
func (self methodsNoiseTexture3D) SetSeamlessBlendSkirt(seamless_blend_skirt Float) {
	self.Runtime.NoiseTexture3D_set_seamless_blend_skirt(NoiseTexture3D{self}, seamless_blend_skirt)
}
func (self methodsNoiseTexture3D) GetSeamlessBlendSkirt() Float {
	return self.Runtime.NoiseTexture3D_get_seamless_blend_skirt(NoiseTexture3D{self})
}
func (self methodsNoiseTexture3D) SetNormalize(normalize bool) {
	self.Runtime.NoiseTexture3D_set_normalize(NoiseTexture3D{self}, normalize)
}
func (self methodsNoiseTexture3D) IsNormalized() bool {
	return self.Runtime.NoiseTexture3D_is_normalized(NoiseTexture3D{self})
}
func (self methodsNoiseTexture3D) SetColorRamp(gradient Gradient) {
	self.Runtime.NoiseTexture3D_set_color_ramp(NoiseTexture3D{self}, gradient)
}
func (self methodsNoiseTexture3D) GetColorRamp() Gradient {
	return self.Runtime.NoiseTexture3D_get_color_ramp(NoiseTexture3D{self})
}
func (self methodsNoiseTexture3D) SetNoise(noise Noise) {
	self.Runtime.NoiseTexture3D_set_noise(NoiseTexture3D{self}, noise)
}
func (self methodsNoiseTexture3D) GetNoise() Noise {
	return self.Runtime.NoiseTexture3D_get_noise(NoiseTexture3D{self})
}

type methodsORMMaterial3D struct {
	_ [0]*methodsORMMaterial3D
	class
}

func (self ORMMaterial3D) BaseMaterial3D() BaseMaterial3D {
	var parent BaseMaterial3D
	parent.class = self.class
	return parent
}

type methodsOS struct {
	_ [0]*methodsOS
	class
}

func (self OS) Object() Object { var parent Object; parent.class = self.class; return parent }
func (self methodsOS) GetConnectedMidiInputs() PackedStringArray {
	return self.Runtime.OS_get_connected_midi_inputs(OS{self})
}
func (self methodsOS) OpenMidiInputs() {
	self.Runtime.OS_open_midi_inputs(OS{self})
}
func (self methodsOS) CloseMidiInputs() {
	self.Runtime.OS_close_midi_inputs(OS{self})
}
func (self methodsOS) Alert(text string, title string) {
	self.Runtime.OS_alert(OS{self}, text, title)
}
func (self methodsOS) Crash(message string) {
	self.Runtime.OS_crash(OS{self}, message)
}
func (self methodsOS) SetLowProcessorUsageMode(enable bool) {
	self.Runtime.OS_set_low_processor_usage_mode(OS{self}, enable)
}
func (self methodsOS) IsInLowProcessorUsageMode() bool {
	return self.Runtime.OS_is_in_low_processor_usage_mode(OS{self})
}
func (self methodsOS) SetLowProcessorUsageModeSleepUsec(usec int64) {
	self.Runtime.OS_set_low_processor_usage_mode_sleep_usec(OS{self}, usec)
}
func (self methodsOS) GetLowProcessorUsageModeSleepUsec() int64 {
	return self.Runtime.OS_get_low_processor_usage_mode_sleep_usec(OS{self})
}
func (self methodsOS) SetDeltaSmoothing(delta_smoothing_enabled bool) {
	self.Runtime.OS_set_delta_smoothing(OS{self}, delta_smoothing_enabled)
}
func (self methodsOS) IsDeltaSmoothingEnabled() bool {
	return self.Runtime.OS_is_delta_smoothing_enabled(OS{self})
}
func (self methodsOS) GetProcessorCount() int64 {
	return self.Runtime.OS_get_processor_count(OS{self})
}
func (self methodsOS) GetProcessorName() string {
	return self.Runtime.OS_get_processor_name(OS{self})
}
func (self methodsOS) GetSystemFonts() PackedStringArray {
	return self.Runtime.OS_get_system_fonts(OS{self})
}
func (self methodsOS) GetSystemFontPath(font_name string, weight int64, stretch int64, italic bool) string {
	return self.Runtime.OS_get_system_font_path(OS{self}, font_name, weight, stretch, italic)
}
func (self methodsOS) GetSystemFontPathForText(font_name string, text string, locale string, script string, weight int64, stretch int64, italic bool) PackedStringArray {
	return self.Runtime.OS_get_system_font_path_for_text(OS{self}, font_name, text, locale, script, weight, stretch, italic)
}
func (self methodsOS) GetExecutablePath() string {
	return self.Runtime.OS_get_executable_path(OS{self})
}
func (self methodsOS) ReadStringFromStdin() string {
	return self.Runtime.OS_read_string_from_stdin(OS{self})
}
func (self methodsOS) Execute(path string, arguments PackedStringArray, output Array, read_stderr bool, open_console bool) int64 {
	return self.Runtime.OS_execute(OS{self}, path, arguments, output, read_stderr, open_console)
}
func (self methodsOS) CreateProcess(path string, arguments PackedStringArray, open_console bool) int64 {
	return self.Runtime.OS_create_process(OS{self}, path, arguments, open_console)
}
func (self methodsOS) CreateInstance(arguments PackedStringArray) int64 {
	return self.Runtime.OS_create_instance(OS{self}, arguments)
}
func (self methodsOS) Kill(pid int64) int64 {
	return self.Runtime.OS_kill(OS{self}, pid)
}
func (self methodsOS) ShellOpen(uri string) int64 {
	return self.Runtime.OS_shell_open(OS{self}, uri)
}
func (self methodsOS) ShellShowInFileManager(file_or_dir_path string, open_folder bool) int64 {
	return self.Runtime.OS_shell_show_in_file_manager(OS{self}, file_or_dir_path, open_folder)
}
func (self methodsOS) IsProcessRunning(pid int64) bool {
	return self.Runtime.OS_is_process_running(OS{self}, pid)
}
func (self methodsOS) GetProcessId() int64 {
	return self.Runtime.OS_get_process_id(OS{self})
}
func (self methodsOS) HasEnvironment(variable string) bool {
	return self.Runtime.OS_has_environment(OS{self}, variable)
}
func (self methodsOS) GetEnvironment(variable string) string {
	return self.Runtime.OS_get_environment(OS{self}, variable)
}
func (self methodsOS) SetEnvironment(variable string, value string) {
	self.Runtime.OS_set_environment(OS{self}, variable, value)
}
func (self methodsOS) UnsetEnvironment(variable string) {
	self.Runtime.OS_unset_environment(OS{self}, variable)
}
func (self methodsOS) GetName() string {
	return self.Runtime.OS_get_name(OS{self})
}
func (self methodsOS) GetDistributionName() string {
	return self.Runtime.OS_get_distribution_name(OS{self})
}
func (self methodsOS) GetVersion() string {
	return self.Runtime.OS_get_version(OS{self})
}
func (self methodsOS) GetCmdlineArgs() PackedStringArray {
	return self.Runtime.OS_get_cmdline_args(OS{self})
}
func (self methodsOS) GetCmdlineUserArgs() PackedStringArray {
	return self.Runtime.OS_get_cmdline_user_args(OS{self})
}
func (self methodsOS) GetVideoAdapterDriverInfo() PackedStringArray {
	return self.Runtime.OS_get_video_adapter_driver_info(OS{self})
}
func (self methodsOS) SetRestartOnExit(restart bool, arguments PackedStringArray) {
	self.Runtime.OS_set_restart_on_exit(OS{self}, restart, arguments)
}
func (self methodsOS) IsRestartOnExitSet() bool {
	return self.Runtime.OS_is_restart_on_exit_set(OS{self})
}
func (self methodsOS) GetRestartOnExitArguments() PackedStringArray {
	return self.Runtime.OS_get_restart_on_exit_arguments(OS{self})
}
func (self methodsOS) DelayUsec(usec int64) {
	self.Runtime.OS_delay_usec(OS{self}, usec)
}
func (self methodsOS) DelayMsec(msec int64) {
	self.Runtime.OS_delay_msec(OS{self}, msec)
}
func (self methodsOS) GetLocale() string {
	return self.Runtime.OS_get_locale(OS{self})
}
func (self methodsOS) GetLocaleLanguage() string {
	return self.Runtime.OS_get_locale_language(OS{self})
}
func (self methodsOS) GetModelName() string {
	return self.Runtime.OS_get_model_name(OS{self})
}
func (self methodsOS) IsUserfsPersistent() bool {
	return self.Runtime.OS_is_userfs_persistent(OS{self})
}
func (self methodsOS) IsStdoutVerbose() bool {
	return self.Runtime.OS_is_stdout_verbose(OS{self})
}
func (self methodsOS) IsDebugBuild() bool {
	return self.Runtime.OS_is_debug_build(OS{self})
}
func (self methodsOS) GetStaticMemoryUsage() int64 {
	return self.Runtime.OS_get_static_memory_usage(OS{self})
}
func (self methodsOS) GetStaticMemoryPeakUsage() int64 {
	return self.Runtime.OS_get_static_memory_peak_usage(OS{self})
}
func (self methodsOS) GetMemoryInfo() Dictionary {
	return self.Runtime.OS_get_memory_info(OS{self})
}
func (self methodsOS) MoveToTrash(path string) int64 {
	return self.Runtime.OS_move_to_trash(OS{self}, path)
}
func (self methodsOS) GetUserDataDir() string {
	return self.Runtime.OS_get_user_data_dir(OS{self})
}
func (self methodsOS) GetSystemDir(dir OSSystemDir, shared_storage bool) string {
	return self.Runtime.OS_get_system_dir(OS{self}, dir, shared_storage)
}
func (self methodsOS) GetConfigDir() string {
	return self.Runtime.OS_get_config_dir(OS{self})
}
func (self methodsOS) GetDataDir() string {
	return self.Runtime.OS_get_data_dir(OS{self})
}
func (self methodsOS) GetCacheDir() string {
	return self.Runtime.OS_get_cache_dir(OS{self})
}
func (self methodsOS) GetUniqueId() string {
	return self.Runtime.OS_get_unique_id(OS{self})
}
func (self methodsOS) GetKeycodeString(code Key) string {
	return self.Runtime.OS_get_keycode_string(OS{self}, code)
}
func (self methodsOS) IsKeycodeUnicode(code int64) bool {
	return self.Runtime.OS_is_keycode_unicode(OS{self}, code)
}
func (self methodsOS) FindKeycodeFromString(s string) Key {
	return self.Runtime.OS_find_keycode_from_string(OS{self}, s)
}
func (self methodsOS) SetUseFileAccessSaveAndSwap(enabled bool) {
	self.Runtime.OS_set_use_file_access_save_and_swap(OS{self}, enabled)
}
func (self methodsOS) SetThreadName(name string) int64 {
	return self.Runtime.OS_set_thread_name(OS{self}, name)
}
func (self methodsOS) GetThreadCallerId() int64 {
	return self.Runtime.OS_get_thread_caller_id(OS{self})
}
func (self methodsOS) GetMainThreadId() int64 {
	return self.Runtime.OS_get_main_thread_id(OS{self})
}
func (self methodsOS) HasFeature(tag_name string) bool {
	return self.Runtime.OS_has_feature(OS{self}, tag_name)
}
func (self methodsOS) IsSandboxed() bool {
	return self.Runtime.OS_is_sandboxed(OS{self})
}
func (self methodsOS) RequestPermission(name string) bool {
	return self.Runtime.OS_request_permission(OS{self}, name)
}
func (self methodsOS) RequestPermissions() bool {
	return self.Runtime.OS_request_permissions(OS{self})
}
func (self methodsOS) GetGrantedPermissions() PackedStringArray {
	return self.Runtime.OS_get_granted_permissions(OS{self})
}
func (self methodsOS) RevokeGrantedPermissions() {
	self.Runtime.OS_revoke_granted_permissions(OS{self})
}

type methodsObject struct {
	_ [0]*methodsObject
	class
}

func (self methodsObject) GetClass() string {
	return self.Runtime.Object_get_class(Object{self})
}
func (self methodsObject) IsClass(class string) bool {
	return self.Runtime.Object_is_class(Object{self}, class)
}
func (self methodsObject) Set(property string, value any) {
	self.Runtime.Object_set(Object{self}, property, value)
}
func (self methodsObject) Get(property string) any {
	return self.Runtime.Object_get(Object{self}, property)
}
func (self methodsObject) SetIndexed(property_path NodePath, value any) {
	self.Runtime.Object_set_indexed(Object{self}, property_path, value)
}
func (self methodsObject) GetIndexed(property_path NodePath) any {
	return self.Runtime.Object_get_indexed(Object{self}, property_path)
}
func (self methodsObject) GetPropertyList() ArrayOf[Dictionary] {
	return self.Runtime.Object_get_property_list(Object{self})
}
func (self methodsObject) GetMethodList() ArrayOf[Dictionary] {
	return self.Runtime.Object_get_method_list(Object{self})
}
func (self methodsObject) PropertyCanRevert(property string) bool {
	return self.Runtime.Object_property_can_revert(Object{self}, property)
}
func (self methodsObject) PropertyGetRevert(property string) any {
	return self.Runtime.Object_property_get_revert(Object{self}, property)
}
func (self methodsObject) Notification(what int64, reversed bool) {
	self.Runtime.Object_notification(Object{self}, what, reversed)
}
func (self methodsObject) ToString() string {
	return self.Runtime.Object_to_string(Object{self})
}
func (self methodsObject) GetInstanceId() int64 {
	return self.Runtime.Object_get_instance_id(Object{self})
}
func (self methodsObject) SetScript(script any) {
	self.Runtime.Object_set_script(Object{self}, script)
}
func (self methodsObject) GetScript() any {
	return self.Runtime.Object_get_script(Object{self})
}
func (self methodsObject) SetMeta(name string, value any) {
	self.Runtime.Object_set_meta(Object{self}, name, value)
}
func (self methodsObject) RemoveMeta(name string) {
	self.Runtime.Object_remove_meta(Object{self}, name)
}
func (self methodsObject) GetMeta(name string, def any) any {
	return self.Runtime.Object_get_meta(Object{self}, name, def)
}
func (self methodsObject) HasMeta(name string) bool {
	return self.Runtime.Object_has_meta(Object{self}, name)
}
func (self methodsObject) GetMetaList() ArrayOf[string] {
	return self.Runtime.Object_get_meta_list(Object{self})
}
func (self methodsObject) AddUserSignal(signal string, arguments Array) {
	self.Runtime.Object_add_user_signal(Object{self}, signal, arguments)
}
func (self methodsObject) HasUserSignal(signal string) bool {
	return self.Runtime.Object_has_user_signal(Object{self}, signal)
}
func (self methodsObject) EmitSignal(signal string) int64 {
	return self.Runtime.Object_emit_signal(Object{self}, signal)
}
func (self methodsObject) Call(method string) any {
	return self.Runtime.Object_call(Object{self}, method)
}
func (self methodsObject) CallDeferred(method string) any {
	return self.Runtime.Object_call_deferred(Object{self}, method)
}
func (self methodsObject) SetDeferred(property string, value any) {
	self.Runtime.Object_set_deferred(Object{self}, property, value)
}
func (self methodsObject) Callv(method string, arg_array Array) any {
	return self.Runtime.Object_callv(Object{self}, method, arg_array)
}
func (self methodsObject) HasMethod(method string) bool {
	return self.Runtime.Object_has_method(Object{self}, method)
}
func (self methodsObject) HasSignal(signal string) bool {
	return self.Runtime.Object_has_signal(Object{self}, signal)
}
func (self methodsObject) GetSignalList() ArrayOf[Dictionary] {
	return self.Runtime.Object_get_signal_list(Object{self})
}
func (self methodsObject) GetSignalConnectionList(signal string) ArrayOf[Dictionary] {
	return self.Runtime.Object_get_signal_connection_list(Object{self}, signal)
}
func (self methodsObject) GetIncomingConnections() ArrayOf[Dictionary] {
	return self.Runtime.Object_get_incoming_connections(Object{self})
}
func (self methodsObject) Connect(signal string, callable Callable, flags int64) int64 {
	return self.Runtime.Object_connect(Object{self}, signal, callable, flags)
}
func (self methodsObject) Disconnect(signal string, callable Callable) {
	self.Runtime.Object_disconnect(Object{self}, signal, callable)
}
func (self methodsObject) IsConnected(signal string, callable Callable) bool {
	return self.Runtime.Object_is_connected(Object{self}, signal, callable)
}
func (self methodsObject) SetBlockSignals(enable bool) {
	self.Runtime.Object_set_block_signals(Object{self}, enable)
}
func (self methodsObject) IsBlockingSignals() bool {
	return self.Runtime.Object_is_blocking_signals(Object{self})
}
func (self methodsObject) NotifyPropertyListChanged() {
	self.Runtime.Object_notify_property_list_changed(Object{self})
}
func (self methodsObject) SetMessageTranslation(enable bool) {
	self.Runtime.Object_set_message_translation(Object{self}, enable)
}
func (self methodsObject) CanTranslateMessages() bool {
	return self.Runtime.Object_can_translate_messages(Object{self})
}
func (self methodsObject) Tr(message string, context string) string {
	return self.Runtime.Object_tr(Object{self}, message, context)
}
func (self methodsObject) TrN(message string, plural_message string, n int64, context string) string {
	return self.Runtime.Object_tr_n(Object{self}, message, plural_message, n, context)
}
func (self methodsObject) IsQueuedForDeletion() bool {
	return self.Runtime.Object_is_queued_for_deletion(Object{self})
}
func (self methodsObject) CancelFree() {
	self.Runtime.Object_cancel_free(Object{self})
}

type methodsOccluder3D struct {
	_ [0]*methodsOccluder3D
	class
}

func (self Occluder3D) Resource() Resource {
	var parent Resource
	parent.class = self.class
	return parent
}
func (self methodsOccluder3D) GetVertices() PackedVector3Array {
	return self.Runtime.Occluder3D_get_vertices(Occluder3D{self})
}
func (self methodsOccluder3D) GetIndices() PackedInt32Array {
	return self.Runtime.Occluder3D_get_indices(Occluder3D{self})
}

type methodsOccluderInstance3D struct {
	_ [0]*methodsOccluderInstance3D
	class
}

func (self OccluderInstance3D) Node3D() Node3D {
	var parent Node3D
	parent.class = self.class
	return parent
}
func (self methodsOccluderInstance3D) SetBakeMask(mask int64) {
	self.Runtime.OccluderInstance3D_set_bake_mask(OccluderInstance3D{self}, mask)
}
func (self methodsOccluderInstance3D) GetBakeMask() int64 {
	return self.Runtime.OccluderInstance3D_get_bake_mask(OccluderInstance3D{self})
}
func (self methodsOccluderInstance3D) SetBakeMaskValue(layer_number int64, value bool) {
	self.Runtime.OccluderInstance3D_set_bake_mask_value(OccluderInstance3D{self}, layer_number, value)
}
func (self methodsOccluderInstance3D) GetBakeMaskValue(layer_number int64) bool {
	return self.Runtime.OccluderInstance3D_get_bake_mask_value(OccluderInstance3D{self}, layer_number)
}
func (self methodsOccluderInstance3D) SetBakeSimplificationDistance(simplification_distance Float) {
	self.Runtime.OccluderInstance3D_set_bake_simplification_distance(OccluderInstance3D{self}, simplification_distance)
}
func (self methodsOccluderInstance3D) GetBakeSimplificationDistance() Float {
	return self.Runtime.OccluderInstance3D_get_bake_simplification_distance(OccluderInstance3D{self})
}
func (self methodsOccluderInstance3D) SetOccluder(occluder Occluder3D) {
	self.Runtime.OccluderInstance3D_set_occluder(OccluderInstance3D{self}, occluder)
}
func (self methodsOccluderInstance3D) GetOccluder() Occluder3D {
	return self.Runtime.OccluderInstance3D_get_occluder(OccluderInstance3D{self})
}

type methodsOccluderPolygon2D struct {
	_ [0]*methodsOccluderPolygon2D
	class
}

func (self OccluderPolygon2D) Resource() Resource {
	var parent Resource
	parent.class = self.class
	return parent
}
func (self methodsOccluderPolygon2D) SetClosed(closed bool) {
	self.Runtime.OccluderPolygon2D_set_closed(OccluderPolygon2D{self}, closed)
}
func (self methodsOccluderPolygon2D) IsClosed() bool {
	return self.Runtime.OccluderPolygon2D_is_closed(OccluderPolygon2D{self})
}
func (self methodsOccluderPolygon2D) SetCullMode(cull_mode OccluderPolygon2DCullMode) {
	self.Runtime.OccluderPolygon2D_set_cull_mode(OccluderPolygon2D{self}, cull_mode)
}
func (self methodsOccluderPolygon2D) GetCullMode() OccluderPolygon2DCullMode {
	return self.Runtime.OccluderPolygon2D_get_cull_mode(OccluderPolygon2D{self})
}
func (self methodsOccluderPolygon2D) SetPolygon(polygon PackedVector2Array) {
	self.Runtime.OccluderPolygon2D_set_polygon(OccluderPolygon2D{self}, polygon)
}
func (self methodsOccluderPolygon2D) GetPolygon() PackedVector2Array {
	return self.Runtime.OccluderPolygon2D_get_polygon(OccluderPolygon2D{self})
}

type methodsOfflineMultiplayerPeer struct {
	_ [0]*methodsOfflineMultiplayerPeer
	class
}

func (self OfflineMultiplayerPeer) MultiplayerPeer() MultiplayerPeer {
	var parent MultiplayerPeer
	parent.class = self.class
	return parent
}

type methodsOggPacketSequence struct {
	_ [0]*methodsOggPacketSequence
	class
}

func (self OggPacketSequence) Resource() Resource {
	var parent Resource
	parent.class = self.class
	return parent
}
func (self methodsOggPacketSequence) SetPacketData(packet_data ArrayOf[Array]) {
	self.Runtime.OggPacketSequence_set_packet_data(OggPacketSequence{self}, packet_data)
}
func (self methodsOggPacketSequence) GetPacketData() ArrayOf[Array] {
	return self.Runtime.OggPacketSequence_get_packet_data(OggPacketSequence{self})
}
func (self methodsOggPacketSequence) SetPacketGranulePositions(granule_positions PackedInt64Array) {
	self.Runtime.OggPacketSequence_set_packet_granule_positions(OggPacketSequence{self}, granule_positions)
}
func (self methodsOggPacketSequence) GetPacketGranulePositions() PackedInt64Array {
	return self.Runtime.OggPacketSequence_get_packet_granule_positions(OggPacketSequence{self})
}
func (self methodsOggPacketSequence) SetSamplingRate(sampling_rate Float) {
	self.Runtime.OggPacketSequence_set_sampling_rate(OggPacketSequence{self}, sampling_rate)
}
func (self methodsOggPacketSequence) GetSamplingRate() Float {
	return self.Runtime.OggPacketSequence_get_sampling_rate(OggPacketSequence{self})
}
func (self methodsOggPacketSequence) GetLength() Float {
	return self.Runtime.OggPacketSequence_get_length(OggPacketSequence{self})
}

type methodsOggPacketSequencePlayback struct {
	_ [0]*methodsOggPacketSequencePlayback
	class
}

func (self OggPacketSequencePlayback) RefCounted() RefCounted {
	var parent RefCounted
	parent.class = self.class
	return parent
}

type methodsOmniLight3D struct {
	_ [0]*methodsOmniLight3D
	class
}

func (self OmniLight3D) Light3D() Light3D {
	var parent Light3D
	parent.class = self.class
	return parent
}
func (self methodsOmniLight3D) SetShadowMode(mode OmniLight3DShadowMode) {
	self.Runtime.OmniLight3D_set_shadow_mode(OmniLight3D{self}, mode)
}
func (self methodsOmniLight3D) GetShadowMode() OmniLight3DShadowMode {
	return self.Runtime.OmniLight3D_get_shadow_mode(OmniLight3D{self})
}

type methodsOpenXRAPIExtension struct {
	_ [0]*methodsOpenXRAPIExtension
	class
}

func (self OpenXRAPIExtension) RefCounted() RefCounted {
	var parent RefCounted
	parent.class = self.class
	return parent
}
func (self methodsOpenXRAPIExtension) GetInstance() int64 {
	return self.Runtime.OpenXRAPIExtension_get_instance(OpenXRAPIExtension{self})
}
func (self methodsOpenXRAPIExtension) GetSystemId() int64 {
	return self.Runtime.OpenXRAPIExtension_get_system_id(OpenXRAPIExtension{self})
}
func (self methodsOpenXRAPIExtension) GetSession() int64 {
	return self.Runtime.OpenXRAPIExtension_get_session(OpenXRAPIExtension{self})
}
func (self methodsOpenXRAPIExtension) TransformFromPose(pose []byte) Transform3D {
	return self.Runtime.OpenXRAPIExtension_transform_from_pose(OpenXRAPIExtension{self}, pose)
}
func (self methodsOpenXRAPIExtension) XrResult(result int64, format string, args Array) bool {
	return self.Runtime.OpenXRAPIExtension_xr_result(OpenXRAPIExtension{self}, result, format, args)
}
func (self methodsOpenXRAPIExtension) OpenxrIsEnabled(check_run_in_editor bool) bool {
	return self.Runtime.OpenXRAPIExtension_openxr_is_enabled(OpenXRAPIExtension{self}, check_run_in_editor)
}
func (self methodsOpenXRAPIExtension) GetInstanceProcAddr(name string) int64 {
	return self.Runtime.OpenXRAPIExtension_get_instance_proc_addr(OpenXRAPIExtension{self}, name)
}
func (self methodsOpenXRAPIExtension) GetErrorString(result int64) string {
	return self.Runtime.OpenXRAPIExtension_get_error_string(OpenXRAPIExtension{self}, result)
}
func (self methodsOpenXRAPIExtension) GetSwapchainFormatName(swapchain_format int64) string {
	return self.Runtime.OpenXRAPIExtension_get_swapchain_format_name(OpenXRAPIExtension{self}, swapchain_format)
}
func (self methodsOpenXRAPIExtension) IsInitialized() bool {
	return self.Runtime.OpenXRAPIExtension_is_initialized(OpenXRAPIExtension{self})
}
func (self methodsOpenXRAPIExtension) IsRunning() bool {
	return self.Runtime.OpenXRAPIExtension_is_running(OpenXRAPIExtension{self})
}
func (self methodsOpenXRAPIExtension) GetPlaySpace() int64 {
	return self.Runtime.OpenXRAPIExtension_get_play_space(OpenXRAPIExtension{self})
}
func (self methodsOpenXRAPIExtension) GetNextFrameTime() int64 {
	return self.Runtime.OpenXRAPIExtension_get_next_frame_time(OpenXRAPIExtension{self})
}
func (self methodsOpenXRAPIExtension) CanRender() bool {
	return self.Runtime.OpenXRAPIExtension_can_render(OpenXRAPIExtension{self})
}

type methodsOpenXRAction struct {
	_ [0]*methodsOpenXRAction
	class
}

func (self OpenXRAction) Resource() Resource {
	var parent Resource
	parent.class = self.class
	return parent
}
func (self methodsOpenXRAction) SetLocalizedName(localized_name string) {
	self.Runtime.OpenXRAction_set_localized_name(OpenXRAction{self}, localized_name)
}
func (self methodsOpenXRAction) GetLocalizedName() string {
	return self.Runtime.OpenXRAction_get_localized_name(OpenXRAction{self})
}
func (self methodsOpenXRAction) SetActionType(action_type OpenXRActionActionType) {
	self.Runtime.OpenXRAction_set_action_type(OpenXRAction{self}, action_type)
}
func (self methodsOpenXRAction) GetActionType() OpenXRActionActionType {
	return self.Runtime.OpenXRAction_get_action_type(OpenXRAction{self})
}
func (self methodsOpenXRAction) SetToplevelPaths(toplevel_paths PackedStringArray) {
	self.Runtime.OpenXRAction_set_toplevel_paths(OpenXRAction{self}, toplevel_paths)
}
func (self methodsOpenXRAction) GetToplevelPaths() PackedStringArray {
	return self.Runtime.OpenXRAction_get_toplevel_paths(OpenXRAction{self})
}

type methodsOpenXRActionMap struct {
	_ [0]*methodsOpenXRActionMap
	class
}

func (self OpenXRActionMap) Resource() Resource {
	var parent Resource
	parent.class = self.class
	return parent
}
func (self methodsOpenXRActionMap) SetActionSets(action_sets Array) {
	self.Runtime.OpenXRActionMap_set_action_sets(OpenXRActionMap{self}, action_sets)
}
func (self methodsOpenXRActionMap) GetActionSets() Array {
	return self.Runtime.OpenXRActionMap_get_action_sets(OpenXRActionMap{self})
}
func (self methodsOpenXRActionMap) GetActionSetCount() int64 {
	return self.Runtime.OpenXRActionMap_get_action_set_count(OpenXRActionMap{self})
}
func (self methodsOpenXRActionMap) FindActionSet(name string) OpenXRActionSet {
	return self.Runtime.OpenXRActionMap_find_action_set(OpenXRActionMap{self}, name)
}
func (self methodsOpenXRActionMap) GetActionSet(idx int64) OpenXRActionSet {
	return self.Runtime.OpenXRActionMap_get_action_set(OpenXRActionMap{self}, idx)
}
func (self methodsOpenXRActionMap) AddActionSet(action_set OpenXRActionSet) {
	self.Runtime.OpenXRActionMap_add_action_set(OpenXRActionMap{self}, action_set)
}
func (self methodsOpenXRActionMap) RemoveActionSet(action_set OpenXRActionSet) {
	self.Runtime.OpenXRActionMap_remove_action_set(OpenXRActionMap{self}, action_set)
}
func (self methodsOpenXRActionMap) SetInteractionProfiles(interaction_profiles Array) {
	self.Runtime.OpenXRActionMap_set_interaction_profiles(OpenXRActionMap{self}, interaction_profiles)
}
func (self methodsOpenXRActionMap) GetInteractionProfiles() Array {
	return self.Runtime.OpenXRActionMap_get_interaction_profiles(OpenXRActionMap{self})
}
func (self methodsOpenXRActionMap) GetInteractionProfileCount() int64 {
	return self.Runtime.OpenXRActionMap_get_interaction_profile_count(OpenXRActionMap{self})
}
func (self methodsOpenXRActionMap) FindInteractionProfile(name string) OpenXRInteractionProfile {
	return self.Runtime.OpenXRActionMap_find_interaction_profile(OpenXRActionMap{self}, name)
}
func (self methodsOpenXRActionMap) GetInteractionProfile(idx int64) OpenXRInteractionProfile {
	return self.Runtime.OpenXRActionMap_get_interaction_profile(OpenXRActionMap{self}, idx)
}
func (self methodsOpenXRActionMap) AddInteractionProfile(interaction_profile OpenXRInteractionProfile) {
	self.Runtime.OpenXRActionMap_add_interaction_profile(OpenXRActionMap{self}, interaction_profile)
}
func (self methodsOpenXRActionMap) RemoveInteractionProfile(interaction_profile OpenXRInteractionProfile) {
	self.Runtime.OpenXRActionMap_remove_interaction_profile(OpenXRActionMap{self}, interaction_profile)
}
func (self methodsOpenXRActionMap) CreateDefaultActionSets() {
	self.Runtime.OpenXRActionMap_create_default_action_sets(OpenXRActionMap{self})
}

type methodsOpenXRActionSet struct {
	_ [0]*methodsOpenXRActionSet
	class
}

func (self OpenXRActionSet) Resource() Resource {
	var parent Resource
	parent.class = self.class
	return parent
}
func (self methodsOpenXRActionSet) SetLocalizedName(localized_name string) {
	self.Runtime.OpenXRActionSet_set_localized_name(OpenXRActionSet{self}, localized_name)
}
func (self methodsOpenXRActionSet) GetLocalizedName() string {
	return self.Runtime.OpenXRActionSet_get_localized_name(OpenXRActionSet{self})
}
func (self methodsOpenXRActionSet) SetPriority(priority int64) {
	self.Runtime.OpenXRActionSet_set_priority(OpenXRActionSet{self}, priority)
}
func (self methodsOpenXRActionSet) GetPriority() int64 {
	return self.Runtime.OpenXRActionSet_get_priority(OpenXRActionSet{self})
}
func (self methodsOpenXRActionSet) GetActionCount() int64 {
	return self.Runtime.OpenXRActionSet_get_action_count(OpenXRActionSet{self})
}
func (self methodsOpenXRActionSet) SetActions(actions Array) {
	self.Runtime.OpenXRActionSet_set_actions(OpenXRActionSet{self}, actions)
}
func (self methodsOpenXRActionSet) GetActions() Array {
	return self.Runtime.OpenXRActionSet_get_actions(OpenXRActionSet{self})
}
func (self methodsOpenXRActionSet) AddAction(action OpenXRAction) {
	self.Runtime.OpenXRActionSet_add_action(OpenXRActionSet{self}, action)
}
func (self methodsOpenXRActionSet) RemoveAction(action OpenXRAction) {
	self.Runtime.OpenXRActionSet_remove_action(OpenXRActionSet{self}, action)
}

type methodsOpenXRExtensionWrapperExtension struct {
	_ [0]*methodsOpenXRExtensionWrapperExtension
	class
}

func (self OpenXRExtensionWrapperExtension) Object() Object {
	var parent Object
	parent.class = self.class
	return parent
}
func (self methodsOpenXRExtensionWrapperExtension) GetOpenxrApi() OpenXRAPIExtension {
	return self.Runtime.OpenXRExtensionWrapperExtension_get_openxr_api(OpenXRExtensionWrapperExtension{self})
}
func (self methodsOpenXRExtensionWrapperExtension) RegisterExtensionWrapper() {
	self.Runtime.OpenXRExtensionWrapperExtension_register_extension_wrapper(OpenXRExtensionWrapperExtension{self})
}

type methodsOpenXRHand struct {
	_ [0]*methodsOpenXRHand
	class
}

func (self OpenXRHand) Node3D() Node3D { var parent Node3D; parent.class = self.class; return parent }
func (self methodsOpenXRHand) SetHand(hand OpenXRHandHands) {
	self.Runtime.OpenXRHand_set_hand(OpenXRHand{self}, hand)
}
func (self methodsOpenXRHand) GetHand() OpenXRHandHands {
	return self.Runtime.OpenXRHand_get_hand(OpenXRHand{self})
}
func (self methodsOpenXRHand) SetHandSkeleton(hand_skeleton NodePath) {
	self.Runtime.OpenXRHand_set_hand_skeleton(OpenXRHand{self}, hand_skeleton)
}
func (self methodsOpenXRHand) GetHandSkeleton() NodePath {
	return self.Runtime.OpenXRHand_get_hand_skeleton(OpenXRHand{self})
}
func (self methodsOpenXRHand) SetMotionRange(motion_range OpenXRHandMotionRange) {
	self.Runtime.OpenXRHand_set_motion_range(OpenXRHand{self}, motion_range)
}
func (self methodsOpenXRHand) GetMotionRange() OpenXRHandMotionRange {
	return self.Runtime.OpenXRHand_get_motion_range(OpenXRHand{self})
}

type methodsOpenXRIPBinding struct {
	_ [0]*methodsOpenXRIPBinding
	class
}

func (self OpenXRIPBinding) Resource() Resource {
	var parent Resource
	parent.class = self.class
	return parent
}
func (self methodsOpenXRIPBinding) SetAction(action OpenXRAction) {
	self.Runtime.OpenXRIPBinding_set_action(OpenXRIPBinding{self}, action)
}
func (self methodsOpenXRIPBinding) GetAction() OpenXRAction {
	return self.Runtime.OpenXRIPBinding_get_action(OpenXRIPBinding{self})
}
func (self methodsOpenXRIPBinding) GetPathCount() int64 {
	return self.Runtime.OpenXRIPBinding_get_path_count(OpenXRIPBinding{self})
}
func (self methodsOpenXRIPBinding) SetPaths(paths PackedStringArray) {
	self.Runtime.OpenXRIPBinding_set_paths(OpenXRIPBinding{self}, paths)
}
func (self methodsOpenXRIPBinding) GetPaths() PackedStringArray {
	return self.Runtime.OpenXRIPBinding_get_paths(OpenXRIPBinding{self})
}
func (self methodsOpenXRIPBinding) HasPath(path string) bool {
	return self.Runtime.OpenXRIPBinding_has_path(OpenXRIPBinding{self}, path)
}
func (self methodsOpenXRIPBinding) AddPath(path string) {
	self.Runtime.OpenXRIPBinding_add_path(OpenXRIPBinding{self}, path)
}
func (self methodsOpenXRIPBinding) RemovePath(path string) {
	self.Runtime.OpenXRIPBinding_remove_path(OpenXRIPBinding{self}, path)
}

type methodsOpenXRInteractionProfile struct {
	_ [0]*methodsOpenXRInteractionProfile
	class
}

func (self OpenXRInteractionProfile) Resource() Resource {
	var parent Resource
	parent.class = self.class
	return parent
}
func (self methodsOpenXRInteractionProfile) SetInteractionProfilePath(interaction_profile_path string) {
	self.Runtime.OpenXRInteractionProfile_set_interaction_profile_path(OpenXRInteractionProfile{self}, interaction_profile_path)
}
func (self methodsOpenXRInteractionProfile) GetInteractionProfilePath() string {
	return self.Runtime.OpenXRInteractionProfile_get_interaction_profile_path(OpenXRInteractionProfile{self})
}
func (self methodsOpenXRInteractionProfile) GetBindingCount() int64 {
	return self.Runtime.OpenXRInteractionProfile_get_binding_count(OpenXRInteractionProfile{self})
}
func (self methodsOpenXRInteractionProfile) GetBinding(index int64) OpenXRIPBinding {
	return self.Runtime.OpenXRInteractionProfile_get_binding(OpenXRInteractionProfile{self}, index)
}
func (self methodsOpenXRInteractionProfile) SetBindings(bindings Array) {
	self.Runtime.OpenXRInteractionProfile_set_bindings(OpenXRInteractionProfile{self}, bindings)
}
func (self methodsOpenXRInteractionProfile) GetBindings() Array {
	return self.Runtime.OpenXRInteractionProfile_get_bindings(OpenXRInteractionProfile{self})
}

type methodsOpenXRInteractionProfileMetadata struct {
	_ [0]*methodsOpenXRInteractionProfileMetadata
	class
}

func (self OpenXRInteractionProfileMetadata) Object() Object {
	var parent Object
	parent.class = self.class
	return parent
}
func (self methodsOpenXRInteractionProfileMetadata) RegisterProfileRename(old_name string, new_name string) {
	self.Runtime.OpenXRInteractionProfileMetadata_register_profile_rename(OpenXRInteractionProfileMetadata{self}, old_name, new_name)
}
func (self methodsOpenXRInteractionProfileMetadata) RegisterTopLevelPath(display_name string, openxr_path string, openxr_extension_name string) {
	self.Runtime.OpenXRInteractionProfileMetadata_register_top_level_path(OpenXRInteractionProfileMetadata{self}, display_name, openxr_path, openxr_extension_name)
}
func (self methodsOpenXRInteractionProfileMetadata) RegisterInteractionProfile(display_name string, openxr_path string, openxr_extension_name string) {
	self.Runtime.OpenXRInteractionProfileMetadata_register_interaction_profile(OpenXRInteractionProfileMetadata{self}, display_name, openxr_path, openxr_extension_name)
}
func (self methodsOpenXRInteractionProfileMetadata) RegisterIoPath(interaction_profile string, display_name string, toplevel_path string, openxr_path string, openxr_extension_name string, action_type OpenXRActionActionType) {
	self.Runtime.OpenXRInteractionProfileMetadata_register_io_path(OpenXRInteractionProfileMetadata{self}, interaction_profile, display_name, toplevel_path, openxr_path, openxr_extension_name, action_type)
}

type methodsOpenXRInterface struct {
	_ [0]*methodsOpenXRInterface
	class
}

func (self OpenXRInterface) XRInterface() XRInterface {
	var parent XRInterface
	parent.class = self.class
	return parent
}
func (self methodsOpenXRInterface) GetDisplayRefreshRate() Float {
	return self.Runtime.OpenXRInterface_get_display_refresh_rate(OpenXRInterface{self})
}
func (self methodsOpenXRInterface) SetDisplayRefreshRate(refresh_rate Float) {
	self.Runtime.OpenXRInterface_set_display_refresh_rate(OpenXRInterface{self}, refresh_rate)
}
func (self methodsOpenXRInterface) GetRenderTargetSizeMultiplier() Float {
	return self.Runtime.OpenXRInterface_get_render_target_size_multiplier(OpenXRInterface{self})
}
func (self methodsOpenXRInterface) SetRenderTargetSizeMultiplier(multiplier Float) {
	self.Runtime.OpenXRInterface_set_render_target_size_multiplier(OpenXRInterface{self}, multiplier)
}
func (self methodsOpenXRInterface) IsFoveationSupported() bool {
	return self.Runtime.OpenXRInterface_is_foveation_supported(OpenXRInterface{self})
}
func (self methodsOpenXRInterface) GetFoveationLevel() int64 {
	return self.Runtime.OpenXRInterface_get_foveation_level(OpenXRInterface{self})
}
func (self methodsOpenXRInterface) SetFoveationLevel(foveation_level int64) {
	self.Runtime.OpenXRInterface_set_foveation_level(OpenXRInterface{self}, foveation_level)
}
func (self methodsOpenXRInterface) GetFoveationDynamic() bool {
	return self.Runtime.OpenXRInterface_get_foveation_dynamic(OpenXRInterface{self})
}
func (self methodsOpenXRInterface) SetFoveationDynamic(foveation_dynamic bool) {
	self.Runtime.OpenXRInterface_set_foveation_dynamic(OpenXRInterface{self}, foveation_dynamic)
}
func (self methodsOpenXRInterface) IsActionSetActive(name string) bool {
	return self.Runtime.OpenXRInterface_is_action_set_active(OpenXRInterface{self}, name)
}
func (self methodsOpenXRInterface) SetActionSetActive(name string, active bool) {
	self.Runtime.OpenXRInterface_set_action_set_active(OpenXRInterface{self}, name, active)
}
func (self methodsOpenXRInterface) GetActionSets() Array {
	return self.Runtime.OpenXRInterface_get_action_sets(OpenXRInterface{self})
}
func (self methodsOpenXRInterface) GetAvailableDisplayRefreshRates() Array {
	return self.Runtime.OpenXRInterface_get_available_display_refresh_rates(OpenXRInterface{self})
}
func (self methodsOpenXRInterface) SetMotionRange(hand OpenXRInterfaceHand, motion_range OpenXRInterfaceHandMotionRange) {
	self.Runtime.OpenXRInterface_set_motion_range(OpenXRInterface{self}, hand, motion_range)
}
func (self methodsOpenXRInterface) GetMotionRange(hand OpenXRInterfaceHand) OpenXRInterfaceHandMotionRange {
	return self.Runtime.OpenXRInterface_get_motion_range(OpenXRInterface{self}, hand)
}
func (self methodsOpenXRInterface) GetHandJointFlags(hand OpenXRInterfaceHand, joint OpenXRInterfaceHandJoints) OpenXRInterfaceHandJointFlags {
	return self.Runtime.OpenXRInterface_get_hand_joint_flags(OpenXRInterface{self}, hand, joint)
}
func (self methodsOpenXRInterface) GetHandJointRotation(hand OpenXRInterfaceHand, joint OpenXRInterfaceHandJoints) Quaternion {
	return self.Runtime.OpenXRInterface_get_hand_joint_rotation(OpenXRInterface{self}, hand, joint)
}
func (self methodsOpenXRInterface) GetHandJointPosition(hand OpenXRInterfaceHand, joint OpenXRInterfaceHandJoints) Vector3 {
	return self.Runtime.OpenXRInterface_get_hand_joint_position(OpenXRInterface{self}, hand, joint)
}
func (self methodsOpenXRInterface) GetHandJointRadius(hand OpenXRInterfaceHand, joint OpenXRInterfaceHandJoints) Float {
	return self.Runtime.OpenXRInterface_get_hand_joint_radius(OpenXRInterface{self}, hand, joint)
}
func (self methodsOpenXRInterface) GetHandJointLinearVelocity(hand OpenXRInterfaceHand, joint OpenXRInterfaceHandJoints) Vector3 {
	return self.Runtime.OpenXRInterface_get_hand_joint_linear_velocity(OpenXRInterface{self}, hand, joint)
}
func (self methodsOpenXRInterface) GetHandJointAngularVelocity(hand OpenXRInterfaceHand, joint OpenXRInterfaceHandJoints) Vector3 {
	return self.Runtime.OpenXRInterface_get_hand_joint_angular_velocity(OpenXRInterface{self}, hand, joint)
}
func (self methodsOpenXRInterface) IsHandTrackingSupported() bool {
	return self.Runtime.OpenXRInterface_is_hand_tracking_supported(OpenXRInterface{self})
}
func (self methodsOpenXRInterface) IsEyeGazeInteractionSupported() bool {
	return self.Runtime.OpenXRInterface_is_eye_gaze_interaction_supported(OpenXRInterface{self})
}

type methodsOptimizedTranslation struct {
	_ [0]*methodsOptimizedTranslation
	class
}

func (self OptimizedTranslation) Translation() Translation {
	var parent Translation
	parent.class = self.class
	return parent
}
func (self methodsOptimizedTranslation) Generate(from Translation) {
	self.Runtime.OptimizedTranslation_generate(OptimizedTranslation{self}, from)
}

type methodsOptionButton struct {
	_ [0]*methodsOptionButton
	class
}

func (self OptionButton) Button() Button { var parent Button; parent.class = self.class; return parent }
func (self methodsOptionButton) AddItem(label string, id int64) {
	self.Runtime.OptionButton_add_item(OptionButton{self}, label, id)
}
func (self methodsOptionButton) AddIconItem(texture Texture2D, label string, id int64) {
	self.Runtime.OptionButton_add_icon_item(OptionButton{self}, texture, label, id)
}
func (self methodsOptionButton) SetItemText(idx int64, text string) {
	self.Runtime.OptionButton_set_item_text(OptionButton{self}, idx, text)
}
func (self methodsOptionButton) SetItemIcon(idx int64, texture Texture2D) {
	self.Runtime.OptionButton_set_item_icon(OptionButton{self}, idx, texture)
}
func (self methodsOptionButton) SetItemDisabled(idx int64, disabled bool) {
	self.Runtime.OptionButton_set_item_disabled(OptionButton{self}, idx, disabled)
}
func (self methodsOptionButton) SetItemId(idx int64, id int64) {
	self.Runtime.OptionButton_set_item_id(OptionButton{self}, idx, id)
}
func (self methodsOptionButton) SetItemMetadata(idx int64, metadata any) {
	self.Runtime.OptionButton_set_item_metadata(OptionButton{self}, idx, metadata)
}
func (self methodsOptionButton) SetItemTooltip(idx int64, tooltip string) {
	self.Runtime.OptionButton_set_item_tooltip(OptionButton{self}, idx, tooltip)
}
func (self methodsOptionButton) GetItemText(idx int64) string {
	return self.Runtime.OptionButton_get_item_text(OptionButton{self}, idx)
}
func (self methodsOptionButton) GetItemIcon(idx int64) Texture2D {
	return self.Runtime.OptionButton_get_item_icon(OptionButton{self}, idx)
}
func (self methodsOptionButton) GetItemId(idx int64) int64 {
	return self.Runtime.OptionButton_get_item_id(OptionButton{self}, idx)
}
func (self methodsOptionButton) GetItemIndex(id int64) int64 {
	return self.Runtime.OptionButton_get_item_index(OptionButton{self}, id)
}
func (self methodsOptionButton) GetItemMetadata(idx int64) any {
	return self.Runtime.OptionButton_get_item_metadata(OptionButton{self}, idx)
}
func (self methodsOptionButton) GetItemTooltip(idx int64) string {
	return self.Runtime.OptionButton_get_item_tooltip(OptionButton{self}, idx)
}
func (self methodsOptionButton) IsItemDisabled(idx int64) bool {
	return self.Runtime.OptionButton_is_item_disabled(OptionButton{self}, idx)
}
func (self methodsOptionButton) IsItemSeparator(idx int64) bool {
	return self.Runtime.OptionButton_is_item_separator(OptionButton{self}, idx)
}
func (self methodsOptionButton) AddSeparator(text string) {
	self.Runtime.OptionButton_add_separator(OptionButton{self}, text)
}
func (self methodsOptionButton) Clear() {
	self.Runtime.OptionButton_clear(OptionButton{self})
}
func (self methodsOptionButton) Select(idx int64) {
	self.Runtime.OptionButton_select(OptionButton{self}, idx)
}
func (self methodsOptionButton) GetSelected() int64 {
	return self.Runtime.OptionButton_get_selected(OptionButton{self})
}
func (self methodsOptionButton) GetSelectedId() int64 {
	return self.Runtime.OptionButton_get_selected_id(OptionButton{self})
}
func (self methodsOptionButton) GetSelectedMetadata() any {
	return self.Runtime.OptionButton_get_selected_metadata(OptionButton{self})
}
func (self methodsOptionButton) RemoveItem(idx int64) {
	self.Runtime.OptionButton_remove_item(OptionButton{self}, idx)
}
func (self methodsOptionButton) GetPopup() PopupMenu {
	return self.Runtime.OptionButton_get_popup(OptionButton{self})
}
func (self methodsOptionButton) ShowPopup() {
	self.Runtime.OptionButton_show_popup(OptionButton{self})
}
func (self methodsOptionButton) SetItemCount(count int64) {
	self.Runtime.OptionButton_set_item_count(OptionButton{self}, count)
}
func (self methodsOptionButton) GetItemCount() int64 {
	return self.Runtime.OptionButton_get_item_count(OptionButton{self})
}
func (self methodsOptionButton) HasSelectableItems() bool {
	return self.Runtime.OptionButton_has_selectable_items(OptionButton{self})
}
func (self methodsOptionButton) GetSelectableItem(from_last bool) int64 {
	return self.Runtime.OptionButton_get_selectable_item(OptionButton{self}, from_last)
}
func (self methodsOptionButton) SetFitToLongestItem(fit bool) {
	self.Runtime.OptionButton_set_fit_to_longest_item(OptionButton{self}, fit)
}
func (self methodsOptionButton) IsFitToLongestItem() bool {
	return self.Runtime.OptionButton_is_fit_to_longest_item(OptionButton{self})
}
func (self methodsOptionButton) SetAllowReselect(allow bool) {
	self.Runtime.OptionButton_set_allow_reselect(OptionButton{self}, allow)
}
func (self methodsOptionButton) GetAllowReselect() bool {
	return self.Runtime.OptionButton_get_allow_reselect(OptionButton{self})
}
func (self methodsOptionButton) SetDisableShortcuts(disabled bool) {
	self.Runtime.OptionButton_set_disable_shortcuts(OptionButton{self}, disabled)
}

type methodsPCKPacker struct {
	_ [0]*methodsPCKPacker
	class
}

func (self PCKPacker) RefCounted() RefCounted {
	var parent RefCounted
	parent.class = self.class
	return parent
}
func (self methodsPCKPacker) PckStart(pck_name string, alignment int64, key string, encrypt_directory bool) int64 {
	return self.Runtime.PCKPacker_pck_start(PCKPacker{self}, pck_name, alignment, key, encrypt_directory)
}
func (self methodsPCKPacker) AddFile(pck_path string, source_path string, encrypt bool) int64 {
	return self.Runtime.PCKPacker_add_file(PCKPacker{self}, pck_path, source_path, encrypt)
}
func (self methodsPCKPacker) Flush(verbose bool) int64 {
	return self.Runtime.PCKPacker_flush(PCKPacker{self}, verbose)
}

type methodsPackedDataContainer struct {
	_ [0]*methodsPackedDataContainer
	class
}

func (self PackedDataContainer) Resource() Resource {
	var parent Resource
	parent.class = self.class
	return parent
}
func (self methodsPackedDataContainer) Pack(value any) int64 {
	return self.Runtime.PackedDataContainer_pack(PackedDataContainer{self}, value)
}
func (self methodsPackedDataContainer) Size() int64 {
	return self.Runtime.PackedDataContainer_size(PackedDataContainer{self})
}

type methodsPackedDataContainerRef struct {
	_ [0]*methodsPackedDataContainerRef
	class
}

func (self PackedDataContainerRef) RefCounted() RefCounted {
	var parent RefCounted
	parent.class = self.class
	return parent
}
func (self methodsPackedDataContainerRef) Size() int64 {
	return self.Runtime.PackedDataContainerRef_size(PackedDataContainerRef{self})
}

type methodsPackedScene struct {
	_ [0]*methodsPackedScene
	class
}

func (self PackedScene) Resource() Resource {
	var parent Resource
	parent.class = self.class
	return parent
}
func (self methodsPackedScene) Pack(path Node) int64 {
	return self.Runtime.PackedScene_pack(PackedScene{self}, path)
}
func (self methodsPackedScene) Instantiate(edit_state PackedSceneGenEditState) Node {
	return self.Runtime.PackedScene_instantiate(PackedScene{self}, edit_state)
}
func (self methodsPackedScene) CanInstantiate() bool {
	return self.Runtime.PackedScene_can_instantiate(PackedScene{self})
}
func (self methodsPackedScene) GetState() SceneState {
	return self.Runtime.PackedScene_get_state(PackedScene{self})
}

type methodsPacketPeer struct {
	_ [0]*methodsPacketPeer
	class
}

func (self PacketPeer) RefCounted() RefCounted {
	var parent RefCounted
	parent.class = self.class
	return parent
}
func (self methodsPacketPeer) GetVar(allow_objects bool) any {
	return self.Runtime.PacketPeer_get_var(PacketPeer{self}, allow_objects)
}
func (self methodsPacketPeer) PutVar(v any, full_objects bool) int64 {
	return self.Runtime.PacketPeer_put_var(PacketPeer{self}, v, full_objects)
}
func (self methodsPacketPeer) GetPacket() PackedByteArray {
	return self.Runtime.PacketPeer_get_packet(PacketPeer{self})
}
func (self methodsPacketPeer) PutPacket(buffer PackedByteArray) int64 {
	return self.Runtime.PacketPeer_put_packet(PacketPeer{self}, buffer)
}
func (self methodsPacketPeer) GetPacketError() int64 {
	return self.Runtime.PacketPeer_get_packet_error(PacketPeer{self})
}
func (self methodsPacketPeer) GetAvailablePacketCount() int64 {
	return self.Runtime.PacketPeer_get_available_packet_count(PacketPeer{self})
}
func (self methodsPacketPeer) GetEncodeBufferMaxSize() int64 {
	return self.Runtime.PacketPeer_get_encode_buffer_max_size(PacketPeer{self})
}
func (self methodsPacketPeer) SetEncodeBufferMaxSize(max_size int64) {
	self.Runtime.PacketPeer_set_encode_buffer_max_size(PacketPeer{self}, max_size)
}

type methodsPacketPeerDTLS struct {
	_ [0]*methodsPacketPeerDTLS
	class
}

func (self PacketPeerDTLS) PacketPeer() PacketPeer {
	var parent PacketPeer
	parent.class = self.class
	return parent
}
func (self methodsPacketPeerDTLS) Poll() {
	self.Runtime.PacketPeerDTLS_poll(PacketPeerDTLS{self})
}
func (self methodsPacketPeerDTLS) ConnectToPeer(packet_peer PacketPeerUDP, hostname string, client_options TLSOptions) int64 {
	return self.Runtime.PacketPeerDTLS_connect_to_peer(PacketPeerDTLS{self}, packet_peer, hostname, client_options)
}
func (self methodsPacketPeerDTLS) GetStatus() PacketPeerDTLSStatus {
	return self.Runtime.PacketPeerDTLS_get_status(PacketPeerDTLS{self})
}
func (self methodsPacketPeerDTLS) DisconnectFromPeer() {
	self.Runtime.PacketPeerDTLS_disconnect_from_peer(PacketPeerDTLS{self})
}

type methodsPacketPeerExtension struct {
	_ [0]*methodsPacketPeerExtension
	class
}

func (self PacketPeerExtension) PacketPeer() PacketPeer {
	var parent PacketPeer
	parent.class = self.class
	return parent
}

type methodsPacketPeerStream struct {
	_ [0]*methodsPacketPeerStream
	class
}

func (self PacketPeerStream) PacketPeer() PacketPeer {
	var parent PacketPeer
	parent.class = self.class
	return parent
}
func (self methodsPacketPeerStream) SetStreamPeer(peer StreamPeer) {
	self.Runtime.PacketPeerStream_set_stream_peer(PacketPeerStream{self}, peer)
}
func (self methodsPacketPeerStream) GetStreamPeer() StreamPeer {
	return self.Runtime.PacketPeerStream_get_stream_peer(PacketPeerStream{self})
}
func (self methodsPacketPeerStream) SetInputBufferMaxSize(max_size_bytes int64) {
	self.Runtime.PacketPeerStream_set_input_buffer_max_size(PacketPeerStream{self}, max_size_bytes)
}
func (self methodsPacketPeerStream) SetOutputBufferMaxSize(max_size_bytes int64) {
	self.Runtime.PacketPeerStream_set_output_buffer_max_size(PacketPeerStream{self}, max_size_bytes)
}
func (self methodsPacketPeerStream) GetInputBufferMaxSize() int64 {
	return self.Runtime.PacketPeerStream_get_input_buffer_max_size(PacketPeerStream{self})
}
func (self methodsPacketPeerStream) GetOutputBufferMaxSize() int64 {
	return self.Runtime.PacketPeerStream_get_output_buffer_max_size(PacketPeerStream{self})
}

type methodsPacketPeerUDP struct {
	_ [0]*methodsPacketPeerUDP
	class
}

func (self PacketPeerUDP) PacketPeer() PacketPeer {
	var parent PacketPeer
	parent.class = self.class
	return parent
}
func (self methodsPacketPeerUDP) Bind(port int64, bind_address string, recv_buf_size int64) int64 {
	return self.Runtime.PacketPeerUDP_bind(PacketPeerUDP{self}, port, bind_address, recv_buf_size)
}
func (self methodsPacketPeerUDP) Close() {
	self.Runtime.PacketPeerUDP_close(PacketPeerUDP{self})
}
func (self methodsPacketPeerUDP) Wait() int64 {
	return self.Runtime.PacketPeerUDP_wait(PacketPeerUDP{self})
}
func (self methodsPacketPeerUDP) IsBound() bool {
	return self.Runtime.PacketPeerUDP_is_bound(PacketPeerUDP{self})
}
func (self methodsPacketPeerUDP) ConnectToHost(host string, port int64) int64 {
	return self.Runtime.PacketPeerUDP_connect_to_host(PacketPeerUDP{self}, host, port)
}
func (self methodsPacketPeerUDP) IsSocketConnected() bool {
	return self.Runtime.PacketPeerUDP_is_socket_connected(PacketPeerUDP{self})
}
func (self methodsPacketPeerUDP) GetPacketIp() string {
	return self.Runtime.PacketPeerUDP_get_packet_ip(PacketPeerUDP{self})
}
func (self methodsPacketPeerUDP) GetPacketPort() int64 {
	return self.Runtime.PacketPeerUDP_get_packet_port(PacketPeerUDP{self})
}
func (self methodsPacketPeerUDP) GetLocalPort() int64 {
	return self.Runtime.PacketPeerUDP_get_local_port(PacketPeerUDP{self})
}
func (self methodsPacketPeerUDP) SetDestAddress(host string, port int64) int64 {
	return self.Runtime.PacketPeerUDP_set_dest_address(PacketPeerUDP{self}, host, port)
}
func (self methodsPacketPeerUDP) SetBroadcastEnabled(enabled bool) {
	self.Runtime.PacketPeerUDP_set_broadcast_enabled(PacketPeerUDP{self}, enabled)
}
func (self methodsPacketPeerUDP) JoinMulticastGroup(multicast_address string, interface_name string) int64 {
	return self.Runtime.PacketPeerUDP_join_multicast_group(PacketPeerUDP{self}, multicast_address, interface_name)
}
func (self methodsPacketPeerUDP) LeaveMulticastGroup(multicast_address string, interface_name string) int64 {
	return self.Runtime.PacketPeerUDP_leave_multicast_group(PacketPeerUDP{self}, multicast_address, interface_name)
}

type methodsPanel struct {
	_ [0]*methodsPanel
	class
}

func (self Panel) Control() Control { var parent Control; parent.class = self.class; return parent }

type methodsPanelContainer struct {
	_ [0]*methodsPanelContainer
	class
}

func (self PanelContainer) Container() Container {
	var parent Container
	parent.class = self.class
	return parent
}

type methodsPanoramaSkyMaterial struct {
	_ [0]*methodsPanoramaSkyMaterial
	class
}

func (self PanoramaSkyMaterial) Material() Material {
	var parent Material
	parent.class = self.class
	return parent
}
func (self methodsPanoramaSkyMaterial) SetPanorama(texture Texture2D) {
	self.Runtime.PanoramaSkyMaterial_set_panorama(PanoramaSkyMaterial{self}, texture)
}
func (self methodsPanoramaSkyMaterial) GetPanorama() Texture2D {
	return self.Runtime.PanoramaSkyMaterial_get_panorama(PanoramaSkyMaterial{self})
}
func (self methodsPanoramaSkyMaterial) SetFilteringEnabled(enabled bool) {
	self.Runtime.PanoramaSkyMaterial_set_filtering_enabled(PanoramaSkyMaterial{self}, enabled)
}
func (self methodsPanoramaSkyMaterial) IsFilteringEnabled() bool {
	return self.Runtime.PanoramaSkyMaterial_is_filtering_enabled(PanoramaSkyMaterial{self})
}
func (self methodsPanoramaSkyMaterial) SetEnergyMultiplier(multiplier Float) {
	self.Runtime.PanoramaSkyMaterial_set_energy_multiplier(PanoramaSkyMaterial{self}, multiplier)
}
func (self methodsPanoramaSkyMaterial) GetEnergyMultiplier() Float {
	return self.Runtime.PanoramaSkyMaterial_get_energy_multiplier(PanoramaSkyMaterial{self})
}

type methodsParallaxBackground struct {
	_ [0]*methodsParallaxBackground
	class
}

func (self ParallaxBackground) CanvasLayer() CanvasLayer {
	var parent CanvasLayer
	parent.class = self.class
	return parent
}
func (self methodsParallaxBackground) SetScrollOffset(offset Vector2) {
	self.Runtime.ParallaxBackground_set_scroll_offset(ParallaxBackground{self}, offset)
}
func (self methodsParallaxBackground) GetScrollOffset() Vector2 {
	return self.Runtime.ParallaxBackground_get_scroll_offset(ParallaxBackground{self})
}
func (self methodsParallaxBackground) SetScrollBaseOffset(offset Vector2) {
	self.Runtime.ParallaxBackground_set_scroll_base_offset(ParallaxBackground{self}, offset)
}
func (self methodsParallaxBackground) GetScrollBaseOffset() Vector2 {
	return self.Runtime.ParallaxBackground_get_scroll_base_offset(ParallaxBackground{self})
}
func (self methodsParallaxBackground) SetScrollBaseScale(scale Vector2) {
	self.Runtime.ParallaxBackground_set_scroll_base_scale(ParallaxBackground{self}, scale)
}
func (self methodsParallaxBackground) GetScrollBaseScale() Vector2 {
	return self.Runtime.ParallaxBackground_get_scroll_base_scale(ParallaxBackground{self})
}
func (self methodsParallaxBackground) SetLimitBegin(offset Vector2) {
	self.Runtime.ParallaxBackground_set_limit_begin(ParallaxBackground{self}, offset)
}
func (self methodsParallaxBackground) GetLimitBegin() Vector2 {
	return self.Runtime.ParallaxBackground_get_limit_begin(ParallaxBackground{self})
}
func (self methodsParallaxBackground) SetLimitEnd(offset Vector2) {
	self.Runtime.ParallaxBackground_set_limit_end(ParallaxBackground{self}, offset)
}
func (self methodsParallaxBackground) GetLimitEnd() Vector2 {
	return self.Runtime.ParallaxBackground_get_limit_end(ParallaxBackground{self})
}
func (self methodsParallaxBackground) SetIgnoreCameraZoom(ignore bool) {
	self.Runtime.ParallaxBackground_set_ignore_camera_zoom(ParallaxBackground{self}, ignore)
}
func (self methodsParallaxBackground) IsIgnoreCameraZoom() bool {
	return self.Runtime.ParallaxBackground_is_ignore_camera_zoom(ParallaxBackground{self})
}

type methodsParallaxLayer struct {
	_ [0]*methodsParallaxLayer
	class
}

func (self ParallaxLayer) Node2D() Node2D {
	var parent Node2D
	parent.class = self.class
	return parent
}
func (self methodsParallaxLayer) SetMotionScale(scale Vector2) {
	self.Runtime.ParallaxLayer_set_motion_scale(ParallaxLayer{self}, scale)
}
func (self methodsParallaxLayer) GetMotionScale() Vector2 {
	return self.Runtime.ParallaxLayer_get_motion_scale(ParallaxLayer{self})
}
func (self methodsParallaxLayer) SetMotionOffset(offset Vector2) {
	self.Runtime.ParallaxLayer_set_motion_offset(ParallaxLayer{self}, offset)
}
func (self methodsParallaxLayer) GetMotionOffset() Vector2 {
	return self.Runtime.ParallaxLayer_get_motion_offset(ParallaxLayer{self})
}
func (self methodsParallaxLayer) SetMirroring(mirror Vector2) {
	self.Runtime.ParallaxLayer_set_mirroring(ParallaxLayer{self}, mirror)
}
func (self methodsParallaxLayer) GetMirroring() Vector2 {
	return self.Runtime.ParallaxLayer_get_mirroring(ParallaxLayer{self})
}

type methodsParticleProcessMaterial struct {
	_ [0]*methodsParticleProcessMaterial
	class
}

func (self ParticleProcessMaterial) Material() Material {
	var parent Material
	parent.class = self.class
	return parent
}
func (self methodsParticleProcessMaterial) SetDirection(degrees Vector3) {
	self.Runtime.ParticleProcessMaterial_set_direction(ParticleProcessMaterial{self}, degrees)
}
func (self methodsParticleProcessMaterial) GetDirection() Vector3 {
	return self.Runtime.ParticleProcessMaterial_get_direction(ParticleProcessMaterial{self})
}
func (self methodsParticleProcessMaterial) SetInheritVelocityRatio(ratio Float) {
	self.Runtime.ParticleProcessMaterial_set_inherit_velocity_ratio(ParticleProcessMaterial{self}, ratio)
}
func (self methodsParticleProcessMaterial) GetInheritVelocityRatio() Float {
	return self.Runtime.ParticleProcessMaterial_get_inherit_velocity_ratio(ParticleProcessMaterial{self})
}
func (self methodsParticleProcessMaterial) SetSpread(degrees Float) {
	self.Runtime.ParticleProcessMaterial_set_spread(ParticleProcessMaterial{self}, degrees)
}
func (self methodsParticleProcessMaterial) GetSpread() Float {
	return self.Runtime.ParticleProcessMaterial_get_spread(ParticleProcessMaterial{self})
}
func (self methodsParticleProcessMaterial) SetFlatness(amount Float) {
	self.Runtime.ParticleProcessMaterial_set_flatness(ParticleProcessMaterial{self}, amount)
}
func (self methodsParticleProcessMaterial) GetFlatness() Float {
	return self.Runtime.ParticleProcessMaterial_get_flatness(ParticleProcessMaterial{self})
}
func (self methodsParticleProcessMaterial) SetParam(param ParticleProcessMaterialParameter, value Vector2) {
	self.Runtime.ParticleProcessMaterial_set_param(ParticleProcessMaterial{self}, param, value)
}
func (self methodsParticleProcessMaterial) GetParam(param ParticleProcessMaterialParameter) Vector2 {
	return self.Runtime.ParticleProcessMaterial_get_param(ParticleProcessMaterial{self}, param)
}
func (self methodsParticleProcessMaterial) SetParamMin(param ParticleProcessMaterialParameter, value Float) {
	self.Runtime.ParticleProcessMaterial_set_param_min(ParticleProcessMaterial{self}, param, value)
}
func (self methodsParticleProcessMaterial) GetParamMin(param ParticleProcessMaterialParameter) Float {
	return self.Runtime.ParticleProcessMaterial_get_param_min(ParticleProcessMaterial{self}, param)
}
func (self methodsParticleProcessMaterial) SetParamMax(param ParticleProcessMaterialParameter, value Float) {
	self.Runtime.ParticleProcessMaterial_set_param_max(ParticleProcessMaterial{self}, param, value)
}
func (self methodsParticleProcessMaterial) GetParamMax(param ParticleProcessMaterialParameter) Float {
	return self.Runtime.ParticleProcessMaterial_get_param_max(ParticleProcessMaterial{self}, param)
}
func (self methodsParticleProcessMaterial) SetParamTexture(param ParticleProcessMaterialParameter, texture Texture2D) {
	self.Runtime.ParticleProcessMaterial_set_param_texture(ParticleProcessMaterial{self}, param, texture)
}
func (self methodsParticleProcessMaterial) GetParamTexture(param ParticleProcessMaterialParameter) Texture2D {
	return self.Runtime.ParticleProcessMaterial_get_param_texture(ParticleProcessMaterial{self}, param)
}
func (self methodsParticleProcessMaterial) SetColor(color Color) {
	self.Runtime.ParticleProcessMaterial_set_color(ParticleProcessMaterial{self}, color)
}
func (self methodsParticleProcessMaterial) GetColor() Color {
	return self.Runtime.ParticleProcessMaterial_get_color(ParticleProcessMaterial{self})
}
func (self methodsParticleProcessMaterial) SetColorRamp(ramp Texture2D) {
	self.Runtime.ParticleProcessMaterial_set_color_ramp(ParticleProcessMaterial{self}, ramp)
}
func (self methodsParticleProcessMaterial) GetColorRamp() Texture2D {
	return self.Runtime.ParticleProcessMaterial_get_color_ramp(ParticleProcessMaterial{self})
}
func (self methodsParticleProcessMaterial) SetAlphaCurve(curve Texture2D) {
	self.Runtime.ParticleProcessMaterial_set_alpha_curve(ParticleProcessMaterial{self}, curve)
}
func (self methodsParticleProcessMaterial) GetAlphaCurve() Texture2D {
	return self.Runtime.ParticleProcessMaterial_get_alpha_curve(ParticleProcessMaterial{self})
}
func (self methodsParticleProcessMaterial) SetEmissionCurve(curve Texture2D) {
	self.Runtime.ParticleProcessMaterial_set_emission_curve(ParticleProcessMaterial{self}, curve)
}
func (self methodsParticleProcessMaterial) GetEmissionCurve() Texture2D {
	return self.Runtime.ParticleProcessMaterial_get_emission_curve(ParticleProcessMaterial{self})
}
func (self methodsParticleProcessMaterial) SetColorInitialRamp(ramp Texture2D) {
	self.Runtime.ParticleProcessMaterial_set_color_initial_ramp(ParticleProcessMaterial{self}, ramp)
}
func (self methodsParticleProcessMaterial) GetColorInitialRamp() Texture2D {
	return self.Runtime.ParticleProcessMaterial_get_color_initial_ramp(ParticleProcessMaterial{self})
}
func (self methodsParticleProcessMaterial) SetVelocityLimitCurve(curve Texture2D) {
	self.Runtime.ParticleProcessMaterial_set_velocity_limit_curve(ParticleProcessMaterial{self}, curve)
}
func (self methodsParticleProcessMaterial) GetVelocityLimitCurve() Texture2D {
	return self.Runtime.ParticleProcessMaterial_get_velocity_limit_curve(ParticleProcessMaterial{self})
}
func (self methodsParticleProcessMaterial) SetParticleFlag(particle_flag ParticleProcessMaterialParticleFlags, enable bool) {
	self.Runtime.ParticleProcessMaterial_set_particle_flag(ParticleProcessMaterial{self}, particle_flag, enable)
}
func (self methodsParticleProcessMaterial) GetParticleFlag(particle_flag ParticleProcessMaterialParticleFlags) bool {
	return self.Runtime.ParticleProcessMaterial_get_particle_flag(ParticleProcessMaterial{self}, particle_flag)
}
func (self methodsParticleProcessMaterial) SetVelocityPivot(pivot Vector3) {
	self.Runtime.ParticleProcessMaterial_set_velocity_pivot(ParticleProcessMaterial{self}, pivot)
}
func (self methodsParticleProcessMaterial) GetVelocityPivot() Vector3 {
	return self.Runtime.ParticleProcessMaterial_get_velocity_pivot(ParticleProcessMaterial{self})
}
func (self methodsParticleProcessMaterial) SetEmissionShape(shape ParticleProcessMaterialEmissionShape) {
	self.Runtime.ParticleProcessMaterial_set_emission_shape(ParticleProcessMaterial{self}, shape)
}
func (self methodsParticleProcessMaterial) GetEmissionShape() ParticleProcessMaterialEmissionShape {
	return self.Runtime.ParticleProcessMaterial_get_emission_shape(ParticleProcessMaterial{self})
}
func (self methodsParticleProcessMaterial) SetEmissionSphereRadius(radius Float) {
	self.Runtime.ParticleProcessMaterial_set_emission_sphere_radius(ParticleProcessMaterial{self}, radius)
}
func (self methodsParticleProcessMaterial) GetEmissionSphereRadius() Float {
	return self.Runtime.ParticleProcessMaterial_get_emission_sphere_radius(ParticleProcessMaterial{self})
}
func (self methodsParticleProcessMaterial) SetEmissionBoxExtents(extents Vector3) {
	self.Runtime.ParticleProcessMaterial_set_emission_box_extents(ParticleProcessMaterial{self}, extents)
}
func (self methodsParticleProcessMaterial) GetEmissionBoxExtents() Vector3 {
	return self.Runtime.ParticleProcessMaterial_get_emission_box_extents(ParticleProcessMaterial{self})
}
func (self methodsParticleProcessMaterial) SetEmissionPointTexture(texture Texture2D) {
	self.Runtime.ParticleProcessMaterial_set_emission_point_texture(ParticleProcessMaterial{self}, texture)
}
func (self methodsParticleProcessMaterial) GetEmissionPointTexture() Texture2D {
	return self.Runtime.ParticleProcessMaterial_get_emission_point_texture(ParticleProcessMaterial{self})
}
func (self methodsParticleProcessMaterial) SetEmissionNormalTexture(texture Texture2D) {
	self.Runtime.ParticleProcessMaterial_set_emission_normal_texture(ParticleProcessMaterial{self}, texture)
}
func (self methodsParticleProcessMaterial) GetEmissionNormalTexture() Texture2D {
	return self.Runtime.ParticleProcessMaterial_get_emission_normal_texture(ParticleProcessMaterial{self})
}
func (self methodsParticleProcessMaterial) SetEmissionColorTexture(texture Texture2D) {
	self.Runtime.ParticleProcessMaterial_set_emission_color_texture(ParticleProcessMaterial{self}, texture)
}
func (self methodsParticleProcessMaterial) GetEmissionColorTexture() Texture2D {
	return self.Runtime.ParticleProcessMaterial_get_emission_color_texture(ParticleProcessMaterial{self})
}
func (self methodsParticleProcessMaterial) SetEmissionPointCount(point_count int64) {
	self.Runtime.ParticleProcessMaterial_set_emission_point_count(ParticleProcessMaterial{self}, point_count)
}
func (self methodsParticleProcessMaterial) GetEmissionPointCount() int64 {
	return self.Runtime.ParticleProcessMaterial_get_emission_point_count(ParticleProcessMaterial{self})
}
func (self methodsParticleProcessMaterial) SetEmissionRingAxis(axis Vector3) {
	self.Runtime.ParticleProcessMaterial_set_emission_ring_axis(ParticleProcessMaterial{self}, axis)
}
func (self methodsParticleProcessMaterial) GetEmissionRingAxis() Vector3 {
	return self.Runtime.ParticleProcessMaterial_get_emission_ring_axis(ParticleProcessMaterial{self})
}
func (self methodsParticleProcessMaterial) SetEmissionRingHeight(height Float) {
	self.Runtime.ParticleProcessMaterial_set_emission_ring_height(ParticleProcessMaterial{self}, height)
}
func (self methodsParticleProcessMaterial) GetEmissionRingHeight() Float {
	return self.Runtime.ParticleProcessMaterial_get_emission_ring_height(ParticleProcessMaterial{self})
}
func (self methodsParticleProcessMaterial) SetEmissionRingRadius(radius Float) {
	self.Runtime.ParticleProcessMaterial_set_emission_ring_radius(ParticleProcessMaterial{self}, radius)
}
func (self methodsParticleProcessMaterial) GetEmissionRingRadius() Float {
	return self.Runtime.ParticleProcessMaterial_get_emission_ring_radius(ParticleProcessMaterial{self})
}
func (self methodsParticleProcessMaterial) SetEmissionRingInnerRadius(inner_radius Float) {
	self.Runtime.ParticleProcessMaterial_set_emission_ring_inner_radius(ParticleProcessMaterial{self}, inner_radius)
}
func (self methodsParticleProcessMaterial) GetEmissionRingInnerRadius() Float {
	return self.Runtime.ParticleProcessMaterial_get_emission_ring_inner_radius(ParticleProcessMaterial{self})
}
func (self methodsParticleProcessMaterial) SetEmissionShapeOffset(emission_shape_offset Vector3) {
	self.Runtime.ParticleProcessMaterial_set_emission_shape_offset(ParticleProcessMaterial{self}, emission_shape_offset)
}
func (self methodsParticleProcessMaterial) GetEmissionShapeOffset() Vector3 {
	return self.Runtime.ParticleProcessMaterial_get_emission_shape_offset(ParticleProcessMaterial{self})
}
func (self methodsParticleProcessMaterial) SetEmissionShapeScale(emission_shape_scale Vector3) {
	self.Runtime.ParticleProcessMaterial_set_emission_shape_scale(ParticleProcessMaterial{self}, emission_shape_scale)
}
func (self methodsParticleProcessMaterial) GetEmissionShapeScale() Vector3 {
	return self.Runtime.ParticleProcessMaterial_get_emission_shape_scale(ParticleProcessMaterial{self})
}
func (self methodsParticleProcessMaterial) GetTurbulenceEnabled() bool {
	return self.Runtime.ParticleProcessMaterial_get_turbulence_enabled(ParticleProcessMaterial{self})
}
func (self methodsParticleProcessMaterial) SetTurbulenceEnabled(turbulence_enabled bool) {
	self.Runtime.ParticleProcessMaterial_set_turbulence_enabled(ParticleProcessMaterial{self}, turbulence_enabled)
}
func (self methodsParticleProcessMaterial) GetTurbulenceNoiseStrength() Float {
	return self.Runtime.ParticleProcessMaterial_get_turbulence_noise_strength(ParticleProcessMaterial{self})
}
func (self methodsParticleProcessMaterial) SetTurbulenceNoiseStrength(turbulence_noise_strength Float) {
	self.Runtime.ParticleProcessMaterial_set_turbulence_noise_strength(ParticleProcessMaterial{self}, turbulence_noise_strength)
}
func (self methodsParticleProcessMaterial) GetTurbulenceNoiseScale() Float {
	return self.Runtime.ParticleProcessMaterial_get_turbulence_noise_scale(ParticleProcessMaterial{self})
}
func (self methodsParticleProcessMaterial) SetTurbulenceNoiseScale(turbulence_noise_scale Float) {
	self.Runtime.ParticleProcessMaterial_set_turbulence_noise_scale(ParticleProcessMaterial{self}, turbulence_noise_scale)
}
func (self methodsParticleProcessMaterial) GetTurbulenceNoiseSpeedRandom() Float {
	return self.Runtime.ParticleProcessMaterial_get_turbulence_noise_speed_random(ParticleProcessMaterial{self})
}
func (self methodsParticleProcessMaterial) SetTurbulenceNoiseSpeedRandom(turbulence_noise_speed_random Float) {
	self.Runtime.ParticleProcessMaterial_set_turbulence_noise_speed_random(ParticleProcessMaterial{self}, turbulence_noise_speed_random)
}
func (self methodsParticleProcessMaterial) GetTurbulenceNoiseSpeed() Vector3 {
	return self.Runtime.ParticleProcessMaterial_get_turbulence_noise_speed(ParticleProcessMaterial{self})
}
func (self methodsParticleProcessMaterial) SetTurbulenceNoiseSpeed(turbulence_noise_speed Vector3) {
	self.Runtime.ParticleProcessMaterial_set_turbulence_noise_speed(ParticleProcessMaterial{self}, turbulence_noise_speed)
}
func (self methodsParticleProcessMaterial) GetGravity() Vector3 {
	return self.Runtime.ParticleProcessMaterial_get_gravity(ParticleProcessMaterial{self})
}
func (self methodsParticleProcessMaterial) SetGravity(accel_vec Vector3) {
	self.Runtime.ParticleProcessMaterial_set_gravity(ParticleProcessMaterial{self}, accel_vec)
}
func (self methodsParticleProcessMaterial) SetLifetimeRandomness(randomness Float) {
	self.Runtime.ParticleProcessMaterial_set_lifetime_randomness(ParticleProcessMaterial{self}, randomness)
}
func (self methodsParticleProcessMaterial) GetLifetimeRandomness() Float {
	return self.Runtime.ParticleProcessMaterial_get_lifetime_randomness(ParticleProcessMaterial{self})
}
func (self methodsParticleProcessMaterial) GetSubEmitterMode() ParticleProcessMaterialSubEmitterMode {
	return self.Runtime.ParticleProcessMaterial_get_sub_emitter_mode(ParticleProcessMaterial{self})
}
func (self methodsParticleProcessMaterial) SetSubEmitterMode(mode ParticleProcessMaterialSubEmitterMode) {
	self.Runtime.ParticleProcessMaterial_set_sub_emitter_mode(ParticleProcessMaterial{self}, mode)
}
func (self methodsParticleProcessMaterial) GetSubEmitterFrequency() Float {
	return self.Runtime.ParticleProcessMaterial_get_sub_emitter_frequency(ParticleProcessMaterial{self})
}
func (self methodsParticleProcessMaterial) SetSubEmitterFrequency(hz Float) {
	self.Runtime.ParticleProcessMaterial_set_sub_emitter_frequency(ParticleProcessMaterial{self}, hz)
}
func (self methodsParticleProcessMaterial) GetSubEmitterAmountAtEnd() int64 {
	return self.Runtime.ParticleProcessMaterial_get_sub_emitter_amount_at_end(ParticleProcessMaterial{self})
}
func (self methodsParticleProcessMaterial) SetSubEmitterAmountAtEnd(amount int64) {
	self.Runtime.ParticleProcessMaterial_set_sub_emitter_amount_at_end(ParticleProcessMaterial{self}, amount)
}
func (self methodsParticleProcessMaterial) GetSubEmitterAmountAtCollision() int64 {
	return self.Runtime.ParticleProcessMaterial_get_sub_emitter_amount_at_collision(ParticleProcessMaterial{self})
}
func (self methodsParticleProcessMaterial) SetSubEmitterAmountAtCollision(amount int64) {
	self.Runtime.ParticleProcessMaterial_set_sub_emitter_amount_at_collision(ParticleProcessMaterial{self}, amount)
}
func (self methodsParticleProcessMaterial) GetSubEmitterKeepVelocity() bool {
	return self.Runtime.ParticleProcessMaterial_get_sub_emitter_keep_velocity(ParticleProcessMaterial{self})
}
func (self methodsParticleProcessMaterial) SetSubEmitterKeepVelocity(enable bool) {
	self.Runtime.ParticleProcessMaterial_set_sub_emitter_keep_velocity(ParticleProcessMaterial{self}, enable)
}
func (self methodsParticleProcessMaterial) SetAttractorInteractionEnabled(enabled bool) {
	self.Runtime.ParticleProcessMaterial_set_attractor_interaction_enabled(ParticleProcessMaterial{self}, enabled)
}
func (self methodsParticleProcessMaterial) IsAttractorInteractionEnabled() bool {
	return self.Runtime.ParticleProcessMaterial_is_attractor_interaction_enabled(ParticleProcessMaterial{self})
}
func (self methodsParticleProcessMaterial) SetCollisionMode(mode ParticleProcessMaterialCollisionMode) {
	self.Runtime.ParticleProcessMaterial_set_collision_mode(ParticleProcessMaterial{self}, mode)
}
func (self methodsParticleProcessMaterial) GetCollisionMode() ParticleProcessMaterialCollisionMode {
	return self.Runtime.ParticleProcessMaterial_get_collision_mode(ParticleProcessMaterial{self})
}
func (self methodsParticleProcessMaterial) SetCollisionUseScale(radius bool) {
	self.Runtime.ParticleProcessMaterial_set_collision_use_scale(ParticleProcessMaterial{self}, radius)
}
func (self methodsParticleProcessMaterial) IsCollisionUsingScale() bool {
	return self.Runtime.ParticleProcessMaterial_is_collision_using_scale(ParticleProcessMaterial{self})
}
func (self methodsParticleProcessMaterial) SetCollisionFriction(friction Float) {
	self.Runtime.ParticleProcessMaterial_set_collision_friction(ParticleProcessMaterial{self}, friction)
}
func (self methodsParticleProcessMaterial) GetCollisionFriction() Float {
	return self.Runtime.ParticleProcessMaterial_get_collision_friction(ParticleProcessMaterial{self})
}
func (self methodsParticleProcessMaterial) SetCollisionBounce(bounce Float) {
	self.Runtime.ParticleProcessMaterial_set_collision_bounce(ParticleProcessMaterial{self}, bounce)
}
func (self methodsParticleProcessMaterial) GetCollisionBounce() Float {
	return self.Runtime.ParticleProcessMaterial_get_collision_bounce(ParticleProcessMaterial{self})
}

type methodsPath2D struct {
	_ [0]*methodsPath2D
	class
}

func (self Path2D) Node2D() Node2D { var parent Node2D; parent.class = self.class; return parent }
func (self methodsPath2D) SetCurve(curve Curve2D) {
	self.Runtime.Path2D_set_curve(Path2D{self}, curve)
}
func (self methodsPath2D) GetCurve() Curve2D {
	return self.Runtime.Path2D_get_curve(Path2D{self})
}

type methodsPath3D struct {
	_ [0]*methodsPath3D
	class
}

func (self Path3D) Node3D() Node3D { var parent Node3D; parent.class = self.class; return parent }
func (self methodsPath3D) SetCurve(curve Curve3D) {
	self.Runtime.Path3D_set_curve(Path3D{self}, curve)
}
func (self methodsPath3D) GetCurve() Curve3D {
	return self.Runtime.Path3D_get_curve(Path3D{self})
}

type methodsPathFollow2D struct {
	_ [0]*methodsPathFollow2D
	class
}

func (self PathFollow2D) Node2D() Node2D { var parent Node2D; parent.class = self.class; return parent }
func (self methodsPathFollow2D) SetProgress(progress Float) {
	self.Runtime.PathFollow2D_set_progress(PathFollow2D{self}, progress)
}
func (self methodsPathFollow2D) GetProgress() Float {
	return self.Runtime.PathFollow2D_get_progress(PathFollow2D{self})
}
func (self methodsPathFollow2D) SetHOffset(h_offset Float) {
	self.Runtime.PathFollow2D_set_h_offset(PathFollow2D{self}, h_offset)
}
func (self methodsPathFollow2D) GetHOffset() Float {
	return self.Runtime.PathFollow2D_get_h_offset(PathFollow2D{self})
}
func (self methodsPathFollow2D) SetVOffset(v_offset Float) {
	self.Runtime.PathFollow2D_set_v_offset(PathFollow2D{self}, v_offset)
}
func (self methodsPathFollow2D) GetVOffset() Float {
	return self.Runtime.PathFollow2D_get_v_offset(PathFollow2D{self})
}
func (self methodsPathFollow2D) SetProgressRatio(ratio Float) {
	self.Runtime.PathFollow2D_set_progress_ratio(PathFollow2D{self}, ratio)
}
func (self methodsPathFollow2D) GetProgressRatio() Float {
	return self.Runtime.PathFollow2D_get_progress_ratio(PathFollow2D{self})
}
func (self methodsPathFollow2D) SetRotates(enabled bool) {
	self.Runtime.PathFollow2D_set_rotates(PathFollow2D{self}, enabled)
}
func (self methodsPathFollow2D) IsRotating() bool {
	return self.Runtime.PathFollow2D_is_rotating(PathFollow2D{self})
}
func (self methodsPathFollow2D) SetCubicInterpolation(enabled bool) {
	self.Runtime.PathFollow2D_set_cubic_interpolation(PathFollow2D{self}, enabled)
}
func (self methodsPathFollow2D) GetCubicInterpolation() bool {
	return self.Runtime.PathFollow2D_get_cubic_interpolation(PathFollow2D{self})
}
func (self methodsPathFollow2D) SetLoop(loop bool) {
	self.Runtime.PathFollow2D_set_loop(PathFollow2D{self}, loop)
}
func (self methodsPathFollow2D) HasLoop() bool {
	return self.Runtime.PathFollow2D_has_loop(PathFollow2D{self})
}

type methodsPathFollow3D struct {
	_ [0]*methodsPathFollow3D
	class
}

func (self PathFollow3D) Node3D() Node3D { var parent Node3D; parent.class = self.class; return parent }
func (self methodsPathFollow3D) SetProgress(progress Float) {
	self.Runtime.PathFollow3D_set_progress(PathFollow3D{self}, progress)
}
func (self methodsPathFollow3D) GetProgress() Float {
	return self.Runtime.PathFollow3D_get_progress(PathFollow3D{self})
}
func (self methodsPathFollow3D) SetHOffset(h_offset Float) {
	self.Runtime.PathFollow3D_set_h_offset(PathFollow3D{self}, h_offset)
}
func (self methodsPathFollow3D) GetHOffset() Float {
	return self.Runtime.PathFollow3D_get_h_offset(PathFollow3D{self})
}
func (self methodsPathFollow3D) SetVOffset(v_offset Float) {
	self.Runtime.PathFollow3D_set_v_offset(PathFollow3D{self}, v_offset)
}
func (self methodsPathFollow3D) GetVOffset() Float {
	return self.Runtime.PathFollow3D_get_v_offset(PathFollow3D{self})
}
func (self methodsPathFollow3D) SetProgressRatio(ratio Float) {
	self.Runtime.PathFollow3D_set_progress_ratio(PathFollow3D{self}, ratio)
}
func (self methodsPathFollow3D) GetProgressRatio() Float {
	return self.Runtime.PathFollow3D_get_progress_ratio(PathFollow3D{self})
}
func (self methodsPathFollow3D) SetRotationMode(rotation_mode PathFollow3DRotationMode) {
	self.Runtime.PathFollow3D_set_rotation_mode(PathFollow3D{self}, rotation_mode)
}
func (self methodsPathFollow3D) GetRotationMode() PathFollow3DRotationMode {
	return self.Runtime.PathFollow3D_get_rotation_mode(PathFollow3D{self})
}
func (self methodsPathFollow3D) SetCubicInterpolation(enabled bool) {
	self.Runtime.PathFollow3D_set_cubic_interpolation(PathFollow3D{self}, enabled)
}
func (self methodsPathFollow3D) GetCubicInterpolation() bool {
	return self.Runtime.PathFollow3D_get_cubic_interpolation(PathFollow3D{self})
}
func (self methodsPathFollow3D) SetUseModelFront(enabled bool) {
	self.Runtime.PathFollow3D_set_use_model_front(PathFollow3D{self}, enabled)
}
func (self methodsPathFollow3D) IsUsingModelFront() bool {
	return self.Runtime.PathFollow3D_is_using_model_front(PathFollow3D{self})
}
func (self methodsPathFollow3D) SetLoop(loop bool) {
	self.Runtime.PathFollow3D_set_loop(PathFollow3D{self}, loop)
}
func (self methodsPathFollow3D) HasLoop() bool {
	return self.Runtime.PathFollow3D_has_loop(PathFollow3D{self})
}
func (self methodsPathFollow3D) SetTiltEnabled(enabled bool) {
	self.Runtime.PathFollow3D_set_tilt_enabled(PathFollow3D{self}, enabled)
}
func (self methodsPathFollow3D) IsTiltEnabled() bool {
	return self.Runtime.PathFollow3D_is_tilt_enabled(PathFollow3D{self})
}
func (self methodsPathFollow3D) CorrectPosture(transform Transform3D, rotation_mode PathFollow3DRotationMode) Transform3D {
	return self.Runtime.PathFollow3D_correct_posture(PathFollow3D{self}, transform, rotation_mode)
}

type methodsPerformance struct {
	_ [0]*methodsPerformance
	class
}

func (self Performance) Object() Object { var parent Object; parent.class = self.class; return parent }
func (self methodsPerformance) GetMonitor(monitor PerformanceMonitor) Float {
	return self.Runtime.Performance_get_monitor(Performance{self}, monitor)
}
func (self methodsPerformance) AddCustomMonitor(id string, callable Callable, arguments Array) {
	self.Runtime.Performance_add_custom_monitor(Performance{self}, id, callable, arguments)
}
func (self methodsPerformance) RemoveCustomMonitor(id string) {
	self.Runtime.Performance_remove_custom_monitor(Performance{self}, id)
}
func (self methodsPerformance) HasCustomMonitor(id string) bool {
	return self.Runtime.Performance_has_custom_monitor(Performance{self}, id)
}
func (self methodsPerformance) GetCustomMonitor(id string) any {
	return self.Runtime.Performance_get_custom_monitor(Performance{self}, id)
}
func (self methodsPerformance) GetMonitorModificationTime() int64 {
	return self.Runtime.Performance_get_monitor_modification_time(Performance{self})
}
func (self methodsPerformance) GetCustomMonitorNames() ArrayOf[string] {
	return self.Runtime.Performance_get_custom_monitor_names(Performance{self})
}

type methodsPhysicalBone2D struct {
	_ [0]*methodsPhysicalBone2D
	class
}

func (self PhysicalBone2D) RigidBody2D() RigidBody2D {
	var parent RigidBody2D
	parent.class = self.class
	return parent
}
func (self methodsPhysicalBone2D) GetJoint() Joint2D {
	return self.Runtime.PhysicalBone2D_get_joint(PhysicalBone2D{self})
}
func (self methodsPhysicalBone2D) GetAutoConfigureJoint() bool {
	return self.Runtime.PhysicalBone2D_get_auto_configure_joint(PhysicalBone2D{self})
}
func (self methodsPhysicalBone2D) SetAutoConfigureJoint(auto_configure_joint bool) {
	self.Runtime.PhysicalBone2D_set_auto_configure_joint(PhysicalBone2D{self}, auto_configure_joint)
}
func (self methodsPhysicalBone2D) SetSimulatePhysics(simulate_physics bool) {
	self.Runtime.PhysicalBone2D_set_simulate_physics(PhysicalBone2D{self}, simulate_physics)
}
func (self methodsPhysicalBone2D) GetSimulatePhysics() bool {
	return self.Runtime.PhysicalBone2D_get_simulate_physics(PhysicalBone2D{self})
}
func (self methodsPhysicalBone2D) IsSimulatingPhysics() bool {
	return self.Runtime.PhysicalBone2D_is_simulating_physics(PhysicalBone2D{self})
}
func (self methodsPhysicalBone2D) SetBone2dNodepath(nodepath NodePath) {
	self.Runtime.PhysicalBone2D_set_bone2d_nodepath(PhysicalBone2D{self}, nodepath)
}
func (self methodsPhysicalBone2D) GetBone2dNodepath() NodePath {
	return self.Runtime.PhysicalBone2D_get_bone2d_nodepath(PhysicalBone2D{self})
}
func (self methodsPhysicalBone2D) SetBone2dIndex(bone_index int64) {
	self.Runtime.PhysicalBone2D_set_bone2d_index(PhysicalBone2D{self}, bone_index)
}
func (self methodsPhysicalBone2D) GetBone2dIndex() int64 {
	return self.Runtime.PhysicalBone2D_get_bone2d_index(PhysicalBone2D{self})
}
func (self methodsPhysicalBone2D) SetFollowBoneWhenSimulating(follow_bone bool) {
	self.Runtime.PhysicalBone2D_set_follow_bone_when_simulating(PhysicalBone2D{self}, follow_bone)
}
func (self methodsPhysicalBone2D) GetFollowBoneWhenSimulating() bool {
	return self.Runtime.PhysicalBone2D_get_follow_bone_when_simulating(PhysicalBone2D{self})
}

type methodsPhysicalBone3D struct {
	_ [0]*methodsPhysicalBone3D
	class
}

func (self PhysicalBone3D) PhysicsBody3D() PhysicsBody3D {
	var parent PhysicsBody3D
	parent.class = self.class
	return parent
}
func (self methodsPhysicalBone3D) ApplyCentralImpulse(impulse Vector3) {
	self.Runtime.PhysicalBone3D_apply_central_impulse(PhysicalBone3D{self}, impulse)
}
func (self methodsPhysicalBone3D) ApplyImpulse(impulse Vector3, position Vector3) {
	self.Runtime.PhysicalBone3D_apply_impulse(PhysicalBone3D{self}, impulse, position)
}
func (self methodsPhysicalBone3D) SetJointType(joint_type PhysicalBone3DJointType) {
	self.Runtime.PhysicalBone3D_set_joint_type(PhysicalBone3D{self}, joint_type)
}
func (self methodsPhysicalBone3D) GetJointType() PhysicalBone3DJointType {
	return self.Runtime.PhysicalBone3D_get_joint_type(PhysicalBone3D{self})
}
func (self methodsPhysicalBone3D) SetJointOffset(offset Transform3D) {
	self.Runtime.PhysicalBone3D_set_joint_offset(PhysicalBone3D{self}, offset)
}
func (self methodsPhysicalBone3D) GetJointOffset() Transform3D {
	return self.Runtime.PhysicalBone3D_get_joint_offset(PhysicalBone3D{self})
}
func (self methodsPhysicalBone3D) SetJointRotation(euler Vector3) {
	self.Runtime.PhysicalBone3D_set_joint_rotation(PhysicalBone3D{self}, euler)
}
func (self methodsPhysicalBone3D) GetJointRotation() Vector3 {
	return self.Runtime.PhysicalBone3D_get_joint_rotation(PhysicalBone3D{self})
}
func (self methodsPhysicalBone3D) SetBodyOffset(offset Transform3D) {
	self.Runtime.PhysicalBone3D_set_body_offset(PhysicalBone3D{self}, offset)
}
func (self methodsPhysicalBone3D) GetBodyOffset() Transform3D {
	return self.Runtime.PhysicalBone3D_get_body_offset(PhysicalBone3D{self})
}
func (self methodsPhysicalBone3D) GetSimulatePhysics() bool {
	return self.Runtime.PhysicalBone3D_get_simulate_physics(PhysicalBone3D{self})
}
func (self methodsPhysicalBone3D) IsSimulatingPhysics() bool {
	return self.Runtime.PhysicalBone3D_is_simulating_physics(PhysicalBone3D{self})
}
func (self methodsPhysicalBone3D) GetBoneId() int64 {
	return self.Runtime.PhysicalBone3D_get_bone_id(PhysicalBone3D{self})
}
func (self methodsPhysicalBone3D) SetMass(mass Float) {
	self.Runtime.PhysicalBone3D_set_mass(PhysicalBone3D{self}, mass)
}
func (self methodsPhysicalBone3D) GetMass() Float {
	return self.Runtime.PhysicalBone3D_get_mass(PhysicalBone3D{self})
}
func (self methodsPhysicalBone3D) SetFriction(friction Float) {
	self.Runtime.PhysicalBone3D_set_friction(PhysicalBone3D{self}, friction)
}
func (self methodsPhysicalBone3D) GetFriction() Float {
	return self.Runtime.PhysicalBone3D_get_friction(PhysicalBone3D{self})
}
func (self methodsPhysicalBone3D) SetBounce(bounce Float) {
	self.Runtime.PhysicalBone3D_set_bounce(PhysicalBone3D{self}, bounce)
}
func (self methodsPhysicalBone3D) GetBounce() Float {
	return self.Runtime.PhysicalBone3D_get_bounce(PhysicalBone3D{self})
}
func (self methodsPhysicalBone3D) SetGravityScale(gravity_scale Float) {
	self.Runtime.PhysicalBone3D_set_gravity_scale(PhysicalBone3D{self}, gravity_scale)
}
func (self methodsPhysicalBone3D) GetGravityScale() Float {
	return self.Runtime.PhysicalBone3D_get_gravity_scale(PhysicalBone3D{self})
}
func (self methodsPhysicalBone3D) SetLinearDampMode(linear_damp_mode PhysicalBone3DDampMode) {
	self.Runtime.PhysicalBone3D_set_linear_damp_mode(PhysicalBone3D{self}, linear_damp_mode)
}
func (self methodsPhysicalBone3D) GetLinearDampMode() PhysicalBone3DDampMode {
	return self.Runtime.PhysicalBone3D_get_linear_damp_mode(PhysicalBone3D{self})
}
func (self methodsPhysicalBone3D) SetAngularDampMode(angular_damp_mode PhysicalBone3DDampMode) {
	self.Runtime.PhysicalBone3D_set_angular_damp_mode(PhysicalBone3D{self}, angular_damp_mode)
}
func (self methodsPhysicalBone3D) GetAngularDampMode() PhysicalBone3DDampMode {
	return self.Runtime.PhysicalBone3D_get_angular_damp_mode(PhysicalBone3D{self})
}
func (self methodsPhysicalBone3D) SetLinearDamp(linear_damp Float) {
	self.Runtime.PhysicalBone3D_set_linear_damp(PhysicalBone3D{self}, linear_damp)
}
func (self methodsPhysicalBone3D) GetLinearDamp() Float {
	return self.Runtime.PhysicalBone3D_get_linear_damp(PhysicalBone3D{self})
}
func (self methodsPhysicalBone3D) SetAngularDamp(angular_damp Float) {
	self.Runtime.PhysicalBone3D_set_angular_damp(PhysicalBone3D{self}, angular_damp)
}
func (self methodsPhysicalBone3D) GetAngularDamp() Float {
	return self.Runtime.PhysicalBone3D_get_angular_damp(PhysicalBone3D{self})
}
func (self methodsPhysicalBone3D) SetLinearVelocity(linear_velocity Vector3) {
	self.Runtime.PhysicalBone3D_set_linear_velocity(PhysicalBone3D{self}, linear_velocity)
}
func (self methodsPhysicalBone3D) GetLinearVelocity() Vector3 {
	return self.Runtime.PhysicalBone3D_get_linear_velocity(PhysicalBone3D{self})
}
func (self methodsPhysicalBone3D) SetAngularVelocity(angular_velocity Vector3) {
	self.Runtime.PhysicalBone3D_set_angular_velocity(PhysicalBone3D{self}, angular_velocity)
}
func (self methodsPhysicalBone3D) GetAngularVelocity() Vector3 {
	return self.Runtime.PhysicalBone3D_get_angular_velocity(PhysicalBone3D{self})
}
func (self methodsPhysicalBone3D) SetUseCustomIntegrator(enable bool) {
	self.Runtime.PhysicalBone3D_set_use_custom_integrator(PhysicalBone3D{self}, enable)
}
func (self methodsPhysicalBone3D) IsUsingCustomIntegrator() bool {
	return self.Runtime.PhysicalBone3D_is_using_custom_integrator(PhysicalBone3D{self})
}
func (self methodsPhysicalBone3D) SetCanSleep(able_to_sleep bool) {
	self.Runtime.PhysicalBone3D_set_can_sleep(PhysicalBone3D{self}, able_to_sleep)
}
func (self methodsPhysicalBone3D) IsAbleToSleep() bool {
	return self.Runtime.PhysicalBone3D_is_able_to_sleep(PhysicalBone3D{self})
}

type methodsPhysicalSkyMaterial struct {
	_ [0]*methodsPhysicalSkyMaterial
	class
}

func (self PhysicalSkyMaterial) Material() Material {
	var parent Material
	parent.class = self.class
	return parent
}
func (self methodsPhysicalSkyMaterial) SetRayleighCoefficient(rayleigh Float) {
	self.Runtime.PhysicalSkyMaterial_set_rayleigh_coefficient(PhysicalSkyMaterial{self}, rayleigh)
}
func (self methodsPhysicalSkyMaterial) GetRayleighCoefficient() Float {
	return self.Runtime.PhysicalSkyMaterial_get_rayleigh_coefficient(PhysicalSkyMaterial{self})
}
func (self methodsPhysicalSkyMaterial) SetRayleighColor(color Color) {
	self.Runtime.PhysicalSkyMaterial_set_rayleigh_color(PhysicalSkyMaterial{self}, color)
}
func (self methodsPhysicalSkyMaterial) GetRayleighColor() Color {
	return self.Runtime.PhysicalSkyMaterial_get_rayleigh_color(PhysicalSkyMaterial{self})
}
func (self methodsPhysicalSkyMaterial) SetMieCoefficient(mie Float) {
	self.Runtime.PhysicalSkyMaterial_set_mie_coefficient(PhysicalSkyMaterial{self}, mie)
}
func (self methodsPhysicalSkyMaterial) GetMieCoefficient() Float {
	return self.Runtime.PhysicalSkyMaterial_get_mie_coefficient(PhysicalSkyMaterial{self})
}
func (self methodsPhysicalSkyMaterial) SetMieEccentricity(eccentricity Float) {
	self.Runtime.PhysicalSkyMaterial_set_mie_eccentricity(PhysicalSkyMaterial{self}, eccentricity)
}
func (self methodsPhysicalSkyMaterial) GetMieEccentricity() Float {
	return self.Runtime.PhysicalSkyMaterial_get_mie_eccentricity(PhysicalSkyMaterial{self})
}
func (self methodsPhysicalSkyMaterial) SetMieColor(color Color) {
	self.Runtime.PhysicalSkyMaterial_set_mie_color(PhysicalSkyMaterial{self}, color)
}
func (self methodsPhysicalSkyMaterial) GetMieColor() Color {
	return self.Runtime.PhysicalSkyMaterial_get_mie_color(PhysicalSkyMaterial{self})
}
func (self methodsPhysicalSkyMaterial) SetTurbidity(turbidity Float) {
	self.Runtime.PhysicalSkyMaterial_set_turbidity(PhysicalSkyMaterial{self}, turbidity)
}
func (self methodsPhysicalSkyMaterial) GetTurbidity() Float {
	return self.Runtime.PhysicalSkyMaterial_get_turbidity(PhysicalSkyMaterial{self})
}
func (self methodsPhysicalSkyMaterial) SetSunDiskScale(scale Float) {
	self.Runtime.PhysicalSkyMaterial_set_sun_disk_scale(PhysicalSkyMaterial{self}, scale)
}
func (self methodsPhysicalSkyMaterial) GetSunDiskScale() Float {
	return self.Runtime.PhysicalSkyMaterial_get_sun_disk_scale(PhysicalSkyMaterial{self})
}
func (self methodsPhysicalSkyMaterial) SetGroundColor(color Color) {
	self.Runtime.PhysicalSkyMaterial_set_ground_color(PhysicalSkyMaterial{self}, color)
}
func (self methodsPhysicalSkyMaterial) GetGroundColor() Color {
	return self.Runtime.PhysicalSkyMaterial_get_ground_color(PhysicalSkyMaterial{self})
}
func (self methodsPhysicalSkyMaterial) SetEnergyMultiplier(multiplier Float) {
	self.Runtime.PhysicalSkyMaterial_set_energy_multiplier(PhysicalSkyMaterial{self}, multiplier)
}
func (self methodsPhysicalSkyMaterial) GetEnergyMultiplier() Float {
	return self.Runtime.PhysicalSkyMaterial_get_energy_multiplier(PhysicalSkyMaterial{self})
}
func (self methodsPhysicalSkyMaterial) SetUseDebanding(use_debanding bool) {
	self.Runtime.PhysicalSkyMaterial_set_use_debanding(PhysicalSkyMaterial{self}, use_debanding)
}
func (self methodsPhysicalSkyMaterial) GetUseDebanding() bool {
	return self.Runtime.PhysicalSkyMaterial_get_use_debanding(PhysicalSkyMaterial{self})
}
func (self methodsPhysicalSkyMaterial) SetNightSky(night_sky Texture2D) {
	self.Runtime.PhysicalSkyMaterial_set_night_sky(PhysicalSkyMaterial{self}, night_sky)
}
func (self methodsPhysicalSkyMaterial) GetNightSky() Texture2D {
	return self.Runtime.PhysicalSkyMaterial_get_night_sky(PhysicalSkyMaterial{self})
}

type methodsPhysicsBody2D struct {
	_ [0]*methodsPhysicsBody2D
	class
}

func (self PhysicsBody2D) CollisionObject2D() CollisionObject2D {
	var parent CollisionObject2D
	parent.class = self.class
	return parent
}
func (self methodsPhysicsBody2D) MoveAndCollide(motion Vector2, test_only bool, safe_margin Float, recovery_as_collision bool) KinematicCollision2D {
	return self.Runtime.PhysicsBody2D_move_and_collide(PhysicsBody2D{self}, motion, test_only, safe_margin, recovery_as_collision)
}
func (self methodsPhysicsBody2D) TestMove(from Transform2D, motion Vector2, collision KinematicCollision2D, safe_margin Float, recovery_as_collision bool) bool {
	return self.Runtime.PhysicsBody2D_test_move(PhysicsBody2D{self}, from, motion, collision, safe_margin, recovery_as_collision)
}
func (self methodsPhysicsBody2D) GetCollisionExceptions() ArrayOf[PhysicsBody2D] {
	return self.Runtime.PhysicsBody2D_get_collision_exceptions(PhysicsBody2D{self})
}
func (self methodsPhysicsBody2D) AddCollisionExceptionWith(body Node) {
	self.Runtime.PhysicsBody2D_add_collision_exception_with(PhysicsBody2D{self}, body)
}
func (self methodsPhysicsBody2D) RemoveCollisionExceptionWith(body Node) {
	self.Runtime.PhysicsBody2D_remove_collision_exception_with(PhysicsBody2D{self}, body)
}

type methodsPhysicsBody3D struct {
	_ [0]*methodsPhysicsBody3D
	class
}

func (self PhysicsBody3D) CollisionObject3D() CollisionObject3D {
	var parent CollisionObject3D
	parent.class = self.class
	return parent
}
func (self methodsPhysicsBody3D) MoveAndCollide(motion Vector3, test_only bool, safe_margin Float, recovery_as_collision bool, max_collisions int64) KinematicCollision3D {
	return self.Runtime.PhysicsBody3D_move_and_collide(PhysicsBody3D{self}, motion, test_only, safe_margin, recovery_as_collision, max_collisions)
}
func (self methodsPhysicsBody3D) TestMove(from Transform3D, motion Vector3, collision KinematicCollision3D, safe_margin Float, recovery_as_collision bool, max_collisions int64) bool {
	return self.Runtime.PhysicsBody3D_test_move(PhysicsBody3D{self}, from, motion, collision, safe_margin, recovery_as_collision, max_collisions)
}
func (self methodsPhysicsBody3D) SetAxisLock(axis PhysicsServer3DBodyAxis, lock bool) {
	self.Runtime.PhysicsBody3D_set_axis_lock(PhysicsBody3D{self}, axis, lock)
}
func (self methodsPhysicsBody3D) GetAxisLock(axis PhysicsServer3DBodyAxis) bool {
	return self.Runtime.PhysicsBody3D_get_axis_lock(PhysicsBody3D{self}, axis)
}
func (self methodsPhysicsBody3D) GetCollisionExceptions() ArrayOf[PhysicsBody3D] {
	return self.Runtime.PhysicsBody3D_get_collision_exceptions(PhysicsBody3D{self})
}
func (self methodsPhysicsBody3D) AddCollisionExceptionWith(body Node) {
	self.Runtime.PhysicsBody3D_add_collision_exception_with(PhysicsBody3D{self}, body)
}
func (self methodsPhysicsBody3D) RemoveCollisionExceptionWith(body Node) {
	self.Runtime.PhysicsBody3D_remove_collision_exception_with(PhysicsBody3D{self}, body)
}

type methodsPhysicsDirectBodyState2D struct {
	_ [0]*methodsPhysicsDirectBodyState2D
	class
}

func (self PhysicsDirectBodyState2D) Object() Object {
	var parent Object
	parent.class = self.class
	return parent
}
func (self methodsPhysicsDirectBodyState2D) GetTotalGravity() Vector2 {
	return self.Runtime.PhysicsDirectBodyState2D_get_total_gravity(PhysicsDirectBodyState2D{self})
}
func (self methodsPhysicsDirectBodyState2D) GetTotalLinearDamp() Float {
	return self.Runtime.PhysicsDirectBodyState2D_get_total_linear_damp(PhysicsDirectBodyState2D{self})
}
func (self methodsPhysicsDirectBodyState2D) GetTotalAngularDamp() Float {
	return self.Runtime.PhysicsDirectBodyState2D_get_total_angular_damp(PhysicsDirectBodyState2D{self})
}
func (self methodsPhysicsDirectBodyState2D) GetCenterOfMass() Vector2 {
	return self.Runtime.PhysicsDirectBodyState2D_get_center_of_mass(PhysicsDirectBodyState2D{self})
}
func (self methodsPhysicsDirectBodyState2D) GetCenterOfMassLocal() Vector2 {
	return self.Runtime.PhysicsDirectBodyState2D_get_center_of_mass_local(PhysicsDirectBodyState2D{self})
}
func (self methodsPhysicsDirectBodyState2D) GetInverseMass() Float {
	return self.Runtime.PhysicsDirectBodyState2D_get_inverse_mass(PhysicsDirectBodyState2D{self})
}
func (self methodsPhysicsDirectBodyState2D) GetInverseInertia() Float {
	return self.Runtime.PhysicsDirectBodyState2D_get_inverse_inertia(PhysicsDirectBodyState2D{self})
}
func (self methodsPhysicsDirectBodyState2D) SetLinearVelocity(velocity Vector2) {
	self.Runtime.PhysicsDirectBodyState2D_set_linear_velocity(PhysicsDirectBodyState2D{self}, velocity)
}
func (self methodsPhysicsDirectBodyState2D) GetLinearVelocity() Vector2 {
	return self.Runtime.PhysicsDirectBodyState2D_get_linear_velocity(PhysicsDirectBodyState2D{self})
}
func (self methodsPhysicsDirectBodyState2D) SetAngularVelocity(velocity Float) {
	self.Runtime.PhysicsDirectBodyState2D_set_angular_velocity(PhysicsDirectBodyState2D{self}, velocity)
}
func (self methodsPhysicsDirectBodyState2D) GetAngularVelocity() Float {
	return self.Runtime.PhysicsDirectBodyState2D_get_angular_velocity(PhysicsDirectBodyState2D{self})
}
func (self methodsPhysicsDirectBodyState2D) SetTransform(transform Transform2D) {
	self.Runtime.PhysicsDirectBodyState2D_set_transform(PhysicsDirectBodyState2D{self}, transform)
}
func (self methodsPhysicsDirectBodyState2D) GetTransform() Transform2D {
	return self.Runtime.PhysicsDirectBodyState2D_get_transform(PhysicsDirectBodyState2D{self})
}
func (self methodsPhysicsDirectBodyState2D) GetVelocityAtLocalPosition(local_position Vector2) Vector2 {
	return self.Runtime.PhysicsDirectBodyState2D_get_velocity_at_local_position(PhysicsDirectBodyState2D{self}, local_position)
}
func (self methodsPhysicsDirectBodyState2D) ApplyCentralImpulse(impulse Vector2) {
	self.Runtime.PhysicsDirectBodyState2D_apply_central_impulse(PhysicsDirectBodyState2D{self}, impulse)
}
func (self methodsPhysicsDirectBodyState2D) ApplyTorqueImpulse(impulse Float) {
	self.Runtime.PhysicsDirectBodyState2D_apply_torque_impulse(PhysicsDirectBodyState2D{self}, impulse)
}
func (self methodsPhysicsDirectBodyState2D) ApplyImpulse(impulse Vector2, position Vector2) {
	self.Runtime.PhysicsDirectBodyState2D_apply_impulse(PhysicsDirectBodyState2D{self}, impulse, position)
}
func (self methodsPhysicsDirectBodyState2D) ApplyCentralForce(force Vector2) {
	self.Runtime.PhysicsDirectBodyState2D_apply_central_force(PhysicsDirectBodyState2D{self}, force)
}
func (self methodsPhysicsDirectBodyState2D) ApplyForce(force Vector2, position Vector2) {
	self.Runtime.PhysicsDirectBodyState2D_apply_force(PhysicsDirectBodyState2D{self}, force, position)
}
func (self methodsPhysicsDirectBodyState2D) ApplyTorque(torque Float) {
	self.Runtime.PhysicsDirectBodyState2D_apply_torque(PhysicsDirectBodyState2D{self}, torque)
}
func (self methodsPhysicsDirectBodyState2D) AddConstantCentralForce(force Vector2) {
	self.Runtime.PhysicsDirectBodyState2D_add_constant_central_force(PhysicsDirectBodyState2D{self}, force)
}
func (self methodsPhysicsDirectBodyState2D) AddConstantForce(force Vector2, position Vector2) {
	self.Runtime.PhysicsDirectBodyState2D_add_constant_force(PhysicsDirectBodyState2D{self}, force, position)
}
func (self methodsPhysicsDirectBodyState2D) AddConstantTorque(torque Float) {
	self.Runtime.PhysicsDirectBodyState2D_add_constant_torque(PhysicsDirectBodyState2D{self}, torque)
}
func (self methodsPhysicsDirectBodyState2D) SetConstantForce(force Vector2) {
	self.Runtime.PhysicsDirectBodyState2D_set_constant_force(PhysicsDirectBodyState2D{self}, force)
}
func (self methodsPhysicsDirectBodyState2D) GetConstantForce() Vector2 {
	return self.Runtime.PhysicsDirectBodyState2D_get_constant_force(PhysicsDirectBodyState2D{self})
}
func (self methodsPhysicsDirectBodyState2D) SetConstantTorque(torque Float) {
	self.Runtime.PhysicsDirectBodyState2D_set_constant_torque(PhysicsDirectBodyState2D{self}, torque)
}
func (self methodsPhysicsDirectBodyState2D) GetConstantTorque() Float {
	return self.Runtime.PhysicsDirectBodyState2D_get_constant_torque(PhysicsDirectBodyState2D{self})
}
func (self methodsPhysicsDirectBodyState2D) SetSleepState(enabled bool) {
	self.Runtime.PhysicsDirectBodyState2D_set_sleep_state(PhysicsDirectBodyState2D{self}, enabled)
}
func (self methodsPhysicsDirectBodyState2D) IsSleeping() bool {
	return self.Runtime.PhysicsDirectBodyState2D_is_sleeping(PhysicsDirectBodyState2D{self})
}
func (self methodsPhysicsDirectBodyState2D) GetContactCount() int64 {
	return self.Runtime.PhysicsDirectBodyState2D_get_contact_count(PhysicsDirectBodyState2D{self})
}
func (self methodsPhysicsDirectBodyState2D) GetContactLocalPosition(contact_idx int64) Vector2 {
	return self.Runtime.PhysicsDirectBodyState2D_get_contact_local_position(PhysicsDirectBodyState2D{self}, contact_idx)
}
func (self methodsPhysicsDirectBodyState2D) GetContactLocalNormal(contact_idx int64) Vector2 {
	return self.Runtime.PhysicsDirectBodyState2D_get_contact_local_normal(PhysicsDirectBodyState2D{self}, contact_idx)
}
func (self methodsPhysicsDirectBodyState2D) GetContactLocalShape(contact_idx int64) int64 {
	return self.Runtime.PhysicsDirectBodyState2D_get_contact_local_shape(PhysicsDirectBodyState2D{self}, contact_idx)
}
func (self methodsPhysicsDirectBodyState2D) GetContactLocalVelocityAtPosition(contact_idx int64) Vector2 {
	return self.Runtime.PhysicsDirectBodyState2D_get_contact_local_velocity_at_position(PhysicsDirectBodyState2D{self}, contact_idx)
}
func (self methodsPhysicsDirectBodyState2D) GetContactCollider(contact_idx int64) RID {
	return self.Runtime.PhysicsDirectBodyState2D_get_contact_collider(PhysicsDirectBodyState2D{self}, contact_idx)
}
func (self methodsPhysicsDirectBodyState2D) GetContactColliderPosition(contact_idx int64) Vector2 {
	return self.Runtime.PhysicsDirectBodyState2D_get_contact_collider_position(PhysicsDirectBodyState2D{self}, contact_idx)
}
func (self methodsPhysicsDirectBodyState2D) GetContactColliderId(contact_idx int64) int64 {
	return self.Runtime.PhysicsDirectBodyState2D_get_contact_collider_id(PhysicsDirectBodyState2D{self}, contact_idx)
}
func (self methodsPhysicsDirectBodyState2D) GetContactColliderObject(contact_idx int64) Object {
	return self.Runtime.PhysicsDirectBodyState2D_get_contact_collider_object(PhysicsDirectBodyState2D{self}, contact_idx)
}
func (self methodsPhysicsDirectBodyState2D) GetContactColliderShape(contact_idx int64) int64 {
	return self.Runtime.PhysicsDirectBodyState2D_get_contact_collider_shape(PhysicsDirectBodyState2D{self}, contact_idx)
}
func (self methodsPhysicsDirectBodyState2D) GetContactColliderVelocityAtPosition(contact_idx int64) Vector2 {
	return self.Runtime.PhysicsDirectBodyState2D_get_contact_collider_velocity_at_position(PhysicsDirectBodyState2D{self}, contact_idx)
}
func (self methodsPhysicsDirectBodyState2D) GetContactImpulse(contact_idx int64) Vector2 {
	return self.Runtime.PhysicsDirectBodyState2D_get_contact_impulse(PhysicsDirectBodyState2D{self}, contact_idx)
}
func (self methodsPhysicsDirectBodyState2D) GetStep() Float {
	return self.Runtime.PhysicsDirectBodyState2D_get_step(PhysicsDirectBodyState2D{self})
}
func (self methodsPhysicsDirectBodyState2D) IntegrateForces() {
	self.Runtime.PhysicsDirectBodyState2D_integrate_forces(PhysicsDirectBodyState2D{self})
}
func (self methodsPhysicsDirectBodyState2D) GetSpaceState() PhysicsDirectSpaceState2D {
	return self.Runtime.PhysicsDirectBodyState2D_get_space_state(PhysicsDirectBodyState2D{self})
}

type methodsPhysicsDirectBodyState2DExtension struct {
	_ [0]*methodsPhysicsDirectBodyState2DExtension
	class
}

func (self PhysicsDirectBodyState2DExtension) PhysicsDirectBodyState2D() PhysicsDirectBodyState2D {
	var parent PhysicsDirectBodyState2D
	parent.class = self.class
	return parent
}

type methodsPhysicsDirectBodyState3D struct {
	_ [0]*methodsPhysicsDirectBodyState3D
	class
}

func (self PhysicsDirectBodyState3D) Object() Object {
	var parent Object
	parent.class = self.class
	return parent
}
func (self methodsPhysicsDirectBodyState3D) GetTotalGravity() Vector3 {
	return self.Runtime.PhysicsDirectBodyState3D_get_total_gravity(PhysicsDirectBodyState3D{self})
}
func (self methodsPhysicsDirectBodyState3D) GetTotalLinearDamp() Float {
	return self.Runtime.PhysicsDirectBodyState3D_get_total_linear_damp(PhysicsDirectBodyState3D{self})
}
func (self methodsPhysicsDirectBodyState3D) GetTotalAngularDamp() Float {
	return self.Runtime.PhysicsDirectBodyState3D_get_total_angular_damp(PhysicsDirectBodyState3D{self})
}
func (self methodsPhysicsDirectBodyState3D) GetCenterOfMass() Vector3 {
	return self.Runtime.PhysicsDirectBodyState3D_get_center_of_mass(PhysicsDirectBodyState3D{self})
}
func (self methodsPhysicsDirectBodyState3D) GetCenterOfMassLocal() Vector3 {
	return self.Runtime.PhysicsDirectBodyState3D_get_center_of_mass_local(PhysicsDirectBodyState3D{self})
}
func (self methodsPhysicsDirectBodyState3D) GetPrincipalInertiaAxes() Basis {
	return self.Runtime.PhysicsDirectBodyState3D_get_principal_inertia_axes(PhysicsDirectBodyState3D{self})
}
func (self methodsPhysicsDirectBodyState3D) GetInverseMass() Float {
	return self.Runtime.PhysicsDirectBodyState3D_get_inverse_mass(PhysicsDirectBodyState3D{self})
}
func (self methodsPhysicsDirectBodyState3D) GetInverseInertia() Vector3 {
	return self.Runtime.PhysicsDirectBodyState3D_get_inverse_inertia(PhysicsDirectBodyState3D{self})
}
func (self methodsPhysicsDirectBodyState3D) GetInverseInertiaTensor() Basis {
	return self.Runtime.PhysicsDirectBodyState3D_get_inverse_inertia_tensor(PhysicsDirectBodyState3D{self})
}
func (self methodsPhysicsDirectBodyState3D) SetLinearVelocity(velocity Vector3) {
	self.Runtime.PhysicsDirectBodyState3D_set_linear_velocity(PhysicsDirectBodyState3D{self}, velocity)
}
func (self methodsPhysicsDirectBodyState3D) GetLinearVelocity() Vector3 {
	return self.Runtime.PhysicsDirectBodyState3D_get_linear_velocity(PhysicsDirectBodyState3D{self})
}
func (self methodsPhysicsDirectBodyState3D) SetAngularVelocity(velocity Vector3) {
	self.Runtime.PhysicsDirectBodyState3D_set_angular_velocity(PhysicsDirectBodyState3D{self}, velocity)
}
func (self methodsPhysicsDirectBodyState3D) GetAngularVelocity() Vector3 {
	return self.Runtime.PhysicsDirectBodyState3D_get_angular_velocity(PhysicsDirectBodyState3D{self})
}
func (self methodsPhysicsDirectBodyState3D) SetTransform(transform Transform3D) {
	self.Runtime.PhysicsDirectBodyState3D_set_transform(PhysicsDirectBodyState3D{self}, transform)
}
func (self methodsPhysicsDirectBodyState3D) GetTransform() Transform3D {
	return self.Runtime.PhysicsDirectBodyState3D_get_transform(PhysicsDirectBodyState3D{self})
}
func (self methodsPhysicsDirectBodyState3D) GetVelocityAtLocalPosition(local_position Vector3) Vector3 {
	return self.Runtime.PhysicsDirectBodyState3D_get_velocity_at_local_position(PhysicsDirectBodyState3D{self}, local_position)
}
func (self methodsPhysicsDirectBodyState3D) ApplyCentralImpulse(impulse Vector3) {
	self.Runtime.PhysicsDirectBodyState3D_apply_central_impulse(PhysicsDirectBodyState3D{self}, impulse)
}
func (self methodsPhysicsDirectBodyState3D) ApplyImpulse(impulse Vector3, position Vector3) {
	self.Runtime.PhysicsDirectBodyState3D_apply_impulse(PhysicsDirectBodyState3D{self}, impulse, position)
}
func (self methodsPhysicsDirectBodyState3D) ApplyTorqueImpulse(impulse Vector3) {
	self.Runtime.PhysicsDirectBodyState3D_apply_torque_impulse(PhysicsDirectBodyState3D{self}, impulse)
}
func (self methodsPhysicsDirectBodyState3D) ApplyCentralForce(force Vector3) {
	self.Runtime.PhysicsDirectBodyState3D_apply_central_force(PhysicsDirectBodyState3D{self}, force)
}
func (self methodsPhysicsDirectBodyState3D) ApplyForce(force Vector3, position Vector3) {
	self.Runtime.PhysicsDirectBodyState3D_apply_force(PhysicsDirectBodyState3D{self}, force, position)
}
func (self methodsPhysicsDirectBodyState3D) ApplyTorque(torque Vector3) {
	self.Runtime.PhysicsDirectBodyState3D_apply_torque(PhysicsDirectBodyState3D{self}, torque)
}
func (self methodsPhysicsDirectBodyState3D) AddConstantCentralForce(force Vector3) {
	self.Runtime.PhysicsDirectBodyState3D_add_constant_central_force(PhysicsDirectBodyState3D{self}, force)
}
func (self methodsPhysicsDirectBodyState3D) AddConstantForce(force Vector3, position Vector3) {
	self.Runtime.PhysicsDirectBodyState3D_add_constant_force(PhysicsDirectBodyState3D{self}, force, position)
}
func (self methodsPhysicsDirectBodyState3D) AddConstantTorque(torque Vector3) {
	self.Runtime.PhysicsDirectBodyState3D_add_constant_torque(PhysicsDirectBodyState3D{self}, torque)
}
func (self methodsPhysicsDirectBodyState3D) SetConstantForce(force Vector3) {
	self.Runtime.PhysicsDirectBodyState3D_set_constant_force(PhysicsDirectBodyState3D{self}, force)
}
func (self methodsPhysicsDirectBodyState3D) GetConstantForce() Vector3 {
	return self.Runtime.PhysicsDirectBodyState3D_get_constant_force(PhysicsDirectBodyState3D{self})
}
func (self methodsPhysicsDirectBodyState3D) SetConstantTorque(torque Vector3) {
	self.Runtime.PhysicsDirectBodyState3D_set_constant_torque(PhysicsDirectBodyState3D{self}, torque)
}
func (self methodsPhysicsDirectBodyState3D) GetConstantTorque() Vector3 {
	return self.Runtime.PhysicsDirectBodyState3D_get_constant_torque(PhysicsDirectBodyState3D{self})
}
func (self methodsPhysicsDirectBodyState3D) SetSleepState(enabled bool) {
	self.Runtime.PhysicsDirectBodyState3D_set_sleep_state(PhysicsDirectBodyState3D{self}, enabled)
}
func (self methodsPhysicsDirectBodyState3D) IsSleeping() bool {
	return self.Runtime.PhysicsDirectBodyState3D_is_sleeping(PhysicsDirectBodyState3D{self})
}
func (self methodsPhysicsDirectBodyState3D) GetContactCount() int64 {
	return self.Runtime.PhysicsDirectBodyState3D_get_contact_count(PhysicsDirectBodyState3D{self})
}
func (self methodsPhysicsDirectBodyState3D) GetContactLocalPosition(contact_idx int64) Vector3 {
	return self.Runtime.PhysicsDirectBodyState3D_get_contact_local_position(PhysicsDirectBodyState3D{self}, contact_idx)
}
func (self methodsPhysicsDirectBodyState3D) GetContactLocalNormal(contact_idx int64) Vector3 {
	return self.Runtime.PhysicsDirectBodyState3D_get_contact_local_normal(PhysicsDirectBodyState3D{self}, contact_idx)
}
func (self methodsPhysicsDirectBodyState3D) GetContactImpulse(contact_idx int64) Vector3 {
	return self.Runtime.PhysicsDirectBodyState3D_get_contact_impulse(PhysicsDirectBodyState3D{self}, contact_idx)
}
func (self methodsPhysicsDirectBodyState3D) GetContactLocalShape(contact_idx int64) int64 {
	return self.Runtime.PhysicsDirectBodyState3D_get_contact_local_shape(PhysicsDirectBodyState3D{self}, contact_idx)
}
func (self methodsPhysicsDirectBodyState3D) GetContactLocalVelocityAtPosition(contact_idx int64) Vector3 {
	return self.Runtime.PhysicsDirectBodyState3D_get_contact_local_velocity_at_position(PhysicsDirectBodyState3D{self}, contact_idx)
}
func (self methodsPhysicsDirectBodyState3D) GetContactCollider(contact_idx int64) RID {
	return self.Runtime.PhysicsDirectBodyState3D_get_contact_collider(PhysicsDirectBodyState3D{self}, contact_idx)
}
func (self methodsPhysicsDirectBodyState3D) GetContactColliderPosition(contact_idx int64) Vector3 {
	return self.Runtime.PhysicsDirectBodyState3D_get_contact_collider_position(PhysicsDirectBodyState3D{self}, contact_idx)
}
func (self methodsPhysicsDirectBodyState3D) GetContactColliderId(contact_idx int64) int64 {
	return self.Runtime.PhysicsDirectBodyState3D_get_contact_collider_id(PhysicsDirectBodyState3D{self}, contact_idx)
}
func (self methodsPhysicsDirectBodyState3D) GetContactColliderObject(contact_idx int64) Object {
	return self.Runtime.PhysicsDirectBodyState3D_get_contact_collider_object(PhysicsDirectBodyState3D{self}, contact_idx)
}
func (self methodsPhysicsDirectBodyState3D) GetContactColliderShape(contact_idx int64) int64 {
	return self.Runtime.PhysicsDirectBodyState3D_get_contact_collider_shape(PhysicsDirectBodyState3D{self}, contact_idx)
}
func (self methodsPhysicsDirectBodyState3D) GetContactColliderVelocityAtPosition(contact_idx int64) Vector3 {
	return self.Runtime.PhysicsDirectBodyState3D_get_contact_collider_velocity_at_position(PhysicsDirectBodyState3D{self}, contact_idx)
}
func (self methodsPhysicsDirectBodyState3D) GetStep() Float {
	return self.Runtime.PhysicsDirectBodyState3D_get_step(PhysicsDirectBodyState3D{self})
}
func (self methodsPhysicsDirectBodyState3D) IntegrateForces() {
	self.Runtime.PhysicsDirectBodyState3D_integrate_forces(PhysicsDirectBodyState3D{self})
}
func (self methodsPhysicsDirectBodyState3D) GetSpaceState() PhysicsDirectSpaceState3D {
	return self.Runtime.PhysicsDirectBodyState3D_get_space_state(PhysicsDirectBodyState3D{self})
}

type methodsPhysicsDirectBodyState3DExtension struct {
	_ [0]*methodsPhysicsDirectBodyState3DExtension
	class
}

func (self PhysicsDirectBodyState3DExtension) PhysicsDirectBodyState3D() PhysicsDirectBodyState3D {
	var parent PhysicsDirectBodyState3D
	parent.class = self.class
	return parent
}

type methodsPhysicsDirectSpaceState2D struct {
	_ [0]*methodsPhysicsDirectSpaceState2D
	class
}

func (self PhysicsDirectSpaceState2D) Object() Object {
	var parent Object
	parent.class = self.class
	return parent
}
func (self methodsPhysicsDirectSpaceState2D) IntersectPoint(parameters PhysicsPointQueryParameters2D, max_results int64) ArrayOf[Dictionary] {
	return self.Runtime.PhysicsDirectSpaceState2D_intersect_point(PhysicsDirectSpaceState2D{self}, parameters, max_results)
}
func (self methodsPhysicsDirectSpaceState2D) IntersectRay(parameters PhysicsRayQueryParameters2D) Dictionary {
	return self.Runtime.PhysicsDirectSpaceState2D_intersect_ray(PhysicsDirectSpaceState2D{self}, parameters)
}
func (self methodsPhysicsDirectSpaceState2D) IntersectShape(parameters PhysicsShapeQueryParameters2D, max_results int64) ArrayOf[Dictionary] {
	return self.Runtime.PhysicsDirectSpaceState2D_intersect_shape(PhysicsDirectSpaceState2D{self}, parameters, max_results)
}
func (self methodsPhysicsDirectSpaceState2D) CastMotion(parameters PhysicsShapeQueryParameters2D) PackedFloat32Array {
	return self.Runtime.PhysicsDirectSpaceState2D_cast_motion(PhysicsDirectSpaceState2D{self}, parameters)
}
func (self methodsPhysicsDirectSpaceState2D) CollideShape(parameters PhysicsShapeQueryParameters2D, max_results int64) ArrayOf[Vector2] {
	return self.Runtime.PhysicsDirectSpaceState2D_collide_shape(PhysicsDirectSpaceState2D{self}, parameters, max_results)
}
func (self methodsPhysicsDirectSpaceState2D) GetRestInfo(parameters PhysicsShapeQueryParameters2D) Dictionary {
	return self.Runtime.PhysicsDirectSpaceState2D_get_rest_info(PhysicsDirectSpaceState2D{self}, parameters)
}

type methodsPhysicsDirectSpaceState2DExtension struct {
	_ [0]*methodsPhysicsDirectSpaceState2DExtension
	class
}

func (self PhysicsDirectSpaceState2DExtension) PhysicsDirectSpaceState2D() PhysicsDirectSpaceState2D {
	var parent PhysicsDirectSpaceState2D
	parent.class = self.class
	return parent
}
func (self methodsPhysicsDirectSpaceState2DExtension) IsBodyExcludedFromQuery(body RID) bool {
	return self.Runtime.PhysicsDirectSpaceState2DExtension_is_body_excluded_from_query(PhysicsDirectSpaceState2DExtension{self}, body)
}

type methodsPhysicsDirectSpaceState3D struct {
	_ [0]*methodsPhysicsDirectSpaceState3D
	class
}

func (self PhysicsDirectSpaceState3D) Object() Object {
	var parent Object
	parent.class = self.class
	return parent
}
func (self methodsPhysicsDirectSpaceState3D) IntersectPoint(parameters PhysicsPointQueryParameters3D, max_results int64) ArrayOf[Dictionary] {
	return self.Runtime.PhysicsDirectSpaceState3D_intersect_point(PhysicsDirectSpaceState3D{self}, parameters, max_results)
}
func (self methodsPhysicsDirectSpaceState3D) IntersectRay(parameters PhysicsRayQueryParameters3D) Dictionary {
	return self.Runtime.PhysicsDirectSpaceState3D_intersect_ray(PhysicsDirectSpaceState3D{self}, parameters)
}
func (self methodsPhysicsDirectSpaceState3D) IntersectShape(parameters PhysicsShapeQueryParameters3D, max_results int64) ArrayOf[Dictionary] {
	return self.Runtime.PhysicsDirectSpaceState3D_intersect_shape(PhysicsDirectSpaceState3D{self}, parameters, max_results)
}
func (self methodsPhysicsDirectSpaceState3D) CastMotion(parameters PhysicsShapeQueryParameters3D) PackedFloat32Array {
	return self.Runtime.PhysicsDirectSpaceState3D_cast_motion(PhysicsDirectSpaceState3D{self}, parameters)
}
func (self methodsPhysicsDirectSpaceState3D) CollideShape(parameters PhysicsShapeQueryParameters3D, max_results int64) ArrayOf[Vector3] {
	return self.Runtime.PhysicsDirectSpaceState3D_collide_shape(PhysicsDirectSpaceState3D{self}, parameters, max_results)
}
func (self methodsPhysicsDirectSpaceState3D) GetRestInfo(parameters PhysicsShapeQueryParameters3D) Dictionary {
	return self.Runtime.PhysicsDirectSpaceState3D_get_rest_info(PhysicsDirectSpaceState3D{self}, parameters)
}

type methodsPhysicsDirectSpaceState3DExtension struct {
	_ [0]*methodsPhysicsDirectSpaceState3DExtension
	class
}

func (self PhysicsDirectSpaceState3DExtension) PhysicsDirectSpaceState3D() PhysicsDirectSpaceState3D {
	var parent PhysicsDirectSpaceState3D
	parent.class = self.class
	return parent
}
func (self methodsPhysicsDirectSpaceState3DExtension) IsBodyExcludedFromQuery(body RID) bool {
	return self.Runtime.PhysicsDirectSpaceState3DExtension_is_body_excluded_from_query(PhysicsDirectSpaceState3DExtension{self}, body)
}

type methodsPhysicsMaterial struct {
	_ [0]*methodsPhysicsMaterial
	class
}

func (self PhysicsMaterial) Resource() Resource {
	var parent Resource
	parent.class = self.class
	return parent
}
func (self methodsPhysicsMaterial) SetFriction(friction Float) {
	self.Runtime.PhysicsMaterial_set_friction(PhysicsMaterial{self}, friction)
}
func (self methodsPhysicsMaterial) GetFriction() Float {
	return self.Runtime.PhysicsMaterial_get_friction(PhysicsMaterial{self})
}
func (self methodsPhysicsMaterial) SetRough(rough bool) {
	self.Runtime.PhysicsMaterial_set_rough(PhysicsMaterial{self}, rough)
}
func (self methodsPhysicsMaterial) IsRough() bool {
	return self.Runtime.PhysicsMaterial_is_rough(PhysicsMaterial{self})
}
func (self methodsPhysicsMaterial) SetBounce(bounce Float) {
	self.Runtime.PhysicsMaterial_set_bounce(PhysicsMaterial{self}, bounce)
}
func (self methodsPhysicsMaterial) GetBounce() Float {
	return self.Runtime.PhysicsMaterial_get_bounce(PhysicsMaterial{self})
}
func (self methodsPhysicsMaterial) SetAbsorbent(absorbent bool) {
	self.Runtime.PhysicsMaterial_set_absorbent(PhysicsMaterial{self}, absorbent)
}
func (self methodsPhysicsMaterial) IsAbsorbent() bool {
	return self.Runtime.PhysicsMaterial_is_absorbent(PhysicsMaterial{self})
}

type methodsPhysicsPointQueryParameters2D struct {
	_ [0]*methodsPhysicsPointQueryParameters2D
	class
}

func (self PhysicsPointQueryParameters2D) RefCounted() RefCounted {
	var parent RefCounted
	parent.class = self.class
	return parent
}
func (self methodsPhysicsPointQueryParameters2D) SetPosition(position Vector2) {
	self.Runtime.PhysicsPointQueryParameters2D_set_position(PhysicsPointQueryParameters2D{self}, position)
}
func (self methodsPhysicsPointQueryParameters2D) GetPosition() Vector2 {
	return self.Runtime.PhysicsPointQueryParameters2D_get_position(PhysicsPointQueryParameters2D{self})
}
func (self methodsPhysicsPointQueryParameters2D) SetCanvasInstanceId(canvas_instance_id int64) {
	self.Runtime.PhysicsPointQueryParameters2D_set_canvas_instance_id(PhysicsPointQueryParameters2D{self}, canvas_instance_id)
}
func (self methodsPhysicsPointQueryParameters2D) GetCanvasInstanceId() int64 {
	return self.Runtime.PhysicsPointQueryParameters2D_get_canvas_instance_id(PhysicsPointQueryParameters2D{self})
}
func (self methodsPhysicsPointQueryParameters2D) SetCollisionMask(collision_mask int64) {
	self.Runtime.PhysicsPointQueryParameters2D_set_collision_mask(PhysicsPointQueryParameters2D{self}, collision_mask)
}
func (self methodsPhysicsPointQueryParameters2D) GetCollisionMask() int64 {
	return self.Runtime.PhysicsPointQueryParameters2D_get_collision_mask(PhysicsPointQueryParameters2D{self})
}
func (self methodsPhysicsPointQueryParameters2D) SetExclude(exclude ArrayOf[RID]) {
	self.Runtime.PhysicsPointQueryParameters2D_set_exclude(PhysicsPointQueryParameters2D{self}, exclude)
}
func (self methodsPhysicsPointQueryParameters2D) GetExclude() ArrayOf[RID] {
	return self.Runtime.PhysicsPointQueryParameters2D_get_exclude(PhysicsPointQueryParameters2D{self})
}
func (self methodsPhysicsPointQueryParameters2D) SetCollideWithBodies(enable bool) {
	self.Runtime.PhysicsPointQueryParameters2D_set_collide_with_bodies(PhysicsPointQueryParameters2D{self}, enable)
}
func (self methodsPhysicsPointQueryParameters2D) IsCollideWithBodiesEnabled() bool {
	return self.Runtime.PhysicsPointQueryParameters2D_is_collide_with_bodies_enabled(PhysicsPointQueryParameters2D{self})
}
func (self methodsPhysicsPointQueryParameters2D) SetCollideWithAreas(enable bool) {
	self.Runtime.PhysicsPointQueryParameters2D_set_collide_with_areas(PhysicsPointQueryParameters2D{self}, enable)
}
func (self methodsPhysicsPointQueryParameters2D) IsCollideWithAreasEnabled() bool {
	return self.Runtime.PhysicsPointQueryParameters2D_is_collide_with_areas_enabled(PhysicsPointQueryParameters2D{self})
}

type methodsPhysicsPointQueryParameters3D struct {
	_ [0]*methodsPhysicsPointQueryParameters3D
	class
}

func (self PhysicsPointQueryParameters3D) RefCounted() RefCounted {
	var parent RefCounted
	parent.class = self.class
	return parent
}
func (self methodsPhysicsPointQueryParameters3D) SetPosition(position Vector3) {
	self.Runtime.PhysicsPointQueryParameters3D_set_position(PhysicsPointQueryParameters3D{self}, position)
}
func (self methodsPhysicsPointQueryParameters3D) GetPosition() Vector3 {
	return self.Runtime.PhysicsPointQueryParameters3D_get_position(PhysicsPointQueryParameters3D{self})
}
func (self methodsPhysicsPointQueryParameters3D) SetCollisionMask(collision_mask int64) {
	self.Runtime.PhysicsPointQueryParameters3D_set_collision_mask(PhysicsPointQueryParameters3D{self}, collision_mask)
}
func (self methodsPhysicsPointQueryParameters3D) GetCollisionMask() int64 {
	return self.Runtime.PhysicsPointQueryParameters3D_get_collision_mask(PhysicsPointQueryParameters3D{self})
}
func (self methodsPhysicsPointQueryParameters3D) SetExclude(exclude ArrayOf[RID]) {
	self.Runtime.PhysicsPointQueryParameters3D_set_exclude(PhysicsPointQueryParameters3D{self}, exclude)
}
func (self methodsPhysicsPointQueryParameters3D) GetExclude() ArrayOf[RID] {
	return self.Runtime.PhysicsPointQueryParameters3D_get_exclude(PhysicsPointQueryParameters3D{self})
}
func (self methodsPhysicsPointQueryParameters3D) SetCollideWithBodies(enable bool) {
	self.Runtime.PhysicsPointQueryParameters3D_set_collide_with_bodies(PhysicsPointQueryParameters3D{self}, enable)
}
func (self methodsPhysicsPointQueryParameters3D) IsCollideWithBodiesEnabled() bool {
	return self.Runtime.PhysicsPointQueryParameters3D_is_collide_with_bodies_enabled(PhysicsPointQueryParameters3D{self})
}
func (self methodsPhysicsPointQueryParameters3D) SetCollideWithAreas(enable bool) {
	self.Runtime.PhysicsPointQueryParameters3D_set_collide_with_areas(PhysicsPointQueryParameters3D{self}, enable)
}
func (self methodsPhysicsPointQueryParameters3D) IsCollideWithAreasEnabled() bool {
	return self.Runtime.PhysicsPointQueryParameters3D_is_collide_with_areas_enabled(PhysicsPointQueryParameters3D{self})
}

type methodsPhysicsRayQueryParameters2D struct {
	_ [0]*methodsPhysicsRayQueryParameters2D
	class
}

func (self PhysicsRayQueryParameters2D) RefCounted() RefCounted {
	var parent RefCounted
	parent.class = self.class
	return parent
}
func (self methodsPhysicsRayQueryParameters2D) Create(from Vector2, to Vector2, collision_mask int64, exclude ArrayOf[RID]) PhysicsRayQueryParameters2D {
	return self.Runtime.PhysicsRayQueryParameters2D_create(PhysicsRayQueryParameters2D{self}, from, to, collision_mask, exclude)
}
func (self methodsPhysicsRayQueryParameters2D) SetFrom(from Vector2) {
	self.Runtime.PhysicsRayQueryParameters2D_set_from(PhysicsRayQueryParameters2D{self}, from)
}
func (self methodsPhysicsRayQueryParameters2D) GetFrom() Vector2 {
	return self.Runtime.PhysicsRayQueryParameters2D_get_from(PhysicsRayQueryParameters2D{self})
}
func (self methodsPhysicsRayQueryParameters2D) SetTo(to Vector2) {
	self.Runtime.PhysicsRayQueryParameters2D_set_to(PhysicsRayQueryParameters2D{self}, to)
}
func (self methodsPhysicsRayQueryParameters2D) GetTo() Vector2 {
	return self.Runtime.PhysicsRayQueryParameters2D_get_to(PhysicsRayQueryParameters2D{self})
}
func (self methodsPhysicsRayQueryParameters2D) SetCollisionMask(collision_mask int64) {
	self.Runtime.PhysicsRayQueryParameters2D_set_collision_mask(PhysicsRayQueryParameters2D{self}, collision_mask)
}
func (self methodsPhysicsRayQueryParameters2D) GetCollisionMask() int64 {
	return self.Runtime.PhysicsRayQueryParameters2D_get_collision_mask(PhysicsRayQueryParameters2D{self})
}
func (self methodsPhysicsRayQueryParameters2D) SetExclude(exclude ArrayOf[RID]) {
	self.Runtime.PhysicsRayQueryParameters2D_set_exclude(PhysicsRayQueryParameters2D{self}, exclude)
}
func (self methodsPhysicsRayQueryParameters2D) GetExclude() ArrayOf[RID] {
	return self.Runtime.PhysicsRayQueryParameters2D_get_exclude(PhysicsRayQueryParameters2D{self})
}
func (self methodsPhysicsRayQueryParameters2D) SetCollideWithBodies(enable bool) {
	self.Runtime.PhysicsRayQueryParameters2D_set_collide_with_bodies(PhysicsRayQueryParameters2D{self}, enable)
}
func (self methodsPhysicsRayQueryParameters2D) IsCollideWithBodiesEnabled() bool {
	return self.Runtime.PhysicsRayQueryParameters2D_is_collide_with_bodies_enabled(PhysicsRayQueryParameters2D{self})
}
func (self methodsPhysicsRayQueryParameters2D) SetCollideWithAreas(enable bool) {
	self.Runtime.PhysicsRayQueryParameters2D_set_collide_with_areas(PhysicsRayQueryParameters2D{self}, enable)
}
func (self methodsPhysicsRayQueryParameters2D) IsCollideWithAreasEnabled() bool {
	return self.Runtime.PhysicsRayQueryParameters2D_is_collide_with_areas_enabled(PhysicsRayQueryParameters2D{self})
}
func (self methodsPhysicsRayQueryParameters2D) SetHitFromInside(enable bool) {
	self.Runtime.PhysicsRayQueryParameters2D_set_hit_from_inside(PhysicsRayQueryParameters2D{self}, enable)
}
func (self methodsPhysicsRayQueryParameters2D) IsHitFromInsideEnabled() bool {
	return self.Runtime.PhysicsRayQueryParameters2D_is_hit_from_inside_enabled(PhysicsRayQueryParameters2D{self})
}

type methodsPhysicsRayQueryParameters3D struct {
	_ [0]*methodsPhysicsRayQueryParameters3D
	class
}

func (self PhysicsRayQueryParameters3D) RefCounted() RefCounted {
	var parent RefCounted
	parent.class = self.class
	return parent
}
func (self methodsPhysicsRayQueryParameters3D) Create(from Vector3, to Vector3, collision_mask int64, exclude ArrayOf[RID]) PhysicsRayQueryParameters3D {
	return self.Runtime.PhysicsRayQueryParameters3D_create(PhysicsRayQueryParameters3D{self}, from, to, collision_mask, exclude)
}
func (self methodsPhysicsRayQueryParameters3D) SetFrom(from Vector3) {
	self.Runtime.PhysicsRayQueryParameters3D_set_from(PhysicsRayQueryParameters3D{self}, from)
}
func (self methodsPhysicsRayQueryParameters3D) GetFrom() Vector3 {
	return self.Runtime.PhysicsRayQueryParameters3D_get_from(PhysicsRayQueryParameters3D{self})
}
func (self methodsPhysicsRayQueryParameters3D) SetTo(to Vector3) {
	self.Runtime.PhysicsRayQueryParameters3D_set_to(PhysicsRayQueryParameters3D{self}, to)
}
func (self methodsPhysicsRayQueryParameters3D) GetTo() Vector3 {
	return self.Runtime.PhysicsRayQueryParameters3D_get_to(PhysicsRayQueryParameters3D{self})
}
func (self methodsPhysicsRayQueryParameters3D) SetCollisionMask(collision_mask int64) {
	self.Runtime.PhysicsRayQueryParameters3D_set_collision_mask(PhysicsRayQueryParameters3D{self}, collision_mask)
}
func (self methodsPhysicsRayQueryParameters3D) GetCollisionMask() int64 {
	return self.Runtime.PhysicsRayQueryParameters3D_get_collision_mask(PhysicsRayQueryParameters3D{self})
}
func (self methodsPhysicsRayQueryParameters3D) SetExclude(exclude ArrayOf[RID]) {
	self.Runtime.PhysicsRayQueryParameters3D_set_exclude(PhysicsRayQueryParameters3D{self}, exclude)
}
func (self methodsPhysicsRayQueryParameters3D) GetExclude() ArrayOf[RID] {
	return self.Runtime.PhysicsRayQueryParameters3D_get_exclude(PhysicsRayQueryParameters3D{self})
}
func (self methodsPhysicsRayQueryParameters3D) SetCollideWithBodies(enable bool) {
	self.Runtime.PhysicsRayQueryParameters3D_set_collide_with_bodies(PhysicsRayQueryParameters3D{self}, enable)
}
func (self methodsPhysicsRayQueryParameters3D) IsCollideWithBodiesEnabled() bool {
	return self.Runtime.PhysicsRayQueryParameters3D_is_collide_with_bodies_enabled(PhysicsRayQueryParameters3D{self})
}
func (self methodsPhysicsRayQueryParameters3D) SetCollideWithAreas(enable bool) {
	self.Runtime.PhysicsRayQueryParameters3D_set_collide_with_areas(PhysicsRayQueryParameters3D{self}, enable)
}
func (self methodsPhysicsRayQueryParameters3D) IsCollideWithAreasEnabled() bool {
	return self.Runtime.PhysicsRayQueryParameters3D_is_collide_with_areas_enabled(PhysicsRayQueryParameters3D{self})
}
func (self methodsPhysicsRayQueryParameters3D) SetHitFromInside(enable bool) {
	self.Runtime.PhysicsRayQueryParameters3D_set_hit_from_inside(PhysicsRayQueryParameters3D{self}, enable)
}
func (self methodsPhysicsRayQueryParameters3D) IsHitFromInsideEnabled() bool {
	return self.Runtime.PhysicsRayQueryParameters3D_is_hit_from_inside_enabled(PhysicsRayQueryParameters3D{self})
}
func (self methodsPhysicsRayQueryParameters3D) SetHitBackFaces(enable bool) {
	self.Runtime.PhysicsRayQueryParameters3D_set_hit_back_faces(PhysicsRayQueryParameters3D{self}, enable)
}
func (self methodsPhysicsRayQueryParameters3D) IsHitBackFacesEnabled() bool {
	return self.Runtime.PhysicsRayQueryParameters3D_is_hit_back_faces_enabled(PhysicsRayQueryParameters3D{self})
}

type methodsPhysicsServer2D struct {
	_ [0]*methodsPhysicsServer2D
	class
}

func (self PhysicsServer2D) Object() Object {
	var parent Object
	parent.class = self.class
	return parent
}
func (self methodsPhysicsServer2D) WorldBoundaryShapeCreate() RID {
	return self.Runtime.PhysicsServer2D_world_boundary_shape_create(PhysicsServer2D{self})
}
func (self methodsPhysicsServer2D) SeparationRayShapeCreate() RID {
	return self.Runtime.PhysicsServer2D_separation_ray_shape_create(PhysicsServer2D{self})
}
func (self methodsPhysicsServer2D) SegmentShapeCreate() RID {
	return self.Runtime.PhysicsServer2D_segment_shape_create(PhysicsServer2D{self})
}
func (self methodsPhysicsServer2D) CircleShapeCreate() RID {
	return self.Runtime.PhysicsServer2D_circle_shape_create(PhysicsServer2D{self})
}
func (self methodsPhysicsServer2D) RectangleShapeCreate() RID {
	return self.Runtime.PhysicsServer2D_rectangle_shape_create(PhysicsServer2D{self})
}
func (self methodsPhysicsServer2D) CapsuleShapeCreate() RID {
	return self.Runtime.PhysicsServer2D_capsule_shape_create(PhysicsServer2D{self})
}
func (self methodsPhysicsServer2D) ConvexPolygonShapeCreate() RID {
	return self.Runtime.PhysicsServer2D_convex_polygon_shape_create(PhysicsServer2D{self})
}
func (self methodsPhysicsServer2D) ConcavePolygonShapeCreate() RID {
	return self.Runtime.PhysicsServer2D_concave_polygon_shape_create(PhysicsServer2D{self})
}
func (self methodsPhysicsServer2D) ShapeSetData(shape RID, data any) {
	self.Runtime.PhysicsServer2D_shape_set_data(PhysicsServer2D{self}, shape, data)
}
func (self methodsPhysicsServer2D) ShapeGetType(shape RID) PhysicsServer2DShapeType {
	return self.Runtime.PhysicsServer2D_shape_get_type(PhysicsServer2D{self}, shape)
}
func (self methodsPhysicsServer2D) ShapeGetData(shape RID) any {
	return self.Runtime.PhysicsServer2D_shape_get_data(PhysicsServer2D{self}, shape)
}
func (self methodsPhysicsServer2D) SpaceCreate() RID {
	return self.Runtime.PhysicsServer2D_space_create(PhysicsServer2D{self})
}
func (self methodsPhysicsServer2D) SpaceSetActive(space RID, active bool) {
	self.Runtime.PhysicsServer2D_space_set_active(PhysicsServer2D{self}, space, active)
}
func (self methodsPhysicsServer2D) SpaceIsActive(space RID) bool {
	return self.Runtime.PhysicsServer2D_space_is_active(PhysicsServer2D{self}, space)
}
func (self methodsPhysicsServer2D) SpaceSetParam(space RID, param PhysicsServer2DSpaceParameter, value Float) {
	self.Runtime.PhysicsServer2D_space_set_param(PhysicsServer2D{self}, space, param, value)
}
func (self methodsPhysicsServer2D) SpaceGetParam(space RID, param PhysicsServer2DSpaceParameter) Float {
	return self.Runtime.PhysicsServer2D_space_get_param(PhysicsServer2D{self}, space, param)
}
func (self methodsPhysicsServer2D) SpaceGetDirectState(space RID) PhysicsDirectSpaceState2D {
	return self.Runtime.PhysicsServer2D_space_get_direct_state(PhysicsServer2D{self}, space)
}
func (self methodsPhysicsServer2D) AreaCreate() RID {
	return self.Runtime.PhysicsServer2D_area_create(PhysicsServer2D{self})
}
func (self methodsPhysicsServer2D) AreaSetSpace(area RID, space RID) {
	self.Runtime.PhysicsServer2D_area_set_space(PhysicsServer2D{self}, area, space)
}
func (self methodsPhysicsServer2D) AreaGetSpace(area RID) RID {
	return self.Runtime.PhysicsServer2D_area_get_space(PhysicsServer2D{self}, area)
}
func (self methodsPhysicsServer2D) AreaAddShape(area RID, shape RID, transform Transform2D, disabled bool) {
	self.Runtime.PhysicsServer2D_area_add_shape(PhysicsServer2D{self}, area, shape, transform, disabled)
}
func (self methodsPhysicsServer2D) AreaSetShape(area RID, shape_idx int64, shape RID) {
	self.Runtime.PhysicsServer2D_area_set_shape(PhysicsServer2D{self}, area, shape_idx, shape)
}
func (self methodsPhysicsServer2D) AreaSetShapeTransform(area RID, shape_idx int64, transform Transform2D) {
	self.Runtime.PhysicsServer2D_area_set_shape_transform(PhysicsServer2D{self}, area, shape_idx, transform)
}
func (self methodsPhysicsServer2D) AreaSetShapeDisabled(area RID, shape_idx int64, disabled bool) {
	self.Runtime.PhysicsServer2D_area_set_shape_disabled(PhysicsServer2D{self}, area, shape_idx, disabled)
}
func (self methodsPhysicsServer2D) AreaGetShapeCount(area RID) int64 {
	return self.Runtime.PhysicsServer2D_area_get_shape_count(PhysicsServer2D{self}, area)
}
func (self methodsPhysicsServer2D) AreaGetShape(area RID, shape_idx int64) RID {
	return self.Runtime.PhysicsServer2D_area_get_shape(PhysicsServer2D{self}, area, shape_idx)
}
func (self methodsPhysicsServer2D) AreaGetShapeTransform(area RID, shape_idx int64) Transform2D {
	return self.Runtime.PhysicsServer2D_area_get_shape_transform(PhysicsServer2D{self}, area, shape_idx)
}
func (self methodsPhysicsServer2D) AreaRemoveShape(area RID, shape_idx int64) {
	self.Runtime.PhysicsServer2D_area_remove_shape(PhysicsServer2D{self}, area, shape_idx)
}
func (self methodsPhysicsServer2D) AreaClearShapes(area RID) {
	self.Runtime.PhysicsServer2D_area_clear_shapes(PhysicsServer2D{self}, area)
}
func (self methodsPhysicsServer2D) AreaSetCollisionLayer(area RID, layer int64) {
	self.Runtime.PhysicsServer2D_area_set_collision_layer(PhysicsServer2D{self}, area, layer)
}
func (self methodsPhysicsServer2D) AreaGetCollisionLayer(area RID) int64 {
	return self.Runtime.PhysicsServer2D_area_get_collision_layer(PhysicsServer2D{self}, area)
}
func (self methodsPhysicsServer2D) AreaSetCollisionMask(area RID, mask int64) {
	self.Runtime.PhysicsServer2D_area_set_collision_mask(PhysicsServer2D{self}, area, mask)
}
func (self methodsPhysicsServer2D) AreaGetCollisionMask(area RID) int64 {
	return self.Runtime.PhysicsServer2D_area_get_collision_mask(PhysicsServer2D{self}, area)
}
func (self methodsPhysicsServer2D) AreaSetParam(area RID, param PhysicsServer2DAreaParameter, value any) {
	self.Runtime.PhysicsServer2D_area_set_param(PhysicsServer2D{self}, area, param, value)
}
func (self methodsPhysicsServer2D) AreaSetTransform(area RID, transform Transform2D) {
	self.Runtime.PhysicsServer2D_area_set_transform(PhysicsServer2D{self}, area, transform)
}
func (self methodsPhysicsServer2D) AreaGetParam(area RID, param PhysicsServer2DAreaParameter) any {
	return self.Runtime.PhysicsServer2D_area_get_param(PhysicsServer2D{self}, area, param)
}
func (self methodsPhysicsServer2D) AreaGetTransform(area RID) Transform2D {
	return self.Runtime.PhysicsServer2D_area_get_transform(PhysicsServer2D{self}, area)
}
func (self methodsPhysicsServer2D) AreaAttachObjectInstanceId(area RID, id int64) {
	self.Runtime.PhysicsServer2D_area_attach_object_instance_id(PhysicsServer2D{self}, area, id)
}
func (self methodsPhysicsServer2D) AreaGetObjectInstanceId(area RID) int64 {
	return self.Runtime.PhysicsServer2D_area_get_object_instance_id(PhysicsServer2D{self}, area)
}
func (self methodsPhysicsServer2D) AreaAttachCanvasInstanceId(area RID, id int64) {
	self.Runtime.PhysicsServer2D_area_attach_canvas_instance_id(PhysicsServer2D{self}, area, id)
}
func (self methodsPhysicsServer2D) AreaGetCanvasInstanceId(area RID) int64 {
	return self.Runtime.PhysicsServer2D_area_get_canvas_instance_id(PhysicsServer2D{self}, area)
}
func (self methodsPhysicsServer2D) AreaSetMonitorCallback(area RID, callback Callable) {
	self.Runtime.PhysicsServer2D_area_set_monitor_callback(PhysicsServer2D{self}, area, callback)
}
func (self methodsPhysicsServer2D) AreaSetAreaMonitorCallback(area RID, callback Callable) {
	self.Runtime.PhysicsServer2D_area_set_area_monitor_callback(PhysicsServer2D{self}, area, callback)
}
func (self methodsPhysicsServer2D) AreaSetMonitorable(area RID, monitorable bool) {
	self.Runtime.PhysicsServer2D_area_set_monitorable(PhysicsServer2D{self}, area, monitorable)
}
func (self methodsPhysicsServer2D) BodyCreate() RID {
	return self.Runtime.PhysicsServer2D_body_create(PhysicsServer2D{self})
}
func (self methodsPhysicsServer2D) BodySetSpace(body RID, space RID) {
	self.Runtime.PhysicsServer2D_body_set_space(PhysicsServer2D{self}, body, space)
}
func (self methodsPhysicsServer2D) BodyGetSpace(body RID) RID {
	return self.Runtime.PhysicsServer2D_body_get_space(PhysicsServer2D{self}, body)
}
func (self methodsPhysicsServer2D) BodySetMode(body RID, mode PhysicsServer2DBodyMode) {
	self.Runtime.PhysicsServer2D_body_set_mode(PhysicsServer2D{self}, body, mode)
}
func (self methodsPhysicsServer2D) BodyGetMode(body RID) PhysicsServer2DBodyMode {
	return self.Runtime.PhysicsServer2D_body_get_mode(PhysicsServer2D{self}, body)
}
func (self methodsPhysicsServer2D) BodyAddShape(body RID, shape RID, transform Transform2D, disabled bool) {
	self.Runtime.PhysicsServer2D_body_add_shape(PhysicsServer2D{self}, body, shape, transform, disabled)
}
func (self methodsPhysicsServer2D) BodySetShape(body RID, shape_idx int64, shape RID) {
	self.Runtime.PhysicsServer2D_body_set_shape(PhysicsServer2D{self}, body, shape_idx, shape)
}
func (self methodsPhysicsServer2D) BodySetShapeTransform(body RID, shape_idx int64, transform Transform2D) {
	self.Runtime.PhysicsServer2D_body_set_shape_transform(PhysicsServer2D{self}, body, shape_idx, transform)
}
func (self methodsPhysicsServer2D) BodyGetShapeCount(body RID) int64 {
	return self.Runtime.PhysicsServer2D_body_get_shape_count(PhysicsServer2D{self}, body)
}
func (self methodsPhysicsServer2D) BodyGetShape(body RID, shape_idx int64) RID {
	return self.Runtime.PhysicsServer2D_body_get_shape(PhysicsServer2D{self}, body, shape_idx)
}
func (self methodsPhysicsServer2D) BodyGetShapeTransform(body RID, shape_idx int64) Transform2D {
	return self.Runtime.PhysicsServer2D_body_get_shape_transform(PhysicsServer2D{self}, body, shape_idx)
}
func (self methodsPhysicsServer2D) BodyRemoveShape(body RID, shape_idx int64) {
	self.Runtime.PhysicsServer2D_body_remove_shape(PhysicsServer2D{self}, body, shape_idx)
}
func (self methodsPhysicsServer2D) BodyClearShapes(body RID) {
	self.Runtime.PhysicsServer2D_body_clear_shapes(PhysicsServer2D{self}, body)
}
func (self methodsPhysicsServer2D) BodySetShapeDisabled(body RID, shape_idx int64, disabled bool) {
	self.Runtime.PhysicsServer2D_body_set_shape_disabled(PhysicsServer2D{self}, body, shape_idx, disabled)
}
func (self methodsPhysicsServer2D) BodySetShapeAsOneWayCollision(body RID, shape_idx int64, enable bool, margin Float) {
	self.Runtime.PhysicsServer2D_body_set_shape_as_one_way_collision(PhysicsServer2D{self}, body, shape_idx, enable, margin)
}
func (self methodsPhysicsServer2D) BodyAttachObjectInstanceId(body RID, id int64) {
	self.Runtime.PhysicsServer2D_body_attach_object_instance_id(PhysicsServer2D{self}, body, id)
}
func (self methodsPhysicsServer2D) BodyGetObjectInstanceId(body RID) int64 {
	return self.Runtime.PhysicsServer2D_body_get_object_instance_id(PhysicsServer2D{self}, body)
}
func (self methodsPhysicsServer2D) BodyAttachCanvasInstanceId(body RID, id int64) {
	self.Runtime.PhysicsServer2D_body_attach_canvas_instance_id(PhysicsServer2D{self}, body, id)
}
func (self methodsPhysicsServer2D) BodyGetCanvasInstanceId(body RID) int64 {
	return self.Runtime.PhysicsServer2D_body_get_canvas_instance_id(PhysicsServer2D{self}, body)
}
func (self methodsPhysicsServer2D) BodySetContinuousCollisionDetectionMode(body RID, mode PhysicsServer2DCCDMode) {
	self.Runtime.PhysicsServer2D_body_set_continuous_collision_detection_mode(PhysicsServer2D{self}, body, mode)
}
func (self methodsPhysicsServer2D) BodyGetContinuousCollisionDetectionMode(body RID) PhysicsServer2DCCDMode {
	return self.Runtime.PhysicsServer2D_body_get_continuous_collision_detection_mode(PhysicsServer2D{self}, body)
}
func (self methodsPhysicsServer2D) BodySetCollisionLayer(body RID, layer int64) {
	self.Runtime.PhysicsServer2D_body_set_collision_layer(PhysicsServer2D{self}, body, layer)
}
func (self methodsPhysicsServer2D) BodyGetCollisionLayer(body RID) int64 {
	return self.Runtime.PhysicsServer2D_body_get_collision_layer(PhysicsServer2D{self}, body)
}
func (self methodsPhysicsServer2D) BodySetCollisionMask(body RID, mask int64) {
	self.Runtime.PhysicsServer2D_body_set_collision_mask(PhysicsServer2D{self}, body, mask)
}
func (self methodsPhysicsServer2D) BodyGetCollisionMask(body RID) int64 {
	return self.Runtime.PhysicsServer2D_body_get_collision_mask(PhysicsServer2D{self}, body)
}
func (self methodsPhysicsServer2D) BodySetCollisionPriority(body RID, priority Float) {
	self.Runtime.PhysicsServer2D_body_set_collision_priority(PhysicsServer2D{self}, body, priority)
}
func (self methodsPhysicsServer2D) BodyGetCollisionPriority(body RID) Float {
	return self.Runtime.PhysicsServer2D_body_get_collision_priority(PhysicsServer2D{self}, body)
}
func (self methodsPhysicsServer2D) BodySetParam(body RID, param PhysicsServer2DBodyParameter, value any) {
	self.Runtime.PhysicsServer2D_body_set_param(PhysicsServer2D{self}, body, param, value)
}
func (self methodsPhysicsServer2D) BodyGetParam(body RID, param PhysicsServer2DBodyParameter) any {
	return self.Runtime.PhysicsServer2D_body_get_param(PhysicsServer2D{self}, body, param)
}
func (self methodsPhysicsServer2D) BodyResetMassProperties(body RID) {
	self.Runtime.PhysicsServer2D_body_reset_mass_properties(PhysicsServer2D{self}, body)
}
func (self methodsPhysicsServer2D) BodySetState(body RID, state PhysicsServer2DBodyState, value any) {
	self.Runtime.PhysicsServer2D_body_set_state(PhysicsServer2D{self}, body, state, value)
}
func (self methodsPhysicsServer2D) BodyGetState(body RID, state PhysicsServer2DBodyState) any {
	return self.Runtime.PhysicsServer2D_body_get_state(PhysicsServer2D{self}, body, state)
}
func (self methodsPhysicsServer2D) BodyApplyCentralImpulse(body RID, impulse Vector2) {
	self.Runtime.PhysicsServer2D_body_apply_central_impulse(PhysicsServer2D{self}, body, impulse)
}
func (self methodsPhysicsServer2D) BodyApplyTorqueImpulse(body RID, impulse Float) {
	self.Runtime.PhysicsServer2D_body_apply_torque_impulse(PhysicsServer2D{self}, body, impulse)
}
func (self methodsPhysicsServer2D) BodyApplyImpulse(body RID, impulse Vector2, position Vector2) {
	self.Runtime.PhysicsServer2D_body_apply_impulse(PhysicsServer2D{self}, body, impulse, position)
}
func (self methodsPhysicsServer2D) BodyApplyCentralForce(body RID, force Vector2) {
	self.Runtime.PhysicsServer2D_body_apply_central_force(PhysicsServer2D{self}, body, force)
}
func (self methodsPhysicsServer2D) BodyApplyForce(body RID, force Vector2, position Vector2) {
	self.Runtime.PhysicsServer2D_body_apply_force(PhysicsServer2D{self}, body, force, position)
}
func (self methodsPhysicsServer2D) BodyApplyTorque(body RID, torque Float) {
	self.Runtime.PhysicsServer2D_body_apply_torque(PhysicsServer2D{self}, body, torque)
}
func (self methodsPhysicsServer2D) BodyAddConstantCentralForce(body RID, force Vector2) {
	self.Runtime.PhysicsServer2D_body_add_constant_central_force(PhysicsServer2D{self}, body, force)
}
func (self methodsPhysicsServer2D) BodyAddConstantForce(body RID, force Vector2, position Vector2) {
	self.Runtime.PhysicsServer2D_body_add_constant_force(PhysicsServer2D{self}, body, force, position)
}
func (self methodsPhysicsServer2D) BodyAddConstantTorque(body RID, torque Float) {
	self.Runtime.PhysicsServer2D_body_add_constant_torque(PhysicsServer2D{self}, body, torque)
}
func (self methodsPhysicsServer2D) BodySetConstantForce(body RID, force Vector2) {
	self.Runtime.PhysicsServer2D_body_set_constant_force(PhysicsServer2D{self}, body, force)
}
func (self methodsPhysicsServer2D) BodyGetConstantForce(body RID) Vector2 {
	return self.Runtime.PhysicsServer2D_body_get_constant_force(PhysicsServer2D{self}, body)
}
func (self methodsPhysicsServer2D) BodySetConstantTorque(body RID, torque Float) {
	self.Runtime.PhysicsServer2D_body_set_constant_torque(PhysicsServer2D{self}, body, torque)
}
func (self methodsPhysicsServer2D) BodyGetConstantTorque(body RID) Float {
	return self.Runtime.PhysicsServer2D_body_get_constant_torque(PhysicsServer2D{self}, body)
}
func (self methodsPhysicsServer2D) BodySetAxisVelocity(body RID, axis_velocity Vector2) {
	self.Runtime.PhysicsServer2D_body_set_axis_velocity(PhysicsServer2D{self}, body, axis_velocity)
}
func (self methodsPhysicsServer2D) BodyAddCollisionException(body RID, excepted_body RID) {
	self.Runtime.PhysicsServer2D_body_add_collision_exception(PhysicsServer2D{self}, body, excepted_body)
}
func (self methodsPhysicsServer2D) BodyRemoveCollisionException(body RID, excepted_body RID) {
	self.Runtime.PhysicsServer2D_body_remove_collision_exception(PhysicsServer2D{self}, body, excepted_body)
}
func (self methodsPhysicsServer2D) BodySetMaxContactsReported(body RID, amount int64) {
	self.Runtime.PhysicsServer2D_body_set_max_contacts_reported(PhysicsServer2D{self}, body, amount)
}
func (self methodsPhysicsServer2D) BodyGetMaxContactsReported(body RID) int64 {
	return self.Runtime.PhysicsServer2D_body_get_max_contacts_reported(PhysicsServer2D{self}, body)
}
func (self methodsPhysicsServer2D) BodySetOmitForceIntegration(body RID, enable bool) {
	self.Runtime.PhysicsServer2D_body_set_omit_force_integration(PhysicsServer2D{self}, body, enable)
}
func (self methodsPhysicsServer2D) BodyIsOmittingForceIntegration(body RID) bool {
	return self.Runtime.PhysicsServer2D_body_is_omitting_force_integration(PhysicsServer2D{self}, body)
}
func (self methodsPhysicsServer2D) BodySetForceIntegrationCallback(body RID, callable Callable, userdata any) {
	self.Runtime.PhysicsServer2D_body_set_force_integration_callback(PhysicsServer2D{self}, body, callable, userdata)
}
func (self methodsPhysicsServer2D) BodyTestMotion(body RID, parameters PhysicsTestMotionParameters2D, result PhysicsTestMotionResult2D) bool {
	return self.Runtime.PhysicsServer2D_body_test_motion(PhysicsServer2D{self}, body, parameters, result)
}
func (self methodsPhysicsServer2D) BodyGetDirectState(body RID) PhysicsDirectBodyState2D {
	return self.Runtime.PhysicsServer2D_body_get_direct_state(PhysicsServer2D{self}, body)
}
func (self methodsPhysicsServer2D) JointCreate() RID {
	return self.Runtime.PhysicsServer2D_joint_create(PhysicsServer2D{self})
}
func (self methodsPhysicsServer2D) JointClear(joint RID) {
	self.Runtime.PhysicsServer2D_joint_clear(PhysicsServer2D{self}, joint)
}
func (self methodsPhysicsServer2D) JointSetParam(joint RID, param PhysicsServer2DJointParam, value Float) {
	self.Runtime.PhysicsServer2D_joint_set_param(PhysicsServer2D{self}, joint, param, value)
}
func (self methodsPhysicsServer2D) JointGetParam(joint RID, param PhysicsServer2DJointParam) Float {
	return self.Runtime.PhysicsServer2D_joint_get_param(PhysicsServer2D{self}, joint, param)
}
func (self methodsPhysicsServer2D) JointDisableCollisionsBetweenBodies(joint RID, disable bool) {
	self.Runtime.PhysicsServer2D_joint_disable_collisions_between_bodies(PhysicsServer2D{self}, joint, disable)
}
func (self methodsPhysicsServer2D) JointIsDisabledCollisionsBetweenBodies(joint RID) bool {
	return self.Runtime.PhysicsServer2D_joint_is_disabled_collisions_between_bodies(PhysicsServer2D{self}, joint)
}
func (self methodsPhysicsServer2D) JointMakePin(joint RID, anchor Vector2, body_a RID, body_b RID) {
	self.Runtime.PhysicsServer2D_joint_make_pin(PhysicsServer2D{self}, joint, anchor, body_a, body_b)
}
func (self methodsPhysicsServer2D) JointMakeGroove(joint RID, groove1_a Vector2, groove2_a Vector2, anchor_b Vector2, body_a RID, body_b RID) {
	self.Runtime.PhysicsServer2D_joint_make_groove(PhysicsServer2D{self}, joint, groove1_a, groove2_a, anchor_b, body_a, body_b)
}
func (self methodsPhysicsServer2D) JointMakeDampedSpring(joint RID, anchor_a Vector2, anchor_b Vector2, body_a RID, body_b RID) {
	self.Runtime.PhysicsServer2D_joint_make_damped_spring(PhysicsServer2D{self}, joint, anchor_a, anchor_b, body_a, body_b)
}
func (self methodsPhysicsServer2D) PinJointSetFlag(joint RID, flag PhysicsServer2DPinJointFlag, enabled bool) {
	self.Runtime.PhysicsServer2D_pin_joint_set_flag(PhysicsServer2D{self}, joint, flag, enabled)
}
func (self methodsPhysicsServer2D) PinJointGetFlag(joint RID, flag PhysicsServer2DPinJointFlag) bool {
	return self.Runtime.PhysicsServer2D_pin_joint_get_flag(PhysicsServer2D{self}, joint, flag)
}
func (self methodsPhysicsServer2D) PinJointSetParam(joint RID, param PhysicsServer2DPinJointParam, value Float) {
	self.Runtime.PhysicsServer2D_pin_joint_set_param(PhysicsServer2D{self}, joint, param, value)
}
func (self methodsPhysicsServer2D) PinJointGetParam(joint RID, param PhysicsServer2DPinJointParam) Float {
	return self.Runtime.PhysicsServer2D_pin_joint_get_param(PhysicsServer2D{self}, joint, param)
}
func (self methodsPhysicsServer2D) DampedSpringJointSetParam(joint RID, param PhysicsServer2DDampedSpringParam, value Float) {
	self.Runtime.PhysicsServer2D_damped_spring_joint_set_param(PhysicsServer2D{self}, joint, param, value)
}
func (self methodsPhysicsServer2D) DampedSpringJointGetParam(joint RID, param PhysicsServer2DDampedSpringParam) Float {
	return self.Runtime.PhysicsServer2D_damped_spring_joint_get_param(PhysicsServer2D{self}, joint, param)
}
func (self methodsPhysicsServer2D) JointGetType(joint RID) PhysicsServer2DJointType {
	return self.Runtime.PhysicsServer2D_joint_get_type(PhysicsServer2D{self}, joint)
}
func (self methodsPhysicsServer2D) FreeRid(rid RID) {
	self.Runtime.PhysicsServer2D_free_rid(PhysicsServer2D{self}, rid)
}
func (self methodsPhysicsServer2D) SetActive(active bool) {
	self.Runtime.PhysicsServer2D_set_active(PhysicsServer2D{self}, active)
}
func (self methodsPhysicsServer2D) GetProcessInfo(process_info PhysicsServer2DProcessInfo) int64 {
	return self.Runtime.PhysicsServer2D_get_process_info(PhysicsServer2D{self}, process_info)
}

type methodsPhysicsServer2DExtension struct {
	_ [0]*methodsPhysicsServer2DExtension
	class
}

func (self PhysicsServer2DExtension) PhysicsServer2D() PhysicsServer2D {
	var parent PhysicsServer2D
	parent.class = self.class
	return parent
}
func (self methodsPhysicsServer2DExtension) BodyTestMotionIsExcludingBody(body RID) bool {
	return self.Runtime.PhysicsServer2DExtension_body_test_motion_is_excluding_body(PhysicsServer2DExtension{self}, body)
}
func (self methodsPhysicsServer2DExtension) BodyTestMotionIsExcludingObject(object int64) bool {
	return self.Runtime.PhysicsServer2DExtension_body_test_motion_is_excluding_object(PhysicsServer2DExtension{self}, object)
}

type methodsPhysicsServer2DManager struct {
	_ [0]*methodsPhysicsServer2DManager
	class
}

func (self PhysicsServer2DManager) Object() Object {
	var parent Object
	parent.class = self.class
	return parent
}
func (self methodsPhysicsServer2DManager) RegisterServer(name string, create_callback Callable) {
	self.Runtime.PhysicsServer2DManager_register_server(PhysicsServer2DManager{self}, name, create_callback)
}
func (self methodsPhysicsServer2DManager) SetDefaultServer(name string, priority int64) {
	self.Runtime.PhysicsServer2DManager_set_default_server(PhysicsServer2DManager{self}, name, priority)
}

type methodsPhysicsServer3D struct {
	_ [0]*methodsPhysicsServer3D
	class
}

func (self PhysicsServer3D) Object() Object {
	var parent Object
	parent.class = self.class
	return parent
}
func (self methodsPhysicsServer3D) WorldBoundaryShapeCreate() RID {
	return self.Runtime.PhysicsServer3D_world_boundary_shape_create(PhysicsServer3D{self})
}
func (self methodsPhysicsServer3D) SeparationRayShapeCreate() RID {
	return self.Runtime.PhysicsServer3D_separation_ray_shape_create(PhysicsServer3D{self})
}
func (self methodsPhysicsServer3D) SphereShapeCreate() RID {
	return self.Runtime.PhysicsServer3D_sphere_shape_create(PhysicsServer3D{self})
}
func (self methodsPhysicsServer3D) BoxShapeCreate() RID {
	return self.Runtime.PhysicsServer3D_box_shape_create(PhysicsServer3D{self})
}
func (self methodsPhysicsServer3D) CapsuleShapeCreate() RID {
	return self.Runtime.PhysicsServer3D_capsule_shape_create(PhysicsServer3D{self})
}
func (self methodsPhysicsServer3D) CylinderShapeCreate() RID {
	return self.Runtime.PhysicsServer3D_cylinder_shape_create(PhysicsServer3D{self})
}
func (self methodsPhysicsServer3D) ConvexPolygonShapeCreate() RID {
	return self.Runtime.PhysicsServer3D_convex_polygon_shape_create(PhysicsServer3D{self})
}
func (self methodsPhysicsServer3D) ConcavePolygonShapeCreate() RID {
	return self.Runtime.PhysicsServer3D_concave_polygon_shape_create(PhysicsServer3D{self})
}
func (self methodsPhysicsServer3D) HeightmapShapeCreate() RID {
	return self.Runtime.PhysicsServer3D_heightmap_shape_create(PhysicsServer3D{self})
}
func (self methodsPhysicsServer3D) CustomShapeCreate() RID {
	return self.Runtime.PhysicsServer3D_custom_shape_create(PhysicsServer3D{self})
}
func (self methodsPhysicsServer3D) ShapeSetData(shape RID, data any) {
	self.Runtime.PhysicsServer3D_shape_set_data(PhysicsServer3D{self}, shape, data)
}
func (self methodsPhysicsServer3D) ShapeGetType(shape RID) PhysicsServer3DShapeType {
	return self.Runtime.PhysicsServer3D_shape_get_type(PhysicsServer3D{self}, shape)
}
func (self methodsPhysicsServer3D) ShapeGetData(shape RID) any {
	return self.Runtime.PhysicsServer3D_shape_get_data(PhysicsServer3D{self}, shape)
}
func (self methodsPhysicsServer3D) SpaceCreate() RID {
	return self.Runtime.PhysicsServer3D_space_create(PhysicsServer3D{self})
}
func (self methodsPhysicsServer3D) SpaceSetActive(space RID, active bool) {
	self.Runtime.PhysicsServer3D_space_set_active(PhysicsServer3D{self}, space, active)
}
func (self methodsPhysicsServer3D) SpaceIsActive(space RID) bool {
	return self.Runtime.PhysicsServer3D_space_is_active(PhysicsServer3D{self}, space)
}
func (self methodsPhysicsServer3D) SpaceSetParam(space RID, param PhysicsServer3DSpaceParameter, value Float) {
	self.Runtime.PhysicsServer3D_space_set_param(PhysicsServer3D{self}, space, param, value)
}
func (self methodsPhysicsServer3D) SpaceGetParam(space RID, param PhysicsServer3DSpaceParameter) Float {
	return self.Runtime.PhysicsServer3D_space_get_param(PhysicsServer3D{self}, space, param)
}
func (self methodsPhysicsServer3D) SpaceGetDirectState(space RID) PhysicsDirectSpaceState3D {
	return self.Runtime.PhysicsServer3D_space_get_direct_state(PhysicsServer3D{self}, space)
}
func (self methodsPhysicsServer3D) AreaCreate() RID {
	return self.Runtime.PhysicsServer3D_area_create(PhysicsServer3D{self})
}
func (self methodsPhysicsServer3D) AreaSetSpace(area RID, space RID) {
	self.Runtime.PhysicsServer3D_area_set_space(PhysicsServer3D{self}, area, space)
}
func (self methodsPhysicsServer3D) AreaGetSpace(area RID) RID {
	return self.Runtime.PhysicsServer3D_area_get_space(PhysicsServer3D{self}, area)
}
func (self methodsPhysicsServer3D) AreaAddShape(area RID, shape RID, transform Transform3D, disabled bool) {
	self.Runtime.PhysicsServer3D_area_add_shape(PhysicsServer3D{self}, area, shape, transform, disabled)
}
func (self methodsPhysicsServer3D) AreaSetShape(area RID, shape_idx int64, shape RID) {
	self.Runtime.PhysicsServer3D_area_set_shape(PhysicsServer3D{self}, area, shape_idx, shape)
}
func (self methodsPhysicsServer3D) AreaSetShapeTransform(area RID, shape_idx int64, transform Transform3D) {
	self.Runtime.PhysicsServer3D_area_set_shape_transform(PhysicsServer3D{self}, area, shape_idx, transform)
}
func (self methodsPhysicsServer3D) AreaSetShapeDisabled(area RID, shape_idx int64, disabled bool) {
	self.Runtime.PhysicsServer3D_area_set_shape_disabled(PhysicsServer3D{self}, area, shape_idx, disabled)
}
func (self methodsPhysicsServer3D) AreaGetShapeCount(area RID) int64 {
	return self.Runtime.PhysicsServer3D_area_get_shape_count(PhysicsServer3D{self}, area)
}
func (self methodsPhysicsServer3D) AreaGetShape(area RID, shape_idx int64) RID {
	return self.Runtime.PhysicsServer3D_area_get_shape(PhysicsServer3D{self}, area, shape_idx)
}
func (self methodsPhysicsServer3D) AreaGetShapeTransform(area RID, shape_idx int64) Transform3D {
	return self.Runtime.PhysicsServer3D_area_get_shape_transform(PhysicsServer3D{self}, area, shape_idx)
}
func (self methodsPhysicsServer3D) AreaRemoveShape(area RID, shape_idx int64) {
	self.Runtime.PhysicsServer3D_area_remove_shape(PhysicsServer3D{self}, area, shape_idx)
}
func (self methodsPhysicsServer3D) AreaClearShapes(area RID) {
	self.Runtime.PhysicsServer3D_area_clear_shapes(PhysicsServer3D{self}, area)
}
func (self methodsPhysicsServer3D) AreaSetCollisionLayer(area RID, layer int64) {
	self.Runtime.PhysicsServer3D_area_set_collision_layer(PhysicsServer3D{self}, area, layer)
}
func (self methodsPhysicsServer3D) AreaGetCollisionLayer(area RID) int64 {
	return self.Runtime.PhysicsServer3D_area_get_collision_layer(PhysicsServer3D{self}, area)
}
func (self methodsPhysicsServer3D) AreaSetCollisionMask(area RID, mask int64) {
	self.Runtime.PhysicsServer3D_area_set_collision_mask(PhysicsServer3D{self}, area, mask)
}
func (self methodsPhysicsServer3D) AreaGetCollisionMask(area RID) int64 {
	return self.Runtime.PhysicsServer3D_area_get_collision_mask(PhysicsServer3D{self}, area)
}
func (self methodsPhysicsServer3D) AreaSetParam(area RID, param PhysicsServer3DAreaParameter, value any) {
	self.Runtime.PhysicsServer3D_area_set_param(PhysicsServer3D{self}, area, param, value)
}
func (self methodsPhysicsServer3D) AreaSetTransform(area RID, transform Transform3D) {
	self.Runtime.PhysicsServer3D_area_set_transform(PhysicsServer3D{self}, area, transform)
}
func (self methodsPhysicsServer3D) AreaGetParam(area RID, param PhysicsServer3DAreaParameter) any {
	return self.Runtime.PhysicsServer3D_area_get_param(PhysicsServer3D{self}, area, param)
}
func (self methodsPhysicsServer3D) AreaGetTransform(area RID) Transform3D {
	return self.Runtime.PhysicsServer3D_area_get_transform(PhysicsServer3D{self}, area)
}
func (self methodsPhysicsServer3D) AreaAttachObjectInstanceId(area RID, id int64) {
	self.Runtime.PhysicsServer3D_area_attach_object_instance_id(PhysicsServer3D{self}, area, id)
}
func (self methodsPhysicsServer3D) AreaGetObjectInstanceId(area RID) int64 {
	return self.Runtime.PhysicsServer3D_area_get_object_instance_id(PhysicsServer3D{self}, area)
}
func (self methodsPhysicsServer3D) AreaSetMonitorCallback(area RID, callback Callable) {
	self.Runtime.PhysicsServer3D_area_set_monitor_callback(PhysicsServer3D{self}, area, callback)
}
func (self methodsPhysicsServer3D) AreaSetAreaMonitorCallback(area RID, callback Callable) {
	self.Runtime.PhysicsServer3D_area_set_area_monitor_callback(PhysicsServer3D{self}, area, callback)
}
func (self methodsPhysicsServer3D) AreaSetMonitorable(area RID, monitorable bool) {
	self.Runtime.PhysicsServer3D_area_set_monitorable(PhysicsServer3D{self}, area, monitorable)
}
func (self methodsPhysicsServer3D) AreaSetRayPickable(area RID, enable bool) {
	self.Runtime.PhysicsServer3D_area_set_ray_pickable(PhysicsServer3D{self}, area, enable)
}
func (self methodsPhysicsServer3D) BodyCreate() RID {
	return self.Runtime.PhysicsServer3D_body_create(PhysicsServer3D{self})
}
func (self methodsPhysicsServer3D) BodySetSpace(body RID, space RID) {
	self.Runtime.PhysicsServer3D_body_set_space(PhysicsServer3D{self}, body, space)
}
func (self methodsPhysicsServer3D) BodyGetSpace(body RID) RID {
	return self.Runtime.PhysicsServer3D_body_get_space(PhysicsServer3D{self}, body)
}
func (self methodsPhysicsServer3D) BodySetMode(body RID, mode PhysicsServer3DBodyMode) {
	self.Runtime.PhysicsServer3D_body_set_mode(PhysicsServer3D{self}, body, mode)
}
func (self methodsPhysicsServer3D) BodyGetMode(body RID) PhysicsServer3DBodyMode {
	return self.Runtime.PhysicsServer3D_body_get_mode(PhysicsServer3D{self}, body)
}
func (self methodsPhysicsServer3D) BodySetCollisionLayer(body RID, layer int64) {
	self.Runtime.PhysicsServer3D_body_set_collision_layer(PhysicsServer3D{self}, body, layer)
}
func (self methodsPhysicsServer3D) BodyGetCollisionLayer(body RID) int64 {
	return self.Runtime.PhysicsServer3D_body_get_collision_layer(PhysicsServer3D{self}, body)
}
func (self methodsPhysicsServer3D) BodySetCollisionMask(body RID, mask int64) {
	self.Runtime.PhysicsServer3D_body_set_collision_mask(PhysicsServer3D{self}, body, mask)
}
func (self methodsPhysicsServer3D) BodyGetCollisionMask(body RID) int64 {
	return self.Runtime.PhysicsServer3D_body_get_collision_mask(PhysicsServer3D{self}, body)
}
func (self methodsPhysicsServer3D) BodySetCollisionPriority(body RID, priority Float) {
	self.Runtime.PhysicsServer3D_body_set_collision_priority(PhysicsServer3D{self}, body, priority)
}
func (self methodsPhysicsServer3D) BodyGetCollisionPriority(body RID) Float {
	return self.Runtime.PhysicsServer3D_body_get_collision_priority(PhysicsServer3D{self}, body)
}
func (self methodsPhysicsServer3D) BodyAddShape(body RID, shape RID, transform Transform3D, disabled bool) {
	self.Runtime.PhysicsServer3D_body_add_shape(PhysicsServer3D{self}, body, shape, transform, disabled)
}
func (self methodsPhysicsServer3D) BodySetShape(body RID, shape_idx int64, shape RID) {
	self.Runtime.PhysicsServer3D_body_set_shape(PhysicsServer3D{self}, body, shape_idx, shape)
}
func (self methodsPhysicsServer3D) BodySetShapeTransform(body RID, shape_idx int64, transform Transform3D) {
	self.Runtime.PhysicsServer3D_body_set_shape_transform(PhysicsServer3D{self}, body, shape_idx, transform)
}
func (self methodsPhysicsServer3D) BodySetShapeDisabled(body RID, shape_idx int64, disabled bool) {
	self.Runtime.PhysicsServer3D_body_set_shape_disabled(PhysicsServer3D{self}, body, shape_idx, disabled)
}
func (self methodsPhysicsServer3D) BodyGetShapeCount(body RID) int64 {
	return self.Runtime.PhysicsServer3D_body_get_shape_count(PhysicsServer3D{self}, body)
}
func (self methodsPhysicsServer3D) BodyGetShape(body RID, shape_idx int64) RID {
	return self.Runtime.PhysicsServer3D_body_get_shape(PhysicsServer3D{self}, body, shape_idx)
}
func (self methodsPhysicsServer3D) BodyGetShapeTransform(body RID, shape_idx int64) Transform3D {
	return self.Runtime.PhysicsServer3D_body_get_shape_transform(PhysicsServer3D{self}, body, shape_idx)
}
func (self methodsPhysicsServer3D) BodyRemoveShape(body RID, shape_idx int64) {
	self.Runtime.PhysicsServer3D_body_remove_shape(PhysicsServer3D{self}, body, shape_idx)
}
func (self methodsPhysicsServer3D) BodyClearShapes(body RID) {
	self.Runtime.PhysicsServer3D_body_clear_shapes(PhysicsServer3D{self}, body)
}
func (self methodsPhysicsServer3D) BodyAttachObjectInstanceId(body RID, id int64) {
	self.Runtime.PhysicsServer3D_body_attach_object_instance_id(PhysicsServer3D{self}, body, id)
}
func (self methodsPhysicsServer3D) BodyGetObjectInstanceId(body RID) int64 {
	return self.Runtime.PhysicsServer3D_body_get_object_instance_id(PhysicsServer3D{self}, body)
}
func (self methodsPhysicsServer3D) BodySetEnableContinuousCollisionDetection(body RID, enable bool) {
	self.Runtime.PhysicsServer3D_body_set_enable_continuous_collision_detection(PhysicsServer3D{self}, body, enable)
}
func (self methodsPhysicsServer3D) BodyIsContinuousCollisionDetectionEnabled(body RID) bool {
	return self.Runtime.PhysicsServer3D_body_is_continuous_collision_detection_enabled(PhysicsServer3D{self}, body)
}
func (self methodsPhysicsServer3D) BodySetParam(body RID, param PhysicsServer3DBodyParameter, value any) {
	self.Runtime.PhysicsServer3D_body_set_param(PhysicsServer3D{self}, body, param, value)
}
func (self methodsPhysicsServer3D) BodyGetParam(body RID, param PhysicsServer3DBodyParameter) any {
	return self.Runtime.PhysicsServer3D_body_get_param(PhysicsServer3D{self}, body, param)
}
func (self methodsPhysicsServer3D) BodyResetMassProperties(body RID) {
	self.Runtime.PhysicsServer3D_body_reset_mass_properties(PhysicsServer3D{self}, body)
}
func (self methodsPhysicsServer3D) BodySetState(body RID, state PhysicsServer3DBodyState, value any) {
	self.Runtime.PhysicsServer3D_body_set_state(PhysicsServer3D{self}, body, state, value)
}
func (self methodsPhysicsServer3D) BodyGetState(body RID, state PhysicsServer3DBodyState) any {
	return self.Runtime.PhysicsServer3D_body_get_state(PhysicsServer3D{self}, body, state)
}
func (self methodsPhysicsServer3D) BodyApplyCentralImpulse(body RID, impulse Vector3) {
	self.Runtime.PhysicsServer3D_body_apply_central_impulse(PhysicsServer3D{self}, body, impulse)
}
func (self methodsPhysicsServer3D) BodyApplyImpulse(body RID, impulse Vector3, position Vector3) {
	self.Runtime.PhysicsServer3D_body_apply_impulse(PhysicsServer3D{self}, body, impulse, position)
}
func (self methodsPhysicsServer3D) BodyApplyTorqueImpulse(body RID, impulse Vector3) {
	self.Runtime.PhysicsServer3D_body_apply_torque_impulse(PhysicsServer3D{self}, body, impulse)
}
func (self methodsPhysicsServer3D) BodyApplyCentralForce(body RID, force Vector3) {
	self.Runtime.PhysicsServer3D_body_apply_central_force(PhysicsServer3D{self}, body, force)
}
func (self methodsPhysicsServer3D) BodyApplyForce(body RID, force Vector3, position Vector3) {
	self.Runtime.PhysicsServer3D_body_apply_force(PhysicsServer3D{self}, body, force, position)
}
func (self methodsPhysicsServer3D) BodyApplyTorque(body RID, torque Vector3) {
	self.Runtime.PhysicsServer3D_body_apply_torque(PhysicsServer3D{self}, body, torque)
}
func (self methodsPhysicsServer3D) BodyAddConstantCentralForce(body RID, force Vector3) {
	self.Runtime.PhysicsServer3D_body_add_constant_central_force(PhysicsServer3D{self}, body, force)
}
func (self methodsPhysicsServer3D) BodyAddConstantForce(body RID, force Vector3, position Vector3) {
	self.Runtime.PhysicsServer3D_body_add_constant_force(PhysicsServer3D{self}, body, force, position)
}
func (self methodsPhysicsServer3D) BodyAddConstantTorque(body RID, torque Vector3) {
	self.Runtime.PhysicsServer3D_body_add_constant_torque(PhysicsServer3D{self}, body, torque)
}
func (self methodsPhysicsServer3D) BodySetConstantForce(body RID, force Vector3) {
	self.Runtime.PhysicsServer3D_body_set_constant_force(PhysicsServer3D{self}, body, force)
}
func (self methodsPhysicsServer3D) BodyGetConstantForce(body RID) Vector3 {
	return self.Runtime.PhysicsServer3D_body_get_constant_force(PhysicsServer3D{self}, body)
}
func (self methodsPhysicsServer3D) BodySetConstantTorque(body RID, torque Vector3) {
	self.Runtime.PhysicsServer3D_body_set_constant_torque(PhysicsServer3D{self}, body, torque)
}
func (self methodsPhysicsServer3D) BodyGetConstantTorque(body RID) Vector3 {
	return self.Runtime.PhysicsServer3D_body_get_constant_torque(PhysicsServer3D{self}, body)
}
func (self methodsPhysicsServer3D) BodySetAxisVelocity(body RID, axis_velocity Vector3) {
	self.Runtime.PhysicsServer3D_body_set_axis_velocity(PhysicsServer3D{self}, body, axis_velocity)
}
func (self methodsPhysicsServer3D) BodySetAxisLock(body RID, axis PhysicsServer3DBodyAxis, lock bool) {
	self.Runtime.PhysicsServer3D_body_set_axis_lock(PhysicsServer3D{self}, body, axis, lock)
}
func (self methodsPhysicsServer3D) BodyIsAxisLocked(body RID, axis PhysicsServer3DBodyAxis) bool {
	return self.Runtime.PhysicsServer3D_body_is_axis_locked(PhysicsServer3D{self}, body, axis)
}
func (self methodsPhysicsServer3D) BodyAddCollisionException(body RID, excepted_body RID) {
	self.Runtime.PhysicsServer3D_body_add_collision_exception(PhysicsServer3D{self}, body, excepted_body)
}
func (self methodsPhysicsServer3D) BodyRemoveCollisionException(body RID, excepted_body RID) {
	self.Runtime.PhysicsServer3D_body_remove_collision_exception(PhysicsServer3D{self}, body, excepted_body)
}
func (self methodsPhysicsServer3D) BodySetMaxContactsReported(body RID, amount int64) {
	self.Runtime.PhysicsServer3D_body_set_max_contacts_reported(PhysicsServer3D{self}, body, amount)
}
func (self methodsPhysicsServer3D) BodyGetMaxContactsReported(body RID) int64 {
	return self.Runtime.PhysicsServer3D_body_get_max_contacts_reported(PhysicsServer3D{self}, body)
}
func (self methodsPhysicsServer3D) BodySetOmitForceIntegration(body RID, enable bool) {
	self.Runtime.PhysicsServer3D_body_set_omit_force_integration(PhysicsServer3D{self}, body, enable)
}
func (self methodsPhysicsServer3D) BodyIsOmittingForceIntegration(body RID) bool {
	return self.Runtime.PhysicsServer3D_body_is_omitting_force_integration(PhysicsServer3D{self}, body)
}
func (self methodsPhysicsServer3D) BodySetForceIntegrationCallback(body RID, callable Callable, userdata any) {
	self.Runtime.PhysicsServer3D_body_set_force_integration_callback(PhysicsServer3D{self}, body, callable, userdata)
}
func (self methodsPhysicsServer3D) BodySetRayPickable(body RID, enable bool) {
	self.Runtime.PhysicsServer3D_body_set_ray_pickable(PhysicsServer3D{self}, body, enable)
}
func (self methodsPhysicsServer3D) BodyTestMotion(body RID, parameters PhysicsTestMotionParameters3D, result PhysicsTestMotionResult3D) bool {
	return self.Runtime.PhysicsServer3D_body_test_motion(PhysicsServer3D{self}, body, parameters, result)
}
func (self methodsPhysicsServer3D) BodyGetDirectState(body RID) PhysicsDirectBodyState3D {
	return self.Runtime.PhysicsServer3D_body_get_direct_state(PhysicsServer3D{self}, body)
}
func (self methodsPhysicsServer3D) SoftBodyGetBounds(body RID) AABB {
	return self.Runtime.PhysicsServer3D_soft_body_get_bounds(PhysicsServer3D{self}, body)
}
func (self methodsPhysicsServer3D) JointCreate() RID {
	return self.Runtime.PhysicsServer3D_joint_create(PhysicsServer3D{self})
}
func (self methodsPhysicsServer3D) JointClear(joint RID) {
	self.Runtime.PhysicsServer3D_joint_clear(PhysicsServer3D{self}, joint)
}
func (self methodsPhysicsServer3D) JointMakePin(joint RID, body_A RID, local_A Vector3, body_B RID, local_B Vector3) {
	self.Runtime.PhysicsServer3D_joint_make_pin(PhysicsServer3D{self}, joint, body_A, local_A, body_B, local_B)
}
func (self methodsPhysicsServer3D) PinJointSetParam(joint RID, param PhysicsServer3DPinJointParam, value Float) {
	self.Runtime.PhysicsServer3D_pin_joint_set_param(PhysicsServer3D{self}, joint, param, value)
}
func (self methodsPhysicsServer3D) PinJointGetParam(joint RID, param PhysicsServer3DPinJointParam) Float {
	return self.Runtime.PhysicsServer3D_pin_joint_get_param(PhysicsServer3D{self}, joint, param)
}
func (self methodsPhysicsServer3D) PinJointSetLocalA(joint RID, local_A Vector3) {
	self.Runtime.PhysicsServer3D_pin_joint_set_local_a(PhysicsServer3D{self}, joint, local_A)
}
func (self methodsPhysicsServer3D) PinJointGetLocalA(joint RID) Vector3 {
	return self.Runtime.PhysicsServer3D_pin_joint_get_local_a(PhysicsServer3D{self}, joint)
}
func (self methodsPhysicsServer3D) PinJointSetLocalB(joint RID, local_B Vector3) {
	self.Runtime.PhysicsServer3D_pin_joint_set_local_b(PhysicsServer3D{self}, joint, local_B)
}
func (self methodsPhysicsServer3D) PinJointGetLocalB(joint RID) Vector3 {
	return self.Runtime.PhysicsServer3D_pin_joint_get_local_b(PhysicsServer3D{self}, joint)
}
func (self methodsPhysicsServer3D) JointMakeHinge(joint RID, body_A RID, hinge_A Transform3D, body_B RID, hinge_B Transform3D) {
	self.Runtime.PhysicsServer3D_joint_make_hinge(PhysicsServer3D{self}, joint, body_A, hinge_A, body_B, hinge_B)
}
func (self methodsPhysicsServer3D) HingeJointSetParam(joint RID, param PhysicsServer3DHingeJointParam, value Float) {
	self.Runtime.PhysicsServer3D_hinge_joint_set_param(PhysicsServer3D{self}, joint, param, value)
}
func (self methodsPhysicsServer3D) HingeJointGetParam(joint RID, param PhysicsServer3DHingeJointParam) Float {
	return self.Runtime.PhysicsServer3D_hinge_joint_get_param(PhysicsServer3D{self}, joint, param)
}
func (self methodsPhysicsServer3D) HingeJointSetFlag(joint RID, flag PhysicsServer3DHingeJointFlag, enabled bool) {
	self.Runtime.PhysicsServer3D_hinge_joint_set_flag(PhysicsServer3D{self}, joint, flag, enabled)
}
func (self methodsPhysicsServer3D) HingeJointGetFlag(joint RID, flag PhysicsServer3DHingeJointFlag) bool {
	return self.Runtime.PhysicsServer3D_hinge_joint_get_flag(PhysicsServer3D{self}, joint, flag)
}
func (self methodsPhysicsServer3D) JointMakeSlider(joint RID, body_A RID, local_ref_A Transform3D, body_B RID, local_ref_B Transform3D) {
	self.Runtime.PhysicsServer3D_joint_make_slider(PhysicsServer3D{self}, joint, body_A, local_ref_A, body_B, local_ref_B)
}
func (self methodsPhysicsServer3D) SliderJointSetParam(joint RID, param PhysicsServer3DSliderJointParam, value Float) {
	self.Runtime.PhysicsServer3D_slider_joint_set_param(PhysicsServer3D{self}, joint, param, value)
}
func (self methodsPhysicsServer3D) SliderJointGetParam(joint RID, param PhysicsServer3DSliderJointParam) Float {
	return self.Runtime.PhysicsServer3D_slider_joint_get_param(PhysicsServer3D{self}, joint, param)
}
func (self methodsPhysicsServer3D) JointMakeConeTwist(joint RID, body_A RID, local_ref_A Transform3D, body_B RID, local_ref_B Transform3D) {
	self.Runtime.PhysicsServer3D_joint_make_cone_twist(PhysicsServer3D{self}, joint, body_A, local_ref_A, body_B, local_ref_B)
}
func (self methodsPhysicsServer3D) ConeTwistJointSetParam(joint RID, param PhysicsServer3DConeTwistJointParam, value Float) {
	self.Runtime.PhysicsServer3D_cone_twist_joint_set_param(PhysicsServer3D{self}, joint, param, value)
}
func (self methodsPhysicsServer3D) ConeTwistJointGetParam(joint RID, param PhysicsServer3DConeTwistJointParam) Float {
	return self.Runtime.PhysicsServer3D_cone_twist_joint_get_param(PhysicsServer3D{self}, joint, param)
}
func (self methodsPhysicsServer3D) JointGetType(joint RID) PhysicsServer3DJointType {
	return self.Runtime.PhysicsServer3D_joint_get_type(PhysicsServer3D{self}, joint)
}
func (self methodsPhysicsServer3D) JointSetSolverPriority(joint RID, priority int64) {
	self.Runtime.PhysicsServer3D_joint_set_solver_priority(PhysicsServer3D{self}, joint, priority)
}
func (self methodsPhysicsServer3D) JointGetSolverPriority(joint RID) int64 {
	return self.Runtime.PhysicsServer3D_joint_get_solver_priority(PhysicsServer3D{self}, joint)
}
func (self methodsPhysicsServer3D) JointDisableCollisionsBetweenBodies(joint RID, disable bool) {
	self.Runtime.PhysicsServer3D_joint_disable_collisions_between_bodies(PhysicsServer3D{self}, joint, disable)
}
func (self methodsPhysicsServer3D) JointIsDisabledCollisionsBetweenBodies(joint RID) bool {
	return self.Runtime.PhysicsServer3D_joint_is_disabled_collisions_between_bodies(PhysicsServer3D{self}, joint)
}
func (self methodsPhysicsServer3D) JointMakeGeneric6dof(joint RID, body_A RID, local_ref_A Transform3D, body_B RID, local_ref_B Transform3D) {
	self.Runtime.PhysicsServer3D_joint_make_generic_6dof(PhysicsServer3D{self}, joint, body_A, local_ref_A, body_B, local_ref_B)
}
func (self methodsPhysicsServer3D) Generic6dofJointSetParam(joint RID, axis Vector3Axis, param PhysicsServer3DG6DOFJointAxisParam, value Float) {
	self.Runtime.PhysicsServer3D_generic_6dof_joint_set_param(PhysicsServer3D{self}, joint, axis, param, value)
}
func (self methodsPhysicsServer3D) Generic6dofJointGetParam(joint RID, axis Vector3Axis, param PhysicsServer3DG6DOFJointAxisParam) Float {
	return self.Runtime.PhysicsServer3D_generic_6dof_joint_get_param(PhysicsServer3D{self}, joint, axis, param)
}
func (self methodsPhysicsServer3D) Generic6dofJointSetFlag(joint RID, axis Vector3Axis, flag PhysicsServer3DG6DOFJointAxisFlag, enable bool) {
	self.Runtime.PhysicsServer3D_generic_6dof_joint_set_flag(PhysicsServer3D{self}, joint, axis, flag, enable)
}
func (self methodsPhysicsServer3D) Generic6dofJointGetFlag(joint RID, axis Vector3Axis, flag PhysicsServer3DG6DOFJointAxisFlag) bool {
	return self.Runtime.PhysicsServer3D_generic_6dof_joint_get_flag(PhysicsServer3D{self}, joint, axis, flag)
}
func (self methodsPhysicsServer3D) FreeRid(rid RID) {
	self.Runtime.PhysicsServer3D_free_rid(PhysicsServer3D{self}, rid)
}
func (self methodsPhysicsServer3D) SetActive(active bool) {
	self.Runtime.PhysicsServer3D_set_active(PhysicsServer3D{self}, active)
}
func (self methodsPhysicsServer3D) GetProcessInfo(process_info PhysicsServer3DProcessInfo) int64 {
	return self.Runtime.PhysicsServer3D_get_process_info(PhysicsServer3D{self}, process_info)
}

type methodsPhysicsServer3DExtension struct {
	_ [0]*methodsPhysicsServer3DExtension
	class
}

func (self PhysicsServer3DExtension) PhysicsServer3D() PhysicsServer3D {
	var parent PhysicsServer3D
	parent.class = self.class
	return parent
}
func (self methodsPhysicsServer3DExtension) BodyTestMotionIsExcludingBody(body RID) bool {
	return self.Runtime.PhysicsServer3DExtension_body_test_motion_is_excluding_body(PhysicsServer3DExtension{self}, body)
}
func (self methodsPhysicsServer3DExtension) BodyTestMotionIsExcludingObject(object int64) bool {
	return self.Runtime.PhysicsServer3DExtension_body_test_motion_is_excluding_object(PhysicsServer3DExtension{self}, object)
}

type methodsPhysicsServer3DManager struct {
	_ [0]*methodsPhysicsServer3DManager
	class
}

func (self PhysicsServer3DManager) Object() Object {
	var parent Object
	parent.class = self.class
	return parent
}
func (self methodsPhysicsServer3DManager) RegisterServer(name string, create_callback Callable) {
	self.Runtime.PhysicsServer3DManager_register_server(PhysicsServer3DManager{self}, name, create_callback)
}
func (self methodsPhysicsServer3DManager) SetDefaultServer(name string, priority int64) {
	self.Runtime.PhysicsServer3DManager_set_default_server(PhysicsServer3DManager{self}, name, priority)
}

type methodsPhysicsServer3DRenderingServerHandler struct {
	_ [0]*methodsPhysicsServer3DRenderingServerHandler
	class
}

func (self PhysicsServer3DRenderingServerHandler) Object() Object {
	var parent Object
	parent.class = self.class
	return parent
}
func (self methodsPhysicsServer3DRenderingServerHandler) SetVertex(vertex_id int64, vertex Vector3) {
	self.Runtime.PhysicsServer3DRenderingServerHandler_set_vertex(PhysicsServer3DRenderingServerHandler{self}, vertex_id, vertex)
}
func (self methodsPhysicsServer3DRenderingServerHandler) SetNormal(vertex_id int64, normal Vector3) {
	self.Runtime.PhysicsServer3DRenderingServerHandler_set_normal(PhysicsServer3DRenderingServerHandler{self}, vertex_id, normal)
}
func (self methodsPhysicsServer3DRenderingServerHandler) SetAabb(aabb AABB) {
	self.Runtime.PhysicsServer3DRenderingServerHandler_set_aabb(PhysicsServer3DRenderingServerHandler{self}, aabb)
}

type methodsPhysicsShapeQueryParameters2D struct {
	_ [0]*methodsPhysicsShapeQueryParameters2D
	class
}

func (self PhysicsShapeQueryParameters2D) RefCounted() RefCounted {
	var parent RefCounted
	parent.class = self.class
	return parent
}
func (self methodsPhysicsShapeQueryParameters2D) SetShape(shape Resource) {
	self.Runtime.PhysicsShapeQueryParameters2D_set_shape(PhysicsShapeQueryParameters2D{self}, shape)
}
func (self methodsPhysicsShapeQueryParameters2D) GetShape() Resource {
	return self.Runtime.PhysicsShapeQueryParameters2D_get_shape(PhysicsShapeQueryParameters2D{self})
}
func (self methodsPhysicsShapeQueryParameters2D) SetShapeRid(shape RID) {
	self.Runtime.PhysicsShapeQueryParameters2D_set_shape_rid(PhysicsShapeQueryParameters2D{self}, shape)
}
func (self methodsPhysicsShapeQueryParameters2D) GetShapeRid() RID {
	return self.Runtime.PhysicsShapeQueryParameters2D_get_shape_rid(PhysicsShapeQueryParameters2D{self})
}
func (self methodsPhysicsShapeQueryParameters2D) SetTransform(transform Transform2D) {
	self.Runtime.PhysicsShapeQueryParameters2D_set_transform(PhysicsShapeQueryParameters2D{self}, transform)
}
func (self methodsPhysicsShapeQueryParameters2D) GetTransform() Transform2D {
	return self.Runtime.PhysicsShapeQueryParameters2D_get_transform(PhysicsShapeQueryParameters2D{self})
}
func (self methodsPhysicsShapeQueryParameters2D) SetMotion(motion Vector2) {
	self.Runtime.PhysicsShapeQueryParameters2D_set_motion(PhysicsShapeQueryParameters2D{self}, motion)
}
func (self methodsPhysicsShapeQueryParameters2D) GetMotion() Vector2 {
	return self.Runtime.PhysicsShapeQueryParameters2D_get_motion(PhysicsShapeQueryParameters2D{self})
}
func (self methodsPhysicsShapeQueryParameters2D) SetMargin(margin Float) {
	self.Runtime.PhysicsShapeQueryParameters2D_set_margin(PhysicsShapeQueryParameters2D{self}, margin)
}
func (self methodsPhysicsShapeQueryParameters2D) GetMargin() Float {
	return self.Runtime.PhysicsShapeQueryParameters2D_get_margin(PhysicsShapeQueryParameters2D{self})
}
func (self methodsPhysicsShapeQueryParameters2D) SetCollisionMask(collision_mask int64) {
	self.Runtime.PhysicsShapeQueryParameters2D_set_collision_mask(PhysicsShapeQueryParameters2D{self}, collision_mask)
}
func (self methodsPhysicsShapeQueryParameters2D) GetCollisionMask() int64 {
	return self.Runtime.PhysicsShapeQueryParameters2D_get_collision_mask(PhysicsShapeQueryParameters2D{self})
}
func (self methodsPhysicsShapeQueryParameters2D) SetExclude(exclude ArrayOf[RID]) {
	self.Runtime.PhysicsShapeQueryParameters2D_set_exclude(PhysicsShapeQueryParameters2D{self}, exclude)
}
func (self methodsPhysicsShapeQueryParameters2D) GetExclude() ArrayOf[RID] {
	return self.Runtime.PhysicsShapeQueryParameters2D_get_exclude(PhysicsShapeQueryParameters2D{self})
}
func (self methodsPhysicsShapeQueryParameters2D) SetCollideWithBodies(enable bool) {
	self.Runtime.PhysicsShapeQueryParameters2D_set_collide_with_bodies(PhysicsShapeQueryParameters2D{self}, enable)
}
func (self methodsPhysicsShapeQueryParameters2D) IsCollideWithBodiesEnabled() bool {
	return self.Runtime.PhysicsShapeQueryParameters2D_is_collide_with_bodies_enabled(PhysicsShapeQueryParameters2D{self})
}
func (self methodsPhysicsShapeQueryParameters2D) SetCollideWithAreas(enable bool) {
	self.Runtime.PhysicsShapeQueryParameters2D_set_collide_with_areas(PhysicsShapeQueryParameters2D{self}, enable)
}
func (self methodsPhysicsShapeQueryParameters2D) IsCollideWithAreasEnabled() bool {
	return self.Runtime.PhysicsShapeQueryParameters2D_is_collide_with_areas_enabled(PhysicsShapeQueryParameters2D{self})
}

type methodsPhysicsShapeQueryParameters3D struct {
	_ [0]*methodsPhysicsShapeQueryParameters3D
	class
}

func (self PhysicsShapeQueryParameters3D) RefCounted() RefCounted {
	var parent RefCounted
	parent.class = self.class
	return parent
}
func (self methodsPhysicsShapeQueryParameters3D) SetShape(shape Resource) {
	self.Runtime.PhysicsShapeQueryParameters3D_set_shape(PhysicsShapeQueryParameters3D{self}, shape)
}
func (self methodsPhysicsShapeQueryParameters3D) GetShape() Resource {
	return self.Runtime.PhysicsShapeQueryParameters3D_get_shape(PhysicsShapeQueryParameters3D{self})
}
func (self methodsPhysicsShapeQueryParameters3D) SetShapeRid(shape RID) {
	self.Runtime.PhysicsShapeQueryParameters3D_set_shape_rid(PhysicsShapeQueryParameters3D{self}, shape)
}
func (self methodsPhysicsShapeQueryParameters3D) GetShapeRid() RID {
	return self.Runtime.PhysicsShapeQueryParameters3D_get_shape_rid(PhysicsShapeQueryParameters3D{self})
}
func (self methodsPhysicsShapeQueryParameters3D) SetTransform(transform Transform3D) {
	self.Runtime.PhysicsShapeQueryParameters3D_set_transform(PhysicsShapeQueryParameters3D{self}, transform)
}
func (self methodsPhysicsShapeQueryParameters3D) GetTransform() Transform3D {
	return self.Runtime.PhysicsShapeQueryParameters3D_get_transform(PhysicsShapeQueryParameters3D{self})
}
func (self methodsPhysicsShapeQueryParameters3D) SetMotion(motion Vector3) {
	self.Runtime.PhysicsShapeQueryParameters3D_set_motion(PhysicsShapeQueryParameters3D{self}, motion)
}
func (self methodsPhysicsShapeQueryParameters3D) GetMotion() Vector3 {
	return self.Runtime.PhysicsShapeQueryParameters3D_get_motion(PhysicsShapeQueryParameters3D{self})
}
func (self methodsPhysicsShapeQueryParameters3D) SetMargin(margin Float) {
	self.Runtime.PhysicsShapeQueryParameters3D_set_margin(PhysicsShapeQueryParameters3D{self}, margin)
}
func (self methodsPhysicsShapeQueryParameters3D) GetMargin() Float {
	return self.Runtime.PhysicsShapeQueryParameters3D_get_margin(PhysicsShapeQueryParameters3D{self})
}
func (self methodsPhysicsShapeQueryParameters3D) SetCollisionMask(collision_mask int64) {
	self.Runtime.PhysicsShapeQueryParameters3D_set_collision_mask(PhysicsShapeQueryParameters3D{self}, collision_mask)
}
func (self methodsPhysicsShapeQueryParameters3D) GetCollisionMask() int64 {
	return self.Runtime.PhysicsShapeQueryParameters3D_get_collision_mask(PhysicsShapeQueryParameters3D{self})
}
func (self methodsPhysicsShapeQueryParameters3D) SetExclude(exclude ArrayOf[RID]) {
	self.Runtime.PhysicsShapeQueryParameters3D_set_exclude(PhysicsShapeQueryParameters3D{self}, exclude)
}
func (self methodsPhysicsShapeQueryParameters3D) GetExclude() ArrayOf[RID] {
	return self.Runtime.PhysicsShapeQueryParameters3D_get_exclude(PhysicsShapeQueryParameters3D{self})
}
func (self methodsPhysicsShapeQueryParameters3D) SetCollideWithBodies(enable bool) {
	self.Runtime.PhysicsShapeQueryParameters3D_set_collide_with_bodies(PhysicsShapeQueryParameters3D{self}, enable)
}
func (self methodsPhysicsShapeQueryParameters3D) IsCollideWithBodiesEnabled() bool {
	return self.Runtime.PhysicsShapeQueryParameters3D_is_collide_with_bodies_enabled(PhysicsShapeQueryParameters3D{self})
}
func (self methodsPhysicsShapeQueryParameters3D) SetCollideWithAreas(enable bool) {
	self.Runtime.PhysicsShapeQueryParameters3D_set_collide_with_areas(PhysicsShapeQueryParameters3D{self}, enable)
}
func (self methodsPhysicsShapeQueryParameters3D) IsCollideWithAreasEnabled() bool {
	return self.Runtime.PhysicsShapeQueryParameters3D_is_collide_with_areas_enabled(PhysicsShapeQueryParameters3D{self})
}

type methodsPhysicsTestMotionParameters2D struct {
	_ [0]*methodsPhysicsTestMotionParameters2D
	class
}

func (self PhysicsTestMotionParameters2D) RefCounted() RefCounted {
	var parent RefCounted
	parent.class = self.class
	return parent
}
func (self methodsPhysicsTestMotionParameters2D) GetFrom() Transform2D {
	return self.Runtime.PhysicsTestMotionParameters2D_get_from(PhysicsTestMotionParameters2D{self})
}
func (self methodsPhysicsTestMotionParameters2D) SetFrom(from Transform2D) {
	self.Runtime.PhysicsTestMotionParameters2D_set_from(PhysicsTestMotionParameters2D{self}, from)
}
func (self methodsPhysicsTestMotionParameters2D) GetMotion() Vector2 {
	return self.Runtime.PhysicsTestMotionParameters2D_get_motion(PhysicsTestMotionParameters2D{self})
}
func (self methodsPhysicsTestMotionParameters2D) SetMotion(motion Vector2) {
	self.Runtime.PhysicsTestMotionParameters2D_set_motion(PhysicsTestMotionParameters2D{self}, motion)
}
func (self methodsPhysicsTestMotionParameters2D) GetMargin() Float {
	return self.Runtime.PhysicsTestMotionParameters2D_get_margin(PhysicsTestMotionParameters2D{self})
}
func (self methodsPhysicsTestMotionParameters2D) SetMargin(margin Float) {
	self.Runtime.PhysicsTestMotionParameters2D_set_margin(PhysicsTestMotionParameters2D{self}, margin)
}
func (self methodsPhysicsTestMotionParameters2D) IsCollideSeparationRayEnabled() bool {
	return self.Runtime.PhysicsTestMotionParameters2D_is_collide_separation_ray_enabled(PhysicsTestMotionParameters2D{self})
}
func (self methodsPhysicsTestMotionParameters2D) SetCollideSeparationRayEnabled(enabled bool) {
	self.Runtime.PhysicsTestMotionParameters2D_set_collide_separation_ray_enabled(PhysicsTestMotionParameters2D{self}, enabled)
}
func (self methodsPhysicsTestMotionParameters2D) GetExcludeBodies() ArrayOf[RID] {
	return self.Runtime.PhysicsTestMotionParameters2D_get_exclude_bodies(PhysicsTestMotionParameters2D{self})
}
func (self methodsPhysicsTestMotionParameters2D) SetExcludeBodies(exclude_list ArrayOf[RID]) {
	self.Runtime.PhysicsTestMotionParameters2D_set_exclude_bodies(PhysicsTestMotionParameters2D{self}, exclude_list)
}
func (self methodsPhysicsTestMotionParameters2D) GetExcludeObjects() ArrayOf[int64] {
	return self.Runtime.PhysicsTestMotionParameters2D_get_exclude_objects(PhysicsTestMotionParameters2D{self})
}
func (self methodsPhysicsTestMotionParameters2D) SetExcludeObjects(exclude_list ArrayOf[int64]) {
	self.Runtime.PhysicsTestMotionParameters2D_set_exclude_objects(PhysicsTestMotionParameters2D{self}, exclude_list)
}
func (self methodsPhysicsTestMotionParameters2D) IsRecoveryAsCollisionEnabled() bool {
	return self.Runtime.PhysicsTestMotionParameters2D_is_recovery_as_collision_enabled(PhysicsTestMotionParameters2D{self})
}
func (self methodsPhysicsTestMotionParameters2D) SetRecoveryAsCollisionEnabled(enabled bool) {
	self.Runtime.PhysicsTestMotionParameters2D_set_recovery_as_collision_enabled(PhysicsTestMotionParameters2D{self}, enabled)
}

type methodsPhysicsTestMotionParameters3D struct {
	_ [0]*methodsPhysicsTestMotionParameters3D
	class
}

func (self PhysicsTestMotionParameters3D) RefCounted() RefCounted {
	var parent RefCounted
	parent.class = self.class
	return parent
}
func (self methodsPhysicsTestMotionParameters3D) GetFrom() Transform3D {
	return self.Runtime.PhysicsTestMotionParameters3D_get_from(PhysicsTestMotionParameters3D{self})
}
func (self methodsPhysicsTestMotionParameters3D) SetFrom(from Transform3D) {
	self.Runtime.PhysicsTestMotionParameters3D_set_from(PhysicsTestMotionParameters3D{self}, from)
}
func (self methodsPhysicsTestMotionParameters3D) GetMotion() Vector3 {
	return self.Runtime.PhysicsTestMotionParameters3D_get_motion(PhysicsTestMotionParameters3D{self})
}
func (self methodsPhysicsTestMotionParameters3D) SetMotion(motion Vector3) {
	self.Runtime.PhysicsTestMotionParameters3D_set_motion(PhysicsTestMotionParameters3D{self}, motion)
}
func (self methodsPhysicsTestMotionParameters3D) GetMargin() Float {
	return self.Runtime.PhysicsTestMotionParameters3D_get_margin(PhysicsTestMotionParameters3D{self})
}
func (self methodsPhysicsTestMotionParameters3D) SetMargin(margin Float) {
	self.Runtime.PhysicsTestMotionParameters3D_set_margin(PhysicsTestMotionParameters3D{self}, margin)
}
func (self methodsPhysicsTestMotionParameters3D) GetMaxCollisions() int64 {
	return self.Runtime.PhysicsTestMotionParameters3D_get_max_collisions(PhysicsTestMotionParameters3D{self})
}
func (self methodsPhysicsTestMotionParameters3D) SetMaxCollisions(max_collisions int64) {
	self.Runtime.PhysicsTestMotionParameters3D_set_max_collisions(PhysicsTestMotionParameters3D{self}, max_collisions)
}
func (self methodsPhysicsTestMotionParameters3D) IsCollideSeparationRayEnabled() bool {
	return self.Runtime.PhysicsTestMotionParameters3D_is_collide_separation_ray_enabled(PhysicsTestMotionParameters3D{self})
}
func (self methodsPhysicsTestMotionParameters3D) SetCollideSeparationRayEnabled(enabled bool) {
	self.Runtime.PhysicsTestMotionParameters3D_set_collide_separation_ray_enabled(PhysicsTestMotionParameters3D{self}, enabled)
}
func (self methodsPhysicsTestMotionParameters3D) GetExcludeBodies() ArrayOf[RID] {
	return self.Runtime.PhysicsTestMotionParameters3D_get_exclude_bodies(PhysicsTestMotionParameters3D{self})
}
func (self methodsPhysicsTestMotionParameters3D) SetExcludeBodies(exclude_list ArrayOf[RID]) {
	self.Runtime.PhysicsTestMotionParameters3D_set_exclude_bodies(PhysicsTestMotionParameters3D{self}, exclude_list)
}
func (self methodsPhysicsTestMotionParameters3D) GetExcludeObjects() ArrayOf[int64] {
	return self.Runtime.PhysicsTestMotionParameters3D_get_exclude_objects(PhysicsTestMotionParameters3D{self})
}
func (self methodsPhysicsTestMotionParameters3D) SetExcludeObjects(exclude_list ArrayOf[int64]) {
	self.Runtime.PhysicsTestMotionParameters3D_set_exclude_objects(PhysicsTestMotionParameters3D{self}, exclude_list)
}
func (self methodsPhysicsTestMotionParameters3D) IsRecoveryAsCollisionEnabled() bool {
	return self.Runtime.PhysicsTestMotionParameters3D_is_recovery_as_collision_enabled(PhysicsTestMotionParameters3D{self})
}
func (self methodsPhysicsTestMotionParameters3D) SetRecoveryAsCollisionEnabled(enabled bool) {
	self.Runtime.PhysicsTestMotionParameters3D_set_recovery_as_collision_enabled(PhysicsTestMotionParameters3D{self}, enabled)
}

type methodsPhysicsTestMotionResult2D struct {
	_ [0]*methodsPhysicsTestMotionResult2D
	class
}

func (self PhysicsTestMotionResult2D) RefCounted() RefCounted {
	var parent RefCounted
	parent.class = self.class
	return parent
}
func (self methodsPhysicsTestMotionResult2D) GetTravel() Vector2 {
	return self.Runtime.PhysicsTestMotionResult2D_get_travel(PhysicsTestMotionResult2D{self})
}
func (self methodsPhysicsTestMotionResult2D) GetRemainder() Vector2 {
	return self.Runtime.PhysicsTestMotionResult2D_get_remainder(PhysicsTestMotionResult2D{self})
}
func (self methodsPhysicsTestMotionResult2D) GetCollisionPoint() Vector2 {
	return self.Runtime.PhysicsTestMotionResult2D_get_collision_point(PhysicsTestMotionResult2D{self})
}
func (self methodsPhysicsTestMotionResult2D) GetCollisionNormal() Vector2 {
	return self.Runtime.PhysicsTestMotionResult2D_get_collision_normal(PhysicsTestMotionResult2D{self})
}
func (self methodsPhysicsTestMotionResult2D) GetColliderVelocity() Vector2 {
	return self.Runtime.PhysicsTestMotionResult2D_get_collider_velocity(PhysicsTestMotionResult2D{self})
}
func (self methodsPhysicsTestMotionResult2D) GetColliderId() int64 {
	return self.Runtime.PhysicsTestMotionResult2D_get_collider_id(PhysicsTestMotionResult2D{self})
}
func (self methodsPhysicsTestMotionResult2D) GetColliderRid() RID {
	return self.Runtime.PhysicsTestMotionResult2D_get_collider_rid(PhysicsTestMotionResult2D{self})
}
func (self methodsPhysicsTestMotionResult2D) GetCollider() Object {
	return self.Runtime.PhysicsTestMotionResult2D_get_collider(PhysicsTestMotionResult2D{self})
}
func (self methodsPhysicsTestMotionResult2D) GetColliderShape() int64 {
	return self.Runtime.PhysicsTestMotionResult2D_get_collider_shape(PhysicsTestMotionResult2D{self})
}
func (self methodsPhysicsTestMotionResult2D) GetCollisionLocalShape() int64 {
	return self.Runtime.PhysicsTestMotionResult2D_get_collision_local_shape(PhysicsTestMotionResult2D{self})
}
func (self methodsPhysicsTestMotionResult2D) GetCollisionDepth() Float {
	return self.Runtime.PhysicsTestMotionResult2D_get_collision_depth(PhysicsTestMotionResult2D{self})
}
func (self methodsPhysicsTestMotionResult2D) GetCollisionSafeFraction() Float {
	return self.Runtime.PhysicsTestMotionResult2D_get_collision_safe_fraction(PhysicsTestMotionResult2D{self})
}
func (self methodsPhysicsTestMotionResult2D) GetCollisionUnsafeFraction() Float {
	return self.Runtime.PhysicsTestMotionResult2D_get_collision_unsafe_fraction(PhysicsTestMotionResult2D{self})
}

type methodsPhysicsTestMotionResult3D struct {
	_ [0]*methodsPhysicsTestMotionResult3D
	class
}

func (self PhysicsTestMotionResult3D) RefCounted() RefCounted {
	var parent RefCounted
	parent.class = self.class
	return parent
}
func (self methodsPhysicsTestMotionResult3D) GetTravel() Vector3 {
	return self.Runtime.PhysicsTestMotionResult3D_get_travel(PhysicsTestMotionResult3D{self})
}
func (self methodsPhysicsTestMotionResult3D) GetRemainder() Vector3 {
	return self.Runtime.PhysicsTestMotionResult3D_get_remainder(PhysicsTestMotionResult3D{self})
}
func (self methodsPhysicsTestMotionResult3D) GetCollisionSafeFraction() Float {
	return self.Runtime.PhysicsTestMotionResult3D_get_collision_safe_fraction(PhysicsTestMotionResult3D{self})
}
func (self methodsPhysicsTestMotionResult3D) GetCollisionUnsafeFraction() Float {
	return self.Runtime.PhysicsTestMotionResult3D_get_collision_unsafe_fraction(PhysicsTestMotionResult3D{self})
}
func (self methodsPhysicsTestMotionResult3D) GetCollisionCount() int64 {
	return self.Runtime.PhysicsTestMotionResult3D_get_collision_count(PhysicsTestMotionResult3D{self})
}
func (self methodsPhysicsTestMotionResult3D) GetCollisionPoint(collision_index int64) Vector3 {
	return self.Runtime.PhysicsTestMotionResult3D_get_collision_point(PhysicsTestMotionResult3D{self}, collision_index)
}
func (self methodsPhysicsTestMotionResult3D) GetCollisionNormal(collision_index int64) Vector3 {
	return self.Runtime.PhysicsTestMotionResult3D_get_collision_normal(PhysicsTestMotionResult3D{self}, collision_index)
}
func (self methodsPhysicsTestMotionResult3D) GetColliderVelocity(collision_index int64) Vector3 {
	return self.Runtime.PhysicsTestMotionResult3D_get_collider_velocity(PhysicsTestMotionResult3D{self}, collision_index)
}
func (self methodsPhysicsTestMotionResult3D) GetColliderId(collision_index int64) int64 {
	return self.Runtime.PhysicsTestMotionResult3D_get_collider_id(PhysicsTestMotionResult3D{self}, collision_index)
}
func (self methodsPhysicsTestMotionResult3D) GetColliderRid(collision_index int64) RID {
	return self.Runtime.PhysicsTestMotionResult3D_get_collider_rid(PhysicsTestMotionResult3D{self}, collision_index)
}
func (self methodsPhysicsTestMotionResult3D) GetCollider(collision_index int64) Object {
	return self.Runtime.PhysicsTestMotionResult3D_get_collider(PhysicsTestMotionResult3D{self}, collision_index)
}
func (self methodsPhysicsTestMotionResult3D) GetColliderShape(collision_index int64) int64 {
	return self.Runtime.PhysicsTestMotionResult3D_get_collider_shape(PhysicsTestMotionResult3D{self}, collision_index)
}
func (self methodsPhysicsTestMotionResult3D) GetCollisionLocalShape(collision_index int64) int64 {
	return self.Runtime.PhysicsTestMotionResult3D_get_collision_local_shape(PhysicsTestMotionResult3D{self}, collision_index)
}
func (self methodsPhysicsTestMotionResult3D) GetCollisionDepth(collision_index int64) Float {
	return self.Runtime.PhysicsTestMotionResult3D_get_collision_depth(PhysicsTestMotionResult3D{self}, collision_index)
}

type methodsPinJoint2D struct {
	_ [0]*methodsPinJoint2D
	class
}

func (self PinJoint2D) Joint2D() Joint2D {
	var parent Joint2D
	parent.class = self.class
	return parent
}
func (self methodsPinJoint2D) SetSoftness(softness Float) {
	self.Runtime.PinJoint2D_set_softness(PinJoint2D{self}, softness)
}
func (self methodsPinJoint2D) GetSoftness() Float {
	return self.Runtime.PinJoint2D_get_softness(PinJoint2D{self})
}
func (self methodsPinJoint2D) SetAngularLimitLower(angular_limit_lower Float) {
	self.Runtime.PinJoint2D_set_angular_limit_lower(PinJoint2D{self}, angular_limit_lower)
}
func (self methodsPinJoint2D) GetAngularLimitLower() Float {
	return self.Runtime.PinJoint2D_get_angular_limit_lower(PinJoint2D{self})
}
func (self methodsPinJoint2D) SetAngularLimitUpper(angular_limit_upper Float) {
	self.Runtime.PinJoint2D_set_angular_limit_upper(PinJoint2D{self}, angular_limit_upper)
}
func (self methodsPinJoint2D) GetAngularLimitUpper() Float {
	return self.Runtime.PinJoint2D_get_angular_limit_upper(PinJoint2D{self})
}
func (self methodsPinJoint2D) SetMotorTargetVelocity(motor_target_velocity Float) {
	self.Runtime.PinJoint2D_set_motor_target_velocity(PinJoint2D{self}, motor_target_velocity)
}
func (self methodsPinJoint2D) GetMotorTargetVelocity() Float {
	return self.Runtime.PinJoint2D_get_motor_target_velocity(PinJoint2D{self})
}
func (self methodsPinJoint2D) SetMotorEnabled(enabled bool) {
	self.Runtime.PinJoint2D_set_motor_enabled(PinJoint2D{self}, enabled)
}
func (self methodsPinJoint2D) IsMotorEnabled() bool {
	return self.Runtime.PinJoint2D_is_motor_enabled(PinJoint2D{self})
}
func (self methodsPinJoint2D) SetAngularLimitEnabled(enabled bool) {
	self.Runtime.PinJoint2D_set_angular_limit_enabled(PinJoint2D{self}, enabled)
}
func (self methodsPinJoint2D) IsAngularLimitEnabled() bool {
	return self.Runtime.PinJoint2D_is_angular_limit_enabled(PinJoint2D{self})
}

type methodsPinJoint3D struct {
	_ [0]*methodsPinJoint3D
	class
}

func (self PinJoint3D) Joint3D() Joint3D {
	var parent Joint3D
	parent.class = self.class
	return parent
}
func (self methodsPinJoint3D) SetParam(param PinJoint3DParam, value Float) {
	self.Runtime.PinJoint3D_set_param(PinJoint3D{self}, param, value)
}
func (self methodsPinJoint3D) GetParam(param PinJoint3DParam) Float {
	return self.Runtime.PinJoint3D_get_param(PinJoint3D{self}, param)
}

type methodsPlaceholderCubemap struct {
	_ [0]*methodsPlaceholderCubemap
	class
}

func (self PlaceholderCubemap) PlaceholderTextureLayered() PlaceholderTextureLayered {
	var parent PlaceholderTextureLayered
	parent.class = self.class
	return parent
}

type methodsPlaceholderCubemapArray struct {
	_ [0]*methodsPlaceholderCubemapArray
	class
}

func (self PlaceholderCubemapArray) PlaceholderTextureLayered() PlaceholderTextureLayered {
	var parent PlaceholderTextureLayered
	parent.class = self.class
	return parent
}

type methodsPlaceholderMaterial struct {
	_ [0]*methodsPlaceholderMaterial
	class
}

func (self PlaceholderMaterial) Material() Material {
	var parent Material
	parent.class = self.class
	return parent
}

type methodsPlaceholderMesh struct {
	_ [0]*methodsPlaceholderMesh
	class
}

func (self PlaceholderMesh) Mesh() Mesh { var parent Mesh; parent.class = self.class; return parent }
func (self methodsPlaceholderMesh) SetAabb(aabb AABB) {
	self.Runtime.PlaceholderMesh_set_aabb(PlaceholderMesh{self}, aabb)
}

type methodsPlaceholderTexture2D struct {
	_ [0]*methodsPlaceholderTexture2D
	class
}

func (self PlaceholderTexture2D) Texture2D() Texture2D {
	var parent Texture2D
	parent.class = self.class
	return parent
}
func (self methodsPlaceholderTexture2D) SetSize(size Vector2) {
	self.Runtime.PlaceholderTexture2D_set_size(PlaceholderTexture2D{self}, size)
}

type methodsPlaceholderTexture2DArray struct {
	_ [0]*methodsPlaceholderTexture2DArray
	class
}

func (self PlaceholderTexture2DArray) PlaceholderTextureLayered() PlaceholderTextureLayered {
	var parent PlaceholderTextureLayered
	parent.class = self.class
	return parent
}

type methodsPlaceholderTexture3D struct {
	_ [0]*methodsPlaceholderTexture3D
	class
}

func (self PlaceholderTexture3D) Texture3D() Texture3D {
	var parent Texture3D
	parent.class = self.class
	return parent
}
func (self methodsPlaceholderTexture3D) SetSize(size Vector3i) {
	self.Runtime.PlaceholderTexture3D_set_size(PlaceholderTexture3D{self}, size)
}
func (self methodsPlaceholderTexture3D) GetSize() Vector3i {
	return self.Runtime.PlaceholderTexture3D_get_size(PlaceholderTexture3D{self})
}

type methodsPlaceholderTextureLayered struct {
	_ [0]*methodsPlaceholderTextureLayered
	class
}

func (self PlaceholderTextureLayered) TextureLayered() TextureLayered {
	var parent TextureLayered
	parent.class = self.class
	return parent
}
func (self methodsPlaceholderTextureLayered) SetSize(size Vector2i) {
	self.Runtime.PlaceholderTextureLayered_set_size(PlaceholderTextureLayered{self}, size)
}
func (self methodsPlaceholderTextureLayered) GetSize() Vector2i {
	return self.Runtime.PlaceholderTextureLayered_get_size(PlaceholderTextureLayered{self})
}
func (self methodsPlaceholderTextureLayered) SetLayers(layers int64) {
	self.Runtime.PlaceholderTextureLayered_set_layers(PlaceholderTextureLayered{self}, layers)
}

type methodsPlaneMesh struct {
	_ [0]*methodsPlaneMesh
	class
}

func (self PlaneMesh) PrimitiveMesh() PrimitiveMesh {
	var parent PrimitiveMesh
	parent.class = self.class
	return parent
}
func (self methodsPlaneMesh) SetSize(size Vector2) {
	self.Runtime.PlaneMesh_set_size(PlaneMesh{self}, size)
}
func (self methodsPlaneMesh) GetSize() Vector2 {
	return self.Runtime.PlaneMesh_get_size(PlaneMesh{self})
}
func (self methodsPlaneMesh) SetSubdivideWidth(subdivide int64) {
	self.Runtime.PlaneMesh_set_subdivide_width(PlaneMesh{self}, subdivide)
}
func (self methodsPlaneMesh) GetSubdivideWidth() int64 {
	return self.Runtime.PlaneMesh_get_subdivide_width(PlaneMesh{self})
}
func (self methodsPlaneMesh) SetSubdivideDepth(subdivide int64) {
	self.Runtime.PlaneMesh_set_subdivide_depth(PlaneMesh{self}, subdivide)
}
func (self methodsPlaneMesh) GetSubdivideDepth() int64 {
	return self.Runtime.PlaneMesh_get_subdivide_depth(PlaneMesh{self})
}
func (self methodsPlaneMesh) SetCenterOffset(offset Vector3) {
	self.Runtime.PlaneMesh_set_center_offset(PlaneMesh{self}, offset)
}
func (self methodsPlaneMesh) GetCenterOffset() Vector3 {
	return self.Runtime.PlaneMesh_get_center_offset(PlaneMesh{self})
}
func (self methodsPlaneMesh) SetOrientation(orientation PlaneMeshOrientation) {
	self.Runtime.PlaneMesh_set_orientation(PlaneMesh{self}, orientation)
}
func (self methodsPlaneMesh) GetOrientation() PlaneMeshOrientation {
	return self.Runtime.PlaneMesh_get_orientation(PlaneMesh{self})
}

type methodsPointLight2D struct {
	_ [0]*methodsPointLight2D
	class
}

func (self PointLight2D) Light2D() Light2D {
	var parent Light2D
	parent.class = self.class
	return parent
}
func (self methodsPointLight2D) SetTexture(texture Texture2D) {
	self.Runtime.PointLight2D_set_texture(PointLight2D{self}, texture)
}
func (self methodsPointLight2D) GetTexture() Texture2D {
	return self.Runtime.PointLight2D_get_texture(PointLight2D{self})
}
func (self methodsPointLight2D) SetTextureOffset(texture_offset Vector2) {
	self.Runtime.PointLight2D_set_texture_offset(PointLight2D{self}, texture_offset)
}
func (self methodsPointLight2D) GetTextureOffset() Vector2 {
	return self.Runtime.PointLight2D_get_texture_offset(PointLight2D{self})
}
func (self methodsPointLight2D) SetTextureScale(texture_scale Float) {
	self.Runtime.PointLight2D_set_texture_scale(PointLight2D{self}, texture_scale)
}
func (self methodsPointLight2D) GetTextureScale() Float {
	return self.Runtime.PointLight2D_get_texture_scale(PointLight2D{self})
}

type methodsPointMesh struct {
	_ [0]*methodsPointMesh
	class
}

func (self PointMesh) PrimitiveMesh() PrimitiveMesh {
	var parent PrimitiveMesh
	parent.class = self.class
	return parent
}

type methodsPolygon2D struct {
	_ [0]*methodsPolygon2D
	class
}

func (self Polygon2D) Node2D() Node2D { var parent Node2D; parent.class = self.class; return parent }
func (self methodsPolygon2D) SetPolygon(polygon PackedVector2Array) {
	self.Runtime.Polygon2D_set_polygon(Polygon2D{self}, polygon)
}
func (self methodsPolygon2D) GetPolygon() PackedVector2Array {
	return self.Runtime.Polygon2D_get_polygon(Polygon2D{self})
}
func (self methodsPolygon2D) SetUv(uv PackedVector2Array) {
	self.Runtime.Polygon2D_set_uv(Polygon2D{self}, uv)
}
func (self methodsPolygon2D) GetUv() PackedVector2Array {
	return self.Runtime.Polygon2D_get_uv(Polygon2D{self})
}
func (self methodsPolygon2D) SetColor(color Color) {
	self.Runtime.Polygon2D_set_color(Polygon2D{self}, color)
}
func (self methodsPolygon2D) GetColor() Color {
	return self.Runtime.Polygon2D_get_color(Polygon2D{self})
}
func (self methodsPolygon2D) SetPolygons(polygons Array) {
	self.Runtime.Polygon2D_set_polygons(Polygon2D{self}, polygons)
}
func (self methodsPolygon2D) GetPolygons() Array {
	return self.Runtime.Polygon2D_get_polygons(Polygon2D{self})
}
func (self methodsPolygon2D) SetVertexColors(vertex_colors PackedColorArray) {
	self.Runtime.Polygon2D_set_vertex_colors(Polygon2D{self}, vertex_colors)
}
func (self methodsPolygon2D) GetVertexColors() PackedColorArray {
	return self.Runtime.Polygon2D_get_vertex_colors(Polygon2D{self})
}
func (self methodsPolygon2D) SetTexture(texture Texture2D) {
	self.Runtime.Polygon2D_set_texture(Polygon2D{self}, texture)
}
func (self methodsPolygon2D) GetTexture() Texture2D {
	return self.Runtime.Polygon2D_get_texture(Polygon2D{self})
}
func (self methodsPolygon2D) SetTextureOffset(texture_offset Vector2) {
	self.Runtime.Polygon2D_set_texture_offset(Polygon2D{self}, texture_offset)
}
func (self methodsPolygon2D) GetTextureOffset() Vector2 {
	return self.Runtime.Polygon2D_get_texture_offset(Polygon2D{self})
}
func (self methodsPolygon2D) SetTextureRotation(texture_rotation Float) {
	self.Runtime.Polygon2D_set_texture_rotation(Polygon2D{self}, texture_rotation)
}
func (self methodsPolygon2D) GetTextureRotation() Float {
	return self.Runtime.Polygon2D_get_texture_rotation(Polygon2D{self})
}
func (self methodsPolygon2D) SetTextureScale(texture_scale Vector2) {
	self.Runtime.Polygon2D_set_texture_scale(Polygon2D{self}, texture_scale)
}
func (self methodsPolygon2D) GetTextureScale() Vector2 {
	return self.Runtime.Polygon2D_get_texture_scale(Polygon2D{self})
}
func (self methodsPolygon2D) SetInvertEnabled(invert bool) {
	self.Runtime.Polygon2D_set_invert_enabled(Polygon2D{self}, invert)
}
func (self methodsPolygon2D) GetInvertEnabled() bool {
	return self.Runtime.Polygon2D_get_invert_enabled(Polygon2D{self})
}
func (self methodsPolygon2D) SetAntialiased(antialiased bool) {
	self.Runtime.Polygon2D_set_antialiased(Polygon2D{self}, antialiased)
}
func (self methodsPolygon2D) GetAntialiased() bool {
	return self.Runtime.Polygon2D_get_antialiased(Polygon2D{self})
}
func (self methodsPolygon2D) SetInvertBorder(invert_border Float) {
	self.Runtime.Polygon2D_set_invert_border(Polygon2D{self}, invert_border)
}
func (self methodsPolygon2D) GetInvertBorder() Float {
	return self.Runtime.Polygon2D_get_invert_border(Polygon2D{self})
}
func (self methodsPolygon2D) SetOffset(offset Vector2) {
	self.Runtime.Polygon2D_set_offset(Polygon2D{self}, offset)
}
func (self methodsPolygon2D) GetOffset() Vector2 {
	return self.Runtime.Polygon2D_get_offset(Polygon2D{self})
}
func (self methodsPolygon2D) AddBone(path NodePath, weights PackedFloat32Array) {
	self.Runtime.Polygon2D_add_bone(Polygon2D{self}, path, weights)
}
func (self methodsPolygon2D) GetBoneCount() int64 {
	return self.Runtime.Polygon2D_get_bone_count(Polygon2D{self})
}
func (self methodsPolygon2D) GetBonePath(index int64) NodePath {
	return self.Runtime.Polygon2D_get_bone_path(Polygon2D{self}, index)
}
func (self methodsPolygon2D) GetBoneWeights(index int64) PackedFloat32Array {
	return self.Runtime.Polygon2D_get_bone_weights(Polygon2D{self}, index)
}
func (self methodsPolygon2D) EraseBone(index int64) {
	self.Runtime.Polygon2D_erase_bone(Polygon2D{self}, index)
}
func (self methodsPolygon2D) ClearBones() {
	self.Runtime.Polygon2D_clear_bones(Polygon2D{self})
}
func (self methodsPolygon2D) SetBonePath(index int64, path NodePath) {
	self.Runtime.Polygon2D_set_bone_path(Polygon2D{self}, index, path)
}
func (self methodsPolygon2D) SetBoneWeights(index int64, weights PackedFloat32Array) {
	self.Runtime.Polygon2D_set_bone_weights(Polygon2D{self}, index, weights)
}
func (self methodsPolygon2D) SetSkeleton(skeleton NodePath) {
	self.Runtime.Polygon2D_set_skeleton(Polygon2D{self}, skeleton)
}
func (self methodsPolygon2D) GetSkeleton() NodePath {
	return self.Runtime.Polygon2D_get_skeleton(Polygon2D{self})
}
func (self methodsPolygon2D) SetInternalVertexCount(internal_vertex_count int64) {
	self.Runtime.Polygon2D_set_internal_vertex_count(Polygon2D{self}, internal_vertex_count)
}
func (self methodsPolygon2D) GetInternalVertexCount() int64 {
	return self.Runtime.Polygon2D_get_internal_vertex_count(Polygon2D{self})
}

type methodsPolygonOccluder3D struct {
	_ [0]*methodsPolygonOccluder3D
	class
}

func (self PolygonOccluder3D) Occluder3D() Occluder3D {
	var parent Occluder3D
	parent.class = self.class
	return parent
}
func (self methodsPolygonOccluder3D) SetPolygon(polygon PackedVector2Array) {
	self.Runtime.PolygonOccluder3D_set_polygon(PolygonOccluder3D{self}, polygon)
}
func (self methodsPolygonOccluder3D) GetPolygon() PackedVector2Array {
	return self.Runtime.PolygonOccluder3D_get_polygon(PolygonOccluder3D{self})
}

type methodsPolygonPathFinder struct {
	_ [0]*methodsPolygonPathFinder
	class
}

func (self PolygonPathFinder) Resource() Resource {
	var parent Resource
	parent.class = self.class
	return parent
}
func (self methodsPolygonPathFinder) Setup(points PackedVector2Array, connections PackedInt32Array) {
	self.Runtime.PolygonPathFinder_setup(PolygonPathFinder{self}, points, connections)
}
func (self methodsPolygonPathFinder) FindPath(from Vector2, to Vector2) PackedVector2Array {
	return self.Runtime.PolygonPathFinder_find_path(PolygonPathFinder{self}, from, to)
}
func (self methodsPolygonPathFinder) GetIntersections(from Vector2, to Vector2) PackedVector2Array {
	return self.Runtime.PolygonPathFinder_get_intersections(PolygonPathFinder{self}, from, to)
}
func (self methodsPolygonPathFinder) GetClosestPoint(point Vector2) Vector2 {
	return self.Runtime.PolygonPathFinder_get_closest_point(PolygonPathFinder{self}, point)
}
func (self methodsPolygonPathFinder) IsPointInside(point Vector2) bool {
	return self.Runtime.PolygonPathFinder_is_point_inside(PolygonPathFinder{self}, point)
}
func (self methodsPolygonPathFinder) SetPointPenalty(idx int64, penalty Float) {
	self.Runtime.PolygonPathFinder_set_point_penalty(PolygonPathFinder{self}, idx, penalty)
}
func (self methodsPolygonPathFinder) GetPointPenalty(idx int64) Float {
	return self.Runtime.PolygonPathFinder_get_point_penalty(PolygonPathFinder{self}, idx)
}
func (self methodsPolygonPathFinder) GetBounds() Rect2 {
	return self.Runtime.PolygonPathFinder_get_bounds(PolygonPathFinder{self})
}

type methodsPopup struct {
	_ [0]*methodsPopup
	class
}

func (self Popup) Window() Window { var parent Window; parent.class = self.class; return parent }

type methodsPopupMenu struct {
	_ [0]*methodsPopupMenu
	class
}

func (self PopupMenu) Popup() Popup { var parent Popup; parent.class = self.class; return parent }
func (self methodsPopupMenu) ActivateItemByEvent(event InputEvent, for_global_only bool) bool {
	return self.Runtime.PopupMenu_activate_item_by_event(PopupMenu{self}, event, for_global_only)
}
func (self methodsPopupMenu) AddItem(label string, id int64, accel Key) {
	self.Runtime.PopupMenu_add_item(PopupMenu{self}, label, id, accel)
}
func (self methodsPopupMenu) AddIconItem(texture Texture2D, label string, id int64, accel Key) {
	self.Runtime.PopupMenu_add_icon_item(PopupMenu{self}, texture, label, id, accel)
}
func (self methodsPopupMenu) AddCheckItem(label string, id int64, accel Key) {
	self.Runtime.PopupMenu_add_check_item(PopupMenu{self}, label, id, accel)
}
func (self methodsPopupMenu) AddIconCheckItem(texture Texture2D, label string, id int64, accel Key) {
	self.Runtime.PopupMenu_add_icon_check_item(PopupMenu{self}, texture, label, id, accel)
}
func (self methodsPopupMenu) AddRadioCheckItem(label string, id int64, accel Key) {
	self.Runtime.PopupMenu_add_radio_check_item(PopupMenu{self}, label, id, accel)
}
func (self methodsPopupMenu) AddIconRadioCheckItem(texture Texture2D, label string, id int64, accel Key) {
	self.Runtime.PopupMenu_add_icon_radio_check_item(PopupMenu{self}, texture, label, id, accel)
}
func (self methodsPopupMenu) AddMultistateItem(label string, max_states int64, default_state int64, id int64, accel Key) {
	self.Runtime.PopupMenu_add_multistate_item(PopupMenu{self}, label, max_states, default_state, id, accel)
}
func (self methodsPopupMenu) AddShortcut(shortcut Shortcut, id int64, global bool, allow_echo bool) {
	self.Runtime.PopupMenu_add_shortcut(PopupMenu{self}, shortcut, id, global, allow_echo)
}
func (self methodsPopupMenu) AddIconShortcut(texture Texture2D, shortcut Shortcut, id int64, global bool, allow_echo bool) {
	self.Runtime.PopupMenu_add_icon_shortcut(PopupMenu{self}, texture, shortcut, id, global, allow_echo)
}
func (self methodsPopupMenu) AddCheckShortcut(shortcut Shortcut, id int64, global bool) {
	self.Runtime.PopupMenu_add_check_shortcut(PopupMenu{self}, shortcut, id, global)
}
func (self methodsPopupMenu) AddIconCheckShortcut(texture Texture2D, shortcut Shortcut, id int64, global bool) {
	self.Runtime.PopupMenu_add_icon_check_shortcut(PopupMenu{self}, texture, shortcut, id, global)
}
func (self methodsPopupMenu) AddRadioCheckShortcut(shortcut Shortcut, id int64, global bool) {
	self.Runtime.PopupMenu_add_radio_check_shortcut(PopupMenu{self}, shortcut, id, global)
}
func (self methodsPopupMenu) AddIconRadioCheckShortcut(texture Texture2D, shortcut Shortcut, id int64, global bool) {
	self.Runtime.PopupMenu_add_icon_radio_check_shortcut(PopupMenu{self}, texture, shortcut, id, global)
}
func (self methodsPopupMenu) AddSubmenuItem(label string, submenu string, id int64) {
	self.Runtime.PopupMenu_add_submenu_item(PopupMenu{self}, label, submenu, id)
}
func (self methodsPopupMenu) SetItemText(index int64, text string) {
	self.Runtime.PopupMenu_set_item_text(PopupMenu{self}, index, text)
}
func (self methodsPopupMenu) SetItemTextDirection(index int64, direction ControlTextDirection) {
	self.Runtime.PopupMenu_set_item_text_direction(PopupMenu{self}, index, direction)
}
func (self methodsPopupMenu) SetItemLanguage(index int64, language string) {
	self.Runtime.PopupMenu_set_item_language(PopupMenu{self}, index, language)
}
func (self methodsPopupMenu) SetItemIcon(index int64, icon Texture2D) {
	self.Runtime.PopupMenu_set_item_icon(PopupMenu{self}, index, icon)
}
func (self methodsPopupMenu) SetItemIconMaxWidth(index int64, width int64) {
	self.Runtime.PopupMenu_set_item_icon_max_width(PopupMenu{self}, index, width)
}
func (self methodsPopupMenu) SetItemIconModulate(index int64, modulate Color) {
	self.Runtime.PopupMenu_set_item_icon_modulate(PopupMenu{self}, index, modulate)
}
func (self methodsPopupMenu) SetItemChecked(index int64, checked bool) {
	self.Runtime.PopupMenu_set_item_checked(PopupMenu{self}, index, checked)
}
func (self methodsPopupMenu) SetItemId(index int64, id int64) {
	self.Runtime.PopupMenu_set_item_id(PopupMenu{self}, index, id)
}
func (self methodsPopupMenu) SetItemAccelerator(index int64, accel Key) {
	self.Runtime.PopupMenu_set_item_accelerator(PopupMenu{self}, index, accel)
}
func (self methodsPopupMenu) SetItemMetadata(index int64, metadata any) {
	self.Runtime.PopupMenu_set_item_metadata(PopupMenu{self}, index, metadata)
}
func (self methodsPopupMenu) SetItemDisabled(index int64, disabled bool) {
	self.Runtime.PopupMenu_set_item_disabled(PopupMenu{self}, index, disabled)
}
func (self methodsPopupMenu) SetItemSubmenu(index int64, submenu string) {
	self.Runtime.PopupMenu_set_item_submenu(PopupMenu{self}, index, submenu)
}
func (self methodsPopupMenu) SetItemAsSeparator(index int64, enable bool) {
	self.Runtime.PopupMenu_set_item_as_separator(PopupMenu{self}, index, enable)
}
func (self methodsPopupMenu) SetItemAsCheckable(index int64, enable bool) {
	self.Runtime.PopupMenu_set_item_as_checkable(PopupMenu{self}, index, enable)
}
func (self methodsPopupMenu) SetItemAsRadioCheckable(index int64, enable bool) {
	self.Runtime.PopupMenu_set_item_as_radio_checkable(PopupMenu{self}, index, enable)
}
func (self methodsPopupMenu) SetItemTooltip(index int64, tooltip string) {
	self.Runtime.PopupMenu_set_item_tooltip(PopupMenu{self}, index, tooltip)
}
func (self methodsPopupMenu) SetItemShortcut(index int64, shortcut Shortcut, global bool) {
	self.Runtime.PopupMenu_set_item_shortcut(PopupMenu{self}, index, shortcut, global)
}
func (self methodsPopupMenu) SetItemIndent(index int64, indent int64) {
	self.Runtime.PopupMenu_set_item_indent(PopupMenu{self}, index, indent)
}
func (self methodsPopupMenu) SetItemMultistate(index int64, state int64) {
	self.Runtime.PopupMenu_set_item_multistate(PopupMenu{self}, index, state)
}
func (self methodsPopupMenu) SetItemShortcutDisabled(index int64, disabled bool) {
	self.Runtime.PopupMenu_set_item_shortcut_disabled(PopupMenu{self}, index, disabled)
}
func (self methodsPopupMenu) ToggleItemChecked(index int64) {
	self.Runtime.PopupMenu_toggle_item_checked(PopupMenu{self}, index)
}
func (self methodsPopupMenu) ToggleItemMultistate(index int64) {
	self.Runtime.PopupMenu_toggle_item_multistate(PopupMenu{self}, index)
}
func (self methodsPopupMenu) GetItemText(index int64) string {
	return self.Runtime.PopupMenu_get_item_text(PopupMenu{self}, index)
}
func (self methodsPopupMenu) GetItemTextDirection(index int64) ControlTextDirection {
	return self.Runtime.PopupMenu_get_item_text_direction(PopupMenu{self}, index)
}
func (self methodsPopupMenu) GetItemLanguage(index int64) string {
	return self.Runtime.PopupMenu_get_item_language(PopupMenu{self}, index)
}
func (self methodsPopupMenu) GetItemIcon(index int64) Texture2D {
	return self.Runtime.PopupMenu_get_item_icon(PopupMenu{self}, index)
}
func (self methodsPopupMenu) GetItemIconMaxWidth(index int64) int64 {
	return self.Runtime.PopupMenu_get_item_icon_max_width(PopupMenu{self}, index)
}
func (self methodsPopupMenu) GetItemIconModulate(index int64) Color {
	return self.Runtime.PopupMenu_get_item_icon_modulate(PopupMenu{self}, index)
}
func (self methodsPopupMenu) IsItemChecked(index int64) bool {
	return self.Runtime.PopupMenu_is_item_checked(PopupMenu{self}, index)
}
func (self methodsPopupMenu) GetItemId(index int64) int64 {
	return self.Runtime.PopupMenu_get_item_id(PopupMenu{self}, index)
}
func (self methodsPopupMenu) GetItemIndex(id int64) int64 {
	return self.Runtime.PopupMenu_get_item_index(PopupMenu{self}, id)
}
func (self methodsPopupMenu) GetItemAccelerator(index int64) Key {
	return self.Runtime.PopupMenu_get_item_accelerator(PopupMenu{self}, index)
}
func (self methodsPopupMenu) GetItemMetadata(index int64) any {
	return self.Runtime.PopupMenu_get_item_metadata(PopupMenu{self}, index)
}
func (self methodsPopupMenu) IsItemDisabled(index int64) bool {
	return self.Runtime.PopupMenu_is_item_disabled(PopupMenu{self}, index)
}
func (self methodsPopupMenu) GetItemSubmenu(index int64) string {
	return self.Runtime.PopupMenu_get_item_submenu(PopupMenu{self}, index)
}
func (self methodsPopupMenu) IsItemSeparator(index int64) bool {
	return self.Runtime.PopupMenu_is_item_separator(PopupMenu{self}, index)
}
func (self methodsPopupMenu) IsItemCheckable(index int64) bool {
	return self.Runtime.PopupMenu_is_item_checkable(PopupMenu{self}, index)
}
func (self methodsPopupMenu) IsItemRadioCheckable(index int64) bool {
	return self.Runtime.PopupMenu_is_item_radio_checkable(PopupMenu{self}, index)
}
func (self methodsPopupMenu) IsItemShortcutDisabled(index int64) bool {
	return self.Runtime.PopupMenu_is_item_shortcut_disabled(PopupMenu{self}, index)
}
func (self methodsPopupMenu) GetItemTooltip(index int64) string {
	return self.Runtime.PopupMenu_get_item_tooltip(PopupMenu{self}, index)
}
func (self methodsPopupMenu) GetItemShortcut(index int64) Shortcut {
	return self.Runtime.PopupMenu_get_item_shortcut(PopupMenu{self}, index)
}
func (self methodsPopupMenu) GetItemIndent(index int64) int64 {
	return self.Runtime.PopupMenu_get_item_indent(PopupMenu{self}, index)
}
func (self methodsPopupMenu) SetFocusedItem(index int64) {
	self.Runtime.PopupMenu_set_focused_item(PopupMenu{self}, index)
}
func (self methodsPopupMenu) GetFocusedItem() int64 {
	return self.Runtime.PopupMenu_get_focused_item(PopupMenu{self})
}
func (self methodsPopupMenu) SetItemCount(count int64) {
	self.Runtime.PopupMenu_set_item_count(PopupMenu{self}, count)
}
func (self methodsPopupMenu) GetItemCount() int64 {
	return self.Runtime.PopupMenu_get_item_count(PopupMenu{self})
}
func (self methodsPopupMenu) ScrollToItem(index int64) {
	self.Runtime.PopupMenu_scroll_to_item(PopupMenu{self}, index)
}
func (self methodsPopupMenu) RemoveItem(index int64) {
	self.Runtime.PopupMenu_remove_item(PopupMenu{self}, index)
}
func (self methodsPopupMenu) AddSeparator(label string, id int64) {
	self.Runtime.PopupMenu_add_separator(PopupMenu{self}, label, id)
}
func (self methodsPopupMenu) Clear(free_submenus bool) {
	self.Runtime.PopupMenu_clear(PopupMenu{self}, free_submenus)
}
func (self methodsPopupMenu) SetHideOnItemSelection(enable bool) {
	self.Runtime.PopupMenu_set_hide_on_item_selection(PopupMenu{self}, enable)
}
func (self methodsPopupMenu) IsHideOnItemSelection() bool {
	return self.Runtime.PopupMenu_is_hide_on_item_selection(PopupMenu{self})
}
func (self methodsPopupMenu) SetHideOnCheckableItemSelection(enable bool) {
	self.Runtime.PopupMenu_set_hide_on_checkable_item_selection(PopupMenu{self}, enable)
}
func (self methodsPopupMenu) IsHideOnCheckableItemSelection() bool {
	return self.Runtime.PopupMenu_is_hide_on_checkable_item_selection(PopupMenu{self})
}
func (self methodsPopupMenu) SetHideOnStateItemSelection(enable bool) {
	self.Runtime.PopupMenu_set_hide_on_state_item_selection(PopupMenu{self}, enable)
}
func (self methodsPopupMenu) IsHideOnStateItemSelection() bool {
	return self.Runtime.PopupMenu_is_hide_on_state_item_selection(PopupMenu{self})
}
func (self methodsPopupMenu) SetSubmenuPopupDelay(seconds Float) {
	self.Runtime.PopupMenu_set_submenu_popup_delay(PopupMenu{self}, seconds)
}
func (self methodsPopupMenu) GetSubmenuPopupDelay() Float {
	return self.Runtime.PopupMenu_get_submenu_popup_delay(PopupMenu{self})
}
func (self methodsPopupMenu) SetAllowSearch(allow bool) {
	self.Runtime.PopupMenu_set_allow_search(PopupMenu{self}, allow)
}
func (self methodsPopupMenu) GetAllowSearch() bool {
	return self.Runtime.PopupMenu_get_allow_search(PopupMenu{self})
}
func (self methodsPopupMenu) IsSystemMenu() bool {
	return self.Runtime.PopupMenu_is_system_menu(PopupMenu{self})
}
func (self methodsPopupMenu) SetSystemMenuRoot(special string) {
	self.Runtime.PopupMenu_set_system_menu_root(PopupMenu{self}, special)
}
func (self methodsPopupMenu) GetSystemMenuRoot() string {
	return self.Runtime.PopupMenu_get_system_menu_root(PopupMenu{self})
}

type methodsPopupPanel struct {
	_ [0]*methodsPopupPanel
	class
}

func (self PopupPanel) Popup() Popup { var parent Popup; parent.class = self.class; return parent }

type methodsPortableCompressedTexture2D struct {
	_ [0]*methodsPortableCompressedTexture2D
	class
}

func (self PortableCompressedTexture2D) Texture2D() Texture2D {
	var parent Texture2D
	parent.class = self.class
	return parent
}
func (self methodsPortableCompressedTexture2D) CreateFromImage(image Image, compression_mode PortableCompressedTexture2DCompressionMode, normal_map bool, lossy_quality Float) {
	self.Runtime.PortableCompressedTexture2D_create_from_image(PortableCompressedTexture2D{self}, image, compression_mode, normal_map, lossy_quality)
}
func (self methodsPortableCompressedTexture2D) GetFormat() ImageFormat {
	return self.Runtime.PortableCompressedTexture2D_get_format(PortableCompressedTexture2D{self})
}
func (self methodsPortableCompressedTexture2D) GetCompressionMode() PortableCompressedTexture2DCompressionMode {
	return self.Runtime.PortableCompressedTexture2D_get_compression_mode(PortableCompressedTexture2D{self})
}
func (self methodsPortableCompressedTexture2D) SetSizeOverride(size Vector2) {
	self.Runtime.PortableCompressedTexture2D_set_size_override(PortableCompressedTexture2D{self}, size)
}
func (self methodsPortableCompressedTexture2D) GetSizeOverride() Vector2 {
	return self.Runtime.PortableCompressedTexture2D_get_size_override(PortableCompressedTexture2D{self})
}
func (self methodsPortableCompressedTexture2D) SetKeepCompressedBuffer(keep bool) {
	self.Runtime.PortableCompressedTexture2D_set_keep_compressed_buffer(PortableCompressedTexture2D{self}, keep)
}
func (self methodsPortableCompressedTexture2D) IsKeepingCompressedBuffer() bool {
	return self.Runtime.PortableCompressedTexture2D_is_keeping_compressed_buffer(PortableCompressedTexture2D{self})
}
func (self methodsPortableCompressedTexture2D) SetKeepAllCompressedBuffers(keep bool) {
	self.Runtime.PortableCompressedTexture2D_set_keep_all_compressed_buffers(PortableCompressedTexture2D{self}, keep)
}
func (self methodsPortableCompressedTexture2D) IsKeepingAllCompressedBuffers() bool {
	return self.Runtime.PortableCompressedTexture2D_is_keeping_all_compressed_buffers(PortableCompressedTexture2D{self})
}

type methodsPrimitiveMesh struct {
	_ [0]*methodsPrimitiveMesh
	class
}

func (self PrimitiveMesh) Mesh() Mesh { var parent Mesh; parent.class = self.class; return parent }
func (self methodsPrimitiveMesh) SetMaterial(material Material) {
	self.Runtime.PrimitiveMesh_set_material(PrimitiveMesh{self}, material)
}
func (self methodsPrimitiveMesh) GetMaterial() Material {
	return self.Runtime.PrimitiveMesh_get_material(PrimitiveMesh{self})
}
func (self methodsPrimitiveMesh) GetMeshArrays() Array {
	return self.Runtime.PrimitiveMesh_get_mesh_arrays(PrimitiveMesh{self})
}
func (self methodsPrimitiveMesh) SetCustomAabb(aabb AABB) {
	self.Runtime.PrimitiveMesh_set_custom_aabb(PrimitiveMesh{self}, aabb)
}
func (self methodsPrimitiveMesh) GetCustomAabb() AABB {
	return self.Runtime.PrimitiveMesh_get_custom_aabb(PrimitiveMesh{self})
}
func (self methodsPrimitiveMesh) SetFlipFaces(flip_faces bool) {
	self.Runtime.PrimitiveMesh_set_flip_faces(PrimitiveMesh{self}, flip_faces)
}
func (self methodsPrimitiveMesh) GetFlipFaces() bool {
	return self.Runtime.PrimitiveMesh_get_flip_faces(PrimitiveMesh{self})
}
func (self methodsPrimitiveMesh) SetAddUv2(add_uv2 bool) {
	self.Runtime.PrimitiveMesh_set_add_uv2(PrimitiveMesh{self}, add_uv2)
}
func (self methodsPrimitiveMesh) GetAddUv2() bool {
	return self.Runtime.PrimitiveMesh_get_add_uv2(PrimitiveMesh{self})
}
func (self methodsPrimitiveMesh) SetUv2Padding(uv2_padding Float) {
	self.Runtime.PrimitiveMesh_set_uv2_padding(PrimitiveMesh{self}, uv2_padding)
}
func (self methodsPrimitiveMesh) GetUv2Padding() Float {
	return self.Runtime.PrimitiveMesh_get_uv2_padding(PrimitiveMesh{self})
}

type methodsPrismMesh struct {
	_ [0]*methodsPrismMesh
	class
}

func (self PrismMesh) PrimitiveMesh() PrimitiveMesh {
	var parent PrimitiveMesh
	parent.class = self.class
	return parent
}
func (self methodsPrismMesh) SetLeftToRight(left_to_right Float) {
	self.Runtime.PrismMesh_set_left_to_right(PrismMesh{self}, left_to_right)
}
func (self methodsPrismMesh) GetLeftToRight() Float {
	return self.Runtime.PrismMesh_get_left_to_right(PrismMesh{self})
}
func (self methodsPrismMesh) SetSize(size Vector3) {
	self.Runtime.PrismMesh_set_size(PrismMesh{self}, size)
}
func (self methodsPrismMesh) GetSize() Vector3 {
	return self.Runtime.PrismMesh_get_size(PrismMesh{self})
}
func (self methodsPrismMesh) SetSubdivideWidth(segments int64) {
	self.Runtime.PrismMesh_set_subdivide_width(PrismMesh{self}, segments)
}
func (self methodsPrismMesh) GetSubdivideWidth() int64 {
	return self.Runtime.PrismMesh_get_subdivide_width(PrismMesh{self})
}
func (self methodsPrismMesh) SetSubdivideHeight(segments int64) {
	self.Runtime.PrismMesh_set_subdivide_height(PrismMesh{self}, segments)
}
func (self methodsPrismMesh) GetSubdivideHeight() int64 {
	return self.Runtime.PrismMesh_get_subdivide_height(PrismMesh{self})
}
func (self methodsPrismMesh) SetSubdivideDepth(segments int64) {
	self.Runtime.PrismMesh_set_subdivide_depth(PrismMesh{self}, segments)
}
func (self methodsPrismMesh) GetSubdivideDepth() int64 {
	return self.Runtime.PrismMesh_get_subdivide_depth(PrismMesh{self})
}

type methodsProceduralSkyMaterial struct {
	_ [0]*methodsProceduralSkyMaterial
	class
}

func (self ProceduralSkyMaterial) Material() Material {
	var parent Material
	parent.class = self.class
	return parent
}
func (self methodsProceduralSkyMaterial) SetSkyTopColor(color Color) {
	self.Runtime.ProceduralSkyMaterial_set_sky_top_color(ProceduralSkyMaterial{self}, color)
}
func (self methodsProceduralSkyMaterial) GetSkyTopColor() Color {
	return self.Runtime.ProceduralSkyMaterial_get_sky_top_color(ProceduralSkyMaterial{self})
}
func (self methodsProceduralSkyMaterial) SetSkyHorizonColor(color Color) {
	self.Runtime.ProceduralSkyMaterial_set_sky_horizon_color(ProceduralSkyMaterial{self}, color)
}
func (self methodsProceduralSkyMaterial) GetSkyHorizonColor() Color {
	return self.Runtime.ProceduralSkyMaterial_get_sky_horizon_color(ProceduralSkyMaterial{self})
}
func (self methodsProceduralSkyMaterial) SetSkyCurve(curve Float) {
	self.Runtime.ProceduralSkyMaterial_set_sky_curve(ProceduralSkyMaterial{self}, curve)
}
func (self methodsProceduralSkyMaterial) GetSkyCurve() Float {
	return self.Runtime.ProceduralSkyMaterial_get_sky_curve(ProceduralSkyMaterial{self})
}
func (self methodsProceduralSkyMaterial) SetSkyEnergyMultiplier(multiplier Float) {
	self.Runtime.ProceduralSkyMaterial_set_sky_energy_multiplier(ProceduralSkyMaterial{self}, multiplier)
}
func (self methodsProceduralSkyMaterial) GetSkyEnergyMultiplier() Float {
	return self.Runtime.ProceduralSkyMaterial_get_sky_energy_multiplier(ProceduralSkyMaterial{self})
}
func (self methodsProceduralSkyMaterial) SetSkyCover(sky_cover Texture2D) {
	self.Runtime.ProceduralSkyMaterial_set_sky_cover(ProceduralSkyMaterial{self}, sky_cover)
}
func (self methodsProceduralSkyMaterial) GetSkyCover() Texture2D {
	return self.Runtime.ProceduralSkyMaterial_get_sky_cover(ProceduralSkyMaterial{self})
}
func (self methodsProceduralSkyMaterial) SetSkyCoverModulate(color Color) {
	self.Runtime.ProceduralSkyMaterial_set_sky_cover_modulate(ProceduralSkyMaterial{self}, color)
}
func (self methodsProceduralSkyMaterial) GetSkyCoverModulate() Color {
	return self.Runtime.ProceduralSkyMaterial_get_sky_cover_modulate(ProceduralSkyMaterial{self})
}
func (self methodsProceduralSkyMaterial) SetGroundBottomColor(color Color) {
	self.Runtime.ProceduralSkyMaterial_set_ground_bottom_color(ProceduralSkyMaterial{self}, color)
}
func (self methodsProceduralSkyMaterial) GetGroundBottomColor() Color {
	return self.Runtime.ProceduralSkyMaterial_get_ground_bottom_color(ProceduralSkyMaterial{self})
}
func (self methodsProceduralSkyMaterial) SetGroundHorizonColor(color Color) {
	self.Runtime.ProceduralSkyMaterial_set_ground_horizon_color(ProceduralSkyMaterial{self}, color)
}
func (self methodsProceduralSkyMaterial) GetGroundHorizonColor() Color {
	return self.Runtime.ProceduralSkyMaterial_get_ground_horizon_color(ProceduralSkyMaterial{self})
}
func (self methodsProceduralSkyMaterial) SetGroundCurve(curve Float) {
	self.Runtime.ProceduralSkyMaterial_set_ground_curve(ProceduralSkyMaterial{self}, curve)
}
func (self methodsProceduralSkyMaterial) GetGroundCurve() Float {
	return self.Runtime.ProceduralSkyMaterial_get_ground_curve(ProceduralSkyMaterial{self})
}
func (self methodsProceduralSkyMaterial) SetGroundEnergyMultiplier(energy Float) {
	self.Runtime.ProceduralSkyMaterial_set_ground_energy_multiplier(ProceduralSkyMaterial{self}, energy)
}
func (self methodsProceduralSkyMaterial) GetGroundEnergyMultiplier() Float {
	return self.Runtime.ProceduralSkyMaterial_get_ground_energy_multiplier(ProceduralSkyMaterial{self})
}
func (self methodsProceduralSkyMaterial) SetSunAngleMax(degrees Float) {
	self.Runtime.ProceduralSkyMaterial_set_sun_angle_max(ProceduralSkyMaterial{self}, degrees)
}
func (self methodsProceduralSkyMaterial) GetSunAngleMax() Float {
	return self.Runtime.ProceduralSkyMaterial_get_sun_angle_max(ProceduralSkyMaterial{self})
}
func (self methodsProceduralSkyMaterial) SetSunCurve(curve Float) {
	self.Runtime.ProceduralSkyMaterial_set_sun_curve(ProceduralSkyMaterial{self}, curve)
}
func (self methodsProceduralSkyMaterial) GetSunCurve() Float {
	return self.Runtime.ProceduralSkyMaterial_get_sun_curve(ProceduralSkyMaterial{self})
}
func (self methodsProceduralSkyMaterial) SetUseDebanding(use_debanding bool) {
	self.Runtime.ProceduralSkyMaterial_set_use_debanding(ProceduralSkyMaterial{self}, use_debanding)
}
func (self methodsProceduralSkyMaterial) GetUseDebanding() bool {
	return self.Runtime.ProceduralSkyMaterial_get_use_debanding(ProceduralSkyMaterial{self})
}
func (self methodsProceduralSkyMaterial) SetEnergyMultiplier(multiplier Float) {
	self.Runtime.ProceduralSkyMaterial_set_energy_multiplier(ProceduralSkyMaterial{self}, multiplier)
}
func (self methodsProceduralSkyMaterial) GetEnergyMultiplier() Float {
	return self.Runtime.ProceduralSkyMaterial_get_energy_multiplier(ProceduralSkyMaterial{self})
}

type methodsProgressBar struct {
	_ [0]*methodsProgressBar
	class
}

func (self ProgressBar) Range() Range { var parent Range; parent.class = self.class; return parent }
func (self methodsProgressBar) SetFillMode(mode int64) {
	self.Runtime.ProgressBar_set_fill_mode(ProgressBar{self}, mode)
}
func (self methodsProgressBar) GetFillMode() int64 {
	return self.Runtime.ProgressBar_get_fill_mode(ProgressBar{self})
}
func (self methodsProgressBar) SetShowPercentage(visible bool) {
	self.Runtime.ProgressBar_set_show_percentage(ProgressBar{self}, visible)
}
func (self methodsProgressBar) IsPercentageShown() bool {
	return self.Runtime.ProgressBar_is_percentage_shown(ProgressBar{self})
}

type methodsProjectSettings struct {
	_ [0]*methodsProjectSettings
	class
}

func (self ProjectSettings) Object() Object {
	var parent Object
	parent.class = self.class
	return parent
}
func (self methodsProjectSettings) HasSetting(name string) bool {
	return self.Runtime.ProjectSettings_has_setting(ProjectSettings{self}, name)
}
func (self methodsProjectSettings) SetSetting(name string, value any) {
	self.Runtime.ProjectSettings_set_setting(ProjectSettings{self}, name, value)
}
func (self methodsProjectSettings) GetSetting(name string, default_value any) any {
	return self.Runtime.ProjectSettings_get_setting(ProjectSettings{self}, name, default_value)
}
func (self methodsProjectSettings) GetSettingWithOverride(name string) any {
	return self.Runtime.ProjectSettings_get_setting_with_override(ProjectSettings{self}, name)
}
func (self methodsProjectSettings) GetGlobalClassList() ArrayOf[Dictionary] {
	return self.Runtime.ProjectSettings_get_global_class_list(ProjectSettings{self})
}
func (self methodsProjectSettings) SetOrder(name string, position int64) {
	self.Runtime.ProjectSettings_set_order(ProjectSettings{self}, name, position)
}
func (self methodsProjectSettings) GetOrder(name string) int64 {
	return self.Runtime.ProjectSettings_get_order(ProjectSettings{self}, name)
}
func (self methodsProjectSettings) SetInitialValue(name string, value any) {
	self.Runtime.ProjectSettings_set_initial_value(ProjectSettings{self}, name, value)
}
func (self methodsProjectSettings) SetAsBasic(name string, basic bool) {
	self.Runtime.ProjectSettings_set_as_basic(ProjectSettings{self}, name, basic)
}
func (self methodsProjectSettings) SetAsInternal(name string, internal bool) {
	self.Runtime.ProjectSettings_set_as_internal(ProjectSettings{self}, name, internal)
}
func (self methodsProjectSettings) AddPropertyInfo(hint Dictionary) {
	self.Runtime.ProjectSettings_add_property_info(ProjectSettings{self}, hint)
}
func (self methodsProjectSettings) SetRestartIfChanged(name string, restart bool) {
	self.Runtime.ProjectSettings_set_restart_if_changed(ProjectSettings{self}, name, restart)
}
func (self methodsProjectSettings) Clear(name string) {
	self.Runtime.ProjectSettings_clear(ProjectSettings{self}, name)
}
func (self methodsProjectSettings) LocalizePath(path string) string {
	return self.Runtime.ProjectSettings_localize_path(ProjectSettings{self}, path)
}
func (self methodsProjectSettings) GlobalizePath(path string) string {
	return self.Runtime.ProjectSettings_globalize_path(ProjectSettings{self}, path)
}
func (self methodsProjectSettings) Save() int64 {
	return self.Runtime.ProjectSettings_save(ProjectSettings{self})
}
func (self methodsProjectSettings) LoadResourcePack(pack string, replace_files bool, offset int64) bool {
	return self.Runtime.ProjectSettings_load_resource_pack(ProjectSettings{self}, pack, replace_files, offset)
}
func (self methodsProjectSettings) SaveCustom(file string) int64 {
	return self.Runtime.ProjectSettings_save_custom(ProjectSettings{self}, file)
}

type methodsPropertyTweener struct {
	_ [0]*methodsPropertyTweener
	class
}

func (self PropertyTweener) Tweener() Tweener {
	var parent Tweener
	parent.class = self.class
	return parent
}
func (self methodsPropertyTweener) From(value any) PropertyTweener {
	return self.Runtime.PropertyTweener_from(PropertyTweener{self}, value)
}
func (self methodsPropertyTweener) FromCurrent() PropertyTweener {
	return self.Runtime.PropertyTweener_from_current(PropertyTweener{self})
}
func (self methodsPropertyTweener) AsRelative() PropertyTweener {
	return self.Runtime.PropertyTweener_as_relative(PropertyTweener{self})
}
func (self methodsPropertyTweener) SetTrans(trans TweenTransitionType) PropertyTweener {
	return self.Runtime.PropertyTweener_set_trans(PropertyTweener{self}, trans)
}
func (self methodsPropertyTweener) SetEase(ease TweenEaseType) PropertyTweener {
	return self.Runtime.PropertyTweener_set_ease(PropertyTweener{self}, ease)
}
func (self methodsPropertyTweener) SetDelay(delay Float) PropertyTweener {
	return self.Runtime.PropertyTweener_set_delay(PropertyTweener{self}, delay)
}

type methodsQuadMesh struct {
	_ [0]*methodsQuadMesh
	class
}

func (self QuadMesh) PlaneMesh() PlaneMesh {
	var parent PlaneMesh
	parent.class = self.class
	return parent
}

type methodsQuadOccluder3D struct {
	_ [0]*methodsQuadOccluder3D
	class
}

func (self QuadOccluder3D) Occluder3D() Occluder3D {
	var parent Occluder3D
	parent.class = self.class
	return parent
}
func (self methodsQuadOccluder3D) SetSize(size Vector2) {
	self.Runtime.QuadOccluder3D_set_size(QuadOccluder3D{self}, size)
}
func (self methodsQuadOccluder3D) GetSize() Vector2 {
	return self.Runtime.QuadOccluder3D_get_size(QuadOccluder3D{self})
}

type methodsRDAttachmentFormat struct {
	_ [0]*methodsRDAttachmentFormat
	class
}

func (self RDAttachmentFormat) RefCounted() RefCounted {
	var parent RefCounted
	parent.class = self.class
	return parent
}
func (self methodsRDAttachmentFormat) SetFormat(p_member RenderingDeviceDataFormat) {
	self.Runtime.RDAttachmentFormat_set_format(RDAttachmentFormat{self}, p_member)
}
func (self methodsRDAttachmentFormat) GetFormat() RenderingDeviceDataFormat {
	return self.Runtime.RDAttachmentFormat_get_format(RDAttachmentFormat{self})
}
func (self methodsRDAttachmentFormat) SetSamples(p_member RenderingDeviceTextureSamples) {
	self.Runtime.RDAttachmentFormat_set_samples(RDAttachmentFormat{self}, p_member)
}
func (self methodsRDAttachmentFormat) GetSamples() RenderingDeviceTextureSamples {
	return self.Runtime.RDAttachmentFormat_get_samples(RDAttachmentFormat{self})
}
func (self methodsRDAttachmentFormat) SetUsageFlags(p_member int64) {
	self.Runtime.RDAttachmentFormat_set_usage_flags(RDAttachmentFormat{self}, p_member)
}
func (self methodsRDAttachmentFormat) GetUsageFlags() int64 {
	return self.Runtime.RDAttachmentFormat_get_usage_flags(RDAttachmentFormat{self})
}

type methodsRDFramebufferPass struct {
	_ [0]*methodsRDFramebufferPass
	class
}

func (self RDFramebufferPass) RefCounted() RefCounted {
	var parent RefCounted
	parent.class = self.class
	return parent
}
func (self methodsRDFramebufferPass) SetColorAttachments(p_member PackedInt32Array) {
	self.Runtime.RDFramebufferPass_set_color_attachments(RDFramebufferPass{self}, p_member)
}
func (self methodsRDFramebufferPass) GetColorAttachments() PackedInt32Array {
	return self.Runtime.RDFramebufferPass_get_color_attachments(RDFramebufferPass{self})
}
func (self methodsRDFramebufferPass) SetInputAttachments(p_member PackedInt32Array) {
	self.Runtime.RDFramebufferPass_set_input_attachments(RDFramebufferPass{self}, p_member)
}
func (self methodsRDFramebufferPass) GetInputAttachments() PackedInt32Array {
	return self.Runtime.RDFramebufferPass_get_input_attachments(RDFramebufferPass{self})
}
func (self methodsRDFramebufferPass) SetResolveAttachments(p_member PackedInt32Array) {
	self.Runtime.RDFramebufferPass_set_resolve_attachments(RDFramebufferPass{self}, p_member)
}
func (self methodsRDFramebufferPass) GetResolveAttachments() PackedInt32Array {
	return self.Runtime.RDFramebufferPass_get_resolve_attachments(RDFramebufferPass{self})
}
func (self methodsRDFramebufferPass) SetPreserveAttachments(p_member PackedInt32Array) {
	self.Runtime.RDFramebufferPass_set_preserve_attachments(RDFramebufferPass{self}, p_member)
}
func (self methodsRDFramebufferPass) GetPreserveAttachments() PackedInt32Array {
	return self.Runtime.RDFramebufferPass_get_preserve_attachments(RDFramebufferPass{self})
}
func (self methodsRDFramebufferPass) SetDepthAttachment(p_member int64) {
	self.Runtime.RDFramebufferPass_set_depth_attachment(RDFramebufferPass{self}, p_member)
}
func (self methodsRDFramebufferPass) GetDepthAttachment() int64 {
	return self.Runtime.RDFramebufferPass_get_depth_attachment(RDFramebufferPass{self})
}

type methodsRDPipelineColorBlendState struct {
	_ [0]*methodsRDPipelineColorBlendState
	class
}

func (self RDPipelineColorBlendState) RefCounted() RefCounted {
	var parent RefCounted
	parent.class = self.class
	return parent
}
func (self methodsRDPipelineColorBlendState) SetEnableLogicOp(p_member bool) {
	self.Runtime.RDPipelineColorBlendState_set_enable_logic_op(RDPipelineColorBlendState{self}, p_member)
}
func (self methodsRDPipelineColorBlendState) GetEnableLogicOp() bool {
	return self.Runtime.RDPipelineColorBlendState_get_enable_logic_op(RDPipelineColorBlendState{self})
}
func (self methodsRDPipelineColorBlendState) SetLogicOp(p_member RenderingDeviceLogicOperation) {
	self.Runtime.RDPipelineColorBlendState_set_logic_op(RDPipelineColorBlendState{self}, p_member)
}
func (self methodsRDPipelineColorBlendState) GetLogicOp() RenderingDeviceLogicOperation {
	return self.Runtime.RDPipelineColorBlendState_get_logic_op(RDPipelineColorBlendState{self})
}
func (self methodsRDPipelineColorBlendState) SetBlendConstant(p_member Color) {
	self.Runtime.RDPipelineColorBlendState_set_blend_constant(RDPipelineColorBlendState{self}, p_member)
}
func (self methodsRDPipelineColorBlendState) GetBlendConstant() Color {
	return self.Runtime.RDPipelineColorBlendState_get_blend_constant(RDPipelineColorBlendState{self})
}
func (self methodsRDPipelineColorBlendState) SetAttachments(attachments ArrayOf[RDPipelineColorBlendStateAttachment]) {
	self.Runtime.RDPipelineColorBlendState_set_attachments(RDPipelineColorBlendState{self}, attachments)
}
func (self methodsRDPipelineColorBlendState) GetAttachments() ArrayOf[RDPipelineColorBlendStateAttachment] {
	return self.Runtime.RDPipelineColorBlendState_get_attachments(RDPipelineColorBlendState{self})
}

type methodsRDPipelineColorBlendStateAttachment struct {
	_ [0]*methodsRDPipelineColorBlendStateAttachment
	class
}

func (self RDPipelineColorBlendStateAttachment) RefCounted() RefCounted {
	var parent RefCounted
	parent.class = self.class
	return parent
}
func (self methodsRDPipelineColorBlendStateAttachment) SetAsMix() {
	self.Runtime.RDPipelineColorBlendStateAttachment_set_as_mix(RDPipelineColorBlendStateAttachment{self})
}
func (self methodsRDPipelineColorBlendStateAttachment) SetEnableBlend(p_member bool) {
	self.Runtime.RDPipelineColorBlendStateAttachment_set_enable_blend(RDPipelineColorBlendStateAttachment{self}, p_member)
}
func (self methodsRDPipelineColorBlendStateAttachment) GetEnableBlend() bool {
	return self.Runtime.RDPipelineColorBlendStateAttachment_get_enable_blend(RDPipelineColorBlendStateAttachment{self})
}
func (self methodsRDPipelineColorBlendStateAttachment) SetSrcColorBlendFactor(p_member RenderingDeviceBlendFactor) {
	self.Runtime.RDPipelineColorBlendStateAttachment_set_src_color_blend_factor(RDPipelineColorBlendStateAttachment{self}, p_member)
}
func (self methodsRDPipelineColorBlendStateAttachment) GetSrcColorBlendFactor() RenderingDeviceBlendFactor {
	return self.Runtime.RDPipelineColorBlendStateAttachment_get_src_color_blend_factor(RDPipelineColorBlendStateAttachment{self})
}
func (self methodsRDPipelineColorBlendStateAttachment) SetDstColorBlendFactor(p_member RenderingDeviceBlendFactor) {
	self.Runtime.RDPipelineColorBlendStateAttachment_set_dst_color_blend_factor(RDPipelineColorBlendStateAttachment{self}, p_member)
}
func (self methodsRDPipelineColorBlendStateAttachment) GetDstColorBlendFactor() RenderingDeviceBlendFactor {
	return self.Runtime.RDPipelineColorBlendStateAttachment_get_dst_color_blend_factor(RDPipelineColorBlendStateAttachment{self})
}
func (self methodsRDPipelineColorBlendStateAttachment) SetColorBlendOp(p_member RenderingDeviceBlendOperation) {
	self.Runtime.RDPipelineColorBlendStateAttachment_set_color_blend_op(RDPipelineColorBlendStateAttachment{self}, p_member)
}
func (self methodsRDPipelineColorBlendStateAttachment) GetColorBlendOp() RenderingDeviceBlendOperation {
	return self.Runtime.RDPipelineColorBlendStateAttachment_get_color_blend_op(RDPipelineColorBlendStateAttachment{self})
}
func (self methodsRDPipelineColorBlendStateAttachment) SetSrcAlphaBlendFactor(p_member RenderingDeviceBlendFactor) {
	self.Runtime.RDPipelineColorBlendStateAttachment_set_src_alpha_blend_factor(RDPipelineColorBlendStateAttachment{self}, p_member)
}
func (self methodsRDPipelineColorBlendStateAttachment) GetSrcAlphaBlendFactor() RenderingDeviceBlendFactor {
	return self.Runtime.RDPipelineColorBlendStateAttachment_get_src_alpha_blend_factor(RDPipelineColorBlendStateAttachment{self})
}
func (self methodsRDPipelineColorBlendStateAttachment) SetDstAlphaBlendFactor(p_member RenderingDeviceBlendFactor) {
	self.Runtime.RDPipelineColorBlendStateAttachment_set_dst_alpha_blend_factor(RDPipelineColorBlendStateAttachment{self}, p_member)
}
func (self methodsRDPipelineColorBlendStateAttachment) GetDstAlphaBlendFactor() RenderingDeviceBlendFactor {
	return self.Runtime.RDPipelineColorBlendStateAttachment_get_dst_alpha_blend_factor(RDPipelineColorBlendStateAttachment{self})
}
func (self methodsRDPipelineColorBlendStateAttachment) SetAlphaBlendOp(p_member RenderingDeviceBlendOperation) {
	self.Runtime.RDPipelineColorBlendStateAttachment_set_alpha_blend_op(RDPipelineColorBlendStateAttachment{self}, p_member)
}
func (self methodsRDPipelineColorBlendStateAttachment) GetAlphaBlendOp() RenderingDeviceBlendOperation {
	return self.Runtime.RDPipelineColorBlendStateAttachment_get_alpha_blend_op(RDPipelineColorBlendStateAttachment{self})
}
func (self methodsRDPipelineColorBlendStateAttachment) SetWriteR(p_member bool) {
	self.Runtime.RDPipelineColorBlendStateAttachment_set_write_r(RDPipelineColorBlendStateAttachment{self}, p_member)
}
func (self methodsRDPipelineColorBlendStateAttachment) GetWriteR() bool {
	return self.Runtime.RDPipelineColorBlendStateAttachment_get_write_r(RDPipelineColorBlendStateAttachment{self})
}
func (self methodsRDPipelineColorBlendStateAttachment) SetWriteG(p_member bool) {
	self.Runtime.RDPipelineColorBlendStateAttachment_set_write_g(RDPipelineColorBlendStateAttachment{self}, p_member)
}
func (self methodsRDPipelineColorBlendStateAttachment) GetWriteG() bool {
	return self.Runtime.RDPipelineColorBlendStateAttachment_get_write_g(RDPipelineColorBlendStateAttachment{self})
}
func (self methodsRDPipelineColorBlendStateAttachment) SetWriteB(p_member bool) {
	self.Runtime.RDPipelineColorBlendStateAttachment_set_write_b(RDPipelineColorBlendStateAttachment{self}, p_member)
}
func (self methodsRDPipelineColorBlendStateAttachment) GetWriteB() bool {
	return self.Runtime.RDPipelineColorBlendStateAttachment_get_write_b(RDPipelineColorBlendStateAttachment{self})
}
func (self methodsRDPipelineColorBlendStateAttachment) SetWriteA(p_member bool) {
	self.Runtime.RDPipelineColorBlendStateAttachment_set_write_a(RDPipelineColorBlendStateAttachment{self}, p_member)
}
func (self methodsRDPipelineColorBlendStateAttachment) GetWriteA() bool {
	return self.Runtime.RDPipelineColorBlendStateAttachment_get_write_a(RDPipelineColorBlendStateAttachment{self})
}

type methodsRDPipelineDepthStencilState struct {
	_ [0]*methodsRDPipelineDepthStencilState
	class
}

func (self RDPipelineDepthStencilState) RefCounted() RefCounted {
	var parent RefCounted
	parent.class = self.class
	return parent
}
func (self methodsRDPipelineDepthStencilState) SetEnableDepthTest(p_member bool) {
	self.Runtime.RDPipelineDepthStencilState_set_enable_depth_test(RDPipelineDepthStencilState{self}, p_member)
}
func (self methodsRDPipelineDepthStencilState) GetEnableDepthTest() bool {
	return self.Runtime.RDPipelineDepthStencilState_get_enable_depth_test(RDPipelineDepthStencilState{self})
}
func (self methodsRDPipelineDepthStencilState) SetEnableDepthWrite(p_member bool) {
	self.Runtime.RDPipelineDepthStencilState_set_enable_depth_write(RDPipelineDepthStencilState{self}, p_member)
}
func (self methodsRDPipelineDepthStencilState) GetEnableDepthWrite() bool {
	return self.Runtime.RDPipelineDepthStencilState_get_enable_depth_write(RDPipelineDepthStencilState{self})
}
func (self methodsRDPipelineDepthStencilState) SetDepthCompareOperator(p_member RenderingDeviceCompareOperator) {
	self.Runtime.RDPipelineDepthStencilState_set_depth_compare_operator(RDPipelineDepthStencilState{self}, p_member)
}
func (self methodsRDPipelineDepthStencilState) GetDepthCompareOperator() RenderingDeviceCompareOperator {
	return self.Runtime.RDPipelineDepthStencilState_get_depth_compare_operator(RDPipelineDepthStencilState{self})
}
func (self methodsRDPipelineDepthStencilState) SetEnableDepthRange(p_member bool) {
	self.Runtime.RDPipelineDepthStencilState_set_enable_depth_range(RDPipelineDepthStencilState{self}, p_member)
}
func (self methodsRDPipelineDepthStencilState) GetEnableDepthRange() bool {
	return self.Runtime.RDPipelineDepthStencilState_get_enable_depth_range(RDPipelineDepthStencilState{self})
}
func (self methodsRDPipelineDepthStencilState) SetDepthRangeMin(p_member Float) {
	self.Runtime.RDPipelineDepthStencilState_set_depth_range_min(RDPipelineDepthStencilState{self}, p_member)
}
func (self methodsRDPipelineDepthStencilState) GetDepthRangeMin() Float {
	return self.Runtime.RDPipelineDepthStencilState_get_depth_range_min(RDPipelineDepthStencilState{self})
}
func (self methodsRDPipelineDepthStencilState) SetDepthRangeMax(p_member Float) {
	self.Runtime.RDPipelineDepthStencilState_set_depth_range_max(RDPipelineDepthStencilState{self}, p_member)
}
func (self methodsRDPipelineDepthStencilState) GetDepthRangeMax() Float {
	return self.Runtime.RDPipelineDepthStencilState_get_depth_range_max(RDPipelineDepthStencilState{self})
}
func (self methodsRDPipelineDepthStencilState) SetEnableStencil(p_member bool) {
	self.Runtime.RDPipelineDepthStencilState_set_enable_stencil(RDPipelineDepthStencilState{self}, p_member)
}
func (self methodsRDPipelineDepthStencilState) GetEnableStencil() bool {
	return self.Runtime.RDPipelineDepthStencilState_get_enable_stencil(RDPipelineDepthStencilState{self})
}
func (self methodsRDPipelineDepthStencilState) SetFrontOpFail(p_member RenderingDeviceStencilOperation) {
	self.Runtime.RDPipelineDepthStencilState_set_front_op_fail(RDPipelineDepthStencilState{self}, p_member)
}
func (self methodsRDPipelineDepthStencilState) GetFrontOpFail() RenderingDeviceStencilOperation {
	return self.Runtime.RDPipelineDepthStencilState_get_front_op_fail(RDPipelineDepthStencilState{self})
}
func (self methodsRDPipelineDepthStencilState) SetFrontOpPass(p_member RenderingDeviceStencilOperation) {
	self.Runtime.RDPipelineDepthStencilState_set_front_op_pass(RDPipelineDepthStencilState{self}, p_member)
}
func (self methodsRDPipelineDepthStencilState) GetFrontOpPass() RenderingDeviceStencilOperation {
	return self.Runtime.RDPipelineDepthStencilState_get_front_op_pass(RDPipelineDepthStencilState{self})
}
func (self methodsRDPipelineDepthStencilState) SetFrontOpDepthFail(p_member RenderingDeviceStencilOperation) {
	self.Runtime.RDPipelineDepthStencilState_set_front_op_depth_fail(RDPipelineDepthStencilState{self}, p_member)
}
func (self methodsRDPipelineDepthStencilState) GetFrontOpDepthFail() RenderingDeviceStencilOperation {
	return self.Runtime.RDPipelineDepthStencilState_get_front_op_depth_fail(RDPipelineDepthStencilState{self})
}
func (self methodsRDPipelineDepthStencilState) SetFrontOpCompare(p_member RenderingDeviceCompareOperator) {
	self.Runtime.RDPipelineDepthStencilState_set_front_op_compare(RDPipelineDepthStencilState{self}, p_member)
}
func (self methodsRDPipelineDepthStencilState) GetFrontOpCompare() RenderingDeviceCompareOperator {
	return self.Runtime.RDPipelineDepthStencilState_get_front_op_compare(RDPipelineDepthStencilState{self})
}
func (self methodsRDPipelineDepthStencilState) SetFrontOpCompareMask(p_member int64) {
	self.Runtime.RDPipelineDepthStencilState_set_front_op_compare_mask(RDPipelineDepthStencilState{self}, p_member)
}
func (self methodsRDPipelineDepthStencilState) GetFrontOpCompareMask() int64 {
	return self.Runtime.RDPipelineDepthStencilState_get_front_op_compare_mask(RDPipelineDepthStencilState{self})
}
func (self methodsRDPipelineDepthStencilState) SetFrontOpWriteMask(p_member int64) {
	self.Runtime.RDPipelineDepthStencilState_set_front_op_write_mask(RDPipelineDepthStencilState{self}, p_member)
}
func (self methodsRDPipelineDepthStencilState) GetFrontOpWriteMask() int64 {
	return self.Runtime.RDPipelineDepthStencilState_get_front_op_write_mask(RDPipelineDepthStencilState{self})
}
func (self methodsRDPipelineDepthStencilState) SetFrontOpReference(p_member int64) {
	self.Runtime.RDPipelineDepthStencilState_set_front_op_reference(RDPipelineDepthStencilState{self}, p_member)
}
func (self methodsRDPipelineDepthStencilState) GetFrontOpReference() int64 {
	return self.Runtime.RDPipelineDepthStencilState_get_front_op_reference(RDPipelineDepthStencilState{self})
}
func (self methodsRDPipelineDepthStencilState) SetBackOpFail(p_member RenderingDeviceStencilOperation) {
	self.Runtime.RDPipelineDepthStencilState_set_back_op_fail(RDPipelineDepthStencilState{self}, p_member)
}
func (self methodsRDPipelineDepthStencilState) GetBackOpFail() RenderingDeviceStencilOperation {
	return self.Runtime.RDPipelineDepthStencilState_get_back_op_fail(RDPipelineDepthStencilState{self})
}
func (self methodsRDPipelineDepthStencilState) SetBackOpPass(p_member RenderingDeviceStencilOperation) {
	self.Runtime.RDPipelineDepthStencilState_set_back_op_pass(RDPipelineDepthStencilState{self}, p_member)
}
func (self methodsRDPipelineDepthStencilState) GetBackOpPass() RenderingDeviceStencilOperation {
	return self.Runtime.RDPipelineDepthStencilState_get_back_op_pass(RDPipelineDepthStencilState{self})
}
func (self methodsRDPipelineDepthStencilState) SetBackOpDepthFail(p_member RenderingDeviceStencilOperation) {
	self.Runtime.RDPipelineDepthStencilState_set_back_op_depth_fail(RDPipelineDepthStencilState{self}, p_member)
}
func (self methodsRDPipelineDepthStencilState) GetBackOpDepthFail() RenderingDeviceStencilOperation {
	return self.Runtime.RDPipelineDepthStencilState_get_back_op_depth_fail(RDPipelineDepthStencilState{self})
}
func (self methodsRDPipelineDepthStencilState) SetBackOpCompare(p_member RenderingDeviceCompareOperator) {
	self.Runtime.RDPipelineDepthStencilState_set_back_op_compare(RDPipelineDepthStencilState{self}, p_member)
}
func (self methodsRDPipelineDepthStencilState) GetBackOpCompare() RenderingDeviceCompareOperator {
	return self.Runtime.RDPipelineDepthStencilState_get_back_op_compare(RDPipelineDepthStencilState{self})
}
func (self methodsRDPipelineDepthStencilState) SetBackOpCompareMask(p_member int64) {
	self.Runtime.RDPipelineDepthStencilState_set_back_op_compare_mask(RDPipelineDepthStencilState{self}, p_member)
}
func (self methodsRDPipelineDepthStencilState) GetBackOpCompareMask() int64 {
	return self.Runtime.RDPipelineDepthStencilState_get_back_op_compare_mask(RDPipelineDepthStencilState{self})
}
func (self methodsRDPipelineDepthStencilState) SetBackOpWriteMask(p_member int64) {
	self.Runtime.RDPipelineDepthStencilState_set_back_op_write_mask(RDPipelineDepthStencilState{self}, p_member)
}
func (self methodsRDPipelineDepthStencilState) GetBackOpWriteMask() int64 {
	return self.Runtime.RDPipelineDepthStencilState_get_back_op_write_mask(RDPipelineDepthStencilState{self})
}
func (self methodsRDPipelineDepthStencilState) SetBackOpReference(p_member int64) {
	self.Runtime.RDPipelineDepthStencilState_set_back_op_reference(RDPipelineDepthStencilState{self}, p_member)
}
func (self methodsRDPipelineDepthStencilState) GetBackOpReference() int64 {
	return self.Runtime.RDPipelineDepthStencilState_get_back_op_reference(RDPipelineDepthStencilState{self})
}

type methodsRDPipelineMultisampleState struct {
	_ [0]*methodsRDPipelineMultisampleState
	class
}

func (self RDPipelineMultisampleState) RefCounted() RefCounted {
	var parent RefCounted
	parent.class = self.class
	return parent
}
func (self methodsRDPipelineMultisampleState) SetSampleCount(p_member RenderingDeviceTextureSamples) {
	self.Runtime.RDPipelineMultisampleState_set_sample_count(RDPipelineMultisampleState{self}, p_member)
}
func (self methodsRDPipelineMultisampleState) GetSampleCount() RenderingDeviceTextureSamples {
	return self.Runtime.RDPipelineMultisampleState_get_sample_count(RDPipelineMultisampleState{self})
}
func (self methodsRDPipelineMultisampleState) SetEnableSampleShading(p_member bool) {
	self.Runtime.RDPipelineMultisampleState_set_enable_sample_shading(RDPipelineMultisampleState{self}, p_member)
}
func (self methodsRDPipelineMultisampleState) GetEnableSampleShading() bool {
	return self.Runtime.RDPipelineMultisampleState_get_enable_sample_shading(RDPipelineMultisampleState{self})
}
func (self methodsRDPipelineMultisampleState) SetMinSampleShading(p_member Float) {
	self.Runtime.RDPipelineMultisampleState_set_min_sample_shading(RDPipelineMultisampleState{self}, p_member)
}
func (self methodsRDPipelineMultisampleState) GetMinSampleShading() Float {
	return self.Runtime.RDPipelineMultisampleState_get_min_sample_shading(RDPipelineMultisampleState{self})
}
func (self methodsRDPipelineMultisampleState) SetEnableAlphaToCoverage(p_member bool) {
	self.Runtime.RDPipelineMultisampleState_set_enable_alpha_to_coverage(RDPipelineMultisampleState{self}, p_member)
}
func (self methodsRDPipelineMultisampleState) GetEnableAlphaToCoverage() bool {
	return self.Runtime.RDPipelineMultisampleState_get_enable_alpha_to_coverage(RDPipelineMultisampleState{self})
}
func (self methodsRDPipelineMultisampleState) SetEnableAlphaToOne(p_member bool) {
	self.Runtime.RDPipelineMultisampleState_set_enable_alpha_to_one(RDPipelineMultisampleState{self}, p_member)
}
func (self methodsRDPipelineMultisampleState) GetEnableAlphaToOne() bool {
	return self.Runtime.RDPipelineMultisampleState_get_enable_alpha_to_one(RDPipelineMultisampleState{self})
}
func (self methodsRDPipelineMultisampleState) SetSampleMasks(masks ArrayOf[int64]) {
	self.Runtime.RDPipelineMultisampleState_set_sample_masks(RDPipelineMultisampleState{self}, masks)
}
func (self methodsRDPipelineMultisampleState) GetSampleMasks() ArrayOf[int64] {
	return self.Runtime.RDPipelineMultisampleState_get_sample_masks(RDPipelineMultisampleState{self})
}

type methodsRDPipelineRasterizationState struct {
	_ [0]*methodsRDPipelineRasterizationState
	class
}

func (self RDPipelineRasterizationState) RefCounted() RefCounted {
	var parent RefCounted
	parent.class = self.class
	return parent
}
func (self methodsRDPipelineRasterizationState) SetEnableDepthClamp(p_member bool) {
	self.Runtime.RDPipelineRasterizationState_set_enable_depth_clamp(RDPipelineRasterizationState{self}, p_member)
}
func (self methodsRDPipelineRasterizationState) GetEnableDepthClamp() bool {
	return self.Runtime.RDPipelineRasterizationState_get_enable_depth_clamp(RDPipelineRasterizationState{self})
}
func (self methodsRDPipelineRasterizationState) SetDiscardPrimitives(p_member bool) {
	self.Runtime.RDPipelineRasterizationState_set_discard_primitives(RDPipelineRasterizationState{self}, p_member)
}
func (self methodsRDPipelineRasterizationState) GetDiscardPrimitives() bool {
	return self.Runtime.RDPipelineRasterizationState_get_discard_primitives(RDPipelineRasterizationState{self})
}
func (self methodsRDPipelineRasterizationState) SetWireframe(p_member bool) {
	self.Runtime.RDPipelineRasterizationState_set_wireframe(RDPipelineRasterizationState{self}, p_member)
}
func (self methodsRDPipelineRasterizationState) GetWireframe() bool {
	return self.Runtime.RDPipelineRasterizationState_get_wireframe(RDPipelineRasterizationState{self})
}
func (self methodsRDPipelineRasterizationState) SetCullMode(p_member RenderingDevicePolygonCullMode) {
	self.Runtime.RDPipelineRasterizationState_set_cull_mode(RDPipelineRasterizationState{self}, p_member)
}
func (self methodsRDPipelineRasterizationState) GetCullMode() RenderingDevicePolygonCullMode {
	return self.Runtime.RDPipelineRasterizationState_get_cull_mode(RDPipelineRasterizationState{self})
}
func (self methodsRDPipelineRasterizationState) SetFrontFace(p_member RenderingDevicePolygonFrontFace) {
	self.Runtime.RDPipelineRasterizationState_set_front_face(RDPipelineRasterizationState{self}, p_member)
}
func (self methodsRDPipelineRasterizationState) GetFrontFace() RenderingDevicePolygonFrontFace {
	return self.Runtime.RDPipelineRasterizationState_get_front_face(RDPipelineRasterizationState{self})
}
func (self methodsRDPipelineRasterizationState) SetDepthBiasEnabled(p_member bool) {
	self.Runtime.RDPipelineRasterizationState_set_depth_bias_enabled(RDPipelineRasterizationState{self}, p_member)
}
func (self methodsRDPipelineRasterizationState) GetDepthBiasEnabled() bool {
	return self.Runtime.RDPipelineRasterizationState_get_depth_bias_enabled(RDPipelineRasterizationState{self})
}
func (self methodsRDPipelineRasterizationState) SetDepthBiasConstantFactor(p_member Float) {
	self.Runtime.RDPipelineRasterizationState_set_depth_bias_constant_factor(RDPipelineRasterizationState{self}, p_member)
}
func (self methodsRDPipelineRasterizationState) GetDepthBiasConstantFactor() Float {
	return self.Runtime.RDPipelineRasterizationState_get_depth_bias_constant_factor(RDPipelineRasterizationState{self})
}
func (self methodsRDPipelineRasterizationState) SetDepthBiasClamp(p_member Float) {
	self.Runtime.RDPipelineRasterizationState_set_depth_bias_clamp(RDPipelineRasterizationState{self}, p_member)
}
func (self methodsRDPipelineRasterizationState) GetDepthBiasClamp() Float {
	return self.Runtime.RDPipelineRasterizationState_get_depth_bias_clamp(RDPipelineRasterizationState{self})
}
func (self methodsRDPipelineRasterizationState) SetDepthBiasSlopeFactor(p_member Float) {
	self.Runtime.RDPipelineRasterizationState_set_depth_bias_slope_factor(RDPipelineRasterizationState{self}, p_member)
}
func (self methodsRDPipelineRasterizationState) GetDepthBiasSlopeFactor() Float {
	return self.Runtime.RDPipelineRasterizationState_get_depth_bias_slope_factor(RDPipelineRasterizationState{self})
}
func (self methodsRDPipelineRasterizationState) SetLineWidth(p_member Float) {
	self.Runtime.RDPipelineRasterizationState_set_line_width(RDPipelineRasterizationState{self}, p_member)
}
func (self methodsRDPipelineRasterizationState) GetLineWidth() Float {
	return self.Runtime.RDPipelineRasterizationState_get_line_width(RDPipelineRasterizationState{self})
}
func (self methodsRDPipelineRasterizationState) SetPatchControlPoints(p_member int64) {
	self.Runtime.RDPipelineRasterizationState_set_patch_control_points(RDPipelineRasterizationState{self}, p_member)
}
func (self methodsRDPipelineRasterizationState) GetPatchControlPoints() int64 {
	return self.Runtime.RDPipelineRasterizationState_get_patch_control_points(RDPipelineRasterizationState{self})
}

type methodsRDPipelineSpecializationConstant struct {
	_ [0]*methodsRDPipelineSpecializationConstant
	class
}

func (self RDPipelineSpecializationConstant) RefCounted() RefCounted {
	var parent RefCounted
	parent.class = self.class
	return parent
}
func (self methodsRDPipelineSpecializationConstant) SetValue(value any) {
	self.Runtime.RDPipelineSpecializationConstant_set_value(RDPipelineSpecializationConstant{self}, value)
}
func (self methodsRDPipelineSpecializationConstant) GetValue() any {
	return self.Runtime.RDPipelineSpecializationConstant_get_value(RDPipelineSpecializationConstant{self})
}
func (self methodsRDPipelineSpecializationConstant) SetConstantId(constant_id int64) {
	self.Runtime.RDPipelineSpecializationConstant_set_constant_id(RDPipelineSpecializationConstant{self}, constant_id)
}
func (self methodsRDPipelineSpecializationConstant) GetConstantId() int64 {
	return self.Runtime.RDPipelineSpecializationConstant_get_constant_id(RDPipelineSpecializationConstant{self})
}

type methodsRDSamplerState struct {
	_ [0]*methodsRDSamplerState
	class
}

func (self RDSamplerState) RefCounted() RefCounted {
	var parent RefCounted
	parent.class = self.class
	return parent
}
func (self methodsRDSamplerState) SetMagFilter(p_member RenderingDeviceSamplerFilter) {
	self.Runtime.RDSamplerState_set_mag_filter(RDSamplerState{self}, p_member)
}
func (self methodsRDSamplerState) GetMagFilter() RenderingDeviceSamplerFilter {
	return self.Runtime.RDSamplerState_get_mag_filter(RDSamplerState{self})
}
func (self methodsRDSamplerState) SetMinFilter(p_member RenderingDeviceSamplerFilter) {
	self.Runtime.RDSamplerState_set_min_filter(RDSamplerState{self}, p_member)
}
func (self methodsRDSamplerState) GetMinFilter() RenderingDeviceSamplerFilter {
	return self.Runtime.RDSamplerState_get_min_filter(RDSamplerState{self})
}
func (self methodsRDSamplerState) SetMipFilter(p_member RenderingDeviceSamplerFilter) {
	self.Runtime.RDSamplerState_set_mip_filter(RDSamplerState{self}, p_member)
}
func (self methodsRDSamplerState) GetMipFilter() RenderingDeviceSamplerFilter {
	return self.Runtime.RDSamplerState_get_mip_filter(RDSamplerState{self})
}
func (self methodsRDSamplerState) SetRepeatU(p_member RenderingDeviceSamplerRepeatMode) {
	self.Runtime.RDSamplerState_set_repeat_u(RDSamplerState{self}, p_member)
}
func (self methodsRDSamplerState) GetRepeatU() RenderingDeviceSamplerRepeatMode {
	return self.Runtime.RDSamplerState_get_repeat_u(RDSamplerState{self})
}
func (self methodsRDSamplerState) SetRepeatV(p_member RenderingDeviceSamplerRepeatMode) {
	self.Runtime.RDSamplerState_set_repeat_v(RDSamplerState{self}, p_member)
}
func (self methodsRDSamplerState) GetRepeatV() RenderingDeviceSamplerRepeatMode {
	return self.Runtime.RDSamplerState_get_repeat_v(RDSamplerState{self})
}
func (self methodsRDSamplerState) SetRepeatW(p_member RenderingDeviceSamplerRepeatMode) {
	self.Runtime.RDSamplerState_set_repeat_w(RDSamplerState{self}, p_member)
}
func (self methodsRDSamplerState) GetRepeatW() RenderingDeviceSamplerRepeatMode {
	return self.Runtime.RDSamplerState_get_repeat_w(RDSamplerState{self})
}
func (self methodsRDSamplerState) SetLodBias(p_member Float) {
	self.Runtime.RDSamplerState_set_lod_bias(RDSamplerState{self}, p_member)
}
func (self methodsRDSamplerState) GetLodBias() Float {
	return self.Runtime.RDSamplerState_get_lod_bias(RDSamplerState{self})
}
func (self methodsRDSamplerState) SetUseAnisotropy(p_member bool) {
	self.Runtime.RDSamplerState_set_use_anisotropy(RDSamplerState{self}, p_member)
}
func (self methodsRDSamplerState) GetUseAnisotropy() bool {
	return self.Runtime.RDSamplerState_get_use_anisotropy(RDSamplerState{self})
}
func (self methodsRDSamplerState) SetAnisotropyMax(p_member Float) {
	self.Runtime.RDSamplerState_set_anisotropy_max(RDSamplerState{self}, p_member)
}
func (self methodsRDSamplerState) GetAnisotropyMax() Float {
	return self.Runtime.RDSamplerState_get_anisotropy_max(RDSamplerState{self})
}
func (self methodsRDSamplerState) SetEnableCompare(p_member bool) {
	self.Runtime.RDSamplerState_set_enable_compare(RDSamplerState{self}, p_member)
}
func (self methodsRDSamplerState) GetEnableCompare() bool {
	return self.Runtime.RDSamplerState_get_enable_compare(RDSamplerState{self})
}
func (self methodsRDSamplerState) SetCompareOp(p_member RenderingDeviceCompareOperator) {
	self.Runtime.RDSamplerState_set_compare_op(RDSamplerState{self}, p_member)
}
func (self methodsRDSamplerState) GetCompareOp() RenderingDeviceCompareOperator {
	return self.Runtime.RDSamplerState_get_compare_op(RDSamplerState{self})
}
func (self methodsRDSamplerState) SetMinLod(p_member Float) {
	self.Runtime.RDSamplerState_set_min_lod(RDSamplerState{self}, p_member)
}
func (self methodsRDSamplerState) GetMinLod() Float {
	return self.Runtime.RDSamplerState_get_min_lod(RDSamplerState{self})
}
func (self methodsRDSamplerState) SetMaxLod(p_member Float) {
	self.Runtime.RDSamplerState_set_max_lod(RDSamplerState{self}, p_member)
}
func (self methodsRDSamplerState) GetMaxLod() Float {
	return self.Runtime.RDSamplerState_get_max_lod(RDSamplerState{self})
}
func (self methodsRDSamplerState) SetBorderColor(p_member RenderingDeviceSamplerBorderColor) {
	self.Runtime.RDSamplerState_set_border_color(RDSamplerState{self}, p_member)
}
func (self methodsRDSamplerState) GetBorderColor() RenderingDeviceSamplerBorderColor {
	return self.Runtime.RDSamplerState_get_border_color(RDSamplerState{self})
}
func (self methodsRDSamplerState) SetUnnormalizedUvw(p_member bool) {
	self.Runtime.RDSamplerState_set_unnormalized_uvw(RDSamplerState{self}, p_member)
}
func (self methodsRDSamplerState) GetUnnormalizedUvw() bool {
	return self.Runtime.RDSamplerState_get_unnormalized_uvw(RDSamplerState{self})
}

type methodsRDShaderFile struct {
	_ [0]*methodsRDShaderFile
	class
}

func (self RDShaderFile) Resource() Resource {
	var parent Resource
	parent.class = self.class
	return parent
}
func (self methodsRDShaderFile) SetBytecode(bytecode RDShaderSPIRV, version string) {
	self.Runtime.RDShaderFile_set_bytecode(RDShaderFile{self}, bytecode, version)
}
func (self methodsRDShaderFile) GetSpirv(version string) RDShaderSPIRV {
	return self.Runtime.RDShaderFile_get_spirv(RDShaderFile{self}, version)
}
func (self methodsRDShaderFile) GetVersionList() ArrayOf[string] {
	return self.Runtime.RDShaderFile_get_version_list(RDShaderFile{self})
}
func (self methodsRDShaderFile) SetBaseError(error string) {
	self.Runtime.RDShaderFile_set_base_error(RDShaderFile{self}, error)
}
func (self methodsRDShaderFile) GetBaseError() string {
	return self.Runtime.RDShaderFile_get_base_error(RDShaderFile{self})
}

type methodsRDShaderSPIRV struct {
	_ [0]*methodsRDShaderSPIRV
	class
}

func (self RDShaderSPIRV) Resource() Resource {
	var parent Resource
	parent.class = self.class
	return parent
}
func (self methodsRDShaderSPIRV) SetStageBytecode(stage RenderingDeviceShaderStage, bytecode PackedByteArray) {
	self.Runtime.RDShaderSPIRV_set_stage_bytecode(RDShaderSPIRV{self}, stage, bytecode)
}
func (self methodsRDShaderSPIRV) GetStageBytecode(stage RenderingDeviceShaderStage) PackedByteArray {
	return self.Runtime.RDShaderSPIRV_get_stage_bytecode(RDShaderSPIRV{self}, stage)
}
func (self methodsRDShaderSPIRV) SetStageCompileError(stage RenderingDeviceShaderStage, compile_error string) {
	self.Runtime.RDShaderSPIRV_set_stage_compile_error(RDShaderSPIRV{self}, stage, compile_error)
}
func (self methodsRDShaderSPIRV) GetStageCompileError(stage RenderingDeviceShaderStage) string {
	return self.Runtime.RDShaderSPIRV_get_stage_compile_error(RDShaderSPIRV{self}, stage)
}

type methodsRDShaderSource struct {
	_ [0]*methodsRDShaderSource
	class
}

func (self RDShaderSource) RefCounted() RefCounted {
	var parent RefCounted
	parent.class = self.class
	return parent
}
func (self methodsRDShaderSource) SetStageSource(stage RenderingDeviceShaderStage, source string) {
	self.Runtime.RDShaderSource_set_stage_source(RDShaderSource{self}, stage, source)
}
func (self methodsRDShaderSource) GetStageSource(stage RenderingDeviceShaderStage) string {
	return self.Runtime.RDShaderSource_get_stage_source(RDShaderSource{self}, stage)
}
func (self methodsRDShaderSource) SetLanguage(language RenderingDeviceShaderLanguage) {
	self.Runtime.RDShaderSource_set_language(RDShaderSource{self}, language)
}
func (self methodsRDShaderSource) GetLanguage() RenderingDeviceShaderLanguage {
	return self.Runtime.RDShaderSource_get_language(RDShaderSource{self})
}

type methodsRDTextureFormat struct {
	_ [0]*methodsRDTextureFormat
	class
}

func (self RDTextureFormat) RefCounted() RefCounted {
	var parent RefCounted
	parent.class = self.class
	return parent
}
func (self methodsRDTextureFormat) SetFormat(p_member RenderingDeviceDataFormat) {
	self.Runtime.RDTextureFormat_set_format(RDTextureFormat{self}, p_member)
}
func (self methodsRDTextureFormat) GetFormat() RenderingDeviceDataFormat {
	return self.Runtime.RDTextureFormat_get_format(RDTextureFormat{self})
}
func (self methodsRDTextureFormat) SetWidth(p_member int64) {
	self.Runtime.RDTextureFormat_set_width(RDTextureFormat{self}, p_member)
}
func (self methodsRDTextureFormat) GetWidth() int64 {
	return self.Runtime.RDTextureFormat_get_width(RDTextureFormat{self})
}
func (self methodsRDTextureFormat) SetHeight(p_member int64) {
	self.Runtime.RDTextureFormat_set_height(RDTextureFormat{self}, p_member)
}
func (self methodsRDTextureFormat) GetHeight() int64 {
	return self.Runtime.RDTextureFormat_get_height(RDTextureFormat{self})
}
func (self methodsRDTextureFormat) SetDepth(p_member int64) {
	self.Runtime.RDTextureFormat_set_depth(RDTextureFormat{self}, p_member)
}
func (self methodsRDTextureFormat) GetDepth() int64 {
	return self.Runtime.RDTextureFormat_get_depth(RDTextureFormat{self})
}
func (self methodsRDTextureFormat) SetArrayLayers(p_member int64) {
	self.Runtime.RDTextureFormat_set_array_layers(RDTextureFormat{self}, p_member)
}
func (self methodsRDTextureFormat) GetArrayLayers() int64 {
	return self.Runtime.RDTextureFormat_get_array_layers(RDTextureFormat{self})
}
func (self methodsRDTextureFormat) SetMipmaps(p_member int64) {
	self.Runtime.RDTextureFormat_set_mipmaps(RDTextureFormat{self}, p_member)
}
func (self methodsRDTextureFormat) GetMipmaps() int64 {
	return self.Runtime.RDTextureFormat_get_mipmaps(RDTextureFormat{self})
}
func (self methodsRDTextureFormat) SetTextureType(p_member RenderingDeviceTextureType) {
	self.Runtime.RDTextureFormat_set_texture_type(RDTextureFormat{self}, p_member)
}
func (self methodsRDTextureFormat) GetTextureType() RenderingDeviceTextureType {
	return self.Runtime.RDTextureFormat_get_texture_type(RDTextureFormat{self})
}
func (self methodsRDTextureFormat) SetSamples(p_member RenderingDeviceTextureSamples) {
	self.Runtime.RDTextureFormat_set_samples(RDTextureFormat{self}, p_member)
}
func (self methodsRDTextureFormat) GetSamples() RenderingDeviceTextureSamples {
	return self.Runtime.RDTextureFormat_get_samples(RDTextureFormat{self})
}
func (self methodsRDTextureFormat) SetUsageBits(p_member RenderingDeviceTextureUsageBits) {
	self.Runtime.RDTextureFormat_set_usage_bits(RDTextureFormat{self}, p_member)
}
func (self methodsRDTextureFormat) GetUsageBits() RenderingDeviceTextureUsageBits {
	return self.Runtime.RDTextureFormat_get_usage_bits(RDTextureFormat{self})
}
func (self methodsRDTextureFormat) AddShareableFormat(format RenderingDeviceDataFormat) {
	self.Runtime.RDTextureFormat_add_shareable_format(RDTextureFormat{self}, format)
}
func (self methodsRDTextureFormat) RemoveShareableFormat(format RenderingDeviceDataFormat) {
	self.Runtime.RDTextureFormat_remove_shareable_format(RDTextureFormat{self}, format)
}

type methodsRDTextureView struct {
	_ [0]*methodsRDTextureView
	class
}

func (self RDTextureView) RefCounted() RefCounted {
	var parent RefCounted
	parent.class = self.class
	return parent
}
func (self methodsRDTextureView) SetFormatOverride(p_member RenderingDeviceDataFormat) {
	self.Runtime.RDTextureView_set_format_override(RDTextureView{self}, p_member)
}
func (self methodsRDTextureView) GetFormatOverride() RenderingDeviceDataFormat {
	return self.Runtime.RDTextureView_get_format_override(RDTextureView{self})
}
func (self methodsRDTextureView) SetSwizzleR(p_member RenderingDeviceTextureSwizzle) {
	self.Runtime.RDTextureView_set_swizzle_r(RDTextureView{self}, p_member)
}
func (self methodsRDTextureView) GetSwizzleR() RenderingDeviceTextureSwizzle {
	return self.Runtime.RDTextureView_get_swizzle_r(RDTextureView{self})
}
func (self methodsRDTextureView) SetSwizzleG(p_member RenderingDeviceTextureSwizzle) {
	self.Runtime.RDTextureView_set_swizzle_g(RDTextureView{self}, p_member)
}
func (self methodsRDTextureView) GetSwizzleG() RenderingDeviceTextureSwizzle {
	return self.Runtime.RDTextureView_get_swizzle_g(RDTextureView{self})
}
func (self methodsRDTextureView) SetSwizzleB(p_member RenderingDeviceTextureSwizzle) {
	self.Runtime.RDTextureView_set_swizzle_b(RDTextureView{self}, p_member)
}
func (self methodsRDTextureView) GetSwizzleB() RenderingDeviceTextureSwizzle {
	return self.Runtime.RDTextureView_get_swizzle_b(RDTextureView{self})
}
func (self methodsRDTextureView) SetSwizzleA(p_member RenderingDeviceTextureSwizzle) {
	self.Runtime.RDTextureView_set_swizzle_a(RDTextureView{self}, p_member)
}
func (self methodsRDTextureView) GetSwizzleA() RenderingDeviceTextureSwizzle {
	return self.Runtime.RDTextureView_get_swizzle_a(RDTextureView{self})
}

type methodsRDUniform struct {
	_ [0]*methodsRDUniform
	class
}

func (self RDUniform) RefCounted() RefCounted {
	var parent RefCounted
	parent.class = self.class
	return parent
}
func (self methodsRDUniform) SetUniformType(p_member RenderingDeviceUniformType) {
	self.Runtime.RDUniform_set_uniform_type(RDUniform{self}, p_member)
}
func (self methodsRDUniform) GetUniformType() RenderingDeviceUniformType {
	return self.Runtime.RDUniform_get_uniform_type(RDUniform{self})
}
func (self methodsRDUniform) SetBinding(p_member int64) {
	self.Runtime.RDUniform_set_binding(RDUniform{self}, p_member)
}
func (self methodsRDUniform) GetBinding() int64 {
	return self.Runtime.RDUniform_get_binding(RDUniform{self})
}
func (self methodsRDUniform) AddId(id RID) {
	self.Runtime.RDUniform_add_id(RDUniform{self}, id)
}
func (self methodsRDUniform) ClearIds() {
	self.Runtime.RDUniform_clear_ids(RDUniform{self})
}
func (self methodsRDUniform) GetIds() ArrayOf[RID] {
	return self.Runtime.RDUniform_get_ids(RDUniform{self})
}

type methodsRDVertexAttribute struct {
	_ [0]*methodsRDVertexAttribute
	class
}

func (self RDVertexAttribute) RefCounted() RefCounted {
	var parent RefCounted
	parent.class = self.class
	return parent
}
func (self methodsRDVertexAttribute) SetLocation(p_member int64) {
	self.Runtime.RDVertexAttribute_set_location(RDVertexAttribute{self}, p_member)
}
func (self methodsRDVertexAttribute) GetLocation() int64 {
	return self.Runtime.RDVertexAttribute_get_location(RDVertexAttribute{self})
}
func (self methodsRDVertexAttribute) SetOffset(p_member int64) {
	self.Runtime.RDVertexAttribute_set_offset(RDVertexAttribute{self}, p_member)
}
func (self methodsRDVertexAttribute) GetOffset() int64 {
	return self.Runtime.RDVertexAttribute_get_offset(RDVertexAttribute{self})
}
func (self methodsRDVertexAttribute) SetFormat(p_member RenderingDeviceDataFormat) {
	self.Runtime.RDVertexAttribute_set_format(RDVertexAttribute{self}, p_member)
}
func (self methodsRDVertexAttribute) GetFormat() RenderingDeviceDataFormat {
	return self.Runtime.RDVertexAttribute_get_format(RDVertexAttribute{self})
}
func (self methodsRDVertexAttribute) SetStride(p_member int64) {
	self.Runtime.RDVertexAttribute_set_stride(RDVertexAttribute{self}, p_member)
}
func (self methodsRDVertexAttribute) GetStride() int64 {
	return self.Runtime.RDVertexAttribute_get_stride(RDVertexAttribute{self})
}
func (self methodsRDVertexAttribute) SetFrequency(p_member RenderingDeviceVertexFrequency) {
	self.Runtime.RDVertexAttribute_set_frequency(RDVertexAttribute{self}, p_member)
}
func (self methodsRDVertexAttribute) GetFrequency() RenderingDeviceVertexFrequency {
	return self.Runtime.RDVertexAttribute_get_frequency(RDVertexAttribute{self})
}

type methodsRandomNumberGenerator struct {
	_ [0]*methodsRandomNumberGenerator
	class
}

func (self RandomNumberGenerator) RefCounted() RefCounted {
	var parent RefCounted
	parent.class = self.class
	return parent
}
func (self methodsRandomNumberGenerator) SetSeed(seed int64) {
	self.Runtime.RandomNumberGenerator_set_seed(RandomNumberGenerator{self}, seed)
}
func (self methodsRandomNumberGenerator) GetSeed() int64 {
	return self.Runtime.RandomNumberGenerator_get_seed(RandomNumberGenerator{self})
}
func (self methodsRandomNumberGenerator) SetState(state int64) {
	self.Runtime.RandomNumberGenerator_set_state(RandomNumberGenerator{self}, state)
}
func (self methodsRandomNumberGenerator) GetState() int64 {
	return self.Runtime.RandomNumberGenerator_get_state(RandomNumberGenerator{self})
}
func (self methodsRandomNumberGenerator) Randi() int64 {
	return self.Runtime.RandomNumberGenerator_randi(RandomNumberGenerator{self})
}
func (self methodsRandomNumberGenerator) Randf() Float {
	return self.Runtime.RandomNumberGenerator_randf(RandomNumberGenerator{self})
}
func (self methodsRandomNumberGenerator) Randfn(mean Float, deviation Float) Float {
	return self.Runtime.RandomNumberGenerator_randfn(RandomNumberGenerator{self}, mean, deviation)
}
func (self methodsRandomNumberGenerator) RandfRange(from Float, to Float) Float {
	return self.Runtime.RandomNumberGenerator_randf_range(RandomNumberGenerator{self}, from, to)
}
func (self methodsRandomNumberGenerator) RandiRange(from int64, to int64) int64 {
	return self.Runtime.RandomNumberGenerator_randi_range(RandomNumberGenerator{self}, from, to)
}
func (self methodsRandomNumberGenerator) Randomize() {
	self.Runtime.RandomNumberGenerator_randomize(RandomNumberGenerator{self})
}

type methodsRange struct {
	_ [0]*methodsRange
	class
}

func (self Range) Control() Control { var parent Control; parent.class = self.class; return parent }
func (self methodsRange) GetValue() Float {
	return self.Runtime.Range_get_value(Range{self})
}
func (self methodsRange) GetMin() Float {
	return self.Runtime.Range_get_min(Range{self})
}
func (self methodsRange) GetMax() Float {
	return self.Runtime.Range_get_max(Range{self})
}
func (self methodsRange) GetStep() Float {
	return self.Runtime.Range_get_step(Range{self})
}
func (self methodsRange) GetPage() Float {
	return self.Runtime.Range_get_page(Range{self})
}
func (self methodsRange) GetAsRatio() Float {
	return self.Runtime.Range_get_as_ratio(Range{self})
}
func (self methodsRange) SetValue(value Float) {
	self.Runtime.Range_set_value(Range{self}, value)
}
func (self methodsRange) SetValueNoSignal(value Float) {
	self.Runtime.Range_set_value_no_signal(Range{self}, value)
}
func (self methodsRange) SetMin(minimum Float) {
	self.Runtime.Range_set_min(Range{self}, minimum)
}
func (self methodsRange) SetMax(maximum Float) {
	self.Runtime.Range_set_max(Range{self}, maximum)
}
func (self methodsRange) SetStep(step Float) {
	self.Runtime.Range_set_step(Range{self}, step)
}
func (self methodsRange) SetPage(pagesize Float) {
	self.Runtime.Range_set_page(Range{self}, pagesize)
}
func (self methodsRange) SetAsRatio(value Float) {
	self.Runtime.Range_set_as_ratio(Range{self}, value)
}
func (self methodsRange) SetUseRoundedValues(enabled bool) {
	self.Runtime.Range_set_use_rounded_values(Range{self}, enabled)
}
func (self methodsRange) IsUsingRoundedValues() bool {
	return self.Runtime.Range_is_using_rounded_values(Range{self})
}
func (self methodsRange) SetExpRatio(enabled bool) {
	self.Runtime.Range_set_exp_ratio(Range{self}, enabled)
}
func (self methodsRange) IsRatioExp() bool {
	return self.Runtime.Range_is_ratio_exp(Range{self})
}
func (self methodsRange) SetAllowGreater(allow bool) {
	self.Runtime.Range_set_allow_greater(Range{self}, allow)
}
func (self methodsRange) IsGreaterAllowed() bool {
	return self.Runtime.Range_is_greater_allowed(Range{self})
}
func (self methodsRange) SetAllowLesser(allow bool) {
	self.Runtime.Range_set_allow_lesser(Range{self}, allow)
}
func (self methodsRange) IsLesserAllowed() bool {
	return self.Runtime.Range_is_lesser_allowed(Range{self})
}
func (self methodsRange) Share(with Node) {
	self.Runtime.Range_share(Range{self}, with)
}
func (self methodsRange) Unshare() {
	self.Runtime.Range_unshare(Range{self})
}

type methodsRayCast2D struct {
	_ [0]*methodsRayCast2D
	class
}

func (self RayCast2D) Node2D() Node2D { var parent Node2D; parent.class = self.class; return parent }
func (self methodsRayCast2D) SetEnabled(enabled bool) {
	self.Runtime.RayCast2D_set_enabled(RayCast2D{self}, enabled)
}
func (self methodsRayCast2D) IsEnabled() bool {
	return self.Runtime.RayCast2D_is_enabled(RayCast2D{self})
}
func (self methodsRayCast2D) SetTargetPosition(local_point Vector2) {
	self.Runtime.RayCast2D_set_target_position(RayCast2D{self}, local_point)
}
func (self methodsRayCast2D) GetTargetPosition() Vector2 {
	return self.Runtime.RayCast2D_get_target_position(RayCast2D{self})
}
func (self methodsRayCast2D) IsColliding() bool {
	return self.Runtime.RayCast2D_is_colliding(RayCast2D{self})
}
func (self methodsRayCast2D) ForceRaycastUpdate() {
	self.Runtime.RayCast2D_force_raycast_update(RayCast2D{self})
}
func (self methodsRayCast2D) GetCollider() Object {
	return self.Runtime.RayCast2D_get_collider(RayCast2D{self})
}
func (self methodsRayCast2D) GetColliderRid() RID {
	return self.Runtime.RayCast2D_get_collider_rid(RayCast2D{self})
}
func (self methodsRayCast2D) GetColliderShape() int64 {
	return self.Runtime.RayCast2D_get_collider_shape(RayCast2D{self})
}
func (self methodsRayCast2D) GetCollisionPoint() Vector2 {
	return self.Runtime.RayCast2D_get_collision_point(RayCast2D{self})
}
func (self methodsRayCast2D) GetCollisionNormal() Vector2 {
	return self.Runtime.RayCast2D_get_collision_normal(RayCast2D{self})
}
func (self methodsRayCast2D) AddExceptionRid(rid RID) {
	self.Runtime.RayCast2D_add_exception_rid(RayCast2D{self}, rid)
}
func (self methodsRayCast2D) AddException(node CollisionObject2D) {
	self.Runtime.RayCast2D_add_exception(RayCast2D{self}, node)
}
func (self methodsRayCast2D) RemoveExceptionRid(rid RID) {
	self.Runtime.RayCast2D_remove_exception_rid(RayCast2D{self}, rid)
}
func (self methodsRayCast2D) RemoveException(node CollisionObject2D) {
	self.Runtime.RayCast2D_remove_exception(RayCast2D{self}, node)
}
func (self methodsRayCast2D) ClearExceptions() {
	self.Runtime.RayCast2D_clear_exceptions(RayCast2D{self})
}
func (self methodsRayCast2D) SetCollisionMask(mask int64) {
	self.Runtime.RayCast2D_set_collision_mask(RayCast2D{self}, mask)
}
func (self methodsRayCast2D) GetCollisionMask() int64 {
	return self.Runtime.RayCast2D_get_collision_mask(RayCast2D{self})
}
func (self methodsRayCast2D) SetCollisionMaskValue(layer_number int64, value bool) {
	self.Runtime.RayCast2D_set_collision_mask_value(RayCast2D{self}, layer_number, value)
}
func (self methodsRayCast2D) GetCollisionMaskValue(layer_number int64) bool {
	return self.Runtime.RayCast2D_get_collision_mask_value(RayCast2D{self}, layer_number)
}
func (self methodsRayCast2D) SetExcludeParentBody(mask bool) {
	self.Runtime.RayCast2D_set_exclude_parent_body(RayCast2D{self}, mask)
}
func (self methodsRayCast2D) GetExcludeParentBody() bool {
	return self.Runtime.RayCast2D_get_exclude_parent_body(RayCast2D{self})
}
func (self methodsRayCast2D) SetCollideWithAreas(enable bool) {
	self.Runtime.RayCast2D_set_collide_with_areas(RayCast2D{self}, enable)
}
func (self methodsRayCast2D) IsCollideWithAreasEnabled() bool {
	return self.Runtime.RayCast2D_is_collide_with_areas_enabled(RayCast2D{self})
}
func (self methodsRayCast2D) SetCollideWithBodies(enable bool) {
	self.Runtime.RayCast2D_set_collide_with_bodies(RayCast2D{self}, enable)
}
func (self methodsRayCast2D) IsCollideWithBodiesEnabled() bool {
	return self.Runtime.RayCast2D_is_collide_with_bodies_enabled(RayCast2D{self})
}
func (self methodsRayCast2D) SetHitFromInside(enable bool) {
	self.Runtime.RayCast2D_set_hit_from_inside(RayCast2D{self}, enable)
}
func (self methodsRayCast2D) IsHitFromInsideEnabled() bool {
	return self.Runtime.RayCast2D_is_hit_from_inside_enabled(RayCast2D{self})
}

type methodsRayCast3D struct {
	_ [0]*methodsRayCast3D
	class
}

func (self RayCast3D) Node3D() Node3D { var parent Node3D; parent.class = self.class; return parent }
func (self methodsRayCast3D) SetEnabled(enabled bool) {
	self.Runtime.RayCast3D_set_enabled(RayCast3D{self}, enabled)
}
func (self methodsRayCast3D) IsEnabled() bool {
	return self.Runtime.RayCast3D_is_enabled(RayCast3D{self})
}
func (self methodsRayCast3D) SetTargetPosition(local_point Vector3) {
	self.Runtime.RayCast3D_set_target_position(RayCast3D{self}, local_point)
}
func (self methodsRayCast3D) GetTargetPosition() Vector3 {
	return self.Runtime.RayCast3D_get_target_position(RayCast3D{self})
}
func (self methodsRayCast3D) IsColliding() bool {
	return self.Runtime.RayCast3D_is_colliding(RayCast3D{self})
}
func (self methodsRayCast3D) ForceRaycastUpdate() {
	self.Runtime.RayCast3D_force_raycast_update(RayCast3D{self})
}
func (self methodsRayCast3D) GetCollider() Object {
	return self.Runtime.RayCast3D_get_collider(RayCast3D{self})
}
func (self methodsRayCast3D) GetColliderRid() RID {
	return self.Runtime.RayCast3D_get_collider_rid(RayCast3D{self})
}
func (self methodsRayCast3D) GetColliderShape() int64 {
	return self.Runtime.RayCast3D_get_collider_shape(RayCast3D{self})
}
func (self methodsRayCast3D) GetCollisionPoint() Vector3 {
	return self.Runtime.RayCast3D_get_collision_point(RayCast3D{self})
}
func (self methodsRayCast3D) GetCollisionNormal() Vector3 {
	return self.Runtime.RayCast3D_get_collision_normal(RayCast3D{self})
}
func (self methodsRayCast3D) GetCollisionFaceIndex() int64 {
	return self.Runtime.RayCast3D_get_collision_face_index(RayCast3D{self})
}
func (self methodsRayCast3D) AddExceptionRid(rid RID) {
	self.Runtime.RayCast3D_add_exception_rid(RayCast3D{self}, rid)
}
func (self methodsRayCast3D) AddException(node CollisionObject3D) {
	self.Runtime.RayCast3D_add_exception(RayCast3D{self}, node)
}
func (self methodsRayCast3D) RemoveExceptionRid(rid RID) {
	self.Runtime.RayCast3D_remove_exception_rid(RayCast3D{self}, rid)
}
func (self methodsRayCast3D) RemoveException(node CollisionObject3D) {
	self.Runtime.RayCast3D_remove_exception(RayCast3D{self}, node)
}
func (self methodsRayCast3D) ClearExceptions() {
	self.Runtime.RayCast3D_clear_exceptions(RayCast3D{self})
}
func (self methodsRayCast3D) SetCollisionMask(mask int64) {
	self.Runtime.RayCast3D_set_collision_mask(RayCast3D{self}, mask)
}
func (self methodsRayCast3D) GetCollisionMask() int64 {
	return self.Runtime.RayCast3D_get_collision_mask(RayCast3D{self})
}
func (self methodsRayCast3D) SetCollisionMaskValue(layer_number int64, value bool) {
	self.Runtime.RayCast3D_set_collision_mask_value(RayCast3D{self}, layer_number, value)
}
func (self methodsRayCast3D) GetCollisionMaskValue(layer_number int64) bool {
	return self.Runtime.RayCast3D_get_collision_mask_value(RayCast3D{self}, layer_number)
}
func (self methodsRayCast3D) SetExcludeParentBody(mask bool) {
	self.Runtime.RayCast3D_set_exclude_parent_body(RayCast3D{self}, mask)
}
func (self methodsRayCast3D) GetExcludeParentBody() bool {
	return self.Runtime.RayCast3D_get_exclude_parent_body(RayCast3D{self})
}
func (self methodsRayCast3D) SetCollideWithAreas(enable bool) {
	self.Runtime.RayCast3D_set_collide_with_areas(RayCast3D{self}, enable)
}
func (self methodsRayCast3D) IsCollideWithAreasEnabled() bool {
	return self.Runtime.RayCast3D_is_collide_with_areas_enabled(RayCast3D{self})
}
func (self methodsRayCast3D) SetCollideWithBodies(enable bool) {
	self.Runtime.RayCast3D_set_collide_with_bodies(RayCast3D{self}, enable)
}
func (self methodsRayCast3D) IsCollideWithBodiesEnabled() bool {
	return self.Runtime.RayCast3D_is_collide_with_bodies_enabled(RayCast3D{self})
}
func (self methodsRayCast3D) SetHitFromInside(enable bool) {
	self.Runtime.RayCast3D_set_hit_from_inside(RayCast3D{self}, enable)
}
func (self methodsRayCast3D) IsHitFromInsideEnabled() bool {
	return self.Runtime.RayCast3D_is_hit_from_inside_enabled(RayCast3D{self})
}
func (self methodsRayCast3D) SetHitBackFaces(enable bool) {
	self.Runtime.RayCast3D_set_hit_back_faces(RayCast3D{self}, enable)
}
func (self methodsRayCast3D) IsHitBackFacesEnabled() bool {
	return self.Runtime.RayCast3D_is_hit_back_faces_enabled(RayCast3D{self})
}
func (self methodsRayCast3D) SetDebugShapeCustomColor(debug_shape_custom_color Color) {
	self.Runtime.RayCast3D_set_debug_shape_custom_color(RayCast3D{self}, debug_shape_custom_color)
}
func (self methodsRayCast3D) GetDebugShapeCustomColor() Color {
	return self.Runtime.RayCast3D_get_debug_shape_custom_color(RayCast3D{self})
}
func (self methodsRayCast3D) SetDebugShapeThickness(debug_shape_thickness int64) {
	self.Runtime.RayCast3D_set_debug_shape_thickness(RayCast3D{self}, debug_shape_thickness)
}
func (self methodsRayCast3D) GetDebugShapeThickness() int64 {
	return self.Runtime.RayCast3D_get_debug_shape_thickness(RayCast3D{self})
}

type methodsRectangleShape2D struct {
	_ [0]*methodsRectangleShape2D
	class
}

func (self RectangleShape2D) Shape2D() Shape2D {
	var parent Shape2D
	parent.class = self.class
	return parent
}
func (self methodsRectangleShape2D) SetSize(size Vector2) {
	self.Runtime.RectangleShape2D_set_size(RectangleShape2D{self}, size)
}
func (self methodsRectangleShape2D) GetSize() Vector2 {
	return self.Runtime.RectangleShape2D_get_size(RectangleShape2D{self})
}

type methodsRefCounted struct {
	_ [0]*methodsRefCounted
	class
}

func (self RefCounted) Object() Object { var parent Object; parent.class = self.class; return parent }
func (self methodsRefCounted) InitRef() bool {
	return self.Runtime.RefCounted_init_ref(RefCounted{self})
}
func (self methodsRefCounted) Reference() bool {
	return self.Runtime.RefCounted_reference(RefCounted{self})
}
func (self methodsRefCounted) Unreference() bool {
	return self.Runtime.RefCounted_unreference(RefCounted{self})
}
func (self methodsRefCounted) GetReferenceCount() int64 {
	return self.Runtime.RefCounted_get_reference_count(RefCounted{self})
}

type methodsReferenceRect struct {
	_ [0]*methodsReferenceRect
	class
}

func (self ReferenceRect) Control() Control {
	var parent Control
	parent.class = self.class
	return parent
}
func (self methodsReferenceRect) GetBorderColor() Color {
	return self.Runtime.ReferenceRect_get_border_color(ReferenceRect{self})
}
func (self methodsReferenceRect) SetBorderColor(color Color) {
	self.Runtime.ReferenceRect_set_border_color(ReferenceRect{self}, color)
}
func (self methodsReferenceRect) GetBorderWidth() Float {
	return self.Runtime.ReferenceRect_get_border_width(ReferenceRect{self})
}
func (self methodsReferenceRect) SetBorderWidth(width Float) {
	self.Runtime.ReferenceRect_set_border_width(ReferenceRect{self}, width)
}
func (self methodsReferenceRect) GetEditorOnly() bool {
	return self.Runtime.ReferenceRect_get_editor_only(ReferenceRect{self})
}
func (self methodsReferenceRect) SetEditorOnly(enabled bool) {
	self.Runtime.ReferenceRect_set_editor_only(ReferenceRect{self}, enabled)
}

type methodsReflectionProbe struct {
	_ [0]*methodsReflectionProbe
	class
}

func (self ReflectionProbe) VisualInstance3D() VisualInstance3D {
	var parent VisualInstance3D
	parent.class = self.class
	return parent
}
func (self methodsReflectionProbe) SetIntensity(intensity Float) {
	self.Runtime.ReflectionProbe_set_intensity(ReflectionProbe{self}, intensity)
}
func (self methodsReflectionProbe) GetIntensity() Float {
	return self.Runtime.ReflectionProbe_get_intensity(ReflectionProbe{self})
}
func (self methodsReflectionProbe) SetAmbientMode(ambient ReflectionProbeAmbientMode) {
	self.Runtime.ReflectionProbe_set_ambient_mode(ReflectionProbe{self}, ambient)
}
func (self methodsReflectionProbe) GetAmbientMode() ReflectionProbeAmbientMode {
	return self.Runtime.ReflectionProbe_get_ambient_mode(ReflectionProbe{self})
}
func (self methodsReflectionProbe) SetAmbientColor(ambient Color) {
	self.Runtime.ReflectionProbe_set_ambient_color(ReflectionProbe{self}, ambient)
}
func (self methodsReflectionProbe) GetAmbientColor() Color {
	return self.Runtime.ReflectionProbe_get_ambient_color(ReflectionProbe{self})
}
func (self methodsReflectionProbe) SetAmbientColorEnergy(ambient_energy Float) {
	self.Runtime.ReflectionProbe_set_ambient_color_energy(ReflectionProbe{self}, ambient_energy)
}
func (self methodsReflectionProbe) GetAmbientColorEnergy() Float {
	return self.Runtime.ReflectionProbe_get_ambient_color_energy(ReflectionProbe{self})
}
func (self methodsReflectionProbe) SetMaxDistance(max_distance Float) {
	self.Runtime.ReflectionProbe_set_max_distance(ReflectionProbe{self}, max_distance)
}
func (self methodsReflectionProbe) GetMaxDistance() Float {
	return self.Runtime.ReflectionProbe_get_max_distance(ReflectionProbe{self})
}
func (self methodsReflectionProbe) SetMeshLodThreshold(ratio Float) {
	self.Runtime.ReflectionProbe_set_mesh_lod_threshold(ReflectionProbe{self}, ratio)
}
func (self methodsReflectionProbe) GetMeshLodThreshold() Float {
	return self.Runtime.ReflectionProbe_get_mesh_lod_threshold(ReflectionProbe{self})
}
func (self methodsReflectionProbe) SetSize(size Vector3) {
	self.Runtime.ReflectionProbe_set_size(ReflectionProbe{self}, size)
}
func (self methodsReflectionProbe) GetSize() Vector3 {
	return self.Runtime.ReflectionProbe_get_size(ReflectionProbe{self})
}
func (self methodsReflectionProbe) SetOriginOffset(origin_offset Vector3) {
	self.Runtime.ReflectionProbe_set_origin_offset(ReflectionProbe{self}, origin_offset)
}
func (self methodsReflectionProbe) GetOriginOffset() Vector3 {
	return self.Runtime.ReflectionProbe_get_origin_offset(ReflectionProbe{self})
}
func (self methodsReflectionProbe) SetAsInterior(enable bool) {
	self.Runtime.ReflectionProbe_set_as_interior(ReflectionProbe{self}, enable)
}
func (self methodsReflectionProbe) IsSetAsInterior() bool {
	return self.Runtime.ReflectionProbe_is_set_as_interior(ReflectionProbe{self})
}
func (self methodsReflectionProbe) SetEnableBoxProjection(enable bool) {
	self.Runtime.ReflectionProbe_set_enable_box_projection(ReflectionProbe{self}, enable)
}
func (self methodsReflectionProbe) IsBoxProjectionEnabled() bool {
	return self.Runtime.ReflectionProbe_is_box_projection_enabled(ReflectionProbe{self})
}
func (self methodsReflectionProbe) SetEnableShadows(enable bool) {
	self.Runtime.ReflectionProbe_set_enable_shadows(ReflectionProbe{self}, enable)
}
func (self methodsReflectionProbe) AreShadowsEnabled() bool {
	return self.Runtime.ReflectionProbe_are_shadows_enabled(ReflectionProbe{self})
}
func (self methodsReflectionProbe) SetCullMask(layers int64) {
	self.Runtime.ReflectionProbe_set_cull_mask(ReflectionProbe{self}, layers)
}
func (self methodsReflectionProbe) GetCullMask() int64 {
	return self.Runtime.ReflectionProbe_get_cull_mask(ReflectionProbe{self})
}
func (self methodsReflectionProbe) SetUpdateMode(mode ReflectionProbeUpdateMode) {
	self.Runtime.ReflectionProbe_set_update_mode(ReflectionProbe{self}, mode)
}
func (self methodsReflectionProbe) GetUpdateMode() ReflectionProbeUpdateMode {
	return self.Runtime.ReflectionProbe_get_update_mode(ReflectionProbe{self})
}

type methodsRegEx struct {
	_ [0]*methodsRegEx
	class
}

func (self RegEx) RefCounted() RefCounted {
	var parent RefCounted
	parent.class = self.class
	return parent
}
func (self methodsRegEx) CreateFromString(pattern string) RegEx {
	return self.Runtime.RegEx_create_from_string(RegEx{self}, pattern)
}
func (self methodsRegEx) Clear() {
	self.Runtime.RegEx_clear(RegEx{self})
}
func (self methodsRegEx) Compile(pattern string) int64 {
	return self.Runtime.RegEx_compile(RegEx{self}, pattern)
}
func (self methodsRegEx) Search(subject string, offset int64, end int64) RegExMatch {
	return self.Runtime.RegEx_search(RegEx{self}, subject, offset, end)
}
func (self methodsRegEx) SearchAll(subject string, offset int64, end int64) ArrayOf[RegExMatch] {
	return self.Runtime.RegEx_search_all(RegEx{self}, subject, offset, end)
}
func (self methodsRegEx) Sub(subject string, replacement string, all bool, offset int64, end int64) string {
	return self.Runtime.RegEx_sub(RegEx{self}, subject, replacement, all, offset, end)
}
func (self methodsRegEx) IsValid() bool {
	return self.Runtime.RegEx_is_valid(RegEx{self})
}
func (self methodsRegEx) GetPattern() string {
	return self.Runtime.RegEx_get_pattern(RegEx{self})
}
func (self methodsRegEx) GetGroupCount() int64 {
	return self.Runtime.RegEx_get_group_count(RegEx{self})
}
func (self methodsRegEx) GetNames() PackedStringArray {
	return self.Runtime.RegEx_get_names(RegEx{self})
}

type methodsRegExMatch struct {
	_ [0]*methodsRegExMatch
	class
}

func (self RegExMatch) RefCounted() RefCounted {
	var parent RefCounted
	parent.class = self.class
	return parent
}
func (self methodsRegExMatch) GetSubject() string {
	return self.Runtime.RegExMatch_get_subject(RegExMatch{self})
}
func (self methodsRegExMatch) GetGroupCount() int64 {
	return self.Runtime.RegExMatch_get_group_count(RegExMatch{self})
}
func (self methodsRegExMatch) GetNames() Dictionary {
	return self.Runtime.RegExMatch_get_names(RegExMatch{self})
}
func (self methodsRegExMatch) GetStrings() PackedStringArray {
	return self.Runtime.RegExMatch_get_strings(RegExMatch{self})
}
func (self methodsRegExMatch) GetString(name any) string {
	return self.Runtime.RegExMatch_get_string(RegExMatch{self}, name)
}
func (self methodsRegExMatch) GetStart(name any) int64 {
	return self.Runtime.RegExMatch_get_start(RegExMatch{self}, name)
}
func (self methodsRegExMatch) GetEnd(name any) int64 {
	return self.Runtime.RegExMatch_get_end(RegExMatch{self}, name)
}

type methodsRemoteTransform2D struct {
	_ [0]*methodsRemoteTransform2D
	class
}

func (self RemoteTransform2D) Node2D() Node2D {
	var parent Node2D
	parent.class = self.class
	return parent
}
func (self methodsRemoteTransform2D) SetRemoteNode(path NodePath) {
	self.Runtime.RemoteTransform2D_set_remote_node(RemoteTransform2D{self}, path)
}
func (self methodsRemoteTransform2D) GetRemoteNode() NodePath {
	return self.Runtime.RemoteTransform2D_get_remote_node(RemoteTransform2D{self})
}
func (self methodsRemoteTransform2D) ForceUpdateCache() {
	self.Runtime.RemoteTransform2D_force_update_cache(RemoteTransform2D{self})
}
func (self methodsRemoteTransform2D) SetUseGlobalCoordinates(use_global_coordinates bool) {
	self.Runtime.RemoteTransform2D_set_use_global_coordinates(RemoteTransform2D{self}, use_global_coordinates)
}
func (self methodsRemoteTransform2D) GetUseGlobalCoordinates() bool {
	return self.Runtime.RemoteTransform2D_get_use_global_coordinates(RemoteTransform2D{self})
}
func (self methodsRemoteTransform2D) SetUpdatePosition(update_remote_position bool) {
	self.Runtime.RemoteTransform2D_set_update_position(RemoteTransform2D{self}, update_remote_position)
}
func (self methodsRemoteTransform2D) GetUpdatePosition() bool {
	return self.Runtime.RemoteTransform2D_get_update_position(RemoteTransform2D{self})
}
func (self methodsRemoteTransform2D) SetUpdateRotation(update_remote_rotation bool) {
	self.Runtime.RemoteTransform2D_set_update_rotation(RemoteTransform2D{self}, update_remote_rotation)
}
func (self methodsRemoteTransform2D) GetUpdateRotation() bool {
	return self.Runtime.RemoteTransform2D_get_update_rotation(RemoteTransform2D{self})
}
func (self methodsRemoteTransform2D) SetUpdateScale(update_remote_scale bool) {
	self.Runtime.RemoteTransform2D_set_update_scale(RemoteTransform2D{self}, update_remote_scale)
}
func (self methodsRemoteTransform2D) GetUpdateScale() bool {
	return self.Runtime.RemoteTransform2D_get_update_scale(RemoteTransform2D{self})
}

type methodsRemoteTransform3D struct {
	_ [0]*methodsRemoteTransform3D
	class
}

func (self RemoteTransform3D) Node3D() Node3D {
	var parent Node3D
	parent.class = self.class
	return parent
}
func (self methodsRemoteTransform3D) SetRemoteNode(path NodePath) {
	self.Runtime.RemoteTransform3D_set_remote_node(RemoteTransform3D{self}, path)
}
func (self methodsRemoteTransform3D) GetRemoteNode() NodePath {
	return self.Runtime.RemoteTransform3D_get_remote_node(RemoteTransform3D{self})
}
func (self methodsRemoteTransform3D) ForceUpdateCache() {
	self.Runtime.RemoteTransform3D_force_update_cache(RemoteTransform3D{self})
}
func (self methodsRemoteTransform3D) SetUseGlobalCoordinates(use_global_coordinates bool) {
	self.Runtime.RemoteTransform3D_set_use_global_coordinates(RemoteTransform3D{self}, use_global_coordinates)
}
func (self methodsRemoteTransform3D) GetUseGlobalCoordinates() bool {
	return self.Runtime.RemoteTransform3D_get_use_global_coordinates(RemoteTransform3D{self})
}
func (self methodsRemoteTransform3D) SetUpdatePosition(update_remote_position bool) {
	self.Runtime.RemoteTransform3D_set_update_position(RemoteTransform3D{self}, update_remote_position)
}
func (self methodsRemoteTransform3D) GetUpdatePosition() bool {
	return self.Runtime.RemoteTransform3D_get_update_position(RemoteTransform3D{self})
}
func (self methodsRemoteTransform3D) SetUpdateRotation(update_remote_rotation bool) {
	self.Runtime.RemoteTransform3D_set_update_rotation(RemoteTransform3D{self}, update_remote_rotation)
}
func (self methodsRemoteTransform3D) GetUpdateRotation() bool {
	return self.Runtime.RemoteTransform3D_get_update_rotation(RemoteTransform3D{self})
}
func (self methodsRemoteTransform3D) SetUpdateScale(update_remote_scale bool) {
	self.Runtime.RemoteTransform3D_set_update_scale(RemoteTransform3D{self}, update_remote_scale)
}
func (self methodsRemoteTransform3D) GetUpdateScale() bool {
	return self.Runtime.RemoteTransform3D_get_update_scale(RemoteTransform3D{self})
}

type methodsRenderSceneBuffers struct {
	_ [0]*methodsRenderSceneBuffers
	class
}

func (self RenderSceneBuffers) RefCounted() RefCounted {
	var parent RefCounted
	parent.class = self.class
	return parent
}
func (self methodsRenderSceneBuffers) Configure(config RenderSceneBuffersConfiguration) {
	self.Runtime.RenderSceneBuffers_configure(RenderSceneBuffers{self}, config)
}

type methodsRenderSceneBuffersConfiguration struct {
	_ [0]*methodsRenderSceneBuffersConfiguration
	class
}

func (self RenderSceneBuffersConfiguration) RefCounted() RefCounted {
	var parent RefCounted
	parent.class = self.class
	return parent
}
func (self methodsRenderSceneBuffersConfiguration) GetRenderTarget() RID {
	return self.Runtime.RenderSceneBuffersConfiguration_get_render_target(RenderSceneBuffersConfiguration{self})
}
func (self methodsRenderSceneBuffersConfiguration) SetRenderTarget(render_target RID) {
	self.Runtime.RenderSceneBuffersConfiguration_set_render_target(RenderSceneBuffersConfiguration{self}, render_target)
}
func (self methodsRenderSceneBuffersConfiguration) GetInternalSize() Vector2i {
	return self.Runtime.RenderSceneBuffersConfiguration_get_internal_size(RenderSceneBuffersConfiguration{self})
}
func (self methodsRenderSceneBuffersConfiguration) SetInternalSize(internal_size Vector2i) {
	self.Runtime.RenderSceneBuffersConfiguration_set_internal_size(RenderSceneBuffersConfiguration{self}, internal_size)
}
func (self methodsRenderSceneBuffersConfiguration) GetTargetSize() Vector2i {
	return self.Runtime.RenderSceneBuffersConfiguration_get_target_size(RenderSceneBuffersConfiguration{self})
}
func (self methodsRenderSceneBuffersConfiguration) SetTargetSize(target_size Vector2i) {
	self.Runtime.RenderSceneBuffersConfiguration_set_target_size(RenderSceneBuffersConfiguration{self}, target_size)
}
func (self methodsRenderSceneBuffersConfiguration) GetViewCount() int64 {
	return self.Runtime.RenderSceneBuffersConfiguration_get_view_count(RenderSceneBuffersConfiguration{self})
}
func (self methodsRenderSceneBuffersConfiguration) SetViewCount(view_count int64) {
	self.Runtime.RenderSceneBuffersConfiguration_set_view_count(RenderSceneBuffersConfiguration{self}, view_count)
}
func (self methodsRenderSceneBuffersConfiguration) GetScaling3dMode() RenderingServerViewportScaling3DMode {
	return self.Runtime.RenderSceneBuffersConfiguration_get_scaling_3d_mode(RenderSceneBuffersConfiguration{self})
}
func (self methodsRenderSceneBuffersConfiguration) SetScaling3dMode(scaling_3d_mode RenderingServerViewportScaling3DMode) {
	self.Runtime.RenderSceneBuffersConfiguration_set_scaling_3d_mode(RenderSceneBuffersConfiguration{self}, scaling_3d_mode)
}
func (self methodsRenderSceneBuffersConfiguration) GetMsaa3d() RenderingServerViewportMSAA {
	return self.Runtime.RenderSceneBuffersConfiguration_get_msaa_3d(RenderSceneBuffersConfiguration{self})
}
func (self methodsRenderSceneBuffersConfiguration) SetMsaa3d(msaa_3d RenderingServerViewportMSAA) {
	self.Runtime.RenderSceneBuffersConfiguration_set_msaa_3d(RenderSceneBuffersConfiguration{self}, msaa_3d)
}
func (self methodsRenderSceneBuffersConfiguration) GetScreenSpaceAa() RenderingServerViewportScreenSpaceAA {
	return self.Runtime.RenderSceneBuffersConfiguration_get_screen_space_aa(RenderSceneBuffersConfiguration{self})
}
func (self methodsRenderSceneBuffersConfiguration) SetScreenSpaceAa(screen_space_aa RenderingServerViewportScreenSpaceAA) {
	self.Runtime.RenderSceneBuffersConfiguration_set_screen_space_aa(RenderSceneBuffersConfiguration{self}, screen_space_aa)
}
func (self methodsRenderSceneBuffersConfiguration) GetFsrSharpness() Float {
	return self.Runtime.RenderSceneBuffersConfiguration_get_fsr_sharpness(RenderSceneBuffersConfiguration{self})
}
func (self methodsRenderSceneBuffersConfiguration) SetFsrSharpness(fsr_sharpness Float) {
	self.Runtime.RenderSceneBuffersConfiguration_set_fsr_sharpness(RenderSceneBuffersConfiguration{self}, fsr_sharpness)
}
func (self methodsRenderSceneBuffersConfiguration) GetTextureMipmapBias() Float {
	return self.Runtime.RenderSceneBuffersConfiguration_get_texture_mipmap_bias(RenderSceneBuffersConfiguration{self})
}
func (self methodsRenderSceneBuffersConfiguration) SetTextureMipmapBias(texture_mipmap_bias Float) {
	self.Runtime.RenderSceneBuffersConfiguration_set_texture_mipmap_bias(RenderSceneBuffersConfiguration{self}, texture_mipmap_bias)
}

type methodsRenderSceneBuffersExtension struct {
	_ [0]*methodsRenderSceneBuffersExtension
	class
}

func (self RenderSceneBuffersExtension) RenderSceneBuffers() RenderSceneBuffers {
	var parent RenderSceneBuffers
	parent.class = self.class
	return parent
}

type methodsRenderSceneBuffersRD struct {
	_ [0]*methodsRenderSceneBuffersRD
	class
}

func (self RenderSceneBuffersRD) RenderSceneBuffers() RenderSceneBuffers {
	var parent RenderSceneBuffers
	parent.class = self.class
	return parent
}
func (self methodsRenderSceneBuffersRD) HasTexture(context string, name string) bool {
	return self.Runtime.RenderSceneBuffersRD_has_texture(RenderSceneBuffersRD{self}, context, name)
}
func (self methodsRenderSceneBuffersRD) CreateTexture(context string, name string, data_format RenderingDeviceDataFormat, usage_bits int64, texture_samples RenderingDeviceTextureSamples, size Vector2i, layers int64, mipmaps int64, unique bool) RID {
	return self.Runtime.RenderSceneBuffersRD_create_texture(RenderSceneBuffersRD{self}, context, name, data_format, usage_bits, texture_samples, size, layers, mipmaps, unique)
}
func (self methodsRenderSceneBuffersRD) CreateTextureFromFormat(context string, name string, format RDTextureFormat, view RDTextureView, unique bool) RID {
	return self.Runtime.RenderSceneBuffersRD_create_texture_from_format(RenderSceneBuffersRD{self}, context, name, format, view, unique)
}
func (self methodsRenderSceneBuffersRD) CreateTextureView(context string, name string, view_name string, view RDTextureView) RID {
	return self.Runtime.RenderSceneBuffersRD_create_texture_view(RenderSceneBuffersRD{self}, context, name, view_name, view)
}
func (self methodsRenderSceneBuffersRD) GetTexture(context string, name string) RID {
	return self.Runtime.RenderSceneBuffersRD_get_texture(RenderSceneBuffersRD{self}, context, name)
}
func (self methodsRenderSceneBuffersRD) GetTextureFormat(context string, name string) RDTextureFormat {
	return self.Runtime.RenderSceneBuffersRD_get_texture_format(RenderSceneBuffersRD{self}, context, name)
}
func (self methodsRenderSceneBuffersRD) GetTextureSlice(context string, name string, layer int64, mipmap int64, layers int64, mipmaps int64) RID {
	return self.Runtime.RenderSceneBuffersRD_get_texture_slice(RenderSceneBuffersRD{self}, context, name, layer, mipmap, layers, mipmaps)
}
func (self methodsRenderSceneBuffersRD) GetTextureSliceView(context string, name string, layer int64, mipmap int64, layers int64, mipmaps int64, view RDTextureView) RID {
	return self.Runtime.RenderSceneBuffersRD_get_texture_slice_view(RenderSceneBuffersRD{self}, context, name, layer, mipmap, layers, mipmaps, view)
}
func (self methodsRenderSceneBuffersRD) GetTextureSliceSize(context string, name string, mipmap int64) Vector2i {
	return self.Runtime.RenderSceneBuffersRD_get_texture_slice_size(RenderSceneBuffersRD{self}, context, name, mipmap)
}
func (self methodsRenderSceneBuffersRD) ClearContext(context string) {
	self.Runtime.RenderSceneBuffersRD_clear_context(RenderSceneBuffersRD{self}, context)
}
func (self methodsRenderSceneBuffersRD) GetColorTexture() RID {
	return self.Runtime.RenderSceneBuffersRD_get_color_texture(RenderSceneBuffersRD{self})
}
func (self methodsRenderSceneBuffersRD) GetColorLayer(layer int64) RID {
	return self.Runtime.RenderSceneBuffersRD_get_color_layer(RenderSceneBuffersRD{self}, layer)
}
func (self methodsRenderSceneBuffersRD) GetDepthTexture() RID {
	return self.Runtime.RenderSceneBuffersRD_get_depth_texture(RenderSceneBuffersRD{self})
}
func (self methodsRenderSceneBuffersRD) GetDepthLayer(layer int64) RID {
	return self.Runtime.RenderSceneBuffersRD_get_depth_layer(RenderSceneBuffersRD{self}, layer)
}
func (self methodsRenderSceneBuffersRD) GetVelocityTexture() RID {
	return self.Runtime.RenderSceneBuffersRD_get_velocity_texture(RenderSceneBuffersRD{self})
}
func (self methodsRenderSceneBuffersRD) GetVelocityLayer(layer int64) RID {
	return self.Runtime.RenderSceneBuffersRD_get_velocity_layer(RenderSceneBuffersRD{self}, layer)
}
func (self methodsRenderSceneBuffersRD) GetRenderTarget() RID {
	return self.Runtime.RenderSceneBuffersRD_get_render_target(RenderSceneBuffersRD{self})
}
func (self methodsRenderSceneBuffersRD) GetViewCount() int64 {
	return self.Runtime.RenderSceneBuffersRD_get_view_count(RenderSceneBuffersRD{self})
}
func (self methodsRenderSceneBuffersRD) GetInternalSize() Vector2i {
	return self.Runtime.RenderSceneBuffersRD_get_internal_size(RenderSceneBuffersRD{self})
}
func (self methodsRenderSceneBuffersRD) GetUseTaa() bool {
	return self.Runtime.RenderSceneBuffersRD_get_use_taa(RenderSceneBuffersRD{self})
}

type methodsRenderingDevice struct {
	_ [0]*methodsRenderingDevice
	class
}

func (self RenderingDevice) Object() Object {
	var parent Object
	parent.class = self.class
	return parent
}
func (self methodsRenderingDevice) TextureCreate(format RDTextureFormat, view RDTextureView, data ArrayOf[PackedByteArray]) RID {
	return self.Runtime.RenderingDevice_texture_create(RenderingDevice{self}, format, view, data)
}
func (self methodsRenderingDevice) TextureCreateShared(view RDTextureView, with_texture RID) RID {
	return self.Runtime.RenderingDevice_texture_create_shared(RenderingDevice{self}, view, with_texture)
}
func (self methodsRenderingDevice) TextureCreateSharedFromSlice(view RDTextureView, with_texture RID, layer int64, mipmap int64, mipmaps int64, slice_type RenderingDeviceTextureSliceType) RID {
	return self.Runtime.RenderingDevice_texture_create_shared_from_slice(RenderingDevice{self}, view, with_texture, layer, mipmap, mipmaps, slice_type)
}
func (self methodsRenderingDevice) TextureCreateFromExtension(atype RenderingDeviceTextureType, format RenderingDeviceDataFormat, samples RenderingDeviceTextureSamples, usage_flags RenderingDeviceTextureUsageBits, image int64, width int64, height int64, depth int64, layers int64) RID {
	return self.Runtime.RenderingDevice_texture_create_from_extension(RenderingDevice{self}, atype, format, samples, usage_flags, image, width, height, depth, layers)
}
func (self methodsRenderingDevice) TextureUpdate(texture RID, layer int64, data PackedByteArray, post_barrier RenderingDeviceBarrierMask) int64 {
	return self.Runtime.RenderingDevice_texture_update(RenderingDevice{self}, texture, layer, data, post_barrier)
}
func (self methodsRenderingDevice) TextureGetData(texture RID, layer int64) PackedByteArray {
	return self.Runtime.RenderingDevice_texture_get_data(RenderingDevice{self}, texture, layer)
}
func (self methodsRenderingDevice) TextureIsFormatSupportedForUsage(format RenderingDeviceDataFormat, usage_flags RenderingDeviceTextureUsageBits) bool {
	return self.Runtime.RenderingDevice_texture_is_format_supported_for_usage(RenderingDevice{self}, format, usage_flags)
}
func (self methodsRenderingDevice) TextureIsShared(texture RID) bool {
	return self.Runtime.RenderingDevice_texture_is_shared(RenderingDevice{self}, texture)
}
func (self methodsRenderingDevice) TextureIsValid(texture RID) bool {
	return self.Runtime.RenderingDevice_texture_is_valid(RenderingDevice{self}, texture)
}
func (self methodsRenderingDevice) TextureCopy(from_texture RID, to_texture RID, from_pos Vector3, to_pos Vector3, size Vector3, src_mipmap int64, dst_mipmap int64, src_layer int64, dst_layer int64, post_barrier RenderingDeviceBarrierMask) int64 {
	return self.Runtime.RenderingDevice_texture_copy(RenderingDevice{self}, from_texture, to_texture, from_pos, to_pos, size, src_mipmap, dst_mipmap, src_layer, dst_layer, post_barrier)
}
func (self methodsRenderingDevice) TextureClear(texture RID, color Color, base_mipmap int64, mipmap_count int64, base_layer int64, layer_count int64, post_barrier RenderingDeviceBarrierMask) int64 {
	return self.Runtime.RenderingDevice_texture_clear(RenderingDevice{self}, texture, color, base_mipmap, mipmap_count, base_layer, layer_count, post_barrier)
}
func (self methodsRenderingDevice) TextureResolveMultisample(from_texture RID, to_texture RID, post_barrier RenderingDeviceBarrierMask) int64 {
	return self.Runtime.RenderingDevice_texture_resolve_multisample(RenderingDevice{self}, from_texture, to_texture, post_barrier)
}
func (self methodsRenderingDevice) TextureGetFormat(texture RID) RDTextureFormat {
	return self.Runtime.RenderingDevice_texture_get_format(RenderingDevice{self}, texture)
}
func (self methodsRenderingDevice) TextureGetNativeHandle(texture RID) int64 {
	return self.Runtime.RenderingDevice_texture_get_native_handle(RenderingDevice{self}, texture)
}
func (self methodsRenderingDevice) FramebufferFormatCreate(attachments ArrayOf[RDAttachmentFormat], view_count int64) int64 {
	return self.Runtime.RenderingDevice_framebuffer_format_create(RenderingDevice{self}, attachments, view_count)
}
func (self methodsRenderingDevice) FramebufferFormatCreateMultipass(attachments ArrayOf[RDAttachmentFormat], passes ArrayOf[RDFramebufferPass], view_count int64) int64 {
	return self.Runtime.RenderingDevice_framebuffer_format_create_multipass(RenderingDevice{self}, attachments, passes, view_count)
}
func (self methodsRenderingDevice) FramebufferFormatCreateEmpty(samples RenderingDeviceTextureSamples) int64 {
	return self.Runtime.RenderingDevice_framebuffer_format_create_empty(RenderingDevice{self}, samples)
}
func (self methodsRenderingDevice) FramebufferFormatGetTextureSamples(format int64, render_pass int64) RenderingDeviceTextureSamples {
	return self.Runtime.RenderingDevice_framebuffer_format_get_texture_samples(RenderingDevice{self}, format, render_pass)
}
func (self methodsRenderingDevice) FramebufferCreate(textures ArrayOf[RID], validate_with_format int64, view_count int64) RID {
	return self.Runtime.RenderingDevice_framebuffer_create(RenderingDevice{self}, textures, validate_with_format, view_count)
}
func (self methodsRenderingDevice) FramebufferCreateMultipass(textures ArrayOf[RID], passes ArrayOf[RDFramebufferPass], validate_with_format int64, view_count int64) RID {
	return self.Runtime.RenderingDevice_framebuffer_create_multipass(RenderingDevice{self}, textures, passes, validate_with_format, view_count)
}
func (self methodsRenderingDevice) FramebufferCreateEmpty(size Vector2i, samples RenderingDeviceTextureSamples, validate_with_format int64) RID {
	return self.Runtime.RenderingDevice_framebuffer_create_empty(RenderingDevice{self}, size, samples, validate_with_format)
}
func (self methodsRenderingDevice) FramebufferGetFormat(framebuffer RID) int64 {
	return self.Runtime.RenderingDevice_framebuffer_get_format(RenderingDevice{self}, framebuffer)
}
func (self methodsRenderingDevice) FramebufferIsValid(framebuffer RID) bool {
	return self.Runtime.RenderingDevice_framebuffer_is_valid(RenderingDevice{self}, framebuffer)
}
func (self methodsRenderingDevice) SamplerCreate(state RDSamplerState) RID {
	return self.Runtime.RenderingDevice_sampler_create(RenderingDevice{self}, state)
}
func (self methodsRenderingDevice) SamplerIsFormatSupportedForFilter(format RenderingDeviceDataFormat, sampler_filter RenderingDeviceSamplerFilter) bool {
	return self.Runtime.RenderingDevice_sampler_is_format_supported_for_filter(RenderingDevice{self}, format, sampler_filter)
}
func (self methodsRenderingDevice) VertexBufferCreate(size_bytes int64, data PackedByteArray, use_as_storage bool) RID {
	return self.Runtime.RenderingDevice_vertex_buffer_create(RenderingDevice{self}, size_bytes, data, use_as_storage)
}
func (self methodsRenderingDevice) VertexFormatCreate(vertex_descriptions ArrayOf[RDVertexAttribute]) int64 {
	return self.Runtime.RenderingDevice_vertex_format_create(RenderingDevice{self}, vertex_descriptions)
}
func (self methodsRenderingDevice) VertexArrayCreate(vertex_count int64, vertex_format int64, src_buffers ArrayOf[RID], offsets PackedInt64Array) RID {
	return self.Runtime.RenderingDevice_vertex_array_create(RenderingDevice{self}, vertex_count, vertex_format, src_buffers, offsets)
}
func (self methodsRenderingDevice) IndexBufferCreate(size_indices int64, format RenderingDeviceIndexBufferFormat, data PackedByteArray, use_restart_indices bool) RID {
	return self.Runtime.RenderingDevice_index_buffer_create(RenderingDevice{self}, size_indices, format, data, use_restart_indices)
}
func (self methodsRenderingDevice) IndexArrayCreate(index_buffer RID, index_offset int64, index_count int64) RID {
	return self.Runtime.RenderingDevice_index_array_create(RenderingDevice{self}, index_buffer, index_offset, index_count)
}
func (self methodsRenderingDevice) ShaderCompileSpirvFromSource(shader_source RDShaderSource, allow_cache bool) RDShaderSPIRV {
	return self.Runtime.RenderingDevice_shader_compile_spirv_from_source(RenderingDevice{self}, shader_source, allow_cache)
}
func (self methodsRenderingDevice) ShaderCompileBinaryFromSpirv(spirv_data RDShaderSPIRV, name string) PackedByteArray {
	return self.Runtime.RenderingDevice_shader_compile_binary_from_spirv(RenderingDevice{self}, spirv_data, name)
}
func (self methodsRenderingDevice) ShaderCreateFromSpirv(spirv_data RDShaderSPIRV, name string) RID {
	return self.Runtime.RenderingDevice_shader_create_from_spirv(RenderingDevice{self}, spirv_data, name)
}
func (self methodsRenderingDevice) ShaderCreateFromBytecode(binary_data PackedByteArray, placeholder_rid RID) RID {
	return self.Runtime.RenderingDevice_shader_create_from_bytecode(RenderingDevice{self}, binary_data, placeholder_rid)
}
func (self methodsRenderingDevice) ShaderCreatePlaceholder() RID {
	return self.Runtime.RenderingDevice_shader_create_placeholder(RenderingDevice{self})
}
func (self methodsRenderingDevice) ShaderGetVertexInputAttributeMask(shader RID) int64 {
	return self.Runtime.RenderingDevice_shader_get_vertex_input_attribute_mask(RenderingDevice{self}, shader)
}
func (self methodsRenderingDevice) UniformBufferCreate(size_bytes int64, data PackedByteArray) RID {
	return self.Runtime.RenderingDevice_uniform_buffer_create(RenderingDevice{self}, size_bytes, data)
}
func (self methodsRenderingDevice) StorageBufferCreate(size_bytes int64, data PackedByteArray, usage RenderingDeviceStorageBufferUsage) RID {
	return self.Runtime.RenderingDevice_storage_buffer_create(RenderingDevice{self}, size_bytes, data, usage)
}
func (self methodsRenderingDevice) TextureBufferCreate(size_bytes int64, format RenderingDeviceDataFormat, data PackedByteArray) RID {
	return self.Runtime.RenderingDevice_texture_buffer_create(RenderingDevice{self}, size_bytes, format, data)
}
func (self methodsRenderingDevice) UniformSetCreate(uniforms ArrayOf[RDUniform], shader RID, shader_set int64) RID {
	return self.Runtime.RenderingDevice_uniform_set_create(RenderingDevice{self}, uniforms, shader, shader_set)
}
func (self methodsRenderingDevice) UniformSetIsValid(uniform_set RID) bool {
	return self.Runtime.RenderingDevice_uniform_set_is_valid(RenderingDevice{self}, uniform_set)
}
func (self methodsRenderingDevice) BufferUpdate(buffer RID, offset int64, size_bytes int64, data PackedByteArray, post_barrier RenderingDeviceBarrierMask) int64 {
	return self.Runtime.RenderingDevice_buffer_update(RenderingDevice{self}, buffer, offset, size_bytes, data, post_barrier)
}
func (self methodsRenderingDevice) BufferClear(buffer RID, offset int64, size_bytes int64, post_barrier RenderingDeviceBarrierMask) int64 {
	return self.Runtime.RenderingDevice_buffer_clear(RenderingDevice{self}, buffer, offset, size_bytes, post_barrier)
}
func (self methodsRenderingDevice) BufferGetData(buffer RID, offset_bytes int64, size_bytes int64) PackedByteArray {
	return self.Runtime.RenderingDevice_buffer_get_data(RenderingDevice{self}, buffer, offset_bytes, size_bytes)
}
func (self methodsRenderingDevice) RenderPipelineCreate(shader RID, framebuffer_format int64, vertex_format int64, primitive RenderingDeviceRenderPrimitive, rasterization_state RDPipelineRasterizationState, multisample_state RDPipelineMultisampleState, stencil_state RDPipelineDepthStencilState, color_blend_state RDPipelineColorBlendState, dynamic_state_flags RenderingDevicePipelineDynamicStateFlags, for_render_pass int64, specialization_constants ArrayOf[RDPipelineSpecializationConstant]) RID {
	return self.Runtime.RenderingDevice_render_pipeline_create(RenderingDevice{self}, shader, framebuffer_format, vertex_format, primitive, rasterization_state, multisample_state, stencil_state, color_blend_state, dynamic_state_flags, for_render_pass, specialization_constants)
}
func (self methodsRenderingDevice) RenderPipelineIsValid(render_pipeline RID) bool {
	return self.Runtime.RenderingDevice_render_pipeline_is_valid(RenderingDevice{self}, render_pipeline)
}
func (self methodsRenderingDevice) ComputePipelineCreate(shader RID, specialization_constants ArrayOf[RDPipelineSpecializationConstant]) RID {
	return self.Runtime.RenderingDevice_compute_pipeline_create(RenderingDevice{self}, shader, specialization_constants)
}
func (self methodsRenderingDevice) ComputePipelineIsValid(compute_pipeline RID) bool {
	return self.Runtime.RenderingDevice_compute_pipeline_is_valid(RenderingDevice{self}, compute_pipeline)
}
func (self methodsRenderingDevice) ScreenGetWidth(screen int64) int64 {
	return self.Runtime.RenderingDevice_screen_get_width(RenderingDevice{self}, screen)
}
func (self methodsRenderingDevice) ScreenGetHeight(screen int64) int64 {
	return self.Runtime.RenderingDevice_screen_get_height(RenderingDevice{self}, screen)
}
func (self methodsRenderingDevice) ScreenGetFramebufferFormat() int64 {
	return self.Runtime.RenderingDevice_screen_get_framebuffer_format(RenderingDevice{self})
}
func (self methodsRenderingDevice) DrawListBeginForScreen(screen int64, clear_color Color) int64 {
	return self.Runtime.RenderingDevice_draw_list_begin_for_screen(RenderingDevice{self}, screen, clear_color)
}
func (self methodsRenderingDevice) DrawListBegin(framebuffer RID, initial_color_action RenderingDeviceInitialAction, final_color_action RenderingDeviceFinalAction, initial_depth_action RenderingDeviceInitialAction, final_depth_action RenderingDeviceFinalAction, clear_color_values PackedColorArray, clear_depth Float, clear_stencil int64, region Rect2, storage_textures ArrayOf[RID]) int64 {
	return self.Runtime.RenderingDevice_draw_list_begin(RenderingDevice{self}, framebuffer, initial_color_action, final_color_action, initial_depth_action, final_depth_action, clear_color_values, clear_depth, clear_stencil, region, storage_textures)
}
func (self methodsRenderingDevice) DrawListBeginSplit(framebuffer RID, splits int64, initial_color_action RenderingDeviceInitialAction, final_color_action RenderingDeviceFinalAction, initial_depth_action RenderingDeviceInitialAction, final_depth_action RenderingDeviceFinalAction, clear_color_values PackedColorArray, clear_depth Float, clear_stencil int64, region Rect2, storage_textures ArrayOf[RID]) PackedInt64Array {
	return self.Runtime.RenderingDevice_draw_list_begin_split(RenderingDevice{self}, framebuffer, splits, initial_color_action, final_color_action, initial_depth_action, final_depth_action, clear_color_values, clear_depth, clear_stencil, region, storage_textures)
}
func (self methodsRenderingDevice) DrawListSetBlendConstants(draw_list int64, color Color) {
	self.Runtime.RenderingDevice_draw_list_set_blend_constants(RenderingDevice{self}, draw_list, color)
}
func (self methodsRenderingDevice) DrawListBindRenderPipeline(draw_list int64, render_pipeline RID) {
	self.Runtime.RenderingDevice_draw_list_bind_render_pipeline(RenderingDevice{self}, draw_list, render_pipeline)
}
func (self methodsRenderingDevice) DrawListBindUniformSet(draw_list int64, uniform_set RID, set_index int64) {
	self.Runtime.RenderingDevice_draw_list_bind_uniform_set(RenderingDevice{self}, draw_list, uniform_set, set_index)
}
func (self methodsRenderingDevice) DrawListBindVertexArray(draw_list int64, vertex_array RID) {
	self.Runtime.RenderingDevice_draw_list_bind_vertex_array(RenderingDevice{self}, draw_list, vertex_array)
}
func (self methodsRenderingDevice) DrawListBindIndexArray(draw_list int64, index_array RID) {
	self.Runtime.RenderingDevice_draw_list_bind_index_array(RenderingDevice{self}, draw_list, index_array)
}
func (self methodsRenderingDevice) DrawListSetPushConstant(draw_list int64, buffer PackedByteArray, size_bytes int64) {
	self.Runtime.RenderingDevice_draw_list_set_push_constant(RenderingDevice{self}, draw_list, buffer, size_bytes)
}
func (self methodsRenderingDevice) DrawListDraw(draw_list int64, use_indices bool, instances int64, procedural_vertex_count int64) {
	self.Runtime.RenderingDevice_draw_list_draw(RenderingDevice{self}, draw_list, use_indices, instances, procedural_vertex_count)
}
func (self methodsRenderingDevice) DrawListEnableScissor(draw_list int64, rect Rect2) {
	self.Runtime.RenderingDevice_draw_list_enable_scissor(RenderingDevice{self}, draw_list, rect)
}
func (self methodsRenderingDevice) DrawListDisableScissor(draw_list int64) {
	self.Runtime.RenderingDevice_draw_list_disable_scissor(RenderingDevice{self}, draw_list)
}
func (self methodsRenderingDevice) DrawListSwitchToNextPass() int64 {
	return self.Runtime.RenderingDevice_draw_list_switch_to_next_pass(RenderingDevice{self})
}
func (self methodsRenderingDevice) DrawListSwitchToNextPassSplit(splits int64) PackedInt64Array {
	return self.Runtime.RenderingDevice_draw_list_switch_to_next_pass_split(RenderingDevice{self}, splits)
}
func (self methodsRenderingDevice) DrawListEnd(post_barrier RenderingDeviceBarrierMask) {
	self.Runtime.RenderingDevice_draw_list_end(RenderingDevice{self}, post_barrier)
}
func (self methodsRenderingDevice) ComputeListBegin(allow_draw_overlap bool) int64 {
	return self.Runtime.RenderingDevice_compute_list_begin(RenderingDevice{self}, allow_draw_overlap)
}
func (self methodsRenderingDevice) ComputeListBindComputePipeline(compute_list int64, compute_pipeline RID) {
	self.Runtime.RenderingDevice_compute_list_bind_compute_pipeline(RenderingDevice{self}, compute_list, compute_pipeline)
}
func (self methodsRenderingDevice) ComputeListSetPushConstant(compute_list int64, buffer PackedByteArray, size_bytes int64) {
	self.Runtime.RenderingDevice_compute_list_set_push_constant(RenderingDevice{self}, compute_list, buffer, size_bytes)
}
func (self methodsRenderingDevice) ComputeListBindUniformSet(compute_list int64, uniform_set RID, set_index int64) {
	self.Runtime.RenderingDevice_compute_list_bind_uniform_set(RenderingDevice{self}, compute_list, uniform_set, set_index)
}
func (self methodsRenderingDevice) ComputeListDispatch(compute_list int64, x_groups int64, y_groups int64, z_groups int64) {
	self.Runtime.RenderingDevice_compute_list_dispatch(RenderingDevice{self}, compute_list, x_groups, y_groups, z_groups)
}
func (self methodsRenderingDevice) ComputeListAddBarrier(compute_list int64) {
	self.Runtime.RenderingDevice_compute_list_add_barrier(RenderingDevice{self}, compute_list)
}
func (self methodsRenderingDevice) ComputeListEnd(post_barrier RenderingDeviceBarrierMask) {
	self.Runtime.RenderingDevice_compute_list_end(RenderingDevice{self}, post_barrier)
}
func (self methodsRenderingDevice) FreeRid(rid RID) {
	self.Runtime.RenderingDevice_free_rid(RenderingDevice{self}, rid)
}
func (self methodsRenderingDevice) CaptureTimestamp(name string) {
	self.Runtime.RenderingDevice_capture_timestamp(RenderingDevice{self}, name)
}
func (self methodsRenderingDevice) GetCapturedTimestampsCount() int64 {
	return self.Runtime.RenderingDevice_get_captured_timestamps_count(RenderingDevice{self})
}
func (self methodsRenderingDevice) GetCapturedTimestampsFrame() int64 {
	return self.Runtime.RenderingDevice_get_captured_timestamps_frame(RenderingDevice{self})
}
func (self methodsRenderingDevice) GetCapturedTimestampGpuTime(index int64) int64 {
	return self.Runtime.RenderingDevice_get_captured_timestamp_gpu_time(RenderingDevice{self}, index)
}
func (self methodsRenderingDevice) GetCapturedTimestampCpuTime(index int64) int64 {
	return self.Runtime.RenderingDevice_get_captured_timestamp_cpu_time(RenderingDevice{self}, index)
}
func (self methodsRenderingDevice) GetCapturedTimestampName(index int64) string {
	return self.Runtime.RenderingDevice_get_captured_timestamp_name(RenderingDevice{self}, index)
}
func (self methodsRenderingDevice) LimitGet(limit RenderingDeviceLimit) int64 {
	return self.Runtime.RenderingDevice_limit_get(RenderingDevice{self}, limit)
}
func (self methodsRenderingDevice) GetFrameDelay() int64 {
	return self.Runtime.RenderingDevice_get_frame_delay(RenderingDevice{self})
}
func (self methodsRenderingDevice) Submit() {
	self.Runtime.RenderingDevice_submit(RenderingDevice{self})
}
func (self methodsRenderingDevice) Sync() {
	self.Runtime.RenderingDevice_sync(RenderingDevice{self})
}
func (self methodsRenderingDevice) Barrier(from RenderingDeviceBarrierMask, to RenderingDeviceBarrierMask) {
	self.Runtime.RenderingDevice_barrier(RenderingDevice{self}, from, to)
}
func (self methodsRenderingDevice) FullBarrier() {
	self.Runtime.RenderingDevice_full_barrier(RenderingDevice{self})
}
func (self methodsRenderingDevice) CreateLocalDevice() RenderingDevice {
	return self.Runtime.RenderingDevice_create_local_device(RenderingDevice{self})
}
func (self methodsRenderingDevice) SetResourceName(id RID, name string) {
	self.Runtime.RenderingDevice_set_resource_name(RenderingDevice{self}, id, name)
}
func (self methodsRenderingDevice) DrawCommandBeginLabel(name string, color Color) {
	self.Runtime.RenderingDevice_draw_command_begin_label(RenderingDevice{self}, name, color)
}
func (self methodsRenderingDevice) DrawCommandInsertLabel(name string, color Color) {
	self.Runtime.RenderingDevice_draw_command_insert_label(RenderingDevice{self}, name, color)
}
func (self methodsRenderingDevice) DrawCommandEndLabel() {
	self.Runtime.RenderingDevice_draw_command_end_label(RenderingDevice{self})
}
func (self methodsRenderingDevice) GetDeviceVendorName() string {
	return self.Runtime.RenderingDevice_get_device_vendor_name(RenderingDevice{self})
}
func (self methodsRenderingDevice) GetDeviceName() string {
	return self.Runtime.RenderingDevice_get_device_name(RenderingDevice{self})
}
func (self methodsRenderingDevice) GetDevicePipelineCacheUuid() string {
	return self.Runtime.RenderingDevice_get_device_pipeline_cache_uuid(RenderingDevice{self})
}
func (self methodsRenderingDevice) GetMemoryUsage(atype RenderingDeviceMemoryType) int64 {
	return self.Runtime.RenderingDevice_get_memory_usage(RenderingDevice{self}, atype)
}
func (self methodsRenderingDevice) GetDriverResource(resource RenderingDeviceDriverResource, rid RID, index int64) int64 {
	return self.Runtime.RenderingDevice_get_driver_resource(RenderingDevice{self}, resource, rid, index)
}

type methodsRenderingServer struct {
	_ [0]*methodsRenderingServer
	class
}

func (self RenderingServer) Object() Object {
	var parent Object
	parent.class = self.class
	return parent
}
func (self methodsRenderingServer) Texture2dCreate(image Image) RID {
	return self.Runtime.RenderingServer_texture_2d_create(RenderingServer{self}, image)
}
func (self methodsRenderingServer) Texture2dLayeredCreate(layers ArrayOf[Image], layered_type RenderingServerTextureLayeredType) RID {
	return self.Runtime.RenderingServer_texture_2d_layered_create(RenderingServer{self}, layers, layered_type)
}
func (self methodsRenderingServer) Texture3dCreate(format ImageFormat, width int64, height int64, depth int64, mipmaps bool, data ArrayOf[Image]) RID {
	return self.Runtime.RenderingServer_texture_3d_create(RenderingServer{self}, format, width, height, depth, mipmaps, data)
}
func (self methodsRenderingServer) TextureProxyCreate(base RID) RID {
	return self.Runtime.RenderingServer_texture_proxy_create(RenderingServer{self}, base)
}
func (self methodsRenderingServer) Texture2dUpdate(texture RID, image Image, layer int64) {
	self.Runtime.RenderingServer_texture_2d_update(RenderingServer{self}, texture, image, layer)
}
func (self methodsRenderingServer) Texture3dUpdate(texture RID, data ArrayOf[Image]) {
	self.Runtime.RenderingServer_texture_3d_update(RenderingServer{self}, texture, data)
}
func (self methodsRenderingServer) TextureProxyUpdate(texture RID, proxy_to RID) {
	self.Runtime.RenderingServer_texture_proxy_update(RenderingServer{self}, texture, proxy_to)
}
func (self methodsRenderingServer) Texture2dPlaceholderCreate() RID {
	return self.Runtime.RenderingServer_texture_2d_placeholder_create(RenderingServer{self})
}
func (self methodsRenderingServer) Texture2dLayeredPlaceholderCreate(layered_type RenderingServerTextureLayeredType) RID {
	return self.Runtime.RenderingServer_texture_2d_layered_placeholder_create(RenderingServer{self}, layered_type)
}
func (self methodsRenderingServer) Texture3dPlaceholderCreate() RID {
	return self.Runtime.RenderingServer_texture_3d_placeholder_create(RenderingServer{self})
}
func (self methodsRenderingServer) Texture2dGet(texture RID) Image {
	return self.Runtime.RenderingServer_texture_2d_get(RenderingServer{self}, texture)
}
func (self methodsRenderingServer) Texture2dLayerGet(texture RID, layer int64) Image {
	return self.Runtime.RenderingServer_texture_2d_layer_get(RenderingServer{self}, texture, layer)
}
func (self methodsRenderingServer) Texture3dGet(texture RID) ArrayOf[Image] {
	return self.Runtime.RenderingServer_texture_3d_get(RenderingServer{self}, texture)
}
func (self methodsRenderingServer) TextureReplace(texture RID, by_texture RID) {
	self.Runtime.RenderingServer_texture_replace(RenderingServer{self}, texture, by_texture)
}
func (self methodsRenderingServer) TextureSetSizeOverride(texture RID, width int64, height int64) {
	self.Runtime.RenderingServer_texture_set_size_override(RenderingServer{self}, texture, width, height)
}
func (self methodsRenderingServer) TextureSetPath(texture RID, path string) {
	self.Runtime.RenderingServer_texture_set_path(RenderingServer{self}, texture, path)
}
func (self methodsRenderingServer) TextureGetPath(texture RID) string {
	return self.Runtime.RenderingServer_texture_get_path(RenderingServer{self}, texture)
}
func (self methodsRenderingServer) TextureGetFormat(texture RID) ImageFormat {
	return self.Runtime.RenderingServer_texture_get_format(RenderingServer{self}, texture)
}
func (self methodsRenderingServer) TextureSetForceRedrawIfVisible(texture RID, enable bool) {
	self.Runtime.RenderingServer_texture_set_force_redraw_if_visible(RenderingServer{self}, texture, enable)
}
func (self methodsRenderingServer) TextureRdCreate(rd_texture RID, layer_type RenderingServerTextureLayeredType) RID {
	return self.Runtime.RenderingServer_texture_rd_create(RenderingServer{self}, rd_texture, layer_type)
}
func (self methodsRenderingServer) TextureGetRdTexture(texture RID, srgb bool) RID {
	return self.Runtime.RenderingServer_texture_get_rd_texture(RenderingServer{self}, texture, srgb)
}
func (self methodsRenderingServer) TextureGetNativeHandle(texture RID, srgb bool) int64 {
	return self.Runtime.RenderingServer_texture_get_native_handle(RenderingServer{self}, texture, srgb)
}
func (self methodsRenderingServer) ShaderCreate() RID {
	return self.Runtime.RenderingServer_shader_create(RenderingServer{self})
}
func (self methodsRenderingServer) ShaderSetCode(shader RID, code string) {
	self.Runtime.RenderingServer_shader_set_code(RenderingServer{self}, shader, code)
}
func (self methodsRenderingServer) ShaderSetPathHint(shader RID, path string) {
	self.Runtime.RenderingServer_shader_set_path_hint(RenderingServer{self}, shader, path)
}
func (self methodsRenderingServer) ShaderGetCode(shader RID) string {
	return self.Runtime.RenderingServer_shader_get_code(RenderingServer{self}, shader)
}
func (self methodsRenderingServer) GetShaderParameterList(shader RID) ArrayOf[Dictionary] {
	return self.Runtime.RenderingServer_get_shader_parameter_list(RenderingServer{self}, shader)
}
func (self methodsRenderingServer) ShaderGetParameterDefault(shader RID, name string) any {
	return self.Runtime.RenderingServer_shader_get_parameter_default(RenderingServer{self}, shader, name)
}
func (self methodsRenderingServer) ShaderSetDefaultTextureParameter(shader RID, name string, texture RID, index int64) {
	self.Runtime.RenderingServer_shader_set_default_texture_parameter(RenderingServer{self}, shader, name, texture, index)
}
func (self methodsRenderingServer) ShaderGetDefaultTextureParameter(shader RID, name string, index int64) RID {
	return self.Runtime.RenderingServer_shader_get_default_texture_parameter(RenderingServer{self}, shader, name, index)
}
func (self methodsRenderingServer) MaterialCreate() RID {
	return self.Runtime.RenderingServer_material_create(RenderingServer{self})
}
func (self methodsRenderingServer) MaterialSetShader(shader_material RID, shader RID) {
	self.Runtime.RenderingServer_material_set_shader(RenderingServer{self}, shader_material, shader)
}
func (self methodsRenderingServer) MaterialSetParam(material RID, parameter string, value any) {
	self.Runtime.RenderingServer_material_set_param(RenderingServer{self}, material, parameter, value)
}
func (self methodsRenderingServer) MaterialGetParam(material RID, parameter string) any {
	return self.Runtime.RenderingServer_material_get_param(RenderingServer{self}, material, parameter)
}
func (self methodsRenderingServer) MaterialSetRenderPriority(material RID, priority int64) {
	self.Runtime.RenderingServer_material_set_render_priority(RenderingServer{self}, material, priority)
}
func (self methodsRenderingServer) MaterialSetNextPass(material RID, next_material RID) {
	self.Runtime.RenderingServer_material_set_next_pass(RenderingServer{self}, material, next_material)
}
func (self methodsRenderingServer) MeshCreateFromSurfaces(surfaces ArrayOf[Dictionary], blend_shape_count int64) RID {
	return self.Runtime.RenderingServer_mesh_create_from_surfaces(RenderingServer{self}, surfaces, blend_shape_count)
}
func (self methodsRenderingServer) MeshCreate() RID {
	return self.Runtime.RenderingServer_mesh_create(RenderingServer{self})
}
func (self methodsRenderingServer) MeshSurfaceGetFormatOffset(format RenderingServerArrayFormat, vertex_count int64, array_index int64) int64 {
	return self.Runtime.RenderingServer_mesh_surface_get_format_offset(RenderingServer{self}, format, vertex_count, array_index)
}
func (self methodsRenderingServer) MeshSurfaceGetFormatVertexStride(format RenderingServerArrayFormat, vertex_count int64) int64 {
	return self.Runtime.RenderingServer_mesh_surface_get_format_vertex_stride(RenderingServer{self}, format, vertex_count)
}
func (self methodsRenderingServer) MeshSurfaceGetFormatNormalTangentStride(format RenderingServerArrayFormat, vertex_count int64) int64 {
	return self.Runtime.RenderingServer_mesh_surface_get_format_normal_tangent_stride(RenderingServer{self}, format, vertex_count)
}
func (self methodsRenderingServer) MeshSurfaceGetFormatAttributeStride(format RenderingServerArrayFormat, vertex_count int64) int64 {
	return self.Runtime.RenderingServer_mesh_surface_get_format_attribute_stride(RenderingServer{self}, format, vertex_count)
}
func (self methodsRenderingServer) MeshSurfaceGetFormatSkinStride(format RenderingServerArrayFormat, vertex_count int64) int64 {
	return self.Runtime.RenderingServer_mesh_surface_get_format_skin_stride(RenderingServer{self}, format, vertex_count)
}
func (self methodsRenderingServer) MeshAddSurface(mesh RID, surface Dictionary) {
	self.Runtime.RenderingServer_mesh_add_surface(RenderingServer{self}, mesh, surface)
}
func (self methodsRenderingServer) MeshAddSurfaceFromArrays(mesh RID, primitive RenderingServerPrimitiveType, arrays Array, blend_shapes Array, lods Dictionary, compress_format RenderingServerArrayFormat) {
	self.Runtime.RenderingServer_mesh_add_surface_from_arrays(RenderingServer{self}, mesh, primitive, arrays, blend_shapes, lods, compress_format)
}
func (self methodsRenderingServer) MeshGetBlendShapeCount(mesh RID) int64 {
	return self.Runtime.RenderingServer_mesh_get_blend_shape_count(RenderingServer{self}, mesh)
}
func (self methodsRenderingServer) MeshSetBlendShapeMode(mesh RID, mode RenderingServerBlendShapeMode) {
	self.Runtime.RenderingServer_mesh_set_blend_shape_mode(RenderingServer{self}, mesh, mode)
}
func (self methodsRenderingServer) MeshGetBlendShapeMode(mesh RID) RenderingServerBlendShapeMode {
	return self.Runtime.RenderingServer_mesh_get_blend_shape_mode(RenderingServer{self}, mesh)
}
func (self methodsRenderingServer) MeshSurfaceSetMaterial(mesh RID, surface int64, material RID) {
	self.Runtime.RenderingServer_mesh_surface_set_material(RenderingServer{self}, mesh, surface, material)
}
func (self methodsRenderingServer) MeshSurfaceGetMaterial(mesh RID, surface int64) RID {
	return self.Runtime.RenderingServer_mesh_surface_get_material(RenderingServer{self}, mesh, surface)
}
func (self methodsRenderingServer) MeshGetSurface(mesh RID, surface int64) Dictionary {
	return self.Runtime.RenderingServer_mesh_get_surface(RenderingServer{self}, mesh, surface)
}
func (self methodsRenderingServer) MeshSurfaceGetArrays(mesh RID, surface int64) Array {
	return self.Runtime.RenderingServer_mesh_surface_get_arrays(RenderingServer{self}, mesh, surface)
}
func (self methodsRenderingServer) MeshSurfaceGetBlendShapeArrays(mesh RID, surface int64) ArrayOf[Array] {
	return self.Runtime.RenderingServer_mesh_surface_get_blend_shape_arrays(RenderingServer{self}, mesh, surface)
}
func (self methodsRenderingServer) MeshGetSurfaceCount(mesh RID) int64 {
	return self.Runtime.RenderingServer_mesh_get_surface_count(RenderingServer{self}, mesh)
}
func (self methodsRenderingServer) MeshSetCustomAabb(mesh RID, aabb AABB) {
	self.Runtime.RenderingServer_mesh_set_custom_aabb(RenderingServer{self}, mesh, aabb)
}
func (self methodsRenderingServer) MeshGetCustomAabb(mesh RID) AABB {
	return self.Runtime.RenderingServer_mesh_get_custom_aabb(RenderingServer{self}, mesh)
}
func (self methodsRenderingServer) MeshClear(mesh RID) {
	self.Runtime.RenderingServer_mesh_clear(RenderingServer{self}, mesh)
}
func (self methodsRenderingServer) MeshSurfaceUpdateVertexRegion(mesh RID, surface int64, offset int64, data PackedByteArray) {
	self.Runtime.RenderingServer_mesh_surface_update_vertex_region(RenderingServer{self}, mesh, surface, offset, data)
}
func (self methodsRenderingServer) MeshSurfaceUpdateAttributeRegion(mesh RID, surface int64, offset int64, data PackedByteArray) {
	self.Runtime.RenderingServer_mesh_surface_update_attribute_region(RenderingServer{self}, mesh, surface, offset, data)
}
func (self methodsRenderingServer) MeshSurfaceUpdateSkinRegion(mesh RID, surface int64, offset int64, data PackedByteArray) {
	self.Runtime.RenderingServer_mesh_surface_update_skin_region(RenderingServer{self}, mesh, surface, offset, data)
}
func (self methodsRenderingServer) MeshSetShadowMesh(mesh RID, shadow_mesh RID) {
	self.Runtime.RenderingServer_mesh_set_shadow_mesh(RenderingServer{self}, mesh, shadow_mesh)
}
func (self methodsRenderingServer) MultimeshCreate() RID {
	return self.Runtime.RenderingServer_multimesh_create(RenderingServer{self})
}
func (self methodsRenderingServer) MultimeshAllocateData(multimesh RID, instances int64, transform_format RenderingServerMultimeshTransformFormat, color_format bool, custom_data_format bool) {
	self.Runtime.RenderingServer_multimesh_allocate_data(RenderingServer{self}, multimesh, instances, transform_format, color_format, custom_data_format)
}
func (self methodsRenderingServer) MultimeshGetInstanceCount(multimesh RID) int64 {
	return self.Runtime.RenderingServer_multimesh_get_instance_count(RenderingServer{self}, multimesh)
}
func (self methodsRenderingServer) MultimeshSetMesh(multimesh RID, mesh RID) {
	self.Runtime.RenderingServer_multimesh_set_mesh(RenderingServer{self}, multimesh, mesh)
}
func (self methodsRenderingServer) MultimeshInstanceSetTransform(multimesh RID, index int64, transform Transform3D) {
	self.Runtime.RenderingServer_multimesh_instance_set_transform(RenderingServer{self}, multimesh, index, transform)
}
func (self methodsRenderingServer) MultimeshInstanceSetTransform2d(multimesh RID, index int64, transform Transform2D) {
	self.Runtime.RenderingServer_multimesh_instance_set_transform_2d(RenderingServer{self}, multimesh, index, transform)
}
func (self methodsRenderingServer) MultimeshInstanceSetColor(multimesh RID, index int64, color Color) {
	self.Runtime.RenderingServer_multimesh_instance_set_color(RenderingServer{self}, multimesh, index, color)
}
func (self methodsRenderingServer) MultimeshInstanceSetCustomData(multimesh RID, index int64, custom_data Color) {
	self.Runtime.RenderingServer_multimesh_instance_set_custom_data(RenderingServer{self}, multimesh, index, custom_data)
}
func (self methodsRenderingServer) MultimeshGetMesh(multimesh RID) RID {
	return self.Runtime.RenderingServer_multimesh_get_mesh(RenderingServer{self}, multimesh)
}
func (self methodsRenderingServer) MultimeshGetAabb(multimesh RID) AABB {
	return self.Runtime.RenderingServer_multimesh_get_aabb(RenderingServer{self}, multimesh)
}
func (self methodsRenderingServer) MultimeshInstanceGetTransform(multimesh RID, index int64) Transform3D {
	return self.Runtime.RenderingServer_multimesh_instance_get_transform(RenderingServer{self}, multimesh, index)
}
func (self methodsRenderingServer) MultimeshInstanceGetTransform2d(multimesh RID, index int64) Transform2D {
	return self.Runtime.RenderingServer_multimesh_instance_get_transform_2d(RenderingServer{self}, multimesh, index)
}
func (self methodsRenderingServer) MultimeshInstanceGetColor(multimesh RID, index int64) Color {
	return self.Runtime.RenderingServer_multimesh_instance_get_color(RenderingServer{self}, multimesh, index)
}
func (self methodsRenderingServer) MultimeshInstanceGetCustomData(multimesh RID, index int64) Color {
	return self.Runtime.RenderingServer_multimesh_instance_get_custom_data(RenderingServer{self}, multimesh, index)
}
func (self methodsRenderingServer) MultimeshSetVisibleInstances(multimesh RID, visible int64) {
	self.Runtime.RenderingServer_multimesh_set_visible_instances(RenderingServer{self}, multimesh, visible)
}
func (self methodsRenderingServer) MultimeshGetVisibleInstances(multimesh RID) int64 {
	return self.Runtime.RenderingServer_multimesh_get_visible_instances(RenderingServer{self}, multimesh)
}
func (self methodsRenderingServer) MultimeshSetBuffer(multimesh RID, buffer PackedFloat32Array) {
	self.Runtime.RenderingServer_multimesh_set_buffer(RenderingServer{self}, multimesh, buffer)
}
func (self methodsRenderingServer) MultimeshGetBuffer(multimesh RID) PackedFloat32Array {
	return self.Runtime.RenderingServer_multimesh_get_buffer(RenderingServer{self}, multimesh)
}
func (self methodsRenderingServer) SkeletonCreate() RID {
	return self.Runtime.RenderingServer_skeleton_create(RenderingServer{self})
}
func (self methodsRenderingServer) SkeletonAllocateData(skeleton RID, bones int64, is_2d_skeleton bool) {
	self.Runtime.RenderingServer_skeleton_allocate_data(RenderingServer{self}, skeleton, bones, is_2d_skeleton)
}
func (self methodsRenderingServer) SkeletonGetBoneCount(skeleton RID) int64 {
	return self.Runtime.RenderingServer_skeleton_get_bone_count(RenderingServer{self}, skeleton)
}
func (self methodsRenderingServer) SkeletonBoneSetTransform(skeleton RID, bone int64, transform Transform3D) {
	self.Runtime.RenderingServer_skeleton_bone_set_transform(RenderingServer{self}, skeleton, bone, transform)
}
func (self methodsRenderingServer) SkeletonBoneGetTransform(skeleton RID, bone int64) Transform3D {
	return self.Runtime.RenderingServer_skeleton_bone_get_transform(RenderingServer{self}, skeleton, bone)
}
func (self methodsRenderingServer) SkeletonBoneSetTransform2d(skeleton RID, bone int64, transform Transform2D) {
	self.Runtime.RenderingServer_skeleton_bone_set_transform_2d(RenderingServer{self}, skeleton, bone, transform)
}
func (self methodsRenderingServer) SkeletonBoneGetTransform2d(skeleton RID, bone int64) Transform2D {
	return self.Runtime.RenderingServer_skeleton_bone_get_transform_2d(RenderingServer{self}, skeleton, bone)
}
func (self methodsRenderingServer) SkeletonSetBaseTransform2d(skeleton RID, base_transform Transform2D) {
	self.Runtime.RenderingServer_skeleton_set_base_transform_2d(RenderingServer{self}, skeleton, base_transform)
}
func (self methodsRenderingServer) DirectionalLightCreate() RID {
	return self.Runtime.RenderingServer_directional_light_create(RenderingServer{self})
}
func (self methodsRenderingServer) OmniLightCreate() RID {
	return self.Runtime.RenderingServer_omni_light_create(RenderingServer{self})
}
func (self methodsRenderingServer) SpotLightCreate() RID {
	return self.Runtime.RenderingServer_spot_light_create(RenderingServer{self})
}
func (self methodsRenderingServer) LightSetColor(light RID, color Color) {
	self.Runtime.RenderingServer_light_set_color(RenderingServer{self}, light, color)
}
func (self methodsRenderingServer) LightSetParam(light RID, param RenderingServerLightParam, value Float) {
	self.Runtime.RenderingServer_light_set_param(RenderingServer{self}, light, param, value)
}
func (self methodsRenderingServer) LightSetShadow(light RID, enabled bool) {
	self.Runtime.RenderingServer_light_set_shadow(RenderingServer{self}, light, enabled)
}
func (self methodsRenderingServer) LightSetProjector(light RID, texture RID) {
	self.Runtime.RenderingServer_light_set_projector(RenderingServer{self}, light, texture)
}
func (self methodsRenderingServer) LightSetNegative(light RID, enable bool) {
	self.Runtime.RenderingServer_light_set_negative(RenderingServer{self}, light, enable)
}
func (self methodsRenderingServer) LightSetCullMask(light RID, mask int64) {
	self.Runtime.RenderingServer_light_set_cull_mask(RenderingServer{self}, light, mask)
}
func (self methodsRenderingServer) LightSetDistanceFade(decal RID, enabled bool, begin Float, shadow Float, length Float) {
	self.Runtime.RenderingServer_light_set_distance_fade(RenderingServer{self}, decal, enabled, begin, shadow, length)
}
func (self methodsRenderingServer) LightSetReverseCullFaceMode(light RID, enabled bool) {
	self.Runtime.RenderingServer_light_set_reverse_cull_face_mode(RenderingServer{self}, light, enabled)
}
func (self methodsRenderingServer) LightSetBakeMode(light RID, bake_mode RenderingServerLightBakeMode) {
	self.Runtime.RenderingServer_light_set_bake_mode(RenderingServer{self}, light, bake_mode)
}
func (self methodsRenderingServer) LightSetMaxSdfgiCascade(light RID, cascade int64) {
	self.Runtime.RenderingServer_light_set_max_sdfgi_cascade(RenderingServer{self}, light, cascade)
}
func (self methodsRenderingServer) LightOmniSetShadowMode(light RID, mode RenderingServerLightOmniShadowMode) {
	self.Runtime.RenderingServer_light_omni_set_shadow_mode(RenderingServer{self}, light, mode)
}
func (self methodsRenderingServer) LightDirectionalSetShadowMode(light RID, mode RenderingServerLightDirectionalShadowMode) {
	self.Runtime.RenderingServer_light_directional_set_shadow_mode(RenderingServer{self}, light, mode)
}
func (self methodsRenderingServer) LightDirectionalSetBlendSplits(light RID, enable bool) {
	self.Runtime.RenderingServer_light_directional_set_blend_splits(RenderingServer{self}, light, enable)
}
func (self methodsRenderingServer) LightDirectionalSetSkyMode(light RID, mode RenderingServerLightDirectionalSkyMode) {
	self.Runtime.RenderingServer_light_directional_set_sky_mode(RenderingServer{self}, light, mode)
}
func (self methodsRenderingServer) LightProjectorsSetFilter(filter RenderingServerLightProjectorFilter) {
	self.Runtime.RenderingServer_light_projectors_set_filter(RenderingServer{self}, filter)
}
func (self methodsRenderingServer) PositionalSoftShadowFilterSetQuality(quality RenderingServerShadowQuality) {
	self.Runtime.RenderingServer_positional_soft_shadow_filter_set_quality(RenderingServer{self}, quality)
}
func (self methodsRenderingServer) DirectionalSoftShadowFilterSetQuality(quality RenderingServerShadowQuality) {
	self.Runtime.RenderingServer_directional_soft_shadow_filter_set_quality(RenderingServer{self}, quality)
}
func (self methodsRenderingServer) DirectionalShadowAtlasSetSize(size int64, is_16bits bool) {
	self.Runtime.RenderingServer_directional_shadow_atlas_set_size(RenderingServer{self}, size, is_16bits)
}
func (self methodsRenderingServer) ReflectionProbeCreate() RID {
	return self.Runtime.RenderingServer_reflection_probe_create(RenderingServer{self})
}
func (self methodsRenderingServer) ReflectionProbeSetUpdateMode(probe RID, mode RenderingServerReflectionProbeUpdateMode) {
	self.Runtime.RenderingServer_reflection_probe_set_update_mode(RenderingServer{self}, probe, mode)
}
func (self methodsRenderingServer) ReflectionProbeSetIntensity(probe RID, intensity Float) {
	self.Runtime.RenderingServer_reflection_probe_set_intensity(RenderingServer{self}, probe, intensity)
}
func (self methodsRenderingServer) ReflectionProbeSetAmbientMode(probe RID, mode RenderingServerReflectionProbeAmbientMode) {
	self.Runtime.RenderingServer_reflection_probe_set_ambient_mode(RenderingServer{self}, probe, mode)
}
func (self methodsRenderingServer) ReflectionProbeSetAmbientColor(probe RID, color Color) {
	self.Runtime.RenderingServer_reflection_probe_set_ambient_color(RenderingServer{self}, probe, color)
}
func (self methodsRenderingServer) ReflectionProbeSetAmbientEnergy(probe RID, energy Float) {
	self.Runtime.RenderingServer_reflection_probe_set_ambient_energy(RenderingServer{self}, probe, energy)
}
func (self methodsRenderingServer) ReflectionProbeSetMaxDistance(probe RID, distance Float) {
	self.Runtime.RenderingServer_reflection_probe_set_max_distance(RenderingServer{self}, probe, distance)
}
func (self methodsRenderingServer) ReflectionProbeSetSize(probe RID, size Vector3) {
	self.Runtime.RenderingServer_reflection_probe_set_size(RenderingServer{self}, probe, size)
}
func (self methodsRenderingServer) ReflectionProbeSetOriginOffset(probe RID, offset Vector3) {
	self.Runtime.RenderingServer_reflection_probe_set_origin_offset(RenderingServer{self}, probe, offset)
}
func (self methodsRenderingServer) ReflectionProbeSetAsInterior(probe RID, enable bool) {
	self.Runtime.RenderingServer_reflection_probe_set_as_interior(RenderingServer{self}, probe, enable)
}
func (self methodsRenderingServer) ReflectionProbeSetEnableBoxProjection(probe RID, enable bool) {
	self.Runtime.RenderingServer_reflection_probe_set_enable_box_projection(RenderingServer{self}, probe, enable)
}
func (self methodsRenderingServer) ReflectionProbeSetEnableShadows(probe RID, enable bool) {
	self.Runtime.RenderingServer_reflection_probe_set_enable_shadows(RenderingServer{self}, probe, enable)
}
func (self methodsRenderingServer) ReflectionProbeSetCullMask(probe RID, layers int64) {
	self.Runtime.RenderingServer_reflection_probe_set_cull_mask(RenderingServer{self}, probe, layers)
}
func (self methodsRenderingServer) ReflectionProbeSetResolution(probe RID, resolution int64) {
	self.Runtime.RenderingServer_reflection_probe_set_resolution(RenderingServer{self}, probe, resolution)
}
func (self methodsRenderingServer) ReflectionProbeSetMeshLodThreshold(probe RID, pixels Float) {
	self.Runtime.RenderingServer_reflection_probe_set_mesh_lod_threshold(RenderingServer{self}, probe, pixels)
}
func (self methodsRenderingServer) DecalCreate() RID {
	return self.Runtime.RenderingServer_decal_create(RenderingServer{self})
}
func (self methodsRenderingServer) DecalSetSize(decal RID, size Vector3) {
	self.Runtime.RenderingServer_decal_set_size(RenderingServer{self}, decal, size)
}
func (self methodsRenderingServer) DecalSetTexture(decal RID, atype RenderingServerDecalTexture, texture RID) {
	self.Runtime.RenderingServer_decal_set_texture(RenderingServer{self}, decal, atype, texture)
}
func (self methodsRenderingServer) DecalSetEmissionEnergy(decal RID, energy Float) {
	self.Runtime.RenderingServer_decal_set_emission_energy(RenderingServer{self}, decal, energy)
}
func (self methodsRenderingServer) DecalSetAlbedoMix(decal RID, albedo_mix Float) {
	self.Runtime.RenderingServer_decal_set_albedo_mix(RenderingServer{self}, decal, albedo_mix)
}
func (self methodsRenderingServer) DecalSetModulate(decal RID, color Color) {
	self.Runtime.RenderingServer_decal_set_modulate(RenderingServer{self}, decal, color)
}
func (self methodsRenderingServer) DecalSetCullMask(decal RID, mask int64) {
	self.Runtime.RenderingServer_decal_set_cull_mask(RenderingServer{self}, decal, mask)
}
func (self methodsRenderingServer) DecalSetDistanceFade(decal RID, enabled bool, begin Float, length Float) {
	self.Runtime.RenderingServer_decal_set_distance_fade(RenderingServer{self}, decal, enabled, begin, length)
}
func (self methodsRenderingServer) DecalSetFade(decal RID, above Float, below Float) {
	self.Runtime.RenderingServer_decal_set_fade(RenderingServer{self}, decal, above, below)
}
func (self methodsRenderingServer) DecalSetNormalFade(decal RID, fade Float) {
	self.Runtime.RenderingServer_decal_set_normal_fade(RenderingServer{self}, decal, fade)
}
func (self methodsRenderingServer) DecalsSetFilter(filter RenderingServerDecalFilter) {
	self.Runtime.RenderingServer_decals_set_filter(RenderingServer{self}, filter)
}
func (self methodsRenderingServer) GiSetUseHalfResolution(half_resolution bool) {
	self.Runtime.RenderingServer_gi_set_use_half_resolution(RenderingServer{self}, half_resolution)
}
func (self methodsRenderingServer) VoxelGiCreate() RID {
	return self.Runtime.RenderingServer_voxel_gi_create(RenderingServer{self})
}
func (self methodsRenderingServer) VoxelGiAllocateData(voxel_gi RID, to_cell_xform Transform3D, aabb AABB, octree_size Vector3i, octree_cells PackedByteArray, data_cells PackedByteArray, distance_field PackedByteArray, level_counts PackedInt32Array) {
	self.Runtime.RenderingServer_voxel_gi_allocate_data(RenderingServer{self}, voxel_gi, to_cell_xform, aabb, octree_size, octree_cells, data_cells, distance_field, level_counts)
}
func (self methodsRenderingServer) VoxelGiGetOctreeSize(voxel_gi RID) Vector3i {
	return self.Runtime.RenderingServer_voxel_gi_get_octree_size(RenderingServer{self}, voxel_gi)
}
func (self methodsRenderingServer) VoxelGiGetOctreeCells(voxel_gi RID) PackedByteArray {
	return self.Runtime.RenderingServer_voxel_gi_get_octree_cells(RenderingServer{self}, voxel_gi)
}
func (self methodsRenderingServer) VoxelGiGetDataCells(voxel_gi RID) PackedByteArray {
	return self.Runtime.RenderingServer_voxel_gi_get_data_cells(RenderingServer{self}, voxel_gi)
}
func (self methodsRenderingServer) VoxelGiGetDistanceField(voxel_gi RID) PackedByteArray {
	return self.Runtime.RenderingServer_voxel_gi_get_distance_field(RenderingServer{self}, voxel_gi)
}
func (self methodsRenderingServer) VoxelGiGetLevelCounts(voxel_gi RID) PackedInt32Array {
	return self.Runtime.RenderingServer_voxel_gi_get_level_counts(RenderingServer{self}, voxel_gi)
}
func (self methodsRenderingServer) VoxelGiGetToCellXform(voxel_gi RID) Transform3D {
	return self.Runtime.RenderingServer_voxel_gi_get_to_cell_xform(RenderingServer{self}, voxel_gi)
}
func (self methodsRenderingServer) VoxelGiSetDynamicRange(voxel_gi RID, arange Float) {
	self.Runtime.RenderingServer_voxel_gi_set_dynamic_range(RenderingServer{self}, voxel_gi, arange)
}
func (self methodsRenderingServer) VoxelGiSetPropagation(voxel_gi RID, amount Float) {
	self.Runtime.RenderingServer_voxel_gi_set_propagation(RenderingServer{self}, voxel_gi, amount)
}
func (self methodsRenderingServer) VoxelGiSetEnergy(voxel_gi RID, energy Float) {
	self.Runtime.RenderingServer_voxel_gi_set_energy(RenderingServer{self}, voxel_gi, energy)
}
func (self methodsRenderingServer) VoxelGiSetBakedExposureNormalization(voxel_gi RID, baked_exposure Float) {
	self.Runtime.RenderingServer_voxel_gi_set_baked_exposure_normalization(RenderingServer{self}, voxel_gi, baked_exposure)
}
func (self methodsRenderingServer) VoxelGiSetBias(voxel_gi RID, bias Float) {
	self.Runtime.RenderingServer_voxel_gi_set_bias(RenderingServer{self}, voxel_gi, bias)
}
func (self methodsRenderingServer) VoxelGiSetNormalBias(voxel_gi RID, bias Float) {
	self.Runtime.RenderingServer_voxel_gi_set_normal_bias(RenderingServer{self}, voxel_gi, bias)
}
func (self methodsRenderingServer) VoxelGiSetInterior(voxel_gi RID, enable bool) {
	self.Runtime.RenderingServer_voxel_gi_set_interior(RenderingServer{self}, voxel_gi, enable)
}
func (self methodsRenderingServer) VoxelGiSetUseTwoBounces(voxel_gi RID, enable bool) {
	self.Runtime.RenderingServer_voxel_gi_set_use_two_bounces(RenderingServer{self}, voxel_gi, enable)
}
func (self methodsRenderingServer) VoxelGiSetQuality(quality RenderingServerVoxelGIQuality) {
	self.Runtime.RenderingServer_voxel_gi_set_quality(RenderingServer{self}, quality)
}
func (self methodsRenderingServer) LightmapCreate() RID {
	return self.Runtime.RenderingServer_lightmap_create(RenderingServer{self})
}
func (self methodsRenderingServer) LightmapSetTextures(lightmap RID, light RID, uses_sh bool) {
	self.Runtime.RenderingServer_lightmap_set_textures(RenderingServer{self}, lightmap, light, uses_sh)
}
func (self methodsRenderingServer) LightmapSetProbeBounds(lightmap RID, bounds AABB) {
	self.Runtime.RenderingServer_lightmap_set_probe_bounds(RenderingServer{self}, lightmap, bounds)
}
func (self methodsRenderingServer) LightmapSetProbeInterior(lightmap RID, interior bool) {
	self.Runtime.RenderingServer_lightmap_set_probe_interior(RenderingServer{self}, lightmap, interior)
}
func (self methodsRenderingServer) LightmapSetProbeCaptureData(lightmap RID, points PackedVector3Array, point_sh PackedColorArray, tetrahedra PackedInt32Array, bsp_tree PackedInt32Array) {
	self.Runtime.RenderingServer_lightmap_set_probe_capture_data(RenderingServer{self}, lightmap, points, point_sh, tetrahedra, bsp_tree)
}
func (self methodsRenderingServer) LightmapGetProbeCapturePoints(lightmap RID) PackedVector3Array {
	return self.Runtime.RenderingServer_lightmap_get_probe_capture_points(RenderingServer{self}, lightmap)
}
func (self methodsRenderingServer) LightmapGetProbeCaptureSh(lightmap RID) PackedColorArray {
	return self.Runtime.RenderingServer_lightmap_get_probe_capture_sh(RenderingServer{self}, lightmap)
}
func (self methodsRenderingServer) LightmapGetProbeCaptureTetrahedra(lightmap RID) PackedInt32Array {
	return self.Runtime.RenderingServer_lightmap_get_probe_capture_tetrahedra(RenderingServer{self}, lightmap)
}
func (self methodsRenderingServer) LightmapGetProbeCaptureBspTree(lightmap RID) PackedInt32Array {
	return self.Runtime.RenderingServer_lightmap_get_probe_capture_bsp_tree(RenderingServer{self}, lightmap)
}
func (self methodsRenderingServer) LightmapSetBakedExposureNormalization(lightmap RID, baked_exposure Float) {
	self.Runtime.RenderingServer_lightmap_set_baked_exposure_normalization(RenderingServer{self}, lightmap, baked_exposure)
}
func (self methodsRenderingServer) LightmapSetProbeCaptureUpdateSpeed(speed Float) {
	self.Runtime.RenderingServer_lightmap_set_probe_capture_update_speed(RenderingServer{self}, speed)
}
func (self methodsRenderingServer) ParticlesCreate() RID {
	return self.Runtime.RenderingServer_particles_create(RenderingServer{self})
}
func (self methodsRenderingServer) ParticlesSetMode(particles RID, mode RenderingServerParticlesMode) {
	self.Runtime.RenderingServer_particles_set_mode(RenderingServer{self}, particles, mode)
}
func (self methodsRenderingServer) ParticlesSetEmitting(particles RID, emitting bool) {
	self.Runtime.RenderingServer_particles_set_emitting(RenderingServer{self}, particles, emitting)
}
func (self methodsRenderingServer) ParticlesGetEmitting(particles RID) bool {
	return self.Runtime.RenderingServer_particles_get_emitting(RenderingServer{self}, particles)
}
func (self methodsRenderingServer) ParticlesSetAmount(particles RID, amount int64) {
	self.Runtime.RenderingServer_particles_set_amount(RenderingServer{self}, particles, amount)
}
func (self methodsRenderingServer) ParticlesSetAmountRatio(particles RID, ratio Float) {
	self.Runtime.RenderingServer_particles_set_amount_ratio(RenderingServer{self}, particles, ratio)
}
func (self methodsRenderingServer) ParticlesSetLifetime(particles RID, lifetime Float) {
	self.Runtime.RenderingServer_particles_set_lifetime(RenderingServer{self}, particles, lifetime)
}
func (self methodsRenderingServer) ParticlesSetOneShot(particles RID, one_shot bool) {
	self.Runtime.RenderingServer_particles_set_one_shot(RenderingServer{self}, particles, one_shot)
}
func (self methodsRenderingServer) ParticlesSetPreProcessTime(particles RID, time Float) {
	self.Runtime.RenderingServer_particles_set_pre_process_time(RenderingServer{self}, particles, time)
}
func (self methodsRenderingServer) ParticlesSetExplosivenessRatio(particles RID, ratio Float) {
	self.Runtime.RenderingServer_particles_set_explosiveness_ratio(RenderingServer{self}, particles, ratio)
}
func (self methodsRenderingServer) ParticlesSetRandomnessRatio(particles RID, ratio Float) {
	self.Runtime.RenderingServer_particles_set_randomness_ratio(RenderingServer{self}, particles, ratio)
}
func (self methodsRenderingServer) ParticlesSetInterpToEnd(particles RID, factor Float) {
	self.Runtime.RenderingServer_particles_set_interp_to_end(RenderingServer{self}, particles, factor)
}
func (self methodsRenderingServer) ParticlesSetEmitterVelocity(particles RID, velocity Vector3) {
	self.Runtime.RenderingServer_particles_set_emitter_velocity(RenderingServer{self}, particles, velocity)
}
func (self methodsRenderingServer) ParticlesSetCustomAabb(particles RID, aabb AABB) {
	self.Runtime.RenderingServer_particles_set_custom_aabb(RenderingServer{self}, particles, aabb)
}
func (self methodsRenderingServer) ParticlesSetSpeedScale(particles RID, scale Float) {
	self.Runtime.RenderingServer_particles_set_speed_scale(RenderingServer{self}, particles, scale)
}
func (self methodsRenderingServer) ParticlesSetUseLocalCoordinates(particles RID, enable bool) {
	self.Runtime.RenderingServer_particles_set_use_local_coordinates(RenderingServer{self}, particles, enable)
}
func (self methodsRenderingServer) ParticlesSetProcessMaterial(particles RID, material RID) {
	self.Runtime.RenderingServer_particles_set_process_material(RenderingServer{self}, particles, material)
}
func (self methodsRenderingServer) ParticlesSetFixedFps(particles RID, fps int64) {
	self.Runtime.RenderingServer_particles_set_fixed_fps(RenderingServer{self}, particles, fps)
}
func (self methodsRenderingServer) ParticlesSetInterpolate(particles RID, enable bool) {
	self.Runtime.RenderingServer_particles_set_interpolate(RenderingServer{self}, particles, enable)
}
func (self methodsRenderingServer) ParticlesSetFractionalDelta(particles RID, enable bool) {
	self.Runtime.RenderingServer_particles_set_fractional_delta(RenderingServer{self}, particles, enable)
}
func (self methodsRenderingServer) ParticlesSetCollisionBaseSize(particles RID, size Float) {
	self.Runtime.RenderingServer_particles_set_collision_base_size(RenderingServer{self}, particles, size)
}
func (self methodsRenderingServer) ParticlesSetTransformAlign(particles RID, align RenderingServerParticlesTransformAlign) {
	self.Runtime.RenderingServer_particles_set_transform_align(RenderingServer{self}, particles, align)
}
func (self methodsRenderingServer) ParticlesSetTrails(particles RID, enable bool, length_sec Float) {
	self.Runtime.RenderingServer_particles_set_trails(RenderingServer{self}, particles, enable, length_sec)
}
func (self methodsRenderingServer) ParticlesSetTrailBindPoses(particles RID, bind_poses ArrayOf[Transform3D]) {
	self.Runtime.RenderingServer_particles_set_trail_bind_poses(RenderingServer{self}, particles, bind_poses)
}
func (self methodsRenderingServer) ParticlesIsInactive(particles RID) bool {
	return self.Runtime.RenderingServer_particles_is_inactive(RenderingServer{self}, particles)
}
func (self methodsRenderingServer) ParticlesRequestProcess(particles RID) {
	self.Runtime.RenderingServer_particles_request_process(RenderingServer{self}, particles)
}
func (self methodsRenderingServer) ParticlesRestart(particles RID) {
	self.Runtime.RenderingServer_particles_restart(RenderingServer{self}, particles)
}
func (self methodsRenderingServer) ParticlesSetSubemitter(particles RID, subemitter_particles RID) {
	self.Runtime.RenderingServer_particles_set_subemitter(RenderingServer{self}, particles, subemitter_particles)
}
func (self methodsRenderingServer) ParticlesEmit(particles RID, transform Transform3D, velocity Vector3, color Color, custom Color, emit_flags int64) {
	self.Runtime.RenderingServer_particles_emit(RenderingServer{self}, particles, transform, velocity, color, custom, emit_flags)
}
func (self methodsRenderingServer) ParticlesSetDrawOrder(particles RID, order RenderingServerParticlesDrawOrder) {
	self.Runtime.RenderingServer_particles_set_draw_order(RenderingServer{self}, particles, order)
}
func (self methodsRenderingServer) ParticlesSetDrawPasses(particles RID, count int64) {
	self.Runtime.RenderingServer_particles_set_draw_passes(RenderingServer{self}, particles, count)
}
func (self methodsRenderingServer) ParticlesSetDrawPassMesh(particles RID, pass int64, mesh RID) {
	self.Runtime.RenderingServer_particles_set_draw_pass_mesh(RenderingServer{self}, particles, pass, mesh)
}
func (self methodsRenderingServer) ParticlesGetCurrentAabb(particles RID) AABB {
	return self.Runtime.RenderingServer_particles_get_current_aabb(RenderingServer{self}, particles)
}
func (self methodsRenderingServer) ParticlesSetEmissionTransform(particles RID, transform Transform3D) {
	self.Runtime.RenderingServer_particles_set_emission_transform(RenderingServer{self}, particles, transform)
}
func (self methodsRenderingServer) ParticlesCollisionCreate() RID {
	return self.Runtime.RenderingServer_particles_collision_create(RenderingServer{self})
}
func (self methodsRenderingServer) ParticlesCollisionSetCollisionType(particles_collision RID, atype RenderingServerParticlesCollisionType) {
	self.Runtime.RenderingServer_particles_collision_set_collision_type(RenderingServer{self}, particles_collision, atype)
}
func (self methodsRenderingServer) ParticlesCollisionSetCullMask(particles_collision RID, mask int64) {
	self.Runtime.RenderingServer_particles_collision_set_cull_mask(RenderingServer{self}, particles_collision, mask)
}
func (self methodsRenderingServer) ParticlesCollisionSetSphereRadius(particles_collision RID, radius Float) {
	self.Runtime.RenderingServer_particles_collision_set_sphere_radius(RenderingServer{self}, particles_collision, radius)
}
func (self methodsRenderingServer) ParticlesCollisionSetBoxExtents(particles_collision RID, extents Vector3) {
	self.Runtime.RenderingServer_particles_collision_set_box_extents(RenderingServer{self}, particles_collision, extents)
}
func (self methodsRenderingServer) ParticlesCollisionSetAttractorStrength(particles_collision RID, strength Float) {
	self.Runtime.RenderingServer_particles_collision_set_attractor_strength(RenderingServer{self}, particles_collision, strength)
}
func (self methodsRenderingServer) ParticlesCollisionSetAttractorDirectionality(particles_collision RID, amount Float) {
	self.Runtime.RenderingServer_particles_collision_set_attractor_directionality(RenderingServer{self}, particles_collision, amount)
}
func (self methodsRenderingServer) ParticlesCollisionSetAttractorAttenuation(particles_collision RID, curve Float) {
	self.Runtime.RenderingServer_particles_collision_set_attractor_attenuation(RenderingServer{self}, particles_collision, curve)
}
func (self methodsRenderingServer) ParticlesCollisionSetFieldTexture(particles_collision RID, texture RID) {
	self.Runtime.RenderingServer_particles_collision_set_field_texture(RenderingServer{self}, particles_collision, texture)
}
func (self methodsRenderingServer) ParticlesCollisionHeightFieldUpdate(particles_collision RID) {
	self.Runtime.RenderingServer_particles_collision_height_field_update(RenderingServer{self}, particles_collision)
}
func (self methodsRenderingServer) ParticlesCollisionSetHeightFieldResolution(particles_collision RID, resolution RenderingServerParticlesCollisionHeightfieldResolution) {
	self.Runtime.RenderingServer_particles_collision_set_height_field_resolution(RenderingServer{self}, particles_collision, resolution)
}
func (self methodsRenderingServer) FogVolumeCreate() RID {
	return self.Runtime.RenderingServer_fog_volume_create(RenderingServer{self})
}
func (self methodsRenderingServer) FogVolumeSetShape(fog_volume RID, shape RenderingServerFogVolumeShape) {
	self.Runtime.RenderingServer_fog_volume_set_shape(RenderingServer{self}, fog_volume, shape)
}
func (self methodsRenderingServer) FogVolumeSetSize(fog_volume RID, size Vector3) {
	self.Runtime.RenderingServer_fog_volume_set_size(RenderingServer{self}, fog_volume, size)
}
func (self methodsRenderingServer) FogVolumeSetMaterial(fog_volume RID, material RID) {
	self.Runtime.RenderingServer_fog_volume_set_material(RenderingServer{self}, fog_volume, material)
}
func (self methodsRenderingServer) VisibilityNotifierCreate() RID {
	return self.Runtime.RenderingServer_visibility_notifier_create(RenderingServer{self})
}
func (self methodsRenderingServer) VisibilityNotifierSetAabb(notifier RID, aabb AABB) {
	self.Runtime.RenderingServer_visibility_notifier_set_aabb(RenderingServer{self}, notifier, aabb)
}
func (self methodsRenderingServer) VisibilityNotifierSetCallbacks(notifier RID, enter_callable Callable, exit_callable Callable) {
	self.Runtime.RenderingServer_visibility_notifier_set_callbacks(RenderingServer{self}, notifier, enter_callable, exit_callable)
}
func (self methodsRenderingServer) OccluderCreate() RID {
	return self.Runtime.RenderingServer_occluder_create(RenderingServer{self})
}
func (self methodsRenderingServer) OccluderSetMesh(occluder RID, vertices PackedVector3Array, indices PackedInt32Array) {
	self.Runtime.RenderingServer_occluder_set_mesh(RenderingServer{self}, occluder, vertices, indices)
}
func (self methodsRenderingServer) CameraCreate() RID {
	return self.Runtime.RenderingServer_camera_create(RenderingServer{self})
}
func (self methodsRenderingServer) CameraSetPerspective(camera RID, fovy_degrees Float, z_near Float, z_far Float) {
	self.Runtime.RenderingServer_camera_set_perspective(RenderingServer{self}, camera, fovy_degrees, z_near, z_far)
}
func (self methodsRenderingServer) CameraSetOrthogonal(camera RID, size Float, z_near Float, z_far Float) {
	self.Runtime.RenderingServer_camera_set_orthogonal(RenderingServer{self}, camera, size, z_near, z_far)
}
func (self methodsRenderingServer) CameraSetFrustum(camera RID, size Float, offset Vector2, z_near Float, z_far Float) {
	self.Runtime.RenderingServer_camera_set_frustum(RenderingServer{self}, camera, size, offset, z_near, z_far)
}
func (self methodsRenderingServer) CameraSetTransform(camera RID, transform Transform3D) {
	self.Runtime.RenderingServer_camera_set_transform(RenderingServer{self}, camera, transform)
}
func (self methodsRenderingServer) CameraSetCullMask(camera RID, layers int64) {
	self.Runtime.RenderingServer_camera_set_cull_mask(RenderingServer{self}, camera, layers)
}
func (self methodsRenderingServer) CameraSetEnvironment(camera RID, env RID) {
	self.Runtime.RenderingServer_camera_set_environment(RenderingServer{self}, camera, env)
}
func (self methodsRenderingServer) CameraSetCameraAttributes(camera RID, effects RID) {
	self.Runtime.RenderingServer_camera_set_camera_attributes(RenderingServer{self}, camera, effects)
}
func (self methodsRenderingServer) CameraSetUseVerticalAspect(camera RID, enable bool) {
	self.Runtime.RenderingServer_camera_set_use_vertical_aspect(RenderingServer{self}, camera, enable)
}
func (self methodsRenderingServer) ViewportCreate() RID {
	return self.Runtime.RenderingServer_viewport_create(RenderingServer{self})
}
func (self methodsRenderingServer) ViewportSetUseXr(viewport RID, use_xr bool) {
	self.Runtime.RenderingServer_viewport_set_use_xr(RenderingServer{self}, viewport, use_xr)
}
func (self methodsRenderingServer) ViewportSetSize(viewport RID, width int64, height int64) {
	self.Runtime.RenderingServer_viewport_set_size(RenderingServer{self}, viewport, width, height)
}
func (self methodsRenderingServer) ViewportSetActive(viewport RID, active bool) {
	self.Runtime.RenderingServer_viewport_set_active(RenderingServer{self}, viewport, active)
}
func (self methodsRenderingServer) ViewportSetParentViewport(viewport RID, parent_viewport RID) {
	self.Runtime.RenderingServer_viewport_set_parent_viewport(RenderingServer{self}, viewport, parent_viewport)
}
func (self methodsRenderingServer) ViewportAttachToScreen(viewport RID, rect Rect2, screen int64) {
	self.Runtime.RenderingServer_viewport_attach_to_screen(RenderingServer{self}, viewport, rect, screen)
}
func (self methodsRenderingServer) ViewportSetRenderDirectToScreen(viewport RID, enabled bool) {
	self.Runtime.RenderingServer_viewport_set_render_direct_to_screen(RenderingServer{self}, viewport, enabled)
}
func (self methodsRenderingServer) ViewportSetCanvasCullMask(viewport RID, canvas_cull_mask int64) {
	self.Runtime.RenderingServer_viewport_set_canvas_cull_mask(RenderingServer{self}, viewport, canvas_cull_mask)
}
func (self methodsRenderingServer) ViewportSetScaling3dMode(viewport RID, scaling_3d_mode RenderingServerViewportScaling3DMode) {
	self.Runtime.RenderingServer_viewport_set_scaling_3d_mode(RenderingServer{self}, viewport, scaling_3d_mode)
}
func (self methodsRenderingServer) ViewportSetScaling3dScale(viewport RID, scale Float) {
	self.Runtime.RenderingServer_viewport_set_scaling_3d_scale(RenderingServer{self}, viewport, scale)
}
func (self methodsRenderingServer) ViewportSetFsrSharpness(viewport RID, sharpness Float) {
	self.Runtime.RenderingServer_viewport_set_fsr_sharpness(RenderingServer{self}, viewport, sharpness)
}
func (self methodsRenderingServer) ViewportSetTextureMipmapBias(viewport RID, mipmap_bias Float) {
	self.Runtime.RenderingServer_viewport_set_texture_mipmap_bias(RenderingServer{self}, viewport, mipmap_bias)
}
func (self methodsRenderingServer) ViewportSetUpdateMode(viewport RID, update_mode RenderingServerViewportUpdateMode) {
	self.Runtime.RenderingServer_viewport_set_update_mode(RenderingServer{self}, viewport, update_mode)
}
func (self methodsRenderingServer) ViewportSetClearMode(viewport RID, clear_mode RenderingServerViewportClearMode) {
	self.Runtime.RenderingServer_viewport_set_clear_mode(RenderingServer{self}, viewport, clear_mode)
}
func (self methodsRenderingServer) ViewportGetRenderTarget(viewport RID) RID {
	return self.Runtime.RenderingServer_viewport_get_render_target(RenderingServer{self}, viewport)
}
func (self methodsRenderingServer) ViewportGetTexture(viewport RID) RID {
	return self.Runtime.RenderingServer_viewport_get_texture(RenderingServer{self}, viewport)
}
func (self methodsRenderingServer) ViewportSetDisable3d(viewport RID, disable bool) {
	self.Runtime.RenderingServer_viewport_set_disable_3d(RenderingServer{self}, viewport, disable)
}
func (self methodsRenderingServer) ViewportSetDisable2d(viewport RID, disable bool) {
	self.Runtime.RenderingServer_viewport_set_disable_2d(RenderingServer{self}, viewport, disable)
}
func (self methodsRenderingServer) ViewportSetEnvironmentMode(viewport RID, mode RenderingServerViewportEnvironmentMode) {
	self.Runtime.RenderingServer_viewport_set_environment_mode(RenderingServer{self}, viewport, mode)
}
func (self methodsRenderingServer) ViewportAttachCamera(viewport RID, camera RID) {
	self.Runtime.RenderingServer_viewport_attach_camera(RenderingServer{self}, viewport, camera)
}
func (self methodsRenderingServer) ViewportSetScenario(viewport RID, scenario RID) {
	self.Runtime.RenderingServer_viewport_set_scenario(RenderingServer{self}, viewport, scenario)
}
func (self methodsRenderingServer) ViewportAttachCanvas(viewport RID, canvas RID) {
	self.Runtime.RenderingServer_viewport_attach_canvas(RenderingServer{self}, viewport, canvas)
}
func (self methodsRenderingServer) ViewportRemoveCanvas(viewport RID, canvas RID) {
	self.Runtime.RenderingServer_viewport_remove_canvas(RenderingServer{self}, viewport, canvas)
}
func (self methodsRenderingServer) ViewportSetSnap2dTransformsToPixel(viewport RID, enabled bool) {
	self.Runtime.RenderingServer_viewport_set_snap_2d_transforms_to_pixel(RenderingServer{self}, viewport, enabled)
}
func (self methodsRenderingServer) ViewportSetSnap2dVerticesToPixel(viewport RID, enabled bool) {
	self.Runtime.RenderingServer_viewport_set_snap_2d_vertices_to_pixel(RenderingServer{self}, viewport, enabled)
}
func (self methodsRenderingServer) ViewportSetDefaultCanvasItemTextureFilter(viewport RID, filter RenderingServerCanvasItemTextureFilter) {
	self.Runtime.RenderingServer_viewport_set_default_canvas_item_texture_filter(RenderingServer{self}, viewport, filter)
}
func (self methodsRenderingServer) ViewportSetDefaultCanvasItemTextureRepeat(viewport RID, repeat RenderingServerCanvasItemTextureRepeat) {
	self.Runtime.RenderingServer_viewport_set_default_canvas_item_texture_repeat(RenderingServer{self}, viewport, repeat)
}
func (self methodsRenderingServer) ViewportSetCanvasTransform(viewport RID, canvas RID, offset Transform2D) {
	self.Runtime.RenderingServer_viewport_set_canvas_transform(RenderingServer{self}, viewport, canvas, offset)
}
func (self methodsRenderingServer) ViewportSetCanvasStacking(viewport RID, canvas RID, layer int64, sublayer int64) {
	self.Runtime.RenderingServer_viewport_set_canvas_stacking(RenderingServer{self}, viewport, canvas, layer, sublayer)
}
func (self methodsRenderingServer) ViewportSetTransparentBackground(viewport RID, enabled bool) {
	self.Runtime.RenderingServer_viewport_set_transparent_background(RenderingServer{self}, viewport, enabled)
}
func (self methodsRenderingServer) ViewportSetGlobalCanvasTransform(viewport RID, transform Transform2D) {
	self.Runtime.RenderingServer_viewport_set_global_canvas_transform(RenderingServer{self}, viewport, transform)
}
func (self methodsRenderingServer) ViewportSetSdfOversizeAndScale(viewport RID, oversize RenderingServerViewportSDFOversize, scale RenderingServerViewportSDFScale) {
	self.Runtime.RenderingServer_viewport_set_sdf_oversize_and_scale(RenderingServer{self}, viewport, oversize, scale)
}
func (self methodsRenderingServer) ViewportSetPositionalShadowAtlasSize(viewport RID, size int64, use_16_bits bool) {
	self.Runtime.RenderingServer_viewport_set_positional_shadow_atlas_size(RenderingServer{self}, viewport, size, use_16_bits)
}
func (self methodsRenderingServer) ViewportSetPositionalShadowAtlasQuadrantSubdivision(viewport RID, quadrant int64, subdivision int64) {
	self.Runtime.RenderingServer_viewport_set_positional_shadow_atlas_quadrant_subdivision(RenderingServer{self}, viewport, quadrant, subdivision)
}
func (self methodsRenderingServer) ViewportSetMsaa3d(viewport RID, msaa RenderingServerViewportMSAA) {
	self.Runtime.RenderingServer_viewport_set_msaa_3d(RenderingServer{self}, viewport, msaa)
}
func (self methodsRenderingServer) ViewportSetMsaa2d(viewport RID, msaa RenderingServerViewportMSAA) {
	self.Runtime.RenderingServer_viewport_set_msaa_2d(RenderingServer{self}, viewport, msaa)
}
func (self methodsRenderingServer) ViewportSetUseHdr2d(viewport RID, enabled bool) {
	self.Runtime.RenderingServer_viewport_set_use_hdr_2d(RenderingServer{self}, viewport, enabled)
}
func (self methodsRenderingServer) ViewportSetScreenSpaceAa(viewport RID, mode RenderingServerViewportScreenSpaceAA) {
	self.Runtime.RenderingServer_viewport_set_screen_space_aa(RenderingServer{self}, viewport, mode)
}
func (self methodsRenderingServer) ViewportSetUseTaa(viewport RID, enable bool) {
	self.Runtime.RenderingServer_viewport_set_use_taa(RenderingServer{self}, viewport, enable)
}
func (self methodsRenderingServer) ViewportSetUseDebanding(viewport RID, enable bool) {
	self.Runtime.RenderingServer_viewport_set_use_debanding(RenderingServer{self}, viewport, enable)
}
func (self methodsRenderingServer) ViewportSetUseOcclusionCulling(viewport RID, enable bool) {
	self.Runtime.RenderingServer_viewport_set_use_occlusion_culling(RenderingServer{self}, viewport, enable)
}
func (self methodsRenderingServer) ViewportSetOcclusionRaysPerThread(rays_per_thread int64) {
	self.Runtime.RenderingServer_viewport_set_occlusion_rays_per_thread(RenderingServer{self}, rays_per_thread)
}
func (self methodsRenderingServer) ViewportSetOcclusionCullingBuildQuality(quality RenderingServerViewportOcclusionCullingBuildQuality) {
	self.Runtime.RenderingServer_viewport_set_occlusion_culling_build_quality(RenderingServer{self}, quality)
}
func (self methodsRenderingServer) ViewportGetRenderInfo(viewport RID, atype RenderingServerViewportRenderInfoType, info RenderingServerViewportRenderInfo) int64 {
	return self.Runtime.RenderingServer_viewport_get_render_info(RenderingServer{self}, viewport, atype, info)
}
func (self methodsRenderingServer) ViewportSetDebugDraw(viewport RID, draw RenderingServerViewportDebugDraw) {
	self.Runtime.RenderingServer_viewport_set_debug_draw(RenderingServer{self}, viewport, draw)
}
func (self methodsRenderingServer) ViewportSetMeasureRenderTime(viewport RID, enable bool) {
	self.Runtime.RenderingServer_viewport_set_measure_render_time(RenderingServer{self}, viewport, enable)
}
func (self methodsRenderingServer) ViewportGetMeasuredRenderTimeCpu(viewport RID) Float {
	return self.Runtime.RenderingServer_viewport_get_measured_render_time_cpu(RenderingServer{self}, viewport)
}
func (self methodsRenderingServer) ViewportGetMeasuredRenderTimeGpu(viewport RID) Float {
	return self.Runtime.RenderingServer_viewport_get_measured_render_time_gpu(RenderingServer{self}, viewport)
}
func (self methodsRenderingServer) ViewportSetVrsMode(viewport RID, mode RenderingServerViewportVRSMode) {
	self.Runtime.RenderingServer_viewport_set_vrs_mode(RenderingServer{self}, viewport, mode)
}
func (self methodsRenderingServer) ViewportSetVrsTexture(viewport RID, texture RID) {
	self.Runtime.RenderingServer_viewport_set_vrs_texture(RenderingServer{self}, viewport, texture)
}
func (self methodsRenderingServer) SkyCreate() RID {
	return self.Runtime.RenderingServer_sky_create(RenderingServer{self})
}
func (self methodsRenderingServer) SkySetRadianceSize(sky RID, radiance_size int64) {
	self.Runtime.RenderingServer_sky_set_radiance_size(RenderingServer{self}, sky, radiance_size)
}
func (self methodsRenderingServer) SkySetMode(sky RID, mode RenderingServerSkyMode) {
	self.Runtime.RenderingServer_sky_set_mode(RenderingServer{self}, sky, mode)
}
func (self methodsRenderingServer) SkySetMaterial(sky RID, material RID) {
	self.Runtime.RenderingServer_sky_set_material(RenderingServer{self}, sky, material)
}
func (self methodsRenderingServer) SkyBakePanorama(sky RID, energy Float, bake_irradiance bool, size Vector2i) Image {
	return self.Runtime.RenderingServer_sky_bake_panorama(RenderingServer{self}, sky, energy, bake_irradiance, size)
}
func (self methodsRenderingServer) EnvironmentCreate() RID {
	return self.Runtime.RenderingServer_environment_create(RenderingServer{self})
}
func (self methodsRenderingServer) EnvironmentSetBackground(env RID, bg RenderingServerEnvironmentBG) {
	self.Runtime.RenderingServer_environment_set_background(RenderingServer{self}, env, bg)
}
func (self methodsRenderingServer) EnvironmentSetSky(env RID, sky RID) {
	self.Runtime.RenderingServer_environment_set_sky(RenderingServer{self}, env, sky)
}
func (self methodsRenderingServer) EnvironmentSetSkyCustomFov(env RID, scale Float) {
	self.Runtime.RenderingServer_environment_set_sky_custom_fov(RenderingServer{self}, env, scale)
}
func (self methodsRenderingServer) EnvironmentSetSkyOrientation(env RID, orientation Basis) {
	self.Runtime.RenderingServer_environment_set_sky_orientation(RenderingServer{self}, env, orientation)
}
func (self methodsRenderingServer) EnvironmentSetBgColor(env RID, color Color) {
	self.Runtime.RenderingServer_environment_set_bg_color(RenderingServer{self}, env, color)
}
func (self methodsRenderingServer) EnvironmentSetBgEnergy(env RID, multiplier Float, exposure_value Float) {
	self.Runtime.RenderingServer_environment_set_bg_energy(RenderingServer{self}, env, multiplier, exposure_value)
}
func (self methodsRenderingServer) EnvironmentSetCanvasMaxLayer(env RID, max_layer int64) {
	self.Runtime.RenderingServer_environment_set_canvas_max_layer(RenderingServer{self}, env, max_layer)
}
func (self methodsRenderingServer) EnvironmentSetAmbientLight(env RID, color Color, ambient RenderingServerEnvironmentAmbientSource, energy Float, sky_contibution Float, reflection_source RenderingServerEnvironmentReflectionSource) {
	self.Runtime.RenderingServer_environment_set_ambient_light(RenderingServer{self}, env, color, ambient, energy, sky_contibution, reflection_source)
}
func (self methodsRenderingServer) EnvironmentSetGlow(env RID, enable bool, levels PackedFloat32Array, intensity Float, strength Float, mix Float, bloom_threshold Float, blend_mode RenderingServerEnvironmentGlowBlendMode, hdr_bleed_threshold Float, hdr_bleed_scale Float, hdr_luminance_cap Float, glow_map_strength Float, glow_map RID) {
	self.Runtime.RenderingServer_environment_set_glow(RenderingServer{self}, env, enable, levels, intensity, strength, mix, bloom_threshold, blend_mode, hdr_bleed_threshold, hdr_bleed_scale, hdr_luminance_cap, glow_map_strength, glow_map)
}
func (self methodsRenderingServer) EnvironmentSetTonemap(env RID, tone_mapper RenderingServerEnvironmentToneMapper, exposure Float, white Float) {
	self.Runtime.RenderingServer_environment_set_tonemap(RenderingServer{self}, env, tone_mapper, exposure, white)
}
func (self methodsRenderingServer) EnvironmentSetAdjustment(env RID, enable bool, brightness Float, contrast Float, saturation Float, use_1d_color_correction bool, color_correction RID) {
	self.Runtime.RenderingServer_environment_set_adjustment(RenderingServer{self}, env, enable, brightness, contrast, saturation, use_1d_color_correction, color_correction)
}
func (self methodsRenderingServer) EnvironmentSetSsr(env RID, enable bool, max_steps int64, fade_in Float, fade_out Float, depth_tolerance Float) {
	self.Runtime.RenderingServer_environment_set_ssr(RenderingServer{self}, env, enable, max_steps, fade_in, fade_out, depth_tolerance)
}
func (self methodsRenderingServer) EnvironmentSetSsao(env RID, enable bool, radius Float, intensity Float, power Float, detail Float, horizon Float, sharpness Float, light_affect Float, ao_channel_affect Float) {
	self.Runtime.RenderingServer_environment_set_ssao(RenderingServer{self}, env, enable, radius, intensity, power, detail, horizon, sharpness, light_affect, ao_channel_affect)
}
func (self methodsRenderingServer) EnvironmentSetFog(env RID, enable bool, light_color Color, light_energy Float, sun_scatter Float, density Float, height Float, height_density Float, aerial_perspective Float, sky_affect Float) {
	self.Runtime.RenderingServer_environment_set_fog(RenderingServer{self}, env, enable, light_color, light_energy, sun_scatter, density, height, height_density, aerial_perspective, sky_affect)
}
func (self methodsRenderingServer) EnvironmentSetSdfgi(env RID, enable bool, cascades int64, min_cell_size Float, y_scale RenderingServerEnvironmentSDFGIYScale, use_occlusion bool, bounce_feedback Float, read_sky bool, energy Float, normal_bias Float, probe_bias Float) {
	self.Runtime.RenderingServer_environment_set_sdfgi(RenderingServer{self}, env, enable, cascades, min_cell_size, y_scale, use_occlusion, bounce_feedback, read_sky, energy, normal_bias, probe_bias)
}
func (self methodsRenderingServer) EnvironmentSetVolumetricFog(env RID, enable bool, density Float, albedo Color, emission Color, emission_energy Float, anisotropy Float, length Float, p_detail_spread Float, gi_inject Float, temporal_reprojection bool, temporal_reprojection_amount Float, ambient_inject Float, sky_affect Float) {
	self.Runtime.RenderingServer_environment_set_volumetric_fog(RenderingServer{self}, env, enable, density, albedo, emission, emission_energy, anisotropy, length, p_detail_spread, gi_inject, temporal_reprojection, temporal_reprojection_amount, ambient_inject, sky_affect)
}
func (self methodsRenderingServer) EnvironmentGlowSetUseBicubicUpscale(enable bool) {
	self.Runtime.RenderingServer_environment_glow_set_use_bicubic_upscale(RenderingServer{self}, enable)
}
func (self methodsRenderingServer) EnvironmentSetSsrRoughnessQuality(quality RenderingServerEnvironmentSSRRoughnessQuality) {
	self.Runtime.RenderingServer_environment_set_ssr_roughness_quality(RenderingServer{self}, quality)
}
func (self methodsRenderingServer) EnvironmentSetSsaoQuality(quality RenderingServerEnvironmentSSAOQuality, half_size bool, adaptive_target Float, blur_passes int64, fadeout_from Float, fadeout_to Float) {
	self.Runtime.RenderingServer_environment_set_ssao_quality(RenderingServer{self}, quality, half_size, adaptive_target, blur_passes, fadeout_from, fadeout_to)
}
func (self methodsRenderingServer) EnvironmentSetSsilQuality(quality RenderingServerEnvironmentSSILQuality, half_size bool, adaptive_target Float, blur_passes int64, fadeout_from Float, fadeout_to Float) {
	self.Runtime.RenderingServer_environment_set_ssil_quality(RenderingServer{self}, quality, half_size, adaptive_target, blur_passes, fadeout_from, fadeout_to)
}
func (self methodsRenderingServer) EnvironmentSetSdfgiRayCount(ray_count RenderingServerEnvironmentSDFGIRayCount) {
	self.Runtime.RenderingServer_environment_set_sdfgi_ray_count(RenderingServer{self}, ray_count)
}
func (self methodsRenderingServer) EnvironmentSetSdfgiFramesToConverge(frames RenderingServerEnvironmentSDFGIFramesToConverge) {
	self.Runtime.RenderingServer_environment_set_sdfgi_frames_to_converge(RenderingServer{self}, frames)
}
func (self methodsRenderingServer) EnvironmentSetSdfgiFramesToUpdateLight(frames RenderingServerEnvironmentSDFGIFramesToUpdateLight) {
	self.Runtime.RenderingServer_environment_set_sdfgi_frames_to_update_light(RenderingServer{self}, frames)
}
func (self methodsRenderingServer) EnvironmentSetVolumetricFogVolumeSize(size int64, depth int64) {
	self.Runtime.RenderingServer_environment_set_volumetric_fog_volume_size(RenderingServer{self}, size, depth)
}
func (self methodsRenderingServer) EnvironmentSetVolumetricFogFilterActive(active bool) {
	self.Runtime.RenderingServer_environment_set_volumetric_fog_filter_active(RenderingServer{self}, active)
}
func (self methodsRenderingServer) EnvironmentBakePanorama(environment RID, bake_irradiance bool, size Vector2i) Image {
	return self.Runtime.RenderingServer_environment_bake_panorama(RenderingServer{self}, environment, bake_irradiance, size)
}
func (self methodsRenderingServer) ScreenSpaceRoughnessLimiterSetActive(enable bool, amount Float, limit Float) {
	self.Runtime.RenderingServer_screen_space_roughness_limiter_set_active(RenderingServer{self}, enable, amount, limit)
}
func (self methodsRenderingServer) SubSurfaceScatteringSetQuality(quality RenderingServerSubSurfaceScatteringQuality) {
	self.Runtime.RenderingServer_sub_surface_scattering_set_quality(RenderingServer{self}, quality)
}
func (self methodsRenderingServer) SubSurfaceScatteringSetScale(scale Float, depth_scale Float) {
	self.Runtime.RenderingServer_sub_surface_scattering_set_scale(RenderingServer{self}, scale, depth_scale)
}
func (self methodsRenderingServer) CameraAttributesCreate() RID {
	return self.Runtime.RenderingServer_camera_attributes_create(RenderingServer{self})
}
func (self methodsRenderingServer) CameraAttributesSetDofBlurQuality(quality RenderingServerDOFBlurQuality, use_jitter bool) {
	self.Runtime.RenderingServer_camera_attributes_set_dof_blur_quality(RenderingServer{self}, quality, use_jitter)
}
func (self methodsRenderingServer) CameraAttributesSetDofBlurBokehShape(shape RenderingServerDOFBokehShape) {
	self.Runtime.RenderingServer_camera_attributes_set_dof_blur_bokeh_shape(RenderingServer{self}, shape)
}
func (self methodsRenderingServer) CameraAttributesSetDofBlur(camera_attributes RID, far_enable bool, far_distance Float, far_transition Float, near_enable bool, near_distance Float, near_transition Float, amount Float) {
	self.Runtime.RenderingServer_camera_attributes_set_dof_blur(RenderingServer{self}, camera_attributes, far_enable, far_distance, far_transition, near_enable, near_distance, near_transition, amount)
}
func (self methodsRenderingServer) CameraAttributesSetExposure(camera_attributes RID, multiplier Float, normalization Float) {
	self.Runtime.RenderingServer_camera_attributes_set_exposure(RenderingServer{self}, camera_attributes, multiplier, normalization)
}
func (self methodsRenderingServer) CameraAttributesSetAutoExposure(camera_attributes RID, enable bool, min_sensitivity Float, max_sensitivity Float, speed Float, scale Float) {
	self.Runtime.RenderingServer_camera_attributes_set_auto_exposure(RenderingServer{self}, camera_attributes, enable, min_sensitivity, max_sensitivity, speed, scale)
}
func (self methodsRenderingServer) ScenarioCreate() RID {
	return self.Runtime.RenderingServer_scenario_create(RenderingServer{self})
}
func (self methodsRenderingServer) ScenarioSetEnvironment(scenario RID, environment RID) {
	self.Runtime.RenderingServer_scenario_set_environment(RenderingServer{self}, scenario, environment)
}
func (self methodsRenderingServer) ScenarioSetFallbackEnvironment(scenario RID, environment RID) {
	self.Runtime.RenderingServer_scenario_set_fallback_environment(RenderingServer{self}, scenario, environment)
}
func (self methodsRenderingServer) ScenarioSetCameraAttributes(scenario RID, effects RID) {
	self.Runtime.RenderingServer_scenario_set_camera_attributes(RenderingServer{self}, scenario, effects)
}
func (self methodsRenderingServer) InstanceCreate2(base RID, scenario RID) RID {
	return self.Runtime.RenderingServer_instance_create2(RenderingServer{self}, base, scenario)
}
func (self methodsRenderingServer) InstanceCreate() RID {
	return self.Runtime.RenderingServer_instance_create(RenderingServer{self})
}
func (self methodsRenderingServer) InstanceSetBase(instance RID, base RID) {
	self.Runtime.RenderingServer_instance_set_base(RenderingServer{self}, instance, base)
}
func (self methodsRenderingServer) InstanceSetScenario(instance RID, scenario RID) {
	self.Runtime.RenderingServer_instance_set_scenario(RenderingServer{self}, instance, scenario)
}
func (self methodsRenderingServer) InstanceSetLayerMask(instance RID, mask int64) {
	self.Runtime.RenderingServer_instance_set_layer_mask(RenderingServer{self}, instance, mask)
}
func (self methodsRenderingServer) InstanceSetPivotData(instance RID, sorting_offset Float, use_aabb_center bool) {
	self.Runtime.RenderingServer_instance_set_pivot_data(RenderingServer{self}, instance, sorting_offset, use_aabb_center)
}
func (self methodsRenderingServer) InstanceSetTransform(instance RID, transform Transform3D) {
	self.Runtime.RenderingServer_instance_set_transform(RenderingServer{self}, instance, transform)
}
func (self methodsRenderingServer) InstanceAttachObjectInstanceId(instance RID, id int64) {
	self.Runtime.RenderingServer_instance_attach_object_instance_id(RenderingServer{self}, instance, id)
}
func (self methodsRenderingServer) InstanceSetBlendShapeWeight(instance RID, shape int64, weight Float) {
	self.Runtime.RenderingServer_instance_set_blend_shape_weight(RenderingServer{self}, instance, shape, weight)
}
func (self methodsRenderingServer) InstanceSetSurfaceOverrideMaterial(instance RID, surface int64, material RID) {
	self.Runtime.RenderingServer_instance_set_surface_override_material(RenderingServer{self}, instance, surface, material)
}
func (self methodsRenderingServer) InstanceSetVisible(instance RID, visible bool) {
	self.Runtime.RenderingServer_instance_set_visible(RenderingServer{self}, instance, visible)
}
func (self methodsRenderingServer) InstanceGeometrySetTransparency(instance RID, transparency Float) {
	self.Runtime.RenderingServer_instance_geometry_set_transparency(RenderingServer{self}, instance, transparency)
}
func (self methodsRenderingServer) InstanceSetCustomAabb(instance RID, aabb AABB) {
	self.Runtime.RenderingServer_instance_set_custom_aabb(RenderingServer{self}, instance, aabb)
}
func (self methodsRenderingServer) InstanceAttachSkeleton(instance RID, skeleton RID) {
	self.Runtime.RenderingServer_instance_attach_skeleton(RenderingServer{self}, instance, skeleton)
}
func (self methodsRenderingServer) InstanceSetExtraVisibilityMargin(instance RID, margin Float) {
	self.Runtime.RenderingServer_instance_set_extra_visibility_margin(RenderingServer{self}, instance, margin)
}
func (self methodsRenderingServer) InstanceSetVisibilityParent(instance RID, parent RID) {
	self.Runtime.RenderingServer_instance_set_visibility_parent(RenderingServer{self}, instance, parent)
}
func (self methodsRenderingServer) InstanceSetIgnoreCulling(instance RID, enabled bool) {
	self.Runtime.RenderingServer_instance_set_ignore_culling(RenderingServer{self}, instance, enabled)
}
func (self methodsRenderingServer) InstanceGeometrySetFlag(instance RID, flag RenderingServerInstanceFlags, enabled bool) {
	self.Runtime.RenderingServer_instance_geometry_set_flag(RenderingServer{self}, instance, flag, enabled)
}
func (self methodsRenderingServer) InstanceGeometrySetCastShadowsSetting(instance RID, shadow_casting_setting RenderingServerShadowCastingSetting) {
	self.Runtime.RenderingServer_instance_geometry_set_cast_shadows_setting(RenderingServer{self}, instance, shadow_casting_setting)
}
func (self methodsRenderingServer) InstanceGeometrySetMaterialOverride(instance RID, material RID) {
	self.Runtime.RenderingServer_instance_geometry_set_material_override(RenderingServer{self}, instance, material)
}
func (self methodsRenderingServer) InstanceGeometrySetMaterialOverlay(instance RID, material RID) {
	self.Runtime.RenderingServer_instance_geometry_set_material_overlay(RenderingServer{self}, instance, material)
}
func (self methodsRenderingServer) InstanceGeometrySetVisibilityRange(instance RID, min Float, max Float, min_margin Float, max_margin Float, fade_mode RenderingServerVisibilityRangeFadeMode) {
	self.Runtime.RenderingServer_instance_geometry_set_visibility_range(RenderingServer{self}, instance, min, max, min_margin, max_margin, fade_mode)
}
func (self methodsRenderingServer) InstanceGeometrySetLightmap(instance RID, lightmap RID, lightmap_uv_scale Rect2, lightmap_slice int64) {
	self.Runtime.RenderingServer_instance_geometry_set_lightmap(RenderingServer{self}, instance, lightmap, lightmap_uv_scale, lightmap_slice)
}
func (self methodsRenderingServer) InstanceGeometrySetLodBias(instance RID, lod_bias Float) {
	self.Runtime.RenderingServer_instance_geometry_set_lod_bias(RenderingServer{self}, instance, lod_bias)
}
func (self methodsRenderingServer) InstanceGeometrySetShaderParameter(instance RID, parameter string, value any) {
	self.Runtime.RenderingServer_instance_geometry_set_shader_parameter(RenderingServer{self}, instance, parameter, value)
}
func (self methodsRenderingServer) InstanceGeometryGetShaderParameter(instance RID, parameter string) any {
	return self.Runtime.RenderingServer_instance_geometry_get_shader_parameter(RenderingServer{self}, instance, parameter)
}
func (self methodsRenderingServer) InstanceGeometryGetShaderParameterDefaultValue(instance RID, parameter string) any {
	return self.Runtime.RenderingServer_instance_geometry_get_shader_parameter_default_value(RenderingServer{self}, instance, parameter)
}
func (self methodsRenderingServer) InstanceGeometryGetShaderParameterList(instance RID) ArrayOf[Dictionary] {
	return self.Runtime.RenderingServer_instance_geometry_get_shader_parameter_list(RenderingServer{self}, instance)
}
func (self methodsRenderingServer) InstancesCullAabb(aabb AABB, scenario RID) PackedInt64Array {
	return self.Runtime.RenderingServer_instances_cull_aabb(RenderingServer{self}, aabb, scenario)
}
func (self methodsRenderingServer) InstancesCullRay(from Vector3, to Vector3, scenario RID) PackedInt64Array {
	return self.Runtime.RenderingServer_instances_cull_ray(RenderingServer{self}, from, to, scenario)
}
func (self methodsRenderingServer) InstancesCullConvex(convex ArrayOf[Plane], scenario RID) PackedInt64Array {
	return self.Runtime.RenderingServer_instances_cull_convex(RenderingServer{self}, convex, scenario)
}
func (self methodsRenderingServer) BakeRenderUv2(base RID, material_overrides ArrayOf[RID], image_size Vector2i) ArrayOf[Image] {
	return self.Runtime.RenderingServer_bake_render_uv2(RenderingServer{self}, base, material_overrides, image_size)
}
func (self methodsRenderingServer) CanvasCreate() RID {
	return self.Runtime.RenderingServer_canvas_create(RenderingServer{self})
}
func (self methodsRenderingServer) CanvasSetItemMirroring(canvas RID, item RID, mirroring Vector2) {
	self.Runtime.RenderingServer_canvas_set_item_mirroring(RenderingServer{self}, canvas, item, mirroring)
}
func (self methodsRenderingServer) CanvasSetModulate(canvas RID, color Color) {
	self.Runtime.RenderingServer_canvas_set_modulate(RenderingServer{self}, canvas, color)
}
func (self methodsRenderingServer) CanvasSetDisableScale(disable bool) {
	self.Runtime.RenderingServer_canvas_set_disable_scale(RenderingServer{self}, disable)
}
func (self methodsRenderingServer) CanvasTextureCreate() RID {
	return self.Runtime.RenderingServer_canvas_texture_create(RenderingServer{self})
}
func (self methodsRenderingServer) CanvasTextureSetChannel(canvas_texture RID, channel RenderingServerCanvasTextureChannel, texture RID) {
	self.Runtime.RenderingServer_canvas_texture_set_channel(RenderingServer{self}, canvas_texture, channel, texture)
}
func (self methodsRenderingServer) CanvasTextureSetShadingParameters(canvas_texture RID, base_color Color, shininess Float) {
	self.Runtime.RenderingServer_canvas_texture_set_shading_parameters(RenderingServer{self}, canvas_texture, base_color, shininess)
}
func (self methodsRenderingServer) CanvasTextureSetTextureFilter(canvas_texture RID, filter RenderingServerCanvasItemTextureFilter) {
	self.Runtime.RenderingServer_canvas_texture_set_texture_filter(RenderingServer{self}, canvas_texture, filter)
}
func (self methodsRenderingServer) CanvasTextureSetTextureRepeat(canvas_texture RID, repeat RenderingServerCanvasItemTextureRepeat) {
	self.Runtime.RenderingServer_canvas_texture_set_texture_repeat(RenderingServer{self}, canvas_texture, repeat)
}
func (self methodsRenderingServer) CanvasItemCreate() RID {
	return self.Runtime.RenderingServer_canvas_item_create(RenderingServer{self})
}
func (self methodsRenderingServer) CanvasItemSetParent(item RID, parent RID) {
	self.Runtime.RenderingServer_canvas_item_set_parent(RenderingServer{self}, item, parent)
}
func (self methodsRenderingServer) CanvasItemSetDefaultTextureFilter(item RID, filter RenderingServerCanvasItemTextureFilter) {
	self.Runtime.RenderingServer_canvas_item_set_default_texture_filter(RenderingServer{self}, item, filter)
}
func (self methodsRenderingServer) CanvasItemSetDefaultTextureRepeat(item RID, repeat RenderingServerCanvasItemTextureRepeat) {
	self.Runtime.RenderingServer_canvas_item_set_default_texture_repeat(RenderingServer{self}, item, repeat)
}
func (self methodsRenderingServer) CanvasItemSetVisible(item RID, visible bool) {
	self.Runtime.RenderingServer_canvas_item_set_visible(RenderingServer{self}, item, visible)
}
func (self methodsRenderingServer) CanvasItemSetLightMask(item RID, mask int64) {
	self.Runtime.RenderingServer_canvas_item_set_light_mask(RenderingServer{self}, item, mask)
}
func (self methodsRenderingServer) CanvasItemSetVisibilityLayer(item RID, visibility_layer int64) {
	self.Runtime.RenderingServer_canvas_item_set_visibility_layer(RenderingServer{self}, item, visibility_layer)
}
func (self methodsRenderingServer) CanvasItemSetTransform(item RID, transform Transform2D) {
	self.Runtime.RenderingServer_canvas_item_set_transform(RenderingServer{self}, item, transform)
}
func (self methodsRenderingServer) CanvasItemSetClip(item RID, clip bool) {
	self.Runtime.RenderingServer_canvas_item_set_clip(RenderingServer{self}, item, clip)
}
func (self methodsRenderingServer) CanvasItemSetDistanceFieldMode(item RID, enabled bool) {
	self.Runtime.RenderingServer_canvas_item_set_distance_field_mode(RenderingServer{self}, item, enabled)
}
func (self methodsRenderingServer) CanvasItemSetCustomRect(item RID, use_custom_rect bool, rect Rect2) {
	self.Runtime.RenderingServer_canvas_item_set_custom_rect(RenderingServer{self}, item, use_custom_rect, rect)
}
func (self methodsRenderingServer) CanvasItemSetModulate(item RID, color Color) {
	self.Runtime.RenderingServer_canvas_item_set_modulate(RenderingServer{self}, item, color)
}
func (self methodsRenderingServer) CanvasItemSetSelfModulate(item RID, color Color) {
	self.Runtime.RenderingServer_canvas_item_set_self_modulate(RenderingServer{self}, item, color)
}
func (self methodsRenderingServer) CanvasItemSetDrawBehindParent(item RID, enabled bool) {
	self.Runtime.RenderingServer_canvas_item_set_draw_behind_parent(RenderingServer{self}, item, enabled)
}
func (self methodsRenderingServer) CanvasItemAddLine(item RID, from Vector2, to Vector2, color Color, width Float, antialiased bool) {
	self.Runtime.RenderingServer_canvas_item_add_line(RenderingServer{self}, item, from, to, color, width, antialiased)
}
func (self methodsRenderingServer) CanvasItemAddPolyline(item RID, points PackedVector2Array, colors PackedColorArray, width Float, antialiased bool) {
	self.Runtime.RenderingServer_canvas_item_add_polyline(RenderingServer{self}, item, points, colors, width, antialiased)
}
func (self methodsRenderingServer) CanvasItemAddMultiline(item RID, points PackedVector2Array, colors PackedColorArray, width Float) {
	self.Runtime.RenderingServer_canvas_item_add_multiline(RenderingServer{self}, item, points, colors, width)
}
func (self methodsRenderingServer) CanvasItemAddRect(item RID, rect Rect2, color Color) {
	self.Runtime.RenderingServer_canvas_item_add_rect(RenderingServer{self}, item, rect, color)
}
func (self methodsRenderingServer) CanvasItemAddCircle(item RID, pos Vector2, radius Float, color Color) {
	self.Runtime.RenderingServer_canvas_item_add_circle(RenderingServer{self}, item, pos, radius, color)
}
func (self methodsRenderingServer) CanvasItemAddTextureRect(item RID, rect Rect2, texture RID, tile bool, modulate Color, transpose bool) {
	self.Runtime.RenderingServer_canvas_item_add_texture_rect(RenderingServer{self}, item, rect, texture, tile, modulate, transpose)
}
func (self methodsRenderingServer) CanvasItemAddMsdfTextureRectRegion(item RID, rect Rect2, texture RID, src_rect Rect2, modulate Color, outline_size int64, px_range Float, scale Float) {
	self.Runtime.RenderingServer_canvas_item_add_msdf_texture_rect_region(RenderingServer{self}, item, rect, texture, src_rect, modulate, outline_size, px_range, scale)
}
func (self methodsRenderingServer) CanvasItemAddLcdTextureRectRegion(item RID, rect Rect2, texture RID, src_rect Rect2, modulate Color) {
	self.Runtime.RenderingServer_canvas_item_add_lcd_texture_rect_region(RenderingServer{self}, item, rect, texture, src_rect, modulate)
}
func (self methodsRenderingServer) CanvasItemAddTextureRectRegion(item RID, rect Rect2, texture RID, src_rect Rect2, modulate Color, transpose bool, clip_uv bool) {
	self.Runtime.RenderingServer_canvas_item_add_texture_rect_region(RenderingServer{self}, item, rect, texture, src_rect, modulate, transpose, clip_uv)
}
func (self methodsRenderingServer) CanvasItemAddNinePatch(item RID, rect Rect2, source Rect2, texture RID, topleft Vector2, bottomright Vector2, x_axis_mode RenderingServerNinePatchAxisMode, y_axis_mode RenderingServerNinePatchAxisMode, draw_center bool, modulate Color) {
	self.Runtime.RenderingServer_canvas_item_add_nine_patch(RenderingServer{self}, item, rect, source, texture, topleft, bottomright, x_axis_mode, y_axis_mode, draw_center, modulate)
}
func (self methodsRenderingServer) CanvasItemAddPrimitive(item RID, points PackedVector2Array, colors PackedColorArray, uvs PackedVector2Array, texture RID) {
	self.Runtime.RenderingServer_canvas_item_add_primitive(RenderingServer{self}, item, points, colors, uvs, texture)
}
func (self methodsRenderingServer) CanvasItemAddPolygon(item RID, points PackedVector2Array, colors PackedColorArray, uvs PackedVector2Array, texture RID) {
	self.Runtime.RenderingServer_canvas_item_add_polygon(RenderingServer{self}, item, points, colors, uvs, texture)
}
func (self methodsRenderingServer) CanvasItemAddTriangleArray(item RID, indices PackedInt32Array, points PackedVector2Array, colors PackedColorArray, uvs PackedVector2Array, bones PackedInt32Array, weights PackedFloat32Array, texture RID, count int64) {
	self.Runtime.RenderingServer_canvas_item_add_triangle_array(RenderingServer{self}, item, indices, points, colors, uvs, bones, weights, texture, count)
}
func (self methodsRenderingServer) CanvasItemAddMesh(item RID, mesh RID, transform Transform2D, modulate Color, texture RID) {
	self.Runtime.RenderingServer_canvas_item_add_mesh(RenderingServer{self}, item, mesh, transform, modulate, texture)
}
func (self methodsRenderingServer) CanvasItemAddMultimesh(item RID, mesh RID, texture RID) {
	self.Runtime.RenderingServer_canvas_item_add_multimesh(RenderingServer{self}, item, mesh, texture)
}
func (self methodsRenderingServer) CanvasItemAddParticles(item RID, particles RID, texture RID) {
	self.Runtime.RenderingServer_canvas_item_add_particles(RenderingServer{self}, item, particles, texture)
}
func (self methodsRenderingServer) CanvasItemAddSetTransform(item RID, transform Transform2D) {
	self.Runtime.RenderingServer_canvas_item_add_set_transform(RenderingServer{self}, item, transform)
}
func (self methodsRenderingServer) CanvasItemAddClipIgnore(item RID, ignore bool) {
	self.Runtime.RenderingServer_canvas_item_add_clip_ignore(RenderingServer{self}, item, ignore)
}
func (self methodsRenderingServer) CanvasItemAddAnimationSlice(item RID, animation_length Float, slice_begin Float, slice_end Float, offset Float) {
	self.Runtime.RenderingServer_canvas_item_add_animation_slice(RenderingServer{self}, item, animation_length, slice_begin, slice_end, offset)
}
func (self methodsRenderingServer) CanvasItemSetSortChildrenByY(item RID, enabled bool) {
	self.Runtime.RenderingServer_canvas_item_set_sort_children_by_y(RenderingServer{self}, item, enabled)
}
func (self methodsRenderingServer) CanvasItemSetZIndex(item RID, z_index int64) {
	self.Runtime.RenderingServer_canvas_item_set_z_index(RenderingServer{self}, item, z_index)
}
func (self methodsRenderingServer) CanvasItemSetZAsRelativeToParent(item RID, enabled bool) {
	self.Runtime.RenderingServer_canvas_item_set_z_as_relative_to_parent(RenderingServer{self}, item, enabled)
}
func (self methodsRenderingServer) CanvasItemSetCopyToBackbuffer(item RID, enabled bool, rect Rect2) {
	self.Runtime.RenderingServer_canvas_item_set_copy_to_backbuffer(RenderingServer{self}, item, enabled, rect)
}
func (self methodsRenderingServer) CanvasItemClear(item RID) {
	self.Runtime.RenderingServer_canvas_item_clear(RenderingServer{self}, item)
}
func (self methodsRenderingServer) CanvasItemSetDrawIndex(item RID, index int64) {
	self.Runtime.RenderingServer_canvas_item_set_draw_index(RenderingServer{self}, item, index)
}
func (self methodsRenderingServer) CanvasItemSetMaterial(item RID, material RID) {
	self.Runtime.RenderingServer_canvas_item_set_material(RenderingServer{self}, item, material)
}
func (self methodsRenderingServer) CanvasItemSetUseParentMaterial(item RID, enabled bool) {
	self.Runtime.RenderingServer_canvas_item_set_use_parent_material(RenderingServer{self}, item, enabled)
}
func (self methodsRenderingServer) CanvasItemSetVisibilityNotifier(item RID, enable bool, area Rect2, enter_callable Callable, exit_callable Callable) {
	self.Runtime.RenderingServer_canvas_item_set_visibility_notifier(RenderingServer{self}, item, enable, area, enter_callable, exit_callable)
}
func (self methodsRenderingServer) CanvasItemSetCanvasGroupMode(item RID, mode RenderingServerCanvasGroupMode, clear_margin Float, fit_empty bool, fit_margin Float, blur_mipmaps bool) {
	self.Runtime.RenderingServer_canvas_item_set_canvas_group_mode(RenderingServer{self}, item, mode, clear_margin, fit_empty, fit_margin, blur_mipmaps)
}
func (self methodsRenderingServer) DebugCanvasItemGetRect(item RID) Rect2 {
	return self.Runtime.RenderingServer_debug_canvas_item_get_rect(RenderingServer{self}, item)
}
func (self methodsRenderingServer) CanvasLightCreate() RID {
	return self.Runtime.RenderingServer_canvas_light_create(RenderingServer{self})
}
func (self methodsRenderingServer) CanvasLightAttachToCanvas(light RID, canvas RID) {
	self.Runtime.RenderingServer_canvas_light_attach_to_canvas(RenderingServer{self}, light, canvas)
}
func (self methodsRenderingServer) CanvasLightSetEnabled(light RID, enabled bool) {
	self.Runtime.RenderingServer_canvas_light_set_enabled(RenderingServer{self}, light, enabled)
}
func (self methodsRenderingServer) CanvasLightSetTextureScale(light RID, scale Float) {
	self.Runtime.RenderingServer_canvas_light_set_texture_scale(RenderingServer{self}, light, scale)
}
func (self methodsRenderingServer) CanvasLightSetTransform(light RID, transform Transform2D) {
	self.Runtime.RenderingServer_canvas_light_set_transform(RenderingServer{self}, light, transform)
}
func (self methodsRenderingServer) CanvasLightSetTexture(light RID, texture RID) {
	self.Runtime.RenderingServer_canvas_light_set_texture(RenderingServer{self}, light, texture)
}
func (self methodsRenderingServer) CanvasLightSetTextureOffset(light RID, offset Vector2) {
	self.Runtime.RenderingServer_canvas_light_set_texture_offset(RenderingServer{self}, light, offset)
}
func (self methodsRenderingServer) CanvasLightSetColor(light RID, color Color) {
	self.Runtime.RenderingServer_canvas_light_set_color(RenderingServer{self}, light, color)
}
func (self methodsRenderingServer) CanvasLightSetHeight(light RID, height Float) {
	self.Runtime.RenderingServer_canvas_light_set_height(RenderingServer{self}, light, height)
}
func (self methodsRenderingServer) CanvasLightSetEnergy(light RID, energy Float) {
	self.Runtime.RenderingServer_canvas_light_set_energy(RenderingServer{self}, light, energy)
}
func (self methodsRenderingServer) CanvasLightSetZRange(light RID, min_z int64, max_z int64) {
	self.Runtime.RenderingServer_canvas_light_set_z_range(RenderingServer{self}, light, min_z, max_z)
}
func (self methodsRenderingServer) CanvasLightSetLayerRange(light RID, min_layer int64, max_layer int64) {
	self.Runtime.RenderingServer_canvas_light_set_layer_range(RenderingServer{self}, light, min_layer, max_layer)
}
func (self methodsRenderingServer) CanvasLightSetItemCullMask(light RID, mask int64) {
	self.Runtime.RenderingServer_canvas_light_set_item_cull_mask(RenderingServer{self}, light, mask)
}
func (self methodsRenderingServer) CanvasLightSetItemShadowCullMask(light RID, mask int64) {
	self.Runtime.RenderingServer_canvas_light_set_item_shadow_cull_mask(RenderingServer{self}, light, mask)
}
func (self methodsRenderingServer) CanvasLightSetMode(light RID, mode RenderingServerCanvasLightMode) {
	self.Runtime.RenderingServer_canvas_light_set_mode(RenderingServer{self}, light, mode)
}
func (self methodsRenderingServer) CanvasLightSetShadowEnabled(light RID, enabled bool) {
	self.Runtime.RenderingServer_canvas_light_set_shadow_enabled(RenderingServer{self}, light, enabled)
}
func (self methodsRenderingServer) CanvasLightSetShadowFilter(light RID, filter RenderingServerCanvasLightShadowFilter) {
	self.Runtime.RenderingServer_canvas_light_set_shadow_filter(RenderingServer{self}, light, filter)
}
func (self methodsRenderingServer) CanvasLightSetShadowColor(light RID, color Color) {
	self.Runtime.RenderingServer_canvas_light_set_shadow_color(RenderingServer{self}, light, color)
}
func (self methodsRenderingServer) CanvasLightSetShadowSmooth(light RID, smooth Float) {
	self.Runtime.RenderingServer_canvas_light_set_shadow_smooth(RenderingServer{self}, light, smooth)
}
func (self methodsRenderingServer) CanvasLightSetBlendMode(light RID, mode RenderingServerCanvasLightBlendMode) {
	self.Runtime.RenderingServer_canvas_light_set_blend_mode(RenderingServer{self}, light, mode)
}
func (self methodsRenderingServer) CanvasLightOccluderCreate() RID {
	return self.Runtime.RenderingServer_canvas_light_occluder_create(RenderingServer{self})
}
func (self methodsRenderingServer) CanvasLightOccluderAttachToCanvas(occluder RID, canvas RID) {
	self.Runtime.RenderingServer_canvas_light_occluder_attach_to_canvas(RenderingServer{self}, occluder, canvas)
}
func (self methodsRenderingServer) CanvasLightOccluderSetEnabled(occluder RID, enabled bool) {
	self.Runtime.RenderingServer_canvas_light_occluder_set_enabled(RenderingServer{self}, occluder, enabled)
}
func (self methodsRenderingServer) CanvasLightOccluderSetPolygon(occluder RID, polygon RID) {
	self.Runtime.RenderingServer_canvas_light_occluder_set_polygon(RenderingServer{self}, occluder, polygon)
}
func (self methodsRenderingServer) CanvasLightOccluderSetAsSdfCollision(occluder RID, enable bool) {
	self.Runtime.RenderingServer_canvas_light_occluder_set_as_sdf_collision(RenderingServer{self}, occluder, enable)
}
func (self methodsRenderingServer) CanvasLightOccluderSetTransform(occluder RID, transform Transform2D) {
	self.Runtime.RenderingServer_canvas_light_occluder_set_transform(RenderingServer{self}, occluder, transform)
}
func (self methodsRenderingServer) CanvasLightOccluderSetLightMask(occluder RID, mask int64) {
	self.Runtime.RenderingServer_canvas_light_occluder_set_light_mask(RenderingServer{self}, occluder, mask)
}
func (self methodsRenderingServer) CanvasOccluderPolygonCreate() RID {
	return self.Runtime.RenderingServer_canvas_occluder_polygon_create(RenderingServer{self})
}
func (self methodsRenderingServer) CanvasOccluderPolygonSetShape(occluder_polygon RID, shape PackedVector2Array, closed bool) {
	self.Runtime.RenderingServer_canvas_occluder_polygon_set_shape(RenderingServer{self}, occluder_polygon, shape, closed)
}
func (self methodsRenderingServer) CanvasOccluderPolygonSetCullMode(occluder_polygon RID, mode RenderingServerCanvasOccluderPolygonCullMode) {
	self.Runtime.RenderingServer_canvas_occluder_polygon_set_cull_mode(RenderingServer{self}, occluder_polygon, mode)
}
func (self methodsRenderingServer) CanvasSetShadowTextureSize(size int64) {
	self.Runtime.RenderingServer_canvas_set_shadow_texture_size(RenderingServer{self}, size)
}
func (self methodsRenderingServer) GlobalShaderParameterAdd(name string, atype RenderingServerGlobalShaderParameterType, default_value any) {
	self.Runtime.RenderingServer_global_shader_parameter_add(RenderingServer{self}, name, atype, default_value)
}
func (self methodsRenderingServer) GlobalShaderParameterRemove(name string) {
	self.Runtime.RenderingServer_global_shader_parameter_remove(RenderingServer{self}, name)
}
func (self methodsRenderingServer) GlobalShaderParameterGetList() ArrayOf[string] {
	return self.Runtime.RenderingServer_global_shader_parameter_get_list(RenderingServer{self})
}
func (self methodsRenderingServer) GlobalShaderParameterSet(name string, value any) {
	self.Runtime.RenderingServer_global_shader_parameter_set(RenderingServer{self}, name, value)
}
func (self methodsRenderingServer) GlobalShaderParameterSetOverride(name string, value any) {
	self.Runtime.RenderingServer_global_shader_parameter_set_override(RenderingServer{self}, name, value)
}
func (self methodsRenderingServer) GlobalShaderParameterGet(name string) any {
	return self.Runtime.RenderingServer_global_shader_parameter_get(RenderingServer{self}, name)
}
func (self methodsRenderingServer) GlobalShaderParameterGetType(name string) RenderingServerGlobalShaderParameterType {
	return self.Runtime.RenderingServer_global_shader_parameter_get_type(RenderingServer{self}, name)
}
func (self methodsRenderingServer) FreeRid(rid RID) {
	self.Runtime.RenderingServer_free_rid(RenderingServer{self}, rid)
}
func (self methodsRenderingServer) RequestFrameDrawnCallback(callable Callable) {
	self.Runtime.RenderingServer_request_frame_drawn_callback(RenderingServer{self}, callable)
}
func (self methodsRenderingServer) HasChanged() bool {
	return self.Runtime.RenderingServer_has_changed(RenderingServer{self})
}
func (self methodsRenderingServer) GetRenderingInfo(info RenderingServerRenderingInfo) int64 {
	return self.Runtime.RenderingServer_get_rendering_info(RenderingServer{self}, info)
}
func (self methodsRenderingServer) GetVideoAdapterName() string {
	return self.Runtime.RenderingServer_get_video_adapter_name(RenderingServer{self})
}
func (self methodsRenderingServer) GetVideoAdapterVendor() string {
	return self.Runtime.RenderingServer_get_video_adapter_vendor(RenderingServer{self})
}
func (self methodsRenderingServer) GetVideoAdapterType() RenderingDeviceDeviceType {
	return self.Runtime.RenderingServer_get_video_adapter_type(RenderingServer{self})
}
func (self methodsRenderingServer) GetVideoAdapterApiVersion() string {
	return self.Runtime.RenderingServer_get_video_adapter_api_version(RenderingServer{self})
}
func (self methodsRenderingServer) MakeSphereMesh(latitudes int64, longitudes int64, radius Float) RID {
	return self.Runtime.RenderingServer_make_sphere_mesh(RenderingServer{self}, latitudes, longitudes, radius)
}
func (self methodsRenderingServer) GetTestCube() RID {
	return self.Runtime.RenderingServer_get_test_cube(RenderingServer{self})
}
func (self methodsRenderingServer) GetTestTexture() RID {
	return self.Runtime.RenderingServer_get_test_texture(RenderingServer{self})
}
func (self methodsRenderingServer) GetWhiteTexture() RID {
	return self.Runtime.RenderingServer_get_white_texture(RenderingServer{self})
}
func (self methodsRenderingServer) SetBootImage(image Image, color Color, scale bool, use_filter bool) {
	self.Runtime.RenderingServer_set_boot_image(RenderingServer{self}, image, color, scale, use_filter)
}
func (self methodsRenderingServer) GetDefaultClearColor() Color {
	return self.Runtime.RenderingServer_get_default_clear_color(RenderingServer{self})
}
func (self methodsRenderingServer) SetDefaultClearColor(color Color) {
	self.Runtime.RenderingServer_set_default_clear_color(RenderingServer{self}, color)
}
func (self methodsRenderingServer) HasFeature(feature RenderingServerFeatures) bool {
	return self.Runtime.RenderingServer_has_feature(RenderingServer{self}, feature)
}
func (self methodsRenderingServer) HasOsFeature(feature string) bool {
	return self.Runtime.RenderingServer_has_os_feature(RenderingServer{self}, feature)
}
func (self methodsRenderingServer) SetDebugGenerateWireframes(generate bool) {
	self.Runtime.RenderingServer_set_debug_generate_wireframes(RenderingServer{self}, generate)
}
func (self methodsRenderingServer) IsRenderLoopEnabled() bool {
	return self.Runtime.RenderingServer_is_render_loop_enabled(RenderingServer{self})
}
func (self methodsRenderingServer) SetRenderLoopEnabled(enabled bool) {
	self.Runtime.RenderingServer_set_render_loop_enabled(RenderingServer{self}, enabled)
}
func (self methodsRenderingServer) GetFrameSetupTimeCpu() Float {
	return self.Runtime.RenderingServer_get_frame_setup_time_cpu(RenderingServer{self})
}
func (self methodsRenderingServer) ForceSync() {
	self.Runtime.RenderingServer_force_sync(RenderingServer{self})
}
func (self methodsRenderingServer) ForceDraw(swap_buffers bool, frame_step Float) {
	self.Runtime.RenderingServer_force_draw(RenderingServer{self}, swap_buffers, frame_step)
}
func (self methodsRenderingServer) GetRenderingDevice() RenderingDevice {
	return self.Runtime.RenderingServer_get_rendering_device(RenderingServer{self})
}
func (self methodsRenderingServer) CreateLocalRenderingDevice() RenderingDevice {
	return self.Runtime.RenderingServer_create_local_rendering_device(RenderingServer{self})
}
func (self methodsRenderingServer) CallOnRenderThread(callable Callable) {
	self.Runtime.RenderingServer_call_on_render_thread(RenderingServer{self}, callable)
}

type methodsResource struct {
	_ [0]*methodsResource
	class
}

func (self Resource) RefCounted() RefCounted {
	var parent RefCounted
	parent.class = self.class
	return parent
}
func (self methodsResource) SetPath(path string) {
	self.Runtime.Resource_set_path(Resource{self}, path)
}
func (self methodsResource) TakeOverPath(path string) {
	self.Runtime.Resource_take_over_path(Resource{self}, path)
}
func (self methodsResource) GetPath() string {
	return self.Runtime.Resource_get_path(Resource{self})
}
func (self methodsResource) SetName(name string) {
	self.Runtime.Resource_set_name(Resource{self}, name)
}
func (self methodsResource) GetName() string {
	return self.Runtime.Resource_get_name(Resource{self})
}
func (self methodsResource) GetRid() RID {
	return self.Runtime.Resource_get_rid(Resource{self})
}
func (self methodsResource) SetLocalToScene(enable bool) {
	self.Runtime.Resource_set_local_to_scene(Resource{self}, enable)
}
func (self methodsResource) IsLocalToScene() bool {
	return self.Runtime.Resource_is_local_to_scene(Resource{self})
}
func (self methodsResource) GetLocalScene() Node {
	return self.Runtime.Resource_get_local_scene(Resource{self})
}
func (self methodsResource) SetupLocalToScene() {
	self.Runtime.Resource_setup_local_to_scene(Resource{self})
}
func (self methodsResource) EmitChanged() {
	self.Runtime.Resource_emit_changed(Resource{self})
}
func (self methodsResource) Duplicate(subresources bool) Resource {
	return self.Runtime.Resource_duplicate(Resource{self}, subresources)
}

type methodsResourceFormatLoader struct {
	_ [0]*methodsResourceFormatLoader
	class
}

func (self ResourceFormatLoader) RefCounted() RefCounted {
	var parent RefCounted
	parent.class = self.class
	return parent
}

type methodsResourceFormatSaver struct {
	_ [0]*methodsResourceFormatSaver
	class
}

func (self ResourceFormatSaver) RefCounted() RefCounted {
	var parent RefCounted
	parent.class = self.class
	return parent
}

type methodsResourceImporter struct {
	_ [0]*methodsResourceImporter
	class
}

func (self ResourceImporter) RefCounted() RefCounted {
	var parent RefCounted
	parent.class = self.class
	return parent
}

type methodsResourceImporterBMFont struct {
	_ [0]*methodsResourceImporterBMFont
	class
}

func (self ResourceImporterBMFont) ResourceImporter() ResourceImporter {
	var parent ResourceImporter
	parent.class = self.class
	return parent
}

type methodsResourceImporterBitMap struct {
	_ [0]*methodsResourceImporterBitMap
	class
}

func (self ResourceImporterBitMap) ResourceImporter() ResourceImporter {
	var parent ResourceImporter
	parent.class = self.class
	return parent
}

type methodsResourceImporterCSVTranslation struct {
	_ [0]*methodsResourceImporterCSVTranslation
	class
}

func (self ResourceImporterCSVTranslation) ResourceImporter() ResourceImporter {
	var parent ResourceImporter
	parent.class = self.class
	return parent
}

type methodsResourceImporterDynamicFont struct {
	_ [0]*methodsResourceImporterDynamicFont
	class
}

func (self ResourceImporterDynamicFont) ResourceImporter() ResourceImporter {
	var parent ResourceImporter
	parent.class = self.class
	return parent
}

type methodsResourceImporterImage struct {
	_ [0]*methodsResourceImporterImage
	class
}

func (self ResourceImporterImage) ResourceImporter() ResourceImporter {
	var parent ResourceImporter
	parent.class = self.class
	return parent
}

type methodsResourceImporterImageFont struct {
	_ [0]*methodsResourceImporterImageFont
	class
}

func (self ResourceImporterImageFont) ResourceImporter() ResourceImporter {
	var parent ResourceImporter
	parent.class = self.class
	return parent
}

type methodsResourceImporterLayeredTexture struct {
	_ [0]*methodsResourceImporterLayeredTexture
	class
}

func (self ResourceImporterLayeredTexture) ResourceImporter() ResourceImporter {
	var parent ResourceImporter
	parent.class = self.class
	return parent
}

type methodsResourceImporterMP3 struct {
	_ [0]*methodsResourceImporterMP3
	class
}

func (self ResourceImporterMP3) ResourceImporter() ResourceImporter {
	var parent ResourceImporter
	parent.class = self.class
	return parent
}

type methodsResourceImporterOBJ struct {
	_ [0]*methodsResourceImporterOBJ
	class
}

func (self ResourceImporterOBJ) ResourceImporter() ResourceImporter {
	var parent ResourceImporter
	parent.class = self.class
	return parent
}

type methodsResourceImporterOggVorbis struct {
	_ [0]*methodsResourceImporterOggVorbis
	class
}

func (self ResourceImporterOggVorbis) ResourceImporter() ResourceImporter {
	var parent ResourceImporter
	parent.class = self.class
	return parent
}
func (self methodsResourceImporterOggVorbis) LoadFromBuffer(buffer PackedByteArray) AudioStreamOggVorbis {
	return self.Runtime.ResourceImporterOggVorbis_load_from_buffer(ResourceImporterOggVorbis{self}, buffer)
}
func (self methodsResourceImporterOggVorbis) LoadFromFile(path string) AudioStreamOggVorbis {
	return self.Runtime.ResourceImporterOggVorbis_load_from_file(ResourceImporterOggVorbis{self}, path)
}

type methodsResourceImporterScene struct {
	_ [0]*methodsResourceImporterScene
	class
}

func (self ResourceImporterScene) ResourceImporter() ResourceImporter {
	var parent ResourceImporter
	parent.class = self.class
	return parent
}

type methodsResourceImporterShaderFile struct {
	_ [0]*methodsResourceImporterShaderFile
	class
}

func (self ResourceImporterShaderFile) ResourceImporter() ResourceImporter {
	var parent ResourceImporter
	parent.class = self.class
	return parent
}

type methodsResourceImporterTexture struct {
	_ [0]*methodsResourceImporterTexture
	class
}

func (self ResourceImporterTexture) ResourceImporter() ResourceImporter {
	var parent ResourceImporter
	parent.class = self.class
	return parent
}

type methodsResourceImporterTextureAtlas struct {
	_ [0]*methodsResourceImporterTextureAtlas
	class
}

func (self ResourceImporterTextureAtlas) ResourceImporter() ResourceImporter {
	var parent ResourceImporter
	parent.class = self.class
	return parent
}

type methodsResourceImporterWAV struct {
	_ [0]*methodsResourceImporterWAV
	class
}

func (self ResourceImporterWAV) ResourceImporter() ResourceImporter {
	var parent ResourceImporter
	parent.class = self.class
	return parent
}

type methodsResourceLoader struct {
	_ [0]*methodsResourceLoader
	class
}

func (self ResourceLoader) Object() Object {
	var parent Object
	parent.class = self.class
	return parent
}
func (self methodsResourceLoader) LoadThreadedRequest(path string, type_hint string, use_sub_threads bool, cache_mode ResourceLoaderCacheMode) int64 {
	return self.Runtime.ResourceLoader_load_threaded_request(ResourceLoader{self}, path, type_hint, use_sub_threads, cache_mode)
}
func (self methodsResourceLoader) LoadThreadedGetStatus(path string, progress Array) ResourceLoaderThreadLoadStatus {
	return self.Runtime.ResourceLoader_load_threaded_get_status(ResourceLoader{self}, path, progress)
}
func (self methodsResourceLoader) LoadThreadedGet(path string) Resource {
	return self.Runtime.ResourceLoader_load_threaded_get(ResourceLoader{self}, path)
}
func (self methodsResourceLoader) Load(path string, type_hint string, cache_mode ResourceLoaderCacheMode) Resource {
	return self.Runtime.ResourceLoader_load(ResourceLoader{self}, path, type_hint, cache_mode)
}
func (self methodsResourceLoader) GetRecognizedExtensionsForType(atype string) PackedStringArray {
	return self.Runtime.ResourceLoader_get_recognized_extensions_for_type(ResourceLoader{self}, atype)
}
func (self methodsResourceLoader) AddResourceFormatLoader(format_loader ResourceFormatLoader, at_front bool) {
	self.Runtime.ResourceLoader_add_resource_format_loader(ResourceLoader{self}, format_loader, at_front)
}
func (self methodsResourceLoader) RemoveResourceFormatLoader(format_loader ResourceFormatLoader) {
	self.Runtime.ResourceLoader_remove_resource_format_loader(ResourceLoader{self}, format_loader)
}
func (self methodsResourceLoader) SetAbortOnMissingResources(abort bool) {
	self.Runtime.ResourceLoader_set_abort_on_missing_resources(ResourceLoader{self}, abort)
}
func (self methodsResourceLoader) GetDependencies(path string) PackedStringArray {
	return self.Runtime.ResourceLoader_get_dependencies(ResourceLoader{self}, path)
}
func (self methodsResourceLoader) HasCached(path string) bool {
	return self.Runtime.ResourceLoader_has_cached(ResourceLoader{self}, path)
}
func (self methodsResourceLoader) Exists(path string, type_hint string) bool {
	return self.Runtime.ResourceLoader_exists(ResourceLoader{self}, path, type_hint)
}
func (self methodsResourceLoader) GetResourceUid(path string) int64 {
	return self.Runtime.ResourceLoader_get_resource_uid(ResourceLoader{self}, path)
}

type methodsResourcePreloader struct {
	_ [0]*methodsResourcePreloader
	class
}

func (self ResourcePreloader) Node() Node { var parent Node; parent.class = self.class; return parent }
func (self methodsResourcePreloader) AddResource(name string, resource Resource) {
	self.Runtime.ResourcePreloader_add_resource(ResourcePreloader{self}, name, resource)
}
func (self methodsResourcePreloader) RemoveResource(name string) {
	self.Runtime.ResourcePreloader_remove_resource(ResourcePreloader{self}, name)
}
func (self methodsResourcePreloader) RenameResource(name string, newname string) {
	self.Runtime.ResourcePreloader_rename_resource(ResourcePreloader{self}, name, newname)
}
func (self methodsResourcePreloader) HasResource(name string) bool {
	return self.Runtime.ResourcePreloader_has_resource(ResourcePreloader{self}, name)
}
func (self methodsResourcePreloader) GetResource(name string) Resource {
	return self.Runtime.ResourcePreloader_get_resource(ResourcePreloader{self}, name)
}
func (self methodsResourcePreloader) GetResourceList() PackedStringArray {
	return self.Runtime.ResourcePreloader_get_resource_list(ResourcePreloader{self})
}

type methodsResourceSaver struct {
	_ [0]*methodsResourceSaver
	class
}

func (self ResourceSaver) Object() Object {
	var parent Object
	parent.class = self.class
	return parent
}
func (self methodsResourceSaver) Save(resource Resource, path string, flags ResourceSaverSaverFlags) int64 {
	return self.Runtime.ResourceSaver_save(ResourceSaver{self}, resource, path, flags)
}
func (self methodsResourceSaver) GetRecognizedExtensions(atype Resource) PackedStringArray {
	return self.Runtime.ResourceSaver_get_recognized_extensions(ResourceSaver{self}, atype)
}
func (self methodsResourceSaver) AddResourceFormatSaver(format_saver ResourceFormatSaver, at_front bool) {
	self.Runtime.ResourceSaver_add_resource_format_saver(ResourceSaver{self}, format_saver, at_front)
}
func (self methodsResourceSaver) RemoveResourceFormatSaver(format_saver ResourceFormatSaver) {
	self.Runtime.ResourceSaver_remove_resource_format_saver(ResourceSaver{self}, format_saver)
}

type methodsResourceUID struct {
	_ [0]*methodsResourceUID
	class
}

func (self ResourceUID) Object() Object { var parent Object; parent.class = self.class; return parent }
func (self methodsResourceUID) IdToText(id int64) string {
	return self.Runtime.ResourceUID_id_to_text(ResourceUID{self}, id)
}
func (self methodsResourceUID) TextToId(text_id string) int64 {
	return self.Runtime.ResourceUID_text_to_id(ResourceUID{self}, text_id)
}
func (self methodsResourceUID) CreateId() int64 {
	return self.Runtime.ResourceUID_create_id(ResourceUID{self})
}
func (self methodsResourceUID) HasId(id int64) bool {
	return self.Runtime.ResourceUID_has_id(ResourceUID{self}, id)
}
func (self methodsResourceUID) AddId(id int64, path string) {
	self.Runtime.ResourceUID_add_id(ResourceUID{self}, id, path)
}
func (self methodsResourceUID) SetId(id int64, path string) {
	self.Runtime.ResourceUID_set_id(ResourceUID{self}, id, path)
}
func (self methodsResourceUID) GetIdPath(id int64) string {
	return self.Runtime.ResourceUID_get_id_path(ResourceUID{self}, id)
}
func (self methodsResourceUID) RemoveId(id int64) {
	self.Runtime.ResourceUID_remove_id(ResourceUID{self}, id)
}

type methodsRibbonTrailMesh struct {
	_ [0]*methodsRibbonTrailMesh
	class
}

func (self RibbonTrailMesh) PrimitiveMesh() PrimitiveMesh {
	var parent PrimitiveMesh
	parent.class = self.class
	return parent
}
func (self methodsRibbonTrailMesh) SetSize(size Float) {
	self.Runtime.RibbonTrailMesh_set_size(RibbonTrailMesh{self}, size)
}
func (self methodsRibbonTrailMesh) GetSize() Float {
	return self.Runtime.RibbonTrailMesh_get_size(RibbonTrailMesh{self})
}
func (self methodsRibbonTrailMesh) SetSections(sections int64) {
	self.Runtime.RibbonTrailMesh_set_sections(RibbonTrailMesh{self}, sections)
}
func (self methodsRibbonTrailMesh) GetSections() int64 {
	return self.Runtime.RibbonTrailMesh_get_sections(RibbonTrailMesh{self})
}
func (self methodsRibbonTrailMesh) SetSectionLength(section_length Float) {
	self.Runtime.RibbonTrailMesh_set_section_length(RibbonTrailMesh{self}, section_length)
}
func (self methodsRibbonTrailMesh) GetSectionLength() Float {
	return self.Runtime.RibbonTrailMesh_get_section_length(RibbonTrailMesh{self})
}
func (self methodsRibbonTrailMesh) SetSectionSegments(section_segments int64) {
	self.Runtime.RibbonTrailMesh_set_section_segments(RibbonTrailMesh{self}, section_segments)
}
func (self methodsRibbonTrailMesh) GetSectionSegments() int64 {
	return self.Runtime.RibbonTrailMesh_get_section_segments(RibbonTrailMesh{self})
}
func (self methodsRibbonTrailMesh) SetCurve(curve Curve) {
	self.Runtime.RibbonTrailMesh_set_curve(RibbonTrailMesh{self}, curve)
}
func (self methodsRibbonTrailMesh) GetCurve() Curve {
	return self.Runtime.RibbonTrailMesh_get_curve(RibbonTrailMesh{self})
}
func (self methodsRibbonTrailMesh) SetShape(shape RibbonTrailMeshShape) {
	self.Runtime.RibbonTrailMesh_set_shape(RibbonTrailMesh{self}, shape)
}
func (self methodsRibbonTrailMesh) GetShape() RibbonTrailMeshShape {
	return self.Runtime.RibbonTrailMesh_get_shape(RibbonTrailMesh{self})
}

type methodsRichTextEffect struct {
	_ [0]*methodsRichTextEffect
	class
}

func (self RichTextEffect) Resource() Resource {
	var parent Resource
	parent.class = self.class
	return parent
}

type methodsRichTextLabel struct {
	_ [0]*methodsRichTextLabel
	class
}

func (self RichTextLabel) Control() Control {
	var parent Control
	parent.class = self.class
	return parent
}
func (self methodsRichTextLabel) GetParsedText() string {
	return self.Runtime.RichTextLabel_get_parsed_text(RichTextLabel{self})
}
func (self methodsRichTextLabel) AddText(text string) {
	self.Runtime.RichTextLabel_add_text(RichTextLabel{self}, text)
}
func (self methodsRichTextLabel) SetText(text string) {
	self.Runtime.RichTextLabel_set_text(RichTextLabel{self}, text)
}
func (self methodsRichTextLabel) AddImage(image Texture2D, width int64, height int64, color Color, inline_align InlineAlignment, region Rect2, key any, pad bool, tooltip string, size_in_percent bool) {
	self.Runtime.RichTextLabel_add_image(RichTextLabel{self}, image, width, height, color, inline_align, region, key, pad, tooltip, size_in_percent)
}
func (self methodsRichTextLabel) UpdateImage(key any, mask RichTextLabelImageUpdateMask, image Texture2D, width int64, height int64, color Color, inline_align InlineAlignment, region Rect2, pad bool, tooltip string, size_in_percent bool) {
	self.Runtime.RichTextLabel_update_image(RichTextLabel{self}, key, mask, image, width, height, color, inline_align, region, pad, tooltip, size_in_percent)
}
func (self methodsRichTextLabel) Newline() {
	self.Runtime.RichTextLabel_newline(RichTextLabel{self})
}
func (self methodsRichTextLabel) RemoveParagraph(paragraph int64) bool {
	return self.Runtime.RichTextLabel_remove_paragraph(RichTextLabel{self}, paragraph)
}
func (self methodsRichTextLabel) PushFont(font Font, font_size int64) {
	self.Runtime.RichTextLabel_push_font(RichTextLabel{self}, font, font_size)
}
func (self methodsRichTextLabel) PushFontSize(font_size int64) {
	self.Runtime.RichTextLabel_push_font_size(RichTextLabel{self}, font_size)
}
func (self methodsRichTextLabel) PushNormal() {
	self.Runtime.RichTextLabel_push_normal(RichTextLabel{self})
}
func (self methodsRichTextLabel) PushBold() {
	self.Runtime.RichTextLabel_push_bold(RichTextLabel{self})
}
func (self methodsRichTextLabel) PushBoldItalics() {
	self.Runtime.RichTextLabel_push_bold_italics(RichTextLabel{self})
}
func (self methodsRichTextLabel) PushItalics() {
	self.Runtime.RichTextLabel_push_italics(RichTextLabel{self})
}
func (self methodsRichTextLabel) PushMono() {
	self.Runtime.RichTextLabel_push_mono(RichTextLabel{self})
}
func (self methodsRichTextLabel) PushColor(color Color) {
	self.Runtime.RichTextLabel_push_color(RichTextLabel{self}, color)
}
func (self methodsRichTextLabel) PushOutlineSize(outline_size int64) {
	self.Runtime.RichTextLabel_push_outline_size(RichTextLabel{self}, outline_size)
}
func (self methodsRichTextLabel) PushOutlineColor(color Color) {
	self.Runtime.RichTextLabel_push_outline_color(RichTextLabel{self}, color)
}
func (self methodsRichTextLabel) PushParagraph(alignment HorizontalAlignment, base_direction ControlTextDirection, language string, st_parser TextServerStructuredTextParser, justification_flags TextServerJustificationFlag, tab_stops PackedFloat32Array) {
	self.Runtime.RichTextLabel_push_paragraph(RichTextLabel{self}, alignment, base_direction, language, st_parser, justification_flags, tab_stops)
}
func (self methodsRichTextLabel) PushIndent(level int64) {
	self.Runtime.RichTextLabel_push_indent(RichTextLabel{self}, level)
}
func (self methodsRichTextLabel) PushList(level int64, atype RichTextLabelListType, capitalize bool, bullet string) {
	self.Runtime.RichTextLabel_push_list(RichTextLabel{self}, level, atype, capitalize, bullet)
}
func (self methodsRichTextLabel) PushMeta(data any) {
	self.Runtime.RichTextLabel_push_meta(RichTextLabel{self}, data)
}
func (self methodsRichTextLabel) PushHint(description string) {
	self.Runtime.RichTextLabel_push_hint(RichTextLabel{self}, description)
}
func (self methodsRichTextLabel) PushLanguage(language string) {
	self.Runtime.RichTextLabel_push_language(RichTextLabel{self}, language)
}
func (self methodsRichTextLabel) PushUnderline() {
	self.Runtime.RichTextLabel_push_underline(RichTextLabel{self})
}
func (self methodsRichTextLabel) PushStrikethrough() {
	self.Runtime.RichTextLabel_push_strikethrough(RichTextLabel{self})
}
func (self methodsRichTextLabel) PushTable(columns int64, inline_align InlineAlignment, align_to_row int64) {
	self.Runtime.RichTextLabel_push_table(RichTextLabel{self}, columns, inline_align, align_to_row)
}
func (self methodsRichTextLabel) PushDropcap(s string, font Font, size int64, dropcap_margins Rect2, color Color, outline_size int64, outline_color Color) {
	self.Runtime.RichTextLabel_push_dropcap(RichTextLabel{self}, s, font, size, dropcap_margins, color, outline_size, outline_color)
}
func (self methodsRichTextLabel) SetTableColumnExpand(column int64, expand bool, ratio int64) {
	self.Runtime.RichTextLabel_set_table_column_expand(RichTextLabel{self}, column, expand, ratio)
}
func (self methodsRichTextLabel) SetCellRowBackgroundColor(odd_row_bg Color, even_row_bg Color) {
	self.Runtime.RichTextLabel_set_cell_row_background_color(RichTextLabel{self}, odd_row_bg, even_row_bg)
}
func (self methodsRichTextLabel) SetCellBorderColor(color Color) {
	self.Runtime.RichTextLabel_set_cell_border_color(RichTextLabel{self}, color)
}
func (self methodsRichTextLabel) SetCellSizeOverride(min_size Vector2, max_size Vector2) {
	self.Runtime.RichTextLabel_set_cell_size_override(RichTextLabel{self}, min_size, max_size)
}
func (self methodsRichTextLabel) SetCellPadding(padding Rect2) {
	self.Runtime.RichTextLabel_set_cell_padding(RichTextLabel{self}, padding)
}
func (self methodsRichTextLabel) PushCell() {
	self.Runtime.RichTextLabel_push_cell(RichTextLabel{self})
}
func (self methodsRichTextLabel) PushFgcolor(fgcolor Color) {
	self.Runtime.RichTextLabel_push_fgcolor(RichTextLabel{self}, fgcolor)
}
func (self methodsRichTextLabel) PushBgcolor(bgcolor Color) {
	self.Runtime.RichTextLabel_push_bgcolor(RichTextLabel{self}, bgcolor)
}
func (self methodsRichTextLabel) PushCustomfx(effect RichTextEffect, env Dictionary) {
	self.Runtime.RichTextLabel_push_customfx(RichTextLabel{self}, effect, env)
}
func (self methodsRichTextLabel) PushContext() {
	self.Runtime.RichTextLabel_push_context(RichTextLabel{self})
}
func (self methodsRichTextLabel) PopContext() {
	self.Runtime.RichTextLabel_pop_context(RichTextLabel{self})
}
func (self methodsRichTextLabel) Pop() {
	self.Runtime.RichTextLabel_pop(RichTextLabel{self})
}
func (self methodsRichTextLabel) PopAll() {
	self.Runtime.RichTextLabel_pop_all(RichTextLabel{self})
}
func (self methodsRichTextLabel) Clear() {
	self.Runtime.RichTextLabel_clear(RichTextLabel{self})
}
func (self methodsRichTextLabel) SetStructuredTextBidiOverride(parser TextServerStructuredTextParser) {
	self.Runtime.RichTextLabel_set_structured_text_bidi_override(RichTextLabel{self}, parser)
}
func (self methodsRichTextLabel) GetStructuredTextBidiOverride() TextServerStructuredTextParser {
	return self.Runtime.RichTextLabel_get_structured_text_bidi_override(RichTextLabel{self})
}
func (self methodsRichTextLabel) SetStructuredTextBidiOverrideOptions(args Array) {
	self.Runtime.RichTextLabel_set_structured_text_bidi_override_options(RichTextLabel{self}, args)
}
func (self methodsRichTextLabel) GetStructuredTextBidiOverrideOptions() Array {
	return self.Runtime.RichTextLabel_get_structured_text_bidi_override_options(RichTextLabel{self})
}
func (self methodsRichTextLabel) SetTextDirection(direction ControlTextDirection) {
	self.Runtime.RichTextLabel_set_text_direction(RichTextLabel{self}, direction)
}
func (self methodsRichTextLabel) GetTextDirection() ControlTextDirection {
	return self.Runtime.RichTextLabel_get_text_direction(RichTextLabel{self})
}
func (self methodsRichTextLabel) SetLanguage(language string) {
	self.Runtime.RichTextLabel_set_language(RichTextLabel{self}, language)
}
func (self methodsRichTextLabel) GetLanguage() string {
	return self.Runtime.RichTextLabel_get_language(RichTextLabel{self})
}
func (self methodsRichTextLabel) SetAutowrapMode(autowrap_mode TextServerAutowrapMode) {
	self.Runtime.RichTextLabel_set_autowrap_mode(RichTextLabel{self}, autowrap_mode)
}
func (self methodsRichTextLabel) GetAutowrapMode() TextServerAutowrapMode {
	return self.Runtime.RichTextLabel_get_autowrap_mode(RichTextLabel{self})
}
func (self methodsRichTextLabel) SetMetaUnderline(enable bool) {
	self.Runtime.RichTextLabel_set_meta_underline(RichTextLabel{self}, enable)
}
func (self methodsRichTextLabel) IsMetaUnderlined() bool {
	return self.Runtime.RichTextLabel_is_meta_underlined(RichTextLabel{self})
}
func (self methodsRichTextLabel) SetHintUnderline(enable bool) {
	self.Runtime.RichTextLabel_set_hint_underline(RichTextLabel{self}, enable)
}
func (self methodsRichTextLabel) IsHintUnderlined() bool {
	return self.Runtime.RichTextLabel_is_hint_underlined(RichTextLabel{self})
}
func (self methodsRichTextLabel) SetScrollActive(active bool) {
	self.Runtime.RichTextLabel_set_scroll_active(RichTextLabel{self}, active)
}
func (self methodsRichTextLabel) IsScrollActive() bool {
	return self.Runtime.RichTextLabel_is_scroll_active(RichTextLabel{self})
}
func (self methodsRichTextLabel) SetScrollFollow(follow bool) {
	self.Runtime.RichTextLabel_set_scroll_follow(RichTextLabel{self}, follow)
}
func (self methodsRichTextLabel) IsScrollFollowing() bool {
	return self.Runtime.RichTextLabel_is_scroll_following(RichTextLabel{self})
}
func (self methodsRichTextLabel) GetVScrollBar() VScrollBar {
	return self.Runtime.RichTextLabel_get_v_scroll_bar(RichTextLabel{self})
}
func (self methodsRichTextLabel) ScrollToLine(line int64) {
	self.Runtime.RichTextLabel_scroll_to_line(RichTextLabel{self}, line)
}
func (self methodsRichTextLabel) ScrollToParagraph(paragraph int64) {
	self.Runtime.RichTextLabel_scroll_to_paragraph(RichTextLabel{self}, paragraph)
}
func (self methodsRichTextLabel) ScrollToSelection() {
	self.Runtime.RichTextLabel_scroll_to_selection(RichTextLabel{self})
}
func (self methodsRichTextLabel) SetTabSize(spaces int64) {
	self.Runtime.RichTextLabel_set_tab_size(RichTextLabel{self}, spaces)
}
func (self methodsRichTextLabel) GetTabSize() int64 {
	return self.Runtime.RichTextLabel_get_tab_size(RichTextLabel{self})
}
func (self methodsRichTextLabel) SetFitContent(enabled bool) {
	self.Runtime.RichTextLabel_set_fit_content(RichTextLabel{self}, enabled)
}
func (self methodsRichTextLabel) IsFitContentEnabled() bool {
	return self.Runtime.RichTextLabel_is_fit_content_enabled(RichTextLabel{self})
}
func (self methodsRichTextLabel) SetSelectionEnabled(enabled bool) {
	self.Runtime.RichTextLabel_set_selection_enabled(RichTextLabel{self}, enabled)
}
func (self methodsRichTextLabel) IsSelectionEnabled() bool {
	return self.Runtime.RichTextLabel_is_selection_enabled(RichTextLabel{self})
}
func (self methodsRichTextLabel) SetContextMenuEnabled(enabled bool) {
	self.Runtime.RichTextLabel_set_context_menu_enabled(RichTextLabel{self}, enabled)
}
func (self methodsRichTextLabel) IsContextMenuEnabled() bool {
	return self.Runtime.RichTextLabel_is_context_menu_enabled(RichTextLabel{self})
}
func (self methodsRichTextLabel) SetShortcutKeysEnabled(enabled bool) {
	self.Runtime.RichTextLabel_set_shortcut_keys_enabled(RichTextLabel{self}, enabled)
}
func (self methodsRichTextLabel) IsShortcutKeysEnabled() bool {
	return self.Runtime.RichTextLabel_is_shortcut_keys_enabled(RichTextLabel{self})
}
func (self methodsRichTextLabel) SetDeselectOnFocusLossEnabled(enable bool) {
	self.Runtime.RichTextLabel_set_deselect_on_focus_loss_enabled(RichTextLabel{self}, enable)
}
func (self methodsRichTextLabel) IsDeselectOnFocusLossEnabled() bool {
	return self.Runtime.RichTextLabel_is_deselect_on_focus_loss_enabled(RichTextLabel{self})
}
func (self methodsRichTextLabel) SetDragAndDropSelectionEnabled(enable bool) {
	self.Runtime.RichTextLabel_set_drag_and_drop_selection_enabled(RichTextLabel{self}, enable)
}
func (self methodsRichTextLabel) IsDragAndDropSelectionEnabled() bool {
	return self.Runtime.RichTextLabel_is_drag_and_drop_selection_enabled(RichTextLabel{self})
}
func (self methodsRichTextLabel) GetSelectionFrom() int64 {
	return self.Runtime.RichTextLabel_get_selection_from(RichTextLabel{self})
}
func (self methodsRichTextLabel) GetSelectionTo() int64 {
	return self.Runtime.RichTextLabel_get_selection_to(RichTextLabel{self})
}
func (self methodsRichTextLabel) SelectAll() {
	self.Runtime.RichTextLabel_select_all(RichTextLabel{self})
}
func (self methodsRichTextLabel) GetSelectedText() string {
	return self.Runtime.RichTextLabel_get_selected_text(RichTextLabel{self})
}
func (self methodsRichTextLabel) Deselect() {
	self.Runtime.RichTextLabel_deselect(RichTextLabel{self})
}
func (self methodsRichTextLabel) ParseBbcode(bbcode string) {
	self.Runtime.RichTextLabel_parse_bbcode(RichTextLabel{self}, bbcode)
}
func (self methodsRichTextLabel) AppendText(bbcode string) {
	self.Runtime.RichTextLabel_append_text(RichTextLabel{self}, bbcode)
}
func (self methodsRichTextLabel) GetText() string {
	return self.Runtime.RichTextLabel_get_text(RichTextLabel{self})
}
func (self methodsRichTextLabel) IsReady() bool {
	return self.Runtime.RichTextLabel_is_ready(RichTextLabel{self})
}
func (self methodsRichTextLabel) SetThreaded(threaded bool) {
	self.Runtime.RichTextLabel_set_threaded(RichTextLabel{self}, threaded)
}
func (self methodsRichTextLabel) IsThreaded() bool {
	return self.Runtime.RichTextLabel_is_threaded(RichTextLabel{self})
}
func (self methodsRichTextLabel) SetProgressBarDelay(delay_ms int64) {
	self.Runtime.RichTextLabel_set_progress_bar_delay(RichTextLabel{self}, delay_ms)
}
func (self methodsRichTextLabel) GetProgressBarDelay() int64 {
	return self.Runtime.RichTextLabel_get_progress_bar_delay(RichTextLabel{self})
}
func (self methodsRichTextLabel) SetVisibleCharacters(amount int64) {
	self.Runtime.RichTextLabel_set_visible_characters(RichTextLabel{self}, amount)
}
func (self methodsRichTextLabel) GetVisibleCharacters() int64 {
	return self.Runtime.RichTextLabel_get_visible_characters(RichTextLabel{self})
}
func (self methodsRichTextLabel) GetVisibleCharactersBehavior() TextServerVisibleCharactersBehavior {
	return self.Runtime.RichTextLabel_get_visible_characters_behavior(RichTextLabel{self})
}
func (self methodsRichTextLabel) SetVisibleCharactersBehavior(behavior TextServerVisibleCharactersBehavior) {
	self.Runtime.RichTextLabel_set_visible_characters_behavior(RichTextLabel{self}, behavior)
}
func (self methodsRichTextLabel) SetVisibleRatio(ratio Float) {
	self.Runtime.RichTextLabel_set_visible_ratio(RichTextLabel{self}, ratio)
}
func (self methodsRichTextLabel) GetVisibleRatio() Float {
	return self.Runtime.RichTextLabel_get_visible_ratio(RichTextLabel{self})
}
func (self methodsRichTextLabel) GetCharacterLine(character int64) int64 {
	return self.Runtime.RichTextLabel_get_character_line(RichTextLabel{self}, character)
}
func (self methodsRichTextLabel) GetCharacterParagraph(character int64) int64 {
	return self.Runtime.RichTextLabel_get_character_paragraph(RichTextLabel{self}, character)
}
func (self methodsRichTextLabel) GetTotalCharacterCount() int64 {
	return self.Runtime.RichTextLabel_get_total_character_count(RichTextLabel{self})
}
func (self methodsRichTextLabel) SetUseBbcode(enable bool) {
	self.Runtime.RichTextLabel_set_use_bbcode(RichTextLabel{self}, enable)
}
func (self methodsRichTextLabel) IsUsingBbcode() bool {
	return self.Runtime.RichTextLabel_is_using_bbcode(RichTextLabel{self})
}
func (self methodsRichTextLabel) GetLineCount() int64 {
	return self.Runtime.RichTextLabel_get_line_count(RichTextLabel{self})
}
func (self methodsRichTextLabel) GetVisibleLineCount() int64 {
	return self.Runtime.RichTextLabel_get_visible_line_count(RichTextLabel{self})
}
func (self methodsRichTextLabel) GetParagraphCount() int64 {
	return self.Runtime.RichTextLabel_get_paragraph_count(RichTextLabel{self})
}
func (self methodsRichTextLabel) GetVisibleParagraphCount() int64 {
	return self.Runtime.RichTextLabel_get_visible_paragraph_count(RichTextLabel{self})
}
func (self methodsRichTextLabel) GetContentHeight() int64 {
	return self.Runtime.RichTextLabel_get_content_height(RichTextLabel{self})
}
func (self methodsRichTextLabel) GetContentWidth() int64 {
	return self.Runtime.RichTextLabel_get_content_width(RichTextLabel{self})
}
func (self methodsRichTextLabel) GetLineOffset(line int64) Float {
	return self.Runtime.RichTextLabel_get_line_offset(RichTextLabel{self}, line)
}
func (self methodsRichTextLabel) GetParagraphOffset(paragraph int64) Float {
	return self.Runtime.RichTextLabel_get_paragraph_offset(RichTextLabel{self}, paragraph)
}
func (self methodsRichTextLabel) ParseExpressionsForValues(expressions PackedStringArray) Dictionary {
	return self.Runtime.RichTextLabel_parse_expressions_for_values(RichTextLabel{self}, expressions)
}
func (self methodsRichTextLabel) SetEffects(effects Array) {
	self.Runtime.RichTextLabel_set_effects(RichTextLabel{self}, effects)
}
func (self methodsRichTextLabel) GetEffects() Array {
	return self.Runtime.RichTextLabel_get_effects(RichTextLabel{self})
}
func (self methodsRichTextLabel) InstallEffect(effect any) {
	self.Runtime.RichTextLabel_install_effect(RichTextLabel{self}, effect)
}
func (self methodsRichTextLabel) GetMenu() PopupMenu {
	return self.Runtime.RichTextLabel_get_menu(RichTextLabel{self})
}
func (self methodsRichTextLabel) IsMenuVisible() bool {
	return self.Runtime.RichTextLabel_is_menu_visible(RichTextLabel{self})
}
func (self methodsRichTextLabel) MenuOption(option int64) {
	self.Runtime.RichTextLabel_menu_option(RichTextLabel{self}, option)
}

type methodsRigidBody2D struct {
	_ [0]*methodsRigidBody2D
	class
}

func (self RigidBody2D) PhysicsBody2D() PhysicsBody2D {
	var parent PhysicsBody2D
	parent.class = self.class
	return parent
}
func (self methodsRigidBody2D) SetMass(mass Float) {
	self.Runtime.RigidBody2D_set_mass(RigidBody2D{self}, mass)
}
func (self methodsRigidBody2D) GetMass() Float {
	return self.Runtime.RigidBody2D_get_mass(RigidBody2D{self})
}
func (self methodsRigidBody2D) GetInertia() Float {
	return self.Runtime.RigidBody2D_get_inertia(RigidBody2D{self})
}
func (self methodsRigidBody2D) SetInertia(inertia Float) {
	self.Runtime.RigidBody2D_set_inertia(RigidBody2D{self}, inertia)
}
func (self methodsRigidBody2D) SetCenterOfMassMode(mode RigidBody2DCenterOfMassMode) {
	self.Runtime.RigidBody2D_set_center_of_mass_mode(RigidBody2D{self}, mode)
}
func (self methodsRigidBody2D) GetCenterOfMassMode() RigidBody2DCenterOfMassMode {
	return self.Runtime.RigidBody2D_get_center_of_mass_mode(RigidBody2D{self})
}
func (self methodsRigidBody2D) SetCenterOfMass(center_of_mass Vector2) {
	self.Runtime.RigidBody2D_set_center_of_mass(RigidBody2D{self}, center_of_mass)
}
func (self methodsRigidBody2D) GetCenterOfMass() Vector2 {
	return self.Runtime.RigidBody2D_get_center_of_mass(RigidBody2D{self})
}
func (self methodsRigidBody2D) SetPhysicsMaterialOverride(physics_material_override PhysicsMaterial) {
	self.Runtime.RigidBody2D_set_physics_material_override(RigidBody2D{self}, physics_material_override)
}
func (self methodsRigidBody2D) GetPhysicsMaterialOverride() PhysicsMaterial {
	return self.Runtime.RigidBody2D_get_physics_material_override(RigidBody2D{self})
}
func (self methodsRigidBody2D) SetGravityScale(gravity_scale Float) {
	self.Runtime.RigidBody2D_set_gravity_scale(RigidBody2D{self}, gravity_scale)
}
func (self methodsRigidBody2D) GetGravityScale() Float {
	return self.Runtime.RigidBody2D_get_gravity_scale(RigidBody2D{self})
}
func (self methodsRigidBody2D) SetLinearDampMode(linear_damp_mode RigidBody2DDampMode) {
	self.Runtime.RigidBody2D_set_linear_damp_mode(RigidBody2D{self}, linear_damp_mode)
}
func (self methodsRigidBody2D) GetLinearDampMode() RigidBody2DDampMode {
	return self.Runtime.RigidBody2D_get_linear_damp_mode(RigidBody2D{self})
}
func (self methodsRigidBody2D) SetAngularDampMode(angular_damp_mode RigidBody2DDampMode) {
	self.Runtime.RigidBody2D_set_angular_damp_mode(RigidBody2D{self}, angular_damp_mode)
}
func (self methodsRigidBody2D) GetAngularDampMode() RigidBody2DDampMode {
	return self.Runtime.RigidBody2D_get_angular_damp_mode(RigidBody2D{self})
}
func (self methodsRigidBody2D) SetLinearDamp(linear_damp Float) {
	self.Runtime.RigidBody2D_set_linear_damp(RigidBody2D{self}, linear_damp)
}
func (self methodsRigidBody2D) GetLinearDamp() Float {
	return self.Runtime.RigidBody2D_get_linear_damp(RigidBody2D{self})
}
func (self methodsRigidBody2D) SetAngularDamp(angular_damp Float) {
	self.Runtime.RigidBody2D_set_angular_damp(RigidBody2D{self}, angular_damp)
}
func (self methodsRigidBody2D) GetAngularDamp() Float {
	return self.Runtime.RigidBody2D_get_angular_damp(RigidBody2D{self})
}
func (self methodsRigidBody2D) SetLinearVelocity(linear_velocity Vector2) {
	self.Runtime.RigidBody2D_set_linear_velocity(RigidBody2D{self}, linear_velocity)
}
func (self methodsRigidBody2D) GetLinearVelocity() Vector2 {
	return self.Runtime.RigidBody2D_get_linear_velocity(RigidBody2D{self})
}
func (self methodsRigidBody2D) SetAngularVelocity(angular_velocity Float) {
	self.Runtime.RigidBody2D_set_angular_velocity(RigidBody2D{self}, angular_velocity)
}
func (self methodsRigidBody2D) GetAngularVelocity() Float {
	return self.Runtime.RigidBody2D_get_angular_velocity(RigidBody2D{self})
}
func (self methodsRigidBody2D) SetMaxContactsReported(amount int64) {
	self.Runtime.RigidBody2D_set_max_contacts_reported(RigidBody2D{self}, amount)
}
func (self methodsRigidBody2D) GetMaxContactsReported() int64 {
	return self.Runtime.RigidBody2D_get_max_contacts_reported(RigidBody2D{self})
}
func (self methodsRigidBody2D) GetContactCount() int64 {
	return self.Runtime.RigidBody2D_get_contact_count(RigidBody2D{self})
}
func (self methodsRigidBody2D) SetUseCustomIntegrator(enable bool) {
	self.Runtime.RigidBody2D_set_use_custom_integrator(RigidBody2D{self}, enable)
}
func (self methodsRigidBody2D) IsUsingCustomIntegrator() bool {
	return self.Runtime.RigidBody2D_is_using_custom_integrator(RigidBody2D{self})
}
func (self methodsRigidBody2D) SetContactMonitor(enabled bool) {
	self.Runtime.RigidBody2D_set_contact_monitor(RigidBody2D{self}, enabled)
}
func (self methodsRigidBody2D) IsContactMonitorEnabled() bool {
	return self.Runtime.RigidBody2D_is_contact_monitor_enabled(RigidBody2D{self})
}
func (self methodsRigidBody2D) SetContinuousCollisionDetectionMode(mode RigidBody2DCCDMode) {
	self.Runtime.RigidBody2D_set_continuous_collision_detection_mode(RigidBody2D{self}, mode)
}
func (self methodsRigidBody2D) GetContinuousCollisionDetectionMode() RigidBody2DCCDMode {
	return self.Runtime.RigidBody2D_get_continuous_collision_detection_mode(RigidBody2D{self})
}
func (self methodsRigidBody2D) SetAxisVelocity(axis_velocity Vector2) {
	self.Runtime.RigidBody2D_set_axis_velocity(RigidBody2D{self}, axis_velocity)
}
func (self methodsRigidBody2D) ApplyCentralImpulse(impulse Vector2) {
	self.Runtime.RigidBody2D_apply_central_impulse(RigidBody2D{self}, impulse)
}
func (self methodsRigidBody2D) ApplyImpulse(impulse Vector2, position Vector2) {
	self.Runtime.RigidBody2D_apply_impulse(RigidBody2D{self}, impulse, position)
}
func (self methodsRigidBody2D) ApplyTorqueImpulse(torque Float) {
	self.Runtime.RigidBody2D_apply_torque_impulse(RigidBody2D{self}, torque)
}
func (self methodsRigidBody2D) ApplyCentralForce(force Vector2) {
	self.Runtime.RigidBody2D_apply_central_force(RigidBody2D{self}, force)
}
func (self methodsRigidBody2D) ApplyForce(force Vector2, position Vector2) {
	self.Runtime.RigidBody2D_apply_force(RigidBody2D{self}, force, position)
}
func (self methodsRigidBody2D) ApplyTorque(torque Float) {
	self.Runtime.RigidBody2D_apply_torque(RigidBody2D{self}, torque)
}
func (self methodsRigidBody2D) AddConstantCentralForce(force Vector2) {
	self.Runtime.RigidBody2D_add_constant_central_force(RigidBody2D{self}, force)
}
func (self methodsRigidBody2D) AddConstantForce(force Vector2, position Vector2) {
	self.Runtime.RigidBody2D_add_constant_force(RigidBody2D{self}, force, position)
}
func (self methodsRigidBody2D) AddConstantTorque(torque Float) {
	self.Runtime.RigidBody2D_add_constant_torque(RigidBody2D{self}, torque)
}
func (self methodsRigidBody2D) SetConstantForce(force Vector2) {
	self.Runtime.RigidBody2D_set_constant_force(RigidBody2D{self}, force)
}
func (self methodsRigidBody2D) GetConstantForce() Vector2 {
	return self.Runtime.RigidBody2D_get_constant_force(RigidBody2D{self})
}
func (self methodsRigidBody2D) SetConstantTorque(torque Float) {
	self.Runtime.RigidBody2D_set_constant_torque(RigidBody2D{self}, torque)
}
func (self methodsRigidBody2D) GetConstantTorque() Float {
	return self.Runtime.RigidBody2D_get_constant_torque(RigidBody2D{self})
}
func (self methodsRigidBody2D) SetSleeping(sleeping bool) {
	self.Runtime.RigidBody2D_set_sleeping(RigidBody2D{self}, sleeping)
}
func (self methodsRigidBody2D) IsSleeping() bool {
	return self.Runtime.RigidBody2D_is_sleeping(RigidBody2D{self})
}
func (self methodsRigidBody2D) SetCanSleep(able_to_sleep bool) {
	self.Runtime.RigidBody2D_set_can_sleep(RigidBody2D{self}, able_to_sleep)
}
func (self methodsRigidBody2D) IsAbleToSleep() bool {
	return self.Runtime.RigidBody2D_is_able_to_sleep(RigidBody2D{self})
}
func (self methodsRigidBody2D) SetLockRotationEnabled(lock_rotation bool) {
	self.Runtime.RigidBody2D_set_lock_rotation_enabled(RigidBody2D{self}, lock_rotation)
}
func (self methodsRigidBody2D) IsLockRotationEnabled() bool {
	return self.Runtime.RigidBody2D_is_lock_rotation_enabled(RigidBody2D{self})
}
func (self methodsRigidBody2D) SetFreezeEnabled(freeze_mode bool) {
	self.Runtime.RigidBody2D_set_freeze_enabled(RigidBody2D{self}, freeze_mode)
}
func (self methodsRigidBody2D) IsFreezeEnabled() bool {
	return self.Runtime.RigidBody2D_is_freeze_enabled(RigidBody2D{self})
}
func (self methodsRigidBody2D) SetFreezeMode(freeze_mode RigidBody2DFreezeMode) {
	self.Runtime.RigidBody2D_set_freeze_mode(RigidBody2D{self}, freeze_mode)
}
func (self methodsRigidBody2D) GetFreezeMode() RigidBody2DFreezeMode {
	return self.Runtime.RigidBody2D_get_freeze_mode(RigidBody2D{self})
}
func (self methodsRigidBody2D) GetCollidingBodies() ArrayOf[Node2D] {
	return self.Runtime.RigidBody2D_get_colliding_bodies(RigidBody2D{self})
}

type methodsRigidBody3D struct {
	_ [0]*methodsRigidBody3D
	class
}

func (self RigidBody3D) PhysicsBody3D() PhysicsBody3D {
	var parent PhysicsBody3D
	parent.class = self.class
	return parent
}
func (self methodsRigidBody3D) SetMass(mass Float) {
	self.Runtime.RigidBody3D_set_mass(RigidBody3D{self}, mass)
}
func (self methodsRigidBody3D) GetMass() Float {
	return self.Runtime.RigidBody3D_get_mass(RigidBody3D{self})
}
func (self methodsRigidBody3D) SetInertia(inertia Vector3) {
	self.Runtime.RigidBody3D_set_inertia(RigidBody3D{self}, inertia)
}
func (self methodsRigidBody3D) GetInertia() Vector3 {
	return self.Runtime.RigidBody3D_get_inertia(RigidBody3D{self})
}
func (self methodsRigidBody3D) SetCenterOfMassMode(mode RigidBody3DCenterOfMassMode) {
	self.Runtime.RigidBody3D_set_center_of_mass_mode(RigidBody3D{self}, mode)
}
func (self methodsRigidBody3D) GetCenterOfMassMode() RigidBody3DCenterOfMassMode {
	return self.Runtime.RigidBody3D_get_center_of_mass_mode(RigidBody3D{self})
}
func (self methodsRigidBody3D) SetCenterOfMass(center_of_mass Vector3) {
	self.Runtime.RigidBody3D_set_center_of_mass(RigidBody3D{self}, center_of_mass)
}
func (self methodsRigidBody3D) GetCenterOfMass() Vector3 {
	return self.Runtime.RigidBody3D_get_center_of_mass(RigidBody3D{self})
}
func (self methodsRigidBody3D) SetPhysicsMaterialOverride(physics_material_override PhysicsMaterial) {
	self.Runtime.RigidBody3D_set_physics_material_override(RigidBody3D{self}, physics_material_override)
}
func (self methodsRigidBody3D) GetPhysicsMaterialOverride() PhysicsMaterial {
	return self.Runtime.RigidBody3D_get_physics_material_override(RigidBody3D{self})
}
func (self methodsRigidBody3D) SetLinearVelocity(linear_velocity Vector3) {
	self.Runtime.RigidBody3D_set_linear_velocity(RigidBody3D{self}, linear_velocity)
}
func (self methodsRigidBody3D) GetLinearVelocity() Vector3 {
	return self.Runtime.RigidBody3D_get_linear_velocity(RigidBody3D{self})
}
func (self methodsRigidBody3D) SetAngularVelocity(angular_velocity Vector3) {
	self.Runtime.RigidBody3D_set_angular_velocity(RigidBody3D{self}, angular_velocity)
}
func (self methodsRigidBody3D) GetAngularVelocity() Vector3 {
	return self.Runtime.RigidBody3D_get_angular_velocity(RigidBody3D{self})
}
func (self methodsRigidBody3D) GetInverseInertiaTensor() Basis {
	return self.Runtime.RigidBody3D_get_inverse_inertia_tensor(RigidBody3D{self})
}
func (self methodsRigidBody3D) SetGravityScale(gravity_scale Float) {
	self.Runtime.RigidBody3D_set_gravity_scale(RigidBody3D{self}, gravity_scale)
}
func (self methodsRigidBody3D) GetGravityScale() Float {
	return self.Runtime.RigidBody3D_get_gravity_scale(RigidBody3D{self})
}
func (self methodsRigidBody3D) SetLinearDampMode(linear_damp_mode RigidBody3DDampMode) {
	self.Runtime.RigidBody3D_set_linear_damp_mode(RigidBody3D{self}, linear_damp_mode)
}
func (self methodsRigidBody3D) GetLinearDampMode() RigidBody3DDampMode {
	return self.Runtime.RigidBody3D_get_linear_damp_mode(RigidBody3D{self})
}
func (self methodsRigidBody3D) SetAngularDampMode(angular_damp_mode RigidBody3DDampMode) {
	self.Runtime.RigidBody3D_set_angular_damp_mode(RigidBody3D{self}, angular_damp_mode)
}
func (self methodsRigidBody3D) GetAngularDampMode() RigidBody3DDampMode {
	return self.Runtime.RigidBody3D_get_angular_damp_mode(RigidBody3D{self})
}
func (self methodsRigidBody3D) SetLinearDamp(linear_damp Float) {
	self.Runtime.RigidBody3D_set_linear_damp(RigidBody3D{self}, linear_damp)
}
func (self methodsRigidBody3D) GetLinearDamp() Float {
	return self.Runtime.RigidBody3D_get_linear_damp(RigidBody3D{self})
}
func (self methodsRigidBody3D) SetAngularDamp(angular_damp Float) {
	self.Runtime.RigidBody3D_set_angular_damp(RigidBody3D{self}, angular_damp)
}
func (self methodsRigidBody3D) GetAngularDamp() Float {
	return self.Runtime.RigidBody3D_get_angular_damp(RigidBody3D{self})
}
func (self methodsRigidBody3D) SetMaxContactsReported(amount int64) {
	self.Runtime.RigidBody3D_set_max_contacts_reported(RigidBody3D{self}, amount)
}
func (self methodsRigidBody3D) GetMaxContactsReported() int64 {
	return self.Runtime.RigidBody3D_get_max_contacts_reported(RigidBody3D{self})
}
func (self methodsRigidBody3D) GetContactCount() int64 {
	return self.Runtime.RigidBody3D_get_contact_count(RigidBody3D{self})
}
func (self methodsRigidBody3D) SetUseCustomIntegrator(enable bool) {
	self.Runtime.RigidBody3D_set_use_custom_integrator(RigidBody3D{self}, enable)
}
func (self methodsRigidBody3D) IsUsingCustomIntegrator() bool {
	return self.Runtime.RigidBody3D_is_using_custom_integrator(RigidBody3D{self})
}
func (self methodsRigidBody3D) SetContactMonitor(enabled bool) {
	self.Runtime.RigidBody3D_set_contact_monitor(RigidBody3D{self}, enabled)
}
func (self methodsRigidBody3D) IsContactMonitorEnabled() bool {
	return self.Runtime.RigidBody3D_is_contact_monitor_enabled(RigidBody3D{self})
}
func (self methodsRigidBody3D) SetUseContinuousCollisionDetection(enable bool) {
	self.Runtime.RigidBody3D_set_use_continuous_collision_detection(RigidBody3D{self}, enable)
}
func (self methodsRigidBody3D) IsUsingContinuousCollisionDetection() bool {
	return self.Runtime.RigidBody3D_is_using_continuous_collision_detection(RigidBody3D{self})
}
func (self methodsRigidBody3D) SetAxisVelocity(axis_velocity Vector3) {
	self.Runtime.RigidBody3D_set_axis_velocity(RigidBody3D{self}, axis_velocity)
}
func (self methodsRigidBody3D) ApplyCentralImpulse(impulse Vector3) {
	self.Runtime.RigidBody3D_apply_central_impulse(RigidBody3D{self}, impulse)
}
func (self methodsRigidBody3D) ApplyImpulse(impulse Vector3, position Vector3) {
	self.Runtime.RigidBody3D_apply_impulse(RigidBody3D{self}, impulse, position)
}
func (self methodsRigidBody3D) ApplyTorqueImpulse(impulse Vector3) {
	self.Runtime.RigidBody3D_apply_torque_impulse(RigidBody3D{self}, impulse)
}
func (self methodsRigidBody3D) ApplyCentralForce(force Vector3) {
	self.Runtime.RigidBody3D_apply_central_force(RigidBody3D{self}, force)
}
func (self methodsRigidBody3D) ApplyForce(force Vector3, position Vector3) {
	self.Runtime.RigidBody3D_apply_force(RigidBody3D{self}, force, position)
}
func (self methodsRigidBody3D) ApplyTorque(torque Vector3) {
	self.Runtime.RigidBody3D_apply_torque(RigidBody3D{self}, torque)
}
func (self methodsRigidBody3D) AddConstantCentralForce(force Vector3) {
	self.Runtime.RigidBody3D_add_constant_central_force(RigidBody3D{self}, force)
}
func (self methodsRigidBody3D) AddConstantForce(force Vector3, position Vector3) {
	self.Runtime.RigidBody3D_add_constant_force(RigidBody3D{self}, force, position)
}
func (self methodsRigidBody3D) AddConstantTorque(torque Vector3) {
	self.Runtime.RigidBody3D_add_constant_torque(RigidBody3D{self}, torque)
}
func (self methodsRigidBody3D) SetConstantForce(force Vector3) {
	self.Runtime.RigidBody3D_set_constant_force(RigidBody3D{self}, force)
}
func (self methodsRigidBody3D) GetConstantForce() Vector3 {
	return self.Runtime.RigidBody3D_get_constant_force(RigidBody3D{self})
}
func (self methodsRigidBody3D) SetConstantTorque(torque Vector3) {
	self.Runtime.RigidBody3D_set_constant_torque(RigidBody3D{self}, torque)
}
func (self methodsRigidBody3D) GetConstantTorque() Vector3 {
	return self.Runtime.RigidBody3D_get_constant_torque(RigidBody3D{self})
}
func (self methodsRigidBody3D) SetSleeping(sleeping bool) {
	self.Runtime.RigidBody3D_set_sleeping(RigidBody3D{self}, sleeping)
}
func (self methodsRigidBody3D) IsSleeping() bool {
	return self.Runtime.RigidBody3D_is_sleeping(RigidBody3D{self})
}
func (self methodsRigidBody3D) SetCanSleep(able_to_sleep bool) {
	self.Runtime.RigidBody3D_set_can_sleep(RigidBody3D{self}, able_to_sleep)
}
func (self methodsRigidBody3D) IsAbleToSleep() bool {
	return self.Runtime.RigidBody3D_is_able_to_sleep(RigidBody3D{self})
}
func (self methodsRigidBody3D) SetLockRotationEnabled(lock_rotation bool) {
	self.Runtime.RigidBody3D_set_lock_rotation_enabled(RigidBody3D{self}, lock_rotation)
}
func (self methodsRigidBody3D) IsLockRotationEnabled() bool {
	return self.Runtime.RigidBody3D_is_lock_rotation_enabled(RigidBody3D{self})
}
func (self methodsRigidBody3D) SetFreezeEnabled(freeze_mode bool) {
	self.Runtime.RigidBody3D_set_freeze_enabled(RigidBody3D{self}, freeze_mode)
}
func (self methodsRigidBody3D) IsFreezeEnabled() bool {
	return self.Runtime.RigidBody3D_is_freeze_enabled(RigidBody3D{self})
}
func (self methodsRigidBody3D) SetFreezeMode(freeze_mode RigidBody3DFreezeMode) {
	self.Runtime.RigidBody3D_set_freeze_mode(RigidBody3D{self}, freeze_mode)
}
func (self methodsRigidBody3D) GetFreezeMode() RigidBody3DFreezeMode {
	return self.Runtime.RigidBody3D_get_freeze_mode(RigidBody3D{self})
}
func (self methodsRigidBody3D) GetCollidingBodies() ArrayOf[Node3D] {
	return self.Runtime.RigidBody3D_get_colliding_bodies(RigidBody3D{self})
}

type methodsRootMotionView struct {
	_ [0]*methodsRootMotionView
	class
}

func (self RootMotionView) VisualInstance3D() VisualInstance3D {
	var parent VisualInstance3D
	parent.class = self.class
	return parent
}
func (self methodsRootMotionView) SetAnimationPath(path NodePath) {
	self.Runtime.RootMotionView_set_animation_path(RootMotionView{self}, path)
}
func (self methodsRootMotionView) GetAnimationPath() NodePath {
	return self.Runtime.RootMotionView_get_animation_path(RootMotionView{self})
}
func (self methodsRootMotionView) SetColor(color Color) {
	self.Runtime.RootMotionView_set_color(RootMotionView{self}, color)
}
func (self methodsRootMotionView) GetColor() Color {
	return self.Runtime.RootMotionView_get_color(RootMotionView{self})
}
func (self methodsRootMotionView) SetCellSize(size Float) {
	self.Runtime.RootMotionView_set_cell_size(RootMotionView{self}, size)
}
func (self methodsRootMotionView) GetCellSize() Float {
	return self.Runtime.RootMotionView_get_cell_size(RootMotionView{self})
}
func (self methodsRootMotionView) SetRadius(size Float) {
	self.Runtime.RootMotionView_set_radius(RootMotionView{self}, size)
}
func (self methodsRootMotionView) GetRadius() Float {
	return self.Runtime.RootMotionView_get_radius(RootMotionView{self})
}
func (self methodsRootMotionView) SetZeroY(enable bool) {
	self.Runtime.RootMotionView_set_zero_y(RootMotionView{self}, enable)
}
func (self methodsRootMotionView) GetZeroY() bool {
	return self.Runtime.RootMotionView_get_zero_y(RootMotionView{self})
}

type methodsSceneMultiplayer struct {
	_ [0]*methodsSceneMultiplayer
	class
}

func (self SceneMultiplayer) MultiplayerAPI() MultiplayerAPI {
	var parent MultiplayerAPI
	parent.class = self.class
	return parent
}
func (self methodsSceneMultiplayer) SetRootPath(path NodePath) {
	self.Runtime.SceneMultiplayer_set_root_path(SceneMultiplayer{self}, path)
}
func (self methodsSceneMultiplayer) GetRootPath() NodePath {
	return self.Runtime.SceneMultiplayer_get_root_path(SceneMultiplayer{self})
}
func (self methodsSceneMultiplayer) Clear() {
	self.Runtime.SceneMultiplayer_clear(SceneMultiplayer{self})
}
func (self methodsSceneMultiplayer) DisconnectPeer(id int64) {
	self.Runtime.SceneMultiplayer_disconnect_peer(SceneMultiplayer{self}, id)
}
func (self methodsSceneMultiplayer) GetAuthenticatingPeers() PackedInt32Array {
	return self.Runtime.SceneMultiplayer_get_authenticating_peers(SceneMultiplayer{self})
}
func (self methodsSceneMultiplayer) SendAuth(id int64, data PackedByteArray) int64 {
	return self.Runtime.SceneMultiplayer_send_auth(SceneMultiplayer{self}, id, data)
}
func (self methodsSceneMultiplayer) CompleteAuth(id int64) int64 {
	return self.Runtime.SceneMultiplayer_complete_auth(SceneMultiplayer{self}, id)
}
func (self methodsSceneMultiplayer) SetAuthCallback(callback Callable) {
	self.Runtime.SceneMultiplayer_set_auth_callback(SceneMultiplayer{self}, callback)
}
func (self methodsSceneMultiplayer) GetAuthCallback() Callable {
	return self.Runtime.SceneMultiplayer_get_auth_callback(SceneMultiplayer{self})
}
func (self methodsSceneMultiplayer) SetAuthTimeout(timeout Float) {
	self.Runtime.SceneMultiplayer_set_auth_timeout(SceneMultiplayer{self}, timeout)
}
func (self methodsSceneMultiplayer) GetAuthTimeout() Float {
	return self.Runtime.SceneMultiplayer_get_auth_timeout(SceneMultiplayer{self})
}
func (self methodsSceneMultiplayer) SetRefuseNewConnections(refuse bool) {
	self.Runtime.SceneMultiplayer_set_refuse_new_connections(SceneMultiplayer{self}, refuse)
}
func (self methodsSceneMultiplayer) IsRefusingNewConnections() bool {
	return self.Runtime.SceneMultiplayer_is_refusing_new_connections(SceneMultiplayer{self})
}
func (self methodsSceneMultiplayer) SetAllowObjectDecoding(enable bool) {
	self.Runtime.SceneMultiplayer_set_allow_object_decoding(SceneMultiplayer{self}, enable)
}
func (self methodsSceneMultiplayer) IsObjectDecodingAllowed() bool {
	return self.Runtime.SceneMultiplayer_is_object_decoding_allowed(SceneMultiplayer{self})
}
func (self methodsSceneMultiplayer) SetServerRelayEnabled(enabled bool) {
	self.Runtime.SceneMultiplayer_set_server_relay_enabled(SceneMultiplayer{self}, enabled)
}
func (self methodsSceneMultiplayer) IsServerRelayEnabled() bool {
	return self.Runtime.SceneMultiplayer_is_server_relay_enabled(SceneMultiplayer{self})
}
func (self methodsSceneMultiplayer) SendBytes(bytes PackedByteArray, id int64, mode MultiplayerPeerTransferMode, channel int64) int64 {
	return self.Runtime.SceneMultiplayer_send_bytes(SceneMultiplayer{self}, bytes, id, mode, channel)
}
func (self methodsSceneMultiplayer) GetMaxSyncPacketSize() int64 {
	return self.Runtime.SceneMultiplayer_get_max_sync_packet_size(SceneMultiplayer{self})
}
func (self methodsSceneMultiplayer) SetMaxSyncPacketSize(size int64) {
	self.Runtime.SceneMultiplayer_set_max_sync_packet_size(SceneMultiplayer{self}, size)
}
func (self methodsSceneMultiplayer) GetMaxDeltaPacketSize() int64 {
	return self.Runtime.SceneMultiplayer_get_max_delta_packet_size(SceneMultiplayer{self})
}
func (self methodsSceneMultiplayer) SetMaxDeltaPacketSize(size int64) {
	self.Runtime.SceneMultiplayer_set_max_delta_packet_size(SceneMultiplayer{self}, size)
}

type methodsSceneReplicationConfig struct {
	_ [0]*methodsSceneReplicationConfig
	class
}

func (self SceneReplicationConfig) Resource() Resource {
	var parent Resource
	parent.class = self.class
	return parent
}
func (self methodsSceneReplicationConfig) GetProperties() ArrayOf[NodePath] {
	return self.Runtime.SceneReplicationConfig_get_properties(SceneReplicationConfig{self})
}
func (self methodsSceneReplicationConfig) AddProperty(path NodePath, index int64) {
	self.Runtime.SceneReplicationConfig_add_property(SceneReplicationConfig{self}, path, index)
}
func (self methodsSceneReplicationConfig) HasProperty(path NodePath) bool {
	return self.Runtime.SceneReplicationConfig_has_property(SceneReplicationConfig{self}, path)
}
func (self methodsSceneReplicationConfig) RemoveProperty(path NodePath) {
	self.Runtime.SceneReplicationConfig_remove_property(SceneReplicationConfig{self}, path)
}
func (self methodsSceneReplicationConfig) PropertyGetIndex(path NodePath) int64 {
	return self.Runtime.SceneReplicationConfig_property_get_index(SceneReplicationConfig{self}, path)
}
func (self methodsSceneReplicationConfig) PropertyGetSpawn(path NodePath) bool {
	return self.Runtime.SceneReplicationConfig_property_get_spawn(SceneReplicationConfig{self}, path)
}
func (self methodsSceneReplicationConfig) PropertySetSpawn(path NodePath, enabled bool) {
	self.Runtime.SceneReplicationConfig_property_set_spawn(SceneReplicationConfig{self}, path, enabled)
}
func (self methodsSceneReplicationConfig) PropertyGetReplicationMode(path NodePath) SceneReplicationConfigReplicationMode {
	return self.Runtime.SceneReplicationConfig_property_get_replication_mode(SceneReplicationConfig{self}, path)
}
func (self methodsSceneReplicationConfig) PropertySetReplicationMode(path NodePath, mode SceneReplicationConfigReplicationMode) {
	self.Runtime.SceneReplicationConfig_property_set_replication_mode(SceneReplicationConfig{self}, path, mode)
}
func (self methodsSceneReplicationConfig) PropertyGetSync(path NodePath) bool {
	return self.Runtime.SceneReplicationConfig_property_get_sync(SceneReplicationConfig{self}, path)
}
func (self methodsSceneReplicationConfig) PropertySetSync(path NodePath, enabled bool) {
	self.Runtime.SceneReplicationConfig_property_set_sync(SceneReplicationConfig{self}, path, enabled)
}
func (self methodsSceneReplicationConfig) PropertyGetWatch(path NodePath) bool {
	return self.Runtime.SceneReplicationConfig_property_get_watch(SceneReplicationConfig{self}, path)
}
func (self methodsSceneReplicationConfig) PropertySetWatch(path NodePath, enabled bool) {
	self.Runtime.SceneReplicationConfig_property_set_watch(SceneReplicationConfig{self}, path, enabled)
}

type methodsSceneState struct {
	_ [0]*methodsSceneState
	class
}

func (self SceneState) RefCounted() RefCounted {
	var parent RefCounted
	parent.class = self.class
	return parent
}
func (self methodsSceneState) GetNodeCount() int64 {
	return self.Runtime.SceneState_get_node_count(SceneState{self})
}
func (self methodsSceneState) GetNodeType(idx int64) string {
	return self.Runtime.SceneState_get_node_type(SceneState{self}, idx)
}
func (self methodsSceneState) GetNodeName(idx int64) string {
	return self.Runtime.SceneState_get_node_name(SceneState{self}, idx)
}
func (self methodsSceneState) GetNodePath(idx int64, for_parent bool) NodePath {
	return self.Runtime.SceneState_get_node_path(SceneState{self}, idx, for_parent)
}
func (self methodsSceneState) GetNodeOwnerPath(idx int64) NodePath {
	return self.Runtime.SceneState_get_node_owner_path(SceneState{self}, idx)
}
func (self methodsSceneState) IsNodeInstancePlaceholder(idx int64) bool {
	return self.Runtime.SceneState_is_node_instance_placeholder(SceneState{self}, idx)
}
func (self methodsSceneState) GetNodeInstancePlaceholder(idx int64) string {
	return self.Runtime.SceneState_get_node_instance_placeholder(SceneState{self}, idx)
}
func (self methodsSceneState) GetNodeInstance(idx int64) PackedScene {
	return self.Runtime.SceneState_get_node_instance(SceneState{self}, idx)
}
func (self methodsSceneState) GetNodeGroups(idx int64) PackedStringArray {
	return self.Runtime.SceneState_get_node_groups(SceneState{self}, idx)
}
func (self methodsSceneState) GetNodeIndex(idx int64) int64 {
	return self.Runtime.SceneState_get_node_index(SceneState{self}, idx)
}
func (self methodsSceneState) GetNodePropertyCount(idx int64) int64 {
	return self.Runtime.SceneState_get_node_property_count(SceneState{self}, idx)
}
func (self methodsSceneState) GetNodePropertyName(idx int64, prop_idx int64) string {
	return self.Runtime.SceneState_get_node_property_name(SceneState{self}, idx, prop_idx)
}
func (self methodsSceneState) GetNodePropertyValue(idx int64, prop_idx int64) any {
	return self.Runtime.SceneState_get_node_property_value(SceneState{self}, idx, prop_idx)
}
func (self methodsSceneState) GetConnectionCount() int64 {
	return self.Runtime.SceneState_get_connection_count(SceneState{self})
}
func (self methodsSceneState) GetConnectionSource(idx int64) NodePath {
	return self.Runtime.SceneState_get_connection_source(SceneState{self}, idx)
}
func (self methodsSceneState) GetConnectionSignal(idx int64) string {
	return self.Runtime.SceneState_get_connection_signal(SceneState{self}, idx)
}
func (self methodsSceneState) GetConnectionTarget(idx int64) NodePath {
	return self.Runtime.SceneState_get_connection_target(SceneState{self}, idx)
}
func (self methodsSceneState) GetConnectionMethod(idx int64) string {
	return self.Runtime.SceneState_get_connection_method(SceneState{self}, idx)
}
func (self methodsSceneState) GetConnectionFlags(idx int64) int64 {
	return self.Runtime.SceneState_get_connection_flags(SceneState{self}, idx)
}
func (self methodsSceneState) GetConnectionBinds(idx int64) Array {
	return self.Runtime.SceneState_get_connection_binds(SceneState{self}, idx)
}
func (self methodsSceneState) GetConnectionUnbinds(idx int64) int64 {
	return self.Runtime.SceneState_get_connection_unbinds(SceneState{self}, idx)
}

type methodsSceneTree struct {
	_ [0]*methodsSceneTree
	class
}

func (self SceneTree) MainLoop() MainLoop {
	var parent MainLoop
	parent.class = self.class
	return parent
}
func (self methodsSceneTree) GetRoot() Window {
	return self.Runtime.SceneTree_get_root(SceneTree{self})
}
func (self methodsSceneTree) HasGroup(name string) bool {
	return self.Runtime.SceneTree_has_group(SceneTree{self}, name)
}
func (self methodsSceneTree) IsAutoAcceptQuit() bool {
	return self.Runtime.SceneTree_is_auto_accept_quit(SceneTree{self})
}
func (self methodsSceneTree) SetAutoAcceptQuit(enabled bool) {
	self.Runtime.SceneTree_set_auto_accept_quit(SceneTree{self}, enabled)
}
func (self methodsSceneTree) IsQuitOnGoBack() bool {
	return self.Runtime.SceneTree_is_quit_on_go_back(SceneTree{self})
}
func (self methodsSceneTree) SetQuitOnGoBack(enabled bool) {
	self.Runtime.SceneTree_set_quit_on_go_back(SceneTree{self}, enabled)
}
func (self methodsSceneTree) SetDebugCollisionsHint(enable bool) {
	self.Runtime.SceneTree_set_debug_collisions_hint(SceneTree{self}, enable)
}
func (self methodsSceneTree) IsDebuggingCollisionsHint() bool {
	return self.Runtime.SceneTree_is_debugging_collisions_hint(SceneTree{self})
}
func (self methodsSceneTree) SetDebugPathsHint(enable bool) {
	self.Runtime.SceneTree_set_debug_paths_hint(SceneTree{self}, enable)
}
func (self methodsSceneTree) IsDebuggingPathsHint() bool {
	return self.Runtime.SceneTree_is_debugging_paths_hint(SceneTree{self})
}
func (self methodsSceneTree) SetDebugNavigationHint(enable bool) {
	self.Runtime.SceneTree_set_debug_navigation_hint(SceneTree{self}, enable)
}
func (self methodsSceneTree) IsDebuggingNavigationHint() bool {
	return self.Runtime.SceneTree_is_debugging_navigation_hint(SceneTree{self})
}
func (self methodsSceneTree) SetEditedSceneRoot(scene Node) {
	self.Runtime.SceneTree_set_edited_scene_root(SceneTree{self}, scene)
}
func (self methodsSceneTree) GetEditedSceneRoot() Node {
	return self.Runtime.SceneTree_get_edited_scene_root(SceneTree{self})
}
func (self methodsSceneTree) SetPause(enable bool) {
	self.Runtime.SceneTree_set_pause(SceneTree{self}, enable)
}
func (self methodsSceneTree) IsPaused() bool {
	return self.Runtime.SceneTree_is_paused(SceneTree{self})
}
func (self methodsSceneTree) CreateTimer(time_sec Float, process_always bool, process_in_physics bool, ignore_time_scale bool) SceneTreeTimer {
	return self.Runtime.SceneTree_create_timer(SceneTree{self}, time_sec, process_always, process_in_physics, ignore_time_scale)
}
func (self methodsSceneTree) CreateTween() Tween {
	return self.Runtime.SceneTree_create_tween(SceneTree{self})
}
func (self methodsSceneTree) GetProcessedTweens() ArrayOf[Tween] {
	return self.Runtime.SceneTree_get_processed_tweens(SceneTree{self})
}
func (self methodsSceneTree) GetNodeCount() int64 {
	return self.Runtime.SceneTree_get_node_count(SceneTree{self})
}
func (self methodsSceneTree) GetFrame() int64 {
	return self.Runtime.SceneTree_get_frame(SceneTree{self})
}
func (self methodsSceneTree) Quit(exit_code int64) {
	self.Runtime.SceneTree_quit(SceneTree{self}, exit_code)
}
func (self methodsSceneTree) QueueDelete(obj Object) {
	self.Runtime.SceneTree_queue_delete(SceneTree{self}, obj)
}
func (self methodsSceneTree) CallGroupFlags(flags int64, group string, method string) {
	self.Runtime.SceneTree_call_group_flags(SceneTree{self}, flags, group, method)
}
func (self methodsSceneTree) NotifyGroupFlags(call_flags int64, group string, notification int64) {
	self.Runtime.SceneTree_notify_group_flags(SceneTree{self}, call_flags, group, notification)
}
func (self methodsSceneTree) SetGroupFlags(call_flags int64, group string, property string, value any) {
	self.Runtime.SceneTree_set_group_flags(SceneTree{self}, call_flags, group, property, value)
}
func (self methodsSceneTree) CallGroup(group string, method string) {
	self.Runtime.SceneTree_call_group(SceneTree{self}, group, method)
}
func (self methodsSceneTree) NotifyGroup(group string, notification int64) {
	self.Runtime.SceneTree_notify_group(SceneTree{self}, group, notification)
}
func (self methodsSceneTree) SetGroup(group string, property string, value any) {
	self.Runtime.SceneTree_set_group(SceneTree{self}, group, property, value)
}
func (self methodsSceneTree) GetNodesInGroup(group string) ArrayOf[Node] {
	return self.Runtime.SceneTree_get_nodes_in_group(SceneTree{self}, group)
}
func (self methodsSceneTree) GetFirstNodeInGroup(group string) Node {
	return self.Runtime.SceneTree_get_first_node_in_group(SceneTree{self}, group)
}
func (self methodsSceneTree) GetNodeCountInGroup(group string) int64 {
	return self.Runtime.SceneTree_get_node_count_in_group(SceneTree{self}, group)
}
func (self methodsSceneTree) SetCurrentScene(child_node Node) {
	self.Runtime.SceneTree_set_current_scene(SceneTree{self}, child_node)
}
func (self methodsSceneTree) GetCurrentScene() Node {
	return self.Runtime.SceneTree_get_current_scene(SceneTree{self})
}
func (self methodsSceneTree) ChangeSceneToFile(path string) int64 {
	return self.Runtime.SceneTree_change_scene_to_file(SceneTree{self}, path)
}
func (self methodsSceneTree) ChangeSceneToPacked(packed_scene PackedScene) int64 {
	return self.Runtime.SceneTree_change_scene_to_packed(SceneTree{self}, packed_scene)
}
func (self methodsSceneTree) ReloadCurrentScene() int64 {
	return self.Runtime.SceneTree_reload_current_scene(SceneTree{self})
}
func (self methodsSceneTree) UnloadCurrentScene() {
	self.Runtime.SceneTree_unload_current_scene(SceneTree{self})
}
func (self methodsSceneTree) SetMultiplayer(multiplayer MultiplayerAPI, root_path NodePath) {
	self.Runtime.SceneTree_set_multiplayer(SceneTree{self}, multiplayer, root_path)
}
func (self methodsSceneTree) GetMultiplayer(for_path NodePath) MultiplayerAPI {
	return self.Runtime.SceneTree_get_multiplayer(SceneTree{self}, for_path)
}
func (self methodsSceneTree) SetMultiplayerPollEnabled(enabled bool) {
	self.Runtime.SceneTree_set_multiplayer_poll_enabled(SceneTree{self}, enabled)
}
func (self methodsSceneTree) IsMultiplayerPollEnabled() bool {
	return self.Runtime.SceneTree_is_multiplayer_poll_enabled(SceneTree{self})
}

type methodsSceneTreeTimer struct {
	_ [0]*methodsSceneTreeTimer
	class
}

func (self SceneTreeTimer) RefCounted() RefCounted {
	var parent RefCounted
	parent.class = self.class
	return parent
}
func (self methodsSceneTreeTimer) SetTimeLeft(time Float) {
	self.Runtime.SceneTreeTimer_set_time_left(SceneTreeTimer{self}, time)
}
func (self methodsSceneTreeTimer) GetTimeLeft() Float {
	return self.Runtime.SceneTreeTimer_get_time_left(SceneTreeTimer{self})
}

type methodsScript struct {
	_ [0]*methodsScript
	class
}

func (self Script) Resource() Resource { var parent Resource; parent.class = self.class; return parent }
func (self methodsScript) CanInstantiate() bool {
	return self.Runtime.Script_can_instantiate(Script{self})
}
func (self methodsScript) InstanceHas(base_object Object) bool {
	return self.Runtime.Script_instance_has(Script{self}, base_object)
}
func (self methodsScript) HasSourceCode() bool {
	return self.Runtime.Script_has_source_code(Script{self})
}
func (self methodsScript) GetSourceCode() string {
	return self.Runtime.Script_get_source_code(Script{self})
}
func (self methodsScript) SetSourceCode(source string) {
	self.Runtime.Script_set_source_code(Script{self}, source)
}
func (self methodsScript) Reload(keep_state bool) int64 {
	return self.Runtime.Script_reload(Script{self}, keep_state)
}
func (self methodsScript) GetBaseScript() Script {
	return self.Runtime.Script_get_base_script(Script{self})
}
func (self methodsScript) GetInstanceBaseType() string {
	return self.Runtime.Script_get_instance_base_type(Script{self})
}
func (self methodsScript) GetGlobalName() string {
	return self.Runtime.Script_get_global_name(Script{self})
}
func (self methodsScript) HasScriptSignal(signal_name string) bool {
	return self.Runtime.Script_has_script_signal(Script{self}, signal_name)
}
func (self methodsScript) GetScriptPropertyList() ArrayOf[Dictionary] {
	return self.Runtime.Script_get_script_property_list(Script{self})
}
func (self methodsScript) GetScriptMethodList() ArrayOf[Dictionary] {
	return self.Runtime.Script_get_script_method_list(Script{self})
}
func (self methodsScript) GetScriptSignalList() ArrayOf[Dictionary] {
	return self.Runtime.Script_get_script_signal_list(Script{self})
}
func (self methodsScript) GetScriptConstantMap() Dictionary {
	return self.Runtime.Script_get_script_constant_map(Script{self})
}
func (self methodsScript) GetPropertyDefaultValue(property string) any {
	return self.Runtime.Script_get_property_default_value(Script{self}, property)
}
func (self methodsScript) IsTool() bool {
	return self.Runtime.Script_is_tool(Script{self})
}
func (self methodsScript) IsAbstract() bool {
	return self.Runtime.Script_is_abstract(Script{self})
}

type methodsScriptCreateDialog struct {
	_ [0]*methodsScriptCreateDialog
	class
}

func (self ScriptCreateDialog) ConfirmationDialog() ConfirmationDialog {
	var parent ConfirmationDialog
	parent.class = self.class
	return parent
}
func (self methodsScriptCreateDialog) Config(inherits string, path string, built_in_enabled bool, load_enabled bool) {
	self.Runtime.ScriptCreateDialog_config(ScriptCreateDialog{self}, inherits, path, built_in_enabled, load_enabled)
}

type methodsScriptEditor struct {
	_ [0]*methodsScriptEditor
	class
}

func (self ScriptEditor) PanelContainer() PanelContainer {
	var parent PanelContainer
	parent.class = self.class
	return parent
}
func (self methodsScriptEditor) GetCurrentEditor() ScriptEditorBase {
	return self.Runtime.ScriptEditor_get_current_editor(ScriptEditor{self})
}
func (self methodsScriptEditor) GetOpenScriptEditors() ArrayOf[ScriptEditorBase] {
	return self.Runtime.ScriptEditor_get_open_script_editors(ScriptEditor{self})
}
func (self methodsScriptEditor) RegisterSyntaxHighlighter(syntax_highlighter EditorSyntaxHighlighter) {
	self.Runtime.ScriptEditor_register_syntax_highlighter(ScriptEditor{self}, syntax_highlighter)
}
func (self methodsScriptEditor) UnregisterSyntaxHighlighter(syntax_highlighter EditorSyntaxHighlighter) {
	self.Runtime.ScriptEditor_unregister_syntax_highlighter(ScriptEditor{self}, syntax_highlighter)
}
func (self methodsScriptEditor) GotoLine(line_number int64) {
	self.Runtime.ScriptEditor_goto_line(ScriptEditor{self}, line_number)
}
func (self methodsScriptEditor) GetCurrentScript() Script {
	return self.Runtime.ScriptEditor_get_current_script(ScriptEditor{self})
}
func (self methodsScriptEditor) GetOpenScripts() ArrayOf[Script] {
	return self.Runtime.ScriptEditor_get_open_scripts(ScriptEditor{self})
}
func (self methodsScriptEditor) OpenScriptCreateDialog(base_name string, base_path string) {
	self.Runtime.ScriptEditor_open_script_create_dialog(ScriptEditor{self}, base_name, base_path)
}

type methodsScriptEditorBase struct {
	_ [0]*methodsScriptEditorBase
	class
}

func (self ScriptEditorBase) VBoxContainer() VBoxContainer {
	var parent VBoxContainer
	parent.class = self.class
	return parent
}
func (self methodsScriptEditorBase) GetBaseEditor() Control {
	return self.Runtime.ScriptEditorBase_get_base_editor(ScriptEditorBase{self})
}
func (self methodsScriptEditorBase) AddSyntaxHighlighter(highlighter EditorSyntaxHighlighter) {
	self.Runtime.ScriptEditorBase_add_syntax_highlighter(ScriptEditorBase{self}, highlighter)
}

type methodsScriptExtension struct {
	_ [0]*methodsScriptExtension
	class
}

func (self ScriptExtension) Script() Script {
	var parent Script
	parent.class = self.class
	return parent
}

type methodsScriptLanguage struct {
	_ [0]*methodsScriptLanguage
	class
}

func (self ScriptLanguage) Object() Object {
	var parent Object
	parent.class = self.class
	return parent
}

type methodsScriptLanguageExtension struct {
	_ [0]*methodsScriptLanguageExtension
	class
}

func (self ScriptLanguageExtension) ScriptLanguage() ScriptLanguage {
	var parent ScriptLanguage
	parent.class = self.class
	return parent
}

type methodsScrollBar struct {
	_ [0]*methodsScrollBar
	class
}

func (self ScrollBar) Range() Range { var parent Range; parent.class = self.class; return parent }
func (self methodsScrollBar) SetCustomStep(step Float) {
	self.Runtime.ScrollBar_set_custom_step(ScrollBar{self}, step)
}
func (self methodsScrollBar) GetCustomStep() Float {
	return self.Runtime.ScrollBar_get_custom_step(ScrollBar{self})
}

type methodsScrollContainer struct {
	_ [0]*methodsScrollContainer
	class
}

func (self ScrollContainer) Container() Container {
	var parent Container
	parent.class = self.class
	return parent
}
func (self methodsScrollContainer) SetHScroll(value int64) {
	self.Runtime.ScrollContainer_set_h_scroll(ScrollContainer{self}, value)
}
func (self methodsScrollContainer) GetHScroll() int64 {
	return self.Runtime.ScrollContainer_get_h_scroll(ScrollContainer{self})
}
func (self methodsScrollContainer) SetVScroll(value int64) {
	self.Runtime.ScrollContainer_set_v_scroll(ScrollContainer{self}, value)
}
func (self methodsScrollContainer) GetVScroll() int64 {
	return self.Runtime.ScrollContainer_get_v_scroll(ScrollContainer{self})
}
func (self methodsScrollContainer) SetHorizontalCustomStep(value Float) {
	self.Runtime.ScrollContainer_set_horizontal_custom_step(ScrollContainer{self}, value)
}
func (self methodsScrollContainer) GetHorizontalCustomStep() Float {
	return self.Runtime.ScrollContainer_get_horizontal_custom_step(ScrollContainer{self})
}
func (self methodsScrollContainer) SetVerticalCustomStep(value Float) {
	self.Runtime.ScrollContainer_set_vertical_custom_step(ScrollContainer{self}, value)
}
func (self methodsScrollContainer) GetVerticalCustomStep() Float {
	return self.Runtime.ScrollContainer_get_vertical_custom_step(ScrollContainer{self})
}
func (self methodsScrollContainer) SetHorizontalScrollMode(enable ScrollContainerScrollMode) {
	self.Runtime.ScrollContainer_set_horizontal_scroll_mode(ScrollContainer{self}, enable)
}
func (self methodsScrollContainer) GetHorizontalScrollMode() ScrollContainerScrollMode {
	return self.Runtime.ScrollContainer_get_horizontal_scroll_mode(ScrollContainer{self})
}
func (self methodsScrollContainer) SetVerticalScrollMode(enable ScrollContainerScrollMode) {
	self.Runtime.ScrollContainer_set_vertical_scroll_mode(ScrollContainer{self}, enable)
}
func (self methodsScrollContainer) GetVerticalScrollMode() ScrollContainerScrollMode {
	return self.Runtime.ScrollContainer_get_vertical_scroll_mode(ScrollContainer{self})
}
func (self methodsScrollContainer) SetDeadzone(deadzone int64) {
	self.Runtime.ScrollContainer_set_deadzone(ScrollContainer{self}, deadzone)
}
func (self methodsScrollContainer) GetDeadzone() int64 {
	return self.Runtime.ScrollContainer_get_deadzone(ScrollContainer{self})
}
func (self methodsScrollContainer) SetFollowFocus(enabled bool) {
	self.Runtime.ScrollContainer_set_follow_focus(ScrollContainer{self}, enabled)
}
func (self methodsScrollContainer) IsFollowingFocus() bool {
	return self.Runtime.ScrollContainer_is_following_focus(ScrollContainer{self})
}
func (self methodsScrollContainer) GetHScrollBar() HScrollBar {
	return self.Runtime.ScrollContainer_get_h_scroll_bar(ScrollContainer{self})
}
func (self methodsScrollContainer) GetVScrollBar() VScrollBar {
	return self.Runtime.ScrollContainer_get_v_scroll_bar(ScrollContainer{self})
}
func (self methodsScrollContainer) EnsureControlVisible(control Control) {
	self.Runtime.ScrollContainer_ensure_control_visible(ScrollContainer{self}, control)
}

type methodsSegmentShape2D struct {
	_ [0]*methodsSegmentShape2D
	class
}

func (self SegmentShape2D) Shape2D() Shape2D {
	var parent Shape2D
	parent.class = self.class
	return parent
}
func (self methodsSegmentShape2D) SetA(a Vector2) {
	self.Runtime.SegmentShape2D_set_a(SegmentShape2D{self}, a)
}
func (self methodsSegmentShape2D) GetA() Vector2 {
	return self.Runtime.SegmentShape2D_get_a(SegmentShape2D{self})
}
func (self methodsSegmentShape2D) SetB(b Vector2) {
	self.Runtime.SegmentShape2D_set_b(SegmentShape2D{self}, b)
}
func (self methodsSegmentShape2D) GetB() Vector2 {
	return self.Runtime.SegmentShape2D_get_b(SegmentShape2D{self})
}

type methodsSemaphore struct {
	_ [0]*methodsSemaphore
	class
}

func (self Semaphore) RefCounted() RefCounted {
	var parent RefCounted
	parent.class = self.class
	return parent
}
func (self methodsSemaphore) Wait() {
	self.Runtime.Semaphore_wait(Semaphore{self})
}
func (self methodsSemaphore) TryWait() bool {
	return self.Runtime.Semaphore_try_wait(Semaphore{self})
}
func (self methodsSemaphore) Post() {
	self.Runtime.Semaphore_post(Semaphore{self})
}

type methodsSeparationRayShape2D struct {
	_ [0]*methodsSeparationRayShape2D
	class
}

func (self SeparationRayShape2D) Shape2D() Shape2D {
	var parent Shape2D
	parent.class = self.class
	return parent
}
func (self methodsSeparationRayShape2D) SetLength(length Float) {
	self.Runtime.SeparationRayShape2D_set_length(SeparationRayShape2D{self}, length)
}
func (self methodsSeparationRayShape2D) GetLength() Float {
	return self.Runtime.SeparationRayShape2D_get_length(SeparationRayShape2D{self})
}
func (self methodsSeparationRayShape2D) SetSlideOnSlope(active bool) {
	self.Runtime.SeparationRayShape2D_set_slide_on_slope(SeparationRayShape2D{self}, active)
}
func (self methodsSeparationRayShape2D) GetSlideOnSlope() bool {
	return self.Runtime.SeparationRayShape2D_get_slide_on_slope(SeparationRayShape2D{self})
}

type methodsSeparationRayShape3D struct {
	_ [0]*methodsSeparationRayShape3D
	class
}

func (self SeparationRayShape3D) Shape3D() Shape3D {
	var parent Shape3D
	parent.class = self.class
	return parent
}
func (self methodsSeparationRayShape3D) SetLength(length Float) {
	self.Runtime.SeparationRayShape3D_set_length(SeparationRayShape3D{self}, length)
}
func (self methodsSeparationRayShape3D) GetLength() Float {
	return self.Runtime.SeparationRayShape3D_get_length(SeparationRayShape3D{self})
}
func (self methodsSeparationRayShape3D) SetSlideOnSlope(active bool) {
	self.Runtime.SeparationRayShape3D_set_slide_on_slope(SeparationRayShape3D{self}, active)
}
func (self methodsSeparationRayShape3D) GetSlideOnSlope() bool {
	return self.Runtime.SeparationRayShape3D_get_slide_on_slope(SeparationRayShape3D{self})
}

type methodsSeparator struct {
	_ [0]*methodsSeparator
	class
}

func (self Separator) Control() Control { var parent Control; parent.class = self.class; return parent }

type methodsShader struct {
	_ [0]*methodsShader
	class
}

func (self Shader) Resource() Resource { var parent Resource; parent.class = self.class; return parent }
func (self methodsShader) GetMode() ShaderMode {
	return self.Runtime.Shader_get_mode(Shader{self})
}
func (self methodsShader) SetCode(code string) {
	self.Runtime.Shader_set_code(Shader{self}, code)
}
func (self methodsShader) GetCode() string {
	return self.Runtime.Shader_get_code(Shader{self})
}
func (self methodsShader) SetDefaultTextureParameter(name string, texture Texture2D, index int64) {
	self.Runtime.Shader_set_default_texture_parameter(Shader{self}, name, texture, index)
}
func (self methodsShader) GetDefaultTextureParameter(name string, index int64) Texture2D {
	return self.Runtime.Shader_get_default_texture_parameter(Shader{self}, name, index)
}
func (self methodsShader) GetShaderUniformList(get_groups bool) Array {
	return self.Runtime.Shader_get_shader_uniform_list(Shader{self}, get_groups)
}

type methodsShaderGlobalsOverride struct {
	_ [0]*methodsShaderGlobalsOverride
	class
}

func (self ShaderGlobalsOverride) Node() Node {
	var parent Node
	parent.class = self.class
	return parent
}

type methodsShaderInclude struct {
	_ [0]*methodsShaderInclude
	class
}

func (self ShaderInclude) Resource() Resource {
	var parent Resource
	parent.class = self.class
	return parent
}
func (self methodsShaderInclude) SetCode(code string) {
	self.Runtime.ShaderInclude_set_code(ShaderInclude{self}, code)
}
func (self methodsShaderInclude) GetCode() string {
	return self.Runtime.ShaderInclude_get_code(ShaderInclude{self})
}

type methodsShaderMaterial struct {
	_ [0]*methodsShaderMaterial
	class
}

func (self ShaderMaterial) Material() Material {
	var parent Material
	parent.class = self.class
	return parent
}
func (self methodsShaderMaterial) SetShader(shader Shader) {
	self.Runtime.ShaderMaterial_set_shader(ShaderMaterial{self}, shader)
}
func (self methodsShaderMaterial) GetShader() Shader {
	return self.Runtime.ShaderMaterial_get_shader(ShaderMaterial{self})
}
func (self methodsShaderMaterial) SetShaderParameter(param string, value any) {
	self.Runtime.ShaderMaterial_set_shader_parameter(ShaderMaterial{self}, param, value)
}
func (self methodsShaderMaterial) GetShaderParameter(param string) any {
	return self.Runtime.ShaderMaterial_get_shader_parameter(ShaderMaterial{self}, param)
}

type methodsShape2D struct {
	_ [0]*methodsShape2D
	class
}

func (self Shape2D) Resource() Resource {
	var parent Resource
	parent.class = self.class
	return parent
}
func (self methodsShape2D) SetCustomSolverBias(bias Float) {
	self.Runtime.Shape2D_set_custom_solver_bias(Shape2D{self}, bias)
}
func (self methodsShape2D) GetCustomSolverBias() Float {
	return self.Runtime.Shape2D_get_custom_solver_bias(Shape2D{self})
}
func (self methodsShape2D) Collide(local_xform Transform2D, with_shape Shape2D, shape_xform Transform2D) bool {
	return self.Runtime.Shape2D_collide(Shape2D{self}, local_xform, with_shape, shape_xform)
}
func (self methodsShape2D) CollideWithMotion(local_xform Transform2D, local_motion Vector2, with_shape Shape2D, shape_xform Transform2D, shape_motion Vector2) bool {
	return self.Runtime.Shape2D_collide_with_motion(Shape2D{self}, local_xform, local_motion, with_shape, shape_xform, shape_motion)
}
func (self methodsShape2D) CollideAndGetContacts(local_xform Transform2D, with_shape Shape2D, shape_xform Transform2D) PackedVector2Array {
	return self.Runtime.Shape2D_collide_and_get_contacts(Shape2D{self}, local_xform, with_shape, shape_xform)
}
func (self methodsShape2D) CollideWithMotionAndGetContacts(local_xform Transform2D, local_motion Vector2, with_shape Shape2D, shape_xform Transform2D, shape_motion Vector2) PackedVector2Array {
	return self.Runtime.Shape2D_collide_with_motion_and_get_contacts(Shape2D{self}, local_xform, local_motion, with_shape, shape_xform, shape_motion)
}
func (self methodsShape2D) Draw(canvas_item RID, color Color) {
	self.Runtime.Shape2D_draw(Shape2D{self}, canvas_item, color)
}
func (self methodsShape2D) GetRect() Rect2 {
	return self.Runtime.Shape2D_get_rect(Shape2D{self})
}

type methodsShape3D struct {
	_ [0]*methodsShape3D
	class
}

func (self Shape3D) Resource() Resource {
	var parent Resource
	parent.class = self.class
	return parent
}
func (self methodsShape3D) SetCustomSolverBias(bias Float) {
	self.Runtime.Shape3D_set_custom_solver_bias(Shape3D{self}, bias)
}
func (self methodsShape3D) GetCustomSolverBias() Float {
	return self.Runtime.Shape3D_get_custom_solver_bias(Shape3D{self})
}
func (self methodsShape3D) SetMargin(margin Float) {
	self.Runtime.Shape3D_set_margin(Shape3D{self}, margin)
}
func (self methodsShape3D) GetMargin() Float {
	return self.Runtime.Shape3D_get_margin(Shape3D{self})
}
func (self methodsShape3D) GetDebugMesh() ArrayMesh {
	return self.Runtime.Shape3D_get_debug_mesh(Shape3D{self})
}

type methodsShapeCast2D struct {
	_ [0]*methodsShapeCast2D
	class
}

func (self ShapeCast2D) Node2D() Node2D { var parent Node2D; parent.class = self.class; return parent }
func (self methodsShapeCast2D) SetEnabled(enabled bool) {
	self.Runtime.ShapeCast2D_set_enabled(ShapeCast2D{self}, enabled)
}
func (self methodsShapeCast2D) IsEnabled() bool {
	return self.Runtime.ShapeCast2D_is_enabled(ShapeCast2D{self})
}
func (self methodsShapeCast2D) SetShape(shape Shape2D) {
	self.Runtime.ShapeCast2D_set_shape(ShapeCast2D{self}, shape)
}
func (self methodsShapeCast2D) GetShape() Shape2D {
	return self.Runtime.ShapeCast2D_get_shape(ShapeCast2D{self})
}
func (self methodsShapeCast2D) SetTargetPosition(local_point Vector2) {
	self.Runtime.ShapeCast2D_set_target_position(ShapeCast2D{self}, local_point)
}
func (self methodsShapeCast2D) GetTargetPosition() Vector2 {
	return self.Runtime.ShapeCast2D_get_target_position(ShapeCast2D{self})
}
func (self methodsShapeCast2D) SetMargin(margin Float) {
	self.Runtime.ShapeCast2D_set_margin(ShapeCast2D{self}, margin)
}
func (self methodsShapeCast2D) GetMargin() Float {
	return self.Runtime.ShapeCast2D_get_margin(ShapeCast2D{self})
}
func (self methodsShapeCast2D) SetMaxResults(max_results int64) {
	self.Runtime.ShapeCast2D_set_max_results(ShapeCast2D{self}, max_results)
}
func (self methodsShapeCast2D) GetMaxResults() int64 {
	return self.Runtime.ShapeCast2D_get_max_results(ShapeCast2D{self})
}
func (self methodsShapeCast2D) IsColliding() bool {
	return self.Runtime.ShapeCast2D_is_colliding(ShapeCast2D{self})
}
func (self methodsShapeCast2D) GetCollisionCount() int64 {
	return self.Runtime.ShapeCast2D_get_collision_count(ShapeCast2D{self})
}
func (self methodsShapeCast2D) ForceShapecastUpdate() {
	self.Runtime.ShapeCast2D_force_shapecast_update(ShapeCast2D{self})
}
func (self methodsShapeCast2D) GetCollider(index int64) Object {
	return self.Runtime.ShapeCast2D_get_collider(ShapeCast2D{self}, index)
}
func (self methodsShapeCast2D) GetColliderRid(index int64) RID {
	return self.Runtime.ShapeCast2D_get_collider_rid(ShapeCast2D{self}, index)
}
func (self methodsShapeCast2D) GetColliderShape(index int64) int64 {
	return self.Runtime.ShapeCast2D_get_collider_shape(ShapeCast2D{self}, index)
}
func (self methodsShapeCast2D) GetCollisionPoint(index int64) Vector2 {
	return self.Runtime.ShapeCast2D_get_collision_point(ShapeCast2D{self}, index)
}
func (self methodsShapeCast2D) GetCollisionNormal(index int64) Vector2 {
	return self.Runtime.ShapeCast2D_get_collision_normal(ShapeCast2D{self}, index)
}
func (self methodsShapeCast2D) GetClosestCollisionSafeFraction() Float {
	return self.Runtime.ShapeCast2D_get_closest_collision_safe_fraction(ShapeCast2D{self})
}
func (self methodsShapeCast2D) GetClosestCollisionUnsafeFraction() Float {
	return self.Runtime.ShapeCast2D_get_closest_collision_unsafe_fraction(ShapeCast2D{self})
}
func (self methodsShapeCast2D) AddExceptionRid(rid RID) {
	self.Runtime.ShapeCast2D_add_exception_rid(ShapeCast2D{self}, rid)
}
func (self methodsShapeCast2D) AddException(node CollisionObject2D) {
	self.Runtime.ShapeCast2D_add_exception(ShapeCast2D{self}, node)
}
func (self methodsShapeCast2D) RemoveExceptionRid(rid RID) {
	self.Runtime.ShapeCast2D_remove_exception_rid(ShapeCast2D{self}, rid)
}
func (self methodsShapeCast2D) RemoveException(node CollisionObject2D) {
	self.Runtime.ShapeCast2D_remove_exception(ShapeCast2D{self}, node)
}
func (self methodsShapeCast2D) ClearExceptions() {
	self.Runtime.ShapeCast2D_clear_exceptions(ShapeCast2D{self})
}
func (self methodsShapeCast2D) SetCollisionMask(mask int64) {
	self.Runtime.ShapeCast2D_set_collision_mask(ShapeCast2D{self}, mask)
}
func (self methodsShapeCast2D) GetCollisionMask() int64 {
	return self.Runtime.ShapeCast2D_get_collision_mask(ShapeCast2D{self})
}
func (self methodsShapeCast2D) SetCollisionMaskValue(layer_number int64, value bool) {
	self.Runtime.ShapeCast2D_set_collision_mask_value(ShapeCast2D{self}, layer_number, value)
}
func (self methodsShapeCast2D) GetCollisionMaskValue(layer_number int64) bool {
	return self.Runtime.ShapeCast2D_get_collision_mask_value(ShapeCast2D{self}, layer_number)
}
func (self methodsShapeCast2D) SetExcludeParentBody(mask bool) {
	self.Runtime.ShapeCast2D_set_exclude_parent_body(ShapeCast2D{self}, mask)
}
func (self methodsShapeCast2D) GetExcludeParentBody() bool {
	return self.Runtime.ShapeCast2D_get_exclude_parent_body(ShapeCast2D{self})
}
func (self methodsShapeCast2D) SetCollideWithAreas(enable bool) {
	self.Runtime.ShapeCast2D_set_collide_with_areas(ShapeCast2D{self}, enable)
}
func (self methodsShapeCast2D) IsCollideWithAreasEnabled() bool {
	return self.Runtime.ShapeCast2D_is_collide_with_areas_enabled(ShapeCast2D{self})
}
func (self methodsShapeCast2D) SetCollideWithBodies(enable bool) {
	self.Runtime.ShapeCast2D_set_collide_with_bodies(ShapeCast2D{self}, enable)
}
func (self methodsShapeCast2D) IsCollideWithBodiesEnabled() bool {
	return self.Runtime.ShapeCast2D_is_collide_with_bodies_enabled(ShapeCast2D{self})
}

type methodsShapeCast3D struct {
	_ [0]*methodsShapeCast3D
	class
}

func (self ShapeCast3D) Node3D() Node3D { var parent Node3D; parent.class = self.class; return parent }
func (self methodsShapeCast3D) ResourceChanged(resource Resource) {
	self.Runtime.ShapeCast3D_resource_changed(ShapeCast3D{self}, resource)
}
func (self methodsShapeCast3D) SetEnabled(enabled bool) {
	self.Runtime.ShapeCast3D_set_enabled(ShapeCast3D{self}, enabled)
}
func (self methodsShapeCast3D) IsEnabled() bool {
	return self.Runtime.ShapeCast3D_is_enabled(ShapeCast3D{self})
}
func (self methodsShapeCast3D) SetShape(shape Shape3D) {
	self.Runtime.ShapeCast3D_set_shape(ShapeCast3D{self}, shape)
}
func (self methodsShapeCast3D) GetShape() Shape3D {
	return self.Runtime.ShapeCast3D_get_shape(ShapeCast3D{self})
}
func (self methodsShapeCast3D) SetTargetPosition(local_point Vector3) {
	self.Runtime.ShapeCast3D_set_target_position(ShapeCast3D{self}, local_point)
}
func (self methodsShapeCast3D) GetTargetPosition() Vector3 {
	return self.Runtime.ShapeCast3D_get_target_position(ShapeCast3D{self})
}
func (self methodsShapeCast3D) SetMargin(margin Float) {
	self.Runtime.ShapeCast3D_set_margin(ShapeCast3D{self}, margin)
}
func (self methodsShapeCast3D) GetMargin() Float {
	return self.Runtime.ShapeCast3D_get_margin(ShapeCast3D{self})
}
func (self methodsShapeCast3D) SetMaxResults(max_results int64) {
	self.Runtime.ShapeCast3D_set_max_results(ShapeCast3D{self}, max_results)
}
func (self methodsShapeCast3D) GetMaxResults() int64 {
	return self.Runtime.ShapeCast3D_get_max_results(ShapeCast3D{self})
}
func (self methodsShapeCast3D) IsColliding() bool {
	return self.Runtime.ShapeCast3D_is_colliding(ShapeCast3D{self})
}
func (self methodsShapeCast3D) GetCollisionCount() int64 {
	return self.Runtime.ShapeCast3D_get_collision_count(ShapeCast3D{self})
}
func (self methodsShapeCast3D) ForceShapecastUpdate() {
	self.Runtime.ShapeCast3D_force_shapecast_update(ShapeCast3D{self})
}
func (self methodsShapeCast3D) GetCollider(index int64) Object {
	return self.Runtime.ShapeCast3D_get_collider(ShapeCast3D{self}, index)
}
func (self methodsShapeCast3D) GetColliderRid(index int64) RID {
	return self.Runtime.ShapeCast3D_get_collider_rid(ShapeCast3D{self}, index)
}
func (self methodsShapeCast3D) GetColliderShape(index int64) int64 {
	return self.Runtime.ShapeCast3D_get_collider_shape(ShapeCast3D{self}, index)
}
func (self methodsShapeCast3D) GetCollisionPoint(index int64) Vector3 {
	return self.Runtime.ShapeCast3D_get_collision_point(ShapeCast3D{self}, index)
}
func (self methodsShapeCast3D) GetCollisionNormal(index int64) Vector3 {
	return self.Runtime.ShapeCast3D_get_collision_normal(ShapeCast3D{self}, index)
}
func (self methodsShapeCast3D) GetClosestCollisionSafeFraction() Float {
	return self.Runtime.ShapeCast3D_get_closest_collision_safe_fraction(ShapeCast3D{self})
}
func (self methodsShapeCast3D) GetClosestCollisionUnsafeFraction() Float {
	return self.Runtime.ShapeCast3D_get_closest_collision_unsafe_fraction(ShapeCast3D{self})
}
func (self methodsShapeCast3D) AddExceptionRid(rid RID) {
	self.Runtime.ShapeCast3D_add_exception_rid(ShapeCast3D{self}, rid)
}
func (self methodsShapeCast3D) AddException(node CollisionObject3D) {
	self.Runtime.ShapeCast3D_add_exception(ShapeCast3D{self}, node)
}
func (self methodsShapeCast3D) RemoveExceptionRid(rid RID) {
	self.Runtime.ShapeCast3D_remove_exception_rid(ShapeCast3D{self}, rid)
}
func (self methodsShapeCast3D) RemoveException(node CollisionObject3D) {
	self.Runtime.ShapeCast3D_remove_exception(ShapeCast3D{self}, node)
}
func (self methodsShapeCast3D) ClearExceptions() {
	self.Runtime.ShapeCast3D_clear_exceptions(ShapeCast3D{self})
}
func (self methodsShapeCast3D) SetCollisionMask(mask int64) {
	self.Runtime.ShapeCast3D_set_collision_mask(ShapeCast3D{self}, mask)
}
func (self methodsShapeCast3D) GetCollisionMask() int64 {
	return self.Runtime.ShapeCast3D_get_collision_mask(ShapeCast3D{self})
}
func (self methodsShapeCast3D) SetCollisionMaskValue(layer_number int64, value bool) {
	self.Runtime.ShapeCast3D_set_collision_mask_value(ShapeCast3D{self}, layer_number, value)
}
func (self methodsShapeCast3D) GetCollisionMaskValue(layer_number int64) bool {
	return self.Runtime.ShapeCast3D_get_collision_mask_value(ShapeCast3D{self}, layer_number)
}
func (self methodsShapeCast3D) SetExcludeParentBody(mask bool) {
	self.Runtime.ShapeCast3D_set_exclude_parent_body(ShapeCast3D{self}, mask)
}
func (self methodsShapeCast3D) GetExcludeParentBody() bool {
	return self.Runtime.ShapeCast3D_get_exclude_parent_body(ShapeCast3D{self})
}
func (self methodsShapeCast3D) SetCollideWithAreas(enable bool) {
	self.Runtime.ShapeCast3D_set_collide_with_areas(ShapeCast3D{self}, enable)
}
func (self methodsShapeCast3D) IsCollideWithAreasEnabled() bool {
	return self.Runtime.ShapeCast3D_is_collide_with_areas_enabled(ShapeCast3D{self})
}
func (self methodsShapeCast3D) SetCollideWithBodies(enable bool) {
	self.Runtime.ShapeCast3D_set_collide_with_bodies(ShapeCast3D{self}, enable)
}
func (self methodsShapeCast3D) IsCollideWithBodiesEnabled() bool {
	return self.Runtime.ShapeCast3D_is_collide_with_bodies_enabled(ShapeCast3D{self})
}
func (self methodsShapeCast3D) SetDebugShapeCustomColor(debug_shape_custom_color Color) {
	self.Runtime.ShapeCast3D_set_debug_shape_custom_color(ShapeCast3D{self}, debug_shape_custom_color)
}
func (self methodsShapeCast3D) GetDebugShapeCustomColor() Color {
	return self.Runtime.ShapeCast3D_get_debug_shape_custom_color(ShapeCast3D{self})
}

type methodsShortcut struct {
	_ [0]*methodsShortcut
	class
}

func (self Shortcut) Resource() Resource {
	var parent Resource
	parent.class = self.class
	return parent
}
func (self methodsShortcut) SetEvents(events Array) {
	self.Runtime.Shortcut_set_events(Shortcut{self}, events)
}
func (self methodsShortcut) GetEvents() Array {
	return self.Runtime.Shortcut_get_events(Shortcut{self})
}
func (self methodsShortcut) HasValidEvent() bool {
	return self.Runtime.Shortcut_has_valid_event(Shortcut{self})
}
func (self methodsShortcut) MatchesEvent(event InputEvent) bool {
	return self.Runtime.Shortcut_matches_event(Shortcut{self}, event)
}
func (self methodsShortcut) GetAsText() string {
	return self.Runtime.Shortcut_get_as_text(Shortcut{self})
}

type methodsSkeleton2D struct {
	_ [0]*methodsSkeleton2D
	class
}

func (self Skeleton2D) Node2D() Node2D { var parent Node2D; parent.class = self.class; return parent }
func (self methodsSkeleton2D) GetBoneCount() int64 {
	return self.Runtime.Skeleton2D_get_bone_count(Skeleton2D{self})
}
func (self methodsSkeleton2D) GetBone(idx int64) Bone2D {
	return self.Runtime.Skeleton2D_get_bone(Skeleton2D{self}, idx)
}
func (self methodsSkeleton2D) GetSkeleton() RID {
	return self.Runtime.Skeleton2D_get_skeleton(Skeleton2D{self})
}
func (self methodsSkeleton2D) SetModificationStack(modification_stack SkeletonModificationStack2D) {
	self.Runtime.Skeleton2D_set_modification_stack(Skeleton2D{self}, modification_stack)
}
func (self methodsSkeleton2D) GetModificationStack() SkeletonModificationStack2D {
	return self.Runtime.Skeleton2D_get_modification_stack(Skeleton2D{self})
}
func (self methodsSkeleton2D) ExecuteModifications(delta Float, execution_mode int64) {
	self.Runtime.Skeleton2D_execute_modifications(Skeleton2D{self}, delta, execution_mode)
}
func (self methodsSkeleton2D) SetBoneLocalPoseOverride(bone_idx int64, override_pose Transform2D, strength Float, persistent bool) {
	self.Runtime.Skeleton2D_set_bone_local_pose_override(Skeleton2D{self}, bone_idx, override_pose, strength, persistent)
}
func (self methodsSkeleton2D) GetBoneLocalPoseOverride(bone_idx int64) Transform2D {
	return self.Runtime.Skeleton2D_get_bone_local_pose_override(Skeleton2D{self}, bone_idx)
}

type methodsSkeleton3D struct {
	_ [0]*methodsSkeleton3D
	class
}

func (self Skeleton3D) Node3D() Node3D { var parent Node3D; parent.class = self.class; return parent }
func (self methodsSkeleton3D) AddBone(name string) {
	self.Runtime.Skeleton3D_add_bone(Skeleton3D{self}, name)
}
func (self methodsSkeleton3D) FindBone(name string) int64 {
	return self.Runtime.Skeleton3D_find_bone(Skeleton3D{self}, name)
}
func (self methodsSkeleton3D) GetBoneName(bone_idx int64) string {
	return self.Runtime.Skeleton3D_get_bone_name(Skeleton3D{self}, bone_idx)
}
func (self methodsSkeleton3D) SetBoneName(bone_idx int64, name string) {
	self.Runtime.Skeleton3D_set_bone_name(Skeleton3D{self}, bone_idx, name)
}
func (self methodsSkeleton3D) GetBoneParent(bone_idx int64) int64 {
	return self.Runtime.Skeleton3D_get_bone_parent(Skeleton3D{self}, bone_idx)
}
func (self methodsSkeleton3D) SetBoneParent(bone_idx int64, parent_idx int64) {
	self.Runtime.Skeleton3D_set_bone_parent(Skeleton3D{self}, bone_idx, parent_idx)
}
func (self methodsSkeleton3D) GetBoneCount() int64 {
	return self.Runtime.Skeleton3D_get_bone_count(Skeleton3D{self})
}
func (self methodsSkeleton3D) GetVersion() int64 {
	return self.Runtime.Skeleton3D_get_version(Skeleton3D{self})
}
func (self methodsSkeleton3D) UnparentBoneAndRest(bone_idx int64) {
	self.Runtime.Skeleton3D_unparent_bone_and_rest(Skeleton3D{self}, bone_idx)
}
func (self methodsSkeleton3D) GetBoneChildren(bone_idx int64) PackedInt32Array {
	return self.Runtime.Skeleton3D_get_bone_children(Skeleton3D{self}, bone_idx)
}
func (self methodsSkeleton3D) GetParentlessBones() PackedInt32Array {
	return self.Runtime.Skeleton3D_get_parentless_bones(Skeleton3D{self})
}
func (self methodsSkeleton3D) GetBoneRest(bone_idx int64) Transform3D {
	return self.Runtime.Skeleton3D_get_bone_rest(Skeleton3D{self}, bone_idx)
}
func (self methodsSkeleton3D) SetBoneRest(bone_idx int64, rest Transform3D) {
	self.Runtime.Skeleton3D_set_bone_rest(Skeleton3D{self}, bone_idx, rest)
}
func (self methodsSkeleton3D) GetBoneGlobalRest(bone_idx int64) Transform3D {
	return self.Runtime.Skeleton3D_get_bone_global_rest(Skeleton3D{self}, bone_idx)
}
func (self methodsSkeleton3D) CreateSkinFromRestTransforms() Skin {
	return self.Runtime.Skeleton3D_create_skin_from_rest_transforms(Skeleton3D{self})
}
func (self methodsSkeleton3D) RegisterSkin(skin Skin) SkinReference {
	return self.Runtime.Skeleton3D_register_skin(Skeleton3D{self}, skin)
}
func (self methodsSkeleton3D) LocalizeRests() {
	self.Runtime.Skeleton3D_localize_rests(Skeleton3D{self})
}
func (self methodsSkeleton3D) ClearBones() {
	self.Runtime.Skeleton3D_clear_bones(Skeleton3D{self})
}
func (self methodsSkeleton3D) GetBonePose(bone_idx int64) Transform3D {
	return self.Runtime.Skeleton3D_get_bone_pose(Skeleton3D{self}, bone_idx)
}
func (self methodsSkeleton3D) SetBonePosePosition(bone_idx int64, position Vector3) {
	self.Runtime.Skeleton3D_set_bone_pose_position(Skeleton3D{self}, bone_idx, position)
}
func (self methodsSkeleton3D) SetBonePoseRotation(bone_idx int64, rotation Quaternion) {
	self.Runtime.Skeleton3D_set_bone_pose_rotation(Skeleton3D{self}, bone_idx, rotation)
}
func (self methodsSkeleton3D) SetBonePoseScale(bone_idx int64, scale Vector3) {
	self.Runtime.Skeleton3D_set_bone_pose_scale(Skeleton3D{self}, bone_idx, scale)
}
func (self methodsSkeleton3D) GetBonePosePosition(bone_idx int64) Vector3 {
	return self.Runtime.Skeleton3D_get_bone_pose_position(Skeleton3D{self}, bone_idx)
}
func (self methodsSkeleton3D) GetBonePoseRotation(bone_idx int64) Quaternion {
	return self.Runtime.Skeleton3D_get_bone_pose_rotation(Skeleton3D{self}, bone_idx)
}
func (self methodsSkeleton3D) GetBonePoseScale(bone_idx int64) Vector3 {
	return self.Runtime.Skeleton3D_get_bone_pose_scale(Skeleton3D{self}, bone_idx)
}
func (self methodsSkeleton3D) ResetBonePose(bone_idx int64) {
	self.Runtime.Skeleton3D_reset_bone_pose(Skeleton3D{self}, bone_idx)
}
func (self methodsSkeleton3D) ResetBonePoses() {
	self.Runtime.Skeleton3D_reset_bone_poses(Skeleton3D{self})
}
func (self methodsSkeleton3D) IsBoneEnabled(bone_idx int64) bool {
	return self.Runtime.Skeleton3D_is_bone_enabled(Skeleton3D{self}, bone_idx)
}
func (self methodsSkeleton3D) SetBoneEnabled(bone_idx int64, enabled bool) {
	self.Runtime.Skeleton3D_set_bone_enabled(Skeleton3D{self}, bone_idx, enabled)
}
func (self methodsSkeleton3D) ClearBonesGlobalPoseOverride() {
	self.Runtime.Skeleton3D_clear_bones_global_pose_override(Skeleton3D{self})
}
func (self methodsSkeleton3D) SetBoneGlobalPoseOverride(bone_idx int64, pose Transform3D, amount Float, persistent bool) {
	self.Runtime.Skeleton3D_set_bone_global_pose_override(Skeleton3D{self}, bone_idx, pose, amount, persistent)
}
func (self methodsSkeleton3D) GetBoneGlobalPoseOverride(bone_idx int64) Transform3D {
	return self.Runtime.Skeleton3D_get_bone_global_pose_override(Skeleton3D{self}, bone_idx)
}
func (self methodsSkeleton3D) GetBoneGlobalPose(bone_idx int64) Transform3D {
	return self.Runtime.Skeleton3D_get_bone_global_pose(Skeleton3D{self}, bone_idx)
}
func (self methodsSkeleton3D) GetBoneGlobalPoseNoOverride(bone_idx int64) Transform3D {
	return self.Runtime.Skeleton3D_get_bone_global_pose_no_override(Skeleton3D{self}, bone_idx)
}
func (self methodsSkeleton3D) ForceUpdateAllBoneTransforms() {
	self.Runtime.Skeleton3D_force_update_all_bone_transforms(Skeleton3D{self})
}
func (self methodsSkeleton3D) ForceUpdateBoneChildTransform(bone_idx int64) {
	self.Runtime.Skeleton3D_force_update_bone_child_transform(Skeleton3D{self}, bone_idx)
}
func (self methodsSkeleton3D) SetMotionScale(motion_scale Float) {
	self.Runtime.Skeleton3D_set_motion_scale(Skeleton3D{self}, motion_scale)
}
func (self methodsSkeleton3D) GetMotionScale() Float {
	return self.Runtime.Skeleton3D_get_motion_scale(Skeleton3D{self})
}
func (self methodsSkeleton3D) SetShowRestOnly(enabled bool) {
	self.Runtime.Skeleton3D_set_show_rest_only(Skeleton3D{self}, enabled)
}
func (self methodsSkeleton3D) IsShowRestOnly() bool {
	return self.Runtime.Skeleton3D_is_show_rest_only(Skeleton3D{self})
}
func (self methodsSkeleton3D) SetAnimatePhysicalBones(enabled bool) {
	self.Runtime.Skeleton3D_set_animate_physical_bones(Skeleton3D{self}, enabled)
}
func (self methodsSkeleton3D) GetAnimatePhysicalBones() bool {
	return self.Runtime.Skeleton3D_get_animate_physical_bones(Skeleton3D{self})
}
func (self methodsSkeleton3D) PhysicalBonesStopSimulation() {
	self.Runtime.Skeleton3D_physical_bones_stop_simulation(Skeleton3D{self})
}
func (self methodsSkeleton3D) PhysicalBonesStartSimulation(bones ArrayOf[string]) {
	self.Runtime.Skeleton3D_physical_bones_start_simulation(Skeleton3D{self}, bones)
}
func (self methodsSkeleton3D) PhysicalBonesAddCollisionException(exception RID) {
	self.Runtime.Skeleton3D_physical_bones_add_collision_exception(Skeleton3D{self}, exception)
}
func (self methodsSkeleton3D) PhysicalBonesRemoveCollisionException(exception RID) {
	self.Runtime.Skeleton3D_physical_bones_remove_collision_exception(Skeleton3D{self}, exception)
}

type methodsSkeletonIK3D struct {
	_ [0]*methodsSkeletonIK3D
	class
}

func (self SkeletonIK3D) Node() Node { var parent Node; parent.class = self.class; return parent }
func (self methodsSkeletonIK3D) SetRootBone(root_bone string) {
	self.Runtime.SkeletonIK3D_set_root_bone(SkeletonIK3D{self}, root_bone)
}
func (self methodsSkeletonIK3D) GetRootBone() string {
	return self.Runtime.SkeletonIK3D_get_root_bone(SkeletonIK3D{self})
}
func (self methodsSkeletonIK3D) SetTipBone(tip_bone string) {
	self.Runtime.SkeletonIK3D_set_tip_bone(SkeletonIK3D{self}, tip_bone)
}
func (self methodsSkeletonIK3D) GetTipBone() string {
	return self.Runtime.SkeletonIK3D_get_tip_bone(SkeletonIK3D{self})
}
func (self methodsSkeletonIK3D) SetInterpolation(interpolation Float) {
	self.Runtime.SkeletonIK3D_set_interpolation(SkeletonIK3D{self}, interpolation)
}
func (self methodsSkeletonIK3D) GetInterpolation() Float {
	return self.Runtime.SkeletonIK3D_get_interpolation(SkeletonIK3D{self})
}
func (self methodsSkeletonIK3D) SetTargetTransform(target Transform3D) {
	self.Runtime.SkeletonIK3D_set_target_transform(SkeletonIK3D{self}, target)
}
func (self methodsSkeletonIK3D) GetTargetTransform() Transform3D {
	return self.Runtime.SkeletonIK3D_get_target_transform(SkeletonIK3D{self})
}
func (self methodsSkeletonIK3D) SetTargetNode(node NodePath) {
	self.Runtime.SkeletonIK3D_set_target_node(SkeletonIK3D{self}, node)
}
func (self methodsSkeletonIK3D) GetTargetNode() NodePath {
	return self.Runtime.SkeletonIK3D_get_target_node(SkeletonIK3D{self})
}
func (self methodsSkeletonIK3D) SetOverrideTipBasis(override bool) {
	self.Runtime.SkeletonIK3D_set_override_tip_basis(SkeletonIK3D{self}, override)
}
func (self methodsSkeletonIK3D) IsOverrideTipBasis() bool {
	return self.Runtime.SkeletonIK3D_is_override_tip_basis(SkeletonIK3D{self})
}
func (self methodsSkeletonIK3D) SetUseMagnet(use bool) {
	self.Runtime.SkeletonIK3D_set_use_magnet(SkeletonIK3D{self}, use)
}
func (self methodsSkeletonIK3D) IsUsingMagnet() bool {
	return self.Runtime.SkeletonIK3D_is_using_magnet(SkeletonIK3D{self})
}
func (self methodsSkeletonIK3D) SetMagnetPosition(local_position Vector3) {
	self.Runtime.SkeletonIK3D_set_magnet_position(SkeletonIK3D{self}, local_position)
}
func (self methodsSkeletonIK3D) GetMagnetPosition() Vector3 {
	return self.Runtime.SkeletonIK3D_get_magnet_position(SkeletonIK3D{self})
}
func (self methodsSkeletonIK3D) GetParentSkeleton() Skeleton3D {
	return self.Runtime.SkeletonIK3D_get_parent_skeleton(SkeletonIK3D{self})
}
func (self methodsSkeletonIK3D) IsRunning() bool {
	return self.Runtime.SkeletonIK3D_is_running(SkeletonIK3D{self})
}
func (self methodsSkeletonIK3D) SetMinDistance(min_distance Float) {
	self.Runtime.SkeletonIK3D_set_min_distance(SkeletonIK3D{self}, min_distance)
}
func (self methodsSkeletonIK3D) GetMinDistance() Float {
	return self.Runtime.SkeletonIK3D_get_min_distance(SkeletonIK3D{self})
}
func (self methodsSkeletonIK3D) SetMaxIterations(iterations int64) {
	self.Runtime.SkeletonIK3D_set_max_iterations(SkeletonIK3D{self}, iterations)
}
func (self methodsSkeletonIK3D) GetMaxIterations() int64 {
	return self.Runtime.SkeletonIK3D_get_max_iterations(SkeletonIK3D{self})
}
func (self methodsSkeletonIK3D) Start(one_time bool) {
	self.Runtime.SkeletonIK3D_start(SkeletonIK3D{self}, one_time)
}
func (self methodsSkeletonIK3D) Stop() {
	self.Runtime.SkeletonIK3D_stop(SkeletonIK3D{self})
}

type methodsSkeletonModification2D struct {
	_ [0]*methodsSkeletonModification2D
	class
}

func (self SkeletonModification2D) Resource() Resource {
	var parent Resource
	parent.class = self.class
	return parent
}
func (self methodsSkeletonModification2D) SetEnabled(enabled bool) {
	self.Runtime.SkeletonModification2D_set_enabled(SkeletonModification2D{self}, enabled)
}
func (self methodsSkeletonModification2D) GetEnabled() bool {
	return self.Runtime.SkeletonModification2D_get_enabled(SkeletonModification2D{self})
}
func (self methodsSkeletonModification2D) GetModificationStack() SkeletonModificationStack2D {
	return self.Runtime.SkeletonModification2D_get_modification_stack(SkeletonModification2D{self})
}
func (self methodsSkeletonModification2D) SetIsSetup(is_setup bool) {
	self.Runtime.SkeletonModification2D_set_is_setup(SkeletonModification2D{self}, is_setup)
}
func (self methodsSkeletonModification2D) GetIsSetup() bool {
	return self.Runtime.SkeletonModification2D_get_is_setup(SkeletonModification2D{self})
}
func (self methodsSkeletonModification2D) SetExecutionMode(execution_mode int64) {
	self.Runtime.SkeletonModification2D_set_execution_mode(SkeletonModification2D{self}, execution_mode)
}
func (self methodsSkeletonModification2D) GetExecutionMode() int64 {
	return self.Runtime.SkeletonModification2D_get_execution_mode(SkeletonModification2D{self})
}
func (self methodsSkeletonModification2D) ClampAngle(angle Float, min Float, max Float, invert bool) Float {
	return self.Runtime.SkeletonModification2D_clamp_angle(SkeletonModification2D{self}, angle, min, max, invert)
}
func (self methodsSkeletonModification2D) SetEditorDrawGizmo(draw_gizmo bool) {
	self.Runtime.SkeletonModification2D_set_editor_draw_gizmo(SkeletonModification2D{self}, draw_gizmo)
}
func (self methodsSkeletonModification2D) GetEditorDrawGizmo() bool {
	return self.Runtime.SkeletonModification2D_get_editor_draw_gizmo(SkeletonModification2D{self})
}

type methodsSkeletonModification2DCCDIK struct {
	_ [0]*methodsSkeletonModification2DCCDIK
	class
}

func (self SkeletonModification2DCCDIK) SkeletonModification2D() SkeletonModification2D {
	var parent SkeletonModification2D
	parent.class = self.class
	return parent
}
func (self methodsSkeletonModification2DCCDIK) SetTargetNode(target_nodepath NodePath) {
	self.Runtime.SkeletonModification2DCCDIK_set_target_node(SkeletonModification2DCCDIK{self}, target_nodepath)
}
func (self methodsSkeletonModification2DCCDIK) GetTargetNode() NodePath {
	return self.Runtime.SkeletonModification2DCCDIK_get_target_node(SkeletonModification2DCCDIK{self})
}
func (self methodsSkeletonModification2DCCDIK) SetTipNode(tip_nodepath NodePath) {
	self.Runtime.SkeletonModification2DCCDIK_set_tip_node(SkeletonModification2DCCDIK{self}, tip_nodepath)
}
func (self methodsSkeletonModification2DCCDIK) GetTipNode() NodePath {
	return self.Runtime.SkeletonModification2DCCDIK_get_tip_node(SkeletonModification2DCCDIK{self})
}
func (self methodsSkeletonModification2DCCDIK) SetCcdikDataChainLength(length int64) {
	self.Runtime.SkeletonModification2DCCDIK_set_ccdik_data_chain_length(SkeletonModification2DCCDIK{self}, length)
}
func (self methodsSkeletonModification2DCCDIK) GetCcdikDataChainLength() int64 {
	return self.Runtime.SkeletonModification2DCCDIK_get_ccdik_data_chain_length(SkeletonModification2DCCDIK{self})
}
func (self methodsSkeletonModification2DCCDIK) SetCcdikJointBone2dNode(joint_idx int64, bone2d_nodepath NodePath) {
	self.Runtime.SkeletonModification2DCCDIK_set_ccdik_joint_bone2d_node(SkeletonModification2DCCDIK{self}, joint_idx, bone2d_nodepath)
}
func (self methodsSkeletonModification2DCCDIK) GetCcdikJointBone2dNode(joint_idx int64) NodePath {
	return self.Runtime.SkeletonModification2DCCDIK_get_ccdik_joint_bone2d_node(SkeletonModification2DCCDIK{self}, joint_idx)
}
func (self methodsSkeletonModification2DCCDIK) SetCcdikJointBoneIndex(joint_idx int64, bone_idx int64) {
	self.Runtime.SkeletonModification2DCCDIK_set_ccdik_joint_bone_index(SkeletonModification2DCCDIK{self}, joint_idx, bone_idx)
}
func (self methodsSkeletonModification2DCCDIK) GetCcdikJointBoneIndex(joint_idx int64) int64 {
	return self.Runtime.SkeletonModification2DCCDIK_get_ccdik_joint_bone_index(SkeletonModification2DCCDIK{self}, joint_idx)
}
func (self methodsSkeletonModification2DCCDIK) SetCcdikJointRotateFromJoint(joint_idx int64, rotate_from_joint bool) {
	self.Runtime.SkeletonModification2DCCDIK_set_ccdik_joint_rotate_from_joint(SkeletonModification2DCCDIK{self}, joint_idx, rotate_from_joint)
}
func (self methodsSkeletonModification2DCCDIK) GetCcdikJointRotateFromJoint(joint_idx int64) bool {
	return self.Runtime.SkeletonModification2DCCDIK_get_ccdik_joint_rotate_from_joint(SkeletonModification2DCCDIK{self}, joint_idx)
}
func (self methodsSkeletonModification2DCCDIK) SetCcdikJointEnableConstraint(joint_idx int64, enable_constraint bool) {
	self.Runtime.SkeletonModification2DCCDIK_set_ccdik_joint_enable_constraint(SkeletonModification2DCCDIK{self}, joint_idx, enable_constraint)
}
func (self methodsSkeletonModification2DCCDIK) GetCcdikJointEnableConstraint(joint_idx int64) bool {
	return self.Runtime.SkeletonModification2DCCDIK_get_ccdik_joint_enable_constraint(SkeletonModification2DCCDIK{self}, joint_idx)
}
func (self methodsSkeletonModification2DCCDIK) SetCcdikJointConstraintAngleMin(joint_idx int64, angle_min Float) {
	self.Runtime.SkeletonModification2DCCDIK_set_ccdik_joint_constraint_angle_min(SkeletonModification2DCCDIK{self}, joint_idx, angle_min)
}
func (self methodsSkeletonModification2DCCDIK) GetCcdikJointConstraintAngleMin(joint_idx int64) Float {
	return self.Runtime.SkeletonModification2DCCDIK_get_ccdik_joint_constraint_angle_min(SkeletonModification2DCCDIK{self}, joint_idx)
}
func (self methodsSkeletonModification2DCCDIK) SetCcdikJointConstraintAngleMax(joint_idx int64, angle_max Float) {
	self.Runtime.SkeletonModification2DCCDIK_set_ccdik_joint_constraint_angle_max(SkeletonModification2DCCDIK{self}, joint_idx, angle_max)
}
func (self methodsSkeletonModification2DCCDIK) GetCcdikJointConstraintAngleMax(joint_idx int64) Float {
	return self.Runtime.SkeletonModification2DCCDIK_get_ccdik_joint_constraint_angle_max(SkeletonModification2DCCDIK{self}, joint_idx)
}
func (self methodsSkeletonModification2DCCDIK) SetCcdikJointConstraintAngleInvert(joint_idx int64, invert bool) {
	self.Runtime.SkeletonModification2DCCDIK_set_ccdik_joint_constraint_angle_invert(SkeletonModification2DCCDIK{self}, joint_idx, invert)
}
func (self methodsSkeletonModification2DCCDIK) GetCcdikJointConstraintAngleInvert(joint_idx int64) bool {
	return self.Runtime.SkeletonModification2DCCDIK_get_ccdik_joint_constraint_angle_invert(SkeletonModification2DCCDIK{self}, joint_idx)
}

type methodsSkeletonModification2DFABRIK struct {
	_ [0]*methodsSkeletonModification2DFABRIK
	class
}

func (self SkeletonModification2DFABRIK) SkeletonModification2D() SkeletonModification2D {
	var parent SkeletonModification2D
	parent.class = self.class
	return parent
}
func (self methodsSkeletonModification2DFABRIK) SetTargetNode(target_nodepath NodePath) {
	self.Runtime.SkeletonModification2DFABRIK_set_target_node(SkeletonModification2DFABRIK{self}, target_nodepath)
}
func (self methodsSkeletonModification2DFABRIK) GetTargetNode() NodePath {
	return self.Runtime.SkeletonModification2DFABRIK_get_target_node(SkeletonModification2DFABRIK{self})
}
func (self methodsSkeletonModification2DFABRIK) SetFabrikDataChainLength(length int64) {
	self.Runtime.SkeletonModification2DFABRIK_set_fabrik_data_chain_length(SkeletonModification2DFABRIK{self}, length)
}
func (self methodsSkeletonModification2DFABRIK) GetFabrikDataChainLength() int64 {
	return self.Runtime.SkeletonModification2DFABRIK_get_fabrik_data_chain_length(SkeletonModification2DFABRIK{self})
}
func (self methodsSkeletonModification2DFABRIK) SetFabrikJointBone2dNode(joint_idx int64, bone2d_nodepath NodePath) {
	self.Runtime.SkeletonModification2DFABRIK_set_fabrik_joint_bone2d_node(SkeletonModification2DFABRIK{self}, joint_idx, bone2d_nodepath)
}
func (self methodsSkeletonModification2DFABRIK) GetFabrikJointBone2dNode(joint_idx int64) NodePath {
	return self.Runtime.SkeletonModification2DFABRIK_get_fabrik_joint_bone2d_node(SkeletonModification2DFABRIK{self}, joint_idx)
}
func (self methodsSkeletonModification2DFABRIK) SetFabrikJointBoneIndex(joint_idx int64, bone_idx int64) {
	self.Runtime.SkeletonModification2DFABRIK_set_fabrik_joint_bone_index(SkeletonModification2DFABRIK{self}, joint_idx, bone_idx)
}
func (self methodsSkeletonModification2DFABRIK) GetFabrikJointBoneIndex(joint_idx int64) int64 {
	return self.Runtime.SkeletonModification2DFABRIK_get_fabrik_joint_bone_index(SkeletonModification2DFABRIK{self}, joint_idx)
}
func (self methodsSkeletonModification2DFABRIK) SetFabrikJointMagnetPosition(joint_idx int64, magnet_position Vector2) {
	self.Runtime.SkeletonModification2DFABRIK_set_fabrik_joint_magnet_position(SkeletonModification2DFABRIK{self}, joint_idx, magnet_position)
}
func (self methodsSkeletonModification2DFABRIK) GetFabrikJointMagnetPosition(joint_idx int64) Vector2 {
	return self.Runtime.SkeletonModification2DFABRIK_get_fabrik_joint_magnet_position(SkeletonModification2DFABRIK{self}, joint_idx)
}
func (self methodsSkeletonModification2DFABRIK) SetFabrikJointUseTargetRotation(joint_idx int64, use_target_rotation bool) {
	self.Runtime.SkeletonModification2DFABRIK_set_fabrik_joint_use_target_rotation(SkeletonModification2DFABRIK{self}, joint_idx, use_target_rotation)
}
func (self methodsSkeletonModification2DFABRIK) GetFabrikJointUseTargetRotation(joint_idx int64) bool {
	return self.Runtime.SkeletonModification2DFABRIK_get_fabrik_joint_use_target_rotation(SkeletonModification2DFABRIK{self}, joint_idx)
}

type methodsSkeletonModification2DJiggle struct {
	_ [0]*methodsSkeletonModification2DJiggle
	class
}

func (self SkeletonModification2DJiggle) SkeletonModification2D() SkeletonModification2D {
	var parent SkeletonModification2D
	parent.class = self.class
	return parent
}
func (self methodsSkeletonModification2DJiggle) SetTargetNode(target_nodepath NodePath) {
	self.Runtime.SkeletonModification2DJiggle_set_target_node(SkeletonModification2DJiggle{self}, target_nodepath)
}
func (self methodsSkeletonModification2DJiggle) GetTargetNode() NodePath {
	return self.Runtime.SkeletonModification2DJiggle_get_target_node(SkeletonModification2DJiggle{self})
}
func (self methodsSkeletonModification2DJiggle) SetJiggleDataChainLength(length int64) {
	self.Runtime.SkeletonModification2DJiggle_set_jiggle_data_chain_length(SkeletonModification2DJiggle{self}, length)
}
func (self methodsSkeletonModification2DJiggle) GetJiggleDataChainLength() int64 {
	return self.Runtime.SkeletonModification2DJiggle_get_jiggle_data_chain_length(SkeletonModification2DJiggle{self})
}
func (self methodsSkeletonModification2DJiggle) SetStiffness(stiffness Float) {
	self.Runtime.SkeletonModification2DJiggle_set_stiffness(SkeletonModification2DJiggle{self}, stiffness)
}
func (self methodsSkeletonModification2DJiggle) GetStiffness() Float {
	return self.Runtime.SkeletonModification2DJiggle_get_stiffness(SkeletonModification2DJiggle{self})
}
func (self methodsSkeletonModification2DJiggle) SetMass(mass Float) {
	self.Runtime.SkeletonModification2DJiggle_set_mass(SkeletonModification2DJiggle{self}, mass)
}
func (self methodsSkeletonModification2DJiggle) GetMass() Float {
	return self.Runtime.SkeletonModification2DJiggle_get_mass(SkeletonModification2DJiggle{self})
}
func (self methodsSkeletonModification2DJiggle) SetDamping(damping Float) {
	self.Runtime.SkeletonModification2DJiggle_set_damping(SkeletonModification2DJiggle{self}, damping)
}
func (self methodsSkeletonModification2DJiggle) GetDamping() Float {
	return self.Runtime.SkeletonModification2DJiggle_get_damping(SkeletonModification2DJiggle{self})
}
func (self methodsSkeletonModification2DJiggle) SetUseGravity(use_gravity bool) {
	self.Runtime.SkeletonModification2DJiggle_set_use_gravity(SkeletonModification2DJiggle{self}, use_gravity)
}
func (self methodsSkeletonModification2DJiggle) GetUseGravity() bool {
	return self.Runtime.SkeletonModification2DJiggle_get_use_gravity(SkeletonModification2DJiggle{self})
}
func (self methodsSkeletonModification2DJiggle) SetGravity(gravity Vector2) {
	self.Runtime.SkeletonModification2DJiggle_set_gravity(SkeletonModification2DJiggle{self}, gravity)
}
func (self methodsSkeletonModification2DJiggle) GetGravity() Vector2 {
	return self.Runtime.SkeletonModification2DJiggle_get_gravity(SkeletonModification2DJiggle{self})
}
func (self methodsSkeletonModification2DJiggle) SetUseColliders(use_colliders bool) {
	self.Runtime.SkeletonModification2DJiggle_set_use_colliders(SkeletonModification2DJiggle{self}, use_colliders)
}
func (self methodsSkeletonModification2DJiggle) GetUseColliders() bool {
	return self.Runtime.SkeletonModification2DJiggle_get_use_colliders(SkeletonModification2DJiggle{self})
}
func (self methodsSkeletonModification2DJiggle) SetCollisionMask(collision_mask int64) {
	self.Runtime.SkeletonModification2DJiggle_set_collision_mask(SkeletonModification2DJiggle{self}, collision_mask)
}
func (self methodsSkeletonModification2DJiggle) GetCollisionMask() int64 {
	return self.Runtime.SkeletonModification2DJiggle_get_collision_mask(SkeletonModification2DJiggle{self})
}
func (self methodsSkeletonModification2DJiggle) SetJiggleJointBone2dNode(joint_idx int64, bone2d_node NodePath) {
	self.Runtime.SkeletonModification2DJiggle_set_jiggle_joint_bone2d_node(SkeletonModification2DJiggle{self}, joint_idx, bone2d_node)
}
func (self methodsSkeletonModification2DJiggle) GetJiggleJointBone2dNode(joint_idx int64) NodePath {
	return self.Runtime.SkeletonModification2DJiggle_get_jiggle_joint_bone2d_node(SkeletonModification2DJiggle{self}, joint_idx)
}
func (self methodsSkeletonModification2DJiggle) SetJiggleJointBoneIndex(joint_idx int64, bone_idx int64) {
	self.Runtime.SkeletonModification2DJiggle_set_jiggle_joint_bone_index(SkeletonModification2DJiggle{self}, joint_idx, bone_idx)
}
func (self methodsSkeletonModification2DJiggle) GetJiggleJointBoneIndex(joint_idx int64) int64 {
	return self.Runtime.SkeletonModification2DJiggle_get_jiggle_joint_bone_index(SkeletonModification2DJiggle{self}, joint_idx)
}
func (self methodsSkeletonModification2DJiggle) SetJiggleJointOverride(joint_idx int64, override bool) {
	self.Runtime.SkeletonModification2DJiggle_set_jiggle_joint_override(SkeletonModification2DJiggle{self}, joint_idx, override)
}
func (self methodsSkeletonModification2DJiggle) GetJiggleJointOverride(joint_idx int64) bool {
	return self.Runtime.SkeletonModification2DJiggle_get_jiggle_joint_override(SkeletonModification2DJiggle{self}, joint_idx)
}
func (self methodsSkeletonModification2DJiggle) SetJiggleJointStiffness(joint_idx int64, stiffness Float) {
	self.Runtime.SkeletonModification2DJiggle_set_jiggle_joint_stiffness(SkeletonModification2DJiggle{self}, joint_idx, stiffness)
}
func (self methodsSkeletonModification2DJiggle) GetJiggleJointStiffness(joint_idx int64) Float {
	return self.Runtime.SkeletonModification2DJiggle_get_jiggle_joint_stiffness(SkeletonModification2DJiggle{self}, joint_idx)
}
func (self methodsSkeletonModification2DJiggle) SetJiggleJointMass(joint_idx int64, mass Float) {
	self.Runtime.SkeletonModification2DJiggle_set_jiggle_joint_mass(SkeletonModification2DJiggle{self}, joint_idx, mass)
}
func (self methodsSkeletonModification2DJiggle) GetJiggleJointMass(joint_idx int64) Float {
	return self.Runtime.SkeletonModification2DJiggle_get_jiggle_joint_mass(SkeletonModification2DJiggle{self}, joint_idx)
}
func (self methodsSkeletonModification2DJiggle) SetJiggleJointDamping(joint_idx int64, damping Float) {
	self.Runtime.SkeletonModification2DJiggle_set_jiggle_joint_damping(SkeletonModification2DJiggle{self}, joint_idx, damping)
}
func (self methodsSkeletonModification2DJiggle) GetJiggleJointDamping(joint_idx int64) Float {
	return self.Runtime.SkeletonModification2DJiggle_get_jiggle_joint_damping(SkeletonModification2DJiggle{self}, joint_idx)
}
func (self methodsSkeletonModification2DJiggle) SetJiggleJointUseGravity(joint_idx int64, use_gravity bool) {
	self.Runtime.SkeletonModification2DJiggle_set_jiggle_joint_use_gravity(SkeletonModification2DJiggle{self}, joint_idx, use_gravity)
}
func (self methodsSkeletonModification2DJiggle) GetJiggleJointUseGravity(joint_idx int64) bool {
	return self.Runtime.SkeletonModification2DJiggle_get_jiggle_joint_use_gravity(SkeletonModification2DJiggle{self}, joint_idx)
}
func (self methodsSkeletonModification2DJiggle) SetJiggleJointGravity(joint_idx int64, gravity Vector2) {
	self.Runtime.SkeletonModification2DJiggle_set_jiggle_joint_gravity(SkeletonModification2DJiggle{self}, joint_idx, gravity)
}
func (self methodsSkeletonModification2DJiggle) GetJiggleJointGravity(joint_idx int64) Vector2 {
	return self.Runtime.SkeletonModification2DJiggle_get_jiggle_joint_gravity(SkeletonModification2DJiggle{self}, joint_idx)
}

type methodsSkeletonModification2DLookAt struct {
	_ [0]*methodsSkeletonModification2DLookAt
	class
}

func (self SkeletonModification2DLookAt) SkeletonModification2D() SkeletonModification2D {
	var parent SkeletonModification2D
	parent.class = self.class
	return parent
}
func (self methodsSkeletonModification2DLookAt) SetBone2dNode(bone2d_nodepath NodePath) {
	self.Runtime.SkeletonModification2DLookAt_set_bone2d_node(SkeletonModification2DLookAt{self}, bone2d_nodepath)
}
func (self methodsSkeletonModification2DLookAt) GetBone2dNode() NodePath {
	return self.Runtime.SkeletonModification2DLookAt_get_bone2d_node(SkeletonModification2DLookAt{self})
}
func (self methodsSkeletonModification2DLookAt) SetBoneIndex(bone_idx int64) {
	self.Runtime.SkeletonModification2DLookAt_set_bone_index(SkeletonModification2DLookAt{self}, bone_idx)
}
func (self methodsSkeletonModification2DLookAt) GetBoneIndex() int64 {
	return self.Runtime.SkeletonModification2DLookAt_get_bone_index(SkeletonModification2DLookAt{self})
}
func (self methodsSkeletonModification2DLookAt) SetTargetNode(target_nodepath NodePath) {
	self.Runtime.SkeletonModification2DLookAt_set_target_node(SkeletonModification2DLookAt{self}, target_nodepath)
}
func (self methodsSkeletonModification2DLookAt) GetTargetNode() NodePath {
	return self.Runtime.SkeletonModification2DLookAt_get_target_node(SkeletonModification2DLookAt{self})
}
func (self methodsSkeletonModification2DLookAt) SetAdditionalRotation(rotation Float) {
	self.Runtime.SkeletonModification2DLookAt_set_additional_rotation(SkeletonModification2DLookAt{self}, rotation)
}
func (self methodsSkeletonModification2DLookAt) GetAdditionalRotation() Float {
	return self.Runtime.SkeletonModification2DLookAt_get_additional_rotation(SkeletonModification2DLookAt{self})
}
func (self methodsSkeletonModification2DLookAt) SetEnableConstraint(enable_constraint bool) {
	self.Runtime.SkeletonModification2DLookAt_set_enable_constraint(SkeletonModification2DLookAt{self}, enable_constraint)
}
func (self methodsSkeletonModification2DLookAt) GetEnableConstraint() bool {
	return self.Runtime.SkeletonModification2DLookAt_get_enable_constraint(SkeletonModification2DLookAt{self})
}
func (self methodsSkeletonModification2DLookAt) SetConstraintAngleMin(angle_min Float) {
	self.Runtime.SkeletonModification2DLookAt_set_constraint_angle_min(SkeletonModification2DLookAt{self}, angle_min)
}
func (self methodsSkeletonModification2DLookAt) GetConstraintAngleMin() Float {
	return self.Runtime.SkeletonModification2DLookAt_get_constraint_angle_min(SkeletonModification2DLookAt{self})
}
func (self methodsSkeletonModification2DLookAt) SetConstraintAngleMax(angle_max Float) {
	self.Runtime.SkeletonModification2DLookAt_set_constraint_angle_max(SkeletonModification2DLookAt{self}, angle_max)
}
func (self methodsSkeletonModification2DLookAt) GetConstraintAngleMax() Float {
	return self.Runtime.SkeletonModification2DLookAt_get_constraint_angle_max(SkeletonModification2DLookAt{self})
}
func (self methodsSkeletonModification2DLookAt) SetConstraintAngleInvert(invert bool) {
	self.Runtime.SkeletonModification2DLookAt_set_constraint_angle_invert(SkeletonModification2DLookAt{self}, invert)
}
func (self methodsSkeletonModification2DLookAt) GetConstraintAngleInvert() bool {
	return self.Runtime.SkeletonModification2DLookAt_get_constraint_angle_invert(SkeletonModification2DLookAt{self})
}

type methodsSkeletonModification2DPhysicalBones struct {
	_ [0]*methodsSkeletonModification2DPhysicalBones
	class
}

func (self SkeletonModification2DPhysicalBones) SkeletonModification2D() SkeletonModification2D {
	var parent SkeletonModification2D
	parent.class = self.class
	return parent
}
func (self methodsSkeletonModification2DPhysicalBones) SetPhysicalBoneChainLength(length int64) {
	self.Runtime.SkeletonModification2DPhysicalBones_set_physical_bone_chain_length(SkeletonModification2DPhysicalBones{self}, length)
}
func (self methodsSkeletonModification2DPhysicalBones) GetPhysicalBoneChainLength() int64 {
	return self.Runtime.SkeletonModification2DPhysicalBones_get_physical_bone_chain_length(SkeletonModification2DPhysicalBones{self})
}
func (self methodsSkeletonModification2DPhysicalBones) SetPhysicalBoneNode(joint_idx int64, physicalbone2d_node NodePath) {
	self.Runtime.SkeletonModification2DPhysicalBones_set_physical_bone_node(SkeletonModification2DPhysicalBones{self}, joint_idx, physicalbone2d_node)
}
func (self methodsSkeletonModification2DPhysicalBones) GetPhysicalBoneNode(joint_idx int64) NodePath {
	return self.Runtime.SkeletonModification2DPhysicalBones_get_physical_bone_node(SkeletonModification2DPhysicalBones{self}, joint_idx)
}
func (self methodsSkeletonModification2DPhysicalBones) FetchPhysicalBones() {
	self.Runtime.SkeletonModification2DPhysicalBones_fetch_physical_bones(SkeletonModification2DPhysicalBones{self})
}
func (self methodsSkeletonModification2DPhysicalBones) StartSimulation(bones ArrayOf[string]) {
	self.Runtime.SkeletonModification2DPhysicalBones_start_simulation(SkeletonModification2DPhysicalBones{self}, bones)
}
func (self methodsSkeletonModification2DPhysicalBones) StopSimulation(bones ArrayOf[string]) {
	self.Runtime.SkeletonModification2DPhysicalBones_stop_simulation(SkeletonModification2DPhysicalBones{self}, bones)
}

type methodsSkeletonModification2DStackHolder struct {
	_ [0]*methodsSkeletonModification2DStackHolder
	class
}

func (self SkeletonModification2DStackHolder) SkeletonModification2D() SkeletonModification2D {
	var parent SkeletonModification2D
	parent.class = self.class
	return parent
}
func (self methodsSkeletonModification2DStackHolder) SetHeldModificationStack(held_modification_stack SkeletonModificationStack2D) {
	self.Runtime.SkeletonModification2DStackHolder_set_held_modification_stack(SkeletonModification2DStackHolder{self}, held_modification_stack)
}
func (self methodsSkeletonModification2DStackHolder) GetHeldModificationStack() SkeletonModificationStack2D {
	return self.Runtime.SkeletonModification2DStackHolder_get_held_modification_stack(SkeletonModification2DStackHolder{self})
}

type methodsSkeletonModification2DTwoBoneIK struct {
	_ [0]*methodsSkeletonModification2DTwoBoneIK
	class
}

func (self SkeletonModification2DTwoBoneIK) SkeletonModification2D() SkeletonModification2D {
	var parent SkeletonModification2D
	parent.class = self.class
	return parent
}
func (self methodsSkeletonModification2DTwoBoneIK) SetTargetNode(target_nodepath NodePath) {
	self.Runtime.SkeletonModification2DTwoBoneIK_set_target_node(SkeletonModification2DTwoBoneIK{self}, target_nodepath)
}
func (self methodsSkeletonModification2DTwoBoneIK) GetTargetNode() NodePath {
	return self.Runtime.SkeletonModification2DTwoBoneIK_get_target_node(SkeletonModification2DTwoBoneIK{self})
}
func (self methodsSkeletonModification2DTwoBoneIK) SetTargetMinimumDistance(minimum_distance Float) {
	self.Runtime.SkeletonModification2DTwoBoneIK_set_target_minimum_distance(SkeletonModification2DTwoBoneIK{self}, minimum_distance)
}
func (self methodsSkeletonModification2DTwoBoneIK) GetTargetMinimumDistance() Float {
	return self.Runtime.SkeletonModification2DTwoBoneIK_get_target_minimum_distance(SkeletonModification2DTwoBoneIK{self})
}
func (self methodsSkeletonModification2DTwoBoneIK) SetTargetMaximumDistance(maximum_distance Float) {
	self.Runtime.SkeletonModification2DTwoBoneIK_set_target_maximum_distance(SkeletonModification2DTwoBoneIK{self}, maximum_distance)
}
func (self methodsSkeletonModification2DTwoBoneIK) GetTargetMaximumDistance() Float {
	return self.Runtime.SkeletonModification2DTwoBoneIK_get_target_maximum_distance(SkeletonModification2DTwoBoneIK{self})
}
func (self methodsSkeletonModification2DTwoBoneIK) SetFlipBendDirection(flip_direction bool) {
	self.Runtime.SkeletonModification2DTwoBoneIK_set_flip_bend_direction(SkeletonModification2DTwoBoneIK{self}, flip_direction)
}
func (self methodsSkeletonModification2DTwoBoneIK) GetFlipBendDirection() bool {
	return self.Runtime.SkeletonModification2DTwoBoneIK_get_flip_bend_direction(SkeletonModification2DTwoBoneIK{self})
}
func (self methodsSkeletonModification2DTwoBoneIK) SetJointOneBone2dNode(bone2d_node NodePath) {
	self.Runtime.SkeletonModification2DTwoBoneIK_set_joint_one_bone2d_node(SkeletonModification2DTwoBoneIK{self}, bone2d_node)
}
func (self methodsSkeletonModification2DTwoBoneIK) GetJointOneBone2dNode() NodePath {
	return self.Runtime.SkeletonModification2DTwoBoneIK_get_joint_one_bone2d_node(SkeletonModification2DTwoBoneIK{self})
}
func (self methodsSkeletonModification2DTwoBoneIK) SetJointOneBoneIdx(bone_idx int64) {
	self.Runtime.SkeletonModification2DTwoBoneIK_set_joint_one_bone_idx(SkeletonModification2DTwoBoneIK{self}, bone_idx)
}
func (self methodsSkeletonModification2DTwoBoneIK) GetJointOneBoneIdx() int64 {
	return self.Runtime.SkeletonModification2DTwoBoneIK_get_joint_one_bone_idx(SkeletonModification2DTwoBoneIK{self})
}
func (self methodsSkeletonModification2DTwoBoneIK) SetJointTwoBone2dNode(bone2d_node NodePath) {
	self.Runtime.SkeletonModification2DTwoBoneIK_set_joint_two_bone2d_node(SkeletonModification2DTwoBoneIK{self}, bone2d_node)
}
func (self methodsSkeletonModification2DTwoBoneIK) GetJointTwoBone2dNode() NodePath {
	return self.Runtime.SkeletonModification2DTwoBoneIK_get_joint_two_bone2d_node(SkeletonModification2DTwoBoneIK{self})
}
func (self methodsSkeletonModification2DTwoBoneIK) SetJointTwoBoneIdx(bone_idx int64) {
	self.Runtime.SkeletonModification2DTwoBoneIK_set_joint_two_bone_idx(SkeletonModification2DTwoBoneIK{self}, bone_idx)
}
func (self methodsSkeletonModification2DTwoBoneIK) GetJointTwoBoneIdx() int64 {
	return self.Runtime.SkeletonModification2DTwoBoneIK_get_joint_two_bone_idx(SkeletonModification2DTwoBoneIK{self})
}

type methodsSkeletonModificationStack2D struct {
	_ [0]*methodsSkeletonModificationStack2D
	class
}

func (self SkeletonModificationStack2D) Resource() Resource {
	var parent Resource
	parent.class = self.class
	return parent
}
func (self methodsSkeletonModificationStack2D) Setup() {
	self.Runtime.SkeletonModificationStack2D_setup(SkeletonModificationStack2D{self})
}
func (self methodsSkeletonModificationStack2D) Execute(delta Float, execution_mode int64) {
	self.Runtime.SkeletonModificationStack2D_execute(SkeletonModificationStack2D{self}, delta, execution_mode)
}
func (self methodsSkeletonModificationStack2D) EnableAllModifications(enabled bool) {
	self.Runtime.SkeletonModificationStack2D_enable_all_modifications(SkeletonModificationStack2D{self}, enabled)
}
func (self methodsSkeletonModificationStack2D) GetModification(mod_idx int64) SkeletonModification2D {
	return self.Runtime.SkeletonModificationStack2D_get_modification(SkeletonModificationStack2D{self}, mod_idx)
}
func (self methodsSkeletonModificationStack2D) AddModification(modification SkeletonModification2D) {
	self.Runtime.SkeletonModificationStack2D_add_modification(SkeletonModificationStack2D{self}, modification)
}
func (self methodsSkeletonModificationStack2D) DeleteModification(mod_idx int64) {
	self.Runtime.SkeletonModificationStack2D_delete_modification(SkeletonModificationStack2D{self}, mod_idx)
}
func (self methodsSkeletonModificationStack2D) SetModification(mod_idx int64, modification SkeletonModification2D) {
	self.Runtime.SkeletonModificationStack2D_set_modification(SkeletonModificationStack2D{self}, mod_idx, modification)
}
func (self methodsSkeletonModificationStack2D) SetModificationCount(count int64) {
	self.Runtime.SkeletonModificationStack2D_set_modification_count(SkeletonModificationStack2D{self}, count)
}
func (self methodsSkeletonModificationStack2D) GetModificationCount() int64 {
	return self.Runtime.SkeletonModificationStack2D_get_modification_count(SkeletonModificationStack2D{self})
}
func (self methodsSkeletonModificationStack2D) GetIsSetup() bool {
	return self.Runtime.SkeletonModificationStack2D_get_is_setup(SkeletonModificationStack2D{self})
}
func (self methodsSkeletonModificationStack2D) SetEnabled(enabled bool) {
	self.Runtime.SkeletonModificationStack2D_set_enabled(SkeletonModificationStack2D{self}, enabled)
}
func (self methodsSkeletonModificationStack2D) GetEnabled() bool {
	return self.Runtime.SkeletonModificationStack2D_get_enabled(SkeletonModificationStack2D{self})
}
func (self methodsSkeletonModificationStack2D) SetStrength(strength Float) {
	self.Runtime.SkeletonModificationStack2D_set_strength(SkeletonModificationStack2D{self}, strength)
}
func (self methodsSkeletonModificationStack2D) GetStrength() Float {
	return self.Runtime.SkeletonModificationStack2D_get_strength(SkeletonModificationStack2D{self})
}
func (self methodsSkeletonModificationStack2D) GetSkeleton() Skeleton2D {
	return self.Runtime.SkeletonModificationStack2D_get_skeleton(SkeletonModificationStack2D{self})
}

type methodsSkeletonProfile struct {
	_ [0]*methodsSkeletonProfile
	class
}

func (self SkeletonProfile) Resource() Resource {
	var parent Resource
	parent.class = self.class
	return parent
}
func (self methodsSkeletonProfile) SetRootBone(bone_name string) {
	self.Runtime.SkeletonProfile_set_root_bone(SkeletonProfile{self}, bone_name)
}
func (self methodsSkeletonProfile) GetRootBone() string {
	return self.Runtime.SkeletonProfile_get_root_bone(SkeletonProfile{self})
}
func (self methodsSkeletonProfile) SetScaleBaseBone(bone_name string) {
	self.Runtime.SkeletonProfile_set_scale_base_bone(SkeletonProfile{self}, bone_name)
}
func (self methodsSkeletonProfile) GetScaleBaseBone() string {
	return self.Runtime.SkeletonProfile_get_scale_base_bone(SkeletonProfile{self})
}
func (self methodsSkeletonProfile) SetGroupSize(size int64) {
	self.Runtime.SkeletonProfile_set_group_size(SkeletonProfile{self}, size)
}
func (self methodsSkeletonProfile) GetGroupSize() int64 {
	return self.Runtime.SkeletonProfile_get_group_size(SkeletonProfile{self})
}
func (self methodsSkeletonProfile) GetGroupName(group_idx int64) string {
	return self.Runtime.SkeletonProfile_get_group_name(SkeletonProfile{self}, group_idx)
}
func (self methodsSkeletonProfile) SetGroupName(group_idx int64, group_name string) {
	self.Runtime.SkeletonProfile_set_group_name(SkeletonProfile{self}, group_idx, group_name)
}
func (self methodsSkeletonProfile) GetTexture(group_idx int64) Texture2D {
	return self.Runtime.SkeletonProfile_get_texture(SkeletonProfile{self}, group_idx)
}
func (self methodsSkeletonProfile) SetTexture(group_idx int64, texture Texture2D) {
	self.Runtime.SkeletonProfile_set_texture(SkeletonProfile{self}, group_idx, texture)
}
func (self methodsSkeletonProfile) SetBoneSize(size int64) {
	self.Runtime.SkeletonProfile_set_bone_size(SkeletonProfile{self}, size)
}
func (self methodsSkeletonProfile) GetBoneSize() int64 {
	return self.Runtime.SkeletonProfile_get_bone_size(SkeletonProfile{self})
}
func (self methodsSkeletonProfile) FindBone(bone_name string) int64 {
	return self.Runtime.SkeletonProfile_find_bone(SkeletonProfile{self}, bone_name)
}
func (self methodsSkeletonProfile) GetBoneName(bone_idx int64) string {
	return self.Runtime.SkeletonProfile_get_bone_name(SkeletonProfile{self}, bone_idx)
}
func (self methodsSkeletonProfile) SetBoneName(bone_idx int64, bone_name string) {
	self.Runtime.SkeletonProfile_set_bone_name(SkeletonProfile{self}, bone_idx, bone_name)
}
func (self methodsSkeletonProfile) GetBoneParent(bone_idx int64) string {
	return self.Runtime.SkeletonProfile_get_bone_parent(SkeletonProfile{self}, bone_idx)
}
func (self methodsSkeletonProfile) SetBoneParent(bone_idx int64, bone_parent string) {
	self.Runtime.SkeletonProfile_set_bone_parent(SkeletonProfile{self}, bone_idx, bone_parent)
}
func (self methodsSkeletonProfile) GetTailDirection(bone_idx int64) SkeletonProfileTailDirection {
	return self.Runtime.SkeletonProfile_get_tail_direction(SkeletonProfile{self}, bone_idx)
}
func (self methodsSkeletonProfile) SetTailDirection(bone_idx int64, tail_direction SkeletonProfileTailDirection) {
	self.Runtime.SkeletonProfile_set_tail_direction(SkeletonProfile{self}, bone_idx, tail_direction)
}
func (self methodsSkeletonProfile) GetBoneTail(bone_idx int64) string {
	return self.Runtime.SkeletonProfile_get_bone_tail(SkeletonProfile{self}, bone_idx)
}
func (self methodsSkeletonProfile) SetBoneTail(bone_idx int64, bone_tail string) {
	self.Runtime.SkeletonProfile_set_bone_tail(SkeletonProfile{self}, bone_idx, bone_tail)
}
func (self methodsSkeletonProfile) GetReferencePose(bone_idx int64) Transform3D {
	return self.Runtime.SkeletonProfile_get_reference_pose(SkeletonProfile{self}, bone_idx)
}
func (self methodsSkeletonProfile) SetReferencePose(bone_idx int64, bone_name Transform3D) {
	self.Runtime.SkeletonProfile_set_reference_pose(SkeletonProfile{self}, bone_idx, bone_name)
}
func (self methodsSkeletonProfile) GetHandleOffset(bone_idx int64) Vector2 {
	return self.Runtime.SkeletonProfile_get_handle_offset(SkeletonProfile{self}, bone_idx)
}
func (self methodsSkeletonProfile) SetHandleOffset(bone_idx int64, handle_offset Vector2) {
	self.Runtime.SkeletonProfile_set_handle_offset(SkeletonProfile{self}, bone_idx, handle_offset)
}
func (self methodsSkeletonProfile) GetGroup(bone_idx int64) string {
	return self.Runtime.SkeletonProfile_get_group(SkeletonProfile{self}, bone_idx)
}
func (self methodsSkeletonProfile) SetGroup(bone_idx int64, group string) {
	self.Runtime.SkeletonProfile_set_group(SkeletonProfile{self}, bone_idx, group)
}

type methodsSkeletonProfileHumanoid struct {
	_ [0]*methodsSkeletonProfileHumanoid
	class
}

func (self SkeletonProfileHumanoid) SkeletonProfile() SkeletonProfile {
	var parent SkeletonProfile
	parent.class = self.class
	return parent
}

type methodsSkin struct {
	_ [0]*methodsSkin
	class
}

func (self Skin) Resource() Resource { var parent Resource; parent.class = self.class; return parent }
func (self methodsSkin) SetBindCount(bind_count int64) {
	self.Runtime.Skin_set_bind_count(Skin{self}, bind_count)
}
func (self methodsSkin) GetBindCount() int64 {
	return self.Runtime.Skin_get_bind_count(Skin{self})
}
func (self methodsSkin) AddBind(bone int64, pose Transform3D) {
	self.Runtime.Skin_add_bind(Skin{self}, bone, pose)
}
func (self methodsSkin) AddNamedBind(name string, pose Transform3D) {
	self.Runtime.Skin_add_named_bind(Skin{self}, name, pose)
}
func (self methodsSkin) SetBindPose(bind_index int64, pose Transform3D) {
	self.Runtime.Skin_set_bind_pose(Skin{self}, bind_index, pose)
}
func (self methodsSkin) GetBindPose(bind_index int64) Transform3D {
	return self.Runtime.Skin_get_bind_pose(Skin{self}, bind_index)
}
func (self methodsSkin) SetBindName(bind_index int64, name string) {
	self.Runtime.Skin_set_bind_name(Skin{self}, bind_index, name)
}
func (self methodsSkin) GetBindName(bind_index int64) string {
	return self.Runtime.Skin_get_bind_name(Skin{self}, bind_index)
}
func (self methodsSkin) SetBindBone(bind_index int64, bone int64) {
	self.Runtime.Skin_set_bind_bone(Skin{self}, bind_index, bone)
}
func (self methodsSkin) GetBindBone(bind_index int64) int64 {
	return self.Runtime.Skin_get_bind_bone(Skin{self}, bind_index)
}
func (self methodsSkin) ClearBinds() {
	self.Runtime.Skin_clear_binds(Skin{self})
}

type methodsSkinReference struct {
	_ [0]*methodsSkinReference
	class
}

func (self SkinReference) RefCounted() RefCounted {
	var parent RefCounted
	parent.class = self.class
	return parent
}
func (self methodsSkinReference) GetSkeleton() RID {
	return self.Runtime.SkinReference_get_skeleton(SkinReference{self})
}
func (self methodsSkinReference) GetSkin() Skin {
	return self.Runtime.SkinReference_get_skin(SkinReference{self})
}

type methodsSky struct {
	_ [0]*methodsSky
	class
}

func (self Sky) Resource() Resource { var parent Resource; parent.class = self.class; return parent }
func (self methodsSky) SetRadianceSize(size SkyRadianceSize) {
	self.Runtime.Sky_set_radiance_size(Sky{self}, size)
}
func (self methodsSky) GetRadianceSize() SkyRadianceSize {
	return self.Runtime.Sky_get_radiance_size(Sky{self})
}
func (self methodsSky) SetProcessMode(mode SkyProcessMode) {
	self.Runtime.Sky_set_process_mode(Sky{self}, mode)
}
func (self methodsSky) GetProcessMode() SkyProcessMode {
	return self.Runtime.Sky_get_process_mode(Sky{self})
}
func (self methodsSky) SetMaterial(material Material) {
	self.Runtime.Sky_set_material(Sky{self}, material)
}
func (self methodsSky) GetMaterial() Material {
	return self.Runtime.Sky_get_material(Sky{self})
}

type methodsSlider struct {
	_ [0]*methodsSlider
	class
}

func (self Slider) Range() Range { var parent Range; parent.class = self.class; return parent }
func (self methodsSlider) SetTicks(count int64) {
	self.Runtime.Slider_set_ticks(Slider{self}, count)
}
func (self methodsSlider) GetTicks() int64 {
	return self.Runtime.Slider_get_ticks(Slider{self})
}
func (self methodsSlider) GetTicksOnBorders() bool {
	return self.Runtime.Slider_get_ticks_on_borders(Slider{self})
}
func (self methodsSlider) SetTicksOnBorders(ticks_on_border bool) {
	self.Runtime.Slider_set_ticks_on_borders(Slider{self}, ticks_on_border)
}
func (self methodsSlider) SetEditable(editable bool) {
	self.Runtime.Slider_set_editable(Slider{self}, editable)
}
func (self methodsSlider) IsEditable() bool {
	return self.Runtime.Slider_is_editable(Slider{self})
}
func (self methodsSlider) SetScrollable(scrollable bool) {
	self.Runtime.Slider_set_scrollable(Slider{self}, scrollable)
}
func (self methodsSlider) IsScrollable() bool {
	return self.Runtime.Slider_is_scrollable(Slider{self})
}

type methodsSliderJoint3D struct {
	_ [0]*methodsSliderJoint3D
	class
}

func (self SliderJoint3D) Joint3D() Joint3D {
	var parent Joint3D
	parent.class = self.class
	return parent
}
func (self methodsSliderJoint3D) SetParam(param SliderJoint3DParam, value Float) {
	self.Runtime.SliderJoint3D_set_param(SliderJoint3D{self}, param, value)
}
func (self methodsSliderJoint3D) GetParam(param SliderJoint3DParam) Float {
	return self.Runtime.SliderJoint3D_get_param(SliderJoint3D{self}, param)
}

type methodsSoftBody3D struct {
	_ [0]*methodsSoftBody3D
	class
}

func (self SoftBody3D) MeshInstance3D() MeshInstance3D {
	var parent MeshInstance3D
	parent.class = self.class
	return parent
}
func (self methodsSoftBody3D) GetPhysicsRid() RID {
	return self.Runtime.SoftBody3D_get_physics_rid(SoftBody3D{self})
}
func (self methodsSoftBody3D) SetCollisionMask(collision_mask int64) {
	self.Runtime.SoftBody3D_set_collision_mask(SoftBody3D{self}, collision_mask)
}
func (self methodsSoftBody3D) GetCollisionMask() int64 {
	return self.Runtime.SoftBody3D_get_collision_mask(SoftBody3D{self})
}
func (self methodsSoftBody3D) SetCollisionLayer(collision_layer int64) {
	self.Runtime.SoftBody3D_set_collision_layer(SoftBody3D{self}, collision_layer)
}
func (self methodsSoftBody3D) GetCollisionLayer() int64 {
	return self.Runtime.SoftBody3D_get_collision_layer(SoftBody3D{self})
}
func (self methodsSoftBody3D) SetCollisionMaskValue(layer_number int64, value bool) {
	self.Runtime.SoftBody3D_set_collision_mask_value(SoftBody3D{self}, layer_number, value)
}
func (self methodsSoftBody3D) GetCollisionMaskValue(layer_number int64) bool {
	return self.Runtime.SoftBody3D_get_collision_mask_value(SoftBody3D{self}, layer_number)
}
func (self methodsSoftBody3D) SetCollisionLayerValue(layer_number int64, value bool) {
	self.Runtime.SoftBody3D_set_collision_layer_value(SoftBody3D{self}, layer_number, value)
}
func (self methodsSoftBody3D) GetCollisionLayerValue(layer_number int64) bool {
	return self.Runtime.SoftBody3D_get_collision_layer_value(SoftBody3D{self}, layer_number)
}
func (self methodsSoftBody3D) SetParentCollisionIgnore(parent_collision_ignore NodePath) {
	self.Runtime.SoftBody3D_set_parent_collision_ignore(SoftBody3D{self}, parent_collision_ignore)
}
func (self methodsSoftBody3D) GetParentCollisionIgnore() NodePath {
	return self.Runtime.SoftBody3D_get_parent_collision_ignore(SoftBody3D{self})
}
func (self methodsSoftBody3D) SetDisableMode(mode SoftBody3DDisableMode) {
	self.Runtime.SoftBody3D_set_disable_mode(SoftBody3D{self}, mode)
}
func (self methodsSoftBody3D) GetDisableMode() SoftBody3DDisableMode {
	return self.Runtime.SoftBody3D_get_disable_mode(SoftBody3D{self})
}
func (self methodsSoftBody3D) GetCollisionExceptions() ArrayOf[PhysicsBody3D] {
	return self.Runtime.SoftBody3D_get_collision_exceptions(SoftBody3D{self})
}
func (self methodsSoftBody3D) AddCollisionExceptionWith(body Node) {
	self.Runtime.SoftBody3D_add_collision_exception_with(SoftBody3D{self}, body)
}
func (self methodsSoftBody3D) RemoveCollisionExceptionWith(body Node) {
	self.Runtime.SoftBody3D_remove_collision_exception_with(SoftBody3D{self}, body)
}
func (self methodsSoftBody3D) SetSimulationPrecision(simulation_precision int64) {
	self.Runtime.SoftBody3D_set_simulation_precision(SoftBody3D{self}, simulation_precision)
}
func (self methodsSoftBody3D) GetSimulationPrecision() int64 {
	return self.Runtime.SoftBody3D_get_simulation_precision(SoftBody3D{self})
}
func (self methodsSoftBody3D) SetTotalMass(mass Float) {
	self.Runtime.SoftBody3D_set_total_mass(SoftBody3D{self}, mass)
}
func (self methodsSoftBody3D) GetTotalMass() Float {
	return self.Runtime.SoftBody3D_get_total_mass(SoftBody3D{self})
}
func (self methodsSoftBody3D) SetLinearStiffness(linear_stiffness Float) {
	self.Runtime.SoftBody3D_set_linear_stiffness(SoftBody3D{self}, linear_stiffness)
}
func (self methodsSoftBody3D) GetLinearStiffness() Float {
	return self.Runtime.SoftBody3D_get_linear_stiffness(SoftBody3D{self})
}
func (self methodsSoftBody3D) SetPressureCoefficient(pressure_coefficient Float) {
	self.Runtime.SoftBody3D_set_pressure_coefficient(SoftBody3D{self}, pressure_coefficient)
}
func (self methodsSoftBody3D) GetPressureCoefficient() Float {
	return self.Runtime.SoftBody3D_get_pressure_coefficient(SoftBody3D{self})
}
func (self methodsSoftBody3D) SetDampingCoefficient(damping_coefficient Float) {
	self.Runtime.SoftBody3D_set_damping_coefficient(SoftBody3D{self}, damping_coefficient)
}
func (self methodsSoftBody3D) GetDampingCoefficient() Float {
	return self.Runtime.SoftBody3D_get_damping_coefficient(SoftBody3D{self})
}
func (self methodsSoftBody3D) SetDragCoefficient(drag_coefficient Float) {
	self.Runtime.SoftBody3D_set_drag_coefficient(SoftBody3D{self}, drag_coefficient)
}
func (self methodsSoftBody3D) GetDragCoefficient() Float {
	return self.Runtime.SoftBody3D_get_drag_coefficient(SoftBody3D{self})
}
func (self methodsSoftBody3D) GetPointTransform(point_index int64) Vector3 {
	return self.Runtime.SoftBody3D_get_point_transform(SoftBody3D{self}, point_index)
}
func (self methodsSoftBody3D) SetPointPinned(point_index int64, pinned bool, attachment_path NodePath) {
	self.Runtime.SoftBody3D_set_point_pinned(SoftBody3D{self}, point_index, pinned, attachment_path)
}
func (self methodsSoftBody3D) IsPointPinned(point_index int64) bool {
	return self.Runtime.SoftBody3D_is_point_pinned(SoftBody3D{self}, point_index)
}
func (self methodsSoftBody3D) SetRayPickable(ray_pickable bool) {
	self.Runtime.SoftBody3D_set_ray_pickable(SoftBody3D{self}, ray_pickable)
}
func (self methodsSoftBody3D) IsRayPickable() bool {
	return self.Runtime.SoftBody3D_is_ray_pickable(SoftBody3D{self})
}

type methodsSphereMesh struct {
	_ [0]*methodsSphereMesh
	class
}

func (self SphereMesh) PrimitiveMesh() PrimitiveMesh {
	var parent PrimitiveMesh
	parent.class = self.class
	return parent
}
func (self methodsSphereMesh) SetRadius(radius Float) {
	self.Runtime.SphereMesh_set_radius(SphereMesh{self}, radius)
}
func (self methodsSphereMesh) GetRadius() Float {
	return self.Runtime.SphereMesh_get_radius(SphereMesh{self})
}
func (self methodsSphereMesh) SetHeight(height Float) {
	self.Runtime.SphereMesh_set_height(SphereMesh{self}, height)
}
func (self methodsSphereMesh) GetHeight() Float {
	return self.Runtime.SphereMesh_get_height(SphereMesh{self})
}
func (self methodsSphereMesh) SetRadialSegments(radial_segments int64) {
	self.Runtime.SphereMesh_set_radial_segments(SphereMesh{self}, radial_segments)
}
func (self methodsSphereMesh) GetRadialSegments() int64 {
	return self.Runtime.SphereMesh_get_radial_segments(SphereMesh{self})
}
func (self methodsSphereMesh) SetRings(rings int64) {
	self.Runtime.SphereMesh_set_rings(SphereMesh{self}, rings)
}
func (self methodsSphereMesh) GetRings() int64 {
	return self.Runtime.SphereMesh_get_rings(SphereMesh{self})
}
func (self methodsSphereMesh) SetIsHemisphere(is_hemisphere bool) {
	self.Runtime.SphereMesh_set_is_hemisphere(SphereMesh{self}, is_hemisphere)
}
func (self methodsSphereMesh) GetIsHemisphere() bool {
	return self.Runtime.SphereMesh_get_is_hemisphere(SphereMesh{self})
}

type methodsSphereOccluder3D struct {
	_ [0]*methodsSphereOccluder3D
	class
}

func (self SphereOccluder3D) Occluder3D() Occluder3D {
	var parent Occluder3D
	parent.class = self.class
	return parent
}
func (self methodsSphereOccluder3D) SetRadius(radius Float) {
	self.Runtime.SphereOccluder3D_set_radius(SphereOccluder3D{self}, radius)
}
func (self methodsSphereOccluder3D) GetRadius() Float {
	return self.Runtime.SphereOccluder3D_get_radius(SphereOccluder3D{self})
}

type methodsSphereShape3D struct {
	_ [0]*methodsSphereShape3D
	class
}

func (self SphereShape3D) Shape3D() Shape3D {
	var parent Shape3D
	parent.class = self.class
	return parent
}
func (self methodsSphereShape3D) SetRadius(radius Float) {
	self.Runtime.SphereShape3D_set_radius(SphereShape3D{self}, radius)
}
func (self methodsSphereShape3D) GetRadius() Float {
	return self.Runtime.SphereShape3D_get_radius(SphereShape3D{self})
}

type methodsSpinBox struct {
	_ [0]*methodsSpinBox
	class
}

func (self SpinBox) Range() Range { var parent Range; parent.class = self.class; return parent }
func (self methodsSpinBox) SetHorizontalAlignment(alignment HorizontalAlignment) {
	self.Runtime.SpinBox_set_horizontal_alignment(SpinBox{self}, alignment)
}
func (self methodsSpinBox) GetHorizontalAlignment() HorizontalAlignment {
	return self.Runtime.SpinBox_get_horizontal_alignment(SpinBox{self})
}
func (self methodsSpinBox) SetSuffix(suffix string) {
	self.Runtime.SpinBox_set_suffix(SpinBox{self}, suffix)
}
func (self methodsSpinBox) GetSuffix() string {
	return self.Runtime.SpinBox_get_suffix(SpinBox{self})
}
func (self methodsSpinBox) SetPrefix(prefix string) {
	self.Runtime.SpinBox_set_prefix(SpinBox{self}, prefix)
}
func (self methodsSpinBox) GetPrefix() string {
	return self.Runtime.SpinBox_get_prefix(SpinBox{self})
}
func (self methodsSpinBox) SetEditable(enabled bool) {
	self.Runtime.SpinBox_set_editable(SpinBox{self}, enabled)
}
func (self methodsSpinBox) SetCustomArrowStep(arrow_step Float) {
	self.Runtime.SpinBox_set_custom_arrow_step(SpinBox{self}, arrow_step)
}
func (self methodsSpinBox) GetCustomArrowStep() Float {
	return self.Runtime.SpinBox_get_custom_arrow_step(SpinBox{self})
}
func (self methodsSpinBox) IsEditable() bool {
	return self.Runtime.SpinBox_is_editable(SpinBox{self})
}
func (self methodsSpinBox) SetUpdateOnTextChanged(enabled bool) {
	self.Runtime.SpinBox_set_update_on_text_changed(SpinBox{self}, enabled)
}
func (self methodsSpinBox) GetUpdateOnTextChanged() bool {
	return self.Runtime.SpinBox_get_update_on_text_changed(SpinBox{self})
}
func (self methodsSpinBox) SetSelectAllOnFocus(enabled bool) {
	self.Runtime.SpinBox_set_select_all_on_focus(SpinBox{self}, enabled)
}
func (self methodsSpinBox) IsSelectAllOnFocus() bool {
	return self.Runtime.SpinBox_is_select_all_on_focus(SpinBox{self})
}
func (self methodsSpinBox) Apply() {
	self.Runtime.SpinBox_apply(SpinBox{self})
}
func (self methodsSpinBox) GetLineEdit() LineEdit {
	return self.Runtime.SpinBox_get_line_edit(SpinBox{self})
}

type methodsSplitContainer struct {
	_ [0]*methodsSplitContainer
	class
}

func (self SplitContainer) Container() Container {
	var parent Container
	parent.class = self.class
	return parent
}
func (self methodsSplitContainer) SetSplitOffset(offset int64) {
	self.Runtime.SplitContainer_set_split_offset(SplitContainer{self}, offset)
}
func (self methodsSplitContainer) GetSplitOffset() int64 {
	return self.Runtime.SplitContainer_get_split_offset(SplitContainer{self})
}
func (self methodsSplitContainer) ClampSplitOffset() {
	self.Runtime.SplitContainer_clamp_split_offset(SplitContainer{self})
}
func (self methodsSplitContainer) SetCollapsed(collapsed bool) {
	self.Runtime.SplitContainer_set_collapsed(SplitContainer{self}, collapsed)
}
func (self methodsSplitContainer) IsCollapsed() bool {
	return self.Runtime.SplitContainer_is_collapsed(SplitContainer{self})
}
func (self methodsSplitContainer) SetDraggerVisibility(mode SplitContainerDraggerVisibility) {
	self.Runtime.SplitContainer_set_dragger_visibility(SplitContainer{self}, mode)
}
func (self methodsSplitContainer) GetDraggerVisibility() SplitContainerDraggerVisibility {
	return self.Runtime.SplitContainer_get_dragger_visibility(SplitContainer{self})
}
func (self methodsSplitContainer) SetVertical(vertical bool) {
	self.Runtime.SplitContainer_set_vertical(SplitContainer{self}, vertical)
}
func (self methodsSplitContainer) IsVertical() bool {
	return self.Runtime.SplitContainer_is_vertical(SplitContainer{self})
}

type methodsSpotLight3D struct {
	_ [0]*methodsSpotLight3D
	class
}

func (self SpotLight3D) Light3D() Light3D {
	var parent Light3D
	parent.class = self.class
	return parent
}

type methodsSpringArm3D struct {
	_ [0]*methodsSpringArm3D
	class
}

func (self SpringArm3D) Node3D() Node3D { var parent Node3D; parent.class = self.class; return parent }
func (self methodsSpringArm3D) GetHitLength() Float {
	return self.Runtime.SpringArm3D_get_hit_length(SpringArm3D{self})
}
func (self methodsSpringArm3D) SetLength(length Float) {
	self.Runtime.SpringArm3D_set_length(SpringArm3D{self}, length)
}
func (self methodsSpringArm3D) GetLength() Float {
	return self.Runtime.SpringArm3D_get_length(SpringArm3D{self})
}
func (self methodsSpringArm3D) SetShape(shape Shape3D) {
	self.Runtime.SpringArm3D_set_shape(SpringArm3D{self}, shape)
}
func (self methodsSpringArm3D) GetShape() Shape3D {
	return self.Runtime.SpringArm3D_get_shape(SpringArm3D{self})
}
func (self methodsSpringArm3D) AddExcludedObject(RID RID) {
	self.Runtime.SpringArm3D_add_excluded_object(SpringArm3D{self}, RID)
}
func (self methodsSpringArm3D) RemoveExcludedObject(RID RID) bool {
	return self.Runtime.SpringArm3D_remove_excluded_object(SpringArm3D{self}, RID)
}
func (self methodsSpringArm3D) ClearExcludedObjects() {
	self.Runtime.SpringArm3D_clear_excluded_objects(SpringArm3D{self})
}
func (self methodsSpringArm3D) SetCollisionMask(mask int64) {
	self.Runtime.SpringArm3D_set_collision_mask(SpringArm3D{self}, mask)
}
func (self methodsSpringArm3D) GetCollisionMask() int64 {
	return self.Runtime.SpringArm3D_get_collision_mask(SpringArm3D{self})
}
func (self methodsSpringArm3D) SetMargin(margin Float) {
	self.Runtime.SpringArm3D_set_margin(SpringArm3D{self}, margin)
}
func (self methodsSpringArm3D) GetMargin() Float {
	return self.Runtime.SpringArm3D_get_margin(SpringArm3D{self})
}

type methodsSprite2D struct {
	_ [0]*methodsSprite2D
	class
}

func (self Sprite2D) Node2D() Node2D { var parent Node2D; parent.class = self.class; return parent }
func (self methodsSprite2D) SetTexture(texture Texture2D) {
	self.Runtime.Sprite2D_set_texture(Sprite2D{self}, texture)
}
func (self methodsSprite2D) GetTexture() Texture2D {
	return self.Runtime.Sprite2D_get_texture(Sprite2D{self})
}
func (self methodsSprite2D) SetCentered(centered bool) {
	self.Runtime.Sprite2D_set_centered(Sprite2D{self}, centered)
}
func (self methodsSprite2D) IsCentered() bool {
	return self.Runtime.Sprite2D_is_centered(Sprite2D{self})
}
func (self methodsSprite2D) SetOffset(offset Vector2) {
	self.Runtime.Sprite2D_set_offset(Sprite2D{self}, offset)
}
func (self methodsSprite2D) GetOffset() Vector2 {
	return self.Runtime.Sprite2D_get_offset(Sprite2D{self})
}
func (self methodsSprite2D) SetFlipH(flip_h bool) {
	self.Runtime.Sprite2D_set_flip_h(Sprite2D{self}, flip_h)
}
func (self methodsSprite2D) IsFlippedH() bool {
	return self.Runtime.Sprite2D_is_flipped_h(Sprite2D{self})
}
func (self methodsSprite2D) SetFlipV(flip_v bool) {
	self.Runtime.Sprite2D_set_flip_v(Sprite2D{self}, flip_v)
}
func (self methodsSprite2D) IsFlippedV() bool {
	return self.Runtime.Sprite2D_is_flipped_v(Sprite2D{self})
}
func (self methodsSprite2D) SetRegionEnabled(enabled bool) {
	self.Runtime.Sprite2D_set_region_enabled(Sprite2D{self}, enabled)
}
func (self methodsSprite2D) IsRegionEnabled() bool {
	return self.Runtime.Sprite2D_is_region_enabled(Sprite2D{self})
}
func (self methodsSprite2D) IsPixelOpaque(pos Vector2) bool {
	return self.Runtime.Sprite2D_is_pixel_opaque(Sprite2D{self}, pos)
}
func (self methodsSprite2D) SetRegionRect(rect Rect2) {
	self.Runtime.Sprite2D_set_region_rect(Sprite2D{self}, rect)
}
func (self methodsSprite2D) GetRegionRect() Rect2 {
	return self.Runtime.Sprite2D_get_region_rect(Sprite2D{self})
}
func (self methodsSprite2D) SetRegionFilterClipEnabled(enabled bool) {
	self.Runtime.Sprite2D_set_region_filter_clip_enabled(Sprite2D{self}, enabled)
}
func (self methodsSprite2D) IsRegionFilterClipEnabled() bool {
	return self.Runtime.Sprite2D_is_region_filter_clip_enabled(Sprite2D{self})
}
func (self methodsSprite2D) SetFrame(frame int64) {
	self.Runtime.Sprite2D_set_frame(Sprite2D{self}, frame)
}
func (self methodsSprite2D) GetFrame() int64 {
	return self.Runtime.Sprite2D_get_frame(Sprite2D{self})
}
func (self methodsSprite2D) SetFrameCoords(coords Vector2i) {
	self.Runtime.Sprite2D_set_frame_coords(Sprite2D{self}, coords)
}
func (self methodsSprite2D) GetFrameCoords() Vector2i {
	return self.Runtime.Sprite2D_get_frame_coords(Sprite2D{self})
}
func (self methodsSprite2D) SetVframes(vframes int64) {
	self.Runtime.Sprite2D_set_vframes(Sprite2D{self}, vframes)
}
func (self methodsSprite2D) GetVframes() int64 {
	return self.Runtime.Sprite2D_get_vframes(Sprite2D{self})
}
func (self methodsSprite2D) SetHframes(hframes int64) {
	self.Runtime.Sprite2D_set_hframes(Sprite2D{self}, hframes)
}
func (self methodsSprite2D) GetHframes() int64 {
	return self.Runtime.Sprite2D_get_hframes(Sprite2D{self})
}
func (self methodsSprite2D) GetRect() Rect2 {
	return self.Runtime.Sprite2D_get_rect(Sprite2D{self})
}

type methodsSprite3D struct {
	_ [0]*methodsSprite3D
	class
}

func (self Sprite3D) SpriteBase3D() SpriteBase3D {
	var parent SpriteBase3D
	parent.class = self.class
	return parent
}
func (self methodsSprite3D) SetTexture(texture Texture2D) {
	self.Runtime.Sprite3D_set_texture(Sprite3D{self}, texture)
}
func (self methodsSprite3D) GetTexture() Texture2D {
	return self.Runtime.Sprite3D_get_texture(Sprite3D{self})
}
func (self methodsSprite3D) SetRegionEnabled(enabled bool) {
	self.Runtime.Sprite3D_set_region_enabled(Sprite3D{self}, enabled)
}
func (self methodsSprite3D) IsRegionEnabled() bool {
	return self.Runtime.Sprite3D_is_region_enabled(Sprite3D{self})
}
func (self methodsSprite3D) SetRegionRect(rect Rect2) {
	self.Runtime.Sprite3D_set_region_rect(Sprite3D{self}, rect)
}
func (self methodsSprite3D) GetRegionRect() Rect2 {
	return self.Runtime.Sprite3D_get_region_rect(Sprite3D{self})
}
func (self methodsSprite3D) SetFrame(frame int64) {
	self.Runtime.Sprite3D_set_frame(Sprite3D{self}, frame)
}
func (self methodsSprite3D) GetFrame() int64 {
	return self.Runtime.Sprite3D_get_frame(Sprite3D{self})
}
func (self methodsSprite3D) SetFrameCoords(coords Vector2i) {
	self.Runtime.Sprite3D_set_frame_coords(Sprite3D{self}, coords)
}
func (self methodsSprite3D) GetFrameCoords() Vector2i {
	return self.Runtime.Sprite3D_get_frame_coords(Sprite3D{self})
}
func (self methodsSprite3D) SetVframes(vframes int64) {
	self.Runtime.Sprite3D_set_vframes(Sprite3D{self}, vframes)
}
func (self methodsSprite3D) GetVframes() int64 {
	return self.Runtime.Sprite3D_get_vframes(Sprite3D{self})
}
func (self methodsSprite3D) SetHframes(hframes int64) {
	self.Runtime.Sprite3D_set_hframes(Sprite3D{self}, hframes)
}
func (self methodsSprite3D) GetHframes() int64 {
	return self.Runtime.Sprite3D_get_hframes(Sprite3D{self})
}

type methodsSpriteBase3D struct {
	_ [0]*methodsSpriteBase3D
	class
}

func (self SpriteBase3D) GeometryInstance3D() GeometryInstance3D {
	var parent GeometryInstance3D
	parent.class = self.class
	return parent
}
func (self methodsSpriteBase3D) SetCentered(centered bool) {
	self.Runtime.SpriteBase3D_set_centered(SpriteBase3D{self}, centered)
}
func (self methodsSpriteBase3D) IsCentered() bool {
	return self.Runtime.SpriteBase3D_is_centered(SpriteBase3D{self})
}
func (self methodsSpriteBase3D) SetOffset(offset Vector2) {
	self.Runtime.SpriteBase3D_set_offset(SpriteBase3D{self}, offset)
}
func (self methodsSpriteBase3D) GetOffset() Vector2 {
	return self.Runtime.SpriteBase3D_get_offset(SpriteBase3D{self})
}
func (self methodsSpriteBase3D) SetFlipH(flip_h bool) {
	self.Runtime.SpriteBase3D_set_flip_h(SpriteBase3D{self}, flip_h)
}
func (self methodsSpriteBase3D) IsFlippedH() bool {
	return self.Runtime.SpriteBase3D_is_flipped_h(SpriteBase3D{self})
}
func (self methodsSpriteBase3D) SetFlipV(flip_v bool) {
	self.Runtime.SpriteBase3D_set_flip_v(SpriteBase3D{self}, flip_v)
}
func (self methodsSpriteBase3D) IsFlippedV() bool {
	return self.Runtime.SpriteBase3D_is_flipped_v(SpriteBase3D{self})
}
func (self methodsSpriteBase3D) SetModulate(modulate Color) {
	self.Runtime.SpriteBase3D_set_modulate(SpriteBase3D{self}, modulate)
}
func (self methodsSpriteBase3D) GetModulate() Color {
	return self.Runtime.SpriteBase3D_get_modulate(SpriteBase3D{self})
}
func (self methodsSpriteBase3D) SetRenderPriority(priority int64) {
	self.Runtime.SpriteBase3D_set_render_priority(SpriteBase3D{self}, priority)
}
func (self methodsSpriteBase3D) GetRenderPriority() int64 {
	return self.Runtime.SpriteBase3D_get_render_priority(SpriteBase3D{self})
}
func (self methodsSpriteBase3D) SetPixelSize(pixel_size Float) {
	self.Runtime.SpriteBase3D_set_pixel_size(SpriteBase3D{self}, pixel_size)
}
func (self methodsSpriteBase3D) GetPixelSize() Float {
	return self.Runtime.SpriteBase3D_get_pixel_size(SpriteBase3D{self})
}
func (self methodsSpriteBase3D) SetAxis(axis Vector3Axis) {
	self.Runtime.SpriteBase3D_set_axis(SpriteBase3D{self}, axis)
}
func (self methodsSpriteBase3D) GetAxis() Vector3Axis {
	return self.Runtime.SpriteBase3D_get_axis(SpriteBase3D{self})
}
func (self methodsSpriteBase3D) SetDrawFlag(flag SpriteBase3DDrawFlags, enabled bool) {
	self.Runtime.SpriteBase3D_set_draw_flag(SpriteBase3D{self}, flag, enabled)
}
func (self methodsSpriteBase3D) GetDrawFlag(flag SpriteBase3DDrawFlags) bool {
	return self.Runtime.SpriteBase3D_get_draw_flag(SpriteBase3D{self}, flag)
}
func (self methodsSpriteBase3D) SetAlphaCutMode(mode SpriteBase3DAlphaCutMode) {
	self.Runtime.SpriteBase3D_set_alpha_cut_mode(SpriteBase3D{self}, mode)
}
func (self methodsSpriteBase3D) GetAlphaCutMode() SpriteBase3DAlphaCutMode {
	return self.Runtime.SpriteBase3D_get_alpha_cut_mode(SpriteBase3D{self})
}
func (self methodsSpriteBase3D) SetAlphaScissorThreshold(threshold Float) {
	self.Runtime.SpriteBase3D_set_alpha_scissor_threshold(SpriteBase3D{self}, threshold)
}
func (self methodsSpriteBase3D) GetAlphaScissorThreshold() Float {
	return self.Runtime.SpriteBase3D_get_alpha_scissor_threshold(SpriteBase3D{self})
}
func (self methodsSpriteBase3D) SetAlphaHashScale(threshold Float) {
	self.Runtime.SpriteBase3D_set_alpha_hash_scale(SpriteBase3D{self}, threshold)
}
func (self methodsSpriteBase3D) GetAlphaHashScale() Float {
	return self.Runtime.SpriteBase3D_get_alpha_hash_scale(SpriteBase3D{self})
}
func (self methodsSpriteBase3D) SetAlphaAntialiasing(alpha_aa BaseMaterial3DAlphaAntiAliasing) {
	self.Runtime.SpriteBase3D_set_alpha_antialiasing(SpriteBase3D{self}, alpha_aa)
}
func (self methodsSpriteBase3D) GetAlphaAntialiasing() BaseMaterial3DAlphaAntiAliasing {
	return self.Runtime.SpriteBase3D_get_alpha_antialiasing(SpriteBase3D{self})
}
func (self methodsSpriteBase3D) SetAlphaAntialiasingEdge(edge Float) {
	self.Runtime.SpriteBase3D_set_alpha_antialiasing_edge(SpriteBase3D{self}, edge)
}
func (self methodsSpriteBase3D) GetAlphaAntialiasingEdge() Float {
	return self.Runtime.SpriteBase3D_get_alpha_antialiasing_edge(SpriteBase3D{self})
}
func (self methodsSpriteBase3D) SetBillboardMode(mode BaseMaterial3DBillboardMode) {
	self.Runtime.SpriteBase3D_set_billboard_mode(SpriteBase3D{self}, mode)
}
func (self methodsSpriteBase3D) GetBillboardMode() BaseMaterial3DBillboardMode {
	return self.Runtime.SpriteBase3D_get_billboard_mode(SpriteBase3D{self})
}
func (self methodsSpriteBase3D) SetTextureFilter(mode BaseMaterial3DTextureFilter) {
	self.Runtime.SpriteBase3D_set_texture_filter(SpriteBase3D{self}, mode)
}
func (self methodsSpriteBase3D) GetTextureFilter() BaseMaterial3DTextureFilter {
	return self.Runtime.SpriteBase3D_get_texture_filter(SpriteBase3D{self})
}
func (self methodsSpriteBase3D) GetItemRect() Rect2 {
	return self.Runtime.SpriteBase3D_get_item_rect(SpriteBase3D{self})
}
func (self methodsSpriteBase3D) GenerateTriangleMesh() TriangleMesh {
	return self.Runtime.SpriteBase3D_generate_triangle_mesh(SpriteBase3D{self})
}

type methodsSpriteFrames struct {
	_ [0]*methodsSpriteFrames
	class
}

func (self SpriteFrames) Resource() Resource {
	var parent Resource
	parent.class = self.class
	return parent
}
func (self methodsSpriteFrames) AddAnimation(anim string) {
	self.Runtime.SpriteFrames_add_animation(SpriteFrames{self}, anim)
}
func (self methodsSpriteFrames) HasAnimation(anim string) bool {
	return self.Runtime.SpriteFrames_has_animation(SpriteFrames{self}, anim)
}
func (self methodsSpriteFrames) RemoveAnimation(anim string) {
	self.Runtime.SpriteFrames_remove_animation(SpriteFrames{self}, anim)
}
func (self methodsSpriteFrames) RenameAnimation(anim string, newname string) {
	self.Runtime.SpriteFrames_rename_animation(SpriteFrames{self}, anim, newname)
}
func (self methodsSpriteFrames) GetAnimationNames() PackedStringArray {
	return self.Runtime.SpriteFrames_get_animation_names(SpriteFrames{self})
}
func (self methodsSpriteFrames) SetAnimationSpeed(anim string, fps Float) {
	self.Runtime.SpriteFrames_set_animation_speed(SpriteFrames{self}, anim, fps)
}
func (self methodsSpriteFrames) GetAnimationSpeed(anim string) Float {
	return self.Runtime.SpriteFrames_get_animation_speed(SpriteFrames{self}, anim)
}
func (self methodsSpriteFrames) SetAnimationLoop(anim string, loop bool) {
	self.Runtime.SpriteFrames_set_animation_loop(SpriteFrames{self}, anim, loop)
}
func (self methodsSpriteFrames) GetAnimationLoop(anim string) bool {
	return self.Runtime.SpriteFrames_get_animation_loop(SpriteFrames{self}, anim)
}
func (self methodsSpriteFrames) AddFrame(anim string, texture Texture2D, duration Float, at_position int64) {
	self.Runtime.SpriteFrames_add_frame(SpriteFrames{self}, anim, texture, duration, at_position)
}
func (self methodsSpriteFrames) SetFrame(anim string, idx int64, texture Texture2D, duration Float) {
	self.Runtime.SpriteFrames_set_frame(SpriteFrames{self}, anim, idx, texture, duration)
}
func (self methodsSpriteFrames) RemoveFrame(anim string, idx int64) {
	self.Runtime.SpriteFrames_remove_frame(SpriteFrames{self}, anim, idx)
}
func (self methodsSpriteFrames) GetFrameCount(anim string) int64 {
	return self.Runtime.SpriteFrames_get_frame_count(SpriteFrames{self}, anim)
}
func (self methodsSpriteFrames) GetFrameTexture(anim string, idx int64) Texture2D {
	return self.Runtime.SpriteFrames_get_frame_texture(SpriteFrames{self}, anim, idx)
}
func (self methodsSpriteFrames) GetFrameDuration(anim string, idx int64) Float {
	return self.Runtime.SpriteFrames_get_frame_duration(SpriteFrames{self}, anim, idx)
}
func (self methodsSpriteFrames) Clear(anim string) {
	self.Runtime.SpriteFrames_clear(SpriteFrames{self}, anim)
}
func (self methodsSpriteFrames) ClearAll() {
	self.Runtime.SpriteFrames_clear_all(SpriteFrames{self})
}

type methodsStandardMaterial3D struct {
	_ [0]*methodsStandardMaterial3D
	class
}

func (self StandardMaterial3D) BaseMaterial3D() BaseMaterial3D {
	var parent BaseMaterial3D
	parent.class = self.class
	return parent
}

type methodsStaticBody2D struct {
	_ [0]*methodsStaticBody2D
	class
}

func (self StaticBody2D) PhysicsBody2D() PhysicsBody2D {
	var parent PhysicsBody2D
	parent.class = self.class
	return parent
}
func (self methodsStaticBody2D) SetConstantLinearVelocity(vel Vector2) {
	self.Runtime.StaticBody2D_set_constant_linear_velocity(StaticBody2D{self}, vel)
}
func (self methodsStaticBody2D) SetConstantAngularVelocity(vel Float) {
	self.Runtime.StaticBody2D_set_constant_angular_velocity(StaticBody2D{self}, vel)
}
func (self methodsStaticBody2D) GetConstantLinearVelocity() Vector2 {
	return self.Runtime.StaticBody2D_get_constant_linear_velocity(StaticBody2D{self})
}
func (self methodsStaticBody2D) GetConstantAngularVelocity() Float {
	return self.Runtime.StaticBody2D_get_constant_angular_velocity(StaticBody2D{self})
}
func (self methodsStaticBody2D) SetPhysicsMaterialOverride(physics_material_override PhysicsMaterial) {
	self.Runtime.StaticBody2D_set_physics_material_override(StaticBody2D{self}, physics_material_override)
}
func (self methodsStaticBody2D) GetPhysicsMaterialOverride() PhysicsMaterial {
	return self.Runtime.StaticBody2D_get_physics_material_override(StaticBody2D{self})
}

type methodsStaticBody3D struct {
	_ [0]*methodsStaticBody3D
	class
}

func (self StaticBody3D) PhysicsBody3D() PhysicsBody3D {
	var parent PhysicsBody3D
	parent.class = self.class
	return parent
}
func (self methodsStaticBody3D) SetConstantLinearVelocity(vel Vector3) {
	self.Runtime.StaticBody3D_set_constant_linear_velocity(StaticBody3D{self}, vel)
}
func (self methodsStaticBody3D) SetConstantAngularVelocity(vel Vector3) {
	self.Runtime.StaticBody3D_set_constant_angular_velocity(StaticBody3D{self}, vel)
}
func (self methodsStaticBody3D) GetConstantLinearVelocity() Vector3 {
	return self.Runtime.StaticBody3D_get_constant_linear_velocity(StaticBody3D{self})
}
func (self methodsStaticBody3D) GetConstantAngularVelocity() Vector3 {
	return self.Runtime.StaticBody3D_get_constant_angular_velocity(StaticBody3D{self})
}
func (self methodsStaticBody3D) SetPhysicsMaterialOverride(physics_material_override PhysicsMaterial) {
	self.Runtime.StaticBody3D_set_physics_material_override(StaticBody3D{self}, physics_material_override)
}
func (self methodsStaticBody3D) GetPhysicsMaterialOverride() PhysicsMaterial {
	return self.Runtime.StaticBody3D_get_physics_material_override(StaticBody3D{self})
}

type methodsStreamPeer struct {
	_ [0]*methodsStreamPeer
	class
}

func (self StreamPeer) RefCounted() RefCounted {
	var parent RefCounted
	parent.class = self.class
	return parent
}
func (self methodsStreamPeer) PutData(data PackedByteArray) int64 {
	return self.Runtime.StreamPeer_put_data(StreamPeer{self}, data)
}
func (self methodsStreamPeer) PutPartialData(data PackedByteArray) Array {
	return self.Runtime.StreamPeer_put_partial_data(StreamPeer{self}, data)
}
func (self methodsStreamPeer) GetData(bytes int64) Array {
	return self.Runtime.StreamPeer_get_data(StreamPeer{self}, bytes)
}
func (self methodsStreamPeer) GetPartialData(bytes int64) Array {
	return self.Runtime.StreamPeer_get_partial_data(StreamPeer{self}, bytes)
}
func (self methodsStreamPeer) GetAvailableBytes() int64 {
	return self.Runtime.StreamPeer_get_available_bytes(StreamPeer{self})
}
func (self methodsStreamPeer) SetBigEndian(enable bool) {
	self.Runtime.StreamPeer_set_big_endian(StreamPeer{self}, enable)
}
func (self methodsStreamPeer) IsBigEndianEnabled() bool {
	return self.Runtime.StreamPeer_is_big_endian_enabled(StreamPeer{self})
}
func (self methodsStreamPeer) Put8(value int64) {
	self.Runtime.StreamPeer_put_8(StreamPeer{self}, value)
}
func (self methodsStreamPeer) PutU8(value int64) {
	self.Runtime.StreamPeer_put_u8(StreamPeer{self}, value)
}
func (self methodsStreamPeer) Put16(value int64) {
	self.Runtime.StreamPeer_put_16(StreamPeer{self}, value)
}
func (self methodsStreamPeer) PutU16(value int64) {
	self.Runtime.StreamPeer_put_u16(StreamPeer{self}, value)
}
func (self methodsStreamPeer) Put32(value int64) {
	self.Runtime.StreamPeer_put_32(StreamPeer{self}, value)
}
func (self methodsStreamPeer) PutU32(value int64) {
	self.Runtime.StreamPeer_put_u32(StreamPeer{self}, value)
}
func (self methodsStreamPeer) Put64(value int64) {
	self.Runtime.StreamPeer_put_64(StreamPeer{self}, value)
}
func (self methodsStreamPeer) PutU64(value int64) {
	self.Runtime.StreamPeer_put_u64(StreamPeer{self}, value)
}
func (self methodsStreamPeer) PutFloat(value Float) {
	self.Runtime.StreamPeer_put_float(StreamPeer{self}, value)
}
func (self methodsStreamPeer) PutDouble(value Float) {
	self.Runtime.StreamPeer_put_double(StreamPeer{self}, value)
}
func (self methodsStreamPeer) PutString(value string) {
	self.Runtime.StreamPeer_put_string(StreamPeer{self}, value)
}
func (self methodsStreamPeer) PutUtf8String(value string) {
	self.Runtime.StreamPeer_put_utf8_string(StreamPeer{self}, value)
}
func (self methodsStreamPeer) PutVar(value any, full_objects bool) {
	self.Runtime.StreamPeer_put_var(StreamPeer{self}, value, full_objects)
}
func (self methodsStreamPeer) Get8() int64 {
	return self.Runtime.StreamPeer_get_8(StreamPeer{self})
}
func (self methodsStreamPeer) GetU8() int64 {
	return self.Runtime.StreamPeer_get_u8(StreamPeer{self})
}
func (self methodsStreamPeer) Get16() int64 {
	return self.Runtime.StreamPeer_get_16(StreamPeer{self})
}
func (self methodsStreamPeer) GetU16() int64 {
	return self.Runtime.StreamPeer_get_u16(StreamPeer{self})
}
func (self methodsStreamPeer) Get32() int64 {
	return self.Runtime.StreamPeer_get_32(StreamPeer{self})
}
func (self methodsStreamPeer) GetU32() int64 {
	return self.Runtime.StreamPeer_get_u32(StreamPeer{self})
}
func (self methodsStreamPeer) Get64() int64 {
	return self.Runtime.StreamPeer_get_64(StreamPeer{self})
}
func (self methodsStreamPeer) GetU64() int64 {
	return self.Runtime.StreamPeer_get_u64(StreamPeer{self})
}
func (self methodsStreamPeer) GetFloat() Float {
	return self.Runtime.StreamPeer_get_float(StreamPeer{self})
}
func (self methodsStreamPeer) GetDouble() Float {
	return self.Runtime.StreamPeer_get_double(StreamPeer{self})
}
func (self methodsStreamPeer) GetString(bytes int64) string {
	return self.Runtime.StreamPeer_get_string(StreamPeer{self}, bytes)
}
func (self methodsStreamPeer) GetUtf8String(bytes int64) string {
	return self.Runtime.StreamPeer_get_utf8_string(StreamPeer{self}, bytes)
}
func (self methodsStreamPeer) GetVar(allow_objects bool) any {
	return self.Runtime.StreamPeer_get_var(StreamPeer{self}, allow_objects)
}

type methodsStreamPeerBuffer struct {
	_ [0]*methodsStreamPeerBuffer
	class
}

func (self StreamPeerBuffer) StreamPeer() StreamPeer {
	var parent StreamPeer
	parent.class = self.class
	return parent
}
func (self methodsStreamPeerBuffer) SeekTo(position int64) {
	self.Runtime.StreamPeerBuffer_seek(StreamPeerBuffer{self}, position)
}
func (self methodsStreamPeerBuffer) GetSize() int64 {
	return self.Runtime.StreamPeerBuffer_get_size(StreamPeerBuffer{self})
}
func (self methodsStreamPeerBuffer) GetPosition() int64 {
	return self.Runtime.StreamPeerBuffer_get_position(StreamPeerBuffer{self})
}
func (self methodsStreamPeerBuffer) Resize(size int64) {
	self.Runtime.StreamPeerBuffer_resize(StreamPeerBuffer{self}, size)
}
func (self methodsStreamPeerBuffer) SetDataArray(data PackedByteArray) {
	self.Runtime.StreamPeerBuffer_set_data_array(StreamPeerBuffer{self}, data)
}
func (self methodsStreamPeerBuffer) GetDataArray() PackedByteArray {
	return self.Runtime.StreamPeerBuffer_get_data_array(StreamPeerBuffer{self})
}
func (self methodsStreamPeerBuffer) Clear() {
	self.Runtime.StreamPeerBuffer_clear(StreamPeerBuffer{self})
}
func (self methodsStreamPeerBuffer) Duplicate() StreamPeerBuffer {
	return self.Runtime.StreamPeerBuffer_duplicate(StreamPeerBuffer{self})
}

type methodsStreamPeerExtension struct {
	_ [0]*methodsStreamPeerExtension
	class
}

func (self StreamPeerExtension) StreamPeer() StreamPeer {
	var parent StreamPeer
	parent.class = self.class
	return parent
}

type methodsStreamPeerGZIP struct {
	_ [0]*methodsStreamPeerGZIP
	class
}

func (self StreamPeerGZIP) StreamPeer() StreamPeer {
	var parent StreamPeer
	parent.class = self.class
	return parent
}
func (self methodsStreamPeerGZIP) StartCompression(use_deflate bool, buffer_size int64) int64 {
	return self.Runtime.StreamPeerGZIP_start_compression(StreamPeerGZIP{self}, use_deflate, buffer_size)
}
func (self methodsStreamPeerGZIP) StartDecompression(use_deflate bool, buffer_size int64) int64 {
	return self.Runtime.StreamPeerGZIP_start_decompression(StreamPeerGZIP{self}, use_deflate, buffer_size)
}
func (self methodsStreamPeerGZIP) Finish() int64 {
	return self.Runtime.StreamPeerGZIP_finish(StreamPeerGZIP{self})
}
func (self methodsStreamPeerGZIP) Clear() {
	self.Runtime.StreamPeerGZIP_clear(StreamPeerGZIP{self})
}

type methodsStreamPeerTCP struct {
	_ [0]*methodsStreamPeerTCP
	class
}

func (self StreamPeerTCP) StreamPeer() StreamPeer {
	var parent StreamPeer
	parent.class = self.class
	return parent
}
func (self methodsStreamPeerTCP) Bind(port int64, host string) int64 {
	return self.Runtime.StreamPeerTCP_bind(StreamPeerTCP{self}, port, host)
}
func (self methodsStreamPeerTCP) ConnectToHost(host string, port int64) int64 {
	return self.Runtime.StreamPeerTCP_connect_to_host(StreamPeerTCP{self}, host, port)
}
func (self methodsStreamPeerTCP) Poll() int64 {
	return self.Runtime.StreamPeerTCP_poll(StreamPeerTCP{self})
}
func (self methodsStreamPeerTCP) GetStatus() StreamPeerTCPStatus {
	return self.Runtime.StreamPeerTCP_get_status(StreamPeerTCP{self})
}
func (self methodsStreamPeerTCP) GetConnectedHost() string {
	return self.Runtime.StreamPeerTCP_get_connected_host(StreamPeerTCP{self})
}
func (self methodsStreamPeerTCP) GetConnectedPort() int64 {
	return self.Runtime.StreamPeerTCP_get_connected_port(StreamPeerTCP{self})
}
func (self methodsStreamPeerTCP) GetLocalPort() int64 {
	return self.Runtime.StreamPeerTCP_get_local_port(StreamPeerTCP{self})
}
func (self methodsStreamPeerTCP) DisconnectFromHost() {
	self.Runtime.StreamPeerTCP_disconnect_from_host(StreamPeerTCP{self})
}
func (self methodsStreamPeerTCP) SetNoDelay(enabled bool) {
	self.Runtime.StreamPeerTCP_set_no_delay(StreamPeerTCP{self}, enabled)
}

type methodsStreamPeerTLS struct {
	_ [0]*methodsStreamPeerTLS
	class
}

func (self StreamPeerTLS) StreamPeer() StreamPeer {
	var parent StreamPeer
	parent.class = self.class
	return parent
}
func (self methodsStreamPeerTLS) Poll() {
	self.Runtime.StreamPeerTLS_poll(StreamPeerTLS{self})
}
func (self methodsStreamPeerTLS) AcceptStream(stream StreamPeer, server_options TLSOptions) int64 {
	return self.Runtime.StreamPeerTLS_accept_stream(StreamPeerTLS{self}, stream, server_options)
}
func (self methodsStreamPeerTLS) ConnectToStream(stream StreamPeer, common_name string, client_options TLSOptions) int64 {
	return self.Runtime.StreamPeerTLS_connect_to_stream(StreamPeerTLS{self}, stream, common_name, client_options)
}
func (self methodsStreamPeerTLS) GetStatus() StreamPeerTLSStatus {
	return self.Runtime.StreamPeerTLS_get_status(StreamPeerTLS{self})
}
func (self methodsStreamPeerTLS) GetStream() StreamPeer {
	return self.Runtime.StreamPeerTLS_get_stream(StreamPeerTLS{self})
}
func (self methodsStreamPeerTLS) DisconnectFromStream() {
	self.Runtime.StreamPeerTLS_disconnect_from_stream(StreamPeerTLS{self})
}

type methodsStyleBox struct {
	_ [0]*methodsStyleBox
	class
}

func (self StyleBox) Resource() Resource {
	var parent Resource
	parent.class = self.class
	return parent
}
func (self methodsStyleBox) GetMinimumSize() Vector2 {
	return self.Runtime.StyleBox_get_minimum_size(StyleBox{self})
}
func (self methodsStyleBox) SetContentMargin(margin Side, offset Float) {
	self.Runtime.StyleBox_set_content_margin(StyleBox{self}, margin, offset)
}
func (self methodsStyleBox) SetContentMarginAll(offset Float) {
	self.Runtime.StyleBox_set_content_margin_all(StyleBox{self}, offset)
}
func (self methodsStyleBox) GetContentMargin(margin Side) Float {
	return self.Runtime.StyleBox_get_content_margin(StyleBox{self}, margin)
}
func (self methodsStyleBox) GetMargin(margin Side) Float {
	return self.Runtime.StyleBox_get_margin(StyleBox{self}, margin)
}
func (self methodsStyleBox) GetOffset() Vector2 {
	return self.Runtime.StyleBox_get_offset(StyleBox{self})
}
func (self methodsStyleBox) Draw(canvas_item RID, rect Rect2) {
	self.Runtime.StyleBox_draw(StyleBox{self}, canvas_item, rect)
}
func (self methodsStyleBox) GetCurrentItemDrawn() CanvasItem {
	return self.Runtime.StyleBox_get_current_item_drawn(StyleBox{self})
}
func (self methodsStyleBox) TestMask(point Vector2, rect Rect2) bool {
	return self.Runtime.StyleBox_test_mask(StyleBox{self}, point, rect)
}

type methodsStyleBoxEmpty struct {
	_ [0]*methodsStyleBoxEmpty
	class
}

func (self StyleBoxEmpty) StyleBox() StyleBox {
	var parent StyleBox
	parent.class = self.class
	return parent
}

type methodsStyleBoxFlat struct {
	_ [0]*methodsStyleBoxFlat
	class
}

func (self StyleBoxFlat) StyleBox() StyleBox {
	var parent StyleBox
	parent.class = self.class
	return parent
}
func (self methodsStyleBoxFlat) SetBgColor(color Color) {
	self.Runtime.StyleBoxFlat_set_bg_color(StyleBoxFlat{self}, color)
}
func (self methodsStyleBoxFlat) GetBgColor() Color {
	return self.Runtime.StyleBoxFlat_get_bg_color(StyleBoxFlat{self})
}
func (self methodsStyleBoxFlat) SetBorderColor(color Color) {
	self.Runtime.StyleBoxFlat_set_border_color(StyleBoxFlat{self}, color)
}
func (self methodsStyleBoxFlat) GetBorderColor() Color {
	return self.Runtime.StyleBoxFlat_get_border_color(StyleBoxFlat{self})
}
func (self methodsStyleBoxFlat) SetBorderWidthAll(width int64) {
	self.Runtime.StyleBoxFlat_set_border_width_all(StyleBoxFlat{self}, width)
}
func (self methodsStyleBoxFlat) GetBorderWidthMin() int64 {
	return self.Runtime.StyleBoxFlat_get_border_width_min(StyleBoxFlat{self})
}
func (self methodsStyleBoxFlat) SetBorderWidth(margin Side, width int64) {
	self.Runtime.StyleBoxFlat_set_border_width(StyleBoxFlat{self}, margin, width)
}
func (self methodsStyleBoxFlat) GetBorderWidth(margin Side) int64 {
	return self.Runtime.StyleBoxFlat_get_border_width(StyleBoxFlat{self}, margin)
}
func (self methodsStyleBoxFlat) SetBorderBlend(blend bool) {
	self.Runtime.StyleBoxFlat_set_border_blend(StyleBoxFlat{self}, blend)
}
func (self methodsStyleBoxFlat) GetBorderBlend() bool {
	return self.Runtime.StyleBoxFlat_get_border_blend(StyleBoxFlat{self})
}
func (self methodsStyleBoxFlat) SetCornerRadiusAll(radius int64) {
	self.Runtime.StyleBoxFlat_set_corner_radius_all(StyleBoxFlat{self}, radius)
}
func (self methodsStyleBoxFlat) SetCornerRadius(corner Corner, radius int64) {
	self.Runtime.StyleBoxFlat_set_corner_radius(StyleBoxFlat{self}, corner, radius)
}
func (self methodsStyleBoxFlat) GetCornerRadius(corner Corner) int64 {
	return self.Runtime.StyleBoxFlat_get_corner_radius(StyleBoxFlat{self}, corner)
}
func (self methodsStyleBoxFlat) SetExpandMargin(margin Side, size Float) {
	self.Runtime.StyleBoxFlat_set_expand_margin(StyleBoxFlat{self}, margin, size)
}
func (self methodsStyleBoxFlat) SetExpandMarginAll(size Float) {
	self.Runtime.StyleBoxFlat_set_expand_margin_all(StyleBoxFlat{self}, size)
}
func (self methodsStyleBoxFlat) GetExpandMargin(margin Side) Float {
	return self.Runtime.StyleBoxFlat_get_expand_margin(StyleBoxFlat{self}, margin)
}
func (self methodsStyleBoxFlat) SetDrawCenter(draw_center bool) {
	self.Runtime.StyleBoxFlat_set_draw_center(StyleBoxFlat{self}, draw_center)
}
func (self methodsStyleBoxFlat) IsDrawCenterEnabled() bool {
	return self.Runtime.StyleBoxFlat_is_draw_center_enabled(StyleBoxFlat{self})
}
func (self methodsStyleBoxFlat) SetSkew(skew Vector2) {
	self.Runtime.StyleBoxFlat_set_skew(StyleBoxFlat{self}, skew)
}
func (self methodsStyleBoxFlat) GetSkew() Vector2 {
	return self.Runtime.StyleBoxFlat_get_skew(StyleBoxFlat{self})
}
func (self methodsStyleBoxFlat) SetShadowColor(color Color) {
	self.Runtime.StyleBoxFlat_set_shadow_color(StyleBoxFlat{self}, color)
}
func (self methodsStyleBoxFlat) GetShadowColor() Color {
	return self.Runtime.StyleBoxFlat_get_shadow_color(StyleBoxFlat{self})
}
func (self methodsStyleBoxFlat) SetShadowSize(size int64) {
	self.Runtime.StyleBoxFlat_set_shadow_size(StyleBoxFlat{self}, size)
}
func (self methodsStyleBoxFlat) GetShadowSize() int64 {
	return self.Runtime.StyleBoxFlat_get_shadow_size(StyleBoxFlat{self})
}
func (self methodsStyleBoxFlat) SetShadowOffset(offset Vector2) {
	self.Runtime.StyleBoxFlat_set_shadow_offset(StyleBoxFlat{self}, offset)
}
func (self methodsStyleBoxFlat) GetShadowOffset() Vector2 {
	return self.Runtime.StyleBoxFlat_get_shadow_offset(StyleBoxFlat{self})
}
func (self methodsStyleBoxFlat) SetAntiAliased(anti_aliased bool) {
	self.Runtime.StyleBoxFlat_set_anti_aliased(StyleBoxFlat{self}, anti_aliased)
}
func (self methodsStyleBoxFlat) IsAntiAliased() bool {
	return self.Runtime.StyleBoxFlat_is_anti_aliased(StyleBoxFlat{self})
}
func (self methodsStyleBoxFlat) SetAaSize(size Float) {
	self.Runtime.StyleBoxFlat_set_aa_size(StyleBoxFlat{self}, size)
}
func (self methodsStyleBoxFlat) GetAaSize() Float {
	return self.Runtime.StyleBoxFlat_get_aa_size(StyleBoxFlat{self})
}
func (self methodsStyleBoxFlat) SetCornerDetail(detail int64) {
	self.Runtime.StyleBoxFlat_set_corner_detail(StyleBoxFlat{self}, detail)
}
func (self methodsStyleBoxFlat) GetCornerDetail() int64 {
	return self.Runtime.StyleBoxFlat_get_corner_detail(StyleBoxFlat{self})
}

type methodsStyleBoxLine struct {
	_ [0]*methodsStyleBoxLine
	class
}

func (self StyleBoxLine) StyleBox() StyleBox {
	var parent StyleBox
	parent.class = self.class
	return parent
}
func (self methodsStyleBoxLine) SetColor(color Color) {
	self.Runtime.StyleBoxLine_set_color(StyleBoxLine{self}, color)
}
func (self methodsStyleBoxLine) GetColor() Color {
	return self.Runtime.StyleBoxLine_get_color(StyleBoxLine{self})
}
func (self methodsStyleBoxLine) SetThickness(thickness int64) {
	self.Runtime.StyleBoxLine_set_thickness(StyleBoxLine{self}, thickness)
}
func (self methodsStyleBoxLine) GetThickness() int64 {
	return self.Runtime.StyleBoxLine_get_thickness(StyleBoxLine{self})
}
func (self methodsStyleBoxLine) SetGrowBegin(offset Float) {
	self.Runtime.StyleBoxLine_set_grow_begin(StyleBoxLine{self}, offset)
}
func (self methodsStyleBoxLine) GetGrowBegin() Float {
	return self.Runtime.StyleBoxLine_get_grow_begin(StyleBoxLine{self})
}
func (self methodsStyleBoxLine) SetGrowEnd(offset Float) {
	self.Runtime.StyleBoxLine_set_grow_end(StyleBoxLine{self}, offset)
}
func (self methodsStyleBoxLine) GetGrowEnd() Float {
	return self.Runtime.StyleBoxLine_get_grow_end(StyleBoxLine{self})
}
func (self methodsStyleBoxLine) SetVertical(vertical bool) {
	self.Runtime.StyleBoxLine_set_vertical(StyleBoxLine{self}, vertical)
}
func (self methodsStyleBoxLine) IsVertical() bool {
	return self.Runtime.StyleBoxLine_is_vertical(StyleBoxLine{self})
}

type methodsStyleBoxTexture struct {
	_ [0]*methodsStyleBoxTexture
	class
}

func (self StyleBoxTexture) StyleBox() StyleBox {
	var parent StyleBox
	parent.class = self.class
	return parent
}
func (self methodsStyleBoxTexture) SetTexture(texture Texture2D) {
	self.Runtime.StyleBoxTexture_set_texture(StyleBoxTexture{self}, texture)
}
func (self methodsStyleBoxTexture) GetTexture() Texture2D {
	return self.Runtime.StyleBoxTexture_get_texture(StyleBoxTexture{self})
}
func (self methodsStyleBoxTexture) SetTextureMargin(margin Side, size Float) {
	self.Runtime.StyleBoxTexture_set_texture_margin(StyleBoxTexture{self}, margin, size)
}
func (self methodsStyleBoxTexture) SetTextureMarginAll(size Float) {
	self.Runtime.StyleBoxTexture_set_texture_margin_all(StyleBoxTexture{self}, size)
}
func (self methodsStyleBoxTexture) GetTextureMargin(margin Side) Float {
	return self.Runtime.StyleBoxTexture_get_texture_margin(StyleBoxTexture{self}, margin)
}
func (self methodsStyleBoxTexture) SetExpandMargin(margin Side, size Float) {
	self.Runtime.StyleBoxTexture_set_expand_margin(StyleBoxTexture{self}, margin, size)
}
func (self methodsStyleBoxTexture) SetExpandMarginAll(size Float) {
	self.Runtime.StyleBoxTexture_set_expand_margin_all(StyleBoxTexture{self}, size)
}
func (self methodsStyleBoxTexture) GetExpandMargin(margin Side) Float {
	return self.Runtime.StyleBoxTexture_get_expand_margin(StyleBoxTexture{self}, margin)
}
func (self methodsStyleBoxTexture) SetRegionRect(region Rect2) {
	self.Runtime.StyleBoxTexture_set_region_rect(StyleBoxTexture{self}, region)
}
func (self methodsStyleBoxTexture) GetRegionRect() Rect2 {
	return self.Runtime.StyleBoxTexture_get_region_rect(StyleBoxTexture{self})
}
func (self methodsStyleBoxTexture) SetDrawCenter(enable bool) {
	self.Runtime.StyleBoxTexture_set_draw_center(StyleBoxTexture{self}, enable)
}
func (self methodsStyleBoxTexture) IsDrawCenterEnabled() bool {
	return self.Runtime.StyleBoxTexture_is_draw_center_enabled(StyleBoxTexture{self})
}
func (self methodsStyleBoxTexture) SetModulate(color Color) {
	self.Runtime.StyleBoxTexture_set_modulate(StyleBoxTexture{self}, color)
}
func (self methodsStyleBoxTexture) GetModulate() Color {
	return self.Runtime.StyleBoxTexture_get_modulate(StyleBoxTexture{self})
}
func (self methodsStyleBoxTexture) SetHAxisStretchMode(mode StyleBoxTextureAxisStretchMode) {
	self.Runtime.StyleBoxTexture_set_h_axis_stretch_mode(StyleBoxTexture{self}, mode)
}
func (self methodsStyleBoxTexture) GetHAxisStretchMode() StyleBoxTextureAxisStretchMode {
	return self.Runtime.StyleBoxTexture_get_h_axis_stretch_mode(StyleBoxTexture{self})
}
func (self methodsStyleBoxTexture) SetVAxisStretchMode(mode StyleBoxTextureAxisStretchMode) {
	self.Runtime.StyleBoxTexture_set_v_axis_stretch_mode(StyleBoxTexture{self}, mode)
}
func (self methodsStyleBoxTexture) GetVAxisStretchMode() StyleBoxTextureAxisStretchMode {
	return self.Runtime.StyleBoxTexture_get_v_axis_stretch_mode(StyleBoxTexture{self})
}

type methodsSubViewport struct {
	_ [0]*methodsSubViewport
	class
}

func (self SubViewport) Viewport() Viewport {
	var parent Viewport
	parent.class = self.class
	return parent
}
func (self methodsSubViewport) SetSize(size Vector2i) {
	self.Runtime.SubViewport_set_size(SubViewport{self}, size)
}
func (self methodsSubViewport) GetSize() Vector2i {
	return self.Runtime.SubViewport_get_size(SubViewport{self})
}
func (self methodsSubViewport) SetSize2dOverride(size Vector2i) {
	self.Runtime.SubViewport_set_size_2d_override(SubViewport{self}, size)
}
func (self methodsSubViewport) GetSize2dOverride() Vector2i {
	return self.Runtime.SubViewport_get_size_2d_override(SubViewport{self})
}
func (self methodsSubViewport) SetSize2dOverrideStretch(enable bool) {
	self.Runtime.SubViewport_set_size_2d_override_stretch(SubViewport{self}, enable)
}
func (self methodsSubViewport) IsSize2dOverrideStretchEnabled() bool {
	return self.Runtime.SubViewport_is_size_2d_override_stretch_enabled(SubViewport{self})
}
func (self methodsSubViewport) SetUpdateMode(mode SubViewportUpdateMode) {
	self.Runtime.SubViewport_set_update_mode(SubViewport{self}, mode)
}
func (self methodsSubViewport) GetUpdateMode() SubViewportUpdateMode {
	return self.Runtime.SubViewport_get_update_mode(SubViewport{self})
}
func (self methodsSubViewport) SetClearMode(mode SubViewportClearMode) {
	self.Runtime.SubViewport_set_clear_mode(SubViewport{self}, mode)
}
func (self methodsSubViewport) GetClearMode() SubViewportClearMode {
	return self.Runtime.SubViewport_get_clear_mode(SubViewport{self})
}

type methodsSubViewportContainer struct {
	_ [0]*methodsSubViewportContainer
	class
}

func (self SubViewportContainer) Container() Container {
	var parent Container
	parent.class = self.class
	return parent
}
func (self methodsSubViewportContainer) SetStretch(enable bool) {
	self.Runtime.SubViewportContainer_set_stretch(SubViewportContainer{self}, enable)
}
func (self methodsSubViewportContainer) IsStretchEnabled() bool {
	return self.Runtime.SubViewportContainer_is_stretch_enabled(SubViewportContainer{self})
}
func (self methodsSubViewportContainer) SetStretchShrink(amount int64) {
	self.Runtime.SubViewportContainer_set_stretch_shrink(SubViewportContainer{self}, amount)
}
func (self methodsSubViewportContainer) GetStretchShrink() int64 {
	return self.Runtime.SubViewportContainer_get_stretch_shrink(SubViewportContainer{self})
}

type methodsSurfaceTool struct {
	_ [0]*methodsSurfaceTool
	class
}

func (self SurfaceTool) RefCounted() RefCounted {
	var parent RefCounted
	parent.class = self.class
	return parent
}
func (self methodsSurfaceTool) SetSkinWeightCount(count SurfaceToolSkinWeightCount) {
	self.Runtime.SurfaceTool_set_skin_weight_count(SurfaceTool{self}, count)
}
func (self methodsSurfaceTool) GetSkinWeightCount() SurfaceToolSkinWeightCount {
	return self.Runtime.SurfaceTool_get_skin_weight_count(SurfaceTool{self})
}
func (self methodsSurfaceTool) SetCustomFormat(channel_index int64, format SurfaceToolCustomFormat) {
	self.Runtime.SurfaceTool_set_custom_format(SurfaceTool{self}, channel_index, format)
}
func (self methodsSurfaceTool) GetCustomFormat(channel_index int64) SurfaceToolCustomFormat {
	return self.Runtime.SurfaceTool_get_custom_format(SurfaceTool{self}, channel_index)
}
func (self methodsSurfaceTool) Begin(primitive MeshPrimitiveType) {
	self.Runtime.SurfaceTool_begin(SurfaceTool{self}, primitive)
}
func (self methodsSurfaceTool) AddVertex(vertex Vector3) {
	self.Runtime.SurfaceTool_add_vertex(SurfaceTool{self}, vertex)
}
func (self methodsSurfaceTool) SetColor(color Color) {
	self.Runtime.SurfaceTool_set_color(SurfaceTool{self}, color)
}
func (self methodsSurfaceTool) SetNormal(normal Vector3) {
	self.Runtime.SurfaceTool_set_normal(SurfaceTool{self}, normal)
}
func (self methodsSurfaceTool) SetTangent(tangent Plane) {
	self.Runtime.SurfaceTool_set_tangent(SurfaceTool{self}, tangent)
}
func (self methodsSurfaceTool) SetUv(uv Vector2) {
	self.Runtime.SurfaceTool_set_uv(SurfaceTool{self}, uv)
}
func (self methodsSurfaceTool) SetUv2(uv2 Vector2) {
	self.Runtime.SurfaceTool_set_uv2(SurfaceTool{self}, uv2)
}
func (self methodsSurfaceTool) SetBones(bones PackedInt32Array) {
	self.Runtime.SurfaceTool_set_bones(SurfaceTool{self}, bones)
}
func (self methodsSurfaceTool) SetWeights(weights PackedFloat32Array) {
	self.Runtime.SurfaceTool_set_weights(SurfaceTool{self}, weights)
}
func (self methodsSurfaceTool) SetCustom(channel_index int64, custom_color Color) {
	self.Runtime.SurfaceTool_set_custom(SurfaceTool{self}, channel_index, custom_color)
}
func (self methodsSurfaceTool) SetSmoothGroup(index int64) {
	self.Runtime.SurfaceTool_set_smooth_group(SurfaceTool{self}, index)
}
func (self methodsSurfaceTool) AddTriangleFan(vertices PackedVector3Array, uvs PackedVector2Array, colors PackedColorArray, uv2s PackedVector2Array, normals PackedVector3Array, tangents ArrayOf[Plane]) {
	self.Runtime.SurfaceTool_add_triangle_fan(SurfaceTool{self}, vertices, uvs, colors, uv2s, normals, tangents)
}
func (self methodsSurfaceTool) AddIndex(index int64) {
	self.Runtime.SurfaceTool_add_index(SurfaceTool{self}, index)
}
func (self methodsSurfaceTool) Index() {
	self.Runtime.SurfaceTool_index(SurfaceTool{self})
}
func (self methodsSurfaceTool) Deindex() {
	self.Runtime.SurfaceTool_deindex(SurfaceTool{self})
}
func (self methodsSurfaceTool) GenerateNormals(flip bool) {
	self.Runtime.SurfaceTool_generate_normals(SurfaceTool{self}, flip)
}
func (self methodsSurfaceTool) GenerateTangents() {
	self.Runtime.SurfaceTool_generate_tangents(SurfaceTool{self})
}
func (self methodsSurfaceTool) OptimizeIndicesForCache() {
	self.Runtime.SurfaceTool_optimize_indices_for_cache(SurfaceTool{self})
}
func (self methodsSurfaceTool) GetAabb() AABB {
	return self.Runtime.SurfaceTool_get_aabb(SurfaceTool{self})
}
func (self methodsSurfaceTool) GenerateLod(nd_threshold Float, target_index_count int64) PackedInt32Array {
	return self.Runtime.SurfaceTool_generate_lod(SurfaceTool{self}, nd_threshold, target_index_count)
}
func (self methodsSurfaceTool) SetMaterial(material Material) {
	self.Runtime.SurfaceTool_set_material(SurfaceTool{self}, material)
}
func (self methodsSurfaceTool) GetPrimitiveType() MeshPrimitiveType {
	return self.Runtime.SurfaceTool_get_primitive_type(SurfaceTool{self})
}
func (self methodsSurfaceTool) Clear() {
	self.Runtime.SurfaceTool_clear(SurfaceTool{self})
}
func (self methodsSurfaceTool) CreateFrom(existing Mesh, surface int64) {
	self.Runtime.SurfaceTool_create_from(SurfaceTool{self}, existing, surface)
}
func (self methodsSurfaceTool) CreateFromBlendShape(existing Mesh, surface int64, blend_shape string) {
	self.Runtime.SurfaceTool_create_from_blend_shape(SurfaceTool{self}, existing, surface, blend_shape)
}
func (self methodsSurfaceTool) AppendFrom(existing Mesh, surface int64, transform Transform3D) {
	self.Runtime.SurfaceTool_append_from(SurfaceTool{self}, existing, surface, transform)
}
func (self methodsSurfaceTool) Commit(existing ArrayMesh, flags int64) ArrayMesh {
	return self.Runtime.SurfaceTool_commit(SurfaceTool{self}, existing, flags)
}
func (self methodsSurfaceTool) CommitToArrays() Array {
	return self.Runtime.SurfaceTool_commit_to_arrays(SurfaceTool{self})
}

type methodsSyntaxHighlighter struct {
	_ [0]*methodsSyntaxHighlighter
	class
}

func (self SyntaxHighlighter) Resource() Resource {
	var parent Resource
	parent.class = self.class
	return parent
}
func (self methodsSyntaxHighlighter) GetLineSyntaxHighlighting(line int64) Dictionary {
	return self.Runtime.SyntaxHighlighter_get_line_syntax_highlighting(SyntaxHighlighter{self}, line)
}
func (self methodsSyntaxHighlighter) UpdateCache() {
	self.Runtime.SyntaxHighlighter_update_cache(SyntaxHighlighter{self})
}
func (self methodsSyntaxHighlighter) ClearHighlightingCache() {
	self.Runtime.SyntaxHighlighter_clear_highlighting_cache(SyntaxHighlighter{self})
}
func (self methodsSyntaxHighlighter) GetTextEdit() TextEdit {
	return self.Runtime.SyntaxHighlighter_get_text_edit(SyntaxHighlighter{self})
}

type methodsSystemFont struct {
	_ [0]*methodsSystemFont
	class
}

func (self SystemFont) Font() Font { var parent Font; parent.class = self.class; return parent }
func (self methodsSystemFont) SetAntialiasing(antialiasing TextServerFontAntialiasing) {
	self.Runtime.SystemFont_set_antialiasing(SystemFont{self}, antialiasing)
}
func (self methodsSystemFont) GetAntialiasing() TextServerFontAntialiasing {
	return self.Runtime.SystemFont_get_antialiasing(SystemFont{self})
}
func (self methodsSystemFont) SetGenerateMipmaps(generate_mipmaps bool) {
	self.Runtime.SystemFont_set_generate_mipmaps(SystemFont{self}, generate_mipmaps)
}
func (self methodsSystemFont) GetGenerateMipmaps() bool {
	return self.Runtime.SystemFont_get_generate_mipmaps(SystemFont{self})
}
func (self methodsSystemFont) SetAllowSystemFallback(allow_system_fallback bool) {
	self.Runtime.SystemFont_set_allow_system_fallback(SystemFont{self}, allow_system_fallback)
}
func (self methodsSystemFont) IsAllowSystemFallback() bool {
	return self.Runtime.SystemFont_is_allow_system_fallback(SystemFont{self})
}
func (self methodsSystemFont) SetForceAutohinter(force_autohinter bool) {
	self.Runtime.SystemFont_set_force_autohinter(SystemFont{self}, force_autohinter)
}
func (self methodsSystemFont) IsForceAutohinter() bool {
	return self.Runtime.SystemFont_is_force_autohinter(SystemFont{self})
}
func (self methodsSystemFont) SetHinting(hinting TextServerHinting) {
	self.Runtime.SystemFont_set_hinting(SystemFont{self}, hinting)
}
func (self methodsSystemFont) GetHinting() TextServerHinting {
	return self.Runtime.SystemFont_get_hinting(SystemFont{self})
}
func (self methodsSystemFont) SetSubpixelPositioning(subpixel_positioning TextServerSubpixelPositioning) {
	self.Runtime.SystemFont_set_subpixel_positioning(SystemFont{self}, subpixel_positioning)
}
func (self methodsSystemFont) GetSubpixelPositioning() TextServerSubpixelPositioning {
	return self.Runtime.SystemFont_get_subpixel_positioning(SystemFont{self})
}
func (self methodsSystemFont) SetMultichannelSignedDistanceField(msdf bool) {
	self.Runtime.SystemFont_set_multichannel_signed_distance_field(SystemFont{self}, msdf)
}
func (self methodsSystemFont) IsMultichannelSignedDistanceField() bool {
	return self.Runtime.SystemFont_is_multichannel_signed_distance_field(SystemFont{self})
}
func (self methodsSystemFont) SetMsdfPixelRange(msdf_pixel_range int64) {
	self.Runtime.SystemFont_set_msdf_pixel_range(SystemFont{self}, msdf_pixel_range)
}
func (self methodsSystemFont) GetMsdfPixelRange() int64 {
	return self.Runtime.SystemFont_get_msdf_pixel_range(SystemFont{self})
}
func (self methodsSystemFont) SetMsdfSize(msdf_size int64) {
	self.Runtime.SystemFont_set_msdf_size(SystemFont{self}, msdf_size)
}
func (self methodsSystemFont) GetMsdfSize() int64 {
	return self.Runtime.SystemFont_get_msdf_size(SystemFont{self})
}
func (self methodsSystemFont) SetOversampling(oversampling Float) {
	self.Runtime.SystemFont_set_oversampling(SystemFont{self}, oversampling)
}
func (self methodsSystemFont) GetOversampling() Float {
	return self.Runtime.SystemFont_get_oversampling(SystemFont{self})
}
func (self methodsSystemFont) GetFontNames() PackedStringArray {
	return self.Runtime.SystemFont_get_font_names(SystemFont{self})
}
func (self methodsSystemFont) SetFontNames(names PackedStringArray) {
	self.Runtime.SystemFont_set_font_names(SystemFont{self}, names)
}
func (self methodsSystemFont) GetFontItalic() bool {
	return self.Runtime.SystemFont_get_font_italic(SystemFont{self})
}
func (self methodsSystemFont) SetFontItalic(italic bool) {
	self.Runtime.SystemFont_set_font_italic(SystemFont{self}, italic)
}
func (self methodsSystemFont) SetFontWeight(weight int64) {
	self.Runtime.SystemFont_set_font_weight(SystemFont{self}, weight)
}
func (self methodsSystemFont) SetFontStretch(stretch int64) {
	self.Runtime.SystemFont_set_font_stretch(SystemFont{self}, stretch)
}

type methodsTCPServer struct {
	_ [0]*methodsTCPServer
	class
}

func (self TCPServer) RefCounted() RefCounted {
	var parent RefCounted
	parent.class = self.class
	return parent
}
func (self methodsTCPServer) Listen(port int64, bind_address string) int64 {
	return self.Runtime.TCPServer_listen(TCPServer{self}, port, bind_address)
}
func (self methodsTCPServer) IsConnectionAvailable() bool {
	return self.Runtime.TCPServer_is_connection_available(TCPServer{self})
}
func (self methodsTCPServer) IsListening() bool {
	return self.Runtime.TCPServer_is_listening(TCPServer{self})
}
func (self methodsTCPServer) GetLocalPort() int64 {
	return self.Runtime.TCPServer_get_local_port(TCPServer{self})
}
func (self methodsTCPServer) TakeConnection() StreamPeerTCP {
	return self.Runtime.TCPServer_take_connection(TCPServer{self})
}
func (self methodsTCPServer) Stop() {
	self.Runtime.TCPServer_stop(TCPServer{self})
}

type methodsTLSOptions struct {
	_ [0]*methodsTLSOptions
	class
}

func (self TLSOptions) RefCounted() RefCounted {
	var parent RefCounted
	parent.class = self.class
	return parent
}
func (self methodsTLSOptions) Client(trusted_chain X509Certificate, common_name_override string) TLSOptions {
	return self.Runtime.TLSOptions_client(TLSOptions{self}, trusted_chain, common_name_override)
}
func (self methodsTLSOptions) ClientUnsafe(trusted_chain X509Certificate) TLSOptions {
	return self.Runtime.TLSOptions_client_unsafe(TLSOptions{self}, trusted_chain)
}
func (self methodsTLSOptions) Server(key CryptoKey, certificate X509Certificate) TLSOptions {
	return self.Runtime.TLSOptions_server(TLSOptions{self}, key, certificate)
}

type methodsTabBar struct {
	_ [0]*methodsTabBar
	class
}

func (self TabBar) Control() Control { var parent Control; parent.class = self.class; return parent }
func (self methodsTabBar) SetTabCount(count int64) {
	self.Runtime.TabBar_set_tab_count(TabBar{self}, count)
}
func (self methodsTabBar) GetTabCount() int64 {
	return self.Runtime.TabBar_get_tab_count(TabBar{self})
}
func (self methodsTabBar) SetCurrentTab(tab_idx int64) {
	self.Runtime.TabBar_set_current_tab(TabBar{self}, tab_idx)
}
func (self methodsTabBar) GetCurrentTab() int64 {
	return self.Runtime.TabBar_get_current_tab(TabBar{self})
}
func (self methodsTabBar) GetPreviousTab() int64 {
	return self.Runtime.TabBar_get_previous_tab(TabBar{self})
}
func (self methodsTabBar) SelectPreviousAvailable() bool {
	return self.Runtime.TabBar_select_previous_available(TabBar{self})
}
func (self methodsTabBar) SelectNextAvailable() bool {
	return self.Runtime.TabBar_select_next_available(TabBar{self})
}
func (self methodsTabBar) SetTabTitle(tab_idx int64, title string) {
	self.Runtime.TabBar_set_tab_title(TabBar{self}, tab_idx, title)
}
func (self methodsTabBar) GetTabTitle(tab_idx int64) string {
	return self.Runtime.TabBar_get_tab_title(TabBar{self}, tab_idx)
}
func (self methodsTabBar) SetTabTextDirection(tab_idx int64, direction ControlTextDirection) {
	self.Runtime.TabBar_set_tab_text_direction(TabBar{self}, tab_idx, direction)
}
func (self methodsTabBar) GetTabTextDirection(tab_idx int64) ControlTextDirection {
	return self.Runtime.TabBar_get_tab_text_direction(TabBar{self}, tab_idx)
}
func (self methodsTabBar) SetTabLanguage(tab_idx int64, language string) {
	self.Runtime.TabBar_set_tab_language(TabBar{self}, tab_idx, language)
}
func (self methodsTabBar) GetTabLanguage(tab_idx int64) string {
	return self.Runtime.TabBar_get_tab_language(TabBar{self}, tab_idx)
}
func (self methodsTabBar) SetTabIcon(tab_idx int64, icon Texture2D) {
	self.Runtime.TabBar_set_tab_icon(TabBar{self}, tab_idx, icon)
}
func (self methodsTabBar) GetTabIcon(tab_idx int64) Texture2D {
	return self.Runtime.TabBar_get_tab_icon(TabBar{self}, tab_idx)
}
func (self methodsTabBar) SetTabIconMaxWidth(tab_idx int64, width int64) {
	self.Runtime.TabBar_set_tab_icon_max_width(TabBar{self}, tab_idx, width)
}
func (self methodsTabBar) GetTabIconMaxWidth(tab_idx int64) int64 {
	return self.Runtime.TabBar_get_tab_icon_max_width(TabBar{self}, tab_idx)
}
func (self methodsTabBar) SetTabButtonIcon(tab_idx int64, icon Texture2D) {
	self.Runtime.TabBar_set_tab_button_icon(TabBar{self}, tab_idx, icon)
}
func (self methodsTabBar) GetTabButtonIcon(tab_idx int64) Texture2D {
	return self.Runtime.TabBar_get_tab_button_icon(TabBar{self}, tab_idx)
}
func (self methodsTabBar) SetTabDisabled(tab_idx int64, disabled bool) {
	self.Runtime.TabBar_set_tab_disabled(TabBar{self}, tab_idx, disabled)
}
func (self methodsTabBar) IsTabDisabled(tab_idx int64) bool {
	return self.Runtime.TabBar_is_tab_disabled(TabBar{self}, tab_idx)
}
func (self methodsTabBar) SetTabHidden(tab_idx int64, hidden bool) {
	self.Runtime.TabBar_set_tab_hidden(TabBar{self}, tab_idx, hidden)
}
func (self methodsTabBar) IsTabHidden(tab_idx int64) bool {
	return self.Runtime.TabBar_is_tab_hidden(TabBar{self}, tab_idx)
}
func (self methodsTabBar) SetTabMetadata(tab_idx int64, metadata any) {
	self.Runtime.TabBar_set_tab_metadata(TabBar{self}, tab_idx, metadata)
}
func (self methodsTabBar) GetTabMetadata(tab_idx int64) any {
	return self.Runtime.TabBar_get_tab_metadata(TabBar{self}, tab_idx)
}
func (self methodsTabBar) RemoveTab(tab_idx int64) {
	self.Runtime.TabBar_remove_tab(TabBar{self}, tab_idx)
}
func (self methodsTabBar) AddTab(title string, icon Texture2D) {
	self.Runtime.TabBar_add_tab(TabBar{self}, title, icon)
}
func (self methodsTabBar) GetTabIdxAtPoint(point Vector2) int64 {
	return self.Runtime.TabBar_get_tab_idx_at_point(TabBar{self}, point)
}
func (self methodsTabBar) SetTabAlignment(alignment TabBarAlignmentMode) {
	self.Runtime.TabBar_set_tab_alignment(TabBar{self}, alignment)
}
func (self methodsTabBar) GetTabAlignment() TabBarAlignmentMode {
	return self.Runtime.TabBar_get_tab_alignment(TabBar{self})
}
func (self methodsTabBar) SetClipTabs(clip_tabs bool) {
	self.Runtime.TabBar_set_clip_tabs(TabBar{self}, clip_tabs)
}
func (self methodsTabBar) GetClipTabs() bool {
	return self.Runtime.TabBar_get_clip_tabs(TabBar{self})
}
func (self methodsTabBar) GetTabOffset() int64 {
	return self.Runtime.TabBar_get_tab_offset(TabBar{self})
}
func (self methodsTabBar) GetOffsetButtonsVisible() bool {
	return self.Runtime.TabBar_get_offset_buttons_visible(TabBar{self})
}
func (self methodsTabBar) EnsureTabVisible(idx int64) {
	self.Runtime.TabBar_ensure_tab_visible(TabBar{self}, idx)
}
func (self methodsTabBar) GetTabRect(tab_idx int64) Rect2 {
	return self.Runtime.TabBar_get_tab_rect(TabBar{self}, tab_idx)
}
func (self methodsTabBar) MoveTab(from int64, to int64) {
	self.Runtime.TabBar_move_tab(TabBar{self}, from, to)
}
func (self methodsTabBar) SetTabCloseDisplayPolicy(policy TabBarCloseButtonDisplayPolicy) {
	self.Runtime.TabBar_set_tab_close_display_policy(TabBar{self}, policy)
}
func (self methodsTabBar) GetTabCloseDisplayPolicy() TabBarCloseButtonDisplayPolicy {
	return self.Runtime.TabBar_get_tab_close_display_policy(TabBar{self})
}
func (self methodsTabBar) SetMaxTabWidth(width int64) {
	self.Runtime.TabBar_set_max_tab_width(TabBar{self}, width)
}
func (self methodsTabBar) GetMaxTabWidth() int64 {
	return self.Runtime.TabBar_get_max_tab_width(TabBar{self})
}
func (self methodsTabBar) SetScrollingEnabled(enabled bool) {
	self.Runtime.TabBar_set_scrolling_enabled(TabBar{self}, enabled)
}
func (self methodsTabBar) GetScrollingEnabled() bool {
	return self.Runtime.TabBar_get_scrolling_enabled(TabBar{self})
}
func (self methodsTabBar) SetDragToRearrangeEnabled(enabled bool) {
	self.Runtime.TabBar_set_drag_to_rearrange_enabled(TabBar{self}, enabled)
}
func (self methodsTabBar) GetDragToRearrangeEnabled() bool {
	return self.Runtime.TabBar_get_drag_to_rearrange_enabled(TabBar{self})
}
func (self methodsTabBar) SetTabsRearrangeGroup(group_id int64) {
	self.Runtime.TabBar_set_tabs_rearrange_group(TabBar{self}, group_id)
}
func (self methodsTabBar) GetTabsRearrangeGroup() int64 {
	return self.Runtime.TabBar_get_tabs_rearrange_group(TabBar{self})
}
func (self methodsTabBar) SetScrollToSelected(enabled bool) {
	self.Runtime.TabBar_set_scroll_to_selected(TabBar{self}, enabled)
}
func (self methodsTabBar) GetScrollToSelected() bool {
	return self.Runtime.TabBar_get_scroll_to_selected(TabBar{self})
}
func (self methodsTabBar) SetSelectWithRmb(enabled bool) {
	self.Runtime.TabBar_set_select_with_rmb(TabBar{self}, enabled)
}
func (self methodsTabBar) GetSelectWithRmb() bool {
	return self.Runtime.TabBar_get_select_with_rmb(TabBar{self})
}
func (self methodsTabBar) ClearTabs() {
	self.Runtime.TabBar_clear_tabs(TabBar{self})
}

type methodsTabContainer struct {
	_ [0]*methodsTabContainer
	class
}

func (self TabContainer) Container() Container {
	var parent Container
	parent.class = self.class
	return parent
}
func (self methodsTabContainer) GetTabCount() int64 {
	return self.Runtime.TabContainer_get_tab_count(TabContainer{self})
}
func (self methodsTabContainer) SetCurrentTab(tab_idx int64) {
	self.Runtime.TabContainer_set_current_tab(TabContainer{self}, tab_idx)
}
func (self methodsTabContainer) GetCurrentTab() int64 {
	return self.Runtime.TabContainer_get_current_tab(TabContainer{self})
}
func (self methodsTabContainer) GetPreviousTab() int64 {
	return self.Runtime.TabContainer_get_previous_tab(TabContainer{self})
}
func (self methodsTabContainer) SelectPreviousAvailable() bool {
	return self.Runtime.TabContainer_select_previous_available(TabContainer{self})
}
func (self methodsTabContainer) SelectNextAvailable() bool {
	return self.Runtime.TabContainer_select_next_available(TabContainer{self})
}
func (self methodsTabContainer) GetCurrentTabControl() Control {
	return self.Runtime.TabContainer_get_current_tab_control(TabContainer{self})
}
func (self methodsTabContainer) GetTabBar() TabBar {
	return self.Runtime.TabContainer_get_tab_bar(TabContainer{self})
}
func (self methodsTabContainer) GetTabControl(tab_idx int64) Control {
	return self.Runtime.TabContainer_get_tab_control(TabContainer{self}, tab_idx)
}
func (self methodsTabContainer) SetTabAlignment(alignment TabBarAlignmentMode) {
	self.Runtime.TabContainer_set_tab_alignment(TabContainer{self}, alignment)
}
func (self methodsTabContainer) GetTabAlignment() TabBarAlignmentMode {
	return self.Runtime.TabContainer_get_tab_alignment(TabContainer{self})
}
func (self methodsTabContainer) SetClipTabs(clip_tabs bool) {
	self.Runtime.TabContainer_set_clip_tabs(TabContainer{self}, clip_tabs)
}
func (self methodsTabContainer) GetClipTabs() bool {
	return self.Runtime.TabContainer_get_clip_tabs(TabContainer{self})
}
func (self methodsTabContainer) SetTabsVisible(visible bool) {
	self.Runtime.TabContainer_set_tabs_visible(TabContainer{self}, visible)
}
func (self methodsTabContainer) AreTabsVisible() bool {
	return self.Runtime.TabContainer_are_tabs_visible(TabContainer{self})
}
func (self methodsTabContainer) SetAllTabsInFront(is_front bool) {
	self.Runtime.TabContainer_set_all_tabs_in_front(TabContainer{self}, is_front)
}
func (self methodsTabContainer) IsAllTabsInFront() bool {
	return self.Runtime.TabContainer_is_all_tabs_in_front(TabContainer{self})
}
func (self methodsTabContainer) SetTabTitle(tab_idx int64, title string) {
	self.Runtime.TabContainer_set_tab_title(TabContainer{self}, tab_idx, title)
}
func (self methodsTabContainer) GetTabTitle(tab_idx int64) string {
	return self.Runtime.TabContainer_get_tab_title(TabContainer{self}, tab_idx)
}
func (self methodsTabContainer) SetTabIcon(tab_idx int64, icon Texture2D) {
	self.Runtime.TabContainer_set_tab_icon(TabContainer{self}, tab_idx, icon)
}
func (self methodsTabContainer) GetTabIcon(tab_idx int64) Texture2D {
	return self.Runtime.TabContainer_get_tab_icon(TabContainer{self}, tab_idx)
}
func (self methodsTabContainer) SetTabDisabled(tab_idx int64, disabled bool) {
	self.Runtime.TabContainer_set_tab_disabled(TabContainer{self}, tab_idx, disabled)
}
func (self methodsTabContainer) IsTabDisabled(tab_idx int64) bool {
	return self.Runtime.TabContainer_is_tab_disabled(TabContainer{self}, tab_idx)
}
func (self methodsTabContainer) SetTabHidden(tab_idx int64, hidden bool) {
	self.Runtime.TabContainer_set_tab_hidden(TabContainer{self}, tab_idx, hidden)
}
func (self methodsTabContainer) IsTabHidden(tab_idx int64) bool {
	return self.Runtime.TabContainer_is_tab_hidden(TabContainer{self}, tab_idx)
}
func (self methodsTabContainer) SetTabMetadata(tab_idx int64, metadata any) {
	self.Runtime.TabContainer_set_tab_metadata(TabContainer{self}, tab_idx, metadata)
}
func (self methodsTabContainer) GetTabMetadata(tab_idx int64) any {
	return self.Runtime.TabContainer_get_tab_metadata(TabContainer{self}, tab_idx)
}
func (self methodsTabContainer) SetTabButtonIcon(tab_idx int64, icon Texture2D) {
	self.Runtime.TabContainer_set_tab_button_icon(TabContainer{self}, tab_idx, icon)
}
func (self methodsTabContainer) GetTabButtonIcon(tab_idx int64) Texture2D {
	return self.Runtime.TabContainer_get_tab_button_icon(TabContainer{self}, tab_idx)
}
func (self methodsTabContainer) GetTabIdxAtPoint(point Vector2) int64 {
	return self.Runtime.TabContainer_get_tab_idx_at_point(TabContainer{self}, point)
}
func (self methodsTabContainer) GetTabIdxFromControl(control Control) int64 {
	return self.Runtime.TabContainer_get_tab_idx_from_control(TabContainer{self}, control)
}
func (self methodsTabContainer) SetPopup(popup Node) {
	self.Runtime.TabContainer_set_popup(TabContainer{self}, popup)
}
func (self methodsTabContainer) GetPopup() Popup {
	return self.Runtime.TabContainer_get_popup(TabContainer{self})
}
func (self methodsTabContainer) SetDragToRearrangeEnabled(enabled bool) {
	self.Runtime.TabContainer_set_drag_to_rearrange_enabled(TabContainer{self}, enabled)
}
func (self methodsTabContainer) GetDragToRearrangeEnabled() bool {
	return self.Runtime.TabContainer_get_drag_to_rearrange_enabled(TabContainer{self})
}
func (self methodsTabContainer) SetTabsRearrangeGroup(group_id int64) {
	self.Runtime.TabContainer_set_tabs_rearrange_group(TabContainer{self}, group_id)
}
func (self methodsTabContainer) GetTabsRearrangeGroup() int64 {
	return self.Runtime.TabContainer_get_tabs_rearrange_group(TabContainer{self})
}
func (self methodsTabContainer) SetUseHiddenTabsForMinSize(enabled bool) {
	self.Runtime.TabContainer_set_use_hidden_tabs_for_min_size(TabContainer{self}, enabled)
}
func (self methodsTabContainer) GetUseHiddenTabsForMinSize() bool {
	return self.Runtime.TabContainer_get_use_hidden_tabs_for_min_size(TabContainer{self})
}
func (self methodsTabContainer) SetTabFocusMode(focus_mode ControlFocusMode) {
	self.Runtime.TabContainer_set_tab_focus_mode(TabContainer{self}, focus_mode)
}
func (self methodsTabContainer) GetTabFocusMode() ControlFocusMode {
	return self.Runtime.TabContainer_get_tab_focus_mode(TabContainer{self})
}

type methodsTextEdit struct {
	_ [0]*methodsTextEdit
	class
}

func (self TextEdit) Control() Control { var parent Control; parent.class = self.class; return parent }
func (self methodsTextEdit) HasImeText() bool {
	return self.Runtime.TextEdit_has_ime_text(TextEdit{self})
}
func (self methodsTextEdit) SetEditable(enabled bool) {
	self.Runtime.TextEdit_set_editable(TextEdit{self}, enabled)
}
func (self methodsTextEdit) IsEditable() bool {
	return self.Runtime.TextEdit_is_editable(TextEdit{self})
}
func (self methodsTextEdit) SetTextDirection(direction ControlTextDirection) {
	self.Runtime.TextEdit_set_text_direction(TextEdit{self}, direction)
}
func (self methodsTextEdit) GetTextDirection() ControlTextDirection {
	return self.Runtime.TextEdit_get_text_direction(TextEdit{self})
}
func (self methodsTextEdit) SetLanguage(language string) {
	self.Runtime.TextEdit_set_language(TextEdit{self}, language)
}
func (self methodsTextEdit) GetLanguage() string {
	return self.Runtime.TextEdit_get_language(TextEdit{self})
}
func (self methodsTextEdit) SetStructuredTextBidiOverride(parser TextServerStructuredTextParser) {
	self.Runtime.TextEdit_set_structured_text_bidi_override(TextEdit{self}, parser)
}
func (self methodsTextEdit) GetStructuredTextBidiOverride() TextServerStructuredTextParser {
	return self.Runtime.TextEdit_get_structured_text_bidi_override(TextEdit{self})
}
func (self methodsTextEdit) SetStructuredTextBidiOverrideOptions(args Array) {
	self.Runtime.TextEdit_set_structured_text_bidi_override_options(TextEdit{self}, args)
}
func (self methodsTextEdit) GetStructuredTextBidiOverrideOptions() Array {
	return self.Runtime.TextEdit_get_structured_text_bidi_override_options(TextEdit{self})
}
func (self methodsTextEdit) SetTabSize(size int64) {
	self.Runtime.TextEdit_set_tab_size(TextEdit{self}, size)
}
func (self methodsTextEdit) GetTabSize() int64 {
	return self.Runtime.TextEdit_get_tab_size(TextEdit{self})
}
func (self methodsTextEdit) SetOvertypeModeEnabled(enabled bool) {
	self.Runtime.TextEdit_set_overtype_mode_enabled(TextEdit{self}, enabled)
}
func (self methodsTextEdit) IsOvertypeModeEnabled() bool {
	return self.Runtime.TextEdit_is_overtype_mode_enabled(TextEdit{self})
}
func (self methodsTextEdit) SetContextMenuEnabled(enabled bool) {
	self.Runtime.TextEdit_set_context_menu_enabled(TextEdit{self}, enabled)
}
func (self methodsTextEdit) IsContextMenuEnabled() bool {
	return self.Runtime.TextEdit_is_context_menu_enabled(TextEdit{self})
}
func (self methodsTextEdit) SetShortcutKeysEnabled(enabled bool) {
	self.Runtime.TextEdit_set_shortcut_keys_enabled(TextEdit{self}, enabled)
}
func (self methodsTextEdit) IsShortcutKeysEnabled() bool {
	return self.Runtime.TextEdit_is_shortcut_keys_enabled(TextEdit{self})
}
func (self methodsTextEdit) SetVirtualKeyboardEnabled(enabled bool) {
	self.Runtime.TextEdit_set_virtual_keyboard_enabled(TextEdit{self}, enabled)
}
func (self methodsTextEdit) IsVirtualKeyboardEnabled() bool {
	return self.Runtime.TextEdit_is_virtual_keyboard_enabled(TextEdit{self})
}
func (self methodsTextEdit) SetMiddleMousePasteEnabled(enabled bool) {
	self.Runtime.TextEdit_set_middle_mouse_paste_enabled(TextEdit{self}, enabled)
}
func (self methodsTextEdit) IsMiddleMousePasteEnabled() bool {
	return self.Runtime.TextEdit_is_middle_mouse_paste_enabled(TextEdit{self})
}
func (self methodsTextEdit) Clear() {
	self.Runtime.TextEdit_clear(TextEdit{self})
}
func (self methodsTextEdit) SetText(text string) {
	self.Runtime.TextEdit_set_text(TextEdit{self}, text)
}
func (self methodsTextEdit) GetText() string {
	return self.Runtime.TextEdit_get_text(TextEdit{self})
}
func (self methodsTextEdit) GetLineCount() int64 {
	return self.Runtime.TextEdit_get_line_count(TextEdit{self})
}
func (self methodsTextEdit) SetPlaceholder(text string) {
	self.Runtime.TextEdit_set_placeholder(TextEdit{self}, text)
}
func (self methodsTextEdit) GetPlaceholder() string {
	return self.Runtime.TextEdit_get_placeholder(TextEdit{self})
}
func (self methodsTextEdit) SetLine(line int64, new_text string) {
	self.Runtime.TextEdit_set_line(TextEdit{self}, line, new_text)
}
func (self methodsTextEdit) GetLine(line int64) string {
	return self.Runtime.TextEdit_get_line(TextEdit{self}, line)
}
func (self methodsTextEdit) GetLineWidth(line int64, wrap_index int64) int64 {
	return self.Runtime.TextEdit_get_line_width(TextEdit{self}, line, wrap_index)
}
func (self methodsTextEdit) GetLineHeight() int64 {
	return self.Runtime.TextEdit_get_line_height(TextEdit{self})
}
func (self methodsTextEdit) GetIndentLevel(line int64) int64 {
	return self.Runtime.TextEdit_get_indent_level(TextEdit{self}, line)
}
func (self methodsTextEdit) GetFirstNonWhitespaceColumn(line int64) int64 {
	return self.Runtime.TextEdit_get_first_non_whitespace_column(TextEdit{self}, line)
}
func (self methodsTextEdit) SwapLines(from_line int64, to_line int64) {
	self.Runtime.TextEdit_swap_lines(TextEdit{self}, from_line, to_line)
}
func (self methodsTextEdit) InsertLineAt(line int64, text string) {
	self.Runtime.TextEdit_insert_line_at(TextEdit{self}, line, text)
}
func (self methodsTextEdit) InsertTextAtCaret(text string, caret_index int64) {
	self.Runtime.TextEdit_insert_text_at_caret(TextEdit{self}, text, caret_index)
}
func (self methodsTextEdit) RemoveText(from_line int64, from_column int64, to_line int64, to_column int64) {
	self.Runtime.TextEdit_remove_text(TextEdit{self}, from_line, from_column, to_line, to_column)
}
func (self methodsTextEdit) GetLastUnhiddenLine() int64 {
	return self.Runtime.TextEdit_get_last_unhidden_line(TextEdit{self})
}
func (self methodsTextEdit) GetNextVisibleLineOffsetFrom(line int64, visible_amount int64) int64 {
	return self.Runtime.TextEdit_get_next_visible_line_offset_from(TextEdit{self}, line, visible_amount)
}
func (self methodsTextEdit) GetNextVisibleLineIndexOffsetFrom(line int64, wrap_index int64, visible_amount int64) Vector2i {
	return self.Runtime.TextEdit_get_next_visible_line_index_offset_from(TextEdit{self}, line, wrap_index, visible_amount)
}
func (self methodsTextEdit) Backspace(caret_index int64) {
	self.Runtime.TextEdit_backspace(TextEdit{self}, caret_index)
}
func (self methodsTextEdit) Cut(caret_index int64) {
	self.Runtime.TextEdit_cut(TextEdit{self}, caret_index)
}
func (self methodsTextEdit) Copy(caret_index int64) {
	self.Runtime.TextEdit_copy(TextEdit{self}, caret_index)
}
func (self methodsTextEdit) Paste(caret_index int64) {
	self.Runtime.TextEdit_paste(TextEdit{self}, caret_index)
}
func (self methodsTextEdit) PastePrimaryClipboard(caret_index int64) {
	self.Runtime.TextEdit_paste_primary_clipboard(TextEdit{self}, caret_index)
}
func (self methodsTextEdit) StartAction(action TextEditEditAction) {
	self.Runtime.TextEdit_start_action(TextEdit{self}, action)
}
func (self methodsTextEdit) EndAction() {
	self.Runtime.TextEdit_end_action(TextEdit{self})
}
func (self methodsTextEdit) BeginComplexOperation() {
	self.Runtime.TextEdit_begin_complex_operation(TextEdit{self})
}
func (self methodsTextEdit) EndComplexOperation() {
	self.Runtime.TextEdit_end_complex_operation(TextEdit{self})
}
func (self methodsTextEdit) HasUndo() bool {
	return self.Runtime.TextEdit_has_undo(TextEdit{self})
}
func (self methodsTextEdit) HasRedo() bool {
	return self.Runtime.TextEdit_has_redo(TextEdit{self})
}
func (self methodsTextEdit) Undo() {
	self.Runtime.TextEdit_undo(TextEdit{self})
}
func (self methodsTextEdit) Redo() {
	self.Runtime.TextEdit_redo(TextEdit{self})
}
func (self methodsTextEdit) ClearUndoHistory() {
	self.Runtime.TextEdit_clear_undo_history(TextEdit{self})
}
func (self methodsTextEdit) TagSavedVersion() {
	self.Runtime.TextEdit_tag_saved_version(TextEdit{self})
}
func (self methodsTextEdit) GetVersion() int64 {
	return self.Runtime.TextEdit_get_version(TextEdit{self})
}
func (self methodsTextEdit) GetSavedVersion() int64 {
	return self.Runtime.TextEdit_get_saved_version(TextEdit{self})
}
func (self methodsTextEdit) SetSearchText(search_text string) {
	self.Runtime.TextEdit_set_search_text(TextEdit{self}, search_text)
}
func (self methodsTextEdit) SetSearchFlags(flags int64) {
	self.Runtime.TextEdit_set_search_flags(TextEdit{self}, flags)
}
func (self methodsTextEdit) Search(text string, flags int64, from_line int64, from_colum int64) Vector2i {
	return self.Runtime.TextEdit_search(TextEdit{self}, text, flags, from_line, from_colum)
}
func (self methodsTextEdit) SetTooltipRequestFunc(callback Callable) {
	self.Runtime.TextEdit_set_tooltip_request_func(TextEdit{self}, callback)
}
func (self methodsTextEdit) GetLocalMousePos() Vector2 {
	return self.Runtime.TextEdit_get_local_mouse_pos(TextEdit{self})
}
func (self methodsTextEdit) GetWordAtPos(position Vector2) string {
	return self.Runtime.TextEdit_get_word_at_pos(TextEdit{self}, position)
}
func (self methodsTextEdit) GetLineColumnAtPos(position Vector2i, allow_out_of_bounds bool) Vector2i {
	return self.Runtime.TextEdit_get_line_column_at_pos(TextEdit{self}, position, allow_out_of_bounds)
}
func (self methodsTextEdit) GetPosAtLineColumn(line int64, column int64) Vector2i {
	return self.Runtime.TextEdit_get_pos_at_line_column(TextEdit{self}, line, column)
}
func (self methodsTextEdit) GetRectAtLineColumn(line int64, column int64) Rect2i {
	return self.Runtime.TextEdit_get_rect_at_line_column(TextEdit{self}, line, column)
}
func (self methodsTextEdit) GetMinimapLineAtPos(position Vector2i) int64 {
	return self.Runtime.TextEdit_get_minimap_line_at_pos(TextEdit{self}, position)
}
func (self methodsTextEdit) IsDraggingCursor() bool {
	return self.Runtime.TextEdit_is_dragging_cursor(TextEdit{self})
}
func (self methodsTextEdit) IsMouseOverSelection(edges bool, caret_index int64) bool {
	return self.Runtime.TextEdit_is_mouse_over_selection(TextEdit{self}, edges, caret_index)
}
func (self methodsTextEdit) SetCaretType(atype TextEditCaretType) {
	self.Runtime.TextEdit_set_caret_type(TextEdit{self}, atype)
}
func (self methodsTextEdit) GetCaretType() TextEditCaretType {
	return self.Runtime.TextEdit_get_caret_type(TextEdit{self})
}
func (self methodsTextEdit) SetCaretBlinkEnabled(enable bool) {
	self.Runtime.TextEdit_set_caret_blink_enabled(TextEdit{self}, enable)
}
func (self methodsTextEdit) IsCaretBlinkEnabled() bool {
	return self.Runtime.TextEdit_is_caret_blink_enabled(TextEdit{self})
}
func (self methodsTextEdit) SetCaretBlinkInterval(interval Float) {
	self.Runtime.TextEdit_set_caret_blink_interval(TextEdit{self}, interval)
}
func (self methodsTextEdit) GetCaretBlinkInterval() Float {
	return self.Runtime.TextEdit_get_caret_blink_interval(TextEdit{self})
}
func (self methodsTextEdit) SetDrawCaretWhenEditableDisabled(enable bool) {
	self.Runtime.TextEdit_set_draw_caret_when_editable_disabled(TextEdit{self}, enable)
}
func (self methodsTextEdit) IsDrawingCaretWhenEditableDisabled() bool {
	return self.Runtime.TextEdit_is_drawing_caret_when_editable_disabled(TextEdit{self})
}
func (self methodsTextEdit) SetMoveCaretOnRightClickEnabled(enable bool) {
	self.Runtime.TextEdit_set_move_caret_on_right_click_enabled(TextEdit{self}, enable)
}
func (self methodsTextEdit) IsMoveCaretOnRightClickEnabled() bool {
	return self.Runtime.TextEdit_is_move_caret_on_right_click_enabled(TextEdit{self})
}
func (self methodsTextEdit) SetCaretMidGraphemeEnabled(enabled bool) {
	self.Runtime.TextEdit_set_caret_mid_grapheme_enabled(TextEdit{self}, enabled)
}
func (self methodsTextEdit) IsCaretMidGraphemeEnabled() bool {
	return self.Runtime.TextEdit_is_caret_mid_grapheme_enabled(TextEdit{self})
}
func (self methodsTextEdit) SetMultipleCaretsEnabled(enabled bool) {
	self.Runtime.TextEdit_set_multiple_carets_enabled(TextEdit{self}, enabled)
}
func (self methodsTextEdit) IsMultipleCaretsEnabled() bool {
	return self.Runtime.TextEdit_is_multiple_carets_enabled(TextEdit{self})
}
func (self methodsTextEdit) AddCaret(line int64, col int64) int64 {
	return self.Runtime.TextEdit_add_caret(TextEdit{self}, line, col)
}
func (self methodsTextEdit) RemoveCaret(caret int64) {
	self.Runtime.TextEdit_remove_caret(TextEdit{self}, caret)
}
func (self methodsTextEdit) RemoveSecondaryCarets() {
	self.Runtime.TextEdit_remove_secondary_carets(TextEdit{self})
}
func (self methodsTextEdit) MergeOverlappingCarets() {
	self.Runtime.TextEdit_merge_overlapping_carets(TextEdit{self})
}
func (self methodsTextEdit) GetCaretCount() int64 {
	return self.Runtime.TextEdit_get_caret_count(TextEdit{self})
}
func (self methodsTextEdit) AddCaretAtCarets(below bool) {
	self.Runtime.TextEdit_add_caret_at_carets(TextEdit{self}, below)
}
func (self methodsTextEdit) GetCaretIndexEditOrder() PackedInt32Array {
	return self.Runtime.TextEdit_get_caret_index_edit_order(TextEdit{self})
}
func (self methodsTextEdit) AdjustCaretsAfterEdit(caret int64, from_line int64, from_col int64, to_line int64, to_col int64) {
	self.Runtime.TextEdit_adjust_carets_after_edit(TextEdit{self}, caret, from_line, from_col, to_line, to_col)
}
func (self methodsTextEdit) IsCaretVisible(caret_index int64) bool {
	return self.Runtime.TextEdit_is_caret_visible(TextEdit{self}, caret_index)
}
func (self methodsTextEdit) GetCaretDrawPos(caret_index int64) Vector2 {
	return self.Runtime.TextEdit_get_caret_draw_pos(TextEdit{self}, caret_index)
}
func (self methodsTextEdit) SetCaretLine(line int64, adjust_viewport bool, can_be_hidden bool, wrap_index int64, caret_index int64) {
	self.Runtime.TextEdit_set_caret_line(TextEdit{self}, line, adjust_viewport, can_be_hidden, wrap_index, caret_index)
}
func (self methodsTextEdit) GetCaretLine(caret_index int64) int64 {
	return self.Runtime.TextEdit_get_caret_line(TextEdit{self}, caret_index)
}
func (self methodsTextEdit) SetCaretColumn(column int64, adjust_viewport bool, caret_index int64) {
	self.Runtime.TextEdit_set_caret_column(TextEdit{self}, column, adjust_viewport, caret_index)
}
func (self methodsTextEdit) GetCaretColumn(caret_index int64) int64 {
	return self.Runtime.TextEdit_get_caret_column(TextEdit{self}, caret_index)
}
func (self methodsTextEdit) GetCaretWrapIndex(caret_index int64) int64 {
	return self.Runtime.TextEdit_get_caret_wrap_index(TextEdit{self}, caret_index)
}
func (self methodsTextEdit) GetWordUnderCaret(caret_index int64) string {
	return self.Runtime.TextEdit_get_word_under_caret(TextEdit{self}, caret_index)
}
func (self methodsTextEdit) SetSelectingEnabled(enable bool) {
	self.Runtime.TextEdit_set_selecting_enabled(TextEdit{self}, enable)
}
func (self methodsTextEdit) IsSelectingEnabled() bool {
	return self.Runtime.TextEdit_is_selecting_enabled(TextEdit{self})
}
func (self methodsTextEdit) SetDeselectOnFocusLossEnabled(enable bool) {
	self.Runtime.TextEdit_set_deselect_on_focus_loss_enabled(TextEdit{self}, enable)
}
func (self methodsTextEdit) IsDeselectOnFocusLossEnabled() bool {
	return self.Runtime.TextEdit_is_deselect_on_focus_loss_enabled(TextEdit{self})
}
func (self methodsTextEdit) SetDragAndDropSelectionEnabled(enable bool) {
	self.Runtime.TextEdit_set_drag_and_drop_selection_enabled(TextEdit{self}, enable)
}
func (self methodsTextEdit) IsDragAndDropSelectionEnabled() bool {
	return self.Runtime.TextEdit_is_drag_and_drop_selection_enabled(TextEdit{self})
}
func (self methodsTextEdit) SetSelectionMode(mode TextEditSelectionMode, line int64, column int64, caret_index int64) {
	self.Runtime.TextEdit_set_selection_mode(TextEdit{self}, mode, line, column, caret_index)
}
func (self methodsTextEdit) GetSelectionMode() TextEditSelectionMode {
	return self.Runtime.TextEdit_get_selection_mode(TextEdit{self})
}
func (self methodsTextEdit) SelectAll() {
	self.Runtime.TextEdit_select_all(TextEdit{self})
}
func (self methodsTextEdit) SelectWordUnderCaret(caret_index int64) {
	self.Runtime.TextEdit_select_word_under_caret(TextEdit{self}, caret_index)
}
func (self methodsTextEdit) AddSelectionForNextOccurrence() {
	self.Runtime.TextEdit_add_selection_for_next_occurrence(TextEdit{self})
}
func (self methodsTextEdit) Select(from_line int64, from_column int64, to_line int64, to_column int64, caret_index int64) {
	self.Runtime.TextEdit_select(TextEdit{self}, from_line, from_column, to_line, to_column, caret_index)
}
func (self methodsTextEdit) HasSelection(caret_index int64) bool {
	return self.Runtime.TextEdit_has_selection(TextEdit{self}, caret_index)
}
func (self methodsTextEdit) GetSelectedText(caret_index int64) string {
	return self.Runtime.TextEdit_get_selected_text(TextEdit{self}, caret_index)
}
func (self methodsTextEdit) GetSelectionLine(caret_index int64) int64 {
	return self.Runtime.TextEdit_get_selection_line(TextEdit{self}, caret_index)
}
func (self methodsTextEdit) GetSelectionColumn(caret_index int64) int64 {
	return self.Runtime.TextEdit_get_selection_column(TextEdit{self}, caret_index)
}
func (self methodsTextEdit) GetSelectionFromLine(caret_index int64) int64 {
	return self.Runtime.TextEdit_get_selection_from_line(TextEdit{self}, caret_index)
}
func (self methodsTextEdit) GetSelectionFromColumn(caret_index int64) int64 {
	return self.Runtime.TextEdit_get_selection_from_column(TextEdit{self}, caret_index)
}
func (self methodsTextEdit) GetSelectionToLine(caret_index int64) int64 {
	return self.Runtime.TextEdit_get_selection_to_line(TextEdit{self}, caret_index)
}
func (self methodsTextEdit) GetSelectionToColumn(caret_index int64) int64 {
	return self.Runtime.TextEdit_get_selection_to_column(TextEdit{self}, caret_index)
}
func (self methodsTextEdit) Deselect(caret_index int64) {
	self.Runtime.TextEdit_deselect(TextEdit{self}, caret_index)
}
func (self methodsTextEdit) DeleteSelection(caret_index int64) {
	self.Runtime.TextEdit_delete_selection(TextEdit{self}, caret_index)
}
func (self methodsTextEdit) SetLineWrappingMode(mode TextEditLineWrappingMode) {
	self.Runtime.TextEdit_set_line_wrapping_mode(TextEdit{self}, mode)
}
func (self methodsTextEdit) GetLineWrappingMode() TextEditLineWrappingMode {
	return self.Runtime.TextEdit_get_line_wrapping_mode(TextEdit{self})
}
func (self methodsTextEdit) SetAutowrapMode(autowrap_mode TextServerAutowrapMode) {
	self.Runtime.TextEdit_set_autowrap_mode(TextEdit{self}, autowrap_mode)
}
func (self methodsTextEdit) GetAutowrapMode() TextServerAutowrapMode {
	return self.Runtime.TextEdit_get_autowrap_mode(TextEdit{self})
}
func (self methodsTextEdit) IsLineWrapped(line int64) bool {
	return self.Runtime.TextEdit_is_line_wrapped(TextEdit{self}, line)
}
func (self methodsTextEdit) GetLineWrapCount(line int64) int64 {
	return self.Runtime.TextEdit_get_line_wrap_count(TextEdit{self}, line)
}
func (self methodsTextEdit) GetLineWrapIndexAtColumn(line int64, column int64) int64 {
	return self.Runtime.TextEdit_get_line_wrap_index_at_column(TextEdit{self}, line, column)
}
func (self methodsTextEdit) GetLineWrappedText(line int64) PackedStringArray {
	return self.Runtime.TextEdit_get_line_wrapped_text(TextEdit{self}, line)
}
func (self methodsTextEdit) SetSmoothScrollEnabled(enable bool) {
	self.Runtime.TextEdit_set_smooth_scroll_enabled(TextEdit{self}, enable)
}
func (self methodsTextEdit) IsSmoothScrollEnabled() bool {
	return self.Runtime.TextEdit_is_smooth_scroll_enabled(TextEdit{self})
}
func (self methodsTextEdit) GetVScrollBar() VScrollBar {
	return self.Runtime.TextEdit_get_v_scroll_bar(TextEdit{self})
}
func (self methodsTextEdit) GetHScrollBar() HScrollBar {
	return self.Runtime.TextEdit_get_h_scroll_bar(TextEdit{self})
}
func (self methodsTextEdit) SetVScroll(value Float) {
	self.Runtime.TextEdit_set_v_scroll(TextEdit{self}, value)
}
func (self methodsTextEdit) GetVScroll() Float {
	return self.Runtime.TextEdit_get_v_scroll(TextEdit{self})
}
func (self methodsTextEdit) SetHScroll(value int64) {
	self.Runtime.TextEdit_set_h_scroll(TextEdit{self}, value)
}
func (self methodsTextEdit) GetHScroll() int64 {
	return self.Runtime.TextEdit_get_h_scroll(TextEdit{self})
}
func (self methodsTextEdit) SetScrollPastEndOfFileEnabled(enable bool) {
	self.Runtime.TextEdit_set_scroll_past_end_of_file_enabled(TextEdit{self}, enable)
}
func (self methodsTextEdit) IsScrollPastEndOfFileEnabled() bool {
	return self.Runtime.TextEdit_is_scroll_past_end_of_file_enabled(TextEdit{self})
}
func (self methodsTextEdit) SetVScrollSpeed(speed Float) {
	self.Runtime.TextEdit_set_v_scroll_speed(TextEdit{self}, speed)
}
func (self methodsTextEdit) GetVScrollSpeed() Float {
	return self.Runtime.TextEdit_get_v_scroll_speed(TextEdit{self})
}
func (self methodsTextEdit) SetFitContentHeightEnabled(enabled bool) {
	self.Runtime.TextEdit_set_fit_content_height_enabled(TextEdit{self}, enabled)
}
func (self methodsTextEdit) IsFitContentHeightEnabled() bool {
	return self.Runtime.TextEdit_is_fit_content_height_enabled(TextEdit{self})
}
func (self methodsTextEdit) GetScrollPosForLine(line int64, wrap_index int64) Float {
	return self.Runtime.TextEdit_get_scroll_pos_for_line(TextEdit{self}, line, wrap_index)
}
func (self methodsTextEdit) SetLineAsFirstVisible(line int64, wrap_index int64) {
	self.Runtime.TextEdit_set_line_as_first_visible(TextEdit{self}, line, wrap_index)
}
func (self methodsTextEdit) GetFirstVisibleLine() int64 {
	return self.Runtime.TextEdit_get_first_visible_line(TextEdit{self})
}
func (self methodsTextEdit) SetLineAsCenterVisible(line int64, wrap_index int64) {
	self.Runtime.TextEdit_set_line_as_center_visible(TextEdit{self}, line, wrap_index)
}
func (self methodsTextEdit) SetLineAsLastVisible(line int64, wrap_index int64) {
	self.Runtime.TextEdit_set_line_as_last_visible(TextEdit{self}, line, wrap_index)
}
func (self methodsTextEdit) GetLastFullVisibleLine() int64 {
	return self.Runtime.TextEdit_get_last_full_visible_line(TextEdit{self})
}
func (self methodsTextEdit) GetLastFullVisibleLineWrapIndex() int64 {
	return self.Runtime.TextEdit_get_last_full_visible_line_wrap_index(TextEdit{self})
}
func (self methodsTextEdit) GetVisibleLineCount() int64 {
	return self.Runtime.TextEdit_get_visible_line_count(TextEdit{self})
}
func (self methodsTextEdit) GetVisibleLineCountInRange(from_line int64, to_line int64) int64 {
	return self.Runtime.TextEdit_get_visible_line_count_in_range(TextEdit{self}, from_line, to_line)
}
func (self methodsTextEdit) GetTotalVisibleLineCount() int64 {
	return self.Runtime.TextEdit_get_total_visible_line_count(TextEdit{self})
}
func (self methodsTextEdit) AdjustViewportToCaret(caret_index int64) {
	self.Runtime.TextEdit_adjust_viewport_to_caret(TextEdit{self}, caret_index)
}
func (self methodsTextEdit) CenterViewportToCaret(caret_index int64) {
	self.Runtime.TextEdit_center_viewport_to_caret(TextEdit{self}, caret_index)
}
func (self methodsTextEdit) SetDrawMinimap(enabled bool) {
	self.Runtime.TextEdit_set_draw_minimap(TextEdit{self}, enabled)
}
func (self methodsTextEdit) IsDrawingMinimap() bool {
	return self.Runtime.TextEdit_is_drawing_minimap(TextEdit{self})
}
func (self methodsTextEdit) SetMinimapWidth(width int64) {
	self.Runtime.TextEdit_set_minimap_width(TextEdit{self}, width)
}
func (self methodsTextEdit) GetMinimapWidth() int64 {
	return self.Runtime.TextEdit_get_minimap_width(TextEdit{self})
}
func (self methodsTextEdit) GetMinimapVisibleLines() int64 {
	return self.Runtime.TextEdit_get_minimap_visible_lines(TextEdit{self})
}
func (self methodsTextEdit) AddGutter(at int64) {
	self.Runtime.TextEdit_add_gutter(TextEdit{self}, at)
}
func (self methodsTextEdit) RemoveGutter(gutter int64) {
	self.Runtime.TextEdit_remove_gutter(TextEdit{self}, gutter)
}
func (self methodsTextEdit) GetGutterCount() int64 {
	return self.Runtime.TextEdit_get_gutter_count(TextEdit{self})
}
func (self methodsTextEdit) SetGutterName(gutter int64, name string) {
	self.Runtime.TextEdit_set_gutter_name(TextEdit{self}, gutter, name)
}
func (self methodsTextEdit) GetGutterName(gutter int64) string {
	return self.Runtime.TextEdit_get_gutter_name(TextEdit{self}, gutter)
}
func (self methodsTextEdit) SetGutterType(gutter int64, atype TextEditGutterType) {
	self.Runtime.TextEdit_set_gutter_type(TextEdit{self}, gutter, atype)
}
func (self methodsTextEdit) GetGutterType(gutter int64) TextEditGutterType {
	return self.Runtime.TextEdit_get_gutter_type(TextEdit{self}, gutter)
}
func (self methodsTextEdit) SetGutterWidth(gutter int64, width int64) {
	self.Runtime.TextEdit_set_gutter_width(TextEdit{self}, gutter, width)
}
func (self methodsTextEdit) GetGutterWidth(gutter int64) int64 {
	return self.Runtime.TextEdit_get_gutter_width(TextEdit{self}, gutter)
}
func (self methodsTextEdit) SetGutterDraw(gutter int64, draw bool) {
	self.Runtime.TextEdit_set_gutter_draw(TextEdit{self}, gutter, draw)
}
func (self methodsTextEdit) IsGutterDrawn(gutter int64) bool {
	return self.Runtime.TextEdit_is_gutter_drawn(TextEdit{self}, gutter)
}
func (self methodsTextEdit) SetGutterClickable(gutter int64, clickable bool) {
	self.Runtime.TextEdit_set_gutter_clickable(TextEdit{self}, gutter, clickable)
}
func (self methodsTextEdit) IsGutterClickable(gutter int64) bool {
	return self.Runtime.TextEdit_is_gutter_clickable(TextEdit{self}, gutter)
}
func (self methodsTextEdit) SetGutterOverwritable(gutter int64, overwritable bool) {
	self.Runtime.TextEdit_set_gutter_overwritable(TextEdit{self}, gutter, overwritable)
}
func (self methodsTextEdit) IsGutterOverwritable(gutter int64) bool {
	return self.Runtime.TextEdit_is_gutter_overwritable(TextEdit{self}, gutter)
}
func (self methodsTextEdit) MergeGutters(from_line int64, to_line int64) {
	self.Runtime.TextEdit_merge_gutters(TextEdit{self}, from_line, to_line)
}
func (self methodsTextEdit) SetGutterCustomDraw(column int64, draw_callback Callable) {
	self.Runtime.TextEdit_set_gutter_custom_draw(TextEdit{self}, column, draw_callback)
}
func (self methodsTextEdit) GetTotalGutterWidth() int64 {
	return self.Runtime.TextEdit_get_total_gutter_width(TextEdit{self})
}
func (self methodsTextEdit) SetLineGutterMetadata(line int64, gutter int64, metadata any) {
	self.Runtime.TextEdit_set_line_gutter_metadata(TextEdit{self}, line, gutter, metadata)
}
func (self methodsTextEdit) GetLineGutterMetadata(line int64, gutter int64) any {
	return self.Runtime.TextEdit_get_line_gutter_metadata(TextEdit{self}, line, gutter)
}
func (self methodsTextEdit) SetLineGutterText(line int64, gutter int64, text string) {
	self.Runtime.TextEdit_set_line_gutter_text(TextEdit{self}, line, gutter, text)
}
func (self methodsTextEdit) GetLineGutterText(line int64, gutter int64) string {
	return self.Runtime.TextEdit_get_line_gutter_text(TextEdit{self}, line, gutter)
}
func (self methodsTextEdit) SetLineGutterIcon(line int64, gutter int64, icon Texture2D) {
	self.Runtime.TextEdit_set_line_gutter_icon(TextEdit{self}, line, gutter, icon)
}
func (self methodsTextEdit) GetLineGutterIcon(line int64, gutter int64) Texture2D {
	return self.Runtime.TextEdit_get_line_gutter_icon(TextEdit{self}, line, gutter)
}
func (self methodsTextEdit) SetLineGutterItemColor(line int64, gutter int64, color Color) {
	self.Runtime.TextEdit_set_line_gutter_item_color(TextEdit{self}, line, gutter, color)
}
func (self methodsTextEdit) GetLineGutterItemColor(line int64, gutter int64) Color {
	return self.Runtime.TextEdit_get_line_gutter_item_color(TextEdit{self}, line, gutter)
}
func (self methodsTextEdit) SetLineGutterClickable(line int64, gutter int64, clickable bool) {
	self.Runtime.TextEdit_set_line_gutter_clickable(TextEdit{self}, line, gutter, clickable)
}
func (self methodsTextEdit) IsLineGutterClickable(line int64, gutter int64) bool {
	return self.Runtime.TextEdit_is_line_gutter_clickable(TextEdit{self}, line, gutter)
}
func (self methodsTextEdit) SetLineBackgroundColor(line int64, color Color) {
	self.Runtime.TextEdit_set_line_background_color(TextEdit{self}, line, color)
}
func (self methodsTextEdit) GetLineBackgroundColor(line int64) Color {
	return self.Runtime.TextEdit_get_line_background_color(TextEdit{self}, line)
}
func (self methodsTextEdit) SetSyntaxHighlighter(syntax_highlighter SyntaxHighlighter) {
	self.Runtime.TextEdit_set_syntax_highlighter(TextEdit{self}, syntax_highlighter)
}
func (self methodsTextEdit) GetSyntaxHighlighter() SyntaxHighlighter {
	return self.Runtime.TextEdit_get_syntax_highlighter(TextEdit{self})
}
func (self methodsTextEdit) SetHighlightCurrentLine(enabled bool) {
	self.Runtime.TextEdit_set_highlight_current_line(TextEdit{self}, enabled)
}
func (self methodsTextEdit) IsHighlightCurrentLineEnabled() bool {
	return self.Runtime.TextEdit_is_highlight_current_line_enabled(TextEdit{self})
}
func (self methodsTextEdit) SetHighlightAllOccurrences(enabled bool) {
	self.Runtime.TextEdit_set_highlight_all_occurrences(TextEdit{self}, enabled)
}
func (self methodsTextEdit) IsHighlightAllOccurrencesEnabled() bool {
	return self.Runtime.TextEdit_is_highlight_all_occurrences_enabled(TextEdit{self})
}
func (self methodsTextEdit) GetDrawControlChars() bool {
	return self.Runtime.TextEdit_get_draw_control_chars(TextEdit{self})
}
func (self methodsTextEdit) SetDrawControlChars(enabled bool) {
	self.Runtime.TextEdit_set_draw_control_chars(TextEdit{self}, enabled)
}
func (self methodsTextEdit) SetDrawTabs(enabled bool) {
	self.Runtime.TextEdit_set_draw_tabs(TextEdit{self}, enabled)
}
func (self methodsTextEdit) IsDrawingTabs() bool {
	return self.Runtime.TextEdit_is_drawing_tabs(TextEdit{self})
}
func (self methodsTextEdit) SetDrawSpaces(enabled bool) {
	self.Runtime.TextEdit_set_draw_spaces(TextEdit{self}, enabled)
}
func (self methodsTextEdit) IsDrawingSpaces() bool {
	return self.Runtime.TextEdit_is_drawing_spaces(TextEdit{self})
}
func (self methodsTextEdit) GetMenu() PopupMenu {
	return self.Runtime.TextEdit_get_menu(TextEdit{self})
}
func (self methodsTextEdit) IsMenuVisible() bool {
	return self.Runtime.TextEdit_is_menu_visible(TextEdit{self})
}
func (self methodsTextEdit) MenuOption(option int64) {
	self.Runtime.TextEdit_menu_option(TextEdit{self}, option)
}

type methodsTextLine struct {
	_ [0]*methodsTextLine
	class
}

func (self TextLine) RefCounted() RefCounted {
	var parent RefCounted
	parent.class = self.class
	return parent
}
func (self methodsTextLine) Clear() {
	self.Runtime.TextLine_clear(TextLine{self})
}
func (self methodsTextLine) SetDirection(direction TextServerDirection) {
	self.Runtime.TextLine_set_direction(TextLine{self}, direction)
}
func (self methodsTextLine) GetDirection() TextServerDirection {
	return self.Runtime.TextLine_get_direction(TextLine{self})
}
func (self methodsTextLine) SetOrientation(orientation TextServerOrientation) {
	self.Runtime.TextLine_set_orientation(TextLine{self}, orientation)
}
func (self methodsTextLine) GetOrientation() TextServerOrientation {
	return self.Runtime.TextLine_get_orientation(TextLine{self})
}
func (self methodsTextLine) SetPreserveInvalid(enabled bool) {
	self.Runtime.TextLine_set_preserve_invalid(TextLine{self}, enabled)
}
func (self methodsTextLine) GetPreserveInvalid() bool {
	return self.Runtime.TextLine_get_preserve_invalid(TextLine{self})
}
func (self methodsTextLine) SetPreserveControl(enabled bool) {
	self.Runtime.TextLine_set_preserve_control(TextLine{self}, enabled)
}
func (self methodsTextLine) GetPreserveControl() bool {
	return self.Runtime.TextLine_get_preserve_control(TextLine{self})
}
func (self methodsTextLine) SetBidiOverride(override Array) {
	self.Runtime.TextLine_set_bidi_override(TextLine{self}, override)
}
func (self methodsTextLine) AddString(text string, font Font, font_size int64, language string, meta any) bool {
	return self.Runtime.TextLine_add_string(TextLine{self}, text, font, font_size, language, meta)
}
func (self methodsTextLine) AddObject(key any, size Vector2, inline_align InlineAlignment, length int64, baseline Float) bool {
	return self.Runtime.TextLine_add_object(TextLine{self}, key, size, inline_align, length, baseline)
}
func (self methodsTextLine) ResizeObject(key any, size Vector2, inline_align InlineAlignment, baseline Float) bool {
	return self.Runtime.TextLine_resize_object(TextLine{self}, key, size, inline_align, baseline)
}
func (self methodsTextLine) SetWidth(width Float) {
	self.Runtime.TextLine_set_width(TextLine{self}, width)
}
func (self methodsTextLine) GetWidth() Float {
	return self.Runtime.TextLine_get_width(TextLine{self})
}
func (self methodsTextLine) SetHorizontalAlignment(alignment HorizontalAlignment) {
	self.Runtime.TextLine_set_horizontal_alignment(TextLine{self}, alignment)
}
func (self methodsTextLine) GetHorizontalAlignment() HorizontalAlignment {
	return self.Runtime.TextLine_get_horizontal_alignment(TextLine{self})
}
func (self methodsTextLine) TabAlign(tab_stops PackedFloat32Array) {
	self.Runtime.TextLine_tab_align(TextLine{self}, tab_stops)
}
func (self methodsTextLine) SetFlags(flags TextServerJustificationFlag) {
	self.Runtime.TextLine_set_flags(TextLine{self}, flags)
}
func (self methodsTextLine) GetFlags() TextServerJustificationFlag {
	return self.Runtime.TextLine_get_flags(TextLine{self})
}
func (self methodsTextLine) SetTextOverrunBehavior(overrun_behavior TextServerOverrunBehavior) {
	self.Runtime.TextLine_set_text_overrun_behavior(TextLine{self}, overrun_behavior)
}
func (self methodsTextLine) GetTextOverrunBehavior() TextServerOverrunBehavior {
	return self.Runtime.TextLine_get_text_overrun_behavior(TextLine{self})
}
func (self methodsTextLine) SetEllipsisChar(char string) {
	self.Runtime.TextLine_set_ellipsis_char(TextLine{self}, char)
}
func (self methodsTextLine) GetEllipsisChar() string {
	return self.Runtime.TextLine_get_ellipsis_char(TextLine{self})
}
func (self methodsTextLine) GetObjects() Array {
	return self.Runtime.TextLine_get_objects(TextLine{self})
}
func (self methodsTextLine) GetObjectRect(key any) Rect2 {
	return self.Runtime.TextLine_get_object_rect(TextLine{self}, key)
}
func (self methodsTextLine) GetSize() Vector2 {
	return self.Runtime.TextLine_get_size(TextLine{self})
}
func (self methodsTextLine) GetRid() RID {
	return self.Runtime.TextLine_get_rid(TextLine{self})
}
func (self methodsTextLine) GetLineAscent() Float {
	return self.Runtime.TextLine_get_line_ascent(TextLine{self})
}
func (self methodsTextLine) GetLineDescent() Float {
	return self.Runtime.TextLine_get_line_descent(TextLine{self})
}
func (self methodsTextLine) GetLineWidth() Float {
	return self.Runtime.TextLine_get_line_width(TextLine{self})
}
func (self methodsTextLine) GetLineUnderlinePosition() Float {
	return self.Runtime.TextLine_get_line_underline_position(TextLine{self})
}
func (self methodsTextLine) GetLineUnderlineThickness() Float {
	return self.Runtime.TextLine_get_line_underline_thickness(TextLine{self})
}
func (self methodsTextLine) Draw(canvas RID, pos Vector2, color Color) {
	self.Runtime.TextLine_draw(TextLine{self}, canvas, pos, color)
}
func (self methodsTextLine) DrawOutline(canvas RID, pos Vector2, outline_size int64, color Color) {
	self.Runtime.TextLine_draw_outline(TextLine{self}, canvas, pos, outline_size, color)
}
func (self methodsTextLine) HitTest(coords Float) int64 {
	return self.Runtime.TextLine_hit_test(TextLine{self}, coords)
}

type methodsTextMesh struct {
	_ [0]*methodsTextMesh
	class
}

func (self TextMesh) PrimitiveMesh() PrimitiveMesh {
	var parent PrimitiveMesh
	parent.class = self.class
	return parent
}
func (self methodsTextMesh) SetHorizontalAlignment(alignment HorizontalAlignment) {
	self.Runtime.TextMesh_set_horizontal_alignment(TextMesh{self}, alignment)
}
func (self methodsTextMesh) GetHorizontalAlignment() HorizontalAlignment {
	return self.Runtime.TextMesh_get_horizontal_alignment(TextMesh{self})
}
func (self methodsTextMesh) SetVerticalAlignment(alignment VerticalAlignment) {
	self.Runtime.TextMesh_set_vertical_alignment(TextMesh{self}, alignment)
}
func (self methodsTextMesh) GetVerticalAlignment() VerticalAlignment {
	return self.Runtime.TextMesh_get_vertical_alignment(TextMesh{self})
}
func (self methodsTextMesh) SetText(text string) {
	self.Runtime.TextMesh_set_text(TextMesh{self}, text)
}
func (self methodsTextMesh) GetText() string {
	return self.Runtime.TextMesh_get_text(TextMesh{self})
}
func (self methodsTextMesh) SetFont(font Font) {
	self.Runtime.TextMesh_set_font(TextMesh{self}, font)
}
func (self methodsTextMesh) GetFont() Font {
	return self.Runtime.TextMesh_get_font(TextMesh{self})
}
func (self methodsTextMesh) SetFontSize(font_size int64) {
	self.Runtime.TextMesh_set_font_size(TextMesh{self}, font_size)
}
func (self methodsTextMesh) GetFontSize() int64 {
	return self.Runtime.TextMesh_get_font_size(TextMesh{self})
}
func (self methodsTextMesh) SetLineSpacing(line_spacing Float) {
	self.Runtime.TextMesh_set_line_spacing(TextMesh{self}, line_spacing)
}
func (self methodsTextMesh) GetLineSpacing() Float {
	return self.Runtime.TextMesh_get_line_spacing(TextMesh{self})
}
func (self methodsTextMesh) SetAutowrapMode(autowrap_mode TextServerAutowrapMode) {
	self.Runtime.TextMesh_set_autowrap_mode(TextMesh{self}, autowrap_mode)
}
func (self methodsTextMesh) GetAutowrapMode() TextServerAutowrapMode {
	return self.Runtime.TextMesh_get_autowrap_mode(TextMesh{self})
}
func (self methodsTextMesh) SetJustificationFlags(justification_flags TextServerJustificationFlag) {
	self.Runtime.TextMesh_set_justification_flags(TextMesh{self}, justification_flags)
}
func (self methodsTextMesh) GetJustificationFlags() TextServerJustificationFlag {
	return self.Runtime.TextMesh_get_justification_flags(TextMesh{self})
}
func (self methodsTextMesh) SetDepth(depth Float) {
	self.Runtime.TextMesh_set_depth(TextMesh{self}, depth)
}
func (self methodsTextMesh) GetDepth() Float {
	return self.Runtime.TextMesh_get_depth(TextMesh{self})
}
func (self methodsTextMesh) SetWidth(width Float) {
	self.Runtime.TextMesh_set_width(TextMesh{self}, width)
}
func (self methodsTextMesh) GetWidth() Float {
	return self.Runtime.TextMesh_get_width(TextMesh{self})
}
func (self methodsTextMesh) SetPixelSize(pixel_size Float) {
	self.Runtime.TextMesh_set_pixel_size(TextMesh{self}, pixel_size)
}
func (self methodsTextMesh) GetPixelSize() Float {
	return self.Runtime.TextMesh_get_pixel_size(TextMesh{self})
}
func (self methodsTextMesh) SetOffset(offset Vector2) {
	self.Runtime.TextMesh_set_offset(TextMesh{self}, offset)
}
func (self methodsTextMesh) GetOffset() Vector2 {
	return self.Runtime.TextMesh_get_offset(TextMesh{self})
}
func (self methodsTextMesh) SetCurveStep(curve_step Float) {
	self.Runtime.TextMesh_set_curve_step(TextMesh{self}, curve_step)
}
func (self methodsTextMesh) GetCurveStep() Float {
	return self.Runtime.TextMesh_get_curve_step(TextMesh{self})
}
func (self methodsTextMesh) SetTextDirection(direction TextServerDirection) {
	self.Runtime.TextMesh_set_text_direction(TextMesh{self}, direction)
}
func (self methodsTextMesh) GetTextDirection() TextServerDirection {
	return self.Runtime.TextMesh_get_text_direction(TextMesh{self})
}
func (self methodsTextMesh) SetLanguage(language string) {
	self.Runtime.TextMesh_set_language(TextMesh{self}, language)
}
func (self methodsTextMesh) GetLanguage() string {
	return self.Runtime.TextMesh_get_language(TextMesh{self})
}
func (self methodsTextMesh) SetStructuredTextBidiOverride(parser TextServerStructuredTextParser) {
	self.Runtime.TextMesh_set_structured_text_bidi_override(TextMesh{self}, parser)
}
func (self methodsTextMesh) GetStructuredTextBidiOverride() TextServerStructuredTextParser {
	return self.Runtime.TextMesh_get_structured_text_bidi_override(TextMesh{self})
}
func (self methodsTextMesh) SetStructuredTextBidiOverrideOptions(args Array) {
	self.Runtime.TextMesh_set_structured_text_bidi_override_options(TextMesh{self}, args)
}
func (self methodsTextMesh) GetStructuredTextBidiOverrideOptions() Array {
	return self.Runtime.TextMesh_get_structured_text_bidi_override_options(TextMesh{self})
}
func (self methodsTextMesh) SetUppercase(enable bool) {
	self.Runtime.TextMesh_set_uppercase(TextMesh{self}, enable)
}
func (self methodsTextMesh) IsUppercase() bool {
	return self.Runtime.TextMesh_is_uppercase(TextMesh{self})
}

type methodsTextParagraph struct {
	_ [0]*methodsTextParagraph
	class
}

func (self TextParagraph) RefCounted() RefCounted {
	var parent RefCounted
	parent.class = self.class
	return parent
}
func (self methodsTextParagraph) Clear() {
	self.Runtime.TextParagraph_clear(TextParagraph{self})
}
func (self methodsTextParagraph) SetDirection(direction TextServerDirection) {
	self.Runtime.TextParagraph_set_direction(TextParagraph{self}, direction)
}
func (self methodsTextParagraph) GetDirection() TextServerDirection {
	return self.Runtime.TextParagraph_get_direction(TextParagraph{self})
}
func (self methodsTextParagraph) SetCustomPunctuation(custom_punctuation string) {
	self.Runtime.TextParagraph_set_custom_punctuation(TextParagraph{self}, custom_punctuation)
}
func (self methodsTextParagraph) GetCustomPunctuation() string {
	return self.Runtime.TextParagraph_get_custom_punctuation(TextParagraph{self})
}
func (self methodsTextParagraph) SetOrientation(orientation TextServerOrientation) {
	self.Runtime.TextParagraph_set_orientation(TextParagraph{self}, orientation)
}
func (self methodsTextParagraph) GetOrientation() TextServerOrientation {
	return self.Runtime.TextParagraph_get_orientation(TextParagraph{self})
}
func (self methodsTextParagraph) SetPreserveInvalid(enabled bool) {
	self.Runtime.TextParagraph_set_preserve_invalid(TextParagraph{self}, enabled)
}
func (self methodsTextParagraph) GetPreserveInvalid() bool {
	return self.Runtime.TextParagraph_get_preserve_invalid(TextParagraph{self})
}
func (self methodsTextParagraph) SetPreserveControl(enabled bool) {
	self.Runtime.TextParagraph_set_preserve_control(TextParagraph{self}, enabled)
}
func (self methodsTextParagraph) GetPreserveControl() bool {
	return self.Runtime.TextParagraph_get_preserve_control(TextParagraph{self})
}
func (self methodsTextParagraph) SetBidiOverride(override Array) {
	self.Runtime.TextParagraph_set_bidi_override(TextParagraph{self}, override)
}
func (self methodsTextParagraph) SetDropcap(text string, font Font, font_size int64, dropcap_margins Rect2, language string) bool {
	return self.Runtime.TextParagraph_set_dropcap(TextParagraph{self}, text, font, font_size, dropcap_margins, language)
}
func (self methodsTextParagraph) ClearDropcap() {
	self.Runtime.TextParagraph_clear_dropcap(TextParagraph{self})
}
func (self methodsTextParagraph) AddString(text string, font Font, font_size int64, language string, meta any) bool {
	return self.Runtime.TextParagraph_add_string(TextParagraph{self}, text, font, font_size, language, meta)
}
func (self methodsTextParagraph) AddObject(key any, size Vector2, inline_align InlineAlignment, length int64, baseline Float) bool {
	return self.Runtime.TextParagraph_add_object(TextParagraph{self}, key, size, inline_align, length, baseline)
}
func (self methodsTextParagraph) ResizeObject(key any, size Vector2, inline_align InlineAlignment, baseline Float) bool {
	return self.Runtime.TextParagraph_resize_object(TextParagraph{self}, key, size, inline_align, baseline)
}
func (self methodsTextParagraph) SetAlignment(alignment HorizontalAlignment) {
	self.Runtime.TextParagraph_set_alignment(TextParagraph{self}, alignment)
}
func (self methodsTextParagraph) GetAlignment() HorizontalAlignment {
	return self.Runtime.TextParagraph_get_alignment(TextParagraph{self})
}
func (self methodsTextParagraph) TabAlign(tab_stops PackedFloat32Array) {
	self.Runtime.TextParagraph_tab_align(TextParagraph{self}, tab_stops)
}
func (self methodsTextParagraph) SetBreakFlags(flags TextServerLineBreakFlag) {
	self.Runtime.TextParagraph_set_break_flags(TextParagraph{self}, flags)
}
func (self methodsTextParagraph) GetBreakFlags() TextServerLineBreakFlag {
	return self.Runtime.TextParagraph_get_break_flags(TextParagraph{self})
}
func (self methodsTextParagraph) SetJustificationFlags(flags TextServerJustificationFlag) {
	self.Runtime.TextParagraph_set_justification_flags(TextParagraph{self}, flags)
}
func (self methodsTextParagraph) GetJustificationFlags() TextServerJustificationFlag {
	return self.Runtime.TextParagraph_get_justification_flags(TextParagraph{self})
}
func (self methodsTextParagraph) SetTextOverrunBehavior(overrun_behavior TextServerOverrunBehavior) {
	self.Runtime.TextParagraph_set_text_overrun_behavior(TextParagraph{self}, overrun_behavior)
}
func (self methodsTextParagraph) GetTextOverrunBehavior() TextServerOverrunBehavior {
	return self.Runtime.TextParagraph_get_text_overrun_behavior(TextParagraph{self})
}
func (self methodsTextParagraph) SetEllipsisChar(char string) {
	self.Runtime.TextParagraph_set_ellipsis_char(TextParagraph{self}, char)
}
func (self methodsTextParagraph) GetEllipsisChar() string {
	return self.Runtime.TextParagraph_get_ellipsis_char(TextParagraph{self})
}
func (self methodsTextParagraph) SetWidth(width Float) {
	self.Runtime.TextParagraph_set_width(TextParagraph{self}, width)
}
func (self methodsTextParagraph) GetWidth() Float {
	return self.Runtime.TextParagraph_get_width(TextParagraph{self})
}
func (self methodsTextParagraph) GetNonWrappedSize() Vector2 {
	return self.Runtime.TextParagraph_get_non_wrapped_size(TextParagraph{self})
}
func (self methodsTextParagraph) GetSize() Vector2 {
	return self.Runtime.TextParagraph_get_size(TextParagraph{self})
}
func (self methodsTextParagraph) GetRid() RID {
	return self.Runtime.TextParagraph_get_rid(TextParagraph{self})
}
func (self methodsTextParagraph) GetLineRid(line int64) RID {
	return self.Runtime.TextParagraph_get_line_rid(TextParagraph{self}, line)
}
func (self methodsTextParagraph) GetDropcapRid() RID {
	return self.Runtime.TextParagraph_get_dropcap_rid(TextParagraph{self})
}
func (self methodsTextParagraph) GetLineCount() int64 {
	return self.Runtime.TextParagraph_get_line_count(TextParagraph{self})
}
func (self methodsTextParagraph) SetMaxLinesVisible(max_lines_visible int64) {
	self.Runtime.TextParagraph_set_max_lines_visible(TextParagraph{self}, max_lines_visible)
}
func (self methodsTextParagraph) GetMaxLinesVisible() int64 {
	return self.Runtime.TextParagraph_get_max_lines_visible(TextParagraph{self})
}
func (self methodsTextParagraph) GetLineObjects(line int64) Array {
	return self.Runtime.TextParagraph_get_line_objects(TextParagraph{self}, line)
}
func (self methodsTextParagraph) GetLineObjectRect(line int64, key any) Rect2 {
	return self.Runtime.TextParagraph_get_line_object_rect(TextParagraph{self}, line, key)
}
func (self methodsTextParagraph) GetLineSize(line int64) Vector2 {
	return self.Runtime.TextParagraph_get_line_size(TextParagraph{self}, line)
}
func (self methodsTextParagraph) GetLineRange(line int64) Vector2i {
	return self.Runtime.TextParagraph_get_line_range(TextParagraph{self}, line)
}
func (self methodsTextParagraph) GetLineAscent(line int64) Float {
	return self.Runtime.TextParagraph_get_line_ascent(TextParagraph{self}, line)
}
func (self methodsTextParagraph) GetLineDescent(line int64) Float {
	return self.Runtime.TextParagraph_get_line_descent(TextParagraph{self}, line)
}
func (self methodsTextParagraph) GetLineWidth(line int64) Float {
	return self.Runtime.TextParagraph_get_line_width(TextParagraph{self}, line)
}
func (self methodsTextParagraph) GetLineUnderlinePosition(line int64) Float {
	return self.Runtime.TextParagraph_get_line_underline_position(TextParagraph{self}, line)
}
func (self methodsTextParagraph) GetLineUnderlineThickness(line int64) Float {
	return self.Runtime.TextParagraph_get_line_underline_thickness(TextParagraph{self}, line)
}
func (self methodsTextParagraph) GetDropcapSize() Vector2 {
	return self.Runtime.TextParagraph_get_dropcap_size(TextParagraph{self})
}
func (self methodsTextParagraph) GetDropcapLines() int64 {
	return self.Runtime.TextParagraph_get_dropcap_lines(TextParagraph{self})
}
func (self methodsTextParagraph) Draw(canvas RID, pos Vector2, color Color, dc_color Color) {
	self.Runtime.TextParagraph_draw(TextParagraph{self}, canvas, pos, color, dc_color)
}
func (self methodsTextParagraph) DrawOutline(canvas RID, pos Vector2, outline_size int64, color Color, dc_color Color) {
	self.Runtime.TextParagraph_draw_outline(TextParagraph{self}, canvas, pos, outline_size, color, dc_color)
}
func (self methodsTextParagraph) DrawLine(canvas RID, pos Vector2, line int64, color Color) {
	self.Runtime.TextParagraph_draw_line(TextParagraph{self}, canvas, pos, line, color)
}
func (self methodsTextParagraph) DrawLineOutline(canvas RID, pos Vector2, line int64, outline_size int64, color Color) {
	self.Runtime.TextParagraph_draw_line_outline(TextParagraph{self}, canvas, pos, line, outline_size, color)
}
func (self methodsTextParagraph) DrawDropcap(canvas RID, pos Vector2, color Color) {
	self.Runtime.TextParagraph_draw_dropcap(TextParagraph{self}, canvas, pos, color)
}
func (self methodsTextParagraph) DrawDropcapOutline(canvas RID, pos Vector2, outline_size int64, color Color) {
	self.Runtime.TextParagraph_draw_dropcap_outline(TextParagraph{self}, canvas, pos, outline_size, color)
}
func (self methodsTextParagraph) HitTest(coords Vector2) int64 {
	return self.Runtime.TextParagraph_hit_test(TextParagraph{self}, coords)
}

type methodsTextServer struct {
	_ [0]*methodsTextServer
	class
}

func (self TextServer) RefCounted() RefCounted {
	var parent RefCounted
	parent.class = self.class
	return parent
}
func (self methodsTextServer) HasFeature(feature TextServerFeature) bool {
	return self.Runtime.TextServer_has_feature(TextServer{self}, feature)
}
func (self methodsTextServer) GetName() string {
	return self.Runtime.TextServer_get_name(TextServer{self})
}
func (self methodsTextServer) GetFeatures() int64 {
	return self.Runtime.TextServer_get_features(TextServer{self})
}
func (self methodsTextServer) LoadSupportData(filename string) bool {
	return self.Runtime.TextServer_load_support_data(TextServer{self}, filename)
}
func (self methodsTextServer) GetSupportDataFilename() string {
	return self.Runtime.TextServer_get_support_data_filename(TextServer{self})
}
func (self methodsTextServer) GetSupportDataInfo() string {
	return self.Runtime.TextServer_get_support_data_info(TextServer{self})
}
func (self methodsTextServer) SaveSupportData(filename string) bool {
	return self.Runtime.TextServer_save_support_data(TextServer{self}, filename)
}
func (self methodsTextServer) IsLocaleRightToLeft(locale string) bool {
	return self.Runtime.TextServer_is_locale_right_to_left(TextServer{self}, locale)
}
func (self methodsTextServer) NameToTag(name string) int64 {
	return self.Runtime.TextServer_name_to_tag(TextServer{self}, name)
}
func (self methodsTextServer) TagToName(tag int64) string {
	return self.Runtime.TextServer_tag_to_name(TextServer{self}, tag)
}
func (self methodsTextServer) Has(rid RID) bool {
	return self.Runtime.TextServer_has(TextServer{self}, rid)
}
func (self methodsTextServer) FreeRid(rid RID) {
	self.Runtime.TextServer_free_rid(TextServer{self}, rid)
}
func (self methodsTextServer) CreateFont() RID {
	return self.Runtime.TextServer_create_font(TextServer{self})
}
func (self methodsTextServer) CreateFontLinkedVariation(font_rid RID) RID {
	return self.Runtime.TextServer_create_font_linked_variation(TextServer{self}, font_rid)
}
func (self methodsTextServer) FontSetData(font_rid RID, data PackedByteArray) {
	self.Runtime.TextServer_font_set_data(TextServer{self}, font_rid, data)
}
func (self methodsTextServer) FontSetFaceIndex(font_rid RID, face_index int64) {
	self.Runtime.TextServer_font_set_face_index(TextServer{self}, font_rid, face_index)
}
func (self methodsTextServer) FontGetFaceIndex(font_rid RID) int64 {
	return self.Runtime.TextServer_font_get_face_index(TextServer{self}, font_rid)
}
func (self methodsTextServer) FontGetFaceCount(font_rid RID) int64 {
	return self.Runtime.TextServer_font_get_face_count(TextServer{self}, font_rid)
}
func (self methodsTextServer) FontSetStyle(font_rid RID, style TextServerFontStyle) {
	self.Runtime.TextServer_font_set_style(TextServer{self}, font_rid, style)
}
func (self methodsTextServer) FontGetStyle(font_rid RID) TextServerFontStyle {
	return self.Runtime.TextServer_font_get_style(TextServer{self}, font_rid)
}
func (self methodsTextServer) FontSetName(font_rid RID, name string) {
	self.Runtime.TextServer_font_set_name(TextServer{self}, font_rid, name)
}
func (self methodsTextServer) FontGetName(font_rid RID) string {
	return self.Runtime.TextServer_font_get_name(TextServer{self}, font_rid)
}
func (self methodsTextServer) FontGetOtNameStrings(font_rid RID) Dictionary {
	return self.Runtime.TextServer_font_get_ot_name_strings(TextServer{self}, font_rid)
}
func (self methodsTextServer) FontSetStyleName(font_rid RID, name string) {
	self.Runtime.TextServer_font_set_style_name(TextServer{self}, font_rid, name)
}
func (self methodsTextServer) FontGetStyleName(font_rid RID) string {
	return self.Runtime.TextServer_font_get_style_name(TextServer{self}, font_rid)
}
func (self methodsTextServer) FontSetWeight(font_rid RID, weight int64) {
	self.Runtime.TextServer_font_set_weight(TextServer{self}, font_rid, weight)
}
func (self methodsTextServer) FontGetWeight(font_rid RID) int64 {
	return self.Runtime.TextServer_font_get_weight(TextServer{self}, font_rid)
}
func (self methodsTextServer) FontSetStretch(font_rid RID, weight int64) {
	self.Runtime.TextServer_font_set_stretch(TextServer{self}, font_rid, weight)
}
func (self methodsTextServer) FontGetStretch(font_rid RID) int64 {
	return self.Runtime.TextServer_font_get_stretch(TextServer{self}, font_rid)
}
func (self methodsTextServer) FontSetAntialiasing(font_rid RID, antialiasing TextServerFontAntialiasing) {
	self.Runtime.TextServer_font_set_antialiasing(TextServer{self}, font_rid, antialiasing)
}
func (self methodsTextServer) FontGetAntialiasing(font_rid RID) TextServerFontAntialiasing {
	return self.Runtime.TextServer_font_get_antialiasing(TextServer{self}, font_rid)
}
func (self methodsTextServer) FontSetGenerateMipmaps(font_rid RID, generate_mipmaps bool) {
	self.Runtime.TextServer_font_set_generate_mipmaps(TextServer{self}, font_rid, generate_mipmaps)
}
func (self methodsTextServer) FontGetGenerateMipmaps(font_rid RID) bool {
	return self.Runtime.TextServer_font_get_generate_mipmaps(TextServer{self}, font_rid)
}
func (self methodsTextServer) FontSetMultichannelSignedDistanceField(font_rid RID, msdf bool) {
	self.Runtime.TextServer_font_set_multichannel_signed_distance_field(TextServer{self}, font_rid, msdf)
}
func (self methodsTextServer) FontIsMultichannelSignedDistanceField(font_rid RID) bool {
	return self.Runtime.TextServer_font_is_multichannel_signed_distance_field(TextServer{self}, font_rid)
}
func (self methodsTextServer) FontSetMsdfPixelRange(font_rid RID, msdf_pixel_range int64) {
	self.Runtime.TextServer_font_set_msdf_pixel_range(TextServer{self}, font_rid, msdf_pixel_range)
}
func (self methodsTextServer) FontGetMsdfPixelRange(font_rid RID) int64 {
	return self.Runtime.TextServer_font_get_msdf_pixel_range(TextServer{self}, font_rid)
}
func (self methodsTextServer) FontSetMsdfSize(font_rid RID, msdf_size int64) {
	self.Runtime.TextServer_font_set_msdf_size(TextServer{self}, font_rid, msdf_size)
}
func (self methodsTextServer) FontGetMsdfSize(font_rid RID) int64 {
	return self.Runtime.TextServer_font_get_msdf_size(TextServer{self}, font_rid)
}
func (self methodsTextServer) FontSetFixedSize(font_rid RID, fixed_size int64) {
	self.Runtime.TextServer_font_set_fixed_size(TextServer{self}, font_rid, fixed_size)
}
func (self methodsTextServer) FontGetFixedSize(font_rid RID) int64 {
	return self.Runtime.TextServer_font_get_fixed_size(TextServer{self}, font_rid)
}
func (self methodsTextServer) FontSetFixedSizeScaleMode(font_rid RID, fixed_size_scale_mode TextServerFixedSizeScaleMode) {
	self.Runtime.TextServer_font_set_fixed_size_scale_mode(TextServer{self}, font_rid, fixed_size_scale_mode)
}
func (self methodsTextServer) FontGetFixedSizeScaleMode(font_rid RID) TextServerFixedSizeScaleMode {
	return self.Runtime.TextServer_font_get_fixed_size_scale_mode(TextServer{self}, font_rid)
}
func (self methodsTextServer) FontSetAllowSystemFallback(font_rid RID, allow_system_fallback bool) {
	self.Runtime.TextServer_font_set_allow_system_fallback(TextServer{self}, font_rid, allow_system_fallback)
}
func (self methodsTextServer) FontIsAllowSystemFallback(font_rid RID) bool {
	return self.Runtime.TextServer_font_is_allow_system_fallback(TextServer{self}, font_rid)
}
func (self methodsTextServer) FontSetForceAutohinter(font_rid RID, force_autohinter bool) {
	self.Runtime.TextServer_font_set_force_autohinter(TextServer{self}, font_rid, force_autohinter)
}
func (self methodsTextServer) FontIsForceAutohinter(font_rid RID) bool {
	return self.Runtime.TextServer_font_is_force_autohinter(TextServer{self}, font_rid)
}
func (self methodsTextServer) FontSetHinting(font_rid RID, hinting TextServerHinting) {
	self.Runtime.TextServer_font_set_hinting(TextServer{self}, font_rid, hinting)
}
func (self methodsTextServer) FontGetHinting(font_rid RID) TextServerHinting {
	return self.Runtime.TextServer_font_get_hinting(TextServer{self}, font_rid)
}
func (self methodsTextServer) FontSetSubpixelPositioning(font_rid RID, subpixel_positioning TextServerSubpixelPositioning) {
	self.Runtime.TextServer_font_set_subpixel_positioning(TextServer{self}, font_rid, subpixel_positioning)
}
func (self methodsTextServer) FontGetSubpixelPositioning(font_rid RID) TextServerSubpixelPositioning {
	return self.Runtime.TextServer_font_get_subpixel_positioning(TextServer{self}, font_rid)
}
func (self methodsTextServer) FontSetEmbolden(font_rid RID, strength Float) {
	self.Runtime.TextServer_font_set_embolden(TextServer{self}, font_rid, strength)
}
func (self methodsTextServer) FontGetEmbolden(font_rid RID) Float {
	return self.Runtime.TextServer_font_get_embolden(TextServer{self}, font_rid)
}
func (self methodsTextServer) FontSetSpacing(font_rid RID, spacing TextServerSpacingType, value int64) {
	self.Runtime.TextServer_font_set_spacing(TextServer{self}, font_rid, spacing, value)
}
func (self methodsTextServer) FontGetSpacing(font_rid RID, spacing TextServerSpacingType) int64 {
	return self.Runtime.TextServer_font_get_spacing(TextServer{self}, font_rid, spacing)
}
func (self methodsTextServer) FontSetTransform(font_rid RID, transform Transform2D) {
	self.Runtime.TextServer_font_set_transform(TextServer{self}, font_rid, transform)
}
func (self methodsTextServer) FontGetTransform(font_rid RID) Transform2D {
	return self.Runtime.TextServer_font_get_transform(TextServer{self}, font_rid)
}
func (self methodsTextServer) FontSetVariationCoordinates(font_rid RID, variation_coordinates Dictionary) {
	self.Runtime.TextServer_font_set_variation_coordinates(TextServer{self}, font_rid, variation_coordinates)
}
func (self methodsTextServer) FontGetVariationCoordinates(font_rid RID) Dictionary {
	return self.Runtime.TextServer_font_get_variation_coordinates(TextServer{self}, font_rid)
}
func (self methodsTextServer) FontSetOversampling(font_rid RID, oversampling Float) {
	self.Runtime.TextServer_font_set_oversampling(TextServer{self}, font_rid, oversampling)
}
func (self methodsTextServer) FontGetOversampling(font_rid RID) Float {
	return self.Runtime.TextServer_font_get_oversampling(TextServer{self}, font_rid)
}
func (self methodsTextServer) FontGetSizeCacheList(font_rid RID) ArrayOf[Vector2i] {
	return self.Runtime.TextServer_font_get_size_cache_list(TextServer{self}, font_rid)
}
func (self methodsTextServer) FontClearSizeCache(font_rid RID) {
	self.Runtime.TextServer_font_clear_size_cache(TextServer{self}, font_rid)
}
func (self methodsTextServer) FontRemoveSizeCache(font_rid RID, size Vector2i) {
	self.Runtime.TextServer_font_remove_size_cache(TextServer{self}, font_rid, size)
}
func (self methodsTextServer) FontSetAscent(font_rid RID, size int64, ascent Float) {
	self.Runtime.TextServer_font_set_ascent(TextServer{self}, font_rid, size, ascent)
}
func (self methodsTextServer) FontGetAscent(font_rid RID, size int64) Float {
	return self.Runtime.TextServer_font_get_ascent(TextServer{self}, font_rid, size)
}
func (self methodsTextServer) FontSetDescent(font_rid RID, size int64, descent Float) {
	self.Runtime.TextServer_font_set_descent(TextServer{self}, font_rid, size, descent)
}
func (self methodsTextServer) FontGetDescent(font_rid RID, size int64) Float {
	return self.Runtime.TextServer_font_get_descent(TextServer{self}, font_rid, size)
}
func (self methodsTextServer) FontSetUnderlinePosition(font_rid RID, size int64, underline_position Float) {
	self.Runtime.TextServer_font_set_underline_position(TextServer{self}, font_rid, size, underline_position)
}
func (self methodsTextServer) FontGetUnderlinePosition(font_rid RID, size int64) Float {
	return self.Runtime.TextServer_font_get_underline_position(TextServer{self}, font_rid, size)
}
func (self methodsTextServer) FontSetUnderlineThickness(font_rid RID, size int64, underline_thickness Float) {
	self.Runtime.TextServer_font_set_underline_thickness(TextServer{self}, font_rid, size, underline_thickness)
}
func (self methodsTextServer) FontGetUnderlineThickness(font_rid RID, size int64) Float {
	return self.Runtime.TextServer_font_get_underline_thickness(TextServer{self}, font_rid, size)
}
func (self methodsTextServer) FontSetScale(font_rid RID, size int64, scale Float) {
	self.Runtime.TextServer_font_set_scale(TextServer{self}, font_rid, size, scale)
}
func (self methodsTextServer) FontGetScale(font_rid RID, size int64) Float {
	return self.Runtime.TextServer_font_get_scale(TextServer{self}, font_rid, size)
}
func (self methodsTextServer) FontGetTextureCount(font_rid RID, size Vector2i) int64 {
	return self.Runtime.TextServer_font_get_texture_count(TextServer{self}, font_rid, size)
}
func (self methodsTextServer) FontClearTextures(font_rid RID, size Vector2i) {
	self.Runtime.TextServer_font_clear_textures(TextServer{self}, font_rid, size)
}
func (self methodsTextServer) FontRemoveTexture(font_rid RID, size Vector2i, texture_index int64) {
	self.Runtime.TextServer_font_remove_texture(TextServer{self}, font_rid, size, texture_index)
}
func (self methodsTextServer) FontSetTextureImage(font_rid RID, size Vector2i, texture_index int64, image Image) {
	self.Runtime.TextServer_font_set_texture_image(TextServer{self}, font_rid, size, texture_index, image)
}
func (self methodsTextServer) FontGetTextureImage(font_rid RID, size Vector2i, texture_index int64) Image {
	return self.Runtime.TextServer_font_get_texture_image(TextServer{self}, font_rid, size, texture_index)
}
func (self methodsTextServer) FontSetTextureOffsets(font_rid RID, size Vector2i, texture_index int64, offset PackedInt32Array) {
	self.Runtime.TextServer_font_set_texture_offsets(TextServer{self}, font_rid, size, texture_index, offset)
}
func (self methodsTextServer) FontGetTextureOffsets(font_rid RID, size Vector2i, texture_index int64) PackedInt32Array {
	return self.Runtime.TextServer_font_get_texture_offsets(TextServer{self}, font_rid, size, texture_index)
}
func (self methodsTextServer) FontGetGlyphList(font_rid RID, size Vector2i) PackedInt32Array {
	return self.Runtime.TextServer_font_get_glyph_list(TextServer{self}, font_rid, size)
}
func (self methodsTextServer) FontClearGlyphs(font_rid RID, size Vector2i) {
	self.Runtime.TextServer_font_clear_glyphs(TextServer{self}, font_rid, size)
}
func (self methodsTextServer) FontRemoveGlyph(font_rid RID, size Vector2i, glyph int64) {
	self.Runtime.TextServer_font_remove_glyph(TextServer{self}, font_rid, size, glyph)
}
func (self methodsTextServer) FontGetGlyphAdvance(font_rid RID, size int64, glyph int64) Vector2 {
	return self.Runtime.TextServer_font_get_glyph_advance(TextServer{self}, font_rid, size, glyph)
}
func (self methodsTextServer) FontSetGlyphAdvance(font_rid RID, size int64, glyph int64, advance Vector2) {
	self.Runtime.TextServer_font_set_glyph_advance(TextServer{self}, font_rid, size, glyph, advance)
}
func (self methodsTextServer) FontGetGlyphOffset(font_rid RID, size Vector2i, glyph int64) Vector2 {
	return self.Runtime.TextServer_font_get_glyph_offset(TextServer{self}, font_rid, size, glyph)
}
func (self methodsTextServer) FontSetGlyphOffset(font_rid RID, size Vector2i, glyph int64, offset Vector2) {
	self.Runtime.TextServer_font_set_glyph_offset(TextServer{self}, font_rid, size, glyph, offset)
}
func (self methodsTextServer) FontGetGlyphSize(font_rid RID, size Vector2i, glyph int64) Vector2 {
	return self.Runtime.TextServer_font_get_glyph_size(TextServer{self}, font_rid, size, glyph)
}
func (self methodsTextServer) FontSetGlyphSize(font_rid RID, size Vector2i, glyph int64, gl_size Vector2) {
	self.Runtime.TextServer_font_set_glyph_size(TextServer{self}, font_rid, size, glyph, gl_size)
}
func (self methodsTextServer) FontGetGlyphUvRect(font_rid RID, size Vector2i, glyph int64) Rect2 {
	return self.Runtime.TextServer_font_get_glyph_uv_rect(TextServer{self}, font_rid, size, glyph)
}
func (self methodsTextServer) FontSetGlyphUvRect(font_rid RID, size Vector2i, glyph int64, uv_rect Rect2) {
	self.Runtime.TextServer_font_set_glyph_uv_rect(TextServer{self}, font_rid, size, glyph, uv_rect)
}
func (self methodsTextServer) FontGetGlyphTextureIdx(font_rid RID, size Vector2i, glyph int64) int64 {
	return self.Runtime.TextServer_font_get_glyph_texture_idx(TextServer{self}, font_rid, size, glyph)
}
func (self methodsTextServer) FontSetGlyphTextureIdx(font_rid RID, size Vector2i, glyph int64, texture_idx int64) {
	self.Runtime.TextServer_font_set_glyph_texture_idx(TextServer{self}, font_rid, size, glyph, texture_idx)
}
func (self methodsTextServer) FontGetGlyphTextureRid(font_rid RID, size Vector2i, glyph int64) RID {
	return self.Runtime.TextServer_font_get_glyph_texture_rid(TextServer{self}, font_rid, size, glyph)
}
func (self methodsTextServer) FontGetGlyphTextureSize(font_rid RID, size Vector2i, glyph int64) Vector2 {
	return self.Runtime.TextServer_font_get_glyph_texture_size(TextServer{self}, font_rid, size, glyph)
}
func (self methodsTextServer) FontGetGlyphContours(font RID, size int64, index int64) Dictionary {
	return self.Runtime.TextServer_font_get_glyph_contours(TextServer{self}, font, size, index)
}
func (self methodsTextServer) FontGetKerningList(font_rid RID, size int64) ArrayOf[Vector2i] {
	return self.Runtime.TextServer_font_get_kerning_list(TextServer{self}, font_rid, size)
}
func (self methodsTextServer) FontClearKerningMap(font_rid RID, size int64) {
	self.Runtime.TextServer_font_clear_kerning_map(TextServer{self}, font_rid, size)
}
func (self methodsTextServer) FontRemoveKerning(font_rid RID, size int64, glyph_pair Vector2i) {
	self.Runtime.TextServer_font_remove_kerning(TextServer{self}, font_rid, size, glyph_pair)
}
func (self methodsTextServer) FontSetKerning(font_rid RID, size int64, glyph_pair Vector2i, kerning Vector2) {
	self.Runtime.TextServer_font_set_kerning(TextServer{self}, font_rid, size, glyph_pair, kerning)
}
func (self methodsTextServer) FontGetKerning(font_rid RID, size int64, glyph_pair Vector2i) Vector2 {
	return self.Runtime.TextServer_font_get_kerning(TextServer{self}, font_rid, size, glyph_pair)
}
func (self methodsTextServer) FontGetGlyphIndex(font_rid RID, size int64, char int64, variation_selector int64) int64 {
	return self.Runtime.TextServer_font_get_glyph_index(TextServer{self}, font_rid, size, char, variation_selector)
}
func (self methodsTextServer) FontGetCharFromGlyphIndex(font_rid RID, size int64, glyph_index int64) int64 {
	return self.Runtime.TextServer_font_get_char_from_glyph_index(TextServer{self}, font_rid, size, glyph_index)
}
func (self methodsTextServer) FontHasChar(font_rid RID, char int64) bool {
	return self.Runtime.TextServer_font_has_char(TextServer{self}, font_rid, char)
}
func (self methodsTextServer) FontGetSupportedChars(font_rid RID) string {
	return self.Runtime.TextServer_font_get_supported_chars(TextServer{self}, font_rid)
}
func (self methodsTextServer) FontRenderRange(font_rid RID, size Vector2i, start int64, end int64) {
	self.Runtime.TextServer_font_render_range(TextServer{self}, font_rid, size, start, end)
}
func (self methodsTextServer) FontRenderGlyph(font_rid RID, size Vector2i, index int64) {
	self.Runtime.TextServer_font_render_glyph(TextServer{self}, font_rid, size, index)
}
func (self methodsTextServer) FontDrawGlyph(font_rid RID, canvas RID, size int64, pos Vector2, index int64, color Color) {
	self.Runtime.TextServer_font_draw_glyph(TextServer{self}, font_rid, canvas, size, pos, index, color)
}
func (self methodsTextServer) FontDrawGlyphOutline(font_rid RID, canvas RID, size int64, outline_size int64, pos Vector2, index int64, color Color) {
	self.Runtime.TextServer_font_draw_glyph_outline(TextServer{self}, font_rid, canvas, size, outline_size, pos, index, color)
}
func (self methodsTextServer) FontIsLanguageSupported(font_rid RID, language string) bool {
	return self.Runtime.TextServer_font_is_language_supported(TextServer{self}, font_rid, language)
}
func (self methodsTextServer) FontSetLanguageSupportOverride(font_rid RID, language string, supported bool) {
	self.Runtime.TextServer_font_set_language_support_override(TextServer{self}, font_rid, language, supported)
}
func (self methodsTextServer) FontGetLanguageSupportOverride(font_rid RID, language string) bool {
	return self.Runtime.TextServer_font_get_language_support_override(TextServer{self}, font_rid, language)
}
func (self methodsTextServer) FontRemoveLanguageSupportOverride(font_rid RID, language string) {
	self.Runtime.TextServer_font_remove_language_support_override(TextServer{self}, font_rid, language)
}
func (self methodsTextServer) FontGetLanguageSupportOverrides(font_rid RID) PackedStringArray {
	return self.Runtime.TextServer_font_get_language_support_overrides(TextServer{self}, font_rid)
}
func (self methodsTextServer) FontIsScriptSupported(font_rid RID, script string) bool {
	return self.Runtime.TextServer_font_is_script_supported(TextServer{self}, font_rid, script)
}
func (self methodsTextServer) FontSetScriptSupportOverride(font_rid RID, script string, supported bool) {
	self.Runtime.TextServer_font_set_script_support_override(TextServer{self}, font_rid, script, supported)
}
func (self methodsTextServer) FontGetScriptSupportOverride(font_rid RID, script string) bool {
	return self.Runtime.TextServer_font_get_script_support_override(TextServer{self}, font_rid, script)
}
func (self methodsTextServer) FontRemoveScriptSupportOverride(font_rid RID, script string) {
	self.Runtime.TextServer_font_remove_script_support_override(TextServer{self}, font_rid, script)
}
func (self methodsTextServer) FontGetScriptSupportOverrides(font_rid RID) PackedStringArray {
	return self.Runtime.TextServer_font_get_script_support_overrides(TextServer{self}, font_rid)
}
func (self methodsTextServer) FontSetOpentypeFeatureOverrides(font_rid RID, overrides Dictionary) {
	self.Runtime.TextServer_font_set_opentype_feature_overrides(TextServer{self}, font_rid, overrides)
}
func (self methodsTextServer) FontGetOpentypeFeatureOverrides(font_rid RID) Dictionary {
	return self.Runtime.TextServer_font_get_opentype_feature_overrides(TextServer{self}, font_rid)
}
func (self methodsTextServer) FontSupportedFeatureList(font_rid RID) Dictionary {
	return self.Runtime.TextServer_font_supported_feature_list(TextServer{self}, font_rid)
}
func (self methodsTextServer) FontSupportedVariationList(font_rid RID) Dictionary {
	return self.Runtime.TextServer_font_supported_variation_list(TextServer{self}, font_rid)
}
func (self methodsTextServer) FontGetGlobalOversampling() Float {
	return self.Runtime.TextServer_font_get_global_oversampling(TextServer{self})
}
func (self methodsTextServer) FontSetGlobalOversampling(oversampling Float) {
	self.Runtime.TextServer_font_set_global_oversampling(TextServer{self}, oversampling)
}
func (self methodsTextServer) GetHexCodeBoxSize(size int64, index int64) Vector2 {
	return self.Runtime.TextServer_get_hex_code_box_size(TextServer{self}, size, index)
}
func (self methodsTextServer) DrawHexCodeBox(canvas RID, size int64, pos Vector2, index int64, color Color) {
	self.Runtime.TextServer_draw_hex_code_box(TextServer{self}, canvas, size, pos, index, color)
}
func (self methodsTextServer) CreateShapedText(direction TextServerDirection, orientation TextServerOrientation) RID {
	return self.Runtime.TextServer_create_shaped_text(TextServer{self}, direction, orientation)
}
func (self methodsTextServer) ShapedTextClear(rid RID) {
	self.Runtime.TextServer_shaped_text_clear(TextServer{self}, rid)
}
func (self methodsTextServer) ShapedTextSetDirection(shaped RID, direction TextServerDirection) {
	self.Runtime.TextServer_shaped_text_set_direction(TextServer{self}, shaped, direction)
}
func (self methodsTextServer) ShapedTextGetDirection(shaped RID) TextServerDirection {
	return self.Runtime.TextServer_shaped_text_get_direction(TextServer{self}, shaped)
}
func (self methodsTextServer) ShapedTextGetInferredDirection(shaped RID) TextServerDirection {
	return self.Runtime.TextServer_shaped_text_get_inferred_direction(TextServer{self}, shaped)
}
func (self methodsTextServer) ShapedTextSetBidiOverride(shaped RID, override Array) {
	self.Runtime.TextServer_shaped_text_set_bidi_override(TextServer{self}, shaped, override)
}
func (self methodsTextServer) ShapedTextSetCustomPunctuation(shaped RID, punct string) {
	self.Runtime.TextServer_shaped_text_set_custom_punctuation(TextServer{self}, shaped, punct)
}
func (self methodsTextServer) ShapedTextGetCustomPunctuation(shaped RID) string {
	return self.Runtime.TextServer_shaped_text_get_custom_punctuation(TextServer{self}, shaped)
}
func (self methodsTextServer) ShapedTextSetCustomEllipsis(shaped RID, char int64) {
	self.Runtime.TextServer_shaped_text_set_custom_ellipsis(TextServer{self}, shaped, char)
}
func (self methodsTextServer) ShapedTextGetCustomEllipsis(shaped RID) int64 {
	return self.Runtime.TextServer_shaped_text_get_custom_ellipsis(TextServer{self}, shaped)
}
func (self methodsTextServer) ShapedTextSetOrientation(shaped RID, orientation TextServerOrientation) {
	self.Runtime.TextServer_shaped_text_set_orientation(TextServer{self}, shaped, orientation)
}
func (self methodsTextServer) ShapedTextGetOrientation(shaped RID) TextServerOrientation {
	return self.Runtime.TextServer_shaped_text_get_orientation(TextServer{self}, shaped)
}
func (self methodsTextServer) ShapedTextSetPreserveInvalid(shaped RID, enabled bool) {
	self.Runtime.TextServer_shaped_text_set_preserve_invalid(TextServer{self}, shaped, enabled)
}
func (self methodsTextServer) ShapedTextGetPreserveInvalid(shaped RID) bool {
	return self.Runtime.TextServer_shaped_text_get_preserve_invalid(TextServer{self}, shaped)
}
func (self methodsTextServer) ShapedTextSetPreserveControl(shaped RID, enabled bool) {
	self.Runtime.TextServer_shaped_text_set_preserve_control(TextServer{self}, shaped, enabled)
}
func (self methodsTextServer) ShapedTextGetPreserveControl(shaped RID) bool {
	return self.Runtime.TextServer_shaped_text_get_preserve_control(TextServer{self}, shaped)
}
func (self methodsTextServer) ShapedTextSetSpacing(shaped RID, spacing TextServerSpacingType, value int64) {
	self.Runtime.TextServer_shaped_text_set_spacing(TextServer{self}, shaped, spacing, value)
}
func (self methodsTextServer) ShapedTextGetSpacing(shaped RID, spacing TextServerSpacingType) int64 {
	return self.Runtime.TextServer_shaped_text_get_spacing(TextServer{self}, shaped, spacing)
}
func (self methodsTextServer) ShapedTextAddString(shaped RID, text string, fonts ArrayOf[RID], size int64, opentype_features Dictionary, language string, meta any) bool {
	return self.Runtime.TextServer_shaped_text_add_string(TextServer{self}, shaped, text, fonts, size, opentype_features, language, meta)
}
func (self methodsTextServer) ShapedTextAddObject(shaped RID, key any, size Vector2, inline_align InlineAlignment, length int64, baseline Float) bool {
	return self.Runtime.TextServer_shaped_text_add_object(TextServer{self}, shaped, key, size, inline_align, length, baseline)
}
func (self methodsTextServer) ShapedTextResizeObject(shaped RID, key any, size Vector2, inline_align InlineAlignment, baseline Float) bool {
	return self.Runtime.TextServer_shaped_text_resize_object(TextServer{self}, shaped, key, size, inline_align, baseline)
}
func (self methodsTextServer) ShapedGetSpanCount(shaped RID) int64 {
	return self.Runtime.TextServer_shaped_get_span_count(TextServer{self}, shaped)
}
func (self methodsTextServer) ShapedGetSpanMeta(shaped RID, index int64) any {
	return self.Runtime.TextServer_shaped_get_span_meta(TextServer{self}, shaped, index)
}
func (self methodsTextServer) ShapedSetSpanUpdateFont(shaped RID, index int64, fonts ArrayOf[RID], size int64, opentype_features Dictionary) {
	self.Runtime.TextServer_shaped_set_span_update_font(TextServer{self}, shaped, index, fonts, size, opentype_features)
}
func (self methodsTextServer) ShapedTextSubstr(shaped RID, start int64, length int64) RID {
	return self.Runtime.TextServer_shaped_text_substr(TextServer{self}, shaped, start, length)
}
func (self methodsTextServer) ShapedTextGetParent(shaped RID) RID {
	return self.Runtime.TextServer_shaped_text_get_parent(TextServer{self}, shaped)
}
func (self methodsTextServer) ShapedTextFitToWidth(shaped RID, width Float, justification_flags TextServerJustificationFlag) Float {
	return self.Runtime.TextServer_shaped_text_fit_to_width(TextServer{self}, shaped, width, justification_flags)
}
func (self methodsTextServer) ShapedTextTabAlign(shaped RID, tab_stops PackedFloat32Array) Float {
	return self.Runtime.TextServer_shaped_text_tab_align(TextServer{self}, shaped, tab_stops)
}
func (self methodsTextServer) ShapedTextShape(shaped RID) bool {
	return self.Runtime.TextServer_shaped_text_shape(TextServer{self}, shaped)
}
func (self methodsTextServer) ShapedTextIsReady(shaped RID) bool {
	return self.Runtime.TextServer_shaped_text_is_ready(TextServer{self}, shaped)
}
func (self methodsTextServer) ShapedTextHasVisibleChars(shaped RID) bool {
	return self.Runtime.TextServer_shaped_text_has_visible_chars(TextServer{self}, shaped)
}
func (self methodsTextServer) ShapedTextGetGlyphs(shaped RID) ArrayOf[Dictionary] {
	return self.Runtime.TextServer_shaped_text_get_glyphs(TextServer{self}, shaped)
}
func (self methodsTextServer) ShapedTextSortLogical(shaped RID) ArrayOf[Dictionary] {
	return self.Runtime.TextServer_shaped_text_sort_logical(TextServer{self}, shaped)
}
func (self methodsTextServer) ShapedTextGetGlyphCount(shaped RID) int64 {
	return self.Runtime.TextServer_shaped_text_get_glyph_count(TextServer{self}, shaped)
}
func (self methodsTextServer) ShapedTextGetRange(shaped RID) Vector2i {
	return self.Runtime.TextServer_shaped_text_get_range(TextServer{self}, shaped)
}
func (self methodsTextServer) ShapedTextGetLineBreaksAdv(shaped RID, width PackedFloat32Array, start int64, once bool, break_flags TextServerLineBreakFlag) PackedInt32Array {
	return self.Runtime.TextServer_shaped_text_get_line_breaks_adv(TextServer{self}, shaped, width, start, once, break_flags)
}
func (self methodsTextServer) ShapedTextGetLineBreaks(shaped RID, width Float, start int64, break_flags TextServerLineBreakFlag) PackedInt32Array {
	return self.Runtime.TextServer_shaped_text_get_line_breaks(TextServer{self}, shaped, width, start, break_flags)
}
func (self methodsTextServer) ShapedTextGetWordBreaks(shaped RID, grapheme_flags TextServerGraphemeFlag) PackedInt32Array {
	return self.Runtime.TextServer_shaped_text_get_word_breaks(TextServer{self}, shaped, grapheme_flags)
}
func (self methodsTextServer) ShapedTextGetTrimPos(shaped RID) int64 {
	return self.Runtime.TextServer_shaped_text_get_trim_pos(TextServer{self}, shaped)
}
func (self methodsTextServer) ShapedTextGetEllipsisPos(shaped RID) int64 {
	return self.Runtime.TextServer_shaped_text_get_ellipsis_pos(TextServer{self}, shaped)
}
func (self methodsTextServer) ShapedTextGetEllipsisGlyphs(shaped RID) ArrayOf[Dictionary] {
	return self.Runtime.TextServer_shaped_text_get_ellipsis_glyphs(TextServer{self}, shaped)
}
func (self methodsTextServer) ShapedTextGetEllipsisGlyphCount(shaped RID) int64 {
	return self.Runtime.TextServer_shaped_text_get_ellipsis_glyph_count(TextServer{self}, shaped)
}
func (self methodsTextServer) ShapedTextOverrunTrimToWidth(shaped RID, width Float, overrun_trim_flags TextServerTextOverrunFlag) {
	self.Runtime.TextServer_shaped_text_overrun_trim_to_width(TextServer{self}, shaped, width, overrun_trim_flags)
}
func (self methodsTextServer) ShapedTextGetObjects(shaped RID) Array {
	return self.Runtime.TextServer_shaped_text_get_objects(TextServer{self}, shaped)
}
func (self methodsTextServer) ShapedTextGetObjectRect(shaped RID, key any) Rect2 {
	return self.Runtime.TextServer_shaped_text_get_object_rect(TextServer{self}, shaped, key)
}
func (self methodsTextServer) ShapedTextGetSize(shaped RID) Vector2 {
	return self.Runtime.TextServer_shaped_text_get_size(TextServer{self}, shaped)
}
func (self methodsTextServer) ShapedTextGetAscent(shaped RID) Float {
	return self.Runtime.TextServer_shaped_text_get_ascent(TextServer{self}, shaped)
}
func (self methodsTextServer) ShapedTextGetDescent(shaped RID) Float {
	return self.Runtime.TextServer_shaped_text_get_descent(TextServer{self}, shaped)
}
func (self methodsTextServer) ShapedTextGetWidth(shaped RID) Float {
	return self.Runtime.TextServer_shaped_text_get_width(TextServer{self}, shaped)
}
func (self methodsTextServer) ShapedTextGetUnderlinePosition(shaped RID) Float {
	return self.Runtime.TextServer_shaped_text_get_underline_position(TextServer{self}, shaped)
}
func (self methodsTextServer) ShapedTextGetUnderlineThickness(shaped RID) Float {
	return self.Runtime.TextServer_shaped_text_get_underline_thickness(TextServer{self}, shaped)
}
func (self methodsTextServer) ShapedTextGetCarets(shaped RID, position int64) Dictionary {
	return self.Runtime.TextServer_shaped_text_get_carets(TextServer{self}, shaped, position)
}
func (self methodsTextServer) ShapedTextGetSelection(shaped RID, start int64, end int64) PackedVector2Array {
	return self.Runtime.TextServer_shaped_text_get_selection(TextServer{self}, shaped, start, end)
}
func (self methodsTextServer) ShapedTextHitTestGrapheme(shaped RID, coords Float) int64 {
	return self.Runtime.TextServer_shaped_text_hit_test_grapheme(TextServer{self}, shaped, coords)
}
func (self methodsTextServer) ShapedTextHitTestPosition(shaped RID, coords Float) int64 {
	return self.Runtime.TextServer_shaped_text_hit_test_position(TextServer{self}, shaped, coords)
}
func (self methodsTextServer) ShapedTextGetGraphemeBounds(shaped RID, pos int64) Vector2 {
	return self.Runtime.TextServer_shaped_text_get_grapheme_bounds(TextServer{self}, shaped, pos)
}
func (self methodsTextServer) ShapedTextNextGraphemePos(shaped RID, pos int64) int64 {
	return self.Runtime.TextServer_shaped_text_next_grapheme_pos(TextServer{self}, shaped, pos)
}
func (self methodsTextServer) ShapedTextPrevGraphemePos(shaped RID, pos int64) int64 {
	return self.Runtime.TextServer_shaped_text_prev_grapheme_pos(TextServer{self}, shaped, pos)
}
func (self methodsTextServer) ShapedTextGetCharacterBreaks(shaped RID) PackedInt32Array {
	return self.Runtime.TextServer_shaped_text_get_character_breaks(TextServer{self}, shaped)
}
func (self methodsTextServer) ShapedTextNextCharacterPos(shaped RID, pos int64) int64 {
	return self.Runtime.TextServer_shaped_text_next_character_pos(TextServer{self}, shaped, pos)
}
func (self methodsTextServer) ShapedTextPrevCharacterPos(shaped RID, pos int64) int64 {
	return self.Runtime.TextServer_shaped_text_prev_character_pos(TextServer{self}, shaped, pos)
}
func (self methodsTextServer) ShapedTextClosestCharacterPos(shaped RID, pos int64) int64 {
	return self.Runtime.TextServer_shaped_text_closest_character_pos(TextServer{self}, shaped, pos)
}
func (self methodsTextServer) ShapedTextDraw(shaped RID, canvas RID, pos Vector2, clip_l Float, clip_r Float, color Color) {
	self.Runtime.TextServer_shaped_text_draw(TextServer{self}, shaped, canvas, pos, clip_l, clip_r, color)
}
func (self methodsTextServer) ShapedTextDrawOutline(shaped RID, canvas RID, pos Vector2, clip_l Float, clip_r Float, outline_size int64, color Color) {
	self.Runtime.TextServer_shaped_text_draw_outline(TextServer{self}, shaped, canvas, pos, clip_l, clip_r, outline_size, color)
}
func (self methodsTextServer) ShapedTextGetDominantDirectionInRange(shaped RID, start int64, end int64) TextServerDirection {
	return self.Runtime.TextServer_shaped_text_get_dominant_direction_in_range(TextServer{self}, shaped, start, end)
}
func (self methodsTextServer) FormatNumber(number string, language string) string {
	return self.Runtime.TextServer_format_number(TextServer{self}, number, language)
}
func (self methodsTextServer) ParseNumber(number string, language string) string {
	return self.Runtime.TextServer_parse_number(TextServer{self}, number, language)
}
func (self methodsTextServer) PercentSign(language string) string {
	return self.Runtime.TextServer_percent_sign(TextServer{self}, language)
}
func (self methodsTextServer) StringGetWordBreaks(s string, language string, chars_per_line int64) PackedInt32Array {
	return self.Runtime.TextServer_string_get_word_breaks(TextServer{self}, s, language, chars_per_line)
}
func (self methodsTextServer) StringGetCharacterBreaks(s string, language string) PackedInt32Array {
	return self.Runtime.TextServer_string_get_character_breaks(TextServer{self}, s, language)
}
func (self methodsTextServer) IsConfusable(s string, dict PackedStringArray) int64 {
	return self.Runtime.TextServer_is_confusable(TextServer{self}, s, dict)
}
func (self methodsTextServer) SpoofCheck(s string) bool {
	return self.Runtime.TextServer_spoof_check(TextServer{self}, s)
}
func (self methodsTextServer) StripDiacritics(s string) string {
	return self.Runtime.TextServer_strip_diacritics(TextServer{self}, s)
}
func (self methodsTextServer) IsValidIdentifier(s string) bool {
	return self.Runtime.TextServer_is_valid_identifier(TextServer{self}, s)
}
func (self methodsTextServer) StringToUpper(s string, language string) string {
	return self.Runtime.TextServer_string_to_upper(TextServer{self}, s, language)
}
func (self methodsTextServer) StringToLower(s string, language string) string {
	return self.Runtime.TextServer_string_to_lower(TextServer{self}, s, language)
}
func (self methodsTextServer) ParseStructuredText(parser_type TextServerStructuredTextParser, args Array, text string) ArrayOf[Vector3i] {
	return self.Runtime.TextServer_parse_structured_text(TextServer{self}, parser_type, args, text)
}

type methodsTextServerAdvanced struct {
	_ [0]*methodsTextServerAdvanced
	class
}

func (self TextServerAdvanced) TextServerExtension() TextServerExtension {
	var parent TextServerExtension
	parent.class = self.class
	return parent
}

type methodsTextServerDummy struct {
	_ [0]*methodsTextServerDummy
	class
}

func (self TextServerDummy) TextServerExtension() TextServerExtension {
	var parent TextServerExtension
	parent.class = self.class
	return parent
}

type methodsTextServerExtension struct {
	_ [0]*methodsTextServerExtension
	class
}

func (self TextServerExtension) TextServer() TextServer {
	var parent TextServer
	parent.class = self.class
	return parent
}

type methodsTextServerManager struct {
	_ [0]*methodsTextServerManager
	class
}

func (self TextServerManager) Object() Object {
	var parent Object
	parent.class = self.class
	return parent
}
func (self methodsTextServerManager) AddInterface(intf TextServer) {
	self.Runtime.TextServerManager_add_interface(TextServerManager{self}, intf)
}
func (self methodsTextServerManager) GetInterfaceCount() int64 {
	return self.Runtime.TextServerManager_get_interface_count(TextServerManager{self})
}
func (self methodsTextServerManager) RemoveInterface(intf TextServer) {
	self.Runtime.TextServerManager_remove_interface(TextServerManager{self}, intf)
}
func (self methodsTextServerManager) GetInterface(idx int64) TextServer {
	return self.Runtime.TextServerManager_get_interface(TextServerManager{self}, idx)
}
func (self methodsTextServerManager) GetInterfaces() ArrayOf[Dictionary] {
	return self.Runtime.TextServerManager_get_interfaces(TextServerManager{self})
}
func (self methodsTextServerManager) FindInterface(name string) TextServer {
	return self.Runtime.TextServerManager_find_interface(TextServerManager{self}, name)
}
func (self methodsTextServerManager) SetPrimaryInterface(index TextServer) {
	self.Runtime.TextServerManager_set_primary_interface(TextServerManager{self}, index)
}
func (self methodsTextServerManager) GetPrimaryInterface() TextServer {
	return self.Runtime.TextServerManager_get_primary_interface(TextServerManager{self})
}

type methodsTexture struct {
	_ [0]*methodsTexture
	class
}

func (self Texture) Resource() Resource {
	var parent Resource
	parent.class = self.class
	return parent
}

type methodsTexture2D struct {
	_ [0]*methodsTexture2D
	class
}

func (self Texture2D) Texture() Texture { var parent Texture; parent.class = self.class; return parent }
func (self methodsTexture2D) GetWidth() int64 {
	return self.Runtime.Texture2D_get_width(Texture2D{self})
}
func (self methodsTexture2D) GetHeight() int64 {
	return self.Runtime.Texture2D_get_height(Texture2D{self})
}
func (self methodsTexture2D) GetSize() Vector2 {
	return self.Runtime.Texture2D_get_size(Texture2D{self})
}
func (self methodsTexture2D) HasAlpha() bool {
	return self.Runtime.Texture2D_has_alpha(Texture2D{self})
}
func (self methodsTexture2D) Draw(canvas_item RID, position Vector2, modulate Color, transpose bool) {
	self.Runtime.Texture2D_draw(Texture2D{self}, canvas_item, position, modulate, transpose)
}
func (self methodsTexture2D) DrawRect(canvas_item RID, rect Rect2, tile bool, modulate Color, transpose bool) {
	self.Runtime.Texture2D_draw_rect(Texture2D{self}, canvas_item, rect, tile, modulate, transpose)
}
func (self methodsTexture2D) DrawRectRegion(canvas_item RID, rect Rect2, src_rect Rect2, modulate Color, transpose bool, clip_uv bool) {
	self.Runtime.Texture2D_draw_rect_region(Texture2D{self}, canvas_item, rect, src_rect, modulate, transpose, clip_uv)
}
func (self methodsTexture2D) GetImage() Image {
	return self.Runtime.Texture2D_get_image(Texture2D{self})
}
func (self methodsTexture2D) CreatePlaceholder() Resource {
	return self.Runtime.Texture2D_create_placeholder(Texture2D{self})
}

type methodsTexture2DArray struct {
	_ [0]*methodsTexture2DArray
	class
}

func (self Texture2DArray) ImageTextureLayered() ImageTextureLayered {
	var parent ImageTextureLayered
	parent.class = self.class
	return parent
}
func (self methodsTexture2DArray) CreatePlaceholder() Resource {
	return self.Runtime.Texture2DArray_create_placeholder(Texture2DArray{self})
}

type methodsTexture2DArrayRD struct {
	_ [0]*methodsTexture2DArrayRD
	class
}

func (self Texture2DArrayRD) TextureLayeredRD() TextureLayeredRD {
	var parent TextureLayeredRD
	parent.class = self.class
	return parent
}

type methodsTexture2DRD struct {
	_ [0]*methodsTexture2DRD
	class
}

func (self Texture2DRD) Texture2D() Texture2D {
	var parent Texture2D
	parent.class = self.class
	return parent
}
func (self methodsTexture2DRD) SetTextureRdRid(texture_rd_rid RID) {
	self.Runtime.Texture2DRD_set_texture_rd_rid(Texture2DRD{self}, texture_rd_rid)
}
func (self methodsTexture2DRD) GetTextureRdRid() RID {
	return self.Runtime.Texture2DRD_get_texture_rd_rid(Texture2DRD{self})
}

type methodsTexture3D struct {
	_ [0]*methodsTexture3D
	class
}

func (self Texture3D) Texture() Texture { var parent Texture; parent.class = self.class; return parent }
func (self methodsTexture3D) GetFormat() ImageFormat {
	return self.Runtime.Texture3D_get_format(Texture3D{self})
}
func (self methodsTexture3D) GetWidth() int64 {
	return self.Runtime.Texture3D_get_width(Texture3D{self})
}
func (self methodsTexture3D) GetHeight() int64 {
	return self.Runtime.Texture3D_get_height(Texture3D{self})
}
func (self methodsTexture3D) GetDepth() int64 {
	return self.Runtime.Texture3D_get_depth(Texture3D{self})
}
func (self methodsTexture3D) HasMipmaps() bool {
	return self.Runtime.Texture3D_has_mipmaps(Texture3D{self})
}
func (self methodsTexture3D) GetData() ArrayOf[Image] {
	return self.Runtime.Texture3D_get_data(Texture3D{self})
}
func (self methodsTexture3D) CreatePlaceholder() Resource {
	return self.Runtime.Texture3D_create_placeholder(Texture3D{self})
}

type methodsTexture3DRD struct {
	_ [0]*methodsTexture3DRD
	class
}

func (self Texture3DRD) Texture3D() Texture3D {
	var parent Texture3D
	parent.class = self.class
	return parent
}
func (self methodsTexture3DRD) SetTextureRdRid(texture_rd_rid RID) {
	self.Runtime.Texture3DRD_set_texture_rd_rid(Texture3DRD{self}, texture_rd_rid)
}
func (self methodsTexture3DRD) GetTextureRdRid() RID {
	return self.Runtime.Texture3DRD_get_texture_rd_rid(Texture3DRD{self})
}

type methodsTextureButton struct {
	_ [0]*methodsTextureButton
	class
}

func (self TextureButton) BaseButton() BaseButton {
	var parent BaseButton
	parent.class = self.class
	return parent
}
func (self methodsTextureButton) SetTextureNormal(texture Texture2D) {
	self.Runtime.TextureButton_set_texture_normal(TextureButton{self}, texture)
}
func (self methodsTextureButton) SetTexturePressed(texture Texture2D) {
	self.Runtime.TextureButton_set_texture_pressed(TextureButton{self}, texture)
}
func (self methodsTextureButton) SetTextureHover(texture Texture2D) {
	self.Runtime.TextureButton_set_texture_hover(TextureButton{self}, texture)
}
func (self methodsTextureButton) SetTextureDisabled(texture Texture2D) {
	self.Runtime.TextureButton_set_texture_disabled(TextureButton{self}, texture)
}
func (self methodsTextureButton) SetTextureFocused(texture Texture2D) {
	self.Runtime.TextureButton_set_texture_focused(TextureButton{self}, texture)
}
func (self methodsTextureButton) SetClickMask(mask BitMap) {
	self.Runtime.TextureButton_set_click_mask(TextureButton{self}, mask)
}
func (self methodsTextureButton) SetIgnoreTextureSize(ignore bool) {
	self.Runtime.TextureButton_set_ignore_texture_size(TextureButton{self}, ignore)
}
func (self methodsTextureButton) SetStretchMode(mode TextureButtonStretchMode) {
	self.Runtime.TextureButton_set_stretch_mode(TextureButton{self}, mode)
}
func (self methodsTextureButton) SetFlipH(enable bool) {
	self.Runtime.TextureButton_set_flip_h(TextureButton{self}, enable)
}
func (self methodsTextureButton) IsFlippedH() bool {
	return self.Runtime.TextureButton_is_flipped_h(TextureButton{self})
}
func (self methodsTextureButton) SetFlipV(enable bool) {
	self.Runtime.TextureButton_set_flip_v(TextureButton{self}, enable)
}
func (self methodsTextureButton) IsFlippedV() bool {
	return self.Runtime.TextureButton_is_flipped_v(TextureButton{self})
}
func (self methodsTextureButton) GetTextureNormal() Texture2D {
	return self.Runtime.TextureButton_get_texture_normal(TextureButton{self})
}
func (self methodsTextureButton) GetTexturePressed() Texture2D {
	return self.Runtime.TextureButton_get_texture_pressed(TextureButton{self})
}
func (self methodsTextureButton) GetTextureHover() Texture2D {
	return self.Runtime.TextureButton_get_texture_hover(TextureButton{self})
}
func (self methodsTextureButton) GetTextureDisabled() Texture2D {
	return self.Runtime.TextureButton_get_texture_disabled(TextureButton{self})
}
func (self methodsTextureButton) GetTextureFocused() Texture2D {
	return self.Runtime.TextureButton_get_texture_focused(TextureButton{self})
}
func (self methodsTextureButton) GetClickMask() BitMap {
	return self.Runtime.TextureButton_get_click_mask(TextureButton{self})
}
func (self methodsTextureButton) GetIgnoreTextureSize() bool {
	return self.Runtime.TextureButton_get_ignore_texture_size(TextureButton{self})
}
func (self methodsTextureButton) GetStretchMode() TextureButtonStretchMode {
	return self.Runtime.TextureButton_get_stretch_mode(TextureButton{self})
}

type methodsTextureCubemapArrayRD struct {
	_ [0]*methodsTextureCubemapArrayRD
	class
}

func (self TextureCubemapArrayRD) TextureLayeredRD() TextureLayeredRD {
	var parent TextureLayeredRD
	parent.class = self.class
	return parent
}

type methodsTextureCubemapRD struct {
	_ [0]*methodsTextureCubemapRD
	class
}

func (self TextureCubemapRD) TextureLayeredRD() TextureLayeredRD {
	var parent TextureLayeredRD
	parent.class = self.class
	return parent
}

type methodsTextureLayered struct {
	_ [0]*methodsTextureLayered
	class
}

func (self TextureLayered) Texture() Texture {
	var parent Texture
	parent.class = self.class
	return parent
}
func (self methodsTextureLayered) GetFormat() ImageFormat {
	return self.Runtime.TextureLayered_get_format(TextureLayered{self})
}
func (self methodsTextureLayered) GetLayeredType() TextureLayeredLayeredType {
	return self.Runtime.TextureLayered_get_layered_type(TextureLayered{self})
}
func (self methodsTextureLayered) GetWidth() int64 {
	return self.Runtime.TextureLayered_get_width(TextureLayered{self})
}
func (self methodsTextureLayered) GetHeight() int64 {
	return self.Runtime.TextureLayered_get_height(TextureLayered{self})
}
func (self methodsTextureLayered) GetLayers() int64 {
	return self.Runtime.TextureLayered_get_layers(TextureLayered{self})
}
func (self methodsTextureLayered) HasMipmaps() bool {
	return self.Runtime.TextureLayered_has_mipmaps(TextureLayered{self})
}
func (self methodsTextureLayered) GetLayerData(layer int64) Image {
	return self.Runtime.TextureLayered_get_layer_data(TextureLayered{self}, layer)
}

type methodsTextureLayeredRD struct {
	_ [0]*methodsTextureLayeredRD
	class
}

func (self TextureLayeredRD) TextureLayered() TextureLayered {
	var parent TextureLayered
	parent.class = self.class
	return parent
}
func (self methodsTextureLayeredRD) SetTextureRdRid(texture_rd_rid RID) {
	self.Runtime.TextureLayeredRD_set_texture_rd_rid(TextureLayeredRD{self}, texture_rd_rid)
}
func (self methodsTextureLayeredRD) GetTextureRdRid() RID {
	return self.Runtime.TextureLayeredRD_get_texture_rd_rid(TextureLayeredRD{self})
}

type methodsTextureProgressBar struct {
	_ [0]*methodsTextureProgressBar
	class
}

func (self TextureProgressBar) Range() Range {
	var parent Range
	parent.class = self.class
	return parent
}
func (self methodsTextureProgressBar) SetUnderTexture(tex Texture2D) {
	self.Runtime.TextureProgressBar_set_under_texture(TextureProgressBar{self}, tex)
}
func (self methodsTextureProgressBar) GetUnderTexture() Texture2D {
	return self.Runtime.TextureProgressBar_get_under_texture(TextureProgressBar{self})
}
func (self methodsTextureProgressBar) SetProgressTexture(tex Texture2D) {
	self.Runtime.TextureProgressBar_set_progress_texture(TextureProgressBar{self}, tex)
}
func (self methodsTextureProgressBar) GetProgressTexture() Texture2D {
	return self.Runtime.TextureProgressBar_get_progress_texture(TextureProgressBar{self})
}
func (self methodsTextureProgressBar) SetOverTexture(tex Texture2D) {
	self.Runtime.TextureProgressBar_set_over_texture(TextureProgressBar{self}, tex)
}
func (self methodsTextureProgressBar) GetOverTexture() Texture2D {
	return self.Runtime.TextureProgressBar_get_over_texture(TextureProgressBar{self})
}
func (self methodsTextureProgressBar) SetFillMode(mode int64) {
	self.Runtime.TextureProgressBar_set_fill_mode(TextureProgressBar{self}, mode)
}
func (self methodsTextureProgressBar) GetFillMode() int64 {
	return self.Runtime.TextureProgressBar_get_fill_mode(TextureProgressBar{self})
}
func (self methodsTextureProgressBar) SetTintUnder(tint Color) {
	self.Runtime.TextureProgressBar_set_tint_under(TextureProgressBar{self}, tint)
}
func (self methodsTextureProgressBar) GetTintUnder() Color {
	return self.Runtime.TextureProgressBar_get_tint_under(TextureProgressBar{self})
}
func (self methodsTextureProgressBar) SetTintProgress(tint Color) {
	self.Runtime.TextureProgressBar_set_tint_progress(TextureProgressBar{self}, tint)
}
func (self methodsTextureProgressBar) GetTintProgress() Color {
	return self.Runtime.TextureProgressBar_get_tint_progress(TextureProgressBar{self})
}
func (self methodsTextureProgressBar) SetTintOver(tint Color) {
	self.Runtime.TextureProgressBar_set_tint_over(TextureProgressBar{self}, tint)
}
func (self methodsTextureProgressBar) GetTintOver() Color {
	return self.Runtime.TextureProgressBar_get_tint_over(TextureProgressBar{self})
}
func (self methodsTextureProgressBar) SetTextureProgressOffset(offset Vector2) {
	self.Runtime.TextureProgressBar_set_texture_progress_offset(TextureProgressBar{self}, offset)
}
func (self methodsTextureProgressBar) GetTextureProgressOffset() Vector2 {
	return self.Runtime.TextureProgressBar_get_texture_progress_offset(TextureProgressBar{self})
}
func (self methodsTextureProgressBar) SetRadialInitialAngle(mode Float) {
	self.Runtime.TextureProgressBar_set_radial_initial_angle(TextureProgressBar{self}, mode)
}
func (self methodsTextureProgressBar) GetRadialInitialAngle() Float {
	return self.Runtime.TextureProgressBar_get_radial_initial_angle(TextureProgressBar{self})
}
func (self methodsTextureProgressBar) SetRadialCenterOffset(mode Vector2) {
	self.Runtime.TextureProgressBar_set_radial_center_offset(TextureProgressBar{self}, mode)
}
func (self methodsTextureProgressBar) GetRadialCenterOffset() Vector2 {
	return self.Runtime.TextureProgressBar_get_radial_center_offset(TextureProgressBar{self})
}
func (self methodsTextureProgressBar) SetFillDegrees(mode Float) {
	self.Runtime.TextureProgressBar_set_fill_degrees(TextureProgressBar{self}, mode)
}
func (self methodsTextureProgressBar) GetFillDegrees() Float {
	return self.Runtime.TextureProgressBar_get_fill_degrees(TextureProgressBar{self})
}
func (self methodsTextureProgressBar) SetStretchMargin(margin Side, value int64) {
	self.Runtime.TextureProgressBar_set_stretch_margin(TextureProgressBar{self}, margin, value)
}
func (self methodsTextureProgressBar) GetStretchMargin(margin Side) int64 {
	return self.Runtime.TextureProgressBar_get_stretch_margin(TextureProgressBar{self}, margin)
}
func (self methodsTextureProgressBar) SetNinePatchStretch(stretch bool) {
	self.Runtime.TextureProgressBar_set_nine_patch_stretch(TextureProgressBar{self}, stretch)
}
func (self methodsTextureProgressBar) GetNinePatchStretch() bool {
	return self.Runtime.TextureProgressBar_get_nine_patch_stretch(TextureProgressBar{self})
}

type methodsTextureRect struct {
	_ [0]*methodsTextureRect
	class
}

func (self TextureRect) Control() Control {
	var parent Control
	parent.class = self.class
	return parent
}
func (self methodsTextureRect) SetTexture(texture Texture2D) {
	self.Runtime.TextureRect_set_texture(TextureRect{self}, texture)
}
func (self methodsTextureRect) GetTexture() Texture2D {
	return self.Runtime.TextureRect_get_texture(TextureRect{self})
}
func (self methodsTextureRect) SetExpandMode(expand_mode TextureRectExpandMode) {
	self.Runtime.TextureRect_set_expand_mode(TextureRect{self}, expand_mode)
}
func (self methodsTextureRect) GetExpandMode() TextureRectExpandMode {
	return self.Runtime.TextureRect_get_expand_mode(TextureRect{self})
}
func (self methodsTextureRect) SetFlipH(enable bool) {
	self.Runtime.TextureRect_set_flip_h(TextureRect{self}, enable)
}
func (self methodsTextureRect) IsFlippedH() bool {
	return self.Runtime.TextureRect_is_flipped_h(TextureRect{self})
}
func (self methodsTextureRect) SetFlipV(enable bool) {
	self.Runtime.TextureRect_set_flip_v(TextureRect{self}, enable)
}
func (self methodsTextureRect) IsFlippedV() bool {
	return self.Runtime.TextureRect_is_flipped_v(TextureRect{self})
}
func (self methodsTextureRect) SetStretchMode(stretch_mode TextureRectStretchMode) {
	self.Runtime.TextureRect_set_stretch_mode(TextureRect{self}, stretch_mode)
}
func (self methodsTextureRect) GetStretchMode() TextureRectStretchMode {
	return self.Runtime.TextureRect_get_stretch_mode(TextureRect{self})
}

type methodsTheme struct {
	_ [0]*methodsTheme
	class
}

func (self Theme) Resource() Resource { var parent Resource; parent.class = self.class; return parent }
func (self methodsTheme) SetIcon(name string, theme_type string, texture Texture2D) {
	self.Runtime.Theme_set_icon(Theme{self}, name, theme_type, texture)
}
func (self methodsTheme) GetIcon(name string, theme_type string) Texture2D {
	return self.Runtime.Theme_get_icon(Theme{self}, name, theme_type)
}
func (self methodsTheme) HasIcon(name string, theme_type string) bool {
	return self.Runtime.Theme_has_icon(Theme{self}, name, theme_type)
}
func (self methodsTheme) RenameIcon(old_name string, name string, theme_type string) {
	self.Runtime.Theme_rename_icon(Theme{self}, old_name, name, theme_type)
}
func (self methodsTheme) ClearIcon(name string, theme_type string) {
	self.Runtime.Theme_clear_icon(Theme{self}, name, theme_type)
}
func (self methodsTheme) GetIconList(theme_type string) PackedStringArray {
	return self.Runtime.Theme_get_icon_list(Theme{self}, theme_type)
}
func (self methodsTheme) GetIconTypeList() PackedStringArray {
	return self.Runtime.Theme_get_icon_type_list(Theme{self})
}
func (self methodsTheme) SetStylebox(name string, theme_type string, texture StyleBox) {
	self.Runtime.Theme_set_stylebox(Theme{self}, name, theme_type, texture)
}
func (self methodsTheme) GetStylebox(name string, theme_type string) StyleBox {
	return self.Runtime.Theme_get_stylebox(Theme{self}, name, theme_type)
}
func (self methodsTheme) HasStylebox(name string, theme_type string) bool {
	return self.Runtime.Theme_has_stylebox(Theme{self}, name, theme_type)
}
func (self methodsTheme) RenameStylebox(old_name string, name string, theme_type string) {
	self.Runtime.Theme_rename_stylebox(Theme{self}, old_name, name, theme_type)
}
func (self methodsTheme) ClearStylebox(name string, theme_type string) {
	self.Runtime.Theme_clear_stylebox(Theme{self}, name, theme_type)
}
func (self methodsTheme) GetStyleboxList(theme_type string) PackedStringArray {
	return self.Runtime.Theme_get_stylebox_list(Theme{self}, theme_type)
}
func (self methodsTheme) GetStyleboxTypeList() PackedStringArray {
	return self.Runtime.Theme_get_stylebox_type_list(Theme{self})
}
func (self methodsTheme) SetFont(name string, theme_type string, font Font) {
	self.Runtime.Theme_set_font(Theme{self}, name, theme_type, font)
}
func (self methodsTheme) GetFont(name string, theme_type string) Font {
	return self.Runtime.Theme_get_font(Theme{self}, name, theme_type)
}
func (self methodsTheme) HasFont(name string, theme_type string) bool {
	return self.Runtime.Theme_has_font(Theme{self}, name, theme_type)
}
func (self methodsTheme) RenameFont(old_name string, name string, theme_type string) {
	self.Runtime.Theme_rename_font(Theme{self}, old_name, name, theme_type)
}
func (self methodsTheme) ClearFont(name string, theme_type string) {
	self.Runtime.Theme_clear_font(Theme{self}, name, theme_type)
}
func (self methodsTheme) GetFontList(theme_type string) PackedStringArray {
	return self.Runtime.Theme_get_font_list(Theme{self}, theme_type)
}
func (self methodsTheme) GetFontTypeList() PackedStringArray {
	return self.Runtime.Theme_get_font_type_list(Theme{self})
}
func (self methodsTheme) SetFontSize(name string, theme_type string, font_size int64) {
	self.Runtime.Theme_set_font_size(Theme{self}, name, theme_type, font_size)
}
func (self methodsTheme) GetFontSize(name string, theme_type string) int64 {
	return self.Runtime.Theme_get_font_size(Theme{self}, name, theme_type)
}
func (self methodsTheme) HasFontSize(name string, theme_type string) bool {
	return self.Runtime.Theme_has_font_size(Theme{self}, name, theme_type)
}
func (self methodsTheme) RenameFontSize(old_name string, name string, theme_type string) {
	self.Runtime.Theme_rename_font_size(Theme{self}, old_name, name, theme_type)
}
func (self methodsTheme) ClearFontSize(name string, theme_type string) {
	self.Runtime.Theme_clear_font_size(Theme{self}, name, theme_type)
}
func (self methodsTheme) GetFontSizeList(theme_type string) PackedStringArray {
	return self.Runtime.Theme_get_font_size_list(Theme{self}, theme_type)
}
func (self methodsTheme) GetFontSizeTypeList() PackedStringArray {
	return self.Runtime.Theme_get_font_size_type_list(Theme{self})
}
func (self methodsTheme) SetColor(name string, theme_type string, color Color) {
	self.Runtime.Theme_set_color(Theme{self}, name, theme_type, color)
}
func (self methodsTheme) GetColor(name string, theme_type string) Color {
	return self.Runtime.Theme_get_color(Theme{self}, name, theme_type)
}
func (self methodsTheme) HasColor(name string, theme_type string) bool {
	return self.Runtime.Theme_has_color(Theme{self}, name, theme_type)
}
func (self methodsTheme) RenameColor(old_name string, name string, theme_type string) {
	self.Runtime.Theme_rename_color(Theme{self}, old_name, name, theme_type)
}
func (self methodsTheme) ClearColor(name string, theme_type string) {
	self.Runtime.Theme_clear_color(Theme{self}, name, theme_type)
}
func (self methodsTheme) GetColorList(theme_type string) PackedStringArray {
	return self.Runtime.Theme_get_color_list(Theme{self}, theme_type)
}
func (self methodsTheme) GetColorTypeList() PackedStringArray {
	return self.Runtime.Theme_get_color_type_list(Theme{self})
}
func (self methodsTheme) SetConstant(name string, theme_type string, constant int64) {
	self.Runtime.Theme_set_constant(Theme{self}, name, theme_type, constant)
}
func (self methodsTheme) GetConstant(name string, theme_type string) int64 {
	return self.Runtime.Theme_get_constant(Theme{self}, name, theme_type)
}
func (self methodsTheme) HasConstant(name string, theme_type string) bool {
	return self.Runtime.Theme_has_constant(Theme{self}, name, theme_type)
}
func (self methodsTheme) RenameConstant(old_name string, name string, theme_type string) {
	self.Runtime.Theme_rename_constant(Theme{self}, old_name, name, theme_type)
}
func (self methodsTheme) ClearConstant(name string, theme_type string) {
	self.Runtime.Theme_clear_constant(Theme{self}, name, theme_type)
}
func (self methodsTheme) GetConstantList(theme_type string) PackedStringArray {
	return self.Runtime.Theme_get_constant_list(Theme{self}, theme_type)
}
func (self methodsTheme) GetConstantTypeList() PackedStringArray {
	return self.Runtime.Theme_get_constant_type_list(Theme{self})
}
func (self methodsTheme) SetDefaultBaseScale(base_scale Float) {
	self.Runtime.Theme_set_default_base_scale(Theme{self}, base_scale)
}
func (self methodsTheme) GetDefaultBaseScale() Float {
	return self.Runtime.Theme_get_default_base_scale(Theme{self})
}
func (self methodsTheme) HasDefaultBaseScale() bool {
	return self.Runtime.Theme_has_default_base_scale(Theme{self})
}
func (self methodsTheme) SetDefaultFont(font Font) {
	self.Runtime.Theme_set_default_font(Theme{self}, font)
}
func (self methodsTheme) GetDefaultFont() Font {
	return self.Runtime.Theme_get_default_font(Theme{self})
}
func (self methodsTheme) HasDefaultFont() bool {
	return self.Runtime.Theme_has_default_font(Theme{self})
}
func (self methodsTheme) SetDefaultFontSize(font_size int64) {
	self.Runtime.Theme_set_default_font_size(Theme{self}, font_size)
}
func (self methodsTheme) GetDefaultFontSize() int64 {
	return self.Runtime.Theme_get_default_font_size(Theme{self})
}
func (self methodsTheme) HasDefaultFontSize() bool {
	return self.Runtime.Theme_has_default_font_size(Theme{self})
}
func (self methodsTheme) SetThemeItem(data_type ThemeDataType, name string, theme_type string, value any) {
	self.Runtime.Theme_set_theme_item(Theme{self}, data_type, name, theme_type, value)
}
func (self methodsTheme) GetThemeItem(data_type ThemeDataType, name string, theme_type string) any {
	return self.Runtime.Theme_get_theme_item(Theme{self}, data_type, name, theme_type)
}
func (self methodsTheme) HasThemeItem(data_type ThemeDataType, name string, theme_type string) bool {
	return self.Runtime.Theme_has_theme_item(Theme{self}, data_type, name, theme_type)
}
func (self methodsTheme) RenameThemeItem(data_type ThemeDataType, old_name string, name string, theme_type string) {
	self.Runtime.Theme_rename_theme_item(Theme{self}, data_type, old_name, name, theme_type)
}
func (self methodsTheme) ClearThemeItem(data_type ThemeDataType, name string, theme_type string) {
	self.Runtime.Theme_clear_theme_item(Theme{self}, data_type, name, theme_type)
}
func (self methodsTheme) GetThemeItemList(data_type ThemeDataType, theme_type string) PackedStringArray {
	return self.Runtime.Theme_get_theme_item_list(Theme{self}, data_type, theme_type)
}
func (self methodsTheme) GetThemeItemTypeList(data_type ThemeDataType) PackedStringArray {
	return self.Runtime.Theme_get_theme_item_type_list(Theme{self}, data_type)
}
func (self methodsTheme) SetTypeVariation(theme_type string, base_type string) {
	self.Runtime.Theme_set_type_variation(Theme{self}, theme_type, base_type)
}
func (self methodsTheme) IsTypeVariation(theme_type string, base_type string) bool {
	return self.Runtime.Theme_is_type_variation(Theme{self}, theme_type, base_type)
}
func (self methodsTheme) ClearTypeVariation(theme_type string) {
	self.Runtime.Theme_clear_type_variation(Theme{self}, theme_type)
}
func (self methodsTheme) GetTypeVariationBase(theme_type string) string {
	return self.Runtime.Theme_get_type_variation_base(Theme{self}, theme_type)
}
func (self methodsTheme) GetTypeVariationList(base_type string) PackedStringArray {
	return self.Runtime.Theme_get_type_variation_list(Theme{self}, base_type)
}
func (self methodsTheme) AddType(theme_type string) {
	self.Runtime.Theme_add_type(Theme{self}, theme_type)
}
func (self methodsTheme) RemoveType(theme_type string) {
	self.Runtime.Theme_remove_type(Theme{self}, theme_type)
}
func (self methodsTheme) GetTypeList() PackedStringArray {
	return self.Runtime.Theme_get_type_list(Theme{self})
}
func (self methodsTheme) MergeWith(other Theme) {
	self.Runtime.Theme_merge_with(Theme{self}, other)
}
func (self methodsTheme) Clear() {
	self.Runtime.Theme_clear(Theme{self})
}

type methodsThemeDB struct {
	_ [0]*methodsThemeDB
	class
}

func (self ThemeDB) Object() Object { var parent Object; parent.class = self.class; return parent }
func (self methodsThemeDB) GetDefaultTheme() Theme {
	return self.Runtime.ThemeDB_get_default_theme(ThemeDB{self})
}
func (self methodsThemeDB) GetProjectTheme() Theme {
	return self.Runtime.ThemeDB_get_project_theme(ThemeDB{self})
}
func (self methodsThemeDB) SetFallbackBaseScale(base_scale Float) {
	self.Runtime.ThemeDB_set_fallback_base_scale(ThemeDB{self}, base_scale)
}
func (self methodsThemeDB) GetFallbackBaseScale() Float {
	return self.Runtime.ThemeDB_get_fallback_base_scale(ThemeDB{self})
}
func (self methodsThemeDB) SetFallbackFont(font Font) {
	self.Runtime.ThemeDB_set_fallback_font(ThemeDB{self}, font)
}
func (self methodsThemeDB) GetFallbackFont() Font {
	return self.Runtime.ThemeDB_get_fallback_font(ThemeDB{self})
}
func (self methodsThemeDB) SetFallbackFontSize(font_size int64) {
	self.Runtime.ThemeDB_set_fallback_font_size(ThemeDB{self}, font_size)
}
func (self methodsThemeDB) GetFallbackFontSize() int64 {
	return self.Runtime.ThemeDB_get_fallback_font_size(ThemeDB{self})
}
func (self methodsThemeDB) SetFallbackIcon(icon Texture2D) {
	self.Runtime.ThemeDB_set_fallback_icon(ThemeDB{self}, icon)
}
func (self methodsThemeDB) GetFallbackIcon() Texture2D {
	return self.Runtime.ThemeDB_get_fallback_icon(ThemeDB{self})
}
func (self methodsThemeDB) SetFallbackStylebox(stylebox StyleBox) {
	self.Runtime.ThemeDB_set_fallback_stylebox(ThemeDB{self}, stylebox)
}
func (self methodsThemeDB) GetFallbackStylebox() StyleBox {
	return self.Runtime.ThemeDB_get_fallback_stylebox(ThemeDB{self})
}

type methodsThread struct {
	_ [0]*methodsThread
	class
}

func (self Thread) RefCounted() RefCounted {
	var parent RefCounted
	parent.class = self.class
	return parent
}
func (self methodsThread) Start(callable Callable, priority ThreadPriority) int64 {
	return self.Runtime.Thread_start(Thread{self}, callable, priority)
}
func (self methodsThread) GetId() string {
	return self.Runtime.Thread_get_id(Thread{self})
}
func (self methodsThread) IsStarted() bool {
	return self.Runtime.Thread_is_started(Thread{self})
}
func (self methodsThread) IsAlive() bool {
	return self.Runtime.Thread_is_alive(Thread{self})
}
func (self methodsThread) WaitToFinish() any {
	return self.Runtime.Thread_wait_to_finish(Thread{self})
}
func (self methodsThread) SetThreadSafetyChecksEnabled(enabled bool) {
	self.Runtime.Thread_set_thread_safety_checks_enabled(Thread{self}, enabled)
}

type methodsTileData struct {
	_ [0]*methodsTileData
	class
}

func (self TileData) Object() Object { var parent Object; parent.class = self.class; return parent }
func (self methodsTileData) SetFlipH(flip_h bool) {
	self.Runtime.TileData_set_flip_h(TileData{self}, flip_h)
}
func (self methodsTileData) GetFlipH() bool {
	return self.Runtime.TileData_get_flip_h(TileData{self})
}
func (self methodsTileData) SetFlipV(flip_v bool) {
	self.Runtime.TileData_set_flip_v(TileData{self}, flip_v)
}
func (self methodsTileData) GetFlipV() bool {
	return self.Runtime.TileData_get_flip_v(TileData{self})
}
func (self methodsTileData) SetTranspose(transpose bool) {
	self.Runtime.TileData_set_transpose(TileData{self}, transpose)
}
func (self methodsTileData) GetTranspose() bool {
	return self.Runtime.TileData_get_transpose(TileData{self})
}
func (self methodsTileData) SetMaterial(material Material) {
	self.Runtime.TileData_set_material(TileData{self}, material)
}
func (self methodsTileData) GetMaterial() Material {
	return self.Runtime.TileData_get_material(TileData{self})
}
func (self methodsTileData) SetTextureOrigin(texture_origin Vector2i) {
	self.Runtime.TileData_set_texture_origin(TileData{self}, texture_origin)
}
func (self methodsTileData) GetTextureOrigin() Vector2i {
	return self.Runtime.TileData_get_texture_origin(TileData{self})
}
func (self methodsTileData) SetModulate(modulate Color) {
	self.Runtime.TileData_set_modulate(TileData{self}, modulate)
}
func (self methodsTileData) GetModulate() Color {
	return self.Runtime.TileData_get_modulate(TileData{self})
}
func (self methodsTileData) SetZIndex(z_index int64) {
	self.Runtime.TileData_set_z_index(TileData{self}, z_index)
}
func (self methodsTileData) GetZIndex() int64 {
	return self.Runtime.TileData_get_z_index(TileData{self})
}
func (self methodsTileData) SetYSortOrigin(y_sort_origin int64) {
	self.Runtime.TileData_set_y_sort_origin(TileData{self}, y_sort_origin)
}
func (self methodsTileData) GetYSortOrigin() int64 {
	return self.Runtime.TileData_get_y_sort_origin(TileData{self})
}
func (self methodsTileData) SetOccluder(layer_id int64, occluder_polygon OccluderPolygon2D) {
	self.Runtime.TileData_set_occluder(TileData{self}, layer_id, occluder_polygon)
}
func (self methodsTileData) GetOccluder(layer_id int64, flip_h bool, flip_v bool, transpose bool) OccluderPolygon2D {
	return self.Runtime.TileData_get_occluder(TileData{self}, layer_id, flip_h, flip_v, transpose)
}
func (self methodsTileData) SetConstantLinearVelocity(layer_id int64, velocity Vector2) {
	self.Runtime.TileData_set_constant_linear_velocity(TileData{self}, layer_id, velocity)
}
func (self methodsTileData) GetConstantLinearVelocity(layer_id int64) Vector2 {
	return self.Runtime.TileData_get_constant_linear_velocity(TileData{self}, layer_id)
}
func (self methodsTileData) SetConstantAngularVelocity(layer_id int64, velocity Float) {
	self.Runtime.TileData_set_constant_angular_velocity(TileData{self}, layer_id, velocity)
}
func (self methodsTileData) GetConstantAngularVelocity(layer_id int64) Float {
	return self.Runtime.TileData_get_constant_angular_velocity(TileData{self}, layer_id)
}
func (self methodsTileData) SetCollisionPolygonsCount(layer_id int64, polygons_count int64) {
	self.Runtime.TileData_set_collision_polygons_count(TileData{self}, layer_id, polygons_count)
}
func (self methodsTileData) GetCollisionPolygonsCount(layer_id int64) int64 {
	return self.Runtime.TileData_get_collision_polygons_count(TileData{self}, layer_id)
}
func (self methodsTileData) AddCollisionPolygon(layer_id int64) {
	self.Runtime.TileData_add_collision_polygon(TileData{self}, layer_id)
}
func (self methodsTileData) RemoveCollisionPolygon(layer_id int64, polygon_index int64) {
	self.Runtime.TileData_remove_collision_polygon(TileData{self}, layer_id, polygon_index)
}
func (self methodsTileData) SetCollisionPolygonPoints(layer_id int64, polygon_index int64, polygon PackedVector2Array) {
	self.Runtime.TileData_set_collision_polygon_points(TileData{self}, layer_id, polygon_index, polygon)
}
func (self methodsTileData) GetCollisionPolygonPoints(layer_id int64, polygon_index int64) PackedVector2Array {
	return self.Runtime.TileData_get_collision_polygon_points(TileData{self}, layer_id, polygon_index)
}
func (self methodsTileData) SetCollisionPolygonOneWay(layer_id int64, polygon_index int64, one_way bool) {
	self.Runtime.TileData_set_collision_polygon_one_way(TileData{self}, layer_id, polygon_index, one_way)
}
func (self methodsTileData) IsCollisionPolygonOneWay(layer_id int64, polygon_index int64) bool {
	return self.Runtime.TileData_is_collision_polygon_one_way(TileData{self}, layer_id, polygon_index)
}
func (self methodsTileData) SetCollisionPolygonOneWayMargin(layer_id int64, polygon_index int64, one_way_margin Float) {
	self.Runtime.TileData_set_collision_polygon_one_way_margin(TileData{self}, layer_id, polygon_index, one_way_margin)
}
func (self methodsTileData) GetCollisionPolygonOneWayMargin(layer_id int64, polygon_index int64) Float {
	return self.Runtime.TileData_get_collision_polygon_one_way_margin(TileData{self}, layer_id, polygon_index)
}
func (self methodsTileData) SetTerrainSet(terrain_set int64) {
	self.Runtime.TileData_set_terrain_set(TileData{self}, terrain_set)
}
func (self methodsTileData) GetTerrainSet() int64 {
	return self.Runtime.TileData_get_terrain_set(TileData{self})
}
func (self methodsTileData) SetTerrain(terrain int64) {
	self.Runtime.TileData_set_terrain(TileData{self}, terrain)
}
func (self methodsTileData) GetTerrain() int64 {
	return self.Runtime.TileData_get_terrain(TileData{self})
}
func (self methodsTileData) SetTerrainPeeringBit(peering_bit TileSetCellNeighbor, terrain int64) {
	self.Runtime.TileData_set_terrain_peering_bit(TileData{self}, peering_bit, terrain)
}
func (self methodsTileData) GetTerrainPeeringBit(peering_bit TileSetCellNeighbor) int64 {
	return self.Runtime.TileData_get_terrain_peering_bit(TileData{self}, peering_bit)
}
func (self methodsTileData) SetNavigationPolygon(layer_id int64, navigation_polygon NavigationPolygon) {
	self.Runtime.TileData_set_navigation_polygon(TileData{self}, layer_id, navigation_polygon)
}
func (self methodsTileData) GetNavigationPolygon(layer_id int64, flip_h bool, flip_v bool, transpose bool) NavigationPolygon {
	return self.Runtime.TileData_get_navigation_polygon(TileData{self}, layer_id, flip_h, flip_v, transpose)
}
func (self methodsTileData) SetProbability(probability Float) {
	self.Runtime.TileData_set_probability(TileData{self}, probability)
}
func (self methodsTileData) GetProbability() Float {
	return self.Runtime.TileData_get_probability(TileData{self})
}
func (self methodsTileData) SetCustomData(layer_name string, value any) {
	self.Runtime.TileData_set_custom_data(TileData{self}, layer_name, value)
}
func (self methodsTileData) GetCustomData(layer_name string) any {
	return self.Runtime.TileData_get_custom_data(TileData{self}, layer_name)
}
func (self methodsTileData) SetCustomDataByLayerId(layer_id int64, value any) {
	self.Runtime.TileData_set_custom_data_by_layer_id(TileData{self}, layer_id, value)
}
func (self methodsTileData) GetCustomDataByLayerId(layer_id int64) any {
	return self.Runtime.TileData_get_custom_data_by_layer_id(TileData{self}, layer_id)
}

type methodsTileMap struct {
	_ [0]*methodsTileMap
	class
}

func (self TileMap) Node2D() Node2D { var parent Node2D; parent.class = self.class; return parent }
func (self methodsTileMap) SetNavigationMap(layer int64, mapping RID) {
	self.Runtime.TileMap_set_navigation_map(TileMap{self}, layer, mapping)
}
func (self methodsTileMap) GetNavigationMap(layer int64) RID {
	return self.Runtime.TileMap_get_navigation_map(TileMap{self}, layer)
}
func (self methodsTileMap) ForceUpdate(layer int64) {
	self.Runtime.TileMap_force_update(TileMap{self}, layer)
}
func (self methodsTileMap) SetTileset(tileset TileSet) {
	self.Runtime.TileMap_set_tileset(TileMap{self}, tileset)
}
func (self methodsTileMap) GetTileset() TileSet {
	return self.Runtime.TileMap_get_tileset(TileMap{self})
}
func (self methodsTileMap) SetRenderingQuadrantSize(size int64) {
	self.Runtime.TileMap_set_rendering_quadrant_size(TileMap{self}, size)
}
func (self methodsTileMap) GetRenderingQuadrantSize() int64 {
	return self.Runtime.TileMap_get_rendering_quadrant_size(TileMap{self})
}
func (self methodsTileMap) GetLayersCount() int64 {
	return self.Runtime.TileMap_get_layers_count(TileMap{self})
}
func (self methodsTileMap) AddLayer(to_position int64) {
	self.Runtime.TileMap_add_layer(TileMap{self}, to_position)
}
func (self methodsTileMap) MoveLayer(layer int64, to_position int64) {
	self.Runtime.TileMap_move_layer(TileMap{self}, layer, to_position)
}
func (self methodsTileMap) RemoveLayer(layer int64) {
	self.Runtime.TileMap_remove_layer(TileMap{self}, layer)
}
func (self methodsTileMap) SetLayerName(layer int64, name string) {
	self.Runtime.TileMap_set_layer_name(TileMap{self}, layer, name)
}
func (self methodsTileMap) GetLayerName(layer int64) string {
	return self.Runtime.TileMap_get_layer_name(TileMap{self}, layer)
}
func (self methodsTileMap) SetLayerEnabled(layer int64, enabled bool) {
	self.Runtime.TileMap_set_layer_enabled(TileMap{self}, layer, enabled)
}
func (self methodsTileMap) IsLayerEnabled(layer int64) bool {
	return self.Runtime.TileMap_is_layer_enabled(TileMap{self}, layer)
}
func (self methodsTileMap) SetLayerModulate(layer int64, modulate Color) {
	self.Runtime.TileMap_set_layer_modulate(TileMap{self}, layer, modulate)
}
func (self methodsTileMap) GetLayerModulate(layer int64) Color {
	return self.Runtime.TileMap_get_layer_modulate(TileMap{self}, layer)
}
func (self methodsTileMap) SetLayerYSortEnabled(layer int64, y_sort_enabled bool) {
	self.Runtime.TileMap_set_layer_y_sort_enabled(TileMap{self}, layer, y_sort_enabled)
}
func (self methodsTileMap) IsLayerYSortEnabled(layer int64) bool {
	return self.Runtime.TileMap_is_layer_y_sort_enabled(TileMap{self}, layer)
}
func (self methodsTileMap) SetLayerYSortOrigin(layer int64, y_sort_origin int64) {
	self.Runtime.TileMap_set_layer_y_sort_origin(TileMap{self}, layer, y_sort_origin)
}
func (self methodsTileMap) GetLayerYSortOrigin(layer int64) int64 {
	return self.Runtime.TileMap_get_layer_y_sort_origin(TileMap{self}, layer)
}
func (self methodsTileMap) SetLayerZIndex(layer int64, z_index int64) {
	self.Runtime.TileMap_set_layer_z_index(TileMap{self}, layer, z_index)
}
func (self methodsTileMap) GetLayerZIndex(layer int64) int64 {
	return self.Runtime.TileMap_get_layer_z_index(TileMap{self}, layer)
}
func (self methodsTileMap) SetLayerNavigationEnabled(layer int64, enabled bool) {
	self.Runtime.TileMap_set_layer_navigation_enabled(TileMap{self}, layer, enabled)
}
func (self methodsTileMap) IsLayerNavigationEnabled(layer int64) bool {
	return self.Runtime.TileMap_is_layer_navigation_enabled(TileMap{self}, layer)
}
func (self methodsTileMap) SetLayerNavigationMap(layer int64, mapping RID) {
	self.Runtime.TileMap_set_layer_navigation_map(TileMap{self}, layer, mapping)
}
func (self methodsTileMap) GetLayerNavigationMap(layer int64) RID {
	return self.Runtime.TileMap_get_layer_navigation_map(TileMap{self}, layer)
}
func (self methodsTileMap) SetCollisionAnimatable(enabled bool) {
	self.Runtime.TileMap_set_collision_animatable(TileMap{self}, enabled)
}
func (self methodsTileMap) IsCollisionAnimatable() bool {
	return self.Runtime.TileMap_is_collision_animatable(TileMap{self})
}
func (self methodsTileMap) SetCollisionVisibilityMode(collision_visibility_mode TileMapVisibilityMode) {
	self.Runtime.TileMap_set_collision_visibility_mode(TileMap{self}, collision_visibility_mode)
}
func (self methodsTileMap) GetCollisionVisibilityMode() TileMapVisibilityMode {
	return self.Runtime.TileMap_get_collision_visibility_mode(TileMap{self})
}
func (self methodsTileMap) SetNavigationVisibilityMode(navigation_visibility_mode TileMapVisibilityMode) {
	self.Runtime.TileMap_set_navigation_visibility_mode(TileMap{self}, navigation_visibility_mode)
}
func (self methodsTileMap) GetNavigationVisibilityMode() TileMapVisibilityMode {
	return self.Runtime.TileMap_get_navigation_visibility_mode(TileMap{self})
}
func (self methodsTileMap) SetCell(layer int64, coords Vector2i, source_id int64, atlas_coords Vector2i, alternative_tile int64) {
	self.Runtime.TileMap_set_cell(TileMap{self}, layer, coords, source_id, atlas_coords, alternative_tile)
}
func (self methodsTileMap) EraseCell(layer int64, coords Vector2i) {
	self.Runtime.TileMap_erase_cell(TileMap{self}, layer, coords)
}
func (self methodsTileMap) GetCellSourceId(layer int64, coords Vector2i, use_proxies bool) int64 {
	return self.Runtime.TileMap_get_cell_source_id(TileMap{self}, layer, coords, use_proxies)
}
func (self methodsTileMap) GetCellAtlasCoords(layer int64, coords Vector2i, use_proxies bool) Vector2i {
	return self.Runtime.TileMap_get_cell_atlas_coords(TileMap{self}, layer, coords, use_proxies)
}
func (self methodsTileMap) GetCellAlternativeTile(layer int64, coords Vector2i, use_proxies bool) int64 {
	return self.Runtime.TileMap_get_cell_alternative_tile(TileMap{self}, layer, coords, use_proxies)
}
func (self methodsTileMap) GetCellTileData(layer int64, coords Vector2i, use_proxies bool) TileData {
	return self.Runtime.TileMap_get_cell_tile_data(TileMap{self}, layer, coords, use_proxies)
}
func (self methodsTileMap) GetCoordsForBodyRid(body RID) Vector2i {
	return self.Runtime.TileMap_get_coords_for_body_rid(TileMap{self}, body)
}
func (self methodsTileMap) GetLayerForBodyRid(body RID) int64 {
	return self.Runtime.TileMap_get_layer_for_body_rid(TileMap{self}, body)
}
func (self methodsTileMap) GetPattern(layer int64, coords_array ArrayOf[Vector2i]) TileMapPattern {
	return self.Runtime.TileMap_get_pattern(TileMap{self}, layer, coords_array)
}
func (self methodsTileMap) MapPattern(position_in_tilemap Vector2i, coords_in_pattern Vector2i, pattern TileMapPattern) Vector2i {
	return self.Runtime.TileMap_map_pattern(TileMap{self}, position_in_tilemap, coords_in_pattern, pattern)
}
func (self methodsTileMap) SetPattern(layer int64, position Vector2i, pattern TileMapPattern) {
	self.Runtime.TileMap_set_pattern(TileMap{self}, layer, position, pattern)
}
func (self methodsTileMap) SetCellsTerrainConnect(layer int64, cells ArrayOf[Vector2i], terrain_set int64, terrain int64, ignore_empty_terrains bool) {
	self.Runtime.TileMap_set_cells_terrain_connect(TileMap{self}, layer, cells, terrain_set, terrain, ignore_empty_terrains)
}
func (self methodsTileMap) SetCellsTerrainPath(layer int64, path ArrayOf[Vector2i], terrain_set int64, terrain int64, ignore_empty_terrains bool) {
	self.Runtime.TileMap_set_cells_terrain_path(TileMap{self}, layer, path, terrain_set, terrain, ignore_empty_terrains)
}
func (self methodsTileMap) FixInvalidTiles() {
	self.Runtime.TileMap_fix_invalid_tiles(TileMap{self})
}
func (self methodsTileMap) ClearLayer(layer int64) {
	self.Runtime.TileMap_clear_layer(TileMap{self}, layer)
}
func (self methodsTileMap) Clear() {
	self.Runtime.TileMap_clear(TileMap{self})
}
func (self methodsTileMap) UpdateInternals() {
	self.Runtime.TileMap_update_internals(TileMap{self})
}
func (self methodsTileMap) NotifyRuntimeTileDataUpdate(layer int64) {
	self.Runtime.TileMap_notify_runtime_tile_data_update(TileMap{self}, layer)
}
func (self methodsTileMap) GetSurroundingCells(coords Vector2i) ArrayOf[Vector2i] {
	return self.Runtime.TileMap_get_surrounding_cells(TileMap{self}, coords)
}
func (self methodsTileMap) GetUsedCells(layer int64) ArrayOf[Vector2i] {
	return self.Runtime.TileMap_get_used_cells(TileMap{self}, layer)
}
func (self methodsTileMap) GetUsedCellsById(layer int64, source_id int64, atlas_coords Vector2i, alternative_tile int64) ArrayOf[Vector2i] {
	return self.Runtime.TileMap_get_used_cells_by_id(TileMap{self}, layer, source_id, atlas_coords, alternative_tile)
}
func (self methodsTileMap) GetUsedRect() Rect2i {
	return self.Runtime.TileMap_get_used_rect(TileMap{self})
}
func (self methodsTileMap) MapToLocal(map_position Vector2i) Vector2 {
	return self.Runtime.TileMap_map_to_local(TileMap{self}, map_position)
}
func (self methodsTileMap) LocalToMap(local_position Vector2) Vector2i {
	return self.Runtime.TileMap_local_to_map(TileMap{self}, local_position)
}
func (self methodsTileMap) GetNeighborCell(coords Vector2i, neighbor TileSetCellNeighbor) Vector2i {
	return self.Runtime.TileMap_get_neighbor_cell(TileMap{self}, coords, neighbor)
}

type methodsTileMapPattern struct {
	_ [0]*methodsTileMapPattern
	class
}

func (self TileMapPattern) Resource() Resource {
	var parent Resource
	parent.class = self.class
	return parent
}
func (self methodsTileMapPattern) SetCell(coords Vector2i, source_id int64, atlas_coords Vector2i, alternative_tile int64) {
	self.Runtime.TileMapPattern_set_cell(TileMapPattern{self}, coords, source_id, atlas_coords, alternative_tile)
}
func (self methodsTileMapPattern) HasCell(coords Vector2i) bool {
	return self.Runtime.TileMapPattern_has_cell(TileMapPattern{self}, coords)
}
func (self methodsTileMapPattern) RemoveCell(coords Vector2i, update_size bool) {
	self.Runtime.TileMapPattern_remove_cell(TileMapPattern{self}, coords, update_size)
}
func (self methodsTileMapPattern) GetCellSourceId(coords Vector2i) int64 {
	return self.Runtime.TileMapPattern_get_cell_source_id(TileMapPattern{self}, coords)
}
func (self methodsTileMapPattern) GetCellAtlasCoords(coords Vector2i) Vector2i {
	return self.Runtime.TileMapPattern_get_cell_atlas_coords(TileMapPattern{self}, coords)
}
func (self methodsTileMapPattern) GetCellAlternativeTile(coords Vector2i) int64 {
	return self.Runtime.TileMapPattern_get_cell_alternative_tile(TileMapPattern{self}, coords)
}
func (self methodsTileMapPattern) GetUsedCells() ArrayOf[Vector2i] {
	return self.Runtime.TileMapPattern_get_used_cells(TileMapPattern{self})
}
func (self methodsTileMapPattern) GetSize() Vector2i {
	return self.Runtime.TileMapPattern_get_size(TileMapPattern{self})
}
func (self methodsTileMapPattern) SetSize(size Vector2i) {
	self.Runtime.TileMapPattern_set_size(TileMapPattern{self}, size)
}
func (self methodsTileMapPattern) IsEmpty() bool {
	return self.Runtime.TileMapPattern_is_empty(TileMapPattern{self})
}

type methodsTileSet struct {
	_ [0]*methodsTileSet
	class
}

func (self TileSet) Resource() Resource {
	var parent Resource
	parent.class = self.class
	return parent
}
func (self methodsTileSet) GetNextSourceId() int64 {
	return self.Runtime.TileSet_get_next_source_id(TileSet{self})
}
func (self methodsTileSet) AddSource(source TileSetSource, atlas_source_id_override int64) int64 {
	return self.Runtime.TileSet_add_source(TileSet{self}, source, atlas_source_id_override)
}
func (self methodsTileSet) RemoveSource(source_id int64) {
	self.Runtime.TileSet_remove_source(TileSet{self}, source_id)
}
func (self methodsTileSet) SetSourceId(source_id int64, new_source_id int64) {
	self.Runtime.TileSet_set_source_id(TileSet{self}, source_id, new_source_id)
}
func (self methodsTileSet) GetSourceCount() int64 {
	return self.Runtime.TileSet_get_source_count(TileSet{self})
}
func (self methodsTileSet) GetSourceId(index int64) int64 {
	return self.Runtime.TileSet_get_source_id(TileSet{self}, index)
}
func (self methodsTileSet) HasSource(source_id int64) bool {
	return self.Runtime.TileSet_has_source(TileSet{self}, source_id)
}
func (self methodsTileSet) GetSource(source_id int64) TileSetSource {
	return self.Runtime.TileSet_get_source(TileSet{self}, source_id)
}
func (self methodsTileSet) SetTileShape(shape TileSetTileShape) {
	self.Runtime.TileSet_set_tile_shape(TileSet{self}, shape)
}
func (self methodsTileSet) GetTileShape() TileSetTileShape {
	return self.Runtime.TileSet_get_tile_shape(TileSet{self})
}
func (self methodsTileSet) SetTileLayout(layout TileSetTileLayout) {
	self.Runtime.TileSet_set_tile_layout(TileSet{self}, layout)
}
func (self methodsTileSet) GetTileLayout() TileSetTileLayout {
	return self.Runtime.TileSet_get_tile_layout(TileSet{self})
}
func (self methodsTileSet) SetTileOffsetAxis(alignment TileSetTileOffsetAxis) {
	self.Runtime.TileSet_set_tile_offset_axis(TileSet{self}, alignment)
}
func (self methodsTileSet) GetTileOffsetAxis() TileSetTileOffsetAxis {
	return self.Runtime.TileSet_get_tile_offset_axis(TileSet{self})
}
func (self methodsTileSet) SetTileSize(size Vector2i) {
	self.Runtime.TileSet_set_tile_size(TileSet{self}, size)
}
func (self methodsTileSet) GetTileSize() Vector2i {
	return self.Runtime.TileSet_get_tile_size(TileSet{self})
}
func (self methodsTileSet) SetUvClipping(uv_clipping bool) {
	self.Runtime.TileSet_set_uv_clipping(TileSet{self}, uv_clipping)
}
func (self methodsTileSet) IsUvClipping() bool {
	return self.Runtime.TileSet_is_uv_clipping(TileSet{self})
}
func (self methodsTileSet) GetOcclusionLayersCount() int64 {
	return self.Runtime.TileSet_get_occlusion_layers_count(TileSet{self})
}
func (self methodsTileSet) AddOcclusionLayer(to_position int64) {
	self.Runtime.TileSet_add_occlusion_layer(TileSet{self}, to_position)
}
func (self methodsTileSet) MoveOcclusionLayer(layer_index int64, to_position int64) {
	self.Runtime.TileSet_move_occlusion_layer(TileSet{self}, layer_index, to_position)
}
func (self methodsTileSet) RemoveOcclusionLayer(layer_index int64) {
	self.Runtime.TileSet_remove_occlusion_layer(TileSet{self}, layer_index)
}
func (self methodsTileSet) SetOcclusionLayerLightMask(layer_index int64, light_mask int64) {
	self.Runtime.TileSet_set_occlusion_layer_light_mask(TileSet{self}, layer_index, light_mask)
}
func (self methodsTileSet) GetOcclusionLayerLightMask(layer_index int64) int64 {
	return self.Runtime.TileSet_get_occlusion_layer_light_mask(TileSet{self}, layer_index)
}
func (self methodsTileSet) SetOcclusionLayerSdfCollision(layer_index int64, sdf_collision bool) {
	self.Runtime.TileSet_set_occlusion_layer_sdf_collision(TileSet{self}, layer_index, sdf_collision)
}
func (self methodsTileSet) GetOcclusionLayerSdfCollision(layer_index int64) bool {
	return self.Runtime.TileSet_get_occlusion_layer_sdf_collision(TileSet{self}, layer_index)
}
func (self methodsTileSet) GetPhysicsLayersCount() int64 {
	return self.Runtime.TileSet_get_physics_layers_count(TileSet{self})
}
func (self methodsTileSet) AddPhysicsLayer(to_position int64) {
	self.Runtime.TileSet_add_physics_layer(TileSet{self}, to_position)
}
func (self methodsTileSet) MovePhysicsLayer(layer_index int64, to_position int64) {
	self.Runtime.TileSet_move_physics_layer(TileSet{self}, layer_index, to_position)
}
func (self methodsTileSet) RemovePhysicsLayer(layer_index int64) {
	self.Runtime.TileSet_remove_physics_layer(TileSet{self}, layer_index)
}
func (self methodsTileSet) SetPhysicsLayerCollisionLayer(layer_index int64, layer int64) {
	self.Runtime.TileSet_set_physics_layer_collision_layer(TileSet{self}, layer_index, layer)
}
func (self methodsTileSet) GetPhysicsLayerCollisionLayer(layer_index int64) int64 {
	return self.Runtime.TileSet_get_physics_layer_collision_layer(TileSet{self}, layer_index)
}
func (self methodsTileSet) SetPhysicsLayerCollisionMask(layer_index int64, mask int64) {
	self.Runtime.TileSet_set_physics_layer_collision_mask(TileSet{self}, layer_index, mask)
}
func (self methodsTileSet) GetPhysicsLayerCollisionMask(layer_index int64) int64 {
	return self.Runtime.TileSet_get_physics_layer_collision_mask(TileSet{self}, layer_index)
}
func (self methodsTileSet) SetPhysicsLayerPhysicsMaterial(layer_index int64, physics_material PhysicsMaterial) {
	self.Runtime.TileSet_set_physics_layer_physics_material(TileSet{self}, layer_index, physics_material)
}
func (self methodsTileSet) GetPhysicsLayerPhysicsMaterial(layer_index int64) PhysicsMaterial {
	return self.Runtime.TileSet_get_physics_layer_physics_material(TileSet{self}, layer_index)
}
func (self methodsTileSet) GetTerrainSetsCount() int64 {
	return self.Runtime.TileSet_get_terrain_sets_count(TileSet{self})
}
func (self methodsTileSet) AddTerrainSet(to_position int64) {
	self.Runtime.TileSet_add_terrain_set(TileSet{self}, to_position)
}
func (self methodsTileSet) MoveTerrainSet(terrain_set int64, to_position int64) {
	self.Runtime.TileSet_move_terrain_set(TileSet{self}, terrain_set, to_position)
}
func (self methodsTileSet) RemoveTerrainSet(terrain_set int64) {
	self.Runtime.TileSet_remove_terrain_set(TileSet{self}, terrain_set)
}
func (self methodsTileSet) SetTerrainSetMode(terrain_set int64, mode TileSetTerrainMode) {
	self.Runtime.TileSet_set_terrain_set_mode(TileSet{self}, terrain_set, mode)
}
func (self methodsTileSet) GetTerrainSetMode(terrain_set int64) TileSetTerrainMode {
	return self.Runtime.TileSet_get_terrain_set_mode(TileSet{self}, terrain_set)
}
func (self methodsTileSet) GetTerrainsCount(terrain_set int64) int64 {
	return self.Runtime.TileSet_get_terrains_count(TileSet{self}, terrain_set)
}
func (self methodsTileSet) AddTerrain(terrain_set int64, to_position int64) {
	self.Runtime.TileSet_add_terrain(TileSet{self}, terrain_set, to_position)
}
func (self methodsTileSet) MoveTerrain(terrain_set int64, terrain_index int64, to_position int64) {
	self.Runtime.TileSet_move_terrain(TileSet{self}, terrain_set, terrain_index, to_position)
}
func (self methodsTileSet) RemoveTerrain(terrain_set int64, terrain_index int64) {
	self.Runtime.TileSet_remove_terrain(TileSet{self}, terrain_set, terrain_index)
}
func (self methodsTileSet) SetTerrainName(terrain_set int64, terrain_index int64, name string) {
	self.Runtime.TileSet_set_terrain_name(TileSet{self}, terrain_set, terrain_index, name)
}
func (self methodsTileSet) GetTerrainName(terrain_set int64, terrain_index int64) string {
	return self.Runtime.TileSet_get_terrain_name(TileSet{self}, terrain_set, terrain_index)
}
func (self methodsTileSet) SetTerrainColor(terrain_set int64, terrain_index int64, color Color) {
	self.Runtime.TileSet_set_terrain_color(TileSet{self}, terrain_set, terrain_index, color)
}
func (self methodsTileSet) GetTerrainColor(terrain_set int64, terrain_index int64) Color {
	return self.Runtime.TileSet_get_terrain_color(TileSet{self}, terrain_set, terrain_index)
}
func (self methodsTileSet) GetNavigationLayersCount() int64 {
	return self.Runtime.TileSet_get_navigation_layers_count(TileSet{self})
}
func (self methodsTileSet) AddNavigationLayer(to_position int64) {
	self.Runtime.TileSet_add_navigation_layer(TileSet{self}, to_position)
}
func (self methodsTileSet) MoveNavigationLayer(layer_index int64, to_position int64) {
	self.Runtime.TileSet_move_navigation_layer(TileSet{self}, layer_index, to_position)
}
func (self methodsTileSet) RemoveNavigationLayer(layer_index int64) {
	self.Runtime.TileSet_remove_navigation_layer(TileSet{self}, layer_index)
}
func (self methodsTileSet) SetNavigationLayerLayers(layer_index int64, layers int64) {
	self.Runtime.TileSet_set_navigation_layer_layers(TileSet{self}, layer_index, layers)
}
func (self methodsTileSet) GetNavigationLayerLayers(layer_index int64) int64 {
	return self.Runtime.TileSet_get_navigation_layer_layers(TileSet{self}, layer_index)
}
func (self methodsTileSet) SetNavigationLayerLayerValue(layer_index int64, layer_number int64, value bool) {
	self.Runtime.TileSet_set_navigation_layer_layer_value(TileSet{self}, layer_index, layer_number, value)
}
func (self methodsTileSet) GetNavigationLayerLayerValue(layer_index int64, layer_number int64) bool {
	return self.Runtime.TileSet_get_navigation_layer_layer_value(TileSet{self}, layer_index, layer_number)
}
func (self methodsTileSet) GetCustomDataLayersCount() int64 {
	return self.Runtime.TileSet_get_custom_data_layers_count(TileSet{self})
}
func (self methodsTileSet) AddCustomDataLayer(to_position int64) {
	self.Runtime.TileSet_add_custom_data_layer(TileSet{self}, to_position)
}
func (self methodsTileSet) MoveCustomDataLayer(layer_index int64, to_position int64) {
	self.Runtime.TileSet_move_custom_data_layer(TileSet{self}, layer_index, to_position)
}
func (self methodsTileSet) RemoveCustomDataLayer(layer_index int64) {
	self.Runtime.TileSet_remove_custom_data_layer(TileSet{self}, layer_index)
}
func (self methodsTileSet) GetCustomDataLayerByName(layer_name string) int64 {
	return self.Runtime.TileSet_get_custom_data_layer_by_name(TileSet{self}, layer_name)
}
func (self methodsTileSet) SetCustomDataLayerName(layer_index int64, layer_name string) {
	self.Runtime.TileSet_set_custom_data_layer_name(TileSet{self}, layer_index, layer_name)
}
func (self methodsTileSet) GetCustomDataLayerName(layer_index int64) string {
	return self.Runtime.TileSet_get_custom_data_layer_name(TileSet{self}, layer_index)
}
func (self methodsTileSet) SetCustomDataLayerType(layer_index int64, layer_type VariantType) {
	self.Runtime.TileSet_set_custom_data_layer_type(TileSet{self}, layer_index, layer_type)
}
func (self methodsTileSet) GetCustomDataLayerType(layer_index int64) VariantType {
	return self.Runtime.TileSet_get_custom_data_layer_type(TileSet{self}, layer_index)
}
func (self methodsTileSet) SetSourceLevelTileProxy(source_from int64, source_to int64) {
	self.Runtime.TileSet_set_source_level_tile_proxy(TileSet{self}, source_from, source_to)
}
func (self methodsTileSet) GetSourceLevelTileProxy(source_from int64) int64 {
	return self.Runtime.TileSet_get_source_level_tile_proxy(TileSet{self}, source_from)
}
func (self methodsTileSet) HasSourceLevelTileProxy(source_from int64) bool {
	return self.Runtime.TileSet_has_source_level_tile_proxy(TileSet{self}, source_from)
}
func (self methodsTileSet) RemoveSourceLevelTileProxy(source_from int64) {
	self.Runtime.TileSet_remove_source_level_tile_proxy(TileSet{self}, source_from)
}
func (self methodsTileSet) SetCoordsLevelTileProxy(p_source_from int64, coords_from Vector2i, source_to int64, coords_to Vector2i) {
	self.Runtime.TileSet_set_coords_level_tile_proxy(TileSet{self}, p_source_from, coords_from, source_to, coords_to)
}
func (self methodsTileSet) GetCoordsLevelTileProxy(source_from int64, coords_from Vector2i) Array {
	return self.Runtime.TileSet_get_coords_level_tile_proxy(TileSet{self}, source_from, coords_from)
}
func (self methodsTileSet) HasCoordsLevelTileProxy(source_from int64, coords_from Vector2i) bool {
	return self.Runtime.TileSet_has_coords_level_tile_proxy(TileSet{self}, source_from, coords_from)
}
func (self methodsTileSet) RemoveCoordsLevelTileProxy(source_from int64, coords_from Vector2i) {
	self.Runtime.TileSet_remove_coords_level_tile_proxy(TileSet{self}, source_from, coords_from)
}
func (self methodsTileSet) SetAlternativeLevelTileProxy(source_from int64, coords_from Vector2i, alternative_from int64, source_to int64, coords_to Vector2i, alternative_to int64) {
	self.Runtime.TileSet_set_alternative_level_tile_proxy(TileSet{self}, source_from, coords_from, alternative_from, source_to, coords_to, alternative_to)
}
func (self methodsTileSet) GetAlternativeLevelTileProxy(source_from int64, coords_from Vector2i, alternative_from int64) Array {
	return self.Runtime.TileSet_get_alternative_level_tile_proxy(TileSet{self}, source_from, coords_from, alternative_from)
}
func (self methodsTileSet) HasAlternativeLevelTileProxy(source_from int64, coords_from Vector2i, alternative_from int64) bool {
	return self.Runtime.TileSet_has_alternative_level_tile_proxy(TileSet{self}, source_from, coords_from, alternative_from)
}
func (self methodsTileSet) RemoveAlternativeLevelTileProxy(source_from int64, coords_from Vector2i, alternative_from int64) {
	self.Runtime.TileSet_remove_alternative_level_tile_proxy(TileSet{self}, source_from, coords_from, alternative_from)
}
func (self methodsTileSet) MapTileProxy(source_from int64, coords_from Vector2i, alternative_from int64) Array {
	return self.Runtime.TileSet_map_tile_proxy(TileSet{self}, source_from, coords_from, alternative_from)
}
func (self methodsTileSet) CleanupInvalidTileProxies() {
	self.Runtime.TileSet_cleanup_invalid_tile_proxies(TileSet{self})
}
func (self methodsTileSet) ClearTileProxies() {
	self.Runtime.TileSet_clear_tile_proxies(TileSet{self})
}
func (self methodsTileSet) AddPattern(pattern TileMapPattern, index int64) int64 {
	return self.Runtime.TileSet_add_pattern(TileSet{self}, pattern, index)
}
func (self methodsTileSet) GetPattern(index int64) TileMapPattern {
	return self.Runtime.TileSet_get_pattern(TileSet{self}, index)
}
func (self methodsTileSet) RemovePattern(index int64) {
	self.Runtime.TileSet_remove_pattern(TileSet{self}, index)
}
func (self methodsTileSet) GetPatternsCount() int64 {
	return self.Runtime.TileSet_get_patterns_count(TileSet{self})
}

type methodsTileSetAtlasSource struct {
	_ [0]*methodsTileSetAtlasSource
	class
}

func (self TileSetAtlasSource) TileSetSource() TileSetSource {
	var parent TileSetSource
	parent.class = self.class
	return parent
}
func (self methodsTileSetAtlasSource) SetTexture(texture Texture2D) {
	self.Runtime.TileSetAtlasSource_set_texture(TileSetAtlasSource{self}, texture)
}
func (self methodsTileSetAtlasSource) GetTexture() Texture2D {
	return self.Runtime.TileSetAtlasSource_get_texture(TileSetAtlasSource{self})
}
func (self methodsTileSetAtlasSource) SetMargins(margins Vector2i) {
	self.Runtime.TileSetAtlasSource_set_margins(TileSetAtlasSource{self}, margins)
}
func (self methodsTileSetAtlasSource) GetMargins() Vector2i {
	return self.Runtime.TileSetAtlasSource_get_margins(TileSetAtlasSource{self})
}
func (self methodsTileSetAtlasSource) SetSeparation(separation Vector2i) {
	self.Runtime.TileSetAtlasSource_set_separation(TileSetAtlasSource{self}, separation)
}
func (self methodsTileSetAtlasSource) GetSeparation() Vector2i {
	return self.Runtime.TileSetAtlasSource_get_separation(TileSetAtlasSource{self})
}
func (self methodsTileSetAtlasSource) SetTextureRegionSize(texture_region_size Vector2i) {
	self.Runtime.TileSetAtlasSource_set_texture_region_size(TileSetAtlasSource{self}, texture_region_size)
}
func (self methodsTileSetAtlasSource) GetTextureRegionSize() Vector2i {
	return self.Runtime.TileSetAtlasSource_get_texture_region_size(TileSetAtlasSource{self})
}
func (self methodsTileSetAtlasSource) SetUseTexturePadding(use_texture_padding bool) {
	self.Runtime.TileSetAtlasSource_set_use_texture_padding(TileSetAtlasSource{self}, use_texture_padding)
}
func (self methodsTileSetAtlasSource) GetUseTexturePadding() bool {
	return self.Runtime.TileSetAtlasSource_get_use_texture_padding(TileSetAtlasSource{self})
}
func (self methodsTileSetAtlasSource) CreateTile(atlas_coords Vector2i, size Vector2i) {
	self.Runtime.TileSetAtlasSource_create_tile(TileSetAtlasSource{self}, atlas_coords, size)
}
func (self methodsTileSetAtlasSource) RemoveTile(atlas_coords Vector2i) {
	self.Runtime.TileSetAtlasSource_remove_tile(TileSetAtlasSource{self}, atlas_coords)
}
func (self methodsTileSetAtlasSource) MoveTileInAtlas(atlas_coords Vector2i, new_atlas_coords Vector2i, new_size Vector2i) {
	self.Runtime.TileSetAtlasSource_move_tile_in_atlas(TileSetAtlasSource{self}, atlas_coords, new_atlas_coords, new_size)
}
func (self methodsTileSetAtlasSource) GetTileSizeInAtlas(atlas_coords Vector2i) Vector2i {
	return self.Runtime.TileSetAtlasSource_get_tile_size_in_atlas(TileSetAtlasSource{self}, atlas_coords)
}
func (self methodsTileSetAtlasSource) HasRoomForTile(atlas_coords Vector2i, size Vector2i, animation_columns int64, animation_separation Vector2i, frames_count int64, ignored_tile Vector2i) bool {
	return self.Runtime.TileSetAtlasSource_has_room_for_tile(TileSetAtlasSource{self}, atlas_coords, size, animation_columns, animation_separation, frames_count, ignored_tile)
}
func (self methodsTileSetAtlasSource) GetTilesToBeRemovedOnChange(texture Texture2D, margins Vector2i, separation Vector2i, texture_region_size Vector2i) PackedVector2Array {
	return self.Runtime.TileSetAtlasSource_get_tiles_to_be_removed_on_change(TileSetAtlasSource{self}, texture, margins, separation, texture_region_size)
}
func (self methodsTileSetAtlasSource) GetTileAtCoords(atlas_coords Vector2i) Vector2i {
	return self.Runtime.TileSetAtlasSource_get_tile_at_coords(TileSetAtlasSource{self}, atlas_coords)
}
func (self methodsTileSetAtlasSource) HasTilesOutsideTexture() bool {
	return self.Runtime.TileSetAtlasSource_has_tiles_outside_texture(TileSetAtlasSource{self})
}
func (self methodsTileSetAtlasSource) ClearTilesOutsideTexture() {
	self.Runtime.TileSetAtlasSource_clear_tiles_outside_texture(TileSetAtlasSource{self})
}
func (self methodsTileSetAtlasSource) SetTileAnimationColumns(atlas_coords Vector2i, frame_columns int64) {
	self.Runtime.TileSetAtlasSource_set_tile_animation_columns(TileSetAtlasSource{self}, atlas_coords, frame_columns)
}
func (self methodsTileSetAtlasSource) GetTileAnimationColumns(atlas_coords Vector2i) int64 {
	return self.Runtime.TileSetAtlasSource_get_tile_animation_columns(TileSetAtlasSource{self}, atlas_coords)
}
func (self methodsTileSetAtlasSource) SetTileAnimationSeparation(atlas_coords Vector2i, separation Vector2i) {
	self.Runtime.TileSetAtlasSource_set_tile_animation_separation(TileSetAtlasSource{self}, atlas_coords, separation)
}
func (self methodsTileSetAtlasSource) GetTileAnimationSeparation(atlas_coords Vector2i) Vector2i {
	return self.Runtime.TileSetAtlasSource_get_tile_animation_separation(TileSetAtlasSource{self}, atlas_coords)
}
func (self methodsTileSetAtlasSource) SetTileAnimationSpeed(atlas_coords Vector2i, speed Float) {
	self.Runtime.TileSetAtlasSource_set_tile_animation_speed(TileSetAtlasSource{self}, atlas_coords, speed)
}
func (self methodsTileSetAtlasSource) GetTileAnimationSpeed(atlas_coords Vector2i) Float {
	return self.Runtime.TileSetAtlasSource_get_tile_animation_speed(TileSetAtlasSource{self}, atlas_coords)
}
func (self methodsTileSetAtlasSource) SetTileAnimationMode(atlas_coords Vector2i, mode TileSetAtlasSourceTileAnimationMode) {
	self.Runtime.TileSetAtlasSource_set_tile_animation_mode(TileSetAtlasSource{self}, atlas_coords, mode)
}
func (self methodsTileSetAtlasSource) GetTileAnimationMode(atlas_coords Vector2i) TileSetAtlasSourceTileAnimationMode {
	return self.Runtime.TileSetAtlasSource_get_tile_animation_mode(TileSetAtlasSource{self}, atlas_coords)
}
func (self methodsTileSetAtlasSource) SetTileAnimationFramesCount(atlas_coords Vector2i, frames_count int64) {
	self.Runtime.TileSetAtlasSource_set_tile_animation_frames_count(TileSetAtlasSource{self}, atlas_coords, frames_count)
}
func (self methodsTileSetAtlasSource) GetTileAnimationFramesCount(atlas_coords Vector2i) int64 {
	return self.Runtime.TileSetAtlasSource_get_tile_animation_frames_count(TileSetAtlasSource{self}, atlas_coords)
}
func (self methodsTileSetAtlasSource) SetTileAnimationFrameDuration(atlas_coords Vector2i, frame_index int64, duration Float) {
	self.Runtime.TileSetAtlasSource_set_tile_animation_frame_duration(TileSetAtlasSource{self}, atlas_coords, frame_index, duration)
}
func (self methodsTileSetAtlasSource) GetTileAnimationFrameDuration(atlas_coords Vector2i, frame_index int64) Float {
	return self.Runtime.TileSetAtlasSource_get_tile_animation_frame_duration(TileSetAtlasSource{self}, atlas_coords, frame_index)
}
func (self methodsTileSetAtlasSource) GetTileAnimationTotalDuration(atlas_coords Vector2i) Float {
	return self.Runtime.TileSetAtlasSource_get_tile_animation_total_duration(TileSetAtlasSource{self}, atlas_coords)
}
func (self methodsTileSetAtlasSource) CreateAlternativeTile(atlas_coords Vector2i, alternative_id_override int64) int64 {
	return self.Runtime.TileSetAtlasSource_create_alternative_tile(TileSetAtlasSource{self}, atlas_coords, alternative_id_override)
}
func (self methodsTileSetAtlasSource) RemoveAlternativeTile(atlas_coords Vector2i, alternative_tile int64) {
	self.Runtime.TileSetAtlasSource_remove_alternative_tile(TileSetAtlasSource{self}, atlas_coords, alternative_tile)
}
func (self methodsTileSetAtlasSource) SetAlternativeTileId(atlas_coords Vector2i, alternative_tile int64, new_id int64) {
	self.Runtime.TileSetAtlasSource_set_alternative_tile_id(TileSetAtlasSource{self}, atlas_coords, alternative_tile, new_id)
}
func (self methodsTileSetAtlasSource) GetNextAlternativeTileId(atlas_coords Vector2i) int64 {
	return self.Runtime.TileSetAtlasSource_get_next_alternative_tile_id(TileSetAtlasSource{self}, atlas_coords)
}
func (self methodsTileSetAtlasSource) GetTileData(atlas_coords Vector2i, alternative_tile int64) TileData {
	return self.Runtime.TileSetAtlasSource_get_tile_data(TileSetAtlasSource{self}, atlas_coords, alternative_tile)
}
func (self methodsTileSetAtlasSource) GetAtlasGridSize() Vector2i {
	return self.Runtime.TileSetAtlasSource_get_atlas_grid_size(TileSetAtlasSource{self})
}
func (self methodsTileSetAtlasSource) GetTileTextureRegion(atlas_coords Vector2i, frame int64) Rect2i {
	return self.Runtime.TileSetAtlasSource_get_tile_texture_region(TileSetAtlasSource{self}, atlas_coords, frame)
}
func (self methodsTileSetAtlasSource) GetRuntimeTexture() Texture2D {
	return self.Runtime.TileSetAtlasSource_get_runtime_texture(TileSetAtlasSource{self})
}
func (self methodsTileSetAtlasSource) GetRuntimeTileTextureRegion(atlas_coords Vector2i, frame int64) Rect2i {
	return self.Runtime.TileSetAtlasSource_get_runtime_tile_texture_region(TileSetAtlasSource{self}, atlas_coords, frame)
}

type methodsTileSetScenesCollectionSource struct {
	_ [0]*methodsTileSetScenesCollectionSource
	class
}

func (self TileSetScenesCollectionSource) TileSetSource() TileSetSource {
	var parent TileSetSource
	parent.class = self.class
	return parent
}
func (self methodsTileSetScenesCollectionSource) GetSceneTilesCount() int64 {
	return self.Runtime.TileSetScenesCollectionSource_get_scene_tiles_count(TileSetScenesCollectionSource{self})
}
func (self methodsTileSetScenesCollectionSource) GetSceneTileId(index int64) int64 {
	return self.Runtime.TileSetScenesCollectionSource_get_scene_tile_id(TileSetScenesCollectionSource{self}, index)
}
func (self methodsTileSetScenesCollectionSource) HasSceneTileId(id int64) bool {
	return self.Runtime.TileSetScenesCollectionSource_has_scene_tile_id(TileSetScenesCollectionSource{self}, id)
}
func (self methodsTileSetScenesCollectionSource) CreateSceneTile(packed_scene PackedScene, id_override int64) int64 {
	return self.Runtime.TileSetScenesCollectionSource_create_scene_tile(TileSetScenesCollectionSource{self}, packed_scene, id_override)
}
func (self methodsTileSetScenesCollectionSource) SetSceneTileId(id int64, new_id int64) {
	self.Runtime.TileSetScenesCollectionSource_set_scene_tile_id(TileSetScenesCollectionSource{self}, id, new_id)
}
func (self methodsTileSetScenesCollectionSource) SetSceneTileScene(id int64, packed_scene PackedScene) {
	self.Runtime.TileSetScenesCollectionSource_set_scene_tile_scene(TileSetScenesCollectionSource{self}, id, packed_scene)
}
func (self methodsTileSetScenesCollectionSource) GetSceneTileScene(id int64) PackedScene {
	return self.Runtime.TileSetScenesCollectionSource_get_scene_tile_scene(TileSetScenesCollectionSource{self}, id)
}
func (self methodsTileSetScenesCollectionSource) SetSceneTileDisplayPlaceholder(id int64, display_placeholder bool) {
	self.Runtime.TileSetScenesCollectionSource_set_scene_tile_display_placeholder(TileSetScenesCollectionSource{self}, id, display_placeholder)
}
func (self methodsTileSetScenesCollectionSource) GetSceneTileDisplayPlaceholder(id int64) bool {
	return self.Runtime.TileSetScenesCollectionSource_get_scene_tile_display_placeholder(TileSetScenesCollectionSource{self}, id)
}
func (self methodsTileSetScenesCollectionSource) RemoveSceneTile(id int64) {
	self.Runtime.TileSetScenesCollectionSource_remove_scene_tile(TileSetScenesCollectionSource{self}, id)
}
func (self methodsTileSetScenesCollectionSource) GetNextSceneTileId() int64 {
	return self.Runtime.TileSetScenesCollectionSource_get_next_scene_tile_id(TileSetScenesCollectionSource{self})
}

type methodsTileSetSource struct {
	_ [0]*methodsTileSetSource
	class
}

func (self TileSetSource) Resource() Resource {
	var parent Resource
	parent.class = self.class
	return parent
}
func (self methodsTileSetSource) GetTilesCount() int64 {
	return self.Runtime.TileSetSource_get_tiles_count(TileSetSource{self})
}
func (self methodsTileSetSource) GetTileId(index int64) Vector2i {
	return self.Runtime.TileSetSource_get_tile_id(TileSetSource{self}, index)
}
func (self methodsTileSetSource) HasTile(atlas_coords Vector2i) bool {
	return self.Runtime.TileSetSource_has_tile(TileSetSource{self}, atlas_coords)
}
func (self methodsTileSetSource) GetAlternativeTilesCount(atlas_coords Vector2i) int64 {
	return self.Runtime.TileSetSource_get_alternative_tiles_count(TileSetSource{self}, atlas_coords)
}
func (self methodsTileSetSource) GetAlternativeTileId(atlas_coords Vector2i, index int64) int64 {
	return self.Runtime.TileSetSource_get_alternative_tile_id(TileSetSource{self}, atlas_coords, index)
}
func (self methodsTileSetSource) HasAlternativeTile(atlas_coords Vector2i, alternative_tile int64) bool {
	return self.Runtime.TileSetSource_has_alternative_tile(TileSetSource{self}, atlas_coords, alternative_tile)
}

type methodsTime struct {
	_ [0]*methodsTime
	class
}

func (self Time) Object() Object { var parent Object; parent.class = self.class; return parent }
func (self methodsTime) GetDatetimeDictFromUnixTime(unix_time_val int64) Dictionary {
	return self.Runtime.Time_get_datetime_dict_from_unix_time(Time{self}, unix_time_val)
}
func (self methodsTime) GetDateDictFromUnixTime(unix_time_val int64) Dictionary {
	return self.Runtime.Time_get_date_dict_from_unix_time(Time{self}, unix_time_val)
}
func (self methodsTime) GetTimeDictFromUnixTime(unix_time_val int64) Dictionary {
	return self.Runtime.Time_get_time_dict_from_unix_time(Time{self}, unix_time_val)
}
func (self methodsTime) GetDatetimeStringFromUnixTime(unix_time_val int64, use_space bool) string {
	return self.Runtime.Time_get_datetime_string_from_unix_time(Time{self}, unix_time_val, use_space)
}
func (self methodsTime) GetDateStringFromUnixTime(unix_time_val int64) string {
	return self.Runtime.Time_get_date_string_from_unix_time(Time{self}, unix_time_val)
}
func (self methodsTime) GetTimeStringFromUnixTime(unix_time_val int64) string {
	return self.Runtime.Time_get_time_string_from_unix_time(Time{self}, unix_time_val)
}
func (self methodsTime) GetDatetimeDictFromDatetimeString(datetime string, weekday bool) Dictionary {
	return self.Runtime.Time_get_datetime_dict_from_datetime_string(Time{self}, datetime, weekday)
}
func (self methodsTime) GetDatetimeStringFromDatetimeDict(datetime Dictionary, use_space bool) string {
	return self.Runtime.Time_get_datetime_string_from_datetime_dict(Time{self}, datetime, use_space)
}
func (self methodsTime) GetUnixTimeFromDatetimeDict(datetime Dictionary) int64 {
	return self.Runtime.Time_get_unix_time_from_datetime_dict(Time{self}, datetime)
}
func (self methodsTime) GetUnixTimeFromDatetimeString(datetime string) int64 {
	return self.Runtime.Time_get_unix_time_from_datetime_string(Time{self}, datetime)
}
func (self methodsTime) GetOffsetStringFromOffsetMinutes(offset_minutes int64) string {
	return self.Runtime.Time_get_offset_string_from_offset_minutes(Time{self}, offset_minutes)
}
func (self methodsTime) GetDatetimeDictFromSystem(utc bool) Dictionary {
	return self.Runtime.Time_get_datetime_dict_from_system(Time{self}, utc)
}
func (self methodsTime) GetDateDictFromSystem(utc bool) Dictionary {
	return self.Runtime.Time_get_date_dict_from_system(Time{self}, utc)
}
func (self methodsTime) GetTimeDictFromSystem(utc bool) Dictionary {
	return self.Runtime.Time_get_time_dict_from_system(Time{self}, utc)
}
func (self methodsTime) GetDatetimeStringFromSystem(utc bool, use_space bool) string {
	return self.Runtime.Time_get_datetime_string_from_system(Time{self}, utc, use_space)
}
func (self methodsTime) GetDateStringFromSystem(utc bool) string {
	return self.Runtime.Time_get_date_string_from_system(Time{self}, utc)
}
func (self methodsTime) GetTimeStringFromSystem(utc bool) string {
	return self.Runtime.Time_get_time_string_from_system(Time{self}, utc)
}
func (self methodsTime) GetTimeZoneFromSystem() Dictionary {
	return self.Runtime.Time_get_time_zone_from_system(Time{self})
}
func (self methodsTime) GetUnixTimeFromSystem() Float {
	return self.Runtime.Time_get_unix_time_from_system(Time{self})
}
func (self methodsTime) GetTicksMsec() int64 {
	return self.Runtime.Time_get_ticks_msec(Time{self})
}
func (self methodsTime) GetTicksUsec() int64 {
	return self.Runtime.Time_get_ticks_usec(Time{self})
}

type methodsTimer struct {
	_ [0]*methodsTimer
	class
}

func (self Timer) Node() Node { var parent Node; parent.class = self.class; return parent }
func (self methodsTimer) SetWaitTime(time_sec Float) {
	self.Runtime.Timer_set_wait_time(Timer{self}, time_sec)
}
func (self methodsTimer) GetWaitTime() Float {
	return self.Runtime.Timer_get_wait_time(Timer{self})
}
func (self methodsTimer) SetOneShot(enable bool) {
	self.Runtime.Timer_set_one_shot(Timer{self}, enable)
}
func (self methodsTimer) IsOneShot() bool {
	return self.Runtime.Timer_is_one_shot(Timer{self})
}
func (self methodsTimer) SetAutostart(enable bool) {
	self.Runtime.Timer_set_autostart(Timer{self}, enable)
}
func (self methodsTimer) HasAutostart() bool {
	return self.Runtime.Timer_has_autostart(Timer{self})
}
func (self methodsTimer) Start(time_sec Float) {
	self.Runtime.Timer_start(Timer{self}, time_sec)
}
func (self methodsTimer) Stop() {
	self.Runtime.Timer_stop(Timer{self})
}
func (self methodsTimer) SetPaused(paused bool) {
	self.Runtime.Timer_set_paused(Timer{self}, paused)
}
func (self methodsTimer) IsPaused() bool {
	return self.Runtime.Timer_is_paused(Timer{self})
}
func (self methodsTimer) IsStopped() bool {
	return self.Runtime.Timer_is_stopped(Timer{self})
}
func (self methodsTimer) GetTimeLeft() Float {
	return self.Runtime.Timer_get_time_left(Timer{self})
}
func (self methodsTimer) SetTimerProcessCallback(callback TimerTimerProcessCallback) {
	self.Runtime.Timer_set_timer_process_callback(Timer{self}, callback)
}
func (self methodsTimer) GetTimerProcessCallback() TimerTimerProcessCallback {
	return self.Runtime.Timer_get_timer_process_callback(Timer{self})
}

type methodsTorusMesh struct {
	_ [0]*methodsTorusMesh
	class
}

func (self TorusMesh) PrimitiveMesh() PrimitiveMesh {
	var parent PrimitiveMesh
	parent.class = self.class
	return parent
}
func (self methodsTorusMesh) SetInnerRadius(radius Float) {
	self.Runtime.TorusMesh_set_inner_radius(TorusMesh{self}, radius)
}
func (self methodsTorusMesh) GetInnerRadius() Float {
	return self.Runtime.TorusMesh_get_inner_radius(TorusMesh{self})
}
func (self methodsTorusMesh) SetOuterRadius(radius Float) {
	self.Runtime.TorusMesh_set_outer_radius(TorusMesh{self}, radius)
}
func (self methodsTorusMesh) GetOuterRadius() Float {
	return self.Runtime.TorusMesh_get_outer_radius(TorusMesh{self})
}
func (self methodsTorusMesh) SetRings(rings int64) {
	self.Runtime.TorusMesh_set_rings(TorusMesh{self}, rings)
}
func (self methodsTorusMesh) GetRings() int64 {
	return self.Runtime.TorusMesh_get_rings(TorusMesh{self})
}
func (self methodsTorusMesh) SetRingSegments(rings int64) {
	self.Runtime.TorusMesh_set_ring_segments(TorusMesh{self}, rings)
}
func (self methodsTorusMesh) GetRingSegments() int64 {
	return self.Runtime.TorusMesh_get_ring_segments(TorusMesh{self})
}

type methodsTouchScreenButton struct {
	_ [0]*methodsTouchScreenButton
	class
}

func (self TouchScreenButton) Node2D() Node2D {
	var parent Node2D
	parent.class = self.class
	return parent
}
func (self methodsTouchScreenButton) SetTextureNormal(texture Texture2D) {
	self.Runtime.TouchScreenButton_set_texture_normal(TouchScreenButton{self}, texture)
}
func (self methodsTouchScreenButton) GetTextureNormal() Texture2D {
	return self.Runtime.TouchScreenButton_get_texture_normal(TouchScreenButton{self})
}
func (self methodsTouchScreenButton) SetTexturePressed(texture Texture2D) {
	self.Runtime.TouchScreenButton_set_texture_pressed(TouchScreenButton{self}, texture)
}
func (self methodsTouchScreenButton) GetTexturePressed() Texture2D {
	return self.Runtime.TouchScreenButton_get_texture_pressed(TouchScreenButton{self})
}
func (self methodsTouchScreenButton) SetBitmask(bitmask BitMap) {
	self.Runtime.TouchScreenButton_set_bitmask(TouchScreenButton{self}, bitmask)
}
func (self methodsTouchScreenButton) GetBitmask() BitMap {
	return self.Runtime.TouchScreenButton_get_bitmask(TouchScreenButton{self})
}
func (self methodsTouchScreenButton) SetShape(shape Shape2D) {
	self.Runtime.TouchScreenButton_set_shape(TouchScreenButton{self}, shape)
}
func (self methodsTouchScreenButton) GetShape() Shape2D {
	return self.Runtime.TouchScreenButton_get_shape(TouchScreenButton{self})
}
func (self methodsTouchScreenButton) SetShapeCentered(bool bool) {
	self.Runtime.TouchScreenButton_set_shape_centered(TouchScreenButton{self}, bool)
}
func (self methodsTouchScreenButton) IsShapeCentered() bool {
	return self.Runtime.TouchScreenButton_is_shape_centered(TouchScreenButton{self})
}
func (self methodsTouchScreenButton) SetShapeVisible(bool bool) {
	self.Runtime.TouchScreenButton_set_shape_visible(TouchScreenButton{self}, bool)
}
func (self methodsTouchScreenButton) IsShapeVisible() bool {
	return self.Runtime.TouchScreenButton_is_shape_visible(TouchScreenButton{self})
}
func (self methodsTouchScreenButton) SetAction(action string) {
	self.Runtime.TouchScreenButton_set_action(TouchScreenButton{self}, action)
}
func (self methodsTouchScreenButton) GetAction() string {
	return self.Runtime.TouchScreenButton_get_action(TouchScreenButton{self})
}
func (self methodsTouchScreenButton) SetVisibilityMode(mode TouchScreenButtonVisibilityMode) {
	self.Runtime.TouchScreenButton_set_visibility_mode(TouchScreenButton{self}, mode)
}
func (self methodsTouchScreenButton) GetVisibilityMode() TouchScreenButtonVisibilityMode {
	return self.Runtime.TouchScreenButton_get_visibility_mode(TouchScreenButton{self})
}
func (self methodsTouchScreenButton) SetPassbyPress(enabled bool) {
	self.Runtime.TouchScreenButton_set_passby_press(TouchScreenButton{self}, enabled)
}
func (self methodsTouchScreenButton) IsPassbyPressEnabled() bool {
	return self.Runtime.TouchScreenButton_is_passby_press_enabled(TouchScreenButton{self})
}
func (self methodsTouchScreenButton) IsPressed() bool {
	return self.Runtime.TouchScreenButton_is_pressed(TouchScreenButton{self})
}

type methodsTranslation struct {
	_ [0]*methodsTranslation
	class
}

func (self Translation) Resource() Resource {
	var parent Resource
	parent.class = self.class
	return parent
}
func (self methodsTranslation) SetLocale(locale string) {
	self.Runtime.Translation_set_locale(Translation{self}, locale)
}
func (self methodsTranslation) GetLocale() string {
	return self.Runtime.Translation_get_locale(Translation{self})
}
func (self methodsTranslation) AddMessage(src_message string, xlated_message string, context string) {
	self.Runtime.Translation_add_message(Translation{self}, src_message, xlated_message, context)
}
func (self methodsTranslation) AddPluralMessage(src_message string, xlated_messages PackedStringArray, context string) {
	self.Runtime.Translation_add_plural_message(Translation{self}, src_message, xlated_messages, context)
}
func (self methodsTranslation) GetMessage(src_message string, context string) string {
	return self.Runtime.Translation_get_message(Translation{self}, src_message, context)
}
func (self methodsTranslation) GetPluralMessage(src_message string, src_plural_message string, n int64, context string) string {
	return self.Runtime.Translation_get_plural_message(Translation{self}, src_message, src_plural_message, n, context)
}
func (self methodsTranslation) EraseMessage(src_message string, context string) {
	self.Runtime.Translation_erase_message(Translation{self}, src_message, context)
}
func (self methodsTranslation) GetMessageList() PackedStringArray {
	return self.Runtime.Translation_get_message_list(Translation{self})
}
func (self methodsTranslation) GetTranslatedMessageList() PackedStringArray {
	return self.Runtime.Translation_get_translated_message_list(Translation{self})
}
func (self methodsTranslation) GetMessageCount() int64 {
	return self.Runtime.Translation_get_message_count(Translation{self})
}

type methodsTranslationServer struct {
	_ [0]*methodsTranslationServer
	class
}

func (self TranslationServer) Object() Object {
	var parent Object
	parent.class = self.class
	return parent
}
func (self methodsTranslationServer) SetLocale(locale string) {
	self.Runtime.TranslationServer_set_locale(TranslationServer{self}, locale)
}
func (self methodsTranslationServer) GetLocale() string {
	return self.Runtime.TranslationServer_get_locale(TranslationServer{self})
}
func (self methodsTranslationServer) GetToolLocale() string {
	return self.Runtime.TranslationServer_get_tool_locale(TranslationServer{self})
}
func (self methodsTranslationServer) CompareLocales(locale_a string, locale_b string) int64 {
	return self.Runtime.TranslationServer_compare_locales(TranslationServer{self}, locale_a, locale_b)
}
func (self methodsTranslationServer) StandardizeLocale(locale string) string {
	return self.Runtime.TranslationServer_standardize_locale(TranslationServer{self}, locale)
}
func (self methodsTranslationServer) GetAllLanguages() PackedStringArray {
	return self.Runtime.TranslationServer_get_all_languages(TranslationServer{self})
}
func (self methodsTranslationServer) GetLanguageName(language string) string {
	return self.Runtime.TranslationServer_get_language_name(TranslationServer{self}, language)
}
func (self methodsTranslationServer) GetAllScripts() PackedStringArray {
	return self.Runtime.TranslationServer_get_all_scripts(TranslationServer{self})
}
func (self methodsTranslationServer) GetScriptName(script string) string {
	return self.Runtime.TranslationServer_get_script_name(TranslationServer{self}, script)
}
func (self methodsTranslationServer) GetAllCountries() PackedStringArray {
	return self.Runtime.TranslationServer_get_all_countries(TranslationServer{self})
}
func (self methodsTranslationServer) GetCountryName(country string) string {
	return self.Runtime.TranslationServer_get_country_name(TranslationServer{self}, country)
}
func (self methodsTranslationServer) GetLocaleName(locale string) string {
	return self.Runtime.TranslationServer_get_locale_name(TranslationServer{self}, locale)
}
func (self methodsTranslationServer) Translate(message string, context string) string {
	return self.Runtime.TranslationServer_translate(TranslationServer{self}, message, context)
}
func (self methodsTranslationServer) TranslatePlural(message string, plural_message string, n int64, context string) string {
	return self.Runtime.TranslationServer_translate_plural(TranslationServer{self}, message, plural_message, n, context)
}
func (self methodsTranslationServer) AddTranslation(translation Translation) {
	self.Runtime.TranslationServer_add_translation(TranslationServer{self}, translation)
}
func (self methodsTranslationServer) RemoveTranslation(translation Translation) {
	self.Runtime.TranslationServer_remove_translation(TranslationServer{self}, translation)
}
func (self methodsTranslationServer) GetTranslationObject(locale string) Translation {
	return self.Runtime.TranslationServer_get_translation_object(TranslationServer{self}, locale)
}
func (self methodsTranslationServer) Clear() {
	self.Runtime.TranslationServer_clear(TranslationServer{self})
}
func (self methodsTranslationServer) GetLoadedLocales() PackedStringArray {
	return self.Runtime.TranslationServer_get_loaded_locales(TranslationServer{self})
}
func (self methodsTranslationServer) IsPseudolocalizationEnabled() bool {
	return self.Runtime.TranslationServer_is_pseudolocalization_enabled(TranslationServer{self})
}
func (self methodsTranslationServer) SetPseudolocalizationEnabled(enabled bool) {
	self.Runtime.TranslationServer_set_pseudolocalization_enabled(TranslationServer{self}, enabled)
}
func (self methodsTranslationServer) ReloadPseudolocalization() {
	self.Runtime.TranslationServer_reload_pseudolocalization(TranslationServer{self})
}
func (self methodsTranslationServer) Pseudolocalize(message string) string {
	return self.Runtime.TranslationServer_pseudolocalize(TranslationServer{self}, message)
}

type methodsTree struct {
	_ [0]*methodsTree
	class
}

func (self Tree) Control() Control { var parent Control; parent.class = self.class; return parent }
func (self methodsTree) Clear() {
	self.Runtime.Tree_clear(Tree{self})
}
func (self methodsTree) CreateItem(parent TreeItem, index int64) TreeItem {
	return self.Runtime.Tree_create_item(Tree{self}, parent, index)
}
func (self methodsTree) GetRoot() TreeItem {
	return self.Runtime.Tree_get_root(Tree{self})
}
func (self methodsTree) SetColumnCustomMinimumWidth(column int64, min_width int64) {
	self.Runtime.Tree_set_column_custom_minimum_width(Tree{self}, column, min_width)
}
func (self methodsTree) SetColumnExpand(column int64, expand bool) {
	self.Runtime.Tree_set_column_expand(Tree{self}, column, expand)
}
func (self methodsTree) SetColumnExpandRatio(column int64, ratio int64) {
	self.Runtime.Tree_set_column_expand_ratio(Tree{self}, column, ratio)
}
func (self methodsTree) SetColumnClipContent(column int64, enable bool) {
	self.Runtime.Tree_set_column_clip_content(Tree{self}, column, enable)
}
func (self methodsTree) IsColumnExpanding(column int64) bool {
	return self.Runtime.Tree_is_column_expanding(Tree{self}, column)
}
func (self methodsTree) IsColumnClippingContent(column int64) bool {
	return self.Runtime.Tree_is_column_clipping_content(Tree{self}, column)
}
func (self methodsTree) GetColumnExpandRatio(column int64) int64 {
	return self.Runtime.Tree_get_column_expand_ratio(Tree{self}, column)
}
func (self methodsTree) GetColumnWidth(column int64) int64 {
	return self.Runtime.Tree_get_column_width(Tree{self}, column)
}
func (self methodsTree) SetHideRoot(enable bool) {
	self.Runtime.Tree_set_hide_root(Tree{self}, enable)
}
func (self methodsTree) IsRootHidden() bool {
	return self.Runtime.Tree_is_root_hidden(Tree{self})
}
func (self methodsTree) GetNextSelected(from TreeItem) TreeItem {
	return self.Runtime.Tree_get_next_selected(Tree{self}, from)
}
func (self methodsTree) GetSelected() TreeItem {
	return self.Runtime.Tree_get_selected(Tree{self})
}
func (self methodsTree) SetSelected(item TreeItem, column int64) {
	self.Runtime.Tree_set_selected(Tree{self}, item, column)
}
func (self methodsTree) GetSelectedColumn() int64 {
	return self.Runtime.Tree_get_selected_column(Tree{self})
}
func (self methodsTree) GetPressedButton() int64 {
	return self.Runtime.Tree_get_pressed_button(Tree{self})
}
func (self methodsTree) SetSelectMode(mode TreeSelectMode) {
	self.Runtime.Tree_set_select_mode(Tree{self}, mode)
}
func (self methodsTree) GetSelectMode() TreeSelectMode {
	return self.Runtime.Tree_get_select_mode(Tree{self})
}
func (self methodsTree) DeselectAll() {
	self.Runtime.Tree_deselect_all(Tree{self})
}
func (self methodsTree) SetColumns(amount int64) {
	self.Runtime.Tree_set_columns(Tree{self}, amount)
}
func (self methodsTree) GetColumns() int64 {
	return self.Runtime.Tree_get_columns(Tree{self})
}
func (self methodsTree) GetEdited() TreeItem {
	return self.Runtime.Tree_get_edited(Tree{self})
}
func (self methodsTree) GetEditedColumn() int64 {
	return self.Runtime.Tree_get_edited_column(Tree{self})
}
func (self methodsTree) EditSelected(force_edit bool) bool {
	return self.Runtime.Tree_edit_selected(Tree{self}, force_edit)
}
func (self methodsTree) GetCustomPopupRect() Rect2 {
	return self.Runtime.Tree_get_custom_popup_rect(Tree{self})
}
func (self methodsTree) GetItemAreaRect(item TreeItem, column int64, button_index int64) Rect2 {
	return self.Runtime.Tree_get_item_area_rect(Tree{self}, item, column, button_index)
}
func (self methodsTree) GetItemAtPosition(position Vector2) TreeItem {
	return self.Runtime.Tree_get_item_at_position(Tree{self}, position)
}
func (self methodsTree) GetColumnAtPosition(position Vector2) int64 {
	return self.Runtime.Tree_get_column_at_position(Tree{self}, position)
}
func (self methodsTree) GetDropSectionAtPosition(position Vector2) int64 {
	return self.Runtime.Tree_get_drop_section_at_position(Tree{self}, position)
}
func (self methodsTree) GetButtonIdAtPosition(position Vector2) int64 {
	return self.Runtime.Tree_get_button_id_at_position(Tree{self}, position)
}
func (self methodsTree) EnsureCursorIsVisible() {
	self.Runtime.Tree_ensure_cursor_is_visible(Tree{self})
}
func (self methodsTree) SetColumnTitlesVisible(visible bool) {
	self.Runtime.Tree_set_column_titles_visible(Tree{self}, visible)
}
func (self methodsTree) AreColumnTitlesVisible() bool {
	return self.Runtime.Tree_are_column_titles_visible(Tree{self})
}
func (self methodsTree) SetColumnTitle(column int64, title string) {
	self.Runtime.Tree_set_column_title(Tree{self}, column, title)
}
func (self methodsTree) GetColumnTitle(column int64) string {
	return self.Runtime.Tree_get_column_title(Tree{self}, column)
}
func (self methodsTree) SetColumnTitleAlignment(column int64, title_alignment HorizontalAlignment) {
	self.Runtime.Tree_set_column_title_alignment(Tree{self}, column, title_alignment)
}
func (self methodsTree) GetColumnTitleAlignment(column int64) HorizontalAlignment {
	return self.Runtime.Tree_get_column_title_alignment(Tree{self}, column)
}
func (self methodsTree) SetColumnTitleDirection(column int64, direction ControlTextDirection) {
	self.Runtime.Tree_set_column_title_direction(Tree{self}, column, direction)
}
func (self methodsTree) GetColumnTitleDirection(column int64) ControlTextDirection {
	return self.Runtime.Tree_get_column_title_direction(Tree{self}, column)
}
func (self methodsTree) SetColumnTitleLanguage(column int64, language string) {
	self.Runtime.Tree_set_column_title_language(Tree{self}, column, language)
}
func (self methodsTree) GetColumnTitleLanguage(column int64) string {
	return self.Runtime.Tree_get_column_title_language(Tree{self}, column)
}
func (self methodsTree) GetScroll() Vector2 {
	return self.Runtime.Tree_get_scroll(Tree{self})
}
func (self methodsTree) ScrollToItem(item TreeItem, center_on_item bool) {
	self.Runtime.Tree_scroll_to_item(Tree{self}, item, center_on_item)
}
func (self methodsTree) SetHScrollEnabled(h_scroll bool) {
	self.Runtime.Tree_set_h_scroll_enabled(Tree{self}, h_scroll)
}
func (self methodsTree) IsHScrollEnabled() bool {
	return self.Runtime.Tree_is_h_scroll_enabled(Tree{self})
}
func (self methodsTree) SetVScrollEnabled(h_scroll bool) {
	self.Runtime.Tree_set_v_scroll_enabled(Tree{self}, h_scroll)
}
func (self methodsTree) IsVScrollEnabled() bool {
	return self.Runtime.Tree_is_v_scroll_enabled(Tree{self})
}
func (self methodsTree) SetHideFolding(hide bool) {
	self.Runtime.Tree_set_hide_folding(Tree{self}, hide)
}
func (self methodsTree) IsFoldingHidden() bool {
	return self.Runtime.Tree_is_folding_hidden(Tree{self})
}
func (self methodsTree) SetEnableRecursiveFolding(enable bool) {
	self.Runtime.Tree_set_enable_recursive_folding(Tree{self}, enable)
}
func (self methodsTree) IsRecursiveFoldingEnabled() bool {
	return self.Runtime.Tree_is_recursive_folding_enabled(Tree{self})
}
func (self methodsTree) SetDropModeFlags(flags int64) {
	self.Runtime.Tree_set_drop_mode_flags(Tree{self}, flags)
}
func (self methodsTree) GetDropModeFlags() int64 {
	return self.Runtime.Tree_get_drop_mode_flags(Tree{self})
}
func (self methodsTree) SetAllowRmbSelect(allow bool) {
	self.Runtime.Tree_set_allow_rmb_select(Tree{self}, allow)
}
func (self methodsTree) GetAllowRmbSelect() bool {
	return self.Runtime.Tree_get_allow_rmb_select(Tree{self})
}
func (self methodsTree) SetAllowReselect(allow bool) {
	self.Runtime.Tree_set_allow_reselect(Tree{self}, allow)
}
func (self methodsTree) GetAllowReselect() bool {
	return self.Runtime.Tree_get_allow_reselect(Tree{self})
}
func (self methodsTree) SetAllowSearch(allow bool) {
	self.Runtime.Tree_set_allow_search(Tree{self}, allow)
}
func (self methodsTree) GetAllowSearch() bool {
	return self.Runtime.Tree_get_allow_search(Tree{self})
}

type methodsTreeItem struct {
	_ [0]*methodsTreeItem
	class
}

func (self TreeItem) Object() Object { var parent Object; parent.class = self.class; return parent }
func (self methodsTreeItem) SetCellMode(column int64, mode TreeItemTreeCellMode) {
	self.Runtime.TreeItem_set_cell_mode(TreeItem{self}, column, mode)
}
func (self methodsTreeItem) GetCellMode(column int64) TreeItemTreeCellMode {
	return self.Runtime.TreeItem_get_cell_mode(TreeItem{self}, column)
}
func (self methodsTreeItem) SetEditMultiline(column int64, multiline bool) {
	self.Runtime.TreeItem_set_edit_multiline(TreeItem{self}, column, multiline)
}
func (self methodsTreeItem) IsEditMultiline(column int64) bool {
	return self.Runtime.TreeItem_is_edit_multiline(TreeItem{self}, column)
}
func (self methodsTreeItem) SetChecked(column int64, checked bool) {
	self.Runtime.TreeItem_set_checked(TreeItem{self}, column, checked)
}
func (self methodsTreeItem) SetIndeterminate(column int64, indeterminate bool) {
	self.Runtime.TreeItem_set_indeterminate(TreeItem{self}, column, indeterminate)
}
func (self methodsTreeItem) IsChecked(column int64) bool {
	return self.Runtime.TreeItem_is_checked(TreeItem{self}, column)
}
func (self methodsTreeItem) IsIndeterminate(column int64) bool {
	return self.Runtime.TreeItem_is_indeterminate(TreeItem{self}, column)
}
func (self methodsTreeItem) PropagateCheck(column int64, emit_signal bool) {
	self.Runtime.TreeItem_propagate_check(TreeItem{self}, column, emit_signal)
}
func (self methodsTreeItem) SetText(column int64, text string) {
	self.Runtime.TreeItem_set_text(TreeItem{self}, column, text)
}
func (self methodsTreeItem) GetText(column int64) string {
	return self.Runtime.TreeItem_get_text(TreeItem{self}, column)
}
func (self methodsTreeItem) SetTextDirection(column int64, direction ControlTextDirection) {
	self.Runtime.TreeItem_set_text_direction(TreeItem{self}, column, direction)
}
func (self methodsTreeItem) GetTextDirection(column int64) ControlTextDirection {
	return self.Runtime.TreeItem_get_text_direction(TreeItem{self}, column)
}
func (self methodsTreeItem) SetAutowrapMode(column int64, autowrap_mode TextServerAutowrapMode) {
	self.Runtime.TreeItem_set_autowrap_mode(TreeItem{self}, column, autowrap_mode)
}
func (self methodsTreeItem) GetAutowrapMode(column int64) TextServerAutowrapMode {
	return self.Runtime.TreeItem_get_autowrap_mode(TreeItem{self}, column)
}
func (self methodsTreeItem) SetTextOverrunBehavior(column int64, overrun_behavior TextServerOverrunBehavior) {
	self.Runtime.TreeItem_set_text_overrun_behavior(TreeItem{self}, column, overrun_behavior)
}
func (self methodsTreeItem) GetTextOverrunBehavior(column int64) TextServerOverrunBehavior {
	return self.Runtime.TreeItem_get_text_overrun_behavior(TreeItem{self}, column)
}
func (self methodsTreeItem) SetStructuredTextBidiOverride(column int64, parser TextServerStructuredTextParser) {
	self.Runtime.TreeItem_set_structured_text_bidi_override(TreeItem{self}, column, parser)
}
func (self methodsTreeItem) GetStructuredTextBidiOverride(column int64) TextServerStructuredTextParser {
	return self.Runtime.TreeItem_get_structured_text_bidi_override(TreeItem{self}, column)
}
func (self methodsTreeItem) SetStructuredTextBidiOverrideOptions(column int64, args Array) {
	self.Runtime.TreeItem_set_structured_text_bidi_override_options(TreeItem{self}, column, args)
}
func (self methodsTreeItem) GetStructuredTextBidiOverrideOptions(column int64) Array {
	return self.Runtime.TreeItem_get_structured_text_bidi_override_options(TreeItem{self}, column)
}
func (self methodsTreeItem) SetLanguage(column int64, language string) {
	self.Runtime.TreeItem_set_language(TreeItem{self}, column, language)
}
func (self methodsTreeItem) GetLanguage(column int64) string {
	return self.Runtime.TreeItem_get_language(TreeItem{self}, column)
}
func (self methodsTreeItem) SetSuffix(column int64, text string) {
	self.Runtime.TreeItem_set_suffix(TreeItem{self}, column, text)
}
func (self methodsTreeItem) GetSuffix(column int64) string {
	return self.Runtime.TreeItem_get_suffix(TreeItem{self}, column)
}
func (self methodsTreeItem) SetIcon(column int64, texture Texture2D) {
	self.Runtime.TreeItem_set_icon(TreeItem{self}, column, texture)
}
func (self methodsTreeItem) GetIcon(column int64) Texture2D {
	return self.Runtime.TreeItem_get_icon(TreeItem{self}, column)
}
func (self methodsTreeItem) SetIconRegion(column int64, region Rect2) {
	self.Runtime.TreeItem_set_icon_region(TreeItem{self}, column, region)
}
func (self methodsTreeItem) GetIconRegion(column int64) Rect2 {
	return self.Runtime.TreeItem_get_icon_region(TreeItem{self}, column)
}
func (self methodsTreeItem) SetIconMaxWidth(column int64, width int64) {
	self.Runtime.TreeItem_set_icon_max_width(TreeItem{self}, column, width)
}
func (self methodsTreeItem) GetIconMaxWidth(column int64) int64 {
	return self.Runtime.TreeItem_get_icon_max_width(TreeItem{self}, column)
}
func (self methodsTreeItem) SetIconModulate(column int64, modulate Color) {
	self.Runtime.TreeItem_set_icon_modulate(TreeItem{self}, column, modulate)
}
func (self methodsTreeItem) GetIconModulate(column int64) Color {
	return self.Runtime.TreeItem_get_icon_modulate(TreeItem{self}, column)
}
func (self methodsTreeItem) SetRange(column int64, value Float) {
	self.Runtime.TreeItem_set_range(TreeItem{self}, column, value)
}
func (self methodsTreeItem) GetRange(column int64) Float {
	return self.Runtime.TreeItem_get_range(TreeItem{self}, column)
}
func (self methodsTreeItem) SetRangeConfig(column int64, min Float, max Float, step Float, expr bool) {
	self.Runtime.TreeItem_set_range_config(TreeItem{self}, column, min, max, step, expr)
}
func (self methodsTreeItem) GetRangeConfig(column int64) Dictionary {
	return self.Runtime.TreeItem_get_range_config(TreeItem{self}, column)
}
func (self methodsTreeItem) SetMetadata(column int64, meta any) {
	self.Runtime.TreeItem_set_metadata(TreeItem{self}, column, meta)
}
func (self methodsTreeItem) GetMetadata(column int64) any {
	return self.Runtime.TreeItem_get_metadata(TreeItem{self}, column)
}
func (self methodsTreeItem) SetCustomDraw(column int64, object Object, callback string) {
	self.Runtime.TreeItem_set_custom_draw(TreeItem{self}, column, object, callback)
}
func (self methodsTreeItem) SetCollapsed(enable bool) {
	self.Runtime.TreeItem_set_collapsed(TreeItem{self}, enable)
}
func (self methodsTreeItem) IsCollapsed() bool {
	return self.Runtime.TreeItem_is_collapsed(TreeItem{self})
}
func (self methodsTreeItem) SetCollapsedRecursive(enable bool) {
	self.Runtime.TreeItem_set_collapsed_recursive(TreeItem{self}, enable)
}
func (self methodsTreeItem) IsAnyCollapsed(only_visible bool) bool {
	return self.Runtime.TreeItem_is_any_collapsed(TreeItem{self}, only_visible)
}
func (self methodsTreeItem) SetVisible(enable bool) {
	self.Runtime.TreeItem_set_visible(TreeItem{self}, enable)
}
func (self methodsTreeItem) IsVisible() bool {
	return self.Runtime.TreeItem_is_visible(TreeItem{self})
}
func (self methodsTreeItem) UncollapseTree() {
	self.Runtime.TreeItem_uncollapse_tree(TreeItem{self})
}
func (self methodsTreeItem) SetCustomMinimumHeight(height int64) {
	self.Runtime.TreeItem_set_custom_minimum_height(TreeItem{self}, height)
}
func (self methodsTreeItem) GetCustomMinimumHeight() int64 {
	return self.Runtime.TreeItem_get_custom_minimum_height(TreeItem{self})
}
func (self methodsTreeItem) SetSelectable(column int64, selectable bool) {
	self.Runtime.TreeItem_set_selectable(TreeItem{self}, column, selectable)
}
func (self methodsTreeItem) IsSelectable(column int64) bool {
	return self.Runtime.TreeItem_is_selectable(TreeItem{self}, column)
}
func (self methodsTreeItem) IsSelected(column int64) bool {
	return self.Runtime.TreeItem_is_selected(TreeItem{self}, column)
}
func (self methodsTreeItem) Select(column int64) {
	self.Runtime.TreeItem_select(TreeItem{self}, column)
}
func (self methodsTreeItem) Deselect(column int64) {
	self.Runtime.TreeItem_deselect(TreeItem{self}, column)
}
func (self methodsTreeItem) SetEditable(column int64, enabled bool) {
	self.Runtime.TreeItem_set_editable(TreeItem{self}, column, enabled)
}
func (self methodsTreeItem) IsEditable(column int64) bool {
	return self.Runtime.TreeItem_is_editable(TreeItem{self}, column)
}
func (self methodsTreeItem) SetCustomColor(column int64, color Color) {
	self.Runtime.TreeItem_set_custom_color(TreeItem{self}, column, color)
}
func (self methodsTreeItem) GetCustomColor(column int64) Color {
	return self.Runtime.TreeItem_get_custom_color(TreeItem{self}, column)
}
func (self methodsTreeItem) ClearCustomColor(column int64) {
	self.Runtime.TreeItem_clear_custom_color(TreeItem{self}, column)
}
func (self methodsTreeItem) SetCustomFont(column int64, font Font) {
	self.Runtime.TreeItem_set_custom_font(TreeItem{self}, column, font)
}
func (self methodsTreeItem) GetCustomFont(column int64) Font {
	return self.Runtime.TreeItem_get_custom_font(TreeItem{self}, column)
}
func (self methodsTreeItem) SetCustomFontSize(column int64, font_size int64) {
	self.Runtime.TreeItem_set_custom_font_size(TreeItem{self}, column, font_size)
}
func (self methodsTreeItem) GetCustomFontSize(column int64) int64 {
	return self.Runtime.TreeItem_get_custom_font_size(TreeItem{self}, column)
}
func (self methodsTreeItem) SetCustomBgColor(column int64, color Color, just_outline bool) {
	self.Runtime.TreeItem_set_custom_bg_color(TreeItem{self}, column, color, just_outline)
}
func (self methodsTreeItem) ClearCustomBgColor(column int64) {
	self.Runtime.TreeItem_clear_custom_bg_color(TreeItem{self}, column)
}
func (self methodsTreeItem) GetCustomBgColor(column int64) Color {
	return self.Runtime.TreeItem_get_custom_bg_color(TreeItem{self}, column)
}
func (self methodsTreeItem) SetCustomAsButton(column int64, enable bool) {
	self.Runtime.TreeItem_set_custom_as_button(TreeItem{self}, column, enable)
}
func (self methodsTreeItem) IsCustomSetAsButton(column int64) bool {
	return self.Runtime.TreeItem_is_custom_set_as_button(TreeItem{self}, column)
}
func (self methodsTreeItem) AddButton(column int64, button Texture2D, id int64, disabled bool, tooltip_text string) {
	self.Runtime.TreeItem_add_button(TreeItem{self}, column, button, id, disabled, tooltip_text)
}
func (self methodsTreeItem) GetButtonCount(column int64) int64 {
	return self.Runtime.TreeItem_get_button_count(TreeItem{self}, column)
}
func (self methodsTreeItem) GetButtonTooltipText(column int64, button_index int64) string {
	return self.Runtime.TreeItem_get_button_tooltip_text(TreeItem{self}, column, button_index)
}
func (self methodsTreeItem) GetButtonId(column int64, button_index int64) int64 {
	return self.Runtime.TreeItem_get_button_id(TreeItem{self}, column, button_index)
}
func (self methodsTreeItem) GetButtonById(column int64, id int64) int64 {
	return self.Runtime.TreeItem_get_button_by_id(TreeItem{self}, column, id)
}
func (self methodsTreeItem) GetButton(column int64, button_index int64) Texture2D {
	return self.Runtime.TreeItem_get_button(TreeItem{self}, column, button_index)
}
func (self methodsTreeItem) SetButtonTooltipText(column int64, button_index int64, tooltip string) {
	self.Runtime.TreeItem_set_button_tooltip_text(TreeItem{self}, column, button_index, tooltip)
}
func (self methodsTreeItem) SetButton(column int64, button_index int64, button Texture2D) {
	self.Runtime.TreeItem_set_button(TreeItem{self}, column, button_index, button)
}
func (self methodsTreeItem) EraseButton(column int64, button_index int64) {
	self.Runtime.TreeItem_erase_button(TreeItem{self}, column, button_index)
}
func (self methodsTreeItem) SetButtonDisabled(column int64, button_index int64, disabled bool) {
	self.Runtime.TreeItem_set_button_disabled(TreeItem{self}, column, button_index, disabled)
}
func (self methodsTreeItem) SetButtonColor(column int64, button_index int64, color Color) {
	self.Runtime.TreeItem_set_button_color(TreeItem{self}, column, button_index, color)
}
func (self methodsTreeItem) IsButtonDisabled(column int64, button_index int64) bool {
	return self.Runtime.TreeItem_is_button_disabled(TreeItem{self}, column, button_index)
}
func (self methodsTreeItem) SetTooltipText(column int64, tooltip string) {
	self.Runtime.TreeItem_set_tooltip_text(TreeItem{self}, column, tooltip)
}
func (self methodsTreeItem) GetTooltipText(column int64) string {
	return self.Runtime.TreeItem_get_tooltip_text(TreeItem{self}, column)
}
func (self methodsTreeItem) SetTextAlignment(column int64, text_alignment HorizontalAlignment) {
	self.Runtime.TreeItem_set_text_alignment(TreeItem{self}, column, text_alignment)
}
func (self methodsTreeItem) GetTextAlignment(column int64) HorizontalAlignment {
	return self.Runtime.TreeItem_get_text_alignment(TreeItem{self}, column)
}
func (self methodsTreeItem) SetExpandRight(column int64, enable bool) {
	self.Runtime.TreeItem_set_expand_right(TreeItem{self}, column, enable)
}
func (self methodsTreeItem) GetExpandRight(column int64) bool {
	return self.Runtime.TreeItem_get_expand_right(TreeItem{self}, column)
}
func (self methodsTreeItem) SetDisableFolding(disable bool) {
	self.Runtime.TreeItem_set_disable_folding(TreeItem{self}, disable)
}
func (self methodsTreeItem) IsFoldingDisabled() bool {
	return self.Runtime.TreeItem_is_folding_disabled(TreeItem{self})
}
func (self methodsTreeItem) CreateChild(index int64) TreeItem {
	return self.Runtime.TreeItem_create_child(TreeItem{self}, index)
}
func (self methodsTreeItem) AddChild(child TreeItem) {
	self.Runtime.TreeItem_add_child(TreeItem{self}, child)
}
func (self methodsTreeItem) RemoveChild(child TreeItem) {
	self.Runtime.TreeItem_remove_child(TreeItem{self}, child)
}
func (self methodsTreeItem) GetTree() Tree {
	return self.Runtime.TreeItem_get_tree(TreeItem{self})
}
func (self methodsTreeItem) GetNext() TreeItem {
	return self.Runtime.TreeItem_get_next(TreeItem{self})
}
func (self methodsTreeItem) GetPrev() TreeItem {
	return self.Runtime.TreeItem_get_prev(TreeItem{self})
}
func (self methodsTreeItem) GetParent() TreeItem {
	return self.Runtime.TreeItem_get_parent(TreeItem{self})
}
func (self methodsTreeItem) GetFirstChild() TreeItem {
	return self.Runtime.TreeItem_get_first_child(TreeItem{self})
}
func (self methodsTreeItem) GetNextInTree(wrap bool) TreeItem {
	return self.Runtime.TreeItem_get_next_in_tree(TreeItem{self}, wrap)
}
func (self methodsTreeItem) GetPrevInTree(wrap bool) TreeItem {
	return self.Runtime.TreeItem_get_prev_in_tree(TreeItem{self}, wrap)
}
func (self methodsTreeItem) GetNextVisible(wrap bool) TreeItem {
	return self.Runtime.TreeItem_get_next_visible(TreeItem{self}, wrap)
}
func (self methodsTreeItem) GetPrevVisible(wrap bool) TreeItem {
	return self.Runtime.TreeItem_get_prev_visible(TreeItem{self}, wrap)
}
func (self methodsTreeItem) GetChild(index int64) TreeItem {
	return self.Runtime.TreeItem_get_child(TreeItem{self}, index)
}
func (self methodsTreeItem) GetChildCount() int64 {
	return self.Runtime.TreeItem_get_child_count(TreeItem{self})
}
func (self methodsTreeItem) GetChildren() ArrayOf[TreeItem] {
	return self.Runtime.TreeItem_get_children(TreeItem{self})
}
func (self methodsTreeItem) GetIndex() int64 {
	return self.Runtime.TreeItem_get_index(TreeItem{self})
}
func (self methodsTreeItem) MoveBefore(item TreeItem) {
	self.Runtime.TreeItem_move_before(TreeItem{self}, item)
}
func (self methodsTreeItem) MoveAfter(item TreeItem) {
	self.Runtime.TreeItem_move_after(TreeItem{self}, item)
}
func (self methodsTreeItem) CallRecursive(method string) {
	self.Runtime.TreeItem_call_recursive(TreeItem{self}, method)
}

type methodsTriangleMesh struct {
	_ [0]*methodsTriangleMesh
	class
}

func (self TriangleMesh) RefCounted() RefCounted {
	var parent RefCounted
	parent.class = self.class
	return parent
}

type methodsTubeTrailMesh struct {
	_ [0]*methodsTubeTrailMesh
	class
}

func (self TubeTrailMesh) PrimitiveMesh() PrimitiveMesh {
	var parent PrimitiveMesh
	parent.class = self.class
	return parent
}
func (self methodsTubeTrailMesh) SetRadius(radius Float) {
	self.Runtime.TubeTrailMesh_set_radius(TubeTrailMesh{self}, radius)
}
func (self methodsTubeTrailMesh) GetRadius() Float {
	return self.Runtime.TubeTrailMesh_get_radius(TubeTrailMesh{self})
}
func (self methodsTubeTrailMesh) SetRadialSteps(radial_steps int64) {
	self.Runtime.TubeTrailMesh_set_radial_steps(TubeTrailMesh{self}, radial_steps)
}
func (self methodsTubeTrailMesh) GetRadialSteps() int64 {
	return self.Runtime.TubeTrailMesh_get_radial_steps(TubeTrailMesh{self})
}
func (self methodsTubeTrailMesh) SetSections(sections int64) {
	self.Runtime.TubeTrailMesh_set_sections(TubeTrailMesh{self}, sections)
}
func (self methodsTubeTrailMesh) GetSections() int64 {
	return self.Runtime.TubeTrailMesh_get_sections(TubeTrailMesh{self})
}
func (self methodsTubeTrailMesh) SetSectionLength(section_length Float) {
	self.Runtime.TubeTrailMesh_set_section_length(TubeTrailMesh{self}, section_length)
}
func (self methodsTubeTrailMesh) GetSectionLength() Float {
	return self.Runtime.TubeTrailMesh_get_section_length(TubeTrailMesh{self})
}
func (self methodsTubeTrailMesh) SetSectionRings(section_rings int64) {
	self.Runtime.TubeTrailMesh_set_section_rings(TubeTrailMesh{self}, section_rings)
}
func (self methodsTubeTrailMesh) GetSectionRings() int64 {
	return self.Runtime.TubeTrailMesh_get_section_rings(TubeTrailMesh{self})
}
func (self methodsTubeTrailMesh) SetCapTop(cap_top bool) {
	self.Runtime.TubeTrailMesh_set_cap_top(TubeTrailMesh{self}, cap_top)
}
func (self methodsTubeTrailMesh) IsCapTop() bool {
	return self.Runtime.TubeTrailMesh_is_cap_top(TubeTrailMesh{self})
}
func (self methodsTubeTrailMesh) SetCapBottom(cap_bottom bool) {
	self.Runtime.TubeTrailMesh_set_cap_bottom(TubeTrailMesh{self}, cap_bottom)
}
func (self methodsTubeTrailMesh) IsCapBottom() bool {
	return self.Runtime.TubeTrailMesh_is_cap_bottom(TubeTrailMesh{self})
}
func (self methodsTubeTrailMesh) SetCurve(curve Curve) {
	self.Runtime.TubeTrailMesh_set_curve(TubeTrailMesh{self}, curve)
}
func (self methodsTubeTrailMesh) GetCurve() Curve {
	return self.Runtime.TubeTrailMesh_get_curve(TubeTrailMesh{self})
}

type methodsTween struct {
	_ [0]*methodsTween
	class
}

func (self Tween) RefCounted() RefCounted {
	var parent RefCounted
	parent.class = self.class
	return parent
}
func (self methodsTween) TweenProperty(object Object, property NodePath, final_val any, duration Float) PropertyTweener {
	return self.Runtime.Tween_tween_property(Tween{self}, object, property, final_val, duration)
}
func (self methodsTween) TweenInterval(time Float) IntervalTweener {
	return self.Runtime.Tween_tween_interval(Tween{self}, time)
}
func (self methodsTween) TweenCallback(callback Callable) CallbackTweener {
	return self.Runtime.Tween_tween_callback(Tween{self}, callback)
}
func (self methodsTween) TweenMethod(method Callable, from any, to any, duration Float) MethodTweener {
	return self.Runtime.Tween_tween_method(Tween{self}, method, from, to, duration)
}
func (self methodsTween) CustomStep(delta Float) bool {
	return self.Runtime.Tween_custom_step(Tween{self}, delta)
}
func (self methodsTween) Stop() {
	self.Runtime.Tween_stop(Tween{self})
}
func (self methodsTween) Pause() {
	self.Runtime.Tween_pause(Tween{self})
}
func (self methodsTween) Play() {
	self.Runtime.Tween_play(Tween{self})
}
func (self methodsTween) Kill() {
	self.Runtime.Tween_kill(Tween{self})
}
func (self methodsTween) GetTotalElapsedTime() Float {
	return self.Runtime.Tween_get_total_elapsed_time(Tween{self})
}
func (self methodsTween) IsRunning() bool {
	return self.Runtime.Tween_is_running(Tween{self})
}
func (self methodsTween) IsValid() bool {
	return self.Runtime.Tween_is_valid(Tween{self})
}
func (self methodsTween) BindNode(node Node) Tween {
	return self.Runtime.Tween_bind_node(Tween{self}, node)
}
func (self methodsTween) SetProcessMode(mode TweenTweenProcessMode) Tween {
	return self.Runtime.Tween_set_process_mode(Tween{self}, mode)
}
func (self methodsTween) SetPauseMode(mode TweenTweenPauseMode) Tween {
	return self.Runtime.Tween_set_pause_mode(Tween{self}, mode)
}
func (self methodsTween) SetParallel(parallel bool) Tween {
	return self.Runtime.Tween_set_parallel(Tween{self}, parallel)
}
func (self methodsTween) SetLoops(loops int64) Tween {
	return self.Runtime.Tween_set_loops(Tween{self}, loops)
}
func (self methodsTween) GetLoopsLeft() int64 {
	return self.Runtime.Tween_get_loops_left(Tween{self})
}
func (self methodsTween) SetSpeedScale(speed Float) Tween {
	return self.Runtime.Tween_set_speed_scale(Tween{self}, speed)
}
func (self methodsTween) SetTrans(trans TweenTransitionType) Tween {
	return self.Runtime.Tween_set_trans(Tween{self}, trans)
}
func (self methodsTween) SetEase(ease TweenEaseType) Tween {
	return self.Runtime.Tween_set_ease(Tween{self}, ease)
}
func (self methodsTween) Parallel() Tween {
	return self.Runtime.Tween_parallel(Tween{self})
}
func (self methodsTween) Chain() Tween {
	return self.Runtime.Tween_chain(Tween{self})
}
func (self methodsTween) InterpolateValue(initial_value any, delta_value any, elapsed_time Float, duration Float, trans_type TweenTransitionType, ease_type TweenEaseType) any {
	return self.Runtime.Tween_interpolate_value(Tween{self}, initial_value, delta_value, elapsed_time, duration, trans_type, ease_type)
}

type methodsTweener struct {
	_ [0]*methodsTweener
	class
}

func (self Tweener) RefCounted() RefCounted {
	var parent RefCounted
	parent.class = self.class
	return parent
}

type methodsUDPServer struct {
	_ [0]*methodsUDPServer
	class
}

func (self UDPServer) RefCounted() RefCounted {
	var parent RefCounted
	parent.class = self.class
	return parent
}
func (self methodsUDPServer) Listen(port int64, bind_address string) int64 {
	return self.Runtime.UDPServer_listen(UDPServer{self}, port, bind_address)
}
func (self methodsUDPServer) Poll() int64 {
	return self.Runtime.UDPServer_poll(UDPServer{self})
}
func (self methodsUDPServer) IsConnectionAvailable() bool {
	return self.Runtime.UDPServer_is_connection_available(UDPServer{self})
}
func (self methodsUDPServer) GetLocalPort() int64 {
	return self.Runtime.UDPServer_get_local_port(UDPServer{self})
}
func (self methodsUDPServer) IsListening() bool {
	return self.Runtime.UDPServer_is_listening(UDPServer{self})
}
func (self methodsUDPServer) TakeConnection() PacketPeerUDP {
	return self.Runtime.UDPServer_take_connection(UDPServer{self})
}
func (self methodsUDPServer) Stop() {
	self.Runtime.UDPServer_stop(UDPServer{self})
}
func (self methodsUDPServer) SetMaxPendingConnections(max_pending_connections int64) {
	self.Runtime.UDPServer_set_max_pending_connections(UDPServer{self}, max_pending_connections)
}
func (self methodsUDPServer) GetMaxPendingConnections() int64 {
	return self.Runtime.UDPServer_get_max_pending_connections(UDPServer{self})
}

type methodsUPNP struct {
	_ [0]*methodsUPNP
	class
}

func (self UPNP) RefCounted() RefCounted {
	var parent RefCounted
	parent.class = self.class
	return parent
}
func (self methodsUPNP) GetDeviceCount() int64 {
	return self.Runtime.UPNP_get_device_count(UPNP{self})
}
func (self methodsUPNP) GetDevice(index int64) UPNPDevice {
	return self.Runtime.UPNP_get_device(UPNP{self}, index)
}
func (self methodsUPNP) AddDevice(device UPNPDevice) {
	self.Runtime.UPNP_add_device(UPNP{self}, device)
}
func (self methodsUPNP) SetDevice(index int64, device UPNPDevice) {
	self.Runtime.UPNP_set_device(UPNP{self}, index, device)
}
func (self methodsUPNP) RemoveDevice(index int64) {
	self.Runtime.UPNP_remove_device(UPNP{self}, index)
}
func (self methodsUPNP) ClearDevices() {
	self.Runtime.UPNP_clear_devices(UPNP{self})
}
func (self methodsUPNP) GetGateway() UPNPDevice {
	return self.Runtime.UPNP_get_gateway(UPNP{self})
}
func (self methodsUPNP) Discover(timeout int64, ttl int64, device_filter string) int64 {
	return self.Runtime.UPNP_discover(UPNP{self}, timeout, ttl, device_filter)
}
func (self methodsUPNP) QueryExternalAddress() string {
	return self.Runtime.UPNP_query_external_address(UPNP{self})
}
func (self methodsUPNP) AddPortMapping(port int64, port_internal int64, desc string, proto string, duration int64) int64 {
	return self.Runtime.UPNP_add_port_mapping(UPNP{self}, port, port_internal, desc, proto, duration)
}
func (self methodsUPNP) DeletePortMapping(port int64, proto string) int64 {
	return self.Runtime.UPNP_delete_port_mapping(UPNP{self}, port, proto)
}
func (self methodsUPNP) SetDiscoverMulticastIf(m_if string) {
	self.Runtime.UPNP_set_discover_multicast_if(UPNP{self}, m_if)
}
func (self methodsUPNP) GetDiscoverMulticastIf() string {
	return self.Runtime.UPNP_get_discover_multicast_if(UPNP{self})
}
func (self methodsUPNP) SetDiscoverLocalPort(port int64) {
	self.Runtime.UPNP_set_discover_local_port(UPNP{self}, port)
}
func (self methodsUPNP) GetDiscoverLocalPort() int64 {
	return self.Runtime.UPNP_get_discover_local_port(UPNP{self})
}
func (self methodsUPNP) SetDiscoverIpv6(ipv6 bool) {
	self.Runtime.UPNP_set_discover_ipv6(UPNP{self}, ipv6)
}
func (self methodsUPNP) IsDiscoverIpv6() bool {
	return self.Runtime.UPNP_is_discover_ipv6(UPNP{self})
}

type methodsUPNPDevice struct {
	_ [0]*methodsUPNPDevice
	class
}

func (self UPNPDevice) RefCounted() RefCounted {
	var parent RefCounted
	parent.class = self.class
	return parent
}
func (self methodsUPNPDevice) IsValidGateway() bool {
	return self.Runtime.UPNPDevice_is_valid_gateway(UPNPDevice{self})
}
func (self methodsUPNPDevice) QueryExternalAddress() string {
	return self.Runtime.UPNPDevice_query_external_address(UPNPDevice{self})
}
func (self methodsUPNPDevice) AddPortMapping(port int64, port_internal int64, desc string, proto string, duration int64) int64 {
	return self.Runtime.UPNPDevice_add_port_mapping(UPNPDevice{self}, port, port_internal, desc, proto, duration)
}
func (self methodsUPNPDevice) DeletePortMapping(port int64, proto string) int64 {
	return self.Runtime.UPNPDevice_delete_port_mapping(UPNPDevice{self}, port, proto)
}
func (self methodsUPNPDevice) SetDescriptionUrl(url string) {
	self.Runtime.UPNPDevice_set_description_url(UPNPDevice{self}, url)
}
func (self methodsUPNPDevice) GetDescriptionUrl() string {
	return self.Runtime.UPNPDevice_get_description_url(UPNPDevice{self})
}
func (self methodsUPNPDevice) SetServiceType(atype string) {
	self.Runtime.UPNPDevice_set_service_type(UPNPDevice{self}, atype)
}
func (self methodsUPNPDevice) GetServiceType() string {
	return self.Runtime.UPNPDevice_get_service_type(UPNPDevice{self})
}
func (self methodsUPNPDevice) SetIgdControlUrl(url string) {
	self.Runtime.UPNPDevice_set_igd_control_url(UPNPDevice{self}, url)
}
func (self methodsUPNPDevice) GetIgdControlUrl() string {
	return self.Runtime.UPNPDevice_get_igd_control_url(UPNPDevice{self})
}
func (self methodsUPNPDevice) SetIgdServiceType(atype string) {
	self.Runtime.UPNPDevice_set_igd_service_type(UPNPDevice{self}, atype)
}
func (self methodsUPNPDevice) GetIgdServiceType() string {
	return self.Runtime.UPNPDevice_get_igd_service_type(UPNPDevice{self})
}
func (self methodsUPNPDevice) SetIgdOurAddr(addr string) {
	self.Runtime.UPNPDevice_set_igd_our_addr(UPNPDevice{self}, addr)
}
func (self methodsUPNPDevice) GetIgdOurAddr() string {
	return self.Runtime.UPNPDevice_get_igd_our_addr(UPNPDevice{self})
}
func (self methodsUPNPDevice) SetIgdStatus(status UPNPDeviceIGDStatus) {
	self.Runtime.UPNPDevice_set_igd_status(UPNPDevice{self}, status)
}
func (self methodsUPNPDevice) GetIgdStatus() UPNPDeviceIGDStatus {
	return self.Runtime.UPNPDevice_get_igd_status(UPNPDevice{self})
}

type methodsUndoRedo struct {
	_ [0]*methodsUndoRedo
	class
}

func (self UndoRedo) Object() Object { var parent Object; parent.class = self.class; return parent }
func (self methodsUndoRedo) CreateAction(name string, merge_mode UndoRedoMergeMode, backward_undo_ops bool) {
	self.Runtime.UndoRedo_create_action(UndoRedo{self}, name, merge_mode, backward_undo_ops)
}
func (self methodsUndoRedo) CommitAction(execute bool) {
	self.Runtime.UndoRedo_commit_action(UndoRedo{self}, execute)
}
func (self methodsUndoRedo) IsCommittingAction() bool {
	return self.Runtime.UndoRedo_is_committing_action(UndoRedo{self})
}
func (self methodsUndoRedo) AddDoMethod(callable Callable) {
	self.Runtime.UndoRedo_add_do_method(UndoRedo{self}, callable)
}
func (self methodsUndoRedo) AddUndoMethod(callable Callable) {
	self.Runtime.UndoRedo_add_undo_method(UndoRedo{self}, callable)
}
func (self methodsUndoRedo) AddDoProperty(object Object, property string, value any) {
	self.Runtime.UndoRedo_add_do_property(UndoRedo{self}, object, property, value)
}
func (self methodsUndoRedo) AddUndoProperty(object Object, property string, value any) {
	self.Runtime.UndoRedo_add_undo_property(UndoRedo{self}, object, property, value)
}
func (self methodsUndoRedo) AddDoReference(object Object) {
	self.Runtime.UndoRedo_add_do_reference(UndoRedo{self}, object)
}
func (self methodsUndoRedo) AddUndoReference(object Object) {
	self.Runtime.UndoRedo_add_undo_reference(UndoRedo{self}, object)
}
func (self methodsUndoRedo) StartForceKeepInMergeEnds() {
	self.Runtime.UndoRedo_start_force_keep_in_merge_ends(UndoRedo{self})
}
func (self methodsUndoRedo) EndForceKeepInMergeEnds() {
	self.Runtime.UndoRedo_end_force_keep_in_merge_ends(UndoRedo{self})
}
func (self methodsUndoRedo) GetHistoryCount() int64 {
	return self.Runtime.UndoRedo_get_history_count(UndoRedo{self})
}
func (self methodsUndoRedo) GetCurrentAction() int64 {
	return self.Runtime.UndoRedo_get_current_action(UndoRedo{self})
}
func (self methodsUndoRedo) GetActionName(id int64) string {
	return self.Runtime.UndoRedo_get_action_name(UndoRedo{self}, id)
}
func (self methodsUndoRedo) ClearHistory(increase_version bool) {
	self.Runtime.UndoRedo_clear_history(UndoRedo{self}, increase_version)
}
func (self methodsUndoRedo) GetCurrentActionName() string {
	return self.Runtime.UndoRedo_get_current_action_name(UndoRedo{self})
}
func (self methodsUndoRedo) HasUndo() bool {
	return self.Runtime.UndoRedo_has_undo(UndoRedo{self})
}
func (self methodsUndoRedo) HasRedo() bool {
	return self.Runtime.UndoRedo_has_redo(UndoRedo{self})
}
func (self methodsUndoRedo) GetVersion() int64 {
	return self.Runtime.UndoRedo_get_version(UndoRedo{self})
}
func (self methodsUndoRedo) Redo() bool {
	return self.Runtime.UndoRedo_redo(UndoRedo{self})
}
func (self methodsUndoRedo) Undo() bool {
	return self.Runtime.UndoRedo_undo(UndoRedo{self})
}

type methodsVBoxContainer struct {
	_ [0]*methodsVBoxContainer
	class
}

func (self VBoxContainer) BoxContainer() BoxContainer {
	var parent BoxContainer
	parent.class = self.class
	return parent
}

type methodsVFlowContainer struct {
	_ [0]*methodsVFlowContainer
	class
}

func (self VFlowContainer) FlowContainer() FlowContainer {
	var parent FlowContainer
	parent.class = self.class
	return parent
}

type methodsVScrollBar struct {
	_ [0]*methodsVScrollBar
	class
}

func (self VScrollBar) ScrollBar() ScrollBar {
	var parent ScrollBar
	parent.class = self.class
	return parent
}

type methodsVSeparator struct {
	_ [0]*methodsVSeparator
	class
}

func (self VSeparator) Separator() Separator {
	var parent Separator
	parent.class = self.class
	return parent
}

type methodsVSlider struct {
	_ [0]*methodsVSlider
	class
}

func (self VSlider) Slider() Slider { var parent Slider; parent.class = self.class; return parent }

type methodsVSplitContainer struct {
	_ [0]*methodsVSplitContainer
	class
}

func (self VSplitContainer) SplitContainer() SplitContainer {
	var parent SplitContainer
	parent.class = self.class
	return parent
}

type methodsVehicleBody3D struct {
	_ [0]*methodsVehicleBody3D
	class
}

func (self VehicleBody3D) RigidBody3D() RigidBody3D {
	var parent RigidBody3D
	parent.class = self.class
	return parent
}
func (self methodsVehicleBody3D) SetEngineForce(engine_force Float) {
	self.Runtime.VehicleBody3D_set_engine_force(VehicleBody3D{self}, engine_force)
}
func (self methodsVehicleBody3D) GetEngineForce() Float {
	return self.Runtime.VehicleBody3D_get_engine_force(VehicleBody3D{self})
}
func (self methodsVehicleBody3D) SetBrake(brake Float) {
	self.Runtime.VehicleBody3D_set_brake(VehicleBody3D{self}, brake)
}
func (self methodsVehicleBody3D) GetBrake() Float {
	return self.Runtime.VehicleBody3D_get_brake(VehicleBody3D{self})
}
func (self methodsVehicleBody3D) SetSteering(steering Float) {
	self.Runtime.VehicleBody3D_set_steering(VehicleBody3D{self}, steering)
}
func (self methodsVehicleBody3D) GetSteering() Float {
	return self.Runtime.VehicleBody3D_get_steering(VehicleBody3D{self})
}

type methodsVehicleWheel3D struct {
	_ [0]*methodsVehicleWheel3D
	class
}

func (self VehicleWheel3D) Node3D() Node3D {
	var parent Node3D
	parent.class = self.class
	return parent
}
func (self methodsVehicleWheel3D) SetRadius(length Float) {
	self.Runtime.VehicleWheel3D_set_radius(VehicleWheel3D{self}, length)
}
func (self methodsVehicleWheel3D) GetRadius() Float {
	return self.Runtime.VehicleWheel3D_get_radius(VehicleWheel3D{self})
}
func (self methodsVehicleWheel3D) SetSuspensionRestLength(length Float) {
	self.Runtime.VehicleWheel3D_set_suspension_rest_length(VehicleWheel3D{self}, length)
}
func (self methodsVehicleWheel3D) GetSuspensionRestLength() Float {
	return self.Runtime.VehicleWheel3D_get_suspension_rest_length(VehicleWheel3D{self})
}
func (self methodsVehicleWheel3D) SetSuspensionTravel(length Float) {
	self.Runtime.VehicleWheel3D_set_suspension_travel(VehicleWheel3D{self}, length)
}
func (self methodsVehicleWheel3D) GetSuspensionTravel() Float {
	return self.Runtime.VehicleWheel3D_get_suspension_travel(VehicleWheel3D{self})
}
func (self methodsVehicleWheel3D) SetSuspensionStiffness(length Float) {
	self.Runtime.VehicleWheel3D_set_suspension_stiffness(VehicleWheel3D{self}, length)
}
func (self methodsVehicleWheel3D) GetSuspensionStiffness() Float {
	return self.Runtime.VehicleWheel3D_get_suspension_stiffness(VehicleWheel3D{self})
}
func (self methodsVehicleWheel3D) SetSuspensionMaxForce(length Float) {
	self.Runtime.VehicleWheel3D_set_suspension_max_force(VehicleWheel3D{self}, length)
}
func (self methodsVehicleWheel3D) GetSuspensionMaxForce() Float {
	return self.Runtime.VehicleWheel3D_get_suspension_max_force(VehicleWheel3D{self})
}
func (self methodsVehicleWheel3D) SetDampingCompression(length Float) {
	self.Runtime.VehicleWheel3D_set_damping_compression(VehicleWheel3D{self}, length)
}
func (self methodsVehicleWheel3D) GetDampingCompression() Float {
	return self.Runtime.VehicleWheel3D_get_damping_compression(VehicleWheel3D{self})
}
func (self methodsVehicleWheel3D) SetDampingRelaxation(length Float) {
	self.Runtime.VehicleWheel3D_set_damping_relaxation(VehicleWheel3D{self}, length)
}
func (self methodsVehicleWheel3D) GetDampingRelaxation() Float {
	return self.Runtime.VehicleWheel3D_get_damping_relaxation(VehicleWheel3D{self})
}
func (self methodsVehicleWheel3D) SetUseAsTraction(enable bool) {
	self.Runtime.VehicleWheel3D_set_use_as_traction(VehicleWheel3D{self}, enable)
}
func (self methodsVehicleWheel3D) IsUsedAsTraction() bool {
	return self.Runtime.VehicleWheel3D_is_used_as_traction(VehicleWheel3D{self})
}
func (self methodsVehicleWheel3D) SetUseAsSteering(enable bool) {
	self.Runtime.VehicleWheel3D_set_use_as_steering(VehicleWheel3D{self}, enable)
}
func (self methodsVehicleWheel3D) IsUsedAsSteering() bool {
	return self.Runtime.VehicleWheel3D_is_used_as_steering(VehicleWheel3D{self})
}
func (self methodsVehicleWheel3D) SetFrictionSlip(length Float) {
	self.Runtime.VehicleWheel3D_set_friction_slip(VehicleWheel3D{self}, length)
}
func (self methodsVehicleWheel3D) GetFrictionSlip() Float {
	return self.Runtime.VehicleWheel3D_get_friction_slip(VehicleWheel3D{self})
}
func (self methodsVehicleWheel3D) IsInContact() bool {
	return self.Runtime.VehicleWheel3D_is_in_contact(VehicleWheel3D{self})
}
func (self methodsVehicleWheel3D) GetContactBody() Node3D {
	return self.Runtime.VehicleWheel3D_get_contact_body(VehicleWheel3D{self})
}
func (self methodsVehicleWheel3D) SetRollInfluence(roll_influence Float) {
	self.Runtime.VehicleWheel3D_set_roll_influence(VehicleWheel3D{self}, roll_influence)
}
func (self methodsVehicleWheel3D) GetRollInfluence() Float {
	return self.Runtime.VehicleWheel3D_get_roll_influence(VehicleWheel3D{self})
}
func (self methodsVehicleWheel3D) GetSkidinfo() Float {
	return self.Runtime.VehicleWheel3D_get_skidinfo(VehicleWheel3D{self})
}
func (self methodsVehicleWheel3D) GetRpm() Float {
	return self.Runtime.VehicleWheel3D_get_rpm(VehicleWheel3D{self})
}
func (self methodsVehicleWheel3D) SetEngineForce(engine_force Float) {
	self.Runtime.VehicleWheel3D_set_engine_force(VehicleWheel3D{self}, engine_force)
}
func (self methodsVehicleWheel3D) GetEngineForce() Float {
	return self.Runtime.VehicleWheel3D_get_engine_force(VehicleWheel3D{self})
}
func (self methodsVehicleWheel3D) SetBrake(brake Float) {
	self.Runtime.VehicleWheel3D_set_brake(VehicleWheel3D{self}, brake)
}
func (self methodsVehicleWheel3D) GetBrake() Float {
	return self.Runtime.VehicleWheel3D_get_brake(VehicleWheel3D{self})
}
func (self methodsVehicleWheel3D) SetSteering(steering Float) {
	self.Runtime.VehicleWheel3D_set_steering(VehicleWheel3D{self}, steering)
}
func (self methodsVehicleWheel3D) GetSteering() Float {
	return self.Runtime.VehicleWheel3D_get_steering(VehicleWheel3D{self})
}

type methodsVideoStream struct {
	_ [0]*methodsVideoStream
	class
}

func (self VideoStream) Resource() Resource {
	var parent Resource
	parent.class = self.class
	return parent
}
func (self methodsVideoStream) SetFile(file string) {
	self.Runtime.VideoStream_set_file(VideoStream{self}, file)
}
func (self methodsVideoStream) GetFile() string {
	return self.Runtime.VideoStream_get_file(VideoStream{self})
}

type methodsVideoStreamPlayback struct {
	_ [0]*methodsVideoStreamPlayback
	class
}

func (self VideoStreamPlayback) Resource() Resource {
	var parent Resource
	parent.class = self.class
	return parent
}
func (self methodsVideoStreamPlayback) MixAudio(num_frames int64, buffer PackedFloat32Array, offset int64) int64 {
	return self.Runtime.VideoStreamPlayback_mix_audio(VideoStreamPlayback{self}, num_frames, buffer, offset)
}

type methodsVideoStreamPlayer struct {
	_ [0]*methodsVideoStreamPlayer
	class
}

func (self VideoStreamPlayer) Control() Control {
	var parent Control
	parent.class = self.class
	return parent
}
func (self methodsVideoStreamPlayer) SetStream(stream VideoStream) {
	self.Runtime.VideoStreamPlayer_set_stream(VideoStreamPlayer{self}, stream)
}
func (self methodsVideoStreamPlayer) GetStream() VideoStream {
	return self.Runtime.VideoStreamPlayer_get_stream(VideoStreamPlayer{self})
}
func (self methodsVideoStreamPlayer) Play() {
	self.Runtime.VideoStreamPlayer_play(VideoStreamPlayer{self})
}
func (self methodsVideoStreamPlayer) Stop() {
	self.Runtime.VideoStreamPlayer_stop(VideoStreamPlayer{self})
}
func (self methodsVideoStreamPlayer) IsPlaying() bool {
	return self.Runtime.VideoStreamPlayer_is_playing(VideoStreamPlayer{self})
}
func (self methodsVideoStreamPlayer) SetPaused(paused bool) {
	self.Runtime.VideoStreamPlayer_set_paused(VideoStreamPlayer{self}, paused)
}
func (self methodsVideoStreamPlayer) IsPaused() bool {
	return self.Runtime.VideoStreamPlayer_is_paused(VideoStreamPlayer{self})
}
func (self methodsVideoStreamPlayer) SetLoop(loop bool) {
	self.Runtime.VideoStreamPlayer_set_loop(VideoStreamPlayer{self}, loop)
}
func (self methodsVideoStreamPlayer) HasLoop() bool {
	return self.Runtime.VideoStreamPlayer_has_loop(VideoStreamPlayer{self})
}
func (self methodsVideoStreamPlayer) SetVolume(volume Float) {
	self.Runtime.VideoStreamPlayer_set_volume(VideoStreamPlayer{self}, volume)
}
func (self methodsVideoStreamPlayer) GetVolume() Float {
	return self.Runtime.VideoStreamPlayer_get_volume(VideoStreamPlayer{self})
}
func (self methodsVideoStreamPlayer) SetVolumeDb(db Float) {
	self.Runtime.VideoStreamPlayer_set_volume_db(VideoStreamPlayer{self}, db)
}
func (self methodsVideoStreamPlayer) GetVolumeDb() Float {
	return self.Runtime.VideoStreamPlayer_get_volume_db(VideoStreamPlayer{self})
}
func (self methodsVideoStreamPlayer) SetAudioTrack(track int64) {
	self.Runtime.VideoStreamPlayer_set_audio_track(VideoStreamPlayer{self}, track)
}
func (self methodsVideoStreamPlayer) GetAudioTrack() int64 {
	return self.Runtime.VideoStreamPlayer_get_audio_track(VideoStreamPlayer{self})
}
func (self methodsVideoStreamPlayer) GetStreamName() string {
	return self.Runtime.VideoStreamPlayer_get_stream_name(VideoStreamPlayer{self})
}
func (self methodsVideoStreamPlayer) GetStreamLength() Float {
	return self.Runtime.VideoStreamPlayer_get_stream_length(VideoStreamPlayer{self})
}
func (self methodsVideoStreamPlayer) SetStreamPosition(position Float) {
	self.Runtime.VideoStreamPlayer_set_stream_position(VideoStreamPlayer{self}, position)
}
func (self methodsVideoStreamPlayer) GetStreamPosition() Float {
	return self.Runtime.VideoStreamPlayer_get_stream_position(VideoStreamPlayer{self})
}
func (self methodsVideoStreamPlayer) SetAutoplay(enabled bool) {
	self.Runtime.VideoStreamPlayer_set_autoplay(VideoStreamPlayer{self}, enabled)
}
func (self methodsVideoStreamPlayer) HasAutoplay() bool {
	return self.Runtime.VideoStreamPlayer_has_autoplay(VideoStreamPlayer{self})
}
func (self methodsVideoStreamPlayer) SetExpand(enable bool) {
	self.Runtime.VideoStreamPlayer_set_expand(VideoStreamPlayer{self}, enable)
}
func (self methodsVideoStreamPlayer) HasExpand() bool {
	return self.Runtime.VideoStreamPlayer_has_expand(VideoStreamPlayer{self})
}
func (self methodsVideoStreamPlayer) SetBufferingMsec(msec int64) {
	self.Runtime.VideoStreamPlayer_set_buffering_msec(VideoStreamPlayer{self}, msec)
}
func (self methodsVideoStreamPlayer) GetBufferingMsec() int64 {
	return self.Runtime.VideoStreamPlayer_get_buffering_msec(VideoStreamPlayer{self})
}
func (self methodsVideoStreamPlayer) SetBus(bus string) {
	self.Runtime.VideoStreamPlayer_set_bus(VideoStreamPlayer{self}, bus)
}
func (self methodsVideoStreamPlayer) GetBus() string {
	return self.Runtime.VideoStreamPlayer_get_bus(VideoStreamPlayer{self})
}
func (self methodsVideoStreamPlayer) GetVideoTexture() Texture2D {
	return self.Runtime.VideoStreamPlayer_get_video_texture(VideoStreamPlayer{self})
}

type methodsVideoStreamTheora struct {
	_ [0]*methodsVideoStreamTheora
	class
}

func (self VideoStreamTheora) VideoStream() VideoStream {
	var parent VideoStream
	parent.class = self.class
	return parent
}

type methodsViewport struct {
	_ [0]*methodsViewport
	class
}

func (self Viewport) Node() Node { var parent Node; parent.class = self.class; return parent }
func (self methodsViewport) SetWorld2d(world_2d World2D) {
	self.Runtime.Viewport_set_world_2d(Viewport{self}, world_2d)
}
func (self methodsViewport) GetWorld2d() World2D {
	return self.Runtime.Viewport_get_world_2d(Viewport{self})
}
func (self methodsViewport) FindWorld2d() World2D {
	return self.Runtime.Viewport_find_world_2d(Viewport{self})
}
func (self methodsViewport) SetCanvasTransform(xform Transform2D) {
	self.Runtime.Viewport_set_canvas_transform(Viewport{self}, xform)
}
func (self methodsViewport) GetCanvasTransform() Transform2D {
	return self.Runtime.Viewport_get_canvas_transform(Viewport{self})
}
func (self methodsViewport) SetGlobalCanvasTransform(xform Transform2D) {
	self.Runtime.Viewport_set_global_canvas_transform(Viewport{self}, xform)
}
func (self methodsViewport) GetGlobalCanvasTransform() Transform2D {
	return self.Runtime.Viewport_get_global_canvas_transform(Viewport{self})
}
func (self methodsViewport) GetFinalTransform() Transform2D {
	return self.Runtime.Viewport_get_final_transform(Viewport{self})
}
func (self methodsViewport) GetScreenTransform() Transform2D {
	return self.Runtime.Viewport_get_screen_transform(Viewport{self})
}
func (self methodsViewport) GetVisibleRect() Rect2 {
	return self.Runtime.Viewport_get_visible_rect(Viewport{self})
}
func (self methodsViewport) SetTransparentBackground(enable bool) {
	self.Runtime.Viewport_set_transparent_background(Viewport{self}, enable)
}
func (self methodsViewport) HasTransparentBackground() bool {
	return self.Runtime.Viewport_has_transparent_background(Viewport{self})
}
func (self methodsViewport) SetUseHdr2d(enable bool) {
	self.Runtime.Viewport_set_use_hdr_2d(Viewport{self}, enable)
}
func (self methodsViewport) IsUsingHdr2d() bool {
	return self.Runtime.Viewport_is_using_hdr_2d(Viewport{self})
}
func (self methodsViewport) SetMsaa2d(msaa ViewportMSAA) {
	self.Runtime.Viewport_set_msaa_2d(Viewport{self}, msaa)
}
func (self methodsViewport) GetMsaa2d() ViewportMSAA {
	return self.Runtime.Viewport_get_msaa_2d(Viewport{self})
}
func (self methodsViewport) SetMsaa3d(msaa ViewportMSAA) {
	self.Runtime.Viewport_set_msaa_3d(Viewport{self}, msaa)
}
func (self methodsViewport) GetMsaa3d() ViewportMSAA {
	return self.Runtime.Viewport_get_msaa_3d(Viewport{self})
}
func (self methodsViewport) SetScreenSpaceAa(screen_space_aa ViewportScreenSpaceAA) {
	self.Runtime.Viewport_set_screen_space_aa(Viewport{self}, screen_space_aa)
}
func (self methodsViewport) GetScreenSpaceAa() ViewportScreenSpaceAA {
	return self.Runtime.Viewport_get_screen_space_aa(Viewport{self})
}
func (self methodsViewport) SetUseTaa(enable bool) {
	self.Runtime.Viewport_set_use_taa(Viewport{self}, enable)
}
func (self methodsViewport) IsUsingTaa() bool {
	return self.Runtime.Viewport_is_using_taa(Viewport{self})
}
func (self methodsViewport) SetUseDebanding(enable bool) {
	self.Runtime.Viewport_set_use_debanding(Viewport{self}, enable)
}
func (self methodsViewport) IsUsingDebanding() bool {
	return self.Runtime.Viewport_is_using_debanding(Viewport{self})
}
func (self methodsViewport) SetUseOcclusionCulling(enable bool) {
	self.Runtime.Viewport_set_use_occlusion_culling(Viewport{self}, enable)
}
func (self methodsViewport) IsUsingOcclusionCulling() bool {
	return self.Runtime.Viewport_is_using_occlusion_culling(Viewport{self})
}
func (self methodsViewport) SetDebugDraw(debug_draw ViewportDebugDraw) {
	self.Runtime.Viewport_set_debug_draw(Viewport{self}, debug_draw)
}
func (self methodsViewport) GetDebugDraw() ViewportDebugDraw {
	return self.Runtime.Viewport_get_debug_draw(Viewport{self})
}
func (self methodsViewport) GetRenderInfo(atype ViewportRenderInfoType, info ViewportRenderInfo) int64 {
	return self.Runtime.Viewport_get_render_info(Viewport{self}, atype, info)
}
func (self methodsViewport) GetTexture() ViewportTexture {
	return self.Runtime.Viewport_get_texture(Viewport{self})
}
func (self methodsViewport) SetPhysicsObjectPicking(enable bool) {
	self.Runtime.Viewport_set_physics_object_picking(Viewport{self}, enable)
}
func (self methodsViewport) GetPhysicsObjectPicking() bool {
	return self.Runtime.Viewport_get_physics_object_picking(Viewport{self})
}
func (self methodsViewport) SetPhysicsObjectPickingSort(enable bool) {
	self.Runtime.Viewport_set_physics_object_picking_sort(Viewport{self}, enable)
}
func (self methodsViewport) GetPhysicsObjectPickingSort() bool {
	return self.Runtime.Viewport_get_physics_object_picking_sort(Viewport{self})
}
func (self methodsViewport) GetViewportRid() RID {
	return self.Runtime.Viewport_get_viewport_rid(Viewport{self})
}
func (self methodsViewport) PushTextInput(text string) {
	self.Runtime.Viewport_push_text_input(Viewport{self}, text)
}
func (self methodsViewport) PushInput(event InputEvent, in_local_coords bool) {
	self.Runtime.Viewport_push_input(Viewport{self}, event, in_local_coords)
}
func (self methodsViewport) PushUnhandledInput(event InputEvent, in_local_coords bool) {
	self.Runtime.Viewport_push_unhandled_input(Viewport{self}, event, in_local_coords)
}
func (self methodsViewport) GetCamera2d() Camera2D {
	return self.Runtime.Viewport_get_camera_2d(Viewport{self})
}
func (self methodsViewport) SetAsAudioListener2d(enable bool) {
	self.Runtime.Viewport_set_as_audio_listener_2d(Viewport{self}, enable)
}
func (self methodsViewport) IsAudioListener2d() bool {
	return self.Runtime.Viewport_is_audio_listener_2d(Viewport{self})
}
func (self methodsViewport) GetMousePosition() Vector2 {
	return self.Runtime.Viewport_get_mouse_position(Viewport{self})
}
func (self methodsViewport) WarpMouse(position Vector2) {
	self.Runtime.Viewport_warp_mouse(Viewport{self}, position)
}
func (self methodsViewport) UpdateMouseCursorState() {
	self.Runtime.Viewport_update_mouse_cursor_state(Viewport{self})
}
func (self methodsViewport) GuiGetDragData() any {
	return self.Runtime.Viewport_gui_get_drag_data(Viewport{self})
}
func (self methodsViewport) GuiIsDragging() bool {
	return self.Runtime.Viewport_gui_is_dragging(Viewport{self})
}
func (self methodsViewport) GuiIsDragSuccessful() bool {
	return self.Runtime.Viewport_gui_is_drag_successful(Viewport{self})
}
func (self methodsViewport) GuiReleaseFocus() {
	self.Runtime.Viewport_gui_release_focus(Viewport{self})
}
func (self methodsViewport) GuiGetFocusOwner() Control {
	return self.Runtime.Viewport_gui_get_focus_owner(Viewport{self})
}
func (self methodsViewport) GuiGetHoveredControl() Control {
	return self.Runtime.Viewport_gui_get_hovered_control(Viewport{self})
}
func (self methodsViewport) SetDisableInput(disable bool) {
	self.Runtime.Viewport_set_disable_input(Viewport{self}, disable)
}
func (self methodsViewport) IsInputDisabled() bool {
	return self.Runtime.Viewport_is_input_disabled(Viewport{self})
}
func (self methodsViewport) SetPositionalShadowAtlasSize(size int64) {
	self.Runtime.Viewport_set_positional_shadow_atlas_size(Viewport{self}, size)
}
func (self methodsViewport) GetPositionalShadowAtlasSize() int64 {
	return self.Runtime.Viewport_get_positional_shadow_atlas_size(Viewport{self})
}
func (self methodsViewport) SetPositionalShadowAtlas16Bits(enable bool) {
	self.Runtime.Viewport_set_positional_shadow_atlas_16_bits(Viewport{self}, enable)
}
func (self methodsViewport) GetPositionalShadowAtlas16Bits() bool {
	return self.Runtime.Viewport_get_positional_shadow_atlas_16_bits(Viewport{self})
}
func (self methodsViewport) SetSnapControlsToPixels(enabled bool) {
	self.Runtime.Viewport_set_snap_controls_to_pixels(Viewport{self}, enabled)
}
func (self methodsViewport) IsSnapControlsToPixelsEnabled() bool {
	return self.Runtime.Viewport_is_snap_controls_to_pixels_enabled(Viewport{self})
}
func (self methodsViewport) SetSnap2dTransformsToPixel(enabled bool) {
	self.Runtime.Viewport_set_snap_2d_transforms_to_pixel(Viewport{self}, enabled)
}
func (self methodsViewport) IsSnap2dTransformsToPixelEnabled() bool {
	return self.Runtime.Viewport_is_snap_2d_transforms_to_pixel_enabled(Viewport{self})
}
func (self methodsViewport) SetSnap2dVerticesToPixel(enabled bool) {
	self.Runtime.Viewport_set_snap_2d_vertices_to_pixel(Viewport{self}, enabled)
}
func (self methodsViewport) IsSnap2dVerticesToPixelEnabled() bool {
	return self.Runtime.Viewport_is_snap_2d_vertices_to_pixel_enabled(Viewport{self})
}
func (self methodsViewport) SetPositionalShadowAtlasQuadrantSubdiv(quadrant int64, subdiv ViewportPositionalShadowAtlasQuadrantSubdiv) {
	self.Runtime.Viewport_set_positional_shadow_atlas_quadrant_subdiv(Viewport{self}, quadrant, subdiv)
}
func (self methodsViewport) GetPositionalShadowAtlasQuadrantSubdiv(quadrant int64) ViewportPositionalShadowAtlasQuadrantSubdiv {
	return self.Runtime.Viewport_get_positional_shadow_atlas_quadrant_subdiv(Viewport{self}, quadrant)
}
func (self methodsViewport) SetInputAsHandled() {
	self.Runtime.Viewport_set_input_as_handled(Viewport{self})
}
func (self methodsViewport) IsInputHandled() bool {
	return self.Runtime.Viewport_is_input_handled(Viewport{self})
}
func (self methodsViewport) SetHandleInputLocally(enable bool) {
	self.Runtime.Viewport_set_handle_input_locally(Viewport{self}, enable)
}
func (self methodsViewport) IsHandlingInputLocally() bool {
	return self.Runtime.Viewport_is_handling_input_locally(Viewport{self})
}
func (self methodsViewport) SetDefaultCanvasItemTextureFilter(mode ViewportDefaultCanvasItemTextureFilter) {
	self.Runtime.Viewport_set_default_canvas_item_texture_filter(Viewport{self}, mode)
}
func (self methodsViewport) GetDefaultCanvasItemTextureFilter() ViewportDefaultCanvasItemTextureFilter {
	return self.Runtime.Viewport_get_default_canvas_item_texture_filter(Viewport{self})
}
func (self methodsViewport) SetEmbeddingSubwindows(enable bool) {
	self.Runtime.Viewport_set_embedding_subwindows(Viewport{self}, enable)
}
func (self methodsViewport) IsEmbeddingSubwindows() bool {
	return self.Runtime.Viewport_is_embedding_subwindows(Viewport{self})
}
func (self methodsViewport) GetEmbeddedSubwindows() ArrayOf[Window] {
	return self.Runtime.Viewport_get_embedded_subwindows(Viewport{self})
}
func (self methodsViewport) SetCanvasCullMask(mask int64) {
	self.Runtime.Viewport_set_canvas_cull_mask(Viewport{self}, mask)
}
func (self methodsViewport) GetCanvasCullMask() int64 {
	return self.Runtime.Viewport_get_canvas_cull_mask(Viewport{self})
}
func (self methodsViewport) SetCanvasCullMaskBit(layer int64, enable bool) {
	self.Runtime.Viewport_set_canvas_cull_mask_bit(Viewport{self}, layer, enable)
}
func (self methodsViewport) GetCanvasCullMaskBit(layer int64) bool {
	return self.Runtime.Viewport_get_canvas_cull_mask_bit(Viewport{self}, layer)
}
func (self methodsViewport) SetDefaultCanvasItemTextureRepeat(mode ViewportDefaultCanvasItemTextureRepeat) {
	self.Runtime.Viewport_set_default_canvas_item_texture_repeat(Viewport{self}, mode)
}
func (self methodsViewport) GetDefaultCanvasItemTextureRepeat() ViewportDefaultCanvasItemTextureRepeat {
	return self.Runtime.Viewport_get_default_canvas_item_texture_repeat(Viewport{self})
}
func (self methodsViewport) SetSdfOversize(oversize ViewportSDFOversize) {
	self.Runtime.Viewport_set_sdf_oversize(Viewport{self}, oversize)
}
func (self methodsViewport) GetSdfOversize() ViewportSDFOversize {
	return self.Runtime.Viewport_get_sdf_oversize(Viewport{self})
}
func (self methodsViewport) SetSdfScale(scale ViewportSDFScale) {
	self.Runtime.Viewport_set_sdf_scale(Viewport{self}, scale)
}
func (self methodsViewport) GetSdfScale() ViewportSDFScale {
	return self.Runtime.Viewport_get_sdf_scale(Viewport{self})
}
func (self methodsViewport) SetMeshLodThreshold(pixels Float) {
	self.Runtime.Viewport_set_mesh_lod_threshold(Viewport{self}, pixels)
}
func (self methodsViewport) GetMeshLodThreshold() Float {
	return self.Runtime.Viewport_get_mesh_lod_threshold(Viewport{self})
}
func (self methodsViewport) SetWorld3d(world_3d World3D) {
	self.Runtime.Viewport_set_world_3d(Viewport{self}, world_3d)
}
func (self methodsViewport) GetWorld3d() World3D {
	return self.Runtime.Viewport_get_world_3d(Viewport{self})
}
func (self methodsViewport) FindWorld3d() World3D {
	return self.Runtime.Viewport_find_world_3d(Viewport{self})
}
func (self methodsViewport) SetUseOwnWorld3d(enable bool) {
	self.Runtime.Viewport_set_use_own_world_3d(Viewport{self}, enable)
}
func (self methodsViewport) IsUsingOwnWorld3d() bool {
	return self.Runtime.Viewport_is_using_own_world_3d(Viewport{self})
}
func (self methodsViewport) GetCamera3d() Camera3D {
	return self.Runtime.Viewport_get_camera_3d(Viewport{self})
}
func (self methodsViewport) SetAsAudioListener3d(enable bool) {
	self.Runtime.Viewport_set_as_audio_listener_3d(Viewport{self}, enable)
}
func (self methodsViewport) IsAudioListener3d() bool {
	return self.Runtime.Viewport_is_audio_listener_3d(Viewport{self})
}
func (self methodsViewport) SetDisable3d(disable bool) {
	self.Runtime.Viewport_set_disable_3d(Viewport{self}, disable)
}
func (self methodsViewport) Is3dDisabled() bool {
	return self.Runtime.Viewport_is_3d_disabled(Viewport{self})
}
func (self methodsViewport) SetUseXr(use bool) {
	self.Runtime.Viewport_set_use_xr(Viewport{self}, use)
}
func (self methodsViewport) IsUsingXr() bool {
	return self.Runtime.Viewport_is_using_xr(Viewport{self})
}
func (self methodsViewport) SetScaling3dMode(scaling_3d_mode ViewportScaling3DMode) {
	self.Runtime.Viewport_set_scaling_3d_mode(Viewport{self}, scaling_3d_mode)
}
func (self methodsViewport) GetScaling3dMode() ViewportScaling3DMode {
	return self.Runtime.Viewport_get_scaling_3d_mode(Viewport{self})
}
func (self methodsViewport) SetScaling3dScale(scale Float) {
	self.Runtime.Viewport_set_scaling_3d_scale(Viewport{self}, scale)
}
func (self methodsViewport) GetScaling3dScale() Float {
	return self.Runtime.Viewport_get_scaling_3d_scale(Viewport{self})
}
func (self methodsViewport) SetFsrSharpness(fsr_sharpness Float) {
	self.Runtime.Viewport_set_fsr_sharpness(Viewport{self}, fsr_sharpness)
}
func (self methodsViewport) GetFsrSharpness() Float {
	return self.Runtime.Viewport_get_fsr_sharpness(Viewport{self})
}
func (self methodsViewport) SetTextureMipmapBias(texture_mipmap_bias Float) {
	self.Runtime.Viewport_set_texture_mipmap_bias(Viewport{self}, texture_mipmap_bias)
}
func (self methodsViewport) GetTextureMipmapBias() Float {
	return self.Runtime.Viewport_get_texture_mipmap_bias(Viewport{self})
}
func (self methodsViewport) SetVrsMode(mode ViewportVRSMode) {
	self.Runtime.Viewport_set_vrs_mode(Viewport{self}, mode)
}
func (self methodsViewport) GetVrsMode() ViewportVRSMode {
	return self.Runtime.Viewport_get_vrs_mode(Viewport{self})
}
func (self methodsViewport) SetVrsTexture(texture Texture2D) {
	self.Runtime.Viewport_set_vrs_texture(Viewport{self}, texture)
}
func (self methodsViewport) GetVrsTexture() Texture2D {
	return self.Runtime.Viewport_get_vrs_texture(Viewport{self})
}

type methodsViewportTexture struct {
	_ [0]*methodsViewportTexture
	class
}

func (self ViewportTexture) Texture2D() Texture2D {
	var parent Texture2D
	parent.class = self.class
	return parent
}
func (self methodsViewportTexture) SetViewportPathInScene(path NodePath) {
	self.Runtime.ViewportTexture_set_viewport_path_in_scene(ViewportTexture{self}, path)
}
func (self methodsViewportTexture) GetViewportPathInScene() NodePath {
	return self.Runtime.ViewportTexture_get_viewport_path_in_scene(ViewportTexture{self})
}

type methodsVisibleOnScreenEnabler2D struct {
	_ [0]*methodsVisibleOnScreenEnabler2D
	class
}

func (self VisibleOnScreenEnabler2D) VisibleOnScreenNotifier2D() VisibleOnScreenNotifier2D {
	var parent VisibleOnScreenNotifier2D
	parent.class = self.class
	return parent
}
func (self methodsVisibleOnScreenEnabler2D) SetEnableMode(mode VisibleOnScreenEnabler2DEnableMode) {
	self.Runtime.VisibleOnScreenEnabler2D_set_enable_mode(VisibleOnScreenEnabler2D{self}, mode)
}
func (self methodsVisibleOnScreenEnabler2D) GetEnableMode() VisibleOnScreenEnabler2DEnableMode {
	return self.Runtime.VisibleOnScreenEnabler2D_get_enable_mode(VisibleOnScreenEnabler2D{self})
}
func (self methodsVisibleOnScreenEnabler2D) SetEnableNodePath(path NodePath) {
	self.Runtime.VisibleOnScreenEnabler2D_set_enable_node_path(VisibleOnScreenEnabler2D{self}, path)
}
func (self methodsVisibleOnScreenEnabler2D) GetEnableNodePath() NodePath {
	return self.Runtime.VisibleOnScreenEnabler2D_get_enable_node_path(VisibleOnScreenEnabler2D{self})
}

type methodsVisibleOnScreenEnabler3D struct {
	_ [0]*methodsVisibleOnScreenEnabler3D
	class
}

func (self VisibleOnScreenEnabler3D) VisibleOnScreenNotifier3D() VisibleOnScreenNotifier3D {
	var parent VisibleOnScreenNotifier3D
	parent.class = self.class
	return parent
}
func (self methodsVisibleOnScreenEnabler3D) SetEnableMode(mode VisibleOnScreenEnabler3DEnableMode) {
	self.Runtime.VisibleOnScreenEnabler3D_set_enable_mode(VisibleOnScreenEnabler3D{self}, mode)
}
func (self methodsVisibleOnScreenEnabler3D) GetEnableMode() VisibleOnScreenEnabler3DEnableMode {
	return self.Runtime.VisibleOnScreenEnabler3D_get_enable_mode(VisibleOnScreenEnabler3D{self})
}
func (self methodsVisibleOnScreenEnabler3D) SetEnableNodePath(path NodePath) {
	self.Runtime.VisibleOnScreenEnabler3D_set_enable_node_path(VisibleOnScreenEnabler3D{self}, path)
}
func (self methodsVisibleOnScreenEnabler3D) GetEnableNodePath() NodePath {
	return self.Runtime.VisibleOnScreenEnabler3D_get_enable_node_path(VisibleOnScreenEnabler3D{self})
}

type methodsVisibleOnScreenNotifier2D struct {
	_ [0]*methodsVisibleOnScreenNotifier2D
	class
}

func (self VisibleOnScreenNotifier2D) Node2D() Node2D {
	var parent Node2D
	parent.class = self.class
	return parent
}
func (self methodsVisibleOnScreenNotifier2D) SetRect(rect Rect2) {
	self.Runtime.VisibleOnScreenNotifier2D_set_rect(VisibleOnScreenNotifier2D{self}, rect)
}
func (self methodsVisibleOnScreenNotifier2D) GetRect() Rect2 {
	return self.Runtime.VisibleOnScreenNotifier2D_get_rect(VisibleOnScreenNotifier2D{self})
}
func (self methodsVisibleOnScreenNotifier2D) IsOnScreen() bool {
	return self.Runtime.VisibleOnScreenNotifier2D_is_on_screen(VisibleOnScreenNotifier2D{self})
}

type methodsVisibleOnScreenNotifier3D struct {
	_ [0]*methodsVisibleOnScreenNotifier3D
	class
}

func (self VisibleOnScreenNotifier3D) VisualInstance3D() VisualInstance3D {
	var parent VisualInstance3D
	parent.class = self.class
	return parent
}
func (self methodsVisibleOnScreenNotifier3D) SetAabb(rect AABB) {
	self.Runtime.VisibleOnScreenNotifier3D_set_aabb(VisibleOnScreenNotifier3D{self}, rect)
}
func (self methodsVisibleOnScreenNotifier3D) IsOnScreen() bool {
	return self.Runtime.VisibleOnScreenNotifier3D_is_on_screen(VisibleOnScreenNotifier3D{self})
}

type methodsVisualInstance3D struct {
	_ [0]*methodsVisualInstance3D
	class
}

func (self VisualInstance3D) Node3D() Node3D {
	var parent Node3D
	parent.class = self.class
	return parent
}
func (self methodsVisualInstance3D) SetBase(base RID) {
	self.Runtime.VisualInstance3D_set_base(VisualInstance3D{self}, base)
}
func (self methodsVisualInstance3D) GetBase() RID {
	return self.Runtime.VisualInstance3D_get_base(VisualInstance3D{self})
}
func (self methodsVisualInstance3D) GetInstance() RID {
	return self.Runtime.VisualInstance3D_get_instance(VisualInstance3D{self})
}
func (self methodsVisualInstance3D) SetLayerMask(mask int64) {
	self.Runtime.VisualInstance3D_set_layer_mask(VisualInstance3D{self}, mask)
}
func (self methodsVisualInstance3D) GetLayerMask() int64 {
	return self.Runtime.VisualInstance3D_get_layer_mask(VisualInstance3D{self})
}
func (self methodsVisualInstance3D) SetLayerMaskValue(layer_number int64, value bool) {
	self.Runtime.VisualInstance3D_set_layer_mask_value(VisualInstance3D{self}, layer_number, value)
}
func (self methodsVisualInstance3D) GetLayerMaskValue(layer_number int64) bool {
	return self.Runtime.VisualInstance3D_get_layer_mask_value(VisualInstance3D{self}, layer_number)
}
func (self methodsVisualInstance3D) SetSortingOffset(offset Float) {
	self.Runtime.VisualInstance3D_set_sorting_offset(VisualInstance3D{self}, offset)
}
func (self methodsVisualInstance3D) GetSortingOffset() Float {
	return self.Runtime.VisualInstance3D_get_sorting_offset(VisualInstance3D{self})
}
func (self methodsVisualInstance3D) SetSortingUseAabbCenter(enabled bool) {
	self.Runtime.VisualInstance3D_set_sorting_use_aabb_center(VisualInstance3D{self}, enabled)
}
func (self methodsVisualInstance3D) IsSortingUseAabbCenter() bool {
	return self.Runtime.VisualInstance3D_is_sorting_use_aabb_center(VisualInstance3D{self})
}
func (self methodsVisualInstance3D) GetAabb() AABB {
	return self.Runtime.VisualInstance3D_get_aabb(VisualInstance3D{self})
}

type methodsVisualShader struct {
	_ [0]*methodsVisualShader
	class
}

func (self VisualShader) Shader() Shader { var parent Shader; parent.class = self.class; return parent }
func (self methodsVisualShader) SetMode(mode ShaderMode) {
	self.Runtime.VisualShader_set_mode(VisualShader{self}, mode)
}
func (self methodsVisualShader) AddNode(atype VisualShaderType, node VisualShaderNode, position Vector2, id int64) {
	self.Runtime.VisualShader_add_node(VisualShader{self}, atype, node, position, id)
}
func (self methodsVisualShader) GetNode(atype VisualShaderType, id int64) VisualShaderNode {
	return self.Runtime.VisualShader_get_node(VisualShader{self}, atype, id)
}
func (self methodsVisualShader) SetNodePosition(atype VisualShaderType, id int64, position Vector2) {
	self.Runtime.VisualShader_set_node_position(VisualShader{self}, atype, id, position)
}
func (self methodsVisualShader) GetNodePosition(atype VisualShaderType, id int64) Vector2 {
	return self.Runtime.VisualShader_get_node_position(VisualShader{self}, atype, id)
}
func (self methodsVisualShader) GetNodeList(atype VisualShaderType) PackedInt32Array {
	return self.Runtime.VisualShader_get_node_list(VisualShader{self}, atype)
}
func (self methodsVisualShader) GetValidNodeId(atype VisualShaderType) int64 {
	return self.Runtime.VisualShader_get_valid_node_id(VisualShader{self}, atype)
}
func (self methodsVisualShader) RemoveNode(atype VisualShaderType, id int64) {
	self.Runtime.VisualShader_remove_node(VisualShader{self}, atype, id)
}
func (self methodsVisualShader) ReplaceNode(atype VisualShaderType, id int64, new_class string) {
	self.Runtime.VisualShader_replace_node(VisualShader{self}, atype, id, new_class)
}
func (self methodsVisualShader) IsNodeConnection(atype VisualShaderType, from_node int64, from_port int64, to_node int64, to_port int64) bool {
	return self.Runtime.VisualShader_is_node_connection(VisualShader{self}, atype, from_node, from_port, to_node, to_port)
}
func (self methodsVisualShader) CanConnectNodes(atype VisualShaderType, from_node int64, from_port int64, to_node int64, to_port int64) bool {
	return self.Runtime.VisualShader_can_connect_nodes(VisualShader{self}, atype, from_node, from_port, to_node, to_port)
}
func (self methodsVisualShader) ConnectNodes(atype VisualShaderType, from_node int64, from_port int64, to_node int64, to_port int64) int64 {
	return self.Runtime.VisualShader_connect_nodes(VisualShader{self}, atype, from_node, from_port, to_node, to_port)
}
func (self methodsVisualShader) DisconnectNodes(atype VisualShaderType, from_node int64, from_port int64, to_node int64, to_port int64) {
	self.Runtime.VisualShader_disconnect_nodes(VisualShader{self}, atype, from_node, from_port, to_node, to_port)
}
func (self methodsVisualShader) ConnectNodesForced(atype VisualShaderType, from_node int64, from_port int64, to_node int64, to_port int64) {
	self.Runtime.VisualShader_connect_nodes_forced(VisualShader{self}, atype, from_node, from_port, to_node, to_port)
}
func (self methodsVisualShader) GetNodeConnections(atype VisualShaderType) ArrayOf[Dictionary] {
	return self.Runtime.VisualShader_get_node_connections(VisualShader{self}, atype)
}
func (self methodsVisualShader) SetGraphOffset(offset Vector2) {
	self.Runtime.VisualShader_set_graph_offset(VisualShader{self}, offset)
}
func (self methodsVisualShader) GetGraphOffset() Vector2 {
	return self.Runtime.VisualShader_get_graph_offset(VisualShader{self})
}
func (self methodsVisualShader) AddVarying(name string, mode VisualShaderVaryingMode, atype VisualShaderVaryingType) {
	self.Runtime.VisualShader_add_varying(VisualShader{self}, name, mode, atype)
}
func (self methodsVisualShader) RemoveVarying(name string) {
	self.Runtime.VisualShader_remove_varying(VisualShader{self}, name)
}
func (self methodsVisualShader) HasVarying(name string) bool {
	return self.Runtime.VisualShader_has_varying(VisualShader{self}, name)
}

type methodsVisualShaderNode struct {
	_ [0]*methodsVisualShaderNode
	class
}

func (self VisualShaderNode) Resource() Resource {
	var parent Resource
	parent.class = self.class
	return parent
}
func (self methodsVisualShaderNode) GetDefaultInputPort(atype VisualShaderNodePortType) int64 {
	return self.Runtime.VisualShaderNode_get_default_input_port(VisualShaderNode{self}, atype)
}
func (self methodsVisualShaderNode) SetOutputPortForPreview(port int64) {
	self.Runtime.VisualShaderNode_set_output_port_for_preview(VisualShaderNode{self}, port)
}
func (self methodsVisualShaderNode) GetOutputPortForPreview() int64 {
	return self.Runtime.VisualShaderNode_get_output_port_for_preview(VisualShaderNode{self})
}
func (self methodsVisualShaderNode) SetInputPortDefaultValue(port int64, value any, prev_value any) {
	self.Runtime.VisualShaderNode_set_input_port_default_value(VisualShaderNode{self}, port, value, prev_value)
}
func (self methodsVisualShaderNode) GetInputPortDefaultValue(port int64) any {
	return self.Runtime.VisualShaderNode_get_input_port_default_value(VisualShaderNode{self}, port)
}
func (self methodsVisualShaderNode) RemoveInputPortDefaultValue(port int64) {
	self.Runtime.VisualShaderNode_remove_input_port_default_value(VisualShaderNode{self}, port)
}
func (self methodsVisualShaderNode) ClearDefaultInputValues() {
	self.Runtime.VisualShaderNode_clear_default_input_values(VisualShaderNode{self})
}
func (self methodsVisualShaderNode) SetDefaultInputValues(values Array) {
	self.Runtime.VisualShaderNode_set_default_input_values(VisualShaderNode{self}, values)
}
func (self methodsVisualShaderNode) GetDefaultInputValues() Array {
	return self.Runtime.VisualShaderNode_get_default_input_values(VisualShaderNode{self})
}

type methodsVisualShaderNodeBillboard struct {
	_ [0]*methodsVisualShaderNodeBillboard
	class
}

func (self VisualShaderNodeBillboard) VisualShaderNode() VisualShaderNode {
	var parent VisualShaderNode
	parent.class = self.class
	return parent
}
func (self methodsVisualShaderNodeBillboard) SetBillboardType(billboard_type VisualShaderNodeBillboardBillboardType) {
	self.Runtime.VisualShaderNodeBillboard_set_billboard_type(VisualShaderNodeBillboard{self}, billboard_type)
}
func (self methodsVisualShaderNodeBillboard) GetBillboardType() VisualShaderNodeBillboardBillboardType {
	return self.Runtime.VisualShaderNodeBillboard_get_billboard_type(VisualShaderNodeBillboard{self})
}
func (self methodsVisualShaderNodeBillboard) SetKeepScaleEnabled(enabled bool) {
	self.Runtime.VisualShaderNodeBillboard_set_keep_scale_enabled(VisualShaderNodeBillboard{self}, enabled)
}
func (self methodsVisualShaderNodeBillboard) IsKeepScaleEnabled() bool {
	return self.Runtime.VisualShaderNodeBillboard_is_keep_scale_enabled(VisualShaderNodeBillboard{self})
}

type methodsVisualShaderNodeBooleanConstant struct {
	_ [0]*methodsVisualShaderNodeBooleanConstant
	class
}

func (self VisualShaderNodeBooleanConstant) VisualShaderNodeConstant() VisualShaderNodeConstant {
	var parent VisualShaderNodeConstant
	parent.class = self.class
	return parent
}
func (self methodsVisualShaderNodeBooleanConstant) SetConstant(constant bool) {
	self.Runtime.VisualShaderNodeBooleanConstant_set_constant(VisualShaderNodeBooleanConstant{self}, constant)
}
func (self methodsVisualShaderNodeBooleanConstant) GetConstant() bool {
	return self.Runtime.VisualShaderNodeBooleanConstant_get_constant(VisualShaderNodeBooleanConstant{self})
}

type methodsVisualShaderNodeBooleanParameter struct {
	_ [0]*methodsVisualShaderNodeBooleanParameter
	class
}

func (self VisualShaderNodeBooleanParameter) VisualShaderNodeParameter() VisualShaderNodeParameter {
	var parent VisualShaderNodeParameter
	parent.class = self.class
	return parent
}
func (self methodsVisualShaderNodeBooleanParameter) SetDefaultValueEnabled(enabled bool) {
	self.Runtime.VisualShaderNodeBooleanParameter_set_default_value_enabled(VisualShaderNodeBooleanParameter{self}, enabled)
}
func (self methodsVisualShaderNodeBooleanParameter) IsDefaultValueEnabled() bool {
	return self.Runtime.VisualShaderNodeBooleanParameter_is_default_value_enabled(VisualShaderNodeBooleanParameter{self})
}
func (self methodsVisualShaderNodeBooleanParameter) SetDefaultValue(value bool) {
	self.Runtime.VisualShaderNodeBooleanParameter_set_default_value(VisualShaderNodeBooleanParameter{self}, value)
}
func (self methodsVisualShaderNodeBooleanParameter) GetDefaultValue() bool {
	return self.Runtime.VisualShaderNodeBooleanParameter_get_default_value(VisualShaderNodeBooleanParameter{self})
}

type methodsVisualShaderNodeClamp struct {
	_ [0]*methodsVisualShaderNodeClamp
	class
}

func (self VisualShaderNodeClamp) VisualShaderNode() VisualShaderNode {
	var parent VisualShaderNode
	parent.class = self.class
	return parent
}
func (self methodsVisualShaderNodeClamp) SetOpType(op_type VisualShaderNodeClampOpType) {
	self.Runtime.VisualShaderNodeClamp_set_op_type(VisualShaderNodeClamp{self}, op_type)
}
func (self methodsVisualShaderNodeClamp) GetOpType() VisualShaderNodeClampOpType {
	return self.Runtime.VisualShaderNodeClamp_get_op_type(VisualShaderNodeClamp{self})
}

type methodsVisualShaderNodeColorConstant struct {
	_ [0]*methodsVisualShaderNodeColorConstant
	class
}

func (self VisualShaderNodeColorConstant) VisualShaderNodeConstant() VisualShaderNodeConstant {
	var parent VisualShaderNodeConstant
	parent.class = self.class
	return parent
}
func (self methodsVisualShaderNodeColorConstant) SetConstant(constant Color) {
	self.Runtime.VisualShaderNodeColorConstant_set_constant(VisualShaderNodeColorConstant{self}, constant)
}
func (self methodsVisualShaderNodeColorConstant) GetConstant() Color {
	return self.Runtime.VisualShaderNodeColorConstant_get_constant(VisualShaderNodeColorConstant{self})
}

type methodsVisualShaderNodeColorFunc struct {
	_ [0]*methodsVisualShaderNodeColorFunc
	class
}

func (self VisualShaderNodeColorFunc) VisualShaderNode() VisualShaderNode {
	var parent VisualShaderNode
	parent.class = self.class
	return parent
}
func (self methodsVisualShaderNodeColorFunc) SetFunction(fn VisualShaderNodeColorFuncFunction) {
	self.Runtime.VisualShaderNodeColorFunc_set_function(VisualShaderNodeColorFunc{self}, fn)
}
func (self methodsVisualShaderNodeColorFunc) GetFunction() VisualShaderNodeColorFuncFunction {
	return self.Runtime.VisualShaderNodeColorFunc_get_function(VisualShaderNodeColorFunc{self})
}

type methodsVisualShaderNodeColorOp struct {
	_ [0]*methodsVisualShaderNodeColorOp
	class
}

func (self VisualShaderNodeColorOp) VisualShaderNode() VisualShaderNode {
	var parent VisualShaderNode
	parent.class = self.class
	return parent
}
func (self methodsVisualShaderNodeColorOp) SetOperator(op VisualShaderNodeColorOpOperator) {
	self.Runtime.VisualShaderNodeColorOp_set_operator(VisualShaderNodeColorOp{self}, op)
}
func (self methodsVisualShaderNodeColorOp) GetOperator() VisualShaderNodeColorOpOperator {
	return self.Runtime.VisualShaderNodeColorOp_get_operator(VisualShaderNodeColorOp{self})
}

type methodsVisualShaderNodeColorParameter struct {
	_ [0]*methodsVisualShaderNodeColorParameter
	class
}

func (self VisualShaderNodeColorParameter) VisualShaderNodeParameter() VisualShaderNodeParameter {
	var parent VisualShaderNodeParameter
	parent.class = self.class
	return parent
}
func (self methodsVisualShaderNodeColorParameter) SetDefaultValueEnabled(enabled bool) {
	self.Runtime.VisualShaderNodeColorParameter_set_default_value_enabled(VisualShaderNodeColorParameter{self}, enabled)
}
func (self methodsVisualShaderNodeColorParameter) IsDefaultValueEnabled() bool {
	return self.Runtime.VisualShaderNodeColorParameter_is_default_value_enabled(VisualShaderNodeColorParameter{self})
}
func (self methodsVisualShaderNodeColorParameter) SetDefaultValue(value Color) {
	self.Runtime.VisualShaderNodeColorParameter_set_default_value(VisualShaderNodeColorParameter{self}, value)
}
func (self methodsVisualShaderNodeColorParameter) GetDefaultValue() Color {
	return self.Runtime.VisualShaderNodeColorParameter_get_default_value(VisualShaderNodeColorParameter{self})
}

type methodsVisualShaderNodeComment struct {
	_ [0]*methodsVisualShaderNodeComment
	class
}

func (self VisualShaderNodeComment) VisualShaderNodeResizableBase() VisualShaderNodeResizableBase {
	var parent VisualShaderNodeResizableBase
	parent.class = self.class
	return parent
}
func (self methodsVisualShaderNodeComment) SetTitle(title string) {
	self.Runtime.VisualShaderNodeComment_set_title(VisualShaderNodeComment{self}, title)
}
func (self methodsVisualShaderNodeComment) GetTitle() string {
	return self.Runtime.VisualShaderNodeComment_get_title(VisualShaderNodeComment{self})
}
func (self methodsVisualShaderNodeComment) SetDescription(description string) {
	self.Runtime.VisualShaderNodeComment_set_description(VisualShaderNodeComment{self}, description)
}
func (self methodsVisualShaderNodeComment) GetDescription() string {
	return self.Runtime.VisualShaderNodeComment_get_description(VisualShaderNodeComment{self})
}

type methodsVisualShaderNodeCompare struct {
	_ [0]*methodsVisualShaderNodeCompare
	class
}

func (self VisualShaderNodeCompare) VisualShaderNode() VisualShaderNode {
	var parent VisualShaderNode
	parent.class = self.class
	return parent
}
func (self methodsVisualShaderNodeCompare) SetComparisonType(atype VisualShaderNodeCompareComparisonType) {
	self.Runtime.VisualShaderNodeCompare_set_comparison_type(VisualShaderNodeCompare{self}, atype)
}
func (self methodsVisualShaderNodeCompare) GetComparisonType() VisualShaderNodeCompareComparisonType {
	return self.Runtime.VisualShaderNodeCompare_get_comparison_type(VisualShaderNodeCompare{self})
}
func (self methodsVisualShaderNodeCompare) SetFunction(fn VisualShaderNodeCompareFunction) {
	self.Runtime.VisualShaderNodeCompare_set_function(VisualShaderNodeCompare{self}, fn)
}
func (self methodsVisualShaderNodeCompare) GetFunction() VisualShaderNodeCompareFunction {
	return self.Runtime.VisualShaderNodeCompare_get_function(VisualShaderNodeCompare{self})
}
func (self methodsVisualShaderNodeCompare) SetCondition(condition VisualShaderNodeCompareCondition) {
	self.Runtime.VisualShaderNodeCompare_set_condition(VisualShaderNodeCompare{self}, condition)
}
func (self methodsVisualShaderNodeCompare) GetCondition() VisualShaderNodeCompareCondition {
	return self.Runtime.VisualShaderNodeCompare_get_condition(VisualShaderNodeCompare{self})
}

type methodsVisualShaderNodeConstant struct {
	_ [0]*methodsVisualShaderNodeConstant
	class
}

func (self VisualShaderNodeConstant) VisualShaderNode() VisualShaderNode {
	var parent VisualShaderNode
	parent.class = self.class
	return parent
}

type methodsVisualShaderNodeCubemap struct {
	_ [0]*methodsVisualShaderNodeCubemap
	class
}

func (self VisualShaderNodeCubemap) VisualShaderNode() VisualShaderNode {
	var parent VisualShaderNode
	parent.class = self.class
	return parent
}
func (self methodsVisualShaderNodeCubemap) SetSource(value VisualShaderNodeCubemapSource) {
	self.Runtime.VisualShaderNodeCubemap_set_source(VisualShaderNodeCubemap{self}, value)
}
func (self methodsVisualShaderNodeCubemap) GetSource() VisualShaderNodeCubemapSource {
	return self.Runtime.VisualShaderNodeCubemap_get_source(VisualShaderNodeCubemap{self})
}
func (self methodsVisualShaderNodeCubemap) SetCubeMap(value Cubemap) {
	self.Runtime.VisualShaderNodeCubemap_set_cube_map(VisualShaderNodeCubemap{self}, value)
}
func (self methodsVisualShaderNodeCubemap) GetCubeMap() Cubemap {
	return self.Runtime.VisualShaderNodeCubemap_get_cube_map(VisualShaderNodeCubemap{self})
}
func (self methodsVisualShaderNodeCubemap) SetTextureType(value VisualShaderNodeCubemapTextureType) {
	self.Runtime.VisualShaderNodeCubemap_set_texture_type(VisualShaderNodeCubemap{self}, value)
}
func (self methodsVisualShaderNodeCubemap) GetTextureType() VisualShaderNodeCubemapTextureType {
	return self.Runtime.VisualShaderNodeCubemap_get_texture_type(VisualShaderNodeCubemap{self})
}

type methodsVisualShaderNodeCubemapParameter struct {
	_ [0]*methodsVisualShaderNodeCubemapParameter
	class
}

func (self VisualShaderNodeCubemapParameter) VisualShaderNodeTextureParameter() VisualShaderNodeTextureParameter {
	var parent VisualShaderNodeTextureParameter
	parent.class = self.class
	return parent
}

type methodsVisualShaderNodeCurveTexture struct {
	_ [0]*methodsVisualShaderNodeCurveTexture
	class
}

func (self VisualShaderNodeCurveTexture) VisualShaderNodeResizableBase() VisualShaderNodeResizableBase {
	var parent VisualShaderNodeResizableBase
	parent.class = self.class
	return parent
}
func (self methodsVisualShaderNodeCurveTexture) SetTexture(texture CurveTexture) {
	self.Runtime.VisualShaderNodeCurveTexture_set_texture(VisualShaderNodeCurveTexture{self}, texture)
}
func (self methodsVisualShaderNodeCurveTexture) GetTexture() CurveTexture {
	return self.Runtime.VisualShaderNodeCurveTexture_get_texture(VisualShaderNodeCurveTexture{self})
}

type methodsVisualShaderNodeCurveXYZTexture struct {
	_ [0]*methodsVisualShaderNodeCurveXYZTexture
	class
}

func (self VisualShaderNodeCurveXYZTexture) VisualShaderNodeResizableBase() VisualShaderNodeResizableBase {
	var parent VisualShaderNodeResizableBase
	parent.class = self.class
	return parent
}
func (self methodsVisualShaderNodeCurveXYZTexture) SetTexture(texture CurveXYZTexture) {
	self.Runtime.VisualShaderNodeCurveXYZTexture_set_texture(VisualShaderNodeCurveXYZTexture{self}, texture)
}
func (self methodsVisualShaderNodeCurveXYZTexture) GetTexture() CurveXYZTexture {
	return self.Runtime.VisualShaderNodeCurveXYZTexture_get_texture(VisualShaderNodeCurveXYZTexture{self})
}

type methodsVisualShaderNodeCustom struct {
	_ [0]*methodsVisualShaderNodeCustom
	class
}

func (self VisualShaderNodeCustom) VisualShaderNode() VisualShaderNode {
	var parent VisualShaderNode
	parent.class = self.class
	return parent
}
func (self methodsVisualShaderNodeCustom) GetOptionIndex(option int64) int64 {
	return self.Runtime.VisualShaderNodeCustom_get_option_index(VisualShaderNodeCustom{self}, option)
}

type methodsVisualShaderNodeDerivativeFunc struct {
	_ [0]*methodsVisualShaderNodeDerivativeFunc
	class
}

func (self VisualShaderNodeDerivativeFunc) VisualShaderNode() VisualShaderNode {
	var parent VisualShaderNode
	parent.class = self.class
	return parent
}
func (self methodsVisualShaderNodeDerivativeFunc) SetOpType(atype VisualShaderNodeDerivativeFuncOpType) {
	self.Runtime.VisualShaderNodeDerivativeFunc_set_op_type(VisualShaderNodeDerivativeFunc{self}, atype)
}
func (self methodsVisualShaderNodeDerivativeFunc) GetOpType() VisualShaderNodeDerivativeFuncOpType {
	return self.Runtime.VisualShaderNodeDerivativeFunc_get_op_type(VisualShaderNodeDerivativeFunc{self})
}
func (self methodsVisualShaderNodeDerivativeFunc) SetFunction(fn VisualShaderNodeDerivativeFuncFunction) {
	self.Runtime.VisualShaderNodeDerivativeFunc_set_function(VisualShaderNodeDerivativeFunc{self}, fn)
}
func (self methodsVisualShaderNodeDerivativeFunc) GetFunction() VisualShaderNodeDerivativeFuncFunction {
	return self.Runtime.VisualShaderNodeDerivativeFunc_get_function(VisualShaderNodeDerivativeFunc{self})
}
func (self methodsVisualShaderNodeDerivativeFunc) SetPrecision(precision VisualShaderNodeDerivativeFuncPrecision) {
	self.Runtime.VisualShaderNodeDerivativeFunc_set_precision(VisualShaderNodeDerivativeFunc{self}, precision)
}
func (self methodsVisualShaderNodeDerivativeFunc) GetPrecision() VisualShaderNodeDerivativeFuncPrecision {
	return self.Runtime.VisualShaderNodeDerivativeFunc_get_precision(VisualShaderNodeDerivativeFunc{self})
}

type methodsVisualShaderNodeDeterminant struct {
	_ [0]*methodsVisualShaderNodeDeterminant
	class
}

func (self VisualShaderNodeDeterminant) VisualShaderNode() VisualShaderNode {
	var parent VisualShaderNode
	parent.class = self.class
	return parent
}

type methodsVisualShaderNodeDistanceFade struct {
	_ [0]*methodsVisualShaderNodeDistanceFade
	class
}

func (self VisualShaderNodeDistanceFade) VisualShaderNode() VisualShaderNode {
	var parent VisualShaderNode
	parent.class = self.class
	return parent
}

type methodsVisualShaderNodeDotProduct struct {
	_ [0]*methodsVisualShaderNodeDotProduct
	class
}

func (self VisualShaderNodeDotProduct) VisualShaderNode() VisualShaderNode {
	var parent VisualShaderNode
	parent.class = self.class
	return parent
}

type methodsVisualShaderNodeExpression struct {
	_ [0]*methodsVisualShaderNodeExpression
	class
}

func (self VisualShaderNodeExpression) VisualShaderNodeGroupBase() VisualShaderNodeGroupBase {
	var parent VisualShaderNodeGroupBase
	parent.class = self.class
	return parent
}
func (self methodsVisualShaderNodeExpression) SetExpression(expression string) {
	self.Runtime.VisualShaderNodeExpression_set_expression(VisualShaderNodeExpression{self}, expression)
}
func (self methodsVisualShaderNodeExpression) GetExpression() string {
	return self.Runtime.VisualShaderNodeExpression_get_expression(VisualShaderNodeExpression{self})
}

type methodsVisualShaderNodeFaceForward struct {
	_ [0]*methodsVisualShaderNodeFaceForward
	class
}

func (self VisualShaderNodeFaceForward) VisualShaderNodeVectorBase() VisualShaderNodeVectorBase {
	var parent VisualShaderNodeVectorBase
	parent.class = self.class
	return parent
}

type methodsVisualShaderNodeFloatConstant struct {
	_ [0]*methodsVisualShaderNodeFloatConstant
	class
}

func (self VisualShaderNodeFloatConstant) VisualShaderNodeConstant() VisualShaderNodeConstant {
	var parent VisualShaderNodeConstant
	parent.class = self.class
	return parent
}
func (self methodsVisualShaderNodeFloatConstant) SetConstant(constant Float) {
	self.Runtime.VisualShaderNodeFloatConstant_set_constant(VisualShaderNodeFloatConstant{self}, constant)
}
func (self methodsVisualShaderNodeFloatConstant) GetConstant() Float {
	return self.Runtime.VisualShaderNodeFloatConstant_get_constant(VisualShaderNodeFloatConstant{self})
}

type methodsVisualShaderNodeFloatFunc struct {
	_ [0]*methodsVisualShaderNodeFloatFunc
	class
}

func (self VisualShaderNodeFloatFunc) VisualShaderNode() VisualShaderNode {
	var parent VisualShaderNode
	parent.class = self.class
	return parent
}
func (self methodsVisualShaderNodeFloatFunc) SetFunction(fn VisualShaderNodeFloatFuncFunction) {
	self.Runtime.VisualShaderNodeFloatFunc_set_function(VisualShaderNodeFloatFunc{self}, fn)
}
func (self methodsVisualShaderNodeFloatFunc) GetFunction() VisualShaderNodeFloatFuncFunction {
	return self.Runtime.VisualShaderNodeFloatFunc_get_function(VisualShaderNodeFloatFunc{self})
}

type methodsVisualShaderNodeFloatOp struct {
	_ [0]*methodsVisualShaderNodeFloatOp
	class
}

func (self VisualShaderNodeFloatOp) VisualShaderNode() VisualShaderNode {
	var parent VisualShaderNode
	parent.class = self.class
	return parent
}
func (self methodsVisualShaderNodeFloatOp) SetOperator(op VisualShaderNodeFloatOpOperator) {
	self.Runtime.VisualShaderNodeFloatOp_set_operator(VisualShaderNodeFloatOp{self}, op)
}
func (self methodsVisualShaderNodeFloatOp) GetOperator() VisualShaderNodeFloatOpOperator {
	return self.Runtime.VisualShaderNodeFloatOp_get_operator(VisualShaderNodeFloatOp{self})
}

type methodsVisualShaderNodeFloatParameter struct {
	_ [0]*methodsVisualShaderNodeFloatParameter
	class
}

func (self VisualShaderNodeFloatParameter) VisualShaderNodeParameter() VisualShaderNodeParameter {
	var parent VisualShaderNodeParameter
	parent.class = self.class
	return parent
}
func (self methodsVisualShaderNodeFloatParameter) SetHint(hint VisualShaderNodeFloatParameterHint) {
	self.Runtime.VisualShaderNodeFloatParameter_set_hint(VisualShaderNodeFloatParameter{self}, hint)
}
func (self methodsVisualShaderNodeFloatParameter) GetHint() VisualShaderNodeFloatParameterHint {
	return self.Runtime.VisualShaderNodeFloatParameter_get_hint(VisualShaderNodeFloatParameter{self})
}
func (self methodsVisualShaderNodeFloatParameter) SetMin(value Float) {
	self.Runtime.VisualShaderNodeFloatParameter_set_min(VisualShaderNodeFloatParameter{self}, value)
}
func (self methodsVisualShaderNodeFloatParameter) GetMin() Float {
	return self.Runtime.VisualShaderNodeFloatParameter_get_min(VisualShaderNodeFloatParameter{self})
}
func (self methodsVisualShaderNodeFloatParameter) SetMax(value Float) {
	self.Runtime.VisualShaderNodeFloatParameter_set_max(VisualShaderNodeFloatParameter{self}, value)
}
func (self methodsVisualShaderNodeFloatParameter) GetMax() Float {
	return self.Runtime.VisualShaderNodeFloatParameter_get_max(VisualShaderNodeFloatParameter{self})
}
func (self methodsVisualShaderNodeFloatParameter) SetStep(value Float) {
	self.Runtime.VisualShaderNodeFloatParameter_set_step(VisualShaderNodeFloatParameter{self}, value)
}
func (self methodsVisualShaderNodeFloatParameter) GetStep() Float {
	return self.Runtime.VisualShaderNodeFloatParameter_get_step(VisualShaderNodeFloatParameter{self})
}
func (self methodsVisualShaderNodeFloatParameter) SetDefaultValueEnabled(enabled bool) {
	self.Runtime.VisualShaderNodeFloatParameter_set_default_value_enabled(VisualShaderNodeFloatParameter{self}, enabled)
}
func (self methodsVisualShaderNodeFloatParameter) IsDefaultValueEnabled() bool {
	return self.Runtime.VisualShaderNodeFloatParameter_is_default_value_enabled(VisualShaderNodeFloatParameter{self})
}
func (self methodsVisualShaderNodeFloatParameter) SetDefaultValue(value Float) {
	self.Runtime.VisualShaderNodeFloatParameter_set_default_value(VisualShaderNodeFloatParameter{self}, value)
}
func (self methodsVisualShaderNodeFloatParameter) GetDefaultValue() Float {
	return self.Runtime.VisualShaderNodeFloatParameter_get_default_value(VisualShaderNodeFloatParameter{self})
}

type methodsVisualShaderNodeFresnel struct {
	_ [0]*methodsVisualShaderNodeFresnel
	class
}

func (self VisualShaderNodeFresnel) VisualShaderNode() VisualShaderNode {
	var parent VisualShaderNode
	parent.class = self.class
	return parent
}

type methodsVisualShaderNodeGlobalExpression struct {
	_ [0]*methodsVisualShaderNodeGlobalExpression
	class
}

func (self VisualShaderNodeGlobalExpression) VisualShaderNodeExpression() VisualShaderNodeExpression {
	var parent VisualShaderNodeExpression
	parent.class = self.class
	return parent
}

type methodsVisualShaderNodeGroupBase struct {
	_ [0]*methodsVisualShaderNodeGroupBase
	class
}

func (self VisualShaderNodeGroupBase) VisualShaderNodeResizableBase() VisualShaderNodeResizableBase {
	var parent VisualShaderNodeResizableBase
	parent.class = self.class
	return parent
}
func (self methodsVisualShaderNodeGroupBase) SetInputs(inputs string) {
	self.Runtime.VisualShaderNodeGroupBase_set_inputs(VisualShaderNodeGroupBase{self}, inputs)
}
func (self methodsVisualShaderNodeGroupBase) GetInputs() string {
	return self.Runtime.VisualShaderNodeGroupBase_get_inputs(VisualShaderNodeGroupBase{self})
}
func (self methodsVisualShaderNodeGroupBase) SetOutputs(outputs string) {
	self.Runtime.VisualShaderNodeGroupBase_set_outputs(VisualShaderNodeGroupBase{self}, outputs)
}
func (self methodsVisualShaderNodeGroupBase) GetOutputs() string {
	return self.Runtime.VisualShaderNodeGroupBase_get_outputs(VisualShaderNodeGroupBase{self})
}
func (self methodsVisualShaderNodeGroupBase) IsValidPortName(name string) bool {
	return self.Runtime.VisualShaderNodeGroupBase_is_valid_port_name(VisualShaderNodeGroupBase{self}, name)
}
func (self methodsVisualShaderNodeGroupBase) AddInputPort(id int64, atype int64, name string) {
	self.Runtime.VisualShaderNodeGroupBase_add_input_port(VisualShaderNodeGroupBase{self}, id, atype, name)
}
func (self methodsVisualShaderNodeGroupBase) RemoveInputPort(id int64) {
	self.Runtime.VisualShaderNodeGroupBase_remove_input_port(VisualShaderNodeGroupBase{self}, id)
}
func (self methodsVisualShaderNodeGroupBase) GetInputPortCount() int64 {
	return self.Runtime.VisualShaderNodeGroupBase_get_input_port_count(VisualShaderNodeGroupBase{self})
}
func (self methodsVisualShaderNodeGroupBase) HasInputPort(id int64) bool {
	return self.Runtime.VisualShaderNodeGroupBase_has_input_port(VisualShaderNodeGroupBase{self}, id)
}
func (self methodsVisualShaderNodeGroupBase) ClearInputPorts() {
	self.Runtime.VisualShaderNodeGroupBase_clear_input_ports(VisualShaderNodeGroupBase{self})
}
func (self methodsVisualShaderNodeGroupBase) AddOutputPort(id int64, atype int64, name string) {
	self.Runtime.VisualShaderNodeGroupBase_add_output_port(VisualShaderNodeGroupBase{self}, id, atype, name)
}
func (self methodsVisualShaderNodeGroupBase) RemoveOutputPort(id int64) {
	self.Runtime.VisualShaderNodeGroupBase_remove_output_port(VisualShaderNodeGroupBase{self}, id)
}
func (self methodsVisualShaderNodeGroupBase) GetOutputPortCount() int64 {
	return self.Runtime.VisualShaderNodeGroupBase_get_output_port_count(VisualShaderNodeGroupBase{self})
}
func (self methodsVisualShaderNodeGroupBase) HasOutputPort(id int64) bool {
	return self.Runtime.VisualShaderNodeGroupBase_has_output_port(VisualShaderNodeGroupBase{self}, id)
}
func (self methodsVisualShaderNodeGroupBase) ClearOutputPorts() {
	self.Runtime.VisualShaderNodeGroupBase_clear_output_ports(VisualShaderNodeGroupBase{self})
}
func (self methodsVisualShaderNodeGroupBase) SetInputPortName(id int64, name string) {
	self.Runtime.VisualShaderNodeGroupBase_set_input_port_name(VisualShaderNodeGroupBase{self}, id, name)
}
func (self methodsVisualShaderNodeGroupBase) SetInputPortType(id int64, atype int64) {
	self.Runtime.VisualShaderNodeGroupBase_set_input_port_type(VisualShaderNodeGroupBase{self}, id, atype)
}
func (self methodsVisualShaderNodeGroupBase) SetOutputPortName(id int64, name string) {
	self.Runtime.VisualShaderNodeGroupBase_set_output_port_name(VisualShaderNodeGroupBase{self}, id, name)
}
func (self methodsVisualShaderNodeGroupBase) SetOutputPortType(id int64, atype int64) {
	self.Runtime.VisualShaderNodeGroupBase_set_output_port_type(VisualShaderNodeGroupBase{self}, id, atype)
}
func (self methodsVisualShaderNodeGroupBase) GetFreeInputPortId() int64 {
	return self.Runtime.VisualShaderNodeGroupBase_get_free_input_port_id(VisualShaderNodeGroupBase{self})
}
func (self methodsVisualShaderNodeGroupBase) GetFreeOutputPortId() int64 {
	return self.Runtime.VisualShaderNodeGroupBase_get_free_output_port_id(VisualShaderNodeGroupBase{self})
}

type methodsVisualShaderNodeIf struct {
	_ [0]*methodsVisualShaderNodeIf
	class
}

func (self VisualShaderNodeIf) VisualShaderNode() VisualShaderNode {
	var parent VisualShaderNode
	parent.class = self.class
	return parent
}

type methodsVisualShaderNodeInput struct {
	_ [0]*methodsVisualShaderNodeInput
	class
}

func (self VisualShaderNodeInput) VisualShaderNode() VisualShaderNode {
	var parent VisualShaderNode
	parent.class = self.class
	return parent
}
func (self methodsVisualShaderNodeInput) SetInputName(name string) {
	self.Runtime.VisualShaderNodeInput_set_input_name(VisualShaderNodeInput{self}, name)
}
func (self methodsVisualShaderNodeInput) GetInputName() string {
	return self.Runtime.VisualShaderNodeInput_get_input_name(VisualShaderNodeInput{self})
}
func (self methodsVisualShaderNodeInput) GetInputRealName() string {
	return self.Runtime.VisualShaderNodeInput_get_input_real_name(VisualShaderNodeInput{self})
}

type methodsVisualShaderNodeIntConstant struct {
	_ [0]*methodsVisualShaderNodeIntConstant
	class
}

func (self VisualShaderNodeIntConstant) VisualShaderNodeConstant() VisualShaderNodeConstant {
	var parent VisualShaderNodeConstant
	parent.class = self.class
	return parent
}
func (self methodsVisualShaderNodeIntConstant) SetConstant(constant int64) {
	self.Runtime.VisualShaderNodeIntConstant_set_constant(VisualShaderNodeIntConstant{self}, constant)
}
func (self methodsVisualShaderNodeIntConstant) GetConstant() int64 {
	return self.Runtime.VisualShaderNodeIntConstant_get_constant(VisualShaderNodeIntConstant{self})
}

type methodsVisualShaderNodeIntFunc struct {
	_ [0]*methodsVisualShaderNodeIntFunc
	class
}

func (self VisualShaderNodeIntFunc) VisualShaderNode() VisualShaderNode {
	var parent VisualShaderNode
	parent.class = self.class
	return parent
}
func (self methodsVisualShaderNodeIntFunc) SetFunction(fn VisualShaderNodeIntFuncFunction) {
	self.Runtime.VisualShaderNodeIntFunc_set_function(VisualShaderNodeIntFunc{self}, fn)
}
func (self methodsVisualShaderNodeIntFunc) GetFunction() VisualShaderNodeIntFuncFunction {
	return self.Runtime.VisualShaderNodeIntFunc_get_function(VisualShaderNodeIntFunc{self})
}

type methodsVisualShaderNodeIntOp struct {
	_ [0]*methodsVisualShaderNodeIntOp
	class
}

func (self VisualShaderNodeIntOp) VisualShaderNode() VisualShaderNode {
	var parent VisualShaderNode
	parent.class = self.class
	return parent
}
func (self methodsVisualShaderNodeIntOp) SetOperator(op VisualShaderNodeIntOpOperator) {
	self.Runtime.VisualShaderNodeIntOp_set_operator(VisualShaderNodeIntOp{self}, op)
}
func (self methodsVisualShaderNodeIntOp) GetOperator() VisualShaderNodeIntOpOperator {
	return self.Runtime.VisualShaderNodeIntOp_get_operator(VisualShaderNodeIntOp{self})
}

type methodsVisualShaderNodeIntParameter struct {
	_ [0]*methodsVisualShaderNodeIntParameter
	class
}

func (self VisualShaderNodeIntParameter) VisualShaderNodeParameter() VisualShaderNodeParameter {
	var parent VisualShaderNodeParameter
	parent.class = self.class
	return parent
}
func (self methodsVisualShaderNodeIntParameter) SetHint(hint VisualShaderNodeIntParameterHint) {
	self.Runtime.VisualShaderNodeIntParameter_set_hint(VisualShaderNodeIntParameter{self}, hint)
}
func (self methodsVisualShaderNodeIntParameter) GetHint() VisualShaderNodeIntParameterHint {
	return self.Runtime.VisualShaderNodeIntParameter_get_hint(VisualShaderNodeIntParameter{self})
}
func (self methodsVisualShaderNodeIntParameter) SetMin(value int64) {
	self.Runtime.VisualShaderNodeIntParameter_set_min(VisualShaderNodeIntParameter{self}, value)
}
func (self methodsVisualShaderNodeIntParameter) GetMin() int64 {
	return self.Runtime.VisualShaderNodeIntParameter_get_min(VisualShaderNodeIntParameter{self})
}
func (self methodsVisualShaderNodeIntParameter) SetMax(value int64) {
	self.Runtime.VisualShaderNodeIntParameter_set_max(VisualShaderNodeIntParameter{self}, value)
}
func (self methodsVisualShaderNodeIntParameter) GetMax() int64 {
	return self.Runtime.VisualShaderNodeIntParameter_get_max(VisualShaderNodeIntParameter{self})
}
func (self methodsVisualShaderNodeIntParameter) SetStep(value int64) {
	self.Runtime.VisualShaderNodeIntParameter_set_step(VisualShaderNodeIntParameter{self}, value)
}
func (self methodsVisualShaderNodeIntParameter) GetStep() int64 {
	return self.Runtime.VisualShaderNodeIntParameter_get_step(VisualShaderNodeIntParameter{self})
}
func (self methodsVisualShaderNodeIntParameter) SetDefaultValueEnabled(enabled bool) {
	self.Runtime.VisualShaderNodeIntParameter_set_default_value_enabled(VisualShaderNodeIntParameter{self}, enabled)
}
func (self methodsVisualShaderNodeIntParameter) IsDefaultValueEnabled() bool {
	return self.Runtime.VisualShaderNodeIntParameter_is_default_value_enabled(VisualShaderNodeIntParameter{self})
}
func (self methodsVisualShaderNodeIntParameter) SetDefaultValue(value int64) {
	self.Runtime.VisualShaderNodeIntParameter_set_default_value(VisualShaderNodeIntParameter{self}, value)
}
func (self methodsVisualShaderNodeIntParameter) GetDefaultValue() int64 {
	return self.Runtime.VisualShaderNodeIntParameter_get_default_value(VisualShaderNodeIntParameter{self})
}

type methodsVisualShaderNodeIs struct {
	_ [0]*methodsVisualShaderNodeIs
	class
}

func (self VisualShaderNodeIs) VisualShaderNode() VisualShaderNode {
	var parent VisualShaderNode
	parent.class = self.class
	return parent
}
func (self methodsVisualShaderNodeIs) SetFunction(fn VisualShaderNodeIsFunction) {
	self.Runtime.VisualShaderNodeIs_set_function(VisualShaderNodeIs{self}, fn)
}
func (self methodsVisualShaderNodeIs) GetFunction() VisualShaderNodeIsFunction {
	return self.Runtime.VisualShaderNodeIs_get_function(VisualShaderNodeIs{self})
}

type methodsVisualShaderNodeLinearSceneDepth struct {
	_ [0]*methodsVisualShaderNodeLinearSceneDepth
	class
}

func (self VisualShaderNodeLinearSceneDepth) VisualShaderNode() VisualShaderNode {
	var parent VisualShaderNode
	parent.class = self.class
	return parent
}

type methodsVisualShaderNodeMix struct {
	_ [0]*methodsVisualShaderNodeMix
	class
}

func (self VisualShaderNodeMix) VisualShaderNode() VisualShaderNode {
	var parent VisualShaderNode
	parent.class = self.class
	return parent
}
func (self methodsVisualShaderNodeMix) SetOpType(op_type VisualShaderNodeMixOpType) {
	self.Runtime.VisualShaderNodeMix_set_op_type(VisualShaderNodeMix{self}, op_type)
}
func (self methodsVisualShaderNodeMix) GetOpType() VisualShaderNodeMixOpType {
	return self.Runtime.VisualShaderNodeMix_get_op_type(VisualShaderNodeMix{self})
}

type methodsVisualShaderNodeMultiplyAdd struct {
	_ [0]*methodsVisualShaderNodeMultiplyAdd
	class
}

func (self VisualShaderNodeMultiplyAdd) VisualShaderNode() VisualShaderNode {
	var parent VisualShaderNode
	parent.class = self.class
	return parent
}
func (self methodsVisualShaderNodeMultiplyAdd) SetOpType(atype VisualShaderNodeMultiplyAddOpType) {
	self.Runtime.VisualShaderNodeMultiplyAdd_set_op_type(VisualShaderNodeMultiplyAdd{self}, atype)
}
func (self methodsVisualShaderNodeMultiplyAdd) GetOpType() VisualShaderNodeMultiplyAddOpType {
	return self.Runtime.VisualShaderNodeMultiplyAdd_get_op_type(VisualShaderNodeMultiplyAdd{self})
}

type methodsVisualShaderNodeOuterProduct struct {
	_ [0]*methodsVisualShaderNodeOuterProduct
	class
}

func (self VisualShaderNodeOuterProduct) VisualShaderNode() VisualShaderNode {
	var parent VisualShaderNode
	parent.class = self.class
	return parent
}

type methodsVisualShaderNodeOutput struct {
	_ [0]*methodsVisualShaderNodeOutput
	class
}

func (self VisualShaderNodeOutput) VisualShaderNode() VisualShaderNode {
	var parent VisualShaderNode
	parent.class = self.class
	return parent
}

type methodsVisualShaderNodeParameter struct {
	_ [0]*methodsVisualShaderNodeParameter
	class
}

func (self VisualShaderNodeParameter) VisualShaderNode() VisualShaderNode {
	var parent VisualShaderNode
	parent.class = self.class
	return parent
}
func (self methodsVisualShaderNodeParameter) SetParameterName(name string) {
	self.Runtime.VisualShaderNodeParameter_set_parameter_name(VisualShaderNodeParameter{self}, name)
}
func (self methodsVisualShaderNodeParameter) GetParameterName() string {
	return self.Runtime.VisualShaderNodeParameter_get_parameter_name(VisualShaderNodeParameter{self})
}
func (self methodsVisualShaderNodeParameter) SetQualifier(qualifier VisualShaderNodeParameterQualifier) {
	self.Runtime.VisualShaderNodeParameter_set_qualifier(VisualShaderNodeParameter{self}, qualifier)
}
func (self methodsVisualShaderNodeParameter) GetQualifier() VisualShaderNodeParameterQualifier {
	return self.Runtime.VisualShaderNodeParameter_get_qualifier(VisualShaderNodeParameter{self})
}

type methodsVisualShaderNodeParameterRef struct {
	_ [0]*methodsVisualShaderNodeParameterRef
	class
}

func (self VisualShaderNodeParameterRef) VisualShaderNode() VisualShaderNode {
	var parent VisualShaderNode
	parent.class = self.class
	return parent
}
func (self methodsVisualShaderNodeParameterRef) SetParameterName(name string) {
	self.Runtime.VisualShaderNodeParameterRef_set_parameter_name(VisualShaderNodeParameterRef{self}, name)
}
func (self methodsVisualShaderNodeParameterRef) GetParameterName() string {
	return self.Runtime.VisualShaderNodeParameterRef_get_parameter_name(VisualShaderNodeParameterRef{self})
}

type methodsVisualShaderNodeParticleAccelerator struct {
	_ [0]*methodsVisualShaderNodeParticleAccelerator
	class
}

func (self VisualShaderNodeParticleAccelerator) VisualShaderNode() VisualShaderNode {
	var parent VisualShaderNode
	parent.class = self.class
	return parent
}
func (self methodsVisualShaderNodeParticleAccelerator) SetMode(mode VisualShaderNodeParticleAcceleratorMode) {
	self.Runtime.VisualShaderNodeParticleAccelerator_set_mode(VisualShaderNodeParticleAccelerator{self}, mode)
}
func (self methodsVisualShaderNodeParticleAccelerator) GetMode() VisualShaderNodeParticleAcceleratorMode {
	return self.Runtime.VisualShaderNodeParticleAccelerator_get_mode(VisualShaderNodeParticleAccelerator{self})
}

type methodsVisualShaderNodeParticleBoxEmitter struct {
	_ [0]*methodsVisualShaderNodeParticleBoxEmitter
	class
}

func (self VisualShaderNodeParticleBoxEmitter) VisualShaderNodeParticleEmitter() VisualShaderNodeParticleEmitter {
	var parent VisualShaderNodeParticleEmitter
	parent.class = self.class
	return parent
}

type methodsVisualShaderNodeParticleConeVelocity struct {
	_ [0]*methodsVisualShaderNodeParticleConeVelocity
	class
}

func (self VisualShaderNodeParticleConeVelocity) VisualShaderNode() VisualShaderNode {
	var parent VisualShaderNode
	parent.class = self.class
	return parent
}

type methodsVisualShaderNodeParticleEmit struct {
	_ [0]*methodsVisualShaderNodeParticleEmit
	class
}

func (self VisualShaderNodeParticleEmit) VisualShaderNode() VisualShaderNode {
	var parent VisualShaderNode
	parent.class = self.class
	return parent
}
func (self methodsVisualShaderNodeParticleEmit) SetFlags(flags VisualShaderNodeParticleEmitEmitFlags) {
	self.Runtime.VisualShaderNodeParticleEmit_set_flags(VisualShaderNodeParticleEmit{self}, flags)
}
func (self methodsVisualShaderNodeParticleEmit) GetFlags() VisualShaderNodeParticleEmitEmitFlags {
	return self.Runtime.VisualShaderNodeParticleEmit_get_flags(VisualShaderNodeParticleEmit{self})
}

type methodsVisualShaderNodeParticleEmitter struct {
	_ [0]*methodsVisualShaderNodeParticleEmitter
	class
}

func (self VisualShaderNodeParticleEmitter) VisualShaderNode() VisualShaderNode {
	var parent VisualShaderNode
	parent.class = self.class
	return parent
}
func (self methodsVisualShaderNodeParticleEmitter) SetMode2d(enabled bool) {
	self.Runtime.VisualShaderNodeParticleEmitter_set_mode_2d(VisualShaderNodeParticleEmitter{self}, enabled)
}
func (self methodsVisualShaderNodeParticleEmitter) IsMode2d() bool {
	return self.Runtime.VisualShaderNodeParticleEmitter_is_mode_2d(VisualShaderNodeParticleEmitter{self})
}

type methodsVisualShaderNodeParticleMeshEmitter struct {
	_ [0]*methodsVisualShaderNodeParticleMeshEmitter
	class
}

func (self VisualShaderNodeParticleMeshEmitter) VisualShaderNodeParticleEmitter() VisualShaderNodeParticleEmitter {
	var parent VisualShaderNodeParticleEmitter
	parent.class = self.class
	return parent
}
func (self methodsVisualShaderNodeParticleMeshEmitter) SetMesh(mesh Mesh) {
	self.Runtime.VisualShaderNodeParticleMeshEmitter_set_mesh(VisualShaderNodeParticleMeshEmitter{self}, mesh)
}
func (self methodsVisualShaderNodeParticleMeshEmitter) GetMesh() Mesh {
	return self.Runtime.VisualShaderNodeParticleMeshEmitter_get_mesh(VisualShaderNodeParticleMeshEmitter{self})
}
func (self methodsVisualShaderNodeParticleMeshEmitter) SetUseAllSurfaces(enabled bool) {
	self.Runtime.VisualShaderNodeParticleMeshEmitter_set_use_all_surfaces(VisualShaderNodeParticleMeshEmitter{self}, enabled)
}
func (self methodsVisualShaderNodeParticleMeshEmitter) IsUseAllSurfaces() bool {
	return self.Runtime.VisualShaderNodeParticleMeshEmitter_is_use_all_surfaces(VisualShaderNodeParticleMeshEmitter{self})
}
func (self methodsVisualShaderNodeParticleMeshEmitter) SetSurfaceIndex(surface_index int64) {
	self.Runtime.VisualShaderNodeParticleMeshEmitter_set_surface_index(VisualShaderNodeParticleMeshEmitter{self}, surface_index)
}
func (self methodsVisualShaderNodeParticleMeshEmitter) GetSurfaceIndex() int64 {
	return self.Runtime.VisualShaderNodeParticleMeshEmitter_get_surface_index(VisualShaderNodeParticleMeshEmitter{self})
}

type methodsVisualShaderNodeParticleMultiplyByAxisAngle struct {
	_ [0]*methodsVisualShaderNodeParticleMultiplyByAxisAngle
	class
}

func (self VisualShaderNodeParticleMultiplyByAxisAngle) VisualShaderNode() VisualShaderNode {
	var parent VisualShaderNode
	parent.class = self.class
	return parent
}
func (self methodsVisualShaderNodeParticleMultiplyByAxisAngle) SetDegreesMode(enabled bool) {
	self.Runtime.VisualShaderNodeParticleMultiplyByAxisAngle_set_degrees_mode(VisualShaderNodeParticleMultiplyByAxisAngle{self}, enabled)
}
func (self methodsVisualShaderNodeParticleMultiplyByAxisAngle) IsDegreesMode() bool {
	return self.Runtime.VisualShaderNodeParticleMultiplyByAxisAngle_is_degrees_mode(VisualShaderNodeParticleMultiplyByAxisAngle{self})
}

type methodsVisualShaderNodeParticleOutput struct {
	_ [0]*methodsVisualShaderNodeParticleOutput
	class
}

func (self VisualShaderNodeParticleOutput) VisualShaderNodeOutput() VisualShaderNodeOutput {
	var parent VisualShaderNodeOutput
	parent.class = self.class
	return parent
}

type methodsVisualShaderNodeParticleRandomness struct {
	_ [0]*methodsVisualShaderNodeParticleRandomness
	class
}

func (self VisualShaderNodeParticleRandomness) VisualShaderNode() VisualShaderNode {
	var parent VisualShaderNode
	parent.class = self.class
	return parent
}
func (self methodsVisualShaderNodeParticleRandomness) SetOpType(atype VisualShaderNodeParticleRandomnessOpType) {
	self.Runtime.VisualShaderNodeParticleRandomness_set_op_type(VisualShaderNodeParticleRandomness{self}, atype)
}
func (self methodsVisualShaderNodeParticleRandomness) GetOpType() VisualShaderNodeParticleRandomnessOpType {
	return self.Runtime.VisualShaderNodeParticleRandomness_get_op_type(VisualShaderNodeParticleRandomness{self})
}

type methodsVisualShaderNodeParticleRingEmitter struct {
	_ [0]*methodsVisualShaderNodeParticleRingEmitter
	class
}

func (self VisualShaderNodeParticleRingEmitter) VisualShaderNodeParticleEmitter() VisualShaderNodeParticleEmitter {
	var parent VisualShaderNodeParticleEmitter
	parent.class = self.class
	return parent
}

type methodsVisualShaderNodeParticleSphereEmitter struct {
	_ [0]*methodsVisualShaderNodeParticleSphereEmitter
	class
}

func (self VisualShaderNodeParticleSphereEmitter) VisualShaderNodeParticleEmitter() VisualShaderNodeParticleEmitter {
	var parent VisualShaderNodeParticleEmitter
	parent.class = self.class
	return parent
}

type methodsVisualShaderNodeProximityFade struct {
	_ [0]*methodsVisualShaderNodeProximityFade
	class
}

func (self VisualShaderNodeProximityFade) VisualShaderNode() VisualShaderNode {
	var parent VisualShaderNode
	parent.class = self.class
	return parent
}

type methodsVisualShaderNodeRandomRange struct {
	_ [0]*methodsVisualShaderNodeRandomRange
	class
}

func (self VisualShaderNodeRandomRange) VisualShaderNode() VisualShaderNode {
	var parent VisualShaderNode
	parent.class = self.class
	return parent
}

type methodsVisualShaderNodeRemap struct {
	_ [0]*methodsVisualShaderNodeRemap
	class
}

func (self VisualShaderNodeRemap) VisualShaderNode() VisualShaderNode {
	var parent VisualShaderNode
	parent.class = self.class
	return parent
}

type methodsVisualShaderNodeResizableBase struct {
	_ [0]*methodsVisualShaderNodeResizableBase
	class
}

func (self VisualShaderNodeResizableBase) VisualShaderNode() VisualShaderNode {
	var parent VisualShaderNode
	parent.class = self.class
	return parent
}
func (self methodsVisualShaderNodeResizableBase) SetSize(size Vector2) {
	self.Runtime.VisualShaderNodeResizableBase_set_size(VisualShaderNodeResizableBase{self}, size)
}
func (self methodsVisualShaderNodeResizableBase) GetSize() Vector2 {
	return self.Runtime.VisualShaderNodeResizableBase_get_size(VisualShaderNodeResizableBase{self})
}

type methodsVisualShaderNodeRotationByAxis struct {
	_ [0]*methodsVisualShaderNodeRotationByAxis
	class
}

func (self VisualShaderNodeRotationByAxis) VisualShaderNode() VisualShaderNode {
	var parent VisualShaderNode
	parent.class = self.class
	return parent
}

type methodsVisualShaderNodeSDFRaymarch struct {
	_ [0]*methodsVisualShaderNodeSDFRaymarch
	class
}

func (self VisualShaderNodeSDFRaymarch) VisualShaderNode() VisualShaderNode {
	var parent VisualShaderNode
	parent.class = self.class
	return parent
}

type methodsVisualShaderNodeSDFToScreenUV struct {
	_ [0]*methodsVisualShaderNodeSDFToScreenUV
	class
}

func (self VisualShaderNodeSDFToScreenUV) VisualShaderNode() VisualShaderNode {
	var parent VisualShaderNode
	parent.class = self.class
	return parent
}

type methodsVisualShaderNodeSample3D struct {
	_ [0]*methodsVisualShaderNodeSample3D
	class
}

func (self VisualShaderNodeSample3D) VisualShaderNode() VisualShaderNode {
	var parent VisualShaderNode
	parent.class = self.class
	return parent
}
func (self methodsVisualShaderNodeSample3D) SetSource(value VisualShaderNodeSample3DSource) {
	self.Runtime.VisualShaderNodeSample3D_set_source(VisualShaderNodeSample3D{self}, value)
}
func (self methodsVisualShaderNodeSample3D) GetSource() VisualShaderNodeSample3DSource {
	return self.Runtime.VisualShaderNodeSample3D_get_source(VisualShaderNodeSample3D{self})
}

type methodsVisualShaderNodeScreenNormalWorldSpace struct {
	_ [0]*methodsVisualShaderNodeScreenNormalWorldSpace
	class
}

func (self VisualShaderNodeScreenNormalWorldSpace) VisualShaderNode() VisualShaderNode {
	var parent VisualShaderNode
	parent.class = self.class
	return parent
}

type methodsVisualShaderNodeScreenUVToSDF struct {
	_ [0]*methodsVisualShaderNodeScreenUVToSDF
	class
}

func (self VisualShaderNodeScreenUVToSDF) VisualShaderNode() VisualShaderNode {
	var parent VisualShaderNode
	parent.class = self.class
	return parent
}

type methodsVisualShaderNodeSmoothStep struct {
	_ [0]*methodsVisualShaderNodeSmoothStep
	class
}

func (self VisualShaderNodeSmoothStep) VisualShaderNode() VisualShaderNode {
	var parent VisualShaderNode
	parent.class = self.class
	return parent
}
func (self methodsVisualShaderNodeSmoothStep) SetOpType(op_type VisualShaderNodeSmoothStepOpType) {
	self.Runtime.VisualShaderNodeSmoothStep_set_op_type(VisualShaderNodeSmoothStep{self}, op_type)
}
func (self methodsVisualShaderNodeSmoothStep) GetOpType() VisualShaderNodeSmoothStepOpType {
	return self.Runtime.VisualShaderNodeSmoothStep_get_op_type(VisualShaderNodeSmoothStep{self})
}

type methodsVisualShaderNodeStep struct {
	_ [0]*methodsVisualShaderNodeStep
	class
}

func (self VisualShaderNodeStep) VisualShaderNode() VisualShaderNode {
	var parent VisualShaderNode
	parent.class = self.class
	return parent
}
func (self methodsVisualShaderNodeStep) SetOpType(op_type VisualShaderNodeStepOpType) {
	self.Runtime.VisualShaderNodeStep_set_op_type(VisualShaderNodeStep{self}, op_type)
}
func (self methodsVisualShaderNodeStep) GetOpType() VisualShaderNodeStepOpType {
	return self.Runtime.VisualShaderNodeStep_get_op_type(VisualShaderNodeStep{self})
}

type methodsVisualShaderNodeSwitch struct {
	_ [0]*methodsVisualShaderNodeSwitch
	class
}

func (self VisualShaderNodeSwitch) VisualShaderNode() VisualShaderNode {
	var parent VisualShaderNode
	parent.class = self.class
	return parent
}
func (self methodsVisualShaderNodeSwitch) SetOpType(atype VisualShaderNodeSwitchOpType) {
	self.Runtime.VisualShaderNodeSwitch_set_op_type(VisualShaderNodeSwitch{self}, atype)
}
func (self methodsVisualShaderNodeSwitch) GetOpType() VisualShaderNodeSwitchOpType {
	return self.Runtime.VisualShaderNodeSwitch_get_op_type(VisualShaderNodeSwitch{self})
}

type methodsVisualShaderNodeTexture struct {
	_ [0]*methodsVisualShaderNodeTexture
	class
}

func (self VisualShaderNodeTexture) VisualShaderNode() VisualShaderNode {
	var parent VisualShaderNode
	parent.class = self.class
	return parent
}
func (self methodsVisualShaderNodeTexture) SetSource(value VisualShaderNodeTextureSource) {
	self.Runtime.VisualShaderNodeTexture_set_source(VisualShaderNodeTexture{self}, value)
}
func (self methodsVisualShaderNodeTexture) GetSource() VisualShaderNodeTextureSource {
	return self.Runtime.VisualShaderNodeTexture_get_source(VisualShaderNodeTexture{self})
}
func (self methodsVisualShaderNodeTexture) SetTexture(value Texture2D) {
	self.Runtime.VisualShaderNodeTexture_set_texture(VisualShaderNodeTexture{self}, value)
}
func (self methodsVisualShaderNodeTexture) GetTexture() Texture2D {
	return self.Runtime.VisualShaderNodeTexture_get_texture(VisualShaderNodeTexture{self})
}
func (self methodsVisualShaderNodeTexture) SetTextureType(value VisualShaderNodeTextureTextureType) {
	self.Runtime.VisualShaderNodeTexture_set_texture_type(VisualShaderNodeTexture{self}, value)
}
func (self methodsVisualShaderNodeTexture) GetTextureType() VisualShaderNodeTextureTextureType {
	return self.Runtime.VisualShaderNodeTexture_get_texture_type(VisualShaderNodeTexture{self})
}

type methodsVisualShaderNodeTexture2DArray struct {
	_ [0]*methodsVisualShaderNodeTexture2DArray
	class
}

func (self VisualShaderNodeTexture2DArray) VisualShaderNodeSample3D() VisualShaderNodeSample3D {
	var parent VisualShaderNodeSample3D
	parent.class = self.class
	return parent
}
func (self methodsVisualShaderNodeTexture2DArray) SetTextureArray(value Texture2DArray) {
	self.Runtime.VisualShaderNodeTexture2DArray_set_texture_array(VisualShaderNodeTexture2DArray{self}, value)
}
func (self methodsVisualShaderNodeTexture2DArray) GetTextureArray() Texture2DArray {
	return self.Runtime.VisualShaderNodeTexture2DArray_get_texture_array(VisualShaderNodeTexture2DArray{self})
}

type methodsVisualShaderNodeTexture2DArrayParameter struct {
	_ [0]*methodsVisualShaderNodeTexture2DArrayParameter
	class
}

func (self VisualShaderNodeTexture2DArrayParameter) VisualShaderNodeTextureParameter() VisualShaderNodeTextureParameter {
	var parent VisualShaderNodeTextureParameter
	parent.class = self.class
	return parent
}

type methodsVisualShaderNodeTexture2DParameter struct {
	_ [0]*methodsVisualShaderNodeTexture2DParameter
	class
}

func (self VisualShaderNodeTexture2DParameter) VisualShaderNodeTextureParameter() VisualShaderNodeTextureParameter {
	var parent VisualShaderNodeTextureParameter
	parent.class = self.class
	return parent
}

type methodsVisualShaderNodeTexture3D struct {
	_ [0]*methodsVisualShaderNodeTexture3D
	class
}

func (self VisualShaderNodeTexture3D) VisualShaderNodeSample3D() VisualShaderNodeSample3D {
	var parent VisualShaderNodeSample3D
	parent.class = self.class
	return parent
}
func (self methodsVisualShaderNodeTexture3D) SetTexture(value Texture3D) {
	self.Runtime.VisualShaderNodeTexture3D_set_texture(VisualShaderNodeTexture3D{self}, value)
}
func (self methodsVisualShaderNodeTexture3D) GetTexture() Texture3D {
	return self.Runtime.VisualShaderNodeTexture3D_get_texture(VisualShaderNodeTexture3D{self})
}

type methodsVisualShaderNodeTexture3DParameter struct {
	_ [0]*methodsVisualShaderNodeTexture3DParameter
	class
}

func (self VisualShaderNodeTexture3DParameter) VisualShaderNodeTextureParameter() VisualShaderNodeTextureParameter {
	var parent VisualShaderNodeTextureParameter
	parent.class = self.class
	return parent
}

type methodsVisualShaderNodeTextureParameter struct {
	_ [0]*methodsVisualShaderNodeTextureParameter
	class
}

func (self VisualShaderNodeTextureParameter) VisualShaderNodeParameter() VisualShaderNodeParameter {
	var parent VisualShaderNodeParameter
	parent.class = self.class
	return parent
}
func (self methodsVisualShaderNodeTextureParameter) SetTextureType(atype VisualShaderNodeTextureParameterTextureType) {
	self.Runtime.VisualShaderNodeTextureParameter_set_texture_type(VisualShaderNodeTextureParameter{self}, atype)
}
func (self methodsVisualShaderNodeTextureParameter) GetTextureType() VisualShaderNodeTextureParameterTextureType {
	return self.Runtime.VisualShaderNodeTextureParameter_get_texture_type(VisualShaderNodeTextureParameter{self})
}
func (self methodsVisualShaderNodeTextureParameter) SetColorDefault(color VisualShaderNodeTextureParameterColorDefault) {
	self.Runtime.VisualShaderNodeTextureParameter_set_color_default(VisualShaderNodeTextureParameter{self}, color)
}
func (self methodsVisualShaderNodeTextureParameter) GetColorDefault() VisualShaderNodeTextureParameterColorDefault {
	return self.Runtime.VisualShaderNodeTextureParameter_get_color_default(VisualShaderNodeTextureParameter{self})
}
func (self methodsVisualShaderNodeTextureParameter) SetTextureFilter(filter VisualShaderNodeTextureParameterTextureFilter) {
	self.Runtime.VisualShaderNodeTextureParameter_set_texture_filter(VisualShaderNodeTextureParameter{self}, filter)
}
func (self methodsVisualShaderNodeTextureParameter) GetTextureFilter() VisualShaderNodeTextureParameterTextureFilter {
	return self.Runtime.VisualShaderNodeTextureParameter_get_texture_filter(VisualShaderNodeTextureParameter{self})
}
func (self methodsVisualShaderNodeTextureParameter) SetTextureRepeat(repeat VisualShaderNodeTextureParameterTextureRepeat) {
	self.Runtime.VisualShaderNodeTextureParameter_set_texture_repeat(VisualShaderNodeTextureParameter{self}, repeat)
}
func (self methodsVisualShaderNodeTextureParameter) GetTextureRepeat() VisualShaderNodeTextureParameterTextureRepeat {
	return self.Runtime.VisualShaderNodeTextureParameter_get_texture_repeat(VisualShaderNodeTextureParameter{self})
}
func (self methodsVisualShaderNodeTextureParameter) SetTextureSource(source VisualShaderNodeTextureParameterTextureSource) {
	self.Runtime.VisualShaderNodeTextureParameter_set_texture_source(VisualShaderNodeTextureParameter{self}, source)
}
func (self methodsVisualShaderNodeTextureParameter) GetTextureSource() VisualShaderNodeTextureParameterTextureSource {
	return self.Runtime.VisualShaderNodeTextureParameter_get_texture_source(VisualShaderNodeTextureParameter{self})
}

type methodsVisualShaderNodeTextureParameterTriplanar struct {
	_ [0]*methodsVisualShaderNodeTextureParameterTriplanar
	class
}

func (self VisualShaderNodeTextureParameterTriplanar) VisualShaderNodeTextureParameter() VisualShaderNodeTextureParameter {
	var parent VisualShaderNodeTextureParameter
	parent.class = self.class
	return parent
}

type methodsVisualShaderNodeTextureSDF struct {
	_ [0]*methodsVisualShaderNodeTextureSDF
	class
}

func (self VisualShaderNodeTextureSDF) VisualShaderNode() VisualShaderNode {
	var parent VisualShaderNode
	parent.class = self.class
	return parent
}

type methodsVisualShaderNodeTextureSDFNormal struct {
	_ [0]*methodsVisualShaderNodeTextureSDFNormal
	class
}

func (self VisualShaderNodeTextureSDFNormal) VisualShaderNode() VisualShaderNode {
	var parent VisualShaderNode
	parent.class = self.class
	return parent
}

type methodsVisualShaderNodeTransformCompose struct {
	_ [0]*methodsVisualShaderNodeTransformCompose
	class
}

func (self VisualShaderNodeTransformCompose) VisualShaderNode() VisualShaderNode {
	var parent VisualShaderNode
	parent.class = self.class
	return parent
}

type methodsVisualShaderNodeTransformConstant struct {
	_ [0]*methodsVisualShaderNodeTransformConstant
	class
}

func (self VisualShaderNodeTransformConstant) VisualShaderNodeConstant() VisualShaderNodeConstant {
	var parent VisualShaderNodeConstant
	parent.class = self.class
	return parent
}
func (self methodsVisualShaderNodeTransformConstant) SetConstant(constant Transform3D) {
	self.Runtime.VisualShaderNodeTransformConstant_set_constant(VisualShaderNodeTransformConstant{self}, constant)
}
func (self methodsVisualShaderNodeTransformConstant) GetConstant() Transform3D {
	return self.Runtime.VisualShaderNodeTransformConstant_get_constant(VisualShaderNodeTransformConstant{self})
}

type methodsVisualShaderNodeTransformDecompose struct {
	_ [0]*methodsVisualShaderNodeTransformDecompose
	class
}

func (self VisualShaderNodeTransformDecompose) VisualShaderNode() VisualShaderNode {
	var parent VisualShaderNode
	parent.class = self.class
	return parent
}

type methodsVisualShaderNodeTransformFunc struct {
	_ [0]*methodsVisualShaderNodeTransformFunc
	class
}

func (self VisualShaderNodeTransformFunc) VisualShaderNode() VisualShaderNode {
	var parent VisualShaderNode
	parent.class = self.class
	return parent
}
func (self methodsVisualShaderNodeTransformFunc) SetFunction(fn VisualShaderNodeTransformFuncFunction) {
	self.Runtime.VisualShaderNodeTransformFunc_set_function(VisualShaderNodeTransformFunc{self}, fn)
}
func (self methodsVisualShaderNodeTransformFunc) GetFunction() VisualShaderNodeTransformFuncFunction {
	return self.Runtime.VisualShaderNodeTransformFunc_get_function(VisualShaderNodeTransformFunc{self})
}

type methodsVisualShaderNodeTransformOp struct {
	_ [0]*methodsVisualShaderNodeTransformOp
	class
}

func (self VisualShaderNodeTransformOp) VisualShaderNode() VisualShaderNode {
	var parent VisualShaderNode
	parent.class = self.class
	return parent
}
func (self methodsVisualShaderNodeTransformOp) SetOperator(op VisualShaderNodeTransformOpOperator) {
	self.Runtime.VisualShaderNodeTransformOp_set_operator(VisualShaderNodeTransformOp{self}, op)
}
func (self methodsVisualShaderNodeTransformOp) GetOperator() VisualShaderNodeTransformOpOperator {
	return self.Runtime.VisualShaderNodeTransformOp_get_operator(VisualShaderNodeTransformOp{self})
}

type methodsVisualShaderNodeTransformParameter struct {
	_ [0]*methodsVisualShaderNodeTransformParameter
	class
}

func (self VisualShaderNodeTransformParameter) VisualShaderNodeParameter() VisualShaderNodeParameter {
	var parent VisualShaderNodeParameter
	parent.class = self.class
	return parent
}
func (self methodsVisualShaderNodeTransformParameter) SetDefaultValueEnabled(enabled bool) {
	self.Runtime.VisualShaderNodeTransformParameter_set_default_value_enabled(VisualShaderNodeTransformParameter{self}, enabled)
}
func (self methodsVisualShaderNodeTransformParameter) IsDefaultValueEnabled() bool {
	return self.Runtime.VisualShaderNodeTransformParameter_is_default_value_enabled(VisualShaderNodeTransformParameter{self})
}
func (self methodsVisualShaderNodeTransformParameter) SetDefaultValue(value Transform3D) {
	self.Runtime.VisualShaderNodeTransformParameter_set_default_value(VisualShaderNodeTransformParameter{self}, value)
}
func (self methodsVisualShaderNodeTransformParameter) GetDefaultValue() Transform3D {
	return self.Runtime.VisualShaderNodeTransformParameter_get_default_value(VisualShaderNodeTransformParameter{self})
}

type methodsVisualShaderNodeTransformVecMult struct {
	_ [0]*methodsVisualShaderNodeTransformVecMult
	class
}

func (self VisualShaderNodeTransformVecMult) VisualShaderNode() VisualShaderNode {
	var parent VisualShaderNode
	parent.class = self.class
	return parent
}
func (self methodsVisualShaderNodeTransformVecMult) SetOperator(op VisualShaderNodeTransformVecMultOperator) {
	self.Runtime.VisualShaderNodeTransformVecMult_set_operator(VisualShaderNodeTransformVecMult{self}, op)
}
func (self methodsVisualShaderNodeTransformVecMult) GetOperator() VisualShaderNodeTransformVecMultOperator {
	return self.Runtime.VisualShaderNodeTransformVecMult_get_operator(VisualShaderNodeTransformVecMult{self})
}

type methodsVisualShaderNodeUIntConstant struct {
	_ [0]*methodsVisualShaderNodeUIntConstant
	class
}

func (self VisualShaderNodeUIntConstant) VisualShaderNodeConstant() VisualShaderNodeConstant {
	var parent VisualShaderNodeConstant
	parent.class = self.class
	return parent
}
func (self methodsVisualShaderNodeUIntConstant) SetConstant(constant int64) {
	self.Runtime.VisualShaderNodeUIntConstant_set_constant(VisualShaderNodeUIntConstant{self}, constant)
}
func (self methodsVisualShaderNodeUIntConstant) GetConstant() int64 {
	return self.Runtime.VisualShaderNodeUIntConstant_get_constant(VisualShaderNodeUIntConstant{self})
}

type methodsVisualShaderNodeUIntFunc struct {
	_ [0]*methodsVisualShaderNodeUIntFunc
	class
}

func (self VisualShaderNodeUIntFunc) VisualShaderNode() VisualShaderNode {
	var parent VisualShaderNode
	parent.class = self.class
	return parent
}
func (self methodsVisualShaderNodeUIntFunc) SetFunction(fn VisualShaderNodeUIntFuncFunction) {
	self.Runtime.VisualShaderNodeUIntFunc_set_function(VisualShaderNodeUIntFunc{self}, fn)
}
func (self methodsVisualShaderNodeUIntFunc) GetFunction() VisualShaderNodeUIntFuncFunction {
	return self.Runtime.VisualShaderNodeUIntFunc_get_function(VisualShaderNodeUIntFunc{self})
}

type methodsVisualShaderNodeUIntOp struct {
	_ [0]*methodsVisualShaderNodeUIntOp
	class
}

func (self VisualShaderNodeUIntOp) VisualShaderNode() VisualShaderNode {
	var parent VisualShaderNode
	parent.class = self.class
	return parent
}
func (self methodsVisualShaderNodeUIntOp) SetOperator(op VisualShaderNodeUIntOpOperator) {
	self.Runtime.VisualShaderNodeUIntOp_set_operator(VisualShaderNodeUIntOp{self}, op)
}
func (self methodsVisualShaderNodeUIntOp) GetOperator() VisualShaderNodeUIntOpOperator {
	return self.Runtime.VisualShaderNodeUIntOp_get_operator(VisualShaderNodeUIntOp{self})
}

type methodsVisualShaderNodeUIntParameter struct {
	_ [0]*methodsVisualShaderNodeUIntParameter
	class
}

func (self VisualShaderNodeUIntParameter) VisualShaderNodeParameter() VisualShaderNodeParameter {
	var parent VisualShaderNodeParameter
	parent.class = self.class
	return parent
}
func (self methodsVisualShaderNodeUIntParameter) SetDefaultValueEnabled(enabled bool) {
	self.Runtime.VisualShaderNodeUIntParameter_set_default_value_enabled(VisualShaderNodeUIntParameter{self}, enabled)
}
func (self methodsVisualShaderNodeUIntParameter) IsDefaultValueEnabled() bool {
	return self.Runtime.VisualShaderNodeUIntParameter_is_default_value_enabled(VisualShaderNodeUIntParameter{self})
}
func (self methodsVisualShaderNodeUIntParameter) SetDefaultValue(value int64) {
	self.Runtime.VisualShaderNodeUIntParameter_set_default_value(VisualShaderNodeUIntParameter{self}, value)
}
func (self methodsVisualShaderNodeUIntParameter) GetDefaultValue() int64 {
	return self.Runtime.VisualShaderNodeUIntParameter_get_default_value(VisualShaderNodeUIntParameter{self})
}

type methodsVisualShaderNodeUVFunc struct {
	_ [0]*methodsVisualShaderNodeUVFunc
	class
}

func (self VisualShaderNodeUVFunc) VisualShaderNode() VisualShaderNode {
	var parent VisualShaderNode
	parent.class = self.class
	return parent
}
func (self methodsVisualShaderNodeUVFunc) SetFunction(fn VisualShaderNodeUVFuncFunction) {
	self.Runtime.VisualShaderNodeUVFunc_set_function(VisualShaderNodeUVFunc{self}, fn)
}
func (self methodsVisualShaderNodeUVFunc) GetFunction() VisualShaderNodeUVFuncFunction {
	return self.Runtime.VisualShaderNodeUVFunc_get_function(VisualShaderNodeUVFunc{self})
}

type methodsVisualShaderNodeUVPolarCoord struct {
	_ [0]*methodsVisualShaderNodeUVPolarCoord
	class
}

func (self VisualShaderNodeUVPolarCoord) VisualShaderNode() VisualShaderNode {
	var parent VisualShaderNode
	parent.class = self.class
	return parent
}

type methodsVisualShaderNodeVarying struct {
	_ [0]*methodsVisualShaderNodeVarying
	class
}

func (self VisualShaderNodeVarying) VisualShaderNode() VisualShaderNode {
	var parent VisualShaderNode
	parent.class = self.class
	return parent
}
func (self methodsVisualShaderNodeVarying) SetVaryingName(name string) {
	self.Runtime.VisualShaderNodeVarying_set_varying_name(VisualShaderNodeVarying{self}, name)
}
func (self methodsVisualShaderNodeVarying) GetVaryingName() string {
	return self.Runtime.VisualShaderNodeVarying_get_varying_name(VisualShaderNodeVarying{self})
}
func (self methodsVisualShaderNodeVarying) SetVaryingType(atype VisualShaderVaryingType) {
	self.Runtime.VisualShaderNodeVarying_set_varying_type(VisualShaderNodeVarying{self}, atype)
}
func (self methodsVisualShaderNodeVarying) GetVaryingType() VisualShaderVaryingType {
	return self.Runtime.VisualShaderNodeVarying_get_varying_type(VisualShaderNodeVarying{self})
}

type methodsVisualShaderNodeVaryingGetter struct {
	_ [0]*methodsVisualShaderNodeVaryingGetter
	class
}

func (self VisualShaderNodeVaryingGetter) VisualShaderNodeVarying() VisualShaderNodeVarying {
	var parent VisualShaderNodeVarying
	parent.class = self.class
	return parent
}

type methodsVisualShaderNodeVaryingSetter struct {
	_ [0]*methodsVisualShaderNodeVaryingSetter
	class
}

func (self VisualShaderNodeVaryingSetter) VisualShaderNodeVarying() VisualShaderNodeVarying {
	var parent VisualShaderNodeVarying
	parent.class = self.class
	return parent
}

type methodsVisualShaderNodeVec2Constant struct {
	_ [0]*methodsVisualShaderNodeVec2Constant
	class
}

func (self VisualShaderNodeVec2Constant) VisualShaderNodeConstant() VisualShaderNodeConstant {
	var parent VisualShaderNodeConstant
	parent.class = self.class
	return parent
}
func (self methodsVisualShaderNodeVec2Constant) SetConstant(constant Vector2) {
	self.Runtime.VisualShaderNodeVec2Constant_set_constant(VisualShaderNodeVec2Constant{self}, constant)
}
func (self methodsVisualShaderNodeVec2Constant) GetConstant() Vector2 {
	return self.Runtime.VisualShaderNodeVec2Constant_get_constant(VisualShaderNodeVec2Constant{self})
}

type methodsVisualShaderNodeVec2Parameter struct {
	_ [0]*methodsVisualShaderNodeVec2Parameter
	class
}

func (self VisualShaderNodeVec2Parameter) VisualShaderNodeParameter() VisualShaderNodeParameter {
	var parent VisualShaderNodeParameter
	parent.class = self.class
	return parent
}
func (self methodsVisualShaderNodeVec2Parameter) SetDefaultValueEnabled(enabled bool) {
	self.Runtime.VisualShaderNodeVec2Parameter_set_default_value_enabled(VisualShaderNodeVec2Parameter{self}, enabled)
}
func (self methodsVisualShaderNodeVec2Parameter) IsDefaultValueEnabled() bool {
	return self.Runtime.VisualShaderNodeVec2Parameter_is_default_value_enabled(VisualShaderNodeVec2Parameter{self})
}
func (self methodsVisualShaderNodeVec2Parameter) SetDefaultValue(value Vector2) {
	self.Runtime.VisualShaderNodeVec2Parameter_set_default_value(VisualShaderNodeVec2Parameter{self}, value)
}
func (self methodsVisualShaderNodeVec2Parameter) GetDefaultValue() Vector2 {
	return self.Runtime.VisualShaderNodeVec2Parameter_get_default_value(VisualShaderNodeVec2Parameter{self})
}

type methodsVisualShaderNodeVec3Constant struct {
	_ [0]*methodsVisualShaderNodeVec3Constant
	class
}

func (self VisualShaderNodeVec3Constant) VisualShaderNodeConstant() VisualShaderNodeConstant {
	var parent VisualShaderNodeConstant
	parent.class = self.class
	return parent
}
func (self methodsVisualShaderNodeVec3Constant) SetConstant(constant Vector3) {
	self.Runtime.VisualShaderNodeVec3Constant_set_constant(VisualShaderNodeVec3Constant{self}, constant)
}
func (self methodsVisualShaderNodeVec3Constant) GetConstant() Vector3 {
	return self.Runtime.VisualShaderNodeVec3Constant_get_constant(VisualShaderNodeVec3Constant{self})
}

type methodsVisualShaderNodeVec3Parameter struct {
	_ [0]*methodsVisualShaderNodeVec3Parameter
	class
}

func (self VisualShaderNodeVec3Parameter) VisualShaderNodeParameter() VisualShaderNodeParameter {
	var parent VisualShaderNodeParameter
	parent.class = self.class
	return parent
}
func (self methodsVisualShaderNodeVec3Parameter) SetDefaultValueEnabled(enabled bool) {
	self.Runtime.VisualShaderNodeVec3Parameter_set_default_value_enabled(VisualShaderNodeVec3Parameter{self}, enabled)
}
func (self methodsVisualShaderNodeVec3Parameter) IsDefaultValueEnabled() bool {
	return self.Runtime.VisualShaderNodeVec3Parameter_is_default_value_enabled(VisualShaderNodeVec3Parameter{self})
}
func (self methodsVisualShaderNodeVec3Parameter) SetDefaultValue(value Vector3) {
	self.Runtime.VisualShaderNodeVec3Parameter_set_default_value(VisualShaderNodeVec3Parameter{self}, value)
}
func (self methodsVisualShaderNodeVec3Parameter) GetDefaultValue() Vector3 {
	return self.Runtime.VisualShaderNodeVec3Parameter_get_default_value(VisualShaderNodeVec3Parameter{self})
}

type methodsVisualShaderNodeVec4Constant struct {
	_ [0]*methodsVisualShaderNodeVec4Constant
	class
}

func (self VisualShaderNodeVec4Constant) VisualShaderNodeConstant() VisualShaderNodeConstant {
	var parent VisualShaderNodeConstant
	parent.class = self.class
	return parent
}
func (self methodsVisualShaderNodeVec4Constant) SetConstant(constant Quaternion) {
	self.Runtime.VisualShaderNodeVec4Constant_set_constant(VisualShaderNodeVec4Constant{self}, constant)
}
func (self methodsVisualShaderNodeVec4Constant) GetConstant() Quaternion {
	return self.Runtime.VisualShaderNodeVec4Constant_get_constant(VisualShaderNodeVec4Constant{self})
}

type methodsVisualShaderNodeVec4Parameter struct {
	_ [0]*methodsVisualShaderNodeVec4Parameter
	class
}

func (self VisualShaderNodeVec4Parameter) VisualShaderNodeParameter() VisualShaderNodeParameter {
	var parent VisualShaderNodeParameter
	parent.class = self.class
	return parent
}
func (self methodsVisualShaderNodeVec4Parameter) SetDefaultValueEnabled(enabled bool) {
	self.Runtime.VisualShaderNodeVec4Parameter_set_default_value_enabled(VisualShaderNodeVec4Parameter{self}, enabled)
}
func (self methodsVisualShaderNodeVec4Parameter) IsDefaultValueEnabled() bool {
	return self.Runtime.VisualShaderNodeVec4Parameter_is_default_value_enabled(VisualShaderNodeVec4Parameter{self})
}
func (self methodsVisualShaderNodeVec4Parameter) SetDefaultValue(value Vector4) {
	self.Runtime.VisualShaderNodeVec4Parameter_set_default_value(VisualShaderNodeVec4Parameter{self}, value)
}
func (self methodsVisualShaderNodeVec4Parameter) GetDefaultValue() Vector4 {
	return self.Runtime.VisualShaderNodeVec4Parameter_get_default_value(VisualShaderNodeVec4Parameter{self})
}

type methodsVisualShaderNodeVectorBase struct {
	_ [0]*methodsVisualShaderNodeVectorBase
	class
}

func (self VisualShaderNodeVectorBase) VisualShaderNode() VisualShaderNode {
	var parent VisualShaderNode
	parent.class = self.class
	return parent
}
func (self methodsVisualShaderNodeVectorBase) SetOpType(atype VisualShaderNodeVectorBaseOpType) {
	self.Runtime.VisualShaderNodeVectorBase_set_op_type(VisualShaderNodeVectorBase{self}, atype)
}
func (self methodsVisualShaderNodeVectorBase) GetOpType() VisualShaderNodeVectorBaseOpType {
	return self.Runtime.VisualShaderNodeVectorBase_get_op_type(VisualShaderNodeVectorBase{self})
}

type methodsVisualShaderNodeVectorCompose struct {
	_ [0]*methodsVisualShaderNodeVectorCompose
	class
}

func (self VisualShaderNodeVectorCompose) VisualShaderNodeVectorBase() VisualShaderNodeVectorBase {
	var parent VisualShaderNodeVectorBase
	parent.class = self.class
	return parent
}

type methodsVisualShaderNodeVectorDecompose struct {
	_ [0]*methodsVisualShaderNodeVectorDecompose
	class
}

func (self VisualShaderNodeVectorDecompose) VisualShaderNodeVectorBase() VisualShaderNodeVectorBase {
	var parent VisualShaderNodeVectorBase
	parent.class = self.class
	return parent
}

type methodsVisualShaderNodeVectorDistance struct {
	_ [0]*methodsVisualShaderNodeVectorDistance
	class
}

func (self VisualShaderNodeVectorDistance) VisualShaderNodeVectorBase() VisualShaderNodeVectorBase {
	var parent VisualShaderNodeVectorBase
	parent.class = self.class
	return parent
}

type methodsVisualShaderNodeVectorFunc struct {
	_ [0]*methodsVisualShaderNodeVectorFunc
	class
}

func (self VisualShaderNodeVectorFunc) VisualShaderNodeVectorBase() VisualShaderNodeVectorBase {
	var parent VisualShaderNodeVectorBase
	parent.class = self.class
	return parent
}
func (self methodsVisualShaderNodeVectorFunc) SetFunction(fn VisualShaderNodeVectorFuncFunction) {
	self.Runtime.VisualShaderNodeVectorFunc_set_function(VisualShaderNodeVectorFunc{self}, fn)
}
func (self methodsVisualShaderNodeVectorFunc) GetFunction() VisualShaderNodeVectorFuncFunction {
	return self.Runtime.VisualShaderNodeVectorFunc_get_function(VisualShaderNodeVectorFunc{self})
}

type methodsVisualShaderNodeVectorLen struct {
	_ [0]*methodsVisualShaderNodeVectorLen
	class
}

func (self VisualShaderNodeVectorLen) VisualShaderNodeVectorBase() VisualShaderNodeVectorBase {
	var parent VisualShaderNodeVectorBase
	parent.class = self.class
	return parent
}

type methodsVisualShaderNodeVectorOp struct {
	_ [0]*methodsVisualShaderNodeVectorOp
	class
}

func (self VisualShaderNodeVectorOp) VisualShaderNodeVectorBase() VisualShaderNodeVectorBase {
	var parent VisualShaderNodeVectorBase
	parent.class = self.class
	return parent
}
func (self methodsVisualShaderNodeVectorOp) SetOperator(op VisualShaderNodeVectorOpOperator) {
	self.Runtime.VisualShaderNodeVectorOp_set_operator(VisualShaderNodeVectorOp{self}, op)
}
func (self methodsVisualShaderNodeVectorOp) GetOperator() VisualShaderNodeVectorOpOperator {
	return self.Runtime.VisualShaderNodeVectorOp_get_operator(VisualShaderNodeVectorOp{self})
}

type methodsVisualShaderNodeVectorRefract struct {
	_ [0]*methodsVisualShaderNodeVectorRefract
	class
}

func (self VisualShaderNodeVectorRefract) VisualShaderNodeVectorBase() VisualShaderNodeVectorBase {
	var parent VisualShaderNodeVectorBase
	parent.class = self.class
	return parent
}

type methodsVisualShaderNodeWorldPositionFromDepth struct {
	_ [0]*methodsVisualShaderNodeWorldPositionFromDepth
	class
}

func (self VisualShaderNodeWorldPositionFromDepth) VisualShaderNode() VisualShaderNode {
	var parent VisualShaderNode
	parent.class = self.class
	return parent
}

type methodsVoxelGI struct {
	_ [0]*methodsVoxelGI
	class
}

func (self VoxelGI) VisualInstance3D() VisualInstance3D {
	var parent VisualInstance3D
	parent.class = self.class
	return parent
}
func (self methodsVoxelGI) SetProbeData(data VoxelGIData) {
	self.Runtime.VoxelGI_set_probe_data(VoxelGI{self}, data)
}
func (self methodsVoxelGI) GetProbeData() VoxelGIData {
	return self.Runtime.VoxelGI_get_probe_data(VoxelGI{self})
}
func (self methodsVoxelGI) SetSubdiv(subdiv VoxelGISubdiv) {
	self.Runtime.VoxelGI_set_subdiv(VoxelGI{self}, subdiv)
}
func (self methodsVoxelGI) GetSubdiv() VoxelGISubdiv {
	return self.Runtime.VoxelGI_get_subdiv(VoxelGI{self})
}
func (self methodsVoxelGI) SetSize(size Vector3) {
	self.Runtime.VoxelGI_set_size(VoxelGI{self}, size)
}
func (self methodsVoxelGI) GetSize() Vector3 {
	return self.Runtime.VoxelGI_get_size(VoxelGI{self})
}
func (self methodsVoxelGI) SetCameraAttributes(camera_attributes CameraAttributes) {
	self.Runtime.VoxelGI_set_camera_attributes(VoxelGI{self}, camera_attributes)
}
func (self methodsVoxelGI) GetCameraAttributes() CameraAttributes {
	return self.Runtime.VoxelGI_get_camera_attributes(VoxelGI{self})
}
func (self methodsVoxelGI) Bake(from_node Node, create_visual_debug bool) {
	self.Runtime.VoxelGI_bake(VoxelGI{self}, from_node, create_visual_debug)
}
func (self methodsVoxelGI) DebugBake() {
	self.Runtime.VoxelGI_debug_bake(VoxelGI{self})
}

type methodsVoxelGIData struct {
	_ [0]*methodsVoxelGIData
	class
}

func (self VoxelGIData) Resource() Resource {
	var parent Resource
	parent.class = self.class
	return parent
}
func (self methodsVoxelGIData) Allocate(to_cell_xform Transform3D, aabb AABB, octree_size Vector3, octree_cells PackedByteArray, data_cells PackedByteArray, distance_field PackedByteArray, level_counts PackedInt32Array) {
	self.Runtime.VoxelGIData_allocate(VoxelGIData{self}, to_cell_xform, aabb, octree_size, octree_cells, data_cells, distance_field, level_counts)
}
func (self methodsVoxelGIData) GetBounds() AABB {
	return self.Runtime.VoxelGIData_get_bounds(VoxelGIData{self})
}
func (self methodsVoxelGIData) GetOctreeSize() Vector3 {
	return self.Runtime.VoxelGIData_get_octree_size(VoxelGIData{self})
}
func (self methodsVoxelGIData) GetToCellXform() Transform3D {
	return self.Runtime.VoxelGIData_get_to_cell_xform(VoxelGIData{self})
}
func (self methodsVoxelGIData) GetOctreeCells() PackedByteArray {
	return self.Runtime.VoxelGIData_get_octree_cells(VoxelGIData{self})
}
func (self methodsVoxelGIData) GetDataCells() PackedByteArray {
	return self.Runtime.VoxelGIData_get_data_cells(VoxelGIData{self})
}
func (self methodsVoxelGIData) GetLevelCounts() PackedInt32Array {
	return self.Runtime.VoxelGIData_get_level_counts(VoxelGIData{self})
}
func (self methodsVoxelGIData) SetDynamicRange(dynamic_range Float) {
	self.Runtime.VoxelGIData_set_dynamic_range(VoxelGIData{self}, dynamic_range)
}
func (self methodsVoxelGIData) GetDynamicRange() Float {
	return self.Runtime.VoxelGIData_get_dynamic_range(VoxelGIData{self})
}
func (self methodsVoxelGIData) SetEnergy(energy Float) {
	self.Runtime.VoxelGIData_set_energy(VoxelGIData{self}, energy)
}
func (self methodsVoxelGIData) GetEnergy() Float {
	return self.Runtime.VoxelGIData_get_energy(VoxelGIData{self})
}
func (self methodsVoxelGIData) SetBias(bias Float) {
	self.Runtime.VoxelGIData_set_bias(VoxelGIData{self}, bias)
}
func (self methodsVoxelGIData) GetBias() Float {
	return self.Runtime.VoxelGIData_get_bias(VoxelGIData{self})
}
func (self methodsVoxelGIData) SetNormalBias(bias Float) {
	self.Runtime.VoxelGIData_set_normal_bias(VoxelGIData{self}, bias)
}
func (self methodsVoxelGIData) GetNormalBias() Float {
	return self.Runtime.VoxelGIData_get_normal_bias(VoxelGIData{self})
}
func (self methodsVoxelGIData) SetPropagation(propagation Float) {
	self.Runtime.VoxelGIData_set_propagation(VoxelGIData{self}, propagation)
}
func (self methodsVoxelGIData) GetPropagation() Float {
	return self.Runtime.VoxelGIData_get_propagation(VoxelGIData{self})
}
func (self methodsVoxelGIData) SetInterior(interior bool) {
	self.Runtime.VoxelGIData_set_interior(VoxelGIData{self}, interior)
}
func (self methodsVoxelGIData) IsInterior() bool {
	return self.Runtime.VoxelGIData_is_interior(VoxelGIData{self})
}
func (self methodsVoxelGIData) SetUseTwoBounces(enable bool) {
	self.Runtime.VoxelGIData_set_use_two_bounces(VoxelGIData{self}, enable)
}
func (self methodsVoxelGIData) IsUsingTwoBounces() bool {
	return self.Runtime.VoxelGIData_is_using_two_bounces(VoxelGIData{self})
}

type methodsWeakRef struct {
	_ [0]*methodsWeakRef
	class
}

func (self WeakRef) RefCounted() RefCounted {
	var parent RefCounted
	parent.class = self.class
	return parent
}
func (self methodsWeakRef) GetRef() any {
	return self.Runtime.WeakRef_get_ref(WeakRef{self})
}

type methodsWebRTCDataChannel struct {
	_ [0]*methodsWebRTCDataChannel
	class
}

func (self WebRTCDataChannel) PacketPeer() PacketPeer {
	var parent PacketPeer
	parent.class = self.class
	return parent
}
func (self methodsWebRTCDataChannel) Poll() int64 {
	return self.Runtime.WebRTCDataChannel_poll(WebRTCDataChannel{self})
}
func (self methodsWebRTCDataChannel) Close() {
	self.Runtime.WebRTCDataChannel_close(WebRTCDataChannel{self})
}
func (self methodsWebRTCDataChannel) WasStringPacket() bool {
	return self.Runtime.WebRTCDataChannel_was_string_packet(WebRTCDataChannel{self})
}
func (self methodsWebRTCDataChannel) SetWriteMode(write_mode WebRTCDataChannelWriteMode) {
	self.Runtime.WebRTCDataChannel_set_write_mode(WebRTCDataChannel{self}, write_mode)
}
func (self methodsWebRTCDataChannel) GetWriteMode() WebRTCDataChannelWriteMode {
	return self.Runtime.WebRTCDataChannel_get_write_mode(WebRTCDataChannel{self})
}
func (self methodsWebRTCDataChannel) GetReadyState() WebRTCDataChannelChannelState {
	return self.Runtime.WebRTCDataChannel_get_ready_state(WebRTCDataChannel{self})
}
func (self methodsWebRTCDataChannel) GetLabel() string {
	return self.Runtime.WebRTCDataChannel_get_label(WebRTCDataChannel{self})
}
func (self methodsWebRTCDataChannel) IsOrdered() bool {
	return self.Runtime.WebRTCDataChannel_is_ordered(WebRTCDataChannel{self})
}
func (self methodsWebRTCDataChannel) GetId() int64 {
	return self.Runtime.WebRTCDataChannel_get_id(WebRTCDataChannel{self})
}
func (self methodsWebRTCDataChannel) GetMaxPacketLifeTime() int64 {
	return self.Runtime.WebRTCDataChannel_get_max_packet_life_time(WebRTCDataChannel{self})
}
func (self methodsWebRTCDataChannel) GetMaxRetransmits() int64 {
	return self.Runtime.WebRTCDataChannel_get_max_retransmits(WebRTCDataChannel{self})
}
func (self methodsWebRTCDataChannel) GetProtocol() string {
	return self.Runtime.WebRTCDataChannel_get_protocol(WebRTCDataChannel{self})
}
func (self methodsWebRTCDataChannel) IsNegotiated() bool {
	return self.Runtime.WebRTCDataChannel_is_negotiated(WebRTCDataChannel{self})
}
func (self methodsWebRTCDataChannel) GetBufferedAmount() int64 {
	return self.Runtime.WebRTCDataChannel_get_buffered_amount(WebRTCDataChannel{self})
}

type methodsWebRTCDataChannelExtension struct {
	_ [0]*methodsWebRTCDataChannelExtension
	class
}

func (self WebRTCDataChannelExtension) WebRTCDataChannel() WebRTCDataChannel {
	var parent WebRTCDataChannel
	parent.class = self.class
	return parent
}

type methodsWebRTCMultiplayerPeer struct {
	_ [0]*methodsWebRTCMultiplayerPeer
	class
}

func (self WebRTCMultiplayerPeer) MultiplayerPeer() MultiplayerPeer {
	var parent MultiplayerPeer
	parent.class = self.class
	return parent
}
func (self methodsWebRTCMultiplayerPeer) CreateServer(channels_config Array) int64 {
	return self.Runtime.WebRTCMultiplayerPeer_create_server(WebRTCMultiplayerPeer{self}, channels_config)
}
func (self methodsWebRTCMultiplayerPeer) CreateClient(peer_id int64, channels_config Array) int64 {
	return self.Runtime.WebRTCMultiplayerPeer_create_client(WebRTCMultiplayerPeer{self}, peer_id, channels_config)
}
func (self methodsWebRTCMultiplayerPeer) CreateMesh(peer_id int64, channels_config Array) int64 {
	return self.Runtime.WebRTCMultiplayerPeer_create_mesh(WebRTCMultiplayerPeer{self}, peer_id, channels_config)
}
func (self methodsWebRTCMultiplayerPeer) AddPeer(peer WebRTCPeerConnection, peer_id int64, unreliable_lifetime int64) int64 {
	return self.Runtime.WebRTCMultiplayerPeer_add_peer(WebRTCMultiplayerPeer{self}, peer, peer_id, unreliable_lifetime)
}
func (self methodsWebRTCMultiplayerPeer) RemovePeer(peer_id int64) {
	self.Runtime.WebRTCMultiplayerPeer_remove_peer(WebRTCMultiplayerPeer{self}, peer_id)
}
func (self methodsWebRTCMultiplayerPeer) HasPeer(peer_id int64) bool {
	return self.Runtime.WebRTCMultiplayerPeer_has_peer(WebRTCMultiplayerPeer{self}, peer_id)
}
func (self methodsWebRTCMultiplayerPeer) GetPeer(peer_id int64) Dictionary {
	return self.Runtime.WebRTCMultiplayerPeer_get_peer(WebRTCMultiplayerPeer{self}, peer_id)
}
func (self methodsWebRTCMultiplayerPeer) GetPeers() Dictionary {
	return self.Runtime.WebRTCMultiplayerPeer_get_peers(WebRTCMultiplayerPeer{self})
}

type methodsWebRTCPeerConnection struct {
	_ [0]*methodsWebRTCPeerConnection
	class
}

func (self WebRTCPeerConnection) RefCounted() RefCounted {
	var parent RefCounted
	parent.class = self.class
	return parent
}
func (self methodsWebRTCPeerConnection) SetDefaultExtension(extension_class string) {
	self.Runtime.WebRTCPeerConnection_set_default_extension(WebRTCPeerConnection{self}, extension_class)
}
func (self methodsWebRTCPeerConnection) Initialize(configuration Dictionary) int64 {
	return self.Runtime.WebRTCPeerConnection_initialize(WebRTCPeerConnection{self}, configuration)
}
func (self methodsWebRTCPeerConnection) CreateDataChannel(label string, options Dictionary) WebRTCDataChannel {
	return self.Runtime.WebRTCPeerConnection_create_data_channel(WebRTCPeerConnection{self}, label, options)
}
func (self methodsWebRTCPeerConnection) CreateOffer() int64 {
	return self.Runtime.WebRTCPeerConnection_create_offer(WebRTCPeerConnection{self})
}
func (self methodsWebRTCPeerConnection) SetLocalDescription(atype string, sdp string) int64 {
	return self.Runtime.WebRTCPeerConnection_set_local_description(WebRTCPeerConnection{self}, atype, sdp)
}
func (self methodsWebRTCPeerConnection) SetRemoteDescription(atype string, sdp string) int64 {
	return self.Runtime.WebRTCPeerConnection_set_remote_description(WebRTCPeerConnection{self}, atype, sdp)
}
func (self methodsWebRTCPeerConnection) AddIceCandidate(media string, index int64, name string) int64 {
	return self.Runtime.WebRTCPeerConnection_add_ice_candidate(WebRTCPeerConnection{self}, media, index, name)
}
func (self methodsWebRTCPeerConnection) Poll() int64 {
	return self.Runtime.WebRTCPeerConnection_poll(WebRTCPeerConnection{self})
}
func (self methodsWebRTCPeerConnection) Close() {
	self.Runtime.WebRTCPeerConnection_close(WebRTCPeerConnection{self})
}
func (self methodsWebRTCPeerConnection) GetConnectionState() WebRTCPeerConnectionConnectionState {
	return self.Runtime.WebRTCPeerConnection_get_connection_state(WebRTCPeerConnection{self})
}
func (self methodsWebRTCPeerConnection) GetGatheringState() WebRTCPeerConnectionGatheringState {
	return self.Runtime.WebRTCPeerConnection_get_gathering_state(WebRTCPeerConnection{self})
}
func (self methodsWebRTCPeerConnection) GetSignalingState() WebRTCPeerConnectionSignalingState {
	return self.Runtime.WebRTCPeerConnection_get_signaling_state(WebRTCPeerConnection{self})
}

type methodsWebRTCPeerConnectionExtension struct {
	_ [0]*methodsWebRTCPeerConnectionExtension
	class
}

func (self WebRTCPeerConnectionExtension) WebRTCPeerConnection() WebRTCPeerConnection {
	var parent WebRTCPeerConnection
	parent.class = self.class
	return parent
}

type methodsWebSocketMultiplayerPeer struct {
	_ [0]*methodsWebSocketMultiplayerPeer
	class
}

func (self WebSocketMultiplayerPeer) MultiplayerPeer() MultiplayerPeer {
	var parent MultiplayerPeer
	parent.class = self.class
	return parent
}
func (self methodsWebSocketMultiplayerPeer) CreateClient(url string, tls_client_options TLSOptions) int64 {
	return self.Runtime.WebSocketMultiplayerPeer_create_client(WebSocketMultiplayerPeer{self}, url, tls_client_options)
}
func (self methodsWebSocketMultiplayerPeer) CreateServer(port int64, bind_address string, tls_server_options TLSOptions) int64 {
	return self.Runtime.WebSocketMultiplayerPeer_create_server(WebSocketMultiplayerPeer{self}, port, bind_address, tls_server_options)
}
func (self methodsWebSocketMultiplayerPeer) GetPeer(peer_id int64) WebSocketPeer {
	return self.Runtime.WebSocketMultiplayerPeer_get_peer(WebSocketMultiplayerPeer{self}, peer_id)
}
func (self methodsWebSocketMultiplayerPeer) GetPeerAddress(id int64) string {
	return self.Runtime.WebSocketMultiplayerPeer_get_peer_address(WebSocketMultiplayerPeer{self}, id)
}
func (self methodsWebSocketMultiplayerPeer) GetPeerPort(id int64) int64 {
	return self.Runtime.WebSocketMultiplayerPeer_get_peer_port(WebSocketMultiplayerPeer{self}, id)
}
func (self methodsWebSocketMultiplayerPeer) GetSupportedProtocols() PackedStringArray {
	return self.Runtime.WebSocketMultiplayerPeer_get_supported_protocols(WebSocketMultiplayerPeer{self})
}
func (self methodsWebSocketMultiplayerPeer) SetSupportedProtocols(protocols PackedStringArray) {
	self.Runtime.WebSocketMultiplayerPeer_set_supported_protocols(WebSocketMultiplayerPeer{self}, protocols)
}
func (self methodsWebSocketMultiplayerPeer) GetHandshakeHeaders() PackedStringArray {
	return self.Runtime.WebSocketMultiplayerPeer_get_handshake_headers(WebSocketMultiplayerPeer{self})
}
func (self methodsWebSocketMultiplayerPeer) SetHandshakeHeaders(protocols PackedStringArray) {
	self.Runtime.WebSocketMultiplayerPeer_set_handshake_headers(WebSocketMultiplayerPeer{self}, protocols)
}
func (self methodsWebSocketMultiplayerPeer) GetInboundBufferSize() int64 {
	return self.Runtime.WebSocketMultiplayerPeer_get_inbound_buffer_size(WebSocketMultiplayerPeer{self})
}
func (self methodsWebSocketMultiplayerPeer) SetInboundBufferSize(buffer_size int64) {
	self.Runtime.WebSocketMultiplayerPeer_set_inbound_buffer_size(WebSocketMultiplayerPeer{self}, buffer_size)
}
func (self methodsWebSocketMultiplayerPeer) GetOutboundBufferSize() int64 {
	return self.Runtime.WebSocketMultiplayerPeer_get_outbound_buffer_size(WebSocketMultiplayerPeer{self})
}
func (self methodsWebSocketMultiplayerPeer) SetOutboundBufferSize(buffer_size int64) {
	self.Runtime.WebSocketMultiplayerPeer_set_outbound_buffer_size(WebSocketMultiplayerPeer{self}, buffer_size)
}
func (self methodsWebSocketMultiplayerPeer) GetHandshakeTimeout() Float {
	return self.Runtime.WebSocketMultiplayerPeer_get_handshake_timeout(WebSocketMultiplayerPeer{self})
}
func (self methodsWebSocketMultiplayerPeer) SetHandshakeTimeout(timeout Float) {
	self.Runtime.WebSocketMultiplayerPeer_set_handshake_timeout(WebSocketMultiplayerPeer{self}, timeout)
}
func (self methodsWebSocketMultiplayerPeer) SetMaxQueuedPackets(max_queued_packets int64) {
	self.Runtime.WebSocketMultiplayerPeer_set_max_queued_packets(WebSocketMultiplayerPeer{self}, max_queued_packets)
}
func (self methodsWebSocketMultiplayerPeer) GetMaxQueuedPackets() int64 {
	return self.Runtime.WebSocketMultiplayerPeer_get_max_queued_packets(WebSocketMultiplayerPeer{self})
}

type methodsWebSocketPeer struct {
	_ [0]*methodsWebSocketPeer
	class
}

func (self WebSocketPeer) PacketPeer() PacketPeer {
	var parent PacketPeer
	parent.class = self.class
	return parent
}
func (self methodsWebSocketPeer) ConnectToUrl(url string, tls_client_options TLSOptions) int64 {
	return self.Runtime.WebSocketPeer_connect_to_url(WebSocketPeer{self}, url, tls_client_options)
}
func (self methodsWebSocketPeer) AcceptStream(stream StreamPeer) int64 {
	return self.Runtime.WebSocketPeer_accept_stream(WebSocketPeer{self}, stream)
}
func (self methodsWebSocketPeer) Send(message PackedByteArray, write_mode WebSocketPeerWriteMode) int64 {
	return self.Runtime.WebSocketPeer_send(WebSocketPeer{self}, message, write_mode)
}
func (self methodsWebSocketPeer) SendText(message string) int64 {
	return self.Runtime.WebSocketPeer_send_text(WebSocketPeer{self}, message)
}
func (self methodsWebSocketPeer) WasStringPacket() bool {
	return self.Runtime.WebSocketPeer_was_string_packet(WebSocketPeer{self})
}
func (self methodsWebSocketPeer) Poll() {
	self.Runtime.WebSocketPeer_poll(WebSocketPeer{self})
}
func (self methodsWebSocketPeer) Close(code int64, reason string) {
	self.Runtime.WebSocketPeer_close(WebSocketPeer{self}, code, reason)
}
func (self methodsWebSocketPeer) GetConnectedHost() string {
	return self.Runtime.WebSocketPeer_get_connected_host(WebSocketPeer{self})
}
func (self methodsWebSocketPeer) GetConnectedPort() int64 {
	return self.Runtime.WebSocketPeer_get_connected_port(WebSocketPeer{self})
}
func (self methodsWebSocketPeer) GetSelectedProtocol() string {
	return self.Runtime.WebSocketPeer_get_selected_protocol(WebSocketPeer{self})
}
func (self methodsWebSocketPeer) GetRequestedUrl() string {
	return self.Runtime.WebSocketPeer_get_requested_url(WebSocketPeer{self})
}
func (self methodsWebSocketPeer) SetNoDelay(enabled bool) {
	self.Runtime.WebSocketPeer_set_no_delay(WebSocketPeer{self}, enabled)
}
func (self methodsWebSocketPeer) GetCurrentOutboundBufferedAmount() int64 {
	return self.Runtime.WebSocketPeer_get_current_outbound_buffered_amount(WebSocketPeer{self})
}
func (self methodsWebSocketPeer) GetReadyState() WebSocketPeerState {
	return self.Runtime.WebSocketPeer_get_ready_state(WebSocketPeer{self})
}
func (self methodsWebSocketPeer) GetCloseCode() int64 {
	return self.Runtime.WebSocketPeer_get_close_code(WebSocketPeer{self})
}
func (self methodsWebSocketPeer) GetCloseReason() string {
	return self.Runtime.WebSocketPeer_get_close_reason(WebSocketPeer{self})
}
func (self methodsWebSocketPeer) GetSupportedProtocols() PackedStringArray {
	return self.Runtime.WebSocketPeer_get_supported_protocols(WebSocketPeer{self})
}
func (self methodsWebSocketPeer) SetSupportedProtocols(protocols PackedStringArray) {
	self.Runtime.WebSocketPeer_set_supported_protocols(WebSocketPeer{self}, protocols)
}
func (self methodsWebSocketPeer) GetHandshakeHeaders() PackedStringArray {
	return self.Runtime.WebSocketPeer_get_handshake_headers(WebSocketPeer{self})
}
func (self methodsWebSocketPeer) SetHandshakeHeaders(protocols PackedStringArray) {
	self.Runtime.WebSocketPeer_set_handshake_headers(WebSocketPeer{self}, protocols)
}
func (self methodsWebSocketPeer) GetInboundBufferSize() int64 {
	return self.Runtime.WebSocketPeer_get_inbound_buffer_size(WebSocketPeer{self})
}
func (self methodsWebSocketPeer) SetInboundBufferSize(buffer_size int64) {
	self.Runtime.WebSocketPeer_set_inbound_buffer_size(WebSocketPeer{self}, buffer_size)
}
func (self methodsWebSocketPeer) GetOutboundBufferSize() int64 {
	return self.Runtime.WebSocketPeer_get_outbound_buffer_size(WebSocketPeer{self})
}
func (self methodsWebSocketPeer) SetOutboundBufferSize(buffer_size int64) {
	self.Runtime.WebSocketPeer_set_outbound_buffer_size(WebSocketPeer{self}, buffer_size)
}
func (self methodsWebSocketPeer) SetMaxQueuedPackets(buffer_size int64) {
	self.Runtime.WebSocketPeer_set_max_queued_packets(WebSocketPeer{self}, buffer_size)
}
func (self methodsWebSocketPeer) GetMaxQueuedPackets() int64 {
	return self.Runtime.WebSocketPeer_get_max_queued_packets(WebSocketPeer{self})
}

type methodsWebXRInterface struct {
	_ [0]*methodsWebXRInterface
	class
}

func (self WebXRInterface) XRInterface() XRInterface {
	var parent XRInterface
	parent.class = self.class
	return parent
}
func (self methodsWebXRInterface) IsSessionSupported(session_mode string) {
	self.Runtime.WebXRInterface_is_session_supported(WebXRInterface{self}, session_mode)
}
func (self methodsWebXRInterface) SetSessionMode(session_mode string) {
	self.Runtime.WebXRInterface_set_session_mode(WebXRInterface{self}, session_mode)
}
func (self methodsWebXRInterface) GetSessionMode() string {
	return self.Runtime.WebXRInterface_get_session_mode(WebXRInterface{self})
}
func (self methodsWebXRInterface) SetRequiredFeatures(required_features string) {
	self.Runtime.WebXRInterface_set_required_features(WebXRInterface{self}, required_features)
}
func (self methodsWebXRInterface) GetRequiredFeatures() string {
	return self.Runtime.WebXRInterface_get_required_features(WebXRInterface{self})
}
func (self methodsWebXRInterface) SetOptionalFeatures(optional_features string) {
	self.Runtime.WebXRInterface_set_optional_features(WebXRInterface{self}, optional_features)
}
func (self methodsWebXRInterface) GetOptionalFeatures() string {
	return self.Runtime.WebXRInterface_get_optional_features(WebXRInterface{self})
}
func (self methodsWebXRInterface) GetReferenceSpaceType() string {
	return self.Runtime.WebXRInterface_get_reference_space_type(WebXRInterface{self})
}
func (self methodsWebXRInterface) SetRequestedReferenceSpaceTypes(requested_reference_space_types string) {
	self.Runtime.WebXRInterface_set_requested_reference_space_types(WebXRInterface{self}, requested_reference_space_types)
}
func (self methodsWebXRInterface) GetRequestedReferenceSpaceTypes() string {
	return self.Runtime.WebXRInterface_get_requested_reference_space_types(WebXRInterface{self})
}
func (self methodsWebXRInterface) IsInputSourceActive(input_source_id int64) bool {
	return self.Runtime.WebXRInterface_is_input_source_active(WebXRInterface{self}, input_source_id)
}
func (self methodsWebXRInterface) GetInputSourceTracker(input_source_id int64) XRPositionalTracker {
	return self.Runtime.WebXRInterface_get_input_source_tracker(WebXRInterface{self}, input_source_id)
}
func (self methodsWebXRInterface) GetInputSourceTargetRayMode(input_source_id int64) WebXRInterfaceTargetRayMode {
	return self.Runtime.WebXRInterface_get_input_source_target_ray_mode(WebXRInterface{self}, input_source_id)
}
func (self methodsWebXRInterface) GetVisibilityState() string {
	return self.Runtime.WebXRInterface_get_visibility_state(WebXRInterface{self})
}
func (self methodsWebXRInterface) GetDisplayRefreshRate() Float {
	return self.Runtime.WebXRInterface_get_display_refresh_rate(WebXRInterface{self})
}
func (self methodsWebXRInterface) SetDisplayRefreshRate(refresh_rate Float) {
	self.Runtime.WebXRInterface_set_display_refresh_rate(WebXRInterface{self}, refresh_rate)
}
func (self methodsWebXRInterface) GetAvailableDisplayRefreshRates() Array {
	return self.Runtime.WebXRInterface_get_available_display_refresh_rates(WebXRInterface{self})
}

type methodsWindow struct {
	_ [0]*methodsWindow
	class
}

func (self Window) Viewport() Viewport { var parent Viewport; parent.class = self.class; return parent }
func (self methodsWindow) SetTitle(title string) {
	self.Runtime.Window_set_title(Window{self}, title)
}
func (self methodsWindow) GetTitle() string {
	return self.Runtime.Window_get_title(Window{self})
}
func (self methodsWindow) GetWindowId() int64 {
	return self.Runtime.Window_get_window_id(Window{self})
}
func (self methodsWindow) SetInitialPosition(initial_position WindowWindowInitialPosition) {
	self.Runtime.Window_set_initial_position(Window{self}, initial_position)
}
func (self methodsWindow) GetInitialPosition() WindowWindowInitialPosition {
	return self.Runtime.Window_get_initial_position(Window{self})
}
func (self methodsWindow) SetCurrentScreen(index int64) {
	self.Runtime.Window_set_current_screen(Window{self}, index)
}
func (self methodsWindow) GetCurrentScreen() int64 {
	return self.Runtime.Window_get_current_screen(Window{self})
}
func (self methodsWindow) SetPosition(position Vector2i) {
	self.Runtime.Window_set_position(Window{self}, position)
}
func (self methodsWindow) GetPosition() Vector2i {
	return self.Runtime.Window_get_position(Window{self})
}
func (self methodsWindow) MoveToCenter() {
	self.Runtime.Window_move_to_center(Window{self})
}
func (self methodsWindow) SetSize(size Vector2i) {
	self.Runtime.Window_set_size(Window{self}, size)
}
func (self methodsWindow) GetSize() Vector2i {
	return self.Runtime.Window_get_size(Window{self})
}
func (self methodsWindow) ResetSize() {
	self.Runtime.Window_reset_size(Window{self})
}
func (self methodsWindow) GetPositionWithDecorations() Vector2i {
	return self.Runtime.Window_get_position_with_decorations(Window{self})
}
func (self methodsWindow) GetSizeWithDecorations() Vector2i {
	return self.Runtime.Window_get_size_with_decorations(Window{self})
}
func (self methodsWindow) SetMaxSize(max_size Vector2i) {
	self.Runtime.Window_set_max_size(Window{self}, max_size)
}
func (self methodsWindow) GetMaxSize() Vector2i {
	return self.Runtime.Window_get_max_size(Window{self})
}
func (self methodsWindow) SetMinSize(min_size Vector2i) {
	self.Runtime.Window_set_min_size(Window{self}, min_size)
}
func (self methodsWindow) GetMinSize() Vector2i {
	return self.Runtime.Window_get_min_size(Window{self})
}
func (self methodsWindow) SetMode(mode WindowMode) {
	self.Runtime.Window_set_mode(Window{self}, mode)
}
func (self methodsWindow) GetMode() WindowMode {
	return self.Runtime.Window_get_mode(Window{self})
}
func (self methodsWindow) SetFlag(flag WindowFlags, enabled bool) {
	self.Runtime.Window_set_flag(Window{self}, flag, enabled)
}
func (self methodsWindow) GetFlag(flag WindowFlags) bool {
	return self.Runtime.Window_get_flag(Window{self}, flag)
}
func (self methodsWindow) IsMaximizeAllowed() bool {
	return self.Runtime.Window_is_maximize_allowed(Window{self})
}
func (self methodsWindow) RequestAttention() {
	self.Runtime.Window_request_attention(Window{self})
}
func (self methodsWindow) MoveToForeground() {
	self.Runtime.Window_move_to_foreground(Window{self})
}
func (self methodsWindow) SetVisible(visible bool) {
	self.Runtime.Window_set_visible(Window{self}, visible)
}
func (self methodsWindow) IsVisible() bool {
	return self.Runtime.Window_is_visible(Window{self})
}
func (self methodsWindow) Hide() {
	self.Runtime.Window_hide(Window{self})
}
func (self methodsWindow) Show() {
	self.Runtime.Window_show(Window{self})
}
func (self methodsWindow) SetTransient(transient bool) {
	self.Runtime.Window_set_transient(Window{self}, transient)
}
func (self methodsWindow) IsTransient() bool {
	return self.Runtime.Window_is_transient(Window{self})
}
func (self methodsWindow) SetExclusive(exclusive bool) {
	self.Runtime.Window_set_exclusive(Window{self}, exclusive)
}
func (self methodsWindow) IsExclusive() bool {
	return self.Runtime.Window_is_exclusive(Window{self})
}
func (self methodsWindow) SetUnparentWhenInvisible(unparent bool) {
	self.Runtime.Window_set_unparent_when_invisible(Window{self}, unparent)
}
func (self methodsWindow) CanDraw() bool {
	return self.Runtime.Window_can_draw(Window{self})
}
func (self methodsWindow) HasFocus() bool {
	return self.Runtime.Window_has_focus(Window{self})
}
func (self methodsWindow) GrabFocus() {
	self.Runtime.Window_grab_focus(Window{self})
}
func (self methodsWindow) SetImeActive(active bool) {
	self.Runtime.Window_set_ime_active(Window{self}, active)
}
func (self methodsWindow) SetImePosition(position Vector2i) {
	self.Runtime.Window_set_ime_position(Window{self}, position)
}
func (self methodsWindow) IsEmbedded() bool {
	return self.Runtime.Window_is_embedded(Window{self})
}
func (self methodsWindow) GetContentsMinimumSize() Vector2 {
	return self.Runtime.Window_get_contents_minimum_size(Window{self})
}
func (self methodsWindow) SetContentScaleSize(size Vector2i) {
	self.Runtime.Window_set_content_scale_size(Window{self}, size)
}
func (self methodsWindow) GetContentScaleSize() Vector2i {
	return self.Runtime.Window_get_content_scale_size(Window{self})
}
func (self methodsWindow) SetContentScaleMode(mode WindowContentScaleMode) {
	self.Runtime.Window_set_content_scale_mode(Window{self}, mode)
}
func (self methodsWindow) GetContentScaleMode() WindowContentScaleMode {
	return self.Runtime.Window_get_content_scale_mode(Window{self})
}
func (self methodsWindow) SetContentScaleAspect(aspect WindowContentScaleAspect) {
	self.Runtime.Window_set_content_scale_aspect(Window{self}, aspect)
}
func (self methodsWindow) GetContentScaleAspect() WindowContentScaleAspect {
	return self.Runtime.Window_get_content_scale_aspect(Window{self})
}
func (self methodsWindow) SetContentScaleStretch(stretch WindowContentScaleStretch) {
	self.Runtime.Window_set_content_scale_stretch(Window{self}, stretch)
}
func (self methodsWindow) GetContentScaleStretch() WindowContentScaleStretch {
	return self.Runtime.Window_get_content_scale_stretch(Window{self})
}
func (self methodsWindow) SetKeepTitleVisible(title_visible bool) {
	self.Runtime.Window_set_keep_title_visible(Window{self}, title_visible)
}
func (self methodsWindow) GetKeepTitleVisible() bool {
	return self.Runtime.Window_get_keep_title_visible(Window{self})
}
func (self methodsWindow) SetContentScaleFactor(factor Float) {
	self.Runtime.Window_set_content_scale_factor(Window{self}, factor)
}
func (self methodsWindow) GetContentScaleFactor() Float {
	return self.Runtime.Window_get_content_scale_factor(Window{self})
}
func (self methodsWindow) SetUseFontOversampling(enable bool) {
	self.Runtime.Window_set_use_font_oversampling(Window{self}, enable)
}
func (self methodsWindow) IsUsingFontOversampling() bool {
	return self.Runtime.Window_is_using_font_oversampling(Window{self})
}
func (self methodsWindow) SetMousePassthroughPolygon(polygon PackedVector2Array) {
	self.Runtime.Window_set_mouse_passthrough_polygon(Window{self}, polygon)
}
func (self methodsWindow) GetMousePassthroughPolygon() PackedVector2Array {
	return self.Runtime.Window_get_mouse_passthrough_polygon(Window{self})
}
func (self methodsWindow) SetWrapControls(enable bool) {
	self.Runtime.Window_set_wrap_controls(Window{self}, enable)
}
func (self methodsWindow) IsWrappingControls() bool {
	return self.Runtime.Window_is_wrapping_controls(Window{self})
}
func (self methodsWindow) ChildControlsChanged() {
	self.Runtime.Window_child_controls_changed(Window{self})
}
func (self methodsWindow) SetTheme(theme Theme) {
	self.Runtime.Window_set_theme(Window{self}, theme)
}
func (self methodsWindow) GetTheme() Theme {
	return self.Runtime.Window_get_theme(Window{self})
}
func (self methodsWindow) SetThemeTypeVariation(theme_type string) {
	self.Runtime.Window_set_theme_type_variation(Window{self}, theme_type)
}
func (self methodsWindow) GetThemeTypeVariation() string {
	return self.Runtime.Window_get_theme_type_variation(Window{self})
}
func (self methodsWindow) BeginBulkThemeOverride() {
	self.Runtime.Window_begin_bulk_theme_override(Window{self})
}
func (self methodsWindow) EndBulkThemeOverride() {
	self.Runtime.Window_end_bulk_theme_override(Window{self})
}
func (self methodsWindow) AddThemeIconOverride(name string, texture Texture2D) {
	self.Runtime.Window_add_theme_icon_override(Window{self}, name, texture)
}
func (self methodsWindow) AddThemeStyleboxOverride(name string, stylebox StyleBox) {
	self.Runtime.Window_add_theme_stylebox_override(Window{self}, name, stylebox)
}
func (self methodsWindow) AddThemeFontOverride(name string, font Font) {
	self.Runtime.Window_add_theme_font_override(Window{self}, name, font)
}
func (self methodsWindow) AddThemeFontSizeOverride(name string, font_size int64) {
	self.Runtime.Window_add_theme_font_size_override(Window{self}, name, font_size)
}
func (self methodsWindow) AddThemeColorOverride(name string, color Color) {
	self.Runtime.Window_add_theme_color_override(Window{self}, name, color)
}
func (self methodsWindow) AddThemeConstantOverride(name string, constant int64) {
	self.Runtime.Window_add_theme_constant_override(Window{self}, name, constant)
}
func (self methodsWindow) RemoveThemeIconOverride(name string) {
	self.Runtime.Window_remove_theme_icon_override(Window{self}, name)
}
func (self methodsWindow) RemoveThemeStyleboxOverride(name string) {
	self.Runtime.Window_remove_theme_stylebox_override(Window{self}, name)
}
func (self methodsWindow) RemoveThemeFontOverride(name string) {
	self.Runtime.Window_remove_theme_font_override(Window{self}, name)
}
func (self methodsWindow) RemoveThemeFontSizeOverride(name string) {
	self.Runtime.Window_remove_theme_font_size_override(Window{self}, name)
}
func (self methodsWindow) RemoveThemeColorOverride(name string) {
	self.Runtime.Window_remove_theme_color_override(Window{self}, name)
}
func (self methodsWindow) RemoveThemeConstantOverride(name string) {
	self.Runtime.Window_remove_theme_constant_override(Window{self}, name)
}
func (self methodsWindow) GetThemeIcon(name string, theme_type string) Texture2D {
	return self.Runtime.Window_get_theme_icon(Window{self}, name, theme_type)
}
func (self methodsWindow) GetThemeStylebox(name string, theme_type string) StyleBox {
	return self.Runtime.Window_get_theme_stylebox(Window{self}, name, theme_type)
}
func (self methodsWindow) GetThemeFont(name string, theme_type string) Font {
	return self.Runtime.Window_get_theme_font(Window{self}, name, theme_type)
}
func (self methodsWindow) GetThemeFontSize(name string, theme_type string) int64 {
	return self.Runtime.Window_get_theme_font_size(Window{self}, name, theme_type)
}
func (self methodsWindow) GetThemeColor(name string, theme_type string) Color {
	return self.Runtime.Window_get_theme_color(Window{self}, name, theme_type)
}
func (self methodsWindow) GetThemeConstant(name string, theme_type string) int64 {
	return self.Runtime.Window_get_theme_constant(Window{self}, name, theme_type)
}
func (self methodsWindow) HasThemeIconOverride(name string) bool {
	return self.Runtime.Window_has_theme_icon_override(Window{self}, name)
}
func (self methodsWindow) HasThemeStyleboxOverride(name string) bool {
	return self.Runtime.Window_has_theme_stylebox_override(Window{self}, name)
}
func (self methodsWindow) HasThemeFontOverride(name string) bool {
	return self.Runtime.Window_has_theme_font_override(Window{self}, name)
}
func (self methodsWindow) HasThemeFontSizeOverride(name string) bool {
	return self.Runtime.Window_has_theme_font_size_override(Window{self}, name)
}
func (self methodsWindow) HasThemeColorOverride(name string) bool {
	return self.Runtime.Window_has_theme_color_override(Window{self}, name)
}
func (self methodsWindow) HasThemeConstantOverride(name string) bool {
	return self.Runtime.Window_has_theme_constant_override(Window{self}, name)
}
func (self methodsWindow) HasThemeIcon(name string, theme_type string) bool {
	return self.Runtime.Window_has_theme_icon(Window{self}, name, theme_type)
}
func (self methodsWindow) HasThemeStylebox(name string, theme_type string) bool {
	return self.Runtime.Window_has_theme_stylebox(Window{self}, name, theme_type)
}
func (self methodsWindow) HasThemeFont(name string, theme_type string) bool {
	return self.Runtime.Window_has_theme_font(Window{self}, name, theme_type)
}
func (self methodsWindow) HasThemeFontSize(name string, theme_type string) bool {
	return self.Runtime.Window_has_theme_font_size(Window{self}, name, theme_type)
}
func (self methodsWindow) HasThemeColor(name string, theme_type string) bool {
	return self.Runtime.Window_has_theme_color(Window{self}, name, theme_type)
}
func (self methodsWindow) HasThemeConstant(name string, theme_type string) bool {
	return self.Runtime.Window_has_theme_constant(Window{self}, name, theme_type)
}
func (self methodsWindow) GetThemeDefaultBaseScale() Float {
	return self.Runtime.Window_get_theme_default_base_scale(Window{self})
}
func (self methodsWindow) GetThemeDefaultFont() Font {
	return self.Runtime.Window_get_theme_default_font(Window{self})
}
func (self methodsWindow) GetThemeDefaultFontSize() int64 {
	return self.Runtime.Window_get_theme_default_font_size(Window{self})
}
func (self methodsWindow) SetLayoutDirection(direction WindowLayoutDirection) {
	self.Runtime.Window_set_layout_direction(Window{self}, direction)
}
func (self methodsWindow) GetLayoutDirection() WindowLayoutDirection {
	return self.Runtime.Window_get_layout_direction(Window{self})
}
func (self methodsWindow) IsLayoutRtl() bool {
	return self.Runtime.Window_is_layout_rtl(Window{self})
}
func (self methodsWindow) SetAutoTranslate(enable bool) {
	self.Runtime.Window_set_auto_translate(Window{self}, enable)
}
func (self methodsWindow) IsAutoTranslating() bool {
	return self.Runtime.Window_is_auto_translating(Window{self})
}
func (self methodsWindow) Popup(rect Rect2i) {
	self.Runtime.Window_popup(Window{self}, rect)
}
func (self methodsWindow) PopupOnParent(parent_rect Rect2i) {
	self.Runtime.Window_popup_on_parent(Window{self}, parent_rect)
}
func (self methodsWindow) PopupCentered(minsize Vector2i) {
	self.Runtime.Window_popup_centered(Window{self}, minsize)
}
func (self methodsWindow) PopupCenteredRatio(ratio Float) {
	self.Runtime.Window_popup_centered_ratio(Window{self}, ratio)
}
func (self methodsWindow) PopupCenteredClamped(minsize Vector2i, fallback_ratio Float) {
	self.Runtime.Window_popup_centered_clamped(Window{self}, minsize, fallback_ratio)
}
func (self methodsWindow) PopupExclusive(from_node Node, rect Rect2i) {
	self.Runtime.Window_popup_exclusive(Window{self}, from_node, rect)
}
func (self methodsWindow) PopupExclusiveOnParent(from_node Node, parent_rect Rect2i) {
	self.Runtime.Window_popup_exclusive_on_parent(Window{self}, from_node, parent_rect)
}
func (self methodsWindow) PopupExclusiveCentered(from_node Node, minsize Vector2i) {
	self.Runtime.Window_popup_exclusive_centered(Window{self}, from_node, minsize)
}
func (self methodsWindow) PopupExclusiveCenteredRatio(from_node Node, ratio Float) {
	self.Runtime.Window_popup_exclusive_centered_ratio(Window{self}, from_node, ratio)
}
func (self methodsWindow) PopupExclusiveCenteredClamped(from_node Node, minsize Vector2i, fallback_ratio Float) {
	self.Runtime.Window_popup_exclusive_centered_clamped(Window{self}, from_node, minsize, fallback_ratio)
}

type methodsWorkerThreadPool struct {
	_ [0]*methodsWorkerThreadPool
	class
}

func (self WorkerThreadPool) Object() Object {
	var parent Object
	parent.class = self.class
	return parent
}
func (self methodsWorkerThreadPool) AddTask(action Callable, high_priority bool, description string) int64 {
	return self.Runtime.WorkerThreadPool_add_task(WorkerThreadPool{self}, action, high_priority, description)
}
func (self methodsWorkerThreadPool) IsTaskCompleted(task_id int64) bool {
	return self.Runtime.WorkerThreadPool_is_task_completed(WorkerThreadPool{self}, task_id)
}
func (self methodsWorkerThreadPool) WaitForTaskCompletion(task_id int64) int64 {
	return self.Runtime.WorkerThreadPool_wait_for_task_completion(WorkerThreadPool{self}, task_id)
}
func (self methodsWorkerThreadPool) AddGroupTask(action Callable, elements int64, tasks_needed int64, high_priority bool, description string) int64 {
	return self.Runtime.WorkerThreadPool_add_group_task(WorkerThreadPool{self}, action, elements, tasks_needed, high_priority, description)
}
func (self methodsWorkerThreadPool) IsGroupTaskCompleted(group_id int64) bool {
	return self.Runtime.WorkerThreadPool_is_group_task_completed(WorkerThreadPool{self}, group_id)
}
func (self methodsWorkerThreadPool) GetGroupProcessedElementCount(group_id int64) int64 {
	return self.Runtime.WorkerThreadPool_get_group_processed_element_count(WorkerThreadPool{self}, group_id)
}
func (self methodsWorkerThreadPool) WaitForGroupTaskCompletion(group_id int64) {
	self.Runtime.WorkerThreadPool_wait_for_group_task_completion(WorkerThreadPool{self}, group_id)
}

type methodsWorld2D struct {
	_ [0]*methodsWorld2D
	class
}

func (self World2D) Resource() Resource {
	var parent Resource
	parent.class = self.class
	return parent
}
func (self methodsWorld2D) GetCanvas() RID {
	return self.Runtime.World2D_get_canvas(World2D{self})
}
func (self methodsWorld2D) GetSpace() RID {
	return self.Runtime.World2D_get_space(World2D{self})
}
func (self methodsWorld2D) GetNavigationMap() RID {
	return self.Runtime.World2D_get_navigation_map(World2D{self})
}
func (self methodsWorld2D) GetDirectSpaceState() PhysicsDirectSpaceState2D {
	return self.Runtime.World2D_get_direct_space_state(World2D{self})
}

type methodsWorld3D struct {
	_ [0]*methodsWorld3D
	class
}

func (self World3D) Resource() Resource {
	var parent Resource
	parent.class = self.class
	return parent
}
func (self methodsWorld3D) GetSpace() RID {
	return self.Runtime.World3D_get_space(World3D{self})
}
func (self methodsWorld3D) GetNavigationMap() RID {
	return self.Runtime.World3D_get_navigation_map(World3D{self})
}
func (self methodsWorld3D) GetScenario() RID {
	return self.Runtime.World3D_get_scenario(World3D{self})
}
func (self methodsWorld3D) SetEnvironment(env Environment) {
	self.Runtime.World3D_set_environment(World3D{self}, env)
}
func (self methodsWorld3D) GetEnvironment() Environment {
	return self.Runtime.World3D_get_environment(World3D{self})
}
func (self methodsWorld3D) SetFallbackEnvironment(env Environment) {
	self.Runtime.World3D_set_fallback_environment(World3D{self}, env)
}
func (self methodsWorld3D) GetFallbackEnvironment() Environment {
	return self.Runtime.World3D_get_fallback_environment(World3D{self})
}
func (self methodsWorld3D) SetCameraAttributes(attributes CameraAttributes) {
	self.Runtime.World3D_set_camera_attributes(World3D{self}, attributes)
}
func (self methodsWorld3D) GetCameraAttributes() CameraAttributes {
	return self.Runtime.World3D_get_camera_attributes(World3D{self})
}
func (self methodsWorld3D) GetDirectSpaceState() PhysicsDirectSpaceState3D {
	return self.Runtime.World3D_get_direct_space_state(World3D{self})
}

type methodsWorldBoundaryShape2D struct {
	_ [0]*methodsWorldBoundaryShape2D
	class
}

func (self WorldBoundaryShape2D) Shape2D() Shape2D {
	var parent Shape2D
	parent.class = self.class
	return parent
}
func (self methodsWorldBoundaryShape2D) SetNormal(normal Vector2) {
	self.Runtime.WorldBoundaryShape2D_set_normal(WorldBoundaryShape2D{self}, normal)
}
func (self methodsWorldBoundaryShape2D) GetNormal() Vector2 {
	return self.Runtime.WorldBoundaryShape2D_get_normal(WorldBoundaryShape2D{self})
}
func (self methodsWorldBoundaryShape2D) SetDistance(distance Float) {
	self.Runtime.WorldBoundaryShape2D_set_distance(WorldBoundaryShape2D{self}, distance)
}
func (self methodsWorldBoundaryShape2D) GetDistance() Float {
	return self.Runtime.WorldBoundaryShape2D_get_distance(WorldBoundaryShape2D{self})
}

type methodsWorldBoundaryShape3D struct {
	_ [0]*methodsWorldBoundaryShape3D
	class
}

func (self WorldBoundaryShape3D) Shape3D() Shape3D {
	var parent Shape3D
	parent.class = self.class
	return parent
}
func (self methodsWorldBoundaryShape3D) SetPlane(plane Plane) {
	self.Runtime.WorldBoundaryShape3D_set_plane(WorldBoundaryShape3D{self}, plane)
}
func (self methodsWorldBoundaryShape3D) GetPlane() Plane {
	return self.Runtime.WorldBoundaryShape3D_get_plane(WorldBoundaryShape3D{self})
}

type methodsWorldEnvironment struct {
	_ [0]*methodsWorldEnvironment
	class
}

func (self WorldEnvironment) Node() Node { var parent Node; parent.class = self.class; return parent }
func (self methodsWorldEnvironment) SetEnvironment(env Environment) {
	self.Runtime.WorldEnvironment_set_environment(WorldEnvironment{self}, env)
}
func (self methodsWorldEnvironment) GetEnvironment() Environment {
	return self.Runtime.WorldEnvironment_get_environment(WorldEnvironment{self})
}
func (self methodsWorldEnvironment) SetCameraAttributes(camera_attributes CameraAttributes) {
	self.Runtime.WorldEnvironment_set_camera_attributes(WorldEnvironment{self}, camera_attributes)
}
func (self methodsWorldEnvironment) GetCameraAttributes() CameraAttributes {
	return self.Runtime.WorldEnvironment_get_camera_attributes(WorldEnvironment{self})
}

type methodsX509Certificate struct {
	_ [0]*methodsX509Certificate
	class
}

func (self X509Certificate) Resource() Resource {
	var parent Resource
	parent.class = self.class
	return parent
}
func (self methodsX509Certificate) Save(path string) int64 {
	return self.Runtime.X509Certificate_save(X509Certificate{self}, path)
}
func (self methodsX509Certificate) Load(path string) int64 {
	return self.Runtime.X509Certificate_load(X509Certificate{self}, path)
}
func (self methodsX509Certificate) SaveToString() string {
	return self.Runtime.X509Certificate_save_to_string(X509Certificate{self})
}
func (self methodsX509Certificate) LoadFromString(s string) int64 {
	return self.Runtime.X509Certificate_load_from_string(X509Certificate{self}, s)
}

type methodsXMLParser struct {
	_ [0]*methodsXMLParser
	class
}

func (self XMLParser) RefCounted() RefCounted {
	var parent RefCounted
	parent.class = self.class
	return parent
}
func (self methodsXMLParser) Read() int64 {
	return self.Runtime.XMLParser_read(XMLParser{self})
}
func (self methodsXMLParser) GetNodeType() XMLParserNodeType {
	return self.Runtime.XMLParser_get_node_type(XMLParser{self})
}
func (self methodsXMLParser) GetNodeName() string {
	return self.Runtime.XMLParser_get_node_name(XMLParser{self})
}
func (self methodsXMLParser) GetNodeData() string {
	return self.Runtime.XMLParser_get_node_data(XMLParser{self})
}
func (self methodsXMLParser) GetNodeOffset() int64 {
	return self.Runtime.XMLParser_get_node_offset(XMLParser{self})
}
func (self methodsXMLParser) GetAttributeCount() int64 {
	return self.Runtime.XMLParser_get_attribute_count(XMLParser{self})
}
func (self methodsXMLParser) GetAttributeName(idx int64) string {
	return self.Runtime.XMLParser_get_attribute_name(XMLParser{self}, idx)
}
func (self methodsXMLParser) GetAttributeValue(idx int64) string {
	return self.Runtime.XMLParser_get_attribute_value(XMLParser{self}, idx)
}
func (self methodsXMLParser) HasAttribute(name string) bool {
	return self.Runtime.XMLParser_has_attribute(XMLParser{self}, name)
}
func (self methodsXMLParser) GetNamedAttributeValue(name string) string {
	return self.Runtime.XMLParser_get_named_attribute_value(XMLParser{self}, name)
}
func (self methodsXMLParser) GetNamedAttributeValueSafe(name string) string {
	return self.Runtime.XMLParser_get_named_attribute_value_safe(XMLParser{self}, name)
}
func (self methodsXMLParser) IsEmpty() bool {
	return self.Runtime.XMLParser_is_empty(XMLParser{self})
}
func (self methodsXMLParser) GetCurrentLine() int64 {
	return self.Runtime.XMLParser_get_current_line(XMLParser{self})
}
func (self methodsXMLParser) SkipSection() {
	self.Runtime.XMLParser_skip_section(XMLParser{self})
}
func (self methodsXMLParser) SeekTo(position int64) int64 {
	return self.Runtime.XMLParser_seek(XMLParser{self}, position)
}
func (self methodsXMLParser) Open(file string) int64 {
	return self.Runtime.XMLParser_open(XMLParser{self}, file)
}
func (self methodsXMLParser) OpenBuffer(buffer PackedByteArray) int64 {
	return self.Runtime.XMLParser_open_buffer(XMLParser{self}, buffer)
}

type methodsXRAnchor3D struct {
	_ [0]*methodsXRAnchor3D
	class
}

func (self XRAnchor3D) XRNode3D() XRNode3D {
	var parent XRNode3D
	parent.class = self.class
	return parent
}
func (self methodsXRAnchor3D) GetSize() Vector3 {
	return self.Runtime.XRAnchor3D_get_size(XRAnchor3D{self})
}
func (self methodsXRAnchor3D) GetPlane() Plane {
	return self.Runtime.XRAnchor3D_get_plane(XRAnchor3D{self})
}

type methodsXRCamera3D struct {
	_ [0]*methodsXRCamera3D
	class
}

func (self XRCamera3D) Camera3D() Camera3D {
	var parent Camera3D
	parent.class = self.class
	return parent
}

type methodsXRController3D struct {
	_ [0]*methodsXRController3D
	class
}

func (self XRController3D) XRNode3D() XRNode3D {
	var parent XRNode3D
	parent.class = self.class
	return parent
}
func (self methodsXRController3D) IsButtonPressed(name string) bool {
	return self.Runtime.XRController3D_is_button_pressed(XRController3D{self}, name)
}
func (self methodsXRController3D) GetInput(name string) any {
	return self.Runtime.XRController3D_get_input(XRController3D{self}, name)
}
func (self methodsXRController3D) GetFloat(name string) Float {
	return self.Runtime.XRController3D_get_float(XRController3D{self}, name)
}
func (self methodsXRController3D) GetVector2(name string) Vector2 {
	return self.Runtime.XRController3D_get_vector2(XRController3D{self}, name)
}
func (self methodsXRController3D) GetTrackerHand() XRPositionalTrackerTrackerHand {
	return self.Runtime.XRController3D_get_tracker_hand(XRController3D{self})
}

type methodsXRInterface struct {
	_ [0]*methodsXRInterface
	class
}

func (self XRInterface) RefCounted() RefCounted {
	var parent RefCounted
	parent.class = self.class
	return parent
}
func (self methodsXRInterface) GetName() string {
	return self.Runtime.XRInterface_get_name(XRInterface{self})
}
func (self methodsXRInterface) GetCapabilities() int64 {
	return self.Runtime.XRInterface_get_capabilities(XRInterface{self})
}
func (self methodsXRInterface) IsPrimary() bool {
	return self.Runtime.XRInterface_is_primary(XRInterface{self})
}
func (self methodsXRInterface) SetPrimary(primary bool) {
	self.Runtime.XRInterface_set_primary(XRInterface{self}, primary)
}
func (self methodsXRInterface) IsInitialized() bool {
	return self.Runtime.XRInterface_is_initialized(XRInterface{self})
}
func (self methodsXRInterface) Initialize() bool {
	return self.Runtime.XRInterface_initialize(XRInterface{self})
}
func (self methodsXRInterface) Uninitialize() {
	self.Runtime.XRInterface_uninitialize(XRInterface{self})
}
func (self methodsXRInterface) GetSystemInfo() Dictionary {
	return self.Runtime.XRInterface_get_system_info(XRInterface{self})
}
func (self methodsXRInterface) GetTrackingStatus() XRInterfaceTrackingStatus {
	return self.Runtime.XRInterface_get_tracking_status(XRInterface{self})
}
func (self methodsXRInterface) GetRenderTargetSize() Vector2 {
	return self.Runtime.XRInterface_get_render_target_size(XRInterface{self})
}
func (self methodsXRInterface) GetViewCount() int64 {
	return self.Runtime.XRInterface_get_view_count(XRInterface{self})
}
func (self methodsXRInterface) TriggerHapticPulse(action_name string, tracker_name string, frequency Float, amplitude Float, duration_sec Float, delay_sec Float) {
	self.Runtime.XRInterface_trigger_haptic_pulse(XRInterface{self}, action_name, tracker_name, frequency, amplitude, duration_sec, delay_sec)
}
func (self methodsXRInterface) SupportsPlayAreaMode(mode XRInterfacePlayAreaMode) bool {
	return self.Runtime.XRInterface_supports_play_area_mode(XRInterface{self}, mode)
}
func (self methodsXRInterface) GetPlayAreaMode() XRInterfacePlayAreaMode {
	return self.Runtime.XRInterface_get_play_area_mode(XRInterface{self})
}
func (self methodsXRInterface) SetPlayAreaMode(mode XRInterfacePlayAreaMode) bool {
	return self.Runtime.XRInterface_set_play_area_mode(XRInterface{self}, mode)
}
func (self methodsXRInterface) GetPlayArea() PackedVector3Array {
	return self.Runtime.XRInterface_get_play_area(XRInterface{self})
}
func (self methodsXRInterface) GetAnchorDetectionIsEnabled() bool {
	return self.Runtime.XRInterface_get_anchor_detection_is_enabled(XRInterface{self})
}
func (self methodsXRInterface) SetAnchorDetectionIsEnabled(enable bool) {
	self.Runtime.XRInterface_set_anchor_detection_is_enabled(XRInterface{self}, enable)
}
func (self methodsXRInterface) GetCameraFeedId() int64 {
	return self.Runtime.XRInterface_get_camera_feed_id(XRInterface{self})
}
func (self methodsXRInterface) IsPassthroughSupported() bool {
	return self.Runtime.XRInterface_is_passthrough_supported(XRInterface{self})
}
func (self methodsXRInterface) IsPassthroughEnabled() bool {
	return self.Runtime.XRInterface_is_passthrough_enabled(XRInterface{self})
}
func (self methodsXRInterface) StartPassthrough() bool {
	return self.Runtime.XRInterface_start_passthrough(XRInterface{self})
}
func (self methodsXRInterface) StopPassthrough() {
	self.Runtime.XRInterface_stop_passthrough(XRInterface{self})
}
func (self methodsXRInterface) GetTransformForView(view int64, cam_transform Transform3D) Transform3D {
	return self.Runtime.XRInterface_get_transform_for_view(XRInterface{self}, view, cam_transform)
}
func (self methodsXRInterface) GetProjectionForView(view int64, aspect Float, near Float, far Float) Projection {
	return self.Runtime.XRInterface_get_projection_for_view(XRInterface{self}, view, aspect, near, far)
}
func (self methodsXRInterface) GetSupportedEnvironmentBlendModes() Array {
	return self.Runtime.XRInterface_get_supported_environment_blend_modes(XRInterface{self})
}
func (self methodsXRInterface) SetEnvironmentBlendMode(mode XRInterfaceEnvironmentBlendMode) bool {
	return self.Runtime.XRInterface_set_environment_blend_mode(XRInterface{self}, mode)
}
func (self methodsXRInterface) GetEnvironmentBlendMode() XRInterfaceEnvironmentBlendMode {
	return self.Runtime.XRInterface_get_environment_blend_mode(XRInterface{self})
}

type methodsXRInterfaceExtension struct {
	_ [0]*methodsXRInterfaceExtension
	class
}

func (self XRInterfaceExtension) XRInterface() XRInterface {
	var parent XRInterface
	parent.class = self.class
	return parent
}
func (self methodsXRInterfaceExtension) GetColorTexture() RID {
	return self.Runtime.XRInterfaceExtension_get_color_texture(XRInterfaceExtension{self})
}
func (self methodsXRInterfaceExtension) GetDepthTexture() RID {
	return self.Runtime.XRInterfaceExtension_get_depth_texture(XRInterfaceExtension{self})
}
func (self methodsXRInterfaceExtension) GetVelocityTexture() RID {
	return self.Runtime.XRInterfaceExtension_get_velocity_texture(XRInterfaceExtension{self})
}
func (self methodsXRInterfaceExtension) AddBlit(render_target RID, src_rect Rect2, dst_rect Rect2i, use_layer bool, layer int64, apply_lens_distortion bool, eye_center Vector2, k1 Float, k2 Float, upscale Float, aspect_ratio Float) {
	self.Runtime.XRInterfaceExtension_add_blit(XRInterfaceExtension{self}, render_target, src_rect, dst_rect, use_layer, layer, apply_lens_distortion, eye_center, k1, k2, upscale, aspect_ratio)
}
func (self methodsXRInterfaceExtension) GetRenderTargetTexture(render_target RID) RID {
	return self.Runtime.XRInterfaceExtension_get_render_target_texture(XRInterfaceExtension{self}, render_target)
}

type methodsXRNode3D struct {
	_ [0]*methodsXRNode3D
	class
}

func (self XRNode3D) Node3D() Node3D { var parent Node3D; parent.class = self.class; return parent }
func (self methodsXRNode3D) SetTracker(tracker_name string) {
	self.Runtime.XRNode3D_set_tracker(XRNode3D{self}, tracker_name)
}
func (self methodsXRNode3D) GetTracker() string {
	return self.Runtime.XRNode3D_get_tracker(XRNode3D{self})
}
func (self methodsXRNode3D) SetPoseName(pose string) {
	self.Runtime.XRNode3D_set_pose_name(XRNode3D{self}, pose)
}
func (self methodsXRNode3D) GetPoseName() string {
	return self.Runtime.XRNode3D_get_pose_name(XRNode3D{self})
}
func (self methodsXRNode3D) GetIsActive() bool {
	return self.Runtime.XRNode3D_get_is_active(XRNode3D{self})
}
func (self methodsXRNode3D) GetHasTrackingData() bool {
	return self.Runtime.XRNode3D_get_has_tracking_data(XRNode3D{self})
}
func (self methodsXRNode3D) GetPose() XRPose {
	return self.Runtime.XRNode3D_get_pose(XRNode3D{self})
}
func (self methodsXRNode3D) TriggerHapticPulse(action_name string, frequency Float, amplitude Float, duration_sec Float, delay_sec Float) {
	self.Runtime.XRNode3D_trigger_haptic_pulse(XRNode3D{self}, action_name, frequency, amplitude, duration_sec, delay_sec)
}

type methodsXROrigin3D struct {
	_ [0]*methodsXROrigin3D
	class
}

func (self XROrigin3D) Node3D() Node3D { var parent Node3D; parent.class = self.class; return parent }
func (self methodsXROrigin3D) SetWorldScale(world_scale Float) {
	self.Runtime.XROrigin3D_set_world_scale(XROrigin3D{self}, world_scale)
}
func (self methodsXROrigin3D) GetWorldScale() Float {
	return self.Runtime.XROrigin3D_get_world_scale(XROrigin3D{self})
}
func (self methodsXROrigin3D) SetCurrent(enabled bool) {
	self.Runtime.XROrigin3D_set_current(XROrigin3D{self}, enabled)
}
func (self methodsXROrigin3D) IsCurrent() bool {
	return self.Runtime.XROrigin3D_is_current(XROrigin3D{self})
}

type methodsXRPose struct {
	_ [0]*methodsXRPose
	class
}

func (self XRPose) RefCounted() RefCounted {
	var parent RefCounted
	parent.class = self.class
	return parent
}
func (self methodsXRPose) SetHasTrackingData(has_tracking_data bool) {
	self.Runtime.XRPose_set_has_tracking_data(XRPose{self}, has_tracking_data)
}
func (self methodsXRPose) GetHasTrackingData() bool {
	return self.Runtime.XRPose_get_has_tracking_data(XRPose{self})
}
func (self methodsXRPose) SetName(name string) {
	self.Runtime.XRPose_set_name(XRPose{self}, name)
}
func (self methodsXRPose) GetName() string {
	return self.Runtime.XRPose_get_name(XRPose{self})
}
func (self methodsXRPose) SetTransform(transform Transform3D) {
	self.Runtime.XRPose_set_transform(XRPose{self}, transform)
}
func (self methodsXRPose) GetTransform() Transform3D {
	return self.Runtime.XRPose_get_transform(XRPose{self})
}
func (self methodsXRPose) GetAdjustedTransform() Transform3D {
	return self.Runtime.XRPose_get_adjusted_transform(XRPose{self})
}
func (self methodsXRPose) SetLinearVelocity(velocity Vector3) {
	self.Runtime.XRPose_set_linear_velocity(XRPose{self}, velocity)
}
func (self methodsXRPose) GetLinearVelocity() Vector3 {
	return self.Runtime.XRPose_get_linear_velocity(XRPose{self})
}
func (self methodsXRPose) SetAngularVelocity(velocity Vector3) {
	self.Runtime.XRPose_set_angular_velocity(XRPose{self}, velocity)
}
func (self methodsXRPose) GetAngularVelocity() Vector3 {
	return self.Runtime.XRPose_get_angular_velocity(XRPose{self})
}
func (self methodsXRPose) SetTrackingConfidence(tracking_confidence XRPoseTrackingConfidence) {
	self.Runtime.XRPose_set_tracking_confidence(XRPose{self}, tracking_confidence)
}
func (self methodsXRPose) GetTrackingConfidence() XRPoseTrackingConfidence {
	return self.Runtime.XRPose_get_tracking_confidence(XRPose{self})
}

type methodsXRPositionalTracker struct {
	_ [0]*methodsXRPositionalTracker
	class
}

func (self XRPositionalTracker) RefCounted() RefCounted {
	var parent RefCounted
	parent.class = self.class
	return parent
}
func (self methodsXRPositionalTracker) GetTrackerType() XRServerTrackerType {
	return self.Runtime.XRPositionalTracker_get_tracker_type(XRPositionalTracker{self})
}
func (self methodsXRPositionalTracker) SetTrackerType(atype XRServerTrackerType) {
	self.Runtime.XRPositionalTracker_set_tracker_type(XRPositionalTracker{self}, atype)
}
func (self methodsXRPositionalTracker) GetTrackerName() string {
	return self.Runtime.XRPositionalTracker_get_tracker_name(XRPositionalTracker{self})
}
func (self methodsXRPositionalTracker) SetTrackerName(name string) {
	self.Runtime.XRPositionalTracker_set_tracker_name(XRPositionalTracker{self}, name)
}
func (self methodsXRPositionalTracker) GetTrackerDesc() string {
	return self.Runtime.XRPositionalTracker_get_tracker_desc(XRPositionalTracker{self})
}
func (self methodsXRPositionalTracker) SetTrackerDesc(description string) {
	self.Runtime.XRPositionalTracker_set_tracker_desc(XRPositionalTracker{self}, description)
}
func (self methodsXRPositionalTracker) GetTrackerProfile() string {
	return self.Runtime.XRPositionalTracker_get_tracker_profile(XRPositionalTracker{self})
}
func (self methodsXRPositionalTracker) SetTrackerProfile(profile string) {
	self.Runtime.XRPositionalTracker_set_tracker_profile(XRPositionalTracker{self}, profile)
}
func (self methodsXRPositionalTracker) GetTrackerHand() XRPositionalTrackerTrackerHand {
	return self.Runtime.XRPositionalTracker_get_tracker_hand(XRPositionalTracker{self})
}
func (self methodsXRPositionalTracker) SetTrackerHand(hand XRPositionalTrackerTrackerHand) {
	self.Runtime.XRPositionalTracker_set_tracker_hand(XRPositionalTracker{self}, hand)
}
func (self methodsXRPositionalTracker) HasPose(name string) bool {
	return self.Runtime.XRPositionalTracker_has_pose(XRPositionalTracker{self}, name)
}
func (self methodsXRPositionalTracker) GetPose(name string) XRPose {
	return self.Runtime.XRPositionalTracker_get_pose(XRPositionalTracker{self}, name)
}
func (self methodsXRPositionalTracker) InvalidatePose(name string) {
	self.Runtime.XRPositionalTracker_invalidate_pose(XRPositionalTracker{self}, name)
}
func (self methodsXRPositionalTracker) SetPose(name string, transform Transform3D, linear_velocity Vector3, angular_velocity Vector3, tracking_confidence XRPoseTrackingConfidence) {
	self.Runtime.XRPositionalTracker_set_pose(XRPositionalTracker{self}, name, transform, linear_velocity, angular_velocity, tracking_confidence)
}
func (self methodsXRPositionalTracker) GetInput(name string) any {
	return self.Runtime.XRPositionalTracker_get_input(XRPositionalTracker{self}, name)
}
func (self methodsXRPositionalTracker) SetInput(name string, value any) {
	self.Runtime.XRPositionalTracker_set_input(XRPositionalTracker{self}, name, value)
}

type methodsXRServer struct {
	_ [0]*methodsXRServer
	class
}

func (self XRServer) Object() Object { var parent Object; parent.class = self.class; return parent }
func (self methodsXRServer) GetWorldScale() Float {
	return self.Runtime.XRServer_get_world_scale(XRServer{self})
}
func (self methodsXRServer) SetWorldScale(scale Float) {
	self.Runtime.XRServer_set_world_scale(XRServer{self}, scale)
}
func (self methodsXRServer) GetWorldOrigin() Transform3D {
	return self.Runtime.XRServer_get_world_origin(XRServer{self})
}
func (self methodsXRServer) SetWorldOrigin(world_origin Transform3D) {
	self.Runtime.XRServer_set_world_origin(XRServer{self}, world_origin)
}
func (self methodsXRServer) GetReferenceFrame() Transform3D {
	return self.Runtime.XRServer_get_reference_frame(XRServer{self})
}
func (self methodsXRServer) CenterOnHmd(rotation_mode XRServerRotationMode, keep_height bool) {
	self.Runtime.XRServer_center_on_hmd(XRServer{self}, rotation_mode, keep_height)
}
func (self methodsXRServer) GetHmdTransform() Transform3D {
	return self.Runtime.XRServer_get_hmd_transform(XRServer{self})
}
func (self methodsXRServer) AddInterface(intf XRInterface) {
	self.Runtime.XRServer_add_interface(XRServer{self}, intf)
}
func (self methodsXRServer) GetInterfaceCount() int64 {
	return self.Runtime.XRServer_get_interface_count(XRServer{self})
}
func (self methodsXRServer) RemoveInterface(intf XRInterface) {
	self.Runtime.XRServer_remove_interface(XRServer{self}, intf)
}
func (self methodsXRServer) GetInterface(idx int64) XRInterface {
	return self.Runtime.XRServer_get_interface(XRServer{self}, idx)
}
func (self methodsXRServer) GetInterfaces() ArrayOf[Dictionary] {
	return self.Runtime.XRServer_get_interfaces(XRServer{self})
}
func (self methodsXRServer) FindInterface(name string) XRInterface {
	return self.Runtime.XRServer_find_interface(XRServer{self}, name)
}
func (self methodsXRServer) AddTracker(tracker XRPositionalTracker) {
	self.Runtime.XRServer_add_tracker(XRServer{self}, tracker)
}
func (self methodsXRServer) RemoveTracker(tracker XRPositionalTracker) {
	self.Runtime.XRServer_remove_tracker(XRServer{self}, tracker)
}
func (self methodsXRServer) GetTrackers(tracker_types int64) Dictionary {
	return self.Runtime.XRServer_get_trackers(XRServer{self}, tracker_types)
}
func (self methodsXRServer) GetTracker(tracker_name string) XRPositionalTracker {
	return self.Runtime.XRServer_get_tracker(XRServer{self}, tracker_name)
}
func (self methodsXRServer) GetPrimaryInterface() XRInterface {
	return self.Runtime.XRServer_get_primary_interface(XRServer{self})
}
func (self methodsXRServer) SetPrimaryInterface(intf XRInterface) {
	self.Runtime.XRServer_set_primary_interface(XRServer{self}, intf)
}

type methodsZIPPacker struct {
	_ [0]*methodsZIPPacker
	class
}

func (self ZIPPacker) RefCounted() RefCounted {
	var parent RefCounted
	parent.class = self.class
	return parent
}
func (self methodsZIPPacker) Open(path string, append ZIPPackerZipAppend) int64 {
	return self.Runtime.ZIPPacker_open(ZIPPacker{self}, path, append)
}
func (self methodsZIPPacker) StartFile(path string) int64 {
	return self.Runtime.ZIPPacker_start_file(ZIPPacker{self}, path)
}
func (self methodsZIPPacker) WriteFile(data PackedByteArray) int64 {
	return self.Runtime.ZIPPacker_write_file(ZIPPacker{self}, data)
}
func (self methodsZIPPacker) CloseFile() int64 {
	return self.Runtime.ZIPPacker_close_file(ZIPPacker{self})
}
func (self methodsZIPPacker) Close() int64 {
	return self.Runtime.ZIPPacker_close(ZIPPacker{self})
}

type methodsZIPReader struct {
	_ [0]*methodsZIPReader
	class
}

func (self ZIPReader) RefCounted() RefCounted {
	var parent RefCounted
	parent.class = self.class
	return parent
}
func (self methodsZIPReader) Open(path string) int64 {
	return self.Runtime.ZIPReader_open(ZIPReader{self}, path)
}
func (self methodsZIPReader) Close() int64 {
	return self.Runtime.ZIPReader_close(ZIPReader{self})
}
func (self methodsZIPReader) GetFiles() PackedStringArray {
	return self.Runtime.ZIPReader_get_files(ZIPReader{self})
}
func (self methodsZIPReader) ReadFile(path string, case_sensitive bool) PackedByteArray {
	return self.Runtime.ZIPReader_read_file(ZIPReader{self}, path, case_sensitive)
}
func (self methodsZIPReader) FileExists(path string, case_sensitive bool) bool {
	return self.Runtime.ZIPReader_file_exists(ZIPReader{self}, path, case_sensitive)
}
