//go:build !generate

// Code generated by the generate package DO NOT EDIT
package gd

type extendsAESContext struct {
	_ [0]*extendsAESContext
	class
}

func (self AESContext) RefCounted() RefCounted {
	var parent RefCounted
	parent.class = self.class
	return parent
}
func (self AESContext) Start(mode AESContextMode, key PackedByteArray, iv PackedByteArray) int64 {
	return self.Runtime.AESContext_start(self, mode, key, iv)
}
func (self AESContext) Update(src PackedByteArray) PackedByteArray {
	return self.Runtime.AESContext_update(self, src)
}
func (self AESContext) GetIvState() PackedByteArray {
	return self.Runtime.AESContext_get_iv_state(self)
}
func (self AESContext) Finish() {
	self.Runtime.AESContext_finish(self)
}

type extendsAStar2D struct {
	_ [0]*extendsAStar2D
	class
}

func (self AStar2D) RefCounted() RefCounted {
	var parent RefCounted
	parent.class = self.class
	return parent
}
func (self AStar2D) GetAvailablePointId() int64 {
	return self.Runtime.AStar2D_get_available_point_id(self)
}
func (self AStar2D) AddPoint(id int64, position Vector2, weight_scale Float) {
	self.Runtime.AStar2D_add_point(self, id, position, weight_scale)
}
func (self AStar2D) GetPointPosition(id int64) Vector2 {
	return self.Runtime.AStar2D_get_point_position(self, id)
}
func (self AStar2D) SetPointPosition(id int64, position Vector2) {
	self.Runtime.AStar2D_set_point_position(self, id, position)
}
func (self AStar2D) GetPointWeightScale(id int64) Float {
	return self.Runtime.AStar2D_get_point_weight_scale(self, id)
}
func (self AStar2D) SetPointWeightScale(id int64, weight_scale Float) {
	self.Runtime.AStar2D_set_point_weight_scale(self, id, weight_scale)
}
func (self AStar2D) RemovePoint(id int64) {
	self.Runtime.AStar2D_remove_point(self, id)
}
func (self AStar2D) HasPoint(id int64) bool {
	return self.Runtime.AStar2D_has_point(self, id)
}
func (self AStar2D) GetPointConnections(id int64) PackedInt64Array {
	return self.Runtime.AStar2D_get_point_connections(self, id)
}
func (self AStar2D) GetPointIds() PackedInt64Array {
	return self.Runtime.AStar2D_get_point_ids(self)
}
func (self AStar2D) SetPointDisabled(id int64, disabled bool) {
	self.Runtime.AStar2D_set_point_disabled(self, id, disabled)
}
func (self AStar2D) IsPointDisabled(id int64) bool {
	return self.Runtime.AStar2D_is_point_disabled(self, id)
}
func (self AStar2D) ConnectPoints(id int64, to_id int64, bidirectional bool) {
	self.Runtime.AStar2D_connect_points(self, id, to_id, bidirectional)
}
func (self AStar2D) DisconnectPoints(id int64, to_id int64, bidirectional bool) {
	self.Runtime.AStar2D_disconnect_points(self, id, to_id, bidirectional)
}
func (self AStar2D) ArePointsConnected(id int64, to_id int64, bidirectional bool) bool {
	return self.Runtime.AStar2D_are_points_connected(self, id, to_id, bidirectional)
}
func (self AStar2D) GetPointCount() int64 {
	return self.Runtime.AStar2D_get_point_count(self)
}
func (self AStar2D) GetPointCapacity() int64 {
	return self.Runtime.AStar2D_get_point_capacity(self)
}
func (self AStar2D) ReserveSpace(num_nodes int64) {
	self.Runtime.AStar2D_reserve_space(self, num_nodes)
}
func (self AStar2D) Clear() {
	self.Runtime.AStar2D_clear(self)
}
func (self AStar2D) GetClosestPoint(to_position Vector2, include_disabled bool) int64 {
	return self.Runtime.AStar2D_get_closest_point(self, to_position, include_disabled)
}
func (self AStar2D) GetClosestPositionInSegment(to_position Vector2) Vector2 {
	return self.Runtime.AStar2D_get_closest_position_in_segment(self, to_position)
}
func (self AStar2D) GetPointPath(from_id int64, to_id int64) PackedVector2Array {
	return self.Runtime.AStar2D_get_point_path(self, from_id, to_id)
}
func (self AStar2D) GetIdPath(from_id int64, to_id int64) PackedInt64Array {
	return self.Runtime.AStar2D_get_id_path(self, from_id, to_id)
}

type extendsAStar3D struct {
	_ [0]*extendsAStar3D
	class
}

func (self AStar3D) RefCounted() RefCounted {
	var parent RefCounted
	parent.class = self.class
	return parent
}
func (self AStar3D) GetAvailablePointId() int64 {
	return self.Runtime.AStar3D_get_available_point_id(self)
}
func (self AStar3D) AddPoint(id int64, position Vector3, weight_scale Float) {
	self.Runtime.AStar3D_add_point(self, id, position, weight_scale)
}
func (self AStar3D) GetPointPosition(id int64) Vector3 {
	return self.Runtime.AStar3D_get_point_position(self, id)
}
func (self AStar3D) SetPointPosition(id int64, position Vector3) {
	self.Runtime.AStar3D_set_point_position(self, id, position)
}
func (self AStar3D) GetPointWeightScale(id int64) Float {
	return self.Runtime.AStar3D_get_point_weight_scale(self, id)
}
func (self AStar3D) SetPointWeightScale(id int64, weight_scale Float) {
	self.Runtime.AStar3D_set_point_weight_scale(self, id, weight_scale)
}
func (self AStar3D) RemovePoint(id int64) {
	self.Runtime.AStar3D_remove_point(self, id)
}
func (self AStar3D) HasPoint(id int64) bool {
	return self.Runtime.AStar3D_has_point(self, id)
}
func (self AStar3D) GetPointConnections(id int64) PackedInt64Array {
	return self.Runtime.AStar3D_get_point_connections(self, id)
}
func (self AStar3D) GetPointIds() PackedInt64Array {
	return self.Runtime.AStar3D_get_point_ids(self)
}
func (self AStar3D) SetPointDisabled(id int64, disabled bool) {
	self.Runtime.AStar3D_set_point_disabled(self, id, disabled)
}
func (self AStar3D) IsPointDisabled(id int64) bool {
	return self.Runtime.AStar3D_is_point_disabled(self, id)
}
func (self AStar3D) ConnectPoints(id int64, to_id int64, bidirectional bool) {
	self.Runtime.AStar3D_connect_points(self, id, to_id, bidirectional)
}
func (self AStar3D) DisconnectPoints(id int64, to_id int64, bidirectional bool) {
	self.Runtime.AStar3D_disconnect_points(self, id, to_id, bidirectional)
}
func (self AStar3D) ArePointsConnected(id int64, to_id int64, bidirectional bool) bool {
	return self.Runtime.AStar3D_are_points_connected(self, id, to_id, bidirectional)
}
func (self AStar3D) GetPointCount() int64 {
	return self.Runtime.AStar3D_get_point_count(self)
}
func (self AStar3D) GetPointCapacity() int64 {
	return self.Runtime.AStar3D_get_point_capacity(self)
}
func (self AStar3D) ReserveSpace(num_nodes int64) {
	self.Runtime.AStar3D_reserve_space(self, num_nodes)
}
func (self AStar3D) Clear() {
	self.Runtime.AStar3D_clear(self)
}
func (self AStar3D) GetClosestPoint(to_position Vector3, include_disabled bool) int64 {
	return self.Runtime.AStar3D_get_closest_point(self, to_position, include_disabled)
}
func (self AStar3D) GetClosestPositionInSegment(to_position Vector3) Vector3 {
	return self.Runtime.AStar3D_get_closest_position_in_segment(self, to_position)
}
func (self AStar3D) GetPointPath(from_id int64, to_id int64) PackedVector3Array {
	return self.Runtime.AStar3D_get_point_path(self, from_id, to_id)
}
func (self AStar3D) GetIdPath(from_id int64, to_id int64) PackedInt64Array {
	return self.Runtime.AStar3D_get_id_path(self, from_id, to_id)
}

type extendsAStarGrid2D struct {
	_ [0]*extendsAStarGrid2D
	class
}

func (self AStarGrid2D) RefCounted() RefCounted {
	var parent RefCounted
	parent.class = self.class
	return parent
}
func (self AStarGrid2D) SetRegion(region Rect2i) {
	self.Runtime.AStarGrid2D_set_region(self, region)
}
func (self AStarGrid2D) GetRegion() Rect2i {
	return self.Runtime.AStarGrid2D_get_region(self)
}
func (self AStarGrid2D) SetSize(size Vector2i) {
	self.Runtime.AStarGrid2D_set_size(self, size)
}
func (self AStarGrid2D) GetSize() Vector2i {
	return self.Runtime.AStarGrid2D_get_size(self)
}
func (self AStarGrid2D) SetOffset(offset Vector2) {
	self.Runtime.AStarGrid2D_set_offset(self, offset)
}
func (self AStarGrid2D) GetOffset() Vector2 {
	return self.Runtime.AStarGrid2D_get_offset(self)
}
func (self AStarGrid2D) SetCellSize(cell_size Vector2) {
	self.Runtime.AStarGrid2D_set_cell_size(self, cell_size)
}
func (self AStarGrid2D) GetCellSize() Vector2 {
	return self.Runtime.AStarGrid2D_get_cell_size(self)
}
func (self AStarGrid2D) IsInBounds(x int64, y int64) bool {
	return self.Runtime.AStarGrid2D_is_in_bounds(self, x, y)
}
func (self AStarGrid2D) IsInBoundsv(id Vector2i) bool {
	return self.Runtime.AStarGrid2D_is_in_boundsv(self, id)
}
func (self AStarGrid2D) IsDirty() bool {
	return self.Runtime.AStarGrid2D_is_dirty(self)
}
func (self AStarGrid2D) Update() {
	self.Runtime.AStarGrid2D_update(self)
}
func (self AStarGrid2D) SetJumpingEnabled(enabled bool) {
	self.Runtime.AStarGrid2D_set_jumping_enabled(self, enabled)
}
func (self AStarGrid2D) IsJumpingEnabled() bool {
	return self.Runtime.AStarGrid2D_is_jumping_enabled(self)
}
func (self AStarGrid2D) SetDiagonalMode(mode AStarGrid2DDiagonalMode) {
	self.Runtime.AStarGrid2D_set_diagonal_mode(self, mode)
}
func (self AStarGrid2D) GetDiagonalMode() AStarGrid2DDiagonalMode {
	return self.Runtime.AStarGrid2D_get_diagonal_mode(self)
}
func (self AStarGrid2D) SetDefaultComputeHeuristic(heuristic AStarGrid2DHeuristic) {
	self.Runtime.AStarGrid2D_set_default_compute_heuristic(self, heuristic)
}
func (self AStarGrid2D) GetDefaultComputeHeuristic() AStarGrid2DHeuristic {
	return self.Runtime.AStarGrid2D_get_default_compute_heuristic(self)
}
func (self AStarGrid2D) SetDefaultEstimateHeuristic(heuristic AStarGrid2DHeuristic) {
	self.Runtime.AStarGrid2D_set_default_estimate_heuristic(self, heuristic)
}
func (self AStarGrid2D) GetDefaultEstimateHeuristic() AStarGrid2DHeuristic {
	return self.Runtime.AStarGrid2D_get_default_estimate_heuristic(self)
}
func (self AStarGrid2D) SetPointSolid(id Vector2i, solid bool) {
	self.Runtime.AStarGrid2D_set_point_solid(self, id, solid)
}
func (self AStarGrid2D) IsPointSolid(id Vector2i) bool {
	return self.Runtime.AStarGrid2D_is_point_solid(self, id)
}
func (self AStarGrid2D) SetPointWeightScale(id Vector2i, weight_scale Float) {
	self.Runtime.AStarGrid2D_set_point_weight_scale(self, id, weight_scale)
}
func (self AStarGrid2D) GetPointWeightScale(id Vector2i) Float {
	return self.Runtime.AStarGrid2D_get_point_weight_scale(self, id)
}
func (self AStarGrid2D) FillSolidRegion(region Rect2i, solid bool) {
	self.Runtime.AStarGrid2D_fill_solid_region(self, region, solid)
}
func (self AStarGrid2D) FillWeightScaleRegion(region Rect2i, weight_scale Float) {
	self.Runtime.AStarGrid2D_fill_weight_scale_region(self, region, weight_scale)
}
func (self AStarGrid2D) Clear() {
	self.Runtime.AStarGrid2D_clear(self)
}
func (self AStarGrid2D) GetPointPosition(id Vector2i) Vector2 {
	return self.Runtime.AStarGrid2D_get_point_position(self, id)
}
func (self AStarGrid2D) GetPointPath(from_id Vector2i, to_id Vector2i) PackedVector2Array {
	return self.Runtime.AStarGrid2D_get_point_path(self, from_id, to_id)
}
func (self AStarGrid2D) GetIdPath(from_id Vector2i, to_id Vector2i) ArrayOf[Vector2i] {
	return self.Runtime.AStarGrid2D_get_id_path(self, from_id, to_id)
}

type extendsAcceptDialog struct {
	_ [0]*extendsAcceptDialog
	class
}

func (self AcceptDialog) Window() Window { var parent Window; parent.class = self.class; return parent }
func (self AcceptDialog) GetOkButton() Button {
	return self.Runtime.AcceptDialog_get_ok_button(self)
}
func (self AcceptDialog) GetLabel() Label {
	return self.Runtime.AcceptDialog_get_label(self)
}
func (self AcceptDialog) SetHideOnOk(enabled bool) {
	self.Runtime.AcceptDialog_set_hide_on_ok(self, enabled)
}
func (self AcceptDialog) GetHideOnOk() bool {
	return self.Runtime.AcceptDialog_get_hide_on_ok(self)
}
func (self AcceptDialog) SetCloseOnEscape(enabled bool) {
	self.Runtime.AcceptDialog_set_close_on_escape(self, enabled)
}
func (self AcceptDialog) GetCloseOnEscape() bool {
	return self.Runtime.AcceptDialog_get_close_on_escape(self)
}
func (self AcceptDialog) AddButton(text string, right bool, action string) Button {
	return self.Runtime.AcceptDialog_add_button(self, text, right, action)
}
func (self AcceptDialog) AddCancelButton(name string) Button {
	return self.Runtime.AcceptDialog_add_cancel_button(self, name)
}
func (self AcceptDialog) RemoveButton(button Control) {
	self.Runtime.AcceptDialog_remove_button(self, button)
}
func (self AcceptDialog) RegisterTextEnter(line_edit Control) {
	self.Runtime.AcceptDialog_register_text_enter(self, line_edit)
}
func (self AcceptDialog) SetText(text string) {
	self.Runtime.AcceptDialog_set_text(self, text)
}
func (self AcceptDialog) GetText() string {
	return self.Runtime.AcceptDialog_get_text(self)
}
func (self AcceptDialog) SetAutowrap(autowrap bool) {
	self.Runtime.AcceptDialog_set_autowrap(self, autowrap)
}
func (self AcceptDialog) HasAutowrap() bool {
	return self.Runtime.AcceptDialog_has_autowrap(self)
}
func (self AcceptDialog) SetOkButtonText(text string) {
	self.Runtime.AcceptDialog_set_ok_button_text(self, text)
}
func (self AcceptDialog) GetOkButtonText() string {
	return self.Runtime.AcceptDialog_get_ok_button_text(self)
}

type extendsAnimatableBody2D struct {
	_ [0]*extendsAnimatableBody2D
	class
}

func (self AnimatableBody2D) StaticBody2D() StaticBody2D {
	var parent StaticBody2D
	parent.class = self.class
	return parent
}
func (self AnimatableBody2D) SetSyncToPhysics(enable bool) {
	self.Runtime.AnimatableBody2D_set_sync_to_physics(self, enable)
}
func (self AnimatableBody2D) IsSyncToPhysicsEnabled() bool {
	return self.Runtime.AnimatableBody2D_is_sync_to_physics_enabled(self)
}

type extendsAnimatableBody3D struct {
	_ [0]*extendsAnimatableBody3D
	class
}

func (self AnimatableBody3D) StaticBody3D() StaticBody3D {
	var parent StaticBody3D
	parent.class = self.class
	return parent
}
func (self AnimatableBody3D) SetSyncToPhysics(enable bool) {
	self.Runtime.AnimatableBody3D_set_sync_to_physics(self, enable)
}
func (self AnimatableBody3D) IsSyncToPhysicsEnabled() bool {
	return self.Runtime.AnimatableBody3D_is_sync_to_physics_enabled(self)
}

type extendsAnimatedSprite2D struct {
	_ [0]*extendsAnimatedSprite2D
	class
}

func (self AnimatedSprite2D) Node2D() Node2D {
	var parent Node2D
	parent.class = self.class
	return parent
}
func (self AnimatedSprite2D) SetSpriteFrames(sprite_frames SpriteFrames) {
	self.Runtime.AnimatedSprite2D_set_sprite_frames(self, sprite_frames)
}
func (self AnimatedSprite2D) GetSpriteFrames() SpriteFrames {
	return self.Runtime.AnimatedSprite2D_get_sprite_frames(self)
}
func (self AnimatedSprite2D) SetAnimation(name string) {
	self.Runtime.AnimatedSprite2D_set_animation(self, name)
}
func (self AnimatedSprite2D) GetAnimation() string {
	return self.Runtime.AnimatedSprite2D_get_animation(self)
}
func (self AnimatedSprite2D) SetAutoplay(name string) {
	self.Runtime.AnimatedSprite2D_set_autoplay(self, name)
}
func (self AnimatedSprite2D) GetAutoplay() string {
	return self.Runtime.AnimatedSprite2D_get_autoplay(self)
}
func (self AnimatedSprite2D) IsPlaying() bool {
	return self.Runtime.AnimatedSprite2D_is_playing(self)
}
func (self AnimatedSprite2D) Play(name string, custom_speed Float, from_end bool) {
	self.Runtime.AnimatedSprite2D_play(self, name, custom_speed, from_end)
}
func (self AnimatedSprite2D) PlayBackwards(name string) {
	self.Runtime.AnimatedSprite2D_play_backwards(self, name)
}
func (self AnimatedSprite2D) Pause() {
	self.Runtime.AnimatedSprite2D_pause(self)
}
func (self AnimatedSprite2D) Stop() {
	self.Runtime.AnimatedSprite2D_stop(self)
}
func (self AnimatedSprite2D) SetCentered(centered bool) {
	self.Runtime.AnimatedSprite2D_set_centered(self, centered)
}
func (self AnimatedSprite2D) IsCentered() bool {
	return self.Runtime.AnimatedSprite2D_is_centered(self)
}
func (self AnimatedSprite2D) SetOffset(offset Vector2) {
	self.Runtime.AnimatedSprite2D_set_offset(self, offset)
}
func (self AnimatedSprite2D) GetOffset() Vector2 {
	return self.Runtime.AnimatedSprite2D_get_offset(self)
}
func (self AnimatedSprite2D) SetFlipH(flip_h bool) {
	self.Runtime.AnimatedSprite2D_set_flip_h(self, flip_h)
}
func (self AnimatedSprite2D) IsFlippedH() bool {
	return self.Runtime.AnimatedSprite2D_is_flipped_h(self)
}
func (self AnimatedSprite2D) SetFlipV(flip_v bool) {
	self.Runtime.AnimatedSprite2D_set_flip_v(self, flip_v)
}
func (self AnimatedSprite2D) IsFlippedV() bool {
	return self.Runtime.AnimatedSprite2D_is_flipped_v(self)
}
func (self AnimatedSprite2D) SetFrame(frame int64) {
	self.Runtime.AnimatedSprite2D_set_frame(self, frame)
}
func (self AnimatedSprite2D) GetFrame() int64 {
	return self.Runtime.AnimatedSprite2D_get_frame(self)
}
func (self AnimatedSprite2D) SetFrameProgress(progress Float) {
	self.Runtime.AnimatedSprite2D_set_frame_progress(self, progress)
}
func (self AnimatedSprite2D) GetFrameProgress() Float {
	return self.Runtime.AnimatedSprite2D_get_frame_progress(self)
}
func (self AnimatedSprite2D) SetFrameAndProgress(frame int64, progress Float) {
	self.Runtime.AnimatedSprite2D_set_frame_and_progress(self, frame, progress)
}
func (self AnimatedSprite2D) SetSpeedScale(speed_scale Float) {
	self.Runtime.AnimatedSprite2D_set_speed_scale(self, speed_scale)
}
func (self AnimatedSprite2D) GetSpeedScale() Float {
	return self.Runtime.AnimatedSprite2D_get_speed_scale(self)
}
func (self AnimatedSprite2D) GetPlayingSpeed() Float {
	return self.Runtime.AnimatedSprite2D_get_playing_speed(self)
}

type extendsAnimatedSprite3D struct {
	_ [0]*extendsAnimatedSprite3D
	class
}

func (self AnimatedSprite3D) SpriteBase3D() SpriteBase3D {
	var parent SpriteBase3D
	parent.class = self.class
	return parent
}
func (self AnimatedSprite3D) SetSpriteFrames(sprite_frames SpriteFrames) {
	self.Runtime.AnimatedSprite3D_set_sprite_frames(self, sprite_frames)
}
func (self AnimatedSprite3D) GetSpriteFrames() SpriteFrames {
	return self.Runtime.AnimatedSprite3D_get_sprite_frames(self)
}
func (self AnimatedSprite3D) SetAnimation(name string) {
	self.Runtime.AnimatedSprite3D_set_animation(self, name)
}
func (self AnimatedSprite3D) GetAnimation() string {
	return self.Runtime.AnimatedSprite3D_get_animation(self)
}
func (self AnimatedSprite3D) SetAutoplay(name string) {
	self.Runtime.AnimatedSprite3D_set_autoplay(self, name)
}
func (self AnimatedSprite3D) GetAutoplay() string {
	return self.Runtime.AnimatedSprite3D_get_autoplay(self)
}
func (self AnimatedSprite3D) IsPlaying() bool {
	return self.Runtime.AnimatedSprite3D_is_playing(self)
}
func (self AnimatedSprite3D) Play(name string, custom_speed Float, from_end bool) {
	self.Runtime.AnimatedSprite3D_play(self, name, custom_speed, from_end)
}
func (self AnimatedSprite3D) PlayBackwards(name string) {
	self.Runtime.AnimatedSprite3D_play_backwards(self, name)
}
func (self AnimatedSprite3D) Pause() {
	self.Runtime.AnimatedSprite3D_pause(self)
}
func (self AnimatedSprite3D) Stop() {
	self.Runtime.AnimatedSprite3D_stop(self)
}
func (self AnimatedSprite3D) SetFrame(frame int64) {
	self.Runtime.AnimatedSprite3D_set_frame(self, frame)
}
func (self AnimatedSprite3D) GetFrame() int64 {
	return self.Runtime.AnimatedSprite3D_get_frame(self)
}
func (self AnimatedSprite3D) SetFrameProgress(progress Float) {
	self.Runtime.AnimatedSprite3D_set_frame_progress(self, progress)
}
func (self AnimatedSprite3D) GetFrameProgress() Float {
	return self.Runtime.AnimatedSprite3D_get_frame_progress(self)
}
func (self AnimatedSprite3D) SetFrameAndProgress(frame int64, progress Float) {
	self.Runtime.AnimatedSprite3D_set_frame_and_progress(self, frame, progress)
}
func (self AnimatedSprite3D) SetSpeedScale(speed_scale Float) {
	self.Runtime.AnimatedSprite3D_set_speed_scale(self, speed_scale)
}
func (self AnimatedSprite3D) GetSpeedScale() Float {
	return self.Runtime.AnimatedSprite3D_get_speed_scale(self)
}
func (self AnimatedSprite3D) GetPlayingSpeed() Float {
	return self.Runtime.AnimatedSprite3D_get_playing_speed(self)
}

type extendsAnimatedTexture struct {
	_ [0]*extendsAnimatedTexture
	class
}

func (self AnimatedTexture) Texture2D() Texture2D {
	var parent Texture2D
	parent.class = self.class
	return parent
}
func (self AnimatedTexture) SetFrames(frames int64) {
	self.Runtime.AnimatedTexture_set_frames(self, frames)
}
func (self AnimatedTexture) GetFrames() int64 {
	return self.Runtime.AnimatedTexture_get_frames(self)
}
func (self AnimatedTexture) SetCurrentFrame(frame int64) {
	self.Runtime.AnimatedTexture_set_current_frame(self, frame)
}
func (self AnimatedTexture) GetCurrentFrame() int64 {
	return self.Runtime.AnimatedTexture_get_current_frame(self)
}
func (self AnimatedTexture) SetPause(pause bool) {
	self.Runtime.AnimatedTexture_set_pause(self, pause)
}
func (self AnimatedTexture) GetPause() bool {
	return self.Runtime.AnimatedTexture_get_pause(self)
}
func (self AnimatedTexture) SetOneShot(one_shot bool) {
	self.Runtime.AnimatedTexture_set_one_shot(self, one_shot)
}
func (self AnimatedTexture) GetOneShot() bool {
	return self.Runtime.AnimatedTexture_get_one_shot(self)
}
func (self AnimatedTexture) SetSpeedScale(scale Float) {
	self.Runtime.AnimatedTexture_set_speed_scale(self, scale)
}
func (self AnimatedTexture) GetSpeedScale() Float {
	return self.Runtime.AnimatedTexture_get_speed_scale(self)
}
func (self AnimatedTexture) SetFrameTexture(frame int64, texture Texture2D) {
	self.Runtime.AnimatedTexture_set_frame_texture(self, frame, texture)
}
func (self AnimatedTexture) GetFrameTexture(frame int64) Texture2D {
	return self.Runtime.AnimatedTexture_get_frame_texture(self, frame)
}
func (self AnimatedTexture) SetFrameDuration(frame int64, duration Float) {
	self.Runtime.AnimatedTexture_set_frame_duration(self, frame, duration)
}
func (self AnimatedTexture) GetFrameDuration(frame int64) Float {
	return self.Runtime.AnimatedTexture_get_frame_duration(self, frame)
}

type extendsAnimation struct {
	_ [0]*extendsAnimation
	class
}

func (self Animation) Resource() Resource {
	var parent Resource
	parent.class = self.class
	return parent
}
func (self Animation) AddTrack(atype AnimationTrackType, at_position int64) int64 {
	return self.Runtime.Animation_add_track(self, atype, at_position)
}
func (self Animation) RemoveTrack(track_idx int64) {
	self.Runtime.Animation_remove_track(self, track_idx)
}
func (self Animation) GetTrackCount() int64 {
	return self.Runtime.Animation_get_track_count(self)
}
func (self Animation) TrackGetType(track_idx int64) AnimationTrackType {
	return self.Runtime.Animation_track_get_type(self, track_idx)
}
func (self Animation) TrackGetPath(track_idx int64) NodePath {
	return self.Runtime.Animation_track_get_path(self, track_idx)
}
func (self Animation) TrackSetPath(track_idx int64, path NodePath) {
	self.Runtime.Animation_track_set_path(self, track_idx, path)
}
func (self Animation) FindTrack(path NodePath, atype AnimationTrackType) int64 {
	return self.Runtime.Animation_find_track(self, path, atype)
}
func (self Animation) TrackMoveUp(track_idx int64) {
	self.Runtime.Animation_track_move_up(self, track_idx)
}
func (self Animation) TrackMoveDown(track_idx int64) {
	self.Runtime.Animation_track_move_down(self, track_idx)
}
func (self Animation) TrackMoveTo(track_idx int64, to_idx int64) {
	self.Runtime.Animation_track_move_to(self, track_idx, to_idx)
}
func (self Animation) TrackSwap(track_idx int64, with_idx int64) {
	self.Runtime.Animation_track_swap(self, track_idx, with_idx)
}
func (self Animation) TrackSetImported(track_idx int64, imported bool) {
	self.Runtime.Animation_track_set_imported(self, track_idx, imported)
}
func (self Animation) TrackIsImported(track_idx int64) bool {
	return self.Runtime.Animation_track_is_imported(self, track_idx)
}
func (self Animation) TrackSetEnabled(track_idx int64, enabled bool) {
	self.Runtime.Animation_track_set_enabled(self, track_idx, enabled)
}
func (self Animation) TrackIsEnabled(track_idx int64) bool {
	return self.Runtime.Animation_track_is_enabled(self, track_idx)
}
func (self Animation) PositionTrackInsertKey(track_idx int64, time Float, position Vector3) int64 {
	return self.Runtime.Animation_position_track_insert_key(self, track_idx, time, position)
}
func (self Animation) RotationTrackInsertKey(track_idx int64, time Float, rotation Quaternion) int64 {
	return self.Runtime.Animation_rotation_track_insert_key(self, track_idx, time, rotation)
}
func (self Animation) ScaleTrackInsertKey(track_idx int64, time Float, scale Vector3) int64 {
	return self.Runtime.Animation_scale_track_insert_key(self, track_idx, time, scale)
}
func (self Animation) BlendShapeTrackInsertKey(track_idx int64, time Float, amount Float) int64 {
	return self.Runtime.Animation_blend_shape_track_insert_key(self, track_idx, time, amount)
}
func (self Animation) PositionTrackInterpolate(track_idx int64, time_sec Float) Vector3 {
	return self.Runtime.Animation_position_track_interpolate(self, track_idx, time_sec)
}
func (self Animation) RotationTrackInterpolate(track_idx int64, time_sec Float) Quaternion {
	return self.Runtime.Animation_rotation_track_interpolate(self, track_idx, time_sec)
}
func (self Animation) ScaleTrackInterpolate(track_idx int64, time_sec Float) Vector3 {
	return self.Runtime.Animation_scale_track_interpolate(self, track_idx, time_sec)
}
func (self Animation) BlendShapeTrackInterpolate(track_idx int64, time_sec Float) Float {
	return self.Runtime.Animation_blend_shape_track_interpolate(self, track_idx, time_sec)
}
func (self Animation) TrackInsertKey(track_idx int64, time Float, key any, transition Float) int64 {
	return self.Runtime.Animation_track_insert_key(self, track_idx, time, key, transition)
}
func (self Animation) TrackRemoveKey(track_idx int64, key_idx int64) {
	self.Runtime.Animation_track_remove_key(self, track_idx, key_idx)
}
func (self Animation) TrackRemoveKeyAtTime(track_idx int64, time Float) {
	self.Runtime.Animation_track_remove_key_at_time(self, track_idx, time)
}
func (self Animation) TrackSetKeyValue(track_idx int64, key int64, value any) {
	self.Runtime.Animation_track_set_key_value(self, track_idx, key, value)
}
func (self Animation) TrackSetKeyTransition(track_idx int64, key_idx int64, transition Float) {
	self.Runtime.Animation_track_set_key_transition(self, track_idx, key_idx, transition)
}
func (self Animation) TrackSetKeyTime(track_idx int64, key_idx int64, time Float) {
	self.Runtime.Animation_track_set_key_time(self, track_idx, key_idx, time)
}
func (self Animation) TrackGetKeyTransition(track_idx int64, key_idx int64) Float {
	return self.Runtime.Animation_track_get_key_transition(self, track_idx, key_idx)
}
func (self Animation) TrackGetKeyCount(track_idx int64) int64 {
	return self.Runtime.Animation_track_get_key_count(self, track_idx)
}
func (self Animation) TrackGetKeyValue(track_idx int64, key_idx int64) any {
	return self.Runtime.Animation_track_get_key_value(self, track_idx, key_idx)
}
func (self Animation) TrackGetKeyTime(track_idx int64, key_idx int64) Float {
	return self.Runtime.Animation_track_get_key_time(self, track_idx, key_idx)
}
func (self Animation) TrackFindKey(track_idx int64, time Float, find_mode AnimationFindMode) int64 {
	return self.Runtime.Animation_track_find_key(self, track_idx, time, find_mode)
}
func (self Animation) TrackSetInterpolationType(track_idx int64, interpolation AnimationInterpolationType) {
	self.Runtime.Animation_track_set_interpolation_type(self, track_idx, interpolation)
}
func (self Animation) TrackGetInterpolationType(track_idx int64) AnimationInterpolationType {
	return self.Runtime.Animation_track_get_interpolation_type(self, track_idx)
}
func (self Animation) TrackSetInterpolationLoopWrap(track_idx int64, interpolation bool) {
	self.Runtime.Animation_track_set_interpolation_loop_wrap(self, track_idx, interpolation)
}
func (self Animation) TrackGetInterpolationLoopWrap(track_idx int64) bool {
	return self.Runtime.Animation_track_get_interpolation_loop_wrap(self, track_idx)
}
func (self Animation) TrackIsCompressed(track_idx int64) bool {
	return self.Runtime.Animation_track_is_compressed(self, track_idx)
}
func (self Animation) ValueTrackSetUpdateMode(track_idx int64, mode AnimationUpdateMode) {
	self.Runtime.Animation_value_track_set_update_mode(self, track_idx, mode)
}
func (self Animation) ValueTrackGetUpdateMode(track_idx int64) AnimationUpdateMode {
	return self.Runtime.Animation_value_track_get_update_mode(self, track_idx)
}
func (self Animation) ValueTrackInterpolate(track_idx int64, time_sec Float) any {
	return self.Runtime.Animation_value_track_interpolate(self, track_idx, time_sec)
}
func (self Animation) MethodTrackGetName(track_idx int64, key_idx int64) string {
	return self.Runtime.Animation_method_track_get_name(self, track_idx, key_idx)
}
func (self Animation) MethodTrackGetParams(track_idx int64, key_idx int64) Array {
	return self.Runtime.Animation_method_track_get_params(self, track_idx, key_idx)
}
func (self Animation) BezierTrackInsertKey(track_idx int64, time Float, value Float, in_handle Vector2, out_handle Vector2) int64 {
	return self.Runtime.Animation_bezier_track_insert_key(self, track_idx, time, value, in_handle, out_handle)
}
func (self Animation) BezierTrackSetKeyValue(track_idx int64, key_idx int64, value Float) {
	self.Runtime.Animation_bezier_track_set_key_value(self, track_idx, key_idx, value)
}
func (self Animation) BezierTrackSetKeyInHandle(track_idx int64, key_idx int64, in_handle Vector2, balanced_value_time_ratio Float) {
	self.Runtime.Animation_bezier_track_set_key_in_handle(self, track_idx, key_idx, in_handle, balanced_value_time_ratio)
}
func (self Animation) BezierTrackSetKeyOutHandle(track_idx int64, key_idx int64, out_handle Vector2, balanced_value_time_ratio Float) {
	self.Runtime.Animation_bezier_track_set_key_out_handle(self, track_idx, key_idx, out_handle, balanced_value_time_ratio)
}
func (self Animation) BezierTrackGetKeyValue(track_idx int64, key_idx int64) Float {
	return self.Runtime.Animation_bezier_track_get_key_value(self, track_idx, key_idx)
}
func (self Animation) BezierTrackGetKeyInHandle(track_idx int64, key_idx int64) Vector2 {
	return self.Runtime.Animation_bezier_track_get_key_in_handle(self, track_idx, key_idx)
}
func (self Animation) BezierTrackGetKeyOutHandle(track_idx int64, key_idx int64) Vector2 {
	return self.Runtime.Animation_bezier_track_get_key_out_handle(self, track_idx, key_idx)
}
func (self Animation) BezierTrackInterpolate(track_idx int64, time Float) Float {
	return self.Runtime.Animation_bezier_track_interpolate(self, track_idx, time)
}
func (self Animation) AudioTrackInsertKey(track_idx int64, time Float, stream Resource, start_offset Float, end_offset Float) int64 {
	return self.Runtime.Animation_audio_track_insert_key(self, track_idx, time, stream, start_offset, end_offset)
}
func (self Animation) AudioTrackSetKeyStream(track_idx int64, key_idx int64, stream Resource) {
	self.Runtime.Animation_audio_track_set_key_stream(self, track_idx, key_idx, stream)
}
func (self Animation) AudioTrackSetKeyStartOffset(track_idx int64, key_idx int64, offset Float) {
	self.Runtime.Animation_audio_track_set_key_start_offset(self, track_idx, key_idx, offset)
}
func (self Animation) AudioTrackSetKeyEndOffset(track_idx int64, key_idx int64, offset Float) {
	self.Runtime.Animation_audio_track_set_key_end_offset(self, track_idx, key_idx, offset)
}
func (self Animation) AudioTrackGetKeyStream(track_idx int64, key_idx int64) Resource {
	return self.Runtime.Animation_audio_track_get_key_stream(self, track_idx, key_idx)
}
func (self Animation) AudioTrackGetKeyStartOffset(track_idx int64, key_idx int64) Float {
	return self.Runtime.Animation_audio_track_get_key_start_offset(self, track_idx, key_idx)
}
func (self Animation) AudioTrackGetKeyEndOffset(track_idx int64, key_idx int64) Float {
	return self.Runtime.Animation_audio_track_get_key_end_offset(self, track_idx, key_idx)
}
func (self Animation) AudioTrackSetUseBlend(track_idx int64, enable bool) {
	self.Runtime.Animation_audio_track_set_use_blend(self, track_idx, enable)
}
func (self Animation) AudioTrackIsUseBlend(track_idx int64) bool {
	return self.Runtime.Animation_audio_track_is_use_blend(self, track_idx)
}
func (self Animation) AnimationTrackInsertKey(track_idx int64, time Float, animation string) int64 {
	return self.Runtime.Animation_animation_track_insert_key(self, track_idx, time, animation)
}
func (self Animation) AnimationTrackSetKeyAnimation(track_idx int64, key_idx int64, animation string) {
	self.Runtime.Animation_animation_track_set_key_animation(self, track_idx, key_idx, animation)
}
func (self Animation) AnimationTrackGetKeyAnimation(track_idx int64, key_idx int64) string {
	return self.Runtime.Animation_animation_track_get_key_animation(self, track_idx, key_idx)
}
func (self Animation) SetLength(time_sec Float) {
	self.Runtime.Animation_set_length(self, time_sec)
}
func (self Animation) GetLength() Float {
	return self.Runtime.Animation_get_length(self)
}
func (self Animation) SetLoopMode(loop_mode AnimationLoopMode) {
	self.Runtime.Animation_set_loop_mode(self, loop_mode)
}
func (self Animation) GetLoopMode() AnimationLoopMode {
	return self.Runtime.Animation_get_loop_mode(self)
}
func (self Animation) SetStep(size_sec Float) {
	self.Runtime.Animation_set_step(self, size_sec)
}
func (self Animation) GetStep() Float {
	return self.Runtime.Animation_get_step(self)
}
func (self Animation) Clear() {
	self.Runtime.Animation_clear(self)
}
func (self Animation) CopyTrack(track_idx int64, to_animation Animation) {
	self.Runtime.Animation_copy_track(self, track_idx, to_animation)
}
func (self Animation) Compress(page_size int64, fps int64, split_tolerance Float) {
	self.Runtime.Animation_compress(self, page_size, fps, split_tolerance)
}

type extendsAnimationLibrary struct {
	_ [0]*extendsAnimationLibrary
	class
}

func (self AnimationLibrary) Resource() Resource {
	var parent Resource
	parent.class = self.class
	return parent
}
func (self AnimationLibrary) AddAnimation(name string, animation Animation) int64 {
	return self.Runtime.AnimationLibrary_add_animation(self, name, animation)
}
func (self AnimationLibrary) RemoveAnimation(name string) {
	self.Runtime.AnimationLibrary_remove_animation(self, name)
}
func (self AnimationLibrary) RenameAnimation(name string, newname string) {
	self.Runtime.AnimationLibrary_rename_animation(self, name, newname)
}
func (self AnimationLibrary) HasAnimation(name string) bool {
	return self.Runtime.AnimationLibrary_has_animation(self, name)
}
func (self AnimationLibrary) GetAnimation(name string) Animation {
	return self.Runtime.AnimationLibrary_get_animation(self, name)
}
func (self AnimationLibrary) GetAnimationList() ArrayOf[string] {
	return self.Runtime.AnimationLibrary_get_animation_list(self)
}

type extendsAnimationMixer struct {
	_ [0]*extendsAnimationMixer
	class
}

func (self AnimationMixer) Node() Node { var parent Node; parent.class = self.class; return parent }
func (self AnimationMixer) AddAnimationLibrary(name string, library AnimationLibrary) int64 {
	return self.Runtime.AnimationMixer_add_animation_library(self, name, library)
}
func (self AnimationMixer) RemoveAnimationLibrary(name string) {
	self.Runtime.AnimationMixer_remove_animation_library(self, name)
}
func (self AnimationMixer) RenameAnimationLibrary(name string, newname string) {
	self.Runtime.AnimationMixer_rename_animation_library(self, name, newname)
}
func (self AnimationMixer) HasAnimationLibrary(name string) bool {
	return self.Runtime.AnimationMixer_has_animation_library(self, name)
}
func (self AnimationMixer) GetAnimationLibrary(name string) AnimationLibrary {
	return self.Runtime.AnimationMixer_get_animation_library(self, name)
}
func (self AnimationMixer) GetAnimationLibraryList() ArrayOf[string] {
	return self.Runtime.AnimationMixer_get_animation_library_list(self)
}
func (self AnimationMixer) HasAnimation(name string) bool {
	return self.Runtime.AnimationMixer_has_animation(self, name)
}
func (self AnimationMixer) GetAnimation(name string) Animation {
	return self.Runtime.AnimationMixer_get_animation(self, name)
}
func (self AnimationMixer) GetAnimationList() PackedStringArray {
	return self.Runtime.AnimationMixer_get_animation_list(self)
}
func (self AnimationMixer) SetActive(active bool) {
	self.Runtime.AnimationMixer_set_active(self, active)
}
func (self AnimationMixer) IsActive() bool {
	return self.Runtime.AnimationMixer_is_active(self)
}
func (self AnimationMixer) SetDeterministic(deterministic bool) {
	self.Runtime.AnimationMixer_set_deterministic(self, deterministic)
}
func (self AnimationMixer) IsDeterministic() bool {
	return self.Runtime.AnimationMixer_is_deterministic(self)
}
func (self AnimationMixer) SetRootNode(path NodePath) {
	self.Runtime.AnimationMixer_set_root_node(self, path)
}
func (self AnimationMixer) GetRootNode() NodePath {
	return self.Runtime.AnimationMixer_get_root_node(self)
}
func (self AnimationMixer) SetCallbackModeProcess(mode AnimationMixerAnimationCallbackModeProcess) {
	self.Runtime.AnimationMixer_set_callback_mode_process(self, mode)
}
func (self AnimationMixer) GetCallbackModeProcess() AnimationMixerAnimationCallbackModeProcess {
	return self.Runtime.AnimationMixer_get_callback_mode_process(self)
}
func (self AnimationMixer) SetCallbackModeMethod(mode AnimationMixerAnimationCallbackModeMethod) {
	self.Runtime.AnimationMixer_set_callback_mode_method(self, mode)
}
func (self AnimationMixer) GetCallbackModeMethod() AnimationMixerAnimationCallbackModeMethod {
	return self.Runtime.AnimationMixer_get_callback_mode_method(self)
}
func (self AnimationMixer) SetAudioMaxPolyphony(max_polyphony int64) {
	self.Runtime.AnimationMixer_set_audio_max_polyphony(self, max_polyphony)
}
func (self AnimationMixer) GetAudioMaxPolyphony() int64 {
	return self.Runtime.AnimationMixer_get_audio_max_polyphony(self)
}
func (self AnimationMixer) SetRootMotionTrack(path NodePath) {
	self.Runtime.AnimationMixer_set_root_motion_track(self, path)
}
func (self AnimationMixer) GetRootMotionTrack() NodePath {
	return self.Runtime.AnimationMixer_get_root_motion_track(self)
}
func (self AnimationMixer) GetRootMotionPosition() Vector3 {
	return self.Runtime.AnimationMixer_get_root_motion_position(self)
}
func (self AnimationMixer) GetRootMotionRotation() Quaternion {
	return self.Runtime.AnimationMixer_get_root_motion_rotation(self)
}
func (self AnimationMixer) GetRootMotionScale() Vector3 {
	return self.Runtime.AnimationMixer_get_root_motion_scale(self)
}
func (self AnimationMixer) GetRootMotionPositionAccumulator() Vector3 {
	return self.Runtime.AnimationMixer_get_root_motion_position_accumulator(self)
}
func (self AnimationMixer) GetRootMotionRotationAccumulator() Quaternion {
	return self.Runtime.AnimationMixer_get_root_motion_rotation_accumulator(self)
}
func (self AnimationMixer) GetRootMotionScaleAccumulator() Vector3 {
	return self.Runtime.AnimationMixer_get_root_motion_scale_accumulator(self)
}
func (self AnimationMixer) ClearCaches() {
	self.Runtime.AnimationMixer_clear_caches(self)
}
func (self AnimationMixer) Advance(delta Float) {
	self.Runtime.AnimationMixer_advance(self, delta)
}
func (self AnimationMixer) SetResetOnSaveEnabled(enabled bool) {
	self.Runtime.AnimationMixer_set_reset_on_save_enabled(self, enabled)
}
func (self AnimationMixer) IsResetOnSaveEnabled() bool {
	return self.Runtime.AnimationMixer_is_reset_on_save_enabled(self)
}
func (self AnimationMixer) FindAnimation(animation Animation) string {
	return self.Runtime.AnimationMixer_find_animation(self, animation)
}
func (self AnimationMixer) FindAnimationLibrary(animation Animation) string {
	return self.Runtime.AnimationMixer_find_animation_library(self, animation)
}

type extendsAnimationNode struct {
	_ [0]*extendsAnimationNode
	class
}

func (self AnimationNode) Resource() Resource {
	var parent Resource
	parent.class = self.class
	return parent
}
func (self AnimationNode) AddInput(name string) bool {
	return self.Runtime.AnimationNode_add_input(self, name)
}
func (self AnimationNode) RemoveInput(index int64) {
	self.Runtime.AnimationNode_remove_input(self, index)
}
func (self AnimationNode) SetInputName(input int64, name string) bool {
	return self.Runtime.AnimationNode_set_input_name(self, input, name)
}
func (self AnimationNode) GetInputName(input int64) string {
	return self.Runtime.AnimationNode_get_input_name(self, input)
}
func (self AnimationNode) GetInputCount() int64 {
	return self.Runtime.AnimationNode_get_input_count(self)
}
func (self AnimationNode) FindInput(name string) int64 {
	return self.Runtime.AnimationNode_find_input(self, name)
}
func (self AnimationNode) SetFilterPath(path NodePath, enable bool) {
	self.Runtime.AnimationNode_set_filter_path(self, path, enable)
}
func (self AnimationNode) IsPathFiltered(path NodePath) bool {
	return self.Runtime.AnimationNode_is_path_filtered(self, path)
}
func (self AnimationNode) SetFilterEnabled(enable bool) {
	self.Runtime.AnimationNode_set_filter_enabled(self, enable)
}
func (self AnimationNode) IsFilterEnabled() bool {
	return self.Runtime.AnimationNode_is_filter_enabled(self)
}
func (self AnimationNode) BlendAnimation(animation string, time Float, delta Float, seeked bool, is_external_seeking bool, blend Float, looped_flag AnimationLoopedFlag) {
	self.Runtime.AnimationNode_blend_animation(self, animation, time, delta, seeked, is_external_seeking, blend, looped_flag)
}
func (self AnimationNode) BlendNode(name string, node AnimationNode, time Float, seek bool, is_external_seeking bool, blend Float, filter AnimationNodeFilterAction, sync bool, test_only bool) Float {
	return self.Runtime.AnimationNode_blend_node(self, name, node, time, seek, is_external_seeking, blend, filter, sync, test_only)
}
func (self AnimationNode) BlendInput(input_index int64, time Float, seek bool, is_external_seeking bool, blend Float, filter AnimationNodeFilterAction, sync bool, test_only bool) Float {
	return self.Runtime.AnimationNode_blend_input(self, input_index, time, seek, is_external_seeking, blend, filter, sync, test_only)
}
func (self AnimationNode) SetParameter(name string, value any) {
	self.Runtime.AnimationNode_set_parameter(self, name, value)
}
func (self AnimationNode) GetParameter(name string) any {
	return self.Runtime.AnimationNode_get_parameter(self, name)
}

type extendsAnimationNodeAdd2 struct {
	_ [0]*extendsAnimationNodeAdd2
	class
}

func (self AnimationNodeAdd2) AnimationNodeSync() AnimationNodeSync {
	var parent AnimationNodeSync
	parent.class = self.class
	return parent
}

type extendsAnimationNodeAdd3 struct {
	_ [0]*extendsAnimationNodeAdd3
	class
}

func (self AnimationNodeAdd3) AnimationNodeSync() AnimationNodeSync {
	var parent AnimationNodeSync
	parent.class = self.class
	return parent
}

type extendsAnimationNodeAnimation struct {
	_ [0]*extendsAnimationNodeAnimation
	class
}

func (self AnimationNodeAnimation) AnimationRootNode() AnimationRootNode {
	var parent AnimationRootNode
	parent.class = self.class
	return parent
}
func (self AnimationNodeAnimation) SetAnimation(name string) {
	self.Runtime.AnimationNodeAnimation_set_animation(self, name)
}
func (self AnimationNodeAnimation) GetAnimation() string {
	return self.Runtime.AnimationNodeAnimation_get_animation(self)
}
func (self AnimationNodeAnimation) SetPlayMode(mode AnimationNodeAnimationPlayMode) {
	self.Runtime.AnimationNodeAnimation_set_play_mode(self, mode)
}
func (self AnimationNodeAnimation) GetPlayMode() AnimationNodeAnimationPlayMode {
	return self.Runtime.AnimationNodeAnimation_get_play_mode(self)
}

type extendsAnimationNodeBlend2 struct {
	_ [0]*extendsAnimationNodeBlend2
	class
}

func (self AnimationNodeBlend2) AnimationNodeSync() AnimationNodeSync {
	var parent AnimationNodeSync
	parent.class = self.class
	return parent
}

type extendsAnimationNodeBlend3 struct {
	_ [0]*extendsAnimationNodeBlend3
	class
}

func (self AnimationNodeBlend3) AnimationNodeSync() AnimationNodeSync {
	var parent AnimationNodeSync
	parent.class = self.class
	return parent
}

type extendsAnimationNodeBlendSpace1D struct {
	_ [0]*extendsAnimationNodeBlendSpace1D
	class
}

func (self AnimationNodeBlendSpace1D) AnimationRootNode() AnimationRootNode {
	var parent AnimationRootNode
	parent.class = self.class
	return parent
}
func (self AnimationNodeBlendSpace1D) AddBlendPoint(node AnimationRootNode, pos Float, at_index int64) {
	self.Runtime.AnimationNodeBlendSpace1D_add_blend_point(self, node, pos, at_index)
}
func (self AnimationNodeBlendSpace1D) SetBlendPointPosition(point int64, pos Float) {
	self.Runtime.AnimationNodeBlendSpace1D_set_blend_point_position(self, point, pos)
}
func (self AnimationNodeBlendSpace1D) GetBlendPointPosition(point int64) Float {
	return self.Runtime.AnimationNodeBlendSpace1D_get_blend_point_position(self, point)
}
func (self AnimationNodeBlendSpace1D) SetBlendPointNode(point int64, node AnimationRootNode) {
	self.Runtime.AnimationNodeBlendSpace1D_set_blend_point_node(self, point, node)
}
func (self AnimationNodeBlendSpace1D) GetBlendPointNode(point int64) AnimationRootNode {
	return self.Runtime.AnimationNodeBlendSpace1D_get_blend_point_node(self, point)
}
func (self AnimationNodeBlendSpace1D) RemoveBlendPoint(point int64) {
	self.Runtime.AnimationNodeBlendSpace1D_remove_blend_point(self, point)
}
func (self AnimationNodeBlendSpace1D) GetBlendPointCount() int64 {
	return self.Runtime.AnimationNodeBlendSpace1D_get_blend_point_count(self)
}
func (self AnimationNodeBlendSpace1D) SetMinSpace(min_space Float) {
	self.Runtime.AnimationNodeBlendSpace1D_set_min_space(self, min_space)
}
func (self AnimationNodeBlendSpace1D) GetMinSpace() Float {
	return self.Runtime.AnimationNodeBlendSpace1D_get_min_space(self)
}
func (self AnimationNodeBlendSpace1D) SetMaxSpace(max_space Float) {
	self.Runtime.AnimationNodeBlendSpace1D_set_max_space(self, max_space)
}
func (self AnimationNodeBlendSpace1D) GetMaxSpace() Float {
	return self.Runtime.AnimationNodeBlendSpace1D_get_max_space(self)
}
func (self AnimationNodeBlendSpace1D) SetSnap(snap Float) {
	self.Runtime.AnimationNodeBlendSpace1D_set_snap(self, snap)
}
func (self AnimationNodeBlendSpace1D) GetSnap() Float {
	return self.Runtime.AnimationNodeBlendSpace1D_get_snap(self)
}
func (self AnimationNodeBlendSpace1D) SetValueLabel(text string) {
	self.Runtime.AnimationNodeBlendSpace1D_set_value_label(self, text)
}
func (self AnimationNodeBlendSpace1D) GetValueLabel() string {
	return self.Runtime.AnimationNodeBlendSpace1D_get_value_label(self)
}
func (self AnimationNodeBlendSpace1D) SetBlendMode(mode AnimationNodeBlendSpace1DBlendMode) {
	self.Runtime.AnimationNodeBlendSpace1D_set_blend_mode(self, mode)
}
func (self AnimationNodeBlendSpace1D) GetBlendMode() AnimationNodeBlendSpace1DBlendMode {
	return self.Runtime.AnimationNodeBlendSpace1D_get_blend_mode(self)
}
func (self AnimationNodeBlendSpace1D) SetUseSync(enable bool) {
	self.Runtime.AnimationNodeBlendSpace1D_set_use_sync(self, enable)
}
func (self AnimationNodeBlendSpace1D) IsUsingSync() bool {
	return self.Runtime.AnimationNodeBlendSpace1D_is_using_sync(self)
}

type extendsAnimationNodeBlendSpace2D struct {
	_ [0]*extendsAnimationNodeBlendSpace2D
	class
}

func (self AnimationNodeBlendSpace2D) AnimationRootNode() AnimationRootNode {
	var parent AnimationRootNode
	parent.class = self.class
	return parent
}
func (self AnimationNodeBlendSpace2D) AddBlendPoint(node AnimationRootNode, pos Vector2, at_index int64) {
	self.Runtime.AnimationNodeBlendSpace2D_add_blend_point(self, node, pos, at_index)
}
func (self AnimationNodeBlendSpace2D) SetBlendPointPosition(point int64, pos Vector2) {
	self.Runtime.AnimationNodeBlendSpace2D_set_blend_point_position(self, point, pos)
}
func (self AnimationNodeBlendSpace2D) GetBlendPointPosition(point int64) Vector2 {
	return self.Runtime.AnimationNodeBlendSpace2D_get_blend_point_position(self, point)
}
func (self AnimationNodeBlendSpace2D) SetBlendPointNode(point int64, node AnimationRootNode) {
	self.Runtime.AnimationNodeBlendSpace2D_set_blend_point_node(self, point, node)
}
func (self AnimationNodeBlendSpace2D) GetBlendPointNode(point int64) AnimationRootNode {
	return self.Runtime.AnimationNodeBlendSpace2D_get_blend_point_node(self, point)
}
func (self AnimationNodeBlendSpace2D) RemoveBlendPoint(point int64) {
	self.Runtime.AnimationNodeBlendSpace2D_remove_blend_point(self, point)
}
func (self AnimationNodeBlendSpace2D) GetBlendPointCount() int64 {
	return self.Runtime.AnimationNodeBlendSpace2D_get_blend_point_count(self)
}
func (self AnimationNodeBlendSpace2D) AddTriangle(x int64, y int64, z int64, at_index int64) {
	self.Runtime.AnimationNodeBlendSpace2D_add_triangle(self, x, y, z, at_index)
}
func (self AnimationNodeBlendSpace2D) GetTrianglePoint(triangle int64, point int64) int64 {
	return self.Runtime.AnimationNodeBlendSpace2D_get_triangle_point(self, triangle, point)
}
func (self AnimationNodeBlendSpace2D) RemoveTriangle(triangle int64) {
	self.Runtime.AnimationNodeBlendSpace2D_remove_triangle(self, triangle)
}
func (self AnimationNodeBlendSpace2D) GetTriangleCount() int64 {
	return self.Runtime.AnimationNodeBlendSpace2D_get_triangle_count(self)
}
func (self AnimationNodeBlendSpace2D) SetMinSpace(min_space Vector2) {
	self.Runtime.AnimationNodeBlendSpace2D_set_min_space(self, min_space)
}
func (self AnimationNodeBlendSpace2D) GetMinSpace() Vector2 {
	return self.Runtime.AnimationNodeBlendSpace2D_get_min_space(self)
}
func (self AnimationNodeBlendSpace2D) SetMaxSpace(max_space Vector2) {
	self.Runtime.AnimationNodeBlendSpace2D_set_max_space(self, max_space)
}
func (self AnimationNodeBlendSpace2D) GetMaxSpace() Vector2 {
	return self.Runtime.AnimationNodeBlendSpace2D_get_max_space(self)
}
func (self AnimationNodeBlendSpace2D) SetSnap(snap Vector2) {
	self.Runtime.AnimationNodeBlendSpace2D_set_snap(self, snap)
}
func (self AnimationNodeBlendSpace2D) GetSnap() Vector2 {
	return self.Runtime.AnimationNodeBlendSpace2D_get_snap(self)
}
func (self AnimationNodeBlendSpace2D) SetXLabel(text string) {
	self.Runtime.AnimationNodeBlendSpace2D_set_x_label(self, text)
}
func (self AnimationNodeBlendSpace2D) GetXLabel() string {
	return self.Runtime.AnimationNodeBlendSpace2D_get_x_label(self)
}
func (self AnimationNodeBlendSpace2D) SetYLabel(text string) {
	self.Runtime.AnimationNodeBlendSpace2D_set_y_label(self, text)
}
func (self AnimationNodeBlendSpace2D) GetYLabel() string {
	return self.Runtime.AnimationNodeBlendSpace2D_get_y_label(self)
}
func (self AnimationNodeBlendSpace2D) SetAutoTriangles(enable bool) {
	self.Runtime.AnimationNodeBlendSpace2D_set_auto_triangles(self, enable)
}
func (self AnimationNodeBlendSpace2D) GetAutoTriangles() bool {
	return self.Runtime.AnimationNodeBlendSpace2D_get_auto_triangles(self)
}
func (self AnimationNodeBlendSpace2D) SetBlendMode(mode AnimationNodeBlendSpace2DBlendMode) {
	self.Runtime.AnimationNodeBlendSpace2D_set_blend_mode(self, mode)
}
func (self AnimationNodeBlendSpace2D) GetBlendMode() AnimationNodeBlendSpace2DBlendMode {
	return self.Runtime.AnimationNodeBlendSpace2D_get_blend_mode(self)
}
func (self AnimationNodeBlendSpace2D) SetUseSync(enable bool) {
	self.Runtime.AnimationNodeBlendSpace2D_set_use_sync(self, enable)
}
func (self AnimationNodeBlendSpace2D) IsUsingSync() bool {
	return self.Runtime.AnimationNodeBlendSpace2D_is_using_sync(self)
}

type extendsAnimationNodeBlendTree struct {
	_ [0]*extendsAnimationNodeBlendTree
	class
}

func (self AnimationNodeBlendTree) AnimationRootNode() AnimationRootNode {
	var parent AnimationRootNode
	parent.class = self.class
	return parent
}
func (self AnimationNodeBlendTree) AddNode(name string, node AnimationNode, position Vector2) {
	self.Runtime.AnimationNodeBlendTree_add_node(self, name, node, position)
}
func (self AnimationNodeBlendTree) GetNode(name string) AnimationNode {
	return self.Runtime.AnimationNodeBlendTree_get_node(self, name)
}
func (self AnimationNodeBlendTree) RemoveNode(name string) {
	self.Runtime.AnimationNodeBlendTree_remove_node(self, name)
}
func (self AnimationNodeBlendTree) RenameNode(name string, new_name string) {
	self.Runtime.AnimationNodeBlendTree_rename_node(self, name, new_name)
}
func (self AnimationNodeBlendTree) HasNode(name string) bool {
	return self.Runtime.AnimationNodeBlendTree_has_node(self, name)
}
func (self AnimationNodeBlendTree) ConnectNode(input_node string, input_index int64, output_node string) {
	self.Runtime.AnimationNodeBlendTree_connect_node(self, input_node, input_index, output_node)
}
func (self AnimationNodeBlendTree) DisconnectNode(input_node string, input_index int64) {
	self.Runtime.AnimationNodeBlendTree_disconnect_node(self, input_node, input_index)
}
func (self AnimationNodeBlendTree) SetNodePosition(name string, position Vector2) {
	self.Runtime.AnimationNodeBlendTree_set_node_position(self, name, position)
}
func (self AnimationNodeBlendTree) GetNodePosition(name string) Vector2 {
	return self.Runtime.AnimationNodeBlendTree_get_node_position(self, name)
}
func (self AnimationNodeBlendTree) SetGraphOffset(offset Vector2) {
	self.Runtime.AnimationNodeBlendTree_set_graph_offset(self, offset)
}
func (self AnimationNodeBlendTree) GetGraphOffset() Vector2 {
	return self.Runtime.AnimationNodeBlendTree_get_graph_offset(self)
}

type extendsAnimationNodeOneShot struct {
	_ [0]*extendsAnimationNodeOneShot
	class
}

func (self AnimationNodeOneShot) AnimationNodeSync() AnimationNodeSync {
	var parent AnimationNodeSync
	parent.class = self.class
	return parent
}
func (self AnimationNodeOneShot) SetFadeinTime(time Float) {
	self.Runtime.AnimationNodeOneShot_set_fadein_time(self, time)
}
func (self AnimationNodeOneShot) GetFadeinTime() Float {
	return self.Runtime.AnimationNodeOneShot_get_fadein_time(self)
}
func (self AnimationNodeOneShot) SetFadeinCurve(curve Curve) {
	self.Runtime.AnimationNodeOneShot_set_fadein_curve(self, curve)
}
func (self AnimationNodeOneShot) GetFadeinCurve() Curve {
	return self.Runtime.AnimationNodeOneShot_get_fadein_curve(self)
}
func (self AnimationNodeOneShot) SetFadeoutTime(time Float) {
	self.Runtime.AnimationNodeOneShot_set_fadeout_time(self, time)
}
func (self AnimationNodeOneShot) GetFadeoutTime() Float {
	return self.Runtime.AnimationNodeOneShot_get_fadeout_time(self)
}
func (self AnimationNodeOneShot) SetFadeoutCurve(curve Curve) {
	self.Runtime.AnimationNodeOneShot_set_fadeout_curve(self, curve)
}
func (self AnimationNodeOneShot) GetFadeoutCurve() Curve {
	return self.Runtime.AnimationNodeOneShot_get_fadeout_curve(self)
}
func (self AnimationNodeOneShot) SetAutorestart(active bool) {
	self.Runtime.AnimationNodeOneShot_set_autorestart(self, active)
}
func (self AnimationNodeOneShot) HasAutorestart() bool {
	return self.Runtime.AnimationNodeOneShot_has_autorestart(self)
}
func (self AnimationNodeOneShot) SetAutorestartDelay(time Float) {
	self.Runtime.AnimationNodeOneShot_set_autorestart_delay(self, time)
}
func (self AnimationNodeOneShot) GetAutorestartDelay() Float {
	return self.Runtime.AnimationNodeOneShot_get_autorestart_delay(self)
}
func (self AnimationNodeOneShot) SetAutorestartRandomDelay(time Float) {
	self.Runtime.AnimationNodeOneShot_set_autorestart_random_delay(self, time)
}
func (self AnimationNodeOneShot) GetAutorestartRandomDelay() Float {
	return self.Runtime.AnimationNodeOneShot_get_autorestart_random_delay(self)
}
func (self AnimationNodeOneShot) SetMixMode(mode AnimationNodeOneShotMixMode) {
	self.Runtime.AnimationNodeOneShot_set_mix_mode(self, mode)
}
func (self AnimationNodeOneShot) GetMixMode() AnimationNodeOneShotMixMode {
	return self.Runtime.AnimationNodeOneShot_get_mix_mode(self)
}

type extendsAnimationNodeOutput struct {
	_ [0]*extendsAnimationNodeOutput
	class
}

func (self AnimationNodeOutput) AnimationNode() AnimationNode {
	var parent AnimationNode
	parent.class = self.class
	return parent
}

type extendsAnimationNodeStateMachine struct {
	_ [0]*extendsAnimationNodeStateMachine
	class
}

func (self AnimationNodeStateMachine) AnimationRootNode() AnimationRootNode {
	var parent AnimationRootNode
	parent.class = self.class
	return parent
}
func (self AnimationNodeStateMachine) AddNode(name string, node AnimationNode, position Vector2) {
	self.Runtime.AnimationNodeStateMachine_add_node(self, name, node, position)
}
func (self AnimationNodeStateMachine) ReplaceNode(name string, node AnimationNode) {
	self.Runtime.AnimationNodeStateMachine_replace_node(self, name, node)
}
func (self AnimationNodeStateMachine) GetNode(name string) AnimationNode {
	return self.Runtime.AnimationNodeStateMachine_get_node(self, name)
}
func (self AnimationNodeStateMachine) RemoveNode(name string) {
	self.Runtime.AnimationNodeStateMachine_remove_node(self, name)
}
func (self AnimationNodeStateMachine) RenameNode(name string, new_name string) {
	self.Runtime.AnimationNodeStateMachine_rename_node(self, name, new_name)
}
func (self AnimationNodeStateMachine) HasNode(name string) bool {
	return self.Runtime.AnimationNodeStateMachine_has_node(self, name)
}
func (self AnimationNodeStateMachine) GetNodeName(node AnimationNode) string {
	return self.Runtime.AnimationNodeStateMachine_get_node_name(self, node)
}
func (self AnimationNodeStateMachine) SetNodePosition(name string, position Vector2) {
	self.Runtime.AnimationNodeStateMachine_set_node_position(self, name, position)
}
func (self AnimationNodeStateMachine) GetNodePosition(name string) Vector2 {
	return self.Runtime.AnimationNodeStateMachine_get_node_position(self, name)
}
func (self AnimationNodeStateMachine) HasTransition(from string, to string) bool {
	return self.Runtime.AnimationNodeStateMachine_has_transition(self, from, to)
}
func (self AnimationNodeStateMachine) AddTransition(from string, to string, transition AnimationNodeStateMachineTransition) {
	self.Runtime.AnimationNodeStateMachine_add_transition(self, from, to, transition)
}
func (self AnimationNodeStateMachine) GetTransition(idx int64) AnimationNodeStateMachineTransition {
	return self.Runtime.AnimationNodeStateMachine_get_transition(self, idx)
}
func (self AnimationNodeStateMachine) GetTransitionFrom(idx int64) string {
	return self.Runtime.AnimationNodeStateMachine_get_transition_from(self, idx)
}
func (self AnimationNodeStateMachine) GetTransitionTo(idx int64) string {
	return self.Runtime.AnimationNodeStateMachine_get_transition_to(self, idx)
}
func (self AnimationNodeStateMachine) GetTransitionCount() int64 {
	return self.Runtime.AnimationNodeStateMachine_get_transition_count(self)
}
func (self AnimationNodeStateMachine) RemoveTransitionByIndex(idx int64) {
	self.Runtime.AnimationNodeStateMachine_remove_transition_by_index(self, idx)
}
func (self AnimationNodeStateMachine) RemoveTransition(from string, to string) {
	self.Runtime.AnimationNodeStateMachine_remove_transition(self, from, to)
}
func (self AnimationNodeStateMachine) SetGraphOffset(offset Vector2) {
	self.Runtime.AnimationNodeStateMachine_set_graph_offset(self, offset)
}
func (self AnimationNodeStateMachine) GetGraphOffset() Vector2 {
	return self.Runtime.AnimationNodeStateMachine_get_graph_offset(self)
}
func (self AnimationNodeStateMachine) SetStateMachineType(state_machine_type AnimationNodeStateMachineStateMachineType) {
	self.Runtime.AnimationNodeStateMachine_set_state_machine_type(self, state_machine_type)
}
func (self AnimationNodeStateMachine) GetStateMachineType() AnimationNodeStateMachineStateMachineType {
	return self.Runtime.AnimationNodeStateMachine_get_state_machine_type(self)
}
func (self AnimationNodeStateMachine) SetAllowTransitionToSelf(enable bool) {
	self.Runtime.AnimationNodeStateMachine_set_allow_transition_to_self(self, enable)
}
func (self AnimationNodeStateMachine) IsAllowTransitionToSelf() bool {
	return self.Runtime.AnimationNodeStateMachine_is_allow_transition_to_self(self)
}
func (self AnimationNodeStateMachine) SetResetEnds(enable bool) {
	self.Runtime.AnimationNodeStateMachine_set_reset_ends(self, enable)
}
func (self AnimationNodeStateMachine) AreEndsReset() bool {
	return self.Runtime.AnimationNodeStateMachine_are_ends_reset(self)
}

type extendsAnimationNodeStateMachinePlayback struct {
	_ [0]*extendsAnimationNodeStateMachinePlayback
	class
}

func (self AnimationNodeStateMachinePlayback) Resource() Resource {
	var parent Resource
	parent.class = self.class
	return parent
}
func (self AnimationNodeStateMachinePlayback) Travel(to_node string, reset_on_teleport bool) {
	self.Runtime.AnimationNodeStateMachinePlayback_travel(self, to_node, reset_on_teleport)
}
func (self AnimationNodeStateMachinePlayback) Start(node string, reset bool) {
	self.Runtime.AnimationNodeStateMachinePlayback_start(self, node, reset)
}
func (self AnimationNodeStateMachinePlayback) Next() {
	self.Runtime.AnimationNodeStateMachinePlayback_next(self)
}
func (self AnimationNodeStateMachinePlayback) Stop() {
	self.Runtime.AnimationNodeStateMachinePlayback_stop(self)
}
func (self AnimationNodeStateMachinePlayback) IsPlaying() bool {
	return self.Runtime.AnimationNodeStateMachinePlayback_is_playing(self)
}
func (self AnimationNodeStateMachinePlayback) GetCurrentNode() string {
	return self.Runtime.AnimationNodeStateMachinePlayback_get_current_node(self)
}
func (self AnimationNodeStateMachinePlayback) GetCurrentPlayPosition() Float {
	return self.Runtime.AnimationNodeStateMachinePlayback_get_current_play_position(self)
}
func (self AnimationNodeStateMachinePlayback) GetCurrentLength() Float {
	return self.Runtime.AnimationNodeStateMachinePlayback_get_current_length(self)
}
func (self AnimationNodeStateMachinePlayback) GetFadingFromNode() string {
	return self.Runtime.AnimationNodeStateMachinePlayback_get_fading_from_node(self)
}
func (self AnimationNodeStateMachinePlayback) GetTravelPath() ArrayOf[string] {
	return self.Runtime.AnimationNodeStateMachinePlayback_get_travel_path(self)
}

type extendsAnimationNodeStateMachineTransition struct {
	_ [0]*extendsAnimationNodeStateMachineTransition
	class
}

func (self AnimationNodeStateMachineTransition) Resource() Resource {
	var parent Resource
	parent.class = self.class
	return parent
}
func (self AnimationNodeStateMachineTransition) SetSwitchMode(mode AnimationNodeStateMachineTransitionSwitchMode) {
	self.Runtime.AnimationNodeStateMachineTransition_set_switch_mode(self, mode)
}
func (self AnimationNodeStateMachineTransition) GetSwitchMode() AnimationNodeStateMachineTransitionSwitchMode {
	return self.Runtime.AnimationNodeStateMachineTransition_get_switch_mode(self)
}
func (self AnimationNodeStateMachineTransition) SetAdvanceMode(mode AnimationNodeStateMachineTransitionAdvanceMode) {
	self.Runtime.AnimationNodeStateMachineTransition_set_advance_mode(self, mode)
}
func (self AnimationNodeStateMachineTransition) GetAdvanceMode() AnimationNodeStateMachineTransitionAdvanceMode {
	return self.Runtime.AnimationNodeStateMachineTransition_get_advance_mode(self)
}
func (self AnimationNodeStateMachineTransition) SetAdvanceCondition(name string) {
	self.Runtime.AnimationNodeStateMachineTransition_set_advance_condition(self, name)
}
func (self AnimationNodeStateMachineTransition) GetAdvanceCondition() string {
	return self.Runtime.AnimationNodeStateMachineTransition_get_advance_condition(self)
}
func (self AnimationNodeStateMachineTransition) SetXfadeTime(secs Float) {
	self.Runtime.AnimationNodeStateMachineTransition_set_xfade_time(self, secs)
}
func (self AnimationNodeStateMachineTransition) GetXfadeTime() Float {
	return self.Runtime.AnimationNodeStateMachineTransition_get_xfade_time(self)
}
func (self AnimationNodeStateMachineTransition) SetXfadeCurve(curve Curve) {
	self.Runtime.AnimationNodeStateMachineTransition_set_xfade_curve(self, curve)
}
func (self AnimationNodeStateMachineTransition) GetXfadeCurve() Curve {
	return self.Runtime.AnimationNodeStateMachineTransition_get_xfade_curve(self)
}
func (self AnimationNodeStateMachineTransition) SetReset(reset bool) {
	self.Runtime.AnimationNodeStateMachineTransition_set_reset(self, reset)
}
func (self AnimationNodeStateMachineTransition) IsReset() bool {
	return self.Runtime.AnimationNodeStateMachineTransition_is_reset(self)
}
func (self AnimationNodeStateMachineTransition) SetPriority(priority int64) {
	self.Runtime.AnimationNodeStateMachineTransition_set_priority(self, priority)
}
func (self AnimationNodeStateMachineTransition) GetPriority() int64 {
	return self.Runtime.AnimationNodeStateMachineTransition_get_priority(self)
}
func (self AnimationNodeStateMachineTransition) SetAdvanceExpression(text string) {
	self.Runtime.AnimationNodeStateMachineTransition_set_advance_expression(self, text)
}
func (self AnimationNodeStateMachineTransition) GetAdvanceExpression() string {
	return self.Runtime.AnimationNodeStateMachineTransition_get_advance_expression(self)
}

type extendsAnimationNodeSub2 struct {
	_ [0]*extendsAnimationNodeSub2
	class
}

func (self AnimationNodeSub2) AnimationNodeSync() AnimationNodeSync {
	var parent AnimationNodeSync
	parent.class = self.class
	return parent
}

type extendsAnimationNodeSync struct {
	_ [0]*extendsAnimationNodeSync
	class
}

func (self AnimationNodeSync) AnimationNode() AnimationNode {
	var parent AnimationNode
	parent.class = self.class
	return parent
}
func (self AnimationNodeSync) SetUseSync(enable bool) {
	self.Runtime.AnimationNodeSync_set_use_sync(self, enable)
}
func (self AnimationNodeSync) IsUsingSync() bool {
	return self.Runtime.AnimationNodeSync_is_using_sync(self)
}

type extendsAnimationNodeTimeScale struct {
	_ [0]*extendsAnimationNodeTimeScale
	class
}

func (self AnimationNodeTimeScale) AnimationNode() AnimationNode {
	var parent AnimationNode
	parent.class = self.class
	return parent
}

type extendsAnimationNodeTimeSeek struct {
	_ [0]*extendsAnimationNodeTimeSeek
	class
}

func (self AnimationNodeTimeSeek) AnimationNode() AnimationNode {
	var parent AnimationNode
	parent.class = self.class
	return parent
}

type extendsAnimationNodeTransition struct {
	_ [0]*extendsAnimationNodeTransition
	class
}

func (self AnimationNodeTransition) AnimationNodeSync() AnimationNodeSync {
	var parent AnimationNodeSync
	parent.class = self.class
	return parent
}
func (self AnimationNodeTransition) SetInputCount(input_count int64) {
	self.Runtime.AnimationNodeTransition_set_input_count(self, input_count)
}
func (self AnimationNodeTransition) SetInputAsAutoAdvance(input int64, enable bool) {
	self.Runtime.AnimationNodeTransition_set_input_as_auto_advance(self, input, enable)
}
func (self AnimationNodeTransition) IsInputSetAsAutoAdvance(input int64) bool {
	return self.Runtime.AnimationNodeTransition_is_input_set_as_auto_advance(self, input)
}
func (self AnimationNodeTransition) SetInputReset(input int64, enable bool) {
	self.Runtime.AnimationNodeTransition_set_input_reset(self, input, enable)
}
func (self AnimationNodeTransition) IsInputReset(input int64) bool {
	return self.Runtime.AnimationNodeTransition_is_input_reset(self, input)
}
func (self AnimationNodeTransition) SetXfadeTime(time Float) {
	self.Runtime.AnimationNodeTransition_set_xfade_time(self, time)
}
func (self AnimationNodeTransition) GetXfadeTime() Float {
	return self.Runtime.AnimationNodeTransition_get_xfade_time(self)
}
func (self AnimationNodeTransition) SetXfadeCurve(curve Curve) {
	self.Runtime.AnimationNodeTransition_set_xfade_curve(self, curve)
}
func (self AnimationNodeTransition) GetXfadeCurve() Curve {
	return self.Runtime.AnimationNodeTransition_get_xfade_curve(self)
}
func (self AnimationNodeTransition) SetAllowTransitionToSelf(enable bool) {
	self.Runtime.AnimationNodeTransition_set_allow_transition_to_self(self, enable)
}
func (self AnimationNodeTransition) IsAllowTransitionToSelf() bool {
	return self.Runtime.AnimationNodeTransition_is_allow_transition_to_self(self)
}

type extendsAnimationPlayer struct {
	_ [0]*extendsAnimationPlayer
	class
}

func (self AnimationPlayer) AnimationMixer() AnimationMixer {
	var parent AnimationMixer
	parent.class = self.class
	return parent
}
func (self AnimationPlayer) AnimationSetNext(animation_from string, animation_to string) {
	self.Runtime.AnimationPlayer_animation_set_next(self, animation_from, animation_to)
}
func (self AnimationPlayer) AnimationGetNext(animation_from string) string {
	return self.Runtime.AnimationPlayer_animation_get_next(self, animation_from)
}
func (self AnimationPlayer) SetBlendTime(animation_from string, animation_to string, sec Float) {
	self.Runtime.AnimationPlayer_set_blend_time(self, animation_from, animation_to, sec)
}
func (self AnimationPlayer) GetBlendTime(animation_from string, animation_to string) Float {
	return self.Runtime.AnimationPlayer_get_blend_time(self, animation_from, animation_to)
}
func (self AnimationPlayer) SetDefaultBlendTime(sec Float) {
	self.Runtime.AnimationPlayer_set_default_blend_time(self, sec)
}
func (self AnimationPlayer) GetDefaultBlendTime() Float {
	return self.Runtime.AnimationPlayer_get_default_blend_time(self)
}
func (self AnimationPlayer) Play(name string, custom_blend Float, custom_speed Float, from_end bool) {
	self.Runtime.AnimationPlayer_play(self, name, custom_blend, custom_speed, from_end)
}
func (self AnimationPlayer) PlayBackwards(name string, custom_blend Float) {
	self.Runtime.AnimationPlayer_play_backwards(self, name, custom_blend)
}
func (self AnimationPlayer) Pause() {
	self.Runtime.AnimationPlayer_pause(self)
}
func (self AnimationPlayer) Stop(keep_state bool) {
	self.Runtime.AnimationPlayer_stop(self, keep_state)
}
func (self AnimationPlayer) IsPlaying() bool {
	return self.Runtime.AnimationPlayer_is_playing(self)
}
func (self AnimationPlayer) SetCurrentAnimation(animation string) {
	self.Runtime.AnimationPlayer_set_current_animation(self, animation)
}
func (self AnimationPlayer) GetCurrentAnimation() string {
	return self.Runtime.AnimationPlayer_get_current_animation(self)
}
func (self AnimationPlayer) SetAssignedAnimation(animation string) {
	self.Runtime.AnimationPlayer_set_assigned_animation(self, animation)
}
func (self AnimationPlayer) GetAssignedAnimation() string {
	return self.Runtime.AnimationPlayer_get_assigned_animation(self)
}
func (self AnimationPlayer) Queue(name string) {
	self.Runtime.AnimationPlayer_queue(self, name)
}
func (self AnimationPlayer) GetQueue() PackedStringArray {
	return self.Runtime.AnimationPlayer_get_queue(self)
}
func (self AnimationPlayer) ClearQueue() {
	self.Runtime.AnimationPlayer_clear_queue(self)
}
func (self AnimationPlayer) SetSpeedScale(speed Float) {
	self.Runtime.AnimationPlayer_set_speed_scale(self, speed)
}
func (self AnimationPlayer) GetSpeedScale() Float {
	return self.Runtime.AnimationPlayer_get_speed_scale(self)
}
func (self AnimationPlayer) GetPlayingSpeed() Float {
	return self.Runtime.AnimationPlayer_get_playing_speed(self)
}
func (self AnimationPlayer) SetAutoplay(name string) {
	self.Runtime.AnimationPlayer_set_autoplay(self, name)
}
func (self AnimationPlayer) GetAutoplay() string {
	return self.Runtime.AnimationPlayer_get_autoplay(self)
}
func (self AnimationPlayer) SetMovieQuitOnFinishEnabled(enabled bool) {
	self.Runtime.AnimationPlayer_set_movie_quit_on_finish_enabled(self, enabled)
}
func (self AnimationPlayer) IsMovieQuitOnFinishEnabled() bool {
	return self.Runtime.AnimationPlayer_is_movie_quit_on_finish_enabled(self)
}
func (self AnimationPlayer) GetCurrentAnimationPosition() Float {
	return self.Runtime.AnimationPlayer_get_current_animation_position(self)
}
func (self AnimationPlayer) GetCurrentAnimationLength() Float {
	return self.Runtime.AnimationPlayer_get_current_animation_length(self)
}
func (self AnimationPlayer) SeekTo(seconds Float, update bool, update_only bool) {
	self.Runtime.AnimationPlayer_seek(self, seconds, update, update_only)
}
func (self AnimationPlayer) SetProcessCallback(mode AnimationPlayerAnimationProcessCallback) {
	self.Runtime.AnimationPlayer_set_process_callback(self, mode)
}
func (self AnimationPlayer) GetProcessCallback() AnimationPlayerAnimationProcessCallback {
	return self.Runtime.AnimationPlayer_get_process_callback(self)
}
func (self AnimationPlayer) SetMethodCallMode(mode AnimationPlayerAnimationMethodCallMode) {
	self.Runtime.AnimationPlayer_set_method_call_mode(self, mode)
}
func (self AnimationPlayer) GetMethodCallMode() AnimationPlayerAnimationMethodCallMode {
	return self.Runtime.AnimationPlayer_get_method_call_mode(self)
}
func (self AnimationPlayer) SetRoot(path NodePath) {
	self.Runtime.AnimationPlayer_set_root(self, path)
}
func (self AnimationPlayer) GetRoot() NodePath {
	return self.Runtime.AnimationPlayer_get_root(self)
}

type extendsAnimationRootNode struct {
	_ [0]*extendsAnimationRootNode
	class
}

func (self AnimationRootNode) AnimationNode() AnimationNode {
	var parent AnimationNode
	parent.class = self.class
	return parent
}

type extendsAnimationTree struct {
	_ [0]*extendsAnimationTree
	class
}

func (self AnimationTree) AnimationMixer() AnimationMixer {
	var parent AnimationMixer
	parent.class = self.class
	return parent
}
func (self AnimationTree) SetTreeRoot(animation_node AnimationRootNode) {
	self.Runtime.AnimationTree_set_tree_root(self, animation_node)
}
func (self AnimationTree) GetTreeRoot() AnimationRootNode {
	return self.Runtime.AnimationTree_get_tree_root(self)
}
func (self AnimationTree) SetAdvanceExpressionBaseNode(path NodePath) {
	self.Runtime.AnimationTree_set_advance_expression_base_node(self, path)
}
func (self AnimationTree) GetAdvanceExpressionBaseNode() NodePath {
	return self.Runtime.AnimationTree_get_advance_expression_base_node(self)
}
func (self AnimationTree) SetAnimationPlayer(path NodePath) {
	self.Runtime.AnimationTree_set_animation_player(self, path)
}
func (self AnimationTree) GetAnimationPlayer() NodePath {
	return self.Runtime.AnimationTree_get_animation_player(self)
}
func (self AnimationTree) SetProcessCallback(mode AnimationTreeAnimationProcessCallback) {
	self.Runtime.AnimationTree_set_process_callback(self, mode)
}
func (self AnimationTree) GetProcessCallback() AnimationTreeAnimationProcessCallback {
	return self.Runtime.AnimationTree_get_process_callback(self)
}

type extendsArea2D struct {
	_ [0]*extendsArea2D
	class
}

func (self Area2D) CollisionObject2D() CollisionObject2D {
	var parent CollisionObject2D
	parent.class = self.class
	return parent
}
func (self Area2D) SetGravitySpaceOverrideMode(space_override_mode Area2DSpaceOverride) {
	self.Runtime.Area2D_set_gravity_space_override_mode(self, space_override_mode)
}
func (self Area2D) GetGravitySpaceOverrideMode() Area2DSpaceOverride {
	return self.Runtime.Area2D_get_gravity_space_override_mode(self)
}
func (self Area2D) SetGravityIsPoint(enable bool) {
	self.Runtime.Area2D_set_gravity_is_point(self, enable)
}
func (self Area2D) IsGravityAPoint() bool {
	return self.Runtime.Area2D_is_gravity_a_point(self)
}
func (self Area2D) SetGravityPointUnitDistance(distance_scale Float) {
	self.Runtime.Area2D_set_gravity_point_unit_distance(self, distance_scale)
}
func (self Area2D) GetGravityPointUnitDistance() Float {
	return self.Runtime.Area2D_get_gravity_point_unit_distance(self)
}
func (self Area2D) SetGravityPointCenter(center Vector2) {
	self.Runtime.Area2D_set_gravity_point_center(self, center)
}
func (self Area2D) GetGravityPointCenter() Vector2 {
	return self.Runtime.Area2D_get_gravity_point_center(self)
}
func (self Area2D) SetGravityDirection(direction Vector2) {
	self.Runtime.Area2D_set_gravity_direction(self, direction)
}
func (self Area2D) GetGravityDirection() Vector2 {
	return self.Runtime.Area2D_get_gravity_direction(self)
}
func (self Area2D) SetGravity(gravity Float) {
	self.Runtime.Area2D_set_gravity(self, gravity)
}
func (self Area2D) GetGravity() Float {
	return self.Runtime.Area2D_get_gravity(self)
}
func (self Area2D) SetLinearDampSpaceOverrideMode(space_override_mode Area2DSpaceOverride) {
	self.Runtime.Area2D_set_linear_damp_space_override_mode(self, space_override_mode)
}
func (self Area2D) GetLinearDampSpaceOverrideMode() Area2DSpaceOverride {
	return self.Runtime.Area2D_get_linear_damp_space_override_mode(self)
}
func (self Area2D) SetAngularDampSpaceOverrideMode(space_override_mode Area2DSpaceOverride) {
	self.Runtime.Area2D_set_angular_damp_space_override_mode(self, space_override_mode)
}
func (self Area2D) GetAngularDampSpaceOverrideMode() Area2DSpaceOverride {
	return self.Runtime.Area2D_get_angular_damp_space_override_mode(self)
}
func (self Area2D) SetLinearDamp(linear_damp Float) {
	self.Runtime.Area2D_set_linear_damp(self, linear_damp)
}
func (self Area2D) GetLinearDamp() Float {
	return self.Runtime.Area2D_get_linear_damp(self)
}
func (self Area2D) SetAngularDamp(angular_damp Float) {
	self.Runtime.Area2D_set_angular_damp(self, angular_damp)
}
func (self Area2D) GetAngularDamp() Float {
	return self.Runtime.Area2D_get_angular_damp(self)
}
func (self Area2D) SetPriority(priority int64) {
	self.Runtime.Area2D_set_priority(self, priority)
}
func (self Area2D) GetPriority() int64 {
	return self.Runtime.Area2D_get_priority(self)
}
func (self Area2D) SetMonitoring(enable bool) {
	self.Runtime.Area2D_set_monitoring(self, enable)
}
func (self Area2D) IsMonitoring() bool {
	return self.Runtime.Area2D_is_monitoring(self)
}
func (self Area2D) SetMonitorable(enable bool) {
	self.Runtime.Area2D_set_monitorable(self, enable)
}
func (self Area2D) IsMonitorable() bool {
	return self.Runtime.Area2D_is_monitorable(self)
}
func (self Area2D) GetOverlappingBodies() ArrayOf[Node2D] {
	return self.Runtime.Area2D_get_overlapping_bodies(self)
}
func (self Area2D) GetOverlappingAreas() ArrayOf[Area2D] {
	return self.Runtime.Area2D_get_overlapping_areas(self)
}
func (self Area2D) HasOverlappingBodies() bool {
	return self.Runtime.Area2D_has_overlapping_bodies(self)
}
func (self Area2D) HasOverlappingAreas() bool {
	return self.Runtime.Area2D_has_overlapping_areas(self)
}
func (self Area2D) OverlapsBody(body Node) bool {
	return self.Runtime.Area2D_overlaps_body(self, body)
}
func (self Area2D) OverlapsArea(area Node) bool {
	return self.Runtime.Area2D_overlaps_area(self, area)
}
func (self Area2D) SetAudioBusName(name string) {
	self.Runtime.Area2D_set_audio_bus_name(self, name)
}
func (self Area2D) GetAudioBusName() string {
	return self.Runtime.Area2D_get_audio_bus_name(self)
}
func (self Area2D) SetAudioBusOverride(enable bool) {
	self.Runtime.Area2D_set_audio_bus_override(self, enable)
}
func (self Area2D) IsOverridingAudioBus() bool {
	return self.Runtime.Area2D_is_overriding_audio_bus(self)
}

type extendsArea3D struct {
	_ [0]*extendsArea3D
	class
}

func (self Area3D) CollisionObject3D() CollisionObject3D {
	var parent CollisionObject3D
	parent.class = self.class
	return parent
}
func (self Area3D) SetGravitySpaceOverrideMode(space_override_mode Area3DSpaceOverride) {
	self.Runtime.Area3D_set_gravity_space_override_mode(self, space_override_mode)
}
func (self Area3D) GetGravitySpaceOverrideMode() Area3DSpaceOverride {
	return self.Runtime.Area3D_get_gravity_space_override_mode(self)
}
func (self Area3D) SetGravityIsPoint(enable bool) {
	self.Runtime.Area3D_set_gravity_is_point(self, enable)
}
func (self Area3D) IsGravityAPoint() bool {
	return self.Runtime.Area3D_is_gravity_a_point(self)
}
func (self Area3D) SetGravityPointUnitDistance(distance_scale Float) {
	self.Runtime.Area3D_set_gravity_point_unit_distance(self, distance_scale)
}
func (self Area3D) GetGravityPointUnitDistance() Float {
	return self.Runtime.Area3D_get_gravity_point_unit_distance(self)
}
func (self Area3D) SetGravityPointCenter(center Vector3) {
	self.Runtime.Area3D_set_gravity_point_center(self, center)
}
func (self Area3D) GetGravityPointCenter() Vector3 {
	return self.Runtime.Area3D_get_gravity_point_center(self)
}
func (self Area3D) SetGravityDirection(direction Vector3) {
	self.Runtime.Area3D_set_gravity_direction(self, direction)
}
func (self Area3D) GetGravityDirection() Vector3 {
	return self.Runtime.Area3D_get_gravity_direction(self)
}
func (self Area3D) SetGravity(gravity Float) {
	self.Runtime.Area3D_set_gravity(self, gravity)
}
func (self Area3D) GetGravity() Float {
	return self.Runtime.Area3D_get_gravity(self)
}
func (self Area3D) SetLinearDampSpaceOverrideMode(space_override_mode Area3DSpaceOverride) {
	self.Runtime.Area3D_set_linear_damp_space_override_mode(self, space_override_mode)
}
func (self Area3D) GetLinearDampSpaceOverrideMode() Area3DSpaceOverride {
	return self.Runtime.Area3D_get_linear_damp_space_override_mode(self)
}
func (self Area3D) SetAngularDampSpaceOverrideMode(space_override_mode Area3DSpaceOverride) {
	self.Runtime.Area3D_set_angular_damp_space_override_mode(self, space_override_mode)
}
func (self Area3D) GetAngularDampSpaceOverrideMode() Area3DSpaceOverride {
	return self.Runtime.Area3D_get_angular_damp_space_override_mode(self)
}
func (self Area3D) SetAngularDamp(angular_damp Float) {
	self.Runtime.Area3D_set_angular_damp(self, angular_damp)
}
func (self Area3D) GetAngularDamp() Float {
	return self.Runtime.Area3D_get_angular_damp(self)
}
func (self Area3D) SetLinearDamp(linear_damp Float) {
	self.Runtime.Area3D_set_linear_damp(self, linear_damp)
}
func (self Area3D) GetLinearDamp() Float {
	return self.Runtime.Area3D_get_linear_damp(self)
}
func (self Area3D) SetPriority(priority int64) {
	self.Runtime.Area3D_set_priority(self, priority)
}
func (self Area3D) GetPriority() int64 {
	return self.Runtime.Area3D_get_priority(self)
}
func (self Area3D) SetWindForceMagnitude(wind_force_magnitude Float) {
	self.Runtime.Area3D_set_wind_force_magnitude(self, wind_force_magnitude)
}
func (self Area3D) GetWindForceMagnitude() Float {
	return self.Runtime.Area3D_get_wind_force_magnitude(self)
}
func (self Area3D) SetWindAttenuationFactor(wind_attenuation_factor Float) {
	self.Runtime.Area3D_set_wind_attenuation_factor(self, wind_attenuation_factor)
}
func (self Area3D) GetWindAttenuationFactor() Float {
	return self.Runtime.Area3D_get_wind_attenuation_factor(self)
}
func (self Area3D) SetWindSourcePath(wind_source_path NodePath) {
	self.Runtime.Area3D_set_wind_source_path(self, wind_source_path)
}
func (self Area3D) GetWindSourcePath() NodePath {
	return self.Runtime.Area3D_get_wind_source_path(self)
}
func (self Area3D) SetMonitorable(enable bool) {
	self.Runtime.Area3D_set_monitorable(self, enable)
}
func (self Area3D) IsMonitorable() bool {
	return self.Runtime.Area3D_is_monitorable(self)
}
func (self Area3D) SetMonitoring(enable bool) {
	self.Runtime.Area3D_set_monitoring(self, enable)
}
func (self Area3D) IsMonitoring() bool {
	return self.Runtime.Area3D_is_monitoring(self)
}
func (self Area3D) GetOverlappingBodies() ArrayOf[Node3D] {
	return self.Runtime.Area3D_get_overlapping_bodies(self)
}
func (self Area3D) GetOverlappingAreas() ArrayOf[Area3D] {
	return self.Runtime.Area3D_get_overlapping_areas(self)
}
func (self Area3D) HasOverlappingBodies() bool {
	return self.Runtime.Area3D_has_overlapping_bodies(self)
}
func (self Area3D) HasOverlappingAreas() bool {
	return self.Runtime.Area3D_has_overlapping_areas(self)
}
func (self Area3D) OverlapsBody(body Node) bool {
	return self.Runtime.Area3D_overlaps_body(self, body)
}
func (self Area3D) OverlapsArea(area Node) bool {
	return self.Runtime.Area3D_overlaps_area(self, area)
}
func (self Area3D) SetAudioBusOverride(enable bool) {
	self.Runtime.Area3D_set_audio_bus_override(self, enable)
}
func (self Area3D) IsOverridingAudioBus() bool {
	return self.Runtime.Area3D_is_overriding_audio_bus(self)
}
func (self Area3D) SetAudioBusName(name string) {
	self.Runtime.Area3D_set_audio_bus_name(self, name)
}
func (self Area3D) GetAudioBusName() string {
	return self.Runtime.Area3D_get_audio_bus_name(self)
}
func (self Area3D) SetUseReverbBus(enable bool) {
	self.Runtime.Area3D_set_use_reverb_bus(self, enable)
}
func (self Area3D) IsUsingReverbBus() bool {
	return self.Runtime.Area3D_is_using_reverb_bus(self)
}
func (self Area3D) SetReverbBusName(name string) {
	self.Runtime.Area3D_set_reverb_bus_name(self, name)
}
func (self Area3D) GetReverbBusName() string {
	return self.Runtime.Area3D_get_reverb_bus_name(self)
}
func (self Area3D) SetReverbAmount(amount Float) {
	self.Runtime.Area3D_set_reverb_amount(self, amount)
}
func (self Area3D) GetReverbAmount() Float {
	return self.Runtime.Area3D_get_reverb_amount(self)
}
func (self Area3D) SetReverbUniformity(amount Float) {
	self.Runtime.Area3D_set_reverb_uniformity(self, amount)
}
func (self Area3D) GetReverbUniformity() Float {
	return self.Runtime.Area3D_get_reverb_uniformity(self)
}

type extendsArrayMesh struct {
	_ [0]*extendsArrayMesh
	class
}

func (self ArrayMesh) Mesh() Mesh { var parent Mesh; parent.class = self.class; return parent }
func (self ArrayMesh) AddBlendShape(name string) {
	self.Runtime.ArrayMesh_add_blend_shape(self, name)
}
func (self ArrayMesh) GetBlendShapeCount() int64 {
	return self.Runtime.ArrayMesh_get_blend_shape_count(self)
}
func (self ArrayMesh) GetBlendShapeName(index int64) string {
	return self.Runtime.ArrayMesh_get_blend_shape_name(self, index)
}
func (self ArrayMesh) SetBlendShapeName(index int64, name string) {
	self.Runtime.ArrayMesh_set_blend_shape_name(self, index, name)
}
func (self ArrayMesh) ClearBlendShapes() {
	self.Runtime.ArrayMesh_clear_blend_shapes(self)
}
func (self ArrayMesh) SetBlendShapeMode(mode MeshBlendShapeMode) {
	self.Runtime.ArrayMesh_set_blend_shape_mode(self, mode)
}
func (self ArrayMesh) GetBlendShapeMode() MeshBlendShapeMode {
	return self.Runtime.ArrayMesh_get_blend_shape_mode(self)
}
func (self ArrayMesh) AddSurfaceFromArrays(primitive MeshPrimitiveType, arrays Array, blend_shapes ArrayOf[Array], lods Dictionary, flags MeshArrayFormat) {
	self.Runtime.ArrayMesh_add_surface_from_arrays(self, primitive, arrays, blend_shapes, lods, flags)
}
func (self ArrayMesh) ClearSurfaces() {
	self.Runtime.ArrayMesh_clear_surfaces(self)
}
func (self ArrayMesh) SurfaceUpdateVertexRegion(surf_idx int64, offset int64, data PackedByteArray) {
	self.Runtime.ArrayMesh_surface_update_vertex_region(self, surf_idx, offset, data)
}
func (self ArrayMesh) SurfaceUpdateAttributeRegion(surf_idx int64, offset int64, data PackedByteArray) {
	self.Runtime.ArrayMesh_surface_update_attribute_region(self, surf_idx, offset, data)
}
func (self ArrayMesh) SurfaceUpdateSkinRegion(surf_idx int64, offset int64, data PackedByteArray) {
	self.Runtime.ArrayMesh_surface_update_skin_region(self, surf_idx, offset, data)
}
func (self ArrayMesh) SurfaceGetArrayLen(surf_idx int64) int64 {
	return self.Runtime.ArrayMesh_surface_get_array_len(self, surf_idx)
}
func (self ArrayMesh) SurfaceGetArrayIndexLen(surf_idx int64) int64 {
	return self.Runtime.ArrayMesh_surface_get_array_index_len(self, surf_idx)
}
func (self ArrayMesh) SurfaceGetFormat(surf_idx int64) MeshArrayFormat {
	return self.Runtime.ArrayMesh_surface_get_format(self, surf_idx)
}
func (self ArrayMesh) SurfaceGetPrimitiveType(surf_idx int64) MeshPrimitiveType {
	return self.Runtime.ArrayMesh_surface_get_primitive_type(self, surf_idx)
}
func (self ArrayMesh) SurfaceFindByName(name string) int64 {
	return self.Runtime.ArrayMesh_surface_find_by_name(self, name)
}
func (self ArrayMesh) SurfaceSetName(surf_idx int64, name string) {
	self.Runtime.ArrayMesh_surface_set_name(self, surf_idx, name)
}
func (self ArrayMesh) SurfaceGetName(surf_idx int64) string {
	return self.Runtime.ArrayMesh_surface_get_name(self, surf_idx)
}
func (self ArrayMesh) RegenNormalMaps() {
	self.Runtime.ArrayMesh_regen_normal_maps(self)
}
func (self ArrayMesh) LightmapUnwrap(transform Transform3D, texel_size Float) int64 {
	return self.Runtime.ArrayMesh_lightmap_unwrap(self, transform, texel_size)
}
func (self ArrayMesh) SetCustomAabb(aabb AABB) {
	self.Runtime.ArrayMesh_set_custom_aabb(self, aabb)
}
func (self ArrayMesh) GetCustomAabb() AABB {
	return self.Runtime.ArrayMesh_get_custom_aabb(self)
}
func (self ArrayMesh) SetShadowMesh(mesh ArrayMesh) {
	self.Runtime.ArrayMesh_set_shadow_mesh(self, mesh)
}
func (self ArrayMesh) GetShadowMesh() ArrayMesh {
	return self.Runtime.ArrayMesh_get_shadow_mesh(self)
}

type extendsArrayOccluder3D struct {
	_ [0]*extendsArrayOccluder3D
	class
}

func (self ArrayOccluder3D) Occluder3D() Occluder3D {
	var parent Occluder3D
	parent.class = self.class
	return parent
}
func (self ArrayOccluder3D) SetArrays(vertices PackedVector3Array, indices PackedInt32Array) {
	self.Runtime.ArrayOccluder3D_set_arrays(self, vertices, indices)
}
func (self ArrayOccluder3D) SetVertices(vertices PackedVector3Array) {
	self.Runtime.ArrayOccluder3D_set_vertices(self, vertices)
}
func (self ArrayOccluder3D) SetIndices(indices PackedInt32Array) {
	self.Runtime.ArrayOccluder3D_set_indices(self, indices)
}

type extendsAspectRatioContainer struct {
	_ [0]*extendsAspectRatioContainer
	class
}

func (self AspectRatioContainer) Container() Container {
	var parent Container
	parent.class = self.class
	return parent
}
func (self AspectRatioContainer) SetRatio(ratio Float) {
	self.Runtime.AspectRatioContainer_set_ratio(self, ratio)
}
func (self AspectRatioContainer) GetRatio() Float {
	return self.Runtime.AspectRatioContainer_get_ratio(self)
}
func (self AspectRatioContainer) SetStretchMode(stretch_mode AspectRatioContainerStretchMode) {
	self.Runtime.AspectRatioContainer_set_stretch_mode(self, stretch_mode)
}
func (self AspectRatioContainer) GetStretchMode() AspectRatioContainerStretchMode {
	return self.Runtime.AspectRatioContainer_get_stretch_mode(self)
}
func (self AspectRatioContainer) SetAlignmentHorizontal(alignment_horizontal AspectRatioContainerAlignmentMode) {
	self.Runtime.AspectRatioContainer_set_alignment_horizontal(self, alignment_horizontal)
}
func (self AspectRatioContainer) GetAlignmentHorizontal() AspectRatioContainerAlignmentMode {
	return self.Runtime.AspectRatioContainer_get_alignment_horizontal(self)
}
func (self AspectRatioContainer) SetAlignmentVertical(alignment_vertical AspectRatioContainerAlignmentMode) {
	self.Runtime.AspectRatioContainer_set_alignment_vertical(self, alignment_vertical)
}
func (self AspectRatioContainer) GetAlignmentVertical() AspectRatioContainerAlignmentMode {
	return self.Runtime.AspectRatioContainer_get_alignment_vertical(self)
}

type extendsAtlasTexture struct {
	_ [0]*extendsAtlasTexture
	class
}

func (self AtlasTexture) Texture2D() Texture2D {
	var parent Texture2D
	parent.class = self.class
	return parent
}
func (self AtlasTexture) SetAtlas(atlas Texture2D) {
	self.Runtime.AtlasTexture_set_atlas(self, atlas)
}
func (self AtlasTexture) GetAtlas() Texture2D {
	return self.Runtime.AtlasTexture_get_atlas(self)
}
func (self AtlasTexture) SetRegion(region Rect2) {
	self.Runtime.AtlasTexture_set_region(self, region)
}
func (self AtlasTexture) GetRegion() Rect2 {
	return self.Runtime.AtlasTexture_get_region(self)
}
func (self AtlasTexture) SetMargin(margin Rect2) {
	self.Runtime.AtlasTexture_set_margin(self, margin)
}
func (self AtlasTexture) GetMargin() Rect2 {
	return self.Runtime.AtlasTexture_get_margin(self)
}
func (self AtlasTexture) SetFilterClip(enable bool) {
	self.Runtime.AtlasTexture_set_filter_clip(self, enable)
}
func (self AtlasTexture) HasFilterClip() bool {
	return self.Runtime.AtlasTexture_has_filter_clip(self)
}

type extendsAudioBusLayout struct {
	_ [0]*extendsAudioBusLayout
	class
}

func (self AudioBusLayout) Resource() Resource {
	var parent Resource
	parent.class = self.class
	return parent
}

type extendsAudioEffect struct {
	_ [0]*extendsAudioEffect
	class
}

func (self AudioEffect) Resource() Resource {
	var parent Resource
	parent.class = self.class
	return parent
}

type extendsAudioEffectAmplify struct {
	_ [0]*extendsAudioEffectAmplify
	class
}

func (self AudioEffectAmplify) AudioEffect() AudioEffect {
	var parent AudioEffect
	parent.class = self.class
	return parent
}
func (self AudioEffectAmplify) SetVolumeDb(volume Float) {
	self.Runtime.AudioEffectAmplify_set_volume_db(self, volume)
}
func (self AudioEffectAmplify) GetVolumeDb() Float {
	return self.Runtime.AudioEffectAmplify_get_volume_db(self)
}

type extendsAudioEffectBandLimitFilter struct {
	_ [0]*extendsAudioEffectBandLimitFilter
	class
}

func (self AudioEffectBandLimitFilter) AudioEffectFilter() AudioEffectFilter {
	var parent AudioEffectFilter
	parent.class = self.class
	return parent
}

type extendsAudioEffectBandPassFilter struct {
	_ [0]*extendsAudioEffectBandPassFilter
	class
}

func (self AudioEffectBandPassFilter) AudioEffectFilter() AudioEffectFilter {
	var parent AudioEffectFilter
	parent.class = self.class
	return parent
}

type extendsAudioEffectCapture struct {
	_ [0]*extendsAudioEffectCapture
	class
}

func (self AudioEffectCapture) AudioEffect() AudioEffect {
	var parent AudioEffect
	parent.class = self.class
	return parent
}
func (self AudioEffectCapture) CanGetBuffer(frames int64) bool {
	return self.Runtime.AudioEffectCapture_can_get_buffer(self, frames)
}
func (self AudioEffectCapture) GetBuffer(frames int64) PackedVector2Array {
	return self.Runtime.AudioEffectCapture_get_buffer(self, frames)
}
func (self AudioEffectCapture) ClearBuffer() {
	self.Runtime.AudioEffectCapture_clear_buffer(self)
}
func (self AudioEffectCapture) SetBufferLength(buffer_length_seconds Float) {
	self.Runtime.AudioEffectCapture_set_buffer_length(self, buffer_length_seconds)
}
func (self AudioEffectCapture) GetBufferLength() Float {
	return self.Runtime.AudioEffectCapture_get_buffer_length(self)
}
func (self AudioEffectCapture) GetFramesAvailable() int64 {
	return self.Runtime.AudioEffectCapture_get_frames_available(self)
}
func (self AudioEffectCapture) GetDiscardedFrames() int64 {
	return self.Runtime.AudioEffectCapture_get_discarded_frames(self)
}
func (self AudioEffectCapture) GetBufferLengthFrames() int64 {
	return self.Runtime.AudioEffectCapture_get_buffer_length_frames(self)
}
func (self AudioEffectCapture) GetPushedFrames() int64 {
	return self.Runtime.AudioEffectCapture_get_pushed_frames(self)
}

type extendsAudioEffectChorus struct {
	_ [0]*extendsAudioEffectChorus
	class
}

func (self AudioEffectChorus) AudioEffect() AudioEffect {
	var parent AudioEffect
	parent.class = self.class
	return parent
}
func (self AudioEffectChorus) SetVoiceCount(voices int64) {
	self.Runtime.AudioEffectChorus_set_voice_count(self, voices)
}
func (self AudioEffectChorus) GetVoiceCount() int64 {
	return self.Runtime.AudioEffectChorus_get_voice_count(self)
}
func (self AudioEffectChorus) SetVoiceDelayMs(voice_idx int64, delay_ms Float) {
	self.Runtime.AudioEffectChorus_set_voice_delay_ms(self, voice_idx, delay_ms)
}
func (self AudioEffectChorus) GetVoiceDelayMs(voice_idx int64) Float {
	return self.Runtime.AudioEffectChorus_get_voice_delay_ms(self, voice_idx)
}
func (self AudioEffectChorus) SetVoiceRateHz(voice_idx int64, rate_hz Float) {
	self.Runtime.AudioEffectChorus_set_voice_rate_hz(self, voice_idx, rate_hz)
}
func (self AudioEffectChorus) GetVoiceRateHz(voice_idx int64) Float {
	return self.Runtime.AudioEffectChorus_get_voice_rate_hz(self, voice_idx)
}
func (self AudioEffectChorus) SetVoiceDepthMs(voice_idx int64, depth_ms Float) {
	self.Runtime.AudioEffectChorus_set_voice_depth_ms(self, voice_idx, depth_ms)
}
func (self AudioEffectChorus) GetVoiceDepthMs(voice_idx int64) Float {
	return self.Runtime.AudioEffectChorus_get_voice_depth_ms(self, voice_idx)
}
func (self AudioEffectChorus) SetVoiceLevelDb(voice_idx int64, level_db Float) {
	self.Runtime.AudioEffectChorus_set_voice_level_db(self, voice_idx, level_db)
}
func (self AudioEffectChorus) GetVoiceLevelDb(voice_idx int64) Float {
	return self.Runtime.AudioEffectChorus_get_voice_level_db(self, voice_idx)
}
func (self AudioEffectChorus) SetVoiceCutoffHz(voice_idx int64, cutoff_hz Float) {
	self.Runtime.AudioEffectChorus_set_voice_cutoff_hz(self, voice_idx, cutoff_hz)
}
func (self AudioEffectChorus) GetVoiceCutoffHz(voice_idx int64) Float {
	return self.Runtime.AudioEffectChorus_get_voice_cutoff_hz(self, voice_idx)
}
func (self AudioEffectChorus) SetVoicePan(voice_idx int64, pan Float) {
	self.Runtime.AudioEffectChorus_set_voice_pan(self, voice_idx, pan)
}
func (self AudioEffectChorus) GetVoicePan(voice_idx int64) Float {
	return self.Runtime.AudioEffectChorus_get_voice_pan(self, voice_idx)
}
func (self AudioEffectChorus) SetWet(amount Float) {
	self.Runtime.AudioEffectChorus_set_wet(self, amount)
}
func (self AudioEffectChorus) GetWet() Float {
	return self.Runtime.AudioEffectChorus_get_wet(self)
}
func (self AudioEffectChorus) SetDry(amount Float) {
	self.Runtime.AudioEffectChorus_set_dry(self, amount)
}
func (self AudioEffectChorus) GetDry() Float {
	return self.Runtime.AudioEffectChorus_get_dry(self)
}

type extendsAudioEffectCompressor struct {
	_ [0]*extendsAudioEffectCompressor
	class
}

func (self AudioEffectCompressor) AudioEffect() AudioEffect {
	var parent AudioEffect
	parent.class = self.class
	return parent
}
func (self AudioEffectCompressor) SetThreshold(threshold Float) {
	self.Runtime.AudioEffectCompressor_set_threshold(self, threshold)
}
func (self AudioEffectCompressor) GetThreshold() Float {
	return self.Runtime.AudioEffectCompressor_get_threshold(self)
}
func (self AudioEffectCompressor) SetRatio(ratio Float) {
	self.Runtime.AudioEffectCompressor_set_ratio(self, ratio)
}
func (self AudioEffectCompressor) GetRatio() Float {
	return self.Runtime.AudioEffectCompressor_get_ratio(self)
}
func (self AudioEffectCompressor) SetGain(gain Float) {
	self.Runtime.AudioEffectCompressor_set_gain(self, gain)
}
func (self AudioEffectCompressor) GetGain() Float {
	return self.Runtime.AudioEffectCompressor_get_gain(self)
}
func (self AudioEffectCompressor) SetAttackUs(attack_us Float) {
	self.Runtime.AudioEffectCompressor_set_attack_us(self, attack_us)
}
func (self AudioEffectCompressor) GetAttackUs() Float {
	return self.Runtime.AudioEffectCompressor_get_attack_us(self)
}
func (self AudioEffectCompressor) SetReleaseMs(release_ms Float) {
	self.Runtime.AudioEffectCompressor_set_release_ms(self, release_ms)
}
func (self AudioEffectCompressor) GetReleaseMs() Float {
	return self.Runtime.AudioEffectCompressor_get_release_ms(self)
}
func (self AudioEffectCompressor) SetMix(mix Float) {
	self.Runtime.AudioEffectCompressor_set_mix(self, mix)
}
func (self AudioEffectCompressor) GetMix() Float {
	return self.Runtime.AudioEffectCompressor_get_mix(self)
}
func (self AudioEffectCompressor) SetSidechain(sidechain string) {
	self.Runtime.AudioEffectCompressor_set_sidechain(self, sidechain)
}
func (self AudioEffectCompressor) GetSidechain() string {
	return self.Runtime.AudioEffectCompressor_get_sidechain(self)
}

type extendsAudioEffectDelay struct {
	_ [0]*extendsAudioEffectDelay
	class
}

func (self AudioEffectDelay) AudioEffect() AudioEffect {
	var parent AudioEffect
	parent.class = self.class
	return parent
}
func (self AudioEffectDelay) SetDry(amount Float) {
	self.Runtime.AudioEffectDelay_set_dry(self, amount)
}
func (self AudioEffectDelay) GetDry() Float {
	return self.Runtime.AudioEffectDelay_get_dry(self)
}
func (self AudioEffectDelay) SetTap1Active(amount bool) {
	self.Runtime.AudioEffectDelay_set_tap1_active(self, amount)
}
func (self AudioEffectDelay) IsTap1Active() bool {
	return self.Runtime.AudioEffectDelay_is_tap1_active(self)
}
func (self AudioEffectDelay) SetTap1DelayMs(amount Float) {
	self.Runtime.AudioEffectDelay_set_tap1_delay_ms(self, amount)
}
func (self AudioEffectDelay) GetTap1DelayMs() Float {
	return self.Runtime.AudioEffectDelay_get_tap1_delay_ms(self)
}
func (self AudioEffectDelay) SetTap1LevelDb(amount Float) {
	self.Runtime.AudioEffectDelay_set_tap1_level_db(self, amount)
}
func (self AudioEffectDelay) GetTap1LevelDb() Float {
	return self.Runtime.AudioEffectDelay_get_tap1_level_db(self)
}
func (self AudioEffectDelay) SetTap1Pan(amount Float) {
	self.Runtime.AudioEffectDelay_set_tap1_pan(self, amount)
}
func (self AudioEffectDelay) GetTap1Pan() Float {
	return self.Runtime.AudioEffectDelay_get_tap1_pan(self)
}
func (self AudioEffectDelay) SetTap2Active(amount bool) {
	self.Runtime.AudioEffectDelay_set_tap2_active(self, amount)
}
func (self AudioEffectDelay) IsTap2Active() bool {
	return self.Runtime.AudioEffectDelay_is_tap2_active(self)
}
func (self AudioEffectDelay) SetTap2DelayMs(amount Float) {
	self.Runtime.AudioEffectDelay_set_tap2_delay_ms(self, amount)
}
func (self AudioEffectDelay) GetTap2DelayMs() Float {
	return self.Runtime.AudioEffectDelay_get_tap2_delay_ms(self)
}
func (self AudioEffectDelay) SetTap2LevelDb(amount Float) {
	self.Runtime.AudioEffectDelay_set_tap2_level_db(self, amount)
}
func (self AudioEffectDelay) GetTap2LevelDb() Float {
	return self.Runtime.AudioEffectDelay_get_tap2_level_db(self)
}
func (self AudioEffectDelay) SetTap2Pan(amount Float) {
	self.Runtime.AudioEffectDelay_set_tap2_pan(self, amount)
}
func (self AudioEffectDelay) GetTap2Pan() Float {
	return self.Runtime.AudioEffectDelay_get_tap2_pan(self)
}
func (self AudioEffectDelay) SetFeedbackActive(amount bool) {
	self.Runtime.AudioEffectDelay_set_feedback_active(self, amount)
}
func (self AudioEffectDelay) IsFeedbackActive() bool {
	return self.Runtime.AudioEffectDelay_is_feedback_active(self)
}
func (self AudioEffectDelay) SetFeedbackDelayMs(amount Float) {
	self.Runtime.AudioEffectDelay_set_feedback_delay_ms(self, amount)
}
func (self AudioEffectDelay) GetFeedbackDelayMs() Float {
	return self.Runtime.AudioEffectDelay_get_feedback_delay_ms(self)
}
func (self AudioEffectDelay) SetFeedbackLevelDb(amount Float) {
	self.Runtime.AudioEffectDelay_set_feedback_level_db(self, amount)
}
func (self AudioEffectDelay) GetFeedbackLevelDb() Float {
	return self.Runtime.AudioEffectDelay_get_feedback_level_db(self)
}
func (self AudioEffectDelay) SetFeedbackLowpass(amount Float) {
	self.Runtime.AudioEffectDelay_set_feedback_lowpass(self, amount)
}
func (self AudioEffectDelay) GetFeedbackLowpass() Float {
	return self.Runtime.AudioEffectDelay_get_feedback_lowpass(self)
}

type extendsAudioEffectDistortion struct {
	_ [0]*extendsAudioEffectDistortion
	class
}

func (self AudioEffectDistortion) AudioEffect() AudioEffect {
	var parent AudioEffect
	parent.class = self.class
	return parent
}
func (self AudioEffectDistortion) SetMode(mode AudioEffectDistortionMode) {
	self.Runtime.AudioEffectDistortion_set_mode(self, mode)
}
func (self AudioEffectDistortion) GetMode() AudioEffectDistortionMode {
	return self.Runtime.AudioEffectDistortion_get_mode(self)
}
func (self AudioEffectDistortion) SetPreGain(pre_gain Float) {
	self.Runtime.AudioEffectDistortion_set_pre_gain(self, pre_gain)
}
func (self AudioEffectDistortion) GetPreGain() Float {
	return self.Runtime.AudioEffectDistortion_get_pre_gain(self)
}
func (self AudioEffectDistortion) SetKeepHfHz(keep_hf_hz Float) {
	self.Runtime.AudioEffectDistortion_set_keep_hf_hz(self, keep_hf_hz)
}
func (self AudioEffectDistortion) GetKeepHfHz() Float {
	return self.Runtime.AudioEffectDistortion_get_keep_hf_hz(self)
}
func (self AudioEffectDistortion) SetDrive(drive Float) {
	self.Runtime.AudioEffectDistortion_set_drive(self, drive)
}
func (self AudioEffectDistortion) GetDrive() Float {
	return self.Runtime.AudioEffectDistortion_get_drive(self)
}
func (self AudioEffectDistortion) SetPostGain(post_gain Float) {
	self.Runtime.AudioEffectDistortion_set_post_gain(self, post_gain)
}
func (self AudioEffectDistortion) GetPostGain() Float {
	return self.Runtime.AudioEffectDistortion_get_post_gain(self)
}

type extendsAudioEffectEQ struct {
	_ [0]*extendsAudioEffectEQ
	class
}

func (self AudioEffectEQ) AudioEffect() AudioEffect {
	var parent AudioEffect
	parent.class = self.class
	return parent
}
func (self AudioEffectEQ) SetBandGainDb(band_idx int64, volume_db Float) {
	self.Runtime.AudioEffectEQ_set_band_gain_db(self, band_idx, volume_db)
}
func (self AudioEffectEQ) GetBandGainDb(band_idx int64) Float {
	return self.Runtime.AudioEffectEQ_get_band_gain_db(self, band_idx)
}
func (self AudioEffectEQ) GetBandCount() int64 {
	return self.Runtime.AudioEffectEQ_get_band_count(self)
}

type extendsAudioEffectEQ10 struct {
	_ [0]*extendsAudioEffectEQ10
	class
}

func (self AudioEffectEQ10) AudioEffectEQ() AudioEffectEQ {
	var parent AudioEffectEQ
	parent.class = self.class
	return parent
}

type extendsAudioEffectEQ21 struct {
	_ [0]*extendsAudioEffectEQ21
	class
}

func (self AudioEffectEQ21) AudioEffectEQ() AudioEffectEQ {
	var parent AudioEffectEQ
	parent.class = self.class
	return parent
}

type extendsAudioEffectEQ6 struct {
	_ [0]*extendsAudioEffectEQ6
	class
}

func (self AudioEffectEQ6) AudioEffectEQ() AudioEffectEQ {
	var parent AudioEffectEQ
	parent.class = self.class
	return parent
}

type extendsAudioEffectFilter struct {
	_ [0]*extendsAudioEffectFilter
	class
}

func (self AudioEffectFilter) AudioEffect() AudioEffect {
	var parent AudioEffect
	parent.class = self.class
	return parent
}
func (self AudioEffectFilter) SetCutoff(freq Float) {
	self.Runtime.AudioEffectFilter_set_cutoff(self, freq)
}
func (self AudioEffectFilter) GetCutoff() Float {
	return self.Runtime.AudioEffectFilter_get_cutoff(self)
}
func (self AudioEffectFilter) SetResonance(amount Float) {
	self.Runtime.AudioEffectFilter_set_resonance(self, amount)
}
func (self AudioEffectFilter) GetResonance() Float {
	return self.Runtime.AudioEffectFilter_get_resonance(self)
}
func (self AudioEffectFilter) SetGain(amount Float) {
	self.Runtime.AudioEffectFilter_set_gain(self, amount)
}
func (self AudioEffectFilter) GetGain() Float {
	return self.Runtime.AudioEffectFilter_get_gain(self)
}
func (self AudioEffectFilter) SetDb(amount AudioEffectFilterFilterDB) {
	self.Runtime.AudioEffectFilter_set_db(self, amount)
}
func (self AudioEffectFilter) GetDb() AudioEffectFilterFilterDB {
	return self.Runtime.AudioEffectFilter_get_db(self)
}

type extendsAudioEffectHighPassFilter struct {
	_ [0]*extendsAudioEffectHighPassFilter
	class
}

func (self AudioEffectHighPassFilter) AudioEffectFilter() AudioEffectFilter {
	var parent AudioEffectFilter
	parent.class = self.class
	return parent
}

type extendsAudioEffectHighShelfFilter struct {
	_ [0]*extendsAudioEffectHighShelfFilter
	class
}

func (self AudioEffectHighShelfFilter) AudioEffectFilter() AudioEffectFilter {
	var parent AudioEffectFilter
	parent.class = self.class
	return parent
}

type extendsAudioEffectInstance struct {
	_ [0]*extendsAudioEffectInstance
	class
}

func (self AudioEffectInstance) RefCounted() RefCounted {
	var parent RefCounted
	parent.class = self.class
	return parent
}

type extendsAudioEffectLimiter struct {
	_ [0]*extendsAudioEffectLimiter
	class
}

func (self AudioEffectLimiter) AudioEffect() AudioEffect {
	var parent AudioEffect
	parent.class = self.class
	return parent
}
func (self AudioEffectLimiter) SetCeilingDb(ceiling Float) {
	self.Runtime.AudioEffectLimiter_set_ceiling_db(self, ceiling)
}
func (self AudioEffectLimiter) GetCeilingDb() Float {
	return self.Runtime.AudioEffectLimiter_get_ceiling_db(self)
}
func (self AudioEffectLimiter) SetThresholdDb(threshold Float) {
	self.Runtime.AudioEffectLimiter_set_threshold_db(self, threshold)
}
func (self AudioEffectLimiter) GetThresholdDb() Float {
	return self.Runtime.AudioEffectLimiter_get_threshold_db(self)
}
func (self AudioEffectLimiter) SetSoftClipDb(soft_clip Float) {
	self.Runtime.AudioEffectLimiter_set_soft_clip_db(self, soft_clip)
}
func (self AudioEffectLimiter) GetSoftClipDb() Float {
	return self.Runtime.AudioEffectLimiter_get_soft_clip_db(self)
}
func (self AudioEffectLimiter) SetSoftClipRatio(soft_clip Float) {
	self.Runtime.AudioEffectLimiter_set_soft_clip_ratio(self, soft_clip)
}
func (self AudioEffectLimiter) GetSoftClipRatio() Float {
	return self.Runtime.AudioEffectLimiter_get_soft_clip_ratio(self)
}

type extendsAudioEffectLowPassFilter struct {
	_ [0]*extendsAudioEffectLowPassFilter
	class
}

func (self AudioEffectLowPassFilter) AudioEffectFilter() AudioEffectFilter {
	var parent AudioEffectFilter
	parent.class = self.class
	return parent
}

type extendsAudioEffectLowShelfFilter struct {
	_ [0]*extendsAudioEffectLowShelfFilter
	class
}

func (self AudioEffectLowShelfFilter) AudioEffectFilter() AudioEffectFilter {
	var parent AudioEffectFilter
	parent.class = self.class
	return parent
}

type extendsAudioEffectNotchFilter struct {
	_ [0]*extendsAudioEffectNotchFilter
	class
}

func (self AudioEffectNotchFilter) AudioEffectFilter() AudioEffectFilter {
	var parent AudioEffectFilter
	parent.class = self.class
	return parent
}

type extendsAudioEffectPanner struct {
	_ [0]*extendsAudioEffectPanner
	class
}

func (self AudioEffectPanner) AudioEffect() AudioEffect {
	var parent AudioEffect
	parent.class = self.class
	return parent
}
func (self AudioEffectPanner) SetPan(cpanume Float) {
	self.Runtime.AudioEffectPanner_set_pan(self, cpanume)
}
func (self AudioEffectPanner) GetPan() Float {
	return self.Runtime.AudioEffectPanner_get_pan(self)
}

type extendsAudioEffectPhaser struct {
	_ [0]*extendsAudioEffectPhaser
	class
}

func (self AudioEffectPhaser) AudioEffect() AudioEffect {
	var parent AudioEffect
	parent.class = self.class
	return parent
}
func (self AudioEffectPhaser) SetRangeMinHz(hz Float) {
	self.Runtime.AudioEffectPhaser_set_range_min_hz(self, hz)
}
func (self AudioEffectPhaser) GetRangeMinHz() Float {
	return self.Runtime.AudioEffectPhaser_get_range_min_hz(self)
}
func (self AudioEffectPhaser) SetRangeMaxHz(hz Float) {
	self.Runtime.AudioEffectPhaser_set_range_max_hz(self, hz)
}
func (self AudioEffectPhaser) GetRangeMaxHz() Float {
	return self.Runtime.AudioEffectPhaser_get_range_max_hz(self)
}
func (self AudioEffectPhaser) SetRateHz(hz Float) {
	self.Runtime.AudioEffectPhaser_set_rate_hz(self, hz)
}
func (self AudioEffectPhaser) GetRateHz() Float {
	return self.Runtime.AudioEffectPhaser_get_rate_hz(self)
}
func (self AudioEffectPhaser) SetFeedback(fbk Float) {
	self.Runtime.AudioEffectPhaser_set_feedback(self, fbk)
}
func (self AudioEffectPhaser) GetFeedback() Float {
	return self.Runtime.AudioEffectPhaser_get_feedback(self)
}
func (self AudioEffectPhaser) SetDepth(depth Float) {
	self.Runtime.AudioEffectPhaser_set_depth(self, depth)
}
func (self AudioEffectPhaser) GetDepth() Float {
	return self.Runtime.AudioEffectPhaser_get_depth(self)
}

type extendsAudioEffectPitchShift struct {
	_ [0]*extendsAudioEffectPitchShift
	class
}

func (self AudioEffectPitchShift) AudioEffect() AudioEffect {
	var parent AudioEffect
	parent.class = self.class
	return parent
}
func (self AudioEffectPitchShift) SetPitchScale(rate Float) {
	self.Runtime.AudioEffectPitchShift_set_pitch_scale(self, rate)
}
func (self AudioEffectPitchShift) GetPitchScale() Float {
	return self.Runtime.AudioEffectPitchShift_get_pitch_scale(self)
}
func (self AudioEffectPitchShift) SetOversampling(amount int64) {
	self.Runtime.AudioEffectPitchShift_set_oversampling(self, amount)
}
func (self AudioEffectPitchShift) GetOversampling() int64 {
	return self.Runtime.AudioEffectPitchShift_get_oversampling(self)
}
func (self AudioEffectPitchShift) SetFftSize(size AudioEffectPitchShiftFFTSize) {
	self.Runtime.AudioEffectPitchShift_set_fft_size(self, size)
}
func (self AudioEffectPitchShift) GetFftSize() AudioEffectPitchShiftFFTSize {
	return self.Runtime.AudioEffectPitchShift_get_fft_size(self)
}

type extendsAudioEffectRecord struct {
	_ [0]*extendsAudioEffectRecord
	class
}

func (self AudioEffectRecord) AudioEffect() AudioEffect {
	var parent AudioEffect
	parent.class = self.class
	return parent
}
func (self AudioEffectRecord) SetRecordingActive(record bool) {
	self.Runtime.AudioEffectRecord_set_recording_active(self, record)
}
func (self AudioEffectRecord) IsRecordingActive() bool {
	return self.Runtime.AudioEffectRecord_is_recording_active(self)
}
func (self AudioEffectRecord) SetFormat(format AudioStreamWAVFormat) {
	self.Runtime.AudioEffectRecord_set_format(self, format)
}
func (self AudioEffectRecord) GetFormat() AudioStreamWAVFormat {
	return self.Runtime.AudioEffectRecord_get_format(self)
}
func (self AudioEffectRecord) GetRecording() AudioStreamWAV {
	return self.Runtime.AudioEffectRecord_get_recording(self)
}

type extendsAudioEffectReverb struct {
	_ [0]*extendsAudioEffectReverb
	class
}

func (self AudioEffectReverb) AudioEffect() AudioEffect {
	var parent AudioEffect
	parent.class = self.class
	return parent
}
func (self AudioEffectReverb) SetPredelayMsec(msec Float) {
	self.Runtime.AudioEffectReverb_set_predelay_msec(self, msec)
}
func (self AudioEffectReverb) GetPredelayMsec() Float {
	return self.Runtime.AudioEffectReverb_get_predelay_msec(self)
}
func (self AudioEffectReverb) SetPredelayFeedback(feedback Float) {
	self.Runtime.AudioEffectReverb_set_predelay_feedback(self, feedback)
}
func (self AudioEffectReverb) GetPredelayFeedback() Float {
	return self.Runtime.AudioEffectReverb_get_predelay_feedback(self)
}
func (self AudioEffectReverb) SetRoomSize(size Float) {
	self.Runtime.AudioEffectReverb_set_room_size(self, size)
}
func (self AudioEffectReverb) GetRoomSize() Float {
	return self.Runtime.AudioEffectReverb_get_room_size(self)
}
func (self AudioEffectReverb) SetDamping(amount Float) {
	self.Runtime.AudioEffectReverb_set_damping(self, amount)
}
func (self AudioEffectReverb) GetDamping() Float {
	return self.Runtime.AudioEffectReverb_get_damping(self)
}
func (self AudioEffectReverb) SetSpread(amount Float) {
	self.Runtime.AudioEffectReverb_set_spread(self, amount)
}
func (self AudioEffectReverb) GetSpread() Float {
	return self.Runtime.AudioEffectReverb_get_spread(self)
}
func (self AudioEffectReverb) SetDry(amount Float) {
	self.Runtime.AudioEffectReverb_set_dry(self, amount)
}
func (self AudioEffectReverb) GetDry() Float {
	return self.Runtime.AudioEffectReverb_get_dry(self)
}
func (self AudioEffectReverb) SetWet(amount Float) {
	self.Runtime.AudioEffectReverb_set_wet(self, amount)
}
func (self AudioEffectReverb) GetWet() Float {
	return self.Runtime.AudioEffectReverb_get_wet(self)
}
func (self AudioEffectReverb) SetHpf(amount Float) {
	self.Runtime.AudioEffectReverb_set_hpf(self, amount)
}
func (self AudioEffectReverb) GetHpf() Float {
	return self.Runtime.AudioEffectReverb_get_hpf(self)
}

type extendsAudioEffectSpectrumAnalyzer struct {
	_ [0]*extendsAudioEffectSpectrumAnalyzer
	class
}

func (self AudioEffectSpectrumAnalyzer) AudioEffect() AudioEffect {
	var parent AudioEffect
	parent.class = self.class
	return parent
}
func (self AudioEffectSpectrumAnalyzer) SetBufferLength(seconds Float) {
	self.Runtime.AudioEffectSpectrumAnalyzer_set_buffer_length(self, seconds)
}
func (self AudioEffectSpectrumAnalyzer) GetBufferLength() Float {
	return self.Runtime.AudioEffectSpectrumAnalyzer_get_buffer_length(self)
}
func (self AudioEffectSpectrumAnalyzer) SetTapBackPos(seconds Float) {
	self.Runtime.AudioEffectSpectrumAnalyzer_set_tap_back_pos(self, seconds)
}
func (self AudioEffectSpectrumAnalyzer) GetTapBackPos() Float {
	return self.Runtime.AudioEffectSpectrumAnalyzer_get_tap_back_pos(self)
}
func (self AudioEffectSpectrumAnalyzer) SetFftSize(size AudioEffectSpectrumAnalyzerFFTSize) {
	self.Runtime.AudioEffectSpectrumAnalyzer_set_fft_size(self, size)
}
func (self AudioEffectSpectrumAnalyzer) GetFftSize() AudioEffectSpectrumAnalyzerFFTSize {
	return self.Runtime.AudioEffectSpectrumAnalyzer_get_fft_size(self)
}

type extendsAudioEffectSpectrumAnalyzerInstance struct {
	_ [0]*extendsAudioEffectSpectrumAnalyzerInstance
	class
}

func (self AudioEffectSpectrumAnalyzerInstance) AudioEffectInstance() AudioEffectInstance {
	var parent AudioEffectInstance
	parent.class = self.class
	return parent
}
func (self AudioEffectSpectrumAnalyzerInstance) GetMagnitudeForFrequencyRange(from_hz Float, to_hz Float, mode AudioEffectSpectrumAnalyzerInstanceMagnitudeMode) Vector2 {
	return self.Runtime.AudioEffectSpectrumAnalyzerInstance_get_magnitude_for_frequency_range(self, from_hz, to_hz, mode)
}

type extendsAudioEffectStereoEnhance struct {
	_ [0]*extendsAudioEffectStereoEnhance
	class
}

func (self AudioEffectStereoEnhance) AudioEffect() AudioEffect {
	var parent AudioEffect
	parent.class = self.class
	return parent
}
func (self AudioEffectStereoEnhance) SetPanPullout(amount Float) {
	self.Runtime.AudioEffectStereoEnhance_set_pan_pullout(self, amount)
}
func (self AudioEffectStereoEnhance) GetPanPullout() Float {
	return self.Runtime.AudioEffectStereoEnhance_get_pan_pullout(self)
}
func (self AudioEffectStereoEnhance) SetTimePullout(amount Float) {
	self.Runtime.AudioEffectStereoEnhance_set_time_pullout(self, amount)
}
func (self AudioEffectStereoEnhance) GetTimePullout() Float {
	return self.Runtime.AudioEffectStereoEnhance_get_time_pullout(self)
}
func (self AudioEffectStereoEnhance) SetSurround(amount Float) {
	self.Runtime.AudioEffectStereoEnhance_set_surround(self, amount)
}
func (self AudioEffectStereoEnhance) GetSurround() Float {
	return self.Runtime.AudioEffectStereoEnhance_get_surround(self)
}

type extendsAudioListener2D struct {
	_ [0]*extendsAudioListener2D
	class
}

func (self AudioListener2D) Node2D() Node2D {
	var parent Node2D
	parent.class = self.class
	return parent
}
func (self AudioListener2D) MakeCurrent() {
	self.Runtime.AudioListener2D_make_current(self)
}
func (self AudioListener2D) ClearCurrent() {
	self.Runtime.AudioListener2D_clear_current(self)
}
func (self AudioListener2D) IsCurrent() bool {
	return self.Runtime.AudioListener2D_is_current(self)
}

type extendsAudioListener3D struct {
	_ [0]*extendsAudioListener3D
	class
}

func (self AudioListener3D) Node3D() Node3D {
	var parent Node3D
	parent.class = self.class
	return parent
}
func (self AudioListener3D) MakeCurrent() {
	self.Runtime.AudioListener3D_make_current(self)
}
func (self AudioListener3D) ClearCurrent() {
	self.Runtime.AudioListener3D_clear_current(self)
}
func (self AudioListener3D) IsCurrent() bool {
	return self.Runtime.AudioListener3D_is_current(self)
}
func (self AudioListener3D) GetListenerTransform() Transform3D {
	return self.Runtime.AudioListener3D_get_listener_transform(self)
}

type extendsAudioServer struct {
	_ [0]*extendsAudioServer
	class
}

func (self AudioServer) Object() Object { var parent Object; parent.class = self.class; return parent }
func (self AudioServer) SetBusCount(amount int64) {
	self.Runtime.AudioServer_set_bus_count(self, amount)
}
func (self AudioServer) GetBusCount() int64 {
	return self.Runtime.AudioServer_get_bus_count(self)
}
func (self AudioServer) RemoveBus(index int64) {
	self.Runtime.AudioServer_remove_bus(self, index)
}
func (self AudioServer) AddBus(at_position int64) {
	self.Runtime.AudioServer_add_bus(self, at_position)
}
func (self AudioServer) MoveBus(index int64, to_index int64) {
	self.Runtime.AudioServer_move_bus(self, index, to_index)
}
func (self AudioServer) SetBusName(bus_idx int64, name string) {
	self.Runtime.AudioServer_set_bus_name(self, bus_idx, name)
}
func (self AudioServer) GetBusName(bus_idx int64) string {
	return self.Runtime.AudioServer_get_bus_name(self, bus_idx)
}
func (self AudioServer) GetBusIndex(bus_name string) int64 {
	return self.Runtime.AudioServer_get_bus_index(self, bus_name)
}
func (self AudioServer) GetBusChannels(bus_idx int64) int64 {
	return self.Runtime.AudioServer_get_bus_channels(self, bus_idx)
}
func (self AudioServer) SetBusVolumeDb(bus_idx int64, volume_db Float) {
	self.Runtime.AudioServer_set_bus_volume_db(self, bus_idx, volume_db)
}
func (self AudioServer) GetBusVolumeDb(bus_idx int64) Float {
	return self.Runtime.AudioServer_get_bus_volume_db(self, bus_idx)
}
func (self AudioServer) SetBusSend(bus_idx int64, send string) {
	self.Runtime.AudioServer_set_bus_send(self, bus_idx, send)
}
func (self AudioServer) GetBusSend(bus_idx int64) string {
	return self.Runtime.AudioServer_get_bus_send(self, bus_idx)
}
func (self AudioServer) SetBusSolo(bus_idx int64, enable bool) {
	self.Runtime.AudioServer_set_bus_solo(self, bus_idx, enable)
}
func (self AudioServer) IsBusSolo(bus_idx int64) bool {
	return self.Runtime.AudioServer_is_bus_solo(self, bus_idx)
}
func (self AudioServer) SetBusMute(bus_idx int64, enable bool) {
	self.Runtime.AudioServer_set_bus_mute(self, bus_idx, enable)
}
func (self AudioServer) IsBusMute(bus_idx int64) bool {
	return self.Runtime.AudioServer_is_bus_mute(self, bus_idx)
}
func (self AudioServer) SetBusBypassEffects(bus_idx int64, enable bool) {
	self.Runtime.AudioServer_set_bus_bypass_effects(self, bus_idx, enable)
}
func (self AudioServer) IsBusBypassingEffects(bus_idx int64) bool {
	return self.Runtime.AudioServer_is_bus_bypassing_effects(self, bus_idx)
}
func (self AudioServer) AddBusEffect(bus_idx int64, effect AudioEffect, at_position int64) {
	self.Runtime.AudioServer_add_bus_effect(self, bus_idx, effect, at_position)
}
func (self AudioServer) RemoveBusEffect(bus_idx int64, effect_idx int64) {
	self.Runtime.AudioServer_remove_bus_effect(self, bus_idx, effect_idx)
}
func (self AudioServer) GetBusEffectCount(bus_idx int64) int64 {
	return self.Runtime.AudioServer_get_bus_effect_count(self, bus_idx)
}
func (self AudioServer) GetBusEffect(bus_idx int64, effect_idx int64) AudioEffect {
	return self.Runtime.AudioServer_get_bus_effect(self, bus_idx, effect_idx)
}
func (self AudioServer) GetBusEffectInstance(bus_idx int64, effect_idx int64, channel int64) AudioEffectInstance {
	return self.Runtime.AudioServer_get_bus_effect_instance(self, bus_idx, effect_idx, channel)
}
func (self AudioServer) SwapBusEffects(bus_idx int64, effect_idx int64, by_effect_idx int64) {
	self.Runtime.AudioServer_swap_bus_effects(self, bus_idx, effect_idx, by_effect_idx)
}
func (self AudioServer) SetBusEffectEnabled(bus_idx int64, effect_idx int64, enabled bool) {
	self.Runtime.AudioServer_set_bus_effect_enabled(self, bus_idx, effect_idx, enabled)
}
func (self AudioServer) IsBusEffectEnabled(bus_idx int64, effect_idx int64) bool {
	return self.Runtime.AudioServer_is_bus_effect_enabled(self, bus_idx, effect_idx)
}
func (self AudioServer) GetBusPeakVolumeLeftDb(bus_idx int64, channel int64) Float {
	return self.Runtime.AudioServer_get_bus_peak_volume_left_db(self, bus_idx, channel)
}
func (self AudioServer) GetBusPeakVolumeRightDb(bus_idx int64, channel int64) Float {
	return self.Runtime.AudioServer_get_bus_peak_volume_right_db(self, bus_idx, channel)
}
func (self AudioServer) SetPlaybackSpeedScale(scale Float) {
	self.Runtime.AudioServer_set_playback_speed_scale(self, scale)
}
func (self AudioServer) GetPlaybackSpeedScale() Float {
	return self.Runtime.AudioServer_get_playback_speed_scale(self)
}
func (self AudioServer) Lock() {
	self.Runtime.AudioServer_lock(self)
}
func (self AudioServer) Unlock() {
	self.Runtime.AudioServer_unlock(self)
}
func (self AudioServer) GetSpeakerMode() AudioServerSpeakerMode {
	return self.Runtime.AudioServer_get_speaker_mode(self)
}
func (self AudioServer) GetMixRate() Float {
	return self.Runtime.AudioServer_get_mix_rate(self)
}
func (self AudioServer) GetOutputDeviceList() PackedStringArray {
	return self.Runtime.AudioServer_get_output_device_list(self)
}
func (self AudioServer) GetOutputDevice() string {
	return self.Runtime.AudioServer_get_output_device(self)
}
func (self AudioServer) SetOutputDevice(name string) {
	self.Runtime.AudioServer_set_output_device(self, name)
}
func (self AudioServer) GetTimeToNextMix() Float {
	return self.Runtime.AudioServer_get_time_to_next_mix(self)
}
func (self AudioServer) GetTimeSinceLastMix() Float {
	return self.Runtime.AudioServer_get_time_since_last_mix(self)
}
func (self AudioServer) GetOutputLatency() Float {
	return self.Runtime.AudioServer_get_output_latency(self)
}
func (self AudioServer) GetInputDeviceList() PackedStringArray {
	return self.Runtime.AudioServer_get_input_device_list(self)
}
func (self AudioServer) GetInputDevice() string {
	return self.Runtime.AudioServer_get_input_device(self)
}
func (self AudioServer) SetInputDevice(name string) {
	self.Runtime.AudioServer_set_input_device(self, name)
}
func (self AudioServer) SetBusLayout(bus_layout AudioBusLayout) {
	self.Runtime.AudioServer_set_bus_layout(self, bus_layout)
}
func (self AudioServer) GenerateBusLayout() AudioBusLayout {
	return self.Runtime.AudioServer_generate_bus_layout(self)
}
func (self AudioServer) SetEnableTaggingUsedAudioStreams(enable bool) {
	self.Runtime.AudioServer_set_enable_tagging_used_audio_streams(self, enable)
}

type extendsAudioStream struct {
	_ [0]*extendsAudioStream
	class
}

func (self AudioStream) Resource() Resource {
	var parent Resource
	parent.class = self.class
	return parent
}
func (self AudioStream) GetLength() Float {
	return self.Runtime.AudioStream_get_length(self)
}
func (self AudioStream) IsMonophonic() bool {
	return self.Runtime.AudioStream_is_monophonic(self)
}
func (self AudioStream) InstantiatePlayback() AudioStreamPlayback {
	return self.Runtime.AudioStream_instantiate_playback(self)
}

type extendsAudioStreamGenerator struct {
	_ [0]*extendsAudioStreamGenerator
	class
}

func (self AudioStreamGenerator) AudioStream() AudioStream {
	var parent AudioStream
	parent.class = self.class
	return parent
}
func (self AudioStreamGenerator) SetMixRate(hz Float) {
	self.Runtime.AudioStreamGenerator_set_mix_rate(self, hz)
}
func (self AudioStreamGenerator) GetMixRate() Float {
	return self.Runtime.AudioStreamGenerator_get_mix_rate(self)
}
func (self AudioStreamGenerator) SetBufferLength(seconds Float) {
	self.Runtime.AudioStreamGenerator_set_buffer_length(self, seconds)
}
func (self AudioStreamGenerator) GetBufferLength() Float {
	return self.Runtime.AudioStreamGenerator_get_buffer_length(self)
}

type extendsAudioStreamGeneratorPlayback struct {
	_ [0]*extendsAudioStreamGeneratorPlayback
	class
}

func (self AudioStreamGeneratorPlayback) AudioStreamPlaybackResampled() AudioStreamPlaybackResampled {
	var parent AudioStreamPlaybackResampled
	parent.class = self.class
	return parent
}
func (self AudioStreamGeneratorPlayback) PushFrame(frame Vector2) bool {
	return self.Runtime.AudioStreamGeneratorPlayback_push_frame(self, frame)
}
func (self AudioStreamGeneratorPlayback) CanPushBuffer(amount int64) bool {
	return self.Runtime.AudioStreamGeneratorPlayback_can_push_buffer(self, amount)
}
func (self AudioStreamGeneratorPlayback) PushBuffer(frames PackedVector2Array) bool {
	return self.Runtime.AudioStreamGeneratorPlayback_push_buffer(self, frames)
}
func (self AudioStreamGeneratorPlayback) GetFramesAvailable() int64 {
	return self.Runtime.AudioStreamGeneratorPlayback_get_frames_available(self)
}
func (self AudioStreamGeneratorPlayback) GetSkips() int64 {
	return self.Runtime.AudioStreamGeneratorPlayback_get_skips(self)
}
func (self AudioStreamGeneratorPlayback) ClearBuffer() {
	self.Runtime.AudioStreamGeneratorPlayback_clear_buffer(self)
}

type extendsAudioStreamMP3 struct {
	_ [0]*extendsAudioStreamMP3
	class
}

func (self AudioStreamMP3) AudioStream() AudioStream {
	var parent AudioStream
	parent.class = self.class
	return parent
}
func (self AudioStreamMP3) SetData(data PackedByteArray) {
	self.Runtime.AudioStreamMP3_set_data(self, data)
}
func (self AudioStreamMP3) GetData() PackedByteArray {
	return self.Runtime.AudioStreamMP3_get_data(self)
}
func (self AudioStreamMP3) SetLoop(enable bool) {
	self.Runtime.AudioStreamMP3_set_loop(self, enable)
}
func (self AudioStreamMP3) HasLoop() bool {
	return self.Runtime.AudioStreamMP3_has_loop(self)
}
func (self AudioStreamMP3) SetLoopOffset(seconds Float) {
	self.Runtime.AudioStreamMP3_set_loop_offset(self, seconds)
}
func (self AudioStreamMP3) GetLoopOffset() Float {
	return self.Runtime.AudioStreamMP3_get_loop_offset(self)
}
func (self AudioStreamMP3) SetBpm(bpm Float) {
	self.Runtime.AudioStreamMP3_set_bpm(self, bpm)
}
func (self AudioStreamMP3) GetBpm() Float {
	return self.Runtime.AudioStreamMP3_get_bpm(self)
}
func (self AudioStreamMP3) SetBeatCount(count int64) {
	self.Runtime.AudioStreamMP3_set_beat_count(self, count)
}
func (self AudioStreamMP3) GetBeatCount() int64 {
	return self.Runtime.AudioStreamMP3_get_beat_count(self)
}
func (self AudioStreamMP3) SetBarBeats(count int64) {
	self.Runtime.AudioStreamMP3_set_bar_beats(self, count)
}
func (self AudioStreamMP3) GetBarBeats() int64 {
	return self.Runtime.AudioStreamMP3_get_bar_beats(self)
}

type extendsAudioStreamMicrophone struct {
	_ [0]*extendsAudioStreamMicrophone
	class
}

func (self AudioStreamMicrophone) AudioStream() AudioStream {
	var parent AudioStream
	parent.class = self.class
	return parent
}

type extendsAudioStreamOggVorbis struct {
	_ [0]*extendsAudioStreamOggVorbis
	class
}

func (self AudioStreamOggVorbis) AudioStream() AudioStream {
	var parent AudioStream
	parent.class = self.class
	return parent
}
func (self AudioStreamOggVorbis) LoadFromBuffer(buffer PackedByteArray) AudioStreamOggVorbis {
	return self.Runtime.AudioStreamOggVorbis_load_from_buffer(self, buffer)
}
func (self AudioStreamOggVorbis) LoadFromFile(path string) AudioStreamOggVorbis {
	return self.Runtime.AudioStreamOggVorbis_load_from_file(self, path)
}
func (self AudioStreamOggVorbis) SetPacketSequence(packet_sequence OggPacketSequence) {
	self.Runtime.AudioStreamOggVorbis_set_packet_sequence(self, packet_sequence)
}
func (self AudioStreamOggVorbis) GetPacketSequence() OggPacketSequence {
	return self.Runtime.AudioStreamOggVorbis_get_packet_sequence(self)
}
func (self AudioStreamOggVorbis) SetLoop(enable bool) {
	self.Runtime.AudioStreamOggVorbis_set_loop(self, enable)
}
func (self AudioStreamOggVorbis) HasLoop() bool {
	return self.Runtime.AudioStreamOggVorbis_has_loop(self)
}
func (self AudioStreamOggVorbis) SetLoopOffset(seconds Float) {
	self.Runtime.AudioStreamOggVorbis_set_loop_offset(self, seconds)
}
func (self AudioStreamOggVorbis) GetLoopOffset() Float {
	return self.Runtime.AudioStreamOggVorbis_get_loop_offset(self)
}
func (self AudioStreamOggVorbis) SetBpm(bpm Float) {
	self.Runtime.AudioStreamOggVorbis_set_bpm(self, bpm)
}
func (self AudioStreamOggVorbis) GetBpm() Float {
	return self.Runtime.AudioStreamOggVorbis_get_bpm(self)
}
func (self AudioStreamOggVorbis) SetBeatCount(count int64) {
	self.Runtime.AudioStreamOggVorbis_set_beat_count(self, count)
}
func (self AudioStreamOggVorbis) GetBeatCount() int64 {
	return self.Runtime.AudioStreamOggVorbis_get_beat_count(self)
}
func (self AudioStreamOggVorbis) SetBarBeats(count int64) {
	self.Runtime.AudioStreamOggVorbis_set_bar_beats(self, count)
}
func (self AudioStreamOggVorbis) GetBarBeats() int64 {
	return self.Runtime.AudioStreamOggVorbis_get_bar_beats(self)
}

type extendsAudioStreamPlayback struct {
	_ [0]*extendsAudioStreamPlayback
	class
}

func (self AudioStreamPlayback) RefCounted() RefCounted {
	var parent RefCounted
	parent.class = self.class
	return parent
}

type extendsAudioStreamPlaybackOggVorbis struct {
	_ [0]*extendsAudioStreamPlaybackOggVorbis
	class
}

func (self AudioStreamPlaybackOggVorbis) AudioStreamPlaybackResampled() AudioStreamPlaybackResampled {
	var parent AudioStreamPlaybackResampled
	parent.class = self.class
	return parent
}

type extendsAudioStreamPlaybackPolyphonic struct {
	_ [0]*extendsAudioStreamPlaybackPolyphonic
	class
}

func (self AudioStreamPlaybackPolyphonic) AudioStreamPlayback() AudioStreamPlayback {
	var parent AudioStreamPlayback
	parent.class = self.class
	return parent
}
func (self AudioStreamPlaybackPolyphonic) PlayStream(stream AudioStream, from_offset Float, volume_db Float, pitch_scale Float) int64 {
	return self.Runtime.AudioStreamPlaybackPolyphonic_play_stream(self, stream, from_offset, volume_db, pitch_scale)
}
func (self AudioStreamPlaybackPolyphonic) SetStreamVolume(stream int64, volume_db Float) {
	self.Runtime.AudioStreamPlaybackPolyphonic_set_stream_volume(self, stream, volume_db)
}
func (self AudioStreamPlaybackPolyphonic) SetStreamPitchScale(stream int64, pitch_scale Float) {
	self.Runtime.AudioStreamPlaybackPolyphonic_set_stream_pitch_scale(self, stream, pitch_scale)
}
func (self AudioStreamPlaybackPolyphonic) IsStreamPlaying(stream int64) bool {
	return self.Runtime.AudioStreamPlaybackPolyphonic_is_stream_playing(self, stream)
}
func (self AudioStreamPlaybackPolyphonic) StopStream(stream int64) {
	self.Runtime.AudioStreamPlaybackPolyphonic_stop_stream(self, stream)
}

type extendsAudioStreamPlaybackResampled struct {
	_ [0]*extendsAudioStreamPlaybackResampled
	class
}

func (self AudioStreamPlaybackResampled) AudioStreamPlayback() AudioStreamPlayback {
	var parent AudioStreamPlayback
	parent.class = self.class
	return parent
}
func (self AudioStreamPlaybackResampled) BeginResample() {
	self.Runtime.AudioStreamPlaybackResampled_begin_resample(self)
}

type extendsAudioStreamPlayer struct {
	_ [0]*extendsAudioStreamPlayer
	class
}

func (self AudioStreamPlayer) Node() Node { var parent Node; parent.class = self.class; return parent }
func (self AudioStreamPlayer) SetStream(stream AudioStream) {
	self.Runtime.AudioStreamPlayer_set_stream(self, stream)
}
func (self AudioStreamPlayer) GetStream() AudioStream {
	return self.Runtime.AudioStreamPlayer_get_stream(self)
}
func (self AudioStreamPlayer) SetVolumeDb(volume_db Float) {
	self.Runtime.AudioStreamPlayer_set_volume_db(self, volume_db)
}
func (self AudioStreamPlayer) GetVolumeDb() Float {
	return self.Runtime.AudioStreamPlayer_get_volume_db(self)
}
func (self AudioStreamPlayer) SetPitchScale(pitch_scale Float) {
	self.Runtime.AudioStreamPlayer_set_pitch_scale(self, pitch_scale)
}
func (self AudioStreamPlayer) GetPitchScale() Float {
	return self.Runtime.AudioStreamPlayer_get_pitch_scale(self)
}
func (self AudioStreamPlayer) Play(from_position Float) {
	self.Runtime.AudioStreamPlayer_play(self, from_position)
}
func (self AudioStreamPlayer) SeekTo(to_position Float) {
	self.Runtime.AudioStreamPlayer_seek(self, to_position)
}
func (self AudioStreamPlayer) Stop() {
	self.Runtime.AudioStreamPlayer_stop(self)
}
func (self AudioStreamPlayer) IsPlaying() bool {
	return self.Runtime.AudioStreamPlayer_is_playing(self)
}
func (self AudioStreamPlayer) GetPlaybackPosition() Float {
	return self.Runtime.AudioStreamPlayer_get_playback_position(self)
}
func (self AudioStreamPlayer) SetBus(bus string) {
	self.Runtime.AudioStreamPlayer_set_bus(self, bus)
}
func (self AudioStreamPlayer) GetBus() string {
	return self.Runtime.AudioStreamPlayer_get_bus(self)
}
func (self AudioStreamPlayer) SetAutoplay(enable bool) {
	self.Runtime.AudioStreamPlayer_set_autoplay(self, enable)
}
func (self AudioStreamPlayer) IsAutoplayEnabled() bool {
	return self.Runtime.AudioStreamPlayer_is_autoplay_enabled(self)
}
func (self AudioStreamPlayer) SetMixTarget(mix_target AudioStreamPlayerMixTarget) {
	self.Runtime.AudioStreamPlayer_set_mix_target(self, mix_target)
}
func (self AudioStreamPlayer) GetMixTarget() AudioStreamPlayerMixTarget {
	return self.Runtime.AudioStreamPlayer_get_mix_target(self)
}
func (self AudioStreamPlayer) SetStreamPaused(pause bool) {
	self.Runtime.AudioStreamPlayer_set_stream_paused(self, pause)
}
func (self AudioStreamPlayer) GetStreamPaused() bool {
	return self.Runtime.AudioStreamPlayer_get_stream_paused(self)
}
func (self AudioStreamPlayer) SetMaxPolyphony(max_polyphony int64) {
	self.Runtime.AudioStreamPlayer_set_max_polyphony(self, max_polyphony)
}
func (self AudioStreamPlayer) GetMaxPolyphony() int64 {
	return self.Runtime.AudioStreamPlayer_get_max_polyphony(self)
}
func (self AudioStreamPlayer) HasStreamPlayback() bool {
	return self.Runtime.AudioStreamPlayer_has_stream_playback(self)
}
func (self AudioStreamPlayer) GetStreamPlayback() AudioStreamPlayback {
	return self.Runtime.AudioStreamPlayer_get_stream_playback(self)
}

type extendsAudioStreamPlayer2D struct {
	_ [0]*extendsAudioStreamPlayer2D
	class
}

func (self AudioStreamPlayer2D) Node2D() Node2D {
	var parent Node2D
	parent.class = self.class
	return parent
}
func (self AudioStreamPlayer2D) SetStream(stream AudioStream) {
	self.Runtime.AudioStreamPlayer2D_set_stream(self, stream)
}
func (self AudioStreamPlayer2D) GetStream() AudioStream {
	return self.Runtime.AudioStreamPlayer2D_get_stream(self)
}
func (self AudioStreamPlayer2D) SetVolumeDb(volume_db Float) {
	self.Runtime.AudioStreamPlayer2D_set_volume_db(self, volume_db)
}
func (self AudioStreamPlayer2D) GetVolumeDb() Float {
	return self.Runtime.AudioStreamPlayer2D_get_volume_db(self)
}
func (self AudioStreamPlayer2D) SetPitchScale(pitch_scale Float) {
	self.Runtime.AudioStreamPlayer2D_set_pitch_scale(self, pitch_scale)
}
func (self AudioStreamPlayer2D) GetPitchScale() Float {
	return self.Runtime.AudioStreamPlayer2D_get_pitch_scale(self)
}
func (self AudioStreamPlayer2D) Play(from_position Float) {
	self.Runtime.AudioStreamPlayer2D_play(self, from_position)
}
func (self AudioStreamPlayer2D) SeekTo(to_position Float) {
	self.Runtime.AudioStreamPlayer2D_seek(self, to_position)
}
func (self AudioStreamPlayer2D) Stop() {
	self.Runtime.AudioStreamPlayer2D_stop(self)
}
func (self AudioStreamPlayer2D) IsPlaying() bool {
	return self.Runtime.AudioStreamPlayer2D_is_playing(self)
}
func (self AudioStreamPlayer2D) GetPlaybackPosition() Float {
	return self.Runtime.AudioStreamPlayer2D_get_playback_position(self)
}
func (self AudioStreamPlayer2D) SetBus(bus string) {
	self.Runtime.AudioStreamPlayer2D_set_bus(self, bus)
}
func (self AudioStreamPlayer2D) GetBus() string {
	return self.Runtime.AudioStreamPlayer2D_get_bus(self)
}
func (self AudioStreamPlayer2D) SetAutoplay(enable bool) {
	self.Runtime.AudioStreamPlayer2D_set_autoplay(self, enable)
}
func (self AudioStreamPlayer2D) IsAutoplayEnabled() bool {
	return self.Runtime.AudioStreamPlayer2D_is_autoplay_enabled(self)
}
func (self AudioStreamPlayer2D) SetMaxDistance(pixels Float) {
	self.Runtime.AudioStreamPlayer2D_set_max_distance(self, pixels)
}
func (self AudioStreamPlayer2D) GetMaxDistance() Float {
	return self.Runtime.AudioStreamPlayer2D_get_max_distance(self)
}
func (self AudioStreamPlayer2D) SetAttenuation(curve Float) {
	self.Runtime.AudioStreamPlayer2D_set_attenuation(self, curve)
}
func (self AudioStreamPlayer2D) GetAttenuation() Float {
	return self.Runtime.AudioStreamPlayer2D_get_attenuation(self)
}
func (self AudioStreamPlayer2D) SetAreaMask(mask int64) {
	self.Runtime.AudioStreamPlayer2D_set_area_mask(self, mask)
}
func (self AudioStreamPlayer2D) GetAreaMask() int64 {
	return self.Runtime.AudioStreamPlayer2D_get_area_mask(self)
}
func (self AudioStreamPlayer2D) SetStreamPaused(pause bool) {
	self.Runtime.AudioStreamPlayer2D_set_stream_paused(self, pause)
}
func (self AudioStreamPlayer2D) GetStreamPaused() bool {
	return self.Runtime.AudioStreamPlayer2D_get_stream_paused(self)
}
func (self AudioStreamPlayer2D) SetMaxPolyphony(max_polyphony int64) {
	self.Runtime.AudioStreamPlayer2D_set_max_polyphony(self, max_polyphony)
}
func (self AudioStreamPlayer2D) GetMaxPolyphony() int64 {
	return self.Runtime.AudioStreamPlayer2D_get_max_polyphony(self)
}
func (self AudioStreamPlayer2D) SetPanningStrength(panning_strength Float) {
	self.Runtime.AudioStreamPlayer2D_set_panning_strength(self, panning_strength)
}
func (self AudioStreamPlayer2D) GetPanningStrength() Float {
	return self.Runtime.AudioStreamPlayer2D_get_panning_strength(self)
}
func (self AudioStreamPlayer2D) HasStreamPlayback() bool {
	return self.Runtime.AudioStreamPlayer2D_has_stream_playback(self)
}
func (self AudioStreamPlayer2D) GetStreamPlayback() AudioStreamPlayback {
	return self.Runtime.AudioStreamPlayer2D_get_stream_playback(self)
}

type extendsAudioStreamPlayer3D struct {
	_ [0]*extendsAudioStreamPlayer3D
	class
}

func (self AudioStreamPlayer3D) Node3D() Node3D {
	var parent Node3D
	parent.class = self.class
	return parent
}
func (self AudioStreamPlayer3D) SetStream(stream AudioStream) {
	self.Runtime.AudioStreamPlayer3D_set_stream(self, stream)
}
func (self AudioStreamPlayer3D) GetStream() AudioStream {
	return self.Runtime.AudioStreamPlayer3D_get_stream(self)
}
func (self AudioStreamPlayer3D) SetVolumeDb(volume_db Float) {
	self.Runtime.AudioStreamPlayer3D_set_volume_db(self, volume_db)
}
func (self AudioStreamPlayer3D) GetVolumeDb() Float {
	return self.Runtime.AudioStreamPlayer3D_get_volume_db(self)
}
func (self AudioStreamPlayer3D) SetUnitSize(unit_size Float) {
	self.Runtime.AudioStreamPlayer3D_set_unit_size(self, unit_size)
}
func (self AudioStreamPlayer3D) GetUnitSize() Float {
	return self.Runtime.AudioStreamPlayer3D_get_unit_size(self)
}
func (self AudioStreamPlayer3D) SetMaxDb(max_db Float) {
	self.Runtime.AudioStreamPlayer3D_set_max_db(self, max_db)
}
func (self AudioStreamPlayer3D) GetMaxDb() Float {
	return self.Runtime.AudioStreamPlayer3D_get_max_db(self)
}
func (self AudioStreamPlayer3D) SetPitchScale(pitch_scale Float) {
	self.Runtime.AudioStreamPlayer3D_set_pitch_scale(self, pitch_scale)
}
func (self AudioStreamPlayer3D) GetPitchScale() Float {
	return self.Runtime.AudioStreamPlayer3D_get_pitch_scale(self)
}
func (self AudioStreamPlayer3D) Play(from_position Float) {
	self.Runtime.AudioStreamPlayer3D_play(self, from_position)
}
func (self AudioStreamPlayer3D) SeekTo(to_position Float) {
	self.Runtime.AudioStreamPlayer3D_seek(self, to_position)
}
func (self AudioStreamPlayer3D) Stop() {
	self.Runtime.AudioStreamPlayer3D_stop(self)
}
func (self AudioStreamPlayer3D) IsPlaying() bool {
	return self.Runtime.AudioStreamPlayer3D_is_playing(self)
}
func (self AudioStreamPlayer3D) GetPlaybackPosition() Float {
	return self.Runtime.AudioStreamPlayer3D_get_playback_position(self)
}
func (self AudioStreamPlayer3D) SetBus(bus string) {
	self.Runtime.AudioStreamPlayer3D_set_bus(self, bus)
}
func (self AudioStreamPlayer3D) GetBus() string {
	return self.Runtime.AudioStreamPlayer3D_get_bus(self)
}
func (self AudioStreamPlayer3D) SetAutoplay(enable bool) {
	self.Runtime.AudioStreamPlayer3D_set_autoplay(self, enable)
}
func (self AudioStreamPlayer3D) IsAutoplayEnabled() bool {
	return self.Runtime.AudioStreamPlayer3D_is_autoplay_enabled(self)
}
func (self AudioStreamPlayer3D) SetMaxDistance(meters Float) {
	self.Runtime.AudioStreamPlayer3D_set_max_distance(self, meters)
}
func (self AudioStreamPlayer3D) GetMaxDistance() Float {
	return self.Runtime.AudioStreamPlayer3D_get_max_distance(self)
}
func (self AudioStreamPlayer3D) SetAreaMask(mask int64) {
	self.Runtime.AudioStreamPlayer3D_set_area_mask(self, mask)
}
func (self AudioStreamPlayer3D) GetAreaMask() int64 {
	return self.Runtime.AudioStreamPlayer3D_get_area_mask(self)
}
func (self AudioStreamPlayer3D) SetEmissionAngle(degrees Float) {
	self.Runtime.AudioStreamPlayer3D_set_emission_angle(self, degrees)
}
func (self AudioStreamPlayer3D) GetEmissionAngle() Float {
	return self.Runtime.AudioStreamPlayer3D_get_emission_angle(self)
}
func (self AudioStreamPlayer3D) SetEmissionAngleEnabled(enabled bool) {
	self.Runtime.AudioStreamPlayer3D_set_emission_angle_enabled(self, enabled)
}
func (self AudioStreamPlayer3D) IsEmissionAngleEnabled() bool {
	return self.Runtime.AudioStreamPlayer3D_is_emission_angle_enabled(self)
}
func (self AudioStreamPlayer3D) SetEmissionAngleFilterAttenuationDb(db Float) {
	self.Runtime.AudioStreamPlayer3D_set_emission_angle_filter_attenuation_db(self, db)
}
func (self AudioStreamPlayer3D) GetEmissionAngleFilterAttenuationDb() Float {
	return self.Runtime.AudioStreamPlayer3D_get_emission_angle_filter_attenuation_db(self)
}
func (self AudioStreamPlayer3D) SetAttenuationFilterCutoffHz(degrees Float) {
	self.Runtime.AudioStreamPlayer3D_set_attenuation_filter_cutoff_hz(self, degrees)
}
func (self AudioStreamPlayer3D) GetAttenuationFilterCutoffHz() Float {
	return self.Runtime.AudioStreamPlayer3D_get_attenuation_filter_cutoff_hz(self)
}
func (self AudioStreamPlayer3D) SetAttenuationFilterDb(db Float) {
	self.Runtime.AudioStreamPlayer3D_set_attenuation_filter_db(self, db)
}
func (self AudioStreamPlayer3D) GetAttenuationFilterDb() Float {
	return self.Runtime.AudioStreamPlayer3D_get_attenuation_filter_db(self)
}
func (self AudioStreamPlayer3D) SetAttenuationModel(model AudioStreamPlayer3DAttenuationModel) {
	self.Runtime.AudioStreamPlayer3D_set_attenuation_model(self, model)
}
func (self AudioStreamPlayer3D) GetAttenuationModel() AudioStreamPlayer3DAttenuationModel {
	return self.Runtime.AudioStreamPlayer3D_get_attenuation_model(self)
}
func (self AudioStreamPlayer3D) SetDopplerTracking(mode AudioStreamPlayer3DDopplerTracking) {
	self.Runtime.AudioStreamPlayer3D_set_doppler_tracking(self, mode)
}
func (self AudioStreamPlayer3D) GetDopplerTracking() AudioStreamPlayer3DDopplerTracking {
	return self.Runtime.AudioStreamPlayer3D_get_doppler_tracking(self)
}
func (self AudioStreamPlayer3D) SetStreamPaused(pause bool) {
	self.Runtime.AudioStreamPlayer3D_set_stream_paused(self, pause)
}
func (self AudioStreamPlayer3D) GetStreamPaused() bool {
	return self.Runtime.AudioStreamPlayer3D_get_stream_paused(self)
}
func (self AudioStreamPlayer3D) SetMaxPolyphony(max_polyphony int64) {
	self.Runtime.AudioStreamPlayer3D_set_max_polyphony(self, max_polyphony)
}
func (self AudioStreamPlayer3D) GetMaxPolyphony() int64 {
	return self.Runtime.AudioStreamPlayer3D_get_max_polyphony(self)
}
func (self AudioStreamPlayer3D) SetPanningStrength(panning_strength Float) {
	self.Runtime.AudioStreamPlayer3D_set_panning_strength(self, panning_strength)
}
func (self AudioStreamPlayer3D) GetPanningStrength() Float {
	return self.Runtime.AudioStreamPlayer3D_get_panning_strength(self)
}
func (self AudioStreamPlayer3D) HasStreamPlayback() bool {
	return self.Runtime.AudioStreamPlayer3D_has_stream_playback(self)
}
func (self AudioStreamPlayer3D) GetStreamPlayback() AudioStreamPlayback {
	return self.Runtime.AudioStreamPlayer3D_get_stream_playback(self)
}

type extendsAudioStreamPolyphonic struct {
	_ [0]*extendsAudioStreamPolyphonic
	class
}

func (self AudioStreamPolyphonic) AudioStream() AudioStream {
	var parent AudioStream
	parent.class = self.class
	return parent
}
func (self AudioStreamPolyphonic) SetPolyphony(voices int64) {
	self.Runtime.AudioStreamPolyphonic_set_polyphony(self, voices)
}
func (self AudioStreamPolyphonic) GetPolyphony() int64 {
	return self.Runtime.AudioStreamPolyphonic_get_polyphony(self)
}

type extendsAudioStreamRandomizer struct {
	_ [0]*extendsAudioStreamRandomizer
	class
}

func (self AudioStreamRandomizer) AudioStream() AudioStream {
	var parent AudioStream
	parent.class = self.class
	return parent
}
func (self AudioStreamRandomizer) AddStream(index int64, stream AudioStream, weight Float) {
	self.Runtime.AudioStreamRandomizer_add_stream(self, index, stream, weight)
}
func (self AudioStreamRandomizer) MoveStream(index_from int64, index_to int64) {
	self.Runtime.AudioStreamRandomizer_move_stream(self, index_from, index_to)
}
func (self AudioStreamRandomizer) RemoveStream(index int64) {
	self.Runtime.AudioStreamRandomizer_remove_stream(self, index)
}
func (self AudioStreamRandomizer) SetStream(index int64, stream AudioStream) {
	self.Runtime.AudioStreamRandomizer_set_stream(self, index, stream)
}
func (self AudioStreamRandomizer) GetStream(index int64) AudioStream {
	return self.Runtime.AudioStreamRandomizer_get_stream(self, index)
}
func (self AudioStreamRandomizer) SetStreamProbabilityWeight(index int64, weight Float) {
	self.Runtime.AudioStreamRandomizer_set_stream_probability_weight(self, index, weight)
}
func (self AudioStreamRandomizer) GetStreamProbabilityWeight(index int64) Float {
	return self.Runtime.AudioStreamRandomizer_get_stream_probability_weight(self, index)
}
func (self AudioStreamRandomizer) SetStreamsCount(count int64) {
	self.Runtime.AudioStreamRandomizer_set_streams_count(self, count)
}
func (self AudioStreamRandomizer) GetStreamsCount() int64 {
	return self.Runtime.AudioStreamRandomizer_get_streams_count(self)
}
func (self AudioStreamRandomizer) SetRandomPitch(scale Float) {
	self.Runtime.AudioStreamRandomizer_set_random_pitch(self, scale)
}
func (self AudioStreamRandomizer) GetRandomPitch() Float {
	return self.Runtime.AudioStreamRandomizer_get_random_pitch(self)
}
func (self AudioStreamRandomizer) SetRandomVolumeOffsetDb(db_offset Float) {
	self.Runtime.AudioStreamRandomizer_set_random_volume_offset_db(self, db_offset)
}
func (self AudioStreamRandomizer) GetRandomVolumeOffsetDb() Float {
	return self.Runtime.AudioStreamRandomizer_get_random_volume_offset_db(self)
}
func (self AudioStreamRandomizer) SetPlaybackMode(mode AudioStreamRandomizerPlaybackMode) {
	self.Runtime.AudioStreamRandomizer_set_playback_mode(self, mode)
}
func (self AudioStreamRandomizer) GetPlaybackMode() AudioStreamRandomizerPlaybackMode {
	return self.Runtime.AudioStreamRandomizer_get_playback_mode(self)
}

type extendsAudioStreamWAV struct {
	_ [0]*extendsAudioStreamWAV
	class
}

func (self AudioStreamWAV) AudioStream() AudioStream {
	var parent AudioStream
	parent.class = self.class
	return parent
}
func (self AudioStreamWAV) SetData(data PackedByteArray) {
	self.Runtime.AudioStreamWAV_set_data(self, data)
}
func (self AudioStreamWAV) GetData() PackedByteArray {
	return self.Runtime.AudioStreamWAV_get_data(self)
}
func (self AudioStreamWAV) SetFormat(format AudioStreamWAVFormat) {
	self.Runtime.AudioStreamWAV_set_format(self, format)
}
func (self AudioStreamWAV) GetFormat() AudioStreamWAVFormat {
	return self.Runtime.AudioStreamWAV_get_format(self)
}
func (self AudioStreamWAV) SetLoopMode(loop_mode AudioStreamWAVLoopMode) {
	self.Runtime.AudioStreamWAV_set_loop_mode(self, loop_mode)
}
func (self AudioStreamWAV) GetLoopMode() AudioStreamWAVLoopMode {
	return self.Runtime.AudioStreamWAV_get_loop_mode(self)
}
func (self AudioStreamWAV) SetLoopBegin(loop_begin int64) {
	self.Runtime.AudioStreamWAV_set_loop_begin(self, loop_begin)
}
func (self AudioStreamWAV) GetLoopBegin() int64 {
	return self.Runtime.AudioStreamWAV_get_loop_begin(self)
}
func (self AudioStreamWAV) SetLoopEnd(loop_end int64) {
	self.Runtime.AudioStreamWAV_set_loop_end(self, loop_end)
}
func (self AudioStreamWAV) GetLoopEnd() int64 {
	return self.Runtime.AudioStreamWAV_get_loop_end(self)
}
func (self AudioStreamWAV) SetMixRate(mix_rate int64) {
	self.Runtime.AudioStreamWAV_set_mix_rate(self, mix_rate)
}
func (self AudioStreamWAV) GetMixRate() int64 {
	return self.Runtime.AudioStreamWAV_get_mix_rate(self)
}
func (self AudioStreamWAV) SetStereo(stereo bool) {
	self.Runtime.AudioStreamWAV_set_stereo(self, stereo)
}
func (self AudioStreamWAV) IsStereo() bool {
	return self.Runtime.AudioStreamWAV_is_stereo(self)
}
func (self AudioStreamWAV) SaveToWav(path string) int64 {
	return self.Runtime.AudioStreamWAV_save_to_wav(self, path)
}

type extendsBackBufferCopy struct {
	_ [0]*extendsBackBufferCopy
	class
}

func (self BackBufferCopy) Node2D() Node2D {
	var parent Node2D
	parent.class = self.class
	return parent
}
func (self BackBufferCopy) SetRect(rect Rect2) {
	self.Runtime.BackBufferCopy_set_rect(self, rect)
}
func (self BackBufferCopy) GetRect() Rect2 {
	return self.Runtime.BackBufferCopy_get_rect(self)
}
func (self BackBufferCopy) SetCopyMode(copy_mode BackBufferCopyCopyMode) {
	self.Runtime.BackBufferCopy_set_copy_mode(self, copy_mode)
}
func (self BackBufferCopy) GetCopyMode() BackBufferCopyCopyMode {
	return self.Runtime.BackBufferCopy_get_copy_mode(self)
}

type extendsBaseButton struct {
	_ [0]*extendsBaseButton
	class
}

func (self BaseButton) Control() Control {
	var parent Control
	parent.class = self.class
	return parent
}
func (self BaseButton) SetPressed(pressed bool) {
	self.Runtime.BaseButton_set_pressed(self, pressed)
}
func (self BaseButton) IsPressed() bool {
	return self.Runtime.BaseButton_is_pressed(self)
}
func (self BaseButton) SetPressedNoSignal(pressed bool) {
	self.Runtime.BaseButton_set_pressed_no_signal(self, pressed)
}
func (self BaseButton) IsHovered() bool {
	return self.Runtime.BaseButton_is_hovered(self)
}
func (self BaseButton) SetToggleMode(enabled bool) {
	self.Runtime.BaseButton_set_toggle_mode(self, enabled)
}
func (self BaseButton) IsToggleMode() bool {
	return self.Runtime.BaseButton_is_toggle_mode(self)
}
func (self BaseButton) SetShortcutInTooltip(enabled bool) {
	self.Runtime.BaseButton_set_shortcut_in_tooltip(self, enabled)
}
func (self BaseButton) IsShortcutInTooltipEnabled() bool {
	return self.Runtime.BaseButton_is_shortcut_in_tooltip_enabled(self)
}
func (self BaseButton) SetDisabled(disabled bool) {
	self.Runtime.BaseButton_set_disabled(self, disabled)
}
func (self BaseButton) IsDisabled() bool {
	return self.Runtime.BaseButton_is_disabled(self)
}
func (self BaseButton) SetActionMode(mode BaseButtonActionMode) {
	self.Runtime.BaseButton_set_action_mode(self, mode)
}
func (self BaseButton) GetActionMode() BaseButtonActionMode {
	return self.Runtime.BaseButton_get_action_mode(self)
}
func (self BaseButton) SetButtonMask(mask MouseButtonMask) {
	self.Runtime.BaseButton_set_button_mask(self, mask)
}
func (self BaseButton) GetButtonMask() MouseButtonMask {
	return self.Runtime.BaseButton_get_button_mask(self)
}
func (self BaseButton) GetDrawMode() BaseButtonDrawMode {
	return self.Runtime.BaseButton_get_draw_mode(self)
}
func (self BaseButton) SetKeepPressedOutside(enabled bool) {
	self.Runtime.BaseButton_set_keep_pressed_outside(self, enabled)
}
func (self BaseButton) IsKeepPressedOutside() bool {
	return self.Runtime.BaseButton_is_keep_pressed_outside(self)
}
func (self BaseButton) SetShortcutFeedback(enabled bool) {
	self.Runtime.BaseButton_set_shortcut_feedback(self, enabled)
}
func (self BaseButton) IsShortcutFeedback() bool {
	return self.Runtime.BaseButton_is_shortcut_feedback(self)
}
func (self BaseButton) SetShortcut(shortcut Shortcut) {
	self.Runtime.BaseButton_set_shortcut(self, shortcut)
}
func (self BaseButton) GetShortcut() Shortcut {
	return self.Runtime.BaseButton_get_shortcut(self)
}
func (self BaseButton) SetButtonGroup(button_group ButtonGroup) {
	self.Runtime.BaseButton_set_button_group(self, button_group)
}
func (self BaseButton) GetButtonGroup() ButtonGroup {
	return self.Runtime.BaseButton_get_button_group(self)
}

type extendsBaseMaterial3D struct {
	_ [0]*extendsBaseMaterial3D
	class
}

func (self BaseMaterial3D) Material() Material {
	var parent Material
	parent.class = self.class
	return parent
}
func (self BaseMaterial3D) SetAlbedo(albedo Color) {
	self.Runtime.BaseMaterial3D_set_albedo(self, albedo)
}
func (self BaseMaterial3D) GetAlbedo() Color {
	return self.Runtime.BaseMaterial3D_get_albedo(self)
}
func (self BaseMaterial3D) SetTransparency(transparency BaseMaterial3DTransparency) {
	self.Runtime.BaseMaterial3D_set_transparency(self, transparency)
}
func (self BaseMaterial3D) GetTransparency() BaseMaterial3DTransparency {
	return self.Runtime.BaseMaterial3D_get_transparency(self)
}
func (self BaseMaterial3D) SetAlphaAntialiasing(alpha_aa BaseMaterial3DAlphaAntiAliasing) {
	self.Runtime.BaseMaterial3D_set_alpha_antialiasing(self, alpha_aa)
}
func (self BaseMaterial3D) GetAlphaAntialiasing() BaseMaterial3DAlphaAntiAliasing {
	return self.Runtime.BaseMaterial3D_get_alpha_antialiasing(self)
}
func (self BaseMaterial3D) SetAlphaAntialiasingEdge(edge Float) {
	self.Runtime.BaseMaterial3D_set_alpha_antialiasing_edge(self, edge)
}
func (self BaseMaterial3D) GetAlphaAntialiasingEdge() Float {
	return self.Runtime.BaseMaterial3D_get_alpha_antialiasing_edge(self)
}
func (self BaseMaterial3D) SetShadingMode(shading_mode BaseMaterial3DShadingMode) {
	self.Runtime.BaseMaterial3D_set_shading_mode(self, shading_mode)
}
func (self BaseMaterial3D) GetShadingMode() BaseMaterial3DShadingMode {
	return self.Runtime.BaseMaterial3D_get_shading_mode(self)
}
func (self BaseMaterial3D) SetSpecular(specular Float) {
	self.Runtime.BaseMaterial3D_set_specular(self, specular)
}
func (self BaseMaterial3D) GetSpecular() Float {
	return self.Runtime.BaseMaterial3D_get_specular(self)
}
func (self BaseMaterial3D) SetMetallic(metallic Float) {
	self.Runtime.BaseMaterial3D_set_metallic(self, metallic)
}
func (self BaseMaterial3D) GetMetallic() Float {
	return self.Runtime.BaseMaterial3D_get_metallic(self)
}
func (self BaseMaterial3D) SetRoughness(roughness Float) {
	self.Runtime.BaseMaterial3D_set_roughness(self, roughness)
}
func (self BaseMaterial3D) GetRoughness() Float {
	return self.Runtime.BaseMaterial3D_get_roughness(self)
}
func (self BaseMaterial3D) SetEmission(emission Color) {
	self.Runtime.BaseMaterial3D_set_emission(self, emission)
}
func (self BaseMaterial3D) GetEmission() Color {
	return self.Runtime.BaseMaterial3D_get_emission(self)
}
func (self BaseMaterial3D) SetEmissionEnergyMultiplier(emission_energy_multiplier Float) {
	self.Runtime.BaseMaterial3D_set_emission_energy_multiplier(self, emission_energy_multiplier)
}
func (self BaseMaterial3D) GetEmissionEnergyMultiplier() Float {
	return self.Runtime.BaseMaterial3D_get_emission_energy_multiplier(self)
}
func (self BaseMaterial3D) SetEmissionIntensity(emission_energy_multiplier Float) {
	self.Runtime.BaseMaterial3D_set_emission_intensity(self, emission_energy_multiplier)
}
func (self BaseMaterial3D) GetEmissionIntensity() Float {
	return self.Runtime.BaseMaterial3D_get_emission_intensity(self)
}
func (self BaseMaterial3D) SetNormalScale(normal_scale Float) {
	self.Runtime.BaseMaterial3D_set_normal_scale(self, normal_scale)
}
func (self BaseMaterial3D) GetNormalScale() Float {
	return self.Runtime.BaseMaterial3D_get_normal_scale(self)
}
func (self BaseMaterial3D) SetRim(rim Float) {
	self.Runtime.BaseMaterial3D_set_rim(self, rim)
}
func (self BaseMaterial3D) GetRim() Float {
	return self.Runtime.BaseMaterial3D_get_rim(self)
}
func (self BaseMaterial3D) SetRimTint(rim_tint Float) {
	self.Runtime.BaseMaterial3D_set_rim_tint(self, rim_tint)
}
func (self BaseMaterial3D) GetRimTint() Float {
	return self.Runtime.BaseMaterial3D_get_rim_tint(self)
}
func (self BaseMaterial3D) SetClearcoat(clearcoat Float) {
	self.Runtime.BaseMaterial3D_set_clearcoat(self, clearcoat)
}
func (self BaseMaterial3D) GetClearcoat() Float {
	return self.Runtime.BaseMaterial3D_get_clearcoat(self)
}
func (self BaseMaterial3D) SetClearcoatRoughness(clearcoat_roughness Float) {
	self.Runtime.BaseMaterial3D_set_clearcoat_roughness(self, clearcoat_roughness)
}
func (self BaseMaterial3D) GetClearcoatRoughness() Float {
	return self.Runtime.BaseMaterial3D_get_clearcoat_roughness(self)
}
func (self BaseMaterial3D) SetAnisotropy(anisotropy Float) {
	self.Runtime.BaseMaterial3D_set_anisotropy(self, anisotropy)
}
func (self BaseMaterial3D) GetAnisotropy() Float {
	return self.Runtime.BaseMaterial3D_get_anisotropy(self)
}
func (self BaseMaterial3D) SetHeightmapScale(heightmap_scale Float) {
	self.Runtime.BaseMaterial3D_set_heightmap_scale(self, heightmap_scale)
}
func (self BaseMaterial3D) GetHeightmapScale() Float {
	return self.Runtime.BaseMaterial3D_get_heightmap_scale(self)
}
func (self BaseMaterial3D) SetSubsurfaceScatteringStrength(strength Float) {
	self.Runtime.BaseMaterial3D_set_subsurface_scattering_strength(self, strength)
}
func (self BaseMaterial3D) GetSubsurfaceScatteringStrength() Float {
	return self.Runtime.BaseMaterial3D_get_subsurface_scattering_strength(self)
}
func (self BaseMaterial3D) SetTransmittanceColor(color Color) {
	self.Runtime.BaseMaterial3D_set_transmittance_color(self, color)
}
func (self BaseMaterial3D) GetTransmittanceColor() Color {
	return self.Runtime.BaseMaterial3D_get_transmittance_color(self)
}
func (self BaseMaterial3D) SetTransmittanceDepth(depth Float) {
	self.Runtime.BaseMaterial3D_set_transmittance_depth(self, depth)
}
func (self BaseMaterial3D) GetTransmittanceDepth() Float {
	return self.Runtime.BaseMaterial3D_get_transmittance_depth(self)
}
func (self BaseMaterial3D) SetTransmittanceBoost(boost Float) {
	self.Runtime.BaseMaterial3D_set_transmittance_boost(self, boost)
}
func (self BaseMaterial3D) GetTransmittanceBoost() Float {
	return self.Runtime.BaseMaterial3D_get_transmittance_boost(self)
}
func (self BaseMaterial3D) SetBacklight(backlight Color) {
	self.Runtime.BaseMaterial3D_set_backlight(self, backlight)
}
func (self BaseMaterial3D) GetBacklight() Color {
	return self.Runtime.BaseMaterial3D_get_backlight(self)
}
func (self BaseMaterial3D) SetRefraction(refraction Float) {
	self.Runtime.BaseMaterial3D_set_refraction(self, refraction)
}
func (self BaseMaterial3D) GetRefraction() Float {
	return self.Runtime.BaseMaterial3D_get_refraction(self)
}
func (self BaseMaterial3D) SetPointSize(point_size Float) {
	self.Runtime.BaseMaterial3D_set_point_size(self, point_size)
}
func (self BaseMaterial3D) GetPointSize() Float {
	return self.Runtime.BaseMaterial3D_get_point_size(self)
}
func (self BaseMaterial3D) SetDetailUv(detail_uv BaseMaterial3DDetailUV) {
	self.Runtime.BaseMaterial3D_set_detail_uv(self, detail_uv)
}
func (self BaseMaterial3D) GetDetailUv() BaseMaterial3DDetailUV {
	return self.Runtime.BaseMaterial3D_get_detail_uv(self)
}
func (self BaseMaterial3D) SetBlendMode(blend_mode BaseMaterial3DBlendMode) {
	self.Runtime.BaseMaterial3D_set_blend_mode(self, blend_mode)
}
func (self BaseMaterial3D) GetBlendMode() BaseMaterial3DBlendMode {
	return self.Runtime.BaseMaterial3D_get_blend_mode(self)
}
func (self BaseMaterial3D) SetDepthDrawMode(depth_draw_mode BaseMaterial3DDepthDrawMode) {
	self.Runtime.BaseMaterial3D_set_depth_draw_mode(self, depth_draw_mode)
}
func (self BaseMaterial3D) GetDepthDrawMode() BaseMaterial3DDepthDrawMode {
	return self.Runtime.BaseMaterial3D_get_depth_draw_mode(self)
}
func (self BaseMaterial3D) SetCullMode(cull_mode BaseMaterial3DCullMode) {
	self.Runtime.BaseMaterial3D_set_cull_mode(self, cull_mode)
}
func (self BaseMaterial3D) GetCullMode() BaseMaterial3DCullMode {
	return self.Runtime.BaseMaterial3D_get_cull_mode(self)
}
func (self BaseMaterial3D) SetDiffuseMode(diffuse_mode BaseMaterial3DDiffuseMode) {
	self.Runtime.BaseMaterial3D_set_diffuse_mode(self, diffuse_mode)
}
func (self BaseMaterial3D) GetDiffuseMode() BaseMaterial3DDiffuseMode {
	return self.Runtime.BaseMaterial3D_get_diffuse_mode(self)
}
func (self BaseMaterial3D) SetSpecularMode(specular_mode BaseMaterial3DSpecularMode) {
	self.Runtime.BaseMaterial3D_set_specular_mode(self, specular_mode)
}
func (self BaseMaterial3D) GetSpecularMode() BaseMaterial3DSpecularMode {
	return self.Runtime.BaseMaterial3D_get_specular_mode(self)
}
func (self BaseMaterial3D) SetFlag(flag BaseMaterial3DFlags, enable bool) {
	self.Runtime.BaseMaterial3D_set_flag(self, flag, enable)
}
func (self BaseMaterial3D) GetFlag(flag BaseMaterial3DFlags) bool {
	return self.Runtime.BaseMaterial3D_get_flag(self, flag)
}
func (self BaseMaterial3D) SetTextureFilter(mode BaseMaterial3DTextureFilter) {
	self.Runtime.BaseMaterial3D_set_texture_filter(self, mode)
}
func (self BaseMaterial3D) GetTextureFilter() BaseMaterial3DTextureFilter {
	return self.Runtime.BaseMaterial3D_get_texture_filter(self)
}
func (self BaseMaterial3D) SetFeature(feature BaseMaterial3DFeature, enable bool) {
	self.Runtime.BaseMaterial3D_set_feature(self, feature, enable)
}
func (self BaseMaterial3D) GetFeature(feature BaseMaterial3DFeature) bool {
	return self.Runtime.BaseMaterial3D_get_feature(self, feature)
}
func (self BaseMaterial3D) SetTexture(param BaseMaterial3DTextureParam, texture Texture2D) {
	self.Runtime.BaseMaterial3D_set_texture(self, param, texture)
}
func (self BaseMaterial3D) GetTexture(param BaseMaterial3DTextureParam) Texture2D {
	return self.Runtime.BaseMaterial3D_get_texture(self, param)
}
func (self BaseMaterial3D) SetDetailBlendMode(detail_blend_mode BaseMaterial3DBlendMode) {
	self.Runtime.BaseMaterial3D_set_detail_blend_mode(self, detail_blend_mode)
}
func (self BaseMaterial3D) GetDetailBlendMode() BaseMaterial3DBlendMode {
	return self.Runtime.BaseMaterial3D_get_detail_blend_mode(self)
}
func (self BaseMaterial3D) SetUv1Scale(scale Vector3) {
	self.Runtime.BaseMaterial3D_set_uv1_scale(self, scale)
}
func (self BaseMaterial3D) GetUv1Scale() Vector3 {
	return self.Runtime.BaseMaterial3D_get_uv1_scale(self)
}
func (self BaseMaterial3D) SetUv1Offset(offset Vector3) {
	self.Runtime.BaseMaterial3D_set_uv1_offset(self, offset)
}
func (self BaseMaterial3D) GetUv1Offset() Vector3 {
	return self.Runtime.BaseMaterial3D_get_uv1_offset(self)
}
func (self BaseMaterial3D) SetUv1TriplanarBlendSharpness(sharpness Float) {
	self.Runtime.BaseMaterial3D_set_uv1_triplanar_blend_sharpness(self, sharpness)
}
func (self BaseMaterial3D) GetUv1TriplanarBlendSharpness() Float {
	return self.Runtime.BaseMaterial3D_get_uv1_triplanar_blend_sharpness(self)
}
func (self BaseMaterial3D) SetUv2Scale(scale Vector3) {
	self.Runtime.BaseMaterial3D_set_uv2_scale(self, scale)
}
func (self BaseMaterial3D) GetUv2Scale() Vector3 {
	return self.Runtime.BaseMaterial3D_get_uv2_scale(self)
}
func (self BaseMaterial3D) SetUv2Offset(offset Vector3) {
	self.Runtime.BaseMaterial3D_set_uv2_offset(self, offset)
}
func (self BaseMaterial3D) GetUv2Offset() Vector3 {
	return self.Runtime.BaseMaterial3D_get_uv2_offset(self)
}
func (self BaseMaterial3D) SetUv2TriplanarBlendSharpness(sharpness Float) {
	self.Runtime.BaseMaterial3D_set_uv2_triplanar_blend_sharpness(self, sharpness)
}
func (self BaseMaterial3D) GetUv2TriplanarBlendSharpness() Float {
	return self.Runtime.BaseMaterial3D_get_uv2_triplanar_blend_sharpness(self)
}
func (self BaseMaterial3D) SetBillboardMode(mode BaseMaterial3DBillboardMode) {
	self.Runtime.BaseMaterial3D_set_billboard_mode(self, mode)
}
func (self BaseMaterial3D) GetBillboardMode() BaseMaterial3DBillboardMode {
	return self.Runtime.BaseMaterial3D_get_billboard_mode(self)
}
func (self BaseMaterial3D) SetParticlesAnimHFrames(frames int64) {
	self.Runtime.BaseMaterial3D_set_particles_anim_h_frames(self, frames)
}
func (self BaseMaterial3D) GetParticlesAnimHFrames() int64 {
	return self.Runtime.BaseMaterial3D_get_particles_anim_h_frames(self)
}
func (self BaseMaterial3D) SetParticlesAnimVFrames(frames int64) {
	self.Runtime.BaseMaterial3D_set_particles_anim_v_frames(self, frames)
}
func (self BaseMaterial3D) GetParticlesAnimVFrames() int64 {
	return self.Runtime.BaseMaterial3D_get_particles_anim_v_frames(self)
}
func (self BaseMaterial3D) SetParticlesAnimLoop(loop bool) {
	self.Runtime.BaseMaterial3D_set_particles_anim_loop(self, loop)
}
func (self BaseMaterial3D) GetParticlesAnimLoop() bool {
	return self.Runtime.BaseMaterial3D_get_particles_anim_loop(self)
}
func (self BaseMaterial3D) SetHeightmapDeepParallax(enable bool) {
	self.Runtime.BaseMaterial3D_set_heightmap_deep_parallax(self, enable)
}
func (self BaseMaterial3D) IsHeightmapDeepParallaxEnabled() bool {
	return self.Runtime.BaseMaterial3D_is_heightmap_deep_parallax_enabled(self)
}
func (self BaseMaterial3D) SetHeightmapDeepParallaxMinLayers(layer int64) {
	self.Runtime.BaseMaterial3D_set_heightmap_deep_parallax_min_layers(self, layer)
}
func (self BaseMaterial3D) GetHeightmapDeepParallaxMinLayers() int64 {
	return self.Runtime.BaseMaterial3D_get_heightmap_deep_parallax_min_layers(self)
}
func (self BaseMaterial3D) SetHeightmapDeepParallaxMaxLayers(layer int64) {
	self.Runtime.BaseMaterial3D_set_heightmap_deep_parallax_max_layers(self, layer)
}
func (self BaseMaterial3D) GetHeightmapDeepParallaxMaxLayers() int64 {
	return self.Runtime.BaseMaterial3D_get_heightmap_deep_parallax_max_layers(self)
}
func (self BaseMaterial3D) SetHeightmapDeepParallaxFlipTangent(flip bool) {
	self.Runtime.BaseMaterial3D_set_heightmap_deep_parallax_flip_tangent(self, flip)
}
func (self BaseMaterial3D) GetHeightmapDeepParallaxFlipTangent() bool {
	return self.Runtime.BaseMaterial3D_get_heightmap_deep_parallax_flip_tangent(self)
}
func (self BaseMaterial3D) SetHeightmapDeepParallaxFlipBinormal(flip bool) {
	self.Runtime.BaseMaterial3D_set_heightmap_deep_parallax_flip_binormal(self, flip)
}
func (self BaseMaterial3D) GetHeightmapDeepParallaxFlipBinormal() bool {
	return self.Runtime.BaseMaterial3D_get_heightmap_deep_parallax_flip_binormal(self)
}
func (self BaseMaterial3D) SetGrow(amount Float) {
	self.Runtime.BaseMaterial3D_set_grow(self, amount)
}
func (self BaseMaterial3D) GetGrow() Float {
	return self.Runtime.BaseMaterial3D_get_grow(self)
}
func (self BaseMaterial3D) SetEmissionOperator(operator BaseMaterial3DEmissionOperator) {
	self.Runtime.BaseMaterial3D_set_emission_operator(self, operator)
}
func (self BaseMaterial3D) GetEmissionOperator() BaseMaterial3DEmissionOperator {
	return self.Runtime.BaseMaterial3D_get_emission_operator(self)
}
func (self BaseMaterial3D) SetAoLightAffect(amount Float) {
	self.Runtime.BaseMaterial3D_set_ao_light_affect(self, amount)
}
func (self BaseMaterial3D) GetAoLightAffect() Float {
	return self.Runtime.BaseMaterial3D_get_ao_light_affect(self)
}
func (self BaseMaterial3D) SetAlphaScissorThreshold(threshold Float) {
	self.Runtime.BaseMaterial3D_set_alpha_scissor_threshold(self, threshold)
}
func (self BaseMaterial3D) GetAlphaScissorThreshold() Float {
	return self.Runtime.BaseMaterial3D_get_alpha_scissor_threshold(self)
}
func (self BaseMaterial3D) SetAlphaHashScale(threshold Float) {
	self.Runtime.BaseMaterial3D_set_alpha_hash_scale(self, threshold)
}
func (self BaseMaterial3D) GetAlphaHashScale() Float {
	return self.Runtime.BaseMaterial3D_get_alpha_hash_scale(self)
}
func (self BaseMaterial3D) SetGrowEnabled(enable bool) {
	self.Runtime.BaseMaterial3D_set_grow_enabled(self, enable)
}
func (self BaseMaterial3D) IsGrowEnabled() bool {
	return self.Runtime.BaseMaterial3D_is_grow_enabled(self)
}
func (self BaseMaterial3D) SetMetallicTextureChannel(channel BaseMaterial3DTextureChannel) {
	self.Runtime.BaseMaterial3D_set_metallic_texture_channel(self, channel)
}
func (self BaseMaterial3D) GetMetallicTextureChannel() BaseMaterial3DTextureChannel {
	return self.Runtime.BaseMaterial3D_get_metallic_texture_channel(self)
}
func (self BaseMaterial3D) SetRoughnessTextureChannel(channel BaseMaterial3DTextureChannel) {
	self.Runtime.BaseMaterial3D_set_roughness_texture_channel(self, channel)
}
func (self BaseMaterial3D) GetRoughnessTextureChannel() BaseMaterial3DTextureChannel {
	return self.Runtime.BaseMaterial3D_get_roughness_texture_channel(self)
}
func (self BaseMaterial3D) SetAoTextureChannel(channel BaseMaterial3DTextureChannel) {
	self.Runtime.BaseMaterial3D_set_ao_texture_channel(self, channel)
}
func (self BaseMaterial3D) GetAoTextureChannel() BaseMaterial3DTextureChannel {
	return self.Runtime.BaseMaterial3D_get_ao_texture_channel(self)
}
func (self BaseMaterial3D) SetRefractionTextureChannel(channel BaseMaterial3DTextureChannel) {
	self.Runtime.BaseMaterial3D_set_refraction_texture_channel(self, channel)
}
func (self BaseMaterial3D) GetRefractionTextureChannel() BaseMaterial3DTextureChannel {
	return self.Runtime.BaseMaterial3D_get_refraction_texture_channel(self)
}
func (self BaseMaterial3D) SetProximityFadeEnabled(enabled bool) {
	self.Runtime.BaseMaterial3D_set_proximity_fade_enabled(self, enabled)
}
func (self BaseMaterial3D) IsProximityFadeEnabled() bool {
	return self.Runtime.BaseMaterial3D_is_proximity_fade_enabled(self)
}
func (self BaseMaterial3D) SetProximityFadeDistance(distance Float) {
	self.Runtime.BaseMaterial3D_set_proximity_fade_distance(self, distance)
}
func (self BaseMaterial3D) GetProximityFadeDistance() Float {
	return self.Runtime.BaseMaterial3D_get_proximity_fade_distance(self)
}
func (self BaseMaterial3D) SetMsdfPixelRange(arange Float) {
	self.Runtime.BaseMaterial3D_set_msdf_pixel_range(self, arange)
}
func (self BaseMaterial3D) GetMsdfPixelRange() Float {
	return self.Runtime.BaseMaterial3D_get_msdf_pixel_range(self)
}
func (self BaseMaterial3D) SetMsdfOutlineSize(size Float) {
	self.Runtime.BaseMaterial3D_set_msdf_outline_size(self, size)
}
func (self BaseMaterial3D) GetMsdfOutlineSize() Float {
	return self.Runtime.BaseMaterial3D_get_msdf_outline_size(self)
}
func (self BaseMaterial3D) SetDistanceFade(mode BaseMaterial3DDistanceFadeMode) {
	self.Runtime.BaseMaterial3D_set_distance_fade(self, mode)
}
func (self BaseMaterial3D) GetDistanceFade() BaseMaterial3DDistanceFadeMode {
	return self.Runtime.BaseMaterial3D_get_distance_fade(self)
}
func (self BaseMaterial3D) SetDistanceFadeMaxDistance(distance Float) {
	self.Runtime.BaseMaterial3D_set_distance_fade_max_distance(self, distance)
}
func (self BaseMaterial3D) GetDistanceFadeMaxDistance() Float {
	return self.Runtime.BaseMaterial3D_get_distance_fade_max_distance(self)
}
func (self BaseMaterial3D) SetDistanceFadeMinDistance(distance Float) {
	self.Runtime.BaseMaterial3D_set_distance_fade_min_distance(self, distance)
}
func (self BaseMaterial3D) GetDistanceFadeMinDistance() Float {
	return self.Runtime.BaseMaterial3D_get_distance_fade_min_distance(self)
}

type extendsBitMap struct {
	_ [0]*extendsBitMap
	class
}

func (self BitMap) Resource() Resource { var parent Resource; parent.class = self.class; return parent }
func (self BitMap) Create(size Vector2i) {
	self.Runtime.BitMap_create(self, size)
}
func (self BitMap) CreateFromImageAlpha(image Image, threshold Float) {
	self.Runtime.BitMap_create_from_image_alpha(self, image, threshold)
}
func (self BitMap) SetBitv(position Vector2i, bit bool) {
	self.Runtime.BitMap_set_bitv(self, position, bit)
}
func (self BitMap) SetBit(x int64, y int64, bit bool) {
	self.Runtime.BitMap_set_bit(self, x, y, bit)
}
func (self BitMap) GetBitv(position Vector2i) bool {
	return self.Runtime.BitMap_get_bitv(self, position)
}
func (self BitMap) GetBit(x int64, y int64) bool {
	return self.Runtime.BitMap_get_bit(self, x, y)
}
func (self BitMap) SetBitRect(rect Rect2i, bit bool) {
	self.Runtime.BitMap_set_bit_rect(self, rect, bit)
}
func (self BitMap) GetTrueBitCount() int64 {
	return self.Runtime.BitMap_get_true_bit_count(self)
}
func (self BitMap) GetSize() Vector2i {
	return self.Runtime.BitMap_get_size(self)
}
func (self BitMap) Resize(new_size Vector2i) {
	self.Runtime.BitMap_resize(self, new_size)
}
func (self BitMap) GrowMask(pixels int64, rect Rect2i) {
	self.Runtime.BitMap_grow_mask(self, pixels, rect)
}
func (self BitMap) ConvertToImage() Image {
	return self.Runtime.BitMap_convert_to_image(self)
}
func (self BitMap) OpaqueToPolygons(rect Rect2i, epsilon Float) ArrayOf[PackedVector2Array] {
	return self.Runtime.BitMap_opaque_to_polygons(self, rect, epsilon)
}

type extendsBone2D struct {
	_ [0]*extendsBone2D
	class
}

func (self Bone2D) Node2D() Node2D { var parent Node2D; parent.class = self.class; return parent }
func (self Bone2D) SetRest(rest Transform2D) {
	self.Runtime.Bone2D_set_rest(self, rest)
}
func (self Bone2D) GetRest() Transform2D {
	return self.Runtime.Bone2D_get_rest(self)
}
func (self Bone2D) ApplyRest() {
	self.Runtime.Bone2D_apply_rest(self)
}
func (self Bone2D) GetSkeletonRest() Transform2D {
	return self.Runtime.Bone2D_get_skeleton_rest(self)
}
func (self Bone2D) GetIndexInSkeleton() int64 {
	return self.Runtime.Bone2D_get_index_in_skeleton(self)
}
func (self Bone2D) SetAutocalculateLengthAndAngle(auto_calculate bool) {
	self.Runtime.Bone2D_set_autocalculate_length_and_angle(self, auto_calculate)
}
func (self Bone2D) GetAutocalculateLengthAndAngle() bool {
	return self.Runtime.Bone2D_get_autocalculate_length_and_angle(self)
}
func (self Bone2D) SetLength(length Float) {
	self.Runtime.Bone2D_set_length(self, length)
}
func (self Bone2D) GetLength() Float {
	return self.Runtime.Bone2D_get_length(self)
}
func (self Bone2D) SetBoneAngle(angle Float) {
	self.Runtime.Bone2D_set_bone_angle(self, angle)
}
func (self Bone2D) GetBoneAngle() Float {
	return self.Runtime.Bone2D_get_bone_angle(self)
}

type extendsBoneAttachment3D struct {
	_ [0]*extendsBoneAttachment3D
	class
}

func (self BoneAttachment3D) Node3D() Node3D {
	var parent Node3D
	parent.class = self.class
	return parent
}
func (self BoneAttachment3D) SetBoneName(bone_name string) {
	self.Runtime.BoneAttachment3D_set_bone_name(self, bone_name)
}
func (self BoneAttachment3D) GetBoneName() string {
	return self.Runtime.BoneAttachment3D_get_bone_name(self)
}
func (self BoneAttachment3D) SetBoneIdx(bone_idx int64) {
	self.Runtime.BoneAttachment3D_set_bone_idx(self, bone_idx)
}
func (self BoneAttachment3D) GetBoneIdx() int64 {
	return self.Runtime.BoneAttachment3D_get_bone_idx(self)
}
func (self BoneAttachment3D) OnBonePoseUpdate(bone_index int64) {
	self.Runtime.BoneAttachment3D_on_bone_pose_update(self, bone_index)
}
func (self BoneAttachment3D) SetOverridePose(override_pose bool) {
	self.Runtime.BoneAttachment3D_set_override_pose(self, override_pose)
}
func (self BoneAttachment3D) GetOverridePose() bool {
	return self.Runtime.BoneAttachment3D_get_override_pose(self)
}
func (self BoneAttachment3D) SetUseExternalSkeleton(use_external_skeleton bool) {
	self.Runtime.BoneAttachment3D_set_use_external_skeleton(self, use_external_skeleton)
}
func (self BoneAttachment3D) GetUseExternalSkeleton() bool {
	return self.Runtime.BoneAttachment3D_get_use_external_skeleton(self)
}
func (self BoneAttachment3D) SetExternalSkeleton(external_skeleton NodePath) {
	self.Runtime.BoneAttachment3D_set_external_skeleton(self, external_skeleton)
}
func (self BoneAttachment3D) GetExternalSkeleton() NodePath {
	return self.Runtime.BoneAttachment3D_get_external_skeleton(self)
}

type extendsBoneMap struct {
	_ [0]*extendsBoneMap
	class
}

func (self BoneMap) Resource() Resource {
	var parent Resource
	parent.class = self.class
	return parent
}
func (self BoneMap) GetProfile() SkeletonProfile {
	return self.Runtime.BoneMap_get_profile(self)
}
func (self BoneMap) SetProfile(profile SkeletonProfile) {
	self.Runtime.BoneMap_set_profile(self, profile)
}
func (self BoneMap) GetSkeletonBoneName(profile_bone_name string) string {
	return self.Runtime.BoneMap_get_skeleton_bone_name(self, profile_bone_name)
}
func (self BoneMap) SetSkeletonBoneName(profile_bone_name string, skeleton_bone_name string) {
	self.Runtime.BoneMap_set_skeleton_bone_name(self, profile_bone_name, skeleton_bone_name)
}
func (self BoneMap) FindProfileBoneName(skeleton_bone_name string) string {
	return self.Runtime.BoneMap_find_profile_bone_name(self, skeleton_bone_name)
}

type extendsBoxContainer struct {
	_ [0]*extendsBoxContainer
	class
}

func (self BoxContainer) Container() Container {
	var parent Container
	parent.class = self.class
	return parent
}
func (self BoxContainer) AddSpacer(begin bool) Control {
	return self.Runtime.BoxContainer_add_spacer(self, begin)
}
func (self BoxContainer) SetAlignment(alignment BoxContainerAlignmentMode) {
	self.Runtime.BoxContainer_set_alignment(self, alignment)
}
func (self BoxContainer) GetAlignment() BoxContainerAlignmentMode {
	return self.Runtime.BoxContainer_get_alignment(self)
}
func (self BoxContainer) SetVertical(vertical bool) {
	self.Runtime.BoxContainer_set_vertical(self, vertical)
}
func (self BoxContainer) IsVertical() bool {
	return self.Runtime.BoxContainer_is_vertical(self)
}

type extendsBoxMesh struct {
	_ [0]*extendsBoxMesh
	class
}

func (self BoxMesh) PrimitiveMesh() PrimitiveMesh {
	var parent PrimitiveMesh
	parent.class = self.class
	return parent
}
func (self BoxMesh) SetSize(size Vector3) {
	self.Runtime.BoxMesh_set_size(self, size)
}
func (self BoxMesh) GetSize() Vector3 {
	return self.Runtime.BoxMesh_get_size(self)
}
func (self BoxMesh) SetSubdivideWidth(subdivide int64) {
	self.Runtime.BoxMesh_set_subdivide_width(self, subdivide)
}
func (self BoxMesh) GetSubdivideWidth() int64 {
	return self.Runtime.BoxMesh_get_subdivide_width(self)
}
func (self BoxMesh) SetSubdivideHeight(divisions int64) {
	self.Runtime.BoxMesh_set_subdivide_height(self, divisions)
}
func (self BoxMesh) GetSubdivideHeight() int64 {
	return self.Runtime.BoxMesh_get_subdivide_height(self)
}
func (self BoxMesh) SetSubdivideDepth(divisions int64) {
	self.Runtime.BoxMesh_set_subdivide_depth(self, divisions)
}
func (self BoxMesh) GetSubdivideDepth() int64 {
	return self.Runtime.BoxMesh_get_subdivide_depth(self)
}

type extendsBoxOccluder3D struct {
	_ [0]*extendsBoxOccluder3D
	class
}

func (self BoxOccluder3D) Occluder3D() Occluder3D {
	var parent Occluder3D
	parent.class = self.class
	return parent
}
func (self BoxOccluder3D) SetSize(size Vector3) {
	self.Runtime.BoxOccluder3D_set_size(self, size)
}
func (self BoxOccluder3D) GetSize() Vector3 {
	return self.Runtime.BoxOccluder3D_get_size(self)
}

type extendsBoxShape3D struct {
	_ [0]*extendsBoxShape3D
	class
}

func (self BoxShape3D) Shape3D() Shape3D {
	var parent Shape3D
	parent.class = self.class
	return parent
}
func (self BoxShape3D) SetSize(size Vector3) {
	self.Runtime.BoxShape3D_set_size(self, size)
}
func (self BoxShape3D) GetSize() Vector3 {
	return self.Runtime.BoxShape3D_get_size(self)
}

type extendsButton struct {
	_ [0]*extendsButton
	class
}

func (self Button) BaseButton() BaseButton {
	var parent BaseButton
	parent.class = self.class
	return parent
}
func (self Button) SetText(text string) {
	self.Runtime.Button_set_text(self, text)
}
func (self Button) GetText() string {
	return self.Runtime.Button_get_text(self)
}
func (self Button) SetTextOverrunBehavior(overrun_behavior TextServerOverrunBehavior) {
	self.Runtime.Button_set_text_overrun_behavior(self, overrun_behavior)
}
func (self Button) GetTextOverrunBehavior() TextServerOverrunBehavior {
	return self.Runtime.Button_get_text_overrun_behavior(self)
}
func (self Button) SetTextDirection(direction ControlTextDirection) {
	self.Runtime.Button_set_text_direction(self, direction)
}
func (self Button) GetTextDirection() ControlTextDirection {
	return self.Runtime.Button_get_text_direction(self)
}
func (self Button) SetLanguage(language string) {
	self.Runtime.Button_set_language(self, language)
}
func (self Button) GetLanguage() string {
	return self.Runtime.Button_get_language(self)
}
func (self Button) SetButtonIcon(texture Texture2D) {
	self.Runtime.Button_set_button_icon(self, texture)
}
func (self Button) GetButtonIcon() Texture2D {
	return self.Runtime.Button_get_button_icon(self)
}
func (self Button) SetFlat(enabled bool) {
	self.Runtime.Button_set_flat(self, enabled)
}
func (self Button) IsFlat() bool {
	return self.Runtime.Button_is_flat(self)
}
func (self Button) SetClipText(enabled bool) {
	self.Runtime.Button_set_clip_text(self, enabled)
}
func (self Button) GetClipText() bool {
	return self.Runtime.Button_get_clip_text(self)
}
func (self Button) SetTextAlignment(alignment HorizontalAlignment) {
	self.Runtime.Button_set_text_alignment(self, alignment)
}
func (self Button) GetTextAlignment() HorizontalAlignment {
	return self.Runtime.Button_get_text_alignment(self)
}
func (self Button) SetIconAlignment(icon_alignment HorizontalAlignment) {
	self.Runtime.Button_set_icon_alignment(self, icon_alignment)
}
func (self Button) GetIconAlignment() HorizontalAlignment {
	return self.Runtime.Button_get_icon_alignment(self)
}
func (self Button) SetVerticalIconAlignment(vertical_icon_alignment VerticalAlignment) {
	self.Runtime.Button_set_vertical_icon_alignment(self, vertical_icon_alignment)
}
func (self Button) GetVerticalIconAlignment() VerticalAlignment {
	return self.Runtime.Button_get_vertical_icon_alignment(self)
}
func (self Button) SetExpandIcon(enabled bool) {
	self.Runtime.Button_set_expand_icon(self, enabled)
}
func (self Button) IsExpandIcon() bool {
	return self.Runtime.Button_is_expand_icon(self)
}

type extendsButtonGroup struct {
	_ [0]*extendsButtonGroup
	class
}

func (self ButtonGroup) Resource() Resource {
	var parent Resource
	parent.class = self.class
	return parent
}
func (self ButtonGroup) GetPressedButton() BaseButton {
	return self.Runtime.ButtonGroup_get_pressed_button(self)
}
func (self ButtonGroup) GetButtons() ArrayOf[BaseButton] {
	return self.Runtime.ButtonGroup_get_buttons(self)
}
func (self ButtonGroup) SetAllowUnpress(enabled bool) {
	self.Runtime.ButtonGroup_set_allow_unpress(self, enabled)
}
func (self ButtonGroup) IsAllowUnpress() bool {
	return self.Runtime.ButtonGroup_is_allow_unpress(self)
}

type extendsCPUParticles2D struct {
	_ [0]*extendsCPUParticles2D
	class
}

func (self CPUParticles2D) Node2D() Node2D {
	var parent Node2D
	parent.class = self.class
	return parent
}
func (self CPUParticles2D) SetEmitting(emitting bool) {
	self.Runtime.CPUParticles2D_set_emitting(self, emitting)
}
func (self CPUParticles2D) SetAmount(amount int64) {
	self.Runtime.CPUParticles2D_set_amount(self, amount)
}
func (self CPUParticles2D) SetLifetime(secs Float) {
	self.Runtime.CPUParticles2D_set_lifetime(self, secs)
}
func (self CPUParticles2D) SetOneShot(enable bool) {
	self.Runtime.CPUParticles2D_set_one_shot(self, enable)
}
func (self CPUParticles2D) SetPreProcessTime(secs Float) {
	self.Runtime.CPUParticles2D_set_pre_process_time(self, secs)
}
func (self CPUParticles2D) SetExplosivenessRatio(ratio Float) {
	self.Runtime.CPUParticles2D_set_explosiveness_ratio(self, ratio)
}
func (self CPUParticles2D) SetRandomnessRatio(ratio Float) {
	self.Runtime.CPUParticles2D_set_randomness_ratio(self, ratio)
}
func (self CPUParticles2D) SetLifetimeRandomness(random Float) {
	self.Runtime.CPUParticles2D_set_lifetime_randomness(self, random)
}
func (self CPUParticles2D) SetUseLocalCoordinates(enable bool) {
	self.Runtime.CPUParticles2D_set_use_local_coordinates(self, enable)
}
func (self CPUParticles2D) SetFixedFps(fps int64) {
	self.Runtime.CPUParticles2D_set_fixed_fps(self, fps)
}
func (self CPUParticles2D) SetFractionalDelta(enable bool) {
	self.Runtime.CPUParticles2D_set_fractional_delta(self, enable)
}
func (self CPUParticles2D) SetSpeedScale(scale Float) {
	self.Runtime.CPUParticles2D_set_speed_scale(self, scale)
}
func (self CPUParticles2D) IsEmitting() bool {
	return self.Runtime.CPUParticles2D_is_emitting(self)
}
func (self CPUParticles2D) GetAmount() int64 {
	return self.Runtime.CPUParticles2D_get_amount(self)
}
func (self CPUParticles2D) GetLifetime() Float {
	return self.Runtime.CPUParticles2D_get_lifetime(self)
}
func (self CPUParticles2D) GetOneShot() bool {
	return self.Runtime.CPUParticles2D_get_one_shot(self)
}
func (self CPUParticles2D) GetPreProcessTime() Float {
	return self.Runtime.CPUParticles2D_get_pre_process_time(self)
}
func (self CPUParticles2D) GetExplosivenessRatio() Float {
	return self.Runtime.CPUParticles2D_get_explosiveness_ratio(self)
}
func (self CPUParticles2D) GetRandomnessRatio() Float {
	return self.Runtime.CPUParticles2D_get_randomness_ratio(self)
}
func (self CPUParticles2D) GetLifetimeRandomness() Float {
	return self.Runtime.CPUParticles2D_get_lifetime_randomness(self)
}
func (self CPUParticles2D) GetUseLocalCoordinates() bool {
	return self.Runtime.CPUParticles2D_get_use_local_coordinates(self)
}
func (self CPUParticles2D) GetFixedFps() int64 {
	return self.Runtime.CPUParticles2D_get_fixed_fps(self)
}
func (self CPUParticles2D) GetFractionalDelta() bool {
	return self.Runtime.CPUParticles2D_get_fractional_delta(self)
}
func (self CPUParticles2D) GetSpeedScale() Float {
	return self.Runtime.CPUParticles2D_get_speed_scale(self)
}
func (self CPUParticles2D) SetDrawOrder(order CPUParticles2DDrawOrder) {
	self.Runtime.CPUParticles2D_set_draw_order(self, order)
}
func (self CPUParticles2D) GetDrawOrder() CPUParticles2DDrawOrder {
	return self.Runtime.CPUParticles2D_get_draw_order(self)
}
func (self CPUParticles2D) SetTexture(texture Texture2D) {
	self.Runtime.CPUParticles2D_set_texture(self, texture)
}
func (self CPUParticles2D) GetTexture() Texture2D {
	return self.Runtime.CPUParticles2D_get_texture(self)
}
func (self CPUParticles2D) Restart() {
	self.Runtime.CPUParticles2D_restart(self)
}
func (self CPUParticles2D) SetDirection(direction Vector2) {
	self.Runtime.CPUParticles2D_set_direction(self, direction)
}
func (self CPUParticles2D) GetDirection() Vector2 {
	return self.Runtime.CPUParticles2D_get_direction(self)
}
func (self CPUParticles2D) SetSpread(spread Float) {
	self.Runtime.CPUParticles2D_set_spread(self, spread)
}
func (self CPUParticles2D) GetSpread() Float {
	return self.Runtime.CPUParticles2D_get_spread(self)
}
func (self CPUParticles2D) SetParamMin(param CPUParticles2DParameter, value Float) {
	self.Runtime.CPUParticles2D_set_param_min(self, param, value)
}
func (self CPUParticles2D) GetParamMin(param CPUParticles2DParameter) Float {
	return self.Runtime.CPUParticles2D_get_param_min(self, param)
}
func (self CPUParticles2D) SetParamMax(param CPUParticles2DParameter, value Float) {
	self.Runtime.CPUParticles2D_set_param_max(self, param, value)
}
func (self CPUParticles2D) GetParamMax(param CPUParticles2DParameter) Float {
	return self.Runtime.CPUParticles2D_get_param_max(self, param)
}
func (self CPUParticles2D) SetParamCurve(param CPUParticles2DParameter, curve Curve) {
	self.Runtime.CPUParticles2D_set_param_curve(self, param, curve)
}
func (self CPUParticles2D) GetParamCurve(param CPUParticles2DParameter) Curve {
	return self.Runtime.CPUParticles2D_get_param_curve(self, param)
}
func (self CPUParticles2D) SetColor(color Color) {
	self.Runtime.CPUParticles2D_set_color(self, color)
}
func (self CPUParticles2D) GetColor() Color {
	return self.Runtime.CPUParticles2D_get_color(self)
}
func (self CPUParticles2D) SetColorRamp(ramp Gradient) {
	self.Runtime.CPUParticles2D_set_color_ramp(self, ramp)
}
func (self CPUParticles2D) GetColorRamp() Gradient {
	return self.Runtime.CPUParticles2D_get_color_ramp(self)
}
func (self CPUParticles2D) SetColorInitialRamp(ramp Gradient) {
	self.Runtime.CPUParticles2D_set_color_initial_ramp(self, ramp)
}
func (self CPUParticles2D) GetColorInitialRamp() Gradient {
	return self.Runtime.CPUParticles2D_get_color_initial_ramp(self)
}
func (self CPUParticles2D) SetParticleFlag(particle_flag CPUParticles2DParticleFlags, enable bool) {
	self.Runtime.CPUParticles2D_set_particle_flag(self, particle_flag, enable)
}
func (self CPUParticles2D) GetParticleFlag(particle_flag CPUParticles2DParticleFlags) bool {
	return self.Runtime.CPUParticles2D_get_particle_flag(self, particle_flag)
}
func (self CPUParticles2D) SetEmissionShape(shape CPUParticles2DEmissionShape) {
	self.Runtime.CPUParticles2D_set_emission_shape(self, shape)
}
func (self CPUParticles2D) GetEmissionShape() CPUParticles2DEmissionShape {
	return self.Runtime.CPUParticles2D_get_emission_shape(self)
}
func (self CPUParticles2D) SetEmissionSphereRadius(radius Float) {
	self.Runtime.CPUParticles2D_set_emission_sphere_radius(self, radius)
}
func (self CPUParticles2D) GetEmissionSphereRadius() Float {
	return self.Runtime.CPUParticles2D_get_emission_sphere_radius(self)
}
func (self CPUParticles2D) SetEmissionRectExtents(extents Vector2) {
	self.Runtime.CPUParticles2D_set_emission_rect_extents(self, extents)
}
func (self CPUParticles2D) GetEmissionRectExtents() Vector2 {
	return self.Runtime.CPUParticles2D_get_emission_rect_extents(self)
}
func (self CPUParticles2D) SetEmissionPoints(array PackedVector2Array) {
	self.Runtime.CPUParticles2D_set_emission_points(self, array)
}
func (self CPUParticles2D) GetEmissionPoints() PackedVector2Array {
	return self.Runtime.CPUParticles2D_get_emission_points(self)
}
func (self CPUParticles2D) SetEmissionNormals(array PackedVector2Array) {
	self.Runtime.CPUParticles2D_set_emission_normals(self, array)
}
func (self CPUParticles2D) GetEmissionNormals() PackedVector2Array {
	return self.Runtime.CPUParticles2D_get_emission_normals(self)
}
func (self CPUParticles2D) SetEmissionColors(array PackedColorArray) {
	self.Runtime.CPUParticles2D_set_emission_colors(self, array)
}
func (self CPUParticles2D) GetEmissionColors() PackedColorArray {
	return self.Runtime.CPUParticles2D_get_emission_colors(self)
}
func (self CPUParticles2D) GetGravity() Vector2 {
	return self.Runtime.CPUParticles2D_get_gravity(self)
}
func (self CPUParticles2D) SetGravity(accel_vec Vector2) {
	self.Runtime.CPUParticles2D_set_gravity(self, accel_vec)
}
func (self CPUParticles2D) GetSplitScale() bool {
	return self.Runtime.CPUParticles2D_get_split_scale(self)
}
func (self CPUParticles2D) SetSplitScale(split_scale bool) {
	self.Runtime.CPUParticles2D_set_split_scale(self, split_scale)
}
func (self CPUParticles2D) GetScaleCurveX() Curve {
	return self.Runtime.CPUParticles2D_get_scale_curve_x(self)
}
func (self CPUParticles2D) SetScaleCurveX(scale_curve Curve) {
	self.Runtime.CPUParticles2D_set_scale_curve_x(self, scale_curve)
}
func (self CPUParticles2D) GetScaleCurveY() Curve {
	return self.Runtime.CPUParticles2D_get_scale_curve_y(self)
}
func (self CPUParticles2D) SetScaleCurveY(scale_curve Curve) {
	self.Runtime.CPUParticles2D_set_scale_curve_y(self, scale_curve)
}
func (self CPUParticles2D) ConvertFromParticles(particles Node) {
	self.Runtime.CPUParticles2D_convert_from_particles(self, particles)
}

type extendsCPUParticles3D struct {
	_ [0]*extendsCPUParticles3D
	class
}

func (self CPUParticles3D) GeometryInstance3D() GeometryInstance3D {
	var parent GeometryInstance3D
	parent.class = self.class
	return parent
}
func (self CPUParticles3D) SetEmitting(emitting bool) {
	self.Runtime.CPUParticles3D_set_emitting(self, emitting)
}
func (self CPUParticles3D) SetAmount(amount int64) {
	self.Runtime.CPUParticles3D_set_amount(self, amount)
}
func (self CPUParticles3D) SetLifetime(secs Float) {
	self.Runtime.CPUParticles3D_set_lifetime(self, secs)
}
func (self CPUParticles3D) SetOneShot(enable bool) {
	self.Runtime.CPUParticles3D_set_one_shot(self, enable)
}
func (self CPUParticles3D) SetPreProcessTime(secs Float) {
	self.Runtime.CPUParticles3D_set_pre_process_time(self, secs)
}
func (self CPUParticles3D) SetExplosivenessRatio(ratio Float) {
	self.Runtime.CPUParticles3D_set_explosiveness_ratio(self, ratio)
}
func (self CPUParticles3D) SetRandomnessRatio(ratio Float) {
	self.Runtime.CPUParticles3D_set_randomness_ratio(self, ratio)
}
func (self CPUParticles3D) SetLifetimeRandomness(random Float) {
	self.Runtime.CPUParticles3D_set_lifetime_randomness(self, random)
}
func (self CPUParticles3D) SetUseLocalCoordinates(enable bool) {
	self.Runtime.CPUParticles3D_set_use_local_coordinates(self, enable)
}
func (self CPUParticles3D) SetFixedFps(fps int64) {
	self.Runtime.CPUParticles3D_set_fixed_fps(self, fps)
}
func (self CPUParticles3D) SetFractionalDelta(enable bool) {
	self.Runtime.CPUParticles3D_set_fractional_delta(self, enable)
}
func (self CPUParticles3D) SetSpeedScale(scale Float) {
	self.Runtime.CPUParticles3D_set_speed_scale(self, scale)
}
func (self CPUParticles3D) IsEmitting() bool {
	return self.Runtime.CPUParticles3D_is_emitting(self)
}
func (self CPUParticles3D) GetAmount() int64 {
	return self.Runtime.CPUParticles3D_get_amount(self)
}
func (self CPUParticles3D) GetLifetime() Float {
	return self.Runtime.CPUParticles3D_get_lifetime(self)
}
func (self CPUParticles3D) GetOneShot() bool {
	return self.Runtime.CPUParticles3D_get_one_shot(self)
}
func (self CPUParticles3D) GetPreProcessTime() Float {
	return self.Runtime.CPUParticles3D_get_pre_process_time(self)
}
func (self CPUParticles3D) GetExplosivenessRatio() Float {
	return self.Runtime.CPUParticles3D_get_explosiveness_ratio(self)
}
func (self CPUParticles3D) GetRandomnessRatio() Float {
	return self.Runtime.CPUParticles3D_get_randomness_ratio(self)
}
func (self CPUParticles3D) GetLifetimeRandomness() Float {
	return self.Runtime.CPUParticles3D_get_lifetime_randomness(self)
}
func (self CPUParticles3D) GetUseLocalCoordinates() bool {
	return self.Runtime.CPUParticles3D_get_use_local_coordinates(self)
}
func (self CPUParticles3D) GetFixedFps() int64 {
	return self.Runtime.CPUParticles3D_get_fixed_fps(self)
}
func (self CPUParticles3D) GetFractionalDelta() bool {
	return self.Runtime.CPUParticles3D_get_fractional_delta(self)
}
func (self CPUParticles3D) GetSpeedScale() Float {
	return self.Runtime.CPUParticles3D_get_speed_scale(self)
}
func (self CPUParticles3D) SetDrawOrder(order CPUParticles3DDrawOrder) {
	self.Runtime.CPUParticles3D_set_draw_order(self, order)
}
func (self CPUParticles3D) GetDrawOrder() CPUParticles3DDrawOrder {
	return self.Runtime.CPUParticles3D_get_draw_order(self)
}
func (self CPUParticles3D) SetMesh(mesh Mesh) {
	self.Runtime.CPUParticles3D_set_mesh(self, mesh)
}
func (self CPUParticles3D) GetMesh() Mesh {
	return self.Runtime.CPUParticles3D_get_mesh(self)
}
func (self CPUParticles3D) Restart() {
	self.Runtime.CPUParticles3D_restart(self)
}
func (self CPUParticles3D) SetDirection(direction Vector3) {
	self.Runtime.CPUParticles3D_set_direction(self, direction)
}
func (self CPUParticles3D) GetDirection() Vector3 {
	return self.Runtime.CPUParticles3D_get_direction(self)
}
func (self CPUParticles3D) SetSpread(degrees Float) {
	self.Runtime.CPUParticles3D_set_spread(self, degrees)
}
func (self CPUParticles3D) GetSpread() Float {
	return self.Runtime.CPUParticles3D_get_spread(self)
}
func (self CPUParticles3D) SetFlatness(amount Float) {
	self.Runtime.CPUParticles3D_set_flatness(self, amount)
}
func (self CPUParticles3D) GetFlatness() Float {
	return self.Runtime.CPUParticles3D_get_flatness(self)
}
func (self CPUParticles3D) SetParamMin(param CPUParticles3DParameter, value Float) {
	self.Runtime.CPUParticles3D_set_param_min(self, param, value)
}
func (self CPUParticles3D) GetParamMin(param CPUParticles3DParameter) Float {
	return self.Runtime.CPUParticles3D_get_param_min(self, param)
}
func (self CPUParticles3D) SetParamMax(param CPUParticles3DParameter, value Float) {
	self.Runtime.CPUParticles3D_set_param_max(self, param, value)
}
func (self CPUParticles3D) GetParamMax(param CPUParticles3DParameter) Float {
	return self.Runtime.CPUParticles3D_get_param_max(self, param)
}
func (self CPUParticles3D) SetParamCurve(param CPUParticles3DParameter, curve Curve) {
	self.Runtime.CPUParticles3D_set_param_curve(self, param, curve)
}
func (self CPUParticles3D) GetParamCurve(param CPUParticles3DParameter) Curve {
	return self.Runtime.CPUParticles3D_get_param_curve(self, param)
}
func (self CPUParticles3D) SetColor(color Color) {
	self.Runtime.CPUParticles3D_set_color(self, color)
}
func (self CPUParticles3D) GetColor() Color {
	return self.Runtime.CPUParticles3D_get_color(self)
}
func (self CPUParticles3D) SetColorRamp(ramp Gradient) {
	self.Runtime.CPUParticles3D_set_color_ramp(self, ramp)
}
func (self CPUParticles3D) GetColorRamp() Gradient {
	return self.Runtime.CPUParticles3D_get_color_ramp(self)
}
func (self CPUParticles3D) SetColorInitialRamp(ramp Gradient) {
	self.Runtime.CPUParticles3D_set_color_initial_ramp(self, ramp)
}
func (self CPUParticles3D) GetColorInitialRamp() Gradient {
	return self.Runtime.CPUParticles3D_get_color_initial_ramp(self)
}
func (self CPUParticles3D) SetParticleFlag(particle_flag CPUParticles3DParticleFlags, enable bool) {
	self.Runtime.CPUParticles3D_set_particle_flag(self, particle_flag, enable)
}
func (self CPUParticles3D) GetParticleFlag(particle_flag CPUParticles3DParticleFlags) bool {
	return self.Runtime.CPUParticles3D_get_particle_flag(self, particle_flag)
}
func (self CPUParticles3D) SetEmissionShape(shape CPUParticles3DEmissionShape) {
	self.Runtime.CPUParticles3D_set_emission_shape(self, shape)
}
func (self CPUParticles3D) GetEmissionShape() CPUParticles3DEmissionShape {
	return self.Runtime.CPUParticles3D_get_emission_shape(self)
}
func (self CPUParticles3D) SetEmissionSphereRadius(radius Float) {
	self.Runtime.CPUParticles3D_set_emission_sphere_radius(self, radius)
}
func (self CPUParticles3D) GetEmissionSphereRadius() Float {
	return self.Runtime.CPUParticles3D_get_emission_sphere_radius(self)
}
func (self CPUParticles3D) SetEmissionBoxExtents(extents Vector3) {
	self.Runtime.CPUParticles3D_set_emission_box_extents(self, extents)
}
func (self CPUParticles3D) GetEmissionBoxExtents() Vector3 {
	return self.Runtime.CPUParticles3D_get_emission_box_extents(self)
}
func (self CPUParticles3D) SetEmissionPoints(array PackedVector3Array) {
	self.Runtime.CPUParticles3D_set_emission_points(self, array)
}
func (self CPUParticles3D) GetEmissionPoints() PackedVector3Array {
	return self.Runtime.CPUParticles3D_get_emission_points(self)
}
func (self CPUParticles3D) SetEmissionNormals(array PackedVector3Array) {
	self.Runtime.CPUParticles3D_set_emission_normals(self, array)
}
func (self CPUParticles3D) GetEmissionNormals() PackedVector3Array {
	return self.Runtime.CPUParticles3D_get_emission_normals(self)
}
func (self CPUParticles3D) SetEmissionColors(array PackedColorArray) {
	self.Runtime.CPUParticles3D_set_emission_colors(self, array)
}
func (self CPUParticles3D) GetEmissionColors() PackedColorArray {
	return self.Runtime.CPUParticles3D_get_emission_colors(self)
}
func (self CPUParticles3D) SetEmissionRingAxis(axis Vector3) {
	self.Runtime.CPUParticles3D_set_emission_ring_axis(self, axis)
}
func (self CPUParticles3D) GetEmissionRingAxis() Vector3 {
	return self.Runtime.CPUParticles3D_get_emission_ring_axis(self)
}
func (self CPUParticles3D) SetEmissionRingHeight(height Float) {
	self.Runtime.CPUParticles3D_set_emission_ring_height(self, height)
}
func (self CPUParticles3D) GetEmissionRingHeight() Float {
	return self.Runtime.CPUParticles3D_get_emission_ring_height(self)
}
func (self CPUParticles3D) SetEmissionRingRadius(radius Float) {
	self.Runtime.CPUParticles3D_set_emission_ring_radius(self, radius)
}
func (self CPUParticles3D) GetEmissionRingRadius() Float {
	return self.Runtime.CPUParticles3D_get_emission_ring_radius(self)
}
func (self CPUParticles3D) SetEmissionRingInnerRadius(inner_radius Float) {
	self.Runtime.CPUParticles3D_set_emission_ring_inner_radius(self, inner_radius)
}
func (self CPUParticles3D) GetEmissionRingInnerRadius() Float {
	return self.Runtime.CPUParticles3D_get_emission_ring_inner_radius(self)
}
func (self CPUParticles3D) GetGravity() Vector3 {
	return self.Runtime.CPUParticles3D_get_gravity(self)
}
func (self CPUParticles3D) SetGravity(accel_vec Vector3) {
	self.Runtime.CPUParticles3D_set_gravity(self, accel_vec)
}
func (self CPUParticles3D) GetSplitScale() bool {
	return self.Runtime.CPUParticles3D_get_split_scale(self)
}
func (self CPUParticles3D) SetSplitScale(split_scale bool) {
	self.Runtime.CPUParticles3D_set_split_scale(self, split_scale)
}
func (self CPUParticles3D) GetScaleCurveX() Curve {
	return self.Runtime.CPUParticles3D_get_scale_curve_x(self)
}
func (self CPUParticles3D) SetScaleCurveX(scale_curve Curve) {
	self.Runtime.CPUParticles3D_set_scale_curve_x(self, scale_curve)
}
func (self CPUParticles3D) GetScaleCurveY() Curve {
	return self.Runtime.CPUParticles3D_get_scale_curve_y(self)
}
func (self CPUParticles3D) SetScaleCurveY(scale_curve Curve) {
	self.Runtime.CPUParticles3D_set_scale_curve_y(self, scale_curve)
}
func (self CPUParticles3D) GetScaleCurveZ() Curve {
	return self.Runtime.CPUParticles3D_get_scale_curve_z(self)
}
func (self CPUParticles3D) SetScaleCurveZ(scale_curve Curve) {
	self.Runtime.CPUParticles3D_set_scale_curve_z(self, scale_curve)
}
func (self CPUParticles3D) ConvertFromParticles(particles Node) {
	self.Runtime.CPUParticles3D_convert_from_particles(self, particles)
}

type extendsCSGBox3D struct {
	_ [0]*extendsCSGBox3D
	class
}

func (self CSGBox3D) CSGPrimitive3D() CSGPrimitive3D {
	var parent CSGPrimitive3D
	parent.class = self.class
	return parent
}
func (self CSGBox3D) SetSize(size Vector3) {
	self.Runtime.CSGBox3D_set_size(self, size)
}
func (self CSGBox3D) GetSize() Vector3 {
	return self.Runtime.CSGBox3D_get_size(self)
}
func (self CSGBox3D) SetMaterial(material Material) {
	self.Runtime.CSGBox3D_set_material(self, material)
}
func (self CSGBox3D) GetMaterial() Material {
	return self.Runtime.CSGBox3D_get_material(self)
}

type extendsCSGCombiner3D struct {
	_ [0]*extendsCSGCombiner3D
	class
}

func (self CSGCombiner3D) CSGShape3D() CSGShape3D {
	var parent CSGShape3D
	parent.class = self.class
	return parent
}

type extendsCSGCylinder3D struct {
	_ [0]*extendsCSGCylinder3D
	class
}

func (self CSGCylinder3D) CSGPrimitive3D() CSGPrimitive3D {
	var parent CSGPrimitive3D
	parent.class = self.class
	return parent
}
func (self CSGCylinder3D) SetRadius(radius Float) {
	self.Runtime.CSGCylinder3D_set_radius(self, radius)
}
func (self CSGCylinder3D) GetRadius() Float {
	return self.Runtime.CSGCylinder3D_get_radius(self)
}
func (self CSGCylinder3D) SetHeight(height Float) {
	self.Runtime.CSGCylinder3D_set_height(self, height)
}
func (self CSGCylinder3D) GetHeight() Float {
	return self.Runtime.CSGCylinder3D_get_height(self)
}
func (self CSGCylinder3D) SetSides(sides int64) {
	self.Runtime.CSGCylinder3D_set_sides(self, sides)
}
func (self CSGCylinder3D) GetSides() int64 {
	return self.Runtime.CSGCylinder3D_get_sides(self)
}
func (self CSGCylinder3D) SetCone(cone bool) {
	self.Runtime.CSGCylinder3D_set_cone(self, cone)
}
func (self CSGCylinder3D) IsCone() bool {
	return self.Runtime.CSGCylinder3D_is_cone(self)
}
func (self CSGCylinder3D) SetMaterial(material Material) {
	self.Runtime.CSGCylinder3D_set_material(self, material)
}
func (self CSGCylinder3D) GetMaterial() Material {
	return self.Runtime.CSGCylinder3D_get_material(self)
}
func (self CSGCylinder3D) SetSmoothFaces(smooth_faces bool) {
	self.Runtime.CSGCylinder3D_set_smooth_faces(self, smooth_faces)
}
func (self CSGCylinder3D) GetSmoothFaces() bool {
	return self.Runtime.CSGCylinder3D_get_smooth_faces(self)
}

type extendsCSGMesh3D struct {
	_ [0]*extendsCSGMesh3D
	class
}

func (self CSGMesh3D) CSGPrimitive3D() CSGPrimitive3D {
	var parent CSGPrimitive3D
	parent.class = self.class
	return parent
}
func (self CSGMesh3D) SetMesh(mesh Mesh) {
	self.Runtime.CSGMesh3D_set_mesh(self, mesh)
}
func (self CSGMesh3D) GetMesh() Mesh {
	return self.Runtime.CSGMesh3D_get_mesh(self)
}
func (self CSGMesh3D) SetMaterial(material Material) {
	self.Runtime.CSGMesh3D_set_material(self, material)
}
func (self CSGMesh3D) GetMaterial() Material {
	return self.Runtime.CSGMesh3D_get_material(self)
}

type extendsCSGPolygon3D struct {
	_ [0]*extendsCSGPolygon3D
	class
}

func (self CSGPolygon3D) CSGPrimitive3D() CSGPrimitive3D {
	var parent CSGPrimitive3D
	parent.class = self.class
	return parent
}
func (self CSGPolygon3D) SetPolygon(polygon PackedVector2Array) {
	self.Runtime.CSGPolygon3D_set_polygon(self, polygon)
}
func (self CSGPolygon3D) GetPolygon() PackedVector2Array {
	return self.Runtime.CSGPolygon3D_get_polygon(self)
}
func (self CSGPolygon3D) SetMode(mode CSGPolygon3DMode) {
	self.Runtime.CSGPolygon3D_set_mode(self, mode)
}
func (self CSGPolygon3D) GetMode() CSGPolygon3DMode {
	return self.Runtime.CSGPolygon3D_get_mode(self)
}
func (self CSGPolygon3D) SetDepth(depth Float) {
	self.Runtime.CSGPolygon3D_set_depth(self, depth)
}
func (self CSGPolygon3D) GetDepth() Float {
	return self.Runtime.CSGPolygon3D_get_depth(self)
}
func (self CSGPolygon3D) SetSpinDegrees(degrees Float) {
	self.Runtime.CSGPolygon3D_set_spin_degrees(self, degrees)
}
func (self CSGPolygon3D) GetSpinDegrees() Float {
	return self.Runtime.CSGPolygon3D_get_spin_degrees(self)
}
func (self CSGPolygon3D) SetSpinSides(spin_sides int64) {
	self.Runtime.CSGPolygon3D_set_spin_sides(self, spin_sides)
}
func (self CSGPolygon3D) GetSpinSides() int64 {
	return self.Runtime.CSGPolygon3D_get_spin_sides(self)
}
func (self CSGPolygon3D) SetPathNode(path NodePath) {
	self.Runtime.CSGPolygon3D_set_path_node(self, path)
}
func (self CSGPolygon3D) GetPathNode() NodePath {
	return self.Runtime.CSGPolygon3D_get_path_node(self)
}
func (self CSGPolygon3D) SetPathIntervalType(interval_type CSGPolygon3DPathIntervalType) {
	self.Runtime.CSGPolygon3D_set_path_interval_type(self, interval_type)
}
func (self CSGPolygon3D) GetPathIntervalType() CSGPolygon3DPathIntervalType {
	return self.Runtime.CSGPolygon3D_get_path_interval_type(self)
}
func (self CSGPolygon3D) SetPathInterval(interval Float) {
	self.Runtime.CSGPolygon3D_set_path_interval(self, interval)
}
func (self CSGPolygon3D) GetPathInterval() Float {
	return self.Runtime.CSGPolygon3D_get_path_interval(self)
}
func (self CSGPolygon3D) SetPathSimplifyAngle(degrees Float) {
	self.Runtime.CSGPolygon3D_set_path_simplify_angle(self, degrees)
}
func (self CSGPolygon3D) GetPathSimplifyAngle() Float {
	return self.Runtime.CSGPolygon3D_get_path_simplify_angle(self)
}
func (self CSGPolygon3D) SetPathRotation(path_rotation CSGPolygon3DPathRotation) {
	self.Runtime.CSGPolygon3D_set_path_rotation(self, path_rotation)
}
func (self CSGPolygon3D) GetPathRotation() CSGPolygon3DPathRotation {
	return self.Runtime.CSGPolygon3D_get_path_rotation(self)
}
func (self CSGPolygon3D) SetPathLocal(enable bool) {
	self.Runtime.CSGPolygon3D_set_path_local(self, enable)
}
func (self CSGPolygon3D) IsPathLocal() bool {
	return self.Runtime.CSGPolygon3D_is_path_local(self)
}
func (self CSGPolygon3D) SetPathContinuousU(enable bool) {
	self.Runtime.CSGPolygon3D_set_path_continuous_u(self, enable)
}
func (self CSGPolygon3D) IsPathContinuousU() bool {
	return self.Runtime.CSGPolygon3D_is_path_continuous_u(self)
}
func (self CSGPolygon3D) SetPathUDistance(distance Float) {
	self.Runtime.CSGPolygon3D_set_path_u_distance(self, distance)
}
func (self CSGPolygon3D) GetPathUDistance() Float {
	return self.Runtime.CSGPolygon3D_get_path_u_distance(self)
}
func (self CSGPolygon3D) SetPathJoined(enable bool) {
	self.Runtime.CSGPolygon3D_set_path_joined(self, enable)
}
func (self CSGPolygon3D) IsPathJoined() bool {
	return self.Runtime.CSGPolygon3D_is_path_joined(self)
}
func (self CSGPolygon3D) SetMaterial(material Material) {
	self.Runtime.CSGPolygon3D_set_material(self, material)
}
func (self CSGPolygon3D) GetMaterial() Material {
	return self.Runtime.CSGPolygon3D_get_material(self)
}
func (self CSGPolygon3D) SetSmoothFaces(smooth_faces bool) {
	self.Runtime.CSGPolygon3D_set_smooth_faces(self, smooth_faces)
}
func (self CSGPolygon3D) GetSmoothFaces() bool {
	return self.Runtime.CSGPolygon3D_get_smooth_faces(self)
}

type extendsCSGPrimitive3D struct {
	_ [0]*extendsCSGPrimitive3D
	class
}

func (self CSGPrimitive3D) CSGShape3D() CSGShape3D {
	var parent CSGShape3D
	parent.class = self.class
	return parent
}
func (self CSGPrimitive3D) SetFlipFaces(flip_faces bool) {
	self.Runtime.CSGPrimitive3D_set_flip_faces(self, flip_faces)
}
func (self CSGPrimitive3D) GetFlipFaces() bool {
	return self.Runtime.CSGPrimitive3D_get_flip_faces(self)
}

type extendsCSGShape3D struct {
	_ [0]*extendsCSGShape3D
	class
}

func (self CSGShape3D) GeometryInstance3D() GeometryInstance3D {
	var parent GeometryInstance3D
	parent.class = self.class
	return parent
}
func (self CSGShape3D) IsRootShape() bool {
	return self.Runtime.CSGShape3D_is_root_shape(self)
}
func (self CSGShape3D) SetOperation(operation CSGShape3DOperation) {
	self.Runtime.CSGShape3D_set_operation(self, operation)
}
func (self CSGShape3D) GetOperation() CSGShape3DOperation {
	return self.Runtime.CSGShape3D_get_operation(self)
}
func (self CSGShape3D) SetSnap(snap Float) {
	self.Runtime.CSGShape3D_set_snap(self, snap)
}
func (self CSGShape3D) GetSnap() Float {
	return self.Runtime.CSGShape3D_get_snap(self)
}
func (self CSGShape3D) SetUseCollision(operation bool) {
	self.Runtime.CSGShape3D_set_use_collision(self, operation)
}
func (self CSGShape3D) IsUsingCollision() bool {
	return self.Runtime.CSGShape3D_is_using_collision(self)
}
func (self CSGShape3D) SetCollisionLayer(layer int64) {
	self.Runtime.CSGShape3D_set_collision_layer(self, layer)
}
func (self CSGShape3D) GetCollisionLayer() int64 {
	return self.Runtime.CSGShape3D_get_collision_layer(self)
}
func (self CSGShape3D) SetCollisionMask(mask int64) {
	self.Runtime.CSGShape3D_set_collision_mask(self, mask)
}
func (self CSGShape3D) GetCollisionMask() int64 {
	return self.Runtime.CSGShape3D_get_collision_mask(self)
}
func (self CSGShape3D) SetCollisionMaskValue(layer_number int64, value bool) {
	self.Runtime.CSGShape3D_set_collision_mask_value(self, layer_number, value)
}
func (self CSGShape3D) GetCollisionMaskValue(layer_number int64) bool {
	return self.Runtime.CSGShape3D_get_collision_mask_value(self, layer_number)
}
func (self CSGShape3D) SetCollisionLayerValue(layer_number int64, value bool) {
	self.Runtime.CSGShape3D_set_collision_layer_value(self, layer_number, value)
}
func (self CSGShape3D) GetCollisionLayerValue(layer_number int64) bool {
	return self.Runtime.CSGShape3D_get_collision_layer_value(self, layer_number)
}
func (self CSGShape3D) SetCollisionPriority(priority Float) {
	self.Runtime.CSGShape3D_set_collision_priority(self, priority)
}
func (self CSGShape3D) GetCollisionPriority() Float {
	return self.Runtime.CSGShape3D_get_collision_priority(self)
}
func (self CSGShape3D) SetCalculateTangents(enabled bool) {
	self.Runtime.CSGShape3D_set_calculate_tangents(self, enabled)
}
func (self CSGShape3D) IsCalculatingTangents() bool {
	return self.Runtime.CSGShape3D_is_calculating_tangents(self)
}
func (self CSGShape3D) GetMeshes() Array {
	return self.Runtime.CSGShape3D_get_meshes(self)
}

type extendsCSGSphere3D struct {
	_ [0]*extendsCSGSphere3D
	class
}

func (self CSGSphere3D) CSGPrimitive3D() CSGPrimitive3D {
	var parent CSGPrimitive3D
	parent.class = self.class
	return parent
}
func (self CSGSphere3D) SetRadius(radius Float) {
	self.Runtime.CSGSphere3D_set_radius(self, radius)
}
func (self CSGSphere3D) GetRadius() Float {
	return self.Runtime.CSGSphere3D_get_radius(self)
}
func (self CSGSphere3D) SetRadialSegments(radial_segments int64) {
	self.Runtime.CSGSphere3D_set_radial_segments(self, radial_segments)
}
func (self CSGSphere3D) GetRadialSegments() int64 {
	return self.Runtime.CSGSphere3D_get_radial_segments(self)
}
func (self CSGSphere3D) SetRings(rings int64) {
	self.Runtime.CSGSphere3D_set_rings(self, rings)
}
func (self CSGSphere3D) GetRings() int64 {
	return self.Runtime.CSGSphere3D_get_rings(self)
}
func (self CSGSphere3D) SetSmoothFaces(smooth_faces bool) {
	self.Runtime.CSGSphere3D_set_smooth_faces(self, smooth_faces)
}
func (self CSGSphere3D) GetSmoothFaces() bool {
	return self.Runtime.CSGSphere3D_get_smooth_faces(self)
}
func (self CSGSphere3D) SetMaterial(material Material) {
	self.Runtime.CSGSphere3D_set_material(self, material)
}
func (self CSGSphere3D) GetMaterial() Material {
	return self.Runtime.CSGSphere3D_get_material(self)
}

type extendsCSGTorus3D struct {
	_ [0]*extendsCSGTorus3D
	class
}

func (self CSGTorus3D) CSGPrimitive3D() CSGPrimitive3D {
	var parent CSGPrimitive3D
	parent.class = self.class
	return parent
}
func (self CSGTorus3D) SetInnerRadius(radius Float) {
	self.Runtime.CSGTorus3D_set_inner_radius(self, radius)
}
func (self CSGTorus3D) GetInnerRadius() Float {
	return self.Runtime.CSGTorus3D_get_inner_radius(self)
}
func (self CSGTorus3D) SetOuterRadius(radius Float) {
	self.Runtime.CSGTorus3D_set_outer_radius(self, radius)
}
func (self CSGTorus3D) GetOuterRadius() Float {
	return self.Runtime.CSGTorus3D_get_outer_radius(self)
}
func (self CSGTorus3D) SetSides(sides int64) {
	self.Runtime.CSGTorus3D_set_sides(self, sides)
}
func (self CSGTorus3D) GetSides() int64 {
	return self.Runtime.CSGTorus3D_get_sides(self)
}
func (self CSGTorus3D) SetRingSides(sides int64) {
	self.Runtime.CSGTorus3D_set_ring_sides(self, sides)
}
func (self CSGTorus3D) GetRingSides() int64 {
	return self.Runtime.CSGTorus3D_get_ring_sides(self)
}
func (self CSGTorus3D) SetMaterial(material Material) {
	self.Runtime.CSGTorus3D_set_material(self, material)
}
func (self CSGTorus3D) GetMaterial() Material {
	return self.Runtime.CSGTorus3D_get_material(self)
}
func (self CSGTorus3D) SetSmoothFaces(smooth_faces bool) {
	self.Runtime.CSGTorus3D_set_smooth_faces(self, smooth_faces)
}
func (self CSGTorus3D) GetSmoothFaces() bool {
	return self.Runtime.CSGTorus3D_get_smooth_faces(self)
}

type extendsCallbackTweener struct {
	_ [0]*extendsCallbackTweener
	class
}

func (self CallbackTweener) Tweener() Tweener {
	var parent Tweener
	parent.class = self.class
	return parent
}
func (self CallbackTweener) SetDelay(delay Float) CallbackTweener {
	return self.Runtime.CallbackTweener_set_delay(self, delay)
}

type extendsCamera2D struct {
	_ [0]*extendsCamera2D
	class
}

func (self Camera2D) Node2D() Node2D { var parent Node2D; parent.class = self.class; return parent }
func (self Camera2D) SetOffset(offset Vector2) {
	self.Runtime.Camera2D_set_offset(self, offset)
}
func (self Camera2D) GetOffset() Vector2 {
	return self.Runtime.Camera2D_get_offset(self)
}
func (self Camera2D) SetAnchorMode(anchor_mode Camera2DAnchorMode) {
	self.Runtime.Camera2D_set_anchor_mode(self, anchor_mode)
}
func (self Camera2D) GetAnchorMode() Camera2DAnchorMode {
	return self.Runtime.Camera2D_get_anchor_mode(self)
}
func (self Camera2D) SetIgnoreRotation(ignore bool) {
	self.Runtime.Camera2D_set_ignore_rotation(self, ignore)
}
func (self Camera2D) IsIgnoringRotation() bool {
	return self.Runtime.Camera2D_is_ignoring_rotation(self)
}
func (self Camera2D) SetProcessCallback(mode Camera2DCamera2DProcessCallback) {
	self.Runtime.Camera2D_set_process_callback(self, mode)
}
func (self Camera2D) GetProcessCallback() Camera2DCamera2DProcessCallback {
	return self.Runtime.Camera2D_get_process_callback(self)
}
func (self Camera2D) SetEnabled(enabled bool) {
	self.Runtime.Camera2D_set_enabled(self, enabled)
}
func (self Camera2D) IsEnabled() bool {
	return self.Runtime.Camera2D_is_enabled(self)
}
func (self Camera2D) MakeCurrent() {
	self.Runtime.Camera2D_make_current(self)
}
func (self Camera2D) IsCurrent() bool {
	return self.Runtime.Camera2D_is_current(self)
}
func (self Camera2D) SetLimit(margin Side, limit int64) {
	self.Runtime.Camera2D_set_limit(self, margin, limit)
}
func (self Camera2D) GetLimit(margin Side) int64 {
	return self.Runtime.Camera2D_get_limit(self, margin)
}
func (self Camera2D) SetLimitSmoothingEnabled(limit_smoothing_enabled bool) {
	self.Runtime.Camera2D_set_limit_smoothing_enabled(self, limit_smoothing_enabled)
}
func (self Camera2D) IsLimitSmoothingEnabled() bool {
	return self.Runtime.Camera2D_is_limit_smoothing_enabled(self)
}
func (self Camera2D) SetDragVerticalEnabled(enabled bool) {
	self.Runtime.Camera2D_set_drag_vertical_enabled(self, enabled)
}
func (self Camera2D) IsDragVerticalEnabled() bool {
	return self.Runtime.Camera2D_is_drag_vertical_enabled(self)
}
func (self Camera2D) SetDragHorizontalEnabled(enabled bool) {
	self.Runtime.Camera2D_set_drag_horizontal_enabled(self, enabled)
}
func (self Camera2D) IsDragHorizontalEnabled() bool {
	return self.Runtime.Camera2D_is_drag_horizontal_enabled(self)
}
func (self Camera2D) SetDragVerticalOffset(offset Float) {
	self.Runtime.Camera2D_set_drag_vertical_offset(self, offset)
}
func (self Camera2D) GetDragVerticalOffset() Float {
	return self.Runtime.Camera2D_get_drag_vertical_offset(self)
}
func (self Camera2D) SetDragHorizontalOffset(offset Float) {
	self.Runtime.Camera2D_set_drag_horizontal_offset(self, offset)
}
func (self Camera2D) GetDragHorizontalOffset() Float {
	return self.Runtime.Camera2D_get_drag_horizontal_offset(self)
}
func (self Camera2D) SetDragMargin(margin Side, drag_margin Float) {
	self.Runtime.Camera2D_set_drag_margin(self, margin, drag_margin)
}
func (self Camera2D) GetDragMargin(margin Side) Float {
	return self.Runtime.Camera2D_get_drag_margin(self, margin)
}
func (self Camera2D) GetTargetPosition() Vector2 {
	return self.Runtime.Camera2D_get_target_position(self)
}
func (self Camera2D) GetScreenCenterPosition() Vector2 {
	return self.Runtime.Camera2D_get_screen_center_position(self)
}
func (self Camera2D) SetZoom(zoom Vector2) {
	self.Runtime.Camera2D_set_zoom(self, zoom)
}
func (self Camera2D) GetZoom() Vector2 {
	return self.Runtime.Camera2D_get_zoom(self)
}
func (self Camera2D) SetCustomViewport(viewport Node) {
	self.Runtime.Camera2D_set_custom_viewport(self, viewport)
}
func (self Camera2D) GetCustomViewport() Node {
	return self.Runtime.Camera2D_get_custom_viewport(self)
}
func (self Camera2D) SetPositionSmoothingSpeed(position_smoothing_speed Float) {
	self.Runtime.Camera2D_set_position_smoothing_speed(self, position_smoothing_speed)
}
func (self Camera2D) GetPositionSmoothingSpeed() Float {
	return self.Runtime.Camera2D_get_position_smoothing_speed(self)
}
func (self Camera2D) SetPositionSmoothingEnabled(position_smoothing_speed bool) {
	self.Runtime.Camera2D_set_position_smoothing_enabled(self, position_smoothing_speed)
}
func (self Camera2D) IsPositionSmoothingEnabled() bool {
	return self.Runtime.Camera2D_is_position_smoothing_enabled(self)
}
func (self Camera2D) SetRotationSmoothingEnabled(enabled bool) {
	self.Runtime.Camera2D_set_rotation_smoothing_enabled(self, enabled)
}
func (self Camera2D) IsRotationSmoothingEnabled() bool {
	return self.Runtime.Camera2D_is_rotation_smoothing_enabled(self)
}
func (self Camera2D) SetRotationSmoothingSpeed(speed Float) {
	self.Runtime.Camera2D_set_rotation_smoothing_speed(self, speed)
}
func (self Camera2D) GetRotationSmoothingSpeed() Float {
	return self.Runtime.Camera2D_get_rotation_smoothing_speed(self)
}
func (self Camera2D) ForceUpdateScroll() {
	self.Runtime.Camera2D_force_update_scroll(self)
}
func (self Camera2D) ResetSmoothing() {
	self.Runtime.Camera2D_reset_smoothing(self)
}
func (self Camera2D) Align() {
	self.Runtime.Camera2D_align(self)
}
func (self Camera2D) SetScreenDrawingEnabled(screen_drawing_enabled bool) {
	self.Runtime.Camera2D_set_screen_drawing_enabled(self, screen_drawing_enabled)
}
func (self Camera2D) IsScreenDrawingEnabled() bool {
	return self.Runtime.Camera2D_is_screen_drawing_enabled(self)
}
func (self Camera2D) SetLimitDrawingEnabled(limit_drawing_enabled bool) {
	self.Runtime.Camera2D_set_limit_drawing_enabled(self, limit_drawing_enabled)
}
func (self Camera2D) IsLimitDrawingEnabled() bool {
	return self.Runtime.Camera2D_is_limit_drawing_enabled(self)
}
func (self Camera2D) SetMarginDrawingEnabled(margin_drawing_enabled bool) {
	self.Runtime.Camera2D_set_margin_drawing_enabled(self, margin_drawing_enabled)
}
func (self Camera2D) IsMarginDrawingEnabled() bool {
	return self.Runtime.Camera2D_is_margin_drawing_enabled(self)
}

type extendsCamera3D struct {
	_ [0]*extendsCamera3D
	class
}

func (self Camera3D) Node3D() Node3D { var parent Node3D; parent.class = self.class; return parent }
func (self Camera3D) ProjectRayNormal(screen_point Vector2) Vector3 {
	return self.Runtime.Camera3D_project_ray_normal(self, screen_point)
}
func (self Camera3D) ProjectLocalRayNormal(screen_point Vector2) Vector3 {
	return self.Runtime.Camera3D_project_local_ray_normal(self, screen_point)
}
func (self Camera3D) ProjectRayOrigin(screen_point Vector2) Vector3 {
	return self.Runtime.Camera3D_project_ray_origin(self, screen_point)
}
func (self Camera3D) UnprojectPosition(world_point Vector3) Vector2 {
	return self.Runtime.Camera3D_unproject_position(self, world_point)
}
func (self Camera3D) IsPositionBehind(world_point Vector3) bool {
	return self.Runtime.Camera3D_is_position_behind(self, world_point)
}
func (self Camera3D) ProjectPosition(screen_point Vector2, z_depth Float) Vector3 {
	return self.Runtime.Camera3D_project_position(self, screen_point, z_depth)
}
func (self Camera3D) SetPerspective(fov Float, z_near Float, z_far Float) {
	self.Runtime.Camera3D_set_perspective(self, fov, z_near, z_far)
}
func (self Camera3D) SetOrthogonal(size Float, z_near Float, z_far Float) {
	self.Runtime.Camera3D_set_orthogonal(self, size, z_near, z_far)
}
func (self Camera3D) SetFrustum(size Float, offset Vector2, z_near Float, z_far Float) {
	self.Runtime.Camera3D_set_frustum(self, size, offset, z_near, z_far)
}
func (self Camera3D) MakeCurrent() {
	self.Runtime.Camera3D_make_current(self)
}
func (self Camera3D) ClearCurrent(enable_next bool) {
	self.Runtime.Camera3D_clear_current(self, enable_next)
}
func (self Camera3D) SetCurrent(enabled bool) {
	self.Runtime.Camera3D_set_current(self, enabled)
}
func (self Camera3D) IsCurrent() bool {
	return self.Runtime.Camera3D_is_current(self)
}
func (self Camera3D) GetCameraTransform() Transform3D {
	return self.Runtime.Camera3D_get_camera_transform(self)
}
func (self Camera3D) GetCameraProjection() Projection {
	return self.Runtime.Camera3D_get_camera_projection(self)
}
func (self Camera3D) GetFov() Float {
	return self.Runtime.Camera3D_get_fov(self)
}
func (self Camera3D) GetFrustumOffset() Vector2 {
	return self.Runtime.Camera3D_get_frustum_offset(self)
}
func (self Camera3D) GetSize() Float {
	return self.Runtime.Camera3D_get_size(self)
}
func (self Camera3D) GetFar() Float {
	return self.Runtime.Camera3D_get_far(self)
}
func (self Camera3D) GetNear() Float {
	return self.Runtime.Camera3D_get_near(self)
}
func (self Camera3D) SetFov(fov Float) {
	self.Runtime.Camera3D_set_fov(self, fov)
}
func (self Camera3D) SetFrustumOffset(offset Vector2) {
	self.Runtime.Camera3D_set_frustum_offset(self, offset)
}
func (self Camera3D) SetSize(size Float) {
	self.Runtime.Camera3D_set_size(self, size)
}
func (self Camera3D) SetFar(far Float) {
	self.Runtime.Camera3D_set_far(self, far)
}
func (self Camera3D) SetNear(near Float) {
	self.Runtime.Camera3D_set_near(self, near)
}
func (self Camera3D) GetProjection() Camera3DProjectionType {
	return self.Runtime.Camera3D_get_projection(self)
}
func (self Camera3D) SetProjection(mode Camera3DProjectionType) {
	self.Runtime.Camera3D_set_projection(self, mode)
}
func (self Camera3D) SetHOffset(offset Float) {
	self.Runtime.Camera3D_set_h_offset(self, offset)
}
func (self Camera3D) GetHOffset() Float {
	return self.Runtime.Camera3D_get_h_offset(self)
}
func (self Camera3D) SetVOffset(offset Float) {
	self.Runtime.Camera3D_set_v_offset(self, offset)
}
func (self Camera3D) GetVOffset() Float {
	return self.Runtime.Camera3D_get_v_offset(self)
}
func (self Camera3D) SetCullMask(mask int64) {
	self.Runtime.Camera3D_set_cull_mask(self, mask)
}
func (self Camera3D) GetCullMask() int64 {
	return self.Runtime.Camera3D_get_cull_mask(self)
}
func (self Camera3D) SetEnvironment(env Environment) {
	self.Runtime.Camera3D_set_environment(self, env)
}
func (self Camera3D) GetEnvironment() Environment {
	return self.Runtime.Camera3D_get_environment(self)
}
func (self Camera3D) SetAttributes(env CameraAttributes) {
	self.Runtime.Camera3D_set_attributes(self, env)
}
func (self Camera3D) GetAttributes() CameraAttributes {
	return self.Runtime.Camera3D_get_attributes(self)
}
func (self Camera3D) SetKeepAspectMode(mode Camera3DKeepAspect) {
	self.Runtime.Camera3D_set_keep_aspect_mode(self, mode)
}
func (self Camera3D) GetKeepAspectMode() Camera3DKeepAspect {
	return self.Runtime.Camera3D_get_keep_aspect_mode(self)
}
func (self Camera3D) SetDopplerTracking(mode Camera3DDopplerTracking) {
	self.Runtime.Camera3D_set_doppler_tracking(self, mode)
}
func (self Camera3D) GetDopplerTracking() Camera3DDopplerTracking {
	return self.Runtime.Camera3D_get_doppler_tracking(self)
}
func (self Camera3D) GetFrustum() ArrayOf[Plane] {
	return self.Runtime.Camera3D_get_frustum(self)
}
func (self Camera3D) IsPositionInFrustum(world_point Vector3) bool {
	return self.Runtime.Camera3D_is_position_in_frustum(self, world_point)
}
func (self Camera3D) GetCameraRid() RID {
	return self.Runtime.Camera3D_get_camera_rid(self)
}
func (self Camera3D) GetPyramidShapeRid() RID {
	return self.Runtime.Camera3D_get_pyramid_shape_rid(self)
}
func (self Camera3D) SetCullMaskValue(layer_number int64, value bool) {
	self.Runtime.Camera3D_set_cull_mask_value(self, layer_number, value)
}
func (self Camera3D) GetCullMaskValue(layer_number int64) bool {
	return self.Runtime.Camera3D_get_cull_mask_value(self, layer_number)
}

type extendsCameraAttributes struct {
	_ [0]*extendsCameraAttributes
	class
}

func (self CameraAttributes) Resource() Resource {
	var parent Resource
	parent.class = self.class
	return parent
}
func (self CameraAttributes) SetExposureMultiplier(multiplier Float) {
	self.Runtime.CameraAttributes_set_exposure_multiplier(self, multiplier)
}
func (self CameraAttributes) GetExposureMultiplier() Float {
	return self.Runtime.CameraAttributes_get_exposure_multiplier(self)
}
func (self CameraAttributes) SetExposureSensitivity(sensitivity Float) {
	self.Runtime.CameraAttributes_set_exposure_sensitivity(self, sensitivity)
}
func (self CameraAttributes) GetExposureSensitivity() Float {
	return self.Runtime.CameraAttributes_get_exposure_sensitivity(self)
}
func (self CameraAttributes) SetAutoExposureEnabled(enabled bool) {
	self.Runtime.CameraAttributes_set_auto_exposure_enabled(self, enabled)
}
func (self CameraAttributes) IsAutoExposureEnabled() bool {
	return self.Runtime.CameraAttributes_is_auto_exposure_enabled(self)
}
func (self CameraAttributes) SetAutoExposureSpeed(exposure_speed Float) {
	self.Runtime.CameraAttributes_set_auto_exposure_speed(self, exposure_speed)
}
func (self CameraAttributes) GetAutoExposureSpeed() Float {
	return self.Runtime.CameraAttributes_get_auto_exposure_speed(self)
}
func (self CameraAttributes) SetAutoExposureScale(exposure_grey Float) {
	self.Runtime.CameraAttributes_set_auto_exposure_scale(self, exposure_grey)
}
func (self CameraAttributes) GetAutoExposureScale() Float {
	return self.Runtime.CameraAttributes_get_auto_exposure_scale(self)
}

type extendsCameraAttributesPhysical struct {
	_ [0]*extendsCameraAttributesPhysical
	class
}

func (self CameraAttributesPhysical) CameraAttributes() CameraAttributes {
	var parent CameraAttributes
	parent.class = self.class
	return parent
}
func (self CameraAttributesPhysical) SetAperture(aperture Float) {
	self.Runtime.CameraAttributesPhysical_set_aperture(self, aperture)
}
func (self CameraAttributesPhysical) GetAperture() Float {
	return self.Runtime.CameraAttributesPhysical_get_aperture(self)
}
func (self CameraAttributesPhysical) SetShutterSpeed(shutter_speed Float) {
	self.Runtime.CameraAttributesPhysical_set_shutter_speed(self, shutter_speed)
}
func (self CameraAttributesPhysical) GetShutterSpeed() Float {
	return self.Runtime.CameraAttributesPhysical_get_shutter_speed(self)
}
func (self CameraAttributesPhysical) SetFocalLength(focal_length Float) {
	self.Runtime.CameraAttributesPhysical_set_focal_length(self, focal_length)
}
func (self CameraAttributesPhysical) GetFocalLength() Float {
	return self.Runtime.CameraAttributesPhysical_get_focal_length(self)
}
func (self CameraAttributesPhysical) SetFocusDistance(focus_distance Float) {
	self.Runtime.CameraAttributesPhysical_set_focus_distance(self, focus_distance)
}
func (self CameraAttributesPhysical) GetFocusDistance() Float {
	return self.Runtime.CameraAttributesPhysical_get_focus_distance(self)
}
func (self CameraAttributesPhysical) SetNear(near Float) {
	self.Runtime.CameraAttributesPhysical_set_near(self, near)
}
func (self CameraAttributesPhysical) GetNear() Float {
	return self.Runtime.CameraAttributesPhysical_get_near(self)
}
func (self CameraAttributesPhysical) SetFar(far Float) {
	self.Runtime.CameraAttributesPhysical_set_far(self, far)
}
func (self CameraAttributesPhysical) GetFar() Float {
	return self.Runtime.CameraAttributesPhysical_get_far(self)
}
func (self CameraAttributesPhysical) GetFov() Float {
	return self.Runtime.CameraAttributesPhysical_get_fov(self)
}
func (self CameraAttributesPhysical) SetAutoExposureMaxExposureValue(exposure_value_max Float) {
	self.Runtime.CameraAttributesPhysical_set_auto_exposure_max_exposure_value(self, exposure_value_max)
}
func (self CameraAttributesPhysical) GetAutoExposureMaxExposureValue() Float {
	return self.Runtime.CameraAttributesPhysical_get_auto_exposure_max_exposure_value(self)
}
func (self CameraAttributesPhysical) SetAutoExposureMinExposureValue(exposure_value_min Float) {
	self.Runtime.CameraAttributesPhysical_set_auto_exposure_min_exposure_value(self, exposure_value_min)
}
func (self CameraAttributesPhysical) GetAutoExposureMinExposureValue() Float {
	return self.Runtime.CameraAttributesPhysical_get_auto_exposure_min_exposure_value(self)
}

type extendsCameraAttributesPractical struct {
	_ [0]*extendsCameraAttributesPractical
	class
}

func (self CameraAttributesPractical) CameraAttributes() CameraAttributes {
	var parent CameraAttributes
	parent.class = self.class
	return parent
}
func (self CameraAttributesPractical) SetDofBlurFarEnabled(enabled bool) {
	self.Runtime.CameraAttributesPractical_set_dof_blur_far_enabled(self, enabled)
}
func (self CameraAttributesPractical) IsDofBlurFarEnabled() bool {
	return self.Runtime.CameraAttributesPractical_is_dof_blur_far_enabled(self)
}
func (self CameraAttributesPractical) SetDofBlurFarDistance(distance Float) {
	self.Runtime.CameraAttributesPractical_set_dof_blur_far_distance(self, distance)
}
func (self CameraAttributesPractical) GetDofBlurFarDistance() Float {
	return self.Runtime.CameraAttributesPractical_get_dof_blur_far_distance(self)
}
func (self CameraAttributesPractical) SetDofBlurFarTransition(distance Float) {
	self.Runtime.CameraAttributesPractical_set_dof_blur_far_transition(self, distance)
}
func (self CameraAttributesPractical) GetDofBlurFarTransition() Float {
	return self.Runtime.CameraAttributesPractical_get_dof_blur_far_transition(self)
}
func (self CameraAttributesPractical) SetDofBlurNearEnabled(enabled bool) {
	self.Runtime.CameraAttributesPractical_set_dof_blur_near_enabled(self, enabled)
}
func (self CameraAttributesPractical) IsDofBlurNearEnabled() bool {
	return self.Runtime.CameraAttributesPractical_is_dof_blur_near_enabled(self)
}
func (self CameraAttributesPractical) SetDofBlurNearDistance(distance Float) {
	self.Runtime.CameraAttributesPractical_set_dof_blur_near_distance(self, distance)
}
func (self CameraAttributesPractical) GetDofBlurNearDistance() Float {
	return self.Runtime.CameraAttributesPractical_get_dof_blur_near_distance(self)
}
func (self CameraAttributesPractical) SetDofBlurNearTransition(distance Float) {
	self.Runtime.CameraAttributesPractical_set_dof_blur_near_transition(self, distance)
}
func (self CameraAttributesPractical) GetDofBlurNearTransition() Float {
	return self.Runtime.CameraAttributesPractical_get_dof_blur_near_transition(self)
}
func (self CameraAttributesPractical) SetDofBlurAmount(amount Float) {
	self.Runtime.CameraAttributesPractical_set_dof_blur_amount(self, amount)
}
func (self CameraAttributesPractical) GetDofBlurAmount() Float {
	return self.Runtime.CameraAttributesPractical_get_dof_blur_amount(self)
}
func (self CameraAttributesPractical) SetAutoExposureMaxSensitivity(max_sensitivity Float) {
	self.Runtime.CameraAttributesPractical_set_auto_exposure_max_sensitivity(self, max_sensitivity)
}
func (self CameraAttributesPractical) GetAutoExposureMaxSensitivity() Float {
	return self.Runtime.CameraAttributesPractical_get_auto_exposure_max_sensitivity(self)
}
func (self CameraAttributesPractical) SetAutoExposureMinSensitivity(min_sensitivity Float) {
	self.Runtime.CameraAttributesPractical_set_auto_exposure_min_sensitivity(self, min_sensitivity)
}
func (self CameraAttributesPractical) GetAutoExposureMinSensitivity() Float {
	return self.Runtime.CameraAttributesPractical_get_auto_exposure_min_sensitivity(self)
}

type extendsCameraFeed struct {
	_ [0]*extendsCameraFeed
	class
}

func (self CameraFeed) RefCounted() RefCounted {
	var parent RefCounted
	parent.class = self.class
	return parent
}
func (self CameraFeed) GetId() int64 {
	return self.Runtime.CameraFeed_get_id(self)
}
func (self CameraFeed) IsActive() bool {
	return self.Runtime.CameraFeed_is_active(self)
}
func (self CameraFeed) SetActive(active bool) {
	self.Runtime.CameraFeed_set_active(self, active)
}
func (self CameraFeed) GetName() string {
	return self.Runtime.CameraFeed_get_name(self)
}
func (self CameraFeed) GetPosition() CameraFeedFeedPosition {
	return self.Runtime.CameraFeed_get_position(self)
}
func (self CameraFeed) GetTransform() Transform2D {
	return self.Runtime.CameraFeed_get_transform(self)
}
func (self CameraFeed) SetTransform(transform Transform2D) {
	self.Runtime.CameraFeed_set_transform(self, transform)
}
func (self CameraFeed) GetDatatype() CameraFeedFeedDataType {
	return self.Runtime.CameraFeed_get_datatype(self)
}

type extendsCameraServer struct {
	_ [0]*extendsCameraServer
	class
}

func (self CameraServer) Object() Object { var parent Object; parent.class = self.class; return parent }
func (self CameraServer) GetFeed(index int64) CameraFeed {
	return self.Runtime.CameraServer_get_feed(self, index)
}
func (self CameraServer) GetFeedCount() int64 {
	return self.Runtime.CameraServer_get_feed_count(self)
}
func (self CameraServer) Feeds() ArrayOf[CameraFeed] {
	return self.Runtime.CameraServer_feeds(self)
}
func (self CameraServer) AddFeed(feed CameraFeed) {
	self.Runtime.CameraServer_add_feed(self, feed)
}
func (self CameraServer) RemoveFeed(feed CameraFeed) {
	self.Runtime.CameraServer_remove_feed(self, feed)
}

type extendsCameraTexture struct {
	_ [0]*extendsCameraTexture
	class
}

func (self CameraTexture) Texture2D() Texture2D {
	var parent Texture2D
	parent.class = self.class
	return parent
}
func (self CameraTexture) SetCameraFeedId(feed_id int64) {
	self.Runtime.CameraTexture_set_camera_feed_id(self, feed_id)
}
func (self CameraTexture) GetCameraFeedId() int64 {
	return self.Runtime.CameraTexture_get_camera_feed_id(self)
}
func (self CameraTexture) SetWhichFeed(which_feed CameraServerFeedImage) {
	self.Runtime.CameraTexture_set_which_feed(self, which_feed)
}
func (self CameraTexture) GetWhichFeed() CameraServerFeedImage {
	return self.Runtime.CameraTexture_get_which_feed(self)
}
func (self CameraTexture) SetCameraActive(active bool) {
	self.Runtime.CameraTexture_set_camera_active(self, active)
}
func (self CameraTexture) GetCameraActive() bool {
	return self.Runtime.CameraTexture_get_camera_active(self)
}

type extendsCanvasGroup struct {
	_ [0]*extendsCanvasGroup
	class
}

func (self CanvasGroup) Node2D() Node2D { var parent Node2D; parent.class = self.class; return parent }
func (self CanvasGroup) SetFitMargin(fit_margin Float) {
	self.Runtime.CanvasGroup_set_fit_margin(self, fit_margin)
}
func (self CanvasGroup) GetFitMargin() Float {
	return self.Runtime.CanvasGroup_get_fit_margin(self)
}
func (self CanvasGroup) SetClearMargin(clear_margin Float) {
	self.Runtime.CanvasGroup_set_clear_margin(self, clear_margin)
}
func (self CanvasGroup) GetClearMargin() Float {
	return self.Runtime.CanvasGroup_get_clear_margin(self)
}
func (self CanvasGroup) SetUseMipmaps(use_mipmaps bool) {
	self.Runtime.CanvasGroup_set_use_mipmaps(self, use_mipmaps)
}
func (self CanvasGroup) IsUsingMipmaps() bool {
	return self.Runtime.CanvasGroup_is_using_mipmaps(self)
}

type extendsCanvasItem struct {
	_ [0]*extendsCanvasItem
	class
}

func (self CanvasItem) Node() Node { var parent Node; parent.class = self.class; return parent }
func (self CanvasItem) GetCanvasItem() RID {
	return self.Runtime.CanvasItem_get_canvas_item(self)
}
func (self CanvasItem) SetVisible(visible bool) {
	self.Runtime.CanvasItem_set_visible(self, visible)
}
func (self CanvasItem) IsVisible() bool {
	return self.Runtime.CanvasItem_is_visible(self)
}
func (self CanvasItem) IsVisibleInTree() bool {
	return self.Runtime.CanvasItem_is_visible_in_tree(self)
}
func (self CanvasItem) Show() {
	self.Runtime.CanvasItem_show(self)
}
func (self CanvasItem) Hide() {
	self.Runtime.CanvasItem_hide(self)
}
func (self CanvasItem) QueueRedraw() {
	self.Runtime.CanvasItem_queue_redraw(self)
}
func (self CanvasItem) MoveToFront() {
	self.Runtime.CanvasItem_move_to_front(self)
}
func (self CanvasItem) SetAsTopLevel(enable bool) {
	self.Runtime.CanvasItem_set_as_top_level(self, enable)
}
func (self CanvasItem) IsSetAsTopLevel() bool {
	return self.Runtime.CanvasItem_is_set_as_top_level(self)
}
func (self CanvasItem) SetLightMask(light_mask int64) {
	self.Runtime.CanvasItem_set_light_mask(self, light_mask)
}
func (self CanvasItem) GetLightMask() int64 {
	return self.Runtime.CanvasItem_get_light_mask(self)
}
func (self CanvasItem) SetModulate(modulate Color) {
	self.Runtime.CanvasItem_set_modulate(self, modulate)
}
func (self CanvasItem) GetModulate() Color {
	return self.Runtime.CanvasItem_get_modulate(self)
}
func (self CanvasItem) SetSelfModulate(self_modulate Color) {
	self.Runtime.CanvasItem_set_self_modulate(self, self_modulate)
}
func (self CanvasItem) GetSelfModulate() Color {
	return self.Runtime.CanvasItem_get_self_modulate(self)
}
func (self CanvasItem) SetZIndex(z_index int64) {
	self.Runtime.CanvasItem_set_z_index(self, z_index)
}
func (self CanvasItem) GetZIndex() int64 {
	return self.Runtime.CanvasItem_get_z_index(self)
}
func (self CanvasItem) SetZAsRelative(enable bool) {
	self.Runtime.CanvasItem_set_z_as_relative(self, enable)
}
func (self CanvasItem) IsZRelative() bool {
	return self.Runtime.CanvasItem_is_z_relative(self)
}
func (self CanvasItem) SetYSortEnabled(enabled bool) {
	self.Runtime.CanvasItem_set_y_sort_enabled(self, enabled)
}
func (self CanvasItem) IsYSortEnabled() bool {
	return self.Runtime.CanvasItem_is_y_sort_enabled(self)
}
func (self CanvasItem) SetDrawBehindParent(enable bool) {
	self.Runtime.CanvasItem_set_draw_behind_parent(self, enable)
}
func (self CanvasItem) IsDrawBehindParentEnabled() bool {
	return self.Runtime.CanvasItem_is_draw_behind_parent_enabled(self)
}
func (self CanvasItem) DrawLine(from Vector2, to Vector2, color Color, width Float, antialiased bool) {
	self.Runtime.CanvasItem_draw_line(self, from, to, color, width, antialiased)
}
func (self CanvasItem) DrawDashedLine(from Vector2, to Vector2, color Color, width Float, dash Float, aligned bool) {
	self.Runtime.CanvasItem_draw_dashed_line(self, from, to, color, width, dash, aligned)
}
func (self CanvasItem) DrawPolyline(points PackedVector2Array, color Color, width Float, antialiased bool) {
	self.Runtime.CanvasItem_draw_polyline(self, points, color, width, antialiased)
}
func (self CanvasItem) DrawPolylineColors(points PackedVector2Array, colors PackedColorArray, width Float, antialiased bool) {
	self.Runtime.CanvasItem_draw_polyline_colors(self, points, colors, width, antialiased)
}
func (self CanvasItem) DrawArc(center Vector2, radius Float, start_angle Float, end_angle Float, point_count int64, color Color, width Float, antialiased bool) {
	self.Runtime.CanvasItem_draw_arc(self, center, radius, start_angle, end_angle, point_count, color, width, antialiased)
}
func (self CanvasItem) DrawMultiline(points PackedVector2Array, color Color, width Float) {
	self.Runtime.CanvasItem_draw_multiline(self, points, color, width)
}
func (self CanvasItem) DrawMultilineColors(points PackedVector2Array, colors PackedColorArray, width Float) {
	self.Runtime.CanvasItem_draw_multiline_colors(self, points, colors, width)
}
func (self CanvasItem) DrawRect(rect Rect2, color Color, filled bool, width Float) {
	self.Runtime.CanvasItem_draw_rect(self, rect, color, filled, width)
}
func (self CanvasItem) DrawCircle(position Vector2, radius Float, color Color) {
	self.Runtime.CanvasItem_draw_circle(self, position, radius, color)
}
func (self CanvasItem) DrawTexture(texture Texture2D, position Vector2, modulate Color) {
	self.Runtime.CanvasItem_draw_texture(self, texture, position, modulate)
}
func (self CanvasItem) DrawTextureRect(texture Texture2D, rect Rect2, tile bool, modulate Color, transpose bool) {
	self.Runtime.CanvasItem_draw_texture_rect(self, texture, rect, tile, modulate, transpose)
}
func (self CanvasItem) DrawTextureRectRegion(texture Texture2D, rect Rect2, src_rect Rect2, modulate Color, transpose bool, clip_uv bool) {
	self.Runtime.CanvasItem_draw_texture_rect_region(self, texture, rect, src_rect, modulate, transpose, clip_uv)
}
func (self CanvasItem) DrawMsdfTextureRectRegion(texture Texture2D, rect Rect2, src_rect Rect2, modulate Color, outline Float, pixel_range Float, scale Float) {
	self.Runtime.CanvasItem_draw_msdf_texture_rect_region(self, texture, rect, src_rect, modulate, outline, pixel_range, scale)
}
func (self CanvasItem) DrawLcdTextureRectRegion(texture Texture2D, rect Rect2, src_rect Rect2, modulate Color) {
	self.Runtime.CanvasItem_draw_lcd_texture_rect_region(self, texture, rect, src_rect, modulate)
}
func (self CanvasItem) DrawStyleBox(style_box StyleBox, rect Rect2) {
	self.Runtime.CanvasItem_draw_style_box(self, style_box, rect)
}
func (self CanvasItem) DrawPrimitive(points PackedVector2Array, colors PackedColorArray, uvs PackedVector2Array, texture Texture2D) {
	self.Runtime.CanvasItem_draw_primitive(self, points, colors, uvs, texture)
}
func (self CanvasItem) DrawPolygon(points PackedVector2Array, colors PackedColorArray, uvs PackedVector2Array, texture Texture2D) {
	self.Runtime.CanvasItem_draw_polygon(self, points, colors, uvs, texture)
}
func (self CanvasItem) DrawColoredPolygon(points PackedVector2Array, color Color, uvs PackedVector2Array, texture Texture2D) {
	self.Runtime.CanvasItem_draw_colored_polygon(self, points, color, uvs, texture)
}
func (self CanvasItem) DrawString(font Font, pos Vector2, text string, alignment HorizontalAlignment, width Float, font_size int64, modulate Color, justification_flags TextServerJustificationFlag, direction TextServerDirection, orientation TextServerOrientation) {
	self.Runtime.CanvasItem_draw_string(self, font, pos, text, alignment, width, font_size, modulate, justification_flags, direction, orientation)
}
func (self CanvasItem) DrawMultilineString(font Font, pos Vector2, text string, alignment HorizontalAlignment, width Float, font_size int64, max_lines int64, modulate Color, brk_flags TextServerLineBreakFlag, justification_flags TextServerJustificationFlag, direction TextServerDirection, orientation TextServerOrientation) {
	self.Runtime.CanvasItem_draw_multiline_string(self, font, pos, text, alignment, width, font_size, max_lines, modulate, brk_flags, justification_flags, direction, orientation)
}
func (self CanvasItem) DrawStringOutline(font Font, pos Vector2, text string, alignment HorizontalAlignment, width Float, font_size int64, size int64, modulate Color, justification_flags TextServerJustificationFlag, direction TextServerDirection, orientation TextServerOrientation) {
	self.Runtime.CanvasItem_draw_string_outline(self, font, pos, text, alignment, width, font_size, size, modulate, justification_flags, direction, orientation)
}
func (self CanvasItem) DrawMultilineStringOutline(font Font, pos Vector2, text string, alignment HorizontalAlignment, width Float, font_size int64, max_lines int64, size int64, modulate Color, brk_flags TextServerLineBreakFlag, justification_flags TextServerJustificationFlag, direction TextServerDirection, orientation TextServerOrientation) {
	self.Runtime.CanvasItem_draw_multiline_string_outline(self, font, pos, text, alignment, width, font_size, max_lines, size, modulate, brk_flags, justification_flags, direction, orientation)
}
func (self CanvasItem) DrawChar(font Font, pos Vector2, char string, font_size int64, modulate Color) {
	self.Runtime.CanvasItem_draw_char(self, font, pos, char, font_size, modulate)
}
func (self CanvasItem) DrawCharOutline(font Font, pos Vector2, char string, font_size int64, size int64, modulate Color) {
	self.Runtime.CanvasItem_draw_char_outline(self, font, pos, char, font_size, size, modulate)
}
func (self CanvasItem) DrawMesh(mesh Mesh, texture Texture2D, transform Transform2D, modulate Color) {
	self.Runtime.CanvasItem_draw_mesh(self, mesh, texture, transform, modulate)
}
func (self CanvasItem) DrawMultimesh(multimesh MultiMesh, texture Texture2D) {
	self.Runtime.CanvasItem_draw_multimesh(self, multimesh, texture)
}
func (self CanvasItem) DrawSetTransform(position Vector2, rotation Float, scale Vector2) {
	self.Runtime.CanvasItem_draw_set_transform(self, position, rotation, scale)
}
func (self CanvasItem) DrawSetTransformMatrix(xform Transform2D) {
	self.Runtime.CanvasItem_draw_set_transform_matrix(self, xform)
}
func (self CanvasItem) DrawAnimationSlice(animation_length Float, slice_begin Float, slice_end Float, offset Float) {
	self.Runtime.CanvasItem_draw_animation_slice(self, animation_length, slice_begin, slice_end, offset)
}
func (self CanvasItem) DrawEndAnimation() {
	self.Runtime.CanvasItem_draw_end_animation(self)
}
func (self CanvasItem) GetTransform() Transform2D {
	return self.Runtime.CanvasItem_get_transform(self)
}
func (self CanvasItem) GetGlobalTransform() Transform2D {
	return self.Runtime.CanvasItem_get_global_transform(self)
}
func (self CanvasItem) GetGlobalTransformWithCanvas() Transform2D {
	return self.Runtime.CanvasItem_get_global_transform_with_canvas(self)
}
func (self CanvasItem) GetViewportTransform() Transform2D {
	return self.Runtime.CanvasItem_get_viewport_transform(self)
}
func (self CanvasItem) GetViewportRect() Rect2 {
	return self.Runtime.CanvasItem_get_viewport_rect(self)
}
func (self CanvasItem) GetCanvasTransform() Transform2D {
	return self.Runtime.CanvasItem_get_canvas_transform(self)
}
func (self CanvasItem) GetScreenTransform() Transform2D {
	return self.Runtime.CanvasItem_get_screen_transform(self)
}
func (self CanvasItem) GetLocalMousePosition() Vector2 {
	return self.Runtime.CanvasItem_get_local_mouse_position(self)
}
func (self CanvasItem) GetGlobalMousePosition() Vector2 {
	return self.Runtime.CanvasItem_get_global_mouse_position(self)
}
func (self CanvasItem) GetCanvas() RID {
	return self.Runtime.CanvasItem_get_canvas(self)
}
func (self CanvasItem) GetWorld2d() World2D {
	return self.Runtime.CanvasItem_get_world_2d(self)
}
func (self CanvasItem) SetMaterial(material Material) {
	self.Runtime.CanvasItem_set_material(self, material)
}
func (self CanvasItem) GetMaterial() Material {
	return self.Runtime.CanvasItem_get_material(self)
}
func (self CanvasItem) SetUseParentMaterial(enable bool) {
	self.Runtime.CanvasItem_set_use_parent_material(self, enable)
}
func (self CanvasItem) GetUseParentMaterial() bool {
	return self.Runtime.CanvasItem_get_use_parent_material(self)
}
func (self CanvasItem) SetNotifyLocalTransform(enable bool) {
	self.Runtime.CanvasItem_set_notify_local_transform(self, enable)
}
func (self CanvasItem) IsLocalTransformNotificationEnabled() bool {
	return self.Runtime.CanvasItem_is_local_transform_notification_enabled(self)
}
func (self CanvasItem) SetNotifyTransform(enable bool) {
	self.Runtime.CanvasItem_set_notify_transform(self, enable)
}
func (self CanvasItem) IsTransformNotificationEnabled() bool {
	return self.Runtime.CanvasItem_is_transform_notification_enabled(self)
}
func (self CanvasItem) ForceUpdateTransform() {
	self.Runtime.CanvasItem_force_update_transform(self)
}
func (self CanvasItem) MakeCanvasPositionLocal(screen_point Vector2) Vector2 {
	return self.Runtime.CanvasItem_make_canvas_position_local(self, screen_point)
}
func (self CanvasItem) MakeInputLocal(event InputEvent) InputEvent {
	return self.Runtime.CanvasItem_make_input_local(self, event)
}
func (self CanvasItem) SetVisibilityLayer(layer int64) {
	self.Runtime.CanvasItem_set_visibility_layer(self, layer)
}
func (self CanvasItem) GetVisibilityLayer() int64 {
	return self.Runtime.CanvasItem_get_visibility_layer(self)
}
func (self CanvasItem) SetVisibilityLayerBit(layer int64, enabled bool) {
	self.Runtime.CanvasItem_set_visibility_layer_bit(self, layer, enabled)
}
func (self CanvasItem) GetVisibilityLayerBit(layer int64) bool {
	return self.Runtime.CanvasItem_get_visibility_layer_bit(self, layer)
}
func (self CanvasItem) SetTextureFilter(mode CanvasItemTextureFilter) {
	self.Runtime.CanvasItem_set_texture_filter(self, mode)
}
func (self CanvasItem) GetTextureFilter() CanvasItemTextureFilter {
	return self.Runtime.CanvasItem_get_texture_filter(self)
}
func (self CanvasItem) SetTextureRepeat(mode CanvasItemTextureRepeat) {
	self.Runtime.CanvasItem_set_texture_repeat(self, mode)
}
func (self CanvasItem) GetTextureRepeat() CanvasItemTextureRepeat {
	return self.Runtime.CanvasItem_get_texture_repeat(self)
}
func (self CanvasItem) SetClipChildrenMode(mode CanvasItemClipChildrenMode) {
	self.Runtime.CanvasItem_set_clip_children_mode(self, mode)
}
func (self CanvasItem) GetClipChildrenMode() CanvasItemClipChildrenMode {
	return self.Runtime.CanvasItem_get_clip_children_mode(self)
}

type extendsCanvasItemMaterial struct {
	_ [0]*extendsCanvasItemMaterial
	class
}

func (self CanvasItemMaterial) Material() Material {
	var parent Material
	parent.class = self.class
	return parent
}
func (self CanvasItemMaterial) SetBlendMode(blend_mode CanvasItemMaterialBlendMode) {
	self.Runtime.CanvasItemMaterial_set_blend_mode(self, blend_mode)
}
func (self CanvasItemMaterial) GetBlendMode() CanvasItemMaterialBlendMode {
	return self.Runtime.CanvasItemMaterial_get_blend_mode(self)
}
func (self CanvasItemMaterial) SetLightMode(light_mode CanvasItemMaterialLightMode) {
	self.Runtime.CanvasItemMaterial_set_light_mode(self, light_mode)
}
func (self CanvasItemMaterial) GetLightMode() CanvasItemMaterialLightMode {
	return self.Runtime.CanvasItemMaterial_get_light_mode(self)
}
func (self CanvasItemMaterial) SetParticlesAnimation(particles_anim bool) {
	self.Runtime.CanvasItemMaterial_set_particles_animation(self, particles_anim)
}
func (self CanvasItemMaterial) GetParticlesAnimation() bool {
	return self.Runtime.CanvasItemMaterial_get_particles_animation(self)
}
func (self CanvasItemMaterial) SetParticlesAnimHFrames(frames int64) {
	self.Runtime.CanvasItemMaterial_set_particles_anim_h_frames(self, frames)
}
func (self CanvasItemMaterial) GetParticlesAnimHFrames() int64 {
	return self.Runtime.CanvasItemMaterial_get_particles_anim_h_frames(self)
}
func (self CanvasItemMaterial) SetParticlesAnimVFrames(frames int64) {
	self.Runtime.CanvasItemMaterial_set_particles_anim_v_frames(self, frames)
}
func (self CanvasItemMaterial) GetParticlesAnimVFrames() int64 {
	return self.Runtime.CanvasItemMaterial_get_particles_anim_v_frames(self)
}
func (self CanvasItemMaterial) SetParticlesAnimLoop(loop bool) {
	self.Runtime.CanvasItemMaterial_set_particles_anim_loop(self, loop)
}
func (self CanvasItemMaterial) GetParticlesAnimLoop() bool {
	return self.Runtime.CanvasItemMaterial_get_particles_anim_loop(self)
}

type extendsCanvasLayer struct {
	_ [0]*extendsCanvasLayer
	class
}

func (self CanvasLayer) Node() Node { var parent Node; parent.class = self.class; return parent }
func (self CanvasLayer) SetLayer(layer int64) {
	self.Runtime.CanvasLayer_set_layer(self, layer)
}
func (self CanvasLayer) GetLayer() int64 {
	return self.Runtime.CanvasLayer_get_layer(self)
}
func (self CanvasLayer) SetVisible(visible bool) {
	self.Runtime.CanvasLayer_set_visible(self, visible)
}
func (self CanvasLayer) IsVisible() bool {
	return self.Runtime.CanvasLayer_is_visible(self)
}
func (self CanvasLayer) Show() {
	self.Runtime.CanvasLayer_show(self)
}
func (self CanvasLayer) Hide() {
	self.Runtime.CanvasLayer_hide(self)
}
func (self CanvasLayer) SetTransform(transform Transform2D) {
	self.Runtime.CanvasLayer_set_transform(self, transform)
}
func (self CanvasLayer) GetTransform() Transform2D {
	return self.Runtime.CanvasLayer_get_transform(self)
}
func (self CanvasLayer) GetFinalTransform() Transform2D {
	return self.Runtime.CanvasLayer_get_final_transform(self)
}
func (self CanvasLayer) SetOffset(offset Vector2) {
	self.Runtime.CanvasLayer_set_offset(self, offset)
}
func (self CanvasLayer) GetOffset() Vector2 {
	return self.Runtime.CanvasLayer_get_offset(self)
}
func (self CanvasLayer) SetRotation(radians Float) {
	self.Runtime.CanvasLayer_set_rotation(self, radians)
}
func (self CanvasLayer) GetRotation() Float {
	return self.Runtime.CanvasLayer_get_rotation(self)
}
func (self CanvasLayer) SetScale(scale Vector2) {
	self.Runtime.CanvasLayer_set_scale(self, scale)
}
func (self CanvasLayer) GetScale() Vector2 {
	return self.Runtime.CanvasLayer_get_scale(self)
}
func (self CanvasLayer) SetFollowViewport(enable bool) {
	self.Runtime.CanvasLayer_set_follow_viewport(self, enable)
}
func (self CanvasLayer) IsFollowingViewport() bool {
	return self.Runtime.CanvasLayer_is_following_viewport(self)
}
func (self CanvasLayer) SetFollowViewportScale(scale Float) {
	self.Runtime.CanvasLayer_set_follow_viewport_scale(self, scale)
}
func (self CanvasLayer) GetFollowViewportScale() Float {
	return self.Runtime.CanvasLayer_get_follow_viewport_scale(self)
}
func (self CanvasLayer) SetCustomViewport(viewport Node) {
	self.Runtime.CanvasLayer_set_custom_viewport(self, viewport)
}
func (self CanvasLayer) GetCustomViewport() Node {
	return self.Runtime.CanvasLayer_get_custom_viewport(self)
}
func (self CanvasLayer) GetCanvas() RID {
	return self.Runtime.CanvasLayer_get_canvas(self)
}

type extendsCanvasModulate struct {
	_ [0]*extendsCanvasModulate
	class
}

func (self CanvasModulate) Node2D() Node2D {
	var parent Node2D
	parent.class = self.class
	return parent
}
func (self CanvasModulate) SetColor(color Color) {
	self.Runtime.CanvasModulate_set_color(self, color)
}
func (self CanvasModulate) GetColor() Color {
	return self.Runtime.CanvasModulate_get_color(self)
}

type extendsCanvasTexture struct {
	_ [0]*extendsCanvasTexture
	class
}

func (self CanvasTexture) Texture2D() Texture2D {
	var parent Texture2D
	parent.class = self.class
	return parent
}
func (self CanvasTexture) SetDiffuseTexture(texture Texture2D) {
	self.Runtime.CanvasTexture_set_diffuse_texture(self, texture)
}
func (self CanvasTexture) GetDiffuseTexture() Texture2D {
	return self.Runtime.CanvasTexture_get_diffuse_texture(self)
}
func (self CanvasTexture) SetNormalTexture(texture Texture2D) {
	self.Runtime.CanvasTexture_set_normal_texture(self, texture)
}
func (self CanvasTexture) GetNormalTexture() Texture2D {
	return self.Runtime.CanvasTexture_get_normal_texture(self)
}
func (self CanvasTexture) SetSpecularTexture(texture Texture2D) {
	self.Runtime.CanvasTexture_set_specular_texture(self, texture)
}
func (self CanvasTexture) GetSpecularTexture() Texture2D {
	return self.Runtime.CanvasTexture_get_specular_texture(self)
}
func (self CanvasTexture) SetSpecularColor(color Color) {
	self.Runtime.CanvasTexture_set_specular_color(self, color)
}
func (self CanvasTexture) GetSpecularColor() Color {
	return self.Runtime.CanvasTexture_get_specular_color(self)
}
func (self CanvasTexture) SetSpecularShininess(shininess Float) {
	self.Runtime.CanvasTexture_set_specular_shininess(self, shininess)
}
func (self CanvasTexture) GetSpecularShininess() Float {
	return self.Runtime.CanvasTexture_get_specular_shininess(self)
}
func (self CanvasTexture) SetTextureFilter(filter CanvasItemTextureFilter) {
	self.Runtime.CanvasTexture_set_texture_filter(self, filter)
}
func (self CanvasTexture) GetTextureFilter() CanvasItemTextureFilter {
	return self.Runtime.CanvasTexture_get_texture_filter(self)
}
func (self CanvasTexture) SetTextureRepeat(repeat CanvasItemTextureRepeat) {
	self.Runtime.CanvasTexture_set_texture_repeat(self, repeat)
}
func (self CanvasTexture) GetTextureRepeat() CanvasItemTextureRepeat {
	return self.Runtime.CanvasTexture_get_texture_repeat(self)
}

type extendsCapsuleMesh struct {
	_ [0]*extendsCapsuleMesh
	class
}

func (self CapsuleMesh) PrimitiveMesh() PrimitiveMesh {
	var parent PrimitiveMesh
	parent.class = self.class
	return parent
}
func (self CapsuleMesh) SetRadius(radius Float) {
	self.Runtime.CapsuleMesh_set_radius(self, radius)
}
func (self CapsuleMesh) GetRadius() Float {
	return self.Runtime.CapsuleMesh_get_radius(self)
}
func (self CapsuleMesh) SetHeight(height Float) {
	self.Runtime.CapsuleMesh_set_height(self, height)
}
func (self CapsuleMesh) GetHeight() Float {
	return self.Runtime.CapsuleMesh_get_height(self)
}
func (self CapsuleMesh) SetRadialSegments(segments int64) {
	self.Runtime.CapsuleMesh_set_radial_segments(self, segments)
}
func (self CapsuleMesh) GetRadialSegments() int64 {
	return self.Runtime.CapsuleMesh_get_radial_segments(self)
}
func (self CapsuleMesh) SetRings(rings int64) {
	self.Runtime.CapsuleMesh_set_rings(self, rings)
}
func (self CapsuleMesh) GetRings() int64 {
	return self.Runtime.CapsuleMesh_get_rings(self)
}

type extendsCapsuleShape2D struct {
	_ [0]*extendsCapsuleShape2D
	class
}

func (self CapsuleShape2D) Shape2D() Shape2D {
	var parent Shape2D
	parent.class = self.class
	return parent
}
func (self CapsuleShape2D) SetRadius(radius Float) {
	self.Runtime.CapsuleShape2D_set_radius(self, radius)
}
func (self CapsuleShape2D) GetRadius() Float {
	return self.Runtime.CapsuleShape2D_get_radius(self)
}
func (self CapsuleShape2D) SetHeight(height Float) {
	self.Runtime.CapsuleShape2D_set_height(self, height)
}
func (self CapsuleShape2D) GetHeight() Float {
	return self.Runtime.CapsuleShape2D_get_height(self)
}

type extendsCapsuleShape3D struct {
	_ [0]*extendsCapsuleShape3D
	class
}

func (self CapsuleShape3D) Shape3D() Shape3D {
	var parent Shape3D
	parent.class = self.class
	return parent
}
func (self CapsuleShape3D) SetRadius(radius Float) {
	self.Runtime.CapsuleShape3D_set_radius(self, radius)
}
func (self CapsuleShape3D) GetRadius() Float {
	return self.Runtime.CapsuleShape3D_get_radius(self)
}
func (self CapsuleShape3D) SetHeight(height Float) {
	self.Runtime.CapsuleShape3D_set_height(self, height)
}
func (self CapsuleShape3D) GetHeight() Float {
	return self.Runtime.CapsuleShape3D_get_height(self)
}

type extendsCenterContainer struct {
	_ [0]*extendsCenterContainer
	class
}

func (self CenterContainer) Container() Container {
	var parent Container
	parent.class = self.class
	return parent
}
func (self CenterContainer) SetUseTopLeft(enable bool) {
	self.Runtime.CenterContainer_set_use_top_left(self, enable)
}
func (self CenterContainer) IsUsingTopLeft() bool {
	return self.Runtime.CenterContainer_is_using_top_left(self)
}

type extendsCharFXTransform struct {
	_ [0]*extendsCharFXTransform
	class
}

func (self CharFXTransform) RefCounted() RefCounted {
	var parent RefCounted
	parent.class = self.class
	return parent
}
func (self CharFXTransform) GetTransform() Transform2D {
	return self.Runtime.CharFXTransform_get_transform(self)
}
func (self CharFXTransform) SetTransform(transform Transform2D) {
	self.Runtime.CharFXTransform_set_transform(self, transform)
}
func (self CharFXTransform) GetRange() Vector2i {
	return self.Runtime.CharFXTransform_get_range(self)
}
func (self CharFXTransform) SetRange(arange Vector2i) {
	self.Runtime.CharFXTransform_set_range(self, arange)
}
func (self CharFXTransform) GetElapsedTime() Float {
	return self.Runtime.CharFXTransform_get_elapsed_time(self)
}
func (self CharFXTransform) SetElapsedTime(time Float) {
	self.Runtime.CharFXTransform_set_elapsed_time(self, time)
}
func (self CharFXTransform) IsVisible() bool {
	return self.Runtime.CharFXTransform_is_visible(self)
}
func (self CharFXTransform) SetVisibility(visibility bool) {
	self.Runtime.CharFXTransform_set_visibility(self, visibility)
}
func (self CharFXTransform) IsOutline() bool {
	return self.Runtime.CharFXTransform_is_outline(self)
}
func (self CharFXTransform) SetOutline(outline bool) {
	self.Runtime.CharFXTransform_set_outline(self, outline)
}
func (self CharFXTransform) GetOffset() Vector2 {
	return self.Runtime.CharFXTransform_get_offset(self)
}
func (self CharFXTransform) SetOffset(offset Vector2) {
	self.Runtime.CharFXTransform_set_offset(self, offset)
}
func (self CharFXTransform) GetColor() Color {
	return self.Runtime.CharFXTransform_get_color(self)
}
func (self CharFXTransform) SetColor(color Color) {
	self.Runtime.CharFXTransform_set_color(self, color)
}
func (self CharFXTransform) GetEnvironment() Dictionary {
	return self.Runtime.CharFXTransform_get_environment(self)
}
func (self CharFXTransform) SetEnvironment(environment Dictionary) {
	self.Runtime.CharFXTransform_set_environment(self, environment)
}
func (self CharFXTransform) GetGlyphIndex() int64 {
	return self.Runtime.CharFXTransform_get_glyph_index(self)
}
func (self CharFXTransform) SetGlyphIndex(glyph_index int64) {
	self.Runtime.CharFXTransform_set_glyph_index(self, glyph_index)
}
func (self CharFXTransform) GetRelativeIndex() int64 {
	return self.Runtime.CharFXTransform_get_relative_index(self)
}
func (self CharFXTransform) SetRelativeIndex(relative_index int64) {
	self.Runtime.CharFXTransform_set_relative_index(self, relative_index)
}
func (self CharFXTransform) GetGlyphCount() int64 {
	return self.Runtime.CharFXTransform_get_glyph_count(self)
}
func (self CharFXTransform) SetGlyphCount(glyph_count int64) {
	self.Runtime.CharFXTransform_set_glyph_count(self, glyph_count)
}
func (self CharFXTransform) GetGlyphFlags() int64 {
	return self.Runtime.CharFXTransform_get_glyph_flags(self)
}
func (self CharFXTransform) SetGlyphFlags(glyph_flags int64) {
	self.Runtime.CharFXTransform_set_glyph_flags(self, glyph_flags)
}
func (self CharFXTransform) GetFont() RID {
	return self.Runtime.CharFXTransform_get_font(self)
}
func (self CharFXTransform) SetFont(font RID) {
	self.Runtime.CharFXTransform_set_font(self, font)
}

type extendsCharacterBody2D struct {
	_ [0]*extendsCharacterBody2D
	class
}

func (self CharacterBody2D) PhysicsBody2D() PhysicsBody2D {
	var parent PhysicsBody2D
	parent.class = self.class
	return parent
}
func (self CharacterBody2D) MoveAndSlide() bool {
	return self.Runtime.CharacterBody2D_move_and_slide(self)
}
func (self CharacterBody2D) ApplyFloorSnap() {
	self.Runtime.CharacterBody2D_apply_floor_snap(self)
}
func (self CharacterBody2D) SetVelocity(velocity Vector2) {
	self.Runtime.CharacterBody2D_set_velocity(self, velocity)
}
func (self CharacterBody2D) GetVelocity() Vector2 {
	return self.Runtime.CharacterBody2D_get_velocity(self)
}
func (self CharacterBody2D) SetSafeMargin(margin Float) {
	self.Runtime.CharacterBody2D_set_safe_margin(self, margin)
}
func (self CharacterBody2D) GetSafeMargin() Float {
	return self.Runtime.CharacterBody2D_get_safe_margin(self)
}
func (self CharacterBody2D) IsFloorStopOnSlopeEnabled() bool {
	return self.Runtime.CharacterBody2D_is_floor_stop_on_slope_enabled(self)
}
func (self CharacterBody2D) SetFloorStopOnSlopeEnabled(enabled bool) {
	self.Runtime.CharacterBody2D_set_floor_stop_on_slope_enabled(self, enabled)
}
func (self CharacterBody2D) SetFloorConstantSpeedEnabled(enabled bool) {
	self.Runtime.CharacterBody2D_set_floor_constant_speed_enabled(self, enabled)
}
func (self CharacterBody2D) IsFloorConstantSpeedEnabled() bool {
	return self.Runtime.CharacterBody2D_is_floor_constant_speed_enabled(self)
}
func (self CharacterBody2D) SetFloorBlockOnWallEnabled(enabled bool) {
	self.Runtime.CharacterBody2D_set_floor_block_on_wall_enabled(self, enabled)
}
func (self CharacterBody2D) IsFloorBlockOnWallEnabled() bool {
	return self.Runtime.CharacterBody2D_is_floor_block_on_wall_enabled(self)
}
func (self CharacterBody2D) SetSlideOnCeilingEnabled(enabled bool) {
	self.Runtime.CharacterBody2D_set_slide_on_ceiling_enabled(self, enabled)
}
func (self CharacterBody2D) IsSlideOnCeilingEnabled() bool {
	return self.Runtime.CharacterBody2D_is_slide_on_ceiling_enabled(self)
}
func (self CharacterBody2D) SetPlatformFloorLayers(exclude_layer int64) {
	self.Runtime.CharacterBody2D_set_platform_floor_layers(self, exclude_layer)
}
func (self CharacterBody2D) GetPlatformFloorLayers() int64 {
	return self.Runtime.CharacterBody2D_get_platform_floor_layers(self)
}
func (self CharacterBody2D) SetPlatformWallLayers(exclude_layer int64) {
	self.Runtime.CharacterBody2D_set_platform_wall_layers(self, exclude_layer)
}
func (self CharacterBody2D) GetPlatformWallLayers() int64 {
	return self.Runtime.CharacterBody2D_get_platform_wall_layers(self)
}
func (self CharacterBody2D) GetMaxSlides() int64 {
	return self.Runtime.CharacterBody2D_get_max_slides(self)
}
func (self CharacterBody2D) SetMaxSlides(max_slides int64) {
	self.Runtime.CharacterBody2D_set_max_slides(self, max_slides)
}
func (self CharacterBody2D) GetFloorMaxAngle() Float {
	return self.Runtime.CharacterBody2D_get_floor_max_angle(self)
}
func (self CharacterBody2D) SetFloorMaxAngle(radians Float) {
	self.Runtime.CharacterBody2D_set_floor_max_angle(self, radians)
}
func (self CharacterBody2D) GetFloorSnapLength() Float {
	return self.Runtime.CharacterBody2D_get_floor_snap_length(self)
}
func (self CharacterBody2D) SetFloorSnapLength(floor_snap_length Float) {
	self.Runtime.CharacterBody2D_set_floor_snap_length(self, floor_snap_length)
}
func (self CharacterBody2D) GetWallMinSlideAngle() Float {
	return self.Runtime.CharacterBody2D_get_wall_min_slide_angle(self)
}
func (self CharacterBody2D) SetWallMinSlideAngle(radians Float) {
	self.Runtime.CharacterBody2D_set_wall_min_slide_angle(self, radians)
}
func (self CharacterBody2D) GetUpDirection() Vector2 {
	return self.Runtime.CharacterBody2D_get_up_direction(self)
}
func (self CharacterBody2D) SetUpDirection(up_direction Vector2) {
	self.Runtime.CharacterBody2D_set_up_direction(self, up_direction)
}
func (self CharacterBody2D) SetMotionMode(mode CharacterBody2DMotionMode) {
	self.Runtime.CharacterBody2D_set_motion_mode(self, mode)
}
func (self CharacterBody2D) GetMotionMode() CharacterBody2DMotionMode {
	return self.Runtime.CharacterBody2D_get_motion_mode(self)
}
func (self CharacterBody2D) SetPlatformOnLeave(on_leave_apply_velocity CharacterBody2DPlatformOnLeave) {
	self.Runtime.CharacterBody2D_set_platform_on_leave(self, on_leave_apply_velocity)
}
func (self CharacterBody2D) GetPlatformOnLeave() CharacterBody2DPlatformOnLeave {
	return self.Runtime.CharacterBody2D_get_platform_on_leave(self)
}
func (self CharacterBody2D) IsOnFloor() bool {
	return self.Runtime.CharacterBody2D_is_on_floor(self)
}
func (self CharacterBody2D) IsOnFloorOnly() bool {
	return self.Runtime.CharacterBody2D_is_on_floor_only(self)
}
func (self CharacterBody2D) IsOnCeiling() bool {
	return self.Runtime.CharacterBody2D_is_on_ceiling(self)
}
func (self CharacterBody2D) IsOnCeilingOnly() bool {
	return self.Runtime.CharacterBody2D_is_on_ceiling_only(self)
}
func (self CharacterBody2D) IsOnWall() bool {
	return self.Runtime.CharacterBody2D_is_on_wall(self)
}
func (self CharacterBody2D) IsOnWallOnly() bool {
	return self.Runtime.CharacterBody2D_is_on_wall_only(self)
}
func (self CharacterBody2D) GetFloorNormal() Vector2 {
	return self.Runtime.CharacterBody2D_get_floor_normal(self)
}
func (self CharacterBody2D) GetWallNormal() Vector2 {
	return self.Runtime.CharacterBody2D_get_wall_normal(self)
}
func (self CharacterBody2D) GetLastMotion() Vector2 {
	return self.Runtime.CharacterBody2D_get_last_motion(self)
}
func (self CharacterBody2D) GetPositionDelta() Vector2 {
	return self.Runtime.CharacterBody2D_get_position_delta(self)
}
func (self CharacterBody2D) GetRealVelocity() Vector2 {
	return self.Runtime.CharacterBody2D_get_real_velocity(self)
}
func (self CharacterBody2D) GetFloorAngle(up_direction Vector2) Float {
	return self.Runtime.CharacterBody2D_get_floor_angle(self, up_direction)
}
func (self CharacterBody2D) GetPlatformVelocity() Vector2 {
	return self.Runtime.CharacterBody2D_get_platform_velocity(self)
}
func (self CharacterBody2D) GetSlideCollisionCount() int64 {
	return self.Runtime.CharacterBody2D_get_slide_collision_count(self)
}
func (self CharacterBody2D) GetSlideCollision(slide_idx int64) KinematicCollision2D {
	return self.Runtime.CharacterBody2D_get_slide_collision(self, slide_idx)
}
func (self CharacterBody2D) GetLastSlideCollision() KinematicCollision2D {
	return self.Runtime.CharacterBody2D_get_last_slide_collision(self)
}

type extendsCharacterBody3D struct {
	_ [0]*extendsCharacterBody3D
	class
}

func (self CharacterBody3D) PhysicsBody3D() PhysicsBody3D {
	var parent PhysicsBody3D
	parent.class = self.class
	return parent
}
func (self CharacterBody3D) MoveAndSlide() bool {
	return self.Runtime.CharacterBody3D_move_and_slide(self)
}
func (self CharacterBody3D) ApplyFloorSnap() {
	self.Runtime.CharacterBody3D_apply_floor_snap(self)
}
func (self CharacterBody3D) SetVelocity(velocity Vector3) {
	self.Runtime.CharacterBody3D_set_velocity(self, velocity)
}
func (self CharacterBody3D) GetVelocity() Vector3 {
	return self.Runtime.CharacterBody3D_get_velocity(self)
}
func (self CharacterBody3D) SetSafeMargin(margin Float) {
	self.Runtime.CharacterBody3D_set_safe_margin(self, margin)
}
func (self CharacterBody3D) GetSafeMargin() Float {
	return self.Runtime.CharacterBody3D_get_safe_margin(self)
}
func (self CharacterBody3D) IsFloorStopOnSlopeEnabled() bool {
	return self.Runtime.CharacterBody3D_is_floor_stop_on_slope_enabled(self)
}
func (self CharacterBody3D) SetFloorStopOnSlopeEnabled(enabled bool) {
	self.Runtime.CharacterBody3D_set_floor_stop_on_slope_enabled(self, enabled)
}
func (self CharacterBody3D) SetFloorConstantSpeedEnabled(enabled bool) {
	self.Runtime.CharacterBody3D_set_floor_constant_speed_enabled(self, enabled)
}
func (self CharacterBody3D) IsFloorConstantSpeedEnabled() bool {
	return self.Runtime.CharacterBody3D_is_floor_constant_speed_enabled(self)
}
func (self CharacterBody3D) SetFloorBlockOnWallEnabled(enabled bool) {
	self.Runtime.CharacterBody3D_set_floor_block_on_wall_enabled(self, enabled)
}
func (self CharacterBody3D) IsFloorBlockOnWallEnabled() bool {
	return self.Runtime.CharacterBody3D_is_floor_block_on_wall_enabled(self)
}
func (self CharacterBody3D) SetSlideOnCeilingEnabled(enabled bool) {
	self.Runtime.CharacterBody3D_set_slide_on_ceiling_enabled(self, enabled)
}
func (self CharacterBody3D) IsSlideOnCeilingEnabled() bool {
	return self.Runtime.CharacterBody3D_is_slide_on_ceiling_enabled(self)
}
func (self CharacterBody3D) SetPlatformFloorLayers(exclude_layer int64) {
	self.Runtime.CharacterBody3D_set_platform_floor_layers(self, exclude_layer)
}
func (self CharacterBody3D) GetPlatformFloorLayers() int64 {
	return self.Runtime.CharacterBody3D_get_platform_floor_layers(self)
}
func (self CharacterBody3D) SetPlatformWallLayers(exclude_layer int64) {
	self.Runtime.CharacterBody3D_set_platform_wall_layers(self, exclude_layer)
}
func (self CharacterBody3D) GetPlatformWallLayers() int64 {
	return self.Runtime.CharacterBody3D_get_platform_wall_layers(self)
}
func (self CharacterBody3D) GetMaxSlides() int64 {
	return self.Runtime.CharacterBody3D_get_max_slides(self)
}
func (self CharacterBody3D) SetMaxSlides(max_slides int64) {
	self.Runtime.CharacterBody3D_set_max_slides(self, max_slides)
}
func (self CharacterBody3D) GetFloorMaxAngle() Float {
	return self.Runtime.CharacterBody3D_get_floor_max_angle(self)
}
func (self CharacterBody3D) SetFloorMaxAngle(radians Float) {
	self.Runtime.CharacterBody3D_set_floor_max_angle(self, radians)
}
func (self CharacterBody3D) GetFloorSnapLength() Float {
	return self.Runtime.CharacterBody3D_get_floor_snap_length(self)
}
func (self CharacterBody3D) SetFloorSnapLength(floor_snap_length Float) {
	self.Runtime.CharacterBody3D_set_floor_snap_length(self, floor_snap_length)
}
func (self CharacterBody3D) GetWallMinSlideAngle() Float {
	return self.Runtime.CharacterBody3D_get_wall_min_slide_angle(self)
}
func (self CharacterBody3D) SetWallMinSlideAngle(radians Float) {
	self.Runtime.CharacterBody3D_set_wall_min_slide_angle(self, radians)
}
func (self CharacterBody3D) GetUpDirection() Vector3 {
	return self.Runtime.CharacterBody3D_get_up_direction(self)
}
func (self CharacterBody3D) SetUpDirection(up_direction Vector3) {
	self.Runtime.CharacterBody3D_set_up_direction(self, up_direction)
}
func (self CharacterBody3D) SetMotionMode(mode CharacterBody3DMotionMode) {
	self.Runtime.CharacterBody3D_set_motion_mode(self, mode)
}
func (self CharacterBody3D) GetMotionMode() CharacterBody3DMotionMode {
	return self.Runtime.CharacterBody3D_get_motion_mode(self)
}
func (self CharacterBody3D) SetPlatformOnLeave(on_leave_apply_velocity CharacterBody3DPlatformOnLeave) {
	self.Runtime.CharacterBody3D_set_platform_on_leave(self, on_leave_apply_velocity)
}
func (self CharacterBody3D) GetPlatformOnLeave() CharacterBody3DPlatformOnLeave {
	return self.Runtime.CharacterBody3D_get_platform_on_leave(self)
}
func (self CharacterBody3D) IsOnFloor() bool {
	return self.Runtime.CharacterBody3D_is_on_floor(self)
}
func (self CharacterBody3D) IsOnFloorOnly() bool {
	return self.Runtime.CharacterBody3D_is_on_floor_only(self)
}
func (self CharacterBody3D) IsOnCeiling() bool {
	return self.Runtime.CharacterBody3D_is_on_ceiling(self)
}
func (self CharacterBody3D) IsOnCeilingOnly() bool {
	return self.Runtime.CharacterBody3D_is_on_ceiling_only(self)
}
func (self CharacterBody3D) IsOnWall() bool {
	return self.Runtime.CharacterBody3D_is_on_wall(self)
}
func (self CharacterBody3D) IsOnWallOnly() bool {
	return self.Runtime.CharacterBody3D_is_on_wall_only(self)
}
func (self CharacterBody3D) GetFloorNormal() Vector3 {
	return self.Runtime.CharacterBody3D_get_floor_normal(self)
}
func (self CharacterBody3D) GetWallNormal() Vector3 {
	return self.Runtime.CharacterBody3D_get_wall_normal(self)
}
func (self CharacterBody3D) GetLastMotion() Vector3 {
	return self.Runtime.CharacterBody3D_get_last_motion(self)
}
func (self CharacterBody3D) GetPositionDelta() Vector3 {
	return self.Runtime.CharacterBody3D_get_position_delta(self)
}
func (self CharacterBody3D) GetRealVelocity() Vector3 {
	return self.Runtime.CharacterBody3D_get_real_velocity(self)
}
func (self CharacterBody3D) GetFloorAngle(up_direction Vector3) Float {
	return self.Runtime.CharacterBody3D_get_floor_angle(self, up_direction)
}
func (self CharacterBody3D) GetPlatformVelocity() Vector3 {
	return self.Runtime.CharacterBody3D_get_platform_velocity(self)
}
func (self CharacterBody3D) GetPlatformAngularVelocity() Vector3 {
	return self.Runtime.CharacterBody3D_get_platform_angular_velocity(self)
}
func (self CharacterBody3D) GetSlideCollisionCount() int64 {
	return self.Runtime.CharacterBody3D_get_slide_collision_count(self)
}
func (self CharacterBody3D) GetSlideCollision(slide_idx int64) KinematicCollision3D {
	return self.Runtime.CharacterBody3D_get_slide_collision(self, slide_idx)
}
func (self CharacterBody3D) GetLastSlideCollision() KinematicCollision3D {
	return self.Runtime.CharacterBody3D_get_last_slide_collision(self)
}

type extendsCheckBox struct {
	_ [0]*extendsCheckBox
	class
}

func (self CheckBox) Button() Button { var parent Button; parent.class = self.class; return parent }

type extendsCheckButton struct {
	_ [0]*extendsCheckButton
	class
}

func (self CheckButton) Button() Button { var parent Button; parent.class = self.class; return parent }

type extendsCircleShape2D struct {
	_ [0]*extendsCircleShape2D
	class
}

func (self CircleShape2D) Shape2D() Shape2D {
	var parent Shape2D
	parent.class = self.class
	return parent
}
func (self CircleShape2D) SetRadius(radius Float) {
	self.Runtime.CircleShape2D_set_radius(self, radius)
}
func (self CircleShape2D) GetRadius() Float {
	return self.Runtime.CircleShape2D_get_radius(self)
}

type extendsClassDB struct {
	_ [0]*extendsClassDB
	class
}

func (self ClassDB) Object() Object { var parent Object; parent.class = self.class; return parent }
func (self ClassDB) GetClassList() PackedStringArray {
	return self.Runtime.ClassDB_get_class_list(self)
}
func (self ClassDB) GetInheritersFromClass(class string) PackedStringArray {
	return self.Runtime.ClassDB_get_inheriters_from_class(self, class)
}
func (self ClassDB) GetParentClass(class string) string {
	return self.Runtime.ClassDB_get_parent_class(self, class)
}
func (self ClassDB) ClassExists(class string) bool {
	return self.Runtime.ClassDB_class_exists(self, class)
}
func (self ClassDB) IsParentClass(class string, inherits string) bool {
	return self.Runtime.ClassDB_is_parent_class(self, class, inherits)
}
func (self ClassDB) CanInstantiate(class string) bool {
	return self.Runtime.ClassDB_can_instantiate(self, class)
}
func (self ClassDB) Instantiate(class string) any {
	return self.Runtime.ClassDB_instantiate(self, class)
}
func (self ClassDB) ClassHasSignal(class string, signal string) bool {
	return self.Runtime.ClassDB_class_has_signal(self, class, signal)
}
func (self ClassDB) ClassGetSignal(class string, signal string) Dictionary {
	return self.Runtime.ClassDB_class_get_signal(self, class, signal)
}
func (self ClassDB) ClassGetSignalList(class string, no_inheritance bool) ArrayOf[Dictionary] {
	return self.Runtime.ClassDB_class_get_signal_list(self, class, no_inheritance)
}
func (self ClassDB) ClassGetPropertyList(class string, no_inheritance bool) ArrayOf[Dictionary] {
	return self.Runtime.ClassDB_class_get_property_list(self, class, no_inheritance)
}
func (self ClassDB) ClassGetProperty(object Object, property string) any {
	return self.Runtime.ClassDB_class_get_property(self, object, property)
}
func (self ClassDB) ClassSetProperty(object Object, property string, value any) int64 {
	return self.Runtime.ClassDB_class_set_property(self, object, property, value)
}
func (self ClassDB) ClassHasMethod(class string, method string, no_inheritance bool) bool {
	return self.Runtime.ClassDB_class_has_method(self, class, method, no_inheritance)
}
func (self ClassDB) ClassGetMethodList(class string, no_inheritance bool) ArrayOf[Dictionary] {
	return self.Runtime.ClassDB_class_get_method_list(self, class, no_inheritance)
}
func (self ClassDB) ClassGetIntegerConstantList(class string, no_inheritance bool) PackedStringArray {
	return self.Runtime.ClassDB_class_get_integer_constant_list(self, class, no_inheritance)
}
func (self ClassDB) ClassHasIntegerConstant(class string, name string) bool {
	return self.Runtime.ClassDB_class_has_integer_constant(self, class, name)
}
func (self ClassDB) ClassGetIntegerConstant(class string, name string) int64 {
	return self.Runtime.ClassDB_class_get_integer_constant(self, class, name)
}
func (self ClassDB) ClassHasEnum(class string, name string, no_inheritance bool) bool {
	return self.Runtime.ClassDB_class_has_enum(self, class, name, no_inheritance)
}
func (self ClassDB) ClassGetEnumList(class string, no_inheritance bool) PackedStringArray {
	return self.Runtime.ClassDB_class_get_enum_list(self, class, no_inheritance)
}
func (self ClassDB) ClassGetEnumConstants(class string, enum string, no_inheritance bool) PackedStringArray {
	return self.Runtime.ClassDB_class_get_enum_constants(self, class, enum, no_inheritance)
}
func (self ClassDB) ClassGetIntegerConstantEnum(class string, name string, no_inheritance bool) string {
	return self.Runtime.ClassDB_class_get_integer_constant_enum(self, class, name, no_inheritance)
}
func (self ClassDB) IsClassEnabled(class string) bool {
	return self.Runtime.ClassDB_is_class_enabled(self, class)
}

type extendsCodeEdit struct {
	_ [0]*extendsCodeEdit
	class
}

func (self CodeEdit) TextEdit() TextEdit {
	var parent TextEdit
	parent.class = self.class
	return parent
}
func (self CodeEdit) SetIndentSize(size int64) {
	self.Runtime.CodeEdit_set_indent_size(self, size)
}
func (self CodeEdit) GetIndentSize() int64 {
	return self.Runtime.CodeEdit_get_indent_size(self)
}
func (self CodeEdit) SetIndentUsingSpaces(use_spaces bool) {
	self.Runtime.CodeEdit_set_indent_using_spaces(self, use_spaces)
}
func (self CodeEdit) IsIndentUsingSpaces() bool {
	return self.Runtime.CodeEdit_is_indent_using_spaces(self)
}
func (self CodeEdit) SetAutoIndentEnabled(enable bool) {
	self.Runtime.CodeEdit_set_auto_indent_enabled(self, enable)
}
func (self CodeEdit) IsAutoIndentEnabled() bool {
	return self.Runtime.CodeEdit_is_auto_indent_enabled(self)
}
func (self CodeEdit) SetAutoIndentPrefixes(prefixes ArrayOf[string]) {
	self.Runtime.CodeEdit_set_auto_indent_prefixes(self, prefixes)
}
func (self CodeEdit) GetAutoIndentPrefixes() ArrayOf[string] {
	return self.Runtime.CodeEdit_get_auto_indent_prefixes(self)
}
func (self CodeEdit) DoIndent() {
	self.Runtime.CodeEdit_do_indent(self)
}
func (self CodeEdit) IndentLines() {
	self.Runtime.CodeEdit_indent_lines(self)
}
func (self CodeEdit) UnindentLines() {
	self.Runtime.CodeEdit_unindent_lines(self)
}
func (self CodeEdit) ConvertIndent(from_line int64, to_line int64) {
	self.Runtime.CodeEdit_convert_indent(self, from_line, to_line)
}
func (self CodeEdit) SetAutoBraceCompletionEnabled(enable bool) {
	self.Runtime.CodeEdit_set_auto_brace_completion_enabled(self, enable)
}
func (self CodeEdit) IsAutoBraceCompletionEnabled() bool {
	return self.Runtime.CodeEdit_is_auto_brace_completion_enabled(self)
}
func (self CodeEdit) SetHighlightMatchingBracesEnabled(enable bool) {
	self.Runtime.CodeEdit_set_highlight_matching_braces_enabled(self, enable)
}
func (self CodeEdit) IsHighlightMatchingBracesEnabled() bool {
	return self.Runtime.CodeEdit_is_highlight_matching_braces_enabled(self)
}
func (self CodeEdit) AddAutoBraceCompletionPair(start_key string, end_key string) {
	self.Runtime.CodeEdit_add_auto_brace_completion_pair(self, start_key, end_key)
}
func (self CodeEdit) SetAutoBraceCompletionPairs(pairs Dictionary) {
	self.Runtime.CodeEdit_set_auto_brace_completion_pairs(self, pairs)
}
func (self CodeEdit) GetAutoBraceCompletionPairs() Dictionary {
	return self.Runtime.CodeEdit_get_auto_brace_completion_pairs(self)
}
func (self CodeEdit) HasAutoBraceCompletionOpenKey(open_key string) bool {
	return self.Runtime.CodeEdit_has_auto_brace_completion_open_key(self, open_key)
}
func (self CodeEdit) HasAutoBraceCompletionCloseKey(close_key string) bool {
	return self.Runtime.CodeEdit_has_auto_brace_completion_close_key(self, close_key)
}
func (self CodeEdit) GetAutoBraceCompletionCloseKey(open_key string) string {
	return self.Runtime.CodeEdit_get_auto_brace_completion_close_key(self, open_key)
}
func (self CodeEdit) SetDrawBreakpointsGutter(enable bool) {
	self.Runtime.CodeEdit_set_draw_breakpoints_gutter(self, enable)
}
func (self CodeEdit) IsDrawingBreakpointsGutter() bool {
	return self.Runtime.CodeEdit_is_drawing_breakpoints_gutter(self)
}
func (self CodeEdit) SetDrawBookmarksGutter(enable bool) {
	self.Runtime.CodeEdit_set_draw_bookmarks_gutter(self, enable)
}
func (self CodeEdit) IsDrawingBookmarksGutter() bool {
	return self.Runtime.CodeEdit_is_drawing_bookmarks_gutter(self)
}
func (self CodeEdit) SetDrawExecutingLinesGutter(enable bool) {
	self.Runtime.CodeEdit_set_draw_executing_lines_gutter(self, enable)
}
func (self CodeEdit) IsDrawingExecutingLinesGutter() bool {
	return self.Runtime.CodeEdit_is_drawing_executing_lines_gutter(self)
}
func (self CodeEdit) SetLineAsBreakpoint(line int64, breakpointed bool) {
	self.Runtime.CodeEdit_set_line_as_breakpoint(self, line, breakpointed)
}
func (self CodeEdit) IsLineBreakpointed(line int64) bool {
	return self.Runtime.CodeEdit_is_line_breakpointed(self, line)
}
func (self CodeEdit) ClearBreakpointedLines() {
	self.Runtime.CodeEdit_clear_breakpointed_lines(self)
}
func (self CodeEdit) GetBreakpointedLines() PackedInt32Array {
	return self.Runtime.CodeEdit_get_breakpointed_lines(self)
}
func (self CodeEdit) SetLineAsBookmarked(line int64, bookmarked bool) {
	self.Runtime.CodeEdit_set_line_as_bookmarked(self, line, bookmarked)
}
func (self CodeEdit) IsLineBookmarked(line int64) bool {
	return self.Runtime.CodeEdit_is_line_bookmarked(self, line)
}
func (self CodeEdit) ClearBookmarkedLines() {
	self.Runtime.CodeEdit_clear_bookmarked_lines(self)
}
func (self CodeEdit) GetBookmarkedLines() PackedInt32Array {
	return self.Runtime.CodeEdit_get_bookmarked_lines(self)
}
func (self CodeEdit) SetLineAsExecuting(line int64, executing bool) {
	self.Runtime.CodeEdit_set_line_as_executing(self, line, executing)
}
func (self CodeEdit) IsLineExecuting(line int64) bool {
	return self.Runtime.CodeEdit_is_line_executing(self, line)
}
func (self CodeEdit) ClearExecutingLines() {
	self.Runtime.CodeEdit_clear_executing_lines(self)
}
func (self CodeEdit) GetExecutingLines() PackedInt32Array {
	return self.Runtime.CodeEdit_get_executing_lines(self)
}
func (self CodeEdit) SetDrawLineNumbers(enable bool) {
	self.Runtime.CodeEdit_set_draw_line_numbers(self, enable)
}
func (self CodeEdit) IsDrawLineNumbersEnabled() bool {
	return self.Runtime.CodeEdit_is_draw_line_numbers_enabled(self)
}
func (self CodeEdit) SetLineNumbersZeroPadded(enable bool) {
	self.Runtime.CodeEdit_set_line_numbers_zero_padded(self, enable)
}
func (self CodeEdit) IsLineNumbersZeroPadded() bool {
	return self.Runtime.CodeEdit_is_line_numbers_zero_padded(self)
}
func (self CodeEdit) SetDrawFoldGutter(enable bool) {
	self.Runtime.CodeEdit_set_draw_fold_gutter(self, enable)
}
func (self CodeEdit) IsDrawingFoldGutter() bool {
	return self.Runtime.CodeEdit_is_drawing_fold_gutter(self)
}
func (self CodeEdit) SetLineFoldingEnabled(enabled bool) {
	self.Runtime.CodeEdit_set_line_folding_enabled(self, enabled)
}
func (self CodeEdit) IsLineFoldingEnabled() bool {
	return self.Runtime.CodeEdit_is_line_folding_enabled(self)
}
func (self CodeEdit) CanFoldLine(line int64) bool {
	return self.Runtime.CodeEdit_can_fold_line(self, line)
}
func (self CodeEdit) FoldLine(line int64) {
	self.Runtime.CodeEdit_fold_line(self, line)
}
func (self CodeEdit) UnfoldLine(line int64) {
	self.Runtime.CodeEdit_unfold_line(self, line)
}
func (self CodeEdit) FoldAllLines() {
	self.Runtime.CodeEdit_fold_all_lines(self)
}
func (self CodeEdit) UnfoldAllLines() {
	self.Runtime.CodeEdit_unfold_all_lines(self)
}
func (self CodeEdit) ToggleFoldableLine(line int64) {
	self.Runtime.CodeEdit_toggle_foldable_line(self, line)
}
func (self CodeEdit) IsLineFolded(line int64) bool {
	return self.Runtime.CodeEdit_is_line_folded(self, line)
}
func (self CodeEdit) GetFoldedLines() ArrayOf[int64] {
	return self.Runtime.CodeEdit_get_folded_lines(self)
}
func (self CodeEdit) CreateCodeRegion() {
	self.Runtime.CodeEdit_create_code_region(self)
}
func (self CodeEdit) GetCodeRegionStartTag() string {
	return self.Runtime.CodeEdit_get_code_region_start_tag(self)
}
func (self CodeEdit) GetCodeRegionEndTag() string {
	return self.Runtime.CodeEdit_get_code_region_end_tag(self)
}
func (self CodeEdit) SetCodeRegionTags(start string, end string) {
	self.Runtime.CodeEdit_set_code_region_tags(self, start, end)
}
func (self CodeEdit) IsLineCodeRegionStart(line int64) bool {
	return self.Runtime.CodeEdit_is_line_code_region_start(self, line)
}
func (self CodeEdit) IsLineCodeRegionEnd(line int64) bool {
	return self.Runtime.CodeEdit_is_line_code_region_end(self, line)
}
func (self CodeEdit) AddStringDelimiter(start_key string, end_key string, line_only bool) {
	self.Runtime.CodeEdit_add_string_delimiter(self, start_key, end_key, line_only)
}
func (self CodeEdit) RemoveStringDelimiter(start_key string) {
	self.Runtime.CodeEdit_remove_string_delimiter(self, start_key)
}
func (self CodeEdit) HasStringDelimiter(start_key string) bool {
	return self.Runtime.CodeEdit_has_string_delimiter(self, start_key)
}
func (self CodeEdit) SetStringDelimiters(string_delimiters ArrayOf[string]) {
	self.Runtime.CodeEdit_set_string_delimiters(self, string_delimiters)
}
func (self CodeEdit) ClearStringDelimiters() {
	self.Runtime.CodeEdit_clear_string_delimiters(self)
}
func (self CodeEdit) GetStringDelimiters() ArrayOf[string] {
	return self.Runtime.CodeEdit_get_string_delimiters(self)
}
func (self CodeEdit) IsInString(line int64, column int64) int64 {
	return self.Runtime.CodeEdit_is_in_string(self, line, column)
}
func (self CodeEdit) AddCommentDelimiter(start_key string, end_key string, line_only bool) {
	self.Runtime.CodeEdit_add_comment_delimiter(self, start_key, end_key, line_only)
}
func (self CodeEdit) RemoveCommentDelimiter(start_key string) {
	self.Runtime.CodeEdit_remove_comment_delimiter(self, start_key)
}
func (self CodeEdit) HasCommentDelimiter(start_key string) bool {
	return self.Runtime.CodeEdit_has_comment_delimiter(self, start_key)
}
func (self CodeEdit) SetCommentDelimiters(comment_delimiters ArrayOf[string]) {
	self.Runtime.CodeEdit_set_comment_delimiters(self, comment_delimiters)
}
func (self CodeEdit) ClearCommentDelimiters() {
	self.Runtime.CodeEdit_clear_comment_delimiters(self)
}
func (self CodeEdit) GetCommentDelimiters() ArrayOf[string] {
	return self.Runtime.CodeEdit_get_comment_delimiters(self)
}
func (self CodeEdit) IsInComment(line int64, column int64) int64 {
	return self.Runtime.CodeEdit_is_in_comment(self, line, column)
}
func (self CodeEdit) GetDelimiterStartKey(delimiter_index int64) string {
	return self.Runtime.CodeEdit_get_delimiter_start_key(self, delimiter_index)
}
func (self CodeEdit) GetDelimiterEndKey(delimiter_index int64) string {
	return self.Runtime.CodeEdit_get_delimiter_end_key(self, delimiter_index)
}
func (self CodeEdit) GetDelimiterStartPosition(line int64, column int64) Vector2 {
	return self.Runtime.CodeEdit_get_delimiter_start_position(self, line, column)
}
func (self CodeEdit) GetDelimiterEndPosition(line int64, column int64) Vector2 {
	return self.Runtime.CodeEdit_get_delimiter_end_position(self, line, column)
}
func (self CodeEdit) SetCodeHint(code_hint string) {
	self.Runtime.CodeEdit_set_code_hint(self, code_hint)
}
func (self CodeEdit) SetCodeHintDrawBelow(draw_below bool) {
	self.Runtime.CodeEdit_set_code_hint_draw_below(self, draw_below)
}
func (self CodeEdit) GetTextForCodeCompletion() string {
	return self.Runtime.CodeEdit_get_text_for_code_completion(self)
}
func (self CodeEdit) RequestCodeCompletion(force bool) {
	self.Runtime.CodeEdit_request_code_completion(self, force)
}
func (self CodeEdit) AddCodeCompletionOption(atype CodeEditCodeCompletionKind, display_text string, insert_text string, text_color Color, icon Resource, value any, location int64) {
	self.Runtime.CodeEdit_add_code_completion_option(self, atype, display_text, insert_text, text_color, icon, value, location)
}
func (self CodeEdit) UpdateCodeCompletionOptions(force bool) {
	self.Runtime.CodeEdit_update_code_completion_options(self, force)
}
func (self CodeEdit) GetCodeCompletionOptions() ArrayOf[Dictionary] {
	return self.Runtime.CodeEdit_get_code_completion_options(self)
}
func (self CodeEdit) GetCodeCompletionOption(index int64) Dictionary {
	return self.Runtime.CodeEdit_get_code_completion_option(self, index)
}
func (self CodeEdit) GetCodeCompletionSelectedIndex() int64 {
	return self.Runtime.CodeEdit_get_code_completion_selected_index(self)
}
func (self CodeEdit) SetCodeCompletionSelectedIndex(index int64) {
	self.Runtime.CodeEdit_set_code_completion_selected_index(self, index)
}
func (self CodeEdit) ConfirmCodeCompletion(replace bool) {
	self.Runtime.CodeEdit_confirm_code_completion(self, replace)
}
func (self CodeEdit) CancelCodeCompletion() {
	self.Runtime.CodeEdit_cancel_code_completion(self)
}
func (self CodeEdit) SetCodeCompletionEnabled(enable bool) {
	self.Runtime.CodeEdit_set_code_completion_enabled(self, enable)
}
func (self CodeEdit) IsCodeCompletionEnabled() bool {
	return self.Runtime.CodeEdit_is_code_completion_enabled(self)
}
func (self CodeEdit) SetCodeCompletionPrefixes(prefixes ArrayOf[string]) {
	self.Runtime.CodeEdit_set_code_completion_prefixes(self, prefixes)
}
func (self CodeEdit) GetCodeCompletionPrefixes() ArrayOf[string] {
	return self.Runtime.CodeEdit_get_code_completion_prefixes(self)
}
func (self CodeEdit) SetLineLengthGuidelines(guideline_columns ArrayOf[int64]) {
	self.Runtime.CodeEdit_set_line_length_guidelines(self, guideline_columns)
}
func (self CodeEdit) GetLineLengthGuidelines() ArrayOf[int64] {
	return self.Runtime.CodeEdit_get_line_length_guidelines(self)
}
func (self CodeEdit) SetSymbolLookupOnClickEnabled(enable bool) {
	self.Runtime.CodeEdit_set_symbol_lookup_on_click_enabled(self, enable)
}
func (self CodeEdit) IsSymbolLookupOnClickEnabled() bool {
	return self.Runtime.CodeEdit_is_symbol_lookup_on_click_enabled(self)
}
func (self CodeEdit) GetTextForSymbolLookup() string {
	return self.Runtime.CodeEdit_get_text_for_symbol_lookup(self)
}
func (self CodeEdit) GetTextWithCursorChar(line int64, column int64) string {
	return self.Runtime.CodeEdit_get_text_with_cursor_char(self, line, column)
}
func (self CodeEdit) SetSymbolLookupWordAsValid(valid bool) {
	self.Runtime.CodeEdit_set_symbol_lookup_word_as_valid(self, valid)
}
func (self CodeEdit) DuplicateLines() {
	self.Runtime.CodeEdit_duplicate_lines(self)
}

type extendsCodeHighlighter struct {
	_ [0]*extendsCodeHighlighter
	class
}

func (self CodeHighlighter) SyntaxHighlighter() SyntaxHighlighter {
	var parent SyntaxHighlighter
	parent.class = self.class
	return parent
}
func (self CodeHighlighter) AddKeywordColor(keyword string, color Color) {
	self.Runtime.CodeHighlighter_add_keyword_color(self, keyword, color)
}
func (self CodeHighlighter) RemoveKeywordColor(keyword string) {
	self.Runtime.CodeHighlighter_remove_keyword_color(self, keyword)
}
func (self CodeHighlighter) HasKeywordColor(keyword string) bool {
	return self.Runtime.CodeHighlighter_has_keyword_color(self, keyword)
}
func (self CodeHighlighter) GetKeywordColor(keyword string) Color {
	return self.Runtime.CodeHighlighter_get_keyword_color(self, keyword)
}
func (self CodeHighlighter) SetKeywordColors(keywords Dictionary) {
	self.Runtime.CodeHighlighter_set_keyword_colors(self, keywords)
}
func (self CodeHighlighter) ClearKeywordColors() {
	self.Runtime.CodeHighlighter_clear_keyword_colors(self)
}
func (self CodeHighlighter) GetKeywordColors() Dictionary {
	return self.Runtime.CodeHighlighter_get_keyword_colors(self)
}
func (self CodeHighlighter) AddMemberKeywordColor(member_keyword string, color Color) {
	self.Runtime.CodeHighlighter_add_member_keyword_color(self, member_keyword, color)
}
func (self CodeHighlighter) RemoveMemberKeywordColor(member_keyword string) {
	self.Runtime.CodeHighlighter_remove_member_keyword_color(self, member_keyword)
}
func (self CodeHighlighter) HasMemberKeywordColor(member_keyword string) bool {
	return self.Runtime.CodeHighlighter_has_member_keyword_color(self, member_keyword)
}
func (self CodeHighlighter) GetMemberKeywordColor(member_keyword string) Color {
	return self.Runtime.CodeHighlighter_get_member_keyword_color(self, member_keyword)
}
func (self CodeHighlighter) SetMemberKeywordColors(member_keyword Dictionary) {
	self.Runtime.CodeHighlighter_set_member_keyword_colors(self, member_keyword)
}
func (self CodeHighlighter) ClearMemberKeywordColors() {
	self.Runtime.CodeHighlighter_clear_member_keyword_colors(self)
}
func (self CodeHighlighter) GetMemberKeywordColors() Dictionary {
	return self.Runtime.CodeHighlighter_get_member_keyword_colors(self)
}
func (self CodeHighlighter) AddColorRegion(start_key string, end_key string, color Color, line_only bool) {
	self.Runtime.CodeHighlighter_add_color_region(self, start_key, end_key, color, line_only)
}
func (self CodeHighlighter) RemoveColorRegion(start_key string) {
	self.Runtime.CodeHighlighter_remove_color_region(self, start_key)
}
func (self CodeHighlighter) HasColorRegion(start_key string) bool {
	return self.Runtime.CodeHighlighter_has_color_region(self, start_key)
}
func (self CodeHighlighter) SetColorRegions(color_regions Dictionary) {
	self.Runtime.CodeHighlighter_set_color_regions(self, color_regions)
}
func (self CodeHighlighter) ClearColorRegions() {
	self.Runtime.CodeHighlighter_clear_color_regions(self)
}
func (self CodeHighlighter) GetColorRegions() Dictionary {
	return self.Runtime.CodeHighlighter_get_color_regions(self)
}
func (self CodeHighlighter) SetFunctionColor(color Color) {
	self.Runtime.CodeHighlighter_set_function_color(self, color)
}
func (self CodeHighlighter) GetFunctionColor() Color {
	return self.Runtime.CodeHighlighter_get_function_color(self)
}
func (self CodeHighlighter) SetNumberColor(color Color) {
	self.Runtime.CodeHighlighter_set_number_color(self, color)
}
func (self CodeHighlighter) GetNumberColor() Color {
	return self.Runtime.CodeHighlighter_get_number_color(self)
}
func (self CodeHighlighter) SetSymbolColor(color Color) {
	self.Runtime.CodeHighlighter_set_symbol_color(self, color)
}
func (self CodeHighlighter) GetSymbolColor() Color {
	return self.Runtime.CodeHighlighter_get_symbol_color(self)
}
func (self CodeHighlighter) SetMemberVariableColor(color Color) {
	self.Runtime.CodeHighlighter_set_member_variable_color(self, color)
}
func (self CodeHighlighter) GetMemberVariableColor() Color {
	return self.Runtime.CodeHighlighter_get_member_variable_color(self)
}

type extendsCollisionObject2D struct {
	_ [0]*extendsCollisionObject2D
	class
}

func (self CollisionObject2D) Node2D() Node2D {
	var parent Node2D
	parent.class = self.class
	return parent
}
func (self CollisionObject2D) GetRid() RID {
	return self.Runtime.CollisionObject2D_get_rid(self)
}
func (self CollisionObject2D) SetCollisionLayer(layer int64) {
	self.Runtime.CollisionObject2D_set_collision_layer(self, layer)
}
func (self CollisionObject2D) GetCollisionLayer() int64 {
	return self.Runtime.CollisionObject2D_get_collision_layer(self)
}
func (self CollisionObject2D) SetCollisionMask(mask int64) {
	self.Runtime.CollisionObject2D_set_collision_mask(self, mask)
}
func (self CollisionObject2D) GetCollisionMask() int64 {
	return self.Runtime.CollisionObject2D_get_collision_mask(self)
}
func (self CollisionObject2D) SetCollisionLayerValue(layer_number int64, value bool) {
	self.Runtime.CollisionObject2D_set_collision_layer_value(self, layer_number, value)
}
func (self CollisionObject2D) GetCollisionLayerValue(layer_number int64) bool {
	return self.Runtime.CollisionObject2D_get_collision_layer_value(self, layer_number)
}
func (self CollisionObject2D) SetCollisionMaskValue(layer_number int64, value bool) {
	self.Runtime.CollisionObject2D_set_collision_mask_value(self, layer_number, value)
}
func (self CollisionObject2D) GetCollisionMaskValue(layer_number int64) bool {
	return self.Runtime.CollisionObject2D_get_collision_mask_value(self, layer_number)
}
func (self CollisionObject2D) SetCollisionPriority(priority Float) {
	self.Runtime.CollisionObject2D_set_collision_priority(self, priority)
}
func (self CollisionObject2D) GetCollisionPriority() Float {
	return self.Runtime.CollisionObject2D_get_collision_priority(self)
}
func (self CollisionObject2D) SetDisableMode(mode CollisionObject2DDisableMode) {
	self.Runtime.CollisionObject2D_set_disable_mode(self, mode)
}
func (self CollisionObject2D) GetDisableMode() CollisionObject2DDisableMode {
	return self.Runtime.CollisionObject2D_get_disable_mode(self)
}
func (self CollisionObject2D) SetPickable(enabled bool) {
	self.Runtime.CollisionObject2D_set_pickable(self, enabled)
}
func (self CollisionObject2D) IsPickable() bool {
	return self.Runtime.CollisionObject2D_is_pickable(self)
}
func (self CollisionObject2D) CreateShapeOwner(owner Object) int64 {
	return self.Runtime.CollisionObject2D_create_shape_owner(self, owner)
}
func (self CollisionObject2D) RemoveShapeOwner(owner_id int64) {
	self.Runtime.CollisionObject2D_remove_shape_owner(self, owner_id)
}
func (self CollisionObject2D) GetShapeOwners() PackedInt32Array {
	return self.Runtime.CollisionObject2D_get_shape_owners(self)
}
func (self CollisionObject2D) ShapeOwnerSetTransform(owner_id int64, transform Transform2D) {
	self.Runtime.CollisionObject2D_shape_owner_set_transform(self, owner_id, transform)
}
func (self CollisionObject2D) ShapeOwnerGetTransform(owner_id int64) Transform2D {
	return self.Runtime.CollisionObject2D_shape_owner_get_transform(self, owner_id)
}
func (self CollisionObject2D) ShapeOwnerGetOwner(owner_id int64) Object {
	return self.Runtime.CollisionObject2D_shape_owner_get_owner(self, owner_id)
}
func (self CollisionObject2D) ShapeOwnerSetDisabled(owner_id int64, disabled bool) {
	self.Runtime.CollisionObject2D_shape_owner_set_disabled(self, owner_id, disabled)
}
func (self CollisionObject2D) IsShapeOwnerDisabled(owner_id int64) bool {
	return self.Runtime.CollisionObject2D_is_shape_owner_disabled(self, owner_id)
}
func (self CollisionObject2D) ShapeOwnerSetOneWayCollision(owner_id int64, enable bool) {
	self.Runtime.CollisionObject2D_shape_owner_set_one_way_collision(self, owner_id, enable)
}
func (self CollisionObject2D) IsShapeOwnerOneWayCollisionEnabled(owner_id int64) bool {
	return self.Runtime.CollisionObject2D_is_shape_owner_one_way_collision_enabled(self, owner_id)
}
func (self CollisionObject2D) ShapeOwnerSetOneWayCollisionMargin(owner_id int64, margin Float) {
	self.Runtime.CollisionObject2D_shape_owner_set_one_way_collision_margin(self, owner_id, margin)
}
func (self CollisionObject2D) GetShapeOwnerOneWayCollisionMargin(owner_id int64) Float {
	return self.Runtime.CollisionObject2D_get_shape_owner_one_way_collision_margin(self, owner_id)
}
func (self CollisionObject2D) ShapeOwnerAddShape(owner_id int64, shape Shape2D) {
	self.Runtime.CollisionObject2D_shape_owner_add_shape(self, owner_id, shape)
}
func (self CollisionObject2D) ShapeOwnerGetShapeCount(owner_id int64) int64 {
	return self.Runtime.CollisionObject2D_shape_owner_get_shape_count(self, owner_id)
}
func (self CollisionObject2D) ShapeOwnerGetShape(owner_id int64, shape_id int64) Shape2D {
	return self.Runtime.CollisionObject2D_shape_owner_get_shape(self, owner_id, shape_id)
}
func (self CollisionObject2D) ShapeOwnerGetShapeIndex(owner_id int64, shape_id int64) int64 {
	return self.Runtime.CollisionObject2D_shape_owner_get_shape_index(self, owner_id, shape_id)
}
func (self CollisionObject2D) ShapeOwnerRemoveShape(owner_id int64, shape_id int64) {
	self.Runtime.CollisionObject2D_shape_owner_remove_shape(self, owner_id, shape_id)
}
func (self CollisionObject2D) ShapeOwnerClearShapes(owner_id int64) {
	self.Runtime.CollisionObject2D_shape_owner_clear_shapes(self, owner_id)
}
func (self CollisionObject2D) ShapeFindOwner(shape_index int64) int64 {
	return self.Runtime.CollisionObject2D_shape_find_owner(self, shape_index)
}

type extendsCollisionObject3D struct {
	_ [0]*extendsCollisionObject3D
	class
}

func (self CollisionObject3D) Node3D() Node3D {
	var parent Node3D
	parent.class = self.class
	return parent
}
func (self CollisionObject3D) SetCollisionLayer(layer int64) {
	self.Runtime.CollisionObject3D_set_collision_layer(self, layer)
}
func (self CollisionObject3D) GetCollisionLayer() int64 {
	return self.Runtime.CollisionObject3D_get_collision_layer(self)
}
func (self CollisionObject3D) SetCollisionMask(mask int64) {
	self.Runtime.CollisionObject3D_set_collision_mask(self, mask)
}
func (self CollisionObject3D) GetCollisionMask() int64 {
	return self.Runtime.CollisionObject3D_get_collision_mask(self)
}
func (self CollisionObject3D) SetCollisionLayerValue(layer_number int64, value bool) {
	self.Runtime.CollisionObject3D_set_collision_layer_value(self, layer_number, value)
}
func (self CollisionObject3D) GetCollisionLayerValue(layer_number int64) bool {
	return self.Runtime.CollisionObject3D_get_collision_layer_value(self, layer_number)
}
func (self CollisionObject3D) SetCollisionMaskValue(layer_number int64, value bool) {
	self.Runtime.CollisionObject3D_set_collision_mask_value(self, layer_number, value)
}
func (self CollisionObject3D) GetCollisionMaskValue(layer_number int64) bool {
	return self.Runtime.CollisionObject3D_get_collision_mask_value(self, layer_number)
}
func (self CollisionObject3D) SetCollisionPriority(priority Float) {
	self.Runtime.CollisionObject3D_set_collision_priority(self, priority)
}
func (self CollisionObject3D) GetCollisionPriority() Float {
	return self.Runtime.CollisionObject3D_get_collision_priority(self)
}
func (self CollisionObject3D) SetDisableMode(mode CollisionObject3DDisableMode) {
	self.Runtime.CollisionObject3D_set_disable_mode(self, mode)
}
func (self CollisionObject3D) GetDisableMode() CollisionObject3DDisableMode {
	return self.Runtime.CollisionObject3D_get_disable_mode(self)
}
func (self CollisionObject3D) SetRayPickable(ray_pickable bool) {
	self.Runtime.CollisionObject3D_set_ray_pickable(self, ray_pickable)
}
func (self CollisionObject3D) IsRayPickable() bool {
	return self.Runtime.CollisionObject3D_is_ray_pickable(self)
}
func (self CollisionObject3D) SetCaptureInputOnDrag(enable bool) {
	self.Runtime.CollisionObject3D_set_capture_input_on_drag(self, enable)
}
func (self CollisionObject3D) GetCaptureInputOnDrag() bool {
	return self.Runtime.CollisionObject3D_get_capture_input_on_drag(self)
}
func (self CollisionObject3D) GetRid() RID {
	return self.Runtime.CollisionObject3D_get_rid(self)
}
func (self CollisionObject3D) CreateShapeOwner(owner Object) int64 {
	return self.Runtime.CollisionObject3D_create_shape_owner(self, owner)
}
func (self CollisionObject3D) RemoveShapeOwner(owner_id int64) {
	self.Runtime.CollisionObject3D_remove_shape_owner(self, owner_id)
}
func (self CollisionObject3D) GetShapeOwners() PackedInt32Array {
	return self.Runtime.CollisionObject3D_get_shape_owners(self)
}
func (self CollisionObject3D) ShapeOwnerSetTransform(owner_id int64, transform Transform3D) {
	self.Runtime.CollisionObject3D_shape_owner_set_transform(self, owner_id, transform)
}
func (self CollisionObject3D) ShapeOwnerGetTransform(owner_id int64) Transform3D {
	return self.Runtime.CollisionObject3D_shape_owner_get_transform(self, owner_id)
}
func (self CollisionObject3D) ShapeOwnerGetOwner(owner_id int64) Object {
	return self.Runtime.CollisionObject3D_shape_owner_get_owner(self, owner_id)
}
func (self CollisionObject3D) ShapeOwnerSetDisabled(owner_id int64, disabled bool) {
	self.Runtime.CollisionObject3D_shape_owner_set_disabled(self, owner_id, disabled)
}
func (self CollisionObject3D) IsShapeOwnerDisabled(owner_id int64) bool {
	return self.Runtime.CollisionObject3D_is_shape_owner_disabled(self, owner_id)
}
func (self CollisionObject3D) ShapeOwnerAddShape(owner_id int64, shape Shape3D) {
	self.Runtime.CollisionObject3D_shape_owner_add_shape(self, owner_id, shape)
}
func (self CollisionObject3D) ShapeOwnerGetShapeCount(owner_id int64) int64 {
	return self.Runtime.CollisionObject3D_shape_owner_get_shape_count(self, owner_id)
}
func (self CollisionObject3D) ShapeOwnerGetShape(owner_id int64, shape_id int64) Shape3D {
	return self.Runtime.CollisionObject3D_shape_owner_get_shape(self, owner_id, shape_id)
}
func (self CollisionObject3D) ShapeOwnerGetShapeIndex(owner_id int64, shape_id int64) int64 {
	return self.Runtime.CollisionObject3D_shape_owner_get_shape_index(self, owner_id, shape_id)
}
func (self CollisionObject3D) ShapeOwnerRemoveShape(owner_id int64, shape_id int64) {
	self.Runtime.CollisionObject3D_shape_owner_remove_shape(self, owner_id, shape_id)
}
func (self CollisionObject3D) ShapeOwnerClearShapes(owner_id int64) {
	self.Runtime.CollisionObject3D_shape_owner_clear_shapes(self, owner_id)
}
func (self CollisionObject3D) ShapeFindOwner(shape_index int64) int64 {
	return self.Runtime.CollisionObject3D_shape_find_owner(self, shape_index)
}

type extendsCollisionPolygon2D struct {
	_ [0]*extendsCollisionPolygon2D
	class
}

func (self CollisionPolygon2D) Node2D() Node2D {
	var parent Node2D
	parent.class = self.class
	return parent
}
func (self CollisionPolygon2D) SetPolygon(polygon PackedVector2Array) {
	self.Runtime.CollisionPolygon2D_set_polygon(self, polygon)
}
func (self CollisionPolygon2D) GetPolygon() PackedVector2Array {
	return self.Runtime.CollisionPolygon2D_get_polygon(self)
}
func (self CollisionPolygon2D) SetBuildMode(build_mode CollisionPolygon2DBuildMode) {
	self.Runtime.CollisionPolygon2D_set_build_mode(self, build_mode)
}
func (self CollisionPolygon2D) GetBuildMode() CollisionPolygon2DBuildMode {
	return self.Runtime.CollisionPolygon2D_get_build_mode(self)
}
func (self CollisionPolygon2D) SetDisabled(disabled bool) {
	self.Runtime.CollisionPolygon2D_set_disabled(self, disabled)
}
func (self CollisionPolygon2D) IsDisabled() bool {
	return self.Runtime.CollisionPolygon2D_is_disabled(self)
}
func (self CollisionPolygon2D) SetOneWayCollision(enabled bool) {
	self.Runtime.CollisionPolygon2D_set_one_way_collision(self, enabled)
}
func (self CollisionPolygon2D) IsOneWayCollisionEnabled() bool {
	return self.Runtime.CollisionPolygon2D_is_one_way_collision_enabled(self)
}
func (self CollisionPolygon2D) SetOneWayCollisionMargin(margin Float) {
	self.Runtime.CollisionPolygon2D_set_one_way_collision_margin(self, margin)
}
func (self CollisionPolygon2D) GetOneWayCollisionMargin() Float {
	return self.Runtime.CollisionPolygon2D_get_one_way_collision_margin(self)
}

type extendsCollisionPolygon3D struct {
	_ [0]*extendsCollisionPolygon3D
	class
}

func (self CollisionPolygon3D) Node3D() Node3D {
	var parent Node3D
	parent.class = self.class
	return parent
}
func (self CollisionPolygon3D) SetDepth(depth Float) {
	self.Runtime.CollisionPolygon3D_set_depth(self, depth)
}
func (self CollisionPolygon3D) GetDepth() Float {
	return self.Runtime.CollisionPolygon3D_get_depth(self)
}
func (self CollisionPolygon3D) SetPolygon(polygon PackedVector2Array) {
	self.Runtime.CollisionPolygon3D_set_polygon(self, polygon)
}
func (self CollisionPolygon3D) GetPolygon() PackedVector2Array {
	return self.Runtime.CollisionPolygon3D_get_polygon(self)
}
func (self CollisionPolygon3D) SetDisabled(disabled bool) {
	self.Runtime.CollisionPolygon3D_set_disabled(self, disabled)
}
func (self CollisionPolygon3D) IsDisabled() bool {
	return self.Runtime.CollisionPolygon3D_is_disabled(self)
}
func (self CollisionPolygon3D) SetMargin(margin Float) {
	self.Runtime.CollisionPolygon3D_set_margin(self, margin)
}
func (self CollisionPolygon3D) GetMargin() Float {
	return self.Runtime.CollisionPolygon3D_get_margin(self)
}

type extendsCollisionShape2D struct {
	_ [0]*extendsCollisionShape2D
	class
}

func (self CollisionShape2D) Node2D() Node2D {
	var parent Node2D
	parent.class = self.class
	return parent
}
func (self CollisionShape2D) SetShape(shape Shape2D) {
	self.Runtime.CollisionShape2D_set_shape(self, shape)
}
func (self CollisionShape2D) GetShape() Shape2D {
	return self.Runtime.CollisionShape2D_get_shape(self)
}
func (self CollisionShape2D) SetDisabled(disabled bool) {
	self.Runtime.CollisionShape2D_set_disabled(self, disabled)
}
func (self CollisionShape2D) IsDisabled() bool {
	return self.Runtime.CollisionShape2D_is_disabled(self)
}
func (self CollisionShape2D) SetOneWayCollision(enabled bool) {
	self.Runtime.CollisionShape2D_set_one_way_collision(self, enabled)
}
func (self CollisionShape2D) IsOneWayCollisionEnabled() bool {
	return self.Runtime.CollisionShape2D_is_one_way_collision_enabled(self)
}
func (self CollisionShape2D) SetOneWayCollisionMargin(margin Float) {
	self.Runtime.CollisionShape2D_set_one_way_collision_margin(self, margin)
}
func (self CollisionShape2D) GetOneWayCollisionMargin() Float {
	return self.Runtime.CollisionShape2D_get_one_way_collision_margin(self)
}
func (self CollisionShape2D) SetDebugColor(color Color) {
	self.Runtime.CollisionShape2D_set_debug_color(self, color)
}
func (self CollisionShape2D) GetDebugColor() Color {
	return self.Runtime.CollisionShape2D_get_debug_color(self)
}

type extendsCollisionShape3D struct {
	_ [0]*extendsCollisionShape3D
	class
}

func (self CollisionShape3D) Node3D() Node3D {
	var parent Node3D
	parent.class = self.class
	return parent
}
func (self CollisionShape3D) ResourceChanged(resource Resource) {
	self.Runtime.CollisionShape3D_resource_changed(self, resource)
}
func (self CollisionShape3D) SetShape(shape Shape3D) {
	self.Runtime.CollisionShape3D_set_shape(self, shape)
}
func (self CollisionShape3D) GetShape() Shape3D {
	return self.Runtime.CollisionShape3D_get_shape(self)
}
func (self CollisionShape3D) SetDisabled(enable bool) {
	self.Runtime.CollisionShape3D_set_disabled(self, enable)
}
func (self CollisionShape3D) IsDisabled() bool {
	return self.Runtime.CollisionShape3D_is_disabled(self)
}
func (self CollisionShape3D) MakeConvexFromSiblings() {
	self.Runtime.CollisionShape3D_make_convex_from_siblings(self)
}

type extendsColorPicker struct {
	_ [0]*extendsColorPicker
	class
}

func (self ColorPicker) VBoxContainer() VBoxContainer {
	var parent VBoxContainer
	parent.class = self.class
	return parent
}
func (self ColorPicker) SetPickColor(color Color) {
	self.Runtime.ColorPicker_set_pick_color(self, color)
}
func (self ColorPicker) GetPickColor() Color {
	return self.Runtime.ColorPicker_get_pick_color(self)
}
func (self ColorPicker) SetDeferredMode(mode bool) {
	self.Runtime.ColorPicker_set_deferred_mode(self, mode)
}
func (self ColorPicker) IsDeferredMode() bool {
	return self.Runtime.ColorPicker_is_deferred_mode(self)
}
func (self ColorPicker) SetColorMode(color_mode ColorPickerColorModeType) {
	self.Runtime.ColorPicker_set_color_mode(self, color_mode)
}
func (self ColorPicker) GetColorMode() ColorPickerColorModeType {
	return self.Runtime.ColorPicker_get_color_mode(self)
}
func (self ColorPicker) SetEditAlpha(show bool) {
	self.Runtime.ColorPicker_set_edit_alpha(self, show)
}
func (self ColorPicker) IsEditingAlpha() bool {
	return self.Runtime.ColorPicker_is_editing_alpha(self)
}
func (self ColorPicker) SetCanAddSwatches(enabled bool) {
	self.Runtime.ColorPicker_set_can_add_swatches(self, enabled)
}
func (self ColorPicker) AreSwatchesEnabled() bool {
	return self.Runtime.ColorPicker_are_swatches_enabled(self)
}
func (self ColorPicker) SetPresetsVisible(visible bool) {
	self.Runtime.ColorPicker_set_presets_visible(self, visible)
}
func (self ColorPicker) ArePresetsVisible() bool {
	return self.Runtime.ColorPicker_are_presets_visible(self)
}
func (self ColorPicker) SetModesVisible(visible bool) {
	self.Runtime.ColorPicker_set_modes_visible(self, visible)
}
func (self ColorPicker) AreModesVisible() bool {
	return self.Runtime.ColorPicker_are_modes_visible(self)
}
func (self ColorPicker) SetSamplerVisible(visible bool) {
	self.Runtime.ColorPicker_set_sampler_visible(self, visible)
}
func (self ColorPicker) IsSamplerVisible() bool {
	return self.Runtime.ColorPicker_is_sampler_visible(self)
}
func (self ColorPicker) SetSlidersVisible(visible bool) {
	self.Runtime.ColorPicker_set_sliders_visible(self, visible)
}
func (self ColorPicker) AreSlidersVisible() bool {
	return self.Runtime.ColorPicker_are_sliders_visible(self)
}
func (self ColorPicker) SetHexVisible(visible bool) {
	self.Runtime.ColorPicker_set_hex_visible(self, visible)
}
func (self ColorPicker) IsHexVisible() bool {
	return self.Runtime.ColorPicker_is_hex_visible(self)
}
func (self ColorPicker) AddPreset(color Color) {
	self.Runtime.ColorPicker_add_preset(self, color)
}
func (self ColorPicker) ErasePreset(color Color) {
	self.Runtime.ColorPicker_erase_preset(self, color)
}
func (self ColorPicker) GetPresets() PackedColorArray {
	return self.Runtime.ColorPicker_get_presets(self)
}
func (self ColorPicker) AddRecentPreset(color Color) {
	self.Runtime.ColorPicker_add_recent_preset(self, color)
}
func (self ColorPicker) EraseRecentPreset(color Color) {
	self.Runtime.ColorPicker_erase_recent_preset(self, color)
}
func (self ColorPicker) GetRecentPresets() PackedColorArray {
	return self.Runtime.ColorPicker_get_recent_presets(self)
}
func (self ColorPicker) SetPickerShape(shape ColorPickerPickerShapeType) {
	self.Runtime.ColorPicker_set_picker_shape(self, shape)
}
func (self ColorPicker) GetPickerShape() ColorPickerPickerShapeType {
	return self.Runtime.ColorPicker_get_picker_shape(self)
}

type extendsColorPickerButton struct {
	_ [0]*extendsColorPickerButton
	class
}

func (self ColorPickerButton) Button() Button {
	var parent Button
	parent.class = self.class
	return parent
}
func (self ColorPickerButton) SetPickColor(color Color) {
	self.Runtime.ColorPickerButton_set_pick_color(self, color)
}
func (self ColorPickerButton) GetPickColor() Color {
	return self.Runtime.ColorPickerButton_get_pick_color(self)
}
func (self ColorPickerButton) GetPicker() ColorPicker {
	return self.Runtime.ColorPickerButton_get_picker(self)
}
func (self ColorPickerButton) GetPopup() PopupPanel {
	return self.Runtime.ColorPickerButton_get_popup(self)
}
func (self ColorPickerButton) SetEditAlpha(show bool) {
	self.Runtime.ColorPickerButton_set_edit_alpha(self, show)
}
func (self ColorPickerButton) IsEditingAlpha() bool {
	return self.Runtime.ColorPickerButton_is_editing_alpha(self)
}

type extendsColorRect struct {
	_ [0]*extendsColorRect
	class
}

func (self ColorRect) Control() Control { var parent Control; parent.class = self.class; return parent }
func (self ColorRect) SetColor(color Color) {
	self.Runtime.ColorRect_set_color(self, color)
}
func (self ColorRect) GetColor() Color {
	return self.Runtime.ColorRect_get_color(self)
}

type extendsCompressedCubemap struct {
	_ [0]*extendsCompressedCubemap
	class
}

func (self CompressedCubemap) CompressedTextureLayered() CompressedTextureLayered {
	var parent CompressedTextureLayered
	parent.class = self.class
	return parent
}

type extendsCompressedCubemapArray struct {
	_ [0]*extendsCompressedCubemapArray
	class
}

func (self CompressedCubemapArray) CompressedTextureLayered() CompressedTextureLayered {
	var parent CompressedTextureLayered
	parent.class = self.class
	return parent
}

type extendsCompressedTexture2D struct {
	_ [0]*extendsCompressedTexture2D
	class
}

func (self CompressedTexture2D) Texture2D() Texture2D {
	var parent Texture2D
	parent.class = self.class
	return parent
}
func (self CompressedTexture2D) Load(path string) int64 {
	return self.Runtime.CompressedTexture2D_load(self, path)
}
func (self CompressedTexture2D) GetLoadPath() string {
	return self.Runtime.CompressedTexture2D_get_load_path(self)
}

type extendsCompressedTexture2DArray struct {
	_ [0]*extendsCompressedTexture2DArray
	class
}

func (self CompressedTexture2DArray) CompressedTextureLayered() CompressedTextureLayered {
	var parent CompressedTextureLayered
	parent.class = self.class
	return parent
}

type extendsCompressedTexture3D struct {
	_ [0]*extendsCompressedTexture3D
	class
}

func (self CompressedTexture3D) Texture3D() Texture3D {
	var parent Texture3D
	parent.class = self.class
	return parent
}
func (self CompressedTexture3D) Load(path string) int64 {
	return self.Runtime.CompressedTexture3D_load(self, path)
}
func (self CompressedTexture3D) GetLoadPath() string {
	return self.Runtime.CompressedTexture3D_get_load_path(self)
}

type extendsCompressedTextureLayered struct {
	_ [0]*extendsCompressedTextureLayered
	class
}

func (self CompressedTextureLayered) TextureLayered() TextureLayered {
	var parent TextureLayered
	parent.class = self.class
	return parent
}
func (self CompressedTextureLayered) Load(path string) int64 {
	return self.Runtime.CompressedTextureLayered_load(self, path)
}
func (self CompressedTextureLayered) GetLoadPath() string {
	return self.Runtime.CompressedTextureLayered_get_load_path(self)
}

type extendsConcavePolygonShape2D struct {
	_ [0]*extendsConcavePolygonShape2D
	class
}

func (self ConcavePolygonShape2D) Shape2D() Shape2D {
	var parent Shape2D
	parent.class = self.class
	return parent
}
func (self ConcavePolygonShape2D) SetSegments(segments PackedVector2Array) {
	self.Runtime.ConcavePolygonShape2D_set_segments(self, segments)
}
func (self ConcavePolygonShape2D) GetSegments() PackedVector2Array {
	return self.Runtime.ConcavePolygonShape2D_get_segments(self)
}

type extendsConcavePolygonShape3D struct {
	_ [0]*extendsConcavePolygonShape3D
	class
}

func (self ConcavePolygonShape3D) Shape3D() Shape3D {
	var parent Shape3D
	parent.class = self.class
	return parent
}
func (self ConcavePolygonShape3D) SetFaces(faces PackedVector3Array) {
	self.Runtime.ConcavePolygonShape3D_set_faces(self, faces)
}
func (self ConcavePolygonShape3D) GetFaces() PackedVector3Array {
	return self.Runtime.ConcavePolygonShape3D_get_faces(self)
}
func (self ConcavePolygonShape3D) SetBackfaceCollisionEnabled(enabled bool) {
	self.Runtime.ConcavePolygonShape3D_set_backface_collision_enabled(self, enabled)
}
func (self ConcavePolygonShape3D) IsBackfaceCollisionEnabled() bool {
	return self.Runtime.ConcavePolygonShape3D_is_backface_collision_enabled(self)
}

type extendsConeTwistJoint3D struct {
	_ [0]*extendsConeTwistJoint3D
	class
}

func (self ConeTwistJoint3D) Joint3D() Joint3D {
	var parent Joint3D
	parent.class = self.class
	return parent
}
func (self ConeTwistJoint3D) SetParam(param ConeTwistJoint3DParam, value Float) {
	self.Runtime.ConeTwistJoint3D_set_param(self, param, value)
}
func (self ConeTwistJoint3D) GetParam(param ConeTwistJoint3DParam) Float {
	return self.Runtime.ConeTwistJoint3D_get_param(self, param)
}

type extendsConfigFile struct {
	_ [0]*extendsConfigFile
	class
}

func (self ConfigFile) RefCounted() RefCounted {
	var parent RefCounted
	parent.class = self.class
	return parent
}
func (self ConfigFile) SetValue(section string, key string, value any) {
	self.Runtime.ConfigFile_set_value(self, section, key, value)
}
func (self ConfigFile) GetValue(section string, key string, def any) any {
	return self.Runtime.ConfigFile_get_value(self, section, key, def)
}
func (self ConfigFile) HasSection(section string) bool {
	return self.Runtime.ConfigFile_has_section(self, section)
}
func (self ConfigFile) HasSectionKey(section string, key string) bool {
	return self.Runtime.ConfigFile_has_section_key(self, section, key)
}
func (self ConfigFile) GetSections() PackedStringArray {
	return self.Runtime.ConfigFile_get_sections(self)
}
func (self ConfigFile) GetSectionKeys(section string) PackedStringArray {
	return self.Runtime.ConfigFile_get_section_keys(self, section)
}
func (self ConfigFile) EraseSection(section string) {
	self.Runtime.ConfigFile_erase_section(self, section)
}
func (self ConfigFile) EraseSectionKey(section string, key string) {
	self.Runtime.ConfigFile_erase_section_key(self, section, key)
}
func (self ConfigFile) Load(path string) int64 {
	return self.Runtime.ConfigFile_load(self, path)
}
func (self ConfigFile) Parse(data string) int64 {
	return self.Runtime.ConfigFile_parse(self, data)
}
func (self ConfigFile) Save(path string) int64 {
	return self.Runtime.ConfigFile_save(self, path)
}
func (self ConfigFile) EncodeToText() string {
	return self.Runtime.ConfigFile_encode_to_text(self)
}
func (self ConfigFile) LoadEncrypted(path string, key PackedByteArray) int64 {
	return self.Runtime.ConfigFile_load_encrypted(self, path, key)
}
func (self ConfigFile) LoadEncryptedPass(path string, password string) int64 {
	return self.Runtime.ConfigFile_load_encrypted_pass(self, path, password)
}
func (self ConfigFile) SaveEncrypted(path string, key PackedByteArray) int64 {
	return self.Runtime.ConfigFile_save_encrypted(self, path, key)
}
func (self ConfigFile) SaveEncryptedPass(path string, password string) int64 {
	return self.Runtime.ConfigFile_save_encrypted_pass(self, path, password)
}
func (self ConfigFile) Clear() {
	self.Runtime.ConfigFile_clear(self)
}

type extendsConfirmationDialog struct {
	_ [0]*extendsConfirmationDialog
	class
}

func (self ConfirmationDialog) AcceptDialog() AcceptDialog {
	var parent AcceptDialog
	parent.class = self.class
	return parent
}
func (self ConfirmationDialog) GetCancelButton() Button {
	return self.Runtime.ConfirmationDialog_get_cancel_button(self)
}
func (self ConfirmationDialog) SetCancelButtonText(text string) {
	self.Runtime.ConfirmationDialog_set_cancel_button_text(self, text)
}
func (self ConfirmationDialog) GetCancelButtonText() string {
	return self.Runtime.ConfirmationDialog_get_cancel_button_text(self)
}

type extendsContainer struct {
	_ [0]*extendsContainer
	class
}

func (self Container) Control() Control { var parent Control; parent.class = self.class; return parent }
func (self Container) QueueSort() {
	self.Runtime.Container_queue_sort(self)
}
func (self Container) FitChildInRect(child Control, rect Rect2) {
	self.Runtime.Container_fit_child_in_rect(self, child, rect)
}

type extendsControl struct {
	_ [0]*extendsControl
	class
}

func (self Control) CanvasItem() CanvasItem {
	var parent CanvasItem
	parent.class = self.class
	return parent
}
func (self Control) AcceptEvent() {
	self.Runtime.Control_accept_event(self)
}
func (self Control) GetMinimumSize() Vector2 {
	return self.Runtime.Control_get_minimum_size(self)
}
func (self Control) GetCombinedMinimumSize() Vector2 {
	return self.Runtime.Control_get_combined_minimum_size(self)
}
func (self Control) SetAnchorsPreset(preset ControlLayoutPreset, keep_offsets bool) {
	self.Runtime.Control_set_anchors_preset(self, preset, keep_offsets)
}
func (self Control) SetOffsetsPreset(preset ControlLayoutPreset, resize_mode ControlLayoutPresetMode, margin int64) {
	self.Runtime.Control_set_offsets_preset(self, preset, resize_mode, margin)
}
func (self Control) SetAnchorsAndOffsetsPreset(preset ControlLayoutPreset, resize_mode ControlLayoutPresetMode, margin int64) {
	self.Runtime.Control_set_anchors_and_offsets_preset(self, preset, resize_mode, margin)
}
func (self Control) SetAnchor(side Side, anchor Float, keep_offset bool, push_opposite_anchor bool) {
	self.Runtime.Control_set_anchor(self, side, anchor, keep_offset, push_opposite_anchor)
}
func (self Control) GetAnchor(side Side) Float {
	return self.Runtime.Control_get_anchor(self, side)
}
func (self Control) SetOffset(side Side, offset Float) {
	self.Runtime.Control_set_offset(self, side, offset)
}
func (self Control) GetOffset(offset Side) Float {
	return self.Runtime.Control_get_offset(self, offset)
}
func (self Control) SetAnchorAndOffset(side Side, anchor Float, offset Float, push_opposite_anchor bool) {
	self.Runtime.Control_set_anchor_and_offset(self, side, anchor, offset, push_opposite_anchor)
}
func (self Control) SetBegin(position Vector2) {
	self.Runtime.Control_set_begin(self, position)
}
func (self Control) SetEnd(position Vector2) {
	self.Runtime.Control_set_end(self, position)
}
func (self Control) SetPosition(position Vector2, keep_offsets bool) {
	self.Runtime.Control_set_position(self, position, keep_offsets)
}
func (self Control) SetSize(size Vector2, keep_offsets bool) {
	self.Runtime.Control_set_size(self, size, keep_offsets)
}
func (self Control) ResetSize() {
	self.Runtime.Control_reset_size(self)
}
func (self Control) SetCustomMinimumSize(size Vector2) {
	self.Runtime.Control_set_custom_minimum_size(self, size)
}
func (self Control) SetGlobalPosition(position Vector2, keep_offsets bool) {
	self.Runtime.Control_set_global_position(self, position, keep_offsets)
}
func (self Control) SetRotation(radians Float) {
	self.Runtime.Control_set_rotation(self, radians)
}
func (self Control) SetRotationDegrees(degrees Float) {
	self.Runtime.Control_set_rotation_degrees(self, degrees)
}
func (self Control) SetScale(scale Vector2) {
	self.Runtime.Control_set_scale(self, scale)
}
func (self Control) SetPivotOffset(pivot_offset Vector2) {
	self.Runtime.Control_set_pivot_offset(self, pivot_offset)
}
func (self Control) GetBegin() Vector2 {
	return self.Runtime.Control_get_begin(self)
}
func (self Control) GetEnd() Vector2 {
	return self.Runtime.Control_get_end(self)
}
func (self Control) GetPosition() Vector2 {
	return self.Runtime.Control_get_position(self)
}
func (self Control) GetSize() Vector2 {
	return self.Runtime.Control_get_size(self)
}
func (self Control) GetRotation() Float {
	return self.Runtime.Control_get_rotation(self)
}
func (self Control) GetRotationDegrees() Float {
	return self.Runtime.Control_get_rotation_degrees(self)
}
func (self Control) GetScale() Vector2 {
	return self.Runtime.Control_get_scale(self)
}
func (self Control) GetPivotOffset() Vector2 {
	return self.Runtime.Control_get_pivot_offset(self)
}
func (self Control) GetCustomMinimumSize() Vector2 {
	return self.Runtime.Control_get_custom_minimum_size(self)
}
func (self Control) GetParentAreaSize() Vector2 {
	return self.Runtime.Control_get_parent_area_size(self)
}
func (self Control) GetGlobalPosition() Vector2 {
	return self.Runtime.Control_get_global_position(self)
}
func (self Control) GetScreenPosition() Vector2 {
	return self.Runtime.Control_get_screen_position(self)
}
func (self Control) GetRect() Rect2 {
	return self.Runtime.Control_get_rect(self)
}
func (self Control) GetGlobalRect() Rect2 {
	return self.Runtime.Control_get_global_rect(self)
}
func (self Control) SetFocusMode(mode ControlFocusMode) {
	self.Runtime.Control_set_focus_mode(self, mode)
}
func (self Control) GetFocusMode() ControlFocusMode {
	return self.Runtime.Control_get_focus_mode(self)
}
func (self Control) HasFocus() bool {
	return self.Runtime.Control_has_focus(self)
}
func (self Control) GrabFocus() {
	self.Runtime.Control_grab_focus(self)
}
func (self Control) ReleaseFocus() {
	self.Runtime.Control_release_focus(self)
}
func (self Control) FindPrevValidFocus() Control {
	return self.Runtime.Control_find_prev_valid_focus(self)
}
func (self Control) FindNextValidFocus() Control {
	return self.Runtime.Control_find_next_valid_focus(self)
}
func (self Control) FindValidFocusNeighbor(side Side) Control {
	return self.Runtime.Control_find_valid_focus_neighbor(self, side)
}
func (self Control) SetHSizeFlags(flags ControlSizeFlags) {
	self.Runtime.Control_set_h_size_flags(self, flags)
}
func (self Control) GetHSizeFlags() ControlSizeFlags {
	return self.Runtime.Control_get_h_size_flags(self)
}
func (self Control) SetStretchRatio(ratio Float) {
	self.Runtime.Control_set_stretch_ratio(self, ratio)
}
func (self Control) GetStretchRatio() Float {
	return self.Runtime.Control_get_stretch_ratio(self)
}
func (self Control) SetVSizeFlags(flags ControlSizeFlags) {
	self.Runtime.Control_set_v_size_flags(self, flags)
}
func (self Control) GetVSizeFlags() ControlSizeFlags {
	return self.Runtime.Control_get_v_size_flags(self)
}
func (self Control) SetTheme(theme Theme) {
	self.Runtime.Control_set_theme(self, theme)
}
func (self Control) GetTheme() Theme {
	return self.Runtime.Control_get_theme(self)
}
func (self Control) SetThemeTypeVariation(theme_type string) {
	self.Runtime.Control_set_theme_type_variation(self, theme_type)
}
func (self Control) GetThemeTypeVariation() string {
	return self.Runtime.Control_get_theme_type_variation(self)
}
func (self Control) BeginBulkThemeOverride() {
	self.Runtime.Control_begin_bulk_theme_override(self)
}
func (self Control) EndBulkThemeOverride() {
	self.Runtime.Control_end_bulk_theme_override(self)
}
func (self Control) AddThemeIconOverride(name string, texture Texture2D) {
	self.Runtime.Control_add_theme_icon_override(self, name, texture)
}
func (self Control) AddThemeStyleboxOverride(name string, stylebox StyleBox) {
	self.Runtime.Control_add_theme_stylebox_override(self, name, stylebox)
}
func (self Control) AddThemeFontOverride(name string, font Font) {
	self.Runtime.Control_add_theme_font_override(self, name, font)
}
func (self Control) AddThemeFontSizeOverride(name string, font_size int64) {
	self.Runtime.Control_add_theme_font_size_override(self, name, font_size)
}
func (self Control) AddThemeColorOverride(name string, color Color) {
	self.Runtime.Control_add_theme_color_override(self, name, color)
}
func (self Control) AddThemeConstantOverride(name string, constant int64) {
	self.Runtime.Control_add_theme_constant_override(self, name, constant)
}
func (self Control) RemoveThemeIconOverride(name string) {
	self.Runtime.Control_remove_theme_icon_override(self, name)
}
func (self Control) RemoveThemeStyleboxOverride(name string) {
	self.Runtime.Control_remove_theme_stylebox_override(self, name)
}
func (self Control) RemoveThemeFontOverride(name string) {
	self.Runtime.Control_remove_theme_font_override(self, name)
}
func (self Control) RemoveThemeFontSizeOverride(name string) {
	self.Runtime.Control_remove_theme_font_size_override(self, name)
}
func (self Control) RemoveThemeColorOverride(name string) {
	self.Runtime.Control_remove_theme_color_override(self, name)
}
func (self Control) RemoveThemeConstantOverride(name string) {
	self.Runtime.Control_remove_theme_constant_override(self, name)
}
func (self Control) GetThemeIcon(name string, theme_type string) Texture2D {
	return self.Runtime.Control_get_theme_icon(self, name, theme_type)
}
func (self Control) GetThemeStylebox(name string, theme_type string) StyleBox {
	return self.Runtime.Control_get_theme_stylebox(self, name, theme_type)
}
func (self Control) GetThemeFont(name string, theme_type string) Font {
	return self.Runtime.Control_get_theme_font(self, name, theme_type)
}
func (self Control) GetThemeFontSize(name string, theme_type string) int64 {
	return self.Runtime.Control_get_theme_font_size(self, name, theme_type)
}
func (self Control) GetThemeColor(name string, theme_type string) Color {
	return self.Runtime.Control_get_theme_color(self, name, theme_type)
}
func (self Control) GetThemeConstant(name string, theme_type string) int64 {
	return self.Runtime.Control_get_theme_constant(self, name, theme_type)
}
func (self Control) HasThemeIconOverride(name string) bool {
	return self.Runtime.Control_has_theme_icon_override(self, name)
}
func (self Control) HasThemeStyleboxOverride(name string) bool {
	return self.Runtime.Control_has_theme_stylebox_override(self, name)
}
func (self Control) HasThemeFontOverride(name string) bool {
	return self.Runtime.Control_has_theme_font_override(self, name)
}
func (self Control) HasThemeFontSizeOverride(name string) bool {
	return self.Runtime.Control_has_theme_font_size_override(self, name)
}
func (self Control) HasThemeColorOverride(name string) bool {
	return self.Runtime.Control_has_theme_color_override(self, name)
}
func (self Control) HasThemeConstantOverride(name string) bool {
	return self.Runtime.Control_has_theme_constant_override(self, name)
}
func (self Control) HasThemeIcon(name string, theme_type string) bool {
	return self.Runtime.Control_has_theme_icon(self, name, theme_type)
}
func (self Control) HasThemeStylebox(name string, theme_type string) bool {
	return self.Runtime.Control_has_theme_stylebox(self, name, theme_type)
}
func (self Control) HasThemeFont(name string, theme_type string) bool {
	return self.Runtime.Control_has_theme_font(self, name, theme_type)
}
func (self Control) HasThemeFontSize(name string, theme_type string) bool {
	return self.Runtime.Control_has_theme_font_size(self, name, theme_type)
}
func (self Control) HasThemeColor(name string, theme_type string) bool {
	return self.Runtime.Control_has_theme_color(self, name, theme_type)
}
func (self Control) HasThemeConstant(name string, theme_type string) bool {
	return self.Runtime.Control_has_theme_constant(self, name, theme_type)
}
func (self Control) GetThemeDefaultBaseScale() Float {
	return self.Runtime.Control_get_theme_default_base_scale(self)
}
func (self Control) GetThemeDefaultFont() Font {
	return self.Runtime.Control_get_theme_default_font(self)
}
func (self Control) GetThemeDefaultFontSize() int64 {
	return self.Runtime.Control_get_theme_default_font_size(self)
}
func (self Control) GetParentControl() Control {
	return self.Runtime.Control_get_parent_control(self)
}
func (self Control) SetHGrowDirection(direction ControlGrowDirection) {
	self.Runtime.Control_set_h_grow_direction(self, direction)
}
func (self Control) GetHGrowDirection() ControlGrowDirection {
	return self.Runtime.Control_get_h_grow_direction(self)
}
func (self Control) SetVGrowDirection(direction ControlGrowDirection) {
	self.Runtime.Control_set_v_grow_direction(self, direction)
}
func (self Control) GetVGrowDirection() ControlGrowDirection {
	return self.Runtime.Control_get_v_grow_direction(self)
}
func (self Control) SetTooltipText(hint string) {
	self.Runtime.Control_set_tooltip_text(self, hint)
}
func (self Control) GetTooltipText() string {
	return self.Runtime.Control_get_tooltip_text(self)
}
func (self Control) GetTooltip(at_position Vector2) string {
	return self.Runtime.Control_get_tooltip(self, at_position)
}
func (self Control) SetDefaultCursorShape(shape ControlCursorShape) {
	self.Runtime.Control_set_default_cursor_shape(self, shape)
}
func (self Control) GetDefaultCursorShape() ControlCursorShape {
	return self.Runtime.Control_get_default_cursor_shape(self)
}
func (self Control) GetCursorShape(position Vector2) ControlCursorShape {
	return self.Runtime.Control_get_cursor_shape(self, position)
}
func (self Control) SetFocusNeighbor(side Side, neighbor NodePath) {
	self.Runtime.Control_set_focus_neighbor(self, side, neighbor)
}
func (self Control) GetFocusNeighbor(side Side) NodePath {
	return self.Runtime.Control_get_focus_neighbor(self, side)
}
func (self Control) SetFocusNext(next NodePath) {
	self.Runtime.Control_set_focus_next(self, next)
}
func (self Control) GetFocusNext() NodePath {
	return self.Runtime.Control_get_focus_next(self)
}
func (self Control) SetFocusPrevious(previous NodePath) {
	self.Runtime.Control_set_focus_previous(self, previous)
}
func (self Control) GetFocusPrevious() NodePath {
	return self.Runtime.Control_get_focus_previous(self)
}
func (self Control) ForceDrag(data any, preview Control) {
	self.Runtime.Control_force_drag(self, data, preview)
}
func (self Control) SetMouseFilter(filter ControlMouseFilter) {
	self.Runtime.Control_set_mouse_filter(self, filter)
}
func (self Control) GetMouseFilter() ControlMouseFilter {
	return self.Runtime.Control_get_mouse_filter(self)
}
func (self Control) SetForcePassScrollEvents(force_pass_scroll_events bool) {
	self.Runtime.Control_set_force_pass_scroll_events(self, force_pass_scroll_events)
}
func (self Control) IsForcePassScrollEvents() bool {
	return self.Runtime.Control_is_force_pass_scroll_events(self)
}
func (self Control) SetClipContents(enable bool) {
	self.Runtime.Control_set_clip_contents(self, enable)
}
func (self Control) IsClippingContents() bool {
	return self.Runtime.Control_is_clipping_contents(self)
}
func (self Control) GrabClickFocus() {
	self.Runtime.Control_grab_click_focus(self)
}
func (self Control) SetDragForwarding(drag_func Callable, can_drop_func Callable, drop_func Callable) {
	self.Runtime.Control_set_drag_forwarding(self, drag_func, can_drop_func, drop_func)
}
func (self Control) SetDragPreview(control Control) {
	self.Runtime.Control_set_drag_preview(self, control)
}
func (self Control) IsDragSuccessful() bool {
	return self.Runtime.Control_is_drag_successful(self)
}
func (self Control) WarpMouse(position Vector2) {
	self.Runtime.Control_warp_mouse(self, position)
}
func (self Control) SetShortcutContext(node Node) {
	self.Runtime.Control_set_shortcut_context(self, node)
}
func (self Control) GetShortcutContext() Node {
	return self.Runtime.Control_get_shortcut_context(self)
}
func (self Control) UpdateMinimumSize() {
	self.Runtime.Control_update_minimum_size(self)
}
func (self Control) SetLayoutDirection(direction ControlLayoutDirection) {
	self.Runtime.Control_set_layout_direction(self, direction)
}
func (self Control) GetLayoutDirection() ControlLayoutDirection {
	return self.Runtime.Control_get_layout_direction(self)
}
func (self Control) IsLayoutRtl() bool {
	return self.Runtime.Control_is_layout_rtl(self)
}
func (self Control) SetAutoTranslate(enable bool) {
	self.Runtime.Control_set_auto_translate(self, enable)
}
func (self Control) IsAutoTranslating() bool {
	return self.Runtime.Control_is_auto_translating(self)
}
func (self Control) SetLocalizeNumeralSystem(enable bool) {
	self.Runtime.Control_set_localize_numeral_system(self, enable)
}
func (self Control) IsLocalizingNumeralSystem() bool {
	return self.Runtime.Control_is_localizing_numeral_system(self)
}

type extendsConvexPolygonShape2D struct {
	_ [0]*extendsConvexPolygonShape2D
	class
}

func (self ConvexPolygonShape2D) Shape2D() Shape2D {
	var parent Shape2D
	parent.class = self.class
	return parent
}
func (self ConvexPolygonShape2D) SetPointCloud(point_cloud PackedVector2Array) {
	self.Runtime.ConvexPolygonShape2D_set_point_cloud(self, point_cloud)
}
func (self ConvexPolygonShape2D) SetPoints(points PackedVector2Array) {
	self.Runtime.ConvexPolygonShape2D_set_points(self, points)
}
func (self ConvexPolygonShape2D) GetPoints() PackedVector2Array {
	return self.Runtime.ConvexPolygonShape2D_get_points(self)
}

type extendsConvexPolygonShape3D struct {
	_ [0]*extendsConvexPolygonShape3D
	class
}

func (self ConvexPolygonShape3D) Shape3D() Shape3D {
	var parent Shape3D
	parent.class = self.class
	return parent
}
func (self ConvexPolygonShape3D) SetPoints(points PackedVector3Array) {
	self.Runtime.ConvexPolygonShape3D_set_points(self, points)
}
func (self ConvexPolygonShape3D) GetPoints() PackedVector3Array {
	return self.Runtime.ConvexPolygonShape3D_get_points(self)
}

type extendsCrypto struct {
	_ [0]*extendsCrypto
	class
}

func (self Crypto) RefCounted() RefCounted {
	var parent RefCounted
	parent.class = self.class
	return parent
}
func (self Crypto) GenerateRandomBytes(size int64) PackedByteArray {
	return self.Runtime.Crypto_generate_random_bytes(self, size)
}
func (self Crypto) GenerateRsa(size int64) CryptoKey {
	return self.Runtime.Crypto_generate_rsa(self, size)
}
func (self Crypto) GenerateSelfSignedCertificate(key CryptoKey, issuer_name string, not_before string, not_after string) X509Certificate {
	return self.Runtime.Crypto_generate_self_signed_certificate(self, key, issuer_name, not_before, not_after)
}
func (self Crypto) Sign(hash_type HashingContextHashType, hash PackedByteArray, key CryptoKey) PackedByteArray {
	return self.Runtime.Crypto_sign(self, hash_type, hash, key)
}
func (self Crypto) Verify(hash_type HashingContextHashType, hash PackedByteArray, signature PackedByteArray, key CryptoKey) bool {
	return self.Runtime.Crypto_verify(self, hash_type, hash, signature, key)
}
func (self Crypto) Encrypt(key CryptoKey, plaintext PackedByteArray) PackedByteArray {
	return self.Runtime.Crypto_encrypt(self, key, plaintext)
}
func (self Crypto) Decrypt(key CryptoKey, ciphertext PackedByteArray) PackedByteArray {
	return self.Runtime.Crypto_decrypt(self, key, ciphertext)
}
func (self Crypto) HmacDigest(hash_type HashingContextHashType, key PackedByteArray, msg PackedByteArray) PackedByteArray {
	return self.Runtime.Crypto_hmac_digest(self, hash_type, key, msg)
}
func (self Crypto) ConstantTimeCompare(trusted PackedByteArray, received PackedByteArray) bool {
	return self.Runtime.Crypto_constant_time_compare(self, trusted, received)
}

type extendsCryptoKey struct {
	_ [0]*extendsCryptoKey
	class
}

func (self CryptoKey) Resource() Resource {
	var parent Resource
	parent.class = self.class
	return parent
}
func (self CryptoKey) Save(path string, public_only bool) int64 {
	return self.Runtime.CryptoKey_save(self, path, public_only)
}
func (self CryptoKey) Load(path string, public_only bool) int64 {
	return self.Runtime.CryptoKey_load(self, path, public_only)
}
func (self CryptoKey) IsPublicOnly() bool {
	return self.Runtime.CryptoKey_is_public_only(self)
}
func (self CryptoKey) SaveToString(public_only bool) string {
	return self.Runtime.CryptoKey_save_to_string(self, public_only)
}
func (self CryptoKey) LoadFromString(string_key string, public_only bool) int64 {
	return self.Runtime.CryptoKey_load_from_string(self, string_key, public_only)
}

type extendsCubemap struct {
	_ [0]*extendsCubemap
	class
}

func (self Cubemap) ImageTextureLayered() ImageTextureLayered {
	var parent ImageTextureLayered
	parent.class = self.class
	return parent
}
func (self Cubemap) CreatePlaceholder() Resource {
	return self.Runtime.Cubemap_create_placeholder(self)
}

type extendsCubemapArray struct {
	_ [0]*extendsCubemapArray
	class
}

func (self CubemapArray) ImageTextureLayered() ImageTextureLayered {
	var parent ImageTextureLayered
	parent.class = self.class
	return parent
}
func (self CubemapArray) CreatePlaceholder() Resource {
	return self.Runtime.CubemapArray_create_placeholder(self)
}

type extendsCurve struct {
	_ [0]*extendsCurve
	class
}

func (self Curve) Resource() Resource { var parent Resource; parent.class = self.class; return parent }
func (self Curve) GetPointCount() int64 {
	return self.Runtime.Curve_get_point_count(self)
}
func (self Curve) SetPointCount(count int64) {
	self.Runtime.Curve_set_point_count(self, count)
}
func (self Curve) AddPoint(position Vector2, left_tangent Float, right_tangent Float, left_mode CurveTangentMode, right_mode CurveTangentMode) int64 {
	return self.Runtime.Curve_add_point(self, position, left_tangent, right_tangent, left_mode, right_mode)
}
func (self Curve) RemovePoint(index int64) {
	self.Runtime.Curve_remove_point(self, index)
}
func (self Curve) ClearPoints() {
	self.Runtime.Curve_clear_points(self)
}
func (self Curve) GetPointPosition(index int64) Vector2 {
	return self.Runtime.Curve_get_point_position(self, index)
}
func (self Curve) SetPointValue(index int64, y Float) {
	self.Runtime.Curve_set_point_value(self, index, y)
}
func (self Curve) SetPointOffset(index int64, offset Float) int64 {
	return self.Runtime.Curve_set_point_offset(self, index, offset)
}
func (self Curve) Sample(offset Float) Float {
	return self.Runtime.Curve_sample(self, offset)
}
func (self Curve) SampleBaked(offset Float) Float {
	return self.Runtime.Curve_sample_baked(self, offset)
}
func (self Curve) GetPointLeftTangent(index int64) Float {
	return self.Runtime.Curve_get_point_left_tangent(self, index)
}
func (self Curve) GetPointRightTangent(index int64) Float {
	return self.Runtime.Curve_get_point_right_tangent(self, index)
}
func (self Curve) GetPointLeftMode(index int64) CurveTangentMode {
	return self.Runtime.Curve_get_point_left_mode(self, index)
}
func (self Curve) GetPointRightMode(index int64) CurveTangentMode {
	return self.Runtime.Curve_get_point_right_mode(self, index)
}
func (self Curve) SetPointLeftTangent(index int64, tangent Float) {
	self.Runtime.Curve_set_point_left_tangent(self, index, tangent)
}
func (self Curve) SetPointRightTangent(index int64, tangent Float) {
	self.Runtime.Curve_set_point_right_tangent(self, index, tangent)
}
func (self Curve) SetPointLeftMode(index int64, mode CurveTangentMode) {
	self.Runtime.Curve_set_point_left_mode(self, index, mode)
}
func (self Curve) SetPointRightMode(index int64, mode CurveTangentMode) {
	self.Runtime.Curve_set_point_right_mode(self, index, mode)
}
func (self Curve) GetMinValue() Float {
	return self.Runtime.Curve_get_min_value(self)
}
func (self Curve) SetMinValue(min Float) {
	self.Runtime.Curve_set_min_value(self, min)
}
func (self Curve) GetMaxValue() Float {
	return self.Runtime.Curve_get_max_value(self)
}
func (self Curve) SetMaxValue(max Float) {
	self.Runtime.Curve_set_max_value(self, max)
}
func (self Curve) CleanDupes() {
	self.Runtime.Curve_clean_dupes(self)
}
func (self Curve) Bake() {
	self.Runtime.Curve_bake(self)
}
func (self Curve) GetBakeResolution() int64 {
	return self.Runtime.Curve_get_bake_resolution(self)
}
func (self Curve) SetBakeResolution(resolution int64) {
	self.Runtime.Curve_set_bake_resolution(self, resolution)
}

type extendsCurve2D struct {
	_ [0]*extendsCurve2D
	class
}

func (self Curve2D) Resource() Resource {
	var parent Resource
	parent.class = self.class
	return parent
}
func (self Curve2D) GetPointCount() int64 {
	return self.Runtime.Curve2D_get_point_count(self)
}
func (self Curve2D) SetPointCount(count int64) {
	self.Runtime.Curve2D_set_point_count(self, count)
}
func (self Curve2D) AddPoint(position Vector2, in Vector2, out Vector2, index int64) {
	self.Runtime.Curve2D_add_point(self, position, in, out, index)
}
func (self Curve2D) SetPointPosition(idx int64, position Vector2) {
	self.Runtime.Curve2D_set_point_position(self, idx, position)
}
func (self Curve2D) GetPointPosition(idx int64) Vector2 {
	return self.Runtime.Curve2D_get_point_position(self, idx)
}
func (self Curve2D) SetPointIn(idx int64, position Vector2) {
	self.Runtime.Curve2D_set_point_in(self, idx, position)
}
func (self Curve2D) GetPointIn(idx int64) Vector2 {
	return self.Runtime.Curve2D_get_point_in(self, idx)
}
func (self Curve2D) SetPointOut(idx int64, position Vector2) {
	self.Runtime.Curve2D_set_point_out(self, idx, position)
}
func (self Curve2D) GetPointOut(idx int64) Vector2 {
	return self.Runtime.Curve2D_get_point_out(self, idx)
}
func (self Curve2D) RemovePoint(idx int64) {
	self.Runtime.Curve2D_remove_point(self, idx)
}
func (self Curve2D) ClearPoints() {
	self.Runtime.Curve2D_clear_points(self)
}
func (self Curve2D) Sample(idx int64, t Float) Vector2 {
	return self.Runtime.Curve2D_sample(self, idx, t)
}
func (self Curve2D) Samplef(fofs Float) Vector2 {
	return self.Runtime.Curve2D_samplef(self, fofs)
}
func (self Curve2D) SetBakeInterval(distance Float) {
	self.Runtime.Curve2D_set_bake_interval(self, distance)
}
func (self Curve2D) GetBakeInterval() Float {
	return self.Runtime.Curve2D_get_bake_interval(self)
}
func (self Curve2D) GetBakedLength() Float {
	return self.Runtime.Curve2D_get_baked_length(self)
}
func (self Curve2D) SampleBaked(offset Float, cubic bool) Vector2 {
	return self.Runtime.Curve2D_sample_baked(self, offset, cubic)
}
func (self Curve2D) SampleBakedWithRotation(offset Float, cubic bool) Transform2D {
	return self.Runtime.Curve2D_sample_baked_with_rotation(self, offset, cubic)
}
func (self Curve2D) GetBakedPoints() PackedVector2Array {
	return self.Runtime.Curve2D_get_baked_points(self)
}
func (self Curve2D) GetClosestPoint(to_point Vector2) Vector2 {
	return self.Runtime.Curve2D_get_closest_point(self, to_point)
}
func (self Curve2D) GetClosestOffset(to_point Vector2) Float {
	return self.Runtime.Curve2D_get_closest_offset(self, to_point)
}
func (self Curve2D) Tessellate(max_stages int64, tolerance_degrees Float) PackedVector2Array {
	return self.Runtime.Curve2D_tessellate(self, max_stages, tolerance_degrees)
}
func (self Curve2D) TessellateEvenLength(max_stages int64, tolerance_length Float) PackedVector2Array {
	return self.Runtime.Curve2D_tessellate_even_length(self, max_stages, tolerance_length)
}

type extendsCurve3D struct {
	_ [0]*extendsCurve3D
	class
}

func (self Curve3D) Resource() Resource {
	var parent Resource
	parent.class = self.class
	return parent
}
func (self Curve3D) GetPointCount() int64 {
	return self.Runtime.Curve3D_get_point_count(self)
}
func (self Curve3D) SetPointCount(count int64) {
	self.Runtime.Curve3D_set_point_count(self, count)
}
func (self Curve3D) AddPoint(position Vector3, in Vector3, out Vector3, index int64) {
	self.Runtime.Curve3D_add_point(self, position, in, out, index)
}
func (self Curve3D) SetPointPosition(idx int64, position Vector3) {
	self.Runtime.Curve3D_set_point_position(self, idx, position)
}
func (self Curve3D) GetPointPosition(idx int64) Vector3 {
	return self.Runtime.Curve3D_get_point_position(self, idx)
}
func (self Curve3D) SetPointTilt(idx int64, tilt Float) {
	self.Runtime.Curve3D_set_point_tilt(self, idx, tilt)
}
func (self Curve3D) GetPointTilt(idx int64) Float {
	return self.Runtime.Curve3D_get_point_tilt(self, idx)
}
func (self Curve3D) SetPointIn(idx int64, position Vector3) {
	self.Runtime.Curve3D_set_point_in(self, idx, position)
}
func (self Curve3D) GetPointIn(idx int64) Vector3 {
	return self.Runtime.Curve3D_get_point_in(self, idx)
}
func (self Curve3D) SetPointOut(idx int64, position Vector3) {
	self.Runtime.Curve3D_set_point_out(self, idx, position)
}
func (self Curve3D) GetPointOut(idx int64) Vector3 {
	return self.Runtime.Curve3D_get_point_out(self, idx)
}
func (self Curve3D) RemovePoint(idx int64) {
	self.Runtime.Curve3D_remove_point(self, idx)
}
func (self Curve3D) ClearPoints() {
	self.Runtime.Curve3D_clear_points(self)
}
func (self Curve3D) Sample(idx int64, t Float) Vector3 {
	return self.Runtime.Curve3D_sample(self, idx, t)
}
func (self Curve3D) Samplef(fofs Float) Vector3 {
	return self.Runtime.Curve3D_samplef(self, fofs)
}
func (self Curve3D) SetBakeInterval(distance Float) {
	self.Runtime.Curve3D_set_bake_interval(self, distance)
}
func (self Curve3D) GetBakeInterval() Float {
	return self.Runtime.Curve3D_get_bake_interval(self)
}
func (self Curve3D) SetUpVectorEnabled(enable bool) {
	self.Runtime.Curve3D_set_up_vector_enabled(self, enable)
}
func (self Curve3D) IsUpVectorEnabled() bool {
	return self.Runtime.Curve3D_is_up_vector_enabled(self)
}
func (self Curve3D) GetBakedLength() Float {
	return self.Runtime.Curve3D_get_baked_length(self)
}
func (self Curve3D) SampleBaked(offset Float, cubic bool) Vector3 {
	return self.Runtime.Curve3D_sample_baked(self, offset, cubic)
}
func (self Curve3D) SampleBakedWithRotation(offset Float, cubic bool, apply_tilt bool) Transform3D {
	return self.Runtime.Curve3D_sample_baked_with_rotation(self, offset, cubic, apply_tilt)
}
func (self Curve3D) SampleBakedUpVector(offset Float, apply_tilt bool) Vector3 {
	return self.Runtime.Curve3D_sample_baked_up_vector(self, offset, apply_tilt)
}
func (self Curve3D) GetBakedPoints() PackedVector3Array {
	return self.Runtime.Curve3D_get_baked_points(self)
}
func (self Curve3D) GetBakedTilts() PackedFloat32Array {
	return self.Runtime.Curve3D_get_baked_tilts(self)
}
func (self Curve3D) GetBakedUpVectors() PackedVector3Array {
	return self.Runtime.Curve3D_get_baked_up_vectors(self)
}
func (self Curve3D) GetClosestPoint(to_point Vector3) Vector3 {
	return self.Runtime.Curve3D_get_closest_point(self, to_point)
}
func (self Curve3D) GetClosestOffset(to_point Vector3) Float {
	return self.Runtime.Curve3D_get_closest_offset(self, to_point)
}
func (self Curve3D) Tessellate(max_stages int64, tolerance_degrees Float) PackedVector3Array {
	return self.Runtime.Curve3D_tessellate(self, max_stages, tolerance_degrees)
}
func (self Curve3D) TessellateEvenLength(max_stages int64, tolerance_length Float) PackedVector3Array {
	return self.Runtime.Curve3D_tessellate_even_length(self, max_stages, tolerance_length)
}

type extendsCurveTexture struct {
	_ [0]*extendsCurveTexture
	class
}

func (self CurveTexture) Texture2D() Texture2D {
	var parent Texture2D
	parent.class = self.class
	return parent
}
func (self CurveTexture) SetWidth(width int64) {
	self.Runtime.CurveTexture_set_width(self, width)
}
func (self CurveTexture) SetCurve(curve Curve) {
	self.Runtime.CurveTexture_set_curve(self, curve)
}
func (self CurveTexture) GetCurve() Curve {
	return self.Runtime.CurveTexture_get_curve(self)
}
func (self CurveTexture) SetTextureMode(texture_mode CurveTextureTextureMode) {
	self.Runtime.CurveTexture_set_texture_mode(self, texture_mode)
}
func (self CurveTexture) GetTextureMode() CurveTextureTextureMode {
	return self.Runtime.CurveTexture_get_texture_mode(self)
}

type extendsCurveXYZTexture struct {
	_ [0]*extendsCurveXYZTexture
	class
}

func (self CurveXYZTexture) Texture2D() Texture2D {
	var parent Texture2D
	parent.class = self.class
	return parent
}
func (self CurveXYZTexture) SetWidth(width int64) {
	self.Runtime.CurveXYZTexture_set_width(self, width)
}
func (self CurveXYZTexture) SetCurveX(curve Curve) {
	self.Runtime.CurveXYZTexture_set_curve_x(self, curve)
}
func (self CurveXYZTexture) GetCurveX() Curve {
	return self.Runtime.CurveXYZTexture_get_curve_x(self)
}
func (self CurveXYZTexture) SetCurveY(curve Curve) {
	self.Runtime.CurveXYZTexture_set_curve_y(self, curve)
}
func (self CurveXYZTexture) GetCurveY() Curve {
	return self.Runtime.CurveXYZTexture_get_curve_y(self)
}
func (self CurveXYZTexture) SetCurveZ(curve Curve) {
	self.Runtime.CurveXYZTexture_set_curve_z(self, curve)
}
func (self CurveXYZTexture) GetCurveZ() Curve {
	return self.Runtime.CurveXYZTexture_get_curve_z(self)
}

type extendsCylinderMesh struct {
	_ [0]*extendsCylinderMesh
	class
}

func (self CylinderMesh) PrimitiveMesh() PrimitiveMesh {
	var parent PrimitiveMesh
	parent.class = self.class
	return parent
}
func (self CylinderMesh) SetTopRadius(radius Float) {
	self.Runtime.CylinderMesh_set_top_radius(self, radius)
}
func (self CylinderMesh) GetTopRadius() Float {
	return self.Runtime.CylinderMesh_get_top_radius(self)
}
func (self CylinderMesh) SetBottomRadius(radius Float) {
	self.Runtime.CylinderMesh_set_bottom_radius(self, radius)
}
func (self CylinderMesh) GetBottomRadius() Float {
	return self.Runtime.CylinderMesh_get_bottom_radius(self)
}
func (self CylinderMesh) SetHeight(height Float) {
	self.Runtime.CylinderMesh_set_height(self, height)
}
func (self CylinderMesh) GetHeight() Float {
	return self.Runtime.CylinderMesh_get_height(self)
}
func (self CylinderMesh) SetRadialSegments(segments int64) {
	self.Runtime.CylinderMesh_set_radial_segments(self, segments)
}
func (self CylinderMesh) GetRadialSegments() int64 {
	return self.Runtime.CylinderMesh_get_radial_segments(self)
}
func (self CylinderMesh) SetRings(rings int64) {
	self.Runtime.CylinderMesh_set_rings(self, rings)
}
func (self CylinderMesh) GetRings() int64 {
	return self.Runtime.CylinderMesh_get_rings(self)
}
func (self CylinderMesh) SetCapTop(cap_top bool) {
	self.Runtime.CylinderMesh_set_cap_top(self, cap_top)
}
func (self CylinderMesh) IsCapTop() bool {
	return self.Runtime.CylinderMesh_is_cap_top(self)
}
func (self CylinderMesh) SetCapBottom(cap_bottom bool) {
	self.Runtime.CylinderMesh_set_cap_bottom(self, cap_bottom)
}
func (self CylinderMesh) IsCapBottom() bool {
	return self.Runtime.CylinderMesh_is_cap_bottom(self)
}

type extendsCylinderShape3D struct {
	_ [0]*extendsCylinderShape3D
	class
}

func (self CylinderShape3D) Shape3D() Shape3D {
	var parent Shape3D
	parent.class = self.class
	return parent
}
func (self CylinderShape3D) SetRadius(radius Float) {
	self.Runtime.CylinderShape3D_set_radius(self, radius)
}
func (self CylinderShape3D) GetRadius() Float {
	return self.Runtime.CylinderShape3D_get_radius(self)
}
func (self CylinderShape3D) SetHeight(height Float) {
	self.Runtime.CylinderShape3D_set_height(self, height)
}
func (self CylinderShape3D) GetHeight() Float {
	return self.Runtime.CylinderShape3D_get_height(self)
}

type extendsDTLSServer struct {
	_ [0]*extendsDTLSServer
	class
}

func (self DTLSServer) RefCounted() RefCounted {
	var parent RefCounted
	parent.class = self.class
	return parent
}
func (self DTLSServer) Setup(server_options TLSOptions) int64 {
	return self.Runtime.DTLSServer_setup(self, server_options)
}
func (self DTLSServer) TakeConnection(udp_peer PacketPeerUDP) PacketPeerDTLS {
	return self.Runtime.DTLSServer_take_connection(self, udp_peer)
}

type extendsDampedSpringJoint2D struct {
	_ [0]*extendsDampedSpringJoint2D
	class
}

func (self DampedSpringJoint2D) Joint2D() Joint2D {
	var parent Joint2D
	parent.class = self.class
	return parent
}
func (self DampedSpringJoint2D) SetLength(length Float) {
	self.Runtime.DampedSpringJoint2D_set_length(self, length)
}
func (self DampedSpringJoint2D) GetLength() Float {
	return self.Runtime.DampedSpringJoint2D_get_length(self)
}
func (self DampedSpringJoint2D) SetRestLength(rest_length Float) {
	self.Runtime.DampedSpringJoint2D_set_rest_length(self, rest_length)
}
func (self DampedSpringJoint2D) GetRestLength() Float {
	return self.Runtime.DampedSpringJoint2D_get_rest_length(self)
}
func (self DampedSpringJoint2D) SetStiffness(stiffness Float) {
	self.Runtime.DampedSpringJoint2D_set_stiffness(self, stiffness)
}
func (self DampedSpringJoint2D) GetStiffness() Float {
	return self.Runtime.DampedSpringJoint2D_get_stiffness(self)
}
func (self DampedSpringJoint2D) SetDamping(damping Float) {
	self.Runtime.DampedSpringJoint2D_set_damping(self, damping)
}
func (self DampedSpringJoint2D) GetDamping() Float {
	return self.Runtime.DampedSpringJoint2D_get_damping(self)
}

type extendsDecal struct {
	_ [0]*extendsDecal
	class
}

func (self Decal) VisualInstance3D() VisualInstance3D {
	var parent VisualInstance3D
	parent.class = self.class
	return parent
}
func (self Decal) SetSize(size Vector3) {
	self.Runtime.Decal_set_size(self, size)
}
func (self Decal) GetSize() Vector3 {
	return self.Runtime.Decal_get_size(self)
}
func (self Decal) SetTexture(atype DecalDecalTexture, texture Texture2D) {
	self.Runtime.Decal_set_texture(self, atype, texture)
}
func (self Decal) GetTexture(atype DecalDecalTexture) Texture2D {
	return self.Runtime.Decal_get_texture(self, atype)
}
func (self Decal) SetEmissionEnergy(energy Float) {
	self.Runtime.Decal_set_emission_energy(self, energy)
}
func (self Decal) GetEmissionEnergy() Float {
	return self.Runtime.Decal_get_emission_energy(self)
}
func (self Decal) SetAlbedoMix(energy Float) {
	self.Runtime.Decal_set_albedo_mix(self, energy)
}
func (self Decal) GetAlbedoMix() Float {
	return self.Runtime.Decal_get_albedo_mix(self)
}
func (self Decal) SetModulate(color Color) {
	self.Runtime.Decal_set_modulate(self, color)
}
func (self Decal) GetModulate() Color {
	return self.Runtime.Decal_get_modulate(self)
}
func (self Decal) SetUpperFade(fade Float) {
	self.Runtime.Decal_set_upper_fade(self, fade)
}
func (self Decal) GetUpperFade() Float {
	return self.Runtime.Decal_get_upper_fade(self)
}
func (self Decal) SetLowerFade(fade Float) {
	self.Runtime.Decal_set_lower_fade(self, fade)
}
func (self Decal) GetLowerFade() Float {
	return self.Runtime.Decal_get_lower_fade(self)
}
func (self Decal) SetNormalFade(fade Float) {
	self.Runtime.Decal_set_normal_fade(self, fade)
}
func (self Decal) GetNormalFade() Float {
	return self.Runtime.Decal_get_normal_fade(self)
}
func (self Decal) SetEnableDistanceFade(enable bool) {
	self.Runtime.Decal_set_enable_distance_fade(self, enable)
}
func (self Decal) IsDistanceFadeEnabled() bool {
	return self.Runtime.Decal_is_distance_fade_enabled(self)
}
func (self Decal) SetDistanceFadeBegin(distance Float) {
	self.Runtime.Decal_set_distance_fade_begin(self, distance)
}
func (self Decal) GetDistanceFadeBegin() Float {
	return self.Runtime.Decal_get_distance_fade_begin(self)
}
func (self Decal) SetDistanceFadeLength(distance Float) {
	self.Runtime.Decal_set_distance_fade_length(self, distance)
}
func (self Decal) GetDistanceFadeLength() Float {
	return self.Runtime.Decal_get_distance_fade_length(self)
}
func (self Decal) SetCullMask(mask int64) {
	self.Runtime.Decal_set_cull_mask(self, mask)
}
func (self Decal) GetCullMask() int64 {
	return self.Runtime.Decal_get_cull_mask(self)
}

type extendsDirAccess struct {
	_ [0]*extendsDirAccess
	class
}

func (self DirAccess) RefCounted() RefCounted {
	var parent RefCounted
	parent.class = self.class
	return parent
}
func (self DirAccess) Open(path string) DirAccess {
	return self.Runtime.DirAccess_open(self, path)
}
func (self DirAccess) GetOpenError() int64 {
	return self.Runtime.DirAccess_get_open_error(self)
}
func (self DirAccess) ListDirBegin() int64 {
	return self.Runtime.DirAccess_list_dir_begin(self)
}
func (self DirAccess) GetNext() string {
	return self.Runtime.DirAccess_get_next(self)
}
func (self DirAccess) CurrentIsDir() bool {
	return self.Runtime.DirAccess_current_is_dir(self)
}
func (self DirAccess) ListDirEnd() {
	self.Runtime.DirAccess_list_dir_end(self)
}
func (self DirAccess) GetFiles() PackedStringArray {
	return self.Runtime.DirAccess_get_files(self)
}
func (self DirAccess) GetFilesAt(path string) PackedStringArray {
	return self.Runtime.DirAccess_get_files_at(self, path)
}
func (self DirAccess) GetDirectories() PackedStringArray {
	return self.Runtime.DirAccess_get_directories(self)
}
func (self DirAccess) GetDirectoriesAt(path string) PackedStringArray {
	return self.Runtime.DirAccess_get_directories_at(self, path)
}
func (self DirAccess) GetDriveCount() int64 {
	return self.Runtime.DirAccess_get_drive_count(self)
}
func (self DirAccess) GetDriveName(idx int64) string {
	return self.Runtime.DirAccess_get_drive_name(self, idx)
}
func (self DirAccess) GetCurrentDrive() int64 {
	return self.Runtime.DirAccess_get_current_drive(self)
}
func (self DirAccess) ChangeDir(to_dir string) int64 {
	return self.Runtime.DirAccess_change_dir(self, to_dir)
}
func (self DirAccess) GetCurrentDir(include_drive bool) string {
	return self.Runtime.DirAccess_get_current_dir(self, include_drive)
}
func (self DirAccess) MakeDir(path string) int64 {
	return self.Runtime.DirAccess_make_dir(self, path)
}
func (self DirAccess) MakeDirAbsolute(path string) int64 {
	return self.Runtime.DirAccess_make_dir_absolute(self, path)
}
func (self DirAccess) MakeDirRecursive(path string) int64 {
	return self.Runtime.DirAccess_make_dir_recursive(self, path)
}
func (self DirAccess) MakeDirRecursiveAbsolute(path string) int64 {
	return self.Runtime.DirAccess_make_dir_recursive_absolute(self, path)
}
func (self DirAccess) FileExists(path string) bool {
	return self.Runtime.DirAccess_file_exists(self, path)
}
func (self DirAccess) DirExists(path string) bool {
	return self.Runtime.DirAccess_dir_exists(self, path)
}
func (self DirAccess) DirExistsAbsolute(path string) bool {
	return self.Runtime.DirAccess_dir_exists_absolute(self, path)
}
func (self DirAccess) GetSpaceLeft() int64 {
	return self.Runtime.DirAccess_get_space_left(self)
}
func (self DirAccess) Copy(from string, to string, chmod_flags int64) int64 {
	return self.Runtime.DirAccess_copy(self, from, to, chmod_flags)
}
func (self DirAccess) CopyAbsolute(from string, to string, chmod_flags int64) int64 {
	return self.Runtime.DirAccess_copy_absolute(self, from, to, chmod_flags)
}
func (self DirAccess) Rename(from string, to string) int64 {
	return self.Runtime.DirAccess_rename(self, from, to)
}
func (self DirAccess) RenameAbsolute(from string, to string) int64 {
	return self.Runtime.DirAccess_rename_absolute(self, from, to)
}
func (self DirAccess) Remove(path string) int64 {
	return self.Runtime.DirAccess_remove(self, path)
}
func (self DirAccess) RemoveAbsolute(path string) int64 {
	return self.Runtime.DirAccess_remove_absolute(self, path)
}
func (self DirAccess) SetIncludeNavigational(enable bool) {
	self.Runtime.DirAccess_set_include_navigational(self, enable)
}
func (self DirAccess) GetIncludeNavigational() bool {
	return self.Runtime.DirAccess_get_include_navigational(self)
}
func (self DirAccess) SetIncludeHidden(enable bool) {
	self.Runtime.DirAccess_set_include_hidden(self, enable)
}
func (self DirAccess) GetIncludeHidden() bool {
	return self.Runtime.DirAccess_get_include_hidden(self)
}
func (self DirAccess) IsCaseSensitive(path string) bool {
	return self.Runtime.DirAccess_is_case_sensitive(self, path)
}

type extendsDirectionalLight2D struct {
	_ [0]*extendsDirectionalLight2D
	class
}

func (self DirectionalLight2D) Light2D() Light2D {
	var parent Light2D
	parent.class = self.class
	return parent
}
func (self DirectionalLight2D) SetMaxDistance(pixels Float) {
	self.Runtime.DirectionalLight2D_set_max_distance(self, pixels)
}
func (self DirectionalLight2D) GetMaxDistance() Float {
	return self.Runtime.DirectionalLight2D_get_max_distance(self)
}

type extendsDirectionalLight3D struct {
	_ [0]*extendsDirectionalLight3D
	class
}

func (self DirectionalLight3D) Light3D() Light3D {
	var parent Light3D
	parent.class = self.class
	return parent
}
func (self DirectionalLight3D) SetShadowMode(mode DirectionalLight3DShadowMode) {
	self.Runtime.DirectionalLight3D_set_shadow_mode(self, mode)
}
func (self DirectionalLight3D) GetShadowMode() DirectionalLight3DShadowMode {
	return self.Runtime.DirectionalLight3D_get_shadow_mode(self)
}
func (self DirectionalLight3D) SetBlendSplits(enabled bool) {
	self.Runtime.DirectionalLight3D_set_blend_splits(self, enabled)
}
func (self DirectionalLight3D) IsBlendSplitsEnabled() bool {
	return self.Runtime.DirectionalLight3D_is_blend_splits_enabled(self)
}
func (self DirectionalLight3D) SetSkyMode(mode DirectionalLight3DSkyMode) {
	self.Runtime.DirectionalLight3D_set_sky_mode(self, mode)
}
func (self DirectionalLight3D) GetSkyMode() DirectionalLight3DSkyMode {
	return self.Runtime.DirectionalLight3D_get_sky_mode(self)
}

type extendsDisplayServer struct {
	_ [0]*extendsDisplayServer
	class
}

func (self DisplayServer) Object() Object {
	var parent Object
	parent.class = self.class
	return parent
}
func (self DisplayServer) HasFeature(feature DisplayServerFeature) bool {
	return self.Runtime.DisplayServer_has_feature(self, feature)
}
func (self DisplayServer) GetName() string {
	return self.Runtime.DisplayServer_get_name(self)
}
func (self DisplayServer) GlobalMenuSetPopupCallbacks(menu_root string, open_callback Callable, close_callback Callable) {
	self.Runtime.DisplayServer_global_menu_set_popup_callbacks(self, menu_root, open_callback, close_callback)
}
func (self DisplayServer) GlobalMenuAddSubmenuItem(menu_root string, label string, submenu string, index int64) int64 {
	return self.Runtime.DisplayServer_global_menu_add_submenu_item(self, menu_root, label, submenu, index)
}
func (self DisplayServer) GlobalMenuAddItem(menu_root string, label string, callback Callable, key_callback Callable, tag any, accelerator Key, index int64) int64 {
	return self.Runtime.DisplayServer_global_menu_add_item(self, menu_root, label, callback, key_callback, tag, accelerator, index)
}
func (self DisplayServer) GlobalMenuAddCheckItem(menu_root string, label string, callback Callable, key_callback Callable, tag any, accelerator Key, index int64) int64 {
	return self.Runtime.DisplayServer_global_menu_add_check_item(self, menu_root, label, callback, key_callback, tag, accelerator, index)
}
func (self DisplayServer) GlobalMenuAddIconItem(menu_root string, icon Texture2D, label string, callback Callable, key_callback Callable, tag any, accelerator Key, index int64) int64 {
	return self.Runtime.DisplayServer_global_menu_add_icon_item(self, menu_root, icon, label, callback, key_callback, tag, accelerator, index)
}
func (self DisplayServer) GlobalMenuAddIconCheckItem(menu_root string, icon Texture2D, label string, callback Callable, key_callback Callable, tag any, accelerator Key, index int64) int64 {
	return self.Runtime.DisplayServer_global_menu_add_icon_check_item(self, menu_root, icon, label, callback, key_callback, tag, accelerator, index)
}
func (self DisplayServer) GlobalMenuAddRadioCheckItem(menu_root string, label string, callback Callable, key_callback Callable, tag any, accelerator Key, index int64) int64 {
	return self.Runtime.DisplayServer_global_menu_add_radio_check_item(self, menu_root, label, callback, key_callback, tag, accelerator, index)
}
func (self DisplayServer) GlobalMenuAddIconRadioCheckItem(menu_root string, icon Texture2D, label string, callback Callable, key_callback Callable, tag any, accelerator Key, index int64) int64 {
	return self.Runtime.DisplayServer_global_menu_add_icon_radio_check_item(self, menu_root, icon, label, callback, key_callback, tag, accelerator, index)
}
func (self DisplayServer) GlobalMenuAddMultistateItem(menu_root string, label string, max_states int64, default_state int64, callback Callable, key_callback Callable, tag any, accelerator Key, index int64) int64 {
	return self.Runtime.DisplayServer_global_menu_add_multistate_item(self, menu_root, label, max_states, default_state, callback, key_callback, tag, accelerator, index)
}
func (self DisplayServer) GlobalMenuAddSeparator(menu_root string, index int64) int64 {
	return self.Runtime.DisplayServer_global_menu_add_separator(self, menu_root, index)
}
func (self DisplayServer) GlobalMenuGetItemIndexFromText(menu_root string, text string) int64 {
	return self.Runtime.DisplayServer_global_menu_get_item_index_from_text(self, menu_root, text)
}
func (self DisplayServer) GlobalMenuGetItemIndexFromTag(menu_root string, tag any) int64 {
	return self.Runtime.DisplayServer_global_menu_get_item_index_from_tag(self, menu_root, tag)
}
func (self DisplayServer) GlobalMenuIsItemChecked(menu_root string, idx int64) bool {
	return self.Runtime.DisplayServer_global_menu_is_item_checked(self, menu_root, idx)
}
func (self DisplayServer) GlobalMenuIsItemCheckable(menu_root string, idx int64) bool {
	return self.Runtime.DisplayServer_global_menu_is_item_checkable(self, menu_root, idx)
}
func (self DisplayServer) GlobalMenuIsItemRadioCheckable(menu_root string, idx int64) bool {
	return self.Runtime.DisplayServer_global_menu_is_item_radio_checkable(self, menu_root, idx)
}
func (self DisplayServer) GlobalMenuGetItemCallback(menu_root string, idx int64) Callable {
	return self.Runtime.DisplayServer_global_menu_get_item_callback(self, menu_root, idx)
}
func (self DisplayServer) GlobalMenuGetItemKeyCallback(menu_root string, idx int64) Callable {
	return self.Runtime.DisplayServer_global_menu_get_item_key_callback(self, menu_root, idx)
}
func (self DisplayServer) GlobalMenuGetItemTag(menu_root string, idx int64) any {
	return self.Runtime.DisplayServer_global_menu_get_item_tag(self, menu_root, idx)
}
func (self DisplayServer) GlobalMenuGetItemText(menu_root string, idx int64) string {
	return self.Runtime.DisplayServer_global_menu_get_item_text(self, menu_root, idx)
}
func (self DisplayServer) GlobalMenuGetItemSubmenu(menu_root string, idx int64) string {
	return self.Runtime.DisplayServer_global_menu_get_item_submenu(self, menu_root, idx)
}
func (self DisplayServer) GlobalMenuGetItemAccelerator(menu_root string, idx int64) Key {
	return self.Runtime.DisplayServer_global_menu_get_item_accelerator(self, menu_root, idx)
}
func (self DisplayServer) GlobalMenuIsItemDisabled(menu_root string, idx int64) bool {
	return self.Runtime.DisplayServer_global_menu_is_item_disabled(self, menu_root, idx)
}
func (self DisplayServer) GlobalMenuIsItemHidden(menu_root string, idx int64) bool {
	return self.Runtime.DisplayServer_global_menu_is_item_hidden(self, menu_root, idx)
}
func (self DisplayServer) GlobalMenuGetItemTooltip(menu_root string, idx int64) string {
	return self.Runtime.DisplayServer_global_menu_get_item_tooltip(self, menu_root, idx)
}
func (self DisplayServer) GlobalMenuGetItemState(menu_root string, idx int64) int64 {
	return self.Runtime.DisplayServer_global_menu_get_item_state(self, menu_root, idx)
}
func (self DisplayServer) GlobalMenuGetItemMaxStates(menu_root string, idx int64) int64 {
	return self.Runtime.DisplayServer_global_menu_get_item_max_states(self, menu_root, idx)
}
func (self DisplayServer) GlobalMenuGetItemIcon(menu_root string, idx int64) Texture2D {
	return self.Runtime.DisplayServer_global_menu_get_item_icon(self, menu_root, idx)
}
func (self DisplayServer) GlobalMenuGetItemIndentationLevel(menu_root string, idx int64) int64 {
	return self.Runtime.DisplayServer_global_menu_get_item_indentation_level(self, menu_root, idx)
}
func (self DisplayServer) GlobalMenuSetItemChecked(menu_root string, idx int64, checked bool) {
	self.Runtime.DisplayServer_global_menu_set_item_checked(self, menu_root, idx, checked)
}
func (self DisplayServer) GlobalMenuSetItemCheckable(menu_root string, idx int64, checkable bool) {
	self.Runtime.DisplayServer_global_menu_set_item_checkable(self, menu_root, idx, checkable)
}
func (self DisplayServer) GlobalMenuSetItemRadioCheckable(menu_root string, idx int64, checkable bool) {
	self.Runtime.DisplayServer_global_menu_set_item_radio_checkable(self, menu_root, idx, checkable)
}
func (self DisplayServer) GlobalMenuSetItemCallback(menu_root string, idx int64, callback Callable) {
	self.Runtime.DisplayServer_global_menu_set_item_callback(self, menu_root, idx, callback)
}
func (self DisplayServer) GlobalMenuSetItemHoverCallbacks(menu_root string, idx int64, callback Callable) {
	self.Runtime.DisplayServer_global_menu_set_item_hover_callbacks(self, menu_root, idx, callback)
}
func (self DisplayServer) GlobalMenuSetItemKeyCallback(menu_root string, idx int64, key_callback Callable) {
	self.Runtime.DisplayServer_global_menu_set_item_key_callback(self, menu_root, idx, key_callback)
}
func (self DisplayServer) GlobalMenuSetItemTag(menu_root string, idx int64, tag any) {
	self.Runtime.DisplayServer_global_menu_set_item_tag(self, menu_root, idx, tag)
}
func (self DisplayServer) GlobalMenuSetItemText(menu_root string, idx int64, text string) {
	self.Runtime.DisplayServer_global_menu_set_item_text(self, menu_root, idx, text)
}
func (self DisplayServer) GlobalMenuSetItemSubmenu(menu_root string, idx int64, submenu string) {
	self.Runtime.DisplayServer_global_menu_set_item_submenu(self, menu_root, idx, submenu)
}
func (self DisplayServer) GlobalMenuSetItemAccelerator(menu_root string, idx int64, keycode Key) {
	self.Runtime.DisplayServer_global_menu_set_item_accelerator(self, menu_root, idx, keycode)
}
func (self DisplayServer) GlobalMenuSetItemDisabled(menu_root string, idx int64, disabled bool) {
	self.Runtime.DisplayServer_global_menu_set_item_disabled(self, menu_root, idx, disabled)
}
func (self DisplayServer) GlobalMenuSetItemHidden(menu_root string, idx int64, hidden bool) {
	self.Runtime.DisplayServer_global_menu_set_item_hidden(self, menu_root, idx, hidden)
}
func (self DisplayServer) GlobalMenuSetItemTooltip(menu_root string, idx int64, tooltip string) {
	self.Runtime.DisplayServer_global_menu_set_item_tooltip(self, menu_root, idx, tooltip)
}
func (self DisplayServer) GlobalMenuSetItemState(menu_root string, idx int64, state int64) {
	self.Runtime.DisplayServer_global_menu_set_item_state(self, menu_root, idx, state)
}
func (self DisplayServer) GlobalMenuSetItemMaxStates(menu_root string, idx int64, max_states int64) {
	self.Runtime.DisplayServer_global_menu_set_item_max_states(self, menu_root, idx, max_states)
}
func (self DisplayServer) GlobalMenuSetItemIcon(menu_root string, idx int64, icon Texture2D) {
	self.Runtime.DisplayServer_global_menu_set_item_icon(self, menu_root, idx, icon)
}
func (self DisplayServer) GlobalMenuSetItemIndentationLevel(menu_root string, idx int64, level int64) {
	self.Runtime.DisplayServer_global_menu_set_item_indentation_level(self, menu_root, idx, level)
}
func (self DisplayServer) GlobalMenuGetItemCount(menu_root string) int64 {
	return self.Runtime.DisplayServer_global_menu_get_item_count(self, menu_root)
}
func (self DisplayServer) GlobalMenuRemoveItem(menu_root string, idx int64) {
	self.Runtime.DisplayServer_global_menu_remove_item(self, menu_root, idx)
}
func (self DisplayServer) GlobalMenuClear(menu_root string) {
	self.Runtime.DisplayServer_global_menu_clear(self, menu_root)
}
func (self DisplayServer) GlobalMenuGetSystemMenuRoots() Dictionary {
	return self.Runtime.DisplayServer_global_menu_get_system_menu_roots(self)
}
func (self DisplayServer) TtsIsSpeaking() bool {
	return self.Runtime.DisplayServer_tts_is_speaking(self)
}
func (self DisplayServer) TtsIsPaused() bool {
	return self.Runtime.DisplayServer_tts_is_paused(self)
}
func (self DisplayServer) TtsGetVoices() ArrayOf[Dictionary] {
	return self.Runtime.DisplayServer_tts_get_voices(self)
}
func (self DisplayServer) TtsGetVoicesForLanguage(language string) PackedStringArray {
	return self.Runtime.DisplayServer_tts_get_voices_for_language(self, language)
}
func (self DisplayServer) TtsSpeak(text string, voice string, volume int64, pitch Float, rate Float, utterance_id int64, interrupt bool) {
	self.Runtime.DisplayServer_tts_speak(self, text, voice, volume, pitch, rate, utterance_id, interrupt)
}
func (self DisplayServer) TtsPause() {
	self.Runtime.DisplayServer_tts_pause(self)
}
func (self DisplayServer) TtsResume() {
	self.Runtime.DisplayServer_tts_resume(self)
}
func (self DisplayServer) TtsStop() {
	self.Runtime.DisplayServer_tts_stop(self)
}
func (self DisplayServer) TtsSetUtteranceCallback(event DisplayServerTTSUtteranceEvent, callable Callable) {
	self.Runtime.DisplayServer_tts_set_utterance_callback(self, event, callable)
}
func (self DisplayServer) IsDarkModeSupported() bool {
	return self.Runtime.DisplayServer_is_dark_mode_supported(self)
}
func (self DisplayServer) IsDarkMode() bool {
	return self.Runtime.DisplayServer_is_dark_mode(self)
}
func (self DisplayServer) GetAccentColor() Color {
	return self.Runtime.DisplayServer_get_accent_color(self)
}
func (self DisplayServer) MouseSetMode(mouse_mode DisplayServerMouseMode) {
	self.Runtime.DisplayServer_mouse_set_mode(self, mouse_mode)
}
func (self DisplayServer) MouseGetMode() DisplayServerMouseMode {
	return self.Runtime.DisplayServer_mouse_get_mode(self)
}
func (self DisplayServer) WarpMouse(position Vector2i) {
	self.Runtime.DisplayServer_warp_mouse(self, position)
}
func (self DisplayServer) MouseGetPosition() Vector2i {
	return self.Runtime.DisplayServer_mouse_get_position(self)
}
func (self DisplayServer) MouseGetButtonState() MouseButtonMask {
	return self.Runtime.DisplayServer_mouse_get_button_state(self)
}
func (self DisplayServer) ClipboardSet(clipboard string) {
	self.Runtime.DisplayServer_clipboard_set(self, clipboard)
}
func (self DisplayServer) ClipboardGet() string {
	return self.Runtime.DisplayServer_clipboard_get(self)
}
func (self DisplayServer) ClipboardGetImage() Image {
	return self.Runtime.DisplayServer_clipboard_get_image(self)
}
func (self DisplayServer) ClipboardHas() bool {
	return self.Runtime.DisplayServer_clipboard_has(self)
}
func (self DisplayServer) ClipboardHasImage() bool {
	return self.Runtime.DisplayServer_clipboard_has_image(self)
}
func (self DisplayServer) ClipboardSetPrimary(clipboard_primary string) {
	self.Runtime.DisplayServer_clipboard_set_primary(self, clipboard_primary)
}
func (self DisplayServer) ClipboardGetPrimary() string {
	return self.Runtime.DisplayServer_clipboard_get_primary(self)
}
func (self DisplayServer) GetDisplayCutouts() ArrayOf[Rect2] {
	return self.Runtime.DisplayServer_get_display_cutouts(self)
}
func (self DisplayServer) GetDisplaySafeArea() Rect2i {
	return self.Runtime.DisplayServer_get_display_safe_area(self)
}
func (self DisplayServer) GetScreenCount() int64 {
	return self.Runtime.DisplayServer_get_screen_count(self)
}
func (self DisplayServer) GetPrimaryScreen() int64 {
	return self.Runtime.DisplayServer_get_primary_screen(self)
}
func (self DisplayServer) GetKeyboardFocusScreen() int64 {
	return self.Runtime.DisplayServer_get_keyboard_focus_screen(self)
}
func (self DisplayServer) GetScreenFromRect(rect Rect2) int64 {
	return self.Runtime.DisplayServer_get_screen_from_rect(self, rect)
}
func (self DisplayServer) ScreenGetPosition(screen int64) Vector2i {
	return self.Runtime.DisplayServer_screen_get_position(self, screen)
}
func (self DisplayServer) ScreenGetSize(screen int64) Vector2i {
	return self.Runtime.DisplayServer_screen_get_size(self, screen)
}
func (self DisplayServer) ScreenGetUsableRect(screen int64) Rect2i {
	return self.Runtime.DisplayServer_screen_get_usable_rect(self, screen)
}
func (self DisplayServer) ScreenGetDpi(screen int64) int64 {
	return self.Runtime.DisplayServer_screen_get_dpi(self, screen)
}
func (self DisplayServer) ScreenGetScale(screen int64) Float {
	return self.Runtime.DisplayServer_screen_get_scale(self, screen)
}
func (self DisplayServer) IsTouchscreenAvailable() bool {
	return self.Runtime.DisplayServer_is_touchscreen_available(self)
}
func (self DisplayServer) ScreenGetMaxScale() Float {
	return self.Runtime.DisplayServer_screen_get_max_scale(self)
}
func (self DisplayServer) ScreenGetRefreshRate(screen int64) Float {
	return self.Runtime.DisplayServer_screen_get_refresh_rate(self, screen)
}
func (self DisplayServer) ScreenGetPixel(position Vector2i) Color {
	return self.Runtime.DisplayServer_screen_get_pixel(self, position)
}
func (self DisplayServer) ScreenGetImage(screen int64) Image {
	return self.Runtime.DisplayServer_screen_get_image(self, screen)
}
func (self DisplayServer) ScreenSetOrientation(orientation DisplayServerScreenOrientation, screen int64) {
	self.Runtime.DisplayServer_screen_set_orientation(self, orientation, screen)
}
func (self DisplayServer) ScreenGetOrientation(screen int64) DisplayServerScreenOrientation {
	return self.Runtime.DisplayServer_screen_get_orientation(self, screen)
}
func (self DisplayServer) ScreenSetKeepOn(enable bool) {
	self.Runtime.DisplayServer_screen_set_keep_on(self, enable)
}
func (self DisplayServer) ScreenIsKeptOn() bool {
	return self.Runtime.DisplayServer_screen_is_kept_on(self)
}
func (self DisplayServer) GetWindowList() PackedInt32Array {
	return self.Runtime.DisplayServer_get_window_list(self)
}
func (self DisplayServer) GetWindowAtScreenPosition(position Vector2i) int64 {
	return self.Runtime.DisplayServer_get_window_at_screen_position(self, position)
}
func (self DisplayServer) WindowGetNativeHandle(handle_type DisplayServerHandleType, window_id int64) int64 {
	return self.Runtime.DisplayServer_window_get_native_handle(self, handle_type, window_id)
}
func (self DisplayServer) WindowGetActivePopup() int64 {
	return self.Runtime.DisplayServer_window_get_active_popup(self)
}
func (self DisplayServer) WindowSetPopupSafeRect(window int64, rect Rect2i) {
	self.Runtime.DisplayServer_window_set_popup_safe_rect(self, window, rect)
}
func (self DisplayServer) WindowGetPopupSafeRect(window int64) Rect2i {
	return self.Runtime.DisplayServer_window_get_popup_safe_rect(self, window)
}
func (self DisplayServer) WindowSetTitle(title string, window_id int64) {
	self.Runtime.DisplayServer_window_set_title(self, title, window_id)
}
func (self DisplayServer) WindowGetTitleSize(title string, window_id int64) Vector2i {
	return self.Runtime.DisplayServer_window_get_title_size(self, title, window_id)
}
func (self DisplayServer) WindowSetMousePassthrough(region PackedVector2Array, window_id int64) {
	self.Runtime.DisplayServer_window_set_mouse_passthrough(self, region, window_id)
}
func (self DisplayServer) WindowGetCurrentScreen(window_id int64) int64 {
	return self.Runtime.DisplayServer_window_get_current_screen(self, window_id)
}
func (self DisplayServer) WindowSetCurrentScreen(screen int64, window_id int64) {
	self.Runtime.DisplayServer_window_set_current_screen(self, screen, window_id)
}
func (self DisplayServer) WindowGetPosition(window_id int64) Vector2i {
	return self.Runtime.DisplayServer_window_get_position(self, window_id)
}
func (self DisplayServer) WindowGetPositionWithDecorations(window_id int64) Vector2i {
	return self.Runtime.DisplayServer_window_get_position_with_decorations(self, window_id)
}
func (self DisplayServer) WindowSetPosition(position Vector2i, window_id int64) {
	self.Runtime.DisplayServer_window_set_position(self, position, window_id)
}
func (self DisplayServer) WindowGetSize(window_id int64) Vector2i {
	return self.Runtime.DisplayServer_window_get_size(self, window_id)
}
func (self DisplayServer) WindowSetSize(size Vector2i, window_id int64) {
	self.Runtime.DisplayServer_window_set_size(self, size, window_id)
}
func (self DisplayServer) WindowSetRectChangedCallback(callback Callable, window_id int64) {
	self.Runtime.DisplayServer_window_set_rect_changed_callback(self, callback, window_id)
}
func (self DisplayServer) WindowSetWindowEventCallback(callback Callable, window_id int64) {
	self.Runtime.DisplayServer_window_set_window_event_callback(self, callback, window_id)
}
func (self DisplayServer) WindowSetInputEventCallback(callback Callable, window_id int64) {
	self.Runtime.DisplayServer_window_set_input_event_callback(self, callback, window_id)
}
func (self DisplayServer) WindowSetInputTextCallback(callback Callable, window_id int64) {
	self.Runtime.DisplayServer_window_set_input_text_callback(self, callback, window_id)
}
func (self DisplayServer) WindowSetDropFilesCallback(callback Callable, window_id int64) {
	self.Runtime.DisplayServer_window_set_drop_files_callback(self, callback, window_id)
}
func (self DisplayServer) WindowGetAttachedInstanceId(window_id int64) int64 {
	return self.Runtime.DisplayServer_window_get_attached_instance_id(self, window_id)
}
func (self DisplayServer) WindowGetMaxSize(window_id int64) Vector2i {
	return self.Runtime.DisplayServer_window_get_max_size(self, window_id)
}
func (self DisplayServer) WindowSetMaxSize(max_size Vector2i, window_id int64) {
	self.Runtime.DisplayServer_window_set_max_size(self, max_size, window_id)
}
func (self DisplayServer) WindowGetMinSize(window_id int64) Vector2i {
	return self.Runtime.DisplayServer_window_get_min_size(self, window_id)
}
func (self DisplayServer) WindowSetMinSize(min_size Vector2i, window_id int64) {
	self.Runtime.DisplayServer_window_set_min_size(self, min_size, window_id)
}
func (self DisplayServer) WindowGetSizeWithDecorations(window_id int64) Vector2i {
	return self.Runtime.DisplayServer_window_get_size_with_decorations(self, window_id)
}
func (self DisplayServer) WindowGetMode(window_id int64) DisplayServerWindowMode {
	return self.Runtime.DisplayServer_window_get_mode(self, window_id)
}
func (self DisplayServer) WindowSetMode(mode DisplayServerWindowMode, window_id int64) {
	self.Runtime.DisplayServer_window_set_mode(self, mode, window_id)
}
func (self DisplayServer) WindowSetFlag(flag DisplayServerWindowFlags, enabled bool, window_id int64) {
	self.Runtime.DisplayServer_window_set_flag(self, flag, enabled, window_id)
}
func (self DisplayServer) WindowGetFlag(flag DisplayServerWindowFlags, window_id int64) bool {
	return self.Runtime.DisplayServer_window_get_flag(self, flag, window_id)
}
func (self DisplayServer) WindowSetWindowButtonsOffset(offset Vector2i, window_id int64) {
	self.Runtime.DisplayServer_window_set_window_buttons_offset(self, offset, window_id)
}
func (self DisplayServer) WindowGetSafeTitleMargins(window_id int64) Vector3i {
	return self.Runtime.DisplayServer_window_get_safe_title_margins(self, window_id)
}
func (self DisplayServer) WindowRequestAttention(window_id int64) {
	self.Runtime.DisplayServer_window_request_attention(self, window_id)
}
func (self DisplayServer) WindowMoveToForeground(window_id int64) {
	self.Runtime.DisplayServer_window_move_to_foreground(self, window_id)
}
func (self DisplayServer) WindowIsFocused(window_id int64) bool {
	return self.Runtime.DisplayServer_window_is_focused(self, window_id)
}
func (self DisplayServer) WindowCanDraw(window_id int64) bool {
	return self.Runtime.DisplayServer_window_can_draw(self, window_id)
}
func (self DisplayServer) WindowSetTransient(window_id int64, parent_window_id int64) {
	self.Runtime.DisplayServer_window_set_transient(self, window_id, parent_window_id)
}
func (self DisplayServer) WindowSetExclusive(window_id int64, exclusive bool) {
	self.Runtime.DisplayServer_window_set_exclusive(self, window_id, exclusive)
}
func (self DisplayServer) WindowSetImeActive(active bool, window_id int64) {
	self.Runtime.DisplayServer_window_set_ime_active(self, active, window_id)
}
func (self DisplayServer) WindowSetImePosition(position Vector2i, window_id int64) {
	self.Runtime.DisplayServer_window_set_ime_position(self, position, window_id)
}
func (self DisplayServer) WindowSetVsyncMode(vsync_mode DisplayServerVSyncMode, window_id int64) {
	self.Runtime.DisplayServer_window_set_vsync_mode(self, vsync_mode, window_id)
}
func (self DisplayServer) WindowGetVsyncMode(window_id int64) DisplayServerVSyncMode {
	return self.Runtime.DisplayServer_window_get_vsync_mode(self, window_id)
}
func (self DisplayServer) WindowIsMaximizeAllowed(window_id int64) bool {
	return self.Runtime.DisplayServer_window_is_maximize_allowed(self, window_id)
}
func (self DisplayServer) WindowMaximizeOnTitleDblClick() bool {
	return self.Runtime.DisplayServer_window_maximize_on_title_dbl_click(self)
}
func (self DisplayServer) WindowMinimizeOnTitleDblClick() bool {
	return self.Runtime.DisplayServer_window_minimize_on_title_dbl_click(self)
}
func (self DisplayServer) ImeGetSelection() Vector2i {
	return self.Runtime.DisplayServer_ime_get_selection(self)
}
func (self DisplayServer) ImeGetText() string {
	return self.Runtime.DisplayServer_ime_get_text(self)
}
func (self DisplayServer) VirtualKeyboardShow(existing_text string, position Rect2, atype DisplayServerVirtualKeyboardType, max_length int64, cursor_start int64, cursor_end int64) {
	self.Runtime.DisplayServer_virtual_keyboard_show(self, existing_text, position, atype, max_length, cursor_start, cursor_end)
}
func (self DisplayServer) VirtualKeyboardHide() {
	self.Runtime.DisplayServer_virtual_keyboard_hide(self)
}
func (self DisplayServer) VirtualKeyboardGetHeight() int64 {
	return self.Runtime.DisplayServer_virtual_keyboard_get_height(self)
}
func (self DisplayServer) CursorSetShape(shape DisplayServerCursorShape) {
	self.Runtime.DisplayServer_cursor_set_shape(self, shape)
}
func (self DisplayServer) CursorGetShape() DisplayServerCursorShape {
	return self.Runtime.DisplayServer_cursor_get_shape(self)
}
func (self DisplayServer) CursorSetCustomImage(cursor Resource, shape DisplayServerCursorShape, hotspot Vector2) {
	self.Runtime.DisplayServer_cursor_set_custom_image(self, cursor, shape, hotspot)
}
func (self DisplayServer) GetSwapCancelOk() bool {
	return self.Runtime.DisplayServer_get_swap_cancel_ok(self)
}
func (self DisplayServer) EnableForStealingFocus(process_id int64) {
	self.Runtime.DisplayServer_enable_for_stealing_focus(self, process_id)
}
func (self DisplayServer) DialogShow(title string, description string, buttons PackedStringArray, callback Callable) int64 {
	return self.Runtime.DisplayServer_dialog_show(self, title, description, buttons, callback)
}
func (self DisplayServer) DialogInputText(title string, description string, existing_text string, callback Callable) int64 {
	return self.Runtime.DisplayServer_dialog_input_text(self, title, description, existing_text, callback)
}
func (self DisplayServer) FileDialogShow(title string, current_directory string, filename string, show_hidden bool, mode DisplayServerFileDialogMode, filters PackedStringArray, callback Callable) int64 {
	return self.Runtime.DisplayServer_file_dialog_show(self, title, current_directory, filename, show_hidden, mode, filters, callback)
}
func (self DisplayServer) KeyboardGetLayoutCount() int64 {
	return self.Runtime.DisplayServer_keyboard_get_layout_count(self)
}
func (self DisplayServer) KeyboardGetCurrentLayout() int64 {
	return self.Runtime.DisplayServer_keyboard_get_current_layout(self)
}
func (self DisplayServer) KeyboardSetCurrentLayout(index int64) {
	self.Runtime.DisplayServer_keyboard_set_current_layout(self, index)
}
func (self DisplayServer) KeyboardGetLayoutLanguage(index int64) string {
	return self.Runtime.DisplayServer_keyboard_get_layout_language(self, index)
}
func (self DisplayServer) KeyboardGetLayoutName(index int64) string {
	return self.Runtime.DisplayServer_keyboard_get_layout_name(self, index)
}
func (self DisplayServer) KeyboardGetKeycodeFromPhysical(keycode Key) Key {
	return self.Runtime.DisplayServer_keyboard_get_keycode_from_physical(self, keycode)
}
func (self DisplayServer) KeyboardGetLabelFromPhysical(keycode Key) Key {
	return self.Runtime.DisplayServer_keyboard_get_label_from_physical(self, keycode)
}
func (self DisplayServer) ProcessEvents() {
	self.Runtime.DisplayServer_process_events(self)
}
func (self DisplayServer) ForceProcessAndDropEvents() {
	self.Runtime.DisplayServer_force_process_and_drop_events(self)
}
func (self DisplayServer) SetNativeIcon(filename string) {
	self.Runtime.DisplayServer_set_native_icon(self, filename)
}
func (self DisplayServer) SetIcon(image Image) {
	self.Runtime.DisplayServer_set_icon(self, image)
}
func (self DisplayServer) TabletGetDriverCount() int64 {
	return self.Runtime.DisplayServer_tablet_get_driver_count(self)
}
func (self DisplayServer) TabletGetDriverName(idx int64) string {
	return self.Runtime.DisplayServer_tablet_get_driver_name(self, idx)
}
func (self DisplayServer) TabletGetCurrentDriver() string {
	return self.Runtime.DisplayServer_tablet_get_current_driver(self)
}
func (self DisplayServer) TabletSetCurrentDriver(name string) {
	self.Runtime.DisplayServer_tablet_set_current_driver(self, name)
}

type extendsENetConnection struct {
	_ [0]*extendsENetConnection
	class
}

func (self ENetConnection) RefCounted() RefCounted {
	var parent RefCounted
	parent.class = self.class
	return parent
}
func (self ENetConnection) CreateHostBound(bind_address string, bind_port int64, max_peers int64, max_channels int64, in_bandwidth int64, out_bandwidth int64) int64 {
	return self.Runtime.ENetConnection_create_host_bound(self, bind_address, bind_port, max_peers, max_channels, in_bandwidth, out_bandwidth)
}
func (self ENetConnection) CreateHost(max_peers int64, max_channels int64, in_bandwidth int64, out_bandwidth int64) int64 {
	return self.Runtime.ENetConnection_create_host(self, max_peers, max_channels, in_bandwidth, out_bandwidth)
}
func (self ENetConnection) Destroy() {
	self.Runtime.ENetConnection_destroy(self)
}
func (self ENetConnection) ConnectToHost(address string, port int64, channels int64, data int64) ENetPacketPeer {
	return self.Runtime.ENetConnection_connect_to_host(self, address, port, channels, data)
}
func (self ENetConnection) Service(timeout int64) Array {
	return self.Runtime.ENetConnection_service(self, timeout)
}
func (self ENetConnection) Flush() {
	self.Runtime.ENetConnection_flush(self)
}
func (self ENetConnection) BandwidthLimit(in_bandwidth int64, out_bandwidth int64) {
	self.Runtime.ENetConnection_bandwidth_limit(self, in_bandwidth, out_bandwidth)
}
func (self ENetConnection) ChannelLimit(limit int64) {
	self.Runtime.ENetConnection_channel_limit(self, limit)
}
func (self ENetConnection) Broadcast(channel int64, packet PackedByteArray, flags int64) {
	self.Runtime.ENetConnection_broadcast(self, channel, packet, flags)
}
func (self ENetConnection) Compress(mode ENetConnectionCompressionMode) {
	self.Runtime.ENetConnection_compress(self, mode)
}
func (self ENetConnection) DtlsServerSetup(server_options TLSOptions) int64 {
	return self.Runtime.ENetConnection_dtls_server_setup(self, server_options)
}
func (self ENetConnection) DtlsClientSetup(hostname string, client_options TLSOptions) int64 {
	return self.Runtime.ENetConnection_dtls_client_setup(self, hostname, client_options)
}
func (self ENetConnection) RefuseNewConnections(refuse bool) {
	self.Runtime.ENetConnection_refuse_new_connections(self, refuse)
}
func (self ENetConnection) PopStatistic(statistic ENetConnectionHostStatistic) Float {
	return self.Runtime.ENetConnection_pop_statistic(self, statistic)
}
func (self ENetConnection) GetMaxChannels() int64 {
	return self.Runtime.ENetConnection_get_max_channels(self)
}
func (self ENetConnection) GetLocalPort() int64 {
	return self.Runtime.ENetConnection_get_local_port(self)
}
func (self ENetConnection) GetPeers() ArrayOf[ENetPacketPeer] {
	return self.Runtime.ENetConnection_get_peers(self)
}
func (self ENetConnection) SocketSend(destination_address string, destination_port int64, packet PackedByteArray) {
	self.Runtime.ENetConnection_socket_send(self, destination_address, destination_port, packet)
}

type extendsENetMultiplayerPeer struct {
	_ [0]*extendsENetMultiplayerPeer
	class
}

func (self ENetMultiplayerPeer) MultiplayerPeer() MultiplayerPeer {
	var parent MultiplayerPeer
	parent.class = self.class
	return parent
}
func (self ENetMultiplayerPeer) CreateServer(port int64, max_clients int64, max_channels int64, in_bandwidth int64, out_bandwidth int64) int64 {
	return self.Runtime.ENetMultiplayerPeer_create_server(self, port, max_clients, max_channels, in_bandwidth, out_bandwidth)
}
func (self ENetMultiplayerPeer) CreateClient(address string, port int64, channel_count int64, in_bandwidth int64, out_bandwidth int64, local_port int64) int64 {
	return self.Runtime.ENetMultiplayerPeer_create_client(self, address, port, channel_count, in_bandwidth, out_bandwidth, local_port)
}
func (self ENetMultiplayerPeer) CreateMesh(unique_id int64) int64 {
	return self.Runtime.ENetMultiplayerPeer_create_mesh(self, unique_id)
}
func (self ENetMultiplayerPeer) AddMeshPeer(peer_id int64, host ENetConnection) int64 {
	return self.Runtime.ENetMultiplayerPeer_add_mesh_peer(self, peer_id, host)
}
func (self ENetMultiplayerPeer) SetBindIp(ip string) {
	self.Runtime.ENetMultiplayerPeer_set_bind_ip(self, ip)
}
func (self ENetMultiplayerPeer) GetHost() ENetConnection {
	return self.Runtime.ENetMultiplayerPeer_get_host(self)
}
func (self ENetMultiplayerPeer) GetPeer(id int64) ENetPacketPeer {
	return self.Runtime.ENetMultiplayerPeer_get_peer(self, id)
}

type extendsENetPacketPeer struct {
	_ [0]*extendsENetPacketPeer
	class
}

func (self ENetPacketPeer) PacketPeer() PacketPeer {
	var parent PacketPeer
	parent.class = self.class
	return parent
}
func (self ENetPacketPeer) PeerDisconnect(data int64) {
	self.Runtime.ENetPacketPeer_peer_disconnect(self, data)
}
func (self ENetPacketPeer) PeerDisconnectLater(data int64) {
	self.Runtime.ENetPacketPeer_peer_disconnect_later(self, data)
}
func (self ENetPacketPeer) PeerDisconnectNow(data int64) {
	self.Runtime.ENetPacketPeer_peer_disconnect_now(self, data)
}
func (self ENetPacketPeer) Ping() {
	self.Runtime.ENetPacketPeer_ping(self)
}
func (self ENetPacketPeer) PingInterval(ping_interval int64) {
	self.Runtime.ENetPacketPeer_ping_interval(self, ping_interval)
}
func (self ENetPacketPeer) Reset() {
	self.Runtime.ENetPacketPeer_reset(self)
}
func (self ENetPacketPeer) Send(channel int64, packet PackedByteArray, flags int64) int64 {
	return self.Runtime.ENetPacketPeer_send(self, channel, packet, flags)
}
func (self ENetPacketPeer) ThrottleConfigure(interval int64, acceleration int64, deceleration int64) {
	self.Runtime.ENetPacketPeer_throttle_configure(self, interval, acceleration, deceleration)
}
func (self ENetPacketPeer) SetTimeout(timeout int64, timeout_min int64, timeout_max int64) {
	self.Runtime.ENetPacketPeer_set_timeout(self, timeout, timeout_min, timeout_max)
}
func (self ENetPacketPeer) GetRemoteAddress() string {
	return self.Runtime.ENetPacketPeer_get_remote_address(self)
}
func (self ENetPacketPeer) GetRemotePort() int64 {
	return self.Runtime.ENetPacketPeer_get_remote_port(self)
}
func (self ENetPacketPeer) GetStatistic(statistic ENetPacketPeerPeerStatistic) Float {
	return self.Runtime.ENetPacketPeer_get_statistic(self, statistic)
}
func (self ENetPacketPeer) GetState() ENetPacketPeerPeerState {
	return self.Runtime.ENetPacketPeer_get_state(self)
}
func (self ENetPacketPeer) GetChannels() int64 {
	return self.Runtime.ENetPacketPeer_get_channels(self)
}
func (self ENetPacketPeer) IsActive() bool {
	return self.Runtime.ENetPacketPeer_is_active(self)
}

type extendsEditorCommandPalette struct {
	_ [0]*extendsEditorCommandPalette
	class
}

func (self EditorCommandPalette) ConfirmationDialog() ConfirmationDialog {
	var parent ConfirmationDialog
	parent.class = self.class
	return parent
}
func (self EditorCommandPalette) AddCommand(command_name string, key_name string, binded_callable Callable, shortcut_text string) {
	self.Runtime.EditorCommandPalette_add_command(self, command_name, key_name, binded_callable, shortcut_text)
}
func (self EditorCommandPalette) RemoveCommand(key_name string) {
	self.Runtime.EditorCommandPalette_remove_command(self, key_name)
}

type extendsEditorDebuggerPlugin struct {
	_ [0]*extendsEditorDebuggerPlugin
	class
}

func (self EditorDebuggerPlugin) RefCounted() RefCounted {
	var parent RefCounted
	parent.class = self.class
	return parent
}
func (self EditorDebuggerPlugin) GetSession(id int64) EditorDebuggerSession {
	return self.Runtime.EditorDebuggerPlugin_get_session(self, id)
}
func (self EditorDebuggerPlugin) GetSessions() Array {
	return self.Runtime.EditorDebuggerPlugin_get_sessions(self)
}

type extendsEditorDebuggerSession struct {
	_ [0]*extendsEditorDebuggerSession
	class
}

func (self EditorDebuggerSession) RefCounted() RefCounted {
	var parent RefCounted
	parent.class = self.class
	return parent
}
func (self EditorDebuggerSession) SendMessage(message string, data Array) {
	self.Runtime.EditorDebuggerSession_send_message(self, message, data)
}
func (self EditorDebuggerSession) ToggleProfiler(profiler string, enable bool, data Array) {
	self.Runtime.EditorDebuggerSession_toggle_profiler(self, profiler, enable, data)
}
func (self EditorDebuggerSession) IsBreaked() bool {
	return self.Runtime.EditorDebuggerSession_is_breaked(self)
}
func (self EditorDebuggerSession) IsDebuggable() bool {
	return self.Runtime.EditorDebuggerSession_is_debuggable(self)
}
func (self EditorDebuggerSession) IsActive() bool {
	return self.Runtime.EditorDebuggerSession_is_active(self)
}
func (self EditorDebuggerSession) AddSessionTab(control Control) {
	self.Runtime.EditorDebuggerSession_add_session_tab(self, control)
}
func (self EditorDebuggerSession) RemoveSessionTab(control Control) {
	self.Runtime.EditorDebuggerSession_remove_session_tab(self, control)
}

type extendsEditorExportPlatform struct {
	_ [0]*extendsEditorExportPlatform
	class
}

func (self EditorExportPlatform) RefCounted() RefCounted {
	var parent RefCounted
	parent.class = self.class
	return parent
}
func (self EditorExportPlatform) GetOsName() string {
	return self.Runtime.EditorExportPlatform_get_os_name(self)
}

type extendsEditorExportPlatformAndroid struct {
	_ [0]*extendsEditorExportPlatformAndroid
	class
}

func (self EditorExportPlatformAndroid) EditorExportPlatform() EditorExportPlatform {
	var parent EditorExportPlatform
	parent.class = self.class
	return parent
}

type extendsEditorExportPlatformIOS struct {
	_ [0]*extendsEditorExportPlatformIOS
	class
}

func (self EditorExportPlatformIOS) EditorExportPlatform() EditorExportPlatform {
	var parent EditorExportPlatform
	parent.class = self.class
	return parent
}

type extendsEditorExportPlatformLinuxBSD struct {
	_ [0]*extendsEditorExportPlatformLinuxBSD
	class
}

func (self EditorExportPlatformLinuxBSD) EditorExportPlatformPC() EditorExportPlatformPC {
	var parent EditorExportPlatformPC
	parent.class = self.class
	return parent
}

type extendsEditorExportPlatformMacOS struct {
	_ [0]*extendsEditorExportPlatformMacOS
	class
}

func (self EditorExportPlatformMacOS) EditorExportPlatform() EditorExportPlatform {
	var parent EditorExportPlatform
	parent.class = self.class
	return parent
}

type extendsEditorExportPlatformPC struct {
	_ [0]*extendsEditorExportPlatformPC
	class
}

func (self EditorExportPlatformPC) EditorExportPlatform() EditorExportPlatform {
	var parent EditorExportPlatform
	parent.class = self.class
	return parent
}

type extendsEditorExportPlatformWeb struct {
	_ [0]*extendsEditorExportPlatformWeb
	class
}

func (self EditorExportPlatformWeb) EditorExportPlatform() EditorExportPlatform {
	var parent EditorExportPlatform
	parent.class = self.class
	return parent
}

type extendsEditorExportPlatformWindows struct {
	_ [0]*extendsEditorExportPlatformWindows
	class
}

func (self EditorExportPlatformWindows) EditorExportPlatformPC() EditorExportPlatformPC {
	var parent EditorExportPlatformPC
	parent.class = self.class
	return parent
}

type extendsEditorExportPlugin struct {
	_ [0]*extendsEditorExportPlugin
	class
}

func (self EditorExportPlugin) RefCounted() RefCounted {
	var parent RefCounted
	parent.class = self.class
	return parent
}
func (self EditorExportPlugin) AddSharedObject(path string, tags PackedStringArray, target string) {
	self.Runtime.EditorExportPlugin_add_shared_object(self, path, tags, target)
}
func (self EditorExportPlugin) AddIosProjectStaticLib(path string) {
	self.Runtime.EditorExportPlugin_add_ios_project_static_lib(self, path)
}
func (self EditorExportPlugin) AddFile(path string, file PackedByteArray, remap bool) {
	self.Runtime.EditorExportPlugin_add_file(self, path, file, remap)
}
func (self EditorExportPlugin) AddIosFramework(path string) {
	self.Runtime.EditorExportPlugin_add_ios_framework(self, path)
}
func (self EditorExportPlugin) AddIosEmbeddedFramework(path string) {
	self.Runtime.EditorExportPlugin_add_ios_embedded_framework(self, path)
}
func (self EditorExportPlugin) AddIosPlistContent(plist_content string) {
	self.Runtime.EditorExportPlugin_add_ios_plist_content(self, plist_content)
}
func (self EditorExportPlugin) AddIosLinkerFlags(flags string) {
	self.Runtime.EditorExportPlugin_add_ios_linker_flags(self, flags)
}
func (self EditorExportPlugin) AddIosBundleFile(path string) {
	self.Runtime.EditorExportPlugin_add_ios_bundle_file(self, path)
}
func (self EditorExportPlugin) AddIosCppCode(code string) {
	self.Runtime.EditorExportPlugin_add_ios_cpp_code(self, code)
}
func (self EditorExportPlugin) AddMacosPluginFile(path string) {
	self.Runtime.EditorExportPlugin_add_macos_plugin_file(self, path)
}
func (self EditorExportPlugin) Skip() {
	self.Runtime.EditorExportPlugin_skip(self)
}
func (self EditorExportPlugin) GetOption(name string) any {
	return self.Runtime.EditorExportPlugin_get_option(self, name)
}

type extendsEditorFeatureProfile struct {
	_ [0]*extendsEditorFeatureProfile
	class
}

func (self EditorFeatureProfile) RefCounted() RefCounted {
	var parent RefCounted
	parent.class = self.class
	return parent
}
func (self EditorFeatureProfile) SetDisableClass(class_name string, disable bool) {
	self.Runtime.EditorFeatureProfile_set_disable_class(self, class_name, disable)
}
func (self EditorFeatureProfile) IsClassDisabled(class_name string) bool {
	return self.Runtime.EditorFeatureProfile_is_class_disabled(self, class_name)
}
func (self EditorFeatureProfile) SetDisableClassEditor(class_name string, disable bool) {
	self.Runtime.EditorFeatureProfile_set_disable_class_editor(self, class_name, disable)
}
func (self EditorFeatureProfile) IsClassEditorDisabled(class_name string) bool {
	return self.Runtime.EditorFeatureProfile_is_class_editor_disabled(self, class_name)
}
func (self EditorFeatureProfile) SetDisableClassProperty(class_name string, property string, disable bool) {
	self.Runtime.EditorFeatureProfile_set_disable_class_property(self, class_name, property, disable)
}
func (self EditorFeatureProfile) IsClassPropertyDisabled(class_name string, property string) bool {
	return self.Runtime.EditorFeatureProfile_is_class_property_disabled(self, class_name, property)
}
func (self EditorFeatureProfile) SetDisableFeature(feature EditorFeatureProfileFeature, disable bool) {
	self.Runtime.EditorFeatureProfile_set_disable_feature(self, feature, disable)
}
func (self EditorFeatureProfile) IsFeatureDisabled(feature EditorFeatureProfileFeature) bool {
	return self.Runtime.EditorFeatureProfile_is_feature_disabled(self, feature)
}
func (self EditorFeatureProfile) GetFeatureName(feature EditorFeatureProfileFeature) string {
	return self.Runtime.EditorFeatureProfile_get_feature_name(self, feature)
}
func (self EditorFeatureProfile) SaveToFile(path string) int64 {
	return self.Runtime.EditorFeatureProfile_save_to_file(self, path)
}
func (self EditorFeatureProfile) LoadFromFile(path string) int64 {
	return self.Runtime.EditorFeatureProfile_load_from_file(self, path)
}

type extendsEditorFileDialog struct {
	_ [0]*extendsEditorFileDialog
	class
}

func (self EditorFileDialog) ConfirmationDialog() ConfirmationDialog {
	var parent ConfirmationDialog
	parent.class = self.class
	return parent
}
func (self EditorFileDialog) ClearFilters() {
	self.Runtime.EditorFileDialog_clear_filters(self)
}
func (self EditorFileDialog) AddFilter(filter string, description string) {
	self.Runtime.EditorFileDialog_add_filter(self, filter, description)
}
func (self EditorFileDialog) SetFilters(filters PackedStringArray) {
	self.Runtime.EditorFileDialog_set_filters(self, filters)
}
func (self EditorFileDialog) GetFilters() PackedStringArray {
	return self.Runtime.EditorFileDialog_get_filters(self)
}
func (self EditorFileDialog) GetCurrentDir() string {
	return self.Runtime.EditorFileDialog_get_current_dir(self)
}
func (self EditorFileDialog) GetCurrentFile() string {
	return self.Runtime.EditorFileDialog_get_current_file(self)
}
func (self EditorFileDialog) GetCurrentPath() string {
	return self.Runtime.EditorFileDialog_get_current_path(self)
}
func (self EditorFileDialog) SetCurrentDir(dir string) {
	self.Runtime.EditorFileDialog_set_current_dir(self, dir)
}
func (self EditorFileDialog) SetCurrentFile(file string) {
	self.Runtime.EditorFileDialog_set_current_file(self, file)
}
func (self EditorFileDialog) SetCurrentPath(path string) {
	self.Runtime.EditorFileDialog_set_current_path(self, path)
}
func (self EditorFileDialog) SetFileMode(mode EditorFileDialogFileMode) {
	self.Runtime.EditorFileDialog_set_file_mode(self, mode)
}
func (self EditorFileDialog) GetFileMode() EditorFileDialogFileMode {
	return self.Runtime.EditorFileDialog_get_file_mode(self)
}
func (self EditorFileDialog) GetVbox() VBoxContainer {
	return self.Runtime.EditorFileDialog_get_vbox(self)
}
func (self EditorFileDialog) GetLineEdit() LineEdit {
	return self.Runtime.EditorFileDialog_get_line_edit(self)
}
func (self EditorFileDialog) SetAccess(access EditorFileDialogAccess) {
	self.Runtime.EditorFileDialog_set_access(self, access)
}
func (self EditorFileDialog) GetAccess() EditorFileDialogAccess {
	return self.Runtime.EditorFileDialog_get_access(self)
}
func (self EditorFileDialog) SetShowHiddenFiles(show bool) {
	self.Runtime.EditorFileDialog_set_show_hidden_files(self, show)
}
func (self EditorFileDialog) IsShowingHiddenFiles() bool {
	return self.Runtime.EditorFileDialog_is_showing_hidden_files(self)
}
func (self EditorFileDialog) SetDisplayMode(mode EditorFileDialogDisplayMode) {
	self.Runtime.EditorFileDialog_set_display_mode(self, mode)
}
func (self EditorFileDialog) GetDisplayMode() EditorFileDialogDisplayMode {
	return self.Runtime.EditorFileDialog_get_display_mode(self)
}
func (self EditorFileDialog) SetDisableOverwriteWarning(disable bool) {
	self.Runtime.EditorFileDialog_set_disable_overwrite_warning(self, disable)
}
func (self EditorFileDialog) IsOverwriteWarningDisabled() bool {
	return self.Runtime.EditorFileDialog_is_overwrite_warning_disabled(self)
}
func (self EditorFileDialog) AddSideMenu(menu Control, title string) {
	self.Runtime.EditorFileDialog_add_side_menu(self, menu, title)
}
func (self EditorFileDialog) Invalidate() {
	self.Runtime.EditorFileDialog_invalidate(self)
}

type extendsEditorFileSystem struct {
	_ [0]*extendsEditorFileSystem
	class
}

func (self EditorFileSystem) Node() Node { var parent Node; parent.class = self.class; return parent }
func (self EditorFileSystem) GetFilesystem() EditorFileSystemDirectory {
	return self.Runtime.EditorFileSystem_get_filesystem(self)
}
func (self EditorFileSystem) IsScanning() bool {
	return self.Runtime.EditorFileSystem_is_scanning(self)
}
func (self EditorFileSystem) GetScanningProgress() Float {
	return self.Runtime.EditorFileSystem_get_scanning_progress(self)
}
func (self EditorFileSystem) Scan() {
	self.Runtime.EditorFileSystem_scan(self)
}
func (self EditorFileSystem) ScanSources() {
	self.Runtime.EditorFileSystem_scan_sources(self)
}
func (self EditorFileSystem) UpdateFile(path string) {
	self.Runtime.EditorFileSystem_update_file(self, path)
}
func (self EditorFileSystem) GetFilesystemPath(path string) EditorFileSystemDirectory {
	return self.Runtime.EditorFileSystem_get_filesystem_path(self, path)
}
func (self EditorFileSystem) GetFileType(path string) string {
	return self.Runtime.EditorFileSystem_get_file_type(self, path)
}
func (self EditorFileSystem) ReimportFiles(files PackedStringArray) {
	self.Runtime.EditorFileSystem_reimport_files(self, files)
}

type extendsEditorFileSystemDirectory struct {
	_ [0]*extendsEditorFileSystemDirectory
	class
}

func (self EditorFileSystemDirectory) Object() Object {
	var parent Object
	parent.class = self.class
	return parent
}
func (self EditorFileSystemDirectory) GetSubdirCount() int64 {
	return self.Runtime.EditorFileSystemDirectory_get_subdir_count(self)
}
func (self EditorFileSystemDirectory) GetSubdir(idx int64) EditorFileSystemDirectory {
	return self.Runtime.EditorFileSystemDirectory_get_subdir(self, idx)
}
func (self EditorFileSystemDirectory) GetFileCount() int64 {
	return self.Runtime.EditorFileSystemDirectory_get_file_count(self)
}
func (self EditorFileSystemDirectory) GetFile(idx int64) string {
	return self.Runtime.EditorFileSystemDirectory_get_file(self, idx)
}
func (self EditorFileSystemDirectory) GetFilePath(idx int64) string {
	return self.Runtime.EditorFileSystemDirectory_get_file_path(self, idx)
}
func (self EditorFileSystemDirectory) GetFileType(idx int64) string {
	return self.Runtime.EditorFileSystemDirectory_get_file_type(self, idx)
}
func (self EditorFileSystemDirectory) GetFileScriptClassName(idx int64) string {
	return self.Runtime.EditorFileSystemDirectory_get_file_script_class_name(self, idx)
}
func (self EditorFileSystemDirectory) GetFileScriptClassExtends(idx int64) string {
	return self.Runtime.EditorFileSystemDirectory_get_file_script_class_extends(self, idx)
}
func (self EditorFileSystemDirectory) GetFileImportIsValid(idx int64) bool {
	return self.Runtime.EditorFileSystemDirectory_get_file_import_is_valid(self, idx)
}
func (self EditorFileSystemDirectory) GetName() string {
	return self.Runtime.EditorFileSystemDirectory_get_name(self)
}
func (self EditorFileSystemDirectory) GetPath() string {
	return self.Runtime.EditorFileSystemDirectory_get_path(self)
}
func (self EditorFileSystemDirectory) GetParent() EditorFileSystemDirectory {
	return self.Runtime.EditorFileSystemDirectory_get_parent(self)
}
func (self EditorFileSystemDirectory) FindFileIndex(name string) int64 {
	return self.Runtime.EditorFileSystemDirectory_find_file_index(self, name)
}
func (self EditorFileSystemDirectory) FindDirIndex(name string) int64 {
	return self.Runtime.EditorFileSystemDirectory_find_dir_index(self, name)
}

type extendsEditorFileSystemImportFormatSupportQuery struct {
	_ [0]*extendsEditorFileSystemImportFormatSupportQuery
	class
}

func (self EditorFileSystemImportFormatSupportQuery) RefCounted() RefCounted {
	var parent RefCounted
	parent.class = self.class
	return parent
}

type extendsEditorImportPlugin struct {
	_ [0]*extendsEditorImportPlugin
	class
}

func (self EditorImportPlugin) ResourceImporter() ResourceImporter {
	var parent ResourceImporter
	parent.class = self.class
	return parent
}
func (self EditorImportPlugin) AppendImportExternalResource(path string, custom_options Dictionary, custom_importer string, generator_parameters any) int64 {
	return self.Runtime.EditorImportPlugin_append_import_external_resource(self, path, custom_options, custom_importer, generator_parameters)
}

type extendsEditorInspector struct {
	_ [0]*extendsEditorInspector
	class
}

func (self EditorInspector) ScrollContainer() ScrollContainer {
	var parent ScrollContainer
	parent.class = self.class
	return parent
}
func (self EditorInspector) GetSelectedPath() string {
	return self.Runtime.EditorInspector_get_selected_path(self)
}
func (self EditorInspector) GetEditedObject() Object {
	return self.Runtime.EditorInspector_get_edited_object(self)
}

type extendsEditorInspectorPlugin struct {
	_ [0]*extendsEditorInspectorPlugin
	class
}

func (self EditorInspectorPlugin) RefCounted() RefCounted {
	var parent RefCounted
	parent.class = self.class
	return parent
}
func (self EditorInspectorPlugin) AddCustomControl(control Control) {
	self.Runtime.EditorInspectorPlugin_add_custom_control(self, control)
}
func (self EditorInspectorPlugin) AddPropertyEditor(property string, editor Control, add_to_end bool) {
	self.Runtime.EditorInspectorPlugin_add_property_editor(self, property, editor, add_to_end)
}
func (self EditorInspectorPlugin) AddPropertyEditorForMultipleProperties(label string, properties PackedStringArray, editor Control) {
	self.Runtime.EditorInspectorPlugin_add_property_editor_for_multiple_properties(self, label, properties, editor)
}

type extendsEditorInterface struct {
	_ [0]*extendsEditorInterface
	class
}

func (self EditorInterface) Object() Object {
	var parent Object
	parent.class = self.class
	return parent
}
func (self EditorInterface) RestartEditor(save bool) {
	self.Runtime.EditorInterface_restart_editor(self, save)
}
func (self EditorInterface) GetCommandPalette() EditorCommandPalette {
	return self.Runtime.EditorInterface_get_command_palette(self)
}
func (self EditorInterface) GetResourceFilesystem() EditorFileSystem {
	return self.Runtime.EditorInterface_get_resource_filesystem(self)
}
func (self EditorInterface) GetEditorPaths() EditorPaths {
	return self.Runtime.EditorInterface_get_editor_paths(self)
}
func (self EditorInterface) GetResourcePreviewer() EditorResourcePreview {
	return self.Runtime.EditorInterface_get_resource_previewer(self)
}
func (self EditorInterface) GetSelection() EditorSelection {
	return self.Runtime.EditorInterface_get_selection(self)
}
func (self EditorInterface) GetEditorSettings() EditorSettings {
	return self.Runtime.EditorInterface_get_editor_settings(self)
}
func (self EditorInterface) MakeMeshPreviews(meshes ArrayOf[Mesh], preview_size int64) ArrayOf[Texture2D] {
	return self.Runtime.EditorInterface_make_mesh_previews(self, meshes, preview_size)
}
func (self EditorInterface) SetPluginEnabled(plugin string, enabled bool) {
	self.Runtime.EditorInterface_set_plugin_enabled(self, plugin, enabled)
}
func (self EditorInterface) IsPluginEnabled(plugin string) bool {
	return self.Runtime.EditorInterface_is_plugin_enabled(self, plugin)
}
func (self EditorInterface) GetEditorTheme() Theme {
	return self.Runtime.EditorInterface_get_editor_theme(self)
}
func (self EditorInterface) GetBaseControl() Control {
	return self.Runtime.EditorInterface_get_base_control(self)
}
func (self EditorInterface) GetEditorMainScreen() VBoxContainer {
	return self.Runtime.EditorInterface_get_editor_main_screen(self)
}
func (self EditorInterface) GetScriptEditor() ScriptEditor {
	return self.Runtime.EditorInterface_get_script_editor(self)
}
func (self EditorInterface) GetEditorViewport2d() SubViewport {
	return self.Runtime.EditorInterface_get_editor_viewport_2d(self)
}
func (self EditorInterface) GetEditorViewport3d(idx int64) SubViewport {
	return self.Runtime.EditorInterface_get_editor_viewport_3d(self, idx)
}
func (self EditorInterface) SetMainScreenEditor(name string) {
	self.Runtime.EditorInterface_set_main_screen_editor(self, name)
}
func (self EditorInterface) SetDistractionFreeMode(enter bool) {
	self.Runtime.EditorInterface_set_distraction_free_mode(self, enter)
}
func (self EditorInterface) IsDistractionFreeModeEnabled() bool {
	return self.Runtime.EditorInterface_is_distraction_free_mode_enabled(self)
}
func (self EditorInterface) GetEditorScale() Float {
	return self.Runtime.EditorInterface_get_editor_scale(self)
}
func (self EditorInterface) PopupDialog(dialog Window, rect Rect2i) {
	self.Runtime.EditorInterface_popup_dialog(self, dialog, rect)
}
func (self EditorInterface) PopupDialogCentered(dialog Window, minsize Vector2i) {
	self.Runtime.EditorInterface_popup_dialog_centered(self, dialog, minsize)
}
func (self EditorInterface) PopupDialogCenteredRatio(dialog Window, ratio Float) {
	self.Runtime.EditorInterface_popup_dialog_centered_ratio(self, dialog, ratio)
}
func (self EditorInterface) PopupDialogCenteredClamped(dialog Window, minsize Vector2i, fallback_ratio Float) {
	self.Runtime.EditorInterface_popup_dialog_centered_clamped(self, dialog, minsize, fallback_ratio)
}
func (self EditorInterface) GetCurrentFeatureProfile() string {
	return self.Runtime.EditorInterface_get_current_feature_profile(self)
}
func (self EditorInterface) SetCurrentFeatureProfile(profile_name string) {
	self.Runtime.EditorInterface_set_current_feature_profile(self, profile_name)
}
func (self EditorInterface) GetFileSystemDock() FileSystemDock {
	return self.Runtime.EditorInterface_get_file_system_dock(self)
}
func (self EditorInterface) SelectFile(file string) {
	self.Runtime.EditorInterface_select_file(self, file)
}
func (self EditorInterface) GetSelectedPaths() PackedStringArray {
	return self.Runtime.EditorInterface_get_selected_paths(self)
}
func (self EditorInterface) GetCurrentPath() string {
	return self.Runtime.EditorInterface_get_current_path(self)
}
func (self EditorInterface) GetCurrentDirectory() string {
	return self.Runtime.EditorInterface_get_current_directory(self)
}
func (self EditorInterface) GetInspector() EditorInspector {
	return self.Runtime.EditorInterface_get_inspector(self)
}
func (self EditorInterface) InspectObject(object Object, for_property string, inspector_only bool) {
	self.Runtime.EditorInterface_inspect_object(self, object, for_property, inspector_only)
}
func (self EditorInterface) EditResource(resource Resource) {
	self.Runtime.EditorInterface_edit_resource(self, resource)
}
func (self EditorInterface) EditNode(node Node) {
	self.Runtime.EditorInterface_edit_node(self, node)
}
func (self EditorInterface) EditScript(script Script, line int64, column int64, grab_focus bool) {
	self.Runtime.EditorInterface_edit_script(self, script, line, column, grab_focus)
}
func (self EditorInterface) OpenSceneFromPath(scene_filepath string) {
	self.Runtime.EditorInterface_open_scene_from_path(self, scene_filepath)
}
func (self EditorInterface) ReloadSceneFromPath(scene_filepath string) {
	self.Runtime.EditorInterface_reload_scene_from_path(self, scene_filepath)
}
func (self EditorInterface) GetOpenScenes() PackedStringArray {
	return self.Runtime.EditorInterface_get_open_scenes(self)
}
func (self EditorInterface) GetEditedSceneRoot() Node {
	return self.Runtime.EditorInterface_get_edited_scene_root(self)
}
func (self EditorInterface) SaveScene() int64 {
	return self.Runtime.EditorInterface_save_scene(self)
}
func (self EditorInterface) SaveSceneAs(path string, with_preview bool) {
	self.Runtime.EditorInterface_save_scene_as(self, path, with_preview)
}
func (self EditorInterface) SaveAllScenes() {
	self.Runtime.EditorInterface_save_all_scenes(self)
}
func (self EditorInterface) MarkSceneAsUnsaved() {
	self.Runtime.EditorInterface_mark_scene_as_unsaved(self)
}
func (self EditorInterface) PlayMainScene() {
	self.Runtime.EditorInterface_play_main_scene(self)
}
func (self EditorInterface) PlayCurrentScene() {
	self.Runtime.EditorInterface_play_current_scene(self)
}
func (self EditorInterface) PlayCustomScene(scene_filepath string) {
	self.Runtime.EditorInterface_play_custom_scene(self, scene_filepath)
}
func (self EditorInterface) StopPlayingScene() {
	self.Runtime.EditorInterface_stop_playing_scene(self)
}
func (self EditorInterface) IsPlayingScene() bool {
	return self.Runtime.EditorInterface_is_playing_scene(self)
}
func (self EditorInterface) GetPlayingScene() string {
	return self.Runtime.EditorInterface_get_playing_scene(self)
}
func (self EditorInterface) SetMovieMakerEnabled(enabled bool) {
	self.Runtime.EditorInterface_set_movie_maker_enabled(self, enabled)
}
func (self EditorInterface) IsMovieMakerEnabled() bool {
	return self.Runtime.EditorInterface_is_movie_maker_enabled(self)
}

type extendsEditorNode3DGizmo struct {
	_ [0]*extendsEditorNode3DGizmo
	class
}

func (self EditorNode3DGizmo) Node3DGizmo() Node3DGizmo {
	var parent Node3DGizmo
	parent.class = self.class
	return parent
}
func (self EditorNode3DGizmo) AddLines(lines PackedVector3Array, material Material, billboard bool, modulate Color) {
	self.Runtime.EditorNode3DGizmo_add_lines(self, lines, material, billboard, modulate)
}
func (self EditorNode3DGizmo) AddMesh(mesh Mesh, material Material, transform Transform3D, skeleton SkinReference) {
	self.Runtime.EditorNode3DGizmo_add_mesh(self, mesh, material, transform, skeleton)
}
func (self EditorNode3DGizmo) AddCollisionSegments(segments PackedVector3Array) {
	self.Runtime.EditorNode3DGizmo_add_collision_segments(self, segments)
}
func (self EditorNode3DGizmo) AddCollisionTriangles(triangles TriangleMesh) {
	self.Runtime.EditorNode3DGizmo_add_collision_triangles(self, triangles)
}
func (self EditorNode3DGizmo) AddUnscaledBillboard(material Material, default_scale Float, modulate Color) {
	self.Runtime.EditorNode3DGizmo_add_unscaled_billboard(self, material, default_scale, modulate)
}
func (self EditorNode3DGizmo) AddHandles(handles PackedVector3Array, material Material, ids PackedInt32Array, billboard bool, secondary bool) {
	self.Runtime.EditorNode3DGizmo_add_handles(self, handles, material, ids, billboard, secondary)
}
func (self EditorNode3DGizmo) SetNode3d(node Node) {
	self.Runtime.EditorNode3DGizmo_set_node_3d(self, node)
}
func (self EditorNode3DGizmo) GetNode3d() Node3D {
	return self.Runtime.EditorNode3DGizmo_get_node_3d(self)
}
func (self EditorNode3DGizmo) GetPlugin() EditorNode3DGizmoPlugin {
	return self.Runtime.EditorNode3DGizmo_get_plugin(self)
}
func (self EditorNode3DGizmo) Clear() {
	self.Runtime.EditorNode3DGizmo_clear(self)
}
func (self EditorNode3DGizmo) SetHidden(hidden bool) {
	self.Runtime.EditorNode3DGizmo_set_hidden(self, hidden)
}
func (self EditorNode3DGizmo) IsSubgizmoSelected(id int64) bool {
	return self.Runtime.EditorNode3DGizmo_is_subgizmo_selected(self, id)
}
func (self EditorNode3DGizmo) GetSubgizmoSelection() PackedInt32Array {
	return self.Runtime.EditorNode3DGizmo_get_subgizmo_selection(self)
}

type extendsEditorNode3DGizmoPlugin struct {
	_ [0]*extendsEditorNode3DGizmoPlugin
	class
}

func (self EditorNode3DGizmoPlugin) Resource() Resource {
	var parent Resource
	parent.class = self.class
	return parent
}
func (self EditorNode3DGizmoPlugin) CreateMaterial(name string, color Color, billboard bool, on_top bool, use_vertex_color bool) {
	self.Runtime.EditorNode3DGizmoPlugin_create_material(self, name, color, billboard, on_top, use_vertex_color)
}
func (self EditorNode3DGizmoPlugin) CreateIconMaterial(name string, texture Texture2D, on_top bool, color Color) {
	self.Runtime.EditorNode3DGizmoPlugin_create_icon_material(self, name, texture, on_top, color)
}
func (self EditorNode3DGizmoPlugin) CreateHandleMaterial(name string, billboard bool, texture Texture2D) {
	self.Runtime.EditorNode3DGizmoPlugin_create_handle_material(self, name, billboard, texture)
}
func (self EditorNode3DGizmoPlugin) AddMaterial(name string, material StandardMaterial3D) {
	self.Runtime.EditorNode3DGizmoPlugin_add_material(self, name, material)
}
func (self EditorNode3DGizmoPlugin) GetMaterial(name string, gizmo EditorNode3DGizmo) StandardMaterial3D {
	return self.Runtime.EditorNode3DGizmoPlugin_get_material(self, name, gizmo)
}

type extendsEditorPaths struct {
	_ [0]*extendsEditorPaths
	class
}

func (self EditorPaths) Object() Object { var parent Object; parent.class = self.class; return parent }
func (self EditorPaths) GetDataDir() string {
	return self.Runtime.EditorPaths_get_data_dir(self)
}
func (self EditorPaths) GetConfigDir() string {
	return self.Runtime.EditorPaths_get_config_dir(self)
}
func (self EditorPaths) GetCacheDir() string {
	return self.Runtime.EditorPaths_get_cache_dir(self)
}
func (self EditorPaths) IsSelfContained() bool {
	return self.Runtime.EditorPaths_is_self_contained(self)
}
func (self EditorPaths) GetSelfContainedFile() string {
	return self.Runtime.EditorPaths_get_self_contained_file(self)
}
func (self EditorPaths) GetProjectSettingsDir() string {
	return self.Runtime.EditorPaths_get_project_settings_dir(self)
}

type extendsEditorPlugin struct {
	_ [0]*extendsEditorPlugin
	class
}

func (self EditorPlugin) Node() Node { var parent Node; parent.class = self.class; return parent }
func (self EditorPlugin) AddControlToContainer(container EditorPluginCustomControlContainer, control Control) {
	self.Runtime.EditorPlugin_add_control_to_container(self, container, control)
}
func (self EditorPlugin) AddControlToBottomPanel(control Control, title string) Button {
	return self.Runtime.EditorPlugin_add_control_to_bottom_panel(self, control, title)
}
func (self EditorPlugin) AddControlToDock(slot EditorPluginDockSlot, control Control) {
	self.Runtime.EditorPlugin_add_control_to_dock(self, slot, control)
}
func (self EditorPlugin) RemoveControlFromDocks(control Control) {
	self.Runtime.EditorPlugin_remove_control_from_docks(self, control)
}
func (self EditorPlugin) RemoveControlFromBottomPanel(control Control) {
	self.Runtime.EditorPlugin_remove_control_from_bottom_panel(self, control)
}
func (self EditorPlugin) RemoveControlFromContainer(container EditorPluginCustomControlContainer, control Control) {
	self.Runtime.EditorPlugin_remove_control_from_container(self, container, control)
}
func (self EditorPlugin) AddToolMenuItem(name string, callable Callable) {
	self.Runtime.EditorPlugin_add_tool_menu_item(self, name, callable)
}
func (self EditorPlugin) AddToolSubmenuItem(name string, submenu PopupMenu) {
	self.Runtime.EditorPlugin_add_tool_submenu_item(self, name, submenu)
}
func (self EditorPlugin) RemoveToolMenuItem(name string) {
	self.Runtime.EditorPlugin_remove_tool_menu_item(self, name)
}
func (self EditorPlugin) GetExportAsMenu() PopupMenu {
	return self.Runtime.EditorPlugin_get_export_as_menu(self)
}
func (self EditorPlugin) AddCustomType(atype string, base string, script Script, icon Texture2D) {
	self.Runtime.EditorPlugin_add_custom_type(self, atype, base, script, icon)
}
func (self EditorPlugin) RemoveCustomType(atype string) {
	self.Runtime.EditorPlugin_remove_custom_type(self, atype)
}
func (self EditorPlugin) AddAutoloadSingleton(name string, path string) {
	self.Runtime.EditorPlugin_add_autoload_singleton(self, name, path)
}
func (self EditorPlugin) RemoveAutoloadSingleton(name string) {
	self.Runtime.EditorPlugin_remove_autoload_singleton(self, name)
}
func (self EditorPlugin) UpdateOverlays() int64 {
	return self.Runtime.EditorPlugin_update_overlays(self)
}
func (self EditorPlugin) MakeBottomPanelItemVisible(item Control) {
	self.Runtime.EditorPlugin_make_bottom_panel_item_visible(self, item)
}
func (self EditorPlugin) HideBottomPanel() {
	self.Runtime.EditorPlugin_hide_bottom_panel(self)
}
func (self EditorPlugin) GetUndoRedo() EditorUndoRedoManager {
	return self.Runtime.EditorPlugin_get_undo_redo(self)
}
func (self EditorPlugin) AddUndoRedoInspectorHookCallback(callable Callable) {
	self.Runtime.EditorPlugin_add_undo_redo_inspector_hook_callback(self, callable)
}
func (self EditorPlugin) RemoveUndoRedoInspectorHookCallback(callable Callable) {
	self.Runtime.EditorPlugin_remove_undo_redo_inspector_hook_callback(self, callable)
}
func (self EditorPlugin) QueueSaveLayout() {
	self.Runtime.EditorPlugin_queue_save_layout(self)
}
func (self EditorPlugin) AddTranslationParserPlugin(parser EditorTranslationParserPlugin) {
	self.Runtime.EditorPlugin_add_translation_parser_plugin(self, parser)
}
func (self EditorPlugin) RemoveTranslationParserPlugin(parser EditorTranslationParserPlugin) {
	self.Runtime.EditorPlugin_remove_translation_parser_plugin(self, parser)
}
func (self EditorPlugin) AddImportPlugin(importer EditorImportPlugin, first_priority bool) {
	self.Runtime.EditorPlugin_add_import_plugin(self, importer, first_priority)
}
func (self EditorPlugin) RemoveImportPlugin(importer EditorImportPlugin) {
	self.Runtime.EditorPlugin_remove_import_plugin(self, importer)
}
func (self EditorPlugin) AddSceneFormatImporterPlugin(scene_format_importer EditorSceneFormatImporter, first_priority bool) {
	self.Runtime.EditorPlugin_add_scene_format_importer_plugin(self, scene_format_importer, first_priority)
}
func (self EditorPlugin) RemoveSceneFormatImporterPlugin(scene_format_importer EditorSceneFormatImporter) {
	self.Runtime.EditorPlugin_remove_scene_format_importer_plugin(self, scene_format_importer)
}
func (self EditorPlugin) AddScenePostImportPlugin(scene_import_plugin EditorScenePostImportPlugin, first_priority bool) {
	self.Runtime.EditorPlugin_add_scene_post_import_plugin(self, scene_import_plugin, first_priority)
}
func (self EditorPlugin) RemoveScenePostImportPlugin(scene_import_plugin EditorScenePostImportPlugin) {
	self.Runtime.EditorPlugin_remove_scene_post_import_plugin(self, scene_import_plugin)
}
func (self EditorPlugin) AddExportPlugin(plugin EditorExportPlugin) {
	self.Runtime.EditorPlugin_add_export_plugin(self, plugin)
}
func (self EditorPlugin) RemoveExportPlugin(plugin EditorExportPlugin) {
	self.Runtime.EditorPlugin_remove_export_plugin(self, plugin)
}
func (self EditorPlugin) AddNode3dGizmoPlugin(plugin EditorNode3DGizmoPlugin) {
	self.Runtime.EditorPlugin_add_node_3d_gizmo_plugin(self, plugin)
}
func (self EditorPlugin) RemoveNode3dGizmoPlugin(plugin EditorNode3DGizmoPlugin) {
	self.Runtime.EditorPlugin_remove_node_3d_gizmo_plugin(self, plugin)
}
func (self EditorPlugin) AddInspectorPlugin(plugin EditorInspectorPlugin) {
	self.Runtime.EditorPlugin_add_inspector_plugin(self, plugin)
}
func (self EditorPlugin) RemoveInspectorPlugin(plugin EditorInspectorPlugin) {
	self.Runtime.EditorPlugin_remove_inspector_plugin(self, plugin)
}
func (self EditorPlugin) AddResourceConversionPlugin(plugin EditorResourceConversionPlugin) {
	self.Runtime.EditorPlugin_add_resource_conversion_plugin(self, plugin)
}
func (self EditorPlugin) RemoveResourceConversionPlugin(plugin EditorResourceConversionPlugin) {
	self.Runtime.EditorPlugin_remove_resource_conversion_plugin(self, plugin)
}
func (self EditorPlugin) SetInputEventForwardingAlwaysEnabled() {
	self.Runtime.EditorPlugin_set_input_event_forwarding_always_enabled(self)
}
func (self EditorPlugin) SetForceDrawOverForwardingEnabled() {
	self.Runtime.EditorPlugin_set_force_draw_over_forwarding_enabled(self)
}
func (self EditorPlugin) GetEditorInterface() EditorInterface {
	return self.Runtime.EditorPlugin_get_editor_interface(self)
}
func (self EditorPlugin) GetScriptCreateDialog() ScriptCreateDialog {
	return self.Runtime.EditorPlugin_get_script_create_dialog(self)
}
func (self EditorPlugin) AddDebuggerPlugin(script EditorDebuggerPlugin) {
	self.Runtime.EditorPlugin_add_debugger_plugin(self, script)
}
func (self EditorPlugin) RemoveDebuggerPlugin(script EditorDebuggerPlugin) {
	self.Runtime.EditorPlugin_remove_debugger_plugin(self, script)
}
func (self EditorPlugin) GetPluginVersion() string {
	return self.Runtime.EditorPlugin_get_plugin_version(self)
}

type extendsEditorProperty struct {
	_ [0]*extendsEditorProperty
	class
}

func (self EditorProperty) Container() Container {
	var parent Container
	parent.class = self.class
	return parent
}
func (self EditorProperty) SetLabel(text string) {
	self.Runtime.EditorProperty_set_label(self, text)
}
func (self EditorProperty) GetLabel() string {
	return self.Runtime.EditorProperty_get_label(self)
}
func (self EditorProperty) SetReadOnly(read_only bool) {
	self.Runtime.EditorProperty_set_read_only(self, read_only)
}
func (self EditorProperty) IsReadOnly() bool {
	return self.Runtime.EditorProperty_is_read_only(self)
}
func (self EditorProperty) SetCheckable(checkable bool) {
	self.Runtime.EditorProperty_set_checkable(self, checkable)
}
func (self EditorProperty) IsCheckable() bool {
	return self.Runtime.EditorProperty_is_checkable(self)
}
func (self EditorProperty) SetChecked(checked bool) {
	self.Runtime.EditorProperty_set_checked(self, checked)
}
func (self EditorProperty) IsChecked() bool {
	return self.Runtime.EditorProperty_is_checked(self)
}
func (self EditorProperty) SetDrawWarning(draw_warning bool) {
	self.Runtime.EditorProperty_set_draw_warning(self, draw_warning)
}
func (self EditorProperty) IsDrawWarning() bool {
	return self.Runtime.EditorProperty_is_draw_warning(self)
}
func (self EditorProperty) SetKeying(keying bool) {
	self.Runtime.EditorProperty_set_keying(self, keying)
}
func (self EditorProperty) IsKeying() bool {
	return self.Runtime.EditorProperty_is_keying(self)
}
func (self EditorProperty) SetDeletable(deletable bool) {
	self.Runtime.EditorProperty_set_deletable(self, deletable)
}
func (self EditorProperty) IsDeletable() bool {
	return self.Runtime.EditorProperty_is_deletable(self)
}
func (self EditorProperty) GetEditedProperty() string {
	return self.Runtime.EditorProperty_get_edited_property(self)
}
func (self EditorProperty) GetEditedObject() Object {
	return self.Runtime.EditorProperty_get_edited_object(self)
}
func (self EditorProperty) UpdateProperty() {
	self.Runtime.EditorProperty_update_property(self)
}
func (self EditorProperty) AddFocusable(control Control) {
	self.Runtime.EditorProperty_add_focusable(self, control)
}
func (self EditorProperty) SetBottomEditor(editor Control) {
	self.Runtime.EditorProperty_set_bottom_editor(self, editor)
}
func (self EditorProperty) EmitChanged(property string, value any, field string, changing bool) {
	self.Runtime.EditorProperty_emit_changed(self, property, value, field, changing)
}

type extendsEditorResourceConversionPlugin struct {
	_ [0]*extendsEditorResourceConversionPlugin
	class
}

func (self EditorResourceConversionPlugin) RefCounted() RefCounted {
	var parent RefCounted
	parent.class = self.class
	return parent
}

type extendsEditorResourcePicker struct {
	_ [0]*extendsEditorResourcePicker
	class
}

func (self EditorResourcePicker) HBoxContainer() HBoxContainer {
	var parent HBoxContainer
	parent.class = self.class
	return parent
}
func (self EditorResourcePicker) SetBaseType(base_type string) {
	self.Runtime.EditorResourcePicker_set_base_type(self, base_type)
}
func (self EditorResourcePicker) GetBaseType() string {
	return self.Runtime.EditorResourcePicker_get_base_type(self)
}
func (self EditorResourcePicker) GetAllowedTypes() PackedStringArray {
	return self.Runtime.EditorResourcePicker_get_allowed_types(self)
}
func (self EditorResourcePicker) SetEditedResource(resource Resource) {
	self.Runtime.EditorResourcePicker_set_edited_resource(self, resource)
}
func (self EditorResourcePicker) GetEditedResource() Resource {
	return self.Runtime.EditorResourcePicker_get_edited_resource(self)
}
func (self EditorResourcePicker) SetToggleMode(enable bool) {
	self.Runtime.EditorResourcePicker_set_toggle_mode(self, enable)
}
func (self EditorResourcePicker) IsToggleMode() bool {
	return self.Runtime.EditorResourcePicker_is_toggle_mode(self)
}
func (self EditorResourcePicker) SetTogglePressed(pressed bool) {
	self.Runtime.EditorResourcePicker_set_toggle_pressed(self, pressed)
}
func (self EditorResourcePicker) SetEditable(enable bool) {
	self.Runtime.EditorResourcePicker_set_editable(self, enable)
}
func (self EditorResourcePicker) IsEditable() bool {
	return self.Runtime.EditorResourcePicker_is_editable(self)
}

type extendsEditorResourcePreview struct {
	_ [0]*extendsEditorResourcePreview
	class
}

func (self EditorResourcePreview) Node() Node {
	var parent Node
	parent.class = self.class
	return parent
}
func (self EditorResourcePreview) QueueResourcePreview(path string, receiver Object, receiver_func string, userdata any) {
	self.Runtime.EditorResourcePreview_queue_resource_preview(self, path, receiver, receiver_func, userdata)
}
func (self EditorResourcePreview) QueueEditedResourcePreview(resource Resource, receiver Object, receiver_func string, userdata any) {
	self.Runtime.EditorResourcePreview_queue_edited_resource_preview(self, resource, receiver, receiver_func, userdata)
}
func (self EditorResourcePreview) AddPreviewGenerator(generator EditorResourcePreviewGenerator) {
	self.Runtime.EditorResourcePreview_add_preview_generator(self, generator)
}
func (self EditorResourcePreview) RemovePreviewGenerator(generator EditorResourcePreviewGenerator) {
	self.Runtime.EditorResourcePreview_remove_preview_generator(self, generator)
}
func (self EditorResourcePreview) CheckForInvalidation(path string) {
	self.Runtime.EditorResourcePreview_check_for_invalidation(self, path)
}

type extendsEditorResourcePreviewGenerator struct {
	_ [0]*extendsEditorResourcePreviewGenerator
	class
}

func (self EditorResourcePreviewGenerator) RefCounted() RefCounted {
	var parent RefCounted
	parent.class = self.class
	return parent
}

type extendsEditorResourceTooltipPlugin struct {
	_ [0]*extendsEditorResourceTooltipPlugin
	class
}

func (self EditorResourceTooltipPlugin) RefCounted() RefCounted {
	var parent RefCounted
	parent.class = self.class
	return parent
}
func (self EditorResourceTooltipPlugin) RequestThumbnail(path string, control TextureRect) {
	self.Runtime.EditorResourceTooltipPlugin_request_thumbnail(self, path, control)
}

type extendsEditorSceneFormatImporter struct {
	_ [0]*extendsEditorSceneFormatImporter
	class
}

func (self EditorSceneFormatImporter) RefCounted() RefCounted {
	var parent RefCounted
	parent.class = self.class
	return parent
}

type extendsEditorSceneFormatImporterBlend struct {
	_ [0]*extendsEditorSceneFormatImporterBlend
	class
}

func (self EditorSceneFormatImporterBlend) EditorSceneFormatImporter() EditorSceneFormatImporter {
	var parent EditorSceneFormatImporter
	parent.class = self.class
	return parent
}

type extendsEditorSceneFormatImporterFBX struct {
	_ [0]*extendsEditorSceneFormatImporterFBX
	class
}

func (self EditorSceneFormatImporterFBX) EditorSceneFormatImporter() EditorSceneFormatImporter {
	var parent EditorSceneFormatImporter
	parent.class = self.class
	return parent
}

type extendsEditorSceneFormatImporterGLTF struct {
	_ [0]*extendsEditorSceneFormatImporterGLTF
	class
}

func (self EditorSceneFormatImporterGLTF) EditorSceneFormatImporter() EditorSceneFormatImporter {
	var parent EditorSceneFormatImporter
	parent.class = self.class
	return parent
}

type extendsEditorScenePostImport struct {
	_ [0]*extendsEditorScenePostImport
	class
}

func (self EditorScenePostImport) RefCounted() RefCounted {
	var parent RefCounted
	parent.class = self.class
	return parent
}
func (self EditorScenePostImport) GetSourceFile() string {
	return self.Runtime.EditorScenePostImport_get_source_file(self)
}

type extendsEditorScenePostImportPlugin struct {
	_ [0]*extendsEditorScenePostImportPlugin
	class
}

func (self EditorScenePostImportPlugin) RefCounted() RefCounted {
	var parent RefCounted
	parent.class = self.class
	return parent
}
func (self EditorScenePostImportPlugin) GetOptionValue(name string) any {
	return self.Runtime.EditorScenePostImportPlugin_get_option_value(self, name)
}
func (self EditorScenePostImportPlugin) AddImportOption(name string, value any) {
	self.Runtime.EditorScenePostImportPlugin_add_import_option(self, name, value)
}
func (self EditorScenePostImportPlugin) AddImportOptionAdvanced(atype VariantType, name string, default_value any, hint PropertyHint, hint_string string, usage_flags int64) {
	self.Runtime.EditorScenePostImportPlugin_add_import_option_advanced(self, atype, name, default_value, hint, hint_string, usage_flags)
}

type extendsEditorScript struct {
	_ [0]*extendsEditorScript
	class
}

func (self EditorScript) RefCounted() RefCounted {
	var parent RefCounted
	parent.class = self.class
	return parent
}
func (self EditorScript) AddRootNode(node Node) {
	self.Runtime.EditorScript_add_root_node(self, node)
}
func (self EditorScript) GetScene() Node {
	return self.Runtime.EditorScript_get_scene(self)
}
func (self EditorScript) GetEditorInterface() EditorInterface {
	return self.Runtime.EditorScript_get_editor_interface(self)
}

type extendsEditorScriptPicker struct {
	_ [0]*extendsEditorScriptPicker
	class
}

func (self EditorScriptPicker) EditorResourcePicker() EditorResourcePicker {
	var parent EditorResourcePicker
	parent.class = self.class
	return parent
}
func (self EditorScriptPicker) SetScriptOwner(owner_node Node) {
	self.Runtime.EditorScriptPicker_set_script_owner(self, owner_node)
}
func (self EditorScriptPicker) GetScriptOwner() Node {
	return self.Runtime.EditorScriptPicker_get_script_owner(self)
}

type extendsEditorSelection struct {
	_ [0]*extendsEditorSelection
	class
}

func (self EditorSelection) Object() Object {
	var parent Object
	parent.class = self.class
	return parent
}
func (self EditorSelection) Clear() {
	self.Runtime.EditorSelection_clear(self)
}
func (self EditorSelection) AddNode(node Node) {
	self.Runtime.EditorSelection_add_node(self, node)
}
func (self EditorSelection) RemoveNode(node Node) {
	self.Runtime.EditorSelection_remove_node(self, node)
}
func (self EditorSelection) GetSelectedNodes() ArrayOf[Node] {
	return self.Runtime.EditorSelection_get_selected_nodes(self)
}
func (self EditorSelection) GetTransformableSelectedNodes() ArrayOf[Node] {
	return self.Runtime.EditorSelection_get_transformable_selected_nodes(self)
}

type extendsEditorSettings struct {
	_ [0]*extendsEditorSettings
	class
}

func (self EditorSettings) Resource() Resource {
	var parent Resource
	parent.class = self.class
	return parent
}
func (self EditorSettings) HasSetting(name string) bool {
	return self.Runtime.EditorSettings_has_setting(self, name)
}
func (self EditorSettings) SetSetting(name string, value any) {
	self.Runtime.EditorSettings_set_setting(self, name, value)
}
func (self EditorSettings) GetSetting(name string) any {
	return self.Runtime.EditorSettings_get_setting(self, name)
}
func (self EditorSettings) Erase(property string) {
	self.Runtime.EditorSettings_erase(self, property)
}
func (self EditorSettings) SetInitialValue(name string, value any, update_current bool) {
	self.Runtime.EditorSettings_set_initial_value(self, name, value, update_current)
}
func (self EditorSettings) AddPropertyInfo(info Dictionary) {
	self.Runtime.EditorSettings_add_property_info(self, info)
}
func (self EditorSettings) SetProjectMetadata(section string, key string, data any) {
	self.Runtime.EditorSettings_set_project_metadata(self, section, key, data)
}
func (self EditorSettings) GetProjectMetadata(section string, key string, def any) any {
	return self.Runtime.EditorSettings_get_project_metadata(self, section, key, def)
}
func (self EditorSettings) SetFavorites(dirs PackedStringArray) {
	self.Runtime.EditorSettings_set_favorites(self, dirs)
}
func (self EditorSettings) GetFavorites() PackedStringArray {
	return self.Runtime.EditorSettings_get_favorites(self)
}
func (self EditorSettings) SetRecentDirs(dirs PackedStringArray) {
	self.Runtime.EditorSettings_set_recent_dirs(self, dirs)
}
func (self EditorSettings) GetRecentDirs() PackedStringArray {
	return self.Runtime.EditorSettings_get_recent_dirs(self)
}
func (self EditorSettings) SetBuiltinActionOverride(name string, actions_list ArrayOf[InputEvent]) {
	self.Runtime.EditorSettings_set_builtin_action_override(self, name, actions_list)
}
func (self EditorSettings) CheckChangedSettingsInGroup(setting_prefix string) bool {
	return self.Runtime.EditorSettings_check_changed_settings_in_group(self, setting_prefix)
}
func (self EditorSettings) GetChangedSettings() PackedStringArray {
	return self.Runtime.EditorSettings_get_changed_settings(self)
}
func (self EditorSettings) MarkSettingChanged(setting string) {
	self.Runtime.EditorSettings_mark_setting_changed(self, setting)
}

type extendsEditorSpinSlider struct {
	_ [0]*extendsEditorSpinSlider
	class
}

func (self EditorSpinSlider) Range() Range {
	var parent Range
	parent.class = self.class
	return parent
}
func (self EditorSpinSlider) SetLabel(label string) {
	self.Runtime.EditorSpinSlider_set_label(self, label)
}
func (self EditorSpinSlider) GetLabel() string {
	return self.Runtime.EditorSpinSlider_get_label(self)
}
func (self EditorSpinSlider) SetSuffix(suffix string) {
	self.Runtime.EditorSpinSlider_set_suffix(self, suffix)
}
func (self EditorSpinSlider) GetSuffix() string {
	return self.Runtime.EditorSpinSlider_get_suffix(self)
}
func (self EditorSpinSlider) SetReadOnly(read_only bool) {
	self.Runtime.EditorSpinSlider_set_read_only(self, read_only)
}
func (self EditorSpinSlider) IsReadOnly() bool {
	return self.Runtime.EditorSpinSlider_is_read_only(self)
}
func (self EditorSpinSlider) SetFlat(flat bool) {
	self.Runtime.EditorSpinSlider_set_flat(self, flat)
}
func (self EditorSpinSlider) IsFlat() bool {
	return self.Runtime.EditorSpinSlider_is_flat(self)
}
func (self EditorSpinSlider) SetHideSlider(hide_slider bool) {
	self.Runtime.EditorSpinSlider_set_hide_slider(self, hide_slider)
}
func (self EditorSpinSlider) IsHidingSlider() bool {
	return self.Runtime.EditorSpinSlider_is_hiding_slider(self)
}

type extendsEditorSyntaxHighlighter struct {
	_ [0]*extendsEditorSyntaxHighlighter
	class
}

func (self EditorSyntaxHighlighter) SyntaxHighlighter() SyntaxHighlighter {
	var parent SyntaxHighlighter
	parent.class = self.class
	return parent
}

type extendsEditorTranslationParserPlugin struct {
	_ [0]*extendsEditorTranslationParserPlugin
	class
}

func (self EditorTranslationParserPlugin) RefCounted() RefCounted {
	var parent RefCounted
	parent.class = self.class
	return parent
}

type extendsEditorUndoRedoManager struct {
	_ [0]*extendsEditorUndoRedoManager
	class
}

func (self EditorUndoRedoManager) Object() Object {
	var parent Object
	parent.class = self.class
	return parent
}
func (self EditorUndoRedoManager) CreateAction(name string, merge_mode UndoRedoMergeMode, custom_context Object, backward_undo_ops bool) {
	self.Runtime.EditorUndoRedoManager_create_action(self, name, merge_mode, custom_context, backward_undo_ops)
}
func (self EditorUndoRedoManager) CommitAction(execute bool) {
	self.Runtime.EditorUndoRedoManager_commit_action(self, execute)
}
func (self EditorUndoRedoManager) IsCommittingAction() bool {
	return self.Runtime.EditorUndoRedoManager_is_committing_action(self)
}
func (self EditorUndoRedoManager) AddDoMethod(object Object, method string) {
	self.Runtime.EditorUndoRedoManager_add_do_method(self, object, method)
}
func (self EditorUndoRedoManager) AddUndoMethod(object Object, method string) {
	self.Runtime.EditorUndoRedoManager_add_undo_method(self, object, method)
}
func (self EditorUndoRedoManager) AddDoProperty(object Object, property string, value any) {
	self.Runtime.EditorUndoRedoManager_add_do_property(self, object, property, value)
}
func (self EditorUndoRedoManager) AddUndoProperty(object Object, property string, value any) {
	self.Runtime.EditorUndoRedoManager_add_undo_property(self, object, property, value)
}
func (self EditorUndoRedoManager) AddDoReference(object Object) {
	self.Runtime.EditorUndoRedoManager_add_do_reference(self, object)
}
func (self EditorUndoRedoManager) AddUndoReference(object Object) {
	self.Runtime.EditorUndoRedoManager_add_undo_reference(self, object)
}
func (self EditorUndoRedoManager) GetObjectHistoryId(object Object) int64 {
	return self.Runtime.EditorUndoRedoManager_get_object_history_id(self, object)
}
func (self EditorUndoRedoManager) GetHistoryUndoRedo(id int64) UndoRedo {
	return self.Runtime.EditorUndoRedoManager_get_history_undo_redo(self, id)
}

type extendsEditorVCSInterface struct {
	_ [0]*extendsEditorVCSInterface
	class
}

func (self EditorVCSInterface) Object() Object {
	var parent Object
	parent.class = self.class
	return parent
}
func (self EditorVCSInterface) CreateDiffLine(new_line_no int64, old_line_no int64, content string, status string) Dictionary {
	return self.Runtime.EditorVCSInterface_create_diff_line(self, new_line_no, old_line_no, content, status)
}
func (self EditorVCSInterface) CreateDiffHunk(old_start int64, new_start int64, old_lines int64, new_lines int64) Dictionary {
	return self.Runtime.EditorVCSInterface_create_diff_hunk(self, old_start, new_start, old_lines, new_lines)
}
func (self EditorVCSInterface) CreateDiffFile(new_file string, old_file string) Dictionary {
	return self.Runtime.EditorVCSInterface_create_diff_file(self, new_file, old_file)
}
func (self EditorVCSInterface) CreateCommit(msg string, author string, id string, unix_timestamp int64, offset_minutes int64) Dictionary {
	return self.Runtime.EditorVCSInterface_create_commit(self, msg, author, id, unix_timestamp, offset_minutes)
}
func (self EditorVCSInterface) CreateStatusFile(file_path string, change_type EditorVCSInterfaceChangeType, area EditorVCSInterfaceTreeArea) Dictionary {
	return self.Runtime.EditorVCSInterface_create_status_file(self, file_path, change_type, area)
}
func (self EditorVCSInterface) AddDiffHunksIntoDiffFile(diff_file Dictionary, diff_hunks ArrayOf[Dictionary]) Dictionary {
	return self.Runtime.EditorVCSInterface_add_diff_hunks_into_diff_file(self, diff_file, diff_hunks)
}
func (self EditorVCSInterface) AddLineDiffsIntoDiffHunk(diff_hunk Dictionary, line_diffs ArrayOf[Dictionary]) Dictionary {
	return self.Runtime.EditorVCSInterface_add_line_diffs_into_diff_hunk(self, diff_hunk, line_diffs)
}
func (self EditorVCSInterface) PopupError(msg string) {
	self.Runtime.EditorVCSInterface_popup_error(self, msg)
}

type extendsEncodedObjectAsID struct {
	_ [0]*extendsEncodedObjectAsID
	class
}

func (self EncodedObjectAsID) RefCounted() RefCounted {
	var parent RefCounted
	parent.class = self.class
	return parent
}
func (self EncodedObjectAsID) SetObjectId(id int64) {
	self.Runtime.EncodedObjectAsID_set_object_id(self, id)
}
func (self EncodedObjectAsID) GetObjectId() int64 {
	return self.Runtime.EncodedObjectAsID_get_object_id(self)
}

type extendsEngine struct {
	_ [0]*extendsEngine
	class
}

func (self Engine) Object() Object { var parent Object; parent.class = self.class; return parent }
func (self Engine) SetPhysicsTicksPerSecond(physics_ticks_per_second int64) {
	self.Runtime.Engine_set_physics_ticks_per_second(self, physics_ticks_per_second)
}
func (self Engine) GetPhysicsTicksPerSecond() int64 {
	return self.Runtime.Engine_get_physics_ticks_per_second(self)
}
func (self Engine) SetMaxPhysicsStepsPerFrame(max_physics_steps int64) {
	self.Runtime.Engine_set_max_physics_steps_per_frame(self, max_physics_steps)
}
func (self Engine) GetMaxPhysicsStepsPerFrame() int64 {
	return self.Runtime.Engine_get_max_physics_steps_per_frame(self)
}
func (self Engine) SetPhysicsJitterFix(physics_jitter_fix Float) {
	self.Runtime.Engine_set_physics_jitter_fix(self, physics_jitter_fix)
}
func (self Engine) GetPhysicsJitterFix() Float {
	return self.Runtime.Engine_get_physics_jitter_fix(self)
}
func (self Engine) GetPhysicsInterpolationFraction() Float {
	return self.Runtime.Engine_get_physics_interpolation_fraction(self)
}
func (self Engine) SetMaxFps(max_fps int64) {
	self.Runtime.Engine_set_max_fps(self, max_fps)
}
func (self Engine) GetMaxFps() int64 {
	return self.Runtime.Engine_get_max_fps(self)
}
func (self Engine) SetTimeScale(time_scale Float) {
	self.Runtime.Engine_set_time_scale(self, time_scale)
}
func (self Engine) GetTimeScale() Float {
	return self.Runtime.Engine_get_time_scale(self)
}
func (self Engine) GetFramesDrawn() int64 {
	return self.Runtime.Engine_get_frames_drawn(self)
}
func (self Engine) GetFramesPerSecond() Float {
	return self.Runtime.Engine_get_frames_per_second(self)
}
func (self Engine) GetPhysicsFrames() int64 {
	return self.Runtime.Engine_get_physics_frames(self)
}
func (self Engine) GetProcessFrames() int64 {
	return self.Runtime.Engine_get_process_frames(self)
}
func (self Engine) GetMainLoop() MainLoop {
	return self.Runtime.Engine_get_main_loop(self)
}
func (self Engine) GetVersionInfo() Dictionary {
	return self.Runtime.Engine_get_version_info(self)
}
func (self Engine) GetAuthorInfo() Dictionary {
	return self.Runtime.Engine_get_author_info(self)
}
func (self Engine) GetCopyrightInfo() ArrayOf[Dictionary] {
	return self.Runtime.Engine_get_copyright_info(self)
}
func (self Engine) GetDonorInfo() Dictionary {
	return self.Runtime.Engine_get_donor_info(self)
}
func (self Engine) GetLicenseInfo() Dictionary {
	return self.Runtime.Engine_get_license_info(self)
}
func (self Engine) GetLicenseText() string {
	return self.Runtime.Engine_get_license_text(self)
}
func (self Engine) GetArchitectureName() string {
	return self.Runtime.Engine_get_architecture_name(self)
}
func (self Engine) IsInPhysicsFrame() bool {
	return self.Runtime.Engine_is_in_physics_frame(self)
}
func (self Engine) HasSingleton(name string) bool {
	return self.Runtime.Engine_has_singleton(self, name)
}
func (self Engine) GetSingleton(name string) Object {
	return self.Runtime.Engine_get_singleton(self, name)
}
func (self Engine) RegisterSingleton(name string, instance Object) {
	self.Runtime.Engine_register_singleton(self, name, instance)
}
func (self Engine) UnregisterSingleton(name string) {
	self.Runtime.Engine_unregister_singleton(self, name)
}
func (self Engine) GetSingletonList() PackedStringArray {
	return self.Runtime.Engine_get_singleton_list(self)
}
func (self Engine) RegisterScriptLanguage(language ScriptLanguage) int64 {
	return self.Runtime.Engine_register_script_language(self, language)
}
func (self Engine) UnregisterScriptLanguage(language ScriptLanguage) int64 {
	return self.Runtime.Engine_unregister_script_language(self, language)
}
func (self Engine) GetScriptLanguageCount() int64 {
	return self.Runtime.Engine_get_script_language_count(self)
}
func (self Engine) GetScriptLanguage(index int64) ScriptLanguage {
	return self.Runtime.Engine_get_script_language(self, index)
}
func (self Engine) IsEditorHint() bool {
	return self.Runtime.Engine_is_editor_hint(self)
}
func (self Engine) GetWriteMoviePath() string {
	return self.Runtime.Engine_get_write_movie_path(self)
}
func (self Engine) SetPrintErrorMessages(enabled bool) {
	self.Runtime.Engine_set_print_error_messages(self, enabled)
}
func (self Engine) IsPrintingErrorMessages() bool {
	return self.Runtime.Engine_is_printing_error_messages(self)
}

type extendsEngineDebugger struct {
	_ [0]*extendsEngineDebugger
	class
}

func (self EngineDebugger) Object() Object {
	var parent Object
	parent.class = self.class
	return parent
}
func (self EngineDebugger) IsActive() bool {
	return self.Runtime.EngineDebugger_is_active(self)
}
func (self EngineDebugger) RegisterProfiler(name string, profiler EngineProfiler) {
	self.Runtime.EngineDebugger_register_profiler(self, name, profiler)
}
func (self EngineDebugger) UnregisterProfiler(name string) {
	self.Runtime.EngineDebugger_unregister_profiler(self, name)
}
func (self EngineDebugger) IsProfiling(name string) bool {
	return self.Runtime.EngineDebugger_is_profiling(self, name)
}
func (self EngineDebugger) HasProfiler(name string) bool {
	return self.Runtime.EngineDebugger_has_profiler(self, name)
}
func (self EngineDebugger) ProfilerAddFrameData(name string, data Array) {
	self.Runtime.EngineDebugger_profiler_add_frame_data(self, name, data)
}
func (self EngineDebugger) ProfilerEnable(name string, enable bool, arguments Array) {
	self.Runtime.EngineDebugger_profiler_enable(self, name, enable, arguments)
}
func (self EngineDebugger) RegisterMessageCapture(name string, callable Callable) {
	self.Runtime.EngineDebugger_register_message_capture(self, name, callable)
}
func (self EngineDebugger) UnregisterMessageCapture(name string) {
	self.Runtime.EngineDebugger_unregister_message_capture(self, name)
}
func (self EngineDebugger) HasCapture(name string) bool {
	return self.Runtime.EngineDebugger_has_capture(self, name)
}
func (self EngineDebugger) SendMessage(message string, data Array) {
	self.Runtime.EngineDebugger_send_message(self, message, data)
}

type extendsEngineProfiler struct {
	_ [0]*extendsEngineProfiler
	class
}

func (self EngineProfiler) RefCounted() RefCounted {
	var parent RefCounted
	parent.class = self.class
	return parent
}

type extendsEnvironment struct {
	_ [0]*extendsEnvironment
	class
}

func (self Environment) Resource() Resource {
	var parent Resource
	parent.class = self.class
	return parent
}
func (self Environment) SetBackground(mode EnvironmentBGMode) {
	self.Runtime.Environment_set_background(self, mode)
}
func (self Environment) GetBackground() EnvironmentBGMode {
	return self.Runtime.Environment_get_background(self)
}
func (self Environment) SetSky(sky Sky) {
	self.Runtime.Environment_set_sky(self, sky)
}
func (self Environment) GetSky() Sky {
	return self.Runtime.Environment_get_sky(self)
}
func (self Environment) SetSkyCustomFov(scale Float) {
	self.Runtime.Environment_set_sky_custom_fov(self, scale)
}
func (self Environment) GetSkyCustomFov() Float {
	return self.Runtime.Environment_get_sky_custom_fov(self)
}
func (self Environment) SetSkyRotation(euler_radians Vector3) {
	self.Runtime.Environment_set_sky_rotation(self, euler_radians)
}
func (self Environment) GetSkyRotation() Vector3 {
	return self.Runtime.Environment_get_sky_rotation(self)
}
func (self Environment) SetBgColor(color Color) {
	self.Runtime.Environment_set_bg_color(self, color)
}
func (self Environment) GetBgColor() Color {
	return self.Runtime.Environment_get_bg_color(self)
}
func (self Environment) SetBgEnergyMultiplier(energy Float) {
	self.Runtime.Environment_set_bg_energy_multiplier(self, energy)
}
func (self Environment) GetBgEnergyMultiplier() Float {
	return self.Runtime.Environment_get_bg_energy_multiplier(self)
}
func (self Environment) SetBgIntensity(energy Float) {
	self.Runtime.Environment_set_bg_intensity(self, energy)
}
func (self Environment) GetBgIntensity() Float {
	return self.Runtime.Environment_get_bg_intensity(self)
}
func (self Environment) SetCanvasMaxLayer(layer int64) {
	self.Runtime.Environment_set_canvas_max_layer(self, layer)
}
func (self Environment) GetCanvasMaxLayer() int64 {
	return self.Runtime.Environment_get_canvas_max_layer(self)
}
func (self Environment) SetCameraFeedId(id int64) {
	self.Runtime.Environment_set_camera_feed_id(self, id)
}
func (self Environment) GetCameraFeedId() int64 {
	return self.Runtime.Environment_get_camera_feed_id(self)
}
func (self Environment) SetAmbientLightColor(color Color) {
	self.Runtime.Environment_set_ambient_light_color(self, color)
}
func (self Environment) GetAmbientLightColor() Color {
	return self.Runtime.Environment_get_ambient_light_color(self)
}
func (self Environment) SetAmbientSource(source EnvironmentAmbientSource) {
	self.Runtime.Environment_set_ambient_source(self, source)
}
func (self Environment) GetAmbientSource() EnvironmentAmbientSource {
	return self.Runtime.Environment_get_ambient_source(self)
}
func (self Environment) SetAmbientLightEnergy(energy Float) {
	self.Runtime.Environment_set_ambient_light_energy(self, energy)
}
func (self Environment) GetAmbientLightEnergy() Float {
	return self.Runtime.Environment_get_ambient_light_energy(self)
}
func (self Environment) SetAmbientLightSkyContribution(ratio Float) {
	self.Runtime.Environment_set_ambient_light_sky_contribution(self, ratio)
}
func (self Environment) GetAmbientLightSkyContribution() Float {
	return self.Runtime.Environment_get_ambient_light_sky_contribution(self)
}
func (self Environment) SetReflectionSource(source EnvironmentReflectionSource) {
	self.Runtime.Environment_set_reflection_source(self, source)
}
func (self Environment) GetReflectionSource() EnvironmentReflectionSource {
	return self.Runtime.Environment_get_reflection_source(self)
}
func (self Environment) SetTonemapper(mode EnvironmentToneMapper) {
	self.Runtime.Environment_set_tonemapper(self, mode)
}
func (self Environment) GetTonemapper() EnvironmentToneMapper {
	return self.Runtime.Environment_get_tonemapper(self)
}
func (self Environment) SetTonemapExposure(exposure Float) {
	self.Runtime.Environment_set_tonemap_exposure(self, exposure)
}
func (self Environment) GetTonemapExposure() Float {
	return self.Runtime.Environment_get_tonemap_exposure(self)
}
func (self Environment) SetTonemapWhite(white Float) {
	self.Runtime.Environment_set_tonemap_white(self, white)
}
func (self Environment) GetTonemapWhite() Float {
	return self.Runtime.Environment_get_tonemap_white(self)
}
func (self Environment) SetSsrEnabled(enabled bool) {
	self.Runtime.Environment_set_ssr_enabled(self, enabled)
}
func (self Environment) IsSsrEnabled() bool {
	return self.Runtime.Environment_is_ssr_enabled(self)
}
func (self Environment) SetSsrMaxSteps(max_steps int64) {
	self.Runtime.Environment_set_ssr_max_steps(self, max_steps)
}
func (self Environment) GetSsrMaxSteps() int64 {
	return self.Runtime.Environment_get_ssr_max_steps(self)
}
func (self Environment) SetSsrFadeIn(fade_in Float) {
	self.Runtime.Environment_set_ssr_fade_in(self, fade_in)
}
func (self Environment) GetSsrFadeIn() Float {
	return self.Runtime.Environment_get_ssr_fade_in(self)
}
func (self Environment) SetSsrFadeOut(fade_out Float) {
	self.Runtime.Environment_set_ssr_fade_out(self, fade_out)
}
func (self Environment) GetSsrFadeOut() Float {
	return self.Runtime.Environment_get_ssr_fade_out(self)
}
func (self Environment) SetSsrDepthTolerance(depth_tolerance Float) {
	self.Runtime.Environment_set_ssr_depth_tolerance(self, depth_tolerance)
}
func (self Environment) GetSsrDepthTolerance() Float {
	return self.Runtime.Environment_get_ssr_depth_tolerance(self)
}
func (self Environment) SetSsaoEnabled(enabled bool) {
	self.Runtime.Environment_set_ssao_enabled(self, enabled)
}
func (self Environment) IsSsaoEnabled() bool {
	return self.Runtime.Environment_is_ssao_enabled(self)
}
func (self Environment) SetSsaoRadius(radius Float) {
	self.Runtime.Environment_set_ssao_radius(self, radius)
}
func (self Environment) GetSsaoRadius() Float {
	return self.Runtime.Environment_get_ssao_radius(self)
}
func (self Environment) SetSsaoIntensity(intensity Float) {
	self.Runtime.Environment_set_ssao_intensity(self, intensity)
}
func (self Environment) GetSsaoIntensity() Float {
	return self.Runtime.Environment_get_ssao_intensity(self)
}
func (self Environment) SetSsaoPower(power Float) {
	self.Runtime.Environment_set_ssao_power(self, power)
}
func (self Environment) GetSsaoPower() Float {
	return self.Runtime.Environment_get_ssao_power(self)
}
func (self Environment) SetSsaoDetail(detail Float) {
	self.Runtime.Environment_set_ssao_detail(self, detail)
}
func (self Environment) GetSsaoDetail() Float {
	return self.Runtime.Environment_get_ssao_detail(self)
}
func (self Environment) SetSsaoHorizon(horizon Float) {
	self.Runtime.Environment_set_ssao_horizon(self, horizon)
}
func (self Environment) GetSsaoHorizon() Float {
	return self.Runtime.Environment_get_ssao_horizon(self)
}
func (self Environment) SetSsaoSharpness(sharpness Float) {
	self.Runtime.Environment_set_ssao_sharpness(self, sharpness)
}
func (self Environment) GetSsaoSharpness() Float {
	return self.Runtime.Environment_get_ssao_sharpness(self)
}
func (self Environment) SetSsaoDirectLightAffect(amount Float) {
	self.Runtime.Environment_set_ssao_direct_light_affect(self, amount)
}
func (self Environment) GetSsaoDirectLightAffect() Float {
	return self.Runtime.Environment_get_ssao_direct_light_affect(self)
}
func (self Environment) SetSsaoAoChannelAffect(amount Float) {
	self.Runtime.Environment_set_ssao_ao_channel_affect(self, amount)
}
func (self Environment) GetSsaoAoChannelAffect() Float {
	return self.Runtime.Environment_get_ssao_ao_channel_affect(self)
}
func (self Environment) SetSsilEnabled(enabled bool) {
	self.Runtime.Environment_set_ssil_enabled(self, enabled)
}
func (self Environment) IsSsilEnabled() bool {
	return self.Runtime.Environment_is_ssil_enabled(self)
}
func (self Environment) SetSsilRadius(radius Float) {
	self.Runtime.Environment_set_ssil_radius(self, radius)
}
func (self Environment) GetSsilRadius() Float {
	return self.Runtime.Environment_get_ssil_radius(self)
}
func (self Environment) SetSsilIntensity(intensity Float) {
	self.Runtime.Environment_set_ssil_intensity(self, intensity)
}
func (self Environment) GetSsilIntensity() Float {
	return self.Runtime.Environment_get_ssil_intensity(self)
}
func (self Environment) SetSsilSharpness(sharpness Float) {
	self.Runtime.Environment_set_ssil_sharpness(self, sharpness)
}
func (self Environment) GetSsilSharpness() Float {
	return self.Runtime.Environment_get_ssil_sharpness(self)
}
func (self Environment) SetSsilNormalRejection(normal_rejection Float) {
	self.Runtime.Environment_set_ssil_normal_rejection(self, normal_rejection)
}
func (self Environment) GetSsilNormalRejection() Float {
	return self.Runtime.Environment_get_ssil_normal_rejection(self)
}
func (self Environment) SetSdfgiEnabled(enabled bool) {
	self.Runtime.Environment_set_sdfgi_enabled(self, enabled)
}
func (self Environment) IsSdfgiEnabled() bool {
	return self.Runtime.Environment_is_sdfgi_enabled(self)
}
func (self Environment) SetSdfgiCascades(amount int64) {
	self.Runtime.Environment_set_sdfgi_cascades(self, amount)
}
func (self Environment) GetSdfgiCascades() int64 {
	return self.Runtime.Environment_get_sdfgi_cascades(self)
}
func (self Environment) SetSdfgiMinCellSize(size Float) {
	self.Runtime.Environment_set_sdfgi_min_cell_size(self, size)
}
func (self Environment) GetSdfgiMinCellSize() Float {
	return self.Runtime.Environment_get_sdfgi_min_cell_size(self)
}
func (self Environment) SetSdfgiMaxDistance(distance Float) {
	self.Runtime.Environment_set_sdfgi_max_distance(self, distance)
}
func (self Environment) GetSdfgiMaxDistance() Float {
	return self.Runtime.Environment_get_sdfgi_max_distance(self)
}
func (self Environment) SetSdfgiCascade0Distance(distance Float) {
	self.Runtime.Environment_set_sdfgi_cascade0_distance(self, distance)
}
func (self Environment) GetSdfgiCascade0Distance() Float {
	return self.Runtime.Environment_get_sdfgi_cascade0_distance(self)
}
func (self Environment) SetSdfgiYScale(scale EnvironmentSDFGIYScale) {
	self.Runtime.Environment_set_sdfgi_y_scale(self, scale)
}
func (self Environment) GetSdfgiYScale() EnvironmentSDFGIYScale {
	return self.Runtime.Environment_get_sdfgi_y_scale(self)
}
func (self Environment) SetSdfgiUseOcclusion(enable bool) {
	self.Runtime.Environment_set_sdfgi_use_occlusion(self, enable)
}
func (self Environment) IsSdfgiUsingOcclusion() bool {
	return self.Runtime.Environment_is_sdfgi_using_occlusion(self)
}
func (self Environment) SetSdfgiBounceFeedback(amount Float) {
	self.Runtime.Environment_set_sdfgi_bounce_feedback(self, amount)
}
func (self Environment) GetSdfgiBounceFeedback() Float {
	return self.Runtime.Environment_get_sdfgi_bounce_feedback(self)
}
func (self Environment) SetSdfgiReadSkyLight(enable bool) {
	self.Runtime.Environment_set_sdfgi_read_sky_light(self, enable)
}
func (self Environment) IsSdfgiReadingSkyLight() bool {
	return self.Runtime.Environment_is_sdfgi_reading_sky_light(self)
}
func (self Environment) SetSdfgiEnergy(amount Float) {
	self.Runtime.Environment_set_sdfgi_energy(self, amount)
}
func (self Environment) GetSdfgiEnergy() Float {
	return self.Runtime.Environment_get_sdfgi_energy(self)
}
func (self Environment) SetSdfgiNormalBias(bias Float) {
	self.Runtime.Environment_set_sdfgi_normal_bias(self, bias)
}
func (self Environment) GetSdfgiNormalBias() Float {
	return self.Runtime.Environment_get_sdfgi_normal_bias(self)
}
func (self Environment) SetSdfgiProbeBias(bias Float) {
	self.Runtime.Environment_set_sdfgi_probe_bias(self, bias)
}
func (self Environment) GetSdfgiProbeBias() Float {
	return self.Runtime.Environment_get_sdfgi_probe_bias(self)
}
func (self Environment) SetGlowEnabled(enabled bool) {
	self.Runtime.Environment_set_glow_enabled(self, enabled)
}
func (self Environment) IsGlowEnabled() bool {
	return self.Runtime.Environment_is_glow_enabled(self)
}
func (self Environment) SetGlowLevel(idx int64, intensity Float) {
	self.Runtime.Environment_set_glow_level(self, idx, intensity)
}
func (self Environment) GetGlowLevel(idx int64) Float {
	return self.Runtime.Environment_get_glow_level(self, idx)
}
func (self Environment) SetGlowNormalized(normalize bool) {
	self.Runtime.Environment_set_glow_normalized(self, normalize)
}
func (self Environment) IsGlowNormalized() bool {
	return self.Runtime.Environment_is_glow_normalized(self)
}
func (self Environment) SetGlowIntensity(intensity Float) {
	self.Runtime.Environment_set_glow_intensity(self, intensity)
}
func (self Environment) GetGlowIntensity() Float {
	return self.Runtime.Environment_get_glow_intensity(self)
}
func (self Environment) SetGlowStrength(strength Float) {
	self.Runtime.Environment_set_glow_strength(self, strength)
}
func (self Environment) GetGlowStrength() Float {
	return self.Runtime.Environment_get_glow_strength(self)
}
func (self Environment) SetGlowMix(mix Float) {
	self.Runtime.Environment_set_glow_mix(self, mix)
}
func (self Environment) GetGlowMix() Float {
	return self.Runtime.Environment_get_glow_mix(self)
}
func (self Environment) SetGlowBloom(amount Float) {
	self.Runtime.Environment_set_glow_bloom(self, amount)
}
func (self Environment) GetGlowBloom() Float {
	return self.Runtime.Environment_get_glow_bloom(self)
}
func (self Environment) SetGlowBlendMode(mode EnvironmentGlowBlendMode) {
	self.Runtime.Environment_set_glow_blend_mode(self, mode)
}
func (self Environment) GetGlowBlendMode() EnvironmentGlowBlendMode {
	return self.Runtime.Environment_get_glow_blend_mode(self)
}
func (self Environment) SetGlowHdrBleedThreshold(threshold Float) {
	self.Runtime.Environment_set_glow_hdr_bleed_threshold(self, threshold)
}
func (self Environment) GetGlowHdrBleedThreshold() Float {
	return self.Runtime.Environment_get_glow_hdr_bleed_threshold(self)
}
func (self Environment) SetGlowHdrBleedScale(scale Float) {
	self.Runtime.Environment_set_glow_hdr_bleed_scale(self, scale)
}
func (self Environment) GetGlowHdrBleedScale() Float {
	return self.Runtime.Environment_get_glow_hdr_bleed_scale(self)
}
func (self Environment) SetGlowHdrLuminanceCap(amount Float) {
	self.Runtime.Environment_set_glow_hdr_luminance_cap(self, amount)
}
func (self Environment) GetGlowHdrLuminanceCap() Float {
	return self.Runtime.Environment_get_glow_hdr_luminance_cap(self)
}
func (self Environment) SetGlowMapStrength(strength Float) {
	self.Runtime.Environment_set_glow_map_strength(self, strength)
}
func (self Environment) GetGlowMapStrength() Float {
	return self.Runtime.Environment_get_glow_map_strength(self)
}
func (self Environment) SetGlowMap(mode Texture) {
	self.Runtime.Environment_set_glow_map(self, mode)
}
func (self Environment) GetGlowMap() Texture {
	return self.Runtime.Environment_get_glow_map(self)
}
func (self Environment) SetFogEnabled(enabled bool) {
	self.Runtime.Environment_set_fog_enabled(self, enabled)
}
func (self Environment) IsFogEnabled() bool {
	return self.Runtime.Environment_is_fog_enabled(self)
}
func (self Environment) SetFogLightColor(light_color Color) {
	self.Runtime.Environment_set_fog_light_color(self, light_color)
}
func (self Environment) GetFogLightColor() Color {
	return self.Runtime.Environment_get_fog_light_color(self)
}
func (self Environment) SetFogLightEnergy(light_energy Float) {
	self.Runtime.Environment_set_fog_light_energy(self, light_energy)
}
func (self Environment) GetFogLightEnergy() Float {
	return self.Runtime.Environment_get_fog_light_energy(self)
}
func (self Environment) SetFogSunScatter(sun_scatter Float) {
	self.Runtime.Environment_set_fog_sun_scatter(self, sun_scatter)
}
func (self Environment) GetFogSunScatter() Float {
	return self.Runtime.Environment_get_fog_sun_scatter(self)
}
func (self Environment) SetFogDensity(density Float) {
	self.Runtime.Environment_set_fog_density(self, density)
}
func (self Environment) GetFogDensity() Float {
	return self.Runtime.Environment_get_fog_density(self)
}
func (self Environment) SetFogHeight(height Float) {
	self.Runtime.Environment_set_fog_height(self, height)
}
func (self Environment) GetFogHeight() Float {
	return self.Runtime.Environment_get_fog_height(self)
}
func (self Environment) SetFogHeightDensity(height_density Float) {
	self.Runtime.Environment_set_fog_height_density(self, height_density)
}
func (self Environment) GetFogHeightDensity() Float {
	return self.Runtime.Environment_get_fog_height_density(self)
}
func (self Environment) SetFogAerialPerspective(aerial_perspective Float) {
	self.Runtime.Environment_set_fog_aerial_perspective(self, aerial_perspective)
}
func (self Environment) GetFogAerialPerspective() Float {
	return self.Runtime.Environment_get_fog_aerial_perspective(self)
}
func (self Environment) SetFogSkyAffect(sky_affect Float) {
	self.Runtime.Environment_set_fog_sky_affect(self, sky_affect)
}
func (self Environment) GetFogSkyAffect() Float {
	return self.Runtime.Environment_get_fog_sky_affect(self)
}
func (self Environment) SetVolumetricFogEnabled(enabled bool) {
	self.Runtime.Environment_set_volumetric_fog_enabled(self, enabled)
}
func (self Environment) IsVolumetricFogEnabled() bool {
	return self.Runtime.Environment_is_volumetric_fog_enabled(self)
}
func (self Environment) SetVolumetricFogEmission(color Color) {
	self.Runtime.Environment_set_volumetric_fog_emission(self, color)
}
func (self Environment) GetVolumetricFogEmission() Color {
	return self.Runtime.Environment_get_volumetric_fog_emission(self)
}
func (self Environment) SetVolumetricFogAlbedo(color Color) {
	self.Runtime.Environment_set_volumetric_fog_albedo(self, color)
}
func (self Environment) GetVolumetricFogAlbedo() Color {
	return self.Runtime.Environment_get_volumetric_fog_albedo(self)
}
func (self Environment) SetVolumetricFogDensity(density Float) {
	self.Runtime.Environment_set_volumetric_fog_density(self, density)
}
func (self Environment) GetVolumetricFogDensity() Float {
	return self.Runtime.Environment_get_volumetric_fog_density(self)
}
func (self Environment) SetVolumetricFogEmissionEnergy(begin Float) {
	self.Runtime.Environment_set_volumetric_fog_emission_energy(self, begin)
}
func (self Environment) GetVolumetricFogEmissionEnergy() Float {
	return self.Runtime.Environment_get_volumetric_fog_emission_energy(self)
}
func (self Environment) SetVolumetricFogAnisotropy(anisotropy Float) {
	self.Runtime.Environment_set_volumetric_fog_anisotropy(self, anisotropy)
}
func (self Environment) GetVolumetricFogAnisotropy() Float {
	return self.Runtime.Environment_get_volumetric_fog_anisotropy(self)
}
func (self Environment) SetVolumetricFogLength(length Float) {
	self.Runtime.Environment_set_volumetric_fog_length(self, length)
}
func (self Environment) GetVolumetricFogLength() Float {
	return self.Runtime.Environment_get_volumetric_fog_length(self)
}
func (self Environment) SetVolumetricFogDetailSpread(detail_spread Float) {
	self.Runtime.Environment_set_volumetric_fog_detail_spread(self, detail_spread)
}
func (self Environment) GetVolumetricFogDetailSpread() Float {
	return self.Runtime.Environment_get_volumetric_fog_detail_spread(self)
}
func (self Environment) SetVolumetricFogGiInject(gi_inject Float) {
	self.Runtime.Environment_set_volumetric_fog_gi_inject(self, gi_inject)
}
func (self Environment) GetVolumetricFogGiInject() Float {
	return self.Runtime.Environment_get_volumetric_fog_gi_inject(self)
}
func (self Environment) SetVolumetricFogAmbientInject(enabled Float) {
	self.Runtime.Environment_set_volumetric_fog_ambient_inject(self, enabled)
}
func (self Environment) GetVolumetricFogAmbientInject() Float {
	return self.Runtime.Environment_get_volumetric_fog_ambient_inject(self)
}
func (self Environment) SetVolumetricFogSkyAffect(sky_affect Float) {
	self.Runtime.Environment_set_volumetric_fog_sky_affect(self, sky_affect)
}
func (self Environment) GetVolumetricFogSkyAffect() Float {
	return self.Runtime.Environment_get_volumetric_fog_sky_affect(self)
}
func (self Environment) SetVolumetricFogTemporalReprojectionEnabled(enabled bool) {
	self.Runtime.Environment_set_volumetric_fog_temporal_reprojection_enabled(self, enabled)
}
func (self Environment) IsVolumetricFogTemporalReprojectionEnabled() bool {
	return self.Runtime.Environment_is_volumetric_fog_temporal_reprojection_enabled(self)
}
func (self Environment) SetVolumetricFogTemporalReprojectionAmount(temporal_reprojection_amount Float) {
	self.Runtime.Environment_set_volumetric_fog_temporal_reprojection_amount(self, temporal_reprojection_amount)
}
func (self Environment) GetVolumetricFogTemporalReprojectionAmount() Float {
	return self.Runtime.Environment_get_volumetric_fog_temporal_reprojection_amount(self)
}
func (self Environment) SetAdjustmentEnabled(enabled bool) {
	self.Runtime.Environment_set_adjustment_enabled(self, enabled)
}
func (self Environment) IsAdjustmentEnabled() bool {
	return self.Runtime.Environment_is_adjustment_enabled(self)
}
func (self Environment) SetAdjustmentBrightness(brightness Float) {
	self.Runtime.Environment_set_adjustment_brightness(self, brightness)
}
func (self Environment) GetAdjustmentBrightness() Float {
	return self.Runtime.Environment_get_adjustment_brightness(self)
}
func (self Environment) SetAdjustmentContrast(contrast Float) {
	self.Runtime.Environment_set_adjustment_contrast(self, contrast)
}
func (self Environment) GetAdjustmentContrast() Float {
	return self.Runtime.Environment_get_adjustment_contrast(self)
}
func (self Environment) SetAdjustmentSaturation(saturation Float) {
	self.Runtime.Environment_set_adjustment_saturation(self, saturation)
}
func (self Environment) GetAdjustmentSaturation() Float {
	return self.Runtime.Environment_get_adjustment_saturation(self)
}
func (self Environment) SetAdjustmentColorCorrection(color_correction Texture) {
	self.Runtime.Environment_set_adjustment_color_correction(self, color_correction)
}
func (self Environment) GetAdjustmentColorCorrection() Texture {
	return self.Runtime.Environment_get_adjustment_color_correction(self)
}

type extendsExpression struct {
	_ [0]*extendsExpression
	class
}

func (self Expression) RefCounted() RefCounted {
	var parent RefCounted
	parent.class = self.class
	return parent
}
func (self Expression) Parse(expression string, input_names PackedStringArray) int64 {
	return self.Runtime.Expression_parse(self, expression, input_names)
}
func (self Expression) Execute(inputs Array, base_instance Object, show_error bool, const_calls_only bool) any {
	return self.Runtime.Expression_execute(self, inputs, base_instance, show_error, const_calls_only)
}
func (self Expression) HasExecuteFailed() bool {
	return self.Runtime.Expression_has_execute_failed(self)
}
func (self Expression) GetErrorText() string {
	return self.Runtime.Expression_get_error_text(self)
}

type extendsFastNoiseLite struct {
	_ [0]*extendsFastNoiseLite
	class
}

func (self FastNoiseLite) Noise() Noise { var parent Noise; parent.class = self.class; return parent }
func (self FastNoiseLite) SetNoiseType(atype FastNoiseLiteNoiseType) {
	self.Runtime.FastNoiseLite_set_noise_type(self, atype)
}
func (self FastNoiseLite) GetNoiseType() FastNoiseLiteNoiseType {
	return self.Runtime.FastNoiseLite_get_noise_type(self)
}
func (self FastNoiseLite) SetSeed(seed int64) {
	self.Runtime.FastNoiseLite_set_seed(self, seed)
}
func (self FastNoiseLite) GetSeed() int64 {
	return self.Runtime.FastNoiseLite_get_seed(self)
}
func (self FastNoiseLite) SetFrequency(freq Float) {
	self.Runtime.FastNoiseLite_set_frequency(self, freq)
}
func (self FastNoiseLite) GetFrequency() Float {
	return self.Runtime.FastNoiseLite_get_frequency(self)
}
func (self FastNoiseLite) SetOffset(offset Vector3) {
	self.Runtime.FastNoiseLite_set_offset(self, offset)
}
func (self FastNoiseLite) GetOffset() Vector3 {
	return self.Runtime.FastNoiseLite_get_offset(self)
}
func (self FastNoiseLite) SetFractalType(atype FastNoiseLiteFractalType) {
	self.Runtime.FastNoiseLite_set_fractal_type(self, atype)
}
func (self FastNoiseLite) GetFractalType() FastNoiseLiteFractalType {
	return self.Runtime.FastNoiseLite_get_fractal_type(self)
}
func (self FastNoiseLite) SetFractalOctaves(octave_count int64) {
	self.Runtime.FastNoiseLite_set_fractal_octaves(self, octave_count)
}
func (self FastNoiseLite) GetFractalOctaves() int64 {
	return self.Runtime.FastNoiseLite_get_fractal_octaves(self)
}
func (self FastNoiseLite) SetFractalLacunarity(lacunarity Float) {
	self.Runtime.FastNoiseLite_set_fractal_lacunarity(self, lacunarity)
}
func (self FastNoiseLite) GetFractalLacunarity() Float {
	return self.Runtime.FastNoiseLite_get_fractal_lacunarity(self)
}
func (self FastNoiseLite) SetFractalGain(gain Float) {
	self.Runtime.FastNoiseLite_set_fractal_gain(self, gain)
}
func (self FastNoiseLite) GetFractalGain() Float {
	return self.Runtime.FastNoiseLite_get_fractal_gain(self)
}
func (self FastNoiseLite) SetFractalWeightedStrength(weighted_strength Float) {
	self.Runtime.FastNoiseLite_set_fractal_weighted_strength(self, weighted_strength)
}
func (self FastNoiseLite) GetFractalWeightedStrength() Float {
	return self.Runtime.FastNoiseLite_get_fractal_weighted_strength(self)
}
func (self FastNoiseLite) SetFractalPingPongStrength(ping_pong_strength Float) {
	self.Runtime.FastNoiseLite_set_fractal_ping_pong_strength(self, ping_pong_strength)
}
func (self FastNoiseLite) GetFractalPingPongStrength() Float {
	return self.Runtime.FastNoiseLite_get_fractal_ping_pong_strength(self)
}
func (self FastNoiseLite) SetCellularDistanceFunction(fn FastNoiseLiteCellularDistanceFunction) {
	self.Runtime.FastNoiseLite_set_cellular_distance_function(self, fn)
}
func (self FastNoiseLite) GetCellularDistanceFunction() FastNoiseLiteCellularDistanceFunction {
	return self.Runtime.FastNoiseLite_get_cellular_distance_function(self)
}
func (self FastNoiseLite) SetCellularJitter(jitter Float) {
	self.Runtime.FastNoiseLite_set_cellular_jitter(self, jitter)
}
func (self FastNoiseLite) GetCellularJitter() Float {
	return self.Runtime.FastNoiseLite_get_cellular_jitter(self)
}
func (self FastNoiseLite) SetCellularReturnType(ret FastNoiseLiteCellularReturnType) {
	self.Runtime.FastNoiseLite_set_cellular_return_type(self, ret)
}
func (self FastNoiseLite) GetCellularReturnType() FastNoiseLiteCellularReturnType {
	return self.Runtime.FastNoiseLite_get_cellular_return_type(self)
}
func (self FastNoiseLite) SetDomainWarpEnabled(domain_warp_enabled bool) {
	self.Runtime.FastNoiseLite_set_domain_warp_enabled(self, domain_warp_enabled)
}
func (self FastNoiseLite) IsDomainWarpEnabled() bool {
	return self.Runtime.FastNoiseLite_is_domain_warp_enabled(self)
}
func (self FastNoiseLite) SetDomainWarpType(domain_warp_type FastNoiseLiteDomainWarpType) {
	self.Runtime.FastNoiseLite_set_domain_warp_type(self, domain_warp_type)
}
func (self FastNoiseLite) GetDomainWarpType() FastNoiseLiteDomainWarpType {
	return self.Runtime.FastNoiseLite_get_domain_warp_type(self)
}
func (self FastNoiseLite) SetDomainWarpAmplitude(domain_warp_amplitude Float) {
	self.Runtime.FastNoiseLite_set_domain_warp_amplitude(self, domain_warp_amplitude)
}
func (self FastNoiseLite) GetDomainWarpAmplitude() Float {
	return self.Runtime.FastNoiseLite_get_domain_warp_amplitude(self)
}
func (self FastNoiseLite) SetDomainWarpFrequency(domain_warp_frequency Float) {
	self.Runtime.FastNoiseLite_set_domain_warp_frequency(self, domain_warp_frequency)
}
func (self FastNoiseLite) GetDomainWarpFrequency() Float {
	return self.Runtime.FastNoiseLite_get_domain_warp_frequency(self)
}
func (self FastNoiseLite) SetDomainWarpFractalType(domain_warp_fractal_type FastNoiseLiteDomainWarpFractalType) {
	self.Runtime.FastNoiseLite_set_domain_warp_fractal_type(self, domain_warp_fractal_type)
}
func (self FastNoiseLite) GetDomainWarpFractalType() FastNoiseLiteDomainWarpFractalType {
	return self.Runtime.FastNoiseLite_get_domain_warp_fractal_type(self)
}
func (self FastNoiseLite) SetDomainWarpFractalOctaves(domain_warp_octave_count int64) {
	self.Runtime.FastNoiseLite_set_domain_warp_fractal_octaves(self, domain_warp_octave_count)
}
func (self FastNoiseLite) GetDomainWarpFractalOctaves() int64 {
	return self.Runtime.FastNoiseLite_get_domain_warp_fractal_octaves(self)
}
func (self FastNoiseLite) SetDomainWarpFractalLacunarity(domain_warp_lacunarity Float) {
	self.Runtime.FastNoiseLite_set_domain_warp_fractal_lacunarity(self, domain_warp_lacunarity)
}
func (self FastNoiseLite) GetDomainWarpFractalLacunarity() Float {
	return self.Runtime.FastNoiseLite_get_domain_warp_fractal_lacunarity(self)
}
func (self FastNoiseLite) SetDomainWarpFractalGain(domain_warp_gain Float) {
	self.Runtime.FastNoiseLite_set_domain_warp_fractal_gain(self, domain_warp_gain)
}
func (self FastNoiseLite) GetDomainWarpFractalGain() Float {
	return self.Runtime.FastNoiseLite_get_domain_warp_fractal_gain(self)
}

type extendsFileAccess struct {
	_ [0]*extendsFileAccess
	class
}

func (self FileAccess) RefCounted() RefCounted {
	var parent RefCounted
	parent.class = self.class
	return parent
}
func (self FileAccess) Open(path string, flags FileAccessModeFlags) FileAccess {
	return self.Runtime.FileAccess_open(self, path, flags)
}
func (self FileAccess) OpenEncrypted(path string, mode_flags FileAccessModeFlags, key PackedByteArray) FileAccess {
	return self.Runtime.FileAccess_open_encrypted(self, path, mode_flags, key)
}
func (self FileAccess) OpenEncryptedWithPass(path string, mode_flags FileAccessModeFlags, pass string) FileAccess {
	return self.Runtime.FileAccess_open_encrypted_with_pass(self, path, mode_flags, pass)
}
func (self FileAccess) OpenCompressed(path string, mode_flags FileAccessModeFlags, compression_mode FileAccessCompressionMode) FileAccess {
	return self.Runtime.FileAccess_open_compressed(self, path, mode_flags, compression_mode)
}
func (self FileAccess) GetOpenError() int64 {
	return self.Runtime.FileAccess_get_open_error(self)
}
func (self FileAccess) GetFileAsBytes(path string) PackedByteArray {
	return self.Runtime.FileAccess_get_file_as_bytes(self, path)
}
func (self FileAccess) GetFileAsString(path string) string {
	return self.Runtime.FileAccess_get_file_as_string(self, path)
}
func (self FileAccess) Flush() {
	self.Runtime.FileAccess_flush(self)
}
func (self FileAccess) GetPath() string {
	return self.Runtime.FileAccess_get_path(self)
}
func (self FileAccess) GetPathAbsolute() string {
	return self.Runtime.FileAccess_get_path_absolute(self)
}
func (self FileAccess) IsOpen() bool {
	return self.Runtime.FileAccess_is_open(self)
}
func (self FileAccess) SeekTo(position int64) {
	self.Runtime.FileAccess_seek(self, position)
}
func (self FileAccess) SeekEnd(position int64) {
	self.Runtime.FileAccess_seek_end(self, position)
}
func (self FileAccess) GetPosition() int64 {
	return self.Runtime.FileAccess_get_position(self)
}
func (self FileAccess) GetLength() int64 {
	return self.Runtime.FileAccess_get_length(self)
}
func (self FileAccess) EofReached() bool {
	return self.Runtime.FileAccess_eof_reached(self)
}
func (self FileAccess) Get8() int64 {
	return self.Runtime.FileAccess_get_8(self)
}
func (self FileAccess) Get16() int64 {
	return self.Runtime.FileAccess_get_16(self)
}
func (self FileAccess) Get32() int64 {
	return self.Runtime.FileAccess_get_32(self)
}
func (self FileAccess) Get64() int64 {
	return self.Runtime.FileAccess_get_64(self)
}
func (self FileAccess) GetFloat() Float {
	return self.Runtime.FileAccess_get_float(self)
}
func (self FileAccess) GetDouble() Float {
	return self.Runtime.FileAccess_get_double(self)
}
func (self FileAccess) GetReal() Float {
	return self.Runtime.FileAccess_get_real(self)
}
func (self FileAccess) GetBuffer(length int64) PackedByteArray {
	return self.Runtime.FileAccess_get_buffer(self, length)
}
func (self FileAccess) GetLine() string {
	return self.Runtime.FileAccess_get_line(self)
}
func (self FileAccess) GetCsvLine(delim string) PackedStringArray {
	return self.Runtime.FileAccess_get_csv_line(self, delim)
}
func (self FileAccess) GetAsText(skip_cr bool) string {
	return self.Runtime.FileAccess_get_as_text(self, skip_cr)
}
func (self FileAccess) GetMd5(path string) string {
	return self.Runtime.FileAccess_get_md5(self, path)
}
func (self FileAccess) GetSha256(path string) string {
	return self.Runtime.FileAccess_get_sha256(self, path)
}
func (self FileAccess) IsBigEndian() bool {
	return self.Runtime.FileAccess_is_big_endian(self)
}
func (self FileAccess) SetBigEndian(big_endian bool) {
	self.Runtime.FileAccess_set_big_endian(self, big_endian)
}
func (self FileAccess) GetError() int64 {
	return self.Runtime.FileAccess_get_error(self)
}
func (self FileAccess) GetVar(allow_objects bool) any {
	return self.Runtime.FileAccess_get_var(self, allow_objects)
}
func (self FileAccess) Store8(value int64) {
	self.Runtime.FileAccess_store_8(self, value)
}
func (self FileAccess) Store16(value int64) {
	self.Runtime.FileAccess_store_16(self, value)
}
func (self FileAccess) Store32(value int64) {
	self.Runtime.FileAccess_store_32(self, value)
}
func (self FileAccess) Store64(value int64) {
	self.Runtime.FileAccess_store_64(self, value)
}
func (self FileAccess) StoreFloat(value Float) {
	self.Runtime.FileAccess_store_float(self, value)
}
func (self FileAccess) StoreDouble(value Float) {
	self.Runtime.FileAccess_store_double(self, value)
}
func (self FileAccess) StoreReal(value Float) {
	self.Runtime.FileAccess_store_real(self, value)
}
func (self FileAccess) StoreBuffer(buffer PackedByteArray) {
	self.Runtime.FileAccess_store_buffer(self, buffer)
}
func (self FileAccess) StoreLine(line string) {
	self.Runtime.FileAccess_store_line(self, line)
}
func (self FileAccess) StoreCsvLine(values PackedStringArray, delim string) {
	self.Runtime.FileAccess_store_csv_line(self, values, delim)
}
func (self FileAccess) StoreString(s string) {
	self.Runtime.FileAccess_store_string(self, s)
}
func (self FileAccess) StoreVar(value any, full_objects bool) {
	self.Runtime.FileAccess_store_var(self, value, full_objects)
}
func (self FileAccess) StorePascalString(s string) {
	self.Runtime.FileAccess_store_pascal_string(self, s)
}
func (self FileAccess) GetPascalString() string {
	return self.Runtime.FileAccess_get_pascal_string(self)
}
func (self FileAccess) Close() {
	self.Runtime.FileAccess_close(self)
}
func (self FileAccess) FileExists(path string) bool {
	return self.Runtime.FileAccess_file_exists(self, path)
}
func (self FileAccess) GetModifiedTime(file string) int64 {
	return self.Runtime.FileAccess_get_modified_time(self, file)
}
func (self FileAccess) GetUnixPermissions(file string) FileAccessUnixPermissionFlags {
	return self.Runtime.FileAccess_get_unix_permissions(self, file)
}
func (self FileAccess) SetUnixPermissions(file string, permissions FileAccessUnixPermissionFlags) int64 {
	return self.Runtime.FileAccess_set_unix_permissions(self, file, permissions)
}
func (self FileAccess) GetHiddenAttribute(file string) bool {
	return self.Runtime.FileAccess_get_hidden_attribute(self, file)
}
func (self FileAccess) SetHiddenAttribute(file string, hidden bool) int64 {
	return self.Runtime.FileAccess_set_hidden_attribute(self, file, hidden)
}
func (self FileAccess) SetReadOnlyAttribute(file string, ro bool) int64 {
	return self.Runtime.FileAccess_set_read_only_attribute(self, file, ro)
}
func (self FileAccess) GetReadOnlyAttribute(file string) bool {
	return self.Runtime.FileAccess_get_read_only_attribute(self, file)
}

type extendsFileDialog struct {
	_ [0]*extendsFileDialog
	class
}

func (self FileDialog) ConfirmationDialog() ConfirmationDialog {
	var parent ConfirmationDialog
	parent.class = self.class
	return parent
}
func (self FileDialog) ClearFilters() {
	self.Runtime.FileDialog_clear_filters(self)
}
func (self FileDialog) AddFilter(filter string, description string) {
	self.Runtime.FileDialog_add_filter(self, filter, description)
}
func (self FileDialog) SetFilters(filters PackedStringArray) {
	self.Runtime.FileDialog_set_filters(self, filters)
}
func (self FileDialog) GetFilters() PackedStringArray {
	return self.Runtime.FileDialog_get_filters(self)
}
func (self FileDialog) GetCurrentDir() string {
	return self.Runtime.FileDialog_get_current_dir(self)
}
func (self FileDialog) GetCurrentFile() string {
	return self.Runtime.FileDialog_get_current_file(self)
}
func (self FileDialog) GetCurrentPath() string {
	return self.Runtime.FileDialog_get_current_path(self)
}
func (self FileDialog) SetCurrentDir(dir string) {
	self.Runtime.FileDialog_set_current_dir(self, dir)
}
func (self FileDialog) SetCurrentFile(file string) {
	self.Runtime.FileDialog_set_current_file(self, file)
}
func (self FileDialog) SetCurrentPath(path string) {
	self.Runtime.FileDialog_set_current_path(self, path)
}
func (self FileDialog) SetModeOverridesTitle(override bool) {
	self.Runtime.FileDialog_set_mode_overrides_title(self, override)
}
func (self FileDialog) IsModeOverridingTitle() bool {
	return self.Runtime.FileDialog_is_mode_overriding_title(self)
}
func (self FileDialog) SetFileMode(mode FileDialogFileMode) {
	self.Runtime.FileDialog_set_file_mode(self, mode)
}
func (self FileDialog) GetFileMode() FileDialogFileMode {
	return self.Runtime.FileDialog_get_file_mode(self)
}
func (self FileDialog) GetVbox() VBoxContainer {
	return self.Runtime.FileDialog_get_vbox(self)
}
func (self FileDialog) GetLineEdit() LineEdit {
	return self.Runtime.FileDialog_get_line_edit(self)
}
func (self FileDialog) SetAccess(access FileDialogAccess) {
	self.Runtime.FileDialog_set_access(self, access)
}
func (self FileDialog) GetAccess() FileDialogAccess {
	return self.Runtime.FileDialog_get_access(self)
}
func (self FileDialog) SetRootSubfolder(dir string) {
	self.Runtime.FileDialog_set_root_subfolder(self, dir)
}
func (self FileDialog) GetRootSubfolder() string {
	return self.Runtime.FileDialog_get_root_subfolder(self)
}
func (self FileDialog) SetShowHiddenFiles(show bool) {
	self.Runtime.FileDialog_set_show_hidden_files(self, show)
}
func (self FileDialog) IsShowingHiddenFiles() bool {
	return self.Runtime.FileDialog_is_showing_hidden_files(self)
}
func (self FileDialog) SetUseNativeDialog(native bool) {
	self.Runtime.FileDialog_set_use_native_dialog(self, native)
}
func (self FileDialog) GetUseNativeDialog() bool {
	return self.Runtime.FileDialog_get_use_native_dialog(self)
}
func (self FileDialog) DeselectAll() {
	self.Runtime.FileDialog_deselect_all(self)
}
func (self FileDialog) Invalidate() {
	self.Runtime.FileDialog_invalidate(self)
}

type extendsFileSystemDock struct {
	_ [0]*extendsFileSystemDock
	class
}

func (self FileSystemDock) VBoxContainer() VBoxContainer {
	var parent VBoxContainer
	parent.class = self.class
	return parent
}
func (self FileSystemDock) NavigateToPath(path string) {
	self.Runtime.FileSystemDock_navigate_to_path(self, path)
}
func (self FileSystemDock) AddResourceTooltipPlugin(plugin EditorResourceTooltipPlugin) {
	self.Runtime.FileSystemDock_add_resource_tooltip_plugin(self, plugin)
}
func (self FileSystemDock) RemoveResourceTooltipPlugin(plugin EditorResourceTooltipPlugin) {
	self.Runtime.FileSystemDock_remove_resource_tooltip_plugin(self, plugin)
}

type extendsFlowContainer struct {
	_ [0]*extendsFlowContainer
	class
}

func (self FlowContainer) Container() Container {
	var parent Container
	parent.class = self.class
	return parent
}
func (self FlowContainer) GetLineCount() int64 {
	return self.Runtime.FlowContainer_get_line_count(self)
}
func (self FlowContainer) SetAlignment(alignment FlowContainerAlignmentMode) {
	self.Runtime.FlowContainer_set_alignment(self, alignment)
}
func (self FlowContainer) GetAlignment() FlowContainerAlignmentMode {
	return self.Runtime.FlowContainer_get_alignment(self)
}
func (self FlowContainer) SetVertical(vertical bool) {
	self.Runtime.FlowContainer_set_vertical(self, vertical)
}
func (self FlowContainer) IsVertical() bool {
	return self.Runtime.FlowContainer_is_vertical(self)
}

type extendsFogMaterial struct {
	_ [0]*extendsFogMaterial
	class
}

func (self FogMaterial) Material() Material {
	var parent Material
	parent.class = self.class
	return parent
}
func (self FogMaterial) SetDensity(density Float) {
	self.Runtime.FogMaterial_set_density(self, density)
}
func (self FogMaterial) GetDensity() Float {
	return self.Runtime.FogMaterial_get_density(self)
}
func (self FogMaterial) SetAlbedo(albedo Color) {
	self.Runtime.FogMaterial_set_albedo(self, albedo)
}
func (self FogMaterial) GetAlbedo() Color {
	return self.Runtime.FogMaterial_get_albedo(self)
}
func (self FogMaterial) SetEmission(emission Color) {
	self.Runtime.FogMaterial_set_emission(self, emission)
}
func (self FogMaterial) GetEmission() Color {
	return self.Runtime.FogMaterial_get_emission(self)
}
func (self FogMaterial) SetHeightFalloff(height_falloff Float) {
	self.Runtime.FogMaterial_set_height_falloff(self, height_falloff)
}
func (self FogMaterial) GetHeightFalloff() Float {
	return self.Runtime.FogMaterial_get_height_falloff(self)
}
func (self FogMaterial) SetEdgeFade(edge_fade Float) {
	self.Runtime.FogMaterial_set_edge_fade(self, edge_fade)
}
func (self FogMaterial) GetEdgeFade() Float {
	return self.Runtime.FogMaterial_get_edge_fade(self)
}
func (self FogMaterial) SetDensityTexture(density_texture Texture3D) {
	self.Runtime.FogMaterial_set_density_texture(self, density_texture)
}
func (self FogMaterial) GetDensityTexture() Texture3D {
	return self.Runtime.FogMaterial_get_density_texture(self)
}

type extendsFogVolume struct {
	_ [0]*extendsFogVolume
	class
}

func (self FogVolume) VisualInstance3D() VisualInstance3D {
	var parent VisualInstance3D
	parent.class = self.class
	return parent
}
func (self FogVolume) SetSize(size Vector3) {
	self.Runtime.FogVolume_set_size(self, size)
}
func (self FogVolume) GetSize() Vector3 {
	return self.Runtime.FogVolume_get_size(self)
}
func (self FogVolume) SetShape(shape RenderingServerFogVolumeShape) {
	self.Runtime.FogVolume_set_shape(self, shape)
}
func (self FogVolume) GetShape() RenderingServerFogVolumeShape {
	return self.Runtime.FogVolume_get_shape(self)
}
func (self FogVolume) SetMaterial(material Material) {
	self.Runtime.FogVolume_set_material(self, material)
}
func (self FogVolume) GetMaterial() Material {
	return self.Runtime.FogVolume_get_material(self)
}

type extendsFont struct {
	_ [0]*extendsFont
	class
}

func (self Font) Resource() Resource { var parent Resource; parent.class = self.class; return parent }
func (self Font) SetFallbacks(fallbacks ArrayOf[Font]) {
	self.Runtime.Font_set_fallbacks(self, fallbacks)
}
func (self Font) GetFallbacks() ArrayOf[Font] {
	return self.Runtime.Font_get_fallbacks(self)
}
func (self Font) FindVariation(variation_coordinates Dictionary, face_index int64, strength Float, transform Transform2D, spacing_top int64, spacing_bottom int64, spacing_space int64, spacing_glyph int64) RID {
	return self.Runtime.Font_find_variation(self, variation_coordinates, face_index, strength, transform, spacing_top, spacing_bottom, spacing_space, spacing_glyph)
}
func (self Font) GetRids() ArrayOf[RID] {
	return self.Runtime.Font_get_rids(self)
}
func (self Font) GetHeight(font_size int64) Float {
	return self.Runtime.Font_get_height(self, font_size)
}
func (self Font) GetAscent(font_size int64) Float {
	return self.Runtime.Font_get_ascent(self, font_size)
}
func (self Font) GetDescent(font_size int64) Float {
	return self.Runtime.Font_get_descent(self, font_size)
}
func (self Font) GetUnderlinePosition(font_size int64) Float {
	return self.Runtime.Font_get_underline_position(self, font_size)
}
func (self Font) GetUnderlineThickness(font_size int64) Float {
	return self.Runtime.Font_get_underline_thickness(self, font_size)
}
func (self Font) GetFontName() string {
	return self.Runtime.Font_get_font_name(self)
}
func (self Font) GetFontStyleName() string {
	return self.Runtime.Font_get_font_style_name(self)
}
func (self Font) GetOtNameStrings() Dictionary {
	return self.Runtime.Font_get_ot_name_strings(self)
}
func (self Font) GetFontStyle() TextServerFontStyle {
	return self.Runtime.Font_get_font_style(self)
}
func (self Font) GetFontWeight() int64 {
	return self.Runtime.Font_get_font_weight(self)
}
func (self Font) GetFontStretch() int64 {
	return self.Runtime.Font_get_font_stretch(self)
}
func (self Font) GetSpacing(spacing TextServerSpacingType) int64 {
	return self.Runtime.Font_get_spacing(self, spacing)
}
func (self Font) GetOpentypeFeatures() Dictionary {
	return self.Runtime.Font_get_opentype_features(self)
}
func (self Font) SetCacheCapacity(single_line int64, multi_line int64) {
	self.Runtime.Font_set_cache_capacity(self, single_line, multi_line)
}
func (self Font) GetStringSize(text string, alignment HorizontalAlignment, width Float, font_size int64, justification_flags TextServerJustificationFlag, direction TextServerDirection, orientation TextServerOrientation) Vector2 {
	return self.Runtime.Font_get_string_size(self, text, alignment, width, font_size, justification_flags, direction, orientation)
}
func (self Font) GetMultilineStringSize(text string, alignment HorizontalAlignment, width Float, font_size int64, max_lines int64, brk_flags TextServerLineBreakFlag, justification_flags TextServerJustificationFlag, direction TextServerDirection, orientation TextServerOrientation) Vector2 {
	return self.Runtime.Font_get_multiline_string_size(self, text, alignment, width, font_size, max_lines, brk_flags, justification_flags, direction, orientation)
}
func (self Font) DrawString(canvas_item RID, pos Vector2, text string, alignment HorizontalAlignment, width Float, font_size int64, modulate Color, justification_flags TextServerJustificationFlag, direction TextServerDirection, orientation TextServerOrientation) {
	self.Runtime.Font_draw_string(self, canvas_item, pos, text, alignment, width, font_size, modulate, justification_flags, direction, orientation)
}
func (self Font) DrawMultilineString(canvas_item RID, pos Vector2, text string, alignment HorizontalAlignment, width Float, font_size int64, max_lines int64, modulate Color, brk_flags TextServerLineBreakFlag, justification_flags TextServerJustificationFlag, direction TextServerDirection, orientation TextServerOrientation) {
	self.Runtime.Font_draw_multiline_string(self, canvas_item, pos, text, alignment, width, font_size, max_lines, modulate, brk_flags, justification_flags, direction, orientation)
}
func (self Font) DrawStringOutline(canvas_item RID, pos Vector2, text string, alignment HorizontalAlignment, width Float, font_size int64, size int64, modulate Color, justification_flags TextServerJustificationFlag, direction TextServerDirection, orientation TextServerOrientation) {
	self.Runtime.Font_draw_string_outline(self, canvas_item, pos, text, alignment, width, font_size, size, modulate, justification_flags, direction, orientation)
}
func (self Font) DrawMultilineStringOutline(canvas_item RID, pos Vector2, text string, alignment HorizontalAlignment, width Float, font_size int64, max_lines int64, size int64, modulate Color, brk_flags TextServerLineBreakFlag, justification_flags TextServerJustificationFlag, direction TextServerDirection, orientation TextServerOrientation) {
	self.Runtime.Font_draw_multiline_string_outline(self, canvas_item, pos, text, alignment, width, font_size, max_lines, size, modulate, brk_flags, justification_flags, direction, orientation)
}
func (self Font) GetCharSize(char int64, font_size int64) Vector2 {
	return self.Runtime.Font_get_char_size(self, char, font_size)
}
func (self Font) DrawChar(canvas_item RID, pos Vector2, char int64, font_size int64, modulate Color) Float {
	return self.Runtime.Font_draw_char(self, canvas_item, pos, char, font_size, modulate)
}
func (self Font) DrawCharOutline(canvas_item RID, pos Vector2, char int64, font_size int64, size int64, modulate Color) Float {
	return self.Runtime.Font_draw_char_outline(self, canvas_item, pos, char, font_size, size, modulate)
}
func (self Font) HasChar(char int64) bool {
	return self.Runtime.Font_has_char(self, char)
}
func (self Font) GetSupportedChars() string {
	return self.Runtime.Font_get_supported_chars(self)
}
func (self Font) IsLanguageSupported(language string) bool {
	return self.Runtime.Font_is_language_supported(self, language)
}
func (self Font) IsScriptSupported(script string) bool {
	return self.Runtime.Font_is_script_supported(self, script)
}
func (self Font) GetSupportedFeatureList() Dictionary {
	return self.Runtime.Font_get_supported_feature_list(self)
}
func (self Font) GetSupportedVariationList() Dictionary {
	return self.Runtime.Font_get_supported_variation_list(self)
}
func (self Font) GetFaceCount() int64 {
	return self.Runtime.Font_get_face_count(self)
}

type extendsFontFile struct {
	_ [0]*extendsFontFile
	class
}

func (self FontFile) Font() Font { var parent Font; parent.class = self.class; return parent }
func (self FontFile) LoadBitmapFont(path string) int64 {
	return self.Runtime.FontFile_load_bitmap_font(self, path)
}
func (self FontFile) LoadDynamicFont(path string) int64 {
	return self.Runtime.FontFile_load_dynamic_font(self, path)
}
func (self FontFile) SetData(data PackedByteArray) {
	self.Runtime.FontFile_set_data(self, data)
}
func (self FontFile) GetData() PackedByteArray {
	return self.Runtime.FontFile_get_data(self)
}
func (self FontFile) SetFontName(name string) {
	self.Runtime.FontFile_set_font_name(self, name)
}
func (self FontFile) SetFontStyleName(name string) {
	self.Runtime.FontFile_set_font_style_name(self, name)
}
func (self FontFile) SetFontStyle(style TextServerFontStyle) {
	self.Runtime.FontFile_set_font_style(self, style)
}
func (self FontFile) SetFontWeight(weight int64) {
	self.Runtime.FontFile_set_font_weight(self, weight)
}
func (self FontFile) SetFontStretch(stretch int64) {
	self.Runtime.FontFile_set_font_stretch(self, stretch)
}
func (self FontFile) SetAntialiasing(antialiasing TextServerFontAntialiasing) {
	self.Runtime.FontFile_set_antialiasing(self, antialiasing)
}
func (self FontFile) GetAntialiasing() TextServerFontAntialiasing {
	return self.Runtime.FontFile_get_antialiasing(self)
}
func (self FontFile) SetGenerateMipmaps(generate_mipmaps bool) {
	self.Runtime.FontFile_set_generate_mipmaps(self, generate_mipmaps)
}
func (self FontFile) GetGenerateMipmaps() bool {
	return self.Runtime.FontFile_get_generate_mipmaps(self)
}
func (self FontFile) SetMultichannelSignedDistanceField(msdf bool) {
	self.Runtime.FontFile_set_multichannel_signed_distance_field(self, msdf)
}
func (self FontFile) IsMultichannelSignedDistanceField() bool {
	return self.Runtime.FontFile_is_multichannel_signed_distance_field(self)
}
func (self FontFile) SetMsdfPixelRange(msdf_pixel_range int64) {
	self.Runtime.FontFile_set_msdf_pixel_range(self, msdf_pixel_range)
}
func (self FontFile) GetMsdfPixelRange() int64 {
	return self.Runtime.FontFile_get_msdf_pixel_range(self)
}
func (self FontFile) SetMsdfSize(msdf_size int64) {
	self.Runtime.FontFile_set_msdf_size(self, msdf_size)
}
func (self FontFile) GetMsdfSize() int64 {
	return self.Runtime.FontFile_get_msdf_size(self)
}
func (self FontFile) SetFixedSize(fixed_size int64) {
	self.Runtime.FontFile_set_fixed_size(self, fixed_size)
}
func (self FontFile) GetFixedSize() int64 {
	return self.Runtime.FontFile_get_fixed_size(self)
}
func (self FontFile) SetFixedSizeScaleMode(fixed_size_scale_mode TextServerFixedSizeScaleMode) {
	self.Runtime.FontFile_set_fixed_size_scale_mode(self, fixed_size_scale_mode)
}
func (self FontFile) GetFixedSizeScaleMode() TextServerFixedSizeScaleMode {
	return self.Runtime.FontFile_get_fixed_size_scale_mode(self)
}
func (self FontFile) SetAllowSystemFallback(allow_system_fallback bool) {
	self.Runtime.FontFile_set_allow_system_fallback(self, allow_system_fallback)
}
func (self FontFile) IsAllowSystemFallback() bool {
	return self.Runtime.FontFile_is_allow_system_fallback(self)
}
func (self FontFile) SetForceAutohinter(force_autohinter bool) {
	self.Runtime.FontFile_set_force_autohinter(self, force_autohinter)
}
func (self FontFile) IsForceAutohinter() bool {
	return self.Runtime.FontFile_is_force_autohinter(self)
}
func (self FontFile) SetHinting(hinting TextServerHinting) {
	self.Runtime.FontFile_set_hinting(self, hinting)
}
func (self FontFile) GetHinting() TextServerHinting {
	return self.Runtime.FontFile_get_hinting(self)
}
func (self FontFile) SetSubpixelPositioning(subpixel_positioning TextServerSubpixelPositioning) {
	self.Runtime.FontFile_set_subpixel_positioning(self, subpixel_positioning)
}
func (self FontFile) GetSubpixelPositioning() TextServerSubpixelPositioning {
	return self.Runtime.FontFile_get_subpixel_positioning(self)
}
func (self FontFile) SetOversampling(oversampling Float) {
	self.Runtime.FontFile_set_oversampling(self, oversampling)
}
func (self FontFile) GetOversampling() Float {
	return self.Runtime.FontFile_get_oversampling(self)
}
func (self FontFile) GetCacheCount() int64 {
	return self.Runtime.FontFile_get_cache_count(self)
}
func (self FontFile) ClearCache() {
	self.Runtime.FontFile_clear_cache(self)
}
func (self FontFile) RemoveCache(cache_index int64) {
	self.Runtime.FontFile_remove_cache(self, cache_index)
}
func (self FontFile) GetSizeCacheList(cache_index int64) ArrayOf[Vector2i] {
	return self.Runtime.FontFile_get_size_cache_list(self, cache_index)
}
func (self FontFile) ClearSizeCache(cache_index int64) {
	self.Runtime.FontFile_clear_size_cache(self, cache_index)
}
func (self FontFile) RemoveSizeCache(cache_index int64, size Vector2i) {
	self.Runtime.FontFile_remove_size_cache(self, cache_index, size)
}
func (self FontFile) SetVariationCoordinates(cache_index int64, variation_coordinates Dictionary) {
	self.Runtime.FontFile_set_variation_coordinates(self, cache_index, variation_coordinates)
}
func (self FontFile) GetVariationCoordinates(cache_index int64) Dictionary {
	return self.Runtime.FontFile_get_variation_coordinates(self, cache_index)
}
func (self FontFile) SetEmbolden(cache_index int64, strength Float) {
	self.Runtime.FontFile_set_embolden(self, cache_index, strength)
}
func (self FontFile) GetEmbolden(cache_index int64) Float {
	return self.Runtime.FontFile_get_embolden(self, cache_index)
}
func (self FontFile) SetTransform(cache_index int64, transform Transform2D) {
	self.Runtime.FontFile_set_transform(self, cache_index, transform)
}
func (self FontFile) GetTransform(cache_index int64) Transform2D {
	return self.Runtime.FontFile_get_transform(self, cache_index)
}
func (self FontFile) SetExtraSpacing(cache_index int64, spacing TextServerSpacingType, value int64) {
	self.Runtime.FontFile_set_extra_spacing(self, cache_index, spacing, value)
}
func (self FontFile) GetExtraSpacing(cache_index int64, spacing TextServerSpacingType) int64 {
	return self.Runtime.FontFile_get_extra_spacing(self, cache_index, spacing)
}
func (self FontFile) SetFaceIndex(cache_index int64, face_index int64) {
	self.Runtime.FontFile_set_face_index(self, cache_index, face_index)
}
func (self FontFile) GetFaceIndex(cache_index int64) int64 {
	return self.Runtime.FontFile_get_face_index(self, cache_index)
}
func (self FontFile) SetCacheAscent(cache_index int64, size int64, ascent Float) {
	self.Runtime.FontFile_set_cache_ascent(self, cache_index, size, ascent)
}
func (self FontFile) GetCacheAscent(cache_index int64, size int64) Float {
	return self.Runtime.FontFile_get_cache_ascent(self, cache_index, size)
}
func (self FontFile) SetCacheDescent(cache_index int64, size int64, descent Float) {
	self.Runtime.FontFile_set_cache_descent(self, cache_index, size, descent)
}
func (self FontFile) GetCacheDescent(cache_index int64, size int64) Float {
	return self.Runtime.FontFile_get_cache_descent(self, cache_index, size)
}
func (self FontFile) SetCacheUnderlinePosition(cache_index int64, size int64, underline_position Float) {
	self.Runtime.FontFile_set_cache_underline_position(self, cache_index, size, underline_position)
}
func (self FontFile) GetCacheUnderlinePosition(cache_index int64, size int64) Float {
	return self.Runtime.FontFile_get_cache_underline_position(self, cache_index, size)
}
func (self FontFile) SetCacheUnderlineThickness(cache_index int64, size int64, underline_thickness Float) {
	self.Runtime.FontFile_set_cache_underline_thickness(self, cache_index, size, underline_thickness)
}
func (self FontFile) GetCacheUnderlineThickness(cache_index int64, size int64) Float {
	return self.Runtime.FontFile_get_cache_underline_thickness(self, cache_index, size)
}
func (self FontFile) SetCacheScale(cache_index int64, size int64, scale Float) {
	self.Runtime.FontFile_set_cache_scale(self, cache_index, size, scale)
}
func (self FontFile) GetCacheScale(cache_index int64, size int64) Float {
	return self.Runtime.FontFile_get_cache_scale(self, cache_index, size)
}
func (self FontFile) GetTextureCount(cache_index int64, size Vector2i) int64 {
	return self.Runtime.FontFile_get_texture_count(self, cache_index, size)
}
func (self FontFile) ClearTextures(cache_index int64, size Vector2i) {
	self.Runtime.FontFile_clear_textures(self, cache_index, size)
}
func (self FontFile) RemoveTexture(cache_index int64, size Vector2i, texture_index int64) {
	self.Runtime.FontFile_remove_texture(self, cache_index, size, texture_index)
}
func (self FontFile) SetTextureImage(cache_index int64, size Vector2i, texture_index int64, image Image) {
	self.Runtime.FontFile_set_texture_image(self, cache_index, size, texture_index, image)
}
func (self FontFile) GetTextureImage(cache_index int64, size Vector2i, texture_index int64) Image {
	return self.Runtime.FontFile_get_texture_image(self, cache_index, size, texture_index)
}
func (self FontFile) SetTextureOffsets(cache_index int64, size Vector2i, texture_index int64, offset PackedInt32Array) {
	self.Runtime.FontFile_set_texture_offsets(self, cache_index, size, texture_index, offset)
}
func (self FontFile) GetTextureOffsets(cache_index int64, size Vector2i, texture_index int64) PackedInt32Array {
	return self.Runtime.FontFile_get_texture_offsets(self, cache_index, size, texture_index)
}
func (self FontFile) GetGlyphList(cache_index int64, size Vector2i) PackedInt32Array {
	return self.Runtime.FontFile_get_glyph_list(self, cache_index, size)
}
func (self FontFile) ClearGlyphs(cache_index int64, size Vector2i) {
	self.Runtime.FontFile_clear_glyphs(self, cache_index, size)
}
func (self FontFile) RemoveGlyph(cache_index int64, size Vector2i, glyph int64) {
	self.Runtime.FontFile_remove_glyph(self, cache_index, size, glyph)
}
func (self FontFile) SetGlyphAdvance(cache_index int64, size int64, glyph int64, advance Vector2) {
	self.Runtime.FontFile_set_glyph_advance(self, cache_index, size, glyph, advance)
}
func (self FontFile) GetGlyphAdvance(cache_index int64, size int64, glyph int64) Vector2 {
	return self.Runtime.FontFile_get_glyph_advance(self, cache_index, size, glyph)
}
func (self FontFile) SetGlyphOffset(cache_index int64, size Vector2i, glyph int64, offset Vector2) {
	self.Runtime.FontFile_set_glyph_offset(self, cache_index, size, glyph, offset)
}
func (self FontFile) GetGlyphOffset(cache_index int64, size Vector2i, glyph int64) Vector2 {
	return self.Runtime.FontFile_get_glyph_offset(self, cache_index, size, glyph)
}
func (self FontFile) SetGlyphSize(cache_index int64, size Vector2i, glyph int64, gl_size Vector2) {
	self.Runtime.FontFile_set_glyph_size(self, cache_index, size, glyph, gl_size)
}
func (self FontFile) GetGlyphSize(cache_index int64, size Vector2i, glyph int64) Vector2 {
	return self.Runtime.FontFile_get_glyph_size(self, cache_index, size, glyph)
}
func (self FontFile) SetGlyphUvRect(cache_index int64, size Vector2i, glyph int64, uv_rect Rect2) {
	self.Runtime.FontFile_set_glyph_uv_rect(self, cache_index, size, glyph, uv_rect)
}
func (self FontFile) GetGlyphUvRect(cache_index int64, size Vector2i, glyph int64) Rect2 {
	return self.Runtime.FontFile_get_glyph_uv_rect(self, cache_index, size, glyph)
}
func (self FontFile) SetGlyphTextureIdx(cache_index int64, size Vector2i, glyph int64, texture_idx int64) {
	self.Runtime.FontFile_set_glyph_texture_idx(self, cache_index, size, glyph, texture_idx)
}
func (self FontFile) GetGlyphTextureIdx(cache_index int64, size Vector2i, glyph int64) int64 {
	return self.Runtime.FontFile_get_glyph_texture_idx(self, cache_index, size, glyph)
}
func (self FontFile) GetKerningList(cache_index int64, size int64) ArrayOf[Vector2i] {
	return self.Runtime.FontFile_get_kerning_list(self, cache_index, size)
}
func (self FontFile) ClearKerningMap(cache_index int64, size int64) {
	self.Runtime.FontFile_clear_kerning_map(self, cache_index, size)
}
func (self FontFile) RemoveKerning(cache_index int64, size int64, glyph_pair Vector2i) {
	self.Runtime.FontFile_remove_kerning(self, cache_index, size, glyph_pair)
}
func (self FontFile) SetKerning(cache_index int64, size int64, glyph_pair Vector2i, kerning Vector2) {
	self.Runtime.FontFile_set_kerning(self, cache_index, size, glyph_pair, kerning)
}
func (self FontFile) GetKerning(cache_index int64, size int64, glyph_pair Vector2i) Vector2 {
	return self.Runtime.FontFile_get_kerning(self, cache_index, size, glyph_pair)
}
func (self FontFile) RenderRange(cache_index int64, size Vector2i, start int64, end int64) {
	self.Runtime.FontFile_render_range(self, cache_index, size, start, end)
}
func (self FontFile) RenderGlyph(cache_index int64, size Vector2i, index int64) {
	self.Runtime.FontFile_render_glyph(self, cache_index, size, index)
}
func (self FontFile) SetLanguageSupportOverride(language string, supported bool) {
	self.Runtime.FontFile_set_language_support_override(self, language, supported)
}
func (self FontFile) GetLanguageSupportOverride(language string) bool {
	return self.Runtime.FontFile_get_language_support_override(self, language)
}
func (self FontFile) RemoveLanguageSupportOverride(language string) {
	self.Runtime.FontFile_remove_language_support_override(self, language)
}
func (self FontFile) GetLanguageSupportOverrides() PackedStringArray {
	return self.Runtime.FontFile_get_language_support_overrides(self)
}
func (self FontFile) SetScriptSupportOverride(script string, supported bool) {
	self.Runtime.FontFile_set_script_support_override(self, script, supported)
}
func (self FontFile) GetScriptSupportOverride(script string) bool {
	return self.Runtime.FontFile_get_script_support_override(self, script)
}
func (self FontFile) RemoveScriptSupportOverride(script string) {
	self.Runtime.FontFile_remove_script_support_override(self, script)
}
func (self FontFile) GetScriptSupportOverrides() PackedStringArray {
	return self.Runtime.FontFile_get_script_support_overrides(self)
}
func (self FontFile) SetOpentypeFeatureOverrides(overrides Dictionary) {
	self.Runtime.FontFile_set_opentype_feature_overrides(self, overrides)
}
func (self FontFile) GetOpentypeFeatureOverrides() Dictionary {
	return self.Runtime.FontFile_get_opentype_feature_overrides(self)
}
func (self FontFile) GetGlyphIndex(size int64, char int64, variation_selector int64) int64 {
	return self.Runtime.FontFile_get_glyph_index(self, size, char, variation_selector)
}
func (self FontFile) GetCharFromGlyphIndex(size int64, glyph_index int64) int64 {
	return self.Runtime.FontFile_get_char_from_glyph_index(self, size, glyph_index)
}

type extendsFontVariation struct {
	_ [0]*extendsFontVariation
	class
}

func (self FontVariation) Font() Font { var parent Font; parent.class = self.class; return parent }
func (self FontVariation) SetBaseFont(font Font) {
	self.Runtime.FontVariation_set_base_font(self, font)
}
func (self FontVariation) GetBaseFont() Font {
	return self.Runtime.FontVariation_get_base_font(self)
}
func (self FontVariation) SetVariationOpentype(coords Dictionary) {
	self.Runtime.FontVariation_set_variation_opentype(self, coords)
}
func (self FontVariation) GetVariationOpentype() Dictionary {
	return self.Runtime.FontVariation_get_variation_opentype(self)
}
func (self FontVariation) SetVariationEmbolden(strength Float) {
	self.Runtime.FontVariation_set_variation_embolden(self, strength)
}
func (self FontVariation) GetVariationEmbolden() Float {
	return self.Runtime.FontVariation_get_variation_embolden(self)
}
func (self FontVariation) SetVariationFaceIndex(face_index int64) {
	self.Runtime.FontVariation_set_variation_face_index(self, face_index)
}
func (self FontVariation) GetVariationFaceIndex() int64 {
	return self.Runtime.FontVariation_get_variation_face_index(self)
}
func (self FontVariation) SetVariationTransform(transform Transform2D) {
	self.Runtime.FontVariation_set_variation_transform(self, transform)
}
func (self FontVariation) GetVariationTransform() Transform2D {
	return self.Runtime.FontVariation_get_variation_transform(self)
}
func (self FontVariation) SetOpentypeFeatures(features Dictionary) {
	self.Runtime.FontVariation_set_opentype_features(self, features)
}
func (self FontVariation) SetSpacing(spacing TextServerSpacingType, value int64) {
	self.Runtime.FontVariation_set_spacing(self, spacing, value)
}

type extendsGDExtension struct {
	_ [0]*extendsGDExtension
	class
}

func (self GDExtension) Resource() Resource {
	var parent Resource
	parent.class = self.class
	return parent
}
func (self GDExtension) OpenLibrary(path string, entry_symbol string) int64 {
	return self.Runtime.GDExtension_open_library(self, path, entry_symbol)
}
func (self GDExtension) CloseLibrary() {
	self.Runtime.GDExtension_close_library(self)
}
func (self GDExtension) IsLibraryOpen() bool {
	return self.Runtime.GDExtension_is_library_open(self)
}
func (self GDExtension) GetMinimumLibraryInitializationLevel() ExtensionInitializationLevel {
	return self.Runtime.GDExtension_get_minimum_library_initialization_level(self)
}
func (self GDExtension) InitializeLibrary(level ExtensionInitializationLevel) {
	self.Runtime.GDExtension_initialize_library(self, level)
}

type extendsGDExtensionManager struct {
	_ [0]*extendsGDExtensionManager
	class
}

func (self GDExtensionManager) Object() Object {
	var parent Object
	parent.class = self.class
	return parent
}
func (self GDExtensionManager) LoadExtension(path string) ExtensionManagerLoadStatus {
	return self.Runtime.GDExtensionManager_load_extension(self, path)
}
func (self GDExtensionManager) ReloadExtension(path string) ExtensionManagerLoadStatus {
	return self.Runtime.GDExtensionManager_reload_extension(self, path)
}
func (self GDExtensionManager) UnloadExtension(path string) ExtensionManagerLoadStatus {
	return self.Runtime.GDExtensionManager_unload_extension(self, path)
}
func (self GDExtensionManager) IsExtensionLoaded(path string) bool {
	return self.Runtime.GDExtensionManager_is_extension_loaded(self, path)
}
func (self GDExtensionManager) GetLoadedExtensions() PackedStringArray {
	return self.Runtime.GDExtensionManager_get_loaded_extensions(self)
}
func (self GDExtensionManager) GetExtension(path string) GDExtension {
	return self.Runtime.GDExtensionManager_get_extension(self, path)
}

type extendsGDScript struct {
	_ [0]*extendsGDScript
	class
}

func (self GDScript) Script() Script { var parent Script; parent.class = self.class; return parent }
func (self GDScript) New() any {
	return self.Runtime.GDScript_new(self)
}

type extendsGLTFAccessor struct {
	_ [0]*extendsGLTFAccessor
	class
}

func (self GLTFAccessor) Resource() Resource {
	var parent Resource
	parent.class = self.class
	return parent
}
func (self GLTFAccessor) GetBufferView() int64 {
	return self.Runtime.GLTFAccessor_get_buffer_view(self)
}
func (self GLTFAccessor) SetBufferView(buffer_view int64) {
	self.Runtime.GLTFAccessor_set_buffer_view(self, buffer_view)
}
func (self GLTFAccessor) GetByteOffset() int64 {
	return self.Runtime.GLTFAccessor_get_byte_offset(self)
}
func (self GLTFAccessor) SetByteOffset(byte_offset int64) {
	self.Runtime.GLTFAccessor_set_byte_offset(self, byte_offset)
}
func (self GLTFAccessor) GetComponentType() int64 {
	return self.Runtime.GLTFAccessor_get_component_type(self)
}
func (self GLTFAccessor) SetComponentType(component_type int64) {
	self.Runtime.GLTFAccessor_set_component_type(self, component_type)
}
func (self GLTFAccessor) GetNormalized() bool {
	return self.Runtime.GLTFAccessor_get_normalized(self)
}
func (self GLTFAccessor) SetNormalized(normalized bool) {
	self.Runtime.GLTFAccessor_set_normalized(self, normalized)
}
func (self GLTFAccessor) GetCount() int64 {
	return self.Runtime.GLTFAccessor_get_count(self)
}
func (self GLTFAccessor) SetCount(count int64) {
	self.Runtime.GLTFAccessor_set_count(self, count)
}
func (self GLTFAccessor) GetType() int64 {
	return self.Runtime.GLTFAccessor_get_type(self)
}
func (self GLTFAccessor) SetType(atype int64) {
	self.Runtime.GLTFAccessor_set_type(self, atype)
}
func (self GLTFAccessor) GetMin() PackedFloat64Array {
	return self.Runtime.GLTFAccessor_get_min(self)
}
func (self GLTFAccessor) SetMin(min PackedFloat64Array) {
	self.Runtime.GLTFAccessor_set_min(self, min)
}
func (self GLTFAccessor) GetMax() PackedFloat64Array {
	return self.Runtime.GLTFAccessor_get_max(self)
}
func (self GLTFAccessor) SetMax(max PackedFloat64Array) {
	self.Runtime.GLTFAccessor_set_max(self, max)
}
func (self GLTFAccessor) GetSparseCount() int64 {
	return self.Runtime.GLTFAccessor_get_sparse_count(self)
}
func (self GLTFAccessor) SetSparseCount(sparse_count int64) {
	self.Runtime.GLTFAccessor_set_sparse_count(self, sparse_count)
}
func (self GLTFAccessor) GetSparseIndicesBufferView() int64 {
	return self.Runtime.GLTFAccessor_get_sparse_indices_buffer_view(self)
}
func (self GLTFAccessor) SetSparseIndicesBufferView(sparse_indices_buffer_view int64) {
	self.Runtime.GLTFAccessor_set_sparse_indices_buffer_view(self, sparse_indices_buffer_view)
}
func (self GLTFAccessor) GetSparseIndicesByteOffset() int64 {
	return self.Runtime.GLTFAccessor_get_sparse_indices_byte_offset(self)
}
func (self GLTFAccessor) SetSparseIndicesByteOffset(sparse_indices_byte_offset int64) {
	self.Runtime.GLTFAccessor_set_sparse_indices_byte_offset(self, sparse_indices_byte_offset)
}
func (self GLTFAccessor) GetSparseIndicesComponentType() int64 {
	return self.Runtime.GLTFAccessor_get_sparse_indices_component_type(self)
}
func (self GLTFAccessor) SetSparseIndicesComponentType(sparse_indices_component_type int64) {
	self.Runtime.GLTFAccessor_set_sparse_indices_component_type(self, sparse_indices_component_type)
}
func (self GLTFAccessor) GetSparseValuesBufferView() int64 {
	return self.Runtime.GLTFAccessor_get_sparse_values_buffer_view(self)
}
func (self GLTFAccessor) SetSparseValuesBufferView(sparse_values_buffer_view int64) {
	self.Runtime.GLTFAccessor_set_sparse_values_buffer_view(self, sparse_values_buffer_view)
}
func (self GLTFAccessor) GetSparseValuesByteOffset() int64 {
	return self.Runtime.GLTFAccessor_get_sparse_values_byte_offset(self)
}
func (self GLTFAccessor) SetSparseValuesByteOffset(sparse_values_byte_offset int64) {
	self.Runtime.GLTFAccessor_set_sparse_values_byte_offset(self, sparse_values_byte_offset)
}

type extendsGLTFAnimation struct {
	_ [0]*extendsGLTFAnimation
	class
}

func (self GLTFAnimation) Resource() Resource {
	var parent Resource
	parent.class = self.class
	return parent
}
func (self GLTFAnimation) GetLoop() bool {
	return self.Runtime.GLTFAnimation_get_loop(self)
}
func (self GLTFAnimation) SetLoop(loop bool) {
	self.Runtime.GLTFAnimation_set_loop(self, loop)
}

type extendsGLTFBufferView struct {
	_ [0]*extendsGLTFBufferView
	class
}

func (self GLTFBufferView) Resource() Resource {
	var parent Resource
	parent.class = self.class
	return parent
}
func (self GLTFBufferView) GetBuffer() int64 {
	return self.Runtime.GLTFBufferView_get_buffer(self)
}
func (self GLTFBufferView) SetBuffer(buffer int64) {
	self.Runtime.GLTFBufferView_set_buffer(self, buffer)
}
func (self GLTFBufferView) GetByteOffset() int64 {
	return self.Runtime.GLTFBufferView_get_byte_offset(self)
}
func (self GLTFBufferView) SetByteOffset(byte_offset int64) {
	self.Runtime.GLTFBufferView_set_byte_offset(self, byte_offset)
}
func (self GLTFBufferView) GetByteLength() int64 {
	return self.Runtime.GLTFBufferView_get_byte_length(self)
}
func (self GLTFBufferView) SetByteLength(byte_length int64) {
	self.Runtime.GLTFBufferView_set_byte_length(self, byte_length)
}
func (self GLTFBufferView) GetByteStride() int64 {
	return self.Runtime.GLTFBufferView_get_byte_stride(self)
}
func (self GLTFBufferView) SetByteStride(byte_stride int64) {
	self.Runtime.GLTFBufferView_set_byte_stride(self, byte_stride)
}
func (self GLTFBufferView) GetIndices() bool {
	return self.Runtime.GLTFBufferView_get_indices(self)
}
func (self GLTFBufferView) SetIndices(indices bool) {
	self.Runtime.GLTFBufferView_set_indices(self, indices)
}

type extendsGLTFCamera struct {
	_ [0]*extendsGLTFCamera
	class
}

func (self GLTFCamera) Resource() Resource {
	var parent Resource
	parent.class = self.class
	return parent
}
func (self GLTFCamera) FromNode(camera_node Camera3D) GLTFCamera {
	return self.Runtime.GLTFCamera_from_node(self, camera_node)
}
func (self GLTFCamera) ToNode() Camera3D {
	return self.Runtime.GLTFCamera_to_node(self)
}
func (self GLTFCamera) FromDictionary(dictionary Dictionary) GLTFCamera {
	return self.Runtime.GLTFCamera_from_dictionary(self, dictionary)
}
func (self GLTFCamera) ToDictionary() Dictionary {
	return self.Runtime.GLTFCamera_to_dictionary(self)
}
func (self GLTFCamera) GetPerspective() bool {
	return self.Runtime.GLTFCamera_get_perspective(self)
}
func (self GLTFCamera) SetPerspective(perspective bool) {
	self.Runtime.GLTFCamera_set_perspective(self, perspective)
}
func (self GLTFCamera) GetFov() Float {
	return self.Runtime.GLTFCamera_get_fov(self)
}
func (self GLTFCamera) SetFov(fov Float) {
	self.Runtime.GLTFCamera_set_fov(self, fov)
}
func (self GLTFCamera) GetSizeMag() Float {
	return self.Runtime.GLTFCamera_get_size_mag(self)
}
func (self GLTFCamera) SetSizeMag(size_mag Float) {
	self.Runtime.GLTFCamera_set_size_mag(self, size_mag)
}
func (self GLTFCamera) GetDepthFar() Float {
	return self.Runtime.GLTFCamera_get_depth_far(self)
}
func (self GLTFCamera) SetDepthFar(zdepth_far Float) {
	self.Runtime.GLTFCamera_set_depth_far(self, zdepth_far)
}
func (self GLTFCamera) GetDepthNear() Float {
	return self.Runtime.GLTFCamera_get_depth_near(self)
}
func (self GLTFCamera) SetDepthNear(zdepth_near Float) {
	self.Runtime.GLTFCamera_set_depth_near(self, zdepth_near)
}

type extendsGLTFDocument struct {
	_ [0]*extendsGLTFDocument
	class
}

func (self GLTFDocument) Resource() Resource {
	var parent Resource
	parent.class = self.class
	return parent
}
func (self GLTFDocument) AppendFromFile(path string, state GLTFState, flags int64, base_path string) int64 {
	return self.Runtime.GLTFDocument_append_from_file(self, path, state, flags, base_path)
}
func (self GLTFDocument) AppendFromBuffer(bytes PackedByteArray, base_path string, state GLTFState, flags int64) int64 {
	return self.Runtime.GLTFDocument_append_from_buffer(self, bytes, base_path, state, flags)
}
func (self GLTFDocument) AppendFromScene(node Node, state GLTFState, flags int64) int64 {
	return self.Runtime.GLTFDocument_append_from_scene(self, node, state, flags)
}
func (self GLTFDocument) GenerateScene(state GLTFState, bake_fps Float, trimming bool, remove_immutable_tracks bool) Node {
	return self.Runtime.GLTFDocument_generate_scene(self, state, bake_fps, trimming, remove_immutable_tracks)
}
func (self GLTFDocument) GenerateBuffer(state GLTFState) PackedByteArray {
	return self.Runtime.GLTFDocument_generate_buffer(self, state)
}
func (self GLTFDocument) WriteToFilesystem(state GLTFState, path string) int64 {
	return self.Runtime.GLTFDocument_write_to_filesystem(self, state, path)
}
func (self GLTFDocument) SetImageFormat(image_format string) {
	self.Runtime.GLTFDocument_set_image_format(self, image_format)
}
func (self GLTFDocument) GetImageFormat() string {
	return self.Runtime.GLTFDocument_get_image_format(self)
}
func (self GLTFDocument) SetLossyQuality(lossy_quality Float) {
	self.Runtime.GLTFDocument_set_lossy_quality(self, lossy_quality)
}
func (self GLTFDocument) GetLossyQuality() Float {
	return self.Runtime.GLTFDocument_get_lossy_quality(self)
}
func (self GLTFDocument) SetRootNodeMode(root_node_mode GLTFDocumentRootNodeMode) {
	self.Runtime.GLTFDocument_set_root_node_mode(self, root_node_mode)
}
func (self GLTFDocument) GetRootNodeMode() GLTFDocumentRootNodeMode {
	return self.Runtime.GLTFDocument_get_root_node_mode(self)
}
func (self GLTFDocument) RegisterGltfDocumentExtension(extension GLTFDocumentExtension, first_priority bool) {
	self.Runtime.GLTFDocument_register_gltf_document_extension(self, extension, first_priority)
}
func (self GLTFDocument) UnregisterGltfDocumentExtension(extension GLTFDocumentExtension) {
	self.Runtime.GLTFDocument_unregister_gltf_document_extension(self, extension)
}

type extendsGLTFDocumentExtension struct {
	_ [0]*extendsGLTFDocumentExtension
	class
}

func (self GLTFDocumentExtension) Resource() Resource {
	var parent Resource
	parent.class = self.class
	return parent
}

type extendsGLTFDocumentExtensionConvertImporterMesh struct {
	_ [0]*extendsGLTFDocumentExtensionConvertImporterMesh
	class
}

func (self GLTFDocumentExtensionConvertImporterMesh) GLTFDocumentExtension() GLTFDocumentExtension {
	var parent GLTFDocumentExtension
	parent.class = self.class
	return parent
}

type extendsGLTFLight struct {
	_ [0]*extendsGLTFLight
	class
}

func (self GLTFLight) Resource() Resource {
	var parent Resource
	parent.class = self.class
	return parent
}
func (self GLTFLight) FromNode(light_node Light3D) GLTFLight {
	return self.Runtime.GLTFLight_from_node(self, light_node)
}
func (self GLTFLight) ToNode() Light3D {
	return self.Runtime.GLTFLight_to_node(self)
}
func (self GLTFLight) FromDictionary(dictionary Dictionary) GLTFLight {
	return self.Runtime.GLTFLight_from_dictionary(self, dictionary)
}
func (self GLTFLight) ToDictionary() Dictionary {
	return self.Runtime.GLTFLight_to_dictionary(self)
}
func (self GLTFLight) GetColor() Color {
	return self.Runtime.GLTFLight_get_color(self)
}
func (self GLTFLight) SetColor(color Color) {
	self.Runtime.GLTFLight_set_color(self, color)
}
func (self GLTFLight) GetIntensity() Float {
	return self.Runtime.GLTFLight_get_intensity(self)
}
func (self GLTFLight) SetIntensity(intensity Float) {
	self.Runtime.GLTFLight_set_intensity(self, intensity)
}
func (self GLTFLight) GetLightType() string {
	return self.Runtime.GLTFLight_get_light_type(self)
}
func (self GLTFLight) SetLightType(light_type string) {
	self.Runtime.GLTFLight_set_light_type(self, light_type)
}
func (self GLTFLight) GetRange() Float {
	return self.Runtime.GLTFLight_get_range(self)
}
func (self GLTFLight) SetRange(arange Float) {
	self.Runtime.GLTFLight_set_range(self, arange)
}
func (self GLTFLight) GetInnerConeAngle() Float {
	return self.Runtime.GLTFLight_get_inner_cone_angle(self)
}
func (self GLTFLight) SetInnerConeAngle(inner_cone_angle Float) {
	self.Runtime.GLTFLight_set_inner_cone_angle(self, inner_cone_angle)
}
func (self GLTFLight) GetOuterConeAngle() Float {
	return self.Runtime.GLTFLight_get_outer_cone_angle(self)
}
func (self GLTFLight) SetOuterConeAngle(outer_cone_angle Float) {
	self.Runtime.GLTFLight_set_outer_cone_angle(self, outer_cone_angle)
}

type extendsGLTFMesh struct {
	_ [0]*extendsGLTFMesh
	class
}

func (self GLTFMesh) Resource() Resource {
	var parent Resource
	parent.class = self.class
	return parent
}
func (self GLTFMesh) GetMesh() ImporterMesh {
	return self.Runtime.GLTFMesh_get_mesh(self)
}
func (self GLTFMesh) SetMesh(mesh ImporterMesh) {
	self.Runtime.GLTFMesh_set_mesh(self, mesh)
}
func (self GLTFMesh) GetBlendWeights() PackedFloat32Array {
	return self.Runtime.GLTFMesh_get_blend_weights(self)
}
func (self GLTFMesh) SetBlendWeights(blend_weights PackedFloat32Array) {
	self.Runtime.GLTFMesh_set_blend_weights(self, blend_weights)
}
func (self GLTFMesh) GetInstanceMaterials() ArrayOf[Material] {
	return self.Runtime.GLTFMesh_get_instance_materials(self)
}
func (self GLTFMesh) SetInstanceMaterials(instance_materials ArrayOf[Material]) {
	self.Runtime.GLTFMesh_set_instance_materials(self, instance_materials)
}

type extendsGLTFNode struct {
	_ [0]*extendsGLTFNode
	class
}

func (self GLTFNode) Resource() Resource {
	var parent Resource
	parent.class = self.class
	return parent
}
func (self GLTFNode) GetParent() int64 {
	return self.Runtime.GLTFNode_get_parent(self)
}
func (self GLTFNode) SetParent(parent int64) {
	self.Runtime.GLTFNode_set_parent(self, parent)
}
func (self GLTFNode) GetHeight() int64 {
	return self.Runtime.GLTFNode_get_height(self)
}
func (self GLTFNode) SetHeight(height int64) {
	self.Runtime.GLTFNode_set_height(self, height)
}
func (self GLTFNode) GetXform() Transform3D {
	return self.Runtime.GLTFNode_get_xform(self)
}
func (self GLTFNode) SetXform(xform Transform3D) {
	self.Runtime.GLTFNode_set_xform(self, xform)
}
func (self GLTFNode) GetMesh() int64 {
	return self.Runtime.GLTFNode_get_mesh(self)
}
func (self GLTFNode) SetMesh(mesh int64) {
	self.Runtime.GLTFNode_set_mesh(self, mesh)
}
func (self GLTFNode) GetCamera() int64 {
	return self.Runtime.GLTFNode_get_camera(self)
}
func (self GLTFNode) SetCamera(camera int64) {
	self.Runtime.GLTFNode_set_camera(self, camera)
}
func (self GLTFNode) GetSkin() int64 {
	return self.Runtime.GLTFNode_get_skin(self)
}
func (self GLTFNode) SetSkin(skin int64) {
	self.Runtime.GLTFNode_set_skin(self, skin)
}
func (self GLTFNode) GetSkeleton() int64 {
	return self.Runtime.GLTFNode_get_skeleton(self)
}
func (self GLTFNode) SetSkeleton(skeleton int64) {
	self.Runtime.GLTFNode_set_skeleton(self, skeleton)
}
func (self GLTFNode) GetPosition() Vector3 {
	return self.Runtime.GLTFNode_get_position(self)
}
func (self GLTFNode) SetPosition(position Vector3) {
	self.Runtime.GLTFNode_set_position(self, position)
}
func (self GLTFNode) GetRotation() Quaternion {
	return self.Runtime.GLTFNode_get_rotation(self)
}
func (self GLTFNode) SetRotation(rotation Quaternion) {
	self.Runtime.GLTFNode_set_rotation(self, rotation)
}
func (self GLTFNode) GetScale() Vector3 {
	return self.Runtime.GLTFNode_get_scale(self)
}
func (self GLTFNode) SetScale(scale Vector3) {
	self.Runtime.GLTFNode_set_scale(self, scale)
}
func (self GLTFNode) GetChildren() PackedInt32Array {
	return self.Runtime.GLTFNode_get_children(self)
}
func (self GLTFNode) SetChildren(children PackedInt32Array) {
	self.Runtime.GLTFNode_set_children(self, children)
}
func (self GLTFNode) GetLight() int64 {
	return self.Runtime.GLTFNode_get_light(self)
}
func (self GLTFNode) SetLight(light int64) {
	self.Runtime.GLTFNode_set_light(self, light)
}
func (self GLTFNode) GetAdditionalData(extension_name string) any {
	return self.Runtime.GLTFNode_get_additional_data(self, extension_name)
}
func (self GLTFNode) SetAdditionalData(extension_name string, additional_data any) {
	self.Runtime.GLTFNode_set_additional_data(self, extension_name, additional_data)
}

type extendsGLTFPhysicsBody struct {
	_ [0]*extendsGLTFPhysicsBody
	class
}

func (self GLTFPhysicsBody) Resource() Resource {
	var parent Resource
	parent.class = self.class
	return parent
}
func (self GLTFPhysicsBody) FromNode(body_node CollisionObject3D) GLTFPhysicsBody {
	return self.Runtime.GLTFPhysicsBody_from_node(self, body_node)
}
func (self GLTFPhysicsBody) ToNode() CollisionObject3D {
	return self.Runtime.GLTFPhysicsBody_to_node(self)
}
func (self GLTFPhysicsBody) FromDictionary(dictionary Dictionary) GLTFPhysicsBody {
	return self.Runtime.GLTFPhysicsBody_from_dictionary(self, dictionary)
}
func (self GLTFPhysicsBody) ToDictionary() Dictionary {
	return self.Runtime.GLTFPhysicsBody_to_dictionary(self)
}
func (self GLTFPhysicsBody) GetBodyType() string {
	return self.Runtime.GLTFPhysicsBody_get_body_type(self)
}
func (self GLTFPhysicsBody) SetBodyType(body_type string) {
	self.Runtime.GLTFPhysicsBody_set_body_type(self, body_type)
}
func (self GLTFPhysicsBody) GetMass() Float {
	return self.Runtime.GLTFPhysicsBody_get_mass(self)
}
func (self GLTFPhysicsBody) SetMass(mass Float) {
	self.Runtime.GLTFPhysicsBody_set_mass(self, mass)
}
func (self GLTFPhysicsBody) GetLinearVelocity() Vector3 {
	return self.Runtime.GLTFPhysicsBody_get_linear_velocity(self)
}
func (self GLTFPhysicsBody) SetLinearVelocity(linear_velocity Vector3) {
	self.Runtime.GLTFPhysicsBody_set_linear_velocity(self, linear_velocity)
}
func (self GLTFPhysicsBody) GetAngularVelocity() Vector3 {
	return self.Runtime.GLTFPhysicsBody_get_angular_velocity(self)
}
func (self GLTFPhysicsBody) SetAngularVelocity(angular_velocity Vector3) {
	self.Runtime.GLTFPhysicsBody_set_angular_velocity(self, angular_velocity)
}
func (self GLTFPhysicsBody) GetCenterOfMass() Vector3 {
	return self.Runtime.GLTFPhysicsBody_get_center_of_mass(self)
}
func (self GLTFPhysicsBody) SetCenterOfMass(center_of_mass Vector3) {
	self.Runtime.GLTFPhysicsBody_set_center_of_mass(self, center_of_mass)
}
func (self GLTFPhysicsBody) GetInertiaTensor() Basis {
	return self.Runtime.GLTFPhysicsBody_get_inertia_tensor(self)
}
func (self GLTFPhysicsBody) SetInertiaTensor(inertia_tensor Basis) {
	self.Runtime.GLTFPhysicsBody_set_inertia_tensor(self, inertia_tensor)
}

type extendsGLTFPhysicsShape struct {
	_ [0]*extendsGLTFPhysicsShape
	class
}

func (self GLTFPhysicsShape) Resource() Resource {
	var parent Resource
	parent.class = self.class
	return parent
}
func (self GLTFPhysicsShape) FromNode(shape_node CollisionShape3D) GLTFPhysicsShape {
	return self.Runtime.GLTFPhysicsShape_from_node(self, shape_node)
}
func (self GLTFPhysicsShape) ToNode(cache_shapes bool) CollisionShape3D {
	return self.Runtime.GLTFPhysicsShape_to_node(self, cache_shapes)
}
func (self GLTFPhysicsShape) FromDictionary(dictionary Dictionary) GLTFPhysicsShape {
	return self.Runtime.GLTFPhysicsShape_from_dictionary(self, dictionary)
}
func (self GLTFPhysicsShape) ToDictionary() Dictionary {
	return self.Runtime.GLTFPhysicsShape_to_dictionary(self)
}
func (self GLTFPhysicsShape) GetShapeType() string {
	return self.Runtime.GLTFPhysicsShape_get_shape_type(self)
}
func (self GLTFPhysicsShape) SetShapeType(shape_type string) {
	self.Runtime.GLTFPhysicsShape_set_shape_type(self, shape_type)
}
func (self GLTFPhysicsShape) GetSize() Vector3 {
	return self.Runtime.GLTFPhysicsShape_get_size(self)
}
func (self GLTFPhysicsShape) SetSize(size Vector3) {
	self.Runtime.GLTFPhysicsShape_set_size(self, size)
}
func (self GLTFPhysicsShape) GetRadius() Float {
	return self.Runtime.GLTFPhysicsShape_get_radius(self)
}
func (self GLTFPhysicsShape) SetRadius(radius Float) {
	self.Runtime.GLTFPhysicsShape_set_radius(self, radius)
}
func (self GLTFPhysicsShape) GetHeight() Float {
	return self.Runtime.GLTFPhysicsShape_get_height(self)
}
func (self GLTFPhysicsShape) SetHeight(height Float) {
	self.Runtime.GLTFPhysicsShape_set_height(self, height)
}
func (self GLTFPhysicsShape) GetIsTrigger() bool {
	return self.Runtime.GLTFPhysicsShape_get_is_trigger(self)
}
func (self GLTFPhysicsShape) SetIsTrigger(is_trigger bool) {
	self.Runtime.GLTFPhysicsShape_set_is_trigger(self, is_trigger)
}
func (self GLTFPhysicsShape) GetMeshIndex() int64 {
	return self.Runtime.GLTFPhysicsShape_get_mesh_index(self)
}
func (self GLTFPhysicsShape) SetMeshIndex(mesh_index int64) {
	self.Runtime.GLTFPhysicsShape_set_mesh_index(self, mesh_index)
}
func (self GLTFPhysicsShape) GetImporterMesh() ImporterMesh {
	return self.Runtime.GLTFPhysicsShape_get_importer_mesh(self)
}
func (self GLTFPhysicsShape) SetImporterMesh(importer_mesh ImporterMesh) {
	self.Runtime.GLTFPhysicsShape_set_importer_mesh(self, importer_mesh)
}

type extendsGLTFSkeleton struct {
	_ [0]*extendsGLTFSkeleton
	class
}

func (self GLTFSkeleton) Resource() Resource {
	var parent Resource
	parent.class = self.class
	return parent
}
func (self GLTFSkeleton) GetJoints() PackedInt32Array {
	return self.Runtime.GLTFSkeleton_get_joints(self)
}
func (self GLTFSkeleton) SetJoints(joints PackedInt32Array) {
	self.Runtime.GLTFSkeleton_set_joints(self, joints)
}
func (self GLTFSkeleton) GetRoots() PackedInt32Array {
	return self.Runtime.GLTFSkeleton_get_roots(self)
}
func (self GLTFSkeleton) SetRoots(roots PackedInt32Array) {
	self.Runtime.GLTFSkeleton_set_roots(self, roots)
}
func (self GLTFSkeleton) GetGodotSkeleton() Skeleton3D {
	return self.Runtime.GLTFSkeleton_get_godot_skeleton(self)
}
func (self GLTFSkeleton) GetUniqueNames() ArrayOf[string] {
	return self.Runtime.GLTFSkeleton_get_unique_names(self)
}
func (self GLTFSkeleton) SetUniqueNames(unique_names ArrayOf[string]) {
	self.Runtime.GLTFSkeleton_set_unique_names(self, unique_names)
}
func (self GLTFSkeleton) GetGodotBoneNode() Dictionary {
	return self.Runtime.GLTFSkeleton_get_godot_bone_node(self)
}
func (self GLTFSkeleton) SetGodotBoneNode(godot_bone_node Dictionary) {
	self.Runtime.GLTFSkeleton_set_godot_bone_node(self, godot_bone_node)
}
func (self GLTFSkeleton) GetBoneAttachmentCount() int64 {
	return self.Runtime.GLTFSkeleton_get_bone_attachment_count(self)
}
func (self GLTFSkeleton) GetBoneAttachment(idx int64) BoneAttachment3D {
	return self.Runtime.GLTFSkeleton_get_bone_attachment(self, idx)
}

type extendsGLTFSkin struct {
	_ [0]*extendsGLTFSkin
	class
}

func (self GLTFSkin) Resource() Resource {
	var parent Resource
	parent.class = self.class
	return parent
}
func (self GLTFSkin) GetSkinRoot() int64 {
	return self.Runtime.GLTFSkin_get_skin_root(self)
}
func (self GLTFSkin) SetSkinRoot(skin_root int64) {
	self.Runtime.GLTFSkin_set_skin_root(self, skin_root)
}
func (self GLTFSkin) GetJointsOriginal() PackedInt32Array {
	return self.Runtime.GLTFSkin_get_joints_original(self)
}
func (self GLTFSkin) SetJointsOriginal(joints_original PackedInt32Array) {
	self.Runtime.GLTFSkin_set_joints_original(self, joints_original)
}
func (self GLTFSkin) GetInverseBinds() ArrayOf[Transform3D] {
	return self.Runtime.GLTFSkin_get_inverse_binds(self)
}
func (self GLTFSkin) SetInverseBinds(inverse_binds ArrayOf[Transform3D]) {
	self.Runtime.GLTFSkin_set_inverse_binds(self, inverse_binds)
}
func (self GLTFSkin) GetJoints() PackedInt32Array {
	return self.Runtime.GLTFSkin_get_joints(self)
}
func (self GLTFSkin) SetJoints(joints PackedInt32Array) {
	self.Runtime.GLTFSkin_set_joints(self, joints)
}
func (self GLTFSkin) GetNonJoints() PackedInt32Array {
	return self.Runtime.GLTFSkin_get_non_joints(self)
}
func (self GLTFSkin) SetNonJoints(non_joints PackedInt32Array) {
	self.Runtime.GLTFSkin_set_non_joints(self, non_joints)
}
func (self GLTFSkin) GetRoots() PackedInt32Array {
	return self.Runtime.GLTFSkin_get_roots(self)
}
func (self GLTFSkin) SetRoots(roots PackedInt32Array) {
	self.Runtime.GLTFSkin_set_roots(self, roots)
}
func (self GLTFSkin) GetSkeleton() int64 {
	return self.Runtime.GLTFSkin_get_skeleton(self)
}
func (self GLTFSkin) SetSkeleton(skeleton int64) {
	self.Runtime.GLTFSkin_set_skeleton(self, skeleton)
}
func (self GLTFSkin) GetJointIToBoneI() Dictionary {
	return self.Runtime.GLTFSkin_get_joint_i_to_bone_i(self)
}
func (self GLTFSkin) SetJointIToBoneI(joint_i_to_bone_i Dictionary) {
	self.Runtime.GLTFSkin_set_joint_i_to_bone_i(self, joint_i_to_bone_i)
}
func (self GLTFSkin) GetJointIToName() Dictionary {
	return self.Runtime.GLTFSkin_get_joint_i_to_name(self)
}
func (self GLTFSkin) SetJointIToName(joint_i_to_name Dictionary) {
	self.Runtime.GLTFSkin_set_joint_i_to_name(self, joint_i_to_name)
}
func (self GLTFSkin) GetGodotSkin() Skin {
	return self.Runtime.GLTFSkin_get_godot_skin(self)
}
func (self GLTFSkin) SetGodotSkin(godot_skin Skin) {
	self.Runtime.GLTFSkin_set_godot_skin(self, godot_skin)
}

type extendsGLTFSpecGloss struct {
	_ [0]*extendsGLTFSpecGloss
	class
}

func (self GLTFSpecGloss) Resource() Resource {
	var parent Resource
	parent.class = self.class
	return parent
}
func (self GLTFSpecGloss) GetDiffuseImg() Image {
	return self.Runtime.GLTFSpecGloss_get_diffuse_img(self)
}
func (self GLTFSpecGloss) SetDiffuseImg(diffuse_img Image) {
	self.Runtime.GLTFSpecGloss_set_diffuse_img(self, diffuse_img)
}
func (self GLTFSpecGloss) GetDiffuseFactor() Color {
	return self.Runtime.GLTFSpecGloss_get_diffuse_factor(self)
}
func (self GLTFSpecGloss) SetDiffuseFactor(diffuse_factor Color) {
	self.Runtime.GLTFSpecGloss_set_diffuse_factor(self, diffuse_factor)
}
func (self GLTFSpecGloss) GetGlossFactor() Float {
	return self.Runtime.GLTFSpecGloss_get_gloss_factor(self)
}
func (self GLTFSpecGloss) SetGlossFactor(gloss_factor Float) {
	self.Runtime.GLTFSpecGloss_set_gloss_factor(self, gloss_factor)
}
func (self GLTFSpecGloss) GetSpecularFactor() Color {
	return self.Runtime.GLTFSpecGloss_get_specular_factor(self)
}
func (self GLTFSpecGloss) SetSpecularFactor(specular_factor Color) {
	self.Runtime.GLTFSpecGloss_set_specular_factor(self, specular_factor)
}
func (self GLTFSpecGloss) GetSpecGlossImg() Image {
	return self.Runtime.GLTFSpecGloss_get_spec_gloss_img(self)
}
func (self GLTFSpecGloss) SetSpecGlossImg(spec_gloss_img Image) {
	self.Runtime.GLTFSpecGloss_set_spec_gloss_img(self, spec_gloss_img)
}

type extendsGLTFState struct {
	_ [0]*extendsGLTFState
	class
}

func (self GLTFState) Resource() Resource {
	var parent Resource
	parent.class = self.class
	return parent
}
func (self GLTFState) AddUsedExtension(extension_name string, required bool) {
	self.Runtime.GLTFState_add_used_extension(self, extension_name, required)
}
func (self GLTFState) GetJson() Dictionary {
	return self.Runtime.GLTFState_get_json(self)
}
func (self GLTFState) SetJson(json Dictionary) {
	self.Runtime.GLTFState_set_json(self, json)
}
func (self GLTFState) GetMajorVersion() int64 {
	return self.Runtime.GLTFState_get_major_version(self)
}
func (self GLTFState) SetMajorVersion(major_version int64) {
	self.Runtime.GLTFState_set_major_version(self, major_version)
}
func (self GLTFState) GetMinorVersion() int64 {
	return self.Runtime.GLTFState_get_minor_version(self)
}
func (self GLTFState) SetMinorVersion(minor_version int64) {
	self.Runtime.GLTFState_set_minor_version(self, minor_version)
}
func (self GLTFState) GetCopyright() string {
	return self.Runtime.GLTFState_get_copyright(self)
}
func (self GLTFState) SetCopyright(copyright string) {
	self.Runtime.GLTFState_set_copyright(self, copyright)
}
func (self GLTFState) GetGlbData() PackedByteArray {
	return self.Runtime.GLTFState_get_glb_data(self)
}
func (self GLTFState) SetGlbData(glb_data PackedByteArray) {
	self.Runtime.GLTFState_set_glb_data(self, glb_data)
}
func (self GLTFState) GetUseNamedSkinBinds() bool {
	return self.Runtime.GLTFState_get_use_named_skin_binds(self)
}
func (self GLTFState) SetUseNamedSkinBinds(use_named_skin_binds bool) {
	self.Runtime.GLTFState_set_use_named_skin_binds(self, use_named_skin_binds)
}
func (self GLTFState) GetNodes() ArrayOf[GLTFNode] {
	return self.Runtime.GLTFState_get_nodes(self)
}
func (self GLTFState) SetNodes(nodes ArrayOf[GLTFNode]) {
	self.Runtime.GLTFState_set_nodes(self, nodes)
}
func (self GLTFState) GetBuffers() ArrayOf[PackedByteArray] {
	return self.Runtime.GLTFState_get_buffers(self)
}
func (self GLTFState) SetBuffers(buffers ArrayOf[PackedByteArray]) {
	self.Runtime.GLTFState_set_buffers(self, buffers)
}
func (self GLTFState) GetBufferViews() ArrayOf[GLTFBufferView] {
	return self.Runtime.GLTFState_get_buffer_views(self)
}
func (self GLTFState) SetBufferViews(buffer_views ArrayOf[GLTFBufferView]) {
	self.Runtime.GLTFState_set_buffer_views(self, buffer_views)
}
func (self GLTFState) GetAccessors() ArrayOf[GLTFAccessor] {
	return self.Runtime.GLTFState_get_accessors(self)
}
func (self GLTFState) SetAccessors(accessors ArrayOf[GLTFAccessor]) {
	self.Runtime.GLTFState_set_accessors(self, accessors)
}
func (self GLTFState) GetMeshes() ArrayOf[GLTFMesh] {
	return self.Runtime.GLTFState_get_meshes(self)
}
func (self GLTFState) SetMeshes(meshes ArrayOf[GLTFMesh]) {
	self.Runtime.GLTFState_set_meshes(self, meshes)
}
func (self GLTFState) GetAnimationPlayersCount(idx int64) int64 {
	return self.Runtime.GLTFState_get_animation_players_count(self, idx)
}
func (self GLTFState) GetAnimationPlayer(idx int64) AnimationPlayer {
	return self.Runtime.GLTFState_get_animation_player(self, idx)
}
func (self GLTFState) GetMaterials() ArrayOf[Material] {
	return self.Runtime.GLTFState_get_materials(self)
}
func (self GLTFState) SetMaterials(materials ArrayOf[Material]) {
	self.Runtime.GLTFState_set_materials(self, materials)
}
func (self GLTFState) GetSceneName() string {
	return self.Runtime.GLTFState_get_scene_name(self)
}
func (self GLTFState) SetSceneName(scene_name string) {
	self.Runtime.GLTFState_set_scene_name(self, scene_name)
}
func (self GLTFState) GetBasePath() string {
	return self.Runtime.GLTFState_get_base_path(self)
}
func (self GLTFState) SetBasePath(base_path string) {
	self.Runtime.GLTFState_set_base_path(self, base_path)
}
func (self GLTFState) GetFilename() string {
	return self.Runtime.GLTFState_get_filename(self)
}
func (self GLTFState) SetFilename(filename string) {
	self.Runtime.GLTFState_set_filename(self, filename)
}
func (self GLTFState) GetRootNodes() PackedInt32Array {
	return self.Runtime.GLTFState_get_root_nodes(self)
}
func (self GLTFState) SetRootNodes(root_nodes PackedInt32Array) {
	self.Runtime.GLTFState_set_root_nodes(self, root_nodes)
}
func (self GLTFState) GetTextures() ArrayOf[GLTFTexture] {
	return self.Runtime.GLTFState_get_textures(self)
}
func (self GLTFState) SetTextures(textures ArrayOf[GLTFTexture]) {
	self.Runtime.GLTFState_set_textures(self, textures)
}
func (self GLTFState) GetTextureSamplers() ArrayOf[GLTFTextureSampler] {
	return self.Runtime.GLTFState_get_texture_samplers(self)
}
func (self GLTFState) SetTextureSamplers(texture_samplers ArrayOf[GLTFTextureSampler]) {
	self.Runtime.GLTFState_set_texture_samplers(self, texture_samplers)
}
func (self GLTFState) GetImages() ArrayOf[Texture2D] {
	return self.Runtime.GLTFState_get_images(self)
}
func (self GLTFState) SetImages(images ArrayOf[Texture2D]) {
	self.Runtime.GLTFState_set_images(self, images)
}
func (self GLTFState) GetSkins() ArrayOf[GLTFSkin] {
	return self.Runtime.GLTFState_get_skins(self)
}
func (self GLTFState) SetSkins(skins ArrayOf[GLTFSkin]) {
	self.Runtime.GLTFState_set_skins(self, skins)
}
func (self GLTFState) GetCameras() ArrayOf[GLTFCamera] {
	return self.Runtime.GLTFState_get_cameras(self)
}
func (self GLTFState) SetCameras(cameras ArrayOf[GLTFCamera]) {
	self.Runtime.GLTFState_set_cameras(self, cameras)
}
func (self GLTFState) GetLights() ArrayOf[GLTFLight] {
	return self.Runtime.GLTFState_get_lights(self)
}
func (self GLTFState) SetLights(lights ArrayOf[GLTFLight]) {
	self.Runtime.GLTFState_set_lights(self, lights)
}
func (self GLTFState) GetUniqueNames() ArrayOf[string] {
	return self.Runtime.GLTFState_get_unique_names(self)
}
func (self GLTFState) SetUniqueNames(unique_names ArrayOf[string]) {
	self.Runtime.GLTFState_set_unique_names(self, unique_names)
}
func (self GLTFState) GetUniqueAnimationNames() ArrayOf[string] {
	return self.Runtime.GLTFState_get_unique_animation_names(self)
}
func (self GLTFState) SetUniqueAnimationNames(unique_animation_names ArrayOf[string]) {
	self.Runtime.GLTFState_set_unique_animation_names(self, unique_animation_names)
}
func (self GLTFState) GetSkeletons() ArrayOf[GLTFSkeleton] {
	return self.Runtime.GLTFState_get_skeletons(self)
}
func (self GLTFState) SetSkeletons(skeletons ArrayOf[GLTFSkeleton]) {
	self.Runtime.GLTFState_set_skeletons(self, skeletons)
}
func (self GLTFState) GetCreateAnimations() bool {
	return self.Runtime.GLTFState_get_create_animations(self)
}
func (self GLTFState) SetCreateAnimations(create_animations bool) {
	self.Runtime.GLTFState_set_create_animations(self, create_animations)
}
func (self GLTFState) GetAnimations() ArrayOf[GLTFAnimation] {
	return self.Runtime.GLTFState_get_animations(self)
}
func (self GLTFState) SetAnimations(animations ArrayOf[GLTFAnimation]) {
	self.Runtime.GLTFState_set_animations(self, animations)
}
func (self GLTFState) GetSceneNode(idx int64) Node {
	return self.Runtime.GLTFState_get_scene_node(self, idx)
}
func (self GLTFState) GetNodeIndex(scene_node Node) int64 {
	return self.Runtime.GLTFState_get_node_index(self, scene_node)
}
func (self GLTFState) GetAdditionalData(extension_name string) any {
	return self.Runtime.GLTFState_get_additional_data(self, extension_name)
}
func (self GLTFState) SetAdditionalData(extension_name string, additional_data any) {
	self.Runtime.GLTFState_set_additional_data(self, extension_name, additional_data)
}
func (self GLTFState) GetHandleBinaryImage() int64 {
	return self.Runtime.GLTFState_get_handle_binary_image(self)
}
func (self GLTFState) SetHandleBinaryImage(method int64) {
	self.Runtime.GLTFState_set_handle_binary_image(self, method)
}

type extendsGLTFTexture struct {
	_ [0]*extendsGLTFTexture
	class
}

func (self GLTFTexture) Resource() Resource {
	var parent Resource
	parent.class = self.class
	return parent
}
func (self GLTFTexture) GetSrcImage() int64 {
	return self.Runtime.GLTFTexture_get_src_image(self)
}
func (self GLTFTexture) SetSrcImage(src_image int64) {
	self.Runtime.GLTFTexture_set_src_image(self, src_image)
}
func (self GLTFTexture) GetSampler() int64 {
	return self.Runtime.GLTFTexture_get_sampler(self)
}
func (self GLTFTexture) SetSampler(sampler int64) {
	self.Runtime.GLTFTexture_set_sampler(self, sampler)
}

type extendsGLTFTextureSampler struct {
	_ [0]*extendsGLTFTextureSampler
	class
}

func (self GLTFTextureSampler) Resource() Resource {
	var parent Resource
	parent.class = self.class
	return parent
}
func (self GLTFTextureSampler) GetMagFilter() int64 {
	return self.Runtime.GLTFTextureSampler_get_mag_filter(self)
}
func (self GLTFTextureSampler) SetMagFilter(filter_mode int64) {
	self.Runtime.GLTFTextureSampler_set_mag_filter(self, filter_mode)
}
func (self GLTFTextureSampler) GetMinFilter() int64 {
	return self.Runtime.GLTFTextureSampler_get_min_filter(self)
}
func (self GLTFTextureSampler) SetMinFilter(filter_mode int64) {
	self.Runtime.GLTFTextureSampler_set_min_filter(self, filter_mode)
}
func (self GLTFTextureSampler) GetWrapS() int64 {
	return self.Runtime.GLTFTextureSampler_get_wrap_s(self)
}
func (self GLTFTextureSampler) SetWrapS(wrap_mode int64) {
	self.Runtime.GLTFTextureSampler_set_wrap_s(self, wrap_mode)
}
func (self GLTFTextureSampler) GetWrapT() int64 {
	return self.Runtime.GLTFTextureSampler_get_wrap_t(self)
}
func (self GLTFTextureSampler) SetWrapT(wrap_mode int64) {
	self.Runtime.GLTFTextureSampler_set_wrap_t(self, wrap_mode)
}

type extendsGPUParticles2D struct {
	_ [0]*extendsGPUParticles2D
	class
}

func (self GPUParticles2D) Node2D() Node2D {
	var parent Node2D
	parent.class = self.class
	return parent
}
func (self GPUParticles2D) SetEmitting(emitting bool) {
	self.Runtime.GPUParticles2D_set_emitting(self, emitting)
}
func (self GPUParticles2D) SetAmount(amount int64) {
	self.Runtime.GPUParticles2D_set_amount(self, amount)
}
func (self GPUParticles2D) SetLifetime(secs Float) {
	self.Runtime.GPUParticles2D_set_lifetime(self, secs)
}
func (self GPUParticles2D) SetOneShot(secs bool) {
	self.Runtime.GPUParticles2D_set_one_shot(self, secs)
}
func (self GPUParticles2D) SetPreProcessTime(secs Float) {
	self.Runtime.GPUParticles2D_set_pre_process_time(self, secs)
}
func (self GPUParticles2D) SetExplosivenessRatio(ratio Float) {
	self.Runtime.GPUParticles2D_set_explosiveness_ratio(self, ratio)
}
func (self GPUParticles2D) SetRandomnessRatio(ratio Float) {
	self.Runtime.GPUParticles2D_set_randomness_ratio(self, ratio)
}
func (self GPUParticles2D) SetVisibilityRect(visibility_rect Rect2) {
	self.Runtime.GPUParticles2D_set_visibility_rect(self, visibility_rect)
}
func (self GPUParticles2D) SetUseLocalCoordinates(enable bool) {
	self.Runtime.GPUParticles2D_set_use_local_coordinates(self, enable)
}
func (self GPUParticles2D) SetFixedFps(fps int64) {
	self.Runtime.GPUParticles2D_set_fixed_fps(self, fps)
}
func (self GPUParticles2D) SetFractionalDelta(enable bool) {
	self.Runtime.GPUParticles2D_set_fractional_delta(self, enable)
}
func (self GPUParticles2D) SetInterpolate(enable bool) {
	self.Runtime.GPUParticles2D_set_interpolate(self, enable)
}
func (self GPUParticles2D) SetProcessMaterial(material Material) {
	self.Runtime.GPUParticles2D_set_process_material(self, material)
}
func (self GPUParticles2D) SetSpeedScale(scale Float) {
	self.Runtime.GPUParticles2D_set_speed_scale(self, scale)
}
func (self GPUParticles2D) SetCollisionBaseSize(size Float) {
	self.Runtime.GPUParticles2D_set_collision_base_size(self, size)
}
func (self GPUParticles2D) SetInterpToEnd(interp Float) {
	self.Runtime.GPUParticles2D_set_interp_to_end(self, interp)
}
func (self GPUParticles2D) IsEmitting() bool {
	return self.Runtime.GPUParticles2D_is_emitting(self)
}
func (self GPUParticles2D) GetAmount() int64 {
	return self.Runtime.GPUParticles2D_get_amount(self)
}
func (self GPUParticles2D) GetLifetime() Float {
	return self.Runtime.GPUParticles2D_get_lifetime(self)
}
func (self GPUParticles2D) GetOneShot() bool {
	return self.Runtime.GPUParticles2D_get_one_shot(self)
}
func (self GPUParticles2D) GetPreProcessTime() Float {
	return self.Runtime.GPUParticles2D_get_pre_process_time(self)
}
func (self GPUParticles2D) GetExplosivenessRatio() Float {
	return self.Runtime.GPUParticles2D_get_explosiveness_ratio(self)
}
func (self GPUParticles2D) GetRandomnessRatio() Float {
	return self.Runtime.GPUParticles2D_get_randomness_ratio(self)
}
func (self GPUParticles2D) GetVisibilityRect() Rect2 {
	return self.Runtime.GPUParticles2D_get_visibility_rect(self)
}
func (self GPUParticles2D) GetUseLocalCoordinates() bool {
	return self.Runtime.GPUParticles2D_get_use_local_coordinates(self)
}
func (self GPUParticles2D) GetFixedFps() int64 {
	return self.Runtime.GPUParticles2D_get_fixed_fps(self)
}
func (self GPUParticles2D) GetFractionalDelta() bool {
	return self.Runtime.GPUParticles2D_get_fractional_delta(self)
}
func (self GPUParticles2D) GetInterpolate() bool {
	return self.Runtime.GPUParticles2D_get_interpolate(self)
}
func (self GPUParticles2D) GetProcessMaterial() Material {
	return self.Runtime.GPUParticles2D_get_process_material(self)
}
func (self GPUParticles2D) GetSpeedScale() Float {
	return self.Runtime.GPUParticles2D_get_speed_scale(self)
}
func (self GPUParticles2D) GetCollisionBaseSize() Float {
	return self.Runtime.GPUParticles2D_get_collision_base_size(self)
}
func (self GPUParticles2D) GetInterpToEnd() Float {
	return self.Runtime.GPUParticles2D_get_interp_to_end(self)
}
func (self GPUParticles2D) SetDrawOrder(order GPUParticles2DDrawOrder) {
	self.Runtime.GPUParticles2D_set_draw_order(self, order)
}
func (self GPUParticles2D) GetDrawOrder() GPUParticles2DDrawOrder {
	return self.Runtime.GPUParticles2D_get_draw_order(self)
}
func (self GPUParticles2D) SetTexture(texture Texture2D) {
	self.Runtime.GPUParticles2D_set_texture(self, texture)
}
func (self GPUParticles2D) GetTexture() Texture2D {
	return self.Runtime.GPUParticles2D_get_texture(self)
}
func (self GPUParticles2D) CaptureRect() Rect2 {
	return self.Runtime.GPUParticles2D_capture_rect(self)
}
func (self GPUParticles2D) Restart() {
	self.Runtime.GPUParticles2D_restart(self)
}
func (self GPUParticles2D) SetSubEmitter(path NodePath) {
	self.Runtime.GPUParticles2D_set_sub_emitter(self, path)
}
func (self GPUParticles2D) GetSubEmitter() NodePath {
	return self.Runtime.GPUParticles2D_get_sub_emitter(self)
}
func (self GPUParticles2D) EmitParticle(xform Transform2D, velocity Vector2, color Color, custom Color, flags int64) {
	self.Runtime.GPUParticles2D_emit_particle(self, xform, velocity, color, custom, flags)
}
func (self GPUParticles2D) SetTrailEnabled(enabled bool) {
	self.Runtime.GPUParticles2D_set_trail_enabled(self, enabled)
}
func (self GPUParticles2D) SetTrailLifetime(secs Float) {
	self.Runtime.GPUParticles2D_set_trail_lifetime(self, secs)
}
func (self GPUParticles2D) IsTrailEnabled() bool {
	return self.Runtime.GPUParticles2D_is_trail_enabled(self)
}
func (self GPUParticles2D) GetTrailLifetime() Float {
	return self.Runtime.GPUParticles2D_get_trail_lifetime(self)
}
func (self GPUParticles2D) SetTrailSections(sections int64) {
	self.Runtime.GPUParticles2D_set_trail_sections(self, sections)
}
func (self GPUParticles2D) GetTrailSections() int64 {
	return self.Runtime.GPUParticles2D_get_trail_sections(self)
}
func (self GPUParticles2D) SetTrailSectionSubdivisions(subdivisions int64) {
	self.Runtime.GPUParticles2D_set_trail_section_subdivisions(self, subdivisions)
}
func (self GPUParticles2D) GetTrailSectionSubdivisions() int64 {
	return self.Runtime.GPUParticles2D_get_trail_section_subdivisions(self)
}
func (self GPUParticles2D) ConvertFromParticles(particles Node) {
	self.Runtime.GPUParticles2D_convert_from_particles(self, particles)
}
func (self GPUParticles2D) SetAmountRatio(ratio Float) {
	self.Runtime.GPUParticles2D_set_amount_ratio(self, ratio)
}
func (self GPUParticles2D) GetAmountRatio() Float {
	return self.Runtime.GPUParticles2D_get_amount_ratio(self)
}

type extendsGPUParticles3D struct {
	_ [0]*extendsGPUParticles3D
	class
}

func (self GPUParticles3D) GeometryInstance3D() GeometryInstance3D {
	var parent GeometryInstance3D
	parent.class = self.class
	return parent
}
func (self GPUParticles3D) SetEmitting(emitting bool) {
	self.Runtime.GPUParticles3D_set_emitting(self, emitting)
}
func (self GPUParticles3D) SetAmount(amount int64) {
	self.Runtime.GPUParticles3D_set_amount(self, amount)
}
func (self GPUParticles3D) SetLifetime(secs Float) {
	self.Runtime.GPUParticles3D_set_lifetime(self, secs)
}
func (self GPUParticles3D) SetOneShot(enable bool) {
	self.Runtime.GPUParticles3D_set_one_shot(self, enable)
}
func (self GPUParticles3D) SetPreProcessTime(secs Float) {
	self.Runtime.GPUParticles3D_set_pre_process_time(self, secs)
}
func (self GPUParticles3D) SetExplosivenessRatio(ratio Float) {
	self.Runtime.GPUParticles3D_set_explosiveness_ratio(self, ratio)
}
func (self GPUParticles3D) SetRandomnessRatio(ratio Float) {
	self.Runtime.GPUParticles3D_set_randomness_ratio(self, ratio)
}
func (self GPUParticles3D) SetVisibilityAabb(aabb AABB) {
	self.Runtime.GPUParticles3D_set_visibility_aabb(self, aabb)
}
func (self GPUParticles3D) SetUseLocalCoordinates(enable bool) {
	self.Runtime.GPUParticles3D_set_use_local_coordinates(self, enable)
}
func (self GPUParticles3D) SetFixedFps(fps int64) {
	self.Runtime.GPUParticles3D_set_fixed_fps(self, fps)
}
func (self GPUParticles3D) SetFractionalDelta(enable bool) {
	self.Runtime.GPUParticles3D_set_fractional_delta(self, enable)
}
func (self GPUParticles3D) SetInterpolate(enable bool) {
	self.Runtime.GPUParticles3D_set_interpolate(self, enable)
}
func (self GPUParticles3D) SetProcessMaterial(material Material) {
	self.Runtime.GPUParticles3D_set_process_material(self, material)
}
func (self GPUParticles3D) SetSpeedScale(scale Float) {
	self.Runtime.GPUParticles3D_set_speed_scale(self, scale)
}
func (self GPUParticles3D) SetCollisionBaseSize(size Float) {
	self.Runtime.GPUParticles3D_set_collision_base_size(self, size)
}
func (self GPUParticles3D) SetInterpToEnd(interp Float) {
	self.Runtime.GPUParticles3D_set_interp_to_end(self, interp)
}
func (self GPUParticles3D) IsEmitting() bool {
	return self.Runtime.GPUParticles3D_is_emitting(self)
}
func (self GPUParticles3D) GetAmount() int64 {
	return self.Runtime.GPUParticles3D_get_amount(self)
}
func (self GPUParticles3D) GetLifetime() Float {
	return self.Runtime.GPUParticles3D_get_lifetime(self)
}
func (self GPUParticles3D) GetOneShot() bool {
	return self.Runtime.GPUParticles3D_get_one_shot(self)
}
func (self GPUParticles3D) GetPreProcessTime() Float {
	return self.Runtime.GPUParticles3D_get_pre_process_time(self)
}
func (self GPUParticles3D) GetExplosivenessRatio() Float {
	return self.Runtime.GPUParticles3D_get_explosiveness_ratio(self)
}
func (self GPUParticles3D) GetRandomnessRatio() Float {
	return self.Runtime.GPUParticles3D_get_randomness_ratio(self)
}
func (self GPUParticles3D) GetVisibilityAabb() AABB {
	return self.Runtime.GPUParticles3D_get_visibility_aabb(self)
}
func (self GPUParticles3D) GetUseLocalCoordinates() bool {
	return self.Runtime.GPUParticles3D_get_use_local_coordinates(self)
}
func (self GPUParticles3D) GetFixedFps() int64 {
	return self.Runtime.GPUParticles3D_get_fixed_fps(self)
}
func (self GPUParticles3D) GetFractionalDelta() bool {
	return self.Runtime.GPUParticles3D_get_fractional_delta(self)
}
func (self GPUParticles3D) GetInterpolate() bool {
	return self.Runtime.GPUParticles3D_get_interpolate(self)
}
func (self GPUParticles3D) GetProcessMaterial() Material {
	return self.Runtime.GPUParticles3D_get_process_material(self)
}
func (self GPUParticles3D) GetSpeedScale() Float {
	return self.Runtime.GPUParticles3D_get_speed_scale(self)
}
func (self GPUParticles3D) GetCollisionBaseSize() Float {
	return self.Runtime.GPUParticles3D_get_collision_base_size(self)
}
func (self GPUParticles3D) GetInterpToEnd() Float {
	return self.Runtime.GPUParticles3D_get_interp_to_end(self)
}
func (self GPUParticles3D) SetDrawOrder(order GPUParticles3DDrawOrder) {
	self.Runtime.GPUParticles3D_set_draw_order(self, order)
}
func (self GPUParticles3D) GetDrawOrder() GPUParticles3DDrawOrder {
	return self.Runtime.GPUParticles3D_get_draw_order(self)
}
func (self GPUParticles3D) SetDrawPasses(passes int64) {
	self.Runtime.GPUParticles3D_set_draw_passes(self, passes)
}
func (self GPUParticles3D) SetDrawPassMesh(pass int64, mesh Mesh) {
	self.Runtime.GPUParticles3D_set_draw_pass_mesh(self, pass, mesh)
}
func (self GPUParticles3D) GetDrawPasses() int64 {
	return self.Runtime.GPUParticles3D_get_draw_passes(self)
}
func (self GPUParticles3D) GetDrawPassMesh(pass int64) Mesh {
	return self.Runtime.GPUParticles3D_get_draw_pass_mesh(self, pass)
}
func (self GPUParticles3D) SetSkin(skin Skin) {
	self.Runtime.GPUParticles3D_set_skin(self, skin)
}
func (self GPUParticles3D) GetSkin() Skin {
	return self.Runtime.GPUParticles3D_get_skin(self)
}
func (self GPUParticles3D) Restart() {
	self.Runtime.GPUParticles3D_restart(self)
}
func (self GPUParticles3D) CaptureAabb() AABB {
	return self.Runtime.GPUParticles3D_capture_aabb(self)
}
func (self GPUParticles3D) SetSubEmitter(path NodePath) {
	self.Runtime.GPUParticles3D_set_sub_emitter(self, path)
}
func (self GPUParticles3D) GetSubEmitter() NodePath {
	return self.Runtime.GPUParticles3D_get_sub_emitter(self)
}
func (self GPUParticles3D) EmitParticle(xform Transform3D, velocity Vector3, color Color, custom Color, flags int64) {
	self.Runtime.GPUParticles3D_emit_particle(self, xform, velocity, color, custom, flags)
}
func (self GPUParticles3D) SetTrailEnabled(enabled bool) {
	self.Runtime.GPUParticles3D_set_trail_enabled(self, enabled)
}
func (self GPUParticles3D) SetTrailLifetime(secs Float) {
	self.Runtime.GPUParticles3D_set_trail_lifetime(self, secs)
}
func (self GPUParticles3D) IsTrailEnabled() bool {
	return self.Runtime.GPUParticles3D_is_trail_enabled(self)
}
func (self GPUParticles3D) GetTrailLifetime() Float {
	return self.Runtime.GPUParticles3D_get_trail_lifetime(self)
}
func (self GPUParticles3D) SetTransformAlign(align GPUParticles3DTransformAlign) {
	self.Runtime.GPUParticles3D_set_transform_align(self, align)
}
func (self GPUParticles3D) GetTransformAlign() GPUParticles3DTransformAlign {
	return self.Runtime.GPUParticles3D_get_transform_align(self)
}
func (self GPUParticles3D) ConvertFromParticles(particles Node) {
	self.Runtime.GPUParticles3D_convert_from_particles(self, particles)
}
func (self GPUParticles3D) SetAmountRatio(ratio Float) {
	self.Runtime.GPUParticles3D_set_amount_ratio(self, ratio)
}
func (self GPUParticles3D) GetAmountRatio() Float {
	return self.Runtime.GPUParticles3D_get_amount_ratio(self)
}

type extendsGPUParticlesAttractor3D struct {
	_ [0]*extendsGPUParticlesAttractor3D
	class
}

func (self GPUParticlesAttractor3D) VisualInstance3D() VisualInstance3D {
	var parent VisualInstance3D
	parent.class = self.class
	return parent
}
func (self GPUParticlesAttractor3D) SetCullMask(mask int64) {
	self.Runtime.GPUParticlesAttractor3D_set_cull_mask(self, mask)
}
func (self GPUParticlesAttractor3D) GetCullMask() int64 {
	return self.Runtime.GPUParticlesAttractor3D_get_cull_mask(self)
}
func (self GPUParticlesAttractor3D) SetStrength(strength Float) {
	self.Runtime.GPUParticlesAttractor3D_set_strength(self, strength)
}
func (self GPUParticlesAttractor3D) GetStrength() Float {
	return self.Runtime.GPUParticlesAttractor3D_get_strength(self)
}
func (self GPUParticlesAttractor3D) SetAttenuation(attenuation Float) {
	self.Runtime.GPUParticlesAttractor3D_set_attenuation(self, attenuation)
}
func (self GPUParticlesAttractor3D) GetAttenuation() Float {
	return self.Runtime.GPUParticlesAttractor3D_get_attenuation(self)
}
func (self GPUParticlesAttractor3D) SetDirectionality(amount Float) {
	self.Runtime.GPUParticlesAttractor3D_set_directionality(self, amount)
}
func (self GPUParticlesAttractor3D) GetDirectionality() Float {
	return self.Runtime.GPUParticlesAttractor3D_get_directionality(self)
}

type extendsGPUParticlesAttractorBox3D struct {
	_ [0]*extendsGPUParticlesAttractorBox3D
	class
}

func (self GPUParticlesAttractorBox3D) GPUParticlesAttractor3D() GPUParticlesAttractor3D {
	var parent GPUParticlesAttractor3D
	parent.class = self.class
	return parent
}
func (self GPUParticlesAttractorBox3D) SetSize(size Vector3) {
	self.Runtime.GPUParticlesAttractorBox3D_set_size(self, size)
}
func (self GPUParticlesAttractorBox3D) GetSize() Vector3 {
	return self.Runtime.GPUParticlesAttractorBox3D_get_size(self)
}

type extendsGPUParticlesAttractorSphere3D struct {
	_ [0]*extendsGPUParticlesAttractorSphere3D
	class
}

func (self GPUParticlesAttractorSphere3D) GPUParticlesAttractor3D() GPUParticlesAttractor3D {
	var parent GPUParticlesAttractor3D
	parent.class = self.class
	return parent
}
func (self GPUParticlesAttractorSphere3D) SetRadius(radius Float) {
	self.Runtime.GPUParticlesAttractorSphere3D_set_radius(self, radius)
}
func (self GPUParticlesAttractorSphere3D) GetRadius() Float {
	return self.Runtime.GPUParticlesAttractorSphere3D_get_radius(self)
}

type extendsGPUParticlesAttractorVectorField3D struct {
	_ [0]*extendsGPUParticlesAttractorVectorField3D
	class
}

func (self GPUParticlesAttractorVectorField3D) GPUParticlesAttractor3D() GPUParticlesAttractor3D {
	var parent GPUParticlesAttractor3D
	parent.class = self.class
	return parent
}
func (self GPUParticlesAttractorVectorField3D) SetSize(size Vector3) {
	self.Runtime.GPUParticlesAttractorVectorField3D_set_size(self, size)
}
func (self GPUParticlesAttractorVectorField3D) GetSize() Vector3 {
	return self.Runtime.GPUParticlesAttractorVectorField3D_get_size(self)
}
func (self GPUParticlesAttractorVectorField3D) SetTexture(texture Texture3D) {
	self.Runtime.GPUParticlesAttractorVectorField3D_set_texture(self, texture)
}
func (self GPUParticlesAttractorVectorField3D) GetTexture() Texture3D {
	return self.Runtime.GPUParticlesAttractorVectorField3D_get_texture(self)
}

type extendsGPUParticlesCollision3D struct {
	_ [0]*extendsGPUParticlesCollision3D
	class
}

func (self GPUParticlesCollision3D) VisualInstance3D() VisualInstance3D {
	var parent VisualInstance3D
	parent.class = self.class
	return parent
}
func (self GPUParticlesCollision3D) SetCullMask(mask int64) {
	self.Runtime.GPUParticlesCollision3D_set_cull_mask(self, mask)
}
func (self GPUParticlesCollision3D) GetCullMask() int64 {
	return self.Runtime.GPUParticlesCollision3D_get_cull_mask(self)
}

type extendsGPUParticlesCollisionBox3D struct {
	_ [0]*extendsGPUParticlesCollisionBox3D
	class
}

func (self GPUParticlesCollisionBox3D) GPUParticlesCollision3D() GPUParticlesCollision3D {
	var parent GPUParticlesCollision3D
	parent.class = self.class
	return parent
}
func (self GPUParticlesCollisionBox3D) SetSize(size Vector3) {
	self.Runtime.GPUParticlesCollisionBox3D_set_size(self, size)
}
func (self GPUParticlesCollisionBox3D) GetSize() Vector3 {
	return self.Runtime.GPUParticlesCollisionBox3D_get_size(self)
}

type extendsGPUParticlesCollisionHeightField3D struct {
	_ [0]*extendsGPUParticlesCollisionHeightField3D
	class
}

func (self GPUParticlesCollisionHeightField3D) GPUParticlesCollision3D() GPUParticlesCollision3D {
	var parent GPUParticlesCollision3D
	parent.class = self.class
	return parent
}
func (self GPUParticlesCollisionHeightField3D) SetSize(size Vector3) {
	self.Runtime.GPUParticlesCollisionHeightField3D_set_size(self, size)
}
func (self GPUParticlesCollisionHeightField3D) GetSize() Vector3 {
	return self.Runtime.GPUParticlesCollisionHeightField3D_get_size(self)
}
func (self GPUParticlesCollisionHeightField3D) SetResolution(resolution GPUParticlesCollisionHeightField3DResolution) {
	self.Runtime.GPUParticlesCollisionHeightField3D_set_resolution(self, resolution)
}
func (self GPUParticlesCollisionHeightField3D) GetResolution() GPUParticlesCollisionHeightField3DResolution {
	return self.Runtime.GPUParticlesCollisionHeightField3D_get_resolution(self)
}
func (self GPUParticlesCollisionHeightField3D) SetUpdateMode(update_mode GPUParticlesCollisionHeightField3DUpdateMode) {
	self.Runtime.GPUParticlesCollisionHeightField3D_set_update_mode(self, update_mode)
}
func (self GPUParticlesCollisionHeightField3D) GetUpdateMode() GPUParticlesCollisionHeightField3DUpdateMode {
	return self.Runtime.GPUParticlesCollisionHeightField3D_get_update_mode(self)
}
func (self GPUParticlesCollisionHeightField3D) SetFollowCameraEnabled(enabled bool) {
	self.Runtime.GPUParticlesCollisionHeightField3D_set_follow_camera_enabled(self, enabled)
}
func (self GPUParticlesCollisionHeightField3D) IsFollowCameraEnabled() bool {
	return self.Runtime.GPUParticlesCollisionHeightField3D_is_follow_camera_enabled(self)
}

type extendsGPUParticlesCollisionSDF3D struct {
	_ [0]*extendsGPUParticlesCollisionSDF3D
	class
}

func (self GPUParticlesCollisionSDF3D) GPUParticlesCollision3D() GPUParticlesCollision3D {
	var parent GPUParticlesCollision3D
	parent.class = self.class
	return parent
}
func (self GPUParticlesCollisionSDF3D) SetSize(size Vector3) {
	self.Runtime.GPUParticlesCollisionSDF3D_set_size(self, size)
}
func (self GPUParticlesCollisionSDF3D) GetSize() Vector3 {
	return self.Runtime.GPUParticlesCollisionSDF3D_get_size(self)
}
func (self GPUParticlesCollisionSDF3D) SetResolution(resolution GPUParticlesCollisionSDF3DResolution) {
	self.Runtime.GPUParticlesCollisionSDF3D_set_resolution(self, resolution)
}
func (self GPUParticlesCollisionSDF3D) GetResolution() GPUParticlesCollisionSDF3DResolution {
	return self.Runtime.GPUParticlesCollisionSDF3D_get_resolution(self)
}
func (self GPUParticlesCollisionSDF3D) SetTexture(texture Texture3D) {
	self.Runtime.GPUParticlesCollisionSDF3D_set_texture(self, texture)
}
func (self GPUParticlesCollisionSDF3D) GetTexture() Texture3D {
	return self.Runtime.GPUParticlesCollisionSDF3D_get_texture(self)
}
func (self GPUParticlesCollisionSDF3D) SetThickness(thickness Float) {
	self.Runtime.GPUParticlesCollisionSDF3D_set_thickness(self, thickness)
}
func (self GPUParticlesCollisionSDF3D) GetThickness() Float {
	return self.Runtime.GPUParticlesCollisionSDF3D_get_thickness(self)
}
func (self GPUParticlesCollisionSDF3D) SetBakeMask(mask int64) {
	self.Runtime.GPUParticlesCollisionSDF3D_set_bake_mask(self, mask)
}
func (self GPUParticlesCollisionSDF3D) GetBakeMask() int64 {
	return self.Runtime.GPUParticlesCollisionSDF3D_get_bake_mask(self)
}
func (self GPUParticlesCollisionSDF3D) SetBakeMaskValue(layer_number int64, value bool) {
	self.Runtime.GPUParticlesCollisionSDF3D_set_bake_mask_value(self, layer_number, value)
}
func (self GPUParticlesCollisionSDF3D) GetBakeMaskValue(layer_number int64) bool {
	return self.Runtime.GPUParticlesCollisionSDF3D_get_bake_mask_value(self, layer_number)
}

type extendsGPUParticlesCollisionSphere3D struct {
	_ [0]*extendsGPUParticlesCollisionSphere3D
	class
}

func (self GPUParticlesCollisionSphere3D) GPUParticlesCollision3D() GPUParticlesCollision3D {
	var parent GPUParticlesCollision3D
	parent.class = self.class
	return parent
}
func (self GPUParticlesCollisionSphere3D) SetRadius(radius Float) {
	self.Runtime.GPUParticlesCollisionSphere3D_set_radius(self, radius)
}
func (self GPUParticlesCollisionSphere3D) GetRadius() Float {
	return self.Runtime.GPUParticlesCollisionSphere3D_get_radius(self)
}

type extendsGeneric6DOFJoint3D struct {
	_ [0]*extendsGeneric6DOFJoint3D
	class
}

func (self Generic6DOFJoint3D) Joint3D() Joint3D {
	var parent Joint3D
	parent.class = self.class
	return parent
}
func (self Generic6DOFJoint3D) SetParamX(param Generic6DOFJoint3DParam, value Float) {
	self.Runtime.Generic6DOFJoint3D_set_param_x(self, param, value)
}
func (self Generic6DOFJoint3D) GetParamX(param Generic6DOFJoint3DParam) Float {
	return self.Runtime.Generic6DOFJoint3D_get_param_x(self, param)
}
func (self Generic6DOFJoint3D) SetParamY(param Generic6DOFJoint3DParam, value Float) {
	self.Runtime.Generic6DOFJoint3D_set_param_y(self, param, value)
}
func (self Generic6DOFJoint3D) GetParamY(param Generic6DOFJoint3DParam) Float {
	return self.Runtime.Generic6DOFJoint3D_get_param_y(self, param)
}
func (self Generic6DOFJoint3D) SetParamZ(param Generic6DOFJoint3DParam, value Float) {
	self.Runtime.Generic6DOFJoint3D_set_param_z(self, param, value)
}
func (self Generic6DOFJoint3D) GetParamZ(param Generic6DOFJoint3DParam) Float {
	return self.Runtime.Generic6DOFJoint3D_get_param_z(self, param)
}
func (self Generic6DOFJoint3D) SetFlagX(flag Generic6DOFJoint3DFlag, value bool) {
	self.Runtime.Generic6DOFJoint3D_set_flag_x(self, flag, value)
}
func (self Generic6DOFJoint3D) GetFlagX(flag Generic6DOFJoint3DFlag) bool {
	return self.Runtime.Generic6DOFJoint3D_get_flag_x(self, flag)
}
func (self Generic6DOFJoint3D) SetFlagY(flag Generic6DOFJoint3DFlag, value bool) {
	self.Runtime.Generic6DOFJoint3D_set_flag_y(self, flag, value)
}
func (self Generic6DOFJoint3D) GetFlagY(flag Generic6DOFJoint3DFlag) bool {
	return self.Runtime.Generic6DOFJoint3D_get_flag_y(self, flag)
}
func (self Generic6DOFJoint3D) SetFlagZ(flag Generic6DOFJoint3DFlag, value bool) {
	self.Runtime.Generic6DOFJoint3D_set_flag_z(self, flag, value)
}
func (self Generic6DOFJoint3D) GetFlagZ(flag Generic6DOFJoint3DFlag) bool {
	return self.Runtime.Generic6DOFJoint3D_get_flag_z(self, flag)
}

type extendsGeometry2D struct {
	_ [0]*extendsGeometry2D
	class
}

func (self Geometry2D) Object() Object { var parent Object; parent.class = self.class; return parent }
func (self Geometry2D) IsPointInCircle(point Vector2, circle_position Vector2, circle_radius Float) bool {
	return self.Runtime.Geometry2D_is_point_in_circle(self, point, circle_position, circle_radius)
}
func (self Geometry2D) SegmentIntersectsCircle(segment_from Vector2, segment_to Vector2, circle_position Vector2, circle_radius Float) Float {
	return self.Runtime.Geometry2D_segment_intersects_circle(self, segment_from, segment_to, circle_position, circle_radius)
}
func (self Geometry2D) SegmentIntersectsSegment(from_a Vector2, to_a Vector2, from_b Vector2, to_b Vector2) any {
	return self.Runtime.Geometry2D_segment_intersects_segment(self, from_a, to_a, from_b, to_b)
}
func (self Geometry2D) LineIntersectsLine(from_a Vector2, dir_a Vector2, from_b Vector2, dir_b Vector2) any {
	return self.Runtime.Geometry2D_line_intersects_line(self, from_a, dir_a, from_b, dir_b)
}
func (self Geometry2D) GetClosestPointsBetweenSegments(p1 Vector2, q1 Vector2, p2 Vector2, q2 Vector2) PackedVector2Array {
	return self.Runtime.Geometry2D_get_closest_points_between_segments(self, p1, q1, p2, q2)
}
func (self Geometry2D) GetClosestPointToSegment(point Vector2, s1 Vector2, s2 Vector2) Vector2 {
	return self.Runtime.Geometry2D_get_closest_point_to_segment(self, point, s1, s2)
}
func (self Geometry2D) GetClosestPointToSegmentUncapped(point Vector2, s1 Vector2, s2 Vector2) Vector2 {
	return self.Runtime.Geometry2D_get_closest_point_to_segment_uncapped(self, point, s1, s2)
}
func (self Geometry2D) PointIsInsideTriangle(point Vector2, a Vector2, b Vector2, c Vector2) bool {
	return self.Runtime.Geometry2D_point_is_inside_triangle(self, point, a, b, c)
}
func (self Geometry2D) IsPolygonClockwise(polygon PackedVector2Array) bool {
	return self.Runtime.Geometry2D_is_polygon_clockwise(self, polygon)
}
func (self Geometry2D) IsPointInPolygon(point Vector2, polygon PackedVector2Array) bool {
	return self.Runtime.Geometry2D_is_point_in_polygon(self, point, polygon)
}
func (self Geometry2D) TriangulatePolygon(polygon PackedVector2Array) PackedInt32Array {
	return self.Runtime.Geometry2D_triangulate_polygon(self, polygon)
}
func (self Geometry2D) TriangulateDelaunay(points PackedVector2Array) PackedInt32Array {
	return self.Runtime.Geometry2D_triangulate_delaunay(self, points)
}
func (self Geometry2D) ConvexHull(points PackedVector2Array) PackedVector2Array {
	return self.Runtime.Geometry2D_convex_hull(self, points)
}
func (self Geometry2D) DecomposePolygonInConvex(polygon PackedVector2Array) ArrayOf[PackedVector2Array] {
	return self.Runtime.Geometry2D_decompose_polygon_in_convex(self, polygon)
}
func (self Geometry2D) MergePolygons(polygon_a PackedVector2Array, polygon_b PackedVector2Array) ArrayOf[PackedVector2Array] {
	return self.Runtime.Geometry2D_merge_polygons(self, polygon_a, polygon_b)
}
func (self Geometry2D) ClipPolygons(polygon_a PackedVector2Array, polygon_b PackedVector2Array) ArrayOf[PackedVector2Array] {
	return self.Runtime.Geometry2D_clip_polygons(self, polygon_a, polygon_b)
}
func (self Geometry2D) IntersectPolygons(polygon_a PackedVector2Array, polygon_b PackedVector2Array) ArrayOf[PackedVector2Array] {
	return self.Runtime.Geometry2D_intersect_polygons(self, polygon_a, polygon_b)
}
func (self Geometry2D) ExcludePolygons(polygon_a PackedVector2Array, polygon_b PackedVector2Array) ArrayOf[PackedVector2Array] {
	return self.Runtime.Geometry2D_exclude_polygons(self, polygon_a, polygon_b)
}
func (self Geometry2D) ClipPolylineWithPolygon(polyline PackedVector2Array, polygon PackedVector2Array) ArrayOf[PackedVector2Array] {
	return self.Runtime.Geometry2D_clip_polyline_with_polygon(self, polyline, polygon)
}
func (self Geometry2D) IntersectPolylineWithPolygon(polyline PackedVector2Array, polygon PackedVector2Array) ArrayOf[PackedVector2Array] {
	return self.Runtime.Geometry2D_intersect_polyline_with_polygon(self, polyline, polygon)
}
func (self Geometry2D) OffsetPolygon(polygon PackedVector2Array, delta Float, join_type Geometry2DPolyJoinType) ArrayOf[PackedVector2Array] {
	return self.Runtime.Geometry2D_offset_polygon(self, polygon, delta, join_type)
}
func (self Geometry2D) OffsetPolyline(polyline PackedVector2Array, delta Float, join_type Geometry2DPolyJoinType, end_type Geometry2DPolyEndType) ArrayOf[PackedVector2Array] {
	return self.Runtime.Geometry2D_offset_polyline(self, polyline, delta, join_type, end_type)
}
func (self Geometry2D) MakeAtlas(sizes PackedVector2Array) Dictionary {
	return self.Runtime.Geometry2D_make_atlas(self, sizes)
}

type extendsGeometry3D struct {
	_ [0]*extendsGeometry3D
	class
}

func (self Geometry3D) Object() Object { var parent Object; parent.class = self.class; return parent }
func (self Geometry3D) ComputeConvexMeshPoints(planes ArrayOf[Plane]) PackedVector3Array {
	return self.Runtime.Geometry3D_compute_convex_mesh_points(self, planes)
}
func (self Geometry3D) BuildBoxPlanes(extents Vector3) ArrayOf[Plane] {
	return self.Runtime.Geometry3D_build_box_planes(self, extents)
}
func (self Geometry3D) BuildCylinderPlanes(radius Float, height Float, sides int64, axis Vector3Axis) ArrayOf[Plane] {
	return self.Runtime.Geometry3D_build_cylinder_planes(self, radius, height, sides, axis)
}
func (self Geometry3D) BuildCapsulePlanes(radius Float, height Float, sides int64, lats int64, axis Vector3Axis) ArrayOf[Plane] {
	return self.Runtime.Geometry3D_build_capsule_planes(self, radius, height, sides, lats, axis)
}
func (self Geometry3D) GetClosestPointsBetweenSegments(p1 Vector3, p2 Vector3, q1 Vector3, q2 Vector3) PackedVector3Array {
	return self.Runtime.Geometry3D_get_closest_points_between_segments(self, p1, p2, q1, q2)
}
func (self Geometry3D) GetClosestPointToSegment(point Vector3, s1 Vector3, s2 Vector3) Vector3 {
	return self.Runtime.Geometry3D_get_closest_point_to_segment(self, point, s1, s2)
}
func (self Geometry3D) GetClosestPointToSegmentUncapped(point Vector3, s1 Vector3, s2 Vector3) Vector3 {
	return self.Runtime.Geometry3D_get_closest_point_to_segment_uncapped(self, point, s1, s2)
}
func (self Geometry3D) GetTriangleBarycentricCoords(point Vector3, a Vector3, b Vector3, c Vector3) Vector3 {
	return self.Runtime.Geometry3D_get_triangle_barycentric_coords(self, point, a, b, c)
}
func (self Geometry3D) RayIntersectsTriangle(from Vector3, dir Vector3, a Vector3, b Vector3, c Vector3) any {
	return self.Runtime.Geometry3D_ray_intersects_triangle(self, from, dir, a, b, c)
}
func (self Geometry3D) SegmentIntersectsTriangle(from Vector3, to Vector3, a Vector3, b Vector3, c Vector3) any {
	return self.Runtime.Geometry3D_segment_intersects_triangle(self, from, to, a, b, c)
}
func (self Geometry3D) SegmentIntersectsSphere(from Vector3, to Vector3, sphere_position Vector3, sphere_radius Float) PackedVector3Array {
	return self.Runtime.Geometry3D_segment_intersects_sphere(self, from, to, sphere_position, sphere_radius)
}
func (self Geometry3D) SegmentIntersectsCylinder(from Vector3, to Vector3, height Float, radius Float) PackedVector3Array {
	return self.Runtime.Geometry3D_segment_intersects_cylinder(self, from, to, height, radius)
}
func (self Geometry3D) SegmentIntersectsConvex(from Vector3, to Vector3, planes ArrayOf[Plane]) PackedVector3Array {
	return self.Runtime.Geometry3D_segment_intersects_convex(self, from, to, planes)
}
func (self Geometry3D) ClipPolygon(points PackedVector3Array, plane Plane) PackedVector3Array {
	return self.Runtime.Geometry3D_clip_polygon(self, points, plane)
}

type extendsGeometryInstance3D struct {
	_ [0]*extendsGeometryInstance3D
	class
}

func (self GeometryInstance3D) VisualInstance3D() VisualInstance3D {
	var parent VisualInstance3D
	parent.class = self.class
	return parent
}
func (self GeometryInstance3D) SetMaterialOverride(material Material) {
	self.Runtime.GeometryInstance3D_set_material_override(self, material)
}
func (self GeometryInstance3D) GetMaterialOverride() Material {
	return self.Runtime.GeometryInstance3D_get_material_override(self)
}
func (self GeometryInstance3D) SetMaterialOverlay(material Material) {
	self.Runtime.GeometryInstance3D_set_material_overlay(self, material)
}
func (self GeometryInstance3D) GetMaterialOverlay() Material {
	return self.Runtime.GeometryInstance3D_get_material_overlay(self)
}
func (self GeometryInstance3D) SetCastShadowsSetting(shadow_casting_setting GeometryInstance3DShadowCastingSetting) {
	self.Runtime.GeometryInstance3D_set_cast_shadows_setting(self, shadow_casting_setting)
}
func (self GeometryInstance3D) GetCastShadowsSetting() GeometryInstance3DShadowCastingSetting {
	return self.Runtime.GeometryInstance3D_get_cast_shadows_setting(self)
}
func (self GeometryInstance3D) SetLodBias(bias Float) {
	self.Runtime.GeometryInstance3D_set_lod_bias(self, bias)
}
func (self GeometryInstance3D) GetLodBias() Float {
	return self.Runtime.GeometryInstance3D_get_lod_bias(self)
}
func (self GeometryInstance3D) SetTransparency(transparency Float) {
	self.Runtime.GeometryInstance3D_set_transparency(self, transparency)
}
func (self GeometryInstance3D) GetTransparency() Float {
	return self.Runtime.GeometryInstance3D_get_transparency(self)
}
func (self GeometryInstance3D) SetVisibilityRangeEndMargin(distance Float) {
	self.Runtime.GeometryInstance3D_set_visibility_range_end_margin(self, distance)
}
func (self GeometryInstance3D) GetVisibilityRangeEndMargin() Float {
	return self.Runtime.GeometryInstance3D_get_visibility_range_end_margin(self)
}
func (self GeometryInstance3D) SetVisibilityRangeEnd(distance Float) {
	self.Runtime.GeometryInstance3D_set_visibility_range_end(self, distance)
}
func (self GeometryInstance3D) GetVisibilityRangeEnd() Float {
	return self.Runtime.GeometryInstance3D_get_visibility_range_end(self)
}
func (self GeometryInstance3D) SetVisibilityRangeBeginMargin(distance Float) {
	self.Runtime.GeometryInstance3D_set_visibility_range_begin_margin(self, distance)
}
func (self GeometryInstance3D) GetVisibilityRangeBeginMargin() Float {
	return self.Runtime.GeometryInstance3D_get_visibility_range_begin_margin(self)
}
func (self GeometryInstance3D) SetVisibilityRangeBegin(distance Float) {
	self.Runtime.GeometryInstance3D_set_visibility_range_begin(self, distance)
}
func (self GeometryInstance3D) GetVisibilityRangeBegin() Float {
	return self.Runtime.GeometryInstance3D_get_visibility_range_begin(self)
}
func (self GeometryInstance3D) SetVisibilityRangeFadeMode(mode GeometryInstance3DVisibilityRangeFadeMode) {
	self.Runtime.GeometryInstance3D_set_visibility_range_fade_mode(self, mode)
}
func (self GeometryInstance3D) GetVisibilityRangeFadeMode() GeometryInstance3DVisibilityRangeFadeMode {
	return self.Runtime.GeometryInstance3D_get_visibility_range_fade_mode(self)
}
func (self GeometryInstance3D) SetInstanceShaderParameter(name string, value any) {
	self.Runtime.GeometryInstance3D_set_instance_shader_parameter(self, name, value)
}
func (self GeometryInstance3D) GetInstanceShaderParameter(name string) any {
	return self.Runtime.GeometryInstance3D_get_instance_shader_parameter(self, name)
}
func (self GeometryInstance3D) SetExtraCullMargin(margin Float) {
	self.Runtime.GeometryInstance3D_set_extra_cull_margin(self, margin)
}
func (self GeometryInstance3D) GetExtraCullMargin() Float {
	return self.Runtime.GeometryInstance3D_get_extra_cull_margin(self)
}
func (self GeometryInstance3D) SetLightmapScale(scale GeometryInstance3DLightmapScale) {
	self.Runtime.GeometryInstance3D_set_lightmap_scale(self, scale)
}
func (self GeometryInstance3D) GetLightmapScale() GeometryInstance3DLightmapScale {
	return self.Runtime.GeometryInstance3D_get_lightmap_scale(self)
}
func (self GeometryInstance3D) SetGiMode(mode GeometryInstance3DGIMode) {
	self.Runtime.GeometryInstance3D_set_gi_mode(self, mode)
}
func (self GeometryInstance3D) GetGiMode() GeometryInstance3DGIMode {
	return self.Runtime.GeometryInstance3D_get_gi_mode(self)
}
func (self GeometryInstance3D) SetIgnoreOcclusionCulling(ignore_culling bool) {
	self.Runtime.GeometryInstance3D_set_ignore_occlusion_culling(self, ignore_culling)
}
func (self GeometryInstance3D) IsIgnoringOcclusionCulling() bool {
	return self.Runtime.GeometryInstance3D_is_ignoring_occlusion_culling(self)
}
func (self GeometryInstance3D) SetCustomAabb(aabb AABB) {
	self.Runtime.GeometryInstance3D_set_custom_aabb(self, aabb)
}
func (self GeometryInstance3D) GetCustomAabb() AABB {
	return self.Runtime.GeometryInstance3D_get_custom_aabb(self)
}

type extendsGradient struct {
	_ [0]*extendsGradient
	class
}

func (self Gradient) Resource() Resource {
	var parent Resource
	parent.class = self.class
	return parent
}
func (self Gradient) AddPoint(offset Float, color Color) {
	self.Runtime.Gradient_add_point(self, offset, color)
}
func (self Gradient) RemovePoint(point int64) {
	self.Runtime.Gradient_remove_point(self, point)
}
func (self Gradient) SetOffset(point int64, offset Float) {
	self.Runtime.Gradient_set_offset(self, point, offset)
}
func (self Gradient) GetOffset(point int64) Float {
	return self.Runtime.Gradient_get_offset(self, point)
}
func (self Gradient) Reverse() {
	self.Runtime.Gradient_reverse(self)
}
func (self Gradient) SetColor(point int64, color Color) {
	self.Runtime.Gradient_set_color(self, point, color)
}
func (self Gradient) GetColor(point int64) Color {
	return self.Runtime.Gradient_get_color(self, point)
}
func (self Gradient) Sample(offset Float) Color {
	return self.Runtime.Gradient_sample(self, offset)
}
func (self Gradient) GetPointCount() int64 {
	return self.Runtime.Gradient_get_point_count(self)
}
func (self Gradient) SetOffsets(offsets PackedFloat32Array) {
	self.Runtime.Gradient_set_offsets(self, offsets)
}
func (self Gradient) GetOffsets() PackedFloat32Array {
	return self.Runtime.Gradient_get_offsets(self)
}
func (self Gradient) SetColors(colors PackedColorArray) {
	self.Runtime.Gradient_set_colors(self, colors)
}
func (self Gradient) GetColors() PackedColorArray {
	return self.Runtime.Gradient_get_colors(self)
}
func (self Gradient) SetInterpolationMode(interpolation_mode GradientInterpolationMode) {
	self.Runtime.Gradient_set_interpolation_mode(self, interpolation_mode)
}
func (self Gradient) GetInterpolationMode() GradientInterpolationMode {
	return self.Runtime.Gradient_get_interpolation_mode(self)
}
func (self Gradient) SetInterpolationColorSpace(interpolation_color_space GradientColorSpace) {
	self.Runtime.Gradient_set_interpolation_color_space(self, interpolation_color_space)
}
func (self Gradient) GetInterpolationColorSpace() GradientColorSpace {
	return self.Runtime.Gradient_get_interpolation_color_space(self)
}

type extendsGradientTexture1D struct {
	_ [0]*extendsGradientTexture1D
	class
}

func (self GradientTexture1D) Texture2D() Texture2D {
	var parent Texture2D
	parent.class = self.class
	return parent
}
func (self GradientTexture1D) SetGradient(gradient Gradient) {
	self.Runtime.GradientTexture1D_set_gradient(self, gradient)
}
func (self GradientTexture1D) GetGradient() Gradient {
	return self.Runtime.GradientTexture1D_get_gradient(self)
}
func (self GradientTexture1D) SetWidth(width int64) {
	self.Runtime.GradientTexture1D_set_width(self, width)
}
func (self GradientTexture1D) SetUseHdr(enabled bool) {
	self.Runtime.GradientTexture1D_set_use_hdr(self, enabled)
}
func (self GradientTexture1D) IsUsingHdr() bool {
	return self.Runtime.GradientTexture1D_is_using_hdr(self)
}

type extendsGradientTexture2D struct {
	_ [0]*extendsGradientTexture2D
	class
}

func (self GradientTexture2D) Texture2D() Texture2D {
	var parent Texture2D
	parent.class = self.class
	return parent
}
func (self GradientTexture2D) SetGradient(gradient Gradient) {
	self.Runtime.GradientTexture2D_set_gradient(self, gradient)
}
func (self GradientTexture2D) GetGradient() Gradient {
	return self.Runtime.GradientTexture2D_get_gradient(self)
}
func (self GradientTexture2D) SetWidth(width int64) {
	self.Runtime.GradientTexture2D_set_width(self, width)
}
func (self GradientTexture2D) SetHeight(height int64) {
	self.Runtime.GradientTexture2D_set_height(self, height)
}
func (self GradientTexture2D) SetUseHdr(enabled bool) {
	self.Runtime.GradientTexture2D_set_use_hdr(self, enabled)
}
func (self GradientTexture2D) IsUsingHdr() bool {
	return self.Runtime.GradientTexture2D_is_using_hdr(self)
}
func (self GradientTexture2D) SetFill(fill GradientTexture2DFill) {
	self.Runtime.GradientTexture2D_set_fill(self, fill)
}
func (self GradientTexture2D) GetFill() GradientTexture2DFill {
	return self.Runtime.GradientTexture2D_get_fill(self)
}
func (self GradientTexture2D) SetFillFrom(fill_from Vector2) {
	self.Runtime.GradientTexture2D_set_fill_from(self, fill_from)
}
func (self GradientTexture2D) GetFillFrom() Vector2 {
	return self.Runtime.GradientTexture2D_get_fill_from(self)
}
func (self GradientTexture2D) SetFillTo(fill_to Vector2) {
	self.Runtime.GradientTexture2D_set_fill_to(self, fill_to)
}
func (self GradientTexture2D) GetFillTo() Vector2 {
	return self.Runtime.GradientTexture2D_get_fill_to(self)
}
func (self GradientTexture2D) SetRepeat(repeat GradientTexture2DRepeat) {
	self.Runtime.GradientTexture2D_set_repeat(self, repeat)
}
func (self GradientTexture2D) GetRepeat() GradientTexture2DRepeat {
	return self.Runtime.GradientTexture2D_get_repeat(self)
}

type extendsGraphEdit struct {
	_ [0]*extendsGraphEdit
	class
}

func (self GraphEdit) Control() Control { var parent Control; parent.class = self.class; return parent }
func (self GraphEdit) ConnectNode(from_node string, from_port int64, to_node string, to_port int64) int64 {
	return self.Runtime.GraphEdit_connect_node(self, from_node, from_port, to_node, to_port)
}
func (self GraphEdit) IsNodeConnected(from_node string, from_port int64, to_node string, to_port int64) bool {
	return self.Runtime.GraphEdit_is_node_connected(self, from_node, from_port, to_node, to_port)
}
func (self GraphEdit) DisconnectNode(from_node string, from_port int64, to_node string, to_port int64) {
	self.Runtime.GraphEdit_disconnect_node(self, from_node, from_port, to_node, to_port)
}
func (self GraphEdit) SetConnectionActivity(from_node string, from_port int64, to_node string, to_port int64, amount Float) {
	self.Runtime.GraphEdit_set_connection_activity(self, from_node, from_port, to_node, to_port, amount)
}
func (self GraphEdit) GetConnectionList() ArrayOf[Dictionary] {
	return self.Runtime.GraphEdit_get_connection_list(self)
}
func (self GraphEdit) ClearConnections() {
	self.Runtime.GraphEdit_clear_connections(self)
}
func (self GraphEdit) ForceConnectionDragEnd() {
	self.Runtime.GraphEdit_force_connection_drag_end(self)
}
func (self GraphEdit) GetScrollOffset() Vector2 {
	return self.Runtime.GraphEdit_get_scroll_offset(self)
}
func (self GraphEdit) SetScrollOffset(offset Vector2) {
	self.Runtime.GraphEdit_set_scroll_offset(self, offset)
}
func (self GraphEdit) AddValidRightDisconnectType(atype int64) {
	self.Runtime.GraphEdit_add_valid_right_disconnect_type(self, atype)
}
func (self GraphEdit) RemoveValidRightDisconnectType(atype int64) {
	self.Runtime.GraphEdit_remove_valid_right_disconnect_type(self, atype)
}
func (self GraphEdit) AddValidLeftDisconnectType(atype int64) {
	self.Runtime.GraphEdit_add_valid_left_disconnect_type(self, atype)
}
func (self GraphEdit) RemoveValidLeftDisconnectType(atype int64) {
	self.Runtime.GraphEdit_remove_valid_left_disconnect_type(self, atype)
}
func (self GraphEdit) AddValidConnectionType(from_type int64, to_type int64) {
	self.Runtime.GraphEdit_add_valid_connection_type(self, from_type, to_type)
}
func (self GraphEdit) RemoveValidConnectionType(from_type int64, to_type int64) {
	self.Runtime.GraphEdit_remove_valid_connection_type(self, from_type, to_type)
}
func (self GraphEdit) IsValidConnectionType(from_type int64, to_type int64) bool {
	return self.Runtime.GraphEdit_is_valid_connection_type(self, from_type, to_type)
}
func (self GraphEdit) GetConnectionLine(from_node Vector2, to_node Vector2) PackedVector2Array {
	return self.Runtime.GraphEdit_get_connection_line(self, from_node, to_node)
}
func (self GraphEdit) SetPanningScheme(scheme GraphEditPanningScheme) {
	self.Runtime.GraphEdit_set_panning_scheme(self, scheme)
}
func (self GraphEdit) GetPanningScheme() GraphEditPanningScheme {
	return self.Runtime.GraphEdit_get_panning_scheme(self)
}
func (self GraphEdit) SetZoom(zoom Float) {
	self.Runtime.GraphEdit_set_zoom(self, zoom)
}
func (self GraphEdit) GetZoom() Float {
	return self.Runtime.GraphEdit_get_zoom(self)
}
func (self GraphEdit) SetZoomMin(zoom_min Float) {
	self.Runtime.GraphEdit_set_zoom_min(self, zoom_min)
}
func (self GraphEdit) GetZoomMin() Float {
	return self.Runtime.GraphEdit_get_zoom_min(self)
}
func (self GraphEdit) SetZoomMax(zoom_max Float) {
	self.Runtime.GraphEdit_set_zoom_max(self, zoom_max)
}
func (self GraphEdit) GetZoomMax() Float {
	return self.Runtime.GraphEdit_get_zoom_max(self)
}
func (self GraphEdit) SetZoomStep(zoom_step Float) {
	self.Runtime.GraphEdit_set_zoom_step(self, zoom_step)
}
func (self GraphEdit) GetZoomStep() Float {
	return self.Runtime.GraphEdit_get_zoom_step(self)
}
func (self GraphEdit) SetShowGrid(enable bool) {
	self.Runtime.GraphEdit_set_show_grid(self, enable)
}
func (self GraphEdit) IsShowingGrid() bool {
	return self.Runtime.GraphEdit_is_showing_grid(self)
}
func (self GraphEdit) SetGridPattern(pattern GraphEditGridPattern) {
	self.Runtime.GraphEdit_set_grid_pattern(self, pattern)
}
func (self GraphEdit) GetGridPattern() GraphEditGridPattern {
	return self.Runtime.GraphEdit_get_grid_pattern(self)
}
func (self GraphEdit) SetSnappingEnabled(enable bool) {
	self.Runtime.GraphEdit_set_snapping_enabled(self, enable)
}
func (self GraphEdit) IsSnappingEnabled() bool {
	return self.Runtime.GraphEdit_is_snapping_enabled(self)
}
func (self GraphEdit) SetSnappingDistance(pixels int64) {
	self.Runtime.GraphEdit_set_snapping_distance(self, pixels)
}
func (self GraphEdit) GetSnappingDistance() int64 {
	return self.Runtime.GraphEdit_get_snapping_distance(self)
}
func (self GraphEdit) SetConnectionLinesCurvature(curvature Float) {
	self.Runtime.GraphEdit_set_connection_lines_curvature(self, curvature)
}
func (self GraphEdit) GetConnectionLinesCurvature() Float {
	return self.Runtime.GraphEdit_get_connection_lines_curvature(self)
}
func (self GraphEdit) SetConnectionLinesThickness(pixels Float) {
	self.Runtime.GraphEdit_set_connection_lines_thickness(self, pixels)
}
func (self GraphEdit) GetConnectionLinesThickness() Float {
	return self.Runtime.GraphEdit_get_connection_lines_thickness(self)
}
func (self GraphEdit) SetConnectionLinesAntialiased(pixels bool) {
	self.Runtime.GraphEdit_set_connection_lines_antialiased(self, pixels)
}
func (self GraphEdit) IsConnectionLinesAntialiased() bool {
	return self.Runtime.GraphEdit_is_connection_lines_antialiased(self)
}
func (self GraphEdit) SetMinimapSize(size Vector2) {
	self.Runtime.GraphEdit_set_minimap_size(self, size)
}
func (self GraphEdit) GetMinimapSize() Vector2 {
	return self.Runtime.GraphEdit_get_minimap_size(self)
}
func (self GraphEdit) SetMinimapOpacity(opacity Float) {
	self.Runtime.GraphEdit_set_minimap_opacity(self, opacity)
}
func (self GraphEdit) GetMinimapOpacity() Float {
	return self.Runtime.GraphEdit_get_minimap_opacity(self)
}
func (self GraphEdit) SetMinimapEnabled(enable bool) {
	self.Runtime.GraphEdit_set_minimap_enabled(self, enable)
}
func (self GraphEdit) IsMinimapEnabled() bool {
	return self.Runtime.GraphEdit_is_minimap_enabled(self)
}
func (self GraphEdit) SetShowMenu(hidden bool) {
	self.Runtime.GraphEdit_set_show_menu(self, hidden)
}
func (self GraphEdit) IsShowingMenu() bool {
	return self.Runtime.GraphEdit_is_showing_menu(self)
}
func (self GraphEdit) SetShowZoomLabel(enable bool) {
	self.Runtime.GraphEdit_set_show_zoom_label(self, enable)
}
func (self GraphEdit) IsShowingZoomLabel() bool {
	return self.Runtime.GraphEdit_is_showing_zoom_label(self)
}
func (self GraphEdit) SetShowGridButtons(hidden bool) {
	self.Runtime.GraphEdit_set_show_grid_buttons(self, hidden)
}
func (self GraphEdit) IsShowingGridButtons() bool {
	return self.Runtime.GraphEdit_is_showing_grid_buttons(self)
}
func (self GraphEdit) SetShowZoomButtons(hidden bool) {
	self.Runtime.GraphEdit_set_show_zoom_buttons(self, hidden)
}
func (self GraphEdit) IsShowingZoomButtons() bool {
	return self.Runtime.GraphEdit_is_showing_zoom_buttons(self)
}
func (self GraphEdit) SetShowMinimapButton(hidden bool) {
	self.Runtime.GraphEdit_set_show_minimap_button(self, hidden)
}
func (self GraphEdit) IsShowingMinimapButton() bool {
	return self.Runtime.GraphEdit_is_showing_minimap_button(self)
}
func (self GraphEdit) SetShowArrangeButton(hidden bool) {
	self.Runtime.GraphEdit_set_show_arrange_button(self, hidden)
}
func (self GraphEdit) IsShowingArrangeButton() bool {
	return self.Runtime.GraphEdit_is_showing_arrange_button(self)
}
func (self GraphEdit) SetRightDisconnects(enable bool) {
	self.Runtime.GraphEdit_set_right_disconnects(self, enable)
}
func (self GraphEdit) IsRightDisconnectsEnabled() bool {
	return self.Runtime.GraphEdit_is_right_disconnects_enabled(self)
}
func (self GraphEdit) GetMenuHbox() HBoxContainer {
	return self.Runtime.GraphEdit_get_menu_hbox(self)
}
func (self GraphEdit) ArrangeNodes() {
	self.Runtime.GraphEdit_arrange_nodes(self)
}
func (self GraphEdit) SetSelected(node Node) {
	self.Runtime.GraphEdit_set_selected(self, node)
}

type extendsGraphElement struct {
	_ [0]*extendsGraphElement
	class
}

func (self GraphElement) Container() Container {
	var parent Container
	parent.class = self.class
	return parent
}
func (self GraphElement) SetResizable(resizable bool) {
	self.Runtime.GraphElement_set_resizable(self, resizable)
}
func (self GraphElement) IsResizable() bool {
	return self.Runtime.GraphElement_is_resizable(self)
}
func (self GraphElement) SetDraggable(draggable bool) {
	self.Runtime.GraphElement_set_draggable(self, draggable)
}
func (self GraphElement) IsDraggable() bool {
	return self.Runtime.GraphElement_is_draggable(self)
}
func (self GraphElement) SetSelectable(selectable bool) {
	self.Runtime.GraphElement_set_selectable(self, selectable)
}
func (self GraphElement) IsSelectable() bool {
	return self.Runtime.GraphElement_is_selectable(self)
}
func (self GraphElement) SetSelected(selected bool) {
	self.Runtime.GraphElement_set_selected(self, selected)
}
func (self GraphElement) IsSelected() bool {
	return self.Runtime.GraphElement_is_selected(self)
}
func (self GraphElement) SetPositionOffset(offset Vector2) {
	self.Runtime.GraphElement_set_position_offset(self, offset)
}
func (self GraphElement) GetPositionOffset() Vector2 {
	return self.Runtime.GraphElement_get_position_offset(self)
}

type extendsGraphNode struct {
	_ [0]*extendsGraphNode
	class
}

func (self GraphNode) GraphElement() GraphElement {
	var parent GraphElement
	parent.class = self.class
	return parent
}
func (self GraphNode) SetTitle(title string) {
	self.Runtime.GraphNode_set_title(self, title)
}
func (self GraphNode) GetTitle() string {
	return self.Runtime.GraphNode_get_title(self)
}
func (self GraphNode) GetTitlebarHbox() HBoxContainer {
	return self.Runtime.GraphNode_get_titlebar_hbox(self)
}
func (self GraphNode) SetSlot(slot_index int64, enable_left_port bool, type_left int64, color_left Color, enable_right_port bool, type_right int64, color_right Color, custom_icon_left Texture2D, custom_icon_right Texture2D, draw_stylebox bool) {
	self.Runtime.GraphNode_set_slot(self, slot_index, enable_left_port, type_left, color_left, enable_right_port, type_right, color_right, custom_icon_left, custom_icon_right, draw_stylebox)
}
func (self GraphNode) ClearSlot(slot_index int64) {
	self.Runtime.GraphNode_clear_slot(self, slot_index)
}
func (self GraphNode) ClearAllSlots() {
	self.Runtime.GraphNode_clear_all_slots(self)
}
func (self GraphNode) IsSlotEnabledLeft(slot_index int64) bool {
	return self.Runtime.GraphNode_is_slot_enabled_left(self, slot_index)
}
func (self GraphNode) SetSlotEnabledLeft(slot_index int64, enable bool) {
	self.Runtime.GraphNode_set_slot_enabled_left(self, slot_index, enable)
}
func (self GraphNode) SetSlotTypeLeft(slot_index int64, atype int64) {
	self.Runtime.GraphNode_set_slot_type_left(self, slot_index, atype)
}
func (self GraphNode) GetSlotTypeLeft(slot_index int64) int64 {
	return self.Runtime.GraphNode_get_slot_type_left(self, slot_index)
}
func (self GraphNode) SetSlotColorLeft(slot_index int64, color Color) {
	self.Runtime.GraphNode_set_slot_color_left(self, slot_index, color)
}
func (self GraphNode) GetSlotColorLeft(slot_index int64) Color {
	return self.Runtime.GraphNode_get_slot_color_left(self, slot_index)
}
func (self GraphNode) IsSlotEnabledRight(slot_index int64) bool {
	return self.Runtime.GraphNode_is_slot_enabled_right(self, slot_index)
}
func (self GraphNode) SetSlotEnabledRight(slot_index int64, enable bool) {
	self.Runtime.GraphNode_set_slot_enabled_right(self, slot_index, enable)
}
func (self GraphNode) SetSlotTypeRight(slot_index int64, atype int64) {
	self.Runtime.GraphNode_set_slot_type_right(self, slot_index, atype)
}
func (self GraphNode) GetSlotTypeRight(slot_index int64) int64 {
	return self.Runtime.GraphNode_get_slot_type_right(self, slot_index)
}
func (self GraphNode) SetSlotColorRight(slot_index int64, color Color) {
	self.Runtime.GraphNode_set_slot_color_right(self, slot_index, color)
}
func (self GraphNode) GetSlotColorRight(slot_index int64) Color {
	return self.Runtime.GraphNode_get_slot_color_right(self, slot_index)
}
func (self GraphNode) IsSlotDrawStylebox(slot_index int64) bool {
	return self.Runtime.GraphNode_is_slot_draw_stylebox(self, slot_index)
}
func (self GraphNode) SetSlotDrawStylebox(slot_index int64, enable bool) {
	self.Runtime.GraphNode_set_slot_draw_stylebox(self, slot_index, enable)
}
func (self GraphNode) GetInputPortCount() int64 {
	return self.Runtime.GraphNode_get_input_port_count(self)
}
func (self GraphNode) GetInputPortPosition(port_idx int64) Vector2 {
	return self.Runtime.GraphNode_get_input_port_position(self, port_idx)
}
func (self GraphNode) GetInputPortType(port_idx int64) int64 {
	return self.Runtime.GraphNode_get_input_port_type(self, port_idx)
}
func (self GraphNode) GetInputPortColor(port_idx int64) Color {
	return self.Runtime.GraphNode_get_input_port_color(self, port_idx)
}
func (self GraphNode) GetInputPortSlot(port_idx int64) int64 {
	return self.Runtime.GraphNode_get_input_port_slot(self, port_idx)
}
func (self GraphNode) GetOutputPortCount() int64 {
	return self.Runtime.GraphNode_get_output_port_count(self)
}
func (self GraphNode) GetOutputPortPosition(port_idx int64) Vector2 {
	return self.Runtime.GraphNode_get_output_port_position(self, port_idx)
}
func (self GraphNode) GetOutputPortType(port_idx int64) int64 {
	return self.Runtime.GraphNode_get_output_port_type(self, port_idx)
}
func (self GraphNode) GetOutputPortColor(port_idx int64) Color {
	return self.Runtime.GraphNode_get_output_port_color(self, port_idx)
}
func (self GraphNode) GetOutputPortSlot(port_idx int64) int64 {
	return self.Runtime.GraphNode_get_output_port_slot(self, port_idx)
}

type extendsGridContainer struct {
	_ [0]*extendsGridContainer
	class
}

func (self GridContainer) Container() Container {
	var parent Container
	parent.class = self.class
	return parent
}
func (self GridContainer) SetColumns(columns int64) {
	self.Runtime.GridContainer_set_columns(self, columns)
}
func (self GridContainer) GetColumns() int64 {
	return self.Runtime.GridContainer_get_columns(self)
}

type extendsGridMap struct {
	_ [0]*extendsGridMap
	class
}

func (self GridMap) Node3D() Node3D { var parent Node3D; parent.class = self.class; return parent }
func (self GridMap) SetCollisionLayer(layer int64) {
	self.Runtime.GridMap_set_collision_layer(self, layer)
}
func (self GridMap) GetCollisionLayer() int64 {
	return self.Runtime.GridMap_get_collision_layer(self)
}
func (self GridMap) SetCollisionMask(mask int64) {
	self.Runtime.GridMap_set_collision_mask(self, mask)
}
func (self GridMap) GetCollisionMask() int64 {
	return self.Runtime.GridMap_get_collision_mask(self)
}
func (self GridMap) SetCollisionMaskValue(layer_number int64, value bool) {
	self.Runtime.GridMap_set_collision_mask_value(self, layer_number, value)
}
func (self GridMap) GetCollisionMaskValue(layer_number int64) bool {
	return self.Runtime.GridMap_get_collision_mask_value(self, layer_number)
}
func (self GridMap) SetCollisionLayerValue(layer_number int64, value bool) {
	self.Runtime.GridMap_set_collision_layer_value(self, layer_number, value)
}
func (self GridMap) GetCollisionLayerValue(layer_number int64) bool {
	return self.Runtime.GridMap_get_collision_layer_value(self, layer_number)
}
func (self GridMap) SetCollisionPriority(priority Float) {
	self.Runtime.GridMap_set_collision_priority(self, priority)
}
func (self GridMap) GetCollisionPriority() Float {
	return self.Runtime.GridMap_get_collision_priority(self)
}
func (self GridMap) SetPhysicsMaterial(material PhysicsMaterial) {
	self.Runtime.GridMap_set_physics_material(self, material)
}
func (self GridMap) GetPhysicsMaterial() PhysicsMaterial {
	return self.Runtime.GridMap_get_physics_material(self)
}
func (self GridMap) SetBakeNavigation(bake_navigation bool) {
	self.Runtime.GridMap_set_bake_navigation(self, bake_navigation)
}
func (self GridMap) IsBakingNavigation() bool {
	return self.Runtime.GridMap_is_baking_navigation(self)
}
func (self GridMap) SetNavigationMap(navigation_map RID) {
	self.Runtime.GridMap_set_navigation_map(self, navigation_map)
}
func (self GridMap) GetNavigationMap() RID {
	return self.Runtime.GridMap_get_navigation_map(self)
}
func (self GridMap) SetMeshLibrary(mesh_library MeshLibrary) {
	self.Runtime.GridMap_set_mesh_library(self, mesh_library)
}
func (self GridMap) GetMeshLibrary() MeshLibrary {
	return self.Runtime.GridMap_get_mesh_library(self)
}
func (self GridMap) SetCellSize(size Vector3) {
	self.Runtime.GridMap_set_cell_size(self, size)
}
func (self GridMap) GetCellSize() Vector3 {
	return self.Runtime.GridMap_get_cell_size(self)
}
func (self GridMap) SetCellScale(scale Float) {
	self.Runtime.GridMap_set_cell_scale(self, scale)
}
func (self GridMap) GetCellScale() Float {
	return self.Runtime.GridMap_get_cell_scale(self)
}
func (self GridMap) SetOctantSize(size int64) {
	self.Runtime.GridMap_set_octant_size(self, size)
}
func (self GridMap) GetOctantSize() int64 {
	return self.Runtime.GridMap_get_octant_size(self)
}
func (self GridMap) SetCellItem(position Vector3i, item int64, orientation int64) {
	self.Runtime.GridMap_set_cell_item(self, position, item, orientation)
}
func (self GridMap) GetCellItem(position Vector3i) int64 {
	return self.Runtime.GridMap_get_cell_item(self, position)
}
func (self GridMap) GetCellItemOrientation(position Vector3i) int64 {
	return self.Runtime.GridMap_get_cell_item_orientation(self, position)
}
func (self GridMap) GetCellItemBasis(position Vector3i) Basis {
	return self.Runtime.GridMap_get_cell_item_basis(self, position)
}
func (self GridMap) GetBasisWithOrthogonalIndex(index int64) Basis {
	return self.Runtime.GridMap_get_basis_with_orthogonal_index(self, index)
}
func (self GridMap) GetOrthogonalIndexFromBasis(basis Basis) int64 {
	return self.Runtime.GridMap_get_orthogonal_index_from_basis(self, basis)
}
func (self GridMap) LocalToMap(local_position Vector3) Vector3i {
	return self.Runtime.GridMap_local_to_map(self, local_position)
}
func (self GridMap) MapToLocal(map_position Vector3i) Vector3 {
	return self.Runtime.GridMap_map_to_local(self, map_position)
}
func (self GridMap) ResourceChanged(resource Resource) {
	self.Runtime.GridMap_resource_changed(self, resource)
}
func (self GridMap) SetCenterX(enable bool) {
	self.Runtime.GridMap_set_center_x(self, enable)
}
func (self GridMap) GetCenterX() bool {
	return self.Runtime.GridMap_get_center_x(self)
}
func (self GridMap) SetCenterY(enable bool) {
	self.Runtime.GridMap_set_center_y(self, enable)
}
func (self GridMap) GetCenterY() bool {
	return self.Runtime.GridMap_get_center_y(self)
}
func (self GridMap) SetCenterZ(enable bool) {
	self.Runtime.GridMap_set_center_z(self, enable)
}
func (self GridMap) GetCenterZ() bool {
	return self.Runtime.GridMap_get_center_z(self)
}
func (self GridMap) Clear() {
	self.Runtime.GridMap_clear(self)
}
func (self GridMap) GetUsedCells() ArrayOf[Vector3i] {
	return self.Runtime.GridMap_get_used_cells(self)
}
func (self GridMap) GetUsedCellsByItem(item int64) ArrayOf[Vector3i] {
	return self.Runtime.GridMap_get_used_cells_by_item(self, item)
}
func (self GridMap) GetMeshes() Array {
	return self.Runtime.GridMap_get_meshes(self)
}
func (self GridMap) GetBakeMeshes() Array {
	return self.Runtime.GridMap_get_bake_meshes(self)
}
func (self GridMap) GetBakeMeshInstance(idx int64) RID {
	return self.Runtime.GridMap_get_bake_mesh_instance(self, idx)
}
func (self GridMap) ClearBakedMeshes() {
	self.Runtime.GridMap_clear_baked_meshes(self)
}
func (self GridMap) MakeBakedMeshes(gen_lightmap_uv bool, lightmap_uv_texel_size Float) {
	self.Runtime.GridMap_make_baked_meshes(self, gen_lightmap_uv, lightmap_uv_texel_size)
}

type extendsGrooveJoint2D struct {
	_ [0]*extendsGrooveJoint2D
	class
}

func (self GrooveJoint2D) Joint2D() Joint2D {
	var parent Joint2D
	parent.class = self.class
	return parent
}
func (self GrooveJoint2D) SetLength(length Float) {
	self.Runtime.GrooveJoint2D_set_length(self, length)
}
func (self GrooveJoint2D) GetLength() Float {
	return self.Runtime.GrooveJoint2D_get_length(self)
}
func (self GrooveJoint2D) SetInitialOffset(offset Float) {
	self.Runtime.GrooveJoint2D_set_initial_offset(self, offset)
}
func (self GrooveJoint2D) GetInitialOffset() Float {
	return self.Runtime.GrooveJoint2D_get_initial_offset(self)
}

type extendsHBoxContainer struct {
	_ [0]*extendsHBoxContainer
	class
}

func (self HBoxContainer) BoxContainer() BoxContainer {
	var parent BoxContainer
	parent.class = self.class
	return parent
}

type extendsHFlowContainer struct {
	_ [0]*extendsHFlowContainer
	class
}

func (self HFlowContainer) FlowContainer() FlowContainer {
	var parent FlowContainer
	parent.class = self.class
	return parent
}

type extendsHMACContext struct {
	_ [0]*extendsHMACContext
	class
}

func (self HMACContext) RefCounted() RefCounted {
	var parent RefCounted
	parent.class = self.class
	return parent
}
func (self HMACContext) Start(hash_type HashingContextHashType, key PackedByteArray) int64 {
	return self.Runtime.HMACContext_start(self, hash_type, key)
}
func (self HMACContext) Update(data PackedByteArray) int64 {
	return self.Runtime.HMACContext_update(self, data)
}
func (self HMACContext) Finish() PackedByteArray {
	return self.Runtime.HMACContext_finish(self)
}

type extendsHScrollBar struct {
	_ [0]*extendsHScrollBar
	class
}

func (self HScrollBar) ScrollBar() ScrollBar {
	var parent ScrollBar
	parent.class = self.class
	return parent
}

type extendsHSeparator struct {
	_ [0]*extendsHSeparator
	class
}

func (self HSeparator) Separator() Separator {
	var parent Separator
	parent.class = self.class
	return parent
}

type extendsHSlider struct {
	_ [0]*extendsHSlider
	class
}

func (self HSlider) Slider() Slider { var parent Slider; parent.class = self.class; return parent }

type extendsHSplitContainer struct {
	_ [0]*extendsHSplitContainer
	class
}

func (self HSplitContainer) SplitContainer() SplitContainer {
	var parent SplitContainer
	parent.class = self.class
	return parent
}

type extendsHTTPClient struct {
	_ [0]*extendsHTTPClient
	class
}

func (self HTTPClient) RefCounted() RefCounted {
	var parent RefCounted
	parent.class = self.class
	return parent
}
func (self HTTPClient) ConnectToHost(host string, port int64, tls_options TLSOptions) int64 {
	return self.Runtime.HTTPClient_connect_to_host(self, host, port, tls_options)
}
func (self HTTPClient) SetConnection(connection StreamPeer) {
	self.Runtime.HTTPClient_set_connection(self, connection)
}
func (self HTTPClient) GetConnection() StreamPeer {
	return self.Runtime.HTTPClient_get_connection(self)
}
func (self HTTPClient) RequestRaw(method HTTPClientMethod, url string, headers PackedStringArray, body PackedByteArray) int64 {
	return self.Runtime.HTTPClient_request_raw(self, method, url, headers, body)
}
func (self HTTPClient) Request(method HTTPClientMethod, url string, headers PackedStringArray, body string) int64 {
	return self.Runtime.HTTPClient_request(self, method, url, headers, body)
}
func (self HTTPClient) Close() {
	self.Runtime.HTTPClient_close(self)
}
func (self HTTPClient) HasResponse() bool {
	return self.Runtime.HTTPClient_has_response(self)
}
func (self HTTPClient) IsResponseChunked() bool {
	return self.Runtime.HTTPClient_is_response_chunked(self)
}
func (self HTTPClient) GetResponseCode() int64 {
	return self.Runtime.HTTPClient_get_response_code(self)
}
func (self HTTPClient) GetResponseHeaders() PackedStringArray {
	return self.Runtime.HTTPClient_get_response_headers(self)
}
func (self HTTPClient) GetResponseHeadersAsDictionary() Dictionary {
	return self.Runtime.HTTPClient_get_response_headers_as_dictionary(self)
}
func (self HTTPClient) GetResponseBodyLength() int64 {
	return self.Runtime.HTTPClient_get_response_body_length(self)
}
func (self HTTPClient) ReadResponseBodyChunk() PackedByteArray {
	return self.Runtime.HTTPClient_read_response_body_chunk(self)
}
func (self HTTPClient) SetReadChunkSize(bytes int64) {
	self.Runtime.HTTPClient_set_read_chunk_size(self, bytes)
}
func (self HTTPClient) GetReadChunkSize() int64 {
	return self.Runtime.HTTPClient_get_read_chunk_size(self)
}
func (self HTTPClient) SetBlockingMode(enabled bool) {
	self.Runtime.HTTPClient_set_blocking_mode(self, enabled)
}
func (self HTTPClient) IsBlockingModeEnabled() bool {
	return self.Runtime.HTTPClient_is_blocking_mode_enabled(self)
}
func (self HTTPClient) GetStatus() HTTPClientStatus {
	return self.Runtime.HTTPClient_get_status(self)
}
func (self HTTPClient) Poll() int64 {
	return self.Runtime.HTTPClient_poll(self)
}
func (self HTTPClient) SetHttpProxy(host string, port int64) {
	self.Runtime.HTTPClient_set_http_proxy(self, host, port)
}
func (self HTTPClient) SetHttpsProxy(host string, port int64) {
	self.Runtime.HTTPClient_set_https_proxy(self, host, port)
}
func (self HTTPClient) QueryStringFromDict(fields Dictionary) string {
	return self.Runtime.HTTPClient_query_string_from_dict(self, fields)
}

type extendsHTTPRequest struct {
	_ [0]*extendsHTTPRequest
	class
}

func (self HTTPRequest) Node() Node { var parent Node; parent.class = self.class; return parent }
func (self HTTPRequest) Request(url string, custom_headers PackedStringArray, method HTTPClientMethod, request_data string) int64 {
	return self.Runtime.HTTPRequest_request(self, url, custom_headers, method, request_data)
}
func (self HTTPRequest) RequestRaw(url string, custom_headers PackedStringArray, method HTTPClientMethod, request_data_raw PackedByteArray) int64 {
	return self.Runtime.HTTPRequest_request_raw(self, url, custom_headers, method, request_data_raw)
}
func (self HTTPRequest) CancelRequest() {
	self.Runtime.HTTPRequest_cancel_request(self)
}
func (self HTTPRequest) SetTlsOptions(client_options TLSOptions) {
	self.Runtime.HTTPRequest_set_tls_options(self, client_options)
}
func (self HTTPRequest) GetHttpClientStatus() HTTPClientStatus {
	return self.Runtime.HTTPRequest_get_http_client_status(self)
}
func (self HTTPRequest) SetUseThreads(enable bool) {
	self.Runtime.HTTPRequest_set_use_threads(self, enable)
}
func (self HTTPRequest) IsUsingThreads() bool {
	return self.Runtime.HTTPRequest_is_using_threads(self)
}
func (self HTTPRequest) SetAcceptGzip(enable bool) {
	self.Runtime.HTTPRequest_set_accept_gzip(self, enable)
}
func (self HTTPRequest) IsAcceptingGzip() bool {
	return self.Runtime.HTTPRequest_is_accepting_gzip(self)
}
func (self HTTPRequest) SetBodySizeLimit(bytes int64) {
	self.Runtime.HTTPRequest_set_body_size_limit(self, bytes)
}
func (self HTTPRequest) GetBodySizeLimit() int64 {
	return self.Runtime.HTTPRequest_get_body_size_limit(self)
}
func (self HTTPRequest) SetMaxRedirects(amount int64) {
	self.Runtime.HTTPRequest_set_max_redirects(self, amount)
}
func (self HTTPRequest) GetMaxRedirects() int64 {
	return self.Runtime.HTTPRequest_get_max_redirects(self)
}
func (self HTTPRequest) SetDownloadFile(path string) {
	self.Runtime.HTTPRequest_set_download_file(self, path)
}
func (self HTTPRequest) GetDownloadFile() string {
	return self.Runtime.HTTPRequest_get_download_file(self)
}
func (self HTTPRequest) GetDownloadedBytes() int64 {
	return self.Runtime.HTTPRequest_get_downloaded_bytes(self)
}
func (self HTTPRequest) GetBodySize() int64 {
	return self.Runtime.HTTPRequest_get_body_size(self)
}
func (self HTTPRequest) SetTimeout(timeout Float) {
	self.Runtime.HTTPRequest_set_timeout(self, timeout)
}
func (self HTTPRequest) GetTimeout() Float {
	return self.Runtime.HTTPRequest_get_timeout(self)
}
func (self HTTPRequest) SetDownloadChunkSize(chunk_size int64) {
	self.Runtime.HTTPRequest_set_download_chunk_size(self, chunk_size)
}
func (self HTTPRequest) GetDownloadChunkSize() int64 {
	return self.Runtime.HTTPRequest_get_download_chunk_size(self)
}
func (self HTTPRequest) SetHttpProxy(host string, port int64) {
	self.Runtime.HTTPRequest_set_http_proxy(self, host, port)
}
func (self HTTPRequest) SetHttpsProxy(host string, port int64) {
	self.Runtime.HTTPRequest_set_https_proxy(self, host, port)
}

type extendsHashingContext struct {
	_ [0]*extendsHashingContext
	class
}

func (self HashingContext) RefCounted() RefCounted {
	var parent RefCounted
	parent.class = self.class
	return parent
}
func (self HashingContext) Start(atype HashingContextHashType) int64 {
	return self.Runtime.HashingContext_start(self, atype)
}
func (self HashingContext) Update(chunk PackedByteArray) int64 {
	return self.Runtime.HashingContext_update(self, chunk)
}
func (self HashingContext) Finish() PackedByteArray {
	return self.Runtime.HashingContext_finish(self)
}

type extendsHeightMapShape3D struct {
	_ [0]*extendsHeightMapShape3D
	class
}

func (self HeightMapShape3D) Shape3D() Shape3D {
	var parent Shape3D
	parent.class = self.class
	return parent
}
func (self HeightMapShape3D) SetMapWidth(width int64) {
	self.Runtime.HeightMapShape3D_set_map_width(self, width)
}
func (self HeightMapShape3D) GetMapWidth() int64 {
	return self.Runtime.HeightMapShape3D_get_map_width(self)
}
func (self HeightMapShape3D) SetMapDepth(height int64) {
	self.Runtime.HeightMapShape3D_set_map_depth(self, height)
}
func (self HeightMapShape3D) GetMapDepth() int64 {
	return self.Runtime.HeightMapShape3D_get_map_depth(self)
}
func (self HeightMapShape3D) SetMapData(data PackedFloat32Array) {
	self.Runtime.HeightMapShape3D_set_map_data(self, data)
}
func (self HeightMapShape3D) GetMapData() PackedFloat32Array {
	return self.Runtime.HeightMapShape3D_get_map_data(self)
}

type extendsHingeJoint3D struct {
	_ [0]*extendsHingeJoint3D
	class
}

func (self HingeJoint3D) Joint3D() Joint3D {
	var parent Joint3D
	parent.class = self.class
	return parent
}
func (self HingeJoint3D) SetParam(param HingeJoint3DParam, value Float) {
	self.Runtime.HingeJoint3D_set_param(self, param, value)
}
func (self HingeJoint3D) GetParam(param HingeJoint3DParam) Float {
	return self.Runtime.HingeJoint3D_get_param(self, param)
}
func (self HingeJoint3D) SetFlag(flag HingeJoint3DFlag, enabled bool) {
	self.Runtime.HingeJoint3D_set_flag(self, flag, enabled)
}
func (self HingeJoint3D) GetFlag(flag HingeJoint3DFlag) bool {
	return self.Runtime.HingeJoint3D_get_flag(self, flag)
}

type extendsIP struct {
	_ [0]*extendsIP
	class
}

func (self IP) Object() Object { var parent Object; parent.class = self.class; return parent }
func (self IP) ResolveHostname(host string, ip_type IPType) string {
	return self.Runtime.IP_resolve_hostname(self, host, ip_type)
}
func (self IP) ResolveHostnameAddresses(host string, ip_type IPType) PackedStringArray {
	return self.Runtime.IP_resolve_hostname_addresses(self, host, ip_type)
}
func (self IP) ResolveHostnameQueueItem(host string, ip_type IPType) int64 {
	return self.Runtime.IP_resolve_hostname_queue_item(self, host, ip_type)
}
func (self IP) GetResolveItemStatus(id int64) IPResolverStatus {
	return self.Runtime.IP_get_resolve_item_status(self, id)
}
func (self IP) GetResolveItemAddress(id int64) string {
	return self.Runtime.IP_get_resolve_item_address(self, id)
}
func (self IP) GetResolveItemAddresses(id int64) Array {
	return self.Runtime.IP_get_resolve_item_addresses(self, id)
}
func (self IP) EraseResolveItem(id int64) {
	self.Runtime.IP_erase_resolve_item(self, id)
}
func (self IP) GetLocalAddresses() PackedStringArray {
	return self.Runtime.IP_get_local_addresses(self)
}
func (self IP) GetLocalInterfaces() ArrayOf[Dictionary] {
	return self.Runtime.IP_get_local_interfaces(self)
}
func (self IP) ClearCache(hostname string) {
	self.Runtime.IP_clear_cache(self, hostname)
}

type extendsImage struct {
	_ [0]*extendsImage
	class
}

func (self Image) Resource() Resource { var parent Resource; parent.class = self.class; return parent }
func (self Image) GetWidth() int64 {
	return self.Runtime.Image_get_width(self)
}
func (self Image) GetHeight() int64 {
	return self.Runtime.Image_get_height(self)
}
func (self Image) GetSize() Vector2i {
	return self.Runtime.Image_get_size(self)
}
func (self Image) HasMipmaps() bool {
	return self.Runtime.Image_has_mipmaps(self)
}
func (self Image) GetFormat() ImageFormat {
	return self.Runtime.Image_get_format(self)
}
func (self Image) GetData() PackedByteArray {
	return self.Runtime.Image_get_data(self)
}
func (self Image) Convert(format ImageFormat) {
	self.Runtime.Image_convert(self, format)
}
func (self Image) GetMipmapCount() int64 {
	return self.Runtime.Image_get_mipmap_count(self)
}
func (self Image) GetMipmapOffset(mipmap int64) int64 {
	return self.Runtime.Image_get_mipmap_offset(self, mipmap)
}
func (self Image) ResizeToPo2(square bool, interpolation ImageInterpolation) {
	self.Runtime.Image_resize_to_po2(self, square, interpolation)
}
func (self Image) Resize(width int64, height int64, interpolation ImageInterpolation) {
	self.Runtime.Image_resize(self, width, height, interpolation)
}
func (self Image) ShrinkX2() {
	self.Runtime.Image_shrink_x2(self)
}
func (self Image) Crop(width int64, height int64) {
	self.Runtime.Image_crop(self, width, height)
}
func (self Image) FlipX() {
	self.Runtime.Image_flip_x(self)
}
func (self Image) FlipY() {
	self.Runtime.Image_flip_y(self)
}
func (self Image) GenerateMipmaps(renormalize bool) int64 {
	return self.Runtime.Image_generate_mipmaps(self, renormalize)
}
func (self Image) ClearMipmaps() {
	self.Runtime.Image_clear_mipmaps(self)
}
func (self Image) Create(width int64, height int64, use_mipmaps bool, format ImageFormat) Image {
	return self.Runtime.Image_create(self, width, height, use_mipmaps, format)
}
func (self Image) CreateFromData(width int64, height int64, use_mipmaps bool, format ImageFormat, data PackedByteArray) Image {
	return self.Runtime.Image_create_from_data(self, width, height, use_mipmaps, format, data)
}
func (self Image) SetData(width int64, height int64, use_mipmaps bool, format ImageFormat, data PackedByteArray) {
	self.Runtime.Image_set_data(self, width, height, use_mipmaps, format, data)
}
func (self Image) IsEmpty() bool {
	return self.Runtime.Image_is_empty(self)
}
func (self Image) Load(path string) int64 {
	return self.Runtime.Image_load(self, path)
}
func (self Image) LoadFromFile(path string) Image {
	return self.Runtime.Image_load_from_file(self, path)
}
func (self Image) SavePng(path string) int64 {
	return self.Runtime.Image_save_png(self, path)
}
func (self Image) SavePngToBuffer() PackedByteArray {
	return self.Runtime.Image_save_png_to_buffer(self)
}
func (self Image) SaveJpg(path string, quality Float) int64 {
	return self.Runtime.Image_save_jpg(self, path, quality)
}
func (self Image) SaveJpgToBuffer(quality Float) PackedByteArray {
	return self.Runtime.Image_save_jpg_to_buffer(self, quality)
}
func (self Image) SaveExr(path string, grayscale bool) int64 {
	return self.Runtime.Image_save_exr(self, path, grayscale)
}
func (self Image) SaveExrToBuffer(grayscale bool) PackedByteArray {
	return self.Runtime.Image_save_exr_to_buffer(self, grayscale)
}
func (self Image) SaveWebp(path string, lossy bool, quality Float) int64 {
	return self.Runtime.Image_save_webp(self, path, lossy, quality)
}
func (self Image) SaveWebpToBuffer(lossy bool, quality Float) PackedByteArray {
	return self.Runtime.Image_save_webp_to_buffer(self, lossy, quality)
}
func (self Image) DetectAlpha() ImageAlphaMode {
	return self.Runtime.Image_detect_alpha(self)
}
func (self Image) IsInvisible() bool {
	return self.Runtime.Image_is_invisible(self)
}
func (self Image) DetectUsedChannels(source ImageCompressSource) ImageUsedChannels {
	return self.Runtime.Image_detect_used_channels(self, source)
}
func (self Image) Compress(mode ImageCompressMode, source ImageCompressSource, astc_format ImageASTCFormat) int64 {
	return self.Runtime.Image_compress(self, mode, source, astc_format)
}
func (self Image) CompressFromChannels(mode ImageCompressMode, channels ImageUsedChannels, astc_format ImageASTCFormat) int64 {
	return self.Runtime.Image_compress_from_channels(self, mode, channels, astc_format)
}
func (self Image) Decompress() int64 {
	return self.Runtime.Image_decompress(self)
}
func (self Image) IsCompressed() bool {
	return self.Runtime.Image_is_compressed(self)
}
func (self Image) Rotate90(direction ClockDirection) {
	self.Runtime.Image_rotate_90(self, direction)
}
func (self Image) Rotate180() {
	self.Runtime.Image_rotate_180(self)
}
func (self Image) FixAlphaEdges() {
	self.Runtime.Image_fix_alpha_edges(self)
}
func (self Image) PremultiplyAlpha() {
	self.Runtime.Image_premultiply_alpha(self)
}
func (self Image) SrgbToLinear() {
	self.Runtime.Image_srgb_to_linear(self)
}
func (self Image) NormalMapToXy() {
	self.Runtime.Image_normal_map_to_xy(self)
}
func (self Image) RgbeToSrgb() Image {
	return self.Runtime.Image_rgbe_to_srgb(self)
}
func (self Image) BumpMapToNormalMap(bump_scale Float) {
	self.Runtime.Image_bump_map_to_normal_map(self, bump_scale)
}
func (self Image) ComputeImageMetrics(compared_image Image, use_luma bool) Dictionary {
	return self.Runtime.Image_compute_image_metrics(self, compared_image, use_luma)
}
func (self Image) BlitRect(src Image, src_rect Rect2i, dst Vector2i) {
	self.Runtime.Image_blit_rect(self, src, src_rect, dst)
}
func (self Image) BlitRectMask(src Image, mask Image, src_rect Rect2i, dst Vector2i) {
	self.Runtime.Image_blit_rect_mask(self, src, mask, src_rect, dst)
}
func (self Image) BlendRect(src Image, src_rect Rect2i, dst Vector2i) {
	self.Runtime.Image_blend_rect(self, src, src_rect, dst)
}
func (self Image) BlendRectMask(src Image, mask Image, src_rect Rect2i, dst Vector2i) {
	self.Runtime.Image_blend_rect_mask(self, src, mask, src_rect, dst)
}
func (self Image) Fill(color Color) {
	self.Runtime.Image_fill(self, color)
}
func (self Image) FillRect(rect Rect2i, color Color) {
	self.Runtime.Image_fill_rect(self, rect, color)
}
func (self Image) GetUsedRect() Rect2i {
	return self.Runtime.Image_get_used_rect(self)
}
func (self Image) GetRegion(region Rect2i) Image {
	return self.Runtime.Image_get_region(self, region)
}
func (self Image) CopyFrom(src Image) {
	self.Runtime.Image_copy_from(self, src)
}
func (self Image) GetPixelv(point Vector2i) Color {
	return self.Runtime.Image_get_pixelv(self, point)
}
func (self Image) GetPixel(x int64, y int64) Color {
	return self.Runtime.Image_get_pixel(self, x, y)
}
func (self Image) SetPixelv(point Vector2i, color Color) {
	self.Runtime.Image_set_pixelv(self, point, color)
}
func (self Image) SetPixel(x int64, y int64, color Color) {
	self.Runtime.Image_set_pixel(self, x, y, color)
}
func (self Image) AdjustBcs(brightness Float, contrast Float, saturation Float) {
	self.Runtime.Image_adjust_bcs(self, brightness, contrast, saturation)
}
func (self Image) LoadPngFromBuffer(buffer PackedByteArray) int64 {
	return self.Runtime.Image_load_png_from_buffer(self, buffer)
}
func (self Image) LoadJpgFromBuffer(buffer PackedByteArray) int64 {
	return self.Runtime.Image_load_jpg_from_buffer(self, buffer)
}
func (self Image) LoadWebpFromBuffer(buffer PackedByteArray) int64 {
	return self.Runtime.Image_load_webp_from_buffer(self, buffer)
}
func (self Image) LoadTgaFromBuffer(buffer PackedByteArray) int64 {
	return self.Runtime.Image_load_tga_from_buffer(self, buffer)
}
func (self Image) LoadBmpFromBuffer(buffer PackedByteArray) int64 {
	return self.Runtime.Image_load_bmp_from_buffer(self, buffer)
}
func (self Image) LoadKtxFromBuffer(buffer PackedByteArray) int64 {
	return self.Runtime.Image_load_ktx_from_buffer(self, buffer)
}
func (self Image) LoadSvgFromBuffer(buffer PackedByteArray, scale Float) int64 {
	return self.Runtime.Image_load_svg_from_buffer(self, buffer, scale)
}
func (self Image) LoadSvgFromString(svg_str string, scale Float) int64 {
	return self.Runtime.Image_load_svg_from_string(self, svg_str, scale)
}

type extendsImageFormatLoader struct {
	_ [0]*extendsImageFormatLoader
	class
}

func (self ImageFormatLoader) RefCounted() RefCounted {
	var parent RefCounted
	parent.class = self.class
	return parent
}

type extendsImageFormatLoaderExtension struct {
	_ [0]*extendsImageFormatLoaderExtension
	class
}

func (self ImageFormatLoaderExtension) ImageFormatLoader() ImageFormatLoader {
	var parent ImageFormatLoader
	parent.class = self.class
	return parent
}
func (self ImageFormatLoaderExtension) AddFormatLoader() {
	self.Runtime.ImageFormatLoaderExtension_add_format_loader(self)
}
func (self ImageFormatLoaderExtension) RemoveFormatLoader() {
	self.Runtime.ImageFormatLoaderExtension_remove_format_loader(self)
}

type extendsImageTexture struct {
	_ [0]*extendsImageTexture
	class
}

func (self ImageTexture) Texture2D() Texture2D {
	var parent Texture2D
	parent.class = self.class
	return parent
}
func (self ImageTexture) CreateFromImage(image Image) ImageTexture {
	return self.Runtime.ImageTexture_create_from_image(self, image)
}
func (self ImageTexture) GetFormat() ImageFormat {
	return self.Runtime.ImageTexture_get_format(self)
}
func (self ImageTexture) SetImage(image Image) {
	self.Runtime.ImageTexture_set_image(self, image)
}
func (self ImageTexture) Update(image Image) {
	self.Runtime.ImageTexture_update(self, image)
}
func (self ImageTexture) SetSizeOverride(size Vector2i) {
	self.Runtime.ImageTexture_set_size_override(self, size)
}

type extendsImageTexture3D struct {
	_ [0]*extendsImageTexture3D
	class
}

func (self ImageTexture3D) Texture3D() Texture3D {
	var parent Texture3D
	parent.class = self.class
	return parent
}
func (self ImageTexture3D) Create(format ImageFormat, width int64, height int64, depth int64, use_mipmaps bool, data ArrayOf[Image]) int64 {
	return self.Runtime.ImageTexture3D_create(self, format, width, height, depth, use_mipmaps, data)
}
func (self ImageTexture3D) Update(data ArrayOf[Image]) {
	self.Runtime.ImageTexture3D_update(self, data)
}

type extendsImageTextureLayered struct {
	_ [0]*extendsImageTextureLayered
	class
}

func (self ImageTextureLayered) TextureLayered() TextureLayered {
	var parent TextureLayered
	parent.class = self.class
	return parent
}
func (self ImageTextureLayered) CreateFromImages(images ArrayOf[Image]) int64 {
	return self.Runtime.ImageTextureLayered_create_from_images(self, images)
}
func (self ImageTextureLayered) UpdateLayer(image Image, layer int64) {
	self.Runtime.ImageTextureLayered_update_layer(self, image, layer)
}

type extendsImmediateMesh struct {
	_ [0]*extendsImmediateMesh
	class
}

func (self ImmediateMesh) Mesh() Mesh { var parent Mesh; parent.class = self.class; return parent }
func (self ImmediateMesh) SurfaceBegin(primitive MeshPrimitiveType, material Material) {
	self.Runtime.ImmediateMesh_surface_begin(self, primitive, material)
}
func (self ImmediateMesh) SurfaceSetColor(color Color) {
	self.Runtime.ImmediateMesh_surface_set_color(self, color)
}
func (self ImmediateMesh) SurfaceSetNormal(normal Vector3) {
	self.Runtime.ImmediateMesh_surface_set_normal(self, normal)
}
func (self ImmediateMesh) SurfaceSetTangent(tangent Plane) {
	self.Runtime.ImmediateMesh_surface_set_tangent(self, tangent)
}
func (self ImmediateMesh) SurfaceSetUv(uv Vector2) {
	self.Runtime.ImmediateMesh_surface_set_uv(self, uv)
}
func (self ImmediateMesh) SurfaceSetUv2(uv2 Vector2) {
	self.Runtime.ImmediateMesh_surface_set_uv2(self, uv2)
}
func (self ImmediateMesh) SurfaceAddVertex(vertex Vector3) {
	self.Runtime.ImmediateMesh_surface_add_vertex(self, vertex)
}
func (self ImmediateMesh) SurfaceAddVertex2d(vertex Vector2) {
	self.Runtime.ImmediateMesh_surface_add_vertex_2d(self, vertex)
}
func (self ImmediateMesh) SurfaceEnd() {
	self.Runtime.ImmediateMesh_surface_end(self)
}
func (self ImmediateMesh) ClearSurfaces() {
	self.Runtime.ImmediateMesh_clear_surfaces(self)
}

type extendsImporterMesh struct {
	_ [0]*extendsImporterMesh
	class
}

func (self ImporterMesh) Resource() Resource {
	var parent Resource
	parent.class = self.class
	return parent
}
func (self ImporterMesh) AddBlendShape(name string) {
	self.Runtime.ImporterMesh_add_blend_shape(self, name)
}
func (self ImporterMesh) GetBlendShapeCount() int64 {
	return self.Runtime.ImporterMesh_get_blend_shape_count(self)
}
func (self ImporterMesh) GetBlendShapeName(blend_shape_idx int64) string {
	return self.Runtime.ImporterMesh_get_blend_shape_name(self, blend_shape_idx)
}
func (self ImporterMesh) SetBlendShapeMode(mode MeshBlendShapeMode) {
	self.Runtime.ImporterMesh_set_blend_shape_mode(self, mode)
}
func (self ImporterMesh) GetBlendShapeMode() MeshBlendShapeMode {
	return self.Runtime.ImporterMesh_get_blend_shape_mode(self)
}
func (self ImporterMesh) AddSurface(primitive MeshPrimitiveType, arrays Array, blend_shapes ArrayOf[Array], lods Dictionary, material Material, name string, flags int64) {
	self.Runtime.ImporterMesh_add_surface(self, primitive, arrays, blend_shapes, lods, material, name, flags)
}
func (self ImporterMesh) GetSurfaceCount() int64 {
	return self.Runtime.ImporterMesh_get_surface_count(self)
}
func (self ImporterMesh) GetSurfacePrimitiveType(surface_idx int64) MeshPrimitiveType {
	return self.Runtime.ImporterMesh_get_surface_primitive_type(self, surface_idx)
}
func (self ImporterMesh) GetSurfaceName(surface_idx int64) string {
	return self.Runtime.ImporterMesh_get_surface_name(self, surface_idx)
}
func (self ImporterMesh) GetSurfaceArrays(surface_idx int64) Array {
	return self.Runtime.ImporterMesh_get_surface_arrays(self, surface_idx)
}
func (self ImporterMesh) GetSurfaceBlendShapeArrays(surface_idx int64, blend_shape_idx int64) Array {
	return self.Runtime.ImporterMesh_get_surface_blend_shape_arrays(self, surface_idx, blend_shape_idx)
}
func (self ImporterMesh) GetSurfaceLodCount(surface_idx int64) int64 {
	return self.Runtime.ImporterMesh_get_surface_lod_count(self, surface_idx)
}
func (self ImporterMesh) GetSurfaceLodSize(surface_idx int64, lod_idx int64) Float {
	return self.Runtime.ImporterMesh_get_surface_lod_size(self, surface_idx, lod_idx)
}
func (self ImporterMesh) GetSurfaceLodIndices(surface_idx int64, lod_idx int64) PackedInt32Array {
	return self.Runtime.ImporterMesh_get_surface_lod_indices(self, surface_idx, lod_idx)
}
func (self ImporterMesh) GetSurfaceMaterial(surface_idx int64) Material {
	return self.Runtime.ImporterMesh_get_surface_material(self, surface_idx)
}
func (self ImporterMesh) GetSurfaceFormat(surface_idx int64) int64 {
	return self.Runtime.ImporterMesh_get_surface_format(self, surface_idx)
}
func (self ImporterMesh) SetSurfaceName(surface_idx int64, name string) {
	self.Runtime.ImporterMesh_set_surface_name(self, surface_idx, name)
}
func (self ImporterMesh) SetSurfaceMaterial(surface_idx int64, material Material) {
	self.Runtime.ImporterMesh_set_surface_material(self, surface_idx, material)
}
func (self ImporterMesh) GenerateLods(normal_merge_angle Float, normal_split_angle Float, bone_transform_array Array) {
	self.Runtime.ImporterMesh_generate_lods(self, normal_merge_angle, normal_split_angle, bone_transform_array)
}
func (self ImporterMesh) GetMesh(base_mesh ArrayMesh) ArrayMesh {
	return self.Runtime.ImporterMesh_get_mesh(self, base_mesh)
}
func (self ImporterMesh) Clear() {
	self.Runtime.ImporterMesh_clear(self)
}
func (self ImporterMesh) SetLightmapSizeHint(size Vector2i) {
	self.Runtime.ImporterMesh_set_lightmap_size_hint(self, size)
}
func (self ImporterMesh) GetLightmapSizeHint() Vector2i {
	return self.Runtime.ImporterMesh_get_lightmap_size_hint(self)
}

type extendsImporterMeshInstance3D struct {
	_ [0]*extendsImporterMeshInstance3D
	class
}

func (self ImporterMeshInstance3D) Node3D() Node3D {
	var parent Node3D
	parent.class = self.class
	return parent
}
func (self ImporterMeshInstance3D) SetMesh(mesh ImporterMesh) {
	self.Runtime.ImporterMeshInstance3D_set_mesh(self, mesh)
}
func (self ImporterMeshInstance3D) GetMesh() ImporterMesh {
	return self.Runtime.ImporterMeshInstance3D_get_mesh(self)
}
func (self ImporterMeshInstance3D) SetSkin(skin Skin) {
	self.Runtime.ImporterMeshInstance3D_set_skin(self, skin)
}
func (self ImporterMeshInstance3D) GetSkin() Skin {
	return self.Runtime.ImporterMeshInstance3D_get_skin(self)
}
func (self ImporterMeshInstance3D) SetSkeletonPath(skeleton_path NodePath) {
	self.Runtime.ImporterMeshInstance3D_set_skeleton_path(self, skeleton_path)
}
func (self ImporterMeshInstance3D) GetSkeletonPath() NodePath {
	return self.Runtime.ImporterMeshInstance3D_get_skeleton_path(self)
}
func (self ImporterMeshInstance3D) SetLayerMask(layer_mask int64) {
	self.Runtime.ImporterMeshInstance3D_set_layer_mask(self, layer_mask)
}
func (self ImporterMeshInstance3D) GetLayerMask() int64 {
	return self.Runtime.ImporterMeshInstance3D_get_layer_mask(self)
}
func (self ImporterMeshInstance3D) SetCastShadowsSetting(shadow_casting_setting GeometryInstance3DShadowCastingSetting) {
	self.Runtime.ImporterMeshInstance3D_set_cast_shadows_setting(self, shadow_casting_setting)
}
func (self ImporterMeshInstance3D) GetCastShadowsSetting() GeometryInstance3DShadowCastingSetting {
	return self.Runtime.ImporterMeshInstance3D_get_cast_shadows_setting(self)
}
func (self ImporterMeshInstance3D) SetVisibilityRangeEndMargin(distance Float) {
	self.Runtime.ImporterMeshInstance3D_set_visibility_range_end_margin(self, distance)
}
func (self ImporterMeshInstance3D) GetVisibilityRangeEndMargin() Float {
	return self.Runtime.ImporterMeshInstance3D_get_visibility_range_end_margin(self)
}
func (self ImporterMeshInstance3D) SetVisibilityRangeEnd(distance Float) {
	self.Runtime.ImporterMeshInstance3D_set_visibility_range_end(self, distance)
}
func (self ImporterMeshInstance3D) GetVisibilityRangeEnd() Float {
	return self.Runtime.ImporterMeshInstance3D_get_visibility_range_end(self)
}
func (self ImporterMeshInstance3D) SetVisibilityRangeBeginMargin(distance Float) {
	self.Runtime.ImporterMeshInstance3D_set_visibility_range_begin_margin(self, distance)
}
func (self ImporterMeshInstance3D) GetVisibilityRangeBeginMargin() Float {
	return self.Runtime.ImporterMeshInstance3D_get_visibility_range_begin_margin(self)
}
func (self ImporterMeshInstance3D) SetVisibilityRangeBegin(distance Float) {
	self.Runtime.ImporterMeshInstance3D_set_visibility_range_begin(self, distance)
}
func (self ImporterMeshInstance3D) GetVisibilityRangeBegin() Float {
	return self.Runtime.ImporterMeshInstance3D_get_visibility_range_begin(self)
}
func (self ImporterMeshInstance3D) SetVisibilityRangeFadeMode(mode GeometryInstance3DVisibilityRangeFadeMode) {
	self.Runtime.ImporterMeshInstance3D_set_visibility_range_fade_mode(self, mode)
}
func (self ImporterMeshInstance3D) GetVisibilityRangeFadeMode() GeometryInstance3DVisibilityRangeFadeMode {
	return self.Runtime.ImporterMeshInstance3D_get_visibility_range_fade_mode(self)
}

type extendsInput struct {
	_ [0]*extendsInput
	class
}

func (self Input) Object() Object { var parent Object; parent.class = self.class; return parent }
func (self Input) IsAnythingPressed() bool {
	return self.Runtime.Input_is_anything_pressed(self)
}
func (self Input) IsKeyPressed(keycode Key) bool {
	return self.Runtime.Input_is_key_pressed(self, keycode)
}
func (self Input) IsPhysicalKeyPressed(keycode Key) bool {
	return self.Runtime.Input_is_physical_key_pressed(self, keycode)
}
func (self Input) IsKeyLabelPressed(keycode Key) bool {
	return self.Runtime.Input_is_key_label_pressed(self, keycode)
}
func (self Input) IsMouseButtonPressed(button MouseButton) bool {
	return self.Runtime.Input_is_mouse_button_pressed(self, button)
}
func (self Input) IsJoyButtonPressed(device int64, button JoyButton) bool {
	return self.Runtime.Input_is_joy_button_pressed(self, device, button)
}
func (self Input) IsActionPressed(action string, exact_match bool) bool {
	return self.Runtime.Input_is_action_pressed(self, action, exact_match)
}
func (self Input) IsActionJustPressed(action string, exact_match bool) bool {
	return self.Runtime.Input_is_action_just_pressed(self, action, exact_match)
}
func (self Input) IsActionJustReleased(action string, exact_match bool) bool {
	return self.Runtime.Input_is_action_just_released(self, action, exact_match)
}
func (self Input) GetActionStrength(action string, exact_match bool) Float {
	return self.Runtime.Input_get_action_strength(self, action, exact_match)
}
func (self Input) GetActionRawStrength(action string, exact_match bool) Float {
	return self.Runtime.Input_get_action_raw_strength(self, action, exact_match)
}
func (self Input) GetAxis(negative_action string, positive_action string) Float {
	return self.Runtime.Input_get_axis(self, negative_action, positive_action)
}
func (self Input) GetVector(negative_x string, positive_x string, negative_y string, positive_y string, deadzone Float) Vector2 {
	return self.Runtime.Input_get_vector(self, negative_x, positive_x, negative_y, positive_y, deadzone)
}
func (self Input) AddJoyMapping(mapping string, update_existing bool) {
	self.Runtime.Input_add_joy_mapping(self, mapping, update_existing)
}
func (self Input) RemoveJoyMapping(guid string) {
	self.Runtime.Input_remove_joy_mapping(self, guid)
}
func (self Input) IsJoyKnown(device int64) bool {
	return self.Runtime.Input_is_joy_known(self, device)
}
func (self Input) GetJoyAxis(device int64, axis JoyAxis) Float {
	return self.Runtime.Input_get_joy_axis(self, device, axis)
}
func (self Input) GetJoyName(device int64) string {
	return self.Runtime.Input_get_joy_name(self, device)
}
func (self Input) GetJoyGuid(device int64) string {
	return self.Runtime.Input_get_joy_guid(self, device)
}
func (self Input) GetJoyInfo(device int64) Dictionary {
	return self.Runtime.Input_get_joy_info(self, device)
}
func (self Input) ShouldIgnoreDevice(vendor_id int64, product_id int64) bool {
	return self.Runtime.Input_should_ignore_device(self, vendor_id, product_id)
}
func (self Input) GetConnectedJoypads() ArrayOf[int64] {
	return self.Runtime.Input_get_connected_joypads(self)
}
func (self Input) GetJoyVibrationStrength(device int64) Vector2 {
	return self.Runtime.Input_get_joy_vibration_strength(self, device)
}
func (self Input) GetJoyVibrationDuration(device int64) Float {
	return self.Runtime.Input_get_joy_vibration_duration(self, device)
}
func (self Input) StartJoyVibration(device int64, weak_magnitude Float, strong_magnitude Float, duration Float) {
	self.Runtime.Input_start_joy_vibration(self, device, weak_magnitude, strong_magnitude, duration)
}
func (self Input) StopJoyVibration(device int64) {
	self.Runtime.Input_stop_joy_vibration(self, device)
}
func (self Input) VibrateHandheld(duration_ms int64) {
	self.Runtime.Input_vibrate_handheld(self, duration_ms)
}
func (self Input) GetGravity() Vector3 {
	return self.Runtime.Input_get_gravity(self)
}
func (self Input) GetAccelerometer() Vector3 {
	return self.Runtime.Input_get_accelerometer(self)
}
func (self Input) GetMagnetometer() Vector3 {
	return self.Runtime.Input_get_magnetometer(self)
}
func (self Input) GetGyroscope() Vector3 {
	return self.Runtime.Input_get_gyroscope(self)
}
func (self Input) SetGravity(value Vector3) {
	self.Runtime.Input_set_gravity(self, value)
}
func (self Input) SetAccelerometer(value Vector3) {
	self.Runtime.Input_set_accelerometer(self, value)
}
func (self Input) SetMagnetometer(value Vector3) {
	self.Runtime.Input_set_magnetometer(self, value)
}
func (self Input) SetGyroscope(value Vector3) {
	self.Runtime.Input_set_gyroscope(self, value)
}
func (self Input) GetLastMouseVelocity() Vector2 {
	return self.Runtime.Input_get_last_mouse_velocity(self)
}
func (self Input) GetMouseButtonMask() MouseButtonMask {
	return self.Runtime.Input_get_mouse_button_mask(self)
}
func (self Input) SetMouseMode(mode InputMouseMode) {
	self.Runtime.Input_set_mouse_mode(self, mode)
}
func (self Input) GetMouseMode() InputMouseMode {
	return self.Runtime.Input_get_mouse_mode(self)
}
func (self Input) WarpMouse(position Vector2) {
	self.Runtime.Input_warp_mouse(self, position)
}
func (self Input) ActionPress(action string, strength Float) {
	self.Runtime.Input_action_press(self, action, strength)
}
func (self Input) ActionRelease(action string) {
	self.Runtime.Input_action_release(self, action)
}
func (self Input) SetDefaultCursorShape(shape InputCursorShape) {
	self.Runtime.Input_set_default_cursor_shape(self, shape)
}
func (self Input) GetCurrentCursorShape() InputCursorShape {
	return self.Runtime.Input_get_current_cursor_shape(self)
}
func (self Input) SetCustomMouseCursor(image Resource, shape InputCursorShape, hotspot Vector2) {
	self.Runtime.Input_set_custom_mouse_cursor(self, image, shape, hotspot)
}
func (self Input) ParseInputEvent(event InputEvent) {
	self.Runtime.Input_parse_input_event(self, event)
}
func (self Input) SetUseAccumulatedInput(enable bool) {
	self.Runtime.Input_set_use_accumulated_input(self, enable)
}
func (self Input) IsUsingAccumulatedInput() bool {
	return self.Runtime.Input_is_using_accumulated_input(self)
}
func (self Input) FlushBufferedEvents() {
	self.Runtime.Input_flush_buffered_events(self)
}
func (self Input) SetEmulateMouseFromTouch(enable bool) {
	self.Runtime.Input_set_emulate_mouse_from_touch(self, enable)
}
func (self Input) IsEmulatingMouseFromTouch() bool {
	return self.Runtime.Input_is_emulating_mouse_from_touch(self)
}
func (self Input) SetEmulateTouchFromMouse(enable bool) {
	self.Runtime.Input_set_emulate_touch_from_mouse(self, enable)
}
func (self Input) IsEmulatingTouchFromMouse() bool {
	return self.Runtime.Input_is_emulating_touch_from_mouse(self)
}

type extendsInputEvent struct {
	_ [0]*extendsInputEvent
	class
}

func (self InputEvent) Resource() Resource {
	var parent Resource
	parent.class = self.class
	return parent
}
func (self InputEvent) SetDevice(device int64) {
	self.Runtime.InputEvent_set_device(self, device)
}
func (self InputEvent) GetDevice() int64 {
	return self.Runtime.InputEvent_get_device(self)
}
func (self InputEvent) IsAction(action string, exact_match bool) bool {
	return self.Runtime.InputEvent_is_action(self, action, exact_match)
}
func (self InputEvent) IsActionPressed(action string, allow_echo bool, exact_match bool) bool {
	return self.Runtime.InputEvent_is_action_pressed(self, action, allow_echo, exact_match)
}
func (self InputEvent) IsActionReleased(action string, exact_match bool) bool {
	return self.Runtime.InputEvent_is_action_released(self, action, exact_match)
}
func (self InputEvent) GetActionStrength(action string, exact_match bool) Float {
	return self.Runtime.InputEvent_get_action_strength(self, action, exact_match)
}
func (self InputEvent) IsCanceled() bool {
	return self.Runtime.InputEvent_is_canceled(self)
}
func (self InputEvent) IsPressed() bool {
	return self.Runtime.InputEvent_is_pressed(self)
}
func (self InputEvent) IsReleased() bool {
	return self.Runtime.InputEvent_is_released(self)
}
func (self InputEvent) IsEcho() bool {
	return self.Runtime.InputEvent_is_echo(self)
}
func (self InputEvent) AsText() string {
	return self.Runtime.InputEvent_as_text(self)
}
func (self InputEvent) IsMatch(event InputEvent, exact_match bool) bool {
	return self.Runtime.InputEvent_is_match(self, event, exact_match)
}
func (self InputEvent) IsActionType() bool {
	return self.Runtime.InputEvent_is_action_type(self)
}
func (self InputEvent) Accumulate(with_event InputEvent) bool {
	return self.Runtime.InputEvent_accumulate(self, with_event)
}
func (self InputEvent) XformedBy(xform Transform2D, local_ofs Vector2) InputEvent {
	return self.Runtime.InputEvent_xformed_by(self, xform, local_ofs)
}

type extendsInputEventAction struct {
	_ [0]*extendsInputEventAction
	class
}

func (self InputEventAction) InputEvent() InputEvent {
	var parent InputEvent
	parent.class = self.class
	return parent
}
func (self InputEventAction) SetAction(action string) {
	self.Runtime.InputEventAction_set_action(self, action)
}
func (self InputEventAction) GetAction() string {
	return self.Runtime.InputEventAction_get_action(self)
}
func (self InputEventAction) SetPressed(pressed bool) {
	self.Runtime.InputEventAction_set_pressed(self, pressed)
}
func (self InputEventAction) SetStrength(strength Float) {
	self.Runtime.InputEventAction_set_strength(self, strength)
}
func (self InputEventAction) GetStrength() Float {
	return self.Runtime.InputEventAction_get_strength(self)
}

type extendsInputEventFromWindow struct {
	_ [0]*extendsInputEventFromWindow
	class
}

func (self InputEventFromWindow) InputEvent() InputEvent {
	var parent InputEvent
	parent.class = self.class
	return parent
}
func (self InputEventFromWindow) SetWindowId(id int64) {
	self.Runtime.InputEventFromWindow_set_window_id(self, id)
}
func (self InputEventFromWindow) GetWindowId() int64 {
	return self.Runtime.InputEventFromWindow_get_window_id(self)
}

type extendsInputEventGesture struct {
	_ [0]*extendsInputEventGesture
	class
}

func (self InputEventGesture) InputEventWithModifiers() InputEventWithModifiers {
	var parent InputEventWithModifiers
	parent.class = self.class
	return parent
}
func (self InputEventGesture) SetPosition(position Vector2) {
	self.Runtime.InputEventGesture_set_position(self, position)
}
func (self InputEventGesture) GetPosition() Vector2 {
	return self.Runtime.InputEventGesture_get_position(self)
}

type extendsInputEventJoypadButton struct {
	_ [0]*extendsInputEventJoypadButton
	class
}

func (self InputEventJoypadButton) InputEvent() InputEvent {
	var parent InputEvent
	parent.class = self.class
	return parent
}
func (self InputEventJoypadButton) SetButtonIndex(button_index JoyButton) {
	self.Runtime.InputEventJoypadButton_set_button_index(self, button_index)
}
func (self InputEventJoypadButton) GetButtonIndex() JoyButton {
	return self.Runtime.InputEventJoypadButton_get_button_index(self)
}
func (self InputEventJoypadButton) SetPressure(pressure Float) {
	self.Runtime.InputEventJoypadButton_set_pressure(self, pressure)
}
func (self InputEventJoypadButton) GetPressure() Float {
	return self.Runtime.InputEventJoypadButton_get_pressure(self)
}
func (self InputEventJoypadButton) SetPressed(pressed bool) {
	self.Runtime.InputEventJoypadButton_set_pressed(self, pressed)
}

type extendsInputEventJoypadMotion struct {
	_ [0]*extendsInputEventJoypadMotion
	class
}

func (self InputEventJoypadMotion) InputEvent() InputEvent {
	var parent InputEvent
	parent.class = self.class
	return parent
}
func (self InputEventJoypadMotion) SetAxis(axis JoyAxis) {
	self.Runtime.InputEventJoypadMotion_set_axis(self, axis)
}
func (self InputEventJoypadMotion) GetAxis() JoyAxis {
	return self.Runtime.InputEventJoypadMotion_get_axis(self)
}
func (self InputEventJoypadMotion) SetAxisValue(axis_value Float) {
	self.Runtime.InputEventJoypadMotion_set_axis_value(self, axis_value)
}
func (self InputEventJoypadMotion) GetAxisValue() Float {
	return self.Runtime.InputEventJoypadMotion_get_axis_value(self)
}

type extendsInputEventKey struct {
	_ [0]*extendsInputEventKey
	class
}

func (self InputEventKey) InputEventWithModifiers() InputEventWithModifiers {
	var parent InputEventWithModifiers
	parent.class = self.class
	return parent
}
func (self InputEventKey) SetPressed(pressed bool) {
	self.Runtime.InputEventKey_set_pressed(self, pressed)
}
func (self InputEventKey) SetKeycode(keycode Key) {
	self.Runtime.InputEventKey_set_keycode(self, keycode)
}
func (self InputEventKey) GetKeycode() Key {
	return self.Runtime.InputEventKey_get_keycode(self)
}
func (self InputEventKey) SetPhysicalKeycode(physical_keycode Key) {
	self.Runtime.InputEventKey_set_physical_keycode(self, physical_keycode)
}
func (self InputEventKey) GetPhysicalKeycode() Key {
	return self.Runtime.InputEventKey_get_physical_keycode(self)
}
func (self InputEventKey) SetKeyLabel(key_label Key) {
	self.Runtime.InputEventKey_set_key_label(self, key_label)
}
func (self InputEventKey) GetKeyLabel() Key {
	return self.Runtime.InputEventKey_get_key_label(self)
}
func (self InputEventKey) SetUnicode(unicode int64) {
	self.Runtime.InputEventKey_set_unicode(self, unicode)
}
func (self InputEventKey) GetUnicode() int64 {
	return self.Runtime.InputEventKey_get_unicode(self)
}
func (self InputEventKey) SetEcho(echo bool) {
	self.Runtime.InputEventKey_set_echo(self, echo)
}
func (self InputEventKey) GetKeycodeWithModifiers() Key {
	return self.Runtime.InputEventKey_get_keycode_with_modifiers(self)
}
func (self InputEventKey) GetPhysicalKeycodeWithModifiers() Key {
	return self.Runtime.InputEventKey_get_physical_keycode_with_modifiers(self)
}
func (self InputEventKey) GetKeyLabelWithModifiers() Key {
	return self.Runtime.InputEventKey_get_key_label_with_modifiers(self)
}
func (self InputEventKey) AsTextKeycode() string {
	return self.Runtime.InputEventKey_as_text_keycode(self)
}
func (self InputEventKey) AsTextPhysicalKeycode() string {
	return self.Runtime.InputEventKey_as_text_physical_keycode(self)
}
func (self InputEventKey) AsTextKeyLabel() string {
	return self.Runtime.InputEventKey_as_text_key_label(self)
}

type extendsInputEventMIDI struct {
	_ [0]*extendsInputEventMIDI
	class
}

func (self InputEventMIDI) InputEvent() InputEvent {
	var parent InputEvent
	parent.class = self.class
	return parent
}
func (self InputEventMIDI) SetChannel(channel int64) {
	self.Runtime.InputEventMIDI_set_channel(self, channel)
}
func (self InputEventMIDI) GetChannel() int64 {
	return self.Runtime.InputEventMIDI_get_channel(self)
}
func (self InputEventMIDI) SetMessage(message MIDIMessage) {
	self.Runtime.InputEventMIDI_set_message(self, message)
}
func (self InputEventMIDI) GetMessage() MIDIMessage {
	return self.Runtime.InputEventMIDI_get_message(self)
}
func (self InputEventMIDI) SetPitch(pitch int64) {
	self.Runtime.InputEventMIDI_set_pitch(self, pitch)
}
func (self InputEventMIDI) GetPitch() int64 {
	return self.Runtime.InputEventMIDI_get_pitch(self)
}
func (self InputEventMIDI) SetVelocity(velocity int64) {
	self.Runtime.InputEventMIDI_set_velocity(self, velocity)
}
func (self InputEventMIDI) GetVelocity() int64 {
	return self.Runtime.InputEventMIDI_get_velocity(self)
}
func (self InputEventMIDI) SetInstrument(instrument int64) {
	self.Runtime.InputEventMIDI_set_instrument(self, instrument)
}
func (self InputEventMIDI) GetInstrument() int64 {
	return self.Runtime.InputEventMIDI_get_instrument(self)
}
func (self InputEventMIDI) SetPressure(pressure int64) {
	self.Runtime.InputEventMIDI_set_pressure(self, pressure)
}
func (self InputEventMIDI) GetPressure() int64 {
	return self.Runtime.InputEventMIDI_get_pressure(self)
}
func (self InputEventMIDI) SetControllerNumber(controller_number int64) {
	self.Runtime.InputEventMIDI_set_controller_number(self, controller_number)
}
func (self InputEventMIDI) GetControllerNumber() int64 {
	return self.Runtime.InputEventMIDI_get_controller_number(self)
}
func (self InputEventMIDI) SetControllerValue(controller_value int64) {
	self.Runtime.InputEventMIDI_set_controller_value(self, controller_value)
}
func (self InputEventMIDI) GetControllerValue() int64 {
	return self.Runtime.InputEventMIDI_get_controller_value(self)
}

type extendsInputEventMagnifyGesture struct {
	_ [0]*extendsInputEventMagnifyGesture
	class
}

func (self InputEventMagnifyGesture) InputEventGesture() InputEventGesture {
	var parent InputEventGesture
	parent.class = self.class
	return parent
}
func (self InputEventMagnifyGesture) SetFactor(factor Float) {
	self.Runtime.InputEventMagnifyGesture_set_factor(self, factor)
}
func (self InputEventMagnifyGesture) GetFactor() Float {
	return self.Runtime.InputEventMagnifyGesture_get_factor(self)
}

type extendsInputEventMouse struct {
	_ [0]*extendsInputEventMouse
	class
}

func (self InputEventMouse) InputEventWithModifiers() InputEventWithModifiers {
	var parent InputEventWithModifiers
	parent.class = self.class
	return parent
}
func (self InputEventMouse) SetButtonMask(button_mask MouseButtonMask) {
	self.Runtime.InputEventMouse_set_button_mask(self, button_mask)
}
func (self InputEventMouse) GetButtonMask() MouseButtonMask {
	return self.Runtime.InputEventMouse_get_button_mask(self)
}
func (self InputEventMouse) SetPosition(position Vector2) {
	self.Runtime.InputEventMouse_set_position(self, position)
}
func (self InputEventMouse) GetPosition() Vector2 {
	return self.Runtime.InputEventMouse_get_position(self)
}
func (self InputEventMouse) SetGlobalPosition(global_position Vector2) {
	self.Runtime.InputEventMouse_set_global_position(self, global_position)
}
func (self InputEventMouse) GetGlobalPosition() Vector2 {
	return self.Runtime.InputEventMouse_get_global_position(self)
}

type extendsInputEventMouseButton struct {
	_ [0]*extendsInputEventMouseButton
	class
}

func (self InputEventMouseButton) InputEventMouse() InputEventMouse {
	var parent InputEventMouse
	parent.class = self.class
	return parent
}
func (self InputEventMouseButton) SetFactor(factor Float) {
	self.Runtime.InputEventMouseButton_set_factor(self, factor)
}
func (self InputEventMouseButton) GetFactor() Float {
	return self.Runtime.InputEventMouseButton_get_factor(self)
}
func (self InputEventMouseButton) SetButtonIndex(button_index MouseButton) {
	self.Runtime.InputEventMouseButton_set_button_index(self, button_index)
}
func (self InputEventMouseButton) GetButtonIndex() MouseButton {
	return self.Runtime.InputEventMouseButton_get_button_index(self)
}
func (self InputEventMouseButton) SetPressed(pressed bool) {
	self.Runtime.InputEventMouseButton_set_pressed(self, pressed)
}
func (self InputEventMouseButton) SetCanceled(canceled bool) {
	self.Runtime.InputEventMouseButton_set_canceled(self, canceled)
}
func (self InputEventMouseButton) SetDoubleClick(double_click bool) {
	self.Runtime.InputEventMouseButton_set_double_click(self, double_click)
}
func (self InputEventMouseButton) IsDoubleClick() bool {
	return self.Runtime.InputEventMouseButton_is_double_click(self)
}

type extendsInputEventMouseMotion struct {
	_ [0]*extendsInputEventMouseMotion
	class
}

func (self InputEventMouseMotion) InputEventMouse() InputEventMouse {
	var parent InputEventMouse
	parent.class = self.class
	return parent
}
func (self InputEventMouseMotion) SetTilt(tilt Vector2) {
	self.Runtime.InputEventMouseMotion_set_tilt(self, tilt)
}
func (self InputEventMouseMotion) GetTilt() Vector2 {
	return self.Runtime.InputEventMouseMotion_get_tilt(self)
}
func (self InputEventMouseMotion) SetPressure(pressure Float) {
	self.Runtime.InputEventMouseMotion_set_pressure(self, pressure)
}
func (self InputEventMouseMotion) GetPressure() Float {
	return self.Runtime.InputEventMouseMotion_get_pressure(self)
}
func (self InputEventMouseMotion) SetPenInverted(pen_inverted bool) {
	self.Runtime.InputEventMouseMotion_set_pen_inverted(self, pen_inverted)
}
func (self InputEventMouseMotion) GetPenInverted() bool {
	return self.Runtime.InputEventMouseMotion_get_pen_inverted(self)
}
func (self InputEventMouseMotion) SetRelative(relative Vector2) {
	self.Runtime.InputEventMouseMotion_set_relative(self, relative)
}
func (self InputEventMouseMotion) GetRelative() Vector2 {
	return self.Runtime.InputEventMouseMotion_get_relative(self)
}
func (self InputEventMouseMotion) SetVelocity(velocity Vector2) {
	self.Runtime.InputEventMouseMotion_set_velocity(self, velocity)
}
func (self InputEventMouseMotion) GetVelocity() Vector2 {
	return self.Runtime.InputEventMouseMotion_get_velocity(self)
}

type extendsInputEventPanGesture struct {
	_ [0]*extendsInputEventPanGesture
	class
}

func (self InputEventPanGesture) InputEventGesture() InputEventGesture {
	var parent InputEventGesture
	parent.class = self.class
	return parent
}
func (self InputEventPanGesture) SetDelta(delta Vector2) {
	self.Runtime.InputEventPanGesture_set_delta(self, delta)
}
func (self InputEventPanGesture) GetDelta() Vector2 {
	return self.Runtime.InputEventPanGesture_get_delta(self)
}

type extendsInputEventScreenDrag struct {
	_ [0]*extendsInputEventScreenDrag
	class
}

func (self InputEventScreenDrag) InputEventFromWindow() InputEventFromWindow {
	var parent InputEventFromWindow
	parent.class = self.class
	return parent
}
func (self InputEventScreenDrag) SetIndex(index int64) {
	self.Runtime.InputEventScreenDrag_set_index(self, index)
}
func (self InputEventScreenDrag) GetIndex() int64 {
	return self.Runtime.InputEventScreenDrag_get_index(self)
}
func (self InputEventScreenDrag) SetTilt(tilt Vector2) {
	self.Runtime.InputEventScreenDrag_set_tilt(self, tilt)
}
func (self InputEventScreenDrag) GetTilt() Vector2 {
	return self.Runtime.InputEventScreenDrag_get_tilt(self)
}
func (self InputEventScreenDrag) SetPressure(pressure Float) {
	self.Runtime.InputEventScreenDrag_set_pressure(self, pressure)
}
func (self InputEventScreenDrag) GetPressure() Float {
	return self.Runtime.InputEventScreenDrag_get_pressure(self)
}
func (self InputEventScreenDrag) SetPenInverted(pen_inverted bool) {
	self.Runtime.InputEventScreenDrag_set_pen_inverted(self, pen_inverted)
}
func (self InputEventScreenDrag) GetPenInverted() bool {
	return self.Runtime.InputEventScreenDrag_get_pen_inverted(self)
}
func (self InputEventScreenDrag) SetPosition(position Vector2) {
	self.Runtime.InputEventScreenDrag_set_position(self, position)
}
func (self InputEventScreenDrag) GetPosition() Vector2 {
	return self.Runtime.InputEventScreenDrag_get_position(self)
}
func (self InputEventScreenDrag) SetRelative(relative Vector2) {
	self.Runtime.InputEventScreenDrag_set_relative(self, relative)
}
func (self InputEventScreenDrag) GetRelative() Vector2 {
	return self.Runtime.InputEventScreenDrag_get_relative(self)
}
func (self InputEventScreenDrag) SetVelocity(velocity Vector2) {
	self.Runtime.InputEventScreenDrag_set_velocity(self, velocity)
}
func (self InputEventScreenDrag) GetVelocity() Vector2 {
	return self.Runtime.InputEventScreenDrag_get_velocity(self)
}

type extendsInputEventScreenTouch struct {
	_ [0]*extendsInputEventScreenTouch
	class
}

func (self InputEventScreenTouch) InputEventFromWindow() InputEventFromWindow {
	var parent InputEventFromWindow
	parent.class = self.class
	return parent
}
func (self InputEventScreenTouch) SetIndex(index int64) {
	self.Runtime.InputEventScreenTouch_set_index(self, index)
}
func (self InputEventScreenTouch) GetIndex() int64 {
	return self.Runtime.InputEventScreenTouch_get_index(self)
}
func (self InputEventScreenTouch) SetPosition(position Vector2) {
	self.Runtime.InputEventScreenTouch_set_position(self, position)
}
func (self InputEventScreenTouch) GetPosition() Vector2 {
	return self.Runtime.InputEventScreenTouch_get_position(self)
}
func (self InputEventScreenTouch) SetPressed(pressed bool) {
	self.Runtime.InputEventScreenTouch_set_pressed(self, pressed)
}
func (self InputEventScreenTouch) SetCanceled(canceled bool) {
	self.Runtime.InputEventScreenTouch_set_canceled(self, canceled)
}
func (self InputEventScreenTouch) SetDoubleTap(double_tap bool) {
	self.Runtime.InputEventScreenTouch_set_double_tap(self, double_tap)
}
func (self InputEventScreenTouch) IsDoubleTap() bool {
	return self.Runtime.InputEventScreenTouch_is_double_tap(self)
}

type extendsInputEventShortcut struct {
	_ [0]*extendsInputEventShortcut
	class
}

func (self InputEventShortcut) InputEvent() InputEvent {
	var parent InputEvent
	parent.class = self.class
	return parent
}
func (self InputEventShortcut) SetShortcut(shortcut Shortcut) {
	self.Runtime.InputEventShortcut_set_shortcut(self, shortcut)
}
func (self InputEventShortcut) GetShortcut() Shortcut {
	return self.Runtime.InputEventShortcut_get_shortcut(self)
}

type extendsInputEventWithModifiers struct {
	_ [0]*extendsInputEventWithModifiers
	class
}

func (self InputEventWithModifiers) InputEventFromWindow() InputEventFromWindow {
	var parent InputEventFromWindow
	parent.class = self.class
	return parent
}
func (self InputEventWithModifiers) SetCommandOrControlAutoremap(enable bool) {
	self.Runtime.InputEventWithModifiers_set_command_or_control_autoremap(self, enable)
}
func (self InputEventWithModifiers) IsCommandOrControlAutoremap() bool {
	return self.Runtime.InputEventWithModifiers_is_command_or_control_autoremap(self)
}
func (self InputEventWithModifiers) IsCommandOrControlPressed() bool {
	return self.Runtime.InputEventWithModifiers_is_command_or_control_pressed(self)
}
func (self InputEventWithModifiers) SetAltPressed(pressed bool) {
	self.Runtime.InputEventWithModifiers_set_alt_pressed(self, pressed)
}
func (self InputEventWithModifiers) IsAltPressed() bool {
	return self.Runtime.InputEventWithModifiers_is_alt_pressed(self)
}
func (self InputEventWithModifiers) SetShiftPressed(pressed bool) {
	self.Runtime.InputEventWithModifiers_set_shift_pressed(self, pressed)
}
func (self InputEventWithModifiers) IsShiftPressed() bool {
	return self.Runtime.InputEventWithModifiers_is_shift_pressed(self)
}
func (self InputEventWithModifiers) SetCtrlPressed(pressed bool) {
	self.Runtime.InputEventWithModifiers_set_ctrl_pressed(self, pressed)
}
func (self InputEventWithModifiers) IsCtrlPressed() bool {
	return self.Runtime.InputEventWithModifiers_is_ctrl_pressed(self)
}
func (self InputEventWithModifiers) SetMetaPressed(pressed bool) {
	self.Runtime.InputEventWithModifiers_set_meta_pressed(self, pressed)
}
func (self InputEventWithModifiers) IsMetaPressed() bool {
	return self.Runtime.InputEventWithModifiers_is_meta_pressed(self)
}
func (self InputEventWithModifiers) GetModifiersMask() KeyModifierMask {
	return self.Runtime.InputEventWithModifiers_get_modifiers_mask(self)
}

type extendsInputMap struct {
	_ [0]*extendsInputMap
	class
}

func (self InputMap) Object() Object { var parent Object; parent.class = self.class; return parent }
func (self InputMap) HasAction(action string) bool {
	return self.Runtime.InputMap_has_action(self, action)
}
func (self InputMap) GetActions() ArrayOf[string] {
	return self.Runtime.InputMap_get_actions(self)
}
func (self InputMap) AddAction(action string, deadzone Float) {
	self.Runtime.InputMap_add_action(self, action, deadzone)
}
func (self InputMap) EraseAction(action string) {
	self.Runtime.InputMap_erase_action(self, action)
}
func (self InputMap) ActionSetDeadzone(action string, deadzone Float) {
	self.Runtime.InputMap_action_set_deadzone(self, action, deadzone)
}
func (self InputMap) ActionGetDeadzone(action string) Float {
	return self.Runtime.InputMap_action_get_deadzone(self, action)
}
func (self InputMap) ActionAddEvent(action string, event InputEvent) {
	self.Runtime.InputMap_action_add_event(self, action, event)
}
func (self InputMap) ActionHasEvent(action string, event InputEvent) bool {
	return self.Runtime.InputMap_action_has_event(self, action, event)
}
func (self InputMap) ActionEraseEvent(action string, event InputEvent) {
	self.Runtime.InputMap_action_erase_event(self, action, event)
}
func (self InputMap) ActionEraseEvents(action string) {
	self.Runtime.InputMap_action_erase_events(self, action)
}
func (self InputMap) ActionGetEvents(action string) ArrayOf[InputEvent] {
	return self.Runtime.InputMap_action_get_events(self, action)
}
func (self InputMap) EventIsAction(event InputEvent, action string, exact_match bool) bool {
	return self.Runtime.InputMap_event_is_action(self, event, action, exact_match)
}
func (self InputMap) LoadFromProjectSettings() {
	self.Runtime.InputMap_load_from_project_settings(self)
}

type extendsInstancePlaceholder struct {
	_ [0]*extendsInstancePlaceholder
	class
}

func (self InstancePlaceholder) Node() Node {
	var parent Node
	parent.class = self.class
	return parent
}
func (self InstancePlaceholder) GetStoredValues(with_order bool) Dictionary {
	return self.Runtime.InstancePlaceholder_get_stored_values(self, with_order)
}
func (self InstancePlaceholder) CreateInstance(replace bool, custom_scene PackedScene) Node {
	return self.Runtime.InstancePlaceholder_create_instance(self, replace, custom_scene)
}
func (self InstancePlaceholder) GetInstancePath() string {
	return self.Runtime.InstancePlaceholder_get_instance_path(self)
}

type extendsIntervalTweener struct {
	_ [0]*extendsIntervalTweener
	class
}

func (self IntervalTweener) Tweener() Tweener {
	var parent Tweener
	parent.class = self.class
	return parent
}

type extendsItemList struct {
	_ [0]*extendsItemList
	class
}

func (self ItemList) Control() Control { var parent Control; parent.class = self.class; return parent }
func (self ItemList) AddItem(text string, icon Texture2D, selectable bool) int64 {
	return self.Runtime.ItemList_add_item(self, text, icon, selectable)
}
func (self ItemList) AddIconItem(icon Texture2D, selectable bool) int64 {
	return self.Runtime.ItemList_add_icon_item(self, icon, selectable)
}
func (self ItemList) SetItemText(idx int64, text string) {
	self.Runtime.ItemList_set_item_text(self, idx, text)
}
func (self ItemList) GetItemText(idx int64) string {
	return self.Runtime.ItemList_get_item_text(self, idx)
}
func (self ItemList) SetItemIcon(idx int64, icon Texture2D) {
	self.Runtime.ItemList_set_item_icon(self, idx, icon)
}
func (self ItemList) GetItemIcon(idx int64) Texture2D {
	return self.Runtime.ItemList_get_item_icon(self, idx)
}
func (self ItemList) SetItemTextDirection(idx int64, direction ControlTextDirection) {
	self.Runtime.ItemList_set_item_text_direction(self, idx, direction)
}
func (self ItemList) GetItemTextDirection(idx int64) ControlTextDirection {
	return self.Runtime.ItemList_get_item_text_direction(self, idx)
}
func (self ItemList) SetItemLanguage(idx int64, language string) {
	self.Runtime.ItemList_set_item_language(self, idx, language)
}
func (self ItemList) GetItemLanguage(idx int64) string {
	return self.Runtime.ItemList_get_item_language(self, idx)
}
func (self ItemList) SetItemIconTransposed(idx int64, transposed bool) {
	self.Runtime.ItemList_set_item_icon_transposed(self, idx, transposed)
}
func (self ItemList) IsItemIconTransposed(idx int64) bool {
	return self.Runtime.ItemList_is_item_icon_transposed(self, idx)
}
func (self ItemList) SetItemIconRegion(idx int64, rect Rect2) {
	self.Runtime.ItemList_set_item_icon_region(self, idx, rect)
}
func (self ItemList) GetItemIconRegion(idx int64) Rect2 {
	return self.Runtime.ItemList_get_item_icon_region(self, idx)
}
func (self ItemList) SetItemIconModulate(idx int64, modulate Color) {
	self.Runtime.ItemList_set_item_icon_modulate(self, idx, modulate)
}
func (self ItemList) GetItemIconModulate(idx int64) Color {
	return self.Runtime.ItemList_get_item_icon_modulate(self, idx)
}
func (self ItemList) SetItemSelectable(idx int64, selectable bool) {
	self.Runtime.ItemList_set_item_selectable(self, idx, selectable)
}
func (self ItemList) IsItemSelectable(idx int64) bool {
	return self.Runtime.ItemList_is_item_selectable(self, idx)
}
func (self ItemList) SetItemDisabled(idx int64, disabled bool) {
	self.Runtime.ItemList_set_item_disabled(self, idx, disabled)
}
func (self ItemList) IsItemDisabled(idx int64) bool {
	return self.Runtime.ItemList_is_item_disabled(self, idx)
}
func (self ItemList) SetItemMetadata(idx int64, metadata any) {
	self.Runtime.ItemList_set_item_metadata(self, idx, metadata)
}
func (self ItemList) GetItemMetadata(idx int64) any {
	return self.Runtime.ItemList_get_item_metadata(self, idx)
}
func (self ItemList) SetItemCustomBgColor(idx int64, custom_bg_color Color) {
	self.Runtime.ItemList_set_item_custom_bg_color(self, idx, custom_bg_color)
}
func (self ItemList) GetItemCustomBgColor(idx int64) Color {
	return self.Runtime.ItemList_get_item_custom_bg_color(self, idx)
}
func (self ItemList) SetItemCustomFgColor(idx int64, custom_fg_color Color) {
	self.Runtime.ItemList_set_item_custom_fg_color(self, idx, custom_fg_color)
}
func (self ItemList) GetItemCustomFgColor(idx int64) Color {
	return self.Runtime.ItemList_get_item_custom_fg_color(self, idx)
}
func (self ItemList) GetItemRect(idx int64, expand bool) Rect2 {
	return self.Runtime.ItemList_get_item_rect(self, idx, expand)
}
func (self ItemList) SetItemTooltipEnabled(idx int64, enable bool) {
	self.Runtime.ItemList_set_item_tooltip_enabled(self, idx, enable)
}
func (self ItemList) IsItemTooltipEnabled(idx int64) bool {
	return self.Runtime.ItemList_is_item_tooltip_enabled(self, idx)
}
func (self ItemList) SetItemTooltip(idx int64, tooltip string) {
	self.Runtime.ItemList_set_item_tooltip(self, idx, tooltip)
}
func (self ItemList) GetItemTooltip(idx int64) string {
	return self.Runtime.ItemList_get_item_tooltip(self, idx)
}
func (self ItemList) Select(idx int64, single bool) {
	self.Runtime.ItemList_select(self, idx, single)
}
func (self ItemList) Deselect(idx int64) {
	self.Runtime.ItemList_deselect(self, idx)
}
func (self ItemList) DeselectAll() {
	self.Runtime.ItemList_deselect_all(self)
}
func (self ItemList) IsSelected(idx int64) bool {
	return self.Runtime.ItemList_is_selected(self, idx)
}
func (self ItemList) GetSelectedItems() PackedInt32Array {
	return self.Runtime.ItemList_get_selected_items(self)
}
func (self ItemList) MoveItem(from_idx int64, to_idx int64) {
	self.Runtime.ItemList_move_item(self, from_idx, to_idx)
}
func (self ItemList) SetItemCount(count int64) {
	self.Runtime.ItemList_set_item_count(self, count)
}
func (self ItemList) GetItemCount() int64 {
	return self.Runtime.ItemList_get_item_count(self)
}
func (self ItemList) RemoveItem(idx int64) {
	self.Runtime.ItemList_remove_item(self, idx)
}
func (self ItemList) Clear() {
	self.Runtime.ItemList_clear(self)
}
func (self ItemList) SortItemsByText() {
	self.Runtime.ItemList_sort_items_by_text(self)
}
func (self ItemList) SetFixedColumnWidth(width int64) {
	self.Runtime.ItemList_set_fixed_column_width(self, width)
}
func (self ItemList) GetFixedColumnWidth() int64 {
	return self.Runtime.ItemList_get_fixed_column_width(self)
}
func (self ItemList) SetSameColumnWidth(enable bool) {
	self.Runtime.ItemList_set_same_column_width(self, enable)
}
func (self ItemList) IsSameColumnWidth() bool {
	return self.Runtime.ItemList_is_same_column_width(self)
}
func (self ItemList) SetMaxTextLines(lines int64) {
	self.Runtime.ItemList_set_max_text_lines(self, lines)
}
func (self ItemList) GetMaxTextLines() int64 {
	return self.Runtime.ItemList_get_max_text_lines(self)
}
func (self ItemList) SetMaxColumns(amount int64) {
	self.Runtime.ItemList_set_max_columns(self, amount)
}
func (self ItemList) GetMaxColumns() int64 {
	return self.Runtime.ItemList_get_max_columns(self)
}
func (self ItemList) SetSelectMode(mode ItemListSelectMode) {
	self.Runtime.ItemList_set_select_mode(self, mode)
}
func (self ItemList) GetSelectMode() ItemListSelectMode {
	return self.Runtime.ItemList_get_select_mode(self)
}
func (self ItemList) SetIconMode(mode ItemListIconMode) {
	self.Runtime.ItemList_set_icon_mode(self, mode)
}
func (self ItemList) GetIconMode() ItemListIconMode {
	return self.Runtime.ItemList_get_icon_mode(self)
}
func (self ItemList) SetFixedIconSize(size Vector2i) {
	self.Runtime.ItemList_set_fixed_icon_size(self, size)
}
func (self ItemList) GetFixedIconSize() Vector2i {
	return self.Runtime.ItemList_get_fixed_icon_size(self)
}
func (self ItemList) SetIconScale(scale Float) {
	self.Runtime.ItemList_set_icon_scale(self, scale)
}
func (self ItemList) GetIconScale() Float {
	return self.Runtime.ItemList_get_icon_scale(self)
}
func (self ItemList) SetAllowRmbSelect(allow bool) {
	self.Runtime.ItemList_set_allow_rmb_select(self, allow)
}
func (self ItemList) GetAllowRmbSelect() bool {
	return self.Runtime.ItemList_get_allow_rmb_select(self)
}
func (self ItemList) SetAllowReselect(allow bool) {
	self.Runtime.ItemList_set_allow_reselect(self, allow)
}
func (self ItemList) GetAllowReselect() bool {
	return self.Runtime.ItemList_get_allow_reselect(self)
}
func (self ItemList) SetAllowSearch(allow bool) {
	self.Runtime.ItemList_set_allow_search(self, allow)
}
func (self ItemList) GetAllowSearch() bool {
	return self.Runtime.ItemList_get_allow_search(self)
}
func (self ItemList) SetAutoHeight(enable bool) {
	self.Runtime.ItemList_set_auto_height(self, enable)
}
func (self ItemList) HasAutoHeight() bool {
	return self.Runtime.ItemList_has_auto_height(self)
}
func (self ItemList) IsAnythingSelected() bool {
	return self.Runtime.ItemList_is_anything_selected(self)
}
func (self ItemList) GetItemAtPosition(position Vector2, exact bool) int64 {
	return self.Runtime.ItemList_get_item_at_position(self, position, exact)
}
func (self ItemList) EnsureCurrentIsVisible() {
	self.Runtime.ItemList_ensure_current_is_visible(self)
}
func (self ItemList) GetVScrollBar() VScrollBar {
	return self.Runtime.ItemList_get_v_scroll_bar(self)
}
func (self ItemList) SetTextOverrunBehavior(overrun_behavior TextServerOverrunBehavior) {
	self.Runtime.ItemList_set_text_overrun_behavior(self, overrun_behavior)
}
func (self ItemList) GetTextOverrunBehavior() TextServerOverrunBehavior {
	return self.Runtime.ItemList_get_text_overrun_behavior(self)
}
func (self ItemList) ForceUpdateListSize() {
	self.Runtime.ItemList_force_update_list_size(self)
}

type extendsJNISingleton struct {
	_ [0]*extendsJNISingleton
	class
}

func (self JNISingleton) Object() Object { var parent Object; parent.class = self.class; return parent }

type extendsJSON struct {
	_ [0]*extendsJSON
	class
}

func (self JSON) Resource() Resource { var parent Resource; parent.class = self.class; return parent }
func (self JSON) Stringify(data any, indent string, sort_keys bool, full_precision bool) string {
	return self.Runtime.JSON_stringify(self, data, indent, sort_keys, full_precision)
}
func (self JSON) ParseString(json_string string) any {
	return self.Runtime.JSON_parse_string(self, json_string)
}
func (self JSON) Parse(json_text string, keep_text bool) int64 {
	return self.Runtime.JSON_parse(self, json_text, keep_text)
}
func (self JSON) GetData() any {
	return self.Runtime.JSON_get_data(self)
}
func (self JSON) SetData(data any) {
	self.Runtime.JSON_set_data(self, data)
}
func (self JSON) GetParsedText() string {
	return self.Runtime.JSON_get_parsed_text(self)
}
func (self JSON) GetErrorLine() int64 {
	return self.Runtime.JSON_get_error_line(self)
}
func (self JSON) GetErrorMessage() string {
	return self.Runtime.JSON_get_error_message(self)
}

type extendsJSONRPC struct {
	_ [0]*extendsJSONRPC
	class
}

func (self JSONRPC) Object() Object { var parent Object; parent.class = self.class; return parent }
func (self JSONRPC) SetScope(scope string, target Object) {
	self.Runtime.JSONRPC_set_scope(self, scope, target)
}
func (self JSONRPC) ProcessAction(action any, recurse bool) any {
	return self.Runtime.JSONRPC_process_action(self, action, recurse)
}
func (self JSONRPC) ProcessString(action string) string {
	return self.Runtime.JSONRPC_process_string(self, action)
}
func (self JSONRPC) MakeRequest(method string, params any, id any) Dictionary {
	return self.Runtime.JSONRPC_make_request(self, method, params, id)
}
func (self JSONRPC) MakeResponse(result any, id any) Dictionary {
	return self.Runtime.JSONRPC_make_response(self, result, id)
}
func (self JSONRPC) MakeNotification(method string, params any) Dictionary {
	return self.Runtime.JSONRPC_make_notification(self, method, params)
}
func (self JSONRPC) MakeResponseError(code int64, message string, id any) Dictionary {
	return self.Runtime.JSONRPC_make_response_error(self, code, message, id)
}

type extendsJavaClass struct {
	_ [0]*extendsJavaClass
	class
}

func (self JavaClass) RefCounted() RefCounted {
	var parent RefCounted
	parent.class = self.class
	return parent
}

type extendsJavaClassWrapper struct {
	_ [0]*extendsJavaClassWrapper
	class
}

func (self JavaClassWrapper) Object() Object {
	var parent Object
	parent.class = self.class
	return parent
}
func (self JavaClassWrapper) Wrap(name string) JavaClass {
	return self.Runtime.JavaClassWrapper_wrap(self, name)
}

type extendsJavaScriptBridge struct {
	_ [0]*extendsJavaScriptBridge
	class
}

func (self JavaScriptBridge) Object() Object {
	var parent Object
	parent.class = self.class
	return parent
}
func (self JavaScriptBridge) Eval(code string, use_global_execution_context bool) any {
	return self.Runtime.JavaScriptBridge_eval(self, code, use_global_execution_context)
}
func (self JavaScriptBridge) GetInterface(intf string) JavaScriptObject {
	return self.Runtime.JavaScriptBridge_get_interface(self, intf)
}
func (self JavaScriptBridge) CreateCallback(callable Callable) JavaScriptObject {
	return self.Runtime.JavaScriptBridge_create_callback(self, callable)
}
func (self JavaScriptBridge) CreateObject(object string) any {
	return self.Runtime.JavaScriptBridge_create_object(self, object)
}
func (self JavaScriptBridge) DownloadBuffer(buffer PackedByteArray, name string, mime string) {
	self.Runtime.JavaScriptBridge_download_buffer(self, buffer, name, mime)
}
func (self JavaScriptBridge) PwaNeedsUpdate() bool {
	return self.Runtime.JavaScriptBridge_pwa_needs_update(self)
}
func (self JavaScriptBridge) PwaUpdate() int64 {
	return self.Runtime.JavaScriptBridge_pwa_update(self)
}
func (self JavaScriptBridge) ForceFsSync() {
	self.Runtime.JavaScriptBridge_force_fs_sync(self)
}

type extendsJavaScriptObject struct {
	_ [0]*extendsJavaScriptObject
	class
}

func (self JavaScriptObject) RefCounted() RefCounted {
	var parent RefCounted
	parent.class = self.class
	return parent
}

type extendsJoint2D struct {
	_ [0]*extendsJoint2D
	class
}

func (self Joint2D) Node2D() Node2D { var parent Node2D; parent.class = self.class; return parent }
func (self Joint2D) SetNodeA(node NodePath) {
	self.Runtime.Joint2D_set_node_a(self, node)
}
func (self Joint2D) GetNodeA() NodePath {
	return self.Runtime.Joint2D_get_node_a(self)
}
func (self Joint2D) SetNodeB(node NodePath) {
	self.Runtime.Joint2D_set_node_b(self, node)
}
func (self Joint2D) GetNodeB() NodePath {
	return self.Runtime.Joint2D_get_node_b(self)
}
func (self Joint2D) SetBias(bias Float) {
	self.Runtime.Joint2D_set_bias(self, bias)
}
func (self Joint2D) GetBias() Float {
	return self.Runtime.Joint2D_get_bias(self)
}
func (self Joint2D) SetExcludeNodesFromCollision(enable bool) {
	self.Runtime.Joint2D_set_exclude_nodes_from_collision(self, enable)
}
func (self Joint2D) GetExcludeNodesFromCollision() bool {
	return self.Runtime.Joint2D_get_exclude_nodes_from_collision(self)
}
func (self Joint2D) GetRid() RID {
	return self.Runtime.Joint2D_get_rid(self)
}

type extendsJoint3D struct {
	_ [0]*extendsJoint3D
	class
}

func (self Joint3D) Node3D() Node3D { var parent Node3D; parent.class = self.class; return parent }
func (self Joint3D) SetNodeA(node NodePath) {
	self.Runtime.Joint3D_set_node_a(self, node)
}
func (self Joint3D) GetNodeA() NodePath {
	return self.Runtime.Joint3D_get_node_a(self)
}
func (self Joint3D) SetNodeB(node NodePath) {
	self.Runtime.Joint3D_set_node_b(self, node)
}
func (self Joint3D) GetNodeB() NodePath {
	return self.Runtime.Joint3D_get_node_b(self)
}
func (self Joint3D) SetSolverPriority(priority int64) {
	self.Runtime.Joint3D_set_solver_priority(self, priority)
}
func (self Joint3D) GetSolverPriority() int64 {
	return self.Runtime.Joint3D_get_solver_priority(self)
}
func (self Joint3D) SetExcludeNodesFromCollision(enable bool) {
	self.Runtime.Joint3D_set_exclude_nodes_from_collision(self, enable)
}
func (self Joint3D) GetExcludeNodesFromCollision() bool {
	return self.Runtime.Joint3D_get_exclude_nodes_from_collision(self)
}
func (self Joint3D) GetRid() RID {
	return self.Runtime.Joint3D_get_rid(self)
}

type extendsKinematicCollision2D struct {
	_ [0]*extendsKinematicCollision2D
	class
}

func (self KinematicCollision2D) RefCounted() RefCounted {
	var parent RefCounted
	parent.class = self.class
	return parent
}
func (self KinematicCollision2D) GetPosition() Vector2 {
	return self.Runtime.KinematicCollision2D_get_position(self)
}
func (self KinematicCollision2D) GetNormal() Vector2 {
	return self.Runtime.KinematicCollision2D_get_normal(self)
}
func (self KinematicCollision2D) GetTravel() Vector2 {
	return self.Runtime.KinematicCollision2D_get_travel(self)
}
func (self KinematicCollision2D) GetRemainder() Vector2 {
	return self.Runtime.KinematicCollision2D_get_remainder(self)
}
func (self KinematicCollision2D) GetAngle(up_direction Vector2) Float {
	return self.Runtime.KinematicCollision2D_get_angle(self, up_direction)
}
func (self KinematicCollision2D) GetDepth() Float {
	return self.Runtime.KinematicCollision2D_get_depth(self)
}
func (self KinematicCollision2D) GetLocalShape() Object {
	return self.Runtime.KinematicCollision2D_get_local_shape(self)
}
func (self KinematicCollision2D) GetCollider() Object {
	return self.Runtime.KinematicCollision2D_get_collider(self)
}
func (self KinematicCollision2D) GetColliderId() int64 {
	return self.Runtime.KinematicCollision2D_get_collider_id(self)
}
func (self KinematicCollision2D) GetColliderRid() RID {
	return self.Runtime.KinematicCollision2D_get_collider_rid(self)
}
func (self KinematicCollision2D) GetColliderShape() Object {
	return self.Runtime.KinematicCollision2D_get_collider_shape(self)
}
func (self KinematicCollision2D) GetColliderShapeIndex() int64 {
	return self.Runtime.KinematicCollision2D_get_collider_shape_index(self)
}
func (self KinematicCollision2D) GetColliderVelocity() Vector2 {
	return self.Runtime.KinematicCollision2D_get_collider_velocity(self)
}

type extendsKinematicCollision3D struct {
	_ [0]*extendsKinematicCollision3D
	class
}

func (self KinematicCollision3D) RefCounted() RefCounted {
	var parent RefCounted
	parent.class = self.class
	return parent
}
func (self KinematicCollision3D) GetTravel() Vector3 {
	return self.Runtime.KinematicCollision3D_get_travel(self)
}
func (self KinematicCollision3D) GetRemainder() Vector3 {
	return self.Runtime.KinematicCollision3D_get_remainder(self)
}
func (self KinematicCollision3D) GetDepth() Float {
	return self.Runtime.KinematicCollision3D_get_depth(self)
}
func (self KinematicCollision3D) GetCollisionCount() int64 {
	return self.Runtime.KinematicCollision3D_get_collision_count(self)
}
func (self KinematicCollision3D) GetPosition(collision_index int64) Vector3 {
	return self.Runtime.KinematicCollision3D_get_position(self, collision_index)
}
func (self KinematicCollision3D) GetNormal(collision_index int64) Vector3 {
	return self.Runtime.KinematicCollision3D_get_normal(self, collision_index)
}
func (self KinematicCollision3D) GetAngle(collision_index int64, up_direction Vector3) Float {
	return self.Runtime.KinematicCollision3D_get_angle(self, collision_index, up_direction)
}
func (self KinematicCollision3D) GetLocalShape(collision_index int64) Object {
	return self.Runtime.KinematicCollision3D_get_local_shape(self, collision_index)
}
func (self KinematicCollision3D) GetCollider(collision_index int64) Object {
	return self.Runtime.KinematicCollision3D_get_collider(self, collision_index)
}
func (self KinematicCollision3D) GetColliderId(collision_index int64) int64 {
	return self.Runtime.KinematicCollision3D_get_collider_id(self, collision_index)
}
func (self KinematicCollision3D) GetColliderRid(collision_index int64) RID {
	return self.Runtime.KinematicCollision3D_get_collider_rid(self, collision_index)
}
func (self KinematicCollision3D) GetColliderShape(collision_index int64) Object {
	return self.Runtime.KinematicCollision3D_get_collider_shape(self, collision_index)
}
func (self KinematicCollision3D) GetColliderShapeIndex(collision_index int64) int64 {
	return self.Runtime.KinematicCollision3D_get_collider_shape_index(self, collision_index)
}
func (self KinematicCollision3D) GetColliderVelocity(collision_index int64) Vector3 {
	return self.Runtime.KinematicCollision3D_get_collider_velocity(self, collision_index)
}

type extendsLabel struct {
	_ [0]*extendsLabel
	class
}

func (self Label) Control() Control { var parent Control; parent.class = self.class; return parent }
func (self Label) SetHorizontalAlignment(alignment HorizontalAlignment) {
	self.Runtime.Label_set_horizontal_alignment(self, alignment)
}
func (self Label) GetHorizontalAlignment() HorizontalAlignment {
	return self.Runtime.Label_get_horizontal_alignment(self)
}
func (self Label) SetVerticalAlignment(alignment VerticalAlignment) {
	self.Runtime.Label_set_vertical_alignment(self, alignment)
}
func (self Label) GetVerticalAlignment() VerticalAlignment {
	return self.Runtime.Label_get_vertical_alignment(self)
}
func (self Label) SetText(text string) {
	self.Runtime.Label_set_text(self, text)
}
func (self Label) GetText() string {
	return self.Runtime.Label_get_text(self)
}
func (self Label) SetLabelSettings(settings LabelSettings) {
	self.Runtime.Label_set_label_settings(self, settings)
}
func (self Label) GetLabelSettings() LabelSettings {
	return self.Runtime.Label_get_label_settings(self)
}
func (self Label) SetTextDirection(direction ControlTextDirection) {
	self.Runtime.Label_set_text_direction(self, direction)
}
func (self Label) GetTextDirection() ControlTextDirection {
	return self.Runtime.Label_get_text_direction(self)
}
func (self Label) SetLanguage(language string) {
	self.Runtime.Label_set_language(self, language)
}
func (self Label) GetLanguage() string {
	return self.Runtime.Label_get_language(self)
}
func (self Label) SetAutowrapMode(autowrap_mode TextServerAutowrapMode) {
	self.Runtime.Label_set_autowrap_mode(self, autowrap_mode)
}
func (self Label) GetAutowrapMode() TextServerAutowrapMode {
	return self.Runtime.Label_get_autowrap_mode(self)
}
func (self Label) SetJustificationFlags(justification_flags TextServerJustificationFlag) {
	self.Runtime.Label_set_justification_flags(self, justification_flags)
}
func (self Label) GetJustificationFlags() TextServerJustificationFlag {
	return self.Runtime.Label_get_justification_flags(self)
}
func (self Label) SetClipText(enable bool) {
	self.Runtime.Label_set_clip_text(self, enable)
}
func (self Label) IsClippingText() bool {
	return self.Runtime.Label_is_clipping_text(self)
}
func (self Label) SetTabStops(tab_stops PackedFloat32Array) {
	self.Runtime.Label_set_tab_stops(self, tab_stops)
}
func (self Label) GetTabStops() PackedFloat32Array {
	return self.Runtime.Label_get_tab_stops(self)
}
func (self Label) SetTextOverrunBehavior(overrun_behavior TextServerOverrunBehavior) {
	self.Runtime.Label_set_text_overrun_behavior(self, overrun_behavior)
}
func (self Label) GetTextOverrunBehavior() TextServerOverrunBehavior {
	return self.Runtime.Label_get_text_overrun_behavior(self)
}
func (self Label) SetEllipsisChar(char string) {
	self.Runtime.Label_set_ellipsis_char(self, char)
}
func (self Label) GetEllipsisChar() string {
	return self.Runtime.Label_get_ellipsis_char(self)
}
func (self Label) SetUppercase(enable bool) {
	self.Runtime.Label_set_uppercase(self, enable)
}
func (self Label) IsUppercase() bool {
	return self.Runtime.Label_is_uppercase(self)
}
func (self Label) GetLineHeight(line int64) int64 {
	return self.Runtime.Label_get_line_height(self, line)
}
func (self Label) GetLineCount() int64 {
	return self.Runtime.Label_get_line_count(self)
}
func (self Label) GetVisibleLineCount() int64 {
	return self.Runtime.Label_get_visible_line_count(self)
}
func (self Label) GetTotalCharacterCount() int64 {
	return self.Runtime.Label_get_total_character_count(self)
}
func (self Label) SetVisibleCharacters(amount int64) {
	self.Runtime.Label_set_visible_characters(self, amount)
}
func (self Label) GetVisibleCharacters() int64 {
	return self.Runtime.Label_get_visible_characters(self)
}
func (self Label) GetVisibleCharactersBehavior() TextServerVisibleCharactersBehavior {
	return self.Runtime.Label_get_visible_characters_behavior(self)
}
func (self Label) SetVisibleCharactersBehavior(behavior TextServerVisibleCharactersBehavior) {
	self.Runtime.Label_set_visible_characters_behavior(self, behavior)
}
func (self Label) SetVisibleRatio(ratio Float) {
	self.Runtime.Label_set_visible_ratio(self, ratio)
}
func (self Label) GetVisibleRatio() Float {
	return self.Runtime.Label_get_visible_ratio(self)
}
func (self Label) SetLinesSkipped(lines_skipped int64) {
	self.Runtime.Label_set_lines_skipped(self, lines_skipped)
}
func (self Label) GetLinesSkipped() int64 {
	return self.Runtime.Label_get_lines_skipped(self)
}
func (self Label) SetMaxLinesVisible(lines_visible int64) {
	self.Runtime.Label_set_max_lines_visible(self, lines_visible)
}
func (self Label) GetMaxLinesVisible() int64 {
	return self.Runtime.Label_get_max_lines_visible(self)
}
func (self Label) SetStructuredTextBidiOverride(parser TextServerStructuredTextParser) {
	self.Runtime.Label_set_structured_text_bidi_override(self, parser)
}
func (self Label) GetStructuredTextBidiOverride() TextServerStructuredTextParser {
	return self.Runtime.Label_get_structured_text_bidi_override(self)
}
func (self Label) SetStructuredTextBidiOverrideOptions(args Array) {
	self.Runtime.Label_set_structured_text_bidi_override_options(self, args)
}
func (self Label) GetStructuredTextBidiOverrideOptions() Array {
	return self.Runtime.Label_get_structured_text_bidi_override_options(self)
}
func (self Label) GetCharacterBounds(pos int64) Rect2 {
	return self.Runtime.Label_get_character_bounds(self, pos)
}

type extendsLabel3D struct {
	_ [0]*extendsLabel3D
	class
}

func (self Label3D) GeometryInstance3D() GeometryInstance3D {
	var parent GeometryInstance3D
	parent.class = self.class
	return parent
}
func (self Label3D) SetHorizontalAlignment(alignment HorizontalAlignment) {
	self.Runtime.Label3D_set_horizontal_alignment(self, alignment)
}
func (self Label3D) GetHorizontalAlignment() HorizontalAlignment {
	return self.Runtime.Label3D_get_horizontal_alignment(self)
}
func (self Label3D) SetVerticalAlignment(alignment VerticalAlignment) {
	self.Runtime.Label3D_set_vertical_alignment(self, alignment)
}
func (self Label3D) GetVerticalAlignment() VerticalAlignment {
	return self.Runtime.Label3D_get_vertical_alignment(self)
}
func (self Label3D) SetModulate(modulate Color) {
	self.Runtime.Label3D_set_modulate(self, modulate)
}
func (self Label3D) GetModulate() Color {
	return self.Runtime.Label3D_get_modulate(self)
}
func (self Label3D) SetOutlineModulate(modulate Color) {
	self.Runtime.Label3D_set_outline_modulate(self, modulate)
}
func (self Label3D) GetOutlineModulate() Color {
	return self.Runtime.Label3D_get_outline_modulate(self)
}
func (self Label3D) SetText(text string) {
	self.Runtime.Label3D_set_text(self, text)
}
func (self Label3D) GetText() string {
	return self.Runtime.Label3D_get_text(self)
}
func (self Label3D) SetTextDirection(direction TextServerDirection) {
	self.Runtime.Label3D_set_text_direction(self, direction)
}
func (self Label3D) GetTextDirection() TextServerDirection {
	return self.Runtime.Label3D_get_text_direction(self)
}
func (self Label3D) SetLanguage(language string) {
	self.Runtime.Label3D_set_language(self, language)
}
func (self Label3D) GetLanguage() string {
	return self.Runtime.Label3D_get_language(self)
}
func (self Label3D) SetStructuredTextBidiOverride(parser TextServerStructuredTextParser) {
	self.Runtime.Label3D_set_structured_text_bidi_override(self, parser)
}
func (self Label3D) GetStructuredTextBidiOverride() TextServerStructuredTextParser {
	return self.Runtime.Label3D_get_structured_text_bidi_override(self)
}
func (self Label3D) SetStructuredTextBidiOverrideOptions(args Array) {
	self.Runtime.Label3D_set_structured_text_bidi_override_options(self, args)
}
func (self Label3D) GetStructuredTextBidiOverrideOptions() Array {
	return self.Runtime.Label3D_get_structured_text_bidi_override_options(self)
}
func (self Label3D) SetUppercase(enable bool) {
	self.Runtime.Label3D_set_uppercase(self, enable)
}
func (self Label3D) IsUppercase() bool {
	return self.Runtime.Label3D_is_uppercase(self)
}
func (self Label3D) SetRenderPriority(priority int64) {
	self.Runtime.Label3D_set_render_priority(self, priority)
}
func (self Label3D) GetRenderPriority() int64 {
	return self.Runtime.Label3D_get_render_priority(self)
}
func (self Label3D) SetOutlineRenderPriority(priority int64) {
	self.Runtime.Label3D_set_outline_render_priority(self, priority)
}
func (self Label3D) GetOutlineRenderPriority() int64 {
	return self.Runtime.Label3D_get_outline_render_priority(self)
}
func (self Label3D) SetFont(font Font) {
	self.Runtime.Label3D_set_font(self, font)
}
func (self Label3D) GetFont() Font {
	return self.Runtime.Label3D_get_font(self)
}
func (self Label3D) SetFontSize(size int64) {
	self.Runtime.Label3D_set_font_size(self, size)
}
func (self Label3D) GetFontSize() int64 {
	return self.Runtime.Label3D_get_font_size(self)
}
func (self Label3D) SetOutlineSize(outline_size int64) {
	self.Runtime.Label3D_set_outline_size(self, outline_size)
}
func (self Label3D) GetOutlineSize() int64 {
	return self.Runtime.Label3D_get_outline_size(self)
}
func (self Label3D) SetLineSpacing(line_spacing Float) {
	self.Runtime.Label3D_set_line_spacing(self, line_spacing)
}
func (self Label3D) GetLineSpacing() Float {
	return self.Runtime.Label3D_get_line_spacing(self)
}
func (self Label3D) SetAutowrapMode(autowrap_mode TextServerAutowrapMode) {
	self.Runtime.Label3D_set_autowrap_mode(self, autowrap_mode)
}
func (self Label3D) GetAutowrapMode() TextServerAutowrapMode {
	return self.Runtime.Label3D_get_autowrap_mode(self)
}
func (self Label3D) SetJustificationFlags(justification_flags TextServerJustificationFlag) {
	self.Runtime.Label3D_set_justification_flags(self, justification_flags)
}
func (self Label3D) GetJustificationFlags() TextServerJustificationFlag {
	return self.Runtime.Label3D_get_justification_flags(self)
}
func (self Label3D) SetWidth(width Float) {
	self.Runtime.Label3D_set_width(self, width)
}
func (self Label3D) GetWidth() Float {
	return self.Runtime.Label3D_get_width(self)
}
func (self Label3D) SetPixelSize(pixel_size Float) {
	self.Runtime.Label3D_set_pixel_size(self, pixel_size)
}
func (self Label3D) GetPixelSize() Float {
	return self.Runtime.Label3D_get_pixel_size(self)
}
func (self Label3D) SetOffset(offset Vector2) {
	self.Runtime.Label3D_set_offset(self, offset)
}
func (self Label3D) GetOffset() Vector2 {
	return self.Runtime.Label3D_get_offset(self)
}
func (self Label3D) SetDrawFlag(flag Label3DDrawFlags, enabled bool) {
	self.Runtime.Label3D_set_draw_flag(self, flag, enabled)
}
func (self Label3D) GetDrawFlag(flag Label3DDrawFlags) bool {
	return self.Runtime.Label3D_get_draw_flag(self, flag)
}
func (self Label3D) SetBillboardMode(mode BaseMaterial3DBillboardMode) {
	self.Runtime.Label3D_set_billboard_mode(self, mode)
}
func (self Label3D) GetBillboardMode() BaseMaterial3DBillboardMode {
	return self.Runtime.Label3D_get_billboard_mode(self)
}
func (self Label3D) SetAlphaCutMode(mode Label3DAlphaCutMode) {
	self.Runtime.Label3D_set_alpha_cut_mode(self, mode)
}
func (self Label3D) GetAlphaCutMode() Label3DAlphaCutMode {
	return self.Runtime.Label3D_get_alpha_cut_mode(self)
}
func (self Label3D) SetAlphaScissorThreshold(threshold Float) {
	self.Runtime.Label3D_set_alpha_scissor_threshold(self, threshold)
}
func (self Label3D) GetAlphaScissorThreshold() Float {
	return self.Runtime.Label3D_get_alpha_scissor_threshold(self)
}
func (self Label3D) SetAlphaHashScale(threshold Float) {
	self.Runtime.Label3D_set_alpha_hash_scale(self, threshold)
}
func (self Label3D) GetAlphaHashScale() Float {
	return self.Runtime.Label3D_get_alpha_hash_scale(self)
}
func (self Label3D) SetAlphaAntialiasing(alpha_aa BaseMaterial3DAlphaAntiAliasing) {
	self.Runtime.Label3D_set_alpha_antialiasing(self, alpha_aa)
}
func (self Label3D) GetAlphaAntialiasing() BaseMaterial3DAlphaAntiAliasing {
	return self.Runtime.Label3D_get_alpha_antialiasing(self)
}
func (self Label3D) SetAlphaAntialiasingEdge(edge Float) {
	self.Runtime.Label3D_set_alpha_antialiasing_edge(self, edge)
}
func (self Label3D) GetAlphaAntialiasingEdge() Float {
	return self.Runtime.Label3D_get_alpha_antialiasing_edge(self)
}
func (self Label3D) SetTextureFilter(mode BaseMaterial3DTextureFilter) {
	self.Runtime.Label3D_set_texture_filter(self, mode)
}
func (self Label3D) GetTextureFilter() BaseMaterial3DTextureFilter {
	return self.Runtime.Label3D_get_texture_filter(self)
}
func (self Label3D) GenerateTriangleMesh() TriangleMesh {
	return self.Runtime.Label3D_generate_triangle_mesh(self)
}

type extendsLabelSettings struct {
	_ [0]*extendsLabelSettings
	class
}

func (self LabelSettings) Resource() Resource {
	var parent Resource
	parent.class = self.class
	return parent
}
func (self LabelSettings) SetLineSpacing(spacing Float) {
	self.Runtime.LabelSettings_set_line_spacing(self, spacing)
}
func (self LabelSettings) GetLineSpacing() Float {
	return self.Runtime.LabelSettings_get_line_spacing(self)
}
func (self LabelSettings) SetFont(font Font) {
	self.Runtime.LabelSettings_set_font(self, font)
}
func (self LabelSettings) GetFont() Font {
	return self.Runtime.LabelSettings_get_font(self)
}
func (self LabelSettings) SetFontSize(size int64) {
	self.Runtime.LabelSettings_set_font_size(self, size)
}
func (self LabelSettings) GetFontSize() int64 {
	return self.Runtime.LabelSettings_get_font_size(self)
}
func (self LabelSettings) SetFontColor(color Color) {
	self.Runtime.LabelSettings_set_font_color(self, color)
}
func (self LabelSettings) GetFontColor() Color {
	return self.Runtime.LabelSettings_get_font_color(self)
}
func (self LabelSettings) SetOutlineSize(size int64) {
	self.Runtime.LabelSettings_set_outline_size(self, size)
}
func (self LabelSettings) GetOutlineSize() int64 {
	return self.Runtime.LabelSettings_get_outline_size(self)
}
func (self LabelSettings) SetOutlineColor(color Color) {
	self.Runtime.LabelSettings_set_outline_color(self, color)
}
func (self LabelSettings) GetOutlineColor() Color {
	return self.Runtime.LabelSettings_get_outline_color(self)
}
func (self LabelSettings) SetShadowSize(size int64) {
	self.Runtime.LabelSettings_set_shadow_size(self, size)
}
func (self LabelSettings) GetShadowSize() int64 {
	return self.Runtime.LabelSettings_get_shadow_size(self)
}
func (self LabelSettings) SetShadowColor(color Color) {
	self.Runtime.LabelSettings_set_shadow_color(self, color)
}
func (self LabelSettings) GetShadowColor() Color {
	return self.Runtime.LabelSettings_get_shadow_color(self)
}
func (self LabelSettings) SetShadowOffset(offset Vector2) {
	self.Runtime.LabelSettings_set_shadow_offset(self, offset)
}
func (self LabelSettings) GetShadowOffset() Vector2 {
	return self.Runtime.LabelSettings_get_shadow_offset(self)
}

type extendsLight2D struct {
	_ [0]*extendsLight2D
	class
}

func (self Light2D) Node2D() Node2D { var parent Node2D; parent.class = self.class; return parent }
func (self Light2D) SetEnabled(enabled bool) {
	self.Runtime.Light2D_set_enabled(self, enabled)
}
func (self Light2D) IsEnabled() bool {
	return self.Runtime.Light2D_is_enabled(self)
}
func (self Light2D) SetEditorOnly(editor_only bool) {
	self.Runtime.Light2D_set_editor_only(self, editor_only)
}
func (self Light2D) IsEditorOnly() bool {
	return self.Runtime.Light2D_is_editor_only(self)
}
func (self Light2D) SetColor(color Color) {
	self.Runtime.Light2D_set_color(self, color)
}
func (self Light2D) GetColor() Color {
	return self.Runtime.Light2D_get_color(self)
}
func (self Light2D) SetEnergy(energy Float) {
	self.Runtime.Light2D_set_energy(self, energy)
}
func (self Light2D) GetEnergy() Float {
	return self.Runtime.Light2D_get_energy(self)
}
func (self Light2D) SetZRangeMin(z int64) {
	self.Runtime.Light2D_set_z_range_min(self, z)
}
func (self Light2D) GetZRangeMin() int64 {
	return self.Runtime.Light2D_get_z_range_min(self)
}
func (self Light2D) SetZRangeMax(z int64) {
	self.Runtime.Light2D_set_z_range_max(self, z)
}
func (self Light2D) GetZRangeMax() int64 {
	return self.Runtime.Light2D_get_z_range_max(self)
}
func (self Light2D) SetLayerRangeMin(layer int64) {
	self.Runtime.Light2D_set_layer_range_min(self, layer)
}
func (self Light2D) GetLayerRangeMin() int64 {
	return self.Runtime.Light2D_get_layer_range_min(self)
}
func (self Light2D) SetLayerRangeMax(layer int64) {
	self.Runtime.Light2D_set_layer_range_max(self, layer)
}
func (self Light2D) GetLayerRangeMax() int64 {
	return self.Runtime.Light2D_get_layer_range_max(self)
}
func (self Light2D) SetItemCullMask(item_cull_mask int64) {
	self.Runtime.Light2D_set_item_cull_mask(self, item_cull_mask)
}
func (self Light2D) GetItemCullMask() int64 {
	return self.Runtime.Light2D_get_item_cull_mask(self)
}
func (self Light2D) SetItemShadowCullMask(item_shadow_cull_mask int64) {
	self.Runtime.Light2D_set_item_shadow_cull_mask(self, item_shadow_cull_mask)
}
func (self Light2D) GetItemShadowCullMask() int64 {
	return self.Runtime.Light2D_get_item_shadow_cull_mask(self)
}
func (self Light2D) SetShadowEnabled(enabled bool) {
	self.Runtime.Light2D_set_shadow_enabled(self, enabled)
}
func (self Light2D) IsShadowEnabled() bool {
	return self.Runtime.Light2D_is_shadow_enabled(self)
}
func (self Light2D) SetShadowSmooth(smooth Float) {
	self.Runtime.Light2D_set_shadow_smooth(self, smooth)
}
func (self Light2D) GetShadowSmooth() Float {
	return self.Runtime.Light2D_get_shadow_smooth(self)
}
func (self Light2D) SetShadowFilter(filter Light2DShadowFilter) {
	self.Runtime.Light2D_set_shadow_filter(self, filter)
}
func (self Light2D) GetShadowFilter() Light2DShadowFilter {
	return self.Runtime.Light2D_get_shadow_filter(self)
}
func (self Light2D) SetShadowColor(shadow_color Color) {
	self.Runtime.Light2D_set_shadow_color(self, shadow_color)
}
func (self Light2D) GetShadowColor() Color {
	return self.Runtime.Light2D_get_shadow_color(self)
}
func (self Light2D) SetBlendMode(mode Light2DBlendMode) {
	self.Runtime.Light2D_set_blend_mode(self, mode)
}
func (self Light2D) GetBlendMode() Light2DBlendMode {
	return self.Runtime.Light2D_get_blend_mode(self)
}
func (self Light2D) SetHeight(height Float) {
	self.Runtime.Light2D_set_height(self, height)
}
func (self Light2D) GetHeight() Float {
	return self.Runtime.Light2D_get_height(self)
}

type extendsLight3D struct {
	_ [0]*extendsLight3D
	class
}

func (self Light3D) VisualInstance3D() VisualInstance3D {
	var parent VisualInstance3D
	parent.class = self.class
	return parent
}
func (self Light3D) SetEditorOnly(editor_only bool) {
	self.Runtime.Light3D_set_editor_only(self, editor_only)
}
func (self Light3D) IsEditorOnly() bool {
	return self.Runtime.Light3D_is_editor_only(self)
}
func (self Light3D) SetParam(param Light3DParam, value Float) {
	self.Runtime.Light3D_set_param(self, param, value)
}
func (self Light3D) GetParam(param Light3DParam) Float {
	return self.Runtime.Light3D_get_param(self, param)
}
func (self Light3D) SetShadow(enabled bool) {
	self.Runtime.Light3D_set_shadow(self, enabled)
}
func (self Light3D) HasShadow() bool {
	return self.Runtime.Light3D_has_shadow(self)
}
func (self Light3D) SetNegative(enabled bool) {
	self.Runtime.Light3D_set_negative(self, enabled)
}
func (self Light3D) IsNegative() bool {
	return self.Runtime.Light3D_is_negative(self)
}
func (self Light3D) SetCullMask(cull_mask int64) {
	self.Runtime.Light3D_set_cull_mask(self, cull_mask)
}
func (self Light3D) GetCullMask() int64 {
	return self.Runtime.Light3D_get_cull_mask(self)
}
func (self Light3D) SetEnableDistanceFade(enable bool) {
	self.Runtime.Light3D_set_enable_distance_fade(self, enable)
}
func (self Light3D) IsDistanceFadeEnabled() bool {
	return self.Runtime.Light3D_is_distance_fade_enabled(self)
}
func (self Light3D) SetDistanceFadeBegin(distance Float) {
	self.Runtime.Light3D_set_distance_fade_begin(self, distance)
}
func (self Light3D) GetDistanceFadeBegin() Float {
	return self.Runtime.Light3D_get_distance_fade_begin(self)
}
func (self Light3D) SetDistanceFadeShadow(distance Float) {
	self.Runtime.Light3D_set_distance_fade_shadow(self, distance)
}
func (self Light3D) GetDistanceFadeShadow() Float {
	return self.Runtime.Light3D_get_distance_fade_shadow(self)
}
func (self Light3D) SetDistanceFadeLength(distance Float) {
	self.Runtime.Light3D_set_distance_fade_length(self, distance)
}
func (self Light3D) GetDistanceFadeLength() Float {
	return self.Runtime.Light3D_get_distance_fade_length(self)
}
func (self Light3D) SetColor(color Color) {
	self.Runtime.Light3D_set_color(self, color)
}
func (self Light3D) GetColor() Color {
	return self.Runtime.Light3D_get_color(self)
}
func (self Light3D) SetShadowReverseCullFace(enable bool) {
	self.Runtime.Light3D_set_shadow_reverse_cull_face(self, enable)
}
func (self Light3D) GetShadowReverseCullFace() bool {
	return self.Runtime.Light3D_get_shadow_reverse_cull_face(self)
}
func (self Light3D) SetBakeMode(bake_mode Light3DBakeMode) {
	self.Runtime.Light3D_set_bake_mode(self, bake_mode)
}
func (self Light3D) GetBakeMode() Light3DBakeMode {
	return self.Runtime.Light3D_get_bake_mode(self)
}
func (self Light3D) SetProjector(projector Texture2D) {
	self.Runtime.Light3D_set_projector(self, projector)
}
func (self Light3D) GetProjector() Texture2D {
	return self.Runtime.Light3D_get_projector(self)
}
func (self Light3D) SetTemperature(temperature Float) {
	self.Runtime.Light3D_set_temperature(self, temperature)
}
func (self Light3D) GetTemperature() Float {
	return self.Runtime.Light3D_get_temperature(self)
}
func (self Light3D) GetCorrelatedColor() Color {
	return self.Runtime.Light3D_get_correlated_color(self)
}

type extendsLightOccluder2D struct {
	_ [0]*extendsLightOccluder2D
	class
}

func (self LightOccluder2D) Node2D() Node2D {
	var parent Node2D
	parent.class = self.class
	return parent
}
func (self LightOccluder2D) SetOccluderPolygon(polygon OccluderPolygon2D) {
	self.Runtime.LightOccluder2D_set_occluder_polygon(self, polygon)
}
func (self LightOccluder2D) GetOccluderPolygon() OccluderPolygon2D {
	return self.Runtime.LightOccluder2D_get_occluder_polygon(self)
}
func (self LightOccluder2D) SetOccluderLightMask(mask int64) {
	self.Runtime.LightOccluder2D_set_occluder_light_mask(self, mask)
}
func (self LightOccluder2D) GetOccluderLightMask() int64 {
	return self.Runtime.LightOccluder2D_get_occluder_light_mask(self)
}
func (self LightOccluder2D) SetAsSdfCollision(enable bool) {
	self.Runtime.LightOccluder2D_set_as_sdf_collision(self, enable)
}
func (self LightOccluder2D) IsSetAsSdfCollision() bool {
	return self.Runtime.LightOccluder2D_is_set_as_sdf_collision(self)
}

type extendsLightmapGI struct {
	_ [0]*extendsLightmapGI
	class
}

func (self LightmapGI) VisualInstance3D() VisualInstance3D {
	var parent VisualInstance3D
	parent.class = self.class
	return parent
}
func (self LightmapGI) SetLightData(data LightmapGIData) {
	self.Runtime.LightmapGI_set_light_data(self, data)
}
func (self LightmapGI) GetLightData() LightmapGIData {
	return self.Runtime.LightmapGI_get_light_data(self)
}
func (self LightmapGI) SetBakeQuality(bake_quality LightmapGIBakeQuality) {
	self.Runtime.LightmapGI_set_bake_quality(self, bake_quality)
}
func (self LightmapGI) GetBakeQuality() LightmapGIBakeQuality {
	return self.Runtime.LightmapGI_get_bake_quality(self)
}
func (self LightmapGI) SetBounces(bounces int64) {
	self.Runtime.LightmapGI_set_bounces(self, bounces)
}
func (self LightmapGI) GetBounces() int64 {
	return self.Runtime.LightmapGI_get_bounces(self)
}
func (self LightmapGI) SetBounceIndirectEnergy(bounce_indirect_energy Float) {
	self.Runtime.LightmapGI_set_bounce_indirect_energy(self, bounce_indirect_energy)
}
func (self LightmapGI) GetBounceIndirectEnergy() Float {
	return self.Runtime.LightmapGI_get_bounce_indirect_energy(self)
}
func (self LightmapGI) SetGenerateProbes(subdivision LightmapGIGenerateProbes) {
	self.Runtime.LightmapGI_set_generate_probes(self, subdivision)
}
func (self LightmapGI) GetGenerateProbes() LightmapGIGenerateProbes {
	return self.Runtime.LightmapGI_get_generate_probes(self)
}
func (self LightmapGI) SetBias(bias Float) {
	self.Runtime.LightmapGI_set_bias(self, bias)
}
func (self LightmapGI) GetBias() Float {
	return self.Runtime.LightmapGI_get_bias(self)
}
func (self LightmapGI) SetEnvironmentMode(mode LightmapGIEnvironmentMode) {
	self.Runtime.LightmapGI_set_environment_mode(self, mode)
}
func (self LightmapGI) GetEnvironmentMode() LightmapGIEnvironmentMode {
	return self.Runtime.LightmapGI_get_environment_mode(self)
}
func (self LightmapGI) SetEnvironmentCustomSky(sky Sky) {
	self.Runtime.LightmapGI_set_environment_custom_sky(self, sky)
}
func (self LightmapGI) GetEnvironmentCustomSky() Sky {
	return self.Runtime.LightmapGI_get_environment_custom_sky(self)
}
func (self LightmapGI) SetEnvironmentCustomColor(color Color) {
	self.Runtime.LightmapGI_set_environment_custom_color(self, color)
}
func (self LightmapGI) GetEnvironmentCustomColor() Color {
	return self.Runtime.LightmapGI_get_environment_custom_color(self)
}
func (self LightmapGI) SetEnvironmentCustomEnergy(energy Float) {
	self.Runtime.LightmapGI_set_environment_custom_energy(self, energy)
}
func (self LightmapGI) GetEnvironmentCustomEnergy() Float {
	return self.Runtime.LightmapGI_get_environment_custom_energy(self)
}
func (self LightmapGI) SetMaxTextureSize(max_texture_size int64) {
	self.Runtime.LightmapGI_set_max_texture_size(self, max_texture_size)
}
func (self LightmapGI) GetMaxTextureSize() int64 {
	return self.Runtime.LightmapGI_get_max_texture_size(self)
}
func (self LightmapGI) SetUseDenoiser(use_denoiser bool) {
	self.Runtime.LightmapGI_set_use_denoiser(self, use_denoiser)
}
func (self LightmapGI) IsUsingDenoiser() bool {
	return self.Runtime.LightmapGI_is_using_denoiser(self)
}
func (self LightmapGI) SetDenoiserStrength(denoiser_strength Float) {
	self.Runtime.LightmapGI_set_denoiser_strength(self, denoiser_strength)
}
func (self LightmapGI) GetDenoiserStrength() Float {
	return self.Runtime.LightmapGI_get_denoiser_strength(self)
}
func (self LightmapGI) SetInterior(enable bool) {
	self.Runtime.LightmapGI_set_interior(self, enable)
}
func (self LightmapGI) IsInterior() bool {
	return self.Runtime.LightmapGI_is_interior(self)
}
func (self LightmapGI) SetDirectional(directional bool) {
	self.Runtime.LightmapGI_set_directional(self, directional)
}
func (self LightmapGI) IsDirectional() bool {
	return self.Runtime.LightmapGI_is_directional(self)
}
func (self LightmapGI) SetUseTextureForBounces(use_texture_for_bounces bool) {
	self.Runtime.LightmapGI_set_use_texture_for_bounces(self, use_texture_for_bounces)
}
func (self LightmapGI) IsUsingTextureForBounces() bool {
	return self.Runtime.LightmapGI_is_using_texture_for_bounces(self)
}
func (self LightmapGI) SetCameraAttributes(camera_attributes CameraAttributes) {
	self.Runtime.LightmapGI_set_camera_attributes(self, camera_attributes)
}
func (self LightmapGI) GetCameraAttributes() CameraAttributes {
	return self.Runtime.LightmapGI_get_camera_attributes(self)
}

type extendsLightmapGIData struct {
	_ [0]*extendsLightmapGIData
	class
}

func (self LightmapGIData) Resource() Resource {
	var parent Resource
	parent.class = self.class
	return parent
}
func (self LightmapGIData) SetLightmapTextures(light_textures ArrayOf[TextureLayered]) {
	self.Runtime.LightmapGIData_set_lightmap_textures(self, light_textures)
}
func (self LightmapGIData) GetLightmapTextures() ArrayOf[TextureLayered] {
	return self.Runtime.LightmapGIData_get_lightmap_textures(self)
}
func (self LightmapGIData) SetUsesSphericalHarmonics(uses_spherical_harmonics bool) {
	self.Runtime.LightmapGIData_set_uses_spherical_harmonics(self, uses_spherical_harmonics)
}
func (self LightmapGIData) IsUsingSphericalHarmonics() bool {
	return self.Runtime.LightmapGIData_is_using_spherical_harmonics(self)
}
func (self LightmapGIData) AddUser(path NodePath, uv_scale Rect2, slice_index int64, sub_instance int64) {
	self.Runtime.LightmapGIData_add_user(self, path, uv_scale, slice_index, sub_instance)
}
func (self LightmapGIData) GetUserCount() int64 {
	return self.Runtime.LightmapGIData_get_user_count(self)
}
func (self LightmapGIData) GetUserPath(user_idx int64) NodePath {
	return self.Runtime.LightmapGIData_get_user_path(self, user_idx)
}
func (self LightmapGIData) ClearUsers() {
	self.Runtime.LightmapGIData_clear_users(self)
}
func (self LightmapGIData) SetLightTexture(light_texture TextureLayered) {
	self.Runtime.LightmapGIData_set_light_texture(self, light_texture)
}
func (self LightmapGIData) GetLightTexture() TextureLayered {
	return self.Runtime.LightmapGIData_get_light_texture(self)
}

type extendsLightmapProbe struct {
	_ [0]*extendsLightmapProbe
	class
}

func (self LightmapProbe) Node3D() Node3D {
	var parent Node3D
	parent.class = self.class
	return parent
}

type extendsLightmapper struct {
	_ [0]*extendsLightmapper
	class
}

func (self Lightmapper) RefCounted() RefCounted {
	var parent RefCounted
	parent.class = self.class
	return parent
}

type extendsLightmapperRD struct {
	_ [0]*extendsLightmapperRD
	class
}

func (self LightmapperRD) Lightmapper() Lightmapper {
	var parent Lightmapper
	parent.class = self.class
	return parent
}

type extendsLine2D struct {
	_ [0]*extendsLine2D
	class
}

func (self Line2D) Node2D() Node2D { var parent Node2D; parent.class = self.class; return parent }
func (self Line2D) SetPoints(points PackedVector2Array) {
	self.Runtime.Line2D_set_points(self, points)
}
func (self Line2D) GetPoints() PackedVector2Array {
	return self.Runtime.Line2D_get_points(self)
}
func (self Line2D) SetPointPosition(index int64, position Vector2) {
	self.Runtime.Line2D_set_point_position(self, index, position)
}
func (self Line2D) GetPointPosition(index int64) Vector2 {
	return self.Runtime.Line2D_get_point_position(self, index)
}
func (self Line2D) GetPointCount() int64 {
	return self.Runtime.Line2D_get_point_count(self)
}
func (self Line2D) AddPoint(position Vector2, index int64) {
	self.Runtime.Line2D_add_point(self, position, index)
}
func (self Line2D) RemovePoint(index int64) {
	self.Runtime.Line2D_remove_point(self, index)
}
func (self Line2D) ClearPoints() {
	self.Runtime.Line2D_clear_points(self)
}
func (self Line2D) SetClosed(closed bool) {
	self.Runtime.Line2D_set_closed(self, closed)
}
func (self Line2D) IsClosed() bool {
	return self.Runtime.Line2D_is_closed(self)
}
func (self Line2D) SetWidth(width Float) {
	self.Runtime.Line2D_set_width(self, width)
}
func (self Line2D) GetWidth() Float {
	return self.Runtime.Line2D_get_width(self)
}
func (self Line2D) SetCurve(curve Curve) {
	self.Runtime.Line2D_set_curve(self, curve)
}
func (self Line2D) GetCurve() Curve {
	return self.Runtime.Line2D_get_curve(self)
}
func (self Line2D) SetDefaultColor(color Color) {
	self.Runtime.Line2D_set_default_color(self, color)
}
func (self Line2D) GetDefaultColor() Color {
	return self.Runtime.Line2D_get_default_color(self)
}
func (self Line2D) SetGradient(color Gradient) {
	self.Runtime.Line2D_set_gradient(self, color)
}
func (self Line2D) GetGradient() Gradient {
	return self.Runtime.Line2D_get_gradient(self)
}
func (self Line2D) SetTexture(texture Texture2D) {
	self.Runtime.Line2D_set_texture(self, texture)
}
func (self Line2D) GetTexture() Texture2D {
	return self.Runtime.Line2D_get_texture(self)
}
func (self Line2D) SetTextureMode(mode Line2DLineTextureMode) {
	self.Runtime.Line2D_set_texture_mode(self, mode)
}
func (self Line2D) GetTextureMode() Line2DLineTextureMode {
	return self.Runtime.Line2D_get_texture_mode(self)
}
func (self Line2D) SetJointMode(mode Line2DLineJointMode) {
	self.Runtime.Line2D_set_joint_mode(self, mode)
}
func (self Line2D) GetJointMode() Line2DLineJointMode {
	return self.Runtime.Line2D_get_joint_mode(self)
}
func (self Line2D) SetBeginCapMode(mode Line2DLineCapMode) {
	self.Runtime.Line2D_set_begin_cap_mode(self, mode)
}
func (self Line2D) GetBeginCapMode() Line2DLineCapMode {
	return self.Runtime.Line2D_get_begin_cap_mode(self)
}
func (self Line2D) SetEndCapMode(mode Line2DLineCapMode) {
	self.Runtime.Line2D_set_end_cap_mode(self, mode)
}
func (self Line2D) GetEndCapMode() Line2DLineCapMode {
	return self.Runtime.Line2D_get_end_cap_mode(self)
}
func (self Line2D) SetSharpLimit(limit Float) {
	self.Runtime.Line2D_set_sharp_limit(self, limit)
}
func (self Line2D) GetSharpLimit() Float {
	return self.Runtime.Line2D_get_sharp_limit(self)
}
func (self Line2D) SetRoundPrecision(precision int64) {
	self.Runtime.Line2D_set_round_precision(self, precision)
}
func (self Line2D) GetRoundPrecision() int64 {
	return self.Runtime.Line2D_get_round_precision(self)
}
func (self Line2D) SetAntialiased(antialiased bool) {
	self.Runtime.Line2D_set_antialiased(self, antialiased)
}
func (self Line2D) GetAntialiased() bool {
	return self.Runtime.Line2D_get_antialiased(self)
}

type extendsLineEdit struct {
	_ [0]*extendsLineEdit
	class
}

func (self LineEdit) Control() Control { var parent Control; parent.class = self.class; return parent }
func (self LineEdit) SetHorizontalAlignment(alignment HorizontalAlignment) {
	self.Runtime.LineEdit_set_horizontal_alignment(self, alignment)
}
func (self LineEdit) GetHorizontalAlignment() HorizontalAlignment {
	return self.Runtime.LineEdit_get_horizontal_alignment(self)
}
func (self LineEdit) Clear() {
	self.Runtime.LineEdit_clear(self)
}
func (self LineEdit) Select(from int64, to int64) {
	self.Runtime.LineEdit_select(self, from, to)
}
func (self LineEdit) SelectAll() {
	self.Runtime.LineEdit_select_all(self)
}
func (self LineEdit) Deselect() {
	self.Runtime.LineEdit_deselect(self)
}
func (self LineEdit) HasSelection() bool {
	return self.Runtime.LineEdit_has_selection(self)
}
func (self LineEdit) GetSelectedText() string {
	return self.Runtime.LineEdit_get_selected_text(self)
}
func (self LineEdit) GetSelectionFromColumn() int64 {
	return self.Runtime.LineEdit_get_selection_from_column(self)
}
func (self LineEdit) GetSelectionToColumn() int64 {
	return self.Runtime.LineEdit_get_selection_to_column(self)
}
func (self LineEdit) SetText(text string) {
	self.Runtime.LineEdit_set_text(self, text)
}
func (self LineEdit) GetText() string {
	return self.Runtime.LineEdit_get_text(self)
}
func (self LineEdit) GetDrawControlChars() bool {
	return self.Runtime.LineEdit_get_draw_control_chars(self)
}
func (self LineEdit) SetDrawControlChars(enable bool) {
	self.Runtime.LineEdit_set_draw_control_chars(self, enable)
}
func (self LineEdit) SetTextDirection(direction ControlTextDirection) {
	self.Runtime.LineEdit_set_text_direction(self, direction)
}
func (self LineEdit) GetTextDirection() ControlTextDirection {
	return self.Runtime.LineEdit_get_text_direction(self)
}
func (self LineEdit) SetLanguage(language string) {
	self.Runtime.LineEdit_set_language(self, language)
}
func (self LineEdit) GetLanguage() string {
	return self.Runtime.LineEdit_get_language(self)
}
func (self LineEdit) SetStructuredTextBidiOverride(parser TextServerStructuredTextParser) {
	self.Runtime.LineEdit_set_structured_text_bidi_override(self, parser)
}
func (self LineEdit) GetStructuredTextBidiOverride() TextServerStructuredTextParser {
	return self.Runtime.LineEdit_get_structured_text_bidi_override(self)
}
func (self LineEdit) SetStructuredTextBidiOverrideOptions(args Array) {
	self.Runtime.LineEdit_set_structured_text_bidi_override_options(self, args)
}
func (self LineEdit) GetStructuredTextBidiOverrideOptions() Array {
	return self.Runtime.LineEdit_get_structured_text_bidi_override_options(self)
}
func (self LineEdit) SetPlaceholder(text string) {
	self.Runtime.LineEdit_set_placeholder(self, text)
}
func (self LineEdit) GetPlaceholder() string {
	return self.Runtime.LineEdit_get_placeholder(self)
}
func (self LineEdit) SetCaretColumn(position int64) {
	self.Runtime.LineEdit_set_caret_column(self, position)
}
func (self LineEdit) GetCaretColumn() int64 {
	return self.Runtime.LineEdit_get_caret_column(self)
}
func (self LineEdit) GetScrollOffset() Float {
	return self.Runtime.LineEdit_get_scroll_offset(self)
}
func (self LineEdit) SetExpandToTextLengthEnabled(enabled bool) {
	self.Runtime.LineEdit_set_expand_to_text_length_enabled(self, enabled)
}
func (self LineEdit) IsExpandToTextLengthEnabled() bool {
	return self.Runtime.LineEdit_is_expand_to_text_length_enabled(self)
}
func (self LineEdit) SetCaretBlinkEnabled(enabled bool) {
	self.Runtime.LineEdit_set_caret_blink_enabled(self, enabled)
}
func (self LineEdit) IsCaretBlinkEnabled() bool {
	return self.Runtime.LineEdit_is_caret_blink_enabled(self)
}
func (self LineEdit) SetCaretMidGraphemeEnabled(enabled bool) {
	self.Runtime.LineEdit_set_caret_mid_grapheme_enabled(self, enabled)
}
func (self LineEdit) IsCaretMidGraphemeEnabled() bool {
	return self.Runtime.LineEdit_is_caret_mid_grapheme_enabled(self)
}
func (self LineEdit) SetCaretForceDisplayed(enabled bool) {
	self.Runtime.LineEdit_set_caret_force_displayed(self, enabled)
}
func (self LineEdit) IsCaretForceDisplayed() bool {
	return self.Runtime.LineEdit_is_caret_force_displayed(self)
}
func (self LineEdit) SetCaretBlinkInterval(interval Float) {
	self.Runtime.LineEdit_set_caret_blink_interval(self, interval)
}
func (self LineEdit) GetCaretBlinkInterval() Float {
	return self.Runtime.LineEdit_get_caret_blink_interval(self)
}
func (self LineEdit) SetMaxLength(chars int64) {
	self.Runtime.LineEdit_set_max_length(self, chars)
}
func (self LineEdit) GetMaxLength() int64 {
	return self.Runtime.LineEdit_get_max_length(self)
}
func (self LineEdit) InsertTextAtCaret(text string) {
	self.Runtime.LineEdit_insert_text_at_caret(self, text)
}
func (self LineEdit) DeleteCharAtCaret() {
	self.Runtime.LineEdit_delete_char_at_caret(self)
}
func (self LineEdit) DeleteText(from_column int64, to_column int64) {
	self.Runtime.LineEdit_delete_text(self, from_column, to_column)
}
func (self LineEdit) SetEditable(enabled bool) {
	self.Runtime.LineEdit_set_editable(self, enabled)
}
func (self LineEdit) IsEditable() bool {
	return self.Runtime.LineEdit_is_editable(self)
}
func (self LineEdit) SetSecret(enabled bool) {
	self.Runtime.LineEdit_set_secret(self, enabled)
}
func (self LineEdit) IsSecret() bool {
	return self.Runtime.LineEdit_is_secret(self)
}
func (self LineEdit) SetSecretCharacter(character string) {
	self.Runtime.LineEdit_set_secret_character(self, character)
}
func (self LineEdit) GetSecretCharacter() string {
	return self.Runtime.LineEdit_get_secret_character(self)
}
func (self LineEdit) MenuOption(option int64) {
	self.Runtime.LineEdit_menu_option(self, option)
}
func (self LineEdit) GetMenu() PopupMenu {
	return self.Runtime.LineEdit_get_menu(self)
}
func (self LineEdit) IsMenuVisible() bool {
	return self.Runtime.LineEdit_is_menu_visible(self)
}
func (self LineEdit) SetContextMenuEnabled(enable bool) {
	self.Runtime.LineEdit_set_context_menu_enabled(self, enable)
}
func (self LineEdit) IsContextMenuEnabled() bool {
	return self.Runtime.LineEdit_is_context_menu_enabled(self)
}
func (self LineEdit) SetVirtualKeyboardEnabled(enable bool) {
	self.Runtime.LineEdit_set_virtual_keyboard_enabled(self, enable)
}
func (self LineEdit) IsVirtualKeyboardEnabled() bool {
	return self.Runtime.LineEdit_is_virtual_keyboard_enabled(self)
}
func (self LineEdit) SetVirtualKeyboardType(atype LineEditVirtualKeyboardType) {
	self.Runtime.LineEdit_set_virtual_keyboard_type(self, atype)
}
func (self LineEdit) GetVirtualKeyboardType() LineEditVirtualKeyboardType {
	return self.Runtime.LineEdit_get_virtual_keyboard_type(self)
}
func (self LineEdit) SetClearButtonEnabled(enable bool) {
	self.Runtime.LineEdit_set_clear_button_enabled(self, enable)
}
func (self LineEdit) IsClearButtonEnabled() bool {
	return self.Runtime.LineEdit_is_clear_button_enabled(self)
}
func (self LineEdit) SetShortcutKeysEnabled(enable bool) {
	self.Runtime.LineEdit_set_shortcut_keys_enabled(self, enable)
}
func (self LineEdit) IsShortcutKeysEnabled() bool {
	return self.Runtime.LineEdit_is_shortcut_keys_enabled(self)
}
func (self LineEdit) SetMiddleMousePasteEnabled(enable bool) {
	self.Runtime.LineEdit_set_middle_mouse_paste_enabled(self, enable)
}
func (self LineEdit) IsMiddleMousePasteEnabled() bool {
	return self.Runtime.LineEdit_is_middle_mouse_paste_enabled(self)
}
func (self LineEdit) SetSelectingEnabled(enable bool) {
	self.Runtime.LineEdit_set_selecting_enabled(self, enable)
}
func (self LineEdit) IsSelectingEnabled() bool {
	return self.Runtime.LineEdit_is_selecting_enabled(self)
}
func (self LineEdit) SetDeselectOnFocusLossEnabled(enable bool) {
	self.Runtime.LineEdit_set_deselect_on_focus_loss_enabled(self, enable)
}
func (self LineEdit) IsDeselectOnFocusLossEnabled() bool {
	return self.Runtime.LineEdit_is_deselect_on_focus_loss_enabled(self)
}
func (self LineEdit) SetDragAndDropSelectionEnabled(enable bool) {
	self.Runtime.LineEdit_set_drag_and_drop_selection_enabled(self, enable)
}
func (self LineEdit) IsDragAndDropSelectionEnabled() bool {
	return self.Runtime.LineEdit_is_drag_and_drop_selection_enabled(self)
}
func (self LineEdit) SetRightIcon(icon Texture2D) {
	self.Runtime.LineEdit_set_right_icon(self, icon)
}
func (self LineEdit) GetRightIcon() Texture2D {
	return self.Runtime.LineEdit_get_right_icon(self)
}
func (self LineEdit) SetFlat(enabled bool) {
	self.Runtime.LineEdit_set_flat(self, enabled)
}
func (self LineEdit) IsFlat() bool {
	return self.Runtime.LineEdit_is_flat(self)
}
func (self LineEdit) SetSelectAllOnFocus(enabled bool) {
	self.Runtime.LineEdit_set_select_all_on_focus(self, enabled)
}
func (self LineEdit) IsSelectAllOnFocus() bool {
	return self.Runtime.LineEdit_is_select_all_on_focus(self)
}

type extendsLinkButton struct {
	_ [0]*extendsLinkButton
	class
}

func (self LinkButton) BaseButton() BaseButton {
	var parent BaseButton
	parent.class = self.class
	return parent
}
func (self LinkButton) SetText(text string) {
	self.Runtime.LinkButton_set_text(self, text)
}
func (self LinkButton) GetText() string {
	return self.Runtime.LinkButton_get_text(self)
}
func (self LinkButton) SetTextDirection(direction ControlTextDirection) {
	self.Runtime.LinkButton_set_text_direction(self, direction)
}
func (self LinkButton) GetTextDirection() ControlTextDirection {
	return self.Runtime.LinkButton_get_text_direction(self)
}
func (self LinkButton) SetLanguage(language string) {
	self.Runtime.LinkButton_set_language(self, language)
}
func (self LinkButton) GetLanguage() string {
	return self.Runtime.LinkButton_get_language(self)
}
func (self LinkButton) SetUri(uri string) {
	self.Runtime.LinkButton_set_uri(self, uri)
}
func (self LinkButton) GetUri() string {
	return self.Runtime.LinkButton_get_uri(self)
}
func (self LinkButton) SetUnderlineMode(underline_mode LinkButtonUnderlineMode) {
	self.Runtime.LinkButton_set_underline_mode(self, underline_mode)
}
func (self LinkButton) GetUnderlineMode() LinkButtonUnderlineMode {
	return self.Runtime.LinkButton_get_underline_mode(self)
}
func (self LinkButton) SetStructuredTextBidiOverride(parser TextServerStructuredTextParser) {
	self.Runtime.LinkButton_set_structured_text_bidi_override(self, parser)
}
func (self LinkButton) GetStructuredTextBidiOverride() TextServerStructuredTextParser {
	return self.Runtime.LinkButton_get_structured_text_bidi_override(self)
}
func (self LinkButton) SetStructuredTextBidiOverrideOptions(args Array) {
	self.Runtime.LinkButton_set_structured_text_bidi_override_options(self, args)
}
func (self LinkButton) GetStructuredTextBidiOverrideOptions() Array {
	return self.Runtime.LinkButton_get_structured_text_bidi_override_options(self)
}

type extendsMainLoop struct {
	_ [0]*extendsMainLoop
	class
}

func (self MainLoop) Object() Object { var parent Object; parent.class = self.class; return parent }

type extendsMarginContainer struct {
	_ [0]*extendsMarginContainer
	class
}

func (self MarginContainer) Container() Container {
	var parent Container
	parent.class = self.class
	return parent
}

type extendsMarker2D struct {
	_ [0]*extendsMarker2D
	class
}

func (self Marker2D) Node2D() Node2D { var parent Node2D; parent.class = self.class; return parent }
func (self Marker2D) SetGizmoExtents(extents Float) {
	self.Runtime.Marker2D_set_gizmo_extents(self, extents)
}
func (self Marker2D) GetGizmoExtents() Float {
	return self.Runtime.Marker2D_get_gizmo_extents(self)
}

type extendsMarker3D struct {
	_ [0]*extendsMarker3D
	class
}

func (self Marker3D) Node3D() Node3D { var parent Node3D; parent.class = self.class; return parent }
func (self Marker3D) SetGizmoExtents(extents Float) {
	self.Runtime.Marker3D_set_gizmo_extents(self, extents)
}
func (self Marker3D) GetGizmoExtents() Float {
	return self.Runtime.Marker3D_get_gizmo_extents(self)
}

type extendsMarshalls struct {
	_ [0]*extendsMarshalls
	class
}

func (self Marshalls) Object() Object { var parent Object; parent.class = self.class; return parent }
func (self Marshalls) VariantToBase64(variant any, full_objects bool) string {
	return self.Runtime.Marshalls_variant_to_base64(self, variant, full_objects)
}
func (self Marshalls) Base64ToVariant(base64_str string, allow_objects bool) any {
	return self.Runtime.Marshalls_base64_to_variant(self, base64_str, allow_objects)
}
func (self Marshalls) RawToBase64(array PackedByteArray) string {
	return self.Runtime.Marshalls_raw_to_base64(self, array)
}
func (self Marshalls) Base64ToRaw(base64_str string) PackedByteArray {
	return self.Runtime.Marshalls_base64_to_raw(self, base64_str)
}
func (self Marshalls) Utf8ToBase64(utf8_str string) string {
	return self.Runtime.Marshalls_utf8_to_base64(self, utf8_str)
}
func (self Marshalls) Base64ToUtf8(base64_str string) string {
	return self.Runtime.Marshalls_base64_to_utf8(self, base64_str)
}

type extendsMaterial struct {
	_ [0]*extendsMaterial
	class
}

func (self Material) Resource() Resource {
	var parent Resource
	parent.class = self.class
	return parent
}
func (self Material) SetNextPass(next_pass Material) {
	self.Runtime.Material_set_next_pass(self, next_pass)
}
func (self Material) GetNextPass() Material {
	return self.Runtime.Material_get_next_pass(self)
}
func (self Material) SetRenderPriority(priority int64) {
	self.Runtime.Material_set_render_priority(self, priority)
}
func (self Material) GetRenderPriority() int64 {
	return self.Runtime.Material_get_render_priority(self)
}
func (self Material) InspectNativeShaderCode() {
	self.Runtime.Material_inspect_native_shader_code(self)
}
func (self Material) CreatePlaceholder() Resource {
	return self.Runtime.Material_create_placeholder(self)
}

type extendsMenuBar struct {
	_ [0]*extendsMenuBar
	class
}

func (self MenuBar) Control() Control { var parent Control; parent.class = self.class; return parent }
func (self MenuBar) SetSwitchOnHover(enable bool) {
	self.Runtime.MenuBar_set_switch_on_hover(self, enable)
}
func (self MenuBar) IsSwitchOnHover() bool {
	return self.Runtime.MenuBar_is_switch_on_hover(self)
}
func (self MenuBar) SetDisableShortcuts(disabled bool) {
	self.Runtime.MenuBar_set_disable_shortcuts(self, disabled)
}
func (self MenuBar) SetPreferGlobalMenu(enabled bool) {
	self.Runtime.MenuBar_set_prefer_global_menu(self, enabled)
}
func (self MenuBar) IsPreferGlobalMenu() bool {
	return self.Runtime.MenuBar_is_prefer_global_menu(self)
}
func (self MenuBar) IsNativeMenu() bool {
	return self.Runtime.MenuBar_is_native_menu(self)
}
func (self MenuBar) GetMenuCount() int64 {
	return self.Runtime.MenuBar_get_menu_count(self)
}
func (self MenuBar) SetTextDirection(direction ControlTextDirection) {
	self.Runtime.MenuBar_set_text_direction(self, direction)
}
func (self MenuBar) GetTextDirection() ControlTextDirection {
	return self.Runtime.MenuBar_get_text_direction(self)
}
func (self MenuBar) SetLanguage(language string) {
	self.Runtime.MenuBar_set_language(self, language)
}
func (self MenuBar) GetLanguage() string {
	return self.Runtime.MenuBar_get_language(self)
}
func (self MenuBar) SetFlat(enabled bool) {
	self.Runtime.MenuBar_set_flat(self, enabled)
}
func (self MenuBar) IsFlat() bool {
	return self.Runtime.MenuBar_is_flat(self)
}
func (self MenuBar) SetStartIndex(enabled int64) {
	self.Runtime.MenuBar_set_start_index(self, enabled)
}
func (self MenuBar) GetStartIndex() int64 {
	return self.Runtime.MenuBar_get_start_index(self)
}
func (self MenuBar) SetMenuTitle(menu int64, title string) {
	self.Runtime.MenuBar_set_menu_title(self, menu, title)
}
func (self MenuBar) GetMenuTitle(menu int64) string {
	return self.Runtime.MenuBar_get_menu_title(self, menu)
}
func (self MenuBar) SetMenuTooltip(menu int64, tooltip string) {
	self.Runtime.MenuBar_set_menu_tooltip(self, menu, tooltip)
}
func (self MenuBar) GetMenuTooltip(menu int64) string {
	return self.Runtime.MenuBar_get_menu_tooltip(self, menu)
}
func (self MenuBar) SetMenuDisabled(menu int64, disabled bool) {
	self.Runtime.MenuBar_set_menu_disabled(self, menu, disabled)
}
func (self MenuBar) IsMenuDisabled(menu int64) bool {
	return self.Runtime.MenuBar_is_menu_disabled(self, menu)
}
func (self MenuBar) SetMenuHidden(menu int64, hidden bool) {
	self.Runtime.MenuBar_set_menu_hidden(self, menu, hidden)
}
func (self MenuBar) IsMenuHidden(menu int64) bool {
	return self.Runtime.MenuBar_is_menu_hidden(self, menu)
}
func (self MenuBar) GetMenuPopup(menu int64) PopupMenu {
	return self.Runtime.MenuBar_get_menu_popup(self, menu)
}

type extendsMenuButton struct {
	_ [0]*extendsMenuButton
	class
}

func (self MenuButton) Button() Button { var parent Button; parent.class = self.class; return parent }
func (self MenuButton) GetPopup() PopupMenu {
	return self.Runtime.MenuButton_get_popup(self)
}
func (self MenuButton) ShowPopup() {
	self.Runtime.MenuButton_show_popup(self)
}
func (self MenuButton) SetSwitchOnHover(enable bool) {
	self.Runtime.MenuButton_set_switch_on_hover(self, enable)
}
func (self MenuButton) IsSwitchOnHover() bool {
	return self.Runtime.MenuButton_is_switch_on_hover(self)
}
func (self MenuButton) SetDisableShortcuts(disabled bool) {
	self.Runtime.MenuButton_set_disable_shortcuts(self, disabled)
}
func (self MenuButton) SetItemCount(count int64) {
	self.Runtime.MenuButton_set_item_count(self, count)
}
func (self MenuButton) GetItemCount() int64 {
	return self.Runtime.MenuButton_get_item_count(self)
}

type extendsMesh struct {
	_ [0]*extendsMesh
	class
}

func (self Mesh) Resource() Resource { var parent Resource; parent.class = self.class; return parent }
func (self Mesh) SetLightmapSizeHint(size Vector2i) {
	self.Runtime.Mesh_set_lightmap_size_hint(self, size)
}
func (self Mesh) GetLightmapSizeHint() Vector2i {
	return self.Runtime.Mesh_get_lightmap_size_hint(self)
}
func (self Mesh) GetAabb() AABB {
	return self.Runtime.Mesh_get_aabb(self)
}
func (self Mesh) GetFaces() PackedVector3Array {
	return self.Runtime.Mesh_get_faces(self)
}
func (self Mesh) GetSurfaceCount() int64 {
	return self.Runtime.Mesh_get_surface_count(self)
}
func (self Mesh) SurfaceGetArrays(surf_idx int64) Array {
	return self.Runtime.Mesh_surface_get_arrays(self, surf_idx)
}
func (self Mesh) SurfaceGetBlendShapeArrays(surf_idx int64) ArrayOf[Array] {
	return self.Runtime.Mesh_surface_get_blend_shape_arrays(self, surf_idx)
}
func (self Mesh) SurfaceSetMaterial(surf_idx int64, material Material) {
	self.Runtime.Mesh_surface_set_material(self, surf_idx, material)
}
func (self Mesh) SurfaceGetMaterial(surf_idx int64) Material {
	return self.Runtime.Mesh_surface_get_material(self, surf_idx)
}
func (self Mesh) CreatePlaceholder() Resource {
	return self.Runtime.Mesh_create_placeholder(self)
}
func (self Mesh) CreateTrimeshShape() ConcavePolygonShape3D {
	return self.Runtime.Mesh_create_trimesh_shape(self)
}
func (self Mesh) CreateConvexShape(clean bool, simplify bool) ConvexPolygonShape3D {
	return self.Runtime.Mesh_create_convex_shape(self, clean, simplify)
}
func (self Mesh) CreateOutline(margin Float) Mesh {
	return self.Runtime.Mesh_create_outline(self, margin)
}
func (self Mesh) GenerateTriangleMesh() TriangleMesh {
	return self.Runtime.Mesh_generate_triangle_mesh(self)
}

type extendsMeshConvexDecompositionSettings struct {
	_ [0]*extendsMeshConvexDecompositionSettings
	class
}

func (self MeshConvexDecompositionSettings) RefCounted() RefCounted {
	var parent RefCounted
	parent.class = self.class
	return parent
}
func (self MeshConvexDecompositionSettings) SetMaxConcavity(max_concavity Float) {
	self.Runtime.MeshConvexDecompositionSettings_set_max_concavity(self, max_concavity)
}
func (self MeshConvexDecompositionSettings) GetMaxConcavity() Float {
	return self.Runtime.MeshConvexDecompositionSettings_get_max_concavity(self)
}
func (self MeshConvexDecompositionSettings) SetSymmetryPlanesClippingBias(symmetry_planes_clipping_bias Float) {
	self.Runtime.MeshConvexDecompositionSettings_set_symmetry_planes_clipping_bias(self, symmetry_planes_clipping_bias)
}
func (self MeshConvexDecompositionSettings) GetSymmetryPlanesClippingBias() Float {
	return self.Runtime.MeshConvexDecompositionSettings_get_symmetry_planes_clipping_bias(self)
}
func (self MeshConvexDecompositionSettings) SetRevolutionAxesClippingBias(revolution_axes_clipping_bias Float) {
	self.Runtime.MeshConvexDecompositionSettings_set_revolution_axes_clipping_bias(self, revolution_axes_clipping_bias)
}
func (self MeshConvexDecompositionSettings) GetRevolutionAxesClippingBias() Float {
	return self.Runtime.MeshConvexDecompositionSettings_get_revolution_axes_clipping_bias(self)
}
func (self MeshConvexDecompositionSettings) SetMinVolumePerConvexHull(min_volume_per_convex_hull Float) {
	self.Runtime.MeshConvexDecompositionSettings_set_min_volume_per_convex_hull(self, min_volume_per_convex_hull)
}
func (self MeshConvexDecompositionSettings) GetMinVolumePerConvexHull() Float {
	return self.Runtime.MeshConvexDecompositionSettings_get_min_volume_per_convex_hull(self)
}
func (self MeshConvexDecompositionSettings) SetResolution(min_volume_per_convex_hull int64) {
	self.Runtime.MeshConvexDecompositionSettings_set_resolution(self, min_volume_per_convex_hull)
}
func (self MeshConvexDecompositionSettings) GetResolution() int64 {
	return self.Runtime.MeshConvexDecompositionSettings_get_resolution(self)
}
func (self MeshConvexDecompositionSettings) SetMaxNumVerticesPerConvexHull(max_num_vertices_per_convex_hull int64) {
	self.Runtime.MeshConvexDecompositionSettings_set_max_num_vertices_per_convex_hull(self, max_num_vertices_per_convex_hull)
}
func (self MeshConvexDecompositionSettings) GetMaxNumVerticesPerConvexHull() int64 {
	return self.Runtime.MeshConvexDecompositionSettings_get_max_num_vertices_per_convex_hull(self)
}
func (self MeshConvexDecompositionSettings) SetPlaneDownsampling(plane_downsampling int64) {
	self.Runtime.MeshConvexDecompositionSettings_set_plane_downsampling(self, plane_downsampling)
}
func (self MeshConvexDecompositionSettings) GetPlaneDownsampling() int64 {
	return self.Runtime.MeshConvexDecompositionSettings_get_plane_downsampling(self)
}
func (self MeshConvexDecompositionSettings) SetConvexHullDownsampling(convex_hull_downsampling int64) {
	self.Runtime.MeshConvexDecompositionSettings_set_convex_hull_downsampling(self, convex_hull_downsampling)
}
func (self MeshConvexDecompositionSettings) GetConvexHullDownsampling() int64 {
	return self.Runtime.MeshConvexDecompositionSettings_get_convex_hull_downsampling(self)
}
func (self MeshConvexDecompositionSettings) SetNormalizeMesh(normalize_mesh bool) {
	self.Runtime.MeshConvexDecompositionSettings_set_normalize_mesh(self, normalize_mesh)
}
func (self MeshConvexDecompositionSettings) GetNormalizeMesh() bool {
	return self.Runtime.MeshConvexDecompositionSettings_get_normalize_mesh(self)
}
func (self MeshConvexDecompositionSettings) SetMode(mode MeshConvexDecompositionSettingsMode) {
	self.Runtime.MeshConvexDecompositionSettings_set_mode(self, mode)
}
func (self MeshConvexDecompositionSettings) GetMode() MeshConvexDecompositionSettingsMode {
	return self.Runtime.MeshConvexDecompositionSettings_get_mode(self)
}
func (self MeshConvexDecompositionSettings) SetConvexHullApproximation(convex_hull_approximation bool) {
	self.Runtime.MeshConvexDecompositionSettings_set_convex_hull_approximation(self, convex_hull_approximation)
}
func (self MeshConvexDecompositionSettings) GetConvexHullApproximation() bool {
	return self.Runtime.MeshConvexDecompositionSettings_get_convex_hull_approximation(self)
}
func (self MeshConvexDecompositionSettings) SetMaxConvexHulls(max_convex_hulls int64) {
	self.Runtime.MeshConvexDecompositionSettings_set_max_convex_hulls(self, max_convex_hulls)
}
func (self MeshConvexDecompositionSettings) GetMaxConvexHulls() int64 {
	return self.Runtime.MeshConvexDecompositionSettings_get_max_convex_hulls(self)
}
func (self MeshConvexDecompositionSettings) SetProjectHullVertices(project_hull_vertices bool) {
	self.Runtime.MeshConvexDecompositionSettings_set_project_hull_vertices(self, project_hull_vertices)
}
func (self MeshConvexDecompositionSettings) GetProjectHullVertices() bool {
	return self.Runtime.MeshConvexDecompositionSettings_get_project_hull_vertices(self)
}

type extendsMeshDataTool struct {
	_ [0]*extendsMeshDataTool
	class
}

func (self MeshDataTool) RefCounted() RefCounted {
	var parent RefCounted
	parent.class = self.class
	return parent
}
func (self MeshDataTool) Clear() {
	self.Runtime.MeshDataTool_clear(self)
}
func (self MeshDataTool) CreateFromSurface(mesh ArrayMesh, surface int64) int64 {
	return self.Runtime.MeshDataTool_create_from_surface(self, mesh, surface)
}
func (self MeshDataTool) CommitToSurface(mesh ArrayMesh, compression_flags int64) int64 {
	return self.Runtime.MeshDataTool_commit_to_surface(self, mesh, compression_flags)
}
func (self MeshDataTool) GetFormat() int64 {
	return self.Runtime.MeshDataTool_get_format(self)
}
func (self MeshDataTool) GetVertexCount() int64 {
	return self.Runtime.MeshDataTool_get_vertex_count(self)
}
func (self MeshDataTool) GetEdgeCount() int64 {
	return self.Runtime.MeshDataTool_get_edge_count(self)
}
func (self MeshDataTool) GetFaceCount() int64 {
	return self.Runtime.MeshDataTool_get_face_count(self)
}
func (self MeshDataTool) SetVertex(idx int64, vertex Vector3) {
	self.Runtime.MeshDataTool_set_vertex(self, idx, vertex)
}
func (self MeshDataTool) GetVertex(idx int64) Vector3 {
	return self.Runtime.MeshDataTool_get_vertex(self, idx)
}
func (self MeshDataTool) SetVertexNormal(idx int64, normal Vector3) {
	self.Runtime.MeshDataTool_set_vertex_normal(self, idx, normal)
}
func (self MeshDataTool) GetVertexNormal(idx int64) Vector3 {
	return self.Runtime.MeshDataTool_get_vertex_normal(self, idx)
}
func (self MeshDataTool) SetVertexTangent(idx int64, tangent Plane) {
	self.Runtime.MeshDataTool_set_vertex_tangent(self, idx, tangent)
}
func (self MeshDataTool) GetVertexTangent(idx int64) Plane {
	return self.Runtime.MeshDataTool_get_vertex_tangent(self, idx)
}
func (self MeshDataTool) SetVertexUv(idx int64, uv Vector2) {
	self.Runtime.MeshDataTool_set_vertex_uv(self, idx, uv)
}
func (self MeshDataTool) GetVertexUv(idx int64) Vector2 {
	return self.Runtime.MeshDataTool_get_vertex_uv(self, idx)
}
func (self MeshDataTool) SetVertexUv2(idx int64, uv2 Vector2) {
	self.Runtime.MeshDataTool_set_vertex_uv2(self, idx, uv2)
}
func (self MeshDataTool) GetVertexUv2(idx int64) Vector2 {
	return self.Runtime.MeshDataTool_get_vertex_uv2(self, idx)
}
func (self MeshDataTool) SetVertexColor(idx int64, color Color) {
	self.Runtime.MeshDataTool_set_vertex_color(self, idx, color)
}
func (self MeshDataTool) GetVertexColor(idx int64) Color {
	return self.Runtime.MeshDataTool_get_vertex_color(self, idx)
}
func (self MeshDataTool) SetVertexBones(idx int64, bones PackedInt32Array) {
	self.Runtime.MeshDataTool_set_vertex_bones(self, idx, bones)
}
func (self MeshDataTool) GetVertexBones(idx int64) PackedInt32Array {
	return self.Runtime.MeshDataTool_get_vertex_bones(self, idx)
}
func (self MeshDataTool) SetVertexWeights(idx int64, weights PackedFloat32Array) {
	self.Runtime.MeshDataTool_set_vertex_weights(self, idx, weights)
}
func (self MeshDataTool) GetVertexWeights(idx int64) PackedFloat32Array {
	return self.Runtime.MeshDataTool_get_vertex_weights(self, idx)
}
func (self MeshDataTool) SetVertexMeta(idx int64, meta any) {
	self.Runtime.MeshDataTool_set_vertex_meta(self, idx, meta)
}
func (self MeshDataTool) GetVertexMeta(idx int64) any {
	return self.Runtime.MeshDataTool_get_vertex_meta(self, idx)
}
func (self MeshDataTool) GetVertexEdges(idx int64) PackedInt32Array {
	return self.Runtime.MeshDataTool_get_vertex_edges(self, idx)
}
func (self MeshDataTool) GetVertexFaces(idx int64) PackedInt32Array {
	return self.Runtime.MeshDataTool_get_vertex_faces(self, idx)
}
func (self MeshDataTool) GetEdgeVertex(idx int64, vertex int64) int64 {
	return self.Runtime.MeshDataTool_get_edge_vertex(self, idx, vertex)
}
func (self MeshDataTool) GetEdgeFaces(idx int64) PackedInt32Array {
	return self.Runtime.MeshDataTool_get_edge_faces(self, idx)
}
func (self MeshDataTool) SetEdgeMeta(idx int64, meta any) {
	self.Runtime.MeshDataTool_set_edge_meta(self, idx, meta)
}
func (self MeshDataTool) GetEdgeMeta(idx int64) any {
	return self.Runtime.MeshDataTool_get_edge_meta(self, idx)
}
func (self MeshDataTool) GetFaceVertex(idx int64, vertex int64) int64 {
	return self.Runtime.MeshDataTool_get_face_vertex(self, idx, vertex)
}
func (self MeshDataTool) GetFaceEdge(idx int64, edge int64) int64 {
	return self.Runtime.MeshDataTool_get_face_edge(self, idx, edge)
}
func (self MeshDataTool) SetFaceMeta(idx int64, meta any) {
	self.Runtime.MeshDataTool_set_face_meta(self, idx, meta)
}
func (self MeshDataTool) GetFaceMeta(idx int64) any {
	return self.Runtime.MeshDataTool_get_face_meta(self, idx)
}
func (self MeshDataTool) GetFaceNormal(idx int64) Vector3 {
	return self.Runtime.MeshDataTool_get_face_normal(self, idx)
}
func (self MeshDataTool) SetMaterial(material Material) {
	self.Runtime.MeshDataTool_set_material(self, material)
}
func (self MeshDataTool) GetMaterial() Material {
	return self.Runtime.MeshDataTool_get_material(self)
}

type extendsMeshInstance2D struct {
	_ [0]*extendsMeshInstance2D
	class
}

func (self MeshInstance2D) Node2D() Node2D {
	var parent Node2D
	parent.class = self.class
	return parent
}
func (self MeshInstance2D) SetMesh(mesh Mesh) {
	self.Runtime.MeshInstance2D_set_mesh(self, mesh)
}
func (self MeshInstance2D) GetMesh() Mesh {
	return self.Runtime.MeshInstance2D_get_mesh(self)
}
func (self MeshInstance2D) SetTexture(texture Texture2D) {
	self.Runtime.MeshInstance2D_set_texture(self, texture)
}
func (self MeshInstance2D) GetTexture() Texture2D {
	return self.Runtime.MeshInstance2D_get_texture(self)
}

type extendsMeshInstance3D struct {
	_ [0]*extendsMeshInstance3D
	class
}

func (self MeshInstance3D) GeometryInstance3D() GeometryInstance3D {
	var parent GeometryInstance3D
	parent.class = self.class
	return parent
}
func (self MeshInstance3D) SetMesh(mesh Mesh) {
	self.Runtime.MeshInstance3D_set_mesh(self, mesh)
}
func (self MeshInstance3D) GetMesh() Mesh {
	return self.Runtime.MeshInstance3D_get_mesh(self)
}
func (self MeshInstance3D) SetSkeletonPath(skeleton_path NodePath) {
	self.Runtime.MeshInstance3D_set_skeleton_path(self, skeleton_path)
}
func (self MeshInstance3D) GetSkeletonPath() NodePath {
	return self.Runtime.MeshInstance3D_get_skeleton_path(self)
}
func (self MeshInstance3D) SetSkin(skin Skin) {
	self.Runtime.MeshInstance3D_set_skin(self, skin)
}
func (self MeshInstance3D) GetSkin() Skin {
	return self.Runtime.MeshInstance3D_get_skin(self)
}
func (self MeshInstance3D) GetSurfaceOverrideMaterialCount() int64 {
	return self.Runtime.MeshInstance3D_get_surface_override_material_count(self)
}
func (self MeshInstance3D) SetSurfaceOverrideMaterial(surface int64, material Material) {
	self.Runtime.MeshInstance3D_set_surface_override_material(self, surface, material)
}
func (self MeshInstance3D) GetSurfaceOverrideMaterial(surface int64) Material {
	return self.Runtime.MeshInstance3D_get_surface_override_material(self, surface)
}
func (self MeshInstance3D) GetActiveMaterial(surface int64) Material {
	return self.Runtime.MeshInstance3D_get_active_material(self, surface)
}
func (self MeshInstance3D) CreateTrimeshCollision() {
	self.Runtime.MeshInstance3D_create_trimesh_collision(self)
}
func (self MeshInstance3D) CreateConvexCollision(clean bool, simplify bool) {
	self.Runtime.MeshInstance3D_create_convex_collision(self, clean, simplify)
}
func (self MeshInstance3D) CreateMultipleConvexCollisions(settings MeshConvexDecompositionSettings) {
	self.Runtime.MeshInstance3D_create_multiple_convex_collisions(self, settings)
}
func (self MeshInstance3D) GetBlendShapeCount() int64 {
	return self.Runtime.MeshInstance3D_get_blend_shape_count(self)
}
func (self MeshInstance3D) FindBlendShapeByName(name string) int64 {
	return self.Runtime.MeshInstance3D_find_blend_shape_by_name(self, name)
}
func (self MeshInstance3D) GetBlendShapeValue(blend_shape_idx int64) Float {
	return self.Runtime.MeshInstance3D_get_blend_shape_value(self, blend_shape_idx)
}
func (self MeshInstance3D) SetBlendShapeValue(blend_shape_idx int64, value Float) {
	self.Runtime.MeshInstance3D_set_blend_shape_value(self, blend_shape_idx, value)
}
func (self MeshInstance3D) CreateDebugTangents() {
	self.Runtime.MeshInstance3D_create_debug_tangents(self)
}

type extendsMeshLibrary struct {
	_ [0]*extendsMeshLibrary
	class
}

func (self MeshLibrary) Resource() Resource {
	var parent Resource
	parent.class = self.class
	return parent
}
func (self MeshLibrary) CreateItem(id int64) {
	self.Runtime.MeshLibrary_create_item(self, id)
}
func (self MeshLibrary) SetItemName(id int64, name string) {
	self.Runtime.MeshLibrary_set_item_name(self, id, name)
}
func (self MeshLibrary) SetItemMesh(id int64, mesh Mesh) {
	self.Runtime.MeshLibrary_set_item_mesh(self, id, mesh)
}
func (self MeshLibrary) SetItemMeshTransform(id int64, mesh_transform Transform3D) {
	self.Runtime.MeshLibrary_set_item_mesh_transform(self, id, mesh_transform)
}
func (self MeshLibrary) SetItemNavigationMesh(id int64, navigation_mesh NavigationMesh) {
	self.Runtime.MeshLibrary_set_item_navigation_mesh(self, id, navigation_mesh)
}
func (self MeshLibrary) SetItemNavigationMeshTransform(id int64, navigation_mesh Transform3D) {
	self.Runtime.MeshLibrary_set_item_navigation_mesh_transform(self, id, navigation_mesh)
}
func (self MeshLibrary) SetItemNavigationLayers(id int64, navigation_layers int64) {
	self.Runtime.MeshLibrary_set_item_navigation_layers(self, id, navigation_layers)
}
func (self MeshLibrary) SetItemShapes(id int64, shapes Array) {
	self.Runtime.MeshLibrary_set_item_shapes(self, id, shapes)
}
func (self MeshLibrary) SetItemPreview(id int64, texture Texture2D) {
	self.Runtime.MeshLibrary_set_item_preview(self, id, texture)
}
func (self MeshLibrary) GetItemName(id int64) string {
	return self.Runtime.MeshLibrary_get_item_name(self, id)
}
func (self MeshLibrary) GetItemMesh(id int64) Mesh {
	return self.Runtime.MeshLibrary_get_item_mesh(self, id)
}
func (self MeshLibrary) GetItemMeshTransform(id int64) Transform3D {
	return self.Runtime.MeshLibrary_get_item_mesh_transform(self, id)
}
func (self MeshLibrary) GetItemNavigationMesh(id int64) NavigationMesh {
	return self.Runtime.MeshLibrary_get_item_navigation_mesh(self, id)
}
func (self MeshLibrary) GetItemNavigationMeshTransform(id int64) Transform3D {
	return self.Runtime.MeshLibrary_get_item_navigation_mesh_transform(self, id)
}
func (self MeshLibrary) GetItemNavigationLayers(id int64) int64 {
	return self.Runtime.MeshLibrary_get_item_navigation_layers(self, id)
}
func (self MeshLibrary) GetItemShapes(id int64) Array {
	return self.Runtime.MeshLibrary_get_item_shapes(self, id)
}
func (self MeshLibrary) GetItemPreview(id int64) Texture2D {
	return self.Runtime.MeshLibrary_get_item_preview(self, id)
}
func (self MeshLibrary) RemoveItem(id int64) {
	self.Runtime.MeshLibrary_remove_item(self, id)
}
func (self MeshLibrary) FindItemByName(name string) int64 {
	return self.Runtime.MeshLibrary_find_item_by_name(self, name)
}
func (self MeshLibrary) Clear() {
	self.Runtime.MeshLibrary_clear(self)
}
func (self MeshLibrary) GetItemList() PackedInt32Array {
	return self.Runtime.MeshLibrary_get_item_list(self)
}
func (self MeshLibrary) GetLastUnusedItemId() int64 {
	return self.Runtime.MeshLibrary_get_last_unused_item_id(self)
}

type extendsMeshTexture struct {
	_ [0]*extendsMeshTexture
	class
}

func (self MeshTexture) Texture2D() Texture2D {
	var parent Texture2D
	parent.class = self.class
	return parent
}
func (self MeshTexture) SetMesh(mesh Mesh) {
	self.Runtime.MeshTexture_set_mesh(self, mesh)
}
func (self MeshTexture) GetMesh() Mesh {
	return self.Runtime.MeshTexture_get_mesh(self)
}
func (self MeshTexture) SetImageSize(size Vector2) {
	self.Runtime.MeshTexture_set_image_size(self, size)
}
func (self MeshTexture) GetImageSize() Vector2 {
	return self.Runtime.MeshTexture_get_image_size(self)
}
func (self MeshTexture) SetBaseTexture(texture Texture2D) {
	self.Runtime.MeshTexture_set_base_texture(self, texture)
}
func (self MeshTexture) GetBaseTexture() Texture2D {
	return self.Runtime.MeshTexture_get_base_texture(self)
}

type extendsMethodTweener struct {
	_ [0]*extendsMethodTweener
	class
}

func (self MethodTweener) Tweener() Tweener {
	var parent Tweener
	parent.class = self.class
	return parent
}
func (self MethodTweener) SetDelay(delay Float) MethodTweener {
	return self.Runtime.MethodTweener_set_delay(self, delay)
}
func (self MethodTweener) SetTrans(trans TweenTransitionType) MethodTweener {
	return self.Runtime.MethodTweener_set_trans(self, trans)
}
func (self MethodTweener) SetEase(ease TweenEaseType) MethodTweener {
	return self.Runtime.MethodTweener_set_ease(self, ease)
}

type extendsMissingNode struct {
	_ [0]*extendsMissingNode
	class
}

func (self MissingNode) Node() Node { var parent Node; parent.class = self.class; return parent }
func (self MissingNode) SetOriginalClass(name string) {
	self.Runtime.MissingNode_set_original_class(self, name)
}
func (self MissingNode) GetOriginalClass() string {
	return self.Runtime.MissingNode_get_original_class(self)
}
func (self MissingNode) SetRecordingProperties(enable bool) {
	self.Runtime.MissingNode_set_recording_properties(self, enable)
}
func (self MissingNode) IsRecordingProperties() bool {
	return self.Runtime.MissingNode_is_recording_properties(self)
}

type extendsMissingResource struct {
	_ [0]*extendsMissingResource
	class
}

func (self MissingResource) Resource() Resource {
	var parent Resource
	parent.class = self.class
	return parent
}
func (self MissingResource) SetOriginalClass(name string) {
	self.Runtime.MissingResource_set_original_class(self, name)
}
func (self MissingResource) GetOriginalClass() string {
	return self.Runtime.MissingResource_get_original_class(self)
}
func (self MissingResource) SetRecordingProperties(enable bool) {
	self.Runtime.MissingResource_set_recording_properties(self, enable)
}
func (self MissingResource) IsRecordingProperties() bool {
	return self.Runtime.MissingResource_is_recording_properties(self)
}

type extendsMobileVRInterface struct {
	_ [0]*extendsMobileVRInterface
	class
}

func (self MobileVRInterface) XRInterface() XRInterface {
	var parent XRInterface
	parent.class = self.class
	return parent
}
func (self MobileVRInterface) SetEyeHeight(eye_height Float) {
	self.Runtime.MobileVRInterface_set_eye_height(self, eye_height)
}
func (self MobileVRInterface) GetEyeHeight() Float {
	return self.Runtime.MobileVRInterface_get_eye_height(self)
}
func (self MobileVRInterface) SetIod(iod Float) {
	self.Runtime.MobileVRInterface_set_iod(self, iod)
}
func (self MobileVRInterface) GetIod() Float {
	return self.Runtime.MobileVRInterface_get_iod(self)
}
func (self MobileVRInterface) SetDisplayWidth(display_width Float) {
	self.Runtime.MobileVRInterface_set_display_width(self, display_width)
}
func (self MobileVRInterface) GetDisplayWidth() Float {
	return self.Runtime.MobileVRInterface_get_display_width(self)
}
func (self MobileVRInterface) SetDisplayToLens(display_to_lens Float) {
	self.Runtime.MobileVRInterface_set_display_to_lens(self, display_to_lens)
}
func (self MobileVRInterface) GetDisplayToLens() Float {
	return self.Runtime.MobileVRInterface_get_display_to_lens(self)
}
func (self MobileVRInterface) SetOversample(oversample Float) {
	self.Runtime.MobileVRInterface_set_oversample(self, oversample)
}
func (self MobileVRInterface) GetOversample() Float {
	return self.Runtime.MobileVRInterface_get_oversample(self)
}
func (self MobileVRInterface) SetK1(k Float) {
	self.Runtime.MobileVRInterface_set_k1(self, k)
}
func (self MobileVRInterface) GetK1() Float {
	return self.Runtime.MobileVRInterface_get_k1(self)
}
func (self MobileVRInterface) SetK2(k Float) {
	self.Runtime.MobileVRInterface_set_k2(self, k)
}
func (self MobileVRInterface) GetK2() Float {
	return self.Runtime.MobileVRInterface_get_k2(self)
}

type extendsMovieWriter struct {
	_ [0]*extendsMovieWriter
	class
}

func (self MovieWriter) Object() Object { var parent Object; parent.class = self.class; return parent }
func (self MovieWriter) AddWriter(writer MovieWriter) {
	self.Runtime.MovieWriter_add_writer(self, writer)
}

type extendsMultiMesh struct {
	_ [0]*extendsMultiMesh
	class
}

func (self MultiMesh) Resource() Resource {
	var parent Resource
	parent.class = self.class
	return parent
}
func (self MultiMesh) SetMesh(mesh Mesh) {
	self.Runtime.MultiMesh_set_mesh(self, mesh)
}
func (self MultiMesh) GetMesh() Mesh {
	return self.Runtime.MultiMesh_get_mesh(self)
}
func (self MultiMesh) SetUseColors(enable bool) {
	self.Runtime.MultiMesh_set_use_colors(self, enable)
}
func (self MultiMesh) IsUsingColors() bool {
	return self.Runtime.MultiMesh_is_using_colors(self)
}
func (self MultiMesh) SetUseCustomData(enable bool) {
	self.Runtime.MultiMesh_set_use_custom_data(self, enable)
}
func (self MultiMesh) IsUsingCustomData() bool {
	return self.Runtime.MultiMesh_is_using_custom_data(self)
}
func (self MultiMesh) SetTransformFormat(format MultiMeshTransformFormat) {
	self.Runtime.MultiMesh_set_transform_format(self, format)
}
func (self MultiMesh) GetTransformFormat() MultiMeshTransformFormat {
	return self.Runtime.MultiMesh_get_transform_format(self)
}
func (self MultiMesh) SetInstanceCount(count int64) {
	self.Runtime.MultiMesh_set_instance_count(self, count)
}
func (self MultiMesh) GetInstanceCount() int64 {
	return self.Runtime.MultiMesh_get_instance_count(self)
}
func (self MultiMesh) SetVisibleInstanceCount(count int64) {
	self.Runtime.MultiMesh_set_visible_instance_count(self, count)
}
func (self MultiMesh) GetVisibleInstanceCount() int64 {
	return self.Runtime.MultiMesh_get_visible_instance_count(self)
}
func (self MultiMesh) SetInstanceTransform(instance int64, transform Transform3D) {
	self.Runtime.MultiMesh_set_instance_transform(self, instance, transform)
}
func (self MultiMesh) SetInstanceTransform2d(instance int64, transform Transform2D) {
	self.Runtime.MultiMesh_set_instance_transform_2d(self, instance, transform)
}
func (self MultiMesh) GetInstanceTransform(instance int64) Transform3D {
	return self.Runtime.MultiMesh_get_instance_transform(self, instance)
}
func (self MultiMesh) GetInstanceTransform2d(instance int64) Transform2D {
	return self.Runtime.MultiMesh_get_instance_transform_2d(self, instance)
}
func (self MultiMesh) SetInstanceColor(instance int64, color Color) {
	self.Runtime.MultiMesh_set_instance_color(self, instance, color)
}
func (self MultiMesh) GetInstanceColor(instance int64) Color {
	return self.Runtime.MultiMesh_get_instance_color(self, instance)
}
func (self MultiMesh) SetInstanceCustomData(instance int64, custom_data Color) {
	self.Runtime.MultiMesh_set_instance_custom_data(self, instance, custom_data)
}
func (self MultiMesh) GetInstanceCustomData(instance int64) Color {
	return self.Runtime.MultiMesh_get_instance_custom_data(self, instance)
}
func (self MultiMesh) GetAabb() AABB {
	return self.Runtime.MultiMesh_get_aabb(self)
}
func (self MultiMesh) GetBuffer() PackedFloat32Array {
	return self.Runtime.MultiMesh_get_buffer(self)
}
func (self MultiMesh) SetBuffer(buffer PackedFloat32Array) {
	self.Runtime.MultiMesh_set_buffer(self, buffer)
}

type extendsMultiMeshInstance2D struct {
	_ [0]*extendsMultiMeshInstance2D
	class
}

func (self MultiMeshInstance2D) Node2D() Node2D {
	var parent Node2D
	parent.class = self.class
	return parent
}
func (self MultiMeshInstance2D) SetMultimesh(multimesh MultiMesh) {
	self.Runtime.MultiMeshInstance2D_set_multimesh(self, multimesh)
}
func (self MultiMeshInstance2D) GetMultimesh() MultiMesh {
	return self.Runtime.MultiMeshInstance2D_get_multimesh(self)
}
func (self MultiMeshInstance2D) SetTexture(texture Texture2D) {
	self.Runtime.MultiMeshInstance2D_set_texture(self, texture)
}
func (self MultiMeshInstance2D) GetTexture() Texture2D {
	return self.Runtime.MultiMeshInstance2D_get_texture(self)
}

type extendsMultiMeshInstance3D struct {
	_ [0]*extendsMultiMeshInstance3D
	class
}

func (self MultiMeshInstance3D) GeometryInstance3D() GeometryInstance3D {
	var parent GeometryInstance3D
	parent.class = self.class
	return parent
}
func (self MultiMeshInstance3D) SetMultimesh(multimesh MultiMesh) {
	self.Runtime.MultiMeshInstance3D_set_multimesh(self, multimesh)
}
func (self MultiMeshInstance3D) GetMultimesh() MultiMesh {
	return self.Runtime.MultiMeshInstance3D_get_multimesh(self)
}

type extendsMultiplayerAPI struct {
	_ [0]*extendsMultiplayerAPI
	class
}

func (self MultiplayerAPI) RefCounted() RefCounted {
	var parent RefCounted
	parent.class = self.class
	return parent
}
func (self MultiplayerAPI) HasMultiplayerPeer() bool {
	return self.Runtime.MultiplayerAPI_has_multiplayer_peer(self)
}
func (self MultiplayerAPI) GetMultiplayerPeer() MultiplayerPeer {
	return self.Runtime.MultiplayerAPI_get_multiplayer_peer(self)
}
func (self MultiplayerAPI) SetMultiplayerPeer(peer MultiplayerPeer) {
	self.Runtime.MultiplayerAPI_set_multiplayer_peer(self, peer)
}
func (self MultiplayerAPI) GetUniqueId() int64 {
	return self.Runtime.MultiplayerAPI_get_unique_id(self)
}
func (self MultiplayerAPI) IsServer() bool {
	return self.Runtime.MultiplayerAPI_is_server(self)
}
func (self MultiplayerAPI) GetRemoteSenderId() int64 {
	return self.Runtime.MultiplayerAPI_get_remote_sender_id(self)
}
func (self MultiplayerAPI) Poll() int64 {
	return self.Runtime.MultiplayerAPI_poll(self)
}
func (self MultiplayerAPI) Rpc(peer int64, object Object, method string, arguments Array) int64 {
	return self.Runtime.MultiplayerAPI_rpc(self, peer, object, method, arguments)
}
func (self MultiplayerAPI) ObjectConfigurationAdd(object Object, configuration any) int64 {
	return self.Runtime.MultiplayerAPI_object_configuration_add(self, object, configuration)
}
func (self MultiplayerAPI) ObjectConfigurationRemove(object Object, configuration any) int64 {
	return self.Runtime.MultiplayerAPI_object_configuration_remove(self, object, configuration)
}
func (self MultiplayerAPI) GetPeers() PackedInt32Array {
	return self.Runtime.MultiplayerAPI_get_peers(self)
}
func (self MultiplayerAPI) SetDefaultInterface(interface_name string) {
	self.Runtime.MultiplayerAPI_set_default_interface(self, interface_name)
}
func (self MultiplayerAPI) GetDefaultInterface() string {
	return self.Runtime.MultiplayerAPI_get_default_interface(self)
}
func (self MultiplayerAPI) CreateDefaultInterface() MultiplayerAPI {
	return self.Runtime.MultiplayerAPI_create_default_interface(self)
}

type extendsMultiplayerAPIExtension struct {
	_ [0]*extendsMultiplayerAPIExtension
	class
}

func (self MultiplayerAPIExtension) MultiplayerAPI() MultiplayerAPI {
	var parent MultiplayerAPI
	parent.class = self.class
	return parent
}

type extendsMultiplayerPeer struct {
	_ [0]*extendsMultiplayerPeer
	class
}

func (self MultiplayerPeer) PacketPeer() PacketPeer {
	var parent PacketPeer
	parent.class = self.class
	return parent
}
func (self MultiplayerPeer) SetTransferChannel(channel int64) {
	self.Runtime.MultiplayerPeer_set_transfer_channel(self, channel)
}
func (self MultiplayerPeer) GetTransferChannel() int64 {
	return self.Runtime.MultiplayerPeer_get_transfer_channel(self)
}
func (self MultiplayerPeer) SetTransferMode(mode MultiplayerPeerTransferMode) {
	self.Runtime.MultiplayerPeer_set_transfer_mode(self, mode)
}
func (self MultiplayerPeer) GetTransferMode() MultiplayerPeerTransferMode {
	return self.Runtime.MultiplayerPeer_get_transfer_mode(self)
}
func (self MultiplayerPeer) SetTargetPeer(id int64) {
	self.Runtime.MultiplayerPeer_set_target_peer(self, id)
}
func (self MultiplayerPeer) GetPacketPeer() int64 {
	return self.Runtime.MultiplayerPeer_get_packet_peer(self)
}
func (self MultiplayerPeer) GetPacketChannel() int64 {
	return self.Runtime.MultiplayerPeer_get_packet_channel(self)
}
func (self MultiplayerPeer) GetPacketMode() MultiplayerPeerTransferMode {
	return self.Runtime.MultiplayerPeer_get_packet_mode(self)
}
func (self MultiplayerPeer) Poll() {
	self.Runtime.MultiplayerPeer_poll(self)
}
func (self MultiplayerPeer) Close() {
	self.Runtime.MultiplayerPeer_close(self)
}
func (self MultiplayerPeer) DisconnectPeer(peer int64, force bool) {
	self.Runtime.MultiplayerPeer_disconnect_peer(self, peer, force)
}
func (self MultiplayerPeer) GetConnectionStatus() MultiplayerPeerConnectionStatus {
	return self.Runtime.MultiplayerPeer_get_connection_status(self)
}
func (self MultiplayerPeer) GetUniqueId() int64 {
	return self.Runtime.MultiplayerPeer_get_unique_id(self)
}
func (self MultiplayerPeer) GenerateUniqueId() int64 {
	return self.Runtime.MultiplayerPeer_generate_unique_id(self)
}
func (self MultiplayerPeer) SetRefuseNewConnections(enable bool) {
	self.Runtime.MultiplayerPeer_set_refuse_new_connections(self, enable)
}
func (self MultiplayerPeer) IsRefusingNewConnections() bool {
	return self.Runtime.MultiplayerPeer_is_refusing_new_connections(self)
}
func (self MultiplayerPeer) IsServerRelaySupported() bool {
	return self.Runtime.MultiplayerPeer_is_server_relay_supported(self)
}

type extendsMultiplayerPeerExtension struct {
	_ [0]*extendsMultiplayerPeerExtension
	class
}

func (self MultiplayerPeerExtension) MultiplayerPeer() MultiplayerPeer {
	var parent MultiplayerPeer
	parent.class = self.class
	return parent
}

type extendsMultiplayerSpawner struct {
	_ [0]*extendsMultiplayerSpawner
	class
}

func (self MultiplayerSpawner) Node() Node { var parent Node; parent.class = self.class; return parent }
func (self MultiplayerSpawner) AddSpawnableScene(path string) {
	self.Runtime.MultiplayerSpawner_add_spawnable_scene(self, path)
}
func (self MultiplayerSpawner) GetSpawnableSceneCount() int64 {
	return self.Runtime.MultiplayerSpawner_get_spawnable_scene_count(self)
}
func (self MultiplayerSpawner) GetSpawnableScene(index int64) string {
	return self.Runtime.MultiplayerSpawner_get_spawnable_scene(self, index)
}
func (self MultiplayerSpawner) ClearSpawnableScenes() {
	self.Runtime.MultiplayerSpawner_clear_spawnable_scenes(self)
}
func (self MultiplayerSpawner) Spawn(data any) Node {
	return self.Runtime.MultiplayerSpawner_spawn(self, data)
}
func (self MultiplayerSpawner) GetSpawnPath() NodePath {
	return self.Runtime.MultiplayerSpawner_get_spawn_path(self)
}
func (self MultiplayerSpawner) SetSpawnPath(path NodePath) {
	self.Runtime.MultiplayerSpawner_set_spawn_path(self, path)
}
func (self MultiplayerSpawner) GetSpawnLimit() int64 {
	return self.Runtime.MultiplayerSpawner_get_spawn_limit(self)
}
func (self MultiplayerSpawner) SetSpawnLimit(limit int64) {
	self.Runtime.MultiplayerSpawner_set_spawn_limit(self, limit)
}
func (self MultiplayerSpawner) GetSpawnFunction() Callable {
	return self.Runtime.MultiplayerSpawner_get_spawn_function(self)
}
func (self MultiplayerSpawner) SetSpawnFunction(spawn_function Callable) {
	self.Runtime.MultiplayerSpawner_set_spawn_function(self, spawn_function)
}

type extendsMultiplayerSynchronizer struct {
	_ [0]*extendsMultiplayerSynchronizer
	class
}

func (self MultiplayerSynchronizer) Node() Node {
	var parent Node
	parent.class = self.class
	return parent
}
func (self MultiplayerSynchronizer) SetRootPath(path NodePath) {
	self.Runtime.MultiplayerSynchronizer_set_root_path(self, path)
}
func (self MultiplayerSynchronizer) GetRootPath() NodePath {
	return self.Runtime.MultiplayerSynchronizer_get_root_path(self)
}
func (self MultiplayerSynchronizer) SetReplicationInterval(milliseconds Float) {
	self.Runtime.MultiplayerSynchronizer_set_replication_interval(self, milliseconds)
}
func (self MultiplayerSynchronizer) GetReplicationInterval() Float {
	return self.Runtime.MultiplayerSynchronizer_get_replication_interval(self)
}
func (self MultiplayerSynchronizer) SetDeltaInterval(milliseconds Float) {
	self.Runtime.MultiplayerSynchronizer_set_delta_interval(self, milliseconds)
}
func (self MultiplayerSynchronizer) GetDeltaInterval() Float {
	return self.Runtime.MultiplayerSynchronizer_get_delta_interval(self)
}
func (self MultiplayerSynchronizer) SetReplicationConfig(config SceneReplicationConfig) {
	self.Runtime.MultiplayerSynchronizer_set_replication_config(self, config)
}
func (self MultiplayerSynchronizer) GetReplicationConfig() SceneReplicationConfig {
	return self.Runtime.MultiplayerSynchronizer_get_replication_config(self)
}
func (self MultiplayerSynchronizer) SetVisibilityUpdateMode(mode MultiplayerSynchronizerVisibilityUpdateMode) {
	self.Runtime.MultiplayerSynchronizer_set_visibility_update_mode(self, mode)
}
func (self MultiplayerSynchronizer) GetVisibilityUpdateMode() MultiplayerSynchronizerVisibilityUpdateMode {
	return self.Runtime.MultiplayerSynchronizer_get_visibility_update_mode(self)
}
func (self MultiplayerSynchronizer) UpdateVisibility(for_peer int64) {
	self.Runtime.MultiplayerSynchronizer_update_visibility(self, for_peer)
}
func (self MultiplayerSynchronizer) SetVisibilityPublic(visible bool) {
	self.Runtime.MultiplayerSynchronizer_set_visibility_public(self, visible)
}
func (self MultiplayerSynchronizer) IsVisibilityPublic() bool {
	return self.Runtime.MultiplayerSynchronizer_is_visibility_public(self)
}
func (self MultiplayerSynchronizer) AddVisibilityFilter(filter Callable) {
	self.Runtime.MultiplayerSynchronizer_add_visibility_filter(self, filter)
}
func (self MultiplayerSynchronizer) RemoveVisibilityFilter(filter Callable) {
	self.Runtime.MultiplayerSynchronizer_remove_visibility_filter(self, filter)
}
func (self MultiplayerSynchronizer) SetVisibilityFor(peer int64, visible bool) {
	self.Runtime.MultiplayerSynchronizer_set_visibility_for(self, peer, visible)
}
func (self MultiplayerSynchronizer) GetVisibilityFor(peer int64) bool {
	return self.Runtime.MultiplayerSynchronizer_get_visibility_for(self, peer)
}

type extendsMutex struct {
	_ [0]*extendsMutex
	class
}

func (self Mutex) RefCounted() RefCounted {
	var parent RefCounted
	parent.class = self.class
	return parent
}
func (self Mutex) Lock() {
	self.Runtime.Mutex_lock(self)
}
func (self Mutex) TryLock() bool {
	return self.Runtime.Mutex_try_lock(self)
}
func (self Mutex) Unlock() {
	self.Runtime.Mutex_unlock(self)
}

type extendsNavigationAgent2D struct {
	_ [0]*extendsNavigationAgent2D
	class
}

func (self NavigationAgent2D) Node() Node { var parent Node; parent.class = self.class; return parent }
func (self NavigationAgent2D) GetRid() RID {
	return self.Runtime.NavigationAgent2D_get_rid(self)
}
func (self NavigationAgent2D) SetAvoidanceEnabled(enabled bool) {
	self.Runtime.NavigationAgent2D_set_avoidance_enabled(self, enabled)
}
func (self NavigationAgent2D) GetAvoidanceEnabled() bool {
	return self.Runtime.NavigationAgent2D_get_avoidance_enabled(self)
}
func (self NavigationAgent2D) SetPathDesiredDistance(desired_distance Float) {
	self.Runtime.NavigationAgent2D_set_path_desired_distance(self, desired_distance)
}
func (self NavigationAgent2D) GetPathDesiredDistance() Float {
	return self.Runtime.NavigationAgent2D_get_path_desired_distance(self)
}
func (self NavigationAgent2D) SetTargetDesiredDistance(desired_distance Float) {
	self.Runtime.NavigationAgent2D_set_target_desired_distance(self, desired_distance)
}
func (self NavigationAgent2D) GetTargetDesiredDistance() Float {
	return self.Runtime.NavigationAgent2D_get_target_desired_distance(self)
}
func (self NavigationAgent2D) SetRadius(radius Float) {
	self.Runtime.NavigationAgent2D_set_radius(self, radius)
}
func (self NavigationAgent2D) GetRadius() Float {
	return self.Runtime.NavigationAgent2D_get_radius(self)
}
func (self NavigationAgent2D) SetNeighborDistance(neighbor_distance Float) {
	self.Runtime.NavigationAgent2D_set_neighbor_distance(self, neighbor_distance)
}
func (self NavigationAgent2D) GetNeighborDistance() Float {
	return self.Runtime.NavigationAgent2D_get_neighbor_distance(self)
}
func (self NavigationAgent2D) SetMaxNeighbors(max_neighbors int64) {
	self.Runtime.NavigationAgent2D_set_max_neighbors(self, max_neighbors)
}
func (self NavigationAgent2D) GetMaxNeighbors() int64 {
	return self.Runtime.NavigationAgent2D_get_max_neighbors(self)
}
func (self NavigationAgent2D) SetTimeHorizonAgents(time_horizon Float) {
	self.Runtime.NavigationAgent2D_set_time_horizon_agents(self, time_horizon)
}
func (self NavigationAgent2D) GetTimeHorizonAgents() Float {
	return self.Runtime.NavigationAgent2D_get_time_horizon_agents(self)
}
func (self NavigationAgent2D) SetTimeHorizonObstacles(time_horizon Float) {
	self.Runtime.NavigationAgent2D_set_time_horizon_obstacles(self, time_horizon)
}
func (self NavigationAgent2D) GetTimeHorizonObstacles() Float {
	return self.Runtime.NavigationAgent2D_get_time_horizon_obstacles(self)
}
func (self NavigationAgent2D) SetMaxSpeed(max_speed Float) {
	self.Runtime.NavigationAgent2D_set_max_speed(self, max_speed)
}
func (self NavigationAgent2D) GetMaxSpeed() Float {
	return self.Runtime.NavigationAgent2D_get_max_speed(self)
}
func (self NavigationAgent2D) SetPathMaxDistance(max_speed Float) {
	self.Runtime.NavigationAgent2D_set_path_max_distance(self, max_speed)
}
func (self NavigationAgent2D) GetPathMaxDistance() Float {
	return self.Runtime.NavigationAgent2D_get_path_max_distance(self)
}
func (self NavigationAgent2D) SetNavigationLayers(navigation_layers int64) {
	self.Runtime.NavigationAgent2D_set_navigation_layers(self, navigation_layers)
}
func (self NavigationAgent2D) GetNavigationLayers() int64 {
	return self.Runtime.NavigationAgent2D_get_navigation_layers(self)
}
func (self NavigationAgent2D) SetNavigationLayerValue(layer_number int64, value bool) {
	self.Runtime.NavigationAgent2D_set_navigation_layer_value(self, layer_number, value)
}
func (self NavigationAgent2D) GetNavigationLayerValue(layer_number int64) bool {
	return self.Runtime.NavigationAgent2D_get_navigation_layer_value(self, layer_number)
}
func (self NavigationAgent2D) SetPathfindingAlgorithm(pathfinding_algorithm NavigationPathQueryParameters2DPathfindingAlgorithm) {
	self.Runtime.NavigationAgent2D_set_pathfinding_algorithm(self, pathfinding_algorithm)
}
func (self NavigationAgent2D) GetPathfindingAlgorithm() NavigationPathQueryParameters2DPathfindingAlgorithm {
	return self.Runtime.NavigationAgent2D_get_pathfinding_algorithm(self)
}
func (self NavigationAgent2D) SetPathPostprocessing(path_postprocessing NavigationPathQueryParameters2DPathPostProcessing) {
	self.Runtime.NavigationAgent2D_set_path_postprocessing(self, path_postprocessing)
}
func (self NavigationAgent2D) GetPathPostprocessing() NavigationPathQueryParameters2DPathPostProcessing {
	return self.Runtime.NavigationAgent2D_get_path_postprocessing(self)
}
func (self NavigationAgent2D) SetPathMetadataFlags(flags NavigationPathQueryParameters2DPathMetadataFlags) {
	self.Runtime.NavigationAgent2D_set_path_metadata_flags(self, flags)
}
func (self NavigationAgent2D) GetPathMetadataFlags() NavigationPathQueryParameters2DPathMetadataFlags {
	return self.Runtime.NavigationAgent2D_get_path_metadata_flags(self)
}
func (self NavigationAgent2D) SetNavigationMap(navigation_map RID) {
	self.Runtime.NavigationAgent2D_set_navigation_map(self, navigation_map)
}
func (self NavigationAgent2D) GetNavigationMap() RID {
	return self.Runtime.NavigationAgent2D_get_navigation_map(self)
}
func (self NavigationAgent2D) SetTargetPosition(position Vector2) {
	self.Runtime.NavigationAgent2D_set_target_position(self, position)
}
func (self NavigationAgent2D) GetTargetPosition() Vector2 {
	return self.Runtime.NavigationAgent2D_get_target_position(self)
}
func (self NavigationAgent2D) GetNextPathPosition() Vector2 {
	return self.Runtime.NavigationAgent2D_get_next_path_position(self)
}
func (self NavigationAgent2D) SetVelocityForced(velocity Vector2) {
	self.Runtime.NavigationAgent2D_set_velocity_forced(self, velocity)
}
func (self NavigationAgent2D) SetVelocity(velocity Vector2) {
	self.Runtime.NavigationAgent2D_set_velocity(self, velocity)
}
func (self NavigationAgent2D) GetVelocity() Vector2 {
	return self.Runtime.NavigationAgent2D_get_velocity(self)
}
func (self NavigationAgent2D) DistanceToTarget() Float {
	return self.Runtime.NavigationAgent2D_distance_to_target(self)
}
func (self NavigationAgent2D) GetCurrentNavigationResult() NavigationPathQueryResult2D {
	return self.Runtime.NavigationAgent2D_get_current_navigation_result(self)
}
func (self NavigationAgent2D) GetCurrentNavigationPath() PackedVector2Array {
	return self.Runtime.NavigationAgent2D_get_current_navigation_path(self)
}
func (self NavigationAgent2D) GetCurrentNavigationPathIndex() int64 {
	return self.Runtime.NavigationAgent2D_get_current_navigation_path_index(self)
}
func (self NavigationAgent2D) IsTargetReached() bool {
	return self.Runtime.NavigationAgent2D_is_target_reached(self)
}
func (self NavigationAgent2D) IsTargetReachable() bool {
	return self.Runtime.NavigationAgent2D_is_target_reachable(self)
}
func (self NavigationAgent2D) IsNavigationFinished() bool {
	return self.Runtime.NavigationAgent2D_is_navigation_finished(self)
}
func (self NavigationAgent2D) GetFinalPosition() Vector2 {
	return self.Runtime.NavigationAgent2D_get_final_position(self)
}
func (self NavigationAgent2D) SetAvoidanceLayers(layers int64) {
	self.Runtime.NavigationAgent2D_set_avoidance_layers(self, layers)
}
func (self NavigationAgent2D) GetAvoidanceLayers() int64 {
	return self.Runtime.NavigationAgent2D_get_avoidance_layers(self)
}
func (self NavigationAgent2D) SetAvoidanceMask(mask int64) {
	self.Runtime.NavigationAgent2D_set_avoidance_mask(self, mask)
}
func (self NavigationAgent2D) GetAvoidanceMask() int64 {
	return self.Runtime.NavigationAgent2D_get_avoidance_mask(self)
}
func (self NavigationAgent2D) SetAvoidanceLayerValue(layer_number int64, value bool) {
	self.Runtime.NavigationAgent2D_set_avoidance_layer_value(self, layer_number, value)
}
func (self NavigationAgent2D) GetAvoidanceLayerValue(layer_number int64) bool {
	return self.Runtime.NavigationAgent2D_get_avoidance_layer_value(self, layer_number)
}
func (self NavigationAgent2D) SetAvoidanceMaskValue(mask_number int64, value bool) {
	self.Runtime.NavigationAgent2D_set_avoidance_mask_value(self, mask_number, value)
}
func (self NavigationAgent2D) GetAvoidanceMaskValue(mask_number int64) bool {
	return self.Runtime.NavigationAgent2D_get_avoidance_mask_value(self, mask_number)
}
func (self NavigationAgent2D) SetAvoidancePriority(priority Float) {
	self.Runtime.NavigationAgent2D_set_avoidance_priority(self, priority)
}
func (self NavigationAgent2D) GetAvoidancePriority() Float {
	return self.Runtime.NavigationAgent2D_get_avoidance_priority(self)
}
func (self NavigationAgent2D) SetDebugEnabled(enabled bool) {
	self.Runtime.NavigationAgent2D_set_debug_enabled(self, enabled)
}
func (self NavigationAgent2D) GetDebugEnabled() bool {
	return self.Runtime.NavigationAgent2D_get_debug_enabled(self)
}
func (self NavigationAgent2D) SetDebugUseCustom(enabled bool) {
	self.Runtime.NavigationAgent2D_set_debug_use_custom(self, enabled)
}
func (self NavigationAgent2D) GetDebugUseCustom() bool {
	return self.Runtime.NavigationAgent2D_get_debug_use_custom(self)
}
func (self NavigationAgent2D) SetDebugPathCustomColor(color Color) {
	self.Runtime.NavigationAgent2D_set_debug_path_custom_color(self, color)
}
func (self NavigationAgent2D) GetDebugPathCustomColor() Color {
	return self.Runtime.NavigationAgent2D_get_debug_path_custom_color(self)
}
func (self NavigationAgent2D) SetDebugPathCustomPointSize(point_size Float) {
	self.Runtime.NavigationAgent2D_set_debug_path_custom_point_size(self, point_size)
}
func (self NavigationAgent2D) GetDebugPathCustomPointSize() Float {
	return self.Runtime.NavigationAgent2D_get_debug_path_custom_point_size(self)
}
func (self NavigationAgent2D) SetDebugPathCustomLineWidth(line_width Float) {
	self.Runtime.NavigationAgent2D_set_debug_path_custom_line_width(self, line_width)
}
func (self NavigationAgent2D) GetDebugPathCustomLineWidth() Float {
	return self.Runtime.NavigationAgent2D_get_debug_path_custom_line_width(self)
}

type extendsNavigationAgent3D struct {
	_ [0]*extendsNavigationAgent3D
	class
}

func (self NavigationAgent3D) Node() Node { var parent Node; parent.class = self.class; return parent }
func (self NavigationAgent3D) GetRid() RID {
	return self.Runtime.NavigationAgent3D_get_rid(self)
}
func (self NavigationAgent3D) SetAvoidanceEnabled(enabled bool) {
	self.Runtime.NavigationAgent3D_set_avoidance_enabled(self, enabled)
}
func (self NavigationAgent3D) GetAvoidanceEnabled() bool {
	return self.Runtime.NavigationAgent3D_get_avoidance_enabled(self)
}
func (self NavigationAgent3D) SetPathDesiredDistance(desired_distance Float) {
	self.Runtime.NavigationAgent3D_set_path_desired_distance(self, desired_distance)
}
func (self NavigationAgent3D) GetPathDesiredDistance() Float {
	return self.Runtime.NavigationAgent3D_get_path_desired_distance(self)
}
func (self NavigationAgent3D) SetTargetDesiredDistance(desired_distance Float) {
	self.Runtime.NavigationAgent3D_set_target_desired_distance(self, desired_distance)
}
func (self NavigationAgent3D) GetTargetDesiredDistance() Float {
	return self.Runtime.NavigationAgent3D_get_target_desired_distance(self)
}
func (self NavigationAgent3D) SetRadius(radius Float) {
	self.Runtime.NavigationAgent3D_set_radius(self, radius)
}
func (self NavigationAgent3D) GetRadius() Float {
	return self.Runtime.NavigationAgent3D_get_radius(self)
}
func (self NavigationAgent3D) SetHeight(height Float) {
	self.Runtime.NavigationAgent3D_set_height(self, height)
}
func (self NavigationAgent3D) GetHeight() Float {
	return self.Runtime.NavigationAgent3D_get_height(self)
}
func (self NavigationAgent3D) SetPathHeightOffset(path_height_offset Float) {
	self.Runtime.NavigationAgent3D_set_path_height_offset(self, path_height_offset)
}
func (self NavigationAgent3D) GetPathHeightOffset() Float {
	return self.Runtime.NavigationAgent3D_get_path_height_offset(self)
}
func (self NavigationAgent3D) SetUse3dAvoidance(enabled bool) {
	self.Runtime.NavigationAgent3D_set_use_3d_avoidance(self, enabled)
}
func (self NavigationAgent3D) GetUse3dAvoidance() bool {
	return self.Runtime.NavigationAgent3D_get_use_3d_avoidance(self)
}
func (self NavigationAgent3D) SetKeepYVelocity(enabled bool) {
	self.Runtime.NavigationAgent3D_set_keep_y_velocity(self, enabled)
}
func (self NavigationAgent3D) GetKeepYVelocity() bool {
	return self.Runtime.NavigationAgent3D_get_keep_y_velocity(self)
}
func (self NavigationAgent3D) SetNeighborDistance(neighbor_distance Float) {
	self.Runtime.NavigationAgent3D_set_neighbor_distance(self, neighbor_distance)
}
func (self NavigationAgent3D) GetNeighborDistance() Float {
	return self.Runtime.NavigationAgent3D_get_neighbor_distance(self)
}
func (self NavigationAgent3D) SetMaxNeighbors(max_neighbors int64) {
	self.Runtime.NavigationAgent3D_set_max_neighbors(self, max_neighbors)
}
func (self NavigationAgent3D) GetMaxNeighbors() int64 {
	return self.Runtime.NavigationAgent3D_get_max_neighbors(self)
}
func (self NavigationAgent3D) SetTimeHorizonAgents(time_horizon Float) {
	self.Runtime.NavigationAgent3D_set_time_horizon_agents(self, time_horizon)
}
func (self NavigationAgent3D) GetTimeHorizonAgents() Float {
	return self.Runtime.NavigationAgent3D_get_time_horizon_agents(self)
}
func (self NavigationAgent3D) SetTimeHorizonObstacles(time_horizon Float) {
	self.Runtime.NavigationAgent3D_set_time_horizon_obstacles(self, time_horizon)
}
func (self NavigationAgent3D) GetTimeHorizonObstacles() Float {
	return self.Runtime.NavigationAgent3D_get_time_horizon_obstacles(self)
}
func (self NavigationAgent3D) SetMaxSpeed(max_speed Float) {
	self.Runtime.NavigationAgent3D_set_max_speed(self, max_speed)
}
func (self NavigationAgent3D) GetMaxSpeed() Float {
	return self.Runtime.NavigationAgent3D_get_max_speed(self)
}
func (self NavigationAgent3D) SetPathMaxDistance(max_speed Float) {
	self.Runtime.NavigationAgent3D_set_path_max_distance(self, max_speed)
}
func (self NavigationAgent3D) GetPathMaxDistance() Float {
	return self.Runtime.NavigationAgent3D_get_path_max_distance(self)
}
func (self NavigationAgent3D) SetNavigationLayers(navigation_layers int64) {
	self.Runtime.NavigationAgent3D_set_navigation_layers(self, navigation_layers)
}
func (self NavigationAgent3D) GetNavigationLayers() int64 {
	return self.Runtime.NavigationAgent3D_get_navigation_layers(self)
}
func (self NavigationAgent3D) SetNavigationLayerValue(layer_number int64, value bool) {
	self.Runtime.NavigationAgent3D_set_navigation_layer_value(self, layer_number, value)
}
func (self NavigationAgent3D) GetNavigationLayerValue(layer_number int64) bool {
	return self.Runtime.NavigationAgent3D_get_navigation_layer_value(self, layer_number)
}
func (self NavigationAgent3D) SetPathfindingAlgorithm(pathfinding_algorithm NavigationPathQueryParameters3DPathfindingAlgorithm) {
	self.Runtime.NavigationAgent3D_set_pathfinding_algorithm(self, pathfinding_algorithm)
}
func (self NavigationAgent3D) GetPathfindingAlgorithm() NavigationPathQueryParameters3DPathfindingAlgorithm {
	return self.Runtime.NavigationAgent3D_get_pathfinding_algorithm(self)
}
func (self NavigationAgent3D) SetPathPostprocessing(path_postprocessing NavigationPathQueryParameters3DPathPostProcessing) {
	self.Runtime.NavigationAgent3D_set_path_postprocessing(self, path_postprocessing)
}
func (self NavigationAgent3D) GetPathPostprocessing() NavigationPathQueryParameters3DPathPostProcessing {
	return self.Runtime.NavigationAgent3D_get_path_postprocessing(self)
}
func (self NavigationAgent3D) SetPathMetadataFlags(flags NavigationPathQueryParameters3DPathMetadataFlags) {
	self.Runtime.NavigationAgent3D_set_path_metadata_flags(self, flags)
}
func (self NavigationAgent3D) GetPathMetadataFlags() NavigationPathQueryParameters3DPathMetadataFlags {
	return self.Runtime.NavigationAgent3D_get_path_metadata_flags(self)
}
func (self NavigationAgent3D) SetNavigationMap(navigation_map RID) {
	self.Runtime.NavigationAgent3D_set_navigation_map(self, navigation_map)
}
func (self NavigationAgent3D) GetNavigationMap() RID {
	return self.Runtime.NavigationAgent3D_get_navigation_map(self)
}
func (self NavigationAgent3D) SetTargetPosition(position Vector3) {
	self.Runtime.NavigationAgent3D_set_target_position(self, position)
}
func (self NavigationAgent3D) GetTargetPosition() Vector3 {
	return self.Runtime.NavigationAgent3D_get_target_position(self)
}
func (self NavigationAgent3D) GetNextPathPosition() Vector3 {
	return self.Runtime.NavigationAgent3D_get_next_path_position(self)
}
func (self NavigationAgent3D) SetVelocityForced(velocity Vector3) {
	self.Runtime.NavigationAgent3D_set_velocity_forced(self, velocity)
}
func (self NavigationAgent3D) SetVelocity(velocity Vector3) {
	self.Runtime.NavigationAgent3D_set_velocity(self, velocity)
}
func (self NavigationAgent3D) GetVelocity() Vector3 {
	return self.Runtime.NavigationAgent3D_get_velocity(self)
}
func (self NavigationAgent3D) DistanceToTarget() Float {
	return self.Runtime.NavigationAgent3D_distance_to_target(self)
}
func (self NavigationAgent3D) GetCurrentNavigationResult() NavigationPathQueryResult3D {
	return self.Runtime.NavigationAgent3D_get_current_navigation_result(self)
}
func (self NavigationAgent3D) GetCurrentNavigationPath() PackedVector3Array {
	return self.Runtime.NavigationAgent3D_get_current_navigation_path(self)
}
func (self NavigationAgent3D) GetCurrentNavigationPathIndex() int64 {
	return self.Runtime.NavigationAgent3D_get_current_navigation_path_index(self)
}
func (self NavigationAgent3D) IsTargetReached() bool {
	return self.Runtime.NavigationAgent3D_is_target_reached(self)
}
func (self NavigationAgent3D) IsTargetReachable() bool {
	return self.Runtime.NavigationAgent3D_is_target_reachable(self)
}
func (self NavigationAgent3D) IsNavigationFinished() bool {
	return self.Runtime.NavigationAgent3D_is_navigation_finished(self)
}
func (self NavigationAgent3D) GetFinalPosition() Vector3 {
	return self.Runtime.NavigationAgent3D_get_final_position(self)
}
func (self NavigationAgent3D) SetAvoidanceLayers(layers int64) {
	self.Runtime.NavigationAgent3D_set_avoidance_layers(self, layers)
}
func (self NavigationAgent3D) GetAvoidanceLayers() int64 {
	return self.Runtime.NavigationAgent3D_get_avoidance_layers(self)
}
func (self NavigationAgent3D) SetAvoidanceMask(mask int64) {
	self.Runtime.NavigationAgent3D_set_avoidance_mask(self, mask)
}
func (self NavigationAgent3D) GetAvoidanceMask() int64 {
	return self.Runtime.NavigationAgent3D_get_avoidance_mask(self)
}
func (self NavigationAgent3D) SetAvoidanceLayerValue(layer_number int64, value bool) {
	self.Runtime.NavigationAgent3D_set_avoidance_layer_value(self, layer_number, value)
}
func (self NavigationAgent3D) GetAvoidanceLayerValue(layer_number int64) bool {
	return self.Runtime.NavigationAgent3D_get_avoidance_layer_value(self, layer_number)
}
func (self NavigationAgent3D) SetAvoidanceMaskValue(mask_number int64, value bool) {
	self.Runtime.NavigationAgent3D_set_avoidance_mask_value(self, mask_number, value)
}
func (self NavigationAgent3D) GetAvoidanceMaskValue(mask_number int64) bool {
	return self.Runtime.NavigationAgent3D_get_avoidance_mask_value(self, mask_number)
}
func (self NavigationAgent3D) SetAvoidancePriority(priority Float) {
	self.Runtime.NavigationAgent3D_set_avoidance_priority(self, priority)
}
func (self NavigationAgent3D) GetAvoidancePriority() Float {
	return self.Runtime.NavigationAgent3D_get_avoidance_priority(self)
}
func (self NavigationAgent3D) SetDebugEnabled(enabled bool) {
	self.Runtime.NavigationAgent3D_set_debug_enabled(self, enabled)
}
func (self NavigationAgent3D) GetDebugEnabled() bool {
	return self.Runtime.NavigationAgent3D_get_debug_enabled(self)
}
func (self NavigationAgent3D) SetDebugUseCustom(enabled bool) {
	self.Runtime.NavigationAgent3D_set_debug_use_custom(self, enabled)
}
func (self NavigationAgent3D) GetDebugUseCustom() bool {
	return self.Runtime.NavigationAgent3D_get_debug_use_custom(self)
}
func (self NavigationAgent3D) SetDebugPathCustomColor(color Color) {
	self.Runtime.NavigationAgent3D_set_debug_path_custom_color(self, color)
}
func (self NavigationAgent3D) GetDebugPathCustomColor() Color {
	return self.Runtime.NavigationAgent3D_get_debug_path_custom_color(self)
}
func (self NavigationAgent3D) SetDebugPathCustomPointSize(point_size Float) {
	self.Runtime.NavigationAgent3D_set_debug_path_custom_point_size(self, point_size)
}
func (self NavigationAgent3D) GetDebugPathCustomPointSize() Float {
	return self.Runtime.NavigationAgent3D_get_debug_path_custom_point_size(self)
}

type extendsNavigationLink2D struct {
	_ [0]*extendsNavigationLink2D
	class
}

func (self NavigationLink2D) Node2D() Node2D {
	var parent Node2D
	parent.class = self.class
	return parent
}
func (self NavigationLink2D) GetRid() RID {
	return self.Runtime.NavigationLink2D_get_rid(self)
}
func (self NavigationLink2D) SetEnabled(enabled bool) {
	self.Runtime.NavigationLink2D_set_enabled(self, enabled)
}
func (self NavigationLink2D) IsEnabled() bool {
	return self.Runtime.NavigationLink2D_is_enabled(self)
}
func (self NavigationLink2D) SetBidirectional(bidirectional bool) {
	self.Runtime.NavigationLink2D_set_bidirectional(self, bidirectional)
}
func (self NavigationLink2D) IsBidirectional() bool {
	return self.Runtime.NavigationLink2D_is_bidirectional(self)
}
func (self NavigationLink2D) SetNavigationLayers(navigation_layers int64) {
	self.Runtime.NavigationLink2D_set_navigation_layers(self, navigation_layers)
}
func (self NavigationLink2D) GetNavigationLayers() int64 {
	return self.Runtime.NavigationLink2D_get_navigation_layers(self)
}
func (self NavigationLink2D) SetNavigationLayerValue(layer_number int64, value bool) {
	self.Runtime.NavigationLink2D_set_navigation_layer_value(self, layer_number, value)
}
func (self NavigationLink2D) GetNavigationLayerValue(layer_number int64) bool {
	return self.Runtime.NavigationLink2D_get_navigation_layer_value(self, layer_number)
}
func (self NavigationLink2D) SetStartPosition(position Vector2) {
	self.Runtime.NavigationLink2D_set_start_position(self, position)
}
func (self NavigationLink2D) GetStartPosition() Vector2 {
	return self.Runtime.NavigationLink2D_get_start_position(self)
}
func (self NavigationLink2D) SetEndPosition(position Vector2) {
	self.Runtime.NavigationLink2D_set_end_position(self, position)
}
func (self NavigationLink2D) GetEndPosition() Vector2 {
	return self.Runtime.NavigationLink2D_get_end_position(self)
}
func (self NavigationLink2D) SetGlobalStartPosition(position Vector2) {
	self.Runtime.NavigationLink2D_set_global_start_position(self, position)
}
func (self NavigationLink2D) GetGlobalStartPosition() Vector2 {
	return self.Runtime.NavigationLink2D_get_global_start_position(self)
}
func (self NavigationLink2D) SetGlobalEndPosition(position Vector2) {
	self.Runtime.NavigationLink2D_set_global_end_position(self, position)
}
func (self NavigationLink2D) GetGlobalEndPosition() Vector2 {
	return self.Runtime.NavigationLink2D_get_global_end_position(self)
}
func (self NavigationLink2D) SetEnterCost(enter_cost Float) {
	self.Runtime.NavigationLink2D_set_enter_cost(self, enter_cost)
}
func (self NavigationLink2D) GetEnterCost() Float {
	return self.Runtime.NavigationLink2D_get_enter_cost(self)
}
func (self NavigationLink2D) SetTravelCost(travel_cost Float) {
	self.Runtime.NavigationLink2D_set_travel_cost(self, travel_cost)
}
func (self NavigationLink2D) GetTravelCost() Float {
	return self.Runtime.NavigationLink2D_get_travel_cost(self)
}

type extendsNavigationLink3D struct {
	_ [0]*extendsNavigationLink3D
	class
}

func (self NavigationLink3D) Node3D() Node3D {
	var parent Node3D
	parent.class = self.class
	return parent
}
func (self NavigationLink3D) GetRid() RID {
	return self.Runtime.NavigationLink3D_get_rid(self)
}
func (self NavigationLink3D) SetEnabled(enabled bool) {
	self.Runtime.NavigationLink3D_set_enabled(self, enabled)
}
func (self NavigationLink3D) IsEnabled() bool {
	return self.Runtime.NavigationLink3D_is_enabled(self)
}
func (self NavigationLink3D) SetBidirectional(bidirectional bool) {
	self.Runtime.NavigationLink3D_set_bidirectional(self, bidirectional)
}
func (self NavigationLink3D) IsBidirectional() bool {
	return self.Runtime.NavigationLink3D_is_bidirectional(self)
}
func (self NavigationLink3D) SetNavigationLayers(navigation_layers int64) {
	self.Runtime.NavigationLink3D_set_navigation_layers(self, navigation_layers)
}
func (self NavigationLink3D) GetNavigationLayers() int64 {
	return self.Runtime.NavigationLink3D_get_navigation_layers(self)
}
func (self NavigationLink3D) SetNavigationLayerValue(layer_number int64, value bool) {
	self.Runtime.NavigationLink3D_set_navigation_layer_value(self, layer_number, value)
}
func (self NavigationLink3D) GetNavigationLayerValue(layer_number int64) bool {
	return self.Runtime.NavigationLink3D_get_navigation_layer_value(self, layer_number)
}
func (self NavigationLink3D) SetStartPosition(position Vector3) {
	self.Runtime.NavigationLink3D_set_start_position(self, position)
}
func (self NavigationLink3D) GetStartPosition() Vector3 {
	return self.Runtime.NavigationLink3D_get_start_position(self)
}
func (self NavigationLink3D) SetEndPosition(position Vector3) {
	self.Runtime.NavigationLink3D_set_end_position(self, position)
}
func (self NavigationLink3D) GetEndPosition() Vector3 {
	return self.Runtime.NavigationLink3D_get_end_position(self)
}
func (self NavigationLink3D) SetGlobalStartPosition(position Vector3) {
	self.Runtime.NavigationLink3D_set_global_start_position(self, position)
}
func (self NavigationLink3D) GetGlobalStartPosition() Vector3 {
	return self.Runtime.NavigationLink3D_get_global_start_position(self)
}
func (self NavigationLink3D) SetGlobalEndPosition(position Vector3) {
	self.Runtime.NavigationLink3D_set_global_end_position(self, position)
}
func (self NavigationLink3D) GetGlobalEndPosition() Vector3 {
	return self.Runtime.NavigationLink3D_get_global_end_position(self)
}
func (self NavigationLink3D) SetEnterCost(enter_cost Float) {
	self.Runtime.NavigationLink3D_set_enter_cost(self, enter_cost)
}
func (self NavigationLink3D) GetEnterCost() Float {
	return self.Runtime.NavigationLink3D_get_enter_cost(self)
}
func (self NavigationLink3D) SetTravelCost(travel_cost Float) {
	self.Runtime.NavigationLink3D_set_travel_cost(self, travel_cost)
}
func (self NavigationLink3D) GetTravelCost() Float {
	return self.Runtime.NavigationLink3D_get_travel_cost(self)
}

type extendsNavigationMesh struct {
	_ [0]*extendsNavigationMesh
	class
}

func (self NavigationMesh) Resource() Resource {
	var parent Resource
	parent.class = self.class
	return parent
}
func (self NavigationMesh) SetSamplePartitionType(sample_partition_type NavigationMeshSamplePartitionType) {
	self.Runtime.NavigationMesh_set_sample_partition_type(self, sample_partition_type)
}
func (self NavigationMesh) GetSamplePartitionType() NavigationMeshSamplePartitionType {
	return self.Runtime.NavigationMesh_get_sample_partition_type(self)
}
func (self NavigationMesh) SetParsedGeometryType(geometry_type NavigationMeshParsedGeometryType) {
	self.Runtime.NavigationMesh_set_parsed_geometry_type(self, geometry_type)
}
func (self NavigationMesh) GetParsedGeometryType() NavigationMeshParsedGeometryType {
	return self.Runtime.NavigationMesh_get_parsed_geometry_type(self)
}
func (self NavigationMesh) SetCollisionMask(mask int64) {
	self.Runtime.NavigationMesh_set_collision_mask(self, mask)
}
func (self NavigationMesh) GetCollisionMask() int64 {
	return self.Runtime.NavigationMesh_get_collision_mask(self)
}
func (self NavigationMesh) SetCollisionMaskValue(layer_number int64, value bool) {
	self.Runtime.NavigationMesh_set_collision_mask_value(self, layer_number, value)
}
func (self NavigationMesh) GetCollisionMaskValue(layer_number int64) bool {
	return self.Runtime.NavigationMesh_get_collision_mask_value(self, layer_number)
}
func (self NavigationMesh) SetSourceGeometryMode(mask NavigationMeshSourceGeometryMode) {
	self.Runtime.NavigationMesh_set_source_geometry_mode(self, mask)
}
func (self NavigationMesh) GetSourceGeometryMode() NavigationMeshSourceGeometryMode {
	return self.Runtime.NavigationMesh_get_source_geometry_mode(self)
}
func (self NavigationMesh) SetSourceGroupName(mask string) {
	self.Runtime.NavigationMesh_set_source_group_name(self, mask)
}
func (self NavigationMesh) GetSourceGroupName() string {
	return self.Runtime.NavigationMesh_get_source_group_name(self)
}
func (self NavigationMesh) SetCellSize(cell_size Float) {
	self.Runtime.NavigationMesh_set_cell_size(self, cell_size)
}
func (self NavigationMesh) GetCellSize() Float {
	return self.Runtime.NavigationMesh_get_cell_size(self)
}
func (self NavigationMesh) SetCellHeight(cell_height Float) {
	self.Runtime.NavigationMesh_set_cell_height(self, cell_height)
}
func (self NavigationMesh) GetCellHeight() Float {
	return self.Runtime.NavigationMesh_get_cell_height(self)
}
func (self NavigationMesh) SetAgentHeight(agent_height Float) {
	self.Runtime.NavigationMesh_set_agent_height(self, agent_height)
}
func (self NavigationMesh) GetAgentHeight() Float {
	return self.Runtime.NavigationMesh_get_agent_height(self)
}
func (self NavigationMesh) SetAgentRadius(agent_radius Float) {
	self.Runtime.NavigationMesh_set_agent_radius(self, agent_radius)
}
func (self NavigationMesh) GetAgentRadius() Float {
	return self.Runtime.NavigationMesh_get_agent_radius(self)
}
func (self NavigationMesh) SetAgentMaxClimb(agent_max_climb Float) {
	self.Runtime.NavigationMesh_set_agent_max_climb(self, agent_max_climb)
}
func (self NavigationMesh) GetAgentMaxClimb() Float {
	return self.Runtime.NavigationMesh_get_agent_max_climb(self)
}
func (self NavigationMesh) SetAgentMaxSlope(agent_max_slope Float) {
	self.Runtime.NavigationMesh_set_agent_max_slope(self, agent_max_slope)
}
func (self NavigationMesh) GetAgentMaxSlope() Float {
	return self.Runtime.NavigationMesh_get_agent_max_slope(self)
}
func (self NavigationMesh) SetRegionMinSize(region_min_size Float) {
	self.Runtime.NavigationMesh_set_region_min_size(self, region_min_size)
}
func (self NavigationMesh) GetRegionMinSize() Float {
	return self.Runtime.NavigationMesh_get_region_min_size(self)
}
func (self NavigationMesh) SetRegionMergeSize(region_merge_size Float) {
	self.Runtime.NavigationMesh_set_region_merge_size(self, region_merge_size)
}
func (self NavigationMesh) GetRegionMergeSize() Float {
	return self.Runtime.NavigationMesh_get_region_merge_size(self)
}
func (self NavigationMesh) SetEdgeMaxLength(edge_max_length Float) {
	self.Runtime.NavigationMesh_set_edge_max_length(self, edge_max_length)
}
func (self NavigationMesh) GetEdgeMaxLength() Float {
	return self.Runtime.NavigationMesh_get_edge_max_length(self)
}
func (self NavigationMesh) SetEdgeMaxError(edge_max_error Float) {
	self.Runtime.NavigationMesh_set_edge_max_error(self, edge_max_error)
}
func (self NavigationMesh) GetEdgeMaxError() Float {
	return self.Runtime.NavigationMesh_get_edge_max_error(self)
}
func (self NavigationMesh) SetVerticesPerPolygon(vertices_per_polygon Float) {
	self.Runtime.NavigationMesh_set_vertices_per_polygon(self, vertices_per_polygon)
}
func (self NavigationMesh) GetVerticesPerPolygon() Float {
	return self.Runtime.NavigationMesh_get_vertices_per_polygon(self)
}
func (self NavigationMesh) SetDetailSampleDistance(detail_sample_dist Float) {
	self.Runtime.NavigationMesh_set_detail_sample_distance(self, detail_sample_dist)
}
func (self NavigationMesh) GetDetailSampleDistance() Float {
	return self.Runtime.NavigationMesh_get_detail_sample_distance(self)
}
func (self NavigationMesh) SetDetailSampleMaxError(detail_sample_max_error Float) {
	self.Runtime.NavigationMesh_set_detail_sample_max_error(self, detail_sample_max_error)
}
func (self NavigationMesh) GetDetailSampleMaxError() Float {
	return self.Runtime.NavigationMesh_get_detail_sample_max_error(self)
}
func (self NavigationMesh) SetFilterLowHangingObstacles(filter_low_hanging_obstacles bool) {
	self.Runtime.NavigationMesh_set_filter_low_hanging_obstacles(self, filter_low_hanging_obstacles)
}
func (self NavigationMesh) GetFilterLowHangingObstacles() bool {
	return self.Runtime.NavigationMesh_get_filter_low_hanging_obstacles(self)
}
func (self NavigationMesh) SetFilterLedgeSpans(filter_ledge_spans bool) {
	self.Runtime.NavigationMesh_set_filter_ledge_spans(self, filter_ledge_spans)
}
func (self NavigationMesh) GetFilterLedgeSpans() bool {
	return self.Runtime.NavigationMesh_get_filter_ledge_spans(self)
}
func (self NavigationMesh) SetFilterWalkableLowHeightSpans(filter_walkable_low_height_spans bool) {
	self.Runtime.NavigationMesh_set_filter_walkable_low_height_spans(self, filter_walkable_low_height_spans)
}
func (self NavigationMesh) GetFilterWalkableLowHeightSpans() bool {
	return self.Runtime.NavigationMesh_get_filter_walkable_low_height_spans(self)
}
func (self NavigationMesh) SetFilterBakingAabb(baking_aabb AABB) {
	self.Runtime.NavigationMesh_set_filter_baking_aabb(self, baking_aabb)
}
func (self NavigationMesh) GetFilterBakingAabb() AABB {
	return self.Runtime.NavigationMesh_get_filter_baking_aabb(self)
}
func (self NavigationMesh) SetFilterBakingAabbOffset(baking_aabb_offset Vector3) {
	self.Runtime.NavigationMesh_set_filter_baking_aabb_offset(self, baking_aabb_offset)
}
func (self NavigationMesh) GetFilterBakingAabbOffset() Vector3 {
	return self.Runtime.NavigationMesh_get_filter_baking_aabb_offset(self)
}
func (self NavigationMesh) SetVertices(vertices PackedVector3Array) {
	self.Runtime.NavigationMesh_set_vertices(self, vertices)
}
func (self NavigationMesh) GetVertices() PackedVector3Array {
	return self.Runtime.NavigationMesh_get_vertices(self)
}
func (self NavigationMesh) AddPolygon(polygon PackedInt32Array) {
	self.Runtime.NavigationMesh_add_polygon(self, polygon)
}
func (self NavigationMesh) GetPolygonCount() int64 {
	return self.Runtime.NavigationMesh_get_polygon_count(self)
}
func (self NavigationMesh) GetPolygon(idx int64) PackedInt32Array {
	return self.Runtime.NavigationMesh_get_polygon(self, idx)
}
func (self NavigationMesh) ClearPolygons() {
	self.Runtime.NavigationMesh_clear_polygons(self)
}
func (self NavigationMesh) CreateFromMesh(mesh Mesh) {
	self.Runtime.NavigationMesh_create_from_mesh(self, mesh)
}
func (self NavigationMesh) Clear() {
	self.Runtime.NavigationMesh_clear(self)
}

type extendsNavigationMeshGenerator struct {
	_ [0]*extendsNavigationMeshGenerator
	class
}

func (self NavigationMeshGenerator) Object() Object {
	var parent Object
	parent.class = self.class
	return parent
}
func (self NavigationMeshGenerator) Bake(navigation_mesh NavigationMesh, root_node Node) {
	self.Runtime.NavigationMeshGenerator_bake(self, navigation_mesh, root_node)
}
func (self NavigationMeshGenerator) Clear(navigation_mesh NavigationMesh) {
	self.Runtime.NavigationMeshGenerator_clear(self, navigation_mesh)
}
func (self NavigationMeshGenerator) ParseSourceGeometryData(navigation_mesh NavigationMesh, source_geometry_data NavigationMeshSourceGeometryData3D, root_node Node, callback Callable) {
	self.Runtime.NavigationMeshGenerator_parse_source_geometry_data(self, navigation_mesh, source_geometry_data, root_node, callback)
}
func (self NavigationMeshGenerator) BakeFromSourceGeometryData(navigation_mesh NavigationMesh, source_geometry_data NavigationMeshSourceGeometryData3D, callback Callable) {
	self.Runtime.NavigationMeshGenerator_bake_from_source_geometry_data(self, navigation_mesh, source_geometry_data, callback)
}

type extendsNavigationMeshSourceGeometryData2D struct {
	_ [0]*extendsNavigationMeshSourceGeometryData2D
	class
}

func (self NavigationMeshSourceGeometryData2D) Resource() Resource {
	var parent Resource
	parent.class = self.class
	return parent
}
func (self NavigationMeshSourceGeometryData2D) Clear() {
	self.Runtime.NavigationMeshSourceGeometryData2D_clear(self)
}
func (self NavigationMeshSourceGeometryData2D) HasData() bool {
	return self.Runtime.NavigationMeshSourceGeometryData2D_has_data(self)
}
func (self NavigationMeshSourceGeometryData2D) SetTraversableOutlines(traversable_outlines ArrayOf[PackedVector2Array]) {
	self.Runtime.NavigationMeshSourceGeometryData2D_set_traversable_outlines(self, traversable_outlines)
}
func (self NavigationMeshSourceGeometryData2D) GetTraversableOutlines() ArrayOf[PackedVector2Array] {
	return self.Runtime.NavigationMeshSourceGeometryData2D_get_traversable_outlines(self)
}
func (self NavigationMeshSourceGeometryData2D) SetObstructionOutlines(obstruction_outlines ArrayOf[PackedVector2Array]) {
	self.Runtime.NavigationMeshSourceGeometryData2D_set_obstruction_outlines(self, obstruction_outlines)
}
func (self NavigationMeshSourceGeometryData2D) GetObstructionOutlines() ArrayOf[PackedVector2Array] {
	return self.Runtime.NavigationMeshSourceGeometryData2D_get_obstruction_outlines(self)
}
func (self NavigationMeshSourceGeometryData2D) AddTraversableOutline(shape_outline PackedVector2Array) {
	self.Runtime.NavigationMeshSourceGeometryData2D_add_traversable_outline(self, shape_outline)
}
func (self NavigationMeshSourceGeometryData2D) AddObstructionOutline(shape_outline PackedVector2Array) {
	self.Runtime.NavigationMeshSourceGeometryData2D_add_obstruction_outline(self, shape_outline)
}

type extendsNavigationMeshSourceGeometryData3D struct {
	_ [0]*extendsNavigationMeshSourceGeometryData3D
	class
}

func (self NavigationMeshSourceGeometryData3D) Resource() Resource {
	var parent Resource
	parent.class = self.class
	return parent
}
func (self NavigationMeshSourceGeometryData3D) SetVertices(vertices PackedFloat32Array) {
	self.Runtime.NavigationMeshSourceGeometryData3D_set_vertices(self, vertices)
}
func (self NavigationMeshSourceGeometryData3D) GetVertices() PackedFloat32Array {
	return self.Runtime.NavigationMeshSourceGeometryData3D_get_vertices(self)
}
func (self NavigationMeshSourceGeometryData3D) SetIndices(indices PackedInt32Array) {
	self.Runtime.NavigationMeshSourceGeometryData3D_set_indices(self, indices)
}
func (self NavigationMeshSourceGeometryData3D) GetIndices() PackedInt32Array {
	return self.Runtime.NavigationMeshSourceGeometryData3D_get_indices(self)
}
func (self NavigationMeshSourceGeometryData3D) Clear() {
	self.Runtime.NavigationMeshSourceGeometryData3D_clear(self)
}
func (self NavigationMeshSourceGeometryData3D) HasData() bool {
	return self.Runtime.NavigationMeshSourceGeometryData3D_has_data(self)
}
func (self NavigationMeshSourceGeometryData3D) AddMesh(mesh Mesh, xform Transform3D) {
	self.Runtime.NavigationMeshSourceGeometryData3D_add_mesh(self, mesh, xform)
}
func (self NavigationMeshSourceGeometryData3D) AddMeshArray(mesh_array Array, xform Transform3D) {
	self.Runtime.NavigationMeshSourceGeometryData3D_add_mesh_array(self, mesh_array, xform)
}
func (self NavigationMeshSourceGeometryData3D) AddFaces(faces PackedVector3Array, xform Transform3D) {
	self.Runtime.NavigationMeshSourceGeometryData3D_add_faces(self, faces, xform)
}

type extendsNavigationObstacle2D struct {
	_ [0]*extendsNavigationObstacle2D
	class
}

func (self NavigationObstacle2D) Node2D() Node2D {
	var parent Node2D
	parent.class = self.class
	return parent
}
func (self NavigationObstacle2D) GetRid() RID {
	return self.Runtime.NavigationObstacle2D_get_rid(self)
}
func (self NavigationObstacle2D) SetAvoidanceEnabled(enabled bool) {
	self.Runtime.NavigationObstacle2D_set_avoidance_enabled(self, enabled)
}
func (self NavigationObstacle2D) GetAvoidanceEnabled() bool {
	return self.Runtime.NavigationObstacle2D_get_avoidance_enabled(self)
}
func (self NavigationObstacle2D) SetNavigationMap(navigation_map RID) {
	self.Runtime.NavigationObstacle2D_set_navigation_map(self, navigation_map)
}
func (self NavigationObstacle2D) GetNavigationMap() RID {
	return self.Runtime.NavigationObstacle2D_get_navigation_map(self)
}
func (self NavigationObstacle2D) SetRadius(radius Float) {
	self.Runtime.NavigationObstacle2D_set_radius(self, radius)
}
func (self NavigationObstacle2D) GetRadius() Float {
	return self.Runtime.NavigationObstacle2D_get_radius(self)
}
func (self NavigationObstacle2D) SetVelocity(velocity Vector2) {
	self.Runtime.NavigationObstacle2D_set_velocity(self, velocity)
}
func (self NavigationObstacle2D) GetVelocity() Vector2 {
	return self.Runtime.NavigationObstacle2D_get_velocity(self)
}
func (self NavigationObstacle2D) SetVertices(vertices PackedVector2Array) {
	self.Runtime.NavigationObstacle2D_set_vertices(self, vertices)
}
func (self NavigationObstacle2D) GetVertices() PackedVector2Array {
	return self.Runtime.NavigationObstacle2D_get_vertices(self)
}
func (self NavigationObstacle2D) SetAvoidanceLayers(layers int64) {
	self.Runtime.NavigationObstacle2D_set_avoidance_layers(self, layers)
}
func (self NavigationObstacle2D) GetAvoidanceLayers() int64 {
	return self.Runtime.NavigationObstacle2D_get_avoidance_layers(self)
}
func (self NavigationObstacle2D) SetAvoidanceLayerValue(layer_number int64, value bool) {
	self.Runtime.NavigationObstacle2D_set_avoidance_layer_value(self, layer_number, value)
}
func (self NavigationObstacle2D) GetAvoidanceLayerValue(layer_number int64) bool {
	return self.Runtime.NavigationObstacle2D_get_avoidance_layer_value(self, layer_number)
}

type extendsNavigationObstacle3D struct {
	_ [0]*extendsNavigationObstacle3D
	class
}

func (self NavigationObstacle3D) Node3D() Node3D {
	var parent Node3D
	parent.class = self.class
	return parent
}
func (self NavigationObstacle3D) GetRid() RID {
	return self.Runtime.NavigationObstacle3D_get_rid(self)
}
func (self NavigationObstacle3D) SetAvoidanceEnabled(enabled bool) {
	self.Runtime.NavigationObstacle3D_set_avoidance_enabled(self, enabled)
}
func (self NavigationObstacle3D) GetAvoidanceEnabled() bool {
	return self.Runtime.NavigationObstacle3D_get_avoidance_enabled(self)
}
func (self NavigationObstacle3D) SetNavigationMap(navigation_map RID) {
	self.Runtime.NavigationObstacle3D_set_navigation_map(self, navigation_map)
}
func (self NavigationObstacle3D) GetNavigationMap() RID {
	return self.Runtime.NavigationObstacle3D_get_navigation_map(self)
}
func (self NavigationObstacle3D) SetRadius(radius Float) {
	self.Runtime.NavigationObstacle3D_set_radius(self, radius)
}
func (self NavigationObstacle3D) GetRadius() Float {
	return self.Runtime.NavigationObstacle3D_get_radius(self)
}
func (self NavigationObstacle3D) SetHeight(height Float) {
	self.Runtime.NavigationObstacle3D_set_height(self, height)
}
func (self NavigationObstacle3D) GetHeight() Float {
	return self.Runtime.NavigationObstacle3D_get_height(self)
}
func (self NavigationObstacle3D) SetVelocity(velocity Vector3) {
	self.Runtime.NavigationObstacle3D_set_velocity(self, velocity)
}
func (self NavigationObstacle3D) GetVelocity() Vector3 {
	return self.Runtime.NavigationObstacle3D_get_velocity(self)
}
func (self NavigationObstacle3D) SetVertices(vertices PackedVector3Array) {
	self.Runtime.NavigationObstacle3D_set_vertices(self, vertices)
}
func (self NavigationObstacle3D) GetVertices() PackedVector3Array {
	return self.Runtime.NavigationObstacle3D_get_vertices(self)
}
func (self NavigationObstacle3D) SetAvoidanceLayers(layers int64) {
	self.Runtime.NavigationObstacle3D_set_avoidance_layers(self, layers)
}
func (self NavigationObstacle3D) GetAvoidanceLayers() int64 {
	return self.Runtime.NavigationObstacle3D_get_avoidance_layers(self)
}
func (self NavigationObstacle3D) SetAvoidanceLayerValue(layer_number int64, value bool) {
	self.Runtime.NavigationObstacle3D_set_avoidance_layer_value(self, layer_number, value)
}
func (self NavigationObstacle3D) GetAvoidanceLayerValue(layer_number int64) bool {
	return self.Runtime.NavigationObstacle3D_get_avoidance_layer_value(self, layer_number)
}
func (self NavigationObstacle3D) SetUse3dAvoidance(enabled bool) {
	self.Runtime.NavigationObstacle3D_set_use_3d_avoidance(self, enabled)
}
func (self NavigationObstacle3D) GetUse3dAvoidance() bool {
	return self.Runtime.NavigationObstacle3D_get_use_3d_avoidance(self)
}

type extendsNavigationPathQueryParameters2D struct {
	_ [0]*extendsNavigationPathQueryParameters2D
	class
}

func (self NavigationPathQueryParameters2D) RefCounted() RefCounted {
	var parent RefCounted
	parent.class = self.class
	return parent
}
func (self NavigationPathQueryParameters2D) SetPathfindingAlgorithm(pathfinding_algorithm NavigationPathQueryParameters2DPathfindingAlgorithm) {
	self.Runtime.NavigationPathQueryParameters2D_set_pathfinding_algorithm(self, pathfinding_algorithm)
}
func (self NavigationPathQueryParameters2D) GetPathfindingAlgorithm() NavigationPathQueryParameters2DPathfindingAlgorithm {
	return self.Runtime.NavigationPathQueryParameters2D_get_pathfinding_algorithm(self)
}
func (self NavigationPathQueryParameters2D) SetPathPostprocessing(path_postprocessing NavigationPathQueryParameters2DPathPostProcessing) {
	self.Runtime.NavigationPathQueryParameters2D_set_path_postprocessing(self, path_postprocessing)
}
func (self NavigationPathQueryParameters2D) GetPathPostprocessing() NavigationPathQueryParameters2DPathPostProcessing {
	return self.Runtime.NavigationPathQueryParameters2D_get_path_postprocessing(self)
}
func (self NavigationPathQueryParameters2D) SetMap(mapping RID) {
	self.Runtime.NavigationPathQueryParameters2D_set_map(self, mapping)
}
func (self NavigationPathQueryParameters2D) GetMap() RID {
	return self.Runtime.NavigationPathQueryParameters2D_get_map(self)
}
func (self NavigationPathQueryParameters2D) SetStartPosition(start_position Vector2) {
	self.Runtime.NavigationPathQueryParameters2D_set_start_position(self, start_position)
}
func (self NavigationPathQueryParameters2D) GetStartPosition() Vector2 {
	return self.Runtime.NavigationPathQueryParameters2D_get_start_position(self)
}
func (self NavigationPathQueryParameters2D) SetTargetPosition(target_position Vector2) {
	self.Runtime.NavigationPathQueryParameters2D_set_target_position(self, target_position)
}
func (self NavigationPathQueryParameters2D) GetTargetPosition() Vector2 {
	return self.Runtime.NavigationPathQueryParameters2D_get_target_position(self)
}
func (self NavigationPathQueryParameters2D) SetNavigationLayers(navigation_layers int64) {
	self.Runtime.NavigationPathQueryParameters2D_set_navigation_layers(self, navigation_layers)
}
func (self NavigationPathQueryParameters2D) GetNavigationLayers() int64 {
	return self.Runtime.NavigationPathQueryParameters2D_get_navigation_layers(self)
}
func (self NavigationPathQueryParameters2D) SetMetadataFlags(flags NavigationPathQueryParameters2DPathMetadataFlags) {
	self.Runtime.NavigationPathQueryParameters2D_set_metadata_flags(self, flags)
}
func (self NavigationPathQueryParameters2D) GetMetadataFlags() NavigationPathQueryParameters2DPathMetadataFlags {
	return self.Runtime.NavigationPathQueryParameters2D_get_metadata_flags(self)
}

type extendsNavigationPathQueryParameters3D struct {
	_ [0]*extendsNavigationPathQueryParameters3D
	class
}

func (self NavigationPathQueryParameters3D) RefCounted() RefCounted {
	var parent RefCounted
	parent.class = self.class
	return parent
}
func (self NavigationPathQueryParameters3D) SetPathfindingAlgorithm(pathfinding_algorithm NavigationPathQueryParameters3DPathfindingAlgorithm) {
	self.Runtime.NavigationPathQueryParameters3D_set_pathfinding_algorithm(self, pathfinding_algorithm)
}
func (self NavigationPathQueryParameters3D) GetPathfindingAlgorithm() NavigationPathQueryParameters3DPathfindingAlgorithm {
	return self.Runtime.NavigationPathQueryParameters3D_get_pathfinding_algorithm(self)
}
func (self NavigationPathQueryParameters3D) SetPathPostprocessing(path_postprocessing NavigationPathQueryParameters3DPathPostProcessing) {
	self.Runtime.NavigationPathQueryParameters3D_set_path_postprocessing(self, path_postprocessing)
}
func (self NavigationPathQueryParameters3D) GetPathPostprocessing() NavigationPathQueryParameters3DPathPostProcessing {
	return self.Runtime.NavigationPathQueryParameters3D_get_path_postprocessing(self)
}
func (self NavigationPathQueryParameters3D) SetMap(mapping RID) {
	self.Runtime.NavigationPathQueryParameters3D_set_map(self, mapping)
}
func (self NavigationPathQueryParameters3D) GetMap() RID {
	return self.Runtime.NavigationPathQueryParameters3D_get_map(self)
}
func (self NavigationPathQueryParameters3D) SetStartPosition(start_position Vector3) {
	self.Runtime.NavigationPathQueryParameters3D_set_start_position(self, start_position)
}
func (self NavigationPathQueryParameters3D) GetStartPosition() Vector3 {
	return self.Runtime.NavigationPathQueryParameters3D_get_start_position(self)
}
func (self NavigationPathQueryParameters3D) SetTargetPosition(target_position Vector3) {
	self.Runtime.NavigationPathQueryParameters3D_set_target_position(self, target_position)
}
func (self NavigationPathQueryParameters3D) GetTargetPosition() Vector3 {
	return self.Runtime.NavigationPathQueryParameters3D_get_target_position(self)
}
func (self NavigationPathQueryParameters3D) SetNavigationLayers(navigation_layers int64) {
	self.Runtime.NavigationPathQueryParameters3D_set_navigation_layers(self, navigation_layers)
}
func (self NavigationPathQueryParameters3D) GetNavigationLayers() int64 {
	return self.Runtime.NavigationPathQueryParameters3D_get_navigation_layers(self)
}
func (self NavigationPathQueryParameters3D) SetMetadataFlags(flags NavigationPathQueryParameters3DPathMetadataFlags) {
	self.Runtime.NavigationPathQueryParameters3D_set_metadata_flags(self, flags)
}
func (self NavigationPathQueryParameters3D) GetMetadataFlags() NavigationPathQueryParameters3DPathMetadataFlags {
	return self.Runtime.NavigationPathQueryParameters3D_get_metadata_flags(self)
}

type extendsNavigationPathQueryResult2D struct {
	_ [0]*extendsNavigationPathQueryResult2D
	class
}

func (self NavigationPathQueryResult2D) RefCounted() RefCounted {
	var parent RefCounted
	parent.class = self.class
	return parent
}
func (self NavigationPathQueryResult2D) SetPath(path PackedVector2Array) {
	self.Runtime.NavigationPathQueryResult2D_set_path(self, path)
}
func (self NavigationPathQueryResult2D) GetPath() PackedVector2Array {
	return self.Runtime.NavigationPathQueryResult2D_get_path(self)
}
func (self NavigationPathQueryResult2D) SetPathTypes(path_types PackedInt32Array) {
	self.Runtime.NavigationPathQueryResult2D_set_path_types(self, path_types)
}
func (self NavigationPathQueryResult2D) GetPathTypes() PackedInt32Array {
	return self.Runtime.NavigationPathQueryResult2D_get_path_types(self)
}
func (self NavigationPathQueryResult2D) SetPathRids(path_rids ArrayOf[RID]) {
	self.Runtime.NavigationPathQueryResult2D_set_path_rids(self, path_rids)
}
func (self NavigationPathQueryResult2D) GetPathRids() ArrayOf[RID] {
	return self.Runtime.NavigationPathQueryResult2D_get_path_rids(self)
}
func (self NavigationPathQueryResult2D) SetPathOwnerIds(path_owner_ids PackedInt64Array) {
	self.Runtime.NavigationPathQueryResult2D_set_path_owner_ids(self, path_owner_ids)
}
func (self NavigationPathQueryResult2D) GetPathOwnerIds() PackedInt64Array {
	return self.Runtime.NavigationPathQueryResult2D_get_path_owner_ids(self)
}
func (self NavigationPathQueryResult2D) Reset() {
	self.Runtime.NavigationPathQueryResult2D_reset(self)
}

type extendsNavigationPathQueryResult3D struct {
	_ [0]*extendsNavigationPathQueryResult3D
	class
}

func (self NavigationPathQueryResult3D) RefCounted() RefCounted {
	var parent RefCounted
	parent.class = self.class
	return parent
}
func (self NavigationPathQueryResult3D) SetPath(path PackedVector3Array) {
	self.Runtime.NavigationPathQueryResult3D_set_path(self, path)
}
func (self NavigationPathQueryResult3D) GetPath() PackedVector3Array {
	return self.Runtime.NavigationPathQueryResult3D_get_path(self)
}
func (self NavigationPathQueryResult3D) SetPathTypes(path_types PackedInt32Array) {
	self.Runtime.NavigationPathQueryResult3D_set_path_types(self, path_types)
}
func (self NavigationPathQueryResult3D) GetPathTypes() PackedInt32Array {
	return self.Runtime.NavigationPathQueryResult3D_get_path_types(self)
}
func (self NavigationPathQueryResult3D) SetPathRids(path_rids ArrayOf[RID]) {
	self.Runtime.NavigationPathQueryResult3D_set_path_rids(self, path_rids)
}
func (self NavigationPathQueryResult3D) GetPathRids() ArrayOf[RID] {
	return self.Runtime.NavigationPathQueryResult3D_get_path_rids(self)
}
func (self NavigationPathQueryResult3D) SetPathOwnerIds(path_owner_ids PackedInt64Array) {
	self.Runtime.NavigationPathQueryResult3D_set_path_owner_ids(self, path_owner_ids)
}
func (self NavigationPathQueryResult3D) GetPathOwnerIds() PackedInt64Array {
	return self.Runtime.NavigationPathQueryResult3D_get_path_owner_ids(self)
}
func (self NavigationPathQueryResult3D) Reset() {
	self.Runtime.NavigationPathQueryResult3D_reset(self)
}

type extendsNavigationPolygon struct {
	_ [0]*extendsNavigationPolygon
	class
}

func (self NavigationPolygon) Resource() Resource {
	var parent Resource
	parent.class = self.class
	return parent
}
func (self NavigationPolygon) SetVertices(vertices PackedVector2Array) {
	self.Runtime.NavigationPolygon_set_vertices(self, vertices)
}
func (self NavigationPolygon) GetVertices() PackedVector2Array {
	return self.Runtime.NavigationPolygon_get_vertices(self)
}
func (self NavigationPolygon) AddPolygon(polygon PackedInt32Array) {
	self.Runtime.NavigationPolygon_add_polygon(self, polygon)
}
func (self NavigationPolygon) GetPolygonCount() int64 {
	return self.Runtime.NavigationPolygon_get_polygon_count(self)
}
func (self NavigationPolygon) GetPolygon(idx int64) PackedInt32Array {
	return self.Runtime.NavigationPolygon_get_polygon(self, idx)
}
func (self NavigationPolygon) ClearPolygons() {
	self.Runtime.NavigationPolygon_clear_polygons(self)
}
func (self NavigationPolygon) GetNavigationMesh() NavigationMesh {
	return self.Runtime.NavigationPolygon_get_navigation_mesh(self)
}
func (self NavigationPolygon) AddOutline(outline PackedVector2Array) {
	self.Runtime.NavigationPolygon_add_outline(self, outline)
}
func (self NavigationPolygon) AddOutlineAtIndex(outline PackedVector2Array, index int64) {
	self.Runtime.NavigationPolygon_add_outline_at_index(self, outline, index)
}
func (self NavigationPolygon) GetOutlineCount() int64 {
	return self.Runtime.NavigationPolygon_get_outline_count(self)
}
func (self NavigationPolygon) SetOutline(idx int64, outline PackedVector2Array) {
	self.Runtime.NavigationPolygon_set_outline(self, idx, outline)
}
func (self NavigationPolygon) GetOutline(idx int64) PackedVector2Array {
	return self.Runtime.NavigationPolygon_get_outline(self, idx)
}
func (self NavigationPolygon) RemoveOutline(idx int64) {
	self.Runtime.NavigationPolygon_remove_outline(self, idx)
}
func (self NavigationPolygon) ClearOutlines() {
	self.Runtime.NavigationPolygon_clear_outlines(self)
}
func (self NavigationPolygon) MakePolygonsFromOutlines() {
	self.Runtime.NavigationPolygon_make_polygons_from_outlines(self)
}
func (self NavigationPolygon) SetCellSize(cell_size Float) {
	self.Runtime.NavigationPolygon_set_cell_size(self, cell_size)
}
func (self NavigationPolygon) GetCellSize() Float {
	return self.Runtime.NavigationPolygon_get_cell_size(self)
}
func (self NavigationPolygon) SetParsedGeometryType(geometry_type NavigationPolygonParsedGeometryType) {
	self.Runtime.NavigationPolygon_set_parsed_geometry_type(self, geometry_type)
}
func (self NavigationPolygon) GetParsedGeometryType() NavigationPolygonParsedGeometryType {
	return self.Runtime.NavigationPolygon_get_parsed_geometry_type(self)
}
func (self NavigationPolygon) SetParsedCollisionMask(mask int64) {
	self.Runtime.NavigationPolygon_set_parsed_collision_mask(self, mask)
}
func (self NavigationPolygon) GetParsedCollisionMask() int64 {
	return self.Runtime.NavigationPolygon_get_parsed_collision_mask(self)
}
func (self NavigationPolygon) SetParsedCollisionMaskValue(layer_number int64, value bool) {
	self.Runtime.NavigationPolygon_set_parsed_collision_mask_value(self, layer_number, value)
}
func (self NavigationPolygon) GetParsedCollisionMaskValue(layer_number int64) bool {
	return self.Runtime.NavigationPolygon_get_parsed_collision_mask_value(self, layer_number)
}
func (self NavigationPolygon) SetSourceGeometryMode(geometry_mode NavigationPolygonSourceGeometryMode) {
	self.Runtime.NavigationPolygon_set_source_geometry_mode(self, geometry_mode)
}
func (self NavigationPolygon) GetSourceGeometryMode() NavigationPolygonSourceGeometryMode {
	return self.Runtime.NavigationPolygon_get_source_geometry_mode(self)
}
func (self NavigationPolygon) SetSourceGeometryGroupName(group_name string) {
	self.Runtime.NavigationPolygon_set_source_geometry_group_name(self, group_name)
}
func (self NavigationPolygon) GetSourceGeometryGroupName() string {
	return self.Runtime.NavigationPolygon_get_source_geometry_group_name(self)
}
func (self NavigationPolygon) SetAgentRadius(agent_radius Float) {
	self.Runtime.NavigationPolygon_set_agent_radius(self, agent_radius)
}
func (self NavigationPolygon) GetAgentRadius() Float {
	return self.Runtime.NavigationPolygon_get_agent_radius(self)
}
func (self NavigationPolygon) Clear() {
	self.Runtime.NavigationPolygon_clear(self)
}

type extendsNavigationRegion2D struct {
	_ [0]*extendsNavigationRegion2D
	class
}

func (self NavigationRegion2D) Node2D() Node2D {
	var parent Node2D
	parent.class = self.class
	return parent
}
func (self NavigationRegion2D) GetRid() RID {
	return self.Runtime.NavigationRegion2D_get_rid(self)
}
func (self NavigationRegion2D) SetNavigationPolygon(navigation_polygon NavigationPolygon) {
	self.Runtime.NavigationRegion2D_set_navigation_polygon(self, navigation_polygon)
}
func (self NavigationRegion2D) GetNavigationPolygon() NavigationPolygon {
	return self.Runtime.NavigationRegion2D_get_navigation_polygon(self)
}
func (self NavigationRegion2D) SetEnabled(enabled bool) {
	self.Runtime.NavigationRegion2D_set_enabled(self, enabled)
}
func (self NavigationRegion2D) IsEnabled() bool {
	return self.Runtime.NavigationRegion2D_is_enabled(self)
}
func (self NavigationRegion2D) SetNavigationMap(navigation_map RID) {
	self.Runtime.NavigationRegion2D_set_navigation_map(self, navigation_map)
}
func (self NavigationRegion2D) GetNavigationMap() RID {
	return self.Runtime.NavigationRegion2D_get_navigation_map(self)
}
func (self NavigationRegion2D) SetUseEdgeConnections(enabled bool) {
	self.Runtime.NavigationRegion2D_set_use_edge_connections(self, enabled)
}
func (self NavigationRegion2D) GetUseEdgeConnections() bool {
	return self.Runtime.NavigationRegion2D_get_use_edge_connections(self)
}
func (self NavigationRegion2D) SetNavigationLayers(navigation_layers int64) {
	self.Runtime.NavigationRegion2D_set_navigation_layers(self, navigation_layers)
}
func (self NavigationRegion2D) GetNavigationLayers() int64 {
	return self.Runtime.NavigationRegion2D_get_navigation_layers(self)
}
func (self NavigationRegion2D) SetNavigationLayerValue(layer_number int64, value bool) {
	self.Runtime.NavigationRegion2D_set_navigation_layer_value(self, layer_number, value)
}
func (self NavigationRegion2D) GetNavigationLayerValue(layer_number int64) bool {
	return self.Runtime.NavigationRegion2D_get_navigation_layer_value(self, layer_number)
}
func (self NavigationRegion2D) SetConstrainAvoidance(enabled bool) {
	self.Runtime.NavigationRegion2D_set_constrain_avoidance(self, enabled)
}
func (self NavigationRegion2D) GetConstrainAvoidance() bool {
	return self.Runtime.NavigationRegion2D_get_constrain_avoidance(self)
}
func (self NavigationRegion2D) SetAvoidanceLayers(layers int64) {
	self.Runtime.NavigationRegion2D_set_avoidance_layers(self, layers)
}
func (self NavigationRegion2D) GetAvoidanceLayers() int64 {
	return self.Runtime.NavigationRegion2D_get_avoidance_layers(self)
}
func (self NavigationRegion2D) SetAvoidanceLayerValue(layer_number int64, value bool) {
	self.Runtime.NavigationRegion2D_set_avoidance_layer_value(self, layer_number, value)
}
func (self NavigationRegion2D) GetAvoidanceLayerValue(layer_number int64) bool {
	return self.Runtime.NavigationRegion2D_get_avoidance_layer_value(self, layer_number)
}
func (self NavigationRegion2D) GetRegionRid() RID {
	return self.Runtime.NavigationRegion2D_get_region_rid(self)
}
func (self NavigationRegion2D) SetEnterCost(enter_cost Float) {
	self.Runtime.NavigationRegion2D_set_enter_cost(self, enter_cost)
}
func (self NavigationRegion2D) GetEnterCost() Float {
	return self.Runtime.NavigationRegion2D_get_enter_cost(self)
}
func (self NavigationRegion2D) SetTravelCost(travel_cost Float) {
	self.Runtime.NavigationRegion2D_set_travel_cost(self, travel_cost)
}
func (self NavigationRegion2D) GetTravelCost() Float {
	return self.Runtime.NavigationRegion2D_get_travel_cost(self)
}
func (self NavigationRegion2D) BakeNavigationPolygon(on_thread bool) {
	self.Runtime.NavigationRegion2D_bake_navigation_polygon(self, on_thread)
}

type extendsNavigationRegion3D struct {
	_ [0]*extendsNavigationRegion3D
	class
}

func (self NavigationRegion3D) Node3D() Node3D {
	var parent Node3D
	parent.class = self.class
	return parent
}
func (self NavigationRegion3D) GetRid() RID {
	return self.Runtime.NavigationRegion3D_get_rid(self)
}
func (self NavigationRegion3D) SetNavigationMesh(navigation_mesh NavigationMesh) {
	self.Runtime.NavigationRegion3D_set_navigation_mesh(self, navigation_mesh)
}
func (self NavigationRegion3D) GetNavigationMesh() NavigationMesh {
	return self.Runtime.NavigationRegion3D_get_navigation_mesh(self)
}
func (self NavigationRegion3D) SetEnabled(enabled bool) {
	self.Runtime.NavigationRegion3D_set_enabled(self, enabled)
}
func (self NavigationRegion3D) IsEnabled() bool {
	return self.Runtime.NavigationRegion3D_is_enabled(self)
}
func (self NavigationRegion3D) SetNavigationMap(navigation_map RID) {
	self.Runtime.NavigationRegion3D_set_navigation_map(self, navigation_map)
}
func (self NavigationRegion3D) GetNavigationMap() RID {
	return self.Runtime.NavigationRegion3D_get_navigation_map(self)
}
func (self NavigationRegion3D) SetUseEdgeConnections(enabled bool) {
	self.Runtime.NavigationRegion3D_set_use_edge_connections(self, enabled)
}
func (self NavigationRegion3D) GetUseEdgeConnections() bool {
	return self.Runtime.NavigationRegion3D_get_use_edge_connections(self)
}
func (self NavigationRegion3D) SetNavigationLayers(navigation_layers int64) {
	self.Runtime.NavigationRegion3D_set_navigation_layers(self, navigation_layers)
}
func (self NavigationRegion3D) GetNavigationLayers() int64 {
	return self.Runtime.NavigationRegion3D_get_navigation_layers(self)
}
func (self NavigationRegion3D) SetNavigationLayerValue(layer_number int64, value bool) {
	self.Runtime.NavigationRegion3D_set_navigation_layer_value(self, layer_number, value)
}
func (self NavigationRegion3D) GetNavigationLayerValue(layer_number int64) bool {
	return self.Runtime.NavigationRegion3D_get_navigation_layer_value(self, layer_number)
}
func (self NavigationRegion3D) GetRegionRid() RID {
	return self.Runtime.NavigationRegion3D_get_region_rid(self)
}
func (self NavigationRegion3D) SetEnterCost(enter_cost Float) {
	self.Runtime.NavigationRegion3D_set_enter_cost(self, enter_cost)
}
func (self NavigationRegion3D) GetEnterCost() Float {
	return self.Runtime.NavigationRegion3D_get_enter_cost(self)
}
func (self NavigationRegion3D) SetTravelCost(travel_cost Float) {
	self.Runtime.NavigationRegion3D_set_travel_cost(self, travel_cost)
}
func (self NavigationRegion3D) GetTravelCost() Float {
	return self.Runtime.NavigationRegion3D_get_travel_cost(self)
}
func (self NavigationRegion3D) BakeNavigationMesh(on_thread bool) {
	self.Runtime.NavigationRegion3D_bake_navigation_mesh(self, on_thread)
}

type extendsNavigationServer2D struct {
	_ [0]*extendsNavigationServer2D
	class
}

func (self NavigationServer2D) Object() Object {
	var parent Object
	parent.class = self.class
	return parent
}
func (self NavigationServer2D) GetMaps() ArrayOf[RID] {
	return self.Runtime.NavigationServer2D_get_maps(self)
}
func (self NavigationServer2D) MapCreate() RID {
	return self.Runtime.NavigationServer2D_map_create(self)
}
func (self NavigationServer2D) MapSetActive(mapping RID, active bool) {
	self.Runtime.NavigationServer2D_map_set_active(self, mapping, active)
}
func (self NavigationServer2D) MapIsActive(mapping RID) bool {
	return self.Runtime.NavigationServer2D_map_is_active(self, mapping)
}
func (self NavigationServer2D) MapSetCellSize(mapping RID, cell_size Float) {
	self.Runtime.NavigationServer2D_map_set_cell_size(self, mapping, cell_size)
}
func (self NavigationServer2D) MapGetCellSize(mapping RID) Float {
	return self.Runtime.NavigationServer2D_map_get_cell_size(self, mapping)
}
func (self NavigationServer2D) MapSetUseEdgeConnections(mapping RID, enabled bool) {
	self.Runtime.NavigationServer2D_map_set_use_edge_connections(self, mapping, enabled)
}
func (self NavigationServer2D) MapGetUseEdgeConnections(mapping RID) bool {
	return self.Runtime.NavigationServer2D_map_get_use_edge_connections(self, mapping)
}
func (self NavigationServer2D) MapSetEdgeConnectionMargin(mapping RID, margin Float) {
	self.Runtime.NavigationServer2D_map_set_edge_connection_margin(self, mapping, margin)
}
func (self NavigationServer2D) MapGetEdgeConnectionMargin(mapping RID) Float {
	return self.Runtime.NavigationServer2D_map_get_edge_connection_margin(self, mapping)
}
func (self NavigationServer2D) MapSetLinkConnectionRadius(mapping RID, radius Float) {
	self.Runtime.NavigationServer2D_map_set_link_connection_radius(self, mapping, radius)
}
func (self NavigationServer2D) MapGetLinkConnectionRadius(mapping RID) Float {
	return self.Runtime.NavigationServer2D_map_get_link_connection_radius(self, mapping)
}
func (self NavigationServer2D) MapGetPath(mapping RID, origin Vector2, destination Vector2, optimize bool, navigation_layers int64) PackedVector2Array {
	return self.Runtime.NavigationServer2D_map_get_path(self, mapping, origin, destination, optimize, navigation_layers)
}
func (self NavigationServer2D) MapGetClosestPoint(mapping RID, to_point Vector2) Vector2 {
	return self.Runtime.NavigationServer2D_map_get_closest_point(self, mapping, to_point)
}
func (self NavigationServer2D) MapGetClosestPointOwner(mapping RID, to_point Vector2) RID {
	return self.Runtime.NavigationServer2D_map_get_closest_point_owner(self, mapping, to_point)
}
func (self NavigationServer2D) MapGetLinks(mapping RID) ArrayOf[RID] {
	return self.Runtime.NavigationServer2D_map_get_links(self, mapping)
}
func (self NavigationServer2D) MapGetRegions(mapping RID) ArrayOf[RID] {
	return self.Runtime.NavigationServer2D_map_get_regions(self, mapping)
}
func (self NavigationServer2D) MapGetAgents(mapping RID) ArrayOf[RID] {
	return self.Runtime.NavigationServer2D_map_get_agents(self, mapping)
}
func (self NavigationServer2D) MapGetObstacles(mapping RID) ArrayOf[RID] {
	return self.Runtime.NavigationServer2D_map_get_obstacles(self, mapping)
}
func (self NavigationServer2D) MapForceUpdate(mapping RID) {
	self.Runtime.NavigationServer2D_map_force_update(self, mapping)
}
func (self NavigationServer2D) MapGetRandomPoint(mapping RID, navigation_layers int64, uniformly bool) Vector2 {
	return self.Runtime.NavigationServer2D_map_get_random_point(self, mapping, navigation_layers, uniformly)
}
func (self NavigationServer2D) QueryPath(parameters NavigationPathQueryParameters2D, result NavigationPathQueryResult2D) {
	self.Runtime.NavigationServer2D_query_path(self, parameters, result)
}
func (self NavigationServer2D) RegionCreate() RID {
	return self.Runtime.NavigationServer2D_region_create(self)
}
func (self NavigationServer2D) RegionSetEnabled(region RID, enabled bool) {
	self.Runtime.NavigationServer2D_region_set_enabled(self, region, enabled)
}
func (self NavigationServer2D) RegionGetEnabled(region RID) bool {
	return self.Runtime.NavigationServer2D_region_get_enabled(self, region)
}
func (self NavigationServer2D) RegionSetUseEdgeConnections(region RID, enabled bool) {
	self.Runtime.NavigationServer2D_region_set_use_edge_connections(self, region, enabled)
}
func (self NavigationServer2D) RegionGetUseEdgeConnections(region RID) bool {
	return self.Runtime.NavigationServer2D_region_get_use_edge_connections(self, region)
}
func (self NavigationServer2D) RegionSetEnterCost(region RID, enter_cost Float) {
	self.Runtime.NavigationServer2D_region_set_enter_cost(self, region, enter_cost)
}
func (self NavigationServer2D) RegionGetEnterCost(region RID) Float {
	return self.Runtime.NavigationServer2D_region_get_enter_cost(self, region)
}
func (self NavigationServer2D) RegionSetTravelCost(region RID, travel_cost Float) {
	self.Runtime.NavigationServer2D_region_set_travel_cost(self, region, travel_cost)
}
func (self NavigationServer2D) RegionGetTravelCost(region RID) Float {
	return self.Runtime.NavigationServer2D_region_get_travel_cost(self, region)
}
func (self NavigationServer2D) RegionSetOwnerId(region RID, owner_id int64) {
	self.Runtime.NavigationServer2D_region_set_owner_id(self, region, owner_id)
}
func (self NavigationServer2D) RegionGetOwnerId(region RID) int64 {
	return self.Runtime.NavigationServer2D_region_get_owner_id(self, region)
}
func (self NavigationServer2D) RegionOwnsPoint(region RID, point Vector2) bool {
	return self.Runtime.NavigationServer2D_region_owns_point(self, region, point)
}
func (self NavigationServer2D) RegionSetMap(region RID, mapping RID) {
	self.Runtime.NavigationServer2D_region_set_map(self, region, mapping)
}
func (self NavigationServer2D) RegionGetMap(region RID) RID {
	return self.Runtime.NavigationServer2D_region_get_map(self, region)
}
func (self NavigationServer2D) RegionSetNavigationLayers(region RID, navigation_layers int64) {
	self.Runtime.NavigationServer2D_region_set_navigation_layers(self, region, navigation_layers)
}
func (self NavigationServer2D) RegionGetNavigationLayers(region RID) int64 {
	return self.Runtime.NavigationServer2D_region_get_navigation_layers(self, region)
}
func (self NavigationServer2D) RegionSetTransform(region RID, transform Transform2D) {
	self.Runtime.NavigationServer2D_region_set_transform(self, region, transform)
}
func (self NavigationServer2D) RegionGetTransform(region RID) Transform2D {
	return self.Runtime.NavigationServer2D_region_get_transform(self, region)
}
func (self NavigationServer2D) RegionSetNavigationPolygon(region RID, navigation_polygon NavigationPolygon) {
	self.Runtime.NavigationServer2D_region_set_navigation_polygon(self, region, navigation_polygon)
}
func (self NavigationServer2D) RegionGetConnectionsCount(region RID) int64 {
	return self.Runtime.NavigationServer2D_region_get_connections_count(self, region)
}
func (self NavigationServer2D) RegionGetConnectionPathwayStart(region RID, connection int64) Vector2 {
	return self.Runtime.NavigationServer2D_region_get_connection_pathway_start(self, region, connection)
}
func (self NavigationServer2D) RegionGetConnectionPathwayEnd(region RID, connection int64) Vector2 {
	return self.Runtime.NavigationServer2D_region_get_connection_pathway_end(self, region, connection)
}
func (self NavigationServer2D) RegionGetRandomPoint(region RID, navigation_layers int64, uniformly bool) Vector2 {
	return self.Runtime.NavigationServer2D_region_get_random_point(self, region, navigation_layers, uniformly)
}
func (self NavigationServer2D) LinkCreate() RID {
	return self.Runtime.NavigationServer2D_link_create(self)
}
func (self NavigationServer2D) LinkSetMap(link RID, mapping RID) {
	self.Runtime.NavigationServer2D_link_set_map(self, link, mapping)
}
func (self NavigationServer2D) LinkGetMap(link RID) RID {
	return self.Runtime.NavigationServer2D_link_get_map(self, link)
}
func (self NavigationServer2D) LinkSetEnabled(link RID, enabled bool) {
	self.Runtime.NavigationServer2D_link_set_enabled(self, link, enabled)
}
func (self NavigationServer2D) LinkGetEnabled(link RID) bool {
	return self.Runtime.NavigationServer2D_link_get_enabled(self, link)
}
func (self NavigationServer2D) LinkSetBidirectional(link RID, bidirectional bool) {
	self.Runtime.NavigationServer2D_link_set_bidirectional(self, link, bidirectional)
}
func (self NavigationServer2D) LinkIsBidirectional(link RID) bool {
	return self.Runtime.NavigationServer2D_link_is_bidirectional(self, link)
}
func (self NavigationServer2D) LinkSetNavigationLayers(link RID, navigation_layers int64) {
	self.Runtime.NavigationServer2D_link_set_navigation_layers(self, link, navigation_layers)
}
func (self NavigationServer2D) LinkGetNavigationLayers(link RID) int64 {
	return self.Runtime.NavigationServer2D_link_get_navigation_layers(self, link)
}
func (self NavigationServer2D) LinkSetStartPosition(link RID, position Vector2) {
	self.Runtime.NavigationServer2D_link_set_start_position(self, link, position)
}
func (self NavigationServer2D) LinkGetStartPosition(link RID) Vector2 {
	return self.Runtime.NavigationServer2D_link_get_start_position(self, link)
}
func (self NavigationServer2D) LinkSetEndPosition(link RID, position Vector2) {
	self.Runtime.NavigationServer2D_link_set_end_position(self, link, position)
}
func (self NavigationServer2D) LinkGetEndPosition(link RID) Vector2 {
	return self.Runtime.NavigationServer2D_link_get_end_position(self, link)
}
func (self NavigationServer2D) LinkSetEnterCost(link RID, enter_cost Float) {
	self.Runtime.NavigationServer2D_link_set_enter_cost(self, link, enter_cost)
}
func (self NavigationServer2D) LinkGetEnterCost(link RID) Float {
	return self.Runtime.NavigationServer2D_link_get_enter_cost(self, link)
}
func (self NavigationServer2D) LinkSetTravelCost(link RID, travel_cost Float) {
	self.Runtime.NavigationServer2D_link_set_travel_cost(self, link, travel_cost)
}
func (self NavigationServer2D) LinkGetTravelCost(link RID) Float {
	return self.Runtime.NavigationServer2D_link_get_travel_cost(self, link)
}
func (self NavigationServer2D) LinkSetOwnerId(link RID, owner_id int64) {
	self.Runtime.NavigationServer2D_link_set_owner_id(self, link, owner_id)
}
func (self NavigationServer2D) LinkGetOwnerId(link RID) int64 {
	return self.Runtime.NavigationServer2D_link_get_owner_id(self, link)
}
func (self NavigationServer2D) AgentCreate() RID {
	return self.Runtime.NavigationServer2D_agent_create(self)
}
func (self NavigationServer2D) AgentSetAvoidanceEnabled(agent RID, enabled bool) {
	self.Runtime.NavigationServer2D_agent_set_avoidance_enabled(self, agent, enabled)
}
func (self NavigationServer2D) AgentGetAvoidanceEnabled(agent RID) bool {
	return self.Runtime.NavigationServer2D_agent_get_avoidance_enabled(self, agent)
}
func (self NavigationServer2D) AgentSetMap(agent RID, mapping RID) {
	self.Runtime.NavigationServer2D_agent_set_map(self, agent, mapping)
}
func (self NavigationServer2D) AgentGetMap(agent RID) RID {
	return self.Runtime.NavigationServer2D_agent_get_map(self, agent)
}
func (self NavigationServer2D) AgentSetPaused(agent RID, paused bool) {
	self.Runtime.NavigationServer2D_agent_set_paused(self, agent, paused)
}
func (self NavigationServer2D) AgentGetPaused(agent RID) bool {
	return self.Runtime.NavigationServer2D_agent_get_paused(self, agent)
}
func (self NavigationServer2D) AgentSetNeighborDistance(agent RID, distance Float) {
	self.Runtime.NavigationServer2D_agent_set_neighbor_distance(self, agent, distance)
}
func (self NavigationServer2D) AgentGetNeighborDistance(agent RID) Float {
	return self.Runtime.NavigationServer2D_agent_get_neighbor_distance(self, agent)
}
func (self NavigationServer2D) AgentSetMaxNeighbors(agent RID, count int64) {
	self.Runtime.NavigationServer2D_agent_set_max_neighbors(self, agent, count)
}
func (self NavigationServer2D) AgentGetMaxNeighbors(agent RID) int64 {
	return self.Runtime.NavigationServer2D_agent_get_max_neighbors(self, agent)
}
func (self NavigationServer2D) AgentSetTimeHorizonAgents(agent RID, time_horizon Float) {
	self.Runtime.NavigationServer2D_agent_set_time_horizon_agents(self, agent, time_horizon)
}
func (self NavigationServer2D) AgentGetTimeHorizonAgents(agent RID) Float {
	return self.Runtime.NavigationServer2D_agent_get_time_horizon_agents(self, agent)
}
func (self NavigationServer2D) AgentSetTimeHorizonObstacles(agent RID, time_horizon Float) {
	self.Runtime.NavigationServer2D_agent_set_time_horizon_obstacles(self, agent, time_horizon)
}
func (self NavigationServer2D) AgentGetTimeHorizonObstacles(agent RID) Float {
	return self.Runtime.NavigationServer2D_agent_get_time_horizon_obstacles(self, agent)
}
func (self NavigationServer2D) AgentSetRadius(agent RID, radius Float) {
	self.Runtime.NavigationServer2D_agent_set_radius(self, agent, radius)
}
func (self NavigationServer2D) AgentGetRadius(agent RID) Float {
	return self.Runtime.NavigationServer2D_agent_get_radius(self, agent)
}
func (self NavigationServer2D) AgentSetMaxSpeed(agent RID, max_speed Float) {
	self.Runtime.NavigationServer2D_agent_set_max_speed(self, agent, max_speed)
}
func (self NavigationServer2D) AgentGetMaxSpeed(agent RID) Float {
	return self.Runtime.NavigationServer2D_agent_get_max_speed(self, agent)
}
func (self NavigationServer2D) AgentSetVelocityForced(agent RID, velocity Vector2) {
	self.Runtime.NavigationServer2D_agent_set_velocity_forced(self, agent, velocity)
}
func (self NavigationServer2D) AgentSetVelocity(agent RID, velocity Vector2) {
	self.Runtime.NavigationServer2D_agent_set_velocity(self, agent, velocity)
}
func (self NavigationServer2D) AgentGetVelocity(agent RID) Vector2 {
	return self.Runtime.NavigationServer2D_agent_get_velocity(self, agent)
}
func (self NavigationServer2D) AgentSetPosition(agent RID, position Vector2) {
	self.Runtime.NavigationServer2D_agent_set_position(self, agent, position)
}
func (self NavigationServer2D) AgentGetPosition(agent RID) Vector2 {
	return self.Runtime.NavigationServer2D_agent_get_position(self, agent)
}
func (self NavigationServer2D) AgentIsMapChanged(agent RID) bool {
	return self.Runtime.NavigationServer2D_agent_is_map_changed(self, agent)
}
func (self NavigationServer2D) AgentSetAvoidanceCallback(agent RID, callback Callable) {
	self.Runtime.NavigationServer2D_agent_set_avoidance_callback(self, agent, callback)
}
func (self NavigationServer2D) AgentHasAvoidanceCallback(agent RID) bool {
	return self.Runtime.NavigationServer2D_agent_has_avoidance_callback(self, agent)
}
func (self NavigationServer2D) AgentSetAvoidanceLayers(agent RID, layers int64) {
	self.Runtime.NavigationServer2D_agent_set_avoidance_layers(self, agent, layers)
}
func (self NavigationServer2D) AgentGetAvoidanceLayers(agent RID) int64 {
	return self.Runtime.NavigationServer2D_agent_get_avoidance_layers(self, agent)
}
func (self NavigationServer2D) AgentSetAvoidanceMask(agent RID, mask int64) {
	self.Runtime.NavigationServer2D_agent_set_avoidance_mask(self, agent, mask)
}
func (self NavigationServer2D) AgentGetAvoidanceMask(agent RID) int64 {
	return self.Runtime.NavigationServer2D_agent_get_avoidance_mask(self, agent)
}
func (self NavigationServer2D) AgentSetAvoidancePriority(agent RID, priority Float) {
	self.Runtime.NavigationServer2D_agent_set_avoidance_priority(self, agent, priority)
}
func (self NavigationServer2D) AgentGetAvoidancePriority(agent RID) Float {
	return self.Runtime.NavigationServer2D_agent_get_avoidance_priority(self, agent)
}
func (self NavigationServer2D) ObstacleCreate() RID {
	return self.Runtime.NavigationServer2D_obstacle_create(self)
}
func (self NavigationServer2D) ObstacleSetAvoidanceEnabled(obstacle RID, enabled bool) {
	self.Runtime.NavigationServer2D_obstacle_set_avoidance_enabled(self, obstacle, enabled)
}
func (self NavigationServer2D) ObstacleGetAvoidanceEnabled(obstacle RID) bool {
	return self.Runtime.NavigationServer2D_obstacle_get_avoidance_enabled(self, obstacle)
}
func (self NavigationServer2D) ObstacleSetMap(obstacle RID, mapping RID) {
	self.Runtime.NavigationServer2D_obstacle_set_map(self, obstacle, mapping)
}
func (self NavigationServer2D) ObstacleGetMap(obstacle RID) RID {
	return self.Runtime.NavigationServer2D_obstacle_get_map(self, obstacle)
}
func (self NavigationServer2D) ObstacleSetPaused(obstacle RID, paused bool) {
	self.Runtime.NavigationServer2D_obstacle_set_paused(self, obstacle, paused)
}
func (self NavigationServer2D) ObstacleGetPaused(obstacle RID) bool {
	return self.Runtime.NavigationServer2D_obstacle_get_paused(self, obstacle)
}
func (self NavigationServer2D) ObstacleSetRadius(obstacle RID, radius Float) {
	self.Runtime.NavigationServer2D_obstacle_set_radius(self, obstacle, radius)
}
func (self NavigationServer2D) ObstacleGetRadius(obstacle RID) Float {
	return self.Runtime.NavigationServer2D_obstacle_get_radius(self, obstacle)
}
func (self NavigationServer2D) ObstacleSetVelocity(obstacle RID, velocity Vector2) {
	self.Runtime.NavigationServer2D_obstacle_set_velocity(self, obstacle, velocity)
}
func (self NavigationServer2D) ObstacleGetVelocity(obstacle RID) Vector2 {
	return self.Runtime.NavigationServer2D_obstacle_get_velocity(self, obstacle)
}
func (self NavigationServer2D) ObstacleSetPosition(obstacle RID, position Vector2) {
	self.Runtime.NavigationServer2D_obstacle_set_position(self, obstacle, position)
}
func (self NavigationServer2D) ObstacleGetPosition(obstacle RID) Vector2 {
	return self.Runtime.NavigationServer2D_obstacle_get_position(self, obstacle)
}
func (self NavigationServer2D) ObstacleSetVertices(obstacle RID, vertices PackedVector2Array) {
	self.Runtime.NavigationServer2D_obstacle_set_vertices(self, obstacle, vertices)
}
func (self NavigationServer2D) ObstacleGetVertices(obstacle RID) PackedVector2Array {
	return self.Runtime.NavigationServer2D_obstacle_get_vertices(self, obstacle)
}
func (self NavigationServer2D) ObstacleSetAvoidanceLayers(obstacle RID, layers int64) {
	self.Runtime.NavigationServer2D_obstacle_set_avoidance_layers(self, obstacle, layers)
}
func (self NavigationServer2D) ObstacleGetAvoidanceLayers(obstacle RID) int64 {
	return self.Runtime.NavigationServer2D_obstacle_get_avoidance_layers(self, obstacle)
}
func (self NavigationServer2D) ParseSourceGeometryData(navigation_polygon NavigationPolygon, source_geometry_data NavigationMeshSourceGeometryData2D, root_node Node, callback Callable) {
	self.Runtime.NavigationServer2D_parse_source_geometry_data(self, navigation_polygon, source_geometry_data, root_node, callback)
}
func (self NavigationServer2D) BakeFromSourceGeometryData(navigation_polygon NavigationPolygon, source_geometry_data NavigationMeshSourceGeometryData2D, callback Callable) {
	self.Runtime.NavigationServer2D_bake_from_source_geometry_data(self, navigation_polygon, source_geometry_data, callback)
}
func (self NavigationServer2D) BakeFromSourceGeometryDataAsync(navigation_polygon NavigationPolygon, source_geometry_data NavigationMeshSourceGeometryData2D, callback Callable) {
	self.Runtime.NavigationServer2D_bake_from_source_geometry_data_async(self, navigation_polygon, source_geometry_data, callback)
}
func (self NavigationServer2D) FreeRid(rid RID) {
	self.Runtime.NavigationServer2D_free_rid(self, rid)
}
func (self NavigationServer2D) SetDebugEnabled(enabled bool) {
	self.Runtime.NavigationServer2D_set_debug_enabled(self, enabled)
}
func (self NavigationServer2D) GetDebugEnabled() bool {
	return self.Runtime.NavigationServer2D_get_debug_enabled(self)
}

type extendsNavigationServer3D struct {
	_ [0]*extendsNavigationServer3D
	class
}

func (self NavigationServer3D) Object() Object {
	var parent Object
	parent.class = self.class
	return parent
}
func (self NavigationServer3D) GetMaps() ArrayOf[RID] {
	return self.Runtime.NavigationServer3D_get_maps(self)
}
func (self NavigationServer3D) MapCreate() RID {
	return self.Runtime.NavigationServer3D_map_create(self)
}
func (self NavigationServer3D) MapSetActive(mapping RID, active bool) {
	self.Runtime.NavigationServer3D_map_set_active(self, mapping, active)
}
func (self NavigationServer3D) MapIsActive(mapping RID) bool {
	return self.Runtime.NavigationServer3D_map_is_active(self, mapping)
}
func (self NavigationServer3D) MapSetUp(mapping RID, up Vector3) {
	self.Runtime.NavigationServer3D_map_set_up(self, mapping, up)
}
func (self NavigationServer3D) MapGetUp(mapping RID) Vector3 {
	return self.Runtime.NavigationServer3D_map_get_up(self, mapping)
}
func (self NavigationServer3D) MapSetCellSize(mapping RID, cell_size Float) {
	self.Runtime.NavigationServer3D_map_set_cell_size(self, mapping, cell_size)
}
func (self NavigationServer3D) MapGetCellSize(mapping RID) Float {
	return self.Runtime.NavigationServer3D_map_get_cell_size(self, mapping)
}
func (self NavigationServer3D) MapSetCellHeight(mapping RID, cell_height Float) {
	self.Runtime.NavigationServer3D_map_set_cell_height(self, mapping, cell_height)
}
func (self NavigationServer3D) MapGetCellHeight(mapping RID) Float {
	return self.Runtime.NavigationServer3D_map_get_cell_height(self, mapping)
}
func (self NavigationServer3D) MapSetUseEdgeConnections(mapping RID, enabled bool) {
	self.Runtime.NavigationServer3D_map_set_use_edge_connections(self, mapping, enabled)
}
func (self NavigationServer3D) MapGetUseEdgeConnections(mapping RID) bool {
	return self.Runtime.NavigationServer3D_map_get_use_edge_connections(self, mapping)
}
func (self NavigationServer3D) MapSetEdgeConnectionMargin(mapping RID, margin Float) {
	self.Runtime.NavigationServer3D_map_set_edge_connection_margin(self, mapping, margin)
}
func (self NavigationServer3D) MapGetEdgeConnectionMargin(mapping RID) Float {
	return self.Runtime.NavigationServer3D_map_get_edge_connection_margin(self, mapping)
}
func (self NavigationServer3D) MapSetLinkConnectionRadius(mapping RID, radius Float) {
	self.Runtime.NavigationServer3D_map_set_link_connection_radius(self, mapping, radius)
}
func (self NavigationServer3D) MapGetLinkConnectionRadius(mapping RID) Float {
	return self.Runtime.NavigationServer3D_map_get_link_connection_radius(self, mapping)
}
func (self NavigationServer3D) MapGetPath(mapping RID, origin Vector3, destination Vector3, optimize bool, navigation_layers int64) PackedVector3Array {
	return self.Runtime.NavigationServer3D_map_get_path(self, mapping, origin, destination, optimize, navigation_layers)
}
func (self NavigationServer3D) MapGetClosestPointToSegment(mapping RID, start Vector3, end Vector3, use_collision bool) Vector3 {
	return self.Runtime.NavigationServer3D_map_get_closest_point_to_segment(self, mapping, start, end, use_collision)
}
func (self NavigationServer3D) MapGetClosestPoint(mapping RID, to_point Vector3) Vector3 {
	return self.Runtime.NavigationServer3D_map_get_closest_point(self, mapping, to_point)
}
func (self NavigationServer3D) MapGetClosestPointNormal(mapping RID, to_point Vector3) Vector3 {
	return self.Runtime.NavigationServer3D_map_get_closest_point_normal(self, mapping, to_point)
}
func (self NavigationServer3D) MapGetClosestPointOwner(mapping RID, to_point Vector3) RID {
	return self.Runtime.NavigationServer3D_map_get_closest_point_owner(self, mapping, to_point)
}
func (self NavigationServer3D) MapGetLinks(mapping RID) ArrayOf[RID] {
	return self.Runtime.NavigationServer3D_map_get_links(self, mapping)
}
func (self NavigationServer3D) MapGetRegions(mapping RID) ArrayOf[RID] {
	return self.Runtime.NavigationServer3D_map_get_regions(self, mapping)
}
func (self NavigationServer3D) MapGetAgents(mapping RID) ArrayOf[RID] {
	return self.Runtime.NavigationServer3D_map_get_agents(self, mapping)
}
func (self NavigationServer3D) MapGetObstacles(mapping RID) ArrayOf[RID] {
	return self.Runtime.NavigationServer3D_map_get_obstacles(self, mapping)
}
func (self NavigationServer3D) MapForceUpdate(mapping RID) {
	self.Runtime.NavigationServer3D_map_force_update(self, mapping)
}
func (self NavigationServer3D) MapGetRandomPoint(mapping RID, navigation_layers int64, uniformly bool) Vector3 {
	return self.Runtime.NavigationServer3D_map_get_random_point(self, mapping, navigation_layers, uniformly)
}
func (self NavigationServer3D) QueryPath(parameters NavigationPathQueryParameters3D, result NavigationPathQueryResult3D) {
	self.Runtime.NavigationServer3D_query_path(self, parameters, result)
}
func (self NavigationServer3D) RegionCreate() RID {
	return self.Runtime.NavigationServer3D_region_create(self)
}
func (self NavigationServer3D) RegionSetEnabled(region RID, enabled bool) {
	self.Runtime.NavigationServer3D_region_set_enabled(self, region, enabled)
}
func (self NavigationServer3D) RegionGetEnabled(region RID) bool {
	return self.Runtime.NavigationServer3D_region_get_enabled(self, region)
}
func (self NavigationServer3D) RegionSetUseEdgeConnections(region RID, enabled bool) {
	self.Runtime.NavigationServer3D_region_set_use_edge_connections(self, region, enabled)
}
func (self NavigationServer3D) RegionGetUseEdgeConnections(region RID) bool {
	return self.Runtime.NavigationServer3D_region_get_use_edge_connections(self, region)
}
func (self NavigationServer3D) RegionSetEnterCost(region RID, enter_cost Float) {
	self.Runtime.NavigationServer3D_region_set_enter_cost(self, region, enter_cost)
}
func (self NavigationServer3D) RegionGetEnterCost(region RID) Float {
	return self.Runtime.NavigationServer3D_region_get_enter_cost(self, region)
}
func (self NavigationServer3D) RegionSetTravelCost(region RID, travel_cost Float) {
	self.Runtime.NavigationServer3D_region_set_travel_cost(self, region, travel_cost)
}
func (self NavigationServer3D) RegionGetTravelCost(region RID) Float {
	return self.Runtime.NavigationServer3D_region_get_travel_cost(self, region)
}
func (self NavigationServer3D) RegionSetOwnerId(region RID, owner_id int64) {
	self.Runtime.NavigationServer3D_region_set_owner_id(self, region, owner_id)
}
func (self NavigationServer3D) RegionGetOwnerId(region RID) int64 {
	return self.Runtime.NavigationServer3D_region_get_owner_id(self, region)
}
func (self NavigationServer3D) RegionOwnsPoint(region RID, point Vector3) bool {
	return self.Runtime.NavigationServer3D_region_owns_point(self, region, point)
}
func (self NavigationServer3D) RegionSetMap(region RID, mapping RID) {
	self.Runtime.NavigationServer3D_region_set_map(self, region, mapping)
}
func (self NavigationServer3D) RegionGetMap(region RID) RID {
	return self.Runtime.NavigationServer3D_region_get_map(self, region)
}
func (self NavigationServer3D) RegionSetNavigationLayers(region RID, navigation_layers int64) {
	self.Runtime.NavigationServer3D_region_set_navigation_layers(self, region, navigation_layers)
}
func (self NavigationServer3D) RegionGetNavigationLayers(region RID) int64 {
	return self.Runtime.NavigationServer3D_region_get_navigation_layers(self, region)
}
func (self NavigationServer3D) RegionSetTransform(region RID, transform Transform3D) {
	self.Runtime.NavigationServer3D_region_set_transform(self, region, transform)
}
func (self NavigationServer3D) RegionGetTransform(region RID) Transform3D {
	return self.Runtime.NavigationServer3D_region_get_transform(self, region)
}
func (self NavigationServer3D) RegionSetNavigationMesh(region RID, navigation_mesh NavigationMesh) {
	self.Runtime.NavigationServer3D_region_set_navigation_mesh(self, region, navigation_mesh)
}
func (self NavigationServer3D) RegionBakeNavigationMesh(navigation_mesh NavigationMesh, root_node Node) {
	self.Runtime.NavigationServer3D_region_bake_navigation_mesh(self, navigation_mesh, root_node)
}
func (self NavigationServer3D) RegionGetConnectionsCount(region RID) int64 {
	return self.Runtime.NavigationServer3D_region_get_connections_count(self, region)
}
func (self NavigationServer3D) RegionGetConnectionPathwayStart(region RID, connection int64) Vector3 {
	return self.Runtime.NavigationServer3D_region_get_connection_pathway_start(self, region, connection)
}
func (self NavigationServer3D) RegionGetConnectionPathwayEnd(region RID, connection int64) Vector3 {
	return self.Runtime.NavigationServer3D_region_get_connection_pathway_end(self, region, connection)
}
func (self NavigationServer3D) RegionGetRandomPoint(region RID, navigation_layers int64, uniformly bool) Vector3 {
	return self.Runtime.NavigationServer3D_region_get_random_point(self, region, navigation_layers, uniformly)
}
func (self NavigationServer3D) LinkCreate() RID {
	return self.Runtime.NavigationServer3D_link_create(self)
}
func (self NavigationServer3D) LinkSetMap(link RID, mapping RID) {
	self.Runtime.NavigationServer3D_link_set_map(self, link, mapping)
}
func (self NavigationServer3D) LinkGetMap(link RID) RID {
	return self.Runtime.NavigationServer3D_link_get_map(self, link)
}
func (self NavigationServer3D) LinkSetEnabled(link RID, enabled bool) {
	self.Runtime.NavigationServer3D_link_set_enabled(self, link, enabled)
}
func (self NavigationServer3D) LinkGetEnabled(link RID) bool {
	return self.Runtime.NavigationServer3D_link_get_enabled(self, link)
}
func (self NavigationServer3D) LinkSetBidirectional(link RID, bidirectional bool) {
	self.Runtime.NavigationServer3D_link_set_bidirectional(self, link, bidirectional)
}
func (self NavigationServer3D) LinkIsBidirectional(link RID) bool {
	return self.Runtime.NavigationServer3D_link_is_bidirectional(self, link)
}
func (self NavigationServer3D) LinkSetNavigationLayers(link RID, navigation_layers int64) {
	self.Runtime.NavigationServer3D_link_set_navigation_layers(self, link, navigation_layers)
}
func (self NavigationServer3D) LinkGetNavigationLayers(link RID) int64 {
	return self.Runtime.NavigationServer3D_link_get_navigation_layers(self, link)
}
func (self NavigationServer3D) LinkSetStartPosition(link RID, position Vector3) {
	self.Runtime.NavigationServer3D_link_set_start_position(self, link, position)
}
func (self NavigationServer3D) LinkGetStartPosition(link RID) Vector3 {
	return self.Runtime.NavigationServer3D_link_get_start_position(self, link)
}
func (self NavigationServer3D) LinkSetEndPosition(link RID, position Vector3) {
	self.Runtime.NavigationServer3D_link_set_end_position(self, link, position)
}
func (self NavigationServer3D) LinkGetEndPosition(link RID) Vector3 {
	return self.Runtime.NavigationServer3D_link_get_end_position(self, link)
}
func (self NavigationServer3D) LinkSetEnterCost(link RID, enter_cost Float) {
	self.Runtime.NavigationServer3D_link_set_enter_cost(self, link, enter_cost)
}
func (self NavigationServer3D) LinkGetEnterCost(link RID) Float {
	return self.Runtime.NavigationServer3D_link_get_enter_cost(self, link)
}
func (self NavigationServer3D) LinkSetTravelCost(link RID, travel_cost Float) {
	self.Runtime.NavigationServer3D_link_set_travel_cost(self, link, travel_cost)
}
func (self NavigationServer3D) LinkGetTravelCost(link RID) Float {
	return self.Runtime.NavigationServer3D_link_get_travel_cost(self, link)
}
func (self NavigationServer3D) LinkSetOwnerId(link RID, owner_id int64) {
	self.Runtime.NavigationServer3D_link_set_owner_id(self, link, owner_id)
}
func (self NavigationServer3D) LinkGetOwnerId(link RID) int64 {
	return self.Runtime.NavigationServer3D_link_get_owner_id(self, link)
}
func (self NavigationServer3D) AgentCreate() RID {
	return self.Runtime.NavigationServer3D_agent_create(self)
}
func (self NavigationServer3D) AgentSetAvoidanceEnabled(agent RID, enabled bool) {
	self.Runtime.NavigationServer3D_agent_set_avoidance_enabled(self, agent, enabled)
}
func (self NavigationServer3D) AgentGetAvoidanceEnabled(agent RID) bool {
	return self.Runtime.NavigationServer3D_agent_get_avoidance_enabled(self, agent)
}
func (self NavigationServer3D) AgentSetUse3dAvoidance(agent RID, enabled bool) {
	self.Runtime.NavigationServer3D_agent_set_use_3d_avoidance(self, agent, enabled)
}
func (self NavigationServer3D) AgentGetUse3dAvoidance(agent RID) bool {
	return self.Runtime.NavigationServer3D_agent_get_use_3d_avoidance(self, agent)
}
func (self NavigationServer3D) AgentSetMap(agent RID, mapping RID) {
	self.Runtime.NavigationServer3D_agent_set_map(self, agent, mapping)
}
func (self NavigationServer3D) AgentGetMap(agent RID) RID {
	return self.Runtime.NavigationServer3D_agent_get_map(self, agent)
}
func (self NavigationServer3D) AgentSetPaused(agent RID, paused bool) {
	self.Runtime.NavigationServer3D_agent_set_paused(self, agent, paused)
}
func (self NavigationServer3D) AgentGetPaused(agent RID) bool {
	return self.Runtime.NavigationServer3D_agent_get_paused(self, agent)
}
func (self NavigationServer3D) AgentSetNeighborDistance(agent RID, distance Float) {
	self.Runtime.NavigationServer3D_agent_set_neighbor_distance(self, agent, distance)
}
func (self NavigationServer3D) AgentGetNeighborDistance(agent RID) Float {
	return self.Runtime.NavigationServer3D_agent_get_neighbor_distance(self, agent)
}
func (self NavigationServer3D) AgentSetMaxNeighbors(agent RID, count int64) {
	self.Runtime.NavigationServer3D_agent_set_max_neighbors(self, agent, count)
}
func (self NavigationServer3D) AgentGetMaxNeighbors(agent RID) int64 {
	return self.Runtime.NavigationServer3D_agent_get_max_neighbors(self, agent)
}
func (self NavigationServer3D) AgentSetTimeHorizonAgents(agent RID, time_horizon Float) {
	self.Runtime.NavigationServer3D_agent_set_time_horizon_agents(self, agent, time_horizon)
}
func (self NavigationServer3D) AgentGetTimeHorizonAgents(agent RID) Float {
	return self.Runtime.NavigationServer3D_agent_get_time_horizon_agents(self, agent)
}
func (self NavigationServer3D) AgentSetTimeHorizonObstacles(agent RID, time_horizon Float) {
	self.Runtime.NavigationServer3D_agent_set_time_horizon_obstacles(self, agent, time_horizon)
}
func (self NavigationServer3D) AgentGetTimeHorizonObstacles(agent RID) Float {
	return self.Runtime.NavigationServer3D_agent_get_time_horizon_obstacles(self, agent)
}
func (self NavigationServer3D) AgentSetRadius(agent RID, radius Float) {
	self.Runtime.NavigationServer3D_agent_set_radius(self, agent, radius)
}
func (self NavigationServer3D) AgentGetRadius(agent RID) Float {
	return self.Runtime.NavigationServer3D_agent_get_radius(self, agent)
}
func (self NavigationServer3D) AgentSetHeight(agent RID, height Float) {
	self.Runtime.NavigationServer3D_agent_set_height(self, agent, height)
}
func (self NavigationServer3D) AgentGetHeight(agent RID) Float {
	return self.Runtime.NavigationServer3D_agent_get_height(self, agent)
}
func (self NavigationServer3D) AgentSetMaxSpeed(agent RID, max_speed Float) {
	self.Runtime.NavigationServer3D_agent_set_max_speed(self, agent, max_speed)
}
func (self NavigationServer3D) AgentGetMaxSpeed(agent RID) Float {
	return self.Runtime.NavigationServer3D_agent_get_max_speed(self, agent)
}
func (self NavigationServer3D) AgentSetVelocityForced(agent RID, velocity Vector3) {
	self.Runtime.NavigationServer3D_agent_set_velocity_forced(self, agent, velocity)
}
func (self NavigationServer3D) AgentSetVelocity(agent RID, velocity Vector3) {
	self.Runtime.NavigationServer3D_agent_set_velocity(self, agent, velocity)
}
func (self NavigationServer3D) AgentGetVelocity(agent RID) Vector3 {
	return self.Runtime.NavigationServer3D_agent_get_velocity(self, agent)
}
func (self NavigationServer3D) AgentSetPosition(agent RID, position Vector3) {
	self.Runtime.NavigationServer3D_agent_set_position(self, agent, position)
}
func (self NavigationServer3D) AgentGetPosition(agent RID) Vector3 {
	return self.Runtime.NavigationServer3D_agent_get_position(self, agent)
}
func (self NavigationServer3D) AgentIsMapChanged(agent RID) bool {
	return self.Runtime.NavigationServer3D_agent_is_map_changed(self, agent)
}
func (self NavigationServer3D) AgentSetAvoidanceCallback(agent RID, callback Callable) {
	self.Runtime.NavigationServer3D_agent_set_avoidance_callback(self, agent, callback)
}
func (self NavigationServer3D) AgentHasAvoidanceCallback(agent RID) bool {
	return self.Runtime.NavigationServer3D_agent_has_avoidance_callback(self, agent)
}
func (self NavigationServer3D) AgentSetAvoidanceLayers(agent RID, layers int64) {
	self.Runtime.NavigationServer3D_agent_set_avoidance_layers(self, agent, layers)
}
func (self NavigationServer3D) AgentGetAvoidanceLayers(agent RID) int64 {
	return self.Runtime.NavigationServer3D_agent_get_avoidance_layers(self, agent)
}
func (self NavigationServer3D) AgentSetAvoidanceMask(agent RID, mask int64) {
	self.Runtime.NavigationServer3D_agent_set_avoidance_mask(self, agent, mask)
}
func (self NavigationServer3D) AgentGetAvoidanceMask(agent RID) int64 {
	return self.Runtime.NavigationServer3D_agent_get_avoidance_mask(self, agent)
}
func (self NavigationServer3D) AgentSetAvoidancePriority(agent RID, priority Float) {
	self.Runtime.NavigationServer3D_agent_set_avoidance_priority(self, agent, priority)
}
func (self NavigationServer3D) AgentGetAvoidancePriority(agent RID) Float {
	return self.Runtime.NavigationServer3D_agent_get_avoidance_priority(self, agent)
}
func (self NavigationServer3D) ObstacleCreate() RID {
	return self.Runtime.NavigationServer3D_obstacle_create(self)
}
func (self NavigationServer3D) ObstacleSetAvoidanceEnabled(obstacle RID, enabled bool) {
	self.Runtime.NavigationServer3D_obstacle_set_avoidance_enabled(self, obstacle, enabled)
}
func (self NavigationServer3D) ObstacleGetAvoidanceEnabled(obstacle RID) bool {
	return self.Runtime.NavigationServer3D_obstacle_get_avoidance_enabled(self, obstacle)
}
func (self NavigationServer3D) ObstacleSetUse3dAvoidance(obstacle RID, enabled bool) {
	self.Runtime.NavigationServer3D_obstacle_set_use_3d_avoidance(self, obstacle, enabled)
}
func (self NavigationServer3D) ObstacleGetUse3dAvoidance(obstacle RID) bool {
	return self.Runtime.NavigationServer3D_obstacle_get_use_3d_avoidance(self, obstacle)
}
func (self NavigationServer3D) ObstacleSetMap(obstacle RID, mapping RID) {
	self.Runtime.NavigationServer3D_obstacle_set_map(self, obstacle, mapping)
}
func (self NavigationServer3D) ObstacleGetMap(obstacle RID) RID {
	return self.Runtime.NavigationServer3D_obstacle_get_map(self, obstacle)
}
func (self NavigationServer3D) ObstacleSetPaused(obstacle RID, paused bool) {
	self.Runtime.NavigationServer3D_obstacle_set_paused(self, obstacle, paused)
}
func (self NavigationServer3D) ObstacleGetPaused(obstacle RID) bool {
	return self.Runtime.NavigationServer3D_obstacle_get_paused(self, obstacle)
}
func (self NavigationServer3D) ObstacleSetRadius(obstacle RID, radius Float) {
	self.Runtime.NavigationServer3D_obstacle_set_radius(self, obstacle, radius)
}
func (self NavigationServer3D) ObstacleGetRadius(obstacle RID) Float {
	return self.Runtime.NavigationServer3D_obstacle_get_radius(self, obstacle)
}
func (self NavigationServer3D) ObstacleSetHeight(obstacle RID, height Float) {
	self.Runtime.NavigationServer3D_obstacle_set_height(self, obstacle, height)
}
func (self NavigationServer3D) ObstacleGetHeight(obstacle RID) Float {
	return self.Runtime.NavigationServer3D_obstacle_get_height(self, obstacle)
}
func (self NavigationServer3D) ObstacleSetVelocity(obstacle RID, velocity Vector3) {
	self.Runtime.NavigationServer3D_obstacle_set_velocity(self, obstacle, velocity)
}
func (self NavigationServer3D) ObstacleGetVelocity(obstacle RID) Vector3 {
	return self.Runtime.NavigationServer3D_obstacle_get_velocity(self, obstacle)
}
func (self NavigationServer3D) ObstacleSetPosition(obstacle RID, position Vector3) {
	self.Runtime.NavigationServer3D_obstacle_set_position(self, obstacle, position)
}
func (self NavigationServer3D) ObstacleGetPosition(obstacle RID) Vector3 {
	return self.Runtime.NavigationServer3D_obstacle_get_position(self, obstacle)
}
func (self NavigationServer3D) ObstacleSetVertices(obstacle RID, vertices PackedVector3Array) {
	self.Runtime.NavigationServer3D_obstacle_set_vertices(self, obstacle, vertices)
}
func (self NavigationServer3D) ObstacleGetVertices(obstacle RID) PackedVector3Array {
	return self.Runtime.NavigationServer3D_obstacle_get_vertices(self, obstacle)
}
func (self NavigationServer3D) ObstacleSetAvoidanceLayers(obstacle RID, layers int64) {
	self.Runtime.NavigationServer3D_obstacle_set_avoidance_layers(self, obstacle, layers)
}
func (self NavigationServer3D) ObstacleGetAvoidanceLayers(obstacle RID) int64 {
	return self.Runtime.NavigationServer3D_obstacle_get_avoidance_layers(self, obstacle)
}
func (self NavigationServer3D) ParseSourceGeometryData(navigation_mesh NavigationMesh, source_geometry_data NavigationMeshSourceGeometryData3D, root_node Node, callback Callable) {
	self.Runtime.NavigationServer3D_parse_source_geometry_data(self, navigation_mesh, source_geometry_data, root_node, callback)
}
func (self NavigationServer3D) BakeFromSourceGeometryData(navigation_mesh NavigationMesh, source_geometry_data NavigationMeshSourceGeometryData3D, callback Callable) {
	self.Runtime.NavigationServer3D_bake_from_source_geometry_data(self, navigation_mesh, source_geometry_data, callback)
}
func (self NavigationServer3D) BakeFromSourceGeometryDataAsync(navigation_mesh NavigationMesh, source_geometry_data NavigationMeshSourceGeometryData3D, callback Callable) {
	self.Runtime.NavigationServer3D_bake_from_source_geometry_data_async(self, navigation_mesh, source_geometry_data, callback)
}
func (self NavigationServer3D) FreeRid(rid RID) {
	self.Runtime.NavigationServer3D_free_rid(self, rid)
}
func (self NavigationServer3D) SetActive(active bool) {
	self.Runtime.NavigationServer3D_set_active(self, active)
}
func (self NavigationServer3D) SetDebugEnabled(enabled bool) {
	self.Runtime.NavigationServer3D_set_debug_enabled(self, enabled)
}
func (self NavigationServer3D) GetDebugEnabled() bool {
	return self.Runtime.NavigationServer3D_get_debug_enabled(self)
}
func (self NavigationServer3D) GetProcessInfo(process_info NavigationServer3DProcessInfo) int64 {
	return self.Runtime.NavigationServer3D_get_process_info(self, process_info)
}

type extendsNinePatchRect struct {
	_ [0]*extendsNinePatchRect
	class
}

func (self NinePatchRect) Control() Control {
	var parent Control
	parent.class = self.class
	return parent
}
func (self NinePatchRect) SetTexture(texture Texture2D) {
	self.Runtime.NinePatchRect_set_texture(self, texture)
}
func (self NinePatchRect) GetTexture() Texture2D {
	return self.Runtime.NinePatchRect_get_texture(self)
}
func (self NinePatchRect) SetPatchMargin(margin Side, value int64) {
	self.Runtime.NinePatchRect_set_patch_margin(self, margin, value)
}
func (self NinePatchRect) GetPatchMargin(margin Side) int64 {
	return self.Runtime.NinePatchRect_get_patch_margin(self, margin)
}
func (self NinePatchRect) SetRegionRect(rect Rect2) {
	self.Runtime.NinePatchRect_set_region_rect(self, rect)
}
func (self NinePatchRect) GetRegionRect() Rect2 {
	return self.Runtime.NinePatchRect_get_region_rect(self)
}
func (self NinePatchRect) SetDrawCenter(draw_center bool) {
	self.Runtime.NinePatchRect_set_draw_center(self, draw_center)
}
func (self NinePatchRect) IsDrawCenterEnabled() bool {
	return self.Runtime.NinePatchRect_is_draw_center_enabled(self)
}
func (self NinePatchRect) SetHAxisStretchMode(mode NinePatchRectAxisStretchMode) {
	self.Runtime.NinePatchRect_set_h_axis_stretch_mode(self, mode)
}
func (self NinePatchRect) GetHAxisStretchMode() NinePatchRectAxisStretchMode {
	return self.Runtime.NinePatchRect_get_h_axis_stretch_mode(self)
}
func (self NinePatchRect) SetVAxisStretchMode(mode NinePatchRectAxisStretchMode) {
	self.Runtime.NinePatchRect_set_v_axis_stretch_mode(self, mode)
}
func (self NinePatchRect) GetVAxisStretchMode() NinePatchRectAxisStretchMode {
	return self.Runtime.NinePatchRect_get_v_axis_stretch_mode(self)
}

type extendsNode struct {
	_ [0]*extendsNode
	class
}

func (self Node) Object() Object { var parent Object; parent.class = self.class; return parent }
func (self Node) PrintOrphanNodes() {
	self.Runtime.Node_print_orphan_nodes(self)
}
func (self Node) AddSibling(sibling Node, force_readable_name bool) {
	self.Runtime.Node_add_sibling(self, sibling, force_readable_name)
}
func (self Node) SetName(name string) {
	self.Runtime.Node_set_name(self, name)
}
func (self Node) GetName() string {
	return self.Runtime.Node_get_name(self)
}
func (self Node) AddChild(node Node, force_readable_name bool, internal NodeInternalMode) {
	self.Runtime.Node_add_child(self, node, force_readable_name, internal)
}
func (self Node) RemoveChild(node Node) {
	self.Runtime.Node_remove_child(self, node)
}
func (self Node) Reparent(new_parent Node, keep_global_transform bool) {
	self.Runtime.Node_reparent(self, new_parent, keep_global_transform)
}
func (self Node) GetChildCount(include_internal bool) int64 {
	return self.Runtime.Node_get_child_count(self, include_internal)
}
func (self Node) GetChildren(include_internal bool) ArrayOf[Node] {
	return self.Runtime.Node_get_children(self, include_internal)
}
func (self Node) GetChild(idx int64, include_internal bool) Node {
	return self.Runtime.Node_get_child(self, idx, include_internal)
}
func (self Node) HasNode(path NodePath) bool {
	return self.Runtime.Node_has_node(self, path)
}
func (self Node) GetNode(path NodePath) Node {
	return self.Runtime.Node_get_node(self, path)
}
func (self Node) GetNodeOrNull(path NodePath) Node {
	return self.Runtime.Node_get_node_or_null(self, path)
}
func (self Node) GetParent() Node {
	return self.Runtime.Node_get_parent(self)
}
func (self Node) FindChild(pattern string, recursive bool, owned bool) Node {
	return self.Runtime.Node_find_child(self, pattern, recursive, owned)
}
func (self Node) FindChildren(pattern string, atype string, recursive bool, owned bool) ArrayOf[Node] {
	return self.Runtime.Node_find_children(self, pattern, atype, recursive, owned)
}
func (self Node) FindParent(pattern string) Node {
	return self.Runtime.Node_find_parent(self, pattern)
}
func (self Node) HasNodeAndResource(path NodePath) bool {
	return self.Runtime.Node_has_node_and_resource(self, path)
}
func (self Node) GetNodeAndResource(path NodePath) Array {
	return self.Runtime.Node_get_node_and_resource(self, path)
}
func (self Node) IsInsideTree() bool {
	return self.Runtime.Node_is_inside_tree(self)
}
func (self Node) IsAncestorOf(node Node) bool {
	return self.Runtime.Node_is_ancestor_of(self, node)
}
func (self Node) IsGreaterThan(node Node) bool {
	return self.Runtime.Node_is_greater_than(self, node)
}
func (self Node) GetPath() NodePath {
	return self.Runtime.Node_get_path(self)
}
func (self Node) GetPathTo(node Node, use_unique_path bool) NodePath {
	return self.Runtime.Node_get_path_to(self, node, use_unique_path)
}
func (self Node) AddToGroup(group string, persistent bool) {
	self.Runtime.Node_add_to_group(self, group, persistent)
}
func (self Node) RemoveFromGroup(group string) {
	self.Runtime.Node_remove_from_group(self, group)
}
func (self Node) IsInGroup(group string) bool {
	return self.Runtime.Node_is_in_group(self, group)
}
func (self Node) MoveChild(child_node Node, to_index int64) {
	self.Runtime.Node_move_child(self, child_node, to_index)
}
func (self Node) GetGroups() ArrayOf[string] {
	return self.Runtime.Node_get_groups(self)
}
func (self Node) SetOwner(owner Node) {
	self.Runtime.Node_set_owner(self, owner)
}
func (self Node) GetOwner() Node {
	return self.Runtime.Node_get_owner(self)
}
func (self Node) GetIndex(include_internal bool) int64 {
	return self.Runtime.Node_get_index(self, include_internal)
}
func (self Node) PrintTree() {
	self.Runtime.Node_print_tree(self)
}
func (self Node) PrintTreePretty() {
	self.Runtime.Node_print_tree_pretty(self)
}
func (self Node) GetTreeString() string {
	return self.Runtime.Node_get_tree_string(self)
}
func (self Node) GetTreeStringPretty() string {
	return self.Runtime.Node_get_tree_string_pretty(self)
}
func (self Node) SetSceneFilePath(scene_file_path string) {
	self.Runtime.Node_set_scene_file_path(self, scene_file_path)
}
func (self Node) GetSceneFilePath() string {
	return self.Runtime.Node_get_scene_file_path(self)
}
func (self Node) PropagateNotification(what int64) {
	self.Runtime.Node_propagate_notification(self, what)
}
func (self Node) PropagateCall(method string, args Array, parent_first bool) {
	self.Runtime.Node_propagate_call(self, method, args, parent_first)
}
func (self Node) SetPhysicsProcess(enable bool) {
	self.Runtime.Node_set_physics_process(self, enable)
}
func (self Node) GetPhysicsProcessDeltaTime() Float {
	return self.Runtime.Node_get_physics_process_delta_time(self)
}
func (self Node) IsPhysicsProcessing() bool {
	return self.Runtime.Node_is_physics_processing(self)
}
func (self Node) GetProcessDeltaTime() Float {
	return self.Runtime.Node_get_process_delta_time(self)
}
func (self Node) SetProcess(enable bool) {
	self.Runtime.Node_set_process(self, enable)
}
func (self Node) SetProcessPriority(priority int64) {
	self.Runtime.Node_set_process_priority(self, priority)
}
func (self Node) GetProcessPriority() int64 {
	return self.Runtime.Node_get_process_priority(self)
}
func (self Node) SetPhysicsProcessPriority(priority int64) {
	self.Runtime.Node_set_physics_process_priority(self, priority)
}
func (self Node) GetPhysicsProcessPriority() int64 {
	return self.Runtime.Node_get_physics_process_priority(self)
}
func (self Node) IsProcessing() bool {
	return self.Runtime.Node_is_processing(self)
}
func (self Node) SetProcessInput(enable bool) {
	self.Runtime.Node_set_process_input(self, enable)
}
func (self Node) IsProcessingInput() bool {
	return self.Runtime.Node_is_processing_input(self)
}
func (self Node) SetProcessShortcutInput(enable bool) {
	self.Runtime.Node_set_process_shortcut_input(self, enable)
}
func (self Node) IsProcessingShortcutInput() bool {
	return self.Runtime.Node_is_processing_shortcut_input(self)
}
func (self Node) SetProcessUnhandledInput(enable bool) {
	self.Runtime.Node_set_process_unhandled_input(self, enable)
}
func (self Node) IsProcessingUnhandledInput() bool {
	return self.Runtime.Node_is_processing_unhandled_input(self)
}
func (self Node) SetProcessUnhandledKeyInput(enable bool) {
	self.Runtime.Node_set_process_unhandled_key_input(self, enable)
}
func (self Node) IsProcessingUnhandledKeyInput() bool {
	return self.Runtime.Node_is_processing_unhandled_key_input(self)
}
func (self Node) SetProcessMode(mode NodeProcessMode) {
	self.Runtime.Node_set_process_mode(self, mode)
}
func (self Node) GetProcessMode() NodeProcessMode {
	return self.Runtime.Node_get_process_mode(self)
}
func (self Node) CanProcess() bool {
	return self.Runtime.Node_can_process(self)
}
func (self Node) SetProcessThreadGroup(mode NodeProcessThreadGroup) {
	self.Runtime.Node_set_process_thread_group(self, mode)
}
func (self Node) GetProcessThreadGroup() NodeProcessThreadGroup {
	return self.Runtime.Node_get_process_thread_group(self)
}
func (self Node) SetProcessThreadMessages(flags NodeProcessThreadMessages) {
	self.Runtime.Node_set_process_thread_messages(self, flags)
}
func (self Node) GetProcessThreadMessages() NodeProcessThreadMessages {
	return self.Runtime.Node_get_process_thread_messages(self)
}
func (self Node) SetProcessThreadGroupOrder(order int64) {
	self.Runtime.Node_set_process_thread_group_order(self, order)
}
func (self Node) GetProcessThreadGroupOrder() int64 {
	return self.Runtime.Node_get_process_thread_group_order(self)
}
func (self Node) SetDisplayFolded(fold bool) {
	self.Runtime.Node_set_display_folded(self, fold)
}
func (self Node) IsDisplayedFolded() bool {
	return self.Runtime.Node_is_displayed_folded(self)
}
func (self Node) SetProcessInternal(enable bool) {
	self.Runtime.Node_set_process_internal(self, enable)
}
func (self Node) IsProcessingInternal() bool {
	return self.Runtime.Node_is_processing_internal(self)
}
func (self Node) SetPhysicsProcessInternal(enable bool) {
	self.Runtime.Node_set_physics_process_internal(self, enable)
}
func (self Node) IsPhysicsProcessingInternal() bool {
	return self.Runtime.Node_is_physics_processing_internal(self)
}
func (self Node) GetWindow() Window {
	return self.Runtime.Node_get_window(self)
}
func (self Node) GetLastExclusiveWindow() Window {
	return self.Runtime.Node_get_last_exclusive_window(self)
}
func (self Node) GetTree() SceneTree {
	return self.Runtime.Node_get_tree(self)
}
func (self Node) CreateTween() Tween {
	return self.Runtime.Node_create_tween(self)
}
func (self Node) Duplicate(flags int64) Node {
	return self.Runtime.Node_duplicate(self, flags)
}
func (self Node) ReplaceBy(node Node, keep_groups bool) {
	self.Runtime.Node_replace_by(self, node, keep_groups)
}
func (self Node) SetSceneInstanceLoadPlaceholder(load_placeholder bool) {
	self.Runtime.Node_set_scene_instance_load_placeholder(self, load_placeholder)
}
func (self Node) GetSceneInstanceLoadPlaceholder() bool {
	return self.Runtime.Node_get_scene_instance_load_placeholder(self)
}
func (self Node) SetEditableInstance(node Node, is_editable bool) {
	self.Runtime.Node_set_editable_instance(self, node, is_editable)
}
func (self Node) IsEditableInstance(node Node) bool {
	return self.Runtime.Node_is_editable_instance(self, node)
}
func (self Node) GetViewport() Viewport {
	return self.Runtime.Node_get_viewport(self)
}
func (self Node) QueueFree() {
	self.Runtime.Node_queue_free(self)
}
func (self Node) RequestReady() {
	self.Runtime.Node_request_ready(self)
}
func (self Node) IsNodeReady() bool {
	return self.Runtime.Node_is_node_ready(self)
}
func (self Node) SetMultiplayerAuthority(id int64, recursive bool) {
	self.Runtime.Node_set_multiplayer_authority(self, id, recursive)
}
func (self Node) GetMultiplayerAuthority() int64 {
	return self.Runtime.Node_get_multiplayer_authority(self)
}
func (self Node) IsMultiplayerAuthority() bool {
	return self.Runtime.Node_is_multiplayer_authority(self)
}
func (self Node) GetMultiplayer() MultiplayerAPI {
	return self.Runtime.Node_get_multiplayer(self)
}
func (self Node) RpcConfig(method string, config any) {
	self.Runtime.Node_rpc_config(self, method, config)
}
func (self Node) SetEditorDescription(editor_description string) {
	self.Runtime.Node_set_editor_description(self, editor_description)
}
func (self Node) GetEditorDescription() string {
	return self.Runtime.Node_get_editor_description(self)
}
func (self Node) SetUniqueNameInOwner(enable bool) {
	self.Runtime.Node_set_unique_name_in_owner(self, enable)
}
func (self Node) IsUniqueNameInOwner() bool {
	return self.Runtime.Node_is_unique_name_in_owner(self)
}
func (self Node) Rpc(method string) int64 {
	return self.Runtime.Node_rpc(self, method)
}
func (self Node) RpcId(peer_id int64, method string) int64 {
	return self.Runtime.Node_rpc_id(self, peer_id, method)
}
func (self Node) UpdateConfigurationWarnings() {
	self.Runtime.Node_update_configuration_warnings(self)
}
func (self Node) CallDeferredThreadGroup(method string) any {
	return self.Runtime.Node_call_deferred_thread_group(self, method)
}
func (self Node) SetDeferredThreadGroup(property string, value any) {
	self.Runtime.Node_set_deferred_thread_group(self, property, value)
}
func (self Node) NotifyDeferredThreadGroup(what int64) {
	self.Runtime.Node_notify_deferred_thread_group(self, what)
}
func (self Node) CallThreadSafe(method string) any {
	return self.Runtime.Node_call_thread_safe(self, method)
}
func (self Node) SetThreadSafe(property string, value any) {
	self.Runtime.Node_set_thread_safe(self, property, value)
}
func (self Node) NotifyThreadSafe(what int64) {
	self.Runtime.Node_notify_thread_safe(self, what)
}

type extendsNode2D struct {
	_ [0]*extendsNode2D
	class
}

func (self Node2D) CanvasItem() CanvasItem {
	var parent CanvasItem
	parent.class = self.class
	return parent
}
func (self Node2D) SetPosition(position Vector2) {
	self.Runtime.Node2D_set_position(self, position)
}
func (self Node2D) SetRotation(radians Float) {
	self.Runtime.Node2D_set_rotation(self, radians)
}
func (self Node2D) SetRotationDegrees(degrees Float) {
	self.Runtime.Node2D_set_rotation_degrees(self, degrees)
}
func (self Node2D) SetSkew(radians Float) {
	self.Runtime.Node2D_set_skew(self, radians)
}
func (self Node2D) SetScale(scale Vector2) {
	self.Runtime.Node2D_set_scale(self, scale)
}
func (self Node2D) GetPosition() Vector2 {
	return self.Runtime.Node2D_get_position(self)
}
func (self Node2D) GetRotation() Float {
	return self.Runtime.Node2D_get_rotation(self)
}
func (self Node2D) GetRotationDegrees() Float {
	return self.Runtime.Node2D_get_rotation_degrees(self)
}
func (self Node2D) GetSkew() Float {
	return self.Runtime.Node2D_get_skew(self)
}
func (self Node2D) GetScale() Vector2 {
	return self.Runtime.Node2D_get_scale(self)
}
func (self Node2D) Rotate(radians Float) {
	self.Runtime.Node2D_rotate(self, radians)
}
func (self Node2D) MoveLocalX(delta Float, scaled bool) {
	self.Runtime.Node2D_move_local_x(self, delta, scaled)
}
func (self Node2D) MoveLocalY(delta Float, scaled bool) {
	self.Runtime.Node2D_move_local_y(self, delta, scaled)
}
func (self Node2D) Translate(offset Vector2) {
	self.Runtime.Node2D_translate(self, offset)
}
func (self Node2D) GlobalTranslate(offset Vector2) {
	self.Runtime.Node2D_global_translate(self, offset)
}
func (self Node2D) ApplyScale(ratio Vector2) {
	self.Runtime.Node2D_apply_scale(self, ratio)
}
func (self Node2D) SetGlobalPosition(position Vector2) {
	self.Runtime.Node2D_set_global_position(self, position)
}
func (self Node2D) GetGlobalPosition() Vector2 {
	return self.Runtime.Node2D_get_global_position(self)
}
func (self Node2D) SetGlobalRotation(radians Float) {
	self.Runtime.Node2D_set_global_rotation(self, radians)
}
func (self Node2D) SetGlobalRotationDegrees(degrees Float) {
	self.Runtime.Node2D_set_global_rotation_degrees(self, degrees)
}
func (self Node2D) GetGlobalRotation() Float {
	return self.Runtime.Node2D_get_global_rotation(self)
}
func (self Node2D) GetGlobalRotationDegrees() Float {
	return self.Runtime.Node2D_get_global_rotation_degrees(self)
}
func (self Node2D) SetGlobalSkew(radians Float) {
	self.Runtime.Node2D_set_global_skew(self, radians)
}
func (self Node2D) GetGlobalSkew() Float {
	return self.Runtime.Node2D_get_global_skew(self)
}
func (self Node2D) SetGlobalScale(scale Vector2) {
	self.Runtime.Node2D_set_global_scale(self, scale)
}
func (self Node2D) GetGlobalScale() Vector2 {
	return self.Runtime.Node2D_get_global_scale(self)
}
func (self Node2D) SetTransform(xform Transform2D) {
	self.Runtime.Node2D_set_transform(self, xform)
}
func (self Node2D) SetGlobalTransform(xform Transform2D) {
	self.Runtime.Node2D_set_global_transform(self, xform)
}
func (self Node2D) LookAt(point Vector2) {
	self.Runtime.Node2D_look_at(self, point)
}
func (self Node2D) GetAngleTo(point Vector2) Float {
	return self.Runtime.Node2D_get_angle_to(self, point)
}
func (self Node2D) ToLocal(global_point Vector2) Vector2 {
	return self.Runtime.Node2D_to_local(self, global_point)
}
func (self Node2D) ToGlobal(local_point Vector2) Vector2 {
	return self.Runtime.Node2D_to_global(self, local_point)
}
func (self Node2D) GetRelativeTransformToParent(parent Node) Transform2D {
	return self.Runtime.Node2D_get_relative_transform_to_parent(self, parent)
}

type extendsNode3D struct {
	_ [0]*extendsNode3D
	class
}

func (self Node3D) Node() Node { var parent Node; parent.class = self.class; return parent }
func (self Node3D) SetTransform(local Transform3D) {
	self.Runtime.Node3D_set_transform(self, local)
}
func (self Node3D) GetTransform() Transform3D {
	return self.Runtime.Node3D_get_transform(self)
}
func (self Node3D) SetPosition(position Vector3) {
	self.Runtime.Node3D_set_position(self, position)
}
func (self Node3D) GetPosition() Vector3 {
	return self.Runtime.Node3D_get_position(self)
}
func (self Node3D) SetRotation(euler_radians Vector3) {
	self.Runtime.Node3D_set_rotation(self, euler_radians)
}
func (self Node3D) GetRotation() Vector3 {
	return self.Runtime.Node3D_get_rotation(self)
}
func (self Node3D) SetRotationDegrees(euler_degrees Vector3) {
	self.Runtime.Node3D_set_rotation_degrees(self, euler_degrees)
}
func (self Node3D) GetRotationDegrees() Vector3 {
	return self.Runtime.Node3D_get_rotation_degrees(self)
}
func (self Node3D) SetRotationOrder(order EulerOrder) {
	self.Runtime.Node3D_set_rotation_order(self, order)
}
func (self Node3D) GetRotationOrder() EulerOrder {
	return self.Runtime.Node3D_get_rotation_order(self)
}
func (self Node3D) SetRotationEditMode(edit_mode Node3DRotationEditMode) {
	self.Runtime.Node3D_set_rotation_edit_mode(self, edit_mode)
}
func (self Node3D) GetRotationEditMode() Node3DRotationEditMode {
	return self.Runtime.Node3D_get_rotation_edit_mode(self)
}
func (self Node3D) SetScale(scale Vector3) {
	self.Runtime.Node3D_set_scale(self, scale)
}
func (self Node3D) GetScale() Vector3 {
	return self.Runtime.Node3D_get_scale(self)
}
func (self Node3D) SetQuaternion(quaternion Quaternion) {
	self.Runtime.Node3D_set_quaternion(self, quaternion)
}
func (self Node3D) GetQuaternion() Quaternion {
	return self.Runtime.Node3D_get_quaternion(self)
}
func (self Node3D) SetBasis(basis Basis) {
	self.Runtime.Node3D_set_basis(self, basis)
}
func (self Node3D) GetBasis() Basis {
	return self.Runtime.Node3D_get_basis(self)
}
func (self Node3D) SetGlobalTransform(global Transform3D) {
	self.Runtime.Node3D_set_global_transform(self, global)
}
func (self Node3D) GetGlobalTransform() Transform3D {
	return self.Runtime.Node3D_get_global_transform(self)
}
func (self Node3D) SetGlobalPosition(position Vector3) {
	self.Runtime.Node3D_set_global_position(self, position)
}
func (self Node3D) GetGlobalPosition() Vector3 {
	return self.Runtime.Node3D_get_global_position(self)
}
func (self Node3D) SetGlobalBasis(basis Basis) {
	self.Runtime.Node3D_set_global_basis(self, basis)
}
func (self Node3D) GetGlobalBasis() Basis {
	return self.Runtime.Node3D_get_global_basis(self)
}
func (self Node3D) SetGlobalRotation(euler_radians Vector3) {
	self.Runtime.Node3D_set_global_rotation(self, euler_radians)
}
func (self Node3D) GetGlobalRotation() Vector3 {
	return self.Runtime.Node3D_get_global_rotation(self)
}
func (self Node3D) SetGlobalRotationDegrees(euler_degrees Vector3) {
	self.Runtime.Node3D_set_global_rotation_degrees(self, euler_degrees)
}
func (self Node3D) GetGlobalRotationDegrees() Vector3 {
	return self.Runtime.Node3D_get_global_rotation_degrees(self)
}
func (self Node3D) GetParentNode3d() Node3D {
	return self.Runtime.Node3D_get_parent_node_3d(self)
}
func (self Node3D) SetIgnoreTransformNotification(enabled bool) {
	self.Runtime.Node3D_set_ignore_transform_notification(self, enabled)
}
func (self Node3D) SetAsTopLevel(enable bool) {
	self.Runtime.Node3D_set_as_top_level(self, enable)
}
func (self Node3D) IsSetAsTopLevel() bool {
	return self.Runtime.Node3D_is_set_as_top_level(self)
}
func (self Node3D) SetDisableScale(disable bool) {
	self.Runtime.Node3D_set_disable_scale(self, disable)
}
func (self Node3D) IsScaleDisabled() bool {
	return self.Runtime.Node3D_is_scale_disabled(self)
}
func (self Node3D) GetWorld3d() World3D {
	return self.Runtime.Node3D_get_world_3d(self)
}
func (self Node3D) ForceUpdateTransform() {
	self.Runtime.Node3D_force_update_transform(self)
}
func (self Node3D) SetVisibilityParent(path NodePath) {
	self.Runtime.Node3D_set_visibility_parent(self, path)
}
func (self Node3D) GetVisibilityParent() NodePath {
	return self.Runtime.Node3D_get_visibility_parent(self)
}
func (self Node3D) UpdateGizmos() {
	self.Runtime.Node3D_update_gizmos(self)
}
func (self Node3D) AddGizmo(gizmo Node3DGizmo) {
	self.Runtime.Node3D_add_gizmo(self, gizmo)
}
func (self Node3D) GetGizmos() ArrayOf[Node3DGizmo] {
	return self.Runtime.Node3D_get_gizmos(self)
}
func (self Node3D) ClearGizmos() {
	self.Runtime.Node3D_clear_gizmos(self)
}
func (self Node3D) SetSubgizmoSelection(gizmo Node3DGizmo, id int64, transform Transform3D) {
	self.Runtime.Node3D_set_subgizmo_selection(self, gizmo, id, transform)
}
func (self Node3D) ClearSubgizmoSelection() {
	self.Runtime.Node3D_clear_subgizmo_selection(self)
}
func (self Node3D) SetVisible(visible bool) {
	self.Runtime.Node3D_set_visible(self, visible)
}
func (self Node3D) IsVisible() bool {
	return self.Runtime.Node3D_is_visible(self)
}
func (self Node3D) IsVisibleInTree() bool {
	return self.Runtime.Node3D_is_visible_in_tree(self)
}
func (self Node3D) Show() {
	self.Runtime.Node3D_show(self)
}
func (self Node3D) Hide() {
	self.Runtime.Node3D_hide(self)
}
func (self Node3D) SetNotifyLocalTransform(enable bool) {
	self.Runtime.Node3D_set_notify_local_transform(self, enable)
}
func (self Node3D) IsLocalTransformNotificationEnabled() bool {
	return self.Runtime.Node3D_is_local_transform_notification_enabled(self)
}
func (self Node3D) SetNotifyTransform(enable bool) {
	self.Runtime.Node3D_set_notify_transform(self, enable)
}
func (self Node3D) IsTransformNotificationEnabled() bool {
	return self.Runtime.Node3D_is_transform_notification_enabled(self)
}
func (self Node3D) Rotate(axis Vector3, angle Float) {
	self.Runtime.Node3D_rotate(self, axis, angle)
}
func (self Node3D) GlobalRotate(axis Vector3, angle Float) {
	self.Runtime.Node3D_global_rotate(self, axis, angle)
}
func (self Node3D) GlobalScale(scale Vector3) {
	self.Runtime.Node3D_global_scale(self, scale)
}
func (self Node3D) GlobalTranslate(offset Vector3) {
	self.Runtime.Node3D_global_translate(self, offset)
}
func (self Node3D) RotateObjectLocal(axis Vector3, angle Float) {
	self.Runtime.Node3D_rotate_object_local(self, axis, angle)
}
func (self Node3D) ScaleObjectLocal(scale Vector3) {
	self.Runtime.Node3D_scale_object_local(self, scale)
}
func (self Node3D) TranslateObjectLocal(offset Vector3) {
	self.Runtime.Node3D_translate_object_local(self, offset)
}
func (self Node3D) RotateX(angle Float) {
	self.Runtime.Node3D_rotate_x(self, angle)
}
func (self Node3D) RotateY(angle Float) {
	self.Runtime.Node3D_rotate_y(self, angle)
}
func (self Node3D) RotateZ(angle Float) {
	self.Runtime.Node3D_rotate_z(self, angle)
}
func (self Node3D) Translate(offset Vector3) {
	self.Runtime.Node3D_translate(self, offset)
}
func (self Node3D) Orthonormalize() {
	self.Runtime.Node3D_orthonormalize(self)
}
func (self Node3D) SetIdentity() {
	self.Runtime.Node3D_set_identity(self)
}
func (self Node3D) LookAt(target Vector3, up Vector3, use_model_front bool) {
	self.Runtime.Node3D_look_at(self, target, up, use_model_front)
}
func (self Node3D) LookAtFromPosition(position Vector3, target Vector3, up Vector3, use_model_front bool) {
	self.Runtime.Node3D_look_at_from_position(self, position, target, up, use_model_front)
}
func (self Node3D) ToLocal(global_point Vector3) Vector3 {
	return self.Runtime.Node3D_to_local(self, global_point)
}
func (self Node3D) ToGlobal(local_point Vector3) Vector3 {
	return self.Runtime.Node3D_to_global(self, local_point)
}

type extendsNode3DGizmo struct {
	_ [0]*extendsNode3DGizmo
	class
}

func (self Node3DGizmo) RefCounted() RefCounted {
	var parent RefCounted
	parent.class = self.class
	return parent
}

type extendsNoise struct {
	_ [0]*extendsNoise
	class
}

func (self Noise) Resource() Resource { var parent Resource; parent.class = self.class; return parent }
func (self Noise) GetNoise1d(x Float) Float {
	return self.Runtime.Noise_get_noise_1d(self, x)
}
func (self Noise) GetNoise2d(x Float, y Float) Float {
	return self.Runtime.Noise_get_noise_2d(self, x, y)
}
func (self Noise) GetNoise2dv(v Vector2) Float {
	return self.Runtime.Noise_get_noise_2dv(self, v)
}
func (self Noise) GetNoise3d(x Float, y Float, z Float) Float {
	return self.Runtime.Noise_get_noise_3d(self, x, y, z)
}
func (self Noise) GetNoise3dv(v Vector3) Float {
	return self.Runtime.Noise_get_noise_3dv(self, v)
}
func (self Noise) GetImage(width int64, height int64, invert bool, in_3d_space bool, normalize bool) Image {
	return self.Runtime.Noise_get_image(self, width, height, invert, in_3d_space, normalize)
}
func (self Noise) GetSeamlessImage(width int64, height int64, invert bool, in_3d_space bool, skirt Float, normalize bool) Image {
	return self.Runtime.Noise_get_seamless_image(self, width, height, invert, in_3d_space, skirt, normalize)
}
func (self Noise) GetImage3d(width int64, height int64, depth int64, invert bool, normalize bool) ArrayOf[Image] {
	return self.Runtime.Noise_get_image_3d(self, width, height, depth, invert, normalize)
}
func (self Noise) GetSeamlessImage3d(width int64, height int64, depth int64, invert bool, skirt Float, normalize bool) ArrayOf[Image] {
	return self.Runtime.Noise_get_seamless_image_3d(self, width, height, depth, invert, skirt, normalize)
}

type extendsNoiseTexture2D struct {
	_ [0]*extendsNoiseTexture2D
	class
}

func (self NoiseTexture2D) Texture2D() Texture2D {
	var parent Texture2D
	parent.class = self.class
	return parent
}
func (self NoiseTexture2D) SetWidth(width int64) {
	self.Runtime.NoiseTexture2D_set_width(self, width)
}
func (self NoiseTexture2D) SetHeight(height int64) {
	self.Runtime.NoiseTexture2D_set_height(self, height)
}
func (self NoiseTexture2D) SetInvert(invert bool) {
	self.Runtime.NoiseTexture2D_set_invert(self, invert)
}
func (self NoiseTexture2D) GetInvert() bool {
	return self.Runtime.NoiseTexture2D_get_invert(self)
}
func (self NoiseTexture2D) SetIn3dSpace(enable bool) {
	self.Runtime.NoiseTexture2D_set_in_3d_space(self, enable)
}
func (self NoiseTexture2D) IsIn3dSpace() bool {
	return self.Runtime.NoiseTexture2D_is_in_3d_space(self)
}
func (self NoiseTexture2D) SetGenerateMipmaps(invert bool) {
	self.Runtime.NoiseTexture2D_set_generate_mipmaps(self, invert)
}
func (self NoiseTexture2D) IsGeneratingMipmaps() bool {
	return self.Runtime.NoiseTexture2D_is_generating_mipmaps(self)
}
func (self NoiseTexture2D) SetSeamless(seamless bool) {
	self.Runtime.NoiseTexture2D_set_seamless(self, seamless)
}
func (self NoiseTexture2D) GetSeamless() bool {
	return self.Runtime.NoiseTexture2D_get_seamless(self)
}
func (self NoiseTexture2D) SetSeamlessBlendSkirt(seamless_blend_skirt Float) {
	self.Runtime.NoiseTexture2D_set_seamless_blend_skirt(self, seamless_blend_skirt)
}
func (self NoiseTexture2D) GetSeamlessBlendSkirt() Float {
	return self.Runtime.NoiseTexture2D_get_seamless_blend_skirt(self)
}
func (self NoiseTexture2D) SetAsNormalMap(as_normal_map bool) {
	self.Runtime.NoiseTexture2D_set_as_normal_map(self, as_normal_map)
}
func (self NoiseTexture2D) IsNormalMap() bool {
	return self.Runtime.NoiseTexture2D_is_normal_map(self)
}
func (self NoiseTexture2D) SetBumpStrength(bump_strength Float) {
	self.Runtime.NoiseTexture2D_set_bump_strength(self, bump_strength)
}
func (self NoiseTexture2D) GetBumpStrength() Float {
	return self.Runtime.NoiseTexture2D_get_bump_strength(self)
}
func (self NoiseTexture2D) SetNormalize(normalize bool) {
	self.Runtime.NoiseTexture2D_set_normalize(self, normalize)
}
func (self NoiseTexture2D) IsNormalized() bool {
	return self.Runtime.NoiseTexture2D_is_normalized(self)
}
func (self NoiseTexture2D) SetColorRamp(gradient Gradient) {
	self.Runtime.NoiseTexture2D_set_color_ramp(self, gradient)
}
func (self NoiseTexture2D) GetColorRamp() Gradient {
	return self.Runtime.NoiseTexture2D_get_color_ramp(self)
}
func (self NoiseTexture2D) SetNoise(noise Noise) {
	self.Runtime.NoiseTexture2D_set_noise(self, noise)
}
func (self NoiseTexture2D) GetNoise() Noise {
	return self.Runtime.NoiseTexture2D_get_noise(self)
}

type extendsNoiseTexture3D struct {
	_ [0]*extendsNoiseTexture3D
	class
}

func (self NoiseTexture3D) Texture3D() Texture3D {
	var parent Texture3D
	parent.class = self.class
	return parent
}
func (self NoiseTexture3D) SetWidth(width int64) {
	self.Runtime.NoiseTexture3D_set_width(self, width)
}
func (self NoiseTexture3D) SetHeight(height int64) {
	self.Runtime.NoiseTexture3D_set_height(self, height)
}
func (self NoiseTexture3D) SetDepth(depth int64) {
	self.Runtime.NoiseTexture3D_set_depth(self, depth)
}
func (self NoiseTexture3D) SetInvert(invert bool) {
	self.Runtime.NoiseTexture3D_set_invert(self, invert)
}
func (self NoiseTexture3D) GetInvert() bool {
	return self.Runtime.NoiseTexture3D_get_invert(self)
}
func (self NoiseTexture3D) SetSeamless(seamless bool) {
	self.Runtime.NoiseTexture3D_set_seamless(self, seamless)
}
func (self NoiseTexture3D) GetSeamless() bool {
	return self.Runtime.NoiseTexture3D_get_seamless(self)
}
func (self NoiseTexture3D) SetSeamlessBlendSkirt(seamless_blend_skirt Float) {
	self.Runtime.NoiseTexture3D_set_seamless_blend_skirt(self, seamless_blend_skirt)
}
func (self NoiseTexture3D) GetSeamlessBlendSkirt() Float {
	return self.Runtime.NoiseTexture3D_get_seamless_blend_skirt(self)
}
func (self NoiseTexture3D) SetNormalize(normalize bool) {
	self.Runtime.NoiseTexture3D_set_normalize(self, normalize)
}
func (self NoiseTexture3D) IsNormalized() bool {
	return self.Runtime.NoiseTexture3D_is_normalized(self)
}
func (self NoiseTexture3D) SetColorRamp(gradient Gradient) {
	self.Runtime.NoiseTexture3D_set_color_ramp(self, gradient)
}
func (self NoiseTexture3D) GetColorRamp() Gradient {
	return self.Runtime.NoiseTexture3D_get_color_ramp(self)
}
func (self NoiseTexture3D) SetNoise(noise Noise) {
	self.Runtime.NoiseTexture3D_set_noise(self, noise)
}
func (self NoiseTexture3D) GetNoise() Noise {
	return self.Runtime.NoiseTexture3D_get_noise(self)
}

type extendsORMMaterial3D struct {
	_ [0]*extendsORMMaterial3D
	class
}

func (self ORMMaterial3D) BaseMaterial3D() BaseMaterial3D {
	var parent BaseMaterial3D
	parent.class = self.class
	return parent
}

type extendsOS struct {
	_ [0]*extendsOS
	class
}

func (self OS) Object() Object { var parent Object; parent.class = self.class; return parent }
func (self OS) GetConnectedMidiInputs() PackedStringArray {
	return self.Runtime.OS_get_connected_midi_inputs(self)
}
func (self OS) OpenMidiInputs() {
	self.Runtime.OS_open_midi_inputs(self)
}
func (self OS) CloseMidiInputs() {
	self.Runtime.OS_close_midi_inputs(self)
}
func (self OS) Alert(text string, title string) {
	self.Runtime.OS_alert(self, text, title)
}
func (self OS) Crash(message string) {
	self.Runtime.OS_crash(self, message)
}
func (self OS) SetLowProcessorUsageMode(enable bool) {
	self.Runtime.OS_set_low_processor_usage_mode(self, enable)
}
func (self OS) IsInLowProcessorUsageMode() bool {
	return self.Runtime.OS_is_in_low_processor_usage_mode(self)
}
func (self OS) SetLowProcessorUsageModeSleepUsec(usec int64) {
	self.Runtime.OS_set_low_processor_usage_mode_sleep_usec(self, usec)
}
func (self OS) GetLowProcessorUsageModeSleepUsec() int64 {
	return self.Runtime.OS_get_low_processor_usage_mode_sleep_usec(self)
}
func (self OS) SetDeltaSmoothing(delta_smoothing_enabled bool) {
	self.Runtime.OS_set_delta_smoothing(self, delta_smoothing_enabled)
}
func (self OS) IsDeltaSmoothingEnabled() bool {
	return self.Runtime.OS_is_delta_smoothing_enabled(self)
}
func (self OS) GetProcessorCount() int64 {
	return self.Runtime.OS_get_processor_count(self)
}
func (self OS) GetProcessorName() string {
	return self.Runtime.OS_get_processor_name(self)
}
func (self OS) GetSystemFonts() PackedStringArray {
	return self.Runtime.OS_get_system_fonts(self)
}
func (self OS) GetSystemFontPath(font_name string, weight int64, stretch int64, italic bool) string {
	return self.Runtime.OS_get_system_font_path(self, font_name, weight, stretch, italic)
}
func (self OS) GetSystemFontPathForText(font_name string, text string, locale string, script string, weight int64, stretch int64, italic bool) PackedStringArray {
	return self.Runtime.OS_get_system_font_path_for_text(self, font_name, text, locale, script, weight, stretch, italic)
}
func (self OS) GetExecutablePath() string {
	return self.Runtime.OS_get_executable_path(self)
}
func (self OS) ReadStringFromStdin() string {
	return self.Runtime.OS_read_string_from_stdin(self)
}
func (self OS) Execute(path string, arguments PackedStringArray, output Array, read_stderr bool, open_console bool) int64 {
	return self.Runtime.OS_execute(self, path, arguments, output, read_stderr, open_console)
}
func (self OS) CreateProcess(path string, arguments PackedStringArray, open_console bool) int64 {
	return self.Runtime.OS_create_process(self, path, arguments, open_console)
}
func (self OS) CreateInstance(arguments PackedStringArray) int64 {
	return self.Runtime.OS_create_instance(self, arguments)
}
func (self OS) Kill(pid int64) int64 {
	return self.Runtime.OS_kill(self, pid)
}
func (self OS) ShellOpen(uri string) int64 {
	return self.Runtime.OS_shell_open(self, uri)
}
func (self OS) ShellShowInFileManager(file_or_dir_path string, open_folder bool) int64 {
	return self.Runtime.OS_shell_show_in_file_manager(self, file_or_dir_path, open_folder)
}
func (self OS) IsProcessRunning(pid int64) bool {
	return self.Runtime.OS_is_process_running(self, pid)
}
func (self OS) GetProcessId() int64 {
	return self.Runtime.OS_get_process_id(self)
}
func (self OS) HasEnvironment(variable string) bool {
	return self.Runtime.OS_has_environment(self, variable)
}
func (self OS) GetEnvironment(variable string) string {
	return self.Runtime.OS_get_environment(self, variable)
}
func (self OS) SetEnvironment(variable string, value string) {
	self.Runtime.OS_set_environment(self, variable, value)
}
func (self OS) UnsetEnvironment(variable string) {
	self.Runtime.OS_unset_environment(self, variable)
}
func (self OS) GetName() string {
	return self.Runtime.OS_get_name(self)
}
func (self OS) GetDistributionName() string {
	return self.Runtime.OS_get_distribution_name(self)
}
func (self OS) GetVersion() string {
	return self.Runtime.OS_get_version(self)
}
func (self OS) GetCmdlineArgs() PackedStringArray {
	return self.Runtime.OS_get_cmdline_args(self)
}
func (self OS) GetCmdlineUserArgs() PackedStringArray {
	return self.Runtime.OS_get_cmdline_user_args(self)
}
func (self OS) GetVideoAdapterDriverInfo() PackedStringArray {
	return self.Runtime.OS_get_video_adapter_driver_info(self)
}
func (self OS) SetRestartOnExit(restart bool, arguments PackedStringArray) {
	self.Runtime.OS_set_restart_on_exit(self, restart, arguments)
}
func (self OS) IsRestartOnExitSet() bool {
	return self.Runtime.OS_is_restart_on_exit_set(self)
}
func (self OS) GetRestartOnExitArguments() PackedStringArray {
	return self.Runtime.OS_get_restart_on_exit_arguments(self)
}
func (self OS) DelayUsec(usec int64) {
	self.Runtime.OS_delay_usec(self, usec)
}
func (self OS) DelayMsec(msec int64) {
	self.Runtime.OS_delay_msec(self, msec)
}
func (self OS) GetLocale() string {
	return self.Runtime.OS_get_locale(self)
}
func (self OS) GetLocaleLanguage() string {
	return self.Runtime.OS_get_locale_language(self)
}
func (self OS) GetModelName() string {
	return self.Runtime.OS_get_model_name(self)
}
func (self OS) IsUserfsPersistent() bool {
	return self.Runtime.OS_is_userfs_persistent(self)
}
func (self OS) IsStdoutVerbose() bool {
	return self.Runtime.OS_is_stdout_verbose(self)
}
func (self OS) IsDebugBuild() bool {
	return self.Runtime.OS_is_debug_build(self)
}
func (self OS) GetStaticMemoryUsage() int64 {
	return self.Runtime.OS_get_static_memory_usage(self)
}
func (self OS) GetStaticMemoryPeakUsage() int64 {
	return self.Runtime.OS_get_static_memory_peak_usage(self)
}
func (self OS) GetMemoryInfo() Dictionary {
	return self.Runtime.OS_get_memory_info(self)
}
func (self OS) MoveToTrash(path string) int64 {
	return self.Runtime.OS_move_to_trash(self, path)
}
func (self OS) GetUserDataDir() string {
	return self.Runtime.OS_get_user_data_dir(self)
}
func (self OS) GetSystemDir(dir OSSystemDir, shared_storage bool) string {
	return self.Runtime.OS_get_system_dir(self, dir, shared_storage)
}
func (self OS) GetConfigDir() string {
	return self.Runtime.OS_get_config_dir(self)
}
func (self OS) GetDataDir() string {
	return self.Runtime.OS_get_data_dir(self)
}
func (self OS) GetCacheDir() string {
	return self.Runtime.OS_get_cache_dir(self)
}
func (self OS) GetUniqueId() string {
	return self.Runtime.OS_get_unique_id(self)
}
func (self OS) GetKeycodeString(code Key) string {
	return self.Runtime.OS_get_keycode_string(self, code)
}
func (self OS) IsKeycodeUnicode(code int64) bool {
	return self.Runtime.OS_is_keycode_unicode(self, code)
}
func (self OS) FindKeycodeFromString(s string) Key {
	return self.Runtime.OS_find_keycode_from_string(self, s)
}
func (self OS) SetUseFileAccessSaveAndSwap(enabled bool) {
	self.Runtime.OS_set_use_file_access_save_and_swap(self, enabled)
}
func (self OS) SetThreadName(name string) int64 {
	return self.Runtime.OS_set_thread_name(self, name)
}
func (self OS) GetThreadCallerId() int64 {
	return self.Runtime.OS_get_thread_caller_id(self)
}
func (self OS) GetMainThreadId() int64 {
	return self.Runtime.OS_get_main_thread_id(self)
}
func (self OS) HasFeature(tag_name string) bool {
	return self.Runtime.OS_has_feature(self, tag_name)
}
func (self OS) IsSandboxed() bool {
	return self.Runtime.OS_is_sandboxed(self)
}
func (self OS) RequestPermission(name string) bool {
	return self.Runtime.OS_request_permission(self, name)
}
func (self OS) RequestPermissions() bool {
	return self.Runtime.OS_request_permissions(self)
}
func (self OS) GetGrantedPermissions() PackedStringArray {
	return self.Runtime.OS_get_granted_permissions(self)
}
func (self OS) RevokeGrantedPermissions() {
	self.Runtime.OS_revoke_granted_permissions(self)
}

type extendsObject struct {
	_ [0]*extendsObject
	class
}

func (self Object) GetClass() string {
	return self.Runtime.Object_get_class(self)
}
func (self Object) IsClass(class string) bool {
	return self.Runtime.Object_is_class(self, class)
}
func (self Object) Set(property string, value any) {
	self.Runtime.Object_set(self, property, value)
}
func (self Object) Get(property string) any {
	return self.Runtime.Object_get(self, property)
}
func (self Object) SetIndexed(property_path NodePath, value any) {
	self.Runtime.Object_set_indexed(self, property_path, value)
}
func (self Object) GetIndexed(property_path NodePath) any {
	return self.Runtime.Object_get_indexed(self, property_path)
}
func (self Object) GetPropertyList() ArrayOf[Dictionary] {
	return self.Runtime.Object_get_property_list(self)
}
func (self Object) GetMethodList() ArrayOf[Dictionary] {
	return self.Runtime.Object_get_method_list(self)
}
func (self Object) PropertyCanRevert(property string) bool {
	return self.Runtime.Object_property_can_revert(self, property)
}
func (self Object) PropertyGetRevert(property string) any {
	return self.Runtime.Object_property_get_revert(self, property)
}
func (self Object) Notification(what int64, reversed bool) {
	self.Runtime.Object_notification(self, what, reversed)
}
func (self Object) ToString() string {
	return self.Runtime.Object_to_string(self)
}
func (self Object) GetInstanceId() int64 {
	return self.Runtime.Object_get_instance_id(self)
}
func (self Object) SetScript(script any) {
	self.Runtime.Object_set_script(self, script)
}
func (self Object) GetScript() any {
	return self.Runtime.Object_get_script(self)
}
func (self Object) SetMeta(name string, value any) {
	self.Runtime.Object_set_meta(self, name, value)
}
func (self Object) RemoveMeta(name string) {
	self.Runtime.Object_remove_meta(self, name)
}
func (self Object) GetMeta(name string, def any) any {
	return self.Runtime.Object_get_meta(self, name, def)
}
func (self Object) HasMeta(name string) bool {
	return self.Runtime.Object_has_meta(self, name)
}
func (self Object) GetMetaList() ArrayOf[string] {
	return self.Runtime.Object_get_meta_list(self)
}
func (self Object) AddUserSignal(signal string, arguments Array) {
	self.Runtime.Object_add_user_signal(self, signal, arguments)
}
func (self Object) HasUserSignal(signal string) bool {
	return self.Runtime.Object_has_user_signal(self, signal)
}
func (self Object) EmitSignal(signal string) int64 {
	return self.Runtime.Object_emit_signal(self, signal)
}
func (self Object) Call(method string) any {
	return self.Runtime.Object_call(self, method)
}
func (self Object) CallDeferred(method string) any {
	return self.Runtime.Object_call_deferred(self, method)
}
func (self Object) SetDeferred(property string, value any) {
	self.Runtime.Object_set_deferred(self, property, value)
}
func (self Object) Callv(method string, arg_array Array) any {
	return self.Runtime.Object_callv(self, method, arg_array)
}
func (self Object) HasMethod(method string) bool {
	return self.Runtime.Object_has_method(self, method)
}
func (self Object) HasSignal(signal string) bool {
	return self.Runtime.Object_has_signal(self, signal)
}
func (self Object) GetSignalList() ArrayOf[Dictionary] {
	return self.Runtime.Object_get_signal_list(self)
}
func (self Object) GetSignalConnectionList(signal string) ArrayOf[Dictionary] {
	return self.Runtime.Object_get_signal_connection_list(self, signal)
}
func (self Object) GetIncomingConnections() ArrayOf[Dictionary] {
	return self.Runtime.Object_get_incoming_connections(self)
}
func (self Object) Connect(signal string, callable Callable, flags int64) int64 {
	return self.Runtime.Object_connect(self, signal, callable, flags)
}
func (self Object) Disconnect(signal string, callable Callable) {
	self.Runtime.Object_disconnect(self, signal, callable)
}
func (self Object) IsConnected(signal string, callable Callable) bool {
	return self.Runtime.Object_is_connected(self, signal, callable)
}
func (self Object) SetBlockSignals(enable bool) {
	self.Runtime.Object_set_block_signals(self, enable)
}
func (self Object) IsBlockingSignals() bool {
	return self.Runtime.Object_is_blocking_signals(self)
}
func (self Object) NotifyPropertyListChanged() {
	self.Runtime.Object_notify_property_list_changed(self)
}
func (self Object) SetMessageTranslation(enable bool) {
	self.Runtime.Object_set_message_translation(self, enable)
}
func (self Object) CanTranslateMessages() bool {
	return self.Runtime.Object_can_translate_messages(self)
}
func (self Object) Tr(message string, context string) string {
	return self.Runtime.Object_tr(self, message, context)
}
func (self Object) TrN(message string, plural_message string, n int64, context string) string {
	return self.Runtime.Object_tr_n(self, message, plural_message, n, context)
}
func (self Object) IsQueuedForDeletion() bool {
	return self.Runtime.Object_is_queued_for_deletion(self)
}
func (self Object) CancelFree() {
	self.Runtime.Object_cancel_free(self)
}

type extendsOccluder3D struct {
	_ [0]*extendsOccluder3D
	class
}

func (self Occluder3D) Resource() Resource {
	var parent Resource
	parent.class = self.class
	return parent
}
func (self Occluder3D) GetVertices() PackedVector3Array {
	return self.Runtime.Occluder3D_get_vertices(self)
}
func (self Occluder3D) GetIndices() PackedInt32Array {
	return self.Runtime.Occluder3D_get_indices(self)
}

type extendsOccluderInstance3D struct {
	_ [0]*extendsOccluderInstance3D
	class
}

func (self OccluderInstance3D) Node3D() Node3D {
	var parent Node3D
	parent.class = self.class
	return parent
}
func (self OccluderInstance3D) SetBakeMask(mask int64) {
	self.Runtime.OccluderInstance3D_set_bake_mask(self, mask)
}
func (self OccluderInstance3D) GetBakeMask() int64 {
	return self.Runtime.OccluderInstance3D_get_bake_mask(self)
}
func (self OccluderInstance3D) SetBakeMaskValue(layer_number int64, value bool) {
	self.Runtime.OccluderInstance3D_set_bake_mask_value(self, layer_number, value)
}
func (self OccluderInstance3D) GetBakeMaskValue(layer_number int64) bool {
	return self.Runtime.OccluderInstance3D_get_bake_mask_value(self, layer_number)
}
func (self OccluderInstance3D) SetBakeSimplificationDistance(simplification_distance Float) {
	self.Runtime.OccluderInstance3D_set_bake_simplification_distance(self, simplification_distance)
}
func (self OccluderInstance3D) GetBakeSimplificationDistance() Float {
	return self.Runtime.OccluderInstance3D_get_bake_simplification_distance(self)
}
func (self OccluderInstance3D) SetOccluder(occluder Occluder3D) {
	self.Runtime.OccluderInstance3D_set_occluder(self, occluder)
}
func (self OccluderInstance3D) GetOccluder() Occluder3D {
	return self.Runtime.OccluderInstance3D_get_occluder(self)
}

type extendsOccluderPolygon2D struct {
	_ [0]*extendsOccluderPolygon2D
	class
}

func (self OccluderPolygon2D) Resource() Resource {
	var parent Resource
	parent.class = self.class
	return parent
}
func (self OccluderPolygon2D) SetClosed(closed bool) {
	self.Runtime.OccluderPolygon2D_set_closed(self, closed)
}
func (self OccluderPolygon2D) IsClosed() bool {
	return self.Runtime.OccluderPolygon2D_is_closed(self)
}
func (self OccluderPolygon2D) SetCullMode(cull_mode OccluderPolygon2DCullMode) {
	self.Runtime.OccluderPolygon2D_set_cull_mode(self, cull_mode)
}
func (self OccluderPolygon2D) GetCullMode() OccluderPolygon2DCullMode {
	return self.Runtime.OccluderPolygon2D_get_cull_mode(self)
}
func (self OccluderPolygon2D) SetPolygon(polygon PackedVector2Array) {
	self.Runtime.OccluderPolygon2D_set_polygon(self, polygon)
}
func (self OccluderPolygon2D) GetPolygon() PackedVector2Array {
	return self.Runtime.OccluderPolygon2D_get_polygon(self)
}

type extendsOfflineMultiplayerPeer struct {
	_ [0]*extendsOfflineMultiplayerPeer
	class
}

func (self OfflineMultiplayerPeer) MultiplayerPeer() MultiplayerPeer {
	var parent MultiplayerPeer
	parent.class = self.class
	return parent
}

type extendsOggPacketSequence struct {
	_ [0]*extendsOggPacketSequence
	class
}

func (self OggPacketSequence) Resource() Resource {
	var parent Resource
	parent.class = self.class
	return parent
}
func (self OggPacketSequence) SetPacketData(packet_data ArrayOf[Array]) {
	self.Runtime.OggPacketSequence_set_packet_data(self, packet_data)
}
func (self OggPacketSequence) GetPacketData() ArrayOf[Array] {
	return self.Runtime.OggPacketSequence_get_packet_data(self)
}
func (self OggPacketSequence) SetPacketGranulePositions(granule_positions PackedInt64Array) {
	self.Runtime.OggPacketSequence_set_packet_granule_positions(self, granule_positions)
}
func (self OggPacketSequence) GetPacketGranulePositions() PackedInt64Array {
	return self.Runtime.OggPacketSequence_get_packet_granule_positions(self)
}
func (self OggPacketSequence) SetSamplingRate(sampling_rate Float) {
	self.Runtime.OggPacketSequence_set_sampling_rate(self, sampling_rate)
}
func (self OggPacketSequence) GetSamplingRate() Float {
	return self.Runtime.OggPacketSequence_get_sampling_rate(self)
}
func (self OggPacketSequence) GetLength() Float {
	return self.Runtime.OggPacketSequence_get_length(self)
}

type extendsOggPacketSequencePlayback struct {
	_ [0]*extendsOggPacketSequencePlayback
	class
}

func (self OggPacketSequencePlayback) RefCounted() RefCounted {
	var parent RefCounted
	parent.class = self.class
	return parent
}

type extendsOmniLight3D struct {
	_ [0]*extendsOmniLight3D
	class
}

func (self OmniLight3D) Light3D() Light3D {
	var parent Light3D
	parent.class = self.class
	return parent
}
func (self OmniLight3D) SetShadowMode(mode OmniLight3DShadowMode) {
	self.Runtime.OmniLight3D_set_shadow_mode(self, mode)
}
func (self OmniLight3D) GetShadowMode() OmniLight3DShadowMode {
	return self.Runtime.OmniLight3D_get_shadow_mode(self)
}

type extendsOpenXRAPIExtension struct {
	_ [0]*extendsOpenXRAPIExtension
	class
}

func (self OpenXRAPIExtension) RefCounted() RefCounted {
	var parent RefCounted
	parent.class = self.class
	return parent
}
func (self OpenXRAPIExtension) GetInstance() int64 {
	return self.Runtime.OpenXRAPIExtension_get_instance(self)
}
func (self OpenXRAPIExtension) GetSystemId() int64 {
	return self.Runtime.OpenXRAPIExtension_get_system_id(self)
}
func (self OpenXRAPIExtension) GetSession() int64 {
	return self.Runtime.OpenXRAPIExtension_get_session(self)
}
func (self OpenXRAPIExtension) TransformFromPose(pose []byte) Transform3D {
	return self.Runtime.OpenXRAPIExtension_transform_from_pose(self, pose)
}
func (self OpenXRAPIExtension) XrResult(result int64, format string, args Array) bool {
	return self.Runtime.OpenXRAPIExtension_xr_result(self, result, format, args)
}
func (self OpenXRAPIExtension) OpenxrIsEnabled(check_run_in_editor bool) bool {
	return self.Runtime.OpenXRAPIExtension_openxr_is_enabled(self, check_run_in_editor)
}
func (self OpenXRAPIExtension) GetInstanceProcAddr(name string) int64 {
	return self.Runtime.OpenXRAPIExtension_get_instance_proc_addr(self, name)
}
func (self OpenXRAPIExtension) GetErrorString(result int64) string {
	return self.Runtime.OpenXRAPIExtension_get_error_string(self, result)
}
func (self OpenXRAPIExtension) GetSwapchainFormatName(swapchain_format int64) string {
	return self.Runtime.OpenXRAPIExtension_get_swapchain_format_name(self, swapchain_format)
}
func (self OpenXRAPIExtension) IsInitialized() bool {
	return self.Runtime.OpenXRAPIExtension_is_initialized(self)
}
func (self OpenXRAPIExtension) IsRunning() bool {
	return self.Runtime.OpenXRAPIExtension_is_running(self)
}
func (self OpenXRAPIExtension) GetPlaySpace() int64 {
	return self.Runtime.OpenXRAPIExtension_get_play_space(self)
}
func (self OpenXRAPIExtension) GetNextFrameTime() int64 {
	return self.Runtime.OpenXRAPIExtension_get_next_frame_time(self)
}
func (self OpenXRAPIExtension) CanRender() bool {
	return self.Runtime.OpenXRAPIExtension_can_render(self)
}

type extendsOpenXRAction struct {
	_ [0]*extendsOpenXRAction
	class
}

func (self OpenXRAction) Resource() Resource {
	var parent Resource
	parent.class = self.class
	return parent
}
func (self OpenXRAction) SetLocalizedName(localized_name string) {
	self.Runtime.OpenXRAction_set_localized_name(self, localized_name)
}
func (self OpenXRAction) GetLocalizedName() string {
	return self.Runtime.OpenXRAction_get_localized_name(self)
}
func (self OpenXRAction) SetActionType(action_type OpenXRActionActionType) {
	self.Runtime.OpenXRAction_set_action_type(self, action_type)
}
func (self OpenXRAction) GetActionType() OpenXRActionActionType {
	return self.Runtime.OpenXRAction_get_action_type(self)
}
func (self OpenXRAction) SetToplevelPaths(toplevel_paths PackedStringArray) {
	self.Runtime.OpenXRAction_set_toplevel_paths(self, toplevel_paths)
}
func (self OpenXRAction) GetToplevelPaths() PackedStringArray {
	return self.Runtime.OpenXRAction_get_toplevel_paths(self)
}

type extendsOpenXRActionMap struct {
	_ [0]*extendsOpenXRActionMap
	class
}

func (self OpenXRActionMap) Resource() Resource {
	var parent Resource
	parent.class = self.class
	return parent
}
func (self OpenXRActionMap) SetActionSets(action_sets Array) {
	self.Runtime.OpenXRActionMap_set_action_sets(self, action_sets)
}
func (self OpenXRActionMap) GetActionSets() Array {
	return self.Runtime.OpenXRActionMap_get_action_sets(self)
}
func (self OpenXRActionMap) GetActionSetCount() int64 {
	return self.Runtime.OpenXRActionMap_get_action_set_count(self)
}
func (self OpenXRActionMap) FindActionSet(name string) OpenXRActionSet {
	return self.Runtime.OpenXRActionMap_find_action_set(self, name)
}
func (self OpenXRActionMap) GetActionSet(idx int64) OpenXRActionSet {
	return self.Runtime.OpenXRActionMap_get_action_set(self, idx)
}
func (self OpenXRActionMap) AddActionSet(action_set OpenXRActionSet) {
	self.Runtime.OpenXRActionMap_add_action_set(self, action_set)
}
func (self OpenXRActionMap) RemoveActionSet(action_set OpenXRActionSet) {
	self.Runtime.OpenXRActionMap_remove_action_set(self, action_set)
}
func (self OpenXRActionMap) SetInteractionProfiles(interaction_profiles Array) {
	self.Runtime.OpenXRActionMap_set_interaction_profiles(self, interaction_profiles)
}
func (self OpenXRActionMap) GetInteractionProfiles() Array {
	return self.Runtime.OpenXRActionMap_get_interaction_profiles(self)
}
func (self OpenXRActionMap) GetInteractionProfileCount() int64 {
	return self.Runtime.OpenXRActionMap_get_interaction_profile_count(self)
}
func (self OpenXRActionMap) FindInteractionProfile(name string) OpenXRInteractionProfile {
	return self.Runtime.OpenXRActionMap_find_interaction_profile(self, name)
}
func (self OpenXRActionMap) GetInteractionProfile(idx int64) OpenXRInteractionProfile {
	return self.Runtime.OpenXRActionMap_get_interaction_profile(self, idx)
}
func (self OpenXRActionMap) AddInteractionProfile(interaction_profile OpenXRInteractionProfile) {
	self.Runtime.OpenXRActionMap_add_interaction_profile(self, interaction_profile)
}
func (self OpenXRActionMap) RemoveInteractionProfile(interaction_profile OpenXRInteractionProfile) {
	self.Runtime.OpenXRActionMap_remove_interaction_profile(self, interaction_profile)
}
func (self OpenXRActionMap) CreateDefaultActionSets() {
	self.Runtime.OpenXRActionMap_create_default_action_sets(self)
}

type extendsOpenXRActionSet struct {
	_ [0]*extendsOpenXRActionSet
	class
}

func (self OpenXRActionSet) Resource() Resource {
	var parent Resource
	parent.class = self.class
	return parent
}
func (self OpenXRActionSet) SetLocalizedName(localized_name string) {
	self.Runtime.OpenXRActionSet_set_localized_name(self, localized_name)
}
func (self OpenXRActionSet) GetLocalizedName() string {
	return self.Runtime.OpenXRActionSet_get_localized_name(self)
}
func (self OpenXRActionSet) SetPriority(priority int64) {
	self.Runtime.OpenXRActionSet_set_priority(self, priority)
}
func (self OpenXRActionSet) GetPriority() int64 {
	return self.Runtime.OpenXRActionSet_get_priority(self)
}
func (self OpenXRActionSet) GetActionCount() int64 {
	return self.Runtime.OpenXRActionSet_get_action_count(self)
}
func (self OpenXRActionSet) SetActions(actions Array) {
	self.Runtime.OpenXRActionSet_set_actions(self, actions)
}
func (self OpenXRActionSet) GetActions() Array {
	return self.Runtime.OpenXRActionSet_get_actions(self)
}
func (self OpenXRActionSet) AddAction(action OpenXRAction) {
	self.Runtime.OpenXRActionSet_add_action(self, action)
}
func (self OpenXRActionSet) RemoveAction(action OpenXRAction) {
	self.Runtime.OpenXRActionSet_remove_action(self, action)
}

type extendsOpenXRExtensionWrapperExtension struct {
	_ [0]*extendsOpenXRExtensionWrapperExtension
	class
}

func (self OpenXRExtensionWrapperExtension) Object() Object {
	var parent Object
	parent.class = self.class
	return parent
}
func (self OpenXRExtensionWrapperExtension) GetOpenxrApi() OpenXRAPIExtension {
	return self.Runtime.OpenXRExtensionWrapperExtension_get_openxr_api(self)
}
func (self OpenXRExtensionWrapperExtension) RegisterExtensionWrapper() {
	self.Runtime.OpenXRExtensionWrapperExtension_register_extension_wrapper(self)
}

type extendsOpenXRHand struct {
	_ [0]*extendsOpenXRHand
	class
}

func (self OpenXRHand) Node3D() Node3D { var parent Node3D; parent.class = self.class; return parent }
func (self OpenXRHand) SetHand(hand OpenXRHandHands) {
	self.Runtime.OpenXRHand_set_hand(self, hand)
}
func (self OpenXRHand) GetHand() OpenXRHandHands {
	return self.Runtime.OpenXRHand_get_hand(self)
}
func (self OpenXRHand) SetHandSkeleton(hand_skeleton NodePath) {
	self.Runtime.OpenXRHand_set_hand_skeleton(self, hand_skeleton)
}
func (self OpenXRHand) GetHandSkeleton() NodePath {
	return self.Runtime.OpenXRHand_get_hand_skeleton(self)
}
func (self OpenXRHand) SetMotionRange(motion_range OpenXRHandMotionRange) {
	self.Runtime.OpenXRHand_set_motion_range(self, motion_range)
}
func (self OpenXRHand) GetMotionRange() OpenXRHandMotionRange {
	return self.Runtime.OpenXRHand_get_motion_range(self)
}

type extendsOpenXRIPBinding struct {
	_ [0]*extendsOpenXRIPBinding
	class
}

func (self OpenXRIPBinding) Resource() Resource {
	var parent Resource
	parent.class = self.class
	return parent
}
func (self OpenXRIPBinding) SetAction(action OpenXRAction) {
	self.Runtime.OpenXRIPBinding_set_action(self, action)
}
func (self OpenXRIPBinding) GetAction() OpenXRAction {
	return self.Runtime.OpenXRIPBinding_get_action(self)
}
func (self OpenXRIPBinding) GetPathCount() int64 {
	return self.Runtime.OpenXRIPBinding_get_path_count(self)
}
func (self OpenXRIPBinding) SetPaths(paths PackedStringArray) {
	self.Runtime.OpenXRIPBinding_set_paths(self, paths)
}
func (self OpenXRIPBinding) GetPaths() PackedStringArray {
	return self.Runtime.OpenXRIPBinding_get_paths(self)
}
func (self OpenXRIPBinding) HasPath(path string) bool {
	return self.Runtime.OpenXRIPBinding_has_path(self, path)
}
func (self OpenXRIPBinding) AddPath(path string) {
	self.Runtime.OpenXRIPBinding_add_path(self, path)
}
func (self OpenXRIPBinding) RemovePath(path string) {
	self.Runtime.OpenXRIPBinding_remove_path(self, path)
}

type extendsOpenXRInteractionProfile struct {
	_ [0]*extendsOpenXRInteractionProfile
	class
}

func (self OpenXRInteractionProfile) Resource() Resource {
	var parent Resource
	parent.class = self.class
	return parent
}
func (self OpenXRInteractionProfile) SetInteractionProfilePath(interaction_profile_path string) {
	self.Runtime.OpenXRInteractionProfile_set_interaction_profile_path(self, interaction_profile_path)
}
func (self OpenXRInteractionProfile) GetInteractionProfilePath() string {
	return self.Runtime.OpenXRInteractionProfile_get_interaction_profile_path(self)
}
func (self OpenXRInteractionProfile) GetBindingCount() int64 {
	return self.Runtime.OpenXRInteractionProfile_get_binding_count(self)
}
func (self OpenXRInteractionProfile) GetBinding(index int64) OpenXRIPBinding {
	return self.Runtime.OpenXRInteractionProfile_get_binding(self, index)
}
func (self OpenXRInteractionProfile) SetBindings(bindings Array) {
	self.Runtime.OpenXRInteractionProfile_set_bindings(self, bindings)
}
func (self OpenXRInteractionProfile) GetBindings() Array {
	return self.Runtime.OpenXRInteractionProfile_get_bindings(self)
}

type extendsOpenXRInteractionProfileMetadata struct {
	_ [0]*extendsOpenXRInteractionProfileMetadata
	class
}

func (self OpenXRInteractionProfileMetadata) Object() Object {
	var parent Object
	parent.class = self.class
	return parent
}
func (self OpenXRInteractionProfileMetadata) RegisterProfileRename(old_name string, new_name string) {
	self.Runtime.OpenXRInteractionProfileMetadata_register_profile_rename(self, old_name, new_name)
}
func (self OpenXRInteractionProfileMetadata) RegisterTopLevelPath(display_name string, openxr_path string, openxr_extension_name string) {
	self.Runtime.OpenXRInteractionProfileMetadata_register_top_level_path(self, display_name, openxr_path, openxr_extension_name)
}
func (self OpenXRInteractionProfileMetadata) RegisterInteractionProfile(display_name string, openxr_path string, openxr_extension_name string) {
	self.Runtime.OpenXRInteractionProfileMetadata_register_interaction_profile(self, display_name, openxr_path, openxr_extension_name)
}
func (self OpenXRInteractionProfileMetadata) RegisterIoPath(interaction_profile string, display_name string, toplevel_path string, openxr_path string, openxr_extension_name string, action_type OpenXRActionActionType) {
	self.Runtime.OpenXRInteractionProfileMetadata_register_io_path(self, interaction_profile, display_name, toplevel_path, openxr_path, openxr_extension_name, action_type)
}

type extendsOpenXRInterface struct {
	_ [0]*extendsOpenXRInterface
	class
}

func (self OpenXRInterface) XRInterface() XRInterface {
	var parent XRInterface
	parent.class = self.class
	return parent
}
func (self OpenXRInterface) GetDisplayRefreshRate() Float {
	return self.Runtime.OpenXRInterface_get_display_refresh_rate(self)
}
func (self OpenXRInterface) SetDisplayRefreshRate(refresh_rate Float) {
	self.Runtime.OpenXRInterface_set_display_refresh_rate(self, refresh_rate)
}
func (self OpenXRInterface) GetRenderTargetSizeMultiplier() Float {
	return self.Runtime.OpenXRInterface_get_render_target_size_multiplier(self)
}
func (self OpenXRInterface) SetRenderTargetSizeMultiplier(multiplier Float) {
	self.Runtime.OpenXRInterface_set_render_target_size_multiplier(self, multiplier)
}
func (self OpenXRInterface) IsFoveationSupported() bool {
	return self.Runtime.OpenXRInterface_is_foveation_supported(self)
}
func (self OpenXRInterface) GetFoveationLevel() int64 {
	return self.Runtime.OpenXRInterface_get_foveation_level(self)
}
func (self OpenXRInterface) SetFoveationLevel(foveation_level int64) {
	self.Runtime.OpenXRInterface_set_foveation_level(self, foveation_level)
}
func (self OpenXRInterface) GetFoveationDynamic() bool {
	return self.Runtime.OpenXRInterface_get_foveation_dynamic(self)
}
func (self OpenXRInterface) SetFoveationDynamic(foveation_dynamic bool) {
	self.Runtime.OpenXRInterface_set_foveation_dynamic(self, foveation_dynamic)
}
func (self OpenXRInterface) IsActionSetActive(name string) bool {
	return self.Runtime.OpenXRInterface_is_action_set_active(self, name)
}
func (self OpenXRInterface) SetActionSetActive(name string, active bool) {
	self.Runtime.OpenXRInterface_set_action_set_active(self, name, active)
}
func (self OpenXRInterface) GetActionSets() Array {
	return self.Runtime.OpenXRInterface_get_action_sets(self)
}
func (self OpenXRInterface) GetAvailableDisplayRefreshRates() Array {
	return self.Runtime.OpenXRInterface_get_available_display_refresh_rates(self)
}
func (self OpenXRInterface) SetMotionRange(hand OpenXRInterfaceHand, motion_range OpenXRInterfaceHandMotionRange) {
	self.Runtime.OpenXRInterface_set_motion_range(self, hand, motion_range)
}
func (self OpenXRInterface) GetMotionRange(hand OpenXRInterfaceHand) OpenXRInterfaceHandMotionRange {
	return self.Runtime.OpenXRInterface_get_motion_range(self, hand)
}
func (self OpenXRInterface) GetHandJointFlags(hand OpenXRInterfaceHand, joint OpenXRInterfaceHandJoints) OpenXRInterfaceHandJointFlags {
	return self.Runtime.OpenXRInterface_get_hand_joint_flags(self, hand, joint)
}
func (self OpenXRInterface) GetHandJointRotation(hand OpenXRInterfaceHand, joint OpenXRInterfaceHandJoints) Quaternion {
	return self.Runtime.OpenXRInterface_get_hand_joint_rotation(self, hand, joint)
}
func (self OpenXRInterface) GetHandJointPosition(hand OpenXRInterfaceHand, joint OpenXRInterfaceHandJoints) Vector3 {
	return self.Runtime.OpenXRInterface_get_hand_joint_position(self, hand, joint)
}
func (self OpenXRInterface) GetHandJointRadius(hand OpenXRInterfaceHand, joint OpenXRInterfaceHandJoints) Float {
	return self.Runtime.OpenXRInterface_get_hand_joint_radius(self, hand, joint)
}
func (self OpenXRInterface) GetHandJointLinearVelocity(hand OpenXRInterfaceHand, joint OpenXRInterfaceHandJoints) Vector3 {
	return self.Runtime.OpenXRInterface_get_hand_joint_linear_velocity(self, hand, joint)
}
func (self OpenXRInterface) GetHandJointAngularVelocity(hand OpenXRInterfaceHand, joint OpenXRInterfaceHandJoints) Vector3 {
	return self.Runtime.OpenXRInterface_get_hand_joint_angular_velocity(self, hand, joint)
}
func (self OpenXRInterface) IsHandTrackingSupported() bool {
	return self.Runtime.OpenXRInterface_is_hand_tracking_supported(self)
}
func (self OpenXRInterface) IsEyeGazeInteractionSupported() bool {
	return self.Runtime.OpenXRInterface_is_eye_gaze_interaction_supported(self)
}

type extendsOptimizedTranslation struct {
	_ [0]*extendsOptimizedTranslation
	class
}

func (self OptimizedTranslation) Translation() Translation {
	var parent Translation
	parent.class = self.class
	return parent
}
func (self OptimizedTranslation) Generate(from Translation) {
	self.Runtime.OptimizedTranslation_generate(self, from)
}

type extendsOptionButton struct {
	_ [0]*extendsOptionButton
	class
}

func (self OptionButton) Button() Button { var parent Button; parent.class = self.class; return parent }
func (self OptionButton) AddItem(label string, id int64) {
	self.Runtime.OptionButton_add_item(self, label, id)
}
func (self OptionButton) AddIconItem(texture Texture2D, label string, id int64) {
	self.Runtime.OptionButton_add_icon_item(self, texture, label, id)
}
func (self OptionButton) SetItemText(idx int64, text string) {
	self.Runtime.OptionButton_set_item_text(self, idx, text)
}
func (self OptionButton) SetItemIcon(idx int64, texture Texture2D) {
	self.Runtime.OptionButton_set_item_icon(self, idx, texture)
}
func (self OptionButton) SetItemDisabled(idx int64, disabled bool) {
	self.Runtime.OptionButton_set_item_disabled(self, idx, disabled)
}
func (self OptionButton) SetItemId(idx int64, id int64) {
	self.Runtime.OptionButton_set_item_id(self, idx, id)
}
func (self OptionButton) SetItemMetadata(idx int64, metadata any) {
	self.Runtime.OptionButton_set_item_metadata(self, idx, metadata)
}
func (self OptionButton) SetItemTooltip(idx int64, tooltip string) {
	self.Runtime.OptionButton_set_item_tooltip(self, idx, tooltip)
}
func (self OptionButton) GetItemText(idx int64) string {
	return self.Runtime.OptionButton_get_item_text(self, idx)
}
func (self OptionButton) GetItemIcon(idx int64) Texture2D {
	return self.Runtime.OptionButton_get_item_icon(self, idx)
}
func (self OptionButton) GetItemId(idx int64) int64 {
	return self.Runtime.OptionButton_get_item_id(self, idx)
}
func (self OptionButton) GetItemIndex(id int64) int64 {
	return self.Runtime.OptionButton_get_item_index(self, id)
}
func (self OptionButton) GetItemMetadata(idx int64) any {
	return self.Runtime.OptionButton_get_item_metadata(self, idx)
}
func (self OptionButton) GetItemTooltip(idx int64) string {
	return self.Runtime.OptionButton_get_item_tooltip(self, idx)
}
func (self OptionButton) IsItemDisabled(idx int64) bool {
	return self.Runtime.OptionButton_is_item_disabled(self, idx)
}
func (self OptionButton) IsItemSeparator(idx int64) bool {
	return self.Runtime.OptionButton_is_item_separator(self, idx)
}
func (self OptionButton) AddSeparator(text string) {
	self.Runtime.OptionButton_add_separator(self, text)
}
func (self OptionButton) Clear() {
	self.Runtime.OptionButton_clear(self)
}
func (self OptionButton) Select(idx int64) {
	self.Runtime.OptionButton_select(self, idx)
}
func (self OptionButton) GetSelected() int64 {
	return self.Runtime.OptionButton_get_selected(self)
}
func (self OptionButton) GetSelectedId() int64 {
	return self.Runtime.OptionButton_get_selected_id(self)
}
func (self OptionButton) GetSelectedMetadata() any {
	return self.Runtime.OptionButton_get_selected_metadata(self)
}
func (self OptionButton) RemoveItem(idx int64) {
	self.Runtime.OptionButton_remove_item(self, idx)
}
func (self OptionButton) GetPopup() PopupMenu {
	return self.Runtime.OptionButton_get_popup(self)
}
func (self OptionButton) ShowPopup() {
	self.Runtime.OptionButton_show_popup(self)
}
func (self OptionButton) SetItemCount(count int64) {
	self.Runtime.OptionButton_set_item_count(self, count)
}
func (self OptionButton) GetItemCount() int64 {
	return self.Runtime.OptionButton_get_item_count(self)
}
func (self OptionButton) HasSelectableItems() bool {
	return self.Runtime.OptionButton_has_selectable_items(self)
}
func (self OptionButton) GetSelectableItem(from_last bool) int64 {
	return self.Runtime.OptionButton_get_selectable_item(self, from_last)
}
func (self OptionButton) SetFitToLongestItem(fit bool) {
	self.Runtime.OptionButton_set_fit_to_longest_item(self, fit)
}
func (self OptionButton) IsFitToLongestItem() bool {
	return self.Runtime.OptionButton_is_fit_to_longest_item(self)
}
func (self OptionButton) SetAllowReselect(allow bool) {
	self.Runtime.OptionButton_set_allow_reselect(self, allow)
}
func (self OptionButton) GetAllowReselect() bool {
	return self.Runtime.OptionButton_get_allow_reselect(self)
}
func (self OptionButton) SetDisableShortcuts(disabled bool) {
	self.Runtime.OptionButton_set_disable_shortcuts(self, disabled)
}

type extendsPCKPacker struct {
	_ [0]*extendsPCKPacker
	class
}

func (self PCKPacker) RefCounted() RefCounted {
	var parent RefCounted
	parent.class = self.class
	return parent
}
func (self PCKPacker) PckStart(pck_name string, alignment int64, key string, encrypt_directory bool) int64 {
	return self.Runtime.PCKPacker_pck_start(self, pck_name, alignment, key, encrypt_directory)
}
func (self PCKPacker) AddFile(pck_path string, source_path string, encrypt bool) int64 {
	return self.Runtime.PCKPacker_add_file(self, pck_path, source_path, encrypt)
}
func (self PCKPacker) Flush(verbose bool) int64 {
	return self.Runtime.PCKPacker_flush(self, verbose)
}

type extendsPackedDataContainer struct {
	_ [0]*extendsPackedDataContainer
	class
}

func (self PackedDataContainer) Resource() Resource {
	var parent Resource
	parent.class = self.class
	return parent
}
func (self PackedDataContainer) Pack(value any) int64 {
	return self.Runtime.PackedDataContainer_pack(self, value)
}
func (self PackedDataContainer) Size() int64 {
	return self.Runtime.PackedDataContainer_size(self)
}

type extendsPackedDataContainerRef struct {
	_ [0]*extendsPackedDataContainerRef
	class
}

func (self PackedDataContainerRef) RefCounted() RefCounted {
	var parent RefCounted
	parent.class = self.class
	return parent
}
func (self PackedDataContainerRef) Size() int64 {
	return self.Runtime.PackedDataContainerRef_size(self)
}

type extendsPackedScene struct {
	_ [0]*extendsPackedScene
	class
}

func (self PackedScene) Resource() Resource {
	var parent Resource
	parent.class = self.class
	return parent
}
func (self PackedScene) Pack(path Node) int64 {
	return self.Runtime.PackedScene_pack(self, path)
}
func (self PackedScene) Instantiate(edit_state PackedSceneGenEditState) Node {
	return self.Runtime.PackedScene_instantiate(self, edit_state)
}
func (self PackedScene) CanInstantiate() bool {
	return self.Runtime.PackedScene_can_instantiate(self)
}
func (self PackedScene) GetState() SceneState {
	return self.Runtime.PackedScene_get_state(self)
}

type extendsPacketPeer struct {
	_ [0]*extendsPacketPeer
	class
}

func (self PacketPeer) RefCounted() RefCounted {
	var parent RefCounted
	parent.class = self.class
	return parent
}
func (self PacketPeer) GetVar(allow_objects bool) any {
	return self.Runtime.PacketPeer_get_var(self, allow_objects)
}
func (self PacketPeer) PutVar(v any, full_objects bool) int64 {
	return self.Runtime.PacketPeer_put_var(self, v, full_objects)
}
func (self PacketPeer) GetPacket() PackedByteArray {
	return self.Runtime.PacketPeer_get_packet(self)
}
func (self PacketPeer) PutPacket(buffer PackedByteArray) int64 {
	return self.Runtime.PacketPeer_put_packet(self, buffer)
}
func (self PacketPeer) GetPacketError() int64 {
	return self.Runtime.PacketPeer_get_packet_error(self)
}
func (self PacketPeer) GetAvailablePacketCount() int64 {
	return self.Runtime.PacketPeer_get_available_packet_count(self)
}
func (self PacketPeer) GetEncodeBufferMaxSize() int64 {
	return self.Runtime.PacketPeer_get_encode_buffer_max_size(self)
}
func (self PacketPeer) SetEncodeBufferMaxSize(max_size int64) {
	self.Runtime.PacketPeer_set_encode_buffer_max_size(self, max_size)
}

type extendsPacketPeerDTLS struct {
	_ [0]*extendsPacketPeerDTLS
	class
}

func (self PacketPeerDTLS) PacketPeer() PacketPeer {
	var parent PacketPeer
	parent.class = self.class
	return parent
}
func (self PacketPeerDTLS) Poll() {
	self.Runtime.PacketPeerDTLS_poll(self)
}
func (self PacketPeerDTLS) ConnectToPeer(packet_peer PacketPeerUDP, hostname string, client_options TLSOptions) int64 {
	return self.Runtime.PacketPeerDTLS_connect_to_peer(self, packet_peer, hostname, client_options)
}
func (self PacketPeerDTLS) GetStatus() PacketPeerDTLSStatus {
	return self.Runtime.PacketPeerDTLS_get_status(self)
}
func (self PacketPeerDTLS) DisconnectFromPeer() {
	self.Runtime.PacketPeerDTLS_disconnect_from_peer(self)
}

type extendsPacketPeerExtension struct {
	_ [0]*extendsPacketPeerExtension
	class
}

func (self PacketPeerExtension) PacketPeer() PacketPeer {
	var parent PacketPeer
	parent.class = self.class
	return parent
}

type extendsPacketPeerStream struct {
	_ [0]*extendsPacketPeerStream
	class
}

func (self PacketPeerStream) PacketPeer() PacketPeer {
	var parent PacketPeer
	parent.class = self.class
	return parent
}
func (self PacketPeerStream) SetStreamPeer(peer StreamPeer) {
	self.Runtime.PacketPeerStream_set_stream_peer(self, peer)
}
func (self PacketPeerStream) GetStreamPeer() StreamPeer {
	return self.Runtime.PacketPeerStream_get_stream_peer(self)
}
func (self PacketPeerStream) SetInputBufferMaxSize(max_size_bytes int64) {
	self.Runtime.PacketPeerStream_set_input_buffer_max_size(self, max_size_bytes)
}
func (self PacketPeerStream) SetOutputBufferMaxSize(max_size_bytes int64) {
	self.Runtime.PacketPeerStream_set_output_buffer_max_size(self, max_size_bytes)
}
func (self PacketPeerStream) GetInputBufferMaxSize() int64 {
	return self.Runtime.PacketPeerStream_get_input_buffer_max_size(self)
}
func (self PacketPeerStream) GetOutputBufferMaxSize() int64 {
	return self.Runtime.PacketPeerStream_get_output_buffer_max_size(self)
}

type extendsPacketPeerUDP struct {
	_ [0]*extendsPacketPeerUDP
	class
}

func (self PacketPeerUDP) PacketPeer() PacketPeer {
	var parent PacketPeer
	parent.class = self.class
	return parent
}
func (self PacketPeerUDP) Bind(port int64, bind_address string, recv_buf_size int64) int64 {
	return self.Runtime.PacketPeerUDP_bind(self, port, bind_address, recv_buf_size)
}
func (self PacketPeerUDP) Close() {
	self.Runtime.PacketPeerUDP_close(self)
}
func (self PacketPeerUDP) Wait() int64 {
	return self.Runtime.PacketPeerUDP_wait(self)
}
func (self PacketPeerUDP) IsBound() bool {
	return self.Runtime.PacketPeerUDP_is_bound(self)
}
func (self PacketPeerUDP) ConnectToHost(host string, port int64) int64 {
	return self.Runtime.PacketPeerUDP_connect_to_host(self, host, port)
}
func (self PacketPeerUDP) IsSocketConnected() bool {
	return self.Runtime.PacketPeerUDP_is_socket_connected(self)
}
func (self PacketPeerUDP) GetPacketIp() string {
	return self.Runtime.PacketPeerUDP_get_packet_ip(self)
}
func (self PacketPeerUDP) GetPacketPort() int64 {
	return self.Runtime.PacketPeerUDP_get_packet_port(self)
}
func (self PacketPeerUDP) GetLocalPort() int64 {
	return self.Runtime.PacketPeerUDP_get_local_port(self)
}
func (self PacketPeerUDP) SetDestAddress(host string, port int64) int64 {
	return self.Runtime.PacketPeerUDP_set_dest_address(self, host, port)
}
func (self PacketPeerUDP) SetBroadcastEnabled(enabled bool) {
	self.Runtime.PacketPeerUDP_set_broadcast_enabled(self, enabled)
}
func (self PacketPeerUDP) JoinMulticastGroup(multicast_address string, interface_name string) int64 {
	return self.Runtime.PacketPeerUDP_join_multicast_group(self, multicast_address, interface_name)
}
func (self PacketPeerUDP) LeaveMulticastGroup(multicast_address string, interface_name string) int64 {
	return self.Runtime.PacketPeerUDP_leave_multicast_group(self, multicast_address, interface_name)
}

type extendsPanel struct {
	_ [0]*extendsPanel
	class
}

func (self Panel) Control() Control { var parent Control; parent.class = self.class; return parent }

type extendsPanelContainer struct {
	_ [0]*extendsPanelContainer
	class
}

func (self PanelContainer) Container() Container {
	var parent Container
	parent.class = self.class
	return parent
}

type extendsPanoramaSkyMaterial struct {
	_ [0]*extendsPanoramaSkyMaterial
	class
}

func (self PanoramaSkyMaterial) Material() Material {
	var parent Material
	parent.class = self.class
	return parent
}
func (self PanoramaSkyMaterial) SetPanorama(texture Texture2D) {
	self.Runtime.PanoramaSkyMaterial_set_panorama(self, texture)
}
func (self PanoramaSkyMaterial) GetPanorama() Texture2D {
	return self.Runtime.PanoramaSkyMaterial_get_panorama(self)
}
func (self PanoramaSkyMaterial) SetFilteringEnabled(enabled bool) {
	self.Runtime.PanoramaSkyMaterial_set_filtering_enabled(self, enabled)
}
func (self PanoramaSkyMaterial) IsFilteringEnabled() bool {
	return self.Runtime.PanoramaSkyMaterial_is_filtering_enabled(self)
}
func (self PanoramaSkyMaterial) SetEnergyMultiplier(multiplier Float) {
	self.Runtime.PanoramaSkyMaterial_set_energy_multiplier(self, multiplier)
}
func (self PanoramaSkyMaterial) GetEnergyMultiplier() Float {
	return self.Runtime.PanoramaSkyMaterial_get_energy_multiplier(self)
}

type extendsParallaxBackground struct {
	_ [0]*extendsParallaxBackground
	class
}

func (self ParallaxBackground) CanvasLayer() CanvasLayer {
	var parent CanvasLayer
	parent.class = self.class
	return parent
}
func (self ParallaxBackground) SetScrollOffset(offset Vector2) {
	self.Runtime.ParallaxBackground_set_scroll_offset(self, offset)
}
func (self ParallaxBackground) GetScrollOffset() Vector2 {
	return self.Runtime.ParallaxBackground_get_scroll_offset(self)
}
func (self ParallaxBackground) SetScrollBaseOffset(offset Vector2) {
	self.Runtime.ParallaxBackground_set_scroll_base_offset(self, offset)
}
func (self ParallaxBackground) GetScrollBaseOffset() Vector2 {
	return self.Runtime.ParallaxBackground_get_scroll_base_offset(self)
}
func (self ParallaxBackground) SetScrollBaseScale(scale Vector2) {
	self.Runtime.ParallaxBackground_set_scroll_base_scale(self, scale)
}
func (self ParallaxBackground) GetScrollBaseScale() Vector2 {
	return self.Runtime.ParallaxBackground_get_scroll_base_scale(self)
}
func (self ParallaxBackground) SetLimitBegin(offset Vector2) {
	self.Runtime.ParallaxBackground_set_limit_begin(self, offset)
}
func (self ParallaxBackground) GetLimitBegin() Vector2 {
	return self.Runtime.ParallaxBackground_get_limit_begin(self)
}
func (self ParallaxBackground) SetLimitEnd(offset Vector2) {
	self.Runtime.ParallaxBackground_set_limit_end(self, offset)
}
func (self ParallaxBackground) GetLimitEnd() Vector2 {
	return self.Runtime.ParallaxBackground_get_limit_end(self)
}
func (self ParallaxBackground) SetIgnoreCameraZoom(ignore bool) {
	self.Runtime.ParallaxBackground_set_ignore_camera_zoom(self, ignore)
}
func (self ParallaxBackground) IsIgnoreCameraZoom() bool {
	return self.Runtime.ParallaxBackground_is_ignore_camera_zoom(self)
}

type extendsParallaxLayer struct {
	_ [0]*extendsParallaxLayer
	class
}

func (self ParallaxLayer) Node2D() Node2D {
	var parent Node2D
	parent.class = self.class
	return parent
}
func (self ParallaxLayer) SetMotionScale(scale Vector2) {
	self.Runtime.ParallaxLayer_set_motion_scale(self, scale)
}
func (self ParallaxLayer) GetMotionScale() Vector2 {
	return self.Runtime.ParallaxLayer_get_motion_scale(self)
}
func (self ParallaxLayer) SetMotionOffset(offset Vector2) {
	self.Runtime.ParallaxLayer_set_motion_offset(self, offset)
}
func (self ParallaxLayer) GetMotionOffset() Vector2 {
	return self.Runtime.ParallaxLayer_get_motion_offset(self)
}
func (self ParallaxLayer) SetMirroring(mirror Vector2) {
	self.Runtime.ParallaxLayer_set_mirroring(self, mirror)
}
func (self ParallaxLayer) GetMirroring() Vector2 {
	return self.Runtime.ParallaxLayer_get_mirroring(self)
}

type extendsParticleProcessMaterial struct {
	_ [0]*extendsParticleProcessMaterial
	class
}

func (self ParticleProcessMaterial) Material() Material {
	var parent Material
	parent.class = self.class
	return parent
}
func (self ParticleProcessMaterial) SetDirection(degrees Vector3) {
	self.Runtime.ParticleProcessMaterial_set_direction(self, degrees)
}
func (self ParticleProcessMaterial) GetDirection() Vector3 {
	return self.Runtime.ParticleProcessMaterial_get_direction(self)
}
func (self ParticleProcessMaterial) SetInheritVelocityRatio(ratio Float) {
	self.Runtime.ParticleProcessMaterial_set_inherit_velocity_ratio(self, ratio)
}
func (self ParticleProcessMaterial) GetInheritVelocityRatio() Float {
	return self.Runtime.ParticleProcessMaterial_get_inherit_velocity_ratio(self)
}
func (self ParticleProcessMaterial) SetSpread(degrees Float) {
	self.Runtime.ParticleProcessMaterial_set_spread(self, degrees)
}
func (self ParticleProcessMaterial) GetSpread() Float {
	return self.Runtime.ParticleProcessMaterial_get_spread(self)
}
func (self ParticleProcessMaterial) SetFlatness(amount Float) {
	self.Runtime.ParticleProcessMaterial_set_flatness(self, amount)
}
func (self ParticleProcessMaterial) GetFlatness() Float {
	return self.Runtime.ParticleProcessMaterial_get_flatness(self)
}
func (self ParticleProcessMaterial) SetParam(param ParticleProcessMaterialParameter, value Vector2) {
	self.Runtime.ParticleProcessMaterial_set_param(self, param, value)
}
func (self ParticleProcessMaterial) GetParam(param ParticleProcessMaterialParameter) Vector2 {
	return self.Runtime.ParticleProcessMaterial_get_param(self, param)
}
func (self ParticleProcessMaterial) SetParamMin(param ParticleProcessMaterialParameter, value Float) {
	self.Runtime.ParticleProcessMaterial_set_param_min(self, param, value)
}
func (self ParticleProcessMaterial) GetParamMin(param ParticleProcessMaterialParameter) Float {
	return self.Runtime.ParticleProcessMaterial_get_param_min(self, param)
}
func (self ParticleProcessMaterial) SetParamMax(param ParticleProcessMaterialParameter, value Float) {
	self.Runtime.ParticleProcessMaterial_set_param_max(self, param, value)
}
func (self ParticleProcessMaterial) GetParamMax(param ParticleProcessMaterialParameter) Float {
	return self.Runtime.ParticleProcessMaterial_get_param_max(self, param)
}
func (self ParticleProcessMaterial) SetParamTexture(param ParticleProcessMaterialParameter, texture Texture2D) {
	self.Runtime.ParticleProcessMaterial_set_param_texture(self, param, texture)
}
func (self ParticleProcessMaterial) GetParamTexture(param ParticleProcessMaterialParameter) Texture2D {
	return self.Runtime.ParticleProcessMaterial_get_param_texture(self, param)
}
func (self ParticleProcessMaterial) SetColor(color Color) {
	self.Runtime.ParticleProcessMaterial_set_color(self, color)
}
func (self ParticleProcessMaterial) GetColor() Color {
	return self.Runtime.ParticleProcessMaterial_get_color(self)
}
func (self ParticleProcessMaterial) SetColorRamp(ramp Texture2D) {
	self.Runtime.ParticleProcessMaterial_set_color_ramp(self, ramp)
}
func (self ParticleProcessMaterial) GetColorRamp() Texture2D {
	return self.Runtime.ParticleProcessMaterial_get_color_ramp(self)
}
func (self ParticleProcessMaterial) SetAlphaCurve(curve Texture2D) {
	self.Runtime.ParticleProcessMaterial_set_alpha_curve(self, curve)
}
func (self ParticleProcessMaterial) GetAlphaCurve() Texture2D {
	return self.Runtime.ParticleProcessMaterial_get_alpha_curve(self)
}
func (self ParticleProcessMaterial) SetEmissionCurve(curve Texture2D) {
	self.Runtime.ParticleProcessMaterial_set_emission_curve(self, curve)
}
func (self ParticleProcessMaterial) GetEmissionCurve() Texture2D {
	return self.Runtime.ParticleProcessMaterial_get_emission_curve(self)
}
func (self ParticleProcessMaterial) SetColorInitialRamp(ramp Texture2D) {
	self.Runtime.ParticleProcessMaterial_set_color_initial_ramp(self, ramp)
}
func (self ParticleProcessMaterial) GetColorInitialRamp() Texture2D {
	return self.Runtime.ParticleProcessMaterial_get_color_initial_ramp(self)
}
func (self ParticleProcessMaterial) SetVelocityLimitCurve(curve Texture2D) {
	self.Runtime.ParticleProcessMaterial_set_velocity_limit_curve(self, curve)
}
func (self ParticleProcessMaterial) GetVelocityLimitCurve() Texture2D {
	return self.Runtime.ParticleProcessMaterial_get_velocity_limit_curve(self)
}
func (self ParticleProcessMaterial) SetParticleFlag(particle_flag ParticleProcessMaterialParticleFlags, enable bool) {
	self.Runtime.ParticleProcessMaterial_set_particle_flag(self, particle_flag, enable)
}
func (self ParticleProcessMaterial) GetParticleFlag(particle_flag ParticleProcessMaterialParticleFlags) bool {
	return self.Runtime.ParticleProcessMaterial_get_particle_flag(self, particle_flag)
}
func (self ParticleProcessMaterial) SetVelocityPivot(pivot Vector3) {
	self.Runtime.ParticleProcessMaterial_set_velocity_pivot(self, pivot)
}
func (self ParticleProcessMaterial) GetVelocityPivot() Vector3 {
	return self.Runtime.ParticleProcessMaterial_get_velocity_pivot(self)
}
func (self ParticleProcessMaterial) SetEmissionShape(shape ParticleProcessMaterialEmissionShape) {
	self.Runtime.ParticleProcessMaterial_set_emission_shape(self, shape)
}
func (self ParticleProcessMaterial) GetEmissionShape() ParticleProcessMaterialEmissionShape {
	return self.Runtime.ParticleProcessMaterial_get_emission_shape(self)
}
func (self ParticleProcessMaterial) SetEmissionSphereRadius(radius Float) {
	self.Runtime.ParticleProcessMaterial_set_emission_sphere_radius(self, radius)
}
func (self ParticleProcessMaterial) GetEmissionSphereRadius() Float {
	return self.Runtime.ParticleProcessMaterial_get_emission_sphere_radius(self)
}
func (self ParticleProcessMaterial) SetEmissionBoxExtents(extents Vector3) {
	self.Runtime.ParticleProcessMaterial_set_emission_box_extents(self, extents)
}
func (self ParticleProcessMaterial) GetEmissionBoxExtents() Vector3 {
	return self.Runtime.ParticleProcessMaterial_get_emission_box_extents(self)
}
func (self ParticleProcessMaterial) SetEmissionPointTexture(texture Texture2D) {
	self.Runtime.ParticleProcessMaterial_set_emission_point_texture(self, texture)
}
func (self ParticleProcessMaterial) GetEmissionPointTexture() Texture2D {
	return self.Runtime.ParticleProcessMaterial_get_emission_point_texture(self)
}
func (self ParticleProcessMaterial) SetEmissionNormalTexture(texture Texture2D) {
	self.Runtime.ParticleProcessMaterial_set_emission_normal_texture(self, texture)
}
func (self ParticleProcessMaterial) GetEmissionNormalTexture() Texture2D {
	return self.Runtime.ParticleProcessMaterial_get_emission_normal_texture(self)
}
func (self ParticleProcessMaterial) SetEmissionColorTexture(texture Texture2D) {
	self.Runtime.ParticleProcessMaterial_set_emission_color_texture(self, texture)
}
func (self ParticleProcessMaterial) GetEmissionColorTexture() Texture2D {
	return self.Runtime.ParticleProcessMaterial_get_emission_color_texture(self)
}
func (self ParticleProcessMaterial) SetEmissionPointCount(point_count int64) {
	self.Runtime.ParticleProcessMaterial_set_emission_point_count(self, point_count)
}
func (self ParticleProcessMaterial) GetEmissionPointCount() int64 {
	return self.Runtime.ParticleProcessMaterial_get_emission_point_count(self)
}
func (self ParticleProcessMaterial) SetEmissionRingAxis(axis Vector3) {
	self.Runtime.ParticleProcessMaterial_set_emission_ring_axis(self, axis)
}
func (self ParticleProcessMaterial) GetEmissionRingAxis() Vector3 {
	return self.Runtime.ParticleProcessMaterial_get_emission_ring_axis(self)
}
func (self ParticleProcessMaterial) SetEmissionRingHeight(height Float) {
	self.Runtime.ParticleProcessMaterial_set_emission_ring_height(self, height)
}
func (self ParticleProcessMaterial) GetEmissionRingHeight() Float {
	return self.Runtime.ParticleProcessMaterial_get_emission_ring_height(self)
}
func (self ParticleProcessMaterial) SetEmissionRingRadius(radius Float) {
	self.Runtime.ParticleProcessMaterial_set_emission_ring_radius(self, radius)
}
func (self ParticleProcessMaterial) GetEmissionRingRadius() Float {
	return self.Runtime.ParticleProcessMaterial_get_emission_ring_radius(self)
}
func (self ParticleProcessMaterial) SetEmissionRingInnerRadius(inner_radius Float) {
	self.Runtime.ParticleProcessMaterial_set_emission_ring_inner_radius(self, inner_radius)
}
func (self ParticleProcessMaterial) GetEmissionRingInnerRadius() Float {
	return self.Runtime.ParticleProcessMaterial_get_emission_ring_inner_radius(self)
}
func (self ParticleProcessMaterial) SetEmissionShapeOffset(emission_shape_offset Vector3) {
	self.Runtime.ParticleProcessMaterial_set_emission_shape_offset(self, emission_shape_offset)
}
func (self ParticleProcessMaterial) GetEmissionShapeOffset() Vector3 {
	return self.Runtime.ParticleProcessMaterial_get_emission_shape_offset(self)
}
func (self ParticleProcessMaterial) SetEmissionShapeScale(emission_shape_scale Vector3) {
	self.Runtime.ParticleProcessMaterial_set_emission_shape_scale(self, emission_shape_scale)
}
func (self ParticleProcessMaterial) GetEmissionShapeScale() Vector3 {
	return self.Runtime.ParticleProcessMaterial_get_emission_shape_scale(self)
}
func (self ParticleProcessMaterial) GetTurbulenceEnabled() bool {
	return self.Runtime.ParticleProcessMaterial_get_turbulence_enabled(self)
}
func (self ParticleProcessMaterial) SetTurbulenceEnabled(turbulence_enabled bool) {
	self.Runtime.ParticleProcessMaterial_set_turbulence_enabled(self, turbulence_enabled)
}
func (self ParticleProcessMaterial) GetTurbulenceNoiseStrength() Float {
	return self.Runtime.ParticleProcessMaterial_get_turbulence_noise_strength(self)
}
func (self ParticleProcessMaterial) SetTurbulenceNoiseStrength(turbulence_noise_strength Float) {
	self.Runtime.ParticleProcessMaterial_set_turbulence_noise_strength(self, turbulence_noise_strength)
}
func (self ParticleProcessMaterial) GetTurbulenceNoiseScale() Float {
	return self.Runtime.ParticleProcessMaterial_get_turbulence_noise_scale(self)
}
func (self ParticleProcessMaterial) SetTurbulenceNoiseScale(turbulence_noise_scale Float) {
	self.Runtime.ParticleProcessMaterial_set_turbulence_noise_scale(self, turbulence_noise_scale)
}
func (self ParticleProcessMaterial) GetTurbulenceNoiseSpeedRandom() Float {
	return self.Runtime.ParticleProcessMaterial_get_turbulence_noise_speed_random(self)
}
func (self ParticleProcessMaterial) SetTurbulenceNoiseSpeedRandom(turbulence_noise_speed_random Float) {
	self.Runtime.ParticleProcessMaterial_set_turbulence_noise_speed_random(self, turbulence_noise_speed_random)
}
func (self ParticleProcessMaterial) GetTurbulenceNoiseSpeed() Vector3 {
	return self.Runtime.ParticleProcessMaterial_get_turbulence_noise_speed(self)
}
func (self ParticleProcessMaterial) SetTurbulenceNoiseSpeed(turbulence_noise_speed Vector3) {
	self.Runtime.ParticleProcessMaterial_set_turbulence_noise_speed(self, turbulence_noise_speed)
}
func (self ParticleProcessMaterial) GetGravity() Vector3 {
	return self.Runtime.ParticleProcessMaterial_get_gravity(self)
}
func (self ParticleProcessMaterial) SetGravity(accel_vec Vector3) {
	self.Runtime.ParticleProcessMaterial_set_gravity(self, accel_vec)
}
func (self ParticleProcessMaterial) SetLifetimeRandomness(randomness Float) {
	self.Runtime.ParticleProcessMaterial_set_lifetime_randomness(self, randomness)
}
func (self ParticleProcessMaterial) GetLifetimeRandomness() Float {
	return self.Runtime.ParticleProcessMaterial_get_lifetime_randomness(self)
}
func (self ParticleProcessMaterial) GetSubEmitterMode() ParticleProcessMaterialSubEmitterMode {
	return self.Runtime.ParticleProcessMaterial_get_sub_emitter_mode(self)
}
func (self ParticleProcessMaterial) SetSubEmitterMode(mode ParticleProcessMaterialSubEmitterMode) {
	self.Runtime.ParticleProcessMaterial_set_sub_emitter_mode(self, mode)
}
func (self ParticleProcessMaterial) GetSubEmitterFrequency() Float {
	return self.Runtime.ParticleProcessMaterial_get_sub_emitter_frequency(self)
}
func (self ParticleProcessMaterial) SetSubEmitterFrequency(hz Float) {
	self.Runtime.ParticleProcessMaterial_set_sub_emitter_frequency(self, hz)
}
func (self ParticleProcessMaterial) GetSubEmitterAmountAtEnd() int64 {
	return self.Runtime.ParticleProcessMaterial_get_sub_emitter_amount_at_end(self)
}
func (self ParticleProcessMaterial) SetSubEmitterAmountAtEnd(amount int64) {
	self.Runtime.ParticleProcessMaterial_set_sub_emitter_amount_at_end(self, amount)
}
func (self ParticleProcessMaterial) GetSubEmitterAmountAtCollision() int64 {
	return self.Runtime.ParticleProcessMaterial_get_sub_emitter_amount_at_collision(self)
}
func (self ParticleProcessMaterial) SetSubEmitterAmountAtCollision(amount int64) {
	self.Runtime.ParticleProcessMaterial_set_sub_emitter_amount_at_collision(self, amount)
}
func (self ParticleProcessMaterial) GetSubEmitterKeepVelocity() bool {
	return self.Runtime.ParticleProcessMaterial_get_sub_emitter_keep_velocity(self)
}
func (self ParticleProcessMaterial) SetSubEmitterKeepVelocity(enable bool) {
	self.Runtime.ParticleProcessMaterial_set_sub_emitter_keep_velocity(self, enable)
}
func (self ParticleProcessMaterial) SetAttractorInteractionEnabled(enabled bool) {
	self.Runtime.ParticleProcessMaterial_set_attractor_interaction_enabled(self, enabled)
}
func (self ParticleProcessMaterial) IsAttractorInteractionEnabled() bool {
	return self.Runtime.ParticleProcessMaterial_is_attractor_interaction_enabled(self)
}
func (self ParticleProcessMaterial) SetCollisionMode(mode ParticleProcessMaterialCollisionMode) {
	self.Runtime.ParticleProcessMaterial_set_collision_mode(self, mode)
}
func (self ParticleProcessMaterial) GetCollisionMode() ParticleProcessMaterialCollisionMode {
	return self.Runtime.ParticleProcessMaterial_get_collision_mode(self)
}
func (self ParticleProcessMaterial) SetCollisionUseScale(radius bool) {
	self.Runtime.ParticleProcessMaterial_set_collision_use_scale(self, radius)
}
func (self ParticleProcessMaterial) IsCollisionUsingScale() bool {
	return self.Runtime.ParticleProcessMaterial_is_collision_using_scale(self)
}
func (self ParticleProcessMaterial) SetCollisionFriction(friction Float) {
	self.Runtime.ParticleProcessMaterial_set_collision_friction(self, friction)
}
func (self ParticleProcessMaterial) GetCollisionFriction() Float {
	return self.Runtime.ParticleProcessMaterial_get_collision_friction(self)
}
func (self ParticleProcessMaterial) SetCollisionBounce(bounce Float) {
	self.Runtime.ParticleProcessMaterial_set_collision_bounce(self, bounce)
}
func (self ParticleProcessMaterial) GetCollisionBounce() Float {
	return self.Runtime.ParticleProcessMaterial_get_collision_bounce(self)
}

type extendsPath2D struct {
	_ [0]*extendsPath2D
	class
}

func (self Path2D) Node2D() Node2D { var parent Node2D; parent.class = self.class; return parent }
func (self Path2D) SetCurve(curve Curve2D) {
	self.Runtime.Path2D_set_curve(self, curve)
}
func (self Path2D) GetCurve() Curve2D {
	return self.Runtime.Path2D_get_curve(self)
}

type extendsPath3D struct {
	_ [0]*extendsPath3D
	class
}

func (self Path3D) Node3D() Node3D { var parent Node3D; parent.class = self.class; return parent }
func (self Path3D) SetCurve(curve Curve3D) {
	self.Runtime.Path3D_set_curve(self, curve)
}
func (self Path3D) GetCurve() Curve3D {
	return self.Runtime.Path3D_get_curve(self)
}

type extendsPathFollow2D struct {
	_ [0]*extendsPathFollow2D
	class
}

func (self PathFollow2D) Node2D() Node2D { var parent Node2D; parent.class = self.class; return parent }
func (self PathFollow2D) SetProgress(progress Float) {
	self.Runtime.PathFollow2D_set_progress(self, progress)
}
func (self PathFollow2D) GetProgress() Float {
	return self.Runtime.PathFollow2D_get_progress(self)
}
func (self PathFollow2D) SetHOffset(h_offset Float) {
	self.Runtime.PathFollow2D_set_h_offset(self, h_offset)
}
func (self PathFollow2D) GetHOffset() Float {
	return self.Runtime.PathFollow2D_get_h_offset(self)
}
func (self PathFollow2D) SetVOffset(v_offset Float) {
	self.Runtime.PathFollow2D_set_v_offset(self, v_offset)
}
func (self PathFollow2D) GetVOffset() Float {
	return self.Runtime.PathFollow2D_get_v_offset(self)
}
func (self PathFollow2D) SetProgressRatio(ratio Float) {
	self.Runtime.PathFollow2D_set_progress_ratio(self, ratio)
}
func (self PathFollow2D) GetProgressRatio() Float {
	return self.Runtime.PathFollow2D_get_progress_ratio(self)
}
func (self PathFollow2D) SetRotates(enabled bool) {
	self.Runtime.PathFollow2D_set_rotates(self, enabled)
}
func (self PathFollow2D) IsRotating() bool {
	return self.Runtime.PathFollow2D_is_rotating(self)
}
func (self PathFollow2D) SetCubicInterpolation(enabled bool) {
	self.Runtime.PathFollow2D_set_cubic_interpolation(self, enabled)
}
func (self PathFollow2D) GetCubicInterpolation() bool {
	return self.Runtime.PathFollow2D_get_cubic_interpolation(self)
}
func (self PathFollow2D) SetLoop(loop bool) {
	self.Runtime.PathFollow2D_set_loop(self, loop)
}
func (self PathFollow2D) HasLoop() bool {
	return self.Runtime.PathFollow2D_has_loop(self)
}

type extendsPathFollow3D struct {
	_ [0]*extendsPathFollow3D
	class
}

func (self PathFollow3D) Node3D() Node3D { var parent Node3D; parent.class = self.class; return parent }
func (self PathFollow3D) SetProgress(progress Float) {
	self.Runtime.PathFollow3D_set_progress(self, progress)
}
func (self PathFollow3D) GetProgress() Float {
	return self.Runtime.PathFollow3D_get_progress(self)
}
func (self PathFollow3D) SetHOffset(h_offset Float) {
	self.Runtime.PathFollow3D_set_h_offset(self, h_offset)
}
func (self PathFollow3D) GetHOffset() Float {
	return self.Runtime.PathFollow3D_get_h_offset(self)
}
func (self PathFollow3D) SetVOffset(v_offset Float) {
	self.Runtime.PathFollow3D_set_v_offset(self, v_offset)
}
func (self PathFollow3D) GetVOffset() Float {
	return self.Runtime.PathFollow3D_get_v_offset(self)
}
func (self PathFollow3D) SetProgressRatio(ratio Float) {
	self.Runtime.PathFollow3D_set_progress_ratio(self, ratio)
}
func (self PathFollow3D) GetProgressRatio() Float {
	return self.Runtime.PathFollow3D_get_progress_ratio(self)
}
func (self PathFollow3D) SetRotationMode(rotation_mode PathFollow3DRotationMode) {
	self.Runtime.PathFollow3D_set_rotation_mode(self, rotation_mode)
}
func (self PathFollow3D) GetRotationMode() PathFollow3DRotationMode {
	return self.Runtime.PathFollow3D_get_rotation_mode(self)
}
func (self PathFollow3D) SetCubicInterpolation(enabled bool) {
	self.Runtime.PathFollow3D_set_cubic_interpolation(self, enabled)
}
func (self PathFollow3D) GetCubicInterpolation() bool {
	return self.Runtime.PathFollow3D_get_cubic_interpolation(self)
}
func (self PathFollow3D) SetUseModelFront(enabled bool) {
	self.Runtime.PathFollow3D_set_use_model_front(self, enabled)
}
func (self PathFollow3D) IsUsingModelFront() bool {
	return self.Runtime.PathFollow3D_is_using_model_front(self)
}
func (self PathFollow3D) SetLoop(loop bool) {
	self.Runtime.PathFollow3D_set_loop(self, loop)
}
func (self PathFollow3D) HasLoop() bool {
	return self.Runtime.PathFollow3D_has_loop(self)
}
func (self PathFollow3D) SetTiltEnabled(enabled bool) {
	self.Runtime.PathFollow3D_set_tilt_enabled(self, enabled)
}
func (self PathFollow3D) IsTiltEnabled() bool {
	return self.Runtime.PathFollow3D_is_tilt_enabled(self)
}
func (self PathFollow3D) CorrectPosture(transform Transform3D, rotation_mode PathFollow3DRotationMode) Transform3D {
	return self.Runtime.PathFollow3D_correct_posture(self, transform, rotation_mode)
}

type extendsPerformance struct {
	_ [0]*extendsPerformance
	class
}

func (self Performance) Object() Object { var parent Object; parent.class = self.class; return parent }
func (self Performance) GetMonitor(monitor PerformanceMonitor) Float {
	return self.Runtime.Performance_get_monitor(self, monitor)
}
func (self Performance) AddCustomMonitor(id string, callable Callable, arguments Array) {
	self.Runtime.Performance_add_custom_monitor(self, id, callable, arguments)
}
func (self Performance) RemoveCustomMonitor(id string) {
	self.Runtime.Performance_remove_custom_monitor(self, id)
}
func (self Performance) HasCustomMonitor(id string) bool {
	return self.Runtime.Performance_has_custom_monitor(self, id)
}
func (self Performance) GetCustomMonitor(id string) any {
	return self.Runtime.Performance_get_custom_monitor(self, id)
}
func (self Performance) GetMonitorModificationTime() int64 {
	return self.Runtime.Performance_get_monitor_modification_time(self)
}
func (self Performance) GetCustomMonitorNames() ArrayOf[string] {
	return self.Runtime.Performance_get_custom_monitor_names(self)
}

type extendsPhysicalBone2D struct {
	_ [0]*extendsPhysicalBone2D
	class
}

func (self PhysicalBone2D) RigidBody2D() RigidBody2D {
	var parent RigidBody2D
	parent.class = self.class
	return parent
}
func (self PhysicalBone2D) GetJoint() Joint2D {
	return self.Runtime.PhysicalBone2D_get_joint(self)
}
func (self PhysicalBone2D) GetAutoConfigureJoint() bool {
	return self.Runtime.PhysicalBone2D_get_auto_configure_joint(self)
}
func (self PhysicalBone2D) SetAutoConfigureJoint(auto_configure_joint bool) {
	self.Runtime.PhysicalBone2D_set_auto_configure_joint(self, auto_configure_joint)
}
func (self PhysicalBone2D) SetSimulatePhysics(simulate_physics bool) {
	self.Runtime.PhysicalBone2D_set_simulate_physics(self, simulate_physics)
}
func (self PhysicalBone2D) GetSimulatePhysics() bool {
	return self.Runtime.PhysicalBone2D_get_simulate_physics(self)
}
func (self PhysicalBone2D) IsSimulatingPhysics() bool {
	return self.Runtime.PhysicalBone2D_is_simulating_physics(self)
}
func (self PhysicalBone2D) SetBone2dNodepath(nodepath NodePath) {
	self.Runtime.PhysicalBone2D_set_bone2d_nodepath(self, nodepath)
}
func (self PhysicalBone2D) GetBone2dNodepath() NodePath {
	return self.Runtime.PhysicalBone2D_get_bone2d_nodepath(self)
}
func (self PhysicalBone2D) SetBone2dIndex(bone_index int64) {
	self.Runtime.PhysicalBone2D_set_bone2d_index(self, bone_index)
}
func (self PhysicalBone2D) GetBone2dIndex() int64 {
	return self.Runtime.PhysicalBone2D_get_bone2d_index(self)
}
func (self PhysicalBone2D) SetFollowBoneWhenSimulating(follow_bone bool) {
	self.Runtime.PhysicalBone2D_set_follow_bone_when_simulating(self, follow_bone)
}
func (self PhysicalBone2D) GetFollowBoneWhenSimulating() bool {
	return self.Runtime.PhysicalBone2D_get_follow_bone_when_simulating(self)
}

type extendsPhysicalBone3D struct {
	_ [0]*extendsPhysicalBone3D
	class
}

func (self PhysicalBone3D) PhysicsBody3D() PhysicsBody3D {
	var parent PhysicsBody3D
	parent.class = self.class
	return parent
}
func (self PhysicalBone3D) ApplyCentralImpulse(impulse Vector3) {
	self.Runtime.PhysicalBone3D_apply_central_impulse(self, impulse)
}
func (self PhysicalBone3D) ApplyImpulse(impulse Vector3, position Vector3) {
	self.Runtime.PhysicalBone3D_apply_impulse(self, impulse, position)
}
func (self PhysicalBone3D) SetJointType(joint_type PhysicalBone3DJointType) {
	self.Runtime.PhysicalBone3D_set_joint_type(self, joint_type)
}
func (self PhysicalBone3D) GetJointType() PhysicalBone3DJointType {
	return self.Runtime.PhysicalBone3D_get_joint_type(self)
}
func (self PhysicalBone3D) SetJointOffset(offset Transform3D) {
	self.Runtime.PhysicalBone3D_set_joint_offset(self, offset)
}
func (self PhysicalBone3D) GetJointOffset() Transform3D {
	return self.Runtime.PhysicalBone3D_get_joint_offset(self)
}
func (self PhysicalBone3D) SetJointRotation(euler Vector3) {
	self.Runtime.PhysicalBone3D_set_joint_rotation(self, euler)
}
func (self PhysicalBone3D) GetJointRotation() Vector3 {
	return self.Runtime.PhysicalBone3D_get_joint_rotation(self)
}
func (self PhysicalBone3D) SetBodyOffset(offset Transform3D) {
	self.Runtime.PhysicalBone3D_set_body_offset(self, offset)
}
func (self PhysicalBone3D) GetBodyOffset() Transform3D {
	return self.Runtime.PhysicalBone3D_get_body_offset(self)
}
func (self PhysicalBone3D) GetSimulatePhysics() bool {
	return self.Runtime.PhysicalBone3D_get_simulate_physics(self)
}
func (self PhysicalBone3D) IsSimulatingPhysics() bool {
	return self.Runtime.PhysicalBone3D_is_simulating_physics(self)
}
func (self PhysicalBone3D) GetBoneId() int64 {
	return self.Runtime.PhysicalBone3D_get_bone_id(self)
}
func (self PhysicalBone3D) SetMass(mass Float) {
	self.Runtime.PhysicalBone3D_set_mass(self, mass)
}
func (self PhysicalBone3D) GetMass() Float {
	return self.Runtime.PhysicalBone3D_get_mass(self)
}
func (self PhysicalBone3D) SetFriction(friction Float) {
	self.Runtime.PhysicalBone3D_set_friction(self, friction)
}
func (self PhysicalBone3D) GetFriction() Float {
	return self.Runtime.PhysicalBone3D_get_friction(self)
}
func (self PhysicalBone3D) SetBounce(bounce Float) {
	self.Runtime.PhysicalBone3D_set_bounce(self, bounce)
}
func (self PhysicalBone3D) GetBounce() Float {
	return self.Runtime.PhysicalBone3D_get_bounce(self)
}
func (self PhysicalBone3D) SetGravityScale(gravity_scale Float) {
	self.Runtime.PhysicalBone3D_set_gravity_scale(self, gravity_scale)
}
func (self PhysicalBone3D) GetGravityScale() Float {
	return self.Runtime.PhysicalBone3D_get_gravity_scale(self)
}
func (self PhysicalBone3D) SetLinearDampMode(linear_damp_mode PhysicalBone3DDampMode) {
	self.Runtime.PhysicalBone3D_set_linear_damp_mode(self, linear_damp_mode)
}
func (self PhysicalBone3D) GetLinearDampMode() PhysicalBone3DDampMode {
	return self.Runtime.PhysicalBone3D_get_linear_damp_mode(self)
}
func (self PhysicalBone3D) SetAngularDampMode(angular_damp_mode PhysicalBone3DDampMode) {
	self.Runtime.PhysicalBone3D_set_angular_damp_mode(self, angular_damp_mode)
}
func (self PhysicalBone3D) GetAngularDampMode() PhysicalBone3DDampMode {
	return self.Runtime.PhysicalBone3D_get_angular_damp_mode(self)
}
func (self PhysicalBone3D) SetLinearDamp(linear_damp Float) {
	self.Runtime.PhysicalBone3D_set_linear_damp(self, linear_damp)
}
func (self PhysicalBone3D) GetLinearDamp() Float {
	return self.Runtime.PhysicalBone3D_get_linear_damp(self)
}
func (self PhysicalBone3D) SetAngularDamp(angular_damp Float) {
	self.Runtime.PhysicalBone3D_set_angular_damp(self, angular_damp)
}
func (self PhysicalBone3D) GetAngularDamp() Float {
	return self.Runtime.PhysicalBone3D_get_angular_damp(self)
}
func (self PhysicalBone3D) SetLinearVelocity(linear_velocity Vector3) {
	self.Runtime.PhysicalBone3D_set_linear_velocity(self, linear_velocity)
}
func (self PhysicalBone3D) GetLinearVelocity() Vector3 {
	return self.Runtime.PhysicalBone3D_get_linear_velocity(self)
}
func (self PhysicalBone3D) SetAngularVelocity(angular_velocity Vector3) {
	self.Runtime.PhysicalBone3D_set_angular_velocity(self, angular_velocity)
}
func (self PhysicalBone3D) GetAngularVelocity() Vector3 {
	return self.Runtime.PhysicalBone3D_get_angular_velocity(self)
}
func (self PhysicalBone3D) SetUseCustomIntegrator(enable bool) {
	self.Runtime.PhysicalBone3D_set_use_custom_integrator(self, enable)
}
func (self PhysicalBone3D) IsUsingCustomIntegrator() bool {
	return self.Runtime.PhysicalBone3D_is_using_custom_integrator(self)
}
func (self PhysicalBone3D) SetCanSleep(able_to_sleep bool) {
	self.Runtime.PhysicalBone3D_set_can_sleep(self, able_to_sleep)
}
func (self PhysicalBone3D) IsAbleToSleep() bool {
	return self.Runtime.PhysicalBone3D_is_able_to_sleep(self)
}

type extendsPhysicalSkyMaterial struct {
	_ [0]*extendsPhysicalSkyMaterial
	class
}

func (self PhysicalSkyMaterial) Material() Material {
	var parent Material
	parent.class = self.class
	return parent
}
func (self PhysicalSkyMaterial) SetRayleighCoefficient(rayleigh Float) {
	self.Runtime.PhysicalSkyMaterial_set_rayleigh_coefficient(self, rayleigh)
}
func (self PhysicalSkyMaterial) GetRayleighCoefficient() Float {
	return self.Runtime.PhysicalSkyMaterial_get_rayleigh_coefficient(self)
}
func (self PhysicalSkyMaterial) SetRayleighColor(color Color) {
	self.Runtime.PhysicalSkyMaterial_set_rayleigh_color(self, color)
}
func (self PhysicalSkyMaterial) GetRayleighColor() Color {
	return self.Runtime.PhysicalSkyMaterial_get_rayleigh_color(self)
}
func (self PhysicalSkyMaterial) SetMieCoefficient(mie Float) {
	self.Runtime.PhysicalSkyMaterial_set_mie_coefficient(self, mie)
}
func (self PhysicalSkyMaterial) GetMieCoefficient() Float {
	return self.Runtime.PhysicalSkyMaterial_get_mie_coefficient(self)
}
func (self PhysicalSkyMaterial) SetMieEccentricity(eccentricity Float) {
	self.Runtime.PhysicalSkyMaterial_set_mie_eccentricity(self, eccentricity)
}
func (self PhysicalSkyMaterial) GetMieEccentricity() Float {
	return self.Runtime.PhysicalSkyMaterial_get_mie_eccentricity(self)
}
func (self PhysicalSkyMaterial) SetMieColor(color Color) {
	self.Runtime.PhysicalSkyMaterial_set_mie_color(self, color)
}
func (self PhysicalSkyMaterial) GetMieColor() Color {
	return self.Runtime.PhysicalSkyMaterial_get_mie_color(self)
}
func (self PhysicalSkyMaterial) SetTurbidity(turbidity Float) {
	self.Runtime.PhysicalSkyMaterial_set_turbidity(self, turbidity)
}
func (self PhysicalSkyMaterial) GetTurbidity() Float {
	return self.Runtime.PhysicalSkyMaterial_get_turbidity(self)
}
func (self PhysicalSkyMaterial) SetSunDiskScale(scale Float) {
	self.Runtime.PhysicalSkyMaterial_set_sun_disk_scale(self, scale)
}
func (self PhysicalSkyMaterial) GetSunDiskScale() Float {
	return self.Runtime.PhysicalSkyMaterial_get_sun_disk_scale(self)
}
func (self PhysicalSkyMaterial) SetGroundColor(color Color) {
	self.Runtime.PhysicalSkyMaterial_set_ground_color(self, color)
}
func (self PhysicalSkyMaterial) GetGroundColor() Color {
	return self.Runtime.PhysicalSkyMaterial_get_ground_color(self)
}
func (self PhysicalSkyMaterial) SetEnergyMultiplier(multiplier Float) {
	self.Runtime.PhysicalSkyMaterial_set_energy_multiplier(self, multiplier)
}
func (self PhysicalSkyMaterial) GetEnergyMultiplier() Float {
	return self.Runtime.PhysicalSkyMaterial_get_energy_multiplier(self)
}
func (self PhysicalSkyMaterial) SetUseDebanding(use_debanding bool) {
	self.Runtime.PhysicalSkyMaterial_set_use_debanding(self, use_debanding)
}
func (self PhysicalSkyMaterial) GetUseDebanding() bool {
	return self.Runtime.PhysicalSkyMaterial_get_use_debanding(self)
}
func (self PhysicalSkyMaterial) SetNightSky(night_sky Texture2D) {
	self.Runtime.PhysicalSkyMaterial_set_night_sky(self, night_sky)
}
func (self PhysicalSkyMaterial) GetNightSky() Texture2D {
	return self.Runtime.PhysicalSkyMaterial_get_night_sky(self)
}

type extendsPhysicsBody2D struct {
	_ [0]*extendsPhysicsBody2D
	class
}

func (self PhysicsBody2D) CollisionObject2D() CollisionObject2D {
	var parent CollisionObject2D
	parent.class = self.class
	return parent
}
func (self PhysicsBody2D) MoveAndCollide(motion Vector2, test_only bool, safe_margin Float, recovery_as_collision bool) KinematicCollision2D {
	return self.Runtime.PhysicsBody2D_move_and_collide(self, motion, test_only, safe_margin, recovery_as_collision)
}
func (self PhysicsBody2D) TestMove(from Transform2D, motion Vector2, collision KinematicCollision2D, safe_margin Float, recovery_as_collision bool) bool {
	return self.Runtime.PhysicsBody2D_test_move(self, from, motion, collision, safe_margin, recovery_as_collision)
}
func (self PhysicsBody2D) GetCollisionExceptions() ArrayOf[PhysicsBody2D] {
	return self.Runtime.PhysicsBody2D_get_collision_exceptions(self)
}
func (self PhysicsBody2D) AddCollisionExceptionWith(body Node) {
	self.Runtime.PhysicsBody2D_add_collision_exception_with(self, body)
}
func (self PhysicsBody2D) RemoveCollisionExceptionWith(body Node) {
	self.Runtime.PhysicsBody2D_remove_collision_exception_with(self, body)
}

type extendsPhysicsBody3D struct {
	_ [0]*extendsPhysicsBody3D
	class
}

func (self PhysicsBody3D) CollisionObject3D() CollisionObject3D {
	var parent CollisionObject3D
	parent.class = self.class
	return parent
}
func (self PhysicsBody3D) MoveAndCollide(motion Vector3, test_only bool, safe_margin Float, recovery_as_collision bool, max_collisions int64) KinematicCollision3D {
	return self.Runtime.PhysicsBody3D_move_and_collide(self, motion, test_only, safe_margin, recovery_as_collision, max_collisions)
}
func (self PhysicsBody3D) TestMove(from Transform3D, motion Vector3, collision KinematicCollision3D, safe_margin Float, recovery_as_collision bool, max_collisions int64) bool {
	return self.Runtime.PhysicsBody3D_test_move(self, from, motion, collision, safe_margin, recovery_as_collision, max_collisions)
}
func (self PhysicsBody3D) SetAxisLock(axis PhysicsServer3DBodyAxis, lock bool) {
	self.Runtime.PhysicsBody3D_set_axis_lock(self, axis, lock)
}
func (self PhysicsBody3D) GetAxisLock(axis PhysicsServer3DBodyAxis) bool {
	return self.Runtime.PhysicsBody3D_get_axis_lock(self, axis)
}
func (self PhysicsBody3D) GetCollisionExceptions() ArrayOf[PhysicsBody3D] {
	return self.Runtime.PhysicsBody3D_get_collision_exceptions(self)
}
func (self PhysicsBody3D) AddCollisionExceptionWith(body Node) {
	self.Runtime.PhysicsBody3D_add_collision_exception_with(self, body)
}
func (self PhysicsBody3D) RemoveCollisionExceptionWith(body Node) {
	self.Runtime.PhysicsBody3D_remove_collision_exception_with(self, body)
}

type extendsPhysicsDirectBodyState2D struct {
	_ [0]*extendsPhysicsDirectBodyState2D
	class
}

func (self PhysicsDirectBodyState2D) Object() Object {
	var parent Object
	parent.class = self.class
	return parent
}
func (self PhysicsDirectBodyState2D) GetTotalGravity() Vector2 {
	return self.Runtime.PhysicsDirectBodyState2D_get_total_gravity(self)
}
func (self PhysicsDirectBodyState2D) GetTotalLinearDamp() Float {
	return self.Runtime.PhysicsDirectBodyState2D_get_total_linear_damp(self)
}
func (self PhysicsDirectBodyState2D) GetTotalAngularDamp() Float {
	return self.Runtime.PhysicsDirectBodyState2D_get_total_angular_damp(self)
}
func (self PhysicsDirectBodyState2D) GetCenterOfMass() Vector2 {
	return self.Runtime.PhysicsDirectBodyState2D_get_center_of_mass(self)
}
func (self PhysicsDirectBodyState2D) GetCenterOfMassLocal() Vector2 {
	return self.Runtime.PhysicsDirectBodyState2D_get_center_of_mass_local(self)
}
func (self PhysicsDirectBodyState2D) GetInverseMass() Float {
	return self.Runtime.PhysicsDirectBodyState2D_get_inverse_mass(self)
}
func (self PhysicsDirectBodyState2D) GetInverseInertia() Float {
	return self.Runtime.PhysicsDirectBodyState2D_get_inverse_inertia(self)
}
func (self PhysicsDirectBodyState2D) SetLinearVelocity(velocity Vector2) {
	self.Runtime.PhysicsDirectBodyState2D_set_linear_velocity(self, velocity)
}
func (self PhysicsDirectBodyState2D) GetLinearVelocity() Vector2 {
	return self.Runtime.PhysicsDirectBodyState2D_get_linear_velocity(self)
}
func (self PhysicsDirectBodyState2D) SetAngularVelocity(velocity Float) {
	self.Runtime.PhysicsDirectBodyState2D_set_angular_velocity(self, velocity)
}
func (self PhysicsDirectBodyState2D) GetAngularVelocity() Float {
	return self.Runtime.PhysicsDirectBodyState2D_get_angular_velocity(self)
}
func (self PhysicsDirectBodyState2D) SetTransform(transform Transform2D) {
	self.Runtime.PhysicsDirectBodyState2D_set_transform(self, transform)
}
func (self PhysicsDirectBodyState2D) GetTransform() Transform2D {
	return self.Runtime.PhysicsDirectBodyState2D_get_transform(self)
}
func (self PhysicsDirectBodyState2D) GetVelocityAtLocalPosition(local_position Vector2) Vector2 {
	return self.Runtime.PhysicsDirectBodyState2D_get_velocity_at_local_position(self, local_position)
}
func (self PhysicsDirectBodyState2D) ApplyCentralImpulse(impulse Vector2) {
	self.Runtime.PhysicsDirectBodyState2D_apply_central_impulse(self, impulse)
}
func (self PhysicsDirectBodyState2D) ApplyTorqueImpulse(impulse Float) {
	self.Runtime.PhysicsDirectBodyState2D_apply_torque_impulse(self, impulse)
}
func (self PhysicsDirectBodyState2D) ApplyImpulse(impulse Vector2, position Vector2) {
	self.Runtime.PhysicsDirectBodyState2D_apply_impulse(self, impulse, position)
}
func (self PhysicsDirectBodyState2D) ApplyCentralForce(force Vector2) {
	self.Runtime.PhysicsDirectBodyState2D_apply_central_force(self, force)
}
func (self PhysicsDirectBodyState2D) ApplyForce(force Vector2, position Vector2) {
	self.Runtime.PhysicsDirectBodyState2D_apply_force(self, force, position)
}
func (self PhysicsDirectBodyState2D) ApplyTorque(torque Float) {
	self.Runtime.PhysicsDirectBodyState2D_apply_torque(self, torque)
}
func (self PhysicsDirectBodyState2D) AddConstantCentralForce(force Vector2) {
	self.Runtime.PhysicsDirectBodyState2D_add_constant_central_force(self, force)
}
func (self PhysicsDirectBodyState2D) AddConstantForce(force Vector2, position Vector2) {
	self.Runtime.PhysicsDirectBodyState2D_add_constant_force(self, force, position)
}
func (self PhysicsDirectBodyState2D) AddConstantTorque(torque Float) {
	self.Runtime.PhysicsDirectBodyState2D_add_constant_torque(self, torque)
}
func (self PhysicsDirectBodyState2D) SetConstantForce(force Vector2) {
	self.Runtime.PhysicsDirectBodyState2D_set_constant_force(self, force)
}
func (self PhysicsDirectBodyState2D) GetConstantForce() Vector2 {
	return self.Runtime.PhysicsDirectBodyState2D_get_constant_force(self)
}
func (self PhysicsDirectBodyState2D) SetConstantTorque(torque Float) {
	self.Runtime.PhysicsDirectBodyState2D_set_constant_torque(self, torque)
}
func (self PhysicsDirectBodyState2D) GetConstantTorque() Float {
	return self.Runtime.PhysicsDirectBodyState2D_get_constant_torque(self)
}
func (self PhysicsDirectBodyState2D) SetSleepState(enabled bool) {
	self.Runtime.PhysicsDirectBodyState2D_set_sleep_state(self, enabled)
}
func (self PhysicsDirectBodyState2D) IsSleeping() bool {
	return self.Runtime.PhysicsDirectBodyState2D_is_sleeping(self)
}
func (self PhysicsDirectBodyState2D) GetContactCount() int64 {
	return self.Runtime.PhysicsDirectBodyState2D_get_contact_count(self)
}
func (self PhysicsDirectBodyState2D) GetContactLocalPosition(contact_idx int64) Vector2 {
	return self.Runtime.PhysicsDirectBodyState2D_get_contact_local_position(self, contact_idx)
}
func (self PhysicsDirectBodyState2D) GetContactLocalNormal(contact_idx int64) Vector2 {
	return self.Runtime.PhysicsDirectBodyState2D_get_contact_local_normal(self, contact_idx)
}
func (self PhysicsDirectBodyState2D) GetContactLocalShape(contact_idx int64) int64 {
	return self.Runtime.PhysicsDirectBodyState2D_get_contact_local_shape(self, contact_idx)
}
func (self PhysicsDirectBodyState2D) GetContactLocalVelocityAtPosition(contact_idx int64) Vector2 {
	return self.Runtime.PhysicsDirectBodyState2D_get_contact_local_velocity_at_position(self, contact_idx)
}
func (self PhysicsDirectBodyState2D) GetContactCollider(contact_idx int64) RID {
	return self.Runtime.PhysicsDirectBodyState2D_get_contact_collider(self, contact_idx)
}
func (self PhysicsDirectBodyState2D) GetContactColliderPosition(contact_idx int64) Vector2 {
	return self.Runtime.PhysicsDirectBodyState2D_get_contact_collider_position(self, contact_idx)
}
func (self PhysicsDirectBodyState2D) GetContactColliderId(contact_idx int64) int64 {
	return self.Runtime.PhysicsDirectBodyState2D_get_contact_collider_id(self, contact_idx)
}
func (self PhysicsDirectBodyState2D) GetContactColliderObject(contact_idx int64) Object {
	return self.Runtime.PhysicsDirectBodyState2D_get_contact_collider_object(self, contact_idx)
}
func (self PhysicsDirectBodyState2D) GetContactColliderShape(contact_idx int64) int64 {
	return self.Runtime.PhysicsDirectBodyState2D_get_contact_collider_shape(self, contact_idx)
}
func (self PhysicsDirectBodyState2D) GetContactColliderVelocityAtPosition(contact_idx int64) Vector2 {
	return self.Runtime.PhysicsDirectBodyState2D_get_contact_collider_velocity_at_position(self, contact_idx)
}
func (self PhysicsDirectBodyState2D) GetContactImpulse(contact_idx int64) Vector2 {
	return self.Runtime.PhysicsDirectBodyState2D_get_contact_impulse(self, contact_idx)
}
func (self PhysicsDirectBodyState2D) GetStep() Float {
	return self.Runtime.PhysicsDirectBodyState2D_get_step(self)
}
func (self PhysicsDirectBodyState2D) IntegrateForces() {
	self.Runtime.PhysicsDirectBodyState2D_integrate_forces(self)
}
func (self PhysicsDirectBodyState2D) GetSpaceState() PhysicsDirectSpaceState2D {
	return self.Runtime.PhysicsDirectBodyState2D_get_space_state(self)
}

type extendsPhysicsDirectBodyState2DExtension struct {
	_ [0]*extendsPhysicsDirectBodyState2DExtension
	class
}

func (self PhysicsDirectBodyState2DExtension) PhysicsDirectBodyState2D() PhysicsDirectBodyState2D {
	var parent PhysicsDirectBodyState2D
	parent.class = self.class
	return parent
}

type extendsPhysicsDirectBodyState3D struct {
	_ [0]*extendsPhysicsDirectBodyState3D
	class
}

func (self PhysicsDirectBodyState3D) Object() Object {
	var parent Object
	parent.class = self.class
	return parent
}
func (self PhysicsDirectBodyState3D) GetTotalGravity() Vector3 {
	return self.Runtime.PhysicsDirectBodyState3D_get_total_gravity(self)
}
func (self PhysicsDirectBodyState3D) GetTotalLinearDamp() Float {
	return self.Runtime.PhysicsDirectBodyState3D_get_total_linear_damp(self)
}
func (self PhysicsDirectBodyState3D) GetTotalAngularDamp() Float {
	return self.Runtime.PhysicsDirectBodyState3D_get_total_angular_damp(self)
}
func (self PhysicsDirectBodyState3D) GetCenterOfMass() Vector3 {
	return self.Runtime.PhysicsDirectBodyState3D_get_center_of_mass(self)
}
func (self PhysicsDirectBodyState3D) GetCenterOfMassLocal() Vector3 {
	return self.Runtime.PhysicsDirectBodyState3D_get_center_of_mass_local(self)
}
func (self PhysicsDirectBodyState3D) GetPrincipalInertiaAxes() Basis {
	return self.Runtime.PhysicsDirectBodyState3D_get_principal_inertia_axes(self)
}
func (self PhysicsDirectBodyState3D) GetInverseMass() Float {
	return self.Runtime.PhysicsDirectBodyState3D_get_inverse_mass(self)
}
func (self PhysicsDirectBodyState3D) GetInverseInertia() Vector3 {
	return self.Runtime.PhysicsDirectBodyState3D_get_inverse_inertia(self)
}
func (self PhysicsDirectBodyState3D) GetInverseInertiaTensor() Basis {
	return self.Runtime.PhysicsDirectBodyState3D_get_inverse_inertia_tensor(self)
}
func (self PhysicsDirectBodyState3D) SetLinearVelocity(velocity Vector3) {
	self.Runtime.PhysicsDirectBodyState3D_set_linear_velocity(self, velocity)
}
func (self PhysicsDirectBodyState3D) GetLinearVelocity() Vector3 {
	return self.Runtime.PhysicsDirectBodyState3D_get_linear_velocity(self)
}
func (self PhysicsDirectBodyState3D) SetAngularVelocity(velocity Vector3) {
	self.Runtime.PhysicsDirectBodyState3D_set_angular_velocity(self, velocity)
}
func (self PhysicsDirectBodyState3D) GetAngularVelocity() Vector3 {
	return self.Runtime.PhysicsDirectBodyState3D_get_angular_velocity(self)
}
func (self PhysicsDirectBodyState3D) SetTransform(transform Transform3D) {
	self.Runtime.PhysicsDirectBodyState3D_set_transform(self, transform)
}
func (self PhysicsDirectBodyState3D) GetTransform() Transform3D {
	return self.Runtime.PhysicsDirectBodyState3D_get_transform(self)
}
func (self PhysicsDirectBodyState3D) GetVelocityAtLocalPosition(local_position Vector3) Vector3 {
	return self.Runtime.PhysicsDirectBodyState3D_get_velocity_at_local_position(self, local_position)
}
func (self PhysicsDirectBodyState3D) ApplyCentralImpulse(impulse Vector3) {
	self.Runtime.PhysicsDirectBodyState3D_apply_central_impulse(self, impulse)
}
func (self PhysicsDirectBodyState3D) ApplyImpulse(impulse Vector3, position Vector3) {
	self.Runtime.PhysicsDirectBodyState3D_apply_impulse(self, impulse, position)
}
func (self PhysicsDirectBodyState3D) ApplyTorqueImpulse(impulse Vector3) {
	self.Runtime.PhysicsDirectBodyState3D_apply_torque_impulse(self, impulse)
}
func (self PhysicsDirectBodyState3D) ApplyCentralForce(force Vector3) {
	self.Runtime.PhysicsDirectBodyState3D_apply_central_force(self, force)
}
func (self PhysicsDirectBodyState3D) ApplyForce(force Vector3, position Vector3) {
	self.Runtime.PhysicsDirectBodyState3D_apply_force(self, force, position)
}
func (self PhysicsDirectBodyState3D) ApplyTorque(torque Vector3) {
	self.Runtime.PhysicsDirectBodyState3D_apply_torque(self, torque)
}
func (self PhysicsDirectBodyState3D) AddConstantCentralForce(force Vector3) {
	self.Runtime.PhysicsDirectBodyState3D_add_constant_central_force(self, force)
}
func (self PhysicsDirectBodyState3D) AddConstantForce(force Vector3, position Vector3) {
	self.Runtime.PhysicsDirectBodyState3D_add_constant_force(self, force, position)
}
func (self PhysicsDirectBodyState3D) AddConstantTorque(torque Vector3) {
	self.Runtime.PhysicsDirectBodyState3D_add_constant_torque(self, torque)
}
func (self PhysicsDirectBodyState3D) SetConstantForce(force Vector3) {
	self.Runtime.PhysicsDirectBodyState3D_set_constant_force(self, force)
}
func (self PhysicsDirectBodyState3D) GetConstantForce() Vector3 {
	return self.Runtime.PhysicsDirectBodyState3D_get_constant_force(self)
}
func (self PhysicsDirectBodyState3D) SetConstantTorque(torque Vector3) {
	self.Runtime.PhysicsDirectBodyState3D_set_constant_torque(self, torque)
}
func (self PhysicsDirectBodyState3D) GetConstantTorque() Vector3 {
	return self.Runtime.PhysicsDirectBodyState3D_get_constant_torque(self)
}
func (self PhysicsDirectBodyState3D) SetSleepState(enabled bool) {
	self.Runtime.PhysicsDirectBodyState3D_set_sleep_state(self, enabled)
}
func (self PhysicsDirectBodyState3D) IsSleeping() bool {
	return self.Runtime.PhysicsDirectBodyState3D_is_sleeping(self)
}
func (self PhysicsDirectBodyState3D) GetContactCount() int64 {
	return self.Runtime.PhysicsDirectBodyState3D_get_contact_count(self)
}
func (self PhysicsDirectBodyState3D) GetContactLocalPosition(contact_idx int64) Vector3 {
	return self.Runtime.PhysicsDirectBodyState3D_get_contact_local_position(self, contact_idx)
}
func (self PhysicsDirectBodyState3D) GetContactLocalNormal(contact_idx int64) Vector3 {
	return self.Runtime.PhysicsDirectBodyState3D_get_contact_local_normal(self, contact_idx)
}
func (self PhysicsDirectBodyState3D) GetContactImpulse(contact_idx int64) Vector3 {
	return self.Runtime.PhysicsDirectBodyState3D_get_contact_impulse(self, contact_idx)
}
func (self PhysicsDirectBodyState3D) GetContactLocalShape(contact_idx int64) int64 {
	return self.Runtime.PhysicsDirectBodyState3D_get_contact_local_shape(self, contact_idx)
}
func (self PhysicsDirectBodyState3D) GetContactLocalVelocityAtPosition(contact_idx int64) Vector3 {
	return self.Runtime.PhysicsDirectBodyState3D_get_contact_local_velocity_at_position(self, contact_idx)
}
func (self PhysicsDirectBodyState3D) GetContactCollider(contact_idx int64) RID {
	return self.Runtime.PhysicsDirectBodyState3D_get_contact_collider(self, contact_idx)
}
func (self PhysicsDirectBodyState3D) GetContactColliderPosition(contact_idx int64) Vector3 {
	return self.Runtime.PhysicsDirectBodyState3D_get_contact_collider_position(self, contact_idx)
}
func (self PhysicsDirectBodyState3D) GetContactColliderId(contact_idx int64) int64 {
	return self.Runtime.PhysicsDirectBodyState3D_get_contact_collider_id(self, contact_idx)
}
func (self PhysicsDirectBodyState3D) GetContactColliderObject(contact_idx int64) Object {
	return self.Runtime.PhysicsDirectBodyState3D_get_contact_collider_object(self, contact_idx)
}
func (self PhysicsDirectBodyState3D) GetContactColliderShape(contact_idx int64) int64 {
	return self.Runtime.PhysicsDirectBodyState3D_get_contact_collider_shape(self, contact_idx)
}
func (self PhysicsDirectBodyState3D) GetContactColliderVelocityAtPosition(contact_idx int64) Vector3 {
	return self.Runtime.PhysicsDirectBodyState3D_get_contact_collider_velocity_at_position(self, contact_idx)
}
func (self PhysicsDirectBodyState3D) GetStep() Float {
	return self.Runtime.PhysicsDirectBodyState3D_get_step(self)
}
func (self PhysicsDirectBodyState3D) IntegrateForces() {
	self.Runtime.PhysicsDirectBodyState3D_integrate_forces(self)
}
func (self PhysicsDirectBodyState3D) GetSpaceState() PhysicsDirectSpaceState3D {
	return self.Runtime.PhysicsDirectBodyState3D_get_space_state(self)
}

type extendsPhysicsDirectBodyState3DExtension struct {
	_ [0]*extendsPhysicsDirectBodyState3DExtension
	class
}

func (self PhysicsDirectBodyState3DExtension) PhysicsDirectBodyState3D() PhysicsDirectBodyState3D {
	var parent PhysicsDirectBodyState3D
	parent.class = self.class
	return parent
}

type extendsPhysicsDirectSpaceState2D struct {
	_ [0]*extendsPhysicsDirectSpaceState2D
	class
}

func (self PhysicsDirectSpaceState2D) Object() Object {
	var parent Object
	parent.class = self.class
	return parent
}
func (self PhysicsDirectSpaceState2D) IntersectPoint(parameters PhysicsPointQueryParameters2D, max_results int64) ArrayOf[Dictionary] {
	return self.Runtime.PhysicsDirectSpaceState2D_intersect_point(self, parameters, max_results)
}
func (self PhysicsDirectSpaceState2D) IntersectRay(parameters PhysicsRayQueryParameters2D) Dictionary {
	return self.Runtime.PhysicsDirectSpaceState2D_intersect_ray(self, parameters)
}
func (self PhysicsDirectSpaceState2D) IntersectShape(parameters PhysicsShapeQueryParameters2D, max_results int64) ArrayOf[Dictionary] {
	return self.Runtime.PhysicsDirectSpaceState2D_intersect_shape(self, parameters, max_results)
}
func (self PhysicsDirectSpaceState2D) CastMotion(parameters PhysicsShapeQueryParameters2D) PackedFloat32Array {
	return self.Runtime.PhysicsDirectSpaceState2D_cast_motion(self, parameters)
}
func (self PhysicsDirectSpaceState2D) CollideShape(parameters PhysicsShapeQueryParameters2D, max_results int64) ArrayOf[Vector2] {
	return self.Runtime.PhysicsDirectSpaceState2D_collide_shape(self, parameters, max_results)
}
func (self PhysicsDirectSpaceState2D) GetRestInfo(parameters PhysicsShapeQueryParameters2D) Dictionary {
	return self.Runtime.PhysicsDirectSpaceState2D_get_rest_info(self, parameters)
}

type extendsPhysicsDirectSpaceState2DExtension struct {
	_ [0]*extendsPhysicsDirectSpaceState2DExtension
	class
}

func (self PhysicsDirectSpaceState2DExtension) PhysicsDirectSpaceState2D() PhysicsDirectSpaceState2D {
	var parent PhysicsDirectSpaceState2D
	parent.class = self.class
	return parent
}
func (self PhysicsDirectSpaceState2DExtension) IsBodyExcludedFromQuery(body RID) bool {
	return self.Runtime.PhysicsDirectSpaceState2DExtension_is_body_excluded_from_query(self, body)
}

type extendsPhysicsDirectSpaceState3D struct {
	_ [0]*extendsPhysicsDirectSpaceState3D
	class
}

func (self PhysicsDirectSpaceState3D) Object() Object {
	var parent Object
	parent.class = self.class
	return parent
}
func (self PhysicsDirectSpaceState3D) IntersectPoint(parameters PhysicsPointQueryParameters3D, max_results int64) ArrayOf[Dictionary] {
	return self.Runtime.PhysicsDirectSpaceState3D_intersect_point(self, parameters, max_results)
}
func (self PhysicsDirectSpaceState3D) IntersectRay(parameters PhysicsRayQueryParameters3D) Dictionary {
	return self.Runtime.PhysicsDirectSpaceState3D_intersect_ray(self, parameters)
}
func (self PhysicsDirectSpaceState3D) IntersectShape(parameters PhysicsShapeQueryParameters3D, max_results int64) ArrayOf[Dictionary] {
	return self.Runtime.PhysicsDirectSpaceState3D_intersect_shape(self, parameters, max_results)
}
func (self PhysicsDirectSpaceState3D) CastMotion(parameters PhysicsShapeQueryParameters3D) PackedFloat32Array {
	return self.Runtime.PhysicsDirectSpaceState3D_cast_motion(self, parameters)
}
func (self PhysicsDirectSpaceState3D) CollideShape(parameters PhysicsShapeQueryParameters3D, max_results int64) ArrayOf[Vector3] {
	return self.Runtime.PhysicsDirectSpaceState3D_collide_shape(self, parameters, max_results)
}
func (self PhysicsDirectSpaceState3D) GetRestInfo(parameters PhysicsShapeQueryParameters3D) Dictionary {
	return self.Runtime.PhysicsDirectSpaceState3D_get_rest_info(self, parameters)
}

type extendsPhysicsDirectSpaceState3DExtension struct {
	_ [0]*extendsPhysicsDirectSpaceState3DExtension
	class
}

func (self PhysicsDirectSpaceState3DExtension) PhysicsDirectSpaceState3D() PhysicsDirectSpaceState3D {
	var parent PhysicsDirectSpaceState3D
	parent.class = self.class
	return parent
}
func (self PhysicsDirectSpaceState3DExtension) IsBodyExcludedFromQuery(body RID) bool {
	return self.Runtime.PhysicsDirectSpaceState3DExtension_is_body_excluded_from_query(self, body)
}

type extendsPhysicsMaterial struct {
	_ [0]*extendsPhysicsMaterial
	class
}

func (self PhysicsMaterial) Resource() Resource {
	var parent Resource
	parent.class = self.class
	return parent
}
func (self PhysicsMaterial) SetFriction(friction Float) {
	self.Runtime.PhysicsMaterial_set_friction(self, friction)
}
func (self PhysicsMaterial) GetFriction() Float {
	return self.Runtime.PhysicsMaterial_get_friction(self)
}
func (self PhysicsMaterial) SetRough(rough bool) {
	self.Runtime.PhysicsMaterial_set_rough(self, rough)
}
func (self PhysicsMaterial) IsRough() bool {
	return self.Runtime.PhysicsMaterial_is_rough(self)
}
func (self PhysicsMaterial) SetBounce(bounce Float) {
	self.Runtime.PhysicsMaterial_set_bounce(self, bounce)
}
func (self PhysicsMaterial) GetBounce() Float {
	return self.Runtime.PhysicsMaterial_get_bounce(self)
}
func (self PhysicsMaterial) SetAbsorbent(absorbent bool) {
	self.Runtime.PhysicsMaterial_set_absorbent(self, absorbent)
}
func (self PhysicsMaterial) IsAbsorbent() bool {
	return self.Runtime.PhysicsMaterial_is_absorbent(self)
}

type extendsPhysicsPointQueryParameters2D struct {
	_ [0]*extendsPhysicsPointQueryParameters2D
	class
}

func (self PhysicsPointQueryParameters2D) RefCounted() RefCounted {
	var parent RefCounted
	parent.class = self.class
	return parent
}
func (self PhysicsPointQueryParameters2D) SetPosition(position Vector2) {
	self.Runtime.PhysicsPointQueryParameters2D_set_position(self, position)
}
func (self PhysicsPointQueryParameters2D) GetPosition() Vector2 {
	return self.Runtime.PhysicsPointQueryParameters2D_get_position(self)
}
func (self PhysicsPointQueryParameters2D) SetCanvasInstanceId(canvas_instance_id int64) {
	self.Runtime.PhysicsPointQueryParameters2D_set_canvas_instance_id(self, canvas_instance_id)
}
func (self PhysicsPointQueryParameters2D) GetCanvasInstanceId() int64 {
	return self.Runtime.PhysicsPointQueryParameters2D_get_canvas_instance_id(self)
}
func (self PhysicsPointQueryParameters2D) SetCollisionMask(collision_mask int64) {
	self.Runtime.PhysicsPointQueryParameters2D_set_collision_mask(self, collision_mask)
}
func (self PhysicsPointQueryParameters2D) GetCollisionMask() int64 {
	return self.Runtime.PhysicsPointQueryParameters2D_get_collision_mask(self)
}
func (self PhysicsPointQueryParameters2D) SetExclude(exclude ArrayOf[RID]) {
	self.Runtime.PhysicsPointQueryParameters2D_set_exclude(self, exclude)
}
func (self PhysicsPointQueryParameters2D) GetExclude() ArrayOf[RID] {
	return self.Runtime.PhysicsPointQueryParameters2D_get_exclude(self)
}
func (self PhysicsPointQueryParameters2D) SetCollideWithBodies(enable bool) {
	self.Runtime.PhysicsPointQueryParameters2D_set_collide_with_bodies(self, enable)
}
func (self PhysicsPointQueryParameters2D) IsCollideWithBodiesEnabled() bool {
	return self.Runtime.PhysicsPointQueryParameters2D_is_collide_with_bodies_enabled(self)
}
func (self PhysicsPointQueryParameters2D) SetCollideWithAreas(enable bool) {
	self.Runtime.PhysicsPointQueryParameters2D_set_collide_with_areas(self, enable)
}
func (self PhysicsPointQueryParameters2D) IsCollideWithAreasEnabled() bool {
	return self.Runtime.PhysicsPointQueryParameters2D_is_collide_with_areas_enabled(self)
}

type extendsPhysicsPointQueryParameters3D struct {
	_ [0]*extendsPhysicsPointQueryParameters3D
	class
}

func (self PhysicsPointQueryParameters3D) RefCounted() RefCounted {
	var parent RefCounted
	parent.class = self.class
	return parent
}
func (self PhysicsPointQueryParameters3D) SetPosition(position Vector3) {
	self.Runtime.PhysicsPointQueryParameters3D_set_position(self, position)
}
func (self PhysicsPointQueryParameters3D) GetPosition() Vector3 {
	return self.Runtime.PhysicsPointQueryParameters3D_get_position(self)
}
func (self PhysicsPointQueryParameters3D) SetCollisionMask(collision_mask int64) {
	self.Runtime.PhysicsPointQueryParameters3D_set_collision_mask(self, collision_mask)
}
func (self PhysicsPointQueryParameters3D) GetCollisionMask() int64 {
	return self.Runtime.PhysicsPointQueryParameters3D_get_collision_mask(self)
}
func (self PhysicsPointQueryParameters3D) SetExclude(exclude ArrayOf[RID]) {
	self.Runtime.PhysicsPointQueryParameters3D_set_exclude(self, exclude)
}
func (self PhysicsPointQueryParameters3D) GetExclude() ArrayOf[RID] {
	return self.Runtime.PhysicsPointQueryParameters3D_get_exclude(self)
}
func (self PhysicsPointQueryParameters3D) SetCollideWithBodies(enable bool) {
	self.Runtime.PhysicsPointQueryParameters3D_set_collide_with_bodies(self, enable)
}
func (self PhysicsPointQueryParameters3D) IsCollideWithBodiesEnabled() bool {
	return self.Runtime.PhysicsPointQueryParameters3D_is_collide_with_bodies_enabled(self)
}
func (self PhysicsPointQueryParameters3D) SetCollideWithAreas(enable bool) {
	self.Runtime.PhysicsPointQueryParameters3D_set_collide_with_areas(self, enable)
}
func (self PhysicsPointQueryParameters3D) IsCollideWithAreasEnabled() bool {
	return self.Runtime.PhysicsPointQueryParameters3D_is_collide_with_areas_enabled(self)
}

type extendsPhysicsRayQueryParameters2D struct {
	_ [0]*extendsPhysicsRayQueryParameters2D
	class
}

func (self PhysicsRayQueryParameters2D) RefCounted() RefCounted {
	var parent RefCounted
	parent.class = self.class
	return parent
}
func (self PhysicsRayQueryParameters2D) Create(from Vector2, to Vector2, collision_mask int64, exclude ArrayOf[RID]) PhysicsRayQueryParameters2D {
	return self.Runtime.PhysicsRayQueryParameters2D_create(self, from, to, collision_mask, exclude)
}
func (self PhysicsRayQueryParameters2D) SetFrom(from Vector2) {
	self.Runtime.PhysicsRayQueryParameters2D_set_from(self, from)
}
func (self PhysicsRayQueryParameters2D) GetFrom() Vector2 {
	return self.Runtime.PhysicsRayQueryParameters2D_get_from(self)
}
func (self PhysicsRayQueryParameters2D) SetTo(to Vector2) {
	self.Runtime.PhysicsRayQueryParameters2D_set_to(self, to)
}
func (self PhysicsRayQueryParameters2D) GetTo() Vector2 {
	return self.Runtime.PhysicsRayQueryParameters2D_get_to(self)
}
func (self PhysicsRayQueryParameters2D) SetCollisionMask(collision_mask int64) {
	self.Runtime.PhysicsRayQueryParameters2D_set_collision_mask(self, collision_mask)
}
func (self PhysicsRayQueryParameters2D) GetCollisionMask() int64 {
	return self.Runtime.PhysicsRayQueryParameters2D_get_collision_mask(self)
}
func (self PhysicsRayQueryParameters2D) SetExclude(exclude ArrayOf[RID]) {
	self.Runtime.PhysicsRayQueryParameters2D_set_exclude(self, exclude)
}
func (self PhysicsRayQueryParameters2D) GetExclude() ArrayOf[RID] {
	return self.Runtime.PhysicsRayQueryParameters2D_get_exclude(self)
}
func (self PhysicsRayQueryParameters2D) SetCollideWithBodies(enable bool) {
	self.Runtime.PhysicsRayQueryParameters2D_set_collide_with_bodies(self, enable)
}
func (self PhysicsRayQueryParameters2D) IsCollideWithBodiesEnabled() bool {
	return self.Runtime.PhysicsRayQueryParameters2D_is_collide_with_bodies_enabled(self)
}
func (self PhysicsRayQueryParameters2D) SetCollideWithAreas(enable bool) {
	self.Runtime.PhysicsRayQueryParameters2D_set_collide_with_areas(self, enable)
}
func (self PhysicsRayQueryParameters2D) IsCollideWithAreasEnabled() bool {
	return self.Runtime.PhysicsRayQueryParameters2D_is_collide_with_areas_enabled(self)
}
func (self PhysicsRayQueryParameters2D) SetHitFromInside(enable bool) {
	self.Runtime.PhysicsRayQueryParameters2D_set_hit_from_inside(self, enable)
}
func (self PhysicsRayQueryParameters2D) IsHitFromInsideEnabled() bool {
	return self.Runtime.PhysicsRayQueryParameters2D_is_hit_from_inside_enabled(self)
}

type extendsPhysicsRayQueryParameters3D struct {
	_ [0]*extendsPhysicsRayQueryParameters3D
	class
}

func (self PhysicsRayQueryParameters3D) RefCounted() RefCounted {
	var parent RefCounted
	parent.class = self.class
	return parent
}
func (self PhysicsRayQueryParameters3D) Create(from Vector3, to Vector3, collision_mask int64, exclude ArrayOf[RID]) PhysicsRayQueryParameters3D {
	return self.Runtime.PhysicsRayQueryParameters3D_create(self, from, to, collision_mask, exclude)
}
func (self PhysicsRayQueryParameters3D) SetFrom(from Vector3) {
	self.Runtime.PhysicsRayQueryParameters3D_set_from(self, from)
}
func (self PhysicsRayQueryParameters3D) GetFrom() Vector3 {
	return self.Runtime.PhysicsRayQueryParameters3D_get_from(self)
}
func (self PhysicsRayQueryParameters3D) SetTo(to Vector3) {
	self.Runtime.PhysicsRayQueryParameters3D_set_to(self, to)
}
func (self PhysicsRayQueryParameters3D) GetTo() Vector3 {
	return self.Runtime.PhysicsRayQueryParameters3D_get_to(self)
}
func (self PhysicsRayQueryParameters3D) SetCollisionMask(collision_mask int64) {
	self.Runtime.PhysicsRayQueryParameters3D_set_collision_mask(self, collision_mask)
}
func (self PhysicsRayQueryParameters3D) GetCollisionMask() int64 {
	return self.Runtime.PhysicsRayQueryParameters3D_get_collision_mask(self)
}
func (self PhysicsRayQueryParameters3D) SetExclude(exclude ArrayOf[RID]) {
	self.Runtime.PhysicsRayQueryParameters3D_set_exclude(self, exclude)
}
func (self PhysicsRayQueryParameters3D) GetExclude() ArrayOf[RID] {
	return self.Runtime.PhysicsRayQueryParameters3D_get_exclude(self)
}
func (self PhysicsRayQueryParameters3D) SetCollideWithBodies(enable bool) {
	self.Runtime.PhysicsRayQueryParameters3D_set_collide_with_bodies(self, enable)
}
func (self PhysicsRayQueryParameters3D) IsCollideWithBodiesEnabled() bool {
	return self.Runtime.PhysicsRayQueryParameters3D_is_collide_with_bodies_enabled(self)
}
func (self PhysicsRayQueryParameters3D) SetCollideWithAreas(enable bool) {
	self.Runtime.PhysicsRayQueryParameters3D_set_collide_with_areas(self, enable)
}
func (self PhysicsRayQueryParameters3D) IsCollideWithAreasEnabled() bool {
	return self.Runtime.PhysicsRayQueryParameters3D_is_collide_with_areas_enabled(self)
}
func (self PhysicsRayQueryParameters3D) SetHitFromInside(enable bool) {
	self.Runtime.PhysicsRayQueryParameters3D_set_hit_from_inside(self, enable)
}
func (self PhysicsRayQueryParameters3D) IsHitFromInsideEnabled() bool {
	return self.Runtime.PhysicsRayQueryParameters3D_is_hit_from_inside_enabled(self)
}
func (self PhysicsRayQueryParameters3D) SetHitBackFaces(enable bool) {
	self.Runtime.PhysicsRayQueryParameters3D_set_hit_back_faces(self, enable)
}
func (self PhysicsRayQueryParameters3D) IsHitBackFacesEnabled() bool {
	return self.Runtime.PhysicsRayQueryParameters3D_is_hit_back_faces_enabled(self)
}

type extendsPhysicsServer2D struct {
	_ [0]*extendsPhysicsServer2D
	class
}

func (self PhysicsServer2D) Object() Object {
	var parent Object
	parent.class = self.class
	return parent
}
func (self PhysicsServer2D) WorldBoundaryShapeCreate() RID {
	return self.Runtime.PhysicsServer2D_world_boundary_shape_create(self)
}
func (self PhysicsServer2D) SeparationRayShapeCreate() RID {
	return self.Runtime.PhysicsServer2D_separation_ray_shape_create(self)
}
func (self PhysicsServer2D) SegmentShapeCreate() RID {
	return self.Runtime.PhysicsServer2D_segment_shape_create(self)
}
func (self PhysicsServer2D) CircleShapeCreate() RID {
	return self.Runtime.PhysicsServer2D_circle_shape_create(self)
}
func (self PhysicsServer2D) RectangleShapeCreate() RID {
	return self.Runtime.PhysicsServer2D_rectangle_shape_create(self)
}
func (self PhysicsServer2D) CapsuleShapeCreate() RID {
	return self.Runtime.PhysicsServer2D_capsule_shape_create(self)
}
func (self PhysicsServer2D) ConvexPolygonShapeCreate() RID {
	return self.Runtime.PhysicsServer2D_convex_polygon_shape_create(self)
}
func (self PhysicsServer2D) ConcavePolygonShapeCreate() RID {
	return self.Runtime.PhysicsServer2D_concave_polygon_shape_create(self)
}
func (self PhysicsServer2D) ShapeSetData(shape RID, data any) {
	self.Runtime.PhysicsServer2D_shape_set_data(self, shape, data)
}
func (self PhysicsServer2D) ShapeGetType(shape RID) PhysicsServer2DShapeType {
	return self.Runtime.PhysicsServer2D_shape_get_type(self, shape)
}
func (self PhysicsServer2D) ShapeGetData(shape RID) any {
	return self.Runtime.PhysicsServer2D_shape_get_data(self, shape)
}
func (self PhysicsServer2D) SpaceCreate() RID {
	return self.Runtime.PhysicsServer2D_space_create(self)
}
func (self PhysicsServer2D) SpaceSetActive(space RID, active bool) {
	self.Runtime.PhysicsServer2D_space_set_active(self, space, active)
}
func (self PhysicsServer2D) SpaceIsActive(space RID) bool {
	return self.Runtime.PhysicsServer2D_space_is_active(self, space)
}
func (self PhysicsServer2D) SpaceSetParam(space RID, param PhysicsServer2DSpaceParameter, value Float) {
	self.Runtime.PhysicsServer2D_space_set_param(self, space, param, value)
}
func (self PhysicsServer2D) SpaceGetParam(space RID, param PhysicsServer2DSpaceParameter) Float {
	return self.Runtime.PhysicsServer2D_space_get_param(self, space, param)
}
func (self PhysicsServer2D) SpaceGetDirectState(space RID) PhysicsDirectSpaceState2D {
	return self.Runtime.PhysicsServer2D_space_get_direct_state(self, space)
}
func (self PhysicsServer2D) AreaCreate() RID {
	return self.Runtime.PhysicsServer2D_area_create(self)
}
func (self PhysicsServer2D) AreaSetSpace(area RID, space RID) {
	self.Runtime.PhysicsServer2D_area_set_space(self, area, space)
}
func (self PhysicsServer2D) AreaGetSpace(area RID) RID {
	return self.Runtime.PhysicsServer2D_area_get_space(self, area)
}
func (self PhysicsServer2D) AreaAddShape(area RID, shape RID, transform Transform2D, disabled bool) {
	self.Runtime.PhysicsServer2D_area_add_shape(self, area, shape, transform, disabled)
}
func (self PhysicsServer2D) AreaSetShape(area RID, shape_idx int64, shape RID) {
	self.Runtime.PhysicsServer2D_area_set_shape(self, area, shape_idx, shape)
}
func (self PhysicsServer2D) AreaSetShapeTransform(area RID, shape_idx int64, transform Transform2D) {
	self.Runtime.PhysicsServer2D_area_set_shape_transform(self, area, shape_idx, transform)
}
func (self PhysicsServer2D) AreaSetShapeDisabled(area RID, shape_idx int64, disabled bool) {
	self.Runtime.PhysicsServer2D_area_set_shape_disabled(self, area, shape_idx, disabled)
}
func (self PhysicsServer2D) AreaGetShapeCount(area RID) int64 {
	return self.Runtime.PhysicsServer2D_area_get_shape_count(self, area)
}
func (self PhysicsServer2D) AreaGetShape(area RID, shape_idx int64) RID {
	return self.Runtime.PhysicsServer2D_area_get_shape(self, area, shape_idx)
}
func (self PhysicsServer2D) AreaGetShapeTransform(area RID, shape_idx int64) Transform2D {
	return self.Runtime.PhysicsServer2D_area_get_shape_transform(self, area, shape_idx)
}
func (self PhysicsServer2D) AreaRemoveShape(area RID, shape_idx int64) {
	self.Runtime.PhysicsServer2D_area_remove_shape(self, area, shape_idx)
}
func (self PhysicsServer2D) AreaClearShapes(area RID) {
	self.Runtime.PhysicsServer2D_area_clear_shapes(self, area)
}
func (self PhysicsServer2D) AreaSetCollisionLayer(area RID, layer int64) {
	self.Runtime.PhysicsServer2D_area_set_collision_layer(self, area, layer)
}
func (self PhysicsServer2D) AreaGetCollisionLayer(area RID) int64 {
	return self.Runtime.PhysicsServer2D_area_get_collision_layer(self, area)
}
func (self PhysicsServer2D) AreaSetCollisionMask(area RID, mask int64) {
	self.Runtime.PhysicsServer2D_area_set_collision_mask(self, area, mask)
}
func (self PhysicsServer2D) AreaGetCollisionMask(area RID) int64 {
	return self.Runtime.PhysicsServer2D_area_get_collision_mask(self, area)
}
func (self PhysicsServer2D) AreaSetParam(area RID, param PhysicsServer2DAreaParameter, value any) {
	self.Runtime.PhysicsServer2D_area_set_param(self, area, param, value)
}
func (self PhysicsServer2D) AreaSetTransform(area RID, transform Transform2D) {
	self.Runtime.PhysicsServer2D_area_set_transform(self, area, transform)
}
func (self PhysicsServer2D) AreaGetParam(area RID, param PhysicsServer2DAreaParameter) any {
	return self.Runtime.PhysicsServer2D_area_get_param(self, area, param)
}
func (self PhysicsServer2D) AreaGetTransform(area RID) Transform2D {
	return self.Runtime.PhysicsServer2D_area_get_transform(self, area)
}
func (self PhysicsServer2D) AreaAttachObjectInstanceId(area RID, id int64) {
	self.Runtime.PhysicsServer2D_area_attach_object_instance_id(self, area, id)
}
func (self PhysicsServer2D) AreaGetObjectInstanceId(area RID) int64 {
	return self.Runtime.PhysicsServer2D_area_get_object_instance_id(self, area)
}
func (self PhysicsServer2D) AreaAttachCanvasInstanceId(area RID, id int64) {
	self.Runtime.PhysicsServer2D_area_attach_canvas_instance_id(self, area, id)
}
func (self PhysicsServer2D) AreaGetCanvasInstanceId(area RID) int64 {
	return self.Runtime.PhysicsServer2D_area_get_canvas_instance_id(self, area)
}
func (self PhysicsServer2D) AreaSetMonitorCallback(area RID, callback Callable) {
	self.Runtime.PhysicsServer2D_area_set_monitor_callback(self, area, callback)
}
func (self PhysicsServer2D) AreaSetAreaMonitorCallback(area RID, callback Callable) {
	self.Runtime.PhysicsServer2D_area_set_area_monitor_callback(self, area, callback)
}
func (self PhysicsServer2D) AreaSetMonitorable(area RID, monitorable bool) {
	self.Runtime.PhysicsServer2D_area_set_monitorable(self, area, monitorable)
}
func (self PhysicsServer2D) BodyCreate() RID {
	return self.Runtime.PhysicsServer2D_body_create(self)
}
func (self PhysicsServer2D) BodySetSpace(body RID, space RID) {
	self.Runtime.PhysicsServer2D_body_set_space(self, body, space)
}
func (self PhysicsServer2D) BodyGetSpace(body RID) RID {
	return self.Runtime.PhysicsServer2D_body_get_space(self, body)
}
func (self PhysicsServer2D) BodySetMode(body RID, mode PhysicsServer2DBodyMode) {
	self.Runtime.PhysicsServer2D_body_set_mode(self, body, mode)
}
func (self PhysicsServer2D) BodyGetMode(body RID) PhysicsServer2DBodyMode {
	return self.Runtime.PhysicsServer2D_body_get_mode(self, body)
}
func (self PhysicsServer2D) BodyAddShape(body RID, shape RID, transform Transform2D, disabled bool) {
	self.Runtime.PhysicsServer2D_body_add_shape(self, body, shape, transform, disabled)
}
func (self PhysicsServer2D) BodySetShape(body RID, shape_idx int64, shape RID) {
	self.Runtime.PhysicsServer2D_body_set_shape(self, body, shape_idx, shape)
}
func (self PhysicsServer2D) BodySetShapeTransform(body RID, shape_idx int64, transform Transform2D) {
	self.Runtime.PhysicsServer2D_body_set_shape_transform(self, body, shape_idx, transform)
}
func (self PhysicsServer2D) BodyGetShapeCount(body RID) int64 {
	return self.Runtime.PhysicsServer2D_body_get_shape_count(self, body)
}
func (self PhysicsServer2D) BodyGetShape(body RID, shape_idx int64) RID {
	return self.Runtime.PhysicsServer2D_body_get_shape(self, body, shape_idx)
}
func (self PhysicsServer2D) BodyGetShapeTransform(body RID, shape_idx int64) Transform2D {
	return self.Runtime.PhysicsServer2D_body_get_shape_transform(self, body, shape_idx)
}
func (self PhysicsServer2D) BodyRemoveShape(body RID, shape_idx int64) {
	self.Runtime.PhysicsServer2D_body_remove_shape(self, body, shape_idx)
}
func (self PhysicsServer2D) BodyClearShapes(body RID) {
	self.Runtime.PhysicsServer2D_body_clear_shapes(self, body)
}
func (self PhysicsServer2D) BodySetShapeDisabled(body RID, shape_idx int64, disabled bool) {
	self.Runtime.PhysicsServer2D_body_set_shape_disabled(self, body, shape_idx, disabled)
}
func (self PhysicsServer2D) BodySetShapeAsOneWayCollision(body RID, shape_idx int64, enable bool, margin Float) {
	self.Runtime.PhysicsServer2D_body_set_shape_as_one_way_collision(self, body, shape_idx, enable, margin)
}
func (self PhysicsServer2D) BodyAttachObjectInstanceId(body RID, id int64) {
	self.Runtime.PhysicsServer2D_body_attach_object_instance_id(self, body, id)
}
func (self PhysicsServer2D) BodyGetObjectInstanceId(body RID) int64 {
	return self.Runtime.PhysicsServer2D_body_get_object_instance_id(self, body)
}
func (self PhysicsServer2D) BodyAttachCanvasInstanceId(body RID, id int64) {
	self.Runtime.PhysicsServer2D_body_attach_canvas_instance_id(self, body, id)
}
func (self PhysicsServer2D) BodyGetCanvasInstanceId(body RID) int64 {
	return self.Runtime.PhysicsServer2D_body_get_canvas_instance_id(self, body)
}
func (self PhysicsServer2D) BodySetContinuousCollisionDetectionMode(body RID, mode PhysicsServer2DCCDMode) {
	self.Runtime.PhysicsServer2D_body_set_continuous_collision_detection_mode(self, body, mode)
}
func (self PhysicsServer2D) BodyGetContinuousCollisionDetectionMode(body RID) PhysicsServer2DCCDMode {
	return self.Runtime.PhysicsServer2D_body_get_continuous_collision_detection_mode(self, body)
}
func (self PhysicsServer2D) BodySetCollisionLayer(body RID, layer int64) {
	self.Runtime.PhysicsServer2D_body_set_collision_layer(self, body, layer)
}
func (self PhysicsServer2D) BodyGetCollisionLayer(body RID) int64 {
	return self.Runtime.PhysicsServer2D_body_get_collision_layer(self, body)
}
func (self PhysicsServer2D) BodySetCollisionMask(body RID, mask int64) {
	self.Runtime.PhysicsServer2D_body_set_collision_mask(self, body, mask)
}
func (self PhysicsServer2D) BodyGetCollisionMask(body RID) int64 {
	return self.Runtime.PhysicsServer2D_body_get_collision_mask(self, body)
}
func (self PhysicsServer2D) BodySetCollisionPriority(body RID, priority Float) {
	self.Runtime.PhysicsServer2D_body_set_collision_priority(self, body, priority)
}
func (self PhysicsServer2D) BodyGetCollisionPriority(body RID) Float {
	return self.Runtime.PhysicsServer2D_body_get_collision_priority(self, body)
}
func (self PhysicsServer2D) BodySetParam(body RID, param PhysicsServer2DBodyParameter, value any) {
	self.Runtime.PhysicsServer2D_body_set_param(self, body, param, value)
}
func (self PhysicsServer2D) BodyGetParam(body RID, param PhysicsServer2DBodyParameter) any {
	return self.Runtime.PhysicsServer2D_body_get_param(self, body, param)
}
func (self PhysicsServer2D) BodyResetMassProperties(body RID) {
	self.Runtime.PhysicsServer2D_body_reset_mass_properties(self, body)
}
func (self PhysicsServer2D) BodySetState(body RID, state PhysicsServer2DBodyState, value any) {
	self.Runtime.PhysicsServer2D_body_set_state(self, body, state, value)
}
func (self PhysicsServer2D) BodyGetState(body RID, state PhysicsServer2DBodyState) any {
	return self.Runtime.PhysicsServer2D_body_get_state(self, body, state)
}
func (self PhysicsServer2D) BodyApplyCentralImpulse(body RID, impulse Vector2) {
	self.Runtime.PhysicsServer2D_body_apply_central_impulse(self, body, impulse)
}
func (self PhysicsServer2D) BodyApplyTorqueImpulse(body RID, impulse Float) {
	self.Runtime.PhysicsServer2D_body_apply_torque_impulse(self, body, impulse)
}
func (self PhysicsServer2D) BodyApplyImpulse(body RID, impulse Vector2, position Vector2) {
	self.Runtime.PhysicsServer2D_body_apply_impulse(self, body, impulse, position)
}
func (self PhysicsServer2D) BodyApplyCentralForce(body RID, force Vector2) {
	self.Runtime.PhysicsServer2D_body_apply_central_force(self, body, force)
}
func (self PhysicsServer2D) BodyApplyForce(body RID, force Vector2, position Vector2) {
	self.Runtime.PhysicsServer2D_body_apply_force(self, body, force, position)
}
func (self PhysicsServer2D) BodyApplyTorque(body RID, torque Float) {
	self.Runtime.PhysicsServer2D_body_apply_torque(self, body, torque)
}
func (self PhysicsServer2D) BodyAddConstantCentralForce(body RID, force Vector2) {
	self.Runtime.PhysicsServer2D_body_add_constant_central_force(self, body, force)
}
func (self PhysicsServer2D) BodyAddConstantForce(body RID, force Vector2, position Vector2) {
	self.Runtime.PhysicsServer2D_body_add_constant_force(self, body, force, position)
}
func (self PhysicsServer2D) BodyAddConstantTorque(body RID, torque Float) {
	self.Runtime.PhysicsServer2D_body_add_constant_torque(self, body, torque)
}
func (self PhysicsServer2D) BodySetConstantForce(body RID, force Vector2) {
	self.Runtime.PhysicsServer2D_body_set_constant_force(self, body, force)
}
func (self PhysicsServer2D) BodyGetConstantForce(body RID) Vector2 {
	return self.Runtime.PhysicsServer2D_body_get_constant_force(self, body)
}
func (self PhysicsServer2D) BodySetConstantTorque(body RID, torque Float) {
	self.Runtime.PhysicsServer2D_body_set_constant_torque(self, body, torque)
}
func (self PhysicsServer2D) BodyGetConstantTorque(body RID) Float {
	return self.Runtime.PhysicsServer2D_body_get_constant_torque(self, body)
}
func (self PhysicsServer2D) BodySetAxisVelocity(body RID, axis_velocity Vector2) {
	self.Runtime.PhysicsServer2D_body_set_axis_velocity(self, body, axis_velocity)
}
func (self PhysicsServer2D) BodyAddCollisionException(body RID, excepted_body RID) {
	self.Runtime.PhysicsServer2D_body_add_collision_exception(self, body, excepted_body)
}
func (self PhysicsServer2D) BodyRemoveCollisionException(body RID, excepted_body RID) {
	self.Runtime.PhysicsServer2D_body_remove_collision_exception(self, body, excepted_body)
}
func (self PhysicsServer2D) BodySetMaxContactsReported(body RID, amount int64) {
	self.Runtime.PhysicsServer2D_body_set_max_contacts_reported(self, body, amount)
}
func (self PhysicsServer2D) BodyGetMaxContactsReported(body RID) int64 {
	return self.Runtime.PhysicsServer2D_body_get_max_contacts_reported(self, body)
}
func (self PhysicsServer2D) BodySetOmitForceIntegration(body RID, enable bool) {
	self.Runtime.PhysicsServer2D_body_set_omit_force_integration(self, body, enable)
}
func (self PhysicsServer2D) BodyIsOmittingForceIntegration(body RID) bool {
	return self.Runtime.PhysicsServer2D_body_is_omitting_force_integration(self, body)
}
func (self PhysicsServer2D) BodySetForceIntegrationCallback(body RID, callable Callable, userdata any) {
	self.Runtime.PhysicsServer2D_body_set_force_integration_callback(self, body, callable, userdata)
}
func (self PhysicsServer2D) BodyTestMotion(body RID, parameters PhysicsTestMotionParameters2D, result PhysicsTestMotionResult2D) bool {
	return self.Runtime.PhysicsServer2D_body_test_motion(self, body, parameters, result)
}
func (self PhysicsServer2D) BodyGetDirectState(body RID) PhysicsDirectBodyState2D {
	return self.Runtime.PhysicsServer2D_body_get_direct_state(self, body)
}
func (self PhysicsServer2D) JointCreate() RID {
	return self.Runtime.PhysicsServer2D_joint_create(self)
}
func (self PhysicsServer2D) JointClear(joint RID) {
	self.Runtime.PhysicsServer2D_joint_clear(self, joint)
}
func (self PhysicsServer2D) JointSetParam(joint RID, param PhysicsServer2DJointParam, value Float) {
	self.Runtime.PhysicsServer2D_joint_set_param(self, joint, param, value)
}
func (self PhysicsServer2D) JointGetParam(joint RID, param PhysicsServer2DJointParam) Float {
	return self.Runtime.PhysicsServer2D_joint_get_param(self, joint, param)
}
func (self PhysicsServer2D) JointDisableCollisionsBetweenBodies(joint RID, disable bool) {
	self.Runtime.PhysicsServer2D_joint_disable_collisions_between_bodies(self, joint, disable)
}
func (self PhysicsServer2D) JointIsDisabledCollisionsBetweenBodies(joint RID) bool {
	return self.Runtime.PhysicsServer2D_joint_is_disabled_collisions_between_bodies(self, joint)
}
func (self PhysicsServer2D) JointMakePin(joint RID, anchor Vector2, body_a RID, body_b RID) {
	self.Runtime.PhysicsServer2D_joint_make_pin(self, joint, anchor, body_a, body_b)
}
func (self PhysicsServer2D) JointMakeGroove(joint RID, groove1_a Vector2, groove2_a Vector2, anchor_b Vector2, body_a RID, body_b RID) {
	self.Runtime.PhysicsServer2D_joint_make_groove(self, joint, groove1_a, groove2_a, anchor_b, body_a, body_b)
}
func (self PhysicsServer2D) JointMakeDampedSpring(joint RID, anchor_a Vector2, anchor_b Vector2, body_a RID, body_b RID) {
	self.Runtime.PhysicsServer2D_joint_make_damped_spring(self, joint, anchor_a, anchor_b, body_a, body_b)
}
func (self PhysicsServer2D) PinJointSetFlag(joint RID, flag PhysicsServer2DPinJointFlag, enabled bool) {
	self.Runtime.PhysicsServer2D_pin_joint_set_flag(self, joint, flag, enabled)
}
func (self PhysicsServer2D) PinJointGetFlag(joint RID, flag PhysicsServer2DPinJointFlag) bool {
	return self.Runtime.PhysicsServer2D_pin_joint_get_flag(self, joint, flag)
}
func (self PhysicsServer2D) PinJointSetParam(joint RID, param PhysicsServer2DPinJointParam, value Float) {
	self.Runtime.PhysicsServer2D_pin_joint_set_param(self, joint, param, value)
}
func (self PhysicsServer2D) PinJointGetParam(joint RID, param PhysicsServer2DPinJointParam) Float {
	return self.Runtime.PhysicsServer2D_pin_joint_get_param(self, joint, param)
}
func (self PhysicsServer2D) DampedSpringJointSetParam(joint RID, param PhysicsServer2DDampedSpringParam, value Float) {
	self.Runtime.PhysicsServer2D_damped_spring_joint_set_param(self, joint, param, value)
}
func (self PhysicsServer2D) DampedSpringJointGetParam(joint RID, param PhysicsServer2DDampedSpringParam) Float {
	return self.Runtime.PhysicsServer2D_damped_spring_joint_get_param(self, joint, param)
}
func (self PhysicsServer2D) JointGetType(joint RID) PhysicsServer2DJointType {
	return self.Runtime.PhysicsServer2D_joint_get_type(self, joint)
}
func (self PhysicsServer2D) FreeRid(rid RID) {
	self.Runtime.PhysicsServer2D_free_rid(self, rid)
}
func (self PhysicsServer2D) SetActive(active bool) {
	self.Runtime.PhysicsServer2D_set_active(self, active)
}
func (self PhysicsServer2D) GetProcessInfo(process_info PhysicsServer2DProcessInfo) int64 {
	return self.Runtime.PhysicsServer2D_get_process_info(self, process_info)
}

type extendsPhysicsServer2DExtension struct {
	_ [0]*extendsPhysicsServer2DExtension
	class
}

func (self PhysicsServer2DExtension) PhysicsServer2D() PhysicsServer2D {
	var parent PhysicsServer2D
	parent.class = self.class
	return parent
}
func (self PhysicsServer2DExtension) BodyTestMotionIsExcludingBody(body RID) bool {
	return self.Runtime.PhysicsServer2DExtension_body_test_motion_is_excluding_body(self, body)
}
func (self PhysicsServer2DExtension) BodyTestMotionIsExcludingObject(object int64) bool {
	return self.Runtime.PhysicsServer2DExtension_body_test_motion_is_excluding_object(self, object)
}

type extendsPhysicsServer2DManager struct {
	_ [0]*extendsPhysicsServer2DManager
	class
}

func (self PhysicsServer2DManager) Object() Object {
	var parent Object
	parent.class = self.class
	return parent
}
func (self PhysicsServer2DManager) RegisterServer(name string, create_callback Callable) {
	self.Runtime.PhysicsServer2DManager_register_server(self, name, create_callback)
}
func (self PhysicsServer2DManager) SetDefaultServer(name string, priority int64) {
	self.Runtime.PhysicsServer2DManager_set_default_server(self, name, priority)
}

type extendsPhysicsServer3D struct {
	_ [0]*extendsPhysicsServer3D
	class
}

func (self PhysicsServer3D) Object() Object {
	var parent Object
	parent.class = self.class
	return parent
}
func (self PhysicsServer3D) WorldBoundaryShapeCreate() RID {
	return self.Runtime.PhysicsServer3D_world_boundary_shape_create(self)
}
func (self PhysicsServer3D) SeparationRayShapeCreate() RID {
	return self.Runtime.PhysicsServer3D_separation_ray_shape_create(self)
}
func (self PhysicsServer3D) SphereShapeCreate() RID {
	return self.Runtime.PhysicsServer3D_sphere_shape_create(self)
}
func (self PhysicsServer3D) BoxShapeCreate() RID {
	return self.Runtime.PhysicsServer3D_box_shape_create(self)
}
func (self PhysicsServer3D) CapsuleShapeCreate() RID {
	return self.Runtime.PhysicsServer3D_capsule_shape_create(self)
}
func (self PhysicsServer3D) CylinderShapeCreate() RID {
	return self.Runtime.PhysicsServer3D_cylinder_shape_create(self)
}
func (self PhysicsServer3D) ConvexPolygonShapeCreate() RID {
	return self.Runtime.PhysicsServer3D_convex_polygon_shape_create(self)
}
func (self PhysicsServer3D) ConcavePolygonShapeCreate() RID {
	return self.Runtime.PhysicsServer3D_concave_polygon_shape_create(self)
}
func (self PhysicsServer3D) HeightmapShapeCreate() RID {
	return self.Runtime.PhysicsServer3D_heightmap_shape_create(self)
}
func (self PhysicsServer3D) CustomShapeCreate() RID {
	return self.Runtime.PhysicsServer3D_custom_shape_create(self)
}
func (self PhysicsServer3D) ShapeSetData(shape RID, data any) {
	self.Runtime.PhysicsServer3D_shape_set_data(self, shape, data)
}
func (self PhysicsServer3D) ShapeGetType(shape RID) PhysicsServer3DShapeType {
	return self.Runtime.PhysicsServer3D_shape_get_type(self, shape)
}
func (self PhysicsServer3D) ShapeGetData(shape RID) any {
	return self.Runtime.PhysicsServer3D_shape_get_data(self, shape)
}
func (self PhysicsServer3D) SpaceCreate() RID {
	return self.Runtime.PhysicsServer3D_space_create(self)
}
func (self PhysicsServer3D) SpaceSetActive(space RID, active bool) {
	self.Runtime.PhysicsServer3D_space_set_active(self, space, active)
}
func (self PhysicsServer3D) SpaceIsActive(space RID) bool {
	return self.Runtime.PhysicsServer3D_space_is_active(self, space)
}
func (self PhysicsServer3D) SpaceSetParam(space RID, param PhysicsServer3DSpaceParameter, value Float) {
	self.Runtime.PhysicsServer3D_space_set_param(self, space, param, value)
}
func (self PhysicsServer3D) SpaceGetParam(space RID, param PhysicsServer3DSpaceParameter) Float {
	return self.Runtime.PhysicsServer3D_space_get_param(self, space, param)
}
func (self PhysicsServer3D) SpaceGetDirectState(space RID) PhysicsDirectSpaceState3D {
	return self.Runtime.PhysicsServer3D_space_get_direct_state(self, space)
}
func (self PhysicsServer3D) AreaCreate() RID {
	return self.Runtime.PhysicsServer3D_area_create(self)
}
func (self PhysicsServer3D) AreaSetSpace(area RID, space RID) {
	self.Runtime.PhysicsServer3D_area_set_space(self, area, space)
}
func (self PhysicsServer3D) AreaGetSpace(area RID) RID {
	return self.Runtime.PhysicsServer3D_area_get_space(self, area)
}
func (self PhysicsServer3D) AreaAddShape(area RID, shape RID, transform Transform3D, disabled bool) {
	self.Runtime.PhysicsServer3D_area_add_shape(self, area, shape, transform, disabled)
}
func (self PhysicsServer3D) AreaSetShape(area RID, shape_idx int64, shape RID) {
	self.Runtime.PhysicsServer3D_area_set_shape(self, area, shape_idx, shape)
}
func (self PhysicsServer3D) AreaSetShapeTransform(area RID, shape_idx int64, transform Transform3D) {
	self.Runtime.PhysicsServer3D_area_set_shape_transform(self, area, shape_idx, transform)
}
func (self PhysicsServer3D) AreaSetShapeDisabled(area RID, shape_idx int64, disabled bool) {
	self.Runtime.PhysicsServer3D_area_set_shape_disabled(self, area, shape_idx, disabled)
}
func (self PhysicsServer3D) AreaGetShapeCount(area RID) int64 {
	return self.Runtime.PhysicsServer3D_area_get_shape_count(self, area)
}
func (self PhysicsServer3D) AreaGetShape(area RID, shape_idx int64) RID {
	return self.Runtime.PhysicsServer3D_area_get_shape(self, area, shape_idx)
}
func (self PhysicsServer3D) AreaGetShapeTransform(area RID, shape_idx int64) Transform3D {
	return self.Runtime.PhysicsServer3D_area_get_shape_transform(self, area, shape_idx)
}
func (self PhysicsServer3D) AreaRemoveShape(area RID, shape_idx int64) {
	self.Runtime.PhysicsServer3D_area_remove_shape(self, area, shape_idx)
}
func (self PhysicsServer3D) AreaClearShapes(area RID) {
	self.Runtime.PhysicsServer3D_area_clear_shapes(self, area)
}
func (self PhysicsServer3D) AreaSetCollisionLayer(area RID, layer int64) {
	self.Runtime.PhysicsServer3D_area_set_collision_layer(self, area, layer)
}
func (self PhysicsServer3D) AreaGetCollisionLayer(area RID) int64 {
	return self.Runtime.PhysicsServer3D_area_get_collision_layer(self, area)
}
func (self PhysicsServer3D) AreaSetCollisionMask(area RID, mask int64) {
	self.Runtime.PhysicsServer3D_area_set_collision_mask(self, area, mask)
}
func (self PhysicsServer3D) AreaGetCollisionMask(area RID) int64 {
	return self.Runtime.PhysicsServer3D_area_get_collision_mask(self, area)
}
func (self PhysicsServer3D) AreaSetParam(area RID, param PhysicsServer3DAreaParameter, value any) {
	self.Runtime.PhysicsServer3D_area_set_param(self, area, param, value)
}
func (self PhysicsServer3D) AreaSetTransform(area RID, transform Transform3D) {
	self.Runtime.PhysicsServer3D_area_set_transform(self, area, transform)
}
func (self PhysicsServer3D) AreaGetParam(area RID, param PhysicsServer3DAreaParameter) any {
	return self.Runtime.PhysicsServer3D_area_get_param(self, area, param)
}
func (self PhysicsServer3D) AreaGetTransform(area RID) Transform3D {
	return self.Runtime.PhysicsServer3D_area_get_transform(self, area)
}
func (self PhysicsServer3D) AreaAttachObjectInstanceId(area RID, id int64) {
	self.Runtime.PhysicsServer3D_area_attach_object_instance_id(self, area, id)
}
func (self PhysicsServer3D) AreaGetObjectInstanceId(area RID) int64 {
	return self.Runtime.PhysicsServer3D_area_get_object_instance_id(self, area)
}
func (self PhysicsServer3D) AreaSetMonitorCallback(area RID, callback Callable) {
	self.Runtime.PhysicsServer3D_area_set_monitor_callback(self, area, callback)
}
func (self PhysicsServer3D) AreaSetAreaMonitorCallback(area RID, callback Callable) {
	self.Runtime.PhysicsServer3D_area_set_area_monitor_callback(self, area, callback)
}
func (self PhysicsServer3D) AreaSetMonitorable(area RID, monitorable bool) {
	self.Runtime.PhysicsServer3D_area_set_monitorable(self, area, monitorable)
}
func (self PhysicsServer3D) AreaSetRayPickable(area RID, enable bool) {
	self.Runtime.PhysicsServer3D_area_set_ray_pickable(self, area, enable)
}
func (self PhysicsServer3D) BodyCreate() RID {
	return self.Runtime.PhysicsServer3D_body_create(self)
}
func (self PhysicsServer3D) BodySetSpace(body RID, space RID) {
	self.Runtime.PhysicsServer3D_body_set_space(self, body, space)
}
func (self PhysicsServer3D) BodyGetSpace(body RID) RID {
	return self.Runtime.PhysicsServer3D_body_get_space(self, body)
}
func (self PhysicsServer3D) BodySetMode(body RID, mode PhysicsServer3DBodyMode) {
	self.Runtime.PhysicsServer3D_body_set_mode(self, body, mode)
}
func (self PhysicsServer3D) BodyGetMode(body RID) PhysicsServer3DBodyMode {
	return self.Runtime.PhysicsServer3D_body_get_mode(self, body)
}
func (self PhysicsServer3D) BodySetCollisionLayer(body RID, layer int64) {
	self.Runtime.PhysicsServer3D_body_set_collision_layer(self, body, layer)
}
func (self PhysicsServer3D) BodyGetCollisionLayer(body RID) int64 {
	return self.Runtime.PhysicsServer3D_body_get_collision_layer(self, body)
}
func (self PhysicsServer3D) BodySetCollisionMask(body RID, mask int64) {
	self.Runtime.PhysicsServer3D_body_set_collision_mask(self, body, mask)
}
func (self PhysicsServer3D) BodyGetCollisionMask(body RID) int64 {
	return self.Runtime.PhysicsServer3D_body_get_collision_mask(self, body)
}
func (self PhysicsServer3D) BodySetCollisionPriority(body RID, priority Float) {
	self.Runtime.PhysicsServer3D_body_set_collision_priority(self, body, priority)
}
func (self PhysicsServer3D) BodyGetCollisionPriority(body RID) Float {
	return self.Runtime.PhysicsServer3D_body_get_collision_priority(self, body)
}
func (self PhysicsServer3D) BodyAddShape(body RID, shape RID, transform Transform3D, disabled bool) {
	self.Runtime.PhysicsServer3D_body_add_shape(self, body, shape, transform, disabled)
}
func (self PhysicsServer3D) BodySetShape(body RID, shape_idx int64, shape RID) {
	self.Runtime.PhysicsServer3D_body_set_shape(self, body, shape_idx, shape)
}
func (self PhysicsServer3D) BodySetShapeTransform(body RID, shape_idx int64, transform Transform3D) {
	self.Runtime.PhysicsServer3D_body_set_shape_transform(self, body, shape_idx, transform)
}
func (self PhysicsServer3D) BodySetShapeDisabled(body RID, shape_idx int64, disabled bool) {
	self.Runtime.PhysicsServer3D_body_set_shape_disabled(self, body, shape_idx, disabled)
}
func (self PhysicsServer3D) BodyGetShapeCount(body RID) int64 {
	return self.Runtime.PhysicsServer3D_body_get_shape_count(self, body)
}
func (self PhysicsServer3D) BodyGetShape(body RID, shape_idx int64) RID {
	return self.Runtime.PhysicsServer3D_body_get_shape(self, body, shape_idx)
}
func (self PhysicsServer3D) BodyGetShapeTransform(body RID, shape_idx int64) Transform3D {
	return self.Runtime.PhysicsServer3D_body_get_shape_transform(self, body, shape_idx)
}
func (self PhysicsServer3D) BodyRemoveShape(body RID, shape_idx int64) {
	self.Runtime.PhysicsServer3D_body_remove_shape(self, body, shape_idx)
}
func (self PhysicsServer3D) BodyClearShapes(body RID) {
	self.Runtime.PhysicsServer3D_body_clear_shapes(self, body)
}
func (self PhysicsServer3D) BodyAttachObjectInstanceId(body RID, id int64) {
	self.Runtime.PhysicsServer3D_body_attach_object_instance_id(self, body, id)
}
func (self PhysicsServer3D) BodyGetObjectInstanceId(body RID) int64 {
	return self.Runtime.PhysicsServer3D_body_get_object_instance_id(self, body)
}
func (self PhysicsServer3D) BodySetEnableContinuousCollisionDetection(body RID, enable bool) {
	self.Runtime.PhysicsServer3D_body_set_enable_continuous_collision_detection(self, body, enable)
}
func (self PhysicsServer3D) BodyIsContinuousCollisionDetectionEnabled(body RID) bool {
	return self.Runtime.PhysicsServer3D_body_is_continuous_collision_detection_enabled(self, body)
}
func (self PhysicsServer3D) BodySetParam(body RID, param PhysicsServer3DBodyParameter, value any) {
	self.Runtime.PhysicsServer3D_body_set_param(self, body, param, value)
}
func (self PhysicsServer3D) BodyGetParam(body RID, param PhysicsServer3DBodyParameter) any {
	return self.Runtime.PhysicsServer3D_body_get_param(self, body, param)
}
func (self PhysicsServer3D) BodyResetMassProperties(body RID) {
	self.Runtime.PhysicsServer3D_body_reset_mass_properties(self, body)
}
func (self PhysicsServer3D) BodySetState(body RID, state PhysicsServer3DBodyState, value any) {
	self.Runtime.PhysicsServer3D_body_set_state(self, body, state, value)
}
func (self PhysicsServer3D) BodyGetState(body RID, state PhysicsServer3DBodyState) any {
	return self.Runtime.PhysicsServer3D_body_get_state(self, body, state)
}
func (self PhysicsServer3D) BodyApplyCentralImpulse(body RID, impulse Vector3) {
	self.Runtime.PhysicsServer3D_body_apply_central_impulse(self, body, impulse)
}
func (self PhysicsServer3D) BodyApplyImpulse(body RID, impulse Vector3, position Vector3) {
	self.Runtime.PhysicsServer3D_body_apply_impulse(self, body, impulse, position)
}
func (self PhysicsServer3D) BodyApplyTorqueImpulse(body RID, impulse Vector3) {
	self.Runtime.PhysicsServer3D_body_apply_torque_impulse(self, body, impulse)
}
func (self PhysicsServer3D) BodyApplyCentralForce(body RID, force Vector3) {
	self.Runtime.PhysicsServer3D_body_apply_central_force(self, body, force)
}
func (self PhysicsServer3D) BodyApplyForce(body RID, force Vector3, position Vector3) {
	self.Runtime.PhysicsServer3D_body_apply_force(self, body, force, position)
}
func (self PhysicsServer3D) BodyApplyTorque(body RID, torque Vector3) {
	self.Runtime.PhysicsServer3D_body_apply_torque(self, body, torque)
}
func (self PhysicsServer3D) BodyAddConstantCentralForce(body RID, force Vector3) {
	self.Runtime.PhysicsServer3D_body_add_constant_central_force(self, body, force)
}
func (self PhysicsServer3D) BodyAddConstantForce(body RID, force Vector3, position Vector3) {
	self.Runtime.PhysicsServer3D_body_add_constant_force(self, body, force, position)
}
func (self PhysicsServer3D) BodyAddConstantTorque(body RID, torque Vector3) {
	self.Runtime.PhysicsServer3D_body_add_constant_torque(self, body, torque)
}
func (self PhysicsServer3D) BodySetConstantForce(body RID, force Vector3) {
	self.Runtime.PhysicsServer3D_body_set_constant_force(self, body, force)
}
func (self PhysicsServer3D) BodyGetConstantForce(body RID) Vector3 {
	return self.Runtime.PhysicsServer3D_body_get_constant_force(self, body)
}
func (self PhysicsServer3D) BodySetConstantTorque(body RID, torque Vector3) {
	self.Runtime.PhysicsServer3D_body_set_constant_torque(self, body, torque)
}
func (self PhysicsServer3D) BodyGetConstantTorque(body RID) Vector3 {
	return self.Runtime.PhysicsServer3D_body_get_constant_torque(self, body)
}
func (self PhysicsServer3D) BodySetAxisVelocity(body RID, axis_velocity Vector3) {
	self.Runtime.PhysicsServer3D_body_set_axis_velocity(self, body, axis_velocity)
}
func (self PhysicsServer3D) BodySetAxisLock(body RID, axis PhysicsServer3DBodyAxis, lock bool) {
	self.Runtime.PhysicsServer3D_body_set_axis_lock(self, body, axis, lock)
}
func (self PhysicsServer3D) BodyIsAxisLocked(body RID, axis PhysicsServer3DBodyAxis) bool {
	return self.Runtime.PhysicsServer3D_body_is_axis_locked(self, body, axis)
}
func (self PhysicsServer3D) BodyAddCollisionException(body RID, excepted_body RID) {
	self.Runtime.PhysicsServer3D_body_add_collision_exception(self, body, excepted_body)
}
func (self PhysicsServer3D) BodyRemoveCollisionException(body RID, excepted_body RID) {
	self.Runtime.PhysicsServer3D_body_remove_collision_exception(self, body, excepted_body)
}
func (self PhysicsServer3D) BodySetMaxContactsReported(body RID, amount int64) {
	self.Runtime.PhysicsServer3D_body_set_max_contacts_reported(self, body, amount)
}
func (self PhysicsServer3D) BodyGetMaxContactsReported(body RID) int64 {
	return self.Runtime.PhysicsServer3D_body_get_max_contacts_reported(self, body)
}
func (self PhysicsServer3D) BodySetOmitForceIntegration(body RID, enable bool) {
	self.Runtime.PhysicsServer3D_body_set_omit_force_integration(self, body, enable)
}
func (self PhysicsServer3D) BodyIsOmittingForceIntegration(body RID) bool {
	return self.Runtime.PhysicsServer3D_body_is_omitting_force_integration(self, body)
}
func (self PhysicsServer3D) BodySetForceIntegrationCallback(body RID, callable Callable, userdata any) {
	self.Runtime.PhysicsServer3D_body_set_force_integration_callback(self, body, callable, userdata)
}
func (self PhysicsServer3D) BodySetRayPickable(body RID, enable bool) {
	self.Runtime.PhysicsServer3D_body_set_ray_pickable(self, body, enable)
}
func (self PhysicsServer3D) BodyTestMotion(body RID, parameters PhysicsTestMotionParameters3D, result PhysicsTestMotionResult3D) bool {
	return self.Runtime.PhysicsServer3D_body_test_motion(self, body, parameters, result)
}
func (self PhysicsServer3D) BodyGetDirectState(body RID) PhysicsDirectBodyState3D {
	return self.Runtime.PhysicsServer3D_body_get_direct_state(self, body)
}
func (self PhysicsServer3D) SoftBodyGetBounds(body RID) AABB {
	return self.Runtime.PhysicsServer3D_soft_body_get_bounds(self, body)
}
func (self PhysicsServer3D) JointCreate() RID {
	return self.Runtime.PhysicsServer3D_joint_create(self)
}
func (self PhysicsServer3D) JointClear(joint RID) {
	self.Runtime.PhysicsServer3D_joint_clear(self, joint)
}
func (self PhysicsServer3D) JointMakePin(joint RID, body_A RID, local_A Vector3, body_B RID, local_B Vector3) {
	self.Runtime.PhysicsServer3D_joint_make_pin(self, joint, body_A, local_A, body_B, local_B)
}
func (self PhysicsServer3D) PinJointSetParam(joint RID, param PhysicsServer3DPinJointParam, value Float) {
	self.Runtime.PhysicsServer3D_pin_joint_set_param(self, joint, param, value)
}
func (self PhysicsServer3D) PinJointGetParam(joint RID, param PhysicsServer3DPinJointParam) Float {
	return self.Runtime.PhysicsServer3D_pin_joint_get_param(self, joint, param)
}
func (self PhysicsServer3D) PinJointSetLocalA(joint RID, local_A Vector3) {
	self.Runtime.PhysicsServer3D_pin_joint_set_local_a(self, joint, local_A)
}
func (self PhysicsServer3D) PinJointGetLocalA(joint RID) Vector3 {
	return self.Runtime.PhysicsServer3D_pin_joint_get_local_a(self, joint)
}
func (self PhysicsServer3D) PinJointSetLocalB(joint RID, local_B Vector3) {
	self.Runtime.PhysicsServer3D_pin_joint_set_local_b(self, joint, local_B)
}
func (self PhysicsServer3D) PinJointGetLocalB(joint RID) Vector3 {
	return self.Runtime.PhysicsServer3D_pin_joint_get_local_b(self, joint)
}
func (self PhysicsServer3D) JointMakeHinge(joint RID, body_A RID, hinge_A Transform3D, body_B RID, hinge_B Transform3D) {
	self.Runtime.PhysicsServer3D_joint_make_hinge(self, joint, body_A, hinge_A, body_B, hinge_B)
}
func (self PhysicsServer3D) HingeJointSetParam(joint RID, param PhysicsServer3DHingeJointParam, value Float) {
	self.Runtime.PhysicsServer3D_hinge_joint_set_param(self, joint, param, value)
}
func (self PhysicsServer3D) HingeJointGetParam(joint RID, param PhysicsServer3DHingeJointParam) Float {
	return self.Runtime.PhysicsServer3D_hinge_joint_get_param(self, joint, param)
}
func (self PhysicsServer3D) HingeJointSetFlag(joint RID, flag PhysicsServer3DHingeJointFlag, enabled bool) {
	self.Runtime.PhysicsServer3D_hinge_joint_set_flag(self, joint, flag, enabled)
}
func (self PhysicsServer3D) HingeJointGetFlag(joint RID, flag PhysicsServer3DHingeJointFlag) bool {
	return self.Runtime.PhysicsServer3D_hinge_joint_get_flag(self, joint, flag)
}
func (self PhysicsServer3D) JointMakeSlider(joint RID, body_A RID, local_ref_A Transform3D, body_B RID, local_ref_B Transform3D) {
	self.Runtime.PhysicsServer3D_joint_make_slider(self, joint, body_A, local_ref_A, body_B, local_ref_B)
}
func (self PhysicsServer3D) SliderJointSetParam(joint RID, param PhysicsServer3DSliderJointParam, value Float) {
	self.Runtime.PhysicsServer3D_slider_joint_set_param(self, joint, param, value)
}
func (self PhysicsServer3D) SliderJointGetParam(joint RID, param PhysicsServer3DSliderJointParam) Float {
	return self.Runtime.PhysicsServer3D_slider_joint_get_param(self, joint, param)
}
func (self PhysicsServer3D) JointMakeConeTwist(joint RID, body_A RID, local_ref_A Transform3D, body_B RID, local_ref_B Transform3D) {
	self.Runtime.PhysicsServer3D_joint_make_cone_twist(self, joint, body_A, local_ref_A, body_B, local_ref_B)
}
func (self PhysicsServer3D) ConeTwistJointSetParam(joint RID, param PhysicsServer3DConeTwistJointParam, value Float) {
	self.Runtime.PhysicsServer3D_cone_twist_joint_set_param(self, joint, param, value)
}
func (self PhysicsServer3D) ConeTwistJointGetParam(joint RID, param PhysicsServer3DConeTwistJointParam) Float {
	return self.Runtime.PhysicsServer3D_cone_twist_joint_get_param(self, joint, param)
}
func (self PhysicsServer3D) JointGetType(joint RID) PhysicsServer3DJointType {
	return self.Runtime.PhysicsServer3D_joint_get_type(self, joint)
}
func (self PhysicsServer3D) JointSetSolverPriority(joint RID, priority int64) {
	self.Runtime.PhysicsServer3D_joint_set_solver_priority(self, joint, priority)
}
func (self PhysicsServer3D) JointGetSolverPriority(joint RID) int64 {
	return self.Runtime.PhysicsServer3D_joint_get_solver_priority(self, joint)
}
func (self PhysicsServer3D) JointDisableCollisionsBetweenBodies(joint RID, disable bool) {
	self.Runtime.PhysicsServer3D_joint_disable_collisions_between_bodies(self, joint, disable)
}
func (self PhysicsServer3D) JointIsDisabledCollisionsBetweenBodies(joint RID) bool {
	return self.Runtime.PhysicsServer3D_joint_is_disabled_collisions_between_bodies(self, joint)
}
func (self PhysicsServer3D) JointMakeGeneric6dof(joint RID, body_A RID, local_ref_A Transform3D, body_B RID, local_ref_B Transform3D) {
	self.Runtime.PhysicsServer3D_joint_make_generic_6dof(self, joint, body_A, local_ref_A, body_B, local_ref_B)
}
func (self PhysicsServer3D) Generic6dofJointSetParam(joint RID, axis Vector3Axis, param PhysicsServer3DG6DOFJointAxisParam, value Float) {
	self.Runtime.PhysicsServer3D_generic_6dof_joint_set_param(self, joint, axis, param, value)
}
func (self PhysicsServer3D) Generic6dofJointGetParam(joint RID, axis Vector3Axis, param PhysicsServer3DG6DOFJointAxisParam) Float {
	return self.Runtime.PhysicsServer3D_generic_6dof_joint_get_param(self, joint, axis, param)
}
func (self PhysicsServer3D) Generic6dofJointSetFlag(joint RID, axis Vector3Axis, flag PhysicsServer3DG6DOFJointAxisFlag, enable bool) {
	self.Runtime.PhysicsServer3D_generic_6dof_joint_set_flag(self, joint, axis, flag, enable)
}
func (self PhysicsServer3D) Generic6dofJointGetFlag(joint RID, axis Vector3Axis, flag PhysicsServer3DG6DOFJointAxisFlag) bool {
	return self.Runtime.PhysicsServer3D_generic_6dof_joint_get_flag(self, joint, axis, flag)
}
func (self PhysicsServer3D) FreeRid(rid RID) {
	self.Runtime.PhysicsServer3D_free_rid(self, rid)
}
func (self PhysicsServer3D) SetActive(active bool) {
	self.Runtime.PhysicsServer3D_set_active(self, active)
}
func (self PhysicsServer3D) GetProcessInfo(process_info PhysicsServer3DProcessInfo) int64 {
	return self.Runtime.PhysicsServer3D_get_process_info(self, process_info)
}

type extendsPhysicsServer3DExtension struct {
	_ [0]*extendsPhysicsServer3DExtension
	class
}

func (self PhysicsServer3DExtension) PhysicsServer3D() PhysicsServer3D {
	var parent PhysicsServer3D
	parent.class = self.class
	return parent
}
func (self PhysicsServer3DExtension) BodyTestMotionIsExcludingBody(body RID) bool {
	return self.Runtime.PhysicsServer3DExtension_body_test_motion_is_excluding_body(self, body)
}
func (self PhysicsServer3DExtension) BodyTestMotionIsExcludingObject(object int64) bool {
	return self.Runtime.PhysicsServer3DExtension_body_test_motion_is_excluding_object(self, object)
}

type extendsPhysicsServer3DManager struct {
	_ [0]*extendsPhysicsServer3DManager
	class
}

func (self PhysicsServer3DManager) Object() Object {
	var parent Object
	parent.class = self.class
	return parent
}
func (self PhysicsServer3DManager) RegisterServer(name string, create_callback Callable) {
	self.Runtime.PhysicsServer3DManager_register_server(self, name, create_callback)
}
func (self PhysicsServer3DManager) SetDefaultServer(name string, priority int64) {
	self.Runtime.PhysicsServer3DManager_set_default_server(self, name, priority)
}

type extendsPhysicsServer3DRenderingServerHandler struct {
	_ [0]*extendsPhysicsServer3DRenderingServerHandler
	class
}

func (self PhysicsServer3DRenderingServerHandler) Object() Object {
	var parent Object
	parent.class = self.class
	return parent
}
func (self PhysicsServer3DRenderingServerHandler) SetVertex(vertex_id int64, vertex Vector3) {
	self.Runtime.PhysicsServer3DRenderingServerHandler_set_vertex(self, vertex_id, vertex)
}
func (self PhysicsServer3DRenderingServerHandler) SetNormal(vertex_id int64, normal Vector3) {
	self.Runtime.PhysicsServer3DRenderingServerHandler_set_normal(self, vertex_id, normal)
}
func (self PhysicsServer3DRenderingServerHandler) SetAabb(aabb AABB) {
	self.Runtime.PhysicsServer3DRenderingServerHandler_set_aabb(self, aabb)
}

type extendsPhysicsShapeQueryParameters2D struct {
	_ [0]*extendsPhysicsShapeQueryParameters2D
	class
}

func (self PhysicsShapeQueryParameters2D) RefCounted() RefCounted {
	var parent RefCounted
	parent.class = self.class
	return parent
}
func (self PhysicsShapeQueryParameters2D) SetShape(shape Resource) {
	self.Runtime.PhysicsShapeQueryParameters2D_set_shape(self, shape)
}
func (self PhysicsShapeQueryParameters2D) GetShape() Resource {
	return self.Runtime.PhysicsShapeQueryParameters2D_get_shape(self)
}
func (self PhysicsShapeQueryParameters2D) SetShapeRid(shape RID) {
	self.Runtime.PhysicsShapeQueryParameters2D_set_shape_rid(self, shape)
}
func (self PhysicsShapeQueryParameters2D) GetShapeRid() RID {
	return self.Runtime.PhysicsShapeQueryParameters2D_get_shape_rid(self)
}
func (self PhysicsShapeQueryParameters2D) SetTransform(transform Transform2D) {
	self.Runtime.PhysicsShapeQueryParameters2D_set_transform(self, transform)
}
func (self PhysicsShapeQueryParameters2D) GetTransform() Transform2D {
	return self.Runtime.PhysicsShapeQueryParameters2D_get_transform(self)
}
func (self PhysicsShapeQueryParameters2D) SetMotion(motion Vector2) {
	self.Runtime.PhysicsShapeQueryParameters2D_set_motion(self, motion)
}
func (self PhysicsShapeQueryParameters2D) GetMotion() Vector2 {
	return self.Runtime.PhysicsShapeQueryParameters2D_get_motion(self)
}
func (self PhysicsShapeQueryParameters2D) SetMargin(margin Float) {
	self.Runtime.PhysicsShapeQueryParameters2D_set_margin(self, margin)
}
func (self PhysicsShapeQueryParameters2D) GetMargin() Float {
	return self.Runtime.PhysicsShapeQueryParameters2D_get_margin(self)
}
func (self PhysicsShapeQueryParameters2D) SetCollisionMask(collision_mask int64) {
	self.Runtime.PhysicsShapeQueryParameters2D_set_collision_mask(self, collision_mask)
}
func (self PhysicsShapeQueryParameters2D) GetCollisionMask() int64 {
	return self.Runtime.PhysicsShapeQueryParameters2D_get_collision_mask(self)
}
func (self PhysicsShapeQueryParameters2D) SetExclude(exclude ArrayOf[RID]) {
	self.Runtime.PhysicsShapeQueryParameters2D_set_exclude(self, exclude)
}
func (self PhysicsShapeQueryParameters2D) GetExclude() ArrayOf[RID] {
	return self.Runtime.PhysicsShapeQueryParameters2D_get_exclude(self)
}
func (self PhysicsShapeQueryParameters2D) SetCollideWithBodies(enable bool) {
	self.Runtime.PhysicsShapeQueryParameters2D_set_collide_with_bodies(self, enable)
}
func (self PhysicsShapeQueryParameters2D) IsCollideWithBodiesEnabled() bool {
	return self.Runtime.PhysicsShapeQueryParameters2D_is_collide_with_bodies_enabled(self)
}
func (self PhysicsShapeQueryParameters2D) SetCollideWithAreas(enable bool) {
	self.Runtime.PhysicsShapeQueryParameters2D_set_collide_with_areas(self, enable)
}
func (self PhysicsShapeQueryParameters2D) IsCollideWithAreasEnabled() bool {
	return self.Runtime.PhysicsShapeQueryParameters2D_is_collide_with_areas_enabled(self)
}

type extendsPhysicsShapeQueryParameters3D struct {
	_ [0]*extendsPhysicsShapeQueryParameters3D
	class
}

func (self PhysicsShapeQueryParameters3D) RefCounted() RefCounted {
	var parent RefCounted
	parent.class = self.class
	return parent
}
func (self PhysicsShapeQueryParameters3D) SetShape(shape Resource) {
	self.Runtime.PhysicsShapeQueryParameters3D_set_shape(self, shape)
}
func (self PhysicsShapeQueryParameters3D) GetShape() Resource {
	return self.Runtime.PhysicsShapeQueryParameters3D_get_shape(self)
}
func (self PhysicsShapeQueryParameters3D) SetShapeRid(shape RID) {
	self.Runtime.PhysicsShapeQueryParameters3D_set_shape_rid(self, shape)
}
func (self PhysicsShapeQueryParameters3D) GetShapeRid() RID {
	return self.Runtime.PhysicsShapeQueryParameters3D_get_shape_rid(self)
}
func (self PhysicsShapeQueryParameters3D) SetTransform(transform Transform3D) {
	self.Runtime.PhysicsShapeQueryParameters3D_set_transform(self, transform)
}
func (self PhysicsShapeQueryParameters3D) GetTransform() Transform3D {
	return self.Runtime.PhysicsShapeQueryParameters3D_get_transform(self)
}
func (self PhysicsShapeQueryParameters3D) SetMotion(motion Vector3) {
	self.Runtime.PhysicsShapeQueryParameters3D_set_motion(self, motion)
}
func (self PhysicsShapeQueryParameters3D) GetMotion() Vector3 {
	return self.Runtime.PhysicsShapeQueryParameters3D_get_motion(self)
}
func (self PhysicsShapeQueryParameters3D) SetMargin(margin Float) {
	self.Runtime.PhysicsShapeQueryParameters3D_set_margin(self, margin)
}
func (self PhysicsShapeQueryParameters3D) GetMargin() Float {
	return self.Runtime.PhysicsShapeQueryParameters3D_get_margin(self)
}
func (self PhysicsShapeQueryParameters3D) SetCollisionMask(collision_mask int64) {
	self.Runtime.PhysicsShapeQueryParameters3D_set_collision_mask(self, collision_mask)
}
func (self PhysicsShapeQueryParameters3D) GetCollisionMask() int64 {
	return self.Runtime.PhysicsShapeQueryParameters3D_get_collision_mask(self)
}
func (self PhysicsShapeQueryParameters3D) SetExclude(exclude ArrayOf[RID]) {
	self.Runtime.PhysicsShapeQueryParameters3D_set_exclude(self, exclude)
}
func (self PhysicsShapeQueryParameters3D) GetExclude() ArrayOf[RID] {
	return self.Runtime.PhysicsShapeQueryParameters3D_get_exclude(self)
}
func (self PhysicsShapeQueryParameters3D) SetCollideWithBodies(enable bool) {
	self.Runtime.PhysicsShapeQueryParameters3D_set_collide_with_bodies(self, enable)
}
func (self PhysicsShapeQueryParameters3D) IsCollideWithBodiesEnabled() bool {
	return self.Runtime.PhysicsShapeQueryParameters3D_is_collide_with_bodies_enabled(self)
}
func (self PhysicsShapeQueryParameters3D) SetCollideWithAreas(enable bool) {
	self.Runtime.PhysicsShapeQueryParameters3D_set_collide_with_areas(self, enable)
}
func (self PhysicsShapeQueryParameters3D) IsCollideWithAreasEnabled() bool {
	return self.Runtime.PhysicsShapeQueryParameters3D_is_collide_with_areas_enabled(self)
}

type extendsPhysicsTestMotionParameters2D struct {
	_ [0]*extendsPhysicsTestMotionParameters2D
	class
}

func (self PhysicsTestMotionParameters2D) RefCounted() RefCounted {
	var parent RefCounted
	parent.class = self.class
	return parent
}
func (self PhysicsTestMotionParameters2D) GetFrom() Transform2D {
	return self.Runtime.PhysicsTestMotionParameters2D_get_from(self)
}
func (self PhysicsTestMotionParameters2D) SetFrom(from Transform2D) {
	self.Runtime.PhysicsTestMotionParameters2D_set_from(self, from)
}
func (self PhysicsTestMotionParameters2D) GetMotion() Vector2 {
	return self.Runtime.PhysicsTestMotionParameters2D_get_motion(self)
}
func (self PhysicsTestMotionParameters2D) SetMotion(motion Vector2) {
	self.Runtime.PhysicsTestMotionParameters2D_set_motion(self, motion)
}
func (self PhysicsTestMotionParameters2D) GetMargin() Float {
	return self.Runtime.PhysicsTestMotionParameters2D_get_margin(self)
}
func (self PhysicsTestMotionParameters2D) SetMargin(margin Float) {
	self.Runtime.PhysicsTestMotionParameters2D_set_margin(self, margin)
}
func (self PhysicsTestMotionParameters2D) IsCollideSeparationRayEnabled() bool {
	return self.Runtime.PhysicsTestMotionParameters2D_is_collide_separation_ray_enabled(self)
}
func (self PhysicsTestMotionParameters2D) SetCollideSeparationRayEnabled(enabled bool) {
	self.Runtime.PhysicsTestMotionParameters2D_set_collide_separation_ray_enabled(self, enabled)
}
func (self PhysicsTestMotionParameters2D) GetExcludeBodies() ArrayOf[RID] {
	return self.Runtime.PhysicsTestMotionParameters2D_get_exclude_bodies(self)
}
func (self PhysicsTestMotionParameters2D) SetExcludeBodies(exclude_list ArrayOf[RID]) {
	self.Runtime.PhysicsTestMotionParameters2D_set_exclude_bodies(self, exclude_list)
}
func (self PhysicsTestMotionParameters2D) GetExcludeObjects() ArrayOf[int64] {
	return self.Runtime.PhysicsTestMotionParameters2D_get_exclude_objects(self)
}
func (self PhysicsTestMotionParameters2D) SetExcludeObjects(exclude_list ArrayOf[int64]) {
	self.Runtime.PhysicsTestMotionParameters2D_set_exclude_objects(self, exclude_list)
}
func (self PhysicsTestMotionParameters2D) IsRecoveryAsCollisionEnabled() bool {
	return self.Runtime.PhysicsTestMotionParameters2D_is_recovery_as_collision_enabled(self)
}
func (self PhysicsTestMotionParameters2D) SetRecoveryAsCollisionEnabled(enabled bool) {
	self.Runtime.PhysicsTestMotionParameters2D_set_recovery_as_collision_enabled(self, enabled)
}

type extendsPhysicsTestMotionParameters3D struct {
	_ [0]*extendsPhysicsTestMotionParameters3D
	class
}

func (self PhysicsTestMotionParameters3D) RefCounted() RefCounted {
	var parent RefCounted
	parent.class = self.class
	return parent
}
func (self PhysicsTestMotionParameters3D) GetFrom() Transform3D {
	return self.Runtime.PhysicsTestMotionParameters3D_get_from(self)
}
func (self PhysicsTestMotionParameters3D) SetFrom(from Transform3D) {
	self.Runtime.PhysicsTestMotionParameters3D_set_from(self, from)
}
func (self PhysicsTestMotionParameters3D) GetMotion() Vector3 {
	return self.Runtime.PhysicsTestMotionParameters3D_get_motion(self)
}
func (self PhysicsTestMotionParameters3D) SetMotion(motion Vector3) {
	self.Runtime.PhysicsTestMotionParameters3D_set_motion(self, motion)
}
func (self PhysicsTestMotionParameters3D) GetMargin() Float {
	return self.Runtime.PhysicsTestMotionParameters3D_get_margin(self)
}
func (self PhysicsTestMotionParameters3D) SetMargin(margin Float) {
	self.Runtime.PhysicsTestMotionParameters3D_set_margin(self, margin)
}
func (self PhysicsTestMotionParameters3D) GetMaxCollisions() int64 {
	return self.Runtime.PhysicsTestMotionParameters3D_get_max_collisions(self)
}
func (self PhysicsTestMotionParameters3D) SetMaxCollisions(max_collisions int64) {
	self.Runtime.PhysicsTestMotionParameters3D_set_max_collisions(self, max_collisions)
}
func (self PhysicsTestMotionParameters3D) IsCollideSeparationRayEnabled() bool {
	return self.Runtime.PhysicsTestMotionParameters3D_is_collide_separation_ray_enabled(self)
}
func (self PhysicsTestMotionParameters3D) SetCollideSeparationRayEnabled(enabled bool) {
	self.Runtime.PhysicsTestMotionParameters3D_set_collide_separation_ray_enabled(self, enabled)
}
func (self PhysicsTestMotionParameters3D) GetExcludeBodies() ArrayOf[RID] {
	return self.Runtime.PhysicsTestMotionParameters3D_get_exclude_bodies(self)
}
func (self PhysicsTestMotionParameters3D) SetExcludeBodies(exclude_list ArrayOf[RID]) {
	self.Runtime.PhysicsTestMotionParameters3D_set_exclude_bodies(self, exclude_list)
}
func (self PhysicsTestMotionParameters3D) GetExcludeObjects() ArrayOf[int64] {
	return self.Runtime.PhysicsTestMotionParameters3D_get_exclude_objects(self)
}
func (self PhysicsTestMotionParameters3D) SetExcludeObjects(exclude_list ArrayOf[int64]) {
	self.Runtime.PhysicsTestMotionParameters3D_set_exclude_objects(self, exclude_list)
}
func (self PhysicsTestMotionParameters3D) IsRecoveryAsCollisionEnabled() bool {
	return self.Runtime.PhysicsTestMotionParameters3D_is_recovery_as_collision_enabled(self)
}
func (self PhysicsTestMotionParameters3D) SetRecoveryAsCollisionEnabled(enabled bool) {
	self.Runtime.PhysicsTestMotionParameters3D_set_recovery_as_collision_enabled(self, enabled)
}

type extendsPhysicsTestMotionResult2D struct {
	_ [0]*extendsPhysicsTestMotionResult2D
	class
}

func (self PhysicsTestMotionResult2D) RefCounted() RefCounted {
	var parent RefCounted
	parent.class = self.class
	return parent
}
func (self PhysicsTestMotionResult2D) GetTravel() Vector2 {
	return self.Runtime.PhysicsTestMotionResult2D_get_travel(self)
}
func (self PhysicsTestMotionResult2D) GetRemainder() Vector2 {
	return self.Runtime.PhysicsTestMotionResult2D_get_remainder(self)
}
func (self PhysicsTestMotionResult2D) GetCollisionPoint() Vector2 {
	return self.Runtime.PhysicsTestMotionResult2D_get_collision_point(self)
}
func (self PhysicsTestMotionResult2D) GetCollisionNormal() Vector2 {
	return self.Runtime.PhysicsTestMotionResult2D_get_collision_normal(self)
}
func (self PhysicsTestMotionResult2D) GetColliderVelocity() Vector2 {
	return self.Runtime.PhysicsTestMotionResult2D_get_collider_velocity(self)
}
func (self PhysicsTestMotionResult2D) GetColliderId() int64 {
	return self.Runtime.PhysicsTestMotionResult2D_get_collider_id(self)
}
func (self PhysicsTestMotionResult2D) GetColliderRid() RID {
	return self.Runtime.PhysicsTestMotionResult2D_get_collider_rid(self)
}
func (self PhysicsTestMotionResult2D) GetCollider() Object {
	return self.Runtime.PhysicsTestMotionResult2D_get_collider(self)
}
func (self PhysicsTestMotionResult2D) GetColliderShape() int64 {
	return self.Runtime.PhysicsTestMotionResult2D_get_collider_shape(self)
}
func (self PhysicsTestMotionResult2D) GetCollisionLocalShape() int64 {
	return self.Runtime.PhysicsTestMotionResult2D_get_collision_local_shape(self)
}
func (self PhysicsTestMotionResult2D) GetCollisionDepth() Float {
	return self.Runtime.PhysicsTestMotionResult2D_get_collision_depth(self)
}
func (self PhysicsTestMotionResult2D) GetCollisionSafeFraction() Float {
	return self.Runtime.PhysicsTestMotionResult2D_get_collision_safe_fraction(self)
}
func (self PhysicsTestMotionResult2D) GetCollisionUnsafeFraction() Float {
	return self.Runtime.PhysicsTestMotionResult2D_get_collision_unsafe_fraction(self)
}

type extendsPhysicsTestMotionResult3D struct {
	_ [0]*extendsPhysicsTestMotionResult3D
	class
}

func (self PhysicsTestMotionResult3D) RefCounted() RefCounted {
	var parent RefCounted
	parent.class = self.class
	return parent
}
func (self PhysicsTestMotionResult3D) GetTravel() Vector3 {
	return self.Runtime.PhysicsTestMotionResult3D_get_travel(self)
}
func (self PhysicsTestMotionResult3D) GetRemainder() Vector3 {
	return self.Runtime.PhysicsTestMotionResult3D_get_remainder(self)
}
func (self PhysicsTestMotionResult3D) GetCollisionSafeFraction() Float {
	return self.Runtime.PhysicsTestMotionResult3D_get_collision_safe_fraction(self)
}
func (self PhysicsTestMotionResult3D) GetCollisionUnsafeFraction() Float {
	return self.Runtime.PhysicsTestMotionResult3D_get_collision_unsafe_fraction(self)
}
func (self PhysicsTestMotionResult3D) GetCollisionCount() int64 {
	return self.Runtime.PhysicsTestMotionResult3D_get_collision_count(self)
}
func (self PhysicsTestMotionResult3D) GetCollisionPoint(collision_index int64) Vector3 {
	return self.Runtime.PhysicsTestMotionResult3D_get_collision_point(self, collision_index)
}
func (self PhysicsTestMotionResult3D) GetCollisionNormal(collision_index int64) Vector3 {
	return self.Runtime.PhysicsTestMotionResult3D_get_collision_normal(self, collision_index)
}
func (self PhysicsTestMotionResult3D) GetColliderVelocity(collision_index int64) Vector3 {
	return self.Runtime.PhysicsTestMotionResult3D_get_collider_velocity(self, collision_index)
}
func (self PhysicsTestMotionResult3D) GetColliderId(collision_index int64) int64 {
	return self.Runtime.PhysicsTestMotionResult3D_get_collider_id(self, collision_index)
}
func (self PhysicsTestMotionResult3D) GetColliderRid(collision_index int64) RID {
	return self.Runtime.PhysicsTestMotionResult3D_get_collider_rid(self, collision_index)
}
func (self PhysicsTestMotionResult3D) GetCollider(collision_index int64) Object {
	return self.Runtime.PhysicsTestMotionResult3D_get_collider(self, collision_index)
}
func (self PhysicsTestMotionResult3D) GetColliderShape(collision_index int64) int64 {
	return self.Runtime.PhysicsTestMotionResult3D_get_collider_shape(self, collision_index)
}
func (self PhysicsTestMotionResult3D) GetCollisionLocalShape(collision_index int64) int64 {
	return self.Runtime.PhysicsTestMotionResult3D_get_collision_local_shape(self, collision_index)
}
func (self PhysicsTestMotionResult3D) GetCollisionDepth(collision_index int64) Float {
	return self.Runtime.PhysicsTestMotionResult3D_get_collision_depth(self, collision_index)
}

type extendsPinJoint2D struct {
	_ [0]*extendsPinJoint2D
	class
}

func (self PinJoint2D) Joint2D() Joint2D {
	var parent Joint2D
	parent.class = self.class
	return parent
}
func (self PinJoint2D) SetSoftness(softness Float) {
	self.Runtime.PinJoint2D_set_softness(self, softness)
}
func (self PinJoint2D) GetSoftness() Float {
	return self.Runtime.PinJoint2D_get_softness(self)
}
func (self PinJoint2D) SetAngularLimitLower(angular_limit_lower Float) {
	self.Runtime.PinJoint2D_set_angular_limit_lower(self, angular_limit_lower)
}
func (self PinJoint2D) GetAngularLimitLower() Float {
	return self.Runtime.PinJoint2D_get_angular_limit_lower(self)
}
func (self PinJoint2D) SetAngularLimitUpper(angular_limit_upper Float) {
	self.Runtime.PinJoint2D_set_angular_limit_upper(self, angular_limit_upper)
}
func (self PinJoint2D) GetAngularLimitUpper() Float {
	return self.Runtime.PinJoint2D_get_angular_limit_upper(self)
}
func (self PinJoint2D) SetMotorTargetVelocity(motor_target_velocity Float) {
	self.Runtime.PinJoint2D_set_motor_target_velocity(self, motor_target_velocity)
}
func (self PinJoint2D) GetMotorTargetVelocity() Float {
	return self.Runtime.PinJoint2D_get_motor_target_velocity(self)
}
func (self PinJoint2D) SetMotorEnabled(enabled bool) {
	self.Runtime.PinJoint2D_set_motor_enabled(self, enabled)
}
func (self PinJoint2D) IsMotorEnabled() bool {
	return self.Runtime.PinJoint2D_is_motor_enabled(self)
}
func (self PinJoint2D) SetAngularLimitEnabled(enabled bool) {
	self.Runtime.PinJoint2D_set_angular_limit_enabled(self, enabled)
}
func (self PinJoint2D) IsAngularLimitEnabled() bool {
	return self.Runtime.PinJoint2D_is_angular_limit_enabled(self)
}

type extendsPinJoint3D struct {
	_ [0]*extendsPinJoint3D
	class
}

func (self PinJoint3D) Joint3D() Joint3D {
	var parent Joint3D
	parent.class = self.class
	return parent
}
func (self PinJoint3D) SetParam(param PinJoint3DParam, value Float) {
	self.Runtime.PinJoint3D_set_param(self, param, value)
}
func (self PinJoint3D) GetParam(param PinJoint3DParam) Float {
	return self.Runtime.PinJoint3D_get_param(self, param)
}

type extendsPlaceholderCubemap struct {
	_ [0]*extendsPlaceholderCubemap
	class
}

func (self PlaceholderCubemap) PlaceholderTextureLayered() PlaceholderTextureLayered {
	var parent PlaceholderTextureLayered
	parent.class = self.class
	return parent
}

type extendsPlaceholderCubemapArray struct {
	_ [0]*extendsPlaceholderCubemapArray
	class
}

func (self PlaceholderCubemapArray) PlaceholderTextureLayered() PlaceholderTextureLayered {
	var parent PlaceholderTextureLayered
	parent.class = self.class
	return parent
}

type extendsPlaceholderMaterial struct {
	_ [0]*extendsPlaceholderMaterial
	class
}

func (self PlaceholderMaterial) Material() Material {
	var parent Material
	parent.class = self.class
	return parent
}

type extendsPlaceholderMesh struct {
	_ [0]*extendsPlaceholderMesh
	class
}

func (self PlaceholderMesh) Mesh() Mesh { var parent Mesh; parent.class = self.class; return parent }
func (self PlaceholderMesh) SetAabb(aabb AABB) {
	self.Runtime.PlaceholderMesh_set_aabb(self, aabb)
}

type extendsPlaceholderTexture2D struct {
	_ [0]*extendsPlaceholderTexture2D
	class
}

func (self PlaceholderTexture2D) Texture2D() Texture2D {
	var parent Texture2D
	parent.class = self.class
	return parent
}
func (self PlaceholderTexture2D) SetSize(size Vector2) {
	self.Runtime.PlaceholderTexture2D_set_size(self, size)
}

type extendsPlaceholderTexture2DArray struct {
	_ [0]*extendsPlaceholderTexture2DArray
	class
}

func (self PlaceholderTexture2DArray) PlaceholderTextureLayered() PlaceholderTextureLayered {
	var parent PlaceholderTextureLayered
	parent.class = self.class
	return parent
}

type extendsPlaceholderTexture3D struct {
	_ [0]*extendsPlaceholderTexture3D
	class
}

func (self PlaceholderTexture3D) Texture3D() Texture3D {
	var parent Texture3D
	parent.class = self.class
	return parent
}
func (self PlaceholderTexture3D) SetSize(size Vector3i) {
	self.Runtime.PlaceholderTexture3D_set_size(self, size)
}
func (self PlaceholderTexture3D) GetSize() Vector3i {
	return self.Runtime.PlaceholderTexture3D_get_size(self)
}

type extendsPlaceholderTextureLayered struct {
	_ [0]*extendsPlaceholderTextureLayered
	class
}

func (self PlaceholderTextureLayered) TextureLayered() TextureLayered {
	var parent TextureLayered
	parent.class = self.class
	return parent
}
func (self PlaceholderTextureLayered) SetSize(size Vector2i) {
	self.Runtime.PlaceholderTextureLayered_set_size(self, size)
}
func (self PlaceholderTextureLayered) GetSize() Vector2i {
	return self.Runtime.PlaceholderTextureLayered_get_size(self)
}
func (self PlaceholderTextureLayered) SetLayers(layers int64) {
	self.Runtime.PlaceholderTextureLayered_set_layers(self, layers)
}

type extendsPlaneMesh struct {
	_ [0]*extendsPlaneMesh
	class
}

func (self PlaneMesh) PrimitiveMesh() PrimitiveMesh {
	var parent PrimitiveMesh
	parent.class = self.class
	return parent
}
func (self PlaneMesh) SetSize(size Vector2) {
	self.Runtime.PlaneMesh_set_size(self, size)
}
func (self PlaneMesh) GetSize() Vector2 {
	return self.Runtime.PlaneMesh_get_size(self)
}
func (self PlaneMesh) SetSubdivideWidth(subdivide int64) {
	self.Runtime.PlaneMesh_set_subdivide_width(self, subdivide)
}
func (self PlaneMesh) GetSubdivideWidth() int64 {
	return self.Runtime.PlaneMesh_get_subdivide_width(self)
}
func (self PlaneMesh) SetSubdivideDepth(subdivide int64) {
	self.Runtime.PlaneMesh_set_subdivide_depth(self, subdivide)
}
func (self PlaneMesh) GetSubdivideDepth() int64 {
	return self.Runtime.PlaneMesh_get_subdivide_depth(self)
}
func (self PlaneMesh) SetCenterOffset(offset Vector3) {
	self.Runtime.PlaneMesh_set_center_offset(self, offset)
}
func (self PlaneMesh) GetCenterOffset() Vector3 {
	return self.Runtime.PlaneMesh_get_center_offset(self)
}
func (self PlaneMesh) SetOrientation(orientation PlaneMeshOrientation) {
	self.Runtime.PlaneMesh_set_orientation(self, orientation)
}
func (self PlaneMesh) GetOrientation() PlaneMeshOrientation {
	return self.Runtime.PlaneMesh_get_orientation(self)
}

type extendsPointLight2D struct {
	_ [0]*extendsPointLight2D
	class
}

func (self PointLight2D) Light2D() Light2D {
	var parent Light2D
	parent.class = self.class
	return parent
}
func (self PointLight2D) SetTexture(texture Texture2D) {
	self.Runtime.PointLight2D_set_texture(self, texture)
}
func (self PointLight2D) GetTexture() Texture2D {
	return self.Runtime.PointLight2D_get_texture(self)
}
func (self PointLight2D) SetTextureOffset(texture_offset Vector2) {
	self.Runtime.PointLight2D_set_texture_offset(self, texture_offset)
}
func (self PointLight2D) GetTextureOffset() Vector2 {
	return self.Runtime.PointLight2D_get_texture_offset(self)
}
func (self PointLight2D) SetTextureScale(texture_scale Float) {
	self.Runtime.PointLight2D_set_texture_scale(self, texture_scale)
}
func (self PointLight2D) GetTextureScale() Float {
	return self.Runtime.PointLight2D_get_texture_scale(self)
}

type extendsPointMesh struct {
	_ [0]*extendsPointMesh
	class
}

func (self PointMesh) PrimitiveMesh() PrimitiveMesh {
	var parent PrimitiveMesh
	parent.class = self.class
	return parent
}

type extendsPolygon2D struct {
	_ [0]*extendsPolygon2D
	class
}

func (self Polygon2D) Node2D() Node2D { var parent Node2D; parent.class = self.class; return parent }
func (self Polygon2D) SetPolygon(polygon PackedVector2Array) {
	self.Runtime.Polygon2D_set_polygon(self, polygon)
}
func (self Polygon2D) GetPolygon() PackedVector2Array {
	return self.Runtime.Polygon2D_get_polygon(self)
}
func (self Polygon2D) SetUv(uv PackedVector2Array) {
	self.Runtime.Polygon2D_set_uv(self, uv)
}
func (self Polygon2D) GetUv() PackedVector2Array {
	return self.Runtime.Polygon2D_get_uv(self)
}
func (self Polygon2D) SetColor(color Color) {
	self.Runtime.Polygon2D_set_color(self, color)
}
func (self Polygon2D) GetColor() Color {
	return self.Runtime.Polygon2D_get_color(self)
}
func (self Polygon2D) SetPolygons(polygons Array) {
	self.Runtime.Polygon2D_set_polygons(self, polygons)
}
func (self Polygon2D) GetPolygons() Array {
	return self.Runtime.Polygon2D_get_polygons(self)
}
func (self Polygon2D) SetVertexColors(vertex_colors PackedColorArray) {
	self.Runtime.Polygon2D_set_vertex_colors(self, vertex_colors)
}
func (self Polygon2D) GetVertexColors() PackedColorArray {
	return self.Runtime.Polygon2D_get_vertex_colors(self)
}
func (self Polygon2D) SetTexture(texture Texture2D) {
	self.Runtime.Polygon2D_set_texture(self, texture)
}
func (self Polygon2D) GetTexture() Texture2D {
	return self.Runtime.Polygon2D_get_texture(self)
}
func (self Polygon2D) SetTextureOffset(texture_offset Vector2) {
	self.Runtime.Polygon2D_set_texture_offset(self, texture_offset)
}
func (self Polygon2D) GetTextureOffset() Vector2 {
	return self.Runtime.Polygon2D_get_texture_offset(self)
}
func (self Polygon2D) SetTextureRotation(texture_rotation Float) {
	self.Runtime.Polygon2D_set_texture_rotation(self, texture_rotation)
}
func (self Polygon2D) GetTextureRotation() Float {
	return self.Runtime.Polygon2D_get_texture_rotation(self)
}
func (self Polygon2D) SetTextureScale(texture_scale Vector2) {
	self.Runtime.Polygon2D_set_texture_scale(self, texture_scale)
}
func (self Polygon2D) GetTextureScale() Vector2 {
	return self.Runtime.Polygon2D_get_texture_scale(self)
}
func (self Polygon2D) SetInvertEnabled(invert bool) {
	self.Runtime.Polygon2D_set_invert_enabled(self, invert)
}
func (self Polygon2D) GetInvertEnabled() bool {
	return self.Runtime.Polygon2D_get_invert_enabled(self)
}
func (self Polygon2D) SetAntialiased(antialiased bool) {
	self.Runtime.Polygon2D_set_antialiased(self, antialiased)
}
func (self Polygon2D) GetAntialiased() bool {
	return self.Runtime.Polygon2D_get_antialiased(self)
}
func (self Polygon2D) SetInvertBorder(invert_border Float) {
	self.Runtime.Polygon2D_set_invert_border(self, invert_border)
}
func (self Polygon2D) GetInvertBorder() Float {
	return self.Runtime.Polygon2D_get_invert_border(self)
}
func (self Polygon2D) SetOffset(offset Vector2) {
	self.Runtime.Polygon2D_set_offset(self, offset)
}
func (self Polygon2D) GetOffset() Vector2 {
	return self.Runtime.Polygon2D_get_offset(self)
}
func (self Polygon2D) AddBone(path NodePath, weights PackedFloat32Array) {
	self.Runtime.Polygon2D_add_bone(self, path, weights)
}
func (self Polygon2D) GetBoneCount() int64 {
	return self.Runtime.Polygon2D_get_bone_count(self)
}
func (self Polygon2D) GetBonePath(index int64) NodePath {
	return self.Runtime.Polygon2D_get_bone_path(self, index)
}
func (self Polygon2D) GetBoneWeights(index int64) PackedFloat32Array {
	return self.Runtime.Polygon2D_get_bone_weights(self, index)
}
func (self Polygon2D) EraseBone(index int64) {
	self.Runtime.Polygon2D_erase_bone(self, index)
}
func (self Polygon2D) ClearBones() {
	self.Runtime.Polygon2D_clear_bones(self)
}
func (self Polygon2D) SetBonePath(index int64, path NodePath) {
	self.Runtime.Polygon2D_set_bone_path(self, index, path)
}
func (self Polygon2D) SetBoneWeights(index int64, weights PackedFloat32Array) {
	self.Runtime.Polygon2D_set_bone_weights(self, index, weights)
}
func (self Polygon2D) SetSkeleton(skeleton NodePath) {
	self.Runtime.Polygon2D_set_skeleton(self, skeleton)
}
func (self Polygon2D) GetSkeleton() NodePath {
	return self.Runtime.Polygon2D_get_skeleton(self)
}
func (self Polygon2D) SetInternalVertexCount(internal_vertex_count int64) {
	self.Runtime.Polygon2D_set_internal_vertex_count(self, internal_vertex_count)
}
func (self Polygon2D) GetInternalVertexCount() int64 {
	return self.Runtime.Polygon2D_get_internal_vertex_count(self)
}

type extendsPolygonOccluder3D struct {
	_ [0]*extendsPolygonOccluder3D
	class
}

func (self PolygonOccluder3D) Occluder3D() Occluder3D {
	var parent Occluder3D
	parent.class = self.class
	return parent
}
func (self PolygonOccluder3D) SetPolygon(polygon PackedVector2Array) {
	self.Runtime.PolygonOccluder3D_set_polygon(self, polygon)
}
func (self PolygonOccluder3D) GetPolygon() PackedVector2Array {
	return self.Runtime.PolygonOccluder3D_get_polygon(self)
}

type extendsPolygonPathFinder struct {
	_ [0]*extendsPolygonPathFinder
	class
}

func (self PolygonPathFinder) Resource() Resource {
	var parent Resource
	parent.class = self.class
	return parent
}
func (self PolygonPathFinder) Setup(points PackedVector2Array, connections PackedInt32Array) {
	self.Runtime.PolygonPathFinder_setup(self, points, connections)
}
func (self PolygonPathFinder) FindPath(from Vector2, to Vector2) PackedVector2Array {
	return self.Runtime.PolygonPathFinder_find_path(self, from, to)
}
func (self PolygonPathFinder) GetIntersections(from Vector2, to Vector2) PackedVector2Array {
	return self.Runtime.PolygonPathFinder_get_intersections(self, from, to)
}
func (self PolygonPathFinder) GetClosestPoint(point Vector2) Vector2 {
	return self.Runtime.PolygonPathFinder_get_closest_point(self, point)
}
func (self PolygonPathFinder) IsPointInside(point Vector2) bool {
	return self.Runtime.PolygonPathFinder_is_point_inside(self, point)
}
func (self PolygonPathFinder) SetPointPenalty(idx int64, penalty Float) {
	self.Runtime.PolygonPathFinder_set_point_penalty(self, idx, penalty)
}
func (self PolygonPathFinder) GetPointPenalty(idx int64) Float {
	return self.Runtime.PolygonPathFinder_get_point_penalty(self, idx)
}
func (self PolygonPathFinder) GetBounds() Rect2 {
	return self.Runtime.PolygonPathFinder_get_bounds(self)
}

type extendsPopup struct {
	_ [0]*extendsPopup
	class
}

func (self Popup) Window() Window { var parent Window; parent.class = self.class; return parent }

type extendsPopupMenu struct {
	_ [0]*extendsPopupMenu
	class
}

func (self PopupMenu) Popup() Popup { var parent Popup; parent.class = self.class; return parent }
func (self PopupMenu) ActivateItemByEvent(event InputEvent, for_global_only bool) bool {
	return self.Runtime.PopupMenu_activate_item_by_event(self, event, for_global_only)
}
func (self PopupMenu) AddItem(label string, id int64, accel Key) {
	self.Runtime.PopupMenu_add_item(self, label, id, accel)
}
func (self PopupMenu) AddIconItem(texture Texture2D, label string, id int64, accel Key) {
	self.Runtime.PopupMenu_add_icon_item(self, texture, label, id, accel)
}
func (self PopupMenu) AddCheckItem(label string, id int64, accel Key) {
	self.Runtime.PopupMenu_add_check_item(self, label, id, accel)
}
func (self PopupMenu) AddIconCheckItem(texture Texture2D, label string, id int64, accel Key) {
	self.Runtime.PopupMenu_add_icon_check_item(self, texture, label, id, accel)
}
func (self PopupMenu) AddRadioCheckItem(label string, id int64, accel Key) {
	self.Runtime.PopupMenu_add_radio_check_item(self, label, id, accel)
}
func (self PopupMenu) AddIconRadioCheckItem(texture Texture2D, label string, id int64, accel Key) {
	self.Runtime.PopupMenu_add_icon_radio_check_item(self, texture, label, id, accel)
}
func (self PopupMenu) AddMultistateItem(label string, max_states int64, default_state int64, id int64, accel Key) {
	self.Runtime.PopupMenu_add_multistate_item(self, label, max_states, default_state, id, accel)
}
func (self PopupMenu) AddShortcut(shortcut Shortcut, id int64, global bool, allow_echo bool) {
	self.Runtime.PopupMenu_add_shortcut(self, shortcut, id, global, allow_echo)
}
func (self PopupMenu) AddIconShortcut(texture Texture2D, shortcut Shortcut, id int64, global bool, allow_echo bool) {
	self.Runtime.PopupMenu_add_icon_shortcut(self, texture, shortcut, id, global, allow_echo)
}
func (self PopupMenu) AddCheckShortcut(shortcut Shortcut, id int64, global bool) {
	self.Runtime.PopupMenu_add_check_shortcut(self, shortcut, id, global)
}
func (self PopupMenu) AddIconCheckShortcut(texture Texture2D, shortcut Shortcut, id int64, global bool) {
	self.Runtime.PopupMenu_add_icon_check_shortcut(self, texture, shortcut, id, global)
}
func (self PopupMenu) AddRadioCheckShortcut(shortcut Shortcut, id int64, global bool) {
	self.Runtime.PopupMenu_add_radio_check_shortcut(self, shortcut, id, global)
}
func (self PopupMenu) AddIconRadioCheckShortcut(texture Texture2D, shortcut Shortcut, id int64, global bool) {
	self.Runtime.PopupMenu_add_icon_radio_check_shortcut(self, texture, shortcut, id, global)
}
func (self PopupMenu) AddSubmenuItem(label string, submenu string, id int64) {
	self.Runtime.PopupMenu_add_submenu_item(self, label, submenu, id)
}
func (self PopupMenu) SetItemText(index int64, text string) {
	self.Runtime.PopupMenu_set_item_text(self, index, text)
}
func (self PopupMenu) SetItemTextDirection(index int64, direction ControlTextDirection) {
	self.Runtime.PopupMenu_set_item_text_direction(self, index, direction)
}
func (self PopupMenu) SetItemLanguage(index int64, language string) {
	self.Runtime.PopupMenu_set_item_language(self, index, language)
}
func (self PopupMenu) SetItemIcon(index int64, icon Texture2D) {
	self.Runtime.PopupMenu_set_item_icon(self, index, icon)
}
func (self PopupMenu) SetItemIconMaxWidth(index int64, width int64) {
	self.Runtime.PopupMenu_set_item_icon_max_width(self, index, width)
}
func (self PopupMenu) SetItemIconModulate(index int64, modulate Color) {
	self.Runtime.PopupMenu_set_item_icon_modulate(self, index, modulate)
}
func (self PopupMenu) SetItemChecked(index int64, checked bool) {
	self.Runtime.PopupMenu_set_item_checked(self, index, checked)
}
func (self PopupMenu) SetItemId(index int64, id int64) {
	self.Runtime.PopupMenu_set_item_id(self, index, id)
}
func (self PopupMenu) SetItemAccelerator(index int64, accel Key) {
	self.Runtime.PopupMenu_set_item_accelerator(self, index, accel)
}
func (self PopupMenu) SetItemMetadata(index int64, metadata any) {
	self.Runtime.PopupMenu_set_item_metadata(self, index, metadata)
}
func (self PopupMenu) SetItemDisabled(index int64, disabled bool) {
	self.Runtime.PopupMenu_set_item_disabled(self, index, disabled)
}
func (self PopupMenu) SetItemSubmenu(index int64, submenu string) {
	self.Runtime.PopupMenu_set_item_submenu(self, index, submenu)
}
func (self PopupMenu) SetItemAsSeparator(index int64, enable bool) {
	self.Runtime.PopupMenu_set_item_as_separator(self, index, enable)
}
func (self PopupMenu) SetItemAsCheckable(index int64, enable bool) {
	self.Runtime.PopupMenu_set_item_as_checkable(self, index, enable)
}
func (self PopupMenu) SetItemAsRadioCheckable(index int64, enable bool) {
	self.Runtime.PopupMenu_set_item_as_radio_checkable(self, index, enable)
}
func (self PopupMenu) SetItemTooltip(index int64, tooltip string) {
	self.Runtime.PopupMenu_set_item_tooltip(self, index, tooltip)
}
func (self PopupMenu) SetItemShortcut(index int64, shortcut Shortcut, global bool) {
	self.Runtime.PopupMenu_set_item_shortcut(self, index, shortcut, global)
}
func (self PopupMenu) SetItemIndent(index int64, indent int64) {
	self.Runtime.PopupMenu_set_item_indent(self, index, indent)
}
func (self PopupMenu) SetItemMultistate(index int64, state int64) {
	self.Runtime.PopupMenu_set_item_multistate(self, index, state)
}
func (self PopupMenu) SetItemShortcutDisabled(index int64, disabled bool) {
	self.Runtime.PopupMenu_set_item_shortcut_disabled(self, index, disabled)
}
func (self PopupMenu) ToggleItemChecked(index int64) {
	self.Runtime.PopupMenu_toggle_item_checked(self, index)
}
func (self PopupMenu) ToggleItemMultistate(index int64) {
	self.Runtime.PopupMenu_toggle_item_multistate(self, index)
}
func (self PopupMenu) GetItemText(index int64) string {
	return self.Runtime.PopupMenu_get_item_text(self, index)
}
func (self PopupMenu) GetItemTextDirection(index int64) ControlTextDirection {
	return self.Runtime.PopupMenu_get_item_text_direction(self, index)
}
func (self PopupMenu) GetItemLanguage(index int64) string {
	return self.Runtime.PopupMenu_get_item_language(self, index)
}
func (self PopupMenu) GetItemIcon(index int64) Texture2D {
	return self.Runtime.PopupMenu_get_item_icon(self, index)
}
func (self PopupMenu) GetItemIconMaxWidth(index int64) int64 {
	return self.Runtime.PopupMenu_get_item_icon_max_width(self, index)
}
func (self PopupMenu) GetItemIconModulate(index int64) Color {
	return self.Runtime.PopupMenu_get_item_icon_modulate(self, index)
}
func (self PopupMenu) IsItemChecked(index int64) bool {
	return self.Runtime.PopupMenu_is_item_checked(self, index)
}
func (self PopupMenu) GetItemId(index int64) int64 {
	return self.Runtime.PopupMenu_get_item_id(self, index)
}
func (self PopupMenu) GetItemIndex(id int64) int64 {
	return self.Runtime.PopupMenu_get_item_index(self, id)
}
func (self PopupMenu) GetItemAccelerator(index int64) Key {
	return self.Runtime.PopupMenu_get_item_accelerator(self, index)
}
func (self PopupMenu) GetItemMetadata(index int64) any {
	return self.Runtime.PopupMenu_get_item_metadata(self, index)
}
func (self PopupMenu) IsItemDisabled(index int64) bool {
	return self.Runtime.PopupMenu_is_item_disabled(self, index)
}
func (self PopupMenu) GetItemSubmenu(index int64) string {
	return self.Runtime.PopupMenu_get_item_submenu(self, index)
}
func (self PopupMenu) IsItemSeparator(index int64) bool {
	return self.Runtime.PopupMenu_is_item_separator(self, index)
}
func (self PopupMenu) IsItemCheckable(index int64) bool {
	return self.Runtime.PopupMenu_is_item_checkable(self, index)
}
func (self PopupMenu) IsItemRadioCheckable(index int64) bool {
	return self.Runtime.PopupMenu_is_item_radio_checkable(self, index)
}
func (self PopupMenu) IsItemShortcutDisabled(index int64) bool {
	return self.Runtime.PopupMenu_is_item_shortcut_disabled(self, index)
}
func (self PopupMenu) GetItemTooltip(index int64) string {
	return self.Runtime.PopupMenu_get_item_tooltip(self, index)
}
func (self PopupMenu) GetItemShortcut(index int64) Shortcut {
	return self.Runtime.PopupMenu_get_item_shortcut(self, index)
}
func (self PopupMenu) GetItemIndent(index int64) int64 {
	return self.Runtime.PopupMenu_get_item_indent(self, index)
}
func (self PopupMenu) SetFocusedItem(index int64) {
	self.Runtime.PopupMenu_set_focused_item(self, index)
}
func (self PopupMenu) GetFocusedItem() int64 {
	return self.Runtime.PopupMenu_get_focused_item(self)
}
func (self PopupMenu) SetItemCount(count int64) {
	self.Runtime.PopupMenu_set_item_count(self, count)
}
func (self PopupMenu) GetItemCount() int64 {
	return self.Runtime.PopupMenu_get_item_count(self)
}
func (self PopupMenu) ScrollToItem(index int64) {
	self.Runtime.PopupMenu_scroll_to_item(self, index)
}
func (self PopupMenu) RemoveItem(index int64) {
	self.Runtime.PopupMenu_remove_item(self, index)
}
func (self PopupMenu) AddSeparator(label string, id int64) {
	self.Runtime.PopupMenu_add_separator(self, label, id)
}
func (self PopupMenu) Clear(free_submenus bool) {
	self.Runtime.PopupMenu_clear(self, free_submenus)
}
func (self PopupMenu) SetHideOnItemSelection(enable bool) {
	self.Runtime.PopupMenu_set_hide_on_item_selection(self, enable)
}
func (self PopupMenu) IsHideOnItemSelection() bool {
	return self.Runtime.PopupMenu_is_hide_on_item_selection(self)
}
func (self PopupMenu) SetHideOnCheckableItemSelection(enable bool) {
	self.Runtime.PopupMenu_set_hide_on_checkable_item_selection(self, enable)
}
func (self PopupMenu) IsHideOnCheckableItemSelection() bool {
	return self.Runtime.PopupMenu_is_hide_on_checkable_item_selection(self)
}
func (self PopupMenu) SetHideOnStateItemSelection(enable bool) {
	self.Runtime.PopupMenu_set_hide_on_state_item_selection(self, enable)
}
func (self PopupMenu) IsHideOnStateItemSelection() bool {
	return self.Runtime.PopupMenu_is_hide_on_state_item_selection(self)
}
func (self PopupMenu) SetSubmenuPopupDelay(seconds Float) {
	self.Runtime.PopupMenu_set_submenu_popup_delay(self, seconds)
}
func (self PopupMenu) GetSubmenuPopupDelay() Float {
	return self.Runtime.PopupMenu_get_submenu_popup_delay(self)
}
func (self PopupMenu) SetAllowSearch(allow bool) {
	self.Runtime.PopupMenu_set_allow_search(self, allow)
}
func (self PopupMenu) GetAllowSearch() bool {
	return self.Runtime.PopupMenu_get_allow_search(self)
}
func (self PopupMenu) IsSystemMenu() bool {
	return self.Runtime.PopupMenu_is_system_menu(self)
}
func (self PopupMenu) SetSystemMenuRoot(special string) {
	self.Runtime.PopupMenu_set_system_menu_root(self, special)
}
func (self PopupMenu) GetSystemMenuRoot() string {
	return self.Runtime.PopupMenu_get_system_menu_root(self)
}

type extendsPopupPanel struct {
	_ [0]*extendsPopupPanel
	class
}

func (self PopupPanel) Popup() Popup { var parent Popup; parent.class = self.class; return parent }

type extendsPortableCompressedTexture2D struct {
	_ [0]*extendsPortableCompressedTexture2D
	class
}

func (self PortableCompressedTexture2D) Texture2D() Texture2D {
	var parent Texture2D
	parent.class = self.class
	return parent
}
func (self PortableCompressedTexture2D) CreateFromImage(image Image, compression_mode PortableCompressedTexture2DCompressionMode, normal_map bool, lossy_quality Float) {
	self.Runtime.PortableCompressedTexture2D_create_from_image(self, image, compression_mode, normal_map, lossy_quality)
}
func (self PortableCompressedTexture2D) GetFormat() ImageFormat {
	return self.Runtime.PortableCompressedTexture2D_get_format(self)
}
func (self PortableCompressedTexture2D) GetCompressionMode() PortableCompressedTexture2DCompressionMode {
	return self.Runtime.PortableCompressedTexture2D_get_compression_mode(self)
}
func (self PortableCompressedTexture2D) SetSizeOverride(size Vector2) {
	self.Runtime.PortableCompressedTexture2D_set_size_override(self, size)
}
func (self PortableCompressedTexture2D) GetSizeOverride() Vector2 {
	return self.Runtime.PortableCompressedTexture2D_get_size_override(self)
}
func (self PortableCompressedTexture2D) SetKeepCompressedBuffer(keep bool) {
	self.Runtime.PortableCompressedTexture2D_set_keep_compressed_buffer(self, keep)
}
func (self PortableCompressedTexture2D) IsKeepingCompressedBuffer() bool {
	return self.Runtime.PortableCompressedTexture2D_is_keeping_compressed_buffer(self)
}
func (self PortableCompressedTexture2D) SetKeepAllCompressedBuffers(keep bool) {
	self.Runtime.PortableCompressedTexture2D_set_keep_all_compressed_buffers(self, keep)
}
func (self PortableCompressedTexture2D) IsKeepingAllCompressedBuffers() bool {
	return self.Runtime.PortableCompressedTexture2D_is_keeping_all_compressed_buffers(self)
}

type extendsPrimitiveMesh struct {
	_ [0]*extendsPrimitiveMesh
	class
}

func (self PrimitiveMesh) Mesh() Mesh { var parent Mesh; parent.class = self.class; return parent }
func (self PrimitiveMesh) SetMaterial(material Material) {
	self.Runtime.PrimitiveMesh_set_material(self, material)
}
func (self PrimitiveMesh) GetMaterial() Material {
	return self.Runtime.PrimitiveMesh_get_material(self)
}
func (self PrimitiveMesh) GetMeshArrays() Array {
	return self.Runtime.PrimitiveMesh_get_mesh_arrays(self)
}
func (self PrimitiveMesh) SetCustomAabb(aabb AABB) {
	self.Runtime.PrimitiveMesh_set_custom_aabb(self, aabb)
}
func (self PrimitiveMesh) GetCustomAabb() AABB {
	return self.Runtime.PrimitiveMesh_get_custom_aabb(self)
}
func (self PrimitiveMesh) SetFlipFaces(flip_faces bool) {
	self.Runtime.PrimitiveMesh_set_flip_faces(self, flip_faces)
}
func (self PrimitiveMesh) GetFlipFaces() bool {
	return self.Runtime.PrimitiveMesh_get_flip_faces(self)
}
func (self PrimitiveMesh) SetAddUv2(add_uv2 bool) {
	self.Runtime.PrimitiveMesh_set_add_uv2(self, add_uv2)
}
func (self PrimitiveMesh) GetAddUv2() bool {
	return self.Runtime.PrimitiveMesh_get_add_uv2(self)
}
func (self PrimitiveMesh) SetUv2Padding(uv2_padding Float) {
	self.Runtime.PrimitiveMesh_set_uv2_padding(self, uv2_padding)
}
func (self PrimitiveMesh) GetUv2Padding() Float {
	return self.Runtime.PrimitiveMesh_get_uv2_padding(self)
}

type extendsPrismMesh struct {
	_ [0]*extendsPrismMesh
	class
}

func (self PrismMesh) PrimitiveMesh() PrimitiveMesh {
	var parent PrimitiveMesh
	parent.class = self.class
	return parent
}
func (self PrismMesh) SetLeftToRight(left_to_right Float) {
	self.Runtime.PrismMesh_set_left_to_right(self, left_to_right)
}
func (self PrismMesh) GetLeftToRight() Float {
	return self.Runtime.PrismMesh_get_left_to_right(self)
}
func (self PrismMesh) SetSize(size Vector3) {
	self.Runtime.PrismMesh_set_size(self, size)
}
func (self PrismMesh) GetSize() Vector3 {
	return self.Runtime.PrismMesh_get_size(self)
}
func (self PrismMesh) SetSubdivideWidth(segments int64) {
	self.Runtime.PrismMesh_set_subdivide_width(self, segments)
}
func (self PrismMesh) GetSubdivideWidth() int64 {
	return self.Runtime.PrismMesh_get_subdivide_width(self)
}
func (self PrismMesh) SetSubdivideHeight(segments int64) {
	self.Runtime.PrismMesh_set_subdivide_height(self, segments)
}
func (self PrismMesh) GetSubdivideHeight() int64 {
	return self.Runtime.PrismMesh_get_subdivide_height(self)
}
func (self PrismMesh) SetSubdivideDepth(segments int64) {
	self.Runtime.PrismMesh_set_subdivide_depth(self, segments)
}
func (self PrismMesh) GetSubdivideDepth() int64 {
	return self.Runtime.PrismMesh_get_subdivide_depth(self)
}

type extendsProceduralSkyMaterial struct {
	_ [0]*extendsProceduralSkyMaterial
	class
}

func (self ProceduralSkyMaterial) Material() Material {
	var parent Material
	parent.class = self.class
	return parent
}
func (self ProceduralSkyMaterial) SetSkyTopColor(color Color) {
	self.Runtime.ProceduralSkyMaterial_set_sky_top_color(self, color)
}
func (self ProceduralSkyMaterial) GetSkyTopColor() Color {
	return self.Runtime.ProceduralSkyMaterial_get_sky_top_color(self)
}
func (self ProceduralSkyMaterial) SetSkyHorizonColor(color Color) {
	self.Runtime.ProceduralSkyMaterial_set_sky_horizon_color(self, color)
}
func (self ProceduralSkyMaterial) GetSkyHorizonColor() Color {
	return self.Runtime.ProceduralSkyMaterial_get_sky_horizon_color(self)
}
func (self ProceduralSkyMaterial) SetSkyCurve(curve Float) {
	self.Runtime.ProceduralSkyMaterial_set_sky_curve(self, curve)
}
func (self ProceduralSkyMaterial) GetSkyCurve() Float {
	return self.Runtime.ProceduralSkyMaterial_get_sky_curve(self)
}
func (self ProceduralSkyMaterial) SetSkyEnergyMultiplier(multiplier Float) {
	self.Runtime.ProceduralSkyMaterial_set_sky_energy_multiplier(self, multiplier)
}
func (self ProceduralSkyMaterial) GetSkyEnergyMultiplier() Float {
	return self.Runtime.ProceduralSkyMaterial_get_sky_energy_multiplier(self)
}
func (self ProceduralSkyMaterial) SetSkyCover(sky_cover Texture2D) {
	self.Runtime.ProceduralSkyMaterial_set_sky_cover(self, sky_cover)
}
func (self ProceduralSkyMaterial) GetSkyCover() Texture2D {
	return self.Runtime.ProceduralSkyMaterial_get_sky_cover(self)
}
func (self ProceduralSkyMaterial) SetSkyCoverModulate(color Color) {
	self.Runtime.ProceduralSkyMaterial_set_sky_cover_modulate(self, color)
}
func (self ProceduralSkyMaterial) GetSkyCoverModulate() Color {
	return self.Runtime.ProceduralSkyMaterial_get_sky_cover_modulate(self)
}
func (self ProceduralSkyMaterial) SetGroundBottomColor(color Color) {
	self.Runtime.ProceduralSkyMaterial_set_ground_bottom_color(self, color)
}
func (self ProceduralSkyMaterial) GetGroundBottomColor() Color {
	return self.Runtime.ProceduralSkyMaterial_get_ground_bottom_color(self)
}
func (self ProceduralSkyMaterial) SetGroundHorizonColor(color Color) {
	self.Runtime.ProceduralSkyMaterial_set_ground_horizon_color(self, color)
}
func (self ProceduralSkyMaterial) GetGroundHorizonColor() Color {
	return self.Runtime.ProceduralSkyMaterial_get_ground_horizon_color(self)
}
func (self ProceduralSkyMaterial) SetGroundCurve(curve Float) {
	self.Runtime.ProceduralSkyMaterial_set_ground_curve(self, curve)
}
func (self ProceduralSkyMaterial) GetGroundCurve() Float {
	return self.Runtime.ProceduralSkyMaterial_get_ground_curve(self)
}
func (self ProceduralSkyMaterial) SetGroundEnergyMultiplier(energy Float) {
	self.Runtime.ProceduralSkyMaterial_set_ground_energy_multiplier(self, energy)
}
func (self ProceduralSkyMaterial) GetGroundEnergyMultiplier() Float {
	return self.Runtime.ProceduralSkyMaterial_get_ground_energy_multiplier(self)
}
func (self ProceduralSkyMaterial) SetSunAngleMax(degrees Float) {
	self.Runtime.ProceduralSkyMaterial_set_sun_angle_max(self, degrees)
}
func (self ProceduralSkyMaterial) GetSunAngleMax() Float {
	return self.Runtime.ProceduralSkyMaterial_get_sun_angle_max(self)
}
func (self ProceduralSkyMaterial) SetSunCurve(curve Float) {
	self.Runtime.ProceduralSkyMaterial_set_sun_curve(self, curve)
}
func (self ProceduralSkyMaterial) GetSunCurve() Float {
	return self.Runtime.ProceduralSkyMaterial_get_sun_curve(self)
}
func (self ProceduralSkyMaterial) SetUseDebanding(use_debanding bool) {
	self.Runtime.ProceduralSkyMaterial_set_use_debanding(self, use_debanding)
}
func (self ProceduralSkyMaterial) GetUseDebanding() bool {
	return self.Runtime.ProceduralSkyMaterial_get_use_debanding(self)
}
func (self ProceduralSkyMaterial) SetEnergyMultiplier(multiplier Float) {
	self.Runtime.ProceduralSkyMaterial_set_energy_multiplier(self, multiplier)
}
func (self ProceduralSkyMaterial) GetEnergyMultiplier() Float {
	return self.Runtime.ProceduralSkyMaterial_get_energy_multiplier(self)
}

type extendsProgressBar struct {
	_ [0]*extendsProgressBar
	class
}

func (self ProgressBar) Range() Range { var parent Range; parent.class = self.class; return parent }
func (self ProgressBar) SetFillMode(mode int64) {
	self.Runtime.ProgressBar_set_fill_mode(self, mode)
}
func (self ProgressBar) GetFillMode() int64 {
	return self.Runtime.ProgressBar_get_fill_mode(self)
}
func (self ProgressBar) SetShowPercentage(visible bool) {
	self.Runtime.ProgressBar_set_show_percentage(self, visible)
}
func (self ProgressBar) IsPercentageShown() bool {
	return self.Runtime.ProgressBar_is_percentage_shown(self)
}

type extendsProjectSettings struct {
	_ [0]*extendsProjectSettings
	class
}

func (self ProjectSettings) Object() Object {
	var parent Object
	parent.class = self.class
	return parent
}
func (self ProjectSettings) HasSetting(name string) bool {
	return self.Runtime.ProjectSettings_has_setting(self, name)
}
func (self ProjectSettings) SetSetting(name string, value any) {
	self.Runtime.ProjectSettings_set_setting(self, name, value)
}
func (self ProjectSettings) GetSetting(name string, default_value any) any {
	return self.Runtime.ProjectSettings_get_setting(self, name, default_value)
}
func (self ProjectSettings) GetSettingWithOverride(name string) any {
	return self.Runtime.ProjectSettings_get_setting_with_override(self, name)
}
func (self ProjectSettings) GetGlobalClassList() ArrayOf[Dictionary] {
	return self.Runtime.ProjectSettings_get_global_class_list(self)
}
func (self ProjectSettings) SetOrder(name string, position int64) {
	self.Runtime.ProjectSettings_set_order(self, name, position)
}
func (self ProjectSettings) GetOrder(name string) int64 {
	return self.Runtime.ProjectSettings_get_order(self, name)
}
func (self ProjectSettings) SetInitialValue(name string, value any) {
	self.Runtime.ProjectSettings_set_initial_value(self, name, value)
}
func (self ProjectSettings) SetAsBasic(name string, basic bool) {
	self.Runtime.ProjectSettings_set_as_basic(self, name, basic)
}
func (self ProjectSettings) SetAsInternal(name string, internal bool) {
	self.Runtime.ProjectSettings_set_as_internal(self, name, internal)
}
func (self ProjectSettings) AddPropertyInfo(hint Dictionary) {
	self.Runtime.ProjectSettings_add_property_info(self, hint)
}
func (self ProjectSettings) SetRestartIfChanged(name string, restart bool) {
	self.Runtime.ProjectSettings_set_restart_if_changed(self, name, restart)
}
func (self ProjectSettings) Clear(name string) {
	self.Runtime.ProjectSettings_clear(self, name)
}
func (self ProjectSettings) LocalizePath(path string) string {
	return self.Runtime.ProjectSettings_localize_path(self, path)
}
func (self ProjectSettings) GlobalizePath(path string) string {
	return self.Runtime.ProjectSettings_globalize_path(self, path)
}
func (self ProjectSettings) Save() int64 {
	return self.Runtime.ProjectSettings_save(self)
}
func (self ProjectSettings) LoadResourcePack(pack string, replace_files bool, offset int64) bool {
	return self.Runtime.ProjectSettings_load_resource_pack(self, pack, replace_files, offset)
}
func (self ProjectSettings) SaveCustom(file string) int64 {
	return self.Runtime.ProjectSettings_save_custom(self, file)
}

type extendsPropertyTweener struct {
	_ [0]*extendsPropertyTweener
	class
}

func (self PropertyTweener) Tweener() Tweener {
	var parent Tweener
	parent.class = self.class
	return parent
}
func (self PropertyTweener) From(value any) PropertyTweener {
	return self.Runtime.PropertyTweener_from(self, value)
}
func (self PropertyTweener) FromCurrent() PropertyTweener {
	return self.Runtime.PropertyTweener_from_current(self)
}
func (self PropertyTweener) AsRelative() PropertyTweener {
	return self.Runtime.PropertyTweener_as_relative(self)
}
func (self PropertyTweener) SetTrans(trans TweenTransitionType) PropertyTweener {
	return self.Runtime.PropertyTweener_set_trans(self, trans)
}
func (self PropertyTweener) SetEase(ease TweenEaseType) PropertyTweener {
	return self.Runtime.PropertyTweener_set_ease(self, ease)
}
func (self PropertyTweener) SetDelay(delay Float) PropertyTweener {
	return self.Runtime.PropertyTweener_set_delay(self, delay)
}

type extendsQuadMesh struct {
	_ [0]*extendsQuadMesh
	class
}

func (self QuadMesh) PlaneMesh() PlaneMesh {
	var parent PlaneMesh
	parent.class = self.class
	return parent
}

type extendsQuadOccluder3D struct {
	_ [0]*extendsQuadOccluder3D
	class
}

func (self QuadOccluder3D) Occluder3D() Occluder3D {
	var parent Occluder3D
	parent.class = self.class
	return parent
}
func (self QuadOccluder3D) SetSize(size Vector2) {
	self.Runtime.QuadOccluder3D_set_size(self, size)
}
func (self QuadOccluder3D) GetSize() Vector2 {
	return self.Runtime.QuadOccluder3D_get_size(self)
}

type extendsRDAttachmentFormat struct {
	_ [0]*extendsRDAttachmentFormat
	class
}

func (self RDAttachmentFormat) RefCounted() RefCounted {
	var parent RefCounted
	parent.class = self.class
	return parent
}
func (self RDAttachmentFormat) SetFormat(p_member RenderingDeviceDataFormat) {
	self.Runtime.RDAttachmentFormat_set_format(self, p_member)
}
func (self RDAttachmentFormat) GetFormat() RenderingDeviceDataFormat {
	return self.Runtime.RDAttachmentFormat_get_format(self)
}
func (self RDAttachmentFormat) SetSamples(p_member RenderingDeviceTextureSamples) {
	self.Runtime.RDAttachmentFormat_set_samples(self, p_member)
}
func (self RDAttachmentFormat) GetSamples() RenderingDeviceTextureSamples {
	return self.Runtime.RDAttachmentFormat_get_samples(self)
}
func (self RDAttachmentFormat) SetUsageFlags(p_member int64) {
	self.Runtime.RDAttachmentFormat_set_usage_flags(self, p_member)
}
func (self RDAttachmentFormat) GetUsageFlags() int64 {
	return self.Runtime.RDAttachmentFormat_get_usage_flags(self)
}

type extendsRDFramebufferPass struct {
	_ [0]*extendsRDFramebufferPass
	class
}

func (self RDFramebufferPass) RefCounted() RefCounted {
	var parent RefCounted
	parent.class = self.class
	return parent
}
func (self RDFramebufferPass) SetColorAttachments(p_member PackedInt32Array) {
	self.Runtime.RDFramebufferPass_set_color_attachments(self, p_member)
}
func (self RDFramebufferPass) GetColorAttachments() PackedInt32Array {
	return self.Runtime.RDFramebufferPass_get_color_attachments(self)
}
func (self RDFramebufferPass) SetInputAttachments(p_member PackedInt32Array) {
	self.Runtime.RDFramebufferPass_set_input_attachments(self, p_member)
}
func (self RDFramebufferPass) GetInputAttachments() PackedInt32Array {
	return self.Runtime.RDFramebufferPass_get_input_attachments(self)
}
func (self RDFramebufferPass) SetResolveAttachments(p_member PackedInt32Array) {
	self.Runtime.RDFramebufferPass_set_resolve_attachments(self, p_member)
}
func (self RDFramebufferPass) GetResolveAttachments() PackedInt32Array {
	return self.Runtime.RDFramebufferPass_get_resolve_attachments(self)
}
func (self RDFramebufferPass) SetPreserveAttachments(p_member PackedInt32Array) {
	self.Runtime.RDFramebufferPass_set_preserve_attachments(self, p_member)
}
func (self RDFramebufferPass) GetPreserveAttachments() PackedInt32Array {
	return self.Runtime.RDFramebufferPass_get_preserve_attachments(self)
}
func (self RDFramebufferPass) SetDepthAttachment(p_member int64) {
	self.Runtime.RDFramebufferPass_set_depth_attachment(self, p_member)
}
func (self RDFramebufferPass) GetDepthAttachment() int64 {
	return self.Runtime.RDFramebufferPass_get_depth_attachment(self)
}

type extendsRDPipelineColorBlendState struct {
	_ [0]*extendsRDPipelineColorBlendState
	class
}

func (self RDPipelineColorBlendState) RefCounted() RefCounted {
	var parent RefCounted
	parent.class = self.class
	return parent
}
func (self RDPipelineColorBlendState) SetEnableLogicOp(p_member bool) {
	self.Runtime.RDPipelineColorBlendState_set_enable_logic_op(self, p_member)
}
func (self RDPipelineColorBlendState) GetEnableLogicOp() bool {
	return self.Runtime.RDPipelineColorBlendState_get_enable_logic_op(self)
}
func (self RDPipelineColorBlendState) SetLogicOp(p_member RenderingDeviceLogicOperation) {
	self.Runtime.RDPipelineColorBlendState_set_logic_op(self, p_member)
}
func (self RDPipelineColorBlendState) GetLogicOp() RenderingDeviceLogicOperation {
	return self.Runtime.RDPipelineColorBlendState_get_logic_op(self)
}
func (self RDPipelineColorBlendState) SetBlendConstant(p_member Color) {
	self.Runtime.RDPipelineColorBlendState_set_blend_constant(self, p_member)
}
func (self RDPipelineColorBlendState) GetBlendConstant() Color {
	return self.Runtime.RDPipelineColorBlendState_get_blend_constant(self)
}
func (self RDPipelineColorBlendState) SetAttachments(attachments ArrayOf[RDPipelineColorBlendStateAttachment]) {
	self.Runtime.RDPipelineColorBlendState_set_attachments(self, attachments)
}
func (self RDPipelineColorBlendState) GetAttachments() ArrayOf[RDPipelineColorBlendStateAttachment] {
	return self.Runtime.RDPipelineColorBlendState_get_attachments(self)
}

type extendsRDPipelineColorBlendStateAttachment struct {
	_ [0]*extendsRDPipelineColorBlendStateAttachment
	class
}

func (self RDPipelineColorBlendStateAttachment) RefCounted() RefCounted {
	var parent RefCounted
	parent.class = self.class
	return parent
}
func (self RDPipelineColorBlendStateAttachment) SetAsMix() {
	self.Runtime.RDPipelineColorBlendStateAttachment_set_as_mix(self)
}
func (self RDPipelineColorBlendStateAttachment) SetEnableBlend(p_member bool) {
	self.Runtime.RDPipelineColorBlendStateAttachment_set_enable_blend(self, p_member)
}
func (self RDPipelineColorBlendStateAttachment) GetEnableBlend() bool {
	return self.Runtime.RDPipelineColorBlendStateAttachment_get_enable_blend(self)
}
func (self RDPipelineColorBlendStateAttachment) SetSrcColorBlendFactor(p_member RenderingDeviceBlendFactor) {
	self.Runtime.RDPipelineColorBlendStateAttachment_set_src_color_blend_factor(self, p_member)
}
func (self RDPipelineColorBlendStateAttachment) GetSrcColorBlendFactor() RenderingDeviceBlendFactor {
	return self.Runtime.RDPipelineColorBlendStateAttachment_get_src_color_blend_factor(self)
}
func (self RDPipelineColorBlendStateAttachment) SetDstColorBlendFactor(p_member RenderingDeviceBlendFactor) {
	self.Runtime.RDPipelineColorBlendStateAttachment_set_dst_color_blend_factor(self, p_member)
}
func (self RDPipelineColorBlendStateAttachment) GetDstColorBlendFactor() RenderingDeviceBlendFactor {
	return self.Runtime.RDPipelineColorBlendStateAttachment_get_dst_color_blend_factor(self)
}
func (self RDPipelineColorBlendStateAttachment) SetColorBlendOp(p_member RenderingDeviceBlendOperation) {
	self.Runtime.RDPipelineColorBlendStateAttachment_set_color_blend_op(self, p_member)
}
func (self RDPipelineColorBlendStateAttachment) GetColorBlendOp() RenderingDeviceBlendOperation {
	return self.Runtime.RDPipelineColorBlendStateAttachment_get_color_blend_op(self)
}
func (self RDPipelineColorBlendStateAttachment) SetSrcAlphaBlendFactor(p_member RenderingDeviceBlendFactor) {
	self.Runtime.RDPipelineColorBlendStateAttachment_set_src_alpha_blend_factor(self, p_member)
}
func (self RDPipelineColorBlendStateAttachment) GetSrcAlphaBlendFactor() RenderingDeviceBlendFactor {
	return self.Runtime.RDPipelineColorBlendStateAttachment_get_src_alpha_blend_factor(self)
}
func (self RDPipelineColorBlendStateAttachment) SetDstAlphaBlendFactor(p_member RenderingDeviceBlendFactor) {
	self.Runtime.RDPipelineColorBlendStateAttachment_set_dst_alpha_blend_factor(self, p_member)
}
func (self RDPipelineColorBlendStateAttachment) GetDstAlphaBlendFactor() RenderingDeviceBlendFactor {
	return self.Runtime.RDPipelineColorBlendStateAttachment_get_dst_alpha_blend_factor(self)
}
func (self RDPipelineColorBlendStateAttachment) SetAlphaBlendOp(p_member RenderingDeviceBlendOperation) {
	self.Runtime.RDPipelineColorBlendStateAttachment_set_alpha_blend_op(self, p_member)
}
func (self RDPipelineColorBlendStateAttachment) GetAlphaBlendOp() RenderingDeviceBlendOperation {
	return self.Runtime.RDPipelineColorBlendStateAttachment_get_alpha_blend_op(self)
}
func (self RDPipelineColorBlendStateAttachment) SetWriteR(p_member bool) {
	self.Runtime.RDPipelineColorBlendStateAttachment_set_write_r(self, p_member)
}
func (self RDPipelineColorBlendStateAttachment) GetWriteR() bool {
	return self.Runtime.RDPipelineColorBlendStateAttachment_get_write_r(self)
}
func (self RDPipelineColorBlendStateAttachment) SetWriteG(p_member bool) {
	self.Runtime.RDPipelineColorBlendStateAttachment_set_write_g(self, p_member)
}
func (self RDPipelineColorBlendStateAttachment) GetWriteG() bool {
	return self.Runtime.RDPipelineColorBlendStateAttachment_get_write_g(self)
}
func (self RDPipelineColorBlendStateAttachment) SetWriteB(p_member bool) {
	self.Runtime.RDPipelineColorBlendStateAttachment_set_write_b(self, p_member)
}
func (self RDPipelineColorBlendStateAttachment) GetWriteB() bool {
	return self.Runtime.RDPipelineColorBlendStateAttachment_get_write_b(self)
}
func (self RDPipelineColorBlendStateAttachment) SetWriteA(p_member bool) {
	self.Runtime.RDPipelineColorBlendStateAttachment_set_write_a(self, p_member)
}
func (self RDPipelineColorBlendStateAttachment) GetWriteA() bool {
	return self.Runtime.RDPipelineColorBlendStateAttachment_get_write_a(self)
}

type extendsRDPipelineDepthStencilState struct {
	_ [0]*extendsRDPipelineDepthStencilState
	class
}

func (self RDPipelineDepthStencilState) RefCounted() RefCounted {
	var parent RefCounted
	parent.class = self.class
	return parent
}
func (self RDPipelineDepthStencilState) SetEnableDepthTest(p_member bool) {
	self.Runtime.RDPipelineDepthStencilState_set_enable_depth_test(self, p_member)
}
func (self RDPipelineDepthStencilState) GetEnableDepthTest() bool {
	return self.Runtime.RDPipelineDepthStencilState_get_enable_depth_test(self)
}
func (self RDPipelineDepthStencilState) SetEnableDepthWrite(p_member bool) {
	self.Runtime.RDPipelineDepthStencilState_set_enable_depth_write(self, p_member)
}
func (self RDPipelineDepthStencilState) GetEnableDepthWrite() bool {
	return self.Runtime.RDPipelineDepthStencilState_get_enable_depth_write(self)
}
func (self RDPipelineDepthStencilState) SetDepthCompareOperator(p_member RenderingDeviceCompareOperator) {
	self.Runtime.RDPipelineDepthStencilState_set_depth_compare_operator(self, p_member)
}
func (self RDPipelineDepthStencilState) GetDepthCompareOperator() RenderingDeviceCompareOperator {
	return self.Runtime.RDPipelineDepthStencilState_get_depth_compare_operator(self)
}
func (self RDPipelineDepthStencilState) SetEnableDepthRange(p_member bool) {
	self.Runtime.RDPipelineDepthStencilState_set_enable_depth_range(self, p_member)
}
func (self RDPipelineDepthStencilState) GetEnableDepthRange() bool {
	return self.Runtime.RDPipelineDepthStencilState_get_enable_depth_range(self)
}
func (self RDPipelineDepthStencilState) SetDepthRangeMin(p_member Float) {
	self.Runtime.RDPipelineDepthStencilState_set_depth_range_min(self, p_member)
}
func (self RDPipelineDepthStencilState) GetDepthRangeMin() Float {
	return self.Runtime.RDPipelineDepthStencilState_get_depth_range_min(self)
}
func (self RDPipelineDepthStencilState) SetDepthRangeMax(p_member Float) {
	self.Runtime.RDPipelineDepthStencilState_set_depth_range_max(self, p_member)
}
func (self RDPipelineDepthStencilState) GetDepthRangeMax() Float {
	return self.Runtime.RDPipelineDepthStencilState_get_depth_range_max(self)
}
func (self RDPipelineDepthStencilState) SetEnableStencil(p_member bool) {
	self.Runtime.RDPipelineDepthStencilState_set_enable_stencil(self, p_member)
}
func (self RDPipelineDepthStencilState) GetEnableStencil() bool {
	return self.Runtime.RDPipelineDepthStencilState_get_enable_stencil(self)
}
func (self RDPipelineDepthStencilState) SetFrontOpFail(p_member RenderingDeviceStencilOperation) {
	self.Runtime.RDPipelineDepthStencilState_set_front_op_fail(self, p_member)
}
func (self RDPipelineDepthStencilState) GetFrontOpFail() RenderingDeviceStencilOperation {
	return self.Runtime.RDPipelineDepthStencilState_get_front_op_fail(self)
}
func (self RDPipelineDepthStencilState) SetFrontOpPass(p_member RenderingDeviceStencilOperation) {
	self.Runtime.RDPipelineDepthStencilState_set_front_op_pass(self, p_member)
}
func (self RDPipelineDepthStencilState) GetFrontOpPass() RenderingDeviceStencilOperation {
	return self.Runtime.RDPipelineDepthStencilState_get_front_op_pass(self)
}
func (self RDPipelineDepthStencilState) SetFrontOpDepthFail(p_member RenderingDeviceStencilOperation) {
	self.Runtime.RDPipelineDepthStencilState_set_front_op_depth_fail(self, p_member)
}
func (self RDPipelineDepthStencilState) GetFrontOpDepthFail() RenderingDeviceStencilOperation {
	return self.Runtime.RDPipelineDepthStencilState_get_front_op_depth_fail(self)
}
func (self RDPipelineDepthStencilState) SetFrontOpCompare(p_member RenderingDeviceCompareOperator) {
	self.Runtime.RDPipelineDepthStencilState_set_front_op_compare(self, p_member)
}
func (self RDPipelineDepthStencilState) GetFrontOpCompare() RenderingDeviceCompareOperator {
	return self.Runtime.RDPipelineDepthStencilState_get_front_op_compare(self)
}
func (self RDPipelineDepthStencilState) SetFrontOpCompareMask(p_member int64) {
	self.Runtime.RDPipelineDepthStencilState_set_front_op_compare_mask(self, p_member)
}
func (self RDPipelineDepthStencilState) GetFrontOpCompareMask() int64 {
	return self.Runtime.RDPipelineDepthStencilState_get_front_op_compare_mask(self)
}
func (self RDPipelineDepthStencilState) SetFrontOpWriteMask(p_member int64) {
	self.Runtime.RDPipelineDepthStencilState_set_front_op_write_mask(self, p_member)
}
func (self RDPipelineDepthStencilState) GetFrontOpWriteMask() int64 {
	return self.Runtime.RDPipelineDepthStencilState_get_front_op_write_mask(self)
}
func (self RDPipelineDepthStencilState) SetFrontOpReference(p_member int64) {
	self.Runtime.RDPipelineDepthStencilState_set_front_op_reference(self, p_member)
}
func (self RDPipelineDepthStencilState) GetFrontOpReference() int64 {
	return self.Runtime.RDPipelineDepthStencilState_get_front_op_reference(self)
}
func (self RDPipelineDepthStencilState) SetBackOpFail(p_member RenderingDeviceStencilOperation) {
	self.Runtime.RDPipelineDepthStencilState_set_back_op_fail(self, p_member)
}
func (self RDPipelineDepthStencilState) GetBackOpFail() RenderingDeviceStencilOperation {
	return self.Runtime.RDPipelineDepthStencilState_get_back_op_fail(self)
}
func (self RDPipelineDepthStencilState) SetBackOpPass(p_member RenderingDeviceStencilOperation) {
	self.Runtime.RDPipelineDepthStencilState_set_back_op_pass(self, p_member)
}
func (self RDPipelineDepthStencilState) GetBackOpPass() RenderingDeviceStencilOperation {
	return self.Runtime.RDPipelineDepthStencilState_get_back_op_pass(self)
}
func (self RDPipelineDepthStencilState) SetBackOpDepthFail(p_member RenderingDeviceStencilOperation) {
	self.Runtime.RDPipelineDepthStencilState_set_back_op_depth_fail(self, p_member)
}
func (self RDPipelineDepthStencilState) GetBackOpDepthFail() RenderingDeviceStencilOperation {
	return self.Runtime.RDPipelineDepthStencilState_get_back_op_depth_fail(self)
}
func (self RDPipelineDepthStencilState) SetBackOpCompare(p_member RenderingDeviceCompareOperator) {
	self.Runtime.RDPipelineDepthStencilState_set_back_op_compare(self, p_member)
}
func (self RDPipelineDepthStencilState) GetBackOpCompare() RenderingDeviceCompareOperator {
	return self.Runtime.RDPipelineDepthStencilState_get_back_op_compare(self)
}
func (self RDPipelineDepthStencilState) SetBackOpCompareMask(p_member int64) {
	self.Runtime.RDPipelineDepthStencilState_set_back_op_compare_mask(self, p_member)
}
func (self RDPipelineDepthStencilState) GetBackOpCompareMask() int64 {
	return self.Runtime.RDPipelineDepthStencilState_get_back_op_compare_mask(self)
}
func (self RDPipelineDepthStencilState) SetBackOpWriteMask(p_member int64) {
	self.Runtime.RDPipelineDepthStencilState_set_back_op_write_mask(self, p_member)
}
func (self RDPipelineDepthStencilState) GetBackOpWriteMask() int64 {
	return self.Runtime.RDPipelineDepthStencilState_get_back_op_write_mask(self)
}
func (self RDPipelineDepthStencilState) SetBackOpReference(p_member int64) {
	self.Runtime.RDPipelineDepthStencilState_set_back_op_reference(self, p_member)
}
func (self RDPipelineDepthStencilState) GetBackOpReference() int64 {
	return self.Runtime.RDPipelineDepthStencilState_get_back_op_reference(self)
}

type extendsRDPipelineMultisampleState struct {
	_ [0]*extendsRDPipelineMultisampleState
	class
}

func (self RDPipelineMultisampleState) RefCounted() RefCounted {
	var parent RefCounted
	parent.class = self.class
	return parent
}
func (self RDPipelineMultisampleState) SetSampleCount(p_member RenderingDeviceTextureSamples) {
	self.Runtime.RDPipelineMultisampleState_set_sample_count(self, p_member)
}
func (self RDPipelineMultisampleState) GetSampleCount() RenderingDeviceTextureSamples {
	return self.Runtime.RDPipelineMultisampleState_get_sample_count(self)
}
func (self RDPipelineMultisampleState) SetEnableSampleShading(p_member bool) {
	self.Runtime.RDPipelineMultisampleState_set_enable_sample_shading(self, p_member)
}
func (self RDPipelineMultisampleState) GetEnableSampleShading() bool {
	return self.Runtime.RDPipelineMultisampleState_get_enable_sample_shading(self)
}
func (self RDPipelineMultisampleState) SetMinSampleShading(p_member Float) {
	self.Runtime.RDPipelineMultisampleState_set_min_sample_shading(self, p_member)
}
func (self RDPipelineMultisampleState) GetMinSampleShading() Float {
	return self.Runtime.RDPipelineMultisampleState_get_min_sample_shading(self)
}
func (self RDPipelineMultisampleState) SetEnableAlphaToCoverage(p_member bool) {
	self.Runtime.RDPipelineMultisampleState_set_enable_alpha_to_coverage(self, p_member)
}
func (self RDPipelineMultisampleState) GetEnableAlphaToCoverage() bool {
	return self.Runtime.RDPipelineMultisampleState_get_enable_alpha_to_coverage(self)
}
func (self RDPipelineMultisampleState) SetEnableAlphaToOne(p_member bool) {
	self.Runtime.RDPipelineMultisampleState_set_enable_alpha_to_one(self, p_member)
}
func (self RDPipelineMultisampleState) GetEnableAlphaToOne() bool {
	return self.Runtime.RDPipelineMultisampleState_get_enable_alpha_to_one(self)
}
func (self RDPipelineMultisampleState) SetSampleMasks(masks ArrayOf[int64]) {
	self.Runtime.RDPipelineMultisampleState_set_sample_masks(self, masks)
}
func (self RDPipelineMultisampleState) GetSampleMasks() ArrayOf[int64] {
	return self.Runtime.RDPipelineMultisampleState_get_sample_masks(self)
}

type extendsRDPipelineRasterizationState struct {
	_ [0]*extendsRDPipelineRasterizationState
	class
}

func (self RDPipelineRasterizationState) RefCounted() RefCounted {
	var parent RefCounted
	parent.class = self.class
	return parent
}
func (self RDPipelineRasterizationState) SetEnableDepthClamp(p_member bool) {
	self.Runtime.RDPipelineRasterizationState_set_enable_depth_clamp(self, p_member)
}
func (self RDPipelineRasterizationState) GetEnableDepthClamp() bool {
	return self.Runtime.RDPipelineRasterizationState_get_enable_depth_clamp(self)
}
func (self RDPipelineRasterizationState) SetDiscardPrimitives(p_member bool) {
	self.Runtime.RDPipelineRasterizationState_set_discard_primitives(self, p_member)
}
func (self RDPipelineRasterizationState) GetDiscardPrimitives() bool {
	return self.Runtime.RDPipelineRasterizationState_get_discard_primitives(self)
}
func (self RDPipelineRasterizationState) SetWireframe(p_member bool) {
	self.Runtime.RDPipelineRasterizationState_set_wireframe(self, p_member)
}
func (self RDPipelineRasterizationState) GetWireframe() bool {
	return self.Runtime.RDPipelineRasterizationState_get_wireframe(self)
}
func (self RDPipelineRasterizationState) SetCullMode(p_member RenderingDevicePolygonCullMode) {
	self.Runtime.RDPipelineRasterizationState_set_cull_mode(self, p_member)
}
func (self RDPipelineRasterizationState) GetCullMode() RenderingDevicePolygonCullMode {
	return self.Runtime.RDPipelineRasterizationState_get_cull_mode(self)
}
func (self RDPipelineRasterizationState) SetFrontFace(p_member RenderingDevicePolygonFrontFace) {
	self.Runtime.RDPipelineRasterizationState_set_front_face(self, p_member)
}
func (self RDPipelineRasterizationState) GetFrontFace() RenderingDevicePolygonFrontFace {
	return self.Runtime.RDPipelineRasterizationState_get_front_face(self)
}
func (self RDPipelineRasterizationState) SetDepthBiasEnabled(p_member bool) {
	self.Runtime.RDPipelineRasterizationState_set_depth_bias_enabled(self, p_member)
}
func (self RDPipelineRasterizationState) GetDepthBiasEnabled() bool {
	return self.Runtime.RDPipelineRasterizationState_get_depth_bias_enabled(self)
}
func (self RDPipelineRasterizationState) SetDepthBiasConstantFactor(p_member Float) {
	self.Runtime.RDPipelineRasterizationState_set_depth_bias_constant_factor(self, p_member)
}
func (self RDPipelineRasterizationState) GetDepthBiasConstantFactor() Float {
	return self.Runtime.RDPipelineRasterizationState_get_depth_bias_constant_factor(self)
}
func (self RDPipelineRasterizationState) SetDepthBiasClamp(p_member Float) {
	self.Runtime.RDPipelineRasterizationState_set_depth_bias_clamp(self, p_member)
}
func (self RDPipelineRasterizationState) GetDepthBiasClamp() Float {
	return self.Runtime.RDPipelineRasterizationState_get_depth_bias_clamp(self)
}
func (self RDPipelineRasterizationState) SetDepthBiasSlopeFactor(p_member Float) {
	self.Runtime.RDPipelineRasterizationState_set_depth_bias_slope_factor(self, p_member)
}
func (self RDPipelineRasterizationState) GetDepthBiasSlopeFactor() Float {
	return self.Runtime.RDPipelineRasterizationState_get_depth_bias_slope_factor(self)
}
func (self RDPipelineRasterizationState) SetLineWidth(p_member Float) {
	self.Runtime.RDPipelineRasterizationState_set_line_width(self, p_member)
}
func (self RDPipelineRasterizationState) GetLineWidth() Float {
	return self.Runtime.RDPipelineRasterizationState_get_line_width(self)
}
func (self RDPipelineRasterizationState) SetPatchControlPoints(p_member int64) {
	self.Runtime.RDPipelineRasterizationState_set_patch_control_points(self, p_member)
}
func (self RDPipelineRasterizationState) GetPatchControlPoints() int64 {
	return self.Runtime.RDPipelineRasterizationState_get_patch_control_points(self)
}

type extendsRDPipelineSpecializationConstant struct {
	_ [0]*extendsRDPipelineSpecializationConstant
	class
}

func (self RDPipelineSpecializationConstant) RefCounted() RefCounted {
	var parent RefCounted
	parent.class = self.class
	return parent
}
func (self RDPipelineSpecializationConstant) SetValue(value any) {
	self.Runtime.RDPipelineSpecializationConstant_set_value(self, value)
}
func (self RDPipelineSpecializationConstant) GetValue() any {
	return self.Runtime.RDPipelineSpecializationConstant_get_value(self)
}
func (self RDPipelineSpecializationConstant) SetConstantId(constant_id int64) {
	self.Runtime.RDPipelineSpecializationConstant_set_constant_id(self, constant_id)
}
func (self RDPipelineSpecializationConstant) GetConstantId() int64 {
	return self.Runtime.RDPipelineSpecializationConstant_get_constant_id(self)
}

type extendsRDSamplerState struct {
	_ [0]*extendsRDSamplerState
	class
}

func (self RDSamplerState) RefCounted() RefCounted {
	var parent RefCounted
	parent.class = self.class
	return parent
}
func (self RDSamplerState) SetMagFilter(p_member RenderingDeviceSamplerFilter) {
	self.Runtime.RDSamplerState_set_mag_filter(self, p_member)
}
func (self RDSamplerState) GetMagFilter() RenderingDeviceSamplerFilter {
	return self.Runtime.RDSamplerState_get_mag_filter(self)
}
func (self RDSamplerState) SetMinFilter(p_member RenderingDeviceSamplerFilter) {
	self.Runtime.RDSamplerState_set_min_filter(self, p_member)
}
func (self RDSamplerState) GetMinFilter() RenderingDeviceSamplerFilter {
	return self.Runtime.RDSamplerState_get_min_filter(self)
}
func (self RDSamplerState) SetMipFilter(p_member RenderingDeviceSamplerFilter) {
	self.Runtime.RDSamplerState_set_mip_filter(self, p_member)
}
func (self RDSamplerState) GetMipFilter() RenderingDeviceSamplerFilter {
	return self.Runtime.RDSamplerState_get_mip_filter(self)
}
func (self RDSamplerState) SetRepeatU(p_member RenderingDeviceSamplerRepeatMode) {
	self.Runtime.RDSamplerState_set_repeat_u(self, p_member)
}
func (self RDSamplerState) GetRepeatU() RenderingDeviceSamplerRepeatMode {
	return self.Runtime.RDSamplerState_get_repeat_u(self)
}
func (self RDSamplerState) SetRepeatV(p_member RenderingDeviceSamplerRepeatMode) {
	self.Runtime.RDSamplerState_set_repeat_v(self, p_member)
}
func (self RDSamplerState) GetRepeatV() RenderingDeviceSamplerRepeatMode {
	return self.Runtime.RDSamplerState_get_repeat_v(self)
}
func (self RDSamplerState) SetRepeatW(p_member RenderingDeviceSamplerRepeatMode) {
	self.Runtime.RDSamplerState_set_repeat_w(self, p_member)
}
func (self RDSamplerState) GetRepeatW() RenderingDeviceSamplerRepeatMode {
	return self.Runtime.RDSamplerState_get_repeat_w(self)
}
func (self RDSamplerState) SetLodBias(p_member Float) {
	self.Runtime.RDSamplerState_set_lod_bias(self, p_member)
}
func (self RDSamplerState) GetLodBias() Float {
	return self.Runtime.RDSamplerState_get_lod_bias(self)
}
func (self RDSamplerState) SetUseAnisotropy(p_member bool) {
	self.Runtime.RDSamplerState_set_use_anisotropy(self, p_member)
}
func (self RDSamplerState) GetUseAnisotropy() bool {
	return self.Runtime.RDSamplerState_get_use_anisotropy(self)
}
func (self RDSamplerState) SetAnisotropyMax(p_member Float) {
	self.Runtime.RDSamplerState_set_anisotropy_max(self, p_member)
}
func (self RDSamplerState) GetAnisotropyMax() Float {
	return self.Runtime.RDSamplerState_get_anisotropy_max(self)
}
func (self RDSamplerState) SetEnableCompare(p_member bool) {
	self.Runtime.RDSamplerState_set_enable_compare(self, p_member)
}
func (self RDSamplerState) GetEnableCompare() bool {
	return self.Runtime.RDSamplerState_get_enable_compare(self)
}
func (self RDSamplerState) SetCompareOp(p_member RenderingDeviceCompareOperator) {
	self.Runtime.RDSamplerState_set_compare_op(self, p_member)
}
func (self RDSamplerState) GetCompareOp() RenderingDeviceCompareOperator {
	return self.Runtime.RDSamplerState_get_compare_op(self)
}
func (self RDSamplerState) SetMinLod(p_member Float) {
	self.Runtime.RDSamplerState_set_min_lod(self, p_member)
}
func (self RDSamplerState) GetMinLod() Float {
	return self.Runtime.RDSamplerState_get_min_lod(self)
}
func (self RDSamplerState) SetMaxLod(p_member Float) {
	self.Runtime.RDSamplerState_set_max_lod(self, p_member)
}
func (self RDSamplerState) GetMaxLod() Float {
	return self.Runtime.RDSamplerState_get_max_lod(self)
}
func (self RDSamplerState) SetBorderColor(p_member RenderingDeviceSamplerBorderColor) {
	self.Runtime.RDSamplerState_set_border_color(self, p_member)
}
func (self RDSamplerState) GetBorderColor() RenderingDeviceSamplerBorderColor {
	return self.Runtime.RDSamplerState_get_border_color(self)
}
func (self RDSamplerState) SetUnnormalizedUvw(p_member bool) {
	self.Runtime.RDSamplerState_set_unnormalized_uvw(self, p_member)
}
func (self RDSamplerState) GetUnnormalizedUvw() bool {
	return self.Runtime.RDSamplerState_get_unnormalized_uvw(self)
}

type extendsRDShaderFile struct {
	_ [0]*extendsRDShaderFile
	class
}

func (self RDShaderFile) Resource() Resource {
	var parent Resource
	parent.class = self.class
	return parent
}
func (self RDShaderFile) SetBytecode(bytecode RDShaderSPIRV, version string) {
	self.Runtime.RDShaderFile_set_bytecode(self, bytecode, version)
}
func (self RDShaderFile) GetSpirv(version string) RDShaderSPIRV {
	return self.Runtime.RDShaderFile_get_spirv(self, version)
}
func (self RDShaderFile) GetVersionList() ArrayOf[string] {
	return self.Runtime.RDShaderFile_get_version_list(self)
}
func (self RDShaderFile) SetBaseError(error string) {
	self.Runtime.RDShaderFile_set_base_error(self, error)
}
func (self RDShaderFile) GetBaseError() string {
	return self.Runtime.RDShaderFile_get_base_error(self)
}

type extendsRDShaderSPIRV struct {
	_ [0]*extendsRDShaderSPIRV
	class
}

func (self RDShaderSPIRV) Resource() Resource {
	var parent Resource
	parent.class = self.class
	return parent
}
func (self RDShaderSPIRV) SetStageBytecode(stage RenderingDeviceShaderStage, bytecode PackedByteArray) {
	self.Runtime.RDShaderSPIRV_set_stage_bytecode(self, stage, bytecode)
}
func (self RDShaderSPIRV) GetStageBytecode(stage RenderingDeviceShaderStage) PackedByteArray {
	return self.Runtime.RDShaderSPIRV_get_stage_bytecode(self, stage)
}
func (self RDShaderSPIRV) SetStageCompileError(stage RenderingDeviceShaderStage, compile_error string) {
	self.Runtime.RDShaderSPIRV_set_stage_compile_error(self, stage, compile_error)
}
func (self RDShaderSPIRV) GetStageCompileError(stage RenderingDeviceShaderStage) string {
	return self.Runtime.RDShaderSPIRV_get_stage_compile_error(self, stage)
}

type extendsRDShaderSource struct {
	_ [0]*extendsRDShaderSource
	class
}

func (self RDShaderSource) RefCounted() RefCounted {
	var parent RefCounted
	parent.class = self.class
	return parent
}
func (self RDShaderSource) SetStageSource(stage RenderingDeviceShaderStage, source string) {
	self.Runtime.RDShaderSource_set_stage_source(self, stage, source)
}
func (self RDShaderSource) GetStageSource(stage RenderingDeviceShaderStage) string {
	return self.Runtime.RDShaderSource_get_stage_source(self, stage)
}
func (self RDShaderSource) SetLanguage(language RenderingDeviceShaderLanguage) {
	self.Runtime.RDShaderSource_set_language(self, language)
}
func (self RDShaderSource) GetLanguage() RenderingDeviceShaderLanguage {
	return self.Runtime.RDShaderSource_get_language(self)
}

type extendsRDTextureFormat struct {
	_ [0]*extendsRDTextureFormat
	class
}

func (self RDTextureFormat) RefCounted() RefCounted {
	var parent RefCounted
	parent.class = self.class
	return parent
}
func (self RDTextureFormat) SetFormat(p_member RenderingDeviceDataFormat) {
	self.Runtime.RDTextureFormat_set_format(self, p_member)
}
func (self RDTextureFormat) GetFormat() RenderingDeviceDataFormat {
	return self.Runtime.RDTextureFormat_get_format(self)
}
func (self RDTextureFormat) SetWidth(p_member int64) {
	self.Runtime.RDTextureFormat_set_width(self, p_member)
}
func (self RDTextureFormat) GetWidth() int64 {
	return self.Runtime.RDTextureFormat_get_width(self)
}
func (self RDTextureFormat) SetHeight(p_member int64) {
	self.Runtime.RDTextureFormat_set_height(self, p_member)
}
func (self RDTextureFormat) GetHeight() int64 {
	return self.Runtime.RDTextureFormat_get_height(self)
}
func (self RDTextureFormat) SetDepth(p_member int64) {
	self.Runtime.RDTextureFormat_set_depth(self, p_member)
}
func (self RDTextureFormat) GetDepth() int64 {
	return self.Runtime.RDTextureFormat_get_depth(self)
}
func (self RDTextureFormat) SetArrayLayers(p_member int64) {
	self.Runtime.RDTextureFormat_set_array_layers(self, p_member)
}
func (self RDTextureFormat) GetArrayLayers() int64 {
	return self.Runtime.RDTextureFormat_get_array_layers(self)
}
func (self RDTextureFormat) SetMipmaps(p_member int64) {
	self.Runtime.RDTextureFormat_set_mipmaps(self, p_member)
}
func (self RDTextureFormat) GetMipmaps() int64 {
	return self.Runtime.RDTextureFormat_get_mipmaps(self)
}
func (self RDTextureFormat) SetTextureType(p_member RenderingDeviceTextureType) {
	self.Runtime.RDTextureFormat_set_texture_type(self, p_member)
}
func (self RDTextureFormat) GetTextureType() RenderingDeviceTextureType {
	return self.Runtime.RDTextureFormat_get_texture_type(self)
}
func (self RDTextureFormat) SetSamples(p_member RenderingDeviceTextureSamples) {
	self.Runtime.RDTextureFormat_set_samples(self, p_member)
}
func (self RDTextureFormat) GetSamples() RenderingDeviceTextureSamples {
	return self.Runtime.RDTextureFormat_get_samples(self)
}
func (self RDTextureFormat) SetUsageBits(p_member RenderingDeviceTextureUsageBits) {
	self.Runtime.RDTextureFormat_set_usage_bits(self, p_member)
}
func (self RDTextureFormat) GetUsageBits() RenderingDeviceTextureUsageBits {
	return self.Runtime.RDTextureFormat_get_usage_bits(self)
}
func (self RDTextureFormat) AddShareableFormat(format RenderingDeviceDataFormat) {
	self.Runtime.RDTextureFormat_add_shareable_format(self, format)
}
func (self RDTextureFormat) RemoveShareableFormat(format RenderingDeviceDataFormat) {
	self.Runtime.RDTextureFormat_remove_shareable_format(self, format)
}

type extendsRDTextureView struct {
	_ [0]*extendsRDTextureView
	class
}

func (self RDTextureView) RefCounted() RefCounted {
	var parent RefCounted
	parent.class = self.class
	return parent
}
func (self RDTextureView) SetFormatOverride(p_member RenderingDeviceDataFormat) {
	self.Runtime.RDTextureView_set_format_override(self, p_member)
}
func (self RDTextureView) GetFormatOverride() RenderingDeviceDataFormat {
	return self.Runtime.RDTextureView_get_format_override(self)
}
func (self RDTextureView) SetSwizzleR(p_member RenderingDeviceTextureSwizzle) {
	self.Runtime.RDTextureView_set_swizzle_r(self, p_member)
}
func (self RDTextureView) GetSwizzleR() RenderingDeviceTextureSwizzle {
	return self.Runtime.RDTextureView_get_swizzle_r(self)
}
func (self RDTextureView) SetSwizzleG(p_member RenderingDeviceTextureSwizzle) {
	self.Runtime.RDTextureView_set_swizzle_g(self, p_member)
}
func (self RDTextureView) GetSwizzleG() RenderingDeviceTextureSwizzle {
	return self.Runtime.RDTextureView_get_swizzle_g(self)
}
func (self RDTextureView) SetSwizzleB(p_member RenderingDeviceTextureSwizzle) {
	self.Runtime.RDTextureView_set_swizzle_b(self, p_member)
}
func (self RDTextureView) GetSwizzleB() RenderingDeviceTextureSwizzle {
	return self.Runtime.RDTextureView_get_swizzle_b(self)
}
func (self RDTextureView) SetSwizzleA(p_member RenderingDeviceTextureSwizzle) {
	self.Runtime.RDTextureView_set_swizzle_a(self, p_member)
}
func (self RDTextureView) GetSwizzleA() RenderingDeviceTextureSwizzle {
	return self.Runtime.RDTextureView_get_swizzle_a(self)
}

type extendsRDUniform struct {
	_ [0]*extendsRDUniform
	class
}

func (self RDUniform) RefCounted() RefCounted {
	var parent RefCounted
	parent.class = self.class
	return parent
}
func (self RDUniform) SetUniformType(p_member RenderingDeviceUniformType) {
	self.Runtime.RDUniform_set_uniform_type(self, p_member)
}
func (self RDUniform) GetUniformType() RenderingDeviceUniformType {
	return self.Runtime.RDUniform_get_uniform_type(self)
}
func (self RDUniform) SetBinding(p_member int64) {
	self.Runtime.RDUniform_set_binding(self, p_member)
}
func (self RDUniform) GetBinding() int64 {
	return self.Runtime.RDUniform_get_binding(self)
}
func (self RDUniform) AddId(id RID) {
	self.Runtime.RDUniform_add_id(self, id)
}
func (self RDUniform) ClearIds() {
	self.Runtime.RDUniform_clear_ids(self)
}
func (self RDUniform) GetIds() ArrayOf[RID] {
	return self.Runtime.RDUniform_get_ids(self)
}

type extendsRDVertexAttribute struct {
	_ [0]*extendsRDVertexAttribute
	class
}

func (self RDVertexAttribute) RefCounted() RefCounted {
	var parent RefCounted
	parent.class = self.class
	return parent
}
func (self RDVertexAttribute) SetLocation(p_member int64) {
	self.Runtime.RDVertexAttribute_set_location(self, p_member)
}
func (self RDVertexAttribute) GetLocation() int64 {
	return self.Runtime.RDVertexAttribute_get_location(self)
}
func (self RDVertexAttribute) SetOffset(p_member int64) {
	self.Runtime.RDVertexAttribute_set_offset(self, p_member)
}
func (self RDVertexAttribute) GetOffset() int64 {
	return self.Runtime.RDVertexAttribute_get_offset(self)
}
func (self RDVertexAttribute) SetFormat(p_member RenderingDeviceDataFormat) {
	self.Runtime.RDVertexAttribute_set_format(self, p_member)
}
func (self RDVertexAttribute) GetFormat() RenderingDeviceDataFormat {
	return self.Runtime.RDVertexAttribute_get_format(self)
}
func (self RDVertexAttribute) SetStride(p_member int64) {
	self.Runtime.RDVertexAttribute_set_stride(self, p_member)
}
func (self RDVertexAttribute) GetStride() int64 {
	return self.Runtime.RDVertexAttribute_get_stride(self)
}
func (self RDVertexAttribute) SetFrequency(p_member RenderingDeviceVertexFrequency) {
	self.Runtime.RDVertexAttribute_set_frequency(self, p_member)
}
func (self RDVertexAttribute) GetFrequency() RenderingDeviceVertexFrequency {
	return self.Runtime.RDVertexAttribute_get_frequency(self)
}

type extendsRandomNumberGenerator struct {
	_ [0]*extendsRandomNumberGenerator
	class
}

func (self RandomNumberGenerator) RefCounted() RefCounted {
	var parent RefCounted
	parent.class = self.class
	return parent
}
func (self RandomNumberGenerator) SetSeed(seed int64) {
	self.Runtime.RandomNumberGenerator_set_seed(self, seed)
}
func (self RandomNumberGenerator) GetSeed() int64 {
	return self.Runtime.RandomNumberGenerator_get_seed(self)
}
func (self RandomNumberGenerator) SetState(state int64) {
	self.Runtime.RandomNumberGenerator_set_state(self, state)
}
func (self RandomNumberGenerator) GetState() int64 {
	return self.Runtime.RandomNumberGenerator_get_state(self)
}
func (self RandomNumberGenerator) Randi() int64 {
	return self.Runtime.RandomNumberGenerator_randi(self)
}
func (self RandomNumberGenerator) Randf() Float {
	return self.Runtime.RandomNumberGenerator_randf(self)
}
func (self RandomNumberGenerator) Randfn(mean Float, deviation Float) Float {
	return self.Runtime.RandomNumberGenerator_randfn(self, mean, deviation)
}
func (self RandomNumberGenerator) RandfRange(from Float, to Float) Float {
	return self.Runtime.RandomNumberGenerator_randf_range(self, from, to)
}
func (self RandomNumberGenerator) RandiRange(from int64, to int64) int64 {
	return self.Runtime.RandomNumberGenerator_randi_range(self, from, to)
}
func (self RandomNumberGenerator) Randomize() {
	self.Runtime.RandomNumberGenerator_randomize(self)
}

type extendsRange struct {
	_ [0]*extendsRange
	class
}

func (self Range) Control() Control { var parent Control; parent.class = self.class; return parent }
func (self Range) GetValue() Float {
	return self.Runtime.Range_get_value(self)
}
func (self Range) GetMin() Float {
	return self.Runtime.Range_get_min(self)
}
func (self Range) GetMax() Float {
	return self.Runtime.Range_get_max(self)
}
func (self Range) GetStep() Float {
	return self.Runtime.Range_get_step(self)
}
func (self Range) GetPage() Float {
	return self.Runtime.Range_get_page(self)
}
func (self Range) GetAsRatio() Float {
	return self.Runtime.Range_get_as_ratio(self)
}
func (self Range) SetValue(value Float) {
	self.Runtime.Range_set_value(self, value)
}
func (self Range) SetValueNoSignal(value Float) {
	self.Runtime.Range_set_value_no_signal(self, value)
}
func (self Range) SetMin(minimum Float) {
	self.Runtime.Range_set_min(self, minimum)
}
func (self Range) SetMax(maximum Float) {
	self.Runtime.Range_set_max(self, maximum)
}
func (self Range) SetStep(step Float) {
	self.Runtime.Range_set_step(self, step)
}
func (self Range) SetPage(pagesize Float) {
	self.Runtime.Range_set_page(self, pagesize)
}
func (self Range) SetAsRatio(value Float) {
	self.Runtime.Range_set_as_ratio(self, value)
}
func (self Range) SetUseRoundedValues(enabled bool) {
	self.Runtime.Range_set_use_rounded_values(self, enabled)
}
func (self Range) IsUsingRoundedValues() bool {
	return self.Runtime.Range_is_using_rounded_values(self)
}
func (self Range) SetExpRatio(enabled bool) {
	self.Runtime.Range_set_exp_ratio(self, enabled)
}
func (self Range) IsRatioExp() bool {
	return self.Runtime.Range_is_ratio_exp(self)
}
func (self Range) SetAllowGreater(allow bool) {
	self.Runtime.Range_set_allow_greater(self, allow)
}
func (self Range) IsGreaterAllowed() bool {
	return self.Runtime.Range_is_greater_allowed(self)
}
func (self Range) SetAllowLesser(allow bool) {
	self.Runtime.Range_set_allow_lesser(self, allow)
}
func (self Range) IsLesserAllowed() bool {
	return self.Runtime.Range_is_lesser_allowed(self)
}
func (self Range) Share(with Node) {
	self.Runtime.Range_share(self, with)
}
func (self Range) Unshare() {
	self.Runtime.Range_unshare(self)
}

type extendsRayCast2D struct {
	_ [0]*extendsRayCast2D
	class
}

func (self RayCast2D) Node2D() Node2D { var parent Node2D; parent.class = self.class; return parent }
func (self RayCast2D) SetEnabled(enabled bool) {
	self.Runtime.RayCast2D_set_enabled(self, enabled)
}
func (self RayCast2D) IsEnabled() bool {
	return self.Runtime.RayCast2D_is_enabled(self)
}
func (self RayCast2D) SetTargetPosition(local_point Vector2) {
	self.Runtime.RayCast2D_set_target_position(self, local_point)
}
func (self RayCast2D) GetTargetPosition() Vector2 {
	return self.Runtime.RayCast2D_get_target_position(self)
}
func (self RayCast2D) IsColliding() bool {
	return self.Runtime.RayCast2D_is_colliding(self)
}
func (self RayCast2D) ForceRaycastUpdate() {
	self.Runtime.RayCast2D_force_raycast_update(self)
}
func (self RayCast2D) GetCollider() Object {
	return self.Runtime.RayCast2D_get_collider(self)
}
func (self RayCast2D) GetColliderRid() RID {
	return self.Runtime.RayCast2D_get_collider_rid(self)
}
func (self RayCast2D) GetColliderShape() int64 {
	return self.Runtime.RayCast2D_get_collider_shape(self)
}
func (self RayCast2D) GetCollisionPoint() Vector2 {
	return self.Runtime.RayCast2D_get_collision_point(self)
}
func (self RayCast2D) GetCollisionNormal() Vector2 {
	return self.Runtime.RayCast2D_get_collision_normal(self)
}
func (self RayCast2D) AddExceptionRid(rid RID) {
	self.Runtime.RayCast2D_add_exception_rid(self, rid)
}
func (self RayCast2D) AddException(node CollisionObject2D) {
	self.Runtime.RayCast2D_add_exception(self, node)
}
func (self RayCast2D) RemoveExceptionRid(rid RID) {
	self.Runtime.RayCast2D_remove_exception_rid(self, rid)
}
func (self RayCast2D) RemoveException(node CollisionObject2D) {
	self.Runtime.RayCast2D_remove_exception(self, node)
}
func (self RayCast2D) ClearExceptions() {
	self.Runtime.RayCast2D_clear_exceptions(self)
}
func (self RayCast2D) SetCollisionMask(mask int64) {
	self.Runtime.RayCast2D_set_collision_mask(self, mask)
}
func (self RayCast2D) GetCollisionMask() int64 {
	return self.Runtime.RayCast2D_get_collision_mask(self)
}
func (self RayCast2D) SetCollisionMaskValue(layer_number int64, value bool) {
	self.Runtime.RayCast2D_set_collision_mask_value(self, layer_number, value)
}
func (self RayCast2D) GetCollisionMaskValue(layer_number int64) bool {
	return self.Runtime.RayCast2D_get_collision_mask_value(self, layer_number)
}
func (self RayCast2D) SetExcludeParentBody(mask bool) {
	self.Runtime.RayCast2D_set_exclude_parent_body(self, mask)
}
func (self RayCast2D) GetExcludeParentBody() bool {
	return self.Runtime.RayCast2D_get_exclude_parent_body(self)
}
func (self RayCast2D) SetCollideWithAreas(enable bool) {
	self.Runtime.RayCast2D_set_collide_with_areas(self, enable)
}
func (self RayCast2D) IsCollideWithAreasEnabled() bool {
	return self.Runtime.RayCast2D_is_collide_with_areas_enabled(self)
}
func (self RayCast2D) SetCollideWithBodies(enable bool) {
	self.Runtime.RayCast2D_set_collide_with_bodies(self, enable)
}
func (self RayCast2D) IsCollideWithBodiesEnabled() bool {
	return self.Runtime.RayCast2D_is_collide_with_bodies_enabled(self)
}
func (self RayCast2D) SetHitFromInside(enable bool) {
	self.Runtime.RayCast2D_set_hit_from_inside(self, enable)
}
func (self RayCast2D) IsHitFromInsideEnabled() bool {
	return self.Runtime.RayCast2D_is_hit_from_inside_enabled(self)
}

type extendsRayCast3D struct {
	_ [0]*extendsRayCast3D
	class
}

func (self RayCast3D) Node3D() Node3D { var parent Node3D; parent.class = self.class; return parent }
func (self RayCast3D) SetEnabled(enabled bool) {
	self.Runtime.RayCast3D_set_enabled(self, enabled)
}
func (self RayCast3D) IsEnabled() bool {
	return self.Runtime.RayCast3D_is_enabled(self)
}
func (self RayCast3D) SetTargetPosition(local_point Vector3) {
	self.Runtime.RayCast3D_set_target_position(self, local_point)
}
func (self RayCast3D) GetTargetPosition() Vector3 {
	return self.Runtime.RayCast3D_get_target_position(self)
}
func (self RayCast3D) IsColliding() bool {
	return self.Runtime.RayCast3D_is_colliding(self)
}
func (self RayCast3D) ForceRaycastUpdate() {
	self.Runtime.RayCast3D_force_raycast_update(self)
}
func (self RayCast3D) GetCollider() Object {
	return self.Runtime.RayCast3D_get_collider(self)
}
func (self RayCast3D) GetColliderRid() RID {
	return self.Runtime.RayCast3D_get_collider_rid(self)
}
func (self RayCast3D) GetColliderShape() int64 {
	return self.Runtime.RayCast3D_get_collider_shape(self)
}
func (self RayCast3D) GetCollisionPoint() Vector3 {
	return self.Runtime.RayCast3D_get_collision_point(self)
}
func (self RayCast3D) GetCollisionNormal() Vector3 {
	return self.Runtime.RayCast3D_get_collision_normal(self)
}
func (self RayCast3D) GetCollisionFaceIndex() int64 {
	return self.Runtime.RayCast3D_get_collision_face_index(self)
}
func (self RayCast3D) AddExceptionRid(rid RID) {
	self.Runtime.RayCast3D_add_exception_rid(self, rid)
}
func (self RayCast3D) AddException(node CollisionObject3D) {
	self.Runtime.RayCast3D_add_exception(self, node)
}
func (self RayCast3D) RemoveExceptionRid(rid RID) {
	self.Runtime.RayCast3D_remove_exception_rid(self, rid)
}
func (self RayCast3D) RemoveException(node CollisionObject3D) {
	self.Runtime.RayCast3D_remove_exception(self, node)
}
func (self RayCast3D) ClearExceptions() {
	self.Runtime.RayCast3D_clear_exceptions(self)
}
func (self RayCast3D) SetCollisionMask(mask int64) {
	self.Runtime.RayCast3D_set_collision_mask(self, mask)
}
func (self RayCast3D) GetCollisionMask() int64 {
	return self.Runtime.RayCast3D_get_collision_mask(self)
}
func (self RayCast3D) SetCollisionMaskValue(layer_number int64, value bool) {
	self.Runtime.RayCast3D_set_collision_mask_value(self, layer_number, value)
}
func (self RayCast3D) GetCollisionMaskValue(layer_number int64) bool {
	return self.Runtime.RayCast3D_get_collision_mask_value(self, layer_number)
}
func (self RayCast3D) SetExcludeParentBody(mask bool) {
	self.Runtime.RayCast3D_set_exclude_parent_body(self, mask)
}
func (self RayCast3D) GetExcludeParentBody() bool {
	return self.Runtime.RayCast3D_get_exclude_parent_body(self)
}
func (self RayCast3D) SetCollideWithAreas(enable bool) {
	self.Runtime.RayCast3D_set_collide_with_areas(self, enable)
}
func (self RayCast3D) IsCollideWithAreasEnabled() bool {
	return self.Runtime.RayCast3D_is_collide_with_areas_enabled(self)
}
func (self RayCast3D) SetCollideWithBodies(enable bool) {
	self.Runtime.RayCast3D_set_collide_with_bodies(self, enable)
}
func (self RayCast3D) IsCollideWithBodiesEnabled() bool {
	return self.Runtime.RayCast3D_is_collide_with_bodies_enabled(self)
}
func (self RayCast3D) SetHitFromInside(enable bool) {
	self.Runtime.RayCast3D_set_hit_from_inside(self, enable)
}
func (self RayCast3D) IsHitFromInsideEnabled() bool {
	return self.Runtime.RayCast3D_is_hit_from_inside_enabled(self)
}
func (self RayCast3D) SetHitBackFaces(enable bool) {
	self.Runtime.RayCast3D_set_hit_back_faces(self, enable)
}
func (self RayCast3D) IsHitBackFacesEnabled() bool {
	return self.Runtime.RayCast3D_is_hit_back_faces_enabled(self)
}
func (self RayCast3D) SetDebugShapeCustomColor(debug_shape_custom_color Color) {
	self.Runtime.RayCast3D_set_debug_shape_custom_color(self, debug_shape_custom_color)
}
func (self RayCast3D) GetDebugShapeCustomColor() Color {
	return self.Runtime.RayCast3D_get_debug_shape_custom_color(self)
}
func (self RayCast3D) SetDebugShapeThickness(debug_shape_thickness int64) {
	self.Runtime.RayCast3D_set_debug_shape_thickness(self, debug_shape_thickness)
}
func (self RayCast3D) GetDebugShapeThickness() int64 {
	return self.Runtime.RayCast3D_get_debug_shape_thickness(self)
}

type extendsRectangleShape2D struct {
	_ [0]*extendsRectangleShape2D
	class
}

func (self RectangleShape2D) Shape2D() Shape2D {
	var parent Shape2D
	parent.class = self.class
	return parent
}
func (self RectangleShape2D) SetSize(size Vector2) {
	self.Runtime.RectangleShape2D_set_size(self, size)
}
func (self RectangleShape2D) GetSize() Vector2 {
	return self.Runtime.RectangleShape2D_get_size(self)
}

type extendsRefCounted struct {
	_ [0]*extendsRefCounted
	class
}

func (self RefCounted) Object() Object { var parent Object; parent.class = self.class; return parent }
func (self RefCounted) InitRef() bool {
	return self.Runtime.RefCounted_init_ref(self)
}
func (self RefCounted) Reference() bool {
	return self.Runtime.RefCounted_reference(self)
}
func (self RefCounted) Unreference() bool {
	return self.Runtime.RefCounted_unreference(self)
}
func (self RefCounted) GetReferenceCount() int64 {
	return self.Runtime.RefCounted_get_reference_count(self)
}

type extendsReferenceRect struct {
	_ [0]*extendsReferenceRect
	class
}

func (self ReferenceRect) Control() Control {
	var parent Control
	parent.class = self.class
	return parent
}
func (self ReferenceRect) GetBorderColor() Color {
	return self.Runtime.ReferenceRect_get_border_color(self)
}
func (self ReferenceRect) SetBorderColor(color Color) {
	self.Runtime.ReferenceRect_set_border_color(self, color)
}
func (self ReferenceRect) GetBorderWidth() Float {
	return self.Runtime.ReferenceRect_get_border_width(self)
}
func (self ReferenceRect) SetBorderWidth(width Float) {
	self.Runtime.ReferenceRect_set_border_width(self, width)
}
func (self ReferenceRect) GetEditorOnly() bool {
	return self.Runtime.ReferenceRect_get_editor_only(self)
}
func (self ReferenceRect) SetEditorOnly(enabled bool) {
	self.Runtime.ReferenceRect_set_editor_only(self, enabled)
}

type extendsReflectionProbe struct {
	_ [0]*extendsReflectionProbe
	class
}

func (self ReflectionProbe) VisualInstance3D() VisualInstance3D {
	var parent VisualInstance3D
	parent.class = self.class
	return parent
}
func (self ReflectionProbe) SetIntensity(intensity Float) {
	self.Runtime.ReflectionProbe_set_intensity(self, intensity)
}
func (self ReflectionProbe) GetIntensity() Float {
	return self.Runtime.ReflectionProbe_get_intensity(self)
}
func (self ReflectionProbe) SetAmbientMode(ambient ReflectionProbeAmbientMode) {
	self.Runtime.ReflectionProbe_set_ambient_mode(self, ambient)
}
func (self ReflectionProbe) GetAmbientMode() ReflectionProbeAmbientMode {
	return self.Runtime.ReflectionProbe_get_ambient_mode(self)
}
func (self ReflectionProbe) SetAmbientColor(ambient Color) {
	self.Runtime.ReflectionProbe_set_ambient_color(self, ambient)
}
func (self ReflectionProbe) GetAmbientColor() Color {
	return self.Runtime.ReflectionProbe_get_ambient_color(self)
}
func (self ReflectionProbe) SetAmbientColorEnergy(ambient_energy Float) {
	self.Runtime.ReflectionProbe_set_ambient_color_energy(self, ambient_energy)
}
func (self ReflectionProbe) GetAmbientColorEnergy() Float {
	return self.Runtime.ReflectionProbe_get_ambient_color_energy(self)
}
func (self ReflectionProbe) SetMaxDistance(max_distance Float) {
	self.Runtime.ReflectionProbe_set_max_distance(self, max_distance)
}
func (self ReflectionProbe) GetMaxDistance() Float {
	return self.Runtime.ReflectionProbe_get_max_distance(self)
}
func (self ReflectionProbe) SetMeshLodThreshold(ratio Float) {
	self.Runtime.ReflectionProbe_set_mesh_lod_threshold(self, ratio)
}
func (self ReflectionProbe) GetMeshLodThreshold() Float {
	return self.Runtime.ReflectionProbe_get_mesh_lod_threshold(self)
}
func (self ReflectionProbe) SetSize(size Vector3) {
	self.Runtime.ReflectionProbe_set_size(self, size)
}
func (self ReflectionProbe) GetSize() Vector3 {
	return self.Runtime.ReflectionProbe_get_size(self)
}
func (self ReflectionProbe) SetOriginOffset(origin_offset Vector3) {
	self.Runtime.ReflectionProbe_set_origin_offset(self, origin_offset)
}
func (self ReflectionProbe) GetOriginOffset() Vector3 {
	return self.Runtime.ReflectionProbe_get_origin_offset(self)
}
func (self ReflectionProbe) SetAsInterior(enable bool) {
	self.Runtime.ReflectionProbe_set_as_interior(self, enable)
}
func (self ReflectionProbe) IsSetAsInterior() bool {
	return self.Runtime.ReflectionProbe_is_set_as_interior(self)
}
func (self ReflectionProbe) SetEnableBoxProjection(enable bool) {
	self.Runtime.ReflectionProbe_set_enable_box_projection(self, enable)
}
func (self ReflectionProbe) IsBoxProjectionEnabled() bool {
	return self.Runtime.ReflectionProbe_is_box_projection_enabled(self)
}
func (self ReflectionProbe) SetEnableShadows(enable bool) {
	self.Runtime.ReflectionProbe_set_enable_shadows(self, enable)
}
func (self ReflectionProbe) AreShadowsEnabled() bool {
	return self.Runtime.ReflectionProbe_are_shadows_enabled(self)
}
func (self ReflectionProbe) SetCullMask(layers int64) {
	self.Runtime.ReflectionProbe_set_cull_mask(self, layers)
}
func (self ReflectionProbe) GetCullMask() int64 {
	return self.Runtime.ReflectionProbe_get_cull_mask(self)
}
func (self ReflectionProbe) SetUpdateMode(mode ReflectionProbeUpdateMode) {
	self.Runtime.ReflectionProbe_set_update_mode(self, mode)
}
func (self ReflectionProbe) GetUpdateMode() ReflectionProbeUpdateMode {
	return self.Runtime.ReflectionProbe_get_update_mode(self)
}

type extendsRegEx struct {
	_ [0]*extendsRegEx
	class
}

func (self RegEx) RefCounted() RefCounted {
	var parent RefCounted
	parent.class = self.class
	return parent
}
func (self RegEx) CreateFromString(pattern string) RegEx {
	return self.Runtime.RegEx_create_from_string(self, pattern)
}
func (self RegEx) Clear() {
	self.Runtime.RegEx_clear(self)
}
func (self RegEx) Compile(pattern string) int64 {
	return self.Runtime.RegEx_compile(self, pattern)
}
func (self RegEx) Search(subject string, offset int64, end int64) RegExMatch {
	return self.Runtime.RegEx_search(self, subject, offset, end)
}
func (self RegEx) SearchAll(subject string, offset int64, end int64) ArrayOf[RegExMatch] {
	return self.Runtime.RegEx_search_all(self, subject, offset, end)
}
func (self RegEx) Sub(subject string, replacement string, all bool, offset int64, end int64) string {
	return self.Runtime.RegEx_sub(self, subject, replacement, all, offset, end)
}
func (self RegEx) IsValid() bool {
	return self.Runtime.RegEx_is_valid(self)
}
func (self RegEx) GetPattern() string {
	return self.Runtime.RegEx_get_pattern(self)
}
func (self RegEx) GetGroupCount() int64 {
	return self.Runtime.RegEx_get_group_count(self)
}
func (self RegEx) GetNames() PackedStringArray {
	return self.Runtime.RegEx_get_names(self)
}

type extendsRegExMatch struct {
	_ [0]*extendsRegExMatch
	class
}

func (self RegExMatch) RefCounted() RefCounted {
	var parent RefCounted
	parent.class = self.class
	return parent
}
func (self RegExMatch) GetSubject() string {
	return self.Runtime.RegExMatch_get_subject(self)
}
func (self RegExMatch) GetGroupCount() int64 {
	return self.Runtime.RegExMatch_get_group_count(self)
}
func (self RegExMatch) GetNames() Dictionary {
	return self.Runtime.RegExMatch_get_names(self)
}
func (self RegExMatch) GetStrings() PackedStringArray {
	return self.Runtime.RegExMatch_get_strings(self)
}
func (self RegExMatch) GetString(name any) string {
	return self.Runtime.RegExMatch_get_string(self, name)
}
func (self RegExMatch) GetStart(name any) int64 {
	return self.Runtime.RegExMatch_get_start(self, name)
}
func (self RegExMatch) GetEnd(name any) int64 {
	return self.Runtime.RegExMatch_get_end(self, name)
}

type extendsRemoteTransform2D struct {
	_ [0]*extendsRemoteTransform2D
	class
}

func (self RemoteTransform2D) Node2D() Node2D {
	var parent Node2D
	parent.class = self.class
	return parent
}
func (self RemoteTransform2D) SetRemoteNode(path NodePath) {
	self.Runtime.RemoteTransform2D_set_remote_node(self, path)
}
func (self RemoteTransform2D) GetRemoteNode() NodePath {
	return self.Runtime.RemoteTransform2D_get_remote_node(self)
}
func (self RemoteTransform2D) ForceUpdateCache() {
	self.Runtime.RemoteTransform2D_force_update_cache(self)
}
func (self RemoteTransform2D) SetUseGlobalCoordinates(use_global_coordinates bool) {
	self.Runtime.RemoteTransform2D_set_use_global_coordinates(self, use_global_coordinates)
}
func (self RemoteTransform2D) GetUseGlobalCoordinates() bool {
	return self.Runtime.RemoteTransform2D_get_use_global_coordinates(self)
}
func (self RemoteTransform2D) SetUpdatePosition(update_remote_position bool) {
	self.Runtime.RemoteTransform2D_set_update_position(self, update_remote_position)
}
func (self RemoteTransform2D) GetUpdatePosition() bool {
	return self.Runtime.RemoteTransform2D_get_update_position(self)
}
func (self RemoteTransform2D) SetUpdateRotation(update_remote_rotation bool) {
	self.Runtime.RemoteTransform2D_set_update_rotation(self, update_remote_rotation)
}
func (self RemoteTransform2D) GetUpdateRotation() bool {
	return self.Runtime.RemoteTransform2D_get_update_rotation(self)
}
func (self RemoteTransform2D) SetUpdateScale(update_remote_scale bool) {
	self.Runtime.RemoteTransform2D_set_update_scale(self, update_remote_scale)
}
func (self RemoteTransform2D) GetUpdateScale() bool {
	return self.Runtime.RemoteTransform2D_get_update_scale(self)
}

type extendsRemoteTransform3D struct {
	_ [0]*extendsRemoteTransform3D
	class
}

func (self RemoteTransform3D) Node3D() Node3D {
	var parent Node3D
	parent.class = self.class
	return parent
}
func (self RemoteTransform3D) SetRemoteNode(path NodePath) {
	self.Runtime.RemoteTransform3D_set_remote_node(self, path)
}
func (self RemoteTransform3D) GetRemoteNode() NodePath {
	return self.Runtime.RemoteTransform3D_get_remote_node(self)
}
func (self RemoteTransform3D) ForceUpdateCache() {
	self.Runtime.RemoteTransform3D_force_update_cache(self)
}
func (self RemoteTransform3D) SetUseGlobalCoordinates(use_global_coordinates bool) {
	self.Runtime.RemoteTransform3D_set_use_global_coordinates(self, use_global_coordinates)
}
func (self RemoteTransform3D) GetUseGlobalCoordinates() bool {
	return self.Runtime.RemoteTransform3D_get_use_global_coordinates(self)
}
func (self RemoteTransform3D) SetUpdatePosition(update_remote_position bool) {
	self.Runtime.RemoteTransform3D_set_update_position(self, update_remote_position)
}
func (self RemoteTransform3D) GetUpdatePosition() bool {
	return self.Runtime.RemoteTransform3D_get_update_position(self)
}
func (self RemoteTransform3D) SetUpdateRotation(update_remote_rotation bool) {
	self.Runtime.RemoteTransform3D_set_update_rotation(self, update_remote_rotation)
}
func (self RemoteTransform3D) GetUpdateRotation() bool {
	return self.Runtime.RemoteTransform3D_get_update_rotation(self)
}
func (self RemoteTransform3D) SetUpdateScale(update_remote_scale bool) {
	self.Runtime.RemoteTransform3D_set_update_scale(self, update_remote_scale)
}
func (self RemoteTransform3D) GetUpdateScale() bool {
	return self.Runtime.RemoteTransform3D_get_update_scale(self)
}

type extendsRenderSceneBuffers struct {
	_ [0]*extendsRenderSceneBuffers
	class
}

func (self RenderSceneBuffers) RefCounted() RefCounted {
	var parent RefCounted
	parent.class = self.class
	return parent
}
func (self RenderSceneBuffers) Configure(config RenderSceneBuffersConfiguration) {
	self.Runtime.RenderSceneBuffers_configure(self, config)
}

type extendsRenderSceneBuffersConfiguration struct {
	_ [0]*extendsRenderSceneBuffersConfiguration
	class
}

func (self RenderSceneBuffersConfiguration) RefCounted() RefCounted {
	var parent RefCounted
	parent.class = self.class
	return parent
}
func (self RenderSceneBuffersConfiguration) GetRenderTarget() RID {
	return self.Runtime.RenderSceneBuffersConfiguration_get_render_target(self)
}
func (self RenderSceneBuffersConfiguration) SetRenderTarget(render_target RID) {
	self.Runtime.RenderSceneBuffersConfiguration_set_render_target(self, render_target)
}
func (self RenderSceneBuffersConfiguration) GetInternalSize() Vector2i {
	return self.Runtime.RenderSceneBuffersConfiguration_get_internal_size(self)
}
func (self RenderSceneBuffersConfiguration) SetInternalSize(internal_size Vector2i) {
	self.Runtime.RenderSceneBuffersConfiguration_set_internal_size(self, internal_size)
}
func (self RenderSceneBuffersConfiguration) GetTargetSize() Vector2i {
	return self.Runtime.RenderSceneBuffersConfiguration_get_target_size(self)
}
func (self RenderSceneBuffersConfiguration) SetTargetSize(target_size Vector2i) {
	self.Runtime.RenderSceneBuffersConfiguration_set_target_size(self, target_size)
}
func (self RenderSceneBuffersConfiguration) GetViewCount() int64 {
	return self.Runtime.RenderSceneBuffersConfiguration_get_view_count(self)
}
func (self RenderSceneBuffersConfiguration) SetViewCount(view_count int64) {
	self.Runtime.RenderSceneBuffersConfiguration_set_view_count(self, view_count)
}
func (self RenderSceneBuffersConfiguration) GetScaling3dMode() RenderingServerViewportScaling3DMode {
	return self.Runtime.RenderSceneBuffersConfiguration_get_scaling_3d_mode(self)
}
func (self RenderSceneBuffersConfiguration) SetScaling3dMode(scaling_3d_mode RenderingServerViewportScaling3DMode) {
	self.Runtime.RenderSceneBuffersConfiguration_set_scaling_3d_mode(self, scaling_3d_mode)
}
func (self RenderSceneBuffersConfiguration) GetMsaa3d() RenderingServerViewportMSAA {
	return self.Runtime.RenderSceneBuffersConfiguration_get_msaa_3d(self)
}
func (self RenderSceneBuffersConfiguration) SetMsaa3d(msaa_3d RenderingServerViewportMSAA) {
	self.Runtime.RenderSceneBuffersConfiguration_set_msaa_3d(self, msaa_3d)
}
func (self RenderSceneBuffersConfiguration) GetScreenSpaceAa() RenderingServerViewportScreenSpaceAA {
	return self.Runtime.RenderSceneBuffersConfiguration_get_screen_space_aa(self)
}
func (self RenderSceneBuffersConfiguration) SetScreenSpaceAa(screen_space_aa RenderingServerViewportScreenSpaceAA) {
	self.Runtime.RenderSceneBuffersConfiguration_set_screen_space_aa(self, screen_space_aa)
}
func (self RenderSceneBuffersConfiguration) GetFsrSharpness() Float {
	return self.Runtime.RenderSceneBuffersConfiguration_get_fsr_sharpness(self)
}
func (self RenderSceneBuffersConfiguration) SetFsrSharpness(fsr_sharpness Float) {
	self.Runtime.RenderSceneBuffersConfiguration_set_fsr_sharpness(self, fsr_sharpness)
}
func (self RenderSceneBuffersConfiguration) GetTextureMipmapBias() Float {
	return self.Runtime.RenderSceneBuffersConfiguration_get_texture_mipmap_bias(self)
}
func (self RenderSceneBuffersConfiguration) SetTextureMipmapBias(texture_mipmap_bias Float) {
	self.Runtime.RenderSceneBuffersConfiguration_set_texture_mipmap_bias(self, texture_mipmap_bias)
}

type extendsRenderSceneBuffersExtension struct {
	_ [0]*extendsRenderSceneBuffersExtension
	class
}

func (self RenderSceneBuffersExtension) RenderSceneBuffers() RenderSceneBuffers {
	var parent RenderSceneBuffers
	parent.class = self.class
	return parent
}

type extendsRenderSceneBuffersRD struct {
	_ [0]*extendsRenderSceneBuffersRD
	class
}

func (self RenderSceneBuffersRD) RenderSceneBuffers() RenderSceneBuffers {
	var parent RenderSceneBuffers
	parent.class = self.class
	return parent
}
func (self RenderSceneBuffersRD) HasTexture(context string, name string) bool {
	return self.Runtime.RenderSceneBuffersRD_has_texture(self, context, name)
}
func (self RenderSceneBuffersRD) CreateTexture(context string, name string, data_format RenderingDeviceDataFormat, usage_bits int64, texture_samples RenderingDeviceTextureSamples, size Vector2i, layers int64, mipmaps int64, unique bool) RID {
	return self.Runtime.RenderSceneBuffersRD_create_texture(self, context, name, data_format, usage_bits, texture_samples, size, layers, mipmaps, unique)
}
func (self RenderSceneBuffersRD) CreateTextureFromFormat(context string, name string, format RDTextureFormat, view RDTextureView, unique bool) RID {
	return self.Runtime.RenderSceneBuffersRD_create_texture_from_format(self, context, name, format, view, unique)
}
func (self RenderSceneBuffersRD) CreateTextureView(context string, name string, view_name string, view RDTextureView) RID {
	return self.Runtime.RenderSceneBuffersRD_create_texture_view(self, context, name, view_name, view)
}
func (self RenderSceneBuffersRD) GetTexture(context string, name string) RID {
	return self.Runtime.RenderSceneBuffersRD_get_texture(self, context, name)
}
func (self RenderSceneBuffersRD) GetTextureFormat(context string, name string) RDTextureFormat {
	return self.Runtime.RenderSceneBuffersRD_get_texture_format(self, context, name)
}
func (self RenderSceneBuffersRD) GetTextureSlice(context string, name string, layer int64, mipmap int64, layers int64, mipmaps int64) RID {
	return self.Runtime.RenderSceneBuffersRD_get_texture_slice(self, context, name, layer, mipmap, layers, mipmaps)
}
func (self RenderSceneBuffersRD) GetTextureSliceView(context string, name string, layer int64, mipmap int64, layers int64, mipmaps int64, view RDTextureView) RID {
	return self.Runtime.RenderSceneBuffersRD_get_texture_slice_view(self, context, name, layer, mipmap, layers, mipmaps, view)
}
func (self RenderSceneBuffersRD) GetTextureSliceSize(context string, name string, mipmap int64) Vector2i {
	return self.Runtime.RenderSceneBuffersRD_get_texture_slice_size(self, context, name, mipmap)
}
func (self RenderSceneBuffersRD) ClearContext(context string) {
	self.Runtime.RenderSceneBuffersRD_clear_context(self, context)
}
func (self RenderSceneBuffersRD) GetColorTexture() RID {
	return self.Runtime.RenderSceneBuffersRD_get_color_texture(self)
}
func (self RenderSceneBuffersRD) GetColorLayer(layer int64) RID {
	return self.Runtime.RenderSceneBuffersRD_get_color_layer(self, layer)
}
func (self RenderSceneBuffersRD) GetDepthTexture() RID {
	return self.Runtime.RenderSceneBuffersRD_get_depth_texture(self)
}
func (self RenderSceneBuffersRD) GetDepthLayer(layer int64) RID {
	return self.Runtime.RenderSceneBuffersRD_get_depth_layer(self, layer)
}
func (self RenderSceneBuffersRD) GetVelocityTexture() RID {
	return self.Runtime.RenderSceneBuffersRD_get_velocity_texture(self)
}
func (self RenderSceneBuffersRD) GetVelocityLayer(layer int64) RID {
	return self.Runtime.RenderSceneBuffersRD_get_velocity_layer(self, layer)
}
func (self RenderSceneBuffersRD) GetRenderTarget() RID {
	return self.Runtime.RenderSceneBuffersRD_get_render_target(self)
}
func (self RenderSceneBuffersRD) GetViewCount() int64 {
	return self.Runtime.RenderSceneBuffersRD_get_view_count(self)
}
func (self RenderSceneBuffersRD) GetInternalSize() Vector2i {
	return self.Runtime.RenderSceneBuffersRD_get_internal_size(self)
}
func (self RenderSceneBuffersRD) GetUseTaa() bool {
	return self.Runtime.RenderSceneBuffersRD_get_use_taa(self)
}

type extendsRenderingDevice struct {
	_ [0]*extendsRenderingDevice
	class
}

func (self RenderingDevice) Object() Object {
	var parent Object
	parent.class = self.class
	return parent
}
func (self RenderingDevice) TextureCreate(format RDTextureFormat, view RDTextureView, data ArrayOf[PackedByteArray]) RID {
	return self.Runtime.RenderingDevice_texture_create(self, format, view, data)
}
func (self RenderingDevice) TextureCreateShared(view RDTextureView, with_texture RID) RID {
	return self.Runtime.RenderingDevice_texture_create_shared(self, view, with_texture)
}
func (self RenderingDevice) TextureCreateSharedFromSlice(view RDTextureView, with_texture RID, layer int64, mipmap int64, mipmaps int64, slice_type RenderingDeviceTextureSliceType) RID {
	return self.Runtime.RenderingDevice_texture_create_shared_from_slice(self, view, with_texture, layer, mipmap, mipmaps, slice_type)
}
func (self RenderingDevice) TextureCreateFromExtension(atype RenderingDeviceTextureType, format RenderingDeviceDataFormat, samples RenderingDeviceTextureSamples, usage_flags RenderingDeviceTextureUsageBits, image int64, width int64, height int64, depth int64, layers int64) RID {
	return self.Runtime.RenderingDevice_texture_create_from_extension(self, atype, format, samples, usage_flags, image, width, height, depth, layers)
}
func (self RenderingDevice) TextureUpdate(texture RID, layer int64, data PackedByteArray, post_barrier RenderingDeviceBarrierMask) int64 {
	return self.Runtime.RenderingDevice_texture_update(self, texture, layer, data, post_barrier)
}
func (self RenderingDevice) TextureGetData(texture RID, layer int64) PackedByteArray {
	return self.Runtime.RenderingDevice_texture_get_data(self, texture, layer)
}
func (self RenderingDevice) TextureIsFormatSupportedForUsage(format RenderingDeviceDataFormat, usage_flags RenderingDeviceTextureUsageBits) bool {
	return self.Runtime.RenderingDevice_texture_is_format_supported_for_usage(self, format, usage_flags)
}
func (self RenderingDevice) TextureIsShared(texture RID) bool {
	return self.Runtime.RenderingDevice_texture_is_shared(self, texture)
}
func (self RenderingDevice) TextureIsValid(texture RID) bool {
	return self.Runtime.RenderingDevice_texture_is_valid(self, texture)
}
func (self RenderingDevice) TextureCopy(from_texture RID, to_texture RID, from_pos Vector3, to_pos Vector3, size Vector3, src_mipmap int64, dst_mipmap int64, src_layer int64, dst_layer int64, post_barrier RenderingDeviceBarrierMask) int64 {
	return self.Runtime.RenderingDevice_texture_copy(self, from_texture, to_texture, from_pos, to_pos, size, src_mipmap, dst_mipmap, src_layer, dst_layer, post_barrier)
}
func (self RenderingDevice) TextureClear(texture RID, color Color, base_mipmap int64, mipmap_count int64, base_layer int64, layer_count int64, post_barrier RenderingDeviceBarrierMask) int64 {
	return self.Runtime.RenderingDevice_texture_clear(self, texture, color, base_mipmap, mipmap_count, base_layer, layer_count, post_barrier)
}
func (self RenderingDevice) TextureResolveMultisample(from_texture RID, to_texture RID, post_barrier RenderingDeviceBarrierMask) int64 {
	return self.Runtime.RenderingDevice_texture_resolve_multisample(self, from_texture, to_texture, post_barrier)
}
func (self RenderingDevice) TextureGetFormat(texture RID) RDTextureFormat {
	return self.Runtime.RenderingDevice_texture_get_format(self, texture)
}
func (self RenderingDevice) TextureGetNativeHandle(texture RID) int64 {
	return self.Runtime.RenderingDevice_texture_get_native_handle(self, texture)
}
func (self RenderingDevice) FramebufferFormatCreate(attachments ArrayOf[RDAttachmentFormat], view_count int64) int64 {
	return self.Runtime.RenderingDevice_framebuffer_format_create(self, attachments, view_count)
}
func (self RenderingDevice) FramebufferFormatCreateMultipass(attachments ArrayOf[RDAttachmentFormat], passes ArrayOf[RDFramebufferPass], view_count int64) int64 {
	return self.Runtime.RenderingDevice_framebuffer_format_create_multipass(self, attachments, passes, view_count)
}
func (self RenderingDevice) FramebufferFormatCreateEmpty(samples RenderingDeviceTextureSamples) int64 {
	return self.Runtime.RenderingDevice_framebuffer_format_create_empty(self, samples)
}
func (self RenderingDevice) FramebufferFormatGetTextureSamples(format int64, render_pass int64) RenderingDeviceTextureSamples {
	return self.Runtime.RenderingDevice_framebuffer_format_get_texture_samples(self, format, render_pass)
}
func (self RenderingDevice) FramebufferCreate(textures ArrayOf[RID], validate_with_format int64, view_count int64) RID {
	return self.Runtime.RenderingDevice_framebuffer_create(self, textures, validate_with_format, view_count)
}
func (self RenderingDevice) FramebufferCreateMultipass(textures ArrayOf[RID], passes ArrayOf[RDFramebufferPass], validate_with_format int64, view_count int64) RID {
	return self.Runtime.RenderingDevice_framebuffer_create_multipass(self, textures, passes, validate_with_format, view_count)
}
func (self RenderingDevice) FramebufferCreateEmpty(size Vector2i, samples RenderingDeviceTextureSamples, validate_with_format int64) RID {
	return self.Runtime.RenderingDevice_framebuffer_create_empty(self, size, samples, validate_with_format)
}
func (self RenderingDevice) FramebufferGetFormat(framebuffer RID) int64 {
	return self.Runtime.RenderingDevice_framebuffer_get_format(self, framebuffer)
}
func (self RenderingDevice) FramebufferIsValid(framebuffer RID) bool {
	return self.Runtime.RenderingDevice_framebuffer_is_valid(self, framebuffer)
}
func (self RenderingDevice) SamplerCreate(state RDSamplerState) RID {
	return self.Runtime.RenderingDevice_sampler_create(self, state)
}
func (self RenderingDevice) SamplerIsFormatSupportedForFilter(format RenderingDeviceDataFormat, sampler_filter RenderingDeviceSamplerFilter) bool {
	return self.Runtime.RenderingDevice_sampler_is_format_supported_for_filter(self, format, sampler_filter)
}
func (self RenderingDevice) VertexBufferCreate(size_bytes int64, data PackedByteArray, use_as_storage bool) RID {
	return self.Runtime.RenderingDevice_vertex_buffer_create(self, size_bytes, data, use_as_storage)
}
func (self RenderingDevice) VertexFormatCreate(vertex_descriptions ArrayOf[RDVertexAttribute]) int64 {
	return self.Runtime.RenderingDevice_vertex_format_create(self, vertex_descriptions)
}
func (self RenderingDevice) VertexArrayCreate(vertex_count int64, vertex_format int64, src_buffers ArrayOf[RID], offsets PackedInt64Array) RID {
	return self.Runtime.RenderingDevice_vertex_array_create(self, vertex_count, vertex_format, src_buffers, offsets)
}
func (self RenderingDevice) IndexBufferCreate(size_indices int64, format RenderingDeviceIndexBufferFormat, data PackedByteArray, use_restart_indices bool) RID {
	return self.Runtime.RenderingDevice_index_buffer_create(self, size_indices, format, data, use_restart_indices)
}
func (self RenderingDevice) IndexArrayCreate(index_buffer RID, index_offset int64, index_count int64) RID {
	return self.Runtime.RenderingDevice_index_array_create(self, index_buffer, index_offset, index_count)
}
func (self RenderingDevice) ShaderCompileSpirvFromSource(shader_source RDShaderSource, allow_cache bool) RDShaderSPIRV {
	return self.Runtime.RenderingDevice_shader_compile_spirv_from_source(self, shader_source, allow_cache)
}
func (self RenderingDevice) ShaderCompileBinaryFromSpirv(spirv_data RDShaderSPIRV, name string) PackedByteArray {
	return self.Runtime.RenderingDevice_shader_compile_binary_from_spirv(self, spirv_data, name)
}
func (self RenderingDevice) ShaderCreateFromSpirv(spirv_data RDShaderSPIRV, name string) RID {
	return self.Runtime.RenderingDevice_shader_create_from_spirv(self, spirv_data, name)
}
func (self RenderingDevice) ShaderCreateFromBytecode(binary_data PackedByteArray, placeholder_rid RID) RID {
	return self.Runtime.RenderingDevice_shader_create_from_bytecode(self, binary_data, placeholder_rid)
}
func (self RenderingDevice) ShaderCreatePlaceholder() RID {
	return self.Runtime.RenderingDevice_shader_create_placeholder(self)
}
func (self RenderingDevice) ShaderGetVertexInputAttributeMask(shader RID) int64 {
	return self.Runtime.RenderingDevice_shader_get_vertex_input_attribute_mask(self, shader)
}
func (self RenderingDevice) UniformBufferCreate(size_bytes int64, data PackedByteArray) RID {
	return self.Runtime.RenderingDevice_uniform_buffer_create(self, size_bytes, data)
}
func (self RenderingDevice) StorageBufferCreate(size_bytes int64, data PackedByteArray, usage RenderingDeviceStorageBufferUsage) RID {
	return self.Runtime.RenderingDevice_storage_buffer_create(self, size_bytes, data, usage)
}
func (self RenderingDevice) TextureBufferCreate(size_bytes int64, format RenderingDeviceDataFormat, data PackedByteArray) RID {
	return self.Runtime.RenderingDevice_texture_buffer_create(self, size_bytes, format, data)
}
func (self RenderingDevice) UniformSetCreate(uniforms ArrayOf[RDUniform], shader RID, shader_set int64) RID {
	return self.Runtime.RenderingDevice_uniform_set_create(self, uniforms, shader, shader_set)
}
func (self RenderingDevice) UniformSetIsValid(uniform_set RID) bool {
	return self.Runtime.RenderingDevice_uniform_set_is_valid(self, uniform_set)
}
func (self RenderingDevice) BufferUpdate(buffer RID, offset int64, size_bytes int64, data PackedByteArray, post_barrier RenderingDeviceBarrierMask) int64 {
	return self.Runtime.RenderingDevice_buffer_update(self, buffer, offset, size_bytes, data, post_barrier)
}
func (self RenderingDevice) BufferClear(buffer RID, offset int64, size_bytes int64, post_barrier RenderingDeviceBarrierMask) int64 {
	return self.Runtime.RenderingDevice_buffer_clear(self, buffer, offset, size_bytes, post_barrier)
}
func (self RenderingDevice) BufferGetData(buffer RID, offset_bytes int64, size_bytes int64) PackedByteArray {
	return self.Runtime.RenderingDevice_buffer_get_data(self, buffer, offset_bytes, size_bytes)
}
func (self RenderingDevice) RenderPipelineCreate(shader RID, framebuffer_format int64, vertex_format int64, primitive RenderingDeviceRenderPrimitive, rasterization_state RDPipelineRasterizationState, multisample_state RDPipelineMultisampleState, stencil_state RDPipelineDepthStencilState, color_blend_state RDPipelineColorBlendState, dynamic_state_flags RenderingDevicePipelineDynamicStateFlags, for_render_pass int64, specialization_constants ArrayOf[RDPipelineSpecializationConstant]) RID {
	return self.Runtime.RenderingDevice_render_pipeline_create(self, shader, framebuffer_format, vertex_format, primitive, rasterization_state, multisample_state, stencil_state, color_blend_state, dynamic_state_flags, for_render_pass, specialization_constants)
}
func (self RenderingDevice) RenderPipelineIsValid(render_pipeline RID) bool {
	return self.Runtime.RenderingDevice_render_pipeline_is_valid(self, render_pipeline)
}
func (self RenderingDevice) ComputePipelineCreate(shader RID, specialization_constants ArrayOf[RDPipelineSpecializationConstant]) RID {
	return self.Runtime.RenderingDevice_compute_pipeline_create(self, shader, specialization_constants)
}
func (self RenderingDevice) ComputePipelineIsValid(compute_pipeline RID) bool {
	return self.Runtime.RenderingDevice_compute_pipeline_is_valid(self, compute_pipeline)
}
func (self RenderingDevice) ScreenGetWidth(screen int64) int64 {
	return self.Runtime.RenderingDevice_screen_get_width(self, screen)
}
func (self RenderingDevice) ScreenGetHeight(screen int64) int64 {
	return self.Runtime.RenderingDevice_screen_get_height(self, screen)
}
func (self RenderingDevice) ScreenGetFramebufferFormat() int64 {
	return self.Runtime.RenderingDevice_screen_get_framebuffer_format(self)
}
func (self RenderingDevice) DrawListBeginForScreen(screen int64, clear_color Color) int64 {
	return self.Runtime.RenderingDevice_draw_list_begin_for_screen(self, screen, clear_color)
}
func (self RenderingDevice) DrawListBegin(framebuffer RID, initial_color_action RenderingDeviceInitialAction, final_color_action RenderingDeviceFinalAction, initial_depth_action RenderingDeviceInitialAction, final_depth_action RenderingDeviceFinalAction, clear_color_values PackedColorArray, clear_depth Float, clear_stencil int64, region Rect2, storage_textures ArrayOf[RID]) int64 {
	return self.Runtime.RenderingDevice_draw_list_begin(self, framebuffer, initial_color_action, final_color_action, initial_depth_action, final_depth_action, clear_color_values, clear_depth, clear_stencil, region, storage_textures)
}
func (self RenderingDevice) DrawListBeginSplit(framebuffer RID, splits int64, initial_color_action RenderingDeviceInitialAction, final_color_action RenderingDeviceFinalAction, initial_depth_action RenderingDeviceInitialAction, final_depth_action RenderingDeviceFinalAction, clear_color_values PackedColorArray, clear_depth Float, clear_stencil int64, region Rect2, storage_textures ArrayOf[RID]) PackedInt64Array {
	return self.Runtime.RenderingDevice_draw_list_begin_split(self, framebuffer, splits, initial_color_action, final_color_action, initial_depth_action, final_depth_action, clear_color_values, clear_depth, clear_stencil, region, storage_textures)
}
func (self RenderingDevice) DrawListSetBlendConstants(draw_list int64, color Color) {
	self.Runtime.RenderingDevice_draw_list_set_blend_constants(self, draw_list, color)
}
func (self RenderingDevice) DrawListBindRenderPipeline(draw_list int64, render_pipeline RID) {
	self.Runtime.RenderingDevice_draw_list_bind_render_pipeline(self, draw_list, render_pipeline)
}
func (self RenderingDevice) DrawListBindUniformSet(draw_list int64, uniform_set RID, set_index int64) {
	self.Runtime.RenderingDevice_draw_list_bind_uniform_set(self, draw_list, uniform_set, set_index)
}
func (self RenderingDevice) DrawListBindVertexArray(draw_list int64, vertex_array RID) {
	self.Runtime.RenderingDevice_draw_list_bind_vertex_array(self, draw_list, vertex_array)
}
func (self RenderingDevice) DrawListBindIndexArray(draw_list int64, index_array RID) {
	self.Runtime.RenderingDevice_draw_list_bind_index_array(self, draw_list, index_array)
}
func (self RenderingDevice) DrawListSetPushConstant(draw_list int64, buffer PackedByteArray, size_bytes int64) {
	self.Runtime.RenderingDevice_draw_list_set_push_constant(self, draw_list, buffer, size_bytes)
}
func (self RenderingDevice) DrawListDraw(draw_list int64, use_indices bool, instances int64, procedural_vertex_count int64) {
	self.Runtime.RenderingDevice_draw_list_draw(self, draw_list, use_indices, instances, procedural_vertex_count)
}
func (self RenderingDevice) DrawListEnableScissor(draw_list int64, rect Rect2) {
	self.Runtime.RenderingDevice_draw_list_enable_scissor(self, draw_list, rect)
}
func (self RenderingDevice) DrawListDisableScissor(draw_list int64) {
	self.Runtime.RenderingDevice_draw_list_disable_scissor(self, draw_list)
}
func (self RenderingDevice) DrawListSwitchToNextPass() int64 {
	return self.Runtime.RenderingDevice_draw_list_switch_to_next_pass(self)
}
func (self RenderingDevice) DrawListSwitchToNextPassSplit(splits int64) PackedInt64Array {
	return self.Runtime.RenderingDevice_draw_list_switch_to_next_pass_split(self, splits)
}
func (self RenderingDevice) DrawListEnd(post_barrier RenderingDeviceBarrierMask) {
	self.Runtime.RenderingDevice_draw_list_end(self, post_barrier)
}
func (self RenderingDevice) ComputeListBegin(allow_draw_overlap bool) int64 {
	return self.Runtime.RenderingDevice_compute_list_begin(self, allow_draw_overlap)
}
func (self RenderingDevice) ComputeListBindComputePipeline(compute_list int64, compute_pipeline RID) {
	self.Runtime.RenderingDevice_compute_list_bind_compute_pipeline(self, compute_list, compute_pipeline)
}
func (self RenderingDevice) ComputeListSetPushConstant(compute_list int64, buffer PackedByteArray, size_bytes int64) {
	self.Runtime.RenderingDevice_compute_list_set_push_constant(self, compute_list, buffer, size_bytes)
}
func (self RenderingDevice) ComputeListBindUniformSet(compute_list int64, uniform_set RID, set_index int64) {
	self.Runtime.RenderingDevice_compute_list_bind_uniform_set(self, compute_list, uniform_set, set_index)
}
func (self RenderingDevice) ComputeListDispatch(compute_list int64, x_groups int64, y_groups int64, z_groups int64) {
	self.Runtime.RenderingDevice_compute_list_dispatch(self, compute_list, x_groups, y_groups, z_groups)
}
func (self RenderingDevice) ComputeListAddBarrier(compute_list int64) {
	self.Runtime.RenderingDevice_compute_list_add_barrier(self, compute_list)
}
func (self RenderingDevice) ComputeListEnd(post_barrier RenderingDeviceBarrierMask) {
	self.Runtime.RenderingDevice_compute_list_end(self, post_barrier)
}
func (self RenderingDevice) FreeRid(rid RID) {
	self.Runtime.RenderingDevice_free_rid(self, rid)
}
func (self RenderingDevice) CaptureTimestamp(name string) {
	self.Runtime.RenderingDevice_capture_timestamp(self, name)
}
func (self RenderingDevice) GetCapturedTimestampsCount() int64 {
	return self.Runtime.RenderingDevice_get_captured_timestamps_count(self)
}
func (self RenderingDevice) GetCapturedTimestampsFrame() int64 {
	return self.Runtime.RenderingDevice_get_captured_timestamps_frame(self)
}
func (self RenderingDevice) GetCapturedTimestampGpuTime(index int64) int64 {
	return self.Runtime.RenderingDevice_get_captured_timestamp_gpu_time(self, index)
}
func (self RenderingDevice) GetCapturedTimestampCpuTime(index int64) int64 {
	return self.Runtime.RenderingDevice_get_captured_timestamp_cpu_time(self, index)
}
func (self RenderingDevice) GetCapturedTimestampName(index int64) string {
	return self.Runtime.RenderingDevice_get_captured_timestamp_name(self, index)
}
func (self RenderingDevice) LimitGet(limit RenderingDeviceLimit) int64 {
	return self.Runtime.RenderingDevice_limit_get(self, limit)
}
func (self RenderingDevice) GetFrameDelay() int64 {
	return self.Runtime.RenderingDevice_get_frame_delay(self)
}
func (self RenderingDevice) Submit() {
	self.Runtime.RenderingDevice_submit(self)
}
func (self RenderingDevice) Sync() {
	self.Runtime.RenderingDevice_sync(self)
}
func (self RenderingDevice) Barrier(from RenderingDeviceBarrierMask, to RenderingDeviceBarrierMask) {
	self.Runtime.RenderingDevice_barrier(self, from, to)
}
func (self RenderingDevice) FullBarrier() {
	self.Runtime.RenderingDevice_full_barrier(self)
}
func (self RenderingDevice) CreateLocalDevice() RenderingDevice {
	return self.Runtime.RenderingDevice_create_local_device(self)
}
func (self RenderingDevice) SetResourceName(id RID, name string) {
	self.Runtime.RenderingDevice_set_resource_name(self, id, name)
}
func (self RenderingDevice) DrawCommandBeginLabel(name string, color Color) {
	self.Runtime.RenderingDevice_draw_command_begin_label(self, name, color)
}
func (self RenderingDevice) DrawCommandInsertLabel(name string, color Color) {
	self.Runtime.RenderingDevice_draw_command_insert_label(self, name, color)
}
func (self RenderingDevice) DrawCommandEndLabel() {
	self.Runtime.RenderingDevice_draw_command_end_label(self)
}
func (self RenderingDevice) GetDeviceVendorName() string {
	return self.Runtime.RenderingDevice_get_device_vendor_name(self)
}
func (self RenderingDevice) GetDeviceName() string {
	return self.Runtime.RenderingDevice_get_device_name(self)
}
func (self RenderingDevice) GetDevicePipelineCacheUuid() string {
	return self.Runtime.RenderingDevice_get_device_pipeline_cache_uuid(self)
}
func (self RenderingDevice) GetMemoryUsage(atype RenderingDeviceMemoryType) int64 {
	return self.Runtime.RenderingDevice_get_memory_usage(self, atype)
}
func (self RenderingDevice) GetDriverResource(resource RenderingDeviceDriverResource, rid RID, index int64) int64 {
	return self.Runtime.RenderingDevice_get_driver_resource(self, resource, rid, index)
}

type extendsRenderingServer struct {
	_ [0]*extendsRenderingServer
	class
}

func (self RenderingServer) Object() Object {
	var parent Object
	parent.class = self.class
	return parent
}
func (self RenderingServer) Texture2dCreate(image Image) RID {
	return self.Runtime.RenderingServer_texture_2d_create(self, image)
}
func (self RenderingServer) Texture2dLayeredCreate(layers ArrayOf[Image], layered_type RenderingServerTextureLayeredType) RID {
	return self.Runtime.RenderingServer_texture_2d_layered_create(self, layers, layered_type)
}
func (self RenderingServer) Texture3dCreate(format ImageFormat, width int64, height int64, depth int64, mipmaps bool, data ArrayOf[Image]) RID {
	return self.Runtime.RenderingServer_texture_3d_create(self, format, width, height, depth, mipmaps, data)
}
func (self RenderingServer) TextureProxyCreate(base RID) RID {
	return self.Runtime.RenderingServer_texture_proxy_create(self, base)
}
func (self RenderingServer) Texture2dUpdate(texture RID, image Image, layer int64) {
	self.Runtime.RenderingServer_texture_2d_update(self, texture, image, layer)
}
func (self RenderingServer) Texture3dUpdate(texture RID, data ArrayOf[Image]) {
	self.Runtime.RenderingServer_texture_3d_update(self, texture, data)
}
func (self RenderingServer) TextureProxyUpdate(texture RID, proxy_to RID) {
	self.Runtime.RenderingServer_texture_proxy_update(self, texture, proxy_to)
}
func (self RenderingServer) Texture2dPlaceholderCreate() RID {
	return self.Runtime.RenderingServer_texture_2d_placeholder_create(self)
}
func (self RenderingServer) Texture2dLayeredPlaceholderCreate(layered_type RenderingServerTextureLayeredType) RID {
	return self.Runtime.RenderingServer_texture_2d_layered_placeholder_create(self, layered_type)
}
func (self RenderingServer) Texture3dPlaceholderCreate() RID {
	return self.Runtime.RenderingServer_texture_3d_placeholder_create(self)
}
func (self RenderingServer) Texture2dGet(texture RID) Image {
	return self.Runtime.RenderingServer_texture_2d_get(self, texture)
}
func (self RenderingServer) Texture2dLayerGet(texture RID, layer int64) Image {
	return self.Runtime.RenderingServer_texture_2d_layer_get(self, texture, layer)
}
func (self RenderingServer) Texture3dGet(texture RID) ArrayOf[Image] {
	return self.Runtime.RenderingServer_texture_3d_get(self, texture)
}
func (self RenderingServer) TextureReplace(texture RID, by_texture RID) {
	self.Runtime.RenderingServer_texture_replace(self, texture, by_texture)
}
func (self RenderingServer) TextureSetSizeOverride(texture RID, width int64, height int64) {
	self.Runtime.RenderingServer_texture_set_size_override(self, texture, width, height)
}
func (self RenderingServer) TextureSetPath(texture RID, path string) {
	self.Runtime.RenderingServer_texture_set_path(self, texture, path)
}
func (self RenderingServer) TextureGetPath(texture RID) string {
	return self.Runtime.RenderingServer_texture_get_path(self, texture)
}
func (self RenderingServer) TextureGetFormat(texture RID) ImageFormat {
	return self.Runtime.RenderingServer_texture_get_format(self, texture)
}
func (self RenderingServer) TextureSetForceRedrawIfVisible(texture RID, enable bool) {
	self.Runtime.RenderingServer_texture_set_force_redraw_if_visible(self, texture, enable)
}
func (self RenderingServer) TextureRdCreate(rd_texture RID, layer_type RenderingServerTextureLayeredType) RID {
	return self.Runtime.RenderingServer_texture_rd_create(self, rd_texture, layer_type)
}
func (self RenderingServer) TextureGetRdTexture(texture RID, srgb bool) RID {
	return self.Runtime.RenderingServer_texture_get_rd_texture(self, texture, srgb)
}
func (self RenderingServer) TextureGetNativeHandle(texture RID, srgb bool) int64 {
	return self.Runtime.RenderingServer_texture_get_native_handle(self, texture, srgb)
}
func (self RenderingServer) ShaderCreate() RID {
	return self.Runtime.RenderingServer_shader_create(self)
}
func (self RenderingServer) ShaderSetCode(shader RID, code string) {
	self.Runtime.RenderingServer_shader_set_code(self, shader, code)
}
func (self RenderingServer) ShaderSetPathHint(shader RID, path string) {
	self.Runtime.RenderingServer_shader_set_path_hint(self, shader, path)
}
func (self RenderingServer) ShaderGetCode(shader RID) string {
	return self.Runtime.RenderingServer_shader_get_code(self, shader)
}
func (self RenderingServer) GetShaderParameterList(shader RID) ArrayOf[Dictionary] {
	return self.Runtime.RenderingServer_get_shader_parameter_list(self, shader)
}
func (self RenderingServer) ShaderGetParameterDefault(shader RID, name string) any {
	return self.Runtime.RenderingServer_shader_get_parameter_default(self, shader, name)
}
func (self RenderingServer) ShaderSetDefaultTextureParameter(shader RID, name string, texture RID, index int64) {
	self.Runtime.RenderingServer_shader_set_default_texture_parameter(self, shader, name, texture, index)
}
func (self RenderingServer) ShaderGetDefaultTextureParameter(shader RID, name string, index int64) RID {
	return self.Runtime.RenderingServer_shader_get_default_texture_parameter(self, shader, name, index)
}
func (self RenderingServer) MaterialCreate() RID {
	return self.Runtime.RenderingServer_material_create(self)
}
func (self RenderingServer) MaterialSetShader(shader_material RID, shader RID) {
	self.Runtime.RenderingServer_material_set_shader(self, shader_material, shader)
}
func (self RenderingServer) MaterialSetParam(material RID, parameter string, value any) {
	self.Runtime.RenderingServer_material_set_param(self, material, parameter, value)
}
func (self RenderingServer) MaterialGetParam(material RID, parameter string) any {
	return self.Runtime.RenderingServer_material_get_param(self, material, parameter)
}
func (self RenderingServer) MaterialSetRenderPriority(material RID, priority int64) {
	self.Runtime.RenderingServer_material_set_render_priority(self, material, priority)
}
func (self RenderingServer) MaterialSetNextPass(material RID, next_material RID) {
	self.Runtime.RenderingServer_material_set_next_pass(self, material, next_material)
}
func (self RenderingServer) MeshCreateFromSurfaces(surfaces ArrayOf[Dictionary], blend_shape_count int64) RID {
	return self.Runtime.RenderingServer_mesh_create_from_surfaces(self, surfaces, blend_shape_count)
}
func (self RenderingServer) MeshCreate() RID {
	return self.Runtime.RenderingServer_mesh_create(self)
}
func (self RenderingServer) MeshSurfaceGetFormatOffset(format RenderingServerArrayFormat, vertex_count int64, array_index int64) int64 {
	return self.Runtime.RenderingServer_mesh_surface_get_format_offset(self, format, vertex_count, array_index)
}
func (self RenderingServer) MeshSurfaceGetFormatVertexStride(format RenderingServerArrayFormat, vertex_count int64) int64 {
	return self.Runtime.RenderingServer_mesh_surface_get_format_vertex_stride(self, format, vertex_count)
}
func (self RenderingServer) MeshSurfaceGetFormatNormalTangentStride(format RenderingServerArrayFormat, vertex_count int64) int64 {
	return self.Runtime.RenderingServer_mesh_surface_get_format_normal_tangent_stride(self, format, vertex_count)
}
func (self RenderingServer) MeshSurfaceGetFormatAttributeStride(format RenderingServerArrayFormat, vertex_count int64) int64 {
	return self.Runtime.RenderingServer_mesh_surface_get_format_attribute_stride(self, format, vertex_count)
}
func (self RenderingServer) MeshSurfaceGetFormatSkinStride(format RenderingServerArrayFormat, vertex_count int64) int64 {
	return self.Runtime.RenderingServer_mesh_surface_get_format_skin_stride(self, format, vertex_count)
}
func (self RenderingServer) MeshAddSurface(mesh RID, surface Dictionary) {
	self.Runtime.RenderingServer_mesh_add_surface(self, mesh, surface)
}
func (self RenderingServer) MeshAddSurfaceFromArrays(mesh RID, primitive RenderingServerPrimitiveType, arrays Array, blend_shapes Array, lods Dictionary, compress_format RenderingServerArrayFormat) {
	self.Runtime.RenderingServer_mesh_add_surface_from_arrays(self, mesh, primitive, arrays, blend_shapes, lods, compress_format)
}
func (self RenderingServer) MeshGetBlendShapeCount(mesh RID) int64 {
	return self.Runtime.RenderingServer_mesh_get_blend_shape_count(self, mesh)
}
func (self RenderingServer) MeshSetBlendShapeMode(mesh RID, mode RenderingServerBlendShapeMode) {
	self.Runtime.RenderingServer_mesh_set_blend_shape_mode(self, mesh, mode)
}
func (self RenderingServer) MeshGetBlendShapeMode(mesh RID) RenderingServerBlendShapeMode {
	return self.Runtime.RenderingServer_mesh_get_blend_shape_mode(self, mesh)
}
func (self RenderingServer) MeshSurfaceSetMaterial(mesh RID, surface int64, material RID) {
	self.Runtime.RenderingServer_mesh_surface_set_material(self, mesh, surface, material)
}
func (self RenderingServer) MeshSurfaceGetMaterial(mesh RID, surface int64) RID {
	return self.Runtime.RenderingServer_mesh_surface_get_material(self, mesh, surface)
}
func (self RenderingServer) MeshGetSurface(mesh RID, surface int64) Dictionary {
	return self.Runtime.RenderingServer_mesh_get_surface(self, mesh, surface)
}
func (self RenderingServer) MeshSurfaceGetArrays(mesh RID, surface int64) Array {
	return self.Runtime.RenderingServer_mesh_surface_get_arrays(self, mesh, surface)
}
func (self RenderingServer) MeshSurfaceGetBlendShapeArrays(mesh RID, surface int64) ArrayOf[Array] {
	return self.Runtime.RenderingServer_mesh_surface_get_blend_shape_arrays(self, mesh, surface)
}
func (self RenderingServer) MeshGetSurfaceCount(mesh RID) int64 {
	return self.Runtime.RenderingServer_mesh_get_surface_count(self, mesh)
}
func (self RenderingServer) MeshSetCustomAabb(mesh RID, aabb AABB) {
	self.Runtime.RenderingServer_mesh_set_custom_aabb(self, mesh, aabb)
}
func (self RenderingServer) MeshGetCustomAabb(mesh RID) AABB {
	return self.Runtime.RenderingServer_mesh_get_custom_aabb(self, mesh)
}
func (self RenderingServer) MeshClear(mesh RID) {
	self.Runtime.RenderingServer_mesh_clear(self, mesh)
}
func (self RenderingServer) MeshSurfaceUpdateVertexRegion(mesh RID, surface int64, offset int64, data PackedByteArray) {
	self.Runtime.RenderingServer_mesh_surface_update_vertex_region(self, mesh, surface, offset, data)
}
func (self RenderingServer) MeshSurfaceUpdateAttributeRegion(mesh RID, surface int64, offset int64, data PackedByteArray) {
	self.Runtime.RenderingServer_mesh_surface_update_attribute_region(self, mesh, surface, offset, data)
}
func (self RenderingServer) MeshSurfaceUpdateSkinRegion(mesh RID, surface int64, offset int64, data PackedByteArray) {
	self.Runtime.RenderingServer_mesh_surface_update_skin_region(self, mesh, surface, offset, data)
}
func (self RenderingServer) MeshSetShadowMesh(mesh RID, shadow_mesh RID) {
	self.Runtime.RenderingServer_mesh_set_shadow_mesh(self, mesh, shadow_mesh)
}
func (self RenderingServer) MultimeshCreate() RID {
	return self.Runtime.RenderingServer_multimesh_create(self)
}
func (self RenderingServer) MultimeshAllocateData(multimesh RID, instances int64, transform_format RenderingServerMultimeshTransformFormat, color_format bool, custom_data_format bool) {
	self.Runtime.RenderingServer_multimesh_allocate_data(self, multimesh, instances, transform_format, color_format, custom_data_format)
}
func (self RenderingServer) MultimeshGetInstanceCount(multimesh RID) int64 {
	return self.Runtime.RenderingServer_multimesh_get_instance_count(self, multimesh)
}
func (self RenderingServer) MultimeshSetMesh(multimesh RID, mesh RID) {
	self.Runtime.RenderingServer_multimesh_set_mesh(self, multimesh, mesh)
}
func (self RenderingServer) MultimeshInstanceSetTransform(multimesh RID, index int64, transform Transform3D) {
	self.Runtime.RenderingServer_multimesh_instance_set_transform(self, multimesh, index, transform)
}
func (self RenderingServer) MultimeshInstanceSetTransform2d(multimesh RID, index int64, transform Transform2D) {
	self.Runtime.RenderingServer_multimesh_instance_set_transform_2d(self, multimesh, index, transform)
}
func (self RenderingServer) MultimeshInstanceSetColor(multimesh RID, index int64, color Color) {
	self.Runtime.RenderingServer_multimesh_instance_set_color(self, multimesh, index, color)
}
func (self RenderingServer) MultimeshInstanceSetCustomData(multimesh RID, index int64, custom_data Color) {
	self.Runtime.RenderingServer_multimesh_instance_set_custom_data(self, multimesh, index, custom_data)
}
func (self RenderingServer) MultimeshGetMesh(multimesh RID) RID {
	return self.Runtime.RenderingServer_multimesh_get_mesh(self, multimesh)
}
func (self RenderingServer) MultimeshGetAabb(multimesh RID) AABB {
	return self.Runtime.RenderingServer_multimesh_get_aabb(self, multimesh)
}
func (self RenderingServer) MultimeshInstanceGetTransform(multimesh RID, index int64) Transform3D {
	return self.Runtime.RenderingServer_multimesh_instance_get_transform(self, multimesh, index)
}
func (self RenderingServer) MultimeshInstanceGetTransform2d(multimesh RID, index int64) Transform2D {
	return self.Runtime.RenderingServer_multimesh_instance_get_transform_2d(self, multimesh, index)
}
func (self RenderingServer) MultimeshInstanceGetColor(multimesh RID, index int64) Color {
	return self.Runtime.RenderingServer_multimesh_instance_get_color(self, multimesh, index)
}
func (self RenderingServer) MultimeshInstanceGetCustomData(multimesh RID, index int64) Color {
	return self.Runtime.RenderingServer_multimesh_instance_get_custom_data(self, multimesh, index)
}
func (self RenderingServer) MultimeshSetVisibleInstances(multimesh RID, visible int64) {
	self.Runtime.RenderingServer_multimesh_set_visible_instances(self, multimesh, visible)
}
func (self RenderingServer) MultimeshGetVisibleInstances(multimesh RID) int64 {
	return self.Runtime.RenderingServer_multimesh_get_visible_instances(self, multimesh)
}
func (self RenderingServer) MultimeshSetBuffer(multimesh RID, buffer PackedFloat32Array) {
	self.Runtime.RenderingServer_multimesh_set_buffer(self, multimesh, buffer)
}
func (self RenderingServer) MultimeshGetBuffer(multimesh RID) PackedFloat32Array {
	return self.Runtime.RenderingServer_multimesh_get_buffer(self, multimesh)
}
func (self RenderingServer) SkeletonCreate() RID {
	return self.Runtime.RenderingServer_skeleton_create(self)
}
func (self RenderingServer) SkeletonAllocateData(skeleton RID, bones int64, is_2d_skeleton bool) {
	self.Runtime.RenderingServer_skeleton_allocate_data(self, skeleton, bones, is_2d_skeleton)
}
func (self RenderingServer) SkeletonGetBoneCount(skeleton RID) int64 {
	return self.Runtime.RenderingServer_skeleton_get_bone_count(self, skeleton)
}
func (self RenderingServer) SkeletonBoneSetTransform(skeleton RID, bone int64, transform Transform3D) {
	self.Runtime.RenderingServer_skeleton_bone_set_transform(self, skeleton, bone, transform)
}
func (self RenderingServer) SkeletonBoneGetTransform(skeleton RID, bone int64) Transform3D {
	return self.Runtime.RenderingServer_skeleton_bone_get_transform(self, skeleton, bone)
}
func (self RenderingServer) SkeletonBoneSetTransform2d(skeleton RID, bone int64, transform Transform2D) {
	self.Runtime.RenderingServer_skeleton_bone_set_transform_2d(self, skeleton, bone, transform)
}
func (self RenderingServer) SkeletonBoneGetTransform2d(skeleton RID, bone int64) Transform2D {
	return self.Runtime.RenderingServer_skeleton_bone_get_transform_2d(self, skeleton, bone)
}
func (self RenderingServer) SkeletonSetBaseTransform2d(skeleton RID, base_transform Transform2D) {
	self.Runtime.RenderingServer_skeleton_set_base_transform_2d(self, skeleton, base_transform)
}
func (self RenderingServer) DirectionalLightCreate() RID {
	return self.Runtime.RenderingServer_directional_light_create(self)
}
func (self RenderingServer) OmniLightCreate() RID {
	return self.Runtime.RenderingServer_omni_light_create(self)
}
func (self RenderingServer) SpotLightCreate() RID {
	return self.Runtime.RenderingServer_spot_light_create(self)
}
func (self RenderingServer) LightSetColor(light RID, color Color) {
	self.Runtime.RenderingServer_light_set_color(self, light, color)
}
func (self RenderingServer) LightSetParam(light RID, param RenderingServerLightParam, value Float) {
	self.Runtime.RenderingServer_light_set_param(self, light, param, value)
}
func (self RenderingServer) LightSetShadow(light RID, enabled bool) {
	self.Runtime.RenderingServer_light_set_shadow(self, light, enabled)
}
func (self RenderingServer) LightSetProjector(light RID, texture RID) {
	self.Runtime.RenderingServer_light_set_projector(self, light, texture)
}
func (self RenderingServer) LightSetNegative(light RID, enable bool) {
	self.Runtime.RenderingServer_light_set_negative(self, light, enable)
}
func (self RenderingServer) LightSetCullMask(light RID, mask int64) {
	self.Runtime.RenderingServer_light_set_cull_mask(self, light, mask)
}
func (self RenderingServer) LightSetDistanceFade(decal RID, enabled bool, begin Float, shadow Float, length Float) {
	self.Runtime.RenderingServer_light_set_distance_fade(self, decal, enabled, begin, shadow, length)
}
func (self RenderingServer) LightSetReverseCullFaceMode(light RID, enabled bool) {
	self.Runtime.RenderingServer_light_set_reverse_cull_face_mode(self, light, enabled)
}
func (self RenderingServer) LightSetBakeMode(light RID, bake_mode RenderingServerLightBakeMode) {
	self.Runtime.RenderingServer_light_set_bake_mode(self, light, bake_mode)
}
func (self RenderingServer) LightSetMaxSdfgiCascade(light RID, cascade int64) {
	self.Runtime.RenderingServer_light_set_max_sdfgi_cascade(self, light, cascade)
}
func (self RenderingServer) LightOmniSetShadowMode(light RID, mode RenderingServerLightOmniShadowMode) {
	self.Runtime.RenderingServer_light_omni_set_shadow_mode(self, light, mode)
}
func (self RenderingServer) LightDirectionalSetShadowMode(light RID, mode RenderingServerLightDirectionalShadowMode) {
	self.Runtime.RenderingServer_light_directional_set_shadow_mode(self, light, mode)
}
func (self RenderingServer) LightDirectionalSetBlendSplits(light RID, enable bool) {
	self.Runtime.RenderingServer_light_directional_set_blend_splits(self, light, enable)
}
func (self RenderingServer) LightDirectionalSetSkyMode(light RID, mode RenderingServerLightDirectionalSkyMode) {
	self.Runtime.RenderingServer_light_directional_set_sky_mode(self, light, mode)
}
func (self RenderingServer) LightProjectorsSetFilter(filter RenderingServerLightProjectorFilter) {
	self.Runtime.RenderingServer_light_projectors_set_filter(self, filter)
}
func (self RenderingServer) PositionalSoftShadowFilterSetQuality(quality RenderingServerShadowQuality) {
	self.Runtime.RenderingServer_positional_soft_shadow_filter_set_quality(self, quality)
}
func (self RenderingServer) DirectionalSoftShadowFilterSetQuality(quality RenderingServerShadowQuality) {
	self.Runtime.RenderingServer_directional_soft_shadow_filter_set_quality(self, quality)
}
func (self RenderingServer) DirectionalShadowAtlasSetSize(size int64, is_16bits bool) {
	self.Runtime.RenderingServer_directional_shadow_atlas_set_size(self, size, is_16bits)
}
func (self RenderingServer) ReflectionProbeCreate() RID {
	return self.Runtime.RenderingServer_reflection_probe_create(self)
}
func (self RenderingServer) ReflectionProbeSetUpdateMode(probe RID, mode RenderingServerReflectionProbeUpdateMode) {
	self.Runtime.RenderingServer_reflection_probe_set_update_mode(self, probe, mode)
}
func (self RenderingServer) ReflectionProbeSetIntensity(probe RID, intensity Float) {
	self.Runtime.RenderingServer_reflection_probe_set_intensity(self, probe, intensity)
}
func (self RenderingServer) ReflectionProbeSetAmbientMode(probe RID, mode RenderingServerReflectionProbeAmbientMode) {
	self.Runtime.RenderingServer_reflection_probe_set_ambient_mode(self, probe, mode)
}
func (self RenderingServer) ReflectionProbeSetAmbientColor(probe RID, color Color) {
	self.Runtime.RenderingServer_reflection_probe_set_ambient_color(self, probe, color)
}
func (self RenderingServer) ReflectionProbeSetAmbientEnergy(probe RID, energy Float) {
	self.Runtime.RenderingServer_reflection_probe_set_ambient_energy(self, probe, energy)
}
func (self RenderingServer) ReflectionProbeSetMaxDistance(probe RID, distance Float) {
	self.Runtime.RenderingServer_reflection_probe_set_max_distance(self, probe, distance)
}
func (self RenderingServer) ReflectionProbeSetSize(probe RID, size Vector3) {
	self.Runtime.RenderingServer_reflection_probe_set_size(self, probe, size)
}
func (self RenderingServer) ReflectionProbeSetOriginOffset(probe RID, offset Vector3) {
	self.Runtime.RenderingServer_reflection_probe_set_origin_offset(self, probe, offset)
}
func (self RenderingServer) ReflectionProbeSetAsInterior(probe RID, enable bool) {
	self.Runtime.RenderingServer_reflection_probe_set_as_interior(self, probe, enable)
}
func (self RenderingServer) ReflectionProbeSetEnableBoxProjection(probe RID, enable bool) {
	self.Runtime.RenderingServer_reflection_probe_set_enable_box_projection(self, probe, enable)
}
func (self RenderingServer) ReflectionProbeSetEnableShadows(probe RID, enable bool) {
	self.Runtime.RenderingServer_reflection_probe_set_enable_shadows(self, probe, enable)
}
func (self RenderingServer) ReflectionProbeSetCullMask(probe RID, layers int64) {
	self.Runtime.RenderingServer_reflection_probe_set_cull_mask(self, probe, layers)
}
func (self RenderingServer) ReflectionProbeSetResolution(probe RID, resolution int64) {
	self.Runtime.RenderingServer_reflection_probe_set_resolution(self, probe, resolution)
}
func (self RenderingServer) ReflectionProbeSetMeshLodThreshold(probe RID, pixels Float) {
	self.Runtime.RenderingServer_reflection_probe_set_mesh_lod_threshold(self, probe, pixels)
}
func (self RenderingServer) DecalCreate() RID {
	return self.Runtime.RenderingServer_decal_create(self)
}
func (self RenderingServer) DecalSetSize(decal RID, size Vector3) {
	self.Runtime.RenderingServer_decal_set_size(self, decal, size)
}
func (self RenderingServer) DecalSetTexture(decal RID, atype RenderingServerDecalTexture, texture RID) {
	self.Runtime.RenderingServer_decal_set_texture(self, decal, atype, texture)
}
func (self RenderingServer) DecalSetEmissionEnergy(decal RID, energy Float) {
	self.Runtime.RenderingServer_decal_set_emission_energy(self, decal, energy)
}
func (self RenderingServer) DecalSetAlbedoMix(decal RID, albedo_mix Float) {
	self.Runtime.RenderingServer_decal_set_albedo_mix(self, decal, albedo_mix)
}
func (self RenderingServer) DecalSetModulate(decal RID, color Color) {
	self.Runtime.RenderingServer_decal_set_modulate(self, decal, color)
}
func (self RenderingServer) DecalSetCullMask(decal RID, mask int64) {
	self.Runtime.RenderingServer_decal_set_cull_mask(self, decal, mask)
}
func (self RenderingServer) DecalSetDistanceFade(decal RID, enabled bool, begin Float, length Float) {
	self.Runtime.RenderingServer_decal_set_distance_fade(self, decal, enabled, begin, length)
}
func (self RenderingServer) DecalSetFade(decal RID, above Float, below Float) {
	self.Runtime.RenderingServer_decal_set_fade(self, decal, above, below)
}
func (self RenderingServer) DecalSetNormalFade(decal RID, fade Float) {
	self.Runtime.RenderingServer_decal_set_normal_fade(self, decal, fade)
}
func (self RenderingServer) DecalsSetFilter(filter RenderingServerDecalFilter) {
	self.Runtime.RenderingServer_decals_set_filter(self, filter)
}
func (self RenderingServer) GiSetUseHalfResolution(half_resolution bool) {
	self.Runtime.RenderingServer_gi_set_use_half_resolution(self, half_resolution)
}
func (self RenderingServer) VoxelGiCreate() RID {
	return self.Runtime.RenderingServer_voxel_gi_create(self)
}
func (self RenderingServer) VoxelGiAllocateData(voxel_gi RID, to_cell_xform Transform3D, aabb AABB, octree_size Vector3i, octree_cells PackedByteArray, data_cells PackedByteArray, distance_field PackedByteArray, level_counts PackedInt32Array) {
	self.Runtime.RenderingServer_voxel_gi_allocate_data(self, voxel_gi, to_cell_xform, aabb, octree_size, octree_cells, data_cells, distance_field, level_counts)
}
func (self RenderingServer) VoxelGiGetOctreeSize(voxel_gi RID) Vector3i {
	return self.Runtime.RenderingServer_voxel_gi_get_octree_size(self, voxel_gi)
}
func (self RenderingServer) VoxelGiGetOctreeCells(voxel_gi RID) PackedByteArray {
	return self.Runtime.RenderingServer_voxel_gi_get_octree_cells(self, voxel_gi)
}
func (self RenderingServer) VoxelGiGetDataCells(voxel_gi RID) PackedByteArray {
	return self.Runtime.RenderingServer_voxel_gi_get_data_cells(self, voxel_gi)
}
func (self RenderingServer) VoxelGiGetDistanceField(voxel_gi RID) PackedByteArray {
	return self.Runtime.RenderingServer_voxel_gi_get_distance_field(self, voxel_gi)
}
func (self RenderingServer) VoxelGiGetLevelCounts(voxel_gi RID) PackedInt32Array {
	return self.Runtime.RenderingServer_voxel_gi_get_level_counts(self, voxel_gi)
}
func (self RenderingServer) VoxelGiGetToCellXform(voxel_gi RID) Transform3D {
	return self.Runtime.RenderingServer_voxel_gi_get_to_cell_xform(self, voxel_gi)
}
func (self RenderingServer) VoxelGiSetDynamicRange(voxel_gi RID, arange Float) {
	self.Runtime.RenderingServer_voxel_gi_set_dynamic_range(self, voxel_gi, arange)
}
func (self RenderingServer) VoxelGiSetPropagation(voxel_gi RID, amount Float) {
	self.Runtime.RenderingServer_voxel_gi_set_propagation(self, voxel_gi, amount)
}
func (self RenderingServer) VoxelGiSetEnergy(voxel_gi RID, energy Float) {
	self.Runtime.RenderingServer_voxel_gi_set_energy(self, voxel_gi, energy)
}
func (self RenderingServer) VoxelGiSetBakedExposureNormalization(voxel_gi RID, baked_exposure Float) {
	self.Runtime.RenderingServer_voxel_gi_set_baked_exposure_normalization(self, voxel_gi, baked_exposure)
}
func (self RenderingServer) VoxelGiSetBias(voxel_gi RID, bias Float) {
	self.Runtime.RenderingServer_voxel_gi_set_bias(self, voxel_gi, bias)
}
func (self RenderingServer) VoxelGiSetNormalBias(voxel_gi RID, bias Float) {
	self.Runtime.RenderingServer_voxel_gi_set_normal_bias(self, voxel_gi, bias)
}
func (self RenderingServer) VoxelGiSetInterior(voxel_gi RID, enable bool) {
	self.Runtime.RenderingServer_voxel_gi_set_interior(self, voxel_gi, enable)
}
func (self RenderingServer) VoxelGiSetUseTwoBounces(voxel_gi RID, enable bool) {
	self.Runtime.RenderingServer_voxel_gi_set_use_two_bounces(self, voxel_gi, enable)
}
func (self RenderingServer) VoxelGiSetQuality(quality RenderingServerVoxelGIQuality) {
	self.Runtime.RenderingServer_voxel_gi_set_quality(self, quality)
}
func (self RenderingServer) LightmapCreate() RID {
	return self.Runtime.RenderingServer_lightmap_create(self)
}
func (self RenderingServer) LightmapSetTextures(lightmap RID, light RID, uses_sh bool) {
	self.Runtime.RenderingServer_lightmap_set_textures(self, lightmap, light, uses_sh)
}
func (self RenderingServer) LightmapSetProbeBounds(lightmap RID, bounds AABB) {
	self.Runtime.RenderingServer_lightmap_set_probe_bounds(self, lightmap, bounds)
}
func (self RenderingServer) LightmapSetProbeInterior(lightmap RID, interior bool) {
	self.Runtime.RenderingServer_lightmap_set_probe_interior(self, lightmap, interior)
}
func (self RenderingServer) LightmapSetProbeCaptureData(lightmap RID, points PackedVector3Array, point_sh PackedColorArray, tetrahedra PackedInt32Array, bsp_tree PackedInt32Array) {
	self.Runtime.RenderingServer_lightmap_set_probe_capture_data(self, lightmap, points, point_sh, tetrahedra, bsp_tree)
}
func (self RenderingServer) LightmapGetProbeCapturePoints(lightmap RID) PackedVector3Array {
	return self.Runtime.RenderingServer_lightmap_get_probe_capture_points(self, lightmap)
}
func (self RenderingServer) LightmapGetProbeCaptureSh(lightmap RID) PackedColorArray {
	return self.Runtime.RenderingServer_lightmap_get_probe_capture_sh(self, lightmap)
}
func (self RenderingServer) LightmapGetProbeCaptureTetrahedra(lightmap RID) PackedInt32Array {
	return self.Runtime.RenderingServer_lightmap_get_probe_capture_tetrahedra(self, lightmap)
}
func (self RenderingServer) LightmapGetProbeCaptureBspTree(lightmap RID) PackedInt32Array {
	return self.Runtime.RenderingServer_lightmap_get_probe_capture_bsp_tree(self, lightmap)
}
func (self RenderingServer) LightmapSetBakedExposureNormalization(lightmap RID, baked_exposure Float) {
	self.Runtime.RenderingServer_lightmap_set_baked_exposure_normalization(self, lightmap, baked_exposure)
}
func (self RenderingServer) LightmapSetProbeCaptureUpdateSpeed(speed Float) {
	self.Runtime.RenderingServer_lightmap_set_probe_capture_update_speed(self, speed)
}
func (self RenderingServer) ParticlesCreate() RID {
	return self.Runtime.RenderingServer_particles_create(self)
}
func (self RenderingServer) ParticlesSetMode(particles RID, mode RenderingServerParticlesMode) {
	self.Runtime.RenderingServer_particles_set_mode(self, particles, mode)
}
func (self RenderingServer) ParticlesSetEmitting(particles RID, emitting bool) {
	self.Runtime.RenderingServer_particles_set_emitting(self, particles, emitting)
}
func (self RenderingServer) ParticlesGetEmitting(particles RID) bool {
	return self.Runtime.RenderingServer_particles_get_emitting(self, particles)
}
func (self RenderingServer) ParticlesSetAmount(particles RID, amount int64) {
	self.Runtime.RenderingServer_particles_set_amount(self, particles, amount)
}
func (self RenderingServer) ParticlesSetAmountRatio(particles RID, ratio Float) {
	self.Runtime.RenderingServer_particles_set_amount_ratio(self, particles, ratio)
}
func (self RenderingServer) ParticlesSetLifetime(particles RID, lifetime Float) {
	self.Runtime.RenderingServer_particles_set_lifetime(self, particles, lifetime)
}
func (self RenderingServer) ParticlesSetOneShot(particles RID, one_shot bool) {
	self.Runtime.RenderingServer_particles_set_one_shot(self, particles, one_shot)
}
func (self RenderingServer) ParticlesSetPreProcessTime(particles RID, time Float) {
	self.Runtime.RenderingServer_particles_set_pre_process_time(self, particles, time)
}
func (self RenderingServer) ParticlesSetExplosivenessRatio(particles RID, ratio Float) {
	self.Runtime.RenderingServer_particles_set_explosiveness_ratio(self, particles, ratio)
}
func (self RenderingServer) ParticlesSetRandomnessRatio(particles RID, ratio Float) {
	self.Runtime.RenderingServer_particles_set_randomness_ratio(self, particles, ratio)
}
func (self RenderingServer) ParticlesSetInterpToEnd(particles RID, factor Float) {
	self.Runtime.RenderingServer_particles_set_interp_to_end(self, particles, factor)
}
func (self RenderingServer) ParticlesSetEmitterVelocity(particles RID, velocity Vector3) {
	self.Runtime.RenderingServer_particles_set_emitter_velocity(self, particles, velocity)
}
func (self RenderingServer) ParticlesSetCustomAabb(particles RID, aabb AABB) {
	self.Runtime.RenderingServer_particles_set_custom_aabb(self, particles, aabb)
}
func (self RenderingServer) ParticlesSetSpeedScale(particles RID, scale Float) {
	self.Runtime.RenderingServer_particles_set_speed_scale(self, particles, scale)
}
func (self RenderingServer) ParticlesSetUseLocalCoordinates(particles RID, enable bool) {
	self.Runtime.RenderingServer_particles_set_use_local_coordinates(self, particles, enable)
}
func (self RenderingServer) ParticlesSetProcessMaterial(particles RID, material RID) {
	self.Runtime.RenderingServer_particles_set_process_material(self, particles, material)
}
func (self RenderingServer) ParticlesSetFixedFps(particles RID, fps int64) {
	self.Runtime.RenderingServer_particles_set_fixed_fps(self, particles, fps)
}
func (self RenderingServer) ParticlesSetInterpolate(particles RID, enable bool) {
	self.Runtime.RenderingServer_particles_set_interpolate(self, particles, enable)
}
func (self RenderingServer) ParticlesSetFractionalDelta(particles RID, enable bool) {
	self.Runtime.RenderingServer_particles_set_fractional_delta(self, particles, enable)
}
func (self RenderingServer) ParticlesSetCollisionBaseSize(particles RID, size Float) {
	self.Runtime.RenderingServer_particles_set_collision_base_size(self, particles, size)
}
func (self RenderingServer) ParticlesSetTransformAlign(particles RID, align RenderingServerParticlesTransformAlign) {
	self.Runtime.RenderingServer_particles_set_transform_align(self, particles, align)
}
func (self RenderingServer) ParticlesSetTrails(particles RID, enable bool, length_sec Float) {
	self.Runtime.RenderingServer_particles_set_trails(self, particles, enable, length_sec)
}
func (self RenderingServer) ParticlesSetTrailBindPoses(particles RID, bind_poses ArrayOf[Transform3D]) {
	self.Runtime.RenderingServer_particles_set_trail_bind_poses(self, particles, bind_poses)
}
func (self RenderingServer) ParticlesIsInactive(particles RID) bool {
	return self.Runtime.RenderingServer_particles_is_inactive(self, particles)
}
func (self RenderingServer) ParticlesRequestProcess(particles RID) {
	self.Runtime.RenderingServer_particles_request_process(self, particles)
}
func (self RenderingServer) ParticlesRestart(particles RID) {
	self.Runtime.RenderingServer_particles_restart(self, particles)
}
func (self RenderingServer) ParticlesSetSubemitter(particles RID, subemitter_particles RID) {
	self.Runtime.RenderingServer_particles_set_subemitter(self, particles, subemitter_particles)
}
func (self RenderingServer) ParticlesEmit(particles RID, transform Transform3D, velocity Vector3, color Color, custom Color, emit_flags int64) {
	self.Runtime.RenderingServer_particles_emit(self, particles, transform, velocity, color, custom, emit_flags)
}
func (self RenderingServer) ParticlesSetDrawOrder(particles RID, order RenderingServerParticlesDrawOrder) {
	self.Runtime.RenderingServer_particles_set_draw_order(self, particles, order)
}
func (self RenderingServer) ParticlesSetDrawPasses(particles RID, count int64) {
	self.Runtime.RenderingServer_particles_set_draw_passes(self, particles, count)
}
func (self RenderingServer) ParticlesSetDrawPassMesh(particles RID, pass int64, mesh RID) {
	self.Runtime.RenderingServer_particles_set_draw_pass_mesh(self, particles, pass, mesh)
}
func (self RenderingServer) ParticlesGetCurrentAabb(particles RID) AABB {
	return self.Runtime.RenderingServer_particles_get_current_aabb(self, particles)
}
func (self RenderingServer) ParticlesSetEmissionTransform(particles RID, transform Transform3D) {
	self.Runtime.RenderingServer_particles_set_emission_transform(self, particles, transform)
}
func (self RenderingServer) ParticlesCollisionCreate() RID {
	return self.Runtime.RenderingServer_particles_collision_create(self)
}
func (self RenderingServer) ParticlesCollisionSetCollisionType(particles_collision RID, atype RenderingServerParticlesCollisionType) {
	self.Runtime.RenderingServer_particles_collision_set_collision_type(self, particles_collision, atype)
}
func (self RenderingServer) ParticlesCollisionSetCullMask(particles_collision RID, mask int64) {
	self.Runtime.RenderingServer_particles_collision_set_cull_mask(self, particles_collision, mask)
}
func (self RenderingServer) ParticlesCollisionSetSphereRadius(particles_collision RID, radius Float) {
	self.Runtime.RenderingServer_particles_collision_set_sphere_radius(self, particles_collision, radius)
}
func (self RenderingServer) ParticlesCollisionSetBoxExtents(particles_collision RID, extents Vector3) {
	self.Runtime.RenderingServer_particles_collision_set_box_extents(self, particles_collision, extents)
}
func (self RenderingServer) ParticlesCollisionSetAttractorStrength(particles_collision RID, strength Float) {
	self.Runtime.RenderingServer_particles_collision_set_attractor_strength(self, particles_collision, strength)
}
func (self RenderingServer) ParticlesCollisionSetAttractorDirectionality(particles_collision RID, amount Float) {
	self.Runtime.RenderingServer_particles_collision_set_attractor_directionality(self, particles_collision, amount)
}
func (self RenderingServer) ParticlesCollisionSetAttractorAttenuation(particles_collision RID, curve Float) {
	self.Runtime.RenderingServer_particles_collision_set_attractor_attenuation(self, particles_collision, curve)
}
func (self RenderingServer) ParticlesCollisionSetFieldTexture(particles_collision RID, texture RID) {
	self.Runtime.RenderingServer_particles_collision_set_field_texture(self, particles_collision, texture)
}
func (self RenderingServer) ParticlesCollisionHeightFieldUpdate(particles_collision RID) {
	self.Runtime.RenderingServer_particles_collision_height_field_update(self, particles_collision)
}
func (self RenderingServer) ParticlesCollisionSetHeightFieldResolution(particles_collision RID, resolution RenderingServerParticlesCollisionHeightfieldResolution) {
	self.Runtime.RenderingServer_particles_collision_set_height_field_resolution(self, particles_collision, resolution)
}
func (self RenderingServer) FogVolumeCreate() RID {
	return self.Runtime.RenderingServer_fog_volume_create(self)
}
func (self RenderingServer) FogVolumeSetShape(fog_volume RID, shape RenderingServerFogVolumeShape) {
	self.Runtime.RenderingServer_fog_volume_set_shape(self, fog_volume, shape)
}
func (self RenderingServer) FogVolumeSetSize(fog_volume RID, size Vector3) {
	self.Runtime.RenderingServer_fog_volume_set_size(self, fog_volume, size)
}
func (self RenderingServer) FogVolumeSetMaterial(fog_volume RID, material RID) {
	self.Runtime.RenderingServer_fog_volume_set_material(self, fog_volume, material)
}
func (self RenderingServer) VisibilityNotifierCreate() RID {
	return self.Runtime.RenderingServer_visibility_notifier_create(self)
}
func (self RenderingServer) VisibilityNotifierSetAabb(notifier RID, aabb AABB) {
	self.Runtime.RenderingServer_visibility_notifier_set_aabb(self, notifier, aabb)
}
func (self RenderingServer) VisibilityNotifierSetCallbacks(notifier RID, enter_callable Callable, exit_callable Callable) {
	self.Runtime.RenderingServer_visibility_notifier_set_callbacks(self, notifier, enter_callable, exit_callable)
}
func (self RenderingServer) OccluderCreate() RID {
	return self.Runtime.RenderingServer_occluder_create(self)
}
func (self RenderingServer) OccluderSetMesh(occluder RID, vertices PackedVector3Array, indices PackedInt32Array) {
	self.Runtime.RenderingServer_occluder_set_mesh(self, occluder, vertices, indices)
}
func (self RenderingServer) CameraCreate() RID {
	return self.Runtime.RenderingServer_camera_create(self)
}
func (self RenderingServer) CameraSetPerspective(camera RID, fovy_degrees Float, z_near Float, z_far Float) {
	self.Runtime.RenderingServer_camera_set_perspective(self, camera, fovy_degrees, z_near, z_far)
}
func (self RenderingServer) CameraSetOrthogonal(camera RID, size Float, z_near Float, z_far Float) {
	self.Runtime.RenderingServer_camera_set_orthogonal(self, camera, size, z_near, z_far)
}
func (self RenderingServer) CameraSetFrustum(camera RID, size Float, offset Vector2, z_near Float, z_far Float) {
	self.Runtime.RenderingServer_camera_set_frustum(self, camera, size, offset, z_near, z_far)
}
func (self RenderingServer) CameraSetTransform(camera RID, transform Transform3D) {
	self.Runtime.RenderingServer_camera_set_transform(self, camera, transform)
}
func (self RenderingServer) CameraSetCullMask(camera RID, layers int64) {
	self.Runtime.RenderingServer_camera_set_cull_mask(self, camera, layers)
}
func (self RenderingServer) CameraSetEnvironment(camera RID, env RID) {
	self.Runtime.RenderingServer_camera_set_environment(self, camera, env)
}
func (self RenderingServer) CameraSetCameraAttributes(camera RID, effects RID) {
	self.Runtime.RenderingServer_camera_set_camera_attributes(self, camera, effects)
}
func (self RenderingServer) CameraSetUseVerticalAspect(camera RID, enable bool) {
	self.Runtime.RenderingServer_camera_set_use_vertical_aspect(self, camera, enable)
}
func (self RenderingServer) ViewportCreate() RID {
	return self.Runtime.RenderingServer_viewport_create(self)
}
func (self RenderingServer) ViewportSetUseXr(viewport RID, use_xr bool) {
	self.Runtime.RenderingServer_viewport_set_use_xr(self, viewport, use_xr)
}
func (self RenderingServer) ViewportSetSize(viewport RID, width int64, height int64) {
	self.Runtime.RenderingServer_viewport_set_size(self, viewport, width, height)
}
func (self RenderingServer) ViewportSetActive(viewport RID, active bool) {
	self.Runtime.RenderingServer_viewport_set_active(self, viewport, active)
}
func (self RenderingServer) ViewportSetParentViewport(viewport RID, parent_viewport RID) {
	self.Runtime.RenderingServer_viewport_set_parent_viewport(self, viewport, parent_viewport)
}
func (self RenderingServer) ViewportAttachToScreen(viewport RID, rect Rect2, screen int64) {
	self.Runtime.RenderingServer_viewport_attach_to_screen(self, viewport, rect, screen)
}
func (self RenderingServer) ViewportSetRenderDirectToScreen(viewport RID, enabled bool) {
	self.Runtime.RenderingServer_viewport_set_render_direct_to_screen(self, viewport, enabled)
}
func (self RenderingServer) ViewportSetCanvasCullMask(viewport RID, canvas_cull_mask int64) {
	self.Runtime.RenderingServer_viewport_set_canvas_cull_mask(self, viewport, canvas_cull_mask)
}
func (self RenderingServer) ViewportSetScaling3dMode(viewport RID, scaling_3d_mode RenderingServerViewportScaling3DMode) {
	self.Runtime.RenderingServer_viewport_set_scaling_3d_mode(self, viewport, scaling_3d_mode)
}
func (self RenderingServer) ViewportSetScaling3dScale(viewport RID, scale Float) {
	self.Runtime.RenderingServer_viewport_set_scaling_3d_scale(self, viewport, scale)
}
func (self RenderingServer) ViewportSetFsrSharpness(viewport RID, sharpness Float) {
	self.Runtime.RenderingServer_viewport_set_fsr_sharpness(self, viewport, sharpness)
}
func (self RenderingServer) ViewportSetTextureMipmapBias(viewport RID, mipmap_bias Float) {
	self.Runtime.RenderingServer_viewport_set_texture_mipmap_bias(self, viewport, mipmap_bias)
}
func (self RenderingServer) ViewportSetUpdateMode(viewport RID, update_mode RenderingServerViewportUpdateMode) {
	self.Runtime.RenderingServer_viewport_set_update_mode(self, viewport, update_mode)
}
func (self RenderingServer) ViewportSetClearMode(viewport RID, clear_mode RenderingServerViewportClearMode) {
	self.Runtime.RenderingServer_viewport_set_clear_mode(self, viewport, clear_mode)
}
func (self RenderingServer) ViewportGetRenderTarget(viewport RID) RID {
	return self.Runtime.RenderingServer_viewport_get_render_target(self, viewport)
}
func (self RenderingServer) ViewportGetTexture(viewport RID) RID {
	return self.Runtime.RenderingServer_viewport_get_texture(self, viewport)
}
func (self RenderingServer) ViewportSetDisable3d(viewport RID, disable bool) {
	self.Runtime.RenderingServer_viewport_set_disable_3d(self, viewport, disable)
}
func (self RenderingServer) ViewportSetDisable2d(viewport RID, disable bool) {
	self.Runtime.RenderingServer_viewport_set_disable_2d(self, viewport, disable)
}
func (self RenderingServer) ViewportSetEnvironmentMode(viewport RID, mode RenderingServerViewportEnvironmentMode) {
	self.Runtime.RenderingServer_viewport_set_environment_mode(self, viewport, mode)
}
func (self RenderingServer) ViewportAttachCamera(viewport RID, camera RID) {
	self.Runtime.RenderingServer_viewport_attach_camera(self, viewport, camera)
}
func (self RenderingServer) ViewportSetScenario(viewport RID, scenario RID) {
	self.Runtime.RenderingServer_viewport_set_scenario(self, viewport, scenario)
}
func (self RenderingServer) ViewportAttachCanvas(viewport RID, canvas RID) {
	self.Runtime.RenderingServer_viewport_attach_canvas(self, viewport, canvas)
}
func (self RenderingServer) ViewportRemoveCanvas(viewport RID, canvas RID) {
	self.Runtime.RenderingServer_viewport_remove_canvas(self, viewport, canvas)
}
func (self RenderingServer) ViewportSetSnap2dTransformsToPixel(viewport RID, enabled bool) {
	self.Runtime.RenderingServer_viewport_set_snap_2d_transforms_to_pixel(self, viewport, enabled)
}
func (self RenderingServer) ViewportSetSnap2dVerticesToPixel(viewport RID, enabled bool) {
	self.Runtime.RenderingServer_viewport_set_snap_2d_vertices_to_pixel(self, viewport, enabled)
}
func (self RenderingServer) ViewportSetDefaultCanvasItemTextureFilter(viewport RID, filter RenderingServerCanvasItemTextureFilter) {
	self.Runtime.RenderingServer_viewport_set_default_canvas_item_texture_filter(self, viewport, filter)
}
func (self RenderingServer) ViewportSetDefaultCanvasItemTextureRepeat(viewport RID, repeat RenderingServerCanvasItemTextureRepeat) {
	self.Runtime.RenderingServer_viewport_set_default_canvas_item_texture_repeat(self, viewport, repeat)
}
func (self RenderingServer) ViewportSetCanvasTransform(viewport RID, canvas RID, offset Transform2D) {
	self.Runtime.RenderingServer_viewport_set_canvas_transform(self, viewport, canvas, offset)
}
func (self RenderingServer) ViewportSetCanvasStacking(viewport RID, canvas RID, layer int64, sublayer int64) {
	self.Runtime.RenderingServer_viewport_set_canvas_stacking(self, viewport, canvas, layer, sublayer)
}
func (self RenderingServer) ViewportSetTransparentBackground(viewport RID, enabled bool) {
	self.Runtime.RenderingServer_viewport_set_transparent_background(self, viewport, enabled)
}
func (self RenderingServer) ViewportSetGlobalCanvasTransform(viewport RID, transform Transform2D) {
	self.Runtime.RenderingServer_viewport_set_global_canvas_transform(self, viewport, transform)
}
func (self RenderingServer) ViewportSetSdfOversizeAndScale(viewport RID, oversize RenderingServerViewportSDFOversize, scale RenderingServerViewportSDFScale) {
	self.Runtime.RenderingServer_viewport_set_sdf_oversize_and_scale(self, viewport, oversize, scale)
}
func (self RenderingServer) ViewportSetPositionalShadowAtlasSize(viewport RID, size int64, use_16_bits bool) {
	self.Runtime.RenderingServer_viewport_set_positional_shadow_atlas_size(self, viewport, size, use_16_bits)
}
func (self RenderingServer) ViewportSetPositionalShadowAtlasQuadrantSubdivision(viewport RID, quadrant int64, subdivision int64) {
	self.Runtime.RenderingServer_viewport_set_positional_shadow_atlas_quadrant_subdivision(self, viewport, quadrant, subdivision)
}
func (self RenderingServer) ViewportSetMsaa3d(viewport RID, msaa RenderingServerViewportMSAA) {
	self.Runtime.RenderingServer_viewport_set_msaa_3d(self, viewport, msaa)
}
func (self RenderingServer) ViewportSetMsaa2d(viewport RID, msaa RenderingServerViewportMSAA) {
	self.Runtime.RenderingServer_viewport_set_msaa_2d(self, viewport, msaa)
}
func (self RenderingServer) ViewportSetUseHdr2d(viewport RID, enabled bool) {
	self.Runtime.RenderingServer_viewport_set_use_hdr_2d(self, viewport, enabled)
}
func (self RenderingServer) ViewportSetScreenSpaceAa(viewport RID, mode RenderingServerViewportScreenSpaceAA) {
	self.Runtime.RenderingServer_viewport_set_screen_space_aa(self, viewport, mode)
}
func (self RenderingServer) ViewportSetUseTaa(viewport RID, enable bool) {
	self.Runtime.RenderingServer_viewport_set_use_taa(self, viewport, enable)
}
func (self RenderingServer) ViewportSetUseDebanding(viewport RID, enable bool) {
	self.Runtime.RenderingServer_viewport_set_use_debanding(self, viewport, enable)
}
func (self RenderingServer) ViewportSetUseOcclusionCulling(viewport RID, enable bool) {
	self.Runtime.RenderingServer_viewport_set_use_occlusion_culling(self, viewport, enable)
}
func (self RenderingServer) ViewportSetOcclusionRaysPerThread(rays_per_thread int64) {
	self.Runtime.RenderingServer_viewport_set_occlusion_rays_per_thread(self, rays_per_thread)
}
func (self RenderingServer) ViewportSetOcclusionCullingBuildQuality(quality RenderingServerViewportOcclusionCullingBuildQuality) {
	self.Runtime.RenderingServer_viewport_set_occlusion_culling_build_quality(self, quality)
}
func (self RenderingServer) ViewportGetRenderInfo(viewport RID, atype RenderingServerViewportRenderInfoType, info RenderingServerViewportRenderInfo) int64 {
	return self.Runtime.RenderingServer_viewport_get_render_info(self, viewport, atype, info)
}
func (self RenderingServer) ViewportSetDebugDraw(viewport RID, draw RenderingServerViewportDebugDraw) {
	self.Runtime.RenderingServer_viewport_set_debug_draw(self, viewport, draw)
}
func (self RenderingServer) ViewportSetMeasureRenderTime(viewport RID, enable bool) {
	self.Runtime.RenderingServer_viewport_set_measure_render_time(self, viewport, enable)
}
func (self RenderingServer) ViewportGetMeasuredRenderTimeCpu(viewport RID) Float {
	return self.Runtime.RenderingServer_viewport_get_measured_render_time_cpu(self, viewport)
}
func (self RenderingServer) ViewportGetMeasuredRenderTimeGpu(viewport RID) Float {
	return self.Runtime.RenderingServer_viewport_get_measured_render_time_gpu(self, viewport)
}
func (self RenderingServer) ViewportSetVrsMode(viewport RID, mode RenderingServerViewportVRSMode) {
	self.Runtime.RenderingServer_viewport_set_vrs_mode(self, viewport, mode)
}
func (self RenderingServer) ViewportSetVrsTexture(viewport RID, texture RID) {
	self.Runtime.RenderingServer_viewport_set_vrs_texture(self, viewport, texture)
}
func (self RenderingServer) SkyCreate() RID {
	return self.Runtime.RenderingServer_sky_create(self)
}
func (self RenderingServer) SkySetRadianceSize(sky RID, radiance_size int64) {
	self.Runtime.RenderingServer_sky_set_radiance_size(self, sky, radiance_size)
}
func (self RenderingServer) SkySetMode(sky RID, mode RenderingServerSkyMode) {
	self.Runtime.RenderingServer_sky_set_mode(self, sky, mode)
}
func (self RenderingServer) SkySetMaterial(sky RID, material RID) {
	self.Runtime.RenderingServer_sky_set_material(self, sky, material)
}
func (self RenderingServer) SkyBakePanorama(sky RID, energy Float, bake_irradiance bool, size Vector2i) Image {
	return self.Runtime.RenderingServer_sky_bake_panorama(self, sky, energy, bake_irradiance, size)
}
func (self RenderingServer) EnvironmentCreate() RID {
	return self.Runtime.RenderingServer_environment_create(self)
}
func (self RenderingServer) EnvironmentSetBackground(env RID, bg RenderingServerEnvironmentBG) {
	self.Runtime.RenderingServer_environment_set_background(self, env, bg)
}
func (self RenderingServer) EnvironmentSetSky(env RID, sky RID) {
	self.Runtime.RenderingServer_environment_set_sky(self, env, sky)
}
func (self RenderingServer) EnvironmentSetSkyCustomFov(env RID, scale Float) {
	self.Runtime.RenderingServer_environment_set_sky_custom_fov(self, env, scale)
}
func (self RenderingServer) EnvironmentSetSkyOrientation(env RID, orientation Basis) {
	self.Runtime.RenderingServer_environment_set_sky_orientation(self, env, orientation)
}
func (self RenderingServer) EnvironmentSetBgColor(env RID, color Color) {
	self.Runtime.RenderingServer_environment_set_bg_color(self, env, color)
}
func (self RenderingServer) EnvironmentSetBgEnergy(env RID, multiplier Float, exposure_value Float) {
	self.Runtime.RenderingServer_environment_set_bg_energy(self, env, multiplier, exposure_value)
}
func (self RenderingServer) EnvironmentSetCanvasMaxLayer(env RID, max_layer int64) {
	self.Runtime.RenderingServer_environment_set_canvas_max_layer(self, env, max_layer)
}
func (self RenderingServer) EnvironmentSetAmbientLight(env RID, color Color, ambient RenderingServerEnvironmentAmbientSource, energy Float, sky_contibution Float, reflection_source RenderingServerEnvironmentReflectionSource) {
	self.Runtime.RenderingServer_environment_set_ambient_light(self, env, color, ambient, energy, sky_contibution, reflection_source)
}
func (self RenderingServer) EnvironmentSetGlow(env RID, enable bool, levels PackedFloat32Array, intensity Float, strength Float, mix Float, bloom_threshold Float, blend_mode RenderingServerEnvironmentGlowBlendMode, hdr_bleed_threshold Float, hdr_bleed_scale Float, hdr_luminance_cap Float, glow_map_strength Float, glow_map RID) {
	self.Runtime.RenderingServer_environment_set_glow(self, env, enable, levels, intensity, strength, mix, bloom_threshold, blend_mode, hdr_bleed_threshold, hdr_bleed_scale, hdr_luminance_cap, glow_map_strength, glow_map)
}
func (self RenderingServer) EnvironmentSetTonemap(env RID, tone_mapper RenderingServerEnvironmentToneMapper, exposure Float, white Float) {
	self.Runtime.RenderingServer_environment_set_tonemap(self, env, tone_mapper, exposure, white)
}
func (self RenderingServer) EnvironmentSetAdjustment(env RID, enable bool, brightness Float, contrast Float, saturation Float, use_1d_color_correction bool, color_correction RID) {
	self.Runtime.RenderingServer_environment_set_adjustment(self, env, enable, brightness, contrast, saturation, use_1d_color_correction, color_correction)
}
func (self RenderingServer) EnvironmentSetSsr(env RID, enable bool, max_steps int64, fade_in Float, fade_out Float, depth_tolerance Float) {
	self.Runtime.RenderingServer_environment_set_ssr(self, env, enable, max_steps, fade_in, fade_out, depth_tolerance)
}
func (self RenderingServer) EnvironmentSetSsao(env RID, enable bool, radius Float, intensity Float, power Float, detail Float, horizon Float, sharpness Float, light_affect Float, ao_channel_affect Float) {
	self.Runtime.RenderingServer_environment_set_ssao(self, env, enable, radius, intensity, power, detail, horizon, sharpness, light_affect, ao_channel_affect)
}
func (self RenderingServer) EnvironmentSetFog(env RID, enable bool, light_color Color, light_energy Float, sun_scatter Float, density Float, height Float, height_density Float, aerial_perspective Float, sky_affect Float) {
	self.Runtime.RenderingServer_environment_set_fog(self, env, enable, light_color, light_energy, sun_scatter, density, height, height_density, aerial_perspective, sky_affect)
}
func (self RenderingServer) EnvironmentSetSdfgi(env RID, enable bool, cascades int64, min_cell_size Float, y_scale RenderingServerEnvironmentSDFGIYScale, use_occlusion bool, bounce_feedback Float, read_sky bool, energy Float, normal_bias Float, probe_bias Float) {
	self.Runtime.RenderingServer_environment_set_sdfgi(self, env, enable, cascades, min_cell_size, y_scale, use_occlusion, bounce_feedback, read_sky, energy, normal_bias, probe_bias)
}
func (self RenderingServer) EnvironmentSetVolumetricFog(env RID, enable bool, density Float, albedo Color, emission Color, emission_energy Float, anisotropy Float, length Float, p_detail_spread Float, gi_inject Float, temporal_reprojection bool, temporal_reprojection_amount Float, ambient_inject Float, sky_affect Float) {
	self.Runtime.RenderingServer_environment_set_volumetric_fog(self, env, enable, density, albedo, emission, emission_energy, anisotropy, length, p_detail_spread, gi_inject, temporal_reprojection, temporal_reprojection_amount, ambient_inject, sky_affect)
}
func (self RenderingServer) EnvironmentGlowSetUseBicubicUpscale(enable bool) {
	self.Runtime.RenderingServer_environment_glow_set_use_bicubic_upscale(self, enable)
}
func (self RenderingServer) EnvironmentSetSsrRoughnessQuality(quality RenderingServerEnvironmentSSRRoughnessQuality) {
	self.Runtime.RenderingServer_environment_set_ssr_roughness_quality(self, quality)
}
func (self RenderingServer) EnvironmentSetSsaoQuality(quality RenderingServerEnvironmentSSAOQuality, half_size bool, adaptive_target Float, blur_passes int64, fadeout_from Float, fadeout_to Float) {
	self.Runtime.RenderingServer_environment_set_ssao_quality(self, quality, half_size, adaptive_target, blur_passes, fadeout_from, fadeout_to)
}
func (self RenderingServer) EnvironmentSetSsilQuality(quality RenderingServerEnvironmentSSILQuality, half_size bool, adaptive_target Float, blur_passes int64, fadeout_from Float, fadeout_to Float) {
	self.Runtime.RenderingServer_environment_set_ssil_quality(self, quality, half_size, adaptive_target, blur_passes, fadeout_from, fadeout_to)
}
func (self RenderingServer) EnvironmentSetSdfgiRayCount(ray_count RenderingServerEnvironmentSDFGIRayCount) {
	self.Runtime.RenderingServer_environment_set_sdfgi_ray_count(self, ray_count)
}
func (self RenderingServer) EnvironmentSetSdfgiFramesToConverge(frames RenderingServerEnvironmentSDFGIFramesToConverge) {
	self.Runtime.RenderingServer_environment_set_sdfgi_frames_to_converge(self, frames)
}
func (self RenderingServer) EnvironmentSetSdfgiFramesToUpdateLight(frames RenderingServerEnvironmentSDFGIFramesToUpdateLight) {
	self.Runtime.RenderingServer_environment_set_sdfgi_frames_to_update_light(self, frames)
}
func (self RenderingServer) EnvironmentSetVolumetricFogVolumeSize(size int64, depth int64) {
	self.Runtime.RenderingServer_environment_set_volumetric_fog_volume_size(self, size, depth)
}
func (self RenderingServer) EnvironmentSetVolumetricFogFilterActive(active bool) {
	self.Runtime.RenderingServer_environment_set_volumetric_fog_filter_active(self, active)
}
func (self RenderingServer) EnvironmentBakePanorama(environment RID, bake_irradiance bool, size Vector2i) Image {
	return self.Runtime.RenderingServer_environment_bake_panorama(self, environment, bake_irradiance, size)
}
func (self RenderingServer) ScreenSpaceRoughnessLimiterSetActive(enable bool, amount Float, limit Float) {
	self.Runtime.RenderingServer_screen_space_roughness_limiter_set_active(self, enable, amount, limit)
}
func (self RenderingServer) SubSurfaceScatteringSetQuality(quality RenderingServerSubSurfaceScatteringQuality) {
	self.Runtime.RenderingServer_sub_surface_scattering_set_quality(self, quality)
}
func (self RenderingServer) SubSurfaceScatteringSetScale(scale Float, depth_scale Float) {
	self.Runtime.RenderingServer_sub_surface_scattering_set_scale(self, scale, depth_scale)
}
func (self RenderingServer) CameraAttributesCreate() RID {
	return self.Runtime.RenderingServer_camera_attributes_create(self)
}
func (self RenderingServer) CameraAttributesSetDofBlurQuality(quality RenderingServerDOFBlurQuality, use_jitter bool) {
	self.Runtime.RenderingServer_camera_attributes_set_dof_blur_quality(self, quality, use_jitter)
}
func (self RenderingServer) CameraAttributesSetDofBlurBokehShape(shape RenderingServerDOFBokehShape) {
	self.Runtime.RenderingServer_camera_attributes_set_dof_blur_bokeh_shape(self, shape)
}
func (self RenderingServer) CameraAttributesSetDofBlur(camera_attributes RID, far_enable bool, far_distance Float, far_transition Float, near_enable bool, near_distance Float, near_transition Float, amount Float) {
	self.Runtime.RenderingServer_camera_attributes_set_dof_blur(self, camera_attributes, far_enable, far_distance, far_transition, near_enable, near_distance, near_transition, amount)
}
func (self RenderingServer) CameraAttributesSetExposure(camera_attributes RID, multiplier Float, normalization Float) {
	self.Runtime.RenderingServer_camera_attributes_set_exposure(self, camera_attributes, multiplier, normalization)
}
func (self RenderingServer) CameraAttributesSetAutoExposure(camera_attributes RID, enable bool, min_sensitivity Float, max_sensitivity Float, speed Float, scale Float) {
	self.Runtime.RenderingServer_camera_attributes_set_auto_exposure(self, camera_attributes, enable, min_sensitivity, max_sensitivity, speed, scale)
}
func (self RenderingServer) ScenarioCreate() RID {
	return self.Runtime.RenderingServer_scenario_create(self)
}
func (self RenderingServer) ScenarioSetEnvironment(scenario RID, environment RID) {
	self.Runtime.RenderingServer_scenario_set_environment(self, scenario, environment)
}
func (self RenderingServer) ScenarioSetFallbackEnvironment(scenario RID, environment RID) {
	self.Runtime.RenderingServer_scenario_set_fallback_environment(self, scenario, environment)
}
func (self RenderingServer) ScenarioSetCameraAttributes(scenario RID, effects RID) {
	self.Runtime.RenderingServer_scenario_set_camera_attributes(self, scenario, effects)
}
func (self RenderingServer) InstanceCreate2(base RID, scenario RID) RID {
	return self.Runtime.RenderingServer_instance_create2(self, base, scenario)
}
func (self RenderingServer) InstanceCreate() RID {
	return self.Runtime.RenderingServer_instance_create(self)
}
func (self RenderingServer) InstanceSetBase(instance RID, base RID) {
	self.Runtime.RenderingServer_instance_set_base(self, instance, base)
}
func (self RenderingServer) InstanceSetScenario(instance RID, scenario RID) {
	self.Runtime.RenderingServer_instance_set_scenario(self, instance, scenario)
}
func (self RenderingServer) InstanceSetLayerMask(instance RID, mask int64) {
	self.Runtime.RenderingServer_instance_set_layer_mask(self, instance, mask)
}
func (self RenderingServer) InstanceSetPivotData(instance RID, sorting_offset Float, use_aabb_center bool) {
	self.Runtime.RenderingServer_instance_set_pivot_data(self, instance, sorting_offset, use_aabb_center)
}
func (self RenderingServer) InstanceSetTransform(instance RID, transform Transform3D) {
	self.Runtime.RenderingServer_instance_set_transform(self, instance, transform)
}
func (self RenderingServer) InstanceAttachObjectInstanceId(instance RID, id int64) {
	self.Runtime.RenderingServer_instance_attach_object_instance_id(self, instance, id)
}
func (self RenderingServer) InstanceSetBlendShapeWeight(instance RID, shape int64, weight Float) {
	self.Runtime.RenderingServer_instance_set_blend_shape_weight(self, instance, shape, weight)
}
func (self RenderingServer) InstanceSetSurfaceOverrideMaterial(instance RID, surface int64, material RID) {
	self.Runtime.RenderingServer_instance_set_surface_override_material(self, instance, surface, material)
}
func (self RenderingServer) InstanceSetVisible(instance RID, visible bool) {
	self.Runtime.RenderingServer_instance_set_visible(self, instance, visible)
}
func (self RenderingServer) InstanceGeometrySetTransparency(instance RID, transparency Float) {
	self.Runtime.RenderingServer_instance_geometry_set_transparency(self, instance, transparency)
}
func (self RenderingServer) InstanceSetCustomAabb(instance RID, aabb AABB) {
	self.Runtime.RenderingServer_instance_set_custom_aabb(self, instance, aabb)
}
func (self RenderingServer) InstanceAttachSkeleton(instance RID, skeleton RID) {
	self.Runtime.RenderingServer_instance_attach_skeleton(self, instance, skeleton)
}
func (self RenderingServer) InstanceSetExtraVisibilityMargin(instance RID, margin Float) {
	self.Runtime.RenderingServer_instance_set_extra_visibility_margin(self, instance, margin)
}
func (self RenderingServer) InstanceSetVisibilityParent(instance RID, parent RID) {
	self.Runtime.RenderingServer_instance_set_visibility_parent(self, instance, parent)
}
func (self RenderingServer) InstanceSetIgnoreCulling(instance RID, enabled bool) {
	self.Runtime.RenderingServer_instance_set_ignore_culling(self, instance, enabled)
}
func (self RenderingServer) InstanceGeometrySetFlag(instance RID, flag RenderingServerInstanceFlags, enabled bool) {
	self.Runtime.RenderingServer_instance_geometry_set_flag(self, instance, flag, enabled)
}
func (self RenderingServer) InstanceGeometrySetCastShadowsSetting(instance RID, shadow_casting_setting RenderingServerShadowCastingSetting) {
	self.Runtime.RenderingServer_instance_geometry_set_cast_shadows_setting(self, instance, shadow_casting_setting)
}
func (self RenderingServer) InstanceGeometrySetMaterialOverride(instance RID, material RID) {
	self.Runtime.RenderingServer_instance_geometry_set_material_override(self, instance, material)
}
func (self RenderingServer) InstanceGeometrySetMaterialOverlay(instance RID, material RID) {
	self.Runtime.RenderingServer_instance_geometry_set_material_overlay(self, instance, material)
}
func (self RenderingServer) InstanceGeometrySetVisibilityRange(instance RID, min Float, max Float, min_margin Float, max_margin Float, fade_mode RenderingServerVisibilityRangeFadeMode) {
	self.Runtime.RenderingServer_instance_geometry_set_visibility_range(self, instance, min, max, min_margin, max_margin, fade_mode)
}
func (self RenderingServer) InstanceGeometrySetLightmap(instance RID, lightmap RID, lightmap_uv_scale Rect2, lightmap_slice int64) {
	self.Runtime.RenderingServer_instance_geometry_set_lightmap(self, instance, lightmap, lightmap_uv_scale, lightmap_slice)
}
func (self RenderingServer) InstanceGeometrySetLodBias(instance RID, lod_bias Float) {
	self.Runtime.RenderingServer_instance_geometry_set_lod_bias(self, instance, lod_bias)
}
func (self RenderingServer) InstanceGeometrySetShaderParameter(instance RID, parameter string, value any) {
	self.Runtime.RenderingServer_instance_geometry_set_shader_parameter(self, instance, parameter, value)
}
func (self RenderingServer) InstanceGeometryGetShaderParameter(instance RID, parameter string) any {
	return self.Runtime.RenderingServer_instance_geometry_get_shader_parameter(self, instance, parameter)
}
func (self RenderingServer) InstanceGeometryGetShaderParameterDefaultValue(instance RID, parameter string) any {
	return self.Runtime.RenderingServer_instance_geometry_get_shader_parameter_default_value(self, instance, parameter)
}
func (self RenderingServer) InstanceGeometryGetShaderParameterList(instance RID) ArrayOf[Dictionary] {
	return self.Runtime.RenderingServer_instance_geometry_get_shader_parameter_list(self, instance)
}
func (self RenderingServer) InstancesCullAabb(aabb AABB, scenario RID) PackedInt64Array {
	return self.Runtime.RenderingServer_instances_cull_aabb(self, aabb, scenario)
}
func (self RenderingServer) InstancesCullRay(from Vector3, to Vector3, scenario RID) PackedInt64Array {
	return self.Runtime.RenderingServer_instances_cull_ray(self, from, to, scenario)
}
func (self RenderingServer) InstancesCullConvex(convex ArrayOf[Plane], scenario RID) PackedInt64Array {
	return self.Runtime.RenderingServer_instances_cull_convex(self, convex, scenario)
}
func (self RenderingServer) BakeRenderUv2(base RID, material_overrides ArrayOf[RID], image_size Vector2i) ArrayOf[Image] {
	return self.Runtime.RenderingServer_bake_render_uv2(self, base, material_overrides, image_size)
}
func (self RenderingServer) CanvasCreate() RID {
	return self.Runtime.RenderingServer_canvas_create(self)
}
func (self RenderingServer) CanvasSetItemMirroring(canvas RID, item RID, mirroring Vector2) {
	self.Runtime.RenderingServer_canvas_set_item_mirroring(self, canvas, item, mirroring)
}
func (self RenderingServer) CanvasSetModulate(canvas RID, color Color) {
	self.Runtime.RenderingServer_canvas_set_modulate(self, canvas, color)
}
func (self RenderingServer) CanvasSetDisableScale(disable bool) {
	self.Runtime.RenderingServer_canvas_set_disable_scale(self, disable)
}
func (self RenderingServer) CanvasTextureCreate() RID {
	return self.Runtime.RenderingServer_canvas_texture_create(self)
}
func (self RenderingServer) CanvasTextureSetChannel(canvas_texture RID, channel RenderingServerCanvasTextureChannel, texture RID) {
	self.Runtime.RenderingServer_canvas_texture_set_channel(self, canvas_texture, channel, texture)
}
func (self RenderingServer) CanvasTextureSetShadingParameters(canvas_texture RID, base_color Color, shininess Float) {
	self.Runtime.RenderingServer_canvas_texture_set_shading_parameters(self, canvas_texture, base_color, shininess)
}
func (self RenderingServer) CanvasTextureSetTextureFilter(canvas_texture RID, filter RenderingServerCanvasItemTextureFilter) {
	self.Runtime.RenderingServer_canvas_texture_set_texture_filter(self, canvas_texture, filter)
}
func (self RenderingServer) CanvasTextureSetTextureRepeat(canvas_texture RID, repeat RenderingServerCanvasItemTextureRepeat) {
	self.Runtime.RenderingServer_canvas_texture_set_texture_repeat(self, canvas_texture, repeat)
}
func (self RenderingServer) CanvasItemCreate() RID {
	return self.Runtime.RenderingServer_canvas_item_create(self)
}
func (self RenderingServer) CanvasItemSetParent(item RID, parent RID) {
	self.Runtime.RenderingServer_canvas_item_set_parent(self, item, parent)
}
func (self RenderingServer) CanvasItemSetDefaultTextureFilter(item RID, filter RenderingServerCanvasItemTextureFilter) {
	self.Runtime.RenderingServer_canvas_item_set_default_texture_filter(self, item, filter)
}
func (self RenderingServer) CanvasItemSetDefaultTextureRepeat(item RID, repeat RenderingServerCanvasItemTextureRepeat) {
	self.Runtime.RenderingServer_canvas_item_set_default_texture_repeat(self, item, repeat)
}
func (self RenderingServer) CanvasItemSetVisible(item RID, visible bool) {
	self.Runtime.RenderingServer_canvas_item_set_visible(self, item, visible)
}
func (self RenderingServer) CanvasItemSetLightMask(item RID, mask int64) {
	self.Runtime.RenderingServer_canvas_item_set_light_mask(self, item, mask)
}
func (self RenderingServer) CanvasItemSetVisibilityLayer(item RID, visibility_layer int64) {
	self.Runtime.RenderingServer_canvas_item_set_visibility_layer(self, item, visibility_layer)
}
func (self RenderingServer) CanvasItemSetTransform(item RID, transform Transform2D) {
	self.Runtime.RenderingServer_canvas_item_set_transform(self, item, transform)
}
func (self RenderingServer) CanvasItemSetClip(item RID, clip bool) {
	self.Runtime.RenderingServer_canvas_item_set_clip(self, item, clip)
}
func (self RenderingServer) CanvasItemSetDistanceFieldMode(item RID, enabled bool) {
	self.Runtime.RenderingServer_canvas_item_set_distance_field_mode(self, item, enabled)
}
func (self RenderingServer) CanvasItemSetCustomRect(item RID, use_custom_rect bool, rect Rect2) {
	self.Runtime.RenderingServer_canvas_item_set_custom_rect(self, item, use_custom_rect, rect)
}
func (self RenderingServer) CanvasItemSetModulate(item RID, color Color) {
	self.Runtime.RenderingServer_canvas_item_set_modulate(self, item, color)
}
func (self RenderingServer) CanvasItemSetSelfModulate(item RID, color Color) {
	self.Runtime.RenderingServer_canvas_item_set_self_modulate(self, item, color)
}
func (self RenderingServer) CanvasItemSetDrawBehindParent(item RID, enabled bool) {
	self.Runtime.RenderingServer_canvas_item_set_draw_behind_parent(self, item, enabled)
}
func (self RenderingServer) CanvasItemAddLine(item RID, from Vector2, to Vector2, color Color, width Float, antialiased bool) {
	self.Runtime.RenderingServer_canvas_item_add_line(self, item, from, to, color, width, antialiased)
}
func (self RenderingServer) CanvasItemAddPolyline(item RID, points PackedVector2Array, colors PackedColorArray, width Float, antialiased bool) {
	self.Runtime.RenderingServer_canvas_item_add_polyline(self, item, points, colors, width, antialiased)
}
func (self RenderingServer) CanvasItemAddMultiline(item RID, points PackedVector2Array, colors PackedColorArray, width Float) {
	self.Runtime.RenderingServer_canvas_item_add_multiline(self, item, points, colors, width)
}
func (self RenderingServer) CanvasItemAddRect(item RID, rect Rect2, color Color) {
	self.Runtime.RenderingServer_canvas_item_add_rect(self, item, rect, color)
}
func (self RenderingServer) CanvasItemAddCircle(item RID, pos Vector2, radius Float, color Color) {
	self.Runtime.RenderingServer_canvas_item_add_circle(self, item, pos, radius, color)
}
func (self RenderingServer) CanvasItemAddTextureRect(item RID, rect Rect2, texture RID, tile bool, modulate Color, transpose bool) {
	self.Runtime.RenderingServer_canvas_item_add_texture_rect(self, item, rect, texture, tile, modulate, transpose)
}
func (self RenderingServer) CanvasItemAddMsdfTextureRectRegion(item RID, rect Rect2, texture RID, src_rect Rect2, modulate Color, outline_size int64, px_range Float, scale Float) {
	self.Runtime.RenderingServer_canvas_item_add_msdf_texture_rect_region(self, item, rect, texture, src_rect, modulate, outline_size, px_range, scale)
}
func (self RenderingServer) CanvasItemAddLcdTextureRectRegion(item RID, rect Rect2, texture RID, src_rect Rect2, modulate Color) {
	self.Runtime.RenderingServer_canvas_item_add_lcd_texture_rect_region(self, item, rect, texture, src_rect, modulate)
}
func (self RenderingServer) CanvasItemAddTextureRectRegion(item RID, rect Rect2, texture RID, src_rect Rect2, modulate Color, transpose bool, clip_uv bool) {
	self.Runtime.RenderingServer_canvas_item_add_texture_rect_region(self, item, rect, texture, src_rect, modulate, transpose, clip_uv)
}
func (self RenderingServer) CanvasItemAddNinePatch(item RID, rect Rect2, source Rect2, texture RID, topleft Vector2, bottomright Vector2, x_axis_mode RenderingServerNinePatchAxisMode, y_axis_mode RenderingServerNinePatchAxisMode, draw_center bool, modulate Color) {
	self.Runtime.RenderingServer_canvas_item_add_nine_patch(self, item, rect, source, texture, topleft, bottomright, x_axis_mode, y_axis_mode, draw_center, modulate)
}
func (self RenderingServer) CanvasItemAddPrimitive(item RID, points PackedVector2Array, colors PackedColorArray, uvs PackedVector2Array, texture RID) {
	self.Runtime.RenderingServer_canvas_item_add_primitive(self, item, points, colors, uvs, texture)
}
func (self RenderingServer) CanvasItemAddPolygon(item RID, points PackedVector2Array, colors PackedColorArray, uvs PackedVector2Array, texture RID) {
	self.Runtime.RenderingServer_canvas_item_add_polygon(self, item, points, colors, uvs, texture)
}
func (self RenderingServer) CanvasItemAddTriangleArray(item RID, indices PackedInt32Array, points PackedVector2Array, colors PackedColorArray, uvs PackedVector2Array, bones PackedInt32Array, weights PackedFloat32Array, texture RID, count int64) {
	self.Runtime.RenderingServer_canvas_item_add_triangle_array(self, item, indices, points, colors, uvs, bones, weights, texture, count)
}
func (self RenderingServer) CanvasItemAddMesh(item RID, mesh RID, transform Transform2D, modulate Color, texture RID) {
	self.Runtime.RenderingServer_canvas_item_add_mesh(self, item, mesh, transform, modulate, texture)
}
func (self RenderingServer) CanvasItemAddMultimesh(item RID, mesh RID, texture RID) {
	self.Runtime.RenderingServer_canvas_item_add_multimesh(self, item, mesh, texture)
}
func (self RenderingServer) CanvasItemAddParticles(item RID, particles RID, texture RID) {
	self.Runtime.RenderingServer_canvas_item_add_particles(self, item, particles, texture)
}
func (self RenderingServer) CanvasItemAddSetTransform(item RID, transform Transform2D) {
	self.Runtime.RenderingServer_canvas_item_add_set_transform(self, item, transform)
}
func (self RenderingServer) CanvasItemAddClipIgnore(item RID, ignore bool) {
	self.Runtime.RenderingServer_canvas_item_add_clip_ignore(self, item, ignore)
}
func (self RenderingServer) CanvasItemAddAnimationSlice(item RID, animation_length Float, slice_begin Float, slice_end Float, offset Float) {
	self.Runtime.RenderingServer_canvas_item_add_animation_slice(self, item, animation_length, slice_begin, slice_end, offset)
}
func (self RenderingServer) CanvasItemSetSortChildrenByY(item RID, enabled bool) {
	self.Runtime.RenderingServer_canvas_item_set_sort_children_by_y(self, item, enabled)
}
func (self RenderingServer) CanvasItemSetZIndex(item RID, z_index int64) {
	self.Runtime.RenderingServer_canvas_item_set_z_index(self, item, z_index)
}
func (self RenderingServer) CanvasItemSetZAsRelativeToParent(item RID, enabled bool) {
	self.Runtime.RenderingServer_canvas_item_set_z_as_relative_to_parent(self, item, enabled)
}
func (self RenderingServer) CanvasItemSetCopyToBackbuffer(item RID, enabled bool, rect Rect2) {
	self.Runtime.RenderingServer_canvas_item_set_copy_to_backbuffer(self, item, enabled, rect)
}
func (self RenderingServer) CanvasItemClear(item RID) {
	self.Runtime.RenderingServer_canvas_item_clear(self, item)
}
func (self RenderingServer) CanvasItemSetDrawIndex(item RID, index int64) {
	self.Runtime.RenderingServer_canvas_item_set_draw_index(self, item, index)
}
func (self RenderingServer) CanvasItemSetMaterial(item RID, material RID) {
	self.Runtime.RenderingServer_canvas_item_set_material(self, item, material)
}
func (self RenderingServer) CanvasItemSetUseParentMaterial(item RID, enabled bool) {
	self.Runtime.RenderingServer_canvas_item_set_use_parent_material(self, item, enabled)
}
func (self RenderingServer) CanvasItemSetVisibilityNotifier(item RID, enable bool, area Rect2, enter_callable Callable, exit_callable Callable) {
	self.Runtime.RenderingServer_canvas_item_set_visibility_notifier(self, item, enable, area, enter_callable, exit_callable)
}
func (self RenderingServer) CanvasItemSetCanvasGroupMode(item RID, mode RenderingServerCanvasGroupMode, clear_margin Float, fit_empty bool, fit_margin Float, blur_mipmaps bool) {
	self.Runtime.RenderingServer_canvas_item_set_canvas_group_mode(self, item, mode, clear_margin, fit_empty, fit_margin, blur_mipmaps)
}
func (self RenderingServer) DebugCanvasItemGetRect(item RID) Rect2 {
	return self.Runtime.RenderingServer_debug_canvas_item_get_rect(self, item)
}
func (self RenderingServer) CanvasLightCreate() RID {
	return self.Runtime.RenderingServer_canvas_light_create(self)
}
func (self RenderingServer) CanvasLightAttachToCanvas(light RID, canvas RID) {
	self.Runtime.RenderingServer_canvas_light_attach_to_canvas(self, light, canvas)
}
func (self RenderingServer) CanvasLightSetEnabled(light RID, enabled bool) {
	self.Runtime.RenderingServer_canvas_light_set_enabled(self, light, enabled)
}
func (self RenderingServer) CanvasLightSetTextureScale(light RID, scale Float) {
	self.Runtime.RenderingServer_canvas_light_set_texture_scale(self, light, scale)
}
func (self RenderingServer) CanvasLightSetTransform(light RID, transform Transform2D) {
	self.Runtime.RenderingServer_canvas_light_set_transform(self, light, transform)
}
func (self RenderingServer) CanvasLightSetTexture(light RID, texture RID) {
	self.Runtime.RenderingServer_canvas_light_set_texture(self, light, texture)
}
func (self RenderingServer) CanvasLightSetTextureOffset(light RID, offset Vector2) {
	self.Runtime.RenderingServer_canvas_light_set_texture_offset(self, light, offset)
}
func (self RenderingServer) CanvasLightSetColor(light RID, color Color) {
	self.Runtime.RenderingServer_canvas_light_set_color(self, light, color)
}
func (self RenderingServer) CanvasLightSetHeight(light RID, height Float) {
	self.Runtime.RenderingServer_canvas_light_set_height(self, light, height)
}
func (self RenderingServer) CanvasLightSetEnergy(light RID, energy Float) {
	self.Runtime.RenderingServer_canvas_light_set_energy(self, light, energy)
}
func (self RenderingServer) CanvasLightSetZRange(light RID, min_z int64, max_z int64) {
	self.Runtime.RenderingServer_canvas_light_set_z_range(self, light, min_z, max_z)
}
func (self RenderingServer) CanvasLightSetLayerRange(light RID, min_layer int64, max_layer int64) {
	self.Runtime.RenderingServer_canvas_light_set_layer_range(self, light, min_layer, max_layer)
}
func (self RenderingServer) CanvasLightSetItemCullMask(light RID, mask int64) {
	self.Runtime.RenderingServer_canvas_light_set_item_cull_mask(self, light, mask)
}
func (self RenderingServer) CanvasLightSetItemShadowCullMask(light RID, mask int64) {
	self.Runtime.RenderingServer_canvas_light_set_item_shadow_cull_mask(self, light, mask)
}
func (self RenderingServer) CanvasLightSetMode(light RID, mode RenderingServerCanvasLightMode) {
	self.Runtime.RenderingServer_canvas_light_set_mode(self, light, mode)
}
func (self RenderingServer) CanvasLightSetShadowEnabled(light RID, enabled bool) {
	self.Runtime.RenderingServer_canvas_light_set_shadow_enabled(self, light, enabled)
}
func (self RenderingServer) CanvasLightSetShadowFilter(light RID, filter RenderingServerCanvasLightShadowFilter) {
	self.Runtime.RenderingServer_canvas_light_set_shadow_filter(self, light, filter)
}
func (self RenderingServer) CanvasLightSetShadowColor(light RID, color Color) {
	self.Runtime.RenderingServer_canvas_light_set_shadow_color(self, light, color)
}
func (self RenderingServer) CanvasLightSetShadowSmooth(light RID, smooth Float) {
	self.Runtime.RenderingServer_canvas_light_set_shadow_smooth(self, light, smooth)
}
func (self RenderingServer) CanvasLightSetBlendMode(light RID, mode RenderingServerCanvasLightBlendMode) {
	self.Runtime.RenderingServer_canvas_light_set_blend_mode(self, light, mode)
}
func (self RenderingServer) CanvasLightOccluderCreate() RID {
	return self.Runtime.RenderingServer_canvas_light_occluder_create(self)
}
func (self RenderingServer) CanvasLightOccluderAttachToCanvas(occluder RID, canvas RID) {
	self.Runtime.RenderingServer_canvas_light_occluder_attach_to_canvas(self, occluder, canvas)
}
func (self RenderingServer) CanvasLightOccluderSetEnabled(occluder RID, enabled bool) {
	self.Runtime.RenderingServer_canvas_light_occluder_set_enabled(self, occluder, enabled)
}
func (self RenderingServer) CanvasLightOccluderSetPolygon(occluder RID, polygon RID) {
	self.Runtime.RenderingServer_canvas_light_occluder_set_polygon(self, occluder, polygon)
}
func (self RenderingServer) CanvasLightOccluderSetAsSdfCollision(occluder RID, enable bool) {
	self.Runtime.RenderingServer_canvas_light_occluder_set_as_sdf_collision(self, occluder, enable)
}
func (self RenderingServer) CanvasLightOccluderSetTransform(occluder RID, transform Transform2D) {
	self.Runtime.RenderingServer_canvas_light_occluder_set_transform(self, occluder, transform)
}
func (self RenderingServer) CanvasLightOccluderSetLightMask(occluder RID, mask int64) {
	self.Runtime.RenderingServer_canvas_light_occluder_set_light_mask(self, occluder, mask)
}
func (self RenderingServer) CanvasOccluderPolygonCreate() RID {
	return self.Runtime.RenderingServer_canvas_occluder_polygon_create(self)
}
func (self RenderingServer) CanvasOccluderPolygonSetShape(occluder_polygon RID, shape PackedVector2Array, closed bool) {
	self.Runtime.RenderingServer_canvas_occluder_polygon_set_shape(self, occluder_polygon, shape, closed)
}
func (self RenderingServer) CanvasOccluderPolygonSetCullMode(occluder_polygon RID, mode RenderingServerCanvasOccluderPolygonCullMode) {
	self.Runtime.RenderingServer_canvas_occluder_polygon_set_cull_mode(self, occluder_polygon, mode)
}
func (self RenderingServer) CanvasSetShadowTextureSize(size int64) {
	self.Runtime.RenderingServer_canvas_set_shadow_texture_size(self, size)
}
func (self RenderingServer) GlobalShaderParameterAdd(name string, atype RenderingServerGlobalShaderParameterType, default_value any) {
	self.Runtime.RenderingServer_global_shader_parameter_add(self, name, atype, default_value)
}
func (self RenderingServer) GlobalShaderParameterRemove(name string) {
	self.Runtime.RenderingServer_global_shader_parameter_remove(self, name)
}
func (self RenderingServer) GlobalShaderParameterGetList() ArrayOf[string] {
	return self.Runtime.RenderingServer_global_shader_parameter_get_list(self)
}
func (self RenderingServer) GlobalShaderParameterSet(name string, value any) {
	self.Runtime.RenderingServer_global_shader_parameter_set(self, name, value)
}
func (self RenderingServer) GlobalShaderParameterSetOverride(name string, value any) {
	self.Runtime.RenderingServer_global_shader_parameter_set_override(self, name, value)
}
func (self RenderingServer) GlobalShaderParameterGet(name string) any {
	return self.Runtime.RenderingServer_global_shader_parameter_get(self, name)
}
func (self RenderingServer) GlobalShaderParameterGetType(name string) RenderingServerGlobalShaderParameterType {
	return self.Runtime.RenderingServer_global_shader_parameter_get_type(self, name)
}
func (self RenderingServer) FreeRid(rid RID) {
	self.Runtime.RenderingServer_free_rid(self, rid)
}
func (self RenderingServer) RequestFrameDrawnCallback(callable Callable) {
	self.Runtime.RenderingServer_request_frame_drawn_callback(self, callable)
}
func (self RenderingServer) HasChanged() bool {
	return self.Runtime.RenderingServer_has_changed(self)
}
func (self RenderingServer) GetRenderingInfo(info RenderingServerRenderingInfo) int64 {
	return self.Runtime.RenderingServer_get_rendering_info(self, info)
}
func (self RenderingServer) GetVideoAdapterName() string {
	return self.Runtime.RenderingServer_get_video_adapter_name(self)
}
func (self RenderingServer) GetVideoAdapterVendor() string {
	return self.Runtime.RenderingServer_get_video_adapter_vendor(self)
}
func (self RenderingServer) GetVideoAdapterType() RenderingDeviceDeviceType {
	return self.Runtime.RenderingServer_get_video_adapter_type(self)
}
func (self RenderingServer) GetVideoAdapterApiVersion() string {
	return self.Runtime.RenderingServer_get_video_adapter_api_version(self)
}
func (self RenderingServer) MakeSphereMesh(latitudes int64, longitudes int64, radius Float) RID {
	return self.Runtime.RenderingServer_make_sphere_mesh(self, latitudes, longitudes, radius)
}
func (self RenderingServer) GetTestCube() RID {
	return self.Runtime.RenderingServer_get_test_cube(self)
}
func (self RenderingServer) GetTestTexture() RID {
	return self.Runtime.RenderingServer_get_test_texture(self)
}
func (self RenderingServer) GetWhiteTexture() RID {
	return self.Runtime.RenderingServer_get_white_texture(self)
}
func (self RenderingServer) SetBootImage(image Image, color Color, scale bool, use_filter bool) {
	self.Runtime.RenderingServer_set_boot_image(self, image, color, scale, use_filter)
}
func (self RenderingServer) GetDefaultClearColor() Color {
	return self.Runtime.RenderingServer_get_default_clear_color(self)
}
func (self RenderingServer) SetDefaultClearColor(color Color) {
	self.Runtime.RenderingServer_set_default_clear_color(self, color)
}
func (self RenderingServer) HasFeature(feature RenderingServerFeatures) bool {
	return self.Runtime.RenderingServer_has_feature(self, feature)
}
func (self RenderingServer) HasOsFeature(feature string) bool {
	return self.Runtime.RenderingServer_has_os_feature(self, feature)
}
func (self RenderingServer) SetDebugGenerateWireframes(generate bool) {
	self.Runtime.RenderingServer_set_debug_generate_wireframes(self, generate)
}
func (self RenderingServer) IsRenderLoopEnabled() bool {
	return self.Runtime.RenderingServer_is_render_loop_enabled(self)
}
func (self RenderingServer) SetRenderLoopEnabled(enabled bool) {
	self.Runtime.RenderingServer_set_render_loop_enabled(self, enabled)
}
func (self RenderingServer) GetFrameSetupTimeCpu() Float {
	return self.Runtime.RenderingServer_get_frame_setup_time_cpu(self)
}
func (self RenderingServer) ForceSync() {
	self.Runtime.RenderingServer_force_sync(self)
}
func (self RenderingServer) ForceDraw(swap_buffers bool, frame_step Float) {
	self.Runtime.RenderingServer_force_draw(self, swap_buffers, frame_step)
}
func (self RenderingServer) GetRenderingDevice() RenderingDevice {
	return self.Runtime.RenderingServer_get_rendering_device(self)
}
func (self RenderingServer) CreateLocalRenderingDevice() RenderingDevice {
	return self.Runtime.RenderingServer_create_local_rendering_device(self)
}
func (self RenderingServer) CallOnRenderThread(callable Callable) {
	self.Runtime.RenderingServer_call_on_render_thread(self, callable)
}

type extendsResource struct {
	_ [0]*extendsResource
	class
}

func (self Resource) RefCounted() RefCounted {
	var parent RefCounted
	parent.class = self.class
	return parent
}
func (self Resource) SetPath(path string) {
	self.Runtime.Resource_set_path(self, path)
}
func (self Resource) TakeOverPath(path string) {
	self.Runtime.Resource_take_over_path(self, path)
}
func (self Resource) GetPath() string {
	return self.Runtime.Resource_get_path(self)
}
func (self Resource) SetName(name string) {
	self.Runtime.Resource_set_name(self, name)
}
func (self Resource) GetName() string {
	return self.Runtime.Resource_get_name(self)
}
func (self Resource) GetRid() RID {
	return self.Runtime.Resource_get_rid(self)
}
func (self Resource) SetLocalToScene(enable bool) {
	self.Runtime.Resource_set_local_to_scene(self, enable)
}
func (self Resource) IsLocalToScene() bool {
	return self.Runtime.Resource_is_local_to_scene(self)
}
func (self Resource) GetLocalScene() Node {
	return self.Runtime.Resource_get_local_scene(self)
}
func (self Resource) SetupLocalToScene() {
	self.Runtime.Resource_setup_local_to_scene(self)
}
func (self Resource) EmitChanged() {
	self.Runtime.Resource_emit_changed(self)
}
func (self Resource) Duplicate(subresources bool) Resource {
	return self.Runtime.Resource_duplicate(self, subresources)
}

type extendsResourceFormatLoader struct {
	_ [0]*extendsResourceFormatLoader
	class
}

func (self ResourceFormatLoader) RefCounted() RefCounted {
	var parent RefCounted
	parent.class = self.class
	return parent
}

type extendsResourceFormatSaver struct {
	_ [0]*extendsResourceFormatSaver
	class
}

func (self ResourceFormatSaver) RefCounted() RefCounted {
	var parent RefCounted
	parent.class = self.class
	return parent
}

type extendsResourceImporter struct {
	_ [0]*extendsResourceImporter
	class
}

func (self ResourceImporter) RefCounted() RefCounted {
	var parent RefCounted
	parent.class = self.class
	return parent
}

type extendsResourceImporterBMFont struct {
	_ [0]*extendsResourceImporterBMFont
	class
}

func (self ResourceImporterBMFont) ResourceImporter() ResourceImporter {
	var parent ResourceImporter
	parent.class = self.class
	return parent
}

type extendsResourceImporterBitMap struct {
	_ [0]*extendsResourceImporterBitMap
	class
}

func (self ResourceImporterBitMap) ResourceImporter() ResourceImporter {
	var parent ResourceImporter
	parent.class = self.class
	return parent
}

type extendsResourceImporterCSVTranslation struct {
	_ [0]*extendsResourceImporterCSVTranslation
	class
}

func (self ResourceImporterCSVTranslation) ResourceImporter() ResourceImporter {
	var parent ResourceImporter
	parent.class = self.class
	return parent
}

type extendsResourceImporterDynamicFont struct {
	_ [0]*extendsResourceImporterDynamicFont
	class
}

func (self ResourceImporterDynamicFont) ResourceImporter() ResourceImporter {
	var parent ResourceImporter
	parent.class = self.class
	return parent
}

type extendsResourceImporterImage struct {
	_ [0]*extendsResourceImporterImage
	class
}

func (self ResourceImporterImage) ResourceImporter() ResourceImporter {
	var parent ResourceImporter
	parent.class = self.class
	return parent
}

type extendsResourceImporterImageFont struct {
	_ [0]*extendsResourceImporterImageFont
	class
}

func (self ResourceImporterImageFont) ResourceImporter() ResourceImporter {
	var parent ResourceImporter
	parent.class = self.class
	return parent
}

type extendsResourceImporterLayeredTexture struct {
	_ [0]*extendsResourceImporterLayeredTexture
	class
}

func (self ResourceImporterLayeredTexture) ResourceImporter() ResourceImporter {
	var parent ResourceImporter
	parent.class = self.class
	return parent
}

type extendsResourceImporterMP3 struct {
	_ [0]*extendsResourceImporterMP3
	class
}

func (self ResourceImporterMP3) ResourceImporter() ResourceImporter {
	var parent ResourceImporter
	parent.class = self.class
	return parent
}

type extendsResourceImporterOBJ struct {
	_ [0]*extendsResourceImporterOBJ
	class
}

func (self ResourceImporterOBJ) ResourceImporter() ResourceImporter {
	var parent ResourceImporter
	parent.class = self.class
	return parent
}

type extendsResourceImporterOggVorbis struct {
	_ [0]*extendsResourceImporterOggVorbis
	class
}

func (self ResourceImporterOggVorbis) ResourceImporter() ResourceImporter {
	var parent ResourceImporter
	parent.class = self.class
	return parent
}
func (self ResourceImporterOggVorbis) LoadFromBuffer(buffer PackedByteArray) AudioStreamOggVorbis {
	return self.Runtime.ResourceImporterOggVorbis_load_from_buffer(self, buffer)
}
func (self ResourceImporterOggVorbis) LoadFromFile(path string) AudioStreamOggVorbis {
	return self.Runtime.ResourceImporterOggVorbis_load_from_file(self, path)
}

type extendsResourceImporterScene struct {
	_ [0]*extendsResourceImporterScene
	class
}

func (self ResourceImporterScene) ResourceImporter() ResourceImporter {
	var parent ResourceImporter
	parent.class = self.class
	return parent
}

type extendsResourceImporterShaderFile struct {
	_ [0]*extendsResourceImporterShaderFile
	class
}

func (self ResourceImporterShaderFile) ResourceImporter() ResourceImporter {
	var parent ResourceImporter
	parent.class = self.class
	return parent
}

type extendsResourceImporterTexture struct {
	_ [0]*extendsResourceImporterTexture
	class
}

func (self ResourceImporterTexture) ResourceImporter() ResourceImporter {
	var parent ResourceImporter
	parent.class = self.class
	return parent
}

type extendsResourceImporterTextureAtlas struct {
	_ [0]*extendsResourceImporterTextureAtlas
	class
}

func (self ResourceImporterTextureAtlas) ResourceImporter() ResourceImporter {
	var parent ResourceImporter
	parent.class = self.class
	return parent
}

type extendsResourceImporterWAV struct {
	_ [0]*extendsResourceImporterWAV
	class
}

func (self ResourceImporterWAV) ResourceImporter() ResourceImporter {
	var parent ResourceImporter
	parent.class = self.class
	return parent
}

type extendsResourceLoader struct {
	_ [0]*extendsResourceLoader
	class
}

func (self ResourceLoader) Object() Object {
	var parent Object
	parent.class = self.class
	return parent
}
func (self ResourceLoader) LoadThreadedRequest(path string, type_hint string, use_sub_threads bool, cache_mode ResourceLoaderCacheMode) int64 {
	return self.Runtime.ResourceLoader_load_threaded_request(self, path, type_hint, use_sub_threads, cache_mode)
}
func (self ResourceLoader) LoadThreadedGetStatus(path string, progress Array) ResourceLoaderThreadLoadStatus {
	return self.Runtime.ResourceLoader_load_threaded_get_status(self, path, progress)
}
func (self ResourceLoader) LoadThreadedGet(path string) Resource {
	return self.Runtime.ResourceLoader_load_threaded_get(self, path)
}
func (self ResourceLoader) Load(path string, type_hint string, cache_mode ResourceLoaderCacheMode) Resource {
	return self.Runtime.ResourceLoader_load(self, path, type_hint, cache_mode)
}
func (self ResourceLoader) GetRecognizedExtensionsForType(atype string) PackedStringArray {
	return self.Runtime.ResourceLoader_get_recognized_extensions_for_type(self, atype)
}
func (self ResourceLoader) AddResourceFormatLoader(format_loader ResourceFormatLoader, at_front bool) {
	self.Runtime.ResourceLoader_add_resource_format_loader(self, format_loader, at_front)
}
func (self ResourceLoader) RemoveResourceFormatLoader(format_loader ResourceFormatLoader) {
	self.Runtime.ResourceLoader_remove_resource_format_loader(self, format_loader)
}
func (self ResourceLoader) SetAbortOnMissingResources(abort bool) {
	self.Runtime.ResourceLoader_set_abort_on_missing_resources(self, abort)
}
func (self ResourceLoader) GetDependencies(path string) PackedStringArray {
	return self.Runtime.ResourceLoader_get_dependencies(self, path)
}
func (self ResourceLoader) HasCached(path string) bool {
	return self.Runtime.ResourceLoader_has_cached(self, path)
}
func (self ResourceLoader) Exists(path string, type_hint string) bool {
	return self.Runtime.ResourceLoader_exists(self, path, type_hint)
}
func (self ResourceLoader) GetResourceUid(path string) int64 {
	return self.Runtime.ResourceLoader_get_resource_uid(self, path)
}

type extendsResourcePreloader struct {
	_ [0]*extendsResourcePreloader
	class
}

func (self ResourcePreloader) Node() Node { var parent Node; parent.class = self.class; return parent }
func (self ResourcePreloader) AddResource(name string, resource Resource) {
	self.Runtime.ResourcePreloader_add_resource(self, name, resource)
}
func (self ResourcePreloader) RemoveResource(name string) {
	self.Runtime.ResourcePreloader_remove_resource(self, name)
}
func (self ResourcePreloader) RenameResource(name string, newname string) {
	self.Runtime.ResourcePreloader_rename_resource(self, name, newname)
}
func (self ResourcePreloader) HasResource(name string) bool {
	return self.Runtime.ResourcePreloader_has_resource(self, name)
}
func (self ResourcePreloader) GetResource(name string) Resource {
	return self.Runtime.ResourcePreloader_get_resource(self, name)
}
func (self ResourcePreloader) GetResourceList() PackedStringArray {
	return self.Runtime.ResourcePreloader_get_resource_list(self)
}

type extendsResourceSaver struct {
	_ [0]*extendsResourceSaver
	class
}

func (self ResourceSaver) Object() Object {
	var parent Object
	parent.class = self.class
	return parent
}
func (self ResourceSaver) Save(resource Resource, path string, flags ResourceSaverSaverFlags) int64 {
	return self.Runtime.ResourceSaver_save(self, resource, path, flags)
}
func (self ResourceSaver) GetRecognizedExtensions(atype Resource) PackedStringArray {
	return self.Runtime.ResourceSaver_get_recognized_extensions(self, atype)
}
func (self ResourceSaver) AddResourceFormatSaver(format_saver ResourceFormatSaver, at_front bool) {
	self.Runtime.ResourceSaver_add_resource_format_saver(self, format_saver, at_front)
}
func (self ResourceSaver) RemoveResourceFormatSaver(format_saver ResourceFormatSaver) {
	self.Runtime.ResourceSaver_remove_resource_format_saver(self, format_saver)
}

type extendsResourceUID struct {
	_ [0]*extendsResourceUID
	class
}

func (self ResourceUID) Object() Object { var parent Object; parent.class = self.class; return parent }
func (self ResourceUID) IdToText(id int64) string {
	return self.Runtime.ResourceUID_id_to_text(self, id)
}
func (self ResourceUID) TextToId(text_id string) int64 {
	return self.Runtime.ResourceUID_text_to_id(self, text_id)
}
func (self ResourceUID) CreateId() int64 {
	return self.Runtime.ResourceUID_create_id(self)
}
func (self ResourceUID) HasId(id int64) bool {
	return self.Runtime.ResourceUID_has_id(self, id)
}
func (self ResourceUID) AddId(id int64, path string) {
	self.Runtime.ResourceUID_add_id(self, id, path)
}
func (self ResourceUID) SetId(id int64, path string) {
	self.Runtime.ResourceUID_set_id(self, id, path)
}
func (self ResourceUID) GetIdPath(id int64) string {
	return self.Runtime.ResourceUID_get_id_path(self, id)
}
func (self ResourceUID) RemoveId(id int64) {
	self.Runtime.ResourceUID_remove_id(self, id)
}

type extendsRibbonTrailMesh struct {
	_ [0]*extendsRibbonTrailMesh
	class
}

func (self RibbonTrailMesh) PrimitiveMesh() PrimitiveMesh {
	var parent PrimitiveMesh
	parent.class = self.class
	return parent
}
func (self RibbonTrailMesh) SetSize(size Float) {
	self.Runtime.RibbonTrailMesh_set_size(self, size)
}
func (self RibbonTrailMesh) GetSize() Float {
	return self.Runtime.RibbonTrailMesh_get_size(self)
}
func (self RibbonTrailMesh) SetSections(sections int64) {
	self.Runtime.RibbonTrailMesh_set_sections(self, sections)
}
func (self RibbonTrailMesh) GetSections() int64 {
	return self.Runtime.RibbonTrailMesh_get_sections(self)
}
func (self RibbonTrailMesh) SetSectionLength(section_length Float) {
	self.Runtime.RibbonTrailMesh_set_section_length(self, section_length)
}
func (self RibbonTrailMesh) GetSectionLength() Float {
	return self.Runtime.RibbonTrailMesh_get_section_length(self)
}
func (self RibbonTrailMesh) SetSectionSegments(section_segments int64) {
	self.Runtime.RibbonTrailMesh_set_section_segments(self, section_segments)
}
func (self RibbonTrailMesh) GetSectionSegments() int64 {
	return self.Runtime.RibbonTrailMesh_get_section_segments(self)
}
func (self RibbonTrailMesh) SetCurve(curve Curve) {
	self.Runtime.RibbonTrailMesh_set_curve(self, curve)
}
func (self RibbonTrailMesh) GetCurve() Curve {
	return self.Runtime.RibbonTrailMesh_get_curve(self)
}
func (self RibbonTrailMesh) SetShape(shape RibbonTrailMeshShape) {
	self.Runtime.RibbonTrailMesh_set_shape(self, shape)
}
func (self RibbonTrailMesh) GetShape() RibbonTrailMeshShape {
	return self.Runtime.RibbonTrailMesh_get_shape(self)
}

type extendsRichTextEffect struct {
	_ [0]*extendsRichTextEffect
	class
}

func (self RichTextEffect) Resource() Resource {
	var parent Resource
	parent.class = self.class
	return parent
}

type extendsRichTextLabel struct {
	_ [0]*extendsRichTextLabel
	class
}

func (self RichTextLabel) Control() Control {
	var parent Control
	parent.class = self.class
	return parent
}
func (self RichTextLabel) GetParsedText() string {
	return self.Runtime.RichTextLabel_get_parsed_text(self)
}
func (self RichTextLabel) AddText(text string) {
	self.Runtime.RichTextLabel_add_text(self, text)
}
func (self RichTextLabel) SetText(text string) {
	self.Runtime.RichTextLabel_set_text(self, text)
}
func (self RichTextLabel) AddImage(image Texture2D, width int64, height int64, color Color, inline_align InlineAlignment, region Rect2, key any, pad bool, tooltip string, size_in_percent bool) {
	self.Runtime.RichTextLabel_add_image(self, image, width, height, color, inline_align, region, key, pad, tooltip, size_in_percent)
}
func (self RichTextLabel) UpdateImage(key any, mask RichTextLabelImageUpdateMask, image Texture2D, width int64, height int64, color Color, inline_align InlineAlignment, region Rect2, pad bool, tooltip string, size_in_percent bool) {
	self.Runtime.RichTextLabel_update_image(self, key, mask, image, width, height, color, inline_align, region, pad, tooltip, size_in_percent)
}
func (self RichTextLabel) Newline() {
	self.Runtime.RichTextLabel_newline(self)
}
func (self RichTextLabel) RemoveParagraph(paragraph int64) bool {
	return self.Runtime.RichTextLabel_remove_paragraph(self, paragraph)
}
func (self RichTextLabel) PushFont(font Font, font_size int64) {
	self.Runtime.RichTextLabel_push_font(self, font, font_size)
}
func (self RichTextLabel) PushFontSize(font_size int64) {
	self.Runtime.RichTextLabel_push_font_size(self, font_size)
}
func (self RichTextLabel) PushNormal() {
	self.Runtime.RichTextLabel_push_normal(self)
}
func (self RichTextLabel) PushBold() {
	self.Runtime.RichTextLabel_push_bold(self)
}
func (self RichTextLabel) PushBoldItalics() {
	self.Runtime.RichTextLabel_push_bold_italics(self)
}
func (self RichTextLabel) PushItalics() {
	self.Runtime.RichTextLabel_push_italics(self)
}
func (self RichTextLabel) PushMono() {
	self.Runtime.RichTextLabel_push_mono(self)
}
func (self RichTextLabel) PushColor(color Color) {
	self.Runtime.RichTextLabel_push_color(self, color)
}
func (self RichTextLabel) PushOutlineSize(outline_size int64) {
	self.Runtime.RichTextLabel_push_outline_size(self, outline_size)
}
func (self RichTextLabel) PushOutlineColor(color Color) {
	self.Runtime.RichTextLabel_push_outline_color(self, color)
}
func (self RichTextLabel) PushParagraph(alignment HorizontalAlignment, base_direction ControlTextDirection, language string, st_parser TextServerStructuredTextParser, justification_flags TextServerJustificationFlag, tab_stops PackedFloat32Array) {
	self.Runtime.RichTextLabel_push_paragraph(self, alignment, base_direction, language, st_parser, justification_flags, tab_stops)
}
func (self RichTextLabel) PushIndent(level int64) {
	self.Runtime.RichTextLabel_push_indent(self, level)
}
func (self RichTextLabel) PushList(level int64, atype RichTextLabelListType, capitalize bool, bullet string) {
	self.Runtime.RichTextLabel_push_list(self, level, atype, capitalize, bullet)
}
func (self RichTextLabel) PushMeta(data any) {
	self.Runtime.RichTextLabel_push_meta(self, data)
}
func (self RichTextLabel) PushHint(description string) {
	self.Runtime.RichTextLabel_push_hint(self, description)
}
func (self RichTextLabel) PushLanguage(language string) {
	self.Runtime.RichTextLabel_push_language(self, language)
}
func (self RichTextLabel) PushUnderline() {
	self.Runtime.RichTextLabel_push_underline(self)
}
func (self RichTextLabel) PushStrikethrough() {
	self.Runtime.RichTextLabel_push_strikethrough(self)
}
func (self RichTextLabel) PushTable(columns int64, inline_align InlineAlignment, align_to_row int64) {
	self.Runtime.RichTextLabel_push_table(self, columns, inline_align, align_to_row)
}
func (self RichTextLabel) PushDropcap(s string, font Font, size int64, dropcap_margins Rect2, color Color, outline_size int64, outline_color Color) {
	self.Runtime.RichTextLabel_push_dropcap(self, s, font, size, dropcap_margins, color, outline_size, outline_color)
}
func (self RichTextLabel) SetTableColumnExpand(column int64, expand bool, ratio int64) {
	self.Runtime.RichTextLabel_set_table_column_expand(self, column, expand, ratio)
}
func (self RichTextLabel) SetCellRowBackgroundColor(odd_row_bg Color, even_row_bg Color) {
	self.Runtime.RichTextLabel_set_cell_row_background_color(self, odd_row_bg, even_row_bg)
}
func (self RichTextLabel) SetCellBorderColor(color Color) {
	self.Runtime.RichTextLabel_set_cell_border_color(self, color)
}
func (self RichTextLabel) SetCellSizeOverride(min_size Vector2, max_size Vector2) {
	self.Runtime.RichTextLabel_set_cell_size_override(self, min_size, max_size)
}
func (self RichTextLabel) SetCellPadding(padding Rect2) {
	self.Runtime.RichTextLabel_set_cell_padding(self, padding)
}
func (self RichTextLabel) PushCell() {
	self.Runtime.RichTextLabel_push_cell(self)
}
func (self RichTextLabel) PushFgcolor(fgcolor Color) {
	self.Runtime.RichTextLabel_push_fgcolor(self, fgcolor)
}
func (self RichTextLabel) PushBgcolor(bgcolor Color) {
	self.Runtime.RichTextLabel_push_bgcolor(self, bgcolor)
}
func (self RichTextLabel) PushCustomfx(effect RichTextEffect, env Dictionary) {
	self.Runtime.RichTextLabel_push_customfx(self, effect, env)
}
func (self RichTextLabel) PushContext() {
	self.Runtime.RichTextLabel_push_context(self)
}
func (self RichTextLabel) PopContext() {
	self.Runtime.RichTextLabel_pop_context(self)
}
func (self RichTextLabel) Pop() {
	self.Runtime.RichTextLabel_pop(self)
}
func (self RichTextLabel) PopAll() {
	self.Runtime.RichTextLabel_pop_all(self)
}
func (self RichTextLabel) Clear() {
	self.Runtime.RichTextLabel_clear(self)
}
func (self RichTextLabel) SetStructuredTextBidiOverride(parser TextServerStructuredTextParser) {
	self.Runtime.RichTextLabel_set_structured_text_bidi_override(self, parser)
}
func (self RichTextLabel) GetStructuredTextBidiOverride() TextServerStructuredTextParser {
	return self.Runtime.RichTextLabel_get_structured_text_bidi_override(self)
}
func (self RichTextLabel) SetStructuredTextBidiOverrideOptions(args Array) {
	self.Runtime.RichTextLabel_set_structured_text_bidi_override_options(self, args)
}
func (self RichTextLabel) GetStructuredTextBidiOverrideOptions() Array {
	return self.Runtime.RichTextLabel_get_structured_text_bidi_override_options(self)
}
func (self RichTextLabel) SetTextDirection(direction ControlTextDirection) {
	self.Runtime.RichTextLabel_set_text_direction(self, direction)
}
func (self RichTextLabel) GetTextDirection() ControlTextDirection {
	return self.Runtime.RichTextLabel_get_text_direction(self)
}
func (self RichTextLabel) SetLanguage(language string) {
	self.Runtime.RichTextLabel_set_language(self, language)
}
func (self RichTextLabel) GetLanguage() string {
	return self.Runtime.RichTextLabel_get_language(self)
}
func (self RichTextLabel) SetAutowrapMode(autowrap_mode TextServerAutowrapMode) {
	self.Runtime.RichTextLabel_set_autowrap_mode(self, autowrap_mode)
}
func (self RichTextLabel) GetAutowrapMode() TextServerAutowrapMode {
	return self.Runtime.RichTextLabel_get_autowrap_mode(self)
}
func (self RichTextLabel) SetMetaUnderline(enable bool) {
	self.Runtime.RichTextLabel_set_meta_underline(self, enable)
}
func (self RichTextLabel) IsMetaUnderlined() bool {
	return self.Runtime.RichTextLabel_is_meta_underlined(self)
}
func (self RichTextLabel) SetHintUnderline(enable bool) {
	self.Runtime.RichTextLabel_set_hint_underline(self, enable)
}
func (self RichTextLabel) IsHintUnderlined() bool {
	return self.Runtime.RichTextLabel_is_hint_underlined(self)
}
func (self RichTextLabel) SetScrollActive(active bool) {
	self.Runtime.RichTextLabel_set_scroll_active(self, active)
}
func (self RichTextLabel) IsScrollActive() bool {
	return self.Runtime.RichTextLabel_is_scroll_active(self)
}
func (self RichTextLabel) SetScrollFollow(follow bool) {
	self.Runtime.RichTextLabel_set_scroll_follow(self, follow)
}
func (self RichTextLabel) IsScrollFollowing() bool {
	return self.Runtime.RichTextLabel_is_scroll_following(self)
}
func (self RichTextLabel) GetVScrollBar() VScrollBar {
	return self.Runtime.RichTextLabel_get_v_scroll_bar(self)
}
func (self RichTextLabel) ScrollToLine(line int64) {
	self.Runtime.RichTextLabel_scroll_to_line(self, line)
}
func (self RichTextLabel) ScrollToParagraph(paragraph int64) {
	self.Runtime.RichTextLabel_scroll_to_paragraph(self, paragraph)
}
func (self RichTextLabel) ScrollToSelection() {
	self.Runtime.RichTextLabel_scroll_to_selection(self)
}
func (self RichTextLabel) SetTabSize(spaces int64) {
	self.Runtime.RichTextLabel_set_tab_size(self, spaces)
}
func (self RichTextLabel) GetTabSize() int64 {
	return self.Runtime.RichTextLabel_get_tab_size(self)
}
func (self RichTextLabel) SetFitContent(enabled bool) {
	self.Runtime.RichTextLabel_set_fit_content(self, enabled)
}
func (self RichTextLabel) IsFitContentEnabled() bool {
	return self.Runtime.RichTextLabel_is_fit_content_enabled(self)
}
func (self RichTextLabel) SetSelectionEnabled(enabled bool) {
	self.Runtime.RichTextLabel_set_selection_enabled(self, enabled)
}
func (self RichTextLabel) IsSelectionEnabled() bool {
	return self.Runtime.RichTextLabel_is_selection_enabled(self)
}
func (self RichTextLabel) SetContextMenuEnabled(enabled bool) {
	self.Runtime.RichTextLabel_set_context_menu_enabled(self, enabled)
}
func (self RichTextLabel) IsContextMenuEnabled() bool {
	return self.Runtime.RichTextLabel_is_context_menu_enabled(self)
}
func (self RichTextLabel) SetShortcutKeysEnabled(enabled bool) {
	self.Runtime.RichTextLabel_set_shortcut_keys_enabled(self, enabled)
}
func (self RichTextLabel) IsShortcutKeysEnabled() bool {
	return self.Runtime.RichTextLabel_is_shortcut_keys_enabled(self)
}
func (self RichTextLabel) SetDeselectOnFocusLossEnabled(enable bool) {
	self.Runtime.RichTextLabel_set_deselect_on_focus_loss_enabled(self, enable)
}
func (self RichTextLabel) IsDeselectOnFocusLossEnabled() bool {
	return self.Runtime.RichTextLabel_is_deselect_on_focus_loss_enabled(self)
}
func (self RichTextLabel) SetDragAndDropSelectionEnabled(enable bool) {
	self.Runtime.RichTextLabel_set_drag_and_drop_selection_enabled(self, enable)
}
func (self RichTextLabel) IsDragAndDropSelectionEnabled() bool {
	return self.Runtime.RichTextLabel_is_drag_and_drop_selection_enabled(self)
}
func (self RichTextLabel) GetSelectionFrom() int64 {
	return self.Runtime.RichTextLabel_get_selection_from(self)
}
func (self RichTextLabel) GetSelectionTo() int64 {
	return self.Runtime.RichTextLabel_get_selection_to(self)
}
func (self RichTextLabel) SelectAll() {
	self.Runtime.RichTextLabel_select_all(self)
}
func (self RichTextLabel) GetSelectedText() string {
	return self.Runtime.RichTextLabel_get_selected_text(self)
}
func (self RichTextLabel) Deselect() {
	self.Runtime.RichTextLabel_deselect(self)
}
func (self RichTextLabel) ParseBbcode(bbcode string) {
	self.Runtime.RichTextLabel_parse_bbcode(self, bbcode)
}
func (self RichTextLabel) AppendText(bbcode string) {
	self.Runtime.RichTextLabel_append_text(self, bbcode)
}
func (self RichTextLabel) GetText() string {
	return self.Runtime.RichTextLabel_get_text(self)
}
func (self RichTextLabel) IsReady() bool {
	return self.Runtime.RichTextLabel_is_ready(self)
}
func (self RichTextLabel) SetThreaded(threaded bool) {
	self.Runtime.RichTextLabel_set_threaded(self, threaded)
}
func (self RichTextLabel) IsThreaded() bool {
	return self.Runtime.RichTextLabel_is_threaded(self)
}
func (self RichTextLabel) SetProgressBarDelay(delay_ms int64) {
	self.Runtime.RichTextLabel_set_progress_bar_delay(self, delay_ms)
}
func (self RichTextLabel) GetProgressBarDelay() int64 {
	return self.Runtime.RichTextLabel_get_progress_bar_delay(self)
}
func (self RichTextLabel) SetVisibleCharacters(amount int64) {
	self.Runtime.RichTextLabel_set_visible_characters(self, amount)
}
func (self RichTextLabel) GetVisibleCharacters() int64 {
	return self.Runtime.RichTextLabel_get_visible_characters(self)
}
func (self RichTextLabel) GetVisibleCharactersBehavior() TextServerVisibleCharactersBehavior {
	return self.Runtime.RichTextLabel_get_visible_characters_behavior(self)
}
func (self RichTextLabel) SetVisibleCharactersBehavior(behavior TextServerVisibleCharactersBehavior) {
	self.Runtime.RichTextLabel_set_visible_characters_behavior(self, behavior)
}
func (self RichTextLabel) SetVisibleRatio(ratio Float) {
	self.Runtime.RichTextLabel_set_visible_ratio(self, ratio)
}
func (self RichTextLabel) GetVisibleRatio() Float {
	return self.Runtime.RichTextLabel_get_visible_ratio(self)
}
func (self RichTextLabel) GetCharacterLine(character int64) int64 {
	return self.Runtime.RichTextLabel_get_character_line(self, character)
}
func (self RichTextLabel) GetCharacterParagraph(character int64) int64 {
	return self.Runtime.RichTextLabel_get_character_paragraph(self, character)
}
func (self RichTextLabel) GetTotalCharacterCount() int64 {
	return self.Runtime.RichTextLabel_get_total_character_count(self)
}
func (self RichTextLabel) SetUseBbcode(enable bool) {
	self.Runtime.RichTextLabel_set_use_bbcode(self, enable)
}
func (self RichTextLabel) IsUsingBbcode() bool {
	return self.Runtime.RichTextLabel_is_using_bbcode(self)
}
func (self RichTextLabel) GetLineCount() int64 {
	return self.Runtime.RichTextLabel_get_line_count(self)
}
func (self RichTextLabel) GetVisibleLineCount() int64 {
	return self.Runtime.RichTextLabel_get_visible_line_count(self)
}
func (self RichTextLabel) GetParagraphCount() int64 {
	return self.Runtime.RichTextLabel_get_paragraph_count(self)
}
func (self RichTextLabel) GetVisibleParagraphCount() int64 {
	return self.Runtime.RichTextLabel_get_visible_paragraph_count(self)
}
func (self RichTextLabel) GetContentHeight() int64 {
	return self.Runtime.RichTextLabel_get_content_height(self)
}
func (self RichTextLabel) GetContentWidth() int64 {
	return self.Runtime.RichTextLabel_get_content_width(self)
}
func (self RichTextLabel) GetLineOffset(line int64) Float {
	return self.Runtime.RichTextLabel_get_line_offset(self, line)
}
func (self RichTextLabel) GetParagraphOffset(paragraph int64) Float {
	return self.Runtime.RichTextLabel_get_paragraph_offset(self, paragraph)
}
func (self RichTextLabel) ParseExpressionsForValues(expressions PackedStringArray) Dictionary {
	return self.Runtime.RichTextLabel_parse_expressions_for_values(self, expressions)
}
func (self RichTextLabel) SetEffects(effects Array) {
	self.Runtime.RichTextLabel_set_effects(self, effects)
}
func (self RichTextLabel) GetEffects() Array {
	return self.Runtime.RichTextLabel_get_effects(self)
}
func (self RichTextLabel) InstallEffect(effect any) {
	self.Runtime.RichTextLabel_install_effect(self, effect)
}
func (self RichTextLabel) GetMenu() PopupMenu {
	return self.Runtime.RichTextLabel_get_menu(self)
}
func (self RichTextLabel) IsMenuVisible() bool {
	return self.Runtime.RichTextLabel_is_menu_visible(self)
}
func (self RichTextLabel) MenuOption(option int64) {
	self.Runtime.RichTextLabel_menu_option(self, option)
}

type extendsRigidBody2D struct {
	_ [0]*extendsRigidBody2D
	class
}

func (self RigidBody2D) PhysicsBody2D() PhysicsBody2D {
	var parent PhysicsBody2D
	parent.class = self.class
	return parent
}
func (self RigidBody2D) SetMass(mass Float) {
	self.Runtime.RigidBody2D_set_mass(self, mass)
}
func (self RigidBody2D) GetMass() Float {
	return self.Runtime.RigidBody2D_get_mass(self)
}
func (self RigidBody2D) GetInertia() Float {
	return self.Runtime.RigidBody2D_get_inertia(self)
}
func (self RigidBody2D) SetInertia(inertia Float) {
	self.Runtime.RigidBody2D_set_inertia(self, inertia)
}
func (self RigidBody2D) SetCenterOfMassMode(mode RigidBody2DCenterOfMassMode) {
	self.Runtime.RigidBody2D_set_center_of_mass_mode(self, mode)
}
func (self RigidBody2D) GetCenterOfMassMode() RigidBody2DCenterOfMassMode {
	return self.Runtime.RigidBody2D_get_center_of_mass_mode(self)
}
func (self RigidBody2D) SetCenterOfMass(center_of_mass Vector2) {
	self.Runtime.RigidBody2D_set_center_of_mass(self, center_of_mass)
}
func (self RigidBody2D) GetCenterOfMass() Vector2 {
	return self.Runtime.RigidBody2D_get_center_of_mass(self)
}
func (self RigidBody2D) SetPhysicsMaterialOverride(physics_material_override PhysicsMaterial) {
	self.Runtime.RigidBody2D_set_physics_material_override(self, physics_material_override)
}
func (self RigidBody2D) GetPhysicsMaterialOverride() PhysicsMaterial {
	return self.Runtime.RigidBody2D_get_physics_material_override(self)
}
func (self RigidBody2D) SetGravityScale(gravity_scale Float) {
	self.Runtime.RigidBody2D_set_gravity_scale(self, gravity_scale)
}
func (self RigidBody2D) GetGravityScale() Float {
	return self.Runtime.RigidBody2D_get_gravity_scale(self)
}
func (self RigidBody2D) SetLinearDampMode(linear_damp_mode RigidBody2DDampMode) {
	self.Runtime.RigidBody2D_set_linear_damp_mode(self, linear_damp_mode)
}
func (self RigidBody2D) GetLinearDampMode() RigidBody2DDampMode {
	return self.Runtime.RigidBody2D_get_linear_damp_mode(self)
}
func (self RigidBody2D) SetAngularDampMode(angular_damp_mode RigidBody2DDampMode) {
	self.Runtime.RigidBody2D_set_angular_damp_mode(self, angular_damp_mode)
}
func (self RigidBody2D) GetAngularDampMode() RigidBody2DDampMode {
	return self.Runtime.RigidBody2D_get_angular_damp_mode(self)
}
func (self RigidBody2D) SetLinearDamp(linear_damp Float) {
	self.Runtime.RigidBody2D_set_linear_damp(self, linear_damp)
}
func (self RigidBody2D) GetLinearDamp() Float {
	return self.Runtime.RigidBody2D_get_linear_damp(self)
}
func (self RigidBody2D) SetAngularDamp(angular_damp Float) {
	self.Runtime.RigidBody2D_set_angular_damp(self, angular_damp)
}
func (self RigidBody2D) GetAngularDamp() Float {
	return self.Runtime.RigidBody2D_get_angular_damp(self)
}
func (self RigidBody2D) SetLinearVelocity(linear_velocity Vector2) {
	self.Runtime.RigidBody2D_set_linear_velocity(self, linear_velocity)
}
func (self RigidBody2D) GetLinearVelocity() Vector2 {
	return self.Runtime.RigidBody2D_get_linear_velocity(self)
}
func (self RigidBody2D) SetAngularVelocity(angular_velocity Float) {
	self.Runtime.RigidBody2D_set_angular_velocity(self, angular_velocity)
}
func (self RigidBody2D) GetAngularVelocity() Float {
	return self.Runtime.RigidBody2D_get_angular_velocity(self)
}
func (self RigidBody2D) SetMaxContactsReported(amount int64) {
	self.Runtime.RigidBody2D_set_max_contacts_reported(self, amount)
}
func (self RigidBody2D) GetMaxContactsReported() int64 {
	return self.Runtime.RigidBody2D_get_max_contacts_reported(self)
}
func (self RigidBody2D) GetContactCount() int64 {
	return self.Runtime.RigidBody2D_get_contact_count(self)
}
func (self RigidBody2D) SetUseCustomIntegrator(enable bool) {
	self.Runtime.RigidBody2D_set_use_custom_integrator(self, enable)
}
func (self RigidBody2D) IsUsingCustomIntegrator() bool {
	return self.Runtime.RigidBody2D_is_using_custom_integrator(self)
}
func (self RigidBody2D) SetContactMonitor(enabled bool) {
	self.Runtime.RigidBody2D_set_contact_monitor(self, enabled)
}
func (self RigidBody2D) IsContactMonitorEnabled() bool {
	return self.Runtime.RigidBody2D_is_contact_monitor_enabled(self)
}
func (self RigidBody2D) SetContinuousCollisionDetectionMode(mode RigidBody2DCCDMode) {
	self.Runtime.RigidBody2D_set_continuous_collision_detection_mode(self, mode)
}
func (self RigidBody2D) GetContinuousCollisionDetectionMode() RigidBody2DCCDMode {
	return self.Runtime.RigidBody2D_get_continuous_collision_detection_mode(self)
}
func (self RigidBody2D) SetAxisVelocity(axis_velocity Vector2) {
	self.Runtime.RigidBody2D_set_axis_velocity(self, axis_velocity)
}
func (self RigidBody2D) ApplyCentralImpulse(impulse Vector2) {
	self.Runtime.RigidBody2D_apply_central_impulse(self, impulse)
}
func (self RigidBody2D) ApplyImpulse(impulse Vector2, position Vector2) {
	self.Runtime.RigidBody2D_apply_impulse(self, impulse, position)
}
func (self RigidBody2D) ApplyTorqueImpulse(torque Float) {
	self.Runtime.RigidBody2D_apply_torque_impulse(self, torque)
}
func (self RigidBody2D) ApplyCentralForce(force Vector2) {
	self.Runtime.RigidBody2D_apply_central_force(self, force)
}
func (self RigidBody2D) ApplyForce(force Vector2, position Vector2) {
	self.Runtime.RigidBody2D_apply_force(self, force, position)
}
func (self RigidBody2D) ApplyTorque(torque Float) {
	self.Runtime.RigidBody2D_apply_torque(self, torque)
}
func (self RigidBody2D) AddConstantCentralForce(force Vector2) {
	self.Runtime.RigidBody2D_add_constant_central_force(self, force)
}
func (self RigidBody2D) AddConstantForce(force Vector2, position Vector2) {
	self.Runtime.RigidBody2D_add_constant_force(self, force, position)
}
func (self RigidBody2D) AddConstantTorque(torque Float) {
	self.Runtime.RigidBody2D_add_constant_torque(self, torque)
}
func (self RigidBody2D) SetConstantForce(force Vector2) {
	self.Runtime.RigidBody2D_set_constant_force(self, force)
}
func (self RigidBody2D) GetConstantForce() Vector2 {
	return self.Runtime.RigidBody2D_get_constant_force(self)
}
func (self RigidBody2D) SetConstantTorque(torque Float) {
	self.Runtime.RigidBody2D_set_constant_torque(self, torque)
}
func (self RigidBody2D) GetConstantTorque() Float {
	return self.Runtime.RigidBody2D_get_constant_torque(self)
}
func (self RigidBody2D) SetSleeping(sleeping bool) {
	self.Runtime.RigidBody2D_set_sleeping(self, sleeping)
}
func (self RigidBody2D) IsSleeping() bool {
	return self.Runtime.RigidBody2D_is_sleeping(self)
}
func (self RigidBody2D) SetCanSleep(able_to_sleep bool) {
	self.Runtime.RigidBody2D_set_can_sleep(self, able_to_sleep)
}
func (self RigidBody2D) IsAbleToSleep() bool {
	return self.Runtime.RigidBody2D_is_able_to_sleep(self)
}
func (self RigidBody2D) SetLockRotationEnabled(lock_rotation bool) {
	self.Runtime.RigidBody2D_set_lock_rotation_enabled(self, lock_rotation)
}
func (self RigidBody2D) IsLockRotationEnabled() bool {
	return self.Runtime.RigidBody2D_is_lock_rotation_enabled(self)
}
func (self RigidBody2D) SetFreezeEnabled(freeze_mode bool) {
	self.Runtime.RigidBody2D_set_freeze_enabled(self, freeze_mode)
}
func (self RigidBody2D) IsFreezeEnabled() bool {
	return self.Runtime.RigidBody2D_is_freeze_enabled(self)
}
func (self RigidBody2D) SetFreezeMode(freeze_mode RigidBody2DFreezeMode) {
	self.Runtime.RigidBody2D_set_freeze_mode(self, freeze_mode)
}
func (self RigidBody2D) GetFreezeMode() RigidBody2DFreezeMode {
	return self.Runtime.RigidBody2D_get_freeze_mode(self)
}
func (self RigidBody2D) GetCollidingBodies() ArrayOf[Node2D] {
	return self.Runtime.RigidBody2D_get_colliding_bodies(self)
}

type extendsRigidBody3D struct {
	_ [0]*extendsRigidBody3D
	class
}

func (self RigidBody3D) PhysicsBody3D() PhysicsBody3D {
	var parent PhysicsBody3D
	parent.class = self.class
	return parent
}
func (self RigidBody3D) SetMass(mass Float) {
	self.Runtime.RigidBody3D_set_mass(self, mass)
}
func (self RigidBody3D) GetMass() Float {
	return self.Runtime.RigidBody3D_get_mass(self)
}
func (self RigidBody3D) SetInertia(inertia Vector3) {
	self.Runtime.RigidBody3D_set_inertia(self, inertia)
}
func (self RigidBody3D) GetInertia() Vector3 {
	return self.Runtime.RigidBody3D_get_inertia(self)
}
func (self RigidBody3D) SetCenterOfMassMode(mode RigidBody3DCenterOfMassMode) {
	self.Runtime.RigidBody3D_set_center_of_mass_mode(self, mode)
}
func (self RigidBody3D) GetCenterOfMassMode() RigidBody3DCenterOfMassMode {
	return self.Runtime.RigidBody3D_get_center_of_mass_mode(self)
}
func (self RigidBody3D) SetCenterOfMass(center_of_mass Vector3) {
	self.Runtime.RigidBody3D_set_center_of_mass(self, center_of_mass)
}
func (self RigidBody3D) GetCenterOfMass() Vector3 {
	return self.Runtime.RigidBody3D_get_center_of_mass(self)
}
func (self RigidBody3D) SetPhysicsMaterialOverride(physics_material_override PhysicsMaterial) {
	self.Runtime.RigidBody3D_set_physics_material_override(self, physics_material_override)
}
func (self RigidBody3D) GetPhysicsMaterialOverride() PhysicsMaterial {
	return self.Runtime.RigidBody3D_get_physics_material_override(self)
}
func (self RigidBody3D) SetLinearVelocity(linear_velocity Vector3) {
	self.Runtime.RigidBody3D_set_linear_velocity(self, linear_velocity)
}
func (self RigidBody3D) GetLinearVelocity() Vector3 {
	return self.Runtime.RigidBody3D_get_linear_velocity(self)
}
func (self RigidBody3D) SetAngularVelocity(angular_velocity Vector3) {
	self.Runtime.RigidBody3D_set_angular_velocity(self, angular_velocity)
}
func (self RigidBody3D) GetAngularVelocity() Vector3 {
	return self.Runtime.RigidBody3D_get_angular_velocity(self)
}
func (self RigidBody3D) GetInverseInertiaTensor() Basis {
	return self.Runtime.RigidBody3D_get_inverse_inertia_tensor(self)
}
func (self RigidBody3D) SetGravityScale(gravity_scale Float) {
	self.Runtime.RigidBody3D_set_gravity_scale(self, gravity_scale)
}
func (self RigidBody3D) GetGravityScale() Float {
	return self.Runtime.RigidBody3D_get_gravity_scale(self)
}
func (self RigidBody3D) SetLinearDampMode(linear_damp_mode RigidBody3DDampMode) {
	self.Runtime.RigidBody3D_set_linear_damp_mode(self, linear_damp_mode)
}
func (self RigidBody3D) GetLinearDampMode() RigidBody3DDampMode {
	return self.Runtime.RigidBody3D_get_linear_damp_mode(self)
}
func (self RigidBody3D) SetAngularDampMode(angular_damp_mode RigidBody3DDampMode) {
	self.Runtime.RigidBody3D_set_angular_damp_mode(self, angular_damp_mode)
}
func (self RigidBody3D) GetAngularDampMode() RigidBody3DDampMode {
	return self.Runtime.RigidBody3D_get_angular_damp_mode(self)
}
func (self RigidBody3D) SetLinearDamp(linear_damp Float) {
	self.Runtime.RigidBody3D_set_linear_damp(self, linear_damp)
}
func (self RigidBody3D) GetLinearDamp() Float {
	return self.Runtime.RigidBody3D_get_linear_damp(self)
}
func (self RigidBody3D) SetAngularDamp(angular_damp Float) {
	self.Runtime.RigidBody3D_set_angular_damp(self, angular_damp)
}
func (self RigidBody3D) GetAngularDamp() Float {
	return self.Runtime.RigidBody3D_get_angular_damp(self)
}
func (self RigidBody3D) SetMaxContactsReported(amount int64) {
	self.Runtime.RigidBody3D_set_max_contacts_reported(self, amount)
}
func (self RigidBody3D) GetMaxContactsReported() int64 {
	return self.Runtime.RigidBody3D_get_max_contacts_reported(self)
}
func (self RigidBody3D) GetContactCount() int64 {
	return self.Runtime.RigidBody3D_get_contact_count(self)
}
func (self RigidBody3D) SetUseCustomIntegrator(enable bool) {
	self.Runtime.RigidBody3D_set_use_custom_integrator(self, enable)
}
func (self RigidBody3D) IsUsingCustomIntegrator() bool {
	return self.Runtime.RigidBody3D_is_using_custom_integrator(self)
}
func (self RigidBody3D) SetContactMonitor(enabled bool) {
	self.Runtime.RigidBody3D_set_contact_monitor(self, enabled)
}
func (self RigidBody3D) IsContactMonitorEnabled() bool {
	return self.Runtime.RigidBody3D_is_contact_monitor_enabled(self)
}
func (self RigidBody3D) SetUseContinuousCollisionDetection(enable bool) {
	self.Runtime.RigidBody3D_set_use_continuous_collision_detection(self, enable)
}
func (self RigidBody3D) IsUsingContinuousCollisionDetection() bool {
	return self.Runtime.RigidBody3D_is_using_continuous_collision_detection(self)
}
func (self RigidBody3D) SetAxisVelocity(axis_velocity Vector3) {
	self.Runtime.RigidBody3D_set_axis_velocity(self, axis_velocity)
}
func (self RigidBody3D) ApplyCentralImpulse(impulse Vector3) {
	self.Runtime.RigidBody3D_apply_central_impulse(self, impulse)
}
func (self RigidBody3D) ApplyImpulse(impulse Vector3, position Vector3) {
	self.Runtime.RigidBody3D_apply_impulse(self, impulse, position)
}
func (self RigidBody3D) ApplyTorqueImpulse(impulse Vector3) {
	self.Runtime.RigidBody3D_apply_torque_impulse(self, impulse)
}
func (self RigidBody3D) ApplyCentralForce(force Vector3) {
	self.Runtime.RigidBody3D_apply_central_force(self, force)
}
func (self RigidBody3D) ApplyForce(force Vector3, position Vector3) {
	self.Runtime.RigidBody3D_apply_force(self, force, position)
}
func (self RigidBody3D) ApplyTorque(torque Vector3) {
	self.Runtime.RigidBody3D_apply_torque(self, torque)
}
func (self RigidBody3D) AddConstantCentralForce(force Vector3) {
	self.Runtime.RigidBody3D_add_constant_central_force(self, force)
}
func (self RigidBody3D) AddConstantForce(force Vector3, position Vector3) {
	self.Runtime.RigidBody3D_add_constant_force(self, force, position)
}
func (self RigidBody3D) AddConstantTorque(torque Vector3) {
	self.Runtime.RigidBody3D_add_constant_torque(self, torque)
}
func (self RigidBody3D) SetConstantForce(force Vector3) {
	self.Runtime.RigidBody3D_set_constant_force(self, force)
}
func (self RigidBody3D) GetConstantForce() Vector3 {
	return self.Runtime.RigidBody3D_get_constant_force(self)
}
func (self RigidBody3D) SetConstantTorque(torque Vector3) {
	self.Runtime.RigidBody3D_set_constant_torque(self, torque)
}
func (self RigidBody3D) GetConstantTorque() Vector3 {
	return self.Runtime.RigidBody3D_get_constant_torque(self)
}
func (self RigidBody3D) SetSleeping(sleeping bool) {
	self.Runtime.RigidBody3D_set_sleeping(self, sleeping)
}
func (self RigidBody3D) IsSleeping() bool {
	return self.Runtime.RigidBody3D_is_sleeping(self)
}
func (self RigidBody3D) SetCanSleep(able_to_sleep bool) {
	self.Runtime.RigidBody3D_set_can_sleep(self, able_to_sleep)
}
func (self RigidBody3D) IsAbleToSleep() bool {
	return self.Runtime.RigidBody3D_is_able_to_sleep(self)
}
func (self RigidBody3D) SetLockRotationEnabled(lock_rotation bool) {
	self.Runtime.RigidBody3D_set_lock_rotation_enabled(self, lock_rotation)
}
func (self RigidBody3D) IsLockRotationEnabled() bool {
	return self.Runtime.RigidBody3D_is_lock_rotation_enabled(self)
}
func (self RigidBody3D) SetFreezeEnabled(freeze_mode bool) {
	self.Runtime.RigidBody3D_set_freeze_enabled(self, freeze_mode)
}
func (self RigidBody3D) IsFreezeEnabled() bool {
	return self.Runtime.RigidBody3D_is_freeze_enabled(self)
}
func (self RigidBody3D) SetFreezeMode(freeze_mode RigidBody3DFreezeMode) {
	self.Runtime.RigidBody3D_set_freeze_mode(self, freeze_mode)
}
func (self RigidBody3D) GetFreezeMode() RigidBody3DFreezeMode {
	return self.Runtime.RigidBody3D_get_freeze_mode(self)
}
func (self RigidBody3D) GetCollidingBodies() ArrayOf[Node3D] {
	return self.Runtime.RigidBody3D_get_colliding_bodies(self)
}

type extendsRootMotionView struct {
	_ [0]*extendsRootMotionView
	class
}

func (self RootMotionView) VisualInstance3D() VisualInstance3D {
	var parent VisualInstance3D
	parent.class = self.class
	return parent
}
func (self RootMotionView) SetAnimationPath(path NodePath) {
	self.Runtime.RootMotionView_set_animation_path(self, path)
}
func (self RootMotionView) GetAnimationPath() NodePath {
	return self.Runtime.RootMotionView_get_animation_path(self)
}
func (self RootMotionView) SetColor(color Color) {
	self.Runtime.RootMotionView_set_color(self, color)
}
func (self RootMotionView) GetColor() Color {
	return self.Runtime.RootMotionView_get_color(self)
}
func (self RootMotionView) SetCellSize(size Float) {
	self.Runtime.RootMotionView_set_cell_size(self, size)
}
func (self RootMotionView) GetCellSize() Float {
	return self.Runtime.RootMotionView_get_cell_size(self)
}
func (self RootMotionView) SetRadius(size Float) {
	self.Runtime.RootMotionView_set_radius(self, size)
}
func (self RootMotionView) GetRadius() Float {
	return self.Runtime.RootMotionView_get_radius(self)
}
func (self RootMotionView) SetZeroY(enable bool) {
	self.Runtime.RootMotionView_set_zero_y(self, enable)
}
func (self RootMotionView) GetZeroY() bool {
	return self.Runtime.RootMotionView_get_zero_y(self)
}

type extendsSceneMultiplayer struct {
	_ [0]*extendsSceneMultiplayer
	class
}

func (self SceneMultiplayer) MultiplayerAPI() MultiplayerAPI {
	var parent MultiplayerAPI
	parent.class = self.class
	return parent
}
func (self SceneMultiplayer) SetRootPath(path NodePath) {
	self.Runtime.SceneMultiplayer_set_root_path(self, path)
}
func (self SceneMultiplayer) GetRootPath() NodePath {
	return self.Runtime.SceneMultiplayer_get_root_path(self)
}
func (self SceneMultiplayer) Clear() {
	self.Runtime.SceneMultiplayer_clear(self)
}
func (self SceneMultiplayer) DisconnectPeer(id int64) {
	self.Runtime.SceneMultiplayer_disconnect_peer(self, id)
}
func (self SceneMultiplayer) GetAuthenticatingPeers() PackedInt32Array {
	return self.Runtime.SceneMultiplayer_get_authenticating_peers(self)
}
func (self SceneMultiplayer) SendAuth(id int64, data PackedByteArray) int64 {
	return self.Runtime.SceneMultiplayer_send_auth(self, id, data)
}
func (self SceneMultiplayer) CompleteAuth(id int64) int64 {
	return self.Runtime.SceneMultiplayer_complete_auth(self, id)
}
func (self SceneMultiplayer) SetAuthCallback(callback Callable) {
	self.Runtime.SceneMultiplayer_set_auth_callback(self, callback)
}
func (self SceneMultiplayer) GetAuthCallback() Callable {
	return self.Runtime.SceneMultiplayer_get_auth_callback(self)
}
func (self SceneMultiplayer) SetAuthTimeout(timeout Float) {
	self.Runtime.SceneMultiplayer_set_auth_timeout(self, timeout)
}
func (self SceneMultiplayer) GetAuthTimeout() Float {
	return self.Runtime.SceneMultiplayer_get_auth_timeout(self)
}
func (self SceneMultiplayer) SetRefuseNewConnections(refuse bool) {
	self.Runtime.SceneMultiplayer_set_refuse_new_connections(self, refuse)
}
func (self SceneMultiplayer) IsRefusingNewConnections() bool {
	return self.Runtime.SceneMultiplayer_is_refusing_new_connections(self)
}
func (self SceneMultiplayer) SetAllowObjectDecoding(enable bool) {
	self.Runtime.SceneMultiplayer_set_allow_object_decoding(self, enable)
}
func (self SceneMultiplayer) IsObjectDecodingAllowed() bool {
	return self.Runtime.SceneMultiplayer_is_object_decoding_allowed(self)
}
func (self SceneMultiplayer) SetServerRelayEnabled(enabled bool) {
	self.Runtime.SceneMultiplayer_set_server_relay_enabled(self, enabled)
}
func (self SceneMultiplayer) IsServerRelayEnabled() bool {
	return self.Runtime.SceneMultiplayer_is_server_relay_enabled(self)
}
func (self SceneMultiplayer) SendBytes(bytes PackedByteArray, id int64, mode MultiplayerPeerTransferMode, channel int64) int64 {
	return self.Runtime.SceneMultiplayer_send_bytes(self, bytes, id, mode, channel)
}
func (self SceneMultiplayer) GetMaxSyncPacketSize() int64 {
	return self.Runtime.SceneMultiplayer_get_max_sync_packet_size(self)
}
func (self SceneMultiplayer) SetMaxSyncPacketSize(size int64) {
	self.Runtime.SceneMultiplayer_set_max_sync_packet_size(self, size)
}
func (self SceneMultiplayer) GetMaxDeltaPacketSize() int64 {
	return self.Runtime.SceneMultiplayer_get_max_delta_packet_size(self)
}
func (self SceneMultiplayer) SetMaxDeltaPacketSize(size int64) {
	self.Runtime.SceneMultiplayer_set_max_delta_packet_size(self, size)
}

type extendsSceneReplicationConfig struct {
	_ [0]*extendsSceneReplicationConfig
	class
}

func (self SceneReplicationConfig) Resource() Resource {
	var parent Resource
	parent.class = self.class
	return parent
}
func (self SceneReplicationConfig) GetProperties() ArrayOf[NodePath] {
	return self.Runtime.SceneReplicationConfig_get_properties(self)
}
func (self SceneReplicationConfig) AddProperty(path NodePath, index int64) {
	self.Runtime.SceneReplicationConfig_add_property(self, path, index)
}
func (self SceneReplicationConfig) HasProperty(path NodePath) bool {
	return self.Runtime.SceneReplicationConfig_has_property(self, path)
}
func (self SceneReplicationConfig) RemoveProperty(path NodePath) {
	self.Runtime.SceneReplicationConfig_remove_property(self, path)
}
func (self SceneReplicationConfig) PropertyGetIndex(path NodePath) int64 {
	return self.Runtime.SceneReplicationConfig_property_get_index(self, path)
}
func (self SceneReplicationConfig) PropertyGetSpawn(path NodePath) bool {
	return self.Runtime.SceneReplicationConfig_property_get_spawn(self, path)
}
func (self SceneReplicationConfig) PropertySetSpawn(path NodePath, enabled bool) {
	self.Runtime.SceneReplicationConfig_property_set_spawn(self, path, enabled)
}
func (self SceneReplicationConfig) PropertyGetReplicationMode(path NodePath) SceneReplicationConfigReplicationMode {
	return self.Runtime.SceneReplicationConfig_property_get_replication_mode(self, path)
}
func (self SceneReplicationConfig) PropertySetReplicationMode(path NodePath, mode SceneReplicationConfigReplicationMode) {
	self.Runtime.SceneReplicationConfig_property_set_replication_mode(self, path, mode)
}
func (self SceneReplicationConfig) PropertyGetSync(path NodePath) bool {
	return self.Runtime.SceneReplicationConfig_property_get_sync(self, path)
}
func (self SceneReplicationConfig) PropertySetSync(path NodePath, enabled bool) {
	self.Runtime.SceneReplicationConfig_property_set_sync(self, path, enabled)
}
func (self SceneReplicationConfig) PropertyGetWatch(path NodePath) bool {
	return self.Runtime.SceneReplicationConfig_property_get_watch(self, path)
}
func (self SceneReplicationConfig) PropertySetWatch(path NodePath, enabled bool) {
	self.Runtime.SceneReplicationConfig_property_set_watch(self, path, enabled)
}

type extendsSceneState struct {
	_ [0]*extendsSceneState
	class
}

func (self SceneState) RefCounted() RefCounted {
	var parent RefCounted
	parent.class = self.class
	return parent
}
func (self SceneState) GetNodeCount() int64 {
	return self.Runtime.SceneState_get_node_count(self)
}
func (self SceneState) GetNodeType(idx int64) string {
	return self.Runtime.SceneState_get_node_type(self, idx)
}
func (self SceneState) GetNodeName(idx int64) string {
	return self.Runtime.SceneState_get_node_name(self, idx)
}
func (self SceneState) GetNodePath(idx int64, for_parent bool) NodePath {
	return self.Runtime.SceneState_get_node_path(self, idx, for_parent)
}
func (self SceneState) GetNodeOwnerPath(idx int64) NodePath {
	return self.Runtime.SceneState_get_node_owner_path(self, idx)
}
func (self SceneState) IsNodeInstancePlaceholder(idx int64) bool {
	return self.Runtime.SceneState_is_node_instance_placeholder(self, idx)
}
func (self SceneState) GetNodeInstancePlaceholder(idx int64) string {
	return self.Runtime.SceneState_get_node_instance_placeholder(self, idx)
}
func (self SceneState) GetNodeInstance(idx int64) PackedScene {
	return self.Runtime.SceneState_get_node_instance(self, idx)
}
func (self SceneState) GetNodeGroups(idx int64) PackedStringArray {
	return self.Runtime.SceneState_get_node_groups(self, idx)
}
func (self SceneState) GetNodeIndex(idx int64) int64 {
	return self.Runtime.SceneState_get_node_index(self, idx)
}
func (self SceneState) GetNodePropertyCount(idx int64) int64 {
	return self.Runtime.SceneState_get_node_property_count(self, idx)
}
func (self SceneState) GetNodePropertyName(idx int64, prop_idx int64) string {
	return self.Runtime.SceneState_get_node_property_name(self, idx, prop_idx)
}
func (self SceneState) GetNodePropertyValue(idx int64, prop_idx int64) any {
	return self.Runtime.SceneState_get_node_property_value(self, idx, prop_idx)
}
func (self SceneState) GetConnectionCount() int64 {
	return self.Runtime.SceneState_get_connection_count(self)
}
func (self SceneState) GetConnectionSource(idx int64) NodePath {
	return self.Runtime.SceneState_get_connection_source(self, idx)
}
func (self SceneState) GetConnectionSignal(idx int64) string {
	return self.Runtime.SceneState_get_connection_signal(self, idx)
}
func (self SceneState) GetConnectionTarget(idx int64) NodePath {
	return self.Runtime.SceneState_get_connection_target(self, idx)
}
func (self SceneState) GetConnectionMethod(idx int64) string {
	return self.Runtime.SceneState_get_connection_method(self, idx)
}
func (self SceneState) GetConnectionFlags(idx int64) int64 {
	return self.Runtime.SceneState_get_connection_flags(self, idx)
}
func (self SceneState) GetConnectionBinds(idx int64) Array {
	return self.Runtime.SceneState_get_connection_binds(self, idx)
}
func (self SceneState) GetConnectionUnbinds(idx int64) int64 {
	return self.Runtime.SceneState_get_connection_unbinds(self, idx)
}

type extendsSceneTree struct {
	_ [0]*extendsSceneTree
	class
}

func (self SceneTree) MainLoop() MainLoop {
	var parent MainLoop
	parent.class = self.class
	return parent
}
func (self SceneTree) GetRoot() Window {
	return self.Runtime.SceneTree_get_root(self)
}
func (self SceneTree) HasGroup(name string) bool {
	return self.Runtime.SceneTree_has_group(self, name)
}
func (self SceneTree) IsAutoAcceptQuit() bool {
	return self.Runtime.SceneTree_is_auto_accept_quit(self)
}
func (self SceneTree) SetAutoAcceptQuit(enabled bool) {
	self.Runtime.SceneTree_set_auto_accept_quit(self, enabled)
}
func (self SceneTree) IsQuitOnGoBack() bool {
	return self.Runtime.SceneTree_is_quit_on_go_back(self)
}
func (self SceneTree) SetQuitOnGoBack(enabled bool) {
	self.Runtime.SceneTree_set_quit_on_go_back(self, enabled)
}
func (self SceneTree) SetDebugCollisionsHint(enable bool) {
	self.Runtime.SceneTree_set_debug_collisions_hint(self, enable)
}
func (self SceneTree) IsDebuggingCollisionsHint() bool {
	return self.Runtime.SceneTree_is_debugging_collisions_hint(self)
}
func (self SceneTree) SetDebugPathsHint(enable bool) {
	self.Runtime.SceneTree_set_debug_paths_hint(self, enable)
}
func (self SceneTree) IsDebuggingPathsHint() bool {
	return self.Runtime.SceneTree_is_debugging_paths_hint(self)
}
func (self SceneTree) SetDebugNavigationHint(enable bool) {
	self.Runtime.SceneTree_set_debug_navigation_hint(self, enable)
}
func (self SceneTree) IsDebuggingNavigationHint() bool {
	return self.Runtime.SceneTree_is_debugging_navigation_hint(self)
}
func (self SceneTree) SetEditedSceneRoot(scene Node) {
	self.Runtime.SceneTree_set_edited_scene_root(self, scene)
}
func (self SceneTree) GetEditedSceneRoot() Node {
	return self.Runtime.SceneTree_get_edited_scene_root(self)
}
func (self SceneTree) SetPause(enable bool) {
	self.Runtime.SceneTree_set_pause(self, enable)
}
func (self SceneTree) IsPaused() bool {
	return self.Runtime.SceneTree_is_paused(self)
}
func (self SceneTree) CreateTimer(time_sec Float, process_always bool, process_in_physics bool, ignore_time_scale bool) SceneTreeTimer {
	return self.Runtime.SceneTree_create_timer(self, time_sec, process_always, process_in_physics, ignore_time_scale)
}
func (self SceneTree) CreateTween() Tween {
	return self.Runtime.SceneTree_create_tween(self)
}
func (self SceneTree) GetProcessedTweens() ArrayOf[Tween] {
	return self.Runtime.SceneTree_get_processed_tweens(self)
}
func (self SceneTree) GetNodeCount() int64 {
	return self.Runtime.SceneTree_get_node_count(self)
}
func (self SceneTree) GetFrame() int64 {
	return self.Runtime.SceneTree_get_frame(self)
}
func (self SceneTree) Quit(exit_code int64) {
	self.Runtime.SceneTree_quit(self, exit_code)
}
func (self SceneTree) QueueDelete(obj Object) {
	self.Runtime.SceneTree_queue_delete(self, obj)
}
func (self SceneTree) CallGroupFlags(flags int64, group string, method string) {
	self.Runtime.SceneTree_call_group_flags(self, flags, group, method)
}
func (self SceneTree) NotifyGroupFlags(call_flags int64, group string, notification int64) {
	self.Runtime.SceneTree_notify_group_flags(self, call_flags, group, notification)
}
func (self SceneTree) SetGroupFlags(call_flags int64, group string, property string, value any) {
	self.Runtime.SceneTree_set_group_flags(self, call_flags, group, property, value)
}
func (self SceneTree) CallGroup(group string, method string) {
	self.Runtime.SceneTree_call_group(self, group, method)
}
func (self SceneTree) NotifyGroup(group string, notification int64) {
	self.Runtime.SceneTree_notify_group(self, group, notification)
}
func (self SceneTree) SetGroup(group string, property string, value any) {
	self.Runtime.SceneTree_set_group(self, group, property, value)
}
func (self SceneTree) GetNodesInGroup(group string) ArrayOf[Node] {
	return self.Runtime.SceneTree_get_nodes_in_group(self, group)
}
func (self SceneTree) GetFirstNodeInGroup(group string) Node {
	return self.Runtime.SceneTree_get_first_node_in_group(self, group)
}
func (self SceneTree) GetNodeCountInGroup(group string) int64 {
	return self.Runtime.SceneTree_get_node_count_in_group(self, group)
}
func (self SceneTree) SetCurrentScene(child_node Node) {
	self.Runtime.SceneTree_set_current_scene(self, child_node)
}
func (self SceneTree) GetCurrentScene() Node {
	return self.Runtime.SceneTree_get_current_scene(self)
}
func (self SceneTree) ChangeSceneToFile(path string) int64 {
	return self.Runtime.SceneTree_change_scene_to_file(self, path)
}
func (self SceneTree) ChangeSceneToPacked(packed_scene PackedScene) int64 {
	return self.Runtime.SceneTree_change_scene_to_packed(self, packed_scene)
}
func (self SceneTree) ReloadCurrentScene() int64 {
	return self.Runtime.SceneTree_reload_current_scene(self)
}
func (self SceneTree) UnloadCurrentScene() {
	self.Runtime.SceneTree_unload_current_scene(self)
}
func (self SceneTree) SetMultiplayer(multiplayer MultiplayerAPI, root_path NodePath) {
	self.Runtime.SceneTree_set_multiplayer(self, multiplayer, root_path)
}
func (self SceneTree) GetMultiplayer(for_path NodePath) MultiplayerAPI {
	return self.Runtime.SceneTree_get_multiplayer(self, for_path)
}
func (self SceneTree) SetMultiplayerPollEnabled(enabled bool) {
	self.Runtime.SceneTree_set_multiplayer_poll_enabled(self, enabled)
}
func (self SceneTree) IsMultiplayerPollEnabled() bool {
	return self.Runtime.SceneTree_is_multiplayer_poll_enabled(self)
}

type extendsSceneTreeTimer struct {
	_ [0]*extendsSceneTreeTimer
	class
}

func (self SceneTreeTimer) RefCounted() RefCounted {
	var parent RefCounted
	parent.class = self.class
	return parent
}
func (self SceneTreeTimer) SetTimeLeft(time Float) {
	self.Runtime.SceneTreeTimer_set_time_left(self, time)
}
func (self SceneTreeTimer) GetTimeLeft() Float {
	return self.Runtime.SceneTreeTimer_get_time_left(self)
}

type extendsScript struct {
	_ [0]*extendsScript
	class
}

func (self Script) Resource() Resource { var parent Resource; parent.class = self.class; return parent }
func (self Script) CanInstantiate() bool {
	return self.Runtime.Script_can_instantiate(self)
}
func (self Script) InstanceHas(base_object Object) bool {
	return self.Runtime.Script_instance_has(self, base_object)
}
func (self Script) HasSourceCode() bool {
	return self.Runtime.Script_has_source_code(self)
}
func (self Script) GetSourceCode() string {
	return self.Runtime.Script_get_source_code(self)
}
func (self Script) SetSourceCode(source string) {
	self.Runtime.Script_set_source_code(self, source)
}
func (self Script) Reload(keep_state bool) int64 {
	return self.Runtime.Script_reload(self, keep_state)
}
func (self Script) GetBaseScript() Script {
	return self.Runtime.Script_get_base_script(self)
}
func (self Script) GetInstanceBaseType() string {
	return self.Runtime.Script_get_instance_base_type(self)
}
func (self Script) GetGlobalName() string {
	return self.Runtime.Script_get_global_name(self)
}
func (self Script) HasScriptSignal(signal_name string) bool {
	return self.Runtime.Script_has_script_signal(self, signal_name)
}
func (self Script) GetScriptPropertyList() ArrayOf[Dictionary] {
	return self.Runtime.Script_get_script_property_list(self)
}
func (self Script) GetScriptMethodList() ArrayOf[Dictionary] {
	return self.Runtime.Script_get_script_method_list(self)
}
func (self Script) GetScriptSignalList() ArrayOf[Dictionary] {
	return self.Runtime.Script_get_script_signal_list(self)
}
func (self Script) GetScriptConstantMap() Dictionary {
	return self.Runtime.Script_get_script_constant_map(self)
}
func (self Script) GetPropertyDefaultValue(property string) any {
	return self.Runtime.Script_get_property_default_value(self, property)
}
func (self Script) IsTool() bool {
	return self.Runtime.Script_is_tool(self)
}
func (self Script) IsAbstract() bool {
	return self.Runtime.Script_is_abstract(self)
}

type extendsScriptCreateDialog struct {
	_ [0]*extendsScriptCreateDialog
	class
}

func (self ScriptCreateDialog) ConfirmationDialog() ConfirmationDialog {
	var parent ConfirmationDialog
	parent.class = self.class
	return parent
}
func (self ScriptCreateDialog) Config(inherits string, path string, built_in_enabled bool, load_enabled bool) {
	self.Runtime.ScriptCreateDialog_config(self, inherits, path, built_in_enabled, load_enabled)
}

type extendsScriptEditor struct {
	_ [0]*extendsScriptEditor
	class
}

func (self ScriptEditor) PanelContainer() PanelContainer {
	var parent PanelContainer
	parent.class = self.class
	return parent
}
func (self ScriptEditor) GetCurrentEditor() ScriptEditorBase {
	return self.Runtime.ScriptEditor_get_current_editor(self)
}
func (self ScriptEditor) GetOpenScriptEditors() ArrayOf[ScriptEditorBase] {
	return self.Runtime.ScriptEditor_get_open_script_editors(self)
}
func (self ScriptEditor) RegisterSyntaxHighlighter(syntax_highlighter EditorSyntaxHighlighter) {
	self.Runtime.ScriptEditor_register_syntax_highlighter(self, syntax_highlighter)
}
func (self ScriptEditor) UnregisterSyntaxHighlighter(syntax_highlighter EditorSyntaxHighlighter) {
	self.Runtime.ScriptEditor_unregister_syntax_highlighter(self, syntax_highlighter)
}
func (self ScriptEditor) GotoLine(line_number int64) {
	self.Runtime.ScriptEditor_goto_line(self, line_number)
}
func (self ScriptEditor) GetCurrentScript() Script {
	return self.Runtime.ScriptEditor_get_current_script(self)
}
func (self ScriptEditor) GetOpenScripts() ArrayOf[Script] {
	return self.Runtime.ScriptEditor_get_open_scripts(self)
}
func (self ScriptEditor) OpenScriptCreateDialog(base_name string, base_path string) {
	self.Runtime.ScriptEditor_open_script_create_dialog(self, base_name, base_path)
}

type extendsScriptEditorBase struct {
	_ [0]*extendsScriptEditorBase
	class
}

func (self ScriptEditorBase) VBoxContainer() VBoxContainer {
	var parent VBoxContainer
	parent.class = self.class
	return parent
}
func (self ScriptEditorBase) GetBaseEditor() Control {
	return self.Runtime.ScriptEditorBase_get_base_editor(self)
}
func (self ScriptEditorBase) AddSyntaxHighlighter(highlighter EditorSyntaxHighlighter) {
	self.Runtime.ScriptEditorBase_add_syntax_highlighter(self, highlighter)
}

type extendsScriptExtension struct {
	_ [0]*extendsScriptExtension
	class
}

func (self ScriptExtension) Script() Script {
	var parent Script
	parent.class = self.class
	return parent
}

type extendsScriptLanguage struct {
	_ [0]*extendsScriptLanguage
	class
}

func (self ScriptLanguage) Object() Object {
	var parent Object
	parent.class = self.class
	return parent
}

type extendsScriptLanguageExtension struct {
	_ [0]*extendsScriptLanguageExtension
	class
}

func (self ScriptLanguageExtension) ScriptLanguage() ScriptLanguage {
	var parent ScriptLanguage
	parent.class = self.class
	return parent
}

type extendsScrollBar struct {
	_ [0]*extendsScrollBar
	class
}

func (self ScrollBar) Range() Range { var parent Range; parent.class = self.class; return parent }
func (self ScrollBar) SetCustomStep(step Float) {
	self.Runtime.ScrollBar_set_custom_step(self, step)
}
func (self ScrollBar) GetCustomStep() Float {
	return self.Runtime.ScrollBar_get_custom_step(self)
}

type extendsScrollContainer struct {
	_ [0]*extendsScrollContainer
	class
}

func (self ScrollContainer) Container() Container {
	var parent Container
	parent.class = self.class
	return parent
}
func (self ScrollContainer) SetHScroll(value int64) {
	self.Runtime.ScrollContainer_set_h_scroll(self, value)
}
func (self ScrollContainer) GetHScroll() int64 {
	return self.Runtime.ScrollContainer_get_h_scroll(self)
}
func (self ScrollContainer) SetVScroll(value int64) {
	self.Runtime.ScrollContainer_set_v_scroll(self, value)
}
func (self ScrollContainer) GetVScroll() int64 {
	return self.Runtime.ScrollContainer_get_v_scroll(self)
}
func (self ScrollContainer) SetHorizontalCustomStep(value Float) {
	self.Runtime.ScrollContainer_set_horizontal_custom_step(self, value)
}
func (self ScrollContainer) GetHorizontalCustomStep() Float {
	return self.Runtime.ScrollContainer_get_horizontal_custom_step(self)
}
func (self ScrollContainer) SetVerticalCustomStep(value Float) {
	self.Runtime.ScrollContainer_set_vertical_custom_step(self, value)
}
func (self ScrollContainer) GetVerticalCustomStep() Float {
	return self.Runtime.ScrollContainer_get_vertical_custom_step(self)
}
func (self ScrollContainer) SetHorizontalScrollMode(enable ScrollContainerScrollMode) {
	self.Runtime.ScrollContainer_set_horizontal_scroll_mode(self, enable)
}
func (self ScrollContainer) GetHorizontalScrollMode() ScrollContainerScrollMode {
	return self.Runtime.ScrollContainer_get_horizontal_scroll_mode(self)
}
func (self ScrollContainer) SetVerticalScrollMode(enable ScrollContainerScrollMode) {
	self.Runtime.ScrollContainer_set_vertical_scroll_mode(self, enable)
}
func (self ScrollContainer) GetVerticalScrollMode() ScrollContainerScrollMode {
	return self.Runtime.ScrollContainer_get_vertical_scroll_mode(self)
}
func (self ScrollContainer) SetDeadzone(deadzone int64) {
	self.Runtime.ScrollContainer_set_deadzone(self, deadzone)
}
func (self ScrollContainer) GetDeadzone() int64 {
	return self.Runtime.ScrollContainer_get_deadzone(self)
}
func (self ScrollContainer) SetFollowFocus(enabled bool) {
	self.Runtime.ScrollContainer_set_follow_focus(self, enabled)
}
func (self ScrollContainer) IsFollowingFocus() bool {
	return self.Runtime.ScrollContainer_is_following_focus(self)
}
func (self ScrollContainer) GetHScrollBar() HScrollBar {
	return self.Runtime.ScrollContainer_get_h_scroll_bar(self)
}
func (self ScrollContainer) GetVScrollBar() VScrollBar {
	return self.Runtime.ScrollContainer_get_v_scroll_bar(self)
}
func (self ScrollContainer) EnsureControlVisible(control Control) {
	self.Runtime.ScrollContainer_ensure_control_visible(self, control)
}

type extendsSegmentShape2D struct {
	_ [0]*extendsSegmentShape2D
	class
}

func (self SegmentShape2D) Shape2D() Shape2D {
	var parent Shape2D
	parent.class = self.class
	return parent
}
func (self SegmentShape2D) SetA(a Vector2) {
	self.Runtime.SegmentShape2D_set_a(self, a)
}
func (self SegmentShape2D) GetA() Vector2 {
	return self.Runtime.SegmentShape2D_get_a(self)
}
func (self SegmentShape2D) SetB(b Vector2) {
	self.Runtime.SegmentShape2D_set_b(self, b)
}
func (self SegmentShape2D) GetB() Vector2 {
	return self.Runtime.SegmentShape2D_get_b(self)
}

type extendsSemaphore struct {
	_ [0]*extendsSemaphore
	class
}

func (self Semaphore) RefCounted() RefCounted {
	var parent RefCounted
	parent.class = self.class
	return parent
}
func (self Semaphore) Wait() {
	self.Runtime.Semaphore_wait(self)
}
func (self Semaphore) TryWait() bool {
	return self.Runtime.Semaphore_try_wait(self)
}
func (self Semaphore) Post() {
	self.Runtime.Semaphore_post(self)
}

type extendsSeparationRayShape2D struct {
	_ [0]*extendsSeparationRayShape2D
	class
}

func (self SeparationRayShape2D) Shape2D() Shape2D {
	var parent Shape2D
	parent.class = self.class
	return parent
}
func (self SeparationRayShape2D) SetLength(length Float) {
	self.Runtime.SeparationRayShape2D_set_length(self, length)
}
func (self SeparationRayShape2D) GetLength() Float {
	return self.Runtime.SeparationRayShape2D_get_length(self)
}
func (self SeparationRayShape2D) SetSlideOnSlope(active bool) {
	self.Runtime.SeparationRayShape2D_set_slide_on_slope(self, active)
}
func (self SeparationRayShape2D) GetSlideOnSlope() bool {
	return self.Runtime.SeparationRayShape2D_get_slide_on_slope(self)
}

type extendsSeparationRayShape3D struct {
	_ [0]*extendsSeparationRayShape3D
	class
}

func (self SeparationRayShape3D) Shape3D() Shape3D {
	var parent Shape3D
	parent.class = self.class
	return parent
}
func (self SeparationRayShape3D) SetLength(length Float) {
	self.Runtime.SeparationRayShape3D_set_length(self, length)
}
func (self SeparationRayShape3D) GetLength() Float {
	return self.Runtime.SeparationRayShape3D_get_length(self)
}
func (self SeparationRayShape3D) SetSlideOnSlope(active bool) {
	self.Runtime.SeparationRayShape3D_set_slide_on_slope(self, active)
}
func (self SeparationRayShape3D) GetSlideOnSlope() bool {
	return self.Runtime.SeparationRayShape3D_get_slide_on_slope(self)
}

type extendsSeparator struct {
	_ [0]*extendsSeparator
	class
}

func (self Separator) Control() Control { var parent Control; parent.class = self.class; return parent }

type extendsShader struct {
	_ [0]*extendsShader
	class
}

func (self Shader) Resource() Resource { var parent Resource; parent.class = self.class; return parent }
func (self Shader) GetMode() ShaderMode {
	return self.Runtime.Shader_get_mode(self)
}
func (self Shader) SetCode(code string) {
	self.Runtime.Shader_set_code(self, code)
}
func (self Shader) GetCode() string {
	return self.Runtime.Shader_get_code(self)
}
func (self Shader) SetDefaultTextureParameter(name string, texture Texture2D, index int64) {
	self.Runtime.Shader_set_default_texture_parameter(self, name, texture, index)
}
func (self Shader) GetDefaultTextureParameter(name string, index int64) Texture2D {
	return self.Runtime.Shader_get_default_texture_parameter(self, name, index)
}
func (self Shader) GetShaderUniformList(get_groups bool) Array {
	return self.Runtime.Shader_get_shader_uniform_list(self, get_groups)
}

type extendsShaderGlobalsOverride struct {
	_ [0]*extendsShaderGlobalsOverride
	class
}

func (self ShaderGlobalsOverride) Node() Node {
	var parent Node
	parent.class = self.class
	return parent
}

type extendsShaderInclude struct {
	_ [0]*extendsShaderInclude
	class
}

func (self ShaderInclude) Resource() Resource {
	var parent Resource
	parent.class = self.class
	return parent
}
func (self ShaderInclude) SetCode(code string) {
	self.Runtime.ShaderInclude_set_code(self, code)
}
func (self ShaderInclude) GetCode() string {
	return self.Runtime.ShaderInclude_get_code(self)
}

type extendsShaderMaterial struct {
	_ [0]*extendsShaderMaterial
	class
}

func (self ShaderMaterial) Material() Material {
	var parent Material
	parent.class = self.class
	return parent
}
func (self ShaderMaterial) SetShader(shader Shader) {
	self.Runtime.ShaderMaterial_set_shader(self, shader)
}
func (self ShaderMaterial) GetShader() Shader {
	return self.Runtime.ShaderMaterial_get_shader(self)
}
func (self ShaderMaterial) SetShaderParameter(param string, value any) {
	self.Runtime.ShaderMaterial_set_shader_parameter(self, param, value)
}
func (self ShaderMaterial) GetShaderParameter(param string) any {
	return self.Runtime.ShaderMaterial_get_shader_parameter(self, param)
}

type extendsShape2D struct {
	_ [0]*extendsShape2D
	class
}

func (self Shape2D) Resource() Resource {
	var parent Resource
	parent.class = self.class
	return parent
}
func (self Shape2D) SetCustomSolverBias(bias Float) {
	self.Runtime.Shape2D_set_custom_solver_bias(self, bias)
}
func (self Shape2D) GetCustomSolverBias() Float {
	return self.Runtime.Shape2D_get_custom_solver_bias(self)
}
func (self Shape2D) Collide(local_xform Transform2D, with_shape Shape2D, shape_xform Transform2D) bool {
	return self.Runtime.Shape2D_collide(self, local_xform, with_shape, shape_xform)
}
func (self Shape2D) CollideWithMotion(local_xform Transform2D, local_motion Vector2, with_shape Shape2D, shape_xform Transform2D, shape_motion Vector2) bool {
	return self.Runtime.Shape2D_collide_with_motion(self, local_xform, local_motion, with_shape, shape_xform, shape_motion)
}
func (self Shape2D) CollideAndGetContacts(local_xform Transform2D, with_shape Shape2D, shape_xform Transform2D) PackedVector2Array {
	return self.Runtime.Shape2D_collide_and_get_contacts(self, local_xform, with_shape, shape_xform)
}
func (self Shape2D) CollideWithMotionAndGetContacts(local_xform Transform2D, local_motion Vector2, with_shape Shape2D, shape_xform Transform2D, shape_motion Vector2) PackedVector2Array {
	return self.Runtime.Shape2D_collide_with_motion_and_get_contacts(self, local_xform, local_motion, with_shape, shape_xform, shape_motion)
}
func (self Shape2D) Draw(canvas_item RID, color Color) {
	self.Runtime.Shape2D_draw(self, canvas_item, color)
}
func (self Shape2D) GetRect() Rect2 {
	return self.Runtime.Shape2D_get_rect(self)
}

type extendsShape3D struct {
	_ [0]*extendsShape3D
	class
}

func (self Shape3D) Resource() Resource {
	var parent Resource
	parent.class = self.class
	return parent
}
func (self Shape3D) SetCustomSolverBias(bias Float) {
	self.Runtime.Shape3D_set_custom_solver_bias(self, bias)
}
func (self Shape3D) GetCustomSolverBias() Float {
	return self.Runtime.Shape3D_get_custom_solver_bias(self)
}
func (self Shape3D) SetMargin(margin Float) {
	self.Runtime.Shape3D_set_margin(self, margin)
}
func (self Shape3D) GetMargin() Float {
	return self.Runtime.Shape3D_get_margin(self)
}
func (self Shape3D) GetDebugMesh() ArrayMesh {
	return self.Runtime.Shape3D_get_debug_mesh(self)
}

type extendsShapeCast2D struct {
	_ [0]*extendsShapeCast2D
	class
}

func (self ShapeCast2D) Node2D() Node2D { var parent Node2D; parent.class = self.class; return parent }
func (self ShapeCast2D) SetEnabled(enabled bool) {
	self.Runtime.ShapeCast2D_set_enabled(self, enabled)
}
func (self ShapeCast2D) IsEnabled() bool {
	return self.Runtime.ShapeCast2D_is_enabled(self)
}
func (self ShapeCast2D) SetShape(shape Shape2D) {
	self.Runtime.ShapeCast2D_set_shape(self, shape)
}
func (self ShapeCast2D) GetShape() Shape2D {
	return self.Runtime.ShapeCast2D_get_shape(self)
}
func (self ShapeCast2D) SetTargetPosition(local_point Vector2) {
	self.Runtime.ShapeCast2D_set_target_position(self, local_point)
}
func (self ShapeCast2D) GetTargetPosition() Vector2 {
	return self.Runtime.ShapeCast2D_get_target_position(self)
}
func (self ShapeCast2D) SetMargin(margin Float) {
	self.Runtime.ShapeCast2D_set_margin(self, margin)
}
func (self ShapeCast2D) GetMargin() Float {
	return self.Runtime.ShapeCast2D_get_margin(self)
}
func (self ShapeCast2D) SetMaxResults(max_results int64) {
	self.Runtime.ShapeCast2D_set_max_results(self, max_results)
}
func (self ShapeCast2D) GetMaxResults() int64 {
	return self.Runtime.ShapeCast2D_get_max_results(self)
}
func (self ShapeCast2D) IsColliding() bool {
	return self.Runtime.ShapeCast2D_is_colliding(self)
}
func (self ShapeCast2D) GetCollisionCount() int64 {
	return self.Runtime.ShapeCast2D_get_collision_count(self)
}
func (self ShapeCast2D) ForceShapecastUpdate() {
	self.Runtime.ShapeCast2D_force_shapecast_update(self)
}
func (self ShapeCast2D) GetCollider(index int64) Object {
	return self.Runtime.ShapeCast2D_get_collider(self, index)
}
func (self ShapeCast2D) GetColliderRid(index int64) RID {
	return self.Runtime.ShapeCast2D_get_collider_rid(self, index)
}
func (self ShapeCast2D) GetColliderShape(index int64) int64 {
	return self.Runtime.ShapeCast2D_get_collider_shape(self, index)
}
func (self ShapeCast2D) GetCollisionPoint(index int64) Vector2 {
	return self.Runtime.ShapeCast2D_get_collision_point(self, index)
}
func (self ShapeCast2D) GetCollisionNormal(index int64) Vector2 {
	return self.Runtime.ShapeCast2D_get_collision_normal(self, index)
}
func (self ShapeCast2D) GetClosestCollisionSafeFraction() Float {
	return self.Runtime.ShapeCast2D_get_closest_collision_safe_fraction(self)
}
func (self ShapeCast2D) GetClosestCollisionUnsafeFraction() Float {
	return self.Runtime.ShapeCast2D_get_closest_collision_unsafe_fraction(self)
}
func (self ShapeCast2D) AddExceptionRid(rid RID) {
	self.Runtime.ShapeCast2D_add_exception_rid(self, rid)
}
func (self ShapeCast2D) AddException(node CollisionObject2D) {
	self.Runtime.ShapeCast2D_add_exception(self, node)
}
func (self ShapeCast2D) RemoveExceptionRid(rid RID) {
	self.Runtime.ShapeCast2D_remove_exception_rid(self, rid)
}
func (self ShapeCast2D) RemoveException(node CollisionObject2D) {
	self.Runtime.ShapeCast2D_remove_exception(self, node)
}
func (self ShapeCast2D) ClearExceptions() {
	self.Runtime.ShapeCast2D_clear_exceptions(self)
}
func (self ShapeCast2D) SetCollisionMask(mask int64) {
	self.Runtime.ShapeCast2D_set_collision_mask(self, mask)
}
func (self ShapeCast2D) GetCollisionMask() int64 {
	return self.Runtime.ShapeCast2D_get_collision_mask(self)
}
func (self ShapeCast2D) SetCollisionMaskValue(layer_number int64, value bool) {
	self.Runtime.ShapeCast2D_set_collision_mask_value(self, layer_number, value)
}
func (self ShapeCast2D) GetCollisionMaskValue(layer_number int64) bool {
	return self.Runtime.ShapeCast2D_get_collision_mask_value(self, layer_number)
}
func (self ShapeCast2D) SetExcludeParentBody(mask bool) {
	self.Runtime.ShapeCast2D_set_exclude_parent_body(self, mask)
}
func (self ShapeCast2D) GetExcludeParentBody() bool {
	return self.Runtime.ShapeCast2D_get_exclude_parent_body(self)
}
func (self ShapeCast2D) SetCollideWithAreas(enable bool) {
	self.Runtime.ShapeCast2D_set_collide_with_areas(self, enable)
}
func (self ShapeCast2D) IsCollideWithAreasEnabled() bool {
	return self.Runtime.ShapeCast2D_is_collide_with_areas_enabled(self)
}
func (self ShapeCast2D) SetCollideWithBodies(enable bool) {
	self.Runtime.ShapeCast2D_set_collide_with_bodies(self, enable)
}
func (self ShapeCast2D) IsCollideWithBodiesEnabled() bool {
	return self.Runtime.ShapeCast2D_is_collide_with_bodies_enabled(self)
}

type extendsShapeCast3D struct {
	_ [0]*extendsShapeCast3D
	class
}

func (self ShapeCast3D) Node3D() Node3D { var parent Node3D; parent.class = self.class; return parent }
func (self ShapeCast3D) ResourceChanged(resource Resource) {
	self.Runtime.ShapeCast3D_resource_changed(self, resource)
}
func (self ShapeCast3D) SetEnabled(enabled bool) {
	self.Runtime.ShapeCast3D_set_enabled(self, enabled)
}
func (self ShapeCast3D) IsEnabled() bool {
	return self.Runtime.ShapeCast3D_is_enabled(self)
}
func (self ShapeCast3D) SetShape(shape Shape3D) {
	self.Runtime.ShapeCast3D_set_shape(self, shape)
}
func (self ShapeCast3D) GetShape() Shape3D {
	return self.Runtime.ShapeCast3D_get_shape(self)
}
func (self ShapeCast3D) SetTargetPosition(local_point Vector3) {
	self.Runtime.ShapeCast3D_set_target_position(self, local_point)
}
func (self ShapeCast3D) GetTargetPosition() Vector3 {
	return self.Runtime.ShapeCast3D_get_target_position(self)
}
func (self ShapeCast3D) SetMargin(margin Float) {
	self.Runtime.ShapeCast3D_set_margin(self, margin)
}
func (self ShapeCast3D) GetMargin() Float {
	return self.Runtime.ShapeCast3D_get_margin(self)
}
func (self ShapeCast3D) SetMaxResults(max_results int64) {
	self.Runtime.ShapeCast3D_set_max_results(self, max_results)
}
func (self ShapeCast3D) GetMaxResults() int64 {
	return self.Runtime.ShapeCast3D_get_max_results(self)
}
func (self ShapeCast3D) IsColliding() bool {
	return self.Runtime.ShapeCast3D_is_colliding(self)
}
func (self ShapeCast3D) GetCollisionCount() int64 {
	return self.Runtime.ShapeCast3D_get_collision_count(self)
}
func (self ShapeCast3D) ForceShapecastUpdate() {
	self.Runtime.ShapeCast3D_force_shapecast_update(self)
}
func (self ShapeCast3D) GetCollider(index int64) Object {
	return self.Runtime.ShapeCast3D_get_collider(self, index)
}
func (self ShapeCast3D) GetColliderRid(index int64) RID {
	return self.Runtime.ShapeCast3D_get_collider_rid(self, index)
}
func (self ShapeCast3D) GetColliderShape(index int64) int64 {
	return self.Runtime.ShapeCast3D_get_collider_shape(self, index)
}
func (self ShapeCast3D) GetCollisionPoint(index int64) Vector3 {
	return self.Runtime.ShapeCast3D_get_collision_point(self, index)
}
func (self ShapeCast3D) GetCollisionNormal(index int64) Vector3 {
	return self.Runtime.ShapeCast3D_get_collision_normal(self, index)
}
func (self ShapeCast3D) GetClosestCollisionSafeFraction() Float {
	return self.Runtime.ShapeCast3D_get_closest_collision_safe_fraction(self)
}
func (self ShapeCast3D) GetClosestCollisionUnsafeFraction() Float {
	return self.Runtime.ShapeCast3D_get_closest_collision_unsafe_fraction(self)
}
func (self ShapeCast3D) AddExceptionRid(rid RID) {
	self.Runtime.ShapeCast3D_add_exception_rid(self, rid)
}
func (self ShapeCast3D) AddException(node CollisionObject3D) {
	self.Runtime.ShapeCast3D_add_exception(self, node)
}
func (self ShapeCast3D) RemoveExceptionRid(rid RID) {
	self.Runtime.ShapeCast3D_remove_exception_rid(self, rid)
}
func (self ShapeCast3D) RemoveException(node CollisionObject3D) {
	self.Runtime.ShapeCast3D_remove_exception(self, node)
}
func (self ShapeCast3D) ClearExceptions() {
	self.Runtime.ShapeCast3D_clear_exceptions(self)
}
func (self ShapeCast3D) SetCollisionMask(mask int64) {
	self.Runtime.ShapeCast3D_set_collision_mask(self, mask)
}
func (self ShapeCast3D) GetCollisionMask() int64 {
	return self.Runtime.ShapeCast3D_get_collision_mask(self)
}
func (self ShapeCast3D) SetCollisionMaskValue(layer_number int64, value bool) {
	self.Runtime.ShapeCast3D_set_collision_mask_value(self, layer_number, value)
}
func (self ShapeCast3D) GetCollisionMaskValue(layer_number int64) bool {
	return self.Runtime.ShapeCast3D_get_collision_mask_value(self, layer_number)
}
func (self ShapeCast3D) SetExcludeParentBody(mask bool) {
	self.Runtime.ShapeCast3D_set_exclude_parent_body(self, mask)
}
func (self ShapeCast3D) GetExcludeParentBody() bool {
	return self.Runtime.ShapeCast3D_get_exclude_parent_body(self)
}
func (self ShapeCast3D) SetCollideWithAreas(enable bool) {
	self.Runtime.ShapeCast3D_set_collide_with_areas(self, enable)
}
func (self ShapeCast3D) IsCollideWithAreasEnabled() bool {
	return self.Runtime.ShapeCast3D_is_collide_with_areas_enabled(self)
}
func (self ShapeCast3D) SetCollideWithBodies(enable bool) {
	self.Runtime.ShapeCast3D_set_collide_with_bodies(self, enable)
}
func (self ShapeCast3D) IsCollideWithBodiesEnabled() bool {
	return self.Runtime.ShapeCast3D_is_collide_with_bodies_enabled(self)
}
func (self ShapeCast3D) SetDebugShapeCustomColor(debug_shape_custom_color Color) {
	self.Runtime.ShapeCast3D_set_debug_shape_custom_color(self, debug_shape_custom_color)
}
func (self ShapeCast3D) GetDebugShapeCustomColor() Color {
	return self.Runtime.ShapeCast3D_get_debug_shape_custom_color(self)
}

type extendsShortcut struct {
	_ [0]*extendsShortcut
	class
}

func (self Shortcut) Resource() Resource {
	var parent Resource
	parent.class = self.class
	return parent
}
func (self Shortcut) SetEvents(events Array) {
	self.Runtime.Shortcut_set_events(self, events)
}
func (self Shortcut) GetEvents() Array {
	return self.Runtime.Shortcut_get_events(self)
}
func (self Shortcut) HasValidEvent() bool {
	return self.Runtime.Shortcut_has_valid_event(self)
}
func (self Shortcut) MatchesEvent(event InputEvent) bool {
	return self.Runtime.Shortcut_matches_event(self, event)
}
func (self Shortcut) GetAsText() string {
	return self.Runtime.Shortcut_get_as_text(self)
}

type extendsSkeleton2D struct {
	_ [0]*extendsSkeleton2D
	class
}

func (self Skeleton2D) Node2D() Node2D { var parent Node2D; parent.class = self.class; return parent }
func (self Skeleton2D) GetBoneCount() int64 {
	return self.Runtime.Skeleton2D_get_bone_count(self)
}
func (self Skeleton2D) GetBone(idx int64) Bone2D {
	return self.Runtime.Skeleton2D_get_bone(self, idx)
}
func (self Skeleton2D) GetSkeleton() RID {
	return self.Runtime.Skeleton2D_get_skeleton(self)
}
func (self Skeleton2D) SetModificationStack(modification_stack SkeletonModificationStack2D) {
	self.Runtime.Skeleton2D_set_modification_stack(self, modification_stack)
}
func (self Skeleton2D) GetModificationStack() SkeletonModificationStack2D {
	return self.Runtime.Skeleton2D_get_modification_stack(self)
}
func (self Skeleton2D) ExecuteModifications(delta Float, execution_mode int64) {
	self.Runtime.Skeleton2D_execute_modifications(self, delta, execution_mode)
}
func (self Skeleton2D) SetBoneLocalPoseOverride(bone_idx int64, override_pose Transform2D, strength Float, persistent bool) {
	self.Runtime.Skeleton2D_set_bone_local_pose_override(self, bone_idx, override_pose, strength, persistent)
}
func (self Skeleton2D) GetBoneLocalPoseOverride(bone_idx int64) Transform2D {
	return self.Runtime.Skeleton2D_get_bone_local_pose_override(self, bone_idx)
}

type extendsSkeleton3D struct {
	_ [0]*extendsSkeleton3D
	class
}

func (self Skeleton3D) Node3D() Node3D { var parent Node3D; parent.class = self.class; return parent }
func (self Skeleton3D) AddBone(name string) {
	self.Runtime.Skeleton3D_add_bone(self, name)
}
func (self Skeleton3D) FindBone(name string) int64 {
	return self.Runtime.Skeleton3D_find_bone(self, name)
}
func (self Skeleton3D) GetBoneName(bone_idx int64) string {
	return self.Runtime.Skeleton3D_get_bone_name(self, bone_idx)
}
func (self Skeleton3D) SetBoneName(bone_idx int64, name string) {
	self.Runtime.Skeleton3D_set_bone_name(self, bone_idx, name)
}
func (self Skeleton3D) GetBoneParent(bone_idx int64) int64 {
	return self.Runtime.Skeleton3D_get_bone_parent(self, bone_idx)
}
func (self Skeleton3D) SetBoneParent(bone_idx int64, parent_idx int64) {
	self.Runtime.Skeleton3D_set_bone_parent(self, bone_idx, parent_idx)
}
func (self Skeleton3D) GetBoneCount() int64 {
	return self.Runtime.Skeleton3D_get_bone_count(self)
}
func (self Skeleton3D) GetVersion() int64 {
	return self.Runtime.Skeleton3D_get_version(self)
}
func (self Skeleton3D) UnparentBoneAndRest(bone_idx int64) {
	self.Runtime.Skeleton3D_unparent_bone_and_rest(self, bone_idx)
}
func (self Skeleton3D) GetBoneChildren(bone_idx int64) PackedInt32Array {
	return self.Runtime.Skeleton3D_get_bone_children(self, bone_idx)
}
func (self Skeleton3D) GetParentlessBones() PackedInt32Array {
	return self.Runtime.Skeleton3D_get_parentless_bones(self)
}
func (self Skeleton3D) GetBoneRest(bone_idx int64) Transform3D {
	return self.Runtime.Skeleton3D_get_bone_rest(self, bone_idx)
}
func (self Skeleton3D) SetBoneRest(bone_idx int64, rest Transform3D) {
	self.Runtime.Skeleton3D_set_bone_rest(self, bone_idx, rest)
}
func (self Skeleton3D) GetBoneGlobalRest(bone_idx int64) Transform3D {
	return self.Runtime.Skeleton3D_get_bone_global_rest(self, bone_idx)
}
func (self Skeleton3D) CreateSkinFromRestTransforms() Skin {
	return self.Runtime.Skeleton3D_create_skin_from_rest_transforms(self)
}
func (self Skeleton3D) RegisterSkin(skin Skin) SkinReference {
	return self.Runtime.Skeleton3D_register_skin(self, skin)
}
func (self Skeleton3D) LocalizeRests() {
	self.Runtime.Skeleton3D_localize_rests(self)
}
func (self Skeleton3D) ClearBones() {
	self.Runtime.Skeleton3D_clear_bones(self)
}
func (self Skeleton3D) GetBonePose(bone_idx int64) Transform3D {
	return self.Runtime.Skeleton3D_get_bone_pose(self, bone_idx)
}
func (self Skeleton3D) SetBonePosePosition(bone_idx int64, position Vector3) {
	self.Runtime.Skeleton3D_set_bone_pose_position(self, bone_idx, position)
}
func (self Skeleton3D) SetBonePoseRotation(bone_idx int64, rotation Quaternion) {
	self.Runtime.Skeleton3D_set_bone_pose_rotation(self, bone_idx, rotation)
}
func (self Skeleton3D) SetBonePoseScale(bone_idx int64, scale Vector3) {
	self.Runtime.Skeleton3D_set_bone_pose_scale(self, bone_idx, scale)
}
func (self Skeleton3D) GetBonePosePosition(bone_idx int64) Vector3 {
	return self.Runtime.Skeleton3D_get_bone_pose_position(self, bone_idx)
}
func (self Skeleton3D) GetBonePoseRotation(bone_idx int64) Quaternion {
	return self.Runtime.Skeleton3D_get_bone_pose_rotation(self, bone_idx)
}
func (self Skeleton3D) GetBonePoseScale(bone_idx int64) Vector3 {
	return self.Runtime.Skeleton3D_get_bone_pose_scale(self, bone_idx)
}
func (self Skeleton3D) ResetBonePose(bone_idx int64) {
	self.Runtime.Skeleton3D_reset_bone_pose(self, bone_idx)
}
func (self Skeleton3D) ResetBonePoses() {
	self.Runtime.Skeleton3D_reset_bone_poses(self)
}
func (self Skeleton3D) IsBoneEnabled(bone_idx int64) bool {
	return self.Runtime.Skeleton3D_is_bone_enabled(self, bone_idx)
}
func (self Skeleton3D) SetBoneEnabled(bone_idx int64, enabled bool) {
	self.Runtime.Skeleton3D_set_bone_enabled(self, bone_idx, enabled)
}
func (self Skeleton3D) ClearBonesGlobalPoseOverride() {
	self.Runtime.Skeleton3D_clear_bones_global_pose_override(self)
}
func (self Skeleton3D) SetBoneGlobalPoseOverride(bone_idx int64, pose Transform3D, amount Float, persistent bool) {
	self.Runtime.Skeleton3D_set_bone_global_pose_override(self, bone_idx, pose, amount, persistent)
}
func (self Skeleton3D) GetBoneGlobalPoseOverride(bone_idx int64) Transform3D {
	return self.Runtime.Skeleton3D_get_bone_global_pose_override(self, bone_idx)
}
func (self Skeleton3D) GetBoneGlobalPose(bone_idx int64) Transform3D {
	return self.Runtime.Skeleton3D_get_bone_global_pose(self, bone_idx)
}
func (self Skeleton3D) GetBoneGlobalPoseNoOverride(bone_idx int64) Transform3D {
	return self.Runtime.Skeleton3D_get_bone_global_pose_no_override(self, bone_idx)
}
func (self Skeleton3D) ForceUpdateAllBoneTransforms() {
	self.Runtime.Skeleton3D_force_update_all_bone_transforms(self)
}
func (self Skeleton3D) ForceUpdateBoneChildTransform(bone_idx int64) {
	self.Runtime.Skeleton3D_force_update_bone_child_transform(self, bone_idx)
}
func (self Skeleton3D) SetMotionScale(motion_scale Float) {
	self.Runtime.Skeleton3D_set_motion_scale(self, motion_scale)
}
func (self Skeleton3D) GetMotionScale() Float {
	return self.Runtime.Skeleton3D_get_motion_scale(self)
}
func (self Skeleton3D) SetShowRestOnly(enabled bool) {
	self.Runtime.Skeleton3D_set_show_rest_only(self, enabled)
}
func (self Skeleton3D) IsShowRestOnly() bool {
	return self.Runtime.Skeleton3D_is_show_rest_only(self)
}
func (self Skeleton3D) SetAnimatePhysicalBones(enabled bool) {
	self.Runtime.Skeleton3D_set_animate_physical_bones(self, enabled)
}
func (self Skeleton3D) GetAnimatePhysicalBones() bool {
	return self.Runtime.Skeleton3D_get_animate_physical_bones(self)
}
func (self Skeleton3D) PhysicalBonesStopSimulation() {
	self.Runtime.Skeleton3D_physical_bones_stop_simulation(self)
}
func (self Skeleton3D) PhysicalBonesStartSimulation(bones ArrayOf[string]) {
	self.Runtime.Skeleton3D_physical_bones_start_simulation(self, bones)
}
func (self Skeleton3D) PhysicalBonesAddCollisionException(exception RID) {
	self.Runtime.Skeleton3D_physical_bones_add_collision_exception(self, exception)
}
func (self Skeleton3D) PhysicalBonesRemoveCollisionException(exception RID) {
	self.Runtime.Skeleton3D_physical_bones_remove_collision_exception(self, exception)
}

type extendsSkeletonIK3D struct {
	_ [0]*extendsSkeletonIK3D
	class
}

func (self SkeletonIK3D) Node() Node { var parent Node; parent.class = self.class; return parent }
func (self SkeletonIK3D) SetRootBone(root_bone string) {
	self.Runtime.SkeletonIK3D_set_root_bone(self, root_bone)
}
func (self SkeletonIK3D) GetRootBone() string {
	return self.Runtime.SkeletonIK3D_get_root_bone(self)
}
func (self SkeletonIK3D) SetTipBone(tip_bone string) {
	self.Runtime.SkeletonIK3D_set_tip_bone(self, tip_bone)
}
func (self SkeletonIK3D) GetTipBone() string {
	return self.Runtime.SkeletonIK3D_get_tip_bone(self)
}
func (self SkeletonIK3D) SetInterpolation(interpolation Float) {
	self.Runtime.SkeletonIK3D_set_interpolation(self, interpolation)
}
func (self SkeletonIK3D) GetInterpolation() Float {
	return self.Runtime.SkeletonIK3D_get_interpolation(self)
}
func (self SkeletonIK3D) SetTargetTransform(target Transform3D) {
	self.Runtime.SkeletonIK3D_set_target_transform(self, target)
}
func (self SkeletonIK3D) GetTargetTransform() Transform3D {
	return self.Runtime.SkeletonIK3D_get_target_transform(self)
}
func (self SkeletonIK3D) SetTargetNode(node NodePath) {
	self.Runtime.SkeletonIK3D_set_target_node(self, node)
}
func (self SkeletonIK3D) GetTargetNode() NodePath {
	return self.Runtime.SkeletonIK3D_get_target_node(self)
}
func (self SkeletonIK3D) SetOverrideTipBasis(override bool) {
	self.Runtime.SkeletonIK3D_set_override_tip_basis(self, override)
}
func (self SkeletonIK3D) IsOverrideTipBasis() bool {
	return self.Runtime.SkeletonIK3D_is_override_tip_basis(self)
}
func (self SkeletonIK3D) SetUseMagnet(use bool) {
	self.Runtime.SkeletonIK3D_set_use_magnet(self, use)
}
func (self SkeletonIK3D) IsUsingMagnet() bool {
	return self.Runtime.SkeletonIK3D_is_using_magnet(self)
}
func (self SkeletonIK3D) SetMagnetPosition(local_position Vector3) {
	self.Runtime.SkeletonIK3D_set_magnet_position(self, local_position)
}
func (self SkeletonIK3D) GetMagnetPosition() Vector3 {
	return self.Runtime.SkeletonIK3D_get_magnet_position(self)
}
func (self SkeletonIK3D) GetParentSkeleton() Skeleton3D {
	return self.Runtime.SkeletonIK3D_get_parent_skeleton(self)
}
func (self SkeletonIK3D) IsRunning() bool {
	return self.Runtime.SkeletonIK3D_is_running(self)
}
func (self SkeletonIK3D) SetMinDistance(min_distance Float) {
	self.Runtime.SkeletonIK3D_set_min_distance(self, min_distance)
}
func (self SkeletonIK3D) GetMinDistance() Float {
	return self.Runtime.SkeletonIK3D_get_min_distance(self)
}
func (self SkeletonIK3D) SetMaxIterations(iterations int64) {
	self.Runtime.SkeletonIK3D_set_max_iterations(self, iterations)
}
func (self SkeletonIK3D) GetMaxIterations() int64 {
	return self.Runtime.SkeletonIK3D_get_max_iterations(self)
}
func (self SkeletonIK3D) Start(one_time bool) {
	self.Runtime.SkeletonIK3D_start(self, one_time)
}
func (self SkeletonIK3D) Stop() {
	self.Runtime.SkeletonIK3D_stop(self)
}

type extendsSkeletonModification2D struct {
	_ [0]*extendsSkeletonModification2D
	class
}

func (self SkeletonModification2D) Resource() Resource {
	var parent Resource
	parent.class = self.class
	return parent
}
func (self SkeletonModification2D) SetEnabled(enabled bool) {
	self.Runtime.SkeletonModification2D_set_enabled(self, enabled)
}
func (self SkeletonModification2D) GetEnabled() bool {
	return self.Runtime.SkeletonModification2D_get_enabled(self)
}
func (self SkeletonModification2D) GetModificationStack() SkeletonModificationStack2D {
	return self.Runtime.SkeletonModification2D_get_modification_stack(self)
}
func (self SkeletonModification2D) SetIsSetup(is_setup bool) {
	self.Runtime.SkeletonModification2D_set_is_setup(self, is_setup)
}
func (self SkeletonModification2D) GetIsSetup() bool {
	return self.Runtime.SkeletonModification2D_get_is_setup(self)
}
func (self SkeletonModification2D) SetExecutionMode(execution_mode int64) {
	self.Runtime.SkeletonModification2D_set_execution_mode(self, execution_mode)
}
func (self SkeletonModification2D) GetExecutionMode() int64 {
	return self.Runtime.SkeletonModification2D_get_execution_mode(self)
}
func (self SkeletonModification2D) ClampAngle(angle Float, min Float, max Float, invert bool) Float {
	return self.Runtime.SkeletonModification2D_clamp_angle(self, angle, min, max, invert)
}
func (self SkeletonModification2D) SetEditorDrawGizmo(draw_gizmo bool) {
	self.Runtime.SkeletonModification2D_set_editor_draw_gizmo(self, draw_gizmo)
}
func (self SkeletonModification2D) GetEditorDrawGizmo() bool {
	return self.Runtime.SkeletonModification2D_get_editor_draw_gizmo(self)
}

type extendsSkeletonModification2DCCDIK struct {
	_ [0]*extendsSkeletonModification2DCCDIK
	class
}

func (self SkeletonModification2DCCDIK) SkeletonModification2D() SkeletonModification2D {
	var parent SkeletonModification2D
	parent.class = self.class
	return parent
}
func (self SkeletonModification2DCCDIK) SetTargetNode(target_nodepath NodePath) {
	self.Runtime.SkeletonModification2DCCDIK_set_target_node(self, target_nodepath)
}
func (self SkeletonModification2DCCDIK) GetTargetNode() NodePath {
	return self.Runtime.SkeletonModification2DCCDIK_get_target_node(self)
}
func (self SkeletonModification2DCCDIK) SetTipNode(tip_nodepath NodePath) {
	self.Runtime.SkeletonModification2DCCDIK_set_tip_node(self, tip_nodepath)
}
func (self SkeletonModification2DCCDIK) GetTipNode() NodePath {
	return self.Runtime.SkeletonModification2DCCDIK_get_tip_node(self)
}
func (self SkeletonModification2DCCDIK) SetCcdikDataChainLength(length int64) {
	self.Runtime.SkeletonModification2DCCDIK_set_ccdik_data_chain_length(self, length)
}
func (self SkeletonModification2DCCDIK) GetCcdikDataChainLength() int64 {
	return self.Runtime.SkeletonModification2DCCDIK_get_ccdik_data_chain_length(self)
}
func (self SkeletonModification2DCCDIK) SetCcdikJointBone2dNode(joint_idx int64, bone2d_nodepath NodePath) {
	self.Runtime.SkeletonModification2DCCDIK_set_ccdik_joint_bone2d_node(self, joint_idx, bone2d_nodepath)
}
func (self SkeletonModification2DCCDIK) GetCcdikJointBone2dNode(joint_idx int64) NodePath {
	return self.Runtime.SkeletonModification2DCCDIK_get_ccdik_joint_bone2d_node(self, joint_idx)
}
func (self SkeletonModification2DCCDIK) SetCcdikJointBoneIndex(joint_idx int64, bone_idx int64) {
	self.Runtime.SkeletonModification2DCCDIK_set_ccdik_joint_bone_index(self, joint_idx, bone_idx)
}
func (self SkeletonModification2DCCDIK) GetCcdikJointBoneIndex(joint_idx int64) int64 {
	return self.Runtime.SkeletonModification2DCCDIK_get_ccdik_joint_bone_index(self, joint_idx)
}
func (self SkeletonModification2DCCDIK) SetCcdikJointRotateFromJoint(joint_idx int64, rotate_from_joint bool) {
	self.Runtime.SkeletonModification2DCCDIK_set_ccdik_joint_rotate_from_joint(self, joint_idx, rotate_from_joint)
}
func (self SkeletonModification2DCCDIK) GetCcdikJointRotateFromJoint(joint_idx int64) bool {
	return self.Runtime.SkeletonModification2DCCDIK_get_ccdik_joint_rotate_from_joint(self, joint_idx)
}
func (self SkeletonModification2DCCDIK) SetCcdikJointEnableConstraint(joint_idx int64, enable_constraint bool) {
	self.Runtime.SkeletonModification2DCCDIK_set_ccdik_joint_enable_constraint(self, joint_idx, enable_constraint)
}
func (self SkeletonModification2DCCDIK) GetCcdikJointEnableConstraint(joint_idx int64) bool {
	return self.Runtime.SkeletonModification2DCCDIK_get_ccdik_joint_enable_constraint(self, joint_idx)
}
func (self SkeletonModification2DCCDIK) SetCcdikJointConstraintAngleMin(joint_idx int64, angle_min Float) {
	self.Runtime.SkeletonModification2DCCDIK_set_ccdik_joint_constraint_angle_min(self, joint_idx, angle_min)
}
func (self SkeletonModification2DCCDIK) GetCcdikJointConstraintAngleMin(joint_idx int64) Float {
	return self.Runtime.SkeletonModification2DCCDIK_get_ccdik_joint_constraint_angle_min(self, joint_idx)
}
func (self SkeletonModification2DCCDIK) SetCcdikJointConstraintAngleMax(joint_idx int64, angle_max Float) {
	self.Runtime.SkeletonModification2DCCDIK_set_ccdik_joint_constraint_angle_max(self, joint_idx, angle_max)
}
func (self SkeletonModification2DCCDIK) GetCcdikJointConstraintAngleMax(joint_idx int64) Float {
	return self.Runtime.SkeletonModification2DCCDIK_get_ccdik_joint_constraint_angle_max(self, joint_idx)
}
func (self SkeletonModification2DCCDIK) SetCcdikJointConstraintAngleInvert(joint_idx int64, invert bool) {
	self.Runtime.SkeletonModification2DCCDIK_set_ccdik_joint_constraint_angle_invert(self, joint_idx, invert)
}
func (self SkeletonModification2DCCDIK) GetCcdikJointConstraintAngleInvert(joint_idx int64) bool {
	return self.Runtime.SkeletonModification2DCCDIK_get_ccdik_joint_constraint_angle_invert(self, joint_idx)
}

type extendsSkeletonModification2DFABRIK struct {
	_ [0]*extendsSkeletonModification2DFABRIK
	class
}

func (self SkeletonModification2DFABRIK) SkeletonModification2D() SkeletonModification2D {
	var parent SkeletonModification2D
	parent.class = self.class
	return parent
}
func (self SkeletonModification2DFABRIK) SetTargetNode(target_nodepath NodePath) {
	self.Runtime.SkeletonModification2DFABRIK_set_target_node(self, target_nodepath)
}
func (self SkeletonModification2DFABRIK) GetTargetNode() NodePath {
	return self.Runtime.SkeletonModification2DFABRIK_get_target_node(self)
}
func (self SkeletonModification2DFABRIK) SetFabrikDataChainLength(length int64) {
	self.Runtime.SkeletonModification2DFABRIK_set_fabrik_data_chain_length(self, length)
}
func (self SkeletonModification2DFABRIK) GetFabrikDataChainLength() int64 {
	return self.Runtime.SkeletonModification2DFABRIK_get_fabrik_data_chain_length(self)
}
func (self SkeletonModification2DFABRIK) SetFabrikJointBone2dNode(joint_idx int64, bone2d_nodepath NodePath) {
	self.Runtime.SkeletonModification2DFABRIK_set_fabrik_joint_bone2d_node(self, joint_idx, bone2d_nodepath)
}
func (self SkeletonModification2DFABRIK) GetFabrikJointBone2dNode(joint_idx int64) NodePath {
	return self.Runtime.SkeletonModification2DFABRIK_get_fabrik_joint_bone2d_node(self, joint_idx)
}
func (self SkeletonModification2DFABRIK) SetFabrikJointBoneIndex(joint_idx int64, bone_idx int64) {
	self.Runtime.SkeletonModification2DFABRIK_set_fabrik_joint_bone_index(self, joint_idx, bone_idx)
}
func (self SkeletonModification2DFABRIK) GetFabrikJointBoneIndex(joint_idx int64) int64 {
	return self.Runtime.SkeletonModification2DFABRIK_get_fabrik_joint_bone_index(self, joint_idx)
}
func (self SkeletonModification2DFABRIK) SetFabrikJointMagnetPosition(joint_idx int64, magnet_position Vector2) {
	self.Runtime.SkeletonModification2DFABRIK_set_fabrik_joint_magnet_position(self, joint_idx, magnet_position)
}
func (self SkeletonModification2DFABRIK) GetFabrikJointMagnetPosition(joint_idx int64) Vector2 {
	return self.Runtime.SkeletonModification2DFABRIK_get_fabrik_joint_magnet_position(self, joint_idx)
}
func (self SkeletonModification2DFABRIK) SetFabrikJointUseTargetRotation(joint_idx int64, use_target_rotation bool) {
	self.Runtime.SkeletonModification2DFABRIK_set_fabrik_joint_use_target_rotation(self, joint_idx, use_target_rotation)
}
func (self SkeletonModification2DFABRIK) GetFabrikJointUseTargetRotation(joint_idx int64) bool {
	return self.Runtime.SkeletonModification2DFABRIK_get_fabrik_joint_use_target_rotation(self, joint_idx)
}

type extendsSkeletonModification2DJiggle struct {
	_ [0]*extendsSkeletonModification2DJiggle
	class
}

func (self SkeletonModification2DJiggle) SkeletonModification2D() SkeletonModification2D {
	var parent SkeletonModification2D
	parent.class = self.class
	return parent
}
func (self SkeletonModification2DJiggle) SetTargetNode(target_nodepath NodePath) {
	self.Runtime.SkeletonModification2DJiggle_set_target_node(self, target_nodepath)
}
func (self SkeletonModification2DJiggle) GetTargetNode() NodePath {
	return self.Runtime.SkeletonModification2DJiggle_get_target_node(self)
}
func (self SkeletonModification2DJiggle) SetJiggleDataChainLength(length int64) {
	self.Runtime.SkeletonModification2DJiggle_set_jiggle_data_chain_length(self, length)
}
func (self SkeletonModification2DJiggle) GetJiggleDataChainLength() int64 {
	return self.Runtime.SkeletonModification2DJiggle_get_jiggle_data_chain_length(self)
}
func (self SkeletonModification2DJiggle) SetStiffness(stiffness Float) {
	self.Runtime.SkeletonModification2DJiggle_set_stiffness(self, stiffness)
}
func (self SkeletonModification2DJiggle) GetStiffness() Float {
	return self.Runtime.SkeletonModification2DJiggle_get_stiffness(self)
}
func (self SkeletonModification2DJiggle) SetMass(mass Float) {
	self.Runtime.SkeletonModification2DJiggle_set_mass(self, mass)
}
func (self SkeletonModification2DJiggle) GetMass() Float {
	return self.Runtime.SkeletonModification2DJiggle_get_mass(self)
}
func (self SkeletonModification2DJiggle) SetDamping(damping Float) {
	self.Runtime.SkeletonModification2DJiggle_set_damping(self, damping)
}
func (self SkeletonModification2DJiggle) GetDamping() Float {
	return self.Runtime.SkeletonModification2DJiggle_get_damping(self)
}
func (self SkeletonModification2DJiggle) SetUseGravity(use_gravity bool) {
	self.Runtime.SkeletonModification2DJiggle_set_use_gravity(self, use_gravity)
}
func (self SkeletonModification2DJiggle) GetUseGravity() bool {
	return self.Runtime.SkeletonModification2DJiggle_get_use_gravity(self)
}
func (self SkeletonModification2DJiggle) SetGravity(gravity Vector2) {
	self.Runtime.SkeletonModification2DJiggle_set_gravity(self, gravity)
}
func (self SkeletonModification2DJiggle) GetGravity() Vector2 {
	return self.Runtime.SkeletonModification2DJiggle_get_gravity(self)
}
func (self SkeletonModification2DJiggle) SetUseColliders(use_colliders bool) {
	self.Runtime.SkeletonModification2DJiggle_set_use_colliders(self, use_colliders)
}
func (self SkeletonModification2DJiggle) GetUseColliders() bool {
	return self.Runtime.SkeletonModification2DJiggle_get_use_colliders(self)
}
func (self SkeletonModification2DJiggle) SetCollisionMask(collision_mask int64) {
	self.Runtime.SkeletonModification2DJiggle_set_collision_mask(self, collision_mask)
}
func (self SkeletonModification2DJiggle) GetCollisionMask() int64 {
	return self.Runtime.SkeletonModification2DJiggle_get_collision_mask(self)
}
func (self SkeletonModification2DJiggle) SetJiggleJointBone2dNode(joint_idx int64, bone2d_node NodePath) {
	self.Runtime.SkeletonModification2DJiggle_set_jiggle_joint_bone2d_node(self, joint_idx, bone2d_node)
}
func (self SkeletonModification2DJiggle) GetJiggleJointBone2dNode(joint_idx int64) NodePath {
	return self.Runtime.SkeletonModification2DJiggle_get_jiggle_joint_bone2d_node(self, joint_idx)
}
func (self SkeletonModification2DJiggle) SetJiggleJointBoneIndex(joint_idx int64, bone_idx int64) {
	self.Runtime.SkeletonModification2DJiggle_set_jiggle_joint_bone_index(self, joint_idx, bone_idx)
}
func (self SkeletonModification2DJiggle) GetJiggleJointBoneIndex(joint_idx int64) int64 {
	return self.Runtime.SkeletonModification2DJiggle_get_jiggle_joint_bone_index(self, joint_idx)
}
func (self SkeletonModification2DJiggle) SetJiggleJointOverride(joint_idx int64, override bool) {
	self.Runtime.SkeletonModification2DJiggle_set_jiggle_joint_override(self, joint_idx, override)
}
func (self SkeletonModification2DJiggle) GetJiggleJointOverride(joint_idx int64) bool {
	return self.Runtime.SkeletonModification2DJiggle_get_jiggle_joint_override(self, joint_idx)
}
func (self SkeletonModification2DJiggle) SetJiggleJointStiffness(joint_idx int64, stiffness Float) {
	self.Runtime.SkeletonModification2DJiggle_set_jiggle_joint_stiffness(self, joint_idx, stiffness)
}
func (self SkeletonModification2DJiggle) GetJiggleJointStiffness(joint_idx int64) Float {
	return self.Runtime.SkeletonModification2DJiggle_get_jiggle_joint_stiffness(self, joint_idx)
}
func (self SkeletonModification2DJiggle) SetJiggleJointMass(joint_idx int64, mass Float) {
	self.Runtime.SkeletonModification2DJiggle_set_jiggle_joint_mass(self, joint_idx, mass)
}
func (self SkeletonModification2DJiggle) GetJiggleJointMass(joint_idx int64) Float {
	return self.Runtime.SkeletonModification2DJiggle_get_jiggle_joint_mass(self, joint_idx)
}
func (self SkeletonModification2DJiggle) SetJiggleJointDamping(joint_idx int64, damping Float) {
	self.Runtime.SkeletonModification2DJiggle_set_jiggle_joint_damping(self, joint_idx, damping)
}
func (self SkeletonModification2DJiggle) GetJiggleJointDamping(joint_idx int64) Float {
	return self.Runtime.SkeletonModification2DJiggle_get_jiggle_joint_damping(self, joint_idx)
}
func (self SkeletonModification2DJiggle) SetJiggleJointUseGravity(joint_idx int64, use_gravity bool) {
	self.Runtime.SkeletonModification2DJiggle_set_jiggle_joint_use_gravity(self, joint_idx, use_gravity)
}
func (self SkeletonModification2DJiggle) GetJiggleJointUseGravity(joint_idx int64) bool {
	return self.Runtime.SkeletonModification2DJiggle_get_jiggle_joint_use_gravity(self, joint_idx)
}
func (self SkeletonModification2DJiggle) SetJiggleJointGravity(joint_idx int64, gravity Vector2) {
	self.Runtime.SkeletonModification2DJiggle_set_jiggle_joint_gravity(self, joint_idx, gravity)
}
func (self SkeletonModification2DJiggle) GetJiggleJointGravity(joint_idx int64) Vector2 {
	return self.Runtime.SkeletonModification2DJiggle_get_jiggle_joint_gravity(self, joint_idx)
}

type extendsSkeletonModification2DLookAt struct {
	_ [0]*extendsSkeletonModification2DLookAt
	class
}

func (self SkeletonModification2DLookAt) SkeletonModification2D() SkeletonModification2D {
	var parent SkeletonModification2D
	parent.class = self.class
	return parent
}
func (self SkeletonModification2DLookAt) SetBone2dNode(bone2d_nodepath NodePath) {
	self.Runtime.SkeletonModification2DLookAt_set_bone2d_node(self, bone2d_nodepath)
}
func (self SkeletonModification2DLookAt) GetBone2dNode() NodePath {
	return self.Runtime.SkeletonModification2DLookAt_get_bone2d_node(self)
}
func (self SkeletonModification2DLookAt) SetBoneIndex(bone_idx int64) {
	self.Runtime.SkeletonModification2DLookAt_set_bone_index(self, bone_idx)
}
func (self SkeletonModification2DLookAt) GetBoneIndex() int64 {
	return self.Runtime.SkeletonModification2DLookAt_get_bone_index(self)
}
func (self SkeletonModification2DLookAt) SetTargetNode(target_nodepath NodePath) {
	self.Runtime.SkeletonModification2DLookAt_set_target_node(self, target_nodepath)
}
func (self SkeletonModification2DLookAt) GetTargetNode() NodePath {
	return self.Runtime.SkeletonModification2DLookAt_get_target_node(self)
}
func (self SkeletonModification2DLookAt) SetAdditionalRotation(rotation Float) {
	self.Runtime.SkeletonModification2DLookAt_set_additional_rotation(self, rotation)
}
func (self SkeletonModification2DLookAt) GetAdditionalRotation() Float {
	return self.Runtime.SkeletonModification2DLookAt_get_additional_rotation(self)
}
func (self SkeletonModification2DLookAt) SetEnableConstraint(enable_constraint bool) {
	self.Runtime.SkeletonModification2DLookAt_set_enable_constraint(self, enable_constraint)
}
func (self SkeletonModification2DLookAt) GetEnableConstraint() bool {
	return self.Runtime.SkeletonModification2DLookAt_get_enable_constraint(self)
}
func (self SkeletonModification2DLookAt) SetConstraintAngleMin(angle_min Float) {
	self.Runtime.SkeletonModification2DLookAt_set_constraint_angle_min(self, angle_min)
}
func (self SkeletonModification2DLookAt) GetConstraintAngleMin() Float {
	return self.Runtime.SkeletonModification2DLookAt_get_constraint_angle_min(self)
}
func (self SkeletonModification2DLookAt) SetConstraintAngleMax(angle_max Float) {
	self.Runtime.SkeletonModification2DLookAt_set_constraint_angle_max(self, angle_max)
}
func (self SkeletonModification2DLookAt) GetConstraintAngleMax() Float {
	return self.Runtime.SkeletonModification2DLookAt_get_constraint_angle_max(self)
}
func (self SkeletonModification2DLookAt) SetConstraintAngleInvert(invert bool) {
	self.Runtime.SkeletonModification2DLookAt_set_constraint_angle_invert(self, invert)
}
func (self SkeletonModification2DLookAt) GetConstraintAngleInvert() bool {
	return self.Runtime.SkeletonModification2DLookAt_get_constraint_angle_invert(self)
}

type extendsSkeletonModification2DPhysicalBones struct {
	_ [0]*extendsSkeletonModification2DPhysicalBones
	class
}

func (self SkeletonModification2DPhysicalBones) SkeletonModification2D() SkeletonModification2D {
	var parent SkeletonModification2D
	parent.class = self.class
	return parent
}
func (self SkeletonModification2DPhysicalBones) SetPhysicalBoneChainLength(length int64) {
	self.Runtime.SkeletonModification2DPhysicalBones_set_physical_bone_chain_length(self, length)
}
func (self SkeletonModification2DPhysicalBones) GetPhysicalBoneChainLength() int64 {
	return self.Runtime.SkeletonModification2DPhysicalBones_get_physical_bone_chain_length(self)
}
func (self SkeletonModification2DPhysicalBones) SetPhysicalBoneNode(joint_idx int64, physicalbone2d_node NodePath) {
	self.Runtime.SkeletonModification2DPhysicalBones_set_physical_bone_node(self, joint_idx, physicalbone2d_node)
}
func (self SkeletonModification2DPhysicalBones) GetPhysicalBoneNode(joint_idx int64) NodePath {
	return self.Runtime.SkeletonModification2DPhysicalBones_get_physical_bone_node(self, joint_idx)
}
func (self SkeletonModification2DPhysicalBones) FetchPhysicalBones() {
	self.Runtime.SkeletonModification2DPhysicalBones_fetch_physical_bones(self)
}
func (self SkeletonModification2DPhysicalBones) StartSimulation(bones ArrayOf[string]) {
	self.Runtime.SkeletonModification2DPhysicalBones_start_simulation(self, bones)
}
func (self SkeletonModification2DPhysicalBones) StopSimulation(bones ArrayOf[string]) {
	self.Runtime.SkeletonModification2DPhysicalBones_stop_simulation(self, bones)
}

type extendsSkeletonModification2DStackHolder struct {
	_ [0]*extendsSkeletonModification2DStackHolder
	class
}

func (self SkeletonModification2DStackHolder) SkeletonModification2D() SkeletonModification2D {
	var parent SkeletonModification2D
	parent.class = self.class
	return parent
}
func (self SkeletonModification2DStackHolder) SetHeldModificationStack(held_modification_stack SkeletonModificationStack2D) {
	self.Runtime.SkeletonModification2DStackHolder_set_held_modification_stack(self, held_modification_stack)
}
func (self SkeletonModification2DStackHolder) GetHeldModificationStack() SkeletonModificationStack2D {
	return self.Runtime.SkeletonModification2DStackHolder_get_held_modification_stack(self)
}

type extendsSkeletonModification2DTwoBoneIK struct {
	_ [0]*extendsSkeletonModification2DTwoBoneIK
	class
}

func (self SkeletonModification2DTwoBoneIK) SkeletonModification2D() SkeletonModification2D {
	var parent SkeletonModification2D
	parent.class = self.class
	return parent
}
func (self SkeletonModification2DTwoBoneIK) SetTargetNode(target_nodepath NodePath) {
	self.Runtime.SkeletonModification2DTwoBoneIK_set_target_node(self, target_nodepath)
}
func (self SkeletonModification2DTwoBoneIK) GetTargetNode() NodePath {
	return self.Runtime.SkeletonModification2DTwoBoneIK_get_target_node(self)
}
func (self SkeletonModification2DTwoBoneIK) SetTargetMinimumDistance(minimum_distance Float) {
	self.Runtime.SkeletonModification2DTwoBoneIK_set_target_minimum_distance(self, minimum_distance)
}
func (self SkeletonModification2DTwoBoneIK) GetTargetMinimumDistance() Float {
	return self.Runtime.SkeletonModification2DTwoBoneIK_get_target_minimum_distance(self)
}
func (self SkeletonModification2DTwoBoneIK) SetTargetMaximumDistance(maximum_distance Float) {
	self.Runtime.SkeletonModification2DTwoBoneIK_set_target_maximum_distance(self, maximum_distance)
}
func (self SkeletonModification2DTwoBoneIK) GetTargetMaximumDistance() Float {
	return self.Runtime.SkeletonModification2DTwoBoneIK_get_target_maximum_distance(self)
}
func (self SkeletonModification2DTwoBoneIK) SetFlipBendDirection(flip_direction bool) {
	self.Runtime.SkeletonModification2DTwoBoneIK_set_flip_bend_direction(self, flip_direction)
}
func (self SkeletonModification2DTwoBoneIK) GetFlipBendDirection() bool {
	return self.Runtime.SkeletonModification2DTwoBoneIK_get_flip_bend_direction(self)
}
func (self SkeletonModification2DTwoBoneIK) SetJointOneBone2dNode(bone2d_node NodePath) {
	self.Runtime.SkeletonModification2DTwoBoneIK_set_joint_one_bone2d_node(self, bone2d_node)
}
func (self SkeletonModification2DTwoBoneIK) GetJointOneBone2dNode() NodePath {
	return self.Runtime.SkeletonModification2DTwoBoneIK_get_joint_one_bone2d_node(self)
}
func (self SkeletonModification2DTwoBoneIK) SetJointOneBoneIdx(bone_idx int64) {
	self.Runtime.SkeletonModification2DTwoBoneIK_set_joint_one_bone_idx(self, bone_idx)
}
func (self SkeletonModification2DTwoBoneIK) GetJointOneBoneIdx() int64 {
	return self.Runtime.SkeletonModification2DTwoBoneIK_get_joint_one_bone_idx(self)
}
func (self SkeletonModification2DTwoBoneIK) SetJointTwoBone2dNode(bone2d_node NodePath) {
	self.Runtime.SkeletonModification2DTwoBoneIK_set_joint_two_bone2d_node(self, bone2d_node)
}
func (self SkeletonModification2DTwoBoneIK) GetJointTwoBone2dNode() NodePath {
	return self.Runtime.SkeletonModification2DTwoBoneIK_get_joint_two_bone2d_node(self)
}
func (self SkeletonModification2DTwoBoneIK) SetJointTwoBoneIdx(bone_idx int64) {
	self.Runtime.SkeletonModification2DTwoBoneIK_set_joint_two_bone_idx(self, bone_idx)
}
func (self SkeletonModification2DTwoBoneIK) GetJointTwoBoneIdx() int64 {
	return self.Runtime.SkeletonModification2DTwoBoneIK_get_joint_two_bone_idx(self)
}

type extendsSkeletonModificationStack2D struct {
	_ [0]*extendsSkeletonModificationStack2D
	class
}

func (self SkeletonModificationStack2D) Resource() Resource {
	var parent Resource
	parent.class = self.class
	return parent
}
func (self SkeletonModificationStack2D) Setup() {
	self.Runtime.SkeletonModificationStack2D_setup(self)
}
func (self SkeletonModificationStack2D) Execute(delta Float, execution_mode int64) {
	self.Runtime.SkeletonModificationStack2D_execute(self, delta, execution_mode)
}
func (self SkeletonModificationStack2D) EnableAllModifications(enabled bool) {
	self.Runtime.SkeletonModificationStack2D_enable_all_modifications(self, enabled)
}
func (self SkeletonModificationStack2D) GetModification(mod_idx int64) SkeletonModification2D {
	return self.Runtime.SkeletonModificationStack2D_get_modification(self, mod_idx)
}
func (self SkeletonModificationStack2D) AddModification(modification SkeletonModification2D) {
	self.Runtime.SkeletonModificationStack2D_add_modification(self, modification)
}
func (self SkeletonModificationStack2D) DeleteModification(mod_idx int64) {
	self.Runtime.SkeletonModificationStack2D_delete_modification(self, mod_idx)
}
func (self SkeletonModificationStack2D) SetModification(mod_idx int64, modification SkeletonModification2D) {
	self.Runtime.SkeletonModificationStack2D_set_modification(self, mod_idx, modification)
}
func (self SkeletonModificationStack2D) SetModificationCount(count int64) {
	self.Runtime.SkeletonModificationStack2D_set_modification_count(self, count)
}
func (self SkeletonModificationStack2D) GetModificationCount() int64 {
	return self.Runtime.SkeletonModificationStack2D_get_modification_count(self)
}
func (self SkeletonModificationStack2D) GetIsSetup() bool {
	return self.Runtime.SkeletonModificationStack2D_get_is_setup(self)
}
func (self SkeletonModificationStack2D) SetEnabled(enabled bool) {
	self.Runtime.SkeletonModificationStack2D_set_enabled(self, enabled)
}
func (self SkeletonModificationStack2D) GetEnabled() bool {
	return self.Runtime.SkeletonModificationStack2D_get_enabled(self)
}
func (self SkeletonModificationStack2D) SetStrength(strength Float) {
	self.Runtime.SkeletonModificationStack2D_set_strength(self, strength)
}
func (self SkeletonModificationStack2D) GetStrength() Float {
	return self.Runtime.SkeletonModificationStack2D_get_strength(self)
}
func (self SkeletonModificationStack2D) GetSkeleton() Skeleton2D {
	return self.Runtime.SkeletonModificationStack2D_get_skeleton(self)
}

type extendsSkeletonProfile struct {
	_ [0]*extendsSkeletonProfile
	class
}

func (self SkeletonProfile) Resource() Resource {
	var parent Resource
	parent.class = self.class
	return parent
}
func (self SkeletonProfile) SetRootBone(bone_name string) {
	self.Runtime.SkeletonProfile_set_root_bone(self, bone_name)
}
func (self SkeletonProfile) GetRootBone() string {
	return self.Runtime.SkeletonProfile_get_root_bone(self)
}
func (self SkeletonProfile) SetScaleBaseBone(bone_name string) {
	self.Runtime.SkeletonProfile_set_scale_base_bone(self, bone_name)
}
func (self SkeletonProfile) GetScaleBaseBone() string {
	return self.Runtime.SkeletonProfile_get_scale_base_bone(self)
}
func (self SkeletonProfile) SetGroupSize(size int64) {
	self.Runtime.SkeletonProfile_set_group_size(self, size)
}
func (self SkeletonProfile) GetGroupSize() int64 {
	return self.Runtime.SkeletonProfile_get_group_size(self)
}
func (self SkeletonProfile) GetGroupName(group_idx int64) string {
	return self.Runtime.SkeletonProfile_get_group_name(self, group_idx)
}
func (self SkeletonProfile) SetGroupName(group_idx int64, group_name string) {
	self.Runtime.SkeletonProfile_set_group_name(self, group_idx, group_name)
}
func (self SkeletonProfile) GetTexture(group_idx int64) Texture2D {
	return self.Runtime.SkeletonProfile_get_texture(self, group_idx)
}
func (self SkeletonProfile) SetTexture(group_idx int64, texture Texture2D) {
	self.Runtime.SkeletonProfile_set_texture(self, group_idx, texture)
}
func (self SkeletonProfile) SetBoneSize(size int64) {
	self.Runtime.SkeletonProfile_set_bone_size(self, size)
}
func (self SkeletonProfile) GetBoneSize() int64 {
	return self.Runtime.SkeletonProfile_get_bone_size(self)
}
func (self SkeletonProfile) FindBone(bone_name string) int64 {
	return self.Runtime.SkeletonProfile_find_bone(self, bone_name)
}
func (self SkeletonProfile) GetBoneName(bone_idx int64) string {
	return self.Runtime.SkeletonProfile_get_bone_name(self, bone_idx)
}
func (self SkeletonProfile) SetBoneName(bone_idx int64, bone_name string) {
	self.Runtime.SkeletonProfile_set_bone_name(self, bone_idx, bone_name)
}
func (self SkeletonProfile) GetBoneParent(bone_idx int64) string {
	return self.Runtime.SkeletonProfile_get_bone_parent(self, bone_idx)
}
func (self SkeletonProfile) SetBoneParent(bone_idx int64, bone_parent string) {
	self.Runtime.SkeletonProfile_set_bone_parent(self, bone_idx, bone_parent)
}
func (self SkeletonProfile) GetTailDirection(bone_idx int64) SkeletonProfileTailDirection {
	return self.Runtime.SkeletonProfile_get_tail_direction(self, bone_idx)
}
func (self SkeletonProfile) SetTailDirection(bone_idx int64, tail_direction SkeletonProfileTailDirection) {
	self.Runtime.SkeletonProfile_set_tail_direction(self, bone_idx, tail_direction)
}
func (self SkeletonProfile) GetBoneTail(bone_idx int64) string {
	return self.Runtime.SkeletonProfile_get_bone_tail(self, bone_idx)
}
func (self SkeletonProfile) SetBoneTail(bone_idx int64, bone_tail string) {
	self.Runtime.SkeletonProfile_set_bone_tail(self, bone_idx, bone_tail)
}
func (self SkeletonProfile) GetReferencePose(bone_idx int64) Transform3D {
	return self.Runtime.SkeletonProfile_get_reference_pose(self, bone_idx)
}
func (self SkeletonProfile) SetReferencePose(bone_idx int64, bone_name Transform3D) {
	self.Runtime.SkeletonProfile_set_reference_pose(self, bone_idx, bone_name)
}
func (self SkeletonProfile) GetHandleOffset(bone_idx int64) Vector2 {
	return self.Runtime.SkeletonProfile_get_handle_offset(self, bone_idx)
}
func (self SkeletonProfile) SetHandleOffset(bone_idx int64, handle_offset Vector2) {
	self.Runtime.SkeletonProfile_set_handle_offset(self, bone_idx, handle_offset)
}
func (self SkeletonProfile) GetGroup(bone_idx int64) string {
	return self.Runtime.SkeletonProfile_get_group(self, bone_idx)
}
func (self SkeletonProfile) SetGroup(bone_idx int64, group string) {
	self.Runtime.SkeletonProfile_set_group(self, bone_idx, group)
}

type extendsSkeletonProfileHumanoid struct {
	_ [0]*extendsSkeletonProfileHumanoid
	class
}

func (self SkeletonProfileHumanoid) SkeletonProfile() SkeletonProfile {
	var parent SkeletonProfile
	parent.class = self.class
	return parent
}

type extendsSkin struct {
	_ [0]*extendsSkin
	class
}

func (self Skin) Resource() Resource { var parent Resource; parent.class = self.class; return parent }
func (self Skin) SetBindCount(bind_count int64) {
	self.Runtime.Skin_set_bind_count(self, bind_count)
}
func (self Skin) GetBindCount() int64 {
	return self.Runtime.Skin_get_bind_count(self)
}
func (self Skin) AddBind(bone int64, pose Transform3D) {
	self.Runtime.Skin_add_bind(self, bone, pose)
}
func (self Skin) AddNamedBind(name string, pose Transform3D) {
	self.Runtime.Skin_add_named_bind(self, name, pose)
}
func (self Skin) SetBindPose(bind_index int64, pose Transform3D) {
	self.Runtime.Skin_set_bind_pose(self, bind_index, pose)
}
func (self Skin) GetBindPose(bind_index int64) Transform3D {
	return self.Runtime.Skin_get_bind_pose(self, bind_index)
}
func (self Skin) SetBindName(bind_index int64, name string) {
	self.Runtime.Skin_set_bind_name(self, bind_index, name)
}
func (self Skin) GetBindName(bind_index int64) string {
	return self.Runtime.Skin_get_bind_name(self, bind_index)
}
func (self Skin) SetBindBone(bind_index int64, bone int64) {
	self.Runtime.Skin_set_bind_bone(self, bind_index, bone)
}
func (self Skin) GetBindBone(bind_index int64) int64 {
	return self.Runtime.Skin_get_bind_bone(self, bind_index)
}
func (self Skin) ClearBinds() {
	self.Runtime.Skin_clear_binds(self)
}

type extendsSkinReference struct {
	_ [0]*extendsSkinReference
	class
}

func (self SkinReference) RefCounted() RefCounted {
	var parent RefCounted
	parent.class = self.class
	return parent
}
func (self SkinReference) GetSkeleton() RID {
	return self.Runtime.SkinReference_get_skeleton(self)
}
func (self SkinReference) GetSkin() Skin {
	return self.Runtime.SkinReference_get_skin(self)
}

type extendsSky struct {
	_ [0]*extendsSky
	class
}

func (self Sky) Resource() Resource { var parent Resource; parent.class = self.class; return parent }
func (self Sky) SetRadianceSize(size SkyRadianceSize) {
	self.Runtime.Sky_set_radiance_size(self, size)
}
func (self Sky) GetRadianceSize() SkyRadianceSize {
	return self.Runtime.Sky_get_radiance_size(self)
}
func (self Sky) SetProcessMode(mode SkyProcessMode) {
	self.Runtime.Sky_set_process_mode(self, mode)
}
func (self Sky) GetProcessMode() SkyProcessMode {
	return self.Runtime.Sky_get_process_mode(self)
}
func (self Sky) SetMaterial(material Material) {
	self.Runtime.Sky_set_material(self, material)
}
func (self Sky) GetMaterial() Material {
	return self.Runtime.Sky_get_material(self)
}

type extendsSlider struct {
	_ [0]*extendsSlider
	class
}

func (self Slider) Range() Range { var parent Range; parent.class = self.class; return parent }
func (self Slider) SetTicks(count int64) {
	self.Runtime.Slider_set_ticks(self, count)
}
func (self Slider) GetTicks() int64 {
	return self.Runtime.Slider_get_ticks(self)
}
func (self Slider) GetTicksOnBorders() bool {
	return self.Runtime.Slider_get_ticks_on_borders(self)
}
func (self Slider) SetTicksOnBorders(ticks_on_border bool) {
	self.Runtime.Slider_set_ticks_on_borders(self, ticks_on_border)
}
func (self Slider) SetEditable(editable bool) {
	self.Runtime.Slider_set_editable(self, editable)
}
func (self Slider) IsEditable() bool {
	return self.Runtime.Slider_is_editable(self)
}
func (self Slider) SetScrollable(scrollable bool) {
	self.Runtime.Slider_set_scrollable(self, scrollable)
}
func (self Slider) IsScrollable() bool {
	return self.Runtime.Slider_is_scrollable(self)
}

type extendsSliderJoint3D struct {
	_ [0]*extendsSliderJoint3D
	class
}

func (self SliderJoint3D) Joint3D() Joint3D {
	var parent Joint3D
	parent.class = self.class
	return parent
}
func (self SliderJoint3D) SetParam(param SliderJoint3DParam, value Float) {
	self.Runtime.SliderJoint3D_set_param(self, param, value)
}
func (self SliderJoint3D) GetParam(param SliderJoint3DParam) Float {
	return self.Runtime.SliderJoint3D_get_param(self, param)
}

type extendsSoftBody3D struct {
	_ [0]*extendsSoftBody3D
	class
}

func (self SoftBody3D) MeshInstance3D() MeshInstance3D {
	var parent MeshInstance3D
	parent.class = self.class
	return parent
}
func (self SoftBody3D) GetPhysicsRid() RID {
	return self.Runtime.SoftBody3D_get_physics_rid(self)
}
func (self SoftBody3D) SetCollisionMask(collision_mask int64) {
	self.Runtime.SoftBody3D_set_collision_mask(self, collision_mask)
}
func (self SoftBody3D) GetCollisionMask() int64 {
	return self.Runtime.SoftBody3D_get_collision_mask(self)
}
func (self SoftBody3D) SetCollisionLayer(collision_layer int64) {
	self.Runtime.SoftBody3D_set_collision_layer(self, collision_layer)
}
func (self SoftBody3D) GetCollisionLayer() int64 {
	return self.Runtime.SoftBody3D_get_collision_layer(self)
}
func (self SoftBody3D) SetCollisionMaskValue(layer_number int64, value bool) {
	self.Runtime.SoftBody3D_set_collision_mask_value(self, layer_number, value)
}
func (self SoftBody3D) GetCollisionMaskValue(layer_number int64) bool {
	return self.Runtime.SoftBody3D_get_collision_mask_value(self, layer_number)
}
func (self SoftBody3D) SetCollisionLayerValue(layer_number int64, value bool) {
	self.Runtime.SoftBody3D_set_collision_layer_value(self, layer_number, value)
}
func (self SoftBody3D) GetCollisionLayerValue(layer_number int64) bool {
	return self.Runtime.SoftBody3D_get_collision_layer_value(self, layer_number)
}
func (self SoftBody3D) SetParentCollisionIgnore(parent_collision_ignore NodePath) {
	self.Runtime.SoftBody3D_set_parent_collision_ignore(self, parent_collision_ignore)
}
func (self SoftBody3D) GetParentCollisionIgnore() NodePath {
	return self.Runtime.SoftBody3D_get_parent_collision_ignore(self)
}
func (self SoftBody3D) SetDisableMode(mode SoftBody3DDisableMode) {
	self.Runtime.SoftBody3D_set_disable_mode(self, mode)
}
func (self SoftBody3D) GetDisableMode() SoftBody3DDisableMode {
	return self.Runtime.SoftBody3D_get_disable_mode(self)
}
func (self SoftBody3D) GetCollisionExceptions() ArrayOf[PhysicsBody3D] {
	return self.Runtime.SoftBody3D_get_collision_exceptions(self)
}
func (self SoftBody3D) AddCollisionExceptionWith(body Node) {
	self.Runtime.SoftBody3D_add_collision_exception_with(self, body)
}
func (self SoftBody3D) RemoveCollisionExceptionWith(body Node) {
	self.Runtime.SoftBody3D_remove_collision_exception_with(self, body)
}
func (self SoftBody3D) SetSimulationPrecision(simulation_precision int64) {
	self.Runtime.SoftBody3D_set_simulation_precision(self, simulation_precision)
}
func (self SoftBody3D) GetSimulationPrecision() int64 {
	return self.Runtime.SoftBody3D_get_simulation_precision(self)
}
func (self SoftBody3D) SetTotalMass(mass Float) {
	self.Runtime.SoftBody3D_set_total_mass(self, mass)
}
func (self SoftBody3D) GetTotalMass() Float {
	return self.Runtime.SoftBody3D_get_total_mass(self)
}
func (self SoftBody3D) SetLinearStiffness(linear_stiffness Float) {
	self.Runtime.SoftBody3D_set_linear_stiffness(self, linear_stiffness)
}
func (self SoftBody3D) GetLinearStiffness() Float {
	return self.Runtime.SoftBody3D_get_linear_stiffness(self)
}
func (self SoftBody3D) SetPressureCoefficient(pressure_coefficient Float) {
	self.Runtime.SoftBody3D_set_pressure_coefficient(self, pressure_coefficient)
}
func (self SoftBody3D) GetPressureCoefficient() Float {
	return self.Runtime.SoftBody3D_get_pressure_coefficient(self)
}
func (self SoftBody3D) SetDampingCoefficient(damping_coefficient Float) {
	self.Runtime.SoftBody3D_set_damping_coefficient(self, damping_coefficient)
}
func (self SoftBody3D) GetDampingCoefficient() Float {
	return self.Runtime.SoftBody3D_get_damping_coefficient(self)
}
func (self SoftBody3D) SetDragCoefficient(drag_coefficient Float) {
	self.Runtime.SoftBody3D_set_drag_coefficient(self, drag_coefficient)
}
func (self SoftBody3D) GetDragCoefficient() Float {
	return self.Runtime.SoftBody3D_get_drag_coefficient(self)
}
func (self SoftBody3D) GetPointTransform(point_index int64) Vector3 {
	return self.Runtime.SoftBody3D_get_point_transform(self, point_index)
}
func (self SoftBody3D) SetPointPinned(point_index int64, pinned bool, attachment_path NodePath) {
	self.Runtime.SoftBody3D_set_point_pinned(self, point_index, pinned, attachment_path)
}
func (self SoftBody3D) IsPointPinned(point_index int64) bool {
	return self.Runtime.SoftBody3D_is_point_pinned(self, point_index)
}
func (self SoftBody3D) SetRayPickable(ray_pickable bool) {
	self.Runtime.SoftBody3D_set_ray_pickable(self, ray_pickable)
}
func (self SoftBody3D) IsRayPickable() bool {
	return self.Runtime.SoftBody3D_is_ray_pickable(self)
}

type extendsSphereMesh struct {
	_ [0]*extendsSphereMesh
	class
}

func (self SphereMesh) PrimitiveMesh() PrimitiveMesh {
	var parent PrimitiveMesh
	parent.class = self.class
	return parent
}
func (self SphereMesh) SetRadius(radius Float) {
	self.Runtime.SphereMesh_set_radius(self, radius)
}
func (self SphereMesh) GetRadius() Float {
	return self.Runtime.SphereMesh_get_radius(self)
}
func (self SphereMesh) SetHeight(height Float) {
	self.Runtime.SphereMesh_set_height(self, height)
}
func (self SphereMesh) GetHeight() Float {
	return self.Runtime.SphereMesh_get_height(self)
}
func (self SphereMesh) SetRadialSegments(radial_segments int64) {
	self.Runtime.SphereMesh_set_radial_segments(self, radial_segments)
}
func (self SphereMesh) GetRadialSegments() int64 {
	return self.Runtime.SphereMesh_get_radial_segments(self)
}
func (self SphereMesh) SetRings(rings int64) {
	self.Runtime.SphereMesh_set_rings(self, rings)
}
func (self SphereMesh) GetRings() int64 {
	return self.Runtime.SphereMesh_get_rings(self)
}
func (self SphereMesh) SetIsHemisphere(is_hemisphere bool) {
	self.Runtime.SphereMesh_set_is_hemisphere(self, is_hemisphere)
}
func (self SphereMesh) GetIsHemisphere() bool {
	return self.Runtime.SphereMesh_get_is_hemisphere(self)
}

type extendsSphereOccluder3D struct {
	_ [0]*extendsSphereOccluder3D
	class
}

func (self SphereOccluder3D) Occluder3D() Occluder3D {
	var parent Occluder3D
	parent.class = self.class
	return parent
}
func (self SphereOccluder3D) SetRadius(radius Float) {
	self.Runtime.SphereOccluder3D_set_radius(self, radius)
}
func (self SphereOccluder3D) GetRadius() Float {
	return self.Runtime.SphereOccluder3D_get_radius(self)
}

type extendsSphereShape3D struct {
	_ [0]*extendsSphereShape3D
	class
}

func (self SphereShape3D) Shape3D() Shape3D {
	var parent Shape3D
	parent.class = self.class
	return parent
}
func (self SphereShape3D) SetRadius(radius Float) {
	self.Runtime.SphereShape3D_set_radius(self, radius)
}
func (self SphereShape3D) GetRadius() Float {
	return self.Runtime.SphereShape3D_get_radius(self)
}

type extendsSpinBox struct {
	_ [0]*extendsSpinBox
	class
}

func (self SpinBox) Range() Range { var parent Range; parent.class = self.class; return parent }
func (self SpinBox) SetHorizontalAlignment(alignment HorizontalAlignment) {
	self.Runtime.SpinBox_set_horizontal_alignment(self, alignment)
}
func (self SpinBox) GetHorizontalAlignment() HorizontalAlignment {
	return self.Runtime.SpinBox_get_horizontal_alignment(self)
}
func (self SpinBox) SetSuffix(suffix string) {
	self.Runtime.SpinBox_set_suffix(self, suffix)
}
func (self SpinBox) GetSuffix() string {
	return self.Runtime.SpinBox_get_suffix(self)
}
func (self SpinBox) SetPrefix(prefix string) {
	self.Runtime.SpinBox_set_prefix(self, prefix)
}
func (self SpinBox) GetPrefix() string {
	return self.Runtime.SpinBox_get_prefix(self)
}
func (self SpinBox) SetEditable(enabled bool) {
	self.Runtime.SpinBox_set_editable(self, enabled)
}
func (self SpinBox) SetCustomArrowStep(arrow_step Float) {
	self.Runtime.SpinBox_set_custom_arrow_step(self, arrow_step)
}
func (self SpinBox) GetCustomArrowStep() Float {
	return self.Runtime.SpinBox_get_custom_arrow_step(self)
}
func (self SpinBox) IsEditable() bool {
	return self.Runtime.SpinBox_is_editable(self)
}
func (self SpinBox) SetUpdateOnTextChanged(enabled bool) {
	self.Runtime.SpinBox_set_update_on_text_changed(self, enabled)
}
func (self SpinBox) GetUpdateOnTextChanged() bool {
	return self.Runtime.SpinBox_get_update_on_text_changed(self)
}
func (self SpinBox) SetSelectAllOnFocus(enabled bool) {
	self.Runtime.SpinBox_set_select_all_on_focus(self, enabled)
}
func (self SpinBox) IsSelectAllOnFocus() bool {
	return self.Runtime.SpinBox_is_select_all_on_focus(self)
}
func (self SpinBox) Apply() {
	self.Runtime.SpinBox_apply(self)
}
func (self SpinBox) GetLineEdit() LineEdit {
	return self.Runtime.SpinBox_get_line_edit(self)
}

type extendsSplitContainer struct {
	_ [0]*extendsSplitContainer
	class
}

func (self SplitContainer) Container() Container {
	var parent Container
	parent.class = self.class
	return parent
}
func (self SplitContainer) SetSplitOffset(offset int64) {
	self.Runtime.SplitContainer_set_split_offset(self, offset)
}
func (self SplitContainer) GetSplitOffset() int64 {
	return self.Runtime.SplitContainer_get_split_offset(self)
}
func (self SplitContainer) ClampSplitOffset() {
	self.Runtime.SplitContainer_clamp_split_offset(self)
}
func (self SplitContainer) SetCollapsed(collapsed bool) {
	self.Runtime.SplitContainer_set_collapsed(self, collapsed)
}
func (self SplitContainer) IsCollapsed() bool {
	return self.Runtime.SplitContainer_is_collapsed(self)
}
func (self SplitContainer) SetDraggerVisibility(mode SplitContainerDraggerVisibility) {
	self.Runtime.SplitContainer_set_dragger_visibility(self, mode)
}
func (self SplitContainer) GetDraggerVisibility() SplitContainerDraggerVisibility {
	return self.Runtime.SplitContainer_get_dragger_visibility(self)
}
func (self SplitContainer) SetVertical(vertical bool) {
	self.Runtime.SplitContainer_set_vertical(self, vertical)
}
func (self SplitContainer) IsVertical() bool {
	return self.Runtime.SplitContainer_is_vertical(self)
}

type extendsSpotLight3D struct {
	_ [0]*extendsSpotLight3D
	class
}

func (self SpotLight3D) Light3D() Light3D {
	var parent Light3D
	parent.class = self.class
	return parent
}

type extendsSpringArm3D struct {
	_ [0]*extendsSpringArm3D
	class
}

func (self SpringArm3D) Node3D() Node3D { var parent Node3D; parent.class = self.class; return parent }
func (self SpringArm3D) GetHitLength() Float {
	return self.Runtime.SpringArm3D_get_hit_length(self)
}
func (self SpringArm3D) SetLength(length Float) {
	self.Runtime.SpringArm3D_set_length(self, length)
}
func (self SpringArm3D) GetLength() Float {
	return self.Runtime.SpringArm3D_get_length(self)
}
func (self SpringArm3D) SetShape(shape Shape3D) {
	self.Runtime.SpringArm3D_set_shape(self, shape)
}
func (self SpringArm3D) GetShape() Shape3D {
	return self.Runtime.SpringArm3D_get_shape(self)
}
func (self SpringArm3D) AddExcludedObject(RID RID) {
	self.Runtime.SpringArm3D_add_excluded_object(self, RID)
}
func (self SpringArm3D) RemoveExcludedObject(RID RID) bool {
	return self.Runtime.SpringArm3D_remove_excluded_object(self, RID)
}
func (self SpringArm3D) ClearExcludedObjects() {
	self.Runtime.SpringArm3D_clear_excluded_objects(self)
}
func (self SpringArm3D) SetCollisionMask(mask int64) {
	self.Runtime.SpringArm3D_set_collision_mask(self, mask)
}
func (self SpringArm3D) GetCollisionMask() int64 {
	return self.Runtime.SpringArm3D_get_collision_mask(self)
}
func (self SpringArm3D) SetMargin(margin Float) {
	self.Runtime.SpringArm3D_set_margin(self, margin)
}
func (self SpringArm3D) GetMargin() Float {
	return self.Runtime.SpringArm3D_get_margin(self)
}

type extendsSprite2D struct {
	_ [0]*extendsSprite2D
	class
}

func (self Sprite2D) Node2D() Node2D { var parent Node2D; parent.class = self.class; return parent }
func (self Sprite2D) SetTexture(texture Texture2D) {
	self.Runtime.Sprite2D_set_texture(self, texture)
}
func (self Sprite2D) GetTexture() Texture2D {
	return self.Runtime.Sprite2D_get_texture(self)
}
func (self Sprite2D) SetCentered(centered bool) {
	self.Runtime.Sprite2D_set_centered(self, centered)
}
func (self Sprite2D) IsCentered() bool {
	return self.Runtime.Sprite2D_is_centered(self)
}
func (self Sprite2D) SetOffset(offset Vector2) {
	self.Runtime.Sprite2D_set_offset(self, offset)
}
func (self Sprite2D) GetOffset() Vector2 {
	return self.Runtime.Sprite2D_get_offset(self)
}
func (self Sprite2D) SetFlipH(flip_h bool) {
	self.Runtime.Sprite2D_set_flip_h(self, flip_h)
}
func (self Sprite2D) IsFlippedH() bool {
	return self.Runtime.Sprite2D_is_flipped_h(self)
}
func (self Sprite2D) SetFlipV(flip_v bool) {
	self.Runtime.Sprite2D_set_flip_v(self, flip_v)
}
func (self Sprite2D) IsFlippedV() bool {
	return self.Runtime.Sprite2D_is_flipped_v(self)
}
func (self Sprite2D) SetRegionEnabled(enabled bool) {
	self.Runtime.Sprite2D_set_region_enabled(self, enabled)
}
func (self Sprite2D) IsRegionEnabled() bool {
	return self.Runtime.Sprite2D_is_region_enabled(self)
}
func (self Sprite2D) IsPixelOpaque(pos Vector2) bool {
	return self.Runtime.Sprite2D_is_pixel_opaque(self, pos)
}
func (self Sprite2D) SetRegionRect(rect Rect2) {
	self.Runtime.Sprite2D_set_region_rect(self, rect)
}
func (self Sprite2D) GetRegionRect() Rect2 {
	return self.Runtime.Sprite2D_get_region_rect(self)
}
func (self Sprite2D) SetRegionFilterClipEnabled(enabled bool) {
	self.Runtime.Sprite2D_set_region_filter_clip_enabled(self, enabled)
}
func (self Sprite2D) IsRegionFilterClipEnabled() bool {
	return self.Runtime.Sprite2D_is_region_filter_clip_enabled(self)
}
func (self Sprite2D) SetFrame(frame int64) {
	self.Runtime.Sprite2D_set_frame(self, frame)
}
func (self Sprite2D) GetFrame() int64 {
	return self.Runtime.Sprite2D_get_frame(self)
}
func (self Sprite2D) SetFrameCoords(coords Vector2i) {
	self.Runtime.Sprite2D_set_frame_coords(self, coords)
}
func (self Sprite2D) GetFrameCoords() Vector2i {
	return self.Runtime.Sprite2D_get_frame_coords(self)
}
func (self Sprite2D) SetVframes(vframes int64) {
	self.Runtime.Sprite2D_set_vframes(self, vframes)
}
func (self Sprite2D) GetVframes() int64 {
	return self.Runtime.Sprite2D_get_vframes(self)
}
func (self Sprite2D) SetHframes(hframes int64) {
	self.Runtime.Sprite2D_set_hframes(self, hframes)
}
func (self Sprite2D) GetHframes() int64 {
	return self.Runtime.Sprite2D_get_hframes(self)
}
func (self Sprite2D) GetRect() Rect2 {
	return self.Runtime.Sprite2D_get_rect(self)
}

type extendsSprite3D struct {
	_ [0]*extendsSprite3D
	class
}

func (self Sprite3D) SpriteBase3D() SpriteBase3D {
	var parent SpriteBase3D
	parent.class = self.class
	return parent
}
func (self Sprite3D) SetTexture(texture Texture2D) {
	self.Runtime.Sprite3D_set_texture(self, texture)
}
func (self Sprite3D) GetTexture() Texture2D {
	return self.Runtime.Sprite3D_get_texture(self)
}
func (self Sprite3D) SetRegionEnabled(enabled bool) {
	self.Runtime.Sprite3D_set_region_enabled(self, enabled)
}
func (self Sprite3D) IsRegionEnabled() bool {
	return self.Runtime.Sprite3D_is_region_enabled(self)
}
func (self Sprite3D) SetRegionRect(rect Rect2) {
	self.Runtime.Sprite3D_set_region_rect(self, rect)
}
func (self Sprite3D) GetRegionRect() Rect2 {
	return self.Runtime.Sprite3D_get_region_rect(self)
}
func (self Sprite3D) SetFrame(frame int64) {
	self.Runtime.Sprite3D_set_frame(self, frame)
}
func (self Sprite3D) GetFrame() int64 {
	return self.Runtime.Sprite3D_get_frame(self)
}
func (self Sprite3D) SetFrameCoords(coords Vector2i) {
	self.Runtime.Sprite3D_set_frame_coords(self, coords)
}
func (self Sprite3D) GetFrameCoords() Vector2i {
	return self.Runtime.Sprite3D_get_frame_coords(self)
}
func (self Sprite3D) SetVframes(vframes int64) {
	self.Runtime.Sprite3D_set_vframes(self, vframes)
}
func (self Sprite3D) GetVframes() int64 {
	return self.Runtime.Sprite3D_get_vframes(self)
}
func (self Sprite3D) SetHframes(hframes int64) {
	self.Runtime.Sprite3D_set_hframes(self, hframes)
}
func (self Sprite3D) GetHframes() int64 {
	return self.Runtime.Sprite3D_get_hframes(self)
}

type extendsSpriteBase3D struct {
	_ [0]*extendsSpriteBase3D
	class
}

func (self SpriteBase3D) GeometryInstance3D() GeometryInstance3D {
	var parent GeometryInstance3D
	parent.class = self.class
	return parent
}
func (self SpriteBase3D) SetCentered(centered bool) {
	self.Runtime.SpriteBase3D_set_centered(self, centered)
}
func (self SpriteBase3D) IsCentered() bool {
	return self.Runtime.SpriteBase3D_is_centered(self)
}
func (self SpriteBase3D) SetOffset(offset Vector2) {
	self.Runtime.SpriteBase3D_set_offset(self, offset)
}
func (self SpriteBase3D) GetOffset() Vector2 {
	return self.Runtime.SpriteBase3D_get_offset(self)
}
func (self SpriteBase3D) SetFlipH(flip_h bool) {
	self.Runtime.SpriteBase3D_set_flip_h(self, flip_h)
}
func (self SpriteBase3D) IsFlippedH() bool {
	return self.Runtime.SpriteBase3D_is_flipped_h(self)
}
func (self SpriteBase3D) SetFlipV(flip_v bool) {
	self.Runtime.SpriteBase3D_set_flip_v(self, flip_v)
}
func (self SpriteBase3D) IsFlippedV() bool {
	return self.Runtime.SpriteBase3D_is_flipped_v(self)
}
func (self SpriteBase3D) SetModulate(modulate Color) {
	self.Runtime.SpriteBase3D_set_modulate(self, modulate)
}
func (self SpriteBase3D) GetModulate() Color {
	return self.Runtime.SpriteBase3D_get_modulate(self)
}
func (self SpriteBase3D) SetRenderPriority(priority int64) {
	self.Runtime.SpriteBase3D_set_render_priority(self, priority)
}
func (self SpriteBase3D) GetRenderPriority() int64 {
	return self.Runtime.SpriteBase3D_get_render_priority(self)
}
func (self SpriteBase3D) SetPixelSize(pixel_size Float) {
	self.Runtime.SpriteBase3D_set_pixel_size(self, pixel_size)
}
func (self SpriteBase3D) GetPixelSize() Float {
	return self.Runtime.SpriteBase3D_get_pixel_size(self)
}
func (self SpriteBase3D) SetAxis(axis Vector3Axis) {
	self.Runtime.SpriteBase3D_set_axis(self, axis)
}
func (self SpriteBase3D) GetAxis() Vector3Axis {
	return self.Runtime.SpriteBase3D_get_axis(self)
}
func (self SpriteBase3D) SetDrawFlag(flag SpriteBase3DDrawFlags, enabled bool) {
	self.Runtime.SpriteBase3D_set_draw_flag(self, flag, enabled)
}
func (self SpriteBase3D) GetDrawFlag(flag SpriteBase3DDrawFlags) bool {
	return self.Runtime.SpriteBase3D_get_draw_flag(self, flag)
}
func (self SpriteBase3D) SetAlphaCutMode(mode SpriteBase3DAlphaCutMode) {
	self.Runtime.SpriteBase3D_set_alpha_cut_mode(self, mode)
}
func (self SpriteBase3D) GetAlphaCutMode() SpriteBase3DAlphaCutMode {
	return self.Runtime.SpriteBase3D_get_alpha_cut_mode(self)
}
func (self SpriteBase3D) SetAlphaScissorThreshold(threshold Float) {
	self.Runtime.SpriteBase3D_set_alpha_scissor_threshold(self, threshold)
}
func (self SpriteBase3D) GetAlphaScissorThreshold() Float {
	return self.Runtime.SpriteBase3D_get_alpha_scissor_threshold(self)
}
func (self SpriteBase3D) SetAlphaHashScale(threshold Float) {
	self.Runtime.SpriteBase3D_set_alpha_hash_scale(self, threshold)
}
func (self SpriteBase3D) GetAlphaHashScale() Float {
	return self.Runtime.SpriteBase3D_get_alpha_hash_scale(self)
}
func (self SpriteBase3D) SetAlphaAntialiasing(alpha_aa BaseMaterial3DAlphaAntiAliasing) {
	self.Runtime.SpriteBase3D_set_alpha_antialiasing(self, alpha_aa)
}
func (self SpriteBase3D) GetAlphaAntialiasing() BaseMaterial3DAlphaAntiAliasing {
	return self.Runtime.SpriteBase3D_get_alpha_antialiasing(self)
}
func (self SpriteBase3D) SetAlphaAntialiasingEdge(edge Float) {
	self.Runtime.SpriteBase3D_set_alpha_antialiasing_edge(self, edge)
}
func (self SpriteBase3D) GetAlphaAntialiasingEdge() Float {
	return self.Runtime.SpriteBase3D_get_alpha_antialiasing_edge(self)
}
func (self SpriteBase3D) SetBillboardMode(mode BaseMaterial3DBillboardMode) {
	self.Runtime.SpriteBase3D_set_billboard_mode(self, mode)
}
func (self SpriteBase3D) GetBillboardMode() BaseMaterial3DBillboardMode {
	return self.Runtime.SpriteBase3D_get_billboard_mode(self)
}
func (self SpriteBase3D) SetTextureFilter(mode BaseMaterial3DTextureFilter) {
	self.Runtime.SpriteBase3D_set_texture_filter(self, mode)
}
func (self SpriteBase3D) GetTextureFilter() BaseMaterial3DTextureFilter {
	return self.Runtime.SpriteBase3D_get_texture_filter(self)
}
func (self SpriteBase3D) GetItemRect() Rect2 {
	return self.Runtime.SpriteBase3D_get_item_rect(self)
}
func (self SpriteBase3D) GenerateTriangleMesh() TriangleMesh {
	return self.Runtime.SpriteBase3D_generate_triangle_mesh(self)
}

type extendsSpriteFrames struct {
	_ [0]*extendsSpriteFrames
	class
}

func (self SpriteFrames) Resource() Resource {
	var parent Resource
	parent.class = self.class
	return parent
}
func (self SpriteFrames) AddAnimation(anim string) {
	self.Runtime.SpriteFrames_add_animation(self, anim)
}
func (self SpriteFrames) HasAnimation(anim string) bool {
	return self.Runtime.SpriteFrames_has_animation(self, anim)
}
func (self SpriteFrames) RemoveAnimation(anim string) {
	self.Runtime.SpriteFrames_remove_animation(self, anim)
}
func (self SpriteFrames) RenameAnimation(anim string, newname string) {
	self.Runtime.SpriteFrames_rename_animation(self, anim, newname)
}
func (self SpriteFrames) GetAnimationNames() PackedStringArray {
	return self.Runtime.SpriteFrames_get_animation_names(self)
}
func (self SpriteFrames) SetAnimationSpeed(anim string, fps Float) {
	self.Runtime.SpriteFrames_set_animation_speed(self, anim, fps)
}
func (self SpriteFrames) GetAnimationSpeed(anim string) Float {
	return self.Runtime.SpriteFrames_get_animation_speed(self, anim)
}
func (self SpriteFrames) SetAnimationLoop(anim string, loop bool) {
	self.Runtime.SpriteFrames_set_animation_loop(self, anim, loop)
}
func (self SpriteFrames) GetAnimationLoop(anim string) bool {
	return self.Runtime.SpriteFrames_get_animation_loop(self, anim)
}
func (self SpriteFrames) AddFrame(anim string, texture Texture2D, duration Float, at_position int64) {
	self.Runtime.SpriteFrames_add_frame(self, anim, texture, duration, at_position)
}
func (self SpriteFrames) SetFrame(anim string, idx int64, texture Texture2D, duration Float) {
	self.Runtime.SpriteFrames_set_frame(self, anim, idx, texture, duration)
}
func (self SpriteFrames) RemoveFrame(anim string, idx int64) {
	self.Runtime.SpriteFrames_remove_frame(self, anim, idx)
}
func (self SpriteFrames) GetFrameCount(anim string) int64 {
	return self.Runtime.SpriteFrames_get_frame_count(self, anim)
}
func (self SpriteFrames) GetFrameTexture(anim string, idx int64) Texture2D {
	return self.Runtime.SpriteFrames_get_frame_texture(self, anim, idx)
}
func (self SpriteFrames) GetFrameDuration(anim string, idx int64) Float {
	return self.Runtime.SpriteFrames_get_frame_duration(self, anim, idx)
}
func (self SpriteFrames) Clear(anim string) {
	self.Runtime.SpriteFrames_clear(self, anim)
}
func (self SpriteFrames) ClearAll() {
	self.Runtime.SpriteFrames_clear_all(self)
}

type extendsStandardMaterial3D struct {
	_ [0]*extendsStandardMaterial3D
	class
}

func (self StandardMaterial3D) BaseMaterial3D() BaseMaterial3D {
	var parent BaseMaterial3D
	parent.class = self.class
	return parent
}

type extendsStaticBody2D struct {
	_ [0]*extendsStaticBody2D
	class
}

func (self StaticBody2D) PhysicsBody2D() PhysicsBody2D {
	var parent PhysicsBody2D
	parent.class = self.class
	return parent
}
func (self StaticBody2D) SetConstantLinearVelocity(vel Vector2) {
	self.Runtime.StaticBody2D_set_constant_linear_velocity(self, vel)
}
func (self StaticBody2D) SetConstantAngularVelocity(vel Float) {
	self.Runtime.StaticBody2D_set_constant_angular_velocity(self, vel)
}
func (self StaticBody2D) GetConstantLinearVelocity() Vector2 {
	return self.Runtime.StaticBody2D_get_constant_linear_velocity(self)
}
func (self StaticBody2D) GetConstantAngularVelocity() Float {
	return self.Runtime.StaticBody2D_get_constant_angular_velocity(self)
}
func (self StaticBody2D) SetPhysicsMaterialOverride(physics_material_override PhysicsMaterial) {
	self.Runtime.StaticBody2D_set_physics_material_override(self, physics_material_override)
}
func (self StaticBody2D) GetPhysicsMaterialOverride() PhysicsMaterial {
	return self.Runtime.StaticBody2D_get_physics_material_override(self)
}

type extendsStaticBody3D struct {
	_ [0]*extendsStaticBody3D
	class
}

func (self StaticBody3D) PhysicsBody3D() PhysicsBody3D {
	var parent PhysicsBody3D
	parent.class = self.class
	return parent
}
func (self StaticBody3D) SetConstantLinearVelocity(vel Vector3) {
	self.Runtime.StaticBody3D_set_constant_linear_velocity(self, vel)
}
func (self StaticBody3D) SetConstantAngularVelocity(vel Vector3) {
	self.Runtime.StaticBody3D_set_constant_angular_velocity(self, vel)
}
func (self StaticBody3D) GetConstantLinearVelocity() Vector3 {
	return self.Runtime.StaticBody3D_get_constant_linear_velocity(self)
}
func (self StaticBody3D) GetConstantAngularVelocity() Vector3 {
	return self.Runtime.StaticBody3D_get_constant_angular_velocity(self)
}
func (self StaticBody3D) SetPhysicsMaterialOverride(physics_material_override PhysicsMaterial) {
	self.Runtime.StaticBody3D_set_physics_material_override(self, physics_material_override)
}
func (self StaticBody3D) GetPhysicsMaterialOverride() PhysicsMaterial {
	return self.Runtime.StaticBody3D_get_physics_material_override(self)
}

type extendsStreamPeer struct {
	_ [0]*extendsStreamPeer
	class
}

func (self StreamPeer) RefCounted() RefCounted {
	var parent RefCounted
	parent.class = self.class
	return parent
}
func (self StreamPeer) PutData(data PackedByteArray) int64 {
	return self.Runtime.StreamPeer_put_data(self, data)
}
func (self StreamPeer) PutPartialData(data PackedByteArray) Array {
	return self.Runtime.StreamPeer_put_partial_data(self, data)
}
func (self StreamPeer) GetData(bytes int64) Array {
	return self.Runtime.StreamPeer_get_data(self, bytes)
}
func (self StreamPeer) GetPartialData(bytes int64) Array {
	return self.Runtime.StreamPeer_get_partial_data(self, bytes)
}
func (self StreamPeer) GetAvailableBytes() int64 {
	return self.Runtime.StreamPeer_get_available_bytes(self)
}
func (self StreamPeer) SetBigEndian(enable bool) {
	self.Runtime.StreamPeer_set_big_endian(self, enable)
}
func (self StreamPeer) IsBigEndianEnabled() bool {
	return self.Runtime.StreamPeer_is_big_endian_enabled(self)
}
func (self StreamPeer) Put8(value int64) {
	self.Runtime.StreamPeer_put_8(self, value)
}
func (self StreamPeer) PutU8(value int64) {
	self.Runtime.StreamPeer_put_u8(self, value)
}
func (self StreamPeer) Put16(value int64) {
	self.Runtime.StreamPeer_put_16(self, value)
}
func (self StreamPeer) PutU16(value int64) {
	self.Runtime.StreamPeer_put_u16(self, value)
}
func (self StreamPeer) Put32(value int64) {
	self.Runtime.StreamPeer_put_32(self, value)
}
func (self StreamPeer) PutU32(value int64) {
	self.Runtime.StreamPeer_put_u32(self, value)
}
func (self StreamPeer) Put64(value int64) {
	self.Runtime.StreamPeer_put_64(self, value)
}
func (self StreamPeer) PutU64(value int64) {
	self.Runtime.StreamPeer_put_u64(self, value)
}
func (self StreamPeer) PutFloat(value Float) {
	self.Runtime.StreamPeer_put_float(self, value)
}
func (self StreamPeer) PutDouble(value Float) {
	self.Runtime.StreamPeer_put_double(self, value)
}
func (self StreamPeer) PutString(value string) {
	self.Runtime.StreamPeer_put_string(self, value)
}
func (self StreamPeer) PutUtf8String(value string) {
	self.Runtime.StreamPeer_put_utf8_string(self, value)
}
func (self StreamPeer) PutVar(value any, full_objects bool) {
	self.Runtime.StreamPeer_put_var(self, value, full_objects)
}
func (self StreamPeer) Get8() int64 {
	return self.Runtime.StreamPeer_get_8(self)
}
func (self StreamPeer) GetU8() int64 {
	return self.Runtime.StreamPeer_get_u8(self)
}
func (self StreamPeer) Get16() int64 {
	return self.Runtime.StreamPeer_get_16(self)
}
func (self StreamPeer) GetU16() int64 {
	return self.Runtime.StreamPeer_get_u16(self)
}
func (self StreamPeer) Get32() int64 {
	return self.Runtime.StreamPeer_get_32(self)
}
func (self StreamPeer) GetU32() int64 {
	return self.Runtime.StreamPeer_get_u32(self)
}
func (self StreamPeer) Get64() int64 {
	return self.Runtime.StreamPeer_get_64(self)
}
func (self StreamPeer) GetU64() int64 {
	return self.Runtime.StreamPeer_get_u64(self)
}
func (self StreamPeer) GetFloat() Float {
	return self.Runtime.StreamPeer_get_float(self)
}
func (self StreamPeer) GetDouble() Float {
	return self.Runtime.StreamPeer_get_double(self)
}
func (self StreamPeer) GetString(bytes int64) string {
	return self.Runtime.StreamPeer_get_string(self, bytes)
}
func (self StreamPeer) GetUtf8String(bytes int64) string {
	return self.Runtime.StreamPeer_get_utf8_string(self, bytes)
}
func (self StreamPeer) GetVar(allow_objects bool) any {
	return self.Runtime.StreamPeer_get_var(self, allow_objects)
}

type extendsStreamPeerBuffer struct {
	_ [0]*extendsStreamPeerBuffer
	class
}

func (self StreamPeerBuffer) StreamPeer() StreamPeer {
	var parent StreamPeer
	parent.class = self.class
	return parent
}
func (self StreamPeerBuffer) SeekTo(position int64) {
	self.Runtime.StreamPeerBuffer_seek(self, position)
}
func (self StreamPeerBuffer) GetSize() int64 {
	return self.Runtime.StreamPeerBuffer_get_size(self)
}
func (self StreamPeerBuffer) GetPosition() int64 {
	return self.Runtime.StreamPeerBuffer_get_position(self)
}
func (self StreamPeerBuffer) Resize(size int64) {
	self.Runtime.StreamPeerBuffer_resize(self, size)
}
func (self StreamPeerBuffer) SetDataArray(data PackedByteArray) {
	self.Runtime.StreamPeerBuffer_set_data_array(self, data)
}
func (self StreamPeerBuffer) GetDataArray() PackedByteArray {
	return self.Runtime.StreamPeerBuffer_get_data_array(self)
}
func (self StreamPeerBuffer) Clear() {
	self.Runtime.StreamPeerBuffer_clear(self)
}
func (self StreamPeerBuffer) Duplicate() StreamPeerBuffer {
	return self.Runtime.StreamPeerBuffer_duplicate(self)
}

type extendsStreamPeerExtension struct {
	_ [0]*extendsStreamPeerExtension
	class
}

func (self StreamPeerExtension) StreamPeer() StreamPeer {
	var parent StreamPeer
	parent.class = self.class
	return parent
}

type extendsStreamPeerGZIP struct {
	_ [0]*extendsStreamPeerGZIP
	class
}

func (self StreamPeerGZIP) StreamPeer() StreamPeer {
	var parent StreamPeer
	parent.class = self.class
	return parent
}
func (self StreamPeerGZIP) StartCompression(use_deflate bool, buffer_size int64) int64 {
	return self.Runtime.StreamPeerGZIP_start_compression(self, use_deflate, buffer_size)
}
func (self StreamPeerGZIP) StartDecompression(use_deflate bool, buffer_size int64) int64 {
	return self.Runtime.StreamPeerGZIP_start_decompression(self, use_deflate, buffer_size)
}
func (self StreamPeerGZIP) Finish() int64 {
	return self.Runtime.StreamPeerGZIP_finish(self)
}
func (self StreamPeerGZIP) Clear() {
	self.Runtime.StreamPeerGZIP_clear(self)
}

type extendsStreamPeerTCP struct {
	_ [0]*extendsStreamPeerTCP
	class
}

func (self StreamPeerTCP) StreamPeer() StreamPeer {
	var parent StreamPeer
	parent.class = self.class
	return parent
}
func (self StreamPeerTCP) Bind(port int64, host string) int64 {
	return self.Runtime.StreamPeerTCP_bind(self, port, host)
}
func (self StreamPeerTCP) ConnectToHost(host string, port int64) int64 {
	return self.Runtime.StreamPeerTCP_connect_to_host(self, host, port)
}
func (self StreamPeerTCP) Poll() int64 {
	return self.Runtime.StreamPeerTCP_poll(self)
}
func (self StreamPeerTCP) GetStatus() StreamPeerTCPStatus {
	return self.Runtime.StreamPeerTCP_get_status(self)
}
func (self StreamPeerTCP) GetConnectedHost() string {
	return self.Runtime.StreamPeerTCP_get_connected_host(self)
}
func (self StreamPeerTCP) GetConnectedPort() int64 {
	return self.Runtime.StreamPeerTCP_get_connected_port(self)
}
func (self StreamPeerTCP) GetLocalPort() int64 {
	return self.Runtime.StreamPeerTCP_get_local_port(self)
}
func (self StreamPeerTCP) DisconnectFromHost() {
	self.Runtime.StreamPeerTCP_disconnect_from_host(self)
}
func (self StreamPeerTCP) SetNoDelay(enabled bool) {
	self.Runtime.StreamPeerTCP_set_no_delay(self, enabled)
}

type extendsStreamPeerTLS struct {
	_ [0]*extendsStreamPeerTLS
	class
}

func (self StreamPeerTLS) StreamPeer() StreamPeer {
	var parent StreamPeer
	parent.class = self.class
	return parent
}
func (self StreamPeerTLS) Poll() {
	self.Runtime.StreamPeerTLS_poll(self)
}
func (self StreamPeerTLS) AcceptStream(stream StreamPeer, server_options TLSOptions) int64 {
	return self.Runtime.StreamPeerTLS_accept_stream(self, stream, server_options)
}
func (self StreamPeerTLS) ConnectToStream(stream StreamPeer, common_name string, client_options TLSOptions) int64 {
	return self.Runtime.StreamPeerTLS_connect_to_stream(self, stream, common_name, client_options)
}
func (self StreamPeerTLS) GetStatus() StreamPeerTLSStatus {
	return self.Runtime.StreamPeerTLS_get_status(self)
}
func (self StreamPeerTLS) GetStream() StreamPeer {
	return self.Runtime.StreamPeerTLS_get_stream(self)
}
func (self StreamPeerTLS) DisconnectFromStream() {
	self.Runtime.StreamPeerTLS_disconnect_from_stream(self)
}

type extendsStyleBox struct {
	_ [0]*extendsStyleBox
	class
}

func (self StyleBox) Resource() Resource {
	var parent Resource
	parent.class = self.class
	return parent
}
func (self StyleBox) GetMinimumSize() Vector2 {
	return self.Runtime.StyleBox_get_minimum_size(self)
}
func (self StyleBox) SetContentMargin(margin Side, offset Float) {
	self.Runtime.StyleBox_set_content_margin(self, margin, offset)
}
func (self StyleBox) SetContentMarginAll(offset Float) {
	self.Runtime.StyleBox_set_content_margin_all(self, offset)
}
func (self StyleBox) GetContentMargin(margin Side) Float {
	return self.Runtime.StyleBox_get_content_margin(self, margin)
}
func (self StyleBox) GetMargin(margin Side) Float {
	return self.Runtime.StyleBox_get_margin(self, margin)
}
func (self StyleBox) GetOffset() Vector2 {
	return self.Runtime.StyleBox_get_offset(self)
}
func (self StyleBox) Draw(canvas_item RID, rect Rect2) {
	self.Runtime.StyleBox_draw(self, canvas_item, rect)
}
func (self StyleBox) GetCurrentItemDrawn() CanvasItem {
	return self.Runtime.StyleBox_get_current_item_drawn(self)
}
func (self StyleBox) TestMask(point Vector2, rect Rect2) bool {
	return self.Runtime.StyleBox_test_mask(self, point, rect)
}

type extendsStyleBoxEmpty struct {
	_ [0]*extendsStyleBoxEmpty
	class
}

func (self StyleBoxEmpty) StyleBox() StyleBox {
	var parent StyleBox
	parent.class = self.class
	return parent
}

type extendsStyleBoxFlat struct {
	_ [0]*extendsStyleBoxFlat
	class
}

func (self StyleBoxFlat) StyleBox() StyleBox {
	var parent StyleBox
	parent.class = self.class
	return parent
}
func (self StyleBoxFlat) SetBgColor(color Color) {
	self.Runtime.StyleBoxFlat_set_bg_color(self, color)
}
func (self StyleBoxFlat) GetBgColor() Color {
	return self.Runtime.StyleBoxFlat_get_bg_color(self)
}
func (self StyleBoxFlat) SetBorderColor(color Color) {
	self.Runtime.StyleBoxFlat_set_border_color(self, color)
}
func (self StyleBoxFlat) GetBorderColor() Color {
	return self.Runtime.StyleBoxFlat_get_border_color(self)
}
func (self StyleBoxFlat) SetBorderWidthAll(width int64) {
	self.Runtime.StyleBoxFlat_set_border_width_all(self, width)
}
func (self StyleBoxFlat) GetBorderWidthMin() int64 {
	return self.Runtime.StyleBoxFlat_get_border_width_min(self)
}
func (self StyleBoxFlat) SetBorderWidth(margin Side, width int64) {
	self.Runtime.StyleBoxFlat_set_border_width(self, margin, width)
}
func (self StyleBoxFlat) GetBorderWidth(margin Side) int64 {
	return self.Runtime.StyleBoxFlat_get_border_width(self, margin)
}
func (self StyleBoxFlat) SetBorderBlend(blend bool) {
	self.Runtime.StyleBoxFlat_set_border_blend(self, blend)
}
func (self StyleBoxFlat) GetBorderBlend() bool {
	return self.Runtime.StyleBoxFlat_get_border_blend(self)
}
func (self StyleBoxFlat) SetCornerRadiusAll(radius int64) {
	self.Runtime.StyleBoxFlat_set_corner_radius_all(self, radius)
}
func (self StyleBoxFlat) SetCornerRadius(corner Corner, radius int64) {
	self.Runtime.StyleBoxFlat_set_corner_radius(self, corner, radius)
}
func (self StyleBoxFlat) GetCornerRadius(corner Corner) int64 {
	return self.Runtime.StyleBoxFlat_get_corner_radius(self, corner)
}
func (self StyleBoxFlat) SetExpandMargin(margin Side, size Float) {
	self.Runtime.StyleBoxFlat_set_expand_margin(self, margin, size)
}
func (self StyleBoxFlat) SetExpandMarginAll(size Float) {
	self.Runtime.StyleBoxFlat_set_expand_margin_all(self, size)
}
func (self StyleBoxFlat) GetExpandMargin(margin Side) Float {
	return self.Runtime.StyleBoxFlat_get_expand_margin(self, margin)
}
func (self StyleBoxFlat) SetDrawCenter(draw_center bool) {
	self.Runtime.StyleBoxFlat_set_draw_center(self, draw_center)
}
func (self StyleBoxFlat) IsDrawCenterEnabled() bool {
	return self.Runtime.StyleBoxFlat_is_draw_center_enabled(self)
}
func (self StyleBoxFlat) SetSkew(skew Vector2) {
	self.Runtime.StyleBoxFlat_set_skew(self, skew)
}
func (self StyleBoxFlat) GetSkew() Vector2 {
	return self.Runtime.StyleBoxFlat_get_skew(self)
}
func (self StyleBoxFlat) SetShadowColor(color Color) {
	self.Runtime.StyleBoxFlat_set_shadow_color(self, color)
}
func (self StyleBoxFlat) GetShadowColor() Color {
	return self.Runtime.StyleBoxFlat_get_shadow_color(self)
}
func (self StyleBoxFlat) SetShadowSize(size int64) {
	self.Runtime.StyleBoxFlat_set_shadow_size(self, size)
}
func (self StyleBoxFlat) GetShadowSize() int64 {
	return self.Runtime.StyleBoxFlat_get_shadow_size(self)
}
func (self StyleBoxFlat) SetShadowOffset(offset Vector2) {
	self.Runtime.StyleBoxFlat_set_shadow_offset(self, offset)
}
func (self StyleBoxFlat) GetShadowOffset() Vector2 {
	return self.Runtime.StyleBoxFlat_get_shadow_offset(self)
}
func (self StyleBoxFlat) SetAntiAliased(anti_aliased bool) {
	self.Runtime.StyleBoxFlat_set_anti_aliased(self, anti_aliased)
}
func (self StyleBoxFlat) IsAntiAliased() bool {
	return self.Runtime.StyleBoxFlat_is_anti_aliased(self)
}
func (self StyleBoxFlat) SetAaSize(size Float) {
	self.Runtime.StyleBoxFlat_set_aa_size(self, size)
}
func (self StyleBoxFlat) GetAaSize() Float {
	return self.Runtime.StyleBoxFlat_get_aa_size(self)
}
func (self StyleBoxFlat) SetCornerDetail(detail int64) {
	self.Runtime.StyleBoxFlat_set_corner_detail(self, detail)
}
func (self StyleBoxFlat) GetCornerDetail() int64 {
	return self.Runtime.StyleBoxFlat_get_corner_detail(self)
}

type extendsStyleBoxLine struct {
	_ [0]*extendsStyleBoxLine
	class
}

func (self StyleBoxLine) StyleBox() StyleBox {
	var parent StyleBox
	parent.class = self.class
	return parent
}
func (self StyleBoxLine) SetColor(color Color) {
	self.Runtime.StyleBoxLine_set_color(self, color)
}
func (self StyleBoxLine) GetColor() Color {
	return self.Runtime.StyleBoxLine_get_color(self)
}
func (self StyleBoxLine) SetThickness(thickness int64) {
	self.Runtime.StyleBoxLine_set_thickness(self, thickness)
}
func (self StyleBoxLine) GetThickness() int64 {
	return self.Runtime.StyleBoxLine_get_thickness(self)
}
func (self StyleBoxLine) SetGrowBegin(offset Float) {
	self.Runtime.StyleBoxLine_set_grow_begin(self, offset)
}
func (self StyleBoxLine) GetGrowBegin() Float {
	return self.Runtime.StyleBoxLine_get_grow_begin(self)
}
func (self StyleBoxLine) SetGrowEnd(offset Float) {
	self.Runtime.StyleBoxLine_set_grow_end(self, offset)
}
func (self StyleBoxLine) GetGrowEnd() Float {
	return self.Runtime.StyleBoxLine_get_grow_end(self)
}
func (self StyleBoxLine) SetVertical(vertical bool) {
	self.Runtime.StyleBoxLine_set_vertical(self, vertical)
}
func (self StyleBoxLine) IsVertical() bool {
	return self.Runtime.StyleBoxLine_is_vertical(self)
}

type extendsStyleBoxTexture struct {
	_ [0]*extendsStyleBoxTexture
	class
}

func (self StyleBoxTexture) StyleBox() StyleBox {
	var parent StyleBox
	parent.class = self.class
	return parent
}
func (self StyleBoxTexture) SetTexture(texture Texture2D) {
	self.Runtime.StyleBoxTexture_set_texture(self, texture)
}
func (self StyleBoxTexture) GetTexture() Texture2D {
	return self.Runtime.StyleBoxTexture_get_texture(self)
}
func (self StyleBoxTexture) SetTextureMargin(margin Side, size Float) {
	self.Runtime.StyleBoxTexture_set_texture_margin(self, margin, size)
}
func (self StyleBoxTexture) SetTextureMarginAll(size Float) {
	self.Runtime.StyleBoxTexture_set_texture_margin_all(self, size)
}
func (self StyleBoxTexture) GetTextureMargin(margin Side) Float {
	return self.Runtime.StyleBoxTexture_get_texture_margin(self, margin)
}
func (self StyleBoxTexture) SetExpandMargin(margin Side, size Float) {
	self.Runtime.StyleBoxTexture_set_expand_margin(self, margin, size)
}
func (self StyleBoxTexture) SetExpandMarginAll(size Float) {
	self.Runtime.StyleBoxTexture_set_expand_margin_all(self, size)
}
func (self StyleBoxTexture) GetExpandMargin(margin Side) Float {
	return self.Runtime.StyleBoxTexture_get_expand_margin(self, margin)
}
func (self StyleBoxTexture) SetRegionRect(region Rect2) {
	self.Runtime.StyleBoxTexture_set_region_rect(self, region)
}
func (self StyleBoxTexture) GetRegionRect() Rect2 {
	return self.Runtime.StyleBoxTexture_get_region_rect(self)
}
func (self StyleBoxTexture) SetDrawCenter(enable bool) {
	self.Runtime.StyleBoxTexture_set_draw_center(self, enable)
}
func (self StyleBoxTexture) IsDrawCenterEnabled() bool {
	return self.Runtime.StyleBoxTexture_is_draw_center_enabled(self)
}
func (self StyleBoxTexture) SetModulate(color Color) {
	self.Runtime.StyleBoxTexture_set_modulate(self, color)
}
func (self StyleBoxTexture) GetModulate() Color {
	return self.Runtime.StyleBoxTexture_get_modulate(self)
}
func (self StyleBoxTexture) SetHAxisStretchMode(mode StyleBoxTextureAxisStretchMode) {
	self.Runtime.StyleBoxTexture_set_h_axis_stretch_mode(self, mode)
}
func (self StyleBoxTexture) GetHAxisStretchMode() StyleBoxTextureAxisStretchMode {
	return self.Runtime.StyleBoxTexture_get_h_axis_stretch_mode(self)
}
func (self StyleBoxTexture) SetVAxisStretchMode(mode StyleBoxTextureAxisStretchMode) {
	self.Runtime.StyleBoxTexture_set_v_axis_stretch_mode(self, mode)
}
func (self StyleBoxTexture) GetVAxisStretchMode() StyleBoxTextureAxisStretchMode {
	return self.Runtime.StyleBoxTexture_get_v_axis_stretch_mode(self)
}

type extendsSubViewport struct {
	_ [0]*extendsSubViewport
	class
}

func (self SubViewport) Viewport() Viewport {
	var parent Viewport
	parent.class = self.class
	return parent
}
func (self SubViewport) SetSize(size Vector2i) {
	self.Runtime.SubViewport_set_size(self, size)
}
func (self SubViewport) GetSize() Vector2i {
	return self.Runtime.SubViewport_get_size(self)
}
func (self SubViewport) SetSize2dOverride(size Vector2i) {
	self.Runtime.SubViewport_set_size_2d_override(self, size)
}
func (self SubViewport) GetSize2dOverride() Vector2i {
	return self.Runtime.SubViewport_get_size_2d_override(self)
}
func (self SubViewport) SetSize2dOverrideStretch(enable bool) {
	self.Runtime.SubViewport_set_size_2d_override_stretch(self, enable)
}
func (self SubViewport) IsSize2dOverrideStretchEnabled() bool {
	return self.Runtime.SubViewport_is_size_2d_override_stretch_enabled(self)
}
func (self SubViewport) SetUpdateMode(mode SubViewportUpdateMode) {
	self.Runtime.SubViewport_set_update_mode(self, mode)
}
func (self SubViewport) GetUpdateMode() SubViewportUpdateMode {
	return self.Runtime.SubViewport_get_update_mode(self)
}
func (self SubViewport) SetClearMode(mode SubViewportClearMode) {
	self.Runtime.SubViewport_set_clear_mode(self, mode)
}
func (self SubViewport) GetClearMode() SubViewportClearMode {
	return self.Runtime.SubViewport_get_clear_mode(self)
}

type extendsSubViewportContainer struct {
	_ [0]*extendsSubViewportContainer
	class
}

func (self SubViewportContainer) Container() Container {
	var parent Container
	parent.class = self.class
	return parent
}
func (self SubViewportContainer) SetStretch(enable bool) {
	self.Runtime.SubViewportContainer_set_stretch(self, enable)
}
func (self SubViewportContainer) IsStretchEnabled() bool {
	return self.Runtime.SubViewportContainer_is_stretch_enabled(self)
}
func (self SubViewportContainer) SetStretchShrink(amount int64) {
	self.Runtime.SubViewportContainer_set_stretch_shrink(self, amount)
}
func (self SubViewportContainer) GetStretchShrink() int64 {
	return self.Runtime.SubViewportContainer_get_stretch_shrink(self)
}

type extendsSurfaceTool struct {
	_ [0]*extendsSurfaceTool
	class
}

func (self SurfaceTool) RefCounted() RefCounted {
	var parent RefCounted
	parent.class = self.class
	return parent
}
func (self SurfaceTool) SetSkinWeightCount(count SurfaceToolSkinWeightCount) {
	self.Runtime.SurfaceTool_set_skin_weight_count(self, count)
}
func (self SurfaceTool) GetSkinWeightCount() SurfaceToolSkinWeightCount {
	return self.Runtime.SurfaceTool_get_skin_weight_count(self)
}
func (self SurfaceTool) SetCustomFormat(channel_index int64, format SurfaceToolCustomFormat) {
	self.Runtime.SurfaceTool_set_custom_format(self, channel_index, format)
}
func (self SurfaceTool) GetCustomFormat(channel_index int64) SurfaceToolCustomFormat {
	return self.Runtime.SurfaceTool_get_custom_format(self, channel_index)
}
func (self SurfaceTool) Begin(primitive MeshPrimitiveType) {
	self.Runtime.SurfaceTool_begin(self, primitive)
}
func (self SurfaceTool) AddVertex(vertex Vector3) {
	self.Runtime.SurfaceTool_add_vertex(self, vertex)
}
func (self SurfaceTool) SetColor(color Color) {
	self.Runtime.SurfaceTool_set_color(self, color)
}
func (self SurfaceTool) SetNormal(normal Vector3) {
	self.Runtime.SurfaceTool_set_normal(self, normal)
}
func (self SurfaceTool) SetTangent(tangent Plane) {
	self.Runtime.SurfaceTool_set_tangent(self, tangent)
}
func (self SurfaceTool) SetUv(uv Vector2) {
	self.Runtime.SurfaceTool_set_uv(self, uv)
}
func (self SurfaceTool) SetUv2(uv2 Vector2) {
	self.Runtime.SurfaceTool_set_uv2(self, uv2)
}
func (self SurfaceTool) SetBones(bones PackedInt32Array) {
	self.Runtime.SurfaceTool_set_bones(self, bones)
}
func (self SurfaceTool) SetWeights(weights PackedFloat32Array) {
	self.Runtime.SurfaceTool_set_weights(self, weights)
}
func (self SurfaceTool) SetCustom(channel_index int64, custom_color Color) {
	self.Runtime.SurfaceTool_set_custom(self, channel_index, custom_color)
}
func (self SurfaceTool) SetSmoothGroup(index int64) {
	self.Runtime.SurfaceTool_set_smooth_group(self, index)
}
func (self SurfaceTool) AddTriangleFan(vertices PackedVector3Array, uvs PackedVector2Array, colors PackedColorArray, uv2s PackedVector2Array, normals PackedVector3Array, tangents ArrayOf[Plane]) {
	self.Runtime.SurfaceTool_add_triangle_fan(self, vertices, uvs, colors, uv2s, normals, tangents)
}
func (self SurfaceTool) AddIndex(index int64) {
	self.Runtime.SurfaceTool_add_index(self, index)
}
func (self SurfaceTool) Index() {
	self.Runtime.SurfaceTool_index(self)
}
func (self SurfaceTool) Deindex() {
	self.Runtime.SurfaceTool_deindex(self)
}
func (self SurfaceTool) GenerateNormals(flip bool) {
	self.Runtime.SurfaceTool_generate_normals(self, flip)
}
func (self SurfaceTool) GenerateTangents() {
	self.Runtime.SurfaceTool_generate_tangents(self)
}
func (self SurfaceTool) OptimizeIndicesForCache() {
	self.Runtime.SurfaceTool_optimize_indices_for_cache(self)
}
func (self SurfaceTool) GetAabb() AABB {
	return self.Runtime.SurfaceTool_get_aabb(self)
}
func (self SurfaceTool) GenerateLod(nd_threshold Float, target_index_count int64) PackedInt32Array {
	return self.Runtime.SurfaceTool_generate_lod(self, nd_threshold, target_index_count)
}
func (self SurfaceTool) SetMaterial(material Material) {
	self.Runtime.SurfaceTool_set_material(self, material)
}
func (self SurfaceTool) GetPrimitiveType() MeshPrimitiveType {
	return self.Runtime.SurfaceTool_get_primitive_type(self)
}
func (self SurfaceTool) Clear() {
	self.Runtime.SurfaceTool_clear(self)
}
func (self SurfaceTool) CreateFrom(existing Mesh, surface int64) {
	self.Runtime.SurfaceTool_create_from(self, existing, surface)
}
func (self SurfaceTool) CreateFromBlendShape(existing Mesh, surface int64, blend_shape string) {
	self.Runtime.SurfaceTool_create_from_blend_shape(self, existing, surface, blend_shape)
}
func (self SurfaceTool) AppendFrom(existing Mesh, surface int64, transform Transform3D) {
	self.Runtime.SurfaceTool_append_from(self, existing, surface, transform)
}
func (self SurfaceTool) Commit(existing ArrayMesh, flags int64) ArrayMesh {
	return self.Runtime.SurfaceTool_commit(self, existing, flags)
}
func (self SurfaceTool) CommitToArrays() Array {
	return self.Runtime.SurfaceTool_commit_to_arrays(self)
}

type extendsSyntaxHighlighter struct {
	_ [0]*extendsSyntaxHighlighter
	class
}

func (self SyntaxHighlighter) Resource() Resource {
	var parent Resource
	parent.class = self.class
	return parent
}
func (self SyntaxHighlighter) GetLineSyntaxHighlighting(line int64) Dictionary {
	return self.Runtime.SyntaxHighlighter_get_line_syntax_highlighting(self, line)
}
func (self SyntaxHighlighter) UpdateCache() {
	self.Runtime.SyntaxHighlighter_update_cache(self)
}
func (self SyntaxHighlighter) ClearHighlightingCache() {
	self.Runtime.SyntaxHighlighter_clear_highlighting_cache(self)
}
func (self SyntaxHighlighter) GetTextEdit() TextEdit {
	return self.Runtime.SyntaxHighlighter_get_text_edit(self)
}

type extendsSystemFont struct {
	_ [0]*extendsSystemFont
	class
}

func (self SystemFont) Font() Font { var parent Font; parent.class = self.class; return parent }
func (self SystemFont) SetAntialiasing(antialiasing TextServerFontAntialiasing) {
	self.Runtime.SystemFont_set_antialiasing(self, antialiasing)
}
func (self SystemFont) GetAntialiasing() TextServerFontAntialiasing {
	return self.Runtime.SystemFont_get_antialiasing(self)
}
func (self SystemFont) SetGenerateMipmaps(generate_mipmaps bool) {
	self.Runtime.SystemFont_set_generate_mipmaps(self, generate_mipmaps)
}
func (self SystemFont) GetGenerateMipmaps() bool {
	return self.Runtime.SystemFont_get_generate_mipmaps(self)
}
func (self SystemFont) SetAllowSystemFallback(allow_system_fallback bool) {
	self.Runtime.SystemFont_set_allow_system_fallback(self, allow_system_fallback)
}
func (self SystemFont) IsAllowSystemFallback() bool {
	return self.Runtime.SystemFont_is_allow_system_fallback(self)
}
func (self SystemFont) SetForceAutohinter(force_autohinter bool) {
	self.Runtime.SystemFont_set_force_autohinter(self, force_autohinter)
}
func (self SystemFont) IsForceAutohinter() bool {
	return self.Runtime.SystemFont_is_force_autohinter(self)
}
func (self SystemFont) SetHinting(hinting TextServerHinting) {
	self.Runtime.SystemFont_set_hinting(self, hinting)
}
func (self SystemFont) GetHinting() TextServerHinting {
	return self.Runtime.SystemFont_get_hinting(self)
}
func (self SystemFont) SetSubpixelPositioning(subpixel_positioning TextServerSubpixelPositioning) {
	self.Runtime.SystemFont_set_subpixel_positioning(self, subpixel_positioning)
}
func (self SystemFont) GetSubpixelPositioning() TextServerSubpixelPositioning {
	return self.Runtime.SystemFont_get_subpixel_positioning(self)
}
func (self SystemFont) SetMultichannelSignedDistanceField(msdf bool) {
	self.Runtime.SystemFont_set_multichannel_signed_distance_field(self, msdf)
}
func (self SystemFont) IsMultichannelSignedDistanceField() bool {
	return self.Runtime.SystemFont_is_multichannel_signed_distance_field(self)
}
func (self SystemFont) SetMsdfPixelRange(msdf_pixel_range int64) {
	self.Runtime.SystemFont_set_msdf_pixel_range(self, msdf_pixel_range)
}
func (self SystemFont) GetMsdfPixelRange() int64 {
	return self.Runtime.SystemFont_get_msdf_pixel_range(self)
}
func (self SystemFont) SetMsdfSize(msdf_size int64) {
	self.Runtime.SystemFont_set_msdf_size(self, msdf_size)
}
func (self SystemFont) GetMsdfSize() int64 {
	return self.Runtime.SystemFont_get_msdf_size(self)
}
func (self SystemFont) SetOversampling(oversampling Float) {
	self.Runtime.SystemFont_set_oversampling(self, oversampling)
}
func (self SystemFont) GetOversampling() Float {
	return self.Runtime.SystemFont_get_oversampling(self)
}
func (self SystemFont) GetFontNames() PackedStringArray {
	return self.Runtime.SystemFont_get_font_names(self)
}
func (self SystemFont) SetFontNames(names PackedStringArray) {
	self.Runtime.SystemFont_set_font_names(self, names)
}
func (self SystemFont) GetFontItalic() bool {
	return self.Runtime.SystemFont_get_font_italic(self)
}
func (self SystemFont) SetFontItalic(italic bool) {
	self.Runtime.SystemFont_set_font_italic(self, italic)
}
func (self SystemFont) SetFontWeight(weight int64) {
	self.Runtime.SystemFont_set_font_weight(self, weight)
}
func (self SystemFont) SetFontStretch(stretch int64) {
	self.Runtime.SystemFont_set_font_stretch(self, stretch)
}

type extendsTCPServer struct {
	_ [0]*extendsTCPServer
	class
}

func (self TCPServer) RefCounted() RefCounted {
	var parent RefCounted
	parent.class = self.class
	return parent
}
func (self TCPServer) Listen(port int64, bind_address string) int64 {
	return self.Runtime.TCPServer_listen(self, port, bind_address)
}
func (self TCPServer) IsConnectionAvailable() bool {
	return self.Runtime.TCPServer_is_connection_available(self)
}
func (self TCPServer) IsListening() bool {
	return self.Runtime.TCPServer_is_listening(self)
}
func (self TCPServer) GetLocalPort() int64 {
	return self.Runtime.TCPServer_get_local_port(self)
}
func (self TCPServer) TakeConnection() StreamPeerTCP {
	return self.Runtime.TCPServer_take_connection(self)
}
func (self TCPServer) Stop() {
	self.Runtime.TCPServer_stop(self)
}

type extendsTLSOptions struct {
	_ [0]*extendsTLSOptions
	class
}

func (self TLSOptions) RefCounted() RefCounted {
	var parent RefCounted
	parent.class = self.class
	return parent
}
func (self TLSOptions) Client(trusted_chain X509Certificate, common_name_override string) TLSOptions {
	return self.Runtime.TLSOptions_client(self, trusted_chain, common_name_override)
}
func (self TLSOptions) ClientUnsafe(trusted_chain X509Certificate) TLSOptions {
	return self.Runtime.TLSOptions_client_unsafe(self, trusted_chain)
}
func (self TLSOptions) Server(key CryptoKey, certificate X509Certificate) TLSOptions {
	return self.Runtime.TLSOptions_server(self, key, certificate)
}

type extendsTabBar struct {
	_ [0]*extendsTabBar
	class
}

func (self TabBar) Control() Control { var parent Control; parent.class = self.class; return parent }
func (self TabBar) SetTabCount(count int64) {
	self.Runtime.TabBar_set_tab_count(self, count)
}
func (self TabBar) GetTabCount() int64 {
	return self.Runtime.TabBar_get_tab_count(self)
}
func (self TabBar) SetCurrentTab(tab_idx int64) {
	self.Runtime.TabBar_set_current_tab(self, tab_idx)
}
func (self TabBar) GetCurrentTab() int64 {
	return self.Runtime.TabBar_get_current_tab(self)
}
func (self TabBar) GetPreviousTab() int64 {
	return self.Runtime.TabBar_get_previous_tab(self)
}
func (self TabBar) SelectPreviousAvailable() bool {
	return self.Runtime.TabBar_select_previous_available(self)
}
func (self TabBar) SelectNextAvailable() bool {
	return self.Runtime.TabBar_select_next_available(self)
}
func (self TabBar) SetTabTitle(tab_idx int64, title string) {
	self.Runtime.TabBar_set_tab_title(self, tab_idx, title)
}
func (self TabBar) GetTabTitle(tab_idx int64) string {
	return self.Runtime.TabBar_get_tab_title(self, tab_idx)
}
func (self TabBar) SetTabTextDirection(tab_idx int64, direction ControlTextDirection) {
	self.Runtime.TabBar_set_tab_text_direction(self, tab_idx, direction)
}
func (self TabBar) GetTabTextDirection(tab_idx int64) ControlTextDirection {
	return self.Runtime.TabBar_get_tab_text_direction(self, tab_idx)
}
func (self TabBar) SetTabLanguage(tab_idx int64, language string) {
	self.Runtime.TabBar_set_tab_language(self, tab_idx, language)
}
func (self TabBar) GetTabLanguage(tab_idx int64) string {
	return self.Runtime.TabBar_get_tab_language(self, tab_idx)
}
func (self TabBar) SetTabIcon(tab_idx int64, icon Texture2D) {
	self.Runtime.TabBar_set_tab_icon(self, tab_idx, icon)
}
func (self TabBar) GetTabIcon(tab_idx int64) Texture2D {
	return self.Runtime.TabBar_get_tab_icon(self, tab_idx)
}
func (self TabBar) SetTabIconMaxWidth(tab_idx int64, width int64) {
	self.Runtime.TabBar_set_tab_icon_max_width(self, tab_idx, width)
}
func (self TabBar) GetTabIconMaxWidth(tab_idx int64) int64 {
	return self.Runtime.TabBar_get_tab_icon_max_width(self, tab_idx)
}
func (self TabBar) SetTabButtonIcon(tab_idx int64, icon Texture2D) {
	self.Runtime.TabBar_set_tab_button_icon(self, tab_idx, icon)
}
func (self TabBar) GetTabButtonIcon(tab_idx int64) Texture2D {
	return self.Runtime.TabBar_get_tab_button_icon(self, tab_idx)
}
func (self TabBar) SetTabDisabled(tab_idx int64, disabled bool) {
	self.Runtime.TabBar_set_tab_disabled(self, tab_idx, disabled)
}
func (self TabBar) IsTabDisabled(tab_idx int64) bool {
	return self.Runtime.TabBar_is_tab_disabled(self, tab_idx)
}
func (self TabBar) SetTabHidden(tab_idx int64, hidden bool) {
	self.Runtime.TabBar_set_tab_hidden(self, tab_idx, hidden)
}
func (self TabBar) IsTabHidden(tab_idx int64) bool {
	return self.Runtime.TabBar_is_tab_hidden(self, tab_idx)
}
func (self TabBar) SetTabMetadata(tab_idx int64, metadata any) {
	self.Runtime.TabBar_set_tab_metadata(self, tab_idx, metadata)
}
func (self TabBar) GetTabMetadata(tab_idx int64) any {
	return self.Runtime.TabBar_get_tab_metadata(self, tab_idx)
}
func (self TabBar) RemoveTab(tab_idx int64) {
	self.Runtime.TabBar_remove_tab(self, tab_idx)
}
func (self TabBar) AddTab(title string, icon Texture2D) {
	self.Runtime.TabBar_add_tab(self, title, icon)
}
func (self TabBar) GetTabIdxAtPoint(point Vector2) int64 {
	return self.Runtime.TabBar_get_tab_idx_at_point(self, point)
}
func (self TabBar) SetTabAlignment(alignment TabBarAlignmentMode) {
	self.Runtime.TabBar_set_tab_alignment(self, alignment)
}
func (self TabBar) GetTabAlignment() TabBarAlignmentMode {
	return self.Runtime.TabBar_get_tab_alignment(self)
}
func (self TabBar) SetClipTabs(clip_tabs bool) {
	self.Runtime.TabBar_set_clip_tabs(self, clip_tabs)
}
func (self TabBar) GetClipTabs() bool {
	return self.Runtime.TabBar_get_clip_tabs(self)
}
func (self TabBar) GetTabOffset() int64 {
	return self.Runtime.TabBar_get_tab_offset(self)
}
func (self TabBar) GetOffsetButtonsVisible() bool {
	return self.Runtime.TabBar_get_offset_buttons_visible(self)
}
func (self TabBar) EnsureTabVisible(idx int64) {
	self.Runtime.TabBar_ensure_tab_visible(self, idx)
}
func (self TabBar) GetTabRect(tab_idx int64) Rect2 {
	return self.Runtime.TabBar_get_tab_rect(self, tab_idx)
}
func (self TabBar) MoveTab(from int64, to int64) {
	self.Runtime.TabBar_move_tab(self, from, to)
}
func (self TabBar) SetTabCloseDisplayPolicy(policy TabBarCloseButtonDisplayPolicy) {
	self.Runtime.TabBar_set_tab_close_display_policy(self, policy)
}
func (self TabBar) GetTabCloseDisplayPolicy() TabBarCloseButtonDisplayPolicy {
	return self.Runtime.TabBar_get_tab_close_display_policy(self)
}
func (self TabBar) SetMaxTabWidth(width int64) {
	self.Runtime.TabBar_set_max_tab_width(self, width)
}
func (self TabBar) GetMaxTabWidth() int64 {
	return self.Runtime.TabBar_get_max_tab_width(self)
}
func (self TabBar) SetScrollingEnabled(enabled bool) {
	self.Runtime.TabBar_set_scrolling_enabled(self, enabled)
}
func (self TabBar) GetScrollingEnabled() bool {
	return self.Runtime.TabBar_get_scrolling_enabled(self)
}
func (self TabBar) SetDragToRearrangeEnabled(enabled bool) {
	self.Runtime.TabBar_set_drag_to_rearrange_enabled(self, enabled)
}
func (self TabBar) GetDragToRearrangeEnabled() bool {
	return self.Runtime.TabBar_get_drag_to_rearrange_enabled(self)
}
func (self TabBar) SetTabsRearrangeGroup(group_id int64) {
	self.Runtime.TabBar_set_tabs_rearrange_group(self, group_id)
}
func (self TabBar) GetTabsRearrangeGroup() int64 {
	return self.Runtime.TabBar_get_tabs_rearrange_group(self)
}
func (self TabBar) SetScrollToSelected(enabled bool) {
	self.Runtime.TabBar_set_scroll_to_selected(self, enabled)
}
func (self TabBar) GetScrollToSelected() bool {
	return self.Runtime.TabBar_get_scroll_to_selected(self)
}
func (self TabBar) SetSelectWithRmb(enabled bool) {
	self.Runtime.TabBar_set_select_with_rmb(self, enabled)
}
func (self TabBar) GetSelectWithRmb() bool {
	return self.Runtime.TabBar_get_select_with_rmb(self)
}
func (self TabBar) ClearTabs() {
	self.Runtime.TabBar_clear_tabs(self)
}

type extendsTabContainer struct {
	_ [0]*extendsTabContainer
	class
}

func (self TabContainer) Container() Container {
	var parent Container
	parent.class = self.class
	return parent
}
func (self TabContainer) GetTabCount() int64 {
	return self.Runtime.TabContainer_get_tab_count(self)
}
func (self TabContainer) SetCurrentTab(tab_idx int64) {
	self.Runtime.TabContainer_set_current_tab(self, tab_idx)
}
func (self TabContainer) GetCurrentTab() int64 {
	return self.Runtime.TabContainer_get_current_tab(self)
}
func (self TabContainer) GetPreviousTab() int64 {
	return self.Runtime.TabContainer_get_previous_tab(self)
}
func (self TabContainer) SelectPreviousAvailable() bool {
	return self.Runtime.TabContainer_select_previous_available(self)
}
func (self TabContainer) SelectNextAvailable() bool {
	return self.Runtime.TabContainer_select_next_available(self)
}
func (self TabContainer) GetCurrentTabControl() Control {
	return self.Runtime.TabContainer_get_current_tab_control(self)
}
func (self TabContainer) GetTabBar() TabBar {
	return self.Runtime.TabContainer_get_tab_bar(self)
}
func (self TabContainer) GetTabControl(tab_idx int64) Control {
	return self.Runtime.TabContainer_get_tab_control(self, tab_idx)
}
func (self TabContainer) SetTabAlignment(alignment TabBarAlignmentMode) {
	self.Runtime.TabContainer_set_tab_alignment(self, alignment)
}
func (self TabContainer) GetTabAlignment() TabBarAlignmentMode {
	return self.Runtime.TabContainer_get_tab_alignment(self)
}
func (self TabContainer) SetClipTabs(clip_tabs bool) {
	self.Runtime.TabContainer_set_clip_tabs(self, clip_tabs)
}
func (self TabContainer) GetClipTabs() bool {
	return self.Runtime.TabContainer_get_clip_tabs(self)
}
func (self TabContainer) SetTabsVisible(visible bool) {
	self.Runtime.TabContainer_set_tabs_visible(self, visible)
}
func (self TabContainer) AreTabsVisible() bool {
	return self.Runtime.TabContainer_are_tabs_visible(self)
}
func (self TabContainer) SetAllTabsInFront(is_front bool) {
	self.Runtime.TabContainer_set_all_tabs_in_front(self, is_front)
}
func (self TabContainer) IsAllTabsInFront() bool {
	return self.Runtime.TabContainer_is_all_tabs_in_front(self)
}
func (self TabContainer) SetTabTitle(tab_idx int64, title string) {
	self.Runtime.TabContainer_set_tab_title(self, tab_idx, title)
}
func (self TabContainer) GetTabTitle(tab_idx int64) string {
	return self.Runtime.TabContainer_get_tab_title(self, tab_idx)
}
func (self TabContainer) SetTabIcon(tab_idx int64, icon Texture2D) {
	self.Runtime.TabContainer_set_tab_icon(self, tab_idx, icon)
}
func (self TabContainer) GetTabIcon(tab_idx int64) Texture2D {
	return self.Runtime.TabContainer_get_tab_icon(self, tab_idx)
}
func (self TabContainer) SetTabDisabled(tab_idx int64, disabled bool) {
	self.Runtime.TabContainer_set_tab_disabled(self, tab_idx, disabled)
}
func (self TabContainer) IsTabDisabled(tab_idx int64) bool {
	return self.Runtime.TabContainer_is_tab_disabled(self, tab_idx)
}
func (self TabContainer) SetTabHidden(tab_idx int64, hidden bool) {
	self.Runtime.TabContainer_set_tab_hidden(self, tab_idx, hidden)
}
func (self TabContainer) IsTabHidden(tab_idx int64) bool {
	return self.Runtime.TabContainer_is_tab_hidden(self, tab_idx)
}
func (self TabContainer) SetTabMetadata(tab_idx int64, metadata any) {
	self.Runtime.TabContainer_set_tab_metadata(self, tab_idx, metadata)
}
func (self TabContainer) GetTabMetadata(tab_idx int64) any {
	return self.Runtime.TabContainer_get_tab_metadata(self, tab_idx)
}
func (self TabContainer) SetTabButtonIcon(tab_idx int64, icon Texture2D) {
	self.Runtime.TabContainer_set_tab_button_icon(self, tab_idx, icon)
}
func (self TabContainer) GetTabButtonIcon(tab_idx int64) Texture2D {
	return self.Runtime.TabContainer_get_tab_button_icon(self, tab_idx)
}
func (self TabContainer) GetTabIdxAtPoint(point Vector2) int64 {
	return self.Runtime.TabContainer_get_tab_idx_at_point(self, point)
}
func (self TabContainer) GetTabIdxFromControl(control Control) int64 {
	return self.Runtime.TabContainer_get_tab_idx_from_control(self, control)
}
func (self TabContainer) SetPopup(popup Node) {
	self.Runtime.TabContainer_set_popup(self, popup)
}
func (self TabContainer) GetPopup() Popup {
	return self.Runtime.TabContainer_get_popup(self)
}
func (self TabContainer) SetDragToRearrangeEnabled(enabled bool) {
	self.Runtime.TabContainer_set_drag_to_rearrange_enabled(self, enabled)
}
func (self TabContainer) GetDragToRearrangeEnabled() bool {
	return self.Runtime.TabContainer_get_drag_to_rearrange_enabled(self)
}
func (self TabContainer) SetTabsRearrangeGroup(group_id int64) {
	self.Runtime.TabContainer_set_tabs_rearrange_group(self, group_id)
}
func (self TabContainer) GetTabsRearrangeGroup() int64 {
	return self.Runtime.TabContainer_get_tabs_rearrange_group(self)
}
func (self TabContainer) SetUseHiddenTabsForMinSize(enabled bool) {
	self.Runtime.TabContainer_set_use_hidden_tabs_for_min_size(self, enabled)
}
func (self TabContainer) GetUseHiddenTabsForMinSize() bool {
	return self.Runtime.TabContainer_get_use_hidden_tabs_for_min_size(self)
}
func (self TabContainer) SetTabFocusMode(focus_mode ControlFocusMode) {
	self.Runtime.TabContainer_set_tab_focus_mode(self, focus_mode)
}
func (self TabContainer) GetTabFocusMode() ControlFocusMode {
	return self.Runtime.TabContainer_get_tab_focus_mode(self)
}

type extendsTextEdit struct {
	_ [0]*extendsTextEdit
	class
}

func (self TextEdit) Control() Control { var parent Control; parent.class = self.class; return parent }
func (self TextEdit) HasImeText() bool {
	return self.Runtime.TextEdit_has_ime_text(self)
}
func (self TextEdit) SetEditable(enabled bool) {
	self.Runtime.TextEdit_set_editable(self, enabled)
}
func (self TextEdit) IsEditable() bool {
	return self.Runtime.TextEdit_is_editable(self)
}
func (self TextEdit) SetTextDirection(direction ControlTextDirection) {
	self.Runtime.TextEdit_set_text_direction(self, direction)
}
func (self TextEdit) GetTextDirection() ControlTextDirection {
	return self.Runtime.TextEdit_get_text_direction(self)
}
func (self TextEdit) SetLanguage(language string) {
	self.Runtime.TextEdit_set_language(self, language)
}
func (self TextEdit) GetLanguage() string {
	return self.Runtime.TextEdit_get_language(self)
}
func (self TextEdit) SetStructuredTextBidiOverride(parser TextServerStructuredTextParser) {
	self.Runtime.TextEdit_set_structured_text_bidi_override(self, parser)
}
func (self TextEdit) GetStructuredTextBidiOverride() TextServerStructuredTextParser {
	return self.Runtime.TextEdit_get_structured_text_bidi_override(self)
}
func (self TextEdit) SetStructuredTextBidiOverrideOptions(args Array) {
	self.Runtime.TextEdit_set_structured_text_bidi_override_options(self, args)
}
func (self TextEdit) GetStructuredTextBidiOverrideOptions() Array {
	return self.Runtime.TextEdit_get_structured_text_bidi_override_options(self)
}
func (self TextEdit) SetTabSize(size int64) {
	self.Runtime.TextEdit_set_tab_size(self, size)
}
func (self TextEdit) GetTabSize() int64 {
	return self.Runtime.TextEdit_get_tab_size(self)
}
func (self TextEdit) SetOvertypeModeEnabled(enabled bool) {
	self.Runtime.TextEdit_set_overtype_mode_enabled(self, enabled)
}
func (self TextEdit) IsOvertypeModeEnabled() bool {
	return self.Runtime.TextEdit_is_overtype_mode_enabled(self)
}
func (self TextEdit) SetContextMenuEnabled(enabled bool) {
	self.Runtime.TextEdit_set_context_menu_enabled(self, enabled)
}
func (self TextEdit) IsContextMenuEnabled() bool {
	return self.Runtime.TextEdit_is_context_menu_enabled(self)
}
func (self TextEdit) SetShortcutKeysEnabled(enabled bool) {
	self.Runtime.TextEdit_set_shortcut_keys_enabled(self, enabled)
}
func (self TextEdit) IsShortcutKeysEnabled() bool {
	return self.Runtime.TextEdit_is_shortcut_keys_enabled(self)
}
func (self TextEdit) SetVirtualKeyboardEnabled(enabled bool) {
	self.Runtime.TextEdit_set_virtual_keyboard_enabled(self, enabled)
}
func (self TextEdit) IsVirtualKeyboardEnabled() bool {
	return self.Runtime.TextEdit_is_virtual_keyboard_enabled(self)
}
func (self TextEdit) SetMiddleMousePasteEnabled(enabled bool) {
	self.Runtime.TextEdit_set_middle_mouse_paste_enabled(self, enabled)
}
func (self TextEdit) IsMiddleMousePasteEnabled() bool {
	return self.Runtime.TextEdit_is_middle_mouse_paste_enabled(self)
}
func (self TextEdit) Clear() {
	self.Runtime.TextEdit_clear(self)
}
func (self TextEdit) SetText(text string) {
	self.Runtime.TextEdit_set_text(self, text)
}
func (self TextEdit) GetText() string {
	return self.Runtime.TextEdit_get_text(self)
}
func (self TextEdit) GetLineCount() int64 {
	return self.Runtime.TextEdit_get_line_count(self)
}
func (self TextEdit) SetPlaceholder(text string) {
	self.Runtime.TextEdit_set_placeholder(self, text)
}
func (self TextEdit) GetPlaceholder() string {
	return self.Runtime.TextEdit_get_placeholder(self)
}
func (self TextEdit) SetLine(line int64, new_text string) {
	self.Runtime.TextEdit_set_line(self, line, new_text)
}
func (self TextEdit) GetLine(line int64) string {
	return self.Runtime.TextEdit_get_line(self, line)
}
func (self TextEdit) GetLineWidth(line int64, wrap_index int64) int64 {
	return self.Runtime.TextEdit_get_line_width(self, line, wrap_index)
}
func (self TextEdit) GetLineHeight() int64 {
	return self.Runtime.TextEdit_get_line_height(self)
}
func (self TextEdit) GetIndentLevel(line int64) int64 {
	return self.Runtime.TextEdit_get_indent_level(self, line)
}
func (self TextEdit) GetFirstNonWhitespaceColumn(line int64) int64 {
	return self.Runtime.TextEdit_get_first_non_whitespace_column(self, line)
}
func (self TextEdit) SwapLines(from_line int64, to_line int64) {
	self.Runtime.TextEdit_swap_lines(self, from_line, to_line)
}
func (self TextEdit) InsertLineAt(line int64, text string) {
	self.Runtime.TextEdit_insert_line_at(self, line, text)
}
func (self TextEdit) InsertTextAtCaret(text string, caret_index int64) {
	self.Runtime.TextEdit_insert_text_at_caret(self, text, caret_index)
}
func (self TextEdit) RemoveText(from_line int64, from_column int64, to_line int64, to_column int64) {
	self.Runtime.TextEdit_remove_text(self, from_line, from_column, to_line, to_column)
}
func (self TextEdit) GetLastUnhiddenLine() int64 {
	return self.Runtime.TextEdit_get_last_unhidden_line(self)
}
func (self TextEdit) GetNextVisibleLineOffsetFrom(line int64, visible_amount int64) int64 {
	return self.Runtime.TextEdit_get_next_visible_line_offset_from(self, line, visible_amount)
}
func (self TextEdit) GetNextVisibleLineIndexOffsetFrom(line int64, wrap_index int64, visible_amount int64) Vector2i {
	return self.Runtime.TextEdit_get_next_visible_line_index_offset_from(self, line, wrap_index, visible_amount)
}
func (self TextEdit) Backspace(caret_index int64) {
	self.Runtime.TextEdit_backspace(self, caret_index)
}
func (self TextEdit) Cut(caret_index int64) {
	self.Runtime.TextEdit_cut(self, caret_index)
}
func (self TextEdit) Copy(caret_index int64) {
	self.Runtime.TextEdit_copy(self, caret_index)
}
func (self TextEdit) Paste(caret_index int64) {
	self.Runtime.TextEdit_paste(self, caret_index)
}
func (self TextEdit) PastePrimaryClipboard(caret_index int64) {
	self.Runtime.TextEdit_paste_primary_clipboard(self, caret_index)
}
func (self TextEdit) StartAction(action TextEditEditAction) {
	self.Runtime.TextEdit_start_action(self, action)
}
func (self TextEdit) EndAction() {
	self.Runtime.TextEdit_end_action(self)
}
func (self TextEdit) BeginComplexOperation() {
	self.Runtime.TextEdit_begin_complex_operation(self)
}
func (self TextEdit) EndComplexOperation() {
	self.Runtime.TextEdit_end_complex_operation(self)
}
func (self TextEdit) HasUndo() bool {
	return self.Runtime.TextEdit_has_undo(self)
}
func (self TextEdit) HasRedo() bool {
	return self.Runtime.TextEdit_has_redo(self)
}
func (self TextEdit) Undo() {
	self.Runtime.TextEdit_undo(self)
}
func (self TextEdit) Redo() {
	self.Runtime.TextEdit_redo(self)
}
func (self TextEdit) ClearUndoHistory() {
	self.Runtime.TextEdit_clear_undo_history(self)
}
func (self TextEdit) TagSavedVersion() {
	self.Runtime.TextEdit_tag_saved_version(self)
}
func (self TextEdit) GetVersion() int64 {
	return self.Runtime.TextEdit_get_version(self)
}
func (self TextEdit) GetSavedVersion() int64 {
	return self.Runtime.TextEdit_get_saved_version(self)
}
func (self TextEdit) SetSearchText(search_text string) {
	self.Runtime.TextEdit_set_search_text(self, search_text)
}
func (self TextEdit) SetSearchFlags(flags int64) {
	self.Runtime.TextEdit_set_search_flags(self, flags)
}
func (self TextEdit) Search(text string, flags int64, from_line int64, from_colum int64) Vector2i {
	return self.Runtime.TextEdit_search(self, text, flags, from_line, from_colum)
}
func (self TextEdit) SetTooltipRequestFunc(callback Callable) {
	self.Runtime.TextEdit_set_tooltip_request_func(self, callback)
}
func (self TextEdit) GetLocalMousePos() Vector2 {
	return self.Runtime.TextEdit_get_local_mouse_pos(self)
}
func (self TextEdit) GetWordAtPos(position Vector2) string {
	return self.Runtime.TextEdit_get_word_at_pos(self, position)
}
func (self TextEdit) GetLineColumnAtPos(position Vector2i, allow_out_of_bounds bool) Vector2i {
	return self.Runtime.TextEdit_get_line_column_at_pos(self, position, allow_out_of_bounds)
}
func (self TextEdit) GetPosAtLineColumn(line int64, column int64) Vector2i {
	return self.Runtime.TextEdit_get_pos_at_line_column(self, line, column)
}
func (self TextEdit) GetRectAtLineColumn(line int64, column int64) Rect2i {
	return self.Runtime.TextEdit_get_rect_at_line_column(self, line, column)
}
func (self TextEdit) GetMinimapLineAtPos(position Vector2i) int64 {
	return self.Runtime.TextEdit_get_minimap_line_at_pos(self, position)
}
func (self TextEdit) IsDraggingCursor() bool {
	return self.Runtime.TextEdit_is_dragging_cursor(self)
}
func (self TextEdit) IsMouseOverSelection(edges bool, caret_index int64) bool {
	return self.Runtime.TextEdit_is_mouse_over_selection(self, edges, caret_index)
}
func (self TextEdit) SetCaretType(atype TextEditCaretType) {
	self.Runtime.TextEdit_set_caret_type(self, atype)
}
func (self TextEdit) GetCaretType() TextEditCaretType {
	return self.Runtime.TextEdit_get_caret_type(self)
}
func (self TextEdit) SetCaretBlinkEnabled(enable bool) {
	self.Runtime.TextEdit_set_caret_blink_enabled(self, enable)
}
func (self TextEdit) IsCaretBlinkEnabled() bool {
	return self.Runtime.TextEdit_is_caret_blink_enabled(self)
}
func (self TextEdit) SetCaretBlinkInterval(interval Float) {
	self.Runtime.TextEdit_set_caret_blink_interval(self, interval)
}
func (self TextEdit) GetCaretBlinkInterval() Float {
	return self.Runtime.TextEdit_get_caret_blink_interval(self)
}
func (self TextEdit) SetDrawCaretWhenEditableDisabled(enable bool) {
	self.Runtime.TextEdit_set_draw_caret_when_editable_disabled(self, enable)
}
func (self TextEdit) IsDrawingCaretWhenEditableDisabled() bool {
	return self.Runtime.TextEdit_is_drawing_caret_when_editable_disabled(self)
}
func (self TextEdit) SetMoveCaretOnRightClickEnabled(enable bool) {
	self.Runtime.TextEdit_set_move_caret_on_right_click_enabled(self, enable)
}
func (self TextEdit) IsMoveCaretOnRightClickEnabled() bool {
	return self.Runtime.TextEdit_is_move_caret_on_right_click_enabled(self)
}
func (self TextEdit) SetCaretMidGraphemeEnabled(enabled bool) {
	self.Runtime.TextEdit_set_caret_mid_grapheme_enabled(self, enabled)
}
func (self TextEdit) IsCaretMidGraphemeEnabled() bool {
	return self.Runtime.TextEdit_is_caret_mid_grapheme_enabled(self)
}
func (self TextEdit) SetMultipleCaretsEnabled(enabled bool) {
	self.Runtime.TextEdit_set_multiple_carets_enabled(self, enabled)
}
func (self TextEdit) IsMultipleCaretsEnabled() bool {
	return self.Runtime.TextEdit_is_multiple_carets_enabled(self)
}
func (self TextEdit) AddCaret(line int64, col int64) int64 {
	return self.Runtime.TextEdit_add_caret(self, line, col)
}
func (self TextEdit) RemoveCaret(caret int64) {
	self.Runtime.TextEdit_remove_caret(self, caret)
}
func (self TextEdit) RemoveSecondaryCarets() {
	self.Runtime.TextEdit_remove_secondary_carets(self)
}
func (self TextEdit) MergeOverlappingCarets() {
	self.Runtime.TextEdit_merge_overlapping_carets(self)
}
func (self TextEdit) GetCaretCount() int64 {
	return self.Runtime.TextEdit_get_caret_count(self)
}
func (self TextEdit) AddCaretAtCarets(below bool) {
	self.Runtime.TextEdit_add_caret_at_carets(self, below)
}
func (self TextEdit) GetCaretIndexEditOrder() PackedInt32Array {
	return self.Runtime.TextEdit_get_caret_index_edit_order(self)
}
func (self TextEdit) AdjustCaretsAfterEdit(caret int64, from_line int64, from_col int64, to_line int64, to_col int64) {
	self.Runtime.TextEdit_adjust_carets_after_edit(self, caret, from_line, from_col, to_line, to_col)
}
func (self TextEdit) IsCaretVisible(caret_index int64) bool {
	return self.Runtime.TextEdit_is_caret_visible(self, caret_index)
}
func (self TextEdit) GetCaretDrawPos(caret_index int64) Vector2 {
	return self.Runtime.TextEdit_get_caret_draw_pos(self, caret_index)
}
func (self TextEdit) SetCaretLine(line int64, adjust_viewport bool, can_be_hidden bool, wrap_index int64, caret_index int64) {
	self.Runtime.TextEdit_set_caret_line(self, line, adjust_viewport, can_be_hidden, wrap_index, caret_index)
}
func (self TextEdit) GetCaretLine(caret_index int64) int64 {
	return self.Runtime.TextEdit_get_caret_line(self, caret_index)
}
func (self TextEdit) SetCaretColumn(column int64, adjust_viewport bool, caret_index int64) {
	self.Runtime.TextEdit_set_caret_column(self, column, adjust_viewport, caret_index)
}
func (self TextEdit) GetCaretColumn(caret_index int64) int64 {
	return self.Runtime.TextEdit_get_caret_column(self, caret_index)
}
func (self TextEdit) GetCaretWrapIndex(caret_index int64) int64 {
	return self.Runtime.TextEdit_get_caret_wrap_index(self, caret_index)
}
func (self TextEdit) GetWordUnderCaret(caret_index int64) string {
	return self.Runtime.TextEdit_get_word_under_caret(self, caret_index)
}
func (self TextEdit) SetSelectingEnabled(enable bool) {
	self.Runtime.TextEdit_set_selecting_enabled(self, enable)
}
func (self TextEdit) IsSelectingEnabled() bool {
	return self.Runtime.TextEdit_is_selecting_enabled(self)
}
func (self TextEdit) SetDeselectOnFocusLossEnabled(enable bool) {
	self.Runtime.TextEdit_set_deselect_on_focus_loss_enabled(self, enable)
}
func (self TextEdit) IsDeselectOnFocusLossEnabled() bool {
	return self.Runtime.TextEdit_is_deselect_on_focus_loss_enabled(self)
}
func (self TextEdit) SetDragAndDropSelectionEnabled(enable bool) {
	self.Runtime.TextEdit_set_drag_and_drop_selection_enabled(self, enable)
}
func (self TextEdit) IsDragAndDropSelectionEnabled() bool {
	return self.Runtime.TextEdit_is_drag_and_drop_selection_enabled(self)
}
func (self TextEdit) SetSelectionMode(mode TextEditSelectionMode, line int64, column int64, caret_index int64) {
	self.Runtime.TextEdit_set_selection_mode(self, mode, line, column, caret_index)
}
func (self TextEdit) GetSelectionMode() TextEditSelectionMode {
	return self.Runtime.TextEdit_get_selection_mode(self)
}
func (self TextEdit) SelectAll() {
	self.Runtime.TextEdit_select_all(self)
}
func (self TextEdit) SelectWordUnderCaret(caret_index int64) {
	self.Runtime.TextEdit_select_word_under_caret(self, caret_index)
}
func (self TextEdit) AddSelectionForNextOccurrence() {
	self.Runtime.TextEdit_add_selection_for_next_occurrence(self)
}
func (self TextEdit) Select(from_line int64, from_column int64, to_line int64, to_column int64, caret_index int64) {
	self.Runtime.TextEdit_select(self, from_line, from_column, to_line, to_column, caret_index)
}
func (self TextEdit) HasSelection(caret_index int64) bool {
	return self.Runtime.TextEdit_has_selection(self, caret_index)
}
func (self TextEdit) GetSelectedText(caret_index int64) string {
	return self.Runtime.TextEdit_get_selected_text(self, caret_index)
}
func (self TextEdit) GetSelectionLine(caret_index int64) int64 {
	return self.Runtime.TextEdit_get_selection_line(self, caret_index)
}
func (self TextEdit) GetSelectionColumn(caret_index int64) int64 {
	return self.Runtime.TextEdit_get_selection_column(self, caret_index)
}
func (self TextEdit) GetSelectionFromLine(caret_index int64) int64 {
	return self.Runtime.TextEdit_get_selection_from_line(self, caret_index)
}
func (self TextEdit) GetSelectionFromColumn(caret_index int64) int64 {
	return self.Runtime.TextEdit_get_selection_from_column(self, caret_index)
}
func (self TextEdit) GetSelectionToLine(caret_index int64) int64 {
	return self.Runtime.TextEdit_get_selection_to_line(self, caret_index)
}
func (self TextEdit) GetSelectionToColumn(caret_index int64) int64 {
	return self.Runtime.TextEdit_get_selection_to_column(self, caret_index)
}
func (self TextEdit) Deselect(caret_index int64) {
	self.Runtime.TextEdit_deselect(self, caret_index)
}
func (self TextEdit) DeleteSelection(caret_index int64) {
	self.Runtime.TextEdit_delete_selection(self, caret_index)
}
func (self TextEdit) SetLineWrappingMode(mode TextEditLineWrappingMode) {
	self.Runtime.TextEdit_set_line_wrapping_mode(self, mode)
}
func (self TextEdit) GetLineWrappingMode() TextEditLineWrappingMode {
	return self.Runtime.TextEdit_get_line_wrapping_mode(self)
}
func (self TextEdit) SetAutowrapMode(autowrap_mode TextServerAutowrapMode) {
	self.Runtime.TextEdit_set_autowrap_mode(self, autowrap_mode)
}
func (self TextEdit) GetAutowrapMode() TextServerAutowrapMode {
	return self.Runtime.TextEdit_get_autowrap_mode(self)
}
func (self TextEdit) IsLineWrapped(line int64) bool {
	return self.Runtime.TextEdit_is_line_wrapped(self, line)
}
func (self TextEdit) GetLineWrapCount(line int64) int64 {
	return self.Runtime.TextEdit_get_line_wrap_count(self, line)
}
func (self TextEdit) GetLineWrapIndexAtColumn(line int64, column int64) int64 {
	return self.Runtime.TextEdit_get_line_wrap_index_at_column(self, line, column)
}
func (self TextEdit) GetLineWrappedText(line int64) PackedStringArray {
	return self.Runtime.TextEdit_get_line_wrapped_text(self, line)
}
func (self TextEdit) SetSmoothScrollEnabled(enable bool) {
	self.Runtime.TextEdit_set_smooth_scroll_enabled(self, enable)
}
func (self TextEdit) IsSmoothScrollEnabled() bool {
	return self.Runtime.TextEdit_is_smooth_scroll_enabled(self)
}
func (self TextEdit) GetVScrollBar() VScrollBar {
	return self.Runtime.TextEdit_get_v_scroll_bar(self)
}
func (self TextEdit) GetHScrollBar() HScrollBar {
	return self.Runtime.TextEdit_get_h_scroll_bar(self)
}
func (self TextEdit) SetVScroll(value Float) {
	self.Runtime.TextEdit_set_v_scroll(self, value)
}
func (self TextEdit) GetVScroll() Float {
	return self.Runtime.TextEdit_get_v_scroll(self)
}
func (self TextEdit) SetHScroll(value int64) {
	self.Runtime.TextEdit_set_h_scroll(self, value)
}
func (self TextEdit) GetHScroll() int64 {
	return self.Runtime.TextEdit_get_h_scroll(self)
}
func (self TextEdit) SetScrollPastEndOfFileEnabled(enable bool) {
	self.Runtime.TextEdit_set_scroll_past_end_of_file_enabled(self, enable)
}
func (self TextEdit) IsScrollPastEndOfFileEnabled() bool {
	return self.Runtime.TextEdit_is_scroll_past_end_of_file_enabled(self)
}
func (self TextEdit) SetVScrollSpeed(speed Float) {
	self.Runtime.TextEdit_set_v_scroll_speed(self, speed)
}
func (self TextEdit) GetVScrollSpeed() Float {
	return self.Runtime.TextEdit_get_v_scroll_speed(self)
}
func (self TextEdit) SetFitContentHeightEnabled(enabled bool) {
	self.Runtime.TextEdit_set_fit_content_height_enabled(self, enabled)
}
func (self TextEdit) IsFitContentHeightEnabled() bool {
	return self.Runtime.TextEdit_is_fit_content_height_enabled(self)
}
func (self TextEdit) GetScrollPosForLine(line int64, wrap_index int64) Float {
	return self.Runtime.TextEdit_get_scroll_pos_for_line(self, line, wrap_index)
}
func (self TextEdit) SetLineAsFirstVisible(line int64, wrap_index int64) {
	self.Runtime.TextEdit_set_line_as_first_visible(self, line, wrap_index)
}
func (self TextEdit) GetFirstVisibleLine() int64 {
	return self.Runtime.TextEdit_get_first_visible_line(self)
}
func (self TextEdit) SetLineAsCenterVisible(line int64, wrap_index int64) {
	self.Runtime.TextEdit_set_line_as_center_visible(self, line, wrap_index)
}
func (self TextEdit) SetLineAsLastVisible(line int64, wrap_index int64) {
	self.Runtime.TextEdit_set_line_as_last_visible(self, line, wrap_index)
}
func (self TextEdit) GetLastFullVisibleLine() int64 {
	return self.Runtime.TextEdit_get_last_full_visible_line(self)
}
func (self TextEdit) GetLastFullVisibleLineWrapIndex() int64 {
	return self.Runtime.TextEdit_get_last_full_visible_line_wrap_index(self)
}
func (self TextEdit) GetVisibleLineCount() int64 {
	return self.Runtime.TextEdit_get_visible_line_count(self)
}
func (self TextEdit) GetVisibleLineCountInRange(from_line int64, to_line int64) int64 {
	return self.Runtime.TextEdit_get_visible_line_count_in_range(self, from_line, to_line)
}
func (self TextEdit) GetTotalVisibleLineCount() int64 {
	return self.Runtime.TextEdit_get_total_visible_line_count(self)
}
func (self TextEdit) AdjustViewportToCaret(caret_index int64) {
	self.Runtime.TextEdit_adjust_viewport_to_caret(self, caret_index)
}
func (self TextEdit) CenterViewportToCaret(caret_index int64) {
	self.Runtime.TextEdit_center_viewport_to_caret(self, caret_index)
}
func (self TextEdit) SetDrawMinimap(enabled bool) {
	self.Runtime.TextEdit_set_draw_minimap(self, enabled)
}
func (self TextEdit) IsDrawingMinimap() bool {
	return self.Runtime.TextEdit_is_drawing_minimap(self)
}
func (self TextEdit) SetMinimapWidth(width int64) {
	self.Runtime.TextEdit_set_minimap_width(self, width)
}
func (self TextEdit) GetMinimapWidth() int64 {
	return self.Runtime.TextEdit_get_minimap_width(self)
}
func (self TextEdit) GetMinimapVisibleLines() int64 {
	return self.Runtime.TextEdit_get_minimap_visible_lines(self)
}
func (self TextEdit) AddGutter(at int64) {
	self.Runtime.TextEdit_add_gutter(self, at)
}
func (self TextEdit) RemoveGutter(gutter int64) {
	self.Runtime.TextEdit_remove_gutter(self, gutter)
}
func (self TextEdit) GetGutterCount() int64 {
	return self.Runtime.TextEdit_get_gutter_count(self)
}
func (self TextEdit) SetGutterName(gutter int64, name string) {
	self.Runtime.TextEdit_set_gutter_name(self, gutter, name)
}
func (self TextEdit) GetGutterName(gutter int64) string {
	return self.Runtime.TextEdit_get_gutter_name(self, gutter)
}
func (self TextEdit) SetGutterType(gutter int64, atype TextEditGutterType) {
	self.Runtime.TextEdit_set_gutter_type(self, gutter, atype)
}
func (self TextEdit) GetGutterType(gutter int64) TextEditGutterType {
	return self.Runtime.TextEdit_get_gutter_type(self, gutter)
}
func (self TextEdit) SetGutterWidth(gutter int64, width int64) {
	self.Runtime.TextEdit_set_gutter_width(self, gutter, width)
}
func (self TextEdit) GetGutterWidth(gutter int64) int64 {
	return self.Runtime.TextEdit_get_gutter_width(self, gutter)
}
func (self TextEdit) SetGutterDraw(gutter int64, draw bool) {
	self.Runtime.TextEdit_set_gutter_draw(self, gutter, draw)
}
func (self TextEdit) IsGutterDrawn(gutter int64) bool {
	return self.Runtime.TextEdit_is_gutter_drawn(self, gutter)
}
func (self TextEdit) SetGutterClickable(gutter int64, clickable bool) {
	self.Runtime.TextEdit_set_gutter_clickable(self, gutter, clickable)
}
func (self TextEdit) IsGutterClickable(gutter int64) bool {
	return self.Runtime.TextEdit_is_gutter_clickable(self, gutter)
}
func (self TextEdit) SetGutterOverwritable(gutter int64, overwritable bool) {
	self.Runtime.TextEdit_set_gutter_overwritable(self, gutter, overwritable)
}
func (self TextEdit) IsGutterOverwritable(gutter int64) bool {
	return self.Runtime.TextEdit_is_gutter_overwritable(self, gutter)
}
func (self TextEdit) MergeGutters(from_line int64, to_line int64) {
	self.Runtime.TextEdit_merge_gutters(self, from_line, to_line)
}
func (self TextEdit) SetGutterCustomDraw(column int64, draw_callback Callable) {
	self.Runtime.TextEdit_set_gutter_custom_draw(self, column, draw_callback)
}
func (self TextEdit) GetTotalGutterWidth() int64 {
	return self.Runtime.TextEdit_get_total_gutter_width(self)
}
func (self TextEdit) SetLineGutterMetadata(line int64, gutter int64, metadata any) {
	self.Runtime.TextEdit_set_line_gutter_metadata(self, line, gutter, metadata)
}
func (self TextEdit) GetLineGutterMetadata(line int64, gutter int64) any {
	return self.Runtime.TextEdit_get_line_gutter_metadata(self, line, gutter)
}
func (self TextEdit) SetLineGutterText(line int64, gutter int64, text string) {
	self.Runtime.TextEdit_set_line_gutter_text(self, line, gutter, text)
}
func (self TextEdit) GetLineGutterText(line int64, gutter int64) string {
	return self.Runtime.TextEdit_get_line_gutter_text(self, line, gutter)
}
func (self TextEdit) SetLineGutterIcon(line int64, gutter int64, icon Texture2D) {
	self.Runtime.TextEdit_set_line_gutter_icon(self, line, gutter, icon)
}
func (self TextEdit) GetLineGutterIcon(line int64, gutter int64) Texture2D {
	return self.Runtime.TextEdit_get_line_gutter_icon(self, line, gutter)
}
func (self TextEdit) SetLineGutterItemColor(line int64, gutter int64, color Color) {
	self.Runtime.TextEdit_set_line_gutter_item_color(self, line, gutter, color)
}
func (self TextEdit) GetLineGutterItemColor(line int64, gutter int64) Color {
	return self.Runtime.TextEdit_get_line_gutter_item_color(self, line, gutter)
}
func (self TextEdit) SetLineGutterClickable(line int64, gutter int64, clickable bool) {
	self.Runtime.TextEdit_set_line_gutter_clickable(self, line, gutter, clickable)
}
func (self TextEdit) IsLineGutterClickable(line int64, gutter int64) bool {
	return self.Runtime.TextEdit_is_line_gutter_clickable(self, line, gutter)
}
func (self TextEdit) SetLineBackgroundColor(line int64, color Color) {
	self.Runtime.TextEdit_set_line_background_color(self, line, color)
}
func (self TextEdit) GetLineBackgroundColor(line int64) Color {
	return self.Runtime.TextEdit_get_line_background_color(self, line)
}
func (self TextEdit) SetSyntaxHighlighter(syntax_highlighter SyntaxHighlighter) {
	self.Runtime.TextEdit_set_syntax_highlighter(self, syntax_highlighter)
}
func (self TextEdit) GetSyntaxHighlighter() SyntaxHighlighter {
	return self.Runtime.TextEdit_get_syntax_highlighter(self)
}
func (self TextEdit) SetHighlightCurrentLine(enabled bool) {
	self.Runtime.TextEdit_set_highlight_current_line(self, enabled)
}
func (self TextEdit) IsHighlightCurrentLineEnabled() bool {
	return self.Runtime.TextEdit_is_highlight_current_line_enabled(self)
}
func (self TextEdit) SetHighlightAllOccurrences(enabled bool) {
	self.Runtime.TextEdit_set_highlight_all_occurrences(self, enabled)
}
func (self TextEdit) IsHighlightAllOccurrencesEnabled() bool {
	return self.Runtime.TextEdit_is_highlight_all_occurrences_enabled(self)
}
func (self TextEdit) GetDrawControlChars() bool {
	return self.Runtime.TextEdit_get_draw_control_chars(self)
}
func (self TextEdit) SetDrawControlChars(enabled bool) {
	self.Runtime.TextEdit_set_draw_control_chars(self, enabled)
}
func (self TextEdit) SetDrawTabs(enabled bool) {
	self.Runtime.TextEdit_set_draw_tabs(self, enabled)
}
func (self TextEdit) IsDrawingTabs() bool {
	return self.Runtime.TextEdit_is_drawing_tabs(self)
}
func (self TextEdit) SetDrawSpaces(enabled bool) {
	self.Runtime.TextEdit_set_draw_spaces(self, enabled)
}
func (self TextEdit) IsDrawingSpaces() bool {
	return self.Runtime.TextEdit_is_drawing_spaces(self)
}
func (self TextEdit) GetMenu() PopupMenu {
	return self.Runtime.TextEdit_get_menu(self)
}
func (self TextEdit) IsMenuVisible() bool {
	return self.Runtime.TextEdit_is_menu_visible(self)
}
func (self TextEdit) MenuOption(option int64) {
	self.Runtime.TextEdit_menu_option(self, option)
}

type extendsTextLine struct {
	_ [0]*extendsTextLine
	class
}

func (self TextLine) RefCounted() RefCounted {
	var parent RefCounted
	parent.class = self.class
	return parent
}
func (self TextLine) Clear() {
	self.Runtime.TextLine_clear(self)
}
func (self TextLine) SetDirection(direction TextServerDirection) {
	self.Runtime.TextLine_set_direction(self, direction)
}
func (self TextLine) GetDirection() TextServerDirection {
	return self.Runtime.TextLine_get_direction(self)
}
func (self TextLine) SetOrientation(orientation TextServerOrientation) {
	self.Runtime.TextLine_set_orientation(self, orientation)
}
func (self TextLine) GetOrientation() TextServerOrientation {
	return self.Runtime.TextLine_get_orientation(self)
}
func (self TextLine) SetPreserveInvalid(enabled bool) {
	self.Runtime.TextLine_set_preserve_invalid(self, enabled)
}
func (self TextLine) GetPreserveInvalid() bool {
	return self.Runtime.TextLine_get_preserve_invalid(self)
}
func (self TextLine) SetPreserveControl(enabled bool) {
	self.Runtime.TextLine_set_preserve_control(self, enabled)
}
func (self TextLine) GetPreserveControl() bool {
	return self.Runtime.TextLine_get_preserve_control(self)
}
func (self TextLine) SetBidiOverride(override Array) {
	self.Runtime.TextLine_set_bidi_override(self, override)
}
func (self TextLine) AddString(text string, font Font, font_size int64, language string, meta any) bool {
	return self.Runtime.TextLine_add_string(self, text, font, font_size, language, meta)
}
func (self TextLine) AddObject(key any, size Vector2, inline_align InlineAlignment, length int64, baseline Float) bool {
	return self.Runtime.TextLine_add_object(self, key, size, inline_align, length, baseline)
}
func (self TextLine) ResizeObject(key any, size Vector2, inline_align InlineAlignment, baseline Float) bool {
	return self.Runtime.TextLine_resize_object(self, key, size, inline_align, baseline)
}
func (self TextLine) SetWidth(width Float) {
	self.Runtime.TextLine_set_width(self, width)
}
func (self TextLine) GetWidth() Float {
	return self.Runtime.TextLine_get_width(self)
}
func (self TextLine) SetHorizontalAlignment(alignment HorizontalAlignment) {
	self.Runtime.TextLine_set_horizontal_alignment(self, alignment)
}
func (self TextLine) GetHorizontalAlignment() HorizontalAlignment {
	return self.Runtime.TextLine_get_horizontal_alignment(self)
}
func (self TextLine) TabAlign(tab_stops PackedFloat32Array) {
	self.Runtime.TextLine_tab_align(self, tab_stops)
}
func (self TextLine) SetFlags(flags TextServerJustificationFlag) {
	self.Runtime.TextLine_set_flags(self, flags)
}
func (self TextLine) GetFlags() TextServerJustificationFlag {
	return self.Runtime.TextLine_get_flags(self)
}
func (self TextLine) SetTextOverrunBehavior(overrun_behavior TextServerOverrunBehavior) {
	self.Runtime.TextLine_set_text_overrun_behavior(self, overrun_behavior)
}
func (self TextLine) GetTextOverrunBehavior() TextServerOverrunBehavior {
	return self.Runtime.TextLine_get_text_overrun_behavior(self)
}
func (self TextLine) SetEllipsisChar(char string) {
	self.Runtime.TextLine_set_ellipsis_char(self, char)
}
func (self TextLine) GetEllipsisChar() string {
	return self.Runtime.TextLine_get_ellipsis_char(self)
}
func (self TextLine) GetObjects() Array {
	return self.Runtime.TextLine_get_objects(self)
}
func (self TextLine) GetObjectRect(key any) Rect2 {
	return self.Runtime.TextLine_get_object_rect(self, key)
}
func (self TextLine) GetSize() Vector2 {
	return self.Runtime.TextLine_get_size(self)
}
func (self TextLine) GetRid() RID {
	return self.Runtime.TextLine_get_rid(self)
}
func (self TextLine) GetLineAscent() Float {
	return self.Runtime.TextLine_get_line_ascent(self)
}
func (self TextLine) GetLineDescent() Float {
	return self.Runtime.TextLine_get_line_descent(self)
}
func (self TextLine) GetLineWidth() Float {
	return self.Runtime.TextLine_get_line_width(self)
}
func (self TextLine) GetLineUnderlinePosition() Float {
	return self.Runtime.TextLine_get_line_underline_position(self)
}
func (self TextLine) GetLineUnderlineThickness() Float {
	return self.Runtime.TextLine_get_line_underline_thickness(self)
}
func (self TextLine) Draw(canvas RID, pos Vector2, color Color) {
	self.Runtime.TextLine_draw(self, canvas, pos, color)
}
func (self TextLine) DrawOutline(canvas RID, pos Vector2, outline_size int64, color Color) {
	self.Runtime.TextLine_draw_outline(self, canvas, pos, outline_size, color)
}
func (self TextLine) HitTest(coords Float) int64 {
	return self.Runtime.TextLine_hit_test(self, coords)
}

type extendsTextMesh struct {
	_ [0]*extendsTextMesh
	class
}

func (self TextMesh) PrimitiveMesh() PrimitiveMesh {
	var parent PrimitiveMesh
	parent.class = self.class
	return parent
}
func (self TextMesh) SetHorizontalAlignment(alignment HorizontalAlignment) {
	self.Runtime.TextMesh_set_horizontal_alignment(self, alignment)
}
func (self TextMesh) GetHorizontalAlignment() HorizontalAlignment {
	return self.Runtime.TextMesh_get_horizontal_alignment(self)
}
func (self TextMesh) SetVerticalAlignment(alignment VerticalAlignment) {
	self.Runtime.TextMesh_set_vertical_alignment(self, alignment)
}
func (self TextMesh) GetVerticalAlignment() VerticalAlignment {
	return self.Runtime.TextMesh_get_vertical_alignment(self)
}
func (self TextMesh) SetText(text string) {
	self.Runtime.TextMesh_set_text(self, text)
}
func (self TextMesh) GetText() string {
	return self.Runtime.TextMesh_get_text(self)
}
func (self TextMesh) SetFont(font Font) {
	self.Runtime.TextMesh_set_font(self, font)
}
func (self TextMesh) GetFont() Font {
	return self.Runtime.TextMesh_get_font(self)
}
func (self TextMesh) SetFontSize(font_size int64) {
	self.Runtime.TextMesh_set_font_size(self, font_size)
}
func (self TextMesh) GetFontSize() int64 {
	return self.Runtime.TextMesh_get_font_size(self)
}
func (self TextMesh) SetLineSpacing(line_spacing Float) {
	self.Runtime.TextMesh_set_line_spacing(self, line_spacing)
}
func (self TextMesh) GetLineSpacing() Float {
	return self.Runtime.TextMesh_get_line_spacing(self)
}
func (self TextMesh) SetAutowrapMode(autowrap_mode TextServerAutowrapMode) {
	self.Runtime.TextMesh_set_autowrap_mode(self, autowrap_mode)
}
func (self TextMesh) GetAutowrapMode() TextServerAutowrapMode {
	return self.Runtime.TextMesh_get_autowrap_mode(self)
}
func (self TextMesh) SetJustificationFlags(justification_flags TextServerJustificationFlag) {
	self.Runtime.TextMesh_set_justification_flags(self, justification_flags)
}
func (self TextMesh) GetJustificationFlags() TextServerJustificationFlag {
	return self.Runtime.TextMesh_get_justification_flags(self)
}
func (self TextMesh) SetDepth(depth Float) {
	self.Runtime.TextMesh_set_depth(self, depth)
}
func (self TextMesh) GetDepth() Float {
	return self.Runtime.TextMesh_get_depth(self)
}
func (self TextMesh) SetWidth(width Float) {
	self.Runtime.TextMesh_set_width(self, width)
}
func (self TextMesh) GetWidth() Float {
	return self.Runtime.TextMesh_get_width(self)
}
func (self TextMesh) SetPixelSize(pixel_size Float) {
	self.Runtime.TextMesh_set_pixel_size(self, pixel_size)
}
func (self TextMesh) GetPixelSize() Float {
	return self.Runtime.TextMesh_get_pixel_size(self)
}
func (self TextMesh) SetOffset(offset Vector2) {
	self.Runtime.TextMesh_set_offset(self, offset)
}
func (self TextMesh) GetOffset() Vector2 {
	return self.Runtime.TextMesh_get_offset(self)
}
func (self TextMesh) SetCurveStep(curve_step Float) {
	self.Runtime.TextMesh_set_curve_step(self, curve_step)
}
func (self TextMesh) GetCurveStep() Float {
	return self.Runtime.TextMesh_get_curve_step(self)
}
func (self TextMesh) SetTextDirection(direction TextServerDirection) {
	self.Runtime.TextMesh_set_text_direction(self, direction)
}
func (self TextMesh) GetTextDirection() TextServerDirection {
	return self.Runtime.TextMesh_get_text_direction(self)
}
func (self TextMesh) SetLanguage(language string) {
	self.Runtime.TextMesh_set_language(self, language)
}
func (self TextMesh) GetLanguage() string {
	return self.Runtime.TextMesh_get_language(self)
}
func (self TextMesh) SetStructuredTextBidiOverride(parser TextServerStructuredTextParser) {
	self.Runtime.TextMesh_set_structured_text_bidi_override(self, parser)
}
func (self TextMesh) GetStructuredTextBidiOverride() TextServerStructuredTextParser {
	return self.Runtime.TextMesh_get_structured_text_bidi_override(self)
}
func (self TextMesh) SetStructuredTextBidiOverrideOptions(args Array) {
	self.Runtime.TextMesh_set_structured_text_bidi_override_options(self, args)
}
func (self TextMesh) GetStructuredTextBidiOverrideOptions() Array {
	return self.Runtime.TextMesh_get_structured_text_bidi_override_options(self)
}
func (self TextMesh) SetUppercase(enable bool) {
	self.Runtime.TextMesh_set_uppercase(self, enable)
}
func (self TextMesh) IsUppercase() bool {
	return self.Runtime.TextMesh_is_uppercase(self)
}

type extendsTextParagraph struct {
	_ [0]*extendsTextParagraph
	class
}

func (self TextParagraph) RefCounted() RefCounted {
	var parent RefCounted
	parent.class = self.class
	return parent
}
func (self TextParagraph) Clear() {
	self.Runtime.TextParagraph_clear(self)
}
func (self TextParagraph) SetDirection(direction TextServerDirection) {
	self.Runtime.TextParagraph_set_direction(self, direction)
}
func (self TextParagraph) GetDirection() TextServerDirection {
	return self.Runtime.TextParagraph_get_direction(self)
}
func (self TextParagraph) SetCustomPunctuation(custom_punctuation string) {
	self.Runtime.TextParagraph_set_custom_punctuation(self, custom_punctuation)
}
func (self TextParagraph) GetCustomPunctuation() string {
	return self.Runtime.TextParagraph_get_custom_punctuation(self)
}
func (self TextParagraph) SetOrientation(orientation TextServerOrientation) {
	self.Runtime.TextParagraph_set_orientation(self, orientation)
}
func (self TextParagraph) GetOrientation() TextServerOrientation {
	return self.Runtime.TextParagraph_get_orientation(self)
}
func (self TextParagraph) SetPreserveInvalid(enabled bool) {
	self.Runtime.TextParagraph_set_preserve_invalid(self, enabled)
}
func (self TextParagraph) GetPreserveInvalid() bool {
	return self.Runtime.TextParagraph_get_preserve_invalid(self)
}
func (self TextParagraph) SetPreserveControl(enabled bool) {
	self.Runtime.TextParagraph_set_preserve_control(self, enabled)
}
func (self TextParagraph) GetPreserveControl() bool {
	return self.Runtime.TextParagraph_get_preserve_control(self)
}
func (self TextParagraph) SetBidiOverride(override Array) {
	self.Runtime.TextParagraph_set_bidi_override(self, override)
}
func (self TextParagraph) SetDropcap(text string, font Font, font_size int64, dropcap_margins Rect2, language string) bool {
	return self.Runtime.TextParagraph_set_dropcap(self, text, font, font_size, dropcap_margins, language)
}
func (self TextParagraph) ClearDropcap() {
	self.Runtime.TextParagraph_clear_dropcap(self)
}
func (self TextParagraph) AddString(text string, font Font, font_size int64, language string, meta any) bool {
	return self.Runtime.TextParagraph_add_string(self, text, font, font_size, language, meta)
}
func (self TextParagraph) AddObject(key any, size Vector2, inline_align InlineAlignment, length int64, baseline Float) bool {
	return self.Runtime.TextParagraph_add_object(self, key, size, inline_align, length, baseline)
}
func (self TextParagraph) ResizeObject(key any, size Vector2, inline_align InlineAlignment, baseline Float) bool {
	return self.Runtime.TextParagraph_resize_object(self, key, size, inline_align, baseline)
}
func (self TextParagraph) SetAlignment(alignment HorizontalAlignment) {
	self.Runtime.TextParagraph_set_alignment(self, alignment)
}
func (self TextParagraph) GetAlignment() HorizontalAlignment {
	return self.Runtime.TextParagraph_get_alignment(self)
}
func (self TextParagraph) TabAlign(tab_stops PackedFloat32Array) {
	self.Runtime.TextParagraph_tab_align(self, tab_stops)
}
func (self TextParagraph) SetBreakFlags(flags TextServerLineBreakFlag) {
	self.Runtime.TextParagraph_set_break_flags(self, flags)
}
func (self TextParagraph) GetBreakFlags() TextServerLineBreakFlag {
	return self.Runtime.TextParagraph_get_break_flags(self)
}
func (self TextParagraph) SetJustificationFlags(flags TextServerJustificationFlag) {
	self.Runtime.TextParagraph_set_justification_flags(self, flags)
}
func (self TextParagraph) GetJustificationFlags() TextServerJustificationFlag {
	return self.Runtime.TextParagraph_get_justification_flags(self)
}
func (self TextParagraph) SetTextOverrunBehavior(overrun_behavior TextServerOverrunBehavior) {
	self.Runtime.TextParagraph_set_text_overrun_behavior(self, overrun_behavior)
}
func (self TextParagraph) GetTextOverrunBehavior() TextServerOverrunBehavior {
	return self.Runtime.TextParagraph_get_text_overrun_behavior(self)
}
func (self TextParagraph) SetEllipsisChar(char string) {
	self.Runtime.TextParagraph_set_ellipsis_char(self, char)
}
func (self TextParagraph) GetEllipsisChar() string {
	return self.Runtime.TextParagraph_get_ellipsis_char(self)
}
func (self TextParagraph) SetWidth(width Float) {
	self.Runtime.TextParagraph_set_width(self, width)
}
func (self TextParagraph) GetWidth() Float {
	return self.Runtime.TextParagraph_get_width(self)
}
func (self TextParagraph) GetNonWrappedSize() Vector2 {
	return self.Runtime.TextParagraph_get_non_wrapped_size(self)
}
func (self TextParagraph) GetSize() Vector2 {
	return self.Runtime.TextParagraph_get_size(self)
}
func (self TextParagraph) GetRid() RID {
	return self.Runtime.TextParagraph_get_rid(self)
}
func (self TextParagraph) GetLineRid(line int64) RID {
	return self.Runtime.TextParagraph_get_line_rid(self, line)
}
func (self TextParagraph) GetDropcapRid() RID {
	return self.Runtime.TextParagraph_get_dropcap_rid(self)
}
func (self TextParagraph) GetLineCount() int64 {
	return self.Runtime.TextParagraph_get_line_count(self)
}
func (self TextParagraph) SetMaxLinesVisible(max_lines_visible int64) {
	self.Runtime.TextParagraph_set_max_lines_visible(self, max_lines_visible)
}
func (self TextParagraph) GetMaxLinesVisible() int64 {
	return self.Runtime.TextParagraph_get_max_lines_visible(self)
}
func (self TextParagraph) GetLineObjects(line int64) Array {
	return self.Runtime.TextParagraph_get_line_objects(self, line)
}
func (self TextParagraph) GetLineObjectRect(line int64, key any) Rect2 {
	return self.Runtime.TextParagraph_get_line_object_rect(self, line, key)
}
func (self TextParagraph) GetLineSize(line int64) Vector2 {
	return self.Runtime.TextParagraph_get_line_size(self, line)
}
func (self TextParagraph) GetLineRange(line int64) Vector2i {
	return self.Runtime.TextParagraph_get_line_range(self, line)
}
func (self TextParagraph) GetLineAscent(line int64) Float {
	return self.Runtime.TextParagraph_get_line_ascent(self, line)
}
func (self TextParagraph) GetLineDescent(line int64) Float {
	return self.Runtime.TextParagraph_get_line_descent(self, line)
}
func (self TextParagraph) GetLineWidth(line int64) Float {
	return self.Runtime.TextParagraph_get_line_width(self, line)
}
func (self TextParagraph) GetLineUnderlinePosition(line int64) Float {
	return self.Runtime.TextParagraph_get_line_underline_position(self, line)
}
func (self TextParagraph) GetLineUnderlineThickness(line int64) Float {
	return self.Runtime.TextParagraph_get_line_underline_thickness(self, line)
}
func (self TextParagraph) GetDropcapSize() Vector2 {
	return self.Runtime.TextParagraph_get_dropcap_size(self)
}
func (self TextParagraph) GetDropcapLines() int64 {
	return self.Runtime.TextParagraph_get_dropcap_lines(self)
}
func (self TextParagraph) Draw(canvas RID, pos Vector2, color Color, dc_color Color) {
	self.Runtime.TextParagraph_draw(self, canvas, pos, color, dc_color)
}
func (self TextParagraph) DrawOutline(canvas RID, pos Vector2, outline_size int64, color Color, dc_color Color) {
	self.Runtime.TextParagraph_draw_outline(self, canvas, pos, outline_size, color, dc_color)
}
func (self TextParagraph) DrawLine(canvas RID, pos Vector2, line int64, color Color) {
	self.Runtime.TextParagraph_draw_line(self, canvas, pos, line, color)
}
func (self TextParagraph) DrawLineOutline(canvas RID, pos Vector2, line int64, outline_size int64, color Color) {
	self.Runtime.TextParagraph_draw_line_outline(self, canvas, pos, line, outline_size, color)
}
func (self TextParagraph) DrawDropcap(canvas RID, pos Vector2, color Color) {
	self.Runtime.TextParagraph_draw_dropcap(self, canvas, pos, color)
}
func (self TextParagraph) DrawDropcapOutline(canvas RID, pos Vector2, outline_size int64, color Color) {
	self.Runtime.TextParagraph_draw_dropcap_outline(self, canvas, pos, outline_size, color)
}
func (self TextParagraph) HitTest(coords Vector2) int64 {
	return self.Runtime.TextParagraph_hit_test(self, coords)
}

type extendsTextServer struct {
	_ [0]*extendsTextServer
	class
}

func (self TextServer) RefCounted() RefCounted {
	var parent RefCounted
	parent.class = self.class
	return parent
}
func (self TextServer) HasFeature(feature TextServerFeature) bool {
	return self.Runtime.TextServer_has_feature(self, feature)
}
func (self TextServer) GetName() string {
	return self.Runtime.TextServer_get_name(self)
}
func (self TextServer) GetFeatures() int64 {
	return self.Runtime.TextServer_get_features(self)
}
func (self TextServer) LoadSupportData(filename string) bool {
	return self.Runtime.TextServer_load_support_data(self, filename)
}
func (self TextServer) GetSupportDataFilename() string {
	return self.Runtime.TextServer_get_support_data_filename(self)
}
func (self TextServer) GetSupportDataInfo() string {
	return self.Runtime.TextServer_get_support_data_info(self)
}
func (self TextServer) SaveSupportData(filename string) bool {
	return self.Runtime.TextServer_save_support_data(self, filename)
}
func (self TextServer) IsLocaleRightToLeft(locale string) bool {
	return self.Runtime.TextServer_is_locale_right_to_left(self, locale)
}
func (self TextServer) NameToTag(name string) int64 {
	return self.Runtime.TextServer_name_to_tag(self, name)
}
func (self TextServer) TagToName(tag int64) string {
	return self.Runtime.TextServer_tag_to_name(self, tag)
}
func (self TextServer) Has(rid RID) bool {
	return self.Runtime.TextServer_has(self, rid)
}
func (self TextServer) FreeRid(rid RID) {
	self.Runtime.TextServer_free_rid(self, rid)
}
func (self TextServer) CreateFont() RID {
	return self.Runtime.TextServer_create_font(self)
}
func (self TextServer) CreateFontLinkedVariation(font_rid RID) RID {
	return self.Runtime.TextServer_create_font_linked_variation(self, font_rid)
}
func (self TextServer) FontSetData(font_rid RID, data PackedByteArray) {
	self.Runtime.TextServer_font_set_data(self, font_rid, data)
}
func (self TextServer) FontSetFaceIndex(font_rid RID, face_index int64) {
	self.Runtime.TextServer_font_set_face_index(self, font_rid, face_index)
}
func (self TextServer) FontGetFaceIndex(font_rid RID) int64 {
	return self.Runtime.TextServer_font_get_face_index(self, font_rid)
}
func (self TextServer) FontGetFaceCount(font_rid RID) int64 {
	return self.Runtime.TextServer_font_get_face_count(self, font_rid)
}
func (self TextServer) FontSetStyle(font_rid RID, style TextServerFontStyle) {
	self.Runtime.TextServer_font_set_style(self, font_rid, style)
}
func (self TextServer) FontGetStyle(font_rid RID) TextServerFontStyle {
	return self.Runtime.TextServer_font_get_style(self, font_rid)
}
func (self TextServer) FontSetName(font_rid RID, name string) {
	self.Runtime.TextServer_font_set_name(self, font_rid, name)
}
func (self TextServer) FontGetName(font_rid RID) string {
	return self.Runtime.TextServer_font_get_name(self, font_rid)
}
func (self TextServer) FontGetOtNameStrings(font_rid RID) Dictionary {
	return self.Runtime.TextServer_font_get_ot_name_strings(self, font_rid)
}
func (self TextServer) FontSetStyleName(font_rid RID, name string) {
	self.Runtime.TextServer_font_set_style_name(self, font_rid, name)
}
func (self TextServer) FontGetStyleName(font_rid RID) string {
	return self.Runtime.TextServer_font_get_style_name(self, font_rid)
}
func (self TextServer) FontSetWeight(font_rid RID, weight int64) {
	self.Runtime.TextServer_font_set_weight(self, font_rid, weight)
}
func (self TextServer) FontGetWeight(font_rid RID) int64 {
	return self.Runtime.TextServer_font_get_weight(self, font_rid)
}
func (self TextServer) FontSetStretch(font_rid RID, weight int64) {
	self.Runtime.TextServer_font_set_stretch(self, font_rid, weight)
}
func (self TextServer) FontGetStretch(font_rid RID) int64 {
	return self.Runtime.TextServer_font_get_stretch(self, font_rid)
}
func (self TextServer) FontSetAntialiasing(font_rid RID, antialiasing TextServerFontAntialiasing) {
	self.Runtime.TextServer_font_set_antialiasing(self, font_rid, antialiasing)
}
func (self TextServer) FontGetAntialiasing(font_rid RID) TextServerFontAntialiasing {
	return self.Runtime.TextServer_font_get_antialiasing(self, font_rid)
}
func (self TextServer) FontSetGenerateMipmaps(font_rid RID, generate_mipmaps bool) {
	self.Runtime.TextServer_font_set_generate_mipmaps(self, font_rid, generate_mipmaps)
}
func (self TextServer) FontGetGenerateMipmaps(font_rid RID) bool {
	return self.Runtime.TextServer_font_get_generate_mipmaps(self, font_rid)
}
func (self TextServer) FontSetMultichannelSignedDistanceField(font_rid RID, msdf bool) {
	self.Runtime.TextServer_font_set_multichannel_signed_distance_field(self, font_rid, msdf)
}
func (self TextServer) FontIsMultichannelSignedDistanceField(font_rid RID) bool {
	return self.Runtime.TextServer_font_is_multichannel_signed_distance_field(self, font_rid)
}
func (self TextServer) FontSetMsdfPixelRange(font_rid RID, msdf_pixel_range int64) {
	self.Runtime.TextServer_font_set_msdf_pixel_range(self, font_rid, msdf_pixel_range)
}
func (self TextServer) FontGetMsdfPixelRange(font_rid RID) int64 {
	return self.Runtime.TextServer_font_get_msdf_pixel_range(self, font_rid)
}
func (self TextServer) FontSetMsdfSize(font_rid RID, msdf_size int64) {
	self.Runtime.TextServer_font_set_msdf_size(self, font_rid, msdf_size)
}
func (self TextServer) FontGetMsdfSize(font_rid RID) int64 {
	return self.Runtime.TextServer_font_get_msdf_size(self, font_rid)
}
func (self TextServer) FontSetFixedSize(font_rid RID, fixed_size int64) {
	self.Runtime.TextServer_font_set_fixed_size(self, font_rid, fixed_size)
}
func (self TextServer) FontGetFixedSize(font_rid RID) int64 {
	return self.Runtime.TextServer_font_get_fixed_size(self, font_rid)
}
func (self TextServer) FontSetFixedSizeScaleMode(font_rid RID, fixed_size_scale_mode TextServerFixedSizeScaleMode) {
	self.Runtime.TextServer_font_set_fixed_size_scale_mode(self, font_rid, fixed_size_scale_mode)
}
func (self TextServer) FontGetFixedSizeScaleMode(font_rid RID) TextServerFixedSizeScaleMode {
	return self.Runtime.TextServer_font_get_fixed_size_scale_mode(self, font_rid)
}
func (self TextServer) FontSetAllowSystemFallback(font_rid RID, allow_system_fallback bool) {
	self.Runtime.TextServer_font_set_allow_system_fallback(self, font_rid, allow_system_fallback)
}
func (self TextServer) FontIsAllowSystemFallback(font_rid RID) bool {
	return self.Runtime.TextServer_font_is_allow_system_fallback(self, font_rid)
}
func (self TextServer) FontSetForceAutohinter(font_rid RID, force_autohinter bool) {
	self.Runtime.TextServer_font_set_force_autohinter(self, font_rid, force_autohinter)
}
func (self TextServer) FontIsForceAutohinter(font_rid RID) bool {
	return self.Runtime.TextServer_font_is_force_autohinter(self, font_rid)
}
func (self TextServer) FontSetHinting(font_rid RID, hinting TextServerHinting) {
	self.Runtime.TextServer_font_set_hinting(self, font_rid, hinting)
}
func (self TextServer) FontGetHinting(font_rid RID) TextServerHinting {
	return self.Runtime.TextServer_font_get_hinting(self, font_rid)
}
func (self TextServer) FontSetSubpixelPositioning(font_rid RID, subpixel_positioning TextServerSubpixelPositioning) {
	self.Runtime.TextServer_font_set_subpixel_positioning(self, font_rid, subpixel_positioning)
}
func (self TextServer) FontGetSubpixelPositioning(font_rid RID) TextServerSubpixelPositioning {
	return self.Runtime.TextServer_font_get_subpixel_positioning(self, font_rid)
}
func (self TextServer) FontSetEmbolden(font_rid RID, strength Float) {
	self.Runtime.TextServer_font_set_embolden(self, font_rid, strength)
}
func (self TextServer) FontGetEmbolden(font_rid RID) Float {
	return self.Runtime.TextServer_font_get_embolden(self, font_rid)
}
func (self TextServer) FontSetSpacing(font_rid RID, spacing TextServerSpacingType, value int64) {
	self.Runtime.TextServer_font_set_spacing(self, font_rid, spacing, value)
}
func (self TextServer) FontGetSpacing(font_rid RID, spacing TextServerSpacingType) int64 {
	return self.Runtime.TextServer_font_get_spacing(self, font_rid, spacing)
}
func (self TextServer) FontSetTransform(font_rid RID, transform Transform2D) {
	self.Runtime.TextServer_font_set_transform(self, font_rid, transform)
}
func (self TextServer) FontGetTransform(font_rid RID) Transform2D {
	return self.Runtime.TextServer_font_get_transform(self, font_rid)
}
func (self TextServer) FontSetVariationCoordinates(font_rid RID, variation_coordinates Dictionary) {
	self.Runtime.TextServer_font_set_variation_coordinates(self, font_rid, variation_coordinates)
}
func (self TextServer) FontGetVariationCoordinates(font_rid RID) Dictionary {
	return self.Runtime.TextServer_font_get_variation_coordinates(self, font_rid)
}
func (self TextServer) FontSetOversampling(font_rid RID, oversampling Float) {
	self.Runtime.TextServer_font_set_oversampling(self, font_rid, oversampling)
}
func (self TextServer) FontGetOversampling(font_rid RID) Float {
	return self.Runtime.TextServer_font_get_oversampling(self, font_rid)
}
func (self TextServer) FontGetSizeCacheList(font_rid RID) ArrayOf[Vector2i] {
	return self.Runtime.TextServer_font_get_size_cache_list(self, font_rid)
}
func (self TextServer) FontClearSizeCache(font_rid RID) {
	self.Runtime.TextServer_font_clear_size_cache(self, font_rid)
}
func (self TextServer) FontRemoveSizeCache(font_rid RID, size Vector2i) {
	self.Runtime.TextServer_font_remove_size_cache(self, font_rid, size)
}
func (self TextServer) FontSetAscent(font_rid RID, size int64, ascent Float) {
	self.Runtime.TextServer_font_set_ascent(self, font_rid, size, ascent)
}
func (self TextServer) FontGetAscent(font_rid RID, size int64) Float {
	return self.Runtime.TextServer_font_get_ascent(self, font_rid, size)
}
func (self TextServer) FontSetDescent(font_rid RID, size int64, descent Float) {
	self.Runtime.TextServer_font_set_descent(self, font_rid, size, descent)
}
func (self TextServer) FontGetDescent(font_rid RID, size int64) Float {
	return self.Runtime.TextServer_font_get_descent(self, font_rid, size)
}
func (self TextServer) FontSetUnderlinePosition(font_rid RID, size int64, underline_position Float) {
	self.Runtime.TextServer_font_set_underline_position(self, font_rid, size, underline_position)
}
func (self TextServer) FontGetUnderlinePosition(font_rid RID, size int64) Float {
	return self.Runtime.TextServer_font_get_underline_position(self, font_rid, size)
}
func (self TextServer) FontSetUnderlineThickness(font_rid RID, size int64, underline_thickness Float) {
	self.Runtime.TextServer_font_set_underline_thickness(self, font_rid, size, underline_thickness)
}
func (self TextServer) FontGetUnderlineThickness(font_rid RID, size int64) Float {
	return self.Runtime.TextServer_font_get_underline_thickness(self, font_rid, size)
}
func (self TextServer) FontSetScale(font_rid RID, size int64, scale Float) {
	self.Runtime.TextServer_font_set_scale(self, font_rid, size, scale)
}
func (self TextServer) FontGetScale(font_rid RID, size int64) Float {
	return self.Runtime.TextServer_font_get_scale(self, font_rid, size)
}
func (self TextServer) FontGetTextureCount(font_rid RID, size Vector2i) int64 {
	return self.Runtime.TextServer_font_get_texture_count(self, font_rid, size)
}
func (self TextServer) FontClearTextures(font_rid RID, size Vector2i) {
	self.Runtime.TextServer_font_clear_textures(self, font_rid, size)
}
func (self TextServer) FontRemoveTexture(font_rid RID, size Vector2i, texture_index int64) {
	self.Runtime.TextServer_font_remove_texture(self, font_rid, size, texture_index)
}
func (self TextServer) FontSetTextureImage(font_rid RID, size Vector2i, texture_index int64, image Image) {
	self.Runtime.TextServer_font_set_texture_image(self, font_rid, size, texture_index, image)
}
func (self TextServer) FontGetTextureImage(font_rid RID, size Vector2i, texture_index int64) Image {
	return self.Runtime.TextServer_font_get_texture_image(self, font_rid, size, texture_index)
}
func (self TextServer) FontSetTextureOffsets(font_rid RID, size Vector2i, texture_index int64, offset PackedInt32Array) {
	self.Runtime.TextServer_font_set_texture_offsets(self, font_rid, size, texture_index, offset)
}
func (self TextServer) FontGetTextureOffsets(font_rid RID, size Vector2i, texture_index int64) PackedInt32Array {
	return self.Runtime.TextServer_font_get_texture_offsets(self, font_rid, size, texture_index)
}
func (self TextServer) FontGetGlyphList(font_rid RID, size Vector2i) PackedInt32Array {
	return self.Runtime.TextServer_font_get_glyph_list(self, font_rid, size)
}
func (self TextServer) FontClearGlyphs(font_rid RID, size Vector2i) {
	self.Runtime.TextServer_font_clear_glyphs(self, font_rid, size)
}
func (self TextServer) FontRemoveGlyph(font_rid RID, size Vector2i, glyph int64) {
	self.Runtime.TextServer_font_remove_glyph(self, font_rid, size, glyph)
}
func (self TextServer) FontGetGlyphAdvance(font_rid RID, size int64, glyph int64) Vector2 {
	return self.Runtime.TextServer_font_get_glyph_advance(self, font_rid, size, glyph)
}
func (self TextServer) FontSetGlyphAdvance(font_rid RID, size int64, glyph int64, advance Vector2) {
	self.Runtime.TextServer_font_set_glyph_advance(self, font_rid, size, glyph, advance)
}
func (self TextServer) FontGetGlyphOffset(font_rid RID, size Vector2i, glyph int64) Vector2 {
	return self.Runtime.TextServer_font_get_glyph_offset(self, font_rid, size, glyph)
}
func (self TextServer) FontSetGlyphOffset(font_rid RID, size Vector2i, glyph int64, offset Vector2) {
	self.Runtime.TextServer_font_set_glyph_offset(self, font_rid, size, glyph, offset)
}
func (self TextServer) FontGetGlyphSize(font_rid RID, size Vector2i, glyph int64) Vector2 {
	return self.Runtime.TextServer_font_get_glyph_size(self, font_rid, size, glyph)
}
func (self TextServer) FontSetGlyphSize(font_rid RID, size Vector2i, glyph int64, gl_size Vector2) {
	self.Runtime.TextServer_font_set_glyph_size(self, font_rid, size, glyph, gl_size)
}
func (self TextServer) FontGetGlyphUvRect(font_rid RID, size Vector2i, glyph int64) Rect2 {
	return self.Runtime.TextServer_font_get_glyph_uv_rect(self, font_rid, size, glyph)
}
func (self TextServer) FontSetGlyphUvRect(font_rid RID, size Vector2i, glyph int64, uv_rect Rect2) {
	self.Runtime.TextServer_font_set_glyph_uv_rect(self, font_rid, size, glyph, uv_rect)
}
func (self TextServer) FontGetGlyphTextureIdx(font_rid RID, size Vector2i, glyph int64) int64 {
	return self.Runtime.TextServer_font_get_glyph_texture_idx(self, font_rid, size, glyph)
}
func (self TextServer) FontSetGlyphTextureIdx(font_rid RID, size Vector2i, glyph int64, texture_idx int64) {
	self.Runtime.TextServer_font_set_glyph_texture_idx(self, font_rid, size, glyph, texture_idx)
}
func (self TextServer) FontGetGlyphTextureRid(font_rid RID, size Vector2i, glyph int64) RID {
	return self.Runtime.TextServer_font_get_glyph_texture_rid(self, font_rid, size, glyph)
}
func (self TextServer) FontGetGlyphTextureSize(font_rid RID, size Vector2i, glyph int64) Vector2 {
	return self.Runtime.TextServer_font_get_glyph_texture_size(self, font_rid, size, glyph)
}
func (self TextServer) FontGetGlyphContours(font RID, size int64, index int64) Dictionary {
	return self.Runtime.TextServer_font_get_glyph_contours(self, font, size, index)
}
func (self TextServer) FontGetKerningList(font_rid RID, size int64) ArrayOf[Vector2i] {
	return self.Runtime.TextServer_font_get_kerning_list(self, font_rid, size)
}
func (self TextServer) FontClearKerningMap(font_rid RID, size int64) {
	self.Runtime.TextServer_font_clear_kerning_map(self, font_rid, size)
}
func (self TextServer) FontRemoveKerning(font_rid RID, size int64, glyph_pair Vector2i) {
	self.Runtime.TextServer_font_remove_kerning(self, font_rid, size, glyph_pair)
}
func (self TextServer) FontSetKerning(font_rid RID, size int64, glyph_pair Vector2i, kerning Vector2) {
	self.Runtime.TextServer_font_set_kerning(self, font_rid, size, glyph_pair, kerning)
}
func (self TextServer) FontGetKerning(font_rid RID, size int64, glyph_pair Vector2i) Vector2 {
	return self.Runtime.TextServer_font_get_kerning(self, font_rid, size, glyph_pair)
}
func (self TextServer) FontGetGlyphIndex(font_rid RID, size int64, char int64, variation_selector int64) int64 {
	return self.Runtime.TextServer_font_get_glyph_index(self, font_rid, size, char, variation_selector)
}
func (self TextServer) FontGetCharFromGlyphIndex(font_rid RID, size int64, glyph_index int64) int64 {
	return self.Runtime.TextServer_font_get_char_from_glyph_index(self, font_rid, size, glyph_index)
}
func (self TextServer) FontHasChar(font_rid RID, char int64) bool {
	return self.Runtime.TextServer_font_has_char(self, font_rid, char)
}
func (self TextServer) FontGetSupportedChars(font_rid RID) string {
	return self.Runtime.TextServer_font_get_supported_chars(self, font_rid)
}
func (self TextServer) FontRenderRange(font_rid RID, size Vector2i, start int64, end int64) {
	self.Runtime.TextServer_font_render_range(self, font_rid, size, start, end)
}
func (self TextServer) FontRenderGlyph(font_rid RID, size Vector2i, index int64) {
	self.Runtime.TextServer_font_render_glyph(self, font_rid, size, index)
}
func (self TextServer) FontDrawGlyph(font_rid RID, canvas RID, size int64, pos Vector2, index int64, color Color) {
	self.Runtime.TextServer_font_draw_glyph(self, font_rid, canvas, size, pos, index, color)
}
func (self TextServer) FontDrawGlyphOutline(font_rid RID, canvas RID, size int64, outline_size int64, pos Vector2, index int64, color Color) {
	self.Runtime.TextServer_font_draw_glyph_outline(self, font_rid, canvas, size, outline_size, pos, index, color)
}
func (self TextServer) FontIsLanguageSupported(font_rid RID, language string) bool {
	return self.Runtime.TextServer_font_is_language_supported(self, font_rid, language)
}
func (self TextServer) FontSetLanguageSupportOverride(font_rid RID, language string, supported bool) {
	self.Runtime.TextServer_font_set_language_support_override(self, font_rid, language, supported)
}
func (self TextServer) FontGetLanguageSupportOverride(font_rid RID, language string) bool {
	return self.Runtime.TextServer_font_get_language_support_override(self, font_rid, language)
}
func (self TextServer) FontRemoveLanguageSupportOverride(font_rid RID, language string) {
	self.Runtime.TextServer_font_remove_language_support_override(self, font_rid, language)
}
func (self TextServer) FontGetLanguageSupportOverrides(font_rid RID) PackedStringArray {
	return self.Runtime.TextServer_font_get_language_support_overrides(self, font_rid)
}
func (self TextServer) FontIsScriptSupported(font_rid RID, script string) bool {
	return self.Runtime.TextServer_font_is_script_supported(self, font_rid, script)
}
func (self TextServer) FontSetScriptSupportOverride(font_rid RID, script string, supported bool) {
	self.Runtime.TextServer_font_set_script_support_override(self, font_rid, script, supported)
}
func (self TextServer) FontGetScriptSupportOverride(font_rid RID, script string) bool {
	return self.Runtime.TextServer_font_get_script_support_override(self, font_rid, script)
}
func (self TextServer) FontRemoveScriptSupportOverride(font_rid RID, script string) {
	self.Runtime.TextServer_font_remove_script_support_override(self, font_rid, script)
}
func (self TextServer) FontGetScriptSupportOverrides(font_rid RID) PackedStringArray {
	return self.Runtime.TextServer_font_get_script_support_overrides(self, font_rid)
}
func (self TextServer) FontSetOpentypeFeatureOverrides(font_rid RID, overrides Dictionary) {
	self.Runtime.TextServer_font_set_opentype_feature_overrides(self, font_rid, overrides)
}
func (self TextServer) FontGetOpentypeFeatureOverrides(font_rid RID) Dictionary {
	return self.Runtime.TextServer_font_get_opentype_feature_overrides(self, font_rid)
}
func (self TextServer) FontSupportedFeatureList(font_rid RID) Dictionary {
	return self.Runtime.TextServer_font_supported_feature_list(self, font_rid)
}
func (self TextServer) FontSupportedVariationList(font_rid RID) Dictionary {
	return self.Runtime.TextServer_font_supported_variation_list(self, font_rid)
}
func (self TextServer) FontGetGlobalOversampling() Float {
	return self.Runtime.TextServer_font_get_global_oversampling(self)
}
func (self TextServer) FontSetGlobalOversampling(oversampling Float) {
	self.Runtime.TextServer_font_set_global_oversampling(self, oversampling)
}
func (self TextServer) GetHexCodeBoxSize(size int64, index int64) Vector2 {
	return self.Runtime.TextServer_get_hex_code_box_size(self, size, index)
}
func (self TextServer) DrawHexCodeBox(canvas RID, size int64, pos Vector2, index int64, color Color) {
	self.Runtime.TextServer_draw_hex_code_box(self, canvas, size, pos, index, color)
}
func (self TextServer) CreateShapedText(direction TextServerDirection, orientation TextServerOrientation) RID {
	return self.Runtime.TextServer_create_shaped_text(self, direction, orientation)
}
func (self TextServer) ShapedTextClear(rid RID) {
	self.Runtime.TextServer_shaped_text_clear(self, rid)
}
func (self TextServer) ShapedTextSetDirection(shaped RID, direction TextServerDirection) {
	self.Runtime.TextServer_shaped_text_set_direction(self, shaped, direction)
}
func (self TextServer) ShapedTextGetDirection(shaped RID) TextServerDirection {
	return self.Runtime.TextServer_shaped_text_get_direction(self, shaped)
}
func (self TextServer) ShapedTextGetInferredDirection(shaped RID) TextServerDirection {
	return self.Runtime.TextServer_shaped_text_get_inferred_direction(self, shaped)
}
func (self TextServer) ShapedTextSetBidiOverride(shaped RID, override Array) {
	self.Runtime.TextServer_shaped_text_set_bidi_override(self, shaped, override)
}
func (self TextServer) ShapedTextSetCustomPunctuation(shaped RID, punct string) {
	self.Runtime.TextServer_shaped_text_set_custom_punctuation(self, shaped, punct)
}
func (self TextServer) ShapedTextGetCustomPunctuation(shaped RID) string {
	return self.Runtime.TextServer_shaped_text_get_custom_punctuation(self, shaped)
}
func (self TextServer) ShapedTextSetCustomEllipsis(shaped RID, char int64) {
	self.Runtime.TextServer_shaped_text_set_custom_ellipsis(self, shaped, char)
}
func (self TextServer) ShapedTextGetCustomEllipsis(shaped RID) int64 {
	return self.Runtime.TextServer_shaped_text_get_custom_ellipsis(self, shaped)
}
func (self TextServer) ShapedTextSetOrientation(shaped RID, orientation TextServerOrientation) {
	self.Runtime.TextServer_shaped_text_set_orientation(self, shaped, orientation)
}
func (self TextServer) ShapedTextGetOrientation(shaped RID) TextServerOrientation {
	return self.Runtime.TextServer_shaped_text_get_orientation(self, shaped)
}
func (self TextServer) ShapedTextSetPreserveInvalid(shaped RID, enabled bool) {
	self.Runtime.TextServer_shaped_text_set_preserve_invalid(self, shaped, enabled)
}
func (self TextServer) ShapedTextGetPreserveInvalid(shaped RID) bool {
	return self.Runtime.TextServer_shaped_text_get_preserve_invalid(self, shaped)
}
func (self TextServer) ShapedTextSetPreserveControl(shaped RID, enabled bool) {
	self.Runtime.TextServer_shaped_text_set_preserve_control(self, shaped, enabled)
}
func (self TextServer) ShapedTextGetPreserveControl(shaped RID) bool {
	return self.Runtime.TextServer_shaped_text_get_preserve_control(self, shaped)
}
func (self TextServer) ShapedTextSetSpacing(shaped RID, spacing TextServerSpacingType, value int64) {
	self.Runtime.TextServer_shaped_text_set_spacing(self, shaped, spacing, value)
}
func (self TextServer) ShapedTextGetSpacing(shaped RID, spacing TextServerSpacingType) int64 {
	return self.Runtime.TextServer_shaped_text_get_spacing(self, shaped, spacing)
}
func (self TextServer) ShapedTextAddString(shaped RID, text string, fonts ArrayOf[RID], size int64, opentype_features Dictionary, language string, meta any) bool {
	return self.Runtime.TextServer_shaped_text_add_string(self, shaped, text, fonts, size, opentype_features, language, meta)
}
func (self TextServer) ShapedTextAddObject(shaped RID, key any, size Vector2, inline_align InlineAlignment, length int64, baseline Float) bool {
	return self.Runtime.TextServer_shaped_text_add_object(self, shaped, key, size, inline_align, length, baseline)
}
func (self TextServer) ShapedTextResizeObject(shaped RID, key any, size Vector2, inline_align InlineAlignment, baseline Float) bool {
	return self.Runtime.TextServer_shaped_text_resize_object(self, shaped, key, size, inline_align, baseline)
}
func (self TextServer) ShapedGetSpanCount(shaped RID) int64 {
	return self.Runtime.TextServer_shaped_get_span_count(self, shaped)
}
func (self TextServer) ShapedGetSpanMeta(shaped RID, index int64) any {
	return self.Runtime.TextServer_shaped_get_span_meta(self, shaped, index)
}
func (self TextServer) ShapedSetSpanUpdateFont(shaped RID, index int64, fonts ArrayOf[RID], size int64, opentype_features Dictionary) {
	self.Runtime.TextServer_shaped_set_span_update_font(self, shaped, index, fonts, size, opentype_features)
}
func (self TextServer) ShapedTextSubstr(shaped RID, start int64, length int64) RID {
	return self.Runtime.TextServer_shaped_text_substr(self, shaped, start, length)
}
func (self TextServer) ShapedTextGetParent(shaped RID) RID {
	return self.Runtime.TextServer_shaped_text_get_parent(self, shaped)
}
func (self TextServer) ShapedTextFitToWidth(shaped RID, width Float, justification_flags TextServerJustificationFlag) Float {
	return self.Runtime.TextServer_shaped_text_fit_to_width(self, shaped, width, justification_flags)
}
func (self TextServer) ShapedTextTabAlign(shaped RID, tab_stops PackedFloat32Array) Float {
	return self.Runtime.TextServer_shaped_text_tab_align(self, shaped, tab_stops)
}
func (self TextServer) ShapedTextShape(shaped RID) bool {
	return self.Runtime.TextServer_shaped_text_shape(self, shaped)
}
func (self TextServer) ShapedTextIsReady(shaped RID) bool {
	return self.Runtime.TextServer_shaped_text_is_ready(self, shaped)
}
func (self TextServer) ShapedTextHasVisibleChars(shaped RID) bool {
	return self.Runtime.TextServer_shaped_text_has_visible_chars(self, shaped)
}
func (self TextServer) ShapedTextGetGlyphs(shaped RID) ArrayOf[Dictionary] {
	return self.Runtime.TextServer_shaped_text_get_glyphs(self, shaped)
}
func (self TextServer) ShapedTextSortLogical(shaped RID) ArrayOf[Dictionary] {
	return self.Runtime.TextServer_shaped_text_sort_logical(self, shaped)
}
func (self TextServer) ShapedTextGetGlyphCount(shaped RID) int64 {
	return self.Runtime.TextServer_shaped_text_get_glyph_count(self, shaped)
}
func (self TextServer) ShapedTextGetRange(shaped RID) Vector2i {
	return self.Runtime.TextServer_shaped_text_get_range(self, shaped)
}
func (self TextServer) ShapedTextGetLineBreaksAdv(shaped RID, width PackedFloat32Array, start int64, once bool, break_flags TextServerLineBreakFlag) PackedInt32Array {
	return self.Runtime.TextServer_shaped_text_get_line_breaks_adv(self, shaped, width, start, once, break_flags)
}
func (self TextServer) ShapedTextGetLineBreaks(shaped RID, width Float, start int64, break_flags TextServerLineBreakFlag) PackedInt32Array {
	return self.Runtime.TextServer_shaped_text_get_line_breaks(self, shaped, width, start, break_flags)
}
func (self TextServer) ShapedTextGetWordBreaks(shaped RID, grapheme_flags TextServerGraphemeFlag) PackedInt32Array {
	return self.Runtime.TextServer_shaped_text_get_word_breaks(self, shaped, grapheme_flags)
}
func (self TextServer) ShapedTextGetTrimPos(shaped RID) int64 {
	return self.Runtime.TextServer_shaped_text_get_trim_pos(self, shaped)
}
func (self TextServer) ShapedTextGetEllipsisPos(shaped RID) int64 {
	return self.Runtime.TextServer_shaped_text_get_ellipsis_pos(self, shaped)
}
func (self TextServer) ShapedTextGetEllipsisGlyphs(shaped RID) ArrayOf[Dictionary] {
	return self.Runtime.TextServer_shaped_text_get_ellipsis_glyphs(self, shaped)
}
func (self TextServer) ShapedTextGetEllipsisGlyphCount(shaped RID) int64 {
	return self.Runtime.TextServer_shaped_text_get_ellipsis_glyph_count(self, shaped)
}
func (self TextServer) ShapedTextOverrunTrimToWidth(shaped RID, width Float, overrun_trim_flags TextServerTextOverrunFlag) {
	self.Runtime.TextServer_shaped_text_overrun_trim_to_width(self, shaped, width, overrun_trim_flags)
}
func (self TextServer) ShapedTextGetObjects(shaped RID) Array {
	return self.Runtime.TextServer_shaped_text_get_objects(self, shaped)
}
func (self TextServer) ShapedTextGetObjectRect(shaped RID, key any) Rect2 {
	return self.Runtime.TextServer_shaped_text_get_object_rect(self, shaped, key)
}
func (self TextServer) ShapedTextGetSize(shaped RID) Vector2 {
	return self.Runtime.TextServer_shaped_text_get_size(self, shaped)
}
func (self TextServer) ShapedTextGetAscent(shaped RID) Float {
	return self.Runtime.TextServer_shaped_text_get_ascent(self, shaped)
}
func (self TextServer) ShapedTextGetDescent(shaped RID) Float {
	return self.Runtime.TextServer_shaped_text_get_descent(self, shaped)
}
func (self TextServer) ShapedTextGetWidth(shaped RID) Float {
	return self.Runtime.TextServer_shaped_text_get_width(self, shaped)
}
func (self TextServer) ShapedTextGetUnderlinePosition(shaped RID) Float {
	return self.Runtime.TextServer_shaped_text_get_underline_position(self, shaped)
}
func (self TextServer) ShapedTextGetUnderlineThickness(shaped RID) Float {
	return self.Runtime.TextServer_shaped_text_get_underline_thickness(self, shaped)
}
func (self TextServer) ShapedTextGetCarets(shaped RID, position int64) Dictionary {
	return self.Runtime.TextServer_shaped_text_get_carets(self, shaped, position)
}
func (self TextServer) ShapedTextGetSelection(shaped RID, start int64, end int64) PackedVector2Array {
	return self.Runtime.TextServer_shaped_text_get_selection(self, shaped, start, end)
}
func (self TextServer) ShapedTextHitTestGrapheme(shaped RID, coords Float) int64 {
	return self.Runtime.TextServer_shaped_text_hit_test_grapheme(self, shaped, coords)
}
func (self TextServer) ShapedTextHitTestPosition(shaped RID, coords Float) int64 {
	return self.Runtime.TextServer_shaped_text_hit_test_position(self, shaped, coords)
}
func (self TextServer) ShapedTextGetGraphemeBounds(shaped RID, pos int64) Vector2 {
	return self.Runtime.TextServer_shaped_text_get_grapheme_bounds(self, shaped, pos)
}
func (self TextServer) ShapedTextNextGraphemePos(shaped RID, pos int64) int64 {
	return self.Runtime.TextServer_shaped_text_next_grapheme_pos(self, shaped, pos)
}
func (self TextServer) ShapedTextPrevGraphemePos(shaped RID, pos int64) int64 {
	return self.Runtime.TextServer_shaped_text_prev_grapheme_pos(self, shaped, pos)
}
func (self TextServer) ShapedTextGetCharacterBreaks(shaped RID) PackedInt32Array {
	return self.Runtime.TextServer_shaped_text_get_character_breaks(self, shaped)
}
func (self TextServer) ShapedTextNextCharacterPos(shaped RID, pos int64) int64 {
	return self.Runtime.TextServer_shaped_text_next_character_pos(self, shaped, pos)
}
func (self TextServer) ShapedTextPrevCharacterPos(shaped RID, pos int64) int64 {
	return self.Runtime.TextServer_shaped_text_prev_character_pos(self, shaped, pos)
}
func (self TextServer) ShapedTextClosestCharacterPos(shaped RID, pos int64) int64 {
	return self.Runtime.TextServer_shaped_text_closest_character_pos(self, shaped, pos)
}
func (self TextServer) ShapedTextDraw(shaped RID, canvas RID, pos Vector2, clip_l Float, clip_r Float, color Color) {
	self.Runtime.TextServer_shaped_text_draw(self, shaped, canvas, pos, clip_l, clip_r, color)
}
func (self TextServer) ShapedTextDrawOutline(shaped RID, canvas RID, pos Vector2, clip_l Float, clip_r Float, outline_size int64, color Color) {
	self.Runtime.TextServer_shaped_text_draw_outline(self, shaped, canvas, pos, clip_l, clip_r, outline_size, color)
}
func (self TextServer) ShapedTextGetDominantDirectionInRange(shaped RID, start int64, end int64) TextServerDirection {
	return self.Runtime.TextServer_shaped_text_get_dominant_direction_in_range(self, shaped, start, end)
}
func (self TextServer) FormatNumber(number string, language string) string {
	return self.Runtime.TextServer_format_number(self, number, language)
}
func (self TextServer) ParseNumber(number string, language string) string {
	return self.Runtime.TextServer_parse_number(self, number, language)
}
func (self TextServer) PercentSign(language string) string {
	return self.Runtime.TextServer_percent_sign(self, language)
}
func (self TextServer) StringGetWordBreaks(s string, language string, chars_per_line int64) PackedInt32Array {
	return self.Runtime.TextServer_string_get_word_breaks(self, s, language, chars_per_line)
}
func (self TextServer) StringGetCharacterBreaks(s string, language string) PackedInt32Array {
	return self.Runtime.TextServer_string_get_character_breaks(self, s, language)
}
func (self TextServer) IsConfusable(s string, dict PackedStringArray) int64 {
	return self.Runtime.TextServer_is_confusable(self, s, dict)
}
func (self TextServer) SpoofCheck(s string) bool {
	return self.Runtime.TextServer_spoof_check(self, s)
}
func (self TextServer) StripDiacritics(s string) string {
	return self.Runtime.TextServer_strip_diacritics(self, s)
}
func (self TextServer) IsValidIdentifier(s string) bool {
	return self.Runtime.TextServer_is_valid_identifier(self, s)
}
func (self TextServer) StringToUpper(s string, language string) string {
	return self.Runtime.TextServer_string_to_upper(self, s, language)
}
func (self TextServer) StringToLower(s string, language string) string {
	return self.Runtime.TextServer_string_to_lower(self, s, language)
}
func (self TextServer) ParseStructuredText(parser_type TextServerStructuredTextParser, args Array, text string) ArrayOf[Vector3i] {
	return self.Runtime.TextServer_parse_structured_text(self, parser_type, args, text)
}

type extendsTextServerAdvanced struct {
	_ [0]*extendsTextServerAdvanced
	class
}

func (self TextServerAdvanced) TextServerExtension() TextServerExtension {
	var parent TextServerExtension
	parent.class = self.class
	return parent
}

type extendsTextServerDummy struct {
	_ [0]*extendsTextServerDummy
	class
}

func (self TextServerDummy) TextServerExtension() TextServerExtension {
	var parent TextServerExtension
	parent.class = self.class
	return parent
}

type extendsTextServerExtension struct {
	_ [0]*extendsTextServerExtension
	class
}

func (self TextServerExtension) TextServer() TextServer {
	var parent TextServer
	parent.class = self.class
	return parent
}

type extendsTextServerManager struct {
	_ [0]*extendsTextServerManager
	class
}

func (self TextServerManager) Object() Object {
	var parent Object
	parent.class = self.class
	return parent
}
func (self TextServerManager) AddInterface(intf TextServer) {
	self.Runtime.TextServerManager_add_interface(self, intf)
}
func (self TextServerManager) GetInterfaceCount() int64 {
	return self.Runtime.TextServerManager_get_interface_count(self)
}
func (self TextServerManager) RemoveInterface(intf TextServer) {
	self.Runtime.TextServerManager_remove_interface(self, intf)
}
func (self TextServerManager) GetInterface(idx int64) TextServer {
	return self.Runtime.TextServerManager_get_interface(self, idx)
}
func (self TextServerManager) GetInterfaces() ArrayOf[Dictionary] {
	return self.Runtime.TextServerManager_get_interfaces(self)
}
func (self TextServerManager) FindInterface(name string) TextServer {
	return self.Runtime.TextServerManager_find_interface(self, name)
}
func (self TextServerManager) SetPrimaryInterface(index TextServer) {
	self.Runtime.TextServerManager_set_primary_interface(self, index)
}
func (self TextServerManager) GetPrimaryInterface() TextServer {
	return self.Runtime.TextServerManager_get_primary_interface(self)
}

type extendsTexture struct {
	_ [0]*extendsTexture
	class
}

func (self Texture) Resource() Resource {
	var parent Resource
	parent.class = self.class
	return parent
}

type extendsTexture2D struct {
	_ [0]*extendsTexture2D
	class
}

func (self Texture2D) Texture() Texture { var parent Texture; parent.class = self.class; return parent }
func (self Texture2D) GetWidth() int64 {
	return self.Runtime.Texture2D_get_width(self)
}
func (self Texture2D) GetHeight() int64 {
	return self.Runtime.Texture2D_get_height(self)
}
func (self Texture2D) GetSize() Vector2 {
	return self.Runtime.Texture2D_get_size(self)
}
func (self Texture2D) HasAlpha() bool {
	return self.Runtime.Texture2D_has_alpha(self)
}
func (self Texture2D) Draw(canvas_item RID, position Vector2, modulate Color, transpose bool) {
	self.Runtime.Texture2D_draw(self, canvas_item, position, modulate, transpose)
}
func (self Texture2D) DrawRect(canvas_item RID, rect Rect2, tile bool, modulate Color, transpose bool) {
	self.Runtime.Texture2D_draw_rect(self, canvas_item, rect, tile, modulate, transpose)
}
func (self Texture2D) DrawRectRegion(canvas_item RID, rect Rect2, src_rect Rect2, modulate Color, transpose bool, clip_uv bool) {
	self.Runtime.Texture2D_draw_rect_region(self, canvas_item, rect, src_rect, modulate, transpose, clip_uv)
}
func (self Texture2D) GetImage() Image {
	return self.Runtime.Texture2D_get_image(self)
}
func (self Texture2D) CreatePlaceholder() Resource {
	return self.Runtime.Texture2D_create_placeholder(self)
}

type extendsTexture2DArray struct {
	_ [0]*extendsTexture2DArray
	class
}

func (self Texture2DArray) ImageTextureLayered() ImageTextureLayered {
	var parent ImageTextureLayered
	parent.class = self.class
	return parent
}
func (self Texture2DArray) CreatePlaceholder() Resource {
	return self.Runtime.Texture2DArray_create_placeholder(self)
}

type extendsTexture2DArrayRD struct {
	_ [0]*extendsTexture2DArrayRD
	class
}

func (self Texture2DArrayRD) TextureLayeredRD() TextureLayeredRD {
	var parent TextureLayeredRD
	parent.class = self.class
	return parent
}

type extendsTexture2DRD struct {
	_ [0]*extendsTexture2DRD
	class
}

func (self Texture2DRD) Texture2D() Texture2D {
	var parent Texture2D
	parent.class = self.class
	return parent
}
func (self Texture2DRD) SetTextureRdRid(texture_rd_rid RID) {
	self.Runtime.Texture2DRD_set_texture_rd_rid(self, texture_rd_rid)
}
func (self Texture2DRD) GetTextureRdRid() RID {
	return self.Runtime.Texture2DRD_get_texture_rd_rid(self)
}

type extendsTexture3D struct {
	_ [0]*extendsTexture3D
	class
}

func (self Texture3D) Texture() Texture { var parent Texture; parent.class = self.class; return parent }
func (self Texture3D) GetFormat() ImageFormat {
	return self.Runtime.Texture3D_get_format(self)
}
func (self Texture3D) GetWidth() int64 {
	return self.Runtime.Texture3D_get_width(self)
}
func (self Texture3D) GetHeight() int64 {
	return self.Runtime.Texture3D_get_height(self)
}
func (self Texture3D) GetDepth() int64 {
	return self.Runtime.Texture3D_get_depth(self)
}
func (self Texture3D) HasMipmaps() bool {
	return self.Runtime.Texture3D_has_mipmaps(self)
}
func (self Texture3D) GetData() ArrayOf[Image] {
	return self.Runtime.Texture3D_get_data(self)
}
func (self Texture3D) CreatePlaceholder() Resource {
	return self.Runtime.Texture3D_create_placeholder(self)
}

type extendsTexture3DRD struct {
	_ [0]*extendsTexture3DRD
	class
}

func (self Texture3DRD) Texture3D() Texture3D {
	var parent Texture3D
	parent.class = self.class
	return parent
}
func (self Texture3DRD) SetTextureRdRid(texture_rd_rid RID) {
	self.Runtime.Texture3DRD_set_texture_rd_rid(self, texture_rd_rid)
}
func (self Texture3DRD) GetTextureRdRid() RID {
	return self.Runtime.Texture3DRD_get_texture_rd_rid(self)
}

type extendsTextureButton struct {
	_ [0]*extendsTextureButton
	class
}

func (self TextureButton) BaseButton() BaseButton {
	var parent BaseButton
	parent.class = self.class
	return parent
}
func (self TextureButton) SetTextureNormal(texture Texture2D) {
	self.Runtime.TextureButton_set_texture_normal(self, texture)
}
func (self TextureButton) SetTexturePressed(texture Texture2D) {
	self.Runtime.TextureButton_set_texture_pressed(self, texture)
}
func (self TextureButton) SetTextureHover(texture Texture2D) {
	self.Runtime.TextureButton_set_texture_hover(self, texture)
}
func (self TextureButton) SetTextureDisabled(texture Texture2D) {
	self.Runtime.TextureButton_set_texture_disabled(self, texture)
}
func (self TextureButton) SetTextureFocused(texture Texture2D) {
	self.Runtime.TextureButton_set_texture_focused(self, texture)
}
func (self TextureButton) SetClickMask(mask BitMap) {
	self.Runtime.TextureButton_set_click_mask(self, mask)
}
func (self TextureButton) SetIgnoreTextureSize(ignore bool) {
	self.Runtime.TextureButton_set_ignore_texture_size(self, ignore)
}
func (self TextureButton) SetStretchMode(mode TextureButtonStretchMode) {
	self.Runtime.TextureButton_set_stretch_mode(self, mode)
}
func (self TextureButton) SetFlipH(enable bool) {
	self.Runtime.TextureButton_set_flip_h(self, enable)
}
func (self TextureButton) IsFlippedH() bool {
	return self.Runtime.TextureButton_is_flipped_h(self)
}
func (self TextureButton) SetFlipV(enable bool) {
	self.Runtime.TextureButton_set_flip_v(self, enable)
}
func (self TextureButton) IsFlippedV() bool {
	return self.Runtime.TextureButton_is_flipped_v(self)
}
func (self TextureButton) GetTextureNormal() Texture2D {
	return self.Runtime.TextureButton_get_texture_normal(self)
}
func (self TextureButton) GetTexturePressed() Texture2D {
	return self.Runtime.TextureButton_get_texture_pressed(self)
}
func (self TextureButton) GetTextureHover() Texture2D {
	return self.Runtime.TextureButton_get_texture_hover(self)
}
func (self TextureButton) GetTextureDisabled() Texture2D {
	return self.Runtime.TextureButton_get_texture_disabled(self)
}
func (self TextureButton) GetTextureFocused() Texture2D {
	return self.Runtime.TextureButton_get_texture_focused(self)
}
func (self TextureButton) GetClickMask() BitMap {
	return self.Runtime.TextureButton_get_click_mask(self)
}
func (self TextureButton) GetIgnoreTextureSize() bool {
	return self.Runtime.TextureButton_get_ignore_texture_size(self)
}
func (self TextureButton) GetStretchMode() TextureButtonStretchMode {
	return self.Runtime.TextureButton_get_stretch_mode(self)
}

type extendsTextureCubemapArrayRD struct {
	_ [0]*extendsTextureCubemapArrayRD
	class
}

func (self TextureCubemapArrayRD) TextureLayeredRD() TextureLayeredRD {
	var parent TextureLayeredRD
	parent.class = self.class
	return parent
}

type extendsTextureCubemapRD struct {
	_ [0]*extendsTextureCubemapRD
	class
}

func (self TextureCubemapRD) TextureLayeredRD() TextureLayeredRD {
	var parent TextureLayeredRD
	parent.class = self.class
	return parent
}

type extendsTextureLayered struct {
	_ [0]*extendsTextureLayered
	class
}

func (self TextureLayered) Texture() Texture {
	var parent Texture
	parent.class = self.class
	return parent
}
func (self TextureLayered) GetFormat() ImageFormat {
	return self.Runtime.TextureLayered_get_format(self)
}
func (self TextureLayered) GetLayeredType() TextureLayeredLayeredType {
	return self.Runtime.TextureLayered_get_layered_type(self)
}
func (self TextureLayered) GetWidth() int64 {
	return self.Runtime.TextureLayered_get_width(self)
}
func (self TextureLayered) GetHeight() int64 {
	return self.Runtime.TextureLayered_get_height(self)
}
func (self TextureLayered) GetLayers() int64 {
	return self.Runtime.TextureLayered_get_layers(self)
}
func (self TextureLayered) HasMipmaps() bool {
	return self.Runtime.TextureLayered_has_mipmaps(self)
}
func (self TextureLayered) GetLayerData(layer int64) Image {
	return self.Runtime.TextureLayered_get_layer_data(self, layer)
}

type extendsTextureLayeredRD struct {
	_ [0]*extendsTextureLayeredRD
	class
}

func (self TextureLayeredRD) TextureLayered() TextureLayered {
	var parent TextureLayered
	parent.class = self.class
	return parent
}
func (self TextureLayeredRD) SetTextureRdRid(texture_rd_rid RID) {
	self.Runtime.TextureLayeredRD_set_texture_rd_rid(self, texture_rd_rid)
}
func (self TextureLayeredRD) GetTextureRdRid() RID {
	return self.Runtime.TextureLayeredRD_get_texture_rd_rid(self)
}

type extendsTextureProgressBar struct {
	_ [0]*extendsTextureProgressBar
	class
}

func (self TextureProgressBar) Range() Range {
	var parent Range
	parent.class = self.class
	return parent
}
func (self TextureProgressBar) SetUnderTexture(tex Texture2D) {
	self.Runtime.TextureProgressBar_set_under_texture(self, tex)
}
func (self TextureProgressBar) GetUnderTexture() Texture2D {
	return self.Runtime.TextureProgressBar_get_under_texture(self)
}
func (self TextureProgressBar) SetProgressTexture(tex Texture2D) {
	self.Runtime.TextureProgressBar_set_progress_texture(self, tex)
}
func (self TextureProgressBar) GetProgressTexture() Texture2D {
	return self.Runtime.TextureProgressBar_get_progress_texture(self)
}
func (self TextureProgressBar) SetOverTexture(tex Texture2D) {
	self.Runtime.TextureProgressBar_set_over_texture(self, tex)
}
func (self TextureProgressBar) GetOverTexture() Texture2D {
	return self.Runtime.TextureProgressBar_get_over_texture(self)
}
func (self TextureProgressBar) SetFillMode(mode int64) {
	self.Runtime.TextureProgressBar_set_fill_mode(self, mode)
}
func (self TextureProgressBar) GetFillMode() int64 {
	return self.Runtime.TextureProgressBar_get_fill_mode(self)
}
func (self TextureProgressBar) SetTintUnder(tint Color) {
	self.Runtime.TextureProgressBar_set_tint_under(self, tint)
}
func (self TextureProgressBar) GetTintUnder() Color {
	return self.Runtime.TextureProgressBar_get_tint_under(self)
}
func (self TextureProgressBar) SetTintProgress(tint Color) {
	self.Runtime.TextureProgressBar_set_tint_progress(self, tint)
}
func (self TextureProgressBar) GetTintProgress() Color {
	return self.Runtime.TextureProgressBar_get_tint_progress(self)
}
func (self TextureProgressBar) SetTintOver(tint Color) {
	self.Runtime.TextureProgressBar_set_tint_over(self, tint)
}
func (self TextureProgressBar) GetTintOver() Color {
	return self.Runtime.TextureProgressBar_get_tint_over(self)
}
func (self TextureProgressBar) SetTextureProgressOffset(offset Vector2) {
	self.Runtime.TextureProgressBar_set_texture_progress_offset(self, offset)
}
func (self TextureProgressBar) GetTextureProgressOffset() Vector2 {
	return self.Runtime.TextureProgressBar_get_texture_progress_offset(self)
}
func (self TextureProgressBar) SetRadialInitialAngle(mode Float) {
	self.Runtime.TextureProgressBar_set_radial_initial_angle(self, mode)
}
func (self TextureProgressBar) GetRadialInitialAngle() Float {
	return self.Runtime.TextureProgressBar_get_radial_initial_angle(self)
}
func (self TextureProgressBar) SetRadialCenterOffset(mode Vector2) {
	self.Runtime.TextureProgressBar_set_radial_center_offset(self, mode)
}
func (self TextureProgressBar) GetRadialCenterOffset() Vector2 {
	return self.Runtime.TextureProgressBar_get_radial_center_offset(self)
}
func (self TextureProgressBar) SetFillDegrees(mode Float) {
	self.Runtime.TextureProgressBar_set_fill_degrees(self, mode)
}
func (self TextureProgressBar) GetFillDegrees() Float {
	return self.Runtime.TextureProgressBar_get_fill_degrees(self)
}
func (self TextureProgressBar) SetStretchMargin(margin Side, value int64) {
	self.Runtime.TextureProgressBar_set_stretch_margin(self, margin, value)
}
func (self TextureProgressBar) GetStretchMargin(margin Side) int64 {
	return self.Runtime.TextureProgressBar_get_stretch_margin(self, margin)
}
func (self TextureProgressBar) SetNinePatchStretch(stretch bool) {
	self.Runtime.TextureProgressBar_set_nine_patch_stretch(self, stretch)
}
func (self TextureProgressBar) GetNinePatchStretch() bool {
	return self.Runtime.TextureProgressBar_get_nine_patch_stretch(self)
}

type extendsTextureRect struct {
	_ [0]*extendsTextureRect
	class
}

func (self TextureRect) Control() Control {
	var parent Control
	parent.class = self.class
	return parent
}
func (self TextureRect) SetTexture(texture Texture2D) {
	self.Runtime.TextureRect_set_texture(self, texture)
}
func (self TextureRect) GetTexture() Texture2D {
	return self.Runtime.TextureRect_get_texture(self)
}
func (self TextureRect) SetExpandMode(expand_mode TextureRectExpandMode) {
	self.Runtime.TextureRect_set_expand_mode(self, expand_mode)
}
func (self TextureRect) GetExpandMode() TextureRectExpandMode {
	return self.Runtime.TextureRect_get_expand_mode(self)
}
func (self TextureRect) SetFlipH(enable bool) {
	self.Runtime.TextureRect_set_flip_h(self, enable)
}
func (self TextureRect) IsFlippedH() bool {
	return self.Runtime.TextureRect_is_flipped_h(self)
}
func (self TextureRect) SetFlipV(enable bool) {
	self.Runtime.TextureRect_set_flip_v(self, enable)
}
func (self TextureRect) IsFlippedV() bool {
	return self.Runtime.TextureRect_is_flipped_v(self)
}
func (self TextureRect) SetStretchMode(stretch_mode TextureRectStretchMode) {
	self.Runtime.TextureRect_set_stretch_mode(self, stretch_mode)
}
func (self TextureRect) GetStretchMode() TextureRectStretchMode {
	return self.Runtime.TextureRect_get_stretch_mode(self)
}

type extendsTheme struct {
	_ [0]*extendsTheme
	class
}

func (self Theme) Resource() Resource { var parent Resource; parent.class = self.class; return parent }
func (self Theme) SetIcon(name string, theme_type string, texture Texture2D) {
	self.Runtime.Theme_set_icon(self, name, theme_type, texture)
}
func (self Theme) GetIcon(name string, theme_type string) Texture2D {
	return self.Runtime.Theme_get_icon(self, name, theme_type)
}
func (self Theme) HasIcon(name string, theme_type string) bool {
	return self.Runtime.Theme_has_icon(self, name, theme_type)
}
func (self Theme) RenameIcon(old_name string, name string, theme_type string) {
	self.Runtime.Theme_rename_icon(self, old_name, name, theme_type)
}
func (self Theme) ClearIcon(name string, theme_type string) {
	self.Runtime.Theme_clear_icon(self, name, theme_type)
}
func (self Theme) GetIconList(theme_type string) PackedStringArray {
	return self.Runtime.Theme_get_icon_list(self, theme_type)
}
func (self Theme) GetIconTypeList() PackedStringArray {
	return self.Runtime.Theme_get_icon_type_list(self)
}
func (self Theme) SetStylebox(name string, theme_type string, texture StyleBox) {
	self.Runtime.Theme_set_stylebox(self, name, theme_type, texture)
}
func (self Theme) GetStylebox(name string, theme_type string) StyleBox {
	return self.Runtime.Theme_get_stylebox(self, name, theme_type)
}
func (self Theme) HasStylebox(name string, theme_type string) bool {
	return self.Runtime.Theme_has_stylebox(self, name, theme_type)
}
func (self Theme) RenameStylebox(old_name string, name string, theme_type string) {
	self.Runtime.Theme_rename_stylebox(self, old_name, name, theme_type)
}
func (self Theme) ClearStylebox(name string, theme_type string) {
	self.Runtime.Theme_clear_stylebox(self, name, theme_type)
}
func (self Theme) GetStyleboxList(theme_type string) PackedStringArray {
	return self.Runtime.Theme_get_stylebox_list(self, theme_type)
}
func (self Theme) GetStyleboxTypeList() PackedStringArray {
	return self.Runtime.Theme_get_stylebox_type_list(self)
}
func (self Theme) SetFont(name string, theme_type string, font Font) {
	self.Runtime.Theme_set_font(self, name, theme_type, font)
}
func (self Theme) GetFont(name string, theme_type string) Font {
	return self.Runtime.Theme_get_font(self, name, theme_type)
}
func (self Theme) HasFont(name string, theme_type string) bool {
	return self.Runtime.Theme_has_font(self, name, theme_type)
}
func (self Theme) RenameFont(old_name string, name string, theme_type string) {
	self.Runtime.Theme_rename_font(self, old_name, name, theme_type)
}
func (self Theme) ClearFont(name string, theme_type string) {
	self.Runtime.Theme_clear_font(self, name, theme_type)
}
func (self Theme) GetFontList(theme_type string) PackedStringArray {
	return self.Runtime.Theme_get_font_list(self, theme_type)
}
func (self Theme) GetFontTypeList() PackedStringArray {
	return self.Runtime.Theme_get_font_type_list(self)
}
func (self Theme) SetFontSize(name string, theme_type string, font_size int64) {
	self.Runtime.Theme_set_font_size(self, name, theme_type, font_size)
}
func (self Theme) GetFontSize(name string, theme_type string) int64 {
	return self.Runtime.Theme_get_font_size(self, name, theme_type)
}
func (self Theme) HasFontSize(name string, theme_type string) bool {
	return self.Runtime.Theme_has_font_size(self, name, theme_type)
}
func (self Theme) RenameFontSize(old_name string, name string, theme_type string) {
	self.Runtime.Theme_rename_font_size(self, old_name, name, theme_type)
}
func (self Theme) ClearFontSize(name string, theme_type string) {
	self.Runtime.Theme_clear_font_size(self, name, theme_type)
}
func (self Theme) GetFontSizeList(theme_type string) PackedStringArray {
	return self.Runtime.Theme_get_font_size_list(self, theme_type)
}
func (self Theme) GetFontSizeTypeList() PackedStringArray {
	return self.Runtime.Theme_get_font_size_type_list(self)
}
func (self Theme) SetColor(name string, theme_type string, color Color) {
	self.Runtime.Theme_set_color(self, name, theme_type, color)
}
func (self Theme) GetColor(name string, theme_type string) Color {
	return self.Runtime.Theme_get_color(self, name, theme_type)
}
func (self Theme) HasColor(name string, theme_type string) bool {
	return self.Runtime.Theme_has_color(self, name, theme_type)
}
func (self Theme) RenameColor(old_name string, name string, theme_type string) {
	self.Runtime.Theme_rename_color(self, old_name, name, theme_type)
}
func (self Theme) ClearColor(name string, theme_type string) {
	self.Runtime.Theme_clear_color(self, name, theme_type)
}
func (self Theme) GetColorList(theme_type string) PackedStringArray {
	return self.Runtime.Theme_get_color_list(self, theme_type)
}
func (self Theme) GetColorTypeList() PackedStringArray {
	return self.Runtime.Theme_get_color_type_list(self)
}
func (self Theme) SetConstant(name string, theme_type string, constant int64) {
	self.Runtime.Theme_set_constant(self, name, theme_type, constant)
}
func (self Theme) GetConstant(name string, theme_type string) int64 {
	return self.Runtime.Theme_get_constant(self, name, theme_type)
}
func (self Theme) HasConstant(name string, theme_type string) bool {
	return self.Runtime.Theme_has_constant(self, name, theme_type)
}
func (self Theme) RenameConstant(old_name string, name string, theme_type string) {
	self.Runtime.Theme_rename_constant(self, old_name, name, theme_type)
}
func (self Theme) ClearConstant(name string, theme_type string) {
	self.Runtime.Theme_clear_constant(self, name, theme_type)
}
func (self Theme) GetConstantList(theme_type string) PackedStringArray {
	return self.Runtime.Theme_get_constant_list(self, theme_type)
}
func (self Theme) GetConstantTypeList() PackedStringArray {
	return self.Runtime.Theme_get_constant_type_list(self)
}
func (self Theme) SetDefaultBaseScale(base_scale Float) {
	self.Runtime.Theme_set_default_base_scale(self, base_scale)
}
func (self Theme) GetDefaultBaseScale() Float {
	return self.Runtime.Theme_get_default_base_scale(self)
}
func (self Theme) HasDefaultBaseScale() bool {
	return self.Runtime.Theme_has_default_base_scale(self)
}
func (self Theme) SetDefaultFont(font Font) {
	self.Runtime.Theme_set_default_font(self, font)
}
func (self Theme) GetDefaultFont() Font {
	return self.Runtime.Theme_get_default_font(self)
}
func (self Theme) HasDefaultFont() bool {
	return self.Runtime.Theme_has_default_font(self)
}
func (self Theme) SetDefaultFontSize(font_size int64) {
	self.Runtime.Theme_set_default_font_size(self, font_size)
}
func (self Theme) GetDefaultFontSize() int64 {
	return self.Runtime.Theme_get_default_font_size(self)
}
func (self Theme) HasDefaultFontSize() bool {
	return self.Runtime.Theme_has_default_font_size(self)
}
func (self Theme) SetThemeItem(data_type ThemeDataType, name string, theme_type string, value any) {
	self.Runtime.Theme_set_theme_item(self, data_type, name, theme_type, value)
}
func (self Theme) GetThemeItem(data_type ThemeDataType, name string, theme_type string) any {
	return self.Runtime.Theme_get_theme_item(self, data_type, name, theme_type)
}
func (self Theme) HasThemeItem(data_type ThemeDataType, name string, theme_type string) bool {
	return self.Runtime.Theme_has_theme_item(self, data_type, name, theme_type)
}
func (self Theme) RenameThemeItem(data_type ThemeDataType, old_name string, name string, theme_type string) {
	self.Runtime.Theme_rename_theme_item(self, data_type, old_name, name, theme_type)
}
func (self Theme) ClearThemeItem(data_type ThemeDataType, name string, theme_type string) {
	self.Runtime.Theme_clear_theme_item(self, data_type, name, theme_type)
}
func (self Theme) GetThemeItemList(data_type ThemeDataType, theme_type string) PackedStringArray {
	return self.Runtime.Theme_get_theme_item_list(self, data_type, theme_type)
}
func (self Theme) GetThemeItemTypeList(data_type ThemeDataType) PackedStringArray {
	return self.Runtime.Theme_get_theme_item_type_list(self, data_type)
}
func (self Theme) SetTypeVariation(theme_type string, base_type string) {
	self.Runtime.Theme_set_type_variation(self, theme_type, base_type)
}
func (self Theme) IsTypeVariation(theme_type string, base_type string) bool {
	return self.Runtime.Theme_is_type_variation(self, theme_type, base_type)
}
func (self Theme) ClearTypeVariation(theme_type string) {
	self.Runtime.Theme_clear_type_variation(self, theme_type)
}
func (self Theme) GetTypeVariationBase(theme_type string) string {
	return self.Runtime.Theme_get_type_variation_base(self, theme_type)
}
func (self Theme) GetTypeVariationList(base_type string) PackedStringArray {
	return self.Runtime.Theme_get_type_variation_list(self, base_type)
}
func (self Theme) AddType(theme_type string) {
	self.Runtime.Theme_add_type(self, theme_type)
}
func (self Theme) RemoveType(theme_type string) {
	self.Runtime.Theme_remove_type(self, theme_type)
}
func (self Theme) GetTypeList() PackedStringArray {
	return self.Runtime.Theme_get_type_list(self)
}
func (self Theme) MergeWith(other Theme) {
	self.Runtime.Theme_merge_with(self, other)
}
func (self Theme) Clear() {
	self.Runtime.Theme_clear(self)
}

type extendsThemeDB struct {
	_ [0]*extendsThemeDB
	class
}

func (self ThemeDB) Object() Object { var parent Object; parent.class = self.class; return parent }
func (self ThemeDB) GetDefaultTheme() Theme {
	return self.Runtime.ThemeDB_get_default_theme(self)
}
func (self ThemeDB) GetProjectTheme() Theme {
	return self.Runtime.ThemeDB_get_project_theme(self)
}
func (self ThemeDB) SetFallbackBaseScale(base_scale Float) {
	self.Runtime.ThemeDB_set_fallback_base_scale(self, base_scale)
}
func (self ThemeDB) GetFallbackBaseScale() Float {
	return self.Runtime.ThemeDB_get_fallback_base_scale(self)
}
func (self ThemeDB) SetFallbackFont(font Font) {
	self.Runtime.ThemeDB_set_fallback_font(self, font)
}
func (self ThemeDB) GetFallbackFont() Font {
	return self.Runtime.ThemeDB_get_fallback_font(self)
}
func (self ThemeDB) SetFallbackFontSize(font_size int64) {
	self.Runtime.ThemeDB_set_fallback_font_size(self, font_size)
}
func (self ThemeDB) GetFallbackFontSize() int64 {
	return self.Runtime.ThemeDB_get_fallback_font_size(self)
}
func (self ThemeDB) SetFallbackIcon(icon Texture2D) {
	self.Runtime.ThemeDB_set_fallback_icon(self, icon)
}
func (self ThemeDB) GetFallbackIcon() Texture2D {
	return self.Runtime.ThemeDB_get_fallback_icon(self)
}
func (self ThemeDB) SetFallbackStylebox(stylebox StyleBox) {
	self.Runtime.ThemeDB_set_fallback_stylebox(self, stylebox)
}
func (self ThemeDB) GetFallbackStylebox() StyleBox {
	return self.Runtime.ThemeDB_get_fallback_stylebox(self)
}

type extendsThread struct {
	_ [0]*extendsThread
	class
}

func (self Thread) RefCounted() RefCounted {
	var parent RefCounted
	parent.class = self.class
	return parent
}
func (self Thread) Start(callable Callable, priority ThreadPriority) int64 {
	return self.Runtime.Thread_start(self, callable, priority)
}
func (self Thread) GetId() string {
	return self.Runtime.Thread_get_id(self)
}
func (self Thread) IsStarted() bool {
	return self.Runtime.Thread_is_started(self)
}
func (self Thread) IsAlive() bool {
	return self.Runtime.Thread_is_alive(self)
}
func (self Thread) WaitToFinish() any {
	return self.Runtime.Thread_wait_to_finish(self)
}
func (self Thread) SetThreadSafetyChecksEnabled(enabled bool) {
	self.Runtime.Thread_set_thread_safety_checks_enabled(self, enabled)
}

type extendsTileData struct {
	_ [0]*extendsTileData
	class
}

func (self TileData) Object() Object { var parent Object; parent.class = self.class; return parent }
func (self TileData) SetFlipH(flip_h bool) {
	self.Runtime.TileData_set_flip_h(self, flip_h)
}
func (self TileData) GetFlipH() bool {
	return self.Runtime.TileData_get_flip_h(self)
}
func (self TileData) SetFlipV(flip_v bool) {
	self.Runtime.TileData_set_flip_v(self, flip_v)
}
func (self TileData) GetFlipV() bool {
	return self.Runtime.TileData_get_flip_v(self)
}
func (self TileData) SetTranspose(transpose bool) {
	self.Runtime.TileData_set_transpose(self, transpose)
}
func (self TileData) GetTranspose() bool {
	return self.Runtime.TileData_get_transpose(self)
}
func (self TileData) SetMaterial(material Material) {
	self.Runtime.TileData_set_material(self, material)
}
func (self TileData) GetMaterial() Material {
	return self.Runtime.TileData_get_material(self)
}
func (self TileData) SetTextureOrigin(texture_origin Vector2i) {
	self.Runtime.TileData_set_texture_origin(self, texture_origin)
}
func (self TileData) GetTextureOrigin() Vector2i {
	return self.Runtime.TileData_get_texture_origin(self)
}
func (self TileData) SetModulate(modulate Color) {
	self.Runtime.TileData_set_modulate(self, modulate)
}
func (self TileData) GetModulate() Color {
	return self.Runtime.TileData_get_modulate(self)
}
func (self TileData) SetZIndex(z_index int64) {
	self.Runtime.TileData_set_z_index(self, z_index)
}
func (self TileData) GetZIndex() int64 {
	return self.Runtime.TileData_get_z_index(self)
}
func (self TileData) SetYSortOrigin(y_sort_origin int64) {
	self.Runtime.TileData_set_y_sort_origin(self, y_sort_origin)
}
func (self TileData) GetYSortOrigin() int64 {
	return self.Runtime.TileData_get_y_sort_origin(self)
}
func (self TileData) SetOccluder(layer_id int64, occluder_polygon OccluderPolygon2D) {
	self.Runtime.TileData_set_occluder(self, layer_id, occluder_polygon)
}
func (self TileData) GetOccluder(layer_id int64, flip_h bool, flip_v bool, transpose bool) OccluderPolygon2D {
	return self.Runtime.TileData_get_occluder(self, layer_id, flip_h, flip_v, transpose)
}
func (self TileData) SetConstantLinearVelocity(layer_id int64, velocity Vector2) {
	self.Runtime.TileData_set_constant_linear_velocity(self, layer_id, velocity)
}
func (self TileData) GetConstantLinearVelocity(layer_id int64) Vector2 {
	return self.Runtime.TileData_get_constant_linear_velocity(self, layer_id)
}
func (self TileData) SetConstantAngularVelocity(layer_id int64, velocity Float) {
	self.Runtime.TileData_set_constant_angular_velocity(self, layer_id, velocity)
}
func (self TileData) GetConstantAngularVelocity(layer_id int64) Float {
	return self.Runtime.TileData_get_constant_angular_velocity(self, layer_id)
}
func (self TileData) SetCollisionPolygonsCount(layer_id int64, polygons_count int64) {
	self.Runtime.TileData_set_collision_polygons_count(self, layer_id, polygons_count)
}
func (self TileData) GetCollisionPolygonsCount(layer_id int64) int64 {
	return self.Runtime.TileData_get_collision_polygons_count(self, layer_id)
}
func (self TileData) AddCollisionPolygon(layer_id int64) {
	self.Runtime.TileData_add_collision_polygon(self, layer_id)
}
func (self TileData) RemoveCollisionPolygon(layer_id int64, polygon_index int64) {
	self.Runtime.TileData_remove_collision_polygon(self, layer_id, polygon_index)
}
func (self TileData) SetCollisionPolygonPoints(layer_id int64, polygon_index int64, polygon PackedVector2Array) {
	self.Runtime.TileData_set_collision_polygon_points(self, layer_id, polygon_index, polygon)
}
func (self TileData) GetCollisionPolygonPoints(layer_id int64, polygon_index int64) PackedVector2Array {
	return self.Runtime.TileData_get_collision_polygon_points(self, layer_id, polygon_index)
}
func (self TileData) SetCollisionPolygonOneWay(layer_id int64, polygon_index int64, one_way bool) {
	self.Runtime.TileData_set_collision_polygon_one_way(self, layer_id, polygon_index, one_way)
}
func (self TileData) IsCollisionPolygonOneWay(layer_id int64, polygon_index int64) bool {
	return self.Runtime.TileData_is_collision_polygon_one_way(self, layer_id, polygon_index)
}
func (self TileData) SetCollisionPolygonOneWayMargin(layer_id int64, polygon_index int64, one_way_margin Float) {
	self.Runtime.TileData_set_collision_polygon_one_way_margin(self, layer_id, polygon_index, one_way_margin)
}
func (self TileData) GetCollisionPolygonOneWayMargin(layer_id int64, polygon_index int64) Float {
	return self.Runtime.TileData_get_collision_polygon_one_way_margin(self, layer_id, polygon_index)
}
func (self TileData) SetTerrainSet(terrain_set int64) {
	self.Runtime.TileData_set_terrain_set(self, terrain_set)
}
func (self TileData) GetTerrainSet() int64 {
	return self.Runtime.TileData_get_terrain_set(self)
}
func (self TileData) SetTerrain(terrain int64) {
	self.Runtime.TileData_set_terrain(self, terrain)
}
func (self TileData) GetTerrain() int64 {
	return self.Runtime.TileData_get_terrain(self)
}
func (self TileData) SetTerrainPeeringBit(peering_bit TileSetCellNeighbor, terrain int64) {
	self.Runtime.TileData_set_terrain_peering_bit(self, peering_bit, terrain)
}
func (self TileData) GetTerrainPeeringBit(peering_bit TileSetCellNeighbor) int64 {
	return self.Runtime.TileData_get_terrain_peering_bit(self, peering_bit)
}
func (self TileData) SetNavigationPolygon(layer_id int64, navigation_polygon NavigationPolygon) {
	self.Runtime.TileData_set_navigation_polygon(self, layer_id, navigation_polygon)
}
func (self TileData) GetNavigationPolygon(layer_id int64, flip_h bool, flip_v bool, transpose bool) NavigationPolygon {
	return self.Runtime.TileData_get_navigation_polygon(self, layer_id, flip_h, flip_v, transpose)
}
func (self TileData) SetProbability(probability Float) {
	self.Runtime.TileData_set_probability(self, probability)
}
func (self TileData) GetProbability() Float {
	return self.Runtime.TileData_get_probability(self)
}
func (self TileData) SetCustomData(layer_name string, value any) {
	self.Runtime.TileData_set_custom_data(self, layer_name, value)
}
func (self TileData) GetCustomData(layer_name string) any {
	return self.Runtime.TileData_get_custom_data(self, layer_name)
}
func (self TileData) SetCustomDataByLayerId(layer_id int64, value any) {
	self.Runtime.TileData_set_custom_data_by_layer_id(self, layer_id, value)
}
func (self TileData) GetCustomDataByLayerId(layer_id int64) any {
	return self.Runtime.TileData_get_custom_data_by_layer_id(self, layer_id)
}

type extendsTileMap struct {
	_ [0]*extendsTileMap
	class
}

func (self TileMap) Node2D() Node2D { var parent Node2D; parent.class = self.class; return parent }
func (self TileMap) SetNavigationMap(layer int64, mapping RID) {
	self.Runtime.TileMap_set_navigation_map(self, layer, mapping)
}
func (self TileMap) GetNavigationMap(layer int64) RID {
	return self.Runtime.TileMap_get_navigation_map(self, layer)
}
func (self TileMap) ForceUpdate(layer int64) {
	self.Runtime.TileMap_force_update(self, layer)
}
func (self TileMap) SetTileset(tileset TileSet) {
	self.Runtime.TileMap_set_tileset(self, tileset)
}
func (self TileMap) GetTileset() TileSet {
	return self.Runtime.TileMap_get_tileset(self)
}
func (self TileMap) SetRenderingQuadrantSize(size int64) {
	self.Runtime.TileMap_set_rendering_quadrant_size(self, size)
}
func (self TileMap) GetRenderingQuadrantSize() int64 {
	return self.Runtime.TileMap_get_rendering_quadrant_size(self)
}
func (self TileMap) GetLayersCount() int64 {
	return self.Runtime.TileMap_get_layers_count(self)
}
func (self TileMap) AddLayer(to_position int64) {
	self.Runtime.TileMap_add_layer(self, to_position)
}
func (self TileMap) MoveLayer(layer int64, to_position int64) {
	self.Runtime.TileMap_move_layer(self, layer, to_position)
}
func (self TileMap) RemoveLayer(layer int64) {
	self.Runtime.TileMap_remove_layer(self, layer)
}
func (self TileMap) SetLayerName(layer int64, name string) {
	self.Runtime.TileMap_set_layer_name(self, layer, name)
}
func (self TileMap) GetLayerName(layer int64) string {
	return self.Runtime.TileMap_get_layer_name(self, layer)
}
func (self TileMap) SetLayerEnabled(layer int64, enabled bool) {
	self.Runtime.TileMap_set_layer_enabled(self, layer, enabled)
}
func (self TileMap) IsLayerEnabled(layer int64) bool {
	return self.Runtime.TileMap_is_layer_enabled(self, layer)
}
func (self TileMap) SetLayerModulate(layer int64, modulate Color) {
	self.Runtime.TileMap_set_layer_modulate(self, layer, modulate)
}
func (self TileMap) GetLayerModulate(layer int64) Color {
	return self.Runtime.TileMap_get_layer_modulate(self, layer)
}
func (self TileMap) SetLayerYSortEnabled(layer int64, y_sort_enabled bool) {
	self.Runtime.TileMap_set_layer_y_sort_enabled(self, layer, y_sort_enabled)
}
func (self TileMap) IsLayerYSortEnabled(layer int64) bool {
	return self.Runtime.TileMap_is_layer_y_sort_enabled(self, layer)
}
func (self TileMap) SetLayerYSortOrigin(layer int64, y_sort_origin int64) {
	self.Runtime.TileMap_set_layer_y_sort_origin(self, layer, y_sort_origin)
}
func (self TileMap) GetLayerYSortOrigin(layer int64) int64 {
	return self.Runtime.TileMap_get_layer_y_sort_origin(self, layer)
}
func (self TileMap) SetLayerZIndex(layer int64, z_index int64) {
	self.Runtime.TileMap_set_layer_z_index(self, layer, z_index)
}
func (self TileMap) GetLayerZIndex(layer int64) int64 {
	return self.Runtime.TileMap_get_layer_z_index(self, layer)
}
func (self TileMap) SetLayerNavigationEnabled(layer int64, enabled bool) {
	self.Runtime.TileMap_set_layer_navigation_enabled(self, layer, enabled)
}
func (self TileMap) IsLayerNavigationEnabled(layer int64) bool {
	return self.Runtime.TileMap_is_layer_navigation_enabled(self, layer)
}
func (self TileMap) SetLayerNavigationMap(layer int64, mapping RID) {
	self.Runtime.TileMap_set_layer_navigation_map(self, layer, mapping)
}
func (self TileMap) GetLayerNavigationMap(layer int64) RID {
	return self.Runtime.TileMap_get_layer_navigation_map(self, layer)
}
func (self TileMap) SetCollisionAnimatable(enabled bool) {
	self.Runtime.TileMap_set_collision_animatable(self, enabled)
}
func (self TileMap) IsCollisionAnimatable() bool {
	return self.Runtime.TileMap_is_collision_animatable(self)
}
func (self TileMap) SetCollisionVisibilityMode(collision_visibility_mode TileMapVisibilityMode) {
	self.Runtime.TileMap_set_collision_visibility_mode(self, collision_visibility_mode)
}
func (self TileMap) GetCollisionVisibilityMode() TileMapVisibilityMode {
	return self.Runtime.TileMap_get_collision_visibility_mode(self)
}
func (self TileMap) SetNavigationVisibilityMode(navigation_visibility_mode TileMapVisibilityMode) {
	self.Runtime.TileMap_set_navigation_visibility_mode(self, navigation_visibility_mode)
}
func (self TileMap) GetNavigationVisibilityMode() TileMapVisibilityMode {
	return self.Runtime.TileMap_get_navigation_visibility_mode(self)
}
func (self TileMap) SetCell(layer int64, coords Vector2i, source_id int64, atlas_coords Vector2i, alternative_tile int64) {
	self.Runtime.TileMap_set_cell(self, layer, coords, source_id, atlas_coords, alternative_tile)
}
func (self TileMap) EraseCell(layer int64, coords Vector2i) {
	self.Runtime.TileMap_erase_cell(self, layer, coords)
}
func (self TileMap) GetCellSourceId(layer int64, coords Vector2i, use_proxies bool) int64 {
	return self.Runtime.TileMap_get_cell_source_id(self, layer, coords, use_proxies)
}
func (self TileMap) GetCellAtlasCoords(layer int64, coords Vector2i, use_proxies bool) Vector2i {
	return self.Runtime.TileMap_get_cell_atlas_coords(self, layer, coords, use_proxies)
}
func (self TileMap) GetCellAlternativeTile(layer int64, coords Vector2i, use_proxies bool) int64 {
	return self.Runtime.TileMap_get_cell_alternative_tile(self, layer, coords, use_proxies)
}
func (self TileMap) GetCellTileData(layer int64, coords Vector2i, use_proxies bool) TileData {
	return self.Runtime.TileMap_get_cell_tile_data(self, layer, coords, use_proxies)
}
func (self TileMap) GetCoordsForBodyRid(body RID) Vector2i {
	return self.Runtime.TileMap_get_coords_for_body_rid(self, body)
}
func (self TileMap) GetLayerForBodyRid(body RID) int64 {
	return self.Runtime.TileMap_get_layer_for_body_rid(self, body)
}
func (self TileMap) GetPattern(layer int64, coords_array ArrayOf[Vector2i]) TileMapPattern {
	return self.Runtime.TileMap_get_pattern(self, layer, coords_array)
}
func (self TileMap) MapPattern(position_in_tilemap Vector2i, coords_in_pattern Vector2i, pattern TileMapPattern) Vector2i {
	return self.Runtime.TileMap_map_pattern(self, position_in_tilemap, coords_in_pattern, pattern)
}
func (self TileMap) SetPattern(layer int64, position Vector2i, pattern TileMapPattern) {
	self.Runtime.TileMap_set_pattern(self, layer, position, pattern)
}
func (self TileMap) SetCellsTerrainConnect(layer int64, cells ArrayOf[Vector2i], terrain_set int64, terrain int64, ignore_empty_terrains bool) {
	self.Runtime.TileMap_set_cells_terrain_connect(self, layer, cells, terrain_set, terrain, ignore_empty_terrains)
}
func (self TileMap) SetCellsTerrainPath(layer int64, path ArrayOf[Vector2i], terrain_set int64, terrain int64, ignore_empty_terrains bool) {
	self.Runtime.TileMap_set_cells_terrain_path(self, layer, path, terrain_set, terrain, ignore_empty_terrains)
}
func (self TileMap) FixInvalidTiles() {
	self.Runtime.TileMap_fix_invalid_tiles(self)
}
func (self TileMap) ClearLayer(layer int64) {
	self.Runtime.TileMap_clear_layer(self, layer)
}
func (self TileMap) Clear() {
	self.Runtime.TileMap_clear(self)
}
func (self TileMap) UpdateInternals() {
	self.Runtime.TileMap_update_internals(self)
}
func (self TileMap) NotifyRuntimeTileDataUpdate(layer int64) {
	self.Runtime.TileMap_notify_runtime_tile_data_update(self, layer)
}
func (self TileMap) GetSurroundingCells(coords Vector2i) ArrayOf[Vector2i] {
	return self.Runtime.TileMap_get_surrounding_cells(self, coords)
}
func (self TileMap) GetUsedCells(layer int64) ArrayOf[Vector2i] {
	return self.Runtime.TileMap_get_used_cells(self, layer)
}
func (self TileMap) GetUsedCellsById(layer int64, source_id int64, atlas_coords Vector2i, alternative_tile int64) ArrayOf[Vector2i] {
	return self.Runtime.TileMap_get_used_cells_by_id(self, layer, source_id, atlas_coords, alternative_tile)
}
func (self TileMap) GetUsedRect() Rect2i {
	return self.Runtime.TileMap_get_used_rect(self)
}
func (self TileMap) MapToLocal(map_position Vector2i) Vector2 {
	return self.Runtime.TileMap_map_to_local(self, map_position)
}
func (self TileMap) LocalToMap(local_position Vector2) Vector2i {
	return self.Runtime.TileMap_local_to_map(self, local_position)
}
func (self TileMap) GetNeighborCell(coords Vector2i, neighbor TileSetCellNeighbor) Vector2i {
	return self.Runtime.TileMap_get_neighbor_cell(self, coords, neighbor)
}

type extendsTileMapPattern struct {
	_ [0]*extendsTileMapPattern
	class
}

func (self TileMapPattern) Resource() Resource {
	var parent Resource
	parent.class = self.class
	return parent
}
func (self TileMapPattern) SetCell(coords Vector2i, source_id int64, atlas_coords Vector2i, alternative_tile int64) {
	self.Runtime.TileMapPattern_set_cell(self, coords, source_id, atlas_coords, alternative_tile)
}
func (self TileMapPattern) HasCell(coords Vector2i) bool {
	return self.Runtime.TileMapPattern_has_cell(self, coords)
}
func (self TileMapPattern) RemoveCell(coords Vector2i, update_size bool) {
	self.Runtime.TileMapPattern_remove_cell(self, coords, update_size)
}
func (self TileMapPattern) GetCellSourceId(coords Vector2i) int64 {
	return self.Runtime.TileMapPattern_get_cell_source_id(self, coords)
}
func (self TileMapPattern) GetCellAtlasCoords(coords Vector2i) Vector2i {
	return self.Runtime.TileMapPattern_get_cell_atlas_coords(self, coords)
}
func (self TileMapPattern) GetCellAlternativeTile(coords Vector2i) int64 {
	return self.Runtime.TileMapPattern_get_cell_alternative_tile(self, coords)
}
func (self TileMapPattern) GetUsedCells() ArrayOf[Vector2i] {
	return self.Runtime.TileMapPattern_get_used_cells(self)
}
func (self TileMapPattern) GetSize() Vector2i {
	return self.Runtime.TileMapPattern_get_size(self)
}
func (self TileMapPattern) SetSize(size Vector2i) {
	self.Runtime.TileMapPattern_set_size(self, size)
}
func (self TileMapPattern) IsEmpty() bool {
	return self.Runtime.TileMapPattern_is_empty(self)
}

type extendsTileSet struct {
	_ [0]*extendsTileSet
	class
}

func (self TileSet) Resource() Resource {
	var parent Resource
	parent.class = self.class
	return parent
}
func (self TileSet) GetNextSourceId() int64 {
	return self.Runtime.TileSet_get_next_source_id(self)
}
func (self TileSet) AddSource(source TileSetSource, atlas_source_id_override int64) int64 {
	return self.Runtime.TileSet_add_source(self, source, atlas_source_id_override)
}
func (self TileSet) RemoveSource(source_id int64) {
	self.Runtime.TileSet_remove_source(self, source_id)
}
func (self TileSet) SetSourceId(source_id int64, new_source_id int64) {
	self.Runtime.TileSet_set_source_id(self, source_id, new_source_id)
}
func (self TileSet) GetSourceCount() int64 {
	return self.Runtime.TileSet_get_source_count(self)
}
func (self TileSet) GetSourceId(index int64) int64 {
	return self.Runtime.TileSet_get_source_id(self, index)
}
func (self TileSet) HasSource(source_id int64) bool {
	return self.Runtime.TileSet_has_source(self, source_id)
}
func (self TileSet) GetSource(source_id int64) TileSetSource {
	return self.Runtime.TileSet_get_source(self, source_id)
}
func (self TileSet) SetTileShape(shape TileSetTileShape) {
	self.Runtime.TileSet_set_tile_shape(self, shape)
}
func (self TileSet) GetTileShape() TileSetTileShape {
	return self.Runtime.TileSet_get_tile_shape(self)
}
func (self TileSet) SetTileLayout(layout TileSetTileLayout) {
	self.Runtime.TileSet_set_tile_layout(self, layout)
}
func (self TileSet) GetTileLayout() TileSetTileLayout {
	return self.Runtime.TileSet_get_tile_layout(self)
}
func (self TileSet) SetTileOffsetAxis(alignment TileSetTileOffsetAxis) {
	self.Runtime.TileSet_set_tile_offset_axis(self, alignment)
}
func (self TileSet) GetTileOffsetAxis() TileSetTileOffsetAxis {
	return self.Runtime.TileSet_get_tile_offset_axis(self)
}
func (self TileSet) SetTileSize(size Vector2i) {
	self.Runtime.TileSet_set_tile_size(self, size)
}
func (self TileSet) GetTileSize() Vector2i {
	return self.Runtime.TileSet_get_tile_size(self)
}
func (self TileSet) SetUvClipping(uv_clipping bool) {
	self.Runtime.TileSet_set_uv_clipping(self, uv_clipping)
}
func (self TileSet) IsUvClipping() bool {
	return self.Runtime.TileSet_is_uv_clipping(self)
}
func (self TileSet) GetOcclusionLayersCount() int64 {
	return self.Runtime.TileSet_get_occlusion_layers_count(self)
}
func (self TileSet) AddOcclusionLayer(to_position int64) {
	self.Runtime.TileSet_add_occlusion_layer(self, to_position)
}
func (self TileSet) MoveOcclusionLayer(layer_index int64, to_position int64) {
	self.Runtime.TileSet_move_occlusion_layer(self, layer_index, to_position)
}
func (self TileSet) RemoveOcclusionLayer(layer_index int64) {
	self.Runtime.TileSet_remove_occlusion_layer(self, layer_index)
}
func (self TileSet) SetOcclusionLayerLightMask(layer_index int64, light_mask int64) {
	self.Runtime.TileSet_set_occlusion_layer_light_mask(self, layer_index, light_mask)
}
func (self TileSet) GetOcclusionLayerLightMask(layer_index int64) int64 {
	return self.Runtime.TileSet_get_occlusion_layer_light_mask(self, layer_index)
}
func (self TileSet) SetOcclusionLayerSdfCollision(layer_index int64, sdf_collision bool) {
	self.Runtime.TileSet_set_occlusion_layer_sdf_collision(self, layer_index, sdf_collision)
}
func (self TileSet) GetOcclusionLayerSdfCollision(layer_index int64) bool {
	return self.Runtime.TileSet_get_occlusion_layer_sdf_collision(self, layer_index)
}
func (self TileSet) GetPhysicsLayersCount() int64 {
	return self.Runtime.TileSet_get_physics_layers_count(self)
}
func (self TileSet) AddPhysicsLayer(to_position int64) {
	self.Runtime.TileSet_add_physics_layer(self, to_position)
}
func (self TileSet) MovePhysicsLayer(layer_index int64, to_position int64) {
	self.Runtime.TileSet_move_physics_layer(self, layer_index, to_position)
}
func (self TileSet) RemovePhysicsLayer(layer_index int64) {
	self.Runtime.TileSet_remove_physics_layer(self, layer_index)
}
func (self TileSet) SetPhysicsLayerCollisionLayer(layer_index int64, layer int64) {
	self.Runtime.TileSet_set_physics_layer_collision_layer(self, layer_index, layer)
}
func (self TileSet) GetPhysicsLayerCollisionLayer(layer_index int64) int64 {
	return self.Runtime.TileSet_get_physics_layer_collision_layer(self, layer_index)
}
func (self TileSet) SetPhysicsLayerCollisionMask(layer_index int64, mask int64) {
	self.Runtime.TileSet_set_physics_layer_collision_mask(self, layer_index, mask)
}
func (self TileSet) GetPhysicsLayerCollisionMask(layer_index int64) int64 {
	return self.Runtime.TileSet_get_physics_layer_collision_mask(self, layer_index)
}
func (self TileSet) SetPhysicsLayerPhysicsMaterial(layer_index int64, physics_material PhysicsMaterial) {
	self.Runtime.TileSet_set_physics_layer_physics_material(self, layer_index, physics_material)
}
func (self TileSet) GetPhysicsLayerPhysicsMaterial(layer_index int64) PhysicsMaterial {
	return self.Runtime.TileSet_get_physics_layer_physics_material(self, layer_index)
}
func (self TileSet) GetTerrainSetsCount() int64 {
	return self.Runtime.TileSet_get_terrain_sets_count(self)
}
func (self TileSet) AddTerrainSet(to_position int64) {
	self.Runtime.TileSet_add_terrain_set(self, to_position)
}
func (self TileSet) MoveTerrainSet(terrain_set int64, to_position int64) {
	self.Runtime.TileSet_move_terrain_set(self, terrain_set, to_position)
}
func (self TileSet) RemoveTerrainSet(terrain_set int64) {
	self.Runtime.TileSet_remove_terrain_set(self, terrain_set)
}
func (self TileSet) SetTerrainSetMode(terrain_set int64, mode TileSetTerrainMode) {
	self.Runtime.TileSet_set_terrain_set_mode(self, terrain_set, mode)
}
func (self TileSet) GetTerrainSetMode(terrain_set int64) TileSetTerrainMode {
	return self.Runtime.TileSet_get_terrain_set_mode(self, terrain_set)
}
func (self TileSet) GetTerrainsCount(terrain_set int64) int64 {
	return self.Runtime.TileSet_get_terrains_count(self, terrain_set)
}
func (self TileSet) AddTerrain(terrain_set int64, to_position int64) {
	self.Runtime.TileSet_add_terrain(self, terrain_set, to_position)
}
func (self TileSet) MoveTerrain(terrain_set int64, terrain_index int64, to_position int64) {
	self.Runtime.TileSet_move_terrain(self, terrain_set, terrain_index, to_position)
}
func (self TileSet) RemoveTerrain(terrain_set int64, terrain_index int64) {
	self.Runtime.TileSet_remove_terrain(self, terrain_set, terrain_index)
}
func (self TileSet) SetTerrainName(terrain_set int64, terrain_index int64, name string) {
	self.Runtime.TileSet_set_terrain_name(self, terrain_set, terrain_index, name)
}
func (self TileSet) GetTerrainName(terrain_set int64, terrain_index int64) string {
	return self.Runtime.TileSet_get_terrain_name(self, terrain_set, terrain_index)
}
func (self TileSet) SetTerrainColor(terrain_set int64, terrain_index int64, color Color) {
	self.Runtime.TileSet_set_terrain_color(self, terrain_set, terrain_index, color)
}
func (self TileSet) GetTerrainColor(terrain_set int64, terrain_index int64) Color {
	return self.Runtime.TileSet_get_terrain_color(self, terrain_set, terrain_index)
}
func (self TileSet) GetNavigationLayersCount() int64 {
	return self.Runtime.TileSet_get_navigation_layers_count(self)
}
func (self TileSet) AddNavigationLayer(to_position int64) {
	self.Runtime.TileSet_add_navigation_layer(self, to_position)
}
func (self TileSet) MoveNavigationLayer(layer_index int64, to_position int64) {
	self.Runtime.TileSet_move_navigation_layer(self, layer_index, to_position)
}
func (self TileSet) RemoveNavigationLayer(layer_index int64) {
	self.Runtime.TileSet_remove_navigation_layer(self, layer_index)
}
func (self TileSet) SetNavigationLayerLayers(layer_index int64, layers int64) {
	self.Runtime.TileSet_set_navigation_layer_layers(self, layer_index, layers)
}
func (self TileSet) GetNavigationLayerLayers(layer_index int64) int64 {
	return self.Runtime.TileSet_get_navigation_layer_layers(self, layer_index)
}
func (self TileSet) SetNavigationLayerLayerValue(layer_index int64, layer_number int64, value bool) {
	self.Runtime.TileSet_set_navigation_layer_layer_value(self, layer_index, layer_number, value)
}
func (self TileSet) GetNavigationLayerLayerValue(layer_index int64, layer_number int64) bool {
	return self.Runtime.TileSet_get_navigation_layer_layer_value(self, layer_index, layer_number)
}
func (self TileSet) GetCustomDataLayersCount() int64 {
	return self.Runtime.TileSet_get_custom_data_layers_count(self)
}
func (self TileSet) AddCustomDataLayer(to_position int64) {
	self.Runtime.TileSet_add_custom_data_layer(self, to_position)
}
func (self TileSet) MoveCustomDataLayer(layer_index int64, to_position int64) {
	self.Runtime.TileSet_move_custom_data_layer(self, layer_index, to_position)
}
func (self TileSet) RemoveCustomDataLayer(layer_index int64) {
	self.Runtime.TileSet_remove_custom_data_layer(self, layer_index)
}
func (self TileSet) GetCustomDataLayerByName(layer_name string) int64 {
	return self.Runtime.TileSet_get_custom_data_layer_by_name(self, layer_name)
}
func (self TileSet) SetCustomDataLayerName(layer_index int64, layer_name string) {
	self.Runtime.TileSet_set_custom_data_layer_name(self, layer_index, layer_name)
}
func (self TileSet) GetCustomDataLayerName(layer_index int64) string {
	return self.Runtime.TileSet_get_custom_data_layer_name(self, layer_index)
}
func (self TileSet) SetCustomDataLayerType(layer_index int64, layer_type VariantType) {
	self.Runtime.TileSet_set_custom_data_layer_type(self, layer_index, layer_type)
}
func (self TileSet) GetCustomDataLayerType(layer_index int64) VariantType {
	return self.Runtime.TileSet_get_custom_data_layer_type(self, layer_index)
}
func (self TileSet) SetSourceLevelTileProxy(source_from int64, source_to int64) {
	self.Runtime.TileSet_set_source_level_tile_proxy(self, source_from, source_to)
}
func (self TileSet) GetSourceLevelTileProxy(source_from int64) int64 {
	return self.Runtime.TileSet_get_source_level_tile_proxy(self, source_from)
}
func (self TileSet) HasSourceLevelTileProxy(source_from int64) bool {
	return self.Runtime.TileSet_has_source_level_tile_proxy(self, source_from)
}
func (self TileSet) RemoveSourceLevelTileProxy(source_from int64) {
	self.Runtime.TileSet_remove_source_level_tile_proxy(self, source_from)
}
func (self TileSet) SetCoordsLevelTileProxy(p_source_from int64, coords_from Vector2i, source_to int64, coords_to Vector2i) {
	self.Runtime.TileSet_set_coords_level_tile_proxy(self, p_source_from, coords_from, source_to, coords_to)
}
func (self TileSet) GetCoordsLevelTileProxy(source_from int64, coords_from Vector2i) Array {
	return self.Runtime.TileSet_get_coords_level_tile_proxy(self, source_from, coords_from)
}
func (self TileSet) HasCoordsLevelTileProxy(source_from int64, coords_from Vector2i) bool {
	return self.Runtime.TileSet_has_coords_level_tile_proxy(self, source_from, coords_from)
}
func (self TileSet) RemoveCoordsLevelTileProxy(source_from int64, coords_from Vector2i) {
	self.Runtime.TileSet_remove_coords_level_tile_proxy(self, source_from, coords_from)
}
func (self TileSet) SetAlternativeLevelTileProxy(source_from int64, coords_from Vector2i, alternative_from int64, source_to int64, coords_to Vector2i, alternative_to int64) {
	self.Runtime.TileSet_set_alternative_level_tile_proxy(self, source_from, coords_from, alternative_from, source_to, coords_to, alternative_to)
}
func (self TileSet) GetAlternativeLevelTileProxy(source_from int64, coords_from Vector2i, alternative_from int64) Array {
	return self.Runtime.TileSet_get_alternative_level_tile_proxy(self, source_from, coords_from, alternative_from)
}
func (self TileSet) HasAlternativeLevelTileProxy(source_from int64, coords_from Vector2i, alternative_from int64) bool {
	return self.Runtime.TileSet_has_alternative_level_tile_proxy(self, source_from, coords_from, alternative_from)
}
func (self TileSet) RemoveAlternativeLevelTileProxy(source_from int64, coords_from Vector2i, alternative_from int64) {
	self.Runtime.TileSet_remove_alternative_level_tile_proxy(self, source_from, coords_from, alternative_from)
}
func (self TileSet) MapTileProxy(source_from int64, coords_from Vector2i, alternative_from int64) Array {
	return self.Runtime.TileSet_map_tile_proxy(self, source_from, coords_from, alternative_from)
}
func (self TileSet) CleanupInvalidTileProxies() {
	self.Runtime.TileSet_cleanup_invalid_tile_proxies(self)
}
func (self TileSet) ClearTileProxies() {
	self.Runtime.TileSet_clear_tile_proxies(self)
}
func (self TileSet) AddPattern(pattern TileMapPattern, index int64) int64 {
	return self.Runtime.TileSet_add_pattern(self, pattern, index)
}
func (self TileSet) GetPattern(index int64) TileMapPattern {
	return self.Runtime.TileSet_get_pattern(self, index)
}
func (self TileSet) RemovePattern(index int64) {
	self.Runtime.TileSet_remove_pattern(self, index)
}
func (self TileSet) GetPatternsCount() int64 {
	return self.Runtime.TileSet_get_patterns_count(self)
}

type extendsTileSetAtlasSource struct {
	_ [0]*extendsTileSetAtlasSource
	class
}

func (self TileSetAtlasSource) TileSetSource() TileSetSource {
	var parent TileSetSource
	parent.class = self.class
	return parent
}
func (self TileSetAtlasSource) SetTexture(texture Texture2D) {
	self.Runtime.TileSetAtlasSource_set_texture(self, texture)
}
func (self TileSetAtlasSource) GetTexture() Texture2D {
	return self.Runtime.TileSetAtlasSource_get_texture(self)
}
func (self TileSetAtlasSource) SetMargins(margins Vector2i) {
	self.Runtime.TileSetAtlasSource_set_margins(self, margins)
}
func (self TileSetAtlasSource) GetMargins() Vector2i {
	return self.Runtime.TileSetAtlasSource_get_margins(self)
}
func (self TileSetAtlasSource) SetSeparation(separation Vector2i) {
	self.Runtime.TileSetAtlasSource_set_separation(self, separation)
}
func (self TileSetAtlasSource) GetSeparation() Vector2i {
	return self.Runtime.TileSetAtlasSource_get_separation(self)
}
func (self TileSetAtlasSource) SetTextureRegionSize(texture_region_size Vector2i) {
	self.Runtime.TileSetAtlasSource_set_texture_region_size(self, texture_region_size)
}
func (self TileSetAtlasSource) GetTextureRegionSize() Vector2i {
	return self.Runtime.TileSetAtlasSource_get_texture_region_size(self)
}
func (self TileSetAtlasSource) SetUseTexturePadding(use_texture_padding bool) {
	self.Runtime.TileSetAtlasSource_set_use_texture_padding(self, use_texture_padding)
}
func (self TileSetAtlasSource) GetUseTexturePadding() bool {
	return self.Runtime.TileSetAtlasSource_get_use_texture_padding(self)
}
func (self TileSetAtlasSource) CreateTile(atlas_coords Vector2i, size Vector2i) {
	self.Runtime.TileSetAtlasSource_create_tile(self, atlas_coords, size)
}
func (self TileSetAtlasSource) RemoveTile(atlas_coords Vector2i) {
	self.Runtime.TileSetAtlasSource_remove_tile(self, atlas_coords)
}
func (self TileSetAtlasSource) MoveTileInAtlas(atlas_coords Vector2i, new_atlas_coords Vector2i, new_size Vector2i) {
	self.Runtime.TileSetAtlasSource_move_tile_in_atlas(self, atlas_coords, new_atlas_coords, new_size)
}
func (self TileSetAtlasSource) GetTileSizeInAtlas(atlas_coords Vector2i) Vector2i {
	return self.Runtime.TileSetAtlasSource_get_tile_size_in_atlas(self, atlas_coords)
}
func (self TileSetAtlasSource) HasRoomForTile(atlas_coords Vector2i, size Vector2i, animation_columns int64, animation_separation Vector2i, frames_count int64, ignored_tile Vector2i) bool {
	return self.Runtime.TileSetAtlasSource_has_room_for_tile(self, atlas_coords, size, animation_columns, animation_separation, frames_count, ignored_tile)
}
func (self TileSetAtlasSource) GetTilesToBeRemovedOnChange(texture Texture2D, margins Vector2i, separation Vector2i, texture_region_size Vector2i) PackedVector2Array {
	return self.Runtime.TileSetAtlasSource_get_tiles_to_be_removed_on_change(self, texture, margins, separation, texture_region_size)
}
func (self TileSetAtlasSource) GetTileAtCoords(atlas_coords Vector2i) Vector2i {
	return self.Runtime.TileSetAtlasSource_get_tile_at_coords(self, atlas_coords)
}
func (self TileSetAtlasSource) HasTilesOutsideTexture() bool {
	return self.Runtime.TileSetAtlasSource_has_tiles_outside_texture(self)
}
func (self TileSetAtlasSource) ClearTilesOutsideTexture() {
	self.Runtime.TileSetAtlasSource_clear_tiles_outside_texture(self)
}
func (self TileSetAtlasSource) SetTileAnimationColumns(atlas_coords Vector2i, frame_columns int64) {
	self.Runtime.TileSetAtlasSource_set_tile_animation_columns(self, atlas_coords, frame_columns)
}
func (self TileSetAtlasSource) GetTileAnimationColumns(atlas_coords Vector2i) int64 {
	return self.Runtime.TileSetAtlasSource_get_tile_animation_columns(self, atlas_coords)
}
func (self TileSetAtlasSource) SetTileAnimationSeparation(atlas_coords Vector2i, separation Vector2i) {
	self.Runtime.TileSetAtlasSource_set_tile_animation_separation(self, atlas_coords, separation)
}
func (self TileSetAtlasSource) GetTileAnimationSeparation(atlas_coords Vector2i) Vector2i {
	return self.Runtime.TileSetAtlasSource_get_tile_animation_separation(self, atlas_coords)
}
func (self TileSetAtlasSource) SetTileAnimationSpeed(atlas_coords Vector2i, speed Float) {
	self.Runtime.TileSetAtlasSource_set_tile_animation_speed(self, atlas_coords, speed)
}
func (self TileSetAtlasSource) GetTileAnimationSpeed(atlas_coords Vector2i) Float {
	return self.Runtime.TileSetAtlasSource_get_tile_animation_speed(self, atlas_coords)
}
func (self TileSetAtlasSource) SetTileAnimationMode(atlas_coords Vector2i, mode TileSetAtlasSourceTileAnimationMode) {
	self.Runtime.TileSetAtlasSource_set_tile_animation_mode(self, atlas_coords, mode)
}
func (self TileSetAtlasSource) GetTileAnimationMode(atlas_coords Vector2i) TileSetAtlasSourceTileAnimationMode {
	return self.Runtime.TileSetAtlasSource_get_tile_animation_mode(self, atlas_coords)
}
func (self TileSetAtlasSource) SetTileAnimationFramesCount(atlas_coords Vector2i, frames_count int64) {
	self.Runtime.TileSetAtlasSource_set_tile_animation_frames_count(self, atlas_coords, frames_count)
}
func (self TileSetAtlasSource) GetTileAnimationFramesCount(atlas_coords Vector2i) int64 {
	return self.Runtime.TileSetAtlasSource_get_tile_animation_frames_count(self, atlas_coords)
}
func (self TileSetAtlasSource) SetTileAnimationFrameDuration(atlas_coords Vector2i, frame_index int64, duration Float) {
	self.Runtime.TileSetAtlasSource_set_tile_animation_frame_duration(self, atlas_coords, frame_index, duration)
}
func (self TileSetAtlasSource) GetTileAnimationFrameDuration(atlas_coords Vector2i, frame_index int64) Float {
	return self.Runtime.TileSetAtlasSource_get_tile_animation_frame_duration(self, atlas_coords, frame_index)
}
func (self TileSetAtlasSource) GetTileAnimationTotalDuration(atlas_coords Vector2i) Float {
	return self.Runtime.TileSetAtlasSource_get_tile_animation_total_duration(self, atlas_coords)
}
func (self TileSetAtlasSource) CreateAlternativeTile(atlas_coords Vector2i, alternative_id_override int64) int64 {
	return self.Runtime.TileSetAtlasSource_create_alternative_tile(self, atlas_coords, alternative_id_override)
}
func (self TileSetAtlasSource) RemoveAlternativeTile(atlas_coords Vector2i, alternative_tile int64) {
	self.Runtime.TileSetAtlasSource_remove_alternative_tile(self, atlas_coords, alternative_tile)
}
func (self TileSetAtlasSource) SetAlternativeTileId(atlas_coords Vector2i, alternative_tile int64, new_id int64) {
	self.Runtime.TileSetAtlasSource_set_alternative_tile_id(self, atlas_coords, alternative_tile, new_id)
}
func (self TileSetAtlasSource) GetNextAlternativeTileId(atlas_coords Vector2i) int64 {
	return self.Runtime.TileSetAtlasSource_get_next_alternative_tile_id(self, atlas_coords)
}
func (self TileSetAtlasSource) GetTileData(atlas_coords Vector2i, alternative_tile int64) TileData {
	return self.Runtime.TileSetAtlasSource_get_tile_data(self, atlas_coords, alternative_tile)
}
func (self TileSetAtlasSource) GetAtlasGridSize() Vector2i {
	return self.Runtime.TileSetAtlasSource_get_atlas_grid_size(self)
}
func (self TileSetAtlasSource) GetTileTextureRegion(atlas_coords Vector2i, frame int64) Rect2i {
	return self.Runtime.TileSetAtlasSource_get_tile_texture_region(self, atlas_coords, frame)
}
func (self TileSetAtlasSource) GetRuntimeTexture() Texture2D {
	return self.Runtime.TileSetAtlasSource_get_runtime_texture(self)
}
func (self TileSetAtlasSource) GetRuntimeTileTextureRegion(atlas_coords Vector2i, frame int64) Rect2i {
	return self.Runtime.TileSetAtlasSource_get_runtime_tile_texture_region(self, atlas_coords, frame)
}

type extendsTileSetScenesCollectionSource struct {
	_ [0]*extendsTileSetScenesCollectionSource
	class
}

func (self TileSetScenesCollectionSource) TileSetSource() TileSetSource {
	var parent TileSetSource
	parent.class = self.class
	return parent
}
func (self TileSetScenesCollectionSource) GetSceneTilesCount() int64 {
	return self.Runtime.TileSetScenesCollectionSource_get_scene_tiles_count(self)
}
func (self TileSetScenesCollectionSource) GetSceneTileId(index int64) int64 {
	return self.Runtime.TileSetScenesCollectionSource_get_scene_tile_id(self, index)
}
func (self TileSetScenesCollectionSource) HasSceneTileId(id int64) bool {
	return self.Runtime.TileSetScenesCollectionSource_has_scene_tile_id(self, id)
}
func (self TileSetScenesCollectionSource) CreateSceneTile(packed_scene PackedScene, id_override int64) int64 {
	return self.Runtime.TileSetScenesCollectionSource_create_scene_tile(self, packed_scene, id_override)
}
func (self TileSetScenesCollectionSource) SetSceneTileId(id int64, new_id int64) {
	self.Runtime.TileSetScenesCollectionSource_set_scene_tile_id(self, id, new_id)
}
func (self TileSetScenesCollectionSource) SetSceneTileScene(id int64, packed_scene PackedScene) {
	self.Runtime.TileSetScenesCollectionSource_set_scene_tile_scene(self, id, packed_scene)
}
func (self TileSetScenesCollectionSource) GetSceneTileScene(id int64) PackedScene {
	return self.Runtime.TileSetScenesCollectionSource_get_scene_tile_scene(self, id)
}
func (self TileSetScenesCollectionSource) SetSceneTileDisplayPlaceholder(id int64, display_placeholder bool) {
	self.Runtime.TileSetScenesCollectionSource_set_scene_tile_display_placeholder(self, id, display_placeholder)
}
func (self TileSetScenesCollectionSource) GetSceneTileDisplayPlaceholder(id int64) bool {
	return self.Runtime.TileSetScenesCollectionSource_get_scene_tile_display_placeholder(self, id)
}
func (self TileSetScenesCollectionSource) RemoveSceneTile(id int64) {
	self.Runtime.TileSetScenesCollectionSource_remove_scene_tile(self, id)
}
func (self TileSetScenesCollectionSource) GetNextSceneTileId() int64 {
	return self.Runtime.TileSetScenesCollectionSource_get_next_scene_tile_id(self)
}

type extendsTileSetSource struct {
	_ [0]*extendsTileSetSource
	class
}

func (self TileSetSource) Resource() Resource {
	var parent Resource
	parent.class = self.class
	return parent
}
func (self TileSetSource) GetTilesCount() int64 {
	return self.Runtime.TileSetSource_get_tiles_count(self)
}
func (self TileSetSource) GetTileId(index int64) Vector2i {
	return self.Runtime.TileSetSource_get_tile_id(self, index)
}
func (self TileSetSource) HasTile(atlas_coords Vector2i) bool {
	return self.Runtime.TileSetSource_has_tile(self, atlas_coords)
}
func (self TileSetSource) GetAlternativeTilesCount(atlas_coords Vector2i) int64 {
	return self.Runtime.TileSetSource_get_alternative_tiles_count(self, atlas_coords)
}
func (self TileSetSource) GetAlternativeTileId(atlas_coords Vector2i, index int64) int64 {
	return self.Runtime.TileSetSource_get_alternative_tile_id(self, atlas_coords, index)
}
func (self TileSetSource) HasAlternativeTile(atlas_coords Vector2i, alternative_tile int64) bool {
	return self.Runtime.TileSetSource_has_alternative_tile(self, atlas_coords, alternative_tile)
}

type extendsTime struct {
	_ [0]*extendsTime
	class
}

func (self Time) Object() Object { var parent Object; parent.class = self.class; return parent }
func (self Time) GetDatetimeDictFromUnixTime(unix_time_val int64) Dictionary {
	return self.Runtime.Time_get_datetime_dict_from_unix_time(self, unix_time_val)
}
func (self Time) GetDateDictFromUnixTime(unix_time_val int64) Dictionary {
	return self.Runtime.Time_get_date_dict_from_unix_time(self, unix_time_val)
}
func (self Time) GetTimeDictFromUnixTime(unix_time_val int64) Dictionary {
	return self.Runtime.Time_get_time_dict_from_unix_time(self, unix_time_val)
}
func (self Time) GetDatetimeStringFromUnixTime(unix_time_val int64, use_space bool) string {
	return self.Runtime.Time_get_datetime_string_from_unix_time(self, unix_time_val, use_space)
}
func (self Time) GetDateStringFromUnixTime(unix_time_val int64) string {
	return self.Runtime.Time_get_date_string_from_unix_time(self, unix_time_val)
}
func (self Time) GetTimeStringFromUnixTime(unix_time_val int64) string {
	return self.Runtime.Time_get_time_string_from_unix_time(self, unix_time_val)
}
func (self Time) GetDatetimeDictFromDatetimeString(datetime string, weekday bool) Dictionary {
	return self.Runtime.Time_get_datetime_dict_from_datetime_string(self, datetime, weekday)
}
func (self Time) GetDatetimeStringFromDatetimeDict(datetime Dictionary, use_space bool) string {
	return self.Runtime.Time_get_datetime_string_from_datetime_dict(self, datetime, use_space)
}
func (self Time) GetUnixTimeFromDatetimeDict(datetime Dictionary) int64 {
	return self.Runtime.Time_get_unix_time_from_datetime_dict(self, datetime)
}
func (self Time) GetUnixTimeFromDatetimeString(datetime string) int64 {
	return self.Runtime.Time_get_unix_time_from_datetime_string(self, datetime)
}
func (self Time) GetOffsetStringFromOffsetMinutes(offset_minutes int64) string {
	return self.Runtime.Time_get_offset_string_from_offset_minutes(self, offset_minutes)
}
func (self Time) GetDatetimeDictFromSystem(utc bool) Dictionary {
	return self.Runtime.Time_get_datetime_dict_from_system(self, utc)
}
func (self Time) GetDateDictFromSystem(utc bool) Dictionary {
	return self.Runtime.Time_get_date_dict_from_system(self, utc)
}
func (self Time) GetTimeDictFromSystem(utc bool) Dictionary {
	return self.Runtime.Time_get_time_dict_from_system(self, utc)
}
func (self Time) GetDatetimeStringFromSystem(utc bool, use_space bool) string {
	return self.Runtime.Time_get_datetime_string_from_system(self, utc, use_space)
}
func (self Time) GetDateStringFromSystem(utc bool) string {
	return self.Runtime.Time_get_date_string_from_system(self, utc)
}
func (self Time) GetTimeStringFromSystem(utc bool) string {
	return self.Runtime.Time_get_time_string_from_system(self, utc)
}
func (self Time) GetTimeZoneFromSystem() Dictionary {
	return self.Runtime.Time_get_time_zone_from_system(self)
}
func (self Time) GetUnixTimeFromSystem() Float {
	return self.Runtime.Time_get_unix_time_from_system(self)
}
func (self Time) GetTicksMsec() int64 {
	return self.Runtime.Time_get_ticks_msec(self)
}
func (self Time) GetTicksUsec() int64 {
	return self.Runtime.Time_get_ticks_usec(self)
}

type extendsTimer struct {
	_ [0]*extendsTimer
	class
}

func (self Timer) Node() Node { var parent Node; parent.class = self.class; return parent }
func (self Timer) SetWaitTime(time_sec Float) {
	self.Runtime.Timer_set_wait_time(self, time_sec)
}
func (self Timer) GetWaitTime() Float {
	return self.Runtime.Timer_get_wait_time(self)
}
func (self Timer) SetOneShot(enable bool) {
	self.Runtime.Timer_set_one_shot(self, enable)
}
func (self Timer) IsOneShot() bool {
	return self.Runtime.Timer_is_one_shot(self)
}
func (self Timer) SetAutostart(enable bool) {
	self.Runtime.Timer_set_autostart(self, enable)
}
func (self Timer) HasAutostart() bool {
	return self.Runtime.Timer_has_autostart(self)
}
func (self Timer) Start(time_sec Float) {
	self.Runtime.Timer_start(self, time_sec)
}
func (self Timer) Stop() {
	self.Runtime.Timer_stop(self)
}
func (self Timer) SetPaused(paused bool) {
	self.Runtime.Timer_set_paused(self, paused)
}
func (self Timer) IsPaused() bool {
	return self.Runtime.Timer_is_paused(self)
}
func (self Timer) IsStopped() bool {
	return self.Runtime.Timer_is_stopped(self)
}
func (self Timer) GetTimeLeft() Float {
	return self.Runtime.Timer_get_time_left(self)
}
func (self Timer) SetTimerProcessCallback(callback TimerTimerProcessCallback) {
	self.Runtime.Timer_set_timer_process_callback(self, callback)
}
func (self Timer) GetTimerProcessCallback() TimerTimerProcessCallback {
	return self.Runtime.Timer_get_timer_process_callback(self)
}

type extendsTorusMesh struct {
	_ [0]*extendsTorusMesh
	class
}

func (self TorusMesh) PrimitiveMesh() PrimitiveMesh {
	var parent PrimitiveMesh
	parent.class = self.class
	return parent
}
func (self TorusMesh) SetInnerRadius(radius Float) {
	self.Runtime.TorusMesh_set_inner_radius(self, radius)
}
func (self TorusMesh) GetInnerRadius() Float {
	return self.Runtime.TorusMesh_get_inner_radius(self)
}
func (self TorusMesh) SetOuterRadius(radius Float) {
	self.Runtime.TorusMesh_set_outer_radius(self, radius)
}
func (self TorusMesh) GetOuterRadius() Float {
	return self.Runtime.TorusMesh_get_outer_radius(self)
}
func (self TorusMesh) SetRings(rings int64) {
	self.Runtime.TorusMesh_set_rings(self, rings)
}
func (self TorusMesh) GetRings() int64 {
	return self.Runtime.TorusMesh_get_rings(self)
}
func (self TorusMesh) SetRingSegments(rings int64) {
	self.Runtime.TorusMesh_set_ring_segments(self, rings)
}
func (self TorusMesh) GetRingSegments() int64 {
	return self.Runtime.TorusMesh_get_ring_segments(self)
}

type extendsTouchScreenButton struct {
	_ [0]*extendsTouchScreenButton
	class
}

func (self TouchScreenButton) Node2D() Node2D {
	var parent Node2D
	parent.class = self.class
	return parent
}
func (self TouchScreenButton) SetTextureNormal(texture Texture2D) {
	self.Runtime.TouchScreenButton_set_texture_normal(self, texture)
}
func (self TouchScreenButton) GetTextureNormal() Texture2D {
	return self.Runtime.TouchScreenButton_get_texture_normal(self)
}
func (self TouchScreenButton) SetTexturePressed(texture Texture2D) {
	self.Runtime.TouchScreenButton_set_texture_pressed(self, texture)
}
func (self TouchScreenButton) GetTexturePressed() Texture2D {
	return self.Runtime.TouchScreenButton_get_texture_pressed(self)
}
func (self TouchScreenButton) SetBitmask(bitmask BitMap) {
	self.Runtime.TouchScreenButton_set_bitmask(self, bitmask)
}
func (self TouchScreenButton) GetBitmask() BitMap {
	return self.Runtime.TouchScreenButton_get_bitmask(self)
}
func (self TouchScreenButton) SetShape(shape Shape2D) {
	self.Runtime.TouchScreenButton_set_shape(self, shape)
}
func (self TouchScreenButton) GetShape() Shape2D {
	return self.Runtime.TouchScreenButton_get_shape(self)
}
func (self TouchScreenButton) SetShapeCentered(bool bool) {
	self.Runtime.TouchScreenButton_set_shape_centered(self, bool)
}
func (self TouchScreenButton) IsShapeCentered() bool {
	return self.Runtime.TouchScreenButton_is_shape_centered(self)
}
func (self TouchScreenButton) SetShapeVisible(bool bool) {
	self.Runtime.TouchScreenButton_set_shape_visible(self, bool)
}
func (self TouchScreenButton) IsShapeVisible() bool {
	return self.Runtime.TouchScreenButton_is_shape_visible(self)
}
func (self TouchScreenButton) SetAction(action string) {
	self.Runtime.TouchScreenButton_set_action(self, action)
}
func (self TouchScreenButton) GetAction() string {
	return self.Runtime.TouchScreenButton_get_action(self)
}
func (self TouchScreenButton) SetVisibilityMode(mode TouchScreenButtonVisibilityMode) {
	self.Runtime.TouchScreenButton_set_visibility_mode(self, mode)
}
func (self TouchScreenButton) GetVisibilityMode() TouchScreenButtonVisibilityMode {
	return self.Runtime.TouchScreenButton_get_visibility_mode(self)
}
func (self TouchScreenButton) SetPassbyPress(enabled bool) {
	self.Runtime.TouchScreenButton_set_passby_press(self, enabled)
}
func (self TouchScreenButton) IsPassbyPressEnabled() bool {
	return self.Runtime.TouchScreenButton_is_passby_press_enabled(self)
}
func (self TouchScreenButton) IsPressed() bool {
	return self.Runtime.TouchScreenButton_is_pressed(self)
}

type extendsTranslation struct {
	_ [0]*extendsTranslation
	class
}

func (self Translation) Resource() Resource {
	var parent Resource
	parent.class = self.class
	return parent
}
func (self Translation) SetLocale(locale string) {
	self.Runtime.Translation_set_locale(self, locale)
}
func (self Translation) GetLocale() string {
	return self.Runtime.Translation_get_locale(self)
}
func (self Translation) AddMessage(src_message string, xlated_message string, context string) {
	self.Runtime.Translation_add_message(self, src_message, xlated_message, context)
}
func (self Translation) AddPluralMessage(src_message string, xlated_messages PackedStringArray, context string) {
	self.Runtime.Translation_add_plural_message(self, src_message, xlated_messages, context)
}
func (self Translation) GetMessage(src_message string, context string) string {
	return self.Runtime.Translation_get_message(self, src_message, context)
}
func (self Translation) GetPluralMessage(src_message string, src_plural_message string, n int64, context string) string {
	return self.Runtime.Translation_get_plural_message(self, src_message, src_plural_message, n, context)
}
func (self Translation) EraseMessage(src_message string, context string) {
	self.Runtime.Translation_erase_message(self, src_message, context)
}
func (self Translation) GetMessageList() PackedStringArray {
	return self.Runtime.Translation_get_message_list(self)
}
func (self Translation) GetTranslatedMessageList() PackedStringArray {
	return self.Runtime.Translation_get_translated_message_list(self)
}
func (self Translation) GetMessageCount() int64 {
	return self.Runtime.Translation_get_message_count(self)
}

type extendsTranslationServer struct {
	_ [0]*extendsTranslationServer
	class
}

func (self TranslationServer) Object() Object {
	var parent Object
	parent.class = self.class
	return parent
}
func (self TranslationServer) SetLocale(locale string) {
	self.Runtime.TranslationServer_set_locale(self, locale)
}
func (self TranslationServer) GetLocale() string {
	return self.Runtime.TranslationServer_get_locale(self)
}
func (self TranslationServer) GetToolLocale() string {
	return self.Runtime.TranslationServer_get_tool_locale(self)
}
func (self TranslationServer) CompareLocales(locale_a string, locale_b string) int64 {
	return self.Runtime.TranslationServer_compare_locales(self, locale_a, locale_b)
}
func (self TranslationServer) StandardizeLocale(locale string) string {
	return self.Runtime.TranslationServer_standardize_locale(self, locale)
}
func (self TranslationServer) GetAllLanguages() PackedStringArray {
	return self.Runtime.TranslationServer_get_all_languages(self)
}
func (self TranslationServer) GetLanguageName(language string) string {
	return self.Runtime.TranslationServer_get_language_name(self, language)
}
func (self TranslationServer) GetAllScripts() PackedStringArray {
	return self.Runtime.TranslationServer_get_all_scripts(self)
}
func (self TranslationServer) GetScriptName(script string) string {
	return self.Runtime.TranslationServer_get_script_name(self, script)
}
func (self TranslationServer) GetAllCountries() PackedStringArray {
	return self.Runtime.TranslationServer_get_all_countries(self)
}
func (self TranslationServer) GetCountryName(country string) string {
	return self.Runtime.TranslationServer_get_country_name(self, country)
}
func (self TranslationServer) GetLocaleName(locale string) string {
	return self.Runtime.TranslationServer_get_locale_name(self, locale)
}
func (self TranslationServer) Translate(message string, context string) string {
	return self.Runtime.TranslationServer_translate(self, message, context)
}
func (self TranslationServer) TranslatePlural(message string, plural_message string, n int64, context string) string {
	return self.Runtime.TranslationServer_translate_plural(self, message, plural_message, n, context)
}
func (self TranslationServer) AddTranslation(translation Translation) {
	self.Runtime.TranslationServer_add_translation(self, translation)
}
func (self TranslationServer) RemoveTranslation(translation Translation) {
	self.Runtime.TranslationServer_remove_translation(self, translation)
}
func (self TranslationServer) GetTranslationObject(locale string) Translation {
	return self.Runtime.TranslationServer_get_translation_object(self, locale)
}
func (self TranslationServer) Clear() {
	self.Runtime.TranslationServer_clear(self)
}
func (self TranslationServer) GetLoadedLocales() PackedStringArray {
	return self.Runtime.TranslationServer_get_loaded_locales(self)
}
func (self TranslationServer) IsPseudolocalizationEnabled() bool {
	return self.Runtime.TranslationServer_is_pseudolocalization_enabled(self)
}
func (self TranslationServer) SetPseudolocalizationEnabled(enabled bool) {
	self.Runtime.TranslationServer_set_pseudolocalization_enabled(self, enabled)
}
func (self TranslationServer) ReloadPseudolocalization() {
	self.Runtime.TranslationServer_reload_pseudolocalization(self)
}
func (self TranslationServer) Pseudolocalize(message string) string {
	return self.Runtime.TranslationServer_pseudolocalize(self, message)
}

type extendsTree struct {
	_ [0]*extendsTree
	class
}

func (self Tree) Control() Control { var parent Control; parent.class = self.class; return parent }
func (self Tree) Clear() {
	self.Runtime.Tree_clear(self)
}
func (self Tree) CreateItem(parent TreeItem, index int64) TreeItem {
	return self.Runtime.Tree_create_item(self, parent, index)
}
func (self Tree) GetRoot() TreeItem {
	return self.Runtime.Tree_get_root(self)
}
func (self Tree) SetColumnCustomMinimumWidth(column int64, min_width int64) {
	self.Runtime.Tree_set_column_custom_minimum_width(self, column, min_width)
}
func (self Tree) SetColumnExpand(column int64, expand bool) {
	self.Runtime.Tree_set_column_expand(self, column, expand)
}
func (self Tree) SetColumnExpandRatio(column int64, ratio int64) {
	self.Runtime.Tree_set_column_expand_ratio(self, column, ratio)
}
func (self Tree) SetColumnClipContent(column int64, enable bool) {
	self.Runtime.Tree_set_column_clip_content(self, column, enable)
}
func (self Tree) IsColumnExpanding(column int64) bool {
	return self.Runtime.Tree_is_column_expanding(self, column)
}
func (self Tree) IsColumnClippingContent(column int64) bool {
	return self.Runtime.Tree_is_column_clipping_content(self, column)
}
func (self Tree) GetColumnExpandRatio(column int64) int64 {
	return self.Runtime.Tree_get_column_expand_ratio(self, column)
}
func (self Tree) GetColumnWidth(column int64) int64 {
	return self.Runtime.Tree_get_column_width(self, column)
}
func (self Tree) SetHideRoot(enable bool) {
	self.Runtime.Tree_set_hide_root(self, enable)
}
func (self Tree) IsRootHidden() bool {
	return self.Runtime.Tree_is_root_hidden(self)
}
func (self Tree) GetNextSelected(from TreeItem) TreeItem {
	return self.Runtime.Tree_get_next_selected(self, from)
}
func (self Tree) GetSelected() TreeItem {
	return self.Runtime.Tree_get_selected(self)
}
func (self Tree) SetSelected(item TreeItem, column int64) {
	self.Runtime.Tree_set_selected(self, item, column)
}
func (self Tree) GetSelectedColumn() int64 {
	return self.Runtime.Tree_get_selected_column(self)
}
func (self Tree) GetPressedButton() int64 {
	return self.Runtime.Tree_get_pressed_button(self)
}
func (self Tree) SetSelectMode(mode TreeSelectMode) {
	self.Runtime.Tree_set_select_mode(self, mode)
}
func (self Tree) GetSelectMode() TreeSelectMode {
	return self.Runtime.Tree_get_select_mode(self)
}
func (self Tree) DeselectAll() {
	self.Runtime.Tree_deselect_all(self)
}
func (self Tree) SetColumns(amount int64) {
	self.Runtime.Tree_set_columns(self, amount)
}
func (self Tree) GetColumns() int64 {
	return self.Runtime.Tree_get_columns(self)
}
func (self Tree) GetEdited() TreeItem {
	return self.Runtime.Tree_get_edited(self)
}
func (self Tree) GetEditedColumn() int64 {
	return self.Runtime.Tree_get_edited_column(self)
}
func (self Tree) EditSelected(force_edit bool) bool {
	return self.Runtime.Tree_edit_selected(self, force_edit)
}
func (self Tree) GetCustomPopupRect() Rect2 {
	return self.Runtime.Tree_get_custom_popup_rect(self)
}
func (self Tree) GetItemAreaRect(item TreeItem, column int64, button_index int64) Rect2 {
	return self.Runtime.Tree_get_item_area_rect(self, item, column, button_index)
}
func (self Tree) GetItemAtPosition(position Vector2) TreeItem {
	return self.Runtime.Tree_get_item_at_position(self, position)
}
func (self Tree) GetColumnAtPosition(position Vector2) int64 {
	return self.Runtime.Tree_get_column_at_position(self, position)
}
func (self Tree) GetDropSectionAtPosition(position Vector2) int64 {
	return self.Runtime.Tree_get_drop_section_at_position(self, position)
}
func (self Tree) GetButtonIdAtPosition(position Vector2) int64 {
	return self.Runtime.Tree_get_button_id_at_position(self, position)
}
func (self Tree) EnsureCursorIsVisible() {
	self.Runtime.Tree_ensure_cursor_is_visible(self)
}
func (self Tree) SetColumnTitlesVisible(visible bool) {
	self.Runtime.Tree_set_column_titles_visible(self, visible)
}
func (self Tree) AreColumnTitlesVisible() bool {
	return self.Runtime.Tree_are_column_titles_visible(self)
}
func (self Tree) SetColumnTitle(column int64, title string) {
	self.Runtime.Tree_set_column_title(self, column, title)
}
func (self Tree) GetColumnTitle(column int64) string {
	return self.Runtime.Tree_get_column_title(self, column)
}
func (self Tree) SetColumnTitleAlignment(column int64, title_alignment HorizontalAlignment) {
	self.Runtime.Tree_set_column_title_alignment(self, column, title_alignment)
}
func (self Tree) GetColumnTitleAlignment(column int64) HorizontalAlignment {
	return self.Runtime.Tree_get_column_title_alignment(self, column)
}
func (self Tree) SetColumnTitleDirection(column int64, direction ControlTextDirection) {
	self.Runtime.Tree_set_column_title_direction(self, column, direction)
}
func (self Tree) GetColumnTitleDirection(column int64) ControlTextDirection {
	return self.Runtime.Tree_get_column_title_direction(self, column)
}
func (self Tree) SetColumnTitleLanguage(column int64, language string) {
	self.Runtime.Tree_set_column_title_language(self, column, language)
}
func (self Tree) GetColumnTitleLanguage(column int64) string {
	return self.Runtime.Tree_get_column_title_language(self, column)
}
func (self Tree) GetScroll() Vector2 {
	return self.Runtime.Tree_get_scroll(self)
}
func (self Tree) ScrollToItem(item TreeItem, center_on_item bool) {
	self.Runtime.Tree_scroll_to_item(self, item, center_on_item)
}
func (self Tree) SetHScrollEnabled(h_scroll bool) {
	self.Runtime.Tree_set_h_scroll_enabled(self, h_scroll)
}
func (self Tree) IsHScrollEnabled() bool {
	return self.Runtime.Tree_is_h_scroll_enabled(self)
}
func (self Tree) SetVScrollEnabled(h_scroll bool) {
	self.Runtime.Tree_set_v_scroll_enabled(self, h_scroll)
}
func (self Tree) IsVScrollEnabled() bool {
	return self.Runtime.Tree_is_v_scroll_enabled(self)
}
func (self Tree) SetHideFolding(hide bool) {
	self.Runtime.Tree_set_hide_folding(self, hide)
}
func (self Tree) IsFoldingHidden() bool {
	return self.Runtime.Tree_is_folding_hidden(self)
}
func (self Tree) SetEnableRecursiveFolding(enable bool) {
	self.Runtime.Tree_set_enable_recursive_folding(self, enable)
}
func (self Tree) IsRecursiveFoldingEnabled() bool {
	return self.Runtime.Tree_is_recursive_folding_enabled(self)
}
func (self Tree) SetDropModeFlags(flags int64) {
	self.Runtime.Tree_set_drop_mode_flags(self, flags)
}
func (self Tree) GetDropModeFlags() int64 {
	return self.Runtime.Tree_get_drop_mode_flags(self)
}
func (self Tree) SetAllowRmbSelect(allow bool) {
	self.Runtime.Tree_set_allow_rmb_select(self, allow)
}
func (self Tree) GetAllowRmbSelect() bool {
	return self.Runtime.Tree_get_allow_rmb_select(self)
}
func (self Tree) SetAllowReselect(allow bool) {
	self.Runtime.Tree_set_allow_reselect(self, allow)
}
func (self Tree) GetAllowReselect() bool {
	return self.Runtime.Tree_get_allow_reselect(self)
}
func (self Tree) SetAllowSearch(allow bool) {
	self.Runtime.Tree_set_allow_search(self, allow)
}
func (self Tree) GetAllowSearch() bool {
	return self.Runtime.Tree_get_allow_search(self)
}

type extendsTreeItem struct {
	_ [0]*extendsTreeItem
	class
}

func (self TreeItem) Object() Object { var parent Object; parent.class = self.class; return parent }
func (self TreeItem) SetCellMode(column int64, mode TreeItemTreeCellMode) {
	self.Runtime.TreeItem_set_cell_mode(self, column, mode)
}
func (self TreeItem) GetCellMode(column int64) TreeItemTreeCellMode {
	return self.Runtime.TreeItem_get_cell_mode(self, column)
}
func (self TreeItem) SetEditMultiline(column int64, multiline bool) {
	self.Runtime.TreeItem_set_edit_multiline(self, column, multiline)
}
func (self TreeItem) IsEditMultiline(column int64) bool {
	return self.Runtime.TreeItem_is_edit_multiline(self, column)
}
func (self TreeItem) SetChecked(column int64, checked bool) {
	self.Runtime.TreeItem_set_checked(self, column, checked)
}
func (self TreeItem) SetIndeterminate(column int64, indeterminate bool) {
	self.Runtime.TreeItem_set_indeterminate(self, column, indeterminate)
}
func (self TreeItem) IsChecked(column int64) bool {
	return self.Runtime.TreeItem_is_checked(self, column)
}
func (self TreeItem) IsIndeterminate(column int64) bool {
	return self.Runtime.TreeItem_is_indeterminate(self, column)
}
func (self TreeItem) PropagateCheck(column int64, emit_signal bool) {
	self.Runtime.TreeItem_propagate_check(self, column, emit_signal)
}
func (self TreeItem) SetText(column int64, text string) {
	self.Runtime.TreeItem_set_text(self, column, text)
}
func (self TreeItem) GetText(column int64) string {
	return self.Runtime.TreeItem_get_text(self, column)
}
func (self TreeItem) SetTextDirection(column int64, direction ControlTextDirection) {
	self.Runtime.TreeItem_set_text_direction(self, column, direction)
}
func (self TreeItem) GetTextDirection(column int64) ControlTextDirection {
	return self.Runtime.TreeItem_get_text_direction(self, column)
}
func (self TreeItem) SetAutowrapMode(column int64, autowrap_mode TextServerAutowrapMode) {
	self.Runtime.TreeItem_set_autowrap_mode(self, column, autowrap_mode)
}
func (self TreeItem) GetAutowrapMode(column int64) TextServerAutowrapMode {
	return self.Runtime.TreeItem_get_autowrap_mode(self, column)
}
func (self TreeItem) SetTextOverrunBehavior(column int64, overrun_behavior TextServerOverrunBehavior) {
	self.Runtime.TreeItem_set_text_overrun_behavior(self, column, overrun_behavior)
}
func (self TreeItem) GetTextOverrunBehavior(column int64) TextServerOverrunBehavior {
	return self.Runtime.TreeItem_get_text_overrun_behavior(self, column)
}
func (self TreeItem) SetStructuredTextBidiOverride(column int64, parser TextServerStructuredTextParser) {
	self.Runtime.TreeItem_set_structured_text_bidi_override(self, column, parser)
}
func (self TreeItem) GetStructuredTextBidiOverride(column int64) TextServerStructuredTextParser {
	return self.Runtime.TreeItem_get_structured_text_bidi_override(self, column)
}
func (self TreeItem) SetStructuredTextBidiOverrideOptions(column int64, args Array) {
	self.Runtime.TreeItem_set_structured_text_bidi_override_options(self, column, args)
}
func (self TreeItem) GetStructuredTextBidiOverrideOptions(column int64) Array {
	return self.Runtime.TreeItem_get_structured_text_bidi_override_options(self, column)
}
func (self TreeItem) SetLanguage(column int64, language string) {
	self.Runtime.TreeItem_set_language(self, column, language)
}
func (self TreeItem) GetLanguage(column int64) string {
	return self.Runtime.TreeItem_get_language(self, column)
}
func (self TreeItem) SetSuffix(column int64, text string) {
	self.Runtime.TreeItem_set_suffix(self, column, text)
}
func (self TreeItem) GetSuffix(column int64) string {
	return self.Runtime.TreeItem_get_suffix(self, column)
}
func (self TreeItem) SetIcon(column int64, texture Texture2D) {
	self.Runtime.TreeItem_set_icon(self, column, texture)
}
func (self TreeItem) GetIcon(column int64) Texture2D {
	return self.Runtime.TreeItem_get_icon(self, column)
}
func (self TreeItem) SetIconRegion(column int64, region Rect2) {
	self.Runtime.TreeItem_set_icon_region(self, column, region)
}
func (self TreeItem) GetIconRegion(column int64) Rect2 {
	return self.Runtime.TreeItem_get_icon_region(self, column)
}
func (self TreeItem) SetIconMaxWidth(column int64, width int64) {
	self.Runtime.TreeItem_set_icon_max_width(self, column, width)
}
func (self TreeItem) GetIconMaxWidth(column int64) int64 {
	return self.Runtime.TreeItem_get_icon_max_width(self, column)
}
func (self TreeItem) SetIconModulate(column int64, modulate Color) {
	self.Runtime.TreeItem_set_icon_modulate(self, column, modulate)
}
func (self TreeItem) GetIconModulate(column int64) Color {
	return self.Runtime.TreeItem_get_icon_modulate(self, column)
}
func (self TreeItem) SetRange(column int64, value Float) {
	self.Runtime.TreeItem_set_range(self, column, value)
}
func (self TreeItem) GetRange(column int64) Float {
	return self.Runtime.TreeItem_get_range(self, column)
}
func (self TreeItem) SetRangeConfig(column int64, min Float, max Float, step Float, expr bool) {
	self.Runtime.TreeItem_set_range_config(self, column, min, max, step, expr)
}
func (self TreeItem) GetRangeConfig(column int64) Dictionary {
	return self.Runtime.TreeItem_get_range_config(self, column)
}
func (self TreeItem) SetMetadata(column int64, meta any) {
	self.Runtime.TreeItem_set_metadata(self, column, meta)
}
func (self TreeItem) GetMetadata(column int64) any {
	return self.Runtime.TreeItem_get_metadata(self, column)
}
func (self TreeItem) SetCustomDraw(column int64, object Object, callback string) {
	self.Runtime.TreeItem_set_custom_draw(self, column, object, callback)
}
func (self TreeItem) SetCollapsed(enable bool) {
	self.Runtime.TreeItem_set_collapsed(self, enable)
}
func (self TreeItem) IsCollapsed() bool {
	return self.Runtime.TreeItem_is_collapsed(self)
}
func (self TreeItem) SetCollapsedRecursive(enable bool) {
	self.Runtime.TreeItem_set_collapsed_recursive(self, enable)
}
func (self TreeItem) IsAnyCollapsed(only_visible bool) bool {
	return self.Runtime.TreeItem_is_any_collapsed(self, only_visible)
}
func (self TreeItem) SetVisible(enable bool) {
	self.Runtime.TreeItem_set_visible(self, enable)
}
func (self TreeItem) IsVisible() bool {
	return self.Runtime.TreeItem_is_visible(self)
}
func (self TreeItem) UncollapseTree() {
	self.Runtime.TreeItem_uncollapse_tree(self)
}
func (self TreeItem) SetCustomMinimumHeight(height int64) {
	self.Runtime.TreeItem_set_custom_minimum_height(self, height)
}
func (self TreeItem) GetCustomMinimumHeight() int64 {
	return self.Runtime.TreeItem_get_custom_minimum_height(self)
}
func (self TreeItem) SetSelectable(column int64, selectable bool) {
	self.Runtime.TreeItem_set_selectable(self, column, selectable)
}
func (self TreeItem) IsSelectable(column int64) bool {
	return self.Runtime.TreeItem_is_selectable(self, column)
}
func (self TreeItem) IsSelected(column int64) bool {
	return self.Runtime.TreeItem_is_selected(self, column)
}
func (self TreeItem) Select(column int64) {
	self.Runtime.TreeItem_select(self, column)
}
func (self TreeItem) Deselect(column int64) {
	self.Runtime.TreeItem_deselect(self, column)
}
func (self TreeItem) SetEditable(column int64, enabled bool) {
	self.Runtime.TreeItem_set_editable(self, column, enabled)
}
func (self TreeItem) IsEditable(column int64) bool {
	return self.Runtime.TreeItem_is_editable(self, column)
}
func (self TreeItem) SetCustomColor(column int64, color Color) {
	self.Runtime.TreeItem_set_custom_color(self, column, color)
}
func (self TreeItem) GetCustomColor(column int64) Color {
	return self.Runtime.TreeItem_get_custom_color(self, column)
}
func (self TreeItem) ClearCustomColor(column int64) {
	self.Runtime.TreeItem_clear_custom_color(self, column)
}
func (self TreeItem) SetCustomFont(column int64, font Font) {
	self.Runtime.TreeItem_set_custom_font(self, column, font)
}
func (self TreeItem) GetCustomFont(column int64) Font {
	return self.Runtime.TreeItem_get_custom_font(self, column)
}
func (self TreeItem) SetCustomFontSize(column int64, font_size int64) {
	self.Runtime.TreeItem_set_custom_font_size(self, column, font_size)
}
func (self TreeItem) GetCustomFontSize(column int64) int64 {
	return self.Runtime.TreeItem_get_custom_font_size(self, column)
}
func (self TreeItem) SetCustomBgColor(column int64, color Color, just_outline bool) {
	self.Runtime.TreeItem_set_custom_bg_color(self, column, color, just_outline)
}
func (self TreeItem) ClearCustomBgColor(column int64) {
	self.Runtime.TreeItem_clear_custom_bg_color(self, column)
}
func (self TreeItem) GetCustomBgColor(column int64) Color {
	return self.Runtime.TreeItem_get_custom_bg_color(self, column)
}
func (self TreeItem) SetCustomAsButton(column int64, enable bool) {
	self.Runtime.TreeItem_set_custom_as_button(self, column, enable)
}
func (self TreeItem) IsCustomSetAsButton(column int64) bool {
	return self.Runtime.TreeItem_is_custom_set_as_button(self, column)
}
func (self TreeItem) AddButton(column int64, button Texture2D, id int64, disabled bool, tooltip_text string) {
	self.Runtime.TreeItem_add_button(self, column, button, id, disabled, tooltip_text)
}
func (self TreeItem) GetButtonCount(column int64) int64 {
	return self.Runtime.TreeItem_get_button_count(self, column)
}
func (self TreeItem) GetButtonTooltipText(column int64, button_index int64) string {
	return self.Runtime.TreeItem_get_button_tooltip_text(self, column, button_index)
}
func (self TreeItem) GetButtonId(column int64, button_index int64) int64 {
	return self.Runtime.TreeItem_get_button_id(self, column, button_index)
}
func (self TreeItem) GetButtonById(column int64, id int64) int64 {
	return self.Runtime.TreeItem_get_button_by_id(self, column, id)
}
func (self TreeItem) GetButton(column int64, button_index int64) Texture2D {
	return self.Runtime.TreeItem_get_button(self, column, button_index)
}
func (self TreeItem) SetButtonTooltipText(column int64, button_index int64, tooltip string) {
	self.Runtime.TreeItem_set_button_tooltip_text(self, column, button_index, tooltip)
}
func (self TreeItem) SetButton(column int64, button_index int64, button Texture2D) {
	self.Runtime.TreeItem_set_button(self, column, button_index, button)
}
func (self TreeItem) EraseButton(column int64, button_index int64) {
	self.Runtime.TreeItem_erase_button(self, column, button_index)
}
func (self TreeItem) SetButtonDisabled(column int64, button_index int64, disabled bool) {
	self.Runtime.TreeItem_set_button_disabled(self, column, button_index, disabled)
}
func (self TreeItem) SetButtonColor(column int64, button_index int64, color Color) {
	self.Runtime.TreeItem_set_button_color(self, column, button_index, color)
}
func (self TreeItem) IsButtonDisabled(column int64, button_index int64) bool {
	return self.Runtime.TreeItem_is_button_disabled(self, column, button_index)
}
func (self TreeItem) SetTooltipText(column int64, tooltip string) {
	self.Runtime.TreeItem_set_tooltip_text(self, column, tooltip)
}
func (self TreeItem) GetTooltipText(column int64) string {
	return self.Runtime.TreeItem_get_tooltip_text(self, column)
}
func (self TreeItem) SetTextAlignment(column int64, text_alignment HorizontalAlignment) {
	self.Runtime.TreeItem_set_text_alignment(self, column, text_alignment)
}
func (self TreeItem) GetTextAlignment(column int64) HorizontalAlignment {
	return self.Runtime.TreeItem_get_text_alignment(self, column)
}
func (self TreeItem) SetExpandRight(column int64, enable bool) {
	self.Runtime.TreeItem_set_expand_right(self, column, enable)
}
func (self TreeItem) GetExpandRight(column int64) bool {
	return self.Runtime.TreeItem_get_expand_right(self, column)
}
func (self TreeItem) SetDisableFolding(disable bool) {
	self.Runtime.TreeItem_set_disable_folding(self, disable)
}
func (self TreeItem) IsFoldingDisabled() bool {
	return self.Runtime.TreeItem_is_folding_disabled(self)
}
func (self TreeItem) CreateChild(index int64) TreeItem {
	return self.Runtime.TreeItem_create_child(self, index)
}
func (self TreeItem) AddChild(child TreeItem) {
	self.Runtime.TreeItem_add_child(self, child)
}
func (self TreeItem) RemoveChild(child TreeItem) {
	self.Runtime.TreeItem_remove_child(self, child)
}
func (self TreeItem) GetTree() Tree {
	return self.Runtime.TreeItem_get_tree(self)
}
func (self TreeItem) GetNext() TreeItem {
	return self.Runtime.TreeItem_get_next(self)
}
func (self TreeItem) GetPrev() TreeItem {
	return self.Runtime.TreeItem_get_prev(self)
}
func (self TreeItem) GetParent() TreeItem {
	return self.Runtime.TreeItem_get_parent(self)
}
func (self TreeItem) GetFirstChild() TreeItem {
	return self.Runtime.TreeItem_get_first_child(self)
}
func (self TreeItem) GetNextInTree(wrap bool) TreeItem {
	return self.Runtime.TreeItem_get_next_in_tree(self, wrap)
}
func (self TreeItem) GetPrevInTree(wrap bool) TreeItem {
	return self.Runtime.TreeItem_get_prev_in_tree(self, wrap)
}
func (self TreeItem) GetNextVisible(wrap bool) TreeItem {
	return self.Runtime.TreeItem_get_next_visible(self, wrap)
}
func (self TreeItem) GetPrevVisible(wrap bool) TreeItem {
	return self.Runtime.TreeItem_get_prev_visible(self, wrap)
}
func (self TreeItem) GetChild(index int64) TreeItem {
	return self.Runtime.TreeItem_get_child(self, index)
}
func (self TreeItem) GetChildCount() int64 {
	return self.Runtime.TreeItem_get_child_count(self)
}
func (self TreeItem) GetChildren() ArrayOf[TreeItem] {
	return self.Runtime.TreeItem_get_children(self)
}
func (self TreeItem) GetIndex() int64 {
	return self.Runtime.TreeItem_get_index(self)
}
func (self TreeItem) MoveBefore(item TreeItem) {
	self.Runtime.TreeItem_move_before(self, item)
}
func (self TreeItem) MoveAfter(item TreeItem) {
	self.Runtime.TreeItem_move_after(self, item)
}
func (self TreeItem) CallRecursive(method string) {
	self.Runtime.TreeItem_call_recursive(self, method)
}

type extendsTriangleMesh struct {
	_ [0]*extendsTriangleMesh
	class
}

func (self TriangleMesh) RefCounted() RefCounted {
	var parent RefCounted
	parent.class = self.class
	return parent
}

type extendsTubeTrailMesh struct {
	_ [0]*extendsTubeTrailMesh
	class
}

func (self TubeTrailMesh) PrimitiveMesh() PrimitiveMesh {
	var parent PrimitiveMesh
	parent.class = self.class
	return parent
}
func (self TubeTrailMesh) SetRadius(radius Float) {
	self.Runtime.TubeTrailMesh_set_radius(self, radius)
}
func (self TubeTrailMesh) GetRadius() Float {
	return self.Runtime.TubeTrailMesh_get_radius(self)
}
func (self TubeTrailMesh) SetRadialSteps(radial_steps int64) {
	self.Runtime.TubeTrailMesh_set_radial_steps(self, radial_steps)
}
func (self TubeTrailMesh) GetRadialSteps() int64 {
	return self.Runtime.TubeTrailMesh_get_radial_steps(self)
}
func (self TubeTrailMesh) SetSections(sections int64) {
	self.Runtime.TubeTrailMesh_set_sections(self, sections)
}
func (self TubeTrailMesh) GetSections() int64 {
	return self.Runtime.TubeTrailMesh_get_sections(self)
}
func (self TubeTrailMesh) SetSectionLength(section_length Float) {
	self.Runtime.TubeTrailMesh_set_section_length(self, section_length)
}
func (self TubeTrailMesh) GetSectionLength() Float {
	return self.Runtime.TubeTrailMesh_get_section_length(self)
}
func (self TubeTrailMesh) SetSectionRings(section_rings int64) {
	self.Runtime.TubeTrailMesh_set_section_rings(self, section_rings)
}
func (self TubeTrailMesh) GetSectionRings() int64 {
	return self.Runtime.TubeTrailMesh_get_section_rings(self)
}
func (self TubeTrailMesh) SetCapTop(cap_top bool) {
	self.Runtime.TubeTrailMesh_set_cap_top(self, cap_top)
}
func (self TubeTrailMesh) IsCapTop() bool {
	return self.Runtime.TubeTrailMesh_is_cap_top(self)
}
func (self TubeTrailMesh) SetCapBottom(cap_bottom bool) {
	self.Runtime.TubeTrailMesh_set_cap_bottom(self, cap_bottom)
}
func (self TubeTrailMesh) IsCapBottom() bool {
	return self.Runtime.TubeTrailMesh_is_cap_bottom(self)
}
func (self TubeTrailMesh) SetCurve(curve Curve) {
	self.Runtime.TubeTrailMesh_set_curve(self, curve)
}
func (self TubeTrailMesh) GetCurve() Curve {
	return self.Runtime.TubeTrailMesh_get_curve(self)
}

type extendsTween struct {
	_ [0]*extendsTween
	class
}

func (self Tween) RefCounted() RefCounted {
	var parent RefCounted
	parent.class = self.class
	return parent
}
func (self Tween) TweenProperty(object Object, property NodePath, final_val any, duration Float) PropertyTweener {
	return self.Runtime.Tween_tween_property(self, object, property, final_val, duration)
}
func (self Tween) TweenInterval(time Float) IntervalTweener {
	return self.Runtime.Tween_tween_interval(self, time)
}
func (self Tween) TweenCallback(callback Callable) CallbackTweener {
	return self.Runtime.Tween_tween_callback(self, callback)
}
func (self Tween) TweenMethod(method Callable, from any, to any, duration Float) MethodTweener {
	return self.Runtime.Tween_tween_method(self, method, from, to, duration)
}
func (self Tween) CustomStep(delta Float) bool {
	return self.Runtime.Tween_custom_step(self, delta)
}
func (self Tween) Stop() {
	self.Runtime.Tween_stop(self)
}
func (self Tween) Pause() {
	self.Runtime.Tween_pause(self)
}
func (self Tween) Play() {
	self.Runtime.Tween_play(self)
}
func (self Tween) Kill() {
	self.Runtime.Tween_kill(self)
}
func (self Tween) GetTotalElapsedTime() Float {
	return self.Runtime.Tween_get_total_elapsed_time(self)
}
func (self Tween) IsRunning() bool {
	return self.Runtime.Tween_is_running(self)
}
func (self Tween) IsValid() bool {
	return self.Runtime.Tween_is_valid(self)
}
func (self Tween) BindNode(node Node) Tween {
	return self.Runtime.Tween_bind_node(self, node)
}
func (self Tween) SetProcessMode(mode TweenTweenProcessMode) Tween {
	return self.Runtime.Tween_set_process_mode(self, mode)
}
func (self Tween) SetPauseMode(mode TweenTweenPauseMode) Tween {
	return self.Runtime.Tween_set_pause_mode(self, mode)
}
func (self Tween) SetParallel(parallel bool) Tween {
	return self.Runtime.Tween_set_parallel(self, parallel)
}
func (self Tween) SetLoops(loops int64) Tween {
	return self.Runtime.Tween_set_loops(self, loops)
}
func (self Tween) GetLoopsLeft() int64 {
	return self.Runtime.Tween_get_loops_left(self)
}
func (self Tween) SetSpeedScale(speed Float) Tween {
	return self.Runtime.Tween_set_speed_scale(self, speed)
}
func (self Tween) SetTrans(trans TweenTransitionType) Tween {
	return self.Runtime.Tween_set_trans(self, trans)
}
func (self Tween) SetEase(ease TweenEaseType) Tween {
	return self.Runtime.Tween_set_ease(self, ease)
}
func (self Tween) Parallel() Tween {
	return self.Runtime.Tween_parallel(self)
}
func (self Tween) Chain() Tween {
	return self.Runtime.Tween_chain(self)
}
func (self Tween) InterpolateValue(initial_value any, delta_value any, elapsed_time Float, duration Float, trans_type TweenTransitionType, ease_type TweenEaseType) any {
	return self.Runtime.Tween_interpolate_value(self, initial_value, delta_value, elapsed_time, duration, trans_type, ease_type)
}

type extendsTweener struct {
	_ [0]*extendsTweener
	class
}

func (self Tweener) RefCounted() RefCounted {
	var parent RefCounted
	parent.class = self.class
	return parent
}

type extendsUDPServer struct {
	_ [0]*extendsUDPServer
	class
}

func (self UDPServer) RefCounted() RefCounted {
	var parent RefCounted
	parent.class = self.class
	return parent
}
func (self UDPServer) Listen(port int64, bind_address string) int64 {
	return self.Runtime.UDPServer_listen(self, port, bind_address)
}
func (self UDPServer) Poll() int64 {
	return self.Runtime.UDPServer_poll(self)
}
func (self UDPServer) IsConnectionAvailable() bool {
	return self.Runtime.UDPServer_is_connection_available(self)
}
func (self UDPServer) GetLocalPort() int64 {
	return self.Runtime.UDPServer_get_local_port(self)
}
func (self UDPServer) IsListening() bool {
	return self.Runtime.UDPServer_is_listening(self)
}
func (self UDPServer) TakeConnection() PacketPeerUDP {
	return self.Runtime.UDPServer_take_connection(self)
}
func (self UDPServer) Stop() {
	self.Runtime.UDPServer_stop(self)
}
func (self UDPServer) SetMaxPendingConnections(max_pending_connections int64) {
	self.Runtime.UDPServer_set_max_pending_connections(self, max_pending_connections)
}
func (self UDPServer) GetMaxPendingConnections() int64 {
	return self.Runtime.UDPServer_get_max_pending_connections(self)
}

type extendsUPNP struct {
	_ [0]*extendsUPNP
	class
}

func (self UPNP) RefCounted() RefCounted {
	var parent RefCounted
	parent.class = self.class
	return parent
}
func (self UPNP) GetDeviceCount() int64 {
	return self.Runtime.UPNP_get_device_count(self)
}
func (self UPNP) GetDevice(index int64) UPNPDevice {
	return self.Runtime.UPNP_get_device(self, index)
}
func (self UPNP) AddDevice(device UPNPDevice) {
	self.Runtime.UPNP_add_device(self, device)
}
func (self UPNP) SetDevice(index int64, device UPNPDevice) {
	self.Runtime.UPNP_set_device(self, index, device)
}
func (self UPNP) RemoveDevice(index int64) {
	self.Runtime.UPNP_remove_device(self, index)
}
func (self UPNP) ClearDevices() {
	self.Runtime.UPNP_clear_devices(self)
}
func (self UPNP) GetGateway() UPNPDevice {
	return self.Runtime.UPNP_get_gateway(self)
}
func (self UPNP) Discover(timeout int64, ttl int64, device_filter string) int64 {
	return self.Runtime.UPNP_discover(self, timeout, ttl, device_filter)
}
func (self UPNP) QueryExternalAddress() string {
	return self.Runtime.UPNP_query_external_address(self)
}
func (self UPNP) AddPortMapping(port int64, port_internal int64, desc string, proto string, duration int64) int64 {
	return self.Runtime.UPNP_add_port_mapping(self, port, port_internal, desc, proto, duration)
}
func (self UPNP) DeletePortMapping(port int64, proto string) int64 {
	return self.Runtime.UPNP_delete_port_mapping(self, port, proto)
}
func (self UPNP) SetDiscoverMulticastIf(m_if string) {
	self.Runtime.UPNP_set_discover_multicast_if(self, m_if)
}
func (self UPNP) GetDiscoverMulticastIf() string {
	return self.Runtime.UPNP_get_discover_multicast_if(self)
}
func (self UPNP) SetDiscoverLocalPort(port int64) {
	self.Runtime.UPNP_set_discover_local_port(self, port)
}
func (self UPNP) GetDiscoverLocalPort() int64 {
	return self.Runtime.UPNP_get_discover_local_port(self)
}
func (self UPNP) SetDiscoverIpv6(ipv6 bool) {
	self.Runtime.UPNP_set_discover_ipv6(self, ipv6)
}
func (self UPNP) IsDiscoverIpv6() bool {
	return self.Runtime.UPNP_is_discover_ipv6(self)
}

type extendsUPNPDevice struct {
	_ [0]*extendsUPNPDevice
	class
}

func (self UPNPDevice) RefCounted() RefCounted {
	var parent RefCounted
	parent.class = self.class
	return parent
}
func (self UPNPDevice) IsValidGateway() bool {
	return self.Runtime.UPNPDevice_is_valid_gateway(self)
}
func (self UPNPDevice) QueryExternalAddress() string {
	return self.Runtime.UPNPDevice_query_external_address(self)
}
func (self UPNPDevice) AddPortMapping(port int64, port_internal int64, desc string, proto string, duration int64) int64 {
	return self.Runtime.UPNPDevice_add_port_mapping(self, port, port_internal, desc, proto, duration)
}
func (self UPNPDevice) DeletePortMapping(port int64, proto string) int64 {
	return self.Runtime.UPNPDevice_delete_port_mapping(self, port, proto)
}
func (self UPNPDevice) SetDescriptionUrl(url string) {
	self.Runtime.UPNPDevice_set_description_url(self, url)
}
func (self UPNPDevice) GetDescriptionUrl() string {
	return self.Runtime.UPNPDevice_get_description_url(self)
}
func (self UPNPDevice) SetServiceType(atype string) {
	self.Runtime.UPNPDevice_set_service_type(self, atype)
}
func (self UPNPDevice) GetServiceType() string {
	return self.Runtime.UPNPDevice_get_service_type(self)
}
func (self UPNPDevice) SetIgdControlUrl(url string) {
	self.Runtime.UPNPDevice_set_igd_control_url(self, url)
}
func (self UPNPDevice) GetIgdControlUrl() string {
	return self.Runtime.UPNPDevice_get_igd_control_url(self)
}
func (self UPNPDevice) SetIgdServiceType(atype string) {
	self.Runtime.UPNPDevice_set_igd_service_type(self, atype)
}
func (self UPNPDevice) GetIgdServiceType() string {
	return self.Runtime.UPNPDevice_get_igd_service_type(self)
}
func (self UPNPDevice) SetIgdOurAddr(addr string) {
	self.Runtime.UPNPDevice_set_igd_our_addr(self, addr)
}
func (self UPNPDevice) GetIgdOurAddr() string {
	return self.Runtime.UPNPDevice_get_igd_our_addr(self)
}
func (self UPNPDevice) SetIgdStatus(status UPNPDeviceIGDStatus) {
	self.Runtime.UPNPDevice_set_igd_status(self, status)
}
func (self UPNPDevice) GetIgdStatus() UPNPDeviceIGDStatus {
	return self.Runtime.UPNPDevice_get_igd_status(self)
}

type extendsUndoRedo struct {
	_ [0]*extendsUndoRedo
	class
}

func (self UndoRedo) Object() Object { var parent Object; parent.class = self.class; return parent }
func (self UndoRedo) CreateAction(name string, merge_mode UndoRedoMergeMode, backward_undo_ops bool) {
	self.Runtime.UndoRedo_create_action(self, name, merge_mode, backward_undo_ops)
}
func (self UndoRedo) CommitAction(execute bool) {
	self.Runtime.UndoRedo_commit_action(self, execute)
}
func (self UndoRedo) IsCommittingAction() bool {
	return self.Runtime.UndoRedo_is_committing_action(self)
}
func (self UndoRedo) AddDoMethod(callable Callable) {
	self.Runtime.UndoRedo_add_do_method(self, callable)
}
func (self UndoRedo) AddUndoMethod(callable Callable) {
	self.Runtime.UndoRedo_add_undo_method(self, callable)
}
func (self UndoRedo) AddDoProperty(object Object, property string, value any) {
	self.Runtime.UndoRedo_add_do_property(self, object, property, value)
}
func (self UndoRedo) AddUndoProperty(object Object, property string, value any) {
	self.Runtime.UndoRedo_add_undo_property(self, object, property, value)
}
func (self UndoRedo) AddDoReference(object Object) {
	self.Runtime.UndoRedo_add_do_reference(self, object)
}
func (self UndoRedo) AddUndoReference(object Object) {
	self.Runtime.UndoRedo_add_undo_reference(self, object)
}
func (self UndoRedo) StartForceKeepInMergeEnds() {
	self.Runtime.UndoRedo_start_force_keep_in_merge_ends(self)
}
func (self UndoRedo) EndForceKeepInMergeEnds() {
	self.Runtime.UndoRedo_end_force_keep_in_merge_ends(self)
}
func (self UndoRedo) GetHistoryCount() int64 {
	return self.Runtime.UndoRedo_get_history_count(self)
}
func (self UndoRedo) GetCurrentAction() int64 {
	return self.Runtime.UndoRedo_get_current_action(self)
}
func (self UndoRedo) GetActionName(id int64) string {
	return self.Runtime.UndoRedo_get_action_name(self, id)
}
func (self UndoRedo) ClearHistory(increase_version bool) {
	self.Runtime.UndoRedo_clear_history(self, increase_version)
}
func (self UndoRedo) GetCurrentActionName() string {
	return self.Runtime.UndoRedo_get_current_action_name(self)
}
func (self UndoRedo) HasUndo() bool {
	return self.Runtime.UndoRedo_has_undo(self)
}
func (self UndoRedo) HasRedo() bool {
	return self.Runtime.UndoRedo_has_redo(self)
}
func (self UndoRedo) GetVersion() int64 {
	return self.Runtime.UndoRedo_get_version(self)
}
func (self UndoRedo) Redo() bool {
	return self.Runtime.UndoRedo_redo(self)
}
func (self UndoRedo) Undo() bool {
	return self.Runtime.UndoRedo_undo(self)
}

type extendsVBoxContainer struct {
	_ [0]*extendsVBoxContainer
	class
}

func (self VBoxContainer) BoxContainer() BoxContainer {
	var parent BoxContainer
	parent.class = self.class
	return parent
}

type extendsVFlowContainer struct {
	_ [0]*extendsVFlowContainer
	class
}

func (self VFlowContainer) FlowContainer() FlowContainer {
	var parent FlowContainer
	parent.class = self.class
	return parent
}

type extendsVScrollBar struct {
	_ [0]*extendsVScrollBar
	class
}

func (self VScrollBar) ScrollBar() ScrollBar {
	var parent ScrollBar
	parent.class = self.class
	return parent
}

type extendsVSeparator struct {
	_ [0]*extendsVSeparator
	class
}

func (self VSeparator) Separator() Separator {
	var parent Separator
	parent.class = self.class
	return parent
}

type extendsVSlider struct {
	_ [0]*extendsVSlider
	class
}

func (self VSlider) Slider() Slider { var parent Slider; parent.class = self.class; return parent }

type extendsVSplitContainer struct {
	_ [0]*extendsVSplitContainer
	class
}

func (self VSplitContainer) SplitContainer() SplitContainer {
	var parent SplitContainer
	parent.class = self.class
	return parent
}

type extendsVehicleBody3D struct {
	_ [0]*extendsVehicleBody3D
	class
}

func (self VehicleBody3D) RigidBody3D() RigidBody3D {
	var parent RigidBody3D
	parent.class = self.class
	return parent
}
func (self VehicleBody3D) SetEngineForce(engine_force Float) {
	self.Runtime.VehicleBody3D_set_engine_force(self, engine_force)
}
func (self VehicleBody3D) GetEngineForce() Float {
	return self.Runtime.VehicleBody3D_get_engine_force(self)
}
func (self VehicleBody3D) SetBrake(brake Float) {
	self.Runtime.VehicleBody3D_set_brake(self, brake)
}
func (self VehicleBody3D) GetBrake() Float {
	return self.Runtime.VehicleBody3D_get_brake(self)
}
func (self VehicleBody3D) SetSteering(steering Float) {
	self.Runtime.VehicleBody3D_set_steering(self, steering)
}
func (self VehicleBody3D) GetSteering() Float {
	return self.Runtime.VehicleBody3D_get_steering(self)
}

type extendsVehicleWheel3D struct {
	_ [0]*extendsVehicleWheel3D
	class
}

func (self VehicleWheel3D) Node3D() Node3D {
	var parent Node3D
	parent.class = self.class
	return parent
}
func (self VehicleWheel3D) SetRadius(length Float) {
	self.Runtime.VehicleWheel3D_set_radius(self, length)
}
func (self VehicleWheel3D) GetRadius() Float {
	return self.Runtime.VehicleWheel3D_get_radius(self)
}
func (self VehicleWheel3D) SetSuspensionRestLength(length Float) {
	self.Runtime.VehicleWheel3D_set_suspension_rest_length(self, length)
}
func (self VehicleWheel3D) GetSuspensionRestLength() Float {
	return self.Runtime.VehicleWheel3D_get_suspension_rest_length(self)
}
func (self VehicleWheel3D) SetSuspensionTravel(length Float) {
	self.Runtime.VehicleWheel3D_set_suspension_travel(self, length)
}
func (self VehicleWheel3D) GetSuspensionTravel() Float {
	return self.Runtime.VehicleWheel3D_get_suspension_travel(self)
}
func (self VehicleWheel3D) SetSuspensionStiffness(length Float) {
	self.Runtime.VehicleWheel3D_set_suspension_stiffness(self, length)
}
func (self VehicleWheel3D) GetSuspensionStiffness() Float {
	return self.Runtime.VehicleWheel3D_get_suspension_stiffness(self)
}
func (self VehicleWheel3D) SetSuspensionMaxForce(length Float) {
	self.Runtime.VehicleWheel3D_set_suspension_max_force(self, length)
}
func (self VehicleWheel3D) GetSuspensionMaxForce() Float {
	return self.Runtime.VehicleWheel3D_get_suspension_max_force(self)
}
func (self VehicleWheel3D) SetDampingCompression(length Float) {
	self.Runtime.VehicleWheel3D_set_damping_compression(self, length)
}
func (self VehicleWheel3D) GetDampingCompression() Float {
	return self.Runtime.VehicleWheel3D_get_damping_compression(self)
}
func (self VehicleWheel3D) SetDampingRelaxation(length Float) {
	self.Runtime.VehicleWheel3D_set_damping_relaxation(self, length)
}
func (self VehicleWheel3D) GetDampingRelaxation() Float {
	return self.Runtime.VehicleWheel3D_get_damping_relaxation(self)
}
func (self VehicleWheel3D) SetUseAsTraction(enable bool) {
	self.Runtime.VehicleWheel3D_set_use_as_traction(self, enable)
}
func (self VehicleWheel3D) IsUsedAsTraction() bool {
	return self.Runtime.VehicleWheel3D_is_used_as_traction(self)
}
func (self VehicleWheel3D) SetUseAsSteering(enable bool) {
	self.Runtime.VehicleWheel3D_set_use_as_steering(self, enable)
}
func (self VehicleWheel3D) IsUsedAsSteering() bool {
	return self.Runtime.VehicleWheel3D_is_used_as_steering(self)
}
func (self VehicleWheel3D) SetFrictionSlip(length Float) {
	self.Runtime.VehicleWheel3D_set_friction_slip(self, length)
}
func (self VehicleWheel3D) GetFrictionSlip() Float {
	return self.Runtime.VehicleWheel3D_get_friction_slip(self)
}
func (self VehicleWheel3D) IsInContact() bool {
	return self.Runtime.VehicleWheel3D_is_in_contact(self)
}
func (self VehicleWheel3D) GetContactBody() Node3D {
	return self.Runtime.VehicleWheel3D_get_contact_body(self)
}
func (self VehicleWheel3D) SetRollInfluence(roll_influence Float) {
	self.Runtime.VehicleWheel3D_set_roll_influence(self, roll_influence)
}
func (self VehicleWheel3D) GetRollInfluence() Float {
	return self.Runtime.VehicleWheel3D_get_roll_influence(self)
}
func (self VehicleWheel3D) GetSkidinfo() Float {
	return self.Runtime.VehicleWheel3D_get_skidinfo(self)
}
func (self VehicleWheel3D) GetRpm() Float {
	return self.Runtime.VehicleWheel3D_get_rpm(self)
}
func (self VehicleWheel3D) SetEngineForce(engine_force Float) {
	self.Runtime.VehicleWheel3D_set_engine_force(self, engine_force)
}
func (self VehicleWheel3D) GetEngineForce() Float {
	return self.Runtime.VehicleWheel3D_get_engine_force(self)
}
func (self VehicleWheel3D) SetBrake(brake Float) {
	self.Runtime.VehicleWheel3D_set_brake(self, brake)
}
func (self VehicleWheel3D) GetBrake() Float {
	return self.Runtime.VehicleWheel3D_get_brake(self)
}
func (self VehicleWheel3D) SetSteering(steering Float) {
	self.Runtime.VehicleWheel3D_set_steering(self, steering)
}
func (self VehicleWheel3D) GetSteering() Float {
	return self.Runtime.VehicleWheel3D_get_steering(self)
}

type extendsVideoStream struct {
	_ [0]*extendsVideoStream
	class
}

func (self VideoStream) Resource() Resource {
	var parent Resource
	parent.class = self.class
	return parent
}
func (self VideoStream) SetFile(file string) {
	self.Runtime.VideoStream_set_file(self, file)
}
func (self VideoStream) GetFile() string {
	return self.Runtime.VideoStream_get_file(self)
}

type extendsVideoStreamPlayback struct {
	_ [0]*extendsVideoStreamPlayback
	class
}

func (self VideoStreamPlayback) Resource() Resource {
	var parent Resource
	parent.class = self.class
	return parent
}
func (self VideoStreamPlayback) MixAudio(num_frames int64, buffer PackedFloat32Array, offset int64) int64 {
	return self.Runtime.VideoStreamPlayback_mix_audio(self, num_frames, buffer, offset)
}

type extendsVideoStreamPlayer struct {
	_ [0]*extendsVideoStreamPlayer
	class
}

func (self VideoStreamPlayer) Control() Control {
	var parent Control
	parent.class = self.class
	return parent
}
func (self VideoStreamPlayer) SetStream(stream VideoStream) {
	self.Runtime.VideoStreamPlayer_set_stream(self, stream)
}
func (self VideoStreamPlayer) GetStream() VideoStream {
	return self.Runtime.VideoStreamPlayer_get_stream(self)
}
func (self VideoStreamPlayer) Play() {
	self.Runtime.VideoStreamPlayer_play(self)
}
func (self VideoStreamPlayer) Stop() {
	self.Runtime.VideoStreamPlayer_stop(self)
}
func (self VideoStreamPlayer) IsPlaying() bool {
	return self.Runtime.VideoStreamPlayer_is_playing(self)
}
func (self VideoStreamPlayer) SetPaused(paused bool) {
	self.Runtime.VideoStreamPlayer_set_paused(self, paused)
}
func (self VideoStreamPlayer) IsPaused() bool {
	return self.Runtime.VideoStreamPlayer_is_paused(self)
}
func (self VideoStreamPlayer) SetLoop(loop bool) {
	self.Runtime.VideoStreamPlayer_set_loop(self, loop)
}
func (self VideoStreamPlayer) HasLoop() bool {
	return self.Runtime.VideoStreamPlayer_has_loop(self)
}
func (self VideoStreamPlayer) SetVolume(volume Float) {
	self.Runtime.VideoStreamPlayer_set_volume(self, volume)
}
func (self VideoStreamPlayer) GetVolume() Float {
	return self.Runtime.VideoStreamPlayer_get_volume(self)
}
func (self VideoStreamPlayer) SetVolumeDb(db Float) {
	self.Runtime.VideoStreamPlayer_set_volume_db(self, db)
}
func (self VideoStreamPlayer) GetVolumeDb() Float {
	return self.Runtime.VideoStreamPlayer_get_volume_db(self)
}
func (self VideoStreamPlayer) SetAudioTrack(track int64) {
	self.Runtime.VideoStreamPlayer_set_audio_track(self, track)
}
func (self VideoStreamPlayer) GetAudioTrack() int64 {
	return self.Runtime.VideoStreamPlayer_get_audio_track(self)
}
func (self VideoStreamPlayer) GetStreamName() string {
	return self.Runtime.VideoStreamPlayer_get_stream_name(self)
}
func (self VideoStreamPlayer) GetStreamLength() Float {
	return self.Runtime.VideoStreamPlayer_get_stream_length(self)
}
func (self VideoStreamPlayer) SetStreamPosition(position Float) {
	self.Runtime.VideoStreamPlayer_set_stream_position(self, position)
}
func (self VideoStreamPlayer) GetStreamPosition() Float {
	return self.Runtime.VideoStreamPlayer_get_stream_position(self)
}
func (self VideoStreamPlayer) SetAutoplay(enabled bool) {
	self.Runtime.VideoStreamPlayer_set_autoplay(self, enabled)
}
func (self VideoStreamPlayer) HasAutoplay() bool {
	return self.Runtime.VideoStreamPlayer_has_autoplay(self)
}
func (self VideoStreamPlayer) SetExpand(enable bool) {
	self.Runtime.VideoStreamPlayer_set_expand(self, enable)
}
func (self VideoStreamPlayer) HasExpand() bool {
	return self.Runtime.VideoStreamPlayer_has_expand(self)
}
func (self VideoStreamPlayer) SetBufferingMsec(msec int64) {
	self.Runtime.VideoStreamPlayer_set_buffering_msec(self, msec)
}
func (self VideoStreamPlayer) GetBufferingMsec() int64 {
	return self.Runtime.VideoStreamPlayer_get_buffering_msec(self)
}
func (self VideoStreamPlayer) SetBus(bus string) {
	self.Runtime.VideoStreamPlayer_set_bus(self, bus)
}
func (self VideoStreamPlayer) GetBus() string {
	return self.Runtime.VideoStreamPlayer_get_bus(self)
}
func (self VideoStreamPlayer) GetVideoTexture() Texture2D {
	return self.Runtime.VideoStreamPlayer_get_video_texture(self)
}

type extendsVideoStreamTheora struct {
	_ [0]*extendsVideoStreamTheora
	class
}

func (self VideoStreamTheora) VideoStream() VideoStream {
	var parent VideoStream
	parent.class = self.class
	return parent
}

type extendsViewport struct {
	_ [0]*extendsViewport
	class
}

func (self Viewport) Node() Node { var parent Node; parent.class = self.class; return parent }
func (self Viewport) SetWorld2d(world_2d World2D) {
	self.Runtime.Viewport_set_world_2d(self, world_2d)
}
func (self Viewport) GetWorld2d() World2D {
	return self.Runtime.Viewport_get_world_2d(self)
}
func (self Viewport) FindWorld2d() World2D {
	return self.Runtime.Viewport_find_world_2d(self)
}
func (self Viewport) SetCanvasTransform(xform Transform2D) {
	self.Runtime.Viewport_set_canvas_transform(self, xform)
}
func (self Viewport) GetCanvasTransform() Transform2D {
	return self.Runtime.Viewport_get_canvas_transform(self)
}
func (self Viewport) SetGlobalCanvasTransform(xform Transform2D) {
	self.Runtime.Viewport_set_global_canvas_transform(self, xform)
}
func (self Viewport) GetGlobalCanvasTransform() Transform2D {
	return self.Runtime.Viewport_get_global_canvas_transform(self)
}
func (self Viewport) GetFinalTransform() Transform2D {
	return self.Runtime.Viewport_get_final_transform(self)
}
func (self Viewport) GetScreenTransform() Transform2D {
	return self.Runtime.Viewport_get_screen_transform(self)
}
func (self Viewport) GetVisibleRect() Rect2 {
	return self.Runtime.Viewport_get_visible_rect(self)
}
func (self Viewport) SetTransparentBackground(enable bool) {
	self.Runtime.Viewport_set_transparent_background(self, enable)
}
func (self Viewport) HasTransparentBackground() bool {
	return self.Runtime.Viewport_has_transparent_background(self)
}
func (self Viewport) SetUseHdr2d(enable bool) {
	self.Runtime.Viewport_set_use_hdr_2d(self, enable)
}
func (self Viewport) IsUsingHdr2d() bool {
	return self.Runtime.Viewport_is_using_hdr_2d(self)
}
func (self Viewport) SetMsaa2d(msaa ViewportMSAA) {
	self.Runtime.Viewport_set_msaa_2d(self, msaa)
}
func (self Viewport) GetMsaa2d() ViewportMSAA {
	return self.Runtime.Viewport_get_msaa_2d(self)
}
func (self Viewport) SetMsaa3d(msaa ViewportMSAA) {
	self.Runtime.Viewport_set_msaa_3d(self, msaa)
}
func (self Viewport) GetMsaa3d() ViewportMSAA {
	return self.Runtime.Viewport_get_msaa_3d(self)
}
func (self Viewport) SetScreenSpaceAa(screen_space_aa ViewportScreenSpaceAA) {
	self.Runtime.Viewport_set_screen_space_aa(self, screen_space_aa)
}
func (self Viewport) GetScreenSpaceAa() ViewportScreenSpaceAA {
	return self.Runtime.Viewport_get_screen_space_aa(self)
}
func (self Viewport) SetUseTaa(enable bool) {
	self.Runtime.Viewport_set_use_taa(self, enable)
}
func (self Viewport) IsUsingTaa() bool {
	return self.Runtime.Viewport_is_using_taa(self)
}
func (self Viewport) SetUseDebanding(enable bool) {
	self.Runtime.Viewport_set_use_debanding(self, enable)
}
func (self Viewport) IsUsingDebanding() bool {
	return self.Runtime.Viewport_is_using_debanding(self)
}
func (self Viewport) SetUseOcclusionCulling(enable bool) {
	self.Runtime.Viewport_set_use_occlusion_culling(self, enable)
}
func (self Viewport) IsUsingOcclusionCulling() bool {
	return self.Runtime.Viewport_is_using_occlusion_culling(self)
}
func (self Viewport) SetDebugDraw(debug_draw ViewportDebugDraw) {
	self.Runtime.Viewport_set_debug_draw(self, debug_draw)
}
func (self Viewport) GetDebugDraw() ViewportDebugDraw {
	return self.Runtime.Viewport_get_debug_draw(self)
}
func (self Viewport) GetRenderInfo(atype ViewportRenderInfoType, info ViewportRenderInfo) int64 {
	return self.Runtime.Viewport_get_render_info(self, atype, info)
}
func (self Viewport) GetTexture() ViewportTexture {
	return self.Runtime.Viewport_get_texture(self)
}
func (self Viewport) SetPhysicsObjectPicking(enable bool) {
	self.Runtime.Viewport_set_physics_object_picking(self, enable)
}
func (self Viewport) GetPhysicsObjectPicking() bool {
	return self.Runtime.Viewport_get_physics_object_picking(self)
}
func (self Viewport) SetPhysicsObjectPickingSort(enable bool) {
	self.Runtime.Viewport_set_physics_object_picking_sort(self, enable)
}
func (self Viewport) GetPhysicsObjectPickingSort() bool {
	return self.Runtime.Viewport_get_physics_object_picking_sort(self)
}
func (self Viewport) GetViewportRid() RID {
	return self.Runtime.Viewport_get_viewport_rid(self)
}
func (self Viewport) PushTextInput(text string) {
	self.Runtime.Viewport_push_text_input(self, text)
}
func (self Viewport) PushInput(event InputEvent, in_local_coords bool) {
	self.Runtime.Viewport_push_input(self, event, in_local_coords)
}
func (self Viewport) PushUnhandledInput(event InputEvent, in_local_coords bool) {
	self.Runtime.Viewport_push_unhandled_input(self, event, in_local_coords)
}
func (self Viewport) GetCamera2d() Camera2D {
	return self.Runtime.Viewport_get_camera_2d(self)
}
func (self Viewport) SetAsAudioListener2d(enable bool) {
	self.Runtime.Viewport_set_as_audio_listener_2d(self, enable)
}
func (self Viewport) IsAudioListener2d() bool {
	return self.Runtime.Viewport_is_audio_listener_2d(self)
}
func (self Viewport) GetMousePosition() Vector2 {
	return self.Runtime.Viewport_get_mouse_position(self)
}
func (self Viewport) WarpMouse(position Vector2) {
	self.Runtime.Viewport_warp_mouse(self, position)
}
func (self Viewport) UpdateMouseCursorState() {
	self.Runtime.Viewport_update_mouse_cursor_state(self)
}
func (self Viewport) GuiGetDragData() any {
	return self.Runtime.Viewport_gui_get_drag_data(self)
}
func (self Viewport) GuiIsDragging() bool {
	return self.Runtime.Viewport_gui_is_dragging(self)
}
func (self Viewport) GuiIsDragSuccessful() bool {
	return self.Runtime.Viewport_gui_is_drag_successful(self)
}
func (self Viewport) GuiReleaseFocus() {
	self.Runtime.Viewport_gui_release_focus(self)
}
func (self Viewport) GuiGetFocusOwner() Control {
	return self.Runtime.Viewport_gui_get_focus_owner(self)
}
func (self Viewport) GuiGetHoveredControl() Control {
	return self.Runtime.Viewport_gui_get_hovered_control(self)
}
func (self Viewport) SetDisableInput(disable bool) {
	self.Runtime.Viewport_set_disable_input(self, disable)
}
func (self Viewport) IsInputDisabled() bool {
	return self.Runtime.Viewport_is_input_disabled(self)
}
func (self Viewport) SetPositionalShadowAtlasSize(size int64) {
	self.Runtime.Viewport_set_positional_shadow_atlas_size(self, size)
}
func (self Viewport) GetPositionalShadowAtlasSize() int64 {
	return self.Runtime.Viewport_get_positional_shadow_atlas_size(self)
}
func (self Viewport) SetPositionalShadowAtlas16Bits(enable bool) {
	self.Runtime.Viewport_set_positional_shadow_atlas_16_bits(self, enable)
}
func (self Viewport) GetPositionalShadowAtlas16Bits() bool {
	return self.Runtime.Viewport_get_positional_shadow_atlas_16_bits(self)
}
func (self Viewport) SetSnapControlsToPixels(enabled bool) {
	self.Runtime.Viewport_set_snap_controls_to_pixels(self, enabled)
}
func (self Viewport) IsSnapControlsToPixelsEnabled() bool {
	return self.Runtime.Viewport_is_snap_controls_to_pixels_enabled(self)
}
func (self Viewport) SetSnap2dTransformsToPixel(enabled bool) {
	self.Runtime.Viewport_set_snap_2d_transforms_to_pixel(self, enabled)
}
func (self Viewport) IsSnap2dTransformsToPixelEnabled() bool {
	return self.Runtime.Viewport_is_snap_2d_transforms_to_pixel_enabled(self)
}
func (self Viewport) SetSnap2dVerticesToPixel(enabled bool) {
	self.Runtime.Viewport_set_snap_2d_vertices_to_pixel(self, enabled)
}
func (self Viewport) IsSnap2dVerticesToPixelEnabled() bool {
	return self.Runtime.Viewport_is_snap_2d_vertices_to_pixel_enabled(self)
}
func (self Viewport) SetPositionalShadowAtlasQuadrantSubdiv(quadrant int64, subdiv ViewportPositionalShadowAtlasQuadrantSubdiv) {
	self.Runtime.Viewport_set_positional_shadow_atlas_quadrant_subdiv(self, quadrant, subdiv)
}
func (self Viewport) GetPositionalShadowAtlasQuadrantSubdiv(quadrant int64) ViewportPositionalShadowAtlasQuadrantSubdiv {
	return self.Runtime.Viewport_get_positional_shadow_atlas_quadrant_subdiv(self, quadrant)
}
func (self Viewport) SetInputAsHandled() {
	self.Runtime.Viewport_set_input_as_handled(self)
}
func (self Viewport) IsInputHandled() bool {
	return self.Runtime.Viewport_is_input_handled(self)
}
func (self Viewport) SetHandleInputLocally(enable bool) {
	self.Runtime.Viewport_set_handle_input_locally(self, enable)
}
func (self Viewport) IsHandlingInputLocally() bool {
	return self.Runtime.Viewport_is_handling_input_locally(self)
}
func (self Viewport) SetDefaultCanvasItemTextureFilter(mode ViewportDefaultCanvasItemTextureFilter) {
	self.Runtime.Viewport_set_default_canvas_item_texture_filter(self, mode)
}
func (self Viewport) GetDefaultCanvasItemTextureFilter() ViewportDefaultCanvasItemTextureFilter {
	return self.Runtime.Viewport_get_default_canvas_item_texture_filter(self)
}
func (self Viewport) SetEmbeddingSubwindows(enable bool) {
	self.Runtime.Viewport_set_embedding_subwindows(self, enable)
}
func (self Viewport) IsEmbeddingSubwindows() bool {
	return self.Runtime.Viewport_is_embedding_subwindows(self)
}
func (self Viewport) GetEmbeddedSubwindows() ArrayOf[Window] {
	return self.Runtime.Viewport_get_embedded_subwindows(self)
}
func (self Viewport) SetCanvasCullMask(mask int64) {
	self.Runtime.Viewport_set_canvas_cull_mask(self, mask)
}
func (self Viewport) GetCanvasCullMask() int64 {
	return self.Runtime.Viewport_get_canvas_cull_mask(self)
}
func (self Viewport) SetCanvasCullMaskBit(layer int64, enable bool) {
	self.Runtime.Viewport_set_canvas_cull_mask_bit(self, layer, enable)
}
func (self Viewport) GetCanvasCullMaskBit(layer int64) bool {
	return self.Runtime.Viewport_get_canvas_cull_mask_bit(self, layer)
}
func (self Viewport) SetDefaultCanvasItemTextureRepeat(mode ViewportDefaultCanvasItemTextureRepeat) {
	self.Runtime.Viewport_set_default_canvas_item_texture_repeat(self, mode)
}
func (self Viewport) GetDefaultCanvasItemTextureRepeat() ViewportDefaultCanvasItemTextureRepeat {
	return self.Runtime.Viewport_get_default_canvas_item_texture_repeat(self)
}
func (self Viewport) SetSdfOversize(oversize ViewportSDFOversize) {
	self.Runtime.Viewport_set_sdf_oversize(self, oversize)
}
func (self Viewport) GetSdfOversize() ViewportSDFOversize {
	return self.Runtime.Viewport_get_sdf_oversize(self)
}
func (self Viewport) SetSdfScale(scale ViewportSDFScale) {
	self.Runtime.Viewport_set_sdf_scale(self, scale)
}
func (self Viewport) GetSdfScale() ViewportSDFScale {
	return self.Runtime.Viewport_get_sdf_scale(self)
}
func (self Viewport) SetMeshLodThreshold(pixels Float) {
	self.Runtime.Viewport_set_mesh_lod_threshold(self, pixels)
}
func (self Viewport) GetMeshLodThreshold() Float {
	return self.Runtime.Viewport_get_mesh_lod_threshold(self)
}
func (self Viewport) SetWorld3d(world_3d World3D) {
	self.Runtime.Viewport_set_world_3d(self, world_3d)
}
func (self Viewport) GetWorld3d() World3D {
	return self.Runtime.Viewport_get_world_3d(self)
}
func (self Viewport) FindWorld3d() World3D {
	return self.Runtime.Viewport_find_world_3d(self)
}
func (self Viewport) SetUseOwnWorld3d(enable bool) {
	self.Runtime.Viewport_set_use_own_world_3d(self, enable)
}
func (self Viewport) IsUsingOwnWorld3d() bool {
	return self.Runtime.Viewport_is_using_own_world_3d(self)
}
func (self Viewport) GetCamera3d() Camera3D {
	return self.Runtime.Viewport_get_camera_3d(self)
}
func (self Viewport) SetAsAudioListener3d(enable bool) {
	self.Runtime.Viewport_set_as_audio_listener_3d(self, enable)
}
func (self Viewport) IsAudioListener3d() bool {
	return self.Runtime.Viewport_is_audio_listener_3d(self)
}
func (self Viewport) SetDisable3d(disable bool) {
	self.Runtime.Viewport_set_disable_3d(self, disable)
}
func (self Viewport) Is3dDisabled() bool {
	return self.Runtime.Viewport_is_3d_disabled(self)
}
func (self Viewport) SetUseXr(use bool) {
	self.Runtime.Viewport_set_use_xr(self, use)
}
func (self Viewport) IsUsingXr() bool {
	return self.Runtime.Viewport_is_using_xr(self)
}
func (self Viewport) SetScaling3dMode(scaling_3d_mode ViewportScaling3DMode) {
	self.Runtime.Viewport_set_scaling_3d_mode(self, scaling_3d_mode)
}
func (self Viewport) GetScaling3dMode() ViewportScaling3DMode {
	return self.Runtime.Viewport_get_scaling_3d_mode(self)
}
func (self Viewport) SetScaling3dScale(scale Float) {
	self.Runtime.Viewport_set_scaling_3d_scale(self, scale)
}
func (self Viewport) GetScaling3dScale() Float {
	return self.Runtime.Viewport_get_scaling_3d_scale(self)
}
func (self Viewport) SetFsrSharpness(fsr_sharpness Float) {
	self.Runtime.Viewport_set_fsr_sharpness(self, fsr_sharpness)
}
func (self Viewport) GetFsrSharpness() Float {
	return self.Runtime.Viewport_get_fsr_sharpness(self)
}
func (self Viewport) SetTextureMipmapBias(texture_mipmap_bias Float) {
	self.Runtime.Viewport_set_texture_mipmap_bias(self, texture_mipmap_bias)
}
func (self Viewport) GetTextureMipmapBias() Float {
	return self.Runtime.Viewport_get_texture_mipmap_bias(self)
}
func (self Viewport) SetVrsMode(mode ViewportVRSMode) {
	self.Runtime.Viewport_set_vrs_mode(self, mode)
}
func (self Viewport) GetVrsMode() ViewportVRSMode {
	return self.Runtime.Viewport_get_vrs_mode(self)
}
func (self Viewport) SetVrsTexture(texture Texture2D) {
	self.Runtime.Viewport_set_vrs_texture(self, texture)
}
func (self Viewport) GetVrsTexture() Texture2D {
	return self.Runtime.Viewport_get_vrs_texture(self)
}

type extendsViewportTexture struct {
	_ [0]*extendsViewportTexture
	class
}

func (self ViewportTexture) Texture2D() Texture2D {
	var parent Texture2D
	parent.class = self.class
	return parent
}
func (self ViewportTexture) SetViewportPathInScene(path NodePath) {
	self.Runtime.ViewportTexture_set_viewport_path_in_scene(self, path)
}
func (self ViewportTexture) GetViewportPathInScene() NodePath {
	return self.Runtime.ViewportTexture_get_viewport_path_in_scene(self)
}

type extendsVisibleOnScreenEnabler2D struct {
	_ [0]*extendsVisibleOnScreenEnabler2D
	class
}

func (self VisibleOnScreenEnabler2D) VisibleOnScreenNotifier2D() VisibleOnScreenNotifier2D {
	var parent VisibleOnScreenNotifier2D
	parent.class = self.class
	return parent
}
func (self VisibleOnScreenEnabler2D) SetEnableMode(mode VisibleOnScreenEnabler2DEnableMode) {
	self.Runtime.VisibleOnScreenEnabler2D_set_enable_mode(self, mode)
}
func (self VisibleOnScreenEnabler2D) GetEnableMode() VisibleOnScreenEnabler2DEnableMode {
	return self.Runtime.VisibleOnScreenEnabler2D_get_enable_mode(self)
}
func (self VisibleOnScreenEnabler2D) SetEnableNodePath(path NodePath) {
	self.Runtime.VisibleOnScreenEnabler2D_set_enable_node_path(self, path)
}
func (self VisibleOnScreenEnabler2D) GetEnableNodePath() NodePath {
	return self.Runtime.VisibleOnScreenEnabler2D_get_enable_node_path(self)
}

type extendsVisibleOnScreenEnabler3D struct {
	_ [0]*extendsVisibleOnScreenEnabler3D
	class
}

func (self VisibleOnScreenEnabler3D) VisibleOnScreenNotifier3D() VisibleOnScreenNotifier3D {
	var parent VisibleOnScreenNotifier3D
	parent.class = self.class
	return parent
}
func (self VisibleOnScreenEnabler3D) SetEnableMode(mode VisibleOnScreenEnabler3DEnableMode) {
	self.Runtime.VisibleOnScreenEnabler3D_set_enable_mode(self, mode)
}
func (self VisibleOnScreenEnabler3D) GetEnableMode() VisibleOnScreenEnabler3DEnableMode {
	return self.Runtime.VisibleOnScreenEnabler3D_get_enable_mode(self)
}
func (self VisibleOnScreenEnabler3D) SetEnableNodePath(path NodePath) {
	self.Runtime.VisibleOnScreenEnabler3D_set_enable_node_path(self, path)
}
func (self VisibleOnScreenEnabler3D) GetEnableNodePath() NodePath {
	return self.Runtime.VisibleOnScreenEnabler3D_get_enable_node_path(self)
}

type extendsVisibleOnScreenNotifier2D struct {
	_ [0]*extendsVisibleOnScreenNotifier2D
	class
}

func (self VisibleOnScreenNotifier2D) Node2D() Node2D {
	var parent Node2D
	parent.class = self.class
	return parent
}
func (self VisibleOnScreenNotifier2D) SetRect(rect Rect2) {
	self.Runtime.VisibleOnScreenNotifier2D_set_rect(self, rect)
}
func (self VisibleOnScreenNotifier2D) GetRect() Rect2 {
	return self.Runtime.VisibleOnScreenNotifier2D_get_rect(self)
}
func (self VisibleOnScreenNotifier2D) IsOnScreen() bool {
	return self.Runtime.VisibleOnScreenNotifier2D_is_on_screen(self)
}

type extendsVisibleOnScreenNotifier3D struct {
	_ [0]*extendsVisibleOnScreenNotifier3D
	class
}

func (self VisibleOnScreenNotifier3D) VisualInstance3D() VisualInstance3D {
	var parent VisualInstance3D
	parent.class = self.class
	return parent
}
func (self VisibleOnScreenNotifier3D) SetAabb(rect AABB) {
	self.Runtime.VisibleOnScreenNotifier3D_set_aabb(self, rect)
}
func (self VisibleOnScreenNotifier3D) IsOnScreen() bool {
	return self.Runtime.VisibleOnScreenNotifier3D_is_on_screen(self)
}

type extendsVisualInstance3D struct {
	_ [0]*extendsVisualInstance3D
	class
}

func (self VisualInstance3D) Node3D() Node3D {
	var parent Node3D
	parent.class = self.class
	return parent
}
func (self VisualInstance3D) SetBase(base RID) {
	self.Runtime.VisualInstance3D_set_base(self, base)
}
func (self VisualInstance3D) GetBase() RID {
	return self.Runtime.VisualInstance3D_get_base(self)
}
func (self VisualInstance3D) GetInstance() RID {
	return self.Runtime.VisualInstance3D_get_instance(self)
}
func (self VisualInstance3D) SetLayerMask(mask int64) {
	self.Runtime.VisualInstance3D_set_layer_mask(self, mask)
}
func (self VisualInstance3D) GetLayerMask() int64 {
	return self.Runtime.VisualInstance3D_get_layer_mask(self)
}
func (self VisualInstance3D) SetLayerMaskValue(layer_number int64, value bool) {
	self.Runtime.VisualInstance3D_set_layer_mask_value(self, layer_number, value)
}
func (self VisualInstance3D) GetLayerMaskValue(layer_number int64) bool {
	return self.Runtime.VisualInstance3D_get_layer_mask_value(self, layer_number)
}
func (self VisualInstance3D) SetSortingOffset(offset Float) {
	self.Runtime.VisualInstance3D_set_sorting_offset(self, offset)
}
func (self VisualInstance3D) GetSortingOffset() Float {
	return self.Runtime.VisualInstance3D_get_sorting_offset(self)
}
func (self VisualInstance3D) SetSortingUseAabbCenter(enabled bool) {
	self.Runtime.VisualInstance3D_set_sorting_use_aabb_center(self, enabled)
}
func (self VisualInstance3D) IsSortingUseAabbCenter() bool {
	return self.Runtime.VisualInstance3D_is_sorting_use_aabb_center(self)
}
func (self VisualInstance3D) GetAabb() AABB {
	return self.Runtime.VisualInstance3D_get_aabb(self)
}

type extendsVisualShader struct {
	_ [0]*extendsVisualShader
	class
}

func (self VisualShader) Shader() Shader { var parent Shader; parent.class = self.class; return parent }
func (self VisualShader) SetMode(mode ShaderMode) {
	self.Runtime.VisualShader_set_mode(self, mode)
}
func (self VisualShader) AddNode(atype VisualShaderType, node VisualShaderNode, position Vector2, id int64) {
	self.Runtime.VisualShader_add_node(self, atype, node, position, id)
}
func (self VisualShader) GetNode(atype VisualShaderType, id int64) VisualShaderNode {
	return self.Runtime.VisualShader_get_node(self, atype, id)
}
func (self VisualShader) SetNodePosition(atype VisualShaderType, id int64, position Vector2) {
	self.Runtime.VisualShader_set_node_position(self, atype, id, position)
}
func (self VisualShader) GetNodePosition(atype VisualShaderType, id int64) Vector2 {
	return self.Runtime.VisualShader_get_node_position(self, atype, id)
}
func (self VisualShader) GetNodeList(atype VisualShaderType) PackedInt32Array {
	return self.Runtime.VisualShader_get_node_list(self, atype)
}
func (self VisualShader) GetValidNodeId(atype VisualShaderType) int64 {
	return self.Runtime.VisualShader_get_valid_node_id(self, atype)
}
func (self VisualShader) RemoveNode(atype VisualShaderType, id int64) {
	self.Runtime.VisualShader_remove_node(self, atype, id)
}
func (self VisualShader) ReplaceNode(atype VisualShaderType, id int64, new_class string) {
	self.Runtime.VisualShader_replace_node(self, atype, id, new_class)
}
func (self VisualShader) IsNodeConnection(atype VisualShaderType, from_node int64, from_port int64, to_node int64, to_port int64) bool {
	return self.Runtime.VisualShader_is_node_connection(self, atype, from_node, from_port, to_node, to_port)
}
func (self VisualShader) CanConnectNodes(atype VisualShaderType, from_node int64, from_port int64, to_node int64, to_port int64) bool {
	return self.Runtime.VisualShader_can_connect_nodes(self, atype, from_node, from_port, to_node, to_port)
}
func (self VisualShader) ConnectNodes(atype VisualShaderType, from_node int64, from_port int64, to_node int64, to_port int64) int64 {
	return self.Runtime.VisualShader_connect_nodes(self, atype, from_node, from_port, to_node, to_port)
}
func (self VisualShader) DisconnectNodes(atype VisualShaderType, from_node int64, from_port int64, to_node int64, to_port int64) {
	self.Runtime.VisualShader_disconnect_nodes(self, atype, from_node, from_port, to_node, to_port)
}
func (self VisualShader) ConnectNodesForced(atype VisualShaderType, from_node int64, from_port int64, to_node int64, to_port int64) {
	self.Runtime.VisualShader_connect_nodes_forced(self, atype, from_node, from_port, to_node, to_port)
}
func (self VisualShader) GetNodeConnections(atype VisualShaderType) ArrayOf[Dictionary] {
	return self.Runtime.VisualShader_get_node_connections(self, atype)
}
func (self VisualShader) SetGraphOffset(offset Vector2) {
	self.Runtime.VisualShader_set_graph_offset(self, offset)
}
func (self VisualShader) GetGraphOffset() Vector2 {
	return self.Runtime.VisualShader_get_graph_offset(self)
}
func (self VisualShader) AddVarying(name string, mode VisualShaderVaryingMode, atype VisualShaderVaryingType) {
	self.Runtime.VisualShader_add_varying(self, name, mode, atype)
}
func (self VisualShader) RemoveVarying(name string) {
	self.Runtime.VisualShader_remove_varying(self, name)
}
func (self VisualShader) HasVarying(name string) bool {
	return self.Runtime.VisualShader_has_varying(self, name)
}

type extendsVisualShaderNode struct {
	_ [0]*extendsVisualShaderNode
	class
}

func (self VisualShaderNode) Resource() Resource {
	var parent Resource
	parent.class = self.class
	return parent
}
func (self VisualShaderNode) GetDefaultInputPort(atype VisualShaderNodePortType) int64 {
	return self.Runtime.VisualShaderNode_get_default_input_port(self, atype)
}
func (self VisualShaderNode) SetOutputPortForPreview(port int64) {
	self.Runtime.VisualShaderNode_set_output_port_for_preview(self, port)
}
func (self VisualShaderNode) GetOutputPortForPreview() int64 {
	return self.Runtime.VisualShaderNode_get_output_port_for_preview(self)
}
func (self VisualShaderNode) SetInputPortDefaultValue(port int64, value any, prev_value any) {
	self.Runtime.VisualShaderNode_set_input_port_default_value(self, port, value, prev_value)
}
func (self VisualShaderNode) GetInputPortDefaultValue(port int64) any {
	return self.Runtime.VisualShaderNode_get_input_port_default_value(self, port)
}
func (self VisualShaderNode) RemoveInputPortDefaultValue(port int64) {
	self.Runtime.VisualShaderNode_remove_input_port_default_value(self, port)
}
func (self VisualShaderNode) ClearDefaultInputValues() {
	self.Runtime.VisualShaderNode_clear_default_input_values(self)
}
func (self VisualShaderNode) SetDefaultInputValues(values Array) {
	self.Runtime.VisualShaderNode_set_default_input_values(self, values)
}
func (self VisualShaderNode) GetDefaultInputValues() Array {
	return self.Runtime.VisualShaderNode_get_default_input_values(self)
}

type extendsVisualShaderNodeBillboard struct {
	_ [0]*extendsVisualShaderNodeBillboard
	class
}

func (self VisualShaderNodeBillboard) VisualShaderNode() VisualShaderNode {
	var parent VisualShaderNode
	parent.class = self.class
	return parent
}
func (self VisualShaderNodeBillboard) SetBillboardType(billboard_type VisualShaderNodeBillboardBillboardType) {
	self.Runtime.VisualShaderNodeBillboard_set_billboard_type(self, billboard_type)
}
func (self VisualShaderNodeBillboard) GetBillboardType() VisualShaderNodeBillboardBillboardType {
	return self.Runtime.VisualShaderNodeBillboard_get_billboard_type(self)
}
func (self VisualShaderNodeBillboard) SetKeepScaleEnabled(enabled bool) {
	self.Runtime.VisualShaderNodeBillboard_set_keep_scale_enabled(self, enabled)
}
func (self VisualShaderNodeBillboard) IsKeepScaleEnabled() bool {
	return self.Runtime.VisualShaderNodeBillboard_is_keep_scale_enabled(self)
}

type extendsVisualShaderNodeBooleanConstant struct {
	_ [0]*extendsVisualShaderNodeBooleanConstant
	class
}

func (self VisualShaderNodeBooleanConstant) VisualShaderNodeConstant() VisualShaderNodeConstant {
	var parent VisualShaderNodeConstant
	parent.class = self.class
	return parent
}
func (self VisualShaderNodeBooleanConstant) SetConstant(constant bool) {
	self.Runtime.VisualShaderNodeBooleanConstant_set_constant(self, constant)
}
func (self VisualShaderNodeBooleanConstant) GetConstant() bool {
	return self.Runtime.VisualShaderNodeBooleanConstant_get_constant(self)
}

type extendsVisualShaderNodeBooleanParameter struct {
	_ [0]*extendsVisualShaderNodeBooleanParameter
	class
}

func (self VisualShaderNodeBooleanParameter) VisualShaderNodeParameter() VisualShaderNodeParameter {
	var parent VisualShaderNodeParameter
	parent.class = self.class
	return parent
}
func (self VisualShaderNodeBooleanParameter) SetDefaultValueEnabled(enabled bool) {
	self.Runtime.VisualShaderNodeBooleanParameter_set_default_value_enabled(self, enabled)
}
func (self VisualShaderNodeBooleanParameter) IsDefaultValueEnabled() bool {
	return self.Runtime.VisualShaderNodeBooleanParameter_is_default_value_enabled(self)
}
func (self VisualShaderNodeBooleanParameter) SetDefaultValue(value bool) {
	self.Runtime.VisualShaderNodeBooleanParameter_set_default_value(self, value)
}
func (self VisualShaderNodeBooleanParameter) GetDefaultValue() bool {
	return self.Runtime.VisualShaderNodeBooleanParameter_get_default_value(self)
}

type extendsVisualShaderNodeClamp struct {
	_ [0]*extendsVisualShaderNodeClamp
	class
}

func (self VisualShaderNodeClamp) VisualShaderNode() VisualShaderNode {
	var parent VisualShaderNode
	parent.class = self.class
	return parent
}
func (self VisualShaderNodeClamp) SetOpType(op_type VisualShaderNodeClampOpType) {
	self.Runtime.VisualShaderNodeClamp_set_op_type(self, op_type)
}
func (self VisualShaderNodeClamp) GetOpType() VisualShaderNodeClampOpType {
	return self.Runtime.VisualShaderNodeClamp_get_op_type(self)
}

type extendsVisualShaderNodeColorConstant struct {
	_ [0]*extendsVisualShaderNodeColorConstant
	class
}

func (self VisualShaderNodeColorConstant) VisualShaderNodeConstant() VisualShaderNodeConstant {
	var parent VisualShaderNodeConstant
	parent.class = self.class
	return parent
}
func (self VisualShaderNodeColorConstant) SetConstant(constant Color) {
	self.Runtime.VisualShaderNodeColorConstant_set_constant(self, constant)
}
func (self VisualShaderNodeColorConstant) GetConstant() Color {
	return self.Runtime.VisualShaderNodeColorConstant_get_constant(self)
}

type extendsVisualShaderNodeColorFunc struct {
	_ [0]*extendsVisualShaderNodeColorFunc
	class
}

func (self VisualShaderNodeColorFunc) VisualShaderNode() VisualShaderNode {
	var parent VisualShaderNode
	parent.class = self.class
	return parent
}
func (self VisualShaderNodeColorFunc) SetFunction(fn VisualShaderNodeColorFuncFunction) {
	self.Runtime.VisualShaderNodeColorFunc_set_function(self, fn)
}
func (self VisualShaderNodeColorFunc) GetFunction() VisualShaderNodeColorFuncFunction {
	return self.Runtime.VisualShaderNodeColorFunc_get_function(self)
}

type extendsVisualShaderNodeColorOp struct {
	_ [0]*extendsVisualShaderNodeColorOp
	class
}

func (self VisualShaderNodeColorOp) VisualShaderNode() VisualShaderNode {
	var parent VisualShaderNode
	parent.class = self.class
	return parent
}
func (self VisualShaderNodeColorOp) SetOperator(op VisualShaderNodeColorOpOperator) {
	self.Runtime.VisualShaderNodeColorOp_set_operator(self, op)
}
func (self VisualShaderNodeColorOp) GetOperator() VisualShaderNodeColorOpOperator {
	return self.Runtime.VisualShaderNodeColorOp_get_operator(self)
}

type extendsVisualShaderNodeColorParameter struct {
	_ [0]*extendsVisualShaderNodeColorParameter
	class
}

func (self VisualShaderNodeColorParameter) VisualShaderNodeParameter() VisualShaderNodeParameter {
	var parent VisualShaderNodeParameter
	parent.class = self.class
	return parent
}
func (self VisualShaderNodeColorParameter) SetDefaultValueEnabled(enabled bool) {
	self.Runtime.VisualShaderNodeColorParameter_set_default_value_enabled(self, enabled)
}
func (self VisualShaderNodeColorParameter) IsDefaultValueEnabled() bool {
	return self.Runtime.VisualShaderNodeColorParameter_is_default_value_enabled(self)
}
func (self VisualShaderNodeColorParameter) SetDefaultValue(value Color) {
	self.Runtime.VisualShaderNodeColorParameter_set_default_value(self, value)
}
func (self VisualShaderNodeColorParameter) GetDefaultValue() Color {
	return self.Runtime.VisualShaderNodeColorParameter_get_default_value(self)
}

type extendsVisualShaderNodeComment struct {
	_ [0]*extendsVisualShaderNodeComment
	class
}

func (self VisualShaderNodeComment) VisualShaderNodeResizableBase() VisualShaderNodeResizableBase {
	var parent VisualShaderNodeResizableBase
	parent.class = self.class
	return parent
}
func (self VisualShaderNodeComment) SetTitle(title string) {
	self.Runtime.VisualShaderNodeComment_set_title(self, title)
}
func (self VisualShaderNodeComment) GetTitle() string {
	return self.Runtime.VisualShaderNodeComment_get_title(self)
}
func (self VisualShaderNodeComment) SetDescription(description string) {
	self.Runtime.VisualShaderNodeComment_set_description(self, description)
}
func (self VisualShaderNodeComment) GetDescription() string {
	return self.Runtime.VisualShaderNodeComment_get_description(self)
}

type extendsVisualShaderNodeCompare struct {
	_ [0]*extendsVisualShaderNodeCompare
	class
}

func (self VisualShaderNodeCompare) VisualShaderNode() VisualShaderNode {
	var parent VisualShaderNode
	parent.class = self.class
	return parent
}
func (self VisualShaderNodeCompare) SetComparisonType(atype VisualShaderNodeCompareComparisonType) {
	self.Runtime.VisualShaderNodeCompare_set_comparison_type(self, atype)
}
func (self VisualShaderNodeCompare) GetComparisonType() VisualShaderNodeCompareComparisonType {
	return self.Runtime.VisualShaderNodeCompare_get_comparison_type(self)
}
func (self VisualShaderNodeCompare) SetFunction(fn VisualShaderNodeCompareFunction) {
	self.Runtime.VisualShaderNodeCompare_set_function(self, fn)
}
func (self VisualShaderNodeCompare) GetFunction() VisualShaderNodeCompareFunction {
	return self.Runtime.VisualShaderNodeCompare_get_function(self)
}
func (self VisualShaderNodeCompare) SetCondition(condition VisualShaderNodeCompareCondition) {
	self.Runtime.VisualShaderNodeCompare_set_condition(self, condition)
}
func (self VisualShaderNodeCompare) GetCondition() VisualShaderNodeCompareCondition {
	return self.Runtime.VisualShaderNodeCompare_get_condition(self)
}

type extendsVisualShaderNodeConstant struct {
	_ [0]*extendsVisualShaderNodeConstant
	class
}

func (self VisualShaderNodeConstant) VisualShaderNode() VisualShaderNode {
	var parent VisualShaderNode
	parent.class = self.class
	return parent
}

type extendsVisualShaderNodeCubemap struct {
	_ [0]*extendsVisualShaderNodeCubemap
	class
}

func (self VisualShaderNodeCubemap) VisualShaderNode() VisualShaderNode {
	var parent VisualShaderNode
	parent.class = self.class
	return parent
}
func (self VisualShaderNodeCubemap) SetSource(value VisualShaderNodeCubemapSource) {
	self.Runtime.VisualShaderNodeCubemap_set_source(self, value)
}
func (self VisualShaderNodeCubemap) GetSource() VisualShaderNodeCubemapSource {
	return self.Runtime.VisualShaderNodeCubemap_get_source(self)
}
func (self VisualShaderNodeCubemap) SetCubeMap(value Cubemap) {
	self.Runtime.VisualShaderNodeCubemap_set_cube_map(self, value)
}
func (self VisualShaderNodeCubemap) GetCubeMap() Cubemap {
	return self.Runtime.VisualShaderNodeCubemap_get_cube_map(self)
}
func (self VisualShaderNodeCubemap) SetTextureType(value VisualShaderNodeCubemapTextureType) {
	self.Runtime.VisualShaderNodeCubemap_set_texture_type(self, value)
}
func (self VisualShaderNodeCubemap) GetTextureType() VisualShaderNodeCubemapTextureType {
	return self.Runtime.VisualShaderNodeCubemap_get_texture_type(self)
}

type extendsVisualShaderNodeCubemapParameter struct {
	_ [0]*extendsVisualShaderNodeCubemapParameter
	class
}

func (self VisualShaderNodeCubemapParameter) VisualShaderNodeTextureParameter() VisualShaderNodeTextureParameter {
	var parent VisualShaderNodeTextureParameter
	parent.class = self.class
	return parent
}

type extendsVisualShaderNodeCurveTexture struct {
	_ [0]*extendsVisualShaderNodeCurveTexture
	class
}

func (self VisualShaderNodeCurveTexture) VisualShaderNodeResizableBase() VisualShaderNodeResizableBase {
	var parent VisualShaderNodeResizableBase
	parent.class = self.class
	return parent
}
func (self VisualShaderNodeCurveTexture) SetTexture(texture CurveTexture) {
	self.Runtime.VisualShaderNodeCurveTexture_set_texture(self, texture)
}
func (self VisualShaderNodeCurveTexture) GetTexture() CurveTexture {
	return self.Runtime.VisualShaderNodeCurveTexture_get_texture(self)
}

type extendsVisualShaderNodeCurveXYZTexture struct {
	_ [0]*extendsVisualShaderNodeCurveXYZTexture
	class
}

func (self VisualShaderNodeCurveXYZTexture) VisualShaderNodeResizableBase() VisualShaderNodeResizableBase {
	var parent VisualShaderNodeResizableBase
	parent.class = self.class
	return parent
}
func (self VisualShaderNodeCurveXYZTexture) SetTexture(texture CurveXYZTexture) {
	self.Runtime.VisualShaderNodeCurveXYZTexture_set_texture(self, texture)
}
func (self VisualShaderNodeCurveXYZTexture) GetTexture() CurveXYZTexture {
	return self.Runtime.VisualShaderNodeCurveXYZTexture_get_texture(self)
}

type extendsVisualShaderNodeCustom struct {
	_ [0]*extendsVisualShaderNodeCustom
	class
}

func (self VisualShaderNodeCustom) VisualShaderNode() VisualShaderNode {
	var parent VisualShaderNode
	parent.class = self.class
	return parent
}
func (self VisualShaderNodeCustom) GetOptionIndex(option int64) int64 {
	return self.Runtime.VisualShaderNodeCustom_get_option_index(self, option)
}

type extendsVisualShaderNodeDerivativeFunc struct {
	_ [0]*extendsVisualShaderNodeDerivativeFunc
	class
}

func (self VisualShaderNodeDerivativeFunc) VisualShaderNode() VisualShaderNode {
	var parent VisualShaderNode
	parent.class = self.class
	return parent
}
func (self VisualShaderNodeDerivativeFunc) SetOpType(atype VisualShaderNodeDerivativeFuncOpType) {
	self.Runtime.VisualShaderNodeDerivativeFunc_set_op_type(self, atype)
}
func (self VisualShaderNodeDerivativeFunc) GetOpType() VisualShaderNodeDerivativeFuncOpType {
	return self.Runtime.VisualShaderNodeDerivativeFunc_get_op_type(self)
}
func (self VisualShaderNodeDerivativeFunc) SetFunction(fn VisualShaderNodeDerivativeFuncFunction) {
	self.Runtime.VisualShaderNodeDerivativeFunc_set_function(self, fn)
}
func (self VisualShaderNodeDerivativeFunc) GetFunction() VisualShaderNodeDerivativeFuncFunction {
	return self.Runtime.VisualShaderNodeDerivativeFunc_get_function(self)
}
func (self VisualShaderNodeDerivativeFunc) SetPrecision(precision VisualShaderNodeDerivativeFuncPrecision) {
	self.Runtime.VisualShaderNodeDerivativeFunc_set_precision(self, precision)
}
func (self VisualShaderNodeDerivativeFunc) GetPrecision() VisualShaderNodeDerivativeFuncPrecision {
	return self.Runtime.VisualShaderNodeDerivativeFunc_get_precision(self)
}

type extendsVisualShaderNodeDeterminant struct {
	_ [0]*extendsVisualShaderNodeDeterminant
	class
}

func (self VisualShaderNodeDeterminant) VisualShaderNode() VisualShaderNode {
	var parent VisualShaderNode
	parent.class = self.class
	return parent
}

type extendsVisualShaderNodeDistanceFade struct {
	_ [0]*extendsVisualShaderNodeDistanceFade
	class
}

func (self VisualShaderNodeDistanceFade) VisualShaderNode() VisualShaderNode {
	var parent VisualShaderNode
	parent.class = self.class
	return parent
}

type extendsVisualShaderNodeDotProduct struct {
	_ [0]*extendsVisualShaderNodeDotProduct
	class
}

func (self VisualShaderNodeDotProduct) VisualShaderNode() VisualShaderNode {
	var parent VisualShaderNode
	parent.class = self.class
	return parent
}

type extendsVisualShaderNodeExpression struct {
	_ [0]*extendsVisualShaderNodeExpression
	class
}

func (self VisualShaderNodeExpression) VisualShaderNodeGroupBase() VisualShaderNodeGroupBase {
	var parent VisualShaderNodeGroupBase
	parent.class = self.class
	return parent
}
func (self VisualShaderNodeExpression) SetExpression(expression string) {
	self.Runtime.VisualShaderNodeExpression_set_expression(self, expression)
}
func (self VisualShaderNodeExpression) GetExpression() string {
	return self.Runtime.VisualShaderNodeExpression_get_expression(self)
}

type extendsVisualShaderNodeFaceForward struct {
	_ [0]*extendsVisualShaderNodeFaceForward
	class
}

func (self VisualShaderNodeFaceForward) VisualShaderNodeVectorBase() VisualShaderNodeVectorBase {
	var parent VisualShaderNodeVectorBase
	parent.class = self.class
	return parent
}

type extendsVisualShaderNodeFloatConstant struct {
	_ [0]*extendsVisualShaderNodeFloatConstant
	class
}

func (self VisualShaderNodeFloatConstant) VisualShaderNodeConstant() VisualShaderNodeConstant {
	var parent VisualShaderNodeConstant
	parent.class = self.class
	return parent
}
func (self VisualShaderNodeFloatConstant) SetConstant(constant Float) {
	self.Runtime.VisualShaderNodeFloatConstant_set_constant(self, constant)
}
func (self VisualShaderNodeFloatConstant) GetConstant() Float {
	return self.Runtime.VisualShaderNodeFloatConstant_get_constant(self)
}

type extendsVisualShaderNodeFloatFunc struct {
	_ [0]*extendsVisualShaderNodeFloatFunc
	class
}

func (self VisualShaderNodeFloatFunc) VisualShaderNode() VisualShaderNode {
	var parent VisualShaderNode
	parent.class = self.class
	return parent
}
func (self VisualShaderNodeFloatFunc) SetFunction(fn VisualShaderNodeFloatFuncFunction) {
	self.Runtime.VisualShaderNodeFloatFunc_set_function(self, fn)
}
func (self VisualShaderNodeFloatFunc) GetFunction() VisualShaderNodeFloatFuncFunction {
	return self.Runtime.VisualShaderNodeFloatFunc_get_function(self)
}

type extendsVisualShaderNodeFloatOp struct {
	_ [0]*extendsVisualShaderNodeFloatOp
	class
}

func (self VisualShaderNodeFloatOp) VisualShaderNode() VisualShaderNode {
	var parent VisualShaderNode
	parent.class = self.class
	return parent
}
func (self VisualShaderNodeFloatOp) SetOperator(op VisualShaderNodeFloatOpOperator) {
	self.Runtime.VisualShaderNodeFloatOp_set_operator(self, op)
}
func (self VisualShaderNodeFloatOp) GetOperator() VisualShaderNodeFloatOpOperator {
	return self.Runtime.VisualShaderNodeFloatOp_get_operator(self)
}

type extendsVisualShaderNodeFloatParameter struct {
	_ [0]*extendsVisualShaderNodeFloatParameter
	class
}

func (self VisualShaderNodeFloatParameter) VisualShaderNodeParameter() VisualShaderNodeParameter {
	var parent VisualShaderNodeParameter
	parent.class = self.class
	return parent
}
func (self VisualShaderNodeFloatParameter) SetHint(hint VisualShaderNodeFloatParameterHint) {
	self.Runtime.VisualShaderNodeFloatParameter_set_hint(self, hint)
}
func (self VisualShaderNodeFloatParameter) GetHint() VisualShaderNodeFloatParameterHint {
	return self.Runtime.VisualShaderNodeFloatParameter_get_hint(self)
}
func (self VisualShaderNodeFloatParameter) SetMin(value Float) {
	self.Runtime.VisualShaderNodeFloatParameter_set_min(self, value)
}
func (self VisualShaderNodeFloatParameter) GetMin() Float {
	return self.Runtime.VisualShaderNodeFloatParameter_get_min(self)
}
func (self VisualShaderNodeFloatParameter) SetMax(value Float) {
	self.Runtime.VisualShaderNodeFloatParameter_set_max(self, value)
}
func (self VisualShaderNodeFloatParameter) GetMax() Float {
	return self.Runtime.VisualShaderNodeFloatParameter_get_max(self)
}
func (self VisualShaderNodeFloatParameter) SetStep(value Float) {
	self.Runtime.VisualShaderNodeFloatParameter_set_step(self, value)
}
func (self VisualShaderNodeFloatParameter) GetStep() Float {
	return self.Runtime.VisualShaderNodeFloatParameter_get_step(self)
}
func (self VisualShaderNodeFloatParameter) SetDefaultValueEnabled(enabled bool) {
	self.Runtime.VisualShaderNodeFloatParameter_set_default_value_enabled(self, enabled)
}
func (self VisualShaderNodeFloatParameter) IsDefaultValueEnabled() bool {
	return self.Runtime.VisualShaderNodeFloatParameter_is_default_value_enabled(self)
}
func (self VisualShaderNodeFloatParameter) SetDefaultValue(value Float) {
	self.Runtime.VisualShaderNodeFloatParameter_set_default_value(self, value)
}
func (self VisualShaderNodeFloatParameter) GetDefaultValue() Float {
	return self.Runtime.VisualShaderNodeFloatParameter_get_default_value(self)
}

type extendsVisualShaderNodeFresnel struct {
	_ [0]*extendsVisualShaderNodeFresnel
	class
}

func (self VisualShaderNodeFresnel) VisualShaderNode() VisualShaderNode {
	var parent VisualShaderNode
	parent.class = self.class
	return parent
}

type extendsVisualShaderNodeGlobalExpression struct {
	_ [0]*extendsVisualShaderNodeGlobalExpression
	class
}

func (self VisualShaderNodeGlobalExpression) VisualShaderNodeExpression() VisualShaderNodeExpression {
	var parent VisualShaderNodeExpression
	parent.class = self.class
	return parent
}

type extendsVisualShaderNodeGroupBase struct {
	_ [0]*extendsVisualShaderNodeGroupBase
	class
}

func (self VisualShaderNodeGroupBase) VisualShaderNodeResizableBase() VisualShaderNodeResizableBase {
	var parent VisualShaderNodeResizableBase
	parent.class = self.class
	return parent
}
func (self VisualShaderNodeGroupBase) SetInputs(inputs string) {
	self.Runtime.VisualShaderNodeGroupBase_set_inputs(self, inputs)
}
func (self VisualShaderNodeGroupBase) GetInputs() string {
	return self.Runtime.VisualShaderNodeGroupBase_get_inputs(self)
}
func (self VisualShaderNodeGroupBase) SetOutputs(outputs string) {
	self.Runtime.VisualShaderNodeGroupBase_set_outputs(self, outputs)
}
func (self VisualShaderNodeGroupBase) GetOutputs() string {
	return self.Runtime.VisualShaderNodeGroupBase_get_outputs(self)
}
func (self VisualShaderNodeGroupBase) IsValidPortName(name string) bool {
	return self.Runtime.VisualShaderNodeGroupBase_is_valid_port_name(self, name)
}
func (self VisualShaderNodeGroupBase) AddInputPort(id int64, atype int64, name string) {
	self.Runtime.VisualShaderNodeGroupBase_add_input_port(self, id, atype, name)
}
func (self VisualShaderNodeGroupBase) RemoveInputPort(id int64) {
	self.Runtime.VisualShaderNodeGroupBase_remove_input_port(self, id)
}
func (self VisualShaderNodeGroupBase) GetInputPortCount() int64 {
	return self.Runtime.VisualShaderNodeGroupBase_get_input_port_count(self)
}
func (self VisualShaderNodeGroupBase) HasInputPort(id int64) bool {
	return self.Runtime.VisualShaderNodeGroupBase_has_input_port(self, id)
}
func (self VisualShaderNodeGroupBase) ClearInputPorts() {
	self.Runtime.VisualShaderNodeGroupBase_clear_input_ports(self)
}
func (self VisualShaderNodeGroupBase) AddOutputPort(id int64, atype int64, name string) {
	self.Runtime.VisualShaderNodeGroupBase_add_output_port(self, id, atype, name)
}
func (self VisualShaderNodeGroupBase) RemoveOutputPort(id int64) {
	self.Runtime.VisualShaderNodeGroupBase_remove_output_port(self, id)
}
func (self VisualShaderNodeGroupBase) GetOutputPortCount() int64 {
	return self.Runtime.VisualShaderNodeGroupBase_get_output_port_count(self)
}
func (self VisualShaderNodeGroupBase) HasOutputPort(id int64) bool {
	return self.Runtime.VisualShaderNodeGroupBase_has_output_port(self, id)
}
func (self VisualShaderNodeGroupBase) ClearOutputPorts() {
	self.Runtime.VisualShaderNodeGroupBase_clear_output_ports(self)
}
func (self VisualShaderNodeGroupBase) SetInputPortName(id int64, name string) {
	self.Runtime.VisualShaderNodeGroupBase_set_input_port_name(self, id, name)
}
func (self VisualShaderNodeGroupBase) SetInputPortType(id int64, atype int64) {
	self.Runtime.VisualShaderNodeGroupBase_set_input_port_type(self, id, atype)
}
func (self VisualShaderNodeGroupBase) SetOutputPortName(id int64, name string) {
	self.Runtime.VisualShaderNodeGroupBase_set_output_port_name(self, id, name)
}
func (self VisualShaderNodeGroupBase) SetOutputPortType(id int64, atype int64) {
	self.Runtime.VisualShaderNodeGroupBase_set_output_port_type(self, id, atype)
}
func (self VisualShaderNodeGroupBase) GetFreeInputPortId() int64 {
	return self.Runtime.VisualShaderNodeGroupBase_get_free_input_port_id(self)
}
func (self VisualShaderNodeGroupBase) GetFreeOutputPortId() int64 {
	return self.Runtime.VisualShaderNodeGroupBase_get_free_output_port_id(self)
}

type extendsVisualShaderNodeIf struct {
	_ [0]*extendsVisualShaderNodeIf
	class
}

func (self VisualShaderNodeIf) VisualShaderNode() VisualShaderNode {
	var parent VisualShaderNode
	parent.class = self.class
	return parent
}

type extendsVisualShaderNodeInput struct {
	_ [0]*extendsVisualShaderNodeInput
	class
}

func (self VisualShaderNodeInput) VisualShaderNode() VisualShaderNode {
	var parent VisualShaderNode
	parent.class = self.class
	return parent
}
func (self VisualShaderNodeInput) SetInputName(name string) {
	self.Runtime.VisualShaderNodeInput_set_input_name(self, name)
}
func (self VisualShaderNodeInput) GetInputName() string {
	return self.Runtime.VisualShaderNodeInput_get_input_name(self)
}
func (self VisualShaderNodeInput) GetInputRealName() string {
	return self.Runtime.VisualShaderNodeInput_get_input_real_name(self)
}

type extendsVisualShaderNodeIntConstant struct {
	_ [0]*extendsVisualShaderNodeIntConstant
	class
}

func (self VisualShaderNodeIntConstant) VisualShaderNodeConstant() VisualShaderNodeConstant {
	var parent VisualShaderNodeConstant
	parent.class = self.class
	return parent
}
func (self VisualShaderNodeIntConstant) SetConstant(constant int64) {
	self.Runtime.VisualShaderNodeIntConstant_set_constant(self, constant)
}
func (self VisualShaderNodeIntConstant) GetConstant() int64 {
	return self.Runtime.VisualShaderNodeIntConstant_get_constant(self)
}

type extendsVisualShaderNodeIntFunc struct {
	_ [0]*extendsVisualShaderNodeIntFunc
	class
}

func (self VisualShaderNodeIntFunc) VisualShaderNode() VisualShaderNode {
	var parent VisualShaderNode
	parent.class = self.class
	return parent
}
func (self VisualShaderNodeIntFunc) SetFunction(fn VisualShaderNodeIntFuncFunction) {
	self.Runtime.VisualShaderNodeIntFunc_set_function(self, fn)
}
func (self VisualShaderNodeIntFunc) GetFunction() VisualShaderNodeIntFuncFunction {
	return self.Runtime.VisualShaderNodeIntFunc_get_function(self)
}

type extendsVisualShaderNodeIntOp struct {
	_ [0]*extendsVisualShaderNodeIntOp
	class
}

func (self VisualShaderNodeIntOp) VisualShaderNode() VisualShaderNode {
	var parent VisualShaderNode
	parent.class = self.class
	return parent
}
func (self VisualShaderNodeIntOp) SetOperator(op VisualShaderNodeIntOpOperator) {
	self.Runtime.VisualShaderNodeIntOp_set_operator(self, op)
}
func (self VisualShaderNodeIntOp) GetOperator() VisualShaderNodeIntOpOperator {
	return self.Runtime.VisualShaderNodeIntOp_get_operator(self)
}

type extendsVisualShaderNodeIntParameter struct {
	_ [0]*extendsVisualShaderNodeIntParameter
	class
}

func (self VisualShaderNodeIntParameter) VisualShaderNodeParameter() VisualShaderNodeParameter {
	var parent VisualShaderNodeParameter
	parent.class = self.class
	return parent
}
func (self VisualShaderNodeIntParameter) SetHint(hint VisualShaderNodeIntParameterHint) {
	self.Runtime.VisualShaderNodeIntParameter_set_hint(self, hint)
}
func (self VisualShaderNodeIntParameter) GetHint() VisualShaderNodeIntParameterHint {
	return self.Runtime.VisualShaderNodeIntParameter_get_hint(self)
}
func (self VisualShaderNodeIntParameter) SetMin(value int64) {
	self.Runtime.VisualShaderNodeIntParameter_set_min(self, value)
}
func (self VisualShaderNodeIntParameter) GetMin() int64 {
	return self.Runtime.VisualShaderNodeIntParameter_get_min(self)
}
func (self VisualShaderNodeIntParameter) SetMax(value int64) {
	self.Runtime.VisualShaderNodeIntParameter_set_max(self, value)
}
func (self VisualShaderNodeIntParameter) GetMax() int64 {
	return self.Runtime.VisualShaderNodeIntParameter_get_max(self)
}
func (self VisualShaderNodeIntParameter) SetStep(value int64) {
	self.Runtime.VisualShaderNodeIntParameter_set_step(self, value)
}
func (self VisualShaderNodeIntParameter) GetStep() int64 {
	return self.Runtime.VisualShaderNodeIntParameter_get_step(self)
}
func (self VisualShaderNodeIntParameter) SetDefaultValueEnabled(enabled bool) {
	self.Runtime.VisualShaderNodeIntParameter_set_default_value_enabled(self, enabled)
}
func (self VisualShaderNodeIntParameter) IsDefaultValueEnabled() bool {
	return self.Runtime.VisualShaderNodeIntParameter_is_default_value_enabled(self)
}
func (self VisualShaderNodeIntParameter) SetDefaultValue(value int64) {
	self.Runtime.VisualShaderNodeIntParameter_set_default_value(self, value)
}
func (self VisualShaderNodeIntParameter) GetDefaultValue() int64 {
	return self.Runtime.VisualShaderNodeIntParameter_get_default_value(self)
}

type extendsVisualShaderNodeIs struct {
	_ [0]*extendsVisualShaderNodeIs
	class
}

func (self VisualShaderNodeIs) VisualShaderNode() VisualShaderNode {
	var parent VisualShaderNode
	parent.class = self.class
	return parent
}
func (self VisualShaderNodeIs) SetFunction(fn VisualShaderNodeIsFunction) {
	self.Runtime.VisualShaderNodeIs_set_function(self, fn)
}
func (self VisualShaderNodeIs) GetFunction() VisualShaderNodeIsFunction {
	return self.Runtime.VisualShaderNodeIs_get_function(self)
}

type extendsVisualShaderNodeLinearSceneDepth struct {
	_ [0]*extendsVisualShaderNodeLinearSceneDepth
	class
}

func (self VisualShaderNodeLinearSceneDepth) VisualShaderNode() VisualShaderNode {
	var parent VisualShaderNode
	parent.class = self.class
	return parent
}

type extendsVisualShaderNodeMix struct {
	_ [0]*extendsVisualShaderNodeMix
	class
}

func (self VisualShaderNodeMix) VisualShaderNode() VisualShaderNode {
	var parent VisualShaderNode
	parent.class = self.class
	return parent
}
func (self VisualShaderNodeMix) SetOpType(op_type VisualShaderNodeMixOpType) {
	self.Runtime.VisualShaderNodeMix_set_op_type(self, op_type)
}
func (self VisualShaderNodeMix) GetOpType() VisualShaderNodeMixOpType {
	return self.Runtime.VisualShaderNodeMix_get_op_type(self)
}

type extendsVisualShaderNodeMultiplyAdd struct {
	_ [0]*extendsVisualShaderNodeMultiplyAdd
	class
}

func (self VisualShaderNodeMultiplyAdd) VisualShaderNode() VisualShaderNode {
	var parent VisualShaderNode
	parent.class = self.class
	return parent
}
func (self VisualShaderNodeMultiplyAdd) SetOpType(atype VisualShaderNodeMultiplyAddOpType) {
	self.Runtime.VisualShaderNodeMultiplyAdd_set_op_type(self, atype)
}
func (self VisualShaderNodeMultiplyAdd) GetOpType() VisualShaderNodeMultiplyAddOpType {
	return self.Runtime.VisualShaderNodeMultiplyAdd_get_op_type(self)
}

type extendsVisualShaderNodeOuterProduct struct {
	_ [0]*extendsVisualShaderNodeOuterProduct
	class
}

func (self VisualShaderNodeOuterProduct) VisualShaderNode() VisualShaderNode {
	var parent VisualShaderNode
	parent.class = self.class
	return parent
}

type extendsVisualShaderNodeOutput struct {
	_ [0]*extendsVisualShaderNodeOutput
	class
}

func (self VisualShaderNodeOutput) VisualShaderNode() VisualShaderNode {
	var parent VisualShaderNode
	parent.class = self.class
	return parent
}

type extendsVisualShaderNodeParameter struct {
	_ [0]*extendsVisualShaderNodeParameter
	class
}

func (self VisualShaderNodeParameter) VisualShaderNode() VisualShaderNode {
	var parent VisualShaderNode
	parent.class = self.class
	return parent
}
func (self VisualShaderNodeParameter) SetParameterName(name string) {
	self.Runtime.VisualShaderNodeParameter_set_parameter_name(self, name)
}
func (self VisualShaderNodeParameter) GetParameterName() string {
	return self.Runtime.VisualShaderNodeParameter_get_parameter_name(self)
}
func (self VisualShaderNodeParameter) SetQualifier(qualifier VisualShaderNodeParameterQualifier) {
	self.Runtime.VisualShaderNodeParameter_set_qualifier(self, qualifier)
}
func (self VisualShaderNodeParameter) GetQualifier() VisualShaderNodeParameterQualifier {
	return self.Runtime.VisualShaderNodeParameter_get_qualifier(self)
}

type extendsVisualShaderNodeParameterRef struct {
	_ [0]*extendsVisualShaderNodeParameterRef
	class
}

func (self VisualShaderNodeParameterRef) VisualShaderNode() VisualShaderNode {
	var parent VisualShaderNode
	parent.class = self.class
	return parent
}
func (self VisualShaderNodeParameterRef) SetParameterName(name string) {
	self.Runtime.VisualShaderNodeParameterRef_set_parameter_name(self, name)
}
func (self VisualShaderNodeParameterRef) GetParameterName() string {
	return self.Runtime.VisualShaderNodeParameterRef_get_parameter_name(self)
}

type extendsVisualShaderNodeParticleAccelerator struct {
	_ [0]*extendsVisualShaderNodeParticleAccelerator
	class
}

func (self VisualShaderNodeParticleAccelerator) VisualShaderNode() VisualShaderNode {
	var parent VisualShaderNode
	parent.class = self.class
	return parent
}
func (self VisualShaderNodeParticleAccelerator) SetMode(mode VisualShaderNodeParticleAcceleratorMode) {
	self.Runtime.VisualShaderNodeParticleAccelerator_set_mode(self, mode)
}
func (self VisualShaderNodeParticleAccelerator) GetMode() VisualShaderNodeParticleAcceleratorMode {
	return self.Runtime.VisualShaderNodeParticleAccelerator_get_mode(self)
}

type extendsVisualShaderNodeParticleBoxEmitter struct {
	_ [0]*extendsVisualShaderNodeParticleBoxEmitter
	class
}

func (self VisualShaderNodeParticleBoxEmitter) VisualShaderNodeParticleEmitter() VisualShaderNodeParticleEmitter {
	var parent VisualShaderNodeParticleEmitter
	parent.class = self.class
	return parent
}

type extendsVisualShaderNodeParticleConeVelocity struct {
	_ [0]*extendsVisualShaderNodeParticleConeVelocity
	class
}

func (self VisualShaderNodeParticleConeVelocity) VisualShaderNode() VisualShaderNode {
	var parent VisualShaderNode
	parent.class = self.class
	return parent
}

type extendsVisualShaderNodeParticleEmit struct {
	_ [0]*extendsVisualShaderNodeParticleEmit
	class
}

func (self VisualShaderNodeParticleEmit) VisualShaderNode() VisualShaderNode {
	var parent VisualShaderNode
	parent.class = self.class
	return parent
}
func (self VisualShaderNodeParticleEmit) SetFlags(flags VisualShaderNodeParticleEmitEmitFlags) {
	self.Runtime.VisualShaderNodeParticleEmit_set_flags(self, flags)
}
func (self VisualShaderNodeParticleEmit) GetFlags() VisualShaderNodeParticleEmitEmitFlags {
	return self.Runtime.VisualShaderNodeParticleEmit_get_flags(self)
}

type extendsVisualShaderNodeParticleEmitter struct {
	_ [0]*extendsVisualShaderNodeParticleEmitter
	class
}

func (self VisualShaderNodeParticleEmitter) VisualShaderNode() VisualShaderNode {
	var parent VisualShaderNode
	parent.class = self.class
	return parent
}
func (self VisualShaderNodeParticleEmitter) SetMode2d(enabled bool) {
	self.Runtime.VisualShaderNodeParticleEmitter_set_mode_2d(self, enabled)
}
func (self VisualShaderNodeParticleEmitter) IsMode2d() bool {
	return self.Runtime.VisualShaderNodeParticleEmitter_is_mode_2d(self)
}

type extendsVisualShaderNodeParticleMeshEmitter struct {
	_ [0]*extendsVisualShaderNodeParticleMeshEmitter
	class
}

func (self VisualShaderNodeParticleMeshEmitter) VisualShaderNodeParticleEmitter() VisualShaderNodeParticleEmitter {
	var parent VisualShaderNodeParticleEmitter
	parent.class = self.class
	return parent
}
func (self VisualShaderNodeParticleMeshEmitter) SetMesh(mesh Mesh) {
	self.Runtime.VisualShaderNodeParticleMeshEmitter_set_mesh(self, mesh)
}
func (self VisualShaderNodeParticleMeshEmitter) GetMesh() Mesh {
	return self.Runtime.VisualShaderNodeParticleMeshEmitter_get_mesh(self)
}
func (self VisualShaderNodeParticleMeshEmitter) SetUseAllSurfaces(enabled bool) {
	self.Runtime.VisualShaderNodeParticleMeshEmitter_set_use_all_surfaces(self, enabled)
}
func (self VisualShaderNodeParticleMeshEmitter) IsUseAllSurfaces() bool {
	return self.Runtime.VisualShaderNodeParticleMeshEmitter_is_use_all_surfaces(self)
}
func (self VisualShaderNodeParticleMeshEmitter) SetSurfaceIndex(surface_index int64) {
	self.Runtime.VisualShaderNodeParticleMeshEmitter_set_surface_index(self, surface_index)
}
func (self VisualShaderNodeParticleMeshEmitter) GetSurfaceIndex() int64 {
	return self.Runtime.VisualShaderNodeParticleMeshEmitter_get_surface_index(self)
}

type extendsVisualShaderNodeParticleMultiplyByAxisAngle struct {
	_ [0]*extendsVisualShaderNodeParticleMultiplyByAxisAngle
	class
}

func (self VisualShaderNodeParticleMultiplyByAxisAngle) VisualShaderNode() VisualShaderNode {
	var parent VisualShaderNode
	parent.class = self.class
	return parent
}
func (self VisualShaderNodeParticleMultiplyByAxisAngle) SetDegreesMode(enabled bool) {
	self.Runtime.VisualShaderNodeParticleMultiplyByAxisAngle_set_degrees_mode(self, enabled)
}
func (self VisualShaderNodeParticleMultiplyByAxisAngle) IsDegreesMode() bool {
	return self.Runtime.VisualShaderNodeParticleMultiplyByAxisAngle_is_degrees_mode(self)
}

type extendsVisualShaderNodeParticleOutput struct {
	_ [0]*extendsVisualShaderNodeParticleOutput
	class
}

func (self VisualShaderNodeParticleOutput) VisualShaderNodeOutput() VisualShaderNodeOutput {
	var parent VisualShaderNodeOutput
	parent.class = self.class
	return parent
}

type extendsVisualShaderNodeParticleRandomness struct {
	_ [0]*extendsVisualShaderNodeParticleRandomness
	class
}

func (self VisualShaderNodeParticleRandomness) VisualShaderNode() VisualShaderNode {
	var parent VisualShaderNode
	parent.class = self.class
	return parent
}
func (self VisualShaderNodeParticleRandomness) SetOpType(atype VisualShaderNodeParticleRandomnessOpType) {
	self.Runtime.VisualShaderNodeParticleRandomness_set_op_type(self, atype)
}
func (self VisualShaderNodeParticleRandomness) GetOpType() VisualShaderNodeParticleRandomnessOpType {
	return self.Runtime.VisualShaderNodeParticleRandomness_get_op_type(self)
}

type extendsVisualShaderNodeParticleRingEmitter struct {
	_ [0]*extendsVisualShaderNodeParticleRingEmitter
	class
}

func (self VisualShaderNodeParticleRingEmitter) VisualShaderNodeParticleEmitter() VisualShaderNodeParticleEmitter {
	var parent VisualShaderNodeParticleEmitter
	parent.class = self.class
	return parent
}

type extendsVisualShaderNodeParticleSphereEmitter struct {
	_ [0]*extendsVisualShaderNodeParticleSphereEmitter
	class
}

func (self VisualShaderNodeParticleSphereEmitter) VisualShaderNodeParticleEmitter() VisualShaderNodeParticleEmitter {
	var parent VisualShaderNodeParticleEmitter
	parent.class = self.class
	return parent
}

type extendsVisualShaderNodeProximityFade struct {
	_ [0]*extendsVisualShaderNodeProximityFade
	class
}

func (self VisualShaderNodeProximityFade) VisualShaderNode() VisualShaderNode {
	var parent VisualShaderNode
	parent.class = self.class
	return parent
}

type extendsVisualShaderNodeRandomRange struct {
	_ [0]*extendsVisualShaderNodeRandomRange
	class
}

func (self VisualShaderNodeRandomRange) VisualShaderNode() VisualShaderNode {
	var parent VisualShaderNode
	parent.class = self.class
	return parent
}

type extendsVisualShaderNodeRemap struct {
	_ [0]*extendsVisualShaderNodeRemap
	class
}

func (self VisualShaderNodeRemap) VisualShaderNode() VisualShaderNode {
	var parent VisualShaderNode
	parent.class = self.class
	return parent
}

type extendsVisualShaderNodeResizableBase struct {
	_ [0]*extendsVisualShaderNodeResizableBase
	class
}

func (self VisualShaderNodeResizableBase) VisualShaderNode() VisualShaderNode {
	var parent VisualShaderNode
	parent.class = self.class
	return parent
}
func (self VisualShaderNodeResizableBase) SetSize(size Vector2) {
	self.Runtime.VisualShaderNodeResizableBase_set_size(self, size)
}
func (self VisualShaderNodeResizableBase) GetSize() Vector2 {
	return self.Runtime.VisualShaderNodeResizableBase_get_size(self)
}

type extendsVisualShaderNodeRotationByAxis struct {
	_ [0]*extendsVisualShaderNodeRotationByAxis
	class
}

func (self VisualShaderNodeRotationByAxis) VisualShaderNode() VisualShaderNode {
	var parent VisualShaderNode
	parent.class = self.class
	return parent
}

type extendsVisualShaderNodeSDFRaymarch struct {
	_ [0]*extendsVisualShaderNodeSDFRaymarch
	class
}

func (self VisualShaderNodeSDFRaymarch) VisualShaderNode() VisualShaderNode {
	var parent VisualShaderNode
	parent.class = self.class
	return parent
}

type extendsVisualShaderNodeSDFToScreenUV struct {
	_ [0]*extendsVisualShaderNodeSDFToScreenUV
	class
}

func (self VisualShaderNodeSDFToScreenUV) VisualShaderNode() VisualShaderNode {
	var parent VisualShaderNode
	parent.class = self.class
	return parent
}

type extendsVisualShaderNodeSample3D struct {
	_ [0]*extendsVisualShaderNodeSample3D
	class
}

func (self VisualShaderNodeSample3D) VisualShaderNode() VisualShaderNode {
	var parent VisualShaderNode
	parent.class = self.class
	return parent
}
func (self VisualShaderNodeSample3D) SetSource(value VisualShaderNodeSample3DSource) {
	self.Runtime.VisualShaderNodeSample3D_set_source(self, value)
}
func (self VisualShaderNodeSample3D) GetSource() VisualShaderNodeSample3DSource {
	return self.Runtime.VisualShaderNodeSample3D_get_source(self)
}

type extendsVisualShaderNodeScreenNormalWorldSpace struct {
	_ [0]*extendsVisualShaderNodeScreenNormalWorldSpace
	class
}

func (self VisualShaderNodeScreenNormalWorldSpace) VisualShaderNode() VisualShaderNode {
	var parent VisualShaderNode
	parent.class = self.class
	return parent
}

type extendsVisualShaderNodeScreenUVToSDF struct {
	_ [0]*extendsVisualShaderNodeScreenUVToSDF
	class
}

func (self VisualShaderNodeScreenUVToSDF) VisualShaderNode() VisualShaderNode {
	var parent VisualShaderNode
	parent.class = self.class
	return parent
}

type extendsVisualShaderNodeSmoothStep struct {
	_ [0]*extendsVisualShaderNodeSmoothStep
	class
}

func (self VisualShaderNodeSmoothStep) VisualShaderNode() VisualShaderNode {
	var parent VisualShaderNode
	parent.class = self.class
	return parent
}
func (self VisualShaderNodeSmoothStep) SetOpType(op_type VisualShaderNodeSmoothStepOpType) {
	self.Runtime.VisualShaderNodeSmoothStep_set_op_type(self, op_type)
}
func (self VisualShaderNodeSmoothStep) GetOpType() VisualShaderNodeSmoothStepOpType {
	return self.Runtime.VisualShaderNodeSmoothStep_get_op_type(self)
}

type extendsVisualShaderNodeStep struct {
	_ [0]*extendsVisualShaderNodeStep
	class
}

func (self VisualShaderNodeStep) VisualShaderNode() VisualShaderNode {
	var parent VisualShaderNode
	parent.class = self.class
	return parent
}
func (self VisualShaderNodeStep) SetOpType(op_type VisualShaderNodeStepOpType) {
	self.Runtime.VisualShaderNodeStep_set_op_type(self, op_type)
}
func (self VisualShaderNodeStep) GetOpType() VisualShaderNodeStepOpType {
	return self.Runtime.VisualShaderNodeStep_get_op_type(self)
}

type extendsVisualShaderNodeSwitch struct {
	_ [0]*extendsVisualShaderNodeSwitch
	class
}

func (self VisualShaderNodeSwitch) VisualShaderNode() VisualShaderNode {
	var parent VisualShaderNode
	parent.class = self.class
	return parent
}
func (self VisualShaderNodeSwitch) SetOpType(atype VisualShaderNodeSwitchOpType) {
	self.Runtime.VisualShaderNodeSwitch_set_op_type(self, atype)
}
func (self VisualShaderNodeSwitch) GetOpType() VisualShaderNodeSwitchOpType {
	return self.Runtime.VisualShaderNodeSwitch_get_op_type(self)
}

type extendsVisualShaderNodeTexture struct {
	_ [0]*extendsVisualShaderNodeTexture
	class
}

func (self VisualShaderNodeTexture) VisualShaderNode() VisualShaderNode {
	var parent VisualShaderNode
	parent.class = self.class
	return parent
}
func (self VisualShaderNodeTexture) SetSource(value VisualShaderNodeTextureSource) {
	self.Runtime.VisualShaderNodeTexture_set_source(self, value)
}
func (self VisualShaderNodeTexture) GetSource() VisualShaderNodeTextureSource {
	return self.Runtime.VisualShaderNodeTexture_get_source(self)
}
func (self VisualShaderNodeTexture) SetTexture(value Texture2D) {
	self.Runtime.VisualShaderNodeTexture_set_texture(self, value)
}
func (self VisualShaderNodeTexture) GetTexture() Texture2D {
	return self.Runtime.VisualShaderNodeTexture_get_texture(self)
}
func (self VisualShaderNodeTexture) SetTextureType(value VisualShaderNodeTextureTextureType) {
	self.Runtime.VisualShaderNodeTexture_set_texture_type(self, value)
}
func (self VisualShaderNodeTexture) GetTextureType() VisualShaderNodeTextureTextureType {
	return self.Runtime.VisualShaderNodeTexture_get_texture_type(self)
}

type extendsVisualShaderNodeTexture2DArray struct {
	_ [0]*extendsVisualShaderNodeTexture2DArray
	class
}

func (self VisualShaderNodeTexture2DArray) VisualShaderNodeSample3D() VisualShaderNodeSample3D {
	var parent VisualShaderNodeSample3D
	parent.class = self.class
	return parent
}
func (self VisualShaderNodeTexture2DArray) SetTextureArray(value Texture2DArray) {
	self.Runtime.VisualShaderNodeTexture2DArray_set_texture_array(self, value)
}
func (self VisualShaderNodeTexture2DArray) GetTextureArray() Texture2DArray {
	return self.Runtime.VisualShaderNodeTexture2DArray_get_texture_array(self)
}

type extendsVisualShaderNodeTexture2DArrayParameter struct {
	_ [0]*extendsVisualShaderNodeTexture2DArrayParameter
	class
}

func (self VisualShaderNodeTexture2DArrayParameter) VisualShaderNodeTextureParameter() VisualShaderNodeTextureParameter {
	var parent VisualShaderNodeTextureParameter
	parent.class = self.class
	return parent
}

type extendsVisualShaderNodeTexture2DParameter struct {
	_ [0]*extendsVisualShaderNodeTexture2DParameter
	class
}

func (self VisualShaderNodeTexture2DParameter) VisualShaderNodeTextureParameter() VisualShaderNodeTextureParameter {
	var parent VisualShaderNodeTextureParameter
	parent.class = self.class
	return parent
}

type extendsVisualShaderNodeTexture3D struct {
	_ [0]*extendsVisualShaderNodeTexture3D
	class
}

func (self VisualShaderNodeTexture3D) VisualShaderNodeSample3D() VisualShaderNodeSample3D {
	var parent VisualShaderNodeSample3D
	parent.class = self.class
	return parent
}
func (self VisualShaderNodeTexture3D) SetTexture(value Texture3D) {
	self.Runtime.VisualShaderNodeTexture3D_set_texture(self, value)
}
func (self VisualShaderNodeTexture3D) GetTexture() Texture3D {
	return self.Runtime.VisualShaderNodeTexture3D_get_texture(self)
}

type extendsVisualShaderNodeTexture3DParameter struct {
	_ [0]*extendsVisualShaderNodeTexture3DParameter
	class
}

func (self VisualShaderNodeTexture3DParameter) VisualShaderNodeTextureParameter() VisualShaderNodeTextureParameter {
	var parent VisualShaderNodeTextureParameter
	parent.class = self.class
	return parent
}

type extendsVisualShaderNodeTextureParameter struct {
	_ [0]*extendsVisualShaderNodeTextureParameter
	class
}

func (self VisualShaderNodeTextureParameter) VisualShaderNodeParameter() VisualShaderNodeParameter {
	var parent VisualShaderNodeParameter
	parent.class = self.class
	return parent
}
func (self VisualShaderNodeTextureParameter) SetTextureType(atype VisualShaderNodeTextureParameterTextureType) {
	self.Runtime.VisualShaderNodeTextureParameter_set_texture_type(self, atype)
}
func (self VisualShaderNodeTextureParameter) GetTextureType() VisualShaderNodeTextureParameterTextureType {
	return self.Runtime.VisualShaderNodeTextureParameter_get_texture_type(self)
}
func (self VisualShaderNodeTextureParameter) SetColorDefault(color VisualShaderNodeTextureParameterColorDefault) {
	self.Runtime.VisualShaderNodeTextureParameter_set_color_default(self, color)
}
func (self VisualShaderNodeTextureParameter) GetColorDefault() VisualShaderNodeTextureParameterColorDefault {
	return self.Runtime.VisualShaderNodeTextureParameter_get_color_default(self)
}
func (self VisualShaderNodeTextureParameter) SetTextureFilter(filter VisualShaderNodeTextureParameterTextureFilter) {
	self.Runtime.VisualShaderNodeTextureParameter_set_texture_filter(self, filter)
}
func (self VisualShaderNodeTextureParameter) GetTextureFilter() VisualShaderNodeTextureParameterTextureFilter {
	return self.Runtime.VisualShaderNodeTextureParameter_get_texture_filter(self)
}
func (self VisualShaderNodeTextureParameter) SetTextureRepeat(repeat VisualShaderNodeTextureParameterTextureRepeat) {
	self.Runtime.VisualShaderNodeTextureParameter_set_texture_repeat(self, repeat)
}
func (self VisualShaderNodeTextureParameter) GetTextureRepeat() VisualShaderNodeTextureParameterTextureRepeat {
	return self.Runtime.VisualShaderNodeTextureParameter_get_texture_repeat(self)
}
func (self VisualShaderNodeTextureParameter) SetTextureSource(source VisualShaderNodeTextureParameterTextureSource) {
	self.Runtime.VisualShaderNodeTextureParameter_set_texture_source(self, source)
}
func (self VisualShaderNodeTextureParameter) GetTextureSource() VisualShaderNodeTextureParameterTextureSource {
	return self.Runtime.VisualShaderNodeTextureParameter_get_texture_source(self)
}

type extendsVisualShaderNodeTextureParameterTriplanar struct {
	_ [0]*extendsVisualShaderNodeTextureParameterTriplanar
	class
}

func (self VisualShaderNodeTextureParameterTriplanar) VisualShaderNodeTextureParameter() VisualShaderNodeTextureParameter {
	var parent VisualShaderNodeTextureParameter
	parent.class = self.class
	return parent
}

type extendsVisualShaderNodeTextureSDF struct {
	_ [0]*extendsVisualShaderNodeTextureSDF
	class
}

func (self VisualShaderNodeTextureSDF) VisualShaderNode() VisualShaderNode {
	var parent VisualShaderNode
	parent.class = self.class
	return parent
}

type extendsVisualShaderNodeTextureSDFNormal struct {
	_ [0]*extendsVisualShaderNodeTextureSDFNormal
	class
}

func (self VisualShaderNodeTextureSDFNormal) VisualShaderNode() VisualShaderNode {
	var parent VisualShaderNode
	parent.class = self.class
	return parent
}

type extendsVisualShaderNodeTransformCompose struct {
	_ [0]*extendsVisualShaderNodeTransformCompose
	class
}

func (self VisualShaderNodeTransformCompose) VisualShaderNode() VisualShaderNode {
	var parent VisualShaderNode
	parent.class = self.class
	return parent
}

type extendsVisualShaderNodeTransformConstant struct {
	_ [0]*extendsVisualShaderNodeTransformConstant
	class
}

func (self VisualShaderNodeTransformConstant) VisualShaderNodeConstant() VisualShaderNodeConstant {
	var parent VisualShaderNodeConstant
	parent.class = self.class
	return parent
}
func (self VisualShaderNodeTransformConstant) SetConstant(constant Transform3D) {
	self.Runtime.VisualShaderNodeTransformConstant_set_constant(self, constant)
}
func (self VisualShaderNodeTransformConstant) GetConstant() Transform3D {
	return self.Runtime.VisualShaderNodeTransformConstant_get_constant(self)
}

type extendsVisualShaderNodeTransformDecompose struct {
	_ [0]*extendsVisualShaderNodeTransformDecompose
	class
}

func (self VisualShaderNodeTransformDecompose) VisualShaderNode() VisualShaderNode {
	var parent VisualShaderNode
	parent.class = self.class
	return parent
}

type extendsVisualShaderNodeTransformFunc struct {
	_ [0]*extendsVisualShaderNodeTransformFunc
	class
}

func (self VisualShaderNodeTransformFunc) VisualShaderNode() VisualShaderNode {
	var parent VisualShaderNode
	parent.class = self.class
	return parent
}
func (self VisualShaderNodeTransformFunc) SetFunction(fn VisualShaderNodeTransformFuncFunction) {
	self.Runtime.VisualShaderNodeTransformFunc_set_function(self, fn)
}
func (self VisualShaderNodeTransformFunc) GetFunction() VisualShaderNodeTransformFuncFunction {
	return self.Runtime.VisualShaderNodeTransformFunc_get_function(self)
}

type extendsVisualShaderNodeTransformOp struct {
	_ [0]*extendsVisualShaderNodeTransformOp
	class
}

func (self VisualShaderNodeTransformOp) VisualShaderNode() VisualShaderNode {
	var parent VisualShaderNode
	parent.class = self.class
	return parent
}
func (self VisualShaderNodeTransformOp) SetOperator(op VisualShaderNodeTransformOpOperator) {
	self.Runtime.VisualShaderNodeTransformOp_set_operator(self, op)
}
func (self VisualShaderNodeTransformOp) GetOperator() VisualShaderNodeTransformOpOperator {
	return self.Runtime.VisualShaderNodeTransformOp_get_operator(self)
}

type extendsVisualShaderNodeTransformParameter struct {
	_ [0]*extendsVisualShaderNodeTransformParameter
	class
}

func (self VisualShaderNodeTransformParameter) VisualShaderNodeParameter() VisualShaderNodeParameter {
	var parent VisualShaderNodeParameter
	parent.class = self.class
	return parent
}
func (self VisualShaderNodeTransformParameter) SetDefaultValueEnabled(enabled bool) {
	self.Runtime.VisualShaderNodeTransformParameter_set_default_value_enabled(self, enabled)
}
func (self VisualShaderNodeTransformParameter) IsDefaultValueEnabled() bool {
	return self.Runtime.VisualShaderNodeTransformParameter_is_default_value_enabled(self)
}
func (self VisualShaderNodeTransformParameter) SetDefaultValue(value Transform3D) {
	self.Runtime.VisualShaderNodeTransformParameter_set_default_value(self, value)
}
func (self VisualShaderNodeTransformParameter) GetDefaultValue() Transform3D {
	return self.Runtime.VisualShaderNodeTransformParameter_get_default_value(self)
}

type extendsVisualShaderNodeTransformVecMult struct {
	_ [0]*extendsVisualShaderNodeTransformVecMult
	class
}

func (self VisualShaderNodeTransformVecMult) VisualShaderNode() VisualShaderNode {
	var parent VisualShaderNode
	parent.class = self.class
	return parent
}
func (self VisualShaderNodeTransformVecMult) SetOperator(op VisualShaderNodeTransformVecMultOperator) {
	self.Runtime.VisualShaderNodeTransformVecMult_set_operator(self, op)
}
func (self VisualShaderNodeTransformVecMult) GetOperator() VisualShaderNodeTransformVecMultOperator {
	return self.Runtime.VisualShaderNodeTransformVecMult_get_operator(self)
}

type extendsVisualShaderNodeUIntConstant struct {
	_ [0]*extendsVisualShaderNodeUIntConstant
	class
}

func (self VisualShaderNodeUIntConstant) VisualShaderNodeConstant() VisualShaderNodeConstant {
	var parent VisualShaderNodeConstant
	parent.class = self.class
	return parent
}
func (self VisualShaderNodeUIntConstant) SetConstant(constant int64) {
	self.Runtime.VisualShaderNodeUIntConstant_set_constant(self, constant)
}
func (self VisualShaderNodeUIntConstant) GetConstant() int64 {
	return self.Runtime.VisualShaderNodeUIntConstant_get_constant(self)
}

type extendsVisualShaderNodeUIntFunc struct {
	_ [0]*extendsVisualShaderNodeUIntFunc
	class
}

func (self VisualShaderNodeUIntFunc) VisualShaderNode() VisualShaderNode {
	var parent VisualShaderNode
	parent.class = self.class
	return parent
}
func (self VisualShaderNodeUIntFunc) SetFunction(fn VisualShaderNodeUIntFuncFunction) {
	self.Runtime.VisualShaderNodeUIntFunc_set_function(self, fn)
}
func (self VisualShaderNodeUIntFunc) GetFunction() VisualShaderNodeUIntFuncFunction {
	return self.Runtime.VisualShaderNodeUIntFunc_get_function(self)
}

type extendsVisualShaderNodeUIntOp struct {
	_ [0]*extendsVisualShaderNodeUIntOp
	class
}

func (self VisualShaderNodeUIntOp) VisualShaderNode() VisualShaderNode {
	var parent VisualShaderNode
	parent.class = self.class
	return parent
}
func (self VisualShaderNodeUIntOp) SetOperator(op VisualShaderNodeUIntOpOperator) {
	self.Runtime.VisualShaderNodeUIntOp_set_operator(self, op)
}
func (self VisualShaderNodeUIntOp) GetOperator() VisualShaderNodeUIntOpOperator {
	return self.Runtime.VisualShaderNodeUIntOp_get_operator(self)
}

type extendsVisualShaderNodeUIntParameter struct {
	_ [0]*extendsVisualShaderNodeUIntParameter
	class
}

func (self VisualShaderNodeUIntParameter) VisualShaderNodeParameter() VisualShaderNodeParameter {
	var parent VisualShaderNodeParameter
	parent.class = self.class
	return parent
}
func (self VisualShaderNodeUIntParameter) SetDefaultValueEnabled(enabled bool) {
	self.Runtime.VisualShaderNodeUIntParameter_set_default_value_enabled(self, enabled)
}
func (self VisualShaderNodeUIntParameter) IsDefaultValueEnabled() bool {
	return self.Runtime.VisualShaderNodeUIntParameter_is_default_value_enabled(self)
}
func (self VisualShaderNodeUIntParameter) SetDefaultValue(value int64) {
	self.Runtime.VisualShaderNodeUIntParameter_set_default_value(self, value)
}
func (self VisualShaderNodeUIntParameter) GetDefaultValue() int64 {
	return self.Runtime.VisualShaderNodeUIntParameter_get_default_value(self)
}

type extendsVisualShaderNodeUVFunc struct {
	_ [0]*extendsVisualShaderNodeUVFunc
	class
}

func (self VisualShaderNodeUVFunc) VisualShaderNode() VisualShaderNode {
	var parent VisualShaderNode
	parent.class = self.class
	return parent
}
func (self VisualShaderNodeUVFunc) SetFunction(fn VisualShaderNodeUVFuncFunction) {
	self.Runtime.VisualShaderNodeUVFunc_set_function(self, fn)
}
func (self VisualShaderNodeUVFunc) GetFunction() VisualShaderNodeUVFuncFunction {
	return self.Runtime.VisualShaderNodeUVFunc_get_function(self)
}

type extendsVisualShaderNodeUVPolarCoord struct {
	_ [0]*extendsVisualShaderNodeUVPolarCoord
	class
}

func (self VisualShaderNodeUVPolarCoord) VisualShaderNode() VisualShaderNode {
	var parent VisualShaderNode
	parent.class = self.class
	return parent
}

type extendsVisualShaderNodeVarying struct {
	_ [0]*extendsVisualShaderNodeVarying
	class
}

func (self VisualShaderNodeVarying) VisualShaderNode() VisualShaderNode {
	var parent VisualShaderNode
	parent.class = self.class
	return parent
}
func (self VisualShaderNodeVarying) SetVaryingName(name string) {
	self.Runtime.VisualShaderNodeVarying_set_varying_name(self, name)
}
func (self VisualShaderNodeVarying) GetVaryingName() string {
	return self.Runtime.VisualShaderNodeVarying_get_varying_name(self)
}
func (self VisualShaderNodeVarying) SetVaryingType(atype VisualShaderVaryingType) {
	self.Runtime.VisualShaderNodeVarying_set_varying_type(self, atype)
}
func (self VisualShaderNodeVarying) GetVaryingType() VisualShaderVaryingType {
	return self.Runtime.VisualShaderNodeVarying_get_varying_type(self)
}

type extendsVisualShaderNodeVaryingGetter struct {
	_ [0]*extendsVisualShaderNodeVaryingGetter
	class
}

func (self VisualShaderNodeVaryingGetter) VisualShaderNodeVarying() VisualShaderNodeVarying {
	var parent VisualShaderNodeVarying
	parent.class = self.class
	return parent
}

type extendsVisualShaderNodeVaryingSetter struct {
	_ [0]*extendsVisualShaderNodeVaryingSetter
	class
}

func (self VisualShaderNodeVaryingSetter) VisualShaderNodeVarying() VisualShaderNodeVarying {
	var parent VisualShaderNodeVarying
	parent.class = self.class
	return parent
}

type extendsVisualShaderNodeVec2Constant struct {
	_ [0]*extendsVisualShaderNodeVec2Constant
	class
}

func (self VisualShaderNodeVec2Constant) VisualShaderNodeConstant() VisualShaderNodeConstant {
	var parent VisualShaderNodeConstant
	parent.class = self.class
	return parent
}
func (self VisualShaderNodeVec2Constant) SetConstant(constant Vector2) {
	self.Runtime.VisualShaderNodeVec2Constant_set_constant(self, constant)
}
func (self VisualShaderNodeVec2Constant) GetConstant() Vector2 {
	return self.Runtime.VisualShaderNodeVec2Constant_get_constant(self)
}

type extendsVisualShaderNodeVec2Parameter struct {
	_ [0]*extendsVisualShaderNodeVec2Parameter
	class
}

func (self VisualShaderNodeVec2Parameter) VisualShaderNodeParameter() VisualShaderNodeParameter {
	var parent VisualShaderNodeParameter
	parent.class = self.class
	return parent
}
func (self VisualShaderNodeVec2Parameter) SetDefaultValueEnabled(enabled bool) {
	self.Runtime.VisualShaderNodeVec2Parameter_set_default_value_enabled(self, enabled)
}
func (self VisualShaderNodeVec2Parameter) IsDefaultValueEnabled() bool {
	return self.Runtime.VisualShaderNodeVec2Parameter_is_default_value_enabled(self)
}
func (self VisualShaderNodeVec2Parameter) SetDefaultValue(value Vector2) {
	self.Runtime.VisualShaderNodeVec2Parameter_set_default_value(self, value)
}
func (self VisualShaderNodeVec2Parameter) GetDefaultValue() Vector2 {
	return self.Runtime.VisualShaderNodeVec2Parameter_get_default_value(self)
}

type extendsVisualShaderNodeVec3Constant struct {
	_ [0]*extendsVisualShaderNodeVec3Constant
	class
}

func (self VisualShaderNodeVec3Constant) VisualShaderNodeConstant() VisualShaderNodeConstant {
	var parent VisualShaderNodeConstant
	parent.class = self.class
	return parent
}
func (self VisualShaderNodeVec3Constant) SetConstant(constant Vector3) {
	self.Runtime.VisualShaderNodeVec3Constant_set_constant(self, constant)
}
func (self VisualShaderNodeVec3Constant) GetConstant() Vector3 {
	return self.Runtime.VisualShaderNodeVec3Constant_get_constant(self)
}

type extendsVisualShaderNodeVec3Parameter struct {
	_ [0]*extendsVisualShaderNodeVec3Parameter
	class
}

func (self VisualShaderNodeVec3Parameter) VisualShaderNodeParameter() VisualShaderNodeParameter {
	var parent VisualShaderNodeParameter
	parent.class = self.class
	return parent
}
func (self VisualShaderNodeVec3Parameter) SetDefaultValueEnabled(enabled bool) {
	self.Runtime.VisualShaderNodeVec3Parameter_set_default_value_enabled(self, enabled)
}
func (self VisualShaderNodeVec3Parameter) IsDefaultValueEnabled() bool {
	return self.Runtime.VisualShaderNodeVec3Parameter_is_default_value_enabled(self)
}
func (self VisualShaderNodeVec3Parameter) SetDefaultValue(value Vector3) {
	self.Runtime.VisualShaderNodeVec3Parameter_set_default_value(self, value)
}
func (self VisualShaderNodeVec3Parameter) GetDefaultValue() Vector3 {
	return self.Runtime.VisualShaderNodeVec3Parameter_get_default_value(self)
}

type extendsVisualShaderNodeVec4Constant struct {
	_ [0]*extendsVisualShaderNodeVec4Constant
	class
}

func (self VisualShaderNodeVec4Constant) VisualShaderNodeConstant() VisualShaderNodeConstant {
	var parent VisualShaderNodeConstant
	parent.class = self.class
	return parent
}
func (self VisualShaderNodeVec4Constant) SetConstant(constant Quaternion) {
	self.Runtime.VisualShaderNodeVec4Constant_set_constant(self, constant)
}
func (self VisualShaderNodeVec4Constant) GetConstant() Quaternion {
	return self.Runtime.VisualShaderNodeVec4Constant_get_constant(self)
}

type extendsVisualShaderNodeVec4Parameter struct {
	_ [0]*extendsVisualShaderNodeVec4Parameter
	class
}

func (self VisualShaderNodeVec4Parameter) VisualShaderNodeParameter() VisualShaderNodeParameter {
	var parent VisualShaderNodeParameter
	parent.class = self.class
	return parent
}
func (self VisualShaderNodeVec4Parameter) SetDefaultValueEnabled(enabled bool) {
	self.Runtime.VisualShaderNodeVec4Parameter_set_default_value_enabled(self, enabled)
}
func (self VisualShaderNodeVec4Parameter) IsDefaultValueEnabled() bool {
	return self.Runtime.VisualShaderNodeVec4Parameter_is_default_value_enabled(self)
}
func (self VisualShaderNodeVec4Parameter) SetDefaultValue(value Vector4) {
	self.Runtime.VisualShaderNodeVec4Parameter_set_default_value(self, value)
}
func (self VisualShaderNodeVec4Parameter) GetDefaultValue() Vector4 {
	return self.Runtime.VisualShaderNodeVec4Parameter_get_default_value(self)
}

type extendsVisualShaderNodeVectorBase struct {
	_ [0]*extendsVisualShaderNodeVectorBase
	class
}

func (self VisualShaderNodeVectorBase) VisualShaderNode() VisualShaderNode {
	var parent VisualShaderNode
	parent.class = self.class
	return parent
}
func (self VisualShaderNodeVectorBase) SetOpType(atype VisualShaderNodeVectorBaseOpType) {
	self.Runtime.VisualShaderNodeVectorBase_set_op_type(self, atype)
}
func (self VisualShaderNodeVectorBase) GetOpType() VisualShaderNodeVectorBaseOpType {
	return self.Runtime.VisualShaderNodeVectorBase_get_op_type(self)
}

type extendsVisualShaderNodeVectorCompose struct {
	_ [0]*extendsVisualShaderNodeVectorCompose
	class
}

func (self VisualShaderNodeVectorCompose) VisualShaderNodeVectorBase() VisualShaderNodeVectorBase {
	var parent VisualShaderNodeVectorBase
	parent.class = self.class
	return parent
}

type extendsVisualShaderNodeVectorDecompose struct {
	_ [0]*extendsVisualShaderNodeVectorDecompose
	class
}

func (self VisualShaderNodeVectorDecompose) VisualShaderNodeVectorBase() VisualShaderNodeVectorBase {
	var parent VisualShaderNodeVectorBase
	parent.class = self.class
	return parent
}

type extendsVisualShaderNodeVectorDistance struct {
	_ [0]*extendsVisualShaderNodeVectorDistance
	class
}

func (self VisualShaderNodeVectorDistance) VisualShaderNodeVectorBase() VisualShaderNodeVectorBase {
	var parent VisualShaderNodeVectorBase
	parent.class = self.class
	return parent
}

type extendsVisualShaderNodeVectorFunc struct {
	_ [0]*extendsVisualShaderNodeVectorFunc
	class
}

func (self VisualShaderNodeVectorFunc) VisualShaderNodeVectorBase() VisualShaderNodeVectorBase {
	var parent VisualShaderNodeVectorBase
	parent.class = self.class
	return parent
}
func (self VisualShaderNodeVectorFunc) SetFunction(fn VisualShaderNodeVectorFuncFunction) {
	self.Runtime.VisualShaderNodeVectorFunc_set_function(self, fn)
}
func (self VisualShaderNodeVectorFunc) GetFunction() VisualShaderNodeVectorFuncFunction {
	return self.Runtime.VisualShaderNodeVectorFunc_get_function(self)
}

type extendsVisualShaderNodeVectorLen struct {
	_ [0]*extendsVisualShaderNodeVectorLen
	class
}

func (self VisualShaderNodeVectorLen) VisualShaderNodeVectorBase() VisualShaderNodeVectorBase {
	var parent VisualShaderNodeVectorBase
	parent.class = self.class
	return parent
}

type extendsVisualShaderNodeVectorOp struct {
	_ [0]*extendsVisualShaderNodeVectorOp
	class
}

func (self VisualShaderNodeVectorOp) VisualShaderNodeVectorBase() VisualShaderNodeVectorBase {
	var parent VisualShaderNodeVectorBase
	parent.class = self.class
	return parent
}
func (self VisualShaderNodeVectorOp) SetOperator(op VisualShaderNodeVectorOpOperator) {
	self.Runtime.VisualShaderNodeVectorOp_set_operator(self, op)
}
func (self VisualShaderNodeVectorOp) GetOperator() VisualShaderNodeVectorOpOperator {
	return self.Runtime.VisualShaderNodeVectorOp_get_operator(self)
}

type extendsVisualShaderNodeVectorRefract struct {
	_ [0]*extendsVisualShaderNodeVectorRefract
	class
}

func (self VisualShaderNodeVectorRefract) VisualShaderNodeVectorBase() VisualShaderNodeVectorBase {
	var parent VisualShaderNodeVectorBase
	parent.class = self.class
	return parent
}

type extendsVisualShaderNodeWorldPositionFromDepth struct {
	_ [0]*extendsVisualShaderNodeWorldPositionFromDepth
	class
}

func (self VisualShaderNodeWorldPositionFromDepth) VisualShaderNode() VisualShaderNode {
	var parent VisualShaderNode
	parent.class = self.class
	return parent
}

type extendsVoxelGI struct {
	_ [0]*extendsVoxelGI
	class
}

func (self VoxelGI) VisualInstance3D() VisualInstance3D {
	var parent VisualInstance3D
	parent.class = self.class
	return parent
}
func (self VoxelGI) SetProbeData(data VoxelGIData) {
	self.Runtime.VoxelGI_set_probe_data(self, data)
}
func (self VoxelGI) GetProbeData() VoxelGIData {
	return self.Runtime.VoxelGI_get_probe_data(self)
}
func (self VoxelGI) SetSubdiv(subdiv VoxelGISubdiv) {
	self.Runtime.VoxelGI_set_subdiv(self, subdiv)
}
func (self VoxelGI) GetSubdiv() VoxelGISubdiv {
	return self.Runtime.VoxelGI_get_subdiv(self)
}
func (self VoxelGI) SetSize(size Vector3) {
	self.Runtime.VoxelGI_set_size(self, size)
}
func (self VoxelGI) GetSize() Vector3 {
	return self.Runtime.VoxelGI_get_size(self)
}
func (self VoxelGI) SetCameraAttributes(camera_attributes CameraAttributes) {
	self.Runtime.VoxelGI_set_camera_attributes(self, camera_attributes)
}
func (self VoxelGI) GetCameraAttributes() CameraAttributes {
	return self.Runtime.VoxelGI_get_camera_attributes(self)
}
func (self VoxelGI) Bake(from_node Node, create_visual_debug bool) {
	self.Runtime.VoxelGI_bake(self, from_node, create_visual_debug)
}
func (self VoxelGI) DebugBake() {
	self.Runtime.VoxelGI_debug_bake(self)
}

type extendsVoxelGIData struct {
	_ [0]*extendsVoxelGIData
	class
}

func (self VoxelGIData) Resource() Resource {
	var parent Resource
	parent.class = self.class
	return parent
}
func (self VoxelGIData) Allocate(to_cell_xform Transform3D, aabb AABB, octree_size Vector3, octree_cells PackedByteArray, data_cells PackedByteArray, distance_field PackedByteArray, level_counts PackedInt32Array) {
	self.Runtime.VoxelGIData_allocate(self, to_cell_xform, aabb, octree_size, octree_cells, data_cells, distance_field, level_counts)
}
func (self VoxelGIData) GetBounds() AABB {
	return self.Runtime.VoxelGIData_get_bounds(self)
}
func (self VoxelGIData) GetOctreeSize() Vector3 {
	return self.Runtime.VoxelGIData_get_octree_size(self)
}
func (self VoxelGIData) GetToCellXform() Transform3D {
	return self.Runtime.VoxelGIData_get_to_cell_xform(self)
}
func (self VoxelGIData) GetOctreeCells() PackedByteArray {
	return self.Runtime.VoxelGIData_get_octree_cells(self)
}
func (self VoxelGIData) GetDataCells() PackedByteArray {
	return self.Runtime.VoxelGIData_get_data_cells(self)
}
func (self VoxelGIData) GetLevelCounts() PackedInt32Array {
	return self.Runtime.VoxelGIData_get_level_counts(self)
}
func (self VoxelGIData) SetDynamicRange(dynamic_range Float) {
	self.Runtime.VoxelGIData_set_dynamic_range(self, dynamic_range)
}
func (self VoxelGIData) GetDynamicRange() Float {
	return self.Runtime.VoxelGIData_get_dynamic_range(self)
}
func (self VoxelGIData) SetEnergy(energy Float) {
	self.Runtime.VoxelGIData_set_energy(self, energy)
}
func (self VoxelGIData) GetEnergy() Float {
	return self.Runtime.VoxelGIData_get_energy(self)
}
func (self VoxelGIData) SetBias(bias Float) {
	self.Runtime.VoxelGIData_set_bias(self, bias)
}
func (self VoxelGIData) GetBias() Float {
	return self.Runtime.VoxelGIData_get_bias(self)
}
func (self VoxelGIData) SetNormalBias(bias Float) {
	self.Runtime.VoxelGIData_set_normal_bias(self, bias)
}
func (self VoxelGIData) GetNormalBias() Float {
	return self.Runtime.VoxelGIData_get_normal_bias(self)
}
func (self VoxelGIData) SetPropagation(propagation Float) {
	self.Runtime.VoxelGIData_set_propagation(self, propagation)
}
func (self VoxelGIData) GetPropagation() Float {
	return self.Runtime.VoxelGIData_get_propagation(self)
}
func (self VoxelGIData) SetInterior(interior bool) {
	self.Runtime.VoxelGIData_set_interior(self, interior)
}
func (self VoxelGIData) IsInterior() bool {
	return self.Runtime.VoxelGIData_is_interior(self)
}
func (self VoxelGIData) SetUseTwoBounces(enable bool) {
	self.Runtime.VoxelGIData_set_use_two_bounces(self, enable)
}
func (self VoxelGIData) IsUsingTwoBounces() bool {
	return self.Runtime.VoxelGIData_is_using_two_bounces(self)
}

type extendsWeakRef struct {
	_ [0]*extendsWeakRef
	class
}

func (self WeakRef) RefCounted() RefCounted {
	var parent RefCounted
	parent.class = self.class
	return parent
}
func (self WeakRef) GetRef() any {
	return self.Runtime.WeakRef_get_ref(self)
}

type extendsWebRTCDataChannel struct {
	_ [0]*extendsWebRTCDataChannel
	class
}

func (self WebRTCDataChannel) PacketPeer() PacketPeer {
	var parent PacketPeer
	parent.class = self.class
	return parent
}
func (self WebRTCDataChannel) Poll() int64 {
	return self.Runtime.WebRTCDataChannel_poll(self)
}
func (self WebRTCDataChannel) Close() {
	self.Runtime.WebRTCDataChannel_close(self)
}
func (self WebRTCDataChannel) WasStringPacket() bool {
	return self.Runtime.WebRTCDataChannel_was_string_packet(self)
}
func (self WebRTCDataChannel) SetWriteMode(write_mode WebRTCDataChannelWriteMode) {
	self.Runtime.WebRTCDataChannel_set_write_mode(self, write_mode)
}
func (self WebRTCDataChannel) GetWriteMode() WebRTCDataChannelWriteMode {
	return self.Runtime.WebRTCDataChannel_get_write_mode(self)
}
func (self WebRTCDataChannel) GetReadyState() WebRTCDataChannelChannelState {
	return self.Runtime.WebRTCDataChannel_get_ready_state(self)
}
func (self WebRTCDataChannel) GetLabel() string {
	return self.Runtime.WebRTCDataChannel_get_label(self)
}
func (self WebRTCDataChannel) IsOrdered() bool {
	return self.Runtime.WebRTCDataChannel_is_ordered(self)
}
func (self WebRTCDataChannel) GetId() int64 {
	return self.Runtime.WebRTCDataChannel_get_id(self)
}
func (self WebRTCDataChannel) GetMaxPacketLifeTime() int64 {
	return self.Runtime.WebRTCDataChannel_get_max_packet_life_time(self)
}
func (self WebRTCDataChannel) GetMaxRetransmits() int64 {
	return self.Runtime.WebRTCDataChannel_get_max_retransmits(self)
}
func (self WebRTCDataChannel) GetProtocol() string {
	return self.Runtime.WebRTCDataChannel_get_protocol(self)
}
func (self WebRTCDataChannel) IsNegotiated() bool {
	return self.Runtime.WebRTCDataChannel_is_negotiated(self)
}
func (self WebRTCDataChannel) GetBufferedAmount() int64 {
	return self.Runtime.WebRTCDataChannel_get_buffered_amount(self)
}

type extendsWebRTCDataChannelExtension struct {
	_ [0]*extendsWebRTCDataChannelExtension
	class
}

func (self WebRTCDataChannelExtension) WebRTCDataChannel() WebRTCDataChannel {
	var parent WebRTCDataChannel
	parent.class = self.class
	return parent
}

type extendsWebRTCMultiplayerPeer struct {
	_ [0]*extendsWebRTCMultiplayerPeer
	class
}

func (self WebRTCMultiplayerPeer) MultiplayerPeer() MultiplayerPeer {
	var parent MultiplayerPeer
	parent.class = self.class
	return parent
}
func (self WebRTCMultiplayerPeer) CreateServer(channels_config Array) int64 {
	return self.Runtime.WebRTCMultiplayerPeer_create_server(self, channels_config)
}
func (self WebRTCMultiplayerPeer) CreateClient(peer_id int64, channels_config Array) int64 {
	return self.Runtime.WebRTCMultiplayerPeer_create_client(self, peer_id, channels_config)
}
func (self WebRTCMultiplayerPeer) CreateMesh(peer_id int64, channels_config Array) int64 {
	return self.Runtime.WebRTCMultiplayerPeer_create_mesh(self, peer_id, channels_config)
}
func (self WebRTCMultiplayerPeer) AddPeer(peer WebRTCPeerConnection, peer_id int64, unreliable_lifetime int64) int64 {
	return self.Runtime.WebRTCMultiplayerPeer_add_peer(self, peer, peer_id, unreliable_lifetime)
}
func (self WebRTCMultiplayerPeer) RemovePeer(peer_id int64) {
	self.Runtime.WebRTCMultiplayerPeer_remove_peer(self, peer_id)
}
func (self WebRTCMultiplayerPeer) HasPeer(peer_id int64) bool {
	return self.Runtime.WebRTCMultiplayerPeer_has_peer(self, peer_id)
}
func (self WebRTCMultiplayerPeer) GetPeer(peer_id int64) Dictionary {
	return self.Runtime.WebRTCMultiplayerPeer_get_peer(self, peer_id)
}
func (self WebRTCMultiplayerPeer) GetPeers() Dictionary {
	return self.Runtime.WebRTCMultiplayerPeer_get_peers(self)
}

type extendsWebRTCPeerConnection struct {
	_ [0]*extendsWebRTCPeerConnection
	class
}

func (self WebRTCPeerConnection) RefCounted() RefCounted {
	var parent RefCounted
	parent.class = self.class
	return parent
}
func (self WebRTCPeerConnection) SetDefaultExtension(extension_class string) {
	self.Runtime.WebRTCPeerConnection_set_default_extension(self, extension_class)
}
func (self WebRTCPeerConnection) Initialize(configuration Dictionary) int64 {
	return self.Runtime.WebRTCPeerConnection_initialize(self, configuration)
}
func (self WebRTCPeerConnection) CreateDataChannel(label string, options Dictionary) WebRTCDataChannel {
	return self.Runtime.WebRTCPeerConnection_create_data_channel(self, label, options)
}
func (self WebRTCPeerConnection) CreateOffer() int64 {
	return self.Runtime.WebRTCPeerConnection_create_offer(self)
}
func (self WebRTCPeerConnection) SetLocalDescription(atype string, sdp string) int64 {
	return self.Runtime.WebRTCPeerConnection_set_local_description(self, atype, sdp)
}
func (self WebRTCPeerConnection) SetRemoteDescription(atype string, sdp string) int64 {
	return self.Runtime.WebRTCPeerConnection_set_remote_description(self, atype, sdp)
}
func (self WebRTCPeerConnection) AddIceCandidate(media string, index int64, name string) int64 {
	return self.Runtime.WebRTCPeerConnection_add_ice_candidate(self, media, index, name)
}
func (self WebRTCPeerConnection) Poll() int64 {
	return self.Runtime.WebRTCPeerConnection_poll(self)
}
func (self WebRTCPeerConnection) Close() {
	self.Runtime.WebRTCPeerConnection_close(self)
}
func (self WebRTCPeerConnection) GetConnectionState() WebRTCPeerConnectionConnectionState {
	return self.Runtime.WebRTCPeerConnection_get_connection_state(self)
}
func (self WebRTCPeerConnection) GetGatheringState() WebRTCPeerConnectionGatheringState {
	return self.Runtime.WebRTCPeerConnection_get_gathering_state(self)
}
func (self WebRTCPeerConnection) GetSignalingState() WebRTCPeerConnectionSignalingState {
	return self.Runtime.WebRTCPeerConnection_get_signaling_state(self)
}

type extendsWebRTCPeerConnectionExtension struct {
	_ [0]*extendsWebRTCPeerConnectionExtension
	class
}

func (self WebRTCPeerConnectionExtension) WebRTCPeerConnection() WebRTCPeerConnection {
	var parent WebRTCPeerConnection
	parent.class = self.class
	return parent
}

type extendsWebSocketMultiplayerPeer struct {
	_ [0]*extendsWebSocketMultiplayerPeer
	class
}

func (self WebSocketMultiplayerPeer) MultiplayerPeer() MultiplayerPeer {
	var parent MultiplayerPeer
	parent.class = self.class
	return parent
}
func (self WebSocketMultiplayerPeer) CreateClient(url string, tls_client_options TLSOptions) int64 {
	return self.Runtime.WebSocketMultiplayerPeer_create_client(self, url, tls_client_options)
}
func (self WebSocketMultiplayerPeer) CreateServer(port int64, bind_address string, tls_server_options TLSOptions) int64 {
	return self.Runtime.WebSocketMultiplayerPeer_create_server(self, port, bind_address, tls_server_options)
}
func (self WebSocketMultiplayerPeer) GetPeer(peer_id int64) WebSocketPeer {
	return self.Runtime.WebSocketMultiplayerPeer_get_peer(self, peer_id)
}
func (self WebSocketMultiplayerPeer) GetPeerAddress(id int64) string {
	return self.Runtime.WebSocketMultiplayerPeer_get_peer_address(self, id)
}
func (self WebSocketMultiplayerPeer) GetPeerPort(id int64) int64 {
	return self.Runtime.WebSocketMultiplayerPeer_get_peer_port(self, id)
}
func (self WebSocketMultiplayerPeer) GetSupportedProtocols() PackedStringArray {
	return self.Runtime.WebSocketMultiplayerPeer_get_supported_protocols(self)
}
func (self WebSocketMultiplayerPeer) SetSupportedProtocols(protocols PackedStringArray) {
	self.Runtime.WebSocketMultiplayerPeer_set_supported_protocols(self, protocols)
}
func (self WebSocketMultiplayerPeer) GetHandshakeHeaders() PackedStringArray {
	return self.Runtime.WebSocketMultiplayerPeer_get_handshake_headers(self)
}
func (self WebSocketMultiplayerPeer) SetHandshakeHeaders(protocols PackedStringArray) {
	self.Runtime.WebSocketMultiplayerPeer_set_handshake_headers(self, protocols)
}
func (self WebSocketMultiplayerPeer) GetInboundBufferSize() int64 {
	return self.Runtime.WebSocketMultiplayerPeer_get_inbound_buffer_size(self)
}
func (self WebSocketMultiplayerPeer) SetInboundBufferSize(buffer_size int64) {
	self.Runtime.WebSocketMultiplayerPeer_set_inbound_buffer_size(self, buffer_size)
}
func (self WebSocketMultiplayerPeer) GetOutboundBufferSize() int64 {
	return self.Runtime.WebSocketMultiplayerPeer_get_outbound_buffer_size(self)
}
func (self WebSocketMultiplayerPeer) SetOutboundBufferSize(buffer_size int64) {
	self.Runtime.WebSocketMultiplayerPeer_set_outbound_buffer_size(self, buffer_size)
}
func (self WebSocketMultiplayerPeer) GetHandshakeTimeout() Float {
	return self.Runtime.WebSocketMultiplayerPeer_get_handshake_timeout(self)
}
func (self WebSocketMultiplayerPeer) SetHandshakeTimeout(timeout Float) {
	self.Runtime.WebSocketMultiplayerPeer_set_handshake_timeout(self, timeout)
}
func (self WebSocketMultiplayerPeer) SetMaxQueuedPackets(max_queued_packets int64) {
	self.Runtime.WebSocketMultiplayerPeer_set_max_queued_packets(self, max_queued_packets)
}
func (self WebSocketMultiplayerPeer) GetMaxQueuedPackets() int64 {
	return self.Runtime.WebSocketMultiplayerPeer_get_max_queued_packets(self)
}

type extendsWebSocketPeer struct {
	_ [0]*extendsWebSocketPeer
	class
}

func (self WebSocketPeer) PacketPeer() PacketPeer {
	var parent PacketPeer
	parent.class = self.class
	return parent
}
func (self WebSocketPeer) ConnectToUrl(url string, tls_client_options TLSOptions) int64 {
	return self.Runtime.WebSocketPeer_connect_to_url(self, url, tls_client_options)
}
func (self WebSocketPeer) AcceptStream(stream StreamPeer) int64 {
	return self.Runtime.WebSocketPeer_accept_stream(self, stream)
}
func (self WebSocketPeer) Send(message PackedByteArray, write_mode WebSocketPeerWriteMode) int64 {
	return self.Runtime.WebSocketPeer_send(self, message, write_mode)
}
func (self WebSocketPeer) SendText(message string) int64 {
	return self.Runtime.WebSocketPeer_send_text(self, message)
}
func (self WebSocketPeer) WasStringPacket() bool {
	return self.Runtime.WebSocketPeer_was_string_packet(self)
}
func (self WebSocketPeer) Poll() {
	self.Runtime.WebSocketPeer_poll(self)
}
func (self WebSocketPeer) Close(code int64, reason string) {
	self.Runtime.WebSocketPeer_close(self, code, reason)
}
func (self WebSocketPeer) GetConnectedHost() string {
	return self.Runtime.WebSocketPeer_get_connected_host(self)
}
func (self WebSocketPeer) GetConnectedPort() int64 {
	return self.Runtime.WebSocketPeer_get_connected_port(self)
}
func (self WebSocketPeer) GetSelectedProtocol() string {
	return self.Runtime.WebSocketPeer_get_selected_protocol(self)
}
func (self WebSocketPeer) GetRequestedUrl() string {
	return self.Runtime.WebSocketPeer_get_requested_url(self)
}
func (self WebSocketPeer) SetNoDelay(enabled bool) {
	self.Runtime.WebSocketPeer_set_no_delay(self, enabled)
}
func (self WebSocketPeer) GetCurrentOutboundBufferedAmount() int64 {
	return self.Runtime.WebSocketPeer_get_current_outbound_buffered_amount(self)
}
func (self WebSocketPeer) GetReadyState() WebSocketPeerState {
	return self.Runtime.WebSocketPeer_get_ready_state(self)
}
func (self WebSocketPeer) GetCloseCode() int64 {
	return self.Runtime.WebSocketPeer_get_close_code(self)
}
func (self WebSocketPeer) GetCloseReason() string {
	return self.Runtime.WebSocketPeer_get_close_reason(self)
}
func (self WebSocketPeer) GetSupportedProtocols() PackedStringArray {
	return self.Runtime.WebSocketPeer_get_supported_protocols(self)
}
func (self WebSocketPeer) SetSupportedProtocols(protocols PackedStringArray) {
	self.Runtime.WebSocketPeer_set_supported_protocols(self, protocols)
}
func (self WebSocketPeer) GetHandshakeHeaders() PackedStringArray {
	return self.Runtime.WebSocketPeer_get_handshake_headers(self)
}
func (self WebSocketPeer) SetHandshakeHeaders(protocols PackedStringArray) {
	self.Runtime.WebSocketPeer_set_handshake_headers(self, protocols)
}
func (self WebSocketPeer) GetInboundBufferSize() int64 {
	return self.Runtime.WebSocketPeer_get_inbound_buffer_size(self)
}
func (self WebSocketPeer) SetInboundBufferSize(buffer_size int64) {
	self.Runtime.WebSocketPeer_set_inbound_buffer_size(self, buffer_size)
}
func (self WebSocketPeer) GetOutboundBufferSize() int64 {
	return self.Runtime.WebSocketPeer_get_outbound_buffer_size(self)
}
func (self WebSocketPeer) SetOutboundBufferSize(buffer_size int64) {
	self.Runtime.WebSocketPeer_set_outbound_buffer_size(self, buffer_size)
}
func (self WebSocketPeer) SetMaxQueuedPackets(buffer_size int64) {
	self.Runtime.WebSocketPeer_set_max_queued_packets(self, buffer_size)
}
func (self WebSocketPeer) GetMaxQueuedPackets() int64 {
	return self.Runtime.WebSocketPeer_get_max_queued_packets(self)
}

type extendsWebXRInterface struct {
	_ [0]*extendsWebXRInterface
	class
}

func (self WebXRInterface) XRInterface() XRInterface {
	var parent XRInterface
	parent.class = self.class
	return parent
}
func (self WebXRInterface) IsSessionSupported(session_mode string) {
	self.Runtime.WebXRInterface_is_session_supported(self, session_mode)
}
func (self WebXRInterface) SetSessionMode(session_mode string) {
	self.Runtime.WebXRInterface_set_session_mode(self, session_mode)
}
func (self WebXRInterface) GetSessionMode() string {
	return self.Runtime.WebXRInterface_get_session_mode(self)
}
func (self WebXRInterface) SetRequiredFeatures(required_features string) {
	self.Runtime.WebXRInterface_set_required_features(self, required_features)
}
func (self WebXRInterface) GetRequiredFeatures() string {
	return self.Runtime.WebXRInterface_get_required_features(self)
}
func (self WebXRInterface) SetOptionalFeatures(optional_features string) {
	self.Runtime.WebXRInterface_set_optional_features(self, optional_features)
}
func (self WebXRInterface) GetOptionalFeatures() string {
	return self.Runtime.WebXRInterface_get_optional_features(self)
}
func (self WebXRInterface) GetReferenceSpaceType() string {
	return self.Runtime.WebXRInterface_get_reference_space_type(self)
}
func (self WebXRInterface) SetRequestedReferenceSpaceTypes(requested_reference_space_types string) {
	self.Runtime.WebXRInterface_set_requested_reference_space_types(self, requested_reference_space_types)
}
func (self WebXRInterface) GetRequestedReferenceSpaceTypes() string {
	return self.Runtime.WebXRInterface_get_requested_reference_space_types(self)
}
func (self WebXRInterface) IsInputSourceActive(input_source_id int64) bool {
	return self.Runtime.WebXRInterface_is_input_source_active(self, input_source_id)
}
func (self WebXRInterface) GetInputSourceTracker(input_source_id int64) XRPositionalTracker {
	return self.Runtime.WebXRInterface_get_input_source_tracker(self, input_source_id)
}
func (self WebXRInterface) GetInputSourceTargetRayMode(input_source_id int64) WebXRInterfaceTargetRayMode {
	return self.Runtime.WebXRInterface_get_input_source_target_ray_mode(self, input_source_id)
}
func (self WebXRInterface) GetVisibilityState() string {
	return self.Runtime.WebXRInterface_get_visibility_state(self)
}
func (self WebXRInterface) GetDisplayRefreshRate() Float {
	return self.Runtime.WebXRInterface_get_display_refresh_rate(self)
}
func (self WebXRInterface) SetDisplayRefreshRate(refresh_rate Float) {
	self.Runtime.WebXRInterface_set_display_refresh_rate(self, refresh_rate)
}
func (self WebXRInterface) GetAvailableDisplayRefreshRates() Array {
	return self.Runtime.WebXRInterface_get_available_display_refresh_rates(self)
}

type extendsWindow struct {
	_ [0]*extendsWindow
	class
}

func (self Window) Viewport() Viewport { var parent Viewport; parent.class = self.class; return parent }
func (self Window) SetTitle(title string) {
	self.Runtime.Window_set_title(self, title)
}
func (self Window) GetTitle() string {
	return self.Runtime.Window_get_title(self)
}
func (self Window) GetWindowId() int64 {
	return self.Runtime.Window_get_window_id(self)
}
func (self Window) SetInitialPosition(initial_position WindowWindowInitialPosition) {
	self.Runtime.Window_set_initial_position(self, initial_position)
}
func (self Window) GetInitialPosition() WindowWindowInitialPosition {
	return self.Runtime.Window_get_initial_position(self)
}
func (self Window) SetCurrentScreen(index int64) {
	self.Runtime.Window_set_current_screen(self, index)
}
func (self Window) GetCurrentScreen() int64 {
	return self.Runtime.Window_get_current_screen(self)
}
func (self Window) SetPosition(position Vector2i) {
	self.Runtime.Window_set_position(self, position)
}
func (self Window) GetPosition() Vector2i {
	return self.Runtime.Window_get_position(self)
}
func (self Window) MoveToCenter() {
	self.Runtime.Window_move_to_center(self)
}
func (self Window) SetSize(size Vector2i) {
	self.Runtime.Window_set_size(self, size)
}
func (self Window) GetSize() Vector2i {
	return self.Runtime.Window_get_size(self)
}
func (self Window) ResetSize() {
	self.Runtime.Window_reset_size(self)
}
func (self Window) GetPositionWithDecorations() Vector2i {
	return self.Runtime.Window_get_position_with_decorations(self)
}
func (self Window) GetSizeWithDecorations() Vector2i {
	return self.Runtime.Window_get_size_with_decorations(self)
}
func (self Window) SetMaxSize(max_size Vector2i) {
	self.Runtime.Window_set_max_size(self, max_size)
}
func (self Window) GetMaxSize() Vector2i {
	return self.Runtime.Window_get_max_size(self)
}
func (self Window) SetMinSize(min_size Vector2i) {
	self.Runtime.Window_set_min_size(self, min_size)
}
func (self Window) GetMinSize() Vector2i {
	return self.Runtime.Window_get_min_size(self)
}
func (self Window) SetMode(mode WindowMode) {
	self.Runtime.Window_set_mode(self, mode)
}
func (self Window) GetMode() WindowMode {
	return self.Runtime.Window_get_mode(self)
}
func (self Window) SetFlag(flag WindowFlags, enabled bool) {
	self.Runtime.Window_set_flag(self, flag, enabled)
}
func (self Window) GetFlag(flag WindowFlags) bool {
	return self.Runtime.Window_get_flag(self, flag)
}
func (self Window) IsMaximizeAllowed() bool {
	return self.Runtime.Window_is_maximize_allowed(self)
}
func (self Window) RequestAttention() {
	self.Runtime.Window_request_attention(self)
}
func (self Window) MoveToForeground() {
	self.Runtime.Window_move_to_foreground(self)
}
func (self Window) SetVisible(visible bool) {
	self.Runtime.Window_set_visible(self, visible)
}
func (self Window) IsVisible() bool {
	return self.Runtime.Window_is_visible(self)
}
func (self Window) Hide() {
	self.Runtime.Window_hide(self)
}
func (self Window) Show() {
	self.Runtime.Window_show(self)
}
func (self Window) SetTransient(transient bool) {
	self.Runtime.Window_set_transient(self, transient)
}
func (self Window) IsTransient() bool {
	return self.Runtime.Window_is_transient(self)
}
func (self Window) SetExclusive(exclusive bool) {
	self.Runtime.Window_set_exclusive(self, exclusive)
}
func (self Window) IsExclusive() bool {
	return self.Runtime.Window_is_exclusive(self)
}
func (self Window) SetUnparentWhenInvisible(unparent bool) {
	self.Runtime.Window_set_unparent_when_invisible(self, unparent)
}
func (self Window) CanDraw() bool {
	return self.Runtime.Window_can_draw(self)
}
func (self Window) HasFocus() bool {
	return self.Runtime.Window_has_focus(self)
}
func (self Window) GrabFocus() {
	self.Runtime.Window_grab_focus(self)
}
func (self Window) SetImeActive(active bool) {
	self.Runtime.Window_set_ime_active(self, active)
}
func (self Window) SetImePosition(position Vector2i) {
	self.Runtime.Window_set_ime_position(self, position)
}
func (self Window) IsEmbedded() bool {
	return self.Runtime.Window_is_embedded(self)
}
func (self Window) GetContentsMinimumSize() Vector2 {
	return self.Runtime.Window_get_contents_minimum_size(self)
}
func (self Window) SetContentScaleSize(size Vector2i) {
	self.Runtime.Window_set_content_scale_size(self, size)
}
func (self Window) GetContentScaleSize() Vector2i {
	return self.Runtime.Window_get_content_scale_size(self)
}
func (self Window) SetContentScaleMode(mode WindowContentScaleMode) {
	self.Runtime.Window_set_content_scale_mode(self, mode)
}
func (self Window) GetContentScaleMode() WindowContentScaleMode {
	return self.Runtime.Window_get_content_scale_mode(self)
}
func (self Window) SetContentScaleAspect(aspect WindowContentScaleAspect) {
	self.Runtime.Window_set_content_scale_aspect(self, aspect)
}
func (self Window) GetContentScaleAspect() WindowContentScaleAspect {
	return self.Runtime.Window_get_content_scale_aspect(self)
}
func (self Window) SetContentScaleStretch(stretch WindowContentScaleStretch) {
	self.Runtime.Window_set_content_scale_stretch(self, stretch)
}
func (self Window) GetContentScaleStretch() WindowContentScaleStretch {
	return self.Runtime.Window_get_content_scale_stretch(self)
}
func (self Window) SetKeepTitleVisible(title_visible bool) {
	self.Runtime.Window_set_keep_title_visible(self, title_visible)
}
func (self Window) GetKeepTitleVisible() bool {
	return self.Runtime.Window_get_keep_title_visible(self)
}
func (self Window) SetContentScaleFactor(factor Float) {
	self.Runtime.Window_set_content_scale_factor(self, factor)
}
func (self Window) GetContentScaleFactor() Float {
	return self.Runtime.Window_get_content_scale_factor(self)
}
func (self Window) SetUseFontOversampling(enable bool) {
	self.Runtime.Window_set_use_font_oversampling(self, enable)
}
func (self Window) IsUsingFontOversampling() bool {
	return self.Runtime.Window_is_using_font_oversampling(self)
}
func (self Window) SetMousePassthroughPolygon(polygon PackedVector2Array) {
	self.Runtime.Window_set_mouse_passthrough_polygon(self, polygon)
}
func (self Window) GetMousePassthroughPolygon() PackedVector2Array {
	return self.Runtime.Window_get_mouse_passthrough_polygon(self)
}
func (self Window) SetWrapControls(enable bool) {
	self.Runtime.Window_set_wrap_controls(self, enable)
}
func (self Window) IsWrappingControls() bool {
	return self.Runtime.Window_is_wrapping_controls(self)
}
func (self Window) ChildControlsChanged() {
	self.Runtime.Window_child_controls_changed(self)
}
func (self Window) SetTheme(theme Theme) {
	self.Runtime.Window_set_theme(self, theme)
}
func (self Window) GetTheme() Theme {
	return self.Runtime.Window_get_theme(self)
}
func (self Window) SetThemeTypeVariation(theme_type string) {
	self.Runtime.Window_set_theme_type_variation(self, theme_type)
}
func (self Window) GetThemeTypeVariation() string {
	return self.Runtime.Window_get_theme_type_variation(self)
}
func (self Window) BeginBulkThemeOverride() {
	self.Runtime.Window_begin_bulk_theme_override(self)
}
func (self Window) EndBulkThemeOverride() {
	self.Runtime.Window_end_bulk_theme_override(self)
}
func (self Window) AddThemeIconOverride(name string, texture Texture2D) {
	self.Runtime.Window_add_theme_icon_override(self, name, texture)
}
func (self Window) AddThemeStyleboxOverride(name string, stylebox StyleBox) {
	self.Runtime.Window_add_theme_stylebox_override(self, name, stylebox)
}
func (self Window) AddThemeFontOverride(name string, font Font) {
	self.Runtime.Window_add_theme_font_override(self, name, font)
}
func (self Window) AddThemeFontSizeOverride(name string, font_size int64) {
	self.Runtime.Window_add_theme_font_size_override(self, name, font_size)
}
func (self Window) AddThemeColorOverride(name string, color Color) {
	self.Runtime.Window_add_theme_color_override(self, name, color)
}
func (self Window) AddThemeConstantOverride(name string, constant int64) {
	self.Runtime.Window_add_theme_constant_override(self, name, constant)
}
func (self Window) RemoveThemeIconOverride(name string) {
	self.Runtime.Window_remove_theme_icon_override(self, name)
}
func (self Window) RemoveThemeStyleboxOverride(name string) {
	self.Runtime.Window_remove_theme_stylebox_override(self, name)
}
func (self Window) RemoveThemeFontOverride(name string) {
	self.Runtime.Window_remove_theme_font_override(self, name)
}
func (self Window) RemoveThemeFontSizeOverride(name string) {
	self.Runtime.Window_remove_theme_font_size_override(self, name)
}
func (self Window) RemoveThemeColorOverride(name string) {
	self.Runtime.Window_remove_theme_color_override(self, name)
}
func (self Window) RemoveThemeConstantOverride(name string) {
	self.Runtime.Window_remove_theme_constant_override(self, name)
}
func (self Window) GetThemeIcon(name string, theme_type string) Texture2D {
	return self.Runtime.Window_get_theme_icon(self, name, theme_type)
}
func (self Window) GetThemeStylebox(name string, theme_type string) StyleBox {
	return self.Runtime.Window_get_theme_stylebox(self, name, theme_type)
}
func (self Window) GetThemeFont(name string, theme_type string) Font {
	return self.Runtime.Window_get_theme_font(self, name, theme_type)
}
func (self Window) GetThemeFontSize(name string, theme_type string) int64 {
	return self.Runtime.Window_get_theme_font_size(self, name, theme_type)
}
func (self Window) GetThemeColor(name string, theme_type string) Color {
	return self.Runtime.Window_get_theme_color(self, name, theme_type)
}
func (self Window) GetThemeConstant(name string, theme_type string) int64 {
	return self.Runtime.Window_get_theme_constant(self, name, theme_type)
}
func (self Window) HasThemeIconOverride(name string) bool {
	return self.Runtime.Window_has_theme_icon_override(self, name)
}
func (self Window) HasThemeStyleboxOverride(name string) bool {
	return self.Runtime.Window_has_theme_stylebox_override(self, name)
}
func (self Window) HasThemeFontOverride(name string) bool {
	return self.Runtime.Window_has_theme_font_override(self, name)
}
func (self Window) HasThemeFontSizeOverride(name string) bool {
	return self.Runtime.Window_has_theme_font_size_override(self, name)
}
func (self Window) HasThemeColorOverride(name string) bool {
	return self.Runtime.Window_has_theme_color_override(self, name)
}
func (self Window) HasThemeConstantOverride(name string) bool {
	return self.Runtime.Window_has_theme_constant_override(self, name)
}
func (self Window) HasThemeIcon(name string, theme_type string) bool {
	return self.Runtime.Window_has_theme_icon(self, name, theme_type)
}
func (self Window) HasThemeStylebox(name string, theme_type string) bool {
	return self.Runtime.Window_has_theme_stylebox(self, name, theme_type)
}
func (self Window) HasThemeFont(name string, theme_type string) bool {
	return self.Runtime.Window_has_theme_font(self, name, theme_type)
}
func (self Window) HasThemeFontSize(name string, theme_type string) bool {
	return self.Runtime.Window_has_theme_font_size(self, name, theme_type)
}
func (self Window) HasThemeColor(name string, theme_type string) bool {
	return self.Runtime.Window_has_theme_color(self, name, theme_type)
}
func (self Window) HasThemeConstant(name string, theme_type string) bool {
	return self.Runtime.Window_has_theme_constant(self, name, theme_type)
}
func (self Window) GetThemeDefaultBaseScale() Float {
	return self.Runtime.Window_get_theme_default_base_scale(self)
}
func (self Window) GetThemeDefaultFont() Font {
	return self.Runtime.Window_get_theme_default_font(self)
}
func (self Window) GetThemeDefaultFontSize() int64 {
	return self.Runtime.Window_get_theme_default_font_size(self)
}
func (self Window) SetLayoutDirection(direction WindowLayoutDirection) {
	self.Runtime.Window_set_layout_direction(self, direction)
}
func (self Window) GetLayoutDirection() WindowLayoutDirection {
	return self.Runtime.Window_get_layout_direction(self)
}
func (self Window) IsLayoutRtl() bool {
	return self.Runtime.Window_is_layout_rtl(self)
}
func (self Window) SetAutoTranslate(enable bool) {
	self.Runtime.Window_set_auto_translate(self, enable)
}
func (self Window) IsAutoTranslating() bool {
	return self.Runtime.Window_is_auto_translating(self)
}
func (self Window) Popup(rect Rect2i) {
	self.Runtime.Window_popup(self, rect)
}
func (self Window) PopupOnParent(parent_rect Rect2i) {
	self.Runtime.Window_popup_on_parent(self, parent_rect)
}
func (self Window) PopupCentered(minsize Vector2i) {
	self.Runtime.Window_popup_centered(self, minsize)
}
func (self Window) PopupCenteredRatio(ratio Float) {
	self.Runtime.Window_popup_centered_ratio(self, ratio)
}
func (self Window) PopupCenteredClamped(minsize Vector2i, fallback_ratio Float) {
	self.Runtime.Window_popup_centered_clamped(self, minsize, fallback_ratio)
}
func (self Window) PopupExclusive(from_node Node, rect Rect2i) {
	self.Runtime.Window_popup_exclusive(self, from_node, rect)
}
func (self Window) PopupExclusiveOnParent(from_node Node, parent_rect Rect2i) {
	self.Runtime.Window_popup_exclusive_on_parent(self, from_node, parent_rect)
}
func (self Window) PopupExclusiveCentered(from_node Node, minsize Vector2i) {
	self.Runtime.Window_popup_exclusive_centered(self, from_node, minsize)
}
func (self Window) PopupExclusiveCenteredRatio(from_node Node, ratio Float) {
	self.Runtime.Window_popup_exclusive_centered_ratio(self, from_node, ratio)
}
func (self Window) PopupExclusiveCenteredClamped(from_node Node, minsize Vector2i, fallback_ratio Float) {
	self.Runtime.Window_popup_exclusive_centered_clamped(self, from_node, minsize, fallback_ratio)
}

type extendsWorkerThreadPool struct {
	_ [0]*extendsWorkerThreadPool
	class
}

func (self WorkerThreadPool) Object() Object {
	var parent Object
	parent.class = self.class
	return parent
}
func (self WorkerThreadPool) AddTask(action Callable, high_priority bool, description string) int64 {
	return self.Runtime.WorkerThreadPool_add_task(self, action, high_priority, description)
}
func (self WorkerThreadPool) IsTaskCompleted(task_id int64) bool {
	return self.Runtime.WorkerThreadPool_is_task_completed(self, task_id)
}
func (self WorkerThreadPool) WaitForTaskCompletion(task_id int64) int64 {
	return self.Runtime.WorkerThreadPool_wait_for_task_completion(self, task_id)
}
func (self WorkerThreadPool) AddGroupTask(action Callable, elements int64, tasks_needed int64, high_priority bool, description string) int64 {
	return self.Runtime.WorkerThreadPool_add_group_task(self, action, elements, tasks_needed, high_priority, description)
}
func (self WorkerThreadPool) IsGroupTaskCompleted(group_id int64) bool {
	return self.Runtime.WorkerThreadPool_is_group_task_completed(self, group_id)
}
func (self WorkerThreadPool) GetGroupProcessedElementCount(group_id int64) int64 {
	return self.Runtime.WorkerThreadPool_get_group_processed_element_count(self, group_id)
}
func (self WorkerThreadPool) WaitForGroupTaskCompletion(group_id int64) {
	self.Runtime.WorkerThreadPool_wait_for_group_task_completion(self, group_id)
}

type extendsWorld2D struct {
	_ [0]*extendsWorld2D
	class
}

func (self World2D) Resource() Resource {
	var parent Resource
	parent.class = self.class
	return parent
}
func (self World2D) GetCanvas() RID {
	return self.Runtime.World2D_get_canvas(self)
}
func (self World2D) GetSpace() RID {
	return self.Runtime.World2D_get_space(self)
}
func (self World2D) GetNavigationMap() RID {
	return self.Runtime.World2D_get_navigation_map(self)
}
func (self World2D) GetDirectSpaceState() PhysicsDirectSpaceState2D {
	return self.Runtime.World2D_get_direct_space_state(self)
}

type extendsWorld3D struct {
	_ [0]*extendsWorld3D
	class
}

func (self World3D) Resource() Resource {
	var parent Resource
	parent.class = self.class
	return parent
}
func (self World3D) GetSpace() RID {
	return self.Runtime.World3D_get_space(self)
}
func (self World3D) GetNavigationMap() RID {
	return self.Runtime.World3D_get_navigation_map(self)
}
func (self World3D) GetScenario() RID {
	return self.Runtime.World3D_get_scenario(self)
}
func (self World3D) SetEnvironment(env Environment) {
	self.Runtime.World3D_set_environment(self, env)
}
func (self World3D) GetEnvironment() Environment {
	return self.Runtime.World3D_get_environment(self)
}
func (self World3D) SetFallbackEnvironment(env Environment) {
	self.Runtime.World3D_set_fallback_environment(self, env)
}
func (self World3D) GetFallbackEnvironment() Environment {
	return self.Runtime.World3D_get_fallback_environment(self)
}
func (self World3D) SetCameraAttributes(attributes CameraAttributes) {
	self.Runtime.World3D_set_camera_attributes(self, attributes)
}
func (self World3D) GetCameraAttributes() CameraAttributes {
	return self.Runtime.World3D_get_camera_attributes(self)
}
func (self World3D) GetDirectSpaceState() PhysicsDirectSpaceState3D {
	return self.Runtime.World3D_get_direct_space_state(self)
}

type extendsWorldBoundaryShape2D struct {
	_ [0]*extendsWorldBoundaryShape2D
	class
}

func (self WorldBoundaryShape2D) Shape2D() Shape2D {
	var parent Shape2D
	parent.class = self.class
	return parent
}
func (self WorldBoundaryShape2D) SetNormal(normal Vector2) {
	self.Runtime.WorldBoundaryShape2D_set_normal(self, normal)
}
func (self WorldBoundaryShape2D) GetNormal() Vector2 {
	return self.Runtime.WorldBoundaryShape2D_get_normal(self)
}
func (self WorldBoundaryShape2D) SetDistance(distance Float) {
	self.Runtime.WorldBoundaryShape2D_set_distance(self, distance)
}
func (self WorldBoundaryShape2D) GetDistance() Float {
	return self.Runtime.WorldBoundaryShape2D_get_distance(self)
}

type extendsWorldBoundaryShape3D struct {
	_ [0]*extendsWorldBoundaryShape3D
	class
}

func (self WorldBoundaryShape3D) Shape3D() Shape3D {
	var parent Shape3D
	parent.class = self.class
	return parent
}
func (self WorldBoundaryShape3D) SetPlane(plane Plane) {
	self.Runtime.WorldBoundaryShape3D_set_plane(self, plane)
}
func (self WorldBoundaryShape3D) GetPlane() Plane {
	return self.Runtime.WorldBoundaryShape3D_get_plane(self)
}

type extendsWorldEnvironment struct {
	_ [0]*extendsWorldEnvironment
	class
}

func (self WorldEnvironment) Node() Node { var parent Node; parent.class = self.class; return parent }
func (self WorldEnvironment) SetEnvironment(env Environment) {
	self.Runtime.WorldEnvironment_set_environment(self, env)
}
func (self WorldEnvironment) GetEnvironment() Environment {
	return self.Runtime.WorldEnvironment_get_environment(self)
}
func (self WorldEnvironment) SetCameraAttributes(camera_attributes CameraAttributes) {
	self.Runtime.WorldEnvironment_set_camera_attributes(self, camera_attributes)
}
func (self WorldEnvironment) GetCameraAttributes() CameraAttributes {
	return self.Runtime.WorldEnvironment_get_camera_attributes(self)
}

type extendsX509Certificate struct {
	_ [0]*extendsX509Certificate
	class
}

func (self X509Certificate) Resource() Resource {
	var parent Resource
	parent.class = self.class
	return parent
}
func (self X509Certificate) Save(path string) int64 {
	return self.Runtime.X509Certificate_save(self, path)
}
func (self X509Certificate) Load(path string) int64 {
	return self.Runtime.X509Certificate_load(self, path)
}
func (self X509Certificate) SaveToString() string {
	return self.Runtime.X509Certificate_save_to_string(self)
}
func (self X509Certificate) LoadFromString(s string) int64 {
	return self.Runtime.X509Certificate_load_from_string(self, s)
}

type extendsXMLParser struct {
	_ [0]*extendsXMLParser
	class
}

func (self XMLParser) RefCounted() RefCounted {
	var parent RefCounted
	parent.class = self.class
	return parent
}
func (self XMLParser) Read() int64 {
	return self.Runtime.XMLParser_read(self)
}
func (self XMLParser) GetNodeType() XMLParserNodeType {
	return self.Runtime.XMLParser_get_node_type(self)
}
func (self XMLParser) GetNodeName() string {
	return self.Runtime.XMLParser_get_node_name(self)
}
func (self XMLParser) GetNodeData() string {
	return self.Runtime.XMLParser_get_node_data(self)
}
func (self XMLParser) GetNodeOffset() int64 {
	return self.Runtime.XMLParser_get_node_offset(self)
}
func (self XMLParser) GetAttributeCount() int64 {
	return self.Runtime.XMLParser_get_attribute_count(self)
}
func (self XMLParser) GetAttributeName(idx int64) string {
	return self.Runtime.XMLParser_get_attribute_name(self, idx)
}
func (self XMLParser) GetAttributeValue(idx int64) string {
	return self.Runtime.XMLParser_get_attribute_value(self, idx)
}
func (self XMLParser) HasAttribute(name string) bool {
	return self.Runtime.XMLParser_has_attribute(self, name)
}
func (self XMLParser) GetNamedAttributeValue(name string) string {
	return self.Runtime.XMLParser_get_named_attribute_value(self, name)
}
func (self XMLParser) GetNamedAttributeValueSafe(name string) string {
	return self.Runtime.XMLParser_get_named_attribute_value_safe(self, name)
}
func (self XMLParser) IsEmpty() bool {
	return self.Runtime.XMLParser_is_empty(self)
}
func (self XMLParser) GetCurrentLine() int64 {
	return self.Runtime.XMLParser_get_current_line(self)
}
func (self XMLParser) SkipSection() {
	self.Runtime.XMLParser_skip_section(self)
}
func (self XMLParser) SeekTo(position int64) int64 {
	return self.Runtime.XMLParser_seek(self, position)
}
func (self XMLParser) Open(file string) int64 {
	return self.Runtime.XMLParser_open(self, file)
}
func (self XMLParser) OpenBuffer(buffer PackedByteArray) int64 {
	return self.Runtime.XMLParser_open_buffer(self, buffer)
}

type extendsXRAnchor3D struct {
	_ [0]*extendsXRAnchor3D
	class
}

func (self XRAnchor3D) XRNode3D() XRNode3D {
	var parent XRNode3D
	parent.class = self.class
	return parent
}
func (self XRAnchor3D) GetSize() Vector3 {
	return self.Runtime.XRAnchor3D_get_size(self)
}
func (self XRAnchor3D) GetPlane() Plane {
	return self.Runtime.XRAnchor3D_get_plane(self)
}

type extendsXRCamera3D struct {
	_ [0]*extendsXRCamera3D
	class
}

func (self XRCamera3D) Camera3D() Camera3D {
	var parent Camera3D
	parent.class = self.class
	return parent
}

type extendsXRController3D struct {
	_ [0]*extendsXRController3D
	class
}

func (self XRController3D) XRNode3D() XRNode3D {
	var parent XRNode3D
	parent.class = self.class
	return parent
}
func (self XRController3D) IsButtonPressed(name string) bool {
	return self.Runtime.XRController3D_is_button_pressed(self, name)
}
func (self XRController3D) GetInput(name string) any {
	return self.Runtime.XRController3D_get_input(self, name)
}
func (self XRController3D) GetFloat(name string) Float {
	return self.Runtime.XRController3D_get_float(self, name)
}
func (self XRController3D) GetVector2(name string) Vector2 {
	return self.Runtime.XRController3D_get_vector2(self, name)
}
func (self XRController3D) GetTrackerHand() XRPositionalTrackerTrackerHand {
	return self.Runtime.XRController3D_get_tracker_hand(self)
}

type extendsXRInterface struct {
	_ [0]*extendsXRInterface
	class
}

func (self XRInterface) RefCounted() RefCounted {
	var parent RefCounted
	parent.class = self.class
	return parent
}
func (self XRInterface) GetName() string {
	return self.Runtime.XRInterface_get_name(self)
}
func (self XRInterface) GetCapabilities() int64 {
	return self.Runtime.XRInterface_get_capabilities(self)
}
func (self XRInterface) IsPrimary() bool {
	return self.Runtime.XRInterface_is_primary(self)
}
func (self XRInterface) SetPrimary(primary bool) {
	self.Runtime.XRInterface_set_primary(self, primary)
}
func (self XRInterface) IsInitialized() bool {
	return self.Runtime.XRInterface_is_initialized(self)
}
func (self XRInterface) Initialize() bool {
	return self.Runtime.XRInterface_initialize(self)
}
func (self XRInterface) Uninitialize() {
	self.Runtime.XRInterface_uninitialize(self)
}
func (self XRInterface) GetSystemInfo() Dictionary {
	return self.Runtime.XRInterface_get_system_info(self)
}
func (self XRInterface) GetTrackingStatus() XRInterfaceTrackingStatus {
	return self.Runtime.XRInterface_get_tracking_status(self)
}
func (self XRInterface) GetRenderTargetSize() Vector2 {
	return self.Runtime.XRInterface_get_render_target_size(self)
}
func (self XRInterface) GetViewCount() int64 {
	return self.Runtime.XRInterface_get_view_count(self)
}
func (self XRInterface) TriggerHapticPulse(action_name string, tracker_name string, frequency Float, amplitude Float, duration_sec Float, delay_sec Float) {
	self.Runtime.XRInterface_trigger_haptic_pulse(self, action_name, tracker_name, frequency, amplitude, duration_sec, delay_sec)
}
func (self XRInterface) SupportsPlayAreaMode(mode XRInterfacePlayAreaMode) bool {
	return self.Runtime.XRInterface_supports_play_area_mode(self, mode)
}
func (self XRInterface) GetPlayAreaMode() XRInterfacePlayAreaMode {
	return self.Runtime.XRInterface_get_play_area_mode(self)
}
func (self XRInterface) SetPlayAreaMode(mode XRInterfacePlayAreaMode) bool {
	return self.Runtime.XRInterface_set_play_area_mode(self, mode)
}
func (self XRInterface) GetPlayArea() PackedVector3Array {
	return self.Runtime.XRInterface_get_play_area(self)
}
func (self XRInterface) GetAnchorDetectionIsEnabled() bool {
	return self.Runtime.XRInterface_get_anchor_detection_is_enabled(self)
}
func (self XRInterface) SetAnchorDetectionIsEnabled(enable bool) {
	self.Runtime.XRInterface_set_anchor_detection_is_enabled(self, enable)
}
func (self XRInterface) GetCameraFeedId() int64 {
	return self.Runtime.XRInterface_get_camera_feed_id(self)
}
func (self XRInterface) IsPassthroughSupported() bool {
	return self.Runtime.XRInterface_is_passthrough_supported(self)
}
func (self XRInterface) IsPassthroughEnabled() bool {
	return self.Runtime.XRInterface_is_passthrough_enabled(self)
}
func (self XRInterface) StartPassthrough() bool {
	return self.Runtime.XRInterface_start_passthrough(self)
}
func (self XRInterface) StopPassthrough() {
	self.Runtime.XRInterface_stop_passthrough(self)
}
func (self XRInterface) GetTransformForView(view int64, cam_transform Transform3D) Transform3D {
	return self.Runtime.XRInterface_get_transform_for_view(self, view, cam_transform)
}
func (self XRInterface) GetProjectionForView(view int64, aspect Float, near Float, far Float) Projection {
	return self.Runtime.XRInterface_get_projection_for_view(self, view, aspect, near, far)
}
func (self XRInterface) GetSupportedEnvironmentBlendModes() Array {
	return self.Runtime.XRInterface_get_supported_environment_blend_modes(self)
}
func (self XRInterface) SetEnvironmentBlendMode(mode XRInterfaceEnvironmentBlendMode) bool {
	return self.Runtime.XRInterface_set_environment_blend_mode(self, mode)
}
func (self XRInterface) GetEnvironmentBlendMode() XRInterfaceEnvironmentBlendMode {
	return self.Runtime.XRInterface_get_environment_blend_mode(self)
}

type extendsXRInterfaceExtension struct {
	_ [0]*extendsXRInterfaceExtension
	class
}

func (self XRInterfaceExtension) XRInterface() XRInterface {
	var parent XRInterface
	parent.class = self.class
	return parent
}
func (self XRInterfaceExtension) GetColorTexture() RID {
	return self.Runtime.XRInterfaceExtension_get_color_texture(self)
}
func (self XRInterfaceExtension) GetDepthTexture() RID {
	return self.Runtime.XRInterfaceExtension_get_depth_texture(self)
}
func (self XRInterfaceExtension) GetVelocityTexture() RID {
	return self.Runtime.XRInterfaceExtension_get_velocity_texture(self)
}
func (self XRInterfaceExtension) AddBlit(render_target RID, src_rect Rect2, dst_rect Rect2i, use_layer bool, layer int64, apply_lens_distortion bool, eye_center Vector2, k1 Float, k2 Float, upscale Float, aspect_ratio Float) {
	self.Runtime.XRInterfaceExtension_add_blit(self, render_target, src_rect, dst_rect, use_layer, layer, apply_lens_distortion, eye_center, k1, k2, upscale, aspect_ratio)
}
func (self XRInterfaceExtension) GetRenderTargetTexture(render_target RID) RID {
	return self.Runtime.XRInterfaceExtension_get_render_target_texture(self, render_target)
}

type extendsXRNode3D struct {
	_ [0]*extendsXRNode3D
	class
}

func (self XRNode3D) Node3D() Node3D { var parent Node3D; parent.class = self.class; return parent }
func (self XRNode3D) SetTracker(tracker_name string) {
	self.Runtime.XRNode3D_set_tracker(self, tracker_name)
}
func (self XRNode3D) GetTracker() string {
	return self.Runtime.XRNode3D_get_tracker(self)
}
func (self XRNode3D) SetPoseName(pose string) {
	self.Runtime.XRNode3D_set_pose_name(self, pose)
}
func (self XRNode3D) GetPoseName() string {
	return self.Runtime.XRNode3D_get_pose_name(self)
}
func (self XRNode3D) GetIsActive() bool {
	return self.Runtime.XRNode3D_get_is_active(self)
}
func (self XRNode3D) GetHasTrackingData() bool {
	return self.Runtime.XRNode3D_get_has_tracking_data(self)
}
func (self XRNode3D) GetPose() XRPose {
	return self.Runtime.XRNode3D_get_pose(self)
}
func (self XRNode3D) TriggerHapticPulse(action_name string, frequency Float, amplitude Float, duration_sec Float, delay_sec Float) {
	self.Runtime.XRNode3D_trigger_haptic_pulse(self, action_name, frequency, amplitude, duration_sec, delay_sec)
}

type extendsXROrigin3D struct {
	_ [0]*extendsXROrigin3D
	class
}

func (self XROrigin3D) Node3D() Node3D { var parent Node3D; parent.class = self.class; return parent }
func (self XROrigin3D) SetWorldScale(world_scale Float) {
	self.Runtime.XROrigin3D_set_world_scale(self, world_scale)
}
func (self XROrigin3D) GetWorldScale() Float {
	return self.Runtime.XROrigin3D_get_world_scale(self)
}
func (self XROrigin3D) SetCurrent(enabled bool) {
	self.Runtime.XROrigin3D_set_current(self, enabled)
}
func (self XROrigin3D) IsCurrent() bool {
	return self.Runtime.XROrigin3D_is_current(self)
}

type extendsXRPose struct {
	_ [0]*extendsXRPose
	class
}

func (self XRPose) RefCounted() RefCounted {
	var parent RefCounted
	parent.class = self.class
	return parent
}
func (self XRPose) SetHasTrackingData(has_tracking_data bool) {
	self.Runtime.XRPose_set_has_tracking_data(self, has_tracking_data)
}
func (self XRPose) GetHasTrackingData() bool {
	return self.Runtime.XRPose_get_has_tracking_data(self)
}
func (self XRPose) SetName(name string) {
	self.Runtime.XRPose_set_name(self, name)
}
func (self XRPose) GetName() string {
	return self.Runtime.XRPose_get_name(self)
}
func (self XRPose) SetTransform(transform Transform3D) {
	self.Runtime.XRPose_set_transform(self, transform)
}
func (self XRPose) GetTransform() Transform3D {
	return self.Runtime.XRPose_get_transform(self)
}
func (self XRPose) GetAdjustedTransform() Transform3D {
	return self.Runtime.XRPose_get_adjusted_transform(self)
}
func (self XRPose) SetLinearVelocity(velocity Vector3) {
	self.Runtime.XRPose_set_linear_velocity(self, velocity)
}
func (self XRPose) GetLinearVelocity() Vector3 {
	return self.Runtime.XRPose_get_linear_velocity(self)
}
func (self XRPose) SetAngularVelocity(velocity Vector3) {
	self.Runtime.XRPose_set_angular_velocity(self, velocity)
}
func (self XRPose) GetAngularVelocity() Vector3 {
	return self.Runtime.XRPose_get_angular_velocity(self)
}
func (self XRPose) SetTrackingConfidence(tracking_confidence XRPoseTrackingConfidence) {
	self.Runtime.XRPose_set_tracking_confidence(self, tracking_confidence)
}
func (self XRPose) GetTrackingConfidence() XRPoseTrackingConfidence {
	return self.Runtime.XRPose_get_tracking_confidence(self)
}

type extendsXRPositionalTracker struct {
	_ [0]*extendsXRPositionalTracker
	class
}

func (self XRPositionalTracker) RefCounted() RefCounted {
	var parent RefCounted
	parent.class = self.class
	return parent
}
func (self XRPositionalTracker) GetTrackerType() XRServerTrackerType {
	return self.Runtime.XRPositionalTracker_get_tracker_type(self)
}
func (self XRPositionalTracker) SetTrackerType(atype XRServerTrackerType) {
	self.Runtime.XRPositionalTracker_set_tracker_type(self, atype)
}
func (self XRPositionalTracker) GetTrackerName() string {
	return self.Runtime.XRPositionalTracker_get_tracker_name(self)
}
func (self XRPositionalTracker) SetTrackerName(name string) {
	self.Runtime.XRPositionalTracker_set_tracker_name(self, name)
}
func (self XRPositionalTracker) GetTrackerDesc() string {
	return self.Runtime.XRPositionalTracker_get_tracker_desc(self)
}
func (self XRPositionalTracker) SetTrackerDesc(description string) {
	self.Runtime.XRPositionalTracker_set_tracker_desc(self, description)
}
func (self XRPositionalTracker) GetTrackerProfile() string {
	return self.Runtime.XRPositionalTracker_get_tracker_profile(self)
}
func (self XRPositionalTracker) SetTrackerProfile(profile string) {
	self.Runtime.XRPositionalTracker_set_tracker_profile(self, profile)
}
func (self XRPositionalTracker) GetTrackerHand() XRPositionalTrackerTrackerHand {
	return self.Runtime.XRPositionalTracker_get_tracker_hand(self)
}
func (self XRPositionalTracker) SetTrackerHand(hand XRPositionalTrackerTrackerHand) {
	self.Runtime.XRPositionalTracker_set_tracker_hand(self, hand)
}
func (self XRPositionalTracker) HasPose(name string) bool {
	return self.Runtime.XRPositionalTracker_has_pose(self, name)
}
func (self XRPositionalTracker) GetPose(name string) XRPose {
	return self.Runtime.XRPositionalTracker_get_pose(self, name)
}
func (self XRPositionalTracker) InvalidatePose(name string) {
	self.Runtime.XRPositionalTracker_invalidate_pose(self, name)
}
func (self XRPositionalTracker) SetPose(name string, transform Transform3D, linear_velocity Vector3, angular_velocity Vector3, tracking_confidence XRPoseTrackingConfidence) {
	self.Runtime.XRPositionalTracker_set_pose(self, name, transform, linear_velocity, angular_velocity, tracking_confidence)
}
func (self XRPositionalTracker) GetInput(name string) any {
	return self.Runtime.XRPositionalTracker_get_input(self, name)
}
func (self XRPositionalTracker) SetInput(name string, value any) {
	self.Runtime.XRPositionalTracker_set_input(self, name, value)
}

type extendsXRServer struct {
	_ [0]*extendsXRServer
	class
}

func (self XRServer) Object() Object { var parent Object; parent.class = self.class; return parent }
func (self XRServer) GetWorldScale() Float {
	return self.Runtime.XRServer_get_world_scale(self)
}
func (self XRServer) SetWorldScale(scale Float) {
	self.Runtime.XRServer_set_world_scale(self, scale)
}
func (self XRServer) GetWorldOrigin() Transform3D {
	return self.Runtime.XRServer_get_world_origin(self)
}
func (self XRServer) SetWorldOrigin(world_origin Transform3D) {
	self.Runtime.XRServer_set_world_origin(self, world_origin)
}
func (self XRServer) GetReferenceFrame() Transform3D {
	return self.Runtime.XRServer_get_reference_frame(self)
}
func (self XRServer) CenterOnHmd(rotation_mode XRServerRotationMode, keep_height bool) {
	self.Runtime.XRServer_center_on_hmd(self, rotation_mode, keep_height)
}
func (self XRServer) GetHmdTransform() Transform3D {
	return self.Runtime.XRServer_get_hmd_transform(self)
}
func (self XRServer) AddInterface(intf XRInterface) {
	self.Runtime.XRServer_add_interface(self, intf)
}
func (self XRServer) GetInterfaceCount() int64 {
	return self.Runtime.XRServer_get_interface_count(self)
}
func (self XRServer) RemoveInterface(intf XRInterface) {
	self.Runtime.XRServer_remove_interface(self, intf)
}
func (self XRServer) GetInterface(idx int64) XRInterface {
	return self.Runtime.XRServer_get_interface(self, idx)
}
func (self XRServer) GetInterfaces() ArrayOf[Dictionary] {
	return self.Runtime.XRServer_get_interfaces(self)
}
func (self XRServer) FindInterface(name string) XRInterface {
	return self.Runtime.XRServer_find_interface(self, name)
}
func (self XRServer) AddTracker(tracker XRPositionalTracker) {
	self.Runtime.XRServer_add_tracker(self, tracker)
}
func (self XRServer) RemoveTracker(tracker XRPositionalTracker) {
	self.Runtime.XRServer_remove_tracker(self, tracker)
}
func (self XRServer) GetTrackers(tracker_types int64) Dictionary {
	return self.Runtime.XRServer_get_trackers(self, tracker_types)
}
func (self XRServer) GetTracker(tracker_name string) XRPositionalTracker {
	return self.Runtime.XRServer_get_tracker(self, tracker_name)
}
func (self XRServer) GetPrimaryInterface() XRInterface {
	return self.Runtime.XRServer_get_primary_interface(self)
}
func (self XRServer) SetPrimaryInterface(intf XRInterface) {
	self.Runtime.XRServer_set_primary_interface(self, intf)
}

type extendsZIPPacker struct {
	_ [0]*extendsZIPPacker
	class
}

func (self ZIPPacker) RefCounted() RefCounted {
	var parent RefCounted
	parent.class = self.class
	return parent
}
func (self ZIPPacker) Open(path string, append ZIPPackerZipAppend) int64 {
	return self.Runtime.ZIPPacker_open(self, path, append)
}
func (self ZIPPacker) StartFile(path string) int64 {
	return self.Runtime.ZIPPacker_start_file(self, path)
}
func (self ZIPPacker) WriteFile(data PackedByteArray) int64 {
	return self.Runtime.ZIPPacker_write_file(self, data)
}
func (self ZIPPacker) CloseFile() int64 {
	return self.Runtime.ZIPPacker_close_file(self)
}
func (self ZIPPacker) Close() int64 {
	return self.Runtime.ZIPPacker_close(self)
}

type extendsZIPReader struct {
	_ [0]*extendsZIPReader
	class
}

func (self ZIPReader) RefCounted() RefCounted {
	var parent RefCounted
	parent.class = self.class
	return parent
}
func (self ZIPReader) Open(path string) int64 {
	return self.Runtime.ZIPReader_open(self, path)
}
func (self ZIPReader) Close() int64 {
	return self.Runtime.ZIPReader_close(self)
}
func (self ZIPReader) GetFiles() PackedStringArray {
	return self.Runtime.ZIPReader_get_files(self)
}
func (self ZIPReader) ReadFile(path string, case_sensitive bool) PackedByteArray {
	return self.Runtime.ZIPReader_read_file(self, path, case_sensitive)
}
func (self ZIPReader) FileExists(path string, case_sensitive bool) bool {
	return self.Runtime.ZIPReader_file_exists(self, path, case_sensitive)
}
