//go:build !generate

// Code generated by the generate package DO NOT EDIT
package gd

import "reflect"
import "runtime.link/mmm"
import "runtime.link/api/call"

type Corner int64

type Orientation int64

type ClockDirection int64

type HorizontalAlignment int64

type VerticalAlignment int64

type InlineAlignment int64

type Key int64

type KeyModifierMask int64

type MouseButton int64

type MouseButtonMask int64

type JoyButton int64

type JoyAxis int64

type MIDIMessage int64

type Error int64

const (
	Ok                         Error = 0
	Failed                     Error = 1
	ErrUnavailable             Error = 2
	ErrUnconfigured            Error = 3
	ErrUnauthorized            Error = 4
	ErrParameterRangeError     Error = 5
	ErrOutOfMemory             Error = 6
	ErrFileNotFound            Error = 7
	ErrFileBadDrive            Error = 8
	ErrFileBadPath             Error = 9
	ErrFileNoPermission        Error = 10
	ErrFileAlreadyInUse        Error = 11
	ErrFileCantOpen            Error = 12
	ErrFileCantWrite           Error = 13
	ErrFileCantRead            Error = 14
	ErrFileUnrecognized        Error = 15
	ErrFileCorrupt             Error = 16
	ErrFileMissingDependencies Error = 17
	ErrFileEof                 Error = 18
	ErrCantOpen                Error = 19
	ErrCantCreate              Error = 20
	ErrQueryFailed             Error = 21
	ErrAlreadyInUse            Error = 22
	ErrLocked                  Error = 23
	ErrTimeout                 Error = 24
	ErrCantConnect             Error = 25
	ErrCantResolve             Error = 26
	ErrConnectionError         Error = 27
	ErrCantAcquireResource     Error = 28
	ErrCantFork                Error = 29
	ErrInvalidData             Error = 30
	ErrInvalidParameter        Error = 31
	ErrAlreadyExists           Error = 32
	ErrDoesNotExist            Error = 33
	ErrDatabaseCantRead        Error = 34
	ErrDatabaseCantWrite       Error = 35
	ErrCompilationFailed       Error = 36
	ErrMethodNotFound          Error = 37
	ErrLinkFailed              Error = 38
	ErrScriptFailed            Error = 39
	ErrCyclicLink              Error = 40
	ErrInvalidDeclaration      Error = 41
	ErrDuplicateSymbol         Error = 42
	ErrParseError              Error = 43
	ErrBusy                    Error = 44
	ErrSkip                    Error = 45
	ErrHelp                    Error = 46
	ErrBug                     Error = 47
	ErrPrinterOnFire           Error = 48
)

type PropertyHint int64

type PropertyUsageFlags int64

type MethodFlags int64

type VariantType int64

const (
	TypeNil                VariantType = 0
	TypeBool               VariantType = 1
	TypeInt                VariantType = 2
	TypeFloat              VariantType = 3
	TypeString             VariantType = 4
	TypeVector2            VariantType = 5
	TypeVector2i           VariantType = 6
	TypeRect2              VariantType = 7
	TypeRect2i             VariantType = 8
	TypeVector3            VariantType = 9
	TypeVector3i           VariantType = 10
	TypeTransform2d        VariantType = 11
	TypeVector4            VariantType = 12
	TypeVector4i           VariantType = 13
	TypePlane              VariantType = 14
	TypeQuaternion         VariantType = 15
	TypeAabb               VariantType = 16
	TypeBasis              VariantType = 17
	TypeTransform3d        VariantType = 18
	TypeProjection         VariantType = 19
	TypeColor              VariantType = 20
	TypeStringName         VariantType = 21
	TypeNodePath           VariantType = 22
	TypeRid                VariantType = 23
	TypeObject             VariantType = 24
	TypeCallable           VariantType = 25
	TypeSignal             VariantType = 26
	TypeDictionary         VariantType = 27
	TypeArray              VariantType = 28
	TypePackedByteArray    VariantType = 29
	TypePackedInt32Array   VariantType = 30
	TypePackedInt64Array   VariantType = 31
	TypePackedFloat32Array VariantType = 32
	TypePackedFloat64Array VariantType = 33
	TypePackedStringArray  VariantType = 34
	TypePackedVector2Array VariantType = 35
	TypePackedVector3Array VariantType = 36
	TypePackedColorArray   VariantType = 37
	TypeMax                VariantType = 38
)

type VariantOperator int64

func (ctx Context) Sin(angle_rad Float) Float {
	var frame = call.New()
	call.Arg(frame, angle_rad)
	var r_ret = call.Ret[Float](frame)
	ctx.API.utility.sin(r_ret.Uintptr(), frame.Array(0), 1)
	var ret = r_ret.Get()
	frame.Free()
	return ret
}

func (ctx Context) Cos(angle_rad Float) Float {
	var frame = call.New()
	call.Arg(frame, angle_rad)
	var r_ret = call.Ret[Float](frame)
	ctx.API.utility.cos(r_ret.Uintptr(), frame.Array(0), 1)
	var ret = r_ret.Get()
	frame.Free()
	return ret
}

func (ctx Context) Tan(angle_rad Float) Float {
	var frame = call.New()
	call.Arg(frame, angle_rad)
	var r_ret = call.Ret[Float](frame)
	ctx.API.utility.tan(r_ret.Uintptr(), frame.Array(0), 1)
	var ret = r_ret.Get()
	frame.Free()
	return ret
}

func (ctx Context) Sinh(x Float) Float {
	var frame = call.New()
	call.Arg(frame, x)
	var r_ret = call.Ret[Float](frame)
	ctx.API.utility.sinh(r_ret.Uintptr(), frame.Array(0), 1)
	var ret = r_ret.Get()
	frame.Free()
	return ret
}

func (ctx Context) Cosh(x Float) Float {
	var frame = call.New()
	call.Arg(frame, x)
	var r_ret = call.Ret[Float](frame)
	ctx.API.utility.cosh(r_ret.Uintptr(), frame.Array(0), 1)
	var ret = r_ret.Get()
	frame.Free()
	return ret
}

func (ctx Context) Tanh(x Float) Float {
	var frame = call.New()
	call.Arg(frame, x)
	var r_ret = call.Ret[Float](frame)
	ctx.API.utility.tanh(r_ret.Uintptr(), frame.Array(0), 1)
	var ret = r_ret.Get()
	frame.Free()
	return ret
}

func (ctx Context) Asin(x Float) Float {
	var frame = call.New()
	call.Arg(frame, x)
	var r_ret = call.Ret[Float](frame)
	ctx.API.utility.asin(r_ret.Uintptr(), frame.Array(0), 1)
	var ret = r_ret.Get()
	frame.Free()
	return ret
}

func (ctx Context) Acos(x Float) Float {
	var frame = call.New()
	call.Arg(frame, x)
	var r_ret = call.Ret[Float](frame)
	ctx.API.utility.acos(r_ret.Uintptr(), frame.Array(0), 1)
	var ret = r_ret.Get()
	frame.Free()
	return ret
}

func (ctx Context) Atan(x Float) Float {
	var frame = call.New()
	call.Arg(frame, x)
	var r_ret = call.Ret[Float](frame)
	ctx.API.utility.atan(r_ret.Uintptr(), frame.Array(0), 1)
	var ret = r_ret.Get()
	frame.Free()
	return ret
}

func (ctx Context) Atan2(y Float, x Float) Float {
	var frame = call.New()
	call.Arg(frame, y)
	call.Arg(frame, x)
	var r_ret = call.Ret[Float](frame)
	ctx.API.utility.atan2(r_ret.Uintptr(), frame.Array(0), 2)
	var ret = r_ret.Get()
	frame.Free()
	return ret
}

func (ctx Context) Asinh(x Float) Float {
	var frame = call.New()
	call.Arg(frame, x)
	var r_ret = call.Ret[Float](frame)
	ctx.API.utility.asinh(r_ret.Uintptr(), frame.Array(0), 1)
	var ret = r_ret.Get()
	frame.Free()
	return ret
}

func (ctx Context) Acosh(x Float) Float {
	var frame = call.New()
	call.Arg(frame, x)
	var r_ret = call.Ret[Float](frame)
	ctx.API.utility.acosh(r_ret.Uintptr(), frame.Array(0), 1)
	var ret = r_ret.Get()
	frame.Free()
	return ret
}

func (ctx Context) Atanh(x Float) Float {
	var frame = call.New()
	call.Arg(frame, x)
	var r_ret = call.Ret[Float](frame)
	ctx.API.utility.atanh(r_ret.Uintptr(), frame.Array(0), 1)
	var ret = r_ret.Get()
	frame.Free()
	return ret
}

func (ctx Context) Sqrt(x Float) Float {
	var frame = call.New()
	call.Arg(frame, x)
	var r_ret = call.Ret[Float](frame)
	ctx.API.utility.sqrt(r_ret.Uintptr(), frame.Array(0), 1)
	var ret = r_ret.Get()
	frame.Free()
	return ret
}

func (ctx Context) Fmod(x Float, y Float) Float {
	var frame = call.New()
	call.Arg(frame, x)
	call.Arg(frame, y)
	var r_ret = call.Ret[Float](frame)
	ctx.API.utility.fmod(r_ret.Uintptr(), frame.Array(0), 2)
	var ret = r_ret.Get()
	frame.Free()
	return ret
}

func (ctx Context) Fposmod(x Float, y Float) Float {
	var frame = call.New()
	call.Arg(frame, x)
	call.Arg(frame, y)
	var r_ret = call.Ret[Float](frame)
	ctx.API.utility.fposmod(r_ret.Uintptr(), frame.Array(0), 2)
	var ret = r_ret.Get()
	frame.Free()
	return ret
}

func (ctx Context) Posmod(x Int, y Int) Int {
	var frame = call.New()
	call.Arg(frame, x)
	call.Arg(frame, y)
	var r_ret = call.Ret[Int](frame)
	ctx.API.utility.posmod(r_ret.Uintptr(), frame.Array(0), 2)
	var ret = r_ret.Get()
	frame.Free()
	return ret
}

func (ctx Context) Floor(x Variant) Variant {
	var frame = call.New()
	call.Arg(frame, mmm.Get(x))
	var r_ret = call.Ret[[3]uintptr](frame)
	ctx.API.utility.floor(r_ret.Uintptr(), frame.Array(0), 1)
	var ret = mmm.New[Variant](ctx.Lifetime, ctx.API, r_ret.Get())
	frame.Free()
	return ret
}

func (ctx Context) Floorf(x Float) Float {
	var frame = call.New()
	call.Arg(frame, x)
	var r_ret = call.Ret[Float](frame)
	ctx.API.utility.floorf(r_ret.Uintptr(), frame.Array(0), 1)
	var ret = r_ret.Get()
	frame.Free()
	return ret
}

func (ctx Context) Floori(x Float) Int {
	var frame = call.New()
	call.Arg(frame, x)
	var r_ret = call.Ret[Int](frame)
	ctx.API.utility.floori(r_ret.Uintptr(), frame.Array(0), 1)
	var ret = r_ret.Get()
	frame.Free()
	return ret
}

func (ctx Context) Ceil(x Variant) Variant {
	var frame = call.New()
	call.Arg(frame, mmm.Get(x))
	var r_ret = call.Ret[[3]uintptr](frame)
	ctx.API.utility.ceil(r_ret.Uintptr(), frame.Array(0), 1)
	var ret = mmm.New[Variant](ctx.Lifetime, ctx.API, r_ret.Get())
	frame.Free()
	return ret
}

func (ctx Context) Ceilf(x Float) Float {
	var frame = call.New()
	call.Arg(frame, x)
	var r_ret = call.Ret[Float](frame)
	ctx.API.utility.ceilf(r_ret.Uintptr(), frame.Array(0), 1)
	var ret = r_ret.Get()
	frame.Free()
	return ret
}

func (ctx Context) Ceili(x Float) Int {
	var frame = call.New()
	call.Arg(frame, x)
	var r_ret = call.Ret[Int](frame)
	ctx.API.utility.ceili(r_ret.Uintptr(), frame.Array(0), 1)
	var ret = r_ret.Get()
	frame.Free()
	return ret
}

func (ctx Context) Round(x Variant) Variant {
	var frame = call.New()
	call.Arg(frame, mmm.Get(x))
	var r_ret = call.Ret[[3]uintptr](frame)
	ctx.API.utility.round(r_ret.Uintptr(), frame.Array(0), 1)
	var ret = mmm.New[Variant](ctx.Lifetime, ctx.API, r_ret.Get())
	frame.Free()
	return ret
}

func (ctx Context) Roundf(x Float) Float {
	var frame = call.New()
	call.Arg(frame, x)
	var r_ret = call.Ret[Float](frame)
	ctx.API.utility.roundf(r_ret.Uintptr(), frame.Array(0), 1)
	var ret = r_ret.Get()
	frame.Free()
	return ret
}

func (ctx Context) Roundi(x Float) Int {
	var frame = call.New()
	call.Arg(frame, x)
	var r_ret = call.Ret[Int](frame)
	ctx.API.utility.roundi(r_ret.Uintptr(), frame.Array(0), 1)
	var ret = r_ret.Get()
	frame.Free()
	return ret
}

func (ctx Context) Abs(x Variant) Variant {
	var frame = call.New()
	call.Arg(frame, mmm.Get(x))
	var r_ret = call.Ret[[3]uintptr](frame)
	ctx.API.utility.abs(r_ret.Uintptr(), frame.Array(0), 1)
	var ret = mmm.New[Variant](ctx.Lifetime, ctx.API, r_ret.Get())
	frame.Free()
	return ret
}

func (ctx Context) Absf(x Float) Float {
	var frame = call.New()
	call.Arg(frame, x)
	var r_ret = call.Ret[Float](frame)
	ctx.API.utility.absf(r_ret.Uintptr(), frame.Array(0), 1)
	var ret = r_ret.Get()
	frame.Free()
	return ret
}

func (ctx Context) Absi(x Int) Int {
	var frame = call.New()
	call.Arg(frame, x)
	var r_ret = call.Ret[Int](frame)
	ctx.API.utility.absi(r_ret.Uintptr(), frame.Array(0), 1)
	var ret = r_ret.Get()
	frame.Free()
	return ret
}

func (ctx Context) Sign(x Variant) Variant {
	var frame = call.New()
	call.Arg(frame, mmm.Get(x))
	var r_ret = call.Ret[[3]uintptr](frame)
	ctx.API.utility.sign(r_ret.Uintptr(), frame.Array(0), 1)
	var ret = mmm.New[Variant](ctx.Lifetime, ctx.API, r_ret.Get())
	frame.Free()
	return ret
}

func (ctx Context) Signf(x Float) Float {
	var frame = call.New()
	call.Arg(frame, x)
	var r_ret = call.Ret[Float](frame)
	ctx.API.utility.signf(r_ret.Uintptr(), frame.Array(0), 1)
	var ret = r_ret.Get()
	frame.Free()
	return ret
}

func (ctx Context) Signi(x Int) Int {
	var frame = call.New()
	call.Arg(frame, x)
	var r_ret = call.Ret[Int](frame)
	ctx.API.utility.signi(r_ret.Uintptr(), frame.Array(0), 1)
	var ret = r_ret.Get()
	frame.Free()
	return ret
}

func (ctx Context) Snapped(x Variant, step Variant) Variant {
	var frame = call.New()
	call.Arg(frame, mmm.Get(x))
	call.Arg(frame, mmm.Get(step))
	var r_ret = call.Ret[[3]uintptr](frame)
	ctx.API.utility.snapped(r_ret.Uintptr(), frame.Array(0), 2)
	var ret = mmm.New[Variant](ctx.Lifetime, ctx.API, r_ret.Get())
	frame.Free()
	return ret
}

func (ctx Context) Snappedf(x Float, step Float) Float {
	var frame = call.New()
	call.Arg(frame, x)
	call.Arg(frame, step)
	var r_ret = call.Ret[Float](frame)
	ctx.API.utility.snappedf(r_ret.Uintptr(), frame.Array(0), 2)
	var ret = r_ret.Get()
	frame.Free()
	return ret
}

func (ctx Context) Snappedi(x Float, step Int) Int {
	var frame = call.New()
	call.Arg(frame, x)
	call.Arg(frame, step)
	var r_ret = call.Ret[Int](frame)
	ctx.API.utility.snappedi(r_ret.Uintptr(), frame.Array(0), 2)
	var ret = r_ret.Get()
	frame.Free()
	return ret
}

func (ctx Context) Pow(base Float, exp Float) Float {
	var frame = call.New()
	call.Arg(frame, base)
	call.Arg(frame, exp)
	var r_ret = call.Ret[Float](frame)
	ctx.API.utility.pow(r_ret.Uintptr(), frame.Array(0), 2)
	var ret = r_ret.Get()
	frame.Free()
	return ret
}

func (ctx Context) Log(x Float) Float {
	var frame = call.New()
	call.Arg(frame, x)
	var r_ret = call.Ret[Float](frame)
	ctx.API.utility.log(r_ret.Uintptr(), frame.Array(0), 1)
	var ret = r_ret.Get()
	frame.Free()
	return ret
}

func (ctx Context) Exp(x Float) Float {
	var frame = call.New()
	call.Arg(frame, x)
	var r_ret = call.Ret[Float](frame)
	ctx.API.utility.exp(r_ret.Uintptr(), frame.Array(0), 1)
	var ret = r_ret.Get()
	frame.Free()
	return ret
}

func (ctx Context) IsNan(x Float) bool {
	var frame = call.New()
	call.Arg(frame, x)
	var r_ret = call.Ret[bool](frame)
	ctx.API.utility.is_nan(r_ret.Uintptr(), frame.Array(0), 1)
	var ret = r_ret.Get()
	frame.Free()
	return ret
}

func (ctx Context) IsInf(x Float) bool {
	var frame = call.New()
	call.Arg(frame, x)
	var r_ret = call.Ret[bool](frame)
	ctx.API.utility.is_inf(r_ret.Uintptr(), frame.Array(0), 1)
	var ret = r_ret.Get()
	frame.Free()
	return ret
}

func (ctx Context) IsEqualApprox(a Float, b Float) bool {
	var frame = call.New()
	call.Arg(frame, a)
	call.Arg(frame, b)
	var r_ret = call.Ret[bool](frame)
	ctx.API.utility.is_equal_approx(r_ret.Uintptr(), frame.Array(0), 2)
	var ret = r_ret.Get()
	frame.Free()
	return ret
}

func (ctx Context) IsZeroApprox(x Float) bool {
	var frame = call.New()
	call.Arg(frame, x)
	var r_ret = call.Ret[bool](frame)
	ctx.API.utility.is_zero_approx(r_ret.Uintptr(), frame.Array(0), 1)
	var ret = r_ret.Get()
	frame.Free()
	return ret
}

func (ctx Context) IsFinite(x Float) bool {
	var frame = call.New()
	call.Arg(frame, x)
	var r_ret = call.Ret[bool](frame)
	ctx.API.utility.is_finite(r_ret.Uintptr(), frame.Array(0), 1)
	var ret = r_ret.Get()
	frame.Free()
	return ret
}

func (ctx Context) Ease(x Float, curve Float) Float {
	var frame = call.New()
	call.Arg(frame, x)
	call.Arg(frame, curve)
	var r_ret = call.Ret[Float](frame)
	ctx.API.utility.ease(r_ret.Uintptr(), frame.Array(0), 2)
	var ret = r_ret.Get()
	frame.Free()
	return ret
}

func (ctx Context) StepDecimals(x Float) Int {
	var frame = call.New()
	call.Arg(frame, x)
	var r_ret = call.Ret[Int](frame)
	ctx.API.utility.step_decimals(r_ret.Uintptr(), frame.Array(0), 1)
	var ret = r_ret.Get()
	frame.Free()
	return ret
}

func (ctx Context) Lerp(from Variant, to Variant, weight Variant) Variant {
	var frame = call.New()
	call.Arg(frame, mmm.Get(from))
	call.Arg(frame, mmm.Get(to))
	call.Arg(frame, mmm.Get(weight))
	var r_ret = call.Ret[[3]uintptr](frame)
	ctx.API.utility.lerp(r_ret.Uintptr(), frame.Array(0), 3)
	var ret = mmm.New[Variant](ctx.Lifetime, ctx.API, r_ret.Get())
	frame.Free()
	return ret
}

func (ctx Context) Lerpf(from Float, to Float, weight Float) Float {
	var frame = call.New()
	call.Arg(frame, from)
	call.Arg(frame, to)
	call.Arg(frame, weight)
	var r_ret = call.Ret[Float](frame)
	ctx.API.utility.lerpf(r_ret.Uintptr(), frame.Array(0), 3)
	var ret = r_ret.Get()
	frame.Free()
	return ret
}

func (ctx Context) CubicInterpolate(from Float, to Float, pre Float, post Float, weight Float) Float {
	var frame = call.New()
	call.Arg(frame, from)
	call.Arg(frame, to)
	call.Arg(frame, pre)
	call.Arg(frame, post)
	call.Arg(frame, weight)
	var r_ret = call.Ret[Float](frame)
	ctx.API.utility.cubic_interpolate(r_ret.Uintptr(), frame.Array(0), 5)
	var ret = r_ret.Get()
	frame.Free()
	return ret
}

func (ctx Context) CubicInterpolateAngle(from Float, to Float, pre Float, post Float, weight Float) Float {
	var frame = call.New()
	call.Arg(frame, from)
	call.Arg(frame, to)
	call.Arg(frame, pre)
	call.Arg(frame, post)
	call.Arg(frame, weight)
	var r_ret = call.Ret[Float](frame)
	ctx.API.utility.cubic_interpolate_angle(r_ret.Uintptr(), frame.Array(0), 5)
	var ret = r_ret.Get()
	frame.Free()
	return ret
}

func (ctx Context) CubicInterpolateInTime(from Float, to Float, pre Float, post Float, weight Float, to_t Float, pre_t Float, post_t Float) Float {
	var frame = call.New()
	call.Arg(frame, from)
	call.Arg(frame, to)
	call.Arg(frame, pre)
	call.Arg(frame, post)
	call.Arg(frame, weight)
	call.Arg(frame, to_t)
	call.Arg(frame, pre_t)
	call.Arg(frame, post_t)
	var r_ret = call.Ret[Float](frame)
	ctx.API.utility.cubic_interpolate_in_time(r_ret.Uintptr(), frame.Array(0), 8)
	var ret = r_ret.Get()
	frame.Free()
	return ret
}

func (ctx Context) CubicInterpolateAngleInTime(from Float, to Float, pre Float, post Float, weight Float, to_t Float, pre_t Float, post_t Float) Float {
	var frame = call.New()
	call.Arg(frame, from)
	call.Arg(frame, to)
	call.Arg(frame, pre)
	call.Arg(frame, post)
	call.Arg(frame, weight)
	call.Arg(frame, to_t)
	call.Arg(frame, pre_t)
	call.Arg(frame, post_t)
	var r_ret = call.Ret[Float](frame)
	ctx.API.utility.cubic_interpolate_angle_in_time(r_ret.Uintptr(), frame.Array(0), 8)
	var ret = r_ret.Get()
	frame.Free()
	return ret
}

func (ctx Context) BezierInterpolate(start Float, control_1 Float, control_2 Float, end Float, t Float) Float {
	var frame = call.New()
	call.Arg(frame, start)
	call.Arg(frame, control_1)
	call.Arg(frame, control_2)
	call.Arg(frame, end)
	call.Arg(frame, t)
	var r_ret = call.Ret[Float](frame)
	ctx.API.utility.bezier_interpolate(r_ret.Uintptr(), frame.Array(0), 5)
	var ret = r_ret.Get()
	frame.Free()
	return ret
}

func (ctx Context) BezierDerivative(start Float, control_1 Float, control_2 Float, end Float, t Float) Float {
	var frame = call.New()
	call.Arg(frame, start)
	call.Arg(frame, control_1)
	call.Arg(frame, control_2)
	call.Arg(frame, end)
	call.Arg(frame, t)
	var r_ret = call.Ret[Float](frame)
	ctx.API.utility.bezier_derivative(r_ret.Uintptr(), frame.Array(0), 5)
	var ret = r_ret.Get()
	frame.Free()
	return ret
}

func (ctx Context) AngleDifference(from Float, to Float) Float {
	var frame = call.New()
	call.Arg(frame, from)
	call.Arg(frame, to)
	var r_ret = call.Ret[Float](frame)
	ctx.API.utility.angle_difference(r_ret.Uintptr(), frame.Array(0), 2)
	var ret = r_ret.Get()
	frame.Free()
	return ret
}

func (ctx Context) LerpAngle(from Float, to Float, weight Float) Float {
	var frame = call.New()
	call.Arg(frame, from)
	call.Arg(frame, to)
	call.Arg(frame, weight)
	var r_ret = call.Ret[Float](frame)
	ctx.API.utility.lerp_angle(r_ret.Uintptr(), frame.Array(0), 3)
	var ret = r_ret.Get()
	frame.Free()
	return ret
}

func (ctx Context) InverseLerp(from Float, to Float, weight Float) Float {
	var frame = call.New()
	call.Arg(frame, from)
	call.Arg(frame, to)
	call.Arg(frame, weight)
	var r_ret = call.Ret[Float](frame)
	ctx.API.utility.inverse_lerp(r_ret.Uintptr(), frame.Array(0), 3)
	var ret = r_ret.Get()
	frame.Free()
	return ret
}

func (ctx Context) Remap(value Float, istart Float, istop Float, ostart Float, ostop Float) Float {
	var frame = call.New()
	call.Arg(frame, value)
	call.Arg(frame, istart)
	call.Arg(frame, istop)
	call.Arg(frame, ostart)
	call.Arg(frame, ostop)
	var r_ret = call.Ret[Float](frame)
	ctx.API.utility.remap(r_ret.Uintptr(), frame.Array(0), 5)
	var ret = r_ret.Get()
	frame.Free()
	return ret
}

func (ctx Context) Smoothstep(from Float, to Float, x Float) Float {
	var frame = call.New()
	call.Arg(frame, from)
	call.Arg(frame, to)
	call.Arg(frame, x)
	var r_ret = call.Ret[Float](frame)
	ctx.API.utility.smoothstep(r_ret.Uintptr(), frame.Array(0), 3)
	var ret = r_ret.Get()
	frame.Free()
	return ret
}

func (ctx Context) MoveToward(from Float, to Float, delta Float) Float {
	var frame = call.New()
	call.Arg(frame, from)
	call.Arg(frame, to)
	call.Arg(frame, delta)
	var r_ret = call.Ret[Float](frame)
	ctx.API.utility.move_toward(r_ret.Uintptr(), frame.Array(0), 3)
	var ret = r_ret.Get()
	frame.Free()
	return ret
}

func (ctx Context) RotateToward(from Float, to Float, delta Float) Float {
	var frame = call.New()
	call.Arg(frame, from)
	call.Arg(frame, to)
	call.Arg(frame, delta)
	var r_ret = call.Ret[Float](frame)
	ctx.API.utility.rotate_toward(r_ret.Uintptr(), frame.Array(0), 3)
	var ret = r_ret.Get()
	frame.Free()
	return ret
}

func (ctx Context) DegToRad(deg Float) Float {
	var frame = call.New()
	call.Arg(frame, deg)
	var r_ret = call.Ret[Float](frame)
	ctx.API.utility.deg_to_rad(r_ret.Uintptr(), frame.Array(0), 1)
	var ret = r_ret.Get()
	frame.Free()
	return ret
}

func (ctx Context) RadToDeg(rad Float) Float {
	var frame = call.New()
	call.Arg(frame, rad)
	var r_ret = call.Ret[Float](frame)
	ctx.API.utility.rad_to_deg(r_ret.Uintptr(), frame.Array(0), 1)
	var ret = r_ret.Get()
	frame.Free()
	return ret
}

func (ctx Context) LinearToDb(lin Float) Float {
	var frame = call.New()
	call.Arg(frame, lin)
	var r_ret = call.Ret[Float](frame)
	ctx.API.utility.linear_to_db(r_ret.Uintptr(), frame.Array(0), 1)
	var ret = r_ret.Get()
	frame.Free()
	return ret
}

func (ctx Context) DbToLinear(db Float) Float {
	var frame = call.New()
	call.Arg(frame, db)
	var r_ret = call.Ret[Float](frame)
	ctx.API.utility.db_to_linear(r_ret.Uintptr(), frame.Array(0), 1)
	var ret = r_ret.Get()
	frame.Free()
	return ret
}

func (ctx Context) Wrap(value Variant, min Variant, max Variant) Variant {
	var frame = call.New()
	call.Arg(frame, mmm.Get(value))
	call.Arg(frame, mmm.Get(min))
	call.Arg(frame, mmm.Get(max))
	var r_ret = call.Ret[[3]uintptr](frame)
	ctx.API.utility.wrap(r_ret.Uintptr(), frame.Array(0), 3)
	var ret = mmm.New[Variant](ctx.Lifetime, ctx.API, r_ret.Get())
	frame.Free()
	return ret
}

func (ctx Context) Wrapi(value Int, min Int, max Int) Int {
	var frame = call.New()
	call.Arg(frame, value)
	call.Arg(frame, min)
	call.Arg(frame, max)
	var r_ret = call.Ret[Int](frame)
	ctx.API.utility.wrapi(r_ret.Uintptr(), frame.Array(0), 3)
	var ret = r_ret.Get()
	frame.Free()
	return ret
}

func (ctx Context) Wrapf(value Float, min Float, max Float) Float {
	var frame = call.New()
	call.Arg(frame, value)
	call.Arg(frame, min)
	call.Arg(frame, max)
	var r_ret = call.Ret[Float](frame)
	ctx.API.utility.wrapf(r_ret.Uintptr(), frame.Array(0), 3)
	var ret = r_ret.Get()
	frame.Free()
	return ret
}

func (ctx Context) Max(arg1 Variant, arg2 Variant) Variant {
	var frame = call.New()
	call.Arg(frame, mmm.Get(arg1))
	call.Arg(frame, mmm.Get(arg2))
	var r_ret = call.Ret[[3]uintptr](frame)
	ctx.API.utility.max(r_ret.Uintptr(), frame.Array(0), 2)
	var ret = mmm.New[Variant](ctx.Lifetime, ctx.API, r_ret.Get())
	frame.Free()
	return ret
}

func (ctx Context) Maxi(a Int, b Int) Int {
	var frame = call.New()
	call.Arg(frame, a)
	call.Arg(frame, b)
	var r_ret = call.Ret[Int](frame)
	ctx.API.utility.maxi(r_ret.Uintptr(), frame.Array(0), 2)
	var ret = r_ret.Get()
	frame.Free()
	return ret
}

func (ctx Context) Maxf(a Float, b Float) Float {
	var frame = call.New()
	call.Arg(frame, a)
	call.Arg(frame, b)
	var r_ret = call.Ret[Float](frame)
	ctx.API.utility.maxf(r_ret.Uintptr(), frame.Array(0), 2)
	var ret = r_ret.Get()
	frame.Free()
	return ret
}

func (ctx Context) Min(arg1 Variant, arg2 Variant) Variant {
	var frame = call.New()
	call.Arg(frame, mmm.Get(arg1))
	call.Arg(frame, mmm.Get(arg2))
	var r_ret = call.Ret[[3]uintptr](frame)
	ctx.API.utility.min(r_ret.Uintptr(), frame.Array(0), 2)
	var ret = mmm.New[Variant](ctx.Lifetime, ctx.API, r_ret.Get())
	frame.Free()
	return ret
}

func (ctx Context) Mini(a Int, b Int) Int {
	var frame = call.New()
	call.Arg(frame, a)
	call.Arg(frame, b)
	var r_ret = call.Ret[Int](frame)
	ctx.API.utility.mini(r_ret.Uintptr(), frame.Array(0), 2)
	var ret = r_ret.Get()
	frame.Free()
	return ret
}

func (ctx Context) Minf(a Float, b Float) Float {
	var frame = call.New()
	call.Arg(frame, a)
	call.Arg(frame, b)
	var r_ret = call.Ret[Float](frame)
	ctx.API.utility.minf(r_ret.Uintptr(), frame.Array(0), 2)
	var ret = r_ret.Get()
	frame.Free()
	return ret
}

func (ctx Context) Clamp(value Variant, min Variant, max Variant) Variant {
	var frame = call.New()
	call.Arg(frame, mmm.Get(value))
	call.Arg(frame, mmm.Get(min))
	call.Arg(frame, mmm.Get(max))
	var r_ret = call.Ret[[3]uintptr](frame)
	ctx.API.utility.clamp(r_ret.Uintptr(), frame.Array(0), 3)
	var ret = mmm.New[Variant](ctx.Lifetime, ctx.API, r_ret.Get())
	frame.Free()
	return ret
}

func (ctx Context) Clampi(value Int, min Int, max Int) Int {
	var frame = call.New()
	call.Arg(frame, value)
	call.Arg(frame, min)
	call.Arg(frame, max)
	var r_ret = call.Ret[Int](frame)
	ctx.API.utility.clampi(r_ret.Uintptr(), frame.Array(0), 3)
	var ret = r_ret.Get()
	frame.Free()
	return ret
}

func (ctx Context) Clampf(value Float, min Float, max Float) Float {
	var frame = call.New()
	call.Arg(frame, value)
	call.Arg(frame, min)
	call.Arg(frame, max)
	var r_ret = call.Ret[Float](frame)
	ctx.API.utility.clampf(r_ret.Uintptr(), frame.Array(0), 3)
	var ret = r_ret.Get()
	frame.Free()
	return ret
}

func (ctx Context) NearestPo2(value Int) Int {
	var frame = call.New()
	call.Arg(frame, value)
	var r_ret = call.Ret[Int](frame)
	ctx.API.utility.nearest_po2(r_ret.Uintptr(), frame.Array(0), 1)
	var ret = r_ret.Get()
	frame.Free()
	return ret
}

func (ctx Context) Pingpong(value Float, length Float) Float {
	var frame = call.New()
	call.Arg(frame, value)
	call.Arg(frame, length)
	var r_ret = call.Ret[Float](frame)
	ctx.API.utility.pingpong(r_ret.Uintptr(), frame.Array(0), 2)
	var ret = r_ret.Get()
	frame.Free()
	return ret
}

func (ctx Context) Randomize() {
	var frame = call.New()
	var r_ret call.Nil
	ctx.API.utility.randomize(r_ret.Uintptr(), frame.Array(0), 0)
	frame.Free()
}

func (ctx Context) Randi() Int {
	var frame = call.New()
	var r_ret = call.Ret[Int](frame)
	ctx.API.utility.randi(r_ret.Uintptr(), frame.Array(0), 0)
	var ret = r_ret.Get()
	frame.Free()
	return ret
}

func (ctx Context) Randf() Float {
	var frame = call.New()
	var r_ret = call.Ret[Float](frame)
	ctx.API.utility.randf(r_ret.Uintptr(), frame.Array(0), 0)
	var ret = r_ret.Get()
	frame.Free()
	return ret
}

func (ctx Context) RandiRange(from Int, to Int) Int {
	var frame = call.New()
	call.Arg(frame, from)
	call.Arg(frame, to)
	var r_ret = call.Ret[Int](frame)
	ctx.API.utility.randi_range(r_ret.Uintptr(), frame.Array(0), 2)
	var ret = r_ret.Get()
	frame.Free()
	return ret
}

func (ctx Context) RandfRange(from Float, to Float) Float {
	var frame = call.New()
	call.Arg(frame, from)
	call.Arg(frame, to)
	var r_ret = call.Ret[Float](frame)
	ctx.API.utility.randf_range(r_ret.Uintptr(), frame.Array(0), 2)
	var ret = r_ret.Get()
	frame.Free()
	return ret
}

func (ctx Context) Randfn(mean Float, deviation Float) Float {
	var frame = call.New()
	call.Arg(frame, mean)
	call.Arg(frame, deviation)
	var r_ret = call.Ret[Float](frame)
	ctx.API.utility.randfn(r_ret.Uintptr(), frame.Array(0), 2)
	var ret = r_ret.Get()
	frame.Free()
	return ret
}

func (ctx Context) Seed(base Int) {
	var frame = call.New()
	call.Arg(frame, base)
	var r_ret call.Nil
	ctx.API.utility.seed(r_ret.Uintptr(), frame.Array(0), 1)
	frame.Free()
}

func (ctx Context) RandFromSeed(seed Int) PackedInt64Array {
	var frame = call.New()
	call.Arg(frame, seed)
	var r_ret = call.Ret[[2]uintptr](frame)
	ctx.API.utility.rand_from_seed(r_ret.Uintptr(), frame.Array(0), 1)
	var ret = mmm.New[PackedInt64Array](ctx.Lifetime, ctx.API, r_ret.Get())
	frame.Free()
	return ret
}

func (ctx Context) Weakref(obj Variant) Variant {
	var frame = call.New()
	call.Arg(frame, mmm.Get(obj))
	var r_ret = call.Ret[[3]uintptr](frame)
	ctx.API.utility.weakref(r_ret.Uintptr(), frame.Array(0), 1)
	var ret = mmm.New[Variant](ctx.Lifetime, ctx.API, r_ret.Get())
	frame.Free()
	return ret
}

func (ctx Context) Typeof(variable Variant) Int {
	var frame = call.New()
	call.Arg(frame, mmm.Get(variable))
	var r_ret = call.Ret[Int](frame)
	ctx.API.utility.typeof(r_ret.Uintptr(), frame.Array(0), 1)
	var ret = r_ret.Get()
	frame.Free()
	return ret
}

func (ctx Context) TypeConvert(variant Variant, atype Int) Variant {
	var frame = call.New()
	call.Arg(frame, mmm.Get(variant))
	call.Arg(frame, atype)
	var r_ret = call.Ret[[3]uintptr](frame)
	ctx.API.utility.type_convert(r_ret.Uintptr(), frame.Array(0), 2)
	var ret = mmm.New[Variant](ctx.Lifetime, ctx.API, r_ret.Get())
	frame.Free()
	return ret
}

func (ctx Context) Str(arg1 Variant) String {
	var frame = call.New()
	call.Arg(frame, mmm.Get(arg1))
	var r_ret = call.Ret[uintptr](frame)
	ctx.API.utility.str(r_ret.Uintptr(), frame.Array(0), 1)
	var ret = mmm.New[String](ctx.Lifetime, ctx.API, r_ret.Get())
	frame.Free()
	return ret
}

func (ctx Context) ErrorString(error Int) String {
	var frame = call.New()
	call.Arg(frame, error)
	var r_ret = call.Ret[uintptr](frame)
	ctx.API.utility.error_string(r_ret.Uintptr(), frame.Array(0), 1)
	var ret = mmm.New[String](ctx.Lifetime, ctx.API, r_ret.Get())
	frame.Free()
	return ret
}

func (ctx Context) TypeToString(atype Int) String {
	var frame = call.New()
	call.Arg(frame, atype)
	var r_ret = call.Ret[uintptr](frame)
	ctx.API.utility.type_string(r_ret.Uintptr(), frame.Array(0), 1)
	var ret = mmm.New[String](ctx.Lifetime, ctx.API, r_ret.Get())
	frame.Free()
	return ret
}

func (ctx Context) Print(arg1 Variant) {
	var frame = call.New()
	call.Arg(frame, mmm.Get(arg1))
	var r_ret call.Nil
	ctx.API.utility.print(r_ret.Uintptr(), frame.Array(0), 1)
	frame.Free()
}

func (ctx Context) PrintRich(arg1 Variant) {
	var frame = call.New()
	call.Arg(frame, mmm.Get(arg1))
	var r_ret call.Nil
	ctx.API.utility.print_rich(r_ret.Uintptr(), frame.Array(0), 1)
	frame.Free()
}

func (ctx Context) Printerr(arg1 Variant) {
	var frame = call.New()
	call.Arg(frame, mmm.Get(arg1))
	var r_ret call.Nil
	ctx.API.utility.printerr(r_ret.Uintptr(), frame.Array(0), 1)
	frame.Free()
}

func (ctx Context) Printt(arg1 Variant) {
	var frame = call.New()
	call.Arg(frame, mmm.Get(arg1))
	var r_ret call.Nil
	ctx.API.utility.printt(r_ret.Uintptr(), frame.Array(0), 1)
	frame.Free()
}

func (ctx Context) Prints(arg1 Variant) {
	var frame = call.New()
	call.Arg(frame, mmm.Get(arg1))
	var r_ret call.Nil
	ctx.API.utility.prints(r_ret.Uintptr(), frame.Array(0), 1)
	frame.Free()
}

func (ctx Context) Printraw(arg1 Variant) {
	var frame = call.New()
	call.Arg(frame, mmm.Get(arg1))
	var r_ret call.Nil
	ctx.API.utility.printraw(r_ret.Uintptr(), frame.Array(0), 1)
	frame.Free()
}

func (ctx Context) PrintVerbose(arg1 Variant) {
	var frame = call.New()
	call.Arg(frame, mmm.Get(arg1))
	var r_ret call.Nil
	ctx.API.utility.print_verbose(r_ret.Uintptr(), frame.Array(0), 1)
	frame.Free()
}

func (ctx Context) PushError(arg1 Variant) {
	var frame = call.New()
	call.Arg(frame, mmm.Get(arg1))
	var r_ret call.Nil
	ctx.API.utility.push_error(r_ret.Uintptr(), frame.Array(0), 1)
	frame.Free()
}

func (ctx Context) PushWarning(arg1 Variant) {
	var frame = call.New()
	call.Arg(frame, mmm.Get(arg1))
	var r_ret call.Nil
	ctx.API.utility.push_warning(r_ret.Uintptr(), frame.Array(0), 1)
	frame.Free()
}

func (ctx Context) VarToStr(variable Variant) String {
	var frame = call.New()
	call.Arg(frame, mmm.Get(variable))
	var r_ret = call.Ret[uintptr](frame)
	ctx.API.utility.var_to_str(r_ret.Uintptr(), frame.Array(0), 1)
	var ret = mmm.New[String](ctx.Lifetime, ctx.API, r_ret.Get())
	frame.Free()
	return ret
}

func (ctx Context) StrToVar(s String) Variant {
	var frame = call.New()
	call.Arg(frame, mmm.Get(s))
	var r_ret = call.Ret[[3]uintptr](frame)
	ctx.API.utility.str_to_var(r_ret.Uintptr(), frame.Array(0), 1)
	var ret = mmm.New[Variant](ctx.Lifetime, ctx.API, r_ret.Get())
	frame.Free()
	return ret
}

func (ctx Context) VarToBytes(variable Variant) PackedByteArray {
	var frame = call.New()
	call.Arg(frame, mmm.Get(variable))
	var r_ret = call.Ret[[2]uintptr](frame)
	ctx.API.utility.var_to_bytes(r_ret.Uintptr(), frame.Array(0), 1)
	var ret = mmm.New[PackedByteArray](ctx.Lifetime, ctx.API, r_ret.Get())
	frame.Free()
	return ret
}

func (ctx Context) BytesToVar(bytes PackedByteArray) Variant {
	var frame = call.New()
	call.Arg(frame, mmm.Get(bytes))
	var r_ret = call.Ret[[3]uintptr](frame)
	ctx.API.utility.bytes_to_var(r_ret.Uintptr(), frame.Array(0), 1)
	var ret = mmm.New[Variant](ctx.Lifetime, ctx.API, r_ret.Get())
	frame.Free()
	return ret
}

func (ctx Context) VarToBytesWithObjects(variable Variant) PackedByteArray {
	var frame = call.New()
	call.Arg(frame, mmm.Get(variable))
	var r_ret = call.Ret[[2]uintptr](frame)
	ctx.API.utility.var_to_bytes_with_objects(r_ret.Uintptr(), frame.Array(0), 1)
	var ret = mmm.New[PackedByteArray](ctx.Lifetime, ctx.API, r_ret.Get())
	frame.Free()
	return ret
}

func (ctx Context) BytesToVarWithObjects(bytes PackedByteArray) Variant {
	var frame = call.New()
	call.Arg(frame, mmm.Get(bytes))
	var r_ret = call.Ret[[3]uintptr](frame)
	ctx.API.utility.bytes_to_var_with_objects(r_ret.Uintptr(), frame.Array(0), 1)
	var ret = mmm.New[Variant](ctx.Lifetime, ctx.API, r_ret.Get())
	frame.Free()
	return ret
}

func (ctx Context) Hash(variable Variant) Int {
	var frame = call.New()
	call.Arg(frame, mmm.Get(variable))
	var r_ret = call.Ret[Int](frame)
	ctx.API.utility.hash(r_ret.Uintptr(), frame.Array(0), 1)
	var ret = r_ret.Get()
	frame.Free()
	return ret
}

func (ctx Context) InstanceFromId(instance_id Int) Object {
	var frame = call.New()
	call.Arg(frame, instance_id)
	var r_ret = call.Ret[Object](frame)
	ctx.API.utility.instance_from_id(r_ret.Uintptr(), frame.Array(0), 1)
	var ret = r_ret.Get()
	frame.Free()
	return ret
}

func (ctx Context) IsInstanceIdValid(id Int) bool {
	var frame = call.New()
	call.Arg(frame, id)
	var r_ret = call.Ret[bool](frame)
	ctx.API.utility.is_instance_id_valid(r_ret.Uintptr(), frame.Array(0), 1)
	var ret = r_ret.Get()
	frame.Free()
	return ret
}

func (ctx Context) IsInstanceValid(instance Variant) bool {
	var frame = call.New()
	call.Arg(frame, mmm.Get(instance))
	var r_ret = call.Ret[bool](frame)
	ctx.API.utility.is_instance_valid(r_ret.Uintptr(), frame.Array(0), 1)
	var ret = r_ret.Get()
	frame.Free()
	return ret
}

func (ctx Context) RidAllocateId() Int {
	var frame = call.New()
	var r_ret = call.Ret[Int](frame)
	ctx.API.utility.rid_allocate_id(r_ret.Uintptr(), frame.Array(0), 0)
	var ret = r_ret.Get()
	frame.Free()
	return ret
}

func (ctx Context) RidFromInt64(base Int) RID {
	var frame = call.New()
	call.Arg(frame, base)
	var r_ret = call.Ret[RID](frame)
	ctx.API.utility.rid_from_int64(r_ret.Uintptr(), frame.Array(0), 1)
	var ret = r_ret.Get()
	frame.Free()
	return ret
}

func (ctx Context) IsSame(a Variant, b Variant) bool {
	var frame = call.New()
	call.Arg(frame, mmm.Get(a))
	call.Arg(frame, mmm.Get(b))
	var r_ret = call.Ret[bool](frame)
	ctx.API.utility.is_same(r_ret.Uintptr(), frame.Array(0), 2)
	var ret = r_ret.Get()
	frame.Free()
	return ret
}

type Vector2Axis int64

type Vector2iAxis int64

type Vector3Axis int64

type Vector3iAxis int64

type Vector4Axis int64

type Vector4iAxis int64

type ProjectionPlanes int64

func (self String) CasecmpTo(to String) Int {
	var selfPtr = self
	var frame = call.New()
	call.Arg(frame, mmm.Get(to))
	var r_ret = call.Ret[Int](frame)
	var p_self = call.Arg(frame, mmm.Get(selfPtr))
	mmm.API(selfPtr).builtin.String.casecmp_to(p_self.Uintptr(), frame.Array(0), r_ret.Uintptr(), 1)
	var ret = r_ret.Get()
	frame.Free()
	return ret
}

func (self String) NocasecmpTo(to String) Int {
	var selfPtr = self
	var frame = call.New()
	call.Arg(frame, mmm.Get(to))
	var r_ret = call.Ret[Int](frame)
	var p_self = call.Arg(frame, mmm.Get(selfPtr))
	mmm.API(selfPtr).builtin.String.nocasecmp_to(p_self.Uintptr(), frame.Array(0), r_ret.Uintptr(), 1)
	var ret = r_ret.Get()
	frame.Free()
	return ret
}

func (self String) NaturalcasecmpTo(to String) Int {
	var selfPtr = self
	var frame = call.New()
	call.Arg(frame, mmm.Get(to))
	var r_ret = call.Ret[Int](frame)
	var p_self = call.Arg(frame, mmm.Get(selfPtr))
	mmm.API(selfPtr).builtin.String.naturalcasecmp_to(p_self.Uintptr(), frame.Array(0), r_ret.Uintptr(), 1)
	var ret = r_ret.Get()
	frame.Free()
	return ret
}

func (self String) NaturalnocasecmpTo(to String) Int {
	var selfPtr = self
	var frame = call.New()
	call.Arg(frame, mmm.Get(to))
	var r_ret = call.Ret[Int](frame)
	var p_self = call.Arg(frame, mmm.Get(selfPtr))
	mmm.API(selfPtr).builtin.String.naturalnocasecmp_to(p_self.Uintptr(), frame.Array(0), r_ret.Uintptr(), 1)
	var ret = r_ret.Get()
	frame.Free()
	return ret
}

func (self String) Length() Int {
	var selfPtr = self
	var frame = call.New()
	var r_ret = call.Ret[Int](frame)
	var p_self = call.Arg(frame, mmm.Get(selfPtr))
	mmm.API(selfPtr).builtin.String.length(p_self.Uintptr(), frame.Array(0), r_ret.Uintptr(), 0)
	var ret = r_ret.Get()
	frame.Free()
	return ret
}

func (self String) Substr(ctx Context, from Int, len Int) String {
	var selfPtr = self
	var frame = call.New()
	call.Arg(frame, from)
	call.Arg(frame, len)
	var r_ret = call.Ret[uintptr](frame)
	var p_self = call.Arg(frame, mmm.Get(selfPtr))
	mmm.API(selfPtr).builtin.String.substr(p_self.Uintptr(), frame.Array(0), r_ret.Uintptr(), 2)
	var ret = mmm.New[String](ctx.Lifetime, ctx.API, r_ret.Get())
	frame.Free()
	return ret
}

func (self String) GetSlice(ctx Context, delimiter String, slice Int) String {
	var selfPtr = self
	var frame = call.New()
	call.Arg(frame, mmm.Get(delimiter))
	call.Arg(frame, slice)
	var r_ret = call.Ret[uintptr](frame)
	var p_self = call.Arg(frame, mmm.Get(selfPtr))
	mmm.API(selfPtr).builtin.String.get_slice(p_self.Uintptr(), frame.Array(0), r_ret.Uintptr(), 2)
	var ret = mmm.New[String](ctx.Lifetime, ctx.API, r_ret.Get())
	frame.Free()
	return ret
}

func (self String) GetSlicec(ctx Context, delimiter Int, slice Int) String {
	var selfPtr = self
	var frame = call.New()
	call.Arg(frame, delimiter)
	call.Arg(frame, slice)
	var r_ret = call.Ret[uintptr](frame)
	var p_self = call.Arg(frame, mmm.Get(selfPtr))
	mmm.API(selfPtr).builtin.String.get_slicec(p_self.Uintptr(), frame.Array(0), r_ret.Uintptr(), 2)
	var ret = mmm.New[String](ctx.Lifetime, ctx.API, r_ret.Get())
	frame.Free()
	return ret
}

func (self String) GetSliceCount(delimiter String) Int {
	var selfPtr = self
	var frame = call.New()
	call.Arg(frame, mmm.Get(delimiter))
	var r_ret = call.Ret[Int](frame)
	var p_self = call.Arg(frame, mmm.Get(selfPtr))
	mmm.API(selfPtr).builtin.String.get_slice_count(p_self.Uintptr(), frame.Array(0), r_ret.Uintptr(), 1)
	var ret = r_ret.Get()
	frame.Free()
	return ret
}

func (self String) Find(what String, from Int) Int {
	var selfPtr = self
	var frame = call.New()
	call.Arg(frame, mmm.Get(what))
	call.Arg(frame, from)
	var r_ret = call.Ret[Int](frame)
	var p_self = call.Arg(frame, mmm.Get(selfPtr))
	mmm.API(selfPtr).builtin.String.find(p_self.Uintptr(), frame.Array(0), r_ret.Uintptr(), 2)
	var ret = r_ret.Get()
	frame.Free()
	return ret
}

func (self String) Count(what String, from Int, to Int) Int {
	var selfPtr = self
	var frame = call.New()
	call.Arg(frame, mmm.Get(what))
	call.Arg(frame, from)
	call.Arg(frame, to)
	var r_ret = call.Ret[Int](frame)
	var p_self = call.Arg(frame, mmm.Get(selfPtr))
	mmm.API(selfPtr).builtin.String.count(p_self.Uintptr(), frame.Array(0), r_ret.Uintptr(), 3)
	var ret = r_ret.Get()
	frame.Free()
	return ret
}

func (self String) Countn(what String, from Int, to Int) Int {
	var selfPtr = self
	var frame = call.New()
	call.Arg(frame, mmm.Get(what))
	call.Arg(frame, from)
	call.Arg(frame, to)
	var r_ret = call.Ret[Int](frame)
	var p_self = call.Arg(frame, mmm.Get(selfPtr))
	mmm.API(selfPtr).builtin.String.countn(p_self.Uintptr(), frame.Array(0), r_ret.Uintptr(), 3)
	var ret = r_ret.Get()
	frame.Free()
	return ret
}

func (self String) Findn(what String, from Int) Int {
	var selfPtr = self
	var frame = call.New()
	call.Arg(frame, mmm.Get(what))
	call.Arg(frame, from)
	var r_ret = call.Ret[Int](frame)
	var p_self = call.Arg(frame, mmm.Get(selfPtr))
	mmm.API(selfPtr).builtin.String.findn(p_self.Uintptr(), frame.Array(0), r_ret.Uintptr(), 2)
	var ret = r_ret.Get()
	frame.Free()
	return ret
}

func (self String) Rfind(what String, from Int) Int {
	var selfPtr = self
	var frame = call.New()
	call.Arg(frame, mmm.Get(what))
	call.Arg(frame, from)
	var r_ret = call.Ret[Int](frame)
	var p_self = call.Arg(frame, mmm.Get(selfPtr))
	mmm.API(selfPtr).builtin.String.rfind(p_self.Uintptr(), frame.Array(0), r_ret.Uintptr(), 2)
	var ret = r_ret.Get()
	frame.Free()
	return ret
}

func (self String) Rfindn(what String, from Int) Int {
	var selfPtr = self
	var frame = call.New()
	call.Arg(frame, mmm.Get(what))
	call.Arg(frame, from)
	var r_ret = call.Ret[Int](frame)
	var p_self = call.Arg(frame, mmm.Get(selfPtr))
	mmm.API(selfPtr).builtin.String.rfindn(p_self.Uintptr(), frame.Array(0), r_ret.Uintptr(), 2)
	var ret = r_ret.Get()
	frame.Free()
	return ret
}

func (self String) Match(expr String) bool {
	var selfPtr = self
	var frame = call.New()
	call.Arg(frame, mmm.Get(expr))
	var r_ret = call.Ret[bool](frame)
	var p_self = call.Arg(frame, mmm.Get(selfPtr))
	mmm.API(selfPtr).builtin.String.match(p_self.Uintptr(), frame.Array(0), r_ret.Uintptr(), 1)
	var ret = r_ret.Get()
	frame.Free()
	return ret
}

func (self String) Matchn(expr String) bool {
	var selfPtr = self
	var frame = call.New()
	call.Arg(frame, mmm.Get(expr))
	var r_ret = call.Ret[bool](frame)
	var p_self = call.Arg(frame, mmm.Get(selfPtr))
	mmm.API(selfPtr).builtin.String.matchn(p_self.Uintptr(), frame.Array(0), r_ret.Uintptr(), 1)
	var ret = r_ret.Get()
	frame.Free()
	return ret
}

func (self String) BeginsWith(text String) bool {
	var selfPtr = self
	var frame = call.New()
	call.Arg(frame, mmm.Get(text))
	var r_ret = call.Ret[bool](frame)
	var p_self = call.Arg(frame, mmm.Get(selfPtr))
	mmm.API(selfPtr).builtin.String.begins_with(p_self.Uintptr(), frame.Array(0), r_ret.Uintptr(), 1)
	var ret = r_ret.Get()
	frame.Free()
	return ret
}

func (self String) EndsWith(text String) bool {
	var selfPtr = self
	var frame = call.New()
	call.Arg(frame, mmm.Get(text))
	var r_ret = call.Ret[bool](frame)
	var p_self = call.Arg(frame, mmm.Get(selfPtr))
	mmm.API(selfPtr).builtin.String.ends_with(p_self.Uintptr(), frame.Array(0), r_ret.Uintptr(), 1)
	var ret = r_ret.Get()
	frame.Free()
	return ret
}

func (self String) IsSubsequenceOf(text String) bool {
	var selfPtr = self
	var frame = call.New()
	call.Arg(frame, mmm.Get(text))
	var r_ret = call.Ret[bool](frame)
	var p_self = call.Arg(frame, mmm.Get(selfPtr))
	mmm.API(selfPtr).builtin.String.is_subsequence_of(p_self.Uintptr(), frame.Array(0), r_ret.Uintptr(), 1)
	var ret = r_ret.Get()
	frame.Free()
	return ret
}

func (self String) IsSubsequenceOfn(text String) bool {
	var selfPtr = self
	var frame = call.New()
	call.Arg(frame, mmm.Get(text))
	var r_ret = call.Ret[bool](frame)
	var p_self = call.Arg(frame, mmm.Get(selfPtr))
	mmm.API(selfPtr).builtin.String.is_subsequence_ofn(p_self.Uintptr(), frame.Array(0), r_ret.Uintptr(), 1)
	var ret = r_ret.Get()
	frame.Free()
	return ret
}

func (self String) Bigrams(ctx Context) PackedStringArray {
	var selfPtr = self
	var frame = call.New()
	var r_ret = call.Ret[[2]uintptr](frame)
	var p_self = call.Arg(frame, mmm.Get(selfPtr))
	mmm.API(selfPtr).builtin.String.bigrams(p_self.Uintptr(), frame.Array(0), r_ret.Uintptr(), 0)
	var ret = mmm.New[PackedStringArray](ctx.Lifetime, ctx.API, r_ret.Get())
	frame.Free()
	return ret
}

func (self String) Similarity(text String) Float {
	var selfPtr = self
	var frame = call.New()
	call.Arg(frame, mmm.Get(text))
	var r_ret = call.Ret[Float](frame)
	var p_self = call.Arg(frame, mmm.Get(selfPtr))
	mmm.API(selfPtr).builtin.String.similarity(p_self.Uintptr(), frame.Array(0), r_ret.Uintptr(), 1)
	var ret = r_ret.Get()
	frame.Free()
	return ret
}

func (self String) Format(ctx Context, values Variant, placeholder String) String {
	var selfPtr = self
	var frame = call.New()
	call.Arg(frame, mmm.Get(values))
	call.Arg(frame, mmm.Get(placeholder))
	var r_ret = call.Ret[uintptr](frame)
	var p_self = call.Arg(frame, mmm.Get(selfPtr))
	mmm.API(selfPtr).builtin.String.format(p_self.Uintptr(), frame.Array(0), r_ret.Uintptr(), 2)
	var ret = mmm.New[String](ctx.Lifetime, ctx.API, r_ret.Get())
	frame.Free()
	return ret
}

func (self String) Replace(ctx Context, what String, forwhat String) String {
	var selfPtr = self
	var frame = call.New()
	call.Arg(frame, mmm.Get(what))
	call.Arg(frame, mmm.Get(forwhat))
	var r_ret = call.Ret[uintptr](frame)
	var p_self = call.Arg(frame, mmm.Get(selfPtr))
	mmm.API(selfPtr).builtin.String.replace(p_self.Uintptr(), frame.Array(0), r_ret.Uintptr(), 2)
	var ret = mmm.New[String](ctx.Lifetime, ctx.API, r_ret.Get())
	frame.Free()
	return ret
}

func (self String) Replacen(ctx Context, what String, forwhat String) String {
	var selfPtr = self
	var frame = call.New()
	call.Arg(frame, mmm.Get(what))
	call.Arg(frame, mmm.Get(forwhat))
	var r_ret = call.Ret[uintptr](frame)
	var p_self = call.Arg(frame, mmm.Get(selfPtr))
	mmm.API(selfPtr).builtin.String.replacen(p_self.Uintptr(), frame.Array(0), r_ret.Uintptr(), 2)
	var ret = mmm.New[String](ctx.Lifetime, ctx.API, r_ret.Get())
	frame.Free()
	return ret
}

func (self String) Repeat(ctx Context, count Int) String {
	var selfPtr = self
	var frame = call.New()
	call.Arg(frame, count)
	var r_ret = call.Ret[uintptr](frame)
	var p_self = call.Arg(frame, mmm.Get(selfPtr))
	mmm.API(selfPtr).builtin.String.repeat(p_self.Uintptr(), frame.Array(0), r_ret.Uintptr(), 1)
	var ret = mmm.New[String](ctx.Lifetime, ctx.API, r_ret.Get())
	frame.Free()
	return ret
}

func (self String) Reverse(ctx Context) String {
	var selfPtr = self
	var frame = call.New()
	var r_ret = call.Ret[uintptr](frame)
	var p_self = call.Arg(frame, mmm.Get(selfPtr))
	mmm.API(selfPtr).builtin.String.reverse(p_self.Uintptr(), frame.Array(0), r_ret.Uintptr(), 0)
	var ret = mmm.New[String](ctx.Lifetime, ctx.API, r_ret.Get())
	frame.Free()
	return ret
}

func (self String) Insert(ctx Context, position Int, what String) String {
	var selfPtr = self
	var frame = call.New()
	call.Arg(frame, position)
	call.Arg(frame, mmm.Get(what))
	var r_ret = call.Ret[uintptr](frame)
	var p_self = call.Arg(frame, mmm.Get(selfPtr))
	mmm.API(selfPtr).builtin.String.insert(p_self.Uintptr(), frame.Array(0), r_ret.Uintptr(), 2)
	var ret = mmm.New[String](ctx.Lifetime, ctx.API, r_ret.Get())
	frame.Free()
	return ret
}

func (self String) Erase(ctx Context, position Int, chars Int) String {
	var selfPtr = self
	var frame = call.New()
	call.Arg(frame, position)
	call.Arg(frame, chars)
	var r_ret = call.Ret[uintptr](frame)
	var p_self = call.Arg(frame, mmm.Get(selfPtr))
	mmm.API(selfPtr).builtin.String.erase(p_self.Uintptr(), frame.Array(0), r_ret.Uintptr(), 2)
	var ret = mmm.New[String](ctx.Lifetime, ctx.API, r_ret.Get())
	frame.Free()
	return ret
}

func (self String) Capitalize(ctx Context) String {
	var selfPtr = self
	var frame = call.New()
	var r_ret = call.Ret[uintptr](frame)
	var p_self = call.Arg(frame, mmm.Get(selfPtr))
	mmm.API(selfPtr).builtin.String.capitalize(p_self.Uintptr(), frame.Array(0), r_ret.Uintptr(), 0)
	var ret = mmm.New[String](ctx.Lifetime, ctx.API, r_ret.Get())
	frame.Free()
	return ret
}

func (self String) ToCamelCase(ctx Context) String {
	var selfPtr = self
	var frame = call.New()
	var r_ret = call.Ret[uintptr](frame)
	var p_self = call.Arg(frame, mmm.Get(selfPtr))
	mmm.API(selfPtr).builtin.String.to_camel_case(p_self.Uintptr(), frame.Array(0), r_ret.Uintptr(), 0)
	var ret = mmm.New[String](ctx.Lifetime, ctx.API, r_ret.Get())
	frame.Free()
	return ret
}

func (self String) ToPascalCase(ctx Context) String {
	var selfPtr = self
	var frame = call.New()
	var r_ret = call.Ret[uintptr](frame)
	var p_self = call.Arg(frame, mmm.Get(selfPtr))
	mmm.API(selfPtr).builtin.String.to_pascal_case(p_self.Uintptr(), frame.Array(0), r_ret.Uintptr(), 0)
	var ret = mmm.New[String](ctx.Lifetime, ctx.API, r_ret.Get())
	frame.Free()
	return ret
}

func (self String) ToSnakeCase(ctx Context) String {
	var selfPtr = self
	var frame = call.New()
	var r_ret = call.Ret[uintptr](frame)
	var p_self = call.Arg(frame, mmm.Get(selfPtr))
	mmm.API(selfPtr).builtin.String.to_snake_case(p_self.Uintptr(), frame.Array(0), r_ret.Uintptr(), 0)
	var ret = mmm.New[String](ctx.Lifetime, ctx.API, r_ret.Get())
	frame.Free()
	return ret
}

func (self String) Split(ctx Context, delimiter String, allow_empty bool, maxsplit Int) PackedStringArray {
	var selfPtr = self
	var frame = call.New()
	call.Arg(frame, mmm.Get(delimiter))
	call.Arg(frame, allow_empty)
	call.Arg(frame, maxsplit)
	var r_ret = call.Ret[[2]uintptr](frame)
	var p_self = call.Arg(frame, mmm.Get(selfPtr))
	mmm.API(selfPtr).builtin.String.split(p_self.Uintptr(), frame.Array(0), r_ret.Uintptr(), 3)
	var ret = mmm.New[PackedStringArray](ctx.Lifetime, ctx.API, r_ret.Get())
	frame.Free()
	return ret
}

func (self String) Rsplit(ctx Context, delimiter String, allow_empty bool, maxsplit Int) PackedStringArray {
	var selfPtr = self
	var frame = call.New()
	call.Arg(frame, mmm.Get(delimiter))
	call.Arg(frame, allow_empty)
	call.Arg(frame, maxsplit)
	var r_ret = call.Ret[[2]uintptr](frame)
	var p_self = call.Arg(frame, mmm.Get(selfPtr))
	mmm.API(selfPtr).builtin.String.rsplit(p_self.Uintptr(), frame.Array(0), r_ret.Uintptr(), 3)
	var ret = mmm.New[PackedStringArray](ctx.Lifetime, ctx.API, r_ret.Get())
	frame.Free()
	return ret
}

func (self String) SplitFloats(ctx Context, delimiter String, allow_empty bool) PackedFloat64Array {
	var selfPtr = self
	var frame = call.New()
	call.Arg(frame, mmm.Get(delimiter))
	call.Arg(frame, allow_empty)
	var r_ret = call.Ret[[2]uintptr](frame)
	var p_self = call.Arg(frame, mmm.Get(selfPtr))
	mmm.API(selfPtr).builtin.String.split_floats(p_self.Uintptr(), frame.Array(0), r_ret.Uintptr(), 2)
	var ret = mmm.New[PackedFloat64Array](ctx.Lifetime, ctx.API, r_ret.Get())
	frame.Free()
	return ret
}

func (self String) Join(ctx Context, parts PackedStringArray) String {
	var selfPtr = self
	var frame = call.New()
	call.Arg(frame, mmm.Get(parts))
	var r_ret = call.Ret[uintptr](frame)
	var p_self = call.Arg(frame, mmm.Get(selfPtr))
	mmm.API(selfPtr).builtin.String.join(p_self.Uintptr(), frame.Array(0), r_ret.Uintptr(), 1)
	var ret = mmm.New[String](ctx.Lifetime, ctx.API, r_ret.Get())
	frame.Free()
	return ret
}

func (self String) ToUpper(ctx Context) String {
	var selfPtr = self
	var frame = call.New()
	var r_ret = call.Ret[uintptr](frame)
	var p_self = call.Arg(frame, mmm.Get(selfPtr))
	mmm.API(selfPtr).builtin.String.to_upper(p_self.Uintptr(), frame.Array(0), r_ret.Uintptr(), 0)
	var ret = mmm.New[String](ctx.Lifetime, ctx.API, r_ret.Get())
	frame.Free()
	return ret
}

func (self String) ToLower(ctx Context) String {
	var selfPtr = self
	var frame = call.New()
	var r_ret = call.Ret[uintptr](frame)
	var p_self = call.Arg(frame, mmm.Get(selfPtr))
	mmm.API(selfPtr).builtin.String.to_lower(p_self.Uintptr(), frame.Array(0), r_ret.Uintptr(), 0)
	var ret = mmm.New[String](ctx.Lifetime, ctx.API, r_ret.Get())
	frame.Free()
	return ret
}

func (self String) Left(ctx Context, length Int) String {
	var selfPtr = self
	var frame = call.New()
	call.Arg(frame, length)
	var r_ret = call.Ret[uintptr](frame)
	var p_self = call.Arg(frame, mmm.Get(selfPtr))
	mmm.API(selfPtr).builtin.String.left(p_self.Uintptr(), frame.Array(0), r_ret.Uintptr(), 1)
	var ret = mmm.New[String](ctx.Lifetime, ctx.API, r_ret.Get())
	frame.Free()
	return ret
}

func (self String) Right(ctx Context, length Int) String {
	var selfPtr = self
	var frame = call.New()
	call.Arg(frame, length)
	var r_ret = call.Ret[uintptr](frame)
	var p_self = call.Arg(frame, mmm.Get(selfPtr))
	mmm.API(selfPtr).builtin.String.right(p_self.Uintptr(), frame.Array(0), r_ret.Uintptr(), 1)
	var ret = mmm.New[String](ctx.Lifetime, ctx.API, r_ret.Get())
	frame.Free()
	return ret
}

func (self String) StripEdges(ctx Context, left bool, right bool) String {
	var selfPtr = self
	var frame = call.New()
	call.Arg(frame, left)
	call.Arg(frame, right)
	var r_ret = call.Ret[uintptr](frame)
	var p_self = call.Arg(frame, mmm.Get(selfPtr))
	mmm.API(selfPtr).builtin.String.strip_edges(p_self.Uintptr(), frame.Array(0), r_ret.Uintptr(), 2)
	var ret = mmm.New[String](ctx.Lifetime, ctx.API, r_ret.Get())
	frame.Free()
	return ret
}

func (self String) StripEscapes(ctx Context) String {
	var selfPtr = self
	var frame = call.New()
	var r_ret = call.Ret[uintptr](frame)
	var p_self = call.Arg(frame, mmm.Get(selfPtr))
	mmm.API(selfPtr).builtin.String.strip_escapes(p_self.Uintptr(), frame.Array(0), r_ret.Uintptr(), 0)
	var ret = mmm.New[String](ctx.Lifetime, ctx.API, r_ret.Get())
	frame.Free()
	return ret
}

func (self String) Lstrip(ctx Context, chars String) String {
	var selfPtr = self
	var frame = call.New()
	call.Arg(frame, mmm.Get(chars))
	var r_ret = call.Ret[uintptr](frame)
	var p_self = call.Arg(frame, mmm.Get(selfPtr))
	mmm.API(selfPtr).builtin.String.lstrip(p_self.Uintptr(), frame.Array(0), r_ret.Uintptr(), 1)
	var ret = mmm.New[String](ctx.Lifetime, ctx.API, r_ret.Get())
	frame.Free()
	return ret
}

func (self String) Rstrip(ctx Context, chars String) String {
	var selfPtr = self
	var frame = call.New()
	call.Arg(frame, mmm.Get(chars))
	var r_ret = call.Ret[uintptr](frame)
	var p_self = call.Arg(frame, mmm.Get(selfPtr))
	mmm.API(selfPtr).builtin.String.rstrip(p_self.Uintptr(), frame.Array(0), r_ret.Uintptr(), 1)
	var ret = mmm.New[String](ctx.Lifetime, ctx.API, r_ret.Get())
	frame.Free()
	return ret
}

func (self String) GetExtension(ctx Context) String {
	var selfPtr = self
	var frame = call.New()
	var r_ret = call.Ret[uintptr](frame)
	var p_self = call.Arg(frame, mmm.Get(selfPtr))
	mmm.API(selfPtr).builtin.String.get_extension(p_self.Uintptr(), frame.Array(0), r_ret.Uintptr(), 0)
	var ret = mmm.New[String](ctx.Lifetime, ctx.API, r_ret.Get())
	frame.Free()
	return ret
}

func (self String) GetBasename(ctx Context) String {
	var selfPtr = self
	var frame = call.New()
	var r_ret = call.Ret[uintptr](frame)
	var p_self = call.Arg(frame, mmm.Get(selfPtr))
	mmm.API(selfPtr).builtin.String.get_basename(p_self.Uintptr(), frame.Array(0), r_ret.Uintptr(), 0)
	var ret = mmm.New[String](ctx.Lifetime, ctx.API, r_ret.Get())
	frame.Free()
	return ret
}

func (self String) PathJoin(ctx Context, file String) String {
	var selfPtr = self
	var frame = call.New()
	call.Arg(frame, mmm.Get(file))
	var r_ret = call.Ret[uintptr](frame)
	var p_self = call.Arg(frame, mmm.Get(selfPtr))
	mmm.API(selfPtr).builtin.String.path_join(p_self.Uintptr(), frame.Array(0), r_ret.Uintptr(), 1)
	var ret = mmm.New[String](ctx.Lifetime, ctx.API, r_ret.Get())
	frame.Free()
	return ret
}

func (self String) UnicodeAt(at Int) Int {
	var selfPtr = self
	var frame = call.New()
	call.Arg(frame, at)
	var r_ret = call.Ret[Int](frame)
	var p_self = call.Arg(frame, mmm.Get(selfPtr))
	mmm.API(selfPtr).builtin.String.unicode_at(p_self.Uintptr(), frame.Array(0), r_ret.Uintptr(), 1)
	var ret = r_ret.Get()
	frame.Free()
	return ret
}

func (self String) Indent(ctx Context, prefix String) String {
	var selfPtr = self
	var frame = call.New()
	call.Arg(frame, mmm.Get(prefix))
	var r_ret = call.Ret[uintptr](frame)
	var p_self = call.Arg(frame, mmm.Get(selfPtr))
	mmm.API(selfPtr).builtin.String.indent(p_self.Uintptr(), frame.Array(0), r_ret.Uintptr(), 1)
	var ret = mmm.New[String](ctx.Lifetime, ctx.API, r_ret.Get())
	frame.Free()
	return ret
}

func (self String) Dedent(ctx Context) String {
	var selfPtr = self
	var frame = call.New()
	var r_ret = call.Ret[uintptr](frame)
	var p_self = call.Arg(frame, mmm.Get(selfPtr))
	mmm.API(selfPtr).builtin.String.dedent(p_self.Uintptr(), frame.Array(0), r_ret.Uintptr(), 0)
	var ret = mmm.New[String](ctx.Lifetime, ctx.API, r_ret.Get())
	frame.Free()
	return ret
}

func (self String) Hash() Int {
	var selfPtr = self
	var frame = call.New()
	var r_ret = call.Ret[Int](frame)
	var p_self = call.Arg(frame, mmm.Get(selfPtr))
	mmm.API(selfPtr).builtin.String.hash(p_self.Uintptr(), frame.Array(0), r_ret.Uintptr(), 0)
	var ret = r_ret.Get()
	frame.Free()
	return ret
}

func (self String) Md5Text(ctx Context) String {
	var selfPtr = self
	var frame = call.New()
	var r_ret = call.Ret[uintptr](frame)
	var p_self = call.Arg(frame, mmm.Get(selfPtr))
	mmm.API(selfPtr).builtin.String.md5_text(p_self.Uintptr(), frame.Array(0), r_ret.Uintptr(), 0)
	var ret = mmm.New[String](ctx.Lifetime, ctx.API, r_ret.Get())
	frame.Free()
	return ret
}

func (self String) Sha1Text(ctx Context) String {
	var selfPtr = self
	var frame = call.New()
	var r_ret = call.Ret[uintptr](frame)
	var p_self = call.Arg(frame, mmm.Get(selfPtr))
	mmm.API(selfPtr).builtin.String.sha1_text(p_self.Uintptr(), frame.Array(0), r_ret.Uintptr(), 0)
	var ret = mmm.New[String](ctx.Lifetime, ctx.API, r_ret.Get())
	frame.Free()
	return ret
}

func (self String) Sha256Text(ctx Context) String {
	var selfPtr = self
	var frame = call.New()
	var r_ret = call.Ret[uintptr](frame)
	var p_self = call.Arg(frame, mmm.Get(selfPtr))
	mmm.API(selfPtr).builtin.String.sha256_text(p_self.Uintptr(), frame.Array(0), r_ret.Uintptr(), 0)
	var ret = mmm.New[String](ctx.Lifetime, ctx.API, r_ret.Get())
	frame.Free()
	return ret
}

func (self String) Md5Buffer(ctx Context) PackedByteArray {
	var selfPtr = self
	var frame = call.New()
	var r_ret = call.Ret[[2]uintptr](frame)
	var p_self = call.Arg(frame, mmm.Get(selfPtr))
	mmm.API(selfPtr).builtin.String.md5_buffer(p_self.Uintptr(), frame.Array(0), r_ret.Uintptr(), 0)
	var ret = mmm.New[PackedByteArray](ctx.Lifetime, ctx.API, r_ret.Get())
	frame.Free()
	return ret
}

func (self String) Sha1Buffer(ctx Context) PackedByteArray {
	var selfPtr = self
	var frame = call.New()
	var r_ret = call.Ret[[2]uintptr](frame)
	var p_self = call.Arg(frame, mmm.Get(selfPtr))
	mmm.API(selfPtr).builtin.String.sha1_buffer(p_self.Uintptr(), frame.Array(0), r_ret.Uintptr(), 0)
	var ret = mmm.New[PackedByteArray](ctx.Lifetime, ctx.API, r_ret.Get())
	frame.Free()
	return ret
}

func (self String) Sha256Buffer(ctx Context) PackedByteArray {
	var selfPtr = self
	var frame = call.New()
	var r_ret = call.Ret[[2]uintptr](frame)
	var p_self = call.Arg(frame, mmm.Get(selfPtr))
	mmm.API(selfPtr).builtin.String.sha256_buffer(p_self.Uintptr(), frame.Array(0), r_ret.Uintptr(), 0)
	var ret = mmm.New[PackedByteArray](ctx.Lifetime, ctx.API, r_ret.Get())
	frame.Free()
	return ret
}

func (self String) IsEmpty() bool {
	var selfPtr = self
	var frame = call.New()
	var r_ret = call.Ret[bool](frame)
	var p_self = call.Arg(frame, mmm.Get(selfPtr))
	mmm.API(selfPtr).builtin.String.is_empty(p_self.Uintptr(), frame.Array(0), r_ret.Uintptr(), 0)
	var ret = r_ret.Get()
	frame.Free()
	return ret
}

func (self String) Contains(what String) bool {
	var selfPtr = self
	var frame = call.New()
	call.Arg(frame, mmm.Get(what))
	var r_ret = call.Ret[bool](frame)
	var p_self = call.Arg(frame, mmm.Get(selfPtr))
	mmm.API(selfPtr).builtin.String.contains(p_self.Uintptr(), frame.Array(0), r_ret.Uintptr(), 1)
	var ret = r_ret.Get()
	frame.Free()
	return ret
}

func (self String) IsAbsolutePath() bool {
	var selfPtr = self
	var frame = call.New()
	var r_ret = call.Ret[bool](frame)
	var p_self = call.Arg(frame, mmm.Get(selfPtr))
	mmm.API(selfPtr).builtin.String.is_absolute_path(p_self.Uintptr(), frame.Array(0), r_ret.Uintptr(), 0)
	var ret = r_ret.Get()
	frame.Free()
	return ret
}

func (self String) IsRelativePath() bool {
	var selfPtr = self
	var frame = call.New()
	var r_ret = call.Ret[bool](frame)
	var p_self = call.Arg(frame, mmm.Get(selfPtr))
	mmm.API(selfPtr).builtin.String.is_relative_path(p_self.Uintptr(), frame.Array(0), r_ret.Uintptr(), 0)
	var ret = r_ret.Get()
	frame.Free()
	return ret
}

func (self String) SimplifyPath(ctx Context) String {
	var selfPtr = self
	var frame = call.New()
	var r_ret = call.Ret[uintptr](frame)
	var p_self = call.Arg(frame, mmm.Get(selfPtr))
	mmm.API(selfPtr).builtin.String.simplify_path(p_self.Uintptr(), frame.Array(0), r_ret.Uintptr(), 0)
	var ret = mmm.New[String](ctx.Lifetime, ctx.API, r_ret.Get())
	frame.Free()
	return ret
}

func (self String) GetBaseDir(ctx Context) String {
	var selfPtr = self
	var frame = call.New()
	var r_ret = call.Ret[uintptr](frame)
	var p_self = call.Arg(frame, mmm.Get(selfPtr))
	mmm.API(selfPtr).builtin.String.get_base_dir(p_self.Uintptr(), frame.Array(0), r_ret.Uintptr(), 0)
	var ret = mmm.New[String](ctx.Lifetime, ctx.API, r_ret.Get())
	frame.Free()
	return ret
}

func (self String) GetFile(ctx Context) String {
	var selfPtr = self
	var frame = call.New()
	var r_ret = call.Ret[uintptr](frame)
	var p_self = call.Arg(frame, mmm.Get(selfPtr))
	mmm.API(selfPtr).builtin.String.get_file(p_self.Uintptr(), frame.Array(0), r_ret.Uintptr(), 0)
	var ret = mmm.New[String](ctx.Lifetime, ctx.API, r_ret.Get())
	frame.Free()
	return ret
}

func (self String) XmlEscape(ctx Context, escape_quotes bool) String {
	var selfPtr = self
	var frame = call.New()
	call.Arg(frame, escape_quotes)
	var r_ret = call.Ret[uintptr](frame)
	var p_self = call.Arg(frame, mmm.Get(selfPtr))
	mmm.API(selfPtr).builtin.String.xml_escape(p_self.Uintptr(), frame.Array(0), r_ret.Uintptr(), 1)
	var ret = mmm.New[String](ctx.Lifetime, ctx.API, r_ret.Get())
	frame.Free()
	return ret
}

func (self String) XmlUnescape(ctx Context) String {
	var selfPtr = self
	var frame = call.New()
	var r_ret = call.Ret[uintptr](frame)
	var p_self = call.Arg(frame, mmm.Get(selfPtr))
	mmm.API(selfPtr).builtin.String.xml_unescape(p_self.Uintptr(), frame.Array(0), r_ret.Uintptr(), 0)
	var ret = mmm.New[String](ctx.Lifetime, ctx.API, r_ret.Get())
	frame.Free()
	return ret
}

func (self String) UriEncode(ctx Context) String {
	var selfPtr = self
	var frame = call.New()
	var r_ret = call.Ret[uintptr](frame)
	var p_self = call.Arg(frame, mmm.Get(selfPtr))
	mmm.API(selfPtr).builtin.String.uri_encode(p_self.Uintptr(), frame.Array(0), r_ret.Uintptr(), 0)
	var ret = mmm.New[String](ctx.Lifetime, ctx.API, r_ret.Get())
	frame.Free()
	return ret
}

func (self String) UriDecode(ctx Context) String {
	var selfPtr = self
	var frame = call.New()
	var r_ret = call.Ret[uintptr](frame)
	var p_self = call.Arg(frame, mmm.Get(selfPtr))
	mmm.API(selfPtr).builtin.String.uri_decode(p_self.Uintptr(), frame.Array(0), r_ret.Uintptr(), 0)
	var ret = mmm.New[String](ctx.Lifetime, ctx.API, r_ret.Get())
	frame.Free()
	return ret
}

func (self String) CEscape(ctx Context) String {
	var selfPtr = self
	var frame = call.New()
	var r_ret = call.Ret[uintptr](frame)
	var p_self = call.Arg(frame, mmm.Get(selfPtr))
	mmm.API(selfPtr).builtin.String.c_escape(p_self.Uintptr(), frame.Array(0), r_ret.Uintptr(), 0)
	var ret = mmm.New[String](ctx.Lifetime, ctx.API, r_ret.Get())
	frame.Free()
	return ret
}

func (self String) CUnescape(ctx Context) String {
	var selfPtr = self
	var frame = call.New()
	var r_ret = call.Ret[uintptr](frame)
	var p_self = call.Arg(frame, mmm.Get(selfPtr))
	mmm.API(selfPtr).builtin.String.c_unescape(p_self.Uintptr(), frame.Array(0), r_ret.Uintptr(), 0)
	var ret = mmm.New[String](ctx.Lifetime, ctx.API, r_ret.Get())
	frame.Free()
	return ret
}

func (self String) JsonEscape(ctx Context) String {
	var selfPtr = self
	var frame = call.New()
	var r_ret = call.Ret[uintptr](frame)
	var p_self = call.Arg(frame, mmm.Get(selfPtr))
	mmm.API(selfPtr).builtin.String.json_escape(p_self.Uintptr(), frame.Array(0), r_ret.Uintptr(), 0)
	var ret = mmm.New[String](ctx.Lifetime, ctx.API, r_ret.Get())
	frame.Free()
	return ret
}

func (self String) ValidateNodeName(ctx Context) String {
	var selfPtr = self
	var frame = call.New()
	var r_ret = call.Ret[uintptr](frame)
	var p_self = call.Arg(frame, mmm.Get(selfPtr))
	mmm.API(selfPtr).builtin.String.validate_node_name(p_self.Uintptr(), frame.Array(0), r_ret.Uintptr(), 0)
	var ret = mmm.New[String](ctx.Lifetime, ctx.API, r_ret.Get())
	frame.Free()
	return ret
}

func (self String) ValidateFilename(ctx Context) String {
	var selfPtr = self
	var frame = call.New()
	var r_ret = call.Ret[uintptr](frame)
	var p_self = call.Arg(frame, mmm.Get(selfPtr))
	mmm.API(selfPtr).builtin.String.validate_filename(p_self.Uintptr(), frame.Array(0), r_ret.Uintptr(), 0)
	var ret = mmm.New[String](ctx.Lifetime, ctx.API, r_ret.Get())
	frame.Free()
	return ret
}

func (self String) IsValidIdentifier() bool {
	var selfPtr = self
	var frame = call.New()
	var r_ret = call.Ret[bool](frame)
	var p_self = call.Arg(frame, mmm.Get(selfPtr))
	mmm.API(selfPtr).builtin.String.is_valid_identifier(p_self.Uintptr(), frame.Array(0), r_ret.Uintptr(), 0)
	var ret = r_ret.Get()
	frame.Free()
	return ret
}

func (self String) IsValidInt() bool {
	var selfPtr = self
	var frame = call.New()
	var r_ret = call.Ret[bool](frame)
	var p_self = call.Arg(frame, mmm.Get(selfPtr))
	mmm.API(selfPtr).builtin.String.is_valid_int(p_self.Uintptr(), frame.Array(0), r_ret.Uintptr(), 0)
	var ret = r_ret.Get()
	frame.Free()
	return ret
}

func (self String) IsValidFloat() bool {
	var selfPtr = self
	var frame = call.New()
	var r_ret = call.Ret[bool](frame)
	var p_self = call.Arg(frame, mmm.Get(selfPtr))
	mmm.API(selfPtr).builtin.String.is_valid_float(p_self.Uintptr(), frame.Array(0), r_ret.Uintptr(), 0)
	var ret = r_ret.Get()
	frame.Free()
	return ret
}

func (self String) IsValidHexNumber(with_prefix bool) bool {
	var selfPtr = self
	var frame = call.New()
	call.Arg(frame, with_prefix)
	var r_ret = call.Ret[bool](frame)
	var p_self = call.Arg(frame, mmm.Get(selfPtr))
	mmm.API(selfPtr).builtin.String.is_valid_hex_number(p_self.Uintptr(), frame.Array(0), r_ret.Uintptr(), 1)
	var ret = r_ret.Get()
	frame.Free()
	return ret
}

func (self String) IsValidHtmlColor() bool {
	var selfPtr = self
	var frame = call.New()
	var r_ret = call.Ret[bool](frame)
	var p_self = call.Arg(frame, mmm.Get(selfPtr))
	mmm.API(selfPtr).builtin.String.is_valid_html_color(p_self.Uintptr(), frame.Array(0), r_ret.Uintptr(), 0)
	var ret = r_ret.Get()
	frame.Free()
	return ret
}

func (self String) IsValidIpAddress() bool {
	var selfPtr = self
	var frame = call.New()
	var r_ret = call.Ret[bool](frame)
	var p_self = call.Arg(frame, mmm.Get(selfPtr))
	mmm.API(selfPtr).builtin.String.is_valid_ip_address(p_self.Uintptr(), frame.Array(0), r_ret.Uintptr(), 0)
	var ret = r_ret.Get()
	frame.Free()
	return ret
}

func (self String) IsValidFilename() bool {
	var selfPtr = self
	var frame = call.New()
	var r_ret = call.Ret[bool](frame)
	var p_self = call.Arg(frame, mmm.Get(selfPtr))
	mmm.API(selfPtr).builtin.String.is_valid_filename(p_self.Uintptr(), frame.Array(0), r_ret.Uintptr(), 0)
	var ret = r_ret.Get()
	frame.Free()
	return ret
}

func (self String) ToInt() Int {
	var selfPtr = self
	var frame = call.New()
	var r_ret = call.Ret[Int](frame)
	var p_self = call.Arg(frame, mmm.Get(selfPtr))
	mmm.API(selfPtr).builtin.String.to_int(p_self.Uintptr(), frame.Array(0), r_ret.Uintptr(), 0)
	var ret = r_ret.Get()
	frame.Free()
	return ret
}

func (self String) ToFloat() Float {
	var selfPtr = self
	var frame = call.New()
	var r_ret = call.Ret[Float](frame)
	var p_self = call.Arg(frame, mmm.Get(selfPtr))
	mmm.API(selfPtr).builtin.String.to_float(p_self.Uintptr(), frame.Array(0), r_ret.Uintptr(), 0)
	var ret = r_ret.Get()
	frame.Free()
	return ret
}

func (self String) HexToInt() Int {
	var selfPtr = self
	var frame = call.New()
	var r_ret = call.Ret[Int](frame)
	var p_self = call.Arg(frame, mmm.Get(selfPtr))
	mmm.API(selfPtr).builtin.String.hex_to_int(p_self.Uintptr(), frame.Array(0), r_ret.Uintptr(), 0)
	var ret = r_ret.Get()
	frame.Free()
	return ret
}

func (self String) BinToInt() Int {
	var selfPtr = self
	var frame = call.New()
	var r_ret = call.Ret[Int](frame)
	var p_self = call.Arg(frame, mmm.Get(selfPtr))
	mmm.API(selfPtr).builtin.String.bin_to_int(p_self.Uintptr(), frame.Array(0), r_ret.Uintptr(), 0)
	var ret = r_ret.Get()
	frame.Free()
	return ret
}

func (self String) Lpad(ctx Context, min_length Int, character String) String {
	var selfPtr = self
	var frame = call.New()
	call.Arg(frame, min_length)
	call.Arg(frame, mmm.Get(character))
	var r_ret = call.Ret[uintptr](frame)
	var p_self = call.Arg(frame, mmm.Get(selfPtr))
	mmm.API(selfPtr).builtin.String.lpad(p_self.Uintptr(), frame.Array(0), r_ret.Uintptr(), 2)
	var ret = mmm.New[String](ctx.Lifetime, ctx.API, r_ret.Get())
	frame.Free()
	return ret
}

func (self String) Rpad(ctx Context, min_length Int, character String) String {
	var selfPtr = self
	var frame = call.New()
	call.Arg(frame, min_length)
	call.Arg(frame, mmm.Get(character))
	var r_ret = call.Ret[uintptr](frame)
	var p_self = call.Arg(frame, mmm.Get(selfPtr))
	mmm.API(selfPtr).builtin.String.rpad(p_self.Uintptr(), frame.Array(0), r_ret.Uintptr(), 2)
	var ret = mmm.New[String](ctx.Lifetime, ctx.API, r_ret.Get())
	frame.Free()
	return ret
}

func (self String) PadDecimals(ctx Context, digits Int) String {
	var selfPtr = self
	var frame = call.New()
	call.Arg(frame, digits)
	var r_ret = call.Ret[uintptr](frame)
	var p_self = call.Arg(frame, mmm.Get(selfPtr))
	mmm.API(selfPtr).builtin.String.pad_decimals(p_self.Uintptr(), frame.Array(0), r_ret.Uintptr(), 1)
	var ret = mmm.New[String](ctx.Lifetime, ctx.API, r_ret.Get())
	frame.Free()
	return ret
}

func (self String) PadZeros(ctx Context, digits Int) String {
	var selfPtr = self
	var frame = call.New()
	call.Arg(frame, digits)
	var r_ret = call.Ret[uintptr](frame)
	var p_self = call.Arg(frame, mmm.Get(selfPtr))
	mmm.API(selfPtr).builtin.String.pad_zeros(p_self.Uintptr(), frame.Array(0), r_ret.Uintptr(), 1)
	var ret = mmm.New[String](ctx.Lifetime, ctx.API, r_ret.Get())
	frame.Free()
	return ret
}

func (self String) TrimPrefix(ctx Context, prefix String) String {
	var selfPtr = self
	var frame = call.New()
	call.Arg(frame, mmm.Get(prefix))
	var r_ret = call.Ret[uintptr](frame)
	var p_self = call.Arg(frame, mmm.Get(selfPtr))
	mmm.API(selfPtr).builtin.String.trim_prefix(p_self.Uintptr(), frame.Array(0), r_ret.Uintptr(), 1)
	var ret = mmm.New[String](ctx.Lifetime, ctx.API, r_ret.Get())
	frame.Free()
	return ret
}

func (self String) TrimSuffix(ctx Context, suffix String) String {
	var selfPtr = self
	var frame = call.New()
	call.Arg(frame, mmm.Get(suffix))
	var r_ret = call.Ret[uintptr](frame)
	var p_self = call.Arg(frame, mmm.Get(selfPtr))
	mmm.API(selfPtr).builtin.String.trim_suffix(p_self.Uintptr(), frame.Array(0), r_ret.Uintptr(), 1)
	var ret = mmm.New[String](ctx.Lifetime, ctx.API, r_ret.Get())
	frame.Free()
	return ret
}

func (self String) ToAsciiBuffer(ctx Context) PackedByteArray {
	var selfPtr = self
	var frame = call.New()
	var r_ret = call.Ret[[2]uintptr](frame)
	var p_self = call.Arg(frame, mmm.Get(selfPtr))
	mmm.API(selfPtr).builtin.String.to_ascii_buffer(p_self.Uintptr(), frame.Array(0), r_ret.Uintptr(), 0)
	var ret = mmm.New[PackedByteArray](ctx.Lifetime, ctx.API, r_ret.Get())
	frame.Free()
	return ret
}

func (self String) ToUtf8Buffer(ctx Context) PackedByteArray {
	var selfPtr = self
	var frame = call.New()
	var r_ret = call.Ret[[2]uintptr](frame)
	var p_self = call.Arg(frame, mmm.Get(selfPtr))
	mmm.API(selfPtr).builtin.String.to_utf8_buffer(p_self.Uintptr(), frame.Array(0), r_ret.Uintptr(), 0)
	var ret = mmm.New[PackedByteArray](ctx.Lifetime, ctx.API, r_ret.Get())
	frame.Free()
	return ret
}

func (self String) ToUtf16Buffer(ctx Context) PackedByteArray {
	var selfPtr = self
	var frame = call.New()
	var r_ret = call.Ret[[2]uintptr](frame)
	var p_self = call.Arg(frame, mmm.Get(selfPtr))
	mmm.API(selfPtr).builtin.String.to_utf16_buffer(p_self.Uintptr(), frame.Array(0), r_ret.Uintptr(), 0)
	var ret = mmm.New[PackedByteArray](ctx.Lifetime, ctx.API, r_ret.Get())
	frame.Free()
	return ret
}

func (self String) ToUtf32Buffer(ctx Context) PackedByteArray {
	var selfPtr = self
	var frame = call.New()
	var r_ret = call.Ret[[2]uintptr](frame)
	var p_self = call.Arg(frame, mmm.Get(selfPtr))
	mmm.API(selfPtr).builtin.String.to_utf32_buffer(p_self.Uintptr(), frame.Array(0), r_ret.Uintptr(), 0)
	var ret = mmm.New[PackedByteArray](ctx.Lifetime, ctx.API, r_ret.Get())
	frame.Free()
	return ret
}

func (self String) HexDecode(ctx Context) PackedByteArray {
	var selfPtr = self
	var frame = call.New()
	var r_ret = call.Ret[[2]uintptr](frame)
	var p_self = call.Arg(frame, mmm.Get(selfPtr))
	mmm.API(selfPtr).builtin.String.hex_decode(p_self.Uintptr(), frame.Array(0), r_ret.Uintptr(), 0)
	var ret = mmm.New[PackedByteArray](ctx.Lifetime, ctx.API, r_ret.Get())
	frame.Free()
	return ret
}

func (self String) ToWcharBuffer(ctx Context) PackedByteArray {
	var selfPtr = self
	var frame = call.New()
	var r_ret = call.Ret[[2]uintptr](frame)
	var p_self = call.Arg(frame, mmm.Get(selfPtr))
	mmm.API(selfPtr).builtin.String.to_wchar_buffer(p_self.Uintptr(), frame.Array(0), r_ret.Uintptr(), 0)
	var ret = mmm.New[PackedByteArray](ctx.Lifetime, ctx.API, r_ret.Get())
	frame.Free()
	return ret
}

func (self String) NumScientific(ctx Context, number Float) String {
	var selfPtr = self
	var frame = call.New()
	call.Arg(frame, number)
	var r_ret = call.Ret[uintptr](frame)
	var p_self = call.Arg(frame, mmm.Get(selfPtr))
	mmm.API(selfPtr).builtin.String.num_scientific(p_self.Uintptr(), frame.Array(0), r_ret.Uintptr(), 1)
	var ret = mmm.New[String](ctx.Lifetime, ctx.API, r_ret.Get())
	frame.Free()
	return ret
}

func (self String) Num(ctx Context, number Float, decimals Int) String {
	var selfPtr = self
	var frame = call.New()
	call.Arg(frame, number)
	call.Arg(frame, decimals)
	var r_ret = call.Ret[uintptr](frame)
	var p_self = call.Arg(frame, mmm.Get(selfPtr))
	mmm.API(selfPtr).builtin.String.num(p_self.Uintptr(), frame.Array(0), r_ret.Uintptr(), 2)
	var ret = mmm.New[String](ctx.Lifetime, ctx.API, r_ret.Get())
	frame.Free()
	return ret
}

func (self String) NumInt64(ctx Context, number Int, base Int, capitalize_hex bool) String {
	var selfPtr = self
	var frame = call.New()
	call.Arg(frame, number)
	call.Arg(frame, base)
	call.Arg(frame, capitalize_hex)
	var r_ret = call.Ret[uintptr](frame)
	var p_self = call.Arg(frame, mmm.Get(selfPtr))
	mmm.API(selfPtr).builtin.String.num_int64(p_self.Uintptr(), frame.Array(0), r_ret.Uintptr(), 3)
	var ret = mmm.New[String](ctx.Lifetime, ctx.API, r_ret.Get())
	frame.Free()
	return ret
}

func (self String) NumUint64(ctx Context, number Int, base Int, capitalize_hex bool) String {
	var selfPtr = self
	var frame = call.New()
	call.Arg(frame, number)
	call.Arg(frame, base)
	call.Arg(frame, capitalize_hex)
	var r_ret = call.Ret[uintptr](frame)
	var p_self = call.Arg(frame, mmm.Get(selfPtr))
	mmm.API(selfPtr).builtin.String.num_uint64(p_self.Uintptr(), frame.Array(0), r_ret.Uintptr(), 3)
	var ret = mmm.New[String](ctx.Lifetime, ctx.API, r_ret.Get())
	frame.Free()
	return ret
}

func (self String) Chr(ctx Context, char Int) String {
	var selfPtr = self
	var frame = call.New()
	call.Arg(frame, char)
	var r_ret = call.Ret[uintptr](frame)
	var p_self = call.Arg(frame, mmm.Get(selfPtr))
	mmm.API(selfPtr).builtin.String.chr(p_self.Uintptr(), frame.Array(0), r_ret.Uintptr(), 1)
	var ret = mmm.New[String](ctx.Lifetime, ctx.API, r_ret.Get())
	frame.Free()
	return ret
}

func (self String) HumanizeSize(ctx Context, size Int) String {
	var selfPtr = self
	var frame = call.New()
	call.Arg(frame, size)
	var r_ret = call.Ret[uintptr](frame)
	var p_self = call.Arg(frame, mmm.Get(selfPtr))
	mmm.API(selfPtr).builtin.String.humanize_size(p_self.Uintptr(), frame.Array(0), r_ret.Uintptr(), 1)
	var ret = mmm.New[String](ctx.Lifetime, ctx.API, r_ret.Get())
	frame.Free()
	return ret
}

func (self StringName) CasecmpTo(to String) Int {
	var selfPtr = self
	var frame = call.New()
	call.Arg(frame, mmm.Get(to))
	var r_ret = call.Ret[Int](frame)
	var p_self = call.Arg(frame, mmm.Get(selfPtr))
	mmm.API(selfPtr).builtin.StringName.casecmp_to(p_self.Uintptr(), frame.Array(0), r_ret.Uintptr(), 1)
	var ret = r_ret.Get()
	frame.Free()
	return ret
}

func (self StringName) NocasecmpTo(to String) Int {
	var selfPtr = self
	var frame = call.New()
	call.Arg(frame, mmm.Get(to))
	var r_ret = call.Ret[Int](frame)
	var p_self = call.Arg(frame, mmm.Get(selfPtr))
	mmm.API(selfPtr).builtin.StringName.nocasecmp_to(p_self.Uintptr(), frame.Array(0), r_ret.Uintptr(), 1)
	var ret = r_ret.Get()
	frame.Free()
	return ret
}

func (self StringName) NaturalcasecmpTo(to String) Int {
	var selfPtr = self
	var frame = call.New()
	call.Arg(frame, mmm.Get(to))
	var r_ret = call.Ret[Int](frame)
	var p_self = call.Arg(frame, mmm.Get(selfPtr))
	mmm.API(selfPtr).builtin.StringName.naturalcasecmp_to(p_self.Uintptr(), frame.Array(0), r_ret.Uintptr(), 1)
	var ret = r_ret.Get()
	frame.Free()
	return ret
}

func (self StringName) NaturalnocasecmpTo(to String) Int {
	var selfPtr = self
	var frame = call.New()
	call.Arg(frame, mmm.Get(to))
	var r_ret = call.Ret[Int](frame)
	var p_self = call.Arg(frame, mmm.Get(selfPtr))
	mmm.API(selfPtr).builtin.StringName.naturalnocasecmp_to(p_self.Uintptr(), frame.Array(0), r_ret.Uintptr(), 1)
	var ret = r_ret.Get()
	frame.Free()
	return ret
}

func (self StringName) Length() Int {
	var selfPtr = self
	var frame = call.New()
	var r_ret = call.Ret[Int](frame)
	var p_self = call.Arg(frame, mmm.Get(selfPtr))
	mmm.API(selfPtr).builtin.StringName.length(p_self.Uintptr(), frame.Array(0), r_ret.Uintptr(), 0)
	var ret = r_ret.Get()
	frame.Free()
	return ret
}

func (self StringName) Substr(ctx Context, from Int, len Int) String {
	var selfPtr = self
	var frame = call.New()
	call.Arg(frame, from)
	call.Arg(frame, len)
	var r_ret = call.Ret[uintptr](frame)
	var p_self = call.Arg(frame, mmm.Get(selfPtr))
	mmm.API(selfPtr).builtin.StringName.substr(p_self.Uintptr(), frame.Array(0), r_ret.Uintptr(), 2)
	var ret = mmm.New[String](ctx.Lifetime, ctx.API, r_ret.Get())
	frame.Free()
	return ret
}

func (self StringName) GetSlice(ctx Context, delimiter String, slice Int) String {
	var selfPtr = self
	var frame = call.New()
	call.Arg(frame, mmm.Get(delimiter))
	call.Arg(frame, slice)
	var r_ret = call.Ret[uintptr](frame)
	var p_self = call.Arg(frame, mmm.Get(selfPtr))
	mmm.API(selfPtr).builtin.StringName.get_slice(p_self.Uintptr(), frame.Array(0), r_ret.Uintptr(), 2)
	var ret = mmm.New[String](ctx.Lifetime, ctx.API, r_ret.Get())
	frame.Free()
	return ret
}

func (self StringName) GetSlicec(ctx Context, delimiter Int, slice Int) String {
	var selfPtr = self
	var frame = call.New()
	call.Arg(frame, delimiter)
	call.Arg(frame, slice)
	var r_ret = call.Ret[uintptr](frame)
	var p_self = call.Arg(frame, mmm.Get(selfPtr))
	mmm.API(selfPtr).builtin.StringName.get_slicec(p_self.Uintptr(), frame.Array(0), r_ret.Uintptr(), 2)
	var ret = mmm.New[String](ctx.Lifetime, ctx.API, r_ret.Get())
	frame.Free()
	return ret
}

func (self StringName) GetSliceCount(delimiter String) Int {
	var selfPtr = self
	var frame = call.New()
	call.Arg(frame, mmm.Get(delimiter))
	var r_ret = call.Ret[Int](frame)
	var p_self = call.Arg(frame, mmm.Get(selfPtr))
	mmm.API(selfPtr).builtin.StringName.get_slice_count(p_self.Uintptr(), frame.Array(0), r_ret.Uintptr(), 1)
	var ret = r_ret.Get()
	frame.Free()
	return ret
}

func (self StringName) Find(what String, from Int) Int {
	var selfPtr = self
	var frame = call.New()
	call.Arg(frame, mmm.Get(what))
	call.Arg(frame, from)
	var r_ret = call.Ret[Int](frame)
	var p_self = call.Arg(frame, mmm.Get(selfPtr))
	mmm.API(selfPtr).builtin.StringName.find(p_self.Uintptr(), frame.Array(0), r_ret.Uintptr(), 2)
	var ret = r_ret.Get()
	frame.Free()
	return ret
}

func (self StringName) Count(what String, from Int, to Int) Int {
	var selfPtr = self
	var frame = call.New()
	call.Arg(frame, mmm.Get(what))
	call.Arg(frame, from)
	call.Arg(frame, to)
	var r_ret = call.Ret[Int](frame)
	var p_self = call.Arg(frame, mmm.Get(selfPtr))
	mmm.API(selfPtr).builtin.StringName.count(p_self.Uintptr(), frame.Array(0), r_ret.Uintptr(), 3)
	var ret = r_ret.Get()
	frame.Free()
	return ret
}

func (self StringName) Countn(what String, from Int, to Int) Int {
	var selfPtr = self
	var frame = call.New()
	call.Arg(frame, mmm.Get(what))
	call.Arg(frame, from)
	call.Arg(frame, to)
	var r_ret = call.Ret[Int](frame)
	var p_self = call.Arg(frame, mmm.Get(selfPtr))
	mmm.API(selfPtr).builtin.StringName.countn(p_self.Uintptr(), frame.Array(0), r_ret.Uintptr(), 3)
	var ret = r_ret.Get()
	frame.Free()
	return ret
}

func (self StringName) Findn(what String, from Int) Int {
	var selfPtr = self
	var frame = call.New()
	call.Arg(frame, mmm.Get(what))
	call.Arg(frame, from)
	var r_ret = call.Ret[Int](frame)
	var p_self = call.Arg(frame, mmm.Get(selfPtr))
	mmm.API(selfPtr).builtin.StringName.findn(p_self.Uintptr(), frame.Array(0), r_ret.Uintptr(), 2)
	var ret = r_ret.Get()
	frame.Free()
	return ret
}

func (self StringName) Rfind(what String, from Int) Int {
	var selfPtr = self
	var frame = call.New()
	call.Arg(frame, mmm.Get(what))
	call.Arg(frame, from)
	var r_ret = call.Ret[Int](frame)
	var p_self = call.Arg(frame, mmm.Get(selfPtr))
	mmm.API(selfPtr).builtin.StringName.rfind(p_self.Uintptr(), frame.Array(0), r_ret.Uintptr(), 2)
	var ret = r_ret.Get()
	frame.Free()
	return ret
}

func (self StringName) Rfindn(what String, from Int) Int {
	var selfPtr = self
	var frame = call.New()
	call.Arg(frame, mmm.Get(what))
	call.Arg(frame, from)
	var r_ret = call.Ret[Int](frame)
	var p_self = call.Arg(frame, mmm.Get(selfPtr))
	mmm.API(selfPtr).builtin.StringName.rfindn(p_self.Uintptr(), frame.Array(0), r_ret.Uintptr(), 2)
	var ret = r_ret.Get()
	frame.Free()
	return ret
}

func (self StringName) Match(expr String) bool {
	var selfPtr = self
	var frame = call.New()
	call.Arg(frame, mmm.Get(expr))
	var r_ret = call.Ret[bool](frame)
	var p_self = call.Arg(frame, mmm.Get(selfPtr))
	mmm.API(selfPtr).builtin.StringName.match(p_self.Uintptr(), frame.Array(0), r_ret.Uintptr(), 1)
	var ret = r_ret.Get()
	frame.Free()
	return ret
}

func (self StringName) Matchn(expr String) bool {
	var selfPtr = self
	var frame = call.New()
	call.Arg(frame, mmm.Get(expr))
	var r_ret = call.Ret[bool](frame)
	var p_self = call.Arg(frame, mmm.Get(selfPtr))
	mmm.API(selfPtr).builtin.StringName.matchn(p_self.Uintptr(), frame.Array(0), r_ret.Uintptr(), 1)
	var ret = r_ret.Get()
	frame.Free()
	return ret
}

func (self StringName) BeginsWith(text String) bool {
	var selfPtr = self
	var frame = call.New()
	call.Arg(frame, mmm.Get(text))
	var r_ret = call.Ret[bool](frame)
	var p_self = call.Arg(frame, mmm.Get(selfPtr))
	mmm.API(selfPtr).builtin.StringName.begins_with(p_self.Uintptr(), frame.Array(0), r_ret.Uintptr(), 1)
	var ret = r_ret.Get()
	frame.Free()
	return ret
}

func (self StringName) EndsWith(text String) bool {
	var selfPtr = self
	var frame = call.New()
	call.Arg(frame, mmm.Get(text))
	var r_ret = call.Ret[bool](frame)
	var p_self = call.Arg(frame, mmm.Get(selfPtr))
	mmm.API(selfPtr).builtin.StringName.ends_with(p_self.Uintptr(), frame.Array(0), r_ret.Uintptr(), 1)
	var ret = r_ret.Get()
	frame.Free()
	return ret
}

func (self StringName) IsSubsequenceOf(text String) bool {
	var selfPtr = self
	var frame = call.New()
	call.Arg(frame, mmm.Get(text))
	var r_ret = call.Ret[bool](frame)
	var p_self = call.Arg(frame, mmm.Get(selfPtr))
	mmm.API(selfPtr).builtin.StringName.is_subsequence_of(p_self.Uintptr(), frame.Array(0), r_ret.Uintptr(), 1)
	var ret = r_ret.Get()
	frame.Free()
	return ret
}

func (self StringName) IsSubsequenceOfn(text String) bool {
	var selfPtr = self
	var frame = call.New()
	call.Arg(frame, mmm.Get(text))
	var r_ret = call.Ret[bool](frame)
	var p_self = call.Arg(frame, mmm.Get(selfPtr))
	mmm.API(selfPtr).builtin.StringName.is_subsequence_ofn(p_self.Uintptr(), frame.Array(0), r_ret.Uintptr(), 1)
	var ret = r_ret.Get()
	frame.Free()
	return ret
}

func (self StringName) Bigrams(ctx Context) PackedStringArray {
	var selfPtr = self
	var frame = call.New()
	var r_ret = call.Ret[[2]uintptr](frame)
	var p_self = call.Arg(frame, mmm.Get(selfPtr))
	mmm.API(selfPtr).builtin.StringName.bigrams(p_self.Uintptr(), frame.Array(0), r_ret.Uintptr(), 0)
	var ret = mmm.New[PackedStringArray](ctx.Lifetime, ctx.API, r_ret.Get())
	frame.Free()
	return ret
}

func (self StringName) Similarity(text String) Float {
	var selfPtr = self
	var frame = call.New()
	call.Arg(frame, mmm.Get(text))
	var r_ret = call.Ret[Float](frame)
	var p_self = call.Arg(frame, mmm.Get(selfPtr))
	mmm.API(selfPtr).builtin.StringName.similarity(p_self.Uintptr(), frame.Array(0), r_ret.Uintptr(), 1)
	var ret = r_ret.Get()
	frame.Free()
	return ret
}

func (self StringName) Format(ctx Context, values Variant, placeholder String) String {
	var selfPtr = self
	var frame = call.New()
	call.Arg(frame, mmm.Get(values))
	call.Arg(frame, mmm.Get(placeholder))
	var r_ret = call.Ret[uintptr](frame)
	var p_self = call.Arg(frame, mmm.Get(selfPtr))
	mmm.API(selfPtr).builtin.StringName.format(p_self.Uintptr(), frame.Array(0), r_ret.Uintptr(), 2)
	var ret = mmm.New[String](ctx.Lifetime, ctx.API, r_ret.Get())
	frame.Free()
	return ret
}

func (self StringName) Replace(ctx Context, what String, forwhat String) String {
	var selfPtr = self
	var frame = call.New()
	call.Arg(frame, mmm.Get(what))
	call.Arg(frame, mmm.Get(forwhat))
	var r_ret = call.Ret[uintptr](frame)
	var p_self = call.Arg(frame, mmm.Get(selfPtr))
	mmm.API(selfPtr).builtin.StringName.replace(p_self.Uintptr(), frame.Array(0), r_ret.Uintptr(), 2)
	var ret = mmm.New[String](ctx.Lifetime, ctx.API, r_ret.Get())
	frame.Free()
	return ret
}

func (self StringName) Replacen(ctx Context, what String, forwhat String) String {
	var selfPtr = self
	var frame = call.New()
	call.Arg(frame, mmm.Get(what))
	call.Arg(frame, mmm.Get(forwhat))
	var r_ret = call.Ret[uintptr](frame)
	var p_self = call.Arg(frame, mmm.Get(selfPtr))
	mmm.API(selfPtr).builtin.StringName.replacen(p_self.Uintptr(), frame.Array(0), r_ret.Uintptr(), 2)
	var ret = mmm.New[String](ctx.Lifetime, ctx.API, r_ret.Get())
	frame.Free()
	return ret
}

func (self StringName) Repeat(ctx Context, count Int) String {
	var selfPtr = self
	var frame = call.New()
	call.Arg(frame, count)
	var r_ret = call.Ret[uintptr](frame)
	var p_self = call.Arg(frame, mmm.Get(selfPtr))
	mmm.API(selfPtr).builtin.StringName.repeat(p_self.Uintptr(), frame.Array(0), r_ret.Uintptr(), 1)
	var ret = mmm.New[String](ctx.Lifetime, ctx.API, r_ret.Get())
	frame.Free()
	return ret
}

func (self StringName) Reverse(ctx Context) String {
	var selfPtr = self
	var frame = call.New()
	var r_ret = call.Ret[uintptr](frame)
	var p_self = call.Arg(frame, mmm.Get(selfPtr))
	mmm.API(selfPtr).builtin.StringName.reverse(p_self.Uintptr(), frame.Array(0), r_ret.Uintptr(), 0)
	var ret = mmm.New[String](ctx.Lifetime, ctx.API, r_ret.Get())
	frame.Free()
	return ret
}

func (self StringName) Insert(ctx Context, position Int, what String) String {
	var selfPtr = self
	var frame = call.New()
	call.Arg(frame, position)
	call.Arg(frame, mmm.Get(what))
	var r_ret = call.Ret[uintptr](frame)
	var p_self = call.Arg(frame, mmm.Get(selfPtr))
	mmm.API(selfPtr).builtin.StringName.insert(p_self.Uintptr(), frame.Array(0), r_ret.Uintptr(), 2)
	var ret = mmm.New[String](ctx.Lifetime, ctx.API, r_ret.Get())
	frame.Free()
	return ret
}

func (self StringName) Erase(ctx Context, position Int, chars Int) String {
	var selfPtr = self
	var frame = call.New()
	call.Arg(frame, position)
	call.Arg(frame, chars)
	var r_ret = call.Ret[uintptr](frame)
	var p_self = call.Arg(frame, mmm.Get(selfPtr))
	mmm.API(selfPtr).builtin.StringName.erase(p_self.Uintptr(), frame.Array(0), r_ret.Uintptr(), 2)
	var ret = mmm.New[String](ctx.Lifetime, ctx.API, r_ret.Get())
	frame.Free()
	return ret
}

func (self StringName) Capitalize(ctx Context) String {
	var selfPtr = self
	var frame = call.New()
	var r_ret = call.Ret[uintptr](frame)
	var p_self = call.Arg(frame, mmm.Get(selfPtr))
	mmm.API(selfPtr).builtin.StringName.capitalize(p_self.Uintptr(), frame.Array(0), r_ret.Uintptr(), 0)
	var ret = mmm.New[String](ctx.Lifetime, ctx.API, r_ret.Get())
	frame.Free()
	return ret
}

func (self StringName) ToCamelCase(ctx Context) String {
	var selfPtr = self
	var frame = call.New()
	var r_ret = call.Ret[uintptr](frame)
	var p_self = call.Arg(frame, mmm.Get(selfPtr))
	mmm.API(selfPtr).builtin.StringName.to_camel_case(p_self.Uintptr(), frame.Array(0), r_ret.Uintptr(), 0)
	var ret = mmm.New[String](ctx.Lifetime, ctx.API, r_ret.Get())
	frame.Free()
	return ret
}

func (self StringName) ToPascalCase(ctx Context) String {
	var selfPtr = self
	var frame = call.New()
	var r_ret = call.Ret[uintptr](frame)
	var p_self = call.Arg(frame, mmm.Get(selfPtr))
	mmm.API(selfPtr).builtin.StringName.to_pascal_case(p_self.Uintptr(), frame.Array(0), r_ret.Uintptr(), 0)
	var ret = mmm.New[String](ctx.Lifetime, ctx.API, r_ret.Get())
	frame.Free()
	return ret
}

func (self StringName) ToSnakeCase(ctx Context) String {
	var selfPtr = self
	var frame = call.New()
	var r_ret = call.Ret[uintptr](frame)
	var p_self = call.Arg(frame, mmm.Get(selfPtr))
	mmm.API(selfPtr).builtin.StringName.to_snake_case(p_self.Uintptr(), frame.Array(0), r_ret.Uintptr(), 0)
	var ret = mmm.New[String](ctx.Lifetime, ctx.API, r_ret.Get())
	frame.Free()
	return ret
}

func (self StringName) Split(ctx Context, delimiter String, allow_empty bool, maxsplit Int) PackedStringArray {
	var selfPtr = self
	var frame = call.New()
	call.Arg(frame, mmm.Get(delimiter))
	call.Arg(frame, allow_empty)
	call.Arg(frame, maxsplit)
	var r_ret = call.Ret[[2]uintptr](frame)
	var p_self = call.Arg(frame, mmm.Get(selfPtr))
	mmm.API(selfPtr).builtin.StringName.split(p_self.Uintptr(), frame.Array(0), r_ret.Uintptr(), 3)
	var ret = mmm.New[PackedStringArray](ctx.Lifetime, ctx.API, r_ret.Get())
	frame.Free()
	return ret
}

func (self StringName) Rsplit(ctx Context, delimiter String, allow_empty bool, maxsplit Int) PackedStringArray {
	var selfPtr = self
	var frame = call.New()
	call.Arg(frame, mmm.Get(delimiter))
	call.Arg(frame, allow_empty)
	call.Arg(frame, maxsplit)
	var r_ret = call.Ret[[2]uintptr](frame)
	var p_self = call.Arg(frame, mmm.Get(selfPtr))
	mmm.API(selfPtr).builtin.StringName.rsplit(p_self.Uintptr(), frame.Array(0), r_ret.Uintptr(), 3)
	var ret = mmm.New[PackedStringArray](ctx.Lifetime, ctx.API, r_ret.Get())
	frame.Free()
	return ret
}

func (self StringName) SplitFloats(ctx Context, delimiter String, allow_empty bool) PackedFloat64Array {
	var selfPtr = self
	var frame = call.New()
	call.Arg(frame, mmm.Get(delimiter))
	call.Arg(frame, allow_empty)
	var r_ret = call.Ret[[2]uintptr](frame)
	var p_self = call.Arg(frame, mmm.Get(selfPtr))
	mmm.API(selfPtr).builtin.StringName.split_floats(p_self.Uintptr(), frame.Array(0), r_ret.Uintptr(), 2)
	var ret = mmm.New[PackedFloat64Array](ctx.Lifetime, ctx.API, r_ret.Get())
	frame.Free()
	return ret
}

func (self StringName) Join(ctx Context, parts PackedStringArray) String {
	var selfPtr = self
	var frame = call.New()
	call.Arg(frame, mmm.Get(parts))
	var r_ret = call.Ret[uintptr](frame)
	var p_self = call.Arg(frame, mmm.Get(selfPtr))
	mmm.API(selfPtr).builtin.StringName.join(p_self.Uintptr(), frame.Array(0), r_ret.Uintptr(), 1)
	var ret = mmm.New[String](ctx.Lifetime, ctx.API, r_ret.Get())
	frame.Free()
	return ret
}

func (self StringName) ToUpper(ctx Context) String {
	var selfPtr = self
	var frame = call.New()
	var r_ret = call.Ret[uintptr](frame)
	var p_self = call.Arg(frame, mmm.Get(selfPtr))
	mmm.API(selfPtr).builtin.StringName.to_upper(p_self.Uintptr(), frame.Array(0), r_ret.Uintptr(), 0)
	var ret = mmm.New[String](ctx.Lifetime, ctx.API, r_ret.Get())
	frame.Free()
	return ret
}

func (self StringName) ToLower(ctx Context) String {
	var selfPtr = self
	var frame = call.New()
	var r_ret = call.Ret[uintptr](frame)
	var p_self = call.Arg(frame, mmm.Get(selfPtr))
	mmm.API(selfPtr).builtin.StringName.to_lower(p_self.Uintptr(), frame.Array(0), r_ret.Uintptr(), 0)
	var ret = mmm.New[String](ctx.Lifetime, ctx.API, r_ret.Get())
	frame.Free()
	return ret
}

func (self StringName) Left(ctx Context, length Int) String {
	var selfPtr = self
	var frame = call.New()
	call.Arg(frame, length)
	var r_ret = call.Ret[uintptr](frame)
	var p_self = call.Arg(frame, mmm.Get(selfPtr))
	mmm.API(selfPtr).builtin.StringName.left(p_self.Uintptr(), frame.Array(0), r_ret.Uintptr(), 1)
	var ret = mmm.New[String](ctx.Lifetime, ctx.API, r_ret.Get())
	frame.Free()
	return ret
}

func (self StringName) Right(ctx Context, length Int) String {
	var selfPtr = self
	var frame = call.New()
	call.Arg(frame, length)
	var r_ret = call.Ret[uintptr](frame)
	var p_self = call.Arg(frame, mmm.Get(selfPtr))
	mmm.API(selfPtr).builtin.StringName.right(p_self.Uintptr(), frame.Array(0), r_ret.Uintptr(), 1)
	var ret = mmm.New[String](ctx.Lifetime, ctx.API, r_ret.Get())
	frame.Free()
	return ret
}

func (self StringName) StripEdges(ctx Context, left bool, right bool) String {
	var selfPtr = self
	var frame = call.New()
	call.Arg(frame, left)
	call.Arg(frame, right)
	var r_ret = call.Ret[uintptr](frame)
	var p_self = call.Arg(frame, mmm.Get(selfPtr))
	mmm.API(selfPtr).builtin.StringName.strip_edges(p_self.Uintptr(), frame.Array(0), r_ret.Uintptr(), 2)
	var ret = mmm.New[String](ctx.Lifetime, ctx.API, r_ret.Get())
	frame.Free()
	return ret
}

func (self StringName) StripEscapes(ctx Context) String {
	var selfPtr = self
	var frame = call.New()
	var r_ret = call.Ret[uintptr](frame)
	var p_self = call.Arg(frame, mmm.Get(selfPtr))
	mmm.API(selfPtr).builtin.StringName.strip_escapes(p_self.Uintptr(), frame.Array(0), r_ret.Uintptr(), 0)
	var ret = mmm.New[String](ctx.Lifetime, ctx.API, r_ret.Get())
	frame.Free()
	return ret
}

func (self StringName) Lstrip(ctx Context, chars String) String {
	var selfPtr = self
	var frame = call.New()
	call.Arg(frame, mmm.Get(chars))
	var r_ret = call.Ret[uintptr](frame)
	var p_self = call.Arg(frame, mmm.Get(selfPtr))
	mmm.API(selfPtr).builtin.StringName.lstrip(p_self.Uintptr(), frame.Array(0), r_ret.Uintptr(), 1)
	var ret = mmm.New[String](ctx.Lifetime, ctx.API, r_ret.Get())
	frame.Free()
	return ret
}

func (self StringName) Rstrip(ctx Context, chars String) String {
	var selfPtr = self
	var frame = call.New()
	call.Arg(frame, mmm.Get(chars))
	var r_ret = call.Ret[uintptr](frame)
	var p_self = call.Arg(frame, mmm.Get(selfPtr))
	mmm.API(selfPtr).builtin.StringName.rstrip(p_self.Uintptr(), frame.Array(0), r_ret.Uintptr(), 1)
	var ret = mmm.New[String](ctx.Lifetime, ctx.API, r_ret.Get())
	frame.Free()
	return ret
}

func (self StringName) GetExtension(ctx Context) String {
	var selfPtr = self
	var frame = call.New()
	var r_ret = call.Ret[uintptr](frame)
	var p_self = call.Arg(frame, mmm.Get(selfPtr))
	mmm.API(selfPtr).builtin.StringName.get_extension(p_self.Uintptr(), frame.Array(0), r_ret.Uintptr(), 0)
	var ret = mmm.New[String](ctx.Lifetime, ctx.API, r_ret.Get())
	frame.Free()
	return ret
}

func (self StringName) GetBasename(ctx Context) String {
	var selfPtr = self
	var frame = call.New()
	var r_ret = call.Ret[uintptr](frame)
	var p_self = call.Arg(frame, mmm.Get(selfPtr))
	mmm.API(selfPtr).builtin.StringName.get_basename(p_self.Uintptr(), frame.Array(0), r_ret.Uintptr(), 0)
	var ret = mmm.New[String](ctx.Lifetime, ctx.API, r_ret.Get())
	frame.Free()
	return ret
}

func (self StringName) PathJoin(ctx Context, file String) String {
	var selfPtr = self
	var frame = call.New()
	call.Arg(frame, mmm.Get(file))
	var r_ret = call.Ret[uintptr](frame)
	var p_self = call.Arg(frame, mmm.Get(selfPtr))
	mmm.API(selfPtr).builtin.StringName.path_join(p_self.Uintptr(), frame.Array(0), r_ret.Uintptr(), 1)
	var ret = mmm.New[String](ctx.Lifetime, ctx.API, r_ret.Get())
	frame.Free()
	return ret
}

func (self StringName) UnicodeAt(at Int) Int {
	var selfPtr = self
	var frame = call.New()
	call.Arg(frame, at)
	var r_ret = call.Ret[Int](frame)
	var p_self = call.Arg(frame, mmm.Get(selfPtr))
	mmm.API(selfPtr).builtin.StringName.unicode_at(p_self.Uintptr(), frame.Array(0), r_ret.Uintptr(), 1)
	var ret = r_ret.Get()
	frame.Free()
	return ret
}

func (self StringName) Indent(ctx Context, prefix String) String {
	var selfPtr = self
	var frame = call.New()
	call.Arg(frame, mmm.Get(prefix))
	var r_ret = call.Ret[uintptr](frame)
	var p_self = call.Arg(frame, mmm.Get(selfPtr))
	mmm.API(selfPtr).builtin.StringName.indent(p_self.Uintptr(), frame.Array(0), r_ret.Uintptr(), 1)
	var ret = mmm.New[String](ctx.Lifetime, ctx.API, r_ret.Get())
	frame.Free()
	return ret
}

func (self StringName) Dedent(ctx Context) String {
	var selfPtr = self
	var frame = call.New()
	var r_ret = call.Ret[uintptr](frame)
	var p_self = call.Arg(frame, mmm.Get(selfPtr))
	mmm.API(selfPtr).builtin.StringName.dedent(p_self.Uintptr(), frame.Array(0), r_ret.Uintptr(), 0)
	var ret = mmm.New[String](ctx.Lifetime, ctx.API, r_ret.Get())
	frame.Free()
	return ret
}

func (self StringName) Md5Text(ctx Context) String {
	var selfPtr = self
	var frame = call.New()
	var r_ret = call.Ret[uintptr](frame)
	var p_self = call.Arg(frame, mmm.Get(selfPtr))
	mmm.API(selfPtr).builtin.StringName.md5_text(p_self.Uintptr(), frame.Array(0), r_ret.Uintptr(), 0)
	var ret = mmm.New[String](ctx.Lifetime, ctx.API, r_ret.Get())
	frame.Free()
	return ret
}

func (self StringName) Sha1Text(ctx Context) String {
	var selfPtr = self
	var frame = call.New()
	var r_ret = call.Ret[uintptr](frame)
	var p_self = call.Arg(frame, mmm.Get(selfPtr))
	mmm.API(selfPtr).builtin.StringName.sha1_text(p_self.Uintptr(), frame.Array(0), r_ret.Uintptr(), 0)
	var ret = mmm.New[String](ctx.Lifetime, ctx.API, r_ret.Get())
	frame.Free()
	return ret
}

func (self StringName) Sha256Text(ctx Context) String {
	var selfPtr = self
	var frame = call.New()
	var r_ret = call.Ret[uintptr](frame)
	var p_self = call.Arg(frame, mmm.Get(selfPtr))
	mmm.API(selfPtr).builtin.StringName.sha256_text(p_self.Uintptr(), frame.Array(0), r_ret.Uintptr(), 0)
	var ret = mmm.New[String](ctx.Lifetime, ctx.API, r_ret.Get())
	frame.Free()
	return ret
}

func (self StringName) Md5Buffer(ctx Context) PackedByteArray {
	var selfPtr = self
	var frame = call.New()
	var r_ret = call.Ret[[2]uintptr](frame)
	var p_self = call.Arg(frame, mmm.Get(selfPtr))
	mmm.API(selfPtr).builtin.StringName.md5_buffer(p_self.Uintptr(), frame.Array(0), r_ret.Uintptr(), 0)
	var ret = mmm.New[PackedByteArray](ctx.Lifetime, ctx.API, r_ret.Get())
	frame.Free()
	return ret
}

func (self StringName) Sha1Buffer(ctx Context) PackedByteArray {
	var selfPtr = self
	var frame = call.New()
	var r_ret = call.Ret[[2]uintptr](frame)
	var p_self = call.Arg(frame, mmm.Get(selfPtr))
	mmm.API(selfPtr).builtin.StringName.sha1_buffer(p_self.Uintptr(), frame.Array(0), r_ret.Uintptr(), 0)
	var ret = mmm.New[PackedByteArray](ctx.Lifetime, ctx.API, r_ret.Get())
	frame.Free()
	return ret
}

func (self StringName) Sha256Buffer(ctx Context) PackedByteArray {
	var selfPtr = self
	var frame = call.New()
	var r_ret = call.Ret[[2]uintptr](frame)
	var p_self = call.Arg(frame, mmm.Get(selfPtr))
	mmm.API(selfPtr).builtin.StringName.sha256_buffer(p_self.Uintptr(), frame.Array(0), r_ret.Uintptr(), 0)
	var ret = mmm.New[PackedByteArray](ctx.Lifetime, ctx.API, r_ret.Get())
	frame.Free()
	return ret
}

func (self StringName) IsEmpty() bool {
	var selfPtr = self
	var frame = call.New()
	var r_ret = call.Ret[bool](frame)
	var p_self = call.Arg(frame, mmm.Get(selfPtr))
	mmm.API(selfPtr).builtin.StringName.is_empty(p_self.Uintptr(), frame.Array(0), r_ret.Uintptr(), 0)
	var ret = r_ret.Get()
	frame.Free()
	return ret
}

func (self StringName) Contains(what String) bool {
	var selfPtr = self
	var frame = call.New()
	call.Arg(frame, mmm.Get(what))
	var r_ret = call.Ret[bool](frame)
	var p_self = call.Arg(frame, mmm.Get(selfPtr))
	mmm.API(selfPtr).builtin.StringName.contains(p_self.Uintptr(), frame.Array(0), r_ret.Uintptr(), 1)
	var ret = r_ret.Get()
	frame.Free()
	return ret
}

func (self StringName) IsAbsolutePath() bool {
	var selfPtr = self
	var frame = call.New()
	var r_ret = call.Ret[bool](frame)
	var p_self = call.Arg(frame, mmm.Get(selfPtr))
	mmm.API(selfPtr).builtin.StringName.is_absolute_path(p_self.Uintptr(), frame.Array(0), r_ret.Uintptr(), 0)
	var ret = r_ret.Get()
	frame.Free()
	return ret
}

func (self StringName) IsRelativePath() bool {
	var selfPtr = self
	var frame = call.New()
	var r_ret = call.Ret[bool](frame)
	var p_self = call.Arg(frame, mmm.Get(selfPtr))
	mmm.API(selfPtr).builtin.StringName.is_relative_path(p_self.Uintptr(), frame.Array(0), r_ret.Uintptr(), 0)
	var ret = r_ret.Get()
	frame.Free()
	return ret
}

func (self StringName) SimplifyPath(ctx Context) String {
	var selfPtr = self
	var frame = call.New()
	var r_ret = call.Ret[uintptr](frame)
	var p_self = call.Arg(frame, mmm.Get(selfPtr))
	mmm.API(selfPtr).builtin.StringName.simplify_path(p_self.Uintptr(), frame.Array(0), r_ret.Uintptr(), 0)
	var ret = mmm.New[String](ctx.Lifetime, ctx.API, r_ret.Get())
	frame.Free()
	return ret
}

func (self StringName) GetBaseDir(ctx Context) String {
	var selfPtr = self
	var frame = call.New()
	var r_ret = call.Ret[uintptr](frame)
	var p_self = call.Arg(frame, mmm.Get(selfPtr))
	mmm.API(selfPtr).builtin.StringName.get_base_dir(p_self.Uintptr(), frame.Array(0), r_ret.Uintptr(), 0)
	var ret = mmm.New[String](ctx.Lifetime, ctx.API, r_ret.Get())
	frame.Free()
	return ret
}

func (self StringName) GetFile(ctx Context) String {
	var selfPtr = self
	var frame = call.New()
	var r_ret = call.Ret[uintptr](frame)
	var p_self = call.Arg(frame, mmm.Get(selfPtr))
	mmm.API(selfPtr).builtin.StringName.get_file(p_self.Uintptr(), frame.Array(0), r_ret.Uintptr(), 0)
	var ret = mmm.New[String](ctx.Lifetime, ctx.API, r_ret.Get())
	frame.Free()
	return ret
}

func (self StringName) XmlEscape(ctx Context, escape_quotes bool) String {
	var selfPtr = self
	var frame = call.New()
	call.Arg(frame, escape_quotes)
	var r_ret = call.Ret[uintptr](frame)
	var p_self = call.Arg(frame, mmm.Get(selfPtr))
	mmm.API(selfPtr).builtin.StringName.xml_escape(p_self.Uintptr(), frame.Array(0), r_ret.Uintptr(), 1)
	var ret = mmm.New[String](ctx.Lifetime, ctx.API, r_ret.Get())
	frame.Free()
	return ret
}

func (self StringName) XmlUnescape(ctx Context) String {
	var selfPtr = self
	var frame = call.New()
	var r_ret = call.Ret[uintptr](frame)
	var p_self = call.Arg(frame, mmm.Get(selfPtr))
	mmm.API(selfPtr).builtin.StringName.xml_unescape(p_self.Uintptr(), frame.Array(0), r_ret.Uintptr(), 0)
	var ret = mmm.New[String](ctx.Lifetime, ctx.API, r_ret.Get())
	frame.Free()
	return ret
}

func (self StringName) UriEncode(ctx Context) String {
	var selfPtr = self
	var frame = call.New()
	var r_ret = call.Ret[uintptr](frame)
	var p_self = call.Arg(frame, mmm.Get(selfPtr))
	mmm.API(selfPtr).builtin.StringName.uri_encode(p_self.Uintptr(), frame.Array(0), r_ret.Uintptr(), 0)
	var ret = mmm.New[String](ctx.Lifetime, ctx.API, r_ret.Get())
	frame.Free()
	return ret
}

func (self StringName) UriDecode(ctx Context) String {
	var selfPtr = self
	var frame = call.New()
	var r_ret = call.Ret[uintptr](frame)
	var p_self = call.Arg(frame, mmm.Get(selfPtr))
	mmm.API(selfPtr).builtin.StringName.uri_decode(p_self.Uintptr(), frame.Array(0), r_ret.Uintptr(), 0)
	var ret = mmm.New[String](ctx.Lifetime, ctx.API, r_ret.Get())
	frame.Free()
	return ret
}

func (self StringName) CEscape(ctx Context) String {
	var selfPtr = self
	var frame = call.New()
	var r_ret = call.Ret[uintptr](frame)
	var p_self = call.Arg(frame, mmm.Get(selfPtr))
	mmm.API(selfPtr).builtin.StringName.c_escape(p_self.Uintptr(), frame.Array(0), r_ret.Uintptr(), 0)
	var ret = mmm.New[String](ctx.Lifetime, ctx.API, r_ret.Get())
	frame.Free()
	return ret
}

func (self StringName) CUnescape(ctx Context) String {
	var selfPtr = self
	var frame = call.New()
	var r_ret = call.Ret[uintptr](frame)
	var p_self = call.Arg(frame, mmm.Get(selfPtr))
	mmm.API(selfPtr).builtin.StringName.c_unescape(p_self.Uintptr(), frame.Array(0), r_ret.Uintptr(), 0)
	var ret = mmm.New[String](ctx.Lifetime, ctx.API, r_ret.Get())
	frame.Free()
	return ret
}

func (self StringName) JsonEscape(ctx Context) String {
	var selfPtr = self
	var frame = call.New()
	var r_ret = call.Ret[uintptr](frame)
	var p_self = call.Arg(frame, mmm.Get(selfPtr))
	mmm.API(selfPtr).builtin.StringName.json_escape(p_self.Uintptr(), frame.Array(0), r_ret.Uintptr(), 0)
	var ret = mmm.New[String](ctx.Lifetime, ctx.API, r_ret.Get())
	frame.Free()
	return ret
}

func (self StringName) ValidateNodeName(ctx Context) String {
	var selfPtr = self
	var frame = call.New()
	var r_ret = call.Ret[uintptr](frame)
	var p_self = call.Arg(frame, mmm.Get(selfPtr))
	mmm.API(selfPtr).builtin.StringName.validate_node_name(p_self.Uintptr(), frame.Array(0), r_ret.Uintptr(), 0)
	var ret = mmm.New[String](ctx.Lifetime, ctx.API, r_ret.Get())
	frame.Free()
	return ret
}

func (self StringName) ValidateFilename(ctx Context) String {
	var selfPtr = self
	var frame = call.New()
	var r_ret = call.Ret[uintptr](frame)
	var p_self = call.Arg(frame, mmm.Get(selfPtr))
	mmm.API(selfPtr).builtin.StringName.validate_filename(p_self.Uintptr(), frame.Array(0), r_ret.Uintptr(), 0)
	var ret = mmm.New[String](ctx.Lifetime, ctx.API, r_ret.Get())
	frame.Free()
	return ret
}

func (self StringName) IsValidIdentifier() bool {
	var selfPtr = self
	var frame = call.New()
	var r_ret = call.Ret[bool](frame)
	var p_self = call.Arg(frame, mmm.Get(selfPtr))
	mmm.API(selfPtr).builtin.StringName.is_valid_identifier(p_self.Uintptr(), frame.Array(0), r_ret.Uintptr(), 0)
	var ret = r_ret.Get()
	frame.Free()
	return ret
}

func (self StringName) IsValidInt() bool {
	var selfPtr = self
	var frame = call.New()
	var r_ret = call.Ret[bool](frame)
	var p_self = call.Arg(frame, mmm.Get(selfPtr))
	mmm.API(selfPtr).builtin.StringName.is_valid_int(p_self.Uintptr(), frame.Array(0), r_ret.Uintptr(), 0)
	var ret = r_ret.Get()
	frame.Free()
	return ret
}

func (self StringName) IsValidFloat() bool {
	var selfPtr = self
	var frame = call.New()
	var r_ret = call.Ret[bool](frame)
	var p_self = call.Arg(frame, mmm.Get(selfPtr))
	mmm.API(selfPtr).builtin.StringName.is_valid_float(p_self.Uintptr(), frame.Array(0), r_ret.Uintptr(), 0)
	var ret = r_ret.Get()
	frame.Free()
	return ret
}

func (self StringName) IsValidHexNumber(with_prefix bool) bool {
	var selfPtr = self
	var frame = call.New()
	call.Arg(frame, with_prefix)
	var r_ret = call.Ret[bool](frame)
	var p_self = call.Arg(frame, mmm.Get(selfPtr))
	mmm.API(selfPtr).builtin.StringName.is_valid_hex_number(p_self.Uintptr(), frame.Array(0), r_ret.Uintptr(), 1)
	var ret = r_ret.Get()
	frame.Free()
	return ret
}

func (self StringName) IsValidHtmlColor() bool {
	var selfPtr = self
	var frame = call.New()
	var r_ret = call.Ret[bool](frame)
	var p_self = call.Arg(frame, mmm.Get(selfPtr))
	mmm.API(selfPtr).builtin.StringName.is_valid_html_color(p_self.Uintptr(), frame.Array(0), r_ret.Uintptr(), 0)
	var ret = r_ret.Get()
	frame.Free()
	return ret
}

func (self StringName) IsValidIpAddress() bool {
	var selfPtr = self
	var frame = call.New()
	var r_ret = call.Ret[bool](frame)
	var p_self = call.Arg(frame, mmm.Get(selfPtr))
	mmm.API(selfPtr).builtin.StringName.is_valid_ip_address(p_self.Uintptr(), frame.Array(0), r_ret.Uintptr(), 0)
	var ret = r_ret.Get()
	frame.Free()
	return ret
}

func (self StringName) IsValidFilename() bool {
	var selfPtr = self
	var frame = call.New()
	var r_ret = call.Ret[bool](frame)
	var p_self = call.Arg(frame, mmm.Get(selfPtr))
	mmm.API(selfPtr).builtin.StringName.is_valid_filename(p_self.Uintptr(), frame.Array(0), r_ret.Uintptr(), 0)
	var ret = r_ret.Get()
	frame.Free()
	return ret
}

func (self StringName) ToInt() Int {
	var selfPtr = self
	var frame = call.New()
	var r_ret = call.Ret[Int](frame)
	var p_self = call.Arg(frame, mmm.Get(selfPtr))
	mmm.API(selfPtr).builtin.StringName.to_int(p_self.Uintptr(), frame.Array(0), r_ret.Uintptr(), 0)
	var ret = r_ret.Get()
	frame.Free()
	return ret
}

func (self StringName) ToFloat() Float {
	var selfPtr = self
	var frame = call.New()
	var r_ret = call.Ret[Float](frame)
	var p_self = call.Arg(frame, mmm.Get(selfPtr))
	mmm.API(selfPtr).builtin.StringName.to_float(p_self.Uintptr(), frame.Array(0), r_ret.Uintptr(), 0)
	var ret = r_ret.Get()
	frame.Free()
	return ret
}

func (self StringName) HexToInt() Int {
	var selfPtr = self
	var frame = call.New()
	var r_ret = call.Ret[Int](frame)
	var p_self = call.Arg(frame, mmm.Get(selfPtr))
	mmm.API(selfPtr).builtin.StringName.hex_to_int(p_self.Uintptr(), frame.Array(0), r_ret.Uintptr(), 0)
	var ret = r_ret.Get()
	frame.Free()
	return ret
}

func (self StringName) BinToInt() Int {
	var selfPtr = self
	var frame = call.New()
	var r_ret = call.Ret[Int](frame)
	var p_self = call.Arg(frame, mmm.Get(selfPtr))
	mmm.API(selfPtr).builtin.StringName.bin_to_int(p_self.Uintptr(), frame.Array(0), r_ret.Uintptr(), 0)
	var ret = r_ret.Get()
	frame.Free()
	return ret
}

func (self StringName) Lpad(ctx Context, min_length Int, character String) String {
	var selfPtr = self
	var frame = call.New()
	call.Arg(frame, min_length)
	call.Arg(frame, mmm.Get(character))
	var r_ret = call.Ret[uintptr](frame)
	var p_self = call.Arg(frame, mmm.Get(selfPtr))
	mmm.API(selfPtr).builtin.StringName.lpad(p_self.Uintptr(), frame.Array(0), r_ret.Uintptr(), 2)
	var ret = mmm.New[String](ctx.Lifetime, ctx.API, r_ret.Get())
	frame.Free()
	return ret
}

func (self StringName) Rpad(ctx Context, min_length Int, character String) String {
	var selfPtr = self
	var frame = call.New()
	call.Arg(frame, min_length)
	call.Arg(frame, mmm.Get(character))
	var r_ret = call.Ret[uintptr](frame)
	var p_self = call.Arg(frame, mmm.Get(selfPtr))
	mmm.API(selfPtr).builtin.StringName.rpad(p_self.Uintptr(), frame.Array(0), r_ret.Uintptr(), 2)
	var ret = mmm.New[String](ctx.Lifetime, ctx.API, r_ret.Get())
	frame.Free()
	return ret
}

func (self StringName) PadDecimals(ctx Context, digits Int) String {
	var selfPtr = self
	var frame = call.New()
	call.Arg(frame, digits)
	var r_ret = call.Ret[uintptr](frame)
	var p_self = call.Arg(frame, mmm.Get(selfPtr))
	mmm.API(selfPtr).builtin.StringName.pad_decimals(p_self.Uintptr(), frame.Array(0), r_ret.Uintptr(), 1)
	var ret = mmm.New[String](ctx.Lifetime, ctx.API, r_ret.Get())
	frame.Free()
	return ret
}

func (self StringName) PadZeros(ctx Context, digits Int) String {
	var selfPtr = self
	var frame = call.New()
	call.Arg(frame, digits)
	var r_ret = call.Ret[uintptr](frame)
	var p_self = call.Arg(frame, mmm.Get(selfPtr))
	mmm.API(selfPtr).builtin.StringName.pad_zeros(p_self.Uintptr(), frame.Array(0), r_ret.Uintptr(), 1)
	var ret = mmm.New[String](ctx.Lifetime, ctx.API, r_ret.Get())
	frame.Free()
	return ret
}

func (self StringName) TrimPrefix(ctx Context, prefix String) String {
	var selfPtr = self
	var frame = call.New()
	call.Arg(frame, mmm.Get(prefix))
	var r_ret = call.Ret[uintptr](frame)
	var p_self = call.Arg(frame, mmm.Get(selfPtr))
	mmm.API(selfPtr).builtin.StringName.trim_prefix(p_self.Uintptr(), frame.Array(0), r_ret.Uintptr(), 1)
	var ret = mmm.New[String](ctx.Lifetime, ctx.API, r_ret.Get())
	frame.Free()
	return ret
}

func (self StringName) TrimSuffix(ctx Context, suffix String) String {
	var selfPtr = self
	var frame = call.New()
	call.Arg(frame, mmm.Get(suffix))
	var r_ret = call.Ret[uintptr](frame)
	var p_self = call.Arg(frame, mmm.Get(selfPtr))
	mmm.API(selfPtr).builtin.StringName.trim_suffix(p_self.Uintptr(), frame.Array(0), r_ret.Uintptr(), 1)
	var ret = mmm.New[String](ctx.Lifetime, ctx.API, r_ret.Get())
	frame.Free()
	return ret
}

func (self StringName) ToAsciiBuffer(ctx Context) PackedByteArray {
	var selfPtr = self
	var frame = call.New()
	var r_ret = call.Ret[[2]uintptr](frame)
	var p_self = call.Arg(frame, mmm.Get(selfPtr))
	mmm.API(selfPtr).builtin.StringName.to_ascii_buffer(p_self.Uintptr(), frame.Array(0), r_ret.Uintptr(), 0)
	var ret = mmm.New[PackedByteArray](ctx.Lifetime, ctx.API, r_ret.Get())
	frame.Free()
	return ret
}

func (self StringName) ToUtf8Buffer(ctx Context) PackedByteArray {
	var selfPtr = self
	var frame = call.New()
	var r_ret = call.Ret[[2]uintptr](frame)
	var p_self = call.Arg(frame, mmm.Get(selfPtr))
	mmm.API(selfPtr).builtin.StringName.to_utf8_buffer(p_self.Uintptr(), frame.Array(0), r_ret.Uintptr(), 0)
	var ret = mmm.New[PackedByteArray](ctx.Lifetime, ctx.API, r_ret.Get())
	frame.Free()
	return ret
}

func (self StringName) ToUtf16Buffer(ctx Context) PackedByteArray {
	var selfPtr = self
	var frame = call.New()
	var r_ret = call.Ret[[2]uintptr](frame)
	var p_self = call.Arg(frame, mmm.Get(selfPtr))
	mmm.API(selfPtr).builtin.StringName.to_utf16_buffer(p_self.Uintptr(), frame.Array(0), r_ret.Uintptr(), 0)
	var ret = mmm.New[PackedByteArray](ctx.Lifetime, ctx.API, r_ret.Get())
	frame.Free()
	return ret
}

func (self StringName) ToUtf32Buffer(ctx Context) PackedByteArray {
	var selfPtr = self
	var frame = call.New()
	var r_ret = call.Ret[[2]uintptr](frame)
	var p_self = call.Arg(frame, mmm.Get(selfPtr))
	mmm.API(selfPtr).builtin.StringName.to_utf32_buffer(p_self.Uintptr(), frame.Array(0), r_ret.Uintptr(), 0)
	var ret = mmm.New[PackedByteArray](ctx.Lifetime, ctx.API, r_ret.Get())
	frame.Free()
	return ret
}

func (self StringName) HexDecode(ctx Context) PackedByteArray {
	var selfPtr = self
	var frame = call.New()
	var r_ret = call.Ret[[2]uintptr](frame)
	var p_self = call.Arg(frame, mmm.Get(selfPtr))
	mmm.API(selfPtr).builtin.StringName.hex_decode(p_self.Uintptr(), frame.Array(0), r_ret.Uintptr(), 0)
	var ret = mmm.New[PackedByteArray](ctx.Lifetime, ctx.API, r_ret.Get())
	frame.Free()
	return ret
}

func (self StringName) ToWcharBuffer(ctx Context) PackedByteArray {
	var selfPtr = self
	var frame = call.New()
	var r_ret = call.Ret[[2]uintptr](frame)
	var p_self = call.Arg(frame, mmm.Get(selfPtr))
	mmm.API(selfPtr).builtin.StringName.to_wchar_buffer(p_self.Uintptr(), frame.Array(0), r_ret.Uintptr(), 0)
	var ret = mmm.New[PackedByteArray](ctx.Lifetime, ctx.API, r_ret.Get())
	frame.Free()
	return ret
}

func (self StringName) Hash() Int {
	var selfPtr = self
	var frame = call.New()
	var r_ret = call.Ret[Int](frame)
	var p_self = call.Arg(frame, mmm.Get(selfPtr))
	mmm.API(selfPtr).builtin.StringName.hash(p_self.Uintptr(), frame.Array(0), r_ret.Uintptr(), 0)
	var ret = r_ret.Get()
	frame.Free()
	return ret
}

func (self NodePath) IsAbsolute() bool {
	var selfPtr = self
	var frame = call.New()
	var r_ret = call.Ret[bool](frame)
	var p_self = call.Arg(frame, mmm.Get(selfPtr))
	mmm.API(selfPtr).builtin.NodePath.is_absolute(p_self.Uintptr(), frame.Array(0), r_ret.Uintptr(), 0)
	var ret = r_ret.Get()
	frame.Free()
	return ret
}

func (self NodePath) GetNameCount() Int {
	var selfPtr = self
	var frame = call.New()
	var r_ret = call.Ret[Int](frame)
	var p_self = call.Arg(frame, mmm.Get(selfPtr))
	mmm.API(selfPtr).builtin.NodePath.get_name_count(p_self.Uintptr(), frame.Array(0), r_ret.Uintptr(), 0)
	var ret = r_ret.Get()
	frame.Free()
	return ret
}

func (self NodePath) GetName(ctx Context, idx Int) StringName {
	var selfPtr = self
	var frame = call.New()
	call.Arg(frame, idx)
	var r_ret = call.Ret[uintptr](frame)
	var p_self = call.Arg(frame, mmm.Get(selfPtr))
	mmm.API(selfPtr).builtin.NodePath.get_name(p_self.Uintptr(), frame.Array(0), r_ret.Uintptr(), 1)
	var ret = mmm.New[StringName](ctx.Lifetime, ctx.API, r_ret.Get())
	frame.Free()
	return ret
}

func (self NodePath) GetSubnameCount() Int {
	var selfPtr = self
	var frame = call.New()
	var r_ret = call.Ret[Int](frame)
	var p_self = call.Arg(frame, mmm.Get(selfPtr))
	mmm.API(selfPtr).builtin.NodePath.get_subname_count(p_self.Uintptr(), frame.Array(0), r_ret.Uintptr(), 0)
	var ret = r_ret.Get()
	frame.Free()
	return ret
}

func (self NodePath) Hash() Int {
	var selfPtr = self
	var frame = call.New()
	var r_ret = call.Ret[Int](frame)
	var p_self = call.Arg(frame, mmm.Get(selfPtr))
	mmm.API(selfPtr).builtin.NodePath.hash(p_self.Uintptr(), frame.Array(0), r_ret.Uintptr(), 0)
	var ret = r_ret.Get()
	frame.Free()
	return ret
}

func (self NodePath) GetSubname(ctx Context, idx Int) StringName {
	var selfPtr = self
	var frame = call.New()
	call.Arg(frame, idx)
	var r_ret = call.Ret[uintptr](frame)
	var p_self = call.Arg(frame, mmm.Get(selfPtr))
	mmm.API(selfPtr).builtin.NodePath.get_subname(p_self.Uintptr(), frame.Array(0), r_ret.Uintptr(), 1)
	var ret = mmm.New[StringName](ctx.Lifetime, ctx.API, r_ret.Get())
	frame.Free()
	return ret
}

func (self NodePath) GetConcatenatedNames(ctx Context) StringName {
	var selfPtr = self
	var frame = call.New()
	var r_ret = call.Ret[uintptr](frame)
	var p_self = call.Arg(frame, mmm.Get(selfPtr))
	mmm.API(selfPtr).builtin.NodePath.get_concatenated_names(p_self.Uintptr(), frame.Array(0), r_ret.Uintptr(), 0)
	var ret = mmm.New[StringName](ctx.Lifetime, ctx.API, r_ret.Get())
	frame.Free()
	return ret
}

func (self NodePath) GetConcatenatedSubnames(ctx Context) StringName {
	var selfPtr = self
	var frame = call.New()
	var r_ret = call.Ret[uintptr](frame)
	var p_self = call.Arg(frame, mmm.Get(selfPtr))
	mmm.API(selfPtr).builtin.NodePath.get_concatenated_subnames(p_self.Uintptr(), frame.Array(0), r_ret.Uintptr(), 0)
	var ret = mmm.New[StringName](ctx.Lifetime, ctx.API, r_ret.Get())
	frame.Free()
	return ret
}

func (self NodePath) GetAsPropertyPath(ctx Context) NodePath {
	var selfPtr = self
	var frame = call.New()
	var r_ret = call.Ret[uintptr](frame)
	var p_self = call.Arg(frame, mmm.Get(selfPtr))
	mmm.API(selfPtr).builtin.NodePath.get_as_property_path(p_self.Uintptr(), frame.Array(0), r_ret.Uintptr(), 0)
	var ret = mmm.New[NodePath](ctx.Lifetime, ctx.API, r_ret.Get())
	frame.Free()
	return ret
}

func (self NodePath) IsEmpty() bool {
	var selfPtr = self
	var frame = call.New()
	var r_ret = call.Ret[bool](frame)
	var p_self = call.Arg(frame, mmm.Get(selfPtr))
	mmm.API(selfPtr).builtin.NodePath.is_empty(p_self.Uintptr(), frame.Array(0), r_ret.Uintptr(), 0)
	var ret = r_ret.Get()
	frame.Free()
	return ret
}

func (self Callable) Callv(ctx Context, arguments Array) Variant {
	var selfPtr = self
	var frame = call.New()
	call.Arg(frame, mmm.Get(arguments))
	var r_ret = call.Ret[[3]uintptr](frame)
	var p_self = call.Arg(frame, mmm.Get(selfPtr))
	mmm.API(selfPtr).builtin.Callable.callv(p_self.Uintptr(), frame.Array(0), r_ret.Uintptr(), 1)
	var ret = mmm.New[Variant](ctx.Lifetime, ctx.API, r_ret.Get())
	frame.Free()
	return ret
}

func (self Callable) IsNull() bool {
	var selfPtr = self
	var frame = call.New()
	var r_ret = call.Ret[bool](frame)
	var p_self = call.Arg(frame, mmm.Get(selfPtr))
	mmm.API(selfPtr).builtin.Callable.is_null(p_self.Uintptr(), frame.Array(0), r_ret.Uintptr(), 0)
	var ret = r_ret.Get()
	frame.Free()
	return ret
}

func (self Callable) IsCustom() bool {
	var selfPtr = self
	var frame = call.New()
	var r_ret = call.Ret[bool](frame)
	var p_self = call.Arg(frame, mmm.Get(selfPtr))
	mmm.API(selfPtr).builtin.Callable.is_custom(p_self.Uintptr(), frame.Array(0), r_ret.Uintptr(), 0)
	var ret = r_ret.Get()
	frame.Free()
	return ret
}

func (self Callable) IsStandard() bool {
	var selfPtr = self
	var frame = call.New()
	var r_ret = call.Ret[bool](frame)
	var p_self = call.Arg(frame, mmm.Get(selfPtr))
	mmm.API(selfPtr).builtin.Callable.is_standard(p_self.Uintptr(), frame.Array(0), r_ret.Uintptr(), 0)
	var ret = r_ret.Get()
	frame.Free()
	return ret
}

func (self Callable) IsValid() bool {
	var selfPtr = self
	var frame = call.New()
	var r_ret = call.Ret[bool](frame)
	var p_self = call.Arg(frame, mmm.Get(selfPtr))
	mmm.API(selfPtr).builtin.Callable.is_valid(p_self.Uintptr(), frame.Array(0), r_ret.Uintptr(), 0)
	var ret = r_ret.Get()
	frame.Free()
	return ret
}

func (self Callable) GetObject() Object {
	var selfPtr = self
	var frame = call.New()
	var r_ret = call.Ret[Object](frame)
	var p_self = call.Arg(frame, mmm.Get(selfPtr))
	mmm.API(selfPtr).builtin.Callable.get_object(p_self.Uintptr(), frame.Array(0), r_ret.Uintptr(), 0)
	var ret = r_ret.Get()
	frame.Free()
	return ret
}

func (self Callable) GetObjectId() Int {
	var selfPtr = self
	var frame = call.New()
	var r_ret = call.Ret[Int](frame)
	var p_self = call.Arg(frame, mmm.Get(selfPtr))
	mmm.API(selfPtr).builtin.Callable.get_object_id(p_self.Uintptr(), frame.Array(0), r_ret.Uintptr(), 0)
	var ret = r_ret.Get()
	frame.Free()
	return ret
}

func (self Callable) GetMethod(ctx Context) StringName {
	var selfPtr = self
	var frame = call.New()
	var r_ret = call.Ret[uintptr](frame)
	var p_self = call.Arg(frame, mmm.Get(selfPtr))
	mmm.API(selfPtr).builtin.Callable.get_method(p_self.Uintptr(), frame.Array(0), r_ret.Uintptr(), 0)
	var ret = mmm.New[StringName](ctx.Lifetime, ctx.API, r_ret.Get())
	frame.Free()
	return ret
}

func (self Callable) GetBoundArgumentsCount() Int {
	var selfPtr = self
	var frame = call.New()
	var r_ret = call.Ret[Int](frame)
	var p_self = call.Arg(frame, mmm.Get(selfPtr))
	mmm.API(selfPtr).builtin.Callable.get_bound_arguments_count(p_self.Uintptr(), frame.Array(0), r_ret.Uintptr(), 0)
	var ret = r_ret.Get()
	frame.Free()
	return ret
}

func (self Callable) GetBoundArguments(ctx Context) Array {
	var selfPtr = self
	var frame = call.New()
	var r_ret = call.Ret[uintptr](frame)
	var p_self = call.Arg(frame, mmm.Get(selfPtr))
	mmm.API(selfPtr).builtin.Callable.get_bound_arguments(p_self.Uintptr(), frame.Array(0), r_ret.Uintptr(), 0)
	var ret = mmm.New[Array](ctx.Lifetime, ctx.API, r_ret.Get())
	frame.Free()
	return ret
}

func (self Callable) Hash() Int {
	var selfPtr = self
	var frame = call.New()
	var r_ret = call.Ret[Int](frame)
	var p_self = call.Arg(frame, mmm.Get(selfPtr))
	mmm.API(selfPtr).builtin.Callable.hash(p_self.Uintptr(), frame.Array(0), r_ret.Uintptr(), 0)
	var ret = r_ret.Get()
	frame.Free()
	return ret
}

func (self Callable) Bindv(ctx Context, arguments Array) Callable {
	var selfPtr = self
	var frame = call.New()
	call.Arg(frame, mmm.Get(arguments))
	var r_ret = call.Ret[[2]uintptr](frame)
	var p_self = call.Arg(frame, mmm.Get(selfPtr))
	mmm.API(selfPtr).builtin.Callable.bindv(p_self.Uintptr(), frame.Array(0), r_ret.Uintptr(), 1)
	var ret = mmm.New[Callable](ctx.Lifetime, ctx.API, r_ret.Get())
	frame.Free()
	return ret
}

func (self Callable) Unbind(ctx Context, argcount Int) Callable {
	var selfPtr = self
	var frame = call.New()
	call.Arg(frame, argcount)
	var r_ret = call.Ret[[2]uintptr](frame)
	var p_self = call.Arg(frame, mmm.Get(selfPtr))
	mmm.API(selfPtr).builtin.Callable.unbind(p_self.Uintptr(), frame.Array(0), r_ret.Uintptr(), 1)
	var ret = mmm.New[Callable](ctx.Lifetime, ctx.API, r_ret.Get())
	frame.Free()
	return ret
}

func (self Callable) Call(ctx Context) Variant {
	var selfPtr = self
	var frame = call.New()
	var r_ret = call.Ret[[3]uintptr](frame)
	var p_self = call.Arg(frame, mmm.Get(selfPtr))
	mmm.API(selfPtr).builtin.Callable.call(p_self.Uintptr(), frame.Array(0), r_ret.Uintptr(), 0)
	var ret = mmm.New[Variant](ctx.Lifetime, ctx.API, r_ret.Get())
	frame.Free()
	return ret
}

func (self Callable) CallDeferred() {
	var selfPtr = self
	var frame = call.New()
	var r_ret call.Nil
	var p_self = call.Arg(frame, mmm.Get(selfPtr))
	mmm.API(selfPtr).builtin.Callable.call_deferred(p_self.Uintptr(), frame.Array(0), r_ret.Uintptr(), 0)
	frame.Free()
}

func (self Callable) Rpc() {
	var selfPtr = self
	var frame = call.New()
	var r_ret call.Nil
	var p_self = call.Arg(frame, mmm.Get(selfPtr))
	mmm.API(selfPtr).builtin.Callable.rpc(p_self.Uintptr(), frame.Array(0), r_ret.Uintptr(), 0)
	frame.Free()
}

func (self Callable) RpcId(peer_id Int) {
	var selfPtr = self
	var frame = call.New()
	call.Arg(frame, peer_id)
	var r_ret call.Nil
	var p_self = call.Arg(frame, mmm.Get(selfPtr))
	mmm.API(selfPtr).builtin.Callable.rpc_id(p_self.Uintptr(), frame.Array(0), r_ret.Uintptr(), 1)
	frame.Free()
}

func (self Callable) Bind(ctx Context) Callable {
	var selfPtr = self
	var frame = call.New()
	var r_ret = call.Ret[[2]uintptr](frame)
	var p_self = call.Arg(frame, mmm.Get(selfPtr))
	mmm.API(selfPtr).builtin.Callable.bind(p_self.Uintptr(), frame.Array(0), r_ret.Uintptr(), 0)
	var ret = mmm.New[Callable](ctx.Lifetime, ctx.API, r_ret.Get())
	frame.Free()
	return ret
}

func (self Signal) IsNull() bool {
	var selfPtr = self
	var frame = call.New()
	var r_ret = call.Ret[bool](frame)
	var p_self = call.Arg(frame, mmm.Get(selfPtr))
	mmm.API(selfPtr).builtin.Signal.is_null(p_self.Uintptr(), frame.Array(0), r_ret.Uintptr(), 0)
	var ret = r_ret.Get()
	frame.Free()
	return ret
}

func (self Signal) GetObject() Object {
	var selfPtr = self
	var frame = call.New()
	var r_ret = call.Ret[Object](frame)
	var p_self = call.Arg(frame, mmm.Get(selfPtr))
	mmm.API(selfPtr).builtin.Signal.get_object(p_self.Uintptr(), frame.Array(0), r_ret.Uintptr(), 0)
	var ret = r_ret.Get()
	frame.Free()
	return ret
}

func (self Signal) GetObjectId() Int {
	var selfPtr = self
	var frame = call.New()
	var r_ret = call.Ret[Int](frame)
	var p_self = call.Arg(frame, mmm.Get(selfPtr))
	mmm.API(selfPtr).builtin.Signal.get_object_id(p_self.Uintptr(), frame.Array(0), r_ret.Uintptr(), 0)
	var ret = r_ret.Get()
	frame.Free()
	return ret
}

func (self Signal) GetName(ctx Context) StringName {
	var selfPtr = self
	var frame = call.New()
	var r_ret = call.Ret[uintptr](frame)
	var p_self = call.Arg(frame, mmm.Get(selfPtr))
	mmm.API(selfPtr).builtin.Signal.get_name(p_self.Uintptr(), frame.Array(0), r_ret.Uintptr(), 0)
	var ret = mmm.New[StringName](ctx.Lifetime, ctx.API, r_ret.Get())
	frame.Free()
	return ret
}

func (self Signal) Connect(callable Callable, flags Int) Int {
	var selfPtr = self
	var frame = call.New()
	call.Arg(frame, mmm.Get(callable))
	call.Arg(frame, flags)
	var r_ret = call.Ret[Int](frame)
	var p_self = call.Arg(frame, mmm.Get(selfPtr))
	mmm.API(selfPtr).builtin.Signal.connect(p_self.Uintptr(), frame.Array(0), r_ret.Uintptr(), 2)
	var ret = r_ret.Get()
	frame.Free()
	return ret
}

func (self Signal) Disconnect(callable Callable) {
	var selfPtr = self
	var frame = call.New()
	call.Arg(frame, mmm.Get(callable))
	var r_ret call.Nil
	var p_self = call.Arg(frame, mmm.Get(selfPtr))
	mmm.API(selfPtr).builtin.Signal.disconnect(p_self.Uintptr(), frame.Array(0), r_ret.Uintptr(), 1)
	frame.Free()
}

func (self Signal) IsConnected(callable Callable) bool {
	var selfPtr = self
	var frame = call.New()
	call.Arg(frame, mmm.Get(callable))
	var r_ret = call.Ret[bool](frame)
	var p_self = call.Arg(frame, mmm.Get(selfPtr))
	mmm.API(selfPtr).builtin.Signal.is_connected(p_self.Uintptr(), frame.Array(0), r_ret.Uintptr(), 1)
	var ret = r_ret.Get()
	frame.Free()
	return ret
}

func (self Signal) GetConnections(ctx Context) Array {
	var selfPtr = self
	var frame = call.New()
	var r_ret = call.Ret[uintptr](frame)
	var p_self = call.Arg(frame, mmm.Get(selfPtr))
	mmm.API(selfPtr).builtin.Signal.get_connections(p_self.Uintptr(), frame.Array(0), r_ret.Uintptr(), 0)
	var ret = mmm.New[Array](ctx.Lifetime, ctx.API, r_ret.Get())
	frame.Free()
	return ret
}

func (self Signal) Emit() {
	var selfPtr = self
	var frame = call.New()
	var r_ret call.Nil
	var p_self = call.Arg(frame, mmm.Get(selfPtr))
	mmm.API(selfPtr).builtin.Signal.emit(p_self.Uintptr(), frame.Array(0), r_ret.Uintptr(), 0)
	frame.Free()
}

func (self Dictionary) Size() Int {
	var selfPtr = self
	var frame = call.New()
	var r_ret = call.Ret[Int](frame)
	var p_self = call.Arg(frame, mmm.Get(selfPtr))
	mmm.API(selfPtr).builtin.Dictionary.size(p_self.Uintptr(), frame.Array(0), r_ret.Uintptr(), 0)
	var ret = r_ret.Get()
	frame.Free()
	return ret
}

func (self Dictionary) IsEmpty() bool {
	var selfPtr = self
	var frame = call.New()
	var r_ret = call.Ret[bool](frame)
	var p_self = call.Arg(frame, mmm.Get(selfPtr))
	mmm.API(selfPtr).builtin.Dictionary.is_empty(p_self.Uintptr(), frame.Array(0), r_ret.Uintptr(), 0)
	var ret = r_ret.Get()
	frame.Free()
	return ret
}

func (self Dictionary) Clear() {
	var selfPtr = self
	var frame = call.New()
	var r_ret call.Nil
	var p_self = call.Arg(frame, mmm.Get(selfPtr))
	mmm.API(selfPtr).builtin.Dictionary.clear(p_self.Uintptr(), frame.Array(0), r_ret.Uintptr(), 0)
	frame.Free()
}

func (self Dictionary) Merge(dictionary Dictionary, overwrite bool) {
	var selfPtr = self
	var frame = call.New()
	call.Arg(frame, mmm.Get(dictionary))
	call.Arg(frame, overwrite)
	var r_ret call.Nil
	var p_self = call.Arg(frame, mmm.Get(selfPtr))
	mmm.API(selfPtr).builtin.Dictionary.merge(p_self.Uintptr(), frame.Array(0), r_ret.Uintptr(), 2)
	frame.Free()
}

func (self Dictionary) Has(key Variant) bool {
	var selfPtr = self
	var frame = call.New()
	call.Arg(frame, mmm.Get(key))
	var r_ret = call.Ret[bool](frame)
	var p_self = call.Arg(frame, mmm.Get(selfPtr))
	mmm.API(selfPtr).builtin.Dictionary.has(p_self.Uintptr(), frame.Array(0), r_ret.Uintptr(), 1)
	var ret = r_ret.Get()
	frame.Free()
	return ret
}

func (self Dictionary) HasAll(keys Array) bool {
	var selfPtr = self
	var frame = call.New()
	call.Arg(frame, mmm.Get(keys))
	var r_ret = call.Ret[bool](frame)
	var p_self = call.Arg(frame, mmm.Get(selfPtr))
	mmm.API(selfPtr).builtin.Dictionary.has_all(p_self.Uintptr(), frame.Array(0), r_ret.Uintptr(), 1)
	var ret = r_ret.Get()
	frame.Free()
	return ret
}

func (self Dictionary) FindKey(ctx Context, value Variant) Variant {
	var selfPtr = self
	var frame = call.New()
	call.Arg(frame, mmm.Get(value))
	var r_ret = call.Ret[[3]uintptr](frame)
	var p_self = call.Arg(frame, mmm.Get(selfPtr))
	mmm.API(selfPtr).builtin.Dictionary.find_key(p_self.Uintptr(), frame.Array(0), r_ret.Uintptr(), 1)
	var ret = mmm.New[Variant](ctx.Lifetime, ctx.API, r_ret.Get())
	frame.Free()
	return ret
}

func (self Dictionary) Erase(key Variant) bool {
	var selfPtr = self
	var frame = call.New()
	call.Arg(frame, mmm.Get(key))
	var r_ret = call.Ret[bool](frame)
	var p_self = call.Arg(frame, mmm.Get(selfPtr))
	mmm.API(selfPtr).builtin.Dictionary.erase(p_self.Uintptr(), frame.Array(0), r_ret.Uintptr(), 1)
	var ret = r_ret.Get()
	frame.Free()
	return ret
}

func (self Dictionary) Hash() Int {
	var selfPtr = self
	var frame = call.New()
	var r_ret = call.Ret[Int](frame)
	var p_self = call.Arg(frame, mmm.Get(selfPtr))
	mmm.API(selfPtr).builtin.Dictionary.hash(p_self.Uintptr(), frame.Array(0), r_ret.Uintptr(), 0)
	var ret = r_ret.Get()
	frame.Free()
	return ret
}

func (self Dictionary) Keys(ctx Context) Array {
	var selfPtr = self
	var frame = call.New()
	var r_ret = call.Ret[uintptr](frame)
	var p_self = call.Arg(frame, mmm.Get(selfPtr))
	mmm.API(selfPtr).builtin.Dictionary.keys(p_self.Uintptr(), frame.Array(0), r_ret.Uintptr(), 0)
	var ret = mmm.New[Array](ctx.Lifetime, ctx.API, r_ret.Get())
	frame.Free()
	return ret
}

func (self Dictionary) Values(ctx Context) Array {
	var selfPtr = self
	var frame = call.New()
	var r_ret = call.Ret[uintptr](frame)
	var p_self = call.Arg(frame, mmm.Get(selfPtr))
	mmm.API(selfPtr).builtin.Dictionary.values(p_self.Uintptr(), frame.Array(0), r_ret.Uintptr(), 0)
	var ret = mmm.New[Array](ctx.Lifetime, ctx.API, r_ret.Get())
	frame.Free()
	return ret
}

func (self Dictionary) Duplicate(ctx Context, deep bool) Dictionary {
	var selfPtr = self
	var frame = call.New()
	call.Arg(frame, deep)
	var r_ret = call.Ret[uintptr](frame)
	var p_self = call.Arg(frame, mmm.Get(selfPtr))
	mmm.API(selfPtr).builtin.Dictionary.duplicate(p_self.Uintptr(), frame.Array(0), r_ret.Uintptr(), 1)
	var ret = mmm.New[Dictionary](ctx.Lifetime, ctx.API, r_ret.Get())
	frame.Free()
	return ret
}

func (self Dictionary) Get(ctx Context, key Variant, def Variant) Variant {
	var selfPtr = self
	var frame = call.New()
	call.Arg(frame, mmm.Get(key))
	call.Arg(frame, mmm.Get(def))
	var r_ret = call.Ret[[3]uintptr](frame)
	var p_self = call.Arg(frame, mmm.Get(selfPtr))
	mmm.API(selfPtr).builtin.Dictionary.get(p_self.Uintptr(), frame.Array(0), r_ret.Uintptr(), 2)
	var ret = mmm.New[Variant](ctx.Lifetime, ctx.API, r_ret.Get())
	frame.Free()
	return ret
}

func (self Dictionary) MakeReadOnly() {
	var selfPtr = self
	var frame = call.New()
	var r_ret call.Nil
	var p_self = call.Arg(frame, mmm.Get(selfPtr))
	mmm.API(selfPtr).builtin.Dictionary.make_read_only(p_self.Uintptr(), frame.Array(0), r_ret.Uintptr(), 0)
	frame.Free()
}

func (self Dictionary) IsReadOnly() bool {
	var selfPtr = self
	var frame = call.New()
	var r_ret = call.Ret[bool](frame)
	var p_self = call.Arg(frame, mmm.Get(selfPtr))
	mmm.API(selfPtr).builtin.Dictionary.is_read_only(p_self.Uintptr(), frame.Array(0), r_ret.Uintptr(), 0)
	var ret = r_ret.Get()
	frame.Free()
	return ret
}

func (self Array) Size() Int {
	var selfPtr = self
	var frame = call.New()
	var r_ret = call.Ret[Int](frame)
	var p_self = call.Arg(frame, mmm.Get(selfPtr))
	mmm.API(selfPtr).builtin.Array.size(p_self.Uintptr(), frame.Array(0), r_ret.Uintptr(), 0)
	var ret = r_ret.Get()
	frame.Free()
	return ret
}

func (self Array) IsEmpty() bool {
	var selfPtr = self
	var frame = call.New()
	var r_ret = call.Ret[bool](frame)
	var p_self = call.Arg(frame, mmm.Get(selfPtr))
	mmm.API(selfPtr).builtin.Array.is_empty(p_self.Uintptr(), frame.Array(0), r_ret.Uintptr(), 0)
	var ret = r_ret.Get()
	frame.Free()
	return ret
}

func (self Array) Clear() {
	var selfPtr = self
	var frame = call.New()
	var r_ret call.Nil
	var p_self = call.Arg(frame, mmm.Get(selfPtr))
	mmm.API(selfPtr).builtin.Array.clear(p_self.Uintptr(), frame.Array(0), r_ret.Uintptr(), 0)
	frame.Free()
}

func (self Array) Hash() Int {
	var selfPtr = self
	var frame = call.New()
	var r_ret = call.Ret[Int](frame)
	var p_self = call.Arg(frame, mmm.Get(selfPtr))
	mmm.API(selfPtr).builtin.Array.hash(p_self.Uintptr(), frame.Array(0), r_ret.Uintptr(), 0)
	var ret = r_ret.Get()
	frame.Free()
	return ret
}

func (self Array) Assign(array Array) {
	var selfPtr = self
	var frame = call.New()
	call.Arg(frame, mmm.Get(array))
	var r_ret call.Nil
	var p_self = call.Arg(frame, mmm.Get(selfPtr))
	mmm.API(selfPtr).builtin.Array.assign(p_self.Uintptr(), frame.Array(0), r_ret.Uintptr(), 1)
	frame.Free()
}

func (self Array) PushBack(value Variant) {
	var selfPtr = self
	var frame = call.New()
	call.Arg(frame, mmm.Get(value))
	var r_ret call.Nil
	var p_self = call.Arg(frame, mmm.Get(selfPtr))
	mmm.API(selfPtr).builtin.Array.push_back(p_self.Uintptr(), frame.Array(0), r_ret.Uintptr(), 1)
	frame.Free()
}

func (self Array) PushFront(value Variant) {
	var selfPtr = self
	var frame = call.New()
	call.Arg(frame, mmm.Get(value))
	var r_ret call.Nil
	var p_self = call.Arg(frame, mmm.Get(selfPtr))
	mmm.API(selfPtr).builtin.Array.push_front(p_self.Uintptr(), frame.Array(0), r_ret.Uintptr(), 1)
	frame.Free()
}

func (self Array) Append(value Variant) {
	var selfPtr = self
	var frame = call.New()
	call.Arg(frame, mmm.Get(value))
	var r_ret call.Nil
	var p_self = call.Arg(frame, mmm.Get(selfPtr))
	mmm.API(selfPtr).builtin.Array.append(p_self.Uintptr(), frame.Array(0), r_ret.Uintptr(), 1)
	frame.Free()
}

func (self Array) AppendArray(array Array) {
	var selfPtr = self
	var frame = call.New()
	call.Arg(frame, mmm.Get(array))
	var r_ret call.Nil
	var p_self = call.Arg(frame, mmm.Get(selfPtr))
	mmm.API(selfPtr).builtin.Array.append_array(p_self.Uintptr(), frame.Array(0), r_ret.Uintptr(), 1)
	frame.Free()
}

func (self Array) Resize(size Int) Int {
	var selfPtr = self
	var frame = call.New()
	call.Arg(frame, size)
	var r_ret = call.Ret[Int](frame)
	var p_self = call.Arg(frame, mmm.Get(selfPtr))
	mmm.API(selfPtr).builtin.Array.resize(p_self.Uintptr(), frame.Array(0), r_ret.Uintptr(), 1)
	var ret = r_ret.Get()
	frame.Free()
	return ret
}

func (self Array) Insert(position Int, value Variant) Int {
	var selfPtr = self
	var frame = call.New()
	call.Arg(frame, position)
	call.Arg(frame, mmm.Get(value))
	var r_ret = call.Ret[Int](frame)
	var p_self = call.Arg(frame, mmm.Get(selfPtr))
	mmm.API(selfPtr).builtin.Array.insert(p_self.Uintptr(), frame.Array(0), r_ret.Uintptr(), 2)
	var ret = r_ret.Get()
	frame.Free()
	return ret
}

func (self Array) RemoveAt(position Int) {
	var selfPtr = self
	var frame = call.New()
	call.Arg(frame, position)
	var r_ret call.Nil
	var p_self = call.Arg(frame, mmm.Get(selfPtr))
	mmm.API(selfPtr).builtin.Array.remove_at(p_self.Uintptr(), frame.Array(0), r_ret.Uintptr(), 1)
	frame.Free()
}

func (self Array) Fill(value Variant) {
	var selfPtr = self
	var frame = call.New()
	call.Arg(frame, mmm.Get(value))
	var r_ret call.Nil
	var p_self = call.Arg(frame, mmm.Get(selfPtr))
	mmm.API(selfPtr).builtin.Array.fill(p_self.Uintptr(), frame.Array(0), r_ret.Uintptr(), 1)
	frame.Free()
}

func (self Array) Erase(value Variant) {
	var selfPtr = self
	var frame = call.New()
	call.Arg(frame, mmm.Get(value))
	var r_ret call.Nil
	var p_self = call.Arg(frame, mmm.Get(selfPtr))
	mmm.API(selfPtr).builtin.Array.erase(p_self.Uintptr(), frame.Array(0), r_ret.Uintptr(), 1)
	frame.Free()
}

func (self Array) Front(ctx Context) Variant {
	var selfPtr = self
	var frame = call.New()
	var r_ret = call.Ret[[3]uintptr](frame)
	var p_self = call.Arg(frame, mmm.Get(selfPtr))
	mmm.API(selfPtr).builtin.Array.front(p_self.Uintptr(), frame.Array(0), r_ret.Uintptr(), 0)
	var ret = mmm.New[Variant](ctx.Lifetime, ctx.API, r_ret.Get())
	frame.Free()
	return ret
}

func (self Array) Back(ctx Context) Variant {
	var selfPtr = self
	var frame = call.New()
	var r_ret = call.Ret[[3]uintptr](frame)
	var p_self = call.Arg(frame, mmm.Get(selfPtr))
	mmm.API(selfPtr).builtin.Array.back(p_self.Uintptr(), frame.Array(0), r_ret.Uintptr(), 0)
	var ret = mmm.New[Variant](ctx.Lifetime, ctx.API, r_ret.Get())
	frame.Free()
	return ret
}

func (self Array) PickRandom(ctx Context) Variant {
	var selfPtr = self
	var frame = call.New()
	var r_ret = call.Ret[[3]uintptr](frame)
	var p_self = call.Arg(frame, mmm.Get(selfPtr))
	mmm.API(selfPtr).builtin.Array.pick_random(p_self.Uintptr(), frame.Array(0), r_ret.Uintptr(), 0)
	var ret = mmm.New[Variant](ctx.Lifetime, ctx.API, r_ret.Get())
	frame.Free()
	return ret
}

func (self Array) Find(what Variant, from Int) Int {
	var selfPtr = self
	var frame = call.New()
	call.Arg(frame, mmm.Get(what))
	call.Arg(frame, from)
	var r_ret = call.Ret[Int](frame)
	var p_self = call.Arg(frame, mmm.Get(selfPtr))
	mmm.API(selfPtr).builtin.Array.find(p_self.Uintptr(), frame.Array(0), r_ret.Uintptr(), 2)
	var ret = r_ret.Get()
	frame.Free()
	return ret
}

func (self Array) Rfind(what Variant, from Int) Int {
	var selfPtr = self
	var frame = call.New()
	call.Arg(frame, mmm.Get(what))
	call.Arg(frame, from)
	var r_ret = call.Ret[Int](frame)
	var p_self = call.Arg(frame, mmm.Get(selfPtr))
	mmm.API(selfPtr).builtin.Array.rfind(p_self.Uintptr(), frame.Array(0), r_ret.Uintptr(), 2)
	var ret = r_ret.Get()
	frame.Free()
	return ret
}

func (self Array) Count(value Variant) Int {
	var selfPtr = self
	var frame = call.New()
	call.Arg(frame, mmm.Get(value))
	var r_ret = call.Ret[Int](frame)
	var p_self = call.Arg(frame, mmm.Get(selfPtr))
	mmm.API(selfPtr).builtin.Array.count(p_self.Uintptr(), frame.Array(0), r_ret.Uintptr(), 1)
	var ret = r_ret.Get()
	frame.Free()
	return ret
}

func (self Array) Has(value Variant) bool {
	var selfPtr = self
	var frame = call.New()
	call.Arg(frame, mmm.Get(value))
	var r_ret = call.Ret[bool](frame)
	var p_self = call.Arg(frame, mmm.Get(selfPtr))
	mmm.API(selfPtr).builtin.Array.has(p_self.Uintptr(), frame.Array(0), r_ret.Uintptr(), 1)
	var ret = r_ret.Get()
	frame.Free()
	return ret
}

func (self Array) PopBack(ctx Context) Variant {
	var selfPtr = self
	var frame = call.New()
	var r_ret = call.Ret[[3]uintptr](frame)
	var p_self = call.Arg(frame, mmm.Get(selfPtr))
	mmm.API(selfPtr).builtin.Array.pop_back(p_self.Uintptr(), frame.Array(0), r_ret.Uintptr(), 0)
	var ret = mmm.New[Variant](ctx.Lifetime, ctx.API, r_ret.Get())
	frame.Free()
	return ret
}

func (self Array) PopFront(ctx Context) Variant {
	var selfPtr = self
	var frame = call.New()
	var r_ret = call.Ret[[3]uintptr](frame)
	var p_self = call.Arg(frame, mmm.Get(selfPtr))
	mmm.API(selfPtr).builtin.Array.pop_front(p_self.Uintptr(), frame.Array(0), r_ret.Uintptr(), 0)
	var ret = mmm.New[Variant](ctx.Lifetime, ctx.API, r_ret.Get())
	frame.Free()
	return ret
}

func (self Array) PopAt(ctx Context, position Int) Variant {
	var selfPtr = self
	var frame = call.New()
	call.Arg(frame, position)
	var r_ret = call.Ret[[3]uintptr](frame)
	var p_self = call.Arg(frame, mmm.Get(selfPtr))
	mmm.API(selfPtr).builtin.Array.pop_at(p_self.Uintptr(), frame.Array(0), r_ret.Uintptr(), 1)
	var ret = mmm.New[Variant](ctx.Lifetime, ctx.API, r_ret.Get())
	frame.Free()
	return ret
}

func (self Array) Sort() {
	var selfPtr = self
	var frame = call.New()
	var r_ret call.Nil
	var p_self = call.Arg(frame, mmm.Get(selfPtr))
	mmm.API(selfPtr).builtin.Array.sort(p_self.Uintptr(), frame.Array(0), r_ret.Uintptr(), 0)
	frame.Free()
}

func (self Array) SortCustom(fn Callable) {
	var selfPtr = self
	var frame = call.New()
	call.Arg(frame, mmm.Get(fn))
	var r_ret call.Nil
	var p_self = call.Arg(frame, mmm.Get(selfPtr))
	mmm.API(selfPtr).builtin.Array.sort_custom(p_self.Uintptr(), frame.Array(0), r_ret.Uintptr(), 1)
	frame.Free()
}

func (self Array) Shuffle() {
	var selfPtr = self
	var frame = call.New()
	var r_ret call.Nil
	var p_self = call.Arg(frame, mmm.Get(selfPtr))
	mmm.API(selfPtr).builtin.Array.shuffle(p_self.Uintptr(), frame.Array(0), r_ret.Uintptr(), 0)
	frame.Free()
}

func (self Array) Bsearch(value Variant, before bool) Int {
	var selfPtr = self
	var frame = call.New()
	call.Arg(frame, mmm.Get(value))
	call.Arg(frame, before)
	var r_ret = call.Ret[Int](frame)
	var p_self = call.Arg(frame, mmm.Get(selfPtr))
	mmm.API(selfPtr).builtin.Array.bsearch(p_self.Uintptr(), frame.Array(0), r_ret.Uintptr(), 2)
	var ret = r_ret.Get()
	frame.Free()
	return ret
}

func (self Array) BsearchCustom(value Variant, fn Callable, before bool) Int {
	var selfPtr = self
	var frame = call.New()
	call.Arg(frame, mmm.Get(value))
	call.Arg(frame, mmm.Get(fn))
	call.Arg(frame, before)
	var r_ret = call.Ret[Int](frame)
	var p_self = call.Arg(frame, mmm.Get(selfPtr))
	mmm.API(selfPtr).builtin.Array.bsearch_custom(p_self.Uintptr(), frame.Array(0), r_ret.Uintptr(), 3)
	var ret = r_ret.Get()
	frame.Free()
	return ret
}

func (self Array) Reverse() {
	var selfPtr = self
	var frame = call.New()
	var r_ret call.Nil
	var p_self = call.Arg(frame, mmm.Get(selfPtr))
	mmm.API(selfPtr).builtin.Array.reverse(p_self.Uintptr(), frame.Array(0), r_ret.Uintptr(), 0)
	frame.Free()
}

func (self Array) Duplicate(ctx Context, deep bool) Array {
	var selfPtr = self
	var frame = call.New()
	call.Arg(frame, deep)
	var r_ret = call.Ret[uintptr](frame)
	var p_self = call.Arg(frame, mmm.Get(selfPtr))
	mmm.API(selfPtr).builtin.Array.duplicate(p_self.Uintptr(), frame.Array(0), r_ret.Uintptr(), 1)
	var ret = mmm.New[Array](ctx.Lifetime, ctx.API, r_ret.Get())
	frame.Free()
	return ret
}

func (self Array) Slice(ctx Context, begin Int, end Int, step Int, deep bool) Array {
	var selfPtr = self
	var frame = call.New()
	call.Arg(frame, begin)
	call.Arg(frame, end)
	call.Arg(frame, step)
	call.Arg(frame, deep)
	var r_ret = call.Ret[uintptr](frame)
	var p_self = call.Arg(frame, mmm.Get(selfPtr))
	mmm.API(selfPtr).builtin.Array.slice(p_self.Uintptr(), frame.Array(0), r_ret.Uintptr(), 4)
	var ret = mmm.New[Array](ctx.Lifetime, ctx.API, r_ret.Get())
	frame.Free()
	return ret
}

func (self Array) Filter(ctx Context, method Callable) Array {
	var selfPtr = self
	var frame = call.New()
	call.Arg(frame, mmm.Get(method))
	var r_ret = call.Ret[uintptr](frame)
	var p_self = call.Arg(frame, mmm.Get(selfPtr))
	mmm.API(selfPtr).builtin.Array.filter(p_self.Uintptr(), frame.Array(0), r_ret.Uintptr(), 1)
	var ret = mmm.New[Array](ctx.Lifetime, ctx.API, r_ret.Get())
	frame.Free()
	return ret
}

func (self Array) Map(ctx Context, method Callable) Array {
	var selfPtr = self
	var frame = call.New()
	call.Arg(frame, mmm.Get(method))
	var r_ret = call.Ret[uintptr](frame)
	var p_self = call.Arg(frame, mmm.Get(selfPtr))
	mmm.API(selfPtr).builtin.Array.map_(p_self.Uintptr(), frame.Array(0), r_ret.Uintptr(), 1)
	var ret = mmm.New[Array](ctx.Lifetime, ctx.API, r_ret.Get())
	frame.Free()
	return ret
}

func (self Array) Reduce(ctx Context, method Callable, accum Variant) Variant {
	var selfPtr = self
	var frame = call.New()
	call.Arg(frame, mmm.Get(method))
	call.Arg(frame, mmm.Get(accum))
	var r_ret = call.Ret[[3]uintptr](frame)
	var p_self = call.Arg(frame, mmm.Get(selfPtr))
	mmm.API(selfPtr).builtin.Array.reduce(p_self.Uintptr(), frame.Array(0), r_ret.Uintptr(), 2)
	var ret = mmm.New[Variant](ctx.Lifetime, ctx.API, r_ret.Get())
	frame.Free()
	return ret
}

func (self Array) Any(method Callable) bool {
	var selfPtr = self
	var frame = call.New()
	call.Arg(frame, mmm.Get(method))
	var r_ret = call.Ret[bool](frame)
	var p_self = call.Arg(frame, mmm.Get(selfPtr))
	mmm.API(selfPtr).builtin.Array.any(p_self.Uintptr(), frame.Array(0), r_ret.Uintptr(), 1)
	var ret = r_ret.Get()
	frame.Free()
	return ret
}

func (self Array) All(method Callable) bool {
	var selfPtr = self
	var frame = call.New()
	call.Arg(frame, mmm.Get(method))
	var r_ret = call.Ret[bool](frame)
	var p_self = call.Arg(frame, mmm.Get(selfPtr))
	mmm.API(selfPtr).builtin.Array.all(p_self.Uintptr(), frame.Array(0), r_ret.Uintptr(), 1)
	var ret = r_ret.Get()
	frame.Free()
	return ret
}

func (self Array) Max(ctx Context) Variant {
	var selfPtr = self
	var frame = call.New()
	var r_ret = call.Ret[[3]uintptr](frame)
	var p_self = call.Arg(frame, mmm.Get(selfPtr))
	mmm.API(selfPtr).builtin.Array.max(p_self.Uintptr(), frame.Array(0), r_ret.Uintptr(), 0)
	var ret = mmm.New[Variant](ctx.Lifetime, ctx.API, r_ret.Get())
	frame.Free()
	return ret
}

func (self Array) Min(ctx Context) Variant {
	var selfPtr = self
	var frame = call.New()
	var r_ret = call.Ret[[3]uintptr](frame)
	var p_self = call.Arg(frame, mmm.Get(selfPtr))
	mmm.API(selfPtr).builtin.Array.min(p_self.Uintptr(), frame.Array(0), r_ret.Uintptr(), 0)
	var ret = mmm.New[Variant](ctx.Lifetime, ctx.API, r_ret.Get())
	frame.Free()
	return ret
}

func (self Array) IsTyped() bool {
	var selfPtr = self
	var frame = call.New()
	var r_ret = call.Ret[bool](frame)
	var p_self = call.Arg(frame, mmm.Get(selfPtr))
	mmm.API(selfPtr).builtin.Array.is_typed(p_self.Uintptr(), frame.Array(0), r_ret.Uintptr(), 0)
	var ret = r_ret.Get()
	frame.Free()
	return ret
}

func (self Array) IsSameTyped(array Array) bool {
	var selfPtr = self
	var frame = call.New()
	call.Arg(frame, mmm.Get(array))
	var r_ret = call.Ret[bool](frame)
	var p_self = call.Arg(frame, mmm.Get(selfPtr))
	mmm.API(selfPtr).builtin.Array.is_same_typed(p_self.Uintptr(), frame.Array(0), r_ret.Uintptr(), 1)
	var ret = r_ret.Get()
	frame.Free()
	return ret
}

func (self Array) GetTypedBuiltin() Int {
	var selfPtr = self
	var frame = call.New()
	var r_ret = call.Ret[Int](frame)
	var p_self = call.Arg(frame, mmm.Get(selfPtr))
	mmm.API(selfPtr).builtin.Array.get_typed_builtin(p_self.Uintptr(), frame.Array(0), r_ret.Uintptr(), 0)
	var ret = r_ret.Get()
	frame.Free()
	return ret
}

func (self Array) GetTypedClassName(ctx Context) StringName {
	var selfPtr = self
	var frame = call.New()
	var r_ret = call.Ret[uintptr](frame)
	var p_self = call.Arg(frame, mmm.Get(selfPtr))
	mmm.API(selfPtr).builtin.Array.get_typed_class_name(p_self.Uintptr(), frame.Array(0), r_ret.Uintptr(), 0)
	var ret = mmm.New[StringName](ctx.Lifetime, ctx.API, r_ret.Get())
	frame.Free()
	return ret
}

func (self Array) GetTypedScript(ctx Context) Variant {
	var selfPtr = self
	var frame = call.New()
	var r_ret = call.Ret[[3]uintptr](frame)
	var p_self = call.Arg(frame, mmm.Get(selfPtr))
	mmm.API(selfPtr).builtin.Array.get_typed_script(p_self.Uintptr(), frame.Array(0), r_ret.Uintptr(), 0)
	var ret = mmm.New[Variant](ctx.Lifetime, ctx.API, r_ret.Get())
	frame.Free()
	return ret
}

func (self Array) MakeReadOnly() {
	var selfPtr = self
	var frame = call.New()
	var r_ret call.Nil
	var p_self = call.Arg(frame, mmm.Get(selfPtr))
	mmm.API(selfPtr).builtin.Array.make_read_only(p_self.Uintptr(), frame.Array(0), r_ret.Uintptr(), 0)
	frame.Free()
}

func (self Array) IsReadOnly() bool {
	var selfPtr = self
	var frame = call.New()
	var r_ret = call.Ret[bool](frame)
	var p_self = call.Arg(frame, mmm.Get(selfPtr))
	mmm.API(selfPtr).builtin.Array.is_read_only(p_self.Uintptr(), frame.Array(0), r_ret.Uintptr(), 0)
	var ret = r_ret.Get()
	frame.Free()
	return ret
}

func (self PackedByteArray) Size() Int {
	var selfPtr = self
	var frame = call.New()
	var r_ret = call.Ret[Int](frame)
	var p_self = call.Arg(frame, mmm.Get(selfPtr))
	mmm.API(selfPtr).builtin.PackedByteArray.size(p_self.Uintptr(), frame.Array(0), r_ret.Uintptr(), 0)
	var ret = r_ret.Get()
	frame.Free()
	return ret
}

func (self PackedByteArray) IsEmpty() bool {
	var selfPtr = self
	var frame = call.New()
	var r_ret = call.Ret[bool](frame)
	var p_self = call.Arg(frame, mmm.Get(selfPtr))
	mmm.API(selfPtr).builtin.PackedByteArray.is_empty(p_self.Uintptr(), frame.Array(0), r_ret.Uintptr(), 0)
	var ret = r_ret.Get()
	frame.Free()
	return ret
}

func (self PackedByteArray) Set(index Int, value Int) {
	var selfPtr = self
	var frame = call.New()
	call.Arg(frame, index)
	call.Arg(frame, value)
	var r_ret call.Nil
	var p_self = call.Arg(frame, mmm.Get(selfPtr))
	mmm.API(selfPtr).builtin.PackedByteArray.set(p_self.Uintptr(), frame.Array(0), r_ret.Uintptr(), 2)
	frame.Free()
}

func (self PackedByteArray) PushBack(value Int) bool {
	var selfPtr = self
	var frame = call.New()
	call.Arg(frame, value)
	var r_ret = call.Ret[bool](frame)
	var p_self = call.Arg(frame, mmm.Get(selfPtr))
	mmm.API(selfPtr).builtin.PackedByteArray.push_back(p_self.Uintptr(), frame.Array(0), r_ret.Uintptr(), 1)
	var ret = r_ret.Get()
	frame.Free()
	return ret
}

func (self PackedByteArray) Append(value Int) bool {
	var selfPtr = self
	var frame = call.New()
	call.Arg(frame, value)
	var r_ret = call.Ret[bool](frame)
	var p_self = call.Arg(frame, mmm.Get(selfPtr))
	mmm.API(selfPtr).builtin.PackedByteArray.append(p_self.Uintptr(), frame.Array(0), r_ret.Uintptr(), 1)
	var ret = r_ret.Get()
	frame.Free()
	return ret
}

func (self PackedByteArray) AppendArray(array PackedByteArray) {
	var selfPtr = self
	var frame = call.New()
	call.Arg(frame, mmm.Get(array))
	var r_ret call.Nil
	var p_self = call.Arg(frame, mmm.Get(selfPtr))
	mmm.API(selfPtr).builtin.PackedByteArray.append_array(p_self.Uintptr(), frame.Array(0), r_ret.Uintptr(), 1)
	frame.Free()
}

func (self PackedByteArray) RemoveAt(index Int) {
	var selfPtr = self
	var frame = call.New()
	call.Arg(frame, index)
	var r_ret call.Nil
	var p_self = call.Arg(frame, mmm.Get(selfPtr))
	mmm.API(selfPtr).builtin.PackedByteArray.remove_at(p_self.Uintptr(), frame.Array(0), r_ret.Uintptr(), 1)
	frame.Free()
}

func (self PackedByteArray) Insert(at_index Int, value Int) Int {
	var selfPtr = self
	var frame = call.New()
	call.Arg(frame, at_index)
	call.Arg(frame, value)
	var r_ret = call.Ret[Int](frame)
	var p_self = call.Arg(frame, mmm.Get(selfPtr))
	mmm.API(selfPtr).builtin.PackedByteArray.insert(p_self.Uintptr(), frame.Array(0), r_ret.Uintptr(), 2)
	var ret = r_ret.Get()
	frame.Free()
	return ret
}

func (self PackedByteArray) Fill(value Int) {
	var selfPtr = self
	var frame = call.New()
	call.Arg(frame, value)
	var r_ret call.Nil
	var p_self = call.Arg(frame, mmm.Get(selfPtr))
	mmm.API(selfPtr).builtin.PackedByteArray.fill(p_self.Uintptr(), frame.Array(0), r_ret.Uintptr(), 1)
	frame.Free()
}

func (self PackedByteArray) Resize(new_size Int) Int {
	var selfPtr = self
	var frame = call.New()
	call.Arg(frame, new_size)
	var r_ret = call.Ret[Int](frame)
	var p_self = call.Arg(frame, mmm.Get(selfPtr))
	mmm.API(selfPtr).builtin.PackedByteArray.resize(p_self.Uintptr(), frame.Array(0), r_ret.Uintptr(), 1)
	var ret = r_ret.Get()
	frame.Free()
	return ret
}

func (self PackedByteArray) Clear() {
	var selfPtr = self
	var frame = call.New()
	var r_ret call.Nil
	var p_self = call.Arg(frame, mmm.Get(selfPtr))
	mmm.API(selfPtr).builtin.PackedByteArray.clear(p_self.Uintptr(), frame.Array(0), r_ret.Uintptr(), 0)
	frame.Free()
}

func (self PackedByteArray) Has(value Int) bool {
	var selfPtr = self
	var frame = call.New()
	call.Arg(frame, value)
	var r_ret = call.Ret[bool](frame)
	var p_self = call.Arg(frame, mmm.Get(selfPtr))
	mmm.API(selfPtr).builtin.PackedByteArray.has(p_self.Uintptr(), frame.Array(0), r_ret.Uintptr(), 1)
	var ret = r_ret.Get()
	frame.Free()
	return ret
}

func (self PackedByteArray) Reverse() {
	var selfPtr = self
	var frame = call.New()
	var r_ret call.Nil
	var p_self = call.Arg(frame, mmm.Get(selfPtr))
	mmm.API(selfPtr).builtin.PackedByteArray.reverse(p_self.Uintptr(), frame.Array(0), r_ret.Uintptr(), 0)
	frame.Free()
}

func (self PackedByteArray) Slice(ctx Context, begin Int, end Int) PackedByteArray {
	var selfPtr = self
	var frame = call.New()
	call.Arg(frame, begin)
	call.Arg(frame, end)
	var r_ret = call.Ret[[2]uintptr](frame)
	var p_self = call.Arg(frame, mmm.Get(selfPtr))
	mmm.API(selfPtr).builtin.PackedByteArray.slice(p_self.Uintptr(), frame.Array(0), r_ret.Uintptr(), 2)
	var ret = mmm.New[PackedByteArray](ctx.Lifetime, ctx.API, r_ret.Get())
	frame.Free()
	return ret
}

func (self PackedByteArray) Sort() {
	var selfPtr = self
	var frame = call.New()
	var r_ret call.Nil
	var p_self = call.Arg(frame, mmm.Get(selfPtr))
	mmm.API(selfPtr).builtin.PackedByteArray.sort(p_self.Uintptr(), frame.Array(0), r_ret.Uintptr(), 0)
	frame.Free()
}

func (self PackedByteArray) Bsearch(value Int, before bool) Int {
	var selfPtr = self
	var frame = call.New()
	call.Arg(frame, value)
	call.Arg(frame, before)
	var r_ret = call.Ret[Int](frame)
	var p_self = call.Arg(frame, mmm.Get(selfPtr))
	mmm.API(selfPtr).builtin.PackedByteArray.bsearch(p_self.Uintptr(), frame.Array(0), r_ret.Uintptr(), 2)
	var ret = r_ret.Get()
	frame.Free()
	return ret
}

func (self PackedByteArray) Duplicate(ctx Context) PackedByteArray {
	var selfPtr = self
	var frame = call.New()
	var r_ret = call.Ret[[2]uintptr](frame)
	var p_self = call.Arg(frame, mmm.Get(selfPtr))
	mmm.API(selfPtr).builtin.PackedByteArray.duplicate(p_self.Uintptr(), frame.Array(0), r_ret.Uintptr(), 0)
	var ret = mmm.New[PackedByteArray](ctx.Lifetime, ctx.API, r_ret.Get())
	frame.Free()
	return ret
}

func (self PackedByteArray) Find(value Int, from Int) Int {
	var selfPtr = self
	var frame = call.New()
	call.Arg(frame, value)
	call.Arg(frame, from)
	var r_ret = call.Ret[Int](frame)
	var p_self = call.Arg(frame, mmm.Get(selfPtr))
	mmm.API(selfPtr).builtin.PackedByteArray.find(p_self.Uintptr(), frame.Array(0), r_ret.Uintptr(), 2)
	var ret = r_ret.Get()
	frame.Free()
	return ret
}

func (self PackedByteArray) Rfind(value Int, from Int) Int {
	var selfPtr = self
	var frame = call.New()
	call.Arg(frame, value)
	call.Arg(frame, from)
	var r_ret = call.Ret[Int](frame)
	var p_self = call.Arg(frame, mmm.Get(selfPtr))
	mmm.API(selfPtr).builtin.PackedByteArray.rfind(p_self.Uintptr(), frame.Array(0), r_ret.Uintptr(), 2)
	var ret = r_ret.Get()
	frame.Free()
	return ret
}

func (self PackedByteArray) Count(value Int) Int {
	var selfPtr = self
	var frame = call.New()
	call.Arg(frame, value)
	var r_ret = call.Ret[Int](frame)
	var p_self = call.Arg(frame, mmm.Get(selfPtr))
	mmm.API(selfPtr).builtin.PackedByteArray.count(p_self.Uintptr(), frame.Array(0), r_ret.Uintptr(), 1)
	var ret = r_ret.Get()
	frame.Free()
	return ret
}

func (self PackedByteArray) GetStringFromAscii(ctx Context) String {
	var selfPtr = self
	var frame = call.New()
	var r_ret = call.Ret[uintptr](frame)
	var p_self = call.Arg(frame, mmm.Get(selfPtr))
	mmm.API(selfPtr).builtin.PackedByteArray.get_string_from_ascii(p_self.Uintptr(), frame.Array(0), r_ret.Uintptr(), 0)
	var ret = mmm.New[String](ctx.Lifetime, ctx.API, r_ret.Get())
	frame.Free()
	return ret
}

func (self PackedByteArray) GetStringFromUtf8(ctx Context) String {
	var selfPtr = self
	var frame = call.New()
	var r_ret = call.Ret[uintptr](frame)
	var p_self = call.Arg(frame, mmm.Get(selfPtr))
	mmm.API(selfPtr).builtin.PackedByteArray.get_string_from_utf8(p_self.Uintptr(), frame.Array(0), r_ret.Uintptr(), 0)
	var ret = mmm.New[String](ctx.Lifetime, ctx.API, r_ret.Get())
	frame.Free()
	return ret
}

func (self PackedByteArray) GetStringFromUtf16(ctx Context) String {
	var selfPtr = self
	var frame = call.New()
	var r_ret = call.Ret[uintptr](frame)
	var p_self = call.Arg(frame, mmm.Get(selfPtr))
	mmm.API(selfPtr).builtin.PackedByteArray.get_string_from_utf16(p_self.Uintptr(), frame.Array(0), r_ret.Uintptr(), 0)
	var ret = mmm.New[String](ctx.Lifetime, ctx.API, r_ret.Get())
	frame.Free()
	return ret
}

func (self PackedByteArray) GetStringFromUtf32(ctx Context) String {
	var selfPtr = self
	var frame = call.New()
	var r_ret = call.Ret[uintptr](frame)
	var p_self = call.Arg(frame, mmm.Get(selfPtr))
	mmm.API(selfPtr).builtin.PackedByteArray.get_string_from_utf32(p_self.Uintptr(), frame.Array(0), r_ret.Uintptr(), 0)
	var ret = mmm.New[String](ctx.Lifetime, ctx.API, r_ret.Get())
	frame.Free()
	return ret
}

func (self PackedByteArray) GetStringFromWchar(ctx Context) String {
	var selfPtr = self
	var frame = call.New()
	var r_ret = call.Ret[uintptr](frame)
	var p_self = call.Arg(frame, mmm.Get(selfPtr))
	mmm.API(selfPtr).builtin.PackedByteArray.get_string_from_wchar(p_self.Uintptr(), frame.Array(0), r_ret.Uintptr(), 0)
	var ret = mmm.New[String](ctx.Lifetime, ctx.API, r_ret.Get())
	frame.Free()
	return ret
}

func (self PackedByteArray) HexEncode(ctx Context) String {
	var selfPtr = self
	var frame = call.New()
	var r_ret = call.Ret[uintptr](frame)
	var p_self = call.Arg(frame, mmm.Get(selfPtr))
	mmm.API(selfPtr).builtin.PackedByteArray.hex_encode(p_self.Uintptr(), frame.Array(0), r_ret.Uintptr(), 0)
	var ret = mmm.New[String](ctx.Lifetime, ctx.API, r_ret.Get())
	frame.Free()
	return ret
}

func (self PackedByteArray) Compress(ctx Context, compression_mode Int) PackedByteArray {
	var selfPtr = self
	var frame = call.New()
	call.Arg(frame, compression_mode)
	var r_ret = call.Ret[[2]uintptr](frame)
	var p_self = call.Arg(frame, mmm.Get(selfPtr))
	mmm.API(selfPtr).builtin.PackedByteArray.compress(p_self.Uintptr(), frame.Array(0), r_ret.Uintptr(), 1)
	var ret = mmm.New[PackedByteArray](ctx.Lifetime, ctx.API, r_ret.Get())
	frame.Free()
	return ret
}

func (self PackedByteArray) Decompress(ctx Context, buffer_size Int, compression_mode Int) PackedByteArray {
	var selfPtr = self
	var frame = call.New()
	call.Arg(frame, buffer_size)
	call.Arg(frame, compression_mode)
	var r_ret = call.Ret[[2]uintptr](frame)
	var p_self = call.Arg(frame, mmm.Get(selfPtr))
	mmm.API(selfPtr).builtin.PackedByteArray.decompress(p_self.Uintptr(), frame.Array(0), r_ret.Uintptr(), 2)
	var ret = mmm.New[PackedByteArray](ctx.Lifetime, ctx.API, r_ret.Get())
	frame.Free()
	return ret
}

func (self PackedByteArray) DecompressDynamic(ctx Context, max_output_size Int, compression_mode Int) PackedByteArray {
	var selfPtr = self
	var frame = call.New()
	call.Arg(frame, max_output_size)
	call.Arg(frame, compression_mode)
	var r_ret = call.Ret[[2]uintptr](frame)
	var p_self = call.Arg(frame, mmm.Get(selfPtr))
	mmm.API(selfPtr).builtin.PackedByteArray.decompress_dynamic(p_self.Uintptr(), frame.Array(0), r_ret.Uintptr(), 2)
	var ret = mmm.New[PackedByteArray](ctx.Lifetime, ctx.API, r_ret.Get())
	frame.Free()
	return ret
}

func (self PackedByteArray) DecodeU8(byte_offset Int) Int {
	var selfPtr = self
	var frame = call.New()
	call.Arg(frame, byte_offset)
	var r_ret = call.Ret[Int](frame)
	var p_self = call.Arg(frame, mmm.Get(selfPtr))
	mmm.API(selfPtr).builtin.PackedByteArray.decode_u8(p_self.Uintptr(), frame.Array(0), r_ret.Uintptr(), 1)
	var ret = r_ret.Get()
	frame.Free()
	return ret
}

func (self PackedByteArray) DecodeS8(byte_offset Int) Int {
	var selfPtr = self
	var frame = call.New()
	call.Arg(frame, byte_offset)
	var r_ret = call.Ret[Int](frame)
	var p_self = call.Arg(frame, mmm.Get(selfPtr))
	mmm.API(selfPtr).builtin.PackedByteArray.decode_s8(p_self.Uintptr(), frame.Array(0), r_ret.Uintptr(), 1)
	var ret = r_ret.Get()
	frame.Free()
	return ret
}

func (self PackedByteArray) DecodeU16(byte_offset Int) Int {
	var selfPtr = self
	var frame = call.New()
	call.Arg(frame, byte_offset)
	var r_ret = call.Ret[Int](frame)
	var p_self = call.Arg(frame, mmm.Get(selfPtr))
	mmm.API(selfPtr).builtin.PackedByteArray.decode_u16(p_self.Uintptr(), frame.Array(0), r_ret.Uintptr(), 1)
	var ret = r_ret.Get()
	frame.Free()
	return ret
}

func (self PackedByteArray) DecodeS16(byte_offset Int) Int {
	var selfPtr = self
	var frame = call.New()
	call.Arg(frame, byte_offset)
	var r_ret = call.Ret[Int](frame)
	var p_self = call.Arg(frame, mmm.Get(selfPtr))
	mmm.API(selfPtr).builtin.PackedByteArray.decode_s16(p_self.Uintptr(), frame.Array(0), r_ret.Uintptr(), 1)
	var ret = r_ret.Get()
	frame.Free()
	return ret
}

func (self PackedByteArray) DecodeU32(byte_offset Int) Int {
	var selfPtr = self
	var frame = call.New()
	call.Arg(frame, byte_offset)
	var r_ret = call.Ret[Int](frame)
	var p_self = call.Arg(frame, mmm.Get(selfPtr))
	mmm.API(selfPtr).builtin.PackedByteArray.decode_u32(p_self.Uintptr(), frame.Array(0), r_ret.Uintptr(), 1)
	var ret = r_ret.Get()
	frame.Free()
	return ret
}

func (self PackedByteArray) DecodeS32(byte_offset Int) Int {
	var selfPtr = self
	var frame = call.New()
	call.Arg(frame, byte_offset)
	var r_ret = call.Ret[Int](frame)
	var p_self = call.Arg(frame, mmm.Get(selfPtr))
	mmm.API(selfPtr).builtin.PackedByteArray.decode_s32(p_self.Uintptr(), frame.Array(0), r_ret.Uintptr(), 1)
	var ret = r_ret.Get()
	frame.Free()
	return ret
}

func (self PackedByteArray) DecodeU64(byte_offset Int) Int {
	var selfPtr = self
	var frame = call.New()
	call.Arg(frame, byte_offset)
	var r_ret = call.Ret[Int](frame)
	var p_self = call.Arg(frame, mmm.Get(selfPtr))
	mmm.API(selfPtr).builtin.PackedByteArray.decode_u64(p_self.Uintptr(), frame.Array(0), r_ret.Uintptr(), 1)
	var ret = r_ret.Get()
	frame.Free()
	return ret
}

func (self PackedByteArray) DecodeS64(byte_offset Int) Int {
	var selfPtr = self
	var frame = call.New()
	call.Arg(frame, byte_offset)
	var r_ret = call.Ret[Int](frame)
	var p_self = call.Arg(frame, mmm.Get(selfPtr))
	mmm.API(selfPtr).builtin.PackedByteArray.decode_s64(p_self.Uintptr(), frame.Array(0), r_ret.Uintptr(), 1)
	var ret = r_ret.Get()
	frame.Free()
	return ret
}

func (self PackedByteArray) DecodeHalf(byte_offset Int) Float {
	var selfPtr = self
	var frame = call.New()
	call.Arg(frame, byte_offset)
	var r_ret = call.Ret[Float](frame)
	var p_self = call.Arg(frame, mmm.Get(selfPtr))
	mmm.API(selfPtr).builtin.PackedByteArray.decode_half(p_self.Uintptr(), frame.Array(0), r_ret.Uintptr(), 1)
	var ret = r_ret.Get()
	frame.Free()
	return ret
}

func (self PackedByteArray) DecodeFloat(byte_offset Int) Float {
	var selfPtr = self
	var frame = call.New()
	call.Arg(frame, byte_offset)
	var r_ret = call.Ret[Float](frame)
	var p_self = call.Arg(frame, mmm.Get(selfPtr))
	mmm.API(selfPtr).builtin.PackedByteArray.decode_float(p_self.Uintptr(), frame.Array(0), r_ret.Uintptr(), 1)
	var ret = r_ret.Get()
	frame.Free()
	return ret
}

func (self PackedByteArray) DecodeDouble(byte_offset Int) Float {
	var selfPtr = self
	var frame = call.New()
	call.Arg(frame, byte_offset)
	var r_ret = call.Ret[Float](frame)
	var p_self = call.Arg(frame, mmm.Get(selfPtr))
	mmm.API(selfPtr).builtin.PackedByteArray.decode_double(p_self.Uintptr(), frame.Array(0), r_ret.Uintptr(), 1)
	var ret = r_ret.Get()
	frame.Free()
	return ret
}

func (self PackedByteArray) HasEncodedVar(byte_offset Int, allow_objects bool) bool {
	var selfPtr = self
	var frame = call.New()
	call.Arg(frame, byte_offset)
	call.Arg(frame, allow_objects)
	var r_ret = call.Ret[bool](frame)
	var p_self = call.Arg(frame, mmm.Get(selfPtr))
	mmm.API(selfPtr).builtin.PackedByteArray.has_encoded_var(p_self.Uintptr(), frame.Array(0), r_ret.Uintptr(), 2)
	var ret = r_ret.Get()
	frame.Free()
	return ret
}

func (self PackedByteArray) DecodeVar(ctx Context, byte_offset Int, allow_objects bool) Variant {
	var selfPtr = self
	var frame = call.New()
	call.Arg(frame, byte_offset)
	call.Arg(frame, allow_objects)
	var r_ret = call.Ret[[3]uintptr](frame)
	var p_self = call.Arg(frame, mmm.Get(selfPtr))
	mmm.API(selfPtr).builtin.PackedByteArray.decode_var(p_self.Uintptr(), frame.Array(0), r_ret.Uintptr(), 2)
	var ret = mmm.New[Variant](ctx.Lifetime, ctx.API, r_ret.Get())
	frame.Free()
	return ret
}

func (self PackedByteArray) DecodeVarSize(byte_offset Int, allow_objects bool) Int {
	var selfPtr = self
	var frame = call.New()
	call.Arg(frame, byte_offset)
	call.Arg(frame, allow_objects)
	var r_ret = call.Ret[Int](frame)
	var p_self = call.Arg(frame, mmm.Get(selfPtr))
	mmm.API(selfPtr).builtin.PackedByteArray.decode_var_size(p_self.Uintptr(), frame.Array(0), r_ret.Uintptr(), 2)
	var ret = r_ret.Get()
	frame.Free()
	return ret
}

func (self PackedByteArray) ToInt32Array(ctx Context) PackedInt32Array {
	var selfPtr = self
	var frame = call.New()
	var r_ret = call.Ret[[2]uintptr](frame)
	var p_self = call.Arg(frame, mmm.Get(selfPtr))
	mmm.API(selfPtr).builtin.PackedByteArray.to_int32_array(p_self.Uintptr(), frame.Array(0), r_ret.Uintptr(), 0)
	var ret = mmm.New[PackedInt32Array](ctx.Lifetime, ctx.API, r_ret.Get())
	frame.Free()
	return ret
}

func (self PackedByteArray) ToInt64Array(ctx Context) PackedInt64Array {
	var selfPtr = self
	var frame = call.New()
	var r_ret = call.Ret[[2]uintptr](frame)
	var p_self = call.Arg(frame, mmm.Get(selfPtr))
	mmm.API(selfPtr).builtin.PackedByteArray.to_int64_array(p_self.Uintptr(), frame.Array(0), r_ret.Uintptr(), 0)
	var ret = mmm.New[PackedInt64Array](ctx.Lifetime, ctx.API, r_ret.Get())
	frame.Free()
	return ret
}

func (self PackedByteArray) ToFloat32Array(ctx Context) PackedFloat32Array {
	var selfPtr = self
	var frame = call.New()
	var r_ret = call.Ret[[2]uintptr](frame)
	var p_self = call.Arg(frame, mmm.Get(selfPtr))
	mmm.API(selfPtr).builtin.PackedByteArray.to_float32_array(p_self.Uintptr(), frame.Array(0), r_ret.Uintptr(), 0)
	var ret = mmm.New[PackedFloat32Array](ctx.Lifetime, ctx.API, r_ret.Get())
	frame.Free()
	return ret
}

func (self PackedByteArray) ToFloat64Array(ctx Context) PackedFloat64Array {
	var selfPtr = self
	var frame = call.New()
	var r_ret = call.Ret[[2]uintptr](frame)
	var p_self = call.Arg(frame, mmm.Get(selfPtr))
	mmm.API(selfPtr).builtin.PackedByteArray.to_float64_array(p_self.Uintptr(), frame.Array(0), r_ret.Uintptr(), 0)
	var ret = mmm.New[PackedFloat64Array](ctx.Lifetime, ctx.API, r_ret.Get())
	frame.Free()
	return ret
}

func (self PackedByteArray) EncodeU8(byte_offset Int, value Int) {
	var selfPtr = self
	var frame = call.New()
	call.Arg(frame, byte_offset)
	call.Arg(frame, value)
	var r_ret call.Nil
	var p_self = call.Arg(frame, mmm.Get(selfPtr))
	mmm.API(selfPtr).builtin.PackedByteArray.encode_u8(p_self.Uintptr(), frame.Array(0), r_ret.Uintptr(), 2)
	frame.Free()
}

func (self PackedByteArray) EncodeS8(byte_offset Int, value Int) {
	var selfPtr = self
	var frame = call.New()
	call.Arg(frame, byte_offset)
	call.Arg(frame, value)
	var r_ret call.Nil
	var p_self = call.Arg(frame, mmm.Get(selfPtr))
	mmm.API(selfPtr).builtin.PackedByteArray.encode_s8(p_self.Uintptr(), frame.Array(0), r_ret.Uintptr(), 2)
	frame.Free()
}

func (self PackedByteArray) EncodeU16(byte_offset Int, value Int) {
	var selfPtr = self
	var frame = call.New()
	call.Arg(frame, byte_offset)
	call.Arg(frame, value)
	var r_ret call.Nil
	var p_self = call.Arg(frame, mmm.Get(selfPtr))
	mmm.API(selfPtr).builtin.PackedByteArray.encode_u16(p_self.Uintptr(), frame.Array(0), r_ret.Uintptr(), 2)
	frame.Free()
}

func (self PackedByteArray) EncodeS16(byte_offset Int, value Int) {
	var selfPtr = self
	var frame = call.New()
	call.Arg(frame, byte_offset)
	call.Arg(frame, value)
	var r_ret call.Nil
	var p_self = call.Arg(frame, mmm.Get(selfPtr))
	mmm.API(selfPtr).builtin.PackedByteArray.encode_s16(p_self.Uintptr(), frame.Array(0), r_ret.Uintptr(), 2)
	frame.Free()
}

func (self PackedByteArray) EncodeU32(byte_offset Int, value Int) {
	var selfPtr = self
	var frame = call.New()
	call.Arg(frame, byte_offset)
	call.Arg(frame, value)
	var r_ret call.Nil
	var p_self = call.Arg(frame, mmm.Get(selfPtr))
	mmm.API(selfPtr).builtin.PackedByteArray.encode_u32(p_self.Uintptr(), frame.Array(0), r_ret.Uintptr(), 2)
	frame.Free()
}

func (self PackedByteArray) EncodeS32(byte_offset Int, value Int) {
	var selfPtr = self
	var frame = call.New()
	call.Arg(frame, byte_offset)
	call.Arg(frame, value)
	var r_ret call.Nil
	var p_self = call.Arg(frame, mmm.Get(selfPtr))
	mmm.API(selfPtr).builtin.PackedByteArray.encode_s32(p_self.Uintptr(), frame.Array(0), r_ret.Uintptr(), 2)
	frame.Free()
}

func (self PackedByteArray) EncodeU64(byte_offset Int, value Int) {
	var selfPtr = self
	var frame = call.New()
	call.Arg(frame, byte_offset)
	call.Arg(frame, value)
	var r_ret call.Nil
	var p_self = call.Arg(frame, mmm.Get(selfPtr))
	mmm.API(selfPtr).builtin.PackedByteArray.encode_u64(p_self.Uintptr(), frame.Array(0), r_ret.Uintptr(), 2)
	frame.Free()
}

func (self PackedByteArray) EncodeS64(byte_offset Int, value Int) {
	var selfPtr = self
	var frame = call.New()
	call.Arg(frame, byte_offset)
	call.Arg(frame, value)
	var r_ret call.Nil
	var p_self = call.Arg(frame, mmm.Get(selfPtr))
	mmm.API(selfPtr).builtin.PackedByteArray.encode_s64(p_self.Uintptr(), frame.Array(0), r_ret.Uintptr(), 2)
	frame.Free()
}

func (self PackedByteArray) EncodeHalf(byte_offset Int, value Float) {
	var selfPtr = self
	var frame = call.New()
	call.Arg(frame, byte_offset)
	call.Arg(frame, value)
	var r_ret call.Nil
	var p_self = call.Arg(frame, mmm.Get(selfPtr))
	mmm.API(selfPtr).builtin.PackedByteArray.encode_half(p_self.Uintptr(), frame.Array(0), r_ret.Uintptr(), 2)
	frame.Free()
}

func (self PackedByteArray) EncodeFloat(byte_offset Int, value Float) {
	var selfPtr = self
	var frame = call.New()
	call.Arg(frame, byte_offset)
	call.Arg(frame, value)
	var r_ret call.Nil
	var p_self = call.Arg(frame, mmm.Get(selfPtr))
	mmm.API(selfPtr).builtin.PackedByteArray.encode_float(p_self.Uintptr(), frame.Array(0), r_ret.Uintptr(), 2)
	frame.Free()
}

func (self PackedByteArray) EncodeDouble(byte_offset Int, value Float) {
	var selfPtr = self
	var frame = call.New()
	call.Arg(frame, byte_offset)
	call.Arg(frame, value)
	var r_ret call.Nil
	var p_self = call.Arg(frame, mmm.Get(selfPtr))
	mmm.API(selfPtr).builtin.PackedByteArray.encode_double(p_self.Uintptr(), frame.Array(0), r_ret.Uintptr(), 2)
	frame.Free()
}

func (self PackedByteArray) EncodeVar(byte_offset Int, value Variant, allow_objects bool) Int {
	var selfPtr = self
	var frame = call.New()
	call.Arg(frame, byte_offset)
	call.Arg(frame, mmm.Get(value))
	call.Arg(frame, allow_objects)
	var r_ret = call.Ret[Int](frame)
	var p_self = call.Arg(frame, mmm.Get(selfPtr))
	mmm.API(selfPtr).builtin.PackedByteArray.encode_var(p_self.Uintptr(), frame.Array(0), r_ret.Uintptr(), 3)
	var ret = r_ret.Get()
	frame.Free()
	return ret
}

func (self PackedInt32Array) Size() Int {
	var selfPtr = self
	var frame = call.New()
	var r_ret = call.Ret[Int](frame)
	var p_self = call.Arg(frame, mmm.Get(selfPtr))
	mmm.API(selfPtr).builtin.PackedInt32Array.size(p_self.Uintptr(), frame.Array(0), r_ret.Uintptr(), 0)
	var ret = r_ret.Get()
	frame.Free()
	return ret
}

func (self PackedInt32Array) IsEmpty() bool {
	var selfPtr = self
	var frame = call.New()
	var r_ret = call.Ret[bool](frame)
	var p_self = call.Arg(frame, mmm.Get(selfPtr))
	mmm.API(selfPtr).builtin.PackedInt32Array.is_empty(p_self.Uintptr(), frame.Array(0), r_ret.Uintptr(), 0)
	var ret = r_ret.Get()
	frame.Free()
	return ret
}

func (self PackedInt32Array) Set(index Int, value Int) {
	var selfPtr = self
	var frame = call.New()
	call.Arg(frame, index)
	call.Arg(frame, value)
	var r_ret call.Nil
	var p_self = call.Arg(frame, mmm.Get(selfPtr))
	mmm.API(selfPtr).builtin.PackedInt32Array.set(p_self.Uintptr(), frame.Array(0), r_ret.Uintptr(), 2)
	frame.Free()
}

func (self PackedInt32Array) PushBack(value Int) bool {
	var selfPtr = self
	var frame = call.New()
	call.Arg(frame, value)
	var r_ret = call.Ret[bool](frame)
	var p_self = call.Arg(frame, mmm.Get(selfPtr))
	mmm.API(selfPtr).builtin.PackedInt32Array.push_back(p_self.Uintptr(), frame.Array(0), r_ret.Uintptr(), 1)
	var ret = r_ret.Get()
	frame.Free()
	return ret
}

func (self PackedInt32Array) Append(value Int) bool {
	var selfPtr = self
	var frame = call.New()
	call.Arg(frame, value)
	var r_ret = call.Ret[bool](frame)
	var p_self = call.Arg(frame, mmm.Get(selfPtr))
	mmm.API(selfPtr).builtin.PackedInt32Array.append(p_self.Uintptr(), frame.Array(0), r_ret.Uintptr(), 1)
	var ret = r_ret.Get()
	frame.Free()
	return ret
}

func (self PackedInt32Array) AppendArray(array PackedInt32Array) {
	var selfPtr = self
	var frame = call.New()
	call.Arg(frame, mmm.Get(array))
	var r_ret call.Nil
	var p_self = call.Arg(frame, mmm.Get(selfPtr))
	mmm.API(selfPtr).builtin.PackedInt32Array.append_array(p_self.Uintptr(), frame.Array(0), r_ret.Uintptr(), 1)
	frame.Free()
}

func (self PackedInt32Array) RemoveAt(index Int) {
	var selfPtr = self
	var frame = call.New()
	call.Arg(frame, index)
	var r_ret call.Nil
	var p_self = call.Arg(frame, mmm.Get(selfPtr))
	mmm.API(selfPtr).builtin.PackedInt32Array.remove_at(p_self.Uintptr(), frame.Array(0), r_ret.Uintptr(), 1)
	frame.Free()
}

func (self PackedInt32Array) Insert(at_index Int, value Int) Int {
	var selfPtr = self
	var frame = call.New()
	call.Arg(frame, at_index)
	call.Arg(frame, value)
	var r_ret = call.Ret[Int](frame)
	var p_self = call.Arg(frame, mmm.Get(selfPtr))
	mmm.API(selfPtr).builtin.PackedInt32Array.insert(p_self.Uintptr(), frame.Array(0), r_ret.Uintptr(), 2)
	var ret = r_ret.Get()
	frame.Free()
	return ret
}

func (self PackedInt32Array) Fill(value Int) {
	var selfPtr = self
	var frame = call.New()
	call.Arg(frame, value)
	var r_ret call.Nil
	var p_self = call.Arg(frame, mmm.Get(selfPtr))
	mmm.API(selfPtr).builtin.PackedInt32Array.fill(p_self.Uintptr(), frame.Array(0), r_ret.Uintptr(), 1)
	frame.Free()
}

func (self PackedInt32Array) Resize(new_size Int) Int {
	var selfPtr = self
	var frame = call.New()
	call.Arg(frame, new_size)
	var r_ret = call.Ret[Int](frame)
	var p_self = call.Arg(frame, mmm.Get(selfPtr))
	mmm.API(selfPtr).builtin.PackedInt32Array.resize(p_self.Uintptr(), frame.Array(0), r_ret.Uintptr(), 1)
	var ret = r_ret.Get()
	frame.Free()
	return ret
}

func (self PackedInt32Array) Clear() {
	var selfPtr = self
	var frame = call.New()
	var r_ret call.Nil
	var p_self = call.Arg(frame, mmm.Get(selfPtr))
	mmm.API(selfPtr).builtin.PackedInt32Array.clear(p_self.Uintptr(), frame.Array(0), r_ret.Uintptr(), 0)
	frame.Free()
}

func (self PackedInt32Array) Has(value Int) bool {
	var selfPtr = self
	var frame = call.New()
	call.Arg(frame, value)
	var r_ret = call.Ret[bool](frame)
	var p_self = call.Arg(frame, mmm.Get(selfPtr))
	mmm.API(selfPtr).builtin.PackedInt32Array.has(p_self.Uintptr(), frame.Array(0), r_ret.Uintptr(), 1)
	var ret = r_ret.Get()
	frame.Free()
	return ret
}

func (self PackedInt32Array) Reverse() {
	var selfPtr = self
	var frame = call.New()
	var r_ret call.Nil
	var p_self = call.Arg(frame, mmm.Get(selfPtr))
	mmm.API(selfPtr).builtin.PackedInt32Array.reverse(p_self.Uintptr(), frame.Array(0), r_ret.Uintptr(), 0)
	frame.Free()
}

func (self PackedInt32Array) Slice(ctx Context, begin Int, end Int) PackedInt32Array {
	var selfPtr = self
	var frame = call.New()
	call.Arg(frame, begin)
	call.Arg(frame, end)
	var r_ret = call.Ret[[2]uintptr](frame)
	var p_self = call.Arg(frame, mmm.Get(selfPtr))
	mmm.API(selfPtr).builtin.PackedInt32Array.slice(p_self.Uintptr(), frame.Array(0), r_ret.Uintptr(), 2)
	var ret = mmm.New[PackedInt32Array](ctx.Lifetime, ctx.API, r_ret.Get())
	frame.Free()
	return ret
}

func (self PackedInt32Array) ToByteArray(ctx Context) PackedByteArray {
	var selfPtr = self
	var frame = call.New()
	var r_ret = call.Ret[[2]uintptr](frame)
	var p_self = call.Arg(frame, mmm.Get(selfPtr))
	mmm.API(selfPtr).builtin.PackedInt32Array.to_byte_array(p_self.Uintptr(), frame.Array(0), r_ret.Uintptr(), 0)
	var ret = mmm.New[PackedByteArray](ctx.Lifetime, ctx.API, r_ret.Get())
	frame.Free()
	return ret
}

func (self PackedInt32Array) Sort() {
	var selfPtr = self
	var frame = call.New()
	var r_ret call.Nil
	var p_self = call.Arg(frame, mmm.Get(selfPtr))
	mmm.API(selfPtr).builtin.PackedInt32Array.sort(p_self.Uintptr(), frame.Array(0), r_ret.Uintptr(), 0)
	frame.Free()
}

func (self PackedInt32Array) Bsearch(value Int, before bool) Int {
	var selfPtr = self
	var frame = call.New()
	call.Arg(frame, value)
	call.Arg(frame, before)
	var r_ret = call.Ret[Int](frame)
	var p_self = call.Arg(frame, mmm.Get(selfPtr))
	mmm.API(selfPtr).builtin.PackedInt32Array.bsearch(p_self.Uintptr(), frame.Array(0), r_ret.Uintptr(), 2)
	var ret = r_ret.Get()
	frame.Free()
	return ret
}

func (self PackedInt32Array) Duplicate(ctx Context) PackedInt32Array {
	var selfPtr = self
	var frame = call.New()
	var r_ret = call.Ret[[2]uintptr](frame)
	var p_self = call.Arg(frame, mmm.Get(selfPtr))
	mmm.API(selfPtr).builtin.PackedInt32Array.duplicate(p_self.Uintptr(), frame.Array(0), r_ret.Uintptr(), 0)
	var ret = mmm.New[PackedInt32Array](ctx.Lifetime, ctx.API, r_ret.Get())
	frame.Free()
	return ret
}

func (self PackedInt32Array) Find(value Int, from Int) Int {
	var selfPtr = self
	var frame = call.New()
	call.Arg(frame, value)
	call.Arg(frame, from)
	var r_ret = call.Ret[Int](frame)
	var p_self = call.Arg(frame, mmm.Get(selfPtr))
	mmm.API(selfPtr).builtin.PackedInt32Array.find(p_self.Uintptr(), frame.Array(0), r_ret.Uintptr(), 2)
	var ret = r_ret.Get()
	frame.Free()
	return ret
}

func (self PackedInt32Array) Rfind(value Int, from Int) Int {
	var selfPtr = self
	var frame = call.New()
	call.Arg(frame, value)
	call.Arg(frame, from)
	var r_ret = call.Ret[Int](frame)
	var p_self = call.Arg(frame, mmm.Get(selfPtr))
	mmm.API(selfPtr).builtin.PackedInt32Array.rfind(p_self.Uintptr(), frame.Array(0), r_ret.Uintptr(), 2)
	var ret = r_ret.Get()
	frame.Free()
	return ret
}

func (self PackedInt32Array) Count(value Int) Int {
	var selfPtr = self
	var frame = call.New()
	call.Arg(frame, value)
	var r_ret = call.Ret[Int](frame)
	var p_self = call.Arg(frame, mmm.Get(selfPtr))
	mmm.API(selfPtr).builtin.PackedInt32Array.count(p_self.Uintptr(), frame.Array(0), r_ret.Uintptr(), 1)
	var ret = r_ret.Get()
	frame.Free()
	return ret
}

func (self PackedInt64Array) Size() Int {
	var selfPtr = self
	var frame = call.New()
	var r_ret = call.Ret[Int](frame)
	var p_self = call.Arg(frame, mmm.Get(selfPtr))
	mmm.API(selfPtr).builtin.PackedInt64Array.size(p_self.Uintptr(), frame.Array(0), r_ret.Uintptr(), 0)
	var ret = r_ret.Get()
	frame.Free()
	return ret
}

func (self PackedInt64Array) IsEmpty() bool {
	var selfPtr = self
	var frame = call.New()
	var r_ret = call.Ret[bool](frame)
	var p_self = call.Arg(frame, mmm.Get(selfPtr))
	mmm.API(selfPtr).builtin.PackedInt64Array.is_empty(p_self.Uintptr(), frame.Array(0), r_ret.Uintptr(), 0)
	var ret = r_ret.Get()
	frame.Free()
	return ret
}

func (self PackedInt64Array) Set(index Int, value Int) {
	var selfPtr = self
	var frame = call.New()
	call.Arg(frame, index)
	call.Arg(frame, value)
	var r_ret call.Nil
	var p_self = call.Arg(frame, mmm.Get(selfPtr))
	mmm.API(selfPtr).builtin.PackedInt64Array.set(p_self.Uintptr(), frame.Array(0), r_ret.Uintptr(), 2)
	frame.Free()
}

func (self PackedInt64Array) PushBack(value Int) bool {
	var selfPtr = self
	var frame = call.New()
	call.Arg(frame, value)
	var r_ret = call.Ret[bool](frame)
	var p_self = call.Arg(frame, mmm.Get(selfPtr))
	mmm.API(selfPtr).builtin.PackedInt64Array.push_back(p_self.Uintptr(), frame.Array(0), r_ret.Uintptr(), 1)
	var ret = r_ret.Get()
	frame.Free()
	return ret
}

func (self PackedInt64Array) Append(value Int) bool {
	var selfPtr = self
	var frame = call.New()
	call.Arg(frame, value)
	var r_ret = call.Ret[bool](frame)
	var p_self = call.Arg(frame, mmm.Get(selfPtr))
	mmm.API(selfPtr).builtin.PackedInt64Array.append(p_self.Uintptr(), frame.Array(0), r_ret.Uintptr(), 1)
	var ret = r_ret.Get()
	frame.Free()
	return ret
}

func (self PackedInt64Array) AppendArray(array PackedInt64Array) {
	var selfPtr = self
	var frame = call.New()
	call.Arg(frame, mmm.Get(array))
	var r_ret call.Nil
	var p_self = call.Arg(frame, mmm.Get(selfPtr))
	mmm.API(selfPtr).builtin.PackedInt64Array.append_array(p_self.Uintptr(), frame.Array(0), r_ret.Uintptr(), 1)
	frame.Free()
}

func (self PackedInt64Array) RemoveAt(index Int) {
	var selfPtr = self
	var frame = call.New()
	call.Arg(frame, index)
	var r_ret call.Nil
	var p_self = call.Arg(frame, mmm.Get(selfPtr))
	mmm.API(selfPtr).builtin.PackedInt64Array.remove_at(p_self.Uintptr(), frame.Array(0), r_ret.Uintptr(), 1)
	frame.Free()
}

func (self PackedInt64Array) Insert(at_index Int, value Int) Int {
	var selfPtr = self
	var frame = call.New()
	call.Arg(frame, at_index)
	call.Arg(frame, value)
	var r_ret = call.Ret[Int](frame)
	var p_self = call.Arg(frame, mmm.Get(selfPtr))
	mmm.API(selfPtr).builtin.PackedInt64Array.insert(p_self.Uintptr(), frame.Array(0), r_ret.Uintptr(), 2)
	var ret = r_ret.Get()
	frame.Free()
	return ret
}

func (self PackedInt64Array) Fill(value Int) {
	var selfPtr = self
	var frame = call.New()
	call.Arg(frame, value)
	var r_ret call.Nil
	var p_self = call.Arg(frame, mmm.Get(selfPtr))
	mmm.API(selfPtr).builtin.PackedInt64Array.fill(p_self.Uintptr(), frame.Array(0), r_ret.Uintptr(), 1)
	frame.Free()
}

func (self PackedInt64Array) Resize(new_size Int) Int {
	var selfPtr = self
	var frame = call.New()
	call.Arg(frame, new_size)
	var r_ret = call.Ret[Int](frame)
	var p_self = call.Arg(frame, mmm.Get(selfPtr))
	mmm.API(selfPtr).builtin.PackedInt64Array.resize(p_self.Uintptr(), frame.Array(0), r_ret.Uintptr(), 1)
	var ret = r_ret.Get()
	frame.Free()
	return ret
}

func (self PackedInt64Array) Clear() {
	var selfPtr = self
	var frame = call.New()
	var r_ret call.Nil
	var p_self = call.Arg(frame, mmm.Get(selfPtr))
	mmm.API(selfPtr).builtin.PackedInt64Array.clear(p_self.Uintptr(), frame.Array(0), r_ret.Uintptr(), 0)
	frame.Free()
}

func (self PackedInt64Array) Has(value Int) bool {
	var selfPtr = self
	var frame = call.New()
	call.Arg(frame, value)
	var r_ret = call.Ret[bool](frame)
	var p_self = call.Arg(frame, mmm.Get(selfPtr))
	mmm.API(selfPtr).builtin.PackedInt64Array.has(p_self.Uintptr(), frame.Array(0), r_ret.Uintptr(), 1)
	var ret = r_ret.Get()
	frame.Free()
	return ret
}

func (self PackedInt64Array) Reverse() {
	var selfPtr = self
	var frame = call.New()
	var r_ret call.Nil
	var p_self = call.Arg(frame, mmm.Get(selfPtr))
	mmm.API(selfPtr).builtin.PackedInt64Array.reverse(p_self.Uintptr(), frame.Array(0), r_ret.Uintptr(), 0)
	frame.Free()
}

func (self PackedInt64Array) Slice(ctx Context, begin Int, end Int) PackedInt64Array {
	var selfPtr = self
	var frame = call.New()
	call.Arg(frame, begin)
	call.Arg(frame, end)
	var r_ret = call.Ret[[2]uintptr](frame)
	var p_self = call.Arg(frame, mmm.Get(selfPtr))
	mmm.API(selfPtr).builtin.PackedInt64Array.slice(p_self.Uintptr(), frame.Array(0), r_ret.Uintptr(), 2)
	var ret = mmm.New[PackedInt64Array](ctx.Lifetime, ctx.API, r_ret.Get())
	frame.Free()
	return ret
}

func (self PackedInt64Array) ToByteArray(ctx Context) PackedByteArray {
	var selfPtr = self
	var frame = call.New()
	var r_ret = call.Ret[[2]uintptr](frame)
	var p_self = call.Arg(frame, mmm.Get(selfPtr))
	mmm.API(selfPtr).builtin.PackedInt64Array.to_byte_array(p_self.Uintptr(), frame.Array(0), r_ret.Uintptr(), 0)
	var ret = mmm.New[PackedByteArray](ctx.Lifetime, ctx.API, r_ret.Get())
	frame.Free()
	return ret
}

func (self PackedInt64Array) Sort() {
	var selfPtr = self
	var frame = call.New()
	var r_ret call.Nil
	var p_self = call.Arg(frame, mmm.Get(selfPtr))
	mmm.API(selfPtr).builtin.PackedInt64Array.sort(p_self.Uintptr(), frame.Array(0), r_ret.Uintptr(), 0)
	frame.Free()
}

func (self PackedInt64Array) Bsearch(value Int, before bool) Int {
	var selfPtr = self
	var frame = call.New()
	call.Arg(frame, value)
	call.Arg(frame, before)
	var r_ret = call.Ret[Int](frame)
	var p_self = call.Arg(frame, mmm.Get(selfPtr))
	mmm.API(selfPtr).builtin.PackedInt64Array.bsearch(p_self.Uintptr(), frame.Array(0), r_ret.Uintptr(), 2)
	var ret = r_ret.Get()
	frame.Free()
	return ret
}

func (self PackedInt64Array) Duplicate(ctx Context) PackedInt64Array {
	var selfPtr = self
	var frame = call.New()
	var r_ret = call.Ret[[2]uintptr](frame)
	var p_self = call.Arg(frame, mmm.Get(selfPtr))
	mmm.API(selfPtr).builtin.PackedInt64Array.duplicate(p_self.Uintptr(), frame.Array(0), r_ret.Uintptr(), 0)
	var ret = mmm.New[PackedInt64Array](ctx.Lifetime, ctx.API, r_ret.Get())
	frame.Free()
	return ret
}

func (self PackedInt64Array) Find(value Int, from Int) Int {
	var selfPtr = self
	var frame = call.New()
	call.Arg(frame, value)
	call.Arg(frame, from)
	var r_ret = call.Ret[Int](frame)
	var p_self = call.Arg(frame, mmm.Get(selfPtr))
	mmm.API(selfPtr).builtin.PackedInt64Array.find(p_self.Uintptr(), frame.Array(0), r_ret.Uintptr(), 2)
	var ret = r_ret.Get()
	frame.Free()
	return ret
}

func (self PackedInt64Array) Rfind(value Int, from Int) Int {
	var selfPtr = self
	var frame = call.New()
	call.Arg(frame, value)
	call.Arg(frame, from)
	var r_ret = call.Ret[Int](frame)
	var p_self = call.Arg(frame, mmm.Get(selfPtr))
	mmm.API(selfPtr).builtin.PackedInt64Array.rfind(p_self.Uintptr(), frame.Array(0), r_ret.Uintptr(), 2)
	var ret = r_ret.Get()
	frame.Free()
	return ret
}

func (self PackedInt64Array) Count(value Int) Int {
	var selfPtr = self
	var frame = call.New()
	call.Arg(frame, value)
	var r_ret = call.Ret[Int](frame)
	var p_self = call.Arg(frame, mmm.Get(selfPtr))
	mmm.API(selfPtr).builtin.PackedInt64Array.count(p_self.Uintptr(), frame.Array(0), r_ret.Uintptr(), 1)
	var ret = r_ret.Get()
	frame.Free()
	return ret
}

func (self PackedFloat32Array) Size() Int {
	var selfPtr = self
	var frame = call.New()
	var r_ret = call.Ret[Int](frame)
	var p_self = call.Arg(frame, mmm.Get(selfPtr))
	mmm.API(selfPtr).builtin.PackedFloat32Array.size(p_self.Uintptr(), frame.Array(0), r_ret.Uintptr(), 0)
	var ret = r_ret.Get()
	frame.Free()
	return ret
}

func (self PackedFloat32Array) IsEmpty() bool {
	var selfPtr = self
	var frame = call.New()
	var r_ret = call.Ret[bool](frame)
	var p_self = call.Arg(frame, mmm.Get(selfPtr))
	mmm.API(selfPtr).builtin.PackedFloat32Array.is_empty(p_self.Uintptr(), frame.Array(0), r_ret.Uintptr(), 0)
	var ret = r_ret.Get()
	frame.Free()
	return ret
}

func (self PackedFloat32Array) Set(index Int, value Float) {
	var selfPtr = self
	var frame = call.New()
	call.Arg(frame, index)
	call.Arg(frame, value)
	var r_ret call.Nil
	var p_self = call.Arg(frame, mmm.Get(selfPtr))
	mmm.API(selfPtr).builtin.PackedFloat32Array.set(p_self.Uintptr(), frame.Array(0), r_ret.Uintptr(), 2)
	frame.Free()
}

func (self PackedFloat32Array) PushBack(value Float) bool {
	var selfPtr = self
	var frame = call.New()
	call.Arg(frame, value)
	var r_ret = call.Ret[bool](frame)
	var p_self = call.Arg(frame, mmm.Get(selfPtr))
	mmm.API(selfPtr).builtin.PackedFloat32Array.push_back(p_self.Uintptr(), frame.Array(0), r_ret.Uintptr(), 1)
	var ret = r_ret.Get()
	frame.Free()
	return ret
}

func (self PackedFloat32Array) Append(value Float) bool {
	var selfPtr = self
	var frame = call.New()
	call.Arg(frame, value)
	var r_ret = call.Ret[bool](frame)
	var p_self = call.Arg(frame, mmm.Get(selfPtr))
	mmm.API(selfPtr).builtin.PackedFloat32Array.append(p_self.Uintptr(), frame.Array(0), r_ret.Uintptr(), 1)
	var ret = r_ret.Get()
	frame.Free()
	return ret
}

func (self PackedFloat32Array) AppendArray(array PackedFloat32Array) {
	var selfPtr = self
	var frame = call.New()
	call.Arg(frame, mmm.Get(array))
	var r_ret call.Nil
	var p_self = call.Arg(frame, mmm.Get(selfPtr))
	mmm.API(selfPtr).builtin.PackedFloat32Array.append_array(p_self.Uintptr(), frame.Array(0), r_ret.Uintptr(), 1)
	frame.Free()
}

func (self PackedFloat32Array) RemoveAt(index Int) {
	var selfPtr = self
	var frame = call.New()
	call.Arg(frame, index)
	var r_ret call.Nil
	var p_self = call.Arg(frame, mmm.Get(selfPtr))
	mmm.API(selfPtr).builtin.PackedFloat32Array.remove_at(p_self.Uintptr(), frame.Array(0), r_ret.Uintptr(), 1)
	frame.Free()
}

func (self PackedFloat32Array) Insert(at_index Int, value Float) Int {
	var selfPtr = self
	var frame = call.New()
	call.Arg(frame, at_index)
	call.Arg(frame, value)
	var r_ret = call.Ret[Int](frame)
	var p_self = call.Arg(frame, mmm.Get(selfPtr))
	mmm.API(selfPtr).builtin.PackedFloat32Array.insert(p_self.Uintptr(), frame.Array(0), r_ret.Uintptr(), 2)
	var ret = r_ret.Get()
	frame.Free()
	return ret
}

func (self PackedFloat32Array) Fill(value Float) {
	var selfPtr = self
	var frame = call.New()
	call.Arg(frame, value)
	var r_ret call.Nil
	var p_self = call.Arg(frame, mmm.Get(selfPtr))
	mmm.API(selfPtr).builtin.PackedFloat32Array.fill(p_self.Uintptr(), frame.Array(0), r_ret.Uintptr(), 1)
	frame.Free()
}

func (self PackedFloat32Array) Resize(new_size Int) Int {
	var selfPtr = self
	var frame = call.New()
	call.Arg(frame, new_size)
	var r_ret = call.Ret[Int](frame)
	var p_self = call.Arg(frame, mmm.Get(selfPtr))
	mmm.API(selfPtr).builtin.PackedFloat32Array.resize(p_self.Uintptr(), frame.Array(0), r_ret.Uintptr(), 1)
	var ret = r_ret.Get()
	frame.Free()
	return ret
}

func (self PackedFloat32Array) Clear() {
	var selfPtr = self
	var frame = call.New()
	var r_ret call.Nil
	var p_self = call.Arg(frame, mmm.Get(selfPtr))
	mmm.API(selfPtr).builtin.PackedFloat32Array.clear(p_self.Uintptr(), frame.Array(0), r_ret.Uintptr(), 0)
	frame.Free()
}

func (self PackedFloat32Array) Has(value Float) bool {
	var selfPtr = self
	var frame = call.New()
	call.Arg(frame, value)
	var r_ret = call.Ret[bool](frame)
	var p_self = call.Arg(frame, mmm.Get(selfPtr))
	mmm.API(selfPtr).builtin.PackedFloat32Array.has(p_self.Uintptr(), frame.Array(0), r_ret.Uintptr(), 1)
	var ret = r_ret.Get()
	frame.Free()
	return ret
}

func (self PackedFloat32Array) Reverse() {
	var selfPtr = self
	var frame = call.New()
	var r_ret call.Nil
	var p_self = call.Arg(frame, mmm.Get(selfPtr))
	mmm.API(selfPtr).builtin.PackedFloat32Array.reverse(p_self.Uintptr(), frame.Array(0), r_ret.Uintptr(), 0)
	frame.Free()
}

func (self PackedFloat32Array) Slice(ctx Context, begin Int, end Int) PackedFloat32Array {
	var selfPtr = self
	var frame = call.New()
	call.Arg(frame, begin)
	call.Arg(frame, end)
	var r_ret = call.Ret[[2]uintptr](frame)
	var p_self = call.Arg(frame, mmm.Get(selfPtr))
	mmm.API(selfPtr).builtin.PackedFloat32Array.slice(p_self.Uintptr(), frame.Array(0), r_ret.Uintptr(), 2)
	var ret = mmm.New[PackedFloat32Array](ctx.Lifetime, ctx.API, r_ret.Get())
	frame.Free()
	return ret
}

func (self PackedFloat32Array) ToByteArray(ctx Context) PackedByteArray {
	var selfPtr = self
	var frame = call.New()
	var r_ret = call.Ret[[2]uintptr](frame)
	var p_self = call.Arg(frame, mmm.Get(selfPtr))
	mmm.API(selfPtr).builtin.PackedFloat32Array.to_byte_array(p_self.Uintptr(), frame.Array(0), r_ret.Uintptr(), 0)
	var ret = mmm.New[PackedByteArray](ctx.Lifetime, ctx.API, r_ret.Get())
	frame.Free()
	return ret
}

func (self PackedFloat32Array) Sort() {
	var selfPtr = self
	var frame = call.New()
	var r_ret call.Nil
	var p_self = call.Arg(frame, mmm.Get(selfPtr))
	mmm.API(selfPtr).builtin.PackedFloat32Array.sort(p_self.Uintptr(), frame.Array(0), r_ret.Uintptr(), 0)
	frame.Free()
}

func (self PackedFloat32Array) Bsearch(value Float, before bool) Int {
	var selfPtr = self
	var frame = call.New()
	call.Arg(frame, value)
	call.Arg(frame, before)
	var r_ret = call.Ret[Int](frame)
	var p_self = call.Arg(frame, mmm.Get(selfPtr))
	mmm.API(selfPtr).builtin.PackedFloat32Array.bsearch(p_self.Uintptr(), frame.Array(0), r_ret.Uintptr(), 2)
	var ret = r_ret.Get()
	frame.Free()
	return ret
}

func (self PackedFloat32Array) Duplicate(ctx Context) PackedFloat32Array {
	var selfPtr = self
	var frame = call.New()
	var r_ret = call.Ret[[2]uintptr](frame)
	var p_self = call.Arg(frame, mmm.Get(selfPtr))
	mmm.API(selfPtr).builtin.PackedFloat32Array.duplicate(p_self.Uintptr(), frame.Array(0), r_ret.Uintptr(), 0)
	var ret = mmm.New[PackedFloat32Array](ctx.Lifetime, ctx.API, r_ret.Get())
	frame.Free()
	return ret
}

func (self PackedFloat32Array) Find(value Float, from Int) Int {
	var selfPtr = self
	var frame = call.New()
	call.Arg(frame, value)
	call.Arg(frame, from)
	var r_ret = call.Ret[Int](frame)
	var p_self = call.Arg(frame, mmm.Get(selfPtr))
	mmm.API(selfPtr).builtin.PackedFloat32Array.find(p_self.Uintptr(), frame.Array(0), r_ret.Uintptr(), 2)
	var ret = r_ret.Get()
	frame.Free()
	return ret
}

func (self PackedFloat32Array) Rfind(value Float, from Int) Int {
	var selfPtr = self
	var frame = call.New()
	call.Arg(frame, value)
	call.Arg(frame, from)
	var r_ret = call.Ret[Int](frame)
	var p_self = call.Arg(frame, mmm.Get(selfPtr))
	mmm.API(selfPtr).builtin.PackedFloat32Array.rfind(p_self.Uintptr(), frame.Array(0), r_ret.Uintptr(), 2)
	var ret = r_ret.Get()
	frame.Free()
	return ret
}

func (self PackedFloat32Array) Count(value Float) Int {
	var selfPtr = self
	var frame = call.New()
	call.Arg(frame, value)
	var r_ret = call.Ret[Int](frame)
	var p_self = call.Arg(frame, mmm.Get(selfPtr))
	mmm.API(selfPtr).builtin.PackedFloat32Array.count(p_self.Uintptr(), frame.Array(0), r_ret.Uintptr(), 1)
	var ret = r_ret.Get()
	frame.Free()
	return ret
}

func (self PackedFloat64Array) Size() Int {
	var selfPtr = self
	var frame = call.New()
	var r_ret = call.Ret[Int](frame)
	var p_self = call.Arg(frame, mmm.Get(selfPtr))
	mmm.API(selfPtr).builtin.PackedFloat64Array.size(p_self.Uintptr(), frame.Array(0), r_ret.Uintptr(), 0)
	var ret = r_ret.Get()
	frame.Free()
	return ret
}

func (self PackedFloat64Array) IsEmpty() bool {
	var selfPtr = self
	var frame = call.New()
	var r_ret = call.Ret[bool](frame)
	var p_self = call.Arg(frame, mmm.Get(selfPtr))
	mmm.API(selfPtr).builtin.PackedFloat64Array.is_empty(p_self.Uintptr(), frame.Array(0), r_ret.Uintptr(), 0)
	var ret = r_ret.Get()
	frame.Free()
	return ret
}

func (self PackedFloat64Array) Set(index Int, value Float) {
	var selfPtr = self
	var frame = call.New()
	call.Arg(frame, index)
	call.Arg(frame, value)
	var r_ret call.Nil
	var p_self = call.Arg(frame, mmm.Get(selfPtr))
	mmm.API(selfPtr).builtin.PackedFloat64Array.set(p_self.Uintptr(), frame.Array(0), r_ret.Uintptr(), 2)
	frame.Free()
}

func (self PackedFloat64Array) PushBack(value Float) bool {
	var selfPtr = self
	var frame = call.New()
	call.Arg(frame, value)
	var r_ret = call.Ret[bool](frame)
	var p_self = call.Arg(frame, mmm.Get(selfPtr))
	mmm.API(selfPtr).builtin.PackedFloat64Array.push_back(p_self.Uintptr(), frame.Array(0), r_ret.Uintptr(), 1)
	var ret = r_ret.Get()
	frame.Free()
	return ret
}

func (self PackedFloat64Array) Append(value Float) bool {
	var selfPtr = self
	var frame = call.New()
	call.Arg(frame, value)
	var r_ret = call.Ret[bool](frame)
	var p_self = call.Arg(frame, mmm.Get(selfPtr))
	mmm.API(selfPtr).builtin.PackedFloat64Array.append(p_self.Uintptr(), frame.Array(0), r_ret.Uintptr(), 1)
	var ret = r_ret.Get()
	frame.Free()
	return ret
}

func (self PackedFloat64Array) AppendArray(array PackedFloat64Array) {
	var selfPtr = self
	var frame = call.New()
	call.Arg(frame, mmm.Get(array))
	var r_ret call.Nil
	var p_self = call.Arg(frame, mmm.Get(selfPtr))
	mmm.API(selfPtr).builtin.PackedFloat64Array.append_array(p_self.Uintptr(), frame.Array(0), r_ret.Uintptr(), 1)
	frame.Free()
}

func (self PackedFloat64Array) RemoveAt(index Int) {
	var selfPtr = self
	var frame = call.New()
	call.Arg(frame, index)
	var r_ret call.Nil
	var p_self = call.Arg(frame, mmm.Get(selfPtr))
	mmm.API(selfPtr).builtin.PackedFloat64Array.remove_at(p_self.Uintptr(), frame.Array(0), r_ret.Uintptr(), 1)
	frame.Free()
}

func (self PackedFloat64Array) Insert(at_index Int, value Float) Int {
	var selfPtr = self
	var frame = call.New()
	call.Arg(frame, at_index)
	call.Arg(frame, value)
	var r_ret = call.Ret[Int](frame)
	var p_self = call.Arg(frame, mmm.Get(selfPtr))
	mmm.API(selfPtr).builtin.PackedFloat64Array.insert(p_self.Uintptr(), frame.Array(0), r_ret.Uintptr(), 2)
	var ret = r_ret.Get()
	frame.Free()
	return ret
}

func (self PackedFloat64Array) Fill(value Float) {
	var selfPtr = self
	var frame = call.New()
	call.Arg(frame, value)
	var r_ret call.Nil
	var p_self = call.Arg(frame, mmm.Get(selfPtr))
	mmm.API(selfPtr).builtin.PackedFloat64Array.fill(p_self.Uintptr(), frame.Array(0), r_ret.Uintptr(), 1)
	frame.Free()
}

func (self PackedFloat64Array) Resize(new_size Int) Int {
	var selfPtr = self
	var frame = call.New()
	call.Arg(frame, new_size)
	var r_ret = call.Ret[Int](frame)
	var p_self = call.Arg(frame, mmm.Get(selfPtr))
	mmm.API(selfPtr).builtin.PackedFloat64Array.resize(p_self.Uintptr(), frame.Array(0), r_ret.Uintptr(), 1)
	var ret = r_ret.Get()
	frame.Free()
	return ret
}

func (self PackedFloat64Array) Clear() {
	var selfPtr = self
	var frame = call.New()
	var r_ret call.Nil
	var p_self = call.Arg(frame, mmm.Get(selfPtr))
	mmm.API(selfPtr).builtin.PackedFloat64Array.clear(p_self.Uintptr(), frame.Array(0), r_ret.Uintptr(), 0)
	frame.Free()
}

func (self PackedFloat64Array) Has(value Float) bool {
	var selfPtr = self
	var frame = call.New()
	call.Arg(frame, value)
	var r_ret = call.Ret[bool](frame)
	var p_self = call.Arg(frame, mmm.Get(selfPtr))
	mmm.API(selfPtr).builtin.PackedFloat64Array.has(p_self.Uintptr(), frame.Array(0), r_ret.Uintptr(), 1)
	var ret = r_ret.Get()
	frame.Free()
	return ret
}

func (self PackedFloat64Array) Reverse() {
	var selfPtr = self
	var frame = call.New()
	var r_ret call.Nil
	var p_self = call.Arg(frame, mmm.Get(selfPtr))
	mmm.API(selfPtr).builtin.PackedFloat64Array.reverse(p_self.Uintptr(), frame.Array(0), r_ret.Uintptr(), 0)
	frame.Free()
}

func (self PackedFloat64Array) Slice(ctx Context, begin Int, end Int) PackedFloat64Array {
	var selfPtr = self
	var frame = call.New()
	call.Arg(frame, begin)
	call.Arg(frame, end)
	var r_ret = call.Ret[[2]uintptr](frame)
	var p_self = call.Arg(frame, mmm.Get(selfPtr))
	mmm.API(selfPtr).builtin.PackedFloat64Array.slice(p_self.Uintptr(), frame.Array(0), r_ret.Uintptr(), 2)
	var ret = mmm.New[PackedFloat64Array](ctx.Lifetime, ctx.API, r_ret.Get())
	frame.Free()
	return ret
}

func (self PackedFloat64Array) ToByteArray(ctx Context) PackedByteArray {
	var selfPtr = self
	var frame = call.New()
	var r_ret = call.Ret[[2]uintptr](frame)
	var p_self = call.Arg(frame, mmm.Get(selfPtr))
	mmm.API(selfPtr).builtin.PackedFloat64Array.to_byte_array(p_self.Uintptr(), frame.Array(0), r_ret.Uintptr(), 0)
	var ret = mmm.New[PackedByteArray](ctx.Lifetime, ctx.API, r_ret.Get())
	frame.Free()
	return ret
}

func (self PackedFloat64Array) Sort() {
	var selfPtr = self
	var frame = call.New()
	var r_ret call.Nil
	var p_self = call.Arg(frame, mmm.Get(selfPtr))
	mmm.API(selfPtr).builtin.PackedFloat64Array.sort(p_self.Uintptr(), frame.Array(0), r_ret.Uintptr(), 0)
	frame.Free()
}

func (self PackedFloat64Array) Bsearch(value Float, before bool) Int {
	var selfPtr = self
	var frame = call.New()
	call.Arg(frame, value)
	call.Arg(frame, before)
	var r_ret = call.Ret[Int](frame)
	var p_self = call.Arg(frame, mmm.Get(selfPtr))
	mmm.API(selfPtr).builtin.PackedFloat64Array.bsearch(p_self.Uintptr(), frame.Array(0), r_ret.Uintptr(), 2)
	var ret = r_ret.Get()
	frame.Free()
	return ret
}

func (self PackedFloat64Array) Duplicate(ctx Context) PackedFloat64Array {
	var selfPtr = self
	var frame = call.New()
	var r_ret = call.Ret[[2]uintptr](frame)
	var p_self = call.Arg(frame, mmm.Get(selfPtr))
	mmm.API(selfPtr).builtin.PackedFloat64Array.duplicate(p_self.Uintptr(), frame.Array(0), r_ret.Uintptr(), 0)
	var ret = mmm.New[PackedFloat64Array](ctx.Lifetime, ctx.API, r_ret.Get())
	frame.Free()
	return ret
}

func (self PackedFloat64Array) Find(value Float, from Int) Int {
	var selfPtr = self
	var frame = call.New()
	call.Arg(frame, value)
	call.Arg(frame, from)
	var r_ret = call.Ret[Int](frame)
	var p_self = call.Arg(frame, mmm.Get(selfPtr))
	mmm.API(selfPtr).builtin.PackedFloat64Array.find(p_self.Uintptr(), frame.Array(0), r_ret.Uintptr(), 2)
	var ret = r_ret.Get()
	frame.Free()
	return ret
}

func (self PackedFloat64Array) Rfind(value Float, from Int) Int {
	var selfPtr = self
	var frame = call.New()
	call.Arg(frame, value)
	call.Arg(frame, from)
	var r_ret = call.Ret[Int](frame)
	var p_self = call.Arg(frame, mmm.Get(selfPtr))
	mmm.API(selfPtr).builtin.PackedFloat64Array.rfind(p_self.Uintptr(), frame.Array(0), r_ret.Uintptr(), 2)
	var ret = r_ret.Get()
	frame.Free()
	return ret
}

func (self PackedFloat64Array) Count(value Float) Int {
	var selfPtr = self
	var frame = call.New()
	call.Arg(frame, value)
	var r_ret = call.Ret[Int](frame)
	var p_self = call.Arg(frame, mmm.Get(selfPtr))
	mmm.API(selfPtr).builtin.PackedFloat64Array.count(p_self.Uintptr(), frame.Array(0), r_ret.Uintptr(), 1)
	var ret = r_ret.Get()
	frame.Free()
	return ret
}

func (self PackedStringArray) Size() Int {
	var selfPtr = self
	var frame = call.New()
	var r_ret = call.Ret[Int](frame)
	var p_self = call.Arg(frame, mmm.Get(selfPtr))
	mmm.API(selfPtr).builtin.PackedStringArray.size(p_self.Uintptr(), frame.Array(0), r_ret.Uintptr(), 0)
	var ret = r_ret.Get()
	frame.Free()
	return ret
}

func (self PackedStringArray) IsEmpty() bool {
	var selfPtr = self
	var frame = call.New()
	var r_ret = call.Ret[bool](frame)
	var p_self = call.Arg(frame, mmm.Get(selfPtr))
	mmm.API(selfPtr).builtin.PackedStringArray.is_empty(p_self.Uintptr(), frame.Array(0), r_ret.Uintptr(), 0)
	var ret = r_ret.Get()
	frame.Free()
	return ret
}

func (self PackedStringArray) Set(index Int, value String) {
	var selfPtr = self
	var frame = call.New()
	call.Arg(frame, index)
	call.Arg(frame, mmm.Get(value))
	var r_ret call.Nil
	var p_self = call.Arg(frame, mmm.Get(selfPtr))
	mmm.API(selfPtr).builtin.PackedStringArray.set(p_self.Uintptr(), frame.Array(0), r_ret.Uintptr(), 2)
	frame.Free()
}

func (self PackedStringArray) PushBack(value String) bool {
	var selfPtr = self
	var frame = call.New()
	call.Arg(frame, mmm.Get(value))
	var r_ret = call.Ret[bool](frame)
	var p_self = call.Arg(frame, mmm.Get(selfPtr))
	mmm.API(selfPtr).builtin.PackedStringArray.push_back(p_self.Uintptr(), frame.Array(0), r_ret.Uintptr(), 1)
	var ret = r_ret.Get()
	frame.Free()
	return ret
}

func (self PackedStringArray) Append(value String) bool {
	var selfPtr = self
	var frame = call.New()
	call.Arg(frame, mmm.Get(value))
	var r_ret = call.Ret[bool](frame)
	var p_self = call.Arg(frame, mmm.Get(selfPtr))
	mmm.API(selfPtr).builtin.PackedStringArray.append(p_self.Uintptr(), frame.Array(0), r_ret.Uintptr(), 1)
	var ret = r_ret.Get()
	frame.Free()
	return ret
}

func (self PackedStringArray) AppendArray(array PackedStringArray) {
	var selfPtr = self
	var frame = call.New()
	call.Arg(frame, mmm.Get(array))
	var r_ret call.Nil
	var p_self = call.Arg(frame, mmm.Get(selfPtr))
	mmm.API(selfPtr).builtin.PackedStringArray.append_array(p_self.Uintptr(), frame.Array(0), r_ret.Uintptr(), 1)
	frame.Free()
}

func (self PackedStringArray) RemoveAt(index Int) {
	var selfPtr = self
	var frame = call.New()
	call.Arg(frame, index)
	var r_ret call.Nil
	var p_self = call.Arg(frame, mmm.Get(selfPtr))
	mmm.API(selfPtr).builtin.PackedStringArray.remove_at(p_self.Uintptr(), frame.Array(0), r_ret.Uintptr(), 1)
	frame.Free()
}

func (self PackedStringArray) Insert(at_index Int, value String) Int {
	var selfPtr = self
	var frame = call.New()
	call.Arg(frame, at_index)
	call.Arg(frame, mmm.Get(value))
	var r_ret = call.Ret[Int](frame)
	var p_self = call.Arg(frame, mmm.Get(selfPtr))
	mmm.API(selfPtr).builtin.PackedStringArray.insert(p_self.Uintptr(), frame.Array(0), r_ret.Uintptr(), 2)
	var ret = r_ret.Get()
	frame.Free()
	return ret
}

func (self PackedStringArray) Fill(value String) {
	var selfPtr = self
	var frame = call.New()
	call.Arg(frame, mmm.Get(value))
	var r_ret call.Nil
	var p_self = call.Arg(frame, mmm.Get(selfPtr))
	mmm.API(selfPtr).builtin.PackedStringArray.fill(p_self.Uintptr(), frame.Array(0), r_ret.Uintptr(), 1)
	frame.Free()
}

func (self PackedStringArray) Resize(new_size Int) Int {
	var selfPtr = self
	var frame = call.New()
	call.Arg(frame, new_size)
	var r_ret = call.Ret[Int](frame)
	var p_self = call.Arg(frame, mmm.Get(selfPtr))
	mmm.API(selfPtr).builtin.PackedStringArray.resize(p_self.Uintptr(), frame.Array(0), r_ret.Uintptr(), 1)
	var ret = r_ret.Get()
	frame.Free()
	return ret
}

func (self PackedStringArray) Clear() {
	var selfPtr = self
	var frame = call.New()
	var r_ret call.Nil
	var p_self = call.Arg(frame, mmm.Get(selfPtr))
	mmm.API(selfPtr).builtin.PackedStringArray.clear(p_self.Uintptr(), frame.Array(0), r_ret.Uintptr(), 0)
	frame.Free()
}

func (self PackedStringArray) Has(value String) bool {
	var selfPtr = self
	var frame = call.New()
	call.Arg(frame, mmm.Get(value))
	var r_ret = call.Ret[bool](frame)
	var p_self = call.Arg(frame, mmm.Get(selfPtr))
	mmm.API(selfPtr).builtin.PackedStringArray.has(p_self.Uintptr(), frame.Array(0), r_ret.Uintptr(), 1)
	var ret = r_ret.Get()
	frame.Free()
	return ret
}

func (self PackedStringArray) Reverse() {
	var selfPtr = self
	var frame = call.New()
	var r_ret call.Nil
	var p_self = call.Arg(frame, mmm.Get(selfPtr))
	mmm.API(selfPtr).builtin.PackedStringArray.reverse(p_self.Uintptr(), frame.Array(0), r_ret.Uintptr(), 0)
	frame.Free()
}

func (self PackedStringArray) Slice(ctx Context, begin Int, end Int) PackedStringArray {
	var selfPtr = self
	var frame = call.New()
	call.Arg(frame, begin)
	call.Arg(frame, end)
	var r_ret = call.Ret[[2]uintptr](frame)
	var p_self = call.Arg(frame, mmm.Get(selfPtr))
	mmm.API(selfPtr).builtin.PackedStringArray.slice(p_self.Uintptr(), frame.Array(0), r_ret.Uintptr(), 2)
	var ret = mmm.New[PackedStringArray](ctx.Lifetime, ctx.API, r_ret.Get())
	frame.Free()
	return ret
}

func (self PackedStringArray) ToByteArray(ctx Context) PackedByteArray {
	var selfPtr = self
	var frame = call.New()
	var r_ret = call.Ret[[2]uintptr](frame)
	var p_self = call.Arg(frame, mmm.Get(selfPtr))
	mmm.API(selfPtr).builtin.PackedStringArray.to_byte_array(p_self.Uintptr(), frame.Array(0), r_ret.Uintptr(), 0)
	var ret = mmm.New[PackedByteArray](ctx.Lifetime, ctx.API, r_ret.Get())
	frame.Free()
	return ret
}

func (self PackedStringArray) Sort() {
	var selfPtr = self
	var frame = call.New()
	var r_ret call.Nil
	var p_self = call.Arg(frame, mmm.Get(selfPtr))
	mmm.API(selfPtr).builtin.PackedStringArray.sort(p_self.Uintptr(), frame.Array(0), r_ret.Uintptr(), 0)
	frame.Free()
}

func (self PackedStringArray) Bsearch(value String, before bool) Int {
	var selfPtr = self
	var frame = call.New()
	call.Arg(frame, mmm.Get(value))
	call.Arg(frame, before)
	var r_ret = call.Ret[Int](frame)
	var p_self = call.Arg(frame, mmm.Get(selfPtr))
	mmm.API(selfPtr).builtin.PackedStringArray.bsearch(p_self.Uintptr(), frame.Array(0), r_ret.Uintptr(), 2)
	var ret = r_ret.Get()
	frame.Free()
	return ret
}

func (self PackedStringArray) Duplicate(ctx Context) PackedStringArray {
	var selfPtr = self
	var frame = call.New()
	var r_ret = call.Ret[[2]uintptr](frame)
	var p_self = call.Arg(frame, mmm.Get(selfPtr))
	mmm.API(selfPtr).builtin.PackedStringArray.duplicate(p_self.Uintptr(), frame.Array(0), r_ret.Uintptr(), 0)
	var ret = mmm.New[PackedStringArray](ctx.Lifetime, ctx.API, r_ret.Get())
	frame.Free()
	return ret
}

func (self PackedStringArray) Find(value String, from Int) Int {
	var selfPtr = self
	var frame = call.New()
	call.Arg(frame, mmm.Get(value))
	call.Arg(frame, from)
	var r_ret = call.Ret[Int](frame)
	var p_self = call.Arg(frame, mmm.Get(selfPtr))
	mmm.API(selfPtr).builtin.PackedStringArray.find(p_self.Uintptr(), frame.Array(0), r_ret.Uintptr(), 2)
	var ret = r_ret.Get()
	frame.Free()
	return ret
}

func (self PackedStringArray) Rfind(value String, from Int) Int {
	var selfPtr = self
	var frame = call.New()
	call.Arg(frame, mmm.Get(value))
	call.Arg(frame, from)
	var r_ret = call.Ret[Int](frame)
	var p_self = call.Arg(frame, mmm.Get(selfPtr))
	mmm.API(selfPtr).builtin.PackedStringArray.rfind(p_self.Uintptr(), frame.Array(0), r_ret.Uintptr(), 2)
	var ret = r_ret.Get()
	frame.Free()
	return ret
}

func (self PackedStringArray) Count(value String) Int {
	var selfPtr = self
	var frame = call.New()
	call.Arg(frame, mmm.Get(value))
	var r_ret = call.Ret[Int](frame)
	var p_self = call.Arg(frame, mmm.Get(selfPtr))
	mmm.API(selfPtr).builtin.PackedStringArray.count(p_self.Uintptr(), frame.Array(0), r_ret.Uintptr(), 1)
	var ret = r_ret.Get()
	frame.Free()
	return ret
}

func (self PackedVector2Array) Size() Int {
	var selfPtr = self
	var frame = call.New()
	var r_ret = call.Ret[Int](frame)
	var p_self = call.Arg(frame, mmm.Get(selfPtr))
	mmm.API(selfPtr).builtin.PackedVector2Array.size(p_self.Uintptr(), frame.Array(0), r_ret.Uintptr(), 0)
	var ret = r_ret.Get()
	frame.Free()
	return ret
}

func (self PackedVector2Array) IsEmpty() bool {
	var selfPtr = self
	var frame = call.New()
	var r_ret = call.Ret[bool](frame)
	var p_self = call.Arg(frame, mmm.Get(selfPtr))
	mmm.API(selfPtr).builtin.PackedVector2Array.is_empty(p_self.Uintptr(), frame.Array(0), r_ret.Uintptr(), 0)
	var ret = r_ret.Get()
	frame.Free()
	return ret
}

func (self PackedVector2Array) Set(index Int, value Vector2) {
	var selfPtr = self
	var frame = call.New()
	call.Arg(frame, index)
	call.Arg(frame, value)
	var r_ret call.Nil
	var p_self = call.Arg(frame, mmm.Get(selfPtr))
	mmm.API(selfPtr).builtin.PackedVector2Array.set(p_self.Uintptr(), frame.Array(0), r_ret.Uintptr(), 2)
	frame.Free()
}

func (self PackedVector2Array) PushBack(value Vector2) bool {
	var selfPtr = self
	var frame = call.New()
	call.Arg(frame, value)
	var r_ret = call.Ret[bool](frame)
	var p_self = call.Arg(frame, mmm.Get(selfPtr))
	mmm.API(selfPtr).builtin.PackedVector2Array.push_back(p_self.Uintptr(), frame.Array(0), r_ret.Uintptr(), 1)
	var ret = r_ret.Get()
	frame.Free()
	return ret
}

func (self PackedVector2Array) Append(value Vector2) bool {
	var selfPtr = self
	var frame = call.New()
	call.Arg(frame, value)
	var r_ret = call.Ret[bool](frame)
	var p_self = call.Arg(frame, mmm.Get(selfPtr))
	mmm.API(selfPtr).builtin.PackedVector2Array.append(p_self.Uintptr(), frame.Array(0), r_ret.Uintptr(), 1)
	var ret = r_ret.Get()
	frame.Free()
	return ret
}

func (self PackedVector2Array) AppendArray(array PackedVector2Array) {
	var selfPtr = self
	var frame = call.New()
	call.Arg(frame, mmm.Get(array))
	var r_ret call.Nil
	var p_self = call.Arg(frame, mmm.Get(selfPtr))
	mmm.API(selfPtr).builtin.PackedVector2Array.append_array(p_self.Uintptr(), frame.Array(0), r_ret.Uintptr(), 1)
	frame.Free()
}

func (self PackedVector2Array) RemoveAt(index Int) {
	var selfPtr = self
	var frame = call.New()
	call.Arg(frame, index)
	var r_ret call.Nil
	var p_self = call.Arg(frame, mmm.Get(selfPtr))
	mmm.API(selfPtr).builtin.PackedVector2Array.remove_at(p_self.Uintptr(), frame.Array(0), r_ret.Uintptr(), 1)
	frame.Free()
}

func (self PackedVector2Array) Insert(at_index Int, value Vector2) Int {
	var selfPtr = self
	var frame = call.New()
	call.Arg(frame, at_index)
	call.Arg(frame, value)
	var r_ret = call.Ret[Int](frame)
	var p_self = call.Arg(frame, mmm.Get(selfPtr))
	mmm.API(selfPtr).builtin.PackedVector2Array.insert(p_self.Uintptr(), frame.Array(0), r_ret.Uintptr(), 2)
	var ret = r_ret.Get()
	frame.Free()
	return ret
}

func (self PackedVector2Array) Fill(value Vector2) {
	var selfPtr = self
	var frame = call.New()
	call.Arg(frame, value)
	var r_ret call.Nil
	var p_self = call.Arg(frame, mmm.Get(selfPtr))
	mmm.API(selfPtr).builtin.PackedVector2Array.fill(p_self.Uintptr(), frame.Array(0), r_ret.Uintptr(), 1)
	frame.Free()
}

func (self PackedVector2Array) Resize(new_size Int) Int {
	var selfPtr = self
	var frame = call.New()
	call.Arg(frame, new_size)
	var r_ret = call.Ret[Int](frame)
	var p_self = call.Arg(frame, mmm.Get(selfPtr))
	mmm.API(selfPtr).builtin.PackedVector2Array.resize(p_self.Uintptr(), frame.Array(0), r_ret.Uintptr(), 1)
	var ret = r_ret.Get()
	frame.Free()
	return ret
}

func (self PackedVector2Array) Clear() {
	var selfPtr = self
	var frame = call.New()
	var r_ret call.Nil
	var p_self = call.Arg(frame, mmm.Get(selfPtr))
	mmm.API(selfPtr).builtin.PackedVector2Array.clear(p_self.Uintptr(), frame.Array(0), r_ret.Uintptr(), 0)
	frame.Free()
}

func (self PackedVector2Array) Has(value Vector2) bool {
	var selfPtr = self
	var frame = call.New()
	call.Arg(frame, value)
	var r_ret = call.Ret[bool](frame)
	var p_self = call.Arg(frame, mmm.Get(selfPtr))
	mmm.API(selfPtr).builtin.PackedVector2Array.has(p_self.Uintptr(), frame.Array(0), r_ret.Uintptr(), 1)
	var ret = r_ret.Get()
	frame.Free()
	return ret
}

func (self PackedVector2Array) Reverse() {
	var selfPtr = self
	var frame = call.New()
	var r_ret call.Nil
	var p_self = call.Arg(frame, mmm.Get(selfPtr))
	mmm.API(selfPtr).builtin.PackedVector2Array.reverse(p_self.Uintptr(), frame.Array(0), r_ret.Uintptr(), 0)
	frame.Free()
}

func (self PackedVector2Array) Slice(ctx Context, begin Int, end Int) PackedVector2Array {
	var selfPtr = self
	var frame = call.New()
	call.Arg(frame, begin)
	call.Arg(frame, end)
	var r_ret = call.Ret[[2]uintptr](frame)
	var p_self = call.Arg(frame, mmm.Get(selfPtr))
	mmm.API(selfPtr).builtin.PackedVector2Array.slice(p_self.Uintptr(), frame.Array(0), r_ret.Uintptr(), 2)
	var ret = mmm.New[PackedVector2Array](ctx.Lifetime, ctx.API, r_ret.Get())
	frame.Free()
	return ret
}

func (self PackedVector2Array) ToByteArray(ctx Context) PackedByteArray {
	var selfPtr = self
	var frame = call.New()
	var r_ret = call.Ret[[2]uintptr](frame)
	var p_self = call.Arg(frame, mmm.Get(selfPtr))
	mmm.API(selfPtr).builtin.PackedVector2Array.to_byte_array(p_self.Uintptr(), frame.Array(0), r_ret.Uintptr(), 0)
	var ret = mmm.New[PackedByteArray](ctx.Lifetime, ctx.API, r_ret.Get())
	frame.Free()
	return ret
}

func (self PackedVector2Array) Sort() {
	var selfPtr = self
	var frame = call.New()
	var r_ret call.Nil
	var p_self = call.Arg(frame, mmm.Get(selfPtr))
	mmm.API(selfPtr).builtin.PackedVector2Array.sort(p_self.Uintptr(), frame.Array(0), r_ret.Uintptr(), 0)
	frame.Free()
}

func (self PackedVector2Array) Bsearch(value Vector2, before bool) Int {
	var selfPtr = self
	var frame = call.New()
	call.Arg(frame, value)
	call.Arg(frame, before)
	var r_ret = call.Ret[Int](frame)
	var p_self = call.Arg(frame, mmm.Get(selfPtr))
	mmm.API(selfPtr).builtin.PackedVector2Array.bsearch(p_self.Uintptr(), frame.Array(0), r_ret.Uintptr(), 2)
	var ret = r_ret.Get()
	frame.Free()
	return ret
}

func (self PackedVector2Array) Duplicate(ctx Context) PackedVector2Array {
	var selfPtr = self
	var frame = call.New()
	var r_ret = call.Ret[[2]uintptr](frame)
	var p_self = call.Arg(frame, mmm.Get(selfPtr))
	mmm.API(selfPtr).builtin.PackedVector2Array.duplicate(p_self.Uintptr(), frame.Array(0), r_ret.Uintptr(), 0)
	var ret = mmm.New[PackedVector2Array](ctx.Lifetime, ctx.API, r_ret.Get())
	frame.Free()
	return ret
}

func (self PackedVector2Array) Find(value Vector2, from Int) Int {
	var selfPtr = self
	var frame = call.New()
	call.Arg(frame, value)
	call.Arg(frame, from)
	var r_ret = call.Ret[Int](frame)
	var p_self = call.Arg(frame, mmm.Get(selfPtr))
	mmm.API(selfPtr).builtin.PackedVector2Array.find(p_self.Uintptr(), frame.Array(0), r_ret.Uintptr(), 2)
	var ret = r_ret.Get()
	frame.Free()
	return ret
}

func (self PackedVector2Array) Rfind(value Vector2, from Int) Int {
	var selfPtr = self
	var frame = call.New()
	call.Arg(frame, value)
	call.Arg(frame, from)
	var r_ret = call.Ret[Int](frame)
	var p_self = call.Arg(frame, mmm.Get(selfPtr))
	mmm.API(selfPtr).builtin.PackedVector2Array.rfind(p_self.Uintptr(), frame.Array(0), r_ret.Uintptr(), 2)
	var ret = r_ret.Get()
	frame.Free()
	return ret
}

func (self PackedVector2Array) Count(value Vector2) Int {
	var selfPtr = self
	var frame = call.New()
	call.Arg(frame, value)
	var r_ret = call.Ret[Int](frame)
	var p_self = call.Arg(frame, mmm.Get(selfPtr))
	mmm.API(selfPtr).builtin.PackedVector2Array.count(p_self.Uintptr(), frame.Array(0), r_ret.Uintptr(), 1)
	var ret = r_ret.Get()
	frame.Free()
	return ret
}

func (self PackedVector3Array) Size() Int {
	var selfPtr = self
	var frame = call.New()
	var r_ret = call.Ret[Int](frame)
	var p_self = call.Arg(frame, mmm.Get(selfPtr))
	mmm.API(selfPtr).builtin.PackedVector3Array.size(p_self.Uintptr(), frame.Array(0), r_ret.Uintptr(), 0)
	var ret = r_ret.Get()
	frame.Free()
	return ret
}

func (self PackedVector3Array) IsEmpty() bool {
	var selfPtr = self
	var frame = call.New()
	var r_ret = call.Ret[bool](frame)
	var p_self = call.Arg(frame, mmm.Get(selfPtr))
	mmm.API(selfPtr).builtin.PackedVector3Array.is_empty(p_self.Uintptr(), frame.Array(0), r_ret.Uintptr(), 0)
	var ret = r_ret.Get()
	frame.Free()
	return ret
}

func (self PackedVector3Array) Set(index Int, value Vector3) {
	var selfPtr = self
	var frame = call.New()
	call.Arg(frame, index)
	call.Arg(frame, value)
	var r_ret call.Nil
	var p_self = call.Arg(frame, mmm.Get(selfPtr))
	mmm.API(selfPtr).builtin.PackedVector3Array.set(p_self.Uintptr(), frame.Array(0), r_ret.Uintptr(), 2)
	frame.Free()
}

func (self PackedVector3Array) PushBack(value Vector3) bool {
	var selfPtr = self
	var frame = call.New()
	call.Arg(frame, value)
	var r_ret = call.Ret[bool](frame)
	var p_self = call.Arg(frame, mmm.Get(selfPtr))
	mmm.API(selfPtr).builtin.PackedVector3Array.push_back(p_self.Uintptr(), frame.Array(0), r_ret.Uintptr(), 1)
	var ret = r_ret.Get()
	frame.Free()
	return ret
}

func (self PackedVector3Array) Append(value Vector3) bool {
	var selfPtr = self
	var frame = call.New()
	call.Arg(frame, value)
	var r_ret = call.Ret[bool](frame)
	var p_self = call.Arg(frame, mmm.Get(selfPtr))
	mmm.API(selfPtr).builtin.PackedVector3Array.append(p_self.Uintptr(), frame.Array(0), r_ret.Uintptr(), 1)
	var ret = r_ret.Get()
	frame.Free()
	return ret
}

func (self PackedVector3Array) AppendArray(array PackedVector3Array) {
	var selfPtr = self
	var frame = call.New()
	call.Arg(frame, mmm.Get(array))
	var r_ret call.Nil
	var p_self = call.Arg(frame, mmm.Get(selfPtr))
	mmm.API(selfPtr).builtin.PackedVector3Array.append_array(p_self.Uintptr(), frame.Array(0), r_ret.Uintptr(), 1)
	frame.Free()
}

func (self PackedVector3Array) RemoveAt(index Int) {
	var selfPtr = self
	var frame = call.New()
	call.Arg(frame, index)
	var r_ret call.Nil
	var p_self = call.Arg(frame, mmm.Get(selfPtr))
	mmm.API(selfPtr).builtin.PackedVector3Array.remove_at(p_self.Uintptr(), frame.Array(0), r_ret.Uintptr(), 1)
	frame.Free()
}

func (self PackedVector3Array) Insert(at_index Int, value Vector3) Int {
	var selfPtr = self
	var frame = call.New()
	call.Arg(frame, at_index)
	call.Arg(frame, value)
	var r_ret = call.Ret[Int](frame)
	var p_self = call.Arg(frame, mmm.Get(selfPtr))
	mmm.API(selfPtr).builtin.PackedVector3Array.insert(p_self.Uintptr(), frame.Array(0), r_ret.Uintptr(), 2)
	var ret = r_ret.Get()
	frame.Free()
	return ret
}

func (self PackedVector3Array) Fill(value Vector3) {
	var selfPtr = self
	var frame = call.New()
	call.Arg(frame, value)
	var r_ret call.Nil
	var p_self = call.Arg(frame, mmm.Get(selfPtr))
	mmm.API(selfPtr).builtin.PackedVector3Array.fill(p_self.Uintptr(), frame.Array(0), r_ret.Uintptr(), 1)
	frame.Free()
}

func (self PackedVector3Array) Resize(new_size Int) Int {
	var selfPtr = self
	var frame = call.New()
	call.Arg(frame, new_size)
	var r_ret = call.Ret[Int](frame)
	var p_self = call.Arg(frame, mmm.Get(selfPtr))
	mmm.API(selfPtr).builtin.PackedVector3Array.resize(p_self.Uintptr(), frame.Array(0), r_ret.Uintptr(), 1)
	var ret = r_ret.Get()
	frame.Free()
	return ret
}

func (self PackedVector3Array) Clear() {
	var selfPtr = self
	var frame = call.New()
	var r_ret call.Nil
	var p_self = call.Arg(frame, mmm.Get(selfPtr))
	mmm.API(selfPtr).builtin.PackedVector3Array.clear(p_self.Uintptr(), frame.Array(0), r_ret.Uintptr(), 0)
	frame.Free()
}

func (self PackedVector3Array) Has(value Vector3) bool {
	var selfPtr = self
	var frame = call.New()
	call.Arg(frame, value)
	var r_ret = call.Ret[bool](frame)
	var p_self = call.Arg(frame, mmm.Get(selfPtr))
	mmm.API(selfPtr).builtin.PackedVector3Array.has(p_self.Uintptr(), frame.Array(0), r_ret.Uintptr(), 1)
	var ret = r_ret.Get()
	frame.Free()
	return ret
}

func (self PackedVector3Array) Reverse() {
	var selfPtr = self
	var frame = call.New()
	var r_ret call.Nil
	var p_self = call.Arg(frame, mmm.Get(selfPtr))
	mmm.API(selfPtr).builtin.PackedVector3Array.reverse(p_self.Uintptr(), frame.Array(0), r_ret.Uintptr(), 0)
	frame.Free()
}

func (self PackedVector3Array) Slice(ctx Context, begin Int, end Int) PackedVector3Array {
	var selfPtr = self
	var frame = call.New()
	call.Arg(frame, begin)
	call.Arg(frame, end)
	var r_ret = call.Ret[[2]uintptr](frame)
	var p_self = call.Arg(frame, mmm.Get(selfPtr))
	mmm.API(selfPtr).builtin.PackedVector3Array.slice(p_self.Uintptr(), frame.Array(0), r_ret.Uintptr(), 2)
	var ret = mmm.New[PackedVector3Array](ctx.Lifetime, ctx.API, r_ret.Get())
	frame.Free()
	return ret
}

func (self PackedVector3Array) ToByteArray(ctx Context) PackedByteArray {
	var selfPtr = self
	var frame = call.New()
	var r_ret = call.Ret[[2]uintptr](frame)
	var p_self = call.Arg(frame, mmm.Get(selfPtr))
	mmm.API(selfPtr).builtin.PackedVector3Array.to_byte_array(p_self.Uintptr(), frame.Array(0), r_ret.Uintptr(), 0)
	var ret = mmm.New[PackedByteArray](ctx.Lifetime, ctx.API, r_ret.Get())
	frame.Free()
	return ret
}

func (self PackedVector3Array) Sort() {
	var selfPtr = self
	var frame = call.New()
	var r_ret call.Nil
	var p_self = call.Arg(frame, mmm.Get(selfPtr))
	mmm.API(selfPtr).builtin.PackedVector3Array.sort(p_self.Uintptr(), frame.Array(0), r_ret.Uintptr(), 0)
	frame.Free()
}

func (self PackedVector3Array) Bsearch(value Vector3, before bool) Int {
	var selfPtr = self
	var frame = call.New()
	call.Arg(frame, value)
	call.Arg(frame, before)
	var r_ret = call.Ret[Int](frame)
	var p_self = call.Arg(frame, mmm.Get(selfPtr))
	mmm.API(selfPtr).builtin.PackedVector3Array.bsearch(p_self.Uintptr(), frame.Array(0), r_ret.Uintptr(), 2)
	var ret = r_ret.Get()
	frame.Free()
	return ret
}

func (self PackedVector3Array) Duplicate(ctx Context) PackedVector3Array {
	var selfPtr = self
	var frame = call.New()
	var r_ret = call.Ret[[2]uintptr](frame)
	var p_self = call.Arg(frame, mmm.Get(selfPtr))
	mmm.API(selfPtr).builtin.PackedVector3Array.duplicate(p_self.Uintptr(), frame.Array(0), r_ret.Uintptr(), 0)
	var ret = mmm.New[PackedVector3Array](ctx.Lifetime, ctx.API, r_ret.Get())
	frame.Free()
	return ret
}

func (self PackedVector3Array) Find(value Vector3, from Int) Int {
	var selfPtr = self
	var frame = call.New()
	call.Arg(frame, value)
	call.Arg(frame, from)
	var r_ret = call.Ret[Int](frame)
	var p_self = call.Arg(frame, mmm.Get(selfPtr))
	mmm.API(selfPtr).builtin.PackedVector3Array.find(p_self.Uintptr(), frame.Array(0), r_ret.Uintptr(), 2)
	var ret = r_ret.Get()
	frame.Free()
	return ret
}

func (self PackedVector3Array) Rfind(value Vector3, from Int) Int {
	var selfPtr = self
	var frame = call.New()
	call.Arg(frame, value)
	call.Arg(frame, from)
	var r_ret = call.Ret[Int](frame)
	var p_self = call.Arg(frame, mmm.Get(selfPtr))
	mmm.API(selfPtr).builtin.PackedVector3Array.rfind(p_self.Uintptr(), frame.Array(0), r_ret.Uintptr(), 2)
	var ret = r_ret.Get()
	frame.Free()
	return ret
}

func (self PackedVector3Array) Count(value Vector3) Int {
	var selfPtr = self
	var frame = call.New()
	call.Arg(frame, value)
	var r_ret = call.Ret[Int](frame)
	var p_self = call.Arg(frame, mmm.Get(selfPtr))
	mmm.API(selfPtr).builtin.PackedVector3Array.count(p_self.Uintptr(), frame.Array(0), r_ret.Uintptr(), 1)
	var ret = r_ret.Get()
	frame.Free()
	return ret
}

func (self PackedColorArray) Size() Int {
	var selfPtr = self
	var frame = call.New()
	var r_ret = call.Ret[Int](frame)
	var p_self = call.Arg(frame, mmm.Get(selfPtr))
	mmm.API(selfPtr).builtin.PackedColorArray.size(p_self.Uintptr(), frame.Array(0), r_ret.Uintptr(), 0)
	var ret = r_ret.Get()
	frame.Free()
	return ret
}

func (self PackedColorArray) IsEmpty() bool {
	var selfPtr = self
	var frame = call.New()
	var r_ret = call.Ret[bool](frame)
	var p_self = call.Arg(frame, mmm.Get(selfPtr))
	mmm.API(selfPtr).builtin.PackedColorArray.is_empty(p_self.Uintptr(), frame.Array(0), r_ret.Uintptr(), 0)
	var ret = r_ret.Get()
	frame.Free()
	return ret
}

func (self PackedColorArray) Set(index Int, value Color) {
	var selfPtr = self
	var frame = call.New()
	call.Arg(frame, index)
	call.Arg(frame, value)
	var r_ret call.Nil
	var p_self = call.Arg(frame, mmm.Get(selfPtr))
	mmm.API(selfPtr).builtin.PackedColorArray.set(p_self.Uintptr(), frame.Array(0), r_ret.Uintptr(), 2)
	frame.Free()
}

func (self PackedColorArray) PushBack(value Color) bool {
	var selfPtr = self
	var frame = call.New()
	call.Arg(frame, value)
	var r_ret = call.Ret[bool](frame)
	var p_self = call.Arg(frame, mmm.Get(selfPtr))
	mmm.API(selfPtr).builtin.PackedColorArray.push_back(p_self.Uintptr(), frame.Array(0), r_ret.Uintptr(), 1)
	var ret = r_ret.Get()
	frame.Free()
	return ret
}

func (self PackedColorArray) Append(value Color) bool {
	var selfPtr = self
	var frame = call.New()
	call.Arg(frame, value)
	var r_ret = call.Ret[bool](frame)
	var p_self = call.Arg(frame, mmm.Get(selfPtr))
	mmm.API(selfPtr).builtin.PackedColorArray.append(p_self.Uintptr(), frame.Array(0), r_ret.Uintptr(), 1)
	var ret = r_ret.Get()
	frame.Free()
	return ret
}

func (self PackedColorArray) AppendArray(array PackedColorArray) {
	var selfPtr = self
	var frame = call.New()
	call.Arg(frame, mmm.Get(array))
	var r_ret call.Nil
	var p_self = call.Arg(frame, mmm.Get(selfPtr))
	mmm.API(selfPtr).builtin.PackedColorArray.append_array(p_self.Uintptr(), frame.Array(0), r_ret.Uintptr(), 1)
	frame.Free()
}

func (self PackedColorArray) RemoveAt(index Int) {
	var selfPtr = self
	var frame = call.New()
	call.Arg(frame, index)
	var r_ret call.Nil
	var p_self = call.Arg(frame, mmm.Get(selfPtr))
	mmm.API(selfPtr).builtin.PackedColorArray.remove_at(p_self.Uintptr(), frame.Array(0), r_ret.Uintptr(), 1)
	frame.Free()
}

func (self PackedColorArray) Insert(at_index Int, value Color) Int {
	var selfPtr = self
	var frame = call.New()
	call.Arg(frame, at_index)
	call.Arg(frame, value)
	var r_ret = call.Ret[Int](frame)
	var p_self = call.Arg(frame, mmm.Get(selfPtr))
	mmm.API(selfPtr).builtin.PackedColorArray.insert(p_self.Uintptr(), frame.Array(0), r_ret.Uintptr(), 2)
	var ret = r_ret.Get()
	frame.Free()
	return ret
}

func (self PackedColorArray) Fill(value Color) {
	var selfPtr = self
	var frame = call.New()
	call.Arg(frame, value)
	var r_ret call.Nil
	var p_self = call.Arg(frame, mmm.Get(selfPtr))
	mmm.API(selfPtr).builtin.PackedColorArray.fill(p_self.Uintptr(), frame.Array(0), r_ret.Uintptr(), 1)
	frame.Free()
}

func (self PackedColorArray) Resize(new_size Int) Int {
	var selfPtr = self
	var frame = call.New()
	call.Arg(frame, new_size)
	var r_ret = call.Ret[Int](frame)
	var p_self = call.Arg(frame, mmm.Get(selfPtr))
	mmm.API(selfPtr).builtin.PackedColorArray.resize(p_self.Uintptr(), frame.Array(0), r_ret.Uintptr(), 1)
	var ret = r_ret.Get()
	frame.Free()
	return ret
}

func (self PackedColorArray) Clear() {
	var selfPtr = self
	var frame = call.New()
	var r_ret call.Nil
	var p_self = call.Arg(frame, mmm.Get(selfPtr))
	mmm.API(selfPtr).builtin.PackedColorArray.clear(p_self.Uintptr(), frame.Array(0), r_ret.Uintptr(), 0)
	frame.Free()
}

func (self PackedColorArray) Has(value Color) bool {
	var selfPtr = self
	var frame = call.New()
	call.Arg(frame, value)
	var r_ret = call.Ret[bool](frame)
	var p_self = call.Arg(frame, mmm.Get(selfPtr))
	mmm.API(selfPtr).builtin.PackedColorArray.has(p_self.Uintptr(), frame.Array(0), r_ret.Uintptr(), 1)
	var ret = r_ret.Get()
	frame.Free()
	return ret
}

func (self PackedColorArray) Reverse() {
	var selfPtr = self
	var frame = call.New()
	var r_ret call.Nil
	var p_self = call.Arg(frame, mmm.Get(selfPtr))
	mmm.API(selfPtr).builtin.PackedColorArray.reverse(p_self.Uintptr(), frame.Array(0), r_ret.Uintptr(), 0)
	frame.Free()
}

func (self PackedColorArray) Slice(ctx Context, begin Int, end Int) PackedColorArray {
	var selfPtr = self
	var frame = call.New()
	call.Arg(frame, begin)
	call.Arg(frame, end)
	var r_ret = call.Ret[[2]uintptr](frame)
	var p_self = call.Arg(frame, mmm.Get(selfPtr))
	mmm.API(selfPtr).builtin.PackedColorArray.slice(p_self.Uintptr(), frame.Array(0), r_ret.Uintptr(), 2)
	var ret = mmm.New[PackedColorArray](ctx.Lifetime, ctx.API, r_ret.Get())
	frame.Free()
	return ret
}

func (self PackedColorArray) ToByteArray(ctx Context) PackedByteArray {
	var selfPtr = self
	var frame = call.New()
	var r_ret = call.Ret[[2]uintptr](frame)
	var p_self = call.Arg(frame, mmm.Get(selfPtr))
	mmm.API(selfPtr).builtin.PackedColorArray.to_byte_array(p_self.Uintptr(), frame.Array(0), r_ret.Uintptr(), 0)
	var ret = mmm.New[PackedByteArray](ctx.Lifetime, ctx.API, r_ret.Get())
	frame.Free()
	return ret
}

func (self PackedColorArray) Sort() {
	var selfPtr = self
	var frame = call.New()
	var r_ret call.Nil
	var p_self = call.Arg(frame, mmm.Get(selfPtr))
	mmm.API(selfPtr).builtin.PackedColorArray.sort(p_self.Uintptr(), frame.Array(0), r_ret.Uintptr(), 0)
	frame.Free()
}

func (self PackedColorArray) Bsearch(value Color, before bool) Int {
	var selfPtr = self
	var frame = call.New()
	call.Arg(frame, value)
	call.Arg(frame, before)
	var r_ret = call.Ret[Int](frame)
	var p_self = call.Arg(frame, mmm.Get(selfPtr))
	mmm.API(selfPtr).builtin.PackedColorArray.bsearch(p_self.Uintptr(), frame.Array(0), r_ret.Uintptr(), 2)
	var ret = r_ret.Get()
	frame.Free()
	return ret
}

func (self PackedColorArray) Duplicate(ctx Context) PackedColorArray {
	var selfPtr = self
	var frame = call.New()
	var r_ret = call.Ret[[2]uintptr](frame)
	var p_self = call.Arg(frame, mmm.Get(selfPtr))
	mmm.API(selfPtr).builtin.PackedColorArray.duplicate(p_self.Uintptr(), frame.Array(0), r_ret.Uintptr(), 0)
	var ret = mmm.New[PackedColorArray](ctx.Lifetime, ctx.API, r_ret.Get())
	frame.Free()
	return ret
}

func (self PackedColorArray) Find(value Color, from Int) Int {
	var selfPtr = self
	var frame = call.New()
	call.Arg(frame, value)
	call.Arg(frame, from)
	var r_ret = call.Ret[Int](frame)
	var p_self = call.Arg(frame, mmm.Get(selfPtr))
	mmm.API(selfPtr).builtin.PackedColorArray.find(p_self.Uintptr(), frame.Array(0), r_ret.Uintptr(), 2)
	var ret = r_ret.Get()
	frame.Free()
	return ret
}

func (self PackedColorArray) Rfind(value Color, from Int) Int {
	var selfPtr = self
	var frame = call.New()
	call.Arg(frame, value)
	call.Arg(frame, from)
	var r_ret = call.Ret[Int](frame)
	var p_self = call.Arg(frame, mmm.Get(selfPtr))
	mmm.API(selfPtr).builtin.PackedColorArray.rfind(p_self.Uintptr(), frame.Array(0), r_ret.Uintptr(), 2)
	var ret = r_ret.Get()
	frame.Free()
	return ret
}

func (self PackedColorArray) Count(value Color) Int {
	var selfPtr = self
	var frame = call.New()
	call.Arg(frame, value)
	var r_ret = call.Ret[Int](frame)
	var p_self = call.Arg(frame, mmm.Get(selfPtr))
	mmm.API(selfPtr).builtin.PackedColorArray.count(p_self.Uintptr(), frame.Array(0), r_ret.Uintptr(), 1)
	var ret = r_ret.Get()
	frame.Free()
	return ret
}

type ObjectConnectFlags int64
type Object struct{ Class[Object, Pointer] }

func (self Object) GetClass(ctx Context) String {
	var selfPtr = self.AsPointer()
	var frame = call.New()
	var r_ret = call.Ret[uintptr](frame)
	mmm.API(selfPtr).Object.MethodBindPointerCall(mmm.API(selfPtr).Methods.Object.Bind_get_class, self.AsObject(), frame.Array(0), r_ret.Uintptr())
	var ret = mmm.New[String](ctx.Lifetime, ctx.API, r_ret.Get())
	frame.Free()
	return ret
}

func (self Object) IsClass(class String) bool {
	var selfPtr = self.AsPointer()
	var frame = call.New()
	call.Arg(frame, mmm.Get(class))
	var r_ret = call.Ret[bool](frame)
	mmm.API(selfPtr).Object.MethodBindPointerCall(mmm.API(selfPtr).Methods.Object.Bind_is_class, self.AsObject(), frame.Array(0), r_ret.Uintptr())
	var ret = r_ret.Get()
	frame.Free()
	return ret
}

func (self Object) Set(property StringName, value Variant) {
	var selfPtr = self.AsPointer()
	var frame = call.New()
	call.Arg(frame, mmm.Get(property))
	call.Arg(frame, mmm.Get(value))
	var r_ret call.Nil
	mmm.API(selfPtr).Object.MethodBindPointerCall(mmm.API(selfPtr).Methods.Object.Bind_set, self.AsObject(), frame.Array(0), r_ret.Uintptr())
	frame.Free()
}

func (self Object) Get(ctx Context, property StringName) Variant {
	var selfPtr = self.AsPointer()
	var frame = call.New()
	call.Arg(frame, mmm.Get(property))
	var r_ret = call.Ret[[3]uintptr](frame)
	mmm.API(selfPtr).Object.MethodBindPointerCall(mmm.API(selfPtr).Methods.Object.Bind_get, self.AsObject(), frame.Array(0), r_ret.Uintptr())
	var ret = mmm.New[Variant](ctx.Lifetime, ctx.API, r_ret.Get())
	frame.Free()
	return ret
}

func (self Object) SetIndexed(property_path NodePath, value Variant) {
	var selfPtr = self.AsPointer()
	var frame = call.New()
	call.Arg(frame, mmm.Get(property_path))
	call.Arg(frame, mmm.Get(value))
	var r_ret call.Nil
	mmm.API(selfPtr).Object.MethodBindPointerCall(mmm.API(selfPtr).Methods.Object.Bind_set_indexed, self.AsObject(), frame.Array(0), r_ret.Uintptr())
	frame.Free()
}

func (self Object) GetIndexed(ctx Context, property_path NodePath) Variant {
	var selfPtr = self.AsPointer()
	var frame = call.New()
	call.Arg(frame, mmm.Get(property_path))
	var r_ret = call.Ret[[3]uintptr](frame)
	mmm.API(selfPtr).Object.MethodBindPointerCall(mmm.API(selfPtr).Methods.Object.Bind_get_indexed, self.AsObject(), frame.Array(0), r_ret.Uintptr())
	var ret = mmm.New[Variant](ctx.Lifetime, ctx.API, r_ret.Get())
	frame.Free()
	return ret
}

func (self Object) GetPropertyList() ArrayOf[Dictionary] {
	var selfPtr = self.AsPointer()
	var frame = call.New()
	var r_ret = call.Ret[ArrayOf[Dictionary]](frame)
	mmm.API(selfPtr).Object.MethodBindPointerCall(mmm.API(selfPtr).Methods.Object.Bind_get_property_list, self.AsObject(), frame.Array(0), r_ret.Uintptr())
	var ret = r_ret.Get()
	frame.Free()
	return ret
}

func (self Object) GetMethodList() ArrayOf[Dictionary] {
	var selfPtr = self.AsPointer()
	var frame = call.New()
	var r_ret = call.Ret[ArrayOf[Dictionary]](frame)
	mmm.API(selfPtr).Object.MethodBindPointerCall(mmm.API(selfPtr).Methods.Object.Bind_get_method_list, self.AsObject(), frame.Array(0), r_ret.Uintptr())
	var ret = r_ret.Get()
	frame.Free()
	return ret
}

func (self Object) PropertyCanRevert(property StringName) bool {
	var selfPtr = self.AsPointer()
	var frame = call.New()
	call.Arg(frame, mmm.Get(property))
	var r_ret = call.Ret[bool](frame)
	mmm.API(selfPtr).Object.MethodBindPointerCall(mmm.API(selfPtr).Methods.Object.Bind_property_can_revert, self.AsObject(), frame.Array(0), r_ret.Uintptr())
	var ret = r_ret.Get()
	frame.Free()
	return ret
}

func (self Object) PropertyGetRevert(ctx Context, property StringName) Variant {
	var selfPtr = self.AsPointer()
	var frame = call.New()
	call.Arg(frame, mmm.Get(property))
	var r_ret = call.Ret[[3]uintptr](frame)
	mmm.API(selfPtr).Object.MethodBindPointerCall(mmm.API(selfPtr).Methods.Object.Bind_property_get_revert, self.AsObject(), frame.Array(0), r_ret.Uintptr())
	var ret = mmm.New[Variant](ctx.Lifetime, ctx.API, r_ret.Get())
	frame.Free()
	return ret
}

func (self Object) Notification(what Int, reversed bool) {
	var selfPtr = self.AsPointer()
	var frame = call.New()
	call.Arg(frame, what)
	call.Arg(frame, reversed)
	var r_ret call.Nil
	mmm.API(selfPtr).Object.MethodBindPointerCall(mmm.API(selfPtr).Methods.Object.Bind_notification, self.AsObject(), frame.Array(0), r_ret.Uintptr())
	frame.Free()
}

func (self Object) ToString(ctx Context) String {
	var selfPtr = self.AsPointer()
	var frame = call.New()
	var r_ret = call.Ret[uintptr](frame)
	mmm.API(selfPtr).Object.MethodBindPointerCall(mmm.API(selfPtr).Methods.Object.Bind_to_string, self.AsObject(), frame.Array(0), r_ret.Uintptr())
	var ret = mmm.New[String](ctx.Lifetime, ctx.API, r_ret.Get())
	frame.Free()
	return ret
}

func (self Object) GetInstanceId() Int {
	var selfPtr = self.AsPointer()
	var frame = call.New()
	var r_ret = call.Ret[Int](frame)
	mmm.API(selfPtr).Object.MethodBindPointerCall(mmm.API(selfPtr).Methods.Object.Bind_get_instance_id, self.AsObject(), frame.Array(0), r_ret.Uintptr())
	var ret = r_ret.Get()
	frame.Free()
	return ret
}

func (self Object) SetScript(script Variant) {
	var selfPtr = self.AsPointer()
	var frame = call.New()
	call.Arg(frame, mmm.Get(script))
	var r_ret call.Nil
	mmm.API(selfPtr).Object.MethodBindPointerCall(mmm.API(selfPtr).Methods.Object.Bind_set_script, self.AsObject(), frame.Array(0), r_ret.Uintptr())
	frame.Free()
}

func (self Object) GetScript(ctx Context) Variant {
	var selfPtr = self.AsPointer()
	var frame = call.New()
	var r_ret = call.Ret[[3]uintptr](frame)
	mmm.API(selfPtr).Object.MethodBindPointerCall(mmm.API(selfPtr).Methods.Object.Bind_get_script, self.AsObject(), frame.Array(0), r_ret.Uintptr())
	var ret = mmm.New[Variant](ctx.Lifetime, ctx.API, r_ret.Get())
	frame.Free()
	return ret
}

func (self Object) SetMeta(name StringName, value Variant) {
	var selfPtr = self.AsPointer()
	var frame = call.New()
	call.Arg(frame, mmm.Get(name))
	call.Arg(frame, mmm.Get(value))
	var r_ret call.Nil
	mmm.API(selfPtr).Object.MethodBindPointerCall(mmm.API(selfPtr).Methods.Object.Bind_set_meta, self.AsObject(), frame.Array(0), r_ret.Uintptr())
	frame.Free()
}

func (self Object) RemoveMeta(name StringName) {
	var selfPtr = self.AsPointer()
	var frame = call.New()
	call.Arg(frame, mmm.Get(name))
	var r_ret call.Nil
	mmm.API(selfPtr).Object.MethodBindPointerCall(mmm.API(selfPtr).Methods.Object.Bind_remove_meta, self.AsObject(), frame.Array(0), r_ret.Uintptr())
	frame.Free()
}

func (self Object) GetMeta(ctx Context, name StringName, def Variant) Variant {
	var selfPtr = self.AsPointer()
	var frame = call.New()
	call.Arg(frame, mmm.Get(name))
	call.Arg(frame, mmm.Get(def))
	var r_ret = call.Ret[[3]uintptr](frame)
	mmm.API(selfPtr).Object.MethodBindPointerCall(mmm.API(selfPtr).Methods.Object.Bind_get_meta, self.AsObject(), frame.Array(0), r_ret.Uintptr())
	var ret = mmm.New[Variant](ctx.Lifetime, ctx.API, r_ret.Get())
	frame.Free()
	return ret
}

func (self Object) HasMeta(name StringName) bool {
	var selfPtr = self.AsPointer()
	var frame = call.New()
	call.Arg(frame, mmm.Get(name))
	var r_ret = call.Ret[bool](frame)
	mmm.API(selfPtr).Object.MethodBindPointerCall(mmm.API(selfPtr).Methods.Object.Bind_has_meta, self.AsObject(), frame.Array(0), r_ret.Uintptr())
	var ret = r_ret.Get()
	frame.Free()
	return ret
}

func (self Object) GetMetaList() ArrayOf[StringName] {
	var selfPtr = self.AsPointer()
	var frame = call.New()
	var r_ret = call.Ret[ArrayOf[StringName]](frame)
	mmm.API(selfPtr).Object.MethodBindPointerCall(mmm.API(selfPtr).Methods.Object.Bind_get_meta_list, self.AsObject(), frame.Array(0), r_ret.Uintptr())
	var ret = r_ret.Get()
	frame.Free()
	return ret
}

func (self Object) AddUserSignal(signal String, arguments Array) {
	var selfPtr = self.AsPointer()
	var frame = call.New()
	call.Arg(frame, mmm.Get(signal))
	call.Arg(frame, mmm.Get(arguments))
	var r_ret call.Nil
	mmm.API(selfPtr).Object.MethodBindPointerCall(mmm.API(selfPtr).Methods.Object.Bind_add_user_signal, self.AsObject(), frame.Array(0), r_ret.Uintptr())
	frame.Free()
}

func (self Object) HasUserSignal(signal StringName) bool {
	var selfPtr = self.AsPointer()
	var frame = call.New()
	call.Arg(frame, mmm.Get(signal))
	var r_ret = call.Ret[bool](frame)
	mmm.API(selfPtr).Object.MethodBindPointerCall(mmm.API(selfPtr).Methods.Object.Bind_has_user_signal, self.AsObject(), frame.Array(0), r_ret.Uintptr())
	var ret = r_ret.Get()
	frame.Free()
	return ret
}

func (self Object) EmitSignal(signal StringName) int64 {
	var selfPtr = self.AsPointer()
	var frame = call.New()
	call.Arg(frame, mmm.Get(signal))
	var r_ret = call.Ret[int64](frame)
	mmm.API(selfPtr).Object.MethodBindPointerCall(mmm.API(selfPtr).Methods.Object.Bind_emit_signal, self.AsObject(), frame.Array(0), r_ret.Uintptr())
	var ret = r_ret.Get()
	frame.Free()
	return ret
}

func (self Object) Call(ctx Context, method StringName) Variant {
	var selfPtr = self.AsPointer()
	var frame = call.New()
	call.Arg(frame, mmm.Get(method))
	var r_ret = call.Ret[[3]uintptr](frame)
	mmm.API(selfPtr).Object.MethodBindPointerCall(mmm.API(selfPtr).Methods.Object.Bind_call, self.AsObject(), frame.Array(0), r_ret.Uintptr())
	var ret = mmm.New[Variant](ctx.Lifetime, ctx.API, r_ret.Get())
	frame.Free()
	return ret
}

func (self Object) CallDeferred(ctx Context, method StringName) Variant {
	var selfPtr = self.AsPointer()
	var frame = call.New()
	call.Arg(frame, mmm.Get(method))
	var r_ret = call.Ret[[3]uintptr](frame)
	mmm.API(selfPtr).Object.MethodBindPointerCall(mmm.API(selfPtr).Methods.Object.Bind_call_deferred, self.AsObject(), frame.Array(0), r_ret.Uintptr())
	var ret = mmm.New[Variant](ctx.Lifetime, ctx.API, r_ret.Get())
	frame.Free()
	return ret
}

func (self Object) SetDeferred(property StringName, value Variant) {
	var selfPtr = self.AsPointer()
	var frame = call.New()
	call.Arg(frame, mmm.Get(property))
	call.Arg(frame, mmm.Get(value))
	var r_ret call.Nil
	mmm.API(selfPtr).Object.MethodBindPointerCall(mmm.API(selfPtr).Methods.Object.Bind_set_deferred, self.AsObject(), frame.Array(0), r_ret.Uintptr())
	frame.Free()
}

func (self Object) Callv(ctx Context, method StringName, arg_array Array) Variant {
	var selfPtr = self.AsPointer()
	var frame = call.New()
	call.Arg(frame, mmm.Get(method))
	call.Arg(frame, mmm.Get(arg_array))
	var r_ret = call.Ret[[3]uintptr](frame)
	mmm.API(selfPtr).Object.MethodBindPointerCall(mmm.API(selfPtr).Methods.Object.Bind_callv, self.AsObject(), frame.Array(0), r_ret.Uintptr())
	var ret = mmm.New[Variant](ctx.Lifetime, ctx.API, r_ret.Get())
	frame.Free()
	return ret
}

func (self Object) HasMethod(method StringName) bool {
	var selfPtr = self.AsPointer()
	var frame = call.New()
	call.Arg(frame, mmm.Get(method))
	var r_ret = call.Ret[bool](frame)
	mmm.API(selfPtr).Object.MethodBindPointerCall(mmm.API(selfPtr).Methods.Object.Bind_has_method, self.AsObject(), frame.Array(0), r_ret.Uintptr())
	var ret = r_ret.Get()
	frame.Free()
	return ret
}

func (self Object) HasSignal(signal StringName) bool {
	var selfPtr = self.AsPointer()
	var frame = call.New()
	call.Arg(frame, mmm.Get(signal))
	var r_ret = call.Ret[bool](frame)
	mmm.API(selfPtr).Object.MethodBindPointerCall(mmm.API(selfPtr).Methods.Object.Bind_has_signal, self.AsObject(), frame.Array(0), r_ret.Uintptr())
	var ret = r_ret.Get()
	frame.Free()
	return ret
}

func (self Object) GetSignalList() ArrayOf[Dictionary] {
	var selfPtr = self.AsPointer()
	var frame = call.New()
	var r_ret = call.Ret[ArrayOf[Dictionary]](frame)
	mmm.API(selfPtr).Object.MethodBindPointerCall(mmm.API(selfPtr).Methods.Object.Bind_get_signal_list, self.AsObject(), frame.Array(0), r_ret.Uintptr())
	var ret = r_ret.Get()
	frame.Free()
	return ret
}

func (self Object) GetSignalConnectionList(signal StringName) ArrayOf[Dictionary] {
	var selfPtr = self.AsPointer()
	var frame = call.New()
	call.Arg(frame, mmm.Get(signal))
	var r_ret = call.Ret[ArrayOf[Dictionary]](frame)
	mmm.API(selfPtr).Object.MethodBindPointerCall(mmm.API(selfPtr).Methods.Object.Bind_get_signal_connection_list, self.AsObject(), frame.Array(0), r_ret.Uintptr())
	var ret = r_ret.Get()
	frame.Free()
	return ret
}

func (self Object) GetIncomingConnections() ArrayOf[Dictionary] {
	var selfPtr = self.AsPointer()
	var frame = call.New()
	var r_ret = call.Ret[ArrayOf[Dictionary]](frame)
	mmm.API(selfPtr).Object.MethodBindPointerCall(mmm.API(selfPtr).Methods.Object.Bind_get_incoming_connections, self.AsObject(), frame.Array(0), r_ret.Uintptr())
	var ret = r_ret.Get()
	frame.Free()
	return ret
}

func (self Object) Connect(signal StringName, callable Callable, flags Int) int64 {
	var selfPtr = self.AsPointer()
	var frame = call.New()
	call.Arg(frame, mmm.Get(signal))
	call.Arg(frame, mmm.Get(callable))
	call.Arg(frame, flags)
	var r_ret = call.Ret[int64](frame)
	mmm.API(selfPtr).Object.MethodBindPointerCall(mmm.API(selfPtr).Methods.Object.Bind_connect, self.AsObject(), frame.Array(0), r_ret.Uintptr())
	var ret = r_ret.Get()
	frame.Free()
	return ret
}

func (self Object) Disconnect(signal StringName, callable Callable) {
	var selfPtr = self.AsPointer()
	var frame = call.New()
	call.Arg(frame, mmm.Get(signal))
	call.Arg(frame, mmm.Get(callable))
	var r_ret call.Nil
	mmm.API(selfPtr).Object.MethodBindPointerCall(mmm.API(selfPtr).Methods.Object.Bind_disconnect, self.AsObject(), frame.Array(0), r_ret.Uintptr())
	frame.Free()
}

func (self Object) IsConnected(signal StringName, callable Callable) bool {
	var selfPtr = self.AsPointer()
	var frame = call.New()
	call.Arg(frame, mmm.Get(signal))
	call.Arg(frame, mmm.Get(callable))
	var r_ret = call.Ret[bool](frame)
	mmm.API(selfPtr).Object.MethodBindPointerCall(mmm.API(selfPtr).Methods.Object.Bind_is_connected, self.AsObject(), frame.Array(0), r_ret.Uintptr())
	var ret = r_ret.Get()
	frame.Free()
	return ret
}

func (self Object) SetBlockSignals(enable bool) {
	var selfPtr = self.AsPointer()
	var frame = call.New()
	call.Arg(frame, enable)
	var r_ret call.Nil
	mmm.API(selfPtr).Object.MethodBindPointerCall(mmm.API(selfPtr).Methods.Object.Bind_set_block_signals, self.AsObject(), frame.Array(0), r_ret.Uintptr())
	frame.Free()
}

func (self Object) IsBlockingSignals() bool {
	var selfPtr = self.AsPointer()
	var frame = call.New()
	var r_ret = call.Ret[bool](frame)
	mmm.API(selfPtr).Object.MethodBindPointerCall(mmm.API(selfPtr).Methods.Object.Bind_is_blocking_signals, self.AsObject(), frame.Array(0), r_ret.Uintptr())
	var ret = r_ret.Get()
	frame.Free()
	return ret
}

func (self Object) NotifyPropertyListChanged() {
	var selfPtr = self.AsPointer()
	var frame = call.New()
	var r_ret call.Nil
	mmm.API(selfPtr).Object.MethodBindPointerCall(mmm.API(selfPtr).Methods.Object.Bind_notify_property_list_changed, self.AsObject(), frame.Array(0), r_ret.Uintptr())
	frame.Free()
}

func (self Object) SetMessageTranslation(enable bool) {
	var selfPtr = self.AsPointer()
	var frame = call.New()
	call.Arg(frame, enable)
	var r_ret call.Nil
	mmm.API(selfPtr).Object.MethodBindPointerCall(mmm.API(selfPtr).Methods.Object.Bind_set_message_translation, self.AsObject(), frame.Array(0), r_ret.Uintptr())
	frame.Free()
}

func (self Object) CanTranslateMessages() bool {
	var selfPtr = self.AsPointer()
	var frame = call.New()
	var r_ret = call.Ret[bool](frame)
	mmm.API(selfPtr).Object.MethodBindPointerCall(mmm.API(selfPtr).Methods.Object.Bind_can_translate_messages, self.AsObject(), frame.Array(0), r_ret.Uintptr())
	var ret = r_ret.Get()
	frame.Free()
	return ret
}

func (self Object) Tr(ctx Context, message StringName, context StringName) String {
	var selfPtr = self.AsPointer()
	var frame = call.New()
	call.Arg(frame, mmm.Get(message))
	call.Arg(frame, mmm.Get(context))
	var r_ret = call.Ret[uintptr](frame)
	mmm.API(selfPtr).Object.MethodBindPointerCall(mmm.API(selfPtr).Methods.Object.Bind_tr, self.AsObject(), frame.Array(0), r_ret.Uintptr())
	var ret = mmm.New[String](ctx.Lifetime, ctx.API, r_ret.Get())
	frame.Free()
	return ret
}

func (self Object) TrN(ctx Context, message StringName, plural_message StringName, n Int, context StringName) String {
	var selfPtr = self.AsPointer()
	var frame = call.New()
	call.Arg(frame, mmm.Get(message))
	call.Arg(frame, mmm.Get(plural_message))
	call.Arg(frame, n)
	call.Arg(frame, mmm.Get(context))
	var r_ret = call.Ret[uintptr](frame)
	mmm.API(selfPtr).Object.MethodBindPointerCall(mmm.API(selfPtr).Methods.Object.Bind_tr_n, self.AsObject(), frame.Array(0), r_ret.Uintptr())
	var ret = mmm.New[String](ctx.Lifetime, ctx.API, r_ret.Get())
	frame.Free()
	return ret
}

func (self Object) IsQueuedForDeletion() bool {
	var selfPtr = self.AsPointer()
	var frame = call.New()
	var r_ret = call.Ret[bool](frame)
	mmm.API(selfPtr).Object.MethodBindPointerCall(mmm.API(selfPtr).Methods.Object.Bind_is_queued_for_deletion, self.AsObject(), frame.Array(0), r_ret.Uintptr())
	var ret = r_ret.Get()
	frame.Free()
	return ret
}

func (self Object) CancelFree() {
	var selfPtr = self.AsPointer()
	var frame = call.New()
	var r_ret call.Nil
	mmm.API(selfPtr).Object.MethodBindPointerCall(mmm.API(selfPtr).Methods.Object.Bind_cancel_free, self.AsObject(), frame.Array(0), r_ret.Uintptr())
	frame.Free()
}

func (self Object) Virtual(name string) reflect.Value {
	switch name {
	default:
		return VirtualByName(self.Super(), name)
	}
}
