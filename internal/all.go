//go:build !generate

// Code generated by the generate package DO NOT EDIT
package internal

import "unsafe"
import "reflect"
import "runtime/cgo"
import "runtime.link/mmm"

type Side int64

type Corner int64

type Orientation int64

type ClockDirection int64

type HorizontalAlignment int64

type VerticalAlignment int64

type InlineAlignment int64

type EulerOrder int64

type Key int64

type KeyModifierMask int64

type MouseButton int64

type MouseButtonMask int64

type JoyButton int64

type JoyAxis int64

type MIDIMessage int64

type Error int64

type PropertyHint int64

type PropertyUsageFlags int64

type MethodFlags int64

type VariantType int64

const (
	TypeNil                VariantType = 0
	TypeBool               VariantType = 1
	TypeInt                VariantType = 2
	TypeFloat              VariantType = 3
	TypeString             VariantType = 4
	TypeVector2            VariantType = 5
	TypeVector2i           VariantType = 6
	TypeRect2              VariantType = 7
	TypeRect2i             VariantType = 8
	TypeVector3            VariantType = 9
	TypeVector3i           VariantType = 10
	TypeTransform2d        VariantType = 11
	TypeVector4            VariantType = 12
	TypeVector4i           VariantType = 13
	TypePlane              VariantType = 14
	TypeQuaternion         VariantType = 15
	TypeAabb               VariantType = 16
	TypeBasis              VariantType = 17
	TypeTransform3d        VariantType = 18
	TypeProjection         VariantType = 19
	TypeColor              VariantType = 20
	TypeStringName         VariantType = 21
	TypeNodePath           VariantType = 22
	TypeRid                VariantType = 23
	TypeObject             VariantType = 24
	TypeCallable           VariantType = 25
	TypeSignal             VariantType = 26
	TypeDictionary         VariantType = 27
	TypeArray              VariantType = 28
	TypePackedByteArray    VariantType = 29
	TypePackedInt32Array   VariantType = 30
	TypePackedInt64Array   VariantType = 31
	TypePackedFloat32Array VariantType = 32
	TypePackedFloat64Array VariantType = 33
	TypePackedStringArray  VariantType = 34
	TypePackedVector2Array VariantType = 35
	TypePackedVector3Array VariantType = 36
	TypePackedColorArray   VariantType = 37
	TypeMax                VariantType = 38
)

type VariantOperator int64

type Vector2Axis int64

type Vector2iAxis int64

type Vector3Axis int64

type Vector3iAxis int64

type Vector4Axis int64

type Vector4iAxis int64

type ProjectionPlanes int64

func (self String) CasecmpTo(to String) Int {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet[String](1, abi, to)
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.String.casecmp_to(abi.Get(0), abi.Get(1), abi.Back(), 1)
	var ret = frameGet[Int](abi)
	abi.free()
	return ret
}

func (self String) NocasecmpTo(to String) Int {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet[String](1, abi, to)
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.String.nocasecmp_to(abi.Get(0), abi.Get(1), abi.Back(), 1)
	var ret = frameGet[Int](abi)
	abi.free()
	return ret
}

func (self String) NaturalcasecmpTo(to String) Int {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet[String](1, abi, to)
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.String.naturalcasecmp_to(abi.Get(0), abi.Get(1), abi.Back(), 1)
	var ret = frameGet[Int](abi)
	abi.free()
	return ret
}

func (self String) NaturalnocasecmpTo(to String) Int {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet[String](1, abi, to)
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.String.naturalnocasecmp_to(abi.Get(0), abi.Get(1), abi.Back(), 1)
	var ret = frameGet[Int](abi)
	abi.free()
	return ret
}

func (self String) Length() Int {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.String.length(abi.Get(0), abi.Get(1), abi.Back(), 0)
	var ret = frameGet[Int](abi)
	abi.free()
	return ret
}

func (self String) Substr(ctx Context, from Int, len Int) String {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet[Int](1, abi, from)
	frameSet[Int](2, abi, len)
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.String.substr(abi.Get(0), abi.Get(1), abi.Back(), 2)
	var ret = frameGet[uintptr](abi)
	abi.free()
	return mmm.Make[API, String, uintptr](ctx, selfPtr.API, ret)
}

func (self String) GetSlice(ctx Context, delimiter String, slice Int) String {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet[String](1, abi, delimiter)
	frameSet[Int](2, abi, slice)
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.String.get_slice(abi.Get(0), abi.Get(1), abi.Back(), 2)
	var ret = frameGet[uintptr](abi)
	abi.free()
	return mmm.Make[API, String, uintptr](ctx, selfPtr.API, ret)
}

func (self String) GetSlicec(ctx Context, delimiter Int, slice Int) String {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet[Int](1, abi, delimiter)
	frameSet[Int](2, abi, slice)
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.String.get_slicec(abi.Get(0), abi.Get(1), abi.Back(), 2)
	var ret = frameGet[uintptr](abi)
	abi.free()
	return mmm.Make[API, String, uintptr](ctx, selfPtr.API, ret)
}

func (self String) GetSliceCount(delimiter String) Int {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet[String](1, abi, delimiter)
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.String.get_slice_count(abi.Get(0), abi.Get(1), abi.Back(), 1)
	var ret = frameGet[Int](abi)
	abi.free()
	return ret
}

func (self String) Find(what String, from Int) Int {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet[String](1, abi, what)
	frameSet[Int](2, abi, from)
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.String.find(abi.Get(0), abi.Get(1), abi.Back(), 2)
	var ret = frameGet[Int](abi)
	abi.free()
	return ret
}

func (self String) Count(what String, from Int, to Int) Int {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet[String](1, abi, what)
	frameSet[Int](2, abi, from)
	frameSet[Int](3, abi, to)
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.String.count(abi.Get(0), abi.Get(1), abi.Back(), 3)
	var ret = frameGet[Int](abi)
	abi.free()
	return ret
}

func (self String) Countn(what String, from Int, to Int) Int {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet[String](1, abi, what)
	frameSet[Int](2, abi, from)
	frameSet[Int](3, abi, to)
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.String.countn(abi.Get(0), abi.Get(1), abi.Back(), 3)
	var ret = frameGet[Int](abi)
	abi.free()
	return ret
}

func (self String) Findn(what String, from Int) Int {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet[String](1, abi, what)
	frameSet[Int](2, abi, from)
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.String.findn(abi.Get(0), abi.Get(1), abi.Back(), 2)
	var ret = frameGet[Int](abi)
	abi.free()
	return ret
}

func (self String) Rfind(what String, from Int) Int {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet[String](1, abi, what)
	frameSet[Int](2, abi, from)
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.String.rfind(abi.Get(0), abi.Get(1), abi.Back(), 2)
	var ret = frameGet[Int](abi)
	abi.free()
	return ret
}

func (self String) Rfindn(what String, from Int) Int {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet[String](1, abi, what)
	frameSet[Int](2, abi, from)
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.String.rfindn(abi.Get(0), abi.Get(1), abi.Back(), 2)
	var ret = frameGet[Int](abi)
	abi.free()
	return ret
}

func (self String) Match(expr String) bool {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet[String](1, abi, expr)
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.String.match(abi.Get(0), abi.Get(1), abi.Back(), 1)
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self String) Matchn(expr String) bool {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet[String](1, abi, expr)
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.String.matchn(abi.Get(0), abi.Get(1), abi.Back(), 1)
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self String) BeginsWith(text String) bool {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet[String](1, abi, text)
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.String.begins_with(abi.Get(0), abi.Get(1), abi.Back(), 1)
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self String) EndsWith(text String) bool {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet[String](1, abi, text)
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.String.ends_with(abi.Get(0), abi.Get(1), abi.Back(), 1)
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self String) IsSubsequenceOf(text String) bool {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet[String](1, abi, text)
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.String.is_subsequence_of(abi.Get(0), abi.Get(1), abi.Back(), 1)
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self String) IsSubsequenceOfn(text String) bool {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet[String](1, abi, text)
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.String.is_subsequence_ofn(abi.Get(0), abi.Get(1), abi.Back(), 1)
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self String) Bigrams(ctx Context) PackedStringArray {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.String.bigrams(abi.Get(0), abi.Get(1), abi.Back(), 0)
	var ret = frameGet[[2]uintptr](abi)
	abi.free()
	return mmm.Make[API, PackedStringArray, [2]uintptr](ctx, selfPtr.API, ret)
}

func (self String) Similarity(text String) Float {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet[String](1, abi, text)
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.String.similarity(abi.Get(0), abi.Get(1), abi.Back(), 1)
	var ret = frameGet[Float](abi)
	abi.free()
	return ret
}

func (self String) Format(ctx Context, values Variant, placeholder String) String {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet[Variant](1, abi, values)
	frameSet[String](2, abi, placeholder)
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.String.format(abi.Get(0), abi.Get(1), abi.Back(), 2)
	var ret = frameGet[uintptr](abi)
	abi.free()
	return mmm.Make[API, String, uintptr](ctx, selfPtr.API, ret)
}

func (self String) Replace(ctx Context, what String, forwhat String) String {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet[String](1, abi, what)
	frameSet[String](2, abi, forwhat)
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.String.replace(abi.Get(0), abi.Get(1), abi.Back(), 2)
	var ret = frameGet[uintptr](abi)
	abi.free()
	return mmm.Make[API, String, uintptr](ctx, selfPtr.API, ret)
}

func (self String) Replacen(ctx Context, what String, forwhat String) String {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet[String](1, abi, what)
	frameSet[String](2, abi, forwhat)
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.String.replacen(abi.Get(0), abi.Get(1), abi.Back(), 2)
	var ret = frameGet[uintptr](abi)
	abi.free()
	return mmm.Make[API, String, uintptr](ctx, selfPtr.API, ret)
}

func (self String) Repeat(ctx Context, count Int) String {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet[Int](1, abi, count)
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.String.repeat(abi.Get(0), abi.Get(1), abi.Back(), 1)
	var ret = frameGet[uintptr](abi)
	abi.free()
	return mmm.Make[API, String, uintptr](ctx, selfPtr.API, ret)
}

func (self String) Reverse(ctx Context) String {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.String.reverse(abi.Get(0), abi.Get(1), abi.Back(), 0)
	var ret = frameGet[uintptr](abi)
	abi.free()
	return mmm.Make[API, String, uintptr](ctx, selfPtr.API, ret)
}

func (self String) Insert(ctx Context, position Int, what String) String {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet[Int](1, abi, position)
	frameSet[String](2, abi, what)
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.String.insert(abi.Get(0), abi.Get(1), abi.Back(), 2)
	var ret = frameGet[uintptr](abi)
	abi.free()
	return mmm.Make[API, String, uintptr](ctx, selfPtr.API, ret)
}

func (self String) Erase(ctx Context, position Int, chars Int) String {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet[Int](1, abi, position)
	frameSet[Int](2, abi, chars)
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.String.erase(abi.Get(0), abi.Get(1), abi.Back(), 2)
	var ret = frameGet[uintptr](abi)
	abi.free()
	return mmm.Make[API, String, uintptr](ctx, selfPtr.API, ret)
}

func (self String) Capitalize(ctx Context) String {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.String.capitalize(abi.Get(0), abi.Get(1), abi.Back(), 0)
	var ret = frameGet[uintptr](abi)
	abi.free()
	return mmm.Make[API, String, uintptr](ctx, selfPtr.API, ret)
}

func (self String) ToCamelCase(ctx Context) String {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.String.to_camel_case(abi.Get(0), abi.Get(1), abi.Back(), 0)
	var ret = frameGet[uintptr](abi)
	abi.free()
	return mmm.Make[API, String, uintptr](ctx, selfPtr.API, ret)
}

func (self String) ToPascalCase(ctx Context) String {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.String.to_pascal_case(abi.Get(0), abi.Get(1), abi.Back(), 0)
	var ret = frameGet[uintptr](abi)
	abi.free()
	return mmm.Make[API, String, uintptr](ctx, selfPtr.API, ret)
}

func (self String) ToSnakeCase(ctx Context) String {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.String.to_snake_case(abi.Get(0), abi.Get(1), abi.Back(), 0)
	var ret = frameGet[uintptr](abi)
	abi.free()
	return mmm.Make[API, String, uintptr](ctx, selfPtr.API, ret)
}

func (self String) Split(ctx Context, delimiter String, allow_empty bool, maxsplit Int) PackedStringArray {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet[String](1, abi, delimiter)
	frameSet[bool](2, abi, allow_empty)
	frameSet[Int](3, abi, maxsplit)
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.String.split(abi.Get(0), abi.Get(1), abi.Back(), 3)
	var ret = frameGet[[2]uintptr](abi)
	abi.free()
	return mmm.Make[API, PackedStringArray, [2]uintptr](ctx, selfPtr.API, ret)
}

func (self String) Rsplit(ctx Context, delimiter String, allow_empty bool, maxsplit Int) PackedStringArray {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet[String](1, abi, delimiter)
	frameSet[bool](2, abi, allow_empty)
	frameSet[Int](3, abi, maxsplit)
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.String.rsplit(abi.Get(0), abi.Get(1), abi.Back(), 3)
	var ret = frameGet[[2]uintptr](abi)
	abi.free()
	return mmm.Make[API, PackedStringArray, [2]uintptr](ctx, selfPtr.API, ret)
}

func (self String) SplitFloats(ctx Context, delimiter String, allow_empty bool) PackedFloat64Array {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet[String](1, abi, delimiter)
	frameSet[bool](2, abi, allow_empty)
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.String.split_floats(abi.Get(0), abi.Get(1), abi.Back(), 2)
	var ret = frameGet[[2]uintptr](abi)
	abi.free()
	return mmm.Make[API, PackedFloat64Array, [2]uintptr](ctx, selfPtr.API, ret)
}

func (self String) Join(ctx Context, parts PackedStringArray) String {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet[PackedStringArray](1, abi, parts)
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.String.join(abi.Get(0), abi.Get(1), abi.Back(), 1)
	var ret = frameGet[uintptr](abi)
	abi.free()
	return mmm.Make[API, String, uintptr](ctx, selfPtr.API, ret)
}

func (self String) ToUpper(ctx Context) String {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.String.to_upper(abi.Get(0), abi.Get(1), abi.Back(), 0)
	var ret = frameGet[uintptr](abi)
	abi.free()
	return mmm.Make[API, String, uintptr](ctx, selfPtr.API, ret)
}

func (self String) ToLower(ctx Context) String {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.String.to_lower(abi.Get(0), abi.Get(1), abi.Back(), 0)
	var ret = frameGet[uintptr](abi)
	abi.free()
	return mmm.Make[API, String, uintptr](ctx, selfPtr.API, ret)
}

func (self String) Left(ctx Context, length Int) String {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet[Int](1, abi, length)
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.String.left(abi.Get(0), abi.Get(1), abi.Back(), 1)
	var ret = frameGet[uintptr](abi)
	abi.free()
	return mmm.Make[API, String, uintptr](ctx, selfPtr.API, ret)
}

func (self String) Right(ctx Context, length Int) String {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet[Int](1, abi, length)
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.String.right(abi.Get(0), abi.Get(1), abi.Back(), 1)
	var ret = frameGet[uintptr](abi)
	abi.free()
	return mmm.Make[API, String, uintptr](ctx, selfPtr.API, ret)
}

func (self String) StripEdges(ctx Context, left bool, right bool) String {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet[bool](1, abi, left)
	frameSet[bool](2, abi, right)
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.String.strip_edges(abi.Get(0), abi.Get(1), abi.Back(), 2)
	var ret = frameGet[uintptr](abi)
	abi.free()
	return mmm.Make[API, String, uintptr](ctx, selfPtr.API, ret)
}

func (self String) StripEscapes(ctx Context) String {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.String.strip_escapes(abi.Get(0), abi.Get(1), abi.Back(), 0)
	var ret = frameGet[uintptr](abi)
	abi.free()
	return mmm.Make[API, String, uintptr](ctx, selfPtr.API, ret)
}

func (self String) Lstrip(ctx Context, chars String) String {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet[String](1, abi, chars)
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.String.lstrip(abi.Get(0), abi.Get(1), abi.Back(), 1)
	var ret = frameGet[uintptr](abi)
	abi.free()
	return mmm.Make[API, String, uintptr](ctx, selfPtr.API, ret)
}

func (self String) Rstrip(ctx Context, chars String) String {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet[String](1, abi, chars)
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.String.rstrip(abi.Get(0), abi.Get(1), abi.Back(), 1)
	var ret = frameGet[uintptr](abi)
	abi.free()
	return mmm.Make[API, String, uintptr](ctx, selfPtr.API, ret)
}

func (self String) GetExtension(ctx Context) String {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.String.get_extension(abi.Get(0), abi.Get(1), abi.Back(), 0)
	var ret = frameGet[uintptr](abi)
	abi.free()
	return mmm.Make[API, String, uintptr](ctx, selfPtr.API, ret)
}

func (self String) GetBasename(ctx Context) String {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.String.get_basename(abi.Get(0), abi.Get(1), abi.Back(), 0)
	var ret = frameGet[uintptr](abi)
	abi.free()
	return mmm.Make[API, String, uintptr](ctx, selfPtr.API, ret)
}

func (self String) PathJoin(ctx Context, file String) String {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet[String](1, abi, file)
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.String.path_join(abi.Get(0), abi.Get(1), abi.Back(), 1)
	var ret = frameGet[uintptr](abi)
	abi.free()
	return mmm.Make[API, String, uintptr](ctx, selfPtr.API, ret)
}

func (self String) UnicodeAt(at Int) Int {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet[Int](1, abi, at)
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.String.unicode_at(abi.Get(0), abi.Get(1), abi.Back(), 1)
	var ret = frameGet[Int](abi)
	abi.free()
	return ret
}

func (self String) Indent(ctx Context, prefix String) String {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet[String](1, abi, prefix)
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.String.indent(abi.Get(0), abi.Get(1), abi.Back(), 1)
	var ret = frameGet[uintptr](abi)
	abi.free()
	return mmm.Make[API, String, uintptr](ctx, selfPtr.API, ret)
}

func (self String) Dedent(ctx Context) String {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.String.dedent(abi.Get(0), abi.Get(1), abi.Back(), 0)
	var ret = frameGet[uintptr](abi)
	abi.free()
	return mmm.Make[API, String, uintptr](ctx, selfPtr.API, ret)
}

func (self String) Hash() Int {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.String.hash(abi.Get(0), abi.Get(1), abi.Back(), 0)
	var ret = frameGet[Int](abi)
	abi.free()
	return ret
}

func (self String) Md5Text(ctx Context) String {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.String.md5_text(abi.Get(0), abi.Get(1), abi.Back(), 0)
	var ret = frameGet[uintptr](abi)
	abi.free()
	return mmm.Make[API, String, uintptr](ctx, selfPtr.API, ret)
}

func (self String) Sha1Text(ctx Context) String {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.String.sha1_text(abi.Get(0), abi.Get(1), abi.Back(), 0)
	var ret = frameGet[uintptr](abi)
	abi.free()
	return mmm.Make[API, String, uintptr](ctx, selfPtr.API, ret)
}

func (self String) Sha256Text(ctx Context) String {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.String.sha256_text(abi.Get(0), abi.Get(1), abi.Back(), 0)
	var ret = frameGet[uintptr](abi)
	abi.free()
	return mmm.Make[API, String, uintptr](ctx, selfPtr.API, ret)
}

func (self String) Md5Buffer(ctx Context) PackedByteArray {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.String.md5_buffer(abi.Get(0), abi.Get(1), abi.Back(), 0)
	var ret = frameGet[[2]uintptr](abi)
	abi.free()
	return mmm.Make[API, PackedByteArray, [2]uintptr](ctx, selfPtr.API, ret)
}

func (self String) Sha1Buffer(ctx Context) PackedByteArray {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.String.sha1_buffer(abi.Get(0), abi.Get(1), abi.Back(), 0)
	var ret = frameGet[[2]uintptr](abi)
	abi.free()
	return mmm.Make[API, PackedByteArray, [2]uintptr](ctx, selfPtr.API, ret)
}

func (self String) Sha256Buffer(ctx Context) PackedByteArray {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.String.sha256_buffer(abi.Get(0), abi.Get(1), abi.Back(), 0)
	var ret = frameGet[[2]uintptr](abi)
	abi.free()
	return mmm.Make[API, PackedByteArray, [2]uintptr](ctx, selfPtr.API, ret)
}

func (self String) IsEmpty() bool {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.String.is_empty(abi.Get(0), abi.Get(1), abi.Back(), 0)
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self String) Contains(what String) bool {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet[String](1, abi, what)
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.String.contains(abi.Get(0), abi.Get(1), abi.Back(), 1)
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self String) IsAbsolutePath() bool {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.String.is_absolute_path(abi.Get(0), abi.Get(1), abi.Back(), 0)
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self String) IsRelativePath() bool {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.String.is_relative_path(abi.Get(0), abi.Get(1), abi.Back(), 0)
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self String) SimplifyPath(ctx Context) String {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.String.simplify_path(abi.Get(0), abi.Get(1), abi.Back(), 0)
	var ret = frameGet[uintptr](abi)
	abi.free()
	return mmm.Make[API, String, uintptr](ctx, selfPtr.API, ret)
}

func (self String) GetBaseDir(ctx Context) String {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.String.get_base_dir(abi.Get(0), abi.Get(1), abi.Back(), 0)
	var ret = frameGet[uintptr](abi)
	abi.free()
	return mmm.Make[API, String, uintptr](ctx, selfPtr.API, ret)
}

func (self String) GetFile(ctx Context) String {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.String.get_file(abi.Get(0), abi.Get(1), abi.Back(), 0)
	var ret = frameGet[uintptr](abi)
	abi.free()
	return mmm.Make[API, String, uintptr](ctx, selfPtr.API, ret)
}

func (self String) XmlEscape(ctx Context, escape_quotes bool) String {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet[bool](1, abi, escape_quotes)
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.String.xml_escape(abi.Get(0), abi.Get(1), abi.Back(), 1)
	var ret = frameGet[uintptr](abi)
	abi.free()
	return mmm.Make[API, String, uintptr](ctx, selfPtr.API, ret)
}

func (self String) XmlUnescape(ctx Context) String {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.String.xml_unescape(abi.Get(0), abi.Get(1), abi.Back(), 0)
	var ret = frameGet[uintptr](abi)
	abi.free()
	return mmm.Make[API, String, uintptr](ctx, selfPtr.API, ret)
}

func (self String) UriEncode(ctx Context) String {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.String.uri_encode(abi.Get(0), abi.Get(1), abi.Back(), 0)
	var ret = frameGet[uintptr](abi)
	abi.free()
	return mmm.Make[API, String, uintptr](ctx, selfPtr.API, ret)
}

func (self String) UriDecode(ctx Context) String {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.String.uri_decode(abi.Get(0), abi.Get(1), abi.Back(), 0)
	var ret = frameGet[uintptr](abi)
	abi.free()
	return mmm.Make[API, String, uintptr](ctx, selfPtr.API, ret)
}

func (self String) CEscape(ctx Context) String {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.String.c_escape(abi.Get(0), abi.Get(1), abi.Back(), 0)
	var ret = frameGet[uintptr](abi)
	abi.free()
	return mmm.Make[API, String, uintptr](ctx, selfPtr.API, ret)
}

func (self String) CUnescape(ctx Context) String {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.String.c_unescape(abi.Get(0), abi.Get(1), abi.Back(), 0)
	var ret = frameGet[uintptr](abi)
	abi.free()
	return mmm.Make[API, String, uintptr](ctx, selfPtr.API, ret)
}

func (self String) JsonEscape(ctx Context) String {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.String.json_escape(abi.Get(0), abi.Get(1), abi.Back(), 0)
	var ret = frameGet[uintptr](abi)
	abi.free()
	return mmm.Make[API, String, uintptr](ctx, selfPtr.API, ret)
}

func (self String) ValidateNodeName(ctx Context) String {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.String.validate_node_name(abi.Get(0), abi.Get(1), abi.Back(), 0)
	var ret = frameGet[uintptr](abi)
	abi.free()
	return mmm.Make[API, String, uintptr](ctx, selfPtr.API, ret)
}

func (self String) ValidateFilename(ctx Context) String {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.String.validate_filename(abi.Get(0), abi.Get(1), abi.Back(), 0)
	var ret = frameGet[uintptr](abi)
	abi.free()
	return mmm.Make[API, String, uintptr](ctx, selfPtr.API, ret)
}

func (self String) IsValidIdentifier() bool {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.String.is_valid_identifier(abi.Get(0), abi.Get(1), abi.Back(), 0)
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self String) IsValidInt() bool {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.String.is_valid_int(abi.Get(0), abi.Get(1), abi.Back(), 0)
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self String) IsValidFloat() bool {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.String.is_valid_float(abi.Get(0), abi.Get(1), abi.Back(), 0)
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self String) IsValidHexNumber(with_prefix bool) bool {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet[bool](1, abi, with_prefix)
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.String.is_valid_hex_number(abi.Get(0), abi.Get(1), abi.Back(), 1)
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self String) IsValidHtmlColor() bool {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.String.is_valid_html_color(abi.Get(0), abi.Get(1), abi.Back(), 0)
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self String) IsValidIpAddress() bool {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.String.is_valid_ip_address(abi.Get(0), abi.Get(1), abi.Back(), 0)
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self String) IsValidFilename() bool {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.String.is_valid_filename(abi.Get(0), abi.Get(1), abi.Back(), 0)
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self String) ToInt() Int {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.String.to_int(abi.Get(0), abi.Get(1), abi.Back(), 0)
	var ret = frameGet[Int](abi)
	abi.free()
	return ret
}

func (self String) ToFloat() Float {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.String.to_float(abi.Get(0), abi.Get(1), abi.Back(), 0)
	var ret = frameGet[Float](abi)
	abi.free()
	return ret
}

func (self String) HexToInt() Int {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.String.hex_to_int(abi.Get(0), abi.Get(1), abi.Back(), 0)
	var ret = frameGet[Int](abi)
	abi.free()
	return ret
}

func (self String) BinToInt() Int {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.String.bin_to_int(abi.Get(0), abi.Get(1), abi.Back(), 0)
	var ret = frameGet[Int](abi)
	abi.free()
	return ret
}

func (self String) Lpad(ctx Context, min_length Int, character String) String {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet[Int](1, abi, min_length)
	frameSet[String](2, abi, character)
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.String.lpad(abi.Get(0), abi.Get(1), abi.Back(), 2)
	var ret = frameGet[uintptr](abi)
	abi.free()
	return mmm.Make[API, String, uintptr](ctx, selfPtr.API, ret)
}

func (self String) Rpad(ctx Context, min_length Int, character String) String {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet[Int](1, abi, min_length)
	frameSet[String](2, abi, character)
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.String.rpad(abi.Get(0), abi.Get(1), abi.Back(), 2)
	var ret = frameGet[uintptr](abi)
	abi.free()
	return mmm.Make[API, String, uintptr](ctx, selfPtr.API, ret)
}

func (self String) PadDecimals(ctx Context, digits Int) String {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet[Int](1, abi, digits)
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.String.pad_decimals(abi.Get(0), abi.Get(1), abi.Back(), 1)
	var ret = frameGet[uintptr](abi)
	abi.free()
	return mmm.Make[API, String, uintptr](ctx, selfPtr.API, ret)
}

func (self String) PadZeros(ctx Context, digits Int) String {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet[Int](1, abi, digits)
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.String.pad_zeros(abi.Get(0), abi.Get(1), abi.Back(), 1)
	var ret = frameGet[uintptr](abi)
	abi.free()
	return mmm.Make[API, String, uintptr](ctx, selfPtr.API, ret)
}

func (self String) TrimPrefix(ctx Context, prefix String) String {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet[String](1, abi, prefix)
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.String.trim_prefix(abi.Get(0), abi.Get(1), abi.Back(), 1)
	var ret = frameGet[uintptr](abi)
	abi.free()
	return mmm.Make[API, String, uintptr](ctx, selfPtr.API, ret)
}

func (self String) TrimSuffix(ctx Context, suffix String) String {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet[String](1, abi, suffix)
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.String.trim_suffix(abi.Get(0), abi.Get(1), abi.Back(), 1)
	var ret = frameGet[uintptr](abi)
	abi.free()
	return mmm.Make[API, String, uintptr](ctx, selfPtr.API, ret)
}

func (self String) ToAsciiBuffer(ctx Context) PackedByteArray {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.String.to_ascii_buffer(abi.Get(0), abi.Get(1), abi.Back(), 0)
	var ret = frameGet[[2]uintptr](abi)
	abi.free()
	return mmm.Make[API, PackedByteArray, [2]uintptr](ctx, selfPtr.API, ret)
}

func (self String) ToUtf8Buffer(ctx Context) PackedByteArray {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.String.to_utf8_buffer(abi.Get(0), abi.Get(1), abi.Back(), 0)
	var ret = frameGet[[2]uintptr](abi)
	abi.free()
	return mmm.Make[API, PackedByteArray, [2]uintptr](ctx, selfPtr.API, ret)
}

func (self String) ToUtf16Buffer(ctx Context) PackedByteArray {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.String.to_utf16_buffer(abi.Get(0), abi.Get(1), abi.Back(), 0)
	var ret = frameGet[[2]uintptr](abi)
	abi.free()
	return mmm.Make[API, PackedByteArray, [2]uintptr](ctx, selfPtr.API, ret)
}

func (self String) ToUtf32Buffer(ctx Context) PackedByteArray {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.String.to_utf32_buffer(abi.Get(0), abi.Get(1), abi.Back(), 0)
	var ret = frameGet[[2]uintptr](abi)
	abi.free()
	return mmm.Make[API, PackedByteArray, [2]uintptr](ctx, selfPtr.API, ret)
}

func (self String) HexDecode(ctx Context) PackedByteArray {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.String.hex_decode(abi.Get(0), abi.Get(1), abi.Back(), 0)
	var ret = frameGet[[2]uintptr](abi)
	abi.free()
	return mmm.Make[API, PackedByteArray, [2]uintptr](ctx, selfPtr.API, ret)
}

func (self String) ToWcharBuffer(ctx Context) PackedByteArray {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.String.to_wchar_buffer(abi.Get(0), abi.Get(1), abi.Back(), 0)
	var ret = frameGet[[2]uintptr](abi)
	abi.free()
	return mmm.Make[API, PackedByteArray, [2]uintptr](ctx, selfPtr.API, ret)
}

func (self String) NumScientific(ctx Context, number Float) String {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet[Float](1, abi, number)
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.String.num_scientific(abi.Get(0), abi.Get(1), abi.Back(), 1)
	var ret = frameGet[uintptr](abi)
	abi.free()
	return mmm.Make[API, String, uintptr](ctx, selfPtr.API, ret)
}

func (self String) Num(ctx Context, number Float, decimals Int) String {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet[Float](1, abi, number)
	frameSet[Int](2, abi, decimals)
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.String.num(abi.Get(0), abi.Get(1), abi.Back(), 2)
	var ret = frameGet[uintptr](abi)
	abi.free()
	return mmm.Make[API, String, uintptr](ctx, selfPtr.API, ret)
}

func (self String) NumInt64(ctx Context, number Int, base Int, capitalize_hex bool) String {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet[Int](1, abi, number)
	frameSet[Int](2, abi, base)
	frameSet[bool](3, abi, capitalize_hex)
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.String.num_int64(abi.Get(0), abi.Get(1), abi.Back(), 3)
	var ret = frameGet[uintptr](abi)
	abi.free()
	return mmm.Make[API, String, uintptr](ctx, selfPtr.API, ret)
}

func (self String) NumUint64(ctx Context, number Int, base Int, capitalize_hex bool) String {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet[Int](1, abi, number)
	frameSet[Int](2, abi, base)
	frameSet[bool](3, abi, capitalize_hex)
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.String.num_uint64(abi.Get(0), abi.Get(1), abi.Back(), 3)
	var ret = frameGet[uintptr](abi)
	abi.free()
	return mmm.Make[API, String, uintptr](ctx, selfPtr.API, ret)
}

func (self String) Chr(ctx Context, char Int) String {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet[Int](1, abi, char)
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.String.chr(abi.Get(0), abi.Get(1), abi.Back(), 1)
	var ret = frameGet[uintptr](abi)
	abi.free()
	return mmm.Make[API, String, uintptr](ctx, selfPtr.API, ret)
}

func (self String) HumanizeSize(ctx Context, size Int) String {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet[Int](1, abi, size)
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.String.humanize_size(abi.Get(0), abi.Get(1), abi.Back(), 1)
	var ret = frameGet[uintptr](abi)
	abi.free()
	return mmm.Make[API, String, uintptr](ctx, selfPtr.API, ret)
}

func (self StringName) CasecmpTo(to String) Int {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet[String](1, abi, to)
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.StringName.casecmp_to(abi.Get(0), abi.Get(1), abi.Back(), 1)
	var ret = frameGet[Int](abi)
	abi.free()
	return ret
}

func (self StringName) NocasecmpTo(to String) Int {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet[String](1, abi, to)
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.StringName.nocasecmp_to(abi.Get(0), abi.Get(1), abi.Back(), 1)
	var ret = frameGet[Int](abi)
	abi.free()
	return ret
}

func (self StringName) NaturalcasecmpTo(to String) Int {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet[String](1, abi, to)
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.StringName.naturalcasecmp_to(abi.Get(0), abi.Get(1), abi.Back(), 1)
	var ret = frameGet[Int](abi)
	abi.free()
	return ret
}

func (self StringName) NaturalnocasecmpTo(to String) Int {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet[String](1, abi, to)
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.StringName.naturalnocasecmp_to(abi.Get(0), abi.Get(1), abi.Back(), 1)
	var ret = frameGet[Int](abi)
	abi.free()
	return ret
}

func (self StringName) Length() Int {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.StringName.length(abi.Get(0), abi.Get(1), abi.Back(), 0)
	var ret = frameGet[Int](abi)
	abi.free()
	return ret
}

func (self StringName) Substr(ctx Context, from Int, len Int) String {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet[Int](1, abi, from)
	frameSet[Int](2, abi, len)
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.StringName.substr(abi.Get(0), abi.Get(1), abi.Back(), 2)
	var ret = frameGet[uintptr](abi)
	abi.free()
	return mmm.Make[API, String, uintptr](ctx, selfPtr.API, ret)
}

func (self StringName) GetSlice(ctx Context, delimiter String, slice Int) String {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet[String](1, abi, delimiter)
	frameSet[Int](2, abi, slice)
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.StringName.get_slice(abi.Get(0), abi.Get(1), abi.Back(), 2)
	var ret = frameGet[uintptr](abi)
	abi.free()
	return mmm.Make[API, String, uintptr](ctx, selfPtr.API, ret)
}

func (self StringName) GetSlicec(ctx Context, delimiter Int, slice Int) String {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet[Int](1, abi, delimiter)
	frameSet[Int](2, abi, slice)
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.StringName.get_slicec(abi.Get(0), abi.Get(1), abi.Back(), 2)
	var ret = frameGet[uintptr](abi)
	abi.free()
	return mmm.Make[API, String, uintptr](ctx, selfPtr.API, ret)
}

func (self StringName) GetSliceCount(delimiter String) Int {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet[String](1, abi, delimiter)
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.StringName.get_slice_count(abi.Get(0), abi.Get(1), abi.Back(), 1)
	var ret = frameGet[Int](abi)
	abi.free()
	return ret
}

func (self StringName) Find(what String, from Int) Int {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet[String](1, abi, what)
	frameSet[Int](2, abi, from)
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.StringName.find(abi.Get(0), abi.Get(1), abi.Back(), 2)
	var ret = frameGet[Int](abi)
	abi.free()
	return ret
}

func (self StringName) Count(what String, from Int, to Int) Int {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet[String](1, abi, what)
	frameSet[Int](2, abi, from)
	frameSet[Int](3, abi, to)
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.StringName.count(abi.Get(0), abi.Get(1), abi.Back(), 3)
	var ret = frameGet[Int](abi)
	abi.free()
	return ret
}

func (self StringName) Countn(what String, from Int, to Int) Int {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet[String](1, abi, what)
	frameSet[Int](2, abi, from)
	frameSet[Int](3, abi, to)
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.StringName.countn(abi.Get(0), abi.Get(1), abi.Back(), 3)
	var ret = frameGet[Int](abi)
	abi.free()
	return ret
}

func (self StringName) Findn(what String, from Int) Int {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet[String](1, abi, what)
	frameSet[Int](2, abi, from)
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.StringName.findn(abi.Get(0), abi.Get(1), abi.Back(), 2)
	var ret = frameGet[Int](abi)
	abi.free()
	return ret
}

func (self StringName) Rfind(what String, from Int) Int {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet[String](1, abi, what)
	frameSet[Int](2, abi, from)
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.StringName.rfind(abi.Get(0), abi.Get(1), abi.Back(), 2)
	var ret = frameGet[Int](abi)
	abi.free()
	return ret
}

func (self StringName) Rfindn(what String, from Int) Int {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet[String](1, abi, what)
	frameSet[Int](2, abi, from)
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.StringName.rfindn(abi.Get(0), abi.Get(1), abi.Back(), 2)
	var ret = frameGet[Int](abi)
	abi.free()
	return ret
}

func (self StringName) Match(expr String) bool {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet[String](1, abi, expr)
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.StringName.match(abi.Get(0), abi.Get(1), abi.Back(), 1)
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self StringName) Matchn(expr String) bool {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet[String](1, abi, expr)
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.StringName.matchn(abi.Get(0), abi.Get(1), abi.Back(), 1)
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self StringName) BeginsWith(text String) bool {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet[String](1, abi, text)
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.StringName.begins_with(abi.Get(0), abi.Get(1), abi.Back(), 1)
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self StringName) EndsWith(text String) bool {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet[String](1, abi, text)
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.StringName.ends_with(abi.Get(0), abi.Get(1), abi.Back(), 1)
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self StringName) IsSubsequenceOf(text String) bool {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet[String](1, abi, text)
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.StringName.is_subsequence_of(abi.Get(0), abi.Get(1), abi.Back(), 1)
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self StringName) IsSubsequenceOfn(text String) bool {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet[String](1, abi, text)
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.StringName.is_subsequence_ofn(abi.Get(0), abi.Get(1), abi.Back(), 1)
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self StringName) Bigrams(ctx Context) PackedStringArray {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.StringName.bigrams(abi.Get(0), abi.Get(1), abi.Back(), 0)
	var ret = frameGet[[2]uintptr](abi)
	abi.free()
	return mmm.Make[API, PackedStringArray, [2]uintptr](ctx, selfPtr.API, ret)
}

func (self StringName) Similarity(text String) Float {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet[String](1, abi, text)
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.StringName.similarity(abi.Get(0), abi.Get(1), abi.Back(), 1)
	var ret = frameGet[Float](abi)
	abi.free()
	return ret
}

func (self StringName) Format(ctx Context, values Variant, placeholder String) String {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet[Variant](1, abi, values)
	frameSet[String](2, abi, placeholder)
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.StringName.format(abi.Get(0), abi.Get(1), abi.Back(), 2)
	var ret = frameGet[uintptr](abi)
	abi.free()
	return mmm.Make[API, String, uintptr](ctx, selfPtr.API, ret)
}

func (self StringName) Replace(ctx Context, what String, forwhat String) String {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet[String](1, abi, what)
	frameSet[String](2, abi, forwhat)
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.StringName.replace(abi.Get(0), abi.Get(1), abi.Back(), 2)
	var ret = frameGet[uintptr](abi)
	abi.free()
	return mmm.Make[API, String, uintptr](ctx, selfPtr.API, ret)
}

func (self StringName) Replacen(ctx Context, what String, forwhat String) String {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet[String](1, abi, what)
	frameSet[String](2, abi, forwhat)
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.StringName.replacen(abi.Get(0), abi.Get(1), abi.Back(), 2)
	var ret = frameGet[uintptr](abi)
	abi.free()
	return mmm.Make[API, String, uintptr](ctx, selfPtr.API, ret)
}

func (self StringName) Repeat(ctx Context, count Int) String {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet[Int](1, abi, count)
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.StringName.repeat(abi.Get(0), abi.Get(1), abi.Back(), 1)
	var ret = frameGet[uintptr](abi)
	abi.free()
	return mmm.Make[API, String, uintptr](ctx, selfPtr.API, ret)
}

func (self StringName) Reverse(ctx Context) String {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.StringName.reverse(abi.Get(0), abi.Get(1), abi.Back(), 0)
	var ret = frameGet[uintptr](abi)
	abi.free()
	return mmm.Make[API, String, uintptr](ctx, selfPtr.API, ret)
}

func (self StringName) Insert(ctx Context, position Int, what String) String {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet[Int](1, abi, position)
	frameSet[String](2, abi, what)
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.StringName.insert(abi.Get(0), abi.Get(1), abi.Back(), 2)
	var ret = frameGet[uintptr](abi)
	abi.free()
	return mmm.Make[API, String, uintptr](ctx, selfPtr.API, ret)
}

func (self StringName) Erase(ctx Context, position Int, chars Int) String {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet[Int](1, abi, position)
	frameSet[Int](2, abi, chars)
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.StringName.erase(abi.Get(0), abi.Get(1), abi.Back(), 2)
	var ret = frameGet[uintptr](abi)
	abi.free()
	return mmm.Make[API, String, uintptr](ctx, selfPtr.API, ret)
}

func (self StringName) Capitalize(ctx Context) String {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.StringName.capitalize(abi.Get(0), abi.Get(1), abi.Back(), 0)
	var ret = frameGet[uintptr](abi)
	abi.free()
	return mmm.Make[API, String, uintptr](ctx, selfPtr.API, ret)
}

func (self StringName) ToCamelCase(ctx Context) String {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.StringName.to_camel_case(abi.Get(0), abi.Get(1), abi.Back(), 0)
	var ret = frameGet[uintptr](abi)
	abi.free()
	return mmm.Make[API, String, uintptr](ctx, selfPtr.API, ret)
}

func (self StringName) ToPascalCase(ctx Context) String {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.StringName.to_pascal_case(abi.Get(0), abi.Get(1), abi.Back(), 0)
	var ret = frameGet[uintptr](abi)
	abi.free()
	return mmm.Make[API, String, uintptr](ctx, selfPtr.API, ret)
}

func (self StringName) ToSnakeCase(ctx Context) String {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.StringName.to_snake_case(abi.Get(0), abi.Get(1), abi.Back(), 0)
	var ret = frameGet[uintptr](abi)
	abi.free()
	return mmm.Make[API, String, uintptr](ctx, selfPtr.API, ret)
}

func (self StringName) Split(ctx Context, delimiter String, allow_empty bool, maxsplit Int) PackedStringArray {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet[String](1, abi, delimiter)
	frameSet[bool](2, abi, allow_empty)
	frameSet[Int](3, abi, maxsplit)
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.StringName.split(abi.Get(0), abi.Get(1), abi.Back(), 3)
	var ret = frameGet[[2]uintptr](abi)
	abi.free()
	return mmm.Make[API, PackedStringArray, [2]uintptr](ctx, selfPtr.API, ret)
}

func (self StringName) Rsplit(ctx Context, delimiter String, allow_empty bool, maxsplit Int) PackedStringArray {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet[String](1, abi, delimiter)
	frameSet[bool](2, abi, allow_empty)
	frameSet[Int](3, abi, maxsplit)
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.StringName.rsplit(abi.Get(0), abi.Get(1), abi.Back(), 3)
	var ret = frameGet[[2]uintptr](abi)
	abi.free()
	return mmm.Make[API, PackedStringArray, [2]uintptr](ctx, selfPtr.API, ret)
}

func (self StringName) SplitFloats(ctx Context, delimiter String, allow_empty bool) PackedFloat64Array {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet[String](1, abi, delimiter)
	frameSet[bool](2, abi, allow_empty)
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.StringName.split_floats(abi.Get(0), abi.Get(1), abi.Back(), 2)
	var ret = frameGet[[2]uintptr](abi)
	abi.free()
	return mmm.Make[API, PackedFloat64Array, [2]uintptr](ctx, selfPtr.API, ret)
}

func (self StringName) Join(ctx Context, parts PackedStringArray) String {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet[PackedStringArray](1, abi, parts)
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.StringName.join(abi.Get(0), abi.Get(1), abi.Back(), 1)
	var ret = frameGet[uintptr](abi)
	abi.free()
	return mmm.Make[API, String, uintptr](ctx, selfPtr.API, ret)
}

func (self StringName) ToUpper(ctx Context) String {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.StringName.to_upper(abi.Get(0), abi.Get(1), abi.Back(), 0)
	var ret = frameGet[uintptr](abi)
	abi.free()
	return mmm.Make[API, String, uintptr](ctx, selfPtr.API, ret)
}

func (self StringName) ToLower(ctx Context) String {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.StringName.to_lower(abi.Get(0), abi.Get(1), abi.Back(), 0)
	var ret = frameGet[uintptr](abi)
	abi.free()
	return mmm.Make[API, String, uintptr](ctx, selfPtr.API, ret)
}

func (self StringName) Left(ctx Context, length Int) String {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet[Int](1, abi, length)
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.StringName.left(abi.Get(0), abi.Get(1), abi.Back(), 1)
	var ret = frameGet[uintptr](abi)
	abi.free()
	return mmm.Make[API, String, uintptr](ctx, selfPtr.API, ret)
}

func (self StringName) Right(ctx Context, length Int) String {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet[Int](1, abi, length)
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.StringName.right(abi.Get(0), abi.Get(1), abi.Back(), 1)
	var ret = frameGet[uintptr](abi)
	abi.free()
	return mmm.Make[API, String, uintptr](ctx, selfPtr.API, ret)
}

func (self StringName) StripEdges(ctx Context, left bool, right bool) String {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet[bool](1, abi, left)
	frameSet[bool](2, abi, right)
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.StringName.strip_edges(abi.Get(0), abi.Get(1), abi.Back(), 2)
	var ret = frameGet[uintptr](abi)
	abi.free()
	return mmm.Make[API, String, uintptr](ctx, selfPtr.API, ret)
}

func (self StringName) StripEscapes(ctx Context) String {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.StringName.strip_escapes(abi.Get(0), abi.Get(1), abi.Back(), 0)
	var ret = frameGet[uintptr](abi)
	abi.free()
	return mmm.Make[API, String, uintptr](ctx, selfPtr.API, ret)
}

func (self StringName) Lstrip(ctx Context, chars String) String {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet[String](1, abi, chars)
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.StringName.lstrip(abi.Get(0), abi.Get(1), abi.Back(), 1)
	var ret = frameGet[uintptr](abi)
	abi.free()
	return mmm.Make[API, String, uintptr](ctx, selfPtr.API, ret)
}

func (self StringName) Rstrip(ctx Context, chars String) String {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet[String](1, abi, chars)
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.StringName.rstrip(abi.Get(0), abi.Get(1), abi.Back(), 1)
	var ret = frameGet[uintptr](abi)
	abi.free()
	return mmm.Make[API, String, uintptr](ctx, selfPtr.API, ret)
}

func (self StringName) GetExtension(ctx Context) String {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.StringName.get_extension(abi.Get(0), abi.Get(1), abi.Back(), 0)
	var ret = frameGet[uintptr](abi)
	abi.free()
	return mmm.Make[API, String, uintptr](ctx, selfPtr.API, ret)
}

func (self StringName) GetBasename(ctx Context) String {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.StringName.get_basename(abi.Get(0), abi.Get(1), abi.Back(), 0)
	var ret = frameGet[uintptr](abi)
	abi.free()
	return mmm.Make[API, String, uintptr](ctx, selfPtr.API, ret)
}

func (self StringName) PathJoin(ctx Context, file String) String {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet[String](1, abi, file)
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.StringName.path_join(abi.Get(0), abi.Get(1), abi.Back(), 1)
	var ret = frameGet[uintptr](abi)
	abi.free()
	return mmm.Make[API, String, uintptr](ctx, selfPtr.API, ret)
}

func (self StringName) UnicodeAt(at Int) Int {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet[Int](1, abi, at)
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.StringName.unicode_at(abi.Get(0), abi.Get(1), abi.Back(), 1)
	var ret = frameGet[Int](abi)
	abi.free()
	return ret
}

func (self StringName) Indent(ctx Context, prefix String) String {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet[String](1, abi, prefix)
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.StringName.indent(abi.Get(0), abi.Get(1), abi.Back(), 1)
	var ret = frameGet[uintptr](abi)
	abi.free()
	return mmm.Make[API, String, uintptr](ctx, selfPtr.API, ret)
}

func (self StringName) Dedent(ctx Context) String {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.StringName.dedent(abi.Get(0), abi.Get(1), abi.Back(), 0)
	var ret = frameGet[uintptr](abi)
	abi.free()
	return mmm.Make[API, String, uintptr](ctx, selfPtr.API, ret)
}

func (self StringName) Md5Text(ctx Context) String {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.StringName.md5_text(abi.Get(0), abi.Get(1), abi.Back(), 0)
	var ret = frameGet[uintptr](abi)
	abi.free()
	return mmm.Make[API, String, uintptr](ctx, selfPtr.API, ret)
}

func (self StringName) Sha1Text(ctx Context) String {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.StringName.sha1_text(abi.Get(0), abi.Get(1), abi.Back(), 0)
	var ret = frameGet[uintptr](abi)
	abi.free()
	return mmm.Make[API, String, uintptr](ctx, selfPtr.API, ret)
}

func (self StringName) Sha256Text(ctx Context) String {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.StringName.sha256_text(abi.Get(0), abi.Get(1), abi.Back(), 0)
	var ret = frameGet[uintptr](abi)
	abi.free()
	return mmm.Make[API, String, uintptr](ctx, selfPtr.API, ret)
}

func (self StringName) Md5Buffer(ctx Context) PackedByteArray {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.StringName.md5_buffer(abi.Get(0), abi.Get(1), abi.Back(), 0)
	var ret = frameGet[[2]uintptr](abi)
	abi.free()
	return mmm.Make[API, PackedByteArray, [2]uintptr](ctx, selfPtr.API, ret)
}

func (self StringName) Sha1Buffer(ctx Context) PackedByteArray {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.StringName.sha1_buffer(abi.Get(0), abi.Get(1), abi.Back(), 0)
	var ret = frameGet[[2]uintptr](abi)
	abi.free()
	return mmm.Make[API, PackedByteArray, [2]uintptr](ctx, selfPtr.API, ret)
}

func (self StringName) Sha256Buffer(ctx Context) PackedByteArray {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.StringName.sha256_buffer(abi.Get(0), abi.Get(1), abi.Back(), 0)
	var ret = frameGet[[2]uintptr](abi)
	abi.free()
	return mmm.Make[API, PackedByteArray, [2]uintptr](ctx, selfPtr.API, ret)
}

func (self StringName) IsEmpty() bool {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.StringName.is_empty(abi.Get(0), abi.Get(1), abi.Back(), 0)
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self StringName) Contains(what String) bool {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet[String](1, abi, what)
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.StringName.contains(abi.Get(0), abi.Get(1), abi.Back(), 1)
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self StringName) IsAbsolutePath() bool {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.StringName.is_absolute_path(abi.Get(0), abi.Get(1), abi.Back(), 0)
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self StringName) IsRelativePath() bool {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.StringName.is_relative_path(abi.Get(0), abi.Get(1), abi.Back(), 0)
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self StringName) SimplifyPath(ctx Context) String {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.StringName.simplify_path(abi.Get(0), abi.Get(1), abi.Back(), 0)
	var ret = frameGet[uintptr](abi)
	abi.free()
	return mmm.Make[API, String, uintptr](ctx, selfPtr.API, ret)
}

func (self StringName) GetBaseDir(ctx Context) String {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.StringName.get_base_dir(abi.Get(0), abi.Get(1), abi.Back(), 0)
	var ret = frameGet[uintptr](abi)
	abi.free()
	return mmm.Make[API, String, uintptr](ctx, selfPtr.API, ret)
}

func (self StringName) GetFile(ctx Context) String {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.StringName.get_file(abi.Get(0), abi.Get(1), abi.Back(), 0)
	var ret = frameGet[uintptr](abi)
	abi.free()
	return mmm.Make[API, String, uintptr](ctx, selfPtr.API, ret)
}

func (self StringName) XmlEscape(ctx Context, escape_quotes bool) String {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet[bool](1, abi, escape_quotes)
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.StringName.xml_escape(abi.Get(0), abi.Get(1), abi.Back(), 1)
	var ret = frameGet[uintptr](abi)
	abi.free()
	return mmm.Make[API, String, uintptr](ctx, selfPtr.API, ret)
}

func (self StringName) XmlUnescape(ctx Context) String {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.StringName.xml_unescape(abi.Get(0), abi.Get(1), abi.Back(), 0)
	var ret = frameGet[uintptr](abi)
	abi.free()
	return mmm.Make[API, String, uintptr](ctx, selfPtr.API, ret)
}

func (self StringName) UriEncode(ctx Context) String {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.StringName.uri_encode(abi.Get(0), abi.Get(1), abi.Back(), 0)
	var ret = frameGet[uintptr](abi)
	abi.free()
	return mmm.Make[API, String, uintptr](ctx, selfPtr.API, ret)
}

func (self StringName) UriDecode(ctx Context) String {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.StringName.uri_decode(abi.Get(0), abi.Get(1), abi.Back(), 0)
	var ret = frameGet[uintptr](abi)
	abi.free()
	return mmm.Make[API, String, uintptr](ctx, selfPtr.API, ret)
}

func (self StringName) CEscape(ctx Context) String {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.StringName.c_escape(abi.Get(0), abi.Get(1), abi.Back(), 0)
	var ret = frameGet[uintptr](abi)
	abi.free()
	return mmm.Make[API, String, uintptr](ctx, selfPtr.API, ret)
}

func (self StringName) CUnescape(ctx Context) String {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.StringName.c_unescape(abi.Get(0), abi.Get(1), abi.Back(), 0)
	var ret = frameGet[uintptr](abi)
	abi.free()
	return mmm.Make[API, String, uintptr](ctx, selfPtr.API, ret)
}

func (self StringName) JsonEscape(ctx Context) String {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.StringName.json_escape(abi.Get(0), abi.Get(1), abi.Back(), 0)
	var ret = frameGet[uintptr](abi)
	abi.free()
	return mmm.Make[API, String, uintptr](ctx, selfPtr.API, ret)
}

func (self StringName) ValidateNodeName(ctx Context) String {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.StringName.validate_node_name(abi.Get(0), abi.Get(1), abi.Back(), 0)
	var ret = frameGet[uintptr](abi)
	abi.free()
	return mmm.Make[API, String, uintptr](ctx, selfPtr.API, ret)
}

func (self StringName) ValidateFilename(ctx Context) String {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.StringName.validate_filename(abi.Get(0), abi.Get(1), abi.Back(), 0)
	var ret = frameGet[uintptr](abi)
	abi.free()
	return mmm.Make[API, String, uintptr](ctx, selfPtr.API, ret)
}

func (self StringName) IsValidIdentifier() bool {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.StringName.is_valid_identifier(abi.Get(0), abi.Get(1), abi.Back(), 0)
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self StringName) IsValidInt() bool {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.StringName.is_valid_int(abi.Get(0), abi.Get(1), abi.Back(), 0)
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self StringName) IsValidFloat() bool {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.StringName.is_valid_float(abi.Get(0), abi.Get(1), abi.Back(), 0)
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self StringName) IsValidHexNumber(with_prefix bool) bool {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet[bool](1, abi, with_prefix)
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.StringName.is_valid_hex_number(abi.Get(0), abi.Get(1), abi.Back(), 1)
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self StringName) IsValidHtmlColor() bool {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.StringName.is_valid_html_color(abi.Get(0), abi.Get(1), abi.Back(), 0)
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self StringName) IsValidIpAddress() bool {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.StringName.is_valid_ip_address(abi.Get(0), abi.Get(1), abi.Back(), 0)
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self StringName) IsValidFilename() bool {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.StringName.is_valid_filename(abi.Get(0), abi.Get(1), abi.Back(), 0)
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self StringName) ToInt() Int {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.StringName.to_int(abi.Get(0), abi.Get(1), abi.Back(), 0)
	var ret = frameGet[Int](abi)
	abi.free()
	return ret
}

func (self StringName) ToFloat() Float {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.StringName.to_float(abi.Get(0), abi.Get(1), abi.Back(), 0)
	var ret = frameGet[Float](abi)
	abi.free()
	return ret
}

func (self StringName) HexToInt() Int {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.StringName.hex_to_int(abi.Get(0), abi.Get(1), abi.Back(), 0)
	var ret = frameGet[Int](abi)
	abi.free()
	return ret
}

func (self StringName) BinToInt() Int {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.StringName.bin_to_int(abi.Get(0), abi.Get(1), abi.Back(), 0)
	var ret = frameGet[Int](abi)
	abi.free()
	return ret
}

func (self StringName) Lpad(ctx Context, min_length Int, character String) String {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet[Int](1, abi, min_length)
	frameSet[String](2, abi, character)
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.StringName.lpad(abi.Get(0), abi.Get(1), abi.Back(), 2)
	var ret = frameGet[uintptr](abi)
	abi.free()
	return mmm.Make[API, String, uintptr](ctx, selfPtr.API, ret)
}

func (self StringName) Rpad(ctx Context, min_length Int, character String) String {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet[Int](1, abi, min_length)
	frameSet[String](2, abi, character)
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.StringName.rpad(abi.Get(0), abi.Get(1), abi.Back(), 2)
	var ret = frameGet[uintptr](abi)
	abi.free()
	return mmm.Make[API, String, uintptr](ctx, selfPtr.API, ret)
}

func (self StringName) PadDecimals(ctx Context, digits Int) String {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet[Int](1, abi, digits)
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.StringName.pad_decimals(abi.Get(0), abi.Get(1), abi.Back(), 1)
	var ret = frameGet[uintptr](abi)
	abi.free()
	return mmm.Make[API, String, uintptr](ctx, selfPtr.API, ret)
}

func (self StringName) PadZeros(ctx Context, digits Int) String {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet[Int](1, abi, digits)
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.StringName.pad_zeros(abi.Get(0), abi.Get(1), abi.Back(), 1)
	var ret = frameGet[uintptr](abi)
	abi.free()
	return mmm.Make[API, String, uintptr](ctx, selfPtr.API, ret)
}

func (self StringName) TrimPrefix(ctx Context, prefix String) String {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet[String](1, abi, prefix)
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.StringName.trim_prefix(abi.Get(0), abi.Get(1), abi.Back(), 1)
	var ret = frameGet[uintptr](abi)
	abi.free()
	return mmm.Make[API, String, uintptr](ctx, selfPtr.API, ret)
}

func (self StringName) TrimSuffix(ctx Context, suffix String) String {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet[String](1, abi, suffix)
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.StringName.trim_suffix(abi.Get(0), abi.Get(1), abi.Back(), 1)
	var ret = frameGet[uintptr](abi)
	abi.free()
	return mmm.Make[API, String, uintptr](ctx, selfPtr.API, ret)
}

func (self StringName) ToAsciiBuffer(ctx Context) PackedByteArray {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.StringName.to_ascii_buffer(abi.Get(0), abi.Get(1), abi.Back(), 0)
	var ret = frameGet[[2]uintptr](abi)
	abi.free()
	return mmm.Make[API, PackedByteArray, [2]uintptr](ctx, selfPtr.API, ret)
}

func (self StringName) ToUtf8Buffer(ctx Context) PackedByteArray {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.StringName.to_utf8_buffer(abi.Get(0), abi.Get(1), abi.Back(), 0)
	var ret = frameGet[[2]uintptr](abi)
	abi.free()
	return mmm.Make[API, PackedByteArray, [2]uintptr](ctx, selfPtr.API, ret)
}

func (self StringName) ToUtf16Buffer(ctx Context) PackedByteArray {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.StringName.to_utf16_buffer(abi.Get(0), abi.Get(1), abi.Back(), 0)
	var ret = frameGet[[2]uintptr](abi)
	abi.free()
	return mmm.Make[API, PackedByteArray, [2]uintptr](ctx, selfPtr.API, ret)
}

func (self StringName) ToUtf32Buffer(ctx Context) PackedByteArray {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.StringName.to_utf32_buffer(abi.Get(0), abi.Get(1), abi.Back(), 0)
	var ret = frameGet[[2]uintptr](abi)
	abi.free()
	return mmm.Make[API, PackedByteArray, [2]uintptr](ctx, selfPtr.API, ret)
}

func (self StringName) HexDecode(ctx Context) PackedByteArray {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.StringName.hex_decode(abi.Get(0), abi.Get(1), abi.Back(), 0)
	var ret = frameGet[[2]uintptr](abi)
	abi.free()
	return mmm.Make[API, PackedByteArray, [2]uintptr](ctx, selfPtr.API, ret)
}

func (self StringName) ToWcharBuffer(ctx Context) PackedByteArray {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.StringName.to_wchar_buffer(abi.Get(0), abi.Get(1), abi.Back(), 0)
	var ret = frameGet[[2]uintptr](abi)
	abi.free()
	return mmm.Make[API, PackedByteArray, [2]uintptr](ctx, selfPtr.API, ret)
}

func (self StringName) Hash() Int {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.StringName.hash(abi.Get(0), abi.Get(1), abi.Back(), 0)
	var ret = frameGet[Int](abi)
	abi.free()
	return ret
}

func (self NodePath) IsAbsolute() bool {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.NodePath.is_absolute(abi.Get(0), abi.Get(1), abi.Back(), 0)
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self NodePath) GetNameCount() Int {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.NodePath.get_name_count(abi.Get(0), abi.Get(1), abi.Back(), 0)
	var ret = frameGet[Int](abi)
	abi.free()
	return ret
}

func (self NodePath) GetName(ctx Context, idx Int) StringName {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet[Int](1, abi, idx)
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.NodePath.get_name(abi.Get(0), abi.Get(1), abi.Back(), 1)
	var ret = frameGet[uintptr](abi)
	abi.free()
	return mmm.Make[API, StringName, uintptr](ctx, selfPtr.API, ret)
}

func (self NodePath) GetSubnameCount() Int {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.NodePath.get_subname_count(abi.Get(0), abi.Get(1), abi.Back(), 0)
	var ret = frameGet[Int](abi)
	abi.free()
	return ret
}

func (self NodePath) Hash() Int {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.NodePath.hash(abi.Get(0), abi.Get(1), abi.Back(), 0)
	var ret = frameGet[Int](abi)
	abi.free()
	return ret
}

func (self NodePath) GetSubname(ctx Context, idx Int) StringName {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet[Int](1, abi, idx)
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.NodePath.get_subname(abi.Get(0), abi.Get(1), abi.Back(), 1)
	var ret = frameGet[uintptr](abi)
	abi.free()
	return mmm.Make[API, StringName, uintptr](ctx, selfPtr.API, ret)
}

func (self NodePath) GetConcatenatedNames(ctx Context) StringName {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.NodePath.get_concatenated_names(abi.Get(0), abi.Get(1), abi.Back(), 0)
	var ret = frameGet[uintptr](abi)
	abi.free()
	return mmm.Make[API, StringName, uintptr](ctx, selfPtr.API, ret)
}

func (self NodePath) GetConcatenatedSubnames(ctx Context) StringName {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.NodePath.get_concatenated_subnames(abi.Get(0), abi.Get(1), abi.Back(), 0)
	var ret = frameGet[uintptr](abi)
	abi.free()
	return mmm.Make[API, StringName, uintptr](ctx, selfPtr.API, ret)
}

func (self NodePath) GetAsPropertyPath(ctx Context) NodePath {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.NodePath.get_as_property_path(abi.Get(0), abi.Get(1), abi.Back(), 0)
	var ret = frameGet[uintptr](abi)
	abi.free()
	return mmm.Make[API, NodePath, uintptr](ctx, selfPtr.API, ret)
}

func (self NodePath) IsEmpty() bool {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.NodePath.is_empty(abi.Get(0), abi.Get(1), abi.Back(), 0)
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self Callable) Callv(ctx Context, arguments Array) Variant {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet[Array](1, abi, arguments)
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.Callable.callv(abi.Get(0), abi.Get(1), abi.Back(), 1)
	var ret = frameGet[[3]uintptr](abi)
	abi.free()
	return mmm.Make[API, Variant, [3]uintptr](ctx, selfPtr.API, ret)
}

func (self Callable) IsNull() bool {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.Callable.is_null(abi.Get(0), abi.Get(1), abi.Back(), 0)
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self Callable) IsCustom() bool {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.Callable.is_custom(abi.Get(0), abi.Get(1), abi.Back(), 0)
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self Callable) IsStandard() bool {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.Callable.is_standard(abi.Get(0), abi.Get(1), abi.Back(), 0)
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self Callable) IsValid() bool {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.Callable.is_valid(abi.Get(0), abi.Get(1), abi.Back(), 0)
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self Callable) GetObject() Object {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.Callable.get_object(abi.Get(0), abi.Get(1), abi.Back(), 0)
	var ret = frameGet[Object](abi)
	abi.free()
	return ret
}

func (self Callable) GetObjectId() Int {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.Callable.get_object_id(abi.Get(0), abi.Get(1), abi.Back(), 0)
	var ret = frameGet[Int](abi)
	abi.free()
	return ret
}

func (self Callable) GetMethod(ctx Context) StringName {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.Callable.get_method(abi.Get(0), abi.Get(1), abi.Back(), 0)
	var ret = frameGet[uintptr](abi)
	abi.free()
	return mmm.Make[API, StringName, uintptr](ctx, selfPtr.API, ret)
}

func (self Callable) GetBoundArgumentsCount() Int {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.Callable.get_bound_arguments_count(abi.Get(0), abi.Get(1), abi.Back(), 0)
	var ret = frameGet[Int](abi)
	abi.free()
	return ret
}

func (self Callable) GetBoundArguments(ctx Context) Array {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.Callable.get_bound_arguments(abi.Get(0), abi.Get(1), abi.Back(), 0)
	var ret = frameGet[uintptr](abi)
	abi.free()
	return mmm.Make[API, Array, uintptr](ctx, selfPtr.API, ret)
}

func (self Callable) Hash() Int {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.Callable.hash(abi.Get(0), abi.Get(1), abi.Back(), 0)
	var ret = frameGet[Int](abi)
	abi.free()
	return ret
}

func (self Callable) Bindv(ctx Context, arguments Array) Callable {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet[Array](1, abi, arguments)
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.Callable.bindv(abi.Get(0), abi.Get(1), abi.Back(), 1)
	var ret = frameGet[[2]uintptr](abi)
	abi.free()
	return mmm.Make[API, Callable, [2]uintptr](ctx, selfPtr.API, ret)
}

func (self Callable) Unbind(ctx Context, argcount Int) Callable {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet[Int](1, abi, argcount)
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.Callable.unbind(abi.Get(0), abi.Get(1), abi.Back(), 1)
	var ret = frameGet[[2]uintptr](abi)
	abi.free()
	return mmm.Make[API, Callable, [2]uintptr](ctx, selfPtr.API, ret)
}

func (self Callable) Call(ctx Context) Variant {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.Callable.call(abi.Get(0), abi.Get(1), abi.Back(), 0)
	var ret = frameGet[[3]uintptr](abi)
	abi.free()
	return mmm.Make[API, Variant, [3]uintptr](ctx, selfPtr.API, ret)
}

func (self Callable) CallDeferred() {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.Callable.call_deferred(abi.Get(0), abi.Get(1), abi.Back(), 0)
	abi.free()
}

func (self Callable) Rpc() {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.Callable.rpc(abi.Get(0), abi.Get(1), abi.Back(), 0)
	abi.free()
}

func (self Callable) RpcId(peer_id Int) {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet[Int](1, abi, peer_id)
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.Callable.rpc_id(abi.Get(0), abi.Get(1), abi.Back(), 1)
	abi.free()
}

func (self Callable) Bind(ctx Context) Callable {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.Callable.bind(abi.Get(0), abi.Get(1), abi.Back(), 0)
	var ret = frameGet[[2]uintptr](abi)
	abi.free()
	return mmm.Make[API, Callable, [2]uintptr](ctx, selfPtr.API, ret)
}

func (self Signal) IsNull() bool {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.Signal.is_null(abi.Get(0), abi.Get(1), abi.Back(), 0)
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self Signal) GetObject() Object {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.Signal.get_object(abi.Get(0), abi.Get(1), abi.Back(), 0)
	var ret = frameGet[Object](abi)
	abi.free()
	return ret
}

func (self Signal) GetObjectId() Int {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.Signal.get_object_id(abi.Get(0), abi.Get(1), abi.Back(), 0)
	var ret = frameGet[Int](abi)
	abi.free()
	return ret
}

func (self Signal) GetName(ctx Context) StringName {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.Signal.get_name(abi.Get(0), abi.Get(1), abi.Back(), 0)
	var ret = frameGet[uintptr](abi)
	abi.free()
	return mmm.Make[API, StringName, uintptr](ctx, selfPtr.API, ret)
}

func (self Signal) Connect(callable Callable, flags Int) Int {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet[Callable](1, abi, callable)
	frameSet[Int](2, abi, flags)
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.Signal.connect(abi.Get(0), abi.Get(1), abi.Back(), 2)
	var ret = frameGet[Int](abi)
	abi.free()
	return ret
}

func (self Signal) Disconnect(callable Callable) {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet[Callable](1, abi, callable)
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.Signal.disconnect(abi.Get(0), abi.Get(1), abi.Back(), 1)
	abi.free()
}

func (self Signal) IsConnected(callable Callable) bool {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet[Callable](1, abi, callable)
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.Signal.is_connected(abi.Get(0), abi.Get(1), abi.Back(), 1)
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self Signal) GetConnections(ctx Context) Array {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.Signal.get_connections(abi.Get(0), abi.Get(1), abi.Back(), 0)
	var ret = frameGet[uintptr](abi)
	abi.free()
	return mmm.Make[API, Array, uintptr](ctx, selfPtr.API, ret)
}

func (self Signal) Emit() {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.Signal.emit(abi.Get(0), abi.Get(1), abi.Back(), 0)
	abi.free()
}

func (self Dictionary) Size() Int {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.Dictionary.size(abi.Get(0), abi.Get(1), abi.Back(), 0)
	var ret = frameGet[Int](abi)
	abi.free()
	return ret
}

func (self Dictionary) IsEmpty() bool {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.Dictionary.is_empty(abi.Get(0), abi.Get(1), abi.Back(), 0)
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self Dictionary) Clear() {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.Dictionary.clear(abi.Get(0), abi.Get(1), abi.Back(), 0)
	abi.free()
}

func (self Dictionary) Merge(dictionary Dictionary, overwrite bool) {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet[Dictionary](1, abi, dictionary)
	frameSet[bool](2, abi, overwrite)
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.Dictionary.merge(abi.Get(0), abi.Get(1), abi.Back(), 2)
	abi.free()
}

func (self Dictionary) Has(key Variant) bool {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet[Variant](1, abi, key)
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.Dictionary.has(abi.Get(0), abi.Get(1), abi.Back(), 1)
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self Dictionary) HasAll(keys Array) bool {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet[Array](1, abi, keys)
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.Dictionary.has_all(abi.Get(0), abi.Get(1), abi.Back(), 1)
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self Dictionary) FindKey(ctx Context, value Variant) Variant {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet[Variant](1, abi, value)
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.Dictionary.find_key(abi.Get(0), abi.Get(1), abi.Back(), 1)
	var ret = frameGet[[3]uintptr](abi)
	abi.free()
	return mmm.Make[API, Variant, [3]uintptr](ctx, selfPtr.API, ret)
}

func (self Dictionary) Erase(key Variant) bool {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet[Variant](1, abi, key)
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.Dictionary.erase(abi.Get(0), abi.Get(1), abi.Back(), 1)
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self Dictionary) Hash() Int {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.Dictionary.hash(abi.Get(0), abi.Get(1), abi.Back(), 0)
	var ret = frameGet[Int](abi)
	abi.free()
	return ret
}

func (self Dictionary) Keys(ctx Context) Array {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.Dictionary.keys(abi.Get(0), abi.Get(1), abi.Back(), 0)
	var ret = frameGet[uintptr](abi)
	abi.free()
	return mmm.Make[API, Array, uintptr](ctx, selfPtr.API, ret)
}

func (self Dictionary) Values(ctx Context) Array {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.Dictionary.values(abi.Get(0), abi.Get(1), abi.Back(), 0)
	var ret = frameGet[uintptr](abi)
	abi.free()
	return mmm.Make[API, Array, uintptr](ctx, selfPtr.API, ret)
}

func (self Dictionary) Duplicate(ctx Context, deep bool) Dictionary {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet[bool](1, abi, deep)
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.Dictionary.duplicate(abi.Get(0), abi.Get(1), abi.Back(), 1)
	var ret = frameGet[uintptr](abi)
	abi.free()
	return mmm.Make[API, Dictionary, uintptr](ctx, selfPtr.API, ret)
}

func (self Dictionary) Get(ctx Context, key Variant, def Variant) Variant {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet[Variant](1, abi, key)
	frameSet[Variant](2, abi, def)
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.Dictionary.get(abi.Get(0), abi.Get(1), abi.Back(), 2)
	var ret = frameGet[[3]uintptr](abi)
	abi.free()
	return mmm.Make[API, Variant, [3]uintptr](ctx, selfPtr.API, ret)
}

func (self Dictionary) MakeReadOnly() {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.Dictionary.make_read_only(abi.Get(0), abi.Get(1), abi.Back(), 0)
	abi.free()
}

func (self Dictionary) IsReadOnly() bool {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.Dictionary.is_read_only(abi.Get(0), abi.Get(1), abi.Back(), 0)
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self Array) Size() Int {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.Array.size(abi.Get(0), abi.Get(1), abi.Back(), 0)
	var ret = frameGet[Int](abi)
	abi.free()
	return ret
}

func (self Array) IsEmpty() bool {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.Array.is_empty(abi.Get(0), abi.Get(1), abi.Back(), 0)
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self Array) Clear() {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.Array.clear(abi.Get(0), abi.Get(1), abi.Back(), 0)
	abi.free()
}

func (self Array) Hash() Int {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.Array.hash(abi.Get(0), abi.Get(1), abi.Back(), 0)
	var ret = frameGet[Int](abi)
	abi.free()
	return ret
}

func (self Array) Assign(array Array) {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet[Array](1, abi, array)
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.Array.assign(abi.Get(0), abi.Get(1), abi.Back(), 1)
	abi.free()
}

func (self Array) PushBack(value Variant) {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet[Variant](1, abi, value)
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.Array.push_back(abi.Get(0), abi.Get(1), abi.Back(), 1)
	abi.free()
}

func (self Array) PushFront(value Variant) {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet[Variant](1, abi, value)
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.Array.push_front(abi.Get(0), abi.Get(1), abi.Back(), 1)
	abi.free()
}

func (self Array) Append(value Variant) {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet[Variant](1, abi, value)
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.Array.append(abi.Get(0), abi.Get(1), abi.Back(), 1)
	abi.free()
}

func (self Array) AppendArray(array Array) {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet[Array](1, abi, array)
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.Array.append_array(abi.Get(0), abi.Get(1), abi.Back(), 1)
	abi.free()
}

func (self Array) Resize(size Int) Int {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet[Int](1, abi, size)
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.Array.resize(abi.Get(0), abi.Get(1), abi.Back(), 1)
	var ret = frameGet[Int](abi)
	abi.free()
	return ret
}

func (self Array) Insert(position Int, value Variant) Int {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet[Int](1, abi, position)
	frameSet[Variant](2, abi, value)
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.Array.insert(abi.Get(0), abi.Get(1), abi.Back(), 2)
	var ret = frameGet[Int](abi)
	abi.free()
	return ret
}

func (self Array) RemoveAt(position Int) {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet[Int](1, abi, position)
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.Array.remove_at(abi.Get(0), abi.Get(1), abi.Back(), 1)
	abi.free()
}

func (self Array) Fill(value Variant) {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet[Variant](1, abi, value)
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.Array.fill(abi.Get(0), abi.Get(1), abi.Back(), 1)
	abi.free()
}

func (self Array) Erase(value Variant) {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet[Variant](1, abi, value)
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.Array.erase(abi.Get(0), abi.Get(1), abi.Back(), 1)
	abi.free()
}

func (self Array) Front(ctx Context) Variant {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.Array.front(abi.Get(0), abi.Get(1), abi.Back(), 0)
	var ret = frameGet[[3]uintptr](abi)
	abi.free()
	return mmm.Make[API, Variant, [3]uintptr](ctx, selfPtr.API, ret)
}

func (self Array) Back(ctx Context) Variant {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.Array.back(abi.Get(0), abi.Get(1), abi.Back(), 0)
	var ret = frameGet[[3]uintptr](abi)
	abi.free()
	return mmm.Make[API, Variant, [3]uintptr](ctx, selfPtr.API, ret)
}

func (self Array) PickRandom(ctx Context) Variant {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.Array.pick_random(abi.Get(0), abi.Get(1), abi.Back(), 0)
	var ret = frameGet[[3]uintptr](abi)
	abi.free()
	return mmm.Make[API, Variant, [3]uintptr](ctx, selfPtr.API, ret)
}

func (self Array) Find(what Variant, from Int) Int {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet[Variant](1, abi, what)
	frameSet[Int](2, abi, from)
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.Array.find(abi.Get(0), abi.Get(1), abi.Back(), 2)
	var ret = frameGet[Int](abi)
	abi.free()
	return ret
}

func (self Array) Rfind(what Variant, from Int) Int {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet[Variant](1, abi, what)
	frameSet[Int](2, abi, from)
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.Array.rfind(abi.Get(0), abi.Get(1), abi.Back(), 2)
	var ret = frameGet[Int](abi)
	abi.free()
	return ret
}

func (self Array) Count(value Variant) Int {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet[Variant](1, abi, value)
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.Array.count(abi.Get(0), abi.Get(1), abi.Back(), 1)
	var ret = frameGet[Int](abi)
	abi.free()
	return ret
}

func (self Array) Has(value Variant) bool {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet[Variant](1, abi, value)
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.Array.has(abi.Get(0), abi.Get(1), abi.Back(), 1)
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self Array) PopBack(ctx Context) Variant {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.Array.pop_back(abi.Get(0), abi.Get(1), abi.Back(), 0)
	var ret = frameGet[[3]uintptr](abi)
	abi.free()
	return mmm.Make[API, Variant, [3]uintptr](ctx, selfPtr.API, ret)
}

func (self Array) PopFront(ctx Context) Variant {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.Array.pop_front(abi.Get(0), abi.Get(1), abi.Back(), 0)
	var ret = frameGet[[3]uintptr](abi)
	abi.free()
	return mmm.Make[API, Variant, [3]uintptr](ctx, selfPtr.API, ret)
}

func (self Array) PopAt(ctx Context, position Int) Variant {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet[Int](1, abi, position)
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.Array.pop_at(abi.Get(0), abi.Get(1), abi.Back(), 1)
	var ret = frameGet[[3]uintptr](abi)
	abi.free()
	return mmm.Make[API, Variant, [3]uintptr](ctx, selfPtr.API, ret)
}

func (self Array) Sort() {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.Array.sort(abi.Get(0), abi.Get(1), abi.Back(), 0)
	abi.free()
}

func (self Array) SortCustom(fn Callable) {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet[Callable](1, abi, fn)
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.Array.sort_custom(abi.Get(0), abi.Get(1), abi.Back(), 1)
	abi.free()
}

func (self Array) Shuffle() {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.Array.shuffle(abi.Get(0), abi.Get(1), abi.Back(), 0)
	abi.free()
}

func (self Array) Bsearch(value Variant, before bool) Int {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet[Variant](1, abi, value)
	frameSet[bool](2, abi, before)
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.Array.bsearch(abi.Get(0), abi.Get(1), abi.Back(), 2)
	var ret = frameGet[Int](abi)
	abi.free()
	return ret
}

func (self Array) BsearchCustom(value Variant, fn Callable, before bool) Int {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet[Variant](1, abi, value)
	frameSet[Callable](2, abi, fn)
	frameSet[bool](3, abi, before)
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.Array.bsearch_custom(abi.Get(0), abi.Get(1), abi.Back(), 3)
	var ret = frameGet[Int](abi)
	abi.free()
	return ret
}

func (self Array) Reverse() {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.Array.reverse(abi.Get(0), abi.Get(1), abi.Back(), 0)
	abi.free()
}

func (self Array) Duplicate(ctx Context, deep bool) Array {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet[bool](1, abi, deep)
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.Array.duplicate(abi.Get(0), abi.Get(1), abi.Back(), 1)
	var ret = frameGet[uintptr](abi)
	abi.free()
	return mmm.Make[API, Array, uintptr](ctx, selfPtr.API, ret)
}

func (self Array) Slice(ctx Context, begin Int, end Int, step Int, deep bool) Array {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet[Int](1, abi, begin)
	frameSet[Int](2, abi, end)
	frameSet[Int](3, abi, step)
	frameSet[bool](4, abi, deep)
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.Array.slice(abi.Get(0), abi.Get(1), abi.Back(), 4)
	var ret = frameGet[uintptr](abi)
	abi.free()
	return mmm.Make[API, Array, uintptr](ctx, selfPtr.API, ret)
}

func (self Array) Filter(ctx Context, method Callable) Array {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet[Callable](1, abi, method)
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.Array.filter(abi.Get(0), abi.Get(1), abi.Back(), 1)
	var ret = frameGet[uintptr](abi)
	abi.free()
	return mmm.Make[API, Array, uintptr](ctx, selfPtr.API, ret)
}

func (self Array) Map(ctx Context, method Callable) Array {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet[Callable](1, abi, method)
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.Array.map_(abi.Get(0), abi.Get(1), abi.Back(), 1)
	var ret = frameGet[uintptr](abi)
	abi.free()
	return mmm.Make[API, Array, uintptr](ctx, selfPtr.API, ret)
}

func (self Array) Reduce(ctx Context, method Callable, accum Variant) Variant {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet[Callable](1, abi, method)
	frameSet[Variant](2, abi, accum)
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.Array.reduce(abi.Get(0), abi.Get(1), abi.Back(), 2)
	var ret = frameGet[[3]uintptr](abi)
	abi.free()
	return mmm.Make[API, Variant, [3]uintptr](ctx, selfPtr.API, ret)
}

func (self Array) Any(method Callable) bool {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet[Callable](1, abi, method)
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.Array.any(abi.Get(0), abi.Get(1), abi.Back(), 1)
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self Array) All(method Callable) bool {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet[Callable](1, abi, method)
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.Array.all(abi.Get(0), abi.Get(1), abi.Back(), 1)
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self Array) Max(ctx Context) Variant {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.Array.max(abi.Get(0), abi.Get(1), abi.Back(), 0)
	var ret = frameGet[[3]uintptr](abi)
	abi.free()
	return mmm.Make[API, Variant, [3]uintptr](ctx, selfPtr.API, ret)
}

func (self Array) Min(ctx Context) Variant {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.Array.min(abi.Get(0), abi.Get(1), abi.Back(), 0)
	var ret = frameGet[[3]uintptr](abi)
	abi.free()
	return mmm.Make[API, Variant, [3]uintptr](ctx, selfPtr.API, ret)
}

func (self Array) IsTyped() bool {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.Array.is_typed(abi.Get(0), abi.Get(1), abi.Back(), 0)
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self Array) IsSameTyped(array Array) bool {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet[Array](1, abi, array)
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.Array.is_same_typed(abi.Get(0), abi.Get(1), abi.Back(), 1)
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self Array) GetTypedBuiltin() Int {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.Array.get_typed_builtin(abi.Get(0), abi.Get(1), abi.Back(), 0)
	var ret = frameGet[Int](abi)
	abi.free()
	return ret
}

func (self Array) GetTypedClassName(ctx Context) StringName {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.Array.get_typed_class_name(abi.Get(0), abi.Get(1), abi.Back(), 0)
	var ret = frameGet[uintptr](abi)
	abi.free()
	return mmm.Make[API, StringName, uintptr](ctx, selfPtr.API, ret)
}

func (self Array) GetTypedScript(ctx Context) Variant {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.Array.get_typed_script(abi.Get(0), abi.Get(1), abi.Back(), 0)
	var ret = frameGet[[3]uintptr](abi)
	abi.free()
	return mmm.Make[API, Variant, [3]uintptr](ctx, selfPtr.API, ret)
}

func (self Array) MakeReadOnly() {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.Array.make_read_only(abi.Get(0), abi.Get(1), abi.Back(), 0)
	abi.free()
}

func (self Array) IsReadOnly() bool {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.Array.is_read_only(abi.Get(0), abi.Get(1), abi.Back(), 0)
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self PackedByteArray) Size() Int {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.PackedByteArray.size(abi.Get(0), abi.Get(1), abi.Back(), 0)
	var ret = frameGet[Int](abi)
	abi.free()
	return ret
}

func (self PackedByteArray) IsEmpty() bool {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.PackedByteArray.is_empty(abi.Get(0), abi.Get(1), abi.Back(), 0)
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self PackedByteArray) Set(index Int, value Int) {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet[Int](1, abi, index)
	frameSet[Int](2, abi, value)
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.PackedByteArray.set(abi.Get(0), abi.Get(1), abi.Back(), 2)
	abi.free()
}

func (self PackedByteArray) PushBack(value Int) bool {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet[Int](1, abi, value)
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.PackedByteArray.push_back(abi.Get(0), abi.Get(1), abi.Back(), 1)
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self PackedByteArray) Append(value Int) bool {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet[Int](1, abi, value)
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.PackedByteArray.append(abi.Get(0), abi.Get(1), abi.Back(), 1)
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self PackedByteArray) AppendArray(array PackedByteArray) {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet[PackedByteArray](1, abi, array)
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.PackedByteArray.append_array(abi.Get(0), abi.Get(1), abi.Back(), 1)
	abi.free()
}

func (self PackedByteArray) RemoveAt(index Int) {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet[Int](1, abi, index)
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.PackedByteArray.remove_at(abi.Get(0), abi.Get(1), abi.Back(), 1)
	abi.free()
}

func (self PackedByteArray) Insert(at_index Int, value Int) Int {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet[Int](1, abi, at_index)
	frameSet[Int](2, abi, value)
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.PackedByteArray.insert(abi.Get(0), abi.Get(1), abi.Back(), 2)
	var ret = frameGet[Int](abi)
	abi.free()
	return ret
}

func (self PackedByteArray) Fill(value Int) {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet[Int](1, abi, value)
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.PackedByteArray.fill(abi.Get(0), abi.Get(1), abi.Back(), 1)
	abi.free()
}

func (self PackedByteArray) Resize(new_size Int) Int {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet[Int](1, abi, new_size)
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.PackedByteArray.resize(abi.Get(0), abi.Get(1), abi.Back(), 1)
	var ret = frameGet[Int](abi)
	abi.free()
	return ret
}

func (self PackedByteArray) Clear() {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.PackedByteArray.clear(abi.Get(0), abi.Get(1), abi.Back(), 0)
	abi.free()
}

func (self PackedByteArray) Has(value Int) bool {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet[Int](1, abi, value)
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.PackedByteArray.has(abi.Get(0), abi.Get(1), abi.Back(), 1)
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self PackedByteArray) Reverse() {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.PackedByteArray.reverse(abi.Get(0), abi.Get(1), abi.Back(), 0)
	abi.free()
}

func (self PackedByteArray) Slice(ctx Context, begin Int, end Int) PackedByteArray {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet[Int](1, abi, begin)
	frameSet[Int](2, abi, end)
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.PackedByteArray.slice(abi.Get(0), abi.Get(1), abi.Back(), 2)
	var ret = frameGet[[2]uintptr](abi)
	abi.free()
	return mmm.Make[API, PackedByteArray, [2]uintptr](ctx, selfPtr.API, ret)
}

func (self PackedByteArray) Sort() {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.PackedByteArray.sort(abi.Get(0), abi.Get(1), abi.Back(), 0)
	abi.free()
}

func (self PackedByteArray) Bsearch(value Int, before bool) Int {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet[Int](1, abi, value)
	frameSet[bool](2, abi, before)
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.PackedByteArray.bsearch(abi.Get(0), abi.Get(1), abi.Back(), 2)
	var ret = frameGet[Int](abi)
	abi.free()
	return ret
}

func (self PackedByteArray) Duplicate(ctx Context) PackedByteArray {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.PackedByteArray.duplicate(abi.Get(0), abi.Get(1), abi.Back(), 0)
	var ret = frameGet[[2]uintptr](abi)
	abi.free()
	return mmm.Make[API, PackedByteArray, [2]uintptr](ctx, selfPtr.API, ret)
}

func (self PackedByteArray) Find(value Int, from Int) Int {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet[Int](1, abi, value)
	frameSet[Int](2, abi, from)
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.PackedByteArray.find(abi.Get(0), abi.Get(1), abi.Back(), 2)
	var ret = frameGet[Int](abi)
	abi.free()
	return ret
}

func (self PackedByteArray) Rfind(value Int, from Int) Int {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet[Int](1, abi, value)
	frameSet[Int](2, abi, from)
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.PackedByteArray.rfind(abi.Get(0), abi.Get(1), abi.Back(), 2)
	var ret = frameGet[Int](abi)
	abi.free()
	return ret
}

func (self PackedByteArray) Count(value Int) Int {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet[Int](1, abi, value)
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.PackedByteArray.count(abi.Get(0), abi.Get(1), abi.Back(), 1)
	var ret = frameGet[Int](abi)
	abi.free()
	return ret
}

func (self PackedByteArray) GetStringFromAscii(ctx Context) String {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.PackedByteArray.get_string_from_ascii(abi.Get(0), abi.Get(1), abi.Back(), 0)
	var ret = frameGet[uintptr](abi)
	abi.free()
	return mmm.Make[API, String, uintptr](ctx, selfPtr.API, ret)
}

func (self PackedByteArray) GetStringFromUtf8(ctx Context) String {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.PackedByteArray.get_string_from_utf8(abi.Get(0), abi.Get(1), abi.Back(), 0)
	var ret = frameGet[uintptr](abi)
	abi.free()
	return mmm.Make[API, String, uintptr](ctx, selfPtr.API, ret)
}

func (self PackedByteArray) GetStringFromUtf16(ctx Context) String {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.PackedByteArray.get_string_from_utf16(abi.Get(0), abi.Get(1), abi.Back(), 0)
	var ret = frameGet[uintptr](abi)
	abi.free()
	return mmm.Make[API, String, uintptr](ctx, selfPtr.API, ret)
}

func (self PackedByteArray) GetStringFromUtf32(ctx Context) String {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.PackedByteArray.get_string_from_utf32(abi.Get(0), abi.Get(1), abi.Back(), 0)
	var ret = frameGet[uintptr](abi)
	abi.free()
	return mmm.Make[API, String, uintptr](ctx, selfPtr.API, ret)
}

func (self PackedByteArray) GetStringFromWchar(ctx Context) String {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.PackedByteArray.get_string_from_wchar(abi.Get(0), abi.Get(1), abi.Back(), 0)
	var ret = frameGet[uintptr](abi)
	abi.free()
	return mmm.Make[API, String, uintptr](ctx, selfPtr.API, ret)
}

func (self PackedByteArray) HexEncode(ctx Context) String {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.PackedByteArray.hex_encode(abi.Get(0), abi.Get(1), abi.Back(), 0)
	var ret = frameGet[uintptr](abi)
	abi.free()
	return mmm.Make[API, String, uintptr](ctx, selfPtr.API, ret)
}

func (self PackedByteArray) Compress(ctx Context, compression_mode Int) PackedByteArray {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet[Int](1, abi, compression_mode)
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.PackedByteArray.compress(abi.Get(0), abi.Get(1), abi.Back(), 1)
	var ret = frameGet[[2]uintptr](abi)
	abi.free()
	return mmm.Make[API, PackedByteArray, [2]uintptr](ctx, selfPtr.API, ret)
}

func (self PackedByteArray) Decompress(ctx Context, buffer_size Int, compression_mode Int) PackedByteArray {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet[Int](1, abi, buffer_size)
	frameSet[Int](2, abi, compression_mode)
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.PackedByteArray.decompress(abi.Get(0), abi.Get(1), abi.Back(), 2)
	var ret = frameGet[[2]uintptr](abi)
	abi.free()
	return mmm.Make[API, PackedByteArray, [2]uintptr](ctx, selfPtr.API, ret)
}

func (self PackedByteArray) DecompressDynamic(ctx Context, max_output_size Int, compression_mode Int) PackedByteArray {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet[Int](1, abi, max_output_size)
	frameSet[Int](2, abi, compression_mode)
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.PackedByteArray.decompress_dynamic(abi.Get(0), abi.Get(1), abi.Back(), 2)
	var ret = frameGet[[2]uintptr](abi)
	abi.free()
	return mmm.Make[API, PackedByteArray, [2]uintptr](ctx, selfPtr.API, ret)
}

func (self PackedByteArray) DecodeU8(byte_offset Int) Int {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet[Int](1, abi, byte_offset)
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.PackedByteArray.decode_u8(abi.Get(0), abi.Get(1), abi.Back(), 1)
	var ret = frameGet[Int](abi)
	abi.free()
	return ret
}

func (self PackedByteArray) DecodeS8(byte_offset Int) Int {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet[Int](1, abi, byte_offset)
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.PackedByteArray.decode_s8(abi.Get(0), abi.Get(1), abi.Back(), 1)
	var ret = frameGet[Int](abi)
	abi.free()
	return ret
}

func (self PackedByteArray) DecodeU16(byte_offset Int) Int {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet[Int](1, abi, byte_offset)
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.PackedByteArray.decode_u16(abi.Get(0), abi.Get(1), abi.Back(), 1)
	var ret = frameGet[Int](abi)
	abi.free()
	return ret
}

func (self PackedByteArray) DecodeS16(byte_offset Int) Int {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet[Int](1, abi, byte_offset)
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.PackedByteArray.decode_s16(abi.Get(0), abi.Get(1), abi.Back(), 1)
	var ret = frameGet[Int](abi)
	abi.free()
	return ret
}

func (self PackedByteArray) DecodeU32(byte_offset Int) Int {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet[Int](1, abi, byte_offset)
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.PackedByteArray.decode_u32(abi.Get(0), abi.Get(1), abi.Back(), 1)
	var ret = frameGet[Int](abi)
	abi.free()
	return ret
}

func (self PackedByteArray) DecodeS32(byte_offset Int) Int {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet[Int](1, abi, byte_offset)
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.PackedByteArray.decode_s32(abi.Get(0), abi.Get(1), abi.Back(), 1)
	var ret = frameGet[Int](abi)
	abi.free()
	return ret
}

func (self PackedByteArray) DecodeU64(byte_offset Int) Int {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet[Int](1, abi, byte_offset)
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.PackedByteArray.decode_u64(abi.Get(0), abi.Get(1), abi.Back(), 1)
	var ret = frameGet[Int](abi)
	abi.free()
	return ret
}

func (self PackedByteArray) DecodeS64(byte_offset Int) Int {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet[Int](1, abi, byte_offset)
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.PackedByteArray.decode_s64(abi.Get(0), abi.Get(1), abi.Back(), 1)
	var ret = frameGet[Int](abi)
	abi.free()
	return ret
}

func (self PackedByteArray) DecodeHalf(byte_offset Int) Float {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet[Int](1, abi, byte_offset)
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.PackedByteArray.decode_half(abi.Get(0), abi.Get(1), abi.Back(), 1)
	var ret = frameGet[Float](abi)
	abi.free()
	return ret
}

func (self PackedByteArray) DecodeFloat(byte_offset Int) Float {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet[Int](1, abi, byte_offset)
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.PackedByteArray.decode_float(abi.Get(0), abi.Get(1), abi.Back(), 1)
	var ret = frameGet[Float](abi)
	abi.free()
	return ret
}

func (self PackedByteArray) DecodeDouble(byte_offset Int) Float {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet[Int](1, abi, byte_offset)
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.PackedByteArray.decode_double(abi.Get(0), abi.Get(1), abi.Back(), 1)
	var ret = frameGet[Float](abi)
	abi.free()
	return ret
}

func (self PackedByteArray) HasEncodedVar(byte_offset Int, allow_objects bool) bool {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet[Int](1, abi, byte_offset)
	frameSet[bool](2, abi, allow_objects)
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.PackedByteArray.has_encoded_var(abi.Get(0), abi.Get(1), abi.Back(), 2)
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self PackedByteArray) DecodeVar(ctx Context, byte_offset Int, allow_objects bool) Variant {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet[Int](1, abi, byte_offset)
	frameSet[bool](2, abi, allow_objects)
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.PackedByteArray.decode_var(abi.Get(0), abi.Get(1), abi.Back(), 2)
	var ret = frameGet[[3]uintptr](abi)
	abi.free()
	return mmm.Make[API, Variant, [3]uintptr](ctx, selfPtr.API, ret)
}

func (self PackedByteArray) DecodeVarSize(byte_offset Int, allow_objects bool) Int {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet[Int](1, abi, byte_offset)
	frameSet[bool](2, abi, allow_objects)
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.PackedByteArray.decode_var_size(abi.Get(0), abi.Get(1), abi.Back(), 2)
	var ret = frameGet[Int](abi)
	abi.free()
	return ret
}

func (self PackedByteArray) ToInt32Array(ctx Context) PackedInt32Array {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.PackedByteArray.to_int32_array(abi.Get(0), abi.Get(1), abi.Back(), 0)
	var ret = frameGet[[2]uintptr](abi)
	abi.free()
	return mmm.Make[API, PackedInt32Array, [2]uintptr](ctx, selfPtr.API, ret)
}

func (self PackedByteArray) ToInt64Array(ctx Context) PackedInt64Array {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.PackedByteArray.to_int64_array(abi.Get(0), abi.Get(1), abi.Back(), 0)
	var ret = frameGet[[2]uintptr](abi)
	abi.free()
	return mmm.Make[API, PackedInt64Array, [2]uintptr](ctx, selfPtr.API, ret)
}

func (self PackedByteArray) ToFloat32Array(ctx Context) PackedFloat32Array {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.PackedByteArray.to_float32_array(abi.Get(0), abi.Get(1), abi.Back(), 0)
	var ret = frameGet[[2]uintptr](abi)
	abi.free()
	return mmm.Make[API, PackedFloat32Array, [2]uintptr](ctx, selfPtr.API, ret)
}

func (self PackedByteArray) ToFloat64Array(ctx Context) PackedFloat64Array {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.PackedByteArray.to_float64_array(abi.Get(0), abi.Get(1), abi.Back(), 0)
	var ret = frameGet[[2]uintptr](abi)
	abi.free()
	return mmm.Make[API, PackedFloat64Array, [2]uintptr](ctx, selfPtr.API, ret)
}

func (self PackedByteArray) EncodeU8(byte_offset Int, value Int) {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet[Int](1, abi, byte_offset)
	frameSet[Int](2, abi, value)
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.PackedByteArray.encode_u8(abi.Get(0), abi.Get(1), abi.Back(), 2)
	abi.free()
}

func (self PackedByteArray) EncodeS8(byte_offset Int, value Int) {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet[Int](1, abi, byte_offset)
	frameSet[Int](2, abi, value)
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.PackedByteArray.encode_s8(abi.Get(0), abi.Get(1), abi.Back(), 2)
	abi.free()
}

func (self PackedByteArray) EncodeU16(byte_offset Int, value Int) {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet[Int](1, abi, byte_offset)
	frameSet[Int](2, abi, value)
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.PackedByteArray.encode_u16(abi.Get(0), abi.Get(1), abi.Back(), 2)
	abi.free()
}

func (self PackedByteArray) EncodeS16(byte_offset Int, value Int) {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet[Int](1, abi, byte_offset)
	frameSet[Int](2, abi, value)
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.PackedByteArray.encode_s16(abi.Get(0), abi.Get(1), abi.Back(), 2)
	abi.free()
}

func (self PackedByteArray) EncodeU32(byte_offset Int, value Int) {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet[Int](1, abi, byte_offset)
	frameSet[Int](2, abi, value)
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.PackedByteArray.encode_u32(abi.Get(0), abi.Get(1), abi.Back(), 2)
	abi.free()
}

func (self PackedByteArray) EncodeS32(byte_offset Int, value Int) {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet[Int](1, abi, byte_offset)
	frameSet[Int](2, abi, value)
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.PackedByteArray.encode_s32(abi.Get(0), abi.Get(1), abi.Back(), 2)
	abi.free()
}

func (self PackedByteArray) EncodeU64(byte_offset Int, value Int) {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet[Int](1, abi, byte_offset)
	frameSet[Int](2, abi, value)
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.PackedByteArray.encode_u64(abi.Get(0), abi.Get(1), abi.Back(), 2)
	abi.free()
}

func (self PackedByteArray) EncodeS64(byte_offset Int, value Int) {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet[Int](1, abi, byte_offset)
	frameSet[Int](2, abi, value)
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.PackedByteArray.encode_s64(abi.Get(0), abi.Get(1), abi.Back(), 2)
	abi.free()
}

func (self PackedByteArray) EncodeHalf(byte_offset Int, value Float) {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet[Int](1, abi, byte_offset)
	frameSet[Float](2, abi, value)
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.PackedByteArray.encode_half(abi.Get(0), abi.Get(1), abi.Back(), 2)
	abi.free()
}

func (self PackedByteArray) EncodeFloat(byte_offset Int, value Float) {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet[Int](1, abi, byte_offset)
	frameSet[Float](2, abi, value)
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.PackedByteArray.encode_float(abi.Get(0), abi.Get(1), abi.Back(), 2)
	abi.free()
}

func (self PackedByteArray) EncodeDouble(byte_offset Int, value Float) {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet[Int](1, abi, byte_offset)
	frameSet[Float](2, abi, value)
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.PackedByteArray.encode_double(abi.Get(0), abi.Get(1), abi.Back(), 2)
	abi.free()
}

func (self PackedByteArray) EncodeVar(byte_offset Int, value Variant, allow_objects bool) Int {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet[Int](1, abi, byte_offset)
	frameSet[Variant](2, abi, value)
	frameSet[bool](3, abi, allow_objects)
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.PackedByteArray.encode_var(abi.Get(0), abi.Get(1), abi.Back(), 3)
	var ret = frameGet[Int](abi)
	abi.free()
	return ret
}

func (self PackedInt32Array) Size() Int {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.PackedInt32Array.size(abi.Get(0), abi.Get(1), abi.Back(), 0)
	var ret = frameGet[Int](abi)
	abi.free()
	return ret
}

func (self PackedInt32Array) IsEmpty() bool {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.PackedInt32Array.is_empty(abi.Get(0), abi.Get(1), abi.Back(), 0)
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self PackedInt32Array) Set(index Int, value Int) {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet[Int](1, abi, index)
	frameSet[Int](2, abi, value)
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.PackedInt32Array.set(abi.Get(0), abi.Get(1), abi.Back(), 2)
	abi.free()
}

func (self PackedInt32Array) PushBack(value Int) bool {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet[Int](1, abi, value)
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.PackedInt32Array.push_back(abi.Get(0), abi.Get(1), abi.Back(), 1)
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self PackedInt32Array) Append(value Int) bool {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet[Int](1, abi, value)
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.PackedInt32Array.append(abi.Get(0), abi.Get(1), abi.Back(), 1)
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self PackedInt32Array) AppendArray(array PackedInt32Array) {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet[PackedInt32Array](1, abi, array)
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.PackedInt32Array.append_array(abi.Get(0), abi.Get(1), abi.Back(), 1)
	abi.free()
}

func (self PackedInt32Array) RemoveAt(index Int) {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet[Int](1, abi, index)
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.PackedInt32Array.remove_at(abi.Get(0), abi.Get(1), abi.Back(), 1)
	abi.free()
}

func (self PackedInt32Array) Insert(at_index Int, value Int) Int {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet[Int](1, abi, at_index)
	frameSet[Int](2, abi, value)
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.PackedInt32Array.insert(abi.Get(0), abi.Get(1), abi.Back(), 2)
	var ret = frameGet[Int](abi)
	abi.free()
	return ret
}

func (self PackedInt32Array) Fill(value Int) {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet[Int](1, abi, value)
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.PackedInt32Array.fill(abi.Get(0), abi.Get(1), abi.Back(), 1)
	abi.free()
}

func (self PackedInt32Array) Resize(new_size Int) Int {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet[Int](1, abi, new_size)
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.PackedInt32Array.resize(abi.Get(0), abi.Get(1), abi.Back(), 1)
	var ret = frameGet[Int](abi)
	abi.free()
	return ret
}

func (self PackedInt32Array) Clear() {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.PackedInt32Array.clear(abi.Get(0), abi.Get(1), abi.Back(), 0)
	abi.free()
}

func (self PackedInt32Array) Has(value Int) bool {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet[Int](1, abi, value)
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.PackedInt32Array.has(abi.Get(0), abi.Get(1), abi.Back(), 1)
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self PackedInt32Array) Reverse() {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.PackedInt32Array.reverse(abi.Get(0), abi.Get(1), abi.Back(), 0)
	abi.free()
}

func (self PackedInt32Array) Slice(ctx Context, begin Int, end Int) PackedInt32Array {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet[Int](1, abi, begin)
	frameSet[Int](2, abi, end)
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.PackedInt32Array.slice(abi.Get(0), abi.Get(1), abi.Back(), 2)
	var ret = frameGet[[2]uintptr](abi)
	abi.free()
	return mmm.Make[API, PackedInt32Array, [2]uintptr](ctx, selfPtr.API, ret)
}

func (self PackedInt32Array) ToByteArray(ctx Context) PackedByteArray {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.PackedInt32Array.to_byte_array(abi.Get(0), abi.Get(1), abi.Back(), 0)
	var ret = frameGet[[2]uintptr](abi)
	abi.free()
	return mmm.Make[API, PackedByteArray, [2]uintptr](ctx, selfPtr.API, ret)
}

func (self PackedInt32Array) Sort() {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.PackedInt32Array.sort(abi.Get(0), abi.Get(1), abi.Back(), 0)
	abi.free()
}

func (self PackedInt32Array) Bsearch(value Int, before bool) Int {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet[Int](1, abi, value)
	frameSet[bool](2, abi, before)
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.PackedInt32Array.bsearch(abi.Get(0), abi.Get(1), abi.Back(), 2)
	var ret = frameGet[Int](abi)
	abi.free()
	return ret
}

func (self PackedInt32Array) Duplicate(ctx Context) PackedInt32Array {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.PackedInt32Array.duplicate(abi.Get(0), abi.Get(1), abi.Back(), 0)
	var ret = frameGet[[2]uintptr](abi)
	abi.free()
	return mmm.Make[API, PackedInt32Array, [2]uintptr](ctx, selfPtr.API, ret)
}

func (self PackedInt32Array) Find(value Int, from Int) Int {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet[Int](1, abi, value)
	frameSet[Int](2, abi, from)
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.PackedInt32Array.find(abi.Get(0), abi.Get(1), abi.Back(), 2)
	var ret = frameGet[Int](abi)
	abi.free()
	return ret
}

func (self PackedInt32Array) Rfind(value Int, from Int) Int {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet[Int](1, abi, value)
	frameSet[Int](2, abi, from)
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.PackedInt32Array.rfind(abi.Get(0), abi.Get(1), abi.Back(), 2)
	var ret = frameGet[Int](abi)
	abi.free()
	return ret
}

func (self PackedInt32Array) Count(value Int) Int {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet[Int](1, abi, value)
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.PackedInt32Array.count(abi.Get(0), abi.Get(1), abi.Back(), 1)
	var ret = frameGet[Int](abi)
	abi.free()
	return ret
}

func (self PackedInt64Array) Size() Int {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.PackedInt64Array.size(abi.Get(0), abi.Get(1), abi.Back(), 0)
	var ret = frameGet[Int](abi)
	abi.free()
	return ret
}

func (self PackedInt64Array) IsEmpty() bool {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.PackedInt64Array.is_empty(abi.Get(0), abi.Get(1), abi.Back(), 0)
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self PackedInt64Array) Set(index Int, value Int) {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet[Int](1, abi, index)
	frameSet[Int](2, abi, value)
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.PackedInt64Array.set(abi.Get(0), abi.Get(1), abi.Back(), 2)
	abi.free()
}

func (self PackedInt64Array) PushBack(value Int) bool {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet[Int](1, abi, value)
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.PackedInt64Array.push_back(abi.Get(0), abi.Get(1), abi.Back(), 1)
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self PackedInt64Array) Append(value Int) bool {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet[Int](1, abi, value)
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.PackedInt64Array.append(abi.Get(0), abi.Get(1), abi.Back(), 1)
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self PackedInt64Array) AppendArray(array PackedInt64Array) {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet[PackedInt64Array](1, abi, array)
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.PackedInt64Array.append_array(abi.Get(0), abi.Get(1), abi.Back(), 1)
	abi.free()
}

func (self PackedInt64Array) RemoveAt(index Int) {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet[Int](1, abi, index)
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.PackedInt64Array.remove_at(abi.Get(0), abi.Get(1), abi.Back(), 1)
	abi.free()
}

func (self PackedInt64Array) Insert(at_index Int, value Int) Int {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet[Int](1, abi, at_index)
	frameSet[Int](2, abi, value)
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.PackedInt64Array.insert(abi.Get(0), abi.Get(1), abi.Back(), 2)
	var ret = frameGet[Int](abi)
	abi.free()
	return ret
}

func (self PackedInt64Array) Fill(value Int) {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet[Int](1, abi, value)
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.PackedInt64Array.fill(abi.Get(0), abi.Get(1), abi.Back(), 1)
	abi.free()
}

func (self PackedInt64Array) Resize(new_size Int) Int {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet[Int](1, abi, new_size)
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.PackedInt64Array.resize(abi.Get(0), abi.Get(1), abi.Back(), 1)
	var ret = frameGet[Int](abi)
	abi.free()
	return ret
}

func (self PackedInt64Array) Clear() {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.PackedInt64Array.clear(abi.Get(0), abi.Get(1), abi.Back(), 0)
	abi.free()
}

func (self PackedInt64Array) Has(value Int) bool {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet[Int](1, abi, value)
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.PackedInt64Array.has(abi.Get(0), abi.Get(1), abi.Back(), 1)
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self PackedInt64Array) Reverse() {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.PackedInt64Array.reverse(abi.Get(0), abi.Get(1), abi.Back(), 0)
	abi.free()
}

func (self PackedInt64Array) Slice(ctx Context, begin Int, end Int) PackedInt64Array {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet[Int](1, abi, begin)
	frameSet[Int](2, abi, end)
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.PackedInt64Array.slice(abi.Get(0), abi.Get(1), abi.Back(), 2)
	var ret = frameGet[[2]uintptr](abi)
	abi.free()
	return mmm.Make[API, PackedInt64Array, [2]uintptr](ctx, selfPtr.API, ret)
}

func (self PackedInt64Array) ToByteArray(ctx Context) PackedByteArray {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.PackedInt64Array.to_byte_array(abi.Get(0), abi.Get(1), abi.Back(), 0)
	var ret = frameGet[[2]uintptr](abi)
	abi.free()
	return mmm.Make[API, PackedByteArray, [2]uintptr](ctx, selfPtr.API, ret)
}

func (self PackedInt64Array) Sort() {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.PackedInt64Array.sort(abi.Get(0), abi.Get(1), abi.Back(), 0)
	abi.free()
}

func (self PackedInt64Array) Bsearch(value Int, before bool) Int {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet[Int](1, abi, value)
	frameSet[bool](2, abi, before)
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.PackedInt64Array.bsearch(abi.Get(0), abi.Get(1), abi.Back(), 2)
	var ret = frameGet[Int](abi)
	abi.free()
	return ret
}

func (self PackedInt64Array) Duplicate(ctx Context) PackedInt64Array {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.PackedInt64Array.duplicate(abi.Get(0), abi.Get(1), abi.Back(), 0)
	var ret = frameGet[[2]uintptr](abi)
	abi.free()
	return mmm.Make[API, PackedInt64Array, [2]uintptr](ctx, selfPtr.API, ret)
}

func (self PackedInt64Array) Find(value Int, from Int) Int {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet[Int](1, abi, value)
	frameSet[Int](2, abi, from)
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.PackedInt64Array.find(abi.Get(0), abi.Get(1), abi.Back(), 2)
	var ret = frameGet[Int](abi)
	abi.free()
	return ret
}

func (self PackedInt64Array) Rfind(value Int, from Int) Int {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet[Int](1, abi, value)
	frameSet[Int](2, abi, from)
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.PackedInt64Array.rfind(abi.Get(0), abi.Get(1), abi.Back(), 2)
	var ret = frameGet[Int](abi)
	abi.free()
	return ret
}

func (self PackedInt64Array) Count(value Int) Int {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet[Int](1, abi, value)
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.PackedInt64Array.count(abi.Get(0), abi.Get(1), abi.Back(), 1)
	var ret = frameGet[Int](abi)
	abi.free()
	return ret
}

func (self PackedFloat32Array) Size() Int {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.PackedFloat32Array.size(abi.Get(0), abi.Get(1), abi.Back(), 0)
	var ret = frameGet[Int](abi)
	abi.free()
	return ret
}

func (self PackedFloat32Array) IsEmpty() bool {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.PackedFloat32Array.is_empty(abi.Get(0), abi.Get(1), abi.Back(), 0)
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self PackedFloat32Array) Set(index Int, value Float) {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet[Int](1, abi, index)
	frameSet[Float](2, abi, value)
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.PackedFloat32Array.set(abi.Get(0), abi.Get(1), abi.Back(), 2)
	abi.free()
}

func (self PackedFloat32Array) PushBack(value Float) bool {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet[Float](1, abi, value)
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.PackedFloat32Array.push_back(abi.Get(0), abi.Get(1), abi.Back(), 1)
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self PackedFloat32Array) Append(value Float) bool {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet[Float](1, abi, value)
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.PackedFloat32Array.append(abi.Get(0), abi.Get(1), abi.Back(), 1)
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self PackedFloat32Array) AppendArray(array PackedFloat32Array) {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet[PackedFloat32Array](1, abi, array)
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.PackedFloat32Array.append_array(abi.Get(0), abi.Get(1), abi.Back(), 1)
	abi.free()
}

func (self PackedFloat32Array) RemoveAt(index Int) {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet[Int](1, abi, index)
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.PackedFloat32Array.remove_at(abi.Get(0), abi.Get(1), abi.Back(), 1)
	abi.free()
}

func (self PackedFloat32Array) Insert(at_index Int, value Float) Int {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet[Int](1, abi, at_index)
	frameSet[Float](2, abi, value)
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.PackedFloat32Array.insert(abi.Get(0), abi.Get(1), abi.Back(), 2)
	var ret = frameGet[Int](abi)
	abi.free()
	return ret
}

func (self PackedFloat32Array) Fill(value Float) {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet[Float](1, abi, value)
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.PackedFloat32Array.fill(abi.Get(0), abi.Get(1), abi.Back(), 1)
	abi.free()
}

func (self PackedFloat32Array) Resize(new_size Int) Int {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet[Int](1, abi, new_size)
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.PackedFloat32Array.resize(abi.Get(0), abi.Get(1), abi.Back(), 1)
	var ret = frameGet[Int](abi)
	abi.free()
	return ret
}

func (self PackedFloat32Array) Clear() {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.PackedFloat32Array.clear(abi.Get(0), abi.Get(1), abi.Back(), 0)
	abi.free()
}

func (self PackedFloat32Array) Has(value Float) bool {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet[Float](1, abi, value)
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.PackedFloat32Array.has(abi.Get(0), abi.Get(1), abi.Back(), 1)
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self PackedFloat32Array) Reverse() {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.PackedFloat32Array.reverse(abi.Get(0), abi.Get(1), abi.Back(), 0)
	abi.free()
}

func (self PackedFloat32Array) Slice(ctx Context, begin Int, end Int) PackedFloat32Array {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet[Int](1, abi, begin)
	frameSet[Int](2, abi, end)
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.PackedFloat32Array.slice(abi.Get(0), abi.Get(1), abi.Back(), 2)
	var ret = frameGet[[2]uintptr](abi)
	abi.free()
	return mmm.Make[API, PackedFloat32Array, [2]uintptr](ctx, selfPtr.API, ret)
}

func (self PackedFloat32Array) ToByteArray(ctx Context) PackedByteArray {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.PackedFloat32Array.to_byte_array(abi.Get(0), abi.Get(1), abi.Back(), 0)
	var ret = frameGet[[2]uintptr](abi)
	abi.free()
	return mmm.Make[API, PackedByteArray, [2]uintptr](ctx, selfPtr.API, ret)
}

func (self PackedFloat32Array) Sort() {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.PackedFloat32Array.sort(abi.Get(0), abi.Get(1), abi.Back(), 0)
	abi.free()
}

func (self PackedFloat32Array) Bsearch(value Float, before bool) Int {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet[Float](1, abi, value)
	frameSet[bool](2, abi, before)
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.PackedFloat32Array.bsearch(abi.Get(0), abi.Get(1), abi.Back(), 2)
	var ret = frameGet[Int](abi)
	abi.free()
	return ret
}

func (self PackedFloat32Array) Duplicate(ctx Context) PackedFloat32Array {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.PackedFloat32Array.duplicate(abi.Get(0), abi.Get(1), abi.Back(), 0)
	var ret = frameGet[[2]uintptr](abi)
	abi.free()
	return mmm.Make[API, PackedFloat32Array, [2]uintptr](ctx, selfPtr.API, ret)
}

func (self PackedFloat32Array) Find(value Float, from Int) Int {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet[Float](1, abi, value)
	frameSet[Int](2, abi, from)
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.PackedFloat32Array.find(abi.Get(0), abi.Get(1), abi.Back(), 2)
	var ret = frameGet[Int](abi)
	abi.free()
	return ret
}

func (self PackedFloat32Array) Rfind(value Float, from Int) Int {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet[Float](1, abi, value)
	frameSet[Int](2, abi, from)
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.PackedFloat32Array.rfind(abi.Get(0), abi.Get(1), abi.Back(), 2)
	var ret = frameGet[Int](abi)
	abi.free()
	return ret
}

func (self PackedFloat32Array) Count(value Float) Int {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet[Float](1, abi, value)
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.PackedFloat32Array.count(abi.Get(0), abi.Get(1), abi.Back(), 1)
	var ret = frameGet[Int](abi)
	abi.free()
	return ret
}

func (self PackedFloat64Array) Size() Int {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.PackedFloat64Array.size(abi.Get(0), abi.Get(1), abi.Back(), 0)
	var ret = frameGet[Int](abi)
	abi.free()
	return ret
}

func (self PackedFloat64Array) IsEmpty() bool {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.PackedFloat64Array.is_empty(abi.Get(0), abi.Get(1), abi.Back(), 0)
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self PackedFloat64Array) Set(index Int, value Float) {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet[Int](1, abi, index)
	frameSet[Float](2, abi, value)
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.PackedFloat64Array.set(abi.Get(0), abi.Get(1), abi.Back(), 2)
	abi.free()
}

func (self PackedFloat64Array) PushBack(value Float) bool {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet[Float](1, abi, value)
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.PackedFloat64Array.push_back(abi.Get(0), abi.Get(1), abi.Back(), 1)
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self PackedFloat64Array) Append(value Float) bool {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet[Float](1, abi, value)
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.PackedFloat64Array.append(abi.Get(0), abi.Get(1), abi.Back(), 1)
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self PackedFloat64Array) AppendArray(array PackedFloat64Array) {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet[PackedFloat64Array](1, abi, array)
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.PackedFloat64Array.append_array(abi.Get(0), abi.Get(1), abi.Back(), 1)
	abi.free()
}

func (self PackedFloat64Array) RemoveAt(index Int) {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet[Int](1, abi, index)
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.PackedFloat64Array.remove_at(abi.Get(0), abi.Get(1), abi.Back(), 1)
	abi.free()
}

func (self PackedFloat64Array) Insert(at_index Int, value Float) Int {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet[Int](1, abi, at_index)
	frameSet[Float](2, abi, value)
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.PackedFloat64Array.insert(abi.Get(0), abi.Get(1), abi.Back(), 2)
	var ret = frameGet[Int](abi)
	abi.free()
	return ret
}

func (self PackedFloat64Array) Fill(value Float) {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet[Float](1, abi, value)
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.PackedFloat64Array.fill(abi.Get(0), abi.Get(1), abi.Back(), 1)
	abi.free()
}

func (self PackedFloat64Array) Resize(new_size Int) Int {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet[Int](1, abi, new_size)
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.PackedFloat64Array.resize(abi.Get(0), abi.Get(1), abi.Back(), 1)
	var ret = frameGet[Int](abi)
	abi.free()
	return ret
}

func (self PackedFloat64Array) Clear() {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.PackedFloat64Array.clear(abi.Get(0), abi.Get(1), abi.Back(), 0)
	abi.free()
}

func (self PackedFloat64Array) Has(value Float) bool {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet[Float](1, abi, value)
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.PackedFloat64Array.has(abi.Get(0), abi.Get(1), abi.Back(), 1)
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self PackedFloat64Array) Reverse() {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.PackedFloat64Array.reverse(abi.Get(0), abi.Get(1), abi.Back(), 0)
	abi.free()
}

func (self PackedFloat64Array) Slice(ctx Context, begin Int, end Int) PackedFloat64Array {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet[Int](1, abi, begin)
	frameSet[Int](2, abi, end)
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.PackedFloat64Array.slice(abi.Get(0), abi.Get(1), abi.Back(), 2)
	var ret = frameGet[[2]uintptr](abi)
	abi.free()
	return mmm.Make[API, PackedFloat64Array, [2]uintptr](ctx, selfPtr.API, ret)
}

func (self PackedFloat64Array) ToByteArray(ctx Context) PackedByteArray {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.PackedFloat64Array.to_byte_array(abi.Get(0), abi.Get(1), abi.Back(), 0)
	var ret = frameGet[[2]uintptr](abi)
	abi.free()
	return mmm.Make[API, PackedByteArray, [2]uintptr](ctx, selfPtr.API, ret)
}

func (self PackedFloat64Array) Sort() {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.PackedFloat64Array.sort(abi.Get(0), abi.Get(1), abi.Back(), 0)
	abi.free()
}

func (self PackedFloat64Array) Bsearch(value Float, before bool) Int {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet[Float](1, abi, value)
	frameSet[bool](2, abi, before)
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.PackedFloat64Array.bsearch(abi.Get(0), abi.Get(1), abi.Back(), 2)
	var ret = frameGet[Int](abi)
	abi.free()
	return ret
}

func (self PackedFloat64Array) Duplicate(ctx Context) PackedFloat64Array {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.PackedFloat64Array.duplicate(abi.Get(0), abi.Get(1), abi.Back(), 0)
	var ret = frameGet[[2]uintptr](abi)
	abi.free()
	return mmm.Make[API, PackedFloat64Array, [2]uintptr](ctx, selfPtr.API, ret)
}

func (self PackedFloat64Array) Find(value Float, from Int) Int {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet[Float](1, abi, value)
	frameSet[Int](2, abi, from)
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.PackedFloat64Array.find(abi.Get(0), abi.Get(1), abi.Back(), 2)
	var ret = frameGet[Int](abi)
	abi.free()
	return ret
}

func (self PackedFloat64Array) Rfind(value Float, from Int) Int {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet[Float](1, abi, value)
	frameSet[Int](2, abi, from)
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.PackedFloat64Array.rfind(abi.Get(0), abi.Get(1), abi.Back(), 2)
	var ret = frameGet[Int](abi)
	abi.free()
	return ret
}

func (self PackedFloat64Array) Count(value Float) Int {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet[Float](1, abi, value)
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.PackedFloat64Array.count(abi.Get(0), abi.Get(1), abi.Back(), 1)
	var ret = frameGet[Int](abi)
	abi.free()
	return ret
}

func (self PackedStringArray) Size() Int {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.PackedStringArray.size(abi.Get(0), abi.Get(1), abi.Back(), 0)
	var ret = frameGet[Int](abi)
	abi.free()
	return ret
}

func (self PackedStringArray) IsEmpty() bool {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.PackedStringArray.is_empty(abi.Get(0), abi.Get(1), abi.Back(), 0)
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self PackedStringArray) Set(index Int, value String) {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet[Int](1, abi, index)
	frameSet[String](2, abi, value)
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.PackedStringArray.set(abi.Get(0), abi.Get(1), abi.Back(), 2)
	abi.free()
}

func (self PackedStringArray) PushBack(value String) bool {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet[String](1, abi, value)
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.PackedStringArray.push_back(abi.Get(0), abi.Get(1), abi.Back(), 1)
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self PackedStringArray) Append(value String) bool {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet[String](1, abi, value)
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.PackedStringArray.append(abi.Get(0), abi.Get(1), abi.Back(), 1)
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self PackedStringArray) AppendArray(array PackedStringArray) {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet[PackedStringArray](1, abi, array)
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.PackedStringArray.append_array(abi.Get(0), abi.Get(1), abi.Back(), 1)
	abi.free()
}

func (self PackedStringArray) RemoveAt(index Int) {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet[Int](1, abi, index)
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.PackedStringArray.remove_at(abi.Get(0), abi.Get(1), abi.Back(), 1)
	abi.free()
}

func (self PackedStringArray) Insert(at_index Int, value String) Int {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet[Int](1, abi, at_index)
	frameSet[String](2, abi, value)
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.PackedStringArray.insert(abi.Get(0), abi.Get(1), abi.Back(), 2)
	var ret = frameGet[Int](abi)
	abi.free()
	return ret
}

func (self PackedStringArray) Fill(value String) {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet[String](1, abi, value)
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.PackedStringArray.fill(abi.Get(0), abi.Get(1), abi.Back(), 1)
	abi.free()
}

func (self PackedStringArray) Resize(new_size Int) Int {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet[Int](1, abi, new_size)
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.PackedStringArray.resize(abi.Get(0), abi.Get(1), abi.Back(), 1)
	var ret = frameGet[Int](abi)
	abi.free()
	return ret
}

func (self PackedStringArray) Clear() {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.PackedStringArray.clear(abi.Get(0), abi.Get(1), abi.Back(), 0)
	abi.free()
}

func (self PackedStringArray) Has(value String) bool {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet[String](1, abi, value)
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.PackedStringArray.has(abi.Get(0), abi.Get(1), abi.Back(), 1)
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self PackedStringArray) Reverse() {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.PackedStringArray.reverse(abi.Get(0), abi.Get(1), abi.Back(), 0)
	abi.free()
}

func (self PackedStringArray) Slice(ctx Context, begin Int, end Int) PackedStringArray {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet[Int](1, abi, begin)
	frameSet[Int](2, abi, end)
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.PackedStringArray.slice(abi.Get(0), abi.Get(1), abi.Back(), 2)
	var ret = frameGet[[2]uintptr](abi)
	abi.free()
	return mmm.Make[API, PackedStringArray, [2]uintptr](ctx, selfPtr.API, ret)
}

func (self PackedStringArray) ToByteArray(ctx Context) PackedByteArray {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.PackedStringArray.to_byte_array(abi.Get(0), abi.Get(1), abi.Back(), 0)
	var ret = frameGet[[2]uintptr](abi)
	abi.free()
	return mmm.Make[API, PackedByteArray, [2]uintptr](ctx, selfPtr.API, ret)
}

func (self PackedStringArray) Sort() {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.PackedStringArray.sort(abi.Get(0), abi.Get(1), abi.Back(), 0)
	abi.free()
}

func (self PackedStringArray) Bsearch(value String, before bool) Int {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet[String](1, abi, value)
	frameSet[bool](2, abi, before)
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.PackedStringArray.bsearch(abi.Get(0), abi.Get(1), abi.Back(), 2)
	var ret = frameGet[Int](abi)
	abi.free()
	return ret
}

func (self PackedStringArray) Duplicate(ctx Context) PackedStringArray {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.PackedStringArray.duplicate(abi.Get(0), abi.Get(1), abi.Back(), 0)
	var ret = frameGet[[2]uintptr](abi)
	abi.free()
	return mmm.Make[API, PackedStringArray, [2]uintptr](ctx, selfPtr.API, ret)
}

func (self PackedStringArray) Find(value String, from Int) Int {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet[String](1, abi, value)
	frameSet[Int](2, abi, from)
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.PackedStringArray.find(abi.Get(0), abi.Get(1), abi.Back(), 2)
	var ret = frameGet[Int](abi)
	abi.free()
	return ret
}

func (self PackedStringArray) Rfind(value String, from Int) Int {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet[String](1, abi, value)
	frameSet[Int](2, abi, from)
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.PackedStringArray.rfind(abi.Get(0), abi.Get(1), abi.Back(), 2)
	var ret = frameGet[Int](abi)
	abi.free()
	return ret
}

func (self PackedStringArray) Count(value String) Int {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet[String](1, abi, value)
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.PackedStringArray.count(abi.Get(0), abi.Get(1), abi.Back(), 1)
	var ret = frameGet[Int](abi)
	abi.free()
	return ret
}

func (self PackedVector2Array) Size() Int {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.PackedVector2Array.size(abi.Get(0), abi.Get(1), abi.Back(), 0)
	var ret = frameGet[Int](abi)
	abi.free()
	return ret
}

func (self PackedVector2Array) IsEmpty() bool {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.PackedVector2Array.is_empty(abi.Get(0), abi.Get(1), abi.Back(), 0)
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self PackedVector2Array) Set(index Int, value Vector2) {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet[Int](1, abi, index)
	frameSet[Vector2](2, abi, value)
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.PackedVector2Array.set(abi.Get(0), abi.Get(1), abi.Back(), 2)
	abi.free()
}

func (self PackedVector2Array) PushBack(value Vector2) bool {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet[Vector2](1, abi, value)
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.PackedVector2Array.push_back(abi.Get(0), abi.Get(1), abi.Back(), 1)
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self PackedVector2Array) Append(value Vector2) bool {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet[Vector2](1, abi, value)
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.PackedVector2Array.append(abi.Get(0), abi.Get(1), abi.Back(), 1)
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self PackedVector2Array) AppendArray(array PackedVector2Array) {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet[PackedVector2Array](1, abi, array)
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.PackedVector2Array.append_array(abi.Get(0), abi.Get(1), abi.Back(), 1)
	abi.free()
}

func (self PackedVector2Array) RemoveAt(index Int) {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet[Int](1, abi, index)
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.PackedVector2Array.remove_at(abi.Get(0), abi.Get(1), abi.Back(), 1)
	abi.free()
}

func (self PackedVector2Array) Insert(at_index Int, value Vector2) Int {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet[Int](1, abi, at_index)
	frameSet[Vector2](2, abi, value)
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.PackedVector2Array.insert(abi.Get(0), abi.Get(1), abi.Back(), 2)
	var ret = frameGet[Int](abi)
	abi.free()
	return ret
}

func (self PackedVector2Array) Fill(value Vector2) {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet[Vector2](1, abi, value)
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.PackedVector2Array.fill(abi.Get(0), abi.Get(1), abi.Back(), 1)
	abi.free()
}

func (self PackedVector2Array) Resize(new_size Int) Int {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet[Int](1, abi, new_size)
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.PackedVector2Array.resize(abi.Get(0), abi.Get(1), abi.Back(), 1)
	var ret = frameGet[Int](abi)
	abi.free()
	return ret
}

func (self PackedVector2Array) Clear() {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.PackedVector2Array.clear(abi.Get(0), abi.Get(1), abi.Back(), 0)
	abi.free()
}

func (self PackedVector2Array) Has(value Vector2) bool {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet[Vector2](1, abi, value)
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.PackedVector2Array.has(abi.Get(0), abi.Get(1), abi.Back(), 1)
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self PackedVector2Array) Reverse() {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.PackedVector2Array.reverse(abi.Get(0), abi.Get(1), abi.Back(), 0)
	abi.free()
}

func (self PackedVector2Array) Slice(ctx Context, begin Int, end Int) PackedVector2Array {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet[Int](1, abi, begin)
	frameSet[Int](2, abi, end)
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.PackedVector2Array.slice(abi.Get(0), abi.Get(1), abi.Back(), 2)
	var ret = frameGet[[2]uintptr](abi)
	abi.free()
	return mmm.Make[API, PackedVector2Array, [2]uintptr](ctx, selfPtr.API, ret)
}

func (self PackedVector2Array) ToByteArray(ctx Context) PackedByteArray {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.PackedVector2Array.to_byte_array(abi.Get(0), abi.Get(1), abi.Back(), 0)
	var ret = frameGet[[2]uintptr](abi)
	abi.free()
	return mmm.Make[API, PackedByteArray, [2]uintptr](ctx, selfPtr.API, ret)
}

func (self PackedVector2Array) Sort() {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.PackedVector2Array.sort(abi.Get(0), abi.Get(1), abi.Back(), 0)
	abi.free()
}

func (self PackedVector2Array) Bsearch(value Vector2, before bool) Int {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet[Vector2](1, abi, value)
	frameSet[bool](2, abi, before)
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.PackedVector2Array.bsearch(abi.Get(0), abi.Get(1), abi.Back(), 2)
	var ret = frameGet[Int](abi)
	abi.free()
	return ret
}

func (self PackedVector2Array) Duplicate(ctx Context) PackedVector2Array {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.PackedVector2Array.duplicate(abi.Get(0), abi.Get(1), abi.Back(), 0)
	var ret = frameGet[[2]uintptr](abi)
	abi.free()
	return mmm.Make[API, PackedVector2Array, [2]uintptr](ctx, selfPtr.API, ret)
}

func (self PackedVector2Array) Find(value Vector2, from Int) Int {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet[Vector2](1, abi, value)
	frameSet[Int](2, abi, from)
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.PackedVector2Array.find(abi.Get(0), abi.Get(1), abi.Back(), 2)
	var ret = frameGet[Int](abi)
	abi.free()
	return ret
}

func (self PackedVector2Array) Rfind(value Vector2, from Int) Int {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet[Vector2](1, abi, value)
	frameSet[Int](2, abi, from)
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.PackedVector2Array.rfind(abi.Get(0), abi.Get(1), abi.Back(), 2)
	var ret = frameGet[Int](abi)
	abi.free()
	return ret
}

func (self PackedVector2Array) Count(value Vector2) Int {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet[Vector2](1, abi, value)
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.PackedVector2Array.count(abi.Get(0), abi.Get(1), abi.Back(), 1)
	var ret = frameGet[Int](abi)
	abi.free()
	return ret
}

func (self PackedVector3Array) Size() Int {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.PackedVector3Array.size(abi.Get(0), abi.Get(1), abi.Back(), 0)
	var ret = frameGet[Int](abi)
	abi.free()
	return ret
}

func (self PackedVector3Array) IsEmpty() bool {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.PackedVector3Array.is_empty(abi.Get(0), abi.Get(1), abi.Back(), 0)
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self PackedVector3Array) Set(index Int, value Vector3) {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet[Int](1, abi, index)
	frameSet[Vector3](2, abi, value)
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.PackedVector3Array.set(abi.Get(0), abi.Get(1), abi.Back(), 2)
	abi.free()
}

func (self PackedVector3Array) PushBack(value Vector3) bool {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet[Vector3](1, abi, value)
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.PackedVector3Array.push_back(abi.Get(0), abi.Get(1), abi.Back(), 1)
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self PackedVector3Array) Append(value Vector3) bool {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet[Vector3](1, abi, value)
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.PackedVector3Array.append(abi.Get(0), abi.Get(1), abi.Back(), 1)
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self PackedVector3Array) AppendArray(array PackedVector3Array) {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet[PackedVector3Array](1, abi, array)
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.PackedVector3Array.append_array(abi.Get(0), abi.Get(1), abi.Back(), 1)
	abi.free()
}

func (self PackedVector3Array) RemoveAt(index Int) {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet[Int](1, abi, index)
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.PackedVector3Array.remove_at(abi.Get(0), abi.Get(1), abi.Back(), 1)
	abi.free()
}

func (self PackedVector3Array) Insert(at_index Int, value Vector3) Int {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet[Int](1, abi, at_index)
	frameSet[Vector3](2, abi, value)
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.PackedVector3Array.insert(abi.Get(0), abi.Get(1), abi.Back(), 2)
	var ret = frameGet[Int](abi)
	abi.free()
	return ret
}

func (self PackedVector3Array) Fill(value Vector3) {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet[Vector3](1, abi, value)
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.PackedVector3Array.fill(abi.Get(0), abi.Get(1), abi.Back(), 1)
	abi.free()
}

func (self PackedVector3Array) Resize(new_size Int) Int {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet[Int](1, abi, new_size)
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.PackedVector3Array.resize(abi.Get(0), abi.Get(1), abi.Back(), 1)
	var ret = frameGet[Int](abi)
	abi.free()
	return ret
}

func (self PackedVector3Array) Clear() {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.PackedVector3Array.clear(abi.Get(0), abi.Get(1), abi.Back(), 0)
	abi.free()
}

func (self PackedVector3Array) Has(value Vector3) bool {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet[Vector3](1, abi, value)
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.PackedVector3Array.has(abi.Get(0), abi.Get(1), abi.Back(), 1)
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self PackedVector3Array) Reverse() {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.PackedVector3Array.reverse(abi.Get(0), abi.Get(1), abi.Back(), 0)
	abi.free()
}

func (self PackedVector3Array) Slice(ctx Context, begin Int, end Int) PackedVector3Array {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet[Int](1, abi, begin)
	frameSet[Int](2, abi, end)
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.PackedVector3Array.slice(abi.Get(0), abi.Get(1), abi.Back(), 2)
	var ret = frameGet[[2]uintptr](abi)
	abi.free()
	return mmm.Make[API, PackedVector3Array, [2]uintptr](ctx, selfPtr.API, ret)
}

func (self PackedVector3Array) ToByteArray(ctx Context) PackedByteArray {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.PackedVector3Array.to_byte_array(abi.Get(0), abi.Get(1), abi.Back(), 0)
	var ret = frameGet[[2]uintptr](abi)
	abi.free()
	return mmm.Make[API, PackedByteArray, [2]uintptr](ctx, selfPtr.API, ret)
}

func (self PackedVector3Array) Sort() {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.PackedVector3Array.sort(abi.Get(0), abi.Get(1), abi.Back(), 0)
	abi.free()
}

func (self PackedVector3Array) Bsearch(value Vector3, before bool) Int {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet[Vector3](1, abi, value)
	frameSet[bool](2, abi, before)
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.PackedVector3Array.bsearch(abi.Get(0), abi.Get(1), abi.Back(), 2)
	var ret = frameGet[Int](abi)
	abi.free()
	return ret
}

func (self PackedVector3Array) Duplicate(ctx Context) PackedVector3Array {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.PackedVector3Array.duplicate(abi.Get(0), abi.Get(1), abi.Back(), 0)
	var ret = frameGet[[2]uintptr](abi)
	abi.free()
	return mmm.Make[API, PackedVector3Array, [2]uintptr](ctx, selfPtr.API, ret)
}

func (self PackedVector3Array) Find(value Vector3, from Int) Int {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet[Vector3](1, abi, value)
	frameSet[Int](2, abi, from)
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.PackedVector3Array.find(abi.Get(0), abi.Get(1), abi.Back(), 2)
	var ret = frameGet[Int](abi)
	abi.free()
	return ret
}

func (self PackedVector3Array) Rfind(value Vector3, from Int) Int {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet[Vector3](1, abi, value)
	frameSet[Int](2, abi, from)
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.PackedVector3Array.rfind(abi.Get(0), abi.Get(1), abi.Back(), 2)
	var ret = frameGet[Int](abi)
	abi.free()
	return ret
}

func (self PackedVector3Array) Count(value Vector3) Int {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet[Vector3](1, abi, value)
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.PackedVector3Array.count(abi.Get(0), abi.Get(1), abi.Back(), 1)
	var ret = frameGet[Int](abi)
	abi.free()
	return ret
}

func (self PackedColorArray) Size() Int {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.PackedColorArray.size(abi.Get(0), abi.Get(1), abi.Back(), 0)
	var ret = frameGet[Int](abi)
	abi.free()
	return ret
}

func (self PackedColorArray) IsEmpty() bool {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.PackedColorArray.is_empty(abi.Get(0), abi.Get(1), abi.Back(), 0)
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self PackedColorArray) Set(index Int, value Color) {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet[Int](1, abi, index)
	frameSet[Color](2, abi, value)
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.PackedColorArray.set(abi.Get(0), abi.Get(1), abi.Back(), 2)
	abi.free()
}

func (self PackedColorArray) PushBack(value Color) bool {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet[Color](1, abi, value)
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.PackedColorArray.push_back(abi.Get(0), abi.Get(1), abi.Back(), 1)
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self PackedColorArray) Append(value Color) bool {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet[Color](1, abi, value)
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.PackedColorArray.append(abi.Get(0), abi.Get(1), abi.Back(), 1)
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self PackedColorArray) AppendArray(array PackedColorArray) {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet[PackedColorArray](1, abi, array)
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.PackedColorArray.append_array(abi.Get(0), abi.Get(1), abi.Back(), 1)
	abi.free()
}

func (self PackedColorArray) RemoveAt(index Int) {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet[Int](1, abi, index)
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.PackedColorArray.remove_at(abi.Get(0), abi.Get(1), abi.Back(), 1)
	abi.free()
}

func (self PackedColorArray) Insert(at_index Int, value Color) Int {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet[Int](1, abi, at_index)
	frameSet[Color](2, abi, value)
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.PackedColorArray.insert(abi.Get(0), abi.Get(1), abi.Back(), 2)
	var ret = frameGet[Int](abi)
	abi.free()
	return ret
}

func (self PackedColorArray) Fill(value Color) {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet[Color](1, abi, value)
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.PackedColorArray.fill(abi.Get(0), abi.Get(1), abi.Back(), 1)
	abi.free()
}

func (self PackedColorArray) Resize(new_size Int) Int {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet[Int](1, abi, new_size)
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.PackedColorArray.resize(abi.Get(0), abi.Get(1), abi.Back(), 1)
	var ret = frameGet[Int](abi)
	abi.free()
	return ret
}

func (self PackedColorArray) Clear() {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.PackedColorArray.clear(abi.Get(0), abi.Get(1), abi.Back(), 0)
	abi.free()
}

func (self PackedColorArray) Has(value Color) bool {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet[Color](1, abi, value)
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.PackedColorArray.has(abi.Get(0), abi.Get(1), abi.Back(), 1)
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self PackedColorArray) Reverse() {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.PackedColorArray.reverse(abi.Get(0), abi.Get(1), abi.Back(), 0)
	abi.free()
}

func (self PackedColorArray) Slice(ctx Context, begin Int, end Int) PackedColorArray {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet[Int](1, abi, begin)
	frameSet[Int](2, abi, end)
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.PackedColorArray.slice(abi.Get(0), abi.Get(1), abi.Back(), 2)
	var ret = frameGet[[2]uintptr](abi)
	abi.free()
	return mmm.Make[API, PackedColorArray, [2]uintptr](ctx, selfPtr.API, ret)
}

func (self PackedColorArray) ToByteArray(ctx Context) PackedByteArray {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.PackedColorArray.to_byte_array(abi.Get(0), abi.Get(1), abi.Back(), 0)
	var ret = frameGet[[2]uintptr](abi)
	abi.free()
	return mmm.Make[API, PackedByteArray, [2]uintptr](ctx, selfPtr.API, ret)
}

func (self PackedColorArray) Sort() {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.PackedColorArray.sort(abi.Get(0), abi.Get(1), abi.Back(), 0)
	abi.free()
}

func (self PackedColorArray) Bsearch(value Color, before bool) Int {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet[Color](1, abi, value)
	frameSet[bool](2, abi, before)
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.PackedColorArray.bsearch(abi.Get(0), abi.Get(1), abi.Back(), 2)
	var ret = frameGet[Int](abi)
	abi.free()
	return ret
}

func (self PackedColorArray) Duplicate(ctx Context) PackedColorArray {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.PackedColorArray.duplicate(abi.Get(0), abi.Get(1), abi.Back(), 0)
	var ret = frameGet[[2]uintptr](abi)
	abi.free()
	return mmm.Make[API, PackedColorArray, [2]uintptr](ctx, selfPtr.API, ret)
}

func (self PackedColorArray) Find(value Color, from Int) Int {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet[Color](1, abi, value)
	frameSet[Int](2, abi, from)
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.PackedColorArray.find(abi.Get(0), abi.Get(1), abi.Back(), 2)
	var ret = frameGet[Int](abi)
	abi.free()
	return ret
}

func (self PackedColorArray) Rfind(value Color, from Int) Int {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet[Color](1, abi, value)
	frameSet[Int](2, abi, from)
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.PackedColorArray.rfind(abi.Get(0), abi.Get(1), abi.Back(), 2)
	var ret = frameGet[Int](abi)
	abi.free()
	return ret
}

func (self PackedColorArray) Count(value Color) Int {
	var selfPtr = self
	var abi = selfPtr.API.newFrame()
	frameSet[Color](1, abi, value)
	frameSet(0, abi, selfPtr.Pointer())
	selfPtr.API.builtin.PackedColorArray.count(abi.Get(0), abi.Get(1), abi.Back(), 1)
	var ret = frameGet[Int](abi)
	abi.free()
	return ret
}

type ArrayMesh struct{ Class[ArrayMesh, Mesh] }

func (self ArrayMesh) Mesh() Mesh { return *self.Super() }

func (self ArrayMesh) Resource() Resource { return *self.Super().Super() }

func (self ArrayMesh) RefCounted() RefCounted { return *self.Super().Super().Super() }

func (self ArrayMesh) Object() Object { return *self.Super().Super().Super().Super() }

func (self ArrayMesh) AddBlendShape(name StringName) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[StringName](0, abi, name)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.ArrayMesh.add_blend_shape, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self ArrayMesh) GetBlendShapeCount() Int {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.ArrayMesh.get_blend_shape_count, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Int](abi)
	abi.free()
	return ret
}

func (self ArrayMesh) GetBlendShapeName(ctx Context, index Int) StringName {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Int](0, abi, index)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.ArrayMesh.get_blend_shape_name, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[uintptr](abi)
	abi.free()
	return mmm.Make[API, StringName, uintptr](ctx, selfPtr.API, ret)
}

func (self ArrayMesh) SetBlendShapeName(index Int, name StringName) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Int](0, abi, index)
	frameSet[StringName](1, abi, name)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.ArrayMesh.set_blend_shape_name, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self ArrayMesh) ClearBlendShapes() {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.ArrayMesh.clear_blend_shapes, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self ArrayMesh) SetBlendShapeMode(mode MeshBlendShapeMode) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[MeshBlendShapeMode](0, abi, mode)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.ArrayMesh.set_blend_shape_mode, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self ArrayMesh) GetBlendShapeMode() MeshBlendShapeMode {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.ArrayMesh.get_blend_shape_mode, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[MeshBlendShapeMode](abi)
	abi.free()
	return ret
}

func (self ArrayMesh) AddSurfaceFromArrays(primitive MeshPrimitiveType, arrays Array, blend_shapes ArrayOf[Array], lods Dictionary, flags MeshArrayFormat) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[MeshPrimitiveType](0, abi, primitive)
	frameSet[Array](1, abi, arrays)
	frameSet[ArrayOf[Array]](2, abi, blend_shapes)
	frameSet[Dictionary](3, abi, lods)
	frameSet[MeshArrayFormat](4, abi, flags)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.ArrayMesh.add_surface_from_arrays, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self ArrayMesh) ClearSurfaces() {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.ArrayMesh.clear_surfaces, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self ArrayMesh) SurfaceUpdateVertexRegion(surf_idx Int, offset Int, data PackedByteArray) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Int](0, abi, surf_idx)
	frameSet[Int](1, abi, offset)
	frameSet[PackedByteArray](2, abi, data)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.ArrayMesh.surface_update_vertex_region, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self ArrayMesh) SurfaceUpdateAttributeRegion(surf_idx Int, offset Int, data PackedByteArray) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Int](0, abi, surf_idx)
	frameSet[Int](1, abi, offset)
	frameSet[PackedByteArray](2, abi, data)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.ArrayMesh.surface_update_attribute_region, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self ArrayMesh) SurfaceUpdateSkinRegion(surf_idx Int, offset Int, data PackedByteArray) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Int](0, abi, surf_idx)
	frameSet[Int](1, abi, offset)
	frameSet[PackedByteArray](2, abi, data)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.ArrayMesh.surface_update_skin_region, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self ArrayMesh) SurfaceGetArrayLen(surf_idx Int) Int {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Int](0, abi, surf_idx)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.ArrayMesh.surface_get_array_len, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Int](abi)
	abi.free()
	return ret
}

func (self ArrayMesh) SurfaceGetArrayIndexLen(surf_idx Int) Int {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Int](0, abi, surf_idx)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.ArrayMesh.surface_get_array_index_len, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Int](abi)
	abi.free()
	return ret
}

func (self ArrayMesh) SurfaceGetFormat(surf_idx Int) MeshArrayFormat {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Int](0, abi, surf_idx)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.ArrayMesh.surface_get_format, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[MeshArrayFormat](abi)
	abi.free()
	return ret
}

func (self ArrayMesh) SurfaceGetPrimitiveType(surf_idx Int) MeshPrimitiveType {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Int](0, abi, surf_idx)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.ArrayMesh.surface_get_primitive_type, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[MeshPrimitiveType](abi)
	abi.free()
	return ret
}

func (self ArrayMesh) SurfaceFindByName(name String) Int {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[String](0, abi, name)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.ArrayMesh.surface_find_by_name, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Int](abi)
	abi.free()
	return ret
}

func (self ArrayMesh) SurfaceSetName(surf_idx Int, name String) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Int](0, abi, surf_idx)
	frameSet[String](1, abi, name)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.ArrayMesh.surface_set_name, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self ArrayMesh) SurfaceGetName(ctx Context, surf_idx Int) String {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Int](0, abi, surf_idx)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.ArrayMesh.surface_get_name, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[uintptr](abi)
	abi.free()
	return mmm.Make[API, String, uintptr](ctx, selfPtr.API, ret)
}

func (self ArrayMesh) RegenNormalMaps() {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.ArrayMesh.regen_normal_maps, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self ArrayMesh) LightmapUnwrap(transform Transform3D, texel_size Float) int64 {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Transform3D](0, abi, transform)
	frameSet[Float](1, abi, texel_size)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.ArrayMesh.lightmap_unwrap, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[int64](abi)
	abi.free()
	return ret
}

func (self ArrayMesh) SetCustomAabb(aabb AABB) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[AABB](0, abi, aabb)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.ArrayMesh.set_custom_aabb, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self ArrayMesh) GetCustomAabb() AABB {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.ArrayMesh.get_custom_aabb, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[AABB](abi)
	abi.free()
	return ret
}

func (self ArrayMesh) SetShadowMesh(mesh ArrayMesh) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[ArrayMesh](0, abi, mesh)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.ArrayMesh.set_shadow_mesh, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self ArrayMesh) GetShadowMesh() ArrayMesh {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.ArrayMesh.get_shadow_mesh, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[ArrayMesh](abi)
	abi.free()
	return ret
}

func (self ArrayMesh) virtual(name string) reflect.Value {
	switch name {
	default:
		return self.Super().virtual(name)
	}
}

type CallbackTweener struct {
	Class[CallbackTweener, Tweener]
}

func (self CallbackTweener) Tweener() Tweener { return *self.Super() }

func (self CallbackTweener) RefCounted() RefCounted { return *self.Super().Super() }

func (self CallbackTweener) Object() Object { return *self.Super().Super().Super() }

func (self CallbackTweener) SetDelay(delay Float) CallbackTweener {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Float](0, abi, delay)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.CallbackTweener.set_delay, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[CallbackTweener](abi)
	abi.free()
	return ret
}

func (self CallbackTweener) virtual(name string) reflect.Value {
	switch name {
	default:
		return self.Super().virtual(name)
	}
}

type Camera2DAnchorMode int64

type Camera2DCamera2DProcessCallback int64
type Camera2D struct{ Class[Camera2D, Node2D] }

func (self Camera2D) Node2D() Node2D { return *self.Super() }

func (self Camera2D) CanvasItem() CanvasItem { return *self.Super().Super() }

func (self Camera2D) Node() Node { return *self.Super().Super().Super() }

func (self Camera2D) Object() Object { return *self.Super().Super().Super().Super() }

func (self Camera2D) SetOffset(offset Vector2) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Vector2](0, abi, offset)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Camera2D.set_offset, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self Camera2D) GetOffset() Vector2 {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Camera2D.get_offset, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Vector2](abi)
	abi.free()
	return ret
}

func (self Camera2D) SetAnchorMode(anchor_mode Camera2DAnchorMode) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Camera2DAnchorMode](0, abi, anchor_mode)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Camera2D.set_anchor_mode, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self Camera2D) GetAnchorMode() Camera2DAnchorMode {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Camera2D.get_anchor_mode, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Camera2DAnchorMode](abi)
	abi.free()
	return ret
}

func (self Camera2D) SetIgnoreRotation(ignore bool) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[bool](0, abi, ignore)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Camera2D.set_ignore_rotation, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self Camera2D) IsIgnoringRotation() bool {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Camera2D.is_ignoring_rotation, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self Camera2D) SetProcessCallback(mode Camera2DCamera2DProcessCallback) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Camera2DCamera2DProcessCallback](0, abi, mode)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Camera2D.set_process_callback, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self Camera2D) GetProcessCallback() Camera2DCamera2DProcessCallback {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Camera2D.get_process_callback, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Camera2DCamera2DProcessCallback](abi)
	abi.free()
	return ret
}

func (self Camera2D) SetEnabled(enabled bool) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[bool](0, abi, enabled)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Camera2D.set_enabled, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self Camera2D) IsEnabled() bool {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Camera2D.is_enabled, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self Camera2D) MakeCurrent() {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Camera2D.make_current, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self Camera2D) IsCurrent() bool {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Camera2D.is_current, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self Camera2D) SetLimit(margin Side, limit Int) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Side](0, abi, margin)
	frameSet[Int](1, abi, limit)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Camera2D.set_limit, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self Camera2D) GetLimit(margin Side) Int {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Side](0, abi, margin)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Camera2D.get_limit, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Int](abi)
	abi.free()
	return ret
}

func (self Camera2D) SetLimitSmoothingEnabled(limit_smoothing_enabled bool) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[bool](0, abi, limit_smoothing_enabled)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Camera2D.set_limit_smoothing_enabled, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self Camera2D) IsLimitSmoothingEnabled() bool {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Camera2D.is_limit_smoothing_enabled, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self Camera2D) SetDragVerticalEnabled(enabled bool) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[bool](0, abi, enabled)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Camera2D.set_drag_vertical_enabled, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self Camera2D) IsDragVerticalEnabled() bool {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Camera2D.is_drag_vertical_enabled, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self Camera2D) SetDragHorizontalEnabled(enabled bool) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[bool](0, abi, enabled)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Camera2D.set_drag_horizontal_enabled, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self Camera2D) IsDragHorizontalEnabled() bool {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Camera2D.is_drag_horizontal_enabled, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self Camera2D) SetDragVerticalOffset(offset Float) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Float](0, abi, offset)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Camera2D.set_drag_vertical_offset, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self Camera2D) GetDragVerticalOffset() Float {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Camera2D.get_drag_vertical_offset, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Float](abi)
	abi.free()
	return ret
}

func (self Camera2D) SetDragHorizontalOffset(offset Float) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Float](0, abi, offset)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Camera2D.set_drag_horizontal_offset, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self Camera2D) GetDragHorizontalOffset() Float {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Camera2D.get_drag_horizontal_offset, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Float](abi)
	abi.free()
	return ret
}

func (self Camera2D) SetDragMargin(margin Side, drag_margin Float) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Side](0, abi, margin)
	frameSet[Float](1, abi, drag_margin)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Camera2D.set_drag_margin, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self Camera2D) GetDragMargin(margin Side) Float {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Side](0, abi, margin)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Camera2D.get_drag_margin, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Float](abi)
	abi.free()
	return ret
}

func (self Camera2D) GetTargetPosition() Vector2 {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Camera2D.get_target_position, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Vector2](abi)
	abi.free()
	return ret
}

func (self Camera2D) GetScreenCenterPosition() Vector2 {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Camera2D.get_screen_center_position, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Vector2](abi)
	abi.free()
	return ret
}

func (self Camera2D) SetZoom(zoom Vector2) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Vector2](0, abi, zoom)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Camera2D.set_zoom, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self Camera2D) GetZoom() Vector2 {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Camera2D.get_zoom, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Vector2](abi)
	abi.free()
	return ret
}

func (self Camera2D) SetCustomViewport(viewport Node) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Node](0, abi, viewport)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Camera2D.set_custom_viewport, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self Camera2D) GetCustomViewport() Node {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Camera2D.get_custom_viewport, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Node](abi)
	abi.free()
	return ret
}

func (self Camera2D) SetPositionSmoothingSpeed(position_smoothing_speed Float) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Float](0, abi, position_smoothing_speed)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Camera2D.set_position_smoothing_speed, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self Camera2D) GetPositionSmoothingSpeed() Float {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Camera2D.get_position_smoothing_speed, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Float](abi)
	abi.free()
	return ret
}

func (self Camera2D) SetPositionSmoothingEnabled(position_smoothing_speed bool) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[bool](0, abi, position_smoothing_speed)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Camera2D.set_position_smoothing_enabled, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self Camera2D) IsPositionSmoothingEnabled() bool {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Camera2D.is_position_smoothing_enabled, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self Camera2D) SetRotationSmoothingEnabled(enabled bool) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[bool](0, abi, enabled)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Camera2D.set_rotation_smoothing_enabled, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self Camera2D) IsRotationSmoothingEnabled() bool {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Camera2D.is_rotation_smoothing_enabled, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self Camera2D) SetRotationSmoothingSpeed(speed Float) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Float](0, abi, speed)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Camera2D.set_rotation_smoothing_speed, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self Camera2D) GetRotationSmoothingSpeed() Float {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Camera2D.get_rotation_smoothing_speed, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Float](abi)
	abi.free()
	return ret
}

func (self Camera2D) ForceUpdateScroll() {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Camera2D.force_update_scroll, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self Camera2D) ResetSmoothing() {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Camera2D.reset_smoothing, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self Camera2D) Align() {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Camera2D.align, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self Camera2D) SetScreenDrawingEnabled(screen_drawing_enabled bool) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[bool](0, abi, screen_drawing_enabled)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Camera2D.set_screen_drawing_enabled, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self Camera2D) IsScreenDrawingEnabled() bool {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Camera2D.is_screen_drawing_enabled, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self Camera2D) SetLimitDrawingEnabled(limit_drawing_enabled bool) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[bool](0, abi, limit_drawing_enabled)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Camera2D.set_limit_drawing_enabled, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self Camera2D) IsLimitDrawingEnabled() bool {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Camera2D.is_limit_drawing_enabled, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self Camera2D) SetMarginDrawingEnabled(margin_drawing_enabled bool) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[bool](0, abi, margin_drawing_enabled)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Camera2D.set_margin_drawing_enabled, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self Camera2D) IsMarginDrawingEnabled() bool {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Camera2D.is_margin_drawing_enabled, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self Camera2D) virtual(name string) reflect.Value {
	switch name {
	default:
		return self.Super().virtual(name)
	}
}

type Camera3DProjectionType int64

type Camera3DKeepAspect int64

type Camera3DDopplerTracking int64
type Camera3D struct{ Class[Camera3D, Node3D] }

func (self Camera3D) Node3D() Node3D { return *self.Super() }

func (self Camera3D) Node() Node { return *self.Super().Super() }

func (self Camera3D) Object() Object { return *self.Super().Super().Super() }

func (self Camera3D) ProjectRayNormal(screen_point Vector2) Vector3 {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Vector2](0, abi, screen_point)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Camera3D.project_ray_normal, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Vector3](abi)
	abi.free()
	return ret
}

func (self Camera3D) ProjectLocalRayNormal(screen_point Vector2) Vector3 {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Vector2](0, abi, screen_point)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Camera3D.project_local_ray_normal, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Vector3](abi)
	abi.free()
	return ret
}

func (self Camera3D) ProjectRayOrigin(screen_point Vector2) Vector3 {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Vector2](0, abi, screen_point)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Camera3D.project_ray_origin, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Vector3](abi)
	abi.free()
	return ret
}

func (self Camera3D) UnprojectPosition(world_point Vector3) Vector2 {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Vector3](0, abi, world_point)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Camera3D.unproject_position, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Vector2](abi)
	abi.free()
	return ret
}

func (self Camera3D) IsPositionBehind(world_point Vector3) bool {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Vector3](0, abi, world_point)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Camera3D.is_position_behind, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self Camera3D) ProjectPosition(screen_point Vector2, z_depth Float) Vector3 {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Vector2](0, abi, screen_point)
	frameSet[Float](1, abi, z_depth)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Camera3D.project_position, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Vector3](abi)
	abi.free()
	return ret
}

func (self Camera3D) SetPerspective(fov Float, z_near Float, z_far Float) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Float](0, abi, fov)
	frameSet[Float](1, abi, z_near)
	frameSet[Float](2, abi, z_far)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Camera3D.set_perspective, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self Camera3D) SetOrthogonal(size Float, z_near Float, z_far Float) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Float](0, abi, size)
	frameSet[Float](1, abi, z_near)
	frameSet[Float](2, abi, z_far)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Camera3D.set_orthogonal, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self Camera3D) SetFrustum(size Float, offset Vector2, z_near Float, z_far Float) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Float](0, abi, size)
	frameSet[Vector2](1, abi, offset)
	frameSet[Float](2, abi, z_near)
	frameSet[Float](3, abi, z_far)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Camera3D.set_frustum, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self Camera3D) MakeCurrent() {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Camera3D.make_current, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self Camera3D) ClearCurrent(enable_next bool) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[bool](0, abi, enable_next)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Camera3D.clear_current, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self Camera3D) SetCurrent(enabled bool) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[bool](0, abi, enabled)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Camera3D.set_current, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self Camera3D) IsCurrent() bool {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Camera3D.is_current, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self Camera3D) GetCameraTransform() Transform3D {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Camera3D.get_camera_transform, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Transform3D](abi)
	abi.free()
	return ret
}

func (self Camera3D) GetCameraProjection() Projection {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Camera3D.get_camera_projection, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Projection](abi)
	abi.free()
	return ret
}

func (self Camera3D) GetFov() Float {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Camera3D.get_fov, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Float](abi)
	abi.free()
	return ret
}

func (self Camera3D) GetFrustumOffset() Vector2 {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Camera3D.get_frustum_offset, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Vector2](abi)
	abi.free()
	return ret
}

func (self Camera3D) GetSize() Float {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Camera3D.get_size, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Float](abi)
	abi.free()
	return ret
}

func (self Camera3D) GetFar() Float {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Camera3D.get_far, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Float](abi)
	abi.free()
	return ret
}

func (self Camera3D) GetNear() Float {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Camera3D.get_near, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Float](abi)
	abi.free()
	return ret
}

func (self Camera3D) SetFov(fov Float) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Float](0, abi, fov)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Camera3D.set_fov, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self Camera3D) SetFrustumOffset(offset Vector2) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Vector2](0, abi, offset)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Camera3D.set_frustum_offset, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self Camera3D) SetSize(size Float) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Float](0, abi, size)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Camera3D.set_size, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self Camera3D) SetFar(far Float) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Float](0, abi, far)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Camera3D.set_far, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self Camera3D) SetNear(near Float) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Float](0, abi, near)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Camera3D.set_near, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self Camera3D) GetProjection() Camera3DProjectionType {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Camera3D.get_projection, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Camera3DProjectionType](abi)
	abi.free()
	return ret
}

func (self Camera3D) SetProjection(mode Camera3DProjectionType) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Camera3DProjectionType](0, abi, mode)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Camera3D.set_projection, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self Camera3D) SetHOffset(offset Float) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Float](0, abi, offset)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Camera3D.set_h_offset, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self Camera3D) GetHOffset() Float {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Camera3D.get_h_offset, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Float](abi)
	abi.free()
	return ret
}

func (self Camera3D) SetVOffset(offset Float) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Float](0, abi, offset)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Camera3D.set_v_offset, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self Camera3D) GetVOffset() Float {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Camera3D.get_v_offset, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Float](abi)
	abi.free()
	return ret
}

func (self Camera3D) SetCullMask(mask Int) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Int](0, abi, mask)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Camera3D.set_cull_mask, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self Camera3D) GetCullMask() Int {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Camera3D.get_cull_mask, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Int](abi)
	abi.free()
	return ret
}

func (self Camera3D) SetEnvironment(env Environment) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Environment](0, abi, env)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Camera3D.set_environment, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self Camera3D) GetEnvironment() Environment {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Camera3D.get_environment, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Environment](abi)
	abi.free()
	return ret
}

func (self Camera3D) SetAttributes(env CameraAttributes) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[CameraAttributes](0, abi, env)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Camera3D.set_attributes, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self Camera3D) GetAttributes() CameraAttributes {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Camera3D.get_attributes, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[CameraAttributes](abi)
	abi.free()
	return ret
}

func (self Camera3D) SetKeepAspectMode(mode Camera3DKeepAspect) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Camera3DKeepAspect](0, abi, mode)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Camera3D.set_keep_aspect_mode, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self Camera3D) GetKeepAspectMode() Camera3DKeepAspect {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Camera3D.get_keep_aspect_mode, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Camera3DKeepAspect](abi)
	abi.free()
	return ret
}

func (self Camera3D) SetDopplerTracking(mode Camera3DDopplerTracking) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Camera3DDopplerTracking](0, abi, mode)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Camera3D.set_doppler_tracking, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self Camera3D) GetDopplerTracking() Camera3DDopplerTracking {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Camera3D.get_doppler_tracking, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Camera3DDopplerTracking](abi)
	abi.free()
	return ret
}

func (self Camera3D) GetFrustum() ArrayOf[Plane] {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Camera3D.get_frustum, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[ArrayOf[Plane]](abi)
	abi.free()
	return ret
}

func (self Camera3D) IsPositionInFrustum(world_point Vector3) bool {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Vector3](0, abi, world_point)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Camera3D.is_position_in_frustum, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self Camera3D) GetCameraRid() RID {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Camera3D.get_camera_rid, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[RID](abi)
	abi.free()
	return ret
}

func (self Camera3D) GetPyramidShapeRid() RID {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Camera3D.get_pyramid_shape_rid, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[RID](abi)
	abi.free()
	return ret
}

func (self Camera3D) SetCullMaskValue(layer_number Int, value bool) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Int](0, abi, layer_number)
	frameSet[bool](1, abi, value)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Camera3D.set_cull_mask_value, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self Camera3D) GetCullMaskValue(layer_number Int) bool {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Int](0, abi, layer_number)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Camera3D.get_cull_mask_value, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self Camera3D) virtual(name string) reflect.Value {
	switch name {
	default:
		return self.Super().virtual(name)
	}
}

type CameraAttributes struct {
	Class[CameraAttributes, Resource]
}

func (self CameraAttributes) Resource() Resource { return *self.Super() }

func (self CameraAttributes) RefCounted() RefCounted { return *self.Super().Super() }

func (self CameraAttributes) Object() Object { return *self.Super().Super().Super() }

func (self CameraAttributes) SetExposureMultiplier(multiplier Float) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Float](0, abi, multiplier)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.CameraAttributes.set_exposure_multiplier, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self CameraAttributes) GetExposureMultiplier() Float {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.CameraAttributes.get_exposure_multiplier, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Float](abi)
	abi.free()
	return ret
}

func (self CameraAttributes) SetExposureSensitivity(sensitivity Float) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Float](0, abi, sensitivity)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.CameraAttributes.set_exposure_sensitivity, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self CameraAttributes) GetExposureSensitivity() Float {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.CameraAttributes.get_exposure_sensitivity, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Float](abi)
	abi.free()
	return ret
}

func (self CameraAttributes) SetAutoExposureEnabled(enabled bool) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[bool](0, abi, enabled)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.CameraAttributes.set_auto_exposure_enabled, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self CameraAttributes) IsAutoExposureEnabled() bool {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.CameraAttributes.is_auto_exposure_enabled, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self CameraAttributes) SetAutoExposureSpeed(exposure_speed Float) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Float](0, abi, exposure_speed)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.CameraAttributes.set_auto_exposure_speed, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self CameraAttributes) GetAutoExposureSpeed() Float {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.CameraAttributes.get_auto_exposure_speed, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Float](abi)
	abi.free()
	return ret
}

func (self CameraAttributes) SetAutoExposureScale(exposure_grey Float) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Float](0, abi, exposure_grey)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.CameraAttributes.set_auto_exposure_scale, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self CameraAttributes) GetAutoExposureScale() Float {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.CameraAttributes.get_auto_exposure_scale, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Float](abi)
	abi.free()
	return ret
}

func (self CameraAttributes) virtual(name string) reflect.Value {
	switch name {
	default:
		return self.Super().virtual(name)
	}
}

type CanvasItemTextureFilter int64

type CanvasItemTextureRepeat int64

type CanvasItemClipChildrenMode int64
type CanvasItem struct{ Class[CanvasItem, Node] }

func (self CanvasItem) Node() Node { return *self.Super() }

func (self CanvasItem) Object() Object { return *self.Super().Super() }

func (CanvasItem) _draw(impl func(ptr unsafe.Pointer, ctx Context), api *API) (cb ExtensionClassCallVirtualFunc) {
	cb.Set(func(class cgo.Handle, p_args godotArgs, p_back godotBack) {
		ctx := newContext(api)
		self := reflect.ValueOf(class.Value()).UnsafePointer()
		impl(self, ctx)
		ctx.Free()
	})
	return
}

func (self CanvasItem) GetCanvasItem() RID {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.CanvasItem.get_canvas_item, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[RID](abi)
	abi.free()
	return ret
}

func (self CanvasItem) SetVisible(visible bool) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[bool](0, abi, visible)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.CanvasItem.set_visible, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self CanvasItem) IsVisible() bool {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.CanvasItem.is_visible, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self CanvasItem) IsVisibleInTree() bool {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.CanvasItem.is_visible_in_tree, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self CanvasItem) Show() {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.CanvasItem.show, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self CanvasItem) Hide() {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.CanvasItem.hide, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self CanvasItem) QueueRedraw() {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.CanvasItem.queue_redraw, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self CanvasItem) MoveToFront() {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.CanvasItem.move_to_front, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self CanvasItem) SetAsTopLevel(enable bool) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[bool](0, abi, enable)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.CanvasItem.set_as_top_level, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self CanvasItem) IsSetAsTopLevel() bool {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.CanvasItem.is_set_as_top_level, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self CanvasItem) SetLightMask(light_mask Int) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Int](0, abi, light_mask)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.CanvasItem.set_light_mask, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self CanvasItem) GetLightMask() Int {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.CanvasItem.get_light_mask, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Int](abi)
	abi.free()
	return ret
}

func (self CanvasItem) SetModulate(modulate Color) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Color](0, abi, modulate)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.CanvasItem.set_modulate, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self CanvasItem) GetModulate() Color {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.CanvasItem.get_modulate, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Color](abi)
	abi.free()
	return ret
}

func (self CanvasItem) SetSelfModulate(self_modulate Color) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Color](0, abi, self_modulate)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.CanvasItem.set_self_modulate, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self CanvasItem) GetSelfModulate() Color {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.CanvasItem.get_self_modulate, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Color](abi)
	abi.free()
	return ret
}

func (self CanvasItem) SetZIndex(z_index Int) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Int](0, abi, z_index)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.CanvasItem.set_z_index, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self CanvasItem) GetZIndex() Int {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.CanvasItem.get_z_index, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Int](abi)
	abi.free()
	return ret
}

func (self CanvasItem) SetZAsRelative(enable bool) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[bool](0, abi, enable)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.CanvasItem.set_z_as_relative, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self CanvasItem) IsZRelative() bool {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.CanvasItem.is_z_relative, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self CanvasItem) SetYSortEnabled(enabled bool) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[bool](0, abi, enabled)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.CanvasItem.set_y_sort_enabled, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self CanvasItem) IsYSortEnabled() bool {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.CanvasItem.is_y_sort_enabled, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self CanvasItem) SetDrawBehindParent(enable bool) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[bool](0, abi, enable)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.CanvasItem.set_draw_behind_parent, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self CanvasItem) IsDrawBehindParentEnabled() bool {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.CanvasItem.is_draw_behind_parent_enabled, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self CanvasItem) DrawLine(from Vector2, to Vector2, color Color, width Float, antialiased bool) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Vector2](0, abi, from)
	frameSet[Vector2](1, abi, to)
	frameSet[Color](2, abi, color)
	frameSet[Float](3, abi, width)
	frameSet[bool](4, abi, antialiased)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.CanvasItem.draw_line, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self CanvasItem) DrawDashedLine(from Vector2, to Vector2, color Color, width Float, dash Float, aligned bool) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Vector2](0, abi, from)
	frameSet[Vector2](1, abi, to)
	frameSet[Color](2, abi, color)
	frameSet[Float](3, abi, width)
	frameSet[Float](4, abi, dash)
	frameSet[bool](5, abi, aligned)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.CanvasItem.draw_dashed_line, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self CanvasItem) DrawPolyline(points PackedVector2Array, color Color, width Float, antialiased bool) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[PackedVector2Array](0, abi, points)
	frameSet[Color](1, abi, color)
	frameSet[Float](2, abi, width)
	frameSet[bool](3, abi, antialiased)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.CanvasItem.draw_polyline, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self CanvasItem) DrawPolylineColors(points PackedVector2Array, colors PackedColorArray, width Float, antialiased bool) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[PackedVector2Array](0, abi, points)
	frameSet[PackedColorArray](1, abi, colors)
	frameSet[Float](2, abi, width)
	frameSet[bool](3, abi, antialiased)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.CanvasItem.draw_polyline_colors, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self CanvasItem) DrawArc(center Vector2, radius Float, start_angle Float, end_angle Float, point_count Int, color Color, width Float, antialiased bool) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Vector2](0, abi, center)
	frameSet[Float](1, abi, radius)
	frameSet[Float](2, abi, start_angle)
	frameSet[Float](3, abi, end_angle)
	frameSet[Int](4, abi, point_count)
	frameSet[Color](5, abi, color)
	frameSet[Float](6, abi, width)
	frameSet[bool](7, abi, antialiased)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.CanvasItem.draw_arc, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self CanvasItem) DrawMultiline(points PackedVector2Array, color Color, width Float) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[PackedVector2Array](0, abi, points)
	frameSet[Color](1, abi, color)
	frameSet[Float](2, abi, width)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.CanvasItem.draw_multiline, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self CanvasItem) DrawMultilineColors(points PackedVector2Array, colors PackedColorArray, width Float) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[PackedVector2Array](0, abi, points)
	frameSet[PackedColorArray](1, abi, colors)
	frameSet[Float](2, abi, width)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.CanvasItem.draw_multiline_colors, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self CanvasItem) DrawRect(rect Rect2, color Color, filled bool, width Float) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Rect2](0, abi, rect)
	frameSet[Color](1, abi, color)
	frameSet[bool](2, abi, filled)
	frameSet[Float](3, abi, width)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.CanvasItem.draw_rect, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self CanvasItem) DrawCircle(position Vector2, radius Float, color Color) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Vector2](0, abi, position)
	frameSet[Float](1, abi, radius)
	frameSet[Color](2, abi, color)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.CanvasItem.draw_circle, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self CanvasItem) DrawTexture(texture Texture2D, position Vector2, modulate Color) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Texture2D](0, abi, texture)
	frameSet[Vector2](1, abi, position)
	frameSet[Color](2, abi, modulate)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.CanvasItem.draw_texture, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self CanvasItem) DrawTextureRect(texture Texture2D, rect Rect2, tile bool, modulate Color, transpose bool) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Texture2D](0, abi, texture)
	frameSet[Rect2](1, abi, rect)
	frameSet[bool](2, abi, tile)
	frameSet[Color](3, abi, modulate)
	frameSet[bool](4, abi, transpose)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.CanvasItem.draw_texture_rect, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self CanvasItem) DrawTextureRectRegion(texture Texture2D, rect Rect2, src_rect Rect2, modulate Color, transpose bool, clip_uv bool) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Texture2D](0, abi, texture)
	frameSet[Rect2](1, abi, rect)
	frameSet[Rect2](2, abi, src_rect)
	frameSet[Color](3, abi, modulate)
	frameSet[bool](4, abi, transpose)
	frameSet[bool](5, abi, clip_uv)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.CanvasItem.draw_texture_rect_region, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self CanvasItem) DrawMsdfTextureRectRegion(texture Texture2D, rect Rect2, src_rect Rect2, modulate Color, outline Float, pixel_range Float, scale Float) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Texture2D](0, abi, texture)
	frameSet[Rect2](1, abi, rect)
	frameSet[Rect2](2, abi, src_rect)
	frameSet[Color](3, abi, modulate)
	frameSet[Float](4, abi, outline)
	frameSet[Float](5, abi, pixel_range)
	frameSet[Float](6, abi, scale)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.CanvasItem.draw_msdf_texture_rect_region, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self CanvasItem) DrawLcdTextureRectRegion(texture Texture2D, rect Rect2, src_rect Rect2, modulate Color) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Texture2D](0, abi, texture)
	frameSet[Rect2](1, abi, rect)
	frameSet[Rect2](2, abi, src_rect)
	frameSet[Color](3, abi, modulate)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.CanvasItem.draw_lcd_texture_rect_region, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self CanvasItem) DrawStyleBox(style_box StyleBox, rect Rect2) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[StyleBox](0, abi, style_box)
	frameSet[Rect2](1, abi, rect)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.CanvasItem.draw_style_box, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self CanvasItem) DrawPrimitive(points PackedVector2Array, colors PackedColorArray, uvs PackedVector2Array, texture Texture2D) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[PackedVector2Array](0, abi, points)
	frameSet[PackedColorArray](1, abi, colors)
	frameSet[PackedVector2Array](2, abi, uvs)
	frameSet[Texture2D](3, abi, texture)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.CanvasItem.draw_primitive, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self CanvasItem) DrawPolygon(points PackedVector2Array, colors PackedColorArray, uvs PackedVector2Array, texture Texture2D) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[PackedVector2Array](0, abi, points)
	frameSet[PackedColorArray](1, abi, colors)
	frameSet[PackedVector2Array](2, abi, uvs)
	frameSet[Texture2D](3, abi, texture)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.CanvasItem.draw_polygon, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self CanvasItem) DrawColoredPolygon(points PackedVector2Array, color Color, uvs PackedVector2Array, texture Texture2D) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[PackedVector2Array](0, abi, points)
	frameSet[Color](1, abi, color)
	frameSet[PackedVector2Array](2, abi, uvs)
	frameSet[Texture2D](3, abi, texture)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.CanvasItem.draw_colored_polygon, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self CanvasItem) DrawString(font Font, pos Vector2, text String, alignment HorizontalAlignment, width Float, font_size Int, modulate Color, justification_flags TextServerJustificationFlag, direction TextServerDirection, orientation TextServerOrientation) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Font](0, abi, font)
	frameSet[Vector2](1, abi, pos)
	frameSet[String](2, abi, text)
	frameSet[HorizontalAlignment](3, abi, alignment)
	frameSet[Float](4, abi, width)
	frameSet[Int](5, abi, font_size)
	frameSet[Color](6, abi, modulate)
	frameSet[TextServerJustificationFlag](7, abi, justification_flags)
	frameSet[TextServerDirection](8, abi, direction)
	frameSet[TextServerOrientation](9, abi, orientation)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.CanvasItem.draw_string, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self CanvasItem) DrawMultilineString(font Font, pos Vector2, text String, alignment HorizontalAlignment, width Float, font_size Int, max_lines Int, modulate Color, brk_flags TextServerLineBreakFlag, justification_flags TextServerJustificationFlag, direction TextServerDirection, orientation TextServerOrientation) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Font](0, abi, font)
	frameSet[Vector2](1, abi, pos)
	frameSet[String](2, abi, text)
	frameSet[HorizontalAlignment](3, abi, alignment)
	frameSet[Float](4, abi, width)
	frameSet[Int](5, abi, font_size)
	frameSet[Int](6, abi, max_lines)
	frameSet[Color](7, abi, modulate)
	frameSet[TextServerLineBreakFlag](8, abi, brk_flags)
	frameSet[TextServerJustificationFlag](9, abi, justification_flags)
	frameSet[TextServerDirection](10, abi, direction)
	frameSet[TextServerOrientation](11, abi, orientation)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.CanvasItem.draw_multiline_string, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self CanvasItem) DrawStringOutline(font Font, pos Vector2, text String, alignment HorizontalAlignment, width Float, font_size Int, size Int, modulate Color, justification_flags TextServerJustificationFlag, direction TextServerDirection, orientation TextServerOrientation) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Font](0, abi, font)
	frameSet[Vector2](1, abi, pos)
	frameSet[String](2, abi, text)
	frameSet[HorizontalAlignment](3, abi, alignment)
	frameSet[Float](4, abi, width)
	frameSet[Int](5, abi, font_size)
	frameSet[Int](6, abi, size)
	frameSet[Color](7, abi, modulate)
	frameSet[TextServerJustificationFlag](8, abi, justification_flags)
	frameSet[TextServerDirection](9, abi, direction)
	frameSet[TextServerOrientation](10, abi, orientation)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.CanvasItem.draw_string_outline, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self CanvasItem) DrawMultilineStringOutline(font Font, pos Vector2, text String, alignment HorizontalAlignment, width Float, font_size Int, max_lines Int, size Int, modulate Color, brk_flags TextServerLineBreakFlag, justification_flags TextServerJustificationFlag, direction TextServerDirection, orientation TextServerOrientation) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Font](0, abi, font)
	frameSet[Vector2](1, abi, pos)
	frameSet[String](2, abi, text)
	frameSet[HorizontalAlignment](3, abi, alignment)
	frameSet[Float](4, abi, width)
	frameSet[Int](5, abi, font_size)
	frameSet[Int](6, abi, max_lines)
	frameSet[Int](7, abi, size)
	frameSet[Color](8, abi, modulate)
	frameSet[TextServerLineBreakFlag](9, abi, brk_flags)
	frameSet[TextServerJustificationFlag](10, abi, justification_flags)
	frameSet[TextServerDirection](11, abi, direction)
	frameSet[TextServerOrientation](12, abi, orientation)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.CanvasItem.draw_multiline_string_outline, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self CanvasItem) DrawChar(font Font, pos Vector2, char String, font_size Int, modulate Color) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Font](0, abi, font)
	frameSet[Vector2](1, abi, pos)
	frameSet[String](2, abi, char)
	frameSet[Int](3, abi, font_size)
	frameSet[Color](4, abi, modulate)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.CanvasItem.draw_char, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self CanvasItem) DrawCharOutline(font Font, pos Vector2, char String, font_size Int, size Int, modulate Color) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Font](0, abi, font)
	frameSet[Vector2](1, abi, pos)
	frameSet[String](2, abi, char)
	frameSet[Int](3, abi, font_size)
	frameSet[Int](4, abi, size)
	frameSet[Color](5, abi, modulate)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.CanvasItem.draw_char_outline, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self CanvasItem) DrawMesh(mesh Mesh, texture Texture2D, transform Transform2D, modulate Color) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Mesh](0, abi, mesh)
	frameSet[Texture2D](1, abi, texture)
	frameSet[Transform2D](2, abi, transform)
	frameSet[Color](3, abi, modulate)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.CanvasItem.draw_mesh, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self CanvasItem) DrawMultimesh(multimesh MultiMesh, texture Texture2D) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[MultiMesh](0, abi, multimesh)
	frameSet[Texture2D](1, abi, texture)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.CanvasItem.draw_multimesh, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self CanvasItem) DrawSetTransform(position Vector2, rotation Float, scale Vector2) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Vector2](0, abi, position)
	frameSet[Float](1, abi, rotation)
	frameSet[Vector2](2, abi, scale)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.CanvasItem.draw_set_transform, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self CanvasItem) DrawSetTransformMatrix(xform Transform2D) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Transform2D](0, abi, xform)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.CanvasItem.draw_set_transform_matrix, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self CanvasItem) DrawAnimationSlice(animation_length Float, slice_begin Float, slice_end Float, offset Float) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Float](0, abi, animation_length)
	frameSet[Float](1, abi, slice_begin)
	frameSet[Float](2, abi, slice_end)
	frameSet[Float](3, abi, offset)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.CanvasItem.draw_animation_slice, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self CanvasItem) DrawEndAnimation() {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.CanvasItem.draw_end_animation, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self CanvasItem) GetTransform() Transform2D {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.CanvasItem.get_transform, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Transform2D](abi)
	abi.free()
	return ret
}

func (self CanvasItem) GetGlobalTransform() Transform2D {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.CanvasItem.get_global_transform, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Transform2D](abi)
	abi.free()
	return ret
}

func (self CanvasItem) GetGlobalTransformWithCanvas() Transform2D {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.CanvasItem.get_global_transform_with_canvas, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Transform2D](abi)
	abi.free()
	return ret
}

func (self CanvasItem) GetViewportTransform() Transform2D {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.CanvasItem.get_viewport_transform, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Transform2D](abi)
	abi.free()
	return ret
}

func (self CanvasItem) GetViewportRect() Rect2 {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.CanvasItem.get_viewport_rect, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Rect2](abi)
	abi.free()
	return ret
}

func (self CanvasItem) GetCanvasTransform() Transform2D {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.CanvasItem.get_canvas_transform, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Transform2D](abi)
	abi.free()
	return ret
}

func (self CanvasItem) GetScreenTransform() Transform2D {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.CanvasItem.get_screen_transform, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Transform2D](abi)
	abi.free()
	return ret
}

func (self CanvasItem) GetLocalMousePosition() Vector2 {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.CanvasItem.get_local_mouse_position, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Vector2](abi)
	abi.free()
	return ret
}

func (self CanvasItem) GetGlobalMousePosition() Vector2 {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.CanvasItem.get_global_mouse_position, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Vector2](abi)
	abi.free()
	return ret
}

func (self CanvasItem) GetCanvas() RID {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.CanvasItem.get_canvas, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[RID](abi)
	abi.free()
	return ret
}

func (self CanvasItem) GetWorld2d() World2D {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.CanvasItem.get_world_2d, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[World2D](abi)
	abi.free()
	return ret
}

func (self CanvasItem) SetMaterial(material Material) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Material](0, abi, material)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.CanvasItem.set_material, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self CanvasItem) GetMaterial() Material {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.CanvasItem.get_material, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Material](abi)
	abi.free()
	return ret
}

func (self CanvasItem) SetUseParentMaterial(enable bool) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[bool](0, abi, enable)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.CanvasItem.set_use_parent_material, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self CanvasItem) GetUseParentMaterial() bool {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.CanvasItem.get_use_parent_material, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self CanvasItem) SetNotifyLocalTransform(enable bool) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[bool](0, abi, enable)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.CanvasItem.set_notify_local_transform, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self CanvasItem) IsLocalTransformNotificationEnabled() bool {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.CanvasItem.is_local_transform_notification_enabled, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self CanvasItem) SetNotifyTransform(enable bool) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[bool](0, abi, enable)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.CanvasItem.set_notify_transform, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self CanvasItem) IsTransformNotificationEnabled() bool {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.CanvasItem.is_transform_notification_enabled, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self CanvasItem) ForceUpdateTransform() {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.CanvasItem.force_update_transform, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self CanvasItem) MakeCanvasPositionLocal(screen_point Vector2) Vector2 {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Vector2](0, abi, screen_point)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.CanvasItem.make_canvas_position_local, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Vector2](abi)
	abi.free()
	return ret
}

func (self CanvasItem) MakeInputLocal(event InputEvent) InputEvent {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[InputEvent](0, abi, event)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.CanvasItem.make_input_local, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[InputEvent](abi)
	abi.free()
	return ret
}

func (self CanvasItem) SetVisibilityLayer(layer Int) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Int](0, abi, layer)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.CanvasItem.set_visibility_layer, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self CanvasItem) GetVisibilityLayer() Int {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.CanvasItem.get_visibility_layer, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Int](abi)
	abi.free()
	return ret
}

func (self CanvasItem) SetVisibilityLayerBit(layer Int, enabled bool) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Int](0, abi, layer)
	frameSet[bool](1, abi, enabled)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.CanvasItem.set_visibility_layer_bit, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self CanvasItem) GetVisibilityLayerBit(layer Int) bool {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Int](0, abi, layer)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.CanvasItem.get_visibility_layer_bit, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self CanvasItem) SetTextureFilter(mode CanvasItemTextureFilter) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[CanvasItemTextureFilter](0, abi, mode)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.CanvasItem.set_texture_filter, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self CanvasItem) GetTextureFilter() CanvasItemTextureFilter {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.CanvasItem.get_texture_filter, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[CanvasItemTextureFilter](abi)
	abi.free()
	return ret
}

func (self CanvasItem) SetTextureRepeat(mode CanvasItemTextureRepeat) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[CanvasItemTextureRepeat](0, abi, mode)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.CanvasItem.set_texture_repeat, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self CanvasItem) GetTextureRepeat() CanvasItemTextureRepeat {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.CanvasItem.get_texture_repeat, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[CanvasItemTextureRepeat](abi)
	abi.free()
	return ret
}

func (self CanvasItem) SetClipChildrenMode(mode CanvasItemClipChildrenMode) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[CanvasItemClipChildrenMode](0, abi, mode)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.CanvasItem.set_clip_children_mode, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self CanvasItem) GetClipChildrenMode() CanvasItemClipChildrenMode {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.CanvasItem.get_clip_children_mode, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[CanvasItemClipChildrenMode](abi)
	abi.free()
	return ret
}

func (self CanvasItem) virtual(name string) reflect.Value {
	switch name {
	case "_draw":
		return reflect.ValueOf(self._draw)
	default:
		return self.Super().virtual(name)
	}
}

type ConcavePolygonShape3D struct {
	Class[ConcavePolygonShape3D, Shape3D]
}

func (self ConcavePolygonShape3D) Shape3D() Shape3D { return *self.Super() }

func (self ConcavePolygonShape3D) Resource() Resource { return *self.Super().Super() }

func (self ConcavePolygonShape3D) RefCounted() RefCounted { return *self.Super().Super().Super() }

func (self ConcavePolygonShape3D) Object() Object { return *self.Super().Super().Super().Super() }

func (self ConcavePolygonShape3D) SetFaces(faces PackedVector3Array) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[PackedVector3Array](0, abi, faces)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.ConcavePolygonShape3D.set_faces, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self ConcavePolygonShape3D) GetFaces(ctx Context) PackedVector3Array {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.ConcavePolygonShape3D.get_faces, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[[2]uintptr](abi)
	abi.free()
	return mmm.Make[API, PackedVector3Array, [2]uintptr](ctx, selfPtr.API, ret)
}

func (self ConcavePolygonShape3D) SetBackfaceCollisionEnabled(enabled bool) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[bool](0, abi, enabled)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.ConcavePolygonShape3D.set_backface_collision_enabled, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self ConcavePolygonShape3D) IsBackfaceCollisionEnabled() bool {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.ConcavePolygonShape3D.is_backface_collision_enabled, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self ConcavePolygonShape3D) virtual(name string) reflect.Value {
	switch name {
	default:
		return self.Super().virtual(name)
	}
}

type ControlFocusMode int64

type ControlCursorShape int64

type ControlLayoutPreset int64

type ControlLayoutPresetMode int64

type ControlSizeFlags int64

type ControlMouseFilter int64

type ControlGrowDirection int64

type ControlAnchor int64

type ControlLayoutDirection int64

type ControlTextDirection int64
type Control struct{ Class[Control, CanvasItem] }

func (self Control) CanvasItem() CanvasItem { return *self.Super() }

func (self Control) Node() Node { return *self.Super().Super() }

func (self Control) Object() Object { return *self.Super().Super().Super() }

func (Control) _has_point(impl func(ptr unsafe.Pointer, ctx Context, point Vector2) bool, api *API) (cb ExtensionClassCallVirtualFunc) {
	cb.Set(func(class cgo.Handle, p_args godotArgs, p_back godotBack) {
		ctx := newContext(api)
		var point = godotGet[Vector2](p_args, 0)
		self := reflect.ValueOf(class.Value()).UnsafePointer()
		ret := impl(self, ctx, point)
		ctx.Free()
		godotSet[bool](p_back, ret)
	})
	return
}

func (Control) _structured_text_parser(impl func(ptr unsafe.Pointer, ctx Context, args Array, text String) ArrayOf[Vector3i], api *API) (cb ExtensionClassCallVirtualFunc) {
	cb.Set(func(class cgo.Handle, p_args godotArgs, p_back godotBack) {
		ctx := newContext(api)
		var args = godotGet[Array](p_args, 0)
		var text = godotGet[String](p_args, 1)
		self := reflect.ValueOf(class.Value()).UnsafePointer()
		ret := impl(self, ctx, args, text)
		ctx.Free()
		godotSet[ArrayOf[Vector3i]](p_back, ret)
	})
	return
}

func (Control) _get_minimum_size(impl func(ptr unsafe.Pointer, ctx Context) Vector2, api *API) (cb ExtensionClassCallVirtualFunc) {
	cb.Set(func(class cgo.Handle, p_args godotArgs, p_back godotBack) {
		ctx := newContext(api)
		self := reflect.ValueOf(class.Value()).UnsafePointer()
		ret := impl(self, ctx)
		ctx.Free()
		godotSet[Vector2](p_back, ret)
	})
	return
}

func (Control) _get_tooltip(impl func(ptr unsafe.Pointer, ctx Context, at_position Vector2) String, api *API) (cb ExtensionClassCallVirtualFunc) {
	cb.Set(func(class cgo.Handle, p_args godotArgs, p_back godotBack) {
		ctx := newContext(api)
		var at_position = godotGet[Vector2](p_args, 0)
		self := reflect.ValueOf(class.Value()).UnsafePointer()
		ret := impl(self, ctx, at_position)
		mmm.MarkFree(ret)
		ctx.Free()
		godotSet[String](p_back, ret)
	})
	return
}

func (Control) _get_drag_data(impl func(ptr unsafe.Pointer, ctx Context, at_position Vector2) Variant, api *API) (cb ExtensionClassCallVirtualFunc) {
	cb.Set(func(class cgo.Handle, p_args godotArgs, p_back godotBack) {
		ctx := newContext(api)
		var at_position = godotGet[Vector2](p_args, 0)
		self := reflect.ValueOf(class.Value()).UnsafePointer()
		ret := impl(self, ctx, at_position)
		mmm.MarkFree(ret)
		ctx.Free()
		godotSet[Variant](p_back, ret)
	})
	return
}

func (Control) _can_drop_data(impl func(ptr unsafe.Pointer, ctx Context, at_position Vector2, data Variant) bool, api *API) (cb ExtensionClassCallVirtualFunc) {
	cb.Set(func(class cgo.Handle, p_args godotArgs, p_back godotBack) {
		ctx := newContext(api)
		var at_position = godotGet[Vector2](p_args, 0)
		var data = godotGet[Variant](p_args, 1)
		self := reflect.ValueOf(class.Value()).UnsafePointer()
		ret := impl(self, ctx, at_position, data)
		ctx.Free()
		godotSet[bool](p_back, ret)
	})
	return
}

func (Control) _drop_data(impl func(ptr unsafe.Pointer, ctx Context, at_position Vector2, data Variant), api *API) (cb ExtensionClassCallVirtualFunc) {
	cb.Set(func(class cgo.Handle, p_args godotArgs, p_back godotBack) {
		ctx := newContext(api)
		var at_position = godotGet[Vector2](p_args, 0)
		var data = godotGet[Variant](p_args, 1)
		self := reflect.ValueOf(class.Value()).UnsafePointer()
		impl(self, ctx, at_position, data)
		ctx.Free()
	})
	return
}

func (Control) _make_custom_tooltip(impl func(ptr unsafe.Pointer, ctx Context, for_text String) Object, api *API) (cb ExtensionClassCallVirtualFunc) {
	cb.Set(func(class cgo.Handle, p_args godotArgs, p_back godotBack) {
		ctx := newContext(api)
		var for_text = godotGet[String](p_args, 0)
		self := reflect.ValueOf(class.Value()).UnsafePointer()
		ret := impl(self, ctx, for_text)
		ctx.Free()
		godotSet[Object](p_back, ret)
	})
	return
}

func (Control) _gui_input(impl func(ptr unsafe.Pointer, ctx Context, event InputEvent), api *API) (cb ExtensionClassCallVirtualFunc) {
	cb.Set(func(class cgo.Handle, p_args godotArgs, p_back godotBack) {
		ctx := newContext(api)
		var event = godotGet[InputEvent](p_args, 0)
		self := reflect.ValueOf(class.Value()).UnsafePointer()
		impl(self, ctx, event)
		ctx.Free()
	})
	return
}

func (self Control) AcceptEvent() {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Control.accept_event, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self Control) GetMinimumSize() Vector2 {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Control.get_minimum_size, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Vector2](abi)
	abi.free()
	return ret
}

func (self Control) GetCombinedMinimumSize() Vector2 {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Control.get_combined_minimum_size, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Vector2](abi)
	abi.free()
	return ret
}

func (self Control) SetAnchorsPreset(preset ControlLayoutPreset, keep_offsets bool) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[ControlLayoutPreset](0, abi, preset)
	frameSet[bool](1, abi, keep_offsets)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Control.set_anchors_preset, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self Control) SetOffsetsPreset(preset ControlLayoutPreset, resize_mode ControlLayoutPresetMode, margin Int) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[ControlLayoutPreset](0, abi, preset)
	frameSet[ControlLayoutPresetMode](1, abi, resize_mode)
	frameSet[Int](2, abi, margin)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Control.set_offsets_preset, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self Control) SetAnchorsAndOffsetsPreset(preset ControlLayoutPreset, resize_mode ControlLayoutPresetMode, margin Int) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[ControlLayoutPreset](0, abi, preset)
	frameSet[ControlLayoutPresetMode](1, abi, resize_mode)
	frameSet[Int](2, abi, margin)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Control.set_anchors_and_offsets_preset, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self Control) SetAnchor(side Side, anchor Float, keep_offset bool, push_opposite_anchor bool) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Side](0, abi, side)
	frameSet[Float](1, abi, anchor)
	frameSet[bool](2, abi, keep_offset)
	frameSet[bool](3, abi, push_opposite_anchor)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Control.set_anchor, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self Control) GetAnchor(side Side) Float {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Side](0, abi, side)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Control.get_anchor, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Float](abi)
	abi.free()
	return ret
}

func (self Control) SetOffset(side Side, offset Float) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Side](0, abi, side)
	frameSet[Float](1, abi, offset)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Control.set_offset, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self Control) GetOffset(offset Side) Float {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Side](0, abi, offset)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Control.get_offset, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Float](abi)
	abi.free()
	return ret
}

func (self Control) SetAnchorAndOffset(side Side, anchor Float, offset Float, push_opposite_anchor bool) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Side](0, abi, side)
	frameSet[Float](1, abi, anchor)
	frameSet[Float](2, abi, offset)
	frameSet[bool](3, abi, push_opposite_anchor)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Control.set_anchor_and_offset, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self Control) SetBegin(position Vector2) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Vector2](0, abi, position)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Control.set_begin, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self Control) SetEnd(position Vector2) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Vector2](0, abi, position)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Control.set_end, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self Control) SetPosition(position Vector2, keep_offsets bool) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Vector2](0, abi, position)
	frameSet[bool](1, abi, keep_offsets)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Control.set_position, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self Control) SetSize(size Vector2, keep_offsets bool) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Vector2](0, abi, size)
	frameSet[bool](1, abi, keep_offsets)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Control.set_size, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self Control) ResetSize() {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Control.reset_size, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self Control) SetCustomMinimumSize(size Vector2) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Vector2](0, abi, size)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Control.set_custom_minimum_size, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self Control) SetGlobalPosition(position Vector2, keep_offsets bool) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Vector2](0, abi, position)
	frameSet[bool](1, abi, keep_offsets)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Control.set_global_position, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self Control) SetRotation(radians Float) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Float](0, abi, radians)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Control.set_rotation, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self Control) SetRotationDegrees(degrees Float) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Float](0, abi, degrees)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Control.set_rotation_degrees, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self Control) SetScale(scale Vector2) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Vector2](0, abi, scale)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Control.set_scale, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self Control) SetPivotOffset(pivot_offset Vector2) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Vector2](0, abi, pivot_offset)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Control.set_pivot_offset, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self Control) GetBegin() Vector2 {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Control.get_begin, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Vector2](abi)
	abi.free()
	return ret
}

func (self Control) GetEnd() Vector2 {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Control.get_end, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Vector2](abi)
	abi.free()
	return ret
}

func (self Control) GetPosition() Vector2 {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Control.get_position, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Vector2](abi)
	abi.free()
	return ret
}

func (self Control) GetSize() Vector2 {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Control.get_size, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Vector2](abi)
	abi.free()
	return ret
}

func (self Control) GetRotation() Float {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Control.get_rotation, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Float](abi)
	abi.free()
	return ret
}

func (self Control) GetRotationDegrees() Float {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Control.get_rotation_degrees, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Float](abi)
	abi.free()
	return ret
}

func (self Control) GetScale() Vector2 {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Control.get_scale, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Vector2](abi)
	abi.free()
	return ret
}

func (self Control) GetPivotOffset() Vector2 {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Control.get_pivot_offset, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Vector2](abi)
	abi.free()
	return ret
}

func (self Control) GetCustomMinimumSize() Vector2 {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Control.get_custom_minimum_size, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Vector2](abi)
	abi.free()
	return ret
}

func (self Control) GetParentAreaSize() Vector2 {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Control.get_parent_area_size, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Vector2](abi)
	abi.free()
	return ret
}

func (self Control) GetGlobalPosition() Vector2 {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Control.get_global_position, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Vector2](abi)
	abi.free()
	return ret
}

func (self Control) GetScreenPosition() Vector2 {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Control.get_screen_position, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Vector2](abi)
	abi.free()
	return ret
}

func (self Control) GetRect() Rect2 {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Control.get_rect, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Rect2](abi)
	abi.free()
	return ret
}

func (self Control) GetGlobalRect() Rect2 {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Control.get_global_rect, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Rect2](abi)
	abi.free()
	return ret
}

func (self Control) SetFocusMode(mode ControlFocusMode) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[ControlFocusMode](0, abi, mode)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Control.set_focus_mode, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self Control) GetFocusMode() ControlFocusMode {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Control.get_focus_mode, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[ControlFocusMode](abi)
	abi.free()
	return ret
}

func (self Control) HasFocus() bool {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Control.has_focus, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self Control) GrabFocus() {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Control.grab_focus, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self Control) ReleaseFocus() {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Control.release_focus, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self Control) FindPrevValidFocus() Control {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Control.find_prev_valid_focus, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Control](abi)
	abi.free()
	return ret
}

func (self Control) FindNextValidFocus() Control {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Control.find_next_valid_focus, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Control](abi)
	abi.free()
	return ret
}

func (self Control) FindValidFocusNeighbor(side Side) Control {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Side](0, abi, side)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Control.find_valid_focus_neighbor, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Control](abi)
	abi.free()
	return ret
}

func (self Control) SetHSizeFlags(flags ControlSizeFlags) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[ControlSizeFlags](0, abi, flags)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Control.set_h_size_flags, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self Control) GetHSizeFlags() ControlSizeFlags {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Control.get_h_size_flags, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[ControlSizeFlags](abi)
	abi.free()
	return ret
}

func (self Control) SetStretchRatio(ratio Float) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Float](0, abi, ratio)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Control.set_stretch_ratio, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self Control) GetStretchRatio() Float {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Control.get_stretch_ratio, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Float](abi)
	abi.free()
	return ret
}

func (self Control) SetVSizeFlags(flags ControlSizeFlags) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[ControlSizeFlags](0, abi, flags)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Control.set_v_size_flags, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self Control) GetVSizeFlags() ControlSizeFlags {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Control.get_v_size_flags, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[ControlSizeFlags](abi)
	abi.free()
	return ret
}

func (self Control) SetTheme(theme Theme) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Theme](0, abi, theme)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Control.set_theme, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self Control) GetTheme() Theme {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Control.get_theme, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Theme](abi)
	abi.free()
	return ret
}

func (self Control) SetThemeTypeVariation(theme_type StringName) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[StringName](0, abi, theme_type)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Control.set_theme_type_variation, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self Control) GetThemeTypeVariation(ctx Context) StringName {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Control.get_theme_type_variation, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[uintptr](abi)
	abi.free()
	return mmm.Make[API, StringName, uintptr](ctx, selfPtr.API, ret)
}

func (self Control) BeginBulkThemeOverride() {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Control.begin_bulk_theme_override, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self Control) EndBulkThemeOverride() {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Control.end_bulk_theme_override, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self Control) AddThemeIconOverride(name StringName, texture Texture2D) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[StringName](0, abi, name)
	frameSet[Texture2D](1, abi, texture)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Control.add_theme_icon_override, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self Control) AddThemeStyleboxOverride(name StringName, stylebox StyleBox) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[StringName](0, abi, name)
	frameSet[StyleBox](1, abi, stylebox)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Control.add_theme_stylebox_override, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self Control) AddThemeFontOverride(name StringName, font Font) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[StringName](0, abi, name)
	frameSet[Font](1, abi, font)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Control.add_theme_font_override, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self Control) AddThemeFontSizeOverride(name StringName, font_size Int) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[StringName](0, abi, name)
	frameSet[Int](1, abi, font_size)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Control.add_theme_font_size_override, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self Control) AddThemeColorOverride(name StringName, color Color) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[StringName](0, abi, name)
	frameSet[Color](1, abi, color)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Control.add_theme_color_override, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self Control) AddThemeConstantOverride(name StringName, constant Int) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[StringName](0, abi, name)
	frameSet[Int](1, abi, constant)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Control.add_theme_constant_override, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self Control) RemoveThemeIconOverride(name StringName) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[StringName](0, abi, name)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Control.remove_theme_icon_override, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self Control) RemoveThemeStyleboxOverride(name StringName) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[StringName](0, abi, name)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Control.remove_theme_stylebox_override, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self Control) RemoveThemeFontOverride(name StringName) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[StringName](0, abi, name)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Control.remove_theme_font_override, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self Control) RemoveThemeFontSizeOverride(name StringName) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[StringName](0, abi, name)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Control.remove_theme_font_size_override, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self Control) RemoveThemeColorOverride(name StringName) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[StringName](0, abi, name)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Control.remove_theme_color_override, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self Control) RemoveThemeConstantOverride(name StringName) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[StringName](0, abi, name)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Control.remove_theme_constant_override, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self Control) GetThemeIcon(name StringName, theme_type StringName) Texture2D {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[StringName](0, abi, name)
	frameSet[StringName](1, abi, theme_type)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Control.get_theme_icon, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Texture2D](abi)
	abi.free()
	return ret
}

func (self Control) GetThemeStylebox(name StringName, theme_type StringName) StyleBox {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[StringName](0, abi, name)
	frameSet[StringName](1, abi, theme_type)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Control.get_theme_stylebox, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[StyleBox](abi)
	abi.free()
	return ret
}

func (self Control) GetThemeFont(name StringName, theme_type StringName) Font {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[StringName](0, abi, name)
	frameSet[StringName](1, abi, theme_type)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Control.get_theme_font, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Font](abi)
	abi.free()
	return ret
}

func (self Control) GetThemeFontSize(name StringName, theme_type StringName) Int {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[StringName](0, abi, name)
	frameSet[StringName](1, abi, theme_type)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Control.get_theme_font_size, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Int](abi)
	abi.free()
	return ret
}

func (self Control) GetThemeColor(name StringName, theme_type StringName) Color {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[StringName](0, abi, name)
	frameSet[StringName](1, abi, theme_type)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Control.get_theme_color, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Color](abi)
	abi.free()
	return ret
}

func (self Control) GetThemeConstant(name StringName, theme_type StringName) Int {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[StringName](0, abi, name)
	frameSet[StringName](1, abi, theme_type)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Control.get_theme_constant, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Int](abi)
	abi.free()
	return ret
}

func (self Control) HasThemeIconOverride(name StringName) bool {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[StringName](0, abi, name)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Control.has_theme_icon_override, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self Control) HasThemeStyleboxOverride(name StringName) bool {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[StringName](0, abi, name)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Control.has_theme_stylebox_override, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self Control) HasThemeFontOverride(name StringName) bool {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[StringName](0, abi, name)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Control.has_theme_font_override, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self Control) HasThemeFontSizeOverride(name StringName) bool {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[StringName](0, abi, name)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Control.has_theme_font_size_override, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self Control) HasThemeColorOverride(name StringName) bool {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[StringName](0, abi, name)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Control.has_theme_color_override, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self Control) HasThemeConstantOverride(name StringName) bool {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[StringName](0, abi, name)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Control.has_theme_constant_override, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self Control) HasThemeIcon(name StringName, theme_type StringName) bool {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[StringName](0, abi, name)
	frameSet[StringName](1, abi, theme_type)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Control.has_theme_icon, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self Control) HasThemeStylebox(name StringName, theme_type StringName) bool {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[StringName](0, abi, name)
	frameSet[StringName](1, abi, theme_type)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Control.has_theme_stylebox, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self Control) HasThemeFont(name StringName, theme_type StringName) bool {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[StringName](0, abi, name)
	frameSet[StringName](1, abi, theme_type)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Control.has_theme_font, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self Control) HasThemeFontSize(name StringName, theme_type StringName) bool {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[StringName](0, abi, name)
	frameSet[StringName](1, abi, theme_type)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Control.has_theme_font_size, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self Control) HasThemeColor(name StringName, theme_type StringName) bool {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[StringName](0, abi, name)
	frameSet[StringName](1, abi, theme_type)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Control.has_theme_color, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self Control) HasThemeConstant(name StringName, theme_type StringName) bool {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[StringName](0, abi, name)
	frameSet[StringName](1, abi, theme_type)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Control.has_theme_constant, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self Control) GetThemeDefaultBaseScale() Float {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Control.get_theme_default_base_scale, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Float](abi)
	abi.free()
	return ret
}

func (self Control) GetThemeDefaultFont() Font {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Control.get_theme_default_font, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Font](abi)
	abi.free()
	return ret
}

func (self Control) GetThemeDefaultFontSize() Int {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Control.get_theme_default_font_size, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Int](abi)
	abi.free()
	return ret
}

func (self Control) GetParentControl() Control {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Control.get_parent_control, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Control](abi)
	abi.free()
	return ret
}

func (self Control) SetHGrowDirection(direction ControlGrowDirection) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[ControlGrowDirection](0, abi, direction)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Control.set_h_grow_direction, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self Control) GetHGrowDirection() ControlGrowDirection {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Control.get_h_grow_direction, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[ControlGrowDirection](abi)
	abi.free()
	return ret
}

func (self Control) SetVGrowDirection(direction ControlGrowDirection) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[ControlGrowDirection](0, abi, direction)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Control.set_v_grow_direction, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self Control) GetVGrowDirection() ControlGrowDirection {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Control.get_v_grow_direction, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[ControlGrowDirection](abi)
	abi.free()
	return ret
}

func (self Control) SetTooltipText(hint String) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[String](0, abi, hint)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Control.set_tooltip_text, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self Control) GetTooltipText(ctx Context) String {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Control.get_tooltip_text, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[uintptr](abi)
	abi.free()
	return mmm.Make[API, String, uintptr](ctx, selfPtr.API, ret)
}

func (self Control) GetTooltip(ctx Context, at_position Vector2) String {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Vector2](0, abi, at_position)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Control.get_tooltip, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[uintptr](abi)
	abi.free()
	return mmm.Make[API, String, uintptr](ctx, selfPtr.API, ret)
}

func (self Control) SetDefaultCursorShape(shape ControlCursorShape) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[ControlCursorShape](0, abi, shape)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Control.set_default_cursor_shape, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self Control) GetDefaultCursorShape() ControlCursorShape {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Control.get_default_cursor_shape, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[ControlCursorShape](abi)
	abi.free()
	return ret
}

func (self Control) GetCursorShape(position Vector2) ControlCursorShape {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Vector2](0, abi, position)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Control.get_cursor_shape, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[ControlCursorShape](abi)
	abi.free()
	return ret
}

func (self Control) SetFocusNeighbor(side Side, neighbor NodePath) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Side](0, abi, side)
	frameSet[NodePath](1, abi, neighbor)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Control.set_focus_neighbor, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self Control) GetFocusNeighbor(ctx Context, side Side) NodePath {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Side](0, abi, side)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Control.get_focus_neighbor, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[uintptr](abi)
	abi.free()
	return mmm.Make[API, NodePath, uintptr](ctx, selfPtr.API, ret)
}

func (self Control) SetFocusNext(next NodePath) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[NodePath](0, abi, next)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Control.set_focus_next, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self Control) GetFocusNext(ctx Context) NodePath {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Control.get_focus_next, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[uintptr](abi)
	abi.free()
	return mmm.Make[API, NodePath, uintptr](ctx, selfPtr.API, ret)
}

func (self Control) SetFocusPrevious(previous NodePath) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[NodePath](0, abi, previous)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Control.set_focus_previous, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self Control) GetFocusPrevious(ctx Context) NodePath {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Control.get_focus_previous, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[uintptr](abi)
	abi.free()
	return mmm.Make[API, NodePath, uintptr](ctx, selfPtr.API, ret)
}

func (self Control) ForceDrag(data Variant, preview Control) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Variant](0, abi, data)
	frameSet[Control](1, abi, preview)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Control.force_drag, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self Control) SetMouseFilter(filter ControlMouseFilter) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[ControlMouseFilter](0, abi, filter)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Control.set_mouse_filter, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self Control) GetMouseFilter() ControlMouseFilter {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Control.get_mouse_filter, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[ControlMouseFilter](abi)
	abi.free()
	return ret
}

func (self Control) SetForcePassScrollEvents(force_pass_scroll_events bool) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[bool](0, abi, force_pass_scroll_events)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Control.set_force_pass_scroll_events, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self Control) IsForcePassScrollEvents() bool {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Control.is_force_pass_scroll_events, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self Control) SetClipContents(enable bool) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[bool](0, abi, enable)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Control.set_clip_contents, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self Control) IsClippingContents() bool {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Control.is_clipping_contents, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self Control) GrabClickFocus() {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Control.grab_click_focus, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self Control) SetDragForwarding(drag_func Callable, can_drop_func Callable, drop_func Callable) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Callable](0, abi, drag_func)
	frameSet[Callable](1, abi, can_drop_func)
	frameSet[Callable](2, abi, drop_func)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Control.set_drag_forwarding, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self Control) SetDragPreview(control Control) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Control](0, abi, control)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Control.set_drag_preview, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self Control) IsDragSuccessful() bool {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Control.is_drag_successful, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self Control) WarpMouse(position Vector2) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Vector2](0, abi, position)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Control.warp_mouse, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self Control) SetShortcutContext(node Node) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Node](0, abi, node)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Control.set_shortcut_context, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self Control) GetShortcutContext() Node {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Control.get_shortcut_context, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Node](abi)
	abi.free()
	return ret
}

func (self Control) UpdateMinimumSize() {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Control.update_minimum_size, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self Control) SetLayoutDirection(direction ControlLayoutDirection) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[ControlLayoutDirection](0, abi, direction)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Control.set_layout_direction, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self Control) GetLayoutDirection() ControlLayoutDirection {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Control.get_layout_direction, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[ControlLayoutDirection](abi)
	abi.free()
	return ret
}

func (self Control) IsLayoutRtl() bool {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Control.is_layout_rtl, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self Control) SetAutoTranslate(enable bool) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[bool](0, abi, enable)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Control.set_auto_translate, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self Control) IsAutoTranslating() bool {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Control.is_auto_translating, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self Control) SetLocalizeNumeralSystem(enable bool) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[bool](0, abi, enable)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Control.set_localize_numeral_system, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self Control) IsLocalizingNumeralSystem() bool {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Control.is_localizing_numeral_system, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self Control) virtual(name string) reflect.Value {
	switch name {
	case "_has_point":
		return reflect.ValueOf(self._has_point)
	case "_structured_text_parser":
		return reflect.ValueOf(self._structured_text_parser)
	case "_get_minimum_size":
		return reflect.ValueOf(self._get_minimum_size)
	case "_get_tooltip":
		return reflect.ValueOf(self._get_tooltip)
	case "_get_drag_data":
		return reflect.ValueOf(self._get_drag_data)
	case "_can_drop_data":
		return reflect.ValueOf(self._can_drop_data)
	case "_drop_data":
		return reflect.ValueOf(self._drop_data)
	case "_make_custom_tooltip":
		return reflect.ValueOf(self._make_custom_tooltip)
	case "_gui_input":
		return reflect.ValueOf(self._gui_input)
	default:
		return self.Super().virtual(name)
	}
}

type ConvexPolygonShape3D struct {
	Class[ConvexPolygonShape3D, Shape3D]
}

func (self ConvexPolygonShape3D) Shape3D() Shape3D { return *self.Super() }

func (self ConvexPolygonShape3D) Resource() Resource { return *self.Super().Super() }

func (self ConvexPolygonShape3D) RefCounted() RefCounted { return *self.Super().Super().Super() }

func (self ConvexPolygonShape3D) Object() Object { return *self.Super().Super().Super().Super() }

func (self ConvexPolygonShape3D) SetPoints(points PackedVector3Array) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[PackedVector3Array](0, abi, points)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.ConvexPolygonShape3D.set_points, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self ConvexPolygonShape3D) GetPoints(ctx Context) PackedVector3Array {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.ConvexPolygonShape3D.get_points, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[[2]uintptr](abi)
	abi.free()
	return mmm.Make[API, PackedVector3Array, [2]uintptr](ctx, selfPtr.API, ret)
}

func (self ConvexPolygonShape3D) virtual(name string) reflect.Value {
	switch name {
	default:
		return self.Super().virtual(name)
	}
}

type Engine struct{ Class[Engine, Object] }

func (self Engine) Object() Object { return *self.Super() }

func (self Engine) isSingleton() {}

func (self Engine) SetPhysicsTicksPerSecond(physics_ticks_per_second Int) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Int](0, abi, physics_ticks_per_second)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Engine.set_physics_ticks_per_second, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self Engine) GetPhysicsTicksPerSecond() Int {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Engine.get_physics_ticks_per_second, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Int](abi)
	abi.free()
	return ret
}

func (self Engine) SetMaxPhysicsStepsPerFrame(max_physics_steps Int) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Int](0, abi, max_physics_steps)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Engine.set_max_physics_steps_per_frame, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self Engine) GetMaxPhysicsStepsPerFrame() Int {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Engine.get_max_physics_steps_per_frame, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Int](abi)
	abi.free()
	return ret
}

func (self Engine) SetPhysicsJitterFix(physics_jitter_fix Float) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Float](0, abi, physics_jitter_fix)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Engine.set_physics_jitter_fix, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self Engine) GetPhysicsJitterFix() Float {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Engine.get_physics_jitter_fix, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Float](abi)
	abi.free()
	return ret
}

func (self Engine) GetPhysicsInterpolationFraction() Float {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Engine.get_physics_interpolation_fraction, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Float](abi)
	abi.free()
	return ret
}

func (self Engine) SetMaxFps(max_fps Int) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Int](0, abi, max_fps)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Engine.set_max_fps, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self Engine) GetMaxFps() Int {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Engine.get_max_fps, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Int](abi)
	abi.free()
	return ret
}

func (self Engine) SetTimeScale(time_scale Float) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Float](0, abi, time_scale)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Engine.set_time_scale, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self Engine) GetTimeScale() Float {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Engine.get_time_scale, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Float](abi)
	abi.free()
	return ret
}

func (self Engine) GetFramesDrawn() Int {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Engine.get_frames_drawn, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Int](abi)
	abi.free()
	return ret
}

func (self Engine) GetFramesPerSecond() Float {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Engine.get_frames_per_second, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Float](abi)
	abi.free()
	return ret
}

func (self Engine) GetPhysicsFrames() Int {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Engine.get_physics_frames, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Int](abi)
	abi.free()
	return ret
}

func (self Engine) GetProcessFrames() Int {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Engine.get_process_frames, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Int](abi)
	abi.free()
	return ret
}

func (self Engine) GetMainLoop() MainLoop {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Engine.get_main_loop, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[MainLoop](abi)
	abi.free()
	return ret
}

func (self Engine) GetVersionInfo(ctx Context) Dictionary {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Engine.get_version_info, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[uintptr](abi)
	abi.free()
	return mmm.Make[API, Dictionary, uintptr](ctx, selfPtr.API, ret)
}

func (self Engine) GetAuthorInfo(ctx Context) Dictionary {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Engine.get_author_info, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[uintptr](abi)
	abi.free()
	return mmm.Make[API, Dictionary, uintptr](ctx, selfPtr.API, ret)
}

func (self Engine) GetCopyrightInfo() ArrayOf[Dictionary] {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Engine.get_copyright_info, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[ArrayOf[Dictionary]](abi)
	abi.free()
	return ret
}

func (self Engine) GetDonorInfo(ctx Context) Dictionary {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Engine.get_donor_info, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[uintptr](abi)
	abi.free()
	return mmm.Make[API, Dictionary, uintptr](ctx, selfPtr.API, ret)
}

func (self Engine) GetLicenseInfo(ctx Context) Dictionary {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Engine.get_license_info, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[uintptr](abi)
	abi.free()
	return mmm.Make[API, Dictionary, uintptr](ctx, selfPtr.API, ret)
}

func (self Engine) GetLicenseText(ctx Context) String {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Engine.get_license_text, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[uintptr](abi)
	abi.free()
	return mmm.Make[API, String, uintptr](ctx, selfPtr.API, ret)
}

func (self Engine) GetArchitectureName(ctx Context) String {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Engine.get_architecture_name, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[uintptr](abi)
	abi.free()
	return mmm.Make[API, String, uintptr](ctx, selfPtr.API, ret)
}

func (self Engine) IsInPhysicsFrame() bool {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Engine.is_in_physics_frame, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self Engine) HasSingleton(name StringName) bool {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[StringName](0, abi, name)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Engine.has_singleton, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self Engine) GetSingleton(name StringName) Object {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[StringName](0, abi, name)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Engine.get_singleton, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Object](abi)
	abi.free()
	return ret
}

func (self Engine) RegisterSingleton(name StringName, instance Object) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[StringName](0, abi, name)
	frameSet[Object](1, abi, instance)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Engine.register_singleton, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self Engine) UnregisterSingleton(name StringName) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[StringName](0, abi, name)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Engine.unregister_singleton, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self Engine) GetSingletonList(ctx Context) PackedStringArray {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Engine.get_singleton_list, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[[2]uintptr](abi)
	abi.free()
	return mmm.Make[API, PackedStringArray, [2]uintptr](ctx, selfPtr.API, ret)
}

func (self Engine) RegisterScriptLanguage(language ScriptLanguage) int64 {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[ScriptLanguage](0, abi, language)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Engine.register_script_language, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[int64](abi)
	abi.free()
	return ret
}

func (self Engine) UnregisterScriptLanguage(language ScriptLanguage) int64 {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[ScriptLanguage](0, abi, language)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Engine.unregister_script_language, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[int64](abi)
	abi.free()
	return ret
}

func (self Engine) GetScriptLanguageCount() Int {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Engine.get_script_language_count, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Int](abi)
	abi.free()
	return ret
}

func (self Engine) GetScriptLanguage(index Int) ScriptLanguage {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Int](0, abi, index)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Engine.get_script_language, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[ScriptLanguage](abi)
	abi.free()
	return ret
}

func (self Engine) IsEditorHint() bool {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Engine.is_editor_hint, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self Engine) GetWriteMoviePath(ctx Context) String {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Engine.get_write_movie_path, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[uintptr](abi)
	abi.free()
	return mmm.Make[API, String, uintptr](ctx, selfPtr.API, ret)
}

func (self Engine) SetPrintErrorMessages(enabled bool) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[bool](0, abi, enabled)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Engine.set_print_error_messages, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self Engine) IsPrintingErrorMessages() bool {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Engine.is_printing_error_messages, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self Engine) virtual(name string) reflect.Value {
	switch name {
	default:
		return self.Super().virtual(name)
	}
}

type EnvironmentBGMode int64

type EnvironmentAmbientSource int64

type EnvironmentReflectionSource int64

type EnvironmentToneMapper int64

type EnvironmentGlowBlendMode int64

type EnvironmentSDFGIYScale int64
type Environment struct{ Class[Environment, Resource] }

func (self Environment) Resource() Resource { return *self.Super() }

func (self Environment) RefCounted() RefCounted { return *self.Super().Super() }

func (self Environment) Object() Object { return *self.Super().Super().Super() }

func (self Environment) SetBackground(mode EnvironmentBGMode) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[EnvironmentBGMode](0, abi, mode)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Environment.set_background, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self Environment) GetBackground() EnvironmentBGMode {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Environment.get_background, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[EnvironmentBGMode](abi)
	abi.free()
	return ret
}

func (self Environment) SetSky(sky Sky) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Sky](0, abi, sky)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Environment.set_sky, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self Environment) GetSky() Sky {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Environment.get_sky, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Sky](abi)
	abi.free()
	return ret
}

func (self Environment) SetSkyCustomFov(scale Float) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Float](0, abi, scale)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Environment.set_sky_custom_fov, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self Environment) GetSkyCustomFov() Float {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Environment.get_sky_custom_fov, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Float](abi)
	abi.free()
	return ret
}

func (self Environment) SetSkyRotation(euler_radians Vector3) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Vector3](0, abi, euler_radians)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Environment.set_sky_rotation, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self Environment) GetSkyRotation() Vector3 {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Environment.get_sky_rotation, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Vector3](abi)
	abi.free()
	return ret
}

func (self Environment) SetBgColor(color Color) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Color](0, abi, color)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Environment.set_bg_color, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self Environment) GetBgColor() Color {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Environment.get_bg_color, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Color](abi)
	abi.free()
	return ret
}

func (self Environment) SetBgEnergyMultiplier(energy Float) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Float](0, abi, energy)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Environment.set_bg_energy_multiplier, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self Environment) GetBgEnergyMultiplier() Float {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Environment.get_bg_energy_multiplier, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Float](abi)
	abi.free()
	return ret
}

func (self Environment) SetBgIntensity(energy Float) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Float](0, abi, energy)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Environment.set_bg_intensity, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self Environment) GetBgIntensity() Float {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Environment.get_bg_intensity, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Float](abi)
	abi.free()
	return ret
}

func (self Environment) SetCanvasMaxLayer(layer Int) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Int](0, abi, layer)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Environment.set_canvas_max_layer, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self Environment) GetCanvasMaxLayer() Int {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Environment.get_canvas_max_layer, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Int](abi)
	abi.free()
	return ret
}

func (self Environment) SetCameraFeedId(id Int) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Int](0, abi, id)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Environment.set_camera_feed_id, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self Environment) GetCameraFeedId() Int {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Environment.get_camera_feed_id, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Int](abi)
	abi.free()
	return ret
}

func (self Environment) SetAmbientLightColor(color Color) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Color](0, abi, color)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Environment.set_ambient_light_color, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self Environment) GetAmbientLightColor() Color {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Environment.get_ambient_light_color, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Color](abi)
	abi.free()
	return ret
}

func (self Environment) SetAmbientSource(source EnvironmentAmbientSource) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[EnvironmentAmbientSource](0, abi, source)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Environment.set_ambient_source, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self Environment) GetAmbientSource() EnvironmentAmbientSource {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Environment.get_ambient_source, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[EnvironmentAmbientSource](abi)
	abi.free()
	return ret
}

func (self Environment) SetAmbientLightEnergy(energy Float) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Float](0, abi, energy)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Environment.set_ambient_light_energy, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self Environment) GetAmbientLightEnergy() Float {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Environment.get_ambient_light_energy, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Float](abi)
	abi.free()
	return ret
}

func (self Environment) SetAmbientLightSkyContribution(ratio Float) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Float](0, abi, ratio)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Environment.set_ambient_light_sky_contribution, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self Environment) GetAmbientLightSkyContribution() Float {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Environment.get_ambient_light_sky_contribution, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Float](abi)
	abi.free()
	return ret
}

func (self Environment) SetReflectionSource(source EnvironmentReflectionSource) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[EnvironmentReflectionSource](0, abi, source)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Environment.set_reflection_source, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self Environment) GetReflectionSource() EnvironmentReflectionSource {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Environment.get_reflection_source, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[EnvironmentReflectionSource](abi)
	abi.free()
	return ret
}

func (self Environment) SetTonemapper(mode EnvironmentToneMapper) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[EnvironmentToneMapper](0, abi, mode)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Environment.set_tonemapper, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self Environment) GetTonemapper() EnvironmentToneMapper {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Environment.get_tonemapper, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[EnvironmentToneMapper](abi)
	abi.free()
	return ret
}

func (self Environment) SetTonemapExposure(exposure Float) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Float](0, abi, exposure)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Environment.set_tonemap_exposure, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self Environment) GetTonemapExposure() Float {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Environment.get_tonemap_exposure, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Float](abi)
	abi.free()
	return ret
}

func (self Environment) SetTonemapWhite(white Float) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Float](0, abi, white)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Environment.set_tonemap_white, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self Environment) GetTonemapWhite() Float {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Environment.get_tonemap_white, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Float](abi)
	abi.free()
	return ret
}

func (self Environment) SetSsrEnabled(enabled bool) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[bool](0, abi, enabled)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Environment.set_ssr_enabled, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self Environment) IsSsrEnabled() bool {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Environment.is_ssr_enabled, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self Environment) SetSsrMaxSteps(max_steps Int) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Int](0, abi, max_steps)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Environment.set_ssr_max_steps, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self Environment) GetSsrMaxSteps() Int {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Environment.get_ssr_max_steps, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Int](abi)
	abi.free()
	return ret
}

func (self Environment) SetSsrFadeIn(fade_in Float) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Float](0, abi, fade_in)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Environment.set_ssr_fade_in, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self Environment) GetSsrFadeIn() Float {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Environment.get_ssr_fade_in, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Float](abi)
	abi.free()
	return ret
}

func (self Environment) SetSsrFadeOut(fade_out Float) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Float](0, abi, fade_out)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Environment.set_ssr_fade_out, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self Environment) GetSsrFadeOut() Float {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Environment.get_ssr_fade_out, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Float](abi)
	abi.free()
	return ret
}

func (self Environment) SetSsrDepthTolerance(depth_tolerance Float) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Float](0, abi, depth_tolerance)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Environment.set_ssr_depth_tolerance, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self Environment) GetSsrDepthTolerance() Float {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Environment.get_ssr_depth_tolerance, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Float](abi)
	abi.free()
	return ret
}

func (self Environment) SetSsaoEnabled(enabled bool) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[bool](0, abi, enabled)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Environment.set_ssao_enabled, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self Environment) IsSsaoEnabled() bool {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Environment.is_ssao_enabled, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self Environment) SetSsaoRadius(radius Float) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Float](0, abi, radius)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Environment.set_ssao_radius, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self Environment) GetSsaoRadius() Float {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Environment.get_ssao_radius, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Float](abi)
	abi.free()
	return ret
}

func (self Environment) SetSsaoIntensity(intensity Float) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Float](0, abi, intensity)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Environment.set_ssao_intensity, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self Environment) GetSsaoIntensity() Float {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Environment.get_ssao_intensity, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Float](abi)
	abi.free()
	return ret
}

func (self Environment) SetSsaoPower(power Float) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Float](0, abi, power)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Environment.set_ssao_power, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self Environment) GetSsaoPower() Float {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Environment.get_ssao_power, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Float](abi)
	abi.free()
	return ret
}

func (self Environment) SetSsaoDetail(detail Float) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Float](0, abi, detail)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Environment.set_ssao_detail, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self Environment) GetSsaoDetail() Float {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Environment.get_ssao_detail, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Float](abi)
	abi.free()
	return ret
}

func (self Environment) SetSsaoHorizon(horizon Float) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Float](0, abi, horizon)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Environment.set_ssao_horizon, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self Environment) GetSsaoHorizon() Float {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Environment.get_ssao_horizon, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Float](abi)
	abi.free()
	return ret
}

func (self Environment) SetSsaoSharpness(sharpness Float) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Float](0, abi, sharpness)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Environment.set_ssao_sharpness, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self Environment) GetSsaoSharpness() Float {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Environment.get_ssao_sharpness, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Float](abi)
	abi.free()
	return ret
}

func (self Environment) SetSsaoDirectLightAffect(amount Float) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Float](0, abi, amount)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Environment.set_ssao_direct_light_affect, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self Environment) GetSsaoDirectLightAffect() Float {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Environment.get_ssao_direct_light_affect, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Float](abi)
	abi.free()
	return ret
}

func (self Environment) SetSsaoAoChannelAffect(amount Float) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Float](0, abi, amount)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Environment.set_ssao_ao_channel_affect, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self Environment) GetSsaoAoChannelAffect() Float {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Environment.get_ssao_ao_channel_affect, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Float](abi)
	abi.free()
	return ret
}

func (self Environment) SetSsilEnabled(enabled bool) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[bool](0, abi, enabled)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Environment.set_ssil_enabled, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self Environment) IsSsilEnabled() bool {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Environment.is_ssil_enabled, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self Environment) SetSsilRadius(radius Float) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Float](0, abi, radius)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Environment.set_ssil_radius, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self Environment) GetSsilRadius() Float {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Environment.get_ssil_radius, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Float](abi)
	abi.free()
	return ret
}

func (self Environment) SetSsilIntensity(intensity Float) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Float](0, abi, intensity)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Environment.set_ssil_intensity, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self Environment) GetSsilIntensity() Float {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Environment.get_ssil_intensity, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Float](abi)
	abi.free()
	return ret
}

func (self Environment) SetSsilSharpness(sharpness Float) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Float](0, abi, sharpness)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Environment.set_ssil_sharpness, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self Environment) GetSsilSharpness() Float {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Environment.get_ssil_sharpness, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Float](abi)
	abi.free()
	return ret
}

func (self Environment) SetSsilNormalRejection(normal_rejection Float) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Float](0, abi, normal_rejection)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Environment.set_ssil_normal_rejection, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self Environment) GetSsilNormalRejection() Float {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Environment.get_ssil_normal_rejection, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Float](abi)
	abi.free()
	return ret
}

func (self Environment) SetSdfgiEnabled(enabled bool) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[bool](0, abi, enabled)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Environment.set_sdfgi_enabled, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self Environment) IsSdfgiEnabled() bool {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Environment.is_sdfgi_enabled, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self Environment) SetSdfgiCascades(amount Int) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Int](0, abi, amount)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Environment.set_sdfgi_cascades, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self Environment) GetSdfgiCascades() Int {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Environment.get_sdfgi_cascades, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Int](abi)
	abi.free()
	return ret
}

func (self Environment) SetSdfgiMinCellSize(size Float) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Float](0, abi, size)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Environment.set_sdfgi_min_cell_size, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self Environment) GetSdfgiMinCellSize() Float {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Environment.get_sdfgi_min_cell_size, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Float](abi)
	abi.free()
	return ret
}

func (self Environment) SetSdfgiMaxDistance(distance Float) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Float](0, abi, distance)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Environment.set_sdfgi_max_distance, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self Environment) GetSdfgiMaxDistance() Float {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Environment.get_sdfgi_max_distance, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Float](abi)
	abi.free()
	return ret
}

func (self Environment) SetSdfgiCascade0Distance(distance Float) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Float](0, abi, distance)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Environment.set_sdfgi_cascade0_distance, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self Environment) GetSdfgiCascade0Distance() Float {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Environment.get_sdfgi_cascade0_distance, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Float](abi)
	abi.free()
	return ret
}

func (self Environment) SetSdfgiYScale(scale EnvironmentSDFGIYScale) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[EnvironmentSDFGIYScale](0, abi, scale)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Environment.set_sdfgi_y_scale, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self Environment) GetSdfgiYScale() EnvironmentSDFGIYScale {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Environment.get_sdfgi_y_scale, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[EnvironmentSDFGIYScale](abi)
	abi.free()
	return ret
}

func (self Environment) SetSdfgiUseOcclusion(enable bool) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[bool](0, abi, enable)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Environment.set_sdfgi_use_occlusion, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self Environment) IsSdfgiUsingOcclusion() bool {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Environment.is_sdfgi_using_occlusion, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self Environment) SetSdfgiBounceFeedback(amount Float) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Float](0, abi, amount)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Environment.set_sdfgi_bounce_feedback, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self Environment) GetSdfgiBounceFeedback() Float {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Environment.get_sdfgi_bounce_feedback, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Float](abi)
	abi.free()
	return ret
}

func (self Environment) SetSdfgiReadSkyLight(enable bool) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[bool](0, abi, enable)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Environment.set_sdfgi_read_sky_light, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self Environment) IsSdfgiReadingSkyLight() bool {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Environment.is_sdfgi_reading_sky_light, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self Environment) SetSdfgiEnergy(amount Float) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Float](0, abi, amount)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Environment.set_sdfgi_energy, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self Environment) GetSdfgiEnergy() Float {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Environment.get_sdfgi_energy, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Float](abi)
	abi.free()
	return ret
}

func (self Environment) SetSdfgiNormalBias(bias Float) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Float](0, abi, bias)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Environment.set_sdfgi_normal_bias, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self Environment) GetSdfgiNormalBias() Float {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Environment.get_sdfgi_normal_bias, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Float](abi)
	abi.free()
	return ret
}

func (self Environment) SetSdfgiProbeBias(bias Float) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Float](0, abi, bias)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Environment.set_sdfgi_probe_bias, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self Environment) GetSdfgiProbeBias() Float {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Environment.get_sdfgi_probe_bias, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Float](abi)
	abi.free()
	return ret
}

func (self Environment) SetGlowEnabled(enabled bool) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[bool](0, abi, enabled)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Environment.set_glow_enabled, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self Environment) IsGlowEnabled() bool {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Environment.is_glow_enabled, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self Environment) SetGlowLevel(idx Int, intensity Float) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Int](0, abi, idx)
	frameSet[Float](1, abi, intensity)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Environment.set_glow_level, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self Environment) GetGlowLevel(idx Int) Float {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Int](0, abi, idx)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Environment.get_glow_level, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Float](abi)
	abi.free()
	return ret
}

func (self Environment) SetGlowNormalized(normalize bool) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[bool](0, abi, normalize)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Environment.set_glow_normalized, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self Environment) IsGlowNormalized() bool {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Environment.is_glow_normalized, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self Environment) SetGlowIntensity(intensity Float) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Float](0, abi, intensity)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Environment.set_glow_intensity, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self Environment) GetGlowIntensity() Float {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Environment.get_glow_intensity, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Float](abi)
	abi.free()
	return ret
}

func (self Environment) SetGlowStrength(strength Float) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Float](0, abi, strength)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Environment.set_glow_strength, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self Environment) GetGlowStrength() Float {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Environment.get_glow_strength, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Float](abi)
	abi.free()
	return ret
}

func (self Environment) SetGlowMix(mix Float) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Float](0, abi, mix)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Environment.set_glow_mix, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self Environment) GetGlowMix() Float {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Environment.get_glow_mix, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Float](abi)
	abi.free()
	return ret
}

func (self Environment) SetGlowBloom(amount Float) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Float](0, abi, amount)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Environment.set_glow_bloom, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self Environment) GetGlowBloom() Float {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Environment.get_glow_bloom, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Float](abi)
	abi.free()
	return ret
}

func (self Environment) SetGlowBlendMode(mode EnvironmentGlowBlendMode) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[EnvironmentGlowBlendMode](0, abi, mode)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Environment.set_glow_blend_mode, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self Environment) GetGlowBlendMode() EnvironmentGlowBlendMode {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Environment.get_glow_blend_mode, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[EnvironmentGlowBlendMode](abi)
	abi.free()
	return ret
}

func (self Environment) SetGlowHdrBleedThreshold(threshold Float) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Float](0, abi, threshold)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Environment.set_glow_hdr_bleed_threshold, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self Environment) GetGlowHdrBleedThreshold() Float {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Environment.get_glow_hdr_bleed_threshold, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Float](abi)
	abi.free()
	return ret
}

func (self Environment) SetGlowHdrBleedScale(scale Float) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Float](0, abi, scale)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Environment.set_glow_hdr_bleed_scale, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self Environment) GetGlowHdrBleedScale() Float {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Environment.get_glow_hdr_bleed_scale, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Float](abi)
	abi.free()
	return ret
}

func (self Environment) SetGlowHdrLuminanceCap(amount Float) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Float](0, abi, amount)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Environment.set_glow_hdr_luminance_cap, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self Environment) GetGlowHdrLuminanceCap() Float {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Environment.get_glow_hdr_luminance_cap, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Float](abi)
	abi.free()
	return ret
}

func (self Environment) SetGlowMapStrength(strength Float) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Float](0, abi, strength)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Environment.set_glow_map_strength, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self Environment) GetGlowMapStrength() Float {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Environment.get_glow_map_strength, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Float](abi)
	abi.free()
	return ret
}

func (self Environment) SetGlowMap(mode Texture) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Texture](0, abi, mode)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Environment.set_glow_map, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self Environment) GetGlowMap() Texture {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Environment.get_glow_map, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Texture](abi)
	abi.free()
	return ret
}

func (self Environment) SetFogEnabled(enabled bool) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[bool](0, abi, enabled)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Environment.set_fog_enabled, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self Environment) IsFogEnabled() bool {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Environment.is_fog_enabled, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self Environment) SetFogLightColor(light_color Color) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Color](0, abi, light_color)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Environment.set_fog_light_color, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self Environment) GetFogLightColor() Color {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Environment.get_fog_light_color, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Color](abi)
	abi.free()
	return ret
}

func (self Environment) SetFogLightEnergy(light_energy Float) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Float](0, abi, light_energy)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Environment.set_fog_light_energy, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self Environment) GetFogLightEnergy() Float {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Environment.get_fog_light_energy, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Float](abi)
	abi.free()
	return ret
}

func (self Environment) SetFogSunScatter(sun_scatter Float) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Float](0, abi, sun_scatter)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Environment.set_fog_sun_scatter, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self Environment) GetFogSunScatter() Float {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Environment.get_fog_sun_scatter, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Float](abi)
	abi.free()
	return ret
}

func (self Environment) SetFogDensity(density Float) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Float](0, abi, density)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Environment.set_fog_density, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self Environment) GetFogDensity() Float {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Environment.get_fog_density, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Float](abi)
	abi.free()
	return ret
}

func (self Environment) SetFogHeight(height Float) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Float](0, abi, height)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Environment.set_fog_height, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self Environment) GetFogHeight() Float {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Environment.get_fog_height, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Float](abi)
	abi.free()
	return ret
}

func (self Environment) SetFogHeightDensity(height_density Float) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Float](0, abi, height_density)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Environment.set_fog_height_density, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self Environment) GetFogHeightDensity() Float {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Environment.get_fog_height_density, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Float](abi)
	abi.free()
	return ret
}

func (self Environment) SetFogAerialPerspective(aerial_perspective Float) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Float](0, abi, aerial_perspective)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Environment.set_fog_aerial_perspective, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self Environment) GetFogAerialPerspective() Float {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Environment.get_fog_aerial_perspective, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Float](abi)
	abi.free()
	return ret
}

func (self Environment) SetFogSkyAffect(sky_affect Float) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Float](0, abi, sky_affect)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Environment.set_fog_sky_affect, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self Environment) GetFogSkyAffect() Float {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Environment.get_fog_sky_affect, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Float](abi)
	abi.free()
	return ret
}

func (self Environment) SetVolumetricFogEnabled(enabled bool) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[bool](0, abi, enabled)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Environment.set_volumetric_fog_enabled, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self Environment) IsVolumetricFogEnabled() bool {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Environment.is_volumetric_fog_enabled, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self Environment) SetVolumetricFogEmission(color Color) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Color](0, abi, color)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Environment.set_volumetric_fog_emission, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self Environment) GetVolumetricFogEmission() Color {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Environment.get_volumetric_fog_emission, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Color](abi)
	abi.free()
	return ret
}

func (self Environment) SetVolumetricFogAlbedo(color Color) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Color](0, abi, color)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Environment.set_volumetric_fog_albedo, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self Environment) GetVolumetricFogAlbedo() Color {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Environment.get_volumetric_fog_albedo, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Color](abi)
	abi.free()
	return ret
}

func (self Environment) SetVolumetricFogDensity(density Float) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Float](0, abi, density)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Environment.set_volumetric_fog_density, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self Environment) GetVolumetricFogDensity() Float {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Environment.get_volumetric_fog_density, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Float](abi)
	abi.free()
	return ret
}

func (self Environment) SetVolumetricFogEmissionEnergy(begin Float) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Float](0, abi, begin)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Environment.set_volumetric_fog_emission_energy, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self Environment) GetVolumetricFogEmissionEnergy() Float {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Environment.get_volumetric_fog_emission_energy, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Float](abi)
	abi.free()
	return ret
}

func (self Environment) SetVolumetricFogAnisotropy(anisotropy Float) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Float](0, abi, anisotropy)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Environment.set_volumetric_fog_anisotropy, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self Environment) GetVolumetricFogAnisotropy() Float {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Environment.get_volumetric_fog_anisotropy, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Float](abi)
	abi.free()
	return ret
}

func (self Environment) SetVolumetricFogLength(length Float) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Float](0, abi, length)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Environment.set_volumetric_fog_length, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self Environment) GetVolumetricFogLength() Float {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Environment.get_volumetric_fog_length, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Float](abi)
	abi.free()
	return ret
}

func (self Environment) SetVolumetricFogDetailSpread(detail_spread Float) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Float](0, abi, detail_spread)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Environment.set_volumetric_fog_detail_spread, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self Environment) GetVolumetricFogDetailSpread() Float {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Environment.get_volumetric_fog_detail_spread, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Float](abi)
	abi.free()
	return ret
}

func (self Environment) SetVolumetricFogGiInject(gi_inject Float) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Float](0, abi, gi_inject)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Environment.set_volumetric_fog_gi_inject, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self Environment) GetVolumetricFogGiInject() Float {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Environment.get_volumetric_fog_gi_inject, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Float](abi)
	abi.free()
	return ret
}

func (self Environment) SetVolumetricFogAmbientInject(enabled Float) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Float](0, abi, enabled)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Environment.set_volumetric_fog_ambient_inject, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self Environment) GetVolumetricFogAmbientInject() Float {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Environment.get_volumetric_fog_ambient_inject, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Float](abi)
	abi.free()
	return ret
}

func (self Environment) SetVolumetricFogSkyAffect(sky_affect Float) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Float](0, abi, sky_affect)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Environment.set_volumetric_fog_sky_affect, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self Environment) GetVolumetricFogSkyAffect() Float {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Environment.get_volumetric_fog_sky_affect, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Float](abi)
	abi.free()
	return ret
}

func (self Environment) SetVolumetricFogTemporalReprojectionEnabled(enabled bool) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[bool](0, abi, enabled)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Environment.set_volumetric_fog_temporal_reprojection_enabled, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self Environment) IsVolumetricFogTemporalReprojectionEnabled() bool {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Environment.is_volumetric_fog_temporal_reprojection_enabled, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self Environment) SetVolumetricFogTemporalReprojectionAmount(temporal_reprojection_amount Float) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Float](0, abi, temporal_reprojection_amount)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Environment.set_volumetric_fog_temporal_reprojection_amount, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self Environment) GetVolumetricFogTemporalReprojectionAmount() Float {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Environment.get_volumetric_fog_temporal_reprojection_amount, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Float](abi)
	abi.free()
	return ret
}

func (self Environment) SetAdjustmentEnabled(enabled bool) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[bool](0, abi, enabled)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Environment.set_adjustment_enabled, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self Environment) IsAdjustmentEnabled() bool {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Environment.is_adjustment_enabled, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self Environment) SetAdjustmentBrightness(brightness Float) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Float](0, abi, brightness)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Environment.set_adjustment_brightness, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self Environment) GetAdjustmentBrightness() Float {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Environment.get_adjustment_brightness, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Float](abi)
	abi.free()
	return ret
}

func (self Environment) SetAdjustmentContrast(contrast Float) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Float](0, abi, contrast)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Environment.set_adjustment_contrast, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self Environment) GetAdjustmentContrast() Float {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Environment.get_adjustment_contrast, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Float](abi)
	abi.free()
	return ret
}

func (self Environment) SetAdjustmentSaturation(saturation Float) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Float](0, abi, saturation)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Environment.set_adjustment_saturation, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self Environment) GetAdjustmentSaturation() Float {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Environment.get_adjustment_saturation, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Float](abi)
	abi.free()
	return ret
}

func (self Environment) SetAdjustmentColorCorrection(color_correction Texture) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Texture](0, abi, color_correction)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Environment.set_adjustment_color_correction, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self Environment) GetAdjustmentColorCorrection() Texture {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Environment.get_adjustment_color_correction, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Texture](abi)
	abi.free()
	return ret
}

func (self Environment) virtual(name string) reflect.Value {
	switch name {
	default:
		return self.Super().virtual(name)
	}
}

type FileAccessModeFlags int64

type FileAccessCompressionMode int64

type FileAccessUnixPermissionFlags int64
type FileAccess struct{ Class[FileAccess, RefCounted] }

func (self FileAccess) RefCounted() RefCounted { return *self.Super() }

func (self FileAccess) Object() Object { return *self.Super().Super() }

func (self FileAccess) Open(path String, flags FileAccessModeFlags) FileAccess {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[String](0, abi, path)
	frameSet[FileAccessModeFlags](1, abi, flags)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.FileAccess.open, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[FileAccess](abi)
	abi.free()
	return ret
}

func (self FileAccess) OpenEncrypted(path String, mode_flags FileAccessModeFlags, key PackedByteArray) FileAccess {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[String](0, abi, path)
	frameSet[FileAccessModeFlags](1, abi, mode_flags)
	frameSet[PackedByteArray](2, abi, key)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.FileAccess.open_encrypted, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[FileAccess](abi)
	abi.free()
	return ret
}

func (self FileAccess) OpenEncryptedWithPass(path String, mode_flags FileAccessModeFlags, pass String) FileAccess {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[String](0, abi, path)
	frameSet[FileAccessModeFlags](1, abi, mode_flags)
	frameSet[String](2, abi, pass)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.FileAccess.open_encrypted_with_pass, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[FileAccess](abi)
	abi.free()
	return ret
}

func (self FileAccess) OpenCompressed(path String, mode_flags FileAccessModeFlags, compression_mode FileAccessCompressionMode) FileAccess {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[String](0, abi, path)
	frameSet[FileAccessModeFlags](1, abi, mode_flags)
	frameSet[FileAccessCompressionMode](2, abi, compression_mode)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.FileAccess.open_compressed, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[FileAccess](abi)
	abi.free()
	return ret
}

func (self FileAccess) GetOpenError() int64 {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.FileAccess.get_open_error, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[int64](abi)
	abi.free()
	return ret
}

func (self FileAccess) GetFileAsBytes(ctx Context, path String) PackedByteArray {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[String](0, abi, path)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.FileAccess.get_file_as_bytes, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[[2]uintptr](abi)
	abi.free()
	return mmm.Make[API, PackedByteArray, [2]uintptr](ctx, selfPtr.API, ret)
}

func (self FileAccess) GetFileAsString(ctx Context, path String) String {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[String](0, abi, path)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.FileAccess.get_file_as_string, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[uintptr](abi)
	abi.free()
	return mmm.Make[API, String, uintptr](ctx, selfPtr.API, ret)
}

func (self FileAccess) Flush() {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.FileAccess.flush, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self FileAccess) GetPath(ctx Context) String {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.FileAccess.get_path, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[uintptr](abi)
	abi.free()
	return mmm.Make[API, String, uintptr](ctx, selfPtr.API, ret)
}

func (self FileAccess) GetPathAbsolute(ctx Context) String {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.FileAccess.get_path_absolute, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[uintptr](abi)
	abi.free()
	return mmm.Make[API, String, uintptr](ctx, selfPtr.API, ret)
}

func (self FileAccess) IsOpen() bool {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.FileAccess.is_open, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self FileAccess) SeekTo(position Int) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Int](0, abi, position)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.FileAccess.seek, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self FileAccess) SeekEnd(position Int) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Int](0, abi, position)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.FileAccess.seek_end, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self FileAccess) GetPosition() Int {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.FileAccess.get_position, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Int](abi)
	abi.free()
	return ret
}

func (self FileAccess) GetLength() Int {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.FileAccess.get_length, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Int](abi)
	abi.free()
	return ret
}

func (self FileAccess) EofReached() bool {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.FileAccess.eof_reached, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self FileAccess) Get8() Int {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.FileAccess.get_8, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Int](abi)
	abi.free()
	return ret
}

func (self FileAccess) Get16() Int {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.FileAccess.get_16, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Int](abi)
	abi.free()
	return ret
}

func (self FileAccess) Get32() Int {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.FileAccess.get_32, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Int](abi)
	abi.free()
	return ret
}

func (self FileAccess) Get64() Int {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.FileAccess.get_64, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Int](abi)
	abi.free()
	return ret
}

func (self FileAccess) GetFloat() Float {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.FileAccess.get_float, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Float](abi)
	abi.free()
	return ret
}

func (self FileAccess) GetDouble() Float {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.FileAccess.get_double, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Float](abi)
	abi.free()
	return ret
}

func (self FileAccess) GetReal() Float {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.FileAccess.get_real, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Float](abi)
	abi.free()
	return ret
}

func (self FileAccess) GetBuffer(ctx Context, length Int) PackedByteArray {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Int](0, abi, length)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.FileAccess.get_buffer, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[[2]uintptr](abi)
	abi.free()
	return mmm.Make[API, PackedByteArray, [2]uintptr](ctx, selfPtr.API, ret)
}

func (self FileAccess) GetLine(ctx Context) String {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.FileAccess.get_line, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[uintptr](abi)
	abi.free()
	return mmm.Make[API, String, uintptr](ctx, selfPtr.API, ret)
}

func (self FileAccess) GetCsvLine(ctx Context, delim String) PackedStringArray {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[String](0, abi, delim)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.FileAccess.get_csv_line, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[[2]uintptr](abi)
	abi.free()
	return mmm.Make[API, PackedStringArray, [2]uintptr](ctx, selfPtr.API, ret)
}

func (self FileAccess) GetAsText(ctx Context, skip_cr bool) String {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[bool](0, abi, skip_cr)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.FileAccess.get_as_text, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[uintptr](abi)
	abi.free()
	return mmm.Make[API, String, uintptr](ctx, selfPtr.API, ret)
}

func (self FileAccess) GetMd5(ctx Context, path String) String {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[String](0, abi, path)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.FileAccess.get_md5, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[uintptr](abi)
	abi.free()
	return mmm.Make[API, String, uintptr](ctx, selfPtr.API, ret)
}

func (self FileAccess) GetSha256(ctx Context, path String) String {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[String](0, abi, path)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.FileAccess.get_sha256, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[uintptr](abi)
	abi.free()
	return mmm.Make[API, String, uintptr](ctx, selfPtr.API, ret)
}

func (self FileAccess) IsBigEndian() bool {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.FileAccess.is_big_endian, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self FileAccess) SetBigEndian(big_endian bool) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[bool](0, abi, big_endian)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.FileAccess.set_big_endian, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self FileAccess) GetError() int64 {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.FileAccess.get_error, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[int64](abi)
	abi.free()
	return ret
}

func (self FileAccess) GetVar(ctx Context, allow_objects bool) Variant {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[bool](0, abi, allow_objects)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.FileAccess.get_var, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[[3]uintptr](abi)
	abi.free()
	return mmm.Make[API, Variant, [3]uintptr](ctx, selfPtr.API, ret)
}

func (self FileAccess) Store8(value Int) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Int](0, abi, value)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.FileAccess.store_8, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self FileAccess) Store16(value Int) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Int](0, abi, value)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.FileAccess.store_16, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self FileAccess) Store32(value Int) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Int](0, abi, value)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.FileAccess.store_32, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self FileAccess) Store64(value Int) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Int](0, abi, value)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.FileAccess.store_64, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self FileAccess) StoreFloat(value Float) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Float](0, abi, value)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.FileAccess.store_float, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self FileAccess) StoreDouble(value Float) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Float](0, abi, value)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.FileAccess.store_double, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self FileAccess) StoreReal(value Float) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Float](0, abi, value)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.FileAccess.store_real, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self FileAccess) StoreBuffer(buffer PackedByteArray) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[PackedByteArray](0, abi, buffer)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.FileAccess.store_buffer, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self FileAccess) StoreLine(line String) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[String](0, abi, line)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.FileAccess.store_line, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self FileAccess) StoreCsvLine(values PackedStringArray, delim String) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[PackedStringArray](0, abi, values)
	frameSet[String](1, abi, delim)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.FileAccess.store_csv_line, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self FileAccess) StoreString(s String) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[String](0, abi, s)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.FileAccess.store_string, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self FileAccess) StoreVar(value Variant, full_objects bool) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Variant](0, abi, value)
	frameSet[bool](1, abi, full_objects)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.FileAccess.store_var, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self FileAccess) StorePascalString(s String) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[String](0, abi, s)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.FileAccess.store_pascal_string, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self FileAccess) GetPascalString(ctx Context) String {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.FileAccess.get_pascal_string, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[uintptr](abi)
	abi.free()
	return mmm.Make[API, String, uintptr](ctx, selfPtr.API, ret)
}

func (self FileAccess) Close() {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.FileAccess.close, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self FileAccess) FileExists(path String) bool {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[String](0, abi, path)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.FileAccess.file_exists, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self FileAccess) GetModifiedTime(file String) Int {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[String](0, abi, file)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.FileAccess.get_modified_time, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Int](abi)
	abi.free()
	return ret
}

func (self FileAccess) GetUnixPermissions(file String) FileAccessUnixPermissionFlags {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[String](0, abi, file)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.FileAccess.get_unix_permissions, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[FileAccessUnixPermissionFlags](abi)
	abi.free()
	return ret
}

func (self FileAccess) SetUnixPermissions(file String, permissions FileAccessUnixPermissionFlags) int64 {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[String](0, abi, file)
	frameSet[FileAccessUnixPermissionFlags](1, abi, permissions)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.FileAccess.set_unix_permissions, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[int64](abi)
	abi.free()
	return ret
}

func (self FileAccess) GetHiddenAttribute(file String) bool {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[String](0, abi, file)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.FileAccess.get_hidden_attribute, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self FileAccess) SetHiddenAttribute(file String, hidden bool) int64 {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[String](0, abi, file)
	frameSet[bool](1, abi, hidden)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.FileAccess.set_hidden_attribute, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[int64](abi)
	abi.free()
	return ret
}

func (self FileAccess) SetReadOnlyAttribute(file String, ro bool) int64 {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[String](0, abi, file)
	frameSet[bool](1, abi, ro)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.FileAccess.set_read_only_attribute, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[int64](abi)
	abi.free()
	return ret
}

func (self FileAccess) GetReadOnlyAttribute(file String) bool {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[String](0, abi, file)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.FileAccess.get_read_only_attribute, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self FileAccess) virtual(name string) reflect.Value {
	switch name {
	default:
		return self.Super().virtual(name)
	}
}

type Font struct{ Class[Font, Resource] }

func (self Font) Resource() Resource { return *self.Super() }

func (self Font) RefCounted() RefCounted { return *self.Super().Super() }

func (self Font) Object() Object { return *self.Super().Super().Super() }

func (self Font) SetFallbacks(fallbacks ArrayOf[Font]) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[ArrayOf[Font]](0, abi, fallbacks)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Font.set_fallbacks, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self Font) GetFallbacks() ArrayOf[Font] {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Font.get_fallbacks, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[ArrayOf[Font]](abi)
	abi.free()
	return ret
}

func (self Font) FindVariation(variation_coordinates Dictionary, face_index Int, strength Float, transform Transform2D, spacing_top Int, spacing_bottom Int, spacing_space Int, spacing_glyph Int) RID {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Dictionary](0, abi, variation_coordinates)
	frameSet[Int](1, abi, face_index)
	frameSet[Float](2, abi, strength)
	frameSet[Transform2D](3, abi, transform)
	frameSet[Int](4, abi, spacing_top)
	frameSet[Int](5, abi, spacing_bottom)
	frameSet[Int](6, abi, spacing_space)
	frameSet[Int](7, abi, spacing_glyph)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Font.find_variation, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[RID](abi)
	abi.free()
	return ret
}

func (self Font) GetRids() ArrayOf[RID] {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Font.get_rids, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[ArrayOf[RID]](abi)
	abi.free()
	return ret
}

func (self Font) GetHeight(font_size Int) Float {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Int](0, abi, font_size)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Font.get_height, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Float](abi)
	abi.free()
	return ret
}

func (self Font) GetAscent(font_size Int) Float {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Int](0, abi, font_size)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Font.get_ascent, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Float](abi)
	abi.free()
	return ret
}

func (self Font) GetDescent(font_size Int) Float {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Int](0, abi, font_size)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Font.get_descent, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Float](abi)
	abi.free()
	return ret
}

func (self Font) GetUnderlinePosition(font_size Int) Float {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Int](0, abi, font_size)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Font.get_underline_position, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Float](abi)
	abi.free()
	return ret
}

func (self Font) GetUnderlineThickness(font_size Int) Float {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Int](0, abi, font_size)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Font.get_underline_thickness, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Float](abi)
	abi.free()
	return ret
}

func (self Font) GetFontName(ctx Context) String {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Font.get_font_name, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[uintptr](abi)
	abi.free()
	return mmm.Make[API, String, uintptr](ctx, selfPtr.API, ret)
}

func (self Font) GetFontStyleName(ctx Context) String {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Font.get_font_style_name, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[uintptr](abi)
	abi.free()
	return mmm.Make[API, String, uintptr](ctx, selfPtr.API, ret)
}

func (self Font) GetOtNameStrings(ctx Context) Dictionary {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Font.get_ot_name_strings, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[uintptr](abi)
	abi.free()
	return mmm.Make[API, Dictionary, uintptr](ctx, selfPtr.API, ret)
}

func (self Font) GetFontStyle() TextServerFontStyle {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Font.get_font_style, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[TextServerFontStyle](abi)
	abi.free()
	return ret
}

func (self Font) GetFontWeight() Int {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Font.get_font_weight, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Int](abi)
	abi.free()
	return ret
}

func (self Font) GetFontStretch() Int {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Font.get_font_stretch, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Int](abi)
	abi.free()
	return ret
}

func (self Font) GetSpacing(spacing TextServerSpacingType) Int {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[TextServerSpacingType](0, abi, spacing)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Font.get_spacing, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Int](abi)
	abi.free()
	return ret
}

func (self Font) GetOpentypeFeatures(ctx Context) Dictionary {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Font.get_opentype_features, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[uintptr](abi)
	abi.free()
	return mmm.Make[API, Dictionary, uintptr](ctx, selfPtr.API, ret)
}

func (self Font) SetCacheCapacity(single_line Int, multi_line Int) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Int](0, abi, single_line)
	frameSet[Int](1, abi, multi_line)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Font.set_cache_capacity, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self Font) GetStringSize(text String, alignment HorizontalAlignment, width Float, font_size Int, justification_flags TextServerJustificationFlag, direction TextServerDirection, orientation TextServerOrientation) Vector2 {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[String](0, abi, text)
	frameSet[HorizontalAlignment](1, abi, alignment)
	frameSet[Float](2, abi, width)
	frameSet[Int](3, abi, font_size)
	frameSet[TextServerJustificationFlag](4, abi, justification_flags)
	frameSet[TextServerDirection](5, abi, direction)
	frameSet[TextServerOrientation](6, abi, orientation)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Font.get_string_size, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Vector2](abi)
	abi.free()
	return ret
}

func (self Font) GetMultilineStringSize(text String, alignment HorizontalAlignment, width Float, font_size Int, max_lines Int, brk_flags TextServerLineBreakFlag, justification_flags TextServerJustificationFlag, direction TextServerDirection, orientation TextServerOrientation) Vector2 {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[String](0, abi, text)
	frameSet[HorizontalAlignment](1, abi, alignment)
	frameSet[Float](2, abi, width)
	frameSet[Int](3, abi, font_size)
	frameSet[Int](4, abi, max_lines)
	frameSet[TextServerLineBreakFlag](5, abi, brk_flags)
	frameSet[TextServerJustificationFlag](6, abi, justification_flags)
	frameSet[TextServerDirection](7, abi, direction)
	frameSet[TextServerOrientation](8, abi, orientation)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Font.get_multiline_string_size, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Vector2](abi)
	abi.free()
	return ret
}

func (self Font) DrawString(canvas_item RID, pos Vector2, text String, alignment HorizontalAlignment, width Float, font_size Int, modulate Color, justification_flags TextServerJustificationFlag, direction TextServerDirection, orientation TextServerOrientation) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, canvas_item)
	frameSet[Vector2](1, abi, pos)
	frameSet[String](2, abi, text)
	frameSet[HorizontalAlignment](3, abi, alignment)
	frameSet[Float](4, abi, width)
	frameSet[Int](5, abi, font_size)
	frameSet[Color](6, abi, modulate)
	frameSet[TextServerJustificationFlag](7, abi, justification_flags)
	frameSet[TextServerDirection](8, abi, direction)
	frameSet[TextServerOrientation](9, abi, orientation)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Font.draw_string, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self Font) DrawMultilineString(canvas_item RID, pos Vector2, text String, alignment HorizontalAlignment, width Float, font_size Int, max_lines Int, modulate Color, brk_flags TextServerLineBreakFlag, justification_flags TextServerJustificationFlag, direction TextServerDirection, orientation TextServerOrientation) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, canvas_item)
	frameSet[Vector2](1, abi, pos)
	frameSet[String](2, abi, text)
	frameSet[HorizontalAlignment](3, abi, alignment)
	frameSet[Float](4, abi, width)
	frameSet[Int](5, abi, font_size)
	frameSet[Int](6, abi, max_lines)
	frameSet[Color](7, abi, modulate)
	frameSet[TextServerLineBreakFlag](8, abi, brk_flags)
	frameSet[TextServerJustificationFlag](9, abi, justification_flags)
	frameSet[TextServerDirection](10, abi, direction)
	frameSet[TextServerOrientation](11, abi, orientation)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Font.draw_multiline_string, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self Font) DrawStringOutline(canvas_item RID, pos Vector2, text String, alignment HorizontalAlignment, width Float, font_size Int, size Int, modulate Color, justification_flags TextServerJustificationFlag, direction TextServerDirection, orientation TextServerOrientation) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, canvas_item)
	frameSet[Vector2](1, abi, pos)
	frameSet[String](2, abi, text)
	frameSet[HorizontalAlignment](3, abi, alignment)
	frameSet[Float](4, abi, width)
	frameSet[Int](5, abi, font_size)
	frameSet[Int](6, abi, size)
	frameSet[Color](7, abi, modulate)
	frameSet[TextServerJustificationFlag](8, abi, justification_flags)
	frameSet[TextServerDirection](9, abi, direction)
	frameSet[TextServerOrientation](10, abi, orientation)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Font.draw_string_outline, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self Font) DrawMultilineStringOutline(canvas_item RID, pos Vector2, text String, alignment HorizontalAlignment, width Float, font_size Int, max_lines Int, size Int, modulate Color, brk_flags TextServerLineBreakFlag, justification_flags TextServerJustificationFlag, direction TextServerDirection, orientation TextServerOrientation) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, canvas_item)
	frameSet[Vector2](1, abi, pos)
	frameSet[String](2, abi, text)
	frameSet[HorizontalAlignment](3, abi, alignment)
	frameSet[Float](4, abi, width)
	frameSet[Int](5, abi, font_size)
	frameSet[Int](6, abi, max_lines)
	frameSet[Int](7, abi, size)
	frameSet[Color](8, abi, modulate)
	frameSet[TextServerLineBreakFlag](9, abi, brk_flags)
	frameSet[TextServerJustificationFlag](10, abi, justification_flags)
	frameSet[TextServerDirection](11, abi, direction)
	frameSet[TextServerOrientation](12, abi, orientation)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Font.draw_multiline_string_outline, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self Font) GetCharSize(char Int, font_size Int) Vector2 {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Int](0, abi, char)
	frameSet[Int](1, abi, font_size)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Font.get_char_size, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Vector2](abi)
	abi.free()
	return ret
}

func (self Font) DrawChar(canvas_item RID, pos Vector2, char Int, font_size Int, modulate Color) Float {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, canvas_item)
	frameSet[Vector2](1, abi, pos)
	frameSet[Int](2, abi, char)
	frameSet[Int](3, abi, font_size)
	frameSet[Color](4, abi, modulate)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Font.draw_char, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Float](abi)
	abi.free()
	return ret
}

func (self Font) DrawCharOutline(canvas_item RID, pos Vector2, char Int, font_size Int, size Int, modulate Color) Float {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, canvas_item)
	frameSet[Vector2](1, abi, pos)
	frameSet[Int](2, abi, char)
	frameSet[Int](3, abi, font_size)
	frameSet[Int](4, abi, size)
	frameSet[Color](5, abi, modulate)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Font.draw_char_outline, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Float](abi)
	abi.free()
	return ret
}

func (self Font) HasChar(char Int) bool {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Int](0, abi, char)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Font.has_char, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self Font) GetSupportedChars(ctx Context) String {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Font.get_supported_chars, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[uintptr](abi)
	abi.free()
	return mmm.Make[API, String, uintptr](ctx, selfPtr.API, ret)
}

func (self Font) IsLanguageSupported(language String) bool {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[String](0, abi, language)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Font.is_language_supported, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self Font) IsScriptSupported(script String) bool {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[String](0, abi, script)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Font.is_script_supported, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self Font) GetSupportedFeatureList(ctx Context) Dictionary {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Font.get_supported_feature_list, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[uintptr](abi)
	abi.free()
	return mmm.Make[API, Dictionary, uintptr](ctx, selfPtr.API, ret)
}

func (self Font) GetSupportedVariationList(ctx Context) Dictionary {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Font.get_supported_variation_list, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[uintptr](abi)
	abi.free()
	return mmm.Make[API, Dictionary, uintptr](ctx, selfPtr.API, ret)
}

func (self Font) GetFaceCount() Int {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Font.get_face_count, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Int](abi)
	abi.free()
	return ret
}

func (self Font) virtual(name string) reflect.Value {
	switch name {
	default:
		return self.Super().virtual(name)
	}
}

type ExtensionInitializationLevel int64

const (
	ExtensionInitializationLevelCore    ExtensionInitializationLevel = 0
	ExtensionInitializationLevelServers ExtensionInitializationLevel = 1
	ExtensionInitializationLevelScene   ExtensionInitializationLevel = 2
	ExtensionInitializationLevelEditor  ExtensionInitializationLevel = 3
)

type GDExtension struct{ Class[GDExtension, Resource] }

func (self GDExtension) Resource() Resource { return *self.Super() }

func (self GDExtension) RefCounted() RefCounted { return *self.Super().Super() }

func (self GDExtension) Object() Object { return *self.Super().Super().Super() }

func (self GDExtension) OpenLibrary(path String, entry_symbol String) int64 {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[String](0, abi, path)
	frameSet[String](1, abi, entry_symbol)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.GDExtension.open_library, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[int64](abi)
	abi.free()
	return ret
}

func (self GDExtension) CloseLibrary() {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.GDExtension.close_library, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self GDExtension) IsLibraryOpen() bool {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.GDExtension.is_library_open, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self GDExtension) GetMinimumLibraryInitializationLevel() ExtensionInitializationLevel {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.GDExtension.get_minimum_library_initialization_level, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[ExtensionInitializationLevel](abi)
	abi.free()
	return ret
}

func (self GDExtension) InitializeLibrary(level ExtensionInitializationLevel) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[ExtensionInitializationLevel](0, abi, level)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.GDExtension.initialize_library, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self GDExtension) virtual(name string) reflect.Value {
	switch name {
	default:
		return self.Super().virtual(name)
	}
}

type ImageFormat int64

type ImageInterpolation int64

type ImageAlphaMode int64

type ImageCompressMode int64

type ImageUsedChannels int64

type ImageCompressSource int64

type ImageASTCFormat int64
type Image struct{ Class[Image, Resource] }

func (self Image) Resource() Resource { return *self.Super() }

func (self Image) RefCounted() RefCounted { return *self.Super().Super() }

func (self Image) Object() Object { return *self.Super().Super().Super() }

func (self Image) GetWidth() Int {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Image.get_width, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Int](abi)
	abi.free()
	return ret
}

func (self Image) GetHeight() Int {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Image.get_height, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Int](abi)
	abi.free()
	return ret
}

func (self Image) GetSize() Vector2i {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Image.get_size, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Vector2i](abi)
	abi.free()
	return ret
}

func (self Image) HasMipmaps() bool {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Image.has_mipmaps, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self Image) GetFormat() ImageFormat {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Image.get_format, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[ImageFormat](abi)
	abi.free()
	return ret
}

func (self Image) GetData(ctx Context) PackedByteArray {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Image.get_data, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[[2]uintptr](abi)
	abi.free()
	return mmm.Make[API, PackedByteArray, [2]uintptr](ctx, selfPtr.API, ret)
}

func (self Image) Convert(format ImageFormat) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[ImageFormat](0, abi, format)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Image.convert, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self Image) GetMipmapCount() Int {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Image.get_mipmap_count, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Int](abi)
	abi.free()
	return ret
}

func (self Image) GetMipmapOffset(mipmap Int) Int {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Int](0, abi, mipmap)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Image.get_mipmap_offset, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Int](abi)
	abi.free()
	return ret
}

func (self Image) ResizeToPo2(square bool, interpolation ImageInterpolation) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[bool](0, abi, square)
	frameSet[ImageInterpolation](1, abi, interpolation)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Image.resize_to_po2, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self Image) Resize(width Int, height Int, interpolation ImageInterpolation) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Int](0, abi, width)
	frameSet[Int](1, abi, height)
	frameSet[ImageInterpolation](2, abi, interpolation)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Image.resize, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self Image) ShrinkX2() {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Image.shrink_x2, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self Image) Crop(width Int, height Int) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Int](0, abi, width)
	frameSet[Int](1, abi, height)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Image.crop, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self Image) FlipX() {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Image.flip_x, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self Image) FlipY() {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Image.flip_y, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self Image) GenerateMipmaps(renormalize bool) int64 {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[bool](0, abi, renormalize)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Image.generate_mipmaps, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[int64](abi)
	abi.free()
	return ret
}

func (self Image) ClearMipmaps() {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Image.clear_mipmaps, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self Image) Create(width Int, height Int, use_mipmaps bool, format ImageFormat) Image {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Int](0, abi, width)
	frameSet[Int](1, abi, height)
	frameSet[bool](2, abi, use_mipmaps)
	frameSet[ImageFormat](3, abi, format)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Image.create, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Image](abi)
	abi.free()
	return ret
}

func (self Image) CreateFromData(width Int, height Int, use_mipmaps bool, format ImageFormat, data PackedByteArray) Image {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Int](0, abi, width)
	frameSet[Int](1, abi, height)
	frameSet[bool](2, abi, use_mipmaps)
	frameSet[ImageFormat](3, abi, format)
	frameSet[PackedByteArray](4, abi, data)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Image.create_from_data, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Image](abi)
	abi.free()
	return ret
}

func (self Image) SetData(width Int, height Int, use_mipmaps bool, format ImageFormat, data PackedByteArray) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Int](0, abi, width)
	frameSet[Int](1, abi, height)
	frameSet[bool](2, abi, use_mipmaps)
	frameSet[ImageFormat](3, abi, format)
	frameSet[PackedByteArray](4, abi, data)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Image.set_data, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self Image) IsEmpty() bool {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Image.is_empty, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self Image) Load(path String) int64 {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[String](0, abi, path)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Image.load, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[int64](abi)
	abi.free()
	return ret
}

func (self Image) LoadFromFile(path String) Image {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[String](0, abi, path)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Image.load_from_file, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Image](abi)
	abi.free()
	return ret
}

func (self Image) SavePng(path String) int64 {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[String](0, abi, path)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Image.save_png, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[int64](abi)
	abi.free()
	return ret
}

func (self Image) SavePngToBuffer(ctx Context) PackedByteArray {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Image.save_png_to_buffer, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[[2]uintptr](abi)
	abi.free()
	return mmm.Make[API, PackedByteArray, [2]uintptr](ctx, selfPtr.API, ret)
}

func (self Image) SaveJpg(path String, quality Float) int64 {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[String](0, abi, path)
	frameSet[Float](1, abi, quality)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Image.save_jpg, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[int64](abi)
	abi.free()
	return ret
}

func (self Image) SaveJpgToBuffer(ctx Context, quality Float) PackedByteArray {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Float](0, abi, quality)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Image.save_jpg_to_buffer, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[[2]uintptr](abi)
	abi.free()
	return mmm.Make[API, PackedByteArray, [2]uintptr](ctx, selfPtr.API, ret)
}

func (self Image) SaveExr(path String, grayscale bool) int64 {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[String](0, abi, path)
	frameSet[bool](1, abi, grayscale)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Image.save_exr, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[int64](abi)
	abi.free()
	return ret
}

func (self Image) SaveExrToBuffer(ctx Context, grayscale bool) PackedByteArray {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[bool](0, abi, grayscale)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Image.save_exr_to_buffer, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[[2]uintptr](abi)
	abi.free()
	return mmm.Make[API, PackedByteArray, [2]uintptr](ctx, selfPtr.API, ret)
}

func (self Image) SaveWebp(path String, lossy bool, quality Float) int64 {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[String](0, abi, path)
	frameSet[bool](1, abi, lossy)
	frameSet[Float](2, abi, quality)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Image.save_webp, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[int64](abi)
	abi.free()
	return ret
}

func (self Image) SaveWebpToBuffer(ctx Context, lossy bool, quality Float) PackedByteArray {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[bool](0, abi, lossy)
	frameSet[Float](1, abi, quality)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Image.save_webp_to_buffer, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[[2]uintptr](abi)
	abi.free()
	return mmm.Make[API, PackedByteArray, [2]uintptr](ctx, selfPtr.API, ret)
}

func (self Image) DetectAlpha() ImageAlphaMode {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Image.detect_alpha, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[ImageAlphaMode](abi)
	abi.free()
	return ret
}

func (self Image) IsInvisible() bool {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Image.is_invisible, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self Image) DetectUsedChannels(source ImageCompressSource) ImageUsedChannels {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[ImageCompressSource](0, abi, source)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Image.detect_used_channels, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[ImageUsedChannels](abi)
	abi.free()
	return ret
}

func (self Image) Compress(mode ImageCompressMode, source ImageCompressSource, astc_format ImageASTCFormat) int64 {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[ImageCompressMode](0, abi, mode)
	frameSet[ImageCompressSource](1, abi, source)
	frameSet[ImageASTCFormat](2, abi, astc_format)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Image.compress, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[int64](abi)
	abi.free()
	return ret
}

func (self Image) CompressFromChannels(mode ImageCompressMode, channels ImageUsedChannels, astc_format ImageASTCFormat) int64 {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[ImageCompressMode](0, abi, mode)
	frameSet[ImageUsedChannels](1, abi, channels)
	frameSet[ImageASTCFormat](2, abi, astc_format)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Image.compress_from_channels, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[int64](abi)
	abi.free()
	return ret
}

func (self Image) Decompress() int64 {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Image.decompress, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[int64](abi)
	abi.free()
	return ret
}

func (self Image) IsCompressed() bool {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Image.is_compressed, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self Image) Rotate90(direction ClockDirection) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[ClockDirection](0, abi, direction)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Image.rotate_90, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self Image) Rotate180() {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Image.rotate_180, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self Image) FixAlphaEdges() {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Image.fix_alpha_edges, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self Image) PremultiplyAlpha() {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Image.premultiply_alpha, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self Image) SrgbToLinear() {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Image.srgb_to_linear, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self Image) NormalMapToXy() {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Image.normal_map_to_xy, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self Image) RgbeToSrgb() Image {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Image.rgbe_to_srgb, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Image](abi)
	abi.free()
	return ret
}

func (self Image) BumpMapToNormalMap(bump_scale Float) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Float](0, abi, bump_scale)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Image.bump_map_to_normal_map, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self Image) ComputeImageMetrics(ctx Context, compared_image Image, use_luma bool) Dictionary {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Image](0, abi, compared_image)
	frameSet[bool](1, abi, use_luma)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Image.compute_image_metrics, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[uintptr](abi)
	abi.free()
	return mmm.Make[API, Dictionary, uintptr](ctx, selfPtr.API, ret)
}

func (self Image) BlitRect(src Image, src_rect Rect2i, dst Vector2i) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Image](0, abi, src)
	frameSet[Rect2i](1, abi, src_rect)
	frameSet[Vector2i](2, abi, dst)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Image.blit_rect, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self Image) BlitRectMask(src Image, mask Image, src_rect Rect2i, dst Vector2i) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Image](0, abi, src)
	frameSet[Image](1, abi, mask)
	frameSet[Rect2i](2, abi, src_rect)
	frameSet[Vector2i](3, abi, dst)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Image.blit_rect_mask, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self Image) BlendRect(src Image, src_rect Rect2i, dst Vector2i) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Image](0, abi, src)
	frameSet[Rect2i](1, abi, src_rect)
	frameSet[Vector2i](2, abi, dst)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Image.blend_rect, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self Image) BlendRectMask(src Image, mask Image, src_rect Rect2i, dst Vector2i) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Image](0, abi, src)
	frameSet[Image](1, abi, mask)
	frameSet[Rect2i](2, abi, src_rect)
	frameSet[Vector2i](3, abi, dst)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Image.blend_rect_mask, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self Image) Fill(color Color) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Color](0, abi, color)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Image.fill, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self Image) FillRect(rect Rect2i, color Color) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Rect2i](0, abi, rect)
	frameSet[Color](1, abi, color)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Image.fill_rect, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self Image) GetUsedRect() Rect2i {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Image.get_used_rect, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Rect2i](abi)
	abi.free()
	return ret
}

func (self Image) GetRegion(region Rect2i) Image {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Rect2i](0, abi, region)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Image.get_region, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Image](abi)
	abi.free()
	return ret
}

func (self Image) CopyFrom(src Image) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Image](0, abi, src)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Image.copy_from, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self Image) GetPixelv(point Vector2i) Color {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Vector2i](0, abi, point)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Image.get_pixelv, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Color](abi)
	abi.free()
	return ret
}

func (self Image) GetPixel(x Int, y Int) Color {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Int](0, abi, x)
	frameSet[Int](1, abi, y)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Image.get_pixel, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Color](abi)
	abi.free()
	return ret
}

func (self Image) SetPixelv(point Vector2i, color Color) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Vector2i](0, abi, point)
	frameSet[Color](1, abi, color)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Image.set_pixelv, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self Image) SetPixel(x Int, y Int, color Color) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Int](0, abi, x)
	frameSet[Int](1, abi, y)
	frameSet[Color](2, abi, color)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Image.set_pixel, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self Image) AdjustBcs(brightness Float, contrast Float, saturation Float) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Float](0, abi, brightness)
	frameSet[Float](1, abi, contrast)
	frameSet[Float](2, abi, saturation)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Image.adjust_bcs, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self Image) LoadPngFromBuffer(buffer PackedByteArray) int64 {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[PackedByteArray](0, abi, buffer)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Image.load_png_from_buffer, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[int64](abi)
	abi.free()
	return ret
}

func (self Image) LoadJpgFromBuffer(buffer PackedByteArray) int64 {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[PackedByteArray](0, abi, buffer)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Image.load_jpg_from_buffer, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[int64](abi)
	abi.free()
	return ret
}

func (self Image) LoadWebpFromBuffer(buffer PackedByteArray) int64 {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[PackedByteArray](0, abi, buffer)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Image.load_webp_from_buffer, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[int64](abi)
	abi.free()
	return ret
}

func (self Image) LoadTgaFromBuffer(buffer PackedByteArray) int64 {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[PackedByteArray](0, abi, buffer)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Image.load_tga_from_buffer, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[int64](abi)
	abi.free()
	return ret
}

func (self Image) LoadBmpFromBuffer(buffer PackedByteArray) int64 {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[PackedByteArray](0, abi, buffer)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Image.load_bmp_from_buffer, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[int64](abi)
	abi.free()
	return ret
}

func (self Image) LoadKtxFromBuffer(buffer PackedByteArray) int64 {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[PackedByteArray](0, abi, buffer)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Image.load_ktx_from_buffer, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[int64](abi)
	abi.free()
	return ret
}

func (self Image) LoadSvgFromBuffer(buffer PackedByteArray, scale Float) int64 {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[PackedByteArray](0, abi, buffer)
	frameSet[Float](1, abi, scale)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Image.load_svg_from_buffer, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[int64](abi)
	abi.free()
	return ret
}

func (self Image) LoadSvgFromString(svg_str String, scale Float) int64 {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[String](0, abi, svg_str)
	frameSet[Float](1, abi, scale)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Image.load_svg_from_string, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[int64](abi)
	abi.free()
	return ret
}

func (self Image) virtual(name string) reflect.Value {
	switch name {
	default:
		return self.Super().virtual(name)
	}
}

type InputEvent struct{ Class[InputEvent, Resource] }

func (self InputEvent) Resource() Resource { return *self.Super() }

func (self InputEvent) RefCounted() RefCounted { return *self.Super().Super() }

func (self InputEvent) Object() Object { return *self.Super().Super().Super() }

func (self InputEvent) SetDevice(device Int) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Int](0, abi, device)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.InputEvent.set_device, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self InputEvent) GetDevice() Int {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.InputEvent.get_device, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Int](abi)
	abi.free()
	return ret
}

func (self InputEvent) IsAction(action StringName, exact_match bool) bool {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[StringName](0, abi, action)
	frameSet[bool](1, abi, exact_match)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.InputEvent.is_action, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self InputEvent) IsActionPressed(action StringName, allow_echo bool, exact_match bool) bool {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[StringName](0, abi, action)
	frameSet[bool](1, abi, allow_echo)
	frameSet[bool](2, abi, exact_match)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.InputEvent.is_action_pressed, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self InputEvent) IsActionReleased(action StringName, exact_match bool) bool {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[StringName](0, abi, action)
	frameSet[bool](1, abi, exact_match)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.InputEvent.is_action_released, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self InputEvent) GetActionStrength(action StringName, exact_match bool) Float {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[StringName](0, abi, action)
	frameSet[bool](1, abi, exact_match)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.InputEvent.get_action_strength, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Float](abi)
	abi.free()
	return ret
}

func (self InputEvent) IsCanceled() bool {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.InputEvent.is_canceled, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self InputEvent) IsPressed() bool {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.InputEvent.is_pressed, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self InputEvent) IsReleased() bool {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.InputEvent.is_released, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self InputEvent) IsEcho() bool {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.InputEvent.is_echo, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self InputEvent) AsText(ctx Context) String {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.InputEvent.as_text, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[uintptr](abi)
	abi.free()
	return mmm.Make[API, String, uintptr](ctx, selfPtr.API, ret)
}

func (self InputEvent) IsMatch(event InputEvent, exact_match bool) bool {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[InputEvent](0, abi, event)
	frameSet[bool](1, abi, exact_match)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.InputEvent.is_match, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self InputEvent) IsActionType() bool {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.InputEvent.is_action_type, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self InputEvent) Accumulate(with_event InputEvent) bool {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[InputEvent](0, abi, with_event)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.InputEvent.accumulate, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self InputEvent) XformedBy(xform Transform2D, local_ofs Vector2) InputEvent {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Transform2D](0, abi, xform)
	frameSet[Vector2](1, abi, local_ofs)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.InputEvent.xformed_by, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[InputEvent](abi)
	abi.free()
	return ret
}

func (self InputEvent) virtual(name string) reflect.Value {
	switch name {
	default:
		return self.Super().virtual(name)
	}
}

type IntervalTweener struct {
	Class[IntervalTweener, Tweener]
}

func (self IntervalTweener) Tweener() Tweener { return *self.Super() }

func (self IntervalTweener) RefCounted() RefCounted { return *self.Super().Super() }

func (self IntervalTweener) Object() Object { return *self.Super().Super().Super() }

func (self IntervalTweener) virtual(name string) reflect.Value {
	switch name {
	default:
		return self.Super().virtual(name)
	}
}

type MainLoop struct{ Class[MainLoop, Object] }

func (self MainLoop) Object() Object { return *self.Super() }

func (MainLoop) _initialize(impl func(ptr unsafe.Pointer, ctx Context), api *API) (cb ExtensionClassCallVirtualFunc) {
	cb.Set(func(class cgo.Handle, p_args godotArgs, p_back godotBack) {
		ctx := newContext(api)
		self := reflect.ValueOf(class.Value()).UnsafePointer()
		impl(self, ctx)
		ctx.Free()
	})
	return
}

func (MainLoop) _physics_process(impl func(ptr unsafe.Pointer, ctx Context, delta Float) bool, api *API) (cb ExtensionClassCallVirtualFunc) {
	cb.Set(func(class cgo.Handle, p_args godotArgs, p_back godotBack) {
		ctx := newContext(api)
		var delta = godotGet[Float](p_args, 0)
		self := reflect.ValueOf(class.Value()).UnsafePointer()
		ret := impl(self, ctx, delta)
		ctx.Free()
		godotSet[bool](p_back, ret)
	})
	return
}

func (MainLoop) _process(impl func(ptr unsafe.Pointer, ctx Context, delta Float) bool, api *API) (cb ExtensionClassCallVirtualFunc) {
	cb.Set(func(class cgo.Handle, p_args godotArgs, p_back godotBack) {
		ctx := newContext(api)
		var delta = godotGet[Float](p_args, 0)
		self := reflect.ValueOf(class.Value()).UnsafePointer()
		ret := impl(self, ctx, delta)
		ctx.Free()
		godotSet[bool](p_back, ret)
	})
	return
}

func (MainLoop) _finalize(impl func(ptr unsafe.Pointer, ctx Context), api *API) (cb ExtensionClassCallVirtualFunc) {
	cb.Set(func(class cgo.Handle, p_args godotArgs, p_back godotBack) {
		ctx := newContext(api)
		self := reflect.ValueOf(class.Value()).UnsafePointer()
		impl(self, ctx)
		ctx.Free()
	})
	return
}

func (self MainLoop) virtual(name string) reflect.Value {
	switch name {
	case "_initialize":
		return reflect.ValueOf(self._initialize)
	case "_physics_process":
		return reflect.ValueOf(self._physics_process)
	case "_process":
		return reflect.ValueOf(self._process)
	case "_finalize":
		return reflect.ValueOf(self._finalize)
	default:
		return self.Super().virtual(name)
	}
}

type Material struct{ Class[Material, Resource] }

func (self Material) Resource() Resource { return *self.Super() }

func (self Material) RefCounted() RefCounted { return *self.Super().Super() }

func (self Material) Object() Object { return *self.Super().Super().Super() }

func (Material) _get_shader_rid(impl func(ptr unsafe.Pointer, ctx Context) RID, api *API) (cb ExtensionClassCallVirtualFunc) {
	cb.Set(func(class cgo.Handle, p_args godotArgs, p_back godotBack) {
		ctx := newContext(api)
		self := reflect.ValueOf(class.Value()).UnsafePointer()
		ret := impl(self, ctx)
		ctx.Free()
		godotSet[RID](p_back, ret)
	})
	return
}

func (Material) _get_shader_mode(impl func(ptr unsafe.Pointer, ctx Context) ShaderMode, api *API) (cb ExtensionClassCallVirtualFunc) {
	cb.Set(func(class cgo.Handle, p_args godotArgs, p_back godotBack) {
		ctx := newContext(api)
		self := reflect.ValueOf(class.Value()).UnsafePointer()
		ret := impl(self, ctx)
		ctx.Free()
		godotSet[ShaderMode](p_back, ret)
	})
	return
}

func (Material) _can_do_next_pass(impl func(ptr unsafe.Pointer, ctx Context) bool, api *API) (cb ExtensionClassCallVirtualFunc) {
	cb.Set(func(class cgo.Handle, p_args godotArgs, p_back godotBack) {
		ctx := newContext(api)
		self := reflect.ValueOf(class.Value()).UnsafePointer()
		ret := impl(self, ctx)
		ctx.Free()
		godotSet[bool](p_back, ret)
	})
	return
}

func (Material) _can_use_render_priority(impl func(ptr unsafe.Pointer, ctx Context) bool, api *API) (cb ExtensionClassCallVirtualFunc) {
	cb.Set(func(class cgo.Handle, p_args godotArgs, p_back godotBack) {
		ctx := newContext(api)
		self := reflect.ValueOf(class.Value()).UnsafePointer()
		ret := impl(self, ctx)
		ctx.Free()
		godotSet[bool](p_back, ret)
	})
	return
}

func (self Material) SetNextPass(next_pass Material) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Material](0, abi, next_pass)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Material.set_next_pass, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self Material) GetNextPass() Material {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Material.get_next_pass, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Material](abi)
	abi.free()
	return ret
}

func (self Material) SetRenderPriority(priority Int) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Int](0, abi, priority)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Material.set_render_priority, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self Material) GetRenderPriority() Int {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Material.get_render_priority, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Int](abi)
	abi.free()
	return ret
}

func (self Material) InspectNativeShaderCode() {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Material.inspect_native_shader_code, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self Material) CreatePlaceholder() Resource {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Material.create_placeholder, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Resource](abi)
	abi.free()
	return ret
}

func (self Material) virtual(name string) reflect.Value {
	switch name {
	case "_get_shader_rid":
		return reflect.ValueOf(self._get_shader_rid)
	case "_get_shader_mode":
		return reflect.ValueOf(self._get_shader_mode)
	case "_can_do_next_pass":
		return reflect.ValueOf(self._can_do_next_pass)
	case "_can_use_render_priority":
		return reflect.ValueOf(self._can_use_render_priority)
	default:
		return self.Super().virtual(name)
	}
}

type MeshPrimitiveType int64

type MeshArrayType int64

type MeshArrayCustomFormat int64

type MeshArrayFormat int64

type MeshBlendShapeMode int64
type Mesh struct{ Class[Mesh, Resource] }

func (self Mesh) Resource() Resource { return *self.Super() }

func (self Mesh) RefCounted() RefCounted { return *self.Super().Super() }

func (self Mesh) Object() Object { return *self.Super().Super().Super() }

func (Mesh) _get_surface_count(impl func(ptr unsafe.Pointer, ctx Context) Int, api *API) (cb ExtensionClassCallVirtualFunc) {
	cb.Set(func(class cgo.Handle, p_args godotArgs, p_back godotBack) {
		ctx := newContext(api)
		self := reflect.ValueOf(class.Value()).UnsafePointer()
		ret := impl(self, ctx)
		ctx.Free()
		godotSet[Int](p_back, ret)
	})
	return
}

func (Mesh) _surface_get_array_len(impl func(ptr unsafe.Pointer, ctx Context, index Int) Int, api *API) (cb ExtensionClassCallVirtualFunc) {
	cb.Set(func(class cgo.Handle, p_args godotArgs, p_back godotBack) {
		ctx := newContext(api)
		var index = godotGet[Int](p_args, 0)
		self := reflect.ValueOf(class.Value()).UnsafePointer()
		ret := impl(self, ctx, index)
		ctx.Free()
		godotSet[Int](p_back, ret)
	})
	return
}

func (Mesh) _surface_get_array_index_len(impl func(ptr unsafe.Pointer, ctx Context, index Int) Int, api *API) (cb ExtensionClassCallVirtualFunc) {
	cb.Set(func(class cgo.Handle, p_args godotArgs, p_back godotBack) {
		ctx := newContext(api)
		var index = godotGet[Int](p_args, 0)
		self := reflect.ValueOf(class.Value()).UnsafePointer()
		ret := impl(self, ctx, index)
		ctx.Free()
		godotSet[Int](p_back, ret)
	})
	return
}

func (Mesh) _surface_get_arrays(impl func(ptr unsafe.Pointer, ctx Context, index Int) Array, api *API) (cb ExtensionClassCallVirtualFunc) {
	cb.Set(func(class cgo.Handle, p_args godotArgs, p_back godotBack) {
		ctx := newContext(api)
		var index = godotGet[Int](p_args, 0)
		self := reflect.ValueOf(class.Value()).UnsafePointer()
		ret := impl(self, ctx, index)
		mmm.MarkFree(ret)
		ctx.Free()
		godotSet[Array](p_back, ret)
	})
	return
}

func (Mesh) _surface_get_blend_shape_arrays(impl func(ptr unsafe.Pointer, ctx Context, index Int) ArrayOf[Array], api *API) (cb ExtensionClassCallVirtualFunc) {
	cb.Set(func(class cgo.Handle, p_args godotArgs, p_back godotBack) {
		ctx := newContext(api)
		var index = godotGet[Int](p_args, 0)
		self := reflect.ValueOf(class.Value()).UnsafePointer()
		ret := impl(self, ctx, index)
		ctx.Free()
		godotSet[ArrayOf[Array]](p_back, ret)
	})
	return
}

func (Mesh) _surface_get_lods(impl func(ptr unsafe.Pointer, ctx Context, index Int) Dictionary, api *API) (cb ExtensionClassCallVirtualFunc) {
	cb.Set(func(class cgo.Handle, p_args godotArgs, p_back godotBack) {
		ctx := newContext(api)
		var index = godotGet[Int](p_args, 0)
		self := reflect.ValueOf(class.Value()).UnsafePointer()
		ret := impl(self, ctx, index)
		mmm.MarkFree(ret)
		ctx.Free()
		godotSet[Dictionary](p_back, ret)
	})
	return
}

func (Mesh) _surface_get_format(impl func(ptr unsafe.Pointer, ctx Context, index Int) Int, api *API) (cb ExtensionClassCallVirtualFunc) {
	cb.Set(func(class cgo.Handle, p_args godotArgs, p_back godotBack) {
		ctx := newContext(api)
		var index = godotGet[Int](p_args, 0)
		self := reflect.ValueOf(class.Value()).UnsafePointer()
		ret := impl(self, ctx, index)
		ctx.Free()
		godotSet[Int](p_back, ret)
	})
	return
}

func (Mesh) _surface_get_primitive_type(impl func(ptr unsafe.Pointer, ctx Context, index Int) Int, api *API) (cb ExtensionClassCallVirtualFunc) {
	cb.Set(func(class cgo.Handle, p_args godotArgs, p_back godotBack) {
		ctx := newContext(api)
		var index = godotGet[Int](p_args, 0)
		self := reflect.ValueOf(class.Value()).UnsafePointer()
		ret := impl(self, ctx, index)
		ctx.Free()
		godotSet[Int](p_back, ret)
	})
	return
}

func (Mesh) _surface_set_material(impl func(ptr unsafe.Pointer, ctx Context, index Int, material Material), api *API) (cb ExtensionClassCallVirtualFunc) {
	cb.Set(func(class cgo.Handle, p_args godotArgs, p_back godotBack) {
		ctx := newContext(api)
		var index = godotGet[Int](p_args, 0)
		var material = godotGet[Material](p_args, 1)
		self := reflect.ValueOf(class.Value()).UnsafePointer()
		impl(self, ctx, index, material)
		ctx.Free()
	})
	return
}

func (Mesh) _surface_get_material(impl func(ptr unsafe.Pointer, ctx Context, index Int) Material, api *API) (cb ExtensionClassCallVirtualFunc) {
	cb.Set(func(class cgo.Handle, p_args godotArgs, p_back godotBack) {
		ctx := newContext(api)
		var index = godotGet[Int](p_args, 0)
		self := reflect.ValueOf(class.Value()).UnsafePointer()
		ret := impl(self, ctx, index)
		ctx.Free()
		godotSet[Material](p_back, ret)
	})
	return
}

func (Mesh) _get_blend_shape_count(impl func(ptr unsafe.Pointer, ctx Context) Int, api *API) (cb ExtensionClassCallVirtualFunc) {
	cb.Set(func(class cgo.Handle, p_args godotArgs, p_back godotBack) {
		ctx := newContext(api)
		self := reflect.ValueOf(class.Value()).UnsafePointer()
		ret := impl(self, ctx)
		ctx.Free()
		godotSet[Int](p_back, ret)
	})
	return
}

func (Mesh) _get_blend_shape_name(impl func(ptr unsafe.Pointer, ctx Context, index Int) StringName, api *API) (cb ExtensionClassCallVirtualFunc) {
	cb.Set(func(class cgo.Handle, p_args godotArgs, p_back godotBack) {
		ctx := newContext(api)
		var index = godotGet[Int](p_args, 0)
		self := reflect.ValueOf(class.Value()).UnsafePointer()
		ret := impl(self, ctx, index)
		mmm.MarkFree(ret)
		ctx.Free()
		godotSet[StringName](p_back, ret)
	})
	return
}

func (Mesh) _set_blend_shape_name(impl func(ptr unsafe.Pointer, ctx Context, index Int, name StringName), api *API) (cb ExtensionClassCallVirtualFunc) {
	cb.Set(func(class cgo.Handle, p_args godotArgs, p_back godotBack) {
		ctx := newContext(api)
		var index = godotGet[Int](p_args, 0)
		var name = godotGet[StringName](p_args, 1)
		self := reflect.ValueOf(class.Value()).UnsafePointer()
		impl(self, ctx, index, name)
		ctx.Free()
	})
	return
}

func (Mesh) _get_aabb(impl func(ptr unsafe.Pointer, ctx Context) AABB, api *API) (cb ExtensionClassCallVirtualFunc) {
	cb.Set(func(class cgo.Handle, p_args godotArgs, p_back godotBack) {
		ctx := newContext(api)
		self := reflect.ValueOf(class.Value()).UnsafePointer()
		ret := impl(self, ctx)
		ctx.Free()
		godotSet[AABB](p_back, ret)
	})
	return
}

func (self Mesh) SetLightmapSizeHint(size Vector2i) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Vector2i](0, abi, size)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Mesh.set_lightmap_size_hint, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self Mesh) GetLightmapSizeHint() Vector2i {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Mesh.get_lightmap_size_hint, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Vector2i](abi)
	abi.free()
	return ret
}

func (self Mesh) GetAabb() AABB {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Mesh.get_aabb, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[AABB](abi)
	abi.free()
	return ret
}

func (self Mesh) GetFaces(ctx Context) PackedVector3Array {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Mesh.get_faces, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[[2]uintptr](abi)
	abi.free()
	return mmm.Make[API, PackedVector3Array, [2]uintptr](ctx, selfPtr.API, ret)
}

func (self Mesh) GetSurfaceCount() Int {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Mesh.get_surface_count, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Int](abi)
	abi.free()
	return ret
}

func (self Mesh) SurfaceGetArrays(ctx Context, surf_idx Int) Array {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Int](0, abi, surf_idx)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Mesh.surface_get_arrays, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[uintptr](abi)
	abi.free()
	return mmm.Make[API, Array, uintptr](ctx, selfPtr.API, ret)
}

func (self Mesh) SurfaceGetBlendShapeArrays(surf_idx Int) ArrayOf[Array] {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Int](0, abi, surf_idx)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Mesh.surface_get_blend_shape_arrays, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[ArrayOf[Array]](abi)
	abi.free()
	return ret
}

func (self Mesh) SurfaceSetMaterial(surf_idx Int, material Material) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Int](0, abi, surf_idx)
	frameSet[Material](1, abi, material)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Mesh.surface_set_material, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self Mesh) SurfaceGetMaterial(surf_idx Int) Material {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Int](0, abi, surf_idx)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Mesh.surface_get_material, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Material](abi)
	abi.free()
	return ret
}

func (self Mesh) CreatePlaceholder() Resource {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Mesh.create_placeholder, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Resource](abi)
	abi.free()
	return ret
}

func (self Mesh) CreateTrimeshShape() ConcavePolygonShape3D {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Mesh.create_trimesh_shape, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[ConcavePolygonShape3D](abi)
	abi.free()
	return ret
}

func (self Mesh) CreateConvexShape(clean bool, simplify bool) ConvexPolygonShape3D {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[bool](0, abi, clean)
	frameSet[bool](1, abi, simplify)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Mesh.create_convex_shape, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[ConvexPolygonShape3D](abi)
	abi.free()
	return ret
}

func (self Mesh) CreateOutline(margin Float) Mesh {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Float](0, abi, margin)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Mesh.create_outline, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Mesh](abi)
	abi.free()
	return ret
}

func (self Mesh) GenerateTriangleMesh() TriangleMesh {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Mesh.generate_triangle_mesh, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[TriangleMesh](abi)
	abi.free()
	return ret
}

func (self Mesh) virtual(name string) reflect.Value {
	switch name {
	case "_get_surface_count":
		return reflect.ValueOf(self._get_surface_count)
	case "_surface_get_array_len":
		return reflect.ValueOf(self._surface_get_array_len)
	case "_surface_get_array_index_len":
		return reflect.ValueOf(self._surface_get_array_index_len)
	case "_surface_get_arrays":
		return reflect.ValueOf(self._surface_get_arrays)
	case "_surface_get_blend_shape_arrays":
		return reflect.ValueOf(self._surface_get_blend_shape_arrays)
	case "_surface_get_lods":
		return reflect.ValueOf(self._surface_get_lods)
	case "_surface_get_format":
		return reflect.ValueOf(self._surface_get_format)
	case "_surface_get_primitive_type":
		return reflect.ValueOf(self._surface_get_primitive_type)
	case "_surface_set_material":
		return reflect.ValueOf(self._surface_set_material)
	case "_surface_get_material":
		return reflect.ValueOf(self._surface_get_material)
	case "_get_blend_shape_count":
		return reflect.ValueOf(self._get_blend_shape_count)
	case "_get_blend_shape_name":
		return reflect.ValueOf(self._get_blend_shape_name)
	case "_set_blend_shape_name":
		return reflect.ValueOf(self._set_blend_shape_name)
	case "_get_aabb":
		return reflect.ValueOf(self._get_aabb)
	default:
		return self.Super().virtual(name)
	}
}

type MethodTweener struct{ Class[MethodTweener, Tweener] }

func (self MethodTweener) Tweener() Tweener { return *self.Super() }

func (self MethodTweener) RefCounted() RefCounted { return *self.Super().Super() }

func (self MethodTweener) Object() Object { return *self.Super().Super().Super() }

func (self MethodTweener) SetDelay(delay Float) MethodTweener {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Float](0, abi, delay)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.MethodTweener.set_delay, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[MethodTweener](abi)
	abi.free()
	return ret
}

func (self MethodTweener) SetTrans(trans TweenTransitionType) MethodTweener {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[TweenTransitionType](0, abi, trans)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.MethodTweener.set_trans, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[MethodTweener](abi)
	abi.free()
	return ret
}

func (self MethodTweener) SetEase(ease TweenEaseType) MethodTweener {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[TweenEaseType](0, abi, ease)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.MethodTweener.set_ease, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[MethodTweener](abi)
	abi.free()
	return ret
}

func (self MethodTweener) virtual(name string) reflect.Value {
	switch name {
	default:
		return self.Super().virtual(name)
	}
}

type MultiMeshTransformFormat int64
type MultiMesh struct{ Class[MultiMesh, Resource] }

func (self MultiMesh) Resource() Resource { return *self.Super() }

func (self MultiMesh) RefCounted() RefCounted { return *self.Super().Super() }

func (self MultiMesh) Object() Object { return *self.Super().Super().Super() }

func (self MultiMesh) SetMesh(mesh Mesh) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Mesh](0, abi, mesh)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.MultiMesh.set_mesh, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self MultiMesh) GetMesh() Mesh {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.MultiMesh.get_mesh, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Mesh](abi)
	abi.free()
	return ret
}

func (self MultiMesh) SetUseColors(enable bool) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[bool](0, abi, enable)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.MultiMesh.set_use_colors, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self MultiMesh) IsUsingColors() bool {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.MultiMesh.is_using_colors, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self MultiMesh) SetUseCustomData(enable bool) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[bool](0, abi, enable)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.MultiMesh.set_use_custom_data, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self MultiMesh) IsUsingCustomData() bool {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.MultiMesh.is_using_custom_data, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self MultiMesh) SetTransformFormat(format MultiMeshTransformFormat) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[MultiMeshTransformFormat](0, abi, format)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.MultiMesh.set_transform_format, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self MultiMesh) GetTransformFormat() MultiMeshTransformFormat {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.MultiMesh.get_transform_format, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[MultiMeshTransformFormat](abi)
	abi.free()
	return ret
}

func (self MultiMesh) SetInstanceCount(count Int) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Int](0, abi, count)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.MultiMesh.set_instance_count, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self MultiMesh) GetInstanceCount() Int {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.MultiMesh.get_instance_count, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Int](abi)
	abi.free()
	return ret
}

func (self MultiMesh) SetVisibleInstanceCount(count Int) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Int](0, abi, count)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.MultiMesh.set_visible_instance_count, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self MultiMesh) GetVisibleInstanceCount() Int {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.MultiMesh.get_visible_instance_count, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Int](abi)
	abi.free()
	return ret
}

func (self MultiMesh) SetInstanceTransform(instance Int, transform Transform3D) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Int](0, abi, instance)
	frameSet[Transform3D](1, abi, transform)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.MultiMesh.set_instance_transform, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self MultiMesh) SetInstanceTransform2d(instance Int, transform Transform2D) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Int](0, abi, instance)
	frameSet[Transform2D](1, abi, transform)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.MultiMesh.set_instance_transform_2d, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self MultiMesh) GetInstanceTransform(instance Int) Transform3D {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Int](0, abi, instance)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.MultiMesh.get_instance_transform, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Transform3D](abi)
	abi.free()
	return ret
}

func (self MultiMesh) GetInstanceTransform2d(instance Int) Transform2D {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Int](0, abi, instance)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.MultiMesh.get_instance_transform_2d, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Transform2D](abi)
	abi.free()
	return ret
}

func (self MultiMesh) SetInstanceColor(instance Int, color Color) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Int](0, abi, instance)
	frameSet[Color](1, abi, color)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.MultiMesh.set_instance_color, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self MultiMesh) GetInstanceColor(instance Int) Color {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Int](0, abi, instance)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.MultiMesh.get_instance_color, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Color](abi)
	abi.free()
	return ret
}

func (self MultiMesh) SetInstanceCustomData(instance Int, custom_data Color) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Int](0, abi, instance)
	frameSet[Color](1, abi, custom_data)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.MultiMesh.set_instance_custom_data, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self MultiMesh) GetInstanceCustomData(instance Int) Color {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Int](0, abi, instance)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.MultiMesh.get_instance_custom_data, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Color](abi)
	abi.free()
	return ret
}

func (self MultiMesh) GetAabb() AABB {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.MultiMesh.get_aabb, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[AABB](abi)
	abi.free()
	return ret
}

func (self MultiMesh) GetBuffer(ctx Context) PackedFloat32Array {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.MultiMesh.get_buffer, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[[2]uintptr](abi)
	abi.free()
	return mmm.Make[API, PackedFloat32Array, [2]uintptr](ctx, selfPtr.API, ret)
}

func (self MultiMesh) SetBuffer(buffer PackedFloat32Array) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[PackedFloat32Array](0, abi, buffer)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.MultiMesh.set_buffer, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self MultiMesh) virtual(name string) reflect.Value {
	switch name {
	default:
		return self.Super().virtual(name)
	}
}

type MultiplayerAPIRPCMode int64
type MultiplayerAPI struct {
	Class[MultiplayerAPI, RefCounted]
}

func (self MultiplayerAPI) RefCounted() RefCounted { return *self.Super() }

func (self MultiplayerAPI) Object() Object { return *self.Super().Super() }

func (self MultiplayerAPI) HasMultiplayerPeer() bool {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.MultiplayerAPI.has_multiplayer_peer, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self MultiplayerAPI) GetMultiplayerPeer() MultiplayerPeer {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.MultiplayerAPI.get_multiplayer_peer, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[MultiplayerPeer](abi)
	abi.free()
	return ret
}

func (self MultiplayerAPI) SetMultiplayerPeer(peer MultiplayerPeer) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[MultiplayerPeer](0, abi, peer)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.MultiplayerAPI.set_multiplayer_peer, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self MultiplayerAPI) GetUniqueId() Int {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.MultiplayerAPI.get_unique_id, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Int](abi)
	abi.free()
	return ret
}

func (self MultiplayerAPI) IsServer() bool {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.MultiplayerAPI.is_server, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self MultiplayerAPI) GetRemoteSenderId() Int {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.MultiplayerAPI.get_remote_sender_id, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Int](abi)
	abi.free()
	return ret
}

func (self MultiplayerAPI) Poll() int64 {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.MultiplayerAPI.poll, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[int64](abi)
	abi.free()
	return ret
}

func (self MultiplayerAPI) Rpc(peer Int, object Object, method StringName, arguments Array) int64 {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Int](0, abi, peer)
	frameSet[Object](1, abi, object)
	frameSet[StringName](2, abi, method)
	frameSet[Array](3, abi, arguments)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.MultiplayerAPI.rpc, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[int64](abi)
	abi.free()
	return ret
}

func (self MultiplayerAPI) ObjectConfigurationAdd(object Object, configuration Variant) int64 {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Object](0, abi, object)
	frameSet[Variant](1, abi, configuration)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.MultiplayerAPI.object_configuration_add, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[int64](abi)
	abi.free()
	return ret
}

func (self MultiplayerAPI) ObjectConfigurationRemove(object Object, configuration Variant) int64 {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Object](0, abi, object)
	frameSet[Variant](1, abi, configuration)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.MultiplayerAPI.object_configuration_remove, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[int64](abi)
	abi.free()
	return ret
}

func (self MultiplayerAPI) GetPeers(ctx Context) PackedInt32Array {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.MultiplayerAPI.get_peers, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[[2]uintptr](abi)
	abi.free()
	return mmm.Make[API, PackedInt32Array, [2]uintptr](ctx, selfPtr.API, ret)
}

func (self MultiplayerAPI) SetDefaultInterface(interface_name StringName) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[StringName](0, abi, interface_name)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.MultiplayerAPI.set_default_interface, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self MultiplayerAPI) GetDefaultInterface(ctx Context) StringName {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.MultiplayerAPI.get_default_interface, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[uintptr](abi)
	abi.free()
	return mmm.Make[API, StringName, uintptr](ctx, selfPtr.API, ret)
}

func (self MultiplayerAPI) CreateDefaultInterface() MultiplayerAPI {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.MultiplayerAPI.create_default_interface, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[MultiplayerAPI](abi)
	abi.free()
	return ret
}

func (self MultiplayerAPI) virtual(name string) reflect.Value {
	switch name {
	default:
		return self.Super().virtual(name)
	}
}

type MultiplayerPeerConnectionStatus int64

type MultiplayerPeerTransferMode int64
type MultiplayerPeer struct {
	Class[MultiplayerPeer, PacketPeer]
}

func (self MultiplayerPeer) PacketPeer() PacketPeer { return *self.Super() }

func (self MultiplayerPeer) RefCounted() RefCounted { return *self.Super().Super() }

func (self MultiplayerPeer) Object() Object { return *self.Super().Super().Super() }

func (self MultiplayerPeer) SetTransferChannel(channel Int) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Int](0, abi, channel)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.MultiplayerPeer.set_transfer_channel, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self MultiplayerPeer) GetTransferChannel() Int {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.MultiplayerPeer.get_transfer_channel, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Int](abi)
	abi.free()
	return ret
}

func (self MultiplayerPeer) SetTransferMode(mode MultiplayerPeerTransferMode) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[MultiplayerPeerTransferMode](0, abi, mode)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.MultiplayerPeer.set_transfer_mode, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self MultiplayerPeer) GetTransferMode() MultiplayerPeerTransferMode {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.MultiplayerPeer.get_transfer_mode, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[MultiplayerPeerTransferMode](abi)
	abi.free()
	return ret
}

func (self MultiplayerPeer) SetTargetPeer(id Int) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Int](0, abi, id)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.MultiplayerPeer.set_target_peer, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self MultiplayerPeer) GetPacketPeer() Int {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.MultiplayerPeer.get_packet_peer, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Int](abi)
	abi.free()
	return ret
}

func (self MultiplayerPeer) GetPacketChannel() Int {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.MultiplayerPeer.get_packet_channel, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Int](abi)
	abi.free()
	return ret
}

func (self MultiplayerPeer) GetPacketMode() MultiplayerPeerTransferMode {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.MultiplayerPeer.get_packet_mode, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[MultiplayerPeerTransferMode](abi)
	abi.free()
	return ret
}

func (self MultiplayerPeer) Poll() {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.MultiplayerPeer.poll, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self MultiplayerPeer) Close() {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.MultiplayerPeer.close, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self MultiplayerPeer) DisconnectPeer(peer Int, force bool) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Int](0, abi, peer)
	frameSet[bool](1, abi, force)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.MultiplayerPeer.disconnect_peer, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self MultiplayerPeer) GetConnectionStatus() MultiplayerPeerConnectionStatus {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.MultiplayerPeer.get_connection_status, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[MultiplayerPeerConnectionStatus](abi)
	abi.free()
	return ret
}

func (self MultiplayerPeer) GetUniqueId() Int {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.MultiplayerPeer.get_unique_id, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Int](abi)
	abi.free()
	return ret
}

func (self MultiplayerPeer) GenerateUniqueId() Int {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.MultiplayerPeer.generate_unique_id, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Int](abi)
	abi.free()
	return ret
}

func (self MultiplayerPeer) SetRefuseNewConnections(enable bool) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[bool](0, abi, enable)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.MultiplayerPeer.set_refuse_new_connections, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self MultiplayerPeer) IsRefusingNewConnections() bool {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.MultiplayerPeer.is_refusing_new_connections, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self MultiplayerPeer) IsServerRelaySupported() bool {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.MultiplayerPeer.is_server_relay_supported, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self MultiplayerPeer) virtual(name string) reflect.Value {
	switch name {
	default:
		return self.Super().virtual(name)
	}
}

type NodeProcessMode int64

type NodeProcessThreadGroup int64

type NodeProcessThreadMessages int64

type NodeDuplicateFlags int64

type NodeInternalMode int64
type Node struct{ Class[Node, Object] }

func (self Node) Object() Object { return *self.Super() }

func (Node) _process(impl func(ptr unsafe.Pointer, ctx Context, delta Float), api *API) (cb ExtensionClassCallVirtualFunc) {
	cb.Set(func(class cgo.Handle, p_args godotArgs, p_back godotBack) {
		ctx := newContext(api)
		var delta = godotGet[Float](p_args, 0)
		self := reflect.ValueOf(class.Value()).UnsafePointer()
		impl(self, ctx, delta)
		ctx.Free()
	})
	return
}

func (Node) _physics_process(impl func(ptr unsafe.Pointer, ctx Context, delta Float), api *API) (cb ExtensionClassCallVirtualFunc) {
	cb.Set(func(class cgo.Handle, p_args godotArgs, p_back godotBack) {
		ctx := newContext(api)
		var delta = godotGet[Float](p_args, 0)
		self := reflect.ValueOf(class.Value()).UnsafePointer()
		impl(self, ctx, delta)
		ctx.Free()
	})
	return
}

func (Node) _enter_tree(impl func(ptr unsafe.Pointer, ctx Context), api *API) (cb ExtensionClassCallVirtualFunc) {
	cb.Set(func(class cgo.Handle, p_args godotArgs, p_back godotBack) {
		ctx := newContext(api)
		self := reflect.ValueOf(class.Value()).UnsafePointer()
		impl(self, ctx)
		ctx.Free()
	})
	return
}

func (Node) _exit_tree(impl func(ptr unsafe.Pointer, ctx Context), api *API) (cb ExtensionClassCallVirtualFunc) {
	cb.Set(func(class cgo.Handle, p_args godotArgs, p_back godotBack) {
		ctx := newContext(api)
		self := reflect.ValueOf(class.Value()).UnsafePointer()
		impl(self, ctx)
		ctx.Free()
	})
	return
}

func (Node) _ready(impl func(ptr unsafe.Pointer, ctx Context), api *API) (cb ExtensionClassCallVirtualFunc) {
	cb.Set(func(class cgo.Handle, p_args godotArgs, p_back godotBack) {
		ctx := newContext(api)
		self := reflect.ValueOf(class.Value()).UnsafePointer()
		impl(self, ctx)
		ctx.Free()
	})
	return
}

func (Node) _get_configuration_warnings(impl func(ptr unsafe.Pointer, ctx Context) PackedStringArray, api *API) (cb ExtensionClassCallVirtualFunc) {
	cb.Set(func(class cgo.Handle, p_args godotArgs, p_back godotBack) {
		ctx := newContext(api)
		self := reflect.ValueOf(class.Value()).UnsafePointer()
		ret := impl(self, ctx)
		mmm.MarkFree(ret)
		ctx.Free()
		godotSet[PackedStringArray](p_back, ret)
	})
	return
}

func (Node) _input(impl func(ptr unsafe.Pointer, ctx Context, event InputEvent), api *API) (cb ExtensionClassCallVirtualFunc) {
	cb.Set(func(class cgo.Handle, p_args godotArgs, p_back godotBack) {
		ctx := newContext(api)
		var event = godotGet[InputEvent](p_args, 0)
		self := reflect.ValueOf(class.Value()).UnsafePointer()
		impl(self, ctx, event)
		ctx.Free()
	})
	return
}

func (Node) _shortcut_input(impl func(ptr unsafe.Pointer, ctx Context, event InputEvent), api *API) (cb ExtensionClassCallVirtualFunc) {
	cb.Set(func(class cgo.Handle, p_args godotArgs, p_back godotBack) {
		ctx := newContext(api)
		var event = godotGet[InputEvent](p_args, 0)
		self := reflect.ValueOf(class.Value()).UnsafePointer()
		impl(self, ctx, event)
		ctx.Free()
	})
	return
}

func (Node) _unhandled_input(impl func(ptr unsafe.Pointer, ctx Context, event InputEvent), api *API) (cb ExtensionClassCallVirtualFunc) {
	cb.Set(func(class cgo.Handle, p_args godotArgs, p_back godotBack) {
		ctx := newContext(api)
		var event = godotGet[InputEvent](p_args, 0)
		self := reflect.ValueOf(class.Value()).UnsafePointer()
		impl(self, ctx, event)
		ctx.Free()
	})
	return
}

func (Node) _unhandled_key_input(impl func(ptr unsafe.Pointer, ctx Context, event InputEvent), api *API) (cb ExtensionClassCallVirtualFunc) {
	cb.Set(func(class cgo.Handle, p_args godotArgs, p_back godotBack) {
		ctx := newContext(api)
		var event = godotGet[InputEvent](p_args, 0)
		self := reflect.ValueOf(class.Value()).UnsafePointer()
		impl(self, ctx, event)
		ctx.Free()
	})
	return
}

func (self Node) PrintOrphanNodes() {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Node.print_orphan_nodes, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self Node) AddSibling(sibling Node, force_readable_name bool) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Node](0, abi, sibling)
	frameSet[bool](1, abi, force_readable_name)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Node.add_sibling, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self Node) SetName(name String) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[String](0, abi, name)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Node.set_name, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self Node) GetName(ctx Context) StringName {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Node.get_name, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[uintptr](abi)
	abi.free()
	return mmm.Make[API, StringName, uintptr](ctx, selfPtr.API, ret)
}

func (self Node) AddChild(node Node, force_readable_name bool, internal NodeInternalMode) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Node](0, abi, node)
	frameSet[bool](1, abi, force_readable_name)
	frameSet[NodeInternalMode](2, abi, internal)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Node.add_child, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self Node) RemoveChild(node Node) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Node](0, abi, node)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Node.remove_child, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self Node) Reparent(new_parent Node, keep_global_transform bool) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Node](0, abi, new_parent)
	frameSet[bool](1, abi, keep_global_transform)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Node.reparent, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self Node) GetChildCount(include_internal bool) Int {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[bool](0, abi, include_internal)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Node.get_child_count, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Int](abi)
	abi.free()
	return ret
}

func (self Node) GetChildren(include_internal bool) ArrayOf[Node] {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[bool](0, abi, include_internal)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Node.get_children, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[ArrayOf[Node]](abi)
	abi.free()
	return ret
}

func (self Node) GetChild(idx Int, include_internal bool) Node {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Int](0, abi, idx)
	frameSet[bool](1, abi, include_internal)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Node.get_child, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Node](abi)
	abi.free()
	return ret
}

func (self Node) HasNode(path NodePath) bool {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[NodePath](0, abi, path)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Node.has_node, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self Node) GetNode(path NodePath) Node {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[NodePath](0, abi, path)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Node.get_node, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Node](abi)
	abi.free()
	return ret
}

func (self Node) GetNodeOrNull(path NodePath) Node {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[NodePath](0, abi, path)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Node.get_node_or_null, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Node](abi)
	abi.free()
	return ret
}

func (self Node) GetParent() Node {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Node.get_parent, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Node](abi)
	abi.free()
	return ret
}

func (self Node) FindChild(pattern String, recursive bool, owned bool) Node {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[String](0, abi, pattern)
	frameSet[bool](1, abi, recursive)
	frameSet[bool](2, abi, owned)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Node.find_child, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Node](abi)
	abi.free()
	return ret
}

func (self Node) FindChildren(pattern String, atype String, recursive bool, owned bool) ArrayOf[Node] {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[String](0, abi, pattern)
	frameSet[String](1, abi, atype)
	frameSet[bool](2, abi, recursive)
	frameSet[bool](3, abi, owned)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Node.find_children, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[ArrayOf[Node]](abi)
	abi.free()
	return ret
}

func (self Node) FindParent(pattern String) Node {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[String](0, abi, pattern)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Node.find_parent, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Node](abi)
	abi.free()
	return ret
}

func (self Node) HasNodeAndResource(path NodePath) bool {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[NodePath](0, abi, path)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Node.has_node_and_resource, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self Node) GetNodeAndResource(ctx Context, path NodePath) Array {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[NodePath](0, abi, path)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Node.get_node_and_resource, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[uintptr](abi)
	abi.free()
	return mmm.Make[API, Array, uintptr](ctx, selfPtr.API, ret)
}

func (self Node) IsInsideTree() bool {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Node.is_inside_tree, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self Node) IsAncestorOf(node Node) bool {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Node](0, abi, node)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Node.is_ancestor_of, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self Node) IsGreaterThan(node Node) bool {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Node](0, abi, node)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Node.is_greater_than, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self Node) GetPath(ctx Context) NodePath {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Node.get_path, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[uintptr](abi)
	abi.free()
	return mmm.Make[API, NodePath, uintptr](ctx, selfPtr.API, ret)
}

func (self Node) GetPathTo(ctx Context, node Node, use_unique_path bool) NodePath {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Node](0, abi, node)
	frameSet[bool](1, abi, use_unique_path)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Node.get_path_to, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[uintptr](abi)
	abi.free()
	return mmm.Make[API, NodePath, uintptr](ctx, selfPtr.API, ret)
}

func (self Node) AddToGroup(group StringName, persistent bool) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[StringName](0, abi, group)
	frameSet[bool](1, abi, persistent)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Node.add_to_group, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self Node) RemoveFromGroup(group StringName) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[StringName](0, abi, group)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Node.remove_from_group, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self Node) IsInGroup(group StringName) bool {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[StringName](0, abi, group)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Node.is_in_group, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self Node) MoveChild(child_node Node, to_index Int) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Node](0, abi, child_node)
	frameSet[Int](1, abi, to_index)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Node.move_child, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self Node) GetGroups() ArrayOf[StringName] {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Node.get_groups, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[ArrayOf[StringName]](abi)
	abi.free()
	return ret
}

func (self Node) SetOwner(owner Node) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Node](0, abi, owner)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Node.set_owner, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self Node) GetOwner() Node {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Node.get_owner, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Node](abi)
	abi.free()
	return ret
}

func (self Node) GetIndex(include_internal bool) Int {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[bool](0, abi, include_internal)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Node.get_index, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Int](abi)
	abi.free()
	return ret
}

func (self Node) PrintTree() {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Node.print_tree, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self Node) PrintTreePretty() {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Node.print_tree_pretty, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self Node) GetTreeString(ctx Context) String {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Node.get_tree_string, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[uintptr](abi)
	abi.free()
	return mmm.Make[API, String, uintptr](ctx, selfPtr.API, ret)
}

func (self Node) GetTreeStringPretty(ctx Context) String {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Node.get_tree_string_pretty, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[uintptr](abi)
	abi.free()
	return mmm.Make[API, String, uintptr](ctx, selfPtr.API, ret)
}

func (self Node) SetSceneFilePath(scene_file_path String) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[String](0, abi, scene_file_path)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Node.set_scene_file_path, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self Node) GetSceneFilePath(ctx Context) String {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Node.get_scene_file_path, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[uintptr](abi)
	abi.free()
	return mmm.Make[API, String, uintptr](ctx, selfPtr.API, ret)
}

func (self Node) PropagateNotification(what Int) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Int](0, abi, what)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Node.propagate_notification, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self Node) PropagateCall(method StringName, args Array, parent_first bool) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[StringName](0, abi, method)
	frameSet[Array](1, abi, args)
	frameSet[bool](2, abi, parent_first)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Node.propagate_call, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self Node) SetPhysicsProcess(enable bool) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[bool](0, abi, enable)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Node.set_physics_process, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self Node) GetPhysicsProcessDeltaTime() Float {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Node.get_physics_process_delta_time, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Float](abi)
	abi.free()
	return ret
}

func (self Node) IsPhysicsProcessing() bool {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Node.is_physics_processing, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self Node) GetProcessDeltaTime() Float {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Node.get_process_delta_time, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Float](abi)
	abi.free()
	return ret
}

func (self Node) SetProcess(enable bool) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[bool](0, abi, enable)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Node.set_process, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self Node) SetProcessPriority(priority Int) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Int](0, abi, priority)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Node.set_process_priority, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self Node) GetProcessPriority() Int {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Node.get_process_priority, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Int](abi)
	abi.free()
	return ret
}

func (self Node) SetPhysicsProcessPriority(priority Int) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Int](0, abi, priority)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Node.set_physics_process_priority, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self Node) GetPhysicsProcessPriority() Int {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Node.get_physics_process_priority, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Int](abi)
	abi.free()
	return ret
}

func (self Node) IsProcessing() bool {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Node.is_processing, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self Node) SetProcessInput(enable bool) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[bool](0, abi, enable)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Node.set_process_input, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self Node) IsProcessingInput() bool {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Node.is_processing_input, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self Node) SetProcessShortcutInput(enable bool) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[bool](0, abi, enable)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Node.set_process_shortcut_input, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self Node) IsProcessingShortcutInput() bool {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Node.is_processing_shortcut_input, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self Node) SetProcessUnhandledInput(enable bool) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[bool](0, abi, enable)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Node.set_process_unhandled_input, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self Node) IsProcessingUnhandledInput() bool {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Node.is_processing_unhandled_input, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self Node) SetProcessUnhandledKeyInput(enable bool) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[bool](0, abi, enable)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Node.set_process_unhandled_key_input, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self Node) IsProcessingUnhandledKeyInput() bool {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Node.is_processing_unhandled_key_input, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self Node) SetProcessMode(mode NodeProcessMode) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[NodeProcessMode](0, abi, mode)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Node.set_process_mode, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self Node) GetProcessMode() NodeProcessMode {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Node.get_process_mode, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[NodeProcessMode](abi)
	abi.free()
	return ret
}

func (self Node) CanProcess() bool {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Node.can_process, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self Node) SetProcessThreadGroup(mode NodeProcessThreadGroup) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[NodeProcessThreadGroup](0, abi, mode)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Node.set_process_thread_group, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self Node) GetProcessThreadGroup() NodeProcessThreadGroup {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Node.get_process_thread_group, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[NodeProcessThreadGroup](abi)
	abi.free()
	return ret
}

func (self Node) SetProcessThreadMessages(flags NodeProcessThreadMessages) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[NodeProcessThreadMessages](0, abi, flags)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Node.set_process_thread_messages, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self Node) GetProcessThreadMessages() NodeProcessThreadMessages {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Node.get_process_thread_messages, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[NodeProcessThreadMessages](abi)
	abi.free()
	return ret
}

func (self Node) SetProcessThreadGroupOrder(order Int) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Int](0, abi, order)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Node.set_process_thread_group_order, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self Node) GetProcessThreadGroupOrder() Int {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Node.get_process_thread_group_order, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Int](abi)
	abi.free()
	return ret
}

func (self Node) SetDisplayFolded(fold bool) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[bool](0, abi, fold)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Node.set_display_folded, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self Node) IsDisplayedFolded() bool {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Node.is_displayed_folded, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self Node) SetProcessInternal(enable bool) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[bool](0, abi, enable)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Node.set_process_internal, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self Node) IsProcessingInternal() bool {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Node.is_processing_internal, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self Node) SetPhysicsProcessInternal(enable bool) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[bool](0, abi, enable)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Node.set_physics_process_internal, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self Node) IsPhysicsProcessingInternal() bool {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Node.is_physics_processing_internal, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self Node) GetWindow() Window {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Node.get_window, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Window](abi)
	abi.free()
	return ret
}

func (self Node) GetLastExclusiveWindow() Window {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Node.get_last_exclusive_window, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Window](abi)
	abi.free()
	return ret
}

func (self Node) GetTree() SceneTree {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Node.get_tree, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[SceneTree](abi)
	abi.free()
	return ret
}

func (self Node) CreateTween() Tween {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Node.create_tween, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Tween](abi)
	abi.free()
	return ret
}

func (self Node) Duplicate(flags Int) Node {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Int](0, abi, flags)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Node.duplicate, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Node](abi)
	abi.free()
	return ret
}

func (self Node) ReplaceBy(node Node, keep_groups bool) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Node](0, abi, node)
	frameSet[bool](1, abi, keep_groups)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Node.replace_by, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self Node) SetSceneInstanceLoadPlaceholder(load_placeholder bool) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[bool](0, abi, load_placeholder)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Node.set_scene_instance_load_placeholder, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self Node) GetSceneInstanceLoadPlaceholder() bool {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Node.get_scene_instance_load_placeholder, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self Node) SetEditableInstance(node Node, is_editable bool) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Node](0, abi, node)
	frameSet[bool](1, abi, is_editable)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Node.set_editable_instance, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self Node) IsEditableInstance(node Node) bool {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Node](0, abi, node)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Node.is_editable_instance, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self Node) GetViewport() Viewport {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Node.get_viewport, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Viewport](abi)
	abi.free()
	return ret
}

func (self Node) QueueFree() {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Node.queue_free, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self Node) RequestReady() {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Node.request_ready, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self Node) IsNodeReady() bool {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Node.is_node_ready, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self Node) SetMultiplayerAuthority(id Int, recursive bool) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Int](0, abi, id)
	frameSet[bool](1, abi, recursive)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Node.set_multiplayer_authority, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self Node) GetMultiplayerAuthority() Int {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Node.get_multiplayer_authority, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Int](abi)
	abi.free()
	return ret
}

func (self Node) IsMultiplayerAuthority() bool {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Node.is_multiplayer_authority, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self Node) GetMultiplayer() MultiplayerAPI {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Node.get_multiplayer, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[MultiplayerAPI](abi)
	abi.free()
	return ret
}

func (self Node) RpcConfig(method StringName, config Variant) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[StringName](0, abi, method)
	frameSet[Variant](1, abi, config)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Node.rpc_config, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self Node) SetEditorDescription(editor_description String) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[String](0, abi, editor_description)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Node.set_editor_description, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self Node) GetEditorDescription(ctx Context) String {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Node.get_editor_description, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[uintptr](abi)
	abi.free()
	return mmm.Make[API, String, uintptr](ctx, selfPtr.API, ret)
}

func (self Node) SetUniqueNameInOwner(enable bool) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[bool](0, abi, enable)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Node.set_unique_name_in_owner, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self Node) IsUniqueNameInOwner() bool {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Node.is_unique_name_in_owner, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self Node) Rpc(method StringName) int64 {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[StringName](0, abi, method)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Node.rpc, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[int64](abi)
	abi.free()
	return ret
}

func (self Node) RpcId(peer_id Int, method StringName) int64 {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Int](0, abi, peer_id)
	frameSet[StringName](1, abi, method)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Node.rpc_id, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[int64](abi)
	abi.free()
	return ret
}

func (self Node) UpdateConfigurationWarnings() {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Node.update_configuration_warnings, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self Node) CallDeferredThreadGroup(ctx Context, method StringName) Variant {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[StringName](0, abi, method)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Node.call_deferred_thread_group, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[[3]uintptr](abi)
	abi.free()
	return mmm.Make[API, Variant, [3]uintptr](ctx, selfPtr.API, ret)
}

func (self Node) SetDeferredThreadGroup(property StringName, value Variant) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[StringName](0, abi, property)
	frameSet[Variant](1, abi, value)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Node.set_deferred_thread_group, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self Node) NotifyDeferredThreadGroup(what Int) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Int](0, abi, what)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Node.notify_deferred_thread_group, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self Node) CallThreadSafe(ctx Context, method StringName) Variant {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[StringName](0, abi, method)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Node.call_thread_safe, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[[3]uintptr](abi)
	abi.free()
	return mmm.Make[API, Variant, [3]uintptr](ctx, selfPtr.API, ret)
}

func (self Node) SetThreadSafe(property StringName, value Variant) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[StringName](0, abi, property)
	frameSet[Variant](1, abi, value)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Node.set_thread_safe, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self Node) NotifyThreadSafe(what Int) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Int](0, abi, what)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Node.notify_thread_safe, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self Node) virtual(name string) reflect.Value {
	switch name {
	case "_process":
		return reflect.ValueOf(self._process)
	case "_physics_process":
		return reflect.ValueOf(self._physics_process)
	case "_enter_tree":
		return reflect.ValueOf(self._enter_tree)
	case "_exit_tree":
		return reflect.ValueOf(self._exit_tree)
	case "_ready":
		return reflect.ValueOf(self._ready)
	case "_get_configuration_warnings":
		return reflect.ValueOf(self._get_configuration_warnings)
	case "_input":
		return reflect.ValueOf(self._input)
	case "_shortcut_input":
		return reflect.ValueOf(self._shortcut_input)
	case "_unhandled_input":
		return reflect.ValueOf(self._unhandled_input)
	case "_unhandled_key_input":
		return reflect.ValueOf(self._unhandled_key_input)
	default:
		return self.Super().virtual(name)
	}
}

type Node2D struct{ Class[Node2D, CanvasItem] }

func (self Node2D) CanvasItem() CanvasItem { return *self.Super() }

func (self Node2D) Node() Node { return *self.Super().Super() }

func (self Node2D) Object() Object { return *self.Super().Super().Super() }

func (self Node2D) SetPosition(position Vector2) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Vector2](0, abi, position)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Node2D.set_position, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self Node2D) SetRotation(radians Float) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Float](0, abi, radians)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Node2D.set_rotation, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self Node2D) SetRotationDegrees(degrees Float) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Float](0, abi, degrees)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Node2D.set_rotation_degrees, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self Node2D) SetSkew(radians Float) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Float](0, abi, radians)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Node2D.set_skew, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self Node2D) SetScale(scale Vector2) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Vector2](0, abi, scale)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Node2D.set_scale, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self Node2D) GetPosition() Vector2 {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Node2D.get_position, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Vector2](abi)
	abi.free()
	return ret
}

func (self Node2D) GetRotation() Float {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Node2D.get_rotation, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Float](abi)
	abi.free()
	return ret
}

func (self Node2D) GetRotationDegrees() Float {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Node2D.get_rotation_degrees, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Float](abi)
	abi.free()
	return ret
}

func (self Node2D) GetSkew() Float {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Node2D.get_skew, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Float](abi)
	abi.free()
	return ret
}

func (self Node2D) GetScale() Vector2 {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Node2D.get_scale, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Vector2](abi)
	abi.free()
	return ret
}

func (self Node2D) Rotate(radians Float) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Float](0, abi, radians)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Node2D.rotate, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self Node2D) MoveLocalX(delta Float, scaled bool) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Float](0, abi, delta)
	frameSet[bool](1, abi, scaled)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Node2D.move_local_x, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self Node2D) MoveLocalY(delta Float, scaled bool) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Float](0, abi, delta)
	frameSet[bool](1, abi, scaled)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Node2D.move_local_y, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self Node2D) Translate(offset Vector2) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Vector2](0, abi, offset)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Node2D.translate, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self Node2D) GlobalTranslate(offset Vector2) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Vector2](0, abi, offset)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Node2D.global_translate, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self Node2D) ApplyScale(ratio Vector2) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Vector2](0, abi, ratio)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Node2D.apply_scale, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self Node2D) SetGlobalPosition(position Vector2) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Vector2](0, abi, position)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Node2D.set_global_position, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self Node2D) GetGlobalPosition() Vector2 {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Node2D.get_global_position, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Vector2](abi)
	abi.free()
	return ret
}

func (self Node2D) SetGlobalRotation(radians Float) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Float](0, abi, radians)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Node2D.set_global_rotation, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self Node2D) SetGlobalRotationDegrees(degrees Float) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Float](0, abi, degrees)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Node2D.set_global_rotation_degrees, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self Node2D) GetGlobalRotation() Float {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Node2D.get_global_rotation, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Float](abi)
	abi.free()
	return ret
}

func (self Node2D) GetGlobalRotationDegrees() Float {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Node2D.get_global_rotation_degrees, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Float](abi)
	abi.free()
	return ret
}

func (self Node2D) SetGlobalSkew(radians Float) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Float](0, abi, radians)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Node2D.set_global_skew, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self Node2D) GetGlobalSkew() Float {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Node2D.get_global_skew, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Float](abi)
	abi.free()
	return ret
}

func (self Node2D) SetGlobalScale(scale Vector2) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Vector2](0, abi, scale)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Node2D.set_global_scale, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self Node2D) GetGlobalScale() Vector2 {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Node2D.get_global_scale, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Vector2](abi)
	abi.free()
	return ret
}

func (self Node2D) SetTransform(xform Transform2D) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Transform2D](0, abi, xform)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Node2D.set_transform, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self Node2D) SetGlobalTransform(xform Transform2D) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Transform2D](0, abi, xform)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Node2D.set_global_transform, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self Node2D) LookAt(point Vector2) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Vector2](0, abi, point)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Node2D.look_at, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self Node2D) GetAngleTo(point Vector2) Float {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Vector2](0, abi, point)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Node2D.get_angle_to, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Float](abi)
	abi.free()
	return ret
}

func (self Node2D) ToLocal(global_point Vector2) Vector2 {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Vector2](0, abi, global_point)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Node2D.to_local, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Vector2](abi)
	abi.free()
	return ret
}

func (self Node2D) ToGlobal(local_point Vector2) Vector2 {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Vector2](0, abi, local_point)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Node2D.to_global, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Vector2](abi)
	abi.free()
	return ret
}

func (self Node2D) GetRelativeTransformToParent(parent Node) Transform2D {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Node](0, abi, parent)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Node2D.get_relative_transform_to_parent, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Transform2D](abi)
	abi.free()
	return ret
}

func (self Node2D) virtual(name string) reflect.Value {
	switch name {
	default:
		return self.Super().virtual(name)
	}
}

type Node3DRotationEditMode int64
type Node3D struct{ Class[Node3D, Node] }

func (self Node3D) Node() Node { return *self.Super() }

func (self Node3D) Object() Object { return *self.Super().Super() }

func (self Node3D) SetTransform(local Transform3D) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Transform3D](0, abi, local)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Node3D.set_transform, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self Node3D) GetTransform() Transform3D {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Node3D.get_transform, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Transform3D](abi)
	abi.free()
	return ret
}

func (self Node3D) SetPosition(position Vector3) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Vector3](0, abi, position)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Node3D.set_position, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self Node3D) GetPosition() Vector3 {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Node3D.get_position, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Vector3](abi)
	abi.free()
	return ret
}

func (self Node3D) SetRotation(euler_radians Vector3) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Vector3](0, abi, euler_radians)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Node3D.set_rotation, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self Node3D) GetRotation() Vector3 {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Node3D.get_rotation, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Vector3](abi)
	abi.free()
	return ret
}

func (self Node3D) SetRotationDegrees(euler_degrees Vector3) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Vector3](0, abi, euler_degrees)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Node3D.set_rotation_degrees, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self Node3D) GetRotationDegrees() Vector3 {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Node3D.get_rotation_degrees, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Vector3](abi)
	abi.free()
	return ret
}

func (self Node3D) SetRotationOrder(order EulerOrder) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[EulerOrder](0, abi, order)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Node3D.set_rotation_order, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self Node3D) GetRotationOrder() EulerOrder {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Node3D.get_rotation_order, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[EulerOrder](abi)
	abi.free()
	return ret
}

func (self Node3D) SetRotationEditMode(edit_mode Node3DRotationEditMode) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Node3DRotationEditMode](0, abi, edit_mode)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Node3D.set_rotation_edit_mode, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self Node3D) GetRotationEditMode() Node3DRotationEditMode {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Node3D.get_rotation_edit_mode, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Node3DRotationEditMode](abi)
	abi.free()
	return ret
}

func (self Node3D) SetScale(scale Vector3) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Vector3](0, abi, scale)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Node3D.set_scale, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self Node3D) GetScale() Vector3 {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Node3D.get_scale, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Vector3](abi)
	abi.free()
	return ret
}

func (self Node3D) SetQuaternion(quaternion Quaternion) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Quaternion](0, abi, quaternion)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Node3D.set_quaternion, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self Node3D) GetQuaternion() Quaternion {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Node3D.get_quaternion, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Quaternion](abi)
	abi.free()
	return ret
}

func (self Node3D) SetBasis(basis Basis) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Basis](0, abi, basis)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Node3D.set_basis, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self Node3D) GetBasis() Basis {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Node3D.get_basis, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Basis](abi)
	abi.free()
	return ret
}

func (self Node3D) SetGlobalTransform(global Transform3D) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Transform3D](0, abi, global)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Node3D.set_global_transform, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self Node3D) GetGlobalTransform() Transform3D {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Node3D.get_global_transform, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Transform3D](abi)
	abi.free()
	return ret
}

func (self Node3D) SetGlobalPosition(position Vector3) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Vector3](0, abi, position)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Node3D.set_global_position, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self Node3D) GetGlobalPosition() Vector3 {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Node3D.get_global_position, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Vector3](abi)
	abi.free()
	return ret
}

func (self Node3D) SetGlobalBasis(basis Basis) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Basis](0, abi, basis)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Node3D.set_global_basis, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self Node3D) GetGlobalBasis() Basis {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Node3D.get_global_basis, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Basis](abi)
	abi.free()
	return ret
}

func (self Node3D) SetGlobalRotation(euler_radians Vector3) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Vector3](0, abi, euler_radians)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Node3D.set_global_rotation, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self Node3D) GetGlobalRotation() Vector3 {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Node3D.get_global_rotation, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Vector3](abi)
	abi.free()
	return ret
}

func (self Node3D) SetGlobalRotationDegrees(euler_degrees Vector3) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Vector3](0, abi, euler_degrees)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Node3D.set_global_rotation_degrees, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self Node3D) GetGlobalRotationDegrees() Vector3 {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Node3D.get_global_rotation_degrees, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Vector3](abi)
	abi.free()
	return ret
}

func (self Node3D) GetParentNode3d() Node3D {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Node3D.get_parent_node_3d, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Node3D](abi)
	abi.free()
	return ret
}

func (self Node3D) SetIgnoreTransformNotification(enabled bool) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[bool](0, abi, enabled)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Node3D.set_ignore_transform_notification, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self Node3D) SetAsTopLevel(enable bool) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[bool](0, abi, enable)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Node3D.set_as_top_level, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self Node3D) IsSetAsTopLevel() bool {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Node3D.is_set_as_top_level, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self Node3D) SetDisableScale(disable bool) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[bool](0, abi, disable)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Node3D.set_disable_scale, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self Node3D) IsScaleDisabled() bool {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Node3D.is_scale_disabled, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self Node3D) GetWorld3d() World3D {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Node3D.get_world_3d, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[World3D](abi)
	abi.free()
	return ret
}

func (self Node3D) ForceUpdateTransform() {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Node3D.force_update_transform, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self Node3D) SetVisibilityParent(path NodePath) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[NodePath](0, abi, path)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Node3D.set_visibility_parent, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self Node3D) GetVisibilityParent(ctx Context) NodePath {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Node3D.get_visibility_parent, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[uintptr](abi)
	abi.free()
	return mmm.Make[API, NodePath, uintptr](ctx, selfPtr.API, ret)
}

func (self Node3D) UpdateGizmos() {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Node3D.update_gizmos, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self Node3D) AddGizmo(gizmo Node3DGizmo) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Node3DGizmo](0, abi, gizmo)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Node3D.add_gizmo, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self Node3D) GetGizmos() ArrayOf[Node3DGizmo] {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Node3D.get_gizmos, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[ArrayOf[Node3DGizmo]](abi)
	abi.free()
	return ret
}

func (self Node3D) ClearGizmos() {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Node3D.clear_gizmos, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self Node3D) SetSubgizmoSelection(gizmo Node3DGizmo, id Int, transform Transform3D) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Node3DGizmo](0, abi, gizmo)
	frameSet[Int](1, abi, id)
	frameSet[Transform3D](2, abi, transform)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Node3D.set_subgizmo_selection, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self Node3D) ClearSubgizmoSelection() {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Node3D.clear_subgizmo_selection, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self Node3D) SetVisible(visible bool) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[bool](0, abi, visible)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Node3D.set_visible, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self Node3D) IsVisible() bool {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Node3D.is_visible, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self Node3D) IsVisibleInTree() bool {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Node3D.is_visible_in_tree, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self Node3D) Show() {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Node3D.show, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self Node3D) Hide() {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Node3D.hide, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self Node3D) SetNotifyLocalTransform(enable bool) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[bool](0, abi, enable)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Node3D.set_notify_local_transform, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self Node3D) IsLocalTransformNotificationEnabled() bool {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Node3D.is_local_transform_notification_enabled, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self Node3D) SetNotifyTransform(enable bool) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[bool](0, abi, enable)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Node3D.set_notify_transform, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self Node3D) IsTransformNotificationEnabled() bool {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Node3D.is_transform_notification_enabled, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self Node3D) Rotate(axis Vector3, angle Float) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Vector3](0, abi, axis)
	frameSet[Float](1, abi, angle)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Node3D.rotate, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self Node3D) GlobalRotate(axis Vector3, angle Float) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Vector3](0, abi, axis)
	frameSet[Float](1, abi, angle)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Node3D.global_rotate, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self Node3D) GlobalScale(scale Vector3) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Vector3](0, abi, scale)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Node3D.global_scale, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self Node3D) GlobalTranslate(offset Vector3) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Vector3](0, abi, offset)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Node3D.global_translate, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self Node3D) RotateObjectLocal(axis Vector3, angle Float) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Vector3](0, abi, axis)
	frameSet[Float](1, abi, angle)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Node3D.rotate_object_local, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self Node3D) ScaleObjectLocal(scale Vector3) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Vector3](0, abi, scale)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Node3D.scale_object_local, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self Node3D) TranslateObjectLocal(offset Vector3) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Vector3](0, abi, offset)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Node3D.translate_object_local, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self Node3D) RotateX(angle Float) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Float](0, abi, angle)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Node3D.rotate_x, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self Node3D) RotateY(angle Float) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Float](0, abi, angle)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Node3D.rotate_y, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self Node3D) RotateZ(angle Float) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Float](0, abi, angle)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Node3D.rotate_z, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self Node3D) Translate(offset Vector3) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Vector3](0, abi, offset)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Node3D.translate, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self Node3D) Orthonormalize() {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Node3D.orthonormalize, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self Node3D) SetIdentity() {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Node3D.set_identity, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self Node3D) LookAt(target Vector3, up Vector3, use_model_front bool) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Vector3](0, abi, target)
	frameSet[Vector3](1, abi, up)
	frameSet[bool](2, abi, use_model_front)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Node3D.look_at, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self Node3D) LookAtFromPosition(position Vector3, target Vector3, up Vector3, use_model_front bool) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Vector3](0, abi, position)
	frameSet[Vector3](1, abi, target)
	frameSet[Vector3](2, abi, up)
	frameSet[bool](3, abi, use_model_front)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Node3D.look_at_from_position, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self Node3D) ToLocal(global_point Vector3) Vector3 {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Vector3](0, abi, global_point)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Node3D.to_local, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Vector3](abi)
	abi.free()
	return ret
}

func (self Node3D) ToGlobal(local_point Vector3) Vector3 {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Vector3](0, abi, local_point)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Node3D.to_global, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Vector3](abi)
	abi.free()
	return ret
}

func (self Node3D) virtual(name string) reflect.Value {
	switch name {
	default:
		return self.Super().virtual(name)
	}
}

type Node3DGizmo struct{ Class[Node3DGizmo, RefCounted] }

func (self Node3DGizmo) RefCounted() RefCounted { return *self.Super() }

func (self Node3DGizmo) Object() Object { return *self.Super().Super() }

func (self Node3DGizmo) virtual(name string) reflect.Value {
	switch name {
	default:
		return self.Super().virtual(name)
	}
}

type ObjectConnectFlags int64
type Object struct{ Class[Object, Pointer] }

func (self Object) GetClass(ctx Context) String {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Object.get_class, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[uintptr](abi)
	abi.free()
	return mmm.Make[API, String, uintptr](ctx, selfPtr.API, ret)
}

func (self Object) IsClass(class String) bool {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[String](0, abi, class)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Object.is_class, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self Object) Set(property StringName, value Variant) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[StringName](0, abi, property)
	frameSet[Variant](1, abi, value)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Object.set, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self Object) Get(ctx Context, property StringName) Variant {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[StringName](0, abi, property)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Object.get, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[[3]uintptr](abi)
	abi.free()
	return mmm.Make[API, Variant, [3]uintptr](ctx, selfPtr.API, ret)
}

func (self Object) SetIndexed(property_path NodePath, value Variant) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[NodePath](0, abi, property_path)
	frameSet[Variant](1, abi, value)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Object.set_indexed, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self Object) GetIndexed(ctx Context, property_path NodePath) Variant {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[NodePath](0, abi, property_path)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Object.get_indexed, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[[3]uintptr](abi)
	abi.free()
	return mmm.Make[API, Variant, [3]uintptr](ctx, selfPtr.API, ret)
}

func (self Object) GetPropertyList() ArrayOf[Dictionary] {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Object.get_property_list, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[ArrayOf[Dictionary]](abi)
	abi.free()
	return ret
}

func (self Object) GetMethodList() ArrayOf[Dictionary] {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Object.get_method_list, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[ArrayOf[Dictionary]](abi)
	abi.free()
	return ret
}

func (self Object) PropertyCanRevert(property StringName) bool {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[StringName](0, abi, property)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Object.property_can_revert, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self Object) PropertyGetRevert(ctx Context, property StringName) Variant {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[StringName](0, abi, property)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Object.property_get_revert, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[[3]uintptr](abi)
	abi.free()
	return mmm.Make[API, Variant, [3]uintptr](ctx, selfPtr.API, ret)
}

func (self Object) Notification(what Int, reversed bool) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Int](0, abi, what)
	frameSet[bool](1, abi, reversed)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Object.notification, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self Object) ToString(ctx Context) String {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Object.to_string, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[uintptr](abi)
	abi.free()
	return mmm.Make[API, String, uintptr](ctx, selfPtr.API, ret)
}

func (self Object) GetInstanceId() Int {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Object.get_instance_id, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Int](abi)
	abi.free()
	return ret
}

func (self Object) SetScript(script Variant) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Variant](0, abi, script)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Object.set_script, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self Object) GetScript(ctx Context) Variant {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Object.get_script, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[[3]uintptr](abi)
	abi.free()
	return mmm.Make[API, Variant, [3]uintptr](ctx, selfPtr.API, ret)
}

func (self Object) SetMeta(name StringName, value Variant) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[StringName](0, abi, name)
	frameSet[Variant](1, abi, value)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Object.set_meta, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self Object) RemoveMeta(name StringName) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[StringName](0, abi, name)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Object.remove_meta, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self Object) GetMeta(ctx Context, name StringName, def Variant) Variant {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[StringName](0, abi, name)
	frameSet[Variant](1, abi, def)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Object.get_meta, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[[3]uintptr](abi)
	abi.free()
	return mmm.Make[API, Variant, [3]uintptr](ctx, selfPtr.API, ret)
}

func (self Object) HasMeta(name StringName) bool {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[StringName](0, abi, name)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Object.has_meta, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self Object) GetMetaList() ArrayOf[StringName] {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Object.get_meta_list, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[ArrayOf[StringName]](abi)
	abi.free()
	return ret
}

func (self Object) AddUserSignal(signal String, arguments Array) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[String](0, abi, signal)
	frameSet[Array](1, abi, arguments)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Object.add_user_signal, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self Object) HasUserSignal(signal StringName) bool {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[StringName](0, abi, signal)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Object.has_user_signal, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self Object) EmitSignal(signal StringName) int64 {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[StringName](0, abi, signal)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Object.emit_signal, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[int64](abi)
	abi.free()
	return ret
}

func (self Object) Call(ctx Context, method StringName) Variant {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[StringName](0, abi, method)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Object.call, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[[3]uintptr](abi)
	abi.free()
	return mmm.Make[API, Variant, [3]uintptr](ctx, selfPtr.API, ret)
}

func (self Object) CallDeferred(ctx Context, method StringName) Variant {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[StringName](0, abi, method)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Object.call_deferred, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[[3]uintptr](abi)
	abi.free()
	return mmm.Make[API, Variant, [3]uintptr](ctx, selfPtr.API, ret)
}

func (self Object) SetDeferred(property StringName, value Variant) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[StringName](0, abi, property)
	frameSet[Variant](1, abi, value)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Object.set_deferred, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self Object) Callv(ctx Context, method StringName, arg_array Array) Variant {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[StringName](0, abi, method)
	frameSet[Array](1, abi, arg_array)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Object.callv, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[[3]uintptr](abi)
	abi.free()
	return mmm.Make[API, Variant, [3]uintptr](ctx, selfPtr.API, ret)
}

func (self Object) HasMethod(method StringName) bool {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[StringName](0, abi, method)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Object.has_method, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self Object) HasSignal(signal StringName) bool {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[StringName](0, abi, signal)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Object.has_signal, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self Object) GetSignalList() ArrayOf[Dictionary] {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Object.get_signal_list, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[ArrayOf[Dictionary]](abi)
	abi.free()
	return ret
}

func (self Object) GetSignalConnectionList(signal StringName) ArrayOf[Dictionary] {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[StringName](0, abi, signal)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Object.get_signal_connection_list, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[ArrayOf[Dictionary]](abi)
	abi.free()
	return ret
}

func (self Object) GetIncomingConnections() ArrayOf[Dictionary] {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Object.get_incoming_connections, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[ArrayOf[Dictionary]](abi)
	abi.free()
	return ret
}

func (self Object) Connect(signal StringName, callable Callable, flags Int) int64 {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[StringName](0, abi, signal)
	frameSet[Callable](1, abi, callable)
	frameSet[Int](2, abi, flags)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Object.connect, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[int64](abi)
	abi.free()
	return ret
}

func (self Object) Disconnect(signal StringName, callable Callable) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[StringName](0, abi, signal)
	frameSet[Callable](1, abi, callable)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Object.disconnect, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self Object) IsConnected(signal StringName, callable Callable) bool {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[StringName](0, abi, signal)
	frameSet[Callable](1, abi, callable)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Object.is_connected, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self Object) SetBlockSignals(enable bool) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[bool](0, abi, enable)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Object.set_block_signals, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self Object) IsBlockingSignals() bool {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Object.is_blocking_signals, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self Object) NotifyPropertyListChanged() {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Object.notify_property_list_changed, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self Object) SetMessageTranslation(enable bool) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[bool](0, abi, enable)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Object.set_message_translation, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self Object) CanTranslateMessages() bool {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Object.can_translate_messages, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self Object) Tr(ctx Context, message StringName, context StringName) String {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[StringName](0, abi, message)
	frameSet[StringName](1, abi, context)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Object.tr, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[uintptr](abi)
	abi.free()
	return mmm.Make[API, String, uintptr](ctx, selfPtr.API, ret)
}

func (self Object) TrN(ctx Context, message StringName, plural_message StringName, n Int, context StringName) String {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[StringName](0, abi, message)
	frameSet[StringName](1, abi, plural_message)
	frameSet[Int](2, abi, n)
	frameSet[StringName](3, abi, context)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Object.tr_n, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[uintptr](abi)
	abi.free()
	return mmm.Make[API, String, uintptr](ctx, selfPtr.API, ret)
}

func (self Object) IsQueuedForDeletion() bool {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Object.is_queued_for_deletion, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self Object) CancelFree() {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Object.cancel_free, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self Object) virtual(name string) reflect.Value {
	switch name {
	default:
		return self.Super().virtual(name)
	}
}

type PackedSceneGenEditState int64
type PackedScene struct{ Class[PackedScene, Resource] }

func (self PackedScene) Resource() Resource { return *self.Super() }

func (self PackedScene) RefCounted() RefCounted { return *self.Super().Super() }

func (self PackedScene) Object() Object { return *self.Super().Super().Super() }

func (self PackedScene) Pack(path Node) int64 {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Node](0, abi, path)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.PackedScene.pack, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[int64](abi)
	abi.free()
	return ret
}

func (self PackedScene) Instantiate(edit_state PackedSceneGenEditState) Node {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[PackedSceneGenEditState](0, abi, edit_state)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.PackedScene.instantiate, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Node](abi)
	abi.free()
	return ret
}

func (self PackedScene) CanInstantiate() bool {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.PackedScene.can_instantiate, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self PackedScene) GetState() SceneState {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.PackedScene.get_state, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[SceneState](abi)
	abi.free()
	return ret
}

func (self PackedScene) virtual(name string) reflect.Value {
	switch name {
	default:
		return self.Super().virtual(name)
	}
}

type PacketPeer struct{ Class[PacketPeer, RefCounted] }

func (self PacketPeer) RefCounted() RefCounted { return *self.Super() }

func (self PacketPeer) Object() Object { return *self.Super().Super() }

func (self PacketPeer) GetVar(ctx Context, allow_objects bool) Variant {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[bool](0, abi, allow_objects)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.PacketPeer.get_var, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[[3]uintptr](abi)
	abi.free()
	return mmm.Make[API, Variant, [3]uintptr](ctx, selfPtr.API, ret)
}

func (self PacketPeer) PutVar(v Variant, full_objects bool) int64 {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Variant](0, abi, v)
	frameSet[bool](1, abi, full_objects)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.PacketPeer.put_var, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[int64](abi)
	abi.free()
	return ret
}

func (self PacketPeer) GetPacket(ctx Context) PackedByteArray {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.PacketPeer.get_packet, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[[2]uintptr](abi)
	abi.free()
	return mmm.Make[API, PackedByteArray, [2]uintptr](ctx, selfPtr.API, ret)
}

func (self PacketPeer) PutPacket(buffer PackedByteArray) int64 {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[PackedByteArray](0, abi, buffer)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.PacketPeer.put_packet, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[int64](abi)
	abi.free()
	return ret
}

func (self PacketPeer) GetPacketError() int64 {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.PacketPeer.get_packet_error, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[int64](abi)
	abi.free()
	return ret
}

func (self PacketPeer) GetAvailablePacketCount() Int {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.PacketPeer.get_available_packet_count, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Int](abi)
	abi.free()
	return ret
}

func (self PacketPeer) GetEncodeBufferMaxSize() Int {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.PacketPeer.get_encode_buffer_max_size, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Int](abi)
	abi.free()
	return ret
}

func (self PacketPeer) SetEncodeBufferMaxSize(max_size Int) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Int](0, abi, max_size)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.PacketPeer.set_encode_buffer_max_size, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self PacketPeer) virtual(name string) reflect.Value {
	switch name {
	default:
		return self.Super().virtual(name)
	}
}

type PhysicsDirectSpaceState2D struct {
	Class[PhysicsDirectSpaceState2D, Object]
}

func (self PhysicsDirectSpaceState2D) Object() Object { return *self.Super() }

func (self PhysicsDirectSpaceState2D) IntersectPoint(parameters PhysicsPointQueryParameters2D, max_results Int) ArrayOf[Dictionary] {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[PhysicsPointQueryParameters2D](0, abi, parameters)
	frameSet[Int](1, abi, max_results)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.PhysicsDirectSpaceState2D.intersect_point, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[ArrayOf[Dictionary]](abi)
	abi.free()
	return ret
}

func (self PhysicsDirectSpaceState2D) IntersectRay(ctx Context, parameters PhysicsRayQueryParameters2D) Dictionary {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[PhysicsRayQueryParameters2D](0, abi, parameters)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.PhysicsDirectSpaceState2D.intersect_ray, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[uintptr](abi)
	abi.free()
	return mmm.Make[API, Dictionary, uintptr](ctx, selfPtr.API, ret)
}

func (self PhysicsDirectSpaceState2D) IntersectShape(parameters PhysicsShapeQueryParameters2D, max_results Int) ArrayOf[Dictionary] {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[PhysicsShapeQueryParameters2D](0, abi, parameters)
	frameSet[Int](1, abi, max_results)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.PhysicsDirectSpaceState2D.intersect_shape, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[ArrayOf[Dictionary]](abi)
	abi.free()
	return ret
}

func (self PhysicsDirectSpaceState2D) CastMotion(ctx Context, parameters PhysicsShapeQueryParameters2D) PackedFloat32Array {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[PhysicsShapeQueryParameters2D](0, abi, parameters)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.PhysicsDirectSpaceState2D.cast_motion, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[[2]uintptr](abi)
	abi.free()
	return mmm.Make[API, PackedFloat32Array, [2]uintptr](ctx, selfPtr.API, ret)
}

func (self PhysicsDirectSpaceState2D) CollideShape(parameters PhysicsShapeQueryParameters2D, max_results Int) ArrayOf[Vector2] {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[PhysicsShapeQueryParameters2D](0, abi, parameters)
	frameSet[Int](1, abi, max_results)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.PhysicsDirectSpaceState2D.collide_shape, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[ArrayOf[Vector2]](abi)
	abi.free()
	return ret
}

func (self PhysicsDirectSpaceState2D) GetRestInfo(ctx Context, parameters PhysicsShapeQueryParameters2D) Dictionary {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[PhysicsShapeQueryParameters2D](0, abi, parameters)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.PhysicsDirectSpaceState2D.get_rest_info, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[uintptr](abi)
	abi.free()
	return mmm.Make[API, Dictionary, uintptr](ctx, selfPtr.API, ret)
}

func (self PhysicsDirectSpaceState2D) virtual(name string) reflect.Value {
	switch name {
	default:
		return self.Super().virtual(name)
	}
}

type PhysicsDirectSpaceState3D struct {
	Class[PhysicsDirectSpaceState3D, Object]
}

func (self PhysicsDirectSpaceState3D) Object() Object { return *self.Super() }

func (self PhysicsDirectSpaceState3D) IntersectPoint(parameters PhysicsPointQueryParameters3D, max_results Int) ArrayOf[Dictionary] {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[PhysicsPointQueryParameters3D](0, abi, parameters)
	frameSet[Int](1, abi, max_results)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.PhysicsDirectSpaceState3D.intersect_point, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[ArrayOf[Dictionary]](abi)
	abi.free()
	return ret
}

func (self PhysicsDirectSpaceState3D) IntersectRay(ctx Context, parameters PhysicsRayQueryParameters3D) Dictionary {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[PhysicsRayQueryParameters3D](0, abi, parameters)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.PhysicsDirectSpaceState3D.intersect_ray, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[uintptr](abi)
	abi.free()
	return mmm.Make[API, Dictionary, uintptr](ctx, selfPtr.API, ret)
}

func (self PhysicsDirectSpaceState3D) IntersectShape(parameters PhysicsShapeQueryParameters3D, max_results Int) ArrayOf[Dictionary] {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[PhysicsShapeQueryParameters3D](0, abi, parameters)
	frameSet[Int](1, abi, max_results)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.PhysicsDirectSpaceState3D.intersect_shape, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[ArrayOf[Dictionary]](abi)
	abi.free()
	return ret
}

func (self PhysicsDirectSpaceState3D) CastMotion(ctx Context, parameters PhysicsShapeQueryParameters3D) PackedFloat32Array {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[PhysicsShapeQueryParameters3D](0, abi, parameters)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.PhysicsDirectSpaceState3D.cast_motion, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[[2]uintptr](abi)
	abi.free()
	return mmm.Make[API, PackedFloat32Array, [2]uintptr](ctx, selfPtr.API, ret)
}

func (self PhysicsDirectSpaceState3D) CollideShape(parameters PhysicsShapeQueryParameters3D, max_results Int) ArrayOf[Vector3] {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[PhysicsShapeQueryParameters3D](0, abi, parameters)
	frameSet[Int](1, abi, max_results)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.PhysicsDirectSpaceState3D.collide_shape, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[ArrayOf[Vector3]](abi)
	abi.free()
	return ret
}

func (self PhysicsDirectSpaceState3D) GetRestInfo(ctx Context, parameters PhysicsShapeQueryParameters3D) Dictionary {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[PhysicsShapeQueryParameters3D](0, abi, parameters)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.PhysicsDirectSpaceState3D.get_rest_info, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[uintptr](abi)
	abi.free()
	return mmm.Make[API, Dictionary, uintptr](ctx, selfPtr.API, ret)
}

func (self PhysicsDirectSpaceState3D) virtual(name string) reflect.Value {
	switch name {
	default:
		return self.Super().virtual(name)
	}
}

type PhysicsPointQueryParameters2D struct {
	Class[PhysicsPointQueryParameters2D, RefCounted]
}

func (self PhysicsPointQueryParameters2D) RefCounted() RefCounted { return *self.Super() }

func (self PhysicsPointQueryParameters2D) Object() Object { return *self.Super().Super() }

func (self PhysicsPointQueryParameters2D) SetPosition(position Vector2) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Vector2](0, abi, position)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.PhysicsPointQueryParameters2D.set_position, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self PhysicsPointQueryParameters2D) GetPosition() Vector2 {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.PhysicsPointQueryParameters2D.get_position, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Vector2](abi)
	abi.free()
	return ret
}

func (self PhysicsPointQueryParameters2D) SetCanvasInstanceId(canvas_instance_id Int) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Int](0, abi, canvas_instance_id)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.PhysicsPointQueryParameters2D.set_canvas_instance_id, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self PhysicsPointQueryParameters2D) GetCanvasInstanceId() Int {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.PhysicsPointQueryParameters2D.get_canvas_instance_id, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Int](abi)
	abi.free()
	return ret
}

func (self PhysicsPointQueryParameters2D) SetCollisionMask(collision_mask Int) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Int](0, abi, collision_mask)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.PhysicsPointQueryParameters2D.set_collision_mask, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self PhysicsPointQueryParameters2D) GetCollisionMask() Int {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.PhysicsPointQueryParameters2D.get_collision_mask, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Int](abi)
	abi.free()
	return ret
}

func (self PhysicsPointQueryParameters2D) SetExclude(exclude ArrayOf[RID]) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[ArrayOf[RID]](0, abi, exclude)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.PhysicsPointQueryParameters2D.set_exclude, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self PhysicsPointQueryParameters2D) GetExclude() ArrayOf[RID] {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.PhysicsPointQueryParameters2D.get_exclude, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[ArrayOf[RID]](abi)
	abi.free()
	return ret
}

func (self PhysicsPointQueryParameters2D) SetCollideWithBodies(enable bool) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[bool](0, abi, enable)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.PhysicsPointQueryParameters2D.set_collide_with_bodies, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self PhysicsPointQueryParameters2D) IsCollideWithBodiesEnabled() bool {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.PhysicsPointQueryParameters2D.is_collide_with_bodies_enabled, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self PhysicsPointQueryParameters2D) SetCollideWithAreas(enable bool) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[bool](0, abi, enable)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.PhysicsPointQueryParameters2D.set_collide_with_areas, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self PhysicsPointQueryParameters2D) IsCollideWithAreasEnabled() bool {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.PhysicsPointQueryParameters2D.is_collide_with_areas_enabled, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self PhysicsPointQueryParameters2D) virtual(name string) reflect.Value {
	switch name {
	default:
		return self.Super().virtual(name)
	}
}

type PhysicsPointQueryParameters3D struct {
	Class[PhysicsPointQueryParameters3D, RefCounted]
}

func (self PhysicsPointQueryParameters3D) RefCounted() RefCounted { return *self.Super() }

func (self PhysicsPointQueryParameters3D) Object() Object { return *self.Super().Super() }

func (self PhysicsPointQueryParameters3D) SetPosition(position Vector3) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Vector3](0, abi, position)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.PhysicsPointQueryParameters3D.set_position, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self PhysicsPointQueryParameters3D) GetPosition() Vector3 {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.PhysicsPointQueryParameters3D.get_position, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Vector3](abi)
	abi.free()
	return ret
}

func (self PhysicsPointQueryParameters3D) SetCollisionMask(collision_mask Int) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Int](0, abi, collision_mask)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.PhysicsPointQueryParameters3D.set_collision_mask, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self PhysicsPointQueryParameters3D) GetCollisionMask() Int {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.PhysicsPointQueryParameters3D.get_collision_mask, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Int](abi)
	abi.free()
	return ret
}

func (self PhysicsPointQueryParameters3D) SetExclude(exclude ArrayOf[RID]) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[ArrayOf[RID]](0, abi, exclude)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.PhysicsPointQueryParameters3D.set_exclude, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self PhysicsPointQueryParameters3D) GetExclude() ArrayOf[RID] {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.PhysicsPointQueryParameters3D.get_exclude, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[ArrayOf[RID]](abi)
	abi.free()
	return ret
}

func (self PhysicsPointQueryParameters3D) SetCollideWithBodies(enable bool) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[bool](0, abi, enable)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.PhysicsPointQueryParameters3D.set_collide_with_bodies, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self PhysicsPointQueryParameters3D) IsCollideWithBodiesEnabled() bool {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.PhysicsPointQueryParameters3D.is_collide_with_bodies_enabled, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self PhysicsPointQueryParameters3D) SetCollideWithAreas(enable bool) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[bool](0, abi, enable)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.PhysicsPointQueryParameters3D.set_collide_with_areas, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self PhysicsPointQueryParameters3D) IsCollideWithAreasEnabled() bool {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.PhysicsPointQueryParameters3D.is_collide_with_areas_enabled, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self PhysicsPointQueryParameters3D) virtual(name string) reflect.Value {
	switch name {
	default:
		return self.Super().virtual(name)
	}
}

type PhysicsRayQueryParameters2D struct {
	Class[PhysicsRayQueryParameters2D, RefCounted]
}

func (self PhysicsRayQueryParameters2D) RefCounted() RefCounted { return *self.Super() }

func (self PhysicsRayQueryParameters2D) Object() Object { return *self.Super().Super() }

func (self PhysicsRayQueryParameters2D) Create(from Vector2, to Vector2, collision_mask Int, exclude ArrayOf[RID]) PhysicsRayQueryParameters2D {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Vector2](0, abi, from)
	frameSet[Vector2](1, abi, to)
	frameSet[Int](2, abi, collision_mask)
	frameSet[ArrayOf[RID]](3, abi, exclude)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.PhysicsRayQueryParameters2D.create, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[PhysicsRayQueryParameters2D](abi)
	abi.free()
	return ret
}

func (self PhysicsRayQueryParameters2D) SetFrom(from Vector2) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Vector2](0, abi, from)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.PhysicsRayQueryParameters2D.set_from, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self PhysicsRayQueryParameters2D) GetFrom() Vector2 {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.PhysicsRayQueryParameters2D.get_from, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Vector2](abi)
	abi.free()
	return ret
}

func (self PhysicsRayQueryParameters2D) SetTo(to Vector2) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Vector2](0, abi, to)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.PhysicsRayQueryParameters2D.set_to, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self PhysicsRayQueryParameters2D) GetTo() Vector2 {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.PhysicsRayQueryParameters2D.get_to, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Vector2](abi)
	abi.free()
	return ret
}

func (self PhysicsRayQueryParameters2D) SetCollisionMask(collision_mask Int) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Int](0, abi, collision_mask)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.PhysicsRayQueryParameters2D.set_collision_mask, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self PhysicsRayQueryParameters2D) GetCollisionMask() Int {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.PhysicsRayQueryParameters2D.get_collision_mask, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Int](abi)
	abi.free()
	return ret
}

func (self PhysicsRayQueryParameters2D) SetExclude(exclude ArrayOf[RID]) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[ArrayOf[RID]](0, abi, exclude)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.PhysicsRayQueryParameters2D.set_exclude, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self PhysicsRayQueryParameters2D) GetExclude() ArrayOf[RID] {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.PhysicsRayQueryParameters2D.get_exclude, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[ArrayOf[RID]](abi)
	abi.free()
	return ret
}

func (self PhysicsRayQueryParameters2D) SetCollideWithBodies(enable bool) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[bool](0, abi, enable)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.PhysicsRayQueryParameters2D.set_collide_with_bodies, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self PhysicsRayQueryParameters2D) IsCollideWithBodiesEnabled() bool {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.PhysicsRayQueryParameters2D.is_collide_with_bodies_enabled, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self PhysicsRayQueryParameters2D) SetCollideWithAreas(enable bool) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[bool](0, abi, enable)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.PhysicsRayQueryParameters2D.set_collide_with_areas, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self PhysicsRayQueryParameters2D) IsCollideWithAreasEnabled() bool {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.PhysicsRayQueryParameters2D.is_collide_with_areas_enabled, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self PhysicsRayQueryParameters2D) SetHitFromInside(enable bool) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[bool](0, abi, enable)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.PhysicsRayQueryParameters2D.set_hit_from_inside, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self PhysicsRayQueryParameters2D) IsHitFromInsideEnabled() bool {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.PhysicsRayQueryParameters2D.is_hit_from_inside_enabled, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self PhysicsRayQueryParameters2D) virtual(name string) reflect.Value {
	switch name {
	default:
		return self.Super().virtual(name)
	}
}

type PhysicsRayQueryParameters3D struct {
	Class[PhysicsRayQueryParameters3D, RefCounted]
}

func (self PhysicsRayQueryParameters3D) RefCounted() RefCounted { return *self.Super() }

func (self PhysicsRayQueryParameters3D) Object() Object { return *self.Super().Super() }

func (self PhysicsRayQueryParameters3D) Create(from Vector3, to Vector3, collision_mask Int, exclude ArrayOf[RID]) PhysicsRayQueryParameters3D {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Vector3](0, abi, from)
	frameSet[Vector3](1, abi, to)
	frameSet[Int](2, abi, collision_mask)
	frameSet[ArrayOf[RID]](3, abi, exclude)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.PhysicsRayQueryParameters3D.create, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[PhysicsRayQueryParameters3D](abi)
	abi.free()
	return ret
}

func (self PhysicsRayQueryParameters3D) SetFrom(from Vector3) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Vector3](0, abi, from)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.PhysicsRayQueryParameters3D.set_from, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self PhysicsRayQueryParameters3D) GetFrom() Vector3 {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.PhysicsRayQueryParameters3D.get_from, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Vector3](abi)
	abi.free()
	return ret
}

func (self PhysicsRayQueryParameters3D) SetTo(to Vector3) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Vector3](0, abi, to)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.PhysicsRayQueryParameters3D.set_to, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self PhysicsRayQueryParameters3D) GetTo() Vector3 {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.PhysicsRayQueryParameters3D.get_to, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Vector3](abi)
	abi.free()
	return ret
}

func (self PhysicsRayQueryParameters3D) SetCollisionMask(collision_mask Int) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Int](0, abi, collision_mask)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.PhysicsRayQueryParameters3D.set_collision_mask, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self PhysicsRayQueryParameters3D) GetCollisionMask() Int {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.PhysicsRayQueryParameters3D.get_collision_mask, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Int](abi)
	abi.free()
	return ret
}

func (self PhysicsRayQueryParameters3D) SetExclude(exclude ArrayOf[RID]) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[ArrayOf[RID]](0, abi, exclude)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.PhysicsRayQueryParameters3D.set_exclude, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self PhysicsRayQueryParameters3D) GetExclude() ArrayOf[RID] {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.PhysicsRayQueryParameters3D.get_exclude, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[ArrayOf[RID]](abi)
	abi.free()
	return ret
}

func (self PhysicsRayQueryParameters3D) SetCollideWithBodies(enable bool) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[bool](0, abi, enable)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.PhysicsRayQueryParameters3D.set_collide_with_bodies, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self PhysicsRayQueryParameters3D) IsCollideWithBodiesEnabled() bool {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.PhysicsRayQueryParameters3D.is_collide_with_bodies_enabled, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self PhysicsRayQueryParameters3D) SetCollideWithAreas(enable bool) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[bool](0, abi, enable)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.PhysicsRayQueryParameters3D.set_collide_with_areas, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self PhysicsRayQueryParameters3D) IsCollideWithAreasEnabled() bool {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.PhysicsRayQueryParameters3D.is_collide_with_areas_enabled, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self PhysicsRayQueryParameters3D) SetHitFromInside(enable bool) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[bool](0, abi, enable)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.PhysicsRayQueryParameters3D.set_hit_from_inside, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self PhysicsRayQueryParameters3D) IsHitFromInsideEnabled() bool {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.PhysicsRayQueryParameters3D.is_hit_from_inside_enabled, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self PhysicsRayQueryParameters3D) SetHitBackFaces(enable bool) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[bool](0, abi, enable)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.PhysicsRayQueryParameters3D.set_hit_back_faces, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self PhysicsRayQueryParameters3D) IsHitBackFacesEnabled() bool {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.PhysicsRayQueryParameters3D.is_hit_back_faces_enabled, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self PhysicsRayQueryParameters3D) virtual(name string) reflect.Value {
	switch name {
	default:
		return self.Super().virtual(name)
	}
}

type PhysicsShapeQueryParameters2D struct {
	Class[PhysicsShapeQueryParameters2D, RefCounted]
}

func (self PhysicsShapeQueryParameters2D) RefCounted() RefCounted { return *self.Super() }

func (self PhysicsShapeQueryParameters2D) Object() Object { return *self.Super().Super() }

func (self PhysicsShapeQueryParameters2D) SetShape(shape Resource) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Resource](0, abi, shape)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.PhysicsShapeQueryParameters2D.set_shape, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self PhysicsShapeQueryParameters2D) GetShape() Resource {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.PhysicsShapeQueryParameters2D.get_shape, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Resource](abi)
	abi.free()
	return ret
}

func (self PhysicsShapeQueryParameters2D) SetShapeRid(shape RID) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, shape)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.PhysicsShapeQueryParameters2D.set_shape_rid, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self PhysicsShapeQueryParameters2D) GetShapeRid() RID {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.PhysicsShapeQueryParameters2D.get_shape_rid, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[RID](abi)
	abi.free()
	return ret
}

func (self PhysicsShapeQueryParameters2D) SetTransform(transform Transform2D) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Transform2D](0, abi, transform)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.PhysicsShapeQueryParameters2D.set_transform, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self PhysicsShapeQueryParameters2D) GetTransform() Transform2D {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.PhysicsShapeQueryParameters2D.get_transform, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Transform2D](abi)
	abi.free()
	return ret
}

func (self PhysicsShapeQueryParameters2D) SetMotion(motion Vector2) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Vector2](0, abi, motion)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.PhysicsShapeQueryParameters2D.set_motion, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self PhysicsShapeQueryParameters2D) GetMotion() Vector2 {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.PhysicsShapeQueryParameters2D.get_motion, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Vector2](abi)
	abi.free()
	return ret
}

func (self PhysicsShapeQueryParameters2D) SetMargin(margin Float) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Float](0, abi, margin)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.PhysicsShapeQueryParameters2D.set_margin, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self PhysicsShapeQueryParameters2D) GetMargin() Float {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.PhysicsShapeQueryParameters2D.get_margin, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Float](abi)
	abi.free()
	return ret
}

func (self PhysicsShapeQueryParameters2D) SetCollisionMask(collision_mask Int) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Int](0, abi, collision_mask)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.PhysicsShapeQueryParameters2D.set_collision_mask, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self PhysicsShapeQueryParameters2D) GetCollisionMask() Int {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.PhysicsShapeQueryParameters2D.get_collision_mask, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Int](abi)
	abi.free()
	return ret
}

func (self PhysicsShapeQueryParameters2D) SetExclude(exclude ArrayOf[RID]) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[ArrayOf[RID]](0, abi, exclude)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.PhysicsShapeQueryParameters2D.set_exclude, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self PhysicsShapeQueryParameters2D) GetExclude() ArrayOf[RID] {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.PhysicsShapeQueryParameters2D.get_exclude, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[ArrayOf[RID]](abi)
	abi.free()
	return ret
}

func (self PhysicsShapeQueryParameters2D) SetCollideWithBodies(enable bool) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[bool](0, abi, enable)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.PhysicsShapeQueryParameters2D.set_collide_with_bodies, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self PhysicsShapeQueryParameters2D) IsCollideWithBodiesEnabled() bool {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.PhysicsShapeQueryParameters2D.is_collide_with_bodies_enabled, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self PhysicsShapeQueryParameters2D) SetCollideWithAreas(enable bool) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[bool](0, abi, enable)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.PhysicsShapeQueryParameters2D.set_collide_with_areas, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self PhysicsShapeQueryParameters2D) IsCollideWithAreasEnabled() bool {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.PhysicsShapeQueryParameters2D.is_collide_with_areas_enabled, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self PhysicsShapeQueryParameters2D) virtual(name string) reflect.Value {
	switch name {
	default:
		return self.Super().virtual(name)
	}
}

type PhysicsShapeQueryParameters3D struct {
	Class[PhysicsShapeQueryParameters3D, RefCounted]
}

func (self PhysicsShapeQueryParameters3D) RefCounted() RefCounted { return *self.Super() }

func (self PhysicsShapeQueryParameters3D) Object() Object { return *self.Super().Super() }

func (self PhysicsShapeQueryParameters3D) SetShape(shape Resource) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Resource](0, abi, shape)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.PhysicsShapeQueryParameters3D.set_shape, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self PhysicsShapeQueryParameters3D) GetShape() Resource {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.PhysicsShapeQueryParameters3D.get_shape, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Resource](abi)
	abi.free()
	return ret
}

func (self PhysicsShapeQueryParameters3D) SetShapeRid(shape RID) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, shape)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.PhysicsShapeQueryParameters3D.set_shape_rid, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self PhysicsShapeQueryParameters3D) GetShapeRid() RID {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.PhysicsShapeQueryParameters3D.get_shape_rid, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[RID](abi)
	abi.free()
	return ret
}

func (self PhysicsShapeQueryParameters3D) SetTransform(transform Transform3D) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Transform3D](0, abi, transform)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.PhysicsShapeQueryParameters3D.set_transform, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self PhysicsShapeQueryParameters3D) GetTransform() Transform3D {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.PhysicsShapeQueryParameters3D.get_transform, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Transform3D](abi)
	abi.free()
	return ret
}

func (self PhysicsShapeQueryParameters3D) SetMotion(motion Vector3) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Vector3](0, abi, motion)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.PhysicsShapeQueryParameters3D.set_motion, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self PhysicsShapeQueryParameters3D) GetMotion() Vector3 {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.PhysicsShapeQueryParameters3D.get_motion, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Vector3](abi)
	abi.free()
	return ret
}

func (self PhysicsShapeQueryParameters3D) SetMargin(margin Float) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Float](0, abi, margin)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.PhysicsShapeQueryParameters3D.set_margin, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self PhysicsShapeQueryParameters3D) GetMargin() Float {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.PhysicsShapeQueryParameters3D.get_margin, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Float](abi)
	abi.free()
	return ret
}

func (self PhysicsShapeQueryParameters3D) SetCollisionMask(collision_mask Int) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Int](0, abi, collision_mask)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.PhysicsShapeQueryParameters3D.set_collision_mask, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self PhysicsShapeQueryParameters3D) GetCollisionMask() Int {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.PhysicsShapeQueryParameters3D.get_collision_mask, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Int](abi)
	abi.free()
	return ret
}

func (self PhysicsShapeQueryParameters3D) SetExclude(exclude ArrayOf[RID]) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[ArrayOf[RID]](0, abi, exclude)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.PhysicsShapeQueryParameters3D.set_exclude, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self PhysicsShapeQueryParameters3D) GetExclude() ArrayOf[RID] {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.PhysicsShapeQueryParameters3D.get_exclude, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[ArrayOf[RID]](abi)
	abi.free()
	return ret
}

func (self PhysicsShapeQueryParameters3D) SetCollideWithBodies(enable bool) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[bool](0, abi, enable)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.PhysicsShapeQueryParameters3D.set_collide_with_bodies, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self PhysicsShapeQueryParameters3D) IsCollideWithBodiesEnabled() bool {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.PhysicsShapeQueryParameters3D.is_collide_with_bodies_enabled, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self PhysicsShapeQueryParameters3D) SetCollideWithAreas(enable bool) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[bool](0, abi, enable)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.PhysicsShapeQueryParameters3D.set_collide_with_areas, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self PhysicsShapeQueryParameters3D) IsCollideWithAreasEnabled() bool {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.PhysicsShapeQueryParameters3D.is_collide_with_areas_enabled, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self PhysicsShapeQueryParameters3D) virtual(name string) reflect.Value {
	switch name {
	default:
		return self.Super().virtual(name)
	}
}

type PropertyTweener struct {
	Class[PropertyTweener, Tweener]
}

func (self PropertyTweener) Tweener() Tweener { return *self.Super() }

func (self PropertyTweener) RefCounted() RefCounted { return *self.Super().Super() }

func (self PropertyTweener) Object() Object { return *self.Super().Super().Super() }

func (self PropertyTweener) From(value Variant) PropertyTweener {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Variant](0, abi, value)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.PropertyTweener.from, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[PropertyTweener](abi)
	abi.free()
	return ret
}

func (self PropertyTweener) FromCurrent() PropertyTweener {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.PropertyTweener.from_current, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[PropertyTweener](abi)
	abi.free()
	return ret
}

func (self PropertyTweener) AsRelative() PropertyTweener {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.PropertyTweener.as_relative, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[PropertyTweener](abi)
	abi.free()
	return ret
}

func (self PropertyTweener) SetTrans(trans TweenTransitionType) PropertyTweener {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[TweenTransitionType](0, abi, trans)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.PropertyTweener.set_trans, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[PropertyTweener](abi)
	abi.free()
	return ret
}

func (self PropertyTweener) SetEase(ease TweenEaseType) PropertyTweener {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[TweenEaseType](0, abi, ease)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.PropertyTweener.set_ease, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[PropertyTweener](abi)
	abi.free()
	return ret
}

func (self PropertyTweener) SetDelay(delay Float) PropertyTweener {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Float](0, abi, delay)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.PropertyTweener.set_delay, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[PropertyTweener](abi)
	abi.free()
	return ret
}

func (self PropertyTweener) virtual(name string) reflect.Value {
	switch name {
	default:
		return self.Super().virtual(name)
	}
}

type RDAttachmentFormat struct {
	Class[RDAttachmentFormat, RefCounted]
}

func (self RDAttachmentFormat) RefCounted() RefCounted { return *self.Super() }

func (self RDAttachmentFormat) Object() Object { return *self.Super().Super() }

func (self RDAttachmentFormat) SetFormat(p_member RenderingDeviceDataFormat) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RenderingDeviceDataFormat](0, abi, p_member)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RDAttachmentFormat.set_format, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self RDAttachmentFormat) GetFormat() RenderingDeviceDataFormat {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RDAttachmentFormat.get_format, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[RenderingDeviceDataFormat](abi)
	abi.free()
	return ret
}

func (self RDAttachmentFormat) SetSamples(p_member RenderingDeviceTextureSamples) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RenderingDeviceTextureSamples](0, abi, p_member)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RDAttachmentFormat.set_samples, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self RDAttachmentFormat) GetSamples() RenderingDeviceTextureSamples {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RDAttachmentFormat.get_samples, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[RenderingDeviceTextureSamples](abi)
	abi.free()
	return ret
}

func (self RDAttachmentFormat) SetUsageFlags(p_member Int) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Int](0, abi, p_member)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RDAttachmentFormat.set_usage_flags, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self RDAttachmentFormat) GetUsageFlags() Int {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RDAttachmentFormat.get_usage_flags, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Int](abi)
	abi.free()
	return ret
}

func (self RDAttachmentFormat) virtual(name string) reflect.Value {
	switch name {
	default:
		return self.Super().virtual(name)
	}
}

type RDFramebufferPass struct {
	Class[RDFramebufferPass, RefCounted]
}

func (self RDFramebufferPass) RefCounted() RefCounted { return *self.Super() }

func (self RDFramebufferPass) Object() Object { return *self.Super().Super() }

func (self RDFramebufferPass) SetColorAttachments(p_member PackedInt32Array) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[PackedInt32Array](0, abi, p_member)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RDFramebufferPass.set_color_attachments, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self RDFramebufferPass) GetColorAttachments(ctx Context) PackedInt32Array {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RDFramebufferPass.get_color_attachments, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[[2]uintptr](abi)
	abi.free()
	return mmm.Make[API, PackedInt32Array, [2]uintptr](ctx, selfPtr.API, ret)
}

func (self RDFramebufferPass) SetInputAttachments(p_member PackedInt32Array) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[PackedInt32Array](0, abi, p_member)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RDFramebufferPass.set_input_attachments, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self RDFramebufferPass) GetInputAttachments(ctx Context) PackedInt32Array {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RDFramebufferPass.get_input_attachments, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[[2]uintptr](abi)
	abi.free()
	return mmm.Make[API, PackedInt32Array, [2]uintptr](ctx, selfPtr.API, ret)
}

func (self RDFramebufferPass) SetResolveAttachments(p_member PackedInt32Array) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[PackedInt32Array](0, abi, p_member)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RDFramebufferPass.set_resolve_attachments, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self RDFramebufferPass) GetResolveAttachments(ctx Context) PackedInt32Array {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RDFramebufferPass.get_resolve_attachments, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[[2]uintptr](abi)
	abi.free()
	return mmm.Make[API, PackedInt32Array, [2]uintptr](ctx, selfPtr.API, ret)
}

func (self RDFramebufferPass) SetPreserveAttachments(p_member PackedInt32Array) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[PackedInt32Array](0, abi, p_member)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RDFramebufferPass.set_preserve_attachments, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self RDFramebufferPass) GetPreserveAttachments(ctx Context) PackedInt32Array {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RDFramebufferPass.get_preserve_attachments, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[[2]uintptr](abi)
	abi.free()
	return mmm.Make[API, PackedInt32Array, [2]uintptr](ctx, selfPtr.API, ret)
}

func (self RDFramebufferPass) SetDepthAttachment(p_member Int) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Int](0, abi, p_member)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RDFramebufferPass.set_depth_attachment, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self RDFramebufferPass) GetDepthAttachment() Int {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RDFramebufferPass.get_depth_attachment, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Int](abi)
	abi.free()
	return ret
}

func (self RDFramebufferPass) virtual(name string) reflect.Value {
	switch name {
	default:
		return self.Super().virtual(name)
	}
}

type RDPipelineColorBlendState struct {
	Class[RDPipelineColorBlendState, RefCounted]
}

func (self RDPipelineColorBlendState) RefCounted() RefCounted { return *self.Super() }

func (self RDPipelineColorBlendState) Object() Object { return *self.Super().Super() }

func (self RDPipelineColorBlendState) SetEnableLogicOp(p_member bool) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[bool](0, abi, p_member)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RDPipelineColorBlendState.set_enable_logic_op, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self RDPipelineColorBlendState) GetEnableLogicOp() bool {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RDPipelineColorBlendState.get_enable_logic_op, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self RDPipelineColorBlendState) SetLogicOp(p_member RenderingDeviceLogicOperation) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RenderingDeviceLogicOperation](0, abi, p_member)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RDPipelineColorBlendState.set_logic_op, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self RDPipelineColorBlendState) GetLogicOp() RenderingDeviceLogicOperation {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RDPipelineColorBlendState.get_logic_op, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[RenderingDeviceLogicOperation](abi)
	abi.free()
	return ret
}

func (self RDPipelineColorBlendState) SetBlendConstant(p_member Color) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Color](0, abi, p_member)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RDPipelineColorBlendState.set_blend_constant, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self RDPipelineColorBlendState) GetBlendConstant() Color {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RDPipelineColorBlendState.get_blend_constant, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Color](abi)
	abi.free()
	return ret
}

func (self RDPipelineColorBlendState) SetAttachments(attachments ArrayOf[RDPipelineColorBlendStateAttachment]) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[ArrayOf[RDPipelineColorBlendStateAttachment]](0, abi, attachments)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RDPipelineColorBlendState.set_attachments, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self RDPipelineColorBlendState) GetAttachments() ArrayOf[RDPipelineColorBlendStateAttachment] {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RDPipelineColorBlendState.get_attachments, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[ArrayOf[RDPipelineColorBlendStateAttachment]](abi)
	abi.free()
	return ret
}

func (self RDPipelineColorBlendState) virtual(name string) reflect.Value {
	switch name {
	default:
		return self.Super().virtual(name)
	}
}

type RDPipelineColorBlendStateAttachment struct {
	Class[RDPipelineColorBlendStateAttachment, RefCounted]
}

func (self RDPipelineColorBlendStateAttachment) RefCounted() RefCounted { return *self.Super() }

func (self RDPipelineColorBlendStateAttachment) Object() Object { return *self.Super().Super() }

func (self RDPipelineColorBlendStateAttachment) SetAsMix() {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RDPipelineColorBlendStateAttachment.set_as_mix, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self RDPipelineColorBlendStateAttachment) SetEnableBlend(p_member bool) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[bool](0, abi, p_member)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RDPipelineColorBlendStateAttachment.set_enable_blend, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self RDPipelineColorBlendStateAttachment) GetEnableBlend() bool {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RDPipelineColorBlendStateAttachment.get_enable_blend, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self RDPipelineColorBlendStateAttachment) SetSrcColorBlendFactor(p_member RenderingDeviceBlendFactor) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RenderingDeviceBlendFactor](0, abi, p_member)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RDPipelineColorBlendStateAttachment.set_src_color_blend_factor, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self RDPipelineColorBlendStateAttachment) GetSrcColorBlendFactor() RenderingDeviceBlendFactor {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RDPipelineColorBlendStateAttachment.get_src_color_blend_factor, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[RenderingDeviceBlendFactor](abi)
	abi.free()
	return ret
}

func (self RDPipelineColorBlendStateAttachment) SetDstColorBlendFactor(p_member RenderingDeviceBlendFactor) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RenderingDeviceBlendFactor](0, abi, p_member)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RDPipelineColorBlendStateAttachment.set_dst_color_blend_factor, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self RDPipelineColorBlendStateAttachment) GetDstColorBlendFactor() RenderingDeviceBlendFactor {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RDPipelineColorBlendStateAttachment.get_dst_color_blend_factor, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[RenderingDeviceBlendFactor](abi)
	abi.free()
	return ret
}

func (self RDPipelineColorBlendStateAttachment) SetColorBlendOp(p_member RenderingDeviceBlendOperation) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RenderingDeviceBlendOperation](0, abi, p_member)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RDPipelineColorBlendStateAttachment.set_color_blend_op, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self RDPipelineColorBlendStateAttachment) GetColorBlendOp() RenderingDeviceBlendOperation {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RDPipelineColorBlendStateAttachment.get_color_blend_op, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[RenderingDeviceBlendOperation](abi)
	abi.free()
	return ret
}

func (self RDPipelineColorBlendStateAttachment) SetSrcAlphaBlendFactor(p_member RenderingDeviceBlendFactor) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RenderingDeviceBlendFactor](0, abi, p_member)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RDPipelineColorBlendStateAttachment.set_src_alpha_blend_factor, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self RDPipelineColorBlendStateAttachment) GetSrcAlphaBlendFactor() RenderingDeviceBlendFactor {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RDPipelineColorBlendStateAttachment.get_src_alpha_blend_factor, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[RenderingDeviceBlendFactor](abi)
	abi.free()
	return ret
}

func (self RDPipelineColorBlendStateAttachment) SetDstAlphaBlendFactor(p_member RenderingDeviceBlendFactor) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RenderingDeviceBlendFactor](0, abi, p_member)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RDPipelineColorBlendStateAttachment.set_dst_alpha_blend_factor, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self RDPipelineColorBlendStateAttachment) GetDstAlphaBlendFactor() RenderingDeviceBlendFactor {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RDPipelineColorBlendStateAttachment.get_dst_alpha_blend_factor, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[RenderingDeviceBlendFactor](abi)
	abi.free()
	return ret
}

func (self RDPipelineColorBlendStateAttachment) SetAlphaBlendOp(p_member RenderingDeviceBlendOperation) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RenderingDeviceBlendOperation](0, abi, p_member)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RDPipelineColorBlendStateAttachment.set_alpha_blend_op, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self RDPipelineColorBlendStateAttachment) GetAlphaBlendOp() RenderingDeviceBlendOperation {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RDPipelineColorBlendStateAttachment.get_alpha_blend_op, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[RenderingDeviceBlendOperation](abi)
	abi.free()
	return ret
}

func (self RDPipelineColorBlendStateAttachment) SetWriteR(p_member bool) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[bool](0, abi, p_member)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RDPipelineColorBlendStateAttachment.set_write_r, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self RDPipelineColorBlendStateAttachment) GetWriteR() bool {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RDPipelineColorBlendStateAttachment.get_write_r, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self RDPipelineColorBlendStateAttachment) SetWriteG(p_member bool) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[bool](0, abi, p_member)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RDPipelineColorBlendStateAttachment.set_write_g, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self RDPipelineColorBlendStateAttachment) GetWriteG() bool {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RDPipelineColorBlendStateAttachment.get_write_g, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self RDPipelineColorBlendStateAttachment) SetWriteB(p_member bool) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[bool](0, abi, p_member)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RDPipelineColorBlendStateAttachment.set_write_b, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self RDPipelineColorBlendStateAttachment) GetWriteB() bool {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RDPipelineColorBlendStateAttachment.get_write_b, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self RDPipelineColorBlendStateAttachment) SetWriteA(p_member bool) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[bool](0, abi, p_member)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RDPipelineColorBlendStateAttachment.set_write_a, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self RDPipelineColorBlendStateAttachment) GetWriteA() bool {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RDPipelineColorBlendStateAttachment.get_write_a, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self RDPipelineColorBlendStateAttachment) virtual(name string) reflect.Value {
	switch name {
	default:
		return self.Super().virtual(name)
	}
}

type RDPipelineDepthStencilState struct {
	Class[RDPipelineDepthStencilState, RefCounted]
}

func (self RDPipelineDepthStencilState) RefCounted() RefCounted { return *self.Super() }

func (self RDPipelineDepthStencilState) Object() Object { return *self.Super().Super() }

func (self RDPipelineDepthStencilState) SetEnableDepthTest(p_member bool) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[bool](0, abi, p_member)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RDPipelineDepthStencilState.set_enable_depth_test, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self RDPipelineDepthStencilState) GetEnableDepthTest() bool {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RDPipelineDepthStencilState.get_enable_depth_test, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self RDPipelineDepthStencilState) SetEnableDepthWrite(p_member bool) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[bool](0, abi, p_member)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RDPipelineDepthStencilState.set_enable_depth_write, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self RDPipelineDepthStencilState) GetEnableDepthWrite() bool {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RDPipelineDepthStencilState.get_enable_depth_write, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self RDPipelineDepthStencilState) SetDepthCompareOperator(p_member RenderingDeviceCompareOperator) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RenderingDeviceCompareOperator](0, abi, p_member)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RDPipelineDepthStencilState.set_depth_compare_operator, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self RDPipelineDepthStencilState) GetDepthCompareOperator() RenderingDeviceCompareOperator {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RDPipelineDepthStencilState.get_depth_compare_operator, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[RenderingDeviceCompareOperator](abi)
	abi.free()
	return ret
}

func (self RDPipelineDepthStencilState) SetEnableDepthRange(p_member bool) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[bool](0, abi, p_member)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RDPipelineDepthStencilState.set_enable_depth_range, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self RDPipelineDepthStencilState) GetEnableDepthRange() bool {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RDPipelineDepthStencilState.get_enable_depth_range, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self RDPipelineDepthStencilState) SetDepthRangeMin(p_member Float) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Float](0, abi, p_member)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RDPipelineDepthStencilState.set_depth_range_min, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self RDPipelineDepthStencilState) GetDepthRangeMin() Float {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RDPipelineDepthStencilState.get_depth_range_min, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Float](abi)
	abi.free()
	return ret
}

func (self RDPipelineDepthStencilState) SetDepthRangeMax(p_member Float) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Float](0, abi, p_member)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RDPipelineDepthStencilState.set_depth_range_max, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self RDPipelineDepthStencilState) GetDepthRangeMax() Float {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RDPipelineDepthStencilState.get_depth_range_max, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Float](abi)
	abi.free()
	return ret
}

func (self RDPipelineDepthStencilState) SetEnableStencil(p_member bool) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[bool](0, abi, p_member)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RDPipelineDepthStencilState.set_enable_stencil, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self RDPipelineDepthStencilState) GetEnableStencil() bool {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RDPipelineDepthStencilState.get_enable_stencil, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self RDPipelineDepthStencilState) SetFrontOpFail(p_member RenderingDeviceStencilOperation) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RenderingDeviceStencilOperation](0, abi, p_member)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RDPipelineDepthStencilState.set_front_op_fail, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self RDPipelineDepthStencilState) GetFrontOpFail() RenderingDeviceStencilOperation {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RDPipelineDepthStencilState.get_front_op_fail, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[RenderingDeviceStencilOperation](abi)
	abi.free()
	return ret
}

func (self RDPipelineDepthStencilState) SetFrontOpPass(p_member RenderingDeviceStencilOperation) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RenderingDeviceStencilOperation](0, abi, p_member)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RDPipelineDepthStencilState.set_front_op_pass, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self RDPipelineDepthStencilState) GetFrontOpPass() RenderingDeviceStencilOperation {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RDPipelineDepthStencilState.get_front_op_pass, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[RenderingDeviceStencilOperation](abi)
	abi.free()
	return ret
}

func (self RDPipelineDepthStencilState) SetFrontOpDepthFail(p_member RenderingDeviceStencilOperation) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RenderingDeviceStencilOperation](0, abi, p_member)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RDPipelineDepthStencilState.set_front_op_depth_fail, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self RDPipelineDepthStencilState) GetFrontOpDepthFail() RenderingDeviceStencilOperation {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RDPipelineDepthStencilState.get_front_op_depth_fail, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[RenderingDeviceStencilOperation](abi)
	abi.free()
	return ret
}

func (self RDPipelineDepthStencilState) SetFrontOpCompare(p_member RenderingDeviceCompareOperator) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RenderingDeviceCompareOperator](0, abi, p_member)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RDPipelineDepthStencilState.set_front_op_compare, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self RDPipelineDepthStencilState) GetFrontOpCompare() RenderingDeviceCompareOperator {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RDPipelineDepthStencilState.get_front_op_compare, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[RenderingDeviceCompareOperator](abi)
	abi.free()
	return ret
}

func (self RDPipelineDepthStencilState) SetFrontOpCompareMask(p_member Int) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Int](0, abi, p_member)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RDPipelineDepthStencilState.set_front_op_compare_mask, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self RDPipelineDepthStencilState) GetFrontOpCompareMask() Int {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RDPipelineDepthStencilState.get_front_op_compare_mask, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Int](abi)
	abi.free()
	return ret
}

func (self RDPipelineDepthStencilState) SetFrontOpWriteMask(p_member Int) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Int](0, abi, p_member)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RDPipelineDepthStencilState.set_front_op_write_mask, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self RDPipelineDepthStencilState) GetFrontOpWriteMask() Int {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RDPipelineDepthStencilState.get_front_op_write_mask, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Int](abi)
	abi.free()
	return ret
}

func (self RDPipelineDepthStencilState) SetFrontOpReference(p_member Int) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Int](0, abi, p_member)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RDPipelineDepthStencilState.set_front_op_reference, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self RDPipelineDepthStencilState) GetFrontOpReference() Int {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RDPipelineDepthStencilState.get_front_op_reference, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Int](abi)
	abi.free()
	return ret
}

func (self RDPipelineDepthStencilState) SetBackOpFail(p_member RenderingDeviceStencilOperation) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RenderingDeviceStencilOperation](0, abi, p_member)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RDPipelineDepthStencilState.set_back_op_fail, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self RDPipelineDepthStencilState) GetBackOpFail() RenderingDeviceStencilOperation {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RDPipelineDepthStencilState.get_back_op_fail, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[RenderingDeviceStencilOperation](abi)
	abi.free()
	return ret
}

func (self RDPipelineDepthStencilState) SetBackOpPass(p_member RenderingDeviceStencilOperation) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RenderingDeviceStencilOperation](0, abi, p_member)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RDPipelineDepthStencilState.set_back_op_pass, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self RDPipelineDepthStencilState) GetBackOpPass() RenderingDeviceStencilOperation {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RDPipelineDepthStencilState.get_back_op_pass, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[RenderingDeviceStencilOperation](abi)
	abi.free()
	return ret
}

func (self RDPipelineDepthStencilState) SetBackOpDepthFail(p_member RenderingDeviceStencilOperation) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RenderingDeviceStencilOperation](0, abi, p_member)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RDPipelineDepthStencilState.set_back_op_depth_fail, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self RDPipelineDepthStencilState) GetBackOpDepthFail() RenderingDeviceStencilOperation {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RDPipelineDepthStencilState.get_back_op_depth_fail, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[RenderingDeviceStencilOperation](abi)
	abi.free()
	return ret
}

func (self RDPipelineDepthStencilState) SetBackOpCompare(p_member RenderingDeviceCompareOperator) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RenderingDeviceCompareOperator](0, abi, p_member)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RDPipelineDepthStencilState.set_back_op_compare, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self RDPipelineDepthStencilState) GetBackOpCompare() RenderingDeviceCompareOperator {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RDPipelineDepthStencilState.get_back_op_compare, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[RenderingDeviceCompareOperator](abi)
	abi.free()
	return ret
}

func (self RDPipelineDepthStencilState) SetBackOpCompareMask(p_member Int) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Int](0, abi, p_member)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RDPipelineDepthStencilState.set_back_op_compare_mask, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self RDPipelineDepthStencilState) GetBackOpCompareMask() Int {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RDPipelineDepthStencilState.get_back_op_compare_mask, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Int](abi)
	abi.free()
	return ret
}

func (self RDPipelineDepthStencilState) SetBackOpWriteMask(p_member Int) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Int](0, abi, p_member)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RDPipelineDepthStencilState.set_back_op_write_mask, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self RDPipelineDepthStencilState) GetBackOpWriteMask() Int {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RDPipelineDepthStencilState.get_back_op_write_mask, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Int](abi)
	abi.free()
	return ret
}

func (self RDPipelineDepthStencilState) SetBackOpReference(p_member Int) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Int](0, abi, p_member)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RDPipelineDepthStencilState.set_back_op_reference, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self RDPipelineDepthStencilState) GetBackOpReference() Int {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RDPipelineDepthStencilState.get_back_op_reference, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Int](abi)
	abi.free()
	return ret
}

func (self RDPipelineDepthStencilState) virtual(name string) reflect.Value {
	switch name {
	default:
		return self.Super().virtual(name)
	}
}

type RDPipelineMultisampleState struct {
	Class[RDPipelineMultisampleState, RefCounted]
}

func (self RDPipelineMultisampleState) RefCounted() RefCounted { return *self.Super() }

func (self RDPipelineMultisampleState) Object() Object { return *self.Super().Super() }

func (self RDPipelineMultisampleState) SetSampleCount(p_member RenderingDeviceTextureSamples) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RenderingDeviceTextureSamples](0, abi, p_member)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RDPipelineMultisampleState.set_sample_count, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self RDPipelineMultisampleState) GetSampleCount() RenderingDeviceTextureSamples {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RDPipelineMultisampleState.get_sample_count, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[RenderingDeviceTextureSamples](abi)
	abi.free()
	return ret
}

func (self RDPipelineMultisampleState) SetEnableSampleShading(p_member bool) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[bool](0, abi, p_member)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RDPipelineMultisampleState.set_enable_sample_shading, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self RDPipelineMultisampleState) GetEnableSampleShading() bool {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RDPipelineMultisampleState.get_enable_sample_shading, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self RDPipelineMultisampleState) SetMinSampleShading(p_member Float) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Float](0, abi, p_member)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RDPipelineMultisampleState.set_min_sample_shading, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self RDPipelineMultisampleState) GetMinSampleShading() Float {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RDPipelineMultisampleState.get_min_sample_shading, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Float](abi)
	abi.free()
	return ret
}

func (self RDPipelineMultisampleState) SetEnableAlphaToCoverage(p_member bool) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[bool](0, abi, p_member)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RDPipelineMultisampleState.set_enable_alpha_to_coverage, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self RDPipelineMultisampleState) GetEnableAlphaToCoverage() bool {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RDPipelineMultisampleState.get_enable_alpha_to_coverage, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self RDPipelineMultisampleState) SetEnableAlphaToOne(p_member bool) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[bool](0, abi, p_member)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RDPipelineMultisampleState.set_enable_alpha_to_one, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self RDPipelineMultisampleState) GetEnableAlphaToOne() bool {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RDPipelineMultisampleState.get_enable_alpha_to_one, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self RDPipelineMultisampleState) SetSampleMasks(masks ArrayOf[Int]) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[ArrayOf[Int]](0, abi, masks)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RDPipelineMultisampleState.set_sample_masks, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self RDPipelineMultisampleState) GetSampleMasks() ArrayOf[Int] {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RDPipelineMultisampleState.get_sample_masks, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[ArrayOf[Int]](abi)
	abi.free()
	return ret
}

func (self RDPipelineMultisampleState) virtual(name string) reflect.Value {
	switch name {
	default:
		return self.Super().virtual(name)
	}
}

type RDPipelineRasterizationState struct {
	Class[RDPipelineRasterizationState, RefCounted]
}

func (self RDPipelineRasterizationState) RefCounted() RefCounted { return *self.Super() }

func (self RDPipelineRasterizationState) Object() Object { return *self.Super().Super() }

func (self RDPipelineRasterizationState) SetEnableDepthClamp(p_member bool) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[bool](0, abi, p_member)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RDPipelineRasterizationState.set_enable_depth_clamp, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self RDPipelineRasterizationState) GetEnableDepthClamp() bool {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RDPipelineRasterizationState.get_enable_depth_clamp, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self RDPipelineRasterizationState) SetDiscardPrimitives(p_member bool) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[bool](0, abi, p_member)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RDPipelineRasterizationState.set_discard_primitives, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self RDPipelineRasterizationState) GetDiscardPrimitives() bool {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RDPipelineRasterizationState.get_discard_primitives, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self RDPipelineRasterizationState) SetWireframe(p_member bool) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[bool](0, abi, p_member)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RDPipelineRasterizationState.set_wireframe, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self RDPipelineRasterizationState) GetWireframe() bool {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RDPipelineRasterizationState.get_wireframe, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self RDPipelineRasterizationState) SetCullMode(p_member RenderingDevicePolygonCullMode) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RenderingDevicePolygonCullMode](0, abi, p_member)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RDPipelineRasterizationState.set_cull_mode, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self RDPipelineRasterizationState) GetCullMode() RenderingDevicePolygonCullMode {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RDPipelineRasterizationState.get_cull_mode, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[RenderingDevicePolygonCullMode](abi)
	abi.free()
	return ret
}

func (self RDPipelineRasterizationState) SetFrontFace(p_member RenderingDevicePolygonFrontFace) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RenderingDevicePolygonFrontFace](0, abi, p_member)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RDPipelineRasterizationState.set_front_face, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self RDPipelineRasterizationState) GetFrontFace() RenderingDevicePolygonFrontFace {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RDPipelineRasterizationState.get_front_face, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[RenderingDevicePolygonFrontFace](abi)
	abi.free()
	return ret
}

func (self RDPipelineRasterizationState) SetDepthBiasEnabled(p_member bool) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[bool](0, abi, p_member)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RDPipelineRasterizationState.set_depth_bias_enabled, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self RDPipelineRasterizationState) GetDepthBiasEnabled() bool {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RDPipelineRasterizationState.get_depth_bias_enabled, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self RDPipelineRasterizationState) SetDepthBiasConstantFactor(p_member Float) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Float](0, abi, p_member)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RDPipelineRasterizationState.set_depth_bias_constant_factor, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self RDPipelineRasterizationState) GetDepthBiasConstantFactor() Float {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RDPipelineRasterizationState.get_depth_bias_constant_factor, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Float](abi)
	abi.free()
	return ret
}

func (self RDPipelineRasterizationState) SetDepthBiasClamp(p_member Float) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Float](0, abi, p_member)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RDPipelineRasterizationState.set_depth_bias_clamp, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self RDPipelineRasterizationState) GetDepthBiasClamp() Float {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RDPipelineRasterizationState.get_depth_bias_clamp, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Float](abi)
	abi.free()
	return ret
}

func (self RDPipelineRasterizationState) SetDepthBiasSlopeFactor(p_member Float) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Float](0, abi, p_member)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RDPipelineRasterizationState.set_depth_bias_slope_factor, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self RDPipelineRasterizationState) GetDepthBiasSlopeFactor() Float {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RDPipelineRasterizationState.get_depth_bias_slope_factor, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Float](abi)
	abi.free()
	return ret
}

func (self RDPipelineRasterizationState) SetLineWidth(p_member Float) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Float](0, abi, p_member)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RDPipelineRasterizationState.set_line_width, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self RDPipelineRasterizationState) GetLineWidth() Float {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RDPipelineRasterizationState.get_line_width, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Float](abi)
	abi.free()
	return ret
}

func (self RDPipelineRasterizationState) SetPatchControlPoints(p_member Int) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Int](0, abi, p_member)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RDPipelineRasterizationState.set_patch_control_points, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self RDPipelineRasterizationState) GetPatchControlPoints() Int {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RDPipelineRasterizationState.get_patch_control_points, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Int](abi)
	abi.free()
	return ret
}

func (self RDPipelineRasterizationState) virtual(name string) reflect.Value {
	switch name {
	default:
		return self.Super().virtual(name)
	}
}

type RDPipelineSpecializationConstant struct {
	Class[RDPipelineSpecializationConstant, RefCounted]
}

func (self RDPipelineSpecializationConstant) RefCounted() RefCounted { return *self.Super() }

func (self RDPipelineSpecializationConstant) Object() Object { return *self.Super().Super() }

func (self RDPipelineSpecializationConstant) SetValue(value Variant) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Variant](0, abi, value)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RDPipelineSpecializationConstant.set_value, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self RDPipelineSpecializationConstant) GetValue(ctx Context) Variant {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RDPipelineSpecializationConstant.get_value, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[[3]uintptr](abi)
	abi.free()
	return mmm.Make[API, Variant, [3]uintptr](ctx, selfPtr.API, ret)
}

func (self RDPipelineSpecializationConstant) SetConstantId(constant_id Int) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Int](0, abi, constant_id)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RDPipelineSpecializationConstant.set_constant_id, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self RDPipelineSpecializationConstant) GetConstantId() Int {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RDPipelineSpecializationConstant.get_constant_id, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Int](abi)
	abi.free()
	return ret
}

func (self RDPipelineSpecializationConstant) virtual(name string) reflect.Value {
	switch name {
	default:
		return self.Super().virtual(name)
	}
}

type RDSamplerState struct {
	Class[RDSamplerState, RefCounted]
}

func (self RDSamplerState) RefCounted() RefCounted { return *self.Super() }

func (self RDSamplerState) Object() Object { return *self.Super().Super() }

func (self RDSamplerState) SetMagFilter(p_member RenderingDeviceSamplerFilter) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RenderingDeviceSamplerFilter](0, abi, p_member)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RDSamplerState.set_mag_filter, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self RDSamplerState) GetMagFilter() RenderingDeviceSamplerFilter {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RDSamplerState.get_mag_filter, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[RenderingDeviceSamplerFilter](abi)
	abi.free()
	return ret
}

func (self RDSamplerState) SetMinFilter(p_member RenderingDeviceSamplerFilter) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RenderingDeviceSamplerFilter](0, abi, p_member)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RDSamplerState.set_min_filter, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self RDSamplerState) GetMinFilter() RenderingDeviceSamplerFilter {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RDSamplerState.get_min_filter, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[RenderingDeviceSamplerFilter](abi)
	abi.free()
	return ret
}

func (self RDSamplerState) SetMipFilter(p_member RenderingDeviceSamplerFilter) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RenderingDeviceSamplerFilter](0, abi, p_member)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RDSamplerState.set_mip_filter, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self RDSamplerState) GetMipFilter() RenderingDeviceSamplerFilter {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RDSamplerState.get_mip_filter, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[RenderingDeviceSamplerFilter](abi)
	abi.free()
	return ret
}

func (self RDSamplerState) SetRepeatU(p_member RenderingDeviceSamplerRepeatMode) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RenderingDeviceSamplerRepeatMode](0, abi, p_member)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RDSamplerState.set_repeat_u, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self RDSamplerState) GetRepeatU() RenderingDeviceSamplerRepeatMode {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RDSamplerState.get_repeat_u, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[RenderingDeviceSamplerRepeatMode](abi)
	abi.free()
	return ret
}

func (self RDSamplerState) SetRepeatV(p_member RenderingDeviceSamplerRepeatMode) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RenderingDeviceSamplerRepeatMode](0, abi, p_member)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RDSamplerState.set_repeat_v, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self RDSamplerState) GetRepeatV() RenderingDeviceSamplerRepeatMode {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RDSamplerState.get_repeat_v, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[RenderingDeviceSamplerRepeatMode](abi)
	abi.free()
	return ret
}

func (self RDSamplerState) SetRepeatW(p_member RenderingDeviceSamplerRepeatMode) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RenderingDeviceSamplerRepeatMode](0, abi, p_member)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RDSamplerState.set_repeat_w, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self RDSamplerState) GetRepeatW() RenderingDeviceSamplerRepeatMode {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RDSamplerState.get_repeat_w, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[RenderingDeviceSamplerRepeatMode](abi)
	abi.free()
	return ret
}

func (self RDSamplerState) SetLodBias(p_member Float) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Float](0, abi, p_member)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RDSamplerState.set_lod_bias, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self RDSamplerState) GetLodBias() Float {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RDSamplerState.get_lod_bias, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Float](abi)
	abi.free()
	return ret
}

func (self RDSamplerState) SetUseAnisotropy(p_member bool) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[bool](0, abi, p_member)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RDSamplerState.set_use_anisotropy, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self RDSamplerState) GetUseAnisotropy() bool {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RDSamplerState.get_use_anisotropy, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self RDSamplerState) SetAnisotropyMax(p_member Float) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Float](0, abi, p_member)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RDSamplerState.set_anisotropy_max, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self RDSamplerState) GetAnisotropyMax() Float {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RDSamplerState.get_anisotropy_max, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Float](abi)
	abi.free()
	return ret
}

func (self RDSamplerState) SetEnableCompare(p_member bool) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[bool](0, abi, p_member)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RDSamplerState.set_enable_compare, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self RDSamplerState) GetEnableCompare() bool {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RDSamplerState.get_enable_compare, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self RDSamplerState) SetCompareOp(p_member RenderingDeviceCompareOperator) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RenderingDeviceCompareOperator](0, abi, p_member)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RDSamplerState.set_compare_op, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self RDSamplerState) GetCompareOp() RenderingDeviceCompareOperator {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RDSamplerState.get_compare_op, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[RenderingDeviceCompareOperator](abi)
	abi.free()
	return ret
}

func (self RDSamplerState) SetMinLod(p_member Float) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Float](0, abi, p_member)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RDSamplerState.set_min_lod, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self RDSamplerState) GetMinLod() Float {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RDSamplerState.get_min_lod, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Float](abi)
	abi.free()
	return ret
}

func (self RDSamplerState) SetMaxLod(p_member Float) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Float](0, abi, p_member)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RDSamplerState.set_max_lod, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self RDSamplerState) GetMaxLod() Float {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RDSamplerState.get_max_lod, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Float](abi)
	abi.free()
	return ret
}

func (self RDSamplerState) SetBorderColor(p_member RenderingDeviceSamplerBorderColor) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RenderingDeviceSamplerBorderColor](0, abi, p_member)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RDSamplerState.set_border_color, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self RDSamplerState) GetBorderColor() RenderingDeviceSamplerBorderColor {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RDSamplerState.get_border_color, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[RenderingDeviceSamplerBorderColor](abi)
	abi.free()
	return ret
}

func (self RDSamplerState) SetUnnormalizedUvw(p_member bool) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[bool](0, abi, p_member)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RDSamplerState.set_unnormalized_uvw, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self RDSamplerState) GetUnnormalizedUvw() bool {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RDSamplerState.get_unnormalized_uvw, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self RDSamplerState) virtual(name string) reflect.Value {
	switch name {
	default:
		return self.Super().virtual(name)
	}
}

type RDShaderSPIRV struct{ Class[RDShaderSPIRV, Resource] }

func (self RDShaderSPIRV) Resource() Resource { return *self.Super() }

func (self RDShaderSPIRV) RefCounted() RefCounted { return *self.Super().Super() }

func (self RDShaderSPIRV) Object() Object { return *self.Super().Super().Super() }

func (self RDShaderSPIRV) SetStageBytecode(stage RenderingDeviceShaderStage, bytecode PackedByteArray) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RenderingDeviceShaderStage](0, abi, stage)
	frameSet[PackedByteArray](1, abi, bytecode)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RDShaderSPIRV.set_stage_bytecode, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self RDShaderSPIRV) GetStageBytecode(ctx Context, stage RenderingDeviceShaderStage) PackedByteArray {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RenderingDeviceShaderStage](0, abi, stage)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RDShaderSPIRV.get_stage_bytecode, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[[2]uintptr](abi)
	abi.free()
	return mmm.Make[API, PackedByteArray, [2]uintptr](ctx, selfPtr.API, ret)
}

func (self RDShaderSPIRV) SetStageCompileError(stage RenderingDeviceShaderStage, compile_error String) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RenderingDeviceShaderStage](0, abi, stage)
	frameSet[String](1, abi, compile_error)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RDShaderSPIRV.set_stage_compile_error, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self RDShaderSPIRV) GetStageCompileError(ctx Context, stage RenderingDeviceShaderStage) String {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RenderingDeviceShaderStage](0, abi, stage)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RDShaderSPIRV.get_stage_compile_error, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[uintptr](abi)
	abi.free()
	return mmm.Make[API, String, uintptr](ctx, selfPtr.API, ret)
}

func (self RDShaderSPIRV) virtual(name string) reflect.Value {
	switch name {
	default:
		return self.Super().virtual(name)
	}
}

type RDShaderSource struct {
	Class[RDShaderSource, RefCounted]
}

func (self RDShaderSource) RefCounted() RefCounted { return *self.Super() }

func (self RDShaderSource) Object() Object { return *self.Super().Super() }

func (self RDShaderSource) SetStageSource(stage RenderingDeviceShaderStage, source String) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RenderingDeviceShaderStage](0, abi, stage)
	frameSet[String](1, abi, source)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RDShaderSource.set_stage_source, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self RDShaderSource) GetStageSource(ctx Context, stage RenderingDeviceShaderStage) String {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RenderingDeviceShaderStage](0, abi, stage)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RDShaderSource.get_stage_source, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[uintptr](abi)
	abi.free()
	return mmm.Make[API, String, uintptr](ctx, selfPtr.API, ret)
}

func (self RDShaderSource) SetLanguage(language RenderingDeviceShaderLanguage) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RenderingDeviceShaderLanguage](0, abi, language)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RDShaderSource.set_language, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self RDShaderSource) GetLanguage() RenderingDeviceShaderLanguage {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RDShaderSource.get_language, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[RenderingDeviceShaderLanguage](abi)
	abi.free()
	return ret
}

func (self RDShaderSource) virtual(name string) reflect.Value {
	switch name {
	default:
		return self.Super().virtual(name)
	}
}

type RDTextureFormat struct {
	Class[RDTextureFormat, RefCounted]
}

func (self RDTextureFormat) RefCounted() RefCounted { return *self.Super() }

func (self RDTextureFormat) Object() Object { return *self.Super().Super() }

func (self RDTextureFormat) SetFormat(p_member RenderingDeviceDataFormat) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RenderingDeviceDataFormat](0, abi, p_member)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RDTextureFormat.set_format, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self RDTextureFormat) GetFormat() RenderingDeviceDataFormat {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RDTextureFormat.get_format, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[RenderingDeviceDataFormat](abi)
	abi.free()
	return ret
}

func (self RDTextureFormat) SetWidth(p_member Int) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Int](0, abi, p_member)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RDTextureFormat.set_width, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self RDTextureFormat) GetWidth() Int {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RDTextureFormat.get_width, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Int](abi)
	abi.free()
	return ret
}

func (self RDTextureFormat) SetHeight(p_member Int) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Int](0, abi, p_member)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RDTextureFormat.set_height, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self RDTextureFormat) GetHeight() Int {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RDTextureFormat.get_height, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Int](abi)
	abi.free()
	return ret
}

func (self RDTextureFormat) SetDepth(p_member Int) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Int](0, abi, p_member)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RDTextureFormat.set_depth, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self RDTextureFormat) GetDepth() Int {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RDTextureFormat.get_depth, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Int](abi)
	abi.free()
	return ret
}

func (self RDTextureFormat) SetArrayLayers(p_member Int) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Int](0, abi, p_member)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RDTextureFormat.set_array_layers, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self RDTextureFormat) GetArrayLayers() Int {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RDTextureFormat.get_array_layers, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Int](abi)
	abi.free()
	return ret
}

func (self RDTextureFormat) SetMipmaps(p_member Int) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Int](0, abi, p_member)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RDTextureFormat.set_mipmaps, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self RDTextureFormat) GetMipmaps() Int {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RDTextureFormat.get_mipmaps, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Int](abi)
	abi.free()
	return ret
}

func (self RDTextureFormat) SetTextureType(p_member RenderingDeviceTextureType) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RenderingDeviceTextureType](0, abi, p_member)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RDTextureFormat.set_texture_type, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self RDTextureFormat) GetTextureType() RenderingDeviceTextureType {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RDTextureFormat.get_texture_type, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[RenderingDeviceTextureType](abi)
	abi.free()
	return ret
}

func (self RDTextureFormat) SetSamples(p_member RenderingDeviceTextureSamples) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RenderingDeviceTextureSamples](0, abi, p_member)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RDTextureFormat.set_samples, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self RDTextureFormat) GetSamples() RenderingDeviceTextureSamples {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RDTextureFormat.get_samples, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[RenderingDeviceTextureSamples](abi)
	abi.free()
	return ret
}

func (self RDTextureFormat) SetUsageBits(p_member RenderingDeviceTextureUsageBits) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RenderingDeviceTextureUsageBits](0, abi, p_member)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RDTextureFormat.set_usage_bits, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self RDTextureFormat) GetUsageBits() RenderingDeviceTextureUsageBits {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RDTextureFormat.get_usage_bits, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[RenderingDeviceTextureUsageBits](abi)
	abi.free()
	return ret
}

func (self RDTextureFormat) AddShareableFormat(format RenderingDeviceDataFormat) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RenderingDeviceDataFormat](0, abi, format)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RDTextureFormat.add_shareable_format, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self RDTextureFormat) RemoveShareableFormat(format RenderingDeviceDataFormat) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RenderingDeviceDataFormat](0, abi, format)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RDTextureFormat.remove_shareable_format, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self RDTextureFormat) virtual(name string) reflect.Value {
	switch name {
	default:
		return self.Super().virtual(name)
	}
}

type RDTextureView struct {
	Class[RDTextureView, RefCounted]
}

func (self RDTextureView) RefCounted() RefCounted { return *self.Super() }

func (self RDTextureView) Object() Object { return *self.Super().Super() }

func (self RDTextureView) SetFormatOverride(p_member RenderingDeviceDataFormat) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RenderingDeviceDataFormat](0, abi, p_member)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RDTextureView.set_format_override, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self RDTextureView) GetFormatOverride() RenderingDeviceDataFormat {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RDTextureView.get_format_override, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[RenderingDeviceDataFormat](abi)
	abi.free()
	return ret
}

func (self RDTextureView) SetSwizzleR(p_member RenderingDeviceTextureSwizzle) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RenderingDeviceTextureSwizzle](0, abi, p_member)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RDTextureView.set_swizzle_r, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self RDTextureView) GetSwizzleR() RenderingDeviceTextureSwizzle {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RDTextureView.get_swizzle_r, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[RenderingDeviceTextureSwizzle](abi)
	abi.free()
	return ret
}

func (self RDTextureView) SetSwizzleG(p_member RenderingDeviceTextureSwizzle) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RenderingDeviceTextureSwizzle](0, abi, p_member)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RDTextureView.set_swizzle_g, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self RDTextureView) GetSwizzleG() RenderingDeviceTextureSwizzle {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RDTextureView.get_swizzle_g, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[RenderingDeviceTextureSwizzle](abi)
	abi.free()
	return ret
}

func (self RDTextureView) SetSwizzleB(p_member RenderingDeviceTextureSwizzle) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RenderingDeviceTextureSwizzle](0, abi, p_member)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RDTextureView.set_swizzle_b, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self RDTextureView) GetSwizzleB() RenderingDeviceTextureSwizzle {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RDTextureView.get_swizzle_b, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[RenderingDeviceTextureSwizzle](abi)
	abi.free()
	return ret
}

func (self RDTextureView) SetSwizzleA(p_member RenderingDeviceTextureSwizzle) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RenderingDeviceTextureSwizzle](0, abi, p_member)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RDTextureView.set_swizzle_a, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self RDTextureView) GetSwizzleA() RenderingDeviceTextureSwizzle {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RDTextureView.get_swizzle_a, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[RenderingDeviceTextureSwizzle](abi)
	abi.free()
	return ret
}

func (self RDTextureView) virtual(name string) reflect.Value {
	switch name {
	default:
		return self.Super().virtual(name)
	}
}

type RDUniform struct{ Class[RDUniform, RefCounted] }

func (self RDUniform) RefCounted() RefCounted { return *self.Super() }

func (self RDUniform) Object() Object { return *self.Super().Super() }

func (self RDUniform) SetUniformType(p_member RenderingDeviceUniformType) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RenderingDeviceUniformType](0, abi, p_member)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RDUniform.set_uniform_type, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self RDUniform) GetUniformType() RenderingDeviceUniformType {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RDUniform.get_uniform_type, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[RenderingDeviceUniformType](abi)
	abi.free()
	return ret
}

func (self RDUniform) SetBinding(p_member Int) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Int](0, abi, p_member)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RDUniform.set_binding, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self RDUniform) GetBinding() Int {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RDUniform.get_binding, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Int](abi)
	abi.free()
	return ret
}

func (self RDUniform) AddId(id RID) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, id)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RDUniform.add_id, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self RDUniform) ClearIds() {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RDUniform.clear_ids, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self RDUniform) GetIds() ArrayOf[RID] {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RDUniform.get_ids, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[ArrayOf[RID]](abi)
	abi.free()
	return ret
}

func (self RDUniform) virtual(name string) reflect.Value {
	switch name {
	default:
		return self.Super().virtual(name)
	}
}

type RDVertexAttribute struct {
	Class[RDVertexAttribute, RefCounted]
}

func (self RDVertexAttribute) RefCounted() RefCounted { return *self.Super() }

func (self RDVertexAttribute) Object() Object { return *self.Super().Super() }

func (self RDVertexAttribute) SetLocation(p_member Int) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Int](0, abi, p_member)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RDVertexAttribute.set_location, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self RDVertexAttribute) GetLocation() Int {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RDVertexAttribute.get_location, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Int](abi)
	abi.free()
	return ret
}

func (self RDVertexAttribute) SetOffset(p_member Int) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Int](0, abi, p_member)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RDVertexAttribute.set_offset, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self RDVertexAttribute) GetOffset() Int {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RDVertexAttribute.get_offset, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Int](abi)
	abi.free()
	return ret
}

func (self RDVertexAttribute) SetFormat(p_member RenderingDeviceDataFormat) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RenderingDeviceDataFormat](0, abi, p_member)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RDVertexAttribute.set_format, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self RDVertexAttribute) GetFormat() RenderingDeviceDataFormat {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RDVertexAttribute.get_format, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[RenderingDeviceDataFormat](abi)
	abi.free()
	return ret
}

func (self RDVertexAttribute) SetStride(p_member Int) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Int](0, abi, p_member)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RDVertexAttribute.set_stride, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self RDVertexAttribute) GetStride() Int {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RDVertexAttribute.get_stride, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Int](abi)
	abi.free()
	return ret
}

func (self RDVertexAttribute) SetFrequency(p_member RenderingDeviceVertexFrequency) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RenderingDeviceVertexFrequency](0, abi, p_member)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RDVertexAttribute.set_frequency, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self RDVertexAttribute) GetFrequency() RenderingDeviceVertexFrequency {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RDVertexAttribute.get_frequency, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[RenderingDeviceVertexFrequency](abi)
	abi.free()
	return ret
}

func (self RDVertexAttribute) virtual(name string) reflect.Value {
	switch name {
	default:
		return self.Super().virtual(name)
	}
}

type RefCounted struct{ Class[RefCounted, Object] }

func (self RefCounted) Object() Object { return *self.Super() }

func (self RefCounted) InitRef() bool {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RefCounted.init_ref, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self RefCounted) Reference() bool {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RefCounted.reference, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self RefCounted) Unreference() bool {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RefCounted.unreference, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self RefCounted) GetReferenceCount() Int {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RefCounted.get_reference_count, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Int](abi)
	abi.free()
	return ret
}

func (self RefCounted) virtual(name string) reflect.Value {
	switch name {
	default:
		return self.Super().virtual(name)
	}
}

type RenderingDeviceDeviceType int64

type RenderingDeviceDriverResource int64

type RenderingDeviceDataFormat int64

type RenderingDeviceBarrierMask int64

type RenderingDeviceTextureType int64

type RenderingDeviceTextureSamples int64

type RenderingDeviceTextureUsageBits int64

type RenderingDeviceTextureSwizzle int64

type RenderingDeviceTextureSliceType int64

type RenderingDeviceSamplerFilter int64

type RenderingDeviceSamplerRepeatMode int64

type RenderingDeviceSamplerBorderColor int64

type RenderingDeviceVertexFrequency int64

type RenderingDeviceIndexBufferFormat int64

type RenderingDeviceStorageBufferUsage int64

type RenderingDeviceUniformType int64

type RenderingDeviceRenderPrimitive int64

type RenderingDevicePolygonCullMode int64

type RenderingDevicePolygonFrontFace int64

type RenderingDeviceStencilOperation int64

type RenderingDeviceCompareOperator int64

type RenderingDeviceLogicOperation int64

type RenderingDeviceBlendFactor int64

type RenderingDeviceBlendOperation int64

type RenderingDevicePipelineDynamicStateFlags int64

type RenderingDeviceInitialAction int64

type RenderingDeviceFinalAction int64

type RenderingDeviceShaderStage int64

type RenderingDeviceShaderLanguage int64

type RenderingDevicePipelineSpecializationConstantType int64

type RenderingDeviceLimit int64

type RenderingDeviceMemoryType int64
type RenderingDevice struct{ Class[RenderingDevice, Object] }

func (self RenderingDevice) Object() Object { return *self.Super() }

func (self RenderingDevice) TextureCreate(format RDTextureFormat, view RDTextureView, data ArrayOf[PackedByteArray]) RID {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RDTextureFormat](0, abi, format)
	frameSet[RDTextureView](1, abi, view)
	frameSet[ArrayOf[PackedByteArray]](2, abi, data)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingDevice.texture_create, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[RID](abi)
	abi.free()
	return ret
}

func (self RenderingDevice) TextureCreateShared(view RDTextureView, with_texture RID) RID {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RDTextureView](0, abi, view)
	frameSet[RID](1, abi, with_texture)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingDevice.texture_create_shared, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[RID](abi)
	abi.free()
	return ret
}

func (self RenderingDevice) TextureCreateSharedFromSlice(view RDTextureView, with_texture RID, layer Int, mipmap Int, mipmaps Int, slice_type RenderingDeviceTextureSliceType) RID {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RDTextureView](0, abi, view)
	frameSet[RID](1, abi, with_texture)
	frameSet[Int](2, abi, layer)
	frameSet[Int](3, abi, mipmap)
	frameSet[Int](4, abi, mipmaps)
	frameSet[RenderingDeviceTextureSliceType](5, abi, slice_type)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingDevice.texture_create_shared_from_slice, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[RID](abi)
	abi.free()
	return ret
}

func (self RenderingDevice) TextureCreateFromExtension(atype RenderingDeviceTextureType, format RenderingDeviceDataFormat, samples RenderingDeviceTextureSamples, usage_flags RenderingDeviceTextureUsageBits, image Int, width Int, height Int, depth Int, layers Int) RID {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RenderingDeviceTextureType](0, abi, atype)
	frameSet[RenderingDeviceDataFormat](1, abi, format)
	frameSet[RenderingDeviceTextureSamples](2, abi, samples)
	frameSet[RenderingDeviceTextureUsageBits](3, abi, usage_flags)
	frameSet[Int](4, abi, image)
	frameSet[Int](5, abi, width)
	frameSet[Int](6, abi, height)
	frameSet[Int](7, abi, depth)
	frameSet[Int](8, abi, layers)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingDevice.texture_create_from_extension, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[RID](abi)
	abi.free()
	return ret
}

func (self RenderingDevice) TextureUpdate(texture RID, layer Int, data PackedByteArray, post_barrier RenderingDeviceBarrierMask) int64 {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, texture)
	frameSet[Int](1, abi, layer)
	frameSet[PackedByteArray](2, abi, data)
	frameSet[RenderingDeviceBarrierMask](3, abi, post_barrier)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingDevice.texture_update, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[int64](abi)
	abi.free()
	return ret
}

func (self RenderingDevice) TextureGetData(ctx Context, texture RID, layer Int) PackedByteArray {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, texture)
	frameSet[Int](1, abi, layer)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingDevice.texture_get_data, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[[2]uintptr](abi)
	abi.free()
	return mmm.Make[API, PackedByteArray, [2]uintptr](ctx, selfPtr.API, ret)
}

func (self RenderingDevice) TextureIsFormatSupportedForUsage(format RenderingDeviceDataFormat, usage_flags RenderingDeviceTextureUsageBits) bool {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RenderingDeviceDataFormat](0, abi, format)
	frameSet[RenderingDeviceTextureUsageBits](1, abi, usage_flags)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingDevice.texture_is_format_supported_for_usage, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self RenderingDevice) TextureIsShared(texture RID) bool {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, texture)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingDevice.texture_is_shared, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self RenderingDevice) TextureIsValid(texture RID) bool {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, texture)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingDevice.texture_is_valid, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self RenderingDevice) TextureCopy(from_texture RID, to_texture RID, from_pos Vector3, to_pos Vector3, size Vector3, src_mipmap Int, dst_mipmap Int, src_layer Int, dst_layer Int, post_barrier RenderingDeviceBarrierMask) int64 {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, from_texture)
	frameSet[RID](1, abi, to_texture)
	frameSet[Vector3](2, abi, from_pos)
	frameSet[Vector3](3, abi, to_pos)
	frameSet[Vector3](4, abi, size)
	frameSet[Int](5, abi, src_mipmap)
	frameSet[Int](6, abi, dst_mipmap)
	frameSet[Int](7, abi, src_layer)
	frameSet[Int](8, abi, dst_layer)
	frameSet[RenderingDeviceBarrierMask](9, abi, post_barrier)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingDevice.texture_copy, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[int64](abi)
	abi.free()
	return ret
}

func (self RenderingDevice) TextureClear(texture RID, color Color, base_mipmap Int, mipmap_count Int, base_layer Int, layer_count Int, post_barrier RenderingDeviceBarrierMask) int64 {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, texture)
	frameSet[Color](1, abi, color)
	frameSet[Int](2, abi, base_mipmap)
	frameSet[Int](3, abi, mipmap_count)
	frameSet[Int](4, abi, base_layer)
	frameSet[Int](5, abi, layer_count)
	frameSet[RenderingDeviceBarrierMask](6, abi, post_barrier)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingDevice.texture_clear, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[int64](abi)
	abi.free()
	return ret
}

func (self RenderingDevice) TextureResolveMultisample(from_texture RID, to_texture RID, post_barrier RenderingDeviceBarrierMask) int64 {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, from_texture)
	frameSet[RID](1, abi, to_texture)
	frameSet[RenderingDeviceBarrierMask](2, abi, post_barrier)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingDevice.texture_resolve_multisample, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[int64](abi)
	abi.free()
	return ret
}

func (self RenderingDevice) TextureGetFormat(texture RID) RDTextureFormat {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, texture)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingDevice.texture_get_format, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[RDTextureFormat](abi)
	abi.free()
	return ret
}

func (self RenderingDevice) TextureGetNativeHandle(texture RID) Int {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, texture)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingDevice.texture_get_native_handle, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Int](abi)
	abi.free()
	return ret
}

func (self RenderingDevice) FramebufferFormatCreate(attachments ArrayOf[RDAttachmentFormat], view_count Int) Int {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[ArrayOf[RDAttachmentFormat]](0, abi, attachments)
	frameSet[Int](1, abi, view_count)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingDevice.framebuffer_format_create, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Int](abi)
	abi.free()
	return ret
}

func (self RenderingDevice) FramebufferFormatCreateMultipass(attachments ArrayOf[RDAttachmentFormat], passes ArrayOf[RDFramebufferPass], view_count Int) Int {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[ArrayOf[RDAttachmentFormat]](0, abi, attachments)
	frameSet[ArrayOf[RDFramebufferPass]](1, abi, passes)
	frameSet[Int](2, abi, view_count)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingDevice.framebuffer_format_create_multipass, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Int](abi)
	abi.free()
	return ret
}

func (self RenderingDevice) FramebufferFormatCreateEmpty(samples RenderingDeviceTextureSamples) Int {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RenderingDeviceTextureSamples](0, abi, samples)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingDevice.framebuffer_format_create_empty, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Int](abi)
	abi.free()
	return ret
}

func (self RenderingDevice) FramebufferFormatGetTextureSamples(format Int, render_pass Int) RenderingDeviceTextureSamples {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Int](0, abi, format)
	frameSet[Int](1, abi, render_pass)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingDevice.framebuffer_format_get_texture_samples, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[RenderingDeviceTextureSamples](abi)
	abi.free()
	return ret
}

func (self RenderingDevice) FramebufferCreate(textures ArrayOf[RID], validate_with_format Int, view_count Int) RID {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[ArrayOf[RID]](0, abi, textures)
	frameSet[Int](1, abi, validate_with_format)
	frameSet[Int](2, abi, view_count)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingDevice.framebuffer_create, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[RID](abi)
	abi.free()
	return ret
}

func (self RenderingDevice) FramebufferCreateMultipass(textures ArrayOf[RID], passes ArrayOf[RDFramebufferPass], validate_with_format Int, view_count Int) RID {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[ArrayOf[RID]](0, abi, textures)
	frameSet[ArrayOf[RDFramebufferPass]](1, abi, passes)
	frameSet[Int](2, abi, validate_with_format)
	frameSet[Int](3, abi, view_count)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingDevice.framebuffer_create_multipass, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[RID](abi)
	abi.free()
	return ret
}

func (self RenderingDevice) FramebufferCreateEmpty(size Vector2i, samples RenderingDeviceTextureSamples, validate_with_format Int) RID {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Vector2i](0, abi, size)
	frameSet[RenderingDeviceTextureSamples](1, abi, samples)
	frameSet[Int](2, abi, validate_with_format)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingDevice.framebuffer_create_empty, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[RID](abi)
	abi.free()
	return ret
}

func (self RenderingDevice) FramebufferGetFormat(framebuffer RID) Int {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, framebuffer)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingDevice.framebuffer_get_format, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Int](abi)
	abi.free()
	return ret
}

func (self RenderingDevice) FramebufferIsValid(framebuffer RID) bool {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, framebuffer)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingDevice.framebuffer_is_valid, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self RenderingDevice) SamplerCreate(state RDSamplerState) RID {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RDSamplerState](0, abi, state)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingDevice.sampler_create, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[RID](abi)
	abi.free()
	return ret
}

func (self RenderingDevice) SamplerIsFormatSupportedForFilter(format RenderingDeviceDataFormat, sampler_filter RenderingDeviceSamplerFilter) bool {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RenderingDeviceDataFormat](0, abi, format)
	frameSet[RenderingDeviceSamplerFilter](1, abi, sampler_filter)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingDevice.sampler_is_format_supported_for_filter, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self RenderingDevice) VertexBufferCreate(size_bytes Int, data PackedByteArray, use_as_storage bool) RID {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Int](0, abi, size_bytes)
	frameSet[PackedByteArray](1, abi, data)
	frameSet[bool](2, abi, use_as_storage)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingDevice.vertex_buffer_create, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[RID](abi)
	abi.free()
	return ret
}

func (self RenderingDevice) VertexFormatCreate(vertex_descriptions ArrayOf[RDVertexAttribute]) Int {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[ArrayOf[RDVertexAttribute]](0, abi, vertex_descriptions)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingDevice.vertex_format_create, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Int](abi)
	abi.free()
	return ret
}

func (self RenderingDevice) VertexArrayCreate(vertex_count Int, vertex_format Int, src_buffers ArrayOf[RID], offsets PackedInt64Array) RID {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Int](0, abi, vertex_count)
	frameSet[Int](1, abi, vertex_format)
	frameSet[ArrayOf[RID]](2, abi, src_buffers)
	frameSet[PackedInt64Array](3, abi, offsets)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingDevice.vertex_array_create, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[RID](abi)
	abi.free()
	return ret
}

func (self RenderingDevice) IndexBufferCreate(size_indices Int, format RenderingDeviceIndexBufferFormat, data PackedByteArray, use_restart_indices bool) RID {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Int](0, abi, size_indices)
	frameSet[RenderingDeviceIndexBufferFormat](1, abi, format)
	frameSet[PackedByteArray](2, abi, data)
	frameSet[bool](3, abi, use_restart_indices)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingDevice.index_buffer_create, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[RID](abi)
	abi.free()
	return ret
}

func (self RenderingDevice) IndexArrayCreate(index_buffer RID, index_offset Int, index_count Int) RID {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, index_buffer)
	frameSet[Int](1, abi, index_offset)
	frameSet[Int](2, abi, index_count)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingDevice.index_array_create, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[RID](abi)
	abi.free()
	return ret
}

func (self RenderingDevice) ShaderCompileSpirvFromSource(shader_source RDShaderSource, allow_cache bool) RDShaderSPIRV {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RDShaderSource](0, abi, shader_source)
	frameSet[bool](1, abi, allow_cache)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingDevice.shader_compile_spirv_from_source, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[RDShaderSPIRV](abi)
	abi.free()
	return ret
}

func (self RenderingDevice) ShaderCompileBinaryFromSpirv(ctx Context, spirv_data RDShaderSPIRV, name String) PackedByteArray {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RDShaderSPIRV](0, abi, spirv_data)
	frameSet[String](1, abi, name)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingDevice.shader_compile_binary_from_spirv, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[[2]uintptr](abi)
	abi.free()
	return mmm.Make[API, PackedByteArray, [2]uintptr](ctx, selfPtr.API, ret)
}

func (self RenderingDevice) ShaderCreateFromSpirv(spirv_data RDShaderSPIRV, name String) RID {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RDShaderSPIRV](0, abi, spirv_data)
	frameSet[String](1, abi, name)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingDevice.shader_create_from_spirv, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[RID](abi)
	abi.free()
	return ret
}

func (self RenderingDevice) ShaderCreateFromBytecode(binary_data PackedByteArray, placeholder_rid RID) RID {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[PackedByteArray](0, abi, binary_data)
	frameSet[RID](1, abi, placeholder_rid)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingDevice.shader_create_from_bytecode, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[RID](abi)
	abi.free()
	return ret
}

func (self RenderingDevice) ShaderCreatePlaceholder() RID {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingDevice.shader_create_placeholder, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[RID](abi)
	abi.free()
	return ret
}

func (self RenderingDevice) ShaderGetVertexInputAttributeMask(shader RID) Int {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, shader)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingDevice.shader_get_vertex_input_attribute_mask, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Int](abi)
	abi.free()
	return ret
}

func (self RenderingDevice) UniformBufferCreate(size_bytes Int, data PackedByteArray) RID {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Int](0, abi, size_bytes)
	frameSet[PackedByteArray](1, abi, data)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingDevice.uniform_buffer_create, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[RID](abi)
	abi.free()
	return ret
}

func (self RenderingDevice) StorageBufferCreate(size_bytes Int, data PackedByteArray, usage RenderingDeviceStorageBufferUsage) RID {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Int](0, abi, size_bytes)
	frameSet[PackedByteArray](1, abi, data)
	frameSet[RenderingDeviceStorageBufferUsage](2, abi, usage)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingDevice.storage_buffer_create, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[RID](abi)
	abi.free()
	return ret
}

func (self RenderingDevice) TextureBufferCreate(size_bytes Int, format RenderingDeviceDataFormat, data PackedByteArray) RID {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Int](0, abi, size_bytes)
	frameSet[RenderingDeviceDataFormat](1, abi, format)
	frameSet[PackedByteArray](2, abi, data)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingDevice.texture_buffer_create, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[RID](abi)
	abi.free()
	return ret
}

func (self RenderingDevice) UniformSetCreate(uniforms ArrayOf[RDUniform], shader RID, shader_set Int) RID {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[ArrayOf[RDUniform]](0, abi, uniforms)
	frameSet[RID](1, abi, shader)
	frameSet[Int](2, abi, shader_set)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingDevice.uniform_set_create, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[RID](abi)
	abi.free()
	return ret
}

func (self RenderingDevice) UniformSetIsValid(uniform_set RID) bool {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, uniform_set)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingDevice.uniform_set_is_valid, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self RenderingDevice) BufferUpdate(buffer RID, offset Int, size_bytes Int, data PackedByteArray, post_barrier RenderingDeviceBarrierMask) int64 {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, buffer)
	frameSet[Int](1, abi, offset)
	frameSet[Int](2, abi, size_bytes)
	frameSet[PackedByteArray](3, abi, data)
	frameSet[RenderingDeviceBarrierMask](4, abi, post_barrier)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingDevice.buffer_update, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[int64](abi)
	abi.free()
	return ret
}

func (self RenderingDevice) BufferClear(buffer RID, offset Int, size_bytes Int, post_barrier RenderingDeviceBarrierMask) int64 {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, buffer)
	frameSet[Int](1, abi, offset)
	frameSet[Int](2, abi, size_bytes)
	frameSet[RenderingDeviceBarrierMask](3, abi, post_barrier)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingDevice.buffer_clear, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[int64](abi)
	abi.free()
	return ret
}

func (self RenderingDevice) BufferGetData(ctx Context, buffer RID, offset_bytes Int, size_bytes Int) PackedByteArray {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, buffer)
	frameSet[Int](1, abi, offset_bytes)
	frameSet[Int](2, abi, size_bytes)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingDevice.buffer_get_data, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[[2]uintptr](abi)
	abi.free()
	return mmm.Make[API, PackedByteArray, [2]uintptr](ctx, selfPtr.API, ret)
}

func (self RenderingDevice) RenderPipelineCreate(shader RID, framebuffer_format Int, vertex_format Int, primitive RenderingDeviceRenderPrimitive, rasterization_state RDPipelineRasterizationState, multisample_state RDPipelineMultisampleState, stencil_state RDPipelineDepthStencilState, color_blend_state RDPipelineColorBlendState, dynamic_state_flags RenderingDevicePipelineDynamicStateFlags, for_render_pass Int, specialization_constants ArrayOf[RDPipelineSpecializationConstant]) RID {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, shader)
	frameSet[Int](1, abi, framebuffer_format)
	frameSet[Int](2, abi, vertex_format)
	frameSet[RenderingDeviceRenderPrimitive](3, abi, primitive)
	frameSet[RDPipelineRasterizationState](4, abi, rasterization_state)
	frameSet[RDPipelineMultisampleState](5, abi, multisample_state)
	frameSet[RDPipelineDepthStencilState](6, abi, stencil_state)
	frameSet[RDPipelineColorBlendState](7, abi, color_blend_state)
	frameSet[RenderingDevicePipelineDynamicStateFlags](8, abi, dynamic_state_flags)
	frameSet[Int](9, abi, for_render_pass)
	frameSet[ArrayOf[RDPipelineSpecializationConstant]](10, abi, specialization_constants)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingDevice.render_pipeline_create, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[RID](abi)
	abi.free()
	return ret
}

func (self RenderingDevice) RenderPipelineIsValid(render_pipeline RID) bool {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, render_pipeline)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingDevice.render_pipeline_is_valid, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self RenderingDevice) ComputePipelineCreate(shader RID, specialization_constants ArrayOf[RDPipelineSpecializationConstant]) RID {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, shader)
	frameSet[ArrayOf[RDPipelineSpecializationConstant]](1, abi, specialization_constants)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingDevice.compute_pipeline_create, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[RID](abi)
	abi.free()
	return ret
}

func (self RenderingDevice) ComputePipelineIsValid(compute_pipeline RID) bool {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, compute_pipeline)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingDevice.compute_pipeline_is_valid, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self RenderingDevice) ScreenGetWidth(screen Int) Int {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Int](0, abi, screen)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingDevice.screen_get_width, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Int](abi)
	abi.free()
	return ret
}

func (self RenderingDevice) ScreenGetHeight(screen Int) Int {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Int](0, abi, screen)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingDevice.screen_get_height, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Int](abi)
	abi.free()
	return ret
}

func (self RenderingDevice) ScreenGetFramebufferFormat() Int {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingDevice.screen_get_framebuffer_format, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Int](abi)
	abi.free()
	return ret
}

func (self RenderingDevice) DrawListBeginForScreen(screen Int, clear_color Color) Int {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Int](0, abi, screen)
	frameSet[Color](1, abi, clear_color)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingDevice.draw_list_begin_for_screen, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Int](abi)
	abi.free()
	return ret
}

func (self RenderingDevice) DrawListBegin(framebuffer RID, initial_color_action RenderingDeviceInitialAction, final_color_action RenderingDeviceFinalAction, initial_depth_action RenderingDeviceInitialAction, final_depth_action RenderingDeviceFinalAction, clear_color_values PackedColorArray, clear_depth Float, clear_stencil Int, region Rect2, storage_textures ArrayOf[RID]) Int {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, framebuffer)
	frameSet[RenderingDeviceInitialAction](1, abi, initial_color_action)
	frameSet[RenderingDeviceFinalAction](2, abi, final_color_action)
	frameSet[RenderingDeviceInitialAction](3, abi, initial_depth_action)
	frameSet[RenderingDeviceFinalAction](4, abi, final_depth_action)
	frameSet[PackedColorArray](5, abi, clear_color_values)
	frameSet[Float](6, abi, clear_depth)
	frameSet[Int](7, abi, clear_stencil)
	frameSet[Rect2](8, abi, region)
	frameSet[ArrayOf[RID]](9, abi, storage_textures)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingDevice.draw_list_begin, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Int](abi)
	abi.free()
	return ret
}

func (self RenderingDevice) DrawListBeginSplit(ctx Context, framebuffer RID, splits Int, initial_color_action RenderingDeviceInitialAction, final_color_action RenderingDeviceFinalAction, initial_depth_action RenderingDeviceInitialAction, final_depth_action RenderingDeviceFinalAction, clear_color_values PackedColorArray, clear_depth Float, clear_stencil Int, region Rect2, storage_textures ArrayOf[RID]) PackedInt64Array {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, framebuffer)
	frameSet[Int](1, abi, splits)
	frameSet[RenderingDeviceInitialAction](2, abi, initial_color_action)
	frameSet[RenderingDeviceFinalAction](3, abi, final_color_action)
	frameSet[RenderingDeviceInitialAction](4, abi, initial_depth_action)
	frameSet[RenderingDeviceFinalAction](5, abi, final_depth_action)
	frameSet[PackedColorArray](6, abi, clear_color_values)
	frameSet[Float](7, abi, clear_depth)
	frameSet[Int](8, abi, clear_stencil)
	frameSet[Rect2](9, abi, region)
	frameSet[ArrayOf[RID]](10, abi, storage_textures)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingDevice.draw_list_begin_split, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[[2]uintptr](abi)
	abi.free()
	return mmm.Make[API, PackedInt64Array, [2]uintptr](ctx, selfPtr.API, ret)
}

func (self RenderingDevice) DrawListSetBlendConstants(draw_list Int, color Color) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Int](0, abi, draw_list)
	frameSet[Color](1, abi, color)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingDevice.draw_list_set_blend_constants, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self RenderingDevice) DrawListBindRenderPipeline(draw_list Int, render_pipeline RID) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Int](0, abi, draw_list)
	frameSet[RID](1, abi, render_pipeline)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingDevice.draw_list_bind_render_pipeline, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self RenderingDevice) DrawListBindUniformSet(draw_list Int, uniform_set RID, set_index Int) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Int](0, abi, draw_list)
	frameSet[RID](1, abi, uniform_set)
	frameSet[Int](2, abi, set_index)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingDevice.draw_list_bind_uniform_set, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self RenderingDevice) DrawListBindVertexArray(draw_list Int, vertex_array RID) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Int](0, abi, draw_list)
	frameSet[RID](1, abi, vertex_array)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingDevice.draw_list_bind_vertex_array, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self RenderingDevice) DrawListBindIndexArray(draw_list Int, index_array RID) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Int](0, abi, draw_list)
	frameSet[RID](1, abi, index_array)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingDevice.draw_list_bind_index_array, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self RenderingDevice) DrawListSetPushConstant(draw_list Int, buffer PackedByteArray, size_bytes Int) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Int](0, abi, draw_list)
	frameSet[PackedByteArray](1, abi, buffer)
	frameSet[Int](2, abi, size_bytes)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingDevice.draw_list_set_push_constant, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self RenderingDevice) DrawListDraw(draw_list Int, use_indices bool, instances Int, procedural_vertex_count Int) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Int](0, abi, draw_list)
	frameSet[bool](1, abi, use_indices)
	frameSet[Int](2, abi, instances)
	frameSet[Int](3, abi, procedural_vertex_count)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingDevice.draw_list_draw, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self RenderingDevice) DrawListEnableScissor(draw_list Int, rect Rect2) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Int](0, abi, draw_list)
	frameSet[Rect2](1, abi, rect)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingDevice.draw_list_enable_scissor, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self RenderingDevice) DrawListDisableScissor(draw_list Int) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Int](0, abi, draw_list)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingDevice.draw_list_disable_scissor, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self RenderingDevice) DrawListSwitchToNextPass() Int {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingDevice.draw_list_switch_to_next_pass, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Int](abi)
	abi.free()
	return ret
}

func (self RenderingDevice) DrawListSwitchToNextPassSplit(ctx Context, splits Int) PackedInt64Array {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Int](0, abi, splits)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingDevice.draw_list_switch_to_next_pass_split, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[[2]uintptr](abi)
	abi.free()
	return mmm.Make[API, PackedInt64Array, [2]uintptr](ctx, selfPtr.API, ret)
}

func (self RenderingDevice) DrawListEnd(post_barrier RenderingDeviceBarrierMask) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RenderingDeviceBarrierMask](0, abi, post_barrier)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingDevice.draw_list_end, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self RenderingDevice) ComputeListBegin(allow_draw_overlap bool) Int {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[bool](0, abi, allow_draw_overlap)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingDevice.compute_list_begin, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Int](abi)
	abi.free()
	return ret
}

func (self RenderingDevice) ComputeListBindComputePipeline(compute_list Int, compute_pipeline RID) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Int](0, abi, compute_list)
	frameSet[RID](1, abi, compute_pipeline)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingDevice.compute_list_bind_compute_pipeline, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self RenderingDevice) ComputeListSetPushConstant(compute_list Int, buffer PackedByteArray, size_bytes Int) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Int](0, abi, compute_list)
	frameSet[PackedByteArray](1, abi, buffer)
	frameSet[Int](2, abi, size_bytes)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingDevice.compute_list_set_push_constant, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self RenderingDevice) ComputeListBindUniformSet(compute_list Int, uniform_set RID, set_index Int) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Int](0, abi, compute_list)
	frameSet[RID](1, abi, uniform_set)
	frameSet[Int](2, abi, set_index)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingDevice.compute_list_bind_uniform_set, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self RenderingDevice) ComputeListDispatch(compute_list Int, x_groups Int, y_groups Int, z_groups Int) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Int](0, abi, compute_list)
	frameSet[Int](1, abi, x_groups)
	frameSet[Int](2, abi, y_groups)
	frameSet[Int](3, abi, z_groups)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingDevice.compute_list_dispatch, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self RenderingDevice) ComputeListAddBarrier(compute_list Int) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Int](0, abi, compute_list)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingDevice.compute_list_add_barrier, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self RenderingDevice) ComputeListEnd(post_barrier RenderingDeviceBarrierMask) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RenderingDeviceBarrierMask](0, abi, post_barrier)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingDevice.compute_list_end, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self RenderingDevice) FreeRid(rid RID) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, rid)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingDevice.free_rid, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self RenderingDevice) CaptureTimestamp(name String) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[String](0, abi, name)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingDevice.capture_timestamp, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self RenderingDevice) GetCapturedTimestampsCount() Int {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingDevice.get_captured_timestamps_count, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Int](abi)
	abi.free()
	return ret
}

func (self RenderingDevice) GetCapturedTimestampsFrame() Int {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingDevice.get_captured_timestamps_frame, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Int](abi)
	abi.free()
	return ret
}

func (self RenderingDevice) GetCapturedTimestampGpuTime(index Int) Int {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Int](0, abi, index)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingDevice.get_captured_timestamp_gpu_time, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Int](abi)
	abi.free()
	return ret
}

func (self RenderingDevice) GetCapturedTimestampCpuTime(index Int) Int {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Int](0, abi, index)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingDevice.get_captured_timestamp_cpu_time, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Int](abi)
	abi.free()
	return ret
}

func (self RenderingDevice) GetCapturedTimestampName(ctx Context, index Int) String {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Int](0, abi, index)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingDevice.get_captured_timestamp_name, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[uintptr](abi)
	abi.free()
	return mmm.Make[API, String, uintptr](ctx, selfPtr.API, ret)
}

func (self RenderingDevice) LimitGet(limit RenderingDeviceLimit) Int {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RenderingDeviceLimit](0, abi, limit)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingDevice.limit_get, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Int](abi)
	abi.free()
	return ret
}

func (self RenderingDevice) GetFrameDelay() Int {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingDevice.get_frame_delay, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Int](abi)
	abi.free()
	return ret
}

func (self RenderingDevice) Submit() {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingDevice.submit, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self RenderingDevice) Sync() {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingDevice.sync, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self RenderingDevice) Barrier(from RenderingDeviceBarrierMask, to RenderingDeviceBarrierMask) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RenderingDeviceBarrierMask](0, abi, from)
	frameSet[RenderingDeviceBarrierMask](1, abi, to)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingDevice.barrier, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self RenderingDevice) FullBarrier() {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingDevice.full_barrier, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self RenderingDevice) CreateLocalDevice() RenderingDevice {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingDevice.create_local_device, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[RenderingDevice](abi)
	abi.free()
	return ret
}

func (self RenderingDevice) SetResourceName(id RID, name String) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, id)
	frameSet[String](1, abi, name)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingDevice.set_resource_name, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self RenderingDevice) DrawCommandBeginLabel(name String, color Color) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[String](0, abi, name)
	frameSet[Color](1, abi, color)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingDevice.draw_command_begin_label, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self RenderingDevice) DrawCommandInsertLabel(name String, color Color) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[String](0, abi, name)
	frameSet[Color](1, abi, color)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingDevice.draw_command_insert_label, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self RenderingDevice) DrawCommandEndLabel() {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingDevice.draw_command_end_label, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self RenderingDevice) GetDeviceVendorName(ctx Context) String {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingDevice.get_device_vendor_name, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[uintptr](abi)
	abi.free()
	return mmm.Make[API, String, uintptr](ctx, selfPtr.API, ret)
}

func (self RenderingDevice) GetDeviceName(ctx Context) String {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingDevice.get_device_name, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[uintptr](abi)
	abi.free()
	return mmm.Make[API, String, uintptr](ctx, selfPtr.API, ret)
}

func (self RenderingDevice) GetDevicePipelineCacheUuid(ctx Context) String {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingDevice.get_device_pipeline_cache_uuid, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[uintptr](abi)
	abi.free()
	return mmm.Make[API, String, uintptr](ctx, selfPtr.API, ret)
}

func (self RenderingDevice) GetMemoryUsage(atype RenderingDeviceMemoryType) Int {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RenderingDeviceMemoryType](0, abi, atype)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingDevice.get_memory_usage, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Int](abi)
	abi.free()
	return ret
}

func (self RenderingDevice) GetDriverResource(resource RenderingDeviceDriverResource, rid RID, index Int) Int {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RenderingDeviceDriverResource](0, abi, resource)
	frameSet[RID](1, abi, rid)
	frameSet[Int](2, abi, index)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingDevice.get_driver_resource, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Int](abi)
	abi.free()
	return ret
}

func (self RenderingDevice) virtual(name string) reflect.Value {
	switch name {
	default:
		return self.Super().virtual(name)
	}
}

type RenderingServerTextureLayeredType int64

type RenderingServerCubeMapLayer int64

type RenderingServerShaderMode int64

type RenderingServerArrayType int64

type RenderingServerArrayCustomFormat int64

type RenderingServerArrayFormat int64

type RenderingServerPrimitiveType int64

type RenderingServerBlendShapeMode int64

type RenderingServerMultimeshTransformFormat int64

type RenderingServerLightProjectorFilter int64

type RenderingServerLightType int64

type RenderingServerLightParam int64

type RenderingServerLightBakeMode int64

type RenderingServerLightOmniShadowMode int64

type RenderingServerLightDirectionalShadowMode int64

type RenderingServerLightDirectionalSkyMode int64

type RenderingServerShadowQuality int64

type RenderingServerReflectionProbeUpdateMode int64

type RenderingServerReflectionProbeAmbientMode int64

type RenderingServerDecalTexture int64

type RenderingServerDecalFilter int64

type RenderingServerVoxelGIQuality int64

type RenderingServerParticlesMode int64

type RenderingServerParticlesTransformAlign int64

type RenderingServerParticlesDrawOrder int64

type RenderingServerParticlesCollisionType int64

type RenderingServerParticlesCollisionHeightfieldResolution int64

type RenderingServerFogVolumeShape int64

type RenderingServerViewportScaling3DMode int64

type RenderingServerViewportUpdateMode int64

type RenderingServerViewportClearMode int64

type RenderingServerViewportEnvironmentMode int64

type RenderingServerViewportSDFOversize int64

type RenderingServerViewportSDFScale int64

type RenderingServerViewportMSAA int64

type RenderingServerViewportScreenSpaceAA int64

type RenderingServerViewportOcclusionCullingBuildQuality int64

type RenderingServerViewportRenderInfo int64

type RenderingServerViewportRenderInfoType int64

type RenderingServerViewportDebugDraw int64

type RenderingServerViewportVRSMode int64

type RenderingServerSkyMode int64

type RenderingServerEnvironmentBG int64

type RenderingServerEnvironmentAmbientSource int64

type RenderingServerEnvironmentReflectionSource int64

type RenderingServerEnvironmentGlowBlendMode int64

type RenderingServerEnvironmentToneMapper int64

type RenderingServerEnvironmentSSRRoughnessQuality int64

type RenderingServerEnvironmentSSAOQuality int64

type RenderingServerEnvironmentSSILQuality int64

type RenderingServerEnvironmentSDFGIYScale int64

type RenderingServerEnvironmentSDFGIRayCount int64

type RenderingServerEnvironmentSDFGIFramesToConverge int64

type RenderingServerEnvironmentSDFGIFramesToUpdateLight int64

type RenderingServerSubSurfaceScatteringQuality int64

type RenderingServerDOFBokehShape int64

type RenderingServerDOFBlurQuality int64

type RenderingServerInstanceType int64

type RenderingServerInstanceFlags int64

type RenderingServerShadowCastingSetting int64

type RenderingServerVisibilityRangeFadeMode int64

type RenderingServerBakeChannels int64

type RenderingServerCanvasTextureChannel int64

type RenderingServerNinePatchAxisMode int64

type RenderingServerCanvasItemTextureFilter int64

type RenderingServerCanvasItemTextureRepeat int64

type RenderingServerCanvasGroupMode int64

type RenderingServerCanvasLightMode int64

type RenderingServerCanvasLightBlendMode int64

type RenderingServerCanvasLightShadowFilter int64

type RenderingServerCanvasOccluderPolygonCullMode int64

type RenderingServerGlobalShaderParameterType int64

type RenderingServerRenderingInfo int64

type RenderingServerFeatures int64
type RenderingServer struct{ Class[RenderingServer, Object] }

func (self RenderingServer) Object() Object { return *self.Super() }

func (self RenderingServer) isSingleton() {}

func (self RenderingServer) Texture2dCreate(image Image) RID {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Image](0, abi, image)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.texture_2d_create, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[RID](abi)
	abi.free()
	return ret
}

func (self RenderingServer) Texture2dLayeredCreate(layers ArrayOf[Image], layered_type RenderingServerTextureLayeredType) RID {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[ArrayOf[Image]](0, abi, layers)
	frameSet[RenderingServerTextureLayeredType](1, abi, layered_type)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.texture_2d_layered_create, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[RID](abi)
	abi.free()
	return ret
}

func (self RenderingServer) Texture3dCreate(format ImageFormat, width Int, height Int, depth Int, mipmaps bool, data ArrayOf[Image]) RID {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[ImageFormat](0, abi, format)
	frameSet[Int](1, abi, width)
	frameSet[Int](2, abi, height)
	frameSet[Int](3, abi, depth)
	frameSet[bool](4, abi, mipmaps)
	frameSet[ArrayOf[Image]](5, abi, data)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.texture_3d_create, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[RID](abi)
	abi.free()
	return ret
}

func (self RenderingServer) TextureProxyCreate(base RID) RID {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, base)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.texture_proxy_create, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[RID](abi)
	abi.free()
	return ret
}

func (self RenderingServer) Texture2dUpdate(texture RID, image Image, layer Int) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, texture)
	frameSet[Image](1, abi, image)
	frameSet[Int](2, abi, layer)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.texture_2d_update, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self RenderingServer) Texture3dUpdate(texture RID, data ArrayOf[Image]) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, texture)
	frameSet[ArrayOf[Image]](1, abi, data)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.texture_3d_update, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self RenderingServer) TextureProxyUpdate(texture RID, proxy_to RID) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, texture)
	frameSet[RID](1, abi, proxy_to)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.texture_proxy_update, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self RenderingServer) Texture2dPlaceholderCreate() RID {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.texture_2d_placeholder_create, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[RID](abi)
	abi.free()
	return ret
}

func (self RenderingServer) Texture2dLayeredPlaceholderCreate(layered_type RenderingServerTextureLayeredType) RID {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RenderingServerTextureLayeredType](0, abi, layered_type)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.texture_2d_layered_placeholder_create, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[RID](abi)
	abi.free()
	return ret
}

func (self RenderingServer) Texture3dPlaceholderCreate() RID {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.texture_3d_placeholder_create, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[RID](abi)
	abi.free()
	return ret
}

func (self RenderingServer) Texture2dGet(texture RID) Image {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, texture)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.texture_2d_get, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Image](abi)
	abi.free()
	return ret
}

func (self RenderingServer) Texture2dLayerGet(texture RID, layer Int) Image {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, texture)
	frameSet[Int](1, abi, layer)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.texture_2d_layer_get, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Image](abi)
	abi.free()
	return ret
}

func (self RenderingServer) Texture3dGet(texture RID) ArrayOf[Image] {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, texture)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.texture_3d_get, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[ArrayOf[Image]](abi)
	abi.free()
	return ret
}

func (self RenderingServer) TextureReplace(texture RID, by_texture RID) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, texture)
	frameSet[RID](1, abi, by_texture)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.texture_replace, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self RenderingServer) TextureSetSizeOverride(texture RID, width Int, height Int) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, texture)
	frameSet[Int](1, abi, width)
	frameSet[Int](2, abi, height)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.texture_set_size_override, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self RenderingServer) TextureSetPath(texture RID, path String) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, texture)
	frameSet[String](1, abi, path)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.texture_set_path, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self RenderingServer) TextureGetPath(ctx Context, texture RID) String {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, texture)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.texture_get_path, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[uintptr](abi)
	abi.free()
	return mmm.Make[API, String, uintptr](ctx, selfPtr.API, ret)
}

func (self RenderingServer) TextureGetFormat(texture RID) ImageFormat {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, texture)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.texture_get_format, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[ImageFormat](abi)
	abi.free()
	return ret
}

func (self RenderingServer) TextureSetForceRedrawIfVisible(texture RID, enable bool) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, texture)
	frameSet[bool](1, abi, enable)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.texture_set_force_redraw_if_visible, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self RenderingServer) TextureRdCreate(rd_texture RID, layer_type RenderingServerTextureLayeredType) RID {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, rd_texture)
	frameSet[RenderingServerTextureLayeredType](1, abi, layer_type)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.texture_rd_create, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[RID](abi)
	abi.free()
	return ret
}

func (self RenderingServer) TextureGetRdTexture(texture RID, srgb bool) RID {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, texture)
	frameSet[bool](1, abi, srgb)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.texture_get_rd_texture, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[RID](abi)
	abi.free()
	return ret
}

func (self RenderingServer) TextureGetNativeHandle(texture RID, srgb bool) Int {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, texture)
	frameSet[bool](1, abi, srgb)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.texture_get_native_handle, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Int](abi)
	abi.free()
	return ret
}

func (self RenderingServer) ShaderCreate() RID {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.shader_create, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[RID](abi)
	abi.free()
	return ret
}

func (self RenderingServer) ShaderSetCode(shader RID, code String) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, shader)
	frameSet[String](1, abi, code)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.shader_set_code, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self RenderingServer) ShaderSetPathHint(shader RID, path String) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, shader)
	frameSet[String](1, abi, path)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.shader_set_path_hint, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self RenderingServer) ShaderGetCode(ctx Context, shader RID) String {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, shader)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.shader_get_code, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[uintptr](abi)
	abi.free()
	return mmm.Make[API, String, uintptr](ctx, selfPtr.API, ret)
}

func (self RenderingServer) GetShaderParameterList(shader RID) ArrayOf[Dictionary] {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, shader)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.get_shader_parameter_list, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[ArrayOf[Dictionary]](abi)
	abi.free()
	return ret
}

func (self RenderingServer) ShaderGetParameterDefault(ctx Context, shader RID, name StringName) Variant {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, shader)
	frameSet[StringName](1, abi, name)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.shader_get_parameter_default, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[[3]uintptr](abi)
	abi.free()
	return mmm.Make[API, Variant, [3]uintptr](ctx, selfPtr.API, ret)
}

func (self RenderingServer) ShaderSetDefaultTextureParameter(shader RID, name StringName, texture RID, index Int) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, shader)
	frameSet[StringName](1, abi, name)
	frameSet[RID](2, abi, texture)
	frameSet[Int](3, abi, index)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.shader_set_default_texture_parameter, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self RenderingServer) ShaderGetDefaultTextureParameter(shader RID, name StringName, index Int) RID {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, shader)
	frameSet[StringName](1, abi, name)
	frameSet[Int](2, abi, index)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.shader_get_default_texture_parameter, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[RID](abi)
	abi.free()
	return ret
}

func (self RenderingServer) MaterialCreate() RID {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.material_create, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[RID](abi)
	abi.free()
	return ret
}

func (self RenderingServer) MaterialSetShader(shader_material RID, shader RID) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, shader_material)
	frameSet[RID](1, abi, shader)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.material_set_shader, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self RenderingServer) MaterialSetParam(material RID, parameter StringName, value Variant) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, material)
	frameSet[StringName](1, abi, parameter)
	frameSet[Variant](2, abi, value)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.material_set_param, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self RenderingServer) MaterialGetParam(ctx Context, material RID, parameter StringName) Variant {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, material)
	frameSet[StringName](1, abi, parameter)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.material_get_param, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[[3]uintptr](abi)
	abi.free()
	return mmm.Make[API, Variant, [3]uintptr](ctx, selfPtr.API, ret)
}

func (self RenderingServer) MaterialSetRenderPriority(material RID, priority Int) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, material)
	frameSet[Int](1, abi, priority)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.material_set_render_priority, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self RenderingServer) MaterialSetNextPass(material RID, next_material RID) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, material)
	frameSet[RID](1, abi, next_material)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.material_set_next_pass, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self RenderingServer) MeshCreateFromSurfaces(surfaces ArrayOf[Dictionary], blend_shape_count Int) RID {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[ArrayOf[Dictionary]](0, abi, surfaces)
	frameSet[Int](1, abi, blend_shape_count)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.mesh_create_from_surfaces, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[RID](abi)
	abi.free()
	return ret
}

func (self RenderingServer) MeshCreate() RID {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.mesh_create, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[RID](abi)
	abi.free()
	return ret
}

func (self RenderingServer) MeshSurfaceGetFormatOffset(format RenderingServerArrayFormat, vertex_count Int, array_index Int) Int {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RenderingServerArrayFormat](0, abi, format)
	frameSet[Int](1, abi, vertex_count)
	frameSet[Int](2, abi, array_index)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.mesh_surface_get_format_offset, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Int](abi)
	abi.free()
	return ret
}

func (self RenderingServer) MeshSurfaceGetFormatVertexStride(format RenderingServerArrayFormat, vertex_count Int) Int {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RenderingServerArrayFormat](0, abi, format)
	frameSet[Int](1, abi, vertex_count)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.mesh_surface_get_format_vertex_stride, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Int](abi)
	abi.free()
	return ret
}

func (self RenderingServer) MeshSurfaceGetFormatNormalTangentStride(format RenderingServerArrayFormat, vertex_count Int) Int {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RenderingServerArrayFormat](0, abi, format)
	frameSet[Int](1, abi, vertex_count)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.mesh_surface_get_format_normal_tangent_stride, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Int](abi)
	abi.free()
	return ret
}

func (self RenderingServer) MeshSurfaceGetFormatAttributeStride(format RenderingServerArrayFormat, vertex_count Int) Int {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RenderingServerArrayFormat](0, abi, format)
	frameSet[Int](1, abi, vertex_count)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.mesh_surface_get_format_attribute_stride, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Int](abi)
	abi.free()
	return ret
}

func (self RenderingServer) MeshSurfaceGetFormatSkinStride(format RenderingServerArrayFormat, vertex_count Int) Int {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RenderingServerArrayFormat](0, abi, format)
	frameSet[Int](1, abi, vertex_count)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.mesh_surface_get_format_skin_stride, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Int](abi)
	abi.free()
	return ret
}

func (self RenderingServer) MeshAddSurface(mesh RID, surface Dictionary) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, mesh)
	frameSet[Dictionary](1, abi, surface)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.mesh_add_surface, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self RenderingServer) MeshAddSurfaceFromArrays(mesh RID, primitive RenderingServerPrimitiveType, arrays Array, blend_shapes Array, lods Dictionary, compress_format RenderingServerArrayFormat) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, mesh)
	frameSet[RenderingServerPrimitiveType](1, abi, primitive)
	frameSet[Array](2, abi, arrays)
	frameSet[Array](3, abi, blend_shapes)
	frameSet[Dictionary](4, abi, lods)
	frameSet[RenderingServerArrayFormat](5, abi, compress_format)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.mesh_add_surface_from_arrays, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self RenderingServer) MeshGetBlendShapeCount(mesh RID) Int {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, mesh)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.mesh_get_blend_shape_count, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Int](abi)
	abi.free()
	return ret
}

func (self RenderingServer) MeshSetBlendShapeMode(mesh RID, mode RenderingServerBlendShapeMode) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, mesh)
	frameSet[RenderingServerBlendShapeMode](1, abi, mode)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.mesh_set_blend_shape_mode, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self RenderingServer) MeshGetBlendShapeMode(mesh RID) RenderingServerBlendShapeMode {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, mesh)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.mesh_get_blend_shape_mode, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[RenderingServerBlendShapeMode](abi)
	abi.free()
	return ret
}

func (self RenderingServer) MeshSurfaceSetMaterial(mesh RID, surface Int, material RID) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, mesh)
	frameSet[Int](1, abi, surface)
	frameSet[RID](2, abi, material)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.mesh_surface_set_material, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self RenderingServer) MeshSurfaceGetMaterial(mesh RID, surface Int) RID {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, mesh)
	frameSet[Int](1, abi, surface)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.mesh_surface_get_material, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[RID](abi)
	abi.free()
	return ret
}

func (self RenderingServer) MeshGetSurface(ctx Context, mesh RID, surface Int) Dictionary {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, mesh)
	frameSet[Int](1, abi, surface)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.mesh_get_surface, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[uintptr](abi)
	abi.free()
	return mmm.Make[API, Dictionary, uintptr](ctx, selfPtr.API, ret)
}

func (self RenderingServer) MeshSurfaceGetArrays(ctx Context, mesh RID, surface Int) Array {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, mesh)
	frameSet[Int](1, abi, surface)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.mesh_surface_get_arrays, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[uintptr](abi)
	abi.free()
	return mmm.Make[API, Array, uintptr](ctx, selfPtr.API, ret)
}

func (self RenderingServer) MeshSurfaceGetBlendShapeArrays(mesh RID, surface Int) ArrayOf[Array] {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, mesh)
	frameSet[Int](1, abi, surface)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.mesh_surface_get_blend_shape_arrays, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[ArrayOf[Array]](abi)
	abi.free()
	return ret
}

func (self RenderingServer) MeshGetSurfaceCount(mesh RID) Int {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, mesh)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.mesh_get_surface_count, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Int](abi)
	abi.free()
	return ret
}

func (self RenderingServer) MeshSetCustomAabb(mesh RID, aabb AABB) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, mesh)
	frameSet[AABB](1, abi, aabb)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.mesh_set_custom_aabb, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self RenderingServer) MeshGetCustomAabb(mesh RID) AABB {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, mesh)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.mesh_get_custom_aabb, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[AABB](abi)
	abi.free()
	return ret
}

func (self RenderingServer) MeshClear(mesh RID) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, mesh)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.mesh_clear, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self RenderingServer) MeshSurfaceUpdateVertexRegion(mesh RID, surface Int, offset Int, data PackedByteArray) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, mesh)
	frameSet[Int](1, abi, surface)
	frameSet[Int](2, abi, offset)
	frameSet[PackedByteArray](3, abi, data)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.mesh_surface_update_vertex_region, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self RenderingServer) MeshSurfaceUpdateAttributeRegion(mesh RID, surface Int, offset Int, data PackedByteArray) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, mesh)
	frameSet[Int](1, abi, surface)
	frameSet[Int](2, abi, offset)
	frameSet[PackedByteArray](3, abi, data)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.mesh_surface_update_attribute_region, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self RenderingServer) MeshSurfaceUpdateSkinRegion(mesh RID, surface Int, offset Int, data PackedByteArray) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, mesh)
	frameSet[Int](1, abi, surface)
	frameSet[Int](2, abi, offset)
	frameSet[PackedByteArray](3, abi, data)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.mesh_surface_update_skin_region, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self RenderingServer) MeshSetShadowMesh(mesh RID, shadow_mesh RID) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, mesh)
	frameSet[RID](1, abi, shadow_mesh)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.mesh_set_shadow_mesh, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self RenderingServer) MultimeshCreate() RID {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.multimesh_create, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[RID](abi)
	abi.free()
	return ret
}

func (self RenderingServer) MultimeshAllocateData(multimesh RID, instances Int, transform_format RenderingServerMultimeshTransformFormat, color_format bool, custom_data_format bool) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, multimesh)
	frameSet[Int](1, abi, instances)
	frameSet[RenderingServerMultimeshTransformFormat](2, abi, transform_format)
	frameSet[bool](3, abi, color_format)
	frameSet[bool](4, abi, custom_data_format)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.multimesh_allocate_data, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self RenderingServer) MultimeshGetInstanceCount(multimesh RID) Int {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, multimesh)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.multimesh_get_instance_count, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Int](abi)
	abi.free()
	return ret
}

func (self RenderingServer) MultimeshSetMesh(multimesh RID, mesh RID) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, multimesh)
	frameSet[RID](1, abi, mesh)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.multimesh_set_mesh, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self RenderingServer) MultimeshInstanceSetTransform(multimesh RID, index Int, transform Transform3D) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, multimesh)
	frameSet[Int](1, abi, index)
	frameSet[Transform3D](2, abi, transform)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.multimesh_instance_set_transform, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self RenderingServer) MultimeshInstanceSetTransform2d(multimesh RID, index Int, transform Transform2D) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, multimesh)
	frameSet[Int](1, abi, index)
	frameSet[Transform2D](2, abi, transform)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.multimesh_instance_set_transform_2d, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self RenderingServer) MultimeshInstanceSetColor(multimesh RID, index Int, color Color) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, multimesh)
	frameSet[Int](1, abi, index)
	frameSet[Color](2, abi, color)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.multimesh_instance_set_color, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self RenderingServer) MultimeshInstanceSetCustomData(multimesh RID, index Int, custom_data Color) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, multimesh)
	frameSet[Int](1, abi, index)
	frameSet[Color](2, abi, custom_data)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.multimesh_instance_set_custom_data, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self RenderingServer) MultimeshGetMesh(multimesh RID) RID {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, multimesh)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.multimesh_get_mesh, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[RID](abi)
	abi.free()
	return ret
}

func (self RenderingServer) MultimeshGetAabb(multimesh RID) AABB {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, multimesh)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.multimesh_get_aabb, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[AABB](abi)
	abi.free()
	return ret
}

func (self RenderingServer) MultimeshInstanceGetTransform(multimesh RID, index Int) Transform3D {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, multimesh)
	frameSet[Int](1, abi, index)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.multimesh_instance_get_transform, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Transform3D](abi)
	abi.free()
	return ret
}

func (self RenderingServer) MultimeshInstanceGetTransform2d(multimesh RID, index Int) Transform2D {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, multimesh)
	frameSet[Int](1, abi, index)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.multimesh_instance_get_transform_2d, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Transform2D](abi)
	abi.free()
	return ret
}

func (self RenderingServer) MultimeshInstanceGetColor(multimesh RID, index Int) Color {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, multimesh)
	frameSet[Int](1, abi, index)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.multimesh_instance_get_color, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Color](abi)
	abi.free()
	return ret
}

func (self RenderingServer) MultimeshInstanceGetCustomData(multimesh RID, index Int) Color {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, multimesh)
	frameSet[Int](1, abi, index)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.multimesh_instance_get_custom_data, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Color](abi)
	abi.free()
	return ret
}

func (self RenderingServer) MultimeshSetVisibleInstances(multimesh RID, visible Int) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, multimesh)
	frameSet[Int](1, abi, visible)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.multimesh_set_visible_instances, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self RenderingServer) MultimeshGetVisibleInstances(multimesh RID) Int {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, multimesh)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.multimesh_get_visible_instances, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Int](abi)
	abi.free()
	return ret
}

func (self RenderingServer) MultimeshSetBuffer(multimesh RID, buffer PackedFloat32Array) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, multimesh)
	frameSet[PackedFloat32Array](1, abi, buffer)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.multimesh_set_buffer, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self RenderingServer) MultimeshGetBuffer(ctx Context, multimesh RID) PackedFloat32Array {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, multimesh)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.multimesh_get_buffer, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[[2]uintptr](abi)
	abi.free()
	return mmm.Make[API, PackedFloat32Array, [2]uintptr](ctx, selfPtr.API, ret)
}

func (self RenderingServer) SkeletonCreate() RID {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.skeleton_create, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[RID](abi)
	abi.free()
	return ret
}

func (self RenderingServer) SkeletonAllocateData(skeleton RID, bones Int, is_2d_skeleton bool) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, skeleton)
	frameSet[Int](1, abi, bones)
	frameSet[bool](2, abi, is_2d_skeleton)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.skeleton_allocate_data, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self RenderingServer) SkeletonGetBoneCount(skeleton RID) Int {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, skeleton)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.skeleton_get_bone_count, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Int](abi)
	abi.free()
	return ret
}

func (self RenderingServer) SkeletonBoneSetTransform(skeleton RID, bone Int, transform Transform3D) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, skeleton)
	frameSet[Int](1, abi, bone)
	frameSet[Transform3D](2, abi, transform)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.skeleton_bone_set_transform, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self RenderingServer) SkeletonBoneGetTransform(skeleton RID, bone Int) Transform3D {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, skeleton)
	frameSet[Int](1, abi, bone)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.skeleton_bone_get_transform, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Transform3D](abi)
	abi.free()
	return ret
}

func (self RenderingServer) SkeletonBoneSetTransform2d(skeleton RID, bone Int, transform Transform2D) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, skeleton)
	frameSet[Int](1, abi, bone)
	frameSet[Transform2D](2, abi, transform)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.skeleton_bone_set_transform_2d, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self RenderingServer) SkeletonBoneGetTransform2d(skeleton RID, bone Int) Transform2D {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, skeleton)
	frameSet[Int](1, abi, bone)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.skeleton_bone_get_transform_2d, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Transform2D](abi)
	abi.free()
	return ret
}

func (self RenderingServer) SkeletonSetBaseTransform2d(skeleton RID, base_transform Transform2D) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, skeleton)
	frameSet[Transform2D](1, abi, base_transform)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.skeleton_set_base_transform_2d, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self RenderingServer) DirectionalLightCreate() RID {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.directional_light_create, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[RID](abi)
	abi.free()
	return ret
}

func (self RenderingServer) OmniLightCreate() RID {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.omni_light_create, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[RID](abi)
	abi.free()
	return ret
}

func (self RenderingServer) SpotLightCreate() RID {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.spot_light_create, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[RID](abi)
	abi.free()
	return ret
}

func (self RenderingServer) LightSetColor(light RID, color Color) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, light)
	frameSet[Color](1, abi, color)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.light_set_color, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self RenderingServer) LightSetParam(light RID, param RenderingServerLightParam, value Float) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, light)
	frameSet[RenderingServerLightParam](1, abi, param)
	frameSet[Float](2, abi, value)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.light_set_param, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self RenderingServer) LightSetShadow(light RID, enabled bool) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, light)
	frameSet[bool](1, abi, enabled)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.light_set_shadow, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self RenderingServer) LightSetProjector(light RID, texture RID) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, light)
	frameSet[RID](1, abi, texture)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.light_set_projector, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self RenderingServer) LightSetNegative(light RID, enable bool) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, light)
	frameSet[bool](1, abi, enable)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.light_set_negative, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self RenderingServer) LightSetCullMask(light RID, mask Int) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, light)
	frameSet[Int](1, abi, mask)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.light_set_cull_mask, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self RenderingServer) LightSetDistanceFade(decal RID, enabled bool, begin Float, shadow Float, length Float) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, decal)
	frameSet[bool](1, abi, enabled)
	frameSet[Float](2, abi, begin)
	frameSet[Float](3, abi, shadow)
	frameSet[Float](4, abi, length)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.light_set_distance_fade, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self RenderingServer) LightSetReverseCullFaceMode(light RID, enabled bool) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, light)
	frameSet[bool](1, abi, enabled)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.light_set_reverse_cull_face_mode, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self RenderingServer) LightSetBakeMode(light RID, bake_mode RenderingServerLightBakeMode) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, light)
	frameSet[RenderingServerLightBakeMode](1, abi, bake_mode)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.light_set_bake_mode, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self RenderingServer) LightSetMaxSdfgiCascade(light RID, cascade Int) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, light)
	frameSet[Int](1, abi, cascade)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.light_set_max_sdfgi_cascade, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self RenderingServer) LightOmniSetShadowMode(light RID, mode RenderingServerLightOmniShadowMode) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, light)
	frameSet[RenderingServerLightOmniShadowMode](1, abi, mode)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.light_omni_set_shadow_mode, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self RenderingServer) LightDirectionalSetShadowMode(light RID, mode RenderingServerLightDirectionalShadowMode) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, light)
	frameSet[RenderingServerLightDirectionalShadowMode](1, abi, mode)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.light_directional_set_shadow_mode, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self RenderingServer) LightDirectionalSetBlendSplits(light RID, enable bool) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, light)
	frameSet[bool](1, abi, enable)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.light_directional_set_blend_splits, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self RenderingServer) LightDirectionalSetSkyMode(light RID, mode RenderingServerLightDirectionalSkyMode) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, light)
	frameSet[RenderingServerLightDirectionalSkyMode](1, abi, mode)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.light_directional_set_sky_mode, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self RenderingServer) LightProjectorsSetFilter(filter RenderingServerLightProjectorFilter) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RenderingServerLightProjectorFilter](0, abi, filter)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.light_projectors_set_filter, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self RenderingServer) PositionalSoftShadowFilterSetQuality(quality RenderingServerShadowQuality) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RenderingServerShadowQuality](0, abi, quality)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.positional_soft_shadow_filter_set_quality, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self RenderingServer) DirectionalSoftShadowFilterSetQuality(quality RenderingServerShadowQuality) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RenderingServerShadowQuality](0, abi, quality)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.directional_soft_shadow_filter_set_quality, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self RenderingServer) DirectionalShadowAtlasSetSize(size Int, is_16bits bool) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Int](0, abi, size)
	frameSet[bool](1, abi, is_16bits)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.directional_shadow_atlas_set_size, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self RenderingServer) ReflectionProbeCreate() RID {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.reflection_probe_create, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[RID](abi)
	abi.free()
	return ret
}

func (self RenderingServer) ReflectionProbeSetUpdateMode(probe RID, mode RenderingServerReflectionProbeUpdateMode) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, probe)
	frameSet[RenderingServerReflectionProbeUpdateMode](1, abi, mode)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.reflection_probe_set_update_mode, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self RenderingServer) ReflectionProbeSetIntensity(probe RID, intensity Float) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, probe)
	frameSet[Float](1, abi, intensity)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.reflection_probe_set_intensity, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self RenderingServer) ReflectionProbeSetAmbientMode(probe RID, mode RenderingServerReflectionProbeAmbientMode) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, probe)
	frameSet[RenderingServerReflectionProbeAmbientMode](1, abi, mode)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.reflection_probe_set_ambient_mode, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self RenderingServer) ReflectionProbeSetAmbientColor(probe RID, color Color) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, probe)
	frameSet[Color](1, abi, color)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.reflection_probe_set_ambient_color, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self RenderingServer) ReflectionProbeSetAmbientEnergy(probe RID, energy Float) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, probe)
	frameSet[Float](1, abi, energy)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.reflection_probe_set_ambient_energy, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self RenderingServer) ReflectionProbeSetMaxDistance(probe RID, distance Float) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, probe)
	frameSet[Float](1, abi, distance)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.reflection_probe_set_max_distance, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self RenderingServer) ReflectionProbeSetSize(probe RID, size Vector3) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, probe)
	frameSet[Vector3](1, abi, size)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.reflection_probe_set_size, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self RenderingServer) ReflectionProbeSetOriginOffset(probe RID, offset Vector3) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, probe)
	frameSet[Vector3](1, abi, offset)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.reflection_probe_set_origin_offset, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self RenderingServer) ReflectionProbeSetAsInterior(probe RID, enable bool) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, probe)
	frameSet[bool](1, abi, enable)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.reflection_probe_set_as_interior, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self RenderingServer) ReflectionProbeSetEnableBoxProjection(probe RID, enable bool) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, probe)
	frameSet[bool](1, abi, enable)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.reflection_probe_set_enable_box_projection, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self RenderingServer) ReflectionProbeSetEnableShadows(probe RID, enable bool) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, probe)
	frameSet[bool](1, abi, enable)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.reflection_probe_set_enable_shadows, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self RenderingServer) ReflectionProbeSetCullMask(probe RID, layers Int) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, probe)
	frameSet[Int](1, abi, layers)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.reflection_probe_set_cull_mask, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self RenderingServer) ReflectionProbeSetResolution(probe RID, resolution Int) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, probe)
	frameSet[Int](1, abi, resolution)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.reflection_probe_set_resolution, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self RenderingServer) ReflectionProbeSetMeshLodThreshold(probe RID, pixels Float) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, probe)
	frameSet[Float](1, abi, pixels)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.reflection_probe_set_mesh_lod_threshold, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self RenderingServer) DecalCreate() RID {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.decal_create, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[RID](abi)
	abi.free()
	return ret
}

func (self RenderingServer) DecalSetSize(decal RID, size Vector3) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, decal)
	frameSet[Vector3](1, abi, size)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.decal_set_size, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self RenderingServer) DecalSetTexture(decal RID, atype RenderingServerDecalTexture, texture RID) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, decal)
	frameSet[RenderingServerDecalTexture](1, abi, atype)
	frameSet[RID](2, abi, texture)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.decal_set_texture, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self RenderingServer) DecalSetEmissionEnergy(decal RID, energy Float) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, decal)
	frameSet[Float](1, abi, energy)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.decal_set_emission_energy, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self RenderingServer) DecalSetAlbedoMix(decal RID, albedo_mix Float) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, decal)
	frameSet[Float](1, abi, albedo_mix)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.decal_set_albedo_mix, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self RenderingServer) DecalSetModulate(decal RID, color Color) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, decal)
	frameSet[Color](1, abi, color)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.decal_set_modulate, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self RenderingServer) DecalSetCullMask(decal RID, mask Int) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, decal)
	frameSet[Int](1, abi, mask)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.decal_set_cull_mask, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self RenderingServer) DecalSetDistanceFade(decal RID, enabled bool, begin Float, length Float) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, decal)
	frameSet[bool](1, abi, enabled)
	frameSet[Float](2, abi, begin)
	frameSet[Float](3, abi, length)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.decal_set_distance_fade, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self RenderingServer) DecalSetFade(decal RID, above Float, below Float) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, decal)
	frameSet[Float](1, abi, above)
	frameSet[Float](2, abi, below)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.decal_set_fade, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self RenderingServer) DecalSetNormalFade(decal RID, fade Float) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, decal)
	frameSet[Float](1, abi, fade)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.decal_set_normal_fade, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self RenderingServer) DecalsSetFilter(filter RenderingServerDecalFilter) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RenderingServerDecalFilter](0, abi, filter)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.decals_set_filter, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self RenderingServer) GiSetUseHalfResolution(half_resolution bool) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[bool](0, abi, half_resolution)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.gi_set_use_half_resolution, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self RenderingServer) VoxelGiCreate() RID {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.voxel_gi_create, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[RID](abi)
	abi.free()
	return ret
}

func (self RenderingServer) VoxelGiAllocateData(voxel_gi RID, to_cell_xform Transform3D, aabb AABB, octree_size Vector3i, octree_cells PackedByteArray, data_cells PackedByteArray, distance_field PackedByteArray, level_counts PackedInt32Array) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, voxel_gi)
	frameSet[Transform3D](1, abi, to_cell_xform)
	frameSet[AABB](2, abi, aabb)
	frameSet[Vector3i](3, abi, octree_size)
	frameSet[PackedByteArray](4, abi, octree_cells)
	frameSet[PackedByteArray](5, abi, data_cells)
	frameSet[PackedByteArray](6, abi, distance_field)
	frameSet[PackedInt32Array](7, abi, level_counts)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.voxel_gi_allocate_data, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self RenderingServer) VoxelGiGetOctreeSize(voxel_gi RID) Vector3i {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, voxel_gi)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.voxel_gi_get_octree_size, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Vector3i](abi)
	abi.free()
	return ret
}

func (self RenderingServer) VoxelGiGetOctreeCells(ctx Context, voxel_gi RID) PackedByteArray {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, voxel_gi)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.voxel_gi_get_octree_cells, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[[2]uintptr](abi)
	abi.free()
	return mmm.Make[API, PackedByteArray, [2]uintptr](ctx, selfPtr.API, ret)
}

func (self RenderingServer) VoxelGiGetDataCells(ctx Context, voxel_gi RID) PackedByteArray {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, voxel_gi)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.voxel_gi_get_data_cells, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[[2]uintptr](abi)
	abi.free()
	return mmm.Make[API, PackedByteArray, [2]uintptr](ctx, selfPtr.API, ret)
}

func (self RenderingServer) VoxelGiGetDistanceField(ctx Context, voxel_gi RID) PackedByteArray {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, voxel_gi)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.voxel_gi_get_distance_field, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[[2]uintptr](abi)
	abi.free()
	return mmm.Make[API, PackedByteArray, [2]uintptr](ctx, selfPtr.API, ret)
}

func (self RenderingServer) VoxelGiGetLevelCounts(ctx Context, voxel_gi RID) PackedInt32Array {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, voxel_gi)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.voxel_gi_get_level_counts, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[[2]uintptr](abi)
	abi.free()
	return mmm.Make[API, PackedInt32Array, [2]uintptr](ctx, selfPtr.API, ret)
}

func (self RenderingServer) VoxelGiGetToCellXform(voxel_gi RID) Transform3D {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, voxel_gi)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.voxel_gi_get_to_cell_xform, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Transform3D](abi)
	abi.free()
	return ret
}

func (self RenderingServer) VoxelGiSetDynamicRange(voxel_gi RID, arange Float) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, voxel_gi)
	frameSet[Float](1, abi, arange)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.voxel_gi_set_dynamic_range, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self RenderingServer) VoxelGiSetPropagation(voxel_gi RID, amount Float) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, voxel_gi)
	frameSet[Float](1, abi, amount)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.voxel_gi_set_propagation, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self RenderingServer) VoxelGiSetEnergy(voxel_gi RID, energy Float) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, voxel_gi)
	frameSet[Float](1, abi, energy)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.voxel_gi_set_energy, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self RenderingServer) VoxelGiSetBakedExposureNormalization(voxel_gi RID, baked_exposure Float) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, voxel_gi)
	frameSet[Float](1, abi, baked_exposure)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.voxel_gi_set_baked_exposure_normalization, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self RenderingServer) VoxelGiSetBias(voxel_gi RID, bias Float) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, voxel_gi)
	frameSet[Float](1, abi, bias)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.voxel_gi_set_bias, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self RenderingServer) VoxelGiSetNormalBias(voxel_gi RID, bias Float) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, voxel_gi)
	frameSet[Float](1, abi, bias)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.voxel_gi_set_normal_bias, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self RenderingServer) VoxelGiSetInterior(voxel_gi RID, enable bool) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, voxel_gi)
	frameSet[bool](1, abi, enable)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.voxel_gi_set_interior, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self RenderingServer) VoxelGiSetUseTwoBounces(voxel_gi RID, enable bool) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, voxel_gi)
	frameSet[bool](1, abi, enable)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.voxel_gi_set_use_two_bounces, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self RenderingServer) VoxelGiSetQuality(quality RenderingServerVoxelGIQuality) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RenderingServerVoxelGIQuality](0, abi, quality)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.voxel_gi_set_quality, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self RenderingServer) LightmapCreate() RID {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.lightmap_create, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[RID](abi)
	abi.free()
	return ret
}

func (self RenderingServer) LightmapSetTextures(lightmap RID, light RID, uses_sh bool) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, lightmap)
	frameSet[RID](1, abi, light)
	frameSet[bool](2, abi, uses_sh)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.lightmap_set_textures, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self RenderingServer) LightmapSetProbeBounds(lightmap RID, bounds AABB) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, lightmap)
	frameSet[AABB](1, abi, bounds)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.lightmap_set_probe_bounds, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self RenderingServer) LightmapSetProbeInterior(lightmap RID, interior bool) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, lightmap)
	frameSet[bool](1, abi, interior)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.lightmap_set_probe_interior, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self RenderingServer) LightmapSetProbeCaptureData(lightmap RID, points PackedVector3Array, point_sh PackedColorArray, tetrahedra PackedInt32Array, bsp_tree PackedInt32Array) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, lightmap)
	frameSet[PackedVector3Array](1, abi, points)
	frameSet[PackedColorArray](2, abi, point_sh)
	frameSet[PackedInt32Array](3, abi, tetrahedra)
	frameSet[PackedInt32Array](4, abi, bsp_tree)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.lightmap_set_probe_capture_data, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self RenderingServer) LightmapGetProbeCapturePoints(ctx Context, lightmap RID) PackedVector3Array {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, lightmap)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.lightmap_get_probe_capture_points, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[[2]uintptr](abi)
	abi.free()
	return mmm.Make[API, PackedVector3Array, [2]uintptr](ctx, selfPtr.API, ret)
}

func (self RenderingServer) LightmapGetProbeCaptureSh(ctx Context, lightmap RID) PackedColorArray {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, lightmap)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.lightmap_get_probe_capture_sh, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[[2]uintptr](abi)
	abi.free()
	return mmm.Make[API, PackedColorArray, [2]uintptr](ctx, selfPtr.API, ret)
}

func (self RenderingServer) LightmapGetProbeCaptureTetrahedra(ctx Context, lightmap RID) PackedInt32Array {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, lightmap)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.lightmap_get_probe_capture_tetrahedra, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[[2]uintptr](abi)
	abi.free()
	return mmm.Make[API, PackedInt32Array, [2]uintptr](ctx, selfPtr.API, ret)
}

func (self RenderingServer) LightmapGetProbeCaptureBspTree(ctx Context, lightmap RID) PackedInt32Array {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, lightmap)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.lightmap_get_probe_capture_bsp_tree, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[[2]uintptr](abi)
	abi.free()
	return mmm.Make[API, PackedInt32Array, [2]uintptr](ctx, selfPtr.API, ret)
}

func (self RenderingServer) LightmapSetBakedExposureNormalization(lightmap RID, baked_exposure Float) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, lightmap)
	frameSet[Float](1, abi, baked_exposure)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.lightmap_set_baked_exposure_normalization, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self RenderingServer) LightmapSetProbeCaptureUpdateSpeed(speed Float) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Float](0, abi, speed)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.lightmap_set_probe_capture_update_speed, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self RenderingServer) ParticlesCreate() RID {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.particles_create, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[RID](abi)
	abi.free()
	return ret
}

func (self RenderingServer) ParticlesSetMode(particles RID, mode RenderingServerParticlesMode) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, particles)
	frameSet[RenderingServerParticlesMode](1, abi, mode)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.particles_set_mode, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self RenderingServer) ParticlesSetEmitting(particles RID, emitting bool) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, particles)
	frameSet[bool](1, abi, emitting)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.particles_set_emitting, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self RenderingServer) ParticlesGetEmitting(particles RID) bool {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, particles)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.particles_get_emitting, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self RenderingServer) ParticlesSetAmount(particles RID, amount Int) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, particles)
	frameSet[Int](1, abi, amount)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.particles_set_amount, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self RenderingServer) ParticlesSetAmountRatio(particles RID, ratio Float) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, particles)
	frameSet[Float](1, abi, ratio)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.particles_set_amount_ratio, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self RenderingServer) ParticlesSetLifetime(particles RID, lifetime Float) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, particles)
	frameSet[Float](1, abi, lifetime)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.particles_set_lifetime, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self RenderingServer) ParticlesSetOneShot(particles RID, one_shot bool) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, particles)
	frameSet[bool](1, abi, one_shot)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.particles_set_one_shot, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self RenderingServer) ParticlesSetPreProcessTime(particles RID, time Float) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, particles)
	frameSet[Float](1, abi, time)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.particles_set_pre_process_time, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self RenderingServer) ParticlesSetExplosivenessRatio(particles RID, ratio Float) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, particles)
	frameSet[Float](1, abi, ratio)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.particles_set_explosiveness_ratio, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self RenderingServer) ParticlesSetRandomnessRatio(particles RID, ratio Float) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, particles)
	frameSet[Float](1, abi, ratio)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.particles_set_randomness_ratio, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self RenderingServer) ParticlesSetInterpToEnd(particles RID, factor Float) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, particles)
	frameSet[Float](1, abi, factor)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.particles_set_interp_to_end, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self RenderingServer) ParticlesSetEmitterVelocity(particles RID, velocity Vector3) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, particles)
	frameSet[Vector3](1, abi, velocity)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.particles_set_emitter_velocity, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self RenderingServer) ParticlesSetCustomAabb(particles RID, aabb AABB) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, particles)
	frameSet[AABB](1, abi, aabb)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.particles_set_custom_aabb, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self RenderingServer) ParticlesSetSpeedScale(particles RID, scale Float) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, particles)
	frameSet[Float](1, abi, scale)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.particles_set_speed_scale, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self RenderingServer) ParticlesSetUseLocalCoordinates(particles RID, enable bool) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, particles)
	frameSet[bool](1, abi, enable)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.particles_set_use_local_coordinates, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self RenderingServer) ParticlesSetProcessMaterial(particles RID, material RID) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, particles)
	frameSet[RID](1, abi, material)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.particles_set_process_material, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self RenderingServer) ParticlesSetFixedFps(particles RID, fps Int) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, particles)
	frameSet[Int](1, abi, fps)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.particles_set_fixed_fps, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self RenderingServer) ParticlesSetInterpolate(particles RID, enable bool) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, particles)
	frameSet[bool](1, abi, enable)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.particles_set_interpolate, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self RenderingServer) ParticlesSetFractionalDelta(particles RID, enable bool) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, particles)
	frameSet[bool](1, abi, enable)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.particles_set_fractional_delta, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self RenderingServer) ParticlesSetCollisionBaseSize(particles RID, size Float) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, particles)
	frameSet[Float](1, abi, size)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.particles_set_collision_base_size, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self RenderingServer) ParticlesSetTransformAlign(particles RID, align RenderingServerParticlesTransformAlign) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, particles)
	frameSet[RenderingServerParticlesTransformAlign](1, abi, align)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.particles_set_transform_align, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self RenderingServer) ParticlesSetTrails(particles RID, enable bool, length_sec Float) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, particles)
	frameSet[bool](1, abi, enable)
	frameSet[Float](2, abi, length_sec)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.particles_set_trails, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self RenderingServer) ParticlesSetTrailBindPoses(particles RID, bind_poses ArrayOf[Transform3D]) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, particles)
	frameSet[ArrayOf[Transform3D]](1, abi, bind_poses)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.particles_set_trail_bind_poses, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self RenderingServer) ParticlesIsInactive(particles RID) bool {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, particles)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.particles_is_inactive, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self RenderingServer) ParticlesRequestProcess(particles RID) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, particles)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.particles_request_process, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self RenderingServer) ParticlesRestart(particles RID) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, particles)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.particles_restart, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self RenderingServer) ParticlesSetSubemitter(particles RID, subemitter_particles RID) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, particles)
	frameSet[RID](1, abi, subemitter_particles)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.particles_set_subemitter, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self RenderingServer) ParticlesEmit(particles RID, transform Transform3D, velocity Vector3, color Color, custom Color, emit_flags Int) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, particles)
	frameSet[Transform3D](1, abi, transform)
	frameSet[Vector3](2, abi, velocity)
	frameSet[Color](3, abi, color)
	frameSet[Color](4, abi, custom)
	frameSet[Int](5, abi, emit_flags)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.particles_emit, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self RenderingServer) ParticlesSetDrawOrder(particles RID, order RenderingServerParticlesDrawOrder) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, particles)
	frameSet[RenderingServerParticlesDrawOrder](1, abi, order)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.particles_set_draw_order, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self RenderingServer) ParticlesSetDrawPasses(particles RID, count Int) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, particles)
	frameSet[Int](1, abi, count)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.particles_set_draw_passes, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self RenderingServer) ParticlesSetDrawPassMesh(particles RID, pass Int, mesh RID) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, particles)
	frameSet[Int](1, abi, pass)
	frameSet[RID](2, abi, mesh)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.particles_set_draw_pass_mesh, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self RenderingServer) ParticlesGetCurrentAabb(particles RID) AABB {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, particles)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.particles_get_current_aabb, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[AABB](abi)
	abi.free()
	return ret
}

func (self RenderingServer) ParticlesSetEmissionTransform(particles RID, transform Transform3D) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, particles)
	frameSet[Transform3D](1, abi, transform)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.particles_set_emission_transform, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self RenderingServer) ParticlesCollisionCreate() RID {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.particles_collision_create, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[RID](abi)
	abi.free()
	return ret
}

func (self RenderingServer) ParticlesCollisionSetCollisionType(particles_collision RID, atype RenderingServerParticlesCollisionType) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, particles_collision)
	frameSet[RenderingServerParticlesCollisionType](1, abi, atype)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.particles_collision_set_collision_type, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self RenderingServer) ParticlesCollisionSetCullMask(particles_collision RID, mask Int) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, particles_collision)
	frameSet[Int](1, abi, mask)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.particles_collision_set_cull_mask, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self RenderingServer) ParticlesCollisionSetSphereRadius(particles_collision RID, radius Float) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, particles_collision)
	frameSet[Float](1, abi, radius)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.particles_collision_set_sphere_radius, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self RenderingServer) ParticlesCollisionSetBoxExtents(particles_collision RID, extents Vector3) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, particles_collision)
	frameSet[Vector3](1, abi, extents)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.particles_collision_set_box_extents, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self RenderingServer) ParticlesCollisionSetAttractorStrength(particles_collision RID, strength Float) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, particles_collision)
	frameSet[Float](1, abi, strength)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.particles_collision_set_attractor_strength, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self RenderingServer) ParticlesCollisionSetAttractorDirectionality(particles_collision RID, amount Float) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, particles_collision)
	frameSet[Float](1, abi, amount)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.particles_collision_set_attractor_directionality, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self RenderingServer) ParticlesCollisionSetAttractorAttenuation(particles_collision RID, curve Float) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, particles_collision)
	frameSet[Float](1, abi, curve)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.particles_collision_set_attractor_attenuation, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self RenderingServer) ParticlesCollisionSetFieldTexture(particles_collision RID, texture RID) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, particles_collision)
	frameSet[RID](1, abi, texture)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.particles_collision_set_field_texture, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self RenderingServer) ParticlesCollisionHeightFieldUpdate(particles_collision RID) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, particles_collision)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.particles_collision_height_field_update, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self RenderingServer) ParticlesCollisionSetHeightFieldResolution(particles_collision RID, resolution RenderingServerParticlesCollisionHeightfieldResolution) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, particles_collision)
	frameSet[RenderingServerParticlesCollisionHeightfieldResolution](1, abi, resolution)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.particles_collision_set_height_field_resolution, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self RenderingServer) FogVolumeCreate() RID {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.fog_volume_create, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[RID](abi)
	abi.free()
	return ret
}

func (self RenderingServer) FogVolumeSetShape(fog_volume RID, shape RenderingServerFogVolumeShape) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, fog_volume)
	frameSet[RenderingServerFogVolumeShape](1, abi, shape)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.fog_volume_set_shape, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self RenderingServer) FogVolumeSetSize(fog_volume RID, size Vector3) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, fog_volume)
	frameSet[Vector3](1, abi, size)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.fog_volume_set_size, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self RenderingServer) FogVolumeSetMaterial(fog_volume RID, material RID) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, fog_volume)
	frameSet[RID](1, abi, material)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.fog_volume_set_material, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self RenderingServer) VisibilityNotifierCreate() RID {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.visibility_notifier_create, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[RID](abi)
	abi.free()
	return ret
}

func (self RenderingServer) VisibilityNotifierSetAabb(notifier RID, aabb AABB) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, notifier)
	frameSet[AABB](1, abi, aabb)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.visibility_notifier_set_aabb, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self RenderingServer) VisibilityNotifierSetCallbacks(notifier RID, enter_callable Callable, exit_callable Callable) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, notifier)
	frameSet[Callable](1, abi, enter_callable)
	frameSet[Callable](2, abi, exit_callable)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.visibility_notifier_set_callbacks, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self RenderingServer) OccluderCreate() RID {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.occluder_create, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[RID](abi)
	abi.free()
	return ret
}

func (self RenderingServer) OccluderSetMesh(occluder RID, vertices PackedVector3Array, indices PackedInt32Array) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, occluder)
	frameSet[PackedVector3Array](1, abi, vertices)
	frameSet[PackedInt32Array](2, abi, indices)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.occluder_set_mesh, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self RenderingServer) CameraCreate() RID {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.camera_create, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[RID](abi)
	abi.free()
	return ret
}

func (self RenderingServer) CameraSetPerspective(camera RID, fovy_degrees Float, z_near Float, z_far Float) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, camera)
	frameSet[Float](1, abi, fovy_degrees)
	frameSet[Float](2, abi, z_near)
	frameSet[Float](3, abi, z_far)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.camera_set_perspective, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self RenderingServer) CameraSetOrthogonal(camera RID, size Float, z_near Float, z_far Float) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, camera)
	frameSet[Float](1, abi, size)
	frameSet[Float](2, abi, z_near)
	frameSet[Float](3, abi, z_far)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.camera_set_orthogonal, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self RenderingServer) CameraSetFrustum(camera RID, size Float, offset Vector2, z_near Float, z_far Float) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, camera)
	frameSet[Float](1, abi, size)
	frameSet[Vector2](2, abi, offset)
	frameSet[Float](3, abi, z_near)
	frameSet[Float](4, abi, z_far)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.camera_set_frustum, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self RenderingServer) CameraSetTransform(camera RID, transform Transform3D) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, camera)
	frameSet[Transform3D](1, abi, transform)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.camera_set_transform, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self RenderingServer) CameraSetCullMask(camera RID, layers Int) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, camera)
	frameSet[Int](1, abi, layers)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.camera_set_cull_mask, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self RenderingServer) CameraSetEnvironment(camera RID, env RID) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, camera)
	frameSet[RID](1, abi, env)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.camera_set_environment, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self RenderingServer) CameraSetCameraAttributes(camera RID, effects RID) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, camera)
	frameSet[RID](1, abi, effects)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.camera_set_camera_attributes, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self RenderingServer) CameraSetUseVerticalAspect(camera RID, enable bool) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, camera)
	frameSet[bool](1, abi, enable)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.camera_set_use_vertical_aspect, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self RenderingServer) ViewportCreate() RID {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.viewport_create, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[RID](abi)
	abi.free()
	return ret
}

func (self RenderingServer) ViewportSetUseXr(viewport RID, use_xr bool) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, viewport)
	frameSet[bool](1, abi, use_xr)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.viewport_set_use_xr, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self RenderingServer) ViewportSetSize(viewport RID, width Int, height Int) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, viewport)
	frameSet[Int](1, abi, width)
	frameSet[Int](2, abi, height)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.viewport_set_size, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self RenderingServer) ViewportSetActive(viewport RID, active bool) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, viewport)
	frameSet[bool](1, abi, active)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.viewport_set_active, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self RenderingServer) ViewportSetParentViewport(viewport RID, parent_viewport RID) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, viewport)
	frameSet[RID](1, abi, parent_viewport)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.viewport_set_parent_viewport, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self RenderingServer) ViewportAttachToScreen(viewport RID, rect Rect2, screen Int) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, viewport)
	frameSet[Rect2](1, abi, rect)
	frameSet[Int](2, abi, screen)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.viewport_attach_to_screen, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self RenderingServer) ViewportSetRenderDirectToScreen(viewport RID, enabled bool) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, viewport)
	frameSet[bool](1, abi, enabled)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.viewport_set_render_direct_to_screen, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self RenderingServer) ViewportSetCanvasCullMask(viewport RID, canvas_cull_mask Int) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, viewport)
	frameSet[Int](1, abi, canvas_cull_mask)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.viewport_set_canvas_cull_mask, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self RenderingServer) ViewportSetScaling3dMode(viewport RID, scaling_3d_mode RenderingServerViewportScaling3DMode) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, viewport)
	frameSet[RenderingServerViewportScaling3DMode](1, abi, scaling_3d_mode)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.viewport_set_scaling_3d_mode, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self RenderingServer) ViewportSetScaling3dScale(viewport RID, scale Float) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, viewport)
	frameSet[Float](1, abi, scale)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.viewport_set_scaling_3d_scale, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self RenderingServer) ViewportSetFsrSharpness(viewport RID, sharpness Float) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, viewport)
	frameSet[Float](1, abi, sharpness)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.viewport_set_fsr_sharpness, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self RenderingServer) ViewportSetTextureMipmapBias(viewport RID, mipmap_bias Float) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, viewport)
	frameSet[Float](1, abi, mipmap_bias)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.viewport_set_texture_mipmap_bias, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self RenderingServer) ViewportSetUpdateMode(viewport RID, update_mode RenderingServerViewportUpdateMode) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, viewport)
	frameSet[RenderingServerViewportUpdateMode](1, abi, update_mode)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.viewport_set_update_mode, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self RenderingServer) ViewportSetClearMode(viewport RID, clear_mode RenderingServerViewportClearMode) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, viewport)
	frameSet[RenderingServerViewportClearMode](1, abi, clear_mode)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.viewport_set_clear_mode, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self RenderingServer) ViewportGetRenderTarget(viewport RID) RID {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, viewport)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.viewport_get_render_target, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[RID](abi)
	abi.free()
	return ret
}

func (self RenderingServer) ViewportGetTexture(viewport RID) RID {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, viewport)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.viewport_get_texture, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[RID](abi)
	abi.free()
	return ret
}

func (self RenderingServer) ViewportSetDisable3d(viewport RID, disable bool) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, viewport)
	frameSet[bool](1, abi, disable)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.viewport_set_disable_3d, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self RenderingServer) ViewportSetDisable2d(viewport RID, disable bool) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, viewport)
	frameSet[bool](1, abi, disable)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.viewport_set_disable_2d, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self RenderingServer) ViewportSetEnvironmentMode(viewport RID, mode RenderingServerViewportEnvironmentMode) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, viewport)
	frameSet[RenderingServerViewportEnvironmentMode](1, abi, mode)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.viewport_set_environment_mode, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self RenderingServer) ViewportAttachCamera(viewport RID, camera RID) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, viewport)
	frameSet[RID](1, abi, camera)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.viewport_attach_camera, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self RenderingServer) ViewportSetScenario(viewport RID, scenario RID) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, viewport)
	frameSet[RID](1, abi, scenario)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.viewport_set_scenario, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self RenderingServer) ViewportAttachCanvas(viewport RID, canvas RID) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, viewport)
	frameSet[RID](1, abi, canvas)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.viewport_attach_canvas, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self RenderingServer) ViewportRemoveCanvas(viewport RID, canvas RID) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, viewport)
	frameSet[RID](1, abi, canvas)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.viewport_remove_canvas, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self RenderingServer) ViewportSetSnap2dTransformsToPixel(viewport RID, enabled bool) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, viewport)
	frameSet[bool](1, abi, enabled)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.viewport_set_snap_2d_transforms_to_pixel, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self RenderingServer) ViewportSetSnap2dVerticesToPixel(viewport RID, enabled bool) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, viewport)
	frameSet[bool](1, abi, enabled)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.viewport_set_snap_2d_vertices_to_pixel, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self RenderingServer) ViewportSetDefaultCanvasItemTextureFilter(viewport RID, filter RenderingServerCanvasItemTextureFilter) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, viewport)
	frameSet[RenderingServerCanvasItemTextureFilter](1, abi, filter)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.viewport_set_default_canvas_item_texture_filter, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self RenderingServer) ViewportSetDefaultCanvasItemTextureRepeat(viewport RID, repeat RenderingServerCanvasItemTextureRepeat) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, viewport)
	frameSet[RenderingServerCanvasItemTextureRepeat](1, abi, repeat)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.viewport_set_default_canvas_item_texture_repeat, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self RenderingServer) ViewportSetCanvasTransform(viewport RID, canvas RID, offset Transform2D) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, viewport)
	frameSet[RID](1, abi, canvas)
	frameSet[Transform2D](2, abi, offset)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.viewport_set_canvas_transform, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self RenderingServer) ViewportSetCanvasStacking(viewport RID, canvas RID, layer Int, sublayer Int) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, viewport)
	frameSet[RID](1, abi, canvas)
	frameSet[Int](2, abi, layer)
	frameSet[Int](3, abi, sublayer)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.viewport_set_canvas_stacking, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self RenderingServer) ViewportSetTransparentBackground(viewport RID, enabled bool) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, viewport)
	frameSet[bool](1, abi, enabled)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.viewport_set_transparent_background, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self RenderingServer) ViewportSetGlobalCanvasTransform(viewport RID, transform Transform2D) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, viewport)
	frameSet[Transform2D](1, abi, transform)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.viewport_set_global_canvas_transform, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self RenderingServer) ViewportSetSdfOversizeAndScale(viewport RID, oversize RenderingServerViewportSDFOversize, scale RenderingServerViewportSDFScale) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, viewport)
	frameSet[RenderingServerViewportSDFOversize](1, abi, oversize)
	frameSet[RenderingServerViewportSDFScale](2, abi, scale)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.viewport_set_sdf_oversize_and_scale, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self RenderingServer) ViewportSetPositionalShadowAtlasSize(viewport RID, size Int, use_16_bits bool) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, viewport)
	frameSet[Int](1, abi, size)
	frameSet[bool](2, abi, use_16_bits)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.viewport_set_positional_shadow_atlas_size, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self RenderingServer) ViewportSetPositionalShadowAtlasQuadrantSubdivision(viewport RID, quadrant Int, subdivision Int) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, viewport)
	frameSet[Int](1, abi, quadrant)
	frameSet[Int](2, abi, subdivision)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.viewport_set_positional_shadow_atlas_quadrant_subdivision, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self RenderingServer) ViewportSetMsaa3d(viewport RID, msaa RenderingServerViewportMSAA) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, viewport)
	frameSet[RenderingServerViewportMSAA](1, abi, msaa)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.viewport_set_msaa_3d, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self RenderingServer) ViewportSetMsaa2d(viewport RID, msaa RenderingServerViewportMSAA) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, viewport)
	frameSet[RenderingServerViewportMSAA](1, abi, msaa)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.viewport_set_msaa_2d, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self RenderingServer) ViewportSetUseHdr2d(viewport RID, enabled bool) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, viewport)
	frameSet[bool](1, abi, enabled)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.viewport_set_use_hdr_2d, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self RenderingServer) ViewportSetScreenSpaceAa(viewport RID, mode RenderingServerViewportScreenSpaceAA) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, viewport)
	frameSet[RenderingServerViewportScreenSpaceAA](1, abi, mode)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.viewport_set_screen_space_aa, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self RenderingServer) ViewportSetUseTaa(viewport RID, enable bool) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, viewport)
	frameSet[bool](1, abi, enable)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.viewport_set_use_taa, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self RenderingServer) ViewportSetUseDebanding(viewport RID, enable bool) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, viewport)
	frameSet[bool](1, abi, enable)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.viewport_set_use_debanding, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self RenderingServer) ViewportSetUseOcclusionCulling(viewport RID, enable bool) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, viewport)
	frameSet[bool](1, abi, enable)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.viewport_set_use_occlusion_culling, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self RenderingServer) ViewportSetOcclusionRaysPerThread(rays_per_thread Int) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Int](0, abi, rays_per_thread)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.viewport_set_occlusion_rays_per_thread, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self RenderingServer) ViewportSetOcclusionCullingBuildQuality(quality RenderingServerViewportOcclusionCullingBuildQuality) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RenderingServerViewportOcclusionCullingBuildQuality](0, abi, quality)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.viewport_set_occlusion_culling_build_quality, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self RenderingServer) ViewportGetRenderInfo(viewport RID, atype RenderingServerViewportRenderInfoType, info RenderingServerViewportRenderInfo) Int {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, viewport)
	frameSet[RenderingServerViewportRenderInfoType](1, abi, atype)
	frameSet[RenderingServerViewportRenderInfo](2, abi, info)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.viewport_get_render_info, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Int](abi)
	abi.free()
	return ret
}

func (self RenderingServer) ViewportSetDebugDraw(viewport RID, draw RenderingServerViewportDebugDraw) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, viewport)
	frameSet[RenderingServerViewportDebugDraw](1, abi, draw)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.viewport_set_debug_draw, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self RenderingServer) ViewportSetMeasureRenderTime(viewport RID, enable bool) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, viewport)
	frameSet[bool](1, abi, enable)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.viewport_set_measure_render_time, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self RenderingServer) ViewportGetMeasuredRenderTimeCpu(viewport RID) Float {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, viewport)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.viewport_get_measured_render_time_cpu, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Float](abi)
	abi.free()
	return ret
}

func (self RenderingServer) ViewportGetMeasuredRenderTimeGpu(viewport RID) Float {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, viewport)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.viewport_get_measured_render_time_gpu, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Float](abi)
	abi.free()
	return ret
}

func (self RenderingServer) ViewportSetVrsMode(viewport RID, mode RenderingServerViewportVRSMode) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, viewport)
	frameSet[RenderingServerViewportVRSMode](1, abi, mode)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.viewport_set_vrs_mode, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self RenderingServer) ViewportSetVrsTexture(viewport RID, texture RID) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, viewport)
	frameSet[RID](1, abi, texture)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.viewport_set_vrs_texture, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self RenderingServer) SkyCreate() RID {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.sky_create, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[RID](abi)
	abi.free()
	return ret
}

func (self RenderingServer) SkySetRadianceSize(sky RID, radiance_size Int) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, sky)
	frameSet[Int](1, abi, radiance_size)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.sky_set_radiance_size, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self RenderingServer) SkySetMode(sky RID, mode RenderingServerSkyMode) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, sky)
	frameSet[RenderingServerSkyMode](1, abi, mode)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.sky_set_mode, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self RenderingServer) SkySetMaterial(sky RID, material RID) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, sky)
	frameSet[RID](1, abi, material)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.sky_set_material, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self RenderingServer) SkyBakePanorama(sky RID, energy Float, bake_irradiance bool, size Vector2i) Image {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, sky)
	frameSet[Float](1, abi, energy)
	frameSet[bool](2, abi, bake_irradiance)
	frameSet[Vector2i](3, abi, size)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.sky_bake_panorama, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Image](abi)
	abi.free()
	return ret
}

func (self RenderingServer) EnvironmentCreate() RID {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.environment_create, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[RID](abi)
	abi.free()
	return ret
}

func (self RenderingServer) EnvironmentSetBackground(env RID, bg RenderingServerEnvironmentBG) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, env)
	frameSet[RenderingServerEnvironmentBG](1, abi, bg)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.environment_set_background, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self RenderingServer) EnvironmentSetSky(env RID, sky RID) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, env)
	frameSet[RID](1, abi, sky)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.environment_set_sky, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self RenderingServer) EnvironmentSetSkyCustomFov(env RID, scale Float) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, env)
	frameSet[Float](1, abi, scale)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.environment_set_sky_custom_fov, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self RenderingServer) EnvironmentSetSkyOrientation(env RID, orientation Basis) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, env)
	frameSet[Basis](1, abi, orientation)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.environment_set_sky_orientation, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self RenderingServer) EnvironmentSetBgColor(env RID, color Color) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, env)
	frameSet[Color](1, abi, color)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.environment_set_bg_color, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self RenderingServer) EnvironmentSetBgEnergy(env RID, multiplier Float, exposure_value Float) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, env)
	frameSet[Float](1, abi, multiplier)
	frameSet[Float](2, abi, exposure_value)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.environment_set_bg_energy, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self RenderingServer) EnvironmentSetCanvasMaxLayer(env RID, max_layer Int) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, env)
	frameSet[Int](1, abi, max_layer)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.environment_set_canvas_max_layer, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self RenderingServer) EnvironmentSetAmbientLight(env RID, color Color, ambient RenderingServerEnvironmentAmbientSource, energy Float, sky_contibution Float, reflection_source RenderingServerEnvironmentReflectionSource) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, env)
	frameSet[Color](1, abi, color)
	frameSet[RenderingServerEnvironmentAmbientSource](2, abi, ambient)
	frameSet[Float](3, abi, energy)
	frameSet[Float](4, abi, sky_contibution)
	frameSet[RenderingServerEnvironmentReflectionSource](5, abi, reflection_source)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.environment_set_ambient_light, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self RenderingServer) EnvironmentSetGlow(env RID, enable bool, levels PackedFloat32Array, intensity Float, strength Float, mix Float, bloom_threshold Float, blend_mode RenderingServerEnvironmentGlowBlendMode, hdr_bleed_threshold Float, hdr_bleed_scale Float, hdr_luminance_cap Float, glow_map_strength Float, glow_map RID) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, env)
	frameSet[bool](1, abi, enable)
	frameSet[PackedFloat32Array](2, abi, levels)
	frameSet[Float](3, abi, intensity)
	frameSet[Float](4, abi, strength)
	frameSet[Float](5, abi, mix)
	frameSet[Float](6, abi, bloom_threshold)
	frameSet[RenderingServerEnvironmentGlowBlendMode](7, abi, blend_mode)
	frameSet[Float](8, abi, hdr_bleed_threshold)
	frameSet[Float](9, abi, hdr_bleed_scale)
	frameSet[Float](10, abi, hdr_luminance_cap)
	frameSet[Float](11, abi, glow_map_strength)
	frameSet[RID](12, abi, glow_map)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.environment_set_glow, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self RenderingServer) EnvironmentSetTonemap(env RID, tone_mapper RenderingServerEnvironmentToneMapper, exposure Float, white Float) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, env)
	frameSet[RenderingServerEnvironmentToneMapper](1, abi, tone_mapper)
	frameSet[Float](2, abi, exposure)
	frameSet[Float](3, abi, white)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.environment_set_tonemap, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self RenderingServer) EnvironmentSetAdjustment(env RID, enable bool, brightness Float, contrast Float, saturation Float, use_1d_color_correction bool, color_correction RID) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, env)
	frameSet[bool](1, abi, enable)
	frameSet[Float](2, abi, brightness)
	frameSet[Float](3, abi, contrast)
	frameSet[Float](4, abi, saturation)
	frameSet[bool](5, abi, use_1d_color_correction)
	frameSet[RID](6, abi, color_correction)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.environment_set_adjustment, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self RenderingServer) EnvironmentSetSsr(env RID, enable bool, max_steps Int, fade_in Float, fade_out Float, depth_tolerance Float) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, env)
	frameSet[bool](1, abi, enable)
	frameSet[Int](2, abi, max_steps)
	frameSet[Float](3, abi, fade_in)
	frameSet[Float](4, abi, fade_out)
	frameSet[Float](5, abi, depth_tolerance)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.environment_set_ssr, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self RenderingServer) EnvironmentSetSsao(env RID, enable bool, radius Float, intensity Float, power Float, detail Float, horizon Float, sharpness Float, light_affect Float, ao_channel_affect Float) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, env)
	frameSet[bool](1, abi, enable)
	frameSet[Float](2, abi, radius)
	frameSet[Float](3, abi, intensity)
	frameSet[Float](4, abi, power)
	frameSet[Float](5, abi, detail)
	frameSet[Float](6, abi, horizon)
	frameSet[Float](7, abi, sharpness)
	frameSet[Float](8, abi, light_affect)
	frameSet[Float](9, abi, ao_channel_affect)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.environment_set_ssao, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self RenderingServer) EnvironmentSetFog(env RID, enable bool, light_color Color, light_energy Float, sun_scatter Float, density Float, height Float, height_density Float, aerial_perspective Float, sky_affect Float) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, env)
	frameSet[bool](1, abi, enable)
	frameSet[Color](2, abi, light_color)
	frameSet[Float](3, abi, light_energy)
	frameSet[Float](4, abi, sun_scatter)
	frameSet[Float](5, abi, density)
	frameSet[Float](6, abi, height)
	frameSet[Float](7, abi, height_density)
	frameSet[Float](8, abi, aerial_perspective)
	frameSet[Float](9, abi, sky_affect)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.environment_set_fog, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self RenderingServer) EnvironmentSetSdfgi(env RID, enable bool, cascades Int, min_cell_size Float, y_scale RenderingServerEnvironmentSDFGIYScale, use_occlusion bool, bounce_feedback Float, read_sky bool, energy Float, normal_bias Float, probe_bias Float) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, env)
	frameSet[bool](1, abi, enable)
	frameSet[Int](2, abi, cascades)
	frameSet[Float](3, abi, min_cell_size)
	frameSet[RenderingServerEnvironmentSDFGIYScale](4, abi, y_scale)
	frameSet[bool](5, abi, use_occlusion)
	frameSet[Float](6, abi, bounce_feedback)
	frameSet[bool](7, abi, read_sky)
	frameSet[Float](8, abi, energy)
	frameSet[Float](9, abi, normal_bias)
	frameSet[Float](10, abi, probe_bias)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.environment_set_sdfgi, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self RenderingServer) EnvironmentSetVolumetricFog(env RID, enable bool, density Float, albedo Color, emission Color, emission_energy Float, anisotropy Float, length Float, p_detail_spread Float, gi_inject Float, temporal_reprojection bool, temporal_reprojection_amount Float, ambient_inject Float, sky_affect Float) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, env)
	frameSet[bool](1, abi, enable)
	frameSet[Float](2, abi, density)
	frameSet[Color](3, abi, albedo)
	frameSet[Color](4, abi, emission)
	frameSet[Float](5, abi, emission_energy)
	frameSet[Float](6, abi, anisotropy)
	frameSet[Float](7, abi, length)
	frameSet[Float](8, abi, p_detail_spread)
	frameSet[Float](9, abi, gi_inject)
	frameSet[bool](10, abi, temporal_reprojection)
	frameSet[Float](11, abi, temporal_reprojection_amount)
	frameSet[Float](12, abi, ambient_inject)
	frameSet[Float](13, abi, sky_affect)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.environment_set_volumetric_fog, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self RenderingServer) EnvironmentGlowSetUseBicubicUpscale(enable bool) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[bool](0, abi, enable)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.environment_glow_set_use_bicubic_upscale, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self RenderingServer) EnvironmentSetSsrRoughnessQuality(quality RenderingServerEnvironmentSSRRoughnessQuality) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RenderingServerEnvironmentSSRRoughnessQuality](0, abi, quality)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.environment_set_ssr_roughness_quality, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self RenderingServer) EnvironmentSetSsaoQuality(quality RenderingServerEnvironmentSSAOQuality, half_size bool, adaptive_target Float, blur_passes Int, fadeout_from Float, fadeout_to Float) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RenderingServerEnvironmentSSAOQuality](0, abi, quality)
	frameSet[bool](1, abi, half_size)
	frameSet[Float](2, abi, adaptive_target)
	frameSet[Int](3, abi, blur_passes)
	frameSet[Float](4, abi, fadeout_from)
	frameSet[Float](5, abi, fadeout_to)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.environment_set_ssao_quality, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self RenderingServer) EnvironmentSetSsilQuality(quality RenderingServerEnvironmentSSILQuality, half_size bool, adaptive_target Float, blur_passes Int, fadeout_from Float, fadeout_to Float) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RenderingServerEnvironmentSSILQuality](0, abi, quality)
	frameSet[bool](1, abi, half_size)
	frameSet[Float](2, abi, adaptive_target)
	frameSet[Int](3, abi, blur_passes)
	frameSet[Float](4, abi, fadeout_from)
	frameSet[Float](5, abi, fadeout_to)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.environment_set_ssil_quality, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self RenderingServer) EnvironmentSetSdfgiRayCount(ray_count RenderingServerEnvironmentSDFGIRayCount) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RenderingServerEnvironmentSDFGIRayCount](0, abi, ray_count)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.environment_set_sdfgi_ray_count, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self RenderingServer) EnvironmentSetSdfgiFramesToConverge(frames RenderingServerEnvironmentSDFGIFramesToConverge) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RenderingServerEnvironmentSDFGIFramesToConverge](0, abi, frames)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.environment_set_sdfgi_frames_to_converge, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self RenderingServer) EnvironmentSetSdfgiFramesToUpdateLight(frames RenderingServerEnvironmentSDFGIFramesToUpdateLight) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RenderingServerEnvironmentSDFGIFramesToUpdateLight](0, abi, frames)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.environment_set_sdfgi_frames_to_update_light, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self RenderingServer) EnvironmentSetVolumetricFogVolumeSize(size Int, depth Int) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Int](0, abi, size)
	frameSet[Int](1, abi, depth)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.environment_set_volumetric_fog_volume_size, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self RenderingServer) EnvironmentSetVolumetricFogFilterActive(active bool) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[bool](0, abi, active)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.environment_set_volumetric_fog_filter_active, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self RenderingServer) EnvironmentBakePanorama(environment RID, bake_irradiance bool, size Vector2i) Image {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, environment)
	frameSet[bool](1, abi, bake_irradiance)
	frameSet[Vector2i](2, abi, size)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.environment_bake_panorama, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Image](abi)
	abi.free()
	return ret
}

func (self RenderingServer) ScreenSpaceRoughnessLimiterSetActive(enable bool, amount Float, limit Float) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[bool](0, abi, enable)
	frameSet[Float](1, abi, amount)
	frameSet[Float](2, abi, limit)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.screen_space_roughness_limiter_set_active, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self RenderingServer) SubSurfaceScatteringSetQuality(quality RenderingServerSubSurfaceScatteringQuality) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RenderingServerSubSurfaceScatteringQuality](0, abi, quality)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.sub_surface_scattering_set_quality, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self RenderingServer) SubSurfaceScatteringSetScale(scale Float, depth_scale Float) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Float](0, abi, scale)
	frameSet[Float](1, abi, depth_scale)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.sub_surface_scattering_set_scale, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self RenderingServer) CameraAttributesCreate() RID {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.camera_attributes_create, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[RID](abi)
	abi.free()
	return ret
}

func (self RenderingServer) CameraAttributesSetDofBlurQuality(quality RenderingServerDOFBlurQuality, use_jitter bool) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RenderingServerDOFBlurQuality](0, abi, quality)
	frameSet[bool](1, abi, use_jitter)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.camera_attributes_set_dof_blur_quality, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self RenderingServer) CameraAttributesSetDofBlurBokehShape(shape RenderingServerDOFBokehShape) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RenderingServerDOFBokehShape](0, abi, shape)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.camera_attributes_set_dof_blur_bokeh_shape, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self RenderingServer) CameraAttributesSetDofBlur(camera_attributes RID, far_enable bool, far_distance Float, far_transition Float, near_enable bool, near_distance Float, near_transition Float, amount Float) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, camera_attributes)
	frameSet[bool](1, abi, far_enable)
	frameSet[Float](2, abi, far_distance)
	frameSet[Float](3, abi, far_transition)
	frameSet[bool](4, abi, near_enable)
	frameSet[Float](5, abi, near_distance)
	frameSet[Float](6, abi, near_transition)
	frameSet[Float](7, abi, amount)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.camera_attributes_set_dof_blur, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self RenderingServer) CameraAttributesSetExposure(camera_attributes RID, multiplier Float, normalization Float) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, camera_attributes)
	frameSet[Float](1, abi, multiplier)
	frameSet[Float](2, abi, normalization)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.camera_attributes_set_exposure, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self RenderingServer) CameraAttributesSetAutoExposure(camera_attributes RID, enable bool, min_sensitivity Float, max_sensitivity Float, speed Float, scale Float) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, camera_attributes)
	frameSet[bool](1, abi, enable)
	frameSet[Float](2, abi, min_sensitivity)
	frameSet[Float](3, abi, max_sensitivity)
	frameSet[Float](4, abi, speed)
	frameSet[Float](5, abi, scale)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.camera_attributes_set_auto_exposure, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self RenderingServer) ScenarioCreate() RID {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.scenario_create, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[RID](abi)
	abi.free()
	return ret
}

func (self RenderingServer) ScenarioSetEnvironment(scenario RID, environment RID) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, scenario)
	frameSet[RID](1, abi, environment)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.scenario_set_environment, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self RenderingServer) ScenarioSetFallbackEnvironment(scenario RID, environment RID) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, scenario)
	frameSet[RID](1, abi, environment)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.scenario_set_fallback_environment, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self RenderingServer) ScenarioSetCameraAttributes(scenario RID, effects RID) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, scenario)
	frameSet[RID](1, abi, effects)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.scenario_set_camera_attributes, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self RenderingServer) InstanceCreate2(base RID, scenario RID) RID {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, base)
	frameSet[RID](1, abi, scenario)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.instance_create2, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[RID](abi)
	abi.free()
	return ret
}

func (self RenderingServer) InstanceCreate() RID {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.instance_create, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[RID](abi)
	abi.free()
	return ret
}

func (self RenderingServer) InstanceSetBase(instance RID, base RID) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, instance)
	frameSet[RID](1, abi, base)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.instance_set_base, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self RenderingServer) InstanceSetScenario(instance RID, scenario RID) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, instance)
	frameSet[RID](1, abi, scenario)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.instance_set_scenario, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self RenderingServer) InstanceSetLayerMask(instance RID, mask Int) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, instance)
	frameSet[Int](1, abi, mask)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.instance_set_layer_mask, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self RenderingServer) InstanceSetPivotData(instance RID, sorting_offset Float, use_aabb_center bool) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, instance)
	frameSet[Float](1, abi, sorting_offset)
	frameSet[bool](2, abi, use_aabb_center)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.instance_set_pivot_data, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self RenderingServer) InstanceSetTransform(instance RID, transform Transform3D) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, instance)
	frameSet[Transform3D](1, abi, transform)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.instance_set_transform, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self RenderingServer) InstanceAttachObjectInstanceId(instance RID, id Int) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, instance)
	frameSet[Int](1, abi, id)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.instance_attach_object_instance_id, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self RenderingServer) InstanceSetBlendShapeWeight(instance RID, shape Int, weight Float) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, instance)
	frameSet[Int](1, abi, shape)
	frameSet[Float](2, abi, weight)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.instance_set_blend_shape_weight, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self RenderingServer) InstanceSetSurfaceOverrideMaterial(instance RID, surface Int, material RID) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, instance)
	frameSet[Int](1, abi, surface)
	frameSet[RID](2, abi, material)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.instance_set_surface_override_material, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self RenderingServer) InstanceSetVisible(instance RID, visible bool) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, instance)
	frameSet[bool](1, abi, visible)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.instance_set_visible, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self RenderingServer) InstanceGeometrySetTransparency(instance RID, transparency Float) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, instance)
	frameSet[Float](1, abi, transparency)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.instance_geometry_set_transparency, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self RenderingServer) InstanceSetCustomAabb(instance RID, aabb AABB) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, instance)
	frameSet[AABB](1, abi, aabb)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.instance_set_custom_aabb, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self RenderingServer) InstanceAttachSkeleton(instance RID, skeleton RID) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, instance)
	frameSet[RID](1, abi, skeleton)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.instance_attach_skeleton, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self RenderingServer) InstanceSetExtraVisibilityMargin(instance RID, margin Float) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, instance)
	frameSet[Float](1, abi, margin)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.instance_set_extra_visibility_margin, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self RenderingServer) InstanceSetVisibilityParent(instance RID, parent RID) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, instance)
	frameSet[RID](1, abi, parent)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.instance_set_visibility_parent, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self RenderingServer) InstanceSetIgnoreCulling(instance RID, enabled bool) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, instance)
	frameSet[bool](1, abi, enabled)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.instance_set_ignore_culling, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self RenderingServer) InstanceGeometrySetFlag(instance RID, flag RenderingServerInstanceFlags, enabled bool) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, instance)
	frameSet[RenderingServerInstanceFlags](1, abi, flag)
	frameSet[bool](2, abi, enabled)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.instance_geometry_set_flag, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self RenderingServer) InstanceGeometrySetCastShadowsSetting(instance RID, shadow_casting_setting RenderingServerShadowCastingSetting) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, instance)
	frameSet[RenderingServerShadowCastingSetting](1, abi, shadow_casting_setting)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.instance_geometry_set_cast_shadows_setting, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self RenderingServer) InstanceGeometrySetMaterialOverride(instance RID, material RID) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, instance)
	frameSet[RID](1, abi, material)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.instance_geometry_set_material_override, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self RenderingServer) InstanceGeometrySetMaterialOverlay(instance RID, material RID) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, instance)
	frameSet[RID](1, abi, material)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.instance_geometry_set_material_overlay, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self RenderingServer) InstanceGeometrySetVisibilityRange(instance RID, min Float, max Float, min_margin Float, max_margin Float, fade_mode RenderingServerVisibilityRangeFadeMode) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, instance)
	frameSet[Float](1, abi, min)
	frameSet[Float](2, abi, max)
	frameSet[Float](3, abi, min_margin)
	frameSet[Float](4, abi, max_margin)
	frameSet[RenderingServerVisibilityRangeFadeMode](5, abi, fade_mode)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.instance_geometry_set_visibility_range, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self RenderingServer) InstanceGeometrySetLightmap(instance RID, lightmap RID, lightmap_uv_scale Rect2, lightmap_slice Int) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, instance)
	frameSet[RID](1, abi, lightmap)
	frameSet[Rect2](2, abi, lightmap_uv_scale)
	frameSet[Int](3, abi, lightmap_slice)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.instance_geometry_set_lightmap, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self RenderingServer) InstanceGeometrySetLodBias(instance RID, lod_bias Float) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, instance)
	frameSet[Float](1, abi, lod_bias)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.instance_geometry_set_lod_bias, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self RenderingServer) InstanceGeometrySetShaderParameter(instance RID, parameter StringName, value Variant) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, instance)
	frameSet[StringName](1, abi, parameter)
	frameSet[Variant](2, abi, value)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.instance_geometry_set_shader_parameter, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self RenderingServer) InstanceGeometryGetShaderParameter(ctx Context, instance RID, parameter StringName) Variant {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, instance)
	frameSet[StringName](1, abi, parameter)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.instance_geometry_get_shader_parameter, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[[3]uintptr](abi)
	abi.free()
	return mmm.Make[API, Variant, [3]uintptr](ctx, selfPtr.API, ret)
}

func (self RenderingServer) InstanceGeometryGetShaderParameterDefaultValue(ctx Context, instance RID, parameter StringName) Variant {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, instance)
	frameSet[StringName](1, abi, parameter)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.instance_geometry_get_shader_parameter_default_value, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[[3]uintptr](abi)
	abi.free()
	return mmm.Make[API, Variant, [3]uintptr](ctx, selfPtr.API, ret)
}

func (self RenderingServer) InstanceGeometryGetShaderParameterList(instance RID) ArrayOf[Dictionary] {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, instance)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.instance_geometry_get_shader_parameter_list, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[ArrayOf[Dictionary]](abi)
	abi.free()
	return ret
}

func (self RenderingServer) InstancesCullAabb(ctx Context, aabb AABB, scenario RID) PackedInt64Array {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[AABB](0, abi, aabb)
	frameSet[RID](1, abi, scenario)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.instances_cull_aabb, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[[2]uintptr](abi)
	abi.free()
	return mmm.Make[API, PackedInt64Array, [2]uintptr](ctx, selfPtr.API, ret)
}

func (self RenderingServer) InstancesCullRay(ctx Context, from Vector3, to Vector3, scenario RID) PackedInt64Array {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Vector3](0, abi, from)
	frameSet[Vector3](1, abi, to)
	frameSet[RID](2, abi, scenario)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.instances_cull_ray, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[[2]uintptr](abi)
	abi.free()
	return mmm.Make[API, PackedInt64Array, [2]uintptr](ctx, selfPtr.API, ret)
}

func (self RenderingServer) InstancesCullConvex(ctx Context, convex ArrayOf[Plane], scenario RID) PackedInt64Array {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[ArrayOf[Plane]](0, abi, convex)
	frameSet[RID](1, abi, scenario)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.instances_cull_convex, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[[2]uintptr](abi)
	abi.free()
	return mmm.Make[API, PackedInt64Array, [2]uintptr](ctx, selfPtr.API, ret)
}

func (self RenderingServer) BakeRenderUv2(base RID, material_overrides ArrayOf[RID], image_size Vector2i) ArrayOf[Image] {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, base)
	frameSet[ArrayOf[RID]](1, abi, material_overrides)
	frameSet[Vector2i](2, abi, image_size)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.bake_render_uv2, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[ArrayOf[Image]](abi)
	abi.free()
	return ret
}

func (self RenderingServer) CanvasCreate() RID {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.canvas_create, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[RID](abi)
	abi.free()
	return ret
}

func (self RenderingServer) CanvasSetItemMirroring(canvas RID, item RID, mirroring Vector2) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, canvas)
	frameSet[RID](1, abi, item)
	frameSet[Vector2](2, abi, mirroring)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.canvas_set_item_mirroring, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self RenderingServer) CanvasSetModulate(canvas RID, color Color) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, canvas)
	frameSet[Color](1, abi, color)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.canvas_set_modulate, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self RenderingServer) CanvasSetDisableScale(disable bool) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[bool](0, abi, disable)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.canvas_set_disable_scale, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self RenderingServer) CanvasTextureCreate() RID {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.canvas_texture_create, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[RID](abi)
	abi.free()
	return ret
}

func (self RenderingServer) CanvasTextureSetChannel(canvas_texture RID, channel RenderingServerCanvasTextureChannel, texture RID) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, canvas_texture)
	frameSet[RenderingServerCanvasTextureChannel](1, abi, channel)
	frameSet[RID](2, abi, texture)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.canvas_texture_set_channel, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self RenderingServer) CanvasTextureSetShadingParameters(canvas_texture RID, base_color Color, shininess Float) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, canvas_texture)
	frameSet[Color](1, abi, base_color)
	frameSet[Float](2, abi, shininess)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.canvas_texture_set_shading_parameters, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self RenderingServer) CanvasTextureSetTextureFilter(canvas_texture RID, filter RenderingServerCanvasItemTextureFilter) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, canvas_texture)
	frameSet[RenderingServerCanvasItemTextureFilter](1, abi, filter)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.canvas_texture_set_texture_filter, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self RenderingServer) CanvasTextureSetTextureRepeat(canvas_texture RID, repeat RenderingServerCanvasItemTextureRepeat) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, canvas_texture)
	frameSet[RenderingServerCanvasItemTextureRepeat](1, abi, repeat)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.canvas_texture_set_texture_repeat, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self RenderingServer) CanvasItemCreate() RID {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.canvas_item_create, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[RID](abi)
	abi.free()
	return ret
}

func (self RenderingServer) CanvasItemSetParent(item RID, parent RID) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, item)
	frameSet[RID](1, abi, parent)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.canvas_item_set_parent, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self RenderingServer) CanvasItemSetDefaultTextureFilter(item RID, filter RenderingServerCanvasItemTextureFilter) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, item)
	frameSet[RenderingServerCanvasItemTextureFilter](1, abi, filter)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.canvas_item_set_default_texture_filter, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self RenderingServer) CanvasItemSetDefaultTextureRepeat(item RID, repeat RenderingServerCanvasItemTextureRepeat) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, item)
	frameSet[RenderingServerCanvasItemTextureRepeat](1, abi, repeat)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.canvas_item_set_default_texture_repeat, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self RenderingServer) CanvasItemSetVisible(item RID, visible bool) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, item)
	frameSet[bool](1, abi, visible)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.canvas_item_set_visible, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self RenderingServer) CanvasItemSetLightMask(item RID, mask Int) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, item)
	frameSet[Int](1, abi, mask)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.canvas_item_set_light_mask, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self RenderingServer) CanvasItemSetVisibilityLayer(item RID, visibility_layer Int) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, item)
	frameSet[Int](1, abi, visibility_layer)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.canvas_item_set_visibility_layer, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self RenderingServer) CanvasItemSetTransform(item RID, transform Transform2D) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, item)
	frameSet[Transform2D](1, abi, transform)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.canvas_item_set_transform, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self RenderingServer) CanvasItemSetClip(item RID, clip bool) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, item)
	frameSet[bool](1, abi, clip)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.canvas_item_set_clip, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self RenderingServer) CanvasItemSetDistanceFieldMode(item RID, enabled bool) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, item)
	frameSet[bool](1, abi, enabled)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.canvas_item_set_distance_field_mode, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self RenderingServer) CanvasItemSetCustomRect(item RID, use_custom_rect bool, rect Rect2) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, item)
	frameSet[bool](1, abi, use_custom_rect)
	frameSet[Rect2](2, abi, rect)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.canvas_item_set_custom_rect, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self RenderingServer) CanvasItemSetModulate(item RID, color Color) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, item)
	frameSet[Color](1, abi, color)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.canvas_item_set_modulate, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self RenderingServer) CanvasItemSetSelfModulate(item RID, color Color) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, item)
	frameSet[Color](1, abi, color)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.canvas_item_set_self_modulate, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self RenderingServer) CanvasItemSetDrawBehindParent(item RID, enabled bool) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, item)
	frameSet[bool](1, abi, enabled)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.canvas_item_set_draw_behind_parent, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self RenderingServer) CanvasItemAddLine(item RID, from Vector2, to Vector2, color Color, width Float, antialiased bool) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, item)
	frameSet[Vector2](1, abi, from)
	frameSet[Vector2](2, abi, to)
	frameSet[Color](3, abi, color)
	frameSet[Float](4, abi, width)
	frameSet[bool](5, abi, antialiased)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.canvas_item_add_line, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self RenderingServer) CanvasItemAddPolyline(item RID, points PackedVector2Array, colors PackedColorArray, width Float, antialiased bool) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, item)
	frameSet[PackedVector2Array](1, abi, points)
	frameSet[PackedColorArray](2, abi, colors)
	frameSet[Float](3, abi, width)
	frameSet[bool](4, abi, antialiased)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.canvas_item_add_polyline, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self RenderingServer) CanvasItemAddMultiline(item RID, points PackedVector2Array, colors PackedColorArray, width Float) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, item)
	frameSet[PackedVector2Array](1, abi, points)
	frameSet[PackedColorArray](2, abi, colors)
	frameSet[Float](3, abi, width)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.canvas_item_add_multiline, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self RenderingServer) CanvasItemAddRect(item RID, rect Rect2, color Color) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, item)
	frameSet[Rect2](1, abi, rect)
	frameSet[Color](2, abi, color)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.canvas_item_add_rect, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self RenderingServer) CanvasItemAddCircle(item RID, pos Vector2, radius Float, color Color) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, item)
	frameSet[Vector2](1, abi, pos)
	frameSet[Float](2, abi, radius)
	frameSet[Color](3, abi, color)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.canvas_item_add_circle, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self RenderingServer) CanvasItemAddTextureRect(item RID, rect Rect2, texture RID, tile bool, modulate Color, transpose bool) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, item)
	frameSet[Rect2](1, abi, rect)
	frameSet[RID](2, abi, texture)
	frameSet[bool](3, abi, tile)
	frameSet[Color](4, abi, modulate)
	frameSet[bool](5, abi, transpose)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.canvas_item_add_texture_rect, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self RenderingServer) CanvasItemAddMsdfTextureRectRegion(item RID, rect Rect2, texture RID, src_rect Rect2, modulate Color, outline_size Int, px_range Float, scale Float) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, item)
	frameSet[Rect2](1, abi, rect)
	frameSet[RID](2, abi, texture)
	frameSet[Rect2](3, abi, src_rect)
	frameSet[Color](4, abi, modulate)
	frameSet[Int](5, abi, outline_size)
	frameSet[Float](6, abi, px_range)
	frameSet[Float](7, abi, scale)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.canvas_item_add_msdf_texture_rect_region, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self RenderingServer) CanvasItemAddLcdTextureRectRegion(item RID, rect Rect2, texture RID, src_rect Rect2, modulate Color) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, item)
	frameSet[Rect2](1, abi, rect)
	frameSet[RID](2, abi, texture)
	frameSet[Rect2](3, abi, src_rect)
	frameSet[Color](4, abi, modulate)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.canvas_item_add_lcd_texture_rect_region, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self RenderingServer) CanvasItemAddTextureRectRegion(item RID, rect Rect2, texture RID, src_rect Rect2, modulate Color, transpose bool, clip_uv bool) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, item)
	frameSet[Rect2](1, abi, rect)
	frameSet[RID](2, abi, texture)
	frameSet[Rect2](3, abi, src_rect)
	frameSet[Color](4, abi, modulate)
	frameSet[bool](5, abi, transpose)
	frameSet[bool](6, abi, clip_uv)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.canvas_item_add_texture_rect_region, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self RenderingServer) CanvasItemAddNinePatch(item RID, rect Rect2, source Rect2, texture RID, topleft Vector2, bottomright Vector2, x_axis_mode RenderingServerNinePatchAxisMode, y_axis_mode RenderingServerNinePatchAxisMode, draw_center bool, modulate Color) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, item)
	frameSet[Rect2](1, abi, rect)
	frameSet[Rect2](2, abi, source)
	frameSet[RID](3, abi, texture)
	frameSet[Vector2](4, abi, topleft)
	frameSet[Vector2](5, abi, bottomright)
	frameSet[RenderingServerNinePatchAxisMode](6, abi, x_axis_mode)
	frameSet[RenderingServerNinePatchAxisMode](7, abi, y_axis_mode)
	frameSet[bool](8, abi, draw_center)
	frameSet[Color](9, abi, modulate)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.canvas_item_add_nine_patch, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self RenderingServer) CanvasItemAddPrimitive(item RID, points PackedVector2Array, colors PackedColorArray, uvs PackedVector2Array, texture RID) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, item)
	frameSet[PackedVector2Array](1, abi, points)
	frameSet[PackedColorArray](2, abi, colors)
	frameSet[PackedVector2Array](3, abi, uvs)
	frameSet[RID](4, abi, texture)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.canvas_item_add_primitive, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self RenderingServer) CanvasItemAddPolygon(item RID, points PackedVector2Array, colors PackedColorArray, uvs PackedVector2Array, texture RID) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, item)
	frameSet[PackedVector2Array](1, abi, points)
	frameSet[PackedColorArray](2, abi, colors)
	frameSet[PackedVector2Array](3, abi, uvs)
	frameSet[RID](4, abi, texture)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.canvas_item_add_polygon, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self RenderingServer) CanvasItemAddTriangleArray(item RID, indices PackedInt32Array, points PackedVector2Array, colors PackedColorArray, uvs PackedVector2Array, bones PackedInt32Array, weights PackedFloat32Array, texture RID, count Int) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, item)
	frameSet[PackedInt32Array](1, abi, indices)
	frameSet[PackedVector2Array](2, abi, points)
	frameSet[PackedColorArray](3, abi, colors)
	frameSet[PackedVector2Array](4, abi, uvs)
	frameSet[PackedInt32Array](5, abi, bones)
	frameSet[PackedFloat32Array](6, abi, weights)
	frameSet[RID](7, abi, texture)
	frameSet[Int](8, abi, count)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.canvas_item_add_triangle_array, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self RenderingServer) CanvasItemAddMesh(item RID, mesh RID, transform Transform2D, modulate Color, texture RID) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, item)
	frameSet[RID](1, abi, mesh)
	frameSet[Transform2D](2, abi, transform)
	frameSet[Color](3, abi, modulate)
	frameSet[RID](4, abi, texture)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.canvas_item_add_mesh, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self RenderingServer) CanvasItemAddMultimesh(item RID, mesh RID, texture RID) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, item)
	frameSet[RID](1, abi, mesh)
	frameSet[RID](2, abi, texture)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.canvas_item_add_multimesh, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self RenderingServer) CanvasItemAddParticles(item RID, particles RID, texture RID) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, item)
	frameSet[RID](1, abi, particles)
	frameSet[RID](2, abi, texture)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.canvas_item_add_particles, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self RenderingServer) CanvasItemAddSetTransform(item RID, transform Transform2D) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, item)
	frameSet[Transform2D](1, abi, transform)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.canvas_item_add_set_transform, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self RenderingServer) CanvasItemAddClipIgnore(item RID, ignore bool) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, item)
	frameSet[bool](1, abi, ignore)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.canvas_item_add_clip_ignore, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self RenderingServer) CanvasItemAddAnimationSlice(item RID, animation_length Float, slice_begin Float, slice_end Float, offset Float) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, item)
	frameSet[Float](1, abi, animation_length)
	frameSet[Float](2, abi, slice_begin)
	frameSet[Float](3, abi, slice_end)
	frameSet[Float](4, abi, offset)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.canvas_item_add_animation_slice, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self RenderingServer) CanvasItemSetSortChildrenByY(item RID, enabled bool) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, item)
	frameSet[bool](1, abi, enabled)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.canvas_item_set_sort_children_by_y, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self RenderingServer) CanvasItemSetZIndex(item RID, z_index Int) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, item)
	frameSet[Int](1, abi, z_index)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.canvas_item_set_z_index, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self RenderingServer) CanvasItemSetZAsRelativeToParent(item RID, enabled bool) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, item)
	frameSet[bool](1, abi, enabled)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.canvas_item_set_z_as_relative_to_parent, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self RenderingServer) CanvasItemSetCopyToBackbuffer(item RID, enabled bool, rect Rect2) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, item)
	frameSet[bool](1, abi, enabled)
	frameSet[Rect2](2, abi, rect)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.canvas_item_set_copy_to_backbuffer, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self RenderingServer) CanvasItemClear(item RID) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, item)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.canvas_item_clear, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self RenderingServer) CanvasItemSetDrawIndex(item RID, index Int) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, item)
	frameSet[Int](1, abi, index)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.canvas_item_set_draw_index, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self RenderingServer) CanvasItemSetMaterial(item RID, material RID) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, item)
	frameSet[RID](1, abi, material)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.canvas_item_set_material, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self RenderingServer) CanvasItemSetUseParentMaterial(item RID, enabled bool) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, item)
	frameSet[bool](1, abi, enabled)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.canvas_item_set_use_parent_material, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self RenderingServer) CanvasItemSetVisibilityNotifier(item RID, enable bool, area Rect2, enter_callable Callable, exit_callable Callable) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, item)
	frameSet[bool](1, abi, enable)
	frameSet[Rect2](2, abi, area)
	frameSet[Callable](3, abi, enter_callable)
	frameSet[Callable](4, abi, exit_callable)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.canvas_item_set_visibility_notifier, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self RenderingServer) CanvasItemSetCanvasGroupMode(item RID, mode RenderingServerCanvasGroupMode, clear_margin Float, fit_empty bool, fit_margin Float, blur_mipmaps bool) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, item)
	frameSet[RenderingServerCanvasGroupMode](1, abi, mode)
	frameSet[Float](2, abi, clear_margin)
	frameSet[bool](3, abi, fit_empty)
	frameSet[Float](4, abi, fit_margin)
	frameSet[bool](5, abi, blur_mipmaps)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.canvas_item_set_canvas_group_mode, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self RenderingServer) CanvasLightCreate() RID {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.canvas_light_create, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[RID](abi)
	abi.free()
	return ret
}

func (self RenderingServer) CanvasLightAttachToCanvas(light RID, canvas RID) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, light)
	frameSet[RID](1, abi, canvas)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.canvas_light_attach_to_canvas, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self RenderingServer) CanvasLightSetEnabled(light RID, enabled bool) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, light)
	frameSet[bool](1, abi, enabled)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.canvas_light_set_enabled, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self RenderingServer) CanvasLightSetTextureScale(light RID, scale Float) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, light)
	frameSet[Float](1, abi, scale)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.canvas_light_set_texture_scale, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self RenderingServer) CanvasLightSetTransform(light RID, transform Transform2D) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, light)
	frameSet[Transform2D](1, abi, transform)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.canvas_light_set_transform, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self RenderingServer) CanvasLightSetTexture(light RID, texture RID) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, light)
	frameSet[RID](1, abi, texture)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.canvas_light_set_texture, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self RenderingServer) CanvasLightSetTextureOffset(light RID, offset Vector2) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, light)
	frameSet[Vector2](1, abi, offset)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.canvas_light_set_texture_offset, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self RenderingServer) CanvasLightSetColor(light RID, color Color) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, light)
	frameSet[Color](1, abi, color)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.canvas_light_set_color, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self RenderingServer) CanvasLightSetHeight(light RID, height Float) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, light)
	frameSet[Float](1, abi, height)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.canvas_light_set_height, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self RenderingServer) CanvasLightSetEnergy(light RID, energy Float) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, light)
	frameSet[Float](1, abi, energy)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.canvas_light_set_energy, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self RenderingServer) CanvasLightSetZRange(light RID, min_z Int, max_z Int) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, light)
	frameSet[Int](1, abi, min_z)
	frameSet[Int](2, abi, max_z)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.canvas_light_set_z_range, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self RenderingServer) CanvasLightSetLayerRange(light RID, min_layer Int, max_layer Int) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, light)
	frameSet[Int](1, abi, min_layer)
	frameSet[Int](2, abi, max_layer)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.canvas_light_set_layer_range, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self RenderingServer) CanvasLightSetItemCullMask(light RID, mask Int) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, light)
	frameSet[Int](1, abi, mask)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.canvas_light_set_item_cull_mask, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self RenderingServer) CanvasLightSetItemShadowCullMask(light RID, mask Int) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, light)
	frameSet[Int](1, abi, mask)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.canvas_light_set_item_shadow_cull_mask, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self RenderingServer) CanvasLightSetMode(light RID, mode RenderingServerCanvasLightMode) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, light)
	frameSet[RenderingServerCanvasLightMode](1, abi, mode)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.canvas_light_set_mode, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self RenderingServer) CanvasLightSetShadowEnabled(light RID, enabled bool) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, light)
	frameSet[bool](1, abi, enabled)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.canvas_light_set_shadow_enabled, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self RenderingServer) CanvasLightSetShadowFilter(light RID, filter RenderingServerCanvasLightShadowFilter) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, light)
	frameSet[RenderingServerCanvasLightShadowFilter](1, abi, filter)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.canvas_light_set_shadow_filter, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self RenderingServer) CanvasLightSetShadowColor(light RID, color Color) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, light)
	frameSet[Color](1, abi, color)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.canvas_light_set_shadow_color, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self RenderingServer) CanvasLightSetShadowSmooth(light RID, smooth Float) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, light)
	frameSet[Float](1, abi, smooth)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.canvas_light_set_shadow_smooth, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self RenderingServer) CanvasLightSetBlendMode(light RID, mode RenderingServerCanvasLightBlendMode) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, light)
	frameSet[RenderingServerCanvasLightBlendMode](1, abi, mode)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.canvas_light_set_blend_mode, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self RenderingServer) CanvasLightOccluderCreate() RID {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.canvas_light_occluder_create, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[RID](abi)
	abi.free()
	return ret
}

func (self RenderingServer) CanvasLightOccluderAttachToCanvas(occluder RID, canvas RID) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, occluder)
	frameSet[RID](1, abi, canvas)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.canvas_light_occluder_attach_to_canvas, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self RenderingServer) CanvasLightOccluderSetEnabled(occluder RID, enabled bool) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, occluder)
	frameSet[bool](1, abi, enabled)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.canvas_light_occluder_set_enabled, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self RenderingServer) CanvasLightOccluderSetPolygon(occluder RID, polygon RID) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, occluder)
	frameSet[RID](1, abi, polygon)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.canvas_light_occluder_set_polygon, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self RenderingServer) CanvasLightOccluderSetAsSdfCollision(occluder RID, enable bool) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, occluder)
	frameSet[bool](1, abi, enable)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.canvas_light_occluder_set_as_sdf_collision, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self RenderingServer) CanvasLightOccluderSetTransform(occluder RID, transform Transform2D) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, occluder)
	frameSet[Transform2D](1, abi, transform)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.canvas_light_occluder_set_transform, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self RenderingServer) CanvasLightOccluderSetLightMask(occluder RID, mask Int) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, occluder)
	frameSet[Int](1, abi, mask)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.canvas_light_occluder_set_light_mask, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self RenderingServer) CanvasOccluderPolygonCreate() RID {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.canvas_occluder_polygon_create, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[RID](abi)
	abi.free()
	return ret
}

func (self RenderingServer) CanvasOccluderPolygonSetShape(occluder_polygon RID, shape PackedVector2Array, closed bool) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, occluder_polygon)
	frameSet[PackedVector2Array](1, abi, shape)
	frameSet[bool](2, abi, closed)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.canvas_occluder_polygon_set_shape, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self RenderingServer) CanvasOccluderPolygonSetCullMode(occluder_polygon RID, mode RenderingServerCanvasOccluderPolygonCullMode) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, occluder_polygon)
	frameSet[RenderingServerCanvasOccluderPolygonCullMode](1, abi, mode)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.canvas_occluder_polygon_set_cull_mode, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self RenderingServer) CanvasSetShadowTextureSize(size Int) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Int](0, abi, size)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.canvas_set_shadow_texture_size, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self RenderingServer) GlobalShaderParameterAdd(name StringName, atype RenderingServerGlobalShaderParameterType, default_value Variant) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[StringName](0, abi, name)
	frameSet[RenderingServerGlobalShaderParameterType](1, abi, atype)
	frameSet[Variant](2, abi, default_value)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.global_shader_parameter_add, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self RenderingServer) GlobalShaderParameterRemove(name StringName) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[StringName](0, abi, name)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.global_shader_parameter_remove, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self RenderingServer) GlobalShaderParameterGetList() ArrayOf[StringName] {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.global_shader_parameter_get_list, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[ArrayOf[StringName]](abi)
	abi.free()
	return ret
}

func (self RenderingServer) GlobalShaderParameterSet(name StringName, value Variant) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[StringName](0, abi, name)
	frameSet[Variant](1, abi, value)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.global_shader_parameter_set, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self RenderingServer) GlobalShaderParameterSetOverride(name StringName, value Variant) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[StringName](0, abi, name)
	frameSet[Variant](1, abi, value)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.global_shader_parameter_set_override, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self RenderingServer) GlobalShaderParameterGet(ctx Context, name StringName) Variant {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[StringName](0, abi, name)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.global_shader_parameter_get, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[[3]uintptr](abi)
	abi.free()
	return mmm.Make[API, Variant, [3]uintptr](ctx, selfPtr.API, ret)
}

func (self RenderingServer) GlobalShaderParameterGetType(name StringName) RenderingServerGlobalShaderParameterType {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[StringName](0, abi, name)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.global_shader_parameter_get_type, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[RenderingServerGlobalShaderParameterType](abi)
	abi.free()
	return ret
}

func (self RenderingServer) FreeRid(rid RID) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, rid)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.free_rid, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self RenderingServer) RequestFrameDrawnCallback(callable Callable) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Callable](0, abi, callable)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.request_frame_drawn_callback, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self RenderingServer) HasChanged() bool {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.has_changed, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self RenderingServer) GetRenderingInfo(info RenderingServerRenderingInfo) Int {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RenderingServerRenderingInfo](0, abi, info)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.get_rendering_info, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Int](abi)
	abi.free()
	return ret
}

func (self RenderingServer) GetVideoAdapterName(ctx Context) String {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.get_video_adapter_name, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[uintptr](abi)
	abi.free()
	return mmm.Make[API, String, uintptr](ctx, selfPtr.API, ret)
}

func (self RenderingServer) GetVideoAdapterVendor(ctx Context) String {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.get_video_adapter_vendor, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[uintptr](abi)
	abi.free()
	return mmm.Make[API, String, uintptr](ctx, selfPtr.API, ret)
}

func (self RenderingServer) GetVideoAdapterType() RenderingDeviceDeviceType {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.get_video_adapter_type, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[RenderingDeviceDeviceType](abi)
	abi.free()
	return ret
}

func (self RenderingServer) GetVideoAdapterApiVersion(ctx Context) String {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.get_video_adapter_api_version, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[uintptr](abi)
	abi.free()
	return mmm.Make[API, String, uintptr](ctx, selfPtr.API, ret)
}

func (self RenderingServer) MakeSphereMesh(latitudes Int, longitudes Int, radius Float) RID {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Int](0, abi, latitudes)
	frameSet[Int](1, abi, longitudes)
	frameSet[Float](2, abi, radius)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.make_sphere_mesh, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[RID](abi)
	abi.free()
	return ret
}

func (self RenderingServer) GetTestCube() RID {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.get_test_cube, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[RID](abi)
	abi.free()
	return ret
}

func (self RenderingServer) GetTestTexture() RID {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.get_test_texture, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[RID](abi)
	abi.free()
	return ret
}

func (self RenderingServer) GetWhiteTexture() RID {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.get_white_texture, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[RID](abi)
	abi.free()
	return ret
}

func (self RenderingServer) SetBootImage(image Image, color Color, scale bool, use_filter bool) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Image](0, abi, image)
	frameSet[Color](1, abi, color)
	frameSet[bool](2, abi, scale)
	frameSet[bool](3, abi, use_filter)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.set_boot_image, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self RenderingServer) GetDefaultClearColor() Color {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.get_default_clear_color, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Color](abi)
	abi.free()
	return ret
}

func (self RenderingServer) SetDefaultClearColor(color Color) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Color](0, abi, color)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.set_default_clear_color, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self RenderingServer) HasFeature(feature RenderingServerFeatures) bool {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RenderingServerFeatures](0, abi, feature)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.has_feature, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self RenderingServer) HasOsFeature(feature String) bool {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[String](0, abi, feature)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.has_os_feature, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self RenderingServer) SetDebugGenerateWireframes(generate bool) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[bool](0, abi, generate)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.set_debug_generate_wireframes, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self RenderingServer) IsRenderLoopEnabled() bool {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.is_render_loop_enabled, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self RenderingServer) SetRenderLoopEnabled(enabled bool) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[bool](0, abi, enabled)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.set_render_loop_enabled, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self RenderingServer) GetFrameSetupTimeCpu() Float {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.get_frame_setup_time_cpu, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Float](abi)
	abi.free()
	return ret
}

func (self RenderingServer) ForceSync() {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.force_sync, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self RenderingServer) ForceDraw(swap_buffers bool, frame_step Float) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[bool](0, abi, swap_buffers)
	frameSet[Float](1, abi, frame_step)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.force_draw, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self RenderingServer) GetRenderingDevice() RenderingDevice {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.get_rendering_device, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[RenderingDevice](abi)
	abi.free()
	return ret
}

func (self RenderingServer) CreateLocalRenderingDevice() RenderingDevice {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.create_local_rendering_device, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[RenderingDevice](abi)
	abi.free()
	return ret
}

func (self RenderingServer) CallOnRenderThread(callable Callable) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Callable](0, abi, callable)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.RenderingServer.call_on_render_thread, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self RenderingServer) virtual(name string) reflect.Value {
	switch name {
	default:
		return self.Super().virtual(name)
	}
}

type Resource struct{ Class[Resource, RefCounted] }

func (self Resource) RefCounted() RefCounted { return *self.Super() }

func (self Resource) Object() Object { return *self.Super().Super() }

func (Resource) _setup_local_to_scene(impl func(ptr unsafe.Pointer, ctx Context), api *API) (cb ExtensionClassCallVirtualFunc) {
	cb.Set(func(class cgo.Handle, p_args godotArgs, p_back godotBack) {
		ctx := newContext(api)
		self := reflect.ValueOf(class.Value()).UnsafePointer()
		impl(self, ctx)
		ctx.Free()
	})
	return
}

func (self Resource) SetPath(path String) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[String](0, abi, path)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Resource.set_path, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self Resource) TakeOverPath(path String) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[String](0, abi, path)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Resource.take_over_path, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self Resource) GetPath(ctx Context) String {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Resource.get_path, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[uintptr](abi)
	abi.free()
	return mmm.Make[API, String, uintptr](ctx, selfPtr.API, ret)
}

func (self Resource) SetName(name String) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[String](0, abi, name)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Resource.set_name, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self Resource) GetName(ctx Context) String {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Resource.get_name, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[uintptr](abi)
	abi.free()
	return mmm.Make[API, String, uintptr](ctx, selfPtr.API, ret)
}

func (self Resource) GetRid() RID {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Resource.get_rid, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[RID](abi)
	abi.free()
	return ret
}

func (self Resource) SetLocalToScene(enable bool) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[bool](0, abi, enable)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Resource.set_local_to_scene, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self Resource) IsLocalToScene() bool {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Resource.is_local_to_scene, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self Resource) GetLocalScene() Node {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Resource.get_local_scene, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Node](abi)
	abi.free()
	return ret
}

func (self Resource) SetupLocalToScene() {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Resource.setup_local_to_scene, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self Resource) EmitChanged() {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Resource.emit_changed, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self Resource) Duplicate(subresources bool) Resource {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[bool](0, abi, subresources)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Resource.duplicate, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Resource](abi)
	abi.free()
	return ret
}

func (self Resource) virtual(name string) reflect.Value {
	switch name {
	case "_setup_local_to_scene":
		return reflect.ValueOf(self._setup_local_to_scene)
	default:
		return self.Super().virtual(name)
	}
}

type SceneStateGenEditState int64
type SceneState struct{ Class[SceneState, RefCounted] }

func (self SceneState) RefCounted() RefCounted { return *self.Super() }

func (self SceneState) Object() Object { return *self.Super().Super() }

func (self SceneState) GetNodeCount() Int {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.SceneState.get_node_count, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Int](abi)
	abi.free()
	return ret
}

func (self SceneState) GetNodeType(ctx Context, idx Int) StringName {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Int](0, abi, idx)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.SceneState.get_node_type, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[uintptr](abi)
	abi.free()
	return mmm.Make[API, StringName, uintptr](ctx, selfPtr.API, ret)
}

func (self SceneState) GetNodeName(ctx Context, idx Int) StringName {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Int](0, abi, idx)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.SceneState.get_node_name, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[uintptr](abi)
	abi.free()
	return mmm.Make[API, StringName, uintptr](ctx, selfPtr.API, ret)
}

func (self SceneState) GetNodePath(ctx Context, idx Int, for_parent bool) NodePath {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Int](0, abi, idx)
	frameSet[bool](1, abi, for_parent)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.SceneState.get_node_path, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[uintptr](abi)
	abi.free()
	return mmm.Make[API, NodePath, uintptr](ctx, selfPtr.API, ret)
}

func (self SceneState) GetNodeOwnerPath(ctx Context, idx Int) NodePath {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Int](0, abi, idx)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.SceneState.get_node_owner_path, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[uintptr](abi)
	abi.free()
	return mmm.Make[API, NodePath, uintptr](ctx, selfPtr.API, ret)
}

func (self SceneState) IsNodeInstancePlaceholder(idx Int) bool {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Int](0, abi, idx)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.SceneState.is_node_instance_placeholder, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self SceneState) GetNodeInstancePlaceholder(ctx Context, idx Int) String {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Int](0, abi, idx)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.SceneState.get_node_instance_placeholder, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[uintptr](abi)
	abi.free()
	return mmm.Make[API, String, uintptr](ctx, selfPtr.API, ret)
}

func (self SceneState) GetNodeInstance(idx Int) PackedScene {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Int](0, abi, idx)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.SceneState.get_node_instance, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[PackedScene](abi)
	abi.free()
	return ret
}

func (self SceneState) GetNodeGroups(ctx Context, idx Int) PackedStringArray {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Int](0, abi, idx)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.SceneState.get_node_groups, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[[2]uintptr](abi)
	abi.free()
	return mmm.Make[API, PackedStringArray, [2]uintptr](ctx, selfPtr.API, ret)
}

func (self SceneState) GetNodeIndex(idx Int) Int {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Int](0, abi, idx)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.SceneState.get_node_index, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Int](abi)
	abi.free()
	return ret
}

func (self SceneState) GetNodePropertyCount(idx Int) Int {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Int](0, abi, idx)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.SceneState.get_node_property_count, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Int](abi)
	abi.free()
	return ret
}

func (self SceneState) GetNodePropertyName(ctx Context, idx Int, prop_idx Int) StringName {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Int](0, abi, idx)
	frameSet[Int](1, abi, prop_idx)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.SceneState.get_node_property_name, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[uintptr](abi)
	abi.free()
	return mmm.Make[API, StringName, uintptr](ctx, selfPtr.API, ret)
}

func (self SceneState) GetNodePropertyValue(ctx Context, idx Int, prop_idx Int) Variant {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Int](0, abi, idx)
	frameSet[Int](1, abi, prop_idx)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.SceneState.get_node_property_value, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[[3]uintptr](abi)
	abi.free()
	return mmm.Make[API, Variant, [3]uintptr](ctx, selfPtr.API, ret)
}

func (self SceneState) GetConnectionCount() Int {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.SceneState.get_connection_count, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Int](abi)
	abi.free()
	return ret
}

func (self SceneState) GetConnectionSource(ctx Context, idx Int) NodePath {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Int](0, abi, idx)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.SceneState.get_connection_source, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[uintptr](abi)
	abi.free()
	return mmm.Make[API, NodePath, uintptr](ctx, selfPtr.API, ret)
}

func (self SceneState) GetConnectionSignal(ctx Context, idx Int) StringName {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Int](0, abi, idx)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.SceneState.get_connection_signal, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[uintptr](abi)
	abi.free()
	return mmm.Make[API, StringName, uintptr](ctx, selfPtr.API, ret)
}

func (self SceneState) GetConnectionTarget(ctx Context, idx Int) NodePath {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Int](0, abi, idx)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.SceneState.get_connection_target, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[uintptr](abi)
	abi.free()
	return mmm.Make[API, NodePath, uintptr](ctx, selfPtr.API, ret)
}

func (self SceneState) GetConnectionMethod(ctx Context, idx Int) StringName {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Int](0, abi, idx)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.SceneState.get_connection_method, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[uintptr](abi)
	abi.free()
	return mmm.Make[API, StringName, uintptr](ctx, selfPtr.API, ret)
}

func (self SceneState) GetConnectionFlags(idx Int) Int {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Int](0, abi, idx)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.SceneState.get_connection_flags, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Int](abi)
	abi.free()
	return ret
}

func (self SceneState) GetConnectionBinds(ctx Context, idx Int) Array {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Int](0, abi, idx)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.SceneState.get_connection_binds, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[uintptr](abi)
	abi.free()
	return mmm.Make[API, Array, uintptr](ctx, selfPtr.API, ret)
}

func (self SceneState) GetConnectionUnbinds(idx Int) Int {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Int](0, abi, idx)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.SceneState.get_connection_unbinds, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Int](abi)
	abi.free()
	return ret
}

func (self SceneState) virtual(name string) reflect.Value {
	switch name {
	default:
		return self.Super().virtual(name)
	}
}

type SceneTreeGroupCallFlags int64
type SceneTree struct{ Class[SceneTree, MainLoop] }

func (self SceneTree) MainLoop() MainLoop { return *self.Super() }

func (self SceneTree) Object() Object { return *self.Super().Super() }

func (self SceneTree) GetRoot() Window {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.SceneTree.get_root, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Window](abi)
	abi.free()
	return ret
}

func (self SceneTree) HasGroup(name StringName) bool {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[StringName](0, abi, name)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.SceneTree.has_group, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self SceneTree) IsAutoAcceptQuit() bool {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.SceneTree.is_auto_accept_quit, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self SceneTree) SetAutoAcceptQuit(enabled bool) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[bool](0, abi, enabled)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.SceneTree.set_auto_accept_quit, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self SceneTree) IsQuitOnGoBack() bool {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.SceneTree.is_quit_on_go_back, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self SceneTree) SetQuitOnGoBack(enabled bool) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[bool](0, abi, enabled)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.SceneTree.set_quit_on_go_back, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self SceneTree) SetDebugCollisionsHint(enable bool) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[bool](0, abi, enable)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.SceneTree.set_debug_collisions_hint, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self SceneTree) IsDebuggingCollisionsHint() bool {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.SceneTree.is_debugging_collisions_hint, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self SceneTree) SetDebugPathsHint(enable bool) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[bool](0, abi, enable)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.SceneTree.set_debug_paths_hint, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self SceneTree) IsDebuggingPathsHint() bool {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.SceneTree.is_debugging_paths_hint, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self SceneTree) SetDebugNavigationHint(enable bool) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[bool](0, abi, enable)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.SceneTree.set_debug_navigation_hint, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self SceneTree) IsDebuggingNavigationHint() bool {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.SceneTree.is_debugging_navigation_hint, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self SceneTree) SetEditedSceneRoot(scene Node) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Node](0, abi, scene)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.SceneTree.set_edited_scene_root, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self SceneTree) GetEditedSceneRoot() Node {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.SceneTree.get_edited_scene_root, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Node](abi)
	abi.free()
	return ret
}

func (self SceneTree) SetPause(enable bool) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[bool](0, abi, enable)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.SceneTree.set_pause, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self SceneTree) IsPaused() bool {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.SceneTree.is_paused, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self SceneTree) CreateTimer(time_sec Float, process_always bool, process_in_physics bool, ignore_time_scale bool) SceneTreeTimer {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Float](0, abi, time_sec)
	frameSet[bool](1, abi, process_always)
	frameSet[bool](2, abi, process_in_physics)
	frameSet[bool](3, abi, ignore_time_scale)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.SceneTree.create_timer, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[SceneTreeTimer](abi)
	abi.free()
	return ret
}

func (self SceneTree) CreateTween() Tween {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.SceneTree.create_tween, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Tween](abi)
	abi.free()
	return ret
}

func (self SceneTree) GetProcessedTweens() ArrayOf[Tween] {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.SceneTree.get_processed_tweens, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[ArrayOf[Tween]](abi)
	abi.free()
	return ret
}

func (self SceneTree) GetNodeCount() Int {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.SceneTree.get_node_count, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Int](abi)
	abi.free()
	return ret
}

func (self SceneTree) GetFrame() Int {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.SceneTree.get_frame, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Int](abi)
	abi.free()
	return ret
}

func (self SceneTree) Quit(exit_code Int) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Int](0, abi, exit_code)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.SceneTree.quit, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self SceneTree) QueueDelete(obj Object) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Object](0, abi, obj)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.SceneTree.queue_delete, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self SceneTree) CallGroupFlags(flags Int, group StringName, method StringName) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Int](0, abi, flags)
	frameSet[StringName](1, abi, group)
	frameSet[StringName](2, abi, method)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.SceneTree.call_group_flags, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self SceneTree) NotifyGroupFlags(call_flags Int, group StringName, notification Int) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Int](0, abi, call_flags)
	frameSet[StringName](1, abi, group)
	frameSet[Int](2, abi, notification)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.SceneTree.notify_group_flags, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self SceneTree) SetGroupFlags(call_flags Int, group StringName, property String, value Variant) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Int](0, abi, call_flags)
	frameSet[StringName](1, abi, group)
	frameSet[String](2, abi, property)
	frameSet[Variant](3, abi, value)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.SceneTree.set_group_flags, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self SceneTree) CallGroup(group StringName, method StringName) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[StringName](0, abi, group)
	frameSet[StringName](1, abi, method)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.SceneTree.call_group, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self SceneTree) NotifyGroup(group StringName, notification Int) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[StringName](0, abi, group)
	frameSet[Int](1, abi, notification)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.SceneTree.notify_group, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self SceneTree) SetGroup(group StringName, property String, value Variant) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[StringName](0, abi, group)
	frameSet[String](1, abi, property)
	frameSet[Variant](2, abi, value)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.SceneTree.set_group, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self SceneTree) GetNodesInGroup(group StringName) ArrayOf[Node] {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[StringName](0, abi, group)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.SceneTree.get_nodes_in_group, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[ArrayOf[Node]](abi)
	abi.free()
	return ret
}

func (self SceneTree) GetFirstNodeInGroup(group StringName) Node {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[StringName](0, abi, group)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.SceneTree.get_first_node_in_group, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Node](abi)
	abi.free()
	return ret
}

func (self SceneTree) SetCurrentScene(child_node Node) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Node](0, abi, child_node)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.SceneTree.set_current_scene, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self SceneTree) GetCurrentScene() Node {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.SceneTree.get_current_scene, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Node](abi)
	abi.free()
	return ret
}

func (self SceneTree) ChangeSceneToFile(path String) int64 {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[String](0, abi, path)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.SceneTree.change_scene_to_file, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[int64](abi)
	abi.free()
	return ret
}

func (self SceneTree) ChangeSceneToPacked(packed_scene PackedScene) int64 {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[PackedScene](0, abi, packed_scene)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.SceneTree.change_scene_to_packed, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[int64](abi)
	abi.free()
	return ret
}

func (self SceneTree) ReloadCurrentScene() int64 {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.SceneTree.reload_current_scene, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[int64](abi)
	abi.free()
	return ret
}

func (self SceneTree) UnloadCurrentScene() {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.SceneTree.unload_current_scene, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self SceneTree) SetMultiplayer(multiplayer MultiplayerAPI, root_path NodePath) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[MultiplayerAPI](0, abi, multiplayer)
	frameSet[NodePath](1, abi, root_path)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.SceneTree.set_multiplayer, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self SceneTree) GetMultiplayer(for_path NodePath) MultiplayerAPI {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[NodePath](0, abi, for_path)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.SceneTree.get_multiplayer, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[MultiplayerAPI](abi)
	abi.free()
	return ret
}

func (self SceneTree) SetMultiplayerPollEnabled(enabled bool) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[bool](0, abi, enabled)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.SceneTree.set_multiplayer_poll_enabled, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self SceneTree) IsMultiplayerPollEnabled() bool {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.SceneTree.is_multiplayer_poll_enabled, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self SceneTree) virtual(name string) reflect.Value {
	switch name {
	default:
		return self.Super().virtual(name)
	}
}

type SceneTreeTimer struct {
	Class[SceneTreeTimer, RefCounted]
}

func (self SceneTreeTimer) RefCounted() RefCounted { return *self.Super() }

func (self SceneTreeTimer) Object() Object { return *self.Super().Super() }

func (self SceneTreeTimer) SetTimeLeft(time Float) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Float](0, abi, time)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.SceneTreeTimer.set_time_left, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self SceneTreeTimer) GetTimeLeft() Float {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.SceneTreeTimer.get_time_left, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Float](abi)
	abi.free()
	return ret
}

func (self SceneTreeTimer) virtual(name string) reflect.Value {
	switch name {
	default:
		return self.Super().virtual(name)
	}
}

type Script struct{ Class[Script, Resource] }

func (self Script) Resource() Resource { return *self.Super() }

func (self Script) RefCounted() RefCounted { return *self.Super().Super() }

func (self Script) Object() Object { return *self.Super().Super().Super() }

func (self Script) CanInstantiate() bool {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Script.can_instantiate, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self Script) InstanceHas(base_object Object) bool {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Object](0, abi, base_object)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Script.instance_has, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self Script) HasSourceCode() bool {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Script.has_source_code, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self Script) GetSourceCode(ctx Context) String {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Script.get_source_code, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[uintptr](abi)
	abi.free()
	return mmm.Make[API, String, uintptr](ctx, selfPtr.API, ret)
}

func (self Script) SetSourceCode(source String) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[String](0, abi, source)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Script.set_source_code, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self Script) Reload(keep_state bool) int64 {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[bool](0, abi, keep_state)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Script.reload, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[int64](abi)
	abi.free()
	return ret
}

func (self Script) GetBaseScript() Script {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Script.get_base_script, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Script](abi)
	abi.free()
	return ret
}

func (self Script) GetInstanceBaseType(ctx Context) StringName {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Script.get_instance_base_type, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[uintptr](abi)
	abi.free()
	return mmm.Make[API, StringName, uintptr](ctx, selfPtr.API, ret)
}

func (self Script) HasScriptSignal(signal_name StringName) bool {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[StringName](0, abi, signal_name)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Script.has_script_signal, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self Script) GetScriptPropertyList() ArrayOf[Dictionary] {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Script.get_script_property_list, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[ArrayOf[Dictionary]](abi)
	abi.free()
	return ret
}

func (self Script) GetScriptMethodList() ArrayOf[Dictionary] {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Script.get_script_method_list, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[ArrayOf[Dictionary]](abi)
	abi.free()
	return ret
}

func (self Script) GetScriptSignalList() ArrayOf[Dictionary] {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Script.get_script_signal_list, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[ArrayOf[Dictionary]](abi)
	abi.free()
	return ret
}

func (self Script) GetScriptConstantMap(ctx Context) Dictionary {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Script.get_script_constant_map, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[uintptr](abi)
	abi.free()
	return mmm.Make[API, Dictionary, uintptr](ctx, selfPtr.API, ret)
}

func (self Script) GetPropertyDefaultValue(ctx Context, property StringName) Variant {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[StringName](0, abi, property)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Script.get_property_default_value, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[[3]uintptr](abi)
	abi.free()
	return mmm.Make[API, Variant, [3]uintptr](ctx, selfPtr.API, ret)
}

func (self Script) IsTool() bool {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Script.is_tool, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self Script) IsAbstract() bool {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Script.is_abstract, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self Script) virtual(name string) reflect.Value {
	switch name {
	default:
		return self.Super().virtual(name)
	}
}

type ScriptLanguage struct{ Class[ScriptLanguage, Object] }

func (self ScriptLanguage) Object() Object { return *self.Super() }

func (self ScriptLanguage) virtual(name string) reflect.Value {
	switch name {
	default:
		return self.Super().virtual(name)
	}
}

type ShaderMode int64
type Shader struct{ Class[Shader, Resource] }

func (self Shader) Resource() Resource { return *self.Super() }

func (self Shader) RefCounted() RefCounted { return *self.Super().Super() }

func (self Shader) Object() Object { return *self.Super().Super().Super() }

func (self Shader) GetMode() ShaderMode {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Shader.get_mode, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[ShaderMode](abi)
	abi.free()
	return ret
}

func (self Shader) SetCode(code String) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[String](0, abi, code)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Shader.set_code, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self Shader) GetCode(ctx Context) String {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Shader.get_code, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[uintptr](abi)
	abi.free()
	return mmm.Make[API, String, uintptr](ctx, selfPtr.API, ret)
}

func (self Shader) SetDefaultTextureParameter(name StringName, texture Texture2D, index Int) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[StringName](0, abi, name)
	frameSet[Texture2D](1, abi, texture)
	frameSet[Int](2, abi, index)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Shader.set_default_texture_parameter, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self Shader) GetDefaultTextureParameter(name StringName, index Int) Texture2D {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[StringName](0, abi, name)
	frameSet[Int](1, abi, index)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Shader.get_default_texture_parameter, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Texture2D](abi)
	abi.free()
	return ret
}

func (self Shader) GetShaderUniformList(ctx Context, get_groups bool) Array {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[bool](0, abi, get_groups)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Shader.get_shader_uniform_list, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[uintptr](abi)
	abi.free()
	return mmm.Make[API, Array, uintptr](ctx, selfPtr.API, ret)
}

func (self Shader) virtual(name string) reflect.Value {
	switch name {
	default:
		return self.Super().virtual(name)
	}
}

type Shape3D struct{ Class[Shape3D, Resource] }

func (self Shape3D) Resource() Resource { return *self.Super() }

func (self Shape3D) RefCounted() RefCounted { return *self.Super().Super() }

func (self Shape3D) Object() Object { return *self.Super().Super().Super() }

func (self Shape3D) SetCustomSolverBias(bias Float) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Float](0, abi, bias)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Shape3D.set_custom_solver_bias, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self Shape3D) GetCustomSolverBias() Float {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Shape3D.get_custom_solver_bias, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Float](abi)
	abi.free()
	return ret
}

func (self Shape3D) SetMargin(margin Float) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Float](0, abi, margin)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Shape3D.set_margin, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self Shape3D) GetMargin() Float {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Shape3D.get_margin, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Float](abi)
	abi.free()
	return ret
}

func (self Shape3D) GetDebugMesh() ArrayMesh {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Shape3D.get_debug_mesh, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[ArrayMesh](abi)
	abi.free()
	return ret
}

func (self Shape3D) virtual(name string) reflect.Value {
	switch name {
	default:
		return self.Super().virtual(name)
	}
}

type SkyRadianceSize int64

type SkyProcessMode int64
type Sky struct{ Class[Sky, Resource] }

func (self Sky) Resource() Resource { return *self.Super() }

func (self Sky) RefCounted() RefCounted { return *self.Super().Super() }

func (self Sky) Object() Object { return *self.Super().Super().Super() }

func (self Sky) SetRadianceSize(size SkyRadianceSize) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[SkyRadianceSize](0, abi, size)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Sky.set_radiance_size, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self Sky) GetRadianceSize() SkyRadianceSize {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Sky.get_radiance_size, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[SkyRadianceSize](abi)
	abi.free()
	return ret
}

func (self Sky) SetProcessMode(mode SkyProcessMode) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[SkyProcessMode](0, abi, mode)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Sky.set_process_mode, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self Sky) GetProcessMode() SkyProcessMode {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Sky.get_process_mode, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[SkyProcessMode](abi)
	abi.free()
	return ret
}

func (self Sky) SetMaterial(material Material) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Material](0, abi, material)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Sky.set_material, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self Sky) GetMaterial() Material {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Sky.get_material, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Material](abi)
	abi.free()
	return ret
}

func (self Sky) virtual(name string) reflect.Value {
	switch name {
	default:
		return self.Super().virtual(name)
	}
}

type StyleBox struct{ Class[StyleBox, Resource] }

func (self StyleBox) Resource() Resource { return *self.Super() }

func (self StyleBox) RefCounted() RefCounted { return *self.Super().Super() }

func (self StyleBox) Object() Object { return *self.Super().Super().Super() }

func (StyleBox) _draw(impl func(ptr unsafe.Pointer, ctx Context, to_canvas_item RID, rect Rect2), api *API) (cb ExtensionClassCallVirtualFunc) {
	cb.Set(func(class cgo.Handle, p_args godotArgs, p_back godotBack) {
		ctx := newContext(api)
		var to_canvas_item = godotGet[RID](p_args, 0)
		var rect = godotGet[Rect2](p_args, 1)
		self := reflect.ValueOf(class.Value()).UnsafePointer()
		impl(self, ctx, to_canvas_item, rect)
		ctx.Free()
	})
	return
}

func (StyleBox) _get_draw_rect(impl func(ptr unsafe.Pointer, ctx Context, rect Rect2) Rect2, api *API) (cb ExtensionClassCallVirtualFunc) {
	cb.Set(func(class cgo.Handle, p_args godotArgs, p_back godotBack) {
		ctx := newContext(api)
		var rect = godotGet[Rect2](p_args, 0)
		self := reflect.ValueOf(class.Value()).UnsafePointer()
		ret := impl(self, ctx, rect)
		ctx.Free()
		godotSet[Rect2](p_back, ret)
	})
	return
}

func (StyleBox) _get_minimum_size(impl func(ptr unsafe.Pointer, ctx Context) Vector2, api *API) (cb ExtensionClassCallVirtualFunc) {
	cb.Set(func(class cgo.Handle, p_args godotArgs, p_back godotBack) {
		ctx := newContext(api)
		self := reflect.ValueOf(class.Value()).UnsafePointer()
		ret := impl(self, ctx)
		ctx.Free()
		godotSet[Vector2](p_back, ret)
	})
	return
}

func (StyleBox) _test_mask(impl func(ptr unsafe.Pointer, ctx Context, point Vector2, rect Rect2) bool, api *API) (cb ExtensionClassCallVirtualFunc) {
	cb.Set(func(class cgo.Handle, p_args godotArgs, p_back godotBack) {
		ctx := newContext(api)
		var point = godotGet[Vector2](p_args, 0)
		var rect = godotGet[Rect2](p_args, 1)
		self := reflect.ValueOf(class.Value()).UnsafePointer()
		ret := impl(self, ctx, point, rect)
		ctx.Free()
		godotSet[bool](p_back, ret)
	})
	return
}

func (self StyleBox) GetMinimumSize() Vector2 {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.StyleBox.get_minimum_size, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Vector2](abi)
	abi.free()
	return ret
}

func (self StyleBox) SetContentMargin(margin Side, offset Float) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Side](0, abi, margin)
	frameSet[Float](1, abi, offset)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.StyleBox.set_content_margin, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self StyleBox) SetContentMarginAll(offset Float) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Float](0, abi, offset)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.StyleBox.set_content_margin_all, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self StyleBox) GetContentMargin(margin Side) Float {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Side](0, abi, margin)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.StyleBox.get_content_margin, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Float](abi)
	abi.free()
	return ret
}

func (self StyleBox) GetMargin(margin Side) Float {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Side](0, abi, margin)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.StyleBox.get_margin, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Float](abi)
	abi.free()
	return ret
}

func (self StyleBox) GetOffset() Vector2 {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.StyleBox.get_offset, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Vector2](abi)
	abi.free()
	return ret
}

func (self StyleBox) Draw(canvas_item RID, rect Rect2) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, canvas_item)
	frameSet[Rect2](1, abi, rect)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.StyleBox.draw, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self StyleBox) GetCurrentItemDrawn() CanvasItem {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.StyleBox.get_current_item_drawn, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[CanvasItem](abi)
	abi.free()
	return ret
}

func (self StyleBox) TestMask(point Vector2, rect Rect2) bool {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Vector2](0, abi, point)
	frameSet[Rect2](1, abi, rect)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.StyleBox.test_mask, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self StyleBox) virtual(name string) reflect.Value {
	switch name {
	case "_draw":
		return reflect.ValueOf(self._draw)
	case "_get_draw_rect":
		return reflect.ValueOf(self._get_draw_rect)
	case "_get_minimum_size":
		return reflect.ValueOf(self._get_minimum_size)
	case "_test_mask":
		return reflect.ValueOf(self._test_mask)
	default:
		return self.Super().virtual(name)
	}
}

type TextServerFontAntialiasing int64

type TextServerFontLCDSubpixelLayout int64

type TextServerDirection int64

type TextServerOrientation int64

type TextServerJustificationFlag int64

type TextServerAutowrapMode int64

type TextServerLineBreakFlag int64

type TextServerVisibleCharactersBehavior int64

type TextServerOverrunBehavior int64

type TextServerTextOverrunFlag int64

type TextServerGraphemeFlag int64

type TextServerHinting int64

type TextServerSubpixelPositioning int64

type TextServerFeature int64

type TextServerContourPointTag int64

type TextServerSpacingType int64

type TextServerFontStyle int64

type TextServerStructuredTextParser int64

type TextServerFixedSizeScaleMode int64
type TextServer struct{ Class[TextServer, RefCounted] }

func (self TextServer) RefCounted() RefCounted { return *self.Super() }

func (self TextServer) Object() Object { return *self.Super().Super() }

func (self TextServer) HasFeature(feature TextServerFeature) bool {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[TextServerFeature](0, abi, feature)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.TextServer.has_feature, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self TextServer) GetName(ctx Context) String {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.TextServer.get_name, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[uintptr](abi)
	abi.free()
	return mmm.Make[API, String, uintptr](ctx, selfPtr.API, ret)
}

func (self TextServer) GetFeatures() Int {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.TextServer.get_features, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Int](abi)
	abi.free()
	return ret
}

func (self TextServer) LoadSupportData(filename String) bool {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[String](0, abi, filename)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.TextServer.load_support_data, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self TextServer) GetSupportDataFilename(ctx Context) String {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.TextServer.get_support_data_filename, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[uintptr](abi)
	abi.free()
	return mmm.Make[API, String, uintptr](ctx, selfPtr.API, ret)
}

func (self TextServer) GetSupportDataInfo(ctx Context) String {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.TextServer.get_support_data_info, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[uintptr](abi)
	abi.free()
	return mmm.Make[API, String, uintptr](ctx, selfPtr.API, ret)
}

func (self TextServer) SaveSupportData(filename String) bool {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[String](0, abi, filename)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.TextServer.save_support_data, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self TextServer) IsLocaleRightToLeft(locale String) bool {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[String](0, abi, locale)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.TextServer.is_locale_right_to_left, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self TextServer) NameToTag(name String) Int {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[String](0, abi, name)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.TextServer.name_to_tag, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Int](abi)
	abi.free()
	return ret
}

func (self TextServer) TagToName(ctx Context, tag Int) String {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Int](0, abi, tag)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.TextServer.tag_to_name, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[uintptr](abi)
	abi.free()
	return mmm.Make[API, String, uintptr](ctx, selfPtr.API, ret)
}

func (self TextServer) Has(rid RID) bool {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, rid)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.TextServer.has, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self TextServer) FreeRid(rid RID) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, rid)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.TextServer.free_rid, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self TextServer) CreateFont() RID {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.TextServer.create_font, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[RID](abi)
	abi.free()
	return ret
}

func (self TextServer) CreateFontLinkedVariation(font_rid RID) RID {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, font_rid)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.TextServer.create_font_linked_variation, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[RID](abi)
	abi.free()
	return ret
}

func (self TextServer) FontSetData(font_rid RID, data PackedByteArray) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, font_rid)
	frameSet[PackedByteArray](1, abi, data)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.TextServer.font_set_data, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self TextServer) FontSetFaceIndex(font_rid RID, face_index Int) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, font_rid)
	frameSet[Int](1, abi, face_index)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.TextServer.font_set_face_index, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self TextServer) FontGetFaceIndex(font_rid RID) Int {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, font_rid)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.TextServer.font_get_face_index, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Int](abi)
	abi.free()
	return ret
}

func (self TextServer) FontGetFaceCount(font_rid RID) Int {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, font_rid)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.TextServer.font_get_face_count, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Int](abi)
	abi.free()
	return ret
}

func (self TextServer) FontSetStyle(font_rid RID, style TextServerFontStyle) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, font_rid)
	frameSet[TextServerFontStyle](1, abi, style)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.TextServer.font_set_style, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self TextServer) FontGetStyle(font_rid RID) TextServerFontStyle {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, font_rid)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.TextServer.font_get_style, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[TextServerFontStyle](abi)
	abi.free()
	return ret
}

func (self TextServer) FontSetName(font_rid RID, name String) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, font_rid)
	frameSet[String](1, abi, name)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.TextServer.font_set_name, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self TextServer) FontGetName(ctx Context, font_rid RID) String {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, font_rid)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.TextServer.font_get_name, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[uintptr](abi)
	abi.free()
	return mmm.Make[API, String, uintptr](ctx, selfPtr.API, ret)
}

func (self TextServer) FontGetOtNameStrings(ctx Context, font_rid RID) Dictionary {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, font_rid)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.TextServer.font_get_ot_name_strings, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[uintptr](abi)
	abi.free()
	return mmm.Make[API, Dictionary, uintptr](ctx, selfPtr.API, ret)
}

func (self TextServer) FontSetStyleName(font_rid RID, name String) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, font_rid)
	frameSet[String](1, abi, name)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.TextServer.font_set_style_name, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self TextServer) FontGetStyleName(ctx Context, font_rid RID) String {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, font_rid)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.TextServer.font_get_style_name, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[uintptr](abi)
	abi.free()
	return mmm.Make[API, String, uintptr](ctx, selfPtr.API, ret)
}

func (self TextServer) FontSetWeight(font_rid RID, weight Int) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, font_rid)
	frameSet[Int](1, abi, weight)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.TextServer.font_set_weight, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self TextServer) FontGetWeight(font_rid RID) Int {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, font_rid)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.TextServer.font_get_weight, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Int](abi)
	abi.free()
	return ret
}

func (self TextServer) FontSetStretch(font_rid RID, weight Int) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, font_rid)
	frameSet[Int](1, abi, weight)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.TextServer.font_set_stretch, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self TextServer) FontGetStretch(font_rid RID) Int {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, font_rid)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.TextServer.font_get_stretch, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Int](abi)
	abi.free()
	return ret
}

func (self TextServer) FontSetAntialiasing(font_rid RID, antialiasing TextServerFontAntialiasing) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, font_rid)
	frameSet[TextServerFontAntialiasing](1, abi, antialiasing)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.TextServer.font_set_antialiasing, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self TextServer) FontGetAntialiasing(font_rid RID) TextServerFontAntialiasing {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, font_rid)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.TextServer.font_get_antialiasing, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[TextServerFontAntialiasing](abi)
	abi.free()
	return ret
}

func (self TextServer) FontSetGenerateMipmaps(font_rid RID, generate_mipmaps bool) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, font_rid)
	frameSet[bool](1, abi, generate_mipmaps)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.TextServer.font_set_generate_mipmaps, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self TextServer) FontGetGenerateMipmaps(font_rid RID) bool {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, font_rid)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.TextServer.font_get_generate_mipmaps, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self TextServer) FontSetMultichannelSignedDistanceField(font_rid RID, msdf bool) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, font_rid)
	frameSet[bool](1, abi, msdf)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.TextServer.font_set_multichannel_signed_distance_field, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self TextServer) FontIsMultichannelSignedDistanceField(font_rid RID) bool {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, font_rid)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.TextServer.font_is_multichannel_signed_distance_field, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self TextServer) FontSetMsdfPixelRange(font_rid RID, msdf_pixel_range Int) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, font_rid)
	frameSet[Int](1, abi, msdf_pixel_range)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.TextServer.font_set_msdf_pixel_range, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self TextServer) FontGetMsdfPixelRange(font_rid RID) Int {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, font_rid)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.TextServer.font_get_msdf_pixel_range, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Int](abi)
	abi.free()
	return ret
}

func (self TextServer) FontSetMsdfSize(font_rid RID, msdf_size Int) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, font_rid)
	frameSet[Int](1, abi, msdf_size)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.TextServer.font_set_msdf_size, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self TextServer) FontGetMsdfSize(font_rid RID) Int {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, font_rid)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.TextServer.font_get_msdf_size, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Int](abi)
	abi.free()
	return ret
}

func (self TextServer) FontSetFixedSize(font_rid RID, fixed_size Int) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, font_rid)
	frameSet[Int](1, abi, fixed_size)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.TextServer.font_set_fixed_size, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self TextServer) FontGetFixedSize(font_rid RID) Int {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, font_rid)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.TextServer.font_get_fixed_size, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Int](abi)
	abi.free()
	return ret
}

func (self TextServer) FontSetFixedSizeScaleMode(font_rid RID, fixed_size_scale_mode TextServerFixedSizeScaleMode) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, font_rid)
	frameSet[TextServerFixedSizeScaleMode](1, abi, fixed_size_scale_mode)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.TextServer.font_set_fixed_size_scale_mode, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self TextServer) FontGetFixedSizeScaleMode(font_rid RID) TextServerFixedSizeScaleMode {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, font_rid)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.TextServer.font_get_fixed_size_scale_mode, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[TextServerFixedSizeScaleMode](abi)
	abi.free()
	return ret
}

func (self TextServer) FontSetAllowSystemFallback(font_rid RID, allow_system_fallback bool) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, font_rid)
	frameSet[bool](1, abi, allow_system_fallback)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.TextServer.font_set_allow_system_fallback, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self TextServer) FontIsAllowSystemFallback(font_rid RID) bool {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, font_rid)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.TextServer.font_is_allow_system_fallback, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self TextServer) FontSetForceAutohinter(font_rid RID, force_autohinter bool) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, font_rid)
	frameSet[bool](1, abi, force_autohinter)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.TextServer.font_set_force_autohinter, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self TextServer) FontIsForceAutohinter(font_rid RID) bool {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, font_rid)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.TextServer.font_is_force_autohinter, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self TextServer) FontSetHinting(font_rid RID, hinting TextServerHinting) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, font_rid)
	frameSet[TextServerHinting](1, abi, hinting)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.TextServer.font_set_hinting, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self TextServer) FontGetHinting(font_rid RID) TextServerHinting {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, font_rid)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.TextServer.font_get_hinting, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[TextServerHinting](abi)
	abi.free()
	return ret
}

func (self TextServer) FontSetSubpixelPositioning(font_rid RID, subpixel_positioning TextServerSubpixelPositioning) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, font_rid)
	frameSet[TextServerSubpixelPositioning](1, abi, subpixel_positioning)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.TextServer.font_set_subpixel_positioning, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self TextServer) FontGetSubpixelPositioning(font_rid RID) TextServerSubpixelPositioning {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, font_rid)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.TextServer.font_get_subpixel_positioning, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[TextServerSubpixelPositioning](abi)
	abi.free()
	return ret
}

func (self TextServer) FontSetEmbolden(font_rid RID, strength Float) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, font_rid)
	frameSet[Float](1, abi, strength)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.TextServer.font_set_embolden, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self TextServer) FontGetEmbolden(font_rid RID) Float {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, font_rid)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.TextServer.font_get_embolden, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Float](abi)
	abi.free()
	return ret
}

func (self TextServer) FontSetSpacing(font_rid RID, spacing TextServerSpacingType, value Int) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, font_rid)
	frameSet[TextServerSpacingType](1, abi, spacing)
	frameSet[Int](2, abi, value)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.TextServer.font_set_spacing, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self TextServer) FontGetSpacing(font_rid RID, spacing TextServerSpacingType) Int {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, font_rid)
	frameSet[TextServerSpacingType](1, abi, spacing)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.TextServer.font_get_spacing, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Int](abi)
	abi.free()
	return ret
}

func (self TextServer) FontSetTransform(font_rid RID, transform Transform2D) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, font_rid)
	frameSet[Transform2D](1, abi, transform)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.TextServer.font_set_transform, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self TextServer) FontGetTransform(font_rid RID) Transform2D {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, font_rid)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.TextServer.font_get_transform, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Transform2D](abi)
	abi.free()
	return ret
}

func (self TextServer) FontSetVariationCoordinates(font_rid RID, variation_coordinates Dictionary) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, font_rid)
	frameSet[Dictionary](1, abi, variation_coordinates)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.TextServer.font_set_variation_coordinates, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self TextServer) FontGetVariationCoordinates(ctx Context, font_rid RID) Dictionary {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, font_rid)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.TextServer.font_get_variation_coordinates, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[uintptr](abi)
	abi.free()
	return mmm.Make[API, Dictionary, uintptr](ctx, selfPtr.API, ret)
}

func (self TextServer) FontSetOversampling(font_rid RID, oversampling Float) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, font_rid)
	frameSet[Float](1, abi, oversampling)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.TextServer.font_set_oversampling, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self TextServer) FontGetOversampling(font_rid RID) Float {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, font_rid)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.TextServer.font_get_oversampling, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Float](abi)
	abi.free()
	return ret
}

func (self TextServer) FontGetSizeCacheList(font_rid RID) ArrayOf[Vector2i] {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, font_rid)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.TextServer.font_get_size_cache_list, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[ArrayOf[Vector2i]](abi)
	abi.free()
	return ret
}

func (self TextServer) FontClearSizeCache(font_rid RID) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, font_rid)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.TextServer.font_clear_size_cache, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self TextServer) FontRemoveSizeCache(font_rid RID, size Vector2i) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, font_rid)
	frameSet[Vector2i](1, abi, size)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.TextServer.font_remove_size_cache, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self TextServer) FontSetAscent(font_rid RID, size Int, ascent Float) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, font_rid)
	frameSet[Int](1, abi, size)
	frameSet[Float](2, abi, ascent)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.TextServer.font_set_ascent, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self TextServer) FontGetAscent(font_rid RID, size Int) Float {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, font_rid)
	frameSet[Int](1, abi, size)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.TextServer.font_get_ascent, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Float](abi)
	abi.free()
	return ret
}

func (self TextServer) FontSetDescent(font_rid RID, size Int, descent Float) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, font_rid)
	frameSet[Int](1, abi, size)
	frameSet[Float](2, abi, descent)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.TextServer.font_set_descent, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self TextServer) FontGetDescent(font_rid RID, size Int) Float {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, font_rid)
	frameSet[Int](1, abi, size)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.TextServer.font_get_descent, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Float](abi)
	abi.free()
	return ret
}

func (self TextServer) FontSetUnderlinePosition(font_rid RID, size Int, underline_position Float) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, font_rid)
	frameSet[Int](1, abi, size)
	frameSet[Float](2, abi, underline_position)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.TextServer.font_set_underline_position, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self TextServer) FontGetUnderlinePosition(font_rid RID, size Int) Float {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, font_rid)
	frameSet[Int](1, abi, size)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.TextServer.font_get_underline_position, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Float](abi)
	abi.free()
	return ret
}

func (self TextServer) FontSetUnderlineThickness(font_rid RID, size Int, underline_thickness Float) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, font_rid)
	frameSet[Int](1, abi, size)
	frameSet[Float](2, abi, underline_thickness)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.TextServer.font_set_underline_thickness, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self TextServer) FontGetUnderlineThickness(font_rid RID, size Int) Float {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, font_rid)
	frameSet[Int](1, abi, size)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.TextServer.font_get_underline_thickness, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Float](abi)
	abi.free()
	return ret
}

func (self TextServer) FontSetScale(font_rid RID, size Int, scale Float) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, font_rid)
	frameSet[Int](1, abi, size)
	frameSet[Float](2, abi, scale)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.TextServer.font_set_scale, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self TextServer) FontGetScale(font_rid RID, size Int) Float {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, font_rid)
	frameSet[Int](1, abi, size)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.TextServer.font_get_scale, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Float](abi)
	abi.free()
	return ret
}

func (self TextServer) FontGetTextureCount(font_rid RID, size Vector2i) Int {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, font_rid)
	frameSet[Vector2i](1, abi, size)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.TextServer.font_get_texture_count, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Int](abi)
	abi.free()
	return ret
}

func (self TextServer) FontClearTextures(font_rid RID, size Vector2i) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, font_rid)
	frameSet[Vector2i](1, abi, size)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.TextServer.font_clear_textures, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self TextServer) FontRemoveTexture(font_rid RID, size Vector2i, texture_index Int) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, font_rid)
	frameSet[Vector2i](1, abi, size)
	frameSet[Int](2, abi, texture_index)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.TextServer.font_remove_texture, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self TextServer) FontSetTextureImage(font_rid RID, size Vector2i, texture_index Int, image Image) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, font_rid)
	frameSet[Vector2i](1, abi, size)
	frameSet[Int](2, abi, texture_index)
	frameSet[Image](3, abi, image)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.TextServer.font_set_texture_image, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self TextServer) FontGetTextureImage(font_rid RID, size Vector2i, texture_index Int) Image {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, font_rid)
	frameSet[Vector2i](1, abi, size)
	frameSet[Int](2, abi, texture_index)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.TextServer.font_get_texture_image, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Image](abi)
	abi.free()
	return ret
}

func (self TextServer) FontSetTextureOffsets(font_rid RID, size Vector2i, texture_index Int, offset PackedInt32Array) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, font_rid)
	frameSet[Vector2i](1, abi, size)
	frameSet[Int](2, abi, texture_index)
	frameSet[PackedInt32Array](3, abi, offset)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.TextServer.font_set_texture_offsets, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self TextServer) FontGetTextureOffsets(ctx Context, font_rid RID, size Vector2i, texture_index Int) PackedInt32Array {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, font_rid)
	frameSet[Vector2i](1, abi, size)
	frameSet[Int](2, abi, texture_index)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.TextServer.font_get_texture_offsets, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[[2]uintptr](abi)
	abi.free()
	return mmm.Make[API, PackedInt32Array, [2]uintptr](ctx, selfPtr.API, ret)
}

func (self TextServer) FontGetGlyphList(ctx Context, font_rid RID, size Vector2i) PackedInt32Array {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, font_rid)
	frameSet[Vector2i](1, abi, size)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.TextServer.font_get_glyph_list, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[[2]uintptr](abi)
	abi.free()
	return mmm.Make[API, PackedInt32Array, [2]uintptr](ctx, selfPtr.API, ret)
}

func (self TextServer) FontClearGlyphs(font_rid RID, size Vector2i) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, font_rid)
	frameSet[Vector2i](1, abi, size)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.TextServer.font_clear_glyphs, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self TextServer) FontRemoveGlyph(font_rid RID, size Vector2i, glyph Int) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, font_rid)
	frameSet[Vector2i](1, abi, size)
	frameSet[Int](2, abi, glyph)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.TextServer.font_remove_glyph, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self TextServer) FontGetGlyphAdvance(font_rid RID, size Int, glyph Int) Vector2 {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, font_rid)
	frameSet[Int](1, abi, size)
	frameSet[Int](2, abi, glyph)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.TextServer.font_get_glyph_advance, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Vector2](abi)
	abi.free()
	return ret
}

func (self TextServer) FontSetGlyphAdvance(font_rid RID, size Int, glyph Int, advance Vector2) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, font_rid)
	frameSet[Int](1, abi, size)
	frameSet[Int](2, abi, glyph)
	frameSet[Vector2](3, abi, advance)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.TextServer.font_set_glyph_advance, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self TextServer) FontGetGlyphOffset(font_rid RID, size Vector2i, glyph Int) Vector2 {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, font_rid)
	frameSet[Vector2i](1, abi, size)
	frameSet[Int](2, abi, glyph)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.TextServer.font_get_glyph_offset, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Vector2](abi)
	abi.free()
	return ret
}

func (self TextServer) FontSetGlyphOffset(font_rid RID, size Vector2i, glyph Int, offset Vector2) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, font_rid)
	frameSet[Vector2i](1, abi, size)
	frameSet[Int](2, abi, glyph)
	frameSet[Vector2](3, abi, offset)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.TextServer.font_set_glyph_offset, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self TextServer) FontGetGlyphSize(font_rid RID, size Vector2i, glyph Int) Vector2 {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, font_rid)
	frameSet[Vector2i](1, abi, size)
	frameSet[Int](2, abi, glyph)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.TextServer.font_get_glyph_size, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Vector2](abi)
	abi.free()
	return ret
}

func (self TextServer) FontSetGlyphSize(font_rid RID, size Vector2i, glyph Int, gl_size Vector2) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, font_rid)
	frameSet[Vector2i](1, abi, size)
	frameSet[Int](2, abi, glyph)
	frameSet[Vector2](3, abi, gl_size)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.TextServer.font_set_glyph_size, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self TextServer) FontGetGlyphUvRect(font_rid RID, size Vector2i, glyph Int) Rect2 {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, font_rid)
	frameSet[Vector2i](1, abi, size)
	frameSet[Int](2, abi, glyph)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.TextServer.font_get_glyph_uv_rect, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Rect2](abi)
	abi.free()
	return ret
}

func (self TextServer) FontSetGlyphUvRect(font_rid RID, size Vector2i, glyph Int, uv_rect Rect2) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, font_rid)
	frameSet[Vector2i](1, abi, size)
	frameSet[Int](2, abi, glyph)
	frameSet[Rect2](3, abi, uv_rect)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.TextServer.font_set_glyph_uv_rect, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self TextServer) FontGetGlyphTextureIdx(font_rid RID, size Vector2i, glyph Int) Int {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, font_rid)
	frameSet[Vector2i](1, abi, size)
	frameSet[Int](2, abi, glyph)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.TextServer.font_get_glyph_texture_idx, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Int](abi)
	abi.free()
	return ret
}

func (self TextServer) FontSetGlyphTextureIdx(font_rid RID, size Vector2i, glyph Int, texture_idx Int) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, font_rid)
	frameSet[Vector2i](1, abi, size)
	frameSet[Int](2, abi, glyph)
	frameSet[Int](3, abi, texture_idx)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.TextServer.font_set_glyph_texture_idx, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self TextServer) FontGetGlyphTextureRid(font_rid RID, size Vector2i, glyph Int) RID {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, font_rid)
	frameSet[Vector2i](1, abi, size)
	frameSet[Int](2, abi, glyph)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.TextServer.font_get_glyph_texture_rid, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[RID](abi)
	abi.free()
	return ret
}

func (self TextServer) FontGetGlyphTextureSize(font_rid RID, size Vector2i, glyph Int) Vector2 {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, font_rid)
	frameSet[Vector2i](1, abi, size)
	frameSet[Int](2, abi, glyph)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.TextServer.font_get_glyph_texture_size, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Vector2](abi)
	abi.free()
	return ret
}

func (self TextServer) FontGetGlyphContours(ctx Context, font RID, size Int, index Int) Dictionary {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, font)
	frameSet[Int](1, abi, size)
	frameSet[Int](2, abi, index)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.TextServer.font_get_glyph_contours, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[uintptr](abi)
	abi.free()
	return mmm.Make[API, Dictionary, uintptr](ctx, selfPtr.API, ret)
}

func (self TextServer) FontGetKerningList(font_rid RID, size Int) ArrayOf[Vector2i] {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, font_rid)
	frameSet[Int](1, abi, size)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.TextServer.font_get_kerning_list, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[ArrayOf[Vector2i]](abi)
	abi.free()
	return ret
}

func (self TextServer) FontClearKerningMap(font_rid RID, size Int) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, font_rid)
	frameSet[Int](1, abi, size)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.TextServer.font_clear_kerning_map, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self TextServer) FontRemoveKerning(font_rid RID, size Int, glyph_pair Vector2i) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, font_rid)
	frameSet[Int](1, abi, size)
	frameSet[Vector2i](2, abi, glyph_pair)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.TextServer.font_remove_kerning, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self TextServer) FontSetKerning(font_rid RID, size Int, glyph_pair Vector2i, kerning Vector2) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, font_rid)
	frameSet[Int](1, abi, size)
	frameSet[Vector2i](2, abi, glyph_pair)
	frameSet[Vector2](3, abi, kerning)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.TextServer.font_set_kerning, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self TextServer) FontGetKerning(font_rid RID, size Int, glyph_pair Vector2i) Vector2 {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, font_rid)
	frameSet[Int](1, abi, size)
	frameSet[Vector2i](2, abi, glyph_pair)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.TextServer.font_get_kerning, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Vector2](abi)
	abi.free()
	return ret
}

func (self TextServer) FontGetGlyphIndex(font_rid RID, size Int, char Int, variation_selector Int) Int {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, font_rid)
	frameSet[Int](1, abi, size)
	frameSet[Int](2, abi, char)
	frameSet[Int](3, abi, variation_selector)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.TextServer.font_get_glyph_index, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Int](abi)
	abi.free()
	return ret
}

func (self TextServer) FontGetCharFromGlyphIndex(font_rid RID, size Int, glyph_index Int) Int {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, font_rid)
	frameSet[Int](1, abi, size)
	frameSet[Int](2, abi, glyph_index)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.TextServer.font_get_char_from_glyph_index, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Int](abi)
	abi.free()
	return ret
}

func (self TextServer) FontHasChar(font_rid RID, char Int) bool {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, font_rid)
	frameSet[Int](1, abi, char)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.TextServer.font_has_char, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self TextServer) FontGetSupportedChars(ctx Context, font_rid RID) String {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, font_rid)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.TextServer.font_get_supported_chars, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[uintptr](abi)
	abi.free()
	return mmm.Make[API, String, uintptr](ctx, selfPtr.API, ret)
}

func (self TextServer) FontRenderRange(font_rid RID, size Vector2i, start Int, end Int) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, font_rid)
	frameSet[Vector2i](1, abi, size)
	frameSet[Int](2, abi, start)
	frameSet[Int](3, abi, end)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.TextServer.font_render_range, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self TextServer) FontRenderGlyph(font_rid RID, size Vector2i, index Int) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, font_rid)
	frameSet[Vector2i](1, abi, size)
	frameSet[Int](2, abi, index)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.TextServer.font_render_glyph, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self TextServer) FontDrawGlyph(font_rid RID, canvas RID, size Int, pos Vector2, index Int, color Color) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, font_rid)
	frameSet[RID](1, abi, canvas)
	frameSet[Int](2, abi, size)
	frameSet[Vector2](3, abi, pos)
	frameSet[Int](4, abi, index)
	frameSet[Color](5, abi, color)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.TextServer.font_draw_glyph, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self TextServer) FontDrawGlyphOutline(font_rid RID, canvas RID, size Int, outline_size Int, pos Vector2, index Int, color Color) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, font_rid)
	frameSet[RID](1, abi, canvas)
	frameSet[Int](2, abi, size)
	frameSet[Int](3, abi, outline_size)
	frameSet[Vector2](4, abi, pos)
	frameSet[Int](5, abi, index)
	frameSet[Color](6, abi, color)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.TextServer.font_draw_glyph_outline, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self TextServer) FontIsLanguageSupported(font_rid RID, language String) bool {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, font_rid)
	frameSet[String](1, abi, language)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.TextServer.font_is_language_supported, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self TextServer) FontSetLanguageSupportOverride(font_rid RID, language String, supported bool) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, font_rid)
	frameSet[String](1, abi, language)
	frameSet[bool](2, abi, supported)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.TextServer.font_set_language_support_override, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self TextServer) FontGetLanguageSupportOverride(font_rid RID, language String) bool {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, font_rid)
	frameSet[String](1, abi, language)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.TextServer.font_get_language_support_override, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self TextServer) FontRemoveLanguageSupportOverride(font_rid RID, language String) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, font_rid)
	frameSet[String](1, abi, language)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.TextServer.font_remove_language_support_override, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self TextServer) FontGetLanguageSupportOverrides(ctx Context, font_rid RID) PackedStringArray {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, font_rid)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.TextServer.font_get_language_support_overrides, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[[2]uintptr](abi)
	abi.free()
	return mmm.Make[API, PackedStringArray, [2]uintptr](ctx, selfPtr.API, ret)
}

func (self TextServer) FontIsScriptSupported(font_rid RID, script String) bool {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, font_rid)
	frameSet[String](1, abi, script)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.TextServer.font_is_script_supported, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self TextServer) FontSetScriptSupportOverride(font_rid RID, script String, supported bool) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, font_rid)
	frameSet[String](1, abi, script)
	frameSet[bool](2, abi, supported)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.TextServer.font_set_script_support_override, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self TextServer) FontGetScriptSupportOverride(font_rid RID, script String) bool {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, font_rid)
	frameSet[String](1, abi, script)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.TextServer.font_get_script_support_override, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self TextServer) FontRemoveScriptSupportOverride(font_rid RID, script String) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, font_rid)
	frameSet[String](1, abi, script)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.TextServer.font_remove_script_support_override, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self TextServer) FontGetScriptSupportOverrides(ctx Context, font_rid RID) PackedStringArray {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, font_rid)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.TextServer.font_get_script_support_overrides, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[[2]uintptr](abi)
	abi.free()
	return mmm.Make[API, PackedStringArray, [2]uintptr](ctx, selfPtr.API, ret)
}

func (self TextServer) FontSetOpentypeFeatureOverrides(font_rid RID, overrides Dictionary) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, font_rid)
	frameSet[Dictionary](1, abi, overrides)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.TextServer.font_set_opentype_feature_overrides, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self TextServer) FontGetOpentypeFeatureOverrides(ctx Context, font_rid RID) Dictionary {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, font_rid)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.TextServer.font_get_opentype_feature_overrides, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[uintptr](abi)
	abi.free()
	return mmm.Make[API, Dictionary, uintptr](ctx, selfPtr.API, ret)
}

func (self TextServer) FontSupportedFeatureList(ctx Context, font_rid RID) Dictionary {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, font_rid)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.TextServer.font_supported_feature_list, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[uintptr](abi)
	abi.free()
	return mmm.Make[API, Dictionary, uintptr](ctx, selfPtr.API, ret)
}

func (self TextServer) FontSupportedVariationList(ctx Context, font_rid RID) Dictionary {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, font_rid)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.TextServer.font_supported_variation_list, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[uintptr](abi)
	abi.free()
	return mmm.Make[API, Dictionary, uintptr](ctx, selfPtr.API, ret)
}

func (self TextServer) FontGetGlobalOversampling() Float {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.TextServer.font_get_global_oversampling, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Float](abi)
	abi.free()
	return ret
}

func (self TextServer) FontSetGlobalOversampling(oversampling Float) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Float](0, abi, oversampling)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.TextServer.font_set_global_oversampling, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self TextServer) GetHexCodeBoxSize(size Int, index Int) Vector2 {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Int](0, abi, size)
	frameSet[Int](1, abi, index)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.TextServer.get_hex_code_box_size, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Vector2](abi)
	abi.free()
	return ret
}

func (self TextServer) DrawHexCodeBox(canvas RID, size Int, pos Vector2, index Int, color Color) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, canvas)
	frameSet[Int](1, abi, size)
	frameSet[Vector2](2, abi, pos)
	frameSet[Int](3, abi, index)
	frameSet[Color](4, abi, color)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.TextServer.draw_hex_code_box, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self TextServer) CreateShapedText(direction TextServerDirection, orientation TextServerOrientation) RID {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[TextServerDirection](0, abi, direction)
	frameSet[TextServerOrientation](1, abi, orientation)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.TextServer.create_shaped_text, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[RID](abi)
	abi.free()
	return ret
}

func (self TextServer) ShapedTextClear(rid RID) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, rid)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.TextServer.shaped_text_clear, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self TextServer) ShapedTextSetDirection(shaped RID, direction TextServerDirection) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, shaped)
	frameSet[TextServerDirection](1, abi, direction)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.TextServer.shaped_text_set_direction, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self TextServer) ShapedTextGetDirection(shaped RID) TextServerDirection {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, shaped)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.TextServer.shaped_text_get_direction, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[TextServerDirection](abi)
	abi.free()
	return ret
}

func (self TextServer) ShapedTextGetInferredDirection(shaped RID) TextServerDirection {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, shaped)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.TextServer.shaped_text_get_inferred_direction, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[TextServerDirection](abi)
	abi.free()
	return ret
}

func (self TextServer) ShapedTextSetBidiOverride(shaped RID, override Array) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, shaped)
	frameSet[Array](1, abi, override)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.TextServer.shaped_text_set_bidi_override, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self TextServer) ShapedTextSetCustomPunctuation(shaped RID, punct String) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, shaped)
	frameSet[String](1, abi, punct)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.TextServer.shaped_text_set_custom_punctuation, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self TextServer) ShapedTextGetCustomPunctuation(ctx Context, shaped RID) String {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, shaped)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.TextServer.shaped_text_get_custom_punctuation, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[uintptr](abi)
	abi.free()
	return mmm.Make[API, String, uintptr](ctx, selfPtr.API, ret)
}

func (self TextServer) ShapedTextSetOrientation(shaped RID, orientation TextServerOrientation) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, shaped)
	frameSet[TextServerOrientation](1, abi, orientation)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.TextServer.shaped_text_set_orientation, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self TextServer) ShapedTextGetOrientation(shaped RID) TextServerOrientation {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, shaped)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.TextServer.shaped_text_get_orientation, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[TextServerOrientation](abi)
	abi.free()
	return ret
}

func (self TextServer) ShapedTextSetPreserveInvalid(shaped RID, enabled bool) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, shaped)
	frameSet[bool](1, abi, enabled)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.TextServer.shaped_text_set_preserve_invalid, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self TextServer) ShapedTextGetPreserveInvalid(shaped RID) bool {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, shaped)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.TextServer.shaped_text_get_preserve_invalid, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self TextServer) ShapedTextSetPreserveControl(shaped RID, enabled bool) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, shaped)
	frameSet[bool](1, abi, enabled)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.TextServer.shaped_text_set_preserve_control, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self TextServer) ShapedTextGetPreserveControl(shaped RID) bool {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, shaped)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.TextServer.shaped_text_get_preserve_control, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self TextServer) ShapedTextSetSpacing(shaped RID, spacing TextServerSpacingType, value Int) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, shaped)
	frameSet[TextServerSpacingType](1, abi, spacing)
	frameSet[Int](2, abi, value)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.TextServer.shaped_text_set_spacing, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self TextServer) ShapedTextGetSpacing(shaped RID, spacing TextServerSpacingType) Int {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, shaped)
	frameSet[TextServerSpacingType](1, abi, spacing)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.TextServer.shaped_text_get_spacing, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Int](abi)
	abi.free()
	return ret
}

func (self TextServer) ShapedTextAddString(shaped RID, text String, fonts ArrayOf[RID], size Int, opentype_features Dictionary, language String, meta Variant) bool {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, shaped)
	frameSet[String](1, abi, text)
	frameSet[ArrayOf[RID]](2, abi, fonts)
	frameSet[Int](3, abi, size)
	frameSet[Dictionary](4, abi, opentype_features)
	frameSet[String](5, abi, language)
	frameSet[Variant](6, abi, meta)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.TextServer.shaped_text_add_string, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self TextServer) ShapedTextAddObject(shaped RID, key Variant, size Vector2, inline_align InlineAlignment, length Int, baseline Float) bool {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, shaped)
	frameSet[Variant](1, abi, key)
	frameSet[Vector2](2, abi, size)
	frameSet[InlineAlignment](3, abi, inline_align)
	frameSet[Int](4, abi, length)
	frameSet[Float](5, abi, baseline)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.TextServer.shaped_text_add_object, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self TextServer) ShapedTextResizeObject(shaped RID, key Variant, size Vector2, inline_align InlineAlignment, baseline Float) bool {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, shaped)
	frameSet[Variant](1, abi, key)
	frameSet[Vector2](2, abi, size)
	frameSet[InlineAlignment](3, abi, inline_align)
	frameSet[Float](4, abi, baseline)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.TextServer.shaped_text_resize_object, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self TextServer) ShapedGetSpanCount(shaped RID) Int {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, shaped)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.TextServer.shaped_get_span_count, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Int](abi)
	abi.free()
	return ret
}

func (self TextServer) ShapedGetSpanMeta(ctx Context, shaped RID, index Int) Variant {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, shaped)
	frameSet[Int](1, abi, index)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.TextServer.shaped_get_span_meta, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[[3]uintptr](abi)
	abi.free()
	return mmm.Make[API, Variant, [3]uintptr](ctx, selfPtr.API, ret)
}

func (self TextServer) ShapedSetSpanUpdateFont(shaped RID, index Int, fonts ArrayOf[RID], size Int, opentype_features Dictionary) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, shaped)
	frameSet[Int](1, abi, index)
	frameSet[ArrayOf[RID]](2, abi, fonts)
	frameSet[Int](3, abi, size)
	frameSet[Dictionary](4, abi, opentype_features)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.TextServer.shaped_set_span_update_font, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self TextServer) ShapedTextSubstr(shaped RID, start Int, length Int) RID {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, shaped)
	frameSet[Int](1, abi, start)
	frameSet[Int](2, abi, length)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.TextServer.shaped_text_substr, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[RID](abi)
	abi.free()
	return ret
}

func (self TextServer) ShapedTextGetParent(shaped RID) RID {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, shaped)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.TextServer.shaped_text_get_parent, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[RID](abi)
	abi.free()
	return ret
}

func (self TextServer) ShapedTextFitToWidth(shaped RID, width Float, justification_flags TextServerJustificationFlag) Float {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, shaped)
	frameSet[Float](1, abi, width)
	frameSet[TextServerJustificationFlag](2, abi, justification_flags)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.TextServer.shaped_text_fit_to_width, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Float](abi)
	abi.free()
	return ret
}

func (self TextServer) ShapedTextTabAlign(shaped RID, tab_stops PackedFloat32Array) Float {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, shaped)
	frameSet[PackedFloat32Array](1, abi, tab_stops)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.TextServer.shaped_text_tab_align, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Float](abi)
	abi.free()
	return ret
}

func (self TextServer) ShapedTextShape(shaped RID) bool {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, shaped)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.TextServer.shaped_text_shape, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self TextServer) ShapedTextIsReady(shaped RID) bool {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, shaped)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.TextServer.shaped_text_is_ready, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self TextServer) ShapedTextHasVisibleChars(shaped RID) bool {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, shaped)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.TextServer.shaped_text_has_visible_chars, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self TextServer) ShapedTextGetGlyphs(shaped RID) ArrayOf[Dictionary] {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, shaped)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.TextServer.shaped_text_get_glyphs, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[ArrayOf[Dictionary]](abi)
	abi.free()
	return ret
}

func (self TextServer) ShapedTextSortLogical(shaped RID) ArrayOf[Dictionary] {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, shaped)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.TextServer.shaped_text_sort_logical, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[ArrayOf[Dictionary]](abi)
	abi.free()
	return ret
}

func (self TextServer) ShapedTextGetGlyphCount(shaped RID) Int {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, shaped)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.TextServer.shaped_text_get_glyph_count, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Int](abi)
	abi.free()
	return ret
}

func (self TextServer) ShapedTextGetRange(shaped RID) Vector2i {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, shaped)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.TextServer.shaped_text_get_range, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Vector2i](abi)
	abi.free()
	return ret
}

func (self TextServer) ShapedTextGetLineBreaksAdv(ctx Context, shaped RID, width PackedFloat32Array, start Int, once bool, break_flags TextServerLineBreakFlag) PackedInt32Array {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, shaped)
	frameSet[PackedFloat32Array](1, abi, width)
	frameSet[Int](2, abi, start)
	frameSet[bool](3, abi, once)
	frameSet[TextServerLineBreakFlag](4, abi, break_flags)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.TextServer.shaped_text_get_line_breaks_adv, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[[2]uintptr](abi)
	abi.free()
	return mmm.Make[API, PackedInt32Array, [2]uintptr](ctx, selfPtr.API, ret)
}

func (self TextServer) ShapedTextGetLineBreaks(ctx Context, shaped RID, width Float, start Int, break_flags TextServerLineBreakFlag) PackedInt32Array {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, shaped)
	frameSet[Float](1, abi, width)
	frameSet[Int](2, abi, start)
	frameSet[TextServerLineBreakFlag](3, abi, break_flags)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.TextServer.shaped_text_get_line_breaks, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[[2]uintptr](abi)
	abi.free()
	return mmm.Make[API, PackedInt32Array, [2]uintptr](ctx, selfPtr.API, ret)
}

func (self TextServer) ShapedTextGetWordBreaks(ctx Context, shaped RID, grapheme_flags TextServerGraphemeFlag) PackedInt32Array {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, shaped)
	frameSet[TextServerGraphemeFlag](1, abi, grapheme_flags)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.TextServer.shaped_text_get_word_breaks, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[[2]uintptr](abi)
	abi.free()
	return mmm.Make[API, PackedInt32Array, [2]uintptr](ctx, selfPtr.API, ret)
}

func (self TextServer) ShapedTextGetTrimPos(shaped RID) Int {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, shaped)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.TextServer.shaped_text_get_trim_pos, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Int](abi)
	abi.free()
	return ret
}

func (self TextServer) ShapedTextGetEllipsisPos(shaped RID) Int {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, shaped)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.TextServer.shaped_text_get_ellipsis_pos, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Int](abi)
	abi.free()
	return ret
}

func (self TextServer) ShapedTextGetEllipsisGlyphs(shaped RID) ArrayOf[Dictionary] {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, shaped)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.TextServer.shaped_text_get_ellipsis_glyphs, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[ArrayOf[Dictionary]](abi)
	abi.free()
	return ret
}

func (self TextServer) ShapedTextGetEllipsisGlyphCount(shaped RID) Int {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, shaped)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.TextServer.shaped_text_get_ellipsis_glyph_count, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Int](abi)
	abi.free()
	return ret
}

func (self TextServer) ShapedTextOverrunTrimToWidth(shaped RID, width Float, overrun_trim_flags TextServerTextOverrunFlag) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, shaped)
	frameSet[Float](1, abi, width)
	frameSet[TextServerTextOverrunFlag](2, abi, overrun_trim_flags)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.TextServer.shaped_text_overrun_trim_to_width, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self TextServer) ShapedTextGetObjects(ctx Context, shaped RID) Array {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, shaped)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.TextServer.shaped_text_get_objects, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[uintptr](abi)
	abi.free()
	return mmm.Make[API, Array, uintptr](ctx, selfPtr.API, ret)
}

func (self TextServer) ShapedTextGetObjectRect(shaped RID, key Variant) Rect2 {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, shaped)
	frameSet[Variant](1, abi, key)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.TextServer.shaped_text_get_object_rect, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Rect2](abi)
	abi.free()
	return ret
}

func (self TextServer) ShapedTextGetSize(shaped RID) Vector2 {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, shaped)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.TextServer.shaped_text_get_size, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Vector2](abi)
	abi.free()
	return ret
}

func (self TextServer) ShapedTextGetAscent(shaped RID) Float {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, shaped)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.TextServer.shaped_text_get_ascent, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Float](abi)
	abi.free()
	return ret
}

func (self TextServer) ShapedTextGetDescent(shaped RID) Float {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, shaped)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.TextServer.shaped_text_get_descent, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Float](abi)
	abi.free()
	return ret
}

func (self TextServer) ShapedTextGetWidth(shaped RID) Float {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, shaped)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.TextServer.shaped_text_get_width, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Float](abi)
	abi.free()
	return ret
}

func (self TextServer) ShapedTextGetUnderlinePosition(shaped RID) Float {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, shaped)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.TextServer.shaped_text_get_underline_position, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Float](abi)
	abi.free()
	return ret
}

func (self TextServer) ShapedTextGetUnderlineThickness(shaped RID) Float {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, shaped)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.TextServer.shaped_text_get_underline_thickness, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Float](abi)
	abi.free()
	return ret
}

func (self TextServer) ShapedTextGetCarets(ctx Context, shaped RID, position Int) Dictionary {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, shaped)
	frameSet[Int](1, abi, position)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.TextServer.shaped_text_get_carets, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[uintptr](abi)
	abi.free()
	return mmm.Make[API, Dictionary, uintptr](ctx, selfPtr.API, ret)
}

func (self TextServer) ShapedTextGetSelection(ctx Context, shaped RID, start Int, end Int) PackedVector2Array {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, shaped)
	frameSet[Int](1, abi, start)
	frameSet[Int](2, abi, end)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.TextServer.shaped_text_get_selection, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[[2]uintptr](abi)
	abi.free()
	return mmm.Make[API, PackedVector2Array, [2]uintptr](ctx, selfPtr.API, ret)
}

func (self TextServer) ShapedTextHitTestGrapheme(shaped RID, coords Float) Int {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, shaped)
	frameSet[Float](1, abi, coords)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.TextServer.shaped_text_hit_test_grapheme, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Int](abi)
	abi.free()
	return ret
}

func (self TextServer) ShapedTextHitTestPosition(shaped RID, coords Float) Int {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, shaped)
	frameSet[Float](1, abi, coords)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.TextServer.shaped_text_hit_test_position, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Int](abi)
	abi.free()
	return ret
}

func (self TextServer) ShapedTextGetGraphemeBounds(shaped RID, pos Int) Vector2 {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, shaped)
	frameSet[Int](1, abi, pos)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.TextServer.shaped_text_get_grapheme_bounds, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Vector2](abi)
	abi.free()
	return ret
}

func (self TextServer) ShapedTextNextGraphemePos(shaped RID, pos Int) Int {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, shaped)
	frameSet[Int](1, abi, pos)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.TextServer.shaped_text_next_grapheme_pos, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Int](abi)
	abi.free()
	return ret
}

func (self TextServer) ShapedTextPrevGraphemePos(shaped RID, pos Int) Int {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, shaped)
	frameSet[Int](1, abi, pos)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.TextServer.shaped_text_prev_grapheme_pos, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Int](abi)
	abi.free()
	return ret
}

func (self TextServer) ShapedTextGetCharacterBreaks(ctx Context, shaped RID) PackedInt32Array {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, shaped)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.TextServer.shaped_text_get_character_breaks, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[[2]uintptr](abi)
	abi.free()
	return mmm.Make[API, PackedInt32Array, [2]uintptr](ctx, selfPtr.API, ret)
}

func (self TextServer) ShapedTextNextCharacterPos(shaped RID, pos Int) Int {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, shaped)
	frameSet[Int](1, abi, pos)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.TextServer.shaped_text_next_character_pos, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Int](abi)
	abi.free()
	return ret
}

func (self TextServer) ShapedTextPrevCharacterPos(shaped RID, pos Int) Int {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, shaped)
	frameSet[Int](1, abi, pos)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.TextServer.shaped_text_prev_character_pos, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Int](abi)
	abi.free()
	return ret
}

func (self TextServer) ShapedTextClosestCharacterPos(shaped RID, pos Int) Int {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, shaped)
	frameSet[Int](1, abi, pos)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.TextServer.shaped_text_closest_character_pos, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Int](abi)
	abi.free()
	return ret
}

func (self TextServer) ShapedTextDraw(shaped RID, canvas RID, pos Vector2, clip_l Float, clip_r Float, color Color) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, shaped)
	frameSet[RID](1, abi, canvas)
	frameSet[Vector2](2, abi, pos)
	frameSet[Float](3, abi, clip_l)
	frameSet[Float](4, abi, clip_r)
	frameSet[Color](5, abi, color)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.TextServer.shaped_text_draw, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self TextServer) ShapedTextDrawOutline(shaped RID, canvas RID, pos Vector2, clip_l Float, clip_r Float, outline_size Int, color Color) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, shaped)
	frameSet[RID](1, abi, canvas)
	frameSet[Vector2](2, abi, pos)
	frameSet[Float](3, abi, clip_l)
	frameSet[Float](4, abi, clip_r)
	frameSet[Int](5, abi, outline_size)
	frameSet[Color](6, abi, color)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.TextServer.shaped_text_draw_outline, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self TextServer) ShapedTextGetDominantDirectionInRange(shaped RID, start Int, end Int) TextServerDirection {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, shaped)
	frameSet[Int](1, abi, start)
	frameSet[Int](2, abi, end)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.TextServer.shaped_text_get_dominant_direction_in_range, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[TextServerDirection](abi)
	abi.free()
	return ret
}

func (self TextServer) FormatNumber(ctx Context, number String, language String) String {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[String](0, abi, number)
	frameSet[String](1, abi, language)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.TextServer.format_number, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[uintptr](abi)
	abi.free()
	return mmm.Make[API, String, uintptr](ctx, selfPtr.API, ret)
}

func (self TextServer) ParseNumber(ctx Context, number String, language String) String {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[String](0, abi, number)
	frameSet[String](1, abi, language)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.TextServer.parse_number, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[uintptr](abi)
	abi.free()
	return mmm.Make[API, String, uintptr](ctx, selfPtr.API, ret)
}

func (self TextServer) PercentSign(ctx Context, language String) String {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[String](0, abi, language)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.TextServer.percent_sign, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[uintptr](abi)
	abi.free()
	return mmm.Make[API, String, uintptr](ctx, selfPtr.API, ret)
}

func (self TextServer) StringGetWordBreaks(ctx Context, s String, language String, chars_per_line Int) PackedInt32Array {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[String](0, abi, s)
	frameSet[String](1, abi, language)
	frameSet[Int](2, abi, chars_per_line)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.TextServer.string_get_word_breaks, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[[2]uintptr](abi)
	abi.free()
	return mmm.Make[API, PackedInt32Array, [2]uintptr](ctx, selfPtr.API, ret)
}

func (self TextServer) StringGetCharacterBreaks(ctx Context, s String, language String) PackedInt32Array {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[String](0, abi, s)
	frameSet[String](1, abi, language)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.TextServer.string_get_character_breaks, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[[2]uintptr](abi)
	abi.free()
	return mmm.Make[API, PackedInt32Array, [2]uintptr](ctx, selfPtr.API, ret)
}

func (self TextServer) IsConfusable(s String, dict PackedStringArray) Int {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[String](0, abi, s)
	frameSet[PackedStringArray](1, abi, dict)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.TextServer.is_confusable, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Int](abi)
	abi.free()
	return ret
}

func (self TextServer) SpoofCheck(s String) bool {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[String](0, abi, s)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.TextServer.spoof_check, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self TextServer) StripDiacritics(ctx Context, s String) String {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[String](0, abi, s)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.TextServer.strip_diacritics, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[uintptr](abi)
	abi.free()
	return mmm.Make[API, String, uintptr](ctx, selfPtr.API, ret)
}

func (self TextServer) IsValidIdentifier(s String) bool {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[String](0, abi, s)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.TextServer.is_valid_identifier, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self TextServer) StringToUpper(ctx Context, s String, language String) String {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[String](0, abi, s)
	frameSet[String](1, abi, language)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.TextServer.string_to_upper, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[uintptr](abi)
	abi.free()
	return mmm.Make[API, String, uintptr](ctx, selfPtr.API, ret)
}

func (self TextServer) StringToLower(ctx Context, s String, language String) String {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[String](0, abi, s)
	frameSet[String](1, abi, language)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.TextServer.string_to_lower, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[uintptr](abi)
	abi.free()
	return mmm.Make[API, String, uintptr](ctx, selfPtr.API, ret)
}

func (self TextServer) ParseStructuredText(parser_type TextServerStructuredTextParser, args Array, text String) ArrayOf[Vector3i] {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[TextServerStructuredTextParser](0, abi, parser_type)
	frameSet[Array](1, abi, args)
	frameSet[String](2, abi, text)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.TextServer.parse_structured_text, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[ArrayOf[Vector3i]](abi)
	abi.free()
	return ret
}

func (self TextServer) virtual(name string) reflect.Value {
	switch name {
	default:
		return self.Super().virtual(name)
	}
}

type Texture struct{ Class[Texture, Resource] }

func (self Texture) Resource() Resource { return *self.Super() }

func (self Texture) RefCounted() RefCounted { return *self.Super().Super() }

func (self Texture) Object() Object { return *self.Super().Super().Super() }

func (self Texture) virtual(name string) reflect.Value {
	switch name {
	default:
		return self.Super().virtual(name)
	}
}

type Texture2D struct{ Class[Texture2D, Texture] }

func (self Texture2D) Texture() Texture { return *self.Super() }

func (self Texture2D) Resource() Resource { return *self.Super().Super() }

func (self Texture2D) RefCounted() RefCounted { return *self.Super().Super().Super() }

func (self Texture2D) Object() Object { return *self.Super().Super().Super().Super() }

func (Texture2D) _get_width(impl func(ptr unsafe.Pointer, ctx Context) Int, api *API) (cb ExtensionClassCallVirtualFunc) {
	cb.Set(func(class cgo.Handle, p_args godotArgs, p_back godotBack) {
		ctx := newContext(api)
		self := reflect.ValueOf(class.Value()).UnsafePointer()
		ret := impl(self, ctx)
		ctx.Free()
		godotSet[Int](p_back, ret)
	})
	return
}

func (Texture2D) _get_height(impl func(ptr unsafe.Pointer, ctx Context) Int, api *API) (cb ExtensionClassCallVirtualFunc) {
	cb.Set(func(class cgo.Handle, p_args godotArgs, p_back godotBack) {
		ctx := newContext(api)
		self := reflect.ValueOf(class.Value()).UnsafePointer()
		ret := impl(self, ctx)
		ctx.Free()
		godotSet[Int](p_back, ret)
	})
	return
}

func (Texture2D) _is_pixel_opaque(impl func(ptr unsafe.Pointer, ctx Context, x Int, y Int) bool, api *API) (cb ExtensionClassCallVirtualFunc) {
	cb.Set(func(class cgo.Handle, p_args godotArgs, p_back godotBack) {
		ctx := newContext(api)
		var x = godotGet[Int](p_args, 0)
		var y = godotGet[Int](p_args, 1)
		self := reflect.ValueOf(class.Value()).UnsafePointer()
		ret := impl(self, ctx, x, y)
		ctx.Free()
		godotSet[bool](p_back, ret)
	})
	return
}

func (Texture2D) _has_alpha(impl func(ptr unsafe.Pointer, ctx Context) bool, api *API) (cb ExtensionClassCallVirtualFunc) {
	cb.Set(func(class cgo.Handle, p_args godotArgs, p_back godotBack) {
		ctx := newContext(api)
		self := reflect.ValueOf(class.Value()).UnsafePointer()
		ret := impl(self, ctx)
		ctx.Free()
		godotSet[bool](p_back, ret)
	})
	return
}

func (Texture2D) _draw(impl func(ptr unsafe.Pointer, ctx Context, to_canvas_item RID, pos Vector2, modulate Color, transpose bool), api *API) (cb ExtensionClassCallVirtualFunc) {
	cb.Set(func(class cgo.Handle, p_args godotArgs, p_back godotBack) {
		ctx := newContext(api)
		var to_canvas_item = godotGet[RID](p_args, 0)
		var pos = godotGet[Vector2](p_args, 1)
		var modulate = godotGet[Color](p_args, 2)
		var transpose = godotGet[bool](p_args, 3)
		self := reflect.ValueOf(class.Value()).UnsafePointer()
		impl(self, ctx, to_canvas_item, pos, modulate, transpose)
		ctx.Free()
	})
	return
}

func (Texture2D) _draw_rect(impl func(ptr unsafe.Pointer, ctx Context, to_canvas_item RID, rect Rect2, tile bool, modulate Color, transpose bool), api *API) (cb ExtensionClassCallVirtualFunc) {
	cb.Set(func(class cgo.Handle, p_args godotArgs, p_back godotBack) {
		ctx := newContext(api)
		var to_canvas_item = godotGet[RID](p_args, 0)
		var rect = godotGet[Rect2](p_args, 1)
		var tile = godotGet[bool](p_args, 2)
		var modulate = godotGet[Color](p_args, 3)
		var transpose = godotGet[bool](p_args, 4)
		self := reflect.ValueOf(class.Value()).UnsafePointer()
		impl(self, ctx, to_canvas_item, rect, tile, modulate, transpose)
		ctx.Free()
	})
	return
}

func (Texture2D) _draw_rect_region(impl func(ptr unsafe.Pointer, ctx Context, to_canvas_item RID, rect Rect2, src_rect Rect2, modulate Color, transpose bool, clip_uv bool), api *API) (cb ExtensionClassCallVirtualFunc) {
	cb.Set(func(class cgo.Handle, p_args godotArgs, p_back godotBack) {
		ctx := newContext(api)
		var to_canvas_item = godotGet[RID](p_args, 0)
		var rect = godotGet[Rect2](p_args, 1)
		var src_rect = godotGet[Rect2](p_args, 2)
		var modulate = godotGet[Color](p_args, 3)
		var transpose = godotGet[bool](p_args, 4)
		var clip_uv = godotGet[bool](p_args, 5)
		self := reflect.ValueOf(class.Value()).UnsafePointer()
		impl(self, ctx, to_canvas_item, rect, src_rect, modulate, transpose, clip_uv)
		ctx.Free()
	})
	return
}

func (self Texture2D) GetWidth() Int {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Texture2D.get_width, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Int](abi)
	abi.free()
	return ret
}

func (self Texture2D) GetHeight() Int {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Texture2D.get_height, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Int](abi)
	abi.free()
	return ret
}

func (self Texture2D) GetSize() Vector2 {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Texture2D.get_size, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Vector2](abi)
	abi.free()
	return ret
}

func (self Texture2D) HasAlpha() bool {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Texture2D.has_alpha, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self Texture2D) Draw(canvas_item RID, position Vector2, modulate Color, transpose bool) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, canvas_item)
	frameSet[Vector2](1, abi, position)
	frameSet[Color](2, abi, modulate)
	frameSet[bool](3, abi, transpose)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Texture2D.draw, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self Texture2D) DrawRect(canvas_item RID, rect Rect2, tile bool, modulate Color, transpose bool) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, canvas_item)
	frameSet[Rect2](1, abi, rect)
	frameSet[bool](2, abi, tile)
	frameSet[Color](3, abi, modulate)
	frameSet[bool](4, abi, transpose)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Texture2D.draw_rect, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self Texture2D) DrawRectRegion(canvas_item RID, rect Rect2, src_rect Rect2, modulate Color, transpose bool, clip_uv bool) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[RID](0, abi, canvas_item)
	frameSet[Rect2](1, abi, rect)
	frameSet[Rect2](2, abi, src_rect)
	frameSet[Color](3, abi, modulate)
	frameSet[bool](4, abi, transpose)
	frameSet[bool](5, abi, clip_uv)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Texture2D.draw_rect_region, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self Texture2D) GetImage() Image {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Texture2D.get_image, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Image](abi)
	abi.free()
	return ret
}

func (self Texture2D) CreatePlaceholder() Resource {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Texture2D.create_placeholder, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Resource](abi)
	abi.free()
	return ret
}

func (self Texture2D) virtual(name string) reflect.Value {
	switch name {
	case "_get_width":
		return reflect.ValueOf(self._get_width)
	case "_get_height":
		return reflect.ValueOf(self._get_height)
	case "_is_pixel_opaque":
		return reflect.ValueOf(self._is_pixel_opaque)
	case "_has_alpha":
		return reflect.ValueOf(self._has_alpha)
	case "_draw":
		return reflect.ValueOf(self._draw)
	case "_draw_rect":
		return reflect.ValueOf(self._draw_rect)
	case "_draw_rect_region":
		return reflect.ValueOf(self._draw_rect_region)
	default:
		return self.Super().virtual(name)
	}
}

type ThemeDataType int64
type Theme struct{ Class[Theme, Resource] }

func (self Theme) Resource() Resource { return *self.Super() }

func (self Theme) RefCounted() RefCounted { return *self.Super().Super() }

func (self Theme) Object() Object { return *self.Super().Super().Super() }

func (self Theme) SetIcon(name StringName, theme_type StringName, texture Texture2D) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[StringName](0, abi, name)
	frameSet[StringName](1, abi, theme_type)
	frameSet[Texture2D](2, abi, texture)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Theme.set_icon, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self Theme) GetIcon(name StringName, theme_type StringName) Texture2D {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[StringName](0, abi, name)
	frameSet[StringName](1, abi, theme_type)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Theme.get_icon, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Texture2D](abi)
	abi.free()
	return ret
}

func (self Theme) HasIcon(name StringName, theme_type StringName) bool {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[StringName](0, abi, name)
	frameSet[StringName](1, abi, theme_type)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Theme.has_icon, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self Theme) RenameIcon(old_name StringName, name StringName, theme_type StringName) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[StringName](0, abi, old_name)
	frameSet[StringName](1, abi, name)
	frameSet[StringName](2, abi, theme_type)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Theme.rename_icon, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self Theme) ClearIcon(name StringName, theme_type StringName) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[StringName](0, abi, name)
	frameSet[StringName](1, abi, theme_type)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Theme.clear_icon, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self Theme) GetIconList(ctx Context, theme_type String) PackedStringArray {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[String](0, abi, theme_type)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Theme.get_icon_list, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[[2]uintptr](abi)
	abi.free()
	return mmm.Make[API, PackedStringArray, [2]uintptr](ctx, selfPtr.API, ret)
}

func (self Theme) GetIconTypeList(ctx Context) PackedStringArray {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Theme.get_icon_type_list, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[[2]uintptr](abi)
	abi.free()
	return mmm.Make[API, PackedStringArray, [2]uintptr](ctx, selfPtr.API, ret)
}

func (self Theme) SetStylebox(name StringName, theme_type StringName, texture StyleBox) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[StringName](0, abi, name)
	frameSet[StringName](1, abi, theme_type)
	frameSet[StyleBox](2, abi, texture)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Theme.set_stylebox, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self Theme) GetStylebox(name StringName, theme_type StringName) StyleBox {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[StringName](0, abi, name)
	frameSet[StringName](1, abi, theme_type)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Theme.get_stylebox, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[StyleBox](abi)
	abi.free()
	return ret
}

func (self Theme) HasStylebox(name StringName, theme_type StringName) bool {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[StringName](0, abi, name)
	frameSet[StringName](1, abi, theme_type)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Theme.has_stylebox, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self Theme) RenameStylebox(old_name StringName, name StringName, theme_type StringName) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[StringName](0, abi, old_name)
	frameSet[StringName](1, abi, name)
	frameSet[StringName](2, abi, theme_type)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Theme.rename_stylebox, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self Theme) ClearStylebox(name StringName, theme_type StringName) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[StringName](0, abi, name)
	frameSet[StringName](1, abi, theme_type)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Theme.clear_stylebox, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self Theme) GetStyleboxList(ctx Context, theme_type String) PackedStringArray {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[String](0, abi, theme_type)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Theme.get_stylebox_list, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[[2]uintptr](abi)
	abi.free()
	return mmm.Make[API, PackedStringArray, [2]uintptr](ctx, selfPtr.API, ret)
}

func (self Theme) GetStyleboxTypeList(ctx Context) PackedStringArray {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Theme.get_stylebox_type_list, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[[2]uintptr](abi)
	abi.free()
	return mmm.Make[API, PackedStringArray, [2]uintptr](ctx, selfPtr.API, ret)
}

func (self Theme) SetFont(name StringName, theme_type StringName, font Font) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[StringName](0, abi, name)
	frameSet[StringName](1, abi, theme_type)
	frameSet[Font](2, abi, font)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Theme.set_font, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self Theme) GetFont(name StringName, theme_type StringName) Font {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[StringName](0, abi, name)
	frameSet[StringName](1, abi, theme_type)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Theme.get_font, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Font](abi)
	abi.free()
	return ret
}

func (self Theme) HasFont(name StringName, theme_type StringName) bool {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[StringName](0, abi, name)
	frameSet[StringName](1, abi, theme_type)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Theme.has_font, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self Theme) RenameFont(old_name StringName, name StringName, theme_type StringName) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[StringName](0, abi, old_name)
	frameSet[StringName](1, abi, name)
	frameSet[StringName](2, abi, theme_type)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Theme.rename_font, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self Theme) ClearFont(name StringName, theme_type StringName) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[StringName](0, abi, name)
	frameSet[StringName](1, abi, theme_type)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Theme.clear_font, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self Theme) GetFontList(ctx Context, theme_type String) PackedStringArray {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[String](0, abi, theme_type)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Theme.get_font_list, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[[2]uintptr](abi)
	abi.free()
	return mmm.Make[API, PackedStringArray, [2]uintptr](ctx, selfPtr.API, ret)
}

func (self Theme) GetFontTypeList(ctx Context) PackedStringArray {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Theme.get_font_type_list, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[[2]uintptr](abi)
	abi.free()
	return mmm.Make[API, PackedStringArray, [2]uintptr](ctx, selfPtr.API, ret)
}

func (self Theme) SetFontSize(name StringName, theme_type StringName, font_size Int) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[StringName](0, abi, name)
	frameSet[StringName](1, abi, theme_type)
	frameSet[Int](2, abi, font_size)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Theme.set_font_size, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self Theme) GetFontSize(name StringName, theme_type StringName) Int {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[StringName](0, abi, name)
	frameSet[StringName](1, abi, theme_type)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Theme.get_font_size, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Int](abi)
	abi.free()
	return ret
}

func (self Theme) HasFontSize(name StringName, theme_type StringName) bool {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[StringName](0, abi, name)
	frameSet[StringName](1, abi, theme_type)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Theme.has_font_size, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self Theme) RenameFontSize(old_name StringName, name StringName, theme_type StringName) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[StringName](0, abi, old_name)
	frameSet[StringName](1, abi, name)
	frameSet[StringName](2, abi, theme_type)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Theme.rename_font_size, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self Theme) ClearFontSize(name StringName, theme_type StringName) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[StringName](0, abi, name)
	frameSet[StringName](1, abi, theme_type)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Theme.clear_font_size, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self Theme) GetFontSizeList(ctx Context, theme_type String) PackedStringArray {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[String](0, abi, theme_type)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Theme.get_font_size_list, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[[2]uintptr](abi)
	abi.free()
	return mmm.Make[API, PackedStringArray, [2]uintptr](ctx, selfPtr.API, ret)
}

func (self Theme) GetFontSizeTypeList(ctx Context) PackedStringArray {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Theme.get_font_size_type_list, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[[2]uintptr](abi)
	abi.free()
	return mmm.Make[API, PackedStringArray, [2]uintptr](ctx, selfPtr.API, ret)
}

func (self Theme) SetColor(name StringName, theme_type StringName, color Color) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[StringName](0, abi, name)
	frameSet[StringName](1, abi, theme_type)
	frameSet[Color](2, abi, color)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Theme.set_color, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self Theme) GetColor(name StringName, theme_type StringName) Color {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[StringName](0, abi, name)
	frameSet[StringName](1, abi, theme_type)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Theme.get_color, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Color](abi)
	abi.free()
	return ret
}

func (self Theme) HasColor(name StringName, theme_type StringName) bool {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[StringName](0, abi, name)
	frameSet[StringName](1, abi, theme_type)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Theme.has_color, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self Theme) RenameColor(old_name StringName, name StringName, theme_type StringName) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[StringName](0, abi, old_name)
	frameSet[StringName](1, abi, name)
	frameSet[StringName](2, abi, theme_type)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Theme.rename_color, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self Theme) ClearColor(name StringName, theme_type StringName) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[StringName](0, abi, name)
	frameSet[StringName](1, abi, theme_type)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Theme.clear_color, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self Theme) GetColorList(ctx Context, theme_type String) PackedStringArray {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[String](0, abi, theme_type)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Theme.get_color_list, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[[2]uintptr](abi)
	abi.free()
	return mmm.Make[API, PackedStringArray, [2]uintptr](ctx, selfPtr.API, ret)
}

func (self Theme) GetColorTypeList(ctx Context) PackedStringArray {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Theme.get_color_type_list, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[[2]uintptr](abi)
	abi.free()
	return mmm.Make[API, PackedStringArray, [2]uintptr](ctx, selfPtr.API, ret)
}

func (self Theme) SetConstant(name StringName, theme_type StringName, constant Int) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[StringName](0, abi, name)
	frameSet[StringName](1, abi, theme_type)
	frameSet[Int](2, abi, constant)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Theme.set_constant, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self Theme) GetConstant(name StringName, theme_type StringName) Int {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[StringName](0, abi, name)
	frameSet[StringName](1, abi, theme_type)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Theme.get_constant, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Int](abi)
	abi.free()
	return ret
}

func (self Theme) HasConstant(name StringName, theme_type StringName) bool {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[StringName](0, abi, name)
	frameSet[StringName](1, abi, theme_type)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Theme.has_constant, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self Theme) RenameConstant(old_name StringName, name StringName, theme_type StringName) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[StringName](0, abi, old_name)
	frameSet[StringName](1, abi, name)
	frameSet[StringName](2, abi, theme_type)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Theme.rename_constant, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self Theme) ClearConstant(name StringName, theme_type StringName) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[StringName](0, abi, name)
	frameSet[StringName](1, abi, theme_type)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Theme.clear_constant, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self Theme) GetConstantList(ctx Context, theme_type String) PackedStringArray {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[String](0, abi, theme_type)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Theme.get_constant_list, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[[2]uintptr](abi)
	abi.free()
	return mmm.Make[API, PackedStringArray, [2]uintptr](ctx, selfPtr.API, ret)
}

func (self Theme) GetConstantTypeList(ctx Context) PackedStringArray {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Theme.get_constant_type_list, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[[2]uintptr](abi)
	abi.free()
	return mmm.Make[API, PackedStringArray, [2]uintptr](ctx, selfPtr.API, ret)
}

func (self Theme) SetDefaultBaseScale(base_scale Float) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Float](0, abi, base_scale)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Theme.set_default_base_scale, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self Theme) GetDefaultBaseScale() Float {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Theme.get_default_base_scale, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Float](abi)
	abi.free()
	return ret
}

func (self Theme) HasDefaultBaseScale() bool {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Theme.has_default_base_scale, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self Theme) SetDefaultFont(font Font) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Font](0, abi, font)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Theme.set_default_font, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self Theme) GetDefaultFont() Font {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Theme.get_default_font, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Font](abi)
	abi.free()
	return ret
}

func (self Theme) HasDefaultFont() bool {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Theme.has_default_font, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self Theme) SetDefaultFontSize(font_size Int) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Int](0, abi, font_size)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Theme.set_default_font_size, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self Theme) GetDefaultFontSize() Int {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Theme.get_default_font_size, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Int](abi)
	abi.free()
	return ret
}

func (self Theme) HasDefaultFontSize() bool {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Theme.has_default_font_size, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self Theme) SetThemeItem(data_type ThemeDataType, name StringName, theme_type StringName, value Variant) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[ThemeDataType](0, abi, data_type)
	frameSet[StringName](1, abi, name)
	frameSet[StringName](2, abi, theme_type)
	frameSet[Variant](3, abi, value)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Theme.set_theme_item, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self Theme) GetThemeItem(ctx Context, data_type ThemeDataType, name StringName, theme_type StringName) Variant {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[ThemeDataType](0, abi, data_type)
	frameSet[StringName](1, abi, name)
	frameSet[StringName](2, abi, theme_type)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Theme.get_theme_item, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[[3]uintptr](abi)
	abi.free()
	return mmm.Make[API, Variant, [3]uintptr](ctx, selfPtr.API, ret)
}

func (self Theme) HasThemeItem(data_type ThemeDataType, name StringName, theme_type StringName) bool {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[ThemeDataType](0, abi, data_type)
	frameSet[StringName](1, abi, name)
	frameSet[StringName](2, abi, theme_type)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Theme.has_theme_item, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self Theme) RenameThemeItem(data_type ThemeDataType, old_name StringName, name StringName, theme_type StringName) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[ThemeDataType](0, abi, data_type)
	frameSet[StringName](1, abi, old_name)
	frameSet[StringName](2, abi, name)
	frameSet[StringName](3, abi, theme_type)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Theme.rename_theme_item, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self Theme) ClearThemeItem(data_type ThemeDataType, name StringName, theme_type StringName) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[ThemeDataType](0, abi, data_type)
	frameSet[StringName](1, abi, name)
	frameSet[StringName](2, abi, theme_type)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Theme.clear_theme_item, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self Theme) GetThemeItemList(ctx Context, data_type ThemeDataType, theme_type String) PackedStringArray {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[ThemeDataType](0, abi, data_type)
	frameSet[String](1, abi, theme_type)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Theme.get_theme_item_list, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[[2]uintptr](abi)
	abi.free()
	return mmm.Make[API, PackedStringArray, [2]uintptr](ctx, selfPtr.API, ret)
}

func (self Theme) GetThemeItemTypeList(ctx Context, data_type ThemeDataType) PackedStringArray {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[ThemeDataType](0, abi, data_type)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Theme.get_theme_item_type_list, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[[2]uintptr](abi)
	abi.free()
	return mmm.Make[API, PackedStringArray, [2]uintptr](ctx, selfPtr.API, ret)
}

func (self Theme) SetTypeVariation(theme_type StringName, base_type StringName) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[StringName](0, abi, theme_type)
	frameSet[StringName](1, abi, base_type)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Theme.set_type_variation, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self Theme) IsTypeVariation(theme_type StringName, base_type StringName) bool {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[StringName](0, abi, theme_type)
	frameSet[StringName](1, abi, base_type)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Theme.is_type_variation, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self Theme) ClearTypeVariation(theme_type StringName) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[StringName](0, abi, theme_type)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Theme.clear_type_variation, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self Theme) GetTypeVariationBase(ctx Context, theme_type StringName) StringName {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[StringName](0, abi, theme_type)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Theme.get_type_variation_base, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[uintptr](abi)
	abi.free()
	return mmm.Make[API, StringName, uintptr](ctx, selfPtr.API, ret)
}

func (self Theme) GetTypeVariationList(ctx Context, base_type StringName) PackedStringArray {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[StringName](0, abi, base_type)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Theme.get_type_variation_list, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[[2]uintptr](abi)
	abi.free()
	return mmm.Make[API, PackedStringArray, [2]uintptr](ctx, selfPtr.API, ret)
}

func (self Theme) AddType(theme_type StringName) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[StringName](0, abi, theme_type)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Theme.add_type, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self Theme) RemoveType(theme_type StringName) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[StringName](0, abi, theme_type)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Theme.remove_type, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self Theme) GetTypeList(ctx Context) PackedStringArray {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Theme.get_type_list, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[[2]uintptr](abi)
	abi.free()
	return mmm.Make[API, PackedStringArray, [2]uintptr](ctx, selfPtr.API, ret)
}

func (self Theme) MergeWith(other Theme) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Theme](0, abi, other)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Theme.merge_with, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self Theme) Clear() {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Theme.clear, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self Theme) virtual(name string) reflect.Value {
	switch name {
	default:
		return self.Super().virtual(name)
	}
}

type TriangleMesh struct {
	Class[TriangleMesh, RefCounted]
}

func (self TriangleMesh) RefCounted() RefCounted { return *self.Super() }

func (self TriangleMesh) Object() Object { return *self.Super().Super() }

func (self TriangleMesh) virtual(name string) reflect.Value {
	switch name {
	default:
		return self.Super().virtual(name)
	}
}

type TweenTweenProcessMode int64

type TweenTweenPauseMode int64

type TweenTransitionType int64

type TweenEaseType int64
type Tween struct{ Class[Tween, RefCounted] }

func (self Tween) RefCounted() RefCounted { return *self.Super() }

func (self Tween) Object() Object { return *self.Super().Super() }

func (self Tween) TweenProperty(object Object, property NodePath, final_val Variant, duration Float) PropertyTweener {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Object](0, abi, object)
	frameSet[NodePath](1, abi, property)
	frameSet[Variant](2, abi, final_val)
	frameSet[Float](3, abi, duration)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Tween.tween_property, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[PropertyTweener](abi)
	abi.free()
	return ret
}

func (self Tween) TweenInterval(time Float) IntervalTweener {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Float](0, abi, time)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Tween.tween_interval, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[IntervalTweener](abi)
	abi.free()
	return ret
}

func (self Tween) TweenCallback(callback Callable) CallbackTweener {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Callable](0, abi, callback)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Tween.tween_callback, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[CallbackTweener](abi)
	abi.free()
	return ret
}

func (self Tween) TweenMethod(method Callable, from Variant, to Variant, duration Float) MethodTweener {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Callable](0, abi, method)
	frameSet[Variant](1, abi, from)
	frameSet[Variant](2, abi, to)
	frameSet[Float](3, abi, duration)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Tween.tween_method, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[MethodTweener](abi)
	abi.free()
	return ret
}

func (self Tween) CustomStep(delta Float) bool {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Float](0, abi, delta)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Tween.custom_step, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self Tween) Stop() {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Tween.stop, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self Tween) Pause() {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Tween.pause, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self Tween) Play() {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Tween.play, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self Tween) Kill() {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Tween.kill, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self Tween) GetTotalElapsedTime() Float {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Tween.get_total_elapsed_time, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Float](abi)
	abi.free()
	return ret
}

func (self Tween) IsRunning() bool {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Tween.is_running, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self Tween) IsValid() bool {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Tween.is_valid, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self Tween) BindNode(node Node) Tween {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Node](0, abi, node)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Tween.bind_node, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Tween](abi)
	abi.free()
	return ret
}

func (self Tween) SetProcessMode(mode TweenTweenProcessMode) Tween {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[TweenTweenProcessMode](0, abi, mode)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Tween.set_process_mode, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Tween](abi)
	abi.free()
	return ret
}

func (self Tween) SetPauseMode(mode TweenTweenPauseMode) Tween {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[TweenTweenPauseMode](0, abi, mode)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Tween.set_pause_mode, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Tween](abi)
	abi.free()
	return ret
}

func (self Tween) SetParallel(parallel bool) Tween {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[bool](0, abi, parallel)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Tween.set_parallel, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Tween](abi)
	abi.free()
	return ret
}

func (self Tween) SetLoops(loops Int) Tween {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Int](0, abi, loops)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Tween.set_loops, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Tween](abi)
	abi.free()
	return ret
}

func (self Tween) GetLoopsLeft() Int {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Tween.get_loops_left, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Int](abi)
	abi.free()
	return ret
}

func (self Tween) SetSpeedScale(speed Float) Tween {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Float](0, abi, speed)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Tween.set_speed_scale, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Tween](abi)
	abi.free()
	return ret
}

func (self Tween) SetTrans(trans TweenTransitionType) Tween {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[TweenTransitionType](0, abi, trans)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Tween.set_trans, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Tween](abi)
	abi.free()
	return ret
}

func (self Tween) SetEase(ease TweenEaseType) Tween {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[TweenEaseType](0, abi, ease)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Tween.set_ease, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Tween](abi)
	abi.free()
	return ret
}

func (self Tween) Parallel() Tween {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Tween.parallel, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Tween](abi)
	abi.free()
	return ret
}

func (self Tween) Chain() Tween {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Tween.chain, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Tween](abi)
	abi.free()
	return ret
}

func (self Tween) InterpolateValue(ctx Context, initial_value Variant, delta_value Variant, elapsed_time Float, duration Float, trans_type TweenTransitionType, ease_type TweenEaseType) Variant {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Variant](0, abi, initial_value)
	frameSet[Variant](1, abi, delta_value)
	frameSet[Float](2, abi, elapsed_time)
	frameSet[Float](3, abi, duration)
	frameSet[TweenTransitionType](4, abi, trans_type)
	frameSet[TweenEaseType](5, abi, ease_type)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Tween.interpolate_value, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[[3]uintptr](abi)
	abi.free()
	return mmm.Make[API, Variant, [3]uintptr](ctx, selfPtr.API, ret)
}

func (self Tween) virtual(name string) reflect.Value {
	switch name {
	default:
		return self.Super().virtual(name)
	}
}

type Tweener struct{ Class[Tweener, RefCounted] }

func (self Tweener) RefCounted() RefCounted { return *self.Super() }

func (self Tweener) Object() Object { return *self.Super().Super() }

func (self Tweener) virtual(name string) reflect.Value {
	switch name {
	default:
		return self.Super().virtual(name)
	}
}

type ViewportPositionalShadowAtlasQuadrantSubdiv int64

type ViewportScaling3DMode int64

type ViewportMSAA int64

type ViewportScreenSpaceAA int64

type ViewportRenderInfo int64

type ViewportRenderInfoType int64

type ViewportDebugDraw int64

type ViewportDefaultCanvasItemTextureFilter int64

type ViewportDefaultCanvasItemTextureRepeat int64

type ViewportSDFOversize int64

type ViewportSDFScale int64

type ViewportVRSMode int64
type Viewport struct{ Class[Viewport, Node] }

func (self Viewport) Node() Node { return *self.Super() }

func (self Viewport) Object() Object { return *self.Super().Super() }

func (self Viewport) SetWorld2d(world_2d World2D) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[World2D](0, abi, world_2d)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Viewport.set_world_2d, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self Viewport) GetWorld2d() World2D {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Viewport.get_world_2d, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[World2D](abi)
	abi.free()
	return ret
}

func (self Viewport) FindWorld2d() World2D {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Viewport.find_world_2d, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[World2D](abi)
	abi.free()
	return ret
}

func (self Viewport) SetCanvasTransform(xform Transform2D) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Transform2D](0, abi, xform)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Viewport.set_canvas_transform, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self Viewport) GetCanvasTransform() Transform2D {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Viewport.get_canvas_transform, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Transform2D](abi)
	abi.free()
	return ret
}

func (self Viewport) SetGlobalCanvasTransform(xform Transform2D) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Transform2D](0, abi, xform)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Viewport.set_global_canvas_transform, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self Viewport) GetGlobalCanvasTransform() Transform2D {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Viewport.get_global_canvas_transform, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Transform2D](abi)
	abi.free()
	return ret
}

func (self Viewport) GetFinalTransform() Transform2D {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Viewport.get_final_transform, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Transform2D](abi)
	abi.free()
	return ret
}

func (self Viewport) GetScreenTransform() Transform2D {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Viewport.get_screen_transform, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Transform2D](abi)
	abi.free()
	return ret
}

func (self Viewport) GetVisibleRect() Rect2 {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Viewport.get_visible_rect, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Rect2](abi)
	abi.free()
	return ret
}

func (self Viewport) SetTransparentBackground(enable bool) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[bool](0, abi, enable)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Viewport.set_transparent_background, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self Viewport) HasTransparentBackground() bool {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Viewport.has_transparent_background, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self Viewport) SetUseHdr2d(enable bool) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[bool](0, abi, enable)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Viewport.set_use_hdr_2d, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self Viewport) IsUsingHdr2d() bool {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Viewport.is_using_hdr_2d, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self Viewport) SetMsaa2d(msaa ViewportMSAA) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[ViewportMSAA](0, abi, msaa)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Viewport.set_msaa_2d, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self Viewport) GetMsaa2d() ViewportMSAA {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Viewport.get_msaa_2d, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[ViewportMSAA](abi)
	abi.free()
	return ret
}

func (self Viewport) SetMsaa3d(msaa ViewportMSAA) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[ViewportMSAA](0, abi, msaa)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Viewport.set_msaa_3d, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self Viewport) GetMsaa3d() ViewportMSAA {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Viewport.get_msaa_3d, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[ViewportMSAA](abi)
	abi.free()
	return ret
}

func (self Viewport) SetScreenSpaceAa(screen_space_aa ViewportScreenSpaceAA) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[ViewportScreenSpaceAA](0, abi, screen_space_aa)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Viewport.set_screen_space_aa, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self Viewport) GetScreenSpaceAa() ViewportScreenSpaceAA {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Viewport.get_screen_space_aa, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[ViewportScreenSpaceAA](abi)
	abi.free()
	return ret
}

func (self Viewport) SetUseTaa(enable bool) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[bool](0, abi, enable)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Viewport.set_use_taa, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self Viewport) IsUsingTaa() bool {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Viewport.is_using_taa, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self Viewport) SetUseDebanding(enable bool) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[bool](0, abi, enable)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Viewport.set_use_debanding, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self Viewport) IsUsingDebanding() bool {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Viewport.is_using_debanding, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self Viewport) SetUseOcclusionCulling(enable bool) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[bool](0, abi, enable)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Viewport.set_use_occlusion_culling, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self Viewport) IsUsingOcclusionCulling() bool {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Viewport.is_using_occlusion_culling, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self Viewport) SetDebugDraw(debug_draw ViewportDebugDraw) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[ViewportDebugDraw](0, abi, debug_draw)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Viewport.set_debug_draw, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self Viewport) GetDebugDraw() ViewportDebugDraw {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Viewport.get_debug_draw, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[ViewportDebugDraw](abi)
	abi.free()
	return ret
}

func (self Viewport) GetRenderInfo(atype ViewportRenderInfoType, info ViewportRenderInfo) Int {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[ViewportRenderInfoType](0, abi, atype)
	frameSet[ViewportRenderInfo](1, abi, info)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Viewport.get_render_info, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Int](abi)
	abi.free()
	return ret
}

func (self Viewport) GetTexture() ViewportTexture {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Viewport.get_texture, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[ViewportTexture](abi)
	abi.free()
	return ret
}

func (self Viewport) SetPhysicsObjectPicking(enable bool) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[bool](0, abi, enable)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Viewport.set_physics_object_picking, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self Viewport) GetPhysicsObjectPicking() bool {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Viewport.get_physics_object_picking, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self Viewport) SetPhysicsObjectPickingSort(enable bool) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[bool](0, abi, enable)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Viewport.set_physics_object_picking_sort, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self Viewport) GetPhysicsObjectPickingSort() bool {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Viewport.get_physics_object_picking_sort, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self Viewport) GetViewportRid() RID {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Viewport.get_viewport_rid, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[RID](abi)
	abi.free()
	return ret
}

func (self Viewport) PushTextInput(text String) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[String](0, abi, text)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Viewport.push_text_input, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self Viewport) PushInput(event InputEvent, in_local_coords bool) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[InputEvent](0, abi, event)
	frameSet[bool](1, abi, in_local_coords)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Viewport.push_input, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self Viewport) PushUnhandledInput(event InputEvent, in_local_coords bool) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[InputEvent](0, abi, event)
	frameSet[bool](1, abi, in_local_coords)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Viewport.push_unhandled_input, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self Viewport) GetCamera2d() Camera2D {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Viewport.get_camera_2d, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Camera2D](abi)
	abi.free()
	return ret
}

func (self Viewport) SetAsAudioListener2d(enable bool) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[bool](0, abi, enable)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Viewport.set_as_audio_listener_2d, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self Viewport) IsAudioListener2d() bool {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Viewport.is_audio_listener_2d, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self Viewport) GetMousePosition() Vector2 {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Viewport.get_mouse_position, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Vector2](abi)
	abi.free()
	return ret
}

func (self Viewport) WarpMouse(position Vector2) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Vector2](0, abi, position)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Viewport.warp_mouse, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self Viewport) UpdateMouseCursorState() {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Viewport.update_mouse_cursor_state, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self Viewport) GuiGetDragData(ctx Context) Variant {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Viewport.gui_get_drag_data, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[[3]uintptr](abi)
	abi.free()
	return mmm.Make[API, Variant, [3]uintptr](ctx, selfPtr.API, ret)
}

func (self Viewport) GuiIsDragging() bool {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Viewport.gui_is_dragging, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self Viewport) GuiIsDragSuccessful() bool {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Viewport.gui_is_drag_successful, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self Viewport) GuiReleaseFocus() {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Viewport.gui_release_focus, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self Viewport) GuiGetFocusOwner() Control {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Viewport.gui_get_focus_owner, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Control](abi)
	abi.free()
	return ret
}

func (self Viewport) SetDisableInput(disable bool) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[bool](0, abi, disable)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Viewport.set_disable_input, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self Viewport) IsInputDisabled() bool {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Viewport.is_input_disabled, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self Viewport) SetPositionalShadowAtlasSize(size Int) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Int](0, abi, size)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Viewport.set_positional_shadow_atlas_size, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self Viewport) GetPositionalShadowAtlasSize() Int {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Viewport.get_positional_shadow_atlas_size, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Int](abi)
	abi.free()
	return ret
}

func (self Viewport) SetPositionalShadowAtlas16Bits(enable bool) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[bool](0, abi, enable)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Viewport.set_positional_shadow_atlas_16_bits, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self Viewport) GetPositionalShadowAtlas16Bits() bool {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Viewport.get_positional_shadow_atlas_16_bits, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self Viewport) SetSnapControlsToPixels(enabled bool) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[bool](0, abi, enabled)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Viewport.set_snap_controls_to_pixels, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self Viewport) IsSnapControlsToPixelsEnabled() bool {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Viewport.is_snap_controls_to_pixels_enabled, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self Viewport) SetSnap2dTransformsToPixel(enabled bool) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[bool](0, abi, enabled)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Viewport.set_snap_2d_transforms_to_pixel, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self Viewport) IsSnap2dTransformsToPixelEnabled() bool {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Viewport.is_snap_2d_transforms_to_pixel_enabled, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self Viewport) SetSnap2dVerticesToPixel(enabled bool) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[bool](0, abi, enabled)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Viewport.set_snap_2d_vertices_to_pixel, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self Viewport) IsSnap2dVerticesToPixelEnabled() bool {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Viewport.is_snap_2d_vertices_to_pixel_enabled, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self Viewport) SetPositionalShadowAtlasQuadrantSubdiv(quadrant Int, subdiv ViewportPositionalShadowAtlasQuadrantSubdiv) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Int](0, abi, quadrant)
	frameSet[ViewportPositionalShadowAtlasQuadrantSubdiv](1, abi, subdiv)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Viewport.set_positional_shadow_atlas_quadrant_subdiv, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self Viewport) GetPositionalShadowAtlasQuadrantSubdiv(quadrant Int) ViewportPositionalShadowAtlasQuadrantSubdiv {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Int](0, abi, quadrant)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Viewport.get_positional_shadow_atlas_quadrant_subdiv, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[ViewportPositionalShadowAtlasQuadrantSubdiv](abi)
	abi.free()
	return ret
}

func (self Viewport) SetInputAsHandled() {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Viewport.set_input_as_handled, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self Viewport) IsInputHandled() bool {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Viewport.is_input_handled, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self Viewport) SetHandleInputLocally(enable bool) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[bool](0, abi, enable)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Viewport.set_handle_input_locally, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self Viewport) IsHandlingInputLocally() bool {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Viewport.is_handling_input_locally, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self Viewport) SetDefaultCanvasItemTextureFilter(mode ViewportDefaultCanvasItemTextureFilter) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[ViewportDefaultCanvasItemTextureFilter](0, abi, mode)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Viewport.set_default_canvas_item_texture_filter, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self Viewport) GetDefaultCanvasItemTextureFilter() ViewportDefaultCanvasItemTextureFilter {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Viewport.get_default_canvas_item_texture_filter, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[ViewportDefaultCanvasItemTextureFilter](abi)
	abi.free()
	return ret
}

func (self Viewport) SetEmbeddingSubwindows(enable bool) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[bool](0, abi, enable)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Viewport.set_embedding_subwindows, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self Viewport) IsEmbeddingSubwindows() bool {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Viewport.is_embedding_subwindows, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self Viewport) GetEmbeddedSubwindows() ArrayOf[Window] {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Viewport.get_embedded_subwindows, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[ArrayOf[Window]](abi)
	abi.free()
	return ret
}

func (self Viewport) SetCanvasCullMask(mask Int) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Int](0, abi, mask)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Viewport.set_canvas_cull_mask, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self Viewport) GetCanvasCullMask() Int {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Viewport.get_canvas_cull_mask, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Int](abi)
	abi.free()
	return ret
}

func (self Viewport) SetCanvasCullMaskBit(layer Int, enable bool) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Int](0, abi, layer)
	frameSet[bool](1, abi, enable)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Viewport.set_canvas_cull_mask_bit, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self Viewport) GetCanvasCullMaskBit(layer Int) bool {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Int](0, abi, layer)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Viewport.get_canvas_cull_mask_bit, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self Viewport) SetDefaultCanvasItemTextureRepeat(mode ViewportDefaultCanvasItemTextureRepeat) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[ViewportDefaultCanvasItemTextureRepeat](0, abi, mode)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Viewport.set_default_canvas_item_texture_repeat, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self Viewport) GetDefaultCanvasItemTextureRepeat() ViewportDefaultCanvasItemTextureRepeat {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Viewport.get_default_canvas_item_texture_repeat, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[ViewportDefaultCanvasItemTextureRepeat](abi)
	abi.free()
	return ret
}

func (self Viewport) SetSdfOversize(oversize ViewportSDFOversize) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[ViewportSDFOversize](0, abi, oversize)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Viewport.set_sdf_oversize, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self Viewport) GetSdfOversize() ViewportSDFOversize {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Viewport.get_sdf_oversize, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[ViewportSDFOversize](abi)
	abi.free()
	return ret
}

func (self Viewport) SetSdfScale(scale ViewportSDFScale) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[ViewportSDFScale](0, abi, scale)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Viewport.set_sdf_scale, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self Viewport) GetSdfScale() ViewportSDFScale {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Viewport.get_sdf_scale, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[ViewportSDFScale](abi)
	abi.free()
	return ret
}

func (self Viewport) SetMeshLodThreshold(pixels Float) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Float](0, abi, pixels)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Viewport.set_mesh_lod_threshold, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self Viewport) GetMeshLodThreshold() Float {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Viewport.get_mesh_lod_threshold, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Float](abi)
	abi.free()
	return ret
}

func (self Viewport) SetWorld3d(world_3d World3D) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[World3D](0, abi, world_3d)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Viewport.set_world_3d, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self Viewport) GetWorld3d() World3D {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Viewport.get_world_3d, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[World3D](abi)
	abi.free()
	return ret
}

func (self Viewport) FindWorld3d() World3D {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Viewport.find_world_3d, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[World3D](abi)
	abi.free()
	return ret
}

func (self Viewport) SetUseOwnWorld3d(enable bool) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[bool](0, abi, enable)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Viewport.set_use_own_world_3d, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self Viewport) IsUsingOwnWorld3d() bool {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Viewport.is_using_own_world_3d, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self Viewport) GetCamera3d() Camera3D {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Viewport.get_camera_3d, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Camera3D](abi)
	abi.free()
	return ret
}

func (self Viewport) SetAsAudioListener3d(enable bool) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[bool](0, abi, enable)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Viewport.set_as_audio_listener_3d, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self Viewport) IsAudioListener3d() bool {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Viewport.is_audio_listener_3d, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self Viewport) SetDisable3d(disable bool) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[bool](0, abi, disable)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Viewport.set_disable_3d, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self Viewport) Is3dDisabled() bool {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Viewport.is_3d_disabled, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self Viewport) SetUseXr(use bool) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[bool](0, abi, use)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Viewport.set_use_xr, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self Viewport) IsUsingXr() bool {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Viewport.is_using_xr, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self Viewport) SetScaling3dMode(scaling_3d_mode ViewportScaling3DMode) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[ViewportScaling3DMode](0, abi, scaling_3d_mode)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Viewport.set_scaling_3d_mode, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self Viewport) GetScaling3dMode() ViewportScaling3DMode {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Viewport.get_scaling_3d_mode, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[ViewportScaling3DMode](abi)
	abi.free()
	return ret
}

func (self Viewport) SetScaling3dScale(scale Float) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Float](0, abi, scale)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Viewport.set_scaling_3d_scale, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self Viewport) GetScaling3dScale() Float {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Viewport.get_scaling_3d_scale, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Float](abi)
	abi.free()
	return ret
}

func (self Viewport) SetFsrSharpness(fsr_sharpness Float) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Float](0, abi, fsr_sharpness)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Viewport.set_fsr_sharpness, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self Viewport) GetFsrSharpness() Float {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Viewport.get_fsr_sharpness, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Float](abi)
	abi.free()
	return ret
}

func (self Viewport) SetTextureMipmapBias(texture_mipmap_bias Float) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Float](0, abi, texture_mipmap_bias)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Viewport.set_texture_mipmap_bias, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self Viewport) GetTextureMipmapBias() Float {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Viewport.get_texture_mipmap_bias, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Float](abi)
	abi.free()
	return ret
}

func (self Viewport) SetVrsMode(mode ViewportVRSMode) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[ViewportVRSMode](0, abi, mode)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Viewport.set_vrs_mode, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self Viewport) GetVrsMode() ViewportVRSMode {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Viewport.get_vrs_mode, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[ViewportVRSMode](abi)
	abi.free()
	return ret
}

func (self Viewport) SetVrsTexture(texture Texture2D) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Texture2D](0, abi, texture)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Viewport.set_vrs_texture, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self Viewport) GetVrsTexture() Texture2D {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Viewport.get_vrs_texture, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Texture2D](abi)
	abi.free()
	return ret
}

func (self Viewport) virtual(name string) reflect.Value {
	switch name {
	default:
		return self.Super().virtual(name)
	}
}

type ViewportTexture struct {
	Class[ViewportTexture, Texture2D]
}

func (self ViewportTexture) Texture2D() Texture2D { return *self.Super() }

func (self ViewportTexture) Texture() Texture { return *self.Super().Super() }

func (self ViewportTexture) Resource() Resource { return *self.Super().Super().Super() }

func (self ViewportTexture) RefCounted() RefCounted { return *self.Super().Super().Super().Super() }

func (self ViewportTexture) Object() Object { return *self.Super().Super().Super().Super().Super() }

func (self ViewportTexture) SetViewportPathInScene(path NodePath) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[NodePath](0, abi, path)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.ViewportTexture.set_viewport_path_in_scene, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self ViewportTexture) GetViewportPathInScene(ctx Context) NodePath {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.ViewportTexture.get_viewport_path_in_scene, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[uintptr](abi)
	abi.free()
	return mmm.Make[API, NodePath, uintptr](ctx, selfPtr.API, ret)
}

func (self ViewportTexture) virtual(name string) reflect.Value {
	switch name {
	default:
		return self.Super().virtual(name)
	}
}

type WindowMode int64

type WindowFlags int64

type WindowContentScaleMode int64

type WindowContentScaleAspect int64

type WindowContentScaleStretch int64

type WindowLayoutDirection int64

type WindowWindowInitialPosition int64
type Window struct{ Class[Window, Viewport] }

func (self Window) Viewport() Viewport { return *self.Super() }

func (self Window) Node() Node { return *self.Super().Super() }

func (self Window) Object() Object { return *self.Super().Super().Super() }

func (Window) _get_contents_minimum_size(impl func(ptr unsafe.Pointer, ctx Context) Vector2, api *API) (cb ExtensionClassCallVirtualFunc) {
	cb.Set(func(class cgo.Handle, p_args godotArgs, p_back godotBack) {
		ctx := newContext(api)
		self := reflect.ValueOf(class.Value()).UnsafePointer()
		ret := impl(self, ctx)
		ctx.Free()
		godotSet[Vector2](p_back, ret)
	})
	return
}

func (self Window) SetTitle(title String) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[String](0, abi, title)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Window.set_title, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self Window) GetTitle(ctx Context) String {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Window.get_title, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[uintptr](abi)
	abi.free()
	return mmm.Make[API, String, uintptr](ctx, selfPtr.API, ret)
}

func (self Window) GetWindowId() Int {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Window.get_window_id, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Int](abi)
	abi.free()
	return ret
}

func (self Window) SetInitialPosition(initial_position WindowWindowInitialPosition) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[WindowWindowInitialPosition](0, abi, initial_position)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Window.set_initial_position, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self Window) GetInitialPosition() WindowWindowInitialPosition {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Window.get_initial_position, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[WindowWindowInitialPosition](abi)
	abi.free()
	return ret
}

func (self Window) SetCurrentScreen(index Int) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Int](0, abi, index)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Window.set_current_screen, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self Window) GetCurrentScreen() Int {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Window.get_current_screen, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Int](abi)
	abi.free()
	return ret
}

func (self Window) SetPosition(position Vector2i) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Vector2i](0, abi, position)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Window.set_position, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self Window) GetPosition() Vector2i {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Window.get_position, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Vector2i](abi)
	abi.free()
	return ret
}

func (self Window) MoveToCenter() {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Window.move_to_center, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self Window) SetSize(size Vector2i) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Vector2i](0, abi, size)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Window.set_size, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self Window) GetSize() Vector2i {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Window.get_size, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Vector2i](abi)
	abi.free()
	return ret
}

func (self Window) ResetSize() {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Window.reset_size, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self Window) GetPositionWithDecorations() Vector2i {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Window.get_position_with_decorations, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Vector2i](abi)
	abi.free()
	return ret
}

func (self Window) GetSizeWithDecorations() Vector2i {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Window.get_size_with_decorations, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Vector2i](abi)
	abi.free()
	return ret
}

func (self Window) SetMaxSize(max_size Vector2i) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Vector2i](0, abi, max_size)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Window.set_max_size, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self Window) GetMaxSize() Vector2i {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Window.get_max_size, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Vector2i](abi)
	abi.free()
	return ret
}

func (self Window) SetMinSize(min_size Vector2i) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Vector2i](0, abi, min_size)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Window.set_min_size, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self Window) GetMinSize() Vector2i {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Window.get_min_size, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Vector2i](abi)
	abi.free()
	return ret
}

func (self Window) SetMode(mode WindowMode) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[WindowMode](0, abi, mode)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Window.set_mode, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self Window) GetMode() WindowMode {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Window.get_mode, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[WindowMode](abi)
	abi.free()
	return ret
}

func (self Window) SetFlag(flag WindowFlags, enabled bool) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[WindowFlags](0, abi, flag)
	frameSet[bool](1, abi, enabled)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Window.set_flag, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self Window) GetFlag(flag WindowFlags) bool {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[WindowFlags](0, abi, flag)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Window.get_flag, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self Window) IsMaximizeAllowed() bool {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Window.is_maximize_allowed, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self Window) RequestAttention() {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Window.request_attention, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self Window) MoveToForeground() {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Window.move_to_foreground, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self Window) SetVisible(visible bool) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[bool](0, abi, visible)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Window.set_visible, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self Window) IsVisible() bool {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Window.is_visible, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self Window) Hide() {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Window.hide, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self Window) Show() {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Window.show, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self Window) SetTransient(transient bool) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[bool](0, abi, transient)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Window.set_transient, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self Window) IsTransient() bool {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Window.is_transient, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self Window) SetExclusive(exclusive bool) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[bool](0, abi, exclusive)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Window.set_exclusive, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self Window) IsExclusive() bool {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Window.is_exclusive, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self Window) SetUnparentWhenInvisible(unparent bool) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[bool](0, abi, unparent)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Window.set_unparent_when_invisible, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self Window) CanDraw() bool {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Window.can_draw, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self Window) HasFocus() bool {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Window.has_focus, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self Window) GrabFocus() {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Window.grab_focus, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self Window) SetImeActive(active bool) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[bool](0, abi, active)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Window.set_ime_active, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self Window) SetImePosition(position Vector2i) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Vector2i](0, abi, position)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Window.set_ime_position, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self Window) IsEmbedded() bool {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Window.is_embedded, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self Window) GetContentsMinimumSize() Vector2 {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Window.get_contents_minimum_size, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Vector2](abi)
	abi.free()
	return ret
}

func (self Window) SetContentScaleSize(size Vector2i) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Vector2i](0, abi, size)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Window.set_content_scale_size, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self Window) GetContentScaleSize() Vector2i {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Window.get_content_scale_size, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Vector2i](abi)
	abi.free()
	return ret
}

func (self Window) SetContentScaleMode(mode WindowContentScaleMode) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[WindowContentScaleMode](0, abi, mode)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Window.set_content_scale_mode, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self Window) GetContentScaleMode() WindowContentScaleMode {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Window.get_content_scale_mode, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[WindowContentScaleMode](abi)
	abi.free()
	return ret
}

func (self Window) SetContentScaleAspect(aspect WindowContentScaleAspect) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[WindowContentScaleAspect](0, abi, aspect)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Window.set_content_scale_aspect, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self Window) GetContentScaleAspect() WindowContentScaleAspect {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Window.get_content_scale_aspect, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[WindowContentScaleAspect](abi)
	abi.free()
	return ret
}

func (self Window) SetContentScaleStretch(stretch WindowContentScaleStretch) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[WindowContentScaleStretch](0, abi, stretch)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Window.set_content_scale_stretch, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self Window) GetContentScaleStretch() WindowContentScaleStretch {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Window.get_content_scale_stretch, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[WindowContentScaleStretch](abi)
	abi.free()
	return ret
}

func (self Window) SetKeepTitleVisible(title_visible bool) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[bool](0, abi, title_visible)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Window.set_keep_title_visible, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self Window) GetKeepTitleVisible() bool {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Window.get_keep_title_visible, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self Window) SetContentScaleFactor(factor Float) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Float](0, abi, factor)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Window.set_content_scale_factor, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self Window) GetContentScaleFactor() Float {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Window.get_content_scale_factor, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Float](abi)
	abi.free()
	return ret
}

func (self Window) SetUseFontOversampling(enable bool) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[bool](0, abi, enable)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Window.set_use_font_oversampling, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self Window) IsUsingFontOversampling() bool {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Window.is_using_font_oversampling, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self Window) SetMousePassthroughPolygon(polygon PackedVector2Array) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[PackedVector2Array](0, abi, polygon)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Window.set_mouse_passthrough_polygon, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self Window) GetMousePassthroughPolygon(ctx Context) PackedVector2Array {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Window.get_mouse_passthrough_polygon, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[[2]uintptr](abi)
	abi.free()
	return mmm.Make[API, PackedVector2Array, [2]uintptr](ctx, selfPtr.API, ret)
}

func (self Window) SetWrapControls(enable bool) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[bool](0, abi, enable)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Window.set_wrap_controls, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self Window) IsWrappingControls() bool {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Window.is_wrapping_controls, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self Window) ChildControlsChanged() {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Window.child_controls_changed, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self Window) SetTheme(theme Theme) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Theme](0, abi, theme)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Window.set_theme, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self Window) GetTheme() Theme {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Window.get_theme, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Theme](abi)
	abi.free()
	return ret
}

func (self Window) SetThemeTypeVariation(theme_type StringName) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[StringName](0, abi, theme_type)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Window.set_theme_type_variation, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self Window) GetThemeTypeVariation(ctx Context) StringName {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Window.get_theme_type_variation, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[uintptr](abi)
	abi.free()
	return mmm.Make[API, StringName, uintptr](ctx, selfPtr.API, ret)
}

func (self Window) BeginBulkThemeOverride() {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Window.begin_bulk_theme_override, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self Window) EndBulkThemeOverride() {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Window.end_bulk_theme_override, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self Window) AddThemeIconOverride(name StringName, texture Texture2D) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[StringName](0, abi, name)
	frameSet[Texture2D](1, abi, texture)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Window.add_theme_icon_override, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self Window) AddThemeStyleboxOverride(name StringName, stylebox StyleBox) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[StringName](0, abi, name)
	frameSet[StyleBox](1, abi, stylebox)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Window.add_theme_stylebox_override, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self Window) AddThemeFontOverride(name StringName, font Font) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[StringName](0, abi, name)
	frameSet[Font](1, abi, font)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Window.add_theme_font_override, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self Window) AddThemeFontSizeOverride(name StringName, font_size Int) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[StringName](0, abi, name)
	frameSet[Int](1, abi, font_size)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Window.add_theme_font_size_override, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self Window) AddThemeColorOverride(name StringName, color Color) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[StringName](0, abi, name)
	frameSet[Color](1, abi, color)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Window.add_theme_color_override, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self Window) AddThemeConstantOverride(name StringName, constant Int) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[StringName](0, abi, name)
	frameSet[Int](1, abi, constant)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Window.add_theme_constant_override, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self Window) RemoveThemeIconOverride(name StringName) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[StringName](0, abi, name)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Window.remove_theme_icon_override, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self Window) RemoveThemeStyleboxOverride(name StringName) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[StringName](0, abi, name)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Window.remove_theme_stylebox_override, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self Window) RemoveThemeFontOverride(name StringName) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[StringName](0, abi, name)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Window.remove_theme_font_override, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self Window) RemoveThemeFontSizeOverride(name StringName) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[StringName](0, abi, name)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Window.remove_theme_font_size_override, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self Window) RemoveThemeColorOverride(name StringName) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[StringName](0, abi, name)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Window.remove_theme_color_override, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self Window) RemoveThemeConstantOverride(name StringName) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[StringName](0, abi, name)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Window.remove_theme_constant_override, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self Window) GetThemeIcon(name StringName, theme_type StringName) Texture2D {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[StringName](0, abi, name)
	frameSet[StringName](1, abi, theme_type)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Window.get_theme_icon, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Texture2D](abi)
	abi.free()
	return ret
}

func (self Window) GetThemeStylebox(name StringName, theme_type StringName) StyleBox {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[StringName](0, abi, name)
	frameSet[StringName](1, abi, theme_type)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Window.get_theme_stylebox, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[StyleBox](abi)
	abi.free()
	return ret
}

func (self Window) GetThemeFont(name StringName, theme_type StringName) Font {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[StringName](0, abi, name)
	frameSet[StringName](1, abi, theme_type)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Window.get_theme_font, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Font](abi)
	abi.free()
	return ret
}

func (self Window) GetThemeFontSize(name StringName, theme_type StringName) Int {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[StringName](0, abi, name)
	frameSet[StringName](1, abi, theme_type)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Window.get_theme_font_size, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Int](abi)
	abi.free()
	return ret
}

func (self Window) GetThemeColor(name StringName, theme_type StringName) Color {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[StringName](0, abi, name)
	frameSet[StringName](1, abi, theme_type)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Window.get_theme_color, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Color](abi)
	abi.free()
	return ret
}

func (self Window) GetThemeConstant(name StringName, theme_type StringName) Int {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[StringName](0, abi, name)
	frameSet[StringName](1, abi, theme_type)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Window.get_theme_constant, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Int](abi)
	abi.free()
	return ret
}

func (self Window) HasThemeIconOverride(name StringName) bool {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[StringName](0, abi, name)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Window.has_theme_icon_override, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self Window) HasThemeStyleboxOverride(name StringName) bool {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[StringName](0, abi, name)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Window.has_theme_stylebox_override, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self Window) HasThemeFontOverride(name StringName) bool {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[StringName](0, abi, name)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Window.has_theme_font_override, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self Window) HasThemeFontSizeOverride(name StringName) bool {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[StringName](0, abi, name)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Window.has_theme_font_size_override, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self Window) HasThemeColorOverride(name StringName) bool {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[StringName](0, abi, name)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Window.has_theme_color_override, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self Window) HasThemeConstantOverride(name StringName) bool {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[StringName](0, abi, name)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Window.has_theme_constant_override, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self Window) HasThemeIcon(name StringName, theme_type StringName) bool {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[StringName](0, abi, name)
	frameSet[StringName](1, abi, theme_type)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Window.has_theme_icon, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self Window) HasThemeStylebox(name StringName, theme_type StringName) bool {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[StringName](0, abi, name)
	frameSet[StringName](1, abi, theme_type)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Window.has_theme_stylebox, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self Window) HasThemeFont(name StringName, theme_type StringName) bool {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[StringName](0, abi, name)
	frameSet[StringName](1, abi, theme_type)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Window.has_theme_font, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self Window) HasThemeFontSize(name StringName, theme_type StringName) bool {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[StringName](0, abi, name)
	frameSet[StringName](1, abi, theme_type)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Window.has_theme_font_size, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self Window) HasThemeColor(name StringName, theme_type StringName) bool {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[StringName](0, abi, name)
	frameSet[StringName](1, abi, theme_type)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Window.has_theme_color, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self Window) HasThemeConstant(name StringName, theme_type StringName) bool {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[StringName](0, abi, name)
	frameSet[StringName](1, abi, theme_type)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Window.has_theme_constant, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self Window) GetThemeDefaultBaseScale() Float {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Window.get_theme_default_base_scale, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Float](abi)
	abi.free()
	return ret
}

func (self Window) GetThemeDefaultFont() Font {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Window.get_theme_default_font, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Font](abi)
	abi.free()
	return ret
}

func (self Window) GetThemeDefaultFontSize() Int {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Window.get_theme_default_font_size, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Int](abi)
	abi.free()
	return ret
}

func (self Window) SetLayoutDirection(direction WindowLayoutDirection) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[WindowLayoutDirection](0, abi, direction)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Window.set_layout_direction, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self Window) GetLayoutDirection() WindowLayoutDirection {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Window.get_layout_direction, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[WindowLayoutDirection](abi)
	abi.free()
	return ret
}

func (self Window) IsLayoutRtl() bool {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Window.is_layout_rtl, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self Window) SetAutoTranslate(enable bool) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[bool](0, abi, enable)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Window.set_auto_translate, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self Window) IsAutoTranslating() bool {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Window.is_auto_translating, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self Window) Popup(rect Rect2i) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Rect2i](0, abi, rect)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Window.popup, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self Window) PopupOnParent(parent_rect Rect2i) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Rect2i](0, abi, parent_rect)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Window.popup_on_parent, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self Window) PopupCentered(minsize Vector2i) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Vector2i](0, abi, minsize)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Window.popup_centered, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self Window) PopupCenteredRatio(ratio Float) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Float](0, abi, ratio)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Window.popup_centered_ratio, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self Window) PopupCenteredClamped(minsize Vector2i, fallback_ratio Float) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Vector2i](0, abi, minsize)
	frameSet[Float](1, abi, fallback_ratio)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Window.popup_centered_clamped, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self Window) PopupExclusive(from_node Node, rect Rect2i) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Node](0, abi, from_node)
	frameSet[Rect2i](1, abi, rect)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Window.popup_exclusive, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self Window) PopupExclusiveOnParent(from_node Node, parent_rect Rect2i) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Node](0, abi, from_node)
	frameSet[Rect2i](1, abi, parent_rect)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Window.popup_exclusive_on_parent, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self Window) PopupExclusiveCentered(from_node Node, minsize Vector2i) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Node](0, abi, from_node)
	frameSet[Vector2i](1, abi, minsize)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Window.popup_exclusive_centered, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self Window) PopupExclusiveCenteredRatio(from_node Node, ratio Float) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Node](0, abi, from_node)
	frameSet[Float](1, abi, ratio)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Window.popup_exclusive_centered_ratio, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self Window) PopupExclusiveCenteredClamped(from_node Node, minsize Vector2i, fallback_ratio Float) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Node](0, abi, from_node)
	frameSet[Vector2i](1, abi, minsize)
	frameSet[Float](2, abi, fallback_ratio)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.Window.popup_exclusive_centered_clamped, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self Window) virtual(name string) reflect.Value {
	switch name {
	case "_get_contents_minimum_size":
		return reflect.ValueOf(self._get_contents_minimum_size)
	default:
		return self.Super().virtual(name)
	}
}

type World2D struct{ Class[World2D, Resource] }

func (self World2D) Resource() Resource { return *self.Super() }

func (self World2D) RefCounted() RefCounted { return *self.Super().Super() }

func (self World2D) Object() Object { return *self.Super().Super().Super() }

func (self World2D) GetCanvas() RID {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.World2D.get_canvas, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[RID](abi)
	abi.free()
	return ret
}

func (self World2D) GetSpace() RID {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.World2D.get_space, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[RID](abi)
	abi.free()
	return ret
}

func (self World2D) GetNavigationMap() RID {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.World2D.get_navigation_map, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[RID](abi)
	abi.free()
	return ret
}

func (self World2D) GetDirectSpaceState() PhysicsDirectSpaceState2D {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.World2D.get_direct_space_state, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[PhysicsDirectSpaceState2D](abi)
	abi.free()
	return ret
}

func (self World2D) virtual(name string) reflect.Value {
	switch name {
	default:
		return self.Super().virtual(name)
	}
}

type World3D struct{ Class[World3D, Resource] }

func (self World3D) Resource() Resource { return *self.Super() }

func (self World3D) RefCounted() RefCounted { return *self.Super().Super() }

func (self World3D) Object() Object { return *self.Super().Super().Super() }

func (self World3D) GetSpace() RID {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.World3D.get_space, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[RID](abi)
	abi.free()
	return ret
}

func (self World3D) GetNavigationMap() RID {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.World3D.get_navigation_map, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[RID](abi)
	abi.free()
	return ret
}

func (self World3D) GetScenario() RID {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.World3D.get_scenario, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[RID](abi)
	abi.free()
	return ret
}

func (self World3D) SetEnvironment(env Environment) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Environment](0, abi, env)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.World3D.set_environment, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self World3D) GetEnvironment() Environment {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.World3D.get_environment, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Environment](abi)
	abi.free()
	return ret
}

func (self World3D) SetFallbackEnvironment(env Environment) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Environment](0, abi, env)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.World3D.set_fallback_environment, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self World3D) GetFallbackEnvironment() Environment {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.World3D.get_fallback_environment, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Environment](abi)
	abi.free()
	return ret
}

func (self World3D) SetCameraAttributes(attributes CameraAttributes) {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[CameraAttributes](0, abi, attributes)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.World3D.set_camera_attributes, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self World3D) GetCameraAttributes() CameraAttributes {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.World3D.get_camera_attributes, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[CameraAttributes](abi)
	abi.free()
	return ret
}

func (self World3D) GetDirectSpaceState() PhysicsDirectSpaceState3D {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.World3D.get_direct_space_state, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[PhysicsDirectSpaceState3D](abi)
	abi.free()
	return ret
}

func (self World3D) virtual(name string) reflect.Value {
	switch name {
	default:
		return self.Super().virtual(name)
	}
}

type XMLParserNodeType int64
type XMLParser struct{ Class[XMLParser, RefCounted] }

func (self XMLParser) RefCounted() RefCounted { return *self.Super() }

func (self XMLParser) Object() Object { return *self.Super().Super() }

func (self XMLParser) Read() int64 {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.XMLParser.read, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[int64](abi)
	abi.free()
	return ret
}

func (self XMLParser) GetNodeType() XMLParserNodeType {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.XMLParser.get_node_type, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[XMLParserNodeType](abi)
	abi.free()
	return ret
}

func (self XMLParser) GetNodeName(ctx Context) String {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.XMLParser.get_node_name, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[uintptr](abi)
	abi.free()
	return mmm.Make[API, String, uintptr](ctx, selfPtr.API, ret)
}

func (self XMLParser) GetNodeData(ctx Context) String {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.XMLParser.get_node_data, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[uintptr](abi)
	abi.free()
	return mmm.Make[API, String, uintptr](ctx, selfPtr.API, ret)
}

func (self XMLParser) GetNodeOffset() Int {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.XMLParser.get_node_offset, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Int](abi)
	abi.free()
	return ret
}

func (self XMLParser) GetAttributeCount() Int {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.XMLParser.get_attribute_count, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Int](abi)
	abi.free()
	return ret
}

func (self XMLParser) GetAttributeName(ctx Context, idx Int) String {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Int](0, abi, idx)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.XMLParser.get_attribute_name, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[uintptr](abi)
	abi.free()
	return mmm.Make[API, String, uintptr](ctx, selfPtr.API, ret)
}

func (self XMLParser) GetAttributeValue(ctx Context, idx Int) String {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Int](0, abi, idx)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.XMLParser.get_attribute_value, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[uintptr](abi)
	abi.free()
	return mmm.Make[API, String, uintptr](ctx, selfPtr.API, ret)
}

func (self XMLParser) HasAttribute(name String) bool {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[String](0, abi, name)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.XMLParser.has_attribute, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self XMLParser) GetNamedAttributeValue(ctx Context, name String) String {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[String](0, abi, name)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.XMLParser.get_named_attribute_value, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[uintptr](abi)
	abi.free()
	return mmm.Make[API, String, uintptr](ctx, selfPtr.API, ret)
}

func (self XMLParser) GetNamedAttributeValueSafe(ctx Context, name String) String {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[String](0, abi, name)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.XMLParser.get_named_attribute_value_safe, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[uintptr](abi)
	abi.free()
	return mmm.Make[API, String, uintptr](ctx, selfPtr.API, ret)
}

func (self XMLParser) IsEmpty() bool {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.XMLParser.is_empty, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[bool](abi)
	abi.free()
	return ret
}

func (self XMLParser) GetCurrentLine() Int {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.XMLParser.get_current_line, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[Int](abi)
	abi.free()
	return ret
}

func (self XMLParser) SkipSection() {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.XMLParser.skip_section, selfPtr.Pointer(), abi.Args(), abi.Back())
	abi.free()
}

func (self XMLParser) SeekTo(position Int) int64 {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[Int](0, abi, position)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.XMLParser.seek, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[int64](abi)
	abi.free()
	return ret
}

func (self XMLParser) Open(file String) int64 {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[String](0, abi, file)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.XMLParser.open, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[int64](abi)
	abi.free()
	return ret
}

func (self XMLParser) OpenBuffer(buffer PackedByteArray) int64 {
	var selfPtr = self.getPointer()
	var abi = selfPtr.API.newFrame()
	frameSet[PackedByteArray](0, abi, buffer)
	selfPtr.API.Object.UnsafeCall(selfPtr.API.methods.XMLParser.open_buffer, selfPtr.Pointer(), abi.Args(), abi.Back())
	var ret = frameGet[int64](abi)
	abi.free()
	return ret
}

func (self XMLParser) virtual(name string) reflect.Value {
	switch name {
	default:
		return self.Super().virtual(name)
	}
}
